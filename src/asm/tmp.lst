PC     Output      Line
040000             0001   	.assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 45 00 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   start:
040045 F5          0012       push af
040046 C5          0013       push bc
040047 D5          0014       push de
040048 DD E5       0015       push ix
04004A FD E5       0016       push iy
04004C             0017   
04004C CD 87 1D 04 0018   	call main
040050             0019   
040050             0020   exit:
040050 FD E1       0021       pop iy
040052 DD E1       0022       pop ix
040054 D1          0023       pop de
040055 C1          0024       pop bc
040056 F1          0025       pop af
040057 21 00 00 00 0026       ld hl,0
04005B C9          0027       ret
04005C             0028   
04005C             0029   ; API includes
04005C             0030       include "mos_api.inc"
04005C             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
04005C             0002*  ;
04005C             0003*  ; Title:	AGON MOS - API for user projects
04005C             0004*  ; Author:	Dean Belfield
04005C             0005*  ;			Adapted for agon-ez80asm by Jeroen Venema
04005C             0006*  ;			Added MOS error codes for return in HL
04005C             0007*  ; Created:	03/08/2022
04005C             0008*  ; Last Updated:	10/08/2023
04005C             0009*  ;
04005C             0010*  ; Modinfo:
04005C             0011*  ; 05/08/2022:	Added mos_feof
04005C             0012*  ; 09/08/2022:	Added system variables: cursorX, cursorY
04005C             0013*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
04005C             0014*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
04005C             0015*  ; 24/09/2022:	Added mos_getError, mos_mkdir
04005C             0016*  ; 13/10/2022:	Added mos_oscli
04005C             0017*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
04005C             0018*  ; 04/03/2023:	Added sysvar_scrpixelIndex
04005C             0019*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
04005C             0020*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
04005C             0021*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
04005C             0022*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
04005C             0023*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
04005C             0024*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
04005C             0025*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
04005C             0026*  ; 19/05/2023:	Added sysvar_scrMode
04005C             0027*  ; 05/06/2023:	Added sysvar_rtcEnable
04005C             0028*  ; 03/08/2023:	Added mos_setkbvector
04005C             0029*  ; 10/08/2023:	Added mos_getkbmap
04005C             0030*  
04005C             0031*  ; VDP control (VDU 23, 0, n)
04005C             0032*  ;
04005C             0033*  vdp_gp:				EQU 80h
04005C             0034*  vdp_keycode:		EQU 81h
04005C             0035*  vdp_cursor:			EQU	82h
04005C             0036*  vdp_scrchar:		EQU	83h
04005C             0037*  vdp_scrpixel:		EQU	84h
04005C             0038*  vdp_audio:			EQU	85h
04005C             0039*  vdp_mode:			EQU	86h
04005C             0040*  vdp_rtc:			EQU	87h
04005C             0041*  vdp_keystate:		EQU	88h
04005C             0042*  vdp_logicalcoords:	EQU	C0h
04005C             0043*  vdp_terminalmode:	EQU	FFh
04005C             0044*  
04005C             0045*  ;
04005C             0046*  ; Macro for calling the API
04005C             0047*  ; Parameters:
04005C             0048*  ; - function: One of the function numbers listed below
04005C             0049*  ;
04005C             0050*  	MACRO	MOSCALL	function
04005C             0051*  			LD	A, function
04005C             0052*  			RST.LIL	08h
04005C             0053*  	ENDMACRO
04005C             0054*  
04005C             0055*  ; MOS high level functions
04005C             0056*  ;
04005C             0057*  ; Get keycode
04005C             0058*  ; Returns:
04005C             0059*  ;  A: ASCII code of key pressed, or 0 if no key pressed
04005C             0060*  mos_getkey:			EQU	00h
04005C             0061*  
04005C             0062*  ; Load an area of memory from a file.
04005C             0063*  ; HLU: Address of filename (zero terminated)
04005C             0064*  ; DEU: Address at which to load
04005C             0065*  ; BCU: Maximum allowed size (bytes)
04005C             0066*  ; Returns:
04005C             0067*  ; - A: File error, or 0 if OK
04005C             0068*  ; - F: Carry reset indicates no room for file.
04005C             0069*  mos_load:			EQU	01h
04005C             0070*  
04005C             0071*  ; Save a file to the SD card from RAM
04005C             0072*  ; HLU: Address of filename (zero terminated)
04005C             0073*  ; DEU: Address to save from
04005C             0074*  ; BCU: Number of bytes to save
04005C             0075*  ; Returns:
04005C             0076*  ; - A: File error, or 0 if OK
04005C             0077*  ; - F: Carry reset indicates no room for file
04005C             0078*  mos_save:			EQU	02h
04005C             0079*  
04005C             0080*  ; Change directory
04005C             0081*  ; HLU: Address of path (zero terminated)
04005C             0082*  ; Returns:
04005C             0083*  ; - A: File error, or 0 if OK
04005C             0084*  mos_cd:				EQU	03h
04005C             0085*  
04005C             0086*  ; Directory listing
04005C             0087*  ; HLU: Address of path (zero terminated)
04005C             0088*  ; Returns:
04005C             0089*  ; - A: File error, or 0 if OK
04005C             0090*  mos_dir:			EQU	04h
04005C             0091*  
04005C             0092*  ; Delete a file from the SD card
04005C             0093*  ; HLU: Address of filename (zero terminated)
04005C             0094*  ; Returns:
04005C             0095*  ; - A: File error, or 0 if OK
04005C             0096*  mos_del:			EQU	05h
04005C             0097*  
04005C             0098*  ; Rename a file on the SD card
04005C             0099*  ; HLU: Address of filename1 (zero terminated)
04005C             0100*  ; DEU: Address of filename2 (zero terminated)
04005C             0101*  ; Returns:
04005C             0102*  ; - A: File error, or 0 if OK
04005C             0103*  mos_ren:			EQU	06h
04005C             0104*  
04005C             0105*  ; Make a folder on the SD card
04005C             0106*  ; HLU: Address of filename (zero terminated)
04005C             0107*  ; Returns:
04005C             0108*  ; - A: File error, or 0 if OK
04005C             0109*  mos_mkdir:			EQU	07h
04005C             0110*  
04005C             0111*  ; Get a pointer to a system variable
04005C             0112*  ; Returns:
04005C             0113*  ; IXU: Pointer to system variables (see mos_api.asm for more details)
04005C             0114*  mos_sysvars:		EQU	08h
04005C             0115*  
04005C             0116*  ; Invoke the line editor
04005C             0117*  ; HLU: Address of the buffer
04005C             0118*  ; BCU: Buffer length
04005C             0119*  ;   E: 0 to not clear buffer, 1 to clear
04005C             0120*  ; Returns:
04005C             0121*  ;   A: Key that was used to exit the input loop (CR=13, ESC=27)
04005C             0122*  mos_editline:		EQU	09h
04005C             0123*  
04005C             0124*  ; Open a file
04005C             0125*  ; HLU: Filename
04005C             0126*  ;   C: Mode
04005C             0127*  ; Returns:
04005C             0128*  ;   A: Filehandle, or 0 if couldn't open
04005C             0129*  mos_fopen:			EQU	0Ah
04005C             0130*  
04005C             0131*  ; Close a file
04005C             0132*  ;   C: Filehandle
04005C             0133*  ; Returns
04005C             0134*  ;   A: Number of files still open
04005C             0135*  mos_fclose:			EQU	0Bh
04005C             0136*  
04005C             0137*  ; Get a character from a file
04005C             0138*  ;   C: Filehandle
04005C             0139*  ; Returns:
04005C             0140*  ;   A: Character read
04005C             0141*  ;   F: C set if last character in file, otherwise NC
04005C             0142*  mos_fgetc:			EQU	0Ch
04005C             0143*  
04005C             0144*  ; Write a character to a file
04005C             0145*  ;   C: Filehandle
04005C             0146*  ;   B: Character to write
04005C             0147*  mos_fputc:			EQU	0Dh
04005C             0148*  
04005C             0149*  ; Check whether we're at the end of the file
04005C             0150*  ;   C: Filehandle
04005C             0151*  ; Returns:
04005C             0152*  ;   A: 1 if at end of file, otherwise 0
04005C             0153*  mos_feof:			EQU	0Eh
04005C             0154*  
04005C             0155*  ; Copy an error message
04005C             0156*  ;   E: The error code
04005C             0157*  ; HLU: Address of buffer to copy message into
04005C             0158*  ; BCU: Size of buffer
04005C             0159*  mos_getError:		EQU	0Fh
04005C             0160*  
04005C             0161*  ; Execute a MOS command
04005C             0162*  ; HLU: Pointer the the MOS command string
04005C             0163*  ; DEU: Pointer to additional command structure
04005C             0164*  ; BCU: Number of additional commands
04005C             0165*  ; Returns:
04005C             0166*  ;   A: MOS error code
04005C             0167*  mos_oscli:			EQU	10h
04005C             0168*  
04005C             0169*  ; Copy a file on the SD card
04005C             0170*  ; HLU: Address of filename1 (zero terminated)
04005C             0171*  ; DEU: Address of filename2 (zero terminated)
04005C             0172*  ; Returns:
04005C             0173*  ; - A: File error, or 0 if OK
04005C             0174*  mos_copy:			EQU	11h
04005C             0175*  
04005C             0176*  ; Fetch a RTC string
04005C             0177*  ; HLU: Pointer to a buffer to copy the string to
04005C             0178*  ; Returns:
04005C             0179*  ;   A: Length of time
04005C             0180*  mos_getrtc:			EQU	12h
04005C             0181*  
04005C             0182*  ; Set the RTC
04005C             0183*  ; HLU: Pointer to a buffer with the time data in
04005C             0184*  mos_setrtc:			EQU	13h
04005C             0185*  
04005C             0186*  ; Set an interrupt vector
04005C             0187*  ; HLU: Pointer to the interrupt vector (24-bit pointer)
04005C             0188*  ;   E: Vector # to set
04005C             0189*  ; Returns:
04005C             0190*  ; HLU: Pointer to the previous vector
04005C             0191*  mos_setintvector:	EQU	14h
04005C             0192*  
04005C             0193*  ; Open UART1
04005C             0194*  ; IXU: Pointer to UART struct
04005C             0195*  ;	+0: Baud rate (24-bit, little endian)
04005C             0196*  ;	+3: Data bits
04005C             0197*  ;	+4: Stop bits
04005C             0198*  ;	+5: Parity bits
04005C             0199*  ;	+6: Flow control (0: None, 1: Hardware)
04005C             0200*  ;	+7: Enabled interrupts
04005C             0201*  ; Returns:
04005C             0202*  ;   A: Error code (0 = no error)
04005C             0203*  mos_uopen:			EQU	15h
04005C             0204*  
04005C             0205*  ; Close UART1
04005C             0206*  mos_uclose:			EQU	16h
04005C             0207*  
04005C             0208*  ; Get a character from UART1
04005C             0209*  ; Returns:
04005C             0210*  ;   A: Character read
04005C             0211*  ;   F: C if successful
04005C             0212*  ;   F: NC if the UART is not open
04005C             0213*  mos_ugetc:			EQU	17h
04005C             0214*  
04005C             0215*  ; Write a character to UART1
04005C             0216*  ;   C: Character to write
04005C             0217*  ; Returns:
04005C             0218*  ;   F: C if successful
04005C             0219*  ;   F: NC if the UART is not open
04005C             0220*  mos_uputc:			EQU	18h
04005C             0221*  
04005C             0222*  ; Convert a file handle to a FIL structure pointer
04005C             0223*  ;   C: Filehandle
04005C             0224*  ; Returns:
04005C             0225*  ; HLU: Pointer to a FIL struct
04005C             0226*  mos_getfil:			EQU	19h
04005C             0227*  
04005C             0228*  ; Read a block of data from a file
04005C             0229*  ;   C: Filehandle
04005C             0230*  ; HLU: Pointer to where to write the data to
04005C             0231*  ; DEU: Number of bytes to read
04005C             0232*  ; Returns:
04005C             0233*  ; DEU: Number of bytes read
04005C             0234*  mos_fread:			EQU	1Ah
04005C             0235*  
04005C             0236*  ; Write a block of data to a file
04005C             0237*  ;  C: Filehandle
04005C             0238*  ; HLU: Pointer to where the data is
04005C             0239*  ; DEU: Number of bytes to write
04005C             0240*  ; Returns:
04005C             0241*  ; DEU: Number of bytes read
04005C             0242*  mos_fwrite:			EQU	1Bh
04005C             0243*  
04005C             0244*  ; Move the read/write pointer in a file
04005C             0245*  ;   C: Filehandle
04005C             0246*  ; HLU: Least significant 3 bytes of the offset from the start of the file (DWORD)
04005C             0247*  ;   E: Most significant byte of the offset
04005C             0248*  ; Returns:
04005C             0249*  ;   A: FRESULT
04005C             0250*  mos_flseek:			EQU	1Ch
04005C             0251*  
04005C             0252*  ; Move the read/write pointer in a file relative to the current position
04005C             0253*  ;   C: Filehandle
04005C             0254*  ; DEU: Signed 24-bit offset
04005C             0255*  ; Returns:
04005C             0256*  ;   A: FRESULT
04005C             0257*  mos_api_flseek_rel:
04005C C5          0258*  	push bc ; back up file handle in c
04005D D5          0259*  	push de ; save offset
04005E             0260*  	MOSCALL mos_getfil
04005E 3E 19       0001*M 			LD	A, function
040060 5B CF       0002*M 			RST.LIL	08h
040062 E5          0261*  	push hl
040063 FD E1       0262*  	pop iy ; iy points to FIL struct
040065 FD 27 11    0263*  	ld hl,(iy+fil_fptr) ; get lowest 3 bytes of current position
040068 AF          0264*  	xor a ; clear carry
040069 D1          0265*  	pop de ; restore offset
04006A ED 5A       0266*  	adc hl,de ; adc the offset because we need sign flag
04006C F2 74 00 04 0267*  	jp p,@not_neg
040070 21 00 00 00 0268*  	ld hl,0 ; seek to beginning of file
040074             0269*  @not_neg:
040074 C1          0270*  	pop bc ; restore file handle to c
040075 1E 00       0271*  	ld e,0 ; highest byte of offset
040077             0272*  	MOSCALL mos_flseek
040077 3E 1C       0001*M 			LD	A, function
040079 5B CF       0002*M 			RST.LIL	08h
04007B C9          0273*  	ret
04007C             0274*  
04007C             0275*  ; Set a VDP keyboard packet receiver callback
04007C             0276*  ;   C: If non-zero then set the top byte of HLU(callback address)  to MB (for ADL=0 callers)
04007C             0277*  ; HLU: Pointer to callback
04007C             0278*  mos_setkbvector:	EQU	1Dh
04007C             0279*  
04007C             0280*  ; Get the address of the keyboard map
04007C             0281*  ; Returns:
04007C             0282*  ; IXU: Base address of the keymap
04007C             0283*  mos_getkbmap:		EQU	1Eh
04007C             0284*  
04007C             0285*  ; MOS program exit codes
04007C             0286*  ;
04007C             0287*  EXIT_OK:				EQU  0;	"OK",
04007C             0288*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
04007C             0289*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
04007C             0290*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
04007C             0291*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
04007C             0292*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
04007C             0293*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
04007C             0294*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
04007C             0295*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
04007C             0296*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
04007C             0297*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
04007C             0298*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
04007C             0299*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
04007C             0300*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
04007C             0301*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
04007C             0302*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
04007C             0303*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
04007C             0304*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
04007C             0305*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
04007C             0306*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
04007C             0307*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
04007C             0308*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
04007C             0309*  
04007C             0310*  ; FatFS file access functions
04007C             0311*  ;
04007C             0312*  ; Open a file
04007C             0313*  ; HLU: Pointer to a blank FIL struct
04007C             0314*  ; DEU: Pointer to the filename (0 terminated)
04007C             0315*  ;   C: File mode
04007C             0316*  ; Returns:
04007C             0317*  ;   A: FRESULT
04007C             0318*  ffs_fopen:			EQU	80h
04007C             0319*  
04007C             0320*  ; Close a file
04007C             0321*  ; HLU: Pointer to a blank FIL struct
04007C             0322*  ; Returns:
04007C             0323*  ;   A: FRESULT
04007C             0324*  ffs_fclose:			EQU	81h
04007C             0325*  
04007C             0326*  ; Read data from a file
04007C             0327*  ; HLU: Pointer to a FIL struct
04007C             0328*  ; DEU: Pointer to where to write the file out
04007C             0329*  ; BCU: Number of bytes to read
04007C             0330*  ; Returns:
04007C             0331*  ;   A: FRESULT
04007C             0332*  ; BCU: Number of bytes read
04007C             0333*  ffs_fread:			EQU	82h
04007C             0334*  
04007C             0335*  ; Write data to a file
04007C             0336*  ; HLU: Pointer to a FIL struct
04007C             0337*  ; DEU: Pointer to the data to write out
04007C             0338*  ; BCU: Number of bytes to write
04007C             0339*  ; Returns:
04007C             0340*  ;   A: FRESULT
04007C             0341*  ; BCU: Number of bytes written
04007C             0342*  ffs_fwrite:			EQU	83h
04007C             0343*  
04007C             0344*  ; Move the read/write pointer in a file
04007C             0345*  ; HLU: Pointer to a FIL struct
04007C             0346*  ; DEU: Least significant 3 bytes of the offset from the start of the file (DWORD)
04007C             0347*  ;   C: Most significant byte of the offset
04007C             0348*  ; Returns:
04007C             0349*  ;   A: FRESULT
04007C             0350*  ffs_flseek:			EQU	84h
04007C             0351*  
04007C             0352*  ; not implemented
04007C             0353*  ffs_ftruncate:		EQU	85h
04007C             0354*  
04007C             0355*  ; not implemented
04007C             0356*  ffs_fsync:			EQU	86h
04007C             0357*  
04007C             0358*  ; not implemented
04007C             0359*  ffs_fforward:		EQU	87h
04007C             0360*  
04007C             0361*  ; not implemented
04007C             0362*  ffs_fexpand:		EQU	88h
04007C             0363*  
04007C             0364*  ; not implemented
04007C             0365*  ffs_fgets:			EQU	89h
04007C             0366*  
04007C             0367*  ; not implemented
04007C             0368*  ffs_fputc:			EQU	8Ah
04007C             0369*  
04007C             0370*  ; not implemented
04007C             0371*  ffs_fputs:			EQU	8Bh
04007C             0372*  
04007C             0373*  ; not implemented
04007C             0374*  ffs_fprintf:		EQU	8Ch
04007C             0375*  
04007C             0376*  ; not implemented
04007C             0377*  ffs_ftell:			EQU	8Dh
04007C             0378*  
04007C             0379*  ; Check for EOF
04007C             0380*  ; HLU: Pointer to a FILINFO struct
04007C             0381*  ; Returns:
04007C             0382*  ;   A: 1 if end of file, otherwise 0
04007C             0383*  ffs_feof:			EQU	8Eh
04007C             0384*  
04007C             0385*  ; not implemented
04007C             0386*  ffs_fsize:			EQU	8Fh
04007C             0387*  
04007C             0388*  ; not implemented
04007C             0389*  ffs_ferror:			EQU	90h
04007C             0390*  
04007C             0391*  ; FatFS directory access functions
04007C             0392*  ;
04007C             0393*  ; Open a directory
04007C             0394*  ; HLU: Pointer to a blank DIR struct
04007C             0395*  ; DEU: Pointer to the directory path
04007C             0396*  ; Returns:
04007C             0397*  ; A: FRESULT
04007C             0398*  ffs_dopen:			EQU	91h
04007C             0399*  
04007C             0400*  ; Close a directory
04007C             0401*  ; HLU: Pointer to an open DIR struct
04007C             0402*  ; Returns:
04007C             0403*  ; A: FRESULT
04007C             0404*  ffs_dclose:			EQU	92h
04007C             0405*  
04007C             0406*  ; Read the next FILINFO from an open DIR
04007C             0407*  ; HLU: Pointer to an open DIR struct
04007C             0408*  ; DEU: Pointer to an empty FILINFO struct
04007C             0409*  ; Returns:
04007C             0410*  ; A: FRESULT
04007C             0411*  ffs_dread:			EQU	93h
04007C             0412*  
04007C             0413*  ; not implemented
04007C             0414*  ffs_dfindfirst:		EQU	94h
04007C             0415*  
04007C             0416*  ; not implemented
04007C             0417*  ffs_dfindnext:		EQU	95h
04007C             0418*  
04007C             0419*  ; FatFS file and directory management functions
04007C             0420*  ;
04007C             0421*  ; Check file exists
04007C             0422*  ; HLU: Pointer to a FILINFO struct
04007C             0423*  ; DEU: Pointer to the filename (0 terminated)
04007C             0424*  ; Returns:
04007C             0425*  ;   A: FRESULT
04007C             0426*  ffs_stat:			EQU	96h
04007C             0427*  
04007C             0428*  ; not implemented
04007C             0429*  ffs_unlink:			EQU	97h
04007C             0430*  
04007C             0431*  ; not implemented
04007C             0432*  ffs_rename:			EQU	98h
04007C             0433*  
04007C             0434*  ; not implemented
04007C             0435*  ffs_chmod:			EQU	99h
04007C             0436*  
04007C             0437*  ; not implemented
04007C             0438*  ffs_utime:			EQU	9Ah
04007C             0439*  
04007C             0440*  ; not implemented
04007C             0441*  ffs_mkdir:			EQU	9Bh
04007C             0442*  
04007C             0443*  ; not implemented
04007C             0444*  ffs_chdir:			EQU	9Ch
04007C             0445*  
04007C             0446*  ; not implemented
04007C             0447*  ffs_chdrive:		EQU	9Dh
04007C             0448*  
04007C             0449*  ; Copy the current directory (string) into buffer (hl)
04007C             0450*  ; HLU: Pointer to a buffer
04007C             0451*  ; BCU: Maximum length of buffer
04007C             0452*  ; Returns:
04007C             0453*  ; A: FRESULT
04007C             0454*  ffs_getcwd:			EQU	9Eh
04007C             0455*  
04007C             0456*  ; FatFS volume management and system configuration functions
04007C             0457*  ;
04007C             0458*  ; not implemented
04007C             0459*  ffs_mount:			EQU	9Fh
04007C             0460*  
04007C             0461*  ; not implemented
04007C             0462*  ffs_mkfs:			EQU	A0h
04007C             0463*  
04007C             0464*  ; not implemented
04007C             0465*  ffs_fdisk:			EQU	A1h
04007C             0466*  
04007C             0467*  ; not implemented
04007C             0468*  ffs_getfree:		EQU	A2h
04007C             0469*  
04007C             0470*  ; not implemented
04007C             0471*  ffs_getlabel:		EQU	A3h
04007C             0472*  
04007C             0473*  ; not implemented
04007C             0474*  ffs_setlabel:		EQU	A4h
04007C             0475*  
04007C             0476*  ; not implemented
04007C             0477*  ffs_setcp:			EQU	A5h
04007C             0478*  
04007C             0479*  ; File access modes
04007C             0480*  ;
04007C             0481*  fa_read:			EQU	01h
04007C             0482*  fa_write:			EQU	02h
04007C             0483*  fa_open_existing:	EQU	00h
04007C             0484*  fa_create_new:		EQU	04h
04007C             0485*  fa_create_always:	EQU	08h
04007C             0486*  fa_open_always:		EQU	10h
04007C             0487*  fa_open_append:		EQU	30h
04007C             0488*  
04007C             0489*  ; System variable indexes for api_sysvars
04007C             0490*  ; Index into _sysvars in globals.asm
04007C             0491*  ;
04007C             0492*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
04007C             0493*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
04007C             0494*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
04007C             0495*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
04007C             0496*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
04007C             0497*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
04007C             0498*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
04007C             0499*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
04007C             0500*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
04007C             0501*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
04007C             0502*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
04007C             0503*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
04007C             0504*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
04007C             0505*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
04007C             0506*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
04007C             0507*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
04007C             0508*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
04007C             0509*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
04007C             0510*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
04007C             0511*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
04007C             0512*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
04007C             0513*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
04007C             0514*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
04007C             0515*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
04007C             0516*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
04007C             0517*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
04007C             0518*  
04007C             0519*  ; Flags for the VPD protocol
04007C             0520*  ;
04007C             0521*  vdp_pflag_cursor:		EQU	00000001b
04007C             0522*  vdp_pflag_scrchar:		EQU	00000010b
04007C             0523*  vdp_pflag_point:		EQU	00000100b
04007C             0524*  vdp_pflag_audio:		EQU	00001000b
04007C             0525*  vdp_pflag_mode:			EQU	00010000b
04007C             0526*  vdp_pflag_rtc:			EQU	00100000b
04007C             0527*  
04007C             0528*  ;
04007C             0529*  ; FatFS structures
04007C             0530*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
04007C             0531*  ;
04007C             0532*  ; Object ID and allocation information (FFOBJID)
04007C             0533*  ;
04007C             0534*  ; Indexes into FFOBJID structure
04007C             0535*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
04007C             0536*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
04007C             0537*  ffobjid_attr:		EQU	5	; 1: Object attribute
04007C             0538*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
04007C             0539*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
04007C             0540*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
04007C             0541*  ;
04007C             0542*  ; File object structure (FIL)
04007C             0543*  ;
04007C             0544*  ; Indexes into FIL structure
04007C             0545*  fil_obj:		EQU 0	; 15: Object identifier
04007C             0546*  fil_flag:		EQU	15 	;  1: File status flags
04007C             0547*  fil_err:		EQU	16	;  1: Abort flag (error code)
04007C             0548*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
04007C             0549*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
04007C             0550*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
04007C             0551*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
04007C             0552*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
04007C             0553*  ;
04007C             0554*  ; Directory object structure (DIR)
04007C             0555*  ; Indexes into DIR structure
04007C             0556*  dir_obj:		EQU  0	; 15: Object identifier
04007C             0557*  dir_dptr:		EQU	15	;  4: Current read/write offset
04007C             0558*  dir_clust:		EQU	19	;  4: Current cluster
04007C             0559*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
04007C             0560*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
04007C             0561*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
04007C             0562*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
04007C             0563*  ;
04007C             0564*  ; File information structure (FILINFO)
04007C             0565*  ;
04007C             0566*  ; Indexes into FILINFO structure
04007C             0567*  filinfo_fsize:		EQU 0	;   4: File size
04007C             0568*  filinfo_fdate:		EQU	4	;   2: Modified date
04007C             0569*  filinfo_ftime:		EQU	6	;   2: Modified time
04007C             0570*  filinfo_fattrib:	EQU	8	;   1: File attribute
04007C             0571*  filinfo_altname:	EQU	9	;  13: Alternative file name
04007C             0572*  filinfo_fname:		EQU	22	; 256: Primary file name
04007C             0031       include "functions.inc"
04007C             0001*      MACRO printChar char
04007C             0002*          LD A, char
04007C             0003*          RST.LIL 10h
04007C             0004*      ENDMACRO
04007C             0005*  
04007C             0006*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
04007C             0007*  ; Print a zero-terminated string
04007C             0008*  ; HL: Pointer to string
04007C             0009*  printString:
04007C C5          0010*  	PUSH	BC
04007D 01 00 00 00 0011*  	LD		BC,0
040081 3E 00       0012*  	LD 	 	A,0
040083 5B DF       0013*  	RST.LIL 18h
040085 C1          0014*  	POP		BC
040086 C9          0015*  	RET
040087             0016*  ; print a VDU sequence
040087             0017*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
040087             0018*  sendVDUsequence:
040087 C5          0019*  	PUSH	BC
040088 01 00 00 00 0020*  	LD		BC, 0
04008C 4E          0021*  	LD		C, (HL)
04008D 5B DF       0022*  	RST.LIL	18h
04008F C1          0023*  	POP		BC
040090 C9          0024*  	RET
040091             0025*  ; Print Newline sequence to VDP
040091             0026*  printNewLine:
040091 F5          0027*      push af ; for some reason rst.lil 10h sets carry flag
040092 3E 0D       0028*  	LD	A, '\r'
040094 5B D7       0029*  	RST.LIL 10h
040096 3E 0A       0030*  	LD	A, '\n'
040098 5B D7       0031*  	RST.LIL 10h
04009A F1          0032*      pop af
04009B C9          0033*  	RET
04009C             0034*  ; Print a 24-bit HEX number
04009C             0035*  ; HLU: Number to print
04009C             0036*  printHex24:
04009C E5          0037*  	PUSH	HL
04009D 21 02 00 00 0038*  	LD		HL, 2
0400A1 39          0039*  	ADD		HL, SP
0400A2 7E          0040*  	LD		A, (HL)
0400A3 E1          0041*  	POP		HL
0400A4 CD AE 00 04 0042*  	CALL	printHex8
0400A8             0043*  ; Print a 16-bit HEX number
0400A8             0044*  ; HL: Number to print
0400A8             0045*  printHex16:
0400A8 7C          0046*  	LD		A,H
0400A9 CD AE 00 04 0047*  	CALL	printHex8
0400AD 7D          0048*  	LD		A,L
0400AE             0049*  ; Print an 8-bit HEX number
0400AE             0050*  ; A: Number to print
0400AE             0051*  printHex8:
0400AE 4F          0052*  	LD		C,A
0400AF 1F          0053*  	RRA
0400B0 1F          0054*  	RRA
0400B1 1F          0055*  	RRA
0400B2 1F          0056*  	RRA
0400B3 CD B8 00 04 0057*  	CALL	@F
0400B7 79          0058*  	LD		A,C
0400B8             0059*  @@:
0400B8 E6 0F       0060*  	AND		0Fh
0400BA C6 90       0061*  	ADD		A,90h
0400BC 27          0062*  	DAA
0400BD CE 40       0063*  	ADC		A,40h
0400BF 27          0064*  	DAA
0400C0 5B D7       0065*  	RST.LIL	10h
0400C2 C9          0066*  	RET
0400C3             0067*  
0400C3             0068*  ; Print a 0x HEX prefix
0400C3             0069*  DisplayHexPrefix:
0400C3 3E 30       0070*  	LD	A, '0'
0400C5 5B D7       0071*  	RST.LIL 10h
0400C7 3E 78       0072*  	LD	A, 'x'
0400C9 5B D7       0073*  	RST.LIL 10h
0400CB C9          0074*  	RET
0400CC             0075*  
0400CC             0076*      MACRO printDecBC
0400CC             0077*          push hl
0400CC             0078*          push bc
0400CC             0079*          pop hl
0400CC             0080*          call printDec
0400CC             0081*          pop hl
0400CC             0082*      ENDMACRO
0400CC             0083*  
0400CC             0084*      MACRO printDecDE
0400CC             0085*          push hl
0400CC             0086*          push de
0400CC             0087*          pop hl
0400CC             0088*          call printDec
0400CC             0089*          pop hl
0400CC             0090*      ENDMACRO
0400CC             0091*  
0400CC             0092*      MACRO printDecHL
0400CC             0093*          call printDec
0400CC             0094*      ENDMACRO
0400CC             0095*  
0400CC             0096*      MACRO printDecIX
0400CC             0097*          push hl
0400CC             0098*          push ix
0400CC             0099*          pop hl
0400CC             0100*          call printDec
0400CC             0101*          pop hl
0400CC             0102*      ENDMACRO
0400CC             0103*  
0400CC             0104*      MACRO printDecIY
0400CC             0105*          push hl
0400CC             0106*          push iy
0400CC             0107*          pop hl
0400CC             0108*          call printDec
0400CC             0109*          pop hl
0400CC             0110*      ENDMACRO
0400CC             0111*  
0400CC             0112*  ; Prints the right justified decimal value in HL without leading zeroes
0400CC             0113*  ; HL : Value to print
0400CC             0114*  printDec:
0400CC             0115*  ; BEGIN MY CODE
0400CC             0116*  ; back up all the things
0400CC F5          0117*      push af
0400CD C5          0118*      push bc
0400CE D5          0119*      push de
0400CF E5          0120*      push hl
0400D0             0121*  ; END MY CODE
0400D0 11 F8 00 04 0122*  	LD	 DE, _printDecBuffer
0400D4 CD 01 01 04 0123*  	CALL Num2String
0400D8             0124*  ; BEGIN MY CODE
0400D8             0125*  ; replace leading zeroes with spaces
0400D8 21 F8 00 04 0126*      LD	 HL, _printDecBuffer
0400DC 06 07       0127*      ld   B, 7 ; if HL was 0, we want to keep the final zero
0400DE             0128*  @loop:
0400DE 7E          0129*      LD	 A, (HL)
0400DF FE 30       0130*      CP	 '0'
0400E1 C2 EF 00 04 0131*      JP	 NZ, @done
0400E5 3E 20       0132*      LD   A, ' '
0400E7 77          0133*      LD	 (HL), A
0400E8 23          0134*      INC	 HL
0400E9 CD 5B 19 04 0135*      CALL vdu_cursor_forward
0400ED 10 EF       0136*      DJNZ @loop
0400EF             0137*  @done:
0400EF             0138*  ; END MY CODE
0400EF             0139*  	; LD	 HL, _printDecBuffer
0400EF CD 7C 00 04 0140*  	CALL printString
0400F3             0141*  ; BEGIN MY CODE
0400F3             0142*  ; restore all the things
0400F3 E1          0143*      pop hl
0400F4 D1          0144*      pop de
0400F5 C1          0145*      pop bc
0400F6 F1          0146*      pop af
0400F7             0147*  ; END MY CODE
0400F7 C9          0148*  	RET
0400F8 00 00 00 00 0149*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
040101             0150*  
040101             0151*  ; This routine converts the value from HL into it's ASCII representation,
040101             0152*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040101             0153*  ; so it will allways be 8 characters length
040101             0154*  ; HL : Value to convert to string
040101             0155*  ; DE : pointer to buffer, at least 8 byte + 0
040101             0156*  Num2String:
040101 01 80 69 67 0157*  	LD	 BC,-10000000
040105 CD 38 01 04 0158*  	CALL OneDigit
040109 01 C0 BD F0 0159*  	LD	 BC,-1000000
04010D CD 38 01 04 0160*  	CALL OneDigit
040111 01 60 79 FE 0161*  	LD	 BC,-100000
040115 CD 38 01 04 0162*  	CALL OneDigit
040119 01 F0 D8 FF 0163*  	LD   BC,-10000
04011D CD 38 01 04 0164*  	CALL OneDigit
040121 01 18 FC FF 0165*  	LD   BC,-1000
040125 CD 38 01 04 0166*  	CALL OneDigit
040129 01 9C FF FF 0167*  	LD   BC,-100
04012D CD 38 01 04 0168*  	CALL OneDigit
040131 0E F6       0169*  	LD   C,-10
040133 CD 38 01 04 0170*  	CALL OneDigit
040137 48          0171*  	LD   C,B
040138             0172*  OneDigit:
040138 3E 2F       0173*  	LD   A,'0'-1
04013A             0174*  DivideMe:
04013A 3C          0175*  	INC  A
04013B 09          0176*  	ADD  HL,BC
04013C 38 FC       0177*  	JR   C,DivideMe
04013E ED 42       0178*  	SBC  HL,BC
040140 12          0179*  	LD   (DE),A
040141 13          0180*  	INC  DE
040142 C9          0181*  	RET
040143             0182*  
040143             0183*  
040143             0184*  ; #### new functions added by Brandon R. Gates ####
040143             0185*  
040143             0186*  ; print the binary representation of the 8-bit value in a
040143             0187*  ; destroys a, hl, bc
040143             0188*  printBin8:
040143 06 08       0189*      ld b,8      ; loop counter for 8 bits
040145 21 60 01 04 0190*      ld hl,@cmd  ; set hl to the low byte of the output string
040149             0191*                  ; (which will be the high bit of the value in a)
040149             0192*  @loop:
040149 07          0193*      rlca ; put the next highest bit into carry
04014A 38 04       0194*      jr c,@one
04014C 36 30       0195*      ld (hl),'0'
04014E 18 02       0196*      jr @next_bit
040150             0197*  @one:
040150 36 31       0198*      ld (hl),'1'
040152             0199*  @next_bit:
040152 23          0200*      inc hl
040153 10 F4       0201*      djnz @loop
040155             0202*  ; print it
040155 21 60 01 04 0203*  	ld hl,@cmd
040159 01 08 00 00 0204*  	ld bc,@end-@cmd
04015D 5B DF       0205*  	rst.lil $18
04015F C9          0206*  	ret
040160             0207*  @cmd: ds 8 ; eight bytes for eight bits
040168             0208*  @end:
040168             0209*  
040168             0210*  ; print the binary representation of the 8-bit value in a
040168             0211*  ; in reverse order (lsb first)
040168             0212*  ; destroys a, hl, bc
040168             0213*  printBin8Rev:
040168 06 08       0214*      ld b,8      ; loop counter for 8 bits
04016A 21 85 01 04 0215*      ld hl,@cmd  ; set hl to the low byte of the output string
04016E             0216*                  ; (which will be the high bit of the value in a)
04016E             0217*  @loop:
04016E 0F          0218*      rrca ; put the next lowest bit into carry
04016F 38 04       0219*      jr c,@one
040171 36 30       0220*      ld (hl),'0'
040173 18 02       0221*      jr @next_bit
040175             0222*  @one:
040175 36 31       0223*      ld (hl),'1'
040177             0224*  @next_bit:
040177 23          0225*      inc hl
040178 10 F4       0226*      djnz @loop
04017A             0227*  ; print it
04017A 21 85 01 04 0228*  	ld hl,@cmd
04017E 01 08 00 00 0229*  	ld bc,@end-@cmd
040182 5B DF       0230*  	rst.lil $18
040184 C9          0231*  	ret
040185             0232*  @cmd: ds 8 ; eight bytes for eight bits
04018D             0233*  @end:
04018D             0234*  
04018D             0235*  ; print registers to screen in hexidecimal format
04018D             0236*  ; inputs: none
04018D             0237*  ; outputs: values of every register printed to screen
04018D             0238*  ;    values of each register in global scratch memory
04018D             0239*  ; destroys: nothing
04018D             0240*  stepRegistersHex:
04018D             0241*  ; store everything in scratch
04018D 22 90 03 04 0242*      ld (uhl),hl
040191 ED 43 93 03 0243*      ld (ubc),bc
       04          
040196 ED 53 96 03 0244*      ld (ude),de
       04          
04019B DD 22 99 03 0245*      ld (uix),ix
       04          
0401A0 FD 22 9C 03 0246*      ld (uiy),iy
       04          
0401A5 F5          0247*      push af ; fml
0401A6 E1          0248*      pop hl  ; thanks, zilog
0401A7 22 8D 03 04 0249*      ld (uaf),hl
0401AB F5          0250*      push af ; dammit
0401AC             0251*  
0401AC             0252*  ; home the cursor
0401AC CD 3A 19 04 0253*      call vdu_home_cursor
0401B0             0254*  
0401B0             0255*  ; print each register
0401B0 21 19 03 04 0256*      ld hl,str_afu
0401B4 CD 7C 00 04 0257*      call printString
0401B8 2A 8D 03 04 0258*      ld hl,(uaf)
0401BC CD 9C 00 04 0259*      call printHex24
0401C0 CD 91 00 04 0260*      call printNewLine
0401C4             0261*  
0401C4 21 1D 03 04 0262*      ld hl,str_hlu
0401C8 CD 7C 00 04 0263*      call printString
0401CC 2A 90 03 04 0264*      ld hl,(uhl)
0401D0 CD 9C 00 04 0265*      call printHex24
0401D4 CD 91 00 04 0266*      call printNewLine
0401D8             0267*  
0401D8 21 21 03 04 0268*      ld hl,str_bcu
0401DC CD 7C 00 04 0269*      call printString
0401E0 2A 93 03 04 0270*      ld hl,(ubc)
0401E4 CD 9C 00 04 0271*      call printHex24
0401E8 CD 91 00 04 0272*      call printNewLine
0401EC             0273*  
0401EC 21 25 03 04 0274*      ld hl,str_deu
0401F0 CD 7C 00 04 0275*      call printString
0401F4 2A 96 03 04 0276*      ld hl,(ude)
0401F8 CD 9C 00 04 0277*      call printHex24
0401FC CD 91 00 04 0278*      call printNewLine
040200             0279*  
040200 21 29 03 04 0280*      ld hl,str_ixu
040204 CD 7C 00 04 0281*      call printString
040208 2A 99 03 04 0282*      ld hl,(uix)
04020C CD 9C 00 04 0283*      call printHex24
040210 CD 91 00 04 0284*      call printNewLine
040214             0285*  
040214 21 2D 03 04 0286*      ld hl,str_iyu
040218 CD 7C 00 04 0287*      call printString
04021C 2A 9C 03 04 0288*      ld hl,(uiy)
040220 CD 9C 00 04 0289*      call printHex24
040224 CD 91 00 04 0290*      call printNewLine
040228             0291*  
040228             0292*      ; call vsync
040228             0293*  
040228 CD 91 00 04 0294*      call printNewLine
04022C             0295*  
04022C             0296*  ; check for right shift key and quit if pressed
04022C             0297*  	MOSCALL mos_getkbmap
04022C 3E 1E       0001*M 			LD	A, function
04022E 5B CF       0002*M 			RST.LIL	08h
040230             0298*  @stayhere:
040230             0299*  ; 7 RightShift
040230 DD CB 00 76 0300*      bit 6,(ix+0)
040234 20 02       0301*      jr nz,@RightShift
040236 18 F8       0302*      jr @stayhere
040238             0303*  @RightShift:
040238 DD CB 0E 86 0304*      res 0,(ix+14) ; debounce the key (hopefully)
04023C 3E 80       0305*      ld a,%10000000
04023E CD 1A 19 04 0306*      call multiPurposeDelay
040242             0307*  
040242             0308*  ; restore everything
040242 2A 90 03 04 0309*      ld hl, (uhl)
040246 ED 4B 93 03 0310*      ld bc, (ubc)
       04          
04024B ED 5B 96 03 0311*      ld de, (ude)
       04          
040250 DD 2A 99 03 0312*      ld ix, (uix)
       04          
040255 FD 2A 9C 03 0313*      ld iy, (uiy)
       04          
04025A F1          0314*      pop af
04025B             0315*  ; all done
04025B C9          0316*      ret
04025C             0317*  
04025C             0318*  ; print registers to screen in hexidecimal format
04025C             0319*  ; inputs: none
04025C             0320*  ; outputs: values of every register printed to screen
04025C             0321*  ;    values of each register in global scratch memory
04025C             0322*  ; destroys: nothing
04025C             0323*  dumpRegistersHex:
04025C             0324*  ; store everything in scratch
04025C 22 90 03 04 0325*      ld (uhl),hl
040260 ED 43 93 03 0326*      ld (ubc),bc
       04          
040265 ED 53 96 03 0327*      ld (ude),de
       04          
04026A DD 22 99 03 0328*      ld (uix),ix
       04          
04026F FD 22 9C 03 0329*      ld (uiy),iy
       04          
040274 F5          0330*      push af ; fml
040275 E1          0331*      pop hl  ; thanks, zilog
040276 22 8D 03 04 0332*      ld (uaf),hl
04027A F5          0333*      push af ; dammit
04027B             0334*  
04027B             0335*  ; home the cursor
04027B             0336*      ; call vdu_home_cursor
04027B CD 91 00 04 0337*      call printNewLine
04027F             0338*  
04027F             0339*  ; print each register
04027F 21 19 03 04 0340*      ld hl,str_afu
040283 CD 7C 00 04 0341*      call printString
040287 2A 8D 03 04 0342*      ld hl,(uaf)
04028B CD 9C 00 04 0343*      call printHex24
04028F CD 91 00 04 0344*      call printNewLine
040293             0345*  
040293 21 1D 03 04 0346*      ld hl,str_hlu
040297 CD 7C 00 04 0347*      call printString
04029B 2A 90 03 04 0348*      ld hl,(uhl)
04029F CD 9C 00 04 0349*      call printHex24
0402A3 CD 91 00 04 0350*      call printNewLine
0402A7             0351*  
0402A7 21 21 03 04 0352*      ld hl,str_bcu
0402AB CD 7C 00 04 0353*      call printString
0402AF 2A 93 03 04 0354*      ld hl,(ubc)
0402B3 CD 9C 00 04 0355*      call printHex24
0402B7 CD 91 00 04 0356*      call printNewLine
0402BB             0357*  
0402BB 21 25 03 04 0358*      ld hl,str_deu
0402BF CD 7C 00 04 0359*      call printString
0402C3 2A 96 03 04 0360*      ld hl,(ude)
0402C7 CD 9C 00 04 0361*      call printHex24
0402CB CD 91 00 04 0362*      call printNewLine
0402CF             0363*  
0402CF 21 29 03 04 0364*      ld hl,str_ixu
0402D3 CD 7C 00 04 0365*      call printString
0402D7 2A 99 03 04 0366*      ld hl,(uix)
0402DB CD 9C 00 04 0367*      call printHex24
0402DF CD 91 00 04 0368*      call printNewLine
0402E3             0369*  
0402E3 21 2D 03 04 0370*      ld hl,str_iyu
0402E7 CD 7C 00 04 0371*      call printString
0402EB 2A 9C 03 04 0372*      ld hl,(uiy)
0402EF CD 9C 00 04 0373*      call printHex24
0402F3 CD 91 00 04 0374*      call printNewLine
0402F7             0375*  
0402F7 CD D1 19 04 0376*      call vdu_vblank
0402FB             0377*  
0402FB CD 91 00 04 0378*      call printNewLine
0402FF             0379*  ; restore everything
0402FF 2A 90 03 04 0380*      ld hl, (uhl)
040303 ED 4B 93 03 0381*      ld bc, (ubc)
       04          
040308 ED 5B 96 03 0382*      ld de, (ude)
       04          
04030D DD 2A 99 03 0383*      ld ix, (uix)
       04          
040312 FD 2A 9C 03 0384*      ld iy, (uiy)
       04          
040317 F1          0385*      pop af
040318             0386*  ; all done
040318 C9          0387*      ret
040319             0388*  
040319 61 66 3D 00 0389*  str_afu: db "af=",0
04031D 68 6C 3D 00 0390*  str_hlu: db "hl=",0
040321 62 63 3D 00 0391*  str_bcu: db "bc=",0
040325 64 65 3D 00 0392*  str_deu: db "de=",0
040329 69 78 3D 00 0393*  str_ixu: db "ix=",0
04032D 69 79 3D 00 0394*  str_iyu: db "iy=",0
040331             0395*  
040331             0396*  ; print udeuhl to screen in hexidecimal format
040331             0397*  ; inputs: none
040331             0398*  ; outputs: concatenated hexidecimal udeuhl
040331             0399*  ; destroys: nothing
040331             0400*  dumpUDEUHLHex:
040331             0401*  ; store everything in scratch
040331 22 90 03 04 0402*      ld (uhl),hl
040335 ED 43 93 03 0403*      ld (ubc),bc
       04          
04033A ED 53 96 03 0404*      ld (ude),de
       04          
04033F DD 22 99 03 0405*      ld (uix),ix
       04          
040344 FD 22 9C 03 0406*      ld (uiy),iy
       04          
040349 F5          0407*      push af
04034A             0408*  
04034A             0409*  ; print each register
04034A             0410*  
04034A 21 84 03 04 0411*      ld hl,str_udeuhl
04034E CD 7C 00 04 0412*      call printString
040352 2A 96 03 04 0413*      ld hl,(ude)
040356 CD 9C 00 04 0414*      call printHex24
04035A 3E 2E       0415*  	ld a,'.'	; print a dot to separate the values
04035C 5B D7       0416*  	rst.lil 10h
04035E 2A 90 03 04 0417*      ld hl,(uhl)
040362 CD 9C 00 04 0418*      call printHex24
040366 CD 91 00 04 0419*      call printNewLine
04036A             0420*  
04036A             0421*  ; restore everything
04036A 2A 90 03 04 0422*      ld hl, (uhl)
04036E ED 4B 93 03 0423*      ld bc, (ubc)
       04          
040373 ED 5B 96 03 0424*      ld de, (ude)
       04          
040378 DD 2A 99 03 0425*      ld ix, (uix)
       04          
04037D FD 2A 9C 03 0426*      ld iy, (uiy)
       04          
040382 F1          0427*      pop af
040383             0428*  ; all done
040383 C9          0429*      ret
040384             0430*  
040384 75 64 65 2E 0431*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04038D             0432*  
04038D             0433*  ; global scratch memory for registers
04038D 00 00 00    0434*  uaf: dl 0
040390 00 00 00    0435*  uhl: dl 0
040393 00 00 00    0436*  ubc: dl 0
040396 00 00 00    0437*  ude: dl 0
040399 00 00 00    0438*  uix: dl 0
04039C 00 00 00    0439*  uiy: dl 0
04039F 00 00 00    0440*  usp: dl 0
0403A2 00 00 00    0441*  upc: dl 0
0403A5             0442*  
0403A5             0443*  ; inputs: whatever is in the flags register
0403A5             0444*  ; outputs: binary representation of flags
0403A5             0445*  ;          with a header so we know which is what
0403A5             0446*  ; destroys: nothing
0403A5             0447*  ; preserves: everything
0403A5             0448*  dumpFlags:
0403A5             0449*  ; first we curse zilog for not giving direct access to flags
0403A5 F5          0450*      push af ; this is so we can send it back unharmed
0403A6 F5          0451*      push af ; this is so we can pop it to hl
0403A7             0452*  ; store everything in scratch
0403A7 22 90 03 04 0453*      ld (uhl),hl
0403AB ED 43 93 03 0454*      ld (ubc),bc
       04          
0403B0 ED 53 96 03 0455*      ld (ude),de
       04          
0403B5 DD 22 99 03 0456*      ld (uix),ix
       04          
0403BA FD 22 9C 03 0457*      ld (uiy),iy
       04          
0403BF             0458*  ; next we print the header
0403BF 21 EB 03 04 0459*      ld hl,@header
0403C3 CD 7C 00 04 0460*      call printString
0403C7 E1          0461*      pop hl ; flags are now in l
0403C8 7D          0462*      ld a,l ; flags are now in a
0403C9 CD 43 01 04 0463*      call printBin8
0403CD CD 91 00 04 0464*  	call printNewLine
0403D1             0465*  ; restore everything
0403D1 2A 90 03 04 0466*      ld hl, (uhl)
0403D5 ED 4B 93 03 0467*      ld bc, (ubc)
       04          
0403DA ED 5B 96 03 0468*      ld de, (ude)
       04          
0403DF DD 2A 99 03 0469*      ld ix, (uix)
       04          
0403E4 FD 2A 9C 03 0470*      ld iy, (uiy)
       04          
0403E9 F1          0471*      pop af ; send her home the way she came
0403EA C9          0472*      ret
0403EB             0473*  ; Bit 7 (S): Sign flag
0403EB             0474*  ; Bit 6 (Z): Zero flag
0403EB             0475*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0403EB             0476*  ; Bit 4 (H): Half Carry flag
0403EB             0477*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0403EB             0478*  ; Bit 2 (PV): Parity/Overflow flag
0403EB             0479*  ; Bit 1 (N): Subtract flag
0403EB             0480*  ; Bit 0 (C): Carry flag
0403EB 53 5A 78 48 0481*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0403F6             0482*  
0403F6             0483*  ; set all the bits in the flag register
0403F6             0484*  ; more of an academic exercise than anything useful
0403F6             0485*  ; inputs; none
0403F6             0486*  ; outputs; a=0,f=255
0403F6             0487*  ; destroys: flags, hl
0403F6             0488*  ; preserves: a, because why not
0403F6             0489*  setAllFlags:
0403F6 21 FF 00 00 0490*      ld hl,255
0403FA 67          0491*      ld h,a ; four cycles to preserve a is cheap
0403FB E5          0492*      push hl
0403FC F1          0493*      pop af
0403FD C9          0494*      ret
0403FE             0495*  
0403FE             0496*  ; reset all the bits in the flag register
0403FE             0497*  ; unlike its inverse counterpart, this may actually be useful
0403FE             0498*  ; inputs; none
0403FE             0499*  ; outputs; a=0,f=0
0403FE             0500*  ; destroys: flags, hl
0403FE             0501*  ; preserves: a, because why not
0403FE             0502*  resetAllFlags:
0403FE 21 00 00 00 0503*      ld hl,0
040402 67          0504*      ld h,a ; four cycles to preserve a is cheap
040403 E5          0505*      push hl
040404 F1          0506*      pop af
040405 C9          0507*      ret
040406             0508*  
040406             0509*  ; wait until user presses a key
040406             0510*  ; inputs: none
040406             0511*  ; outputs: none
040406             0512*  ; destroys: af,ix
040406             0513*  waitKeypress:
040406             0514*      MOSCALL mos_sysvars
040406 3E 08       0001*M 			LD	A, function
040408 5B CF       0002*M 			RST.LIL	08h
04040A AF          0515*      xor a ; zero out any prior keypresses
04040B DD 77 05    0516*      ld (ix+sysvar_keyascii),a
04040E             0517*  @loop:
04040E DD 7E 05    0518*      ld a,(ix+sysvar_keyascii)
040411 A7          0519*      and a
040412 C0          0520*      ret nz
040413 18 F9       0521*      jr @loop
040415             0522*  
040415             0523*  
040415             0524*  ; print bytes from an address to the screen in hexidecimal format
040415             0525*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040415             0526*  ; outputs: values of each byte printed to screen separated by spaces
040415             0527*  ; destroys: nothing
040415             0528*  dumpMemoryHex:
040415             0529*  ; save registers to the stack
040415 C5          0530*      push bc
040416 E5          0531*      push hl
040417 F5          0532*      push af
040418             0533*  
040418             0534*  ; print the address and separator
040418 CD 9C 00 04 0535*      call printHex24
04041C 3E 3A       0536*      ld a,':'
04041E 5B D7       0537*      rst.lil 10h
040420 3E 20       0538*      ld a,' '
040422 5B D7       0539*      rst.lil 10h
040424             0540*  
040424             0541*  ; set b to be our loop counter
040424 F1          0542*      pop af
040425 47          0543*      ld b,a
040426 E1          0544*      pop hl
040427 E5          0545*      push hl
040428 F5          0546*      push af
040429             0547*  @loop:
040429             0548*  ; print the byte
040429 7E          0549*      ld a,(hl)
04042A CD AE 00 04 0550*      call printHex8
04042E             0551*  ; print a space
04042E 3E 20       0552*      ld a,' '
040430 5B D7       0553*      rst.lil 10h
040432 23          0554*      inc hl
040433 10 F4       0555*      djnz @loop
040435             0556*      ; call printNewLine
040435             0557*  
040435             0558*  ; restore everything
040435 F1          0559*      pop af
040436 E1          0560*      pop hl
040437 C1          0561*      pop bc
040438             0562*  
040438             0563*  ; all done
040438 C9          0564*      ret
040439             0565*  
040439             0566*  
040439             0567*  ; print bytes from an address to the screen in binary format
040439             0568*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040439             0569*  ; outputs: values of each byte printed to screen separated by spaces
040439             0570*  ; destroys: nothing
040439             0571*  dumpMemoryBin:
040439             0572*  ; save all registers to the stack
040439 F5          0573*      push af
04043A C5          0574*      push bc
04043B D5          0575*      push de
04043C E5          0576*      push hl
04043D DD E5       0577*      push ix
04043F FD E5       0578*      push iy
040441             0579*  
040441             0580*  ; set b to be our loop counter
040441 47          0581*      ld b,a
040442             0582*  @loop:
040442             0583*  ; print the byte
040442 7E          0584*      ld a,(hl)
040443 E5          0585*      push hl
040444 C5          0586*      push bc
040445 CD 43 01 04 0587*      call printBin8
040449 C1          0588*      pop bc
04044A             0589*  ; print a space
04044A 3E 20       0590*      ld a,' '
04044C 5B D7       0591*      rst.lil 10h
04044E E1          0592*      pop hl
04044F 23          0593*      inc hl
040450 10 F0       0594*      djnz @loop
040452 CD 91 00 04 0595*      call printNewLine
040456             0596*  
040456             0597*  ; restore everything
040456 FD E1       0598*      pop iy
040458 DD E1       0599*      pop ix
04045A E1          0600*      pop hl
04045B D1          0601*      pop de
04045C C1          0602*      pop bc
04045D F1          0603*      pop af
04045E             0604*  ; all done
04045E C9          0605*      ret
04045F             0606*  
04045F             0607*  ; print bytes from an address to the screen in binary format
04045F             0608*  ; with the bits of each byte in reverse order (lsb first)
04045F             0609*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04045F             0610*  ; outputs: values of each byte printed to screen separated by spaces
04045F             0611*  ; destroys: nothing
04045F             0612*  dumpMemoryBinRev:
04045F             0613*  ; save all registers to the stack
04045F F5          0614*      push af
040460 C5          0615*      push bc
040461 D5          0616*      push de
040462 E5          0617*      push hl
040463 DD E5       0618*      push ix
040465 FD E5       0619*      push iy
040467             0620*  
040467             0621*  ; set b to be our loop counter
040467 47          0622*      ld b,a
040468             0623*  @loop:
040468             0624*  ; print the byte
040468 7E          0625*      ld a,(hl)
040469 E5          0626*      push hl
04046A C5          0627*      push bc
04046B CD 68 01 04 0628*      call printBin8Rev
04046F C1          0629*      pop bc
040470             0630*  ; print a space
040470 3E 20       0631*      ld a,' '
040472 5B D7       0632*      rst.lil 10h
040474 E1          0633*      pop hl
040475 23          0634*      inc hl
040476 10 F0       0635*      djnz @loop
040478 CD 91 00 04 0636*      call printNewLine
04047C             0637*  
04047C             0638*  ; restore everything
04047C FD E1       0639*      pop iy
04047E DD E1       0640*      pop ix
040480 E1          0641*      pop hl
040481 D1          0642*      pop de
040482 C1          0643*      pop bc
040483 F1          0644*      pop af
040484             0645*  ; all done
040484 C9          0646*      ret
040485             0032   	include "files.inc"
040485             0001*  ; load to onboard 8k sram
040485             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
040485             0033       include "fonts.inc"
040485             0001*  ; Generated by build_91b_asm_cfont.py
040485             0002*  
040485 FF FF FF    0003*  	 align 4
040488             0004*  
040488             0005*  num_fonts: equ 116
040488             0006*  
040488             0007*  ; Index list:
040488             0008*  Lat15_Fixed13: equ 0
040488             0009*  Lat15_Fixed14: equ 1
040488             0010*  Lat15_Fixed15: equ 2
040488             0011*  Lat15_Fixed16: equ 3
040488             0012*  Lat15_Fixed18: equ 4
040488             0013*  Lat15_Terminus12x6: equ 5
040488             0014*  Lat15_Terminus14: equ 6
040488             0015*  Lat15_Terminus16: equ 7
040488             0016*  Lat15_Terminus18x10: equ 8
040488             0017*  Lat15_Terminus20x10: equ 9
040488             0018*  Lat15_Terminus22x11: equ 10
040488             0019*  Lat15_Terminus24x12: equ 11
040488             0020*  Lat15_Terminus28x14: equ 12
040488             0021*  Lat15_Terminus32x16: equ 13
040488             0022*  Lat15_TerminusBold14: equ 14
040488             0023*  Lat15_TerminusBold16: equ 15
040488             0024*  Lat15_TerminusBold18x10: equ 16
040488             0025*  Lat15_TerminusBold20x10: equ 17
040488             0026*  Lat15_TerminusBold22x11: equ 18
040488             0027*  Lat15_TerminusBold24x12: equ 19
040488             0028*  Lat15_TerminusBold28x14: equ 20
040488             0029*  Lat15_TerminusBold32x16: equ 21
040488             0030*  Lat15_TerminusBoldVGA14: equ 22
040488             0031*  Lat15_TerminusBoldVGA16: equ 23
040488             0032*  Lat15_VGA14: equ 24
040488             0033*  Lat15_VGA16: equ 25
040488             0034*  Lat15_VGA28x16: equ 26
040488             0035*  Lat15_VGA32x16: equ 27
040488             0036*  Lat15_VGA8: equ 28
040488             0037*  Lat2_Fixed13: equ 29
040488             0038*  Lat2_Fixed14: equ 30
040488             0039*  Lat2_Fixed15: equ 31
040488             0040*  Lat2_Fixed16: equ 32
040488             0041*  Lat2_Fixed18: equ 33
040488             0042*  Lat2_Terminus12x6: equ 34
040488             0043*  Lat2_Terminus14: equ 35
040488             0044*  Lat2_Terminus16: equ 36
040488             0045*  Lat2_Terminus18x10: equ 37
040488             0046*  Lat2_Terminus20x10: equ 38
040488             0047*  Lat2_Terminus22x11: equ 39
040488             0048*  Lat2_Terminus24x12: equ 40
040488             0049*  Lat2_Terminus28x14: equ 41
040488             0050*  Lat2_Terminus32x16: equ 42
040488             0051*  Lat2_TerminusBold14: equ 43
040488             0052*  Lat2_TerminusBold16: equ 44
040488             0053*  Lat2_TerminusBold18x10: equ 45
040488             0054*  Lat2_TerminusBold20x10: equ 46
040488             0055*  Lat2_TerminusBold22x11: equ 47
040488             0056*  Lat2_TerminusBold24x12: equ 48
040488             0057*  Lat2_TerminusBold28x14: equ 49
040488             0058*  Lat2_TerminusBold32x16: equ 50
040488             0059*  Lat2_TerminusBoldVGA14: equ 51
040488             0060*  Lat2_TerminusBoldVGA16: equ 52
040488             0061*  Lat2_VGA14: equ 53
040488             0062*  Lat2_VGA16: equ 54
040488             0063*  Lat2_VGA28x16: equ 55
040488             0064*  Lat2_VGA32x16: equ 56
040488             0065*  Lat2_VGA8: equ 57
040488             0066*  Lat38_Fixed13: equ 58
040488             0067*  Lat38_Fixed14: equ 59
040488             0068*  Lat38_Fixed15: equ 60
040488             0069*  Lat38_Fixed16: equ 61
040488             0070*  Lat38_Fixed18: equ 62
040488             0071*  Lat38_Terminus12x6: equ 63
040488             0072*  Lat38_Terminus14: equ 64
040488             0073*  Lat38_Terminus16: equ 65
040488             0074*  Lat38_Terminus18x10: equ 66
040488             0075*  Lat38_Terminus20x10: equ 67
040488             0076*  Lat38_Terminus22x11: equ 68
040488             0077*  Lat38_Terminus24x12: equ 69
040488             0078*  Lat38_Terminus28x14: equ 70
040488             0079*  Lat38_Terminus32x16: equ 71
040488             0080*  Lat38_TerminusBold14: equ 72
040488             0081*  Lat38_TerminusBold16: equ 73
040488             0082*  Lat38_TerminusBold18x10: equ 74
040488             0083*  Lat38_TerminusBold20x10: equ 75
040488             0084*  Lat38_TerminusBold22x11: equ 76
040488             0085*  Lat38_TerminusBold24x12: equ 77
040488             0086*  Lat38_TerminusBold28x14: equ 78
040488             0087*  Lat38_TerminusBold32x16: equ 79
040488             0088*  Lat38_TerminusBoldVGA14: equ 80
040488             0089*  Lat38_TerminusBoldVGA16: equ 81
040488             0090*  Lat38_VGA14: equ 82
040488             0091*  Lat38_VGA16: equ 83
040488             0092*  Lat38_VGA28x16: equ 84
040488             0093*  Lat38_VGA32x16: equ 85
040488             0094*  Lat38_VGA8: equ 86
040488             0095*  Lat7_Fixed13: equ 87
040488             0096*  Lat7_Fixed14: equ 88
040488             0097*  Lat7_Fixed15: equ 89
040488             0098*  Lat7_Fixed16: equ 90
040488             0099*  Lat7_Fixed18: equ 91
040488             0100*  Lat7_Terminus12x6: equ 92
040488             0101*  Lat7_Terminus14: equ 93
040488             0102*  Lat7_Terminus16: equ 94
040488             0103*  Lat7_Terminus18x10: equ 95
040488             0104*  Lat7_Terminus20x10: equ 96
040488             0105*  Lat7_Terminus22x11: equ 97
040488             0106*  Lat7_Terminus24x12: equ 98
040488             0107*  Lat7_Terminus28x14: equ 99
040488             0108*  Lat7_Terminus32x16: equ 100
040488             0109*  Lat7_TerminusBold14: equ 101
040488             0110*  Lat7_TerminusBold16: equ 102
040488             0111*  Lat7_TerminusBold18x10: equ 103
040488             0112*  Lat7_TerminusBold20x10: equ 104
040488             0113*  Lat7_TerminusBold22x11: equ 105
040488             0114*  Lat7_TerminusBold24x12: equ 106
040488             0115*  Lat7_TerminusBold28x14: equ 107
040488             0116*  Lat7_TerminusBold32x16: equ 108
040488             0117*  Lat7_TerminusBoldVGA14: equ 109
040488             0118*  Lat7_TerminusBoldVGA16: equ 110
040488             0119*  Lat7_VGA14: equ 111
040488             0120*  Lat7_VGA16: equ 112
040488             0121*  Lat7_VGA28x16: equ 113
040488             0122*  Lat7_VGA32x16: equ 114
040488             0123*  Lat7_VGA8: equ 115
040488             0124*  
040488             0125*  font_list: ; width; height; filesize; filename;:
040488 08 00 00 0D 0126*  	dl 8, 13, 3328, fn_Lat15_Fixed13
       00 00 00 0D 
       00 F8 09 04 
040494 08 00 00 0E 0127*  	dl 8, 14, 3584, fn_Lat15_Fixed14
       00 00 00 0E 
       00 12 0A 04 
0404A0 08 00 00 0F 0128*  	dl 8, 15, 3840, fn_Lat15_Fixed15
       00 00 00 0F 
       00 2C 0A 04 
0404AC 08 00 00 10 0129*  	dl 8, 16, 4096, fn_Lat15_Fixed16
       00 00 00 10 
       00 46 0A 04 
0404B8 08 00 00 12 0130*  	dl 8, 18, 4608, fn_Lat15_Fixed18
       00 00 00 12 
       00 60 0A 04 
0404C4 08 00 00 0C 0131*  	dl 8, 12, 3072, fn_Lat15_Terminus12x6
       00 00 00 0C 
       00 7A 0A 04 
0404D0 08 00 00 0E 0132*  	dl 8, 14, 3584, fn_Lat15_Terminus14
       00 00 00 0E 
       00 99 0A 04 
0404DC 08 00 00 10 0133*  	dl 8, 16, 4096, fn_Lat15_Terminus16
       00 00 00 10 
       00 B6 0A 04 
0404E8 10 00 00 12 0134*  	dl 16, 18, 9216, fn_Lat15_Terminus18x10
       00 00 00 24 
       00 D3 0A 04 
0404F4 10 00 00 14 0135*  	dl 16, 20, 10240, fn_Lat15_Terminus20x10
       00 00 00 28 
       00 F3 0A 04 
040500 10 00 00 16 0136*  	dl 16, 22, 11264, fn_Lat15_Terminus22x11
       00 00 00 2C 
       00 13 0B 04 
04050C 10 00 00 18 0137*  	dl 16, 24, 12288, fn_Lat15_Terminus24x12
       00 00 00 30 
       00 33 0B 04 
040518 10 00 00 1C 0138*  	dl 16, 28, 14336, fn_Lat15_Terminus28x14
       00 00 00 38 
       00 53 0B 04 
040524 10 00 00 20 0139*  	dl 16, 32, 16384, fn_Lat15_Terminus32x16
       00 00 00 40 
       00 73 0B 04 
040530 08 00 00 0E 0140*  	dl 8, 14, 3584, fn_Lat15_TerminusBold14
       00 00 00 0E 
       00 93 0B 04 
04053C 08 00 00 10 0141*  	dl 8, 16, 4096, fn_Lat15_TerminusBold16
       00 00 00 10 
       00 B4 0B 04 
040548 10 00 00 12 0142*  	dl 16, 18, 9216, fn_Lat15_TerminusBold18x10
       00 00 00 24 
       00 D5 0B 04 
040554 10 00 00 14 0143*  	dl 16, 20, 10240, fn_Lat15_TerminusBold20x10
       00 00 00 28 
       00 F9 0B 04 
040560 10 00 00 16 0144*  	dl 16, 22, 11264, fn_Lat15_TerminusBold22x11
       00 00 00 2C 
       00 1D 0C 04 
04056C 10 00 00 18 0145*  	dl 16, 24, 12288, fn_Lat15_TerminusBold24x12
       00 00 00 30 
       00 41 0C 04 
040578 10 00 00 1C 0146*  	dl 16, 28, 14336, fn_Lat15_TerminusBold28x14
       00 00 00 38 
       00 65 0C 04 
040584 10 00 00 20 0147*  	dl 16, 32, 16384, fn_Lat15_TerminusBold32x16
       00 00 00 40 
       00 89 0C 04 
040590 08 00 00 0E 0148*  	dl 8, 14, 3584, fn_Lat15_TerminusBoldVGA14
       00 00 00 0E 
       00 AD 0C 04 
04059C 08 00 00 10 0149*  	dl 8, 16, 4096, fn_Lat15_TerminusBoldVGA16
       00 00 00 10 
       00 D1 0C 04 
0405A8 08 00 00 0E 0150*  	dl 8, 14, 3584, fn_Lat15_VGA14
       00 00 00 0E 
       00 F5 0C 04 
0405B4 08 00 00 10 0151*  	dl 8, 16, 4096, fn_Lat15_VGA16
       00 00 00 10 
       00 0D 0D 04 
0405C0 10 00 00 1C 0152*  	dl 16, 28, 14336, fn_Lat15_VGA28x16
       00 00 00 38 
       00 25 0D 04 
0405CC 10 00 00 20 0153*  	dl 16, 32, 16384, fn_Lat15_VGA32x16
       00 00 00 40 
       00 40 0D 04 
0405D8 08 00 00 08 0154*  	dl 8, 8, 2048, fn_Lat15_VGA8
       00 00 00 08 
       00 5B 0D 04 
0405E4 08 00 00 0D 0155*  	dl 8, 13, 3328, fn_Lat2_Fixed13
       00 00 00 0D 
       00 72 0D 04 
0405F0 08 00 00 0E 0156*  	dl 8, 14, 3584, fn_Lat2_Fixed14
       00 00 00 0E 
       00 8B 0D 04 
0405FC 08 00 00 0F 0157*  	dl 8, 15, 3840, fn_Lat2_Fixed15
       00 00 00 0F 
       00 A4 0D 04 
040608 08 00 00 10 0158*  	dl 8, 16, 4096, fn_Lat2_Fixed16
       00 00 00 10 
       00 BD 0D 04 
040614 08 00 00 12 0159*  	dl 8, 18, 4608, fn_Lat2_Fixed18
       00 00 00 12 
       00 D6 0D 04 
040620 08 00 00 0C 0160*  	dl 8, 12, 3072, fn_Lat2_Terminus12x6
       00 00 00 0C 
       00 EF 0D 04 
04062C 08 00 00 0E 0161*  	dl 8, 14, 3584, fn_Lat2_Terminus14
       00 00 00 0E 
       00 0D 0E 04 
040638 08 00 00 10 0162*  	dl 8, 16, 4096, fn_Lat2_Terminus16
       00 00 00 10 
       00 29 0E 04 
040644 10 00 00 12 0163*  	dl 16, 18, 9216, fn_Lat2_Terminus18x10
       00 00 00 24 
       00 45 0E 04 
040650 10 00 00 14 0164*  	dl 16, 20, 10240, fn_Lat2_Terminus20x10
       00 00 00 28 
       00 64 0E 04 
04065C 10 00 00 16 0165*  	dl 16, 22, 11264, fn_Lat2_Terminus22x11
       00 00 00 2C 
       00 83 0E 04 
040668 10 00 00 18 0166*  	dl 16, 24, 12288, fn_Lat2_Terminus24x12
       00 00 00 30 
       00 A2 0E 04 
040674 10 00 00 1C 0167*  	dl 16, 28, 14336, fn_Lat2_Terminus28x14
       00 00 00 38 
       00 C1 0E 04 
040680 10 00 00 20 0168*  	dl 16, 32, 16384, fn_Lat2_Terminus32x16
       00 00 00 40 
       00 E0 0E 04 
04068C 08 00 00 0E 0169*  	dl 8, 14, 3584, fn_Lat2_TerminusBold14
       00 00 00 0E 
       00 FF 0E 04 
040698 08 00 00 10 0170*  	dl 8, 16, 4096, fn_Lat2_TerminusBold16
       00 00 00 10 
       00 1F 0F 04 
0406A4 10 00 00 12 0171*  	dl 16, 18, 9216, fn_Lat2_TerminusBold18x10
       00 00 00 24 
       00 3F 0F 04 
0406B0 10 00 00 14 0172*  	dl 16, 20, 10240, fn_Lat2_TerminusBold20x10
       00 00 00 28 
       00 62 0F 04 
0406BC 10 00 00 16 0173*  	dl 16, 22, 11264, fn_Lat2_TerminusBold22x11
       00 00 00 2C 
       00 85 0F 04 
0406C8 10 00 00 18 0174*  	dl 16, 24, 12288, fn_Lat2_TerminusBold24x12
       00 00 00 30 
       00 A8 0F 04 
0406D4 10 00 00 1C 0175*  	dl 16, 28, 14336, fn_Lat2_TerminusBold28x14
       00 00 00 38 
       00 CB 0F 04 
0406E0 10 00 00 20 0176*  	dl 16, 32, 16384, fn_Lat2_TerminusBold32x16
       00 00 00 40 
       00 EE 0F 04 
0406EC 08 00 00 0E 0177*  	dl 8, 14, 3584, fn_Lat2_TerminusBoldVGA14
       00 00 00 0E 
       00 11 10 04 
0406F8 08 00 00 10 0178*  	dl 8, 16, 4096, fn_Lat2_TerminusBoldVGA16
       00 00 00 10 
       00 34 10 04 
040704 08 00 00 0E 0179*  	dl 8, 14, 3584, fn_Lat2_VGA14
       00 00 00 0E 
       00 57 10 04 
040710 08 00 00 10 0180*  	dl 8, 16, 4096, fn_Lat2_VGA16
       00 00 00 10 
       00 6E 10 04 
04071C 10 00 00 1C 0181*  	dl 16, 28, 14336, fn_Lat2_VGA28x16
       00 00 00 38 
       00 85 10 04 
040728 10 00 00 20 0182*  	dl 16, 32, 16384, fn_Lat2_VGA32x16
       00 00 00 40 
       00 9F 10 04 
040734 08 00 00 08 0183*  	dl 8, 8, 2048, fn_Lat2_VGA8
       00 00 00 08 
       00 B9 10 04 
040740 08 00 00 0D 0184*  	dl 8, 13, 3328, fn_Lat38_Fixed13
       00 00 00 0D 
       00 CF 10 04 
04074C 08 00 00 0E 0185*  	dl 8, 14, 3584, fn_Lat38_Fixed14
       00 00 00 0E 
       00 E9 10 04 
040758 08 00 00 0F 0186*  	dl 8, 15, 3840, fn_Lat38_Fixed15
       00 00 00 0F 
       00 03 11 04 
040764 08 00 00 10 0187*  	dl 8, 16, 4096, fn_Lat38_Fixed16
       00 00 00 10 
       00 1D 11 04 
040770 08 00 00 12 0188*  	dl 8, 18, 4608, fn_Lat38_Fixed18
       00 00 00 12 
       00 37 11 04 
04077C 08 00 00 0C 0189*  	dl 8, 12, 3072, fn_Lat38_Terminus12x6
       00 00 00 0C 
       00 51 11 04 
040788 08 00 00 0E 0190*  	dl 8, 14, 3584, fn_Lat38_Terminus14
       00 00 00 0E 
       00 70 11 04 
040794 08 00 00 10 0191*  	dl 8, 16, 4096, fn_Lat38_Terminus16
       00 00 00 10 
       00 8D 11 04 
0407A0 10 00 00 12 0192*  	dl 16, 18, 9216, fn_Lat38_Terminus18x10
       00 00 00 24 
       00 AA 11 04 
0407AC 10 00 00 14 0193*  	dl 16, 20, 10240, fn_Lat38_Terminus20x10
       00 00 00 28 
       00 CA 11 04 
0407B8 10 00 00 16 0194*  	dl 16, 22, 11264, fn_Lat38_Terminus22x11
       00 00 00 2C 
       00 EA 11 04 
0407C4 10 00 00 18 0195*  	dl 16, 24, 12288, fn_Lat38_Terminus24x12
       00 00 00 30 
       00 0A 12 04 
0407D0 10 00 00 1C 0196*  	dl 16, 28, 14336, fn_Lat38_Terminus28x14
       00 00 00 38 
       00 2A 12 04 
0407DC 10 00 00 20 0197*  	dl 16, 32, 16384, fn_Lat38_Terminus32x16
       00 00 00 40 
       00 4A 12 04 
0407E8 08 00 00 0E 0198*  	dl 8, 14, 3584, fn_Lat38_TerminusBold14
       00 00 00 0E 
       00 6A 12 04 
0407F4 08 00 00 10 0199*  	dl 8, 16, 4096, fn_Lat38_TerminusBold16
       00 00 00 10 
       00 8B 12 04 
040800 10 00 00 12 0200*  	dl 16, 18, 9216, fn_Lat38_TerminusBold18x10
       00 00 00 24 
       00 AC 12 04 
04080C 10 00 00 14 0201*  	dl 16, 20, 10240, fn_Lat38_TerminusBold20x10
       00 00 00 28 
       00 D0 12 04 
040818 10 00 00 16 0202*  	dl 16, 22, 11264, fn_Lat38_TerminusBold22x11
       00 00 00 2C 
       00 F4 12 04 
040824 10 00 00 18 0203*  	dl 16, 24, 12288, fn_Lat38_TerminusBold24x12
       00 00 00 30 
       00 18 13 04 
040830 10 00 00 1C 0204*  	dl 16, 28, 14336, fn_Lat38_TerminusBold28x14
       00 00 00 38 
       00 3C 13 04 
04083C 10 00 00 20 0205*  	dl 16, 32, 16384, fn_Lat38_TerminusBold32x16
       00 00 00 40 
       00 60 13 04 
040848 08 00 00 0E 0206*  	dl 8, 14, 3584, fn_Lat38_TerminusBoldVGA14
       00 00 00 0E 
       00 84 13 04 
040854 08 00 00 10 0207*  	dl 8, 16, 4096, fn_Lat38_TerminusBoldVGA16
       00 00 00 10 
       00 A8 13 04 
040860 08 00 00 0E 0208*  	dl 8, 14, 3584, fn_Lat38_VGA14
       00 00 00 0E 
       00 CC 13 04 
04086C 08 00 00 10 0209*  	dl 8, 16, 4096, fn_Lat38_VGA16
       00 00 00 10 
       00 E4 13 04 
040878 10 00 00 1C 0210*  	dl 16, 28, 14336, fn_Lat38_VGA28x16
       00 00 00 38 
       00 FC 13 04 
040884 10 00 00 20 0211*  	dl 16, 32, 16384, fn_Lat38_VGA32x16
       00 00 00 40 
       00 17 14 04 
040890 08 00 00 08 0212*  	dl 8, 8, 2048, fn_Lat38_VGA8
       00 00 00 08 
       00 32 14 04 
04089C 08 00 00 0D 0213*  	dl 8, 13, 3328, fn_Lat7_Fixed13
       00 00 00 0D 
       00 49 14 04 
0408A8 08 00 00 0E 0214*  	dl 8, 14, 3584, fn_Lat7_Fixed14
       00 00 00 0E 
       00 62 14 04 
0408B4 08 00 00 0F 0215*  	dl 8, 15, 3840, fn_Lat7_Fixed15
       00 00 00 0F 
       00 7B 14 04 
0408C0 08 00 00 10 0216*  	dl 8, 16, 4096, fn_Lat7_Fixed16
       00 00 00 10 
       00 94 14 04 
0408CC 08 00 00 12 0217*  	dl 8, 18, 4608, fn_Lat7_Fixed18
       00 00 00 12 
       00 AD 14 04 
0408D8 08 00 00 0C 0218*  	dl 8, 12, 3072, fn_Lat7_Terminus12x6
       00 00 00 0C 
       00 C6 14 04 
0408E4 08 00 00 0E 0219*  	dl 8, 14, 3584, fn_Lat7_Terminus14
       00 00 00 0E 
       00 E4 14 04 
0408F0 08 00 00 10 0220*  	dl 8, 16, 4096, fn_Lat7_Terminus16
       00 00 00 10 
       00 00 15 04 
0408FC 10 00 00 12 0221*  	dl 16, 18, 9216, fn_Lat7_Terminus18x10
       00 00 00 24 
       00 1C 15 04 
040908 10 00 00 14 0222*  	dl 16, 20, 10240, fn_Lat7_Terminus20x10
       00 00 00 28 
       00 3B 15 04 
040914 10 00 00 16 0223*  	dl 16, 22, 11264, fn_Lat7_Terminus22x11
       00 00 00 2C 
       00 5A 15 04 
040920 10 00 00 18 0224*  	dl 16, 24, 12288, fn_Lat7_Terminus24x12
       00 00 00 30 
       00 79 15 04 
04092C 10 00 00 1C 0225*  	dl 16, 28, 14336, fn_Lat7_Terminus28x14
       00 00 00 38 
       00 98 15 04 
040938 10 00 00 20 0226*  	dl 16, 32, 16384, fn_Lat7_Terminus32x16
       00 00 00 40 
       00 B7 15 04 
040944 08 00 00 0E 0227*  	dl 8, 14, 3584, fn_Lat7_TerminusBold14
       00 00 00 0E 
       00 D6 15 04 
040950 08 00 00 10 0228*  	dl 8, 16, 4096, fn_Lat7_TerminusBold16
       00 00 00 10 
       00 F6 15 04 
04095C 10 00 00 12 0229*  	dl 16, 18, 9216, fn_Lat7_TerminusBold18x10
       00 00 00 24 
       00 16 16 04 
040968 10 00 00 14 0230*  	dl 16, 20, 10240, fn_Lat7_TerminusBold20x10
       00 00 00 28 
       00 39 16 04 
040974 10 00 00 16 0231*  	dl 16, 22, 11264, fn_Lat7_TerminusBold22x11
       00 00 00 2C 
       00 5C 16 04 
040980 10 00 00 18 0232*  	dl 16, 24, 12288, fn_Lat7_TerminusBold24x12
       00 00 00 30 
       00 7F 16 04 
04098C 10 00 00 1C 0233*  	dl 16, 28, 14336, fn_Lat7_TerminusBold28x14
       00 00 00 38 
       00 A2 16 04 
040998 10 00 00 20 0234*  	dl 16, 32, 16384, fn_Lat7_TerminusBold32x16
       00 00 00 40 
       00 C5 16 04 
0409A4 08 00 00 0E 0235*  	dl 8, 14, 3584, fn_Lat7_TerminusBoldVGA14
       00 00 00 0E 
       00 E8 16 04 
0409B0 08 00 00 10 0236*  	dl 8, 16, 4096, fn_Lat7_TerminusBoldVGA16
       00 00 00 10 
       00 0B 17 04 
0409BC 08 00 00 0E 0237*  	dl 8, 14, 3584, fn_Lat7_VGA14
       00 00 00 0E 
       00 2E 17 04 
0409C8 08 00 00 10 0238*  	dl 8, 16, 4096, fn_Lat7_VGA16
       00 00 00 10 
       00 45 17 04 
0409D4 10 00 00 1C 0239*  	dl 16, 28, 14336, fn_Lat7_VGA28x16
       00 00 00 38 
       00 5C 17 04 
0409E0 10 00 00 20 0240*  	dl 16, 32, 16384, fn_Lat7_VGA32x16
       00 00 00 40 
       00 76 17 04 
0409EC 08 00 00 08 0241*  	dl 8, 8, 2048, fn_Lat7_VGA8
       00 00 00 08 
       00 90 17 04 
0409F8             0242*  
0409F8             0243*  ; files_list: ; filename:
0409F8 63 66 6F 6E 0244*  fn_Lat15_Fixed13: db "cfonts/Lat15_Fixed13.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 46 69 78 
       65 64 31 33 
       2E 66 6F 6E 
       74 00       
040A12 63 66 6F 6E 0245*  fn_Lat15_Fixed14: db "cfonts/Lat15_Fixed14.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 46 69 78 
       65 64 31 34 
       2E 66 6F 6E 
       74 00       
040A2C 63 66 6F 6E 0246*  fn_Lat15_Fixed15: db "cfonts/Lat15_Fixed15.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 46 69 78 
       65 64 31 35 
       2E 66 6F 6E 
       74 00       
040A46 63 66 6F 6E 0247*  fn_Lat15_Fixed16: db "cfonts/Lat15_Fixed16.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 46 69 78 
       65 64 31 36 
       2E 66 6F 6E 
       74 00       
040A60 63 66 6F 6E 0248*  fn_Lat15_Fixed18: db "cfonts/Lat15_Fixed18.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 46 69 78 
       65 64 31 38 
       2E 66 6F 6E 
       74 00       
040A7A 63 66 6F 6E 0249*  fn_Lat15_Terminus12x6: db "cfonts/Lat15_Terminus12x6.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 31 32 78 
       36 2E 66 6F 
       6E 74 00    
040A99 63 66 6F 6E 0250*  fn_Lat15_Terminus14: db "cfonts/Lat15_Terminus14.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 31 34 2E 
       66 6F 6E 74 
       00          
040AB6 63 66 6F 6E 0251*  fn_Lat15_Terminus16: db "cfonts/Lat15_Terminus16.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 31 36 2E 
       66 6F 6E 74 
       00          
040AD3 63 66 6F 6E 0252*  fn_Lat15_Terminus18x10: db "cfonts/Lat15_Terminus18x10.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 31 38 78 
       31 30 2E 66 
       6F 6E 74 00 
040AF3 63 66 6F 6E 0253*  fn_Lat15_Terminus20x10: db "cfonts/Lat15_Terminus20x10.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 32 30 78 
       31 30 2E 66 
       6F 6E 74 00 
040B13 63 66 6F 6E 0254*  fn_Lat15_Terminus22x11: db "cfonts/Lat15_Terminus22x11.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 32 32 78 
       31 31 2E 66 
       6F 6E 74 00 
040B33 63 66 6F 6E 0255*  fn_Lat15_Terminus24x12: db "cfonts/Lat15_Terminus24x12.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 32 34 78 
       31 32 2E 66 
       6F 6E 74 00 
040B53 63 66 6F 6E 0256*  fn_Lat15_Terminus28x14: db "cfonts/Lat15_Terminus28x14.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 32 38 78 
       31 34 2E 66 
       6F 6E 74 00 
040B73 63 66 6F 6E 0257*  fn_Lat15_Terminus32x16: db "cfonts/Lat15_Terminus32x16.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 33 32 78 
       31 36 2E 66 
       6F 6E 74 00 
040B93 63 66 6F 6E 0258*  fn_Lat15_TerminusBold14: db "cfonts/Lat15_TerminusBold14.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 31 34 2E 
       66 6F 6E 74 
       00          
040BB4 63 66 6F 6E 0259*  fn_Lat15_TerminusBold16: db "cfonts/Lat15_TerminusBold16.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 31 36 2E 
       66 6F 6E 74 
       00          
040BD5 63 66 6F 6E 0260*  fn_Lat15_TerminusBold18x10: db "cfonts/Lat15_TerminusBold18x10.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 31 38 78 
       31 30 2E 66 
       6F 6E 74 00 
040BF9 63 66 6F 6E 0261*  fn_Lat15_TerminusBold20x10: db "cfonts/Lat15_TerminusBold20x10.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 32 30 78 
       31 30 2E 66 
       6F 6E 74 00 
040C1D 63 66 6F 6E 0262*  fn_Lat15_TerminusBold22x11: db "cfonts/Lat15_TerminusBold22x11.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 32 32 78 
       31 31 2E 66 
       6F 6E 74 00 
040C41 63 66 6F 6E 0263*  fn_Lat15_TerminusBold24x12: db "cfonts/Lat15_TerminusBold24x12.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 32 34 78 
       31 32 2E 66 
       6F 6E 74 00 
040C65 63 66 6F 6E 0264*  fn_Lat15_TerminusBold28x14: db "cfonts/Lat15_TerminusBold28x14.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 32 38 78 
       31 34 2E 66 
       6F 6E 74 00 
040C89 63 66 6F 6E 0265*  fn_Lat15_TerminusBold32x16: db "cfonts/Lat15_TerminusBold32x16.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 33 32 78 
       31 36 2E 66 
       6F 6E 74 00 
040CAD 63 66 6F 6E 0266*  fn_Lat15_TerminusBoldVGA14: db "cfonts/Lat15_TerminusBoldVGA14.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 56 47 41 
       31 34 2E 66 
       6F 6E 74 00 
040CD1 63 66 6F 6E 0267*  fn_Lat15_TerminusBoldVGA16: db "cfonts/Lat15_TerminusBoldVGA16.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 56 47 41 
       31 36 2E 66 
       6F 6E 74 00 
040CF5 63 66 6F 6E 0268*  fn_Lat15_VGA14: db "cfonts/Lat15_VGA14.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 56 47 41 
       31 34 2E 66 
       6F 6E 74 00 
040D0D 63 66 6F 6E 0269*  fn_Lat15_VGA16: db "cfonts/Lat15_VGA16.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 56 47 41 
       31 36 2E 66 
       6F 6E 74 00 
040D25 63 66 6F 6E 0270*  fn_Lat15_VGA28x16: db "cfonts/Lat15_VGA28x16.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 56 47 41 
       32 38 78 31 
       36 2E 66 6F 
       6E 74 00    
040D40 63 66 6F 6E 0271*  fn_Lat15_VGA32x16: db "cfonts/Lat15_VGA32x16.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 56 47 41 
       33 32 78 31 
       36 2E 66 6F 
       6E 74 00    
040D5B 63 66 6F 6E 0272*  fn_Lat15_VGA8: db "cfonts/Lat15_VGA8.font",0
       74 73 2F 4C 
       61 74 31 35 
       5F 56 47 41 
       38 2E 66 6F 
       6E 74 00    
040D72 63 66 6F 6E 0273*  fn_Lat2_Fixed13: db "cfonts/Lat2_Fixed13.font",0
       74 73 2F 4C 
       61 74 32 5F 
       46 69 78 65 
       64 31 33 2E 
       66 6F 6E 74 
       00          
040D8B 63 66 6F 6E 0274*  fn_Lat2_Fixed14: db "cfonts/Lat2_Fixed14.font",0
       74 73 2F 4C 
       61 74 32 5F 
       46 69 78 65 
       64 31 34 2E 
       66 6F 6E 74 
       00          
040DA4 63 66 6F 6E 0275*  fn_Lat2_Fixed15: db "cfonts/Lat2_Fixed15.font",0
       74 73 2F 4C 
       61 74 32 5F 
       46 69 78 65 
       64 31 35 2E 
       66 6F 6E 74 
       00          
040DBD 63 66 6F 6E 0276*  fn_Lat2_Fixed16: db "cfonts/Lat2_Fixed16.font",0
       74 73 2F 4C 
       61 74 32 5F 
       46 69 78 65 
       64 31 36 2E 
       66 6F 6E 74 
       00          
040DD6 63 66 6F 6E 0277*  fn_Lat2_Fixed18: db "cfonts/Lat2_Fixed18.font",0
       74 73 2F 4C 
       61 74 32 5F 
       46 69 78 65 
       64 31 38 2E 
       66 6F 6E 74 
       00          
040DEF 63 66 6F 6E 0278*  fn_Lat2_Terminus12x6: db "cfonts/Lat2_Terminus12x6.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       31 32 78 36 
       2E 66 6F 6E 
       74 00       
040E0D 63 66 6F 6E 0279*  fn_Lat2_Terminus14: db "cfonts/Lat2_Terminus14.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       31 34 2E 66 
       6F 6E 74 00 
040E29 63 66 6F 6E 0280*  fn_Lat2_Terminus16: db "cfonts/Lat2_Terminus16.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       31 36 2E 66 
       6F 6E 74 00 
040E45 63 66 6F 6E 0281*  fn_Lat2_Terminus18x10: db "cfonts/Lat2_Terminus18x10.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       31 38 78 31 
       30 2E 66 6F 
       6E 74 00    
040E64 63 66 6F 6E 0282*  fn_Lat2_Terminus20x10: db "cfonts/Lat2_Terminus20x10.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       32 30 78 31 
       30 2E 66 6F 
       6E 74 00    
040E83 63 66 6F 6E 0283*  fn_Lat2_Terminus22x11: db "cfonts/Lat2_Terminus22x11.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       32 32 78 31 
       31 2E 66 6F 
       6E 74 00    
040EA2 63 66 6F 6E 0284*  fn_Lat2_Terminus24x12: db "cfonts/Lat2_Terminus24x12.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       32 34 78 31 
       32 2E 66 6F 
       6E 74 00    
040EC1 63 66 6F 6E 0285*  fn_Lat2_Terminus28x14: db "cfonts/Lat2_Terminus28x14.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       32 38 78 31 
       34 2E 66 6F 
       6E 74 00    
040EE0 63 66 6F 6E 0286*  fn_Lat2_Terminus32x16: db "cfonts/Lat2_Terminus32x16.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       33 32 78 31 
       36 2E 66 6F 
       6E 74 00    
040EFF 63 66 6F 6E 0287*  fn_Lat2_TerminusBold14: db "cfonts/Lat2_TerminusBold14.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       31 34 2E 66 
       6F 6E 74 00 
040F1F 63 66 6F 6E 0288*  fn_Lat2_TerminusBold16: db "cfonts/Lat2_TerminusBold16.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       31 36 2E 66 
       6F 6E 74 00 
040F3F 63 66 6F 6E 0289*  fn_Lat2_TerminusBold18x10: db "cfonts/Lat2_TerminusBold18x10.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       31 38 78 31 
       30 2E 66 6F 
       6E 74 00    
040F62 63 66 6F 6E 0290*  fn_Lat2_TerminusBold20x10: db "cfonts/Lat2_TerminusBold20x10.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       32 30 78 31 
       30 2E 66 6F 
       6E 74 00    
040F85 63 66 6F 6E 0291*  fn_Lat2_TerminusBold22x11: db "cfonts/Lat2_TerminusBold22x11.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       32 32 78 31 
       31 2E 66 6F 
       6E 74 00    
040FA8 63 66 6F 6E 0292*  fn_Lat2_TerminusBold24x12: db "cfonts/Lat2_TerminusBold24x12.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       32 34 78 31 
       32 2E 66 6F 
       6E 74 00    
040FCB 63 66 6F 6E 0293*  fn_Lat2_TerminusBold28x14: db "cfonts/Lat2_TerminusBold28x14.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       32 38 78 31 
       34 2E 66 6F 
       6E 74 00    
040FEE 63 66 6F 6E 0294*  fn_Lat2_TerminusBold32x16: db "cfonts/Lat2_TerminusBold32x16.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       33 32 78 31 
       36 2E 66 6F 
       6E 74 00    
041011 63 66 6F 6E 0295*  fn_Lat2_TerminusBoldVGA14: db "cfonts/Lat2_TerminusBoldVGA14.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       56 47 41 31 
       34 2E 66 6F 
       6E 74 00    
041034 63 66 6F 6E 0296*  fn_Lat2_TerminusBoldVGA16: db "cfonts/Lat2_TerminusBoldVGA16.font",0
       74 73 2F 4C 
       61 74 32 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       56 47 41 31 
       36 2E 66 6F 
       6E 74 00    
041057 63 66 6F 6E 0297*  fn_Lat2_VGA14: db "cfonts/Lat2_VGA14.font",0
       74 73 2F 4C 
       61 74 32 5F 
       56 47 41 31 
       34 2E 66 6F 
       6E 74 00    
04106E 63 66 6F 6E 0298*  fn_Lat2_VGA16: db "cfonts/Lat2_VGA16.font",0
       74 73 2F 4C 
       61 74 32 5F 
       56 47 41 31 
       36 2E 66 6F 
       6E 74 00    
041085 63 66 6F 6E 0299*  fn_Lat2_VGA28x16: db "cfonts/Lat2_VGA28x16.font",0
       74 73 2F 4C 
       61 74 32 5F 
       56 47 41 32 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
04109F 63 66 6F 6E 0300*  fn_Lat2_VGA32x16: db "cfonts/Lat2_VGA32x16.font",0
       74 73 2F 4C 
       61 74 32 5F 
       56 47 41 33 
       32 78 31 36 
       2E 66 6F 6E 
       74 00       
0410B9 63 66 6F 6E 0301*  fn_Lat2_VGA8: db "cfonts/Lat2_VGA8.font",0
       74 73 2F 4C 
       61 74 32 5F 
       56 47 41 38 
       2E 66 6F 6E 
       74 00       
0410CF 63 66 6F 6E 0302*  fn_Lat38_Fixed13: db "cfonts/Lat38_Fixed13.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 46 69 78 
       65 64 31 33 
       2E 66 6F 6E 
       74 00       
0410E9 63 66 6F 6E 0303*  fn_Lat38_Fixed14: db "cfonts/Lat38_Fixed14.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 46 69 78 
       65 64 31 34 
       2E 66 6F 6E 
       74 00       
041103 63 66 6F 6E 0304*  fn_Lat38_Fixed15: db "cfonts/Lat38_Fixed15.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 46 69 78 
       65 64 31 35 
       2E 66 6F 6E 
       74 00       
04111D 63 66 6F 6E 0305*  fn_Lat38_Fixed16: db "cfonts/Lat38_Fixed16.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 46 69 78 
       65 64 31 36 
       2E 66 6F 6E 
       74 00       
041137 63 66 6F 6E 0306*  fn_Lat38_Fixed18: db "cfonts/Lat38_Fixed18.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 46 69 78 
       65 64 31 38 
       2E 66 6F 6E 
       74 00       
041151 63 66 6F 6E 0307*  fn_Lat38_Terminus12x6: db "cfonts/Lat38_Terminus12x6.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 31 32 78 
       36 2E 66 6F 
       6E 74 00    
041170 63 66 6F 6E 0308*  fn_Lat38_Terminus14: db "cfonts/Lat38_Terminus14.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 31 34 2E 
       66 6F 6E 74 
       00          
04118D 63 66 6F 6E 0309*  fn_Lat38_Terminus16: db "cfonts/Lat38_Terminus16.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 31 36 2E 
       66 6F 6E 74 
       00          
0411AA 63 66 6F 6E 0310*  fn_Lat38_Terminus18x10: db "cfonts/Lat38_Terminus18x10.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 31 38 78 
       31 30 2E 66 
       6F 6E 74 00 
0411CA 63 66 6F 6E 0311*  fn_Lat38_Terminus20x10: db "cfonts/Lat38_Terminus20x10.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 32 30 78 
       31 30 2E 66 
       6F 6E 74 00 
0411EA 63 66 6F 6E 0312*  fn_Lat38_Terminus22x11: db "cfonts/Lat38_Terminus22x11.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 32 32 78 
       31 31 2E 66 
       6F 6E 74 00 
04120A 63 66 6F 6E 0313*  fn_Lat38_Terminus24x12: db "cfonts/Lat38_Terminus24x12.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 32 34 78 
       31 32 2E 66 
       6F 6E 74 00 
04122A 63 66 6F 6E 0314*  fn_Lat38_Terminus28x14: db "cfonts/Lat38_Terminus28x14.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 32 38 78 
       31 34 2E 66 
       6F 6E 74 00 
04124A 63 66 6F 6E 0315*  fn_Lat38_Terminus32x16: db "cfonts/Lat38_Terminus32x16.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 33 32 78 
       31 36 2E 66 
       6F 6E 74 00 
04126A 63 66 6F 6E 0316*  fn_Lat38_TerminusBold14: db "cfonts/Lat38_TerminusBold14.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 31 34 2E 
       66 6F 6E 74 
       00          
04128B 63 66 6F 6E 0317*  fn_Lat38_TerminusBold16: db "cfonts/Lat38_TerminusBold16.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 31 36 2E 
       66 6F 6E 74 
       00          
0412AC 63 66 6F 6E 0318*  fn_Lat38_TerminusBold18x10: db "cfonts/Lat38_TerminusBold18x10.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 31 38 78 
       31 30 2E 66 
       6F 6E 74 00 
0412D0 63 66 6F 6E 0319*  fn_Lat38_TerminusBold20x10: db "cfonts/Lat38_TerminusBold20x10.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 32 30 78 
       31 30 2E 66 
       6F 6E 74 00 
0412F4 63 66 6F 6E 0320*  fn_Lat38_TerminusBold22x11: db "cfonts/Lat38_TerminusBold22x11.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 32 32 78 
       31 31 2E 66 
       6F 6E 74 00 
041318 63 66 6F 6E 0321*  fn_Lat38_TerminusBold24x12: db "cfonts/Lat38_TerminusBold24x12.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 32 34 78 
       31 32 2E 66 
       6F 6E 74 00 
04133C 63 66 6F 6E 0322*  fn_Lat38_TerminusBold28x14: db "cfonts/Lat38_TerminusBold28x14.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 32 38 78 
       31 34 2E 66 
       6F 6E 74 00 
041360 63 66 6F 6E 0323*  fn_Lat38_TerminusBold32x16: db "cfonts/Lat38_TerminusBold32x16.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 33 32 78 
       31 36 2E 66 
       6F 6E 74 00 
041384 63 66 6F 6E 0324*  fn_Lat38_TerminusBoldVGA14: db "cfonts/Lat38_TerminusBoldVGA14.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 56 47 41 
       31 34 2E 66 
       6F 6E 74 00 
0413A8 63 66 6F 6E 0325*  fn_Lat38_TerminusBoldVGA16: db "cfonts/Lat38_TerminusBoldVGA16.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 54 65 72 
       6D 69 6E 75 
       73 42 6F 6C 
       64 56 47 41 
       31 36 2E 66 
       6F 6E 74 00 
0413CC 63 66 6F 6E 0326*  fn_Lat38_VGA14: db "cfonts/Lat38_VGA14.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 56 47 41 
       31 34 2E 66 
       6F 6E 74 00 
0413E4 63 66 6F 6E 0327*  fn_Lat38_VGA16: db "cfonts/Lat38_VGA16.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 56 47 41 
       31 36 2E 66 
       6F 6E 74 00 
0413FC 63 66 6F 6E 0328*  fn_Lat38_VGA28x16: db "cfonts/Lat38_VGA28x16.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 56 47 41 
       32 38 78 31 
       36 2E 66 6F 
       6E 74 00    
041417 63 66 6F 6E 0329*  fn_Lat38_VGA32x16: db "cfonts/Lat38_VGA32x16.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 56 47 41 
       33 32 78 31 
       36 2E 66 6F 
       6E 74 00    
041432 63 66 6F 6E 0330*  fn_Lat38_VGA8: db "cfonts/Lat38_VGA8.font",0
       74 73 2F 4C 
       61 74 33 38 
       5F 56 47 41 
       38 2E 66 6F 
       6E 74 00    
041449 63 66 6F 6E 0331*  fn_Lat7_Fixed13: db "cfonts/Lat7_Fixed13.font",0
       74 73 2F 4C 
       61 74 37 5F 
       46 69 78 65 
       64 31 33 2E 
       66 6F 6E 74 
       00          
041462 63 66 6F 6E 0332*  fn_Lat7_Fixed14: db "cfonts/Lat7_Fixed14.font",0
       74 73 2F 4C 
       61 74 37 5F 
       46 69 78 65 
       64 31 34 2E 
       66 6F 6E 74 
       00          
04147B 63 66 6F 6E 0333*  fn_Lat7_Fixed15: db "cfonts/Lat7_Fixed15.font",0
       74 73 2F 4C 
       61 74 37 5F 
       46 69 78 65 
       64 31 35 2E 
       66 6F 6E 74 
       00          
041494 63 66 6F 6E 0334*  fn_Lat7_Fixed16: db "cfonts/Lat7_Fixed16.font",0
       74 73 2F 4C 
       61 74 37 5F 
       46 69 78 65 
       64 31 36 2E 
       66 6F 6E 74 
       00          
0414AD 63 66 6F 6E 0335*  fn_Lat7_Fixed18: db "cfonts/Lat7_Fixed18.font",0
       74 73 2F 4C 
       61 74 37 5F 
       46 69 78 65 
       64 31 38 2E 
       66 6F 6E 74 
       00          
0414C6 63 66 6F 6E 0336*  fn_Lat7_Terminus12x6: db "cfonts/Lat7_Terminus12x6.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       31 32 78 36 
       2E 66 6F 6E 
       74 00       
0414E4 63 66 6F 6E 0337*  fn_Lat7_Terminus14: db "cfonts/Lat7_Terminus14.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       31 34 2E 66 
       6F 6E 74 00 
041500 63 66 6F 6E 0338*  fn_Lat7_Terminus16: db "cfonts/Lat7_Terminus16.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       31 36 2E 66 
       6F 6E 74 00 
04151C 63 66 6F 6E 0339*  fn_Lat7_Terminus18x10: db "cfonts/Lat7_Terminus18x10.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       31 38 78 31 
       30 2E 66 6F 
       6E 74 00    
04153B 63 66 6F 6E 0340*  fn_Lat7_Terminus20x10: db "cfonts/Lat7_Terminus20x10.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       32 30 78 31 
       30 2E 66 6F 
       6E 74 00    
04155A 63 66 6F 6E 0341*  fn_Lat7_Terminus22x11: db "cfonts/Lat7_Terminus22x11.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       32 32 78 31 
       31 2E 66 6F 
       6E 74 00    
041579 63 66 6F 6E 0342*  fn_Lat7_Terminus24x12: db "cfonts/Lat7_Terminus24x12.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       32 34 78 31 
       32 2E 66 6F 
       6E 74 00    
041598 63 66 6F 6E 0343*  fn_Lat7_Terminus28x14: db "cfonts/Lat7_Terminus28x14.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       32 38 78 31 
       34 2E 66 6F 
       6E 74 00    
0415B7 63 66 6F 6E 0344*  fn_Lat7_Terminus32x16: db "cfonts/Lat7_Terminus32x16.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       33 32 78 31 
       36 2E 66 6F 
       6E 74 00    
0415D6 63 66 6F 6E 0345*  fn_Lat7_TerminusBold14: db "cfonts/Lat7_TerminusBold14.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       31 34 2E 66 
       6F 6E 74 00 
0415F6 63 66 6F 6E 0346*  fn_Lat7_TerminusBold16: db "cfonts/Lat7_TerminusBold16.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       31 36 2E 66 
       6F 6E 74 00 
041616 63 66 6F 6E 0347*  fn_Lat7_TerminusBold18x10: db "cfonts/Lat7_TerminusBold18x10.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       31 38 78 31 
       30 2E 66 6F 
       6E 74 00    
041639 63 66 6F 6E 0348*  fn_Lat7_TerminusBold20x10: db "cfonts/Lat7_TerminusBold20x10.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       32 30 78 31 
       30 2E 66 6F 
       6E 74 00    
04165C 63 66 6F 6E 0349*  fn_Lat7_TerminusBold22x11: db "cfonts/Lat7_TerminusBold22x11.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       32 32 78 31 
       31 2E 66 6F 
       6E 74 00    
04167F 63 66 6F 6E 0350*  fn_Lat7_TerminusBold24x12: db "cfonts/Lat7_TerminusBold24x12.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       32 34 78 31 
       32 2E 66 6F 
       6E 74 00    
0416A2 63 66 6F 6E 0351*  fn_Lat7_TerminusBold28x14: db "cfonts/Lat7_TerminusBold28x14.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       32 38 78 31 
       34 2E 66 6F 
       6E 74 00    
0416C5 63 66 6F 6E 0352*  fn_Lat7_TerminusBold32x16: db "cfonts/Lat7_TerminusBold32x16.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       33 32 78 31 
       36 2E 66 6F 
       6E 74 00    
0416E8 63 66 6F 6E 0353*  fn_Lat7_TerminusBoldVGA14: db "cfonts/Lat7_TerminusBoldVGA14.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       56 47 41 31 
       34 2E 66 6F 
       6E 74 00    
04170B 63 66 6F 6E 0354*  fn_Lat7_TerminusBoldVGA16: db "cfonts/Lat7_TerminusBoldVGA16.font",0
       74 73 2F 4C 
       61 74 37 5F 
       54 65 72 6D 
       69 6E 75 73 
       42 6F 6C 64 
       56 47 41 31 
       36 2E 66 6F 
       6E 74 00    
04172E 63 66 6F 6E 0355*  fn_Lat7_VGA14: db "cfonts/Lat7_VGA14.font",0
       74 73 2F 4C 
       61 74 37 5F 
       56 47 41 31 
       34 2E 66 6F 
       6E 74 00    
041745 63 66 6F 6E 0356*  fn_Lat7_VGA16: db "cfonts/Lat7_VGA16.font",0
       74 73 2F 4C 
       61 74 37 5F 
       56 47 41 31 
       36 2E 66 6F 
       6E 74 00    
04175C 63 66 6F 6E 0357*  fn_Lat7_VGA28x16: db "cfonts/Lat7_VGA28x16.font",0
       74 73 2F 4C 
       61 74 37 5F 
       56 47 41 32 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
041776 63 66 6F 6E 0358*  fn_Lat7_VGA32x16: db "cfonts/Lat7_VGA32x16.font",0
       74 73 2F 4C 
       61 74 37 5F 
       56 47 41 33 
       32 78 31 36 
       2E 66 6F 6E 
       74 00       
041790 63 66 6F 6E 0359*  fn_Lat7_VGA8: db "cfonts/Lat7_VGA8.font",0
       74 73 2F 4C 
       61 74 37 5F 
       56 47 41 38 
       2E 66 6F 6E 
       74 00       
0417A6             0034       include "timer.inc"
0417A6             0001*  ; Table 32. Timer Control Registers
0417A6             0002*  ; this constant is the base address of the timer control registers
0417A6             0003*  ; each timer takes three bytes:
0417A6             0004*  ;   0: control register
0417A6             0005*  ;   1: low byte of timer reset value
0417A6             0006*  ;   2: high byte of timer reset value
0417A6             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0417A6             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0417A6             0009*  TMR_CTL:     equ 80h
0417A6             0010*  
0417A6             0011*  ; Timer Control Register Bit Definitions
0417A6             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0417A6             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0417A6             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0417A6             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0417A6             0016*                              ; the TMRx_CTL register is read.
0417A6             0017*  
0417A6             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0417A6             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0417A6             0020*  
0417A6             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0417A6             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0417A6             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0417A6             0024*                              ; written to the counter when the end-of-count value is reached.
0417A6             0025*  
0417A6             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0417A6             0027*  CLK_DIV_256:  equ %00001100 ;
0417A6             0028*  CLK_DIV_64:   equ %00001000 ;
0417A6             0029*  CLK_DIV_16:   equ %00000100 ;
0417A6             0030*  CLK_DIV_4:    equ %00000000 ;
0417A6             0031*  
0417A6             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0417A6             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0417A6             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0417A6             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0417A6             0036*                              ; programmer must ensure that this bit is set to 1 each time
0417A6             0037*                              ; SINGLE-PASS mode is used.
0417A6             0038*  
0417A6             0039*  ; disable/enable the programmable reload timer
0417A6             0040*  PRT_EN_0:     equ %00000000 ;
0417A6             0041*  PRT_EN_1:     equ %00000001 ;
0417A6             0042*  
0417A6             0043*  ; Table 37. Timer Input Source Select Register
0417A6             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0417A6             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0417A6             0046*  ;   00: System clock / CLK_DIV
0417A6             0047*  ;   01: RTC / CLK_DIV
0417A6             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0417A6             0049*  ;   10: GPIO port B pin 1.
0417A6             0050*  ;   11: GPIO port B pin 1.
0417A6             0051*  TMR_ISS:   equ 92h ; register address
0417A6             0052*  
0417A6             0053*  ; Table 51. Real-Time Clock Control Register
0417A6             0054*  RTC_CTRL: equ EDh ; register address
0417A6             0055*  
0417A6             0056*  ; alarm interrupt disable/enable
0417A6             0057*  RTC_ALARM_0:    equ %00000000
0417A6             0058*  RTC_ALARM_1:    equ %10000000
0417A6             0059*  
0417A6             0060*  ; interrupt on alarm disable/enable
0417A6             0061*  RTC_INT_ENT_0:  equ %00000000
0417A6             0062*  RTC_INT_ENT_1:  equ %01000000
0417A6             0063*  
0417A6             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0417A6             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0417A6             0066*  
0417A6             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0417A6             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0417A6             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0417A6             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0417A6             0071*  
0417A6             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0417A6             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0417A6             0074*  
0417A6             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0417A6             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0417A6             0077*  
0417A6             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0417A6             0079*                                  ; RTC counter is enabled.
0417A6             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0417A6             0081*                                  ; RTC counter is disabled.
0417A6             0082*  
0417A6             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0417A6             0084*  
0417A6             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0417A6             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0417A6 00 00 00    0087*  prt_reload: dl 0x000000
0417A9             0088*  
0417A9             0089*  ; ; returns: a = 0 if running on hardware,1 if running on emulator
0417A9             0090*  ; ;          de = number PRT interrupts during test interval
0417A9             0091*  ; prt_calibrate:
0417A9             0092*  ;     call vdu_vblank
0417A9             0093*  ; ; set a MOS timer
0417A9             0094*  ;     ld hl,120*1 ; 1 second
0417A9             0095*  ;     ld iy,tmr_test
0417A9             0096*  ;     call tmr_set
0417A9             0097*  ; ; set a PRT timer
0417A9             0098*  ;     ; ld hl,prt_reload_hardware
0417A9             0099*  ;     ; ld hl,prt_reload_emulator
0417A9             0100*  ;     ld hl,prt_reload_emulator + prt_reload_hardware / 2
0417A9             0101*  ;     ld (prt_reload),hl
0417A9             0102*  ;     call prt_set
0417A9             0103*  ; @loop:
0417A9             0104*  ; ; check time remaining on MOS timer
0417A9             0105*  ;     call tmr_get
0417A9             0106*  ;     jp z,@done ; time expired,so quit
0417A9             0107*  ;     jp m,@done ; time past expiration (negative),so quit
0417A9             0108*  ;     jr @loop
0417A9             0109*  ; @done:
0417A9             0110*  ;     ld de,(prt_irq_counter)
0417A9             0111*  ;     ld bc,prt_reload_hardware ; default value for running on hardware
0417A9             0112*  ;     ld (prt_reload),bc
0417A9             0113*  ;     ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
0417A9             0114*  ;     xor a ; clear carry,zero is default value for running on hardware
0417A9             0115*  ;     ld (is_emulator),a
0417A9             0116*  ;     sbc hl,de
0417A9             0117*  ;     ld hl,on_hardware ; default message for running on hardware
0417A9             0118*  ;     jp z,prt_calibrate ; zero result is indeterminate so we try again
0417A9             0119*  ;     ret m ; negative result means we're on hardware
0417A9             0120*  ;     inc a ; we're on emulator
0417A9             0121*  ;     ld (is_emulator),a
0417A9             0122*  ;     ld bc,prt_reload_emulator
0417A9             0123*  ;     ld (prt_reload),bc
0417A9             0124*  ;     ld hl,on_emulator
0417A9             0125*  ;     ret
0417A9             0126*  
0417A9             0127*  ; calibrating_timer: defb "Calibrating timer\r\n",0
0417A9             0128*  
0417A9             0129*  ; set PRT timer
0417A9             0130*  prt_set:
0417A9 21 00 00 00 0131*      ld hl,0
0417AD 22 F7 17 04 0132*      ld (prt_irq_counter),hl
0417B1 2A A6 17 04 0133*      ld hl,(prt_reload)
0417B5 ED 29 84    0134*      out0 ($84),l
0417B8 ED 21 85    0135*  	out0 ($85),h
0417BB             0136*  ; disable timer
0417BB 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0417BD ED 39 83    0138*  	out0 ($83),a
0417C0             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0417C0 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0417C2 ED 39 83    0141*  	out0 ($83),a
0417C5 C9          0142*      ret
0417C6             0143*  
0417C6             0144*  ; ===============================================
0417C6             0145*  ; PRT Timer Interrupt Handling
0417C6             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0417C6             0147*  ; -----------------------------------------------
0417C6             0148*  prt_irq_init:
0417C6             0149*      ; set up interrupt vector table 2
0417C6 21 00 00 00 0150*  	ld hl,0
0417CA 3A 0C 01 00 0151*  	ld a,($10c)
0417CE 6F          0152*  	ld l,a
0417CF 3A 0D 01 00 0153*  	ld a,($10d)
0417D3 67          0154*  	ld h,a
0417D4             0155*  
0417D4             0156*  	; skip over CALL ($c3)
0417D4 23          0157*  	inc hl
0417D5             0158*  	; load address of jump into vector table 2 (in ram)
0417D5 ED 27       0159*  	ld hl,(hl)
0417D7             0160*  
0417D7             0161*  	; write CALL prt_irq_handler to vector table 2
0417D7 3E C3       0162*  	ld a,$c3
0417D9 77          0163*  	ld (hl),a
0417DA 23          0164*  	inc hl
0417DB 11 E2 17 04 0165*  	ld de,prt_irq_handler
0417DF ED 1F       0166*  	ld (hl),de
0417E1             0167*  
0417E1 C9          0168*      ret
0417E2             0169*  
0417E2             0170*  prt_irq_handler:
0417E2 F3          0171*  	di
0417E3 F5          0172*  	push af
0417E4 E5          0173*      push hl
0417E5 ED 38 83    0174*  	in0 a,($83)
0417E8 2A F7 17 04 0175*  	ld hl,(prt_irq_counter)
0417EC 23          0176*  	inc hl
0417ED 22 F7 17 04 0177*  	ld (prt_irq_counter),hl
0417F1 E1          0178*      pop hl
0417F2 F1          0179*  	pop af
0417F3 FB          0180*  	ei
0417F4 5B ED 4D    0181*  	reti.l
0417F7             0182*  
0417F7             0183*  prt_irq_counter:
0417F7 00 00 00    0184*  	.dl 0
0417FA             0185*  prt_irq_counter_saved:
0417FA 00 00 00    0186*      .dl 0
0417FD             0187*  
0417FD             0188*  prt_loop_reset:
0417FD E5          0189*      push hl
0417FE 21 00 00 00 0190*  	ld hl,0
041802 22 F7 17 04 0191*  	ld (prt_irq_counter),hl
041806 22 68 18 04 0192*      ld (prt_loop_counter),hl
04180A 22 6B 18 04 0193*      ld (prt_loops),hl
04180E CD A9 17 04 0194*      call prt_set
041812 E1          0195*      pop hl
041813 C9          0196*      ret
041814             0197*  
041814             0198*  prt_loop_start:
041814 E5          0199*      push hl
041815 21 00 00 00 0200*  	ld hl,0
041819 22 F7 17 04 0201*  	ld (prt_irq_counter),hl
04181D E1          0202*      pop hl
04181E C9          0203*      ret
04181F             0204*  
04181F             0205*  prt_loop_stop:
04181F E5          0206*      push hl
041820 D5          0207*      push de
041821 2A F7 17 04 0208*      ld hl,(prt_irq_counter)
041825 ED 5B 68 18 0209*      ld de,(prt_loop_counter)
       04          
04182A 19          0210*      add hl,de
04182B 22 68 18 04 0211*      ld (prt_loop_counter),hl
04182F 21 00 00 00 0212*      ld hl,0
041833 22 F7 17 04 0213*      ld (prt_irq_counter),hl
041837 2A 6B 18 04 0214*      ld hl,(prt_loops)
04183B 23          0215*      inc hl
04183C 22 6B 18 04 0216*      ld (prt_loops),hl
041840 D1          0217*      pop de
041841 E1          0218*      pop hl
041842 C9          0219*      ret
041843             0220*  
041843             0221*  ; inputs: bc = y,x text coordinates to print
041843             0222*  prt_loop_print:
041843 F5          0223*      push af
041844 E5          0224*      push hl
041845 C5          0225*      push bc
041846 D5          0226*      push de
041847 DD E5       0227*      push ix
041849 FD E5       0228*      push iy
04184B CD 60 19 04 0229*      call vdu_move_cursor
04184F             0230*  
04184F 2A 68 18 04 0231*      ld hl,(prt_loop_counter)
041853 CD CC 00 04 0232*      call printDec
041857             0233*  
041857 2A 6B 18 04 0234*      ld hl,(prt_loops)
04185B CD CC 00 04 0235*      call printDec
04185F             0236*  
04185F FD E1       0237*      pop iy
041861 DD E1       0238*      pop ix
041863 D1          0239*      pop de
041864 C1          0240*      pop bc
041865 E1          0241*      pop hl
041866 F1          0242*      pop af
041867 C9          0243*      ret
041868             0244*  
041868             0245*  prt_loop_counter:
041868 00 00 00    0246*      .dl 0
04186B             0247*  prt_loops:
04186B 00 00 00    0248*      .dl 0
04186E             0249*  
04186E             0250*  ; ===============================================
04186E             0251*  ; Timer functions
04186E             0252*  ; -----------------------------------------------
04186E             0253*  ; set a countdown timer
04186E             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04186E             0255*  ; returns: hl = current time
04186E             0256*  tmr_set:
04186E FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
041871             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
041871 3E 08       0001*M 			LD	A, function
041873 5B CF       0002*M 			RST.LIL	08h
041875 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
041878 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
04187B C9          0261*      ret
04187C             0262*  
04187C             0263*  ; gets time remaining on a countdown timer
04187C             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04187C             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04187C             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
04187C             0267*  tmr_get:
04187C             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
04187C 3E 08       0001*M 			LD	A, function
04187E 5B CF       0002*M 			RST.LIL	08h
041880 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
041883 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
041886 AF          0271*      xor a                   ; clear carry
041887 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
041889 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
04188C AF          0274*      xor a                   ; clear carry
04188D ED 5A       0275*      adc hl,de               ; hl = time remaining
04188F             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04188F C9          0277*      ret
041890             0278*  
041890 00 00 00    0279*  timestamp_now: dl 0
041893 00 00 00    0280*  timestamp_old: dl 0
041896 00 00 00    0281*  timestamp_chg: dl 0
041899             0282*  
041899             0283*  ; update the global timestamp from the system clock
041899             0284*  ; inputs: none
041899             0285*  ; returns: hl = time elapsed in 1/120ths of a second
041899             0286*  ;          de = current time
041899             0287*  ;          ix = pointer to syvars table
041899             0288*  ; destroys: af,hl,de,ix
041899             0289*  timestamp_tick:
041899 ED 5B 90 18 0290*      ld de,(timestamp_now)   ; get previous time
       04          
04189E ED 53 93 18 0291*      ld (timestamp_old),de   ; save previous time
       04          
0418A3             0292*      MOSCALL mos_sysvars     ; ix points to syvars table
0418A3 3E 08       0001*M 			LD	A, function
0418A5 5B CF       0002*M 			RST.LIL	08h
0418A7 DD 27 00    0293*      ld hl,(ix+sysvar_time)  ; get current time
0418AA 22 90 18 04 0294*      ld (timestamp_now),hl   ; save current time
0418AE AF          0295*      xor a                   ; clear carry
0418AF ED 52       0296*      sbc hl,de               ; hl = time elapsed
0418B1 22 96 18 04 0297*      ld (timestamp_chg),hl   ; save elapsed time
0418B5 C9          0298*      ret
0418B6             0299*  
0418B6             0300*  ; set a countdown timer
0418B6             0301*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0418B6             0302*  ; requires: timestamp_tick to be called at least once before this function
0418B6             0303*  ; returns: hl = current time
0418B6             0304*  ; destroys: hl
0418B6             0305*  timestamp_tmr_set:
0418B6 FD 2F 03    0306*      ld (iy+3),hl            ; set time remaining
0418B9 2A 90 18 04 0307*      ld hl,(timestamp_now)   ; get current timestamp
0418BD FD 2F 00    0308*      ld (iy+0),hl            ; set start time
0418C0 C9          0309*      ret
0418C1             0310*  
0418C1             0311*  ; gets time remaining on a countdown timer following the global timestamp
0418C1             0312*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0418C1             0313*  ; requires: timestamp_tick to be called at least once before this function
0418C1             0314*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0418C1             0315*  ;          sign flags: pos = time not expired,zero or neg = time expired
0418C1             0316*  ; destroys: af,hl,de
0418C1             0317*  timestamp_tmr_get:
0418C1 ED 5B 90 18 0318*      ld de,(timestamp_now)   ; get current timestamp
       04          
0418C6 FD 27 00    0319*      ld hl,(iy+0)            ; get start time
0418C9 AF          0320*      xor a                   ; clear carry
0418CA ED 52       0321*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0418CC FD 17 03    0322*      ld de,(iy+3)            ; get timer set value
0418CF AF          0323*      xor a                   ; clear carry
0418D0 ED 5A       0324*      adc hl,de               ; hl = time remaining
0418D2             0325*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0418D2 C9          0326*      ret
0418D3             0327*  
0418D3             0328*  ; main loop timer functions
0418D3             0329*  tmr_main_loop: ds 6 ; buffer to hold main loop timer
0418D9             0330*  
0418D9             0331*  ; set a countdown timer for the main loop using the timestamp timer
0418D9             0332*  ; inputs: hl = time to set in 1/120ths of a second
0418D9             0333*  ; returns: hl = current time
0418D9             0334*  ; destroys: af,hl,de,ix,iy
0418D9             0335*  tmr_main_loop_set:
0418D9 FD 21 D3 18 0336*      ld iy,tmr_main_loop
       04          
0418DE FD 2F 03    0337*      ld (iy+3),hl ; set time remaining
0418E1 CD 99 18 04 0338*      call timestamp_tick
0418E5 2A 90 18 04 0339*      ld hl,(timestamp_now)   ; get current timestamp
0418E9 FD 2F 00    0340*      ld (iy+0),hl ; set start time
0418EC C9          0341*      ret
0418ED             0342*  
0418ED             0343*  ; gets time remaining on the main loop countdown timer following the global timestamp
0418ED             0344*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0418ED             0345*  ;          sign flags: pos = time not expired,zero or neg = time expired
0418ED             0346*  ; destroys: af,hl,de,ix,iy
0418ED             0347*  tmr_main_loop_get:
0418ED CD 99 18 04 0348*      call timestamp_tick
0418F1 FD 21 D3 18 0349*      ld iy,tmr_main_loop
       04          
0418F6 CD C1 18 04 0350*      call timestamp_tmr_get
0418FA C9          0351*      ret
0418FB             0352*  
0418FB             0353*  ; set a stopwatch
0418FB             0354*  ; returns: hl = start time
0418FB             0355*  ; destroys: hl,ix
0418FB             0356*  stopwatch_set:
0418FB             0357*      MOSCALL mos_sysvars     ; ix points to syvars table
0418FB 3E 08       0001*M 			LD	A, function
0418FD 5B CF       0002*M 			RST.LIL	08h
0418FF DD 27 00    0358*      ld hl,(ix+sysvar_time)  ; get current time
041902 22 17 19 04 0359*      ld (stopwatch_started),hl            ; set start time
041906 C9          0360*      ret
041907             0361*  
041907             0362*  ; gets time elapsed on a stopwatch
041907             0363*  ; returns: hl = time elapsed in 1/120ths of a second
041907             0364*  ; destroys: af,hl,de,ix
041907             0365*  stopwatch_get:
041907             0366*      MOSCALL mos_sysvars     ; ix points to syvars table
041907 3E 08       0001*M 			LD	A, function
041909 5B CF       0002*M 			RST.LIL	08h
04190B DD 27 00    0367*      ld hl,(ix+sysvar_time)  ; get current time
04190E ED 5B 17 19 0368*      ld de,(stopwatch_started)            ; get start time
       04          
041913 AF          0369*      xor a                   ; clear carry
041914 ED 52       0370*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041916 C9          0371*      ret
041917             0372*  
041917             0373*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04191A             0374*  
04191A             0375*  ; ------------------
04191A             0376*  ; delay routine
04191A             0377*  ; Author: Richard Turrnidge
04191A             0378*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
04191A             0379*  ; routine waits a fixed time,then returns
04191A             0380*  ; arrive with A =  the delay byte. One bit to be set only.
04191A             0381*  ; eg. ld A,00000100b
04191A             0382*  
04191A             0383*  multiPurposeDelay:
04191A F5          0384*      push af
04191B C5          0385*      push bc
04191C DD E5       0386*      push ix
04191E 47          0387*      ld b,a
04191F 3E 08       0388*      ld a,$08
041921 5B CF       0389*      RST.LIL	08h                 ; get IX pointer to sysvars
041923             0390*  
041923             0391*  waitLoop:
041923             0392*  
041923 DD 7E 00    0393*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041926             0394*  
041926             0395*                                  ;   we check if bit set is same as last time we checked.
041926             0396*                                  ;   bit 0 - don't use
041926             0397*                                  ;   bit 1 - changes 64 times per second
041926             0398*                                  ;   bit 2 - changes 32 times per second
041926             0399*                                  ;   bit 3 - changes 16 times per second
041926             0400*  
041926             0401*                                  ;   bit 4 - changes 8 times per second
041926             0402*                                  ;   bit 5 - changes 4 times per second
041926             0403*                                  ;   bit 6 - changes 2 times per second
041926             0404*                                  ;   bit 7 - changes 1 times per second
041926 A0          0405*      and b
041927 4F          0406*      ld c,a
041928 3A 39 19 04 0407*      ld a,(oldTimeStamp)
04192C B9          0408*      cp c                        ; is A same as last value?
04192D 28 F4       0409*      jr z,waitLoop              ; loop here if it is
04192F 79          0410*      ld a,c
041930 32 39 19 04 0411*      ld (oldTimeStamp),a        ; set new value
041934             0412*  
041934 DD E1       0413*      pop ix
041936 C1          0414*      pop bc
041937 F1          0415*      pop af
041938 C9          0416*      ret
041939             0417*  
041939 00          0418*  oldTimeStamp:   .db 00h
04193A             0035       include "vdu.inc"
04193A             0001*  ; &E8-&EF 	232-239 	Bitmap plot §
04193A             0002*  plot_bmp: equ 0xE8
04193A             0003*  ; 5 	Plot absolute in current foreground colour
04193A             0004*  dr_abs_fg: equ 5
04193A             0005*  
04193A             0006*  ; VDU 30: Home cursor
04193A             0007*  vdu_home_cursor:
04193A 3E 1E       0008*      ld a,30
04193C 5B D7       0009*  	rst.lil $10
04193E C9          0010*  	ret
04193F             0011*  
04193F             0012*  cursor_on:
04193F 21 4A 19 04 0013*  	ld hl,@cmd
041943 01 03 00 00 0014*  	ld bc,@end-@cmd
041947 5B DF       0015*  	rst.lil $18
041949 C9          0016*  	ret
04194A             0017*  @cmd:
04194A 17 01 01    0018*  	db 23,1,1
04194D             0019*  @end:
04194D             0020*  
04194D             0021*  cursor_off:
04194D 21 58 19 04 0022*  	ld hl,@cmd
041951 01 03 00 00 0023*  	ld bc,@end-@cmd
041955 5B DF       0024*  	rst.lil $18
041957 C9          0025*  	ret
041958             0026*  @cmd:
041958 17 01 00    0027*  	db 23,1,0
04195B             0028*  @end:
04195B             0029*  
04195B             0030*  ; VDU 9: Move cursor forward one character
04195B             0031*  vdu_cursor_forward:
04195B 3E 09       0032*      ld a,9
04195D 5B D7       0033*  	rst.lil $10
04195F C9          0034*  	ret
041960             0035*  
041960             0036*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041960             0037*  ; inputs: c=x, b=y 8-bit unsigned integers
041960             0038*  vdu_move_cursor:
041960 ED 43 71 19 0039*      ld (@x0),bc
       04          
041965 21 70 19 04 0040*  	ld hl,@cmd
041969 01 03 00 00 0041*  	ld bc,@end-@cmd
04196D 5B DF       0042*  	rst.lil $18
04196F C9          0043*  	ret
041970 1F          0044*  @cmd: 	db 31
041971 00          0045*  @x0:	db 0
041972 00          0046*  @y0: 	db 0
041973 00          0047*  @end: 	db 0 ; padding
041974             0048*  
041974             0049*  ; VDU 12: Clear text area (CLS)
041974             0050*  vdu_cls:
041974 3E 0C       0051*      ld a,12
041976 5B D7       0052*  	rst.lil $10
041978 C9          0053*  	ret
041979             0054*  
041979             0055*  vdu_flip:
041979 21 84 19 04 0056*  	ld hl,@cmd
04197D 01 03 00 00 0057*  	ld bc,@end-@cmd
041981 5B DF       0058*  	rst.lil $18
041983 C9          0059*  	ret
041984 17 00 C3    0060*  @cmd: db 23,0,0xC3
041987             0061*  @end:
041987             0062*  
041987             0063*  ; VDU 16: Clear graphics area (CLG)
041987             0064*  vdu_clg:
041987 3E 10       0065*      ld a,16
041989 5B D7       0066*  	rst.lil $10
04198B C9          0067*  	ret
04198C             0068*  
04198C             0069*  ; VDU 17, colour: Define text colour (COLOUR)
04198C             0070*  vdu_colour_text:
04198C 32 9C 19 04 0071*  	ld (@arg),a
041990 21 9B 19 04 0072*  	ld hl,@cmd
041994 01 02 00 00 0073*  	ld bc,@end-@cmd
041998 5B DF       0074*  	rst.lil $18
04199A C9          0075*  	ret
04199B 11          0076*  @cmd: db 17
04199C 00          0077*  @arg: db 0
04199D             0078*  @end:
04199D             0079*  
04199D             0080*  
04199D             0081*  vdu_gcol_bg:
04199D 32 B4 19 04 0082*  	ld (@mode),a
0419A1 79          0083*      ld a,c
0419A2 C6 80       0084*      add a,128
0419A4 32 B5 19 04 0085*      ld (@col),a
0419A8 21 B3 19 04 0086*  	ld hl,@cmd
0419AC 01 03 00 00 0087*  	ld bc,@end-@cmd
0419B0 5B DF       0088*  	rst.lil $18
0419B2 C9          0089*  	ret
0419B3 12          0090*  @cmd:  db 18
0419B4 00          0091*  @mode: db 0
0419B5 00          0092*  @col:  db 0
0419B6             0093*  @end:
0419B6             0094*  
0419B6             0095*  
0419B6             0096*  ; VDU 28, left, bottom, right, top: Set text viewport **
0419B6             0097*  ; MIND THE LITTLE-ENDIANESS
0419B6             0098*  ; inputs: c=left,b=bottom,e=right,d=top
0419B6             0099*  ; outputs; nothing
0419B6             0100*  ; destroys: a might make it out alive
0419B6             0101*  vdu_set_txt_viewport:
0419B6 ED 43 CC 19 0102*      ld (@lb),bc
       04          
0419BB ED 53 CE 19 0103*  	ld (@rt),de
       04          
0419C0 21 CB 19 04 0104*  	ld hl,@cmd
0419C4 01 05 00 00 0105*  	ld bc,@end-@cmd
0419C8 5B DF       0106*  	rst.lil $18
0419CA C9          0107*  	ret
0419CB 1C          0108*  @cmd:   db 28 ; set text viewport command
0419CC 00 00       0109*  @lb: 	dw 0x0000 ; set by bc
0419CE 00 00       0110*  @rt: 	dw 0x0000 ; set by de
0419D0 00          0111*  @end:   db 0x00	  ; padding
0419D1             0112*  
0419D1             0113*  ; Wait for VBLANK interrupt
0419D1             0114*  vdu_vblank:
0419D1 DD E5       0115*      PUSH 	IX
0419D3             0116*  	MOSCALL	mos_sysvars
0419D3 3E 08       0001*M 			LD	A, function
0419D5 5B CF       0002*M 			RST.LIL	08h
0419D7 DD 7E 00    0117*  	LD	A, (IX + sysvar_time + 0)
0419DA             0118*  @wait:
0419DA DD BE 00    0119*      CP 	A, (IX + sysvar_time + 0)
0419DD 28 FB       0120*      JR	Z, @wait
0419DF DD E1       0121*      POP	IX
0419E1 C9          0122*      RET
0419E2             0123*  
0419E2             0124*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
0419E2             0125*  ; NOTE: the order of the y-coordinate parameters are inverted
0419E2             0126*  ; 	because we have turned off logical screen scaling
0419E2             0127*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0419E2             0128*  ; outputs; nothing
0419E2             0129*  ; destroys: a might make it out alive
0419E2             0130*  vdu_set_gfx_viewport:
0419E2 ED 43 02 1A 0131*      ld (@x0),bc
       04          
0419E7 FD 22 04 1A 0132*      ld (@y1),iy
       04          
0419EC DD 22 06 1A 0133*  	ld (@x1),ix
       04          
0419F1 ED 53 08 1A 0134*  	ld (@y0),de
       04          
0419F6 21 01 1A 04 0135*  	ld hl,@cmd
0419FA 01 09 00 00 0136*  	ld bc,@end-@cmd
0419FE 5B DF       0137*  	rst.lil $18
041A00 C9          0138*  	ret
041A01 18          0139*  @cmd:   db 24 ; set graphics viewport command
041A02 00 00       0140*  @x0: 	dw 0x0000 ; set by bc
041A04 00 00       0141*  @y1: 	dw 0x0000 ; set by iy
041A06 00 00       0142*  @x1: 	dw 0x0000 ; set by ix
041A08 00 00       0143*  @y0: 	dw 0x0000 ; set by de
041A0A 00          0144*  @end:   db 0x00	  ; padding
041A0B             0145*  
041A0B             0146*  ; SCREEN MODES
041A0B             0147*  ; ===============================
041A0B             0148*  ; Mode  Horz  Vert  Cols  Refresh
041A0B             0149*  ; ---   ----  ----  ----  -------
041A0B             0150*  ; 11    320   240   2     60hz
041A0B             0151*  ; 139   320   240   2     60hz
041A0B             0152*  ; 23    512   384   2     60hz
041A0B             0153*  ; 151   512   384   2     60hz
041A0B             0154*  ; 6     640   240   2     60hz
041A0B             0155*  ; 134   640   240   2     60hz
041A0B             0156*  ; 2     640   480   2     60hz
041A0B             0157*  ; 130   640   480   2     60hz
041A0B             0158*  ; 17    800   600   2     60hz
041A0B             0159*  ; 145   800   600   2     60hz
041A0B             0160*  ; 18    1024  768   2     60hz
041A0B             0161*  ; 146   1024  768   2     60hz
041A0B             0162*  ; ---   ----  ----  ----  -------
041A0B             0163*  ; 10    320   240   4     60hz
041A0B             0164*  ; 138   320   240   4     60hz
041A0B             0165*  ; 22    512   384   4     60hz
041A0B             0166*  ; 150   512   384   4     60hz
041A0B             0167*  ; 5     640   240   4     60hz
041A0B             0168*  ; 133   640   240   4     60hz
041A0B             0169*  ; 1     640   480   4     60hz
041A0B             0170*  ; 129   640   480   4     60hz
041A0B             0171*  ; 16    800   600   4     60hz
041A0B             0172*  ; 19    1024  768   4     60hz
041A0B             0173*  ; ---   ----  ----  ----  -------
041A0B             0174*  ; 9     320   240   16    60hz
041A0B             0175*  ; 137   320   240   16    60hz
041A0B             0176*  ; 21    512   384   16    60hz
041A0B             0177*  ; 149   512   384   16    60hz
041A0B             0178*  ; 4     640   240   16    60hz
041A0B             0179*  ; 132   640   240   16    60hz
041A0B             0180*  ; 0     640   480   16    60hz
041A0B             0181*  ; 7     n/a   n/a   16    60hz
041A0B             0182*  ; ---   ----  ----  ----  -------
041A0B             0183*  ; 8     320   240   64    60hz
041A0B             0184*  ; 136   320   240   64    60hz
041A0B             0185*  ; 20    512   384   64    60hz
041A0B             0186*  ; 3     640   240   64    60hz
041A0B             0187*  ; ---   ----  ----  ----  -------
041A0B             0188*  vdu_set_screen_mode:
041A0B 32 1B 1A 04 0189*  	ld (@arg),a
041A0F 21 1A 1A 04 0190*  	ld hl,@cmd
041A13 01 02 00 00 0191*  	ld bc,@end-@cmd
041A17 5B DF       0192*  	rst.lil $18
041A19 C9          0193*  	ret
041A1A 16          0194*  @cmd: db 22 ; set screen mode
041A1B 00          0195*  @arg: db 0  ; screen mode parameter
041A1C             0196*  @end:
041A1C             0197*  
041A1C             0198*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041A1C             0199*  ; inputs: a is scaling mode, 1=on, 0=off
041A1C             0200*  ; note: default setting on boot is scaling ON
041A1C             0201*  vdu_set_scaling:
041A1C 32 2E 1A 04 0202*  	ld (@arg),a
041A20 21 2B 1A 04 0203*  	ld hl,@cmd
041A24 01 04 00 00 0204*  	ld bc,@end-@cmd
041A28 5B DF       0205*  	rst.lil $18
041A2A C9          0206*  	ret
041A2B 17 00 C0    0207*  @cmd: db 23,0,0xC0
041A2E 00          0208*  @arg: db 0  ; scaling on/off
041A2F             0209*  @end:
041A2F             0210*  
041A2F             0211*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041A2F             0212*  ; inputs: hl=bufferId
041A2F             0213*  vdu_buff_select:
041A2F 22 41 1A 04 0214*  	ld (@bufferId),hl
041A33 21 3E 1A 04 0215*  	ld hl,@cmd
041A37 01 05 00 00 0216*  	ld bc,@end-@cmd
041A3B 5B DF       0217*  	rst.lil $18
041A3D C9          0218*  	ret
041A3E 17 1B 20    0219*  @cmd: db 23,27,0x20
041A41 00 00       0220*  @bufferId: dw 0x0000
041A43 00          0221*  @end: db 0x00 ; padding
041A44             0222*  
041A44             0223*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041A44             0224*  ; inputs: a=format; bc=width; de=height
041A44             0225*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041A44             0226*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041A44             0227*  ; 0 	RGBA8888 (4-bytes per pixel)
041A44             0228*  ; 1 	RGBA2222 (1-bytes per pixel)
041A44             0229*  ; 2 	Mono/Mask (1-bit per pixel)
041A44             0230*  ; 3 	Reserved for internal use by VDP (“native” format)
041A44             0231*  vdu_bmp_create:
041A44 ED 43 60 1A 0232*      ld (@width),bc
       04          
041A49 ED 53 62 1A 0233*      ld (@height),de
       04          
041A4E 32 64 1A 04 0234*      ld (@fmt),a
041A52 21 5D 1A 04 0235*  	ld hl,@cmd
041A56 01 08 00 00 0236*  	ld bc,@end-@cmd
041A5A 5B DF       0237*  	rst.lil $18
041A5C C9          0238*  	ret
041A5D 17 1B 21    0239*  @cmd:       db 23,27,0x21
041A60 00 00       0240*  @width:     dw 0x0000
041A62 00 00       0241*  @height:    dw 0x0000
041A64 00          0242*  @fmt:       db 0x00
041A65             0243*  @end:
041A65             0244*  
041A65             0245*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041A65             0246*  ; &E8-&EF 	232-239 	Bitmap plot §
041A65             0247*  ; VDU 25, mode, x; y;: PLOT command
041A65             0248*  ; inputs: bc=x0, de=y0
041A65             0249*  ; prerequisites: vdu_buff_select
041A65             0250*  vdu_plot_bmp:
041A65 ED 43 7C 1A 0251*      ld (@x0),bc
       04          
041A6A ED 53 7E 1A 0252*      ld (@y0),de
       04          
041A6F 21 7A 1A 04 0253*  	ld hl,@cmd
041A73 01 06 00 00 0254*  	ld bc,@end-@cmd
041A77 5B DF       0255*  	rst.lil $18
041A79 C9          0256*  	ret
041A7A 19          0257*  @cmd:   db 25
041A7B ED          0258*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
041A7C 00 00       0259*  @x0: 	dw 0x0000
041A7E 00 00       0260*  @y0: 	dw 0x0000
041A80 00          0261*  @end:   db 0x00 ; padding
041A81             0262*  
041A81             0263*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041A81             0264*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041A81             0265*  vdu_load_img_rgba2_to_8:
041A81             0266*  ; backup the target buffer id and image dimensions
041A81 E5          0267*      push hl
041A82 D5          0268*      push de
041A83 C5          0269*      push bc
041A84             0270*  ; load the rgba2 image to working buffer 65534
041A84 21 FE FF 00 0271*      ld hl,65534 ; temporary working buffer id
041A88 CD 8B 1B 04 0272*  	call vdu_load_buffer_from_file
041A8C             0273*  ; restore the image dimensions and target buffer id
041A8C C1          0274*      pop bc
041A8D D1          0275*      pop de
041A8E E1          0276*      pop hl
041A8F             0277*  ; fall through to vdu_rgba2_to_8
041A8F             0278*  
041A8F             0279*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041A8F             0280*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041A8F             0281*  ; the "expand bitmap" command is:
041A8F             0282*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041A8F             0283*  ; and then to reverse the byte order to fix endian-ness:
041A8F             0284*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041A8F             0285*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041A8F             0286*  ; VDU 23,27,&20,targetBufferID%;
041A8F             0287*  ; VDU 23,27,&21,width%;height%;0
041A8F             0288*  ; -------------------------------------------------------------------
041A8F             0289*  ; inputs: bc,de image width,height ; hl = targetBufferId
041A8F             0290*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041A8F             0291*  vdu_rgba2_to_8:
041A8F             0292*  ; load the image dimensions and buffer id parameters
041A8F ED 43 EB 1A 0293*      ld (@width),bc
       04          
041A94 ED 53 ED 1A 0294*      ld (@height),de
       04          
041A99 22 D0 1A 04 0295*      ld (@bufferId0),hl
041A9D 22 DD 1A 04 0296*      ld (@bufferId2),hl
041AA1 22 E6 1A 04 0297*      ld (@bufferId1),hl
041AA5             0298*  ; clean up bytes that got stomped on by the ID loads
041AA5 3E 48       0299*      ld a,0x48
041AA7 32 D2 1A 04 0300*      ld (@bufferId0+2),a
041AAB 3E 17       0301*      ld a,23
041AAD 32 E8 1A 04 0302*      ld (@bufferId1+2),a
041AB1 3E 18       0303*      ld a,24
041AB3 32 DF 1A 04 0304*      ld (@bufferId2+2),a
041AB7 AF          0305*      xor a
041AB8 32 EF 1A 04 0306*      ld (@height+2),a
041ABC             0307*  ; send the vdu command strings
041ABC 21 C7 1A 04 0308*      ld hl,@beg
041AC0 01 29 00 00 0309*      ld bc,@end-@beg
041AC4 5B DF       0310*      rst.lil $18
041AC6 C9          0311*      ret
041AC7             0312*  @beg:
041AC7             0313*  ; Command 14: Consolidate blocks in a buffer
041AC7             0314*  ; VDU 23, 0, &A0, bufferId; 14
041AC7 17 00 A0    0315*      db 23,0,0xA0
041ACA FE FF       0316*      dw 65534 ; workingBufferId
041ACC 0E          0317*      db 14 ; consolidate blocks
041ACD             0318*  ; the "expand bitmap" command is:
041ACD             0319*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041ACD 17 00 A0    0320*      db 23,0,0xA0
041AD0 00 00       0321*  @bufferId0: dw 0x0000 ; targetBufferId
041AD2 48          0322*      db 0x48 ; given as decimal command 72 in the docs
041AD3 02          0323*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041AD4 FE FF       0324*      dw 65534 ; sourceBufferId
041AD6 00 7F BF FF 0325*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041ADA             0326*  ; reverse the byte order to fix endian-ness:
041ADA             0327*  ; Command 24: Reverse the order of data of blocks within a buffer
041ADA             0328*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041ADA             0329*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041ADA 17 00 A0    0330*      db 23,0,0xA0
041ADD 00 00       0331*  @bufferId2:    dw 0x0000 ; targetBufferId
041ADF 18          0332*      db 24 ; reverse byte order
041AE0 04          0333*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041AE1 04 00       0334*      dw 4 ; size (4 bytes)
041AE3             0335*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041AE3             0336*  ; VDU 23,27,&20,targetBufferID%;
041AE3 17 1B 20    0337*      db 23,27,0x20 ; select bitmap
041AE6 00 00       0338*  @bufferId1: dw 0x0000 ; targetBufferId
041AE8             0339*  ; VDU 23,27,&21,width%;height%;0
041AE8 17 1B 21    0340*      db 23,27,0x21 ; create bitmap from buffer
041AEB 00 00       0341*  @width: dw 0x0000
041AED 00 00       0342*  @height: dw 0x0000
041AEF 00          0343*      db 0x00 ; rgba8888 format
041AF0             0344*  @end:
041AF0             0345*  
041AF0             0346*  ; scratch variables
041AF0 00 00 00    0347*  bufferId0: dl 0x000000
041AF3 00 00 00    0348*  bufferId1: dl 0x000000
041AF6             0349*  
041AF6             0350*  ; load a vdu buffer from local memory
041AF6             0351*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041AF6             0352*  vdu_load_buffer:
041AF6 ED 43 1F 1B 0353*      ld (@length),bc
       04          
041AFB D5          0354*      push de ; save data pointer
041AFC             0355*  ; send the vdu command string
041AFC 7D          0356*      ld a,l
041AFD 32 1C 1B 04 0357*      ld (@bufferId),a
041B01 7C          0358*      ld a,h
041B02 32 1D 1B 04 0359*      ld (@bufferId+1),a
041B06 21 19 1B 04 0360*      ld hl,@cmd
041B0A 01 08 00 00 0361*      ld bc,@end-@cmd
041B0E 5B DF       0362*      rst.lil $18
041B10             0363*  ; send the buffer data
041B10 E1          0364*      pop hl ; pointer to data
041B11 ED 4B 1F 1B 0365*      ld bc,(@length)
       04          
041B16 5B DF       0366*      rst.lil $18 ; send it
041B18 C9          0367*      ret
041B19             0368*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041B19 17 00 A0    0369*  @cmd:       db 23,0,0xA0
041B1C 00 00       0370*  @bufferId:	dw 0x0000
041B1E 00          0371*  		    db 0 ; load buffer
041B1F 00 00       0372*  @length:	dw 0x0000
041B21 00          0373*  @end: db 0 ; padding
041B22             0374*  
041B22             0375*  ; clear a buffer
041B22             0376*  ; inputs: hl = bufferId
041B22             0377*  vdu_clear_buffer:
041B22 7D          0378*      ld a,l
041B23 32 3A 1B 04 0379*      ld (@bufferId),a
041B27 7C          0380*      ld a,h
041B28 32 3B 1B 04 0381*      ld (@bufferId+1),a
041B2C 21 37 1B 04 0382*      ld hl,@cmd
041B30 01 06 00 00 0383*      ld bc,@end-@cmd
041B34 5B DF       0384*      rst.lil $18
041B36 C9          0385*      ret
041B37 17 00 A0    0386*  @cmd:       db 23,0,0xA0
041B3A 00 00       0387*  @bufferId:	dw 0x0000
041B3C 02          0388*  		    db 2 ; clear buffer
041B3D             0389*  @end:
041B3D             0390*  
041B3D             0391*  vdu_clear_all_buffers:
041B3D             0392*  ; clear all buffers
041B3D 21 48 1B 04 0393*      ld hl,@beg
041B41 01 06 00 00 0394*      ld bc,@end-@beg
041B45 5B DF       0395*      rst.lil $18
041B47 C9          0396*      ret
041B48 17 00 A0    0397*  @beg: db 23,0,$A0
041B4B FF FF       0398*        dw -1 ; clear all buffers
041B4D 02          0399*        db 2  ; command 2: clear a buffer
041B4E             0400*  @end:
041B4E             0401*  
041B4E             0402*  ; Command 14: Consolidate blocks in a buffer
041B4E             0403*  vdu_consolidate_buffer:
041B4E             0404*  ; set parameters for vdu call
041B4E 7D          0405*      ld a,l
041B4F 32 66 1B 04 0406*      ld (@bufferId),a
041B53 7C          0407*      ld a,h
041B54 32 67 1B 04 0408*      ld (@bufferId+1),a
041B58 21 63 1B 04 0409*      ld hl,@beg
041B5C 01 06 00 00 0410*      ld bc,@end-@beg
041B60 5B DF       0411*      rst.lil $18
041B62 C9          0412*      ret
041B63             0413*  ; VDU 23, 0, &A0, bufferId; 14
041B63 17 00 A0    0414*  @beg: db 23,0,0xA0
041B66 00 00       0415*  @bufferId: dw 0x0000
041B68 0E          0416*             db 14
041B69             0417*  @end:
041B69             0418*  
041B69             0419*  ; load an image file to a buffer and make it a bitmap
041B69             0420*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041B69             0421*  vdu_load_img:
041B69             0422*  ; back up image type and dimension parameters
041B69 22 F0 1A 04 0423*      ld (bufferId0),hl
041B6D F5          0424*      push af
041B6E C5          0425*  	push bc
041B6F D5          0426*  	push de
041B70             0427*  ; load the image
041B70 CD 8B 1B 04 0428*  	call vdu_load_buffer_from_file
041B74             0429*  ; now make it a bitmap
041B74 2A F0 1A 04 0430*      ld hl,(bufferId0)
041B78 CD 4E 1B 04 0431*      call vdu_consolidate_buffer
041B7C 2A F0 1A 04 0432*      ld hl,(bufferId0)
041B80 CD 2F 1A 04 0433*      call vdu_buff_select
041B84 D1          0434*  	pop de ; image height
041B85 C1          0435*  	pop bc ; image width
041B86 F1          0436*  	pop af ; image type
041B87 C3 44 1A 04 0437*  	jp vdu_bmp_create ; will return to caller from there
041B8B             0438*  
041B8B             0439*  ; inputs: hl = bufferId; iy = pointer to filename
041B8B             0440*  vdu_load_buffer_from_file:
041B8B 22 F0 1A 04 0441*      ld (bufferId0),hl
041B8F             0442*  
041B8F             0443*  ; clear target buffer
041B8F CD 22 1B 04 0444*      call vdu_clear_buffer
041B93             0445*  
041B93             0446*  ; open the file in read mode
041B93             0447*  ; Open a file
041B93             0448*  ; HLU: Filename
041B93             0449*  ;   C: Mode
041B93             0450*  ; Returns:
041B93             0451*  ;   A: Filehandle, or 0 if couldn't open
041B93 FD E5       0452*  	push iy ; pointer to filename
041B95 E1          0453*  	pop hl
041B96 0E 01       0454*  	ld c,fa_read
041B98             0455*      MOSCALL mos_fopen
041B98 3E 0A       0001*M 			LD	A, function
041B9A 5B CF       0002*M 			RST.LIL	08h
041B9C 32 D7 1B 04 0456*      ld (@filehandle),a
041BA0             0457*  
041BA0             0458*  @read_file:
041BA0             0459*  ; Read a block of data from a file
041BA0             0460*  ;   C: Filehandle
041BA0             0461*  ; HLU: Pointer to where to write the data to
041BA0             0462*  ; DEU: Number of bytes to read
041BA0             0463*  ; Returns:
041BA0             0464*  ; DEU: Number of bytes read
041BA0 3A D7 1B 04 0465*      ld a,(@filehandle)
041BA4 4F          0466*      ld c,a
041BA5 21 00 E0 B7 0467*      ld hl,filedata
041BA9 11 00 20 00 0468*      ld de,8192 ; max we can read into onboard sram at one time
041BAD             0469*      MOSCALL mos_fread
041BAD 3E 1A       0001*M 			LD	A, function
041BAF 5B CF       0002*M 			RST.LIL	08h
041BB1             0470*  
041BB1             0471*  ; ; DEBUG: print chunk size
041BB1             0472*  ;     push de
041BB1             0473*  ;     pop hl
041BB1             0474*  ;     call printDec
041BB1             0475*  ;     call printNewLine
041BB1             0476*  
041BB1             0477*  ; test de for zero bytes read
041BB1 21 00 00 00 0478*      ld hl,0
041BB5 AF          0479*      xor a ; clear carry
041BB6 ED 52       0480*      sbc hl,de
041BB8 CA CE 1B 04 0481*      jp z,@close_file
041BBC             0482*  
041BBC             0483*  ; load a vdu buffer from local memory
041BBC             0484*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041BBC 2A F0 1A 04 0485*      ld hl,(bufferId0)
041BC0 D5          0486*      push de ; chunksize
041BC1 C1          0487*      pop bc
041BC2 11 00 E0 B7 0488*      ld de,filedata
041BC6 CD F6 1A 04 0489*      call vdu_load_buffer
041BCA             0490*  
041BCA             0491*  ; ; print progress breadcrumbs
041BCA             0492*  ;     ld a,'.'
041BCA             0493*  ;     rst.lil 10h
041BCA             0494*  
041BCA             0495*  ; read the next block
041BCA C3 A0 1B 04 0496*      jp @read_file
041BCE             0497*  
041BCE             0498*  ; close the file
041BCE             0499*  @close_file:
041BCE 3A D7 1B 04 0500*      ld a,(@filehandle)
041BD2             0501*      MOSCALL mos_fclose
041BD2 3E 0B       0001*M 			LD	A, function
041BD4 5B CF       0002*M 			RST.LIL	08h
041BD6 C9          0502*      ret ; vdu_load_buffer_from_file
041BD7             0503*  
041BD7 00          0504*  @filehandle: db 0 ; file handle
041BD8 00 00 00    0505*  @fil: dl 0 ; pointer to FIL struct
041BDB             0506*  
041BDB 00 00 00    0507*  @chunkpointer: dl 0 ; pointer to current chunk
041BDE             0508*  
041BDE             0509*  ; File information structure (FILINFO)
041BDE             0510*  @filinfo:
041BDE 00 00 00 00 0511*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041BE2 00 00       0512*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041BE4 00 00       0513*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041BE6 00          0514*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041BE7 00 00 00 00 0515*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041BF4 00 00 00 00 0516*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041CF4             0036       include "vdu_fonts.inc"
041CF4             0001*  ; select font
041CF4             0002*  ; inputs: hl = bufferId, a = font flags
041CF4             0003*  ; Flags:
041CF4             0004*  ; Bit	Description
041CF4             0005*  ; 0	Adjust cursor position to ensure text baseline is aligned
041CF4             0006*  ;   0: Do not adjust cursor position (best for changing font on a new line)
041CF4             0007*  ;   1: Adjust cursor position (best for changing font in the middle of a line)
041CF4             0008*  ; 1-7	Reserved for future use
041CF4             0009*  ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041CF4             0010*  vdu_font_select:
041CF4 22 0B 1D 04 0011*      ld (@bufferId),hl
041CF8 32 0D 1D 04 0012*      ld (@flags),a
041CFC 21 07 1D 04 0013*      ld hl,@cmd
041D00 01 07 00 00 0014*      ld bc,@end-@cmd
041D04 5B DF       0015*      rst.lil $18
041D06 C9          0016*      ret
041D07 17 00 95 00 0017*  @cmd: db 23, 0, 0x95, 0
041D0B 00 00       0018*  @bufferId: dw 0x0000
041D0D 00          0019*  @flags: db 0x00
041D0E             0020*  @end:
041D0E             0021*  
041D0E             0022*  ; create font from buffer
041D0E             0023*  ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041D0E             0024*  ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041D0E             0025*  vdu_font_create:
041D0E 22 33 1D 04 0026*      ld (@bufferId),hl
041D12 ED 53 35 1D 0027*      ld (@width),de ; also loads height
       04          
041D17 32 38 1D 04 0028*      ld (@flags),a
041D1B 7A          0029*      ld a,d ; height
041D1C 32 37 1D 04 0030*      ld (@ascent),a ; ascent = height
041D20             0031*  ; consolidate buffer
041D20 CD 4E 1B 04 0032*      call vdu_consolidate_buffer
041D24             0033*  ; create font
041D24 21 2F 1D 04 0034*      ld hl,@cmd
041D28 01 0A 00 00 0035*      ld bc,@end-@cmd
041D2C 5B DF       0036*      rst.lil $18
041D2E C9          0037*      ret
041D2F 17 00 95 01 0038*  @cmd: db 23, 0, 0x95, 1
041D33 00 00       0039*  @bufferId: dw 0x0000
041D35 00          0040*  @width: db 0x00
041D36 00          0041*  @height: db 0x00
041D37 00          0042*  @ascent: db 0x00
041D38 00          0043*  @flags: db 0x00
041D39             0044*  @end:
041D39             0045*  
041D39             0046*  ; set or adjust font property
041D39             0047*  ; inputs: hl = bufferId, a = field, de = value
041D39             0048*  ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041D39             0049*  vdu_font_property:
041D39 22 55 1D 04 0050*      ld (@bufferId),hl
041D3D 32 57 1D 04 0051*      ld (@field),a
041D41 ED 53 58 1D 0052*      ld (@value),de
       04          
041D46 21 51 1D 04 0053*      ld hl,@cmd
041D4A 01 09 00 00 0054*      ld bc,@end-@cmd
041D4E 5B DF       0055*      rst.lil $18
041D50 C9          0056*      ret
041D51 17 00 95 02 0057*  @cmd: db 23, 0, 0x95, 2
041D55 00 00       0058*  @bufferId: dw 0x0000
041D57 00          0059*  @field: db 0x00
041D58 00 00       0060*  @value: dw 0x0000
041D5A 00          0061*  @end: db 0x00 ; padding
041D5B             0062*  
041D5B             0063*  ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041D5B             0064*  
041D5B             0065*  ; Clear/Delete font
041D5B             0066*  ; inputs: hl = bufferId
041D5B             0067*  ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041D5B             0068*  vdu_font_clear:
041D5B 22 6E 1D 04 0069*      ld (@bufferId),hl
041D5F 21 6A 1D 04 0070*      ld hl,@cmd
041D63 01 06 00 00 0071*      ld bc,@end-@cmd
041D67 5B DF       0072*      rst.lil $18
041D69 C9          0073*      ret
041D6A 17 00 95 04 0074*  @cmd: db 23, 0, 0x95, 4
041D6E 00 00       0075*  @bufferId: dw 0x0000
041D70 00          0076*  @end: db 0x00 ; padding
041D71             0077*  
041D71             0078*  ; Copy system font to buffer
041D71             0079*  ; inputs: hl = bufferId
041D71             0080*  ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041D71             0081*  vdu_font_copy_system:
041D71 22 84 1D 04 0082*      ld (@bufferId),hl
041D75 21 80 1D 04 0083*      ld hl,@cmd
041D79 01 06 00 00 0084*      ld bc,@end-@cmd
041D7D 5B DF       0085*      rst.lil $18
041D7F C9          0086*      ret
041D80 17 00 95 05 0087*  @cmd: db 23, 0, 0x95, 5
041D84 00 00       0088*  @bufferId: dw 0x0000
041D86 00          0089*  @end: db 0x00 ; padding
041D87             0037   
041D87             0038   ; Application includes
041D87             0039   
041D87             0040   main:
041D87             0041   ; 19    1024  768   4     60hz
041D87 3E 13       0042       ld a,19
041D89 CD 0B 1A 04 0043       call vdu_set_screen_mode
041D8D             0044   
041D8D             0045   ; inputs: hl = bufferId; iy = pointer to filename
041D8D 1E 38       0046       ld e,Lat2_VGA32x16
041D8F 16 0C       0047       ld d,12 ; bytes per font list record
041D91 ED 5C       0048       mlt de
041D93 FD 21 88 04 0049       ld iy,font_list
       04          
041D98 FD 19       0050       add iy,de
041D9A FD E5       0051       push iy
041D9C             0052   
041D9C FD 37 09    0053       ld iy,(iy+9)
041D9F             0054   
041D9F             0055   ; debug print filename at iy
041D9F CD 91 00 04 0056       call printNewLine
041DA3 FD E5       0057       push iy
041DA5 E1          0058       pop hl
041DA6 CD 7C 00 04 0059       call printString
041DAA CD 91 00 04 0060       call printNewLine
041DAE             0061   
041DAE 21 00 40 00 0062       ld hl,0x4000
041DB2 E5          0063       push hl
041DB3 CD 8B 1B 04 0064       call vdu_load_buffer_from_file
041DB7             0065   
041DB7             0066   ; create font from buffer
041DB7             0067   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041DB7             0068   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041DB7 E1          0069       pop hl ; bufferId
041DB8 FD E1       0070       pop iy ; pointer to font list record
041DBA E5          0071       push hl
041DBB FD 7E 00    0072       ld a,(iy+0)
041DBE 5F          0073       ld e,a  ; width
041DBF FD 7E 03    0074       ld a,(iy+3)
041DC2 57          0075       ld d,a  ; height / ascent
041DC3 3E 00       0076       ld a,0 ; flags
041DC5 CD 0E 1D 04 0077       call vdu_font_create
041DC9             0078   
041DC9             0079   ; select font
041DC9             0080   ; inputs: hl = bufferId, a = font flags
041DC9             0081   ; Flags:
041DC9             0082   ; Bit	Description
041DC9             0083   ; 0	Adjust cursor position to ensure text baseline is aligned
041DC9             0084   ;   0: Do not adjust cursor position (best for changing font on a new line)
041DC9             0085   ;   1: Adjust cursor position (best for changing font in the middle of a line)
041DC9             0086   ; 1-7	Reserved for future use
041DC9             0087   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041DC9 E1          0088       pop hl
041DCA 3E 00       0089       ld a,0
041DCC CD F4 1C 04 0090       call vdu_font_select
041DD0             0091   
041DD0             0092   ; print test string
041DD0 CD 91 00 04 0093       call printNewLine
041DD4 21 E1 1D 04 0094       ld hl,test_string
041DD8 CD 7C 00 04 0095       call printString
041DDC CD 91 00 04 0096       call printNewLine
041DE0             0097   
041DE0             0098   ; all done
041DE0 C9          0099       ret
041DE1             0100   
041DE1             0101   
041DE1 54 68 65 20 0102   test_string: db "The quick brown fox jumps over the lazy dog.",0
       71 75 69 63 
       6B 20 62 72 
       6F 77 6E 20 
       66 6F 78 20 
       6A 75 6D 70 
       73 20 6F 76 
       65 72 20 74 
       68 65 20 6C 
       61 7A 79 20 
       64 6F 67 2E 
       00          

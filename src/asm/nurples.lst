PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C CD 4F 66 04 0015        call init
040050 CD 2B 67 04 0016        call main
040054             0017    
040054             0018    exit:
040054 FD E1       0019        pop iy
040056 DD E1       0020        pop ix
040058 D1          0021        pop de
040059 C1          0022        pop bc
04005A F1          0023        pop af
04005B 21 00 00 00 0024        ld hl,0
04005F             0025    
04005F C9          0026        ret
040060             0027    
040060             0028    ; API INCLUDES
040060             0029        include "mos_api.inc"
040060             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*   ; Title:	AGON MOS - API for user projects
040060             0003*   ; Author:	Dean Belfield
040060             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*   ;			Added MOS error codes for return in HL
040060             0006*   ; Created:	03/08/2022
040060             0007*   ; Last Updated:	10/08/2023
040060             0008*   ;
040060             0009*   ; Modinfo:
040060             0010*   ; 05/08/2022:	Added mos_feof
040060             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*   ; 13/10/2022:	Added mos_oscli
040060             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*   ; 19/05/2023:	Added sysvar_scrMode
040060             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*   ; 03/08/2023:	Added mos_setkbvector
040060             0028*   ; 10/08/2023:	Added mos_getkbmap
040060             0029*   
040060             0030*   ; VDP control (VDU 23, 0, n)
040060             0031*   ;
040060             0032*   vdp_gp:				EQU 80h
040060             0033*   vdp_keycode:		EQU 81h
040060             0034*   vdp_cursor:			EQU	82h
040060             0035*   vdp_scrchar:		EQU	83h
040060             0036*   vdp_scrpixel:		EQU	84h
040060             0037*   vdp_audio:			EQU	85h
040060             0038*   vdp_mode:			EQU	86h
040060             0039*   vdp_rtc:			EQU	87h
040060             0040*   vdp_keystate:		EQU	88h
040060             0041*   vdp_logicalcoords:	EQU	C0h
040060             0042*   vdp_terminalmode:	EQU	FFh
040060             0043*   
040060             0044*   ; MOS high level functions
040060             0045*   ;
040060             0046*   mos_getkey:			EQU	00h
040060             0047*   mos_load:			EQU	01h
040060             0048*   mos_save:			EQU	02h
040060             0049*   mos_cd:				EQU	03h
040060             0050*   mos_dir:			EQU	04h
040060             0051*   mos_del:			EQU	05h
040060             0052*   mos_ren:			EQU	06h
040060             0053*   mos_mkdir:			EQU	07h
040060             0054*   mos_sysvars:		EQU	08h
040060             0055*   mos_editline:		EQU	09h
040060             0056*   mos_fopen:			EQU	0Ah
040060             0057*   mos_fclose:			EQU	0Bh
040060             0058*   mos_fgetc:			EQU	0Ch
040060             0059*   mos_fputc:			EQU	0Dh
040060             0060*   mos_feof:			EQU	0Eh
040060             0061*   mos_getError:		EQU	0Fh
040060             0062*   mos_oscli:			EQU	10h
040060             0063*   mos_copy:			EQU	11h
040060             0064*   mos_getrtc:			EQU	12h
040060             0065*   mos_setrtc:			EQU	13h
040060             0066*   mos_setintvector:	EQU	14h
040060             0067*   mos_uopen:			EQU	15h
040060             0068*   mos_uclose:			EQU	16h
040060             0069*   mos_ugetc:			EQU	17h
040060             0070*   mos_uputc:			EQU	18h
040060             0071*   mos_getfil:			EQU	19h
040060             0072*   mos_fread:			EQU	1Ah
040060             0073*   mos_fwrite:			EQU	1Bh
040060             0074*   mos_flseek:			EQU	1Ch
040060             0075*   mos_setkbvector:	EQU	1Dh
040060             0076*   mos_getkbmap:		EQU	1Eh
040060             0077*   
040060             0078*   ; MOS program exit codes
040060             0079*   ;
040060             0080*   EXIT_OK:				EQU  0;	"OK",
040060             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*   ; FatFS file access functions
040060             0103*   ;
040060             0104*   ffs_fopen:			EQU	80h
040060             0105*   ffs_fclose:			EQU	81h
040060             0106*   ffs_fread:			EQU	82h
040060             0107*   ffs_fwrite:			EQU	83h
040060             0108*   ffs_flseek:			EQU	84h
040060             0109*   ffs_ftruncate:		EQU	85h
040060             0110*   ffs_fsync:			EQU	86h
040060             0111*   ffs_fforward:		EQU	87h
040060             0112*   ffs_fexpand:		EQU	88h
040060             0113*   ffs_fgets:			EQU	89h
040060             0114*   ffs_fputc:			EQU	8Ah
040060             0115*   ffs_fputs:			EQU	8Bh
040060             0116*   ffs_fprintf:		EQU	8Ch
040060             0117*   ffs_ftell:			EQU	8Dh
040060             0118*   ffs_feof:			EQU	8Eh
040060             0119*   ffs_fsize:			EQU	8Fh
040060             0120*   ffs_ferror:			EQU	90h
040060             0121*   
040060             0122*   ; FatFS directory access functions
040060             0123*   ;
040060             0124*   ffs_dopen:			EQU	91h
040060             0125*   ffs_dclose:			EQU	92h
040060             0126*   ffs_dread:			EQU	93h
040060             0127*   ffs_dfindfirst:		EQU	94h
040060             0128*   ffs_dfindnext:		EQU	95h
040060             0129*   
040060             0130*   ; FatFS file and directory management functions
040060             0131*   ;
040060             0132*   ffs_stat:			EQU	96h
040060             0133*   ffs_unlink:			EQU	97h
040060             0134*   ffs_rename:			EQU	98h
040060             0135*   ffs_chmod:			EQU	99h
040060             0136*   ffs_utime:			EQU	9Ah
040060             0137*   ffs_mkdir:			EQU	9Bh
040060             0138*   ffs_chdir:			EQU	9Ch
040060             0139*   ffs_chdrive:		EQU	9Dh
040060             0140*   ffs_getcwd:			EQU	9Eh
040060             0141*   
040060             0142*   ; FatFS volume management and system configuration functions
040060             0143*   ;
040060             0144*   ffs_mount:			EQU	9Fh
040060             0145*   ffs_mkfs:			EQU	A0h
040060             0146*   ffs_fdisk:			EQU	A1h
040060             0147*   ffs_getfree:		EQU	A2h
040060             0148*   ffs_getlabel:		EQU	A3h
040060             0149*   ffs_setlabel:		EQU	A4h
040060             0150*   ffs_setcp:			EQU	A5h
040060             0151*   
040060             0152*   ; File access modes
040060             0153*   ;
040060             0154*   fa_read:			EQU	01h
040060             0155*   fa_write:			EQU	02h
040060             0156*   fa_open_existing:	EQU	00h
040060             0157*   fa_create_new:		EQU	04h
040060             0158*   fa_create_always:	EQU	08h
040060             0159*   fa_open_always:		EQU	10h
040060             0160*   fa_open_append:		EQU	30h
040060             0161*   
040060             0162*   ; System variable indexes for api_sysvars
040060             0163*   ; Index into _sysvars in globals.inc
040060             0164*   ;
040060             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*   
040060             0192*   ; Flags for the VPD protocol
040060             0193*   ;
040060             0194*   vdp_pflag_cursor:		EQU	00000001b
040060             0195*   vdp_pflag_scrchar:		EQU	00000010b
040060             0196*   vdp_pflag_point:		EQU	00000100b
040060             0197*   vdp_pflag_audio:		EQU	00001000b
040060             0198*   vdp_pflag_mode:			EQU	00010000b
040060             0199*   vdp_pflag_rtc:			EQU	00100000b
040060             0200*   
040060             0201*   ;
040060             0202*   ; FatFS structures
040060             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*   ;
040060             0205*   ; Object ID and allocation information (FFOBJID)
040060             0206*   ;
040060             0207*   ; Indexes into FFOBJID structure
040060             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*   ;
040060             0215*   ; File object structure (FIL)
040060             0216*   ;
040060             0217*   ; Indexes into FIL structure
040060             0218*   fil_obj:		EQU 0	; 15: Object identifier
040060             0219*   fil_flag:		EQU	15 	;  1: File status flags
040060             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*   ;
040060             0227*   ; Directory object structure (DIR)
040060             0228*   ; Indexes into DIR structure
040060             0229*   dir_obj:		EQU  0	; 15: Object identifier
040060             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*   dir_clust:		EQU	19	;  4: Current cluster
040060             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*   ;
040060             0237*   ; File information structure (FILINFO)
040060             0238*   ;
040060             0239*   ; Indexes into FILINFO structure
040060             0240*   filinfo_fsize:		EQU 0	;   4: File size
040060             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*   ;
040060             0247*   ; Macro for calling the API
040060             0248*   ; Parameters:
040060             0249*   ; - function: One of the function numbers listed above
040060             0250*   ;
040060             0251*   	MACRO	MOSCALL	function
040060             0252*   			LD	A, function
040060             0253*   			RST.LIL	08h
040060             0254*   	ENDMACRO
040060             0030        include "functions.inc"
040060 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040100             0002*   
040100             0003*       MACRO printChar char
040100             0004*       LD A, char
040100             0005*       RST.LIL 10h
040100             0006*       ENDMACRO
040100             0007*   
040100             0008*   ; Simulated call to subroutine at HL
040100             0009*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040100             0010*   ; outputs: whatever the subroutine does, including HL and BC
040100             0011*   ; destroys: only what the subroutine does, but always BC
040100             0012*       MACRO callHL
040100             0013*       ld bc,@F ; Address of first instruction after the jump
040100             0014*       push bc ; which constitutes the return address
040100             0015*       jp (hl) ; Jump to the address in HL
040100             0016*   @@:
040100             0017*       ENDMACRO
040100             0018*   
040100             0019*   ; Simulated call to subroutine at IX
040100             0020*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040100             0021*   ; outputs: whatever the subroutine does, including IX and BC
040100             0022*   ; destroys: only what the subroutine does, but always BC
040100             0023*       MACRO callIX
040100             0024*       ld bc,@F ; Address of first instruction after the jump
040100             0025*       push bc ; which constitutes the return address
040100             0026*       jp (ix) ; Jump to the address in IX
040100             0027*   @@:
040100             0028*       ENDMACRO
040100             0029*   
040100             0030*   ; Simulated call to soubroutinte at IY
040100             0031*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040100             0032*   ; outputs: whatever the subroutine does, including IY and BC
040100             0033*   ; destroys: only what the subroutine does, but always BC
040100             0034*       MACRO callIY
040100             0035*       ld bc,@F ; Address of first instruction after the jump
040100             0036*       push bc ; which constitutes the return address
040100             0037*       jp (iy) ; Jump to the address in IY
040100             0038*   @@:
040100             0039*       ENDMACRO
040100             0040*   
040100             0041*   ; put the value in HLU into the accumulator
040100             0042*   ; destroys: af
040100             0043*       MACRO HLU_TO_A
040100             0044*       push hl ; 4 cycles
040100             0045*       inc sp ; 1 cycle
040100             0046*       pop af ; 4 cycles
040100             0047*       dec sp ; 1 cycle
040100             0048*       ; 10 cycles total
040100             0049*       ENDMACRO
040100             0050*   
040100             0051*   A_TO_HLU:
040100             0052*       ; call is 7 cycles
040100 22 0D 01 04 0053*       ld (@scratch),hl ; 7 cycles
040104 32 0F 01 04 0054*       ld (@scratch+2),a ; 5 cycles
040108 2A 0D 01 04 0055*       ld hl,(@scratch) ; 7 cycles
04010C C9          0056*       ret ; 6 cycles
04010D             0057*       ; 25 cycles total
04010D 00 00 00    0058*   @scratch: dl 0
040110             0059*   
040110             0060*       ; TODO: implement this
040110             0061*       ; MACRO A_TO_HLU
040110             0062*       ;     push.s af
040110             0063*       ;     inc sp
040110             0064*       ;     push.s hl
040110             0065*       ;     pop hl
040110             0066*       ;     inc sp
040110             0067*       ;     inc sp
040110             0068*       ; ENDMACRO
040110             0069*   
040110             0070*       MACRO PUSH_ALL
040110             0071*       ex af,af'
040110             0072*       exx
040110             0073*       push af
040110             0074*       push hl
040110             0075*       push bc
040110             0076*       push de
040110             0077*   
040110             0078*       ex af,af'
040110             0079*       exx
040110             0080*       push af
040110             0081*       push hl
040110             0082*       push bc
040110             0083*       push de
040110             0084*       push ix
040110             0085*       push iy
040110             0086*       ENDMACRO
040110             0087*   
040110             0088*       MACRO POP_ALL
040110             0089*       pop iy
040110             0090*       pop ix
040110             0091*       pop de
040110             0092*       pop bc
040110             0093*       pop hl
040110             0094*       pop af
040110             0095*       ex af,af'
040110             0096*       exx
040110             0097*   
040110             0098*       pop de
040110             0099*       pop bc
040110             0100*       pop hl
040110             0101*       pop af
040110             0102*       ex af,af'
040110             0103*       exx
040110             0104*       ENDMACRO
040110             0105*   
040110             0106*   ; Print a zero-terminated string inline with code, e.g.:
040110             0107*   ;
040110             0108*   ;    call printInline
040110             0109*   ;    ASCIZ "Hello, world!\r\n"
040110             0110*   ;
040110             0111*   ; Destroys: HL,AF
040110             0112*   printInline:
040110 E1          0113*       pop hl ; get the return address = pointer to start of string
040111 CD 17 01 04 0114*       call printString ; HL advances to end of string
040115 E5          0115*       push hl ; restore the return address = pointer to end of string
040116 C9          0116*       ret
040117             0117*   
040117             0118*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040117             0119*   ; Print a zero-terminated string
040117             0120*   ; HL: Pointer to string
040117             0121*   printString:
040117 C5          0122*       PUSH BC
040118 01 00 00 00 0123*       LD BC,0
04011C 3E 00       0124*       LD A,0
04011E 5B DF       0125*       RST.LIL 18h
040120 C1          0126*       POP BC
040121 C9          0127*       RET
040122             0128*   ; print a VDU sequence
040122             0129*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
040122             0130*   sendVDUsequence:
040122 C5          0131*       PUSH BC
040123 01 00 00 00 0132*       LD BC, 0
040127 4E          0133*       LD C, (HL)
040128 5B DF       0134*       RST.LIL 18h
04012A C1          0135*       POP BC
04012B C9          0136*       RET
04012C             0137*   ; Print Newline sequence to VDP
04012C             0138*   printNewLine:
04012C F5          0139*       push af ; for some reason rst.lil 10h sets carry flag
04012D 3E 0D       0140*       LD A, '\r'
04012F 5B D7       0141*       RST.LIL 10h
040131 3E 0A       0142*       LD A, '\n'
040133 5B D7       0143*       RST.LIL 10h
040135 F1          0144*       pop af
040136 C9          0145*       RET
040137             0146*   
040137             0147*   ; Print a 24-bit HEX number
040137             0148*   ; HLU: Number to print
040137             0149*   printHex24:
040137             0150*       HLU_TO_A
040137 E5          0001*M1     push hl ; 4 cycles
040138 33          0002*M1     inc sp ; 1 cycle
040139 F1          0003*M1     pop af ; 4 cycles
04013A 3B          0004*M1     dec sp ; 1 cycle
04013B             0005*M1     ; 10 cycles total
04013B CD 45 01 04 0151*       CALL printHex8
04013F             0152*   ; Print a 16-bit HEX number
04013F             0153*   ; HL: Number to print
04013F             0154*   printHex16:
04013F 7C          0155*       LD A,H
040140 CD 45 01 04 0156*       CALL printHex8
040144 7D          0157*       LD A,L
040145             0158*   ; Print an 8-bit HEX number
040145             0159*   ; A: Number to print
040145             0160*   printHex8:
040145 4F          0161*       LD C,A
040146 1F          0162*       RRA
040147 1F          0163*       RRA
040148 1F          0164*       RRA
040149 1F          0165*       RRA
04014A CD 4F 01 04 0166*       CALL @F
04014E 79          0167*       LD A,C
04014F             0168*   @@:
04014F E6 0F       0169*       AND 0Fh
040151 C6 90       0170*       ADD A,90h
040153 27          0171*       DAA
040154 CE 40       0172*       ADC A,40h
040156 27          0173*       DAA
040157 5B D7       0174*       RST.LIL 10h
040159 C9          0175*       RET
04015A             0176*   
04015A             0177*   printHexA:
04015A F5          0178*       push af
04015B C5          0179*       push bc
04015C CD 45 01 04 0180*       call printHex8
040160 3E 20       0181*       ld a,' '
040162 5B D7       0182*       rst.lil 10h
040164 C1          0183*       pop bc
040165 F1          0184*       pop af
040166 C9          0185*       ret
040167             0186*   
040167             0187*   printHexHL:
040167 F5          0188*       push af
040168 C5          0189*       push bc
040169 CD 3F 01 04 0190*       call printHex16
04016D 3E 20       0191*       ld a,' '
04016F 5B D7       0192*       rst.lil 10h
040171 C1          0193*       pop bc
040172 F1          0194*       pop af
040173 C9          0195*       ret
040174             0196*   
040174             0197*   printHexUHL:
040174 F5          0198*       push af
040175 C5          0199*       push bc
040176 CD 37 01 04 0200*       call printHex24
04017A 3E 20       0201*       ld a,' '
04017C 5B D7       0202*       rst.lil 10h
04017E C1          0203*       pop bc
04017F F1          0204*       pop af
040180 C9          0205*       ret
040181             0206*   
040181             0207*   printHexAUHL:
040181 F5          0208*       push af
040182 C5          0209*       push bc
040183 CD 45 01 04 0210*       call printHex8
040187 3E 2E       0211*       ld a,'.'
040189 5B D7       0212*       rst.lil 10h
04018B CD 37 01 04 0213*       call printHex24
04018F 3E 20       0214*       ld a,' '
040191 5B D7       0215*       rst.lil 10h
040193 C1          0216*       pop bc
040194 F1          0217*       pop af
040195 C9          0218*       ret
040196             0219*   
040196             0220*   printHexABHL:
040196             0221*   ; preserve registers
040196 C5          0222*       push bc ; b will be ok c will not
040197 F5          0223*       push af ; will get totally destroyed
040198             0224*   ; print a
040198 CD 45 01 04 0225*       call printHex8
04019C             0226*   ; print b
04019C 78          0227*       ld a,b
04019D CD 45 01 04 0228*       call printHex8
0401A1             0229*   ; print hl
0401A1 CD 3F 01 04 0230*       call printHex16
0401A5             0231*   ; restore registers
0401A5 F1          0232*       pop af
0401A6 C1          0233*       pop bc
0401A7 C9          0234*       ret
0401A8             0235*   
0401A8             0236*   printHexBHL:
0401A8             0237*   ; preserve registers
0401A8 C5          0238*       push bc ; b will be ok c will not
0401A9 F5          0239*       push af ; will get totally destroyed
0401AA             0240*   ; print b
0401AA 78          0241*       ld a,b
0401AB CD 45 01 04 0242*       call printHex8
0401AF             0243*   ; print hl
0401AF CD 3F 01 04 0244*       call printHex16
0401B3             0245*   ; restore registers
0401B3 F1          0246*       pop af
0401B4 C1          0247*       pop bc
0401B5 C9          0248*       ret
0401B6             0249*   
0401B6             0250*   printHexCDE:
0401B6             0251*   ; preserve registers
0401B6 C5          0252*       push bc ; b will be ok c will not
0401B7 F5          0253*       push af ; will get totally destroyed
0401B8             0254*   ; print c
0401B8 79          0255*       ld a,c
0401B9 CD 45 01 04 0256*       call printHex8
0401BD             0257*   ; print de
0401BD EB          0258*       ex de,hl
0401BE CD 3F 01 04 0259*       call printHex16
0401C2 EB          0260*       ex de,hl
0401C3             0261*   ; restore registers
0401C3 F1          0262*       pop af
0401C4 C1          0263*       pop bc
0401C5 C9          0264*       ret
0401C6             0265*   
0401C6             0266*   printHexUIX:
0401C6             0267*   ; store everything in scratch
0401C6 22 4F 06 04 0268*       ld (uhl),hl
0401CA ED 43 52 06 0269*       ld (ubc),bc
       04          
0401CF ED 53 55 06 0270*       ld (ude),de
       04          
0401D4 DD 22 58 06 0271*       ld (uix),ix
       04          
0401D9 FD 22 5B 06 0272*       ld (uiy),iy
       04          
0401DE F5          0273*       push af ; fml
0401DF             0274*   
0401DF 21 E6 05 04 0275*       ld hl,str_ixu
0401E3 CD 17 01 04 0276*       call printString
0401E7 2A 58 06 04 0277*       ld hl,(uix)
0401EB CD 37 01 04 0278*       call printHex24
0401EF CD 2C 01 04 0279*       call printNewLine
0401F3             0280*   
0401F3             0281*   ; restore everything
0401F3 2A 4F 06 04 0282*       ld hl, (uhl)
0401F7 ED 4B 52 06 0283*       ld bc, (ubc)
       04          
0401FC ED 5B 55 06 0284*       ld de, (ude)
       04          
040201 DD 2A 58 06 0285*       ld ix, (uix)
       04          
040206 FD 2A 5B 06 0286*       ld iy, (uiy)
       04          
04020B F1          0287*       pop af
04020C             0288*   ; all done
04020C C9          0289*       ret
04020D             0290*   
04020D             0291*   ; Print a 0x HEX prefix
04020D             0292*   DisplayHexPrefix:
04020D 3E 30       0293*       LD A, '0'
04020F 5B D7       0294*       RST.LIL 10h
040211 3E 78       0295*       LD A, 'x'
040213 5B D7       0296*       RST.LIL 10h
040215 C9          0297*       RET
040216             0298*   
040216             0299*       MACRO printDecBC
040216             0300*       push hl
040216             0301*       push bc
040216             0302*       pop hl
040216             0303*       call printDec
040216             0304*       pop hl
040216             0305*       ENDMACRO
040216             0306*   
040216             0307*       MACRO printDecDE
040216             0308*       push hl
040216             0309*       push de
040216             0310*       pop hl
040216             0311*       call printDec
040216             0312*       pop hl
040216             0313*       ENDMACRO
040216             0314*   
040216             0315*       MACRO printDecHL
040216             0316*       call printDec
040216             0317*       ENDMACRO
040216             0318*   
040216             0319*       MACRO printDecIX
040216             0320*       push hl
040216             0321*       push ix
040216             0322*       pop hl
040216             0323*       call printDec
040216             0324*       pop hl
040216             0325*       ENDMACRO
040216             0326*   
040216             0327*       MACRO printDecIY
040216             0328*       push hl
040216             0329*       push iy
040216             0330*       pop hl
040216             0331*       call printDec
040216             0332*       pop hl
040216             0333*       ENDMACRO
040216             0334*   
040216             0335*   
040216             0336*   ; Prints the right justified decimal value in HL without leading zeroes
040216             0337*   ; HL : Value to print
040216             0338*   ; preserves all registers and flags
040216             0339*   printDec:
040216             0340*   ; BEGIN MY CODE
040216             0341*   ; back up all the things
040216 F5          0342*       push af
040217 C5          0343*       push bc
040218 D5          0344*       push de
040219 E5          0345*       push hl
04021A             0346*   ; END MY CODE
04021A 11 42 02 04 0347*       LD DE, _printDecBuffer
04021E CD 52 02 04 0348*       CALL u24_to_ascii
040222             0349*   ; BEGIN MY CODE
040222             0350*   ; replace leading zeroes with spaces
040222 21 42 02 04 0351*       LD HL, _printDecBuffer
040226 06 07       0352*       ld B, 7 ; if HL was 0, we want to keep the final zero
040228             0353*   @loop:
040228 7E          0354*       LD A, (HL)
040229 FE 30       0355*       CP '0'
04022B C2 35 02 04 0356*       JP NZ, @done
04022F 3E 20       0357*       LD A, ' '
040231 77          0358*       LD (HL), A
040232 23          0359*       INC HL
040233             0360*       ; CALL vdu_cursor_forward
040233 10 F3       0361*       DJNZ @loop
040235             0362*   @done:
040235             0363*   ; END MY CODE
040235 21 42 02 04 0364*       LD HL, _printDecBuffer
040239 CD 17 01 04 0365*       CALL printString
04023D             0366*   ; BEGIN MY CODE
04023D             0367*   ; restore all the things
04023D E1          0368*       pop hl
04023E D1          0369*       pop de
04023F C1          0370*       pop bc
040240 F1          0371*       pop af
040241             0372*   ; END MY CODE
040241 C9          0373*       RET
040242 00 00 00 00 0374*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040252             0375*   
040252             0376*   ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
040252             0377*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040252             0378*   ; so it will allways be 8 characters length
040252             0379*   ; HL : Value to convert to string
040252             0380*   ; DE : pointer to buffer, at least 8 byte + 0
040252             0381*   u24_to_ascii:
040252 01 80 69 67 0382*       LD BC,-10000000
040256 CD 89 02 04 0383*       CALL @one_digit
04025A 01 C0 BD F0 0384*       LD BC,-1000000
04025E CD 89 02 04 0385*       CALL @one_digit
040262 01 60 79 FE 0386*       LD BC,-100000
040266 CD 89 02 04 0387*       CALL @one_digit
04026A 01 F0 D8 FF 0388*       LD BC,-10000
04026E CD 89 02 04 0389*       CALL @one_digit
040272 01 18 FC FF 0390*       LD BC,-1000
040276 CD 89 02 04 0391*       CALL @one_digit
04027A 01 9C FF FF 0392*       LD BC,-100
04027E CD 89 02 04 0393*       CALL @one_digit
040282 0E F6       0394*       LD C,-10
040284 CD 89 02 04 0395*       CALL @one_digit
040288 48          0396*       LD C,B
040289             0397*   @one_digit:
040289 3E 2F       0398*       LD A,'0'-1
04028B             0399*   @divide_me:
04028B 3C          0400*       INC A
04028C 09          0401*       ADD HL,BC
04028D 38 FC       0402*       JR C,@divide_me
04028F ED 42       0403*       SBC HL,BC
040291 12          0404*       LD (DE),A
040292 13          0405*       INC DE
040293 C9          0406*       RET
040294             0407*   
040294             0408*   print_u24:
040294 D5          0409*       push de
040295 E5          0410*       push hl
040296 11 42 02 04 0411*       ld de,_printDecBuffer
04029A CD 52 02 04 0412*       call u24_to_ascii
04029E 21 42 02 04 0413*       ld hl,_printDecBuffer
0402A2 CD 17 01 04 0414*       call printString
0402A6 3E 20       0415*       ld a,' '
0402A8 5B D7       0416*       rst.lil 10h
0402AA E1          0417*       pop hl
0402AB D1          0418*       pop de
0402AC C9          0419*       ret
0402AD             0420*   
0402AD             0421*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
0402AD             0422*   ; HL : Value to convert to string (integer part in H, fractional part in L)
0402AD             0423*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
0402AD             0424*   u168_to_ascii:
0402AD             0425*   ; add a leading space to make room for sign flag if needed
0402AD 3E 20       0426*       ld a,' '
0402AF 12          0427*       ld (de),a
0402B0 13          0428*       inc de
0402B1             0429*   ; Convert integer part
0402B1 E5          0430*       push hl ; Save HL (we’ll need the fractional part later)
0402B2 CD 6D 08 04 0431*       call hlu_udiv256 ; Shift to get integer portion in HL
0402B6 01 F0 D8 FF 0432*       ld bc, -10000
0402BA CD DD 02 04 0433*       call @one_int
0402BE 01 18 FC FF 0434*       ld bc, -1000
0402C2 CD DD 02 04 0435*       call @one_int
0402C6 01 9C FF FF 0436*       ld bc, -100
0402CA CD DD 02 04 0437*       call @one_int
0402CE 0E F6       0438*       ld c, -10
0402D0 CD DD 02 04 0439*       call @one_int
0402D4 48          0440*       ld c, b
0402D5 CD DD 02 04 0441*       call @one_int
0402D9 C3 E8 02 04 0442*       jp @frac ; Jump to fractional part conversion
0402DD             0443*   @one_int:
0402DD 3E 2F       0444*       ld a, '0' - 1 ; Start ASCII character at '0'
0402DF             0445*   @divide_me:
0402DF 3C          0446*       inc a
0402E0 09          0447*       add hl, bc ; Accumulate until overflow
0402E1 38 FC       0448*       jr c, @divide_me
0402E3 ED 42       0449*       sbc hl, bc ; Remove excess after overflow
0402E5 12          0450*       ld (de), a ; Store ASCII digit
0402E6 13          0451*       inc de
0402E7 C9          0452*       ret
0402E8             0453*   ; Convert fractional part
0402E8             0454*   @frac:
0402E8 3E 2E       0455*       ld a, '.' ; Decimal point
0402EA 12          0456*       ld (de), a
0402EB 13          0457*       inc de
0402EC E1          0458*       pop hl ; Restore HL with original fraction
0402ED 06 03       0459*       ld b, 3 ; Loop counter for 3 fractional digits
0402EF             0460*   @frac_loop:
0402EF 26 0A       0461*       ld h, 10 ; Load multiplier for fractional part
0402F1 ED 6C       0462*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0402F3 3E 30       0463*       ld a, '0'
0402F5 84          0464*       add a, h ; Convert integer part to ASCII
0402F6 12          0465*       ld (de), a
0402F7 13          0466*       inc de
0402F8 10 F5       0467*       djnz @frac_loop ; Repeat for each fractional digit
0402FA             0468*   ; Add null terminator
0402FA AF          0469*       xor a ; Null terminator
0402FB 12          0470*       ld (de), a
0402FC C9          0471*       ret
0402FD             0472*   
0402FD             0473*   print_u168:
0402FD D5          0474*       push de
0402FE E5          0475*       push hl
0402FF 11 42 02 04 0476*       ld de,_printDecBuffer
040303 CD AD 02 04 0477*       call u168_to_ascii
040307 21 42 02 04 0478*       ld hl,_printDecBuffer
04030B CD 17 01 04 0479*       call printString
04030F E1          0480*       pop hl
040310 D1          0481*       pop de
040311 C9          0482*       ret
040312             0483*   
040312             0484*   ; signed version of u168_to_ascii
040312             0485*   s168_to_ascii:
040312 D5          0486*       push de ; save starting address of buffer
040313 CD 06 08 04 0487*       call hlu_abs
040317 F5          0488*       push af ; save sign flag
040318 CD AD 02 04 0489*       call u168_to_ascii
04031C F1          0490*       pop af ; restore sign flag
04031D D1          0491*       pop de ; restore starting address of buffer
04031E F0          0492*       ret p ; hlu was positive so nothing to do
04031F 3E 2D       0493*       ld a,'-'
040321 12          0494*       ld (de),a
040322 C9          0495*       ret
040323             0496*   
040323             0497*   print_s168:
040323 D5          0498*       push de
040324 E5          0499*       push hl
040325 11 42 02 04 0500*       ld de,_printDecBuffer
040329 CD 12 03 04 0501*       call s168_to_ascii
04032D 21 42 02 04 0502*       ld hl,_printDecBuffer
040331 CD 17 01 04 0503*       call printString
040335 E1          0504*       pop hl
040336 D1          0505*       pop de
040337 C9          0506*       ret
040338             0507*   
040338             0508*   print_s168_hl:
040338 F5          0509*       push af
040339 E5          0510*       push hl
04033A CD 23 03 04 0511*       call print_s168
04033E 3E 20       0512*       ld a,' '
040340 5B D7       0513*       rst.lil 10h
040342 E1          0514*       pop hl
040343 F1          0515*       pop af
040344 C9          0516*       ret
040345             0517*   
040345             0518*   print_s168_bc:
040345 F5          0519*       push af
040346 C5          0520*       push bc
040347 E5          0521*       push hl
040348 C5          0522*       push bc
040349 E1          0523*       pop hl
04034A CD 23 03 04 0524*       call print_s168
04034E 3E 20       0525*       ld a,' '
040350 5B D7       0526*       rst.lil 10h
040352 E1          0527*       pop hl
040353 C1          0528*       pop bc
040354 F1          0529*       pop af
040355 C9          0530*       ret
040356             0531*   
040356             0532*   print_s168_de:
040356 F5          0533*       push af
040357 D5          0534*       push de
040358 E5          0535*       push hl
040359 EB          0536*       ex de,hl
04035A CD 23 03 04 0537*       call print_s168
04035E 3E 20       0538*       ld a,' '
040360 5B D7       0539*       rst.lil 10h
040362 E1          0540*       pop hl
040363 D1          0541*       pop de
040364 F1          0542*       pop af
040365 C9          0543*       ret
040366             0544*   
040366             0545*   print_s168_hl_bc_de:
040366 F5          0546*       push af
040367 C5          0547*       push bc
040368 D5          0548*       push de
040369 E5          0549*       push hl
04036A CD 23 03 04 0550*       call print_s168
04036E 3E 20       0551*       ld a,' '
040370 5B D7       0552*       rst.lil 10h
040372 C5          0553*       push bc
040373 E1          0554*       pop hl
040374 CD 23 03 04 0555*       call print_s168
040378 3E 20       0556*       ld a,' '
04037A 5B D7       0557*       rst.lil 10h
04037C EB          0558*       ex de,hl
04037D CD 23 03 04 0559*       call print_s168
040381 3E 20       0560*       ld a,' '
040383 5B D7       0561*       rst.lil 10h
040385 E1          0562*       pop hl
040386 D1          0563*       pop de
040387 C1          0564*       pop bc
040388 F1          0565*       pop af
040389 C9          0566*       ret
04038A             0567*   
04038A             0568*   print_s168_bc_de:
04038A F5          0569*       push af
04038B C5          0570*       push bc
04038C D5          0571*       push de
04038D C5          0572*       push bc
04038E E1          0573*       pop hl
04038F CD 23 03 04 0574*       call print_s168
040393 3E 20       0575*       ld a,' '
040395 5B D7       0576*       rst.lil 10h
040397 EB          0577*       ex de,hl
040398 CD 23 03 04 0578*       call print_s168
04039C 3E 20       0579*       ld a,' '
04039E 5B D7       0580*       rst.lil 10h
0403A0 E1          0581*       pop hl
0403A1 D1          0582*       pop de
0403A2 C1          0583*       pop bc
0403A3 F1          0584*       pop af
0403A4 C9          0585*       ret
0403A5             0586*   
0403A5             0587*   print_s168_a:
0403A5 F5          0588*       push af
0403A6 C5          0589*       push bc
0403A7 E5          0590*       push hl
0403A8 21 00 00 00 0591*       ld hl,0
0403AC 6F          0592*       ld l,a
0403AD CD 38 03 04 0593*       call print_s168_hl
0403B1 E1          0594*       pop hl
0403B2 C1          0595*       pop bc
0403B3 F1          0596*       pop af
0403B4 C9          0597*       ret
0403B5             0598*   
0403B5             0599*   ; #### new functions added by Brandon R. Gates ####
0403B5             0600*   
0403B5             0601*   ; print the binary representation of the 8-bit value in a
0403B5             0602*   ; destroys a, hl, bc
0403B5             0603*   printBin8:
0403B5 06 08       0604*       ld b,8 ; loop counter for 8 bits
0403B7 21 D2 03 04 0605*       ld hl,@cmd ; set hl to the low byte of the output string
0403BB             0606*       ; (which will be the high bit of the value in a)
0403BB             0607*   @loop:
0403BB 07          0608*       rlca ; put the next highest bit into carry
0403BC 38 04       0609*       jr c,@one
0403BE 36 30       0610*       ld (hl),'0'
0403C0 18 02       0611*       jr @next_bit
0403C2             0612*   @one:
0403C2 36 31       0613*       ld (hl),'1'
0403C4             0614*   @next_bit:
0403C4 23          0615*       inc hl
0403C5 10 F4       0616*       djnz @loop
0403C7             0617*   ; print it
0403C7 21 D2 03 04 0618*       ld hl,@cmd
0403CB 01 08 00 00 0619*       ld bc,@end-@cmd
0403CF 5B DF       0620*       rst.lil $18
0403D1 C9          0621*       ret
0403D2             0622*   @cmd: ds 8 ; eight bytes for eight bits
0403DA             0623*   @end:
0403DA             0624*   
0403DA             0625*   ; print the binary representation of the 8-bit value in a
0403DA             0626*   ; in reverse order (lsb first)
0403DA             0627*   ; destroys a, hl, bc
0403DA             0628*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
0403DA 06 08       0629*       ld b,8 ; loop counter for 8 bits
0403DC 21 F7 03 04 0630*       ld hl,@cmd ; set hl to the low byte of the output string
0403E0             0631*       ; (which will be the high bit of the value in a)
0403E0             0632*   @loop:
0403E0 0F          0633*       rrca ; put the next lowest bit into carry
0403E1 38 04       0634*       jr c,@one
0403E3 36 30       0635*       ld (hl),'0'
0403E5 18 02       0636*       jr @next_bit
0403E7             0637*   @one:
0403E7 36 31       0638*       ld (hl),'1'
0403E9             0639*   @next_bit:
0403E9 23          0640*       inc hl
0403EA 10 F4       0641*       djnz @loop
0403EC             0642*   ; print it
0403EC 21 F7 03 04 0643*       ld hl,@cmd
0403F0 01 08 00 00 0644*       ld bc,@end-@cmd
0403F4 5B DF       0645*       rst.lil $18
0403F6 C9          0646*       ret
0403F7             0647*   @cmd: ds 8 ; eight bytes for eight bits
0403FF             0648*   @end:
0403FF             0649*   
0403FF             0650*   ; print registers to screen in hexidecimal format
0403FF             0651*   ; inputs: none
0403FF             0652*   ; outputs: values of every register printed to screen
0403FF             0653*   ;    values of each register in global scratch memory
0403FF             0654*   ; destroys: nothing
0403FF             0655*   stepRegistersHex:
0403FF             0656*   ; store everything in scratch
       FF FF FF FF 
       FF FF FF FF 
0403FF 22 4F 06 04 0657*       ld (uhl),hl
040403 ED 43 52 06 0658*       ld (ubc),bc
       04          
040408 ED 53 55 06 0659*       ld (ude),de
       04          
04040D DD 22 58 06 0660*       ld (uix),ix
       04          
040412 FD 22 5B 06 0661*       ld (uiy),iy
       04          
040417 F5          0662*       push af ; fml
040418 E1          0663*       pop hl ; thanks, zilog
040419 22 4C 06 04 0664*       ld (uaf),hl
04041D F5          0665*       push af ; dammit
04041E             0666*   
04041E             0667*   ; home the cursor
04041E             0668*       ; call vdu_home_cursor
04041E             0669*   
04041E             0670*   ; print each register
04041E 21 D2 05 04 0671*       ld hl,str_afu
040422 CD 17 01 04 0672*       call printString
040426 2A 4C 06 04 0673*       ld hl,(uaf)
04042A CD 37 01 04 0674*       call printHex24
04042E CD 2C 01 04 0675*       call printNewLine
040432             0676*   
040432 21 D7 05 04 0677*       ld hl,str_hlu
040436 CD 17 01 04 0678*       call printString
04043A 2A 4F 06 04 0679*       ld hl,(uhl)
04043E CD 37 01 04 0680*       call printHex24
040442 CD 2C 01 04 0681*       call printNewLine
040446             0682*   
040446 21 DC 05 04 0683*       ld hl,str_bcu
04044A CD 17 01 04 0684*       call printString
04044E 2A 52 06 04 0685*       ld hl,(ubc)
040452 CD 37 01 04 0686*       call printHex24
040456 CD 2C 01 04 0687*       call printNewLine
04045A             0688*   
04045A 21 E1 05 04 0689*       ld hl,str_deu
04045E CD 17 01 04 0690*       call printString
040462 2A 55 06 04 0691*       ld hl,(ude)
040466 CD 37 01 04 0692*       call printHex24
04046A CD 2C 01 04 0693*       call printNewLine
04046E             0694*   
04046E 21 E6 05 04 0695*       ld hl,str_ixu
040472 CD 17 01 04 0696*       call printString
040476 2A 58 06 04 0697*       ld hl,(uix)
04047A CD 37 01 04 0698*       call printHex24
04047E CD 2C 01 04 0699*       call printNewLine
040482             0700*   
040482 21 EB 05 04 0701*       ld hl,str_iyu
040486 CD 17 01 04 0702*       call printString
04048A 2A 5B 06 04 0703*       ld hl,(uiy)
04048E CD 37 01 04 0704*       call printHex24
040492 CD 2C 01 04 0705*       call printNewLine
040496             0706*   
040496             0707*       ; call vsync
040496             0708*   
040496 CD 2C 01 04 0709*       call printNewLine
04049A             0710*   
04049A             0711*   ; check for right shift key and quit if pressed
04049A             0712*       MOSCALL mos_getkbmap
04049A 3E 1E       0001*M1 			LD	A, function
04049C 5B CF       0002*M1 			RST.LIL	08h
04049E             0713*   @stayhere:
04049E             0714*   ; 7 RightShift
04049E DD CB 00 76 0715*       bit 6,(ix+0)
0404A2 20 02       0716*       jr nz,@RightShift
0404A4 18 F8       0717*       jr @stayhere
0404A6             0718*   @RightShift:
0404A6 DD CB 0E 86 0719*       res 0,(ix+14) ; debounce the key (hopefully)
0404AA 3E 80       0720*       ld a,%10000000
0404AC             0721*       ; call multiPurposeDelay
0404AC             0722*   
0404AC             0723*   ; restore everything
0404AC 2A 4F 06 04 0724*       ld hl, (uhl)
0404B0 ED 4B 52 06 0725*       ld bc, (ubc)
       04          
0404B5 ED 5B 55 06 0726*       ld de, (ude)
       04          
0404BA DD 2A 58 06 0727*       ld ix, (uix)
       04          
0404BF FD 2A 5B 06 0728*       ld iy, (uiy)
       04          
0404C4 F1          0729*       pop af
0404C5             0730*   ; all done
0404C5 C9          0731*       ret
0404C6             0732*   
0404C6             0733*   ; print registers to screen in hexidecimal format
0404C6             0734*   ; inputs: none
0404C6             0735*   ; outputs: values of every register printed to screen
0404C6             0736*   ;    values of each register in global scratch memory
0404C6             0737*   ; destroys: nothing
0404C6             0738*   dumpRegistersHex:
0404C6             0739*   ; store everything in scratch
0404C6 22 4F 06 04 0740*       ld (uhl),hl
0404CA ED 43 52 06 0741*       ld (ubc),bc
       04          
0404CF ED 53 55 06 0742*       ld (ude),de
       04          
0404D4 DD 22 58 06 0743*       ld (uix),ix
       04          
0404D9 FD 22 5B 06 0744*       ld (uiy),iy
       04          
0404DE F5          0745*       push af ; fml
0404DF E1          0746*       pop hl ; thanks, zilog
0404E0 22 4C 06 04 0747*       ld (uaf),hl
0404E4 F5          0748*       push af ; dammit
0404E5             0749*   
0404E5             0750*   ; home the cursor
0404E5             0751*       ; call vdu_home_cursor
0404E5             0752*       ; call printNewLine
0404E5             0753*   
0404E5             0754*   ; print each register
0404E5 21 D2 05 04 0755*       ld hl,str_afu
0404E9 CD 17 01 04 0756*       call printString
0404ED 2A 4C 06 04 0757*       ld hl,(uaf)
0404F1 CD 37 01 04 0758*       call printHex24
0404F5 CD 2C 01 04 0759*       call printNewLine
0404F9             0760*   
0404F9 21 D7 05 04 0761*       ld hl,str_hlu
0404FD CD 17 01 04 0762*       call printString
040501 2A 4F 06 04 0763*       ld hl,(uhl)
040505 CD 37 01 04 0764*       call printHex24
040509 CD 2C 01 04 0765*       call printNewLine
04050D             0766*   
04050D 21 DC 05 04 0767*       ld hl,str_bcu
040511 CD 17 01 04 0768*       call printString
040515 2A 52 06 04 0769*       ld hl,(ubc)
040519 CD 37 01 04 0770*       call printHex24
04051D CD 2C 01 04 0771*       call printNewLine
040521             0772*   
040521 21 E1 05 04 0773*       ld hl,str_deu
040525 CD 17 01 04 0774*       call printString
040529 2A 55 06 04 0775*       ld hl,(ude)
04052D CD 37 01 04 0776*       call printHex24
040531 CD 2C 01 04 0777*       call printNewLine
040535             0778*   
040535 21 E6 05 04 0779*       ld hl,str_ixu
040539 CD 17 01 04 0780*       call printString
04053D 2A 58 06 04 0781*       ld hl,(uix)
040541 CD 37 01 04 0782*       call printHex24
040545 CD 2C 01 04 0783*       call printNewLine
040549             0784*   
040549 21 EB 05 04 0785*       ld hl,str_iyu
04054D CD 17 01 04 0786*       call printString
040551 2A 5B 06 04 0787*       ld hl,(uiy)
040555 CD 37 01 04 0788*       call printHex24
040559             0789*       ; call printNewLine
040559             0790*   
040559             0791*       ; call vdu_vblank
040559             0792*   
040559             0793*       ; call printNewLine
040559             0794*   ; restore everything
040559 2A 4F 06 04 0795*       ld hl, (uhl)
04055D ED 4B 52 06 0796*       ld bc, (ubc)
       04          
040562 ED 5B 55 06 0797*       ld de, (ude)
       04          
040567 DD 2A 58 06 0798*       ld ix, (uix)
       04          
04056C FD 2A 5B 06 0799*       ld iy, (uiy)
       04          
040571 F1          0800*       pop af
040572             0801*   ; all done
040572 C9          0802*       ret
040573             0803*   
040573             0804*   dumpRegistersHexPrime:
040573 D9          0805*       exx
040574 08          0806*       ex af,af'
040575 CD C6 04 04 0807*       call dumpRegistersHex
040579 08          0808*       ex af,af'
04057A D9          0809*       exx
04057B C9          0810*       ret
04057C             0811*   
04057C             0812*   ; additionally dump prime registers
04057C             0813*   ; inputs: none
04057C             0814*   ; outputs: values of every register printed to screen
04057C             0815*   ; destroys: nothing
04057C             0816*   dumpRegistersHexAll:
04057C CD C6 04 04 0817*       call dumpRegistersHex
040580 08          0818*       ex af,af'
040581 D9          0819*       exx
040582 CD C6 04 04 0820*       call dumpRegistersHex
040586 08          0821*       ex af,af'
040587 D9          0822*       exx
040588 C9          0823*       ret
040589             0824*   
040589             0825*   ; print hlu to screen in hexidecimal format
040589             0826*   ; inputs: none
040589             0827*   ; destroys: nothing
040589             0828*   print_hex_hl:
040589 F5          0829*       push af
04058A E5          0830*       push hl
04058B 21 D7 05 04 0831*       ld hl,str_hlu
04058F CD 17 01 04 0832*       call printString
040593 E1          0833*       pop hl
040594 E5          0834*       push hl
040595 CD 37 01 04 0835*       call printHex24
040599 3E 20       0836*       ld a,' '
04059B 5B D7       0837*       rst.lil 10h
04059D E1          0838*       pop hl
04059E F1          0839*       pop af
04059F C9          0840*       ret
0405A0             0841*   
0405A0             0842*   ; print bcu to screen in hexidecimal format
0405A0             0843*   ; inputs: none
0405A0             0844*   ; destroys: nothing
0405A0             0845*   print_hex_bc:
0405A0 F5          0846*       push af
0405A1 E5          0847*       push hl
0405A2 C5          0848*       push bc
0405A3 21 DC 05 04 0849*       ld hl,str_bcu
0405A7 CD 17 01 04 0850*       call printString
0405AB E1          0851*       pop hl
0405AC E5          0852*       push hl
0405AD CD 37 01 04 0853*       call printHex24
0405B1 3E 20       0854*       ld a,' '
0405B3 5B D7       0855*       rst.lil 10h
0405B5 C1          0856*       pop bc
0405B6 E1          0857*       pop hl
0405B7 F1          0858*       pop af
0405B8 C9          0859*       ret
0405B9             0860*   
0405B9             0861*   ; print deu to screen in hexidecimal format
0405B9             0862*   ; inputs: none
0405B9             0863*   ; destroys: nothing
0405B9             0864*   print_hex_de:
0405B9 F5          0865*       push af
0405BA E5          0866*       push hl
0405BB D5          0867*       push de
0405BC 21 E1 05 04 0868*       ld hl,str_deu
0405C0 CD 17 01 04 0869*       call printString
0405C4 E1          0870*       pop hl
0405C5 E5          0871*       push hl
0405C6 CD 37 01 04 0872*       call printHex24
0405CA 3E 20       0873*       ld a,' '
0405CC 5B D7       0874*       rst.lil 10h
0405CE D1          0875*       pop de
0405CF E1          0876*       pop hl
0405D0 F1          0877*       pop af
0405D1 C9          0878*       ret
0405D2             0879*   
0405D2 20 61 66 3D 0880*   str_afu: db " af=",0
       00          
0405D7 20 68 6C 3D 0881*   str_hlu: db " hl=",0
       00          
0405DC 20 62 63 3D 0882*   str_bcu: db " bc=",0
       00          
0405E1 20 64 65 3D 0883*   str_deu: db " de=",0
       00          
0405E6 20 69 78 3D 0884*   str_ixu: db " ix=",0
       00          
0405EB 20 69 79 3D 0885*   str_iyu: db " iy=",0
       00          
0405F0             0886*   
0405F0             0887*   ; print udeuhl to screen in hexidecimal format
0405F0             0888*   ; inputs: none
0405F0             0889*   ; outputs: concatenated hexidecimal udeuhl
0405F0             0890*   ; destroys: nothing
0405F0             0891*   dumpUDEUHLHex:
0405F0             0892*   ; store everything in scratch
0405F0 22 4F 06 04 0893*       ld (uhl),hl
0405F4 ED 43 52 06 0894*       ld (ubc),bc
       04          
0405F9 ED 53 55 06 0895*       ld (ude),de
       04          
0405FE DD 22 58 06 0896*       ld (uix),ix
       04          
040603 FD 22 5B 06 0897*       ld (uiy),iy
       04          
040608 F5          0898*       push af
040609             0899*   
040609             0900*   ; print each register
040609             0901*   
040609 21 43 06 04 0902*       ld hl,str_udeuhl
04060D CD 17 01 04 0903*       call printString
040611 2A 55 06 04 0904*       ld hl,(ude)
040615 CD 37 01 04 0905*       call printHex24
040619 3E 2E       0906*       ld a,'.' ; print a dot to separate the values
04061B 5B D7       0907*       rst.lil 10h
04061D 2A 4F 06 04 0908*       ld hl,(uhl)
040621 CD 37 01 04 0909*       call printHex24
040625 CD 2C 01 04 0910*       call printNewLine
040629             0911*   
040629             0912*   ; restore everything
040629 2A 4F 06 04 0913*       ld hl, (uhl)
04062D ED 4B 52 06 0914*       ld bc, (ubc)
       04          
040632 ED 5B 55 06 0915*       ld de, (ude)
       04          
040637 DD 2A 58 06 0916*       ld ix, (uix)
       04          
04063C FD 2A 5B 06 0917*       ld iy, (uiy)
       04          
040641 F1          0918*       pop af
040642             0919*   ; all done
040642 C9          0920*       ret
040643             0921*   
040643 75 64 65 2E 0922*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04064C             0923*   
04064C             0924*   ; global scratch memory for registers
04064C 00 00 00    0925*   uaf: dl 0
04064F 00 00 00    0926*   uhl: dl 0
040652 00 00 00    0927*   ubc: dl 0
040655 00 00 00    0928*   ude: dl 0
040658 00 00 00    0929*   uix: dl 0
04065B 00 00 00    0930*   uiy: dl 0
04065E 00 00 00    0931*   usp: dl 0
040661 00 00 00    0932*   upc: dl 0
040664             0933*   
040664             0934*   ; inputs: whatever is in the flags register
040664             0935*   ; outputs: binary representation of flags
040664             0936*   ;          with a header so we know which is what
040664             0937*   ; destroys: nothing
040664             0938*   ; preserves: everything
040664             0939*   dumpFlags:
040664             0940*   ; first we curse zilog for not giving direct access to flags
040664 F5          0941*       push af ; this is so we can send it back unharmed
040665 F5          0942*       push af ; this is so we can pop it to hl
040666             0943*   ; store everything in scratch
040666 22 4F 06 04 0944*       ld (uhl),hl
04066A ED 43 52 06 0945*       ld (ubc),bc
       04          
04066F ED 53 55 06 0946*       ld (ude),de
       04          
040674 DD 22 58 06 0947*       ld (uix),ix
       04          
040679 FD 22 5B 06 0948*       ld (uiy),iy
       04          
04067E             0949*   ; next we print the header
04067E 21 AA 06 04 0950*       ld hl,@header
040682 CD 17 01 04 0951*       call printString
040686 E1          0952*       pop hl ; flags are now in l
040687 7D          0953*       ld a,l ; flags are now in a
040688 CD B5 03 04 0954*       call printBin8
04068C CD 2C 01 04 0955*       call printNewLine
040690             0956*   ; restore everything
040690 2A 4F 06 04 0957*       ld hl, (uhl)
040694 ED 4B 52 06 0958*       ld bc, (ubc)
       04          
040699 ED 5B 55 06 0959*       ld de, (ude)
       04          
04069E DD 2A 58 06 0960*       ld ix, (uix)
       04          
0406A3 FD 2A 5B 06 0961*       ld iy, (uiy)
       04          
0406A8 F1          0962*       pop af ; send her home the way she came
0406A9 C9          0963*       ret
0406AA             0964*   ; Bit 7 (S): Sign flag
0406AA             0965*   ; Bit 6 (Z): Zero flag
0406AA             0966*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0406AA             0967*   ; Bit 4 (H): Half Carry flag
0406AA             0968*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0406AA             0969*   ; Bit 2 (PV): Parity/Overflow flag
0406AA             0970*   ; Bit 1 (N): Subtract flag
0406AA             0971*   ; Bit 0 (C): Carry flag
0406AA 53 5A 78 48 0972*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0406B5             0973*   
0406B5             0974*   ; set all the bits in the flag register
0406B5             0975*   ; more of an academic exercise than anything useful
0406B5             0976*   ; inputs; none
0406B5             0977*   ; outputs; a=0,f=255
0406B5             0978*   ; destroys: flags, hl
0406B5             0979*   ; preserves: a, because why not
0406B5             0980*   setAllFlags:
0406B5 21 FF 00 00 0981*       ld hl,255
0406B9 67          0982*       ld h,a ; four cycles to preserve a is cheap
0406BA E5          0983*       push hl
0406BB F1          0984*       pop af
0406BC C9          0985*       ret
0406BD             0986*   
0406BD             0987*   ; reset all the bits in the flag register
0406BD             0988*   ; unlike its inverse counterpart, this may actually be useful
0406BD             0989*   ; inputs; none
0406BD             0990*   ; outputs; a=0,f=0
0406BD             0991*   ; destroys: flags, hl
0406BD             0992*   ; preserves: a, because why not
0406BD             0993*   resetAllFlags:
0406BD 21 00 00 00 0994*       ld hl,0
0406C1 67          0995*       ld h,a ; four cycles to preserve a is cheap
0406C2 E5          0996*       push hl
0406C3 F1          0997*       pop af
0406C4 C9          0998*       ret
0406C5             0999*   
0406C5             1000*   ; wait until user presses a key
0406C5             1001*   ; inputs: none
0406C5             1002*   ; outputs: ascii code of key pressed in a
0406C5             1003*   ; destroys: af,ix
0406C5             1004*   waitKeypress:
0406C5             1005*       MOSCALL mos_getkey
0406C5 3E 00       0001*M1 			LD	A, function
0406C7 5B CF       0002*M1 			RST.LIL	08h
0406C9 C9          1006*       ret
0406CA             1007*   
0406CA             1008*   ; print bytes from an address to the screen in hexidecimal format
0406CA             1009*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406CA             1010*   ; outputs: values of each byte printed to screen separated by spaces
0406CA             1011*   ; destroys: nothing
0406CA             1012*   dumpMemoryHex:
0406CA             1013*   ; save registers to the stack
0406CA C5          1014*       push bc
0406CB E5          1015*       push hl
0406CC F5          1016*       push af
0406CD             1017*   
0406CD             1018*   ; print the address and separator
0406CD CD 37 01 04 1019*       call printHex24
0406D1 3E 3A       1020*       ld a,':'
0406D3 5B D7       1021*       rst.lil 10h
0406D5 3E 20       1022*       ld a,' '
0406D7 5B D7       1023*       rst.lil 10h
0406D9             1024*   
0406D9             1025*   ; set b to be our loop counter
0406D9 F1          1026*       pop af
0406DA 47          1027*       ld b,a
0406DB E1          1028*       pop hl
0406DC E5          1029*       push hl
0406DD F5          1030*       push af
0406DE             1031*   @loop:
0406DE             1032*   ; print the byte
0406DE 7E          1033*       ld a,(hl)
0406DF CD 45 01 04 1034*       call printHex8
0406E3             1035*   ; print a space
0406E3 3E 20       1036*       ld a,' '
0406E5 5B D7       1037*       rst.lil 10h
0406E7 23          1038*       inc hl
0406E8 10 F4       1039*       djnz @loop
0406EA CD 2C 01 04 1040*       call printNewLine
0406EE             1041*   
0406EE             1042*   ; restore everything
0406EE F1          1043*       pop af
0406EF E1          1044*       pop hl
0406F0 C1          1045*       pop bc
0406F1             1046*   
0406F1             1047*   ; all done
0406F1 C9          1048*       ret
0406F2             1049*   
0406F2             1050*   
0406F2             1051*   ; print bytes from an address to the screen in binary format
0406F2             1052*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406F2             1053*   ; outputs: values of each byte printed to screen separated by spaces
0406F2             1054*   ; destroys: nothing
0406F2             1055*   dumpMemoryBin:
0406F2             1056*   ; save all registers to the stack
0406F2 F5          1057*       push af
0406F3 C5          1058*       push bc
0406F4 D5          1059*       push de
0406F5 E5          1060*       push hl
0406F6 DD E5       1061*       push ix
0406F8 FD E5       1062*       push iy
0406FA             1063*   
0406FA             1064*   ; set b to be our loop counter
0406FA 47          1065*       ld b,a
0406FB             1066*   @loop:
0406FB             1067*   ; print the byte
0406FB 7E          1068*       ld a,(hl)
0406FC E5          1069*       push hl
0406FD C5          1070*       push bc
0406FE CD B5 03 04 1071*       call printBin8
040702 C1          1072*       pop bc
040703             1073*   ; print a space
040703 3E 20       1074*       ld a,' '
040705 5B D7       1075*       rst.lil 10h
040707 E1          1076*       pop hl
040708 23          1077*       inc hl
040709 10 F0       1078*       djnz @loop
04070B CD 2C 01 04 1079*       call printNewLine
04070F             1080*   
04070F             1081*   ; restore everything
04070F FD E1       1082*       pop iy
040711 DD E1       1083*       pop ix
040713 E1          1084*       pop hl
040714 D1          1085*       pop de
040715 C1          1086*       pop bc
040716 F1          1087*       pop af
040717             1088*   ; all done
040717 C9          1089*       ret
040718             1090*   
040718             1091*   ; print bytes from an address to the screen in binary format
040718             1092*   ; with the bits of each byte in reverse order (lsb first)
040718             1093*   ; inputs: hl = address of first byte to print, a = number of bytes to print
040718             1094*   ; outputs: values of each byte printed to screen separated by spaces
040718             1095*   ; destroys: nothing
040718             1096*   dumpMemoryBinRev:
040718             1097*   ; save all registers to the stack
040718 F5          1098*       push af
040719 C5          1099*       push bc
04071A D5          1100*       push de
04071B E5          1101*       push hl
04071C DD E5       1102*       push ix
04071E FD E5       1103*       push iy
040720             1104*   
040720             1105*   ; set b to be our loop counter
040720 47          1106*       ld b,a
040721             1107*   @loop:
040721             1108*   ; print the byte
040721 7E          1109*       ld a,(hl)
040722 E5          1110*       push hl
040723 C5          1111*       push bc
040724 CD DA 03 04 1112*       call printBin8Rev
040728 C1          1113*       pop bc
040729             1114*   ; print a space
040729 3E 20       1115*       ld a,' '
04072B 5B D7       1116*       rst.lil 10h
04072D E1          1117*       pop hl
04072E 23          1118*       inc hl
04072F 10 F0       1119*       djnz @loop
040731 CD 2C 01 04 1120*       call printNewLine
040735             1121*   
040735             1122*   ; restore everything
040735 FD E1       1123*       pop iy
040737 DD E1       1124*       pop ix
040739 E1          1125*       pop hl
04073A D1          1126*       pop de
04073B C1          1127*       pop bc
04073C F1          1128*       pop af
04073D             1129*   ; all done
04073D C9          1130*       ret
04073E             0031        include "maths.inc"
04073E FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
040800             0002*   
040800             0003*   ; test the sign of HL
040800             0004*   ; inputs: HL obviously
040800             0005*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040800             0006*   ; destroys: flags
040800             0007*       MACRO sign_hlu
040800             0008*       add hl,de
040800             0009*       or a
040800             0010*       sbc hl,de
040800             0011*       ENDMACRO
040800             0012*   
040800             0013*   
040800             0014*   ;------------------------------------------------------------------------
040800             0015*   ; Scratch area for calculations
040800             0016*   ;------------------------------------------------------------------------
040800 00 00 00    0017*   scratch1: dw24 0 ;bit manipulation buffer 1
040803 00 00 00    0018*   scratch2: dw24 0 ;bit manipulation buffer 2
040806             0019*   
040806             0020*   ; absolute value of hlu
040806             0021*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040806             0022*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040806             0023*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040806             0024*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040806             0025*   ; destroys: a
040806             0026*   hlu_abs:
040806 19          0027*       add hl,de
040807 B7          0028*       or a
040808 ED 52       0029*       sbc hl,de
04080A FA 0F 08 04 0030*       jp m,@is_neg
04080E C9          0031*       ret ; hlu is positive or zero so we're done
04080F             0032*   @is_neg:
04080F F5          0033*       push af ; otherwise, save current flags for return
040810 CD 16 08 04 0034*       call neg_hlu ; negate hlu
040814 F1          0035*       pop af ; get back flags
040815 C9          0036*       ret
040816             0037*   
040816             0038*   ; flip the sign of hlu
040816             0039*   ; inputs: hlu
040816             0040*   ; returns: 0-hlu, flags set appropriately for the result:
040816             0041*   ;         s1,z0,pv0,n1,c1 if result is negative
040816             0042*   ;         s0,z1,pv0,n1,c0 if result is zero
040816             0043*   ;         s0,z0,pv0,n1,c1 if result is positive
040816             0044*   ; destroys a
040816             0045*   neg_hlu:
040816 D5          0046*       push de ; save de
040817 EB          0047*       ex de,hl ; put hl into de
040818 21 00 00 00 0048*       ld hl,0 ; clear hl
04081C AF          0049*       xor a ; clear carry
04081D ED 52       0050*       sbc hl,de ; 0-hlu = -hlu
04081F D1          0051*       pop de ; get de back
040820 C9          0052*       ret ; easy peasy
040821             0053*   
040821             0054*   ;------------------------------------------------------------------------
040821             0055*   ; divide hlu by 2, inspired by above
040821             0056*   ;------------------------------------------------------------------------
040821             0057*   hlu_div2:
040821 22 00 08 04 0058*       ld (scratch1),hl
040825 21 02 08 04 0059*       ld hl,scratch1+2
040829 CB 1E       0060*       rr (hl)
04082B 2B          0061*       dec hl
04082C CB 1E       0062*       rr (hl)
04082E 2B          0063*       dec hl
04082F CB 1E       0064*       rr (hl)
040831 23          0065*       inc hl
040832 23          0066*       inc hl
040833 2A 00 08 04 0067*       ld hl,(scratch1)
040837 C9          0068*       ret
040838             0069*   
040838             0070*   ; this is my little hack to divide by 16
040838             0071*   hlu_div16:
040838 AF          0072*       xor a
040839 29          0073*       add hl,hl
04083A 17          0074*       rla
04083B 29          0075*       add hl,hl
04083C 17          0076*       rla
04083D 29          0077*       add hl,hl
04083E 17          0078*       rla
04083F 29          0079*       add hl,hl
040840 17          0080*       rla
040841 22 4E 08 04 0081*       ld (@scratch),hl
040845 32 51 08 04 0082*       ld (@scratch+3),a
040849 2A 4F 08 04 0083*       ld hl,(@scratch+1)
04084D C9          0084*       ret
04084E             0085*   @scratch: ds 4
040852             0086*   
040852             0087*   ; hlu signed division by 256
040852             0088*   ; returns: hlu / 256
040852             0089*   ; destroys: af
040852             0090*   hlu_sdiv256:
       FF FF FF FF 
040852 AF          0091*       xor a ; assume hl is positive
040853 22 69 08 04 0092*       ld (@buffer),hl
040857             0093*       sign_hlu
040857 19          0001*M1     add hl,de
040858 B7          0002*M1     or a
040859 ED 52       0003*M1     sbc hl,de
04085B F2 60 08 04 0094*       jp p,@hl_pos
04085F 3D          0095*       dec a
040860             0096*   @hl_pos:
040860 32 6C 08 04 0097*       ld (@buffer+3),a
040864 2A 6A 08 04 0098*       ld hl,(@buffer+1)
040868 C9          0099*       ret
040869             0100*   @buffer: ds 4
04086D             0101*   
04086D             0102*   ; hlu 1 byte right shift, unsigned
04086D             0103*   ; returns: hlu / 256, fractional portion in a
04086D             0104*   ; destroys: af
04086D             0105*   hlu_udiv256:
       FF FF FF FF 
04086D AF          0106*       xor a
04086E 32 7F 08 04 0107*       ld (@buffer+3),a
040872 7D          0108*       ld a,l ; save the fractional portion
040873 22 7C 08 04 0109*       ld (@buffer),hl
040877 2A 7D 08 04 0110*       ld hl,(@buffer+1)
04087B C9          0111*       ret
04087C             0112*   @buffer: ds 4
040880             0113*   
040880             0114*       MACRO hlu_mul256
040880             0115*       add hl,hl ; * 2
040880             0116*       add hl,hl ; * 4
040880             0117*       add hl,hl ; * 8
040880             0118*       add hl,hl ; * 16
040880             0119*       add hl,hl ; * 32
040880             0120*       add hl,hl ; * 64
040880             0121*       add hl,hl ; * 128
040880             0122*       add hl,hl ; * 256
040880             0123*       ENDMACRO
040880             0124*   
040880             0125*   ; compute the modulo of hlu by deu
040880             0126*   ; outputs: hlu = hlu % deu
040880             0127*   ; destroys: f, hl
040880             0128*   hlu_mod:
       FF FF FF FF 
040880 B7          0129*       or a ; clear carry
040881             0130*   @loop:
040881 ED 52       0131*       sbc hl,de
040883 DA 8B 08 04 0132*       jp c, @end
040887 C3 81 08 04 0133*       jp @loop
04088B             0134*   @end:
04088B 19          0135*       add hl,de
04088C C9          0136*       ret
04088D             0137*   
04088D             0138*   
04088D 00 00 00 00 0139*   add_bcd_arg1: db #00,#00,#00,#00
040891 00 00 00 00 0140*   add_bcd_arg2: db #00,#00,#00,#00
040895             0141*   
040895             0142*   ; set bcd values in a scratch memory address from registers bcde
040895             0143*   ; input: hl; scratch address,bcde; 8-place bcd number
040895             0144*   ; destroys ; hl
040895             0145*   set_bcd:
040895 73          0146*       ld (hl),e
040896 23          0147*       inc hl
040897 72          0148*       ld (hl),d
040898 23          0149*       inc hl
040899 71          0150*       ld (hl),c
04089A 23          0151*       inc hl
04089B 70          0152*       ld (hl),b
04089C C9          0153*       ret
04089D             0154*   
04089D             0155*   ; load bcd values from a scratch memory address to bcde
04089D             0156*   ; input: hl; scratch address
04089D             0157*   ; output: bcde; 8-place bcd number
04089D             0158*   ; destroys: hl
04089D             0159*   get_bcd:
04089D 5E          0160*       ld e,(hl)
04089E 23          0161*       inc hl
04089F 56          0162*       ld d,(hl)
0408A0 23          0163*       inc hl
0408A1 4E          0164*       ld c,(hl)
0408A2 23          0165*       inc hl
0408A3 46          0166*       ld b,(hl)
0408A4 C9          0167*       ret
0408A5             0168*   
0408A5             0169*   ; BCD addition
0408A5             0170*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0408A5             0171*   ;       a is the number of bytes holding each number (number of places/2)
0408A5             0172*   ; outputs: (hl) + (de) --> (hl)
0408A5             0173*   ; destroys: a,b,de,hl
0408A5             0174*   add_bcd:
0408A5 47          0175*       ld b,a ; loop counter
0408A6 AF          0176*       xor a ; reset a, clear carry flag
0408A7             0177*   adcec:
0408A7 1A          0178*       ld a,(de) ; addend to acc
0408A8 8E          0179*       adc a,(hl) ; add (hl) to acc
0408A9 27          0180*       daa ; adjust result to bcd
0408AA 77          0181*       ld (hl),a ; store result
0408AB 23          0182*       inc hl ; advance memory pointers
0408AC 13          0183*       inc de
0408AD 10 F8       0184*       djnz adcec ; loop until b == 0
0408AF C9          0185*       ret
0408B0             0186*   
0408B0             0187*   ; BCD subtraction
0408B0             0188*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0408B0             0189*   ;       a is the number of bytes holding each number (number of places/2)
0408B0             0190*   ; outputs: (hl) - (de) --> (hl)
0408B0             0191*   ; destroys: a,b,de,hl
0408B0             0192*   sub_bcd:
0408B0 47          0193*       ld b,a ; loop counter
0408B1 AF          0194*       xor a ; reset a,clear carry flag
0408B2             0195*   subdec:
0408B2 1A          0196*       ld a,(de) ; subtrahend to acc
0408B3 9E          0197*       sbc a,(hl) ; subtract (hl) from acc
0408B4 27          0198*       daa ; adjust result to bcd
0408B5 77          0199*       ld (hl),a ; store result
0408B6 23          0200*       inc hl ; advance memory pointers
0408B7 13          0201*       inc de
0408B8 10 F8       0202*       djnz subdec ; loop until b == 0
0408BA C9          0203*       ret
0408BB             0204*   
0408BB             0205*   ; http://www.z80.info/pseudo-random.txt
0408BB             0206*   rand_8:
0408BB C5          0207*       push bc
0408BC 3A CF 08 04 0208*       ld a,(r_seed)
0408C0 4F          0209*       ld c,a
0408C1             0210*   
0408C1 0F          0211*       rrca ; multiply by 32
0408C2 0F          0212*       rrca
0408C3 0F          0213*       rrca
0408C4 EE 1F       0214*       xor 0x1f
0408C6             0215*   
0408C6 81          0216*       add a,c
0408C7 DE FF       0217*       sbc a,255 ; carry
0408C9             0218*   
0408C9 32 CF 08 04 0219*       ld (r_seed),a
0408CD C1          0220*       pop bc
0408CE C9          0221*       ret
0408CF 50          0222*   r_seed: defb $50
0408D0             0223*   
0408D0             0224*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
0408D0             0225*   prng24:
0408D0             0226*   ;;Expects ADL mode.
0408D0             0227*   ;;Output: HL
0408D0             0228*   ;;50cc
0408D0             0229*   ;;33 bytes
0408D0             0230*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
0408D0 ED 5B F1 08 0231*       ld de,(seed1)
       04          
0408D5 B7          0232*       or a
0408D6 ED 62       0233*       sbc hl,hl
0408D8 19          0234*       add hl,de
0408D9 29          0235*       add hl,hl
0408DA 29          0236*       add hl,hl
0408DB 2C          0237*       inc l
0408DC 19          0238*       add hl,de
0408DD 22 F1 08 04 0239*       ld (seed1),hl
0408E1 2A F4 08 04 0240*       ld hl,(seed2)
0408E5 29          0241*       add hl,hl
0408E6 9F          0242*       sbc a,a
0408E7 E6 1B       0243*       and %00011011
0408E9 AD          0244*       xor l
0408EA 6F          0245*       ld l,a
0408EB 22 F4 08 04 0246*       ld (seed2),hl
0408EF 19          0247*       add hl,de
0408F0 C9          0248*       ret
0408F1 00 00 00    0249*   seed1: dl 0
0408F4 00 00 00    0250*   seed2: dl 0
0408F7             0032        include "files.inc"
0408F7             0001*   ; load to onboard 8k sram
0408F7             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
0408F7             0033        include "fixed168.inc"
0408F7 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF          
040900             0002*   
040900             0003*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040900             0004*   ; uses EZ80 MLT instruction for speed
040900             0005*   ; operation: UHL * A --> UHL
040900             0006*   ; destroys: AF, HL
040900             0007*   smul24x8:
040900             0008*   ; make hl positive and store sign flag
040900 CD 06 08 04 0009*       call hlu_abs
040904 F5          0010*       push af
040905             0011*   ; do the division
040905 CD 10 09 04 0012*       call mul24x8 ; hl = product
040909             0013*   ; adjust sign of result
040909 F1          0014*       pop af ; sign de
04090A F0          0015*       ret p ; hl was positive, nothing to do
04090B CD 16 08 04 0016*       call neg_hlu ; result is negative
04090F C9          0017*       ret
040910             0018*   
040910             0019*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040910             0020*   ; uses EZ80 MLT instruction for speed
040910             0021*   ; operation: UHL * A --> AUHL
040910             0022*   ; destroys: AF, HL
040910             0023*   mul24x8:
040910 D5          0024*       push de ; preserve de
040911             0025*   ; low byte
040911 5D          0026*       ld e,l
040912 57          0027*       ld d,a
040913 ED 5C       0028*       mlt de
040915 6B          0029*       ld l,e ; product low byte
040916 08          0030*       ex af,af' ; save multiplier
040917 7A          0031*       ld a,d ; carry
040918 08          0032*       ex af,af' ; save carry, restore multiplier
040919             0033*   ; high byte
040919 5C          0034*       ld e,h
04091A 57          0035*       ld d,a
04091B ED 5C       0036*       mlt de
04091D 08          0037*       ex af,af' ; save multiplier, restore carry
04091E 83          0038*       add a,e ; add carry
04091F 67          0039*       ld h,a ; product middle byte
040920 7A          0040*       ld a,d ; carry
040921 08          0041*       ex af,af' ; save carry, restore multiplier
040922             0042*   ; upper byte
040922 22 3D 09 04 0043*       ld (@scratch),hl ; 7 cycles
040926 5F          0044*       ld e,a
040927 3A 3F 09 04 0045*       ld a,(@scratch+2)
04092B 57          0046*       ld d,a
04092C ED 5C       0047*       mlt de
04092E 08          0048*       ex af,af' ; restore carry
04092F 8B          0049*       adc a,e ; add carry
040930 32 3F 09 04 0050*       ld (@scratch+2),a ; 5 cycles
040934 2A 3D 09 04 0051*       ld hl,(@scratch) ; 7 cycles
040938             0052*   ; highest byte
040938 3E 00       0053*       ld a,0 ; preserve carry flag
04093A 8A          0054*       adc a,d ; product highest byte
04093B D1          0055*       pop de ; restore de
04093C C9          0056*       ret
04093D             0057*   @scratch: ds 3
040940             0058*   
       FF FF FF 
040940 00 00 00 00 0059*   mul24out: blkb 6,0
       00 00       
040946             0060*   
040946             0061*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040946             0062*   ; operation: UHL * UDE --> mul24out
040946             0063*   mul24:
040946 DD E5       0064*       push ix ; preserve
040948             0065*   ; point to output buffer and clear it
040948 DD 21 40 09 0066*       ld ix,mul24out
       04          
04094D C5          0067*       push bc
04094E 01 00 00 00 0068*       ld bc,0
040952 DD 0F 00    0069*       ld (ix),bc
040955 DD 0F 03    0070*       ld (ix+3),bc
040958 C1          0071*       pop bc
040959             0072*   ; STEP 1: UHL * E
040959 7B          0073*       ld a,e
04095A E5          0074*       push hl
04095B CD 10 09 04 0075*       call mul24x8
04095F DD 2F 00    0076*       ld (ix+0),hl
040962 DD 77 03    0077*       ld (ix+3),a
040965             0078*   ; STEP 2: UHL * D
040965 E1          0079*       pop hl
040966 E5          0080*       push hl
040967 7A          0081*       ld a,d
040968 CD 10 09 04 0082*       call mul24x8
04096C CD 85 09 04 0083*       call @accumulate
040970             0084*   ; STEP 3: UHL * DEU
040970 E1          0085*       pop hl
040971 ED 53 B5 09 0086*       ld (@de),de
       04          
040976 3A B7 09 04 0087*       ld a,(@de+2)
04097A CD 10 09 04 0088*       call mul24x8
04097E CD 85 09 04 0089*       call @accumulate
040982             0090*   ; all done
040982 DD E1       0091*       pop ix ; restore
040984 C9          0092*       ret
040985             0093*   @accumulate:
040985 DD 23       0094*       inc ix
040987             0095*   ; highest byte of product to carry
040987 DD 77 03    0096*       ld (ix+3),a
04098A             0097*   ; low byte of product
04098A 7D          0098*       ld a,l
04098B DD 86 00    0099*       add a,(ix+0)
04098E DD 77 00    0100*       ld (ix+0),a
040991             0101*   ; high byte of product
040991 7C          0102*       ld a,h
040992 DD 8E 01    0103*       adc a,(ix+1)
040995 DD 77 01    0104*       ld (ix+1),a
040998             0105*   ; uppper byte of product
040998 22 B2 09 04 0106*       ld (@hl),hl
04099C 3A B4 09 04 0107*       ld a,(@hl+2)
0409A0 DD 8E 02    0108*       adc a,(ix+2)
0409A3 DD 77 02    0109*       ld (ix+2),a
0409A6             0110*   ; carry
0409A6 3E 00       0111*       ld a,0 ; preserve flags
0409A8 DD 8E 03    0112*       adc a,(ix+3)
0409AB DD 77 03    0113*       ld (ix+3),a
0409AE C9          0114*       ret
0409AF             0115*   
0409AF 00 00 00    0116*   @ix: dl 0
0409B2 00 00 00    0117*   @hl: dl 0
0409B5 00 00 00    0118*   @de: dl 0
0409B8             0119*   
0409B8             0120*   ; UHL * UDE --> UHL (unsigned)
0409B8             0121*   umul24:
0409B8 CD 46 09 04 0122*       call mul24
0409BC 2A 40 09 04 0123*       ld hl,(mul24out)
0409C0 C9          0124*       ret
0409C1             0125*   
0409C1             0126*   ; UH.L = UH.L*UD.E (unsigned)
0409C1             0127*   umul168:
0409C1 CD 46 09 04 0128*       call mul24
0409C5 2A 41 09 04 0129*       ld hl,(mul24out+1)
0409C9 C9          0130*       ret
0409CA             0131*   
0409CA             0132*   ; UH.L * UD.E --> UH.L (signed)
0409CA             0133*   smul168:
0409CA             0134*   ; make everything positive and store sign flags
0409CA CD 06 08 04 0135*       call hlu_abs
0409CE F5          0136*       push af
0409CF EB          0137*       ex de,hl
0409D0 CD 06 08 04 0138*       call hlu_abs
0409D4 EB          0139*       ex de,hl
0409D5 F5          0140*       push af
0409D6             0141*   ; do the division
0409D6 CD C1 09 04 0142*       call umul168 ; hl = product
0409DA             0143*   ; adjust sign of result
0409DA F1          0144*       pop af ; sign de
0409DB FA E6 09 04 0145*       jp m,@de_neg
0409DF F1          0146*       pop af ; sign hl
0409E0 F0          0147*       ret p ; both positive, nothing to do
0409E1             0148*   @hl_neg:
0409E1 CD 16 08 04 0149*       call neg_hlu ; de pos, hl neg, result is negative
0409E5 C9          0150*       ret
0409E6             0151*   @de_neg:
0409E6 F1          0152*       pop af
0409E7 F8          0153*       ret m ; both negative, nothing to do
0409E8 CD 16 08 04 0154*       call neg_hlu ; result is negative
0409EC C9          0155*       ret
0409ED             0156*   
0409ED             0157*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
0409ED             0158*   ; perform unsigned division of 16.8 fixed place values
0409ED             0159*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
0409ED             0160*   udiv168:
0409ED             0161*   ; back up divisor
0409ED ED 53 24 0A 0162*       ld (@ude),de
       04          
0409F2             0163*   ; get the 16-bit integer part of the quotient
0409F2 CD 55 0A 04 0164*       call udiv24 ; de = quotient, hl = remainder
0409F6             0165*   ; load quotient to upper three bytes of output
0409F6 ED 53 2B 0A 0166*       ld (div168_out+1),de
       04          
0409FB             0167*   @div256:
0409FB             0168*   ; multiply remainder by 256
0409FB             0169*       hlu_mul256
0409FB 29          0001*M1     add hl,hl ; * 2
0409FC 29          0002*M1     add hl,hl ; * 4
0409FD 29          0003*M1     add hl,hl ; * 8
0409FE 29          0004*M1     add hl,hl ; * 16
0409FF 29          0005*M1     add hl,hl ; * 32
040A00 29          0006*M1     add hl,hl ; * 64
040A01 29          0007*M1     add hl,hl ; * 128
040A02 29          0008*M1     add hl,hl ; * 256
040A03             0170*   ; skip fractional computation if remainder is zero
040A03             0171*       sign_hlu
040A03 19          0001*M1     add hl,de
040A04 B7          0002*M1     or a
040A05 ED 52       0003*M1     sbc hl,de
040A07 20 03       0172*       jr nz,@div_frac
040A09 AF          0173*       xor a
040A0A 18 0A       0174*       jr @write_frac
040A0C             0175*   ; now divide the shifted remainder by the divisor
040A0C             0176*   @div_frac:
040A0C ED 5B 24 0A 0177*       ld de,(@ude) ; get back divisor
       04          
040A11 CD 55 0A 04 0178*       call udiv24 ; de = quotient, hl = remainder
040A15             0179*   ; load low byte of quotient to low byte of output
040A15 7B          0180*       ld a,e
040A16             0181*   @write_frac:
040A16 32 2A 0A 04 0182*       ld (div168_out),a
040A1A             0183*   ; load de with return value
040A1A ED 5B 2A 0A 0184*       ld de,(div168_out)
       04          
040A1F             0185*   ; load a with any overflow
040A1F 3A 2D 0A 04 0186*       ld a,(div168_out+3)
040A23 C9          0187*       ret ; ud.e is the 16.8 result
040A24             0188*   @ude: ds 6
040A2A             0189*   div168_out: ds 4 ; the extra byte is for overflow
040A2E             0190*   
040A2E             0191*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040A2E             0192*   ; perform signed division of 16.8 fixed place values
040A2E             0193*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040A2E             0194*   sdiv168:
040A2E             0195*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040A2E CD 06 08 04 0196*       call hlu_abs
040A32 F5          0197*       push af
040A33 EB          0198*       ex de,hl
040A34 CD 06 08 04 0199*       call hlu_abs
040A38 EB          0200*       ex de,hl
040A39 F5          0201*       push af
040A3A             0202*   ; do the division
040A3A CD ED 09 04 0203*       call udiv168 ; de = quotient, hl = remainder
040A3E             0204*   ; adjust sign of result
040A3E F1          0205*       pop af ; sign de
040A3F FA 4C 0A 04 0206*       jp m,@de_neg
040A43 F1          0207*       pop af ; sign hl
040A44 F0          0208*       ret p ; both positive, nothing to do
040A45             0209*   @hl_neg:
040A45 EB          0210*       ex de,hl ; hl = quotient, de = remainder
040A46 CD 16 08 04 0211*       call neg_hlu ; de pos, hl neg, result is negative
040A4A EB          0212*       ex de,hl ; de = negated quotient, hl = remainder
040A4B C9          0213*       ret
040A4C             0214*   @de_neg:
040A4C F1          0215*       pop af
040A4D F8          0216*       ret m ; both negative, nothing to do
040A4E EB          0217*       ex de,hl ; hl = quotient, de = remainder
040A4F CD 16 08 04 0218*       call neg_hlu ; result is negative
040A53 EB          0219*       ex de,hl ; de = negated quotient, hl = remainder
040A54 C9          0220*       ret
040A55             0221*   
040A55             0222*   ;------------------------------------------------------------------------
040A55             0223*   ;  arith24.asm
040A55             0224*   ;  24-bit ez80 arithmetic routines
040A55             0225*   ;  Copyright (c) Shawn Sijnstra 2024
040A55             0226*   ;  MIT license
040A55             0227*   ;
040A55             0228*   ;  This library was created as a tool to help make ez80
040A55             0229*   ;  24-bit native assembly routines for simple mathematical problems
040A55             0230*   ;  more widely available.
040A55             0231*   ;
040A55             0232*   ;------------------------------------------------------------------------
040A55             0233*   ;
040A55             0234*   ;------------------------------------------------------------------------
040A55             0235*   ; udiv24
040A55             0236*   ; Unsigned 24-bit division
040A55             0237*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
040A55             0238*   ;
040A55             0239*   ; Uses AF BC DE HL
040A55             0240*   ; Uses Restoring Division algorithm
040A55             0241*   ;------------------------------------------------------------------------
040A55             0242*   
040A55             0243*   udiv24:
040A55 E5          0244*       push hl
040A56 C1          0245*       pop bc ;move dividend to BCU
040A57 21 00 00 00 0246*       ld hl,0 ;result
040A5B A7          0247*       and a
040A5C ED 52       0248*       sbc hl,de ;test for div by 0
040A5E C8          0249*       ret z ;it's zero, carry flag is clear
040A5F 19          0250*       add hl,de ;HL is 0 again
040A60 3E 18       0251*       ld a,24 ;number of loops through.
040A62             0252*   udiv1:
040A62 C5          0253*       push bc ;complicated way of doing this because of lack of access to top bits
040A63 E3          0254*       ex (sp),hl
040A64 37          0255*       scf
040A65 ED 6A       0256*       adc hl,hl
040A67 E3          0257*       ex (sp),hl
040A68 C1          0258*       pop bc ;we now have bc = (bc * 2) + 1
040A69             0259*   
040A69 ED 6A       0260*       adc hl,hl
040A6B A7          0261*       and a ;is this the bug
040A6C ED 52       0262*       sbc hl,de
040A6E 30 02       0263*       jr nc,udiv2
040A70 19          0264*       add hl,de
040A71             0265*   ;	dec	c
040A71 0B          0266*       dec bc
040A72             0267*   udiv2:
040A72 3D          0268*       dec a
040A73 20 ED       0269*       jr nz,udiv1
040A75 37          0270*       scf ;flag used for div0 error
040A76 C5          0271*       push bc
040A77 D1          0272*       pop de ;remainder
040A78 C9          0273*       ret
040A79             0274*   
040A79             0275*   ;------------------------------------------------------------------------
040A79             0276*   ;  END 24-bit ez80 arithmetic routines by Shawn Sijnstra
040A79             0277*   ;------------------------------------------------------------------------
040A79             0278*   
040A79             0279*   
040A79             0280*       ; include "trig24fast.inc"
040A79             0281*   
040A79             0282*   
040A79             0283*   ; convert signed angles from a 360 to 256 degree circle
040A79             0284*   ; inputs: uh.l is the angle360 in 16.8 fixed format
040A79             0285*   ; outputs: uh.l is the angle256 in 16.8 fixed format
040A79             0286*   ; destroys: TODO
040A79             0287*   deg_360_to_256:
040A79 D5          0288*       push de ; preserve de
040A7A             0289*   ; make angle positive and store sign flag
040A7A CD 06 08 04 0290*       call hlu_abs
040A7E F5          0291*       push af
040A7F             0292*   ; multiply by coversion factor of 256/360
040A7F 11 B6 00 00 0293*       ld de,0x0000B6 ; 0.711
040A83 CD C1 09 04 0294*       call umul168 ; uh.l = uh.l * 0.711
040A87             0295*   ; restore sign flag and adjust output accordingly
040A87 F1          0296*       pop af
040A88 F2 90 0A 04 0297*       jp p,@pos ; positive number
040A8C CD 16 08 04 0298*       call neg_hlu
040A90             0299*   @pos:
040A90             0300*   ; restore de and return uh.l as the result
040A90 D1          0301*       pop de
040A91 C9          0302*       ret
040A92             0303*   
040A92             0304*   ; convert signed angles from a 256 to 360 degree circle
040A92             0305*   ; inputs: uh.l is the angle256 in 16.8 fixed format
040A92             0306*   ; outputs: uh.l is the angle360 in 16.8 fixed format
040A92             0307*   ; destroys: TODO
040A92             0308*   deg_256_to_360:
040A92 D5          0309*       push de ; preserve de
040A93             0310*   ; make angle positive and store sign flag
040A93 CD 06 08 04 0311*       call hlu_abs
040A97 F5          0312*       push af
040A98             0313*   ; multiply by coversion factor of 360/256
040A98 11 68 01 00 0314*       ld de,0x000168 ; 1.406
040A9C CD C1 09 04 0315*       call umul168 ; uh.l = uh.l * 1.406
040AA0             0316*   ; restore sign flag and adjust output accordingly
040AA0 F1          0317*       pop af
040AA1 F2 A9 0A 04 0318*       jp p,@pos ; positive number
040AA5 CD 16 08 04 0319*       call neg_hlu
040AA9             0320*   @pos:
040AA9             0321*   ; restore de and return uh.l as the result
040AA9 D1          0322*       pop de
040AAA C9          0323*       ret
040AAB             0324*   
040AAB             0325*   ; fixed 16.8 routine
040AAB             0326*   ; cos(uh.l) --> uh.l
040AAB             0327*   ; destroys: f, hl
040AAB             0328*   cos168:
040AAB D5          0329*       push de ; preserve de
040AAC             0330*   ; for cos we simply increment the angle by 90 degrees
040AAC             0331*   ; or 0x004000 in 16.8 degrees256
040AAC             0332*   ; which makes it a sin problem
040AAC 11 00 40 00 0333*       ld de,0x004000
040AB0 19          0334*       add hl,de ; modulo 256 happens below
040AB1 D1          0335*       pop de ; restore de
040AB2             0336*   ; fall through to sin168
040AB2             0337*   
040AB2             0338*   ; ---------------------
040AB2             0339*   ; fixed 16.8 routine
040AB2             0340*   ; sin(uh.l) --> uh.l
040AB2             0341*   ; destroys: f, hl
040AB2             0342*   sin168:
040AB2 D5          0343*       push de
040AB3             0344*   ; handle negative angles appropriately
040AB3 CD 06 08 04 0345*       call hlu_abs
040AB7 F2 C0 0A 04 0346*       jp p,@F
040ABB 11 00 00 FF 0347*       ld de,-256*256
040ABF 19          0348*       add hl,de
040AC0             0349*   @@:
040AC0 2E 03       0350*       ld l,3 ; multiply by 3 to get our lookup index
040AC2 ED 6C       0351*       mlt hl
040AC4 11 1E 0D 04 0352*       ld de,sin_lut_168 ; grab the lut address
040AC8 19          0353*       add hl,de ; bump hl by the index
040AC9 ED 27       0354*       ld hl,(hl) ; don't try this on a z80!
040ACB D1          0355*       pop de
040ACC C9          0356*       ret
040ACD             0357*   
040ACD             0358*   ; 16.8 fixed inputs / outputs
040ACD             0359*   ; takes: uh.l as angle in degrees 256
040ACD             0360*   ;        ud.e as radius
040ACD             0361*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
040ACD             0362*   ;        displacements from origin (0,0)
040ACD             0363*   ; destroys: everything except indexes
040ACD             0364*   polar_to_cartesian:
040ACD             0365*   ; back up input parameters
040ACD 22 FC 0A 04 0366*       ld (@angle), hl
040AD1 ED 53 FF 0A 0367*       ld (@radius), de
       04          
040AD6             0368*   ; compute dx = sin(uh.l) * ud.e
040AD6 CD B2 0A 04 0369*       call sin168 ; uh.l = sin(uh.l)
040ADA ED 5B FF 0A 0370*       ld de,(@radius)
       04          
040ADF CD CA 09 04 0371*       call smul168 ; uh.l = dx
040AE3 E5          0372*       push hl
040AE4             0373*   ; compute dy = -cos(uh.l) * ud.e
040AE4 2A FC 0A 04 0374*       ld hl,(@angle)
040AE8 CD AB 0A 04 0375*       call cos168 ; uh.l = cos(uh.l)
040AEC ED 5B FF 0A 0376*       ld de,(@radius)
       04          
040AF1 CD CA 09 04 0377*       call smul168 ; uh.l = dy
040AF5 CD 16 08 04 0378*       call neg_hlu ; invert dy for screen coords convention
040AF9 EB          0379*       ex de,hl ; de = dy for output
040AFA C1          0380*       pop bc ; bc = dx for output
040AFB             0381*   ; and out
040AFB C9          0382*       ret
040AFC             0383*   @angle: ds 3
040AFF             0384*   @radius: ds 3
040B02             0385*   
040B02             0386*   ; 16.8 fixed inputs / outputs
040B02             0387*   ; inputs: ub.c as dx, ud.e as dy
040B02             0388*   ;        displacements from origin (0,0)
040B02             0389*   ; returns: uh.l as angle in degrees 256
040B02             0390*   ;        ud.e as radius
040B02             0391*   ; destroys: everything except indexes
040B02             0392*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040B02 C5          0393*       push bc ; preserve dx
040B03 D5          0394*       push de ; preserve dy
040B04             0395*   ; compute radius
040B04 CD 38 0B 04 0396*       call distance168 ; uh.l = radius, dx168, dy168 populated
040B08 E5          0397*       push hl ; save radius
040B09             0398*   ; compute angle
040B09 D1          0399*       pop de ; restore dy
040B0A C1          0400*       pop bc ; restore dx
040B0B CD 6D 0B 04 0401*       call atan2_168fast ; uh.l = angle
040B0F             0402*   ; return result
040B0F D1          0403*       pop de ; de = radius (was hl)
040B10 C9          0404*       ret
040B11             0405*   ; end cartesian_to_polar
040B11             0406*   
040B11             0407*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040B11             0408*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040B11             0409*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040B11             0410*   ;         also populates scratch locations dx168 and dy168
040B11             0411*   ; destroys: a,hl,bc,de
040B11             0412*   dxy168:
040B11             0413*   ; compute dx = x1-x0
040B11 AF          0414*       xor a ; clear carry
040B12 DD E5       0415*       push ix ; move ix to hl via the stack
040B14 E1          0416*       pop hl ; hl = x1
040B15 ED 42       0417*       sbc hl,bc ; hl = dx
040B17 22 2C 0B 04 0418*       ld (dx168),hl ; dx to scratch
040B1B             0419*   ; compute dy = y1-y0
040B1B AF          0420*       xor a ; clear carry
040B1C FD E5       0421*       push iy ; move iy to hl via the stack
040B1E E1          0422*       pop hl ; hl = y1
040B1F ED 52       0423*       sbc hl,de ; hl = dy
040B21 22 32 0B 04 0424*       ld (dy168),hl ; dy to scratch
040B25             0425*   ; populate output registers and return
040B25 EB          0426*       ex de,hl ; ud.e = dy
040B26 ED 4B 2C 0B 0427*       ld bc,(dx168) ; ub.c = dx
       04          
040B2B C9          0428*       ret
040B2C 00 00 00 00 0429*   dx168: blkb 6,0
       00 00       
040B32 00 00 00 00 0430*   dy168: blkb 6,0
       00 00       
040B38             0431*   
040B38             0432*   ; compute the euclidian distance between two cartesian coordinates
040B38             0433*   ; using the formula d = sqrt(dx^2+dy^2)
040B38             0434*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040B38             0435*   ; output; uh.l is the 16.8 fixed format distance
040B38             0436*   ;         also populates scratch locations dx168 and dy168
040B38             0437*   ; destroys: a,hl,bc,de
040B38             0438*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
040B38             0439*   ;       thus the result will always be an integer, albeit in 16.8 format
040B38             0440*   distance168:
040B38             0441*   ; compute dy^2
040B38 2A 32 0B 04 0442*       ld hl,(dy168)
040B3C CD 06 08 04 0443*       call hlu_abs
040B40 CD 6D 08 04 0444*       call hlu_udiv256 ; make integer to avoid overflow
040B44 E5          0445*       push hl
040B45 D1          0446*       pop de
040B46 CD B8 09 04 0447*       call umul24 ; hl = dy^2
040B4A E5          0448*       push hl ; save dy^2
040B4B             0449*   ; compute dx^2
040B4B 2A 2C 0B 04 0450*       ld hl,(dx168)
040B4F CD 06 08 04 0451*       call hlu_abs
040B53 CD 6D 08 04 0452*       call hlu_udiv256 ; make integer to avoid overflow
040B57 E5          0453*       push hl
040B58 D1          0454*       pop de
040B59 CD B8 09 04 0455*       call umul24 ; hl = dx^2
040B5D             0456*   ; add dx^2 and dy^2
040B5D D1          0457*       pop de ; de = dy^2 (was hl)
040B5E 19          0458*       add hl,de ; hl = dx^2 + dy^2
040B5F             0459*   ; compute the square root
040B5F CD 38 0C 04 0460*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040B63 EB          0461*       ex de,hl ; hl = distance
040B64             0462*       hlu_mul256 ; convert back to 16.8 fixed
040B64 29          0001*M1     add hl,hl ; * 2
040B65 29          0002*M1     add hl,hl ; * 4
040B66 29          0003*M1     add hl,hl ; * 8
040B67 29          0004*M1     add hl,hl ; * 16
040B68 29          0005*M1     add hl,hl ; * 32
040B69 29          0006*M1     add hl,hl ; * 64
040B6A 29          0007*M1     add hl,hl ; * 128
040B6B 29          0008*M1     add hl,hl ; * 256
040B6C C9          0463*       ret
040B6D             0464*   
040B6D             0465*   ; atan2_(ub.c,ud.e) --> uh.l
040B6D             0466*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040B6D             0467*   ;   whether inputs are integers or fractional doesn't matter
040B6D             0468*   ;   so long as the sign bit of the upper byte is correct
040B6D             0469*   ; output: uh.l is the 16.8 fixed angle in degrees 256
040B6D             0470*   ; angles are COMPASS HEADINGS based on
040B6D             0471*   ; screen coordinate conventions,where the y axis is flipped
040B6D             0472*   ; #E0 224      0       32 #20
040B6D             0473*   ;        -x,-y | +x,-y
040B6D             0474*   ; #C0 192------+------ 64 #40
040B6D             0475*   ;        -x,+y | +x,+y
040B6D             0476*   ; #A0 160   128 #80   96 #60
040B6D             0477*   atan2_168fast:
040B6D             0478*   ; get signs and make everything positive
040B6D             0479*   ; get abs(x) and store its original sign
040B6D C5          0480*       push bc
040B6E E1          0481*       pop hl
040B6F CD 06 08 04 0482*       call hlu_abs ; if x was negative this also sets the sign flag
040B73 E5          0483*       push hl ; store abs(x)
040B74 C1          0484*       pop bc ; bc = abs(x)
040B75 F5          0485*       push af ; store sign of x
040B76             0486*   ; get abs(y) and store its original sign
040B76 EB          0487*       ex de,hl ; hl = y
040B77 CD 06 08 04 0488*       call hlu_abs ; if y was negative this also sets the sign flag
040B7B EB          0489*       ex de,hl ; de = abs(y)
040B7C F5          0490*       push af ; store sign of y
040B7D             0491*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
040B7D             0492*   ; this ensures that our lookup value is between 0 and 1 inclusive
040B7D AF          0493*       xor a ; clear the carry flag
040B7E D5          0494*       push de
040B7F E1          0495*       pop hl
040B80 ED 42       0496*       sbc hl,bc
040B82 F5          0497*       push af ; save sign of de - bc
040B83 F2 8C 0B 04 0498*       jp p,@1 ; bc <= de, so we skip ahead
040B87             0499*   ; otherwise we swap bc and de
040B87 C5          0500*       push bc
040B88 E1          0501*       pop hl
040B89 EB          0502*       ex de,hl
040B8A E5          0503*       push hl
040B8B C1          0504*       pop bc
040B8C             0505*   @1:
040B8C             0506*   ; now we're ready to snag our preliminary result
040B8C C5          0507*       push bc
040B8D E1          0508*       pop hl
040B8E CD FC 0B 04 0509*       call atan_168fast ; uh.l comes back with prelim result
040B92             0510*   ; now we adjust uh.l based on sign of de - bc
040B92 F1          0511*       pop af
040B93 F2 9F 0B 04 0512*       jp p,@2 ; bc <= de,so we skip ahead
040B97 EB          0513*       ex de,hl
040B98 21 00 40 00 0514*       ld hl,64*256 ; subtract from 64 (90) degrees
040B9C AF          0515*       xor a ; clear the carry flag
040B9D ED 52       0516*       sbc hl,de
040B9F             0517*   @2:
040B9F             0518*   ; adjust the result based on quadrant
040B9F             0519*   ; #E0 224      0       32 #20
040B9F             0520*   ;        -x,-y | +x,-y
040B9F             0521*   ; #C0 192------+------ 64 #40
040B9F             0522*   ;        -x,+y | +x,+y
040B9F             0523*   ; #A0 160   128 #80   96 #60
040B9F F1          0524*       pop af ; sign of y
040BA0 CA DD 0B 04 0525*       jp z,@y_zero
040BA4 F2 BD 0B 04 0526*       jp p,@y_pos
040BA8             0527*   ; y neg,check x
040BA8 F1          0528*       pop af ; sign of x
040BA9 CA B7 0B 04 0529*       jp z,@y_neg_x_zero
040BAD F2 BC 0B 04 0530*       jp p,@y_neg_x_pos
040BB1             0531*   ; y neg,x neg
040BB1             0532*   ; angle is 128 to 256 (270 to 360)
040BB1             0533*   ; negating the intermediate does the trick
040BB1 CD 16 08 04 0534*       call neg_hlu
040BB5 18 31       0535*       jr @zero_hlu
040BB7             0536*   
040BB7             0537*   @y_neg_x_zero:
040BB7             0538*   ; y neg,x zero
040BB7             0539*   ; angle is 0
040BB7 21 00 00 00 0540*       ld hl,0
040BBB C9          0541*       ret
040BBC             0542*   @y_neg_x_pos:
040BBC             0543*   ; y neg,x pos
040BBC             0544*   ; angle is 0 to 64 (0 to 90)
040BBC             0545*   ; so we're good
040BBC C9          0546*       ret
040BBD             0547*   
040BBD             0548*   @y_pos:
040BBD F1          0549*       pop af ; sign of x
040BBE CA CD 0B 04 0550*       jp z,@y_pos_x_zero
040BC2 F2 D2 0B 04 0551*       jp p,@y_pos_x_pos
040BC6             0552*   ; y pos,x neg
040BC6             0553*   ; angle is 128 to 192 (180-270)
040BC6             0554*   ; so we add 128 to intermediate
040BC6 11 00 80 00 0555*       ld de,128*256
040BCA 19          0556*       add hl,de
040BCB 18 1B       0557*       jr @zero_hlu
040BCD             0558*   @y_pos_x_zero:
040BCD             0559*   ; y pos,x zero
040BCD             0560*   ; angle is 128 (180)
040BCD 21 00 80 00 0561*       ld hl,128*256
040BD1 C9          0562*       ret
040BD2             0563*   @y_pos_x_pos:
040BD2             0564*   ; y pos,x pos
040BD2             0565*   ; angle is 64 to 128 (90 to 180)
040BD2             0566*   ; neg the intermediate and add 180 degrees
040BD2 CD 16 08 04 0567*       call neg_hlu
040BD6 11 00 80 00 0568*       ld de,128*256
040BDA 19          0569*       add hl,de
040BDB 18 0B       0570*       jr @zero_hlu
040BDD             0571*   
040BDD             0572*   @y_zero:
040BDD F1          0573*       pop af ; sign of x
040BDE FA E3 0B 04 0574*       jp m,@y_zero_x_neg
040BE2             0575*   ; y zero,x pos
040BE2             0576*   ; angle is 64 (90),nothing to do
040BE2 C9          0577*       ret
040BE3             0578*   @y_zero_x_neg:
040BE3             0579*   ; y zero ,x neg
040BE3             0580*   ; angle is 192 (270)
040BE3 21 00 C0 00 0581*       ld hl,192*256
040BE7 C9          0582*       ret
040BE8             0583*   @zero_hlu:
040BE8 AF          0584*       xor a
040BE9 22 F6 0B 04 0585*       ld (@scratch),hl
040BED 32 F8 0B 04 0586*       ld (@scratch+2),a
040BF1 2A F6 0B 04 0587*       ld hl,(@scratch)
040BF5 C9          0588*       ret
040BF6             0589*   @scratch: ds 6
040BFC             0590*   
040BFC             0591*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040BFC             0592*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
040BFC             0593*   ; destroys: a,hl,bc,de
040BFC             0594*   ; note: only works for angles from 0 to 32 (45) degrees
040BFC             0595*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040BFC             0596*   atan_168fast:
040BFC             0597*   ; because we use compass headings instead of geometric angles
040BFC             0598*   ; we compute dx/dy which is 1/tan(theta) in the maths world
040BFC             0599*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
040BFC CD ED 09 04 0600*       call udiv168 ; ud.e = dx/dy
040C00 EB          0601*       ex de,hl ; uh.l = dx/dy
040C01             0602*   ; test uh.l for 0
040C01 19          0603*       add hl,de
040C02 B7          0604*       or a
040C03 ED 52       0605*       sbc hl,de
040C05 28 22       0606*       jr z,@is_zero
040C07             0607*   ; test uh.l for 1
040C07 AF          0608*       xor a ; clear carry
040C08 EB          0609*       ex de,hl
040C09 21 00 01 00 0610*       ld hl,1*256 ; 1 in 16.8 fixed format
040C0D ED 52       0611*       sbc hl,de
040C0F 28 13       0612*       jr z,@is_45
040C11 EB          0613*       ex de,hl
040C12             0614*   ; no special cases so we move on
040C12             0615*   ; l contains the fractional portion of tan(uh.l)
040C12             0616*   ; we multiply it by three to get our lookup table index
040C12 26 03       0617*       ld h,3
040C14 ED 6C       0618*       mlt hl ; index into lut
040C16 11 00 00 00 0619*       ld de,0 ; clear deu
040C1A 54          0620*       ld d,h ; copy hl to de
040C1B 5D          0621*       ld e,l ; de contains our index
040C1C 21 21 10 04 0622*       ld hl,atan_lut_168 ; grab the lut address
040C20 19          0623*       add hl,de ; bump hl by the index
040C21 ED 27       0624*       ld hl,(hl) ; don't try this on a z80!
040C23 C9          0625*       ret ; and out
040C24             0626*   @is_45:
040C24 21 00 40 00 0627*       ld hl,64*256
040C28 C9          0628*       ret
040C29             0629*   ; for the case tan(0)
040C29             0630*   @is_zero:
040C29 21 00 00 00 0631*       ld hl,0*256
040C2D C9          0632*       ret
040C2E             0633*   
040C2E             0634*   ; Expects  ADL mode
040C2E             0635*   ; Inputs:  UH.L
040C2E             0636*   ; Outputs: UH.L is the 16.8 square root
040C2E             0637*   ;          UDE is the integer difference inputHL-DE^2
040C2E             0638*   sqrt168:
040C2E CD 38 0C 04 0639*       call sqrt24
040C32 EB          0640*       ex de,hl
040C33 29          0641*       add hl,hl
040C34 29          0642*       add hl,hl
040C35 29          0643*       add hl,hl
040C36 29          0644*       add hl,hl
040C37 C9          0645*       ret
040C38             0646*   
040C38             0647*   ; credit: xeda112358
040C38             0648*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040C38             0649*   sqrt24:
040C38             0650*   ; Expects ADL mode
040C38             0651*   ; Inputs: HL
040C38             0652*   ; Outputs: DE is the integer square root
040C38             0653*   ;  HL is the difference inputHL-DE^2
040C38             0654*   ;  c flag reset
040C38 01 00 00 00 0655*       ld bc,0 ; clear bcu
040C3C 11 00 00 00 0656*       ld de,0 ; clear deu
040C40 AF          0657*       xor a
040C41 45          0658*       ld b,l
040C42 C5          0659*       push bc
040C43 47          0660*       ld b,a
040C44 6F          0661*       ld l,a
040C45             0662*   ; Iteration 1
040C45 29          0663*       add hl,hl
040C46 CB 11       0664*       rl c
040C48 29          0665*       add hl,hl
040C49 CB 11       0666*       rl c
040C4B 91          0667*       sub c
040C4C 30 04       0668*       jr nc,$+6
040C4E 1C          0669*       inc e
040C4F 1C          0670*       inc e
040C50 2F          0671*       cpl
040C51 4F          0672*       ld c,a
040C52             0673*   ; Iteration 2
040C52 29          0674*       add hl,hl
040C53 CB 11       0675*       rl c
040C55 29          0676*       add hl,hl
040C56 CB 11       0677*       rl c
040C58 CB 13       0678*       rl e
040C5A 7B          0679*       ld a,e
040C5B 91          0680*       sub c
040C5C 30 04       0681*       jr nc,$+6
040C5E 1C          0682*       inc e
040C5F 1C          0683*       inc e
040C60 2F          0684*       cpl
040C61 4F          0685*       ld c,a
040C62             0686*   ; Iteration 3
040C62 29          0687*       add hl,hl
040C63 CB 11       0688*       rl c
040C65 29          0689*       add hl,hl
040C66 CB 11       0690*       rl c
040C68 CB 13       0691*       rl e
040C6A 7B          0692*       ld a,e
040C6B 91          0693*       sub c
040C6C 30 04       0694*       jr nc,$+6
040C6E 1C          0695*       inc e
040C6F 1C          0696*       inc e
040C70 2F          0697*       cpl
040C71 4F          0698*       ld c,a
040C72             0699*   ; Iteration 4
040C72 29          0700*       add hl,hl
040C73 CB 11       0701*       rl c
040C75 29          0702*       add hl,hl
040C76 CB 11       0703*       rl c
040C78 CB 13       0704*       rl e
040C7A 7B          0705*       ld a,e
040C7B 91          0706*       sub c
040C7C 30 04       0707*       jr nc,$+6
040C7E 1C          0708*       inc e
040C7F 1C          0709*       inc e
040C80 2F          0710*       cpl
040C81 4F          0711*       ld c,a
040C82             0712*   ; Iteration 5
040C82 29          0713*       add hl,hl
040C83 CB 11       0714*       rl c
040C85 29          0715*       add hl,hl
040C86 CB 11       0716*       rl c
040C88 CB 13       0717*       rl e
040C8A 7B          0718*       ld a,e
040C8B 91          0719*       sub c
040C8C 30 04       0720*       jr nc,$+6
040C8E 1C          0721*       inc e
040C8F 1C          0722*       inc e
040C90 2F          0723*       cpl
040C91 4F          0724*       ld c,a
040C92             0725*   ; Iteration 6
040C92 29          0726*       add hl,hl
040C93 CB 11       0727*       rl c
040C95 29          0728*       add hl,hl
040C96 CB 11       0729*       rl c
040C98 CB 13       0730*       rl e
040C9A 7B          0731*       ld a,e
040C9B 91          0732*       sub c
040C9C 30 04       0733*       jr nc,$+6
040C9E 1C          0734*       inc e
040C9F 1C          0735*       inc e
040CA0 2F          0736*       cpl
040CA1 4F          0737*       ld c,a
040CA2             0738*   ; Iteration 7
040CA2 29          0739*       add hl,hl
040CA3 CB 11       0740*       rl c
040CA5 29          0741*       add hl,hl
040CA6 CB 11       0742*       rl c
040CA8 CB 10       0743*       rl b
040CAA EB          0744*       ex de,hl
040CAB 29          0745*       add hl,hl
040CAC E5          0746*       push hl
040CAD ED 42       0747*       sbc hl,bc
040CAF 30 06       0748*       jr nc,$+8
040CB1 7C          0749*       ld a,h
040CB2 2F          0750*       cpl
040CB3 47          0751*       ld b,a
040CB4 7D          0752*       ld a,l
040CB5 2F          0753*       cpl
040CB6 4F          0754*       ld c,a
040CB7 E1          0755*       pop hl
040CB8 30 02       0756*       jr nc,$+4
040CBA 23          0757*       inc hl
040CBB 23          0758*       inc hl
040CBC EB          0759*       ex de,hl
040CBD             0760*   ; Iteration 8
040CBD 29          0761*       add hl,hl
040CBE 69          0762*       ld l,c
040CBF 60          0763*       ld h,b
040CC0 ED 6A       0764*       adc hl,hl
040CC2 ED 6A       0765*       adc hl,hl
040CC4 EB          0766*       ex de,hl
040CC5 29          0767*       add hl,hl
040CC6 ED 52       0768*       sbc hl,de
040CC8 19          0769*       add hl,de
040CC9 EB          0770*       ex de,hl
040CCA 30 04       0771*       jr nc,$+6
040CCC ED 52       0772*       sbc hl,de
040CCE 13          0773*       inc de
040CCF 13          0774*       inc de
040CD0             0775*   ; Iteration 9
040CD0 F1          0776*       pop af
040CD1 17          0777*       rla
040CD2 ED 6A       0778*       adc hl,hl
040CD4 17          0779*       rla
040CD5 ED 6A       0780*       adc hl,hl
040CD7 EB          0781*       ex de,hl
040CD8 29          0782*       add hl,hl
040CD9 ED 52       0783*       sbc hl,de
040CDB 19          0784*       add hl,de
040CDC EB          0785*       ex de,hl
040CDD 30 04       0786*       jr nc,$+6
040CDF ED 52       0787*       sbc hl,de
040CE1 13          0788*       inc de
040CE2 13          0789*       inc de
040CE3             0790*   ; Iteration 10
040CE3 17          0791*       rla
040CE4 ED 6A       0792*       adc hl,hl
040CE6 17          0793*       rla
040CE7 ED 6A       0794*       adc hl,hl
040CE9 EB          0795*       ex de,hl
040CEA 29          0796*       add hl,hl
040CEB ED 52       0797*       sbc hl,de
040CED 19          0798*       add hl,de
040CEE EB          0799*       ex de,hl
040CEF 30 04       0800*       jr nc,$+6
040CF1 ED 52       0801*       sbc hl,de
040CF3 13          0802*       inc de
040CF4 13          0803*       inc de
040CF5             0804*   ; Iteration 11
040CF5 17          0805*       rla
040CF6 ED 6A       0806*       adc hl,hl
040CF8 17          0807*       rla
040CF9 ED 6A       0808*       adc hl,hl
040CFB EB          0809*       ex de,hl
040CFC 29          0810*       add hl,hl
040CFD ED 52       0811*       sbc hl,de
040CFF 19          0812*       add hl,de
040D00 EB          0813*       ex de,hl
040D01 30 04       0814*       jr nc,$+6
040D03 ED 52       0815*       sbc hl,de
040D05 13          0816*       inc de
040D06 13          0817*       inc de
040D07             0818*   ; Iteration 12
040D07 17          0819*       rla
040D08 ED 6A       0820*       adc hl,hl
040D0A 17          0821*       rla
040D0B ED 6A       0822*       adc hl,hl
040D0D EB          0823*       ex de,hl
040D0E 29          0824*       add hl,hl
040D0F ED 52       0825*       sbc hl,de
040D11 19          0826*       add hl,de
040D12 EB          0827*       ex de,hl
040D13 30 04       0828*       jr nc,$+6
040D15 ED 52       0829*       sbc hl,de
040D17 13          0830*       inc de
040D18 13          0831*       inc de
040D19 CB 1A       0832*       rr d
040D1B CB 1B       0833*       rr e
040D1D C9          0834*       ret
040D1E             0835*   
040D1E             0836*   sin_lut_168:
040D1E 00 00 00    0837*       dl 0x000000 ; 0.000 00, 0.000
040D21 06 00 00    0838*       dl 0x000006 ; 1.406 01, 0.025
040D24 0C 00 00    0839*       dl 0x00000C ; 2.813 02, 0.049
040D27 12 00 00    0840*       dl 0x000012 ; 4.219 03, 0.074
040D2A 19 00 00    0841*       dl 0x000019 ; 5.625 04, 0.098
040D2D 1F 00 00    0842*       dl 0x00001F ; 7.031 05, 0.122
040D30 25 00 00    0843*       dl 0x000025 ; 8.438 06, 0.147
040D33 2B 00 00    0844*       dl 0x00002B ; 9.844 07, 0.171
040D36 31 00 00    0845*       dl 0x000031 ; 11.250 08, 0.195
040D39 38 00 00    0846*       dl 0x000038 ; 12.656 09, 0.219
040D3C 3E 00 00    0847*       dl 0x00003E ; 14.063 0A, 0.243
040D3F 44 00 00    0848*       dl 0x000044 ; 15.469 0B, 0.267
040D42 4A 00 00    0849*       dl 0x00004A ; 16.875 0C, 0.290
040D45 50 00 00    0850*       dl 0x000050 ; 18.281 0D, 0.314
040D48 56 00 00    0851*       dl 0x000056 ; 19.688 0E, 0.337
040D4B 5C 00 00    0852*       dl 0x00005C ; 21.094 0F, 0.360
040D4E 61 00 00    0853*       dl 0x000061 ; 22.500 10, 0.383
040D51 67 00 00    0854*       dl 0x000067 ; 23.906 11, 0.405
040D54 6D 00 00    0855*       dl 0x00006D ; 25.313 12, 0.428
040D57 73 00 00    0856*       dl 0x000073 ; 26.719 13, 0.450
040D5A 78 00 00    0857*       dl 0x000078 ; 28.125 14, 0.471
040D5D 7E 00 00    0858*       dl 0x00007E ; 29.531 15, 0.493
040D60 83 00 00    0859*       dl 0x000083 ; 30.938 16, 0.514
040D63 88 00 00    0860*       dl 0x000088 ; 32.344 17, 0.535
040D66 8E 00 00    0861*       dl 0x00008E ; 33.750 18, 0.556
040D69 93 00 00    0862*       dl 0x000093 ; 35.156 19, 0.576
040D6C 98 00 00    0863*       dl 0x000098 ; 36.563 1A, 0.596
040D6F 9D 00 00    0864*       dl 0x00009D ; 37.969 1B, 0.615
040D72 A2 00 00    0865*       dl 0x0000A2 ; 39.375 1C, 0.634
040D75 A7 00 00    0866*       dl 0x0000A7 ; 40.781 1D, 0.653
040D78 AB 00 00    0867*       dl 0x0000AB ; 42.188 1E, 0.672
040D7B B0 00 00    0868*       dl 0x0000B0 ; 43.594 1F, 0.690
040D7E B5 00 00    0869*       dl 0x0000B5 ; 45.000 20, 0.707
040D81 B9 00 00    0870*       dl 0x0000B9 ; 46.406 21, 0.724
040D84 BD 00 00    0871*       dl 0x0000BD ; 47.813 22, 0.741
040D87 C1 00 00    0872*       dl 0x0000C1 ; 49.219 23, 0.757
040D8A C5 00 00    0873*       dl 0x0000C5 ; 50.625 24, 0.773
040D8D C9 00 00    0874*       dl 0x0000C9 ; 52.031 25, 0.788
040D90 CD 00 00    0875*       dl 0x0000CD ; 53.438 26, 0.803
040D93 D1 00 00    0876*       dl 0x0000D1 ; 54.844 27, 0.818
040D96 D4 00 00    0877*       dl 0x0000D4 ; 56.250 28, 0.831
040D99 D8 00 00    0878*       dl 0x0000D8 ; 57.656 29, 0.845
040D9C DB 00 00    0879*       dl 0x0000DB ; 59.063 2A, 0.858
040D9F DE 00 00    0880*       dl 0x0000DE ; 60.469 2B, 0.870
040DA2 E1 00 00    0881*       dl 0x0000E1 ; 61.875 2C, 0.882
040DA5 E4 00 00    0882*       dl 0x0000E4 ; 63.281 2D, 0.893
040DA8 E7 00 00    0883*       dl 0x0000E7 ; 64.688 2E, 0.904
040DAB EA 00 00    0884*       dl 0x0000EA ; 66.094 2F, 0.914
040DAE EC 00 00    0885*       dl 0x0000EC ; 67.500 30, 0.924
040DB1 EE 00 00    0886*       dl 0x0000EE ; 68.906 31, 0.933
040DB4 F1 00 00    0887*       dl 0x0000F1 ; 70.313 32, 0.942
040DB7 F3 00 00    0888*       dl 0x0000F3 ; 71.719 33, 0.950
040DBA F4 00 00    0889*       dl 0x0000F4 ; 73.125 34, 0.957
040DBD F6 00 00    0890*       dl 0x0000F6 ; 74.531 35, 0.964
040DC0 F8 00 00    0891*       dl 0x0000F8 ; 75.938 36, 0.970
040DC3 F9 00 00    0892*       dl 0x0000F9 ; 77.344 37, 0.976
040DC6 FB 00 00    0893*       dl 0x0000FB ; 78.750 38, 0.981
040DC9 FC 00 00    0894*       dl 0x0000FC ; 80.156 39, 0.985
040DCC FD 00 00    0895*       dl 0x0000FD ; 81.563 3A, 0.989
040DCF FE 00 00    0896*       dl 0x0000FE ; 82.969 3B, 0.992
040DD2 FE 00 00    0897*       dl 0x0000FE ; 84.375 3C, 0.995
040DD5 FF 00 00    0898*       dl 0x0000FF ; 85.781 3D, 0.997
040DD8 FF 00 00    0899*       dl 0x0000FF ; 87.188 3E, 0.999
040DDB FF 00 00    0900*       dl 0x0000FF ; 88.594 3F, 1.000
040DDE 00 01 00    0901*       dl 0x000100 ; 90.000 40, 1.000
040DE1 FF 00 00    0902*       dl 0x0000FF ; 91.406 41, 1.000
040DE4 FF 00 00    0903*       dl 0x0000FF ; 92.813 42, 0.999
040DE7 FF 00 00    0904*       dl 0x0000FF ; 94.219 43, 0.997
040DEA FE 00 00    0905*       dl 0x0000FE ; 95.625 44, 0.995
040DED FE 00 00    0906*       dl 0x0000FE ; 97.031 45, 0.992
040DF0 FD 00 00    0907*       dl 0x0000FD ; 98.438 46, 0.989
040DF3 FC 00 00    0908*       dl 0x0000FC ; 99.844 47, 0.985
040DF6 FB 00 00    0909*       dl 0x0000FB ; 101.250 48, 0.981
040DF9 F9 00 00    0910*       dl 0x0000F9 ; 102.656 49, 0.976
040DFC F8 00 00    0911*       dl 0x0000F8 ; 104.063 4A, 0.970
040DFF F6 00 00    0912*       dl 0x0000F6 ; 105.469 4B, 0.964
040E02 F4 00 00    0913*       dl 0x0000F4 ; 106.875 4C, 0.957
040E05 F3 00 00    0914*       dl 0x0000F3 ; 108.281 4D, 0.950
040E08 F1 00 00    0915*       dl 0x0000F1 ; 109.688 4E, 0.942
040E0B EE 00 00    0916*       dl 0x0000EE ; 111.094 4F, 0.933
040E0E EC 00 00    0917*       dl 0x0000EC ; 112.500 50, 0.924
040E11 EA 00 00    0918*       dl 0x0000EA ; 113.906 51, 0.914
040E14 E7 00 00    0919*       dl 0x0000E7 ; 115.313 52, 0.904
040E17 E4 00 00    0920*       dl 0x0000E4 ; 116.719 53, 0.893
040E1A E1 00 00    0921*       dl 0x0000E1 ; 118.125 54, 0.882
040E1D DE 00 00    0922*       dl 0x0000DE ; 119.531 55, 0.870
040E20 DB 00 00    0923*       dl 0x0000DB ; 120.938 56, 0.858
040E23 D8 00 00    0924*       dl 0x0000D8 ; 122.344 57, 0.845
040E26 D4 00 00    0925*       dl 0x0000D4 ; 123.750 58, 0.831
040E29 D1 00 00    0926*       dl 0x0000D1 ; 125.156 59, 0.818
040E2C CD 00 00    0927*       dl 0x0000CD ; 126.563 5A, 0.803
040E2F C9 00 00    0928*       dl 0x0000C9 ; 127.969 5B, 0.788
040E32 C5 00 00    0929*       dl 0x0000C5 ; 129.375 5C, 0.773
040E35 C1 00 00    0930*       dl 0x0000C1 ; 130.781 5D, 0.757
040E38 BD 00 00    0931*       dl 0x0000BD ; 132.188 5E, 0.741
040E3B B9 00 00    0932*       dl 0x0000B9 ; 133.594 5F, 0.724
040E3E B5 00 00    0933*       dl 0x0000B5 ; 135.000 60, 0.707
040E41 B0 00 00    0934*       dl 0x0000B0 ; 136.406 61, 0.690
040E44 AB 00 00    0935*       dl 0x0000AB ; 137.813 62, 0.672
040E47 A7 00 00    0936*       dl 0x0000A7 ; 139.219 63, 0.653
040E4A A2 00 00    0937*       dl 0x0000A2 ; 140.625 64, 0.634
040E4D 9D 00 00    0938*       dl 0x00009D ; 142.031 65, 0.615
040E50 98 00 00    0939*       dl 0x000098 ; 143.438 66, 0.596
040E53 93 00 00    0940*       dl 0x000093 ; 144.844 67, 0.576
040E56 8E 00 00    0941*       dl 0x00008E ; 146.250 68, 0.556
040E59 88 00 00    0942*       dl 0x000088 ; 147.656 69, 0.535
040E5C 83 00 00    0943*       dl 0x000083 ; 149.063 6A, 0.514
040E5F 7E 00 00    0944*       dl 0x00007E ; 150.469 6B, 0.493
040E62 78 00 00    0945*       dl 0x000078 ; 151.875 6C, 0.471
040E65 73 00 00    0946*       dl 0x000073 ; 153.281 6D, 0.450
040E68 6D 00 00    0947*       dl 0x00006D ; 154.688 6E, 0.428
040E6B 67 00 00    0948*       dl 0x000067 ; 156.094 6F, 0.405
040E6E 61 00 00    0949*       dl 0x000061 ; 157.500 70, 0.383
040E71 5C 00 00    0950*       dl 0x00005C ; 158.906 71, 0.360
040E74 56 00 00    0951*       dl 0x000056 ; 160.313 72, 0.337
040E77 50 00 00    0952*       dl 0x000050 ; 161.719 73, 0.314
040E7A 4A 00 00    0953*       dl 0x00004A ; 163.125 74, 0.290
040E7D 44 00 00    0954*       dl 0x000044 ; 164.531 75, 0.267
040E80 3E 00 00    0955*       dl 0x00003E ; 165.938 76, 0.243
040E83 38 00 00    0956*       dl 0x000038 ; 167.344 77, 0.219
040E86 31 00 00    0957*       dl 0x000031 ; 168.750 78, 0.195
040E89 2B 00 00    0958*       dl 0x00002B ; 170.156 79, 0.171
040E8C 25 00 00    0959*       dl 0x000025 ; 171.563 7A, 0.147
040E8F 1F 00 00    0960*       dl 0x00001F ; 172.969 7B, 0.122
040E92 19 00 00    0961*       dl 0x000019 ; 174.375 7C, 0.098
040E95 12 00 00    0962*       dl 0x000012 ; 175.781 7D, 0.074
040E98 0C 00 00    0963*       dl 0x00000C ; 177.188 7E, 0.049
040E9B 06 00 00    0964*       dl 0x000006 ; 178.594 7F, 0.025
040E9E 00 00 00    0965*       dl 0x000000 ; 180.000 80, 0.000
040EA1 FA FF FF    0966*       dl 0xFFFFFA ; 181.406 81, -0.025
040EA4 F4 FF FF    0967*       dl 0xFFFFF4 ; 182.813 82, -0.049
040EA7 EE FF FF    0968*       dl 0xFFFFEE ; 184.219 83, -0.074
040EAA E7 FF FF    0969*       dl 0xFFFFE7 ; 185.625 84, -0.098
040EAD E1 FF FF    0970*       dl 0xFFFFE1 ; 187.031 85, -0.122
040EB0 DB FF FF    0971*       dl 0xFFFFDB ; 188.438 86, -0.147
040EB3 D5 FF FF    0972*       dl 0xFFFFD5 ; 189.844 87, -0.171
040EB6 CF FF FF    0973*       dl 0xFFFFCF ; 191.250 88, -0.195
040EB9 C8 FF FF    0974*       dl 0xFFFFC8 ; 192.656 89, -0.219
040EBC C2 FF FF    0975*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040EBF BC FF FF    0976*       dl 0xFFFFBC ; 195.469 8B, -0.267
040EC2 B6 FF FF    0977*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040EC5 B0 FF FF    0978*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040EC8 AA FF FF    0979*       dl 0xFFFFAA ; 199.688 8E, -0.337
040ECB A4 FF FF    0980*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040ECE 9F FF FF    0981*       dl 0xFFFF9F ; 202.500 90, -0.383
040ED1 99 FF FF    0982*       dl 0xFFFF99 ; 203.906 91, -0.405
040ED4 93 FF FF    0983*       dl 0xFFFF93 ; 205.313 92, -0.428
040ED7 8D FF FF    0984*       dl 0xFFFF8D ; 206.719 93, -0.450
040EDA 88 FF FF    0985*       dl 0xFFFF88 ; 208.125 94, -0.471
040EDD 82 FF FF    0986*       dl 0xFFFF82 ; 209.531 95, -0.493
040EE0 7D FF FF    0987*       dl 0xFFFF7D ; 210.938 96, -0.514
040EE3 78 FF FF    0988*       dl 0xFFFF78 ; 212.344 97, -0.535
040EE6 72 FF FF    0989*       dl 0xFFFF72 ; 213.750 98, -0.556
040EE9 6D FF FF    0990*       dl 0xFFFF6D ; 215.156 99, -0.576
040EEC 68 FF FF    0991*       dl 0xFFFF68 ; 216.563 9A, -0.596
040EEF 63 FF FF    0992*       dl 0xFFFF63 ; 217.969 9B, -0.615
040EF2 5E FF FF    0993*       dl 0xFFFF5E ; 219.375 9C, -0.634
040EF5 59 FF FF    0994*       dl 0xFFFF59 ; 220.781 9D, -0.653
040EF8 55 FF FF    0995*       dl 0xFFFF55 ; 222.188 9E, -0.672
040EFB 50 FF FF    0996*       dl 0xFFFF50 ; 223.594 9F, -0.690
040EFE 4B FF FF    0997*       dl 0xFFFF4B ; 225.000 A0, -0.707
040F01 47 FF FF    0998*       dl 0xFFFF47 ; 226.406 A1, -0.724
040F04 43 FF FF    0999*       dl 0xFFFF43 ; 227.813 A2, -0.741
040F07 3F FF FF    1000*       dl 0xFFFF3F ; 229.219 A3, -0.757
040F0A 3B FF FF    1001*       dl 0xFFFF3B ; 230.625 A4, -0.773
040F0D 37 FF FF    1002*       dl 0xFFFF37 ; 232.031 A5, -0.788
040F10 33 FF FF    1003*       dl 0xFFFF33 ; 233.438 A6, -0.803
040F13 2F FF FF    1004*       dl 0xFFFF2F ; 234.844 A7, -0.818
040F16 2C FF FF    1005*       dl 0xFFFF2C ; 236.250 A8, -0.831
040F19 28 FF FF    1006*       dl 0xFFFF28 ; 237.656 A9, -0.845
040F1C 25 FF FF    1007*       dl 0xFFFF25 ; 239.063 AA, -0.858
040F1F 22 FF FF    1008*       dl 0xFFFF22 ; 240.469 AB, -0.870
040F22 1F FF FF    1009*       dl 0xFFFF1F ; 241.875 AC, -0.882
040F25 1C FF FF    1010*       dl 0xFFFF1C ; 243.281 AD, -0.893
040F28 19 FF FF    1011*       dl 0xFFFF19 ; 244.688 AE, -0.904
040F2B 16 FF FF    1012*       dl 0xFFFF16 ; 246.094 AF, -0.914
040F2E 14 FF FF    1013*       dl 0xFFFF14 ; 247.500 B0, -0.924
040F31 12 FF FF    1014*       dl 0xFFFF12 ; 248.906 B1, -0.933
040F34 0F FF FF    1015*       dl 0xFFFF0F ; 250.313 B2, -0.942
040F37 0D FF FF    1016*       dl 0xFFFF0D ; 251.719 B3, -0.950
040F3A 0C FF FF    1017*       dl 0xFFFF0C ; 253.125 B4, -0.957
040F3D 0A FF FF    1018*       dl 0xFFFF0A ; 254.531 B5, -0.964
040F40 08 FF FF    1019*       dl 0xFFFF08 ; 255.938 B6, -0.970
040F43 07 FF FF    1020*       dl 0xFFFF07 ; 257.344 B7, -0.976
040F46 05 FF FF    1021*       dl 0xFFFF05 ; 258.750 B8, -0.981
040F49 04 FF FF    1022*       dl 0xFFFF04 ; 260.156 B9, -0.985
040F4C 03 FF FF    1023*       dl 0xFFFF03 ; 261.563 BA, -0.989
040F4F 02 FF FF    1024*       dl 0xFFFF02 ; 262.969 BB, -0.992
040F52 02 FF FF    1025*       dl 0xFFFF02 ; 264.375 BC, -0.995
040F55 01 FF FF    1026*       dl 0xFFFF01 ; 265.781 BD, -0.997
040F58 01 FF FF    1027*       dl 0xFFFF01 ; 267.188 BE, -0.999
040F5B 01 FF FF    1028*       dl 0xFFFF01 ; 268.594 BF, -1.000
040F5E 00 FF FF    1029*       dl 0xFFFF00 ; 270.000 C0, -1.000
040F61 01 FF FF    1030*       dl 0xFFFF01 ; 271.406 C1, -1.000
040F64 01 FF FF    1031*       dl 0xFFFF01 ; 272.813 C2, -0.999
040F67 01 FF FF    1032*       dl 0xFFFF01 ; 274.219 C3, -0.997
040F6A 02 FF FF    1033*       dl 0xFFFF02 ; 275.625 C4, -0.995
040F6D 02 FF FF    1034*       dl 0xFFFF02 ; 277.031 C5, -0.992
040F70 03 FF FF    1035*       dl 0xFFFF03 ; 278.438 C6, -0.989
040F73 04 FF FF    1036*       dl 0xFFFF04 ; 279.844 C7, -0.985
040F76 05 FF FF    1037*       dl 0xFFFF05 ; 281.250 C8, -0.981
040F79 07 FF FF    1038*       dl 0xFFFF07 ; 282.656 C9, -0.976
040F7C 08 FF FF    1039*       dl 0xFFFF08 ; 284.063 CA, -0.970
040F7F 0A FF FF    1040*       dl 0xFFFF0A ; 285.469 CB, -0.964
040F82 0C FF FF    1041*       dl 0xFFFF0C ; 286.875 CC, -0.957
040F85 0D FF FF    1042*       dl 0xFFFF0D ; 288.281 CD, -0.950
040F88 0F FF FF    1043*       dl 0xFFFF0F ; 289.688 CE, -0.942
040F8B 12 FF FF    1044*       dl 0xFFFF12 ; 291.094 CF, -0.933
040F8E 14 FF FF    1045*       dl 0xFFFF14 ; 292.500 D0, -0.924
040F91 16 FF FF    1046*       dl 0xFFFF16 ; 293.906 D1, -0.914
040F94 19 FF FF    1047*       dl 0xFFFF19 ; 295.313 D2, -0.904
040F97 1C FF FF    1048*       dl 0xFFFF1C ; 296.719 D3, -0.893
040F9A 1F FF FF    1049*       dl 0xFFFF1F ; 298.125 D4, -0.882
040F9D 22 FF FF    1050*       dl 0xFFFF22 ; 299.531 D5, -0.870
040FA0 25 FF FF    1051*       dl 0xFFFF25 ; 300.938 D6, -0.858
040FA3 28 FF FF    1052*       dl 0xFFFF28 ; 302.344 D7, -0.845
040FA6 2C FF FF    1053*       dl 0xFFFF2C ; 303.750 D8, -0.831
040FA9 2F FF FF    1054*       dl 0xFFFF2F ; 305.156 D9, -0.818
040FAC 33 FF FF    1055*       dl 0xFFFF33 ; 306.563 DA, -0.803
040FAF 37 FF FF    1056*       dl 0xFFFF37 ; 307.969 DB, -0.788
040FB2 3B FF FF    1057*       dl 0xFFFF3B ; 309.375 DC, -0.773
040FB5 3F FF FF    1058*       dl 0xFFFF3F ; 310.781 DD, -0.757
040FB8 43 FF FF    1059*       dl 0xFFFF43 ; 312.188 DE, -0.741
040FBB 47 FF FF    1060*       dl 0xFFFF47 ; 313.594 DF, -0.724
040FBE 4B FF FF    1061*       dl 0xFFFF4B ; 315.000 E0, -0.707
040FC1 50 FF FF    1062*       dl 0xFFFF50 ; 316.406 E1, -0.690
040FC4 55 FF FF    1063*       dl 0xFFFF55 ; 317.813 E2, -0.672
040FC7 59 FF FF    1064*       dl 0xFFFF59 ; 319.219 E3, -0.653
040FCA 5E FF FF    1065*       dl 0xFFFF5E ; 320.625 E4, -0.634
040FCD 63 FF FF    1066*       dl 0xFFFF63 ; 322.031 E5, -0.615
040FD0 68 FF FF    1067*       dl 0xFFFF68 ; 323.438 E6, -0.596
040FD3 6D FF FF    1068*       dl 0xFFFF6D ; 324.844 E7, -0.576
040FD6 72 FF FF    1069*       dl 0xFFFF72 ; 326.250 E8, -0.556
040FD9 78 FF FF    1070*       dl 0xFFFF78 ; 327.656 E9, -0.535
040FDC 7D FF FF    1071*       dl 0xFFFF7D ; 329.063 EA, -0.514
040FDF 82 FF FF    1072*       dl 0xFFFF82 ; 330.469 EB, -0.493
040FE2 88 FF FF    1073*       dl 0xFFFF88 ; 331.875 EC, -0.471
040FE5 8D FF FF    1074*       dl 0xFFFF8D ; 333.281 ED, -0.450
040FE8 93 FF FF    1075*       dl 0xFFFF93 ; 334.688 EE, -0.428
040FEB 99 FF FF    1076*       dl 0xFFFF99 ; 336.094 EF, -0.405
040FEE 9F FF FF    1077*       dl 0xFFFF9F ; 337.500 F0, -0.383
040FF1 A4 FF FF    1078*       dl 0xFFFFA4 ; 338.906 F1, -0.360
040FF4 AA FF FF    1079*       dl 0xFFFFAA ; 340.313 F2, -0.337
040FF7 B0 FF FF    1080*       dl 0xFFFFB0 ; 341.719 F3, -0.314
040FFA B6 FF FF    1081*       dl 0xFFFFB6 ; 343.125 F4, -0.290
040FFD BC FF FF    1082*       dl 0xFFFFBC ; 344.531 F5, -0.267
041000 C2 FF FF    1083*       dl 0xFFFFC2 ; 345.938 F6, -0.243
041003 C8 FF FF    1084*       dl 0xFFFFC8 ; 347.344 F7, -0.219
041006 CF FF FF    1085*       dl 0xFFFFCF ; 348.750 F8, -0.195
041009 D5 FF FF    1086*       dl 0xFFFFD5 ; 350.156 F9, -0.171
04100C DB FF FF    1087*       dl 0xFFFFDB ; 351.563 FA, -0.147
04100F E1 FF FF    1088*       dl 0xFFFFE1 ; 352.969 FB, -0.122
041012 E7 FF FF    1089*       dl 0xFFFFE7 ; 354.375 FC, -0.098
041015 EE FF FF    1090*       dl 0xFFFFEE ; 355.781 FD, -0.074
041018 F4 FF FF    1091*       dl 0xFFFFF4 ; 357.188 FE, -0.049
04101B FA FF FF    1092*       dl 0xFFFFFA ; 358.594 FF, -0.025
04101E 00 00 00    1093*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
041021             1094*   
041021             1095*   atan_lut_168:
041021 00 00 00    1096*       dl 0x000000 ; 000000, 0.000
041024 28 00 00    1097*       dl 0x000028 ; 000001, 0.224
041027 51 00 00    1098*       dl 0x000051 ; 000002, 0.448
04102A 7A 00 00    1099*       dl 0x00007A ; 000003, 0.671
04102D A2 00 00    1100*       dl 0x0000A2 ; 000004, 0.895
041030 CB 00 00    1101*       dl 0x0000CB ; 000005, 1.119
041033 F4 00 00    1102*       dl 0x0000F4 ; 000006, 1.343
041036 1D 01 00    1103*       dl 0x00011D ; 000007, 1.566
041039 45 01 00    1104*       dl 0x000145 ; 000008, 1.790
04103C 6E 01 00    1105*       dl 0x00016E ; 000009, 2.013
04103F 97 01 00    1106*       dl 0x000197 ; 00000A, 2.237
041042 BF 01 00    1107*       dl 0x0001BF ; 00000B, 2.460
041045 E8 01 00    1108*       dl 0x0001E8 ; 00000C, 2.684
041048 11 02 00    1109*       dl 0x000211 ; 00000D, 2.907
04104B 39 02 00    1110*       dl 0x000239 ; 00000E, 3.130
04104E 62 02 00    1111*       dl 0x000262 ; 00000F, 3.353
041051 8B 02 00    1112*       dl 0x00028B ; 000010, 3.576
041054 B3 02 00    1113*       dl 0x0002B3 ; 000011, 3.799
041057 DC 02 00    1114*       dl 0x0002DC ; 000012, 4.022
04105A 04 03 00    1115*       dl 0x000304 ; 000013, 4.245
04105D 2D 03 00    1116*       dl 0x00032D ; 000014, 4.467
041060 55 03 00    1117*       dl 0x000355 ; 000015, 4.690
041063 7E 03 00    1118*       dl 0x00037E ; 000016, 4.912
041066 A6 03 00    1119*       dl 0x0003A6 ; 000017, 5.134
041069 CE 03 00    1120*       dl 0x0003CE ; 000018, 5.356
04106C F7 03 00    1121*       dl 0x0003F7 ; 000019, 5.578
04106F 1F 04 00    1122*       dl 0x00041F ; 00001A, 5.799
041072 48 04 00    1123*       dl 0x000448 ; 00001B, 6.021
041075 70 04 00    1124*       dl 0x000470 ; 00001C, 6.242
041078 98 04 00    1125*       dl 0x000498 ; 00001D, 6.463
04107B C0 04 00    1126*       dl 0x0004C0 ; 00001E, 6.684
04107E E8 04 00    1127*       dl 0x0004E8 ; 00001F, 6.905
041081 11 05 00    1128*       dl 0x000511 ; 000020, 7.125
041084 39 05 00    1129*       dl 0x000539 ; 000021, 7.345
041087 61 05 00    1130*       dl 0x000561 ; 000022, 7.565
04108A 89 05 00    1131*       dl 0x000589 ; 000023, 7.785
04108D B1 05 00    1132*       dl 0x0005B1 ; 000024, 8.005
041090 D9 05 00    1133*       dl 0x0005D9 ; 000025, 8.224
041093 01 06 00    1134*       dl 0x000601 ; 000026, 8.443
041096 28 06 00    1135*       dl 0x000628 ; 000027, 8.662
041099 50 06 00    1136*       dl 0x000650 ; 000028, 8.881
04109C 78 06 00    1137*       dl 0x000678 ; 000029, 9.099
04109F A0 06 00    1138*       dl 0x0006A0 ; 00002A, 9.317
0410A2 C7 06 00    1139*       dl 0x0006C7 ; 00002B, 9.535
0410A5 EF 06 00    1140*       dl 0x0006EF ; 00002C, 9.752
0410A8 16 07 00    1141*       dl 0x000716 ; 00002D, 9.970
0410AB 3E 07 00    1142*       dl 0x00073E ; 00002E, 10.187
0410AE 65 07 00    1143*       dl 0x000765 ; 00002F, 10.403
0410B1 8D 07 00    1144*       dl 0x00078D ; 000030, 10.620
0410B4 B4 07 00    1145*       dl 0x0007B4 ; 000031, 10.836
0410B7 DB 07 00    1146*       dl 0x0007DB ; 000032, 11.051
0410BA 03 08 00    1147*       dl 0x000803 ; 000033, 11.267
0410BD 2A 08 00    1148*       dl 0x00082A ; 000034, 11.482
0410C0 51 08 00    1149*       dl 0x000851 ; 000035, 11.697
0410C3 78 08 00    1150*       dl 0x000878 ; 000036, 11.911
0410C6 9F 08 00    1151*       dl 0x00089F ; 000037, 12.125
0410C9 C6 08 00    1152*       dl 0x0008C6 ; 000038, 12.339
0410CC ED 08 00    1153*       dl 0x0008ED ; 000039, 12.553
0410CF 13 09 00    1154*       dl 0x000913 ; 00003A, 12.766
0410D2 3A 09 00    1155*       dl 0x00093A ; 00003B, 12.978
0410D5 61 09 00    1156*       dl 0x000961 ; 00003C, 13.191
0410D8 87 09 00    1157*       dl 0x000987 ; 00003D, 13.403
0410DB AE 09 00    1158*       dl 0x0009AE ; 00003E, 13.614
0410DE D4 09 00    1159*       dl 0x0009D4 ; 00003F, 13.825
0410E1 FB 09 00    1160*       dl 0x0009FB ; 000040, 14.036
0410E4 21 0A 00    1161*       dl 0x000A21 ; 000041, 14.247
0410E7 47 0A 00    1162*       dl 0x000A47 ; 000042, 14.457
0410EA 6D 0A 00    1163*       dl 0x000A6D ; 000043, 14.666
0410ED 94 0A 00    1164*       dl 0x000A94 ; 000044, 14.876
0410F0 BA 0A 00    1165*       dl 0x000ABA ; 000045, 15.085
0410F3 E0 0A 00    1166*       dl 0x000AE0 ; 000046, 15.293
0410F6 05 0B 00    1167*       dl 0x000B05 ; 000047, 15.501
0410F9 2B 0B 00    1168*       dl 0x000B2B ; 000048, 15.709
0410FC 51 0B 00    1169*       dl 0x000B51 ; 000049, 15.916
0410FF 77 0B 00    1170*       dl 0x000B77 ; 00004A, 16.123
041102 9C 0B 00    1171*       dl 0x000B9C ; 00004B, 16.329
041105 C2 0B 00    1172*       dl 0x000BC2 ; 00004C, 16.535
041108 E7 0B 00    1173*       dl 0x000BE7 ; 00004D, 16.740
04110B 0C 0C 00    1174*       dl 0x000C0C ; 00004E, 16.945
04110E 32 0C 00    1175*       dl 0x000C32 ; 00004F, 17.150
041111 57 0C 00    1176*       dl 0x000C57 ; 000050, 17.354
041114 7C 0C 00    1177*       dl 0x000C7C ; 000051, 17.558
041117 A1 0C 00    1178*       dl 0x000CA1 ; 000052, 17.761
04111A C6 0C 00    1179*       dl 0x000CC6 ; 000053, 17.964
04111D EB 0C 00    1180*       dl 0x000CEB ; 000054, 18.166
041120 0F 0D 00    1181*       dl 0x000D0F ; 000055, 18.368
041123 34 0D 00    1182*       dl 0x000D34 ; 000056, 18.569
041126 58 0D 00    1183*       dl 0x000D58 ; 000057, 18.770
041129 7D 0D 00    1184*       dl 0x000D7D ; 000058, 18.970
04112C A1 0D 00    1185*       dl 0x000DA1 ; 000059, 19.170
04112F C6 0D 00    1186*       dl 0x000DC6 ; 00005A, 19.370
041132 EA 0D 00    1187*       dl 0x000DEA ; 00005B, 19.569
041135 0E 0E 00    1188*       dl 0x000E0E ; 00005C, 19.767
041138 32 0E 00    1189*       dl 0x000E32 ; 00005D, 19.965
04113B 56 0E 00    1190*       dl 0x000E56 ; 00005E, 20.163
04113E 7A 0E 00    1191*       dl 0x000E7A ; 00005F, 20.360
041141 9E 0E 00    1192*       dl 0x000E9E ; 000060, 20.556
041144 C1 0E 00    1193*       dl 0x000EC1 ; 000061, 20.752
041147 E5 0E 00    1194*       dl 0x000EE5 ; 000062, 20.947
04114A 08 0F 00    1195*       dl 0x000F08 ; 000063, 21.142
04114D 2C 0F 00    1196*       dl 0x000F2C ; 000064, 21.337
041150 4F 0F 00    1197*       dl 0x000F4F ; 000065, 21.531
041153 72 0F 00    1198*       dl 0x000F72 ; 000066, 21.724
041156 95 0F 00    1199*       dl 0x000F95 ; 000067, 21.917
041159 B8 0F 00    1200*       dl 0x000FB8 ; 000068, 22.109
04115C DB 0F 00    1201*       dl 0x000FDB ; 000069, 22.301
04115F FE 0F 00    1202*       dl 0x000FFE ; 00006A, 22.493
041162 21 10 00    1203*       dl 0x001021 ; 00006B, 22.683
041165 44 10 00    1204*       dl 0x001044 ; 00006C, 22.874
041168 66 10 00    1205*       dl 0x001066 ; 00006D, 23.063
04116B 89 10 00    1206*       dl 0x001089 ; 00006E, 23.253
04116E AB 10 00    1207*       dl 0x0010AB ; 00006F, 23.441
041171 CD 10 00    1208*       dl 0x0010CD ; 000070, 23.629
041174 EF 10 00    1209*       dl 0x0010EF ; 000071, 23.817
041177 11 11 00    1210*       dl 0x001111 ; 000072, 24.004
04117A 33 11 00    1211*       dl 0x001133 ; 000073, 24.191
04117D 55 11 00    1212*       dl 0x001155 ; 000074, 24.376
041180 77 11 00    1213*       dl 0x001177 ; 000075, 24.562
041183 99 11 00    1214*       dl 0x001199 ; 000076, 24.747
041186 BA 11 00    1215*       dl 0x0011BA ; 000077, 24.931
041189 DC 11 00    1216*       dl 0x0011DC ; 000078, 25.115
04118C FD 11 00    1217*       dl 0x0011FD ; 000079, 25.298
04118F 1E 12 00    1218*       dl 0x00121E ; 00007A, 25.481
041192 3F 12 00    1219*       dl 0x00123F ; 00007B, 25.663
041195 60 12 00    1220*       dl 0x001260 ; 00007C, 25.844
041198 81 12 00    1221*       dl 0x001281 ; 00007D, 26.025
04119B A2 12 00    1222*       dl 0x0012A2 ; 00007E, 26.206
04119E C3 12 00    1223*       dl 0x0012C3 ; 00007F, 26.386
0411A1 E4 12 00    1224*       dl 0x0012E4 ; 000080, 26.565
0411A4 04 13 00    1225*       dl 0x001304 ; 000081, 26.744
0411A7 25 13 00    1226*       dl 0x001325 ; 000082, 26.922
0411AA 45 13 00    1227*       dl 0x001345 ; 000083, 27.100
0411AD 65 13 00    1228*       dl 0x001365 ; 000084, 27.277
0411B0 85 13 00    1229*       dl 0x001385 ; 000085, 27.453
0411B3 A5 13 00    1230*       dl 0x0013A5 ; 000086, 27.629
0411B6 C5 13 00    1231*       dl 0x0013C5 ; 000087, 27.805
0411B9 E5 13 00    1232*       dl 0x0013E5 ; 000088, 27.979
0411BC 05 14 00    1233*       dl 0x001405 ; 000089, 28.154
0411BF 24 14 00    1234*       dl 0x001424 ; 00008A, 28.327
0411C2 44 14 00    1235*       dl 0x001444 ; 00008B, 28.501
0411C5 63 14 00    1236*       dl 0x001463 ; 00008C, 28.673
0411C8 83 14 00    1237*       dl 0x001483 ; 00008D, 28.845
0411CB A2 14 00    1238*       dl 0x0014A2 ; 00008E, 29.017
0411CE C1 14 00    1239*       dl 0x0014C1 ; 00008F, 29.187
0411D1 E0 14 00    1240*       dl 0x0014E0 ; 000090, 29.358
0411D4 FF 14 00    1241*       dl 0x0014FF ; 000091, 29.527
0411D7 1E 15 00    1242*       dl 0x00151E ; 000092, 29.697
0411DA 3C 15 00    1243*       dl 0x00153C ; 000093, 29.865
0411DD 5B 15 00    1244*       dl 0x00155B ; 000094, 30.033
0411E0 79 15 00    1245*       dl 0x001579 ; 000095, 30.201
0411E3 98 15 00    1246*       dl 0x001598 ; 000096, 30.368
0411E6 B6 15 00    1247*       dl 0x0015B6 ; 000097, 30.534
0411E9 D4 15 00    1248*       dl 0x0015D4 ; 000098, 30.700
0411EC F2 15 00    1249*       dl 0x0015F2 ; 000099, 30.865
0411EF 10 16 00    1250*       dl 0x001610 ; 00009A, 31.030
0411F2 2E 16 00    1251*       dl 0x00162E ; 00009B, 31.194
0411F5 4C 16 00    1252*       dl 0x00164C ; 00009C, 31.357
0411F8 6A 16 00    1253*       dl 0x00166A ; 00009D, 31.520
0411FB 87 16 00    1254*       dl 0x001687 ; 00009E, 31.682
0411FE A5 16 00    1255*       dl 0x0016A5 ; 00009F, 31.844
041201 C2 16 00    1256*       dl 0x0016C2 ; 0000A0, 32.005
041204 DF 16 00    1257*       dl 0x0016DF ; 0000A1, 32.166
041207 FC 16 00    1258*       dl 0x0016FC ; 0000A2, 32.326
04120A 19 17 00    1259*       dl 0x001719 ; 0000A3, 32.486
04120D 36 17 00    1260*       dl 0x001736 ; 0000A4, 32.645
041210 53 17 00    1261*       dl 0x001753 ; 0000A5, 32.803
041213 70 17 00    1262*       dl 0x001770 ; 0000A6, 32.961
041216 8C 17 00    1263*       dl 0x00178C ; 0000A7, 33.118
041219 A9 17 00    1264*       dl 0x0017A9 ; 0000A8, 33.275
04121C C5 17 00    1265*       dl 0x0017C5 ; 0000A9, 33.431
04121F E2 17 00    1266*       dl 0x0017E2 ; 0000AA, 33.587
041222 FE 17 00    1267*       dl 0x0017FE ; 0000AB, 33.742
041225 1A 18 00    1268*       dl 0x00181A ; 0000AC, 33.896
041228 36 18 00    1269*       dl 0x001836 ; 0000AD, 34.050
04122B 52 18 00    1270*       dl 0x001852 ; 0000AE, 34.203
04122E 6E 18 00    1271*       dl 0x00186E ; 0000AF, 34.356
041231 8A 18 00    1272*       dl 0x00188A ; 0000B0, 34.509
041234 A5 18 00    1273*       dl 0x0018A5 ; 0000B1, 34.660
041237 C1 18 00    1274*       dl 0x0018C1 ; 0000B2, 34.811
04123A DC 18 00    1275*       dl 0x0018DC ; 0000B3, 34.962
04123D F7 18 00    1276*       dl 0x0018F7 ; 0000B4, 35.112
041240 13 19 00    1277*       dl 0x001913 ; 0000B5, 35.262
041243 2E 19 00    1278*       dl 0x00192E ; 0000B6, 35.410
041246 49 19 00    1279*       dl 0x001949 ; 0000B7, 35.559
041249 64 19 00    1280*       dl 0x001964 ; 0000B8, 35.707
04124C 7F 19 00    1281*       dl 0x00197F ; 0000B9, 35.854
04124F 99 19 00    1282*       dl 0x001999 ; 0000BA, 36.001
041252 B4 19 00    1283*       dl 0x0019B4 ; 0000BB, 36.147
041255 CE 19 00    1284*       dl 0x0019CE ; 0000BC, 36.293
041258 E9 19 00    1285*       dl 0x0019E9 ; 0000BD, 36.438
04125B 03 1A 00    1286*       dl 0x001A03 ; 0000BE, 36.582
04125E 1D 1A 00    1287*       dl 0x001A1D ; 0000BF, 36.726
041261 37 1A 00    1288*       dl 0x001A37 ; 0000C0, 36.870
041264 51 1A 00    1289*       dl 0x001A51 ; 0000C1, 37.013
041267 6B 1A 00    1290*       dl 0x001A6B ; 0000C2, 37.155
04126A 85 1A 00    1291*       dl 0x001A85 ; 0000C3, 37.297
04126D 9F 1A 00    1292*       dl 0x001A9F ; 0000C4, 37.439
041270 B9 1A 00    1293*       dl 0x001AB9 ; 0000C5, 37.579
041273 D2 1A 00    1294*       dl 0x001AD2 ; 0000C6, 37.720
041276 EC 1A 00    1295*       dl 0x001AEC ; 0000C7, 37.859
041279 05 1B 00    1296*       dl 0x001B05 ; 0000C8, 37.999
04127C 1E 1B 00    1297*       dl 0x001B1E ; 0000C9, 38.137
04127F 37 1B 00    1298*       dl 0x001B37 ; 0000CA, 38.276
041282 50 1B 00    1299*       dl 0x001B50 ; 0000CB, 38.413
041285 69 1B 00    1300*       dl 0x001B69 ; 0000CC, 38.550
041288 82 1B 00    1301*       dl 0x001B82 ; 0000CD, 38.687
04128B 9B 1B 00    1302*       dl 0x001B9B ; 0000CE, 38.823
04128E B4 1B 00    1303*       dl 0x001BB4 ; 0000CF, 38.959
041291 CC 1B 00    1304*       dl 0x001BCC ; 0000D0, 39.094
041294 E5 1B 00    1305*       dl 0x001BE5 ; 0000D1, 39.228
041297 FD 1B 00    1306*       dl 0x001BFD ; 0000D2, 39.362
04129A 16 1C 00    1307*       dl 0x001C16 ; 0000D3, 39.496
04129D 2E 1C 00    1308*       dl 0x001C2E ; 0000D4, 39.629
0412A0 46 1C 00    1309*       dl 0x001C46 ; 0000D5, 39.762
0412A3 5E 1C 00    1310*       dl 0x001C5E ; 0000D6, 39.894
0412A6 76 1C 00    1311*       dl 0x001C76 ; 0000D7, 40.025
0412A9 8E 1C 00    1312*       dl 0x001C8E ; 0000D8, 40.156
0412AC A5 1C 00    1313*       dl 0x001CA5 ; 0000D9, 40.286
0412AF BD 1C 00    1314*       dl 0x001CBD ; 0000DA, 40.416
0412B2 D5 1C 00    1315*       dl 0x001CD5 ; 0000DB, 40.546
0412B5 EC 1C 00    1316*       dl 0x001CEC ; 0000DC, 40.675
0412B8 04 1D 00    1317*       dl 0x001D04 ; 0000DD, 40.803
0412BB 1B 1D 00    1318*       dl 0x001D1B ; 0000DE, 40.931
0412BE 32 1D 00    1319*       dl 0x001D32 ; 0000DF, 41.059
0412C1 49 1D 00    1320*       dl 0x001D49 ; 0000E0, 41.186
0412C4 60 1D 00    1321*       dl 0x001D60 ; 0000E1, 41.312
0412C7 77 1D 00    1322*       dl 0x001D77 ; 0000E2, 41.438
0412CA 8E 1D 00    1323*       dl 0x001D8E ; 0000E3, 41.564
0412CD A5 1D 00    1324*       dl 0x001DA5 ; 0000E4, 41.689
0412D0 BB 1D 00    1325*       dl 0x001DBB ; 0000E5, 41.814
0412D3 D2 1D 00    1326*       dl 0x001DD2 ; 0000E6, 41.938
0412D6 E9 1D 00    1327*       dl 0x001DE9 ; 0000E7, 42.061
0412D9 FF 1D 00    1328*       dl 0x001DFF ; 0000E8, 42.184
0412DC 15 1E 00    1329*       dl 0x001E15 ; 0000E9, 42.307
0412DF 2C 1E 00    1330*       dl 0x001E2C ; 0000EA, 42.429
0412E2 42 1E 00    1331*       dl 0x001E42 ; 0000EB, 42.551
0412E5 58 1E 00    1332*       dl 0x001E58 ; 0000EC, 42.672
0412E8 6E 1E 00    1333*       dl 0x001E6E ; 0000ED, 42.793
0412EB 84 1E 00    1334*       dl 0x001E84 ; 0000EE, 42.913
0412EE 99 1E 00    1335*       dl 0x001E99 ; 0000EF, 43.033
0412F1 AF 1E 00    1336*       dl 0x001EAF ; 0000F0, 43.152
0412F4 C5 1E 00    1337*       dl 0x001EC5 ; 0000F1, 43.271
0412F7 DA 1E 00    1338*       dl 0x001EDA ; 0000F2, 43.390
0412FA F0 1E 00    1339*       dl 0x001EF0 ; 0000F3, 43.508
0412FD 05 1F 00    1340*       dl 0x001F05 ; 0000F4, 43.625
041300 1B 1F 00    1341*       dl 0x001F1B ; 0000F5, 43.742
041303 30 1F 00    1342*       dl 0x001F30 ; 0000F6, 43.859
041306 45 1F 00    1343*       dl 0x001F45 ; 0000F7, 43.975
041309 5A 1F 00    1344*       dl 0x001F5A ; 0000F8, 44.091
04130C 6F 1F 00    1345*       dl 0x001F6F ; 0000F9, 44.206
04130F 84 1F 00    1346*       dl 0x001F84 ; 0000FA, 44.321
041312 99 1F 00    1347*       dl 0x001F99 ; 0000FB, 44.435
041315 AD 1F 00    1348*       dl 0x001FAD ; 0000FC, 44.549
041318 C2 1F 00    1349*       dl 0x001FC2 ; 0000FD, 44.662
04131B D7 1F 00    1350*       dl 0x001FD7 ; 0000FE, 44.775
04131E EB 1F 00    1351*       dl 0x001FEB ; 0000FF, 44.888
041321 00 20 00    1352*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
041324             0034        include "fonts.inc"
041324 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
041400             0002*   
041400             0003*   fonts_load:
041400 DD 21 00 24 0004*       ld ix,font_list ; pointer to font list lookup
       04          
041405 06 12       0005*       ld b,num_fonts ; loop counter
041407             0006*   
041407             0007*   @load_loop:
041407 C5          0008*       push bc ; save loop counter
041408             0009*   
041408             0010*   ; load font into a buffer
041408 DD 27 06    0011*       ld hl,(ix+font_list_bufferId)
04140B DD 31 09    0012*       ld iy,(ix+font_list_filename)
04140E CD 78 1A 04 0013*       call vdu_load_buffer_from_file
041412             0014*   
041412             0015*   ; create font from buffer
041412 DD 27 06    0016*       ld hl,(ix+font_list_bufferId)
041415 DD 5E 00    0017*       ld e,(ix+font_list_width)
041418 DD 56 03    0018*       ld d,(ix+font_list_height)
04141B 3E 00       0019*       ld a,0 ; flags
04141D CD 1A 1C 04 0020*       call vdu_font_create
041421             0021*   
041421             0022*   ; select font
041421 DD 27 06    0023*       ld hl,(ix+font_list_bufferId)
041424 3E 01       0024*       ld a,1 ; flags
041426 CD 00 1C 04 0025*       call vdu_font_select
04142A             0026*   
04142A             0027*   ; ; debug print filename
04142A             0028*   ;     call printNewLine
04142A             0029*   ;     ld hl,(ix+font_list_filename)
04142A             0030*   ;     call printString
04142A             0031*   
04142A             0032*   ; advance font_list pointer to next record
04142A ED 32 0C    0033*       lea ix,ix+font_list_record_size
04142D             0034*   
04142D             0035*   ; restore loop counter
04142D C1          0036*       pop bc
04142E 10 D7       0037*       djnz @load_loop
041430             0038*   
041430             0039*   ; all done
041430 C9          0040*       ret
041431             0035        include "images.inc"
041431 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041500             0002*   
041500             0003*   image_type: equ 0
041500             0004*   image_width: equ image_type+3
041500             0005*   image_height: equ image_width+3
041500             0006*   image_filesize: equ image_height+3
041500             0007*   image_filename: equ image_filesize+3
041500             0008*   image_bufferId: equ image_filename+3
041500             0009*   image_record_size: equ image_bufferId+3
041500             0010*   
041500 00 00 00    0011*   cur_image_list: dl 0
041503 00 00 00    0012*   cur_filename: dl 0
041506 00 00 00    0013*   cur_buffer_id: dl 0
041509             0014*   
041509             0015*   img_load_init:
041509             0016*   ; initialize logo's position parameters
041509 21 00 00 00 0017*       ld hl,0
04150D 22 BF 15 04 0018*       ld (logo_xvel),hl
041511 22 C2 15 04 0019*       ld (logo_xpos),hl
041515             0020*   ; begin 16.8 maths to determine logo's y position and velocity
041515 21 00 E0 00 0021*       ld hl,240-16*256 ; allow space for text at bottom of screen
041519 22 C8 15 04 0022*       ld (logo_ypos),hl
04151D EB          0023*       ex de,hl
04151E 21 00 F8 FF 0024*       ld hl,-8*256 ; 8 pixels from top of screen
041522 19          0025*       add hl,de ; distance for logo to travel
041523 11 00 B1 FF 0026*       ld de,-sprites_num_images*256
041527 CD 2E 0A 04 0027*       call sdiv168 ; ud.e = distance / num images = y velocity
04152B ED 53 C5 15 0028*       ld (logo_yvel),de
       04          
041530             0029*   ; all done
041530 C9          0030*       ret
041531             0031*   
041531             0032*   ; inputs: bc is the number of images to load, cur_image_list set
041531             0033*   img_load_main:
041531             0034*   ; back up loop counter
041531 C5          0035*       push bc
041532             0036*   
041532             0037*   ; load the next image
041532 CD 69 15 04 0038*       call load_next_image
041536             0039*   
041536             0040*   ; plot the background
041536 CD 4B 18 04 0041*       call vdu_cls
04153A 21 02 00 00 0042*       ld hl,BUF_SPLASH_BG
04153E CD 38 19 04 0043*       call vdu_buff_select
041542 01 00 00 00 0044*       ld bc,0
041546 11 00 00 00 0045*       ld de,0
04154A CD 20 1D 04 0046*       call vdu_plot_bmp
04154E             0047*   
04154E             0048*   ; ; draw the most recently loaded image
04154E             0049*   ; 	ld hl,(cur_buffer_id)
04154E             0050*   ; 	call vdu_buff_select
04154E             0051*   ; 	ld bc,0
04154E             0052*   ; 	ld de,0
04154E             0053*   ; 	call vdu_plot_bmp
04154E             0054*   
04154E             0055*   ; move logo
04154E CD 9A 15 04 0056*       call move_logo
041552             0057*   
041552             0058*   ; print current filename
041552 2A 03 15 04 0059*       ld hl,(cur_filename)
041556 CD 17 01 04 0060*       call printString
04155A             0061*   
04155A             0062*   ; flip the framebuffer
04155A             0063*       ; call vdu_flip
04155A             0064*   
04155A             0065*   ; decrement loop counter
04155A C1          0066*       pop bc
04155B 0B          0067*       dec bc
04155C 79          0068*       ld a,c
04155D B7          0069*       or a
04155E C2 31 15 04 0070*       jp nz,img_load_main
041562 78          0071*       ld a,b
041563 B7          0072*       or a
041564 C2 31 15 04 0073*       jp nz,img_load_main
041568 C9          0074*       ret
041569             0075*   
041569             0076*   load_next_image:
041569 FD 2A 00 15 0077*       ld iy,(cur_image_list)
       04          
04156E FD E5       0078*       push iy
041570 FD 7E 00    0079*       ld a,(iy+image_type) ; get image type
041573 FD 07 03    0080*       ld bc,(iy+image_width) ; get image width
041576 FD 17 06    0081*       ld de,(iy+image_height) ; get image height
041579 FD 31 09    0082*       ld ix,(iy+image_filesize) ; get image file size
04157C FD 27 0F    0083*       ld hl,(iy+image_bufferId) ; get image bufferId
04157F 22 06 15 04 0084*       ld (cur_buffer_id),hl
041583 FD 37 0C    0085*       ld iy,(iy+image_filename) ; get image filename
041586 FD 22 03 15 0086*       ld (cur_filename),iy
       04          
04158B CD 56 1A 04 0087*       call vdu_load_img
04158F FD E1       0088*       pop iy
041591 ED 33 12    0089*       lea iy,iy+image_record_size
041594 FD 22 00 15 0090*       ld (cur_image_list),iy
       04          
041599 C9          0091*       ret
04159A             0092*   
04159A             0093*   move_logo:
04159A             0094*   ; activate logo bitmap
04159A 21 03 00 00 0095*       ld hl, BUF_SPLASH_LOGO
04159E CD 38 19 04 0096*       call vdu_buff_select
0415A2             0097*   ; update position based on velocity parameters
0415A2 2A C8 15 04 0098*       ld hl,(logo_ypos)
0415A6 ED 5B C5 15 0099*       ld de,(logo_yvel)
       04          
0415AB 19          0100*       add hl,de
0415AC 22 C8 15 04 0101*       ld (logo_ypos),hl
0415B0             0102*   ; draw logo
0415B0 ED 4B C2 15 0103*       ld bc,(logo_xpos)
       04          
0415B5 ED 5B C8 15 0104*       ld de,(logo_ypos)
       04          
0415BA CD 3C 1D 04 0105*       call vdu_plot_bmp168
0415BE C9          0106*       ret
0415BF             0107*   
0415BF 00 00 00    0108*   logo_xvel: dl 0
0415C2 00 00 00    0109*   logo_xpos: dl 0
0415C5             0110*   
0415C5 00 00 00    0111*   logo_yvel: dl 0
0415C8 00 00 00    0112*   logo_ypos: dl 0
0415CB             0113*   
0415CB             0114*   load_ui_images:
0415CB             0115*   ; initialize image loading variables
0415CB 21 00 52 04 0116*       ld hl,ui_image_list
0415CF 22 00 15 04 0117*       ld (cur_image_list),hl
0415D3             0118*   ; load images
0415D3 06 04       0119*       ld b,ui_num_images
0415D5             0120*   @loop:
0415D5 C5          0121*       push bc
0415D6 CD 69 15 04 0122*       call load_next_image
0415DA C1          0123*       pop bc
0415DB 10 F8       0124*       djnz @loop
0415DD C9          0125*       ret
0415DE             0126*   
0415DE             0127*   load_sprite_images:
0415DE             0128*   ; initialize image loading variables
0415DE 21 00 44 04 0129*       ld hl,sprites_image_list
0415E2 22 00 15 04 0130*       ld (cur_image_list),hl
0415E6 01 4F 00 00 0131*       ld bc,sprites_num_images
0415EA             0132*   ; load images
0415EA CD 31 15 04 0133*       call img_load_main
0415EE C9          0134*       ret
0415EF             0135*   
0415EF             0136*   load_tilesets:
0415EF             0137*   ; initialize image loading variables
0415EF 21 00 27 04 0138*       ld hl,tiles_dg_image_list
0415F3 22 00 15 04 0139*       ld (cur_image_list),hl
0415F7 01 B8 00 00 0140*       ld bc,tiles_dg_num_images
0415FB             0141*   ; load images
0415FB CD 31 15 04 0142*       call img_load_main
0415FF             0143*   
0415FF             0144*   ; ; initialize image loading variables
0415FF             0145*   ;     ld hl,tiles_xevious_image_list
0415FF             0146*   ;     ld (cur_image_list),hl
0415FF             0147*   ;     ld bc,tiles_xevious_num_images
0415FF             0148*   ; ; load images
0415FF             0149*   ;     call img_load_main
0415FF C9          0150*       ret
041600             0036        include "timer.inc"
041600             0001*       align 256
041600             0002*   
041600             0003*   ; Table 32. Timer Control Registers
041600             0004*   ; this constant is the base address of the timer control registers
041600             0005*   ; each timer takes three bytes:
041600             0006*   ;   0: control register
041600             0007*   ;   1: low byte of timer reset value
041600             0008*   ;   2: high byte of timer reset value
041600             0009*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
041600             0010*   ; which correctly force the high and upper bytes of the address bus to zero
041600             0011*   TMR_CTL:     equ 80h
041600             0012*   
041600             0013*   ; Timer Control Register Bit Definitions
041600             0014*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
041600             0015*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
041600             0016*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
041600             0017*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
041600             0018*                               ; the TMRx_CTL register is read.
041600             0019*   
041600             0020*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
041600             0021*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
041600             0022*   
041600             0023*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
041600             0024*                               ;  0,and counting stops when the end-of-count value is reached.
041600             0025*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
041600             0026*                               ; written to the counter when the end-of-count value is reached.
041600             0027*   
041600             0028*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
041600             0029*   CLK_DIV_256:  equ %00001100 ;
041600             0030*   CLK_DIV_64:   equ %00001000 ;
041600             0031*   CLK_DIV_16:   equ %00000100 ;
041600             0032*   CLK_DIV_4:    equ %00000000 ;
041600             0033*   
041600             0034*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
041600             0035*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
041600             0036*                               ; When a 1 is written to this bit,the values in the reload registers
041600             0037*                               ;  are loaded into the downcounter when the timer restarts. The
041600             0038*                               ; programmer must ensure that this bit is set to 1 each time
041600             0039*                               ; SINGLE-PASS mode is used.
041600             0040*   
041600             0041*   ; disable/enable the programmable reload timer
041600             0042*   PRT_EN_0:     equ %00000000 ;
041600             0043*   PRT_EN_1:     equ %00000001 ;
041600             0044*   
041600             0045*   ; Table 37. Timer Input Source Select Register
041600             0046*   ; Each of the 4 timers are allocated two bits of the 8-bit register
041600             0047*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
041600             0048*   ;   00: System clock / CLK_DIV
041600             0049*   ;   01: RTC / CLK_DIV
041600             0050*   ;   NOTE: these are the values given in the manual,but it may be a typo
041600             0051*   ;   10: GPIO port B pin 1.
041600             0052*   ;   11: GPIO port B pin 1.
041600             0053*   TMR_ISS:   equ 92h ; register address
041600             0054*   
041600             0055*   ; Table 51. Real-Time Clock Control Register
041600             0056*   RTC_CTRL: equ EDh ; register address
041600             0057*   
041600             0058*   ; alarm interrupt disable/enable
041600             0059*   RTC_ALARM_0:    equ %00000000
041600             0060*   RTC_ALARM_1:    equ %10000000
041600             0061*   
041600             0062*   ; interrupt on alarm disable/enable
041600             0063*   RTC_INT_ENT_0:  equ %00000000
041600             0064*   RTC_INT_ENT_1:  equ %01000000
041600             0065*   
041600             0066*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
041600             0067*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
041600             0068*   
041600             0069*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
041600             0070*                                   ; On-chip 32768 Hz oscillator is enabled.
041600             0071*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
041600             0072*                                   ; On-chip 32768 Hz oscillator is disabled.
041600             0073*   
041600             0074*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
041600             0075*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
041600             0076*   
041600             0077*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
041600             0078*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
041600             0079*   
041600             0080*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
041600             0081*                                   ; RTC counter is enabled.
041600             0082*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
041600             0083*                                   ; RTC counter is disabled.
041600             0084*   
041600             0085*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
041600             0086*   
041600             0087*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
041600             0088*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
041600 00 00 00    0089*   prt_reload: dl 0x000000
041603             0090*   
041603             0091*   ; set PRT timer
041603             0092*   prt_set:
041603 21 00 00 00 0093*       ld hl,0
041607 22 51 16 04 0094*       ld (prt_irq_counter),hl
04160B 2A 00 16 04 0095*       ld hl,(prt_reload)
04160F ED 29 84    0096*       out0 ($84),l
041612 ED 21 85    0097*   	out0 ($85),h
041615             0098*   ; disable timer
041615 3E 06       0099*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041617 ED 39 83    0100*   	out0 ($83),a
04161A             0101*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04161A 3E 57       0102*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04161C ED 39 83    0103*   	out0 ($83),a
04161F C9          0104*       ret
041620             0105*   
041620             0106*   ; ===============================================
041620             0107*   ; PRT Timer Interrupt Handling
041620             0108*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
041620             0109*   ; -----------------------------------------------
041620             0110*   prt_irq_init:
041620             0111*       ; set up interrupt vector table 2
041620 21 00 00 00 0112*   	ld hl,0
041624 3A 0C 01 00 0113*   	ld a,($10c)
041628 6F          0114*   	ld l,a
041629 3A 0D 01 00 0115*   	ld a,($10d)
04162D 67          0116*   	ld h,a
04162E             0117*   
04162E             0118*   	; skip over CALL ($c3)
04162E 23          0119*   	inc hl
04162F             0120*   	; load address of jump into vector table 2 (in ram)
04162F ED 27       0121*   	ld hl,(hl)
041631             0122*   
041631             0123*   	; write CALL prt_irq_handler to vector table 2
041631 3E C3       0124*   	ld a,$c3
041633 77          0125*   	ld (hl),a
041634 23          0126*   	inc hl
041635 11 3C 16 04 0127*   	ld de,prt_irq_handler
041639 ED 1F       0128*   	ld (hl),de
04163B             0129*   
04163B C9          0130*       ret
04163C             0131*   
04163C             0132*   prt_irq_handler:
04163C F3          0133*   	di
04163D F5          0134*   	push af
04163E E5          0135*       push hl
04163F ED 38 83    0136*   	in0 a,($83)
041642 2A 51 16 04 0137*   	ld hl,(prt_irq_counter)
041646 23          0138*   	inc hl
041647 22 51 16 04 0139*   	ld (prt_irq_counter),hl
04164B E1          0140*       pop hl
04164C F1          0141*   	pop af
04164D FB          0142*   	ei
04164E 5B ED 4D    0143*   	reti.l
041651             0144*   
041651             0145*   prt_irq_counter:
041651 00 00 00    0146*   	.dl 0
041654             0147*   prt_irq_counter_saved:
041654 00 00 00    0148*       .dl 0
041657             0149*   
041657             0150*   prt_loop_reset:
041657 E5          0151*       push hl
041658 21 00 00 00 0152*   	ld hl,0
04165C 22 51 16 04 0153*   	ld (prt_irq_counter),hl
041660 22 C2 16 04 0154*       ld (prt_loop_counter),hl
041664 22 C5 16 04 0155*       ld (prt_loops),hl
041668 CD 03 16 04 0156*       call prt_set
04166C E1          0157*       pop hl
04166D C9          0158*       ret
04166E             0159*   
04166E             0160*   prt_loop_start:
04166E E5          0161*       push hl
04166F 21 00 00 00 0162*   	ld hl,0
041673 22 51 16 04 0163*   	ld (prt_irq_counter),hl
041677 E1          0164*       pop hl
041678 C9          0165*       ret
041679             0166*   
041679             0167*   prt_loop_stop:
041679 E5          0168*       push hl
04167A D5          0169*       push de
04167B 2A 51 16 04 0170*       ld hl,(prt_irq_counter)
04167F ED 5B C2 16 0171*       ld de,(prt_loop_counter)
       04          
041684 19          0172*       add hl,de
041685 22 C2 16 04 0173*       ld (prt_loop_counter),hl
041689 21 00 00 00 0174*       ld hl,0
04168D 22 51 16 04 0175*       ld (prt_irq_counter),hl
041691 2A C5 16 04 0176*       ld hl,(prt_loops)
041695 23          0177*       inc hl
041696 22 C5 16 04 0178*       ld (prt_loops),hl
04169A D1          0179*       pop de
04169B E1          0180*       pop hl
04169C C9          0181*       ret
04169D             0182*   
04169D             0183*   ; inputs: bc = y,x text coordinates to print
04169D             0184*   prt_loop_print:
04169D F5          0185*       push af
04169E E5          0186*       push hl
04169F C5          0187*       push bc
0416A0 D5          0188*       push de
0416A1 DD E5       0189*       push ix
0416A3 FD E5       0190*       push iy
0416A5 CD 37 18 04 0191*       call vdu_move_cursor
0416A9             0192*   
0416A9 2A C2 16 04 0193*       ld hl,(prt_loop_counter)
0416AD CD 16 02 04 0194*       call printDec
0416B1             0195*   
0416B1 2A C5 16 04 0196*       ld hl,(prt_loops)
0416B5 CD 16 02 04 0197*       call printDec
0416B9             0198*   
0416B9 FD E1       0199*       pop iy
0416BB DD E1       0200*       pop ix
0416BD D1          0201*       pop de
0416BE C1          0202*       pop bc
0416BF E1          0203*       pop hl
0416C0 F1          0204*       pop af
0416C1 C9          0205*       ret
0416C2             0206*   
0416C2             0207*   prt_loop_counter:
0416C2 00 00 00    0208*       .dl 0
0416C5             0209*   prt_loops:
0416C5 00 00 00    0210*       .dl 0
0416C8             0211*   
0416C8             0212*   ; ===============================================
0416C8             0213*   ; Timer functions
0416C8             0214*   ; -----------------------------------------------
0416C8             0215*   ; set a countdown timer
0416C8             0216*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0416C8             0217*   ; returns: hl = current time
0416C8             0218*   tmr_set:
0416C8 FD 2F 03    0219*       ld (iy+3),hl            ; set time remaining
0416CB             0220*       MOSCALL mos_sysvars     ; ix points to syvars table
0416CB 3E 08       0001*M1 			LD	A, function
0416CD 5B CF       0002*M1 			RST.LIL	08h
0416CF DD 27 00    0221*       ld hl,(ix+sysvar_time)  ; get current time
0416D2 FD 2F 00    0222*       ld (iy+0),hl            ; set start time
0416D5 C9          0223*       ret
0416D6             0224*   
0416D6             0225*   ; gets time remaining on a countdown timer
0416D6             0226*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0416D6             0227*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0416D6             0228*   ;          sign flags: pos = time not expired,zero or neg = time expired
0416D6             0229*   tmr_get:
0416D6             0230*       MOSCALL mos_sysvars     ; ix points to syvars table
0416D6 3E 08       0001*M1 			LD	A, function
0416D8 5B CF       0002*M1 			RST.LIL	08h
0416DA DD 17 00    0231*       ld de,(ix+sysvar_time)  ; get current time
0416DD FD 27 00    0232*       ld hl,(iy+0)            ; get start time
0416E0 AF          0233*       xor a                   ; clear carry
0416E1 ED 52       0234*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0416E3 FD 17 03    0235*       ld de,(iy+3)            ; get timer set value
0416E6 AF          0236*       xor a                   ; clear carry
0416E7 ED 5A       0237*       adc hl,de               ; hl = time remaining
0416E9             0238*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0416E9 C9          0239*       ret
0416EA             0240*   
0416EA             0241*   tmr_test: ds 6 ; example of a buffer to hold timer data
0416F0             0242*   
       FF FF FF FF 
       FF FF 
0416F0 00 00 00    0243*   timestamp_now: dl 0
0416F3 00 00 00    0244*   timestamp_old: dl 0
0416F6 00 00 00    0245*   timestamp_chg: dl 0
0416F9             0246*   
0416F9             0247*   ; update the global timestamp from the system clock
0416F9             0248*   ; inputs: none
0416F9             0249*   ; returns: hl = time elapsed in 1/120ths of a second
0416F9             0250*   ;          ix = pointer to syvars table
0416F9             0251*   ; destroys: af,hl,de,ix
0416F9             0252*   timestamp_tick:
0416F9 ED 5B F0 16 0253*       ld de,(timestamp_now)   ; get previous time
       04          
0416FE ED 53 F3 16 0254*       ld (timestamp_old),de   ; save previous time
       04          
041703             0255*       MOSCALL mos_sysvars     ; ix points to syvars table
041703 3E 08       0001*M1 			LD	A, function
041705 5B CF       0002*M1 			RST.LIL	08h
041707 DD 27 00    0256*       ld hl,(ix+sysvar_time)  ; get current time
04170A 22 F0 16 04 0257*       ld (timestamp_now),hl   ; save current time
04170E AF          0258*       xor a                   ; clear carry
04170F ED 52       0259*       sbc hl,de               ; hl = time elapsed
041711 22 F6 16 04 0260*       ld (timestamp_chg),hl   ; save elapsed time
041715 C9          0261*       ret
041716             0262*   
041716             0263*   ; set a countdown timer
041716             0264*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041716             0265*   ; requires: timestamp_tick to be called at least once before this function
041716             0266*   ; returns: hl = current time
041716             0267*   ; destroys: hl
041716             0268*   timestamp_tmr_set:
041716 FD 2F 03    0269*       ld (iy+3),hl            ; set time remaining
041719 2A F0 16 04 0270*       ld hl,(timestamp_now)   ; get current timestamp
04171D FD 2F 00    0271*       ld (iy+0),hl            ; set start time
041720 C9          0272*       ret
041721             0273*   
041721             0274*   ; gets time remaining on a countdown timer following the global timestamp
041721             0275*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041721             0276*   ; requires: timestamp_tick to be called at least once before this function
041721             0277*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041721             0278*   ;          sign flags: pos = time not expired,zero or neg = time expired
041721             0279*   ; destroys: af,hl,de
041721             0280*   timestamp_tmr_get:
041721 ED 5B F0 16 0281*       ld de,(timestamp_now)   ; get current timestamp
       04          
041726 FD 27 00    0282*       ld hl,(iy+0)            ; get start time
041729 AF          0283*       xor a                   ; clear carry
04172A ED 52       0284*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04172C FD 17 03    0285*       ld de,(iy+3)            ; get timer set value
04172F AF          0286*       xor a                   ; clear carry
041730 ED 5A       0287*       adc hl,de               ; hl = time remaining
041732             0288*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041732 C9          0289*       ret
041733             0290*   
041733             0291*   ; set a stopwatch
041733             0292*   ; returns: hl = start time
041733             0293*   ; destroys: hl,ix
041733             0294*   stopwatch_set:
041733             0295*       MOSCALL mos_sysvars     ; ix points to syvars table
041733 3E 08       0001*M1 			LD	A, function
041735 5B CF       0002*M1 			RST.LIL	08h
041737 DD 27 00    0296*       ld hl,(ix+sysvar_time)  ; get current time
04173A 22 4F 17 04 0297*       ld (stopwatch_started),hl            ; set start time
04173E C9          0298*       ret
04173F             0299*   
04173F             0300*   ; gets time elapsed on a stopwatch
04173F             0301*   ; returns: hl = time elapsed in 1/120ths of a second
04173F             0302*   ; destroys: af,hl,de,ix
04173F             0303*   stopwatch_get:
04173F             0304*       MOSCALL mos_sysvars     ; ix points to syvars table
04173F 3E 08       0001*M1 			LD	A, function
041741 5B CF       0002*M1 			RST.LIL	08h
041743 DD 27 00    0305*       ld hl,(ix+sysvar_time)  ; get current time
041746 ED 5B 4F 17 0306*       ld de,(stopwatch_started)            ; get start time
       04          
04174B AF          0307*       xor a                   ; clear carry
04174C ED 52       0308*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04174E C9          0309*       ret
04174F             0310*   
04174F             0311*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041752             0312*   
041752             0313*   ; ------------------
041752             0314*   ; delay routine
041752             0315*   ; Author: Richard Turrnidge
041752             0316*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041752             0317*   ; routine waits a fixed time,then returns
041752             0318*   ; arrive with A =  the delay byte. One bit to be set only.
041752             0319*   ; eg. ld A,00000100b
041752             0320*   
041752             0321*   multiPurposeDelay:
       FF FF FF 
041752 F5          0322*       push af
041753 C5          0323*       push bc
041754 DD E5       0324*       push ix
041756 47          0325*       ld b,a
041757 3E 08       0326*       ld a,$08
041759 5B CF       0327*       RST.LIL	08h                 ; get IX pointer to sysvars
04175B             0328*   
04175B             0329*   waitLoop:
04175B             0330*   
04175B DD 7E 00    0331*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04175E             0332*   
04175E             0333*                                   ;   we check if bit set is same as last time we checked.
04175E             0334*                                   ;   bit 0 - don't use
04175E             0335*                                   ;   bit 1 - changes 64 times per second
04175E             0336*                                   ;   bit 2 - changes 32 times per second
04175E             0337*                                   ;   bit 3 - changes 16 times per second
04175E             0338*   
04175E             0339*                                   ;   bit 4 - changes 8 times per second
04175E             0340*                                   ;   bit 5 - changes 4 times per second
04175E             0341*                                   ;   bit 6 - changes 2 times per second
04175E             0342*                                   ;   bit 7 - changes 1 times per second
04175E A0          0343*       and b
04175F 4F          0344*       ld c,a
041760 3A 71 17 04 0345*       ld a,(oldTimeStamp)
041764 B9          0346*       cp c                        ; is A same as last value?
041765 28 F4       0347*       jr z,waitLoop              ; loop here if it is
041767 79          0348*       ld a,c
041768 32 71 17 04 0349*       ld (oldTimeStamp),a        ; set new value
04176C             0350*   
04176C DD E1       0351*       pop ix
04176E C1          0352*       pop bc
04176F F1          0353*       pop af
041770 C9          0354*       ret
041771             0355*   
041771 00          0356*   oldTimeStamp:   .db 00h
041772             0037        include "vdu.inc"
041772 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
041800             0002*   
041800             0003*   ; VDU 30: Home cursor
041800             0004*   vdu_home_cursor:
041800 3E 1E       0005*       ld a,30
041802 5B D7       0006*   	rst.lil $10
041804 C9          0007*   	ret
041805             0008*   
041805             0009*   vdu_cursor_on:
041805 21 10 18 04 0010*   	ld hl,@cmd
041809 01 03 00 00 0011*   	ld bc,@end-@cmd
04180D 5B DF       0012*   	rst.lil $18
04180F C9          0013*   	ret
041810             0014*   @cmd:
041810 17 01 01    0015*   	db 23,1,1
041813             0016*   @end:
041813             0017*   
041813             0018*   vdu_cursor_off:
041813 21 1E 18 04 0019*   	ld hl,@cmd
041817 01 03 00 00 0020*   	ld bc,@end-@cmd
04181B 5B DF       0021*   	rst.lil $18
04181D C9          0022*   	ret
04181E             0023*   @cmd:
04181E 17 01 00    0024*   	db 23,1,0
041821             0025*   @end:
041821             0026*   
041821             0027*   ; VDU 5: Write text at graphics cursor
041821             0028*   ; inputs: a is the character to write to the screen
041821             0029*   ; prerequisites: the graphics cursor at the intended position on screen
041821             0030*   ; outputs: see the name of the function
041821             0031*   ; destroys: a, hl, bc
041821             0032*   vdu_char_to_gfx_cursor:
041821 32 31 18 04 0033*   	ld (@arg),a
041825 21 30 18 04 0034*   	ld hl,@cmd
041829 01 02 00 00 0035*   	ld bc,@end-@cmd
04182D 5B DF       0036*   	rst.lil $18
04182F C9          0037*   	ret
041830 05          0038*   @cmd: db 5
041831 00          0039*   @arg: db 0
041832             0040*   @end:
041832             0041*   ; VDU 9: Move cursor forward one character
041832             0042*   vdu_cursor_forward:
041832 3E 09       0043*       ld a,9
041834 5B D7       0044*   	rst.lil $10
041836 C9          0045*   	ret
041837             0046*   
041837             0047*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041837             0048*   ; inputs: c=x, b=y 8-bit unsigned integers
041837             0049*   vdu_move_cursor:
041837 ED 43 48 18 0050*       ld (@x0),bc
       04          
04183C 21 47 18 04 0051*   	ld hl,@cmd
041840 01 03 00 00 0052*   	ld bc,@end-@cmd
041844 5B DF       0053*   	rst.lil $18
041846 C9          0054*   	ret
041847 1F          0055*   @cmd: 	db 31
041848 00          0056*   @x0:	db 0
041849 00          0057*   @y0: 	db 0
04184A 00          0058*   @end: 	db 0 ; padding
04184B             0059*   
04184B             0060*   ; VDU 12: Clear text area (CLS)
04184B             0061*   vdu_cls:
04184B 3E 0C       0062*       ld a,12
04184D 5B D7       0063*   	rst.lil $10
04184F C9          0064*   	ret
041850             0065*   
041850             0066*   vdu_flip:
041850 21 5B 18 04 0067*   	ld hl,@cmd
041854 01 03 00 00 0068*   	ld bc,@end-@cmd
041858 5B DF       0069*   	rst.lil $18
04185A C9          0070*   	ret
04185B 17 00 C3    0071*   @cmd: db 23,0,0xC3
04185E             0072*   @end:
04185E             0073*   
04185E             0074*   ; VDU 16: Clear graphics area (CLG)
04185E             0075*   vdu_clg:
04185E 3E 10       0076*       ld a,16
041860 5B D7       0077*   	rst.lil $10
041862 C9          0078*   	ret
041863             0079*   
041863             0080*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041863             0081*   ; VDU 23, 7: Scrolling
041863             0082*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041863             0083*   ; inputs: a, extent; l, direction; h; speed
041863             0084*   vdu_scroll_down:
041863 32 78 18 04 0085*   	ld (@extent),a
041867 22 79 18 04 0086*   	ld (@dir),hl ; implicitly populates @speed
04186B 21 76 18 04 0087*   	ld hl,@cmd
04186F 01 05 00 00 0088*   	ld bc,@end-@cmd
041873 5B DF       0089*   	rst.lil $18     ;; Sending command to VDP
041875 C9          0090*   	ret
041876 17 07       0091*   @cmd:       db 23,7
041878 00          0092*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041879 00          0093*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04187A 00          0094*   @speed:     db 0x00 ; pixels
04187B 00          0095*   @end:		db 0x00 ; padding
04187C             0096*   
04187C             0097*   ; COLOUR MODES
04187C             0098*   ; Mode	Effect
04187C             0099*   ; 0	Set on-screen pixel to target colour value
04187C             0100*   ; 1	OR value with the on-screen pixel
04187C             0101*   ; 2	AND value with the on-screen pixel
04187C             0102*   ; 3	XOR value with the on-screen pixel
04187C             0103*   ; 4	Invert the on-screen pixel
04187C             0104*   ; 5	No operation
04187C             0105*   ; 6	AND the inverse of the specified colour with the on-screen pixel
04187C             0106*   ; 7	OR the inverse of the specified colour with the on-screen pixel
04187C             0107*   
04187C             0108*   ; VDU 17, colour: Define text colour (COLOUR)
04187C             0109*   vdu_colour_text:
04187C 32 8C 18 04 0110*   	ld (@arg),a
041880 21 8B 18 04 0111*   	ld hl,@cmd
041884 01 02 00 00 0112*   	ld bc,@end-@cmd
041888 5B DF       0113*   	rst.lil $18
04188A C9          0114*   	ret
04188B 11          0115*   @cmd: db 17
04188C 00          0116*   @arg: db 0
04188D             0117*   @end:
04188D             0118*   
04188D             0119*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04188D             0120*   ; inputs: a=mode, c=colour (add 128 to set background colour)
04188D             0121*   vdu_gcol:
04188D 32 A2 18 04 0122*   	ld (@mode),a
041891 79          0123*       ld a,c
041892 32 A3 18 04 0124*       ld (@col),a
041896 21 A1 18 04 0125*   	ld hl,@cmd
04189A 01 03 00 00 0126*   	ld bc,@end-@cmd
04189E 5B DF       0127*   	rst.lil $18
0418A0 C9          0128*   	ret
0418A1 12          0129*   @cmd:  db 18
0418A2 00          0130*   @mode: db 0
0418A3 00          0131*   @col:  db 0
0418A4             0132*   @end:
0418A4             0133*   
0418A4             0134*   
0418A4             0135*   ; VDU 28, left, bottom, right, top: Set text viewport **
0418A4             0136*   ; MIND THE LITTLE-ENDIANESS
0418A4             0137*   ; inputs: c=left,b=bottom,e=right,d=top
0418A4             0138*   ; outputs; nothing
0418A4             0139*   ; destroys: a might make it out alive
0418A4             0140*   vdu_set_txt_viewport:
0418A4 ED 43 BA 18 0141*       ld (@lb),bc
       04          
0418A9 ED 53 BC 18 0142*   	ld (@rt),de
       04          
0418AE 21 B9 18 04 0143*   	ld hl,@cmd
0418B2 01 05 00 00 0144*   	ld bc,@end-@cmd
0418B6 5B DF       0145*   	rst.lil $18
0418B8 C9          0146*   	ret
0418B9 1C          0147*   @cmd:   db 28 ; set text viewport command
0418BA 00 00       0148*   @lb: 	dw 0x0000 ; set by bc
0418BC 00 00       0149*   @rt: 	dw 0x0000 ; set by de
0418BE 00          0150*   @end:   db 0x00	  ; padding
0418BF             0151*   
0418BF             0152*   ; Wait for VBLANK interrupt
0418BF             0153*   vdu_vblank:
0418BF DD E5       0154*       PUSH 	IX
0418C1             0155*   	MOSCALL	mos_sysvars
0418C1 3E 08       0001*M1 			LD	A, function
0418C3 5B CF       0002*M1 			RST.LIL	08h
0418C5 DD 7E 00    0156*   	LD	A, (IX + sysvar_time + 0)
0418C8             0157*   @wait:
0418C8 DD BE 00    0158*       CP 	A, (IX + sysvar_time + 0)
0418CB 28 FB       0159*       JR	Z, @wait
0418CD DD E1       0160*       POP	IX
0418CF C9          0161*       RET
0418D0             0162*   
0418D0             0163*   ; VDU 29, x; y;: Set graphics origin
0418D0             0164*   ; This command sets the graphics origin.
0418D0             0165*   ; The origin is the point on the screen where the coordinates (0,0) are located.
0418D0             0166*   ; inputs: bc=x0,de=y0
0418D0             0167*   ; outputs; nothing
0418D0             0168*   ; destroys: a might make it out alive
0418D0             0169*   vdu_set_gfx_origin:
0418D0 ED 43 E6 18 0170*       ld (@x0),bc
       04          
0418D5 ED 53 E8 18 0171*       ld (@y0),de
       04          
0418DA 21 E5 18 04 0172*       ld hl,@cmd
0418DE 01 05 00 00 0173*       ld bc,@end-@cmd
0418E2 5B DF       0174*       rst.lil $18
0418E4 C9          0175*       ret
0418E5 1D          0176*   @cmd:   db 29 ; set graphics origin command
0418E6 00 00       0177*   @x0: 	dw 0x0000 ; set by bc
0418E8 00 00       0178*   @y0: 	dw 0x0000 ; set by de
0418EA 00          0179*   @end:   db 0x00	  ; padding
0418EB             0180*   
0418EB             0181*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
0418EB             0182*   ; NOTE: the order of the y-coordinate parameters are inverted
0418EB             0183*   ; 	because we have turned off logical screen scaling
0418EB             0184*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0418EB             0185*   ; outputs; nothing
0418EB             0186*   ; destroys: a might make it out alive
0418EB             0187*   vdu_set_gfx_viewport:
0418EB ED 43 0B 19 0188*       ld (@x0),bc
       04          
0418F0 FD 22 0D 19 0189*       ld (@y1),iy
       04          
0418F5 DD 22 0F 19 0190*   	ld (@x1),ix
       04          
0418FA ED 53 11 19 0191*   	ld (@y0),de
       04          
0418FF 21 0A 19 04 0192*   	ld hl,@cmd
041903 01 09 00 00 0193*   	ld bc,@end-@cmd
041907 5B DF       0194*   	rst.lil $18
041909 C9          0195*   	ret
04190A 18          0196*   @cmd:   db 24 ; set graphics viewport command
04190B 00 00       0197*   @x0: 	dw 0x0000 ; set by bc
04190D 00 00       0198*   @y1: 	dw 0x0000 ; set by iy
04190F 00 00       0199*   @x1: 	dw 0x0000 ; set by ix
041911 00 00       0200*   @y0: 	dw 0x0000 ; set by de
041913 00          0201*   @end:   db 0x00	  ; padding
041914             0202*   
041914             0203*   ; SCREEN MODES
041914             0204*   ; ===============================
041914             0205*   ; Mode  Horz  Vert  Cols  Refresh
041914             0206*   ; ---   ----  ----  ----  -------
041914             0207*   ; 11    320   240   2     60hz
041914             0208*   ; 139   320   240   2     60hz
041914             0209*   ; 23    512   384   2     60hz
041914             0210*   ; 151   512   384   2     60hz
041914             0211*   ; 6     640   240   2     60hz
041914             0212*   ; 134   640   240   2     60hz
041914             0213*   ; 2     640   480   2     60hz
041914             0214*   ; 130   640   480   2     60hz
041914             0215*   ; 17    800   600   2     60hz
041914             0216*   ; 145   800   600   2     60hz
041914             0217*   ; 18    1024  768   2     60hz
041914             0218*   ; 146   1024  768   2     60hz
041914             0219*   ; ---   ----  ----  ----  -------
041914             0220*   ; 10    320   240   4     60hz
041914             0221*   ; 138   320   240   4     60hz
041914             0222*   ; 22    512   384   4     60hz
041914             0223*   ; 150   512   384   4     60hz
041914             0224*   ; 5     640   240   4     60hz
041914             0225*   ; 133   640   240   4     60hz
041914             0226*   ; 1     640   480   4     60hz
041914             0227*   ; 129   640   480   4     60hz
041914             0228*   ; 16    800   600   4     60hz
041914             0229*   ; 19    1024  768   4     60hz
041914             0230*   ; ---   ----  ----  ----  -------
041914             0231*   ; 9     320   240   16    60hz
041914             0232*   ; 137   320   240   16    60hz
041914             0233*   ; 21    512   384   16    60hz
041914             0234*   ; 149   512   384   16    60hz
041914             0235*   ; 4     640   240   16    60hz
041914             0236*   ; 132   640   240   16    60hz
041914             0237*   ; 0     640   480   16    60hz
041914             0238*   ; 7     n/a   n/a   16    60hz
041914             0239*   ; ---   ----  ----  ----  -------
041914             0240*   ; 8     320   240   64    60hz
041914             0241*   ; 136   320   240   64    60hz
041914             0242*   ; 20    512   384   64    60hz
041914             0243*   ; 3     640   240   64    60hz
041914             0244*   ; ---   ----  ----  ----  -------
041914             0245*   vdu_set_screen_mode:
041914 32 24 19 04 0246*   	ld (@arg),a
041918 21 23 19 04 0247*   	ld hl,@cmd
04191C 01 02 00 00 0248*   	ld bc,@end-@cmd
041920 5B DF       0249*   	rst.lil $18
041922 C9          0250*   	ret
041923 16          0251*   @cmd: db 22 ; set screen mode
041924 00          0252*   @arg: db 0  ; screen mode parameter
041925             0253*   @end:
041925             0254*   
041925             0255*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041925             0256*   ; inputs: a is scaling mode, 1=on, 0=off
041925             0257*   ; note: default setting on boot is scaling ON
041925             0258*   vdu_set_scaling:
041925 32 37 19 04 0259*   	ld (@arg),a
041929 21 34 19 04 0260*   	ld hl,@cmd
04192D 01 04 00 00 0261*   	ld bc,@end-@cmd
041931 5B DF       0262*   	rst.lil $18
041933 C9          0263*   	ret
041934 17 00 C0    0264*   @cmd: db 23,0,0xC0
041937 00          0265*   @arg: db 0  ; scaling on/off
041938             0266*   @end:
041938             0267*   
041938             0268*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041938             0269*   ; inputs: hl=bufferId
041938             0270*   vdu_buff_select:
041938 22 4A 19 04 0271*   	ld (@bufferId),hl
04193C 21 47 19 04 0272*   	ld hl,@cmd
041940 01 05 00 00 0273*   	ld bc,@end-@cmd
041944 5B DF       0274*   	rst.lil $18
041946 C9          0275*   	ret
041947 17 1B 20    0276*   @cmd: db 23,27,0x20
04194A 00 00       0277*   @bufferId: dw 0x0000
04194C 00          0278*   @end: db 0x00 ; padding
04194D             0279*   
04194D             0280*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04194D             0281*   ; inputs: a=format; bc=width; de=height
04194D             0282*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04194D             0283*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04194D             0284*   ; 0 	RGBA8888 (4-bytes per pixel)
04194D             0285*   ; 1 	RGBA2222 (1-bytes per pixel)
04194D             0286*   ; 2 	Mono/Mask (1-bit per pixel)
04194D             0287*   ; 3 	Reserved for internal use by VDP (“native” format)
04194D             0288*   vdu_bmp_create:
04194D ED 43 69 19 0289*       ld (@width),bc
       04          
041952 ED 53 6B 19 0290*       ld (@height),de
       04          
041957 32 6D 19 04 0291*       ld (@fmt),a
04195B 21 66 19 04 0292*   	ld hl,@cmd
04195F 01 08 00 00 0293*   	ld bc,@end-@cmd
041963 5B DF       0294*   	rst.lil $18
041965 C9          0295*   	ret
041966 17 1B 21    0296*   @cmd:       db 23,27,0x21
041969 00 00       0297*   @width:     dw 0x0000
04196B 00 00       0298*   @height:    dw 0x0000
04196D 00          0299*   @fmt:       db 0x00
04196E             0300*   @end:
04196E             0301*   
04196E             0302*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
04196E             0303*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
04196E             0304*   vdu_load_img_rgba2_to_8:
04196E             0305*   ; backup the target buffer id and image dimensions
04196E E5          0306*       push hl
04196F D5          0307*       push de
041970 C5          0308*       push bc
041971             0309*   ; load the rgba2 image to working buffer 65534
041971 21 FE FF 00 0310*       ld hl,65534 ; temporary working buffer id
041975 CD 78 1A 04 0311*   	call vdu_load_buffer_from_file
041979             0312*   ; restore the image dimensions and target buffer id
041979 C1          0313*       pop bc
04197A D1          0314*       pop de
04197B E1          0315*       pop hl
04197C             0316*   ; fall through to vdu_rgba2_to_8
04197C             0317*   
04197C             0318*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
04197C             0319*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
04197C             0320*   ; the "expand bitmap" command is:
04197C             0321*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
04197C             0322*   ; and then to reverse the byte order to fix endian-ness:
04197C             0323*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
04197C             0324*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
04197C             0325*   ; VDU 23,27,&20,targetBufferID%;
04197C             0326*   ; VDU 23,27,&21,width%;height%;0
04197C             0327*   ; -------------------------------------------------------------------
04197C             0328*   ; inputs: bc,de image width,height ; hl = targetBufferId
04197C             0329*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
04197C             0330*   vdu_rgba2_to_8:
04197C             0331*   ; load the image dimensions and buffer id parameters
04197C ED 43 D8 19 0332*       ld (@width),bc
       04          
041981 ED 53 DA 19 0333*       ld (@height),de
       04          
041986 22 BD 19 04 0334*       ld (@bufferId0),hl
04198A 22 CA 19 04 0335*       ld (@bufferId2),hl
04198E 22 D3 19 04 0336*       ld (@bufferId1),hl
041992             0337*   ; clean up bytes that got stomped on by the ID loads
041992 3E 48       0338*       ld a,0x48
041994 32 BF 19 04 0339*       ld (@bufferId0+2),a
041998 3E 17       0340*       ld a,23
04199A 32 D5 19 04 0341*       ld (@bufferId1+2),a
04199E 3E 18       0342*       ld a,24
0419A0 32 CC 19 04 0343*       ld (@bufferId2+2),a
0419A4 AF          0344*       xor a
0419A5 32 DC 19 04 0345*       ld (@height+2),a
0419A9             0346*   ; send the vdu command strings
0419A9 21 B4 19 04 0347*       ld hl,@beg
0419AD 01 29 00 00 0348*       ld bc,@end-@beg
0419B1 5B DF       0349*       rst.lil $18
0419B3 C9          0350*       ret
0419B4             0351*   @beg:
0419B4             0352*   ; Command 14: Consolidate blocks in a buffer
0419B4             0353*   ; VDU 23, 0, &A0, bufferId; 14
0419B4 17 00 A0    0354*       db 23,0,0xA0
0419B7 FE FF       0355*       dw 65534 ; workingBufferId
0419B9 0E          0356*       db 14 ; consolidate blocks
0419BA             0357*   ; the "expand bitmap" command is:
0419BA             0358*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0419BA 17 00 A0    0359*       db 23,0,0xA0
0419BD 00 00       0360*   @bufferId0: dw 0x0000 ; targetBufferId
0419BF 48          0361*       db 0x48 ; given as decimal command 72 in the docs
0419C0 02          0362*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0419C1 FE FF       0363*       dw 65534 ; sourceBufferId
0419C3 00 7F BF FF 0364*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
0419C7             0365*   ; reverse the byte order to fix endian-ness:
0419C7             0366*   ; Command 24: Reverse the order of data of blocks within a buffer
0419C7             0367*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
0419C7             0368*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0419C7 17 00 A0    0369*       db 23,0,0xA0
0419CA 00 00       0370*   @bufferId2:    dw 0x0000 ; targetBufferId
0419CC 18          0371*       db 24 ; reverse byte order
0419CD 04          0372*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
0419CE 04 00       0373*       dw 4 ; size (4 bytes)
0419D0             0374*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0419D0             0375*   ; VDU 23,27,&20,targetBufferID%;
0419D0 17 1B 20    0376*       db 23,27,0x20 ; select bitmap
0419D3 00 00       0377*   @bufferId1: dw 0x0000 ; targetBufferId
0419D5             0378*   ; VDU 23,27,&21,width%;height%;0
0419D5 17 1B 21    0379*       db 23,27,0x21 ; create bitmap from buffer
0419D8 00 00       0380*   @width: dw 0x0000
0419DA 00 00       0381*   @height: dw 0x0000
0419DC 00          0382*       db 0x00 ; rgba8888 format
0419DD             0383*   @end:
0419DD             0384*   
0419DD             0385*   ; scratch variables
0419DD 00 00 00    0386*   bufferId0: dl 0x000000
0419E0 00 00 00    0387*   bufferId1: dl 0x000000
0419E3             0388*   
0419E3             0389*   ; load a vdu buffer from local memory
0419E3             0390*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0419E3             0391*   vdu_load_buffer:
0419E3 ED 43 0C 1A 0392*       ld (@length),bc
       04          
0419E8 D5          0393*       push de ; save data pointer
0419E9             0394*   ; send the vdu command string
0419E9 7D          0395*       ld a,l
0419EA 32 09 1A 04 0396*       ld (@bufferId),a
0419EE 7C          0397*       ld a,h
0419EF 32 0A 1A 04 0398*       ld (@bufferId+1),a
0419F3 21 06 1A 04 0399*       ld hl,@cmd
0419F7 01 08 00 00 0400*       ld bc,@end-@cmd
0419FB 5B DF       0401*       rst.lil $18
0419FD             0402*   ; send the buffer data
0419FD E1          0403*       pop hl ; pointer to data
0419FE ED 4B 0C 1A 0404*       ld bc,(@length)
       04          
041A03 5B DF       0405*       rst.lil $18 ; send it
041A05 C9          0406*       ret
041A06             0407*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041A06 17 00 A0    0408*   @cmd:       db 23,0,0xA0
041A09 00 00       0409*   @bufferId:	dw 0x0000
041A0B 00          0410*   		    db 0 ; load buffer
041A0C 00 00       0411*   @length:	dw 0x0000
041A0E 00          0412*   @end: db 0 ; padding
041A0F             0413*   
041A0F             0414*   ; clear a buffer
041A0F             0415*   ; inputs: hl = bufferId
041A0F             0416*   vdu_clear_buffer:
041A0F 7D          0417*       ld a,l
041A10 32 27 1A 04 0418*       ld (@bufferId),a
041A14 7C          0419*       ld a,h
041A15 32 28 1A 04 0420*       ld (@bufferId+1),a
041A19 21 24 1A 04 0421*       ld hl,@cmd
041A1D 01 06 00 00 0422*       ld bc,@end-@cmd
041A21 5B DF       0423*       rst.lil $18
041A23 C9          0424*       ret
041A24 17 00 A0    0425*   @cmd:       db 23,0,0xA0
041A27 00 00       0426*   @bufferId:	dw 0x0000
041A29 02          0427*   		    db 2 ; clear buffer
041A2A             0428*   @end:
041A2A             0429*   
041A2A             0430*   vdu_clear_all_buffers:
041A2A             0431*   ; clear all buffers
041A2A 21 35 1A 04 0432*       ld hl,@beg
041A2E 01 06 00 00 0433*       ld bc,@end-@beg
041A32 5B DF       0434*       rst.lil $18
041A34 C9          0435*       ret
041A35 17 00 A0    0436*   @beg: db 23,0,$A0
041A38 FF FF       0437*         dw -1 ; clear all buffers
041A3A 02          0438*         db 2  ; command 2: clear a buffer
041A3B             0439*   @end:
041A3B             0440*   
041A3B             0441*   ; Command 14: Consolidate blocks in a buffer
041A3B             0442*   vdu_consolidate_buffer:
041A3B             0443*   ; set parameters for vdu call
041A3B 7D          0444*       ld a,l
041A3C 32 53 1A 04 0445*       ld (@bufferId),a
041A40 7C          0446*       ld a,h
041A41 32 54 1A 04 0447*       ld (@bufferId+1),a
041A45 21 50 1A 04 0448*       ld hl,@beg
041A49 01 06 00 00 0449*       ld bc,@end-@beg
041A4D 5B DF       0450*       rst.lil $18
041A4F C9          0451*       ret
041A50             0452*   ; VDU 23, 0, &A0, bufferId; 14
041A50 17 00 A0    0453*   @beg: db 23,0,0xA0
041A53 00 00       0454*   @bufferId: dw 0x0000
041A55 0E          0455*              db 14
041A56             0456*   @end:
041A56             0457*   
041A56             0458*   ; load an image file to a buffer and make it a bitmap
041A56             0459*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041A56             0460*   vdu_load_img:
041A56             0461*   ; back up image type and dimension parameters
041A56 22 DD 19 04 0462*       ld (bufferId0),hl
041A5A F5          0463*       push af
041A5B C5          0464*   	push bc
041A5C D5          0465*   	push de
041A5D             0466*   ; load the image
041A5D CD 78 1A 04 0467*   	call vdu_load_buffer_from_file
041A61             0468*   ; now make it a bitmap
041A61 2A DD 19 04 0469*       ld hl,(bufferId0)
041A65 CD 3B 1A 04 0470*       call vdu_consolidate_buffer
041A69 2A DD 19 04 0471*       ld hl,(bufferId0)
041A6D CD 38 19 04 0472*       call vdu_buff_select
041A71 D1          0473*   	pop de ; image height
041A72 C1          0474*   	pop bc ; image width
041A73 F1          0475*   	pop af ; image type
041A74 C3 4D 19 04 0476*   	jp vdu_bmp_create ; will return to caller from there
041A78             0477*   
041A78             0478*   ; inputs: hl = bufferId; iy = pointer to filename
041A78             0479*   vdu_load_buffer_from_file:
041A78 22 DD 19 04 0480*       ld (bufferId0),hl
041A7C             0481*   
041A7C             0482*   ; clear target buffer
041A7C CD 0F 1A 04 0483*       call vdu_clear_buffer
041A80             0484*   
041A80             0485*   ; open the file in read mode
041A80             0486*   ; Open a file
041A80             0487*   ; HLU: Filename
041A80             0488*   ;   C: Mode
041A80             0489*   ; Returns:
041A80             0490*   ;   A: Filehandle, or 0 if couldn't open
041A80 FD E5       0491*   	push iy ; pointer to filename
041A82 E1          0492*   	pop hl
041A83 0E 01       0493*   	ld c,fa_read
041A85             0494*       MOSCALL mos_fopen
041A85 3E 0A       0001*M1 			LD	A, function
041A87 5B CF       0002*M1 			RST.LIL	08h
041A89 32 C4 1A 04 0495*       ld (@filehandle),a
041A8D             0496*   
041A8D             0497*   @read_file:
041A8D             0498*   ; Read a block of data from a file
041A8D             0499*   ;   C: Filehandle
041A8D             0500*   ; HLU: Pointer to where to write the data to
041A8D             0501*   ; DEU: Number of bytes to read
041A8D             0502*   ; Returns:
041A8D             0503*   ; DEU: Number of bytes read
041A8D 3A C4 1A 04 0504*       ld a,(@filehandle)
041A91 4F          0505*       ld c,a
041A92 21 00 E0 B7 0506*       ld hl,filedata
041A96 11 00 20 00 0507*       ld de,8192 ; max we can read into onboard sram at one time
041A9A             0508*       MOSCALL mos_fread
041A9A 3E 1A       0001*M1 			LD	A, function
041A9C 5B CF       0002*M1 			RST.LIL	08h
041A9E             0509*   
041A9E             0510*   ; test de for zero bytes read
041A9E 21 00 00 00 0511*       ld hl,0
041AA2 AF          0512*       xor a ; clear carry
041AA3 ED 52       0513*       sbc hl,de
041AA5 CA BB 1A 04 0514*       jp z,@close_file
041AA9             0515*   
041AA9             0516*   ; load a vdu buffer from local memory
041AA9             0517*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041AA9 2A DD 19 04 0518*       ld hl,(bufferId0)
041AAD D5          0519*       push de ; chunksize
041AAE C1          0520*       pop bc
041AAF 11 00 E0 B7 0521*       ld de,filedata
041AB3 CD E3 19 04 0522*       call vdu_load_buffer
041AB7             0523*   
041AB7             0524*   ; read the next block
041AB7 C3 8D 1A 04 0525*       jp @read_file
041ABB             0526*   
041ABB             0527*   ; close the file
041ABB             0528*   @close_file:
041ABB 3A C4 1A 04 0529*       ld a,(@filehandle)
041ABF             0530*       MOSCALL mos_fclose
041ABF 3E 0B       0001*M1 			LD	A, function
041AC1 5B CF       0002*M1 			RST.LIL	08h
041AC3 C9          0531*       ret ; vdu_load_buffer_from_file
041AC4             0532*   
041AC4 00          0533*   @filehandle: db 0 ; file handle
041AC5 00 00 00    0534*   @fil: dl 0 ; pointer to FIL struct
041AC8             0535*   
041AC8 00 00 00    0536*   @chunkpointer: dl 0 ; pointer to current chunk
041ACB             0537*   
041ACB             0538*   ; File information structure (FILINFO)
041ACB             0539*   @filinfo:
041ACB 00 00 00 00 0540*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041ACF 00 00       0541*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041AD1 00 00       0542*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041AD3 00          0543*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041AD4 00 00 00 00 0544*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041AE1 00 00 00 00 0545*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041BE1             0038        include "vdu_fonts.inc"
041BE1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041C00             0002*   ; select font
041C00             0003*   ; inputs: hl = bufferId, a = font flags
041C00             0004*   ; Flags:
041C00             0005*   ; Bit	Description
041C00             0006*   ; 0	Adjust cursor position to ensure text baseline is aligned
041C00             0007*   ;   0: Do not adjust cursor position (best for changing font on a new line)
041C00             0008*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
041C00             0009*   ; 1-7	Reserved for future use
041C00             0010*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041C00             0011*   vdu_font_select:
041C00 22 17 1C 04 0012*       ld (@bufferId),hl
041C04 32 19 1C 04 0013*       ld (@flags),a
041C08 21 13 1C 04 0014*       ld hl,@cmd
041C0C 01 07 00 00 0015*       ld bc,@end-@cmd
041C10 5B DF       0016*       rst.lil $18
041C12 C9          0017*       ret
041C13 17 00 95 00 0018*   @cmd: db 23, 0, 0x95, 0
041C17 00 00       0019*   @bufferId: dw 0x0000
041C19 00          0020*   @flags: db 0x00
041C1A             0021*   @end:
041C1A             0022*   
041C1A             0023*   ; create font from buffer
041C1A             0024*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041C1A             0025*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041C1A             0026*   vdu_font_create:
041C1A 22 3F 1C 04 0027*       ld (@bufferId),hl
041C1E ED 53 41 1C 0028*       ld (@width),de ; also loads height
       04          
041C23 32 44 1C 04 0029*       ld (@flags),a
041C27 7A          0030*       ld a,d ; height
041C28 32 43 1C 04 0031*       ld (@ascent),a ; ascent = height
041C2C             0032*   ; consolidate buffer
041C2C CD 3B 1A 04 0033*       call vdu_consolidate_buffer
041C30             0034*   ; create font
041C30 21 3B 1C 04 0035*       ld hl,@cmd
041C34 01 0A 00 00 0036*       ld bc,@end-@cmd
041C38 5B DF       0037*       rst.lil $18
041C3A C9          0038*       ret
041C3B 17 00 95 01 0039*   @cmd: db 23, 0, 0x95, 1
041C3F 00 00       0040*   @bufferId: dw 0x0000
041C41 00          0041*   @width: db 0x00
041C42 00          0042*   @height: db 0x00
041C43 00          0043*   @ascent: db 0x00
041C44 00          0044*   @flags: db 0x00
041C45             0045*   @end:
041C45             0046*   
041C45             0047*   ; set or adjust font property
041C45             0048*   ; inputs: hl = bufferId, a = field, de = value
041C45             0049*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041C45             0050*   vdu_font_property:
041C45 22 61 1C 04 0051*       ld (@bufferId),hl
041C49 32 63 1C 04 0052*       ld (@field),a
041C4D ED 53 64 1C 0053*       ld (@value),de
       04          
041C52 21 5D 1C 04 0054*       ld hl,@cmd
041C56 01 09 00 00 0055*       ld bc,@end-@cmd
041C5A 5B DF       0056*       rst.lil $18
041C5C C9          0057*       ret
041C5D 17 00 95 02 0058*   @cmd: db 23, 0, 0x95, 2
041C61 00 00       0059*   @bufferId: dw 0x0000
041C63 00          0060*   @field: db 0x00
041C64 00 00       0061*   @value: dw 0x0000
041C66 00          0062*   @end: db 0x00 ; padding
041C67             0063*   
041C67             0064*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041C67             0065*   
041C67             0066*   ; Clear/Delete font
041C67             0067*   ; inputs: hl = bufferId
041C67             0068*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041C67             0069*   vdu_font_clear:
041C67 22 7A 1C 04 0070*       ld (@bufferId),hl
041C6B 21 76 1C 04 0071*       ld hl,@cmd
041C6F 01 06 00 00 0072*       ld bc,@end-@cmd
041C73 5B DF       0073*       rst.lil $18
041C75 C9          0074*       ret
041C76 17 00 95 04 0075*   @cmd: db 23, 0, 0x95, 4
041C7A 00 00       0076*   @bufferId: dw 0x0000
041C7C 00          0077*   @end: db 0x00 ; padding
041C7D             0078*   
041C7D             0079*   ; Copy system font to buffer
041C7D             0080*   ; inputs: hl = bufferId
041C7D             0081*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041C7D             0082*   vdu_font_copy_system:
041C7D 22 90 1C 04 0083*       ld (@bufferId),hl
041C81 21 8C 1C 04 0084*       ld hl,@cmd
041C85 01 06 00 00 0085*       ld bc,@end-@cmd
041C89 5B DF       0086*       rst.lil $18
041C8B C9          0087*       ret
041C8C 17 00 95 05 0088*   @cmd: db 23, 0, 0x95, 5
041C90 00 00       0089*   @bufferId: dw 0x0000
041C92 00          0090*   @end: db 0x00 ; padding
041C93             0039        include "vdu_plot.inc"
041C93 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
041D00             0002*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041D00             0003*   ; PLOT code 	(Decimal) 	Effect
041D00             0004*   ; &00-&07 	0-7 	Solid line, includes both ends
041D00             0005*   plot_sl_both: equ 0x00
041D00             0006*   
041D00             0007*   ; &08-&0F 	8-15 	Solid line, final point omitted
041D00             0008*   plot_sl_first: equ 0x08
041D00             0009*   
041D00             0010*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
041D00             0011*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
041D00             0012*   
041D00             0013*   ; &20-&27 	32-39 	Solid line, first point omitted
041D00             0014*   plot_sl_last: equ 0x20
041D00             0015*   
041D00             0016*   ; &28-&2F 	40-47 	Solid line, both points omitted
041D00             0017*   plot_sl_none: equ 0x28
041D00             0018*   
041D00             0019*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
041D00             0020*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
041D00             0021*   
041D00             0022*   ; &40-&47 	64-71 	Point plot
041D00             0023*   plot_pt: equ 0x40
041D00             0024*   
041D00             0025*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
041D00             0026*   plot_lf_lr_non_bg: equ 0x48
041D00             0027*   
041D00             0028*   ; &50-&57 	80-87 	Triangle fill
041D00             0029*   plot_tf: equ 0x50
041D00             0030*   
041D00             0031*   ; &58-&5F 	88-95 	Line fill right to background §§
041D00             0032*   plot_lf_r_bg: equ 0x58
041D00             0033*   
041D00             0034*   ; &60-&67 	96-103 	Rectangle fill
041D00             0035*   plot_rf: equ 0x60
041D00             0036*   
041D00             0037*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
041D00             0038*   plot_lf_lr_fg: equ 0x60
041D00             0039*   
041D00             0040*   ; &70-&77 	112-119 	Parallelogram fill
041D00             0041*   plot_pf: equ 0x70
041D00             0042*   
041D00             0043*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
041D00             0044*   plot_lf_r_non_fg: equ 0x78
041D00             0045*   
041D00             0046*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
041D00             0047*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
041D00             0048*   
041D00             0049*   ; &90-&97 	144-151 	Circle outline
041D00             0050*   plot_co: equ 0x90
041D00             0051*   
041D00             0052*   ; &98-&9F 	152-159 	Circle fill
041D00             0053*   plot_cf: equ 0x98
041D00             0054*   
041D00             0055*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
041D00             0056*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
041D00             0057*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
041D00             0058*   
041D00             0059*   ; &B8-&BF 	184-191 	Rectangle copy/move
041D00             0060*   plot_rcm: equ 0xB8
041D00             0061*   
041D00             0062*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
041D00             0063*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
041D00             0064*   ; &D0-&D7 	208-215 	Not defined
041D00             0065*   ; &D8-&DF 	216-223 	Not defined
041D00             0066*   ; &E0-&E7 	224-231 	Not defined
041D00             0067*   
041D00             0068*   ; &E8-&EF 	232-239 	Bitmap plot §
041D00             0069*   plot_bmp: equ 0xE8
041D00             0070*   
041D00             0071*   ; &F0-&F7 	240-247 	Not defined
041D00             0072*   ; &F8-&FF 	248-255 	Not defined
041D00             0073*   
041D00             0074*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
041D00             0075*   ; Agon Console8 VDP 2.2.0
041D00             0076*   
041D00             0077*   ; Within each group of eight plot codes, the effects are as follows:
041D00             0078*   ; Plot code 	Effect
041D00             0079*   ; 0 	Move relative
041D00             0080*   mv_rel: equ 0
041D00             0081*   
041D00             0082*   ; 1 	Plot relative in current foreground colour
041D00             0083*   dr_rel_fg: equ 1
041D00             0084*   
041D00             0085*   ; 2 	Not supported (Plot relative in logical inverse colour)
041D00             0086*   ; 3 	Plot relative in current background colour
041D00             0087*   dr_rel_bg: equ 3
041D00             0088*   
041D00             0089*   ; 4 	Move absolute
041D00             0090*   mv_abs: equ 4
041D00             0091*   
041D00             0092*   ; 5 	Plot absolute in current foreground colour
041D00             0093*   dr_abs_fg: equ 5
041D00             0094*   
041D00             0095*   ; 6 	Not supported (Plot absolute in logical inverse colour)
041D00             0096*   ; 7 	Plot absolute in current background colour
041D00             0097*   dr_abs_bg: equ 7
041D00             0098*   
041D00             0099*   ; Codes 0-3 use the position data provided as part of the command
041D00             0100*   ; as a relative position, adding the position given to the current
041D00             0101*   ; graphical cursor position. Codes 4-7 use the position data provided
041D00             0102*   ; as part of the command as an absolute position, setting the current
041D00             0103*   ; graphical cursor position to the position given.
041D00             0104*   
041D00             0105*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
041D00             0106*   ; current pixel colour. These operations cannot currently be supported
041D00             0107*   ; by the graphics system the Agon VDP uses, so these codes are not
041D00             0108*   ; supported. Support for these codes may be added in a future version
041D00             0109*   ; of the VDP firmware.
041D00             0110*   
041D00             0111*   ; 16 colour palette constants
041D00             0112*   c_black: equ 0
041D00             0113*   c_red_dk: equ 1
041D00             0114*   c_green_dk: equ 2
041D00             0115*   c_yellow_dk: equ 3
041D00             0116*   c_blue_dk: equ 4
041D00             0117*   c_magenta_dk: equ 5
041D00             0118*   c_cyan_dk: equ 6
041D00             0119*   c_grey: equ 7
041D00             0120*   c_grey_dk: equ 8
041D00             0121*   c_red: equ 9
041D00             0122*   c_green: equ 10
041D00             0123*   c_yellow: equ 11
041D00             0124*   c_blue: equ 12
041D00             0125*   c_magenta: equ 13
041D00             0126*   c_cyan: equ 14
041D00             0127*   c_white: equ 15
041D00             0128*   
041D00             0129*   ; VDU 25, mode, x; y;: PLOT command
041D00             0130*   ; inputs: a=mode, bc=x0, de=y0
041D00             0131*   vdu_plot:
041D00 32 1A 1D 04 0132*       ld (@mode),a
041D04 ED 43 1B 1D 0133*       ld (@x0),bc
       04          
041D09 ED 53 1D 1D 0134*       ld (@y0),de
       04          
041D0E 21 19 1D 04 0135*   	ld hl,@cmd
041D12 01 06 00 00 0136*   	ld bc,@end-@cmd
041D16 5B DF       0137*   	rst.lil $18
041D18 C9          0138*   	ret
041D19 19          0139*   @cmd:   db 25
041D1A 00          0140*   @mode:  db 0
041D1B 00 00       0141*   @x0: 	dw 0
041D1D 00 00       0142*   @y0: 	dw 0
041D1F 00          0143*   @end:   db 0 ; extra byte to soak up deu
041D20             0144*   
041D20             0145*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041D20             0146*   ; &E8-&EF 	232-239 	Bitmap plot §
041D20             0147*   ; VDU 25, mode, x; y;: PLOT command
041D20             0148*   ; inputs: bc=x0, de=y0
041D20             0149*   ; prerequisites: vdu_buff_select
041D20             0150*   vdu_plot_bmp:
041D20 ED 43 37 1D 0151*       ld (@x0),bc
       04          
041D25 ED 53 39 1D 0152*       ld (@y0),de
       04          
041D2A 21 35 1D 04 0153*   	ld hl,@cmd
041D2E 01 06 00 00 0154*   	ld bc,@end-@cmd
041D32 5B DF       0155*   	rst.lil $18
041D34 C9          0156*   	ret
041D35 19          0157*   @cmd:   db 25
041D36 ED          0158*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041D37 00 00       0159*   @x0: 	dw 0x0000
041D39 00 00       0160*   @y0: 	dw 0x0000
041D3B 00          0161*   @end:   db 0x00 ; padding
041D3C             0162*   
041D3C             0163*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041D3C             0164*   ; &E8-&EF 	232-239 	Bitmap plot §
041D3C             0165*   ; VDU 25, mode, x; y;: PLOT command
041D3C             0166*   ; inputs: bc=x0, de=y0
041D3C             0167*   ; USING 16.8 FIXED POINT COORDINATES
041D3C             0168*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041D3C             0169*   ;   the fractional portiion of the inputs are truncated
041D3C             0170*   ;   leaving only the 16-bit integer portion
041D3C             0171*   ; prerequisites: vdu_buff_select
041D3C             0172*   vdu_plot_bmp168:
041D3C             0173*   ; populate in the reverse of normal to keep the
041D3C             0174*   ; inputs from stomping on each other
041D3C ED 53 5A 1D 0175*       ld (@y0-1),de
       04          
041D41 ED 43 58 1D 0176*       ld (@x0-1),bc
       04          
041D46 3E ED       0177*       ld a,plot_bmp+dr_abs_fg ; 0xED
041D48 32 58 1D 04 0178*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
041D4C 21 57 1D 04 0179*   	ld hl,@cmd
041D50 01 06 00 00 0180*   	ld bc,@end-@cmd
041D54 5B DF       0181*   	rst.lil $18
041D56 C9          0182*   	ret
041D57 19          0183*   @cmd:   db 25
041D58 ED          0184*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041D59 00 00       0185*   @x0: 	dw 0x0000
041D5B 00 00       0186*   @y0: 	dw 0x0000
041D5D             0187*   @end:  ; no padding required b/c we shifted de right
041D5D             0188*   
041D5D             0189*   ; draw a filled rectangle
041D5D             0190*   vdu_plot_rf:
041D5D ED 43 84 1D 0191*       ld (@x0),bc
       04          
041D62 ED 53 86 1D 0192*       ld (@y0),de
       04          
041D67 DD 22 8A 1D 0193*       ld (@x1),ix
       04          
041D6C FD 22 8C 1D 0194*       ld (@y1),iy
       04          
041D71 3E 19       0195*       ld a,25 ; we have to reload the 2nd plot command
041D73 32 88 1D 04 0196*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041D77 21 82 1D 04 0197*   	ld hl,@cmd0
041D7B 01 0C 00 00 0198*   	ld bc,@end-@cmd0
041D7F 5B DF       0199*   	rst.lil $18
041D81 C9          0200*       ret
041D82 19          0201*   @cmd0:  db 25 ; plot
041D83 04          0202*   @arg0:  db plot_sl_both+mv_abs
041D84 00 00       0203*   @x0:    dw 0x0000
041D86 00 00       0204*   @y0:    dw 0x0000
041D88 19          0205*   @cmd1:  db 25 ; plot
041D89 65          0206*   @arg1:  db plot_rf+dr_abs_fg
041D8A 00 00       0207*   @x1:    dw 0x0000
041D8C 00 00       0208*   @y1:    dw 0x0000
041D8E 00          0209*   @end:   db 0x00 ; padding
041D8F             0210*   
041D8F             0211*   ; draw a filled circle
041D8F             0212*   vdu_plot_cf:
041D8F ED 43 B6 1D 0213*       ld (@x0),bc
       04          
041D94 ED 53 B8 1D 0214*       ld (@y0),de
       04          
041D99 DD 22 BC 1D 0215*       ld (@x1),ix
       04          
041D9E FD 22 BE 1D 0216*       ld (@y1),iy
       04          
041DA3 3E 19       0217*       ld a,25 ; we have to reload the 2nd plot command
041DA5 32 BA 1D 04 0218*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041DA9 21 B4 1D 04 0219*   	ld hl,@cmd0
041DAD 01 0C 00 00 0220*   	ld bc,@end-@cmd0
041DB1 5B DF       0221*   	rst.lil $18
041DB3 C9          0222*       ret
041DB4 19          0223*   @cmd0:  db 25 ; plot
041DB5 04          0224*   @arg0:  db plot_sl_both+mv_abs
041DB6 00 00       0225*   @x0:    dw 0x0000
041DB8 00 00       0226*   @y0:    dw 0x0000
041DBA 19          0227*   @cmd1:  db 25 ; plot
041DBB 9D          0228*   @arg1:  db plot_cf+dr_abs_fg
041DBC 00 00       0229*   @x1:    dw 0x0000
041DBE 00 00       0230*   @y1:    dw 0x0000
041DC0 00          0231*   @end:   db 0x00 ; padding
041DC1             0040        include "vdu_sprites.inc"
041DC1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041E00             0002*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041E00             0003*   ; the VDP can support up to 256 sprites. They must be defined
041E00             0004*   ; contiguously, and so the first sprite is sprite 0.
041E00             0005*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041E00             0006*   ; Once a selection of sprites have been defined, you can activate
041E00             0007*   ; them using the VDU 23, 27, 7, n command, where n is the number
041E00             0008*   ; of sprites to activate. This will activate the first n sprites,
041E00             0009*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041E00             0010*   
041E00             0011*   ; A single sprite can have multiple "frames", referring to
041E00             0012*   ; different bitmaps.
041E00             0013*   ; (These bitmaps do not need to be the same size.)
041E00             0014*   ; This allows a sprite to include an animation sequence,
041E00             0015*   ; which can be stepped through one frame at a time, or picked
041E00             0016*   ; in any order.
041E00             0017*   
041E00             0018*   ; Any format of bitmap can be used as a sprite frame. It should
041E00             0019*   ; be noted however that "native" format bitmaps are not
041E00             0020*   ; recommended for use as sprite frames, as they cannot get
041E00             0021*   ; erased from the screen. (As noted above, the "native" bitmap
041E00             0022*   ; format is not really intended for general use.) This is part
041E00             0023*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041E00             0024*   ; screen are now stored in RGBA2222 format.
041E00             0025*   
041E00             0026*   ; An "active" sprite can be hidden, so it will stop being drawn,
041E00             0027*   ; and then later shown again.
041E00             0028*   
041E00             0029*   ; Moving sprites around the screen is done by changing the
041E00             0030*   ; position of the sprite. This can be done either by setting
041E00             0031*   ; the absolute position of the sprite, or by moving the sprite
041E00             0032*   ; by a given number of pixels. (Sprites are positioned using
041E00             0033*   ; pixel coordinates, and not by the logical OS coordinate system.)
041E00             0034*   ; In the current sprite system, sprites will not update their
041E00             0035*   ; position on-screen until either another drawing operation is
041E00             0036*   ; performed or an explicit VDU 23, 27, 15 command is performed.
041E00             0037*   
041E00             0038*   ; VDU 23, 27, 4, n: Select sprite n
041E00             0039*   ; inputs: a is the 8-bit sprite id
041E00             0040*   vdu_sprite_select:
041E00 32 12 1E 04 0041*       ld (@sprite),a
041E04 21 0F 1E 04 0042*       ld hl,@cmd
041E08 01 04 00 00 0043*       ld bc,@end-@cmd
041E0C 5B DF       0044*       rst.lil $18
041E0E C9          0045*       ret
041E0F 17 1B 04    0046*   @cmd:    db 23,27,4
041E12 00          0047*   @sprite: db 0x00
041E13             0048*   @end:
041E13             0049*   
041E13             0050*   ; VDU 23, 27, 5: Clear frames in current sprite
041E13             0051*   ; inputs: none
041E13             0052*   ; prerequisites: vdu_sprite_select
041E13             0053*   vdu_sprite_clear_frames:
041E13 21 1E 1E 04 0054*       ld hl,@cmd
041E17 01 03 00 00 0055*       ld bc,@end-@cmd
041E1B 5B DF       0056*       rst.lil $18
041E1D C9          0057*       ret
041E1E 17 1B 05    0058*   @cmd: db 23,27,5
041E21             0059*   @end:
041E21             0060*   
041E21             0061*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
041E21             0062*   ; inputs: a is the 8-bit bitmap number
041E21             0063*   ; prerequisites: vdu_sprite_select
041E21             0064*   vdu_sprite_add_bmp:
041E21 32 33 1E 04 0065*       ld (@bmp),a
041E25 21 30 1E 04 0066*       ld hl,@cmd
041E29 01 04 00 00 0067*       ld bc,@end-@cmd
041E2D 5B DF       0068*       rst.lil $18
041E2F C9          0069*       ret
041E30 17 1B 06    0070*   @cmd: db 23,27,6
041E33 00          0071*   @bmp: db 0x00
041E34             0072*   @end:
041E34             0073*   
041E34             0074*   ; VDU 23, 27, 7, n: Activate n sprites
041E34             0075*   ; inputs: a is the number of sprites to activate
041E34             0076*   ; prerequisites: each sprite activated must have at least one frame attached to it
041E34             0077*   vdu_sprite_activate:
041E34 32 46 1E 04 0078*       ld (@num),a
041E38 21 43 1E 04 0079*       ld hl,@cmd
041E3C 01 04 00 00 0080*       ld bc,@end-@cmd
041E40 5B DF       0081*       rst.lil $18
041E42 C9          0082*       ret
041E43 17 1B 07    0083*   @cmd: db 23,27,7
041E46 00          0084*   @num: db 0x00
041E47             0085*   @end:
041E47             0086*   
041E47             0087*   ; VDU 23, 27, 8: Select next frame of current sprite
041E47             0088*   ; inputs: none
041E47             0089*   ; prerequisites: vdu_sprite_select
041E47             0090*   vdu_sprite_next_frame:
041E47 21 52 1E 04 0091*       ld hl,@cmd
041E4B 01 03 00 00 0092*       ld bc,@end-@cmd
041E4F 5B DF       0093*       rst.lil $18
041E51 C9          0094*       ret
041E52 17 1B 08    0095*   @cmd: db 23,27,8
041E55             0096*   @end:
041E55             0097*   
041E55             0098*   ; VDU 23, 27, 9: Select previous frame of current sprite
041E55             0099*   ; inputs: none
041E55             0100*   ; prerequisites: vdu_sprite_select
041E55             0101*   vdu_sprite_prev_frame:
041E55 21 60 1E 04 0102*       ld hl,@cmd
041E59 01 03 00 00 0103*       ld bc,@end-@cmd
041E5D 5B DF       0104*       rst.lil $18
041E5F C9          0105*       ret
041E60 17 1B 09    0106*   @cmd: db 23,27,9
041E63             0107*   @end:
041E63             0108*   
041E63             0109*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
041E63             0110*   ; inputs: a is frame number to select
041E63             0111*   ; prerequisites: vdu_sprite_select
041E63             0112*   vdu_sprite_select_frame:
041E63 32 75 1E 04 0113*       ld (@frame),a
041E67 21 72 1E 04 0114*       ld hl,@cmd
041E6B 01 04 00 00 0115*       ld bc,@end-@cmd
041E6F 5B DF       0116*       rst.lil $18
041E71 C9          0117*       ret
041E72 17 1B 0A    0118*   @cmd:    db 23,27,10
041E75 00          0119*   @frame:  db 0x00
041E76             0120*   @end:
041E76             0121*   
041E76             0122*   ; VDU 23, 27, 11: Show current sprite
041E76             0123*   ; inputs: none
041E76             0124*   ; prerequisites: vdu_sprite_select
041E76             0125*   vdu_sprite_show:
041E76 21 81 1E 04 0126*       ld hl,@cmd
041E7A 01 03 00 00 0127*       ld bc,@end-@cmd
041E7E 5B DF       0128*       rst.lil $18
041E80 C9          0129*       ret
041E81 17 1B 0B    0130*   @cmd: db 23,27,11
041E84             0131*   @end:
041E84             0132*   
041E84             0133*   ; VDU 23, 27, 12: Hide current sprite
041E84             0134*   ; inputs: none
041E84             0135*   ; prerequisites: vdu_sprite_select
041E84             0136*   vdu_sprite_hide:
041E84 21 8F 1E 04 0137*       ld hl,@cmd
041E88 01 03 00 00 0138*       ld bc,@end-@cmd
041E8C 5B DF       0139*       rst.lil $18
041E8E C9          0140*       ret
041E8F 17 1B 0C    0141*   @cmd: db 23,27,12
041E92             0142*   @end:
041E92             0143*   
041E92             0144*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041E92             0145*   ; inputs: bc is x coordinate, de is y coordinate
041E92             0146*   ; prerequisites: vdu_sprite_select
041E92             0147*   vdu_sprite_move_abs:
041E92 ED 43 AA 1E 0148*       ld (@xpos),bc
       04          
041E97 ED 53 AC 1E 0149*       ld (@ypos),de
       04          
041E9C 21 A7 1E 04 0150*       ld hl,@cmd
041EA0 01 07 00 00 0151*       ld bc,@end-@cmd
041EA4 5B DF       0152*       rst.lil $18
041EA6 C9          0153*       ret
041EA7 17 1B 0D    0154*   @cmd:  db 23,27,13
041EAA 00 00       0155*   @xpos: dw 0x0000
041EAC 00 00       0156*   @ypos: dw 0x0000
041EAE 00          0157*   @end:  db 0x00 ; padding
041EAF             0158*   
041EAF             0159*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041EAF             0160*   ; inputs: bc is x coordinate, de is y coordinate
041EAF             0161*   ; prerequisites: vdu_sprite_select
041EAF             0162*   vdu_sprite_move_rel:
041EAF ED 43 C7 1E 0163*       ld (@dx),bc
       04          
041EB4 ED 53 C9 1E 0164*       ld (@dy),de
       04          
041EB9 21 C4 1E 04 0165*       ld hl,@cmd
041EBD 01 07 00 00 0166*       ld bc,@end-@cmd
041EC1 5B DF       0167*       rst.lil $18
041EC3 C9          0168*       ret
041EC4 17 1B 0E    0169*   @cmd: db 23,27,14
041EC7 00 00       0170*   @dx:  dw 0x0000
041EC9 00 00       0171*   @dy:  dw 0x0000
041ECB 00          0172*   @end: db 0x00 ; padding
041ECC             0173*   
041ECC             0174*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041ECC             0175*   ; USING 16.8 FIXED POINT COORDINATES
041ECC             0176*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041ECC             0177*   ;   the fractional portiion of the inputs are truncated
041ECC             0178*   ;   leaving only the 16-bit integer portion
041ECC             0179*   ; prerequisites: vdu_sprite_select
041ECC             0180*   vdu_sprite_move_abs168:
041ECC             0181*   ; offset inputs by the gfx origin
041ECC             0182*   ; y coordinate
041ECC 21 00 00 00 0183*       ld hl,origin_top*256
041ED0 19          0184*       add hl,de
041ED1 22 F3 1E 04 0185*       ld (@ypos-1),hl
041ED5             0186*   ; x coordinate
041ED5 21 00 80 00 0187*       ld hl,origin_left*256
041ED9 09          0188*       add hl,bc
041EDA 22 F1 1E 04 0189*       ld (@xpos-1),hl
041EDE             0190*   ; prepare vdu command
041EDE 3E 0D       0191*       ld a,13       ; restore the final byte of the command
041EE0 32 F1 1E 04 0192*       ld (@cmd+2),a ; string that got stomped on by bcu
041EE4 21 EF 1E 04 0193*       ld hl,@cmd
041EE8 01 07 00 00 0194*       ld bc,@end-@cmd
041EEC 5B DF       0195*       rst.lil $18
041EEE C9          0196*       ret
041EEF 17 1B 0D    0197*   @cmd:  db 23,27,13
041EF2 00 00       0198*   @xpos: dw 0x0000
041EF4 00 00       0199*   @ypos: dw 0x0000
041EF6             0200*   @end:  ; no padding required b/c we shifted de right
041EF6             0201*   
041EF6             0202*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041EF6             0203*   ; USING 16.8 FIXED POINT COORDINATES
041EF6             0204*   ; inputs: ub.c is dx, ud.e is dy
041EF6             0205*   ;   the fractional portiion of the inputs are truncated
041EF6             0206*   ;   leaving only the 16-bit integer portion
041EF6             0207*   ; prerequisites: vdu_sprite_select
041EF6             0208*   vdu_sprite_move_rel168:
041EF6             0209*   ; populate in the reverse of normal to keep the
041EF6             0210*   ; inputs from stomping on each other
041EF6 ED 53 15 1F 0211*       ld (@dy-1),de
       04          
041EFB ED 43 13 1F 0212*       ld (@dx-1),bc
       04          
041F00 3E 0E       0213*       ld a,14       ; restore the final byte of the command
041F02 32 13 1F 04 0214*       ld (@cmd+2),a ; string that got stomped on by bcu
041F06 21 11 1F 04 0215*       ld hl,@cmd
041F0A 01 07 00 00 0216*       ld bc,@end-@cmd
041F0E 5B DF       0217*       rst.lil $18
041F10 C9          0218*       ret
041F11 17 1B 0E    0219*   @cmd:  db 23,27,14
041F14 00 00       0220*   @dx: dw 0x0000
041F16 00 00       0221*   @dy: dw 0x0000
041F18             0222*   @end:  ; no padding required b/c we shifted de right
041F18             0223*   
041F18             0224*   ; VDU 23, 27, 15: Update the sprites in the GPU
041F18             0225*   ; inputs: none
041F18             0226*   vdu_sprite_update:
041F18 21 23 1F 04 0227*       ld hl,@cmd
041F1C 01 03 00 00 0228*       ld bc,@end-@cmd
041F20 5B DF       0229*       rst.lil $18
041F22 C9          0230*       ret
041F23 17 1B 0F    0231*   @cmd: db 23,27,15
041F26             0232*   @end:
041F26             0233*   
041F26             0234*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
041F26             0235*   ; inputs: none
041F26             0236*   vdu_sprite_bmp_reset:
041F26 21 31 1F 04 0237*       ld hl,@cmd
041F2A 01 03 00 00 0238*       ld bc,@end-@cmd
041F2E 5B DF       0239*       rst.lil $18
041F30 C9          0240*       ret
041F31 17 1B 10    0241*   @cmd: db 23,27,16
041F34             0242*   @end:
041F34             0243*   
041F34             0244*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
041F34             0245*   ; inputs: none
041F34             0246*   vdu_sprite_reset:
041F34 21 3F 1F 04 0247*       ld hl,@cmd
041F38 01 03 00 00 0248*       ld bc,@end-@cmd
041F3C 5B DF       0249*       rst.lil $18
041F3E C9          0250*       ret
041F3F 17 1B 11    0251*   @cmd: db 23,27,17
041F42             0252*   @end:
041F42             0253*   
041F42             0254*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
041F42             0255*   ; inputs: a is the GCOL paint mode
041F42             0256*   ; prerequisites: vdu_sprite_select
041F42             0257*   vdu_sprite_set_gcol:
041F42 32 54 1F 04 0258*       ld (@mode),a
041F46 21 51 1F 04 0259*       ld hl,@cmd
041F4A 01 04 00 00 0260*       ld bc,@end-@cmd
041F4E 5B DF       0261*       rst.lil $18
041F50 C9          0262*       ret
041F51 17 1B 12    0263*   @cmd:  db 23,27,18
041F54 00          0264*   @mode: db 0x00
041F55             0265*   @end:
041F55             0266*   
041F55             0267*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
041F55             0268*   ; inputs: hl=bufferId
041F55             0269*   ; prerequisites: vdu_sprite_select
041F55             0270*   vdu_sprite_add_buff:
041F55 22 67 1F 04 0271*       ld (@bufferId),hl
041F59 21 64 1F 04 0272*       ld hl,@cmd
041F5D 01 05 00 00 0273*       ld bc,@end-@cmd
041F61 5B DF       0274*       rst.lil $18
041F63 C9          0275*       ret
041F64 17 1B 26    0276*   @cmd:      db 23,27,0x26
041F67 00 00       0277*   @bufferId: dw 0x0000
041F69 00          0278*   @end:      db 0x00 ; padding
041F6A             0041    
041F6A             0042    ; APPLICATION INCLUDES
041F6A             0043        include "collisions.inc"
041F6A FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
042000             0002*   ; ====== COLLISION DETECTION ======
042000             0003*   ; --- constants ---
042000             0004*   ; sprite_collisions flags
042000             0005*   collides_with_player: equ %00000001
042000             0006*   collides_with_laser: equ %00000010
042000             0007*   sprite_alive: equ 6 ; set when sprite is alive
042000             0008*   sprite_just_died: equ 7 ; set when sprite just died
042000             0009*   
042000             0010*   collide_top: equ %00001000
042000             0011*   collide_bottom: equ %00000100
042000             0012*   collide_left: equ %00000010
042000             0013*   collide_right: equ %00000001
042000             0014*   
042000             0015*   ; this routine detects collisions between two collidable objects,
042000             0016*   ; which can include sprites, active tiles, or any screen coordinate
042000             0017*   ; which has been set up with a sprite table structure that includes dim_x
042000             0018*   ; representing the radius of the collidable object
042000             0019*   ; inputs: ix and iy point to the colliding objects' sprite table records
042000             0020*   ; outputs: uh.l = distance - sum of radii
042000             0021*   ;          zero flag set or sign flag negative if collision detected
042000             0022*   ;          dx168 and dy168 are also populated with the signed displacements
042000             0023*   ; destroys: everything except indexes
042000             0024*   check_collision:
042000             0025*   ; compute dx = x1-x0
042000 DD 27 01    0026*       ld hl,(ix+sprite_x)
042003 FD 17 01    0027*       ld de,(iy+sprite_x)
042006 AF          0028*       xor a ; clear carry
042007 ED 52       0029*       sbc hl,de
042009 22 2C 0B 04 0030*       ld (dx168),hl ; dx to scratch
04200D             0031*   ; compute dy = y1-y0
04200D DD 27 04    0032*       ld hl,(ix+sprite_y)
042010 FD 17 04    0033*       ld de,(iy+sprite_y)
042013 AF          0034*       xor a ; clear carry
042014 ED 52       0035*       sbc hl,de ; hl = dy
042016 22 32 0B 04 0036*       ld (dy168),hl ; dy to scratch
04201A             0037*   ; compute euclidean distance between centers
04201A CD 38 0B 04 0038*       call distance168 ; uh.l = distance
04201E             0039*   ; check for overlap by summing half the radii
04201E DD 7E 1E    0040*       ld a,(ix+sprite_dim_x)
042021 CB 3F       0041*       srl a ; divide by 2
042023 FD 5E 1E    0042*       ld e,(iy+sprite_dim_x)
042026 CB 3B       0043*       srl e ; divide by 2
042028 83          0044*       add a,e
042029 11 00 00 00 0045*       ld de,0 ; clear deu and e
04202D 57          0046*       ld d,a ; ud.e = sum of radii
04202E B7          0047*       or a ; clear carry
04202F ED 52       0048*       sbc hl,de ; uh.l = distance - sum of radii
042031 C9          0049*       ret
042032             0050*   ; end check_collision
042032             0044        include "enemies.inc"
042032 04          0001*   max_enemy_sprites: db 4
042033             0002*   
042033             0003*   ; sprite_type
042033             0004*   enemy_dead: equ 0
042033             0005*   enemy_seeker: equ 1
042033             0006*   enemy_fireball: equ 6
042033             0007*   explosion: equ 255
042033             0008*   move_enemies:
042033             0009*   ; are there any active enemies or explosions?
042033 3A 93 5B 04 0010*       ld a,(table_active_sprites)
042037 A7          0011*       and a ; will be zero if no alive enemies or explosions
042038 C2 3D 20 04 0012*       jp nz,@they_live
04203C             0013*       ; DEPRECATED: though may be used in the future
04203C             0014*       ; ld hl,enemies_dead
04203C             0015*       ; ld (enemies_state),hl
04203C             0016*       ; END DEPRECATED
04203C C9          0017*       ret
04203D             0018*   @they_live:
04203D             0019*   ; initialize pointers and loop counter
04203D FD 21 00 59 0020*       ld iy,table_base ; set iy to first record in table
       04          
042042 06 10       0021*       ld b,table_max_records ; loop counter
042044             0022*   @move_loop:
042044 FD 22 90 5B 0023*       ld (table_pointer),iy ; update table pointer
       04          
042049 C5          0024*       push bc ; backup loop counter
04204A             0025*   ; check top bit of sprite_type to see if sprite is just spawned
04204A FD 7E 16    0026*       ld a,(iy+sprite_type)
04204D CB 7F       0027*       bit 7,a
04204F C2 8E 20 04 0028*       jp nz,@next_record ; if just spawned, skip to next record
042053             0029*   ; check sprite_type to see if sprite is active
042053 A7          0030*       and a ; if zero, sprite is dead
042054 CA 8E 20 04 0031*       jp z,@next_record ; ... and we skip to next record
042058             0032*   ; otherwise we prepare to move the sprite
042058 FD 27 1A    0033*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
04205B             0034*       callHL
04205B 01 61 20 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
04205F C5          0002*M1     push bc ; which constitutes the return address
042060 E9          0003*M1     jp (hl) ; Jump to the address in HL
042061             0004*M1 @@:
042061             0035*   ; move_enemies_loop_return: return from behavior subroutines
042061 FD 2A 90 5B 0036*       ld iy,(table_pointer) ; get back table pointer
       04          
042066             0037*   ; now we check results of all the moves
042066 FD CB 1D 7E 0038*       bit sprite_just_died,(iy+sprite_collisions)
04206A CA 76 20 04 0039*       jp z,@draw_sprite ; if not dead, draw sprite
04206E CD EC 5B 04 0040*       call table_deactivate_sprite
042072 C3 8E 20 04 0041*       jp @next_record ; and to the next record
042076             0042*   @draw_sprite:
042076 FD 7E 00    0043*       ld a,(iy+sprite_id) ; get spriteId
042079 CD 00 1E 04 0044*       call vdu_sprite_select ; select sprite
04207D FD 7E 22    0045*       ld a,(iy+sprite_animation)
042080 CD 63 1E 04 0046*       call vdu_sprite_select_frame
042084 FD 07 01    0047*       ld bc,(iy+sprite_x)
042087 FD 17 04    0048*       ld de,(iy+sprite_y)
04208A CD CC 1E 04 0049*       call vdu_sprite_move_abs168
04208E             0050*   ; fall through to @next_record
04208E             0051*   @next_record:
04208E ED 33 29    0052*       lea iy,iy+table_bytes_per_record
042091 AF          0053*       xor a ; clears carry flag
042092 32 94 5B 04 0054*       ld (sprite_screen_edge),a ; clear screen edge collision flag
042096 C1          0055*       pop bc ; get back our loop counter
042097 10 AB       0056*       djnz @move_loop ; loop until we've checked all the records
042099             0057*   ; reset all just spawned flags
042099 FD 21 00 59 0058*       ld iy,table_base
       04          
04209E 06 10       0059*       ld b,table_max_records
0420A0             0060*   @reset_just_spawned:
0420A0 C5          0061*       push bc ; back up loop counter
0420A1 FD CB 16 7E 0062*       bit 7,(iy+sprite_type) ; check if just spawned
0420A5 CA D8 20 04 0063*       jp z,@F
0420A9 FD CB 16 BE 0064*       res 7,(iy+sprite_type) ; clear just spawned flag
0420AD FD 7E 00    0065*       ld a,(iy+sprite_id)
0420B0 CD 00 1E 04 0066*       call vdu_sprite_select
0420B4 FD 27 17    0067*       ld hl,(iy+sprite_base_bufferId)
0420B7 FD 46 21    0068*       ld b,(iy+sprite_num_animations)
0420BA FD 4E 20    0069*       ld c,(iy+sprite_num_orientations)
0420BD ED 4C       0070*       mlt bc ; bc total frames
0420BF CD 4D 5D 04 0071*       call sprite_load_frames
0420C3 FD 7E 22    0072*       ld a,(iy+sprite_animation)
0420C6 CD 63 1E 04 0073*       call vdu_sprite_select_frame
0420CA FD 07 01    0074*       ld bc,(iy+sprite_x)
0420CD FD 17 04    0075*       ld de,(iy+sprite_y)
0420D0 CD CC 1E 04 0076*       call vdu_sprite_move_abs168
0420D4 CD 76 1E 04 0077*       call vdu_sprite_show
0420D8             0078*   @@:
0420D8 ED 33 29    0079*       lea iy,iy+table_bytes_per_record
0420DB C1          0080*       pop bc ; get back loop counter
0420DC 10 C2       0081*       djnz @reset_just_spawned
0420DE             0082*   ; and done
0420DE C9          0083*       ret
0420DF             0084*   
0420DF             0085*   ; ; ######### SPRITE BEHAVIOR ROUTINES #########
0420DF             0086*   ; ; each sprite in the table must have one of these defined
0420DF             0087*   ; ; but they need not be unique to a particular sprite
0420DF             0088*   ; ; these are jumped to from move_enemies_do_program,but could come from other places
0420DF             0089*   ; ; and have the option but not obligation to go back to move_enemies_loop_return
0420DF             0090*   ; ; but they can call anything they want between those two endpoints
0420DF             0091*   ; move_programs: ; bookmark in case we want to know the first address of the first subroutine
0420DF             0092*   
0420DF             0093*   ; move_nop: ; does nothing but burn a few cycles changing the PC
0420DF             0094*   ;     ret
0420DF             0095*   
0420DF             0096*   ; move_explosion:
0420DF             0097*   ;     call animate_explosion
0420DF             0098*   ;     ret
0420DF             0099*   
0420DF             0100*   check_enemy_collisions:
0420DF             0101*   ; check what we collide with
0420DF FD 7E 1D    0102*       ld a,(iy+sprite_collisions)
0420E2 F5          0103*       push af ; save collision flags
0420E3 E6 01       0104*       and collides_with_player ; check for collisions with player
0420E5 C4 12 21 04 0105*       call nz,check_enemy_collision_player
0420E9 F1          0106*       pop af ; restore collision flags
0420EA E6 02       0107*       and collides_with_laser ; check for collisions with laser
0420EC C4 F1 20 04 0108*       call nz,check_enemy_collision_laser
0420F0 C9          0109*       ret
0420F1             0110*   check_enemy_collision_laser: ; check for collisions with laser
0420F1 DD 21 00 53 0111*       ld ix,laser_start_variables
       04          
0420F6 DD CB 1D 76 0112*       bit sprite_alive,(ix+sprite_collisions)
0420FA C8          0113*       ret z ; laser dead, nothing to do
0420FB CD 00 20 04 0114*       call check_collision
0420FF F0          0115*       ret p ; no collision
042100 DD 21 00 53 0116*       ld ix,laser_start_variables
       04          
042105 DD CB 1D FE 0117*       set sprite_just_died,(ix+sprite_collisions)
042109 DD CB 1D F6 0118*       set sprite_alive,(ix+sprite_collisions)
04210D CD 26 21 04 0119*       call enemy_kill
042111 C9          0120*       ret
042112             0121*   check_enemy_collision_player: ; check for collisions with player
042112 DD 21 0A 57 0122*       ld ix,player_start_variables
       04          
042117 DD CB 1D 76 0123*       bit sprite_alive,(ix+sprite_collisions)
04211B C8          0124*       ret z ; player dead, no collision
04211C CD 00 20 04 0125*       call check_collision
042120 F0          0126*       ret p ; no collision
042121 CD 26 21 04 0127*       call enemy_kill
042125 C9          0128*       ret
042126             0129*   ; end check_enemy_collisions
042126             0130*   
042126             0131*   ; move_fireballs:
042126             0132*   ;     call move_sprite ; move sprite
042126             0133*   ;     ld a,(sprite_screen_edge) ; check for collision with screen edge
042126             0134*   ;     and a ; if zero we're still within screen bounds
042126             0135*   ;     jp z,move_fireballs_alive
042126             0136*   ; ; otherwise kill sprite
042126             0137*   ;     ld a,%10000000 ; any bit set in high nibble means sprite will die
042126             0138*   ;     ld (iy+sprite_collisions),a
042126             0139*   ;     ret
042126             0140*   ; move_fireballs_alive:
042126             0141*   ;     ld a,(sprite_animation_timer)
042126             0142*   ;     dec a
042126             0143*   ;     ld (sprite_animation_timer),a
042126             0144*   ;     jp nz,move_fireballs_draw
042126             0145*   ;     ld a,(sprite_animation)
042126             0146*   ;     xor %1
042126             0147*   ;     ld (sprite_animation),a
042126             0148*   ;     ld a,6 ; 1/10th of a second timer
042126             0149*   ;     ld (sprite_animation_timer),a
042126             0150*   ;     ; fall through
042126             0151*   
042126             0152*   ; move_fireballs_draw:
042126             0153*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
042126             0154*   ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
042126             0155*   ;     call check_collisions
042126             0156*   ;     ret
042126             0157*   
042126             0158*   ; this routine vanquishes the enemy sprite
042126             0159*   ; and replaces it with an animated explosion
042126             0160*   ; we jump here instead of call because
042126             0161*   ; we want to return to differing locations in the loop
042126             0162*   ; depending on whether we're still sploding
042126             0163*   ; destroys: everything except index registers
042126             0164*   ; returns: a=-1 to indicate enemy died, and an incandescent ball of debris and gas
042126             0165*   enemy_kill:
042126 FD 2A 90 5B 0166*       ld iy,(table_pointer)
       04          
04212B             0167*   ; tally up points
04212B 2A 00 57 04 0168*       ld hl,(player_score)
04212F 01 00 00 00 0169*       ld bc,0 ; clear bcu
042133 FD 4E 26    0170*       ld c,(iy+sprite_points)
042136 09          0171*       add hl,bc
042137 22 00 57 04 0172*       ld (player_score),hl
04213B             0173*   ; ; initialize explosion
04213B             0174*   ; init_explosion:
04213B             0175*   ;     ld hl,explosion
04213B             0176*   ;     ld (sprite_base_bufferId),hl
04213B             0177*   ;     ld hl,move_explosion
04213B             0178*   ;     ld (sprite_move_program),hl
04213B             0179*   ;     ld a,%00000000 ; collides with nothing
04213B             0180*   ;     ld (iy+sprite_collisions),a
04213B             0181*   ;     ld hl,0 ; north
04213B             0182*   ;     ld (sprite_heading),hl
04213B             0183*   ;     ld a,0x04 ; will decrement to 03
04213B             0184*   ;     ld (sprite_animation),a
04213B             0185*   ;     ld a,0x07 ; 7/60th of a second timer
04213B             0186*   ;     ld (sprite_animation_timer),a
04213B             0187*   ;     xor a
04213B             0188*   ;     ld (sprite_move_timer),a
04213B             0189*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
04213B             0190*   ; ; fall through to next_explosion
04213B             0191*   ; next_explosion:
04213B             0192*   ;     ld a,(sprite_animation)
04213B             0193*   ;     dec a ; if rolled negative from zero,we're done sploding
04213B             0194*   ;     jp m,done_explosion
04213B             0195*   ;     ld (sprite_animation),a
04213B             0196*   ;     ld a,0x7 ; 7/60th of a second timer
04213B             0197*   ;     ld (sprite_animation_timer),a
04213B             0198*   ; ; fall through to animate_explosion
04213B             0199*   ; animate_explosion:
04213B             0200*   ;     ld hl,sprite_y+1
04213B             0201*   ;     inc (hl) ; move explosion down 1 pixel
04213B             0202*   ;     jp z, done_explosion ; if wraparound to top of screen, kill explosion
04213B             0203*   ;     ld hl,sprite_animation_timer
04213B             0204*   ;     dec (hl) ; if timer is zero,we do next animation
04213B             0205*   ;     jp z,next_explosion
04213B             0206*   ;     ;otherwise we fall through to draw the current one
04213B             0207*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
04213B             0208*   ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
04213B             0209*   ;     ret ; now we go back to caller
04213B             0210*   ; done_explosion:
04213B FD CB 1D FE 0211*       set sprite_just_died,(iy+sprite_collisions)
04213F 3E FF       0212*       ld a,-1 ; return -1 to indicate enemy died
042141 C9          0213*       ret ; now we go back to caller
042142             0214*   ; end enemy_kill
042142             0045        include "enemy_fireball.inc"
042142 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
042200             0002*   speed_fireball: equ 0x000280 ; 2.5 pixels per frame
042200             0003*   
042200             0004*   fireball_defaults:
042200 06          0005*       db enemy_fireball        ; type
042201 06 01 00    0006*       dl BUF_FIREBALL_A	    ; base_bufferId
042204 24 22 04    0007*       dl move_enemy_fireball	; move_program
042207 03          0008*       db collides_with_laser | collides_with_player ; collisions
042208 10          0009*       db 16	                ; dim_x
042209 10          0010*       db 16                   ; dim_y
04220A 20          0011*       db 32                   ; num_orientations
04220B 01          0012*       db 1                    ; num_animations
04220C 00          0013*       db 0	                ; animation
04220D 00          0014*       db 0	                ; animation_timer
04220E 01          0015*       db 1	                ; move_timer
04220F 00          0016*       db 0	                ; move_step
042210 14          0017*       db 20	                ; points
042211 05          0018*       db 5	                ; shield_damage
042212 00          0019*       db 0                    ; animation_frame
042213             0020*   
042213             0021*   enemy_spawn_fireball:
042213 21 00 22 04 0022*       ld hl,fireball_defaults
042217 CD 31 5D 04 0023*       call spawn_sprite_from_sprite
04221B D0          0024*       ret nc ; no carry means no free sprite slots, so we go home
04221C             0025*   ; other specific initialization
04221C 21 80 02 00 0026*       ld hl,speed_fireball
042220 DD 2F 0D    0027*       ld (ix+sprite_vel),hl
042223 C9          0028*       ret
042224             0029*   ; end enemy_spawn_fireball
042224             0030*   
042224             0031*   move_enemy_fireball:
042224             0032*   ; run the movement program for the fireball enemy
042224 CD 5B 5C 04 0033*       call move_sprite
042228 C3 DF 20 04 0034*       jp check_enemy_collisions
04222C             0035*   ; end move_enemy_fireball
04222C             0046        include "enemy_seeker.inc"
04222C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
042300             0002*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
042300             0003*   
042300             0004*   seeker_defaults:
042300 01          0005*       db enemy_seeker         ; type
042301 0B 01 00    0006*       dl BUF_SEEKER_000	    ; base_bufferId
042304 24 23 04    0007*       dl move_enemy_seeker	; move_program
042307 03          0008*       db collides_with_laser | collides_with_player ; collisions
042308 10          0009*       db 16	                ; dim_x
042309 10          0010*       db 16                   ; dim_y
04230A 20          0011*       db 32                   ; num_orientations
04230B 01          0012*       db 1                    ; num_animations
04230C 00          0013*       db 0	                ; animation
04230D 00          0014*       db 0	                ; animation_timer
04230E 01          0015*       db 1	                ; move_timer
04230F 00          0016*       db 0	                ; move_step
042310 0A          0017*       db 10	                ; points
042311 02          0018*       db 2	                ; shield_damage
042312 00          0019*       db 0                    ; animation_frame
042313             0020*   
042313             0021*   enemy_spawn_seeker:
042313 21 00 23 04 0022*       ld hl,seeker_defaults
042317 CD 31 5D 04 0023*       call spawn_sprite_from_sprite
04231B D0          0024*       ret nc ; no carry means no free sprite slots, so we go home
04231C             0025*   ; other specific initialization
04231C 21 80 02 00 0026*       ld hl,speed_seeker
042320 DD 2F 0D    0027*       ld (ix+sprite_vel),hl
042323 C9          0028*       ret
042324             0029*   ; end enemy_spawn_seeker
042324             0030*   
042324             0031*   move_enemy_seeker:
042324             0032*   ; run the movement program for the seeker enemy
042324 CD 2C 23 04 0033*       call en_nav_seek_zag
042328 C3 DF 20 04 0034*       jp check_enemy_collisions
04232C             0035*   ; end move_enemy_seeker
04232C             0036*   
04232C             0037*   ; contains the logic for how to move the enemy
04232C             0038*   ; and then does the moving
04232C             0039*   ; inputs: a fully-populated active sprite table
04232C             0040*   ;         player position variables
04232C             0041*   ; destroys: everything except index registers
04232C             0042*   ; outputs: moving enemies
04232C             0043*   en_nav_seek_zag:
04232C             0044*   ; set velocity and orientation by player's relative location
04232C             0045*   ; move enemies y-axis
04232C             0046*   ; where is player relative to us?
04232C CD 00 62 04 0047*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
042330             0048*   ; is player above or below us?
042330 ED 53 55 06 0049*       ld (ude),de ; dy
       04          
042335 3A 57 06 04 0050*       ld a,(ude+2) ; deu
042339 17          0051*       rla ; shift sign bit into carry
04233A D2 65 23 04 0052*       jp nc,@zig_zag ; player is below,evade
04233E             0053*   ; player is even or above,so home in on current heading
04233E FD 2F 10    0054*       ld (iy+sprite_heading),hl ; save sprite heading
042341             0055*   ; fall through to @compute_velocities
042341             0056*   @compute_velocities:
042341 CD FC 5C 04 0057*       call sprite_compute_velocities
042345             0058*   ; change the animation frame to match heading
042345 FD 7E 11    0059*       ld a,(iy+sprite_heading+1) ; we want the integer portion
042348 CB 3F       0060*       srl a ; divide integer portion by 8
04234A CB 3F       0061*       srl a
04234C CB 3F       0062*       srl a
04234E FD 77 22    0063*       ld (iy+sprite_animation),a
042351 C3 5B 5C 04 0064*       jp move_sprite ; will return to caller from there
042355             0065*   @zig_zag_start:
042355 FD 2A 90 5B 0066*       ld iy,(table_pointer)
       04          
04235A CD BB 08 04 0067*       call rand_8
04235E E6 3F       0068*       and %00111111 ; limit it to 64
042360 CB DF       0069*       set 3,a ; make sure it's at least 8
042362 FD 77 24    0070*       ld (iy+sprite_move_timer),a ; store it
042365             0071*       ; fall through to @zig_zag
042365             0072*   @zig_zag:
042365 FD 7E 24    0073*       ld a,(iy+sprite_move_timer)
042368 3D          0074*       dec a
042369 FD 77 24    0075*       ld (iy+sprite_move_timer),a
04236C C2 92 23 04 0076*       jp nz,@zig_zag_no_switch
042370             0077*       ; otherwise flip direction and restart timer
042370 FD 7E 25    0078*       ld a,(iy+sprite_move_step)
042373 EE 01       0079*       xor %1 ; flips bit zero
042375 FD 77 25    0080*       ld (iy+sprite_move_step),a ; store it
042378 C2 87 23 04 0081*       jp nz,@F ; zag right
04237C             0082*   ;otherwise zag left
04237C 21 00 A0 00 0083*       ld hl,160*256; southwest heading
042380 FD 2F 10    0084*       ld (iy+sprite_heading),hl ; save sprite heading
042383 C3 55 23 04 0085*       jp @zig_zag_start
042387             0086*   @@: ; zag right
042387 21 00 60 00 0087*       ld hl,96*256; southeast heading
04238B FD 2F 10    0088*       ld (iy+sprite_heading),hl ; save sprite heading
04238E C3 55 23 04 0089*       jp @zig_zag_start
042392             0090*   @zig_zag_no_switch:
042392             0091*       ; ld a,(sprite_orientation)
042392 FD 27 10    0092*       ld hl,(iy+sprite_heading)
042395 C3 41 23 04 0093*       jp @compute_velocities
042399             0094*   ; end en_nav_seek_zag
042399             0047        include "fonts_list.inc"
042399 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042400             0002*   
042400             0003*   ; Generated by asm_config_editor.py
042400             0004*   font_list_record_size: equ 12
042400             0005*   font_list_width: equ 0
042400             0006*   font_list_height: equ 3
042400             0007*   font_list_bufferId: equ 6
042400             0008*   font_list_filename: equ 9
042400             0009*   
042400             0010*   num_fonts: equ 18
042400             0011*   
042400             0012*   ; Index list:
042400             0013*   amiga_forever_16x24: equ 64000
042400             0014*   amiga_forever_8x16: equ 64001
042400             0015*   amiga_forever_8x8: equ 64002
042400             0016*   computer_pixel_7_10x15: equ 64003
042400             0017*   computer_pixel_7_10x24: equ 64004
042400             0018*   computer_pixel_7_8x16: equ 64005
042400             0019*   Lat2_Terminus12x6_6x12: equ 64006
042400             0020*   Lat2_TerminusBold14_8x14: equ 64007
042400             0021*   Lat2_VGA14_8x14: equ 64008
042400             0022*   Lat2_VGA16_8x16: equ 64009
042400             0023*   Lat2_VGA8_8x8: equ 64010
042400             0024*   Lat7_Fixed13_8x13: equ 64011
042400             0025*   Lat7_Terminus12x6_6x12: equ 64012
042400             0026*   Lat7_TerminusBold16_8x16: equ 64013
042400             0027*   Lat7_VGA14_8x14: equ 64014
042400             0028*   Lat7_VGA8x8: equ 64015
042400             0029*   scriptorium_12x14: equ 64016
042400             0030*   Squarewave_Bold_8x12: equ 64017
042400             0031*   
042400             0032*   font_list: ; width; height; bufferId; filename;:
042400 10 00 00 18 0033*   	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 D8 24 04 
04240C 08 00 00 10 0034*   	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 F7 24 04 
042418 08 00 00 08 0035*   	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 15 25 04 
042424 0A 00 00 0F 0036*   	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 32 25 04 
042430 0A 00 00 18 0037*   	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 54 25 04 
04243C 08 00 00 10 0038*   	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 76 25 04 
042448 06 00 00 0C 0039*   	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 97 25 04 
042454 08 00 00 0E 0040*   	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 B9 25 04 
042460 08 00 00 0E 0041*   	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 DD 25 04 
04246C 08 00 00 10 0042*   	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 F8 25 04 
042478 08 00 00 08 0043*   	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 13 26 04 
042484 08 00 00 0D 0044*   	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 2C 26 04 
042490 06 00 00 0C 0045*   	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 49 26 04 
04249C 08 00 00 10 0046*   	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 6B 26 04 
0424A8 08 00 00 0E 0047*   	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 8F 26 04 
0424B4 08 00 00 08 0048*   	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 AA 26 04 
0424C0 0C 00 00 0E 0049*   	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 C3 26 04 
0424CC 08 00 00 0C 0050*   	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 E0 26 04 
0424D8             0051*   
0424D8             0052*   ; files_list: ; filename:
0424D8 66 6F 6E 74 0053*   fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
0424F7 66 6F 6E 74 0054*   fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
042515 66 6F 6E 74 0055*   fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042532 66 6F 6E 74 0056*   fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
042554 66 6F 6E 74 0057*   fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
042576 66 6F 6E 74 0058*   fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
042597 66 6F 6E 74 0059*   fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
0425B9 66 6F 6E 74 0060*   fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
0425DD 66 6F 6E 74 0061*   fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
0425F8 66 6F 6E 74 0062*   fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
042613 66 6F 6E 74 0063*   fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
04262C 66 6F 6E 74 0064*   fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
042649 66 6F 6E 74 0065*   fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
04266B 66 6F 6E 74 0066*   fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
04268F 66 6F 6E 74 0067*   fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
0426AA 66 6F 6E 74 0068*   fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
0426C3 66 6F 6E 74 0069*   fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
0426E0 66 6F 6E 74 0070*   fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
042700             0048        include "images_tiles_dg.inc"
042700             0001*   ; Generated by tiles_dg.py
042700             0002*   
042700             0003*   tiles_dg_num_images: equ 184
042700             0004*   
042700             0005*   ; bufferIds:
042700             0006*   
042700             0007*   
042700             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
042700 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       F0 33 04 00 
       02 00       
042712 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       05 34 04 01 
       02 00       
042724 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       1A 34 04 02 
       02 00       
042736 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       2F 34 04 03 
       02 00       
042748 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       44 34 04 04 
       02 00       
04275A 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       59 34 04 05 
       02 00       
04276C 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       6E 34 04 06 
       02 00       
04277E 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       83 34 04 07 
       02 00       
042790 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       98 34 04 08 
       02 00       
0427A2 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       AD 34 04 09 
       02 00       
0427B4 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       C2 34 04 0A 
       02 00       
0427C6 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       D7 34 04 0B 
       02 00       
0427D8 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_012, 524
       00 00 10 00 
       00 00 01 00 
       EC 34 04 0C 
       02 00       
0427EA 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_013, 525
       00 00 10 00 
       00 00 01 00 
       01 35 04 0D 
       02 00       
0427FC 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_014, 526
       00 00 10 00 
       00 00 01 00 
       16 35 04 0E 
       02 00       
04280E 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_015, 527
       00 00 10 00 
       00 00 01 00 
       2B 35 04 0F 
       02 00       
042820 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       40 35 04 10 
       02 00       
042832 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_025, 537
       00 00 10 00 
       00 00 01 00 
       55 35 04 19 
       02 00       
042844 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_026, 538
       00 00 10 00 
       00 00 01 00 
       6A 35 04 1A 
       02 00       
042856 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_027, 539
       00 00 10 00 
       00 00 01 00 
       7F 35 04 1B 
       02 00       
042868 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_028, 540
       00 00 10 00 
       00 00 01 00 
       94 35 04 1C 
       02 00       
04287A 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_029, 541
       00 00 10 00 
       00 00 01 00 
       A9 35 04 1D 
       02 00       
04288C 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_030, 542
       00 00 10 00 
       00 00 01 00 
       BE 35 04 1E 
       02 00       
04289E 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_031, 543
       00 00 10 00 
       00 00 01 00 
       D3 35 04 1F 
       02 00       
0428B0 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_032, 544
       00 00 10 00 
       00 00 01 00 
       E8 35 04 20 
       02 00       
0428C2 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       FD 35 04 21 
       02 00       
0428D4 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       12 36 04 22 
       02 00       
0428E6 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       27 36 04 23 
       02 00       
0428F8 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       3C 36 04 24 
       02 00       
04290A 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       51 36 04 25 
       02 00       
04291C 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       66 36 04 26 
       02 00       
04292E 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       7B 36 04 27 
       02 00       
042940 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       90 36 04 28 
       02 00       
042952 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       A5 36 04 31 
       02 00       
042964 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       BA 36 04 32 
       02 00       
042976 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       CF 36 04 33 
       02 00       
042988 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       E4 36 04 34 
       02 00       
04299A 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       F9 36 04 35 
       02 00       
0429AC 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       0E 37 04 36 
       02 00       
0429BE 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       23 37 04 37 
       02 00       
0429D0 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       38 37 04 38 
       02 00       
0429E2 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       4D 37 04 39 
       02 00       
0429F4 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       62 37 04 3A 
       02 00       
042A06 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       77 37 04 3B 
       02 00       
042A18 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       8C 37 04 41 
       02 00       
042A2A 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       A1 37 04 42 
       02 00       
042A3C 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       B6 37 04 43 
       02 00       
042A4E 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       CB 37 04 44 
       02 00       
042A60 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       E0 37 04 45 
       02 00       
042A72 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       F5 37 04 46 
       02 00       
042A84 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       0A 38 04 47 
       02 00       
042A96 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       1F 38 04 48 
       02 00       
042AA8 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       34 38 04 49 
       02 00       
042ABA 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       49 38 04 4A 
       02 00       
042ACC 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       5E 38 04 4B 
       02 00       
042ADE 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       73 38 04 51 
       02 00       
042AF0 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       88 38 04 52 
       02 00       
042B02 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       9D 38 04 53 
       02 00       
042B14 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       B2 38 04 54 
       02 00       
042B26 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       C7 38 04 55 
       02 00       
042B38 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       DC 38 04 56 
       02 00       
042B4A 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       F1 38 04 57 
       02 00       
042B5C 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       06 39 04 58 
       02 00       
042B6E 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       1B 39 04 59 
       02 00       
042B80 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       30 39 04 5A 
       02 00       
042B92 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       45 39 04 5B 
       02 00       
042BA4 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       5A 39 04 61 
       02 00       
042BB6 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       6F 39 04 62 
       02 00       
042BC8 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       84 39 04 63 
       02 00       
042BDA 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       99 39 04 64 
       02 00       
042BEC 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       AE 39 04 65 
       02 00       
042BFE 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       C3 39 04 66 
       02 00       
042C10 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       D8 39 04 67 
       02 00       
042C22 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       ED 39 04 68 
       02 00       
042C34 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       02 3A 04 69 
       02 00       
042C46 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       17 3A 04 6A 
       02 00       
042C58 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       2C 3A 04 6B 
       02 00       
042C6A 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       41 3A 04 6C 
       02 00       
042C7C 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       56 3A 04 71 
       02 00       
042C8E 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       6B 3A 04 72 
       02 00       
042CA0 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       80 3A 04 73 
       02 00       
042CB2 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       95 3A 04 74 
       02 00       
042CC4 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       AA 3A 04 75 
       02 00       
042CD6 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       BF 3A 04 76 
       02 00       
042CE8 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       D4 3A 04 77 
       02 00       
042CFA 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       E9 3A 04 78 
       02 00       
042D0C 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       FE 3A 04 79 
       02 00       
042D1E 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       13 3B 04 7A 
       02 00       
042D30 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       28 3B 04 7B 
       02 00       
042D42 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       3D 3B 04 81 
       02 00       
042D54 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       52 3B 04 82 
       02 00       
042D66 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       67 3B 04 83 
       02 00       
042D78 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       7C 3B 04 84 
       02 00       
042D8A 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       91 3B 04 85 
       02 00       
042D9C 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       A6 3B 04 86 
       02 00       
042DAE 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       BB 3B 04 87 
       02 00       
042DC0 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       D0 3B 04 88 
       02 00       
042DD2 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       E5 3B 04 89 
       02 00       
042DE4 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       FA 3B 04 8A 
       02 00       
042DF6 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       0F 3C 04 8B 
       02 00       
042E08 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       24 3C 04 8C 
       02 00       
042E1A 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_141, 653
       00 00 10 00 
       00 00 01 00 
       39 3C 04 8D 
       02 00       
042E2C 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_142, 654
       00 00 10 00 
       00 00 01 00 
       4E 3C 04 8E 
       02 00       
042E3E 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       63 3C 04 91 
       02 00       
042E50 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       78 3C 04 92 
       02 00       
042E62 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       8D 3C 04 93 
       02 00       
042E74 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       A2 3C 04 94 
       02 00       
042E86 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       B7 3C 04 95 
       02 00       
042E98 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       CC 3C 04 96 
       02 00       
042EAA 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       E1 3C 04 97 
       02 00       
042EBC 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       F6 3C 04 98 
       02 00       
042ECE 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       0B 3D 04 99 
       02 00       
042EE0 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       20 3D 04 9A 
       02 00       
042EF2 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       35 3D 04 9B 
       02 00       
042F04 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       4A 3D 04 9C 
       02 00       
042F16 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_157, 669
       00 00 10 00 
       00 00 01 00 
       5F 3D 04 9D 
       02 00       
042F28 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_158, 670
       00 00 10 00 
       00 00 01 00 
       74 3D 04 9E 
       02 00       
042F3A 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       89 3D 04 A1 
       02 00       
042F4C 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       9E 3D 04 A2 
       02 00       
042F5E 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       B3 3D 04 A3 
       02 00       
042F70 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       C8 3D 04 A4 
       02 00       
042F82 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       DD 3D 04 A5 
       02 00       
042F94 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       F2 3D 04 A6 
       02 00       
042FA6 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       07 3E 04 A7 
       02 00       
042FB8 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       1C 3E 04 A8 
       02 00       
042FCA 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       31 3E 04 A9 
       02 00       
042FDC 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       46 3E 04 AA 
       02 00       
042FEE 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       5B 3E 04 AB 
       02 00       
043000 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       70 3E 04 AC 
       02 00       
043012 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       85 3E 04 B1 
       02 00       
043024 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       9A 3E 04 B2 
       02 00       
043036 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       AF 3E 04 B3 
       02 00       
043048 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       C4 3E 04 B4 
       02 00       
04305A 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       D9 3E 04 B5 
       02 00       
04306C 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       EE 3E 04 B6 
       02 00       
04307E 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       03 3F 04 B7 
       02 00       
043090 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       18 3F 04 B8 
       02 00       
0430A2 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       2D 3F 04 B9 
       02 00       
0430B4 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       42 3F 04 BA 
       02 00       
0430C6 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       57 3F 04 BB 
       02 00       
0430D8 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       6C 3F 04 BC 
       02 00       
0430EA 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       81 3F 04 C1 
       02 00       
0430FC 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       96 3F 04 C2 
       02 00       
04310E 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       AB 3F 04 C3 
       02 00       
043120 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       C0 3F 04 C4 
       02 00       
043132 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       D5 3F 04 C5 
       02 00       
043144 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       EA 3F 04 C6 
       02 00       
043156 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       FF 3F 04 C7 
       02 00       
043168 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       14 40 04 C8 
       02 00       
04317A 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       29 40 04 C9 
       02 00       
04318C 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       3E 40 04 CA 
       02 00       
04319E 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       53 40 04 CB 
       02 00       
0431B0 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       68 40 04 CC 
       02 00       
0431C2 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       7D 40 04 D1 
       02 00       
0431D4 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       92 40 04 D2 
       02 00       
0431E6 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       A7 40 04 D3 
       02 00       
0431F8 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       BC 40 04 D4 
       02 00       
04320A 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       D1 40 04 D5 
       02 00       
04321C 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       E6 40 04 D6 
       02 00       
04322E 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       FB 40 04 D7 
       02 00       
043240 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       10 41 04 D8 
       02 00       
043252 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       25 41 04 D9 
       02 00       
043264 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       3A 41 04 DA 
       02 00       
043276 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       4F 41 04 DB 
       02 00       
043288 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       64 41 04 DC 
       02 00       
04329A 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       79 41 04 E1 
       02 00       
0432AC 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       8E 41 04 E2 
       02 00       
0432BE 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       A3 41 04 E3 
       02 00       
0432D0 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       B8 41 04 E4 
       02 00       
0432E2 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       CD 41 04 E5 
       02 00       
0432F4 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       E2 41 04 E6 
       02 00       
043306 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       F7 41 04 E7 
       02 00       
043318 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       0C 42 04 E8 
       02 00       
04332A 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       21 42 04 E9 
       02 00       
04333C 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       36 42 04 EA 
       02 00       
04334E 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       4B 42 04 EB 
       02 00       
043360 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       60 42 04 EC 
       02 00       
043372 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       75 42 04 F1 
       02 00       
043384 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       8A 42 04 F2 
       02 00       
043396 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_243, 755
       00 00 10 00 
       00 00 01 00 
       9F 42 04 F3 
       02 00       
0433A8 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       B4 42 04 F5 
       02 00       
0433BA 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       C9 42 04 F6 
       02 00       
0433CC 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_247, 759
       00 00 10 00 
       00 00 01 00 
       DE 42 04 F7 
       02 00       
0433DE 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       F3 42 04 F8 
       02 00       
0433F0             0193*   
0433F0             0194*   tiles_dg_files_list: ; filename:
0433F0 74 69 6C 65 0195*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
043405 74 69 6C 65 0196*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
04341A 74 69 6C 65 0197*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
04342F 74 69 6C 65 0198*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
043444 74 69 6C 65 0199*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
043459 74 69 6C 65 0200*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
04346E 74 69 6C 65 0201*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
043483 74 69 6C 65 0202*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
043498 74 69 6C 65 0203*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0434AD 74 69 6C 65 0204*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
0434C2 74 69 6C 65 0205*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
0434D7 74 69 6C 65 0206*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
0434EC 74 69 6C 65 0207*   fn_dg_012: db "tiles/dg/0/012.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 32 2E 72 
       67 62 61 32 
       00          
043501 74 69 6C 65 0208*   fn_dg_013: db "tiles/dg/0/013.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 33 2E 72 
       67 62 61 32 
       00          
043516 74 69 6C 65 0209*   fn_dg_014: db "tiles/dg/0/014.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 34 2E 72 
       67 62 61 32 
       00          
04352B 74 69 6C 65 0210*   fn_dg_015: db "tiles/dg/0/015.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 35 2E 72 
       67 62 61 32 
       00          
043540 74 69 6C 65 0211*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
043555 74 69 6C 65 0212*   fn_dg_025: db "tiles/dg/0/025.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 35 2E 72 
       67 62 61 32 
       00          
04356A 74 69 6C 65 0213*   fn_dg_026: db "tiles/dg/0/026.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 36 2E 72 
       67 62 61 32 
       00          
04357F 74 69 6C 65 0214*   fn_dg_027: db "tiles/dg/0/027.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 37 2E 72 
       67 62 61 32 
       00          
043594 74 69 6C 65 0215*   fn_dg_028: db "tiles/dg/0/028.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 38 2E 72 
       67 62 61 32 
       00          
0435A9 74 69 6C 65 0216*   fn_dg_029: db "tiles/dg/0/029.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 39 2E 72 
       67 62 61 32 
       00          
0435BE 74 69 6C 65 0217*   fn_dg_030: db "tiles/dg/0/030.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 30 2E 72 
       67 62 61 32 
       00          
0435D3 74 69 6C 65 0218*   fn_dg_031: db "tiles/dg/0/031.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 31 2E 72 
       67 62 61 32 
       00          
0435E8 74 69 6C 65 0219*   fn_dg_032: db "tiles/dg/0/032.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0435FD 74 69 6C 65 0220*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
043612 74 69 6C 65 0221*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
043627 74 69 6C 65 0222*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
04363C 74 69 6C 65 0223*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
043651 74 69 6C 65 0224*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
043666 74 69 6C 65 0225*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
04367B 74 69 6C 65 0226*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
043690 74 69 6C 65 0227*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0436A5 74 69 6C 65 0228*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
0436BA 74 69 6C 65 0229*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
0436CF 74 69 6C 65 0230*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
0436E4 74 69 6C 65 0231*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
0436F9 74 69 6C 65 0232*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
04370E 74 69 6C 65 0233*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
043723 74 69 6C 65 0234*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
043738 74 69 6C 65 0235*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04374D 74 69 6C 65 0236*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
043762 74 69 6C 65 0237*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043777 74 69 6C 65 0238*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
04378C 74 69 6C 65 0239*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
0437A1 74 69 6C 65 0240*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
0437B6 74 69 6C 65 0241*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
0437CB 74 69 6C 65 0242*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
0437E0 74 69 6C 65 0243*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
0437F5 74 69 6C 65 0244*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
04380A 74 69 6C 65 0245*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
04381F 74 69 6C 65 0246*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
043834 74 69 6C 65 0247*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
043849 74 69 6C 65 0248*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
04385E 74 69 6C 65 0249*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
043873 74 69 6C 65 0250*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
043888 74 69 6C 65 0251*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
04389D 74 69 6C 65 0252*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
0438B2 74 69 6C 65 0253*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
0438C7 74 69 6C 65 0254*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
0438DC 74 69 6C 65 0255*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
0438F1 74 69 6C 65 0256*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
043906 74 69 6C 65 0257*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
04391B 74 69 6C 65 0258*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
043930 74 69 6C 65 0259*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
043945 74 69 6C 65 0260*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
04395A 74 69 6C 65 0261*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
04396F 74 69 6C 65 0262*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
043984 74 69 6C 65 0263*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
043999 74 69 6C 65 0264*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
0439AE 74 69 6C 65 0265*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
0439C3 74 69 6C 65 0266*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
0439D8 74 69 6C 65 0267*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
0439ED 74 69 6C 65 0268*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
043A02 74 69 6C 65 0269*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
043A17 74 69 6C 65 0270*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
043A2C 74 69 6C 65 0271*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
043A41 74 69 6C 65 0272*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
043A56 74 69 6C 65 0273*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
043A6B 74 69 6C 65 0274*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
043A80 74 69 6C 65 0275*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
043A95 74 69 6C 65 0276*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
043AAA 74 69 6C 65 0277*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
043ABF 74 69 6C 65 0278*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
043AD4 74 69 6C 65 0279*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
043AE9 74 69 6C 65 0280*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
043AFE 74 69 6C 65 0281*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
043B13 74 69 6C 65 0282*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
043B28 74 69 6C 65 0283*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
043B3D 74 69 6C 65 0284*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
043B52 74 69 6C 65 0285*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
043B67 74 69 6C 65 0286*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
043B7C 74 69 6C 65 0287*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
043B91 74 69 6C 65 0288*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
043BA6 74 69 6C 65 0289*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
043BBB 74 69 6C 65 0290*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
043BD0 74 69 6C 65 0291*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
043BE5 74 69 6C 65 0292*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
043BFA 74 69 6C 65 0293*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
043C0F 74 69 6C 65 0294*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
043C24 74 69 6C 65 0295*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
043C39 74 69 6C 65 0296*   fn_dg_141: db "tiles/dg/0/141.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 31 2E 72 
       67 62 61 32 
       00          
043C4E 74 69 6C 65 0297*   fn_dg_142: db "tiles/dg/0/142.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 32 2E 72 
       67 62 61 32 
       00          
043C63 74 69 6C 65 0298*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
043C78 74 69 6C 65 0299*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
043C8D 74 69 6C 65 0300*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
043CA2 74 69 6C 65 0301*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
043CB7 74 69 6C 65 0302*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
043CCC 74 69 6C 65 0303*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
043CE1 74 69 6C 65 0304*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
043CF6 74 69 6C 65 0305*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
043D0B 74 69 6C 65 0306*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
043D20 74 69 6C 65 0307*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
043D35 74 69 6C 65 0308*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
043D4A 74 69 6C 65 0309*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
043D5F 74 69 6C 65 0310*   fn_dg_157: db "tiles/dg/0/157.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 37 2E 72 
       67 62 61 32 
       00          
043D74 74 69 6C 65 0311*   fn_dg_158: db "tiles/dg/0/158.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 38 2E 72 
       67 62 61 32 
       00          
043D89 74 69 6C 65 0312*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
043D9E 74 69 6C 65 0313*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
043DB3 74 69 6C 65 0314*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
043DC8 74 69 6C 65 0315*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
043DDD 74 69 6C 65 0316*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
043DF2 74 69 6C 65 0317*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
043E07 74 69 6C 65 0318*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
043E1C 74 69 6C 65 0319*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
043E31 74 69 6C 65 0320*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
043E46 74 69 6C 65 0321*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
043E5B 74 69 6C 65 0322*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
043E70 74 69 6C 65 0323*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
043E85 74 69 6C 65 0324*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
043E9A 74 69 6C 65 0325*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
043EAF 74 69 6C 65 0326*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
043EC4 74 69 6C 65 0327*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
043ED9 74 69 6C 65 0328*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
043EEE 74 69 6C 65 0329*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
043F03 74 69 6C 65 0330*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
043F18 74 69 6C 65 0331*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
043F2D 74 69 6C 65 0332*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
043F42 74 69 6C 65 0333*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
043F57 74 69 6C 65 0334*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
043F6C 74 69 6C 65 0335*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
043F81 74 69 6C 65 0336*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
043F96 74 69 6C 65 0337*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
043FAB 74 69 6C 65 0338*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
043FC0 74 69 6C 65 0339*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
043FD5 74 69 6C 65 0340*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
043FEA 74 69 6C 65 0341*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
043FFF 74 69 6C 65 0342*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
044014 74 69 6C 65 0343*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044029 74 69 6C 65 0344*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
04403E 74 69 6C 65 0345*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
044053 74 69 6C 65 0346*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
044068 74 69 6C 65 0347*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
04407D 74 69 6C 65 0348*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
044092 74 69 6C 65 0349*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
0440A7 74 69 6C 65 0350*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
0440BC 74 69 6C 65 0351*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
0440D1 74 69 6C 65 0352*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
0440E6 74 69 6C 65 0353*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
0440FB 74 69 6C 65 0354*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
044110 74 69 6C 65 0355*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044125 74 69 6C 65 0356*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
04413A 74 69 6C 65 0357*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
04414F 74 69 6C 65 0358*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
044164 74 69 6C 65 0359*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
044179 74 69 6C 65 0360*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
04418E 74 69 6C 65 0361*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
0441A3 74 69 6C 65 0362*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
0441B8 74 69 6C 65 0363*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
0441CD 74 69 6C 65 0364*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
0441E2 74 69 6C 65 0365*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
0441F7 74 69 6C 65 0366*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
04420C 74 69 6C 65 0367*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044221 74 69 6C 65 0368*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
044236 74 69 6C 65 0369*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
04424B 74 69 6C 65 0370*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
044260 74 69 6C 65 0371*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
044275 74 69 6C 65 0372*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
04428A 74 69 6C 65 0373*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
04429F 74 69 6C 65 0374*   fn_dg_243: db "tiles/dg/0/243.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 33 2E 72 
       67 62 61 32 
       00          
0442B4 74 69 6C 65 0375*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
0442C9 74 69 6C 65 0376*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
0442DE 74 69 6C 65 0377*   fn_dg_247: db "tiles/dg/0/247.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 37 2E 72 
       67 62 61 32 
       00          
0442F3 74 69 6C 65 0378*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044308             0049        ; include "images_tiles_xevious.inc"
044308             0050        include "images_sprites.inc"
044308 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
044400             0002*   
044400             0003*   ; Generated by make_images.py
044400             0004*   
044400             0005*   sprites_num_images: equ 79
044400             0006*   
044400             0007*   ; buffer_ids:
044400             0008*   BUF_CRATER: equ 256
044400             0009*   BUF_EXPLOSION_A: equ 257
044400             0010*   BUF_EXPLOSION_B: equ 258
044400             0011*   BUF_EXPLOSION_C: equ 259
044400             0012*   BUF_EXPLOSION_D: equ 260
044400             0013*   BUF_EXPLOSION_E: equ 261
044400             0014*   BUF_FIREBALL_A: equ 262
044400             0015*   BUF_FIREBALL_B: equ 263
044400             0016*   BUF_LASER_A: equ 264
044400             0017*   BUF_LASER_B: equ 265
044400             0018*   BUF_PAD: equ 266
044400             0019*   BUF_SEEKER_000: equ 267
044400             0020*   BUF_SEEKER_008: equ 268
044400             0021*   BUF_SEEKER_016: equ 269
044400             0022*   BUF_SEEKER_024: equ 270
044400             0023*   BUF_SEEKER_032: equ 271
044400             0024*   BUF_SEEKER_040: equ 272
044400             0025*   BUF_SEEKER_048: equ 273
044400             0026*   BUF_SEEKER_056: equ 274
044400             0027*   BUF_SEEKER_064: equ 275
044400             0028*   BUF_SEEKER_072: equ 276
044400             0029*   BUF_SEEKER_080: equ 277
044400             0030*   BUF_SEEKER_088: equ 278
044400             0031*   BUF_SEEKER_096: equ 279
044400             0032*   BUF_SEEKER_104: equ 280
044400             0033*   BUF_SEEKER_112: equ 281
044400             0034*   BUF_SEEKER_120: equ 282
044400             0035*   BUF_SEEKER_128: equ 283
044400             0036*   BUF_SEEKER_136: equ 284
044400             0037*   BUF_SEEKER_144: equ 285
044400             0038*   BUF_SEEKER_152: equ 286
044400             0039*   BUF_SEEKER_160: equ 287
044400             0040*   BUF_SEEKER_168: equ 288
044400             0041*   BUF_SEEKER_176: equ 289
044400             0042*   BUF_SEEKER_184: equ 290
044400             0043*   BUF_SEEKER_192: equ 291
044400             0044*   BUF_SEEKER_200: equ 292
044400             0045*   BUF_SEEKER_208: equ 293
044400             0046*   BUF_SEEKER_216: equ 294
044400             0047*   BUF_SEEKER_224: equ 295
044400             0048*   BUF_SEEKER_232: equ 296
044400             0049*   BUF_SEEKER_240: equ 297
044400             0050*   BUF_SEEKER_248: equ 298
044400             0051*   BUF_SHIP_0L: equ 299
044400             0052*   BUF_SHIP_1C: equ 300
044400             0053*   BUF_SHIP_2R: equ 301
044400             0054*   BUF_SHIP_SMALL: equ 302
044400             0055*   BUF_TURRET_000: equ 303
044400             0056*   BUF_TURRET_008: equ 304
044400             0057*   BUF_TURRET_016: equ 305
044400             0058*   BUF_TURRET_024: equ 306
044400             0059*   BUF_TURRET_032: equ 307
044400             0060*   BUF_TURRET_040: equ 308
044400             0061*   BUF_TURRET_048: equ 309
044400             0062*   BUF_TURRET_056: equ 310
044400             0063*   BUF_TURRET_064: equ 311
044400             0064*   BUF_TURRET_072: equ 312
044400             0065*   BUF_TURRET_080: equ 313
044400             0066*   BUF_TURRET_088: equ 314
044400             0067*   BUF_TURRET_096: equ 315
044400             0068*   BUF_TURRET_104: equ 316
044400             0069*   BUF_TURRET_112: equ 317
044400             0070*   BUF_TURRET_120: equ 318
044400             0071*   BUF_TURRET_128: equ 319
044400             0072*   BUF_TURRET_136: equ 320
044400             0073*   BUF_TURRET_144: equ 321
044400             0074*   BUF_TURRET_152: equ 322
044400             0075*   BUF_TURRET_160: equ 323
044400             0076*   BUF_TURRET_168: equ 324
044400             0077*   BUF_TURRET_176: equ 325
044400             0078*   BUF_TURRET_184: equ 326
044400             0079*   BUF_TURRET_192: equ 327
044400             0080*   BUF_TURRET_200: equ 328
044400             0081*   BUF_TURRET_208: equ 329
044400             0082*   BUF_TURRET_216: equ 330
044400             0083*   BUF_TURRET_224: equ 331
044400             0084*   BUF_TURRET_232: equ 332
044400             0085*   BUF_TURRET_240: equ 333
044400             0086*   BUF_TURRET_248: equ 334
044400             0087*   
044400             0088*   sprites_image_list: ; type; width; height; size; filename; bufferId:
044400 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       8E 49 04 00 
       01 00       
044412 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_explosion_a, 257
       00 00 10 00 
       00 00 01 00 
       A3 49 04 01 
       01 00       
044424 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_explosion_b, 258
       00 00 10 00 
       00 00 01 00 
       BD 49 04 02 
       01 00       
044436 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_explosion_c, 259
       00 00 10 00 
       00 00 01 00 
       D7 49 04 03 
       01 00       
044448 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_explosion_d, 260
       00 00 10 00 
       00 00 01 00 
       F1 49 04 04 
       01 00       
04445A 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_explosion_e, 261
       00 00 10 00 
       00 00 01 00 
       0B 4A 04 05 
       01 00       
04446C 01 00 00 07 0095*   	dl 1, 7, 7, 49, fn_fireball_a, 262
       00 00 07 00 
       00 31 00 00 
       25 4A 04 06 
       01 00       
04447E 01 00 00 07 0096*   	dl 1, 7, 7, 49, fn_fireball_b, 263
       00 00 07 00 
       00 31 00 00 
       3E 4A 04 07 
       01 00       
044490 01 00 00 05 0097*   	dl 1, 5, 13, 65, fn_laser_a, 264
       00 00 0D 00 
       00 41 00 00 
       57 4A 04 08 
       01 00       
0444A2 01 00 00 05 0098*   	dl 1, 5, 13, 65, fn_laser_b, 265
       00 00 0D 00 
       00 41 00 00 
       6D 4A 04 09 
       01 00       
0444B4 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_pad, 266
       00 00 10 00 
       00 00 01 00 
       83 4A 04 0A 
       01 00       
0444C6 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_seeker_000, 267
       00 00 10 00 
       00 00 01 00 
       95 4A 04 0B 
       01 00       
0444D8 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_seeker_008, 268
       00 00 10 00 
       00 00 01 00 
       AE 4A 04 0C 
       01 00       
0444EA 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_seeker_016, 269
       00 00 10 00 
       00 00 01 00 
       C7 4A 04 0D 
       01 00       
0444FC 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_seeker_024, 270
       00 00 10 00 
       00 00 01 00 
       E0 4A 04 0E 
       01 00       
04450E 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_seeker_032, 271
       00 00 10 00 
       00 00 01 00 
       F9 4A 04 0F 
       01 00       
044520 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_seeker_040, 272
       00 00 10 00 
       00 00 01 00 
       12 4B 04 10 
       01 00       
044532 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_seeker_048, 273
       00 00 10 00 
       00 00 01 00 
       2B 4B 04 11 
       01 00       
044544 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_seeker_056, 274
       00 00 10 00 
       00 00 01 00 
       44 4B 04 12 
       01 00       
044556 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_seeker_064, 275
       00 00 10 00 
       00 00 01 00 
       5D 4B 04 13 
       01 00       
044568 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_seeker_072, 276
       00 00 10 00 
       00 00 01 00 
       76 4B 04 14 
       01 00       
04457A 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_seeker_080, 277
       00 00 10 00 
       00 00 01 00 
       8F 4B 04 15 
       01 00       
04458C 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_seeker_088, 278
       00 00 10 00 
       00 00 01 00 
       A8 4B 04 16 
       01 00       
04459E 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_seeker_096, 279
       00 00 10 00 
       00 00 01 00 
       C1 4B 04 17 
       01 00       
0445B0 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_seeker_104, 280
       00 00 10 00 
       00 00 01 00 
       DA 4B 04 18 
       01 00       
0445C2 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_seeker_112, 281
       00 00 10 00 
       00 00 01 00 
       F3 4B 04 19 
       01 00       
0445D4 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_seeker_120, 282
       00 00 10 00 
       00 00 01 00 
       0C 4C 04 1A 
       01 00       
0445E6 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_seeker_128, 283
       00 00 10 00 
       00 00 01 00 
       25 4C 04 1B 
       01 00       
0445F8 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_seeker_136, 284
       00 00 10 00 
       00 00 01 00 
       3E 4C 04 1C 
       01 00       
04460A 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_seeker_144, 285
       00 00 10 00 
       00 00 01 00 
       57 4C 04 1D 
       01 00       
04461C 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_seeker_152, 286
       00 00 10 00 
       00 00 01 00 
       70 4C 04 1E 
       01 00       
04462E 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_seeker_160, 287
       00 00 10 00 
       00 00 01 00 
       89 4C 04 1F 
       01 00       
044640 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_seeker_168, 288
       00 00 10 00 
       00 00 01 00 
       A2 4C 04 20 
       01 00       
044652 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_seeker_176, 289
       00 00 10 00 
       00 00 01 00 
       BB 4C 04 21 
       01 00       
044664 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_seeker_184, 290
       00 00 10 00 
       00 00 01 00 
       D4 4C 04 22 
       01 00       
044676 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_seeker_192, 291
       00 00 10 00 
       00 00 01 00 
       ED 4C 04 23 
       01 00       
044688 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_seeker_200, 292
       00 00 10 00 
       00 00 01 00 
       06 4D 04 24 
       01 00       
04469A 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_seeker_208, 293
       00 00 10 00 
       00 00 01 00 
       1F 4D 04 25 
       01 00       
0446AC 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_seeker_216, 294
       00 00 10 00 
       00 00 01 00 
       38 4D 04 26 
       01 00       
0446BE 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_seeker_224, 295
       00 00 10 00 
       00 00 01 00 
       51 4D 04 27 
       01 00       
0446D0 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_seeker_232, 296
       00 00 10 00 
       00 00 01 00 
       6A 4D 04 28 
       01 00       
0446E2 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_seeker_240, 297
       00 00 10 00 
       00 00 01 00 
       83 4D 04 29 
       01 00       
0446F4 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_seeker_248, 298
       00 00 10 00 
       00 00 01 00 
       9C 4D 04 2A 
       01 00       
044706 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_ship_0l, 299
       00 00 10 00 
       00 00 01 00 
       B5 4D 04 2B 
       01 00       
044718 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_ship_1c, 300
       00 00 10 00 
       00 00 01 00 
       CB 4D 04 2C 
       01 00       
04472A 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_ship_2r, 301
       00 00 10 00 
       00 00 01 00 
       E1 4D 04 2D 
       01 00       
04473C 01 00 00 08 0135*   	dl 1, 8, 8, 64, fn_ship_small, 302
       00 00 08 00 
       00 40 00 00 
       F7 4D 04 2E 
       01 00       
04474E 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_turret_000, 303
       00 00 10 00 
       00 00 01 00 
       10 4E 04 2F 
       01 00       
044760 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_turret_008, 304
       00 00 10 00 
       00 00 01 00 
       29 4E 04 30 
       01 00       
044772 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_turret_016, 305
       00 00 10 00 
       00 00 01 00 
       42 4E 04 31 
       01 00       
044784 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_turret_024, 306
       00 00 10 00 
       00 00 01 00 
       5B 4E 04 32 
       01 00       
044796 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_turret_032, 307
       00 00 10 00 
       00 00 01 00 
       74 4E 04 33 
       01 00       
0447A8 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_turret_040, 308
       00 00 10 00 
       00 00 01 00 
       8D 4E 04 34 
       01 00       
0447BA 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_turret_048, 309
       00 00 10 00 
       00 00 01 00 
       A6 4E 04 35 
       01 00       
0447CC 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_turret_056, 310
       00 00 10 00 
       00 00 01 00 
       BF 4E 04 36 
       01 00       
0447DE 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_turret_064, 311
       00 00 10 00 
       00 00 01 00 
       D8 4E 04 37 
       01 00       
0447F0 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_turret_072, 312
       00 00 10 00 
       00 00 01 00 
       F1 4E 04 38 
       01 00       
044802 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_turret_080, 313
       00 00 10 00 
       00 00 01 00 
       0A 4F 04 39 
       01 00       
044814 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_turret_088, 314
       00 00 10 00 
       00 00 01 00 
       23 4F 04 3A 
       01 00       
044826 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_turret_096, 315
       00 00 10 00 
       00 00 01 00 
       3C 4F 04 3B 
       01 00       
044838 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_turret_104, 316
       00 00 10 00 
       00 00 01 00 
       55 4F 04 3C 
       01 00       
04484A 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_turret_112, 317
       00 00 10 00 
       00 00 01 00 
       6E 4F 04 3D 
       01 00       
04485C 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_turret_120, 318
       00 00 10 00 
       00 00 01 00 
       87 4F 04 3E 
       01 00       
04486E 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_turret_128, 319
       00 00 10 00 
       00 00 01 00 
       A0 4F 04 3F 
       01 00       
044880 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_turret_136, 320
       00 00 10 00 
       00 00 01 00 
       B9 4F 04 40 
       01 00       
044892 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_turret_144, 321
       00 00 10 00 
       00 00 01 00 
       D2 4F 04 41 
       01 00       
0448A4 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_turret_152, 322
       00 00 10 00 
       00 00 01 00 
       EB 4F 04 42 
       01 00       
0448B6 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_turret_160, 323
       00 00 10 00 
       00 00 01 00 
       04 50 04 43 
       01 00       
0448C8 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_turret_168, 324
       00 00 10 00 
       00 00 01 00 
       1D 50 04 44 
       01 00       
0448DA 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_turret_176, 325
       00 00 10 00 
       00 00 01 00 
       36 50 04 45 
       01 00       
0448EC 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_turret_184, 326
       00 00 10 00 
       00 00 01 00 
       4F 50 04 46 
       01 00       
0448FE 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_turret_192, 327
       00 00 10 00 
       00 00 01 00 
       68 50 04 47 
       01 00       
044910 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_turret_200, 328
       00 00 10 00 
       00 00 01 00 
       81 50 04 48 
       01 00       
044922 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_turret_208, 329
       00 00 10 00 
       00 00 01 00 
       9A 50 04 49 
       01 00       
044934 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_turret_216, 330
       00 00 10 00 
       00 00 01 00 
       B3 50 04 4A 
       01 00       
044946 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_turret_224, 331
       00 00 10 00 
       00 00 01 00 
       CC 50 04 4B 
       01 00       
044958 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_turret_232, 332
       00 00 10 00 
       00 00 01 00 
       E5 50 04 4C 
       01 00       
04496A 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_turret_240, 333
       00 00 10 00 
       00 00 01 00 
       FE 50 04 4D 
       01 00       
04497C 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_turret_248, 334
       00 00 10 00 
       00 00 01 00 
       17 51 04 4E 
       01 00       
04498E             0168*   
04498E             0169*   ; files_list: ; filename:
04498E 73 70 72 69 0170*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
0449A3 73 70 72 69 0171*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
0449BD 73 70 72 69 0172*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
0449D7 73 70 72 69 0173*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
0449F1 73 70 72 69 0174*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
044A0B 73 70 72 69 0175*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
044A25 73 70 72 69 0176*   fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
044A3E 73 70 72 69 0177*   fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
044A57 73 70 72 69 0178*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
044A6D 73 70 72 69 0179*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
044A83 73 70 72 69 0180*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
044A95 73 70 72 69 0181*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044AAE 73 70 72 69 0182*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044AC7 73 70 72 69 0183*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044AE0 73 70 72 69 0184*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044AF9 73 70 72 69 0185*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044B12 73 70 72 69 0186*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044B2B 73 70 72 69 0187*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044B44 73 70 72 69 0188*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044B5D 73 70 72 69 0189*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044B76 73 70 72 69 0190*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044B8F 73 70 72 69 0191*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044BA8 73 70 72 69 0192*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044BC1 73 70 72 69 0193*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044BDA 73 70 72 69 0194*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044BF3 73 70 72 69 0195*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
044C0C 73 70 72 69 0196*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044C25 73 70 72 69 0197*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
044C3E 73 70 72 69 0198*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
044C57 73 70 72 69 0199*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044C70 73 70 72 69 0200*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
044C89 73 70 72 69 0201*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
044CA2 73 70 72 69 0202*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044CBB 73 70 72 69 0203*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044CD4 73 70 72 69 0204*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
044CED 73 70 72 69 0205*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
044D06 73 70 72 69 0206*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044D1F 73 70 72 69 0207*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
044D38 73 70 72 69 0208*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044D51 73 70 72 69 0209*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
044D6A 73 70 72 69 0210*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044D83 73 70 72 69 0211*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
044D9C 73 70 72 69 0212*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044DB5 73 70 72 69 0213*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
044DCB 73 70 72 69 0214*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
044DE1 73 70 72 69 0215*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
044DF7 73 70 72 69 0216*   fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
044E10 73 70 72 69 0217*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044E29 73 70 72 69 0218*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044E42 73 70 72 69 0219*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044E5B 73 70 72 69 0220*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044E74 73 70 72 69 0221*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044E8D 73 70 72 69 0222*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044EA6 73 70 72 69 0223*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044EBF 73 70 72 69 0224*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044ED8 73 70 72 69 0225*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044EF1 73 70 72 69 0226*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044F0A 73 70 72 69 0227*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044F23 73 70 72 69 0228*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044F3C 73 70 72 69 0229*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044F55 73 70 72 69 0230*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044F6E 73 70 72 69 0231*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
044F87 73 70 72 69 0232*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044FA0 73 70 72 69 0233*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
044FB9 73 70 72 69 0234*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
044FD2 73 70 72 69 0235*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044FEB 73 70 72 69 0236*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045004 73 70 72 69 0237*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04501D 73 70 72 69 0238*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045036 73 70 72 69 0239*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
04504F 73 70 72 69 0240*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045068 73 70 72 69 0241*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045081 73 70 72 69 0242*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04509A 73 70 72 69 0243*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0450B3 73 70 72 69 0244*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0450CC 73 70 72 69 0245*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0450E5 73 70 72 69 0246*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0450FE 73 70 72 69 0247*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045117 73 70 72 69 0248*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045130             0051        include "images_ui.inc"
045130 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
045200             0002*   
045200             0003*   ; Generated by make_images.py
045200             0004*   
045200             0005*   ui_num_images: equ 4
045200             0006*   
045200             0007*   ; buffer_ids:
045200             0008*   BUF_BEZEL_L: equ 0
045200             0009*   BUF_BEZEL_R: equ 1
045200             0010*   BUF_SPLASH_BG: equ 2
045200             0011*   BUF_SPLASH_LOGO: equ 3
045200             0012*   
045200             0013*   ui_image_list: ; type; width; height; size; filename; bufferId:
045200 01 00 00 80 0014*   	dl 1, 128, 384, 49152, fn_bezel_l, 0
       00 00 80 01 
       00 00 C0 00 
       48 52 04 00 
       00 00       
045212 01 00 00 80 0015*   	dl 1, 128, 384, 49152, fn_bezel_r, 1
       00 00 80 01 
       00 00 C0 00 
       59 52 04 01 
       00 00       
045224 01 00 00 40 0016*   	dl 1, 320, 240, 76800, fn_splash_bg, 2
       01 00 F0 00 
       00 00 2C 01 
       6A 52 04 02 
       00 00       
045236 01 00 00 40 0017*   	dl 1, 320, 240, 76800, fn_splash_logo, 3
       01 00 F0 00 
       00 00 2C 01 
       7D 52 04 03 
       00 00       
045248             0018*   
045248             0019*   ; files_list: ; filename:
045248 75 69 2F 62 0020*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
045259 75 69 2F 62 0021*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
04526A 75 69 2F 73 0022*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
04527D 75 69 2F 73 0023*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
045292             0052        include "laser.inc"
045292 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
045300             0002*   
045300             0003*   ; ##### LASER SPRITE PARAMETERS #####
045300             0004*   ; uses the same offsets from its table base as the main sprite table:
045300             0005*   laser_start_variables: ; label marking beginning of table
045300 11          0006*   laser_id:                db table_max_records+1 ; 1 bytes unique spriteId, zero-based
045301             0007*   ; sprite state variables
045301 00 00 00    0008*   laser_x:                 dl                   0 ; 3 bytes 16.8 fractional x position in pixels
045304 00 00 00    0009*   laser_y:                 dl                   0 ; 3 bytes 16.8 fractional y position in pixels
045307 00 00 00    0010*   laser_xvel:              dl                   0 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04530A 00 FA FF    0011*   laser_yvel:              dl              -6*256 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04530D 00 FA FF    0012*   laser_vel:               dl              -6*256 ; 3 bytes velocity px/frame (16.8 fixed)
045310 00 00 00    0013*   laser_heading:           dl                   0 ; 3 bytes sprite movement direction deg256 16.8 fixed
045313 00 00 00    0014*   laser_orientation:       dl                   0 ; 3 bytes orientation bits
045316             0015*   ; sprite definition variables
045316 00          0016*   laser_type:              db                   0 ; 1 bytes not currently used
045317 08 01 00    0017*   laser_base_bufferId:     dl         BUF_LASER_A ; 3 bytes bitmap bufferId
04531A 00 00 00    0018*   laser_move_program:      dl                   0 ; 3 bytes not currently used
04531D 00          0019*   laser_collisions:        db                   0 ; 1 bytes see collisions.inc constants for bit definitions
04531E 10          0020*   laser_dim_x:             db                  16 ; 1 bytes sprite width in pixels
04531F 10          0021*   laser_dim_y:             db                  16 ; 1 bytes sprite height in pixels
045320 01          0022*   laser_num_orientations:  db                   1 ; 1 bytes number of orientations for this sprite
045321 02          0023*   laser_num_animations:    db                   2 ; 1 bytes number of animations for this sprite
045322 01          0024*   laser_animation:         db                   1 ; 1 bytes current animation index, zero-based
045323 00          0025*   laser_animation_timer:   db                   0 ; 1 bytes when hits zero, draw next animation
045324 00          0026*   laser_move_timer:        db                   0 ; 1 bytes when zero, go to next move program, or step
045325 00          0027*   laser_move_step:         db                   0 ; 1 bytes stage in a move program sequence, varies
045326 00          0028*   laser_points:            db                   0 ; 1 bytes points awarded for killing this sprite type
045327 00          0029*   laser_shield_damage:     db                   0 ; 1 bytes shield points deducted for collision
045328             0030*   laser_end_variables: ; for when we want to traverse this table in reverse
045328             0031*   laser_speed: equ -6*256 ; 6 pixels per frame 16.8 fixed
045328             0032*   laser_animation_timer_reset: equ 2 ; animate every two frames
045328             0033*   
045328             0034*   laser_control:
045328             0035*   ; point to laser sprite variables
045328 FD 21 00 53 0036*       ld iy,laser_start_variables
       04          
04532D FD 22 90 5B 0037*       ld (table_pointer),iy
       04          
045332             0038*   ; did laser just die?
045332 FD CB 1D 7E 0039*       bit sprite_just_died,(iy+sprite_collisions)
045336 C2 BF 53 04 0040*       jp nz,kill_laser
04533A             0041*   ; select laser sprite
04533A 3A 00 53 04 0042*       ld a,(laser_id)
04533E CD 00 1E 04 0043*       call vdu_sprite_select
045342             0044*   ; update laser position
045342 CD 5B 5C 04 0045*       call move_sprite
045346             0046*   ; are we at top of screen?
045346 3A 94 5B 04 0047*       ld a,(sprite_screen_edge)
04534A E6 08       0048*       and collide_top
04534C C2 BF 53 04 0049*       jp nz,kill_laser
045350             0050*   ; check animation timer
045350 FD 35 23    0051*       dec (iy+sprite_animation_timer)
045353 C2 60 53 04 0052*       jp nz,@F
045357 3E 02       0053*       ld a,laser_animation_timer_reset
045359 FD 77 23    0054*       ld (iy+sprite_animation_timer),a
04535C CD 47 1E 04 0055*       call vdu_sprite_next_frame
045360             0056*   @@: ; draw the sprite
045360 FD 07 01    0057*       ld bc,(iy+sprite_x)
045363 FD 17 04    0058*       ld de,(iy+sprite_y)
045366 CD CC 1E 04 0059*       call vdu_sprite_move_abs168
04536A             0060*   ; return to caller
04536A C9          0061*       ret
04536B             0062*   ; end laser_control
04536B             0063*   
04536B             0064*   fire_laser:
04536B             0065*   ; point to laser sprite variables
04536B FD 21 00 53 0066*       ld iy,laser_start_variables
       04          
045370 FD 22 90 5B 0067*       ld (table_pointer),iy
       04          
045375             0068*   ; is laser already active?
045375 FD CB 1D 76 0069*       bit sprite_alive,(iy+sprite_collisions)
045379 C0          0070*       ret nz ; laser already active
04537A             0071*   ; otherwise,FIRE ZEE LASER!!1111
04537A             0072*   ; set laser status to active
04537A FD CB 1D F6 0073*       set sprite_alive,(iy+sprite_collisions)
04537E             0074*   ; initialize laser sprite parameters
04537E             0075*   ; x-coordinate
04537E DD 21 0A 57 0076*       ld ix,player_start_variables
       04          
045383 DD 27 01    0077*       ld hl,(ix+sprite_x)
045386 11 00 05 00 0078*       ld de,5*256 ; horizontal center with player sprite
04538A 19          0079*       add hl,de
04538B FD 2F 01    0080*       ld (iy+sprite_x),hl
04538E             0081*   ; y-coordinate
04538E DD 27 04    0082*       ld hl,(ix+sprite_y)
045391 11 00 FA FF 0083*       ld de,-6*256 ; set laser y a few pixels above player
045395 FD 2F 04    0084*       ld (iy+sprite_y),hl
045398             0085*   ; set laser velocity
045398 21 00 FA FF 0086*       ld hl,laser_speed
04539C FD 2F 0A    0087*       ld (iy+sprite_yvel),hl
04539F             0088*   ; set laser animation frame and timer
04539F AF          0089*       xor a ; first frame
0453A0 FD 77 22    0090*       ld (iy+sprite_animation),a
0453A3 3E 02       0091*       ld a,laser_animation_timer_reset
0453A5 FD 77 23    0092*       ld (iy+sprite_animation_timer),a
0453A8             0093*   ; plot the sprite and make it visible
0453A8 3A 00 53 04 0094*       ld a,(laser_id)
0453AC CD 00 1E 04 0095*       call vdu_sprite_select
0453B0 FD 07 01    0096*       ld bc,(iy+sprite_x)
0453B3 FD 17 04    0097*       ld de,(iy+sprite_y)
0453B6 CD CC 1E 04 0098*       call vdu_sprite_move_abs168
0453BA CD 76 1E 04 0099*       call vdu_sprite_show
0453BE             0100*   ; return to caller
0453BE C9          0101*       ret
0453BF             0102*   ; end fire_laser
0453BF             0103*   
0453BF             0104*   kill_laser:
0453BF             0105*   ; update status to inactive
0453BF AF          0106*       xor a ; zero out a
0453C0 32 1D 53 04 0107*       ld (laser_collisions),a
0453C4             0108*   ; hide the sprite
0453C4 3A 00 53 04 0109*       ld a,(laser_id)
0453C8 CD 00 1E 04 0110*       call vdu_sprite_select
0453CC CD 84 1E 04 0111*       call vdu_sprite_hide
0453D0 C9          0112*       ret
0453D1             0113*   ; end kill_laser
0453D1             0053        include "levels.inc"
0453D1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
045400             0002*   
045400             0003*   ; tileset indices
045400             0004*   tiles_dg: equ 0
045400             0005*   ; tiles_xevious: equ 1
045400 00 00 00    0006*   tileset_ptr_idx: dl 0
045403             0007*   tileset_ptrs:
045403             0008*       ; dl tiles_xevious_levels
045403 CB 54 04    0009*       dl tileset_00_levels
045406 00 00 00    0010*   tileset_ptrs_end: dl 0 ; list terminator
045409             0011*   
045409             0012*   ; get a pointer to the current tileset
045409             0013*   ; inputs: tileset_ptr_idx
045409             0014*   ; returns: ix = pointer to tileset levels lut
045409             0015*   get_tileset_ptr:
045409 3A 00 54 04 0016*       ld a,(tileset_ptr_idx)
04540D 57          0017*       ld d,a ; d = tileset index
04540E 1E 03       0018*       ld e,3 ; three bytes per index record
045410 ED 5C       0019*       mlt de ; offset into tileset_ptrs lut
045412 DD 21 03 54 0020*       ld ix,tileset_ptrs
       04          
045417 DD 19       0021*       add ix,de ; ix = pointer to tileset_ptrs record
045419 C9          0022*       ret
04541A             0023*   ; end get_tileset_ptr
04541A             0024*   
04541A             0025*   ; intialize a tileset
04541A             0026*   ; inputs: a = index into tileset_ptrs
04541A             0027*   init_tileset:
04541A 32 00 54 04 0028*       ld (tileset_ptr_idx),a ; store new tileset index
04541E CD 09 54 04 0029*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
045422 DD 37 00    0030*       ld ix,(ix) ; ix = pointer to tileset levels lut
045425 DD 7E FF    0031*       ld a,(ix-1) ; number of levels in the tileset
045428 32 58 54 04 0032*       ld (num_levels),a
04542C AF          0033*       xor a ; reset current level to zero
04542D 32 57 54 04 0034*       ld (cur_level),a
045431 C3 89 54 04 0035*       jp init_level
045435             0036*   ; end init_tileset
045435             0037*   
045435             0038*   next_tileset:
045435 21 00 54 04 0039*       ld hl,tileset_ptr_idx
045439 34          0040*       inc (hl) ; bump to next index
04543A CD 09 54 04 0041*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
04543E DD 27 00    0042*       ld hl,(ix) ; ix = pointer to tileset levels lut
045441             0043*       sign_hlu ; check for list terminator (0)
045441 19          0001*M1     add hl,de
045442 B7          0002*M1     or a
045443 ED 52       0003*M1     sbc hl,de
045445 C2 53 54 04 0044*       jp nz,@F ; not end of list
045449 3E FF       0045*       ld a,-1 ; will wrap around to zero on the next iteration
04544B 32 00 54 04 0046*       ld (tileset_ptr_idx),a
04544F C3 35 54 04 0047*       jp next_tileset ; try again
045453             0048*   @@:
045453 C3 1A 54 04 0049*       jp init_tileset
045457             0050*   ; end next_tileset
045457             0051*   
045457 00          0052*   cur_level: db 0
045458 00          0053*   num_levels: db 0
045459             0054*   
045459             0055*   ; get a pointer to the current level lookup record
045459             0056*   ; inputs: tileset_ptr_idx, cur_level
045459             0057*   ; returns: ix = pointer to level definition
045459             0058*   get_level_ptr:
045459 CD 09 54 04 0059*       call get_tileset_ptr
04545D DD 37 00    0060*       ld ix,(ix) ; ix = pointer to tileset levels lut
045460 3A 57 54 04 0061*       ld a,(cur_level)
045464 57          0062*       ld d,a ; d = level index
045465 1E 03       0063*       ld e,3 ; three bytes per level record
045467 ED 5C       0064*       mlt de ; offset into tileset levels lut
045469 DD 19       0065*       add ix,de ; ix = pointer to level record
04546B C9          0066*       ret
04546C             0067*   ; end get_level_ptr
04546C             0068*   
04546C             0069*   ; advance to the next level in the current tileset
04546C             0070*   ; inputs: tileset_ptr_idx, cur_level
04546C             0071*   next_level:
04546C 21 57 54 04 0072*       ld hl,cur_level
045470 34          0073*       inc (hl) ; bump to next level
045471 CD 59 54 04 0074*       call get_level_ptr ; ix points to current level lookup record
045475 DD 27 00    0075*       ld hl,(ix) ; hl = pointer to next level lookup record
045478             0076*       sign_hlu ; check for list terminator (0)
045478 19          0001*M1     add hl,de
045479 B7          0002*M1     or a
04547A ED 52       0003*M1     sbc hl,de
04547C C2 89 54 04 0077*       jp nz,@F ; not end of list
045480 AF          0078*       xor a ; reset level to zero
045481 32 57 54 04 0079*       ld (cur_level),a
045485 C3 35 54 04 0080*       jp next_tileset ; try next tileset
045489             0081*   @@: ; fall through to init_level
045489             0082*   ; end next_level
045489             0083*   
045489             0084*   ; inputs: ix pointed to tileset level definition
045489             0085*   init_level:
045489 CD 59 54 04 0086*       call get_level_ptr ; ix points to level lookup record
04548D DD 37 00    0087*       ld ix,(ix) ; ix points to level definition
045490             0088*   ; set tiles_cols
045490 DD 7E 00    0089*       ld a,(ix+0)
045493 32 06 63 04 0090*       ld (tiles_cols),a
045497             0091*   ; set tiles_row counter
045497 DD 7E 01    0092*       ld a,(ix+1)
04549A 32 03 63 04 0093*       ld (tiles_row),a
04549E             0094*   ; set cur_baseBufferId
04549E DD 27 04    0095*       ld hl,(ix+4)
0454A1 22 07 63 04 0096*       ld (cur_baseBufferId),hl
0454A5             0097*   ; set tiles_row_defs
0454A5 ED 32 07    0098*       lea ix,ix+7 ; ix points to definition of first tile of first row
0454A8 DD 22 00 63 0099*       ld (tiles_row_defs),ix
       04          
0454AD             0100*   
0454AD             0101*   ; print level
0454AD             0102*   level_x: equ 48
0454AD             0103*   level_y: equ 0
0454AD 0E 30       0104*       ld c,level_x
0454AF 06 00       0105*       ld b,level_y
0454B1 CD 37 18 04 0106*       call vdu_move_cursor
0454B5 CD 10 01 04 0107*       call printInline
0454B9 4C 65 76 65 0108*       asciz "Level: "
       6C 3A 20 00 
0454C1 3A 57 54 04 0109*       ld a,(cur_level)
0454C5 CD 5A 01 04 0110*       call printHexA
0454C9             0111*       ; call printNewLine
0454C9             0112*       ; ld hl,(cur_baseBufferId)
0454C9             0113*       ; call printDec
0454C9             0114*   
0454C9             0115*   ; ; draw initial background tiles
0454C9             0116*   ; ; TODO: make this a stars background
0454C9             0117*   ;     ld hl,BUF_STATION_BG_00
0454C9             0118*   ;     call vdu_buff_select
0454C9             0119*   ;     ld bc,0
0454C9             0120*   ;     ld de,field_top
0454C9             0121*   ;     call vdu_plot_bmp
0454C9             0122*   
0454C9             0123*   ;     ld hl,BUF_STATION_BG_01
0454C9             0124*   ;     call vdu_buff_select
0454C9             0125*   ;     ld bc,0
0454C9             0126*   ;     ld de,field_top+256
0454C9             0127*   ;     call vdu_plot_bmp
0454C9             0128*   
0454C9 C9          0129*       ret
0454CA             0130*   ; end init_level
0454CA             0054        include "levels_tileset_0.inc"
0454CA             0001*   ; Generated from tiles/dg/dg0_00.tmx
0454CA             0002*   
0454CA 01          0003*   tileset_00_num_levels: db 1
0454CB             0004*   
0454CB             0005*   tileset_00_levels:
0454CB D1 54 04    0006*   	dl tileset_00_level_00
0454CE 00 00 00    0007*   	dl 0 ; list terminator
0454D1             0008*   
0454D1             0009*   tileset_00_level_00: ; Level 0
0454D1 10          0010*   	db 16          ; num cols
0454D2 20 00 00    0011*   	dl 32          ; num rows
0454D5 00 02 00    0012*   	dl 512 ; base bufferId
0454D8 00 00 00 00 0013*   	db 000,000,000,000,000,101,116,113,114,115,104,000,000,000,000,000
       00 65 74 71 
       72 73 68 00 
       00 00 00 00 
0454E8 00 00 00 65 0014*   	db 000,000,000,101,098,116,113,114,114,115,116,097,104,000,000,000
       62 74 71 72 
       72 73 74 61 
       68 00 00 00 
0454F8 00 65 61 F5 0015*   	db 000,101,097,245,246,098,097,098,098,099,113,113,114,098,104,000
       F6 62 61 62 
       62 63 71 71 
       72 62 68 00 
045508 00 74 71 88 0016*   	db 000,116,113,136,137,115,113,114,113,114,098,099,113,114,100,000
       89 73 71 72 
       71 72 62 63 
       71 72 64 00 
045518 65 72 61 96 0017*   	db 101,114,097,150,151,099,097,098,098,098,081,082,074,083,084,104
       97 63 61 62 
       62 62 51 52 
       4A 53 54 68 
045528 63 71 72 96 0018*   	db 099,113,114,150,151,167,216,216,182,113,065,066,248,067,068,116
       97 A7 D8 D8 
       B6 71 41 42 
       F8 43 44 74 
045538 71 72 62 9A 0019*   	db 113,114,098,154,155,097,098,097,165,168,055,248,001,248,056,114
       9B 61 62 61 
       A5 A8 37 F8 
       01 F8 38 72 
045548 71 72 64 72 0020*   	db 113,114,100,114,113,100,113,114,113,114,049,050,248,051,052,098
       71 64 71 72 
       71 72 31 32 
       F8 33 34 62 
045558 61 62 61 64 0021*   	db 097,098,097,100,097,098,100,098,098,098,033,034,074,035,036,099
       61 62 64 62 
       62 62 21 22 
       4A 23 24 63 
045568 71 64 71 72 0022*   	db 113,100,113,114,113,114,098,114,115,113,087,088,188,113,100,113
       71 72 62 72 
       73 71 57 58 
       BC 71 64 71 
045578 61 62 59 5A 0023*   	db 097,098,089,090,091,098,114,098,136,137,071,072,219,097,098,097
       5B 62 72 62 
       88 89 47 48 
       DB 61 62 61 
045588 64 71 49 05 0024*   	db 100,113,073,005,075,171,220,172,134,135,171,220,236,220,220,172
       4B AB DC AC 
       86 87 AB DC 
       EC DC DC AC 
045598 62 64 39 3A 0025*   	db 098,100,057,058,059,097,098,100,134,135,099,100,097,098,100,098
       3B 61 62 64 
       86 87 63 64 
       61 62 64 62 
0455A8 72 62 72 73 0026*   	db 114,098,114,115,113,116,099,113,154,155,115,113,100,113,114,113
       71 74 63 71 
       9A 9B 73 71 
       64 71 72 71 
0455B8 62 72 62 63 0027*   	db 098,114,098,099,113,114,113,114,241,242,099,097,098,097,098,100
       71 72 71 72 
       F1 F2 63 61 
       62 61 62 64 
0455C8 73 72 71 72 0028*   	db 115,114,113,114,097,098,113,114,180,114,113,100,113,114,113,114
       61 62 71 72 
       B4 72 71 64 
       71 72 71 72 
0455D8 61 62 98 99 0029*   	db 097,098,152,153,098,152,153,098,211,100,097,098,100,243,098,098
       62 98 99 62 
       D3 64 61 62 
       64 F3 62 62 
0455E8 64 71 86 87 0030*   	db 100,113,134,135,114,134,135,115,195,212,212,212,212,243,114,113
       72 86 87 73 
       C3 D4 D4 D4 
       D4 F3 72 71 
0455F8 62 61 F5 F6 0031*   	db 098,097,245,246,098,245,246,099,211,114,099,097,098,243,098,100
       62 F5 F6 63 
       D3 72 63 61 
       62 F3 62 64 
045608 71 72 F1 F2 0032*   	db 113,114,241,242,115,241,242,163,162,098,113,100,087,088,113,114
       73 F1 F2 A3 
       A2 62 71 64 
       57 58 71 72 
045618 73 71 51 52 0033*   	db 115,113,081,082,074,083,084,098,114,115,113,116,071,072,098,098
       4A 53 54 62 
       72 73 71 74 
       47 48 62 62 
045628 63 61 41 42 0034*   	db 099,097,065,066,248,067,068,113,089,090,090,090,090,091,114,113
       F8 43 44 71 
       59 5A 5A 5A 
       5A 5B 72 71 
045638 71 64 37 F8 0035*   	db 113,100,055,248,001,248,056,114,073,148,148,040,105,075,098,100
       01 F8 38 72 
       49 94 94 28 
       69 4B 62 64 
045648 61 62 31 32 0036*   	db 097,098,049,050,248,051,052,114,073,132,056,005,055,075,113,114
       F8 33 34 72 
       49 84 38 05 
       37 4B 71 72 
045658 71 64 21 22 0037*   	db 113,100,033,034,074,035,036,114,073,247,116,040,123,075,098,098
       4A 23 24 72 
       49 F7 74 28 
       7B 4B 62 62 
045668 61 62 F1 F2 0038*   	db 097,098,241,242,100,241,242,098,073,113,243,121,107,075,099,113
       64 F1 F2 62 
       49 71 F3 79 
       6B 4B 63 71 
045678 67 71 86 87 0039*   	db 103,113,134,135,114,134,135,113,057,058,058,058,058,059,114,102
       72 86 87 71 
       39 3A 3A 3A 
       3A 3B 72 66 
045688 00 64 9A 9B 0040*   	db 000,100,154,155,098,154,155,100,098,098,099,180,098,100,098,000
       62 9A 9B 64 
       62 62 63 B4 
       62 64 62 00 
045698 00 67 72 63 0041*   	db 000,103,114,099,113,114,114,115,163,212,212,196,113,114,098,000
       71 72 72 73 
       A3 D4 D4 C4 
       71 72 62 00 
0456A8 00 00 62 71 0042*   	db 000,000,098,113,114,098,098,099,097,098,097,211,100,098,102,000
       72 62 62 63 
       61 62 61 D3 
       64 62 66 00 
0456B8 00 00 67 71 0043*   	db 000,000,103,113,114,100,114,113,100,113,114,179,114,102,000,000
       72 64 72 71 
       64 71 72 B3 
       72 66 00 00 
0456C8 00 00 00 00 0044*   	db 000,000,000,000,000,103,100,097,098,100,102,000,000,000,000,000
       00 67 64 61 
       62 64 66 00 
       00 00 00 00 
0456D8             0055        ; include "levels_xevious.inc"
0456D8             0056        include "player.inc"
0456D8 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
045700             0002*   
045700             0003*   ; ######## GAME STATE VARIABLES #######
045700             0004*   ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
045700 00 00 00    0005*   player_score: dl 0 ; integer
045703             0006*   ; player current shields,binary
045703             0007*   ; when < 0 player splodes
045703             0008*   ; restores to player_max_shields when new ship spawns
045703 10 00 00    0009*   player_shields: dl 16 ; integer
045706             0010*   ; max player shields,binary
045706             0011*   ; can increase with power-ups (todo)
045706 10 00 00    0012*   player_max_shields: dl 16 ; integer
045709             0013*   ; when reaches zero,game ends
045709             0014*   ; can increase based on TODO
045709 03          0015*   player_ships: db 3 ; integer
04570A             0016*   
04570A             0017*   speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
04570A             0018*   
04570A             0019*   ; ######### PLAYER SPRITE PARAMETERS ##########
04570A             0020*   ; uses the same offsets from its table base as the main sprite table:
04570A             0021*   player_start_variables: ; label marking beginning of table
04570A 10          0022*   player_id:                db table_max_records ; 1 bytes unique spriteId, zero-based
04570B             0023*   ; sprite state variables
04570B 00 00 00    0024*   player_x:                 dl                 0 ; 3 bytes 16.8 fractional x position in pixels
04570E 00 00 00    0025*   player_y:                 dl                 0 ; 3 bytes 16.8 fractional y position in pixels
045711 00 00 00    0026*   player_xvel:              dl                 0 ; 3 bytes x-component velocity, 16.8 fixed, pixels
045714 00 00 00    0027*   player_yvel:              dl                 0 ; 3 bytes y-component velocity, 16.8 fixed, pixels
045717 00 03 00    0028*   player_vel:               dl             3*256 ; 3 bytes velocity px/frame (16.8 fixed)
04571A 00 00 00    0029*   player_heading:           dl                 0 ; 3 bytes sprite movement direction deg256 16.8 fixed
04571D 00 00 00    0030*   player_orientation:       dl                 0 ; 3 bytes orientation bits
045720             0031*   ; sprite definition variables
045720 00          0032*   player_type:              db                 0 ; 1 bytes not currently used
045721 2B 01 00    0033*   player_base_bufferId:     dl       BUF_SHIP_0L ; 3 bytes bitmap bufferId
045724 00 00 00    0034*   player_move_program:      dl                 0 ; 3 bytes not currently used
045727 00          0035*   player_collisions:        db                 0 ; 1 bytes see collisions.inc constants for bit definitions
045728 10          0036*   player_dim_x:             db                16 ; 1 bytes sprite width in pixels
045729 10          0037*   player_dim_y:             db                16 ; 1 bytes sprite height in pixels
04572A 01          0038*   player_num_orientations:  db                 1 ; 1 bytes number of orientations for this sprite
04572B 03          0039*   player_num_animations:    db                 3 ; 1 bytes number of animations for this sprite
04572C 01          0040*   player_animation:         db                 1 ; 1 bytes current animation index, zero-based
04572D 00          0041*   player_animation_timer:   db                 0 ; 1 bytes when hits zero, draw next animation
04572E 00          0042*   player_move_timer:        db                 0 ; 1 bytes when zero, go to next move program, or step
04572F 00          0043*   player_move_step:         db                 0 ; 1 bytes stage in a move program sequence, varies
045730 00          0044*   player_points:            db                 0 ; 1 bytes points awarded for killing this sprite type
045731 00          0045*   player_shield_damage:     db                 0 ; 1 bytes shield points deducted for collision
045732             0046*   player_end_variables: ; for when we want to traverse this table in reverse
045732             0047*   
045732             0048*   ; set initial player position
045732             0049*   ; inputs: none,everything is hardcoded
045732             0050*   ; outputs: player_x/y set to bottom-left corner of screen
045732             0051*   ; destroys: a
045732             0052*   player_init:
045732 3A 0A 57 04 0053*   	ld a,(player_id)
045736 CD 00 1E 04 0054*   	call vdu_sprite_select
04573A CD 13 1E 04 0055*       call vdu_sprite_clear_frames
04573E 21 2B 01 00 0056*       ld hl,BUF_SHIP_0L
045742 CD 55 1F 04 0057*       call vdu_sprite_add_buff
045746 21 2C 01 00 0058*       ld hl,BUF_SHIP_1C
04574A CD 55 1F 04 0059*       call vdu_sprite_add_buff
04574E 21 2D 01 00 0060*       ld hl,BUF_SHIP_2R
045752 CD 55 1F 04 0061*       call vdu_sprite_add_buff
045756 01 00 00 00 0062*       ld bc,0
04575A ED 43 0B 57 0063*       ld (player_x),bc
       04          
04575F 11 00 6F 01 0064*       ld de,sprite_bottom*256 ; max sprite y-coordinate
045763 ED 53 0E 57 0065*       ld (player_y),de
       04          
045768 CD CC 1E 04 0066*       call vdu_sprite_move_abs168
04576C CD 76 1E 04 0067*       call vdu_sprite_show
045770 21 D2 60 04 0068*       ld hl,player_alive
045774 22 C4 60 04 0069*       ld (player_state),hl
045778 21 27 57 04 0070*       ld hl,player_collisions
04577C CB F6       0071*       set sprite_alive,(hl)
04577E C9          0072*       ret
04577F             0073*   
04577F             0074*   ; process player keyboard input, set player bitmap
04577F             0075*   ; velocities and draw player bitmap at updated coordinates
04577F             0076*   ; Inputs: player_x/y set at desired position
04577F             0077*   ; Returns: player bitmap drawn at updated position
04577F             0078*   ; Destroys: probably everything except maybe iy
04577F             0079*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
04577F             0080*   ; TODO: requires sprite implementation
04577F             0081*   player_input:
04577F             0082*   ; ; did we die last frame?
04577F             0083*   ;     ld a,(player_collisions)
04577F             0084*   ;     and %00000010 ; zero flag will be set if not dead
04577F             0085*   ;     jr z,player_not_dead
04577F             0086*   ; ; yes we died
04577F             0087*   ;     call kill_player
04577F             0088*   ;     ret ; done
04577F             0089*   player_not_dead: ; yay we didn't die
04577F             0090*   ; reset player component velocities to zero as the default
04577F 21 00 00 00 0091*   	ld hl,0
045783 22 11 57 04 0092*   	ld (player_xvel),hl
045787 22 14 57 04 0093*   	ld (player_yvel),hl
04578B             0094*   ; make ship the active sprite
04578B 3A 0A 57 04 0095*       ld a,(player_id)
04578F CD 00 1E 04 0096*       call vdu_sprite_select
045793             0097*   ; check for keypresses and branch accordingly
045793             0098*   ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
045793             0099*       MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
045793 3E 1E       0001*M1 			LD	A, function
045795 5B CF       0002*M1 			RST.LIL	08h
045797             0100*   ; we test all four arrow keys and add/subract velocities accordingly
045797             0101*   ; this handles the case where two opposing movement keys
045797             0102*   ; are down simultaneously (velocities will net to zero)
045797             0103*   ; and allows diagonal movement when a vertical and horizontal key are down
045797             0104*   ; it also allows movement and action keys to be detected simultaneously
045797             0105*   ; so we can walk and chew gum at the same time
045797 3E 01       0106*       ld a,1 ; set ship's default animation to center
045799             0107*           ; if left and right are both down a will net to
045799             0108*   
045799             0109*   ; 99 Space: fire main weapon
045799 DD CB 0C 56 0110*       bit 2,(ix+12)
04579D F5          0111*       push af ; save flags for after player movement processed
04579E             0112*   ; 26 Left: move player left
04579E DD CB 03 4E 0113*       bit 1,(ix+3)
0457A2 CA B4 57 04 0114*       jp z,@F
0457A6 2A 11 57 04 0115*       ld hl,(player_xvel)
0457AA 01 00 FD FF 0116*       ld bc,-speed_player
0457AE 09          0117*       add hl,bc
0457AF 22 11 57 04 0118*       ld (player_xvel),hl
0457B3 3D          0119*       dec a ; set ship's animation to left
0457B4             0120*   @@:
0457B4             0121*   ; 122 Right: move player right
0457B4 DD CB 0F 4E 0122*       bit 1,(ix+15)
0457B8 CA CA 57 04 0123*   	jp z,@F
0457BC 2A 11 57 04 0124*       ld hl,(player_xvel)
0457C0 01 00 03 00 0125*       ld bc,speed_player
0457C4 09          0126*       add hl,bc
0457C5 22 11 57 04 0127*       ld (player_xvel),hl
0457C9 3C          0128*       inc a ; set ship's animation to right
0457CA             0129*   @@:
0457CA             0130*   ; 58 Up: move player up
0457CA DD CB 07 4E 0131*       bit 1,(ix+7)
0457CE CA DF 57 04 0132*   	jp z,@F
0457D2 2A 14 57 04 0133*       ld hl,(player_yvel)
0457D6 01 00 FD FF 0134*       ld bc,-speed_player
0457DA 09          0135*       add hl,bc
0457DB 22 14 57 04 0136*       ld (player_yvel),hl
0457DF             0137*   @@:
0457DF             0138*   ; 42 Down: move player down
0457DF DD CB 05 4E 0139*       bit 1,(ix+5)
0457E3 CA F4 57 04 0140*   	jp z,@F
0457E7 2A 14 57 04 0141*       ld hl,(player_yvel)
0457EB 01 00 03 00 0142*       ld bc,speed_player
0457EF 09          0143*       add hl,bc
0457F0 22 14 57 04 0144*       ld (player_yvel),hl
0457F4             0145*   @@:
0457F4             0146*   ; a should land here loaded with the correct frame
0457F4 CD 63 1E 04 0147*       call vdu_sprite_select_frame
0457F8             0148*   ; draw player at updated position
0457F8 FD 21 0A 57 0149*       ld iy,player_start_variables
       04          
0457FD FD 22 90 5B 0150*       ld (table_pointer),iy
       04          
045802 CD 5B 5C 04 0151*       call move_sprite
045806 ED 4B 0B 57 0152*       ld bc,(player_x)
       04          
04580B ED 5B 0E 57 0153*       ld de,(player_y)
       04          
045810 CD CC 1E 04 0154*   	call vdu_sprite_move_abs168
045814             0155*   ; process player laser fire
045814 F1          0156*       pop af ; restore flags from spacebar check
045815 C2 6B 53 04 0157*       jp nz,fire_laser ; will return to caller from there
045819 C9          0158*       ret
04581A             0159*   ; end player_input
04581A             0160*   
04581A             0161*   score_x: equ 48
04581A             0162*   score_y: equ 1
04581A             0163*   ; prints the player's score
04581A             0164*   print_score:
04581A 0E 30       0165*       ld c,score_x
04581C 06 01       0166*       ld b,score_y
04581E CD 37 18 04 0167*       call vdu_move_cursor
045822             0168*   ; TODO: make this part of the UI setup and only print as needed
045822 CD 10 01 04 0169*       call printInline
045826 53 63 6F 72 0170*       asciz "Score:"
       65 3A 00    
04582D             0171*   ; END TODO
04582D 2A 00 57 04 0172*       ld hl,(player_score)
045831 CD 16 02 04 0173*       call printDec
045835 C9          0174*       ret
045836             0175*   
045836             0176*   ; ###################################################################
045836             0177*   ; TODO: the below is all stuff from the original code we need to port
045836             0178*   ; ###################################################################
045836             0179*   
045836             0180*   kill_player:
045836             0181*   ; ; set player status to dead
045836             0182*   ;     xor a; sets all player flags to zero
045836             0183*   ;     ld (player_collisions),a
045836             0184*   ; ; deduct a ship from the inventory
045836             0185*   ;     ld a,(player_ships)
045836             0186*   ;     dec a
045836             0187*   ;     ld (player_ships),a
045836             0188*   ; ; are we out of ships?
045836             0189*   ;     jp z,game_over
045836             0190*   ; ; wait a few ticks
045836             0191*   ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
045836             0192*   ;     ld (player_move_timer),a
045836             0193*   ; kill_player_loop:
045836             0194*   ;     call vdu_vblank
045836             0195*   ;     ld a,(player_move_timer)
045836             0196*   ;     dec a
045836             0197*   ;     ld (player_move_timer),a
045836             0198*   ;     jr nz,kill_player_loop
045836             0199*   ;     call player_init ; player respawn if timer zero
045836 C9          0200*       ret ; and out
045837             0201*   
045837             0202*   ; draws the player's shields level
045837             0203*   ; draw_shields:
045837             0204*   ; TODO: Agonize this routine
045837             0205*   ; ; prep the loop to draw the bars
045837             0206*   ;     ld a,(player_shields) ; snag shields
045837             0207*   ;     and a
045837             0208*   ;     ret z ; don't draw if zero shields
045837             0209*   ; ; set loop counter and drawing position
045837             0210*   ;     ld b,a ; loop counter
045837             0211*   ;     ld hl,#5300+48+12
045837             0212*   ; ; set color based on bars remaining
045837             0213*   ;     ld c,103 ; bright green 28fe0a
045837             0214*   ;     cp 9
045837             0215*   ;     jp p,draw_shields_loop
045837             0216*   ;     ld c,74 ; bright yellow eafe5b
045837             0217*   ;     cp 3
045837             0218*   ;     jp p,draw_shields_loop
045837             0219*   ;     ld c,28 ; bright red fe0a0a
045837             0220*   ; draw_shields_loop:
045837             0221*   ;     push bc ; yup,outta
045837             0222*   ;     push hl ; registers again
045837             0223*   ;     ; ld a,#A8 ; ▀,168
045837             0224*   ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
045837             0225*   ;     ; call draw_char
045837             0226*   ;     call draw_num ; we nuked draw_char for the time being
045837             0227*   ;     pop hl
045837             0228*   ;     ld a,8
045837             0229*   ;     add a,l
045837             0230*   ;     ld l,a
045837             0231*   ;     pop bc
045837             0232*   ;     djnz draw_shields_loop
045837             0233*       ; ret
045837             0234*   
045837             0235*   
045837             0236*   ; draw_lives:
045837             0237*   ;     ld hl,player_small ; make small yellow ship the active sprite
045837             0238*   ;     ld (sprite_base_bufferId),hl
045837             0239*   ;     ; ld a,#80 ; northern orientation
045837             0240*   ;     ; ld (sprite_orientation),a
045837             0241*   ;     ld hl,0 ; north
045837             0242*   ;     ld (sprite_heading),hl
045837             0243*   ;     xor a
045837             0244*   ;     ld (sprite_animation),a
045837             0245*   ;     ld a,#56 ; top of visible screen
045837             0246*   ;     ld (sprite_y+1),a
045837             0247*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
045837             0248*   ;     ld a,(player_ships)
045837             0249*   ;     dec a ; we draw one fewer ships than lives
045837             0250*   ;     ret z ; nothing to draw here, move along
045837             0251*   ;     ld b,a ; loop counter
045837             0252*   ;     ld a,256-16 ; initial x position
045837             0253*   ; draw_lives_loop:
045837             0254*   ;     ld (sprite_x+1),a
045837             0255*   ;     push af
045837             0256*   ;     push bc
045837             0257*   ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
045837             0258*   ;     pop bc
045837             0259*   ;     pop af
045837             0260*   ;     sub 10
045837             0261*   ;     djnz draw_lives_loop
045837             0262*   ;     ret
045837             0057        include "sprites.inc"
045837             0001*   ; ###### SPRITE TABLE FIELD INDICES ######
045837             0002*   table_bytes_per_record:    equ  41; 40 bytes ;40 bytes per sprite record
045837             0003*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
045837             0004*   ; sprite state variables
045837             0005*   sprite_state_variables:    equ   1; beginning of sprite state variables
045837             0006*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
045837             0007*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
045837             0008*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
045837             0009*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
045837             0010*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
045837             0011*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
045837             0012*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
045837             0013*   ; sprite definition variables
045837             0014*   sprite_definitions:        equ  22; beginnning of sprite definition variables
045837             0015*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
045837             0016*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
045837             0017*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
045837             0018*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
045837             0019*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
045837             0020*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
045837             0021*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
045837             0022*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
045837             0023*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
045837             0024*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
045837             0025*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
045837             0026*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
045837             0027*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
045837             0028*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
045837             0029*   sprite_animation_frame:    equ  40; 1 bytes ;current animation frame
045837             0030*   
045837             0031*   ; ###### SPRITE TABLE VARIABLES ######
045837             0032*   ; maximum number of sprites
045837             0033*   table_max_records: equ 16 ; it can handle more but this is pushing it
045837             0034*   table_total_bytes: equ table_max_records*table_bytes_per_record
045837             0035*   
045837             0036*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
045837 FF FF FF FF 0037*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
045900             0038*   table_base:
045900 00 00 00 00 0039*   sprite_start_variables:  blkb table_total_bytes, 0 ; fill with zeroes
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
045B90             0040*   sprite_end_variables: ; in case we want to traverse the table in reverse
045B90             0041*   
045B90             0042*   ; pointer to top address of current record, initialized to table_base
045B90 00 59 04    0043*   table_pointer: dl table_base
045B93             0044*   ; how many active sprites
045B93 00          0045*   table_active_sprites: db 0x00
045B94             0046*   ; flag indicating collision with screen edge
045B94             0047*   ; uses orientation codes to specify which edge(s)
045B94 00          0048*   sprite_screen_edge: db #00
045B95             0049*   
045B95             0050*   ; origin_top: equ 48
045B95             0051*   origin_top: equ 0
045B95             0052*   origin_left: equ 128
045B95             0053*   field_top: equ 0
045B95             0054*   field_bottom: equ 383-origin_top
045B95             0055*   field_left: equ 0
045B95             0056*   field_right: equ 255
045B95             0057*   sprite_top: equ field_top + 0
045B95             0058*   sprite_bottom: equ field_bottom-16
045B95             0059*   sprite_left: equ field_left
045B95             0060*   sprite_right: equ field_right-16
045B95             0061*   
045B95             0062*   ; ######### COLLISION SPRITE PARAMETERS ##########
045B95             0063*   ; integer coordinates are all that are needed for collision calculations
045B95 00          0064*   collision_x: db 0x00
045B96 00          0065*   collision_y: db 0x00
045B97 00          0066*   collision_dim_x: db 0x00
045B98 00          0067*   collision_dim_y: db 0x00
045B99             0068*   
045B99             0069*   ; scratch variables
045B99 00          0070*   x: db 0x00 ; 8-bit signed integer
045B9A 00          0071*   y: db 0x00 ; 8-bit signed integer
045B9B 00 00 00    0072*   x0: dl 0x000000 ; 16.8 signed fixed place
045B9E 00 00 00    0073*   y0: dl 0x000000 ; 16.8 signed fixed place
045BA1 00 00 00    0074*   incx1: dl 0x000000 ; 16.8 signed fixed place
045BA4 00 00 00    0075*   incy1: dl 0x000000 ; 16.8 signed fixed place
045BA7 00 00 00    0076*   incx2: dl 0x000000 ; 16.8 signed fixed place
045BAA 00 00 00    0077*   incy2: dl 0x000000 ; 16.8 signed fixed place
045BAD             0078*   
045BAD             0079*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
045BAD 00 00 00    0080*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
045BB0 00 00 00    0081*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
045BB3 00 00 00    0082*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
045BB6             0083*   
045BB6             0084*   table_init:
045BB6 DD 21 00 59 0085*       ld ix,table_base
       04          
045BBB AF          0086*       xor a ; sprite id
045BBC 0E 00       0087*       ld c,0 ; sprite type
045BBE 06 10       0088*       ld b,table_max_records ; loop counter
045BC0             0089*   @loop:
045BC0 DD 77 00    0090*       ld (ix+sprite_id),a
045BC3 DD 71 16    0091*       ld (ix+sprite_type),c
045BC6 ED 32 29    0092*       lea ix,ix+table_bytes_per_record
045BC9 3C          0093*       inc a
045BCA 10 F4       0094*       djnz @loop
045BCC C9          0095*       ret
045BCD             0096*   
045BCD             0097*   ; gets the next available sprite id
045BCD             0098*   ; inputs; none
045BCD             0099*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
045BCD             0100*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
045BCD             0101*   ; destroys: a,b,c,hl,ix
045BCD             0102*   ; affects: bumps table_active_sprites by one
045BCD             0103*   table_get_next_id:
045BCD DD 21 00 59 0104*       ld ix,table_base
       04          
045BD2 06 10       0105*       ld b,table_max_records
045BD4 0E 00       0106*       ld c,0 ; sprite id counter
045BD6             0107*   @loop:
045BD6 DD 7E 16    0108*       ld a,(ix+sprite_type)
045BD9 A7          0109*       and a
045BDA 28 08       0110*       jr z,@found
045BDC ED 32 29    0111*       lea ix,ix+table_bytes_per_record
045BDF 0C          0112*       inc c
045BE0 10 F4       0113*       djnz @loop
045BE2             0114*   @notfound:
045BE2 AF          0115*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
045BE3 C9          0116*       ret
045BE4             0117*   @found:
045BE4             0118*   ; bump number of active sprites
045BE4 21 93 5B 04 0119*       ld hl,table_active_sprites
045BE8 34          0120*       inc (hl)
045BE9             0121*   ; return sprite id
045BE9 79          0122*       ld a,c
045BEA 37          0123*       scf ; sets carry flag indicating we found a free sprite
045BEB C9          0124*       ret ; done
045BEC             0125*   ; end table_get_next_id
045BEC             0126*   
045BEC             0127*   ; deactivate the sprite with the given id
045BEC             0128*   ; inputs: iy set to sprite record
045BEC             0129*   ; outputs: nothing
045BEC             0130*   ; destroys: a,hl
045BEC             0131*   ; affects: decrements table_active_sprites by one
045BEC             0132*   table_deactivate_sprite:
045BEC FD 7E 00    0133*       ld a,(iy+sprite_id) ; get spriteId
045BEF CD 00 1E 04 0134*       call vdu_sprite_select ; select sprite
045BF3 CD 84 1E 04 0135*       call vdu_sprite_hide
045BF7 AF          0136*       xor a
045BF8 FD 77 16    0137*       ld (iy+sprite_type),a
045BFB 21 93 5B 04 0138*       ld hl,table_active_sprites
045BFF 35          0139*       dec (hl)
045C00 C9          0140*       ret
045C01             0141*   ; end table_deactivate_sprite
045C01             0142*   
045C01             0143*   sprites_init:
045C01             0144*   ; initialize sprites
045C01 CD 34 1F 04 0145*   	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
045C05 AF          0146*   	xor a
045C06             0147*   @sprite_loop:
045C06 F5          0148*   	push af
045C07 CD 00 1E 04 0149*   	call vdu_sprite_select
045C0B 21 00 01 00 0150*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
045C0F CD 55 1F 04 0151*   	call vdu_sprite_add_buff
045C13 F1          0152*   	pop af
045C14 3C          0153*   	inc a
045C15 FE 12       0154*   	cp table_max_records+2 ; tack on sprites for player and laser
045C17 20 ED       0155*   	jr nz,@sprite_loop
045C19 3C          0156*   	inc a
045C1A CD 34 1E 04 0157*   	call vdu_sprite_activate
045C1E             0158*   
045C1E             0159*   ; define player sprite
045C1E 3A 0A 57 04 0160*   	ld a,(player_id)
045C22 CD 00 1E 04 0161*   	call vdu_sprite_select
045C26 CD 13 1E 04 0162*   	call vdu_sprite_clear_frames
045C2A 21 2B 01 00 0163*   	ld hl,BUF_SHIP_0L
045C2E 01 03 00 00 0164*   	ld bc,3 ; three bitmaps for player ship
045C32             0165*   @sprite_player_loop:
045C32 C5          0166*   	push bc
045C33 E5          0167*   	push hl
045C34 CD 55 1F 04 0168*   	call vdu_sprite_add_buff
045C38 E1          0169*   	pop hl
045C39 23          0170*   	inc hl
045C3A C1          0171*   	pop bc
045C3B 10 F5       0172*   	djnz @sprite_player_loop
045C3D             0173*   
045C3D             0174*   ; define laser sprite
045C3D 3A 00 53 04 0175*   	ld a,(laser_id)
045C41 CD 00 1E 04 0176*   	call vdu_sprite_select
045C45 CD 13 1E 04 0177*   	call vdu_sprite_clear_frames
045C49 21 08 01 00 0178*   	ld hl,BUF_LASER_A
045C4D 06 02       0179*   	ld b,2 ; two bitmaps for laser
045C4F             0180*   @sprite_laser_loop:
045C4F C5          0181*   	push bc
045C50 E5          0182*   	push hl
045C51 CD 55 1F 04 0183*   	call vdu_sprite_add_buff
045C55 E1          0184*   	pop hl
045C56 23          0185*   	inc hl
045C57 C1          0186*   	pop bc
045C58 10 F5       0187*   	djnz @sprite_laser_loop
045C5A             0188*   ; all done
045C5A C9          0189*       ret
045C5B             0190*   ; end sprites_init
045C5B             0191*   
045C5B             0192*   ; compute a sprite's new position based on its component x,y velocities
045C5B             0193*   ; with screen boundary checking and update its sprite table record accordingly
045C5B             0194*   ; inputs: table_pointer set to sprite record
045C5B             0195*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
045C5B             0196*   ; destroys: everything
045C5B             0197*   ; note: actual rendering of sprite must be handled by caller
045C5B             0198*   move_sprite:
045C5B FD 2A 90 5B 0199*       ld iy,(table_pointer)
       04          
045C60             0200*   ; x-axis movement
045C60 FD 27 01    0201*       ld hl,(iy+sprite_x)
045C63 FD 17 07    0202*       ld de,(iy+sprite_xvel)
045C66 19          0203*       add hl,de
045C67 FD 2F 01    0204*       ld (iy+sprite_x),hl
045C6A             0205*   ; y-axis movement
045C6A FD 27 04    0206*       ld hl,(iy+sprite_y)
045C6D FD 17 0A    0207*       ld de,(iy+sprite_yvel)
045C70 19          0208*       add hl,de
045C71 FD 2F 04    0209*       ld (iy+sprite_y),hl
045C74             0210*   ; detect screen edge collisions
045C74 AF          0211*       xor a ; reset screen edge collision flag and clear carry
045C75 32 94 5B 04 0212*       ld (sprite_screen_edge),a
045C79             0213*   ; y-axis first since we already have it in hl
045C79 11 00 00 00 0214*       ld de,-sprite_top*256
045C7D ED 5A       0215*       adc hl,de
045C7F FA A9 5C 04 0216*       jp m,@top
045C83 ED 52       0217*       sbc hl,de ; hl back to original value
045C85 11 00 91 FE 0218*       ld de,-sprite_bottom*256
045C89 ED 5A       0219*       adc hl,de
045C8B F2 B3 5C 04 0220*       jp p,@bottom
045C8F             0221*   @xaxis:
045C8F FD 27 01    0222*       ld hl,(iy+sprite_x)
045C92 11 00 00 00 0223*       ld de,-sprite_left*256
045C96 ED 5A       0224*       adc hl,de
045C98 FA CE 5C 04 0225*       jp m,@left
045C9C ED 52       0226*       sbc hl,de ; hl back to original value
045C9E 11 00 11 FF 0227*       ld de,-sprite_right*256
045CA2 ED 5A       0228*       adc hl,de
045CA4 F2 DC 5C 04 0229*       jp p,@right
045CA8             0230*   ; no edge collisions so go home
045CA8 C9          0231*       ret
045CA9             0232*   @top:
045CA9 3E 08       0233*       ld a,collide_top
045CAB 21 00 00 00 0234*       ld hl,sprite_top*256
045CAF C3 B9 5C 04 0235*       jp @collide_y
045CB3             0236*   @bottom:
045CB3 3E 04       0237*       ld a,collide_bottom
045CB5 21 00 6F 01 0238*       ld hl,sprite_bottom*256
045CB9             0239*   @collide_y:
045CB9 32 94 5B 04 0240*       ld (sprite_screen_edge),a
045CBD FD 2F 04    0241*       ld (iy+sprite_y),hl
045CC0             0242*   ; reverse y-axis velocity
045CC0 FD 27 0A    0243*       ld hl,(iy+sprite_yvel)
045CC3 CD 16 08 04 0244*       call neg_hlu
045CC7 FD 2F 0A    0245*       ld (iy+sprite_yvel),hl
045CCA             0246*   ; go check for x-axis collisions
045CCA C3 8F 5C 04 0247*       jp @xaxis
045CCE             0248*   @left:
045CCE 3A 94 5B 04 0249*       ld a,(sprite_screen_edge)
045CD2 F6 02       0250*       or a,collide_left
045CD4 21 00 00 00 0251*       ld hl,sprite_left*256
045CD8 C3 E6 5C 04 0252*       jp @collide_x
045CDC             0253*   @right:
045CDC 3A 94 5B 04 0254*       ld a,(sprite_screen_edge)
045CE0 F6 01       0255*       or a,collide_right
045CE2 21 00 EF 00 0256*       ld hl,sprite_right*256
045CE6             0257*   @collide_x:
045CE6 32 94 5B 04 0258*       ld (sprite_screen_edge),a
045CEA FD 2F 01    0259*       ld (iy+sprite_x),hl
045CED             0260*   ; reverse x-axis velocity
045CED FD 27 07    0261*       ld hl,(iy+sprite_xvel)
045CF0 CD 16 08 04 0262*       call neg_hlu
045CF4 FD 2F 07    0263*       ld (iy+sprite_xvel),hl
045CF7             0264*   ; final collision flag to a and return
045CF7 3A 94 5B 04 0265*       ld a,(sprite_screen_edge)
045CFB C9          0266*       ret
045CFC             0267*   ; end move_sprite
045CFC             0268*   
045CFC             0269*   sprite_compute_velocities:
045CFC FD 2A 90 5B 0270*       ld iy,(table_pointer)
       04          
045D01 FD 17 0D    0271*       ld de,(iy+sprite_vel)
045D04 CD CD 0A 04 0272*       call polar_to_cartesian
045D08 FD 2A 90 5B 0273*       ld iy,(table_pointer)
       04          
045D0D FD 0F 07    0274*       ld (iy+sprite_xvel),bc ; save x-velocity component
045D10 FD 1F 0A    0275*       ld (iy+sprite_yvel),de ; save y-velocity component
045D13 C9          0276*       ret
045D14             0277*   ; end sprite_compute_velocities
045D14             0278*   
045D14             0279*   ; create a new sprite at the same location as an existing sprite
045D14             0280*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
045D14             0281*   spawn_sprite:
045D14 E5          0282*       push hl ; back up pointer to new sprite defaults
045D15 CD CD 5B 04 0283*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
045D19 E1          0284*       pop hl ; restore pointer to new sprite defaults
045D1A D0          0285*       ret nc ; no carry means no free sprite slots, so we go home
045D1B             0286*   ; copy default settings to new sprite
045D1B DD E5       0287*       push ix ; back up pointer to new sprite record
045D1D ED 32 16    0288*       lea ix,ix+sprite_definitions ; bump pointer to copy to
045D20 DD E5       0289*       push ix ; pointer to default sprite settings
045D22 D1          0290*       pop de ; address to copy to
045D23 01 13 00 00 0291*       ld bc,table_bytes_per_record-sprite_definitions ; number of bytes to copy
045D27 ED B0       0292*       ldir ; copies defaults to new sprite record
045D29             0293*   ; return to caller
045D29 DD E1       0294*       pop ix ; restore pointer to new sprite record
045D2B DD CB 16 FE 0295*       set 7,(ix+sprite_type) ; set just spawned flag
045D2F 37          0296*       scf ; set carry flag to indicate success
045D30 C9          0297*       ret
045D31             0298*   
045D31             0299*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
045D31             0300*   spawn_sprite_from_sprite:
045D31 CD 14 5D 04 0301*       call spawn_sprite
045D35 D0          0302*       ret nc ; no carry means no free sprite slots, so we go home
045D36             0303*   ; copy sprite position, velocity and orientation from existing sprite
045D36 FD 2A 90 5B 0304*       ld iy,(table_pointer) ; get existing sprite record
       04          
045D3B FD 27 01    0305*       ld hl,(iy+sprite_x)
045D3E DD 2F 01    0306*       ld (ix+sprite_x),hl
045D41 FD 27 04    0307*       ld hl,(iy+sprite_y)
045D44 DD 2F 04    0308*       ld (ix+sprite_y),hl
045D47             0309*   ; return to caller
045D47 DD CB 16 FE 0310*       set 7,(ix+sprite_type) ; set just spawned flag
045D4B 37          0311*       scf ; set carry flag to indicate success
045D4C C9          0312*       ret
045D4D             0313*   
045D4D             0314*   ; load a sprite with animation bitmaps
045D4D             0315*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
045D4D             0316*   sprite_load_frames:
045D4D             0317*   ; back up input parameters
045D4D E5          0318*       push hl ; base bufferId
045D4E C5          0319*       push bc ; bc = number of frames
045D4F CD 13 1E 04 0320*       call vdu_sprite_clear_frames
045D53 C1          0321*       pop bc ; bc = number of frames
045D54 E1          0322*       pop hl ; = base bufferId
045D55             0323*   @load_frames:
045D55 C5          0324*       push bc ; back up loop counter
045D56 E5          0325*       push hl ; back up base bufferId
045D57 CD 55 1F 04 0326*       call vdu_sprite_add_buff
045D5B E1          0327*       pop hl ; restore base bufferId
045D5C 23          0328*       inc hl ; bump it to the next frame
045D5D             0329*   ; decrement loop counter
045D5D C1          0330*       pop bc
045D5E 0B          0331*       dec bc
045D5F 79          0332*       ld a,c
045D60 B7          0333*       or a
045D61 C2 55 5D 04 0334*       jp nz,@load_frames
045D65 78          0335*       ld a,b
045D66 B7          0336*       or a
045D67 C2 55 5D 04 0337*       jp nz,@load_frames
045D6B C9          0338*       ret
045D6C             0339*   ; end sprite_load_frames
045D6C             0340*   
045D6C             0341*   dump_sprite_record:
045D6C             0342*       ; call vdu_home_cursor
045D6C CD 10 01 04 0343*       call printInline
045D70 69 64 3A 20 0344*       asciz "id:   "
       20 20 00    
045D77 DD 7E 00    0345*       ld a,(ix+sprite_id)
045D7A CD 5A 01 04 0346*       call printHexA
045D7E             0347*   
045D7E CD 10 01 04 0348*       call printInline
045D82 0D 0A 78 3A 0349*       asciz "\r\nx:   "
       20 20 20 00 
045D8A DD 27 01    0350*       ld hl,(ix+sprite_x)
045D8D CD 38 03 04 0351*       call print_s168_hl
045D91             0352*   
045D91 CD 10 01 04 0353*       call printInline
045D95 0D 0A 79 3A 0354*       asciz "\r\ny:   "
       20 20 20 00 
045D9D DD 27 04    0355*       ld hl,(ix+sprite_y)
045DA0 CD 38 03 04 0356*       call print_s168_hl
045DA4             0357*   
045DA4 CD 10 01 04 0358*       call printInline
045DA8 0D 0A 78 76 0359*       asciz "\r\nxv:  "
       3A 20 20 00 
045DB0 DD 27 07    0360*       ld hl,(ix+sprite_xvel)
045DB3 CD 38 03 04 0361*       call print_s168_hl
045DB7             0362*   
045DB7 CD 10 01 04 0363*       call printInline
045DBB 0D 0A 79 76 0364*       asciz "\r\nyv:  "
       3A 20 20 00 
045DC3 DD 27 0A    0365*       ld hl,(ix+sprite_yvel)
045DC6 CD 38 03 04 0366*       call print_s168_hl
045DCA             0367*   
045DCA CD 10 01 04 0368*       call printInline
045DCE 0D 0A 76 3A 0369*       asciz "\r\nv:   "
       20 20 20 00 
045DD6 DD 27 0D    0370*       ld hl,(ix+sprite_vel)
045DD9 CD 38 03 04 0371*       call print_s168_hl
045DDD             0372*   
045DDD CD 10 01 04 0373*       call printInline
045DE1 0D 0A 68 64 0374*       asciz "\r\nhdg  "
       67 20 20 00 
045DE9 DD 27 10    0375*       ld hl,(ix+sprite_heading)
045DEC CD 38 03 04 0376*       call print_s168_hl
045DF0             0377*   
045DF0 CD 10 01 04 0378*       call printInline
045DF4 0D 0A 6F 72 0379*       asciz "\r\nori: "
       69 3A 20 00 
045DFC DD 27 13    0380*       ld hl,(ix+sprite_orientation)
045DFF CD 38 03 04 0381*       call print_s168_hl
045E03             0382*   
045E03 CD 10 01 04 0383*       call printInline
045E07 0D 0A 74 79 0384*       asciz "\r\ntyp: "
       70 3A 20 00 
045E0F DD 7E 16    0385*       ld a,(ix+sprite_type)
045E12 CD 5A 01 04 0386*       call printHexA
045E16             0387*   
045E16 CD 10 01 04 0388*       call printInline
045E1A 0D 0A 42 49 0389*       asciz "\r\nBId: "
       64 3A 20 00 
045E22 DD 27 17    0390*       ld hl,(ix+sprite_base_bufferId)
045E25 CD 37 01 04 0391*       call printHex24
045E29             0392*   
045E29 CD 10 01 04 0393*       call printInline
045E2D 0D 0A 6D 50 0394*       asciz "\r\nmPg: "
       67 3A 20 00 
045E35 DD 27 1A    0395*       ld hl,(ix+sprite_move_program)
045E38 CD 37 01 04 0396*       call printHex24
045E3C             0397*   
045E3C CD 10 01 04 0398*       call printInline
045E40 0D 0A 63 6F 0399*       asciz "\r\ncol: "
       6C 3A 20 00 
045E48 DD 7E 1D    0400*       ld a,(ix+sprite_collisions)
045E4B CD B5 03 04 0401*       call printBin8
045E4F             0402*   
045E4F CD 10 01 04 0403*       call printInline
045E53 0D 0A 73 7A 0404*       asciz "\r\nszx: "
       78 3A 20 00 
045E5B DD 7E 1E    0405*       ld a,(ix+sprite_dim_x)
045E5E CD 5A 01 04 0406*       call printHexA
045E62             0407*   
045E62 CD 10 01 04 0408*       call printInline
045E66 0D 0A 73 7A 0409*       asciz "\r\nszy: "
       79 3A 20 00 
045E6E DD 7E 1F    0410*       ld a,(ix+sprite_dim_y)
045E71 CD 5A 01 04 0411*       call printHexA
045E75             0412*   
045E75 CD 10 01 04 0413*       call printInline
045E79 0D 0A 23 6F 0414*       asciz "\r\n#ori:"
       72 69 3A 00 
045E81 DD 7E 20    0415*       ld a,(ix+sprite_num_orientations)
045E84 CD 5A 01 04 0416*       call printHexA
045E88             0417*   
045E88 CD 10 01 04 0418*       call printInline
045E8C 0D 0A 23 61 0419*       asciz "\r\n#ani:"
       6E 69 3A 00 
045E94 DD 7E 21    0420*       ld a,(ix+sprite_num_animations)
045E97 CD 5A 01 04 0421*       call printHexA
045E9B             0422*   
045E9B CD 10 01 04 0423*       call printInline
045E9F 0D 0A 61 6E 0424*       asciz "\r\nani: "
       69 3A 20 00 
045EA7 DD 7E 22    0425*       ld a,(ix+sprite_animation)
045EAA CD 5A 01 04 0426*       call printHexA
045EAE             0427*   
045EAE CD 10 01 04 0428*       call printInline
045EB2 0D 0A 61 6E 0429*       asciz "\r\nanit:"
       69 74 3A 00 
045EBA DD 7E 23    0430*       ld a,(ix+sprite_animation_timer)
045EBD CD 5A 01 04 0431*       call printHexA
045EC1             0432*   
045EC1 CD 10 01 04 0433*       call printInline
045EC5 0D 0A 6D 76 0434*       asciz "\r\nmvt: "
       74 3A 20 00 
045ECD DD 7E 24    0435*       ld a,(ix+sprite_move_timer)
045ED0 CD 5A 01 04 0436*       call printHexA
045ED4             0437*   
045ED4 CD 10 01 04 0438*       call printInline
045ED8 0D 0A 6D 76 0439*       asciz "\r\nmvs: "
       73 3A 20 00 
045EE0 DD 7E 25    0440*       ld a,(ix+sprite_move_step)
045EE3 CD 5A 01 04 0441*       call printHexA
045EE7             0442*   
045EE7 CD 10 01 04 0443*       call printInline
045EEB 0D 0A 70 74 0444*       asciz "\r\npts: "
       73 3A 20 00 
045EF3 DD 7E 26    0445*       ld a,(ix+sprite_points)
045EF6 CD 5A 01 04 0446*       call printHexA
045EFA             0447*   
045EFA CD 10 01 04 0448*       call printInline
045EFE 0D 0A 64 6D 0449*       asciz "\r\ndmg: "
       67 3A 20 00 
045F06 DD 7E 27    0450*       ld a,(ix+sprite_shield_damage)
045F09 CD 5A 01 04 0451*       call printHexA
045F0D             0452*   
045F0D             0453*       ; call waitKeypress
045F0D C9          0454*       ret
045F0E             0058        include "state.inc"
045F0E FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
046000             0002*   
046000             0003*   ; Game state variables
046000 0E 60 04    0004*   game_state:  dl game_main_menu
046003             0005*   
046003             0006*   do_game:
046003 2A 00 60 04 0007*       ld hl,(game_state)   ; Load the current game state
046007             0008*       callHL                ; Call the corresponding state handler
046007 01 0D 60 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
04600B C5          0002*M1     push bc ; which constitutes the return address
04600C E9          0003*M1     jp (hl) ; Jump to the address in HL
04600D             0004*M1 @@:
04600D C9          0009*       ret
04600E             0010*   
04600E             0011*   ; ========================
04600E             0012*   ; Main Game States
04600E             0013*   ; ========================
04600E             0014*   
04600E             0015*   game_main_menu:
04600E             0016*       ; Handle main menu options
04600E             0017*       ; Example: Check input for "Start Game"
04600E CD F6 60 04 0018*       call check_input_menu
046012 C2 17 60 04 0019*       jp nz, game_initialize ; Start game on selection
046016 C9          0020*       ret
046017             0021*   
046017             0022*   game_initialize:
046017             0023*   ; reset the sprite table
046017 CD B6 5B 04 0024*       call table_init
04601B AF          0025*       xor a
04601C 32 93 5B 04 0026*       ld (table_active_sprites),a
046020 21 00 59 04 0027*       ld hl,table_base
046024 22 90 5B 04 0028*       ld (table_pointer),hl
046028             0029*   ; initialize sprites
046028 CD 01 5C 04 0030*       call sprites_init
04602C             0031*   ; initialize the first level
04602C 3E 00       0032*       ld a,tiles_dg
04602E CD 1A 54 04 0033*       call init_tileset
046032             0034*   ; initialize player
046032 21 00 00 00 0035*       ld hl,0
046036 22 00 57 04 0036*       ld (player_score),hl
04603A 2A 06 57 04 0037*       ld hl,(player_max_shields)
04603E 22 03 57 04 0038*       ld (player_shields),hl
046042 3E 03       0039*       ld a,3
046044 32 09 57 04 0040*       ld (player_ships),a
046048 CD 32 57 04 0041*       call player_init
04604C             0042*   ; ; TODO: TEMPORARY UNTIL MAP LOGIC IMPLEMENTED
04604C             0043*   ;     ld hl,enemies_dead
04604C             0044*   ;     ld (enemies_state),hl
04604C             0045*   ; ; END TODO
04604C             0046*   ; set the game state to playing
04604C 21 56 60 04 0047*       ld hl,game_playing
046050 22 00 60 04 0048*       ld (game_state), hl
046054 C9          0049*       ret
046055             0050*   ; done initializing
046055 C9          0051*       ret
046056             0052*   
046056             0053*   game_playing:
046056             0054*   ; Main gameplay loop
046056 CD 10 63 04 0055*       call tiles_plot
04605A CD C7 60 04 0056*       call do_player
04605E CD E0 60 04 0057*       call do_enemies
046062             0058*   ; update UI: TODO make this a standalone function
046062 CD 1A 58 04 0059*       call print_score
046066 C9          0060*       ret
046067             0061*   
046067             0062*   game_paused:
046067             0063*       ; Pause menu logic
046067 CD F9 60 04 0064*       call check_input_pause
04606B C2 56 60 04 0065*       jp nz, game_playing ; Resume game
04606F CA 0E 60 04 0066*       jp z, game_main_menu ; Exit to main menu
046073 C9          0067*       ret
046074             0068*   
046074             0069*   game_level_transition:
046074             0070*       ; Handle level transitions
046074 CD FA 60 04 0071*       call load_next_level
046078 21 56 60 04 0072*       ld hl, game_playing
04607C 22 00 60 04 0073*       ld (game_state), hl
046080 C9          0074*       ret
046081             0075*   
046081             0076*   game_over:
046081             0077*       ; Display game over screen
046081 CD FB 60 04 0078*       call display_game_over
046085 C2 0E 60 04 0079*       jp nz, game_main_menu ; Return to main menu on input
046089 C9          0080*       ret
04608A             0081*   
04608A             0082*   game_victory:
04608A             0083*       ; Display victory screen
04608A CD FC 60 04 0084*       call display_victory
04608E C2 0E 60 04 0085*       jp nz, game_main_menu ; Return to main menu on input
046092 C9          0086*       ret
046093             0087*   
046093             0088*   ; ========================
046093             0089*   ; Supporting States
046093             0090*   ; ========================
046093             0091*   
046093             0092*   game_loading:
046093             0093*       ; Show loading screen while preparing assets
046093 CD FD 60 04 0094*       call load_resources
046097 21 17 60 04 0095*       ld hl, game_initialize
04609B 22 00 60 04 0096*       ld (game_state), hl
04609F C9          0097*       ret
0460A0             0098*   
0460A0             0099*   game_cutscene:
0460A0             0100*       ; Play a non-interactive cutscene
0460A0 CD FE 60 04 0101*       call play_cutscene
0460A4 C2 56 60 04 0102*       jp nz, game_playing ; Return to gameplay after cutscene
0460A8 C9          0103*       ret
0460A9             0104*   
0460A9             0105*   game_inventory:
0460A9             0106*       ; Open inventory or shop
0460A9 CD FF 60 04 0107*       call display_inventory
0460AD C2 56 60 04 0108*       jp nz, game_playing ; Return to gameplay after inventory close
0460B1 C9          0109*       ret
0460B2             0110*   
0460B2             0111*   game_map:
0460B2             0112*       ; Display map or quest
0460B2 CD 00 61 04 0113*       call display_map
0460B6 C2 56 60 04 0114*       jp nz, game_playing ; Return to gameplay after map close
0460BA C9          0115*       ret
0460BB             0116*   
0460BB             0117*   game_exit:
0460BB             0118*       ; Handle exit logic
0460BB CD 01 61 04 0119*       call save_game
0460BF C3 02 61 04 0120*       jp exit_game         ; Safely shut down
0460C3 C9          0121*       ret
0460C4             0122*   
0460C4             0123*   ; ========================
0460C4             0124*   ; Sub-state branching (Example for player state)
0460C4             0125*   ; ========================
0460C4             0126*   
0460C4 D2 60 04    0127*   player_state:  dl player_alive ; Player state variable
0460C7             0128*   
0460C7             0129*   do_player:
0460C7 2A C4 60 04 0130*       ld hl,(player_state)
0460CB             0131*       callHL                ; Call the corresponding player state
0460CB 01 D1 60 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
0460CF C5          0002*M1     push bc ; which constitutes the return address
0460D0 E9          0003*M1     jp (hl) ; Jump to the address in HL
0460D1             0004*M1 @@:
0460D1 C9          0132*       ret
0460D2             0133*   
0460D2             0134*   player_alive:
0460D2 CD 7F 57 04 0135*       call player_input     ; Handle player input
0460D6 CD 28 53 04 0136*       call laser_control    ; Handle laser movement and collision detection
0460DA C9          0137*       ret
0460DB             0138*   
0460DB             0139*   player_dead:
0460DB CD 28 53 04 0140*       call laser_control    ; Handle laser movement and collision detection
0460DF C9          0141*       ret
0460E0             0142*   
0460E0             0143*   do_enemies:
0460E0 2A EB 60 04 0144*       ld hl,(enemies_state)
0460E4             0145*       callHL
0460E4 01 EA 60 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
0460E8 C5          0002*M1     push bc ; which constitutes the return address
0460E9 E9          0003*M1     jp (hl) ; Jump to the address in HL
0460EA             0004*M1 @@:
0460EA C9          0146*       ret
0460EB F1 60 04    0147*   enemies_state: dl enemies_alive
0460EE             0148*   
0460EE             0149*   enemies_dead:
0460EE C9          0150*       ret
0460EF             0151*   
0460EF             0152*   enemies_respawning:
0460EF C9          0153*       ret
0460F0             0154*   
0460F0             0155*   enemies_respawn:
0460F0 C9          0156*       ret
0460F1             0157*   
0460F1             0158*   enemies_alive:
0460F1 CD 33 20 04 0159*       call move_enemies
0460F5 C9          0160*       ret
0460F6             0161*   
0460F6             0162*   check_input_menu:
0460F6 C9          0163*       ret
0460F7             0164*   
0460F7             0165*   update_game_world:
0460F7 C9          0166*       ret
0460F8             0167*   
0460F8             0168*   check_game_events:
0460F8 C9          0169*       ret
0460F9             0170*   
0460F9             0171*   check_input_pause:
0460F9 C9          0172*       ret
0460FA             0173*   
0460FA             0174*   load_next_level:
0460FA C9          0175*       ret
0460FB             0176*   
0460FB             0177*   display_game_over:
0460FB C9          0178*       ret
0460FC             0179*   
0460FC             0180*   display_victory:
0460FC C9          0181*       ret
0460FD             0182*   
0460FD             0183*   load_resources:
0460FD C9          0184*       ret
0460FE             0185*   
0460FE             0186*   play_cutscene:
0460FE C9          0187*       ret
0460FF             0188*   
0460FF             0189*   display_inventory:
0460FF C9          0190*       ret
046100             0191*   
046100             0192*   display_map:
046100 C9          0193*       ret
046101             0194*   
046101             0195*   save_game:
046101 C9          0196*       ret
046102             0197*   
046102             0198*   exit_game:
046102 C9          0199*       ret
046103             0200*   
046103             0059        include "targeting.inc"
046103 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
046200             0002*   
046200             0003*   ; compute orientation to player
046200             0004*   ; based on relative positions
046200             0005*   ; returns: h.l 16.8 fixed angle256 to player
046200             0006*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
046200             0007*   ;    representing delta-x/y *to* target respectively
046200             0008*   orientation_to_player:
046200 FD 2A 90 5B 0009*       ld iy,(table_pointer)
       04          
046205 FD 07 01    0010*       ld bc,(iy+sprite_x)
046208 FD 17 04    0011*       ld de,(iy+sprite_y)
04620B DD 2A 0B 57 0012*       ld ix,(player_x)
       04          
046210 FD 2A 0E 57 0013*       ld iy,(player_y)
       04          
046215 CD 11 0B 04 0014*       call dxy168
046219 C5          0015*       push bc
04621A D5          0016*       push de
04621B CD 6D 0B 04 0017*       call atan2_168fast
04621F D1          0018*       pop de
046220 C1          0019*       pop bc
046221 FD 2A 90 5B 0020*       ld iy,(table_pointer)
       04          
046226 C9          0021*       ret
046227             0022*   ; end orientation_to_player
046227             0023*   
046227             0024*   ; targeting_computer variables fixed 16.8 format
046227 00 00 00    0025*   Bearing_t: dl 0x000000 ; angle to target
04622A 00 00 00    0026*   Heading_t: dl 0x000000 ; angle of target motion
04622D 00 00 00    0027*   Vp: dl 0x000000 ; velocity of projectile
046230 00 00 00    0028*   Vp_x: dl 0x000000 ; x component of projectile velocity
046233 00 00 00    0029*   Vp_y: dl 0x000000 ; y component of projectile velocity
046236 00 00 00    0030*   Vt: dl 0x000000 ; velocity of target
046239 00 00 00    0031*   Vt_x: dl 0x000000 ; x component of target velocity
04623C 00 00 00    0032*   Vt_y: dl 0x000000 ; y component of target velocity
04623F             0033*   
04623F             0034*   ; Inputs:   Bearing_t, Vp
04623F             0035*   ; Note:     a call to orientation_to_player provides Bearing_t
04623F             0036*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
04623F             0037*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
04623F             0038*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
04623F             0039*   targeting_computer:
04623F             0040*   ; compute target velocity from x,y component velocities
04623F ED 4B 11 57 0041*       ld bc,(player_xvel)
       04          
046244 2A 14 57 04 0042*       ld hl,(player_yvel)
046248 11 00 FF FF 0043*       ld de,-1*256 ; account for vertical ground movement
04624C 19          0044*       add hl,de
04624D EB          0045*       ex de,hl ; ud.e = player_yvel-1
04624E CD 02 0B 04 0046*       call cartesian_to_polar ; uh.l = Heading_t, ud.e = Vt
046252 22 2A 62 04 0047*       ld (Heading_t),hl
046256 ED 53 36 62 0048*       ld (Vt),de
       04          
04625B             0049*   
04625B             0050*   ; Bearing_t is already set by orientation_to_player
04625B             0051*   ; compute Heading_t-Bearing_t
04625B ED 5B 27 62 0052*       ld de,(Bearing_t)
       04          
046260 A7          0053*       and a ; clear carry
046261 ED 52       0054*       sbc hl,de ; Uh.l = Heading_t-Bearing_t
046263             0055*   
046263             0056*   ; compute sin(Heading_t-Bearing_t)
046263 CD B2 0A 04 0057*       call sin168 ; uh.l = sin(Heading_t-Bearing_t)
046267             0058*   
046267             0059*   ; compute (Vt*sin(Heading_t-Bearing_t))
046267 ED 5B 36 62 0060*       ld de,(Vt)
       04          
04626C CD CA 09 04 0061*       call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
046270             0062*   
046270             0063*   ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
046270 ED 5B 2D 62 0064*       ld de,(Vp)
       04          
046275 CD 2E 0A 04 0065*       call sdiv168 ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
046279             0066*   ; answer is in radians, convert to degrees256
046279 11 BE 28 00 0067*       ld de,0x0028BE ; 40.74 = 57.29578*256/360
04627D CD CA 09 04 0068*       call smul168 ; uh.l = angle in degrees256
046281             0069*   
046281             0070*   ; add lead angle to target bearing
046281 ED 5B 27 62 0071*       ld de,(Bearing_t)
       04          
046286 19          0072*       add hl,de ; h.l = lead angle+target bearing
046287 E5          0073*       push hl
046288             0074*   
046288             0075*   ; compute component projectile velocities
046288 ED 5B 2D 62 0076*       ld de,(Vp)
       04          
04628D CD CD 0A 04 0077*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
046291 ED 43 30 62 0078*       ld (Vp_x),bc
       04          
046296 ED 53 33 62 0079*       ld (Vp_y),de
       04          
04629B E1          0080*       pop hl ; uh.l = lead angle+target bearing
04629C C9          0081*       ret
04629D             0060        include "tiles.inc"
04629D FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
046300             0002*   
046300             0003*   ; ######### TILES #########
046300             0004*   ; TODO: implement buffering of tiles here when there isn't other stuff to do
046300             0005*   ; tiles_defs: ds 256*16 ; 256 rows of 16 tiles, each tile is a byte
046300 00 00 00    0006*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
046303 00 00 00    0007*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
046306             0008*       ; initialize to zero for a maximum of 256 rows in a level
046306 00          0009*   tiles_cols: db 0 ; number of tile columns in the current level
046307             0010*   
046307 00 00 00    0011*   cur_baseBufferId: dl 0
04630A 00 00 00    0012*   tiles_x_plot: dl 0
04630D F1 FF FF    0013*   tiles_y_plot: dl -15
046310             0014*   
046310             0015*   tiles_plot:
046310             0016*   ; set gfx viewport to playing field window
046310 01 00 00 00 0017*       ld bc,field_left
046314 11 00 00 00 0018*       ld de,field_top
046318 DD 21 FF 00 0019*       ld ix,field_right
       00          
04631D FD 21 7F 01 0020*       ld iy,field_bottom
       00          
046322 CD EB 18 04 0021*       call vdu_set_gfx_viewport
046326             0022*   ; move the background down one pixel
046326 3E 02       0023*       ld a,2 ; current gfx viewport
046328 2E 02       0024*       ld l,2 ; direction=down
04632A 26 01       0025*       ld h,1 ; speed=1 px
04632C CD 63 18 04 0026*       call vdu_scroll_down
046330             0027*   ; set gfx viewport to one scanline to optimise plotting tiles
046330 01 00 00 00 0028*       ld bc,0 ; leftmost x-coord
046334 11 00 00 00 0029*       ld de,0 ; topmost y-coord
046338 DD 21 FF 00 0030*       ld ix,255 ; rightmost x-coord
       00          
04633D FD 21 00 00 0031*       ld iy,0 ; bottommost y-coord
       00          
046342 CD EB 18 04 0032*       call vdu_set_gfx_viewport
046346             0033*   ; plot the background
046346 CD 4E 64 04 0034*       call bg_plot
04634A             0035*   ; initialize tiles loop
04634A 21 00 00 00 0036*       ld hl,0 ; init plotting x-coordinate
04634E 22 0A 63 04 0037*       ld (tiles_x_plot),hl
046352 2A 00 63 04 0038*       ld hl,(tiles_row_defs)
046356 3A 06 63 04 0039*       ld a,(tiles_cols)
04635A 47          0040*       ld b,a ; column loop counter
04635B             0041*   @loop:
04635B C5          0042*       push bc ; save the loop counter
04635C             0043*   ; read the tile defintion for the current column
04635C 7E          0044*       ld a,(hl) ; a has tile definition
04635D E5          0045*       push hl ; save pointer to tile definition
04635E 2A 07 63 04 0046*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
046362 6F          0047*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
046363 CD 38 19 04 0048*       call vdu_buff_select ; tile bitmap buffer is now active
046367             0049*   ; plot the active bitmap
046367 ED 4B 0A 63 0050*       ld bc,(tiles_x_plot)
       04          
04636C ED 5B 0D 63 0051*       ld de,(tiles_y_plot)
       04          
046371 CD 20 1D 04 0052*       call vdu_plot_bmp
046375             0053*   ; bump x-coords the width of one tile and save it
046375 2A 0A 63 04 0054*       ld hl,(tiles_x_plot)
046379 01 10 00 00 0055*       ld bc,16
04637D 09          0056*       add hl,bc
04637E 22 0A 63 04 0057*       ld (tiles_x_plot),hl
046382             0058*   ; prepare to loop to next column
046382 E1          0059*       pop hl ; get back pointer to tile def
046383 23          0060*       inc hl ; bump it to the next column
046384 C1          0061*       pop bc ; snag our loop counter
046385 10 D4       0062*       djnz @loop
046387             0063*   ; increment tiles plotting y-coordinate
046387             0064*   ; when it hits zero, we go to next row of tiles in the map
046387             0065*   ; (we use ix b/c we want to preserve hl for the next step)
046387 DD 21 0D 63 0066*       ld ix,tiles_y_plot
       04          
04638C DD 34 00    0067*       inc (ix)
04638F C0          0068*       ret nz
046390             0069*   ; do active tiles
046390 E5          0070*       push hl ; save pointer to next row tile def
046391 CD C3 63 04 0071*       call do_active_tiles
046395 E1          0072*       pop hl ; get back pointer to next row tile def
046396             0073*   ; time to bump tiles_row_defs to next row
046396             0074*   ; (hl was already there at the end of the loop)
046396 22 00 63 04 0075*       ld (tiles_row_defs),hl
04639A             0076*   ; reset coords to plot next row of tiles
04639A 21 00 00 00 0077*       ld hl,0
04639E 22 0A 63 04 0078*       ld (tiles_x_plot),hl
0463A2 21 F1 FF FF 0079*       ld hl,-15
0463A6 22 0D 63 04 0080*       ld (tiles_y_plot),hl
0463AA             0081*   ; decrement tiles row counter
0463AA 21 03 63 04 0082*       ld hl,tiles_row
0463AE 35          0083*       dec (hl)
0463AF C0          0084*       ret nz
0463B0             0085*   @inc_level:
0463B0             0086*   ; increase the number of enemy sprites
0463B0 3A 32 20 04 0087*       ld a,(max_enemy_sprites)
0463B4 3C          0088*       inc a
0463B5 FE 10       0089*       cp table_max_records ; if we're at the global limit,skip ahead at max level
0463B7 CA 6C 54 04 0090*       jp z,next_level
0463BB 32 32 20 04 0091*       ld (max_enemy_sprites),a ; otherwise save the updated number
0463BF C3 6C 54 04 0092*       jp next_level
0463C3             0093*   ; end tiles_plot
0463C3             0094*   
0463C3             0095*   do_active_tiles:
0463C3             0096*   ; initialize tiles loop
0463C3 21 00 00 00 0097*       ld hl,0 ; init plotting x-coordinate
0463C7 22 0A 63 04 0098*       ld (tiles_x_plot),hl
0463CB 2A 00 63 04 0099*       ld hl,(tiles_row_defs)
0463CF 3A 06 63 04 0100*       ld a,(tiles_cols)
0463D3 47          0101*       ld b,a ; column loop counter
0463D4             0102*   @loop:
0463D4 C5          0103*       push bc ; save the loop counter
0463D5             0104*   ; read the tile defintion for the current column
0463D5 7E          0105*       ld a,(hl) ; a has tile definition
0463D6 E5          0106*       push hl ; save pointer to tile definition
0463D7 B7          0107*       or a ; check for null tile
0463D8 CA F4 63 04 0108*       jp z,@next_tile ; skip to next tile if null
0463DC FE 11       0109*       cp 17 ; carry reset if active tile
0463DE D2 F4 63 04 0110*       jp nc,@next_tile ; skip to next tile if not active
0463E2             0111*   ; call the tile activation routine
0463E2 21 4F 64 04 0112*       ld hl,tile_activation_routines
0463E6 16 03       0113*       ld d,3 ; three bytes per table entry
0463E8 5F          0114*       ld e,a ; a is the tile type
0463E9 ED 5C       0115*       mlt de ; de is now the offset to the table entry
0463EB 19          0116*       add hl,de ; hl is now the address of the table entry
0463EC ED 27       0117*       ld hl,(hl) ; hl is now the activation routine address
0463EE             0118*       callHL ; call the activation routine
0463EE 01 F4 63 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
0463F2 C5          0002*M1     push bc ; which constitutes the return address
0463F3 E9          0003*M1     jp (hl) ; Jump to the address in HL
0463F4             0004*M1 @@:
0463F4             0119*   @next_tile:
0463F4             0120*   ; bump x-coords the width of one tile and save it
0463F4 2A 0A 63 04 0121*       ld hl,(tiles_x_plot)
0463F8 01 10 00 00 0122*       ld bc,16
0463FC 09          0123*       add hl,bc
0463FD 22 0A 63 04 0124*       ld (tiles_x_plot),hl
046401             0125*   ; prepare to loop to next column
046401 E1          0126*       pop hl ; get back pointer to tile def
046402 23          0127*       inc hl ; bump it to the next column
046403 C1          0128*       pop bc ; snag our loop counter
046404 10 CE       0129*       djnz @loop
046406 C9          0130*       ret ; done
046407             0131*   ; end do_active_tiles
046407             0132*   
046407             0133*   ; create a new sprite at the same location as an active tile
046407             0134*   ; inputs: hl = pointer to new sprite default settings, tiles_x_plot, tiles_y_plot set
046407             0135*   spawn_sprite_from_tile:
046407 CD 14 5D 04 0136*       call spawn_sprite
04640B D0          0137*       ret nc ; no carry means no free sprite slots, so we go home
04640C             0138*   ; update the new sprite's position and make it visible
04640C 2A 0A 63 04 0139*       ld hl,(tiles_x_plot)
046410             0140*       hlu_mul256
046410 29          0001*M1     add hl,hl ; * 2
046411 29          0002*M1     add hl,hl ; * 4
046412 29          0003*M1     add hl,hl ; * 8
046413 29          0004*M1     add hl,hl ; * 16
046414 29          0005*M1     add hl,hl ; * 32
046415 29          0006*M1     add hl,hl ; * 64
046416 29          0007*M1     add hl,hl ; * 128
046417 29          0008*M1     add hl,hl ; * 256
046418 E5          0141*       push hl
046419 C1          0142*       pop bc
04641A DD 0F 01    0143*       ld (ix+sprite_x),bc
04641D 11 00 FF FF 0144*       ld de,-1*256 ; TODO: implement y-coord for reals
046421 DD 1F 04    0145*       ld (ix+sprite_y),de
046424 21 00 01 00 0146*       ld hl,1*256
046428 DD 2F 0A    0147*       ld (ix+sprite_yvel),hl
04642B             0148*   ; return to caller
04642B 37          0149*       scf ; set carry flag to indicate success
04642C C9          0150*       ret
04642D             0151*   ; end spawn_sprite_from_tile
04642D             0152*   
04642D             0153*   move_active_tile:
04642D             0154*   ; y-axis movement
04642D FD 27 04    0155*       ld hl,(iy+sprite_y)
046430 FD 17 0A    0156*       ld de,(iy+sprite_yvel)
046433 19          0157*       add hl,de
046434 FD 2F 04    0158*       ld (iy+sprite_y),hl
046437             0159*   ; detect screen edge collisions
046437 AF          0160*       xor a ; reset screen edge collision flag and clear carry
046438 32 94 5B 04 0161*       ld (sprite_screen_edge),a
04643C             0162*   ; y-axis bottom is all we need to test
04643C 11 00 91 FE 0163*       ld de,-sprite_bottom*256
046440 ED 5A       0164*       adc hl,de
046442 F2 47 64 04 0165*       jp p,@bottom ; scrolled off screen so deactivate
046446 C9          0166*       ret ; still on screen so do nothing further
046447             0167*   @bottom:
046447 3E 04       0168*       ld a,collide_bottom
046449 32 94 5B 04 0169*       ld (sprite_screen_edge),a
04644D C9          0170*       ret
04644E             0171*   
04644E             0172*   
04644E             0173*   ; bg_y_plot: dl -1
04644E             0174*   ; bg_bufferId: dl BUF_STATION_BG_00 ; default bufferId for background tiles
04644E             0175*   
04644E             0176*   bg_plot: ; TODO: implement this
04644E             0177*   ; ; load current bg tile bufferId as default
04644E             0178*   ;     ld hl,(bg_bufferId)
04644E             0179*   ; ; check whether it is time for a new background tile
04644E             0180*   ;     ld a,(bg_y_plot)
04644E             0181*   ;     inc a
04644E             0182*   ;     ld (bg_y_plot),a
04644E             0183*   ;     jp nz,@F ; not time for a new tile so draw current one
04644E             0184*   ; ; load the next background tile
04644E             0185*   ;     ld hl,BUF_STATION_BG_00
04644E             0186*   ;     call rand_8
04644E             0187*   ;     and %0000011
04644E             0188*   ;     add a,l
04644E             0189*   ;     ld l,a
04644E             0190*   ;     ld a,0
04644E             0191*   ;     adc a,h
04644E             0192*   ;     ld h,a
04644E             0193*   ;     ld (bg_bufferId),hl
04644E             0194*   ; @@:
04644E             0195*   ;     call vdu_buff_select
04644E             0196*   ;     ld bc,0
04644E             0197*   ;     ld de,(bg_y_plot)
04644E             0198*   ;     inc de
04644E             0199*   ;     call vdu_plot_bmp
04644E             0200*   ; all done
04644E C9          0201*       ret
04644F             0202*   
04644F             0203*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
04644F             0204*   tile_pad_small: equ 1
04644F             0205*   tile_pad_med: equ 2
04644F             0206*   tile_pad_large: equ 3
04644F             0207*   tile_pad_huge: equ 4
04644F             0208*   tile_fireball_turret: equ 5
04644F             0209*   tile_laser_turret: equ 6
04644F             0210*   tile_twin_laser_turret: equ 7
04644F             0211*   tile_gatling_turret: equ 8
04644F             0212*   tile_electrode_r: equ 9
04644F             0213*   tile_electrode_u: equ 10
04644F             0214*   tile_piston_r: equ 11
04644F             0215*   tile_piston_u: equ 12
04644F             0216*   tile_spark_r: equ 13
04644F             0217*   tile_spark_u: equ 14
04644F             0218*   tile_flame_r: equ 15
04644F             0219*   tile_flame_u: equ 16
04644F             0220*   
04644F             0221*   active_tile_timer: equ 24 ; 2/10ths of a second
04644F             0222*   tile_activation_routines:
04644F 82 64 04    0223*       dl activate_null_tile ; dummy spacer since tiled is 1-based
046452 13 65 04    0224*       dl activate_pad_small
046455 82 64 04    0225*       dl activate_null_tile  ;  activate_pad_med
046458 82 64 04    0226*       dl activate_null_tile  ;  activate_pad_large
04645B 82 64 04    0227*       dl activate_null_tile  ;  activate_pad_huge
04645E 82 64 04    0228*       dl activate_null_tile  ;  activate_fireball_turret
046461 82 64 04    0229*       dl activate_null_tile  ;  activate_laser_turret
046464 82 64 04    0230*       dl activate_null_tile  ;  activate_twin_laser_turret
046467 82 64 04    0231*       dl activate_null_tile  ;  activate_gatling_turret
04646A 82 64 04    0232*       dl activate_null_tile  ;  activate_electrode_r
04646D 82 64 04    0233*       dl activate_null_tile  ;  activate_electrode_u
046470 82 64 04    0234*       dl activate_null_tile  ;  activate_piston_r
046473 82 64 04    0235*       dl activate_null_tile  ;  activate_piston_u
046476 82 64 04    0236*       dl activate_null_tile  ;  activate_spark_r
046479 82 64 04    0237*       dl activate_null_tile  ;  activate_spark_u
04647C 82 64 04    0238*       dl activate_null_tile  ;  activate_flame_r
04647F 82 64 04    0239*       dl activate_null_tile  ;  activate_flame_u
046482             0240*   ; end tile_activation_routines
046482             0241*   
046482             0242*   activate_null_tile:
046482 C9          0243*       ret ; dummy routine, do nothing
046483             0244*   
046483             0245*   ; ld_act_laser_turret:
046483             0246*   ;     ; call sprite_variables_to_stack
046483             0247*   
046483             0248*   ;     ld hl,move_laser_turret
046483             0249*   ;     ld (sprite_move_program),hl
046483             0250*   
046483             0251*   ;     xor a
046483             0252*   ;     ld (sprite_animation),a
046483             0253*   ;     ld (sprite_move_step),a
046483             0254*   
046483             0255*   ;     call rand_8     ; snag a random number
046483             0256*   ;     and %00011111   ; keep only 5 lowest bits (max 31)
046483             0257*   ;     add a,64 ; range is now 64-127
046483             0258*   ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
046483             0259*   
046483             0260*   ;     ld a,%10 ; collides with laser but not player
046483             0261*   ;     ld (iy+sprite_collisions),a
046483             0262*   
046483             0263*   ;     ld a,#10 ; BCD
046483             0264*   ;     ld (sprite_points),a
046483             0265*   ;     ld a,0 ; binary
046483             0266*   ;     ld (sprite_shield_damage),a
046483             0267*   
046483             0268*   ;     ld hl,tile_fireball_turret ; dt_ld_act loads this to sprite_base_bufferId
046483             0269*   ;     jp dt_ld_act
046483             0270*   
046483             0271*   
046483             0272*   ; move_laser_turret:
046483             0273*   ; ; compute orientation to player
046483             0274*   ;     call orientation_to_player
046483             0275*   ; ; h.l 8.8 fixed angle256 to player
046483             0276*   ; ; bc and de as signed 16-bit integers
046483             0277*   ; ; representing delta-x/y *to* target respectively
046483             0278*   ;     ld (Bearing_t),hl
046483             0279*   ;     ld hl,0x0400
046483             0280*   ;     ld (Vp),hl
046483             0281*   ;     call targeting_computer
046483             0282*   ;     ld (sprite_heading),hl ; store bearing to player
046483             0283*   ; ; is it time to launch a fireball?
046483             0284*   ;     ld hl,sprite_move_timer
046483             0285*   ;     dec (hl)
046483             0286*   ;     jp nz,move_laser_turret_boilerplate
046483             0287*   ;     call fireballs_init
046483             0288*   ;     ; reset move timer so can fire again if player doesn't take us out
046483             0289*   ;     call rand_8     ; snag a random number
046483             0290*   ;     and %00011111   ; keep only 5 lowest bits (max 31)
046483             0291*   ;     add a,64 ; range is now 64-127
046483             0292*   ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
046483             0293*   ; move_laser_turret_boilerplate:
046483             0294*   ;     call move_active_tiles
046483             0295*   ;     call check_collisions
046483             0296*   ;     ret
046483             0297*   
046483             0298*   
046483             0299*   ; fireballs_init:
046483             0300*   ;     ; call sprite_variables_to_stack
046483             0301*   
046483             0302*   ;     ld hl,enemy_fireball
046483             0303*   ;     ld (sprite_base_bufferId),hl
046483             0304*   
046483             0305*   ;     ld hl,move_fireballs
046483             0306*   ;     ld (sprite_move_program),hl
046483             0307*   
046483             0308*   ;     ld a,%11 ; collides with laser and player
046483             0309*   ;     ld (iy+sprite_collisions),a
046483             0310*   
046483             0311*   ;     ld hl,(Vp)
046483             0312*   ;     ld (sprite_vel),hl
046483             0313*   ;     ld hl,(Vp_x)
046483             0314*   ;     ld (sprite_xvel),hl
046483             0315*   ;     ld hl,(Vp_y)
046483             0316*   ;     inc h ; account for ground movement
046483             0317*   ;     ld (sprite_yvel),hl
046483             0318*   
046483             0319*   ;     xor a ; zero a
046483             0320*   ;     ld (sprite_animation),a
046483             0321*   ;     ld (sprite_move_step),a
046483             0322*   ;     ld (sprite_move_timer),a
046483             0323*   
046483             0324*   ;     ld a,6 ; 1/10th of a second timer
046483             0325*   ;     ld (sprite_animation_timer),a
046483             0326*   
046483             0327*   ;     ld a,0x00 ; BCD
046483             0328*   ;     ld (sprite_points),a
046483             0329*   ;     ld a,1 ; binary
046483             0330*   ;     ld (sprite_shield_damage),a
046483             0331*   
046483             0332*   ;     call table_add_record ; plops that on the sprite stack for later
046483             0333*   ;     ; call sprite_variables_from_stack ; come back to where we started
046483             0334*   ;     ret
046483             0061        include "tile_pad_small.inc"
046483 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
046500             0002*   pad_small_defaults:
046500 01          0003*       db tile_pad_small       ; type
046501 0A 01 00    0004*       dl BUF_PAD              ; base_bufferId
046504 22 65 04    0005*       dl move_pad_small       ; move_program
046507 02          0006*       db collides_with_laser  ; collisions
046508 10          0007*       db 16                   ; dim_x
046509 10          0008*       db 16                   ; dim_y
04650A 01          0009*       db 1                    ; num_orientations
04650B 01          0010*       db 1                    ; num_animations
04650C 00          0011*       db 0                    ; animation
04650D 00          0012*       db 0                    ; animation_timer
04650E 18          0013*       db 24                   ; move_timer
04650F 00          0014*       db 0                    ; move_step
046510 05          0015*       db 5                    ; points
046511 00          0016*       db 0                    ; shield_damage
046512 00          0017*       db 0                    ; animation_frame
046513             0018*   
046513             0019*   activate_pad_small:
046513 21 00 65 04 0020*       ld hl,pad_small_defaults
046517             0021*   ; get next available sprite id
046517 CD 07 64 04 0022*       call spawn_sprite_from_tile
04651B D0          0023*       ret nc ; no carry means no free sprite slots, so we go home
04651C             0024*   ; TODO: other specific initialization
04651C 3E 40       0025*       ld a,64
04651E FD 77 24    0026*       ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a seeker
046521 C9          0027*       ret
046522             0028*   ; end activate_pad_small
046522             0029*   
046522             0030*   move_pad_small:
046522 CD 2D 64 04 0031*       call move_active_tile
046526 B7          0032*       or a ; a will be non-zero if have scrolled off screen
046527 C2 EC 5B 04 0033*       jp nz,table_deactivate_sprite
04652B             0034*   ; check collisions
04652B CD DF 20 04 0035*       call check_enemy_collisions
04652F B7          0036*       or a ; a will be negative if have collided with player or laser
046530 F8          0037*       ret m ; we're dead so nothing more to do
046531             0038*   ; check whether it is time to spawn a seeker
046531 FD 35 24    0039*       dec (iy+sprite_move_timer)
046534 C0          0040*       ret nz
046535             0041*   move_pad_reset_timer:
046535 CD BB 08 04 0042*       call rand_8     ; snag a random number
046539 E6 1F       0043*       and %00011111   ; keep only 5 lowest bits (max 31)
04653B C6 40       0044*       add a,64 ; range is now 64-127
04653D FD 77 24    0045*       ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a seeker
046540 CD 13 23 04 0046*       call enemy_spawn_seeker
046544 C9          0047*       ret
046545             0062        ; include "tile_turret_fireball.inc"
046545             0063    
046545 FF FF FF FF 0064        align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
046600             0065    
046600             0066    ; --- MAIN PROGRAM FILE ---
046600 57 65 6C 63 0067    hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
04661B 4C 6F 61 64 0068    loading_ui: asciz "Loading UI"
       69 6E 67 20 
       55 49 00    
046626 4C 6F 61 64 0069    loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
046634 50 72 65 73 0070    loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
04664F             0071    
04664F             0072    init:
04664F             0073    ; clear all buffers
04664F CD 2A 1A 04 0074        call vdu_clear_all_buffers
046653             0075    
046653             0076    ; set up the display
046653 3E 08       0077        ld a,8;+128 ; 136   320   240   64    60hz double-buffered
046655 CD 14 19 04 0078        call vdu_set_screen_mode
046659 AF          0079        xor a
04665A CD 25 19 04 0080        call vdu_set_scaling
04665E             0081    
04665E             0082    ; ; enable additional audio channels
04665E             0083    ; 	call vdu_enable_channels
04665E             0084    
04665E             0085    ; set text background color
04665E 3E 9A       0086        ld a,26+128 ; violet
046660 CD 7C 18 04 0087        call vdu_colour_text
046664             0088    
046664             0089    ; set text foreground color
046664 3E 2F       0090        ld a,47 ; aaaaff lavenderish
046666 CD 7C 18 04 0091        call vdu_colour_text
04666A             0092    
04666A             0093    ; set gfx bg color
04666A AF          0094        xor a ; plotting mode 0
04666B 3E 9A       0095        ld a,26+128 ; violet
04666D CD 8D 18 04 0096        call vdu_gcol
046671 CD 4B 18 04 0097        call vdu_cls
046675             0098    
046675             0099    ; set the cursor off
046675 CD 13 18 04 0100        call vdu_cursor_off
046679             0101    
046679             0102    ; VDU 28, left, bottom, right, top: Set text viewport **
046679             0103    ; MIND THE LITTLE-ENDIANESS
046679             0104    ; inputs: c=left,b=bottom,e=right,d=top
046679 0E 00       0105        ld c,0 ; left
04667B 16 1D       0106        ld d,29 ; top
04667D 1E 27       0107        ld e,39 ; right
04667F 06 1D       0108        ld b,29; bottom
046681 CD A4 18 04 0109        call vdu_set_txt_viewport
046685             0110    
046685             0111    ; print loading ui message
046685 21 1B 66 04 0112        ld hl,loading_ui
046689 CD 17 01 04 0113        call printString
04668D CD 50 18 04 0114        call vdu_flip
046691             0115    
046691             0116    ; load UI images
046691 CD CB 15 04 0117        call load_ui_images
046695             0118    
046695             0119    ; load sprites
046695 CD 09 15 04 0120        call img_load_init ; sets up the animated load screen
046699 CD DE 15 04 0121        call load_sprite_images
04669D             0122    
04669D             0123    ; load tileset_ptrs
04669D CD EF 15 04 0124        call load_tilesets
0466A1             0125    
0466A1             0126    ; ; load sound effects ; TODO
0466A1             0127    ; 	ld bc,SFX_num_buffers
0466A1             0128    ; 	ld hl,SFX_buffer_id_lut
0466A1             0129    ; 	ld (cur_buffer_id_lut),hl
0466A1             0130    ; 	ld hl,SFX_load_routines_table
0466A1             0131    ; 	ld (cur_load_jump_table),hl
0466A1             0132    ; 	call sfx_load_main
0466A1             0133    
0466A1             0134    ; print loading complete message and wait for user keypress
0466A1             0135        ; call vdu_cls
0466A1             0136        ; ld hl,loading_complete
0466A1             0137        ; call printString
0466A1 CD 50 18 04 0138        call vdu_flip
0466A5 CD C5 06 04 0139        call waitKeypress
0466A9             0140    
0466A9             0141    ; set up display for gameplay
0466A9             0142        ; ld a,8
0466A9 3E 14       0143        ld a,20
0466AB CD 14 19 04 0144        call vdu_set_screen_mode
0466AF AF          0145        xor a
0466B0 CD 25 19 04 0146        call vdu_set_scaling
0466B4 CD 13 18 04 0147        call vdu_cursor_off
0466B8             0148    ; load fonts
0466B8 CD 00 14 04 0149    	call fonts_load
0466BC             0150    ; select font
0466BC             0151        ; ld hl,computer_pixel_7_8x16
0466BC 21 02 FA 00 0152        ld hl,amiga_forever_8x8 ; DEBUG
0466C0 3E 01       0153        ld a,1 ; flags
0466C2 CD 00 1C 04 0154        call vdu_font_select
0466C6             0155    ; plot bezel art
0466C6 21 00 00 00 0156        ld hl,BUF_BEZEL_L
0466CA CD 38 19 04 0157        call vdu_buff_select
0466CE 01 00 00 00 0158        ld bc,0
0466D2 11 00 00 00 0159        ld de,0
0466D6 CD 20 1D 04 0160        call vdu_plot_bmp
0466DA 21 01 00 00 0161        ld hl,BUF_BEZEL_R
0466DE CD 38 19 04 0162        call vdu_buff_select
0466E2 01 80 01 00 0163        ld bc,384
0466E6 11 00 00 00 0164        ld de,0
0466EA CD 20 1D 04 0165        call vdu_plot_bmp
0466EE             0166    ; set gfx origin and viewport to playing field window
0466EE 01 80 00 00 0167        ld bc,origin_left
0466F2 11 00 00 00 0168        ld de,origin_top
0466F6 CD D0 18 04 0169        call vdu_set_gfx_origin
0466FA 01 00 00 00 0170        ld bc,field_left
0466FE 11 00 00 00 0171        ld de,field_top
046702 DD 21 FF 00 0172        ld ix,field_right
       00          
046707 FD 21 7F 01 0173        ld iy,field_bottom
       00          
04670C CD EB 18 04 0174        call vdu_set_gfx_viewport
046710             0175    ; set background color
046710 3E 9A       0176        ld a,26+128 ; violet
046712 CD 8D 18 04 0177        call vdu_gcol
046716 CD 5E 18 04 0178        call vdu_clg
04671A             0179    ; VDU 28, left, bottom, right, top: Set text viewport **
04671A 0E 00       0180        ld c,0 ; left
04671C 16 00       0181        ld d,0 ; top
04671E 1E 3E       0182        ld e,62 ; right
046720 06 30       0183        ld b,48; bottom
046722 CD A4 18 04 0184        call vdu_set_txt_viewport
046726             0185    
046726             0186    ; initialize the global timestamp
046726 CD F9 16 04 0187        call timestamp_tick
04672A             0188    
04672A             0189    ; done with init
04672A C9          0190        ret
04672B             0191    
04672B             0192    main:
04672B             0193    ; start a new game
04672B CD 17 60 04 0194        call game_initialize
04672F             0195    
04672F             0196    main_loop:
04672F             0197    ; update the global timestamp
04672F CD F9 16 04 0198        call timestamp_tick
046733             0199    
046733             0200    ; do gamestate logic
046733 CD 03 60 04 0201        call do_game
046737             0202    
046737             0203        ; CALL DEBUG_PRINT_TABLE
046737             0204    
046737             0205    ; wait for the next vblank mitigate flicker and for loop timing
046737 CD BF 18 04 0206        call vdu_vblank
04673B             0207    
04673B             0208    ; poll keyboard for escape keypress
04673B 3E 08       0209        ld a, $08 ; code to send to MOS
04673D 5B CF       0210        rst.lil $08 ; get IX pointer to System Variables
04673F             0211    
04673F DD 7E 05    0212        ld a, (ix + $05) ; get ASCII code of key pressed
046742 FE 1B       0213        cp 27 ; check if 27 (ascii code for ESC)
046744 CA 4C 67 04 0214        jp z, main_end ; if pressed, jump to exit
046748             0215    
046748 C3 2F 67 04 0216        jp main_loop
04674C             0217    
04674C             0218    main_end:
04674C CD 05 18 04 0219        call vdu_cursor_on
046750 C9          0220        ret
046751             0221    
046751             0222    DEBUG_PRINT:
046751             0223        PUSH_ALL
046751 08          0001M1      ex af,af'
046752 D9          0002M1      exx
046753 F5          0003M1      push af
046754 E5          0004M1      push hl
046755 C5          0005M1      push bc
046756 D5          0006M1      push de
046757             0007M1  
046757 08          0008M1      ex af,af'
046758 D9          0009M1      exx
046759 F5          0010M1      push af
04675A E5          0011M1      push hl
04675B C5          0012M1      push bc
04675C D5          0013M1      push de
04675D DD E5       0014M1      push ix
04675F FD E5       0015M1      push iy
046761 0E 00       0224        ld c,0
046763 06 00       0225        ld b,0
046765 CD 37 18 04 0226        call vdu_move_cursor
046769             0227        POP_ALL
046769 FD E1       0001M1      pop iy
04676B DD E1       0002M1      pop ix
04676D D1          0003M1      pop de
04676E C1          0004M1      pop bc
04676F E1          0005M1      pop hl
046770 F1          0006M1      pop af
046771 08          0007M1      ex af,af'
046772 D9          0008M1      exx
046773             0009M1  
046773 D1          0010M1      pop de
046774 C1          0011M1      pop bc
046775 E1          0012M1      pop hl
046776 F1          0013M1      pop af
046777 08          0014M1      ex af,af'
046778 D9          0015M1      exx
046779             0228        PUSH_ALL
046779 08          0001M1      ex af,af'
04677A D9          0002M1      exx
04677B F5          0003M1      push af
04677C E5          0004M1      push hl
04677D C5          0005M1      push bc
04677E D5          0006M1      push de
04677F             0007M1  
04677F 08          0008M1      ex af,af'
046780 D9          0009M1      exx
046781 F5          0010M1      push af
046782 E5          0011M1      push hl
046783 C5          0012M1      push bc
046784 D5          0013M1      push de
046785 DD E5       0014M1      push ix
046787 FD E5       0015M1      push iy
046789 CD 64 06 04 0229        call dumpFlags
04678D             0230        POP_ALL
04678D FD E1       0001M1      pop iy
04678F DD E1       0002M1      pop ix
046791 D1          0003M1      pop de
046792 C1          0004M1      pop bc
046793 E1          0005M1      pop hl
046794 F1          0006M1      pop af
046795 08          0007M1      ex af,af'
046796 D9          0008M1      exx
046797             0009M1  
046797 D1          0010M1      pop de
046798 C1          0011M1      pop bc
046799 E1          0012M1      pop hl
04679A F1          0013M1      pop af
04679B 08          0014M1      ex af,af'
04679C D9          0015M1      exx
04679D             0231        PUSH_ALL
04679D 08          0001M1      ex af,af'
04679E D9          0002M1      exx
04679F F5          0003M1      push af
0467A0 E5          0004M1      push hl
0467A1 C5          0005M1      push bc
0467A2 D5          0006M1      push de
0467A3             0007M1  
0467A3 08          0008M1      ex af,af'
0467A4 D9          0009M1      exx
0467A5 F5          0010M1      push af
0467A6 E5          0011M1      push hl
0467A7 C5          0012M1      push bc
0467A8 D5          0013M1      push de
0467A9 DD E5       0014M1      push ix
0467AB FD E5       0015M1      push iy
0467AD CD C6 04 04 0232        call dumpRegistersHex
0467B1             0233        ; call waitKeypress
0467B1             0234        POP_ALL
0467B1 FD E1       0001M1      pop iy
0467B3 DD E1       0002M1      pop ix
0467B5 D1          0003M1      pop de
0467B6 C1          0004M1      pop bc
0467B7 E1          0005M1      pop hl
0467B8 F1          0006M1      pop af
0467B9 08          0007M1      ex af,af'
0467BA D9          0008M1      exx
0467BB             0009M1  
0467BB D1          0010M1      pop de
0467BC C1          0011M1      pop bc
0467BD E1          0012M1      pop hl
0467BE F1          0013M1      pop af
0467BF 08          0014M1      ex af,af'
0467C0 D9          0015M1      exx
0467C1 C9          0235        ret
0467C2             0236    
0467C2             0237    DEBUG_PRINT_TABLE:
0467C2             0238        PUSH_ALL
0467C2 08          0001M1      ex af,af'
0467C3 D9          0002M1      exx
0467C4 F5          0003M1      push af
0467C5 E5          0004M1      push hl
0467C6 C5          0005M1      push bc
0467C7 D5          0006M1      push de
0467C8             0007M1  
0467C8 08          0008M1      ex af,af'
0467C9 D9          0009M1      exx
0467CA F5          0010M1      push af
0467CB E5          0011M1      push hl
0467CC C5          0012M1      push bc
0467CD D5          0013M1      push de
0467CE DD E5       0014M1      push ix
0467D0 FD E5       0015M1      push iy
0467D2 CD 00 18 04 0239        call vdu_home_cursor
0467D6             0240        ; LIST_FIELD sprite_move_program,3 ; DEBUG
0467D6             0241        ; LIST_FIELD sprite_type,1 ; DEBUG
0467D6             0242    
0467D6 DD 21 00 59 0243        ld ix,table_base
       04          
0467DB CD 6C 5D 04 0244        call dump_sprite_record
0467DF CD 2C 01 04 0245        call printNewLine
0467E3 CD 2C 01 04 0246        call printNewLine
0467E7             0247    
0467E7 ED 32 29    0248        lea ix,ix+table_bytes_per_record
0467EA CD 6C 5D 04 0249        call dump_sprite_record
0467EE CD 2C 01 04 0250        call printNewLine
0467F2             0251    
0467F2             0252        ; call waitKeypress
0467F2             0253        POP_ALL
0467F2 FD E1       0001M1      pop iy
0467F4 DD E1       0002M1      pop ix
0467F6 D1          0003M1      pop de
0467F7 C1          0004M1      pop bc
0467F8 E1          0005M1      pop hl
0467F9 F1          0006M1      pop af
0467FA 08          0007M1      ex af,af'
0467FB D9          0008M1      exx
0467FC             0009M1  
0467FC D1          0010M1      pop de
0467FD C1          0011M1      pop bc
0467FE E1          0012M1      pop hl
0467FF F1          0013M1      pop af
046800 08          0014M1      ex af,af'
046801 D9          0015M1      exx
046802 C9          0254        RET
046803             0255    
046803             0256    DEBUG_WAITKEYPRESS:
046803             0257        PUSH_ALL
046803 08          0001M1      ex af,af'
046804 D9          0002M1      exx
046805 F5          0003M1      push af
046806 E5          0004M1      push hl
046807 C5          0005M1      push bc
046808 D5          0006M1      push de
046809             0007M1  
046809 08          0008M1      ex af,af'
04680A D9          0009M1      exx
04680B F5          0010M1      push af
04680C E5          0011M1      push hl
04680D C5          0012M1      push bc
04680E D5          0013M1      push de
04680F DD E5       0014M1      push ix
046811 FD E5       0015M1      push iy
046813 CD C5 06 04 0258        call waitKeypress
046817             0259        POP_ALL
046817 FD E1       0001M1      pop iy
046819 DD E1       0002M1      pop ix
04681B D1          0003M1      pop de
04681C C1          0004M1      pop bc
04681D E1          0005M1      pop hl
04681E F1          0006M1      pop af
04681F 08          0007M1      ex af,af'
046820 D9          0008M1      exx
046821             0009M1  
046821 D1          0010M1      pop de
046822 C1          0011M1      pop bc
046823 E1          0012M1      pop hl
046824 F1          0013M1      pop af
046825 08          0014M1      ex af,af'
046826 D9          0015M1      exx
046827 C9          0260        RET

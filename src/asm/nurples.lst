PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C             0015    
04004C CD DE 93 04 0016        call main
040050             0017    
040050             0018    exit:
040050 FD E1       0019        pop iy
040052 DD E1       0020        pop ix
040054 D1          0021        pop de
040055 C1          0022        pop bc
040056 F1          0023        pop af
040057 21 00 00 00 0024        ld hl,0
04005B             0025    
04005B C9          0026        ret
04005C             0027    
04005C             0028    ; API INCLUDES
04005C             0029        include "mos_api.inc"
04005C             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
04005C             0002*   ; Title:	AGON MOS - API for user projects
04005C             0003*   ; Author:	Dean Belfield
04005C             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
04005C             0005*   ;			Added MOS error codes for return in HL
04005C             0006*   ; Created:	03/08/2022
04005C             0007*   ; Last Updated:	10/08/2023
04005C             0008*   ;
04005C             0009*   ; Modinfo:
04005C             0010*   ; 05/08/2022:	Added mos_feof
04005C             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
04005C             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
04005C             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
04005C             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
04005C             0015*   ; 13/10/2022:	Added mos_oscli
04005C             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
04005C             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
04005C             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
04005C             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
04005C             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
04005C             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
04005C             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
04005C             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
04005C             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
04005C             0025*   ; 19/05/2023:	Added sysvar_scrMode
04005C             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
04005C             0027*   ; 03/08/2023:	Added mos_setkbvector
04005C             0028*   ; 10/08/2023:	Added mos_getkbmap
04005C             0029*   
04005C             0030*   ; VDP control (VDU 23, 0, n)
04005C             0031*   ;
04005C             0032*   vdp_gp:				EQU 80h
04005C             0033*   vdp_keycode:		EQU 81h
04005C             0034*   vdp_cursor:			EQU	82h
04005C             0035*   vdp_scrchar:		EQU	83h
04005C             0036*   vdp_scrpixel:		EQU	84h
04005C             0037*   vdp_audio:			EQU	85h
04005C             0038*   vdp_mode:			EQU	86h
04005C             0039*   vdp_rtc:			EQU	87h
04005C             0040*   vdp_keystate:		EQU	88h
04005C             0041*   vdp_logicalcoords:	EQU	C0h
04005C             0042*   vdp_terminalmode:	EQU	FFh
04005C             0043*   
04005C             0044*   ; MOS high level functions
04005C             0045*   ;
04005C             0046*   mos_getkey:			EQU	00h
04005C             0047*   mos_load:			EQU	01h
04005C             0048*   mos_save:			EQU	02h
04005C             0049*   mos_cd:				EQU	03h
04005C             0050*   mos_dir:			EQU	04h
04005C             0051*   mos_del:			EQU	05h
04005C             0052*   mos_ren:			EQU	06h
04005C             0053*   mos_mkdir:			EQU	07h
04005C             0054*   mos_sysvars:		EQU	08h
04005C             0055*   mos_editline:		EQU	09h
04005C             0056*   mos_fopen:			EQU	0Ah
04005C             0057*   mos_fclose:			EQU	0Bh
04005C             0058*   mos_fgetc:			EQU	0Ch
04005C             0059*   mos_fputc:			EQU	0Dh
04005C             0060*   mos_feof:			EQU	0Eh
04005C             0061*   mos_getError:		EQU	0Fh
04005C             0062*   mos_oscli:			EQU	10h
04005C             0063*   mos_copy:			EQU	11h
04005C             0064*   mos_getrtc:			EQU	12h
04005C             0065*   mos_setrtc:			EQU	13h
04005C             0066*   mos_setintvector:	EQU	14h
04005C             0067*   mos_uopen:			EQU	15h
04005C             0068*   mos_uclose:			EQU	16h
04005C             0069*   mos_ugetc:			EQU	17h
04005C             0070*   mos_uputc:			EQU	18h
04005C             0071*   mos_getfil:			EQU	19h
04005C             0072*   mos_fread:			EQU	1Ah
04005C             0073*   mos_fwrite:			EQU	1Bh
04005C             0074*   mos_flseek:			EQU	1Ch
04005C             0075*   mos_setkbvector:	EQU	1Dh
04005C             0076*   mos_getkbmap:		EQU	1Eh
04005C             0077*   
04005C             0078*   ; MOS program exit codes
04005C             0079*   ;
04005C             0080*   EXIT_OK:				EQU  0;	"OK",
04005C             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
04005C             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
04005C             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
04005C             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
04005C             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
04005C             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
04005C             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
04005C             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
04005C             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
04005C             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
04005C             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
04005C             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
04005C             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
04005C             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
04005C             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
04005C             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
04005C             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
04005C             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
04005C             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
04005C             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
04005C             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
04005C             0102*   ; FatFS file access functions
04005C             0103*   ;
04005C             0104*   ffs_fopen:			EQU	80h
04005C             0105*   ffs_fclose:			EQU	81h
04005C             0106*   ffs_fread:			EQU	82h
04005C             0107*   ffs_fwrite:			EQU	83h
04005C             0108*   ffs_flseek:			EQU	84h
04005C             0109*   ffs_ftruncate:		EQU	85h
04005C             0110*   ffs_fsync:			EQU	86h
04005C             0111*   ffs_fforward:		EQU	87h
04005C             0112*   ffs_fexpand:		EQU	88h
04005C             0113*   ffs_fgets:			EQU	89h
04005C             0114*   ffs_fputc:			EQU	8Ah
04005C             0115*   ffs_fputs:			EQU	8Bh
04005C             0116*   ffs_fprintf:		EQU	8Ch
04005C             0117*   ffs_ftell:			EQU	8Dh
04005C             0118*   ffs_feof:			EQU	8Eh
04005C             0119*   ffs_fsize:			EQU	8Fh
04005C             0120*   ffs_ferror:			EQU	90h
04005C             0121*   
04005C             0122*   ; FatFS directory access functions
04005C             0123*   ;
04005C             0124*   ffs_dopen:			EQU	91h
04005C             0125*   ffs_dclose:			EQU	92h
04005C             0126*   ffs_dread:			EQU	93h
04005C             0127*   ffs_dfindfirst:		EQU	94h
04005C             0128*   ffs_dfindnext:		EQU	95h
04005C             0129*   
04005C             0130*   ; FatFS file and directory management functions
04005C             0131*   ;
04005C             0132*   ffs_stat:			EQU	96h
04005C             0133*   ffs_unlink:			EQU	97h
04005C             0134*   ffs_rename:			EQU	98h
04005C             0135*   ffs_chmod:			EQU	99h
04005C             0136*   ffs_utime:			EQU	9Ah
04005C             0137*   ffs_mkdir:			EQU	9Bh
04005C             0138*   ffs_chdir:			EQU	9Ch
04005C             0139*   ffs_chdrive:		EQU	9Dh
04005C             0140*   ffs_getcwd:			EQU	9Eh
04005C             0141*   
04005C             0142*   ; FatFS volume management and system configuration functions
04005C             0143*   ;
04005C             0144*   ffs_mount:			EQU	9Fh
04005C             0145*   ffs_mkfs:			EQU	A0h
04005C             0146*   ffs_fdisk:			EQU	A1h
04005C             0147*   ffs_getfree:		EQU	A2h
04005C             0148*   ffs_getlabel:		EQU	A3h
04005C             0149*   ffs_setlabel:		EQU	A4h
04005C             0150*   ffs_setcp:			EQU	A5h
04005C             0151*   
04005C             0152*   ; File access modes
04005C             0153*   ;
04005C             0154*   fa_read:			EQU	01h
04005C             0155*   fa_write:			EQU	02h
04005C             0156*   fa_open_existing:	EQU	00h
04005C             0157*   fa_create_new:		EQU	04h
04005C             0158*   fa_create_always:	EQU	08h
04005C             0159*   fa_open_always:		EQU	10h
04005C             0160*   fa_open_append:		EQU	30h
04005C             0161*   
04005C             0162*   ; System variable indexes for api_sysvars
04005C             0163*   ; Index into _sysvars in globals.inc
04005C             0164*   ;
04005C             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
04005C             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
04005C             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
04005C             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
04005C             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
04005C             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
04005C             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
04005C             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
04005C             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
04005C             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
04005C             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
04005C             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
04005C             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
04005C             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
04005C             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
04005C             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
04005C             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
04005C             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
04005C             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
04005C             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
04005C             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
04005C             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
04005C             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
04005C             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
04005C             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
04005C             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
04005C             0191*   
04005C             0192*   ; Flags for the VPD protocol
04005C             0193*   ;
04005C             0194*   vdp_pflag_cursor:		EQU	00000001b
04005C             0195*   vdp_pflag_scrchar:		EQU	00000010b
04005C             0196*   vdp_pflag_point:		EQU	00000100b
04005C             0197*   vdp_pflag_audio:		EQU	00001000b
04005C             0198*   vdp_pflag_mode:			EQU	00010000b
04005C             0199*   vdp_pflag_rtc:			EQU	00100000b
04005C             0200*   
04005C             0201*   ;
04005C             0202*   ; FatFS structures
04005C             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
04005C             0204*   ;
04005C             0205*   ; Object ID and allocation information (FFOBJID)
04005C             0206*   ;
04005C             0207*   ; Indexes into FFOBJID structure
04005C             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
04005C             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
04005C             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
04005C             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
04005C             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
04005C             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
04005C             0214*   ;
04005C             0215*   ; File object structure (FIL)
04005C             0216*   ;
04005C             0217*   ; Indexes into FIL structure
04005C             0218*   fil_obj:		EQU 0	; 15: Object identifier
04005C             0219*   fil_flag:		EQU	15 	;  1: File status flags
04005C             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
04005C             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
04005C             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
04005C             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
04005C             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
04005C             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
04005C             0226*   ;
04005C             0227*   ; Directory object structure (DIR)
04005C             0228*   ; Indexes into DIR structure
04005C             0229*   dir_obj:		EQU  0	; 15: Object identifier
04005C             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
04005C             0231*   dir_clust:		EQU	19	;  4: Current cluster
04005C             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
04005C             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
04005C             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
04005C             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
04005C             0236*   ;
04005C             0237*   ; File information structure (FILINFO)
04005C             0238*   ;
04005C             0239*   ; Indexes into FILINFO structure
04005C             0240*   filinfo_fsize:		EQU 0	;   4: File size
04005C             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
04005C             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
04005C             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
04005C             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
04005C             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
04005C             0246*   ;
04005C             0247*   ; Macro for calling the API
04005C             0248*   ; Parameters:
04005C             0249*   ; - function: One of the function numbers listed above
04005C             0250*   ;
04005C             0251*   	MACRO	MOSCALL	function
04005C             0252*   			LD	A, function
04005C             0253*   			RST.LIL	08h
04005C             0254*   	ENDMACRO
04005C             0030        include "macros.inc"
04005C             0001*   
04005C             0002*   ; test the sign of HL
04005C             0003*   ; inputs: HL obviously
04005C             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
04005C             0005*   ; destroys: flags
04005C             0006*       MACRO SIGN_HLU
04005C             0007*       add hl,de ; 1 cycle
04005C             0008*       or a ; clear flags ; 1 cycle
04005C             0009*       sbc hl,de ; 2 cycles
04005C             0010*       ; 4 cycles total
04005C             0011*       ENDMACRO
04005C             0012*   
04005C             0013*   ; put the value in A into HLU
04005C             0014*   ; affects: HLU
04005C             0015*   ; destroys: nothing
04005C             0016*   ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
04005C             0017*       MACRO A_TO_HLU
04005C             0018*       xor a ; 1 cycle
04005C             0019*       ld ($+8+1),hl ; 7 cycles
04005C             0020*       ld ($+4+3),a ; 5 cycles
04005C             0021*       ld hl,0x000000 ; 4 cycles
04005C             0022*       ; 17 cycles total
04005C             0023*       ENDMACRO
04005C             0024*   
04005C             0025*   ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
04005C             0026*   ; one cycle less but burns flags
04005C             0027*       MACRO A_TO_HLU_ALT
04005C             0028*       push hl ; 4 cycles
04005C             0029*       ld hl,2 ; 4 cycles
04005C             0030*       add hl,sp ; 1 cycle
04005C             0031*       ld (hl),a ; 2 cycles
04005C             0032*       pop hl ; 4 cycles
04005C             0033*       ; 15 cycles total
04005C             0034*       ENDMACRO
04005C             0035*   
04005C             0036*       MACRO hlu_mul256
04005C             0037*       add hl,hl ; * 2
04005C             0038*       add hl,hl ; * 4
04005C             0039*       add hl,hl ; * 8
04005C             0040*       add hl,hl ; * 16
04005C             0041*       add hl,hl ; * 32
04005C             0042*       add hl,hl ; * 64
04005C             0043*       add hl,hl ; * 128
04005C             0044*       add hl,hl ; * 256
04005C             0045*       ENDMACRO
04005C             0046*   
04005C             0047*   ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
04005C             0048*       MACRO SRL_UHL
04005C             0049*       dec sp ; 1 cycle
04005C             0050*       push hl ; 4 cycles
04005C             0051*       inc sp ; 1 cycle
04005C             0052*       pop hl ; 4 cycles
04005C             0053*       inc hl ; 1 cycle
04005C             0054*       dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04005C             0055*       ; 13 cycles total
04005C             0056*       ENDMACRO
04005C             0057*   
04005C             0058*       MACRO printChar char
04005C             0059*       LD A, char
04005C             0060*       RST.LIL 10h
04005C             0061*       ENDMACRO
04005C             0062*   
04005C             0063*   ; Simulated call to subroutine at HL
04005C             0064*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
04005C             0065*   ; outputs: whatever the subroutine does, including HL and BC
04005C             0066*   ; destroys: only what the subroutine does, but always BC
04005C             0067*       MACRO CALL_HL
04005C             0068*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0069*       push bc ; which constitutes the return address
04005C             0070*       jp (hl) ; Jump to the address in HL
04005C             0071*       ENDMACRO
04005C             0072*   
04005C             0073*   ; Simulated call to subroutine at IX
04005C             0074*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
04005C             0075*   ; outputs: whatever the subroutine does, including IX and BC
04005C             0076*   ; destroys: only what the subroutine does, but always BC
04005C             0077*       MACRO CALL_IX
04005C             0078*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0079*       push bc ; which constitutes the return address
04005C             0080*       jp (ix) ; Jump to the address in IX
04005C             0081*       ENDMACRO
04005C             0082*   
04005C             0083*   ; Simulated call to soubroutinte at IY
04005C             0084*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
04005C             0085*   ; outputs: whatever the subroutine does, including IY and BC
04005C             0086*   ; destroys: only what the subroutine does, but always BC
04005C             0087*       MACRO CALL_IY
04005C             0088*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0089*       push bc ; which constitutes the return address
04005C             0090*       jp (iy) ; Jump to the address in IY
04005C             0091*       ENDMACRO
04005C             0092*   
04005C             0093*   ; put the value in HLU into A
04005C             0094*   ; destroys: af
04005C             0095*       MACRO HLU_TO_A
04005C             0096*       dec sp ; 1 cycle
04005C             0097*       push hl ; 4 cycles
04005C             0098*       inc sp ; 1 cycle
04005C             0099*       pop af ; 4 cycles
04005C             0100*       ; 10 cycles total
04005C             0101*       ENDMACRO
04005C             0102*   
04005C             0103*       MACRO PUSH_ALL
04005C             0104*       ex af,af'
04005C             0105*       exx
04005C             0106*       push af
04005C             0107*       push hl
04005C             0108*       push bc
04005C             0109*       push de
04005C             0110*   
04005C             0111*       ex af,af'
04005C             0112*       exx
04005C             0113*       push af
04005C             0114*       push hl
04005C             0115*       push bc
04005C             0116*       push de
04005C             0117*       push ix
04005C             0118*       push iy
04005C             0119*       ENDMACRO
04005C             0120*   
04005C             0121*       MACRO POP_ALL
04005C             0122*       pop iy
04005C             0123*       pop ix
04005C             0124*       pop de
04005C             0125*       pop bc
04005C             0126*       pop hl
04005C             0127*       pop af
04005C             0128*       ex af,af'
04005C             0129*       exx
04005C             0130*   
04005C             0131*       pop de
04005C             0132*       pop bc
04005C             0133*       pop hl
04005C             0134*       pop af
04005C             0135*       ex af,af'
04005C             0136*       exx
04005C             0137*       ENDMACRO
04005C             0031        include "functions.inc"
04005C             0001*   ; Print a zero-terminated string inline with code, e.g.:
04005C             0002*   ;
04005C             0003*   ;    call printInline
04005C             0004*   ;    ASCIZ "Hello, world!\r\n"
04005C             0005*   ;
04005C             0006*   ; Destroys: HL,AF
04005C             0007*   printInline:
04005C E1          0008*       pop hl ; get the return address = pointer to start of string
04005D CD 63 00 04 0009*       call printString ; HL advances to end of string
040061 E5          0010*       push hl ; restore the return address = pointer to end of string
040062 C9          0011*       ret
040063             0012*   
040063             0013*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040063             0014*   ; Print a zero-terminated string
040063             0015*   ; HL: Pointer to string
040063             0016*   printString:
040063 C5          0017*       PUSH BC
040064 01 00 00 00 0018*       LD BC,0
040068 3E 00       0019*       LD A,0
04006A 5B DF       0020*       RST.LIL 18h
04006C C1          0021*       POP BC
04006D C9          0022*       RET
04006E             0023*   ; print a VDU sequence
04006E             0024*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
04006E             0025*   sendVDUsequence:
04006E C5          0026*       PUSH BC
04006F 01 00 00 00 0027*       LD BC, 0
040073 4E          0028*       LD C, (HL)
040074 5B DF       0029*       RST.LIL 18h
040076 C1          0030*       POP BC
040077 C9          0031*       RET
040078             0032*   ; Print Newline sequence to VDP
040078             0033*   ; destroys bc
040078             0034*   printNewLine:
040078 F5          0035*       push af ; for some reason rst.lil 10h sets carry flag
040079 3E 0D       0036*       LD A, '\r'
04007B 5B D7       0037*       RST.LIL 10h
04007D 3E 0A       0038*       LD A, '\n'
04007F 5B D7       0039*       RST.LIL 10h
040081 F1          0040*       pop af
040082 C9          0041*       RET
040083             0042*   
040083             0043*   ; Print a 24-bit HEX number
040083             0044*   ; HLU: Number to print
040083             0045*   printHex24:
040083             0046*       HLU_TO_A
040083 3B          0001*M1     dec sp ; 1 cycle
040084 E5          0002*M1     push hl ; 4 cycles
040085 33          0003*M1     inc sp ; 1 cycle
040086 F1          0004*M1     pop af ; 4 cycles
040087             0005*M1     ; 10 cycles total
040087 CD 91 00 04 0047*       CALL printHex8
04008B             0048*   ; Print a 16-bit HEX number
04008B             0049*   ; HL: Number to print
04008B             0050*   printHex16:
04008B 7C          0051*       LD A,H
04008C CD 91 00 04 0052*       CALL printHex8
040090 7D          0053*       LD A,L
040091             0054*   ; Print an 8-bit HEX number
040091             0055*   ; A: Number to print
040091             0056*   printHex8:
040091 4F          0057*       LD C,A
040092 1F          0058*       RRA
040093 1F          0059*       RRA
040094 1F          0060*       RRA
040095 1F          0061*       RRA
040096 CD 9B 00 04 0062*       CALL @F
04009A 79          0063*       LD A,C
04009B             0064*   @@:
04009B E6 0F       0065*       AND 0Fh
04009D C6 90       0066*       ADD A,90h
04009F 27          0067*       DAA
0400A0 CE 40       0068*       ADC A,40h
0400A2 27          0069*       DAA
0400A3 5B D7       0070*       RST.LIL 10h
0400A5 C9          0071*       RET
0400A6             0072*   
0400A6             0073*   ; Print a 0x HEX prefix
0400A6             0074*   DisplayHexPrefix:
0400A6 3E 30       0075*       LD A, '0'
0400A8 5B D7       0076*       RST.LIL 10h
0400AA 3E 78       0077*       LD A, 'x'
0400AC 5B D7       0078*       RST.LIL 10h
0400AE C9          0079*       RET
0400AF             0080*   
0400AF             0081*       MACRO printDecBC
0400AF             0082*       push hl
0400AF             0083*       push bc
0400AF             0084*       pop hl
0400AF             0085*       call printDec
0400AF             0086*       pop hl
0400AF             0087*       ENDMACRO
0400AF             0088*   
0400AF             0089*       MACRO printDecDE
0400AF             0090*       push hl
0400AF             0091*       push de
0400AF             0092*       pop hl
0400AF             0093*       call printDec
0400AF             0094*       pop hl
0400AF             0095*       ENDMACRO
0400AF             0096*   
0400AF             0097*       MACRO printDecHL
0400AF             0098*       call printDec
0400AF             0099*       ENDMACRO
0400AF             0100*   
0400AF             0101*       MACRO printDecIX
0400AF             0102*       push hl
0400AF             0103*       push ix
0400AF             0104*       pop hl
0400AF             0105*       call printDec
0400AF             0106*       pop hl
0400AF             0107*       ENDMACRO
0400AF             0108*   
0400AF             0109*       MACRO printDecIY
0400AF             0110*       push hl
0400AF             0111*       push iy
0400AF             0112*       pop hl
0400AF             0113*       call printDec
0400AF             0114*       pop hl
0400AF             0115*       ENDMACRO
0400AF             0116*   
0400AF             0117*   
0400AF             0118*   ; Prints the right justified decimal value in HL without leading zeroes
0400AF             0119*   ; HL : Value to print
0400AF             0120*   ; preserves all registers and flags
0400AF             0121*   printDec:
0400AF             0122*   ; BEGIN MY CODE
0400AF             0123*   ; back up all the things
0400AF F5          0124*       push af
0400B0 C5          0125*       push bc
0400B1 D5          0126*       push de
0400B2 E5          0127*       push hl
0400B3             0128*   ; END MY CODE
0400B3 11 DB 00 04 0129*       LD DE, _printDecBuffer
0400B7 CD EB 00 04 0130*       CALL u24_to_ascii
0400BB             0131*   ; BEGIN MY CODE
0400BB             0132*   ; replace leading zeroes with spaces
0400BB 21 DB 00 04 0133*       LD HL, _printDecBuffer
0400BF 06 07       0134*       ld B, 7 ; if HL was 0, we want to keep the final zero
0400C1             0135*   @loop:
0400C1 7E          0136*       LD A, (HL)
0400C2 FE 30       0137*       CP '0'
0400C4 C2 CE 00 04 0138*       JP NZ, @done
0400C8 3E 20       0139*       LD A, ' '
0400CA 77          0140*       LD (HL), A
0400CB 23          0141*       INC HL
0400CC             0142*       ; CALL vdu_cursor_forward
0400CC 10 F3       0143*       DJNZ @loop
0400CE             0144*   @done:
0400CE             0145*   ; END MY CODE
0400CE 21 DB 00 04 0146*       LD HL, _printDecBuffer
0400D2 CD 63 00 04 0147*       CALL printString
0400D6             0148*   ; BEGIN MY CODE
0400D6             0149*   ; restore all the things
0400D6 E1          0150*       pop hl
0400D7 D1          0151*       pop de
0400D8 C1          0152*       pop bc
0400D9 F1          0153*       pop af
0400DA             0154*   ; END MY CODE
0400DA C9          0155*       RET
0400DB 00 00 00 00 0156*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0400EB             0157*   
0400EB             0158*   ; This routine converts the unsigned 24-bit value in HLU into its ASCII representation,
0400EB             0159*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0400EB             0160*   ; so it will allways be 8 characters length
0400EB             0161*   ; HL : Value to convert to string
0400EB             0162*   ; DE : pointer to buffer, at least 8 byte + 0
0400EB             0163*   u24_to_ascii:
0400EB 01 80 69 67 0164*       LD BC,-10000000
0400EF CD 22 01 04 0165*       CALL @one_digit
0400F3 01 C0 BD F0 0166*       LD BC,-1000000
0400F7 CD 22 01 04 0167*       CALL @one_digit
0400FB 01 60 79 FE 0168*       LD BC,-100000
0400FF CD 22 01 04 0169*       CALL @one_digit
040103 01 F0 D8 FF 0170*       LD BC,-10000
040107 CD 22 01 04 0171*       CALL @one_digit
04010B 01 18 FC FF 0172*       LD BC,-1000
04010F CD 22 01 04 0173*       CALL @one_digit
040113 01 9C FF FF 0174*       LD BC,-100
040117 CD 22 01 04 0175*       CALL @one_digit
04011B 0E F6       0176*       LD C,-10
04011D CD 22 01 04 0177*       CALL @one_digit
040121 48          0178*       LD C,B
040122             0179*   @one_digit:
040122 3E 2F       0180*       LD A,'0'-1
040124             0181*   @divide_me:
040124 3C          0182*       INC A
040125 09          0183*       ADD HL,BC
040126 38 FC       0184*       JR C,@divide_me
040128 ED 42       0185*       SBC HL,BC
04012A 12          0186*       LD (DE),A
04012B 13          0187*       INC DE
04012C C9          0188*       RET
04012D             0189*   
04012D             0190*   print_u24:
04012D D5          0191*       push de
04012E E5          0192*       push hl
04012F 11 DB 00 04 0193*       ld de,_printDecBuffer
040133 CD EB 00 04 0194*       call u24_to_ascii
040137 21 DB 00 04 0195*       ld hl,_printDecBuffer
04013B CD 63 00 04 0196*       call printString
04013F 3E 20       0197*       ld a,' '
040141 5B D7       0198*       rst.lil 10h
040143 E1          0199*       pop hl
040144 D1          0200*       pop de
040145 C9          0201*       ret
040146             0202*   
040146             0203*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
040146             0204*   ; HL : Value to convert to string (integer part in H, fractional part in L)
040146             0205*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
040146             0206*   u168_to_ascii:
040146             0207*   ; add a leading space to make room for sign flag if needed
040146 3E 20       0208*       ld a,' '
040148 12          0209*       ld (de),a
040149 13          0210*       inc de
04014A             0211*   ; Convert integer part
04014A E5          0212*       push hl ; Save HL (we’ll need the fractional part later)
04014B             0213*       ; call hlu_udiv256 ; Shift to get integer portion in HL
04014B             0214*       SRL_UHL ; Shift to get integer portion in HL
04014B 3B          0001*M1     dec sp ; 1 cycle
04014C E5          0002*M1     push hl ; 4 cycles
04014D 33          0003*M1     inc sp ; 1 cycle
04014E E1          0004*M1     pop hl ; 4 cycles
04014F 23          0005*M1     inc hl ; 1 cycle
040150 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040152             0007*M1     ; 13 cycles total
040152 01 F0 D8 FF 0215*       ld bc, -10000
040156 CD 79 01 04 0216*       call @one_int
04015A 01 18 FC FF 0217*       ld bc, -1000
04015E CD 79 01 04 0218*       call @one_int
040162 01 9C FF FF 0219*       ld bc, -100
040166 CD 79 01 04 0220*       call @one_int
04016A 0E F6       0221*       ld c, -10
04016C CD 79 01 04 0222*       call @one_int
040170 48          0223*       ld c, b
040171 CD 79 01 04 0224*       call @one_int
040175 C3 84 01 04 0225*       jp @frac ; Jump to fractional part conversion
040179             0226*   @one_int:
040179 3E 2F       0227*       ld a, '0' - 1 ; Start ASCII character at '0'
04017B             0228*   @divide_me:
04017B 3C          0229*       inc a
04017C 09          0230*       add hl, bc ; Accumulate until overflow
04017D 38 FC       0231*       jr c, @divide_me
04017F ED 42       0232*       sbc hl, bc ; Remove excess after overflow
040181 12          0233*       ld (de), a ; Store ASCII digit
040182 13          0234*       inc de
040183 C9          0235*       ret
040184             0236*   ; Convert fractional part
040184             0237*   @frac:
040184 3E 2E       0238*       ld a, '.' ; Decimal point
040186 12          0239*       ld (de), a
040187 13          0240*       inc de
040188 E1          0241*       pop hl ; Restore HL with original fraction
040189 06 03       0242*       ld b, 3 ; Loop counter for 3 fractional digits
04018B             0243*   @frac_loop:
04018B 26 0A       0244*       ld h, 10 ; Load multiplier for fractional part
04018D ED 6C       0245*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
04018F 3E 30       0246*       ld a, '0'
040191 84          0247*       add a, h ; Convert integer part to ASCII
040192 12          0248*       ld (de), a
040193 13          0249*       inc de
040194 10 F5       0250*       djnz @frac_loop ; Repeat for each fractional digit
040196             0251*   ; Add null terminator
040196 AF          0252*       xor a ; Null terminator
040197 12          0253*       ld (de), a
040198 C9          0254*       ret
040199             0255*   
040199             0256*   print_u168:
040199 D5          0257*       push de
04019A E5          0258*       push hl
04019B 11 DB 00 04 0259*       ld de,_printDecBuffer
04019F CD 46 01 04 0260*       call u168_to_ascii
0401A3 21 DB 00 04 0261*       ld hl,_printDecBuffer
0401A7 CD 63 00 04 0262*       call printString
0401AB E1          0263*       pop hl
0401AC D1          0264*       pop de
0401AD C9          0265*       ret
0401AE             0266*   
0401AE             0267*   ; signed version of u168_to_ascii
0401AE             0268*   s168_to_ascii:
0401AE D5          0269*       push de ; save starting address of buffer
0401AF CD 53 04 04 0270*       call hlu_abs
0401B3 F5          0271*       push af ; save sign flag
0401B4 CD 46 01 04 0272*       call u168_to_ascii
0401B8 F1          0273*       pop af ; restore sign flag
0401B9 D1          0274*       pop de ; restore starting address of buffer
0401BA F0          0275*       ret p ; hlu was positive so nothing to do
0401BB 3E 2D       0276*       ld a,'-'
0401BD 12          0277*       ld (de),a
0401BE C9          0278*       ret
0401BF             0279*   
0401BF             0280*   print_s168:
0401BF D5          0281*       push de
0401C0 E5          0282*       push hl
0401C1 11 DB 00 04 0283*       ld de,_printDecBuffer
0401C5 CD AE 01 04 0284*       call s168_to_ascii
0401C9 21 DB 00 04 0285*       ld hl,_printDecBuffer
0401CD CD 63 00 04 0286*       call printString
0401D1 E1          0287*       pop hl
0401D2 D1          0288*       pop de
0401D3 C9          0289*       ret
0401D4             0290*   
0401D4             0291*   print_s168_hl:
0401D4 F5          0292*       push af
0401D5 E5          0293*       push hl
0401D6 CD BF 01 04 0294*       call print_s168
0401DA 3E 20       0295*       ld a,' '
0401DC 5B D7       0296*       rst.lil 10h
0401DE E1          0297*       pop hl
0401DF F1          0298*       pop af
0401E0 C9          0299*       ret
0401E1             0300*   
0401E1             0301*   print_s168_bc:
0401E1 F5          0302*       push af
0401E2 C5          0303*       push bc
0401E3 E5          0304*       push hl
0401E4 C5          0305*       push bc
0401E5 E1          0306*       pop hl
0401E6 CD BF 01 04 0307*       call print_s168
0401EA 3E 20       0308*       ld a,' '
0401EC 5B D7       0309*       rst.lil 10h
0401EE E1          0310*       pop hl
0401EF C1          0311*       pop bc
0401F0 F1          0312*       pop af
0401F1 C9          0313*       ret
0401F2             0314*   
0401F2             0315*   print_s168_de:
0401F2 F5          0316*       push af
0401F3 D5          0317*       push de
0401F4 E5          0318*       push hl
0401F5 EB          0319*       ex de,hl
0401F6 CD BF 01 04 0320*       call print_s168
0401FA 3E 20       0321*       ld a,' '
0401FC 5B D7       0322*       rst.lil 10h
0401FE E1          0323*       pop hl
0401FF D1          0324*       pop de
040200 F1          0325*       pop af
040201 C9          0326*       ret
040202             0327*   
040202             0328*   print_s168_hl_bc_de:
040202 F5          0329*       push af
040203 C5          0330*       push bc
040204 D5          0331*       push de
040205 E5          0332*       push hl
040206 CD BF 01 04 0333*       call print_s168
04020A 3E 20       0334*       ld a,' '
04020C 5B D7       0335*       rst.lil 10h
04020E C5          0336*       push bc
04020F E1          0337*       pop hl
040210 CD BF 01 04 0338*       call print_s168
040214 3E 20       0339*       ld a,' '
040216 5B D7       0340*       rst.lil 10h
040218 EB          0341*       ex de,hl
040219 CD BF 01 04 0342*       call print_s168
04021D 3E 20       0343*       ld a,' '
04021F 5B D7       0344*       rst.lil 10h
040221 E1          0345*       pop hl
040222 D1          0346*       pop de
040223 C1          0347*       pop bc
040224 F1          0348*       pop af
040225 C9          0349*       ret
040226             0350*   
040226             0351*   print_s168_bc_de:
040226 F5          0352*       push af
040227 C5          0353*       push bc
040228 D5          0354*       push de
040229 C5          0355*       push bc
04022A E1          0356*       pop hl
04022B CD BF 01 04 0357*       call print_s168
04022F 3E 20       0358*       ld a,' '
040231 5B D7       0359*       rst.lil 10h
040233 EB          0360*       ex de,hl
040234 CD BF 01 04 0361*       call print_s168
040238 3E 20       0362*       ld a,' '
04023A 5B D7       0363*       rst.lil 10h
04023C E1          0364*       pop hl
04023D D1          0365*       pop de
04023E C1          0366*       pop bc
04023F F1          0367*       pop af
040240 C9          0368*       ret
040241             0369*   
040241             0370*   print_s168_a:
040241 F5          0371*       push af
040242 C5          0372*       push bc
040243 E5          0373*       push hl
040244 21 00 00 00 0374*       ld hl,0
040248 6F          0375*       ld l,a
040249 CD D4 01 04 0376*       call print_s168_hl
04024D E1          0377*       pop hl
04024E C1          0378*       pop bc
04024F F1          0379*       pop af
040250 C9          0380*       ret
040251             0381*   
040251             0382*   ; #### new functions added by Brandon R. Gates ####
040251             0383*   
040251             0384*   ; print the binary representation of the 8-bit value in a
040251             0385*   ; destroys a, hl, bc
040251             0386*   printBin8:
040251 06 08       0387*       ld b,8 ; loop counter for 8 bits
040253 21 6E 02 04 0388*       ld hl,@cmd ; set hl to the low byte of the output string
040257             0389*       ; (which will be the high bit of the value in a)
040257             0390*   @loop:
040257 07          0391*       rlca ; put the next highest bit into carry
040258 38 04       0392*       jr c,@one
04025A 36 30       0393*       ld (hl),'0'
04025C 18 02       0394*       jr @next_bit
04025E             0395*   @one:
04025E 36 31       0396*       ld (hl),'1'
040260             0397*   @next_bit:
040260 23          0398*       inc hl
040261 10 F4       0399*       djnz @loop
040263             0400*   ; print it
040263 21 6E 02 04 0401*       ld hl,@cmd
040267 01 08 00 00 0402*       ld bc,@end-@cmd
04026B 5B DF       0403*       rst.lil $18
04026D C9          0404*       ret
04026E             0405*   @cmd: ds 8 ; eight bytes for eight bits
040276             0406*   @end:
040276             0407*   
040276             0408*   ; print the binary representation of the 8-bit value in a
040276             0409*   ; in reverse order (lsb first)
040276             0410*   ; destroys a, hl, bc
040276             0411*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
040276 06 08       0412*       ld b,8 ; loop counter for 8 bits
040278 21 93 02 04 0413*       ld hl,@cmd ; set hl to the low byte of the output string
04027C             0414*       ; (which will be the high bit of the value in a)
04027C             0415*   @loop:
04027C 0F          0416*       rrca ; put the next lowest bit into carry
04027D 38 04       0417*       jr c,@one
04027F 36 30       0418*       ld (hl),'0'
040281 18 02       0419*       jr @next_bit
040283             0420*   @one:
040283 36 31       0421*       ld (hl),'1'
040285             0422*   @next_bit:
040285 23          0423*       inc hl
040286 10 F4       0424*       djnz @loop
040288             0425*   ; print it
040288 21 93 02 04 0426*       ld hl,@cmd
04028C 01 08 00 00 0427*       ld bc,@end-@cmd
040290 5B DF       0428*       rst.lil $18
040292 C9          0429*       ret
040293             0430*   @cmd: ds 8 ; eight bytes for eight bits
04029B             0431*   @end:
04029B             0432*   
       FF FF FF FF 
       FF FF FF FF 
04029B 20 61 66 3D 0433*   str_afu: db " af=",0
       00          
0402A0 20 68 6C 3D 0434*   str_hlu: db " hl=",0
       00          
0402A5 20 62 63 3D 0435*   str_bcu: db " bc=",0
       00          
0402AA 20 64 65 3D 0436*   str_deu: db " de=",0
       00          
0402AF 20 69 78 3D 0437*   str_ixu: db " ix=",0
       00          
0402B4 20 69 79 3D 0438*   str_iyu: db " iy=",0
       00          
0402B9             0439*   
0402B9             0440*   ; print udeuhl to screen in hexidecimal format
0402B9             0441*   ; inputs: none
0402B9             0442*   ; outputs: concatenated hexidecimal udeuhl
0402B9             0443*   ; destroys: nothing
0402B9             0444*   dumpUDEUHLHex:
0402B9             0445*   ; store everything in scratch
0402B9 22 18 03 04 0446*       ld (uhl),hl
0402BD ED 43 1B 03 0447*       ld (ubc),bc
       04          
0402C2 ED 53 1E 03 0448*       ld (ude),de
       04          
0402C7 DD 22 21 03 0449*       ld (uix),ix
       04          
0402CC FD 22 24 03 0450*       ld (uiy),iy
       04          
0402D1 F5          0451*       push af
0402D2             0452*   
0402D2             0453*   ; print each register
0402D2             0454*   
0402D2 21 0C 03 04 0455*       ld hl,str_udeuhl
0402D6 CD 63 00 04 0456*       call printString
0402DA 2A 1E 03 04 0457*       ld hl,(ude)
0402DE CD 83 00 04 0458*       call printHex24
0402E2 3E 2E       0459*       ld a,'.' ; print a dot to separate the values
0402E4 5B D7       0460*       rst.lil 10h
0402E6 2A 18 03 04 0461*       ld hl,(uhl)
0402EA CD 83 00 04 0462*       call printHex24
0402EE CD 78 00 04 0463*       call printNewLine
0402F2             0464*   
0402F2             0465*   ; restore everything
0402F2 2A 18 03 04 0466*       ld hl, (uhl)
0402F6 ED 4B 1B 03 0467*       ld bc, (ubc)
       04          
0402FB ED 5B 1E 03 0468*       ld de, (ude)
       04          
040300 DD 2A 21 03 0469*       ld ix, (uix)
       04          
040305 FD 2A 24 03 0470*       ld iy, (uiy)
       04          
04030A F1          0471*       pop af
04030B             0472*   ; all done
04030B C9          0473*       ret
04030C             0474*   
04030C 75 64 65 2E 0475*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
040315             0476*   
040315             0477*   ; global scratch memory for registers
040315 00 00 00    0478*   uaf: dl 0
040318 00 00 00    0479*   uhl: dl 0
04031B 00 00 00    0480*   ubc: dl 0
04031E 00 00 00    0481*   ude: dl 0
040321 00 00 00    0482*   uix: dl 0
040324 00 00 00    0483*   uiy: dl 0
040327 00 00 00    0484*   usp: dl 0
04032A 00 00 00    0485*   upc: dl 0
04032D             0486*   
04032D             0487*   
04032D             0488*   ; set all the bits in the flag register
04032D             0489*   ; more of an academic exercise than anything useful
04032D             0490*   ; inputs; none
04032D             0491*   ; outputs; a=0,f=255
04032D             0492*   ; destroys: flags, hl
04032D             0493*   ; preserves: a, because why not
04032D             0494*   setAllFlags:
04032D 21 FF 00 00 0495*       ld hl,255
040331 67          0496*       ld h,a ; four cycles to preserve a is cheap
040332 E5          0497*       push hl
040333 F1          0498*       pop af
040334 C9          0499*       ret
040335             0500*   
040335             0501*   ; reset all the bits in the flag register
040335             0502*   ; unlike its inverse counterpart, this may actually be useful
040335             0503*   ; inputs; none
040335             0504*   ; outputs; a=0,f=0
040335             0505*   ; destroys: flags, hl
040335             0506*   ; preserves: a, because why not
040335             0507*   resetAllFlags:
040335 21 00 00 00 0508*       ld hl,0
040339 67          0509*       ld h,a ; four cycles to preserve a is cheap
04033A E5          0510*       push hl
04033B F1          0511*       pop af
04033C C9          0512*       ret
04033D             0513*   
04033D             0514*   ; wait until user presses a key
04033D             0515*   ; inputs: none
04033D             0516*   ; outputs: ascii code of key pressed in a
04033D             0517*   ; destroys: af,ix
04033D             0518*   waitKeypress:
04033D             0519*       MOSCALL mos_getkey
04033D 3E 00       0001*M1 			LD	A, function
04033F 5B CF       0002*M1 			RST.LIL	08h
040341 C9          0520*       ret
040342             0521*   
040342             0522*   ; clear a block of memory by writing a prescribed value to each byte in the range
040342             0523*   ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
040342             0524*   ; outputs: memory block is cleared
040342             0525*   ; destroys: hl, de
040342             0526*   clear_mem:
040342 0B          0527*       dec bc ; we do this because we will increment de before writing the first byte
040343 77          0528*       ld (hl),a
040344 E5          0529*       push hl
040345 D1          0530*       pop de
040346 13          0531*       inc de ; target address
040347 ED B0       0532*       ldir
040349 C9          0533*       ret
04034A             0032        include "arith24.inc"
04034A             0001*   ;------------------------------------------------------------------------
04034A             0002*   ;  arith24.asm
04034A             0003*   ;  24-bit ez80 arithmetic routines
04034A             0004*   ;  Copyright (c) Shawn Sijnstra 2024
04034A             0005*   ;  MIT license
04034A             0006*   ;
04034A             0007*   ;  This library was created as a tool to help make ez80
04034A             0008*   ;  24-bit native assembly routines for simple mathematical problems
04034A             0009*   ;  more widely available.
04034A             0010*   ;
04034A             0011*   ;------------------------------------------------------------------------
04034A             0012*   
04034A             0013*   ;------------------------------------------------------------------------
04034A             0014*   ; umul24:	HL = HL*DE (unsigned)
04034A             0015*   ; Preserves AF, BC, DE
04034A             0016*   ; Uses a fast multiply routine.
04034A             0017*   ;------------------------------------------------------------------------
04034A             0018*   umul24:
04034A D5          0019*   	push	DE
04034B C5          0020*   	push	BC
04034C F5          0021*   	push	AF
04034D E5          0022*   	push	HL
04034E C1          0023*   	pop		BC
04034F 3E 18       0024*       ld	 	a, 24 ; No. of bits to process
040351 21 00 00 00 0025*       ld	 	hl, 0 ; Result
040355             0026*   umul24_lp:
040355 29          0027*   	add	hl,hl
040356 EB          0028*   	ex	de,hl
040357 29          0029*   	add	hl,hl
040358 EB          0030*   	ex	de,hl
040359 30 01       0031*   	jr	nc,umul24_nc
04035B 09          0032*   	add	hl,bc
04035C             0033*   umul24_nc:
04035C 3D          0034*   	dec	a
04035D 20 F6       0035*   	jr	nz,umul24_lp
04035F F1          0036*   	pop	af
040360 C1          0037*   	pop	bc
040361 D1          0038*   	pop	de
040362 C9          0039*   	ret
040363             0040*   
040363             0041*   
040363             0042*   ;------------------------------------------------------------------------
040363             0043*   ; udiv24
040363             0044*   ; Unsigned 24-bit division
040363             0045*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
040363             0046*   ;
040363             0047*   ; Uses AF BC DE HL
040363             0048*   ; Uses Restoring Division algorithm
040363             0049*   ;------------------------------------------------------------------------
040363             0050*   
040363             0051*   udiv24:
040363 E5          0052*   	push	hl
040364 C1          0053*   	pop		bc	;move dividend to BCU
040365 21 00 00 00 0054*   	ld		hl,0	;result
040369 A7          0055*   	and		a
04036A ED 52       0056*   	sbc		hl,de	;test for div by 0
04036C C8          0057*   	ret		z		;it's zero, carry flag is clear
04036D 19          0058*   	add		hl,de	;HL is 0 again
04036E 3E 18       0059*   	ld		a,24	;number of loops through.
040370             0060*   udiv1:
040370 C5          0061*   	push	bc	;complicated way of doing this because of lack of access to top bits
040371 E3          0062*   	ex		(sp),hl
040372 37          0063*   	scf
040373 ED 6A       0064*   	adc	hl,hl
040375 E3          0065*   	ex	(sp),hl
040376 C1          0066*   	pop	bc		;we now have bc = (bc * 2) + 1
040377             0067*   
040377 ED 6A       0068*   	adc	hl,hl
040379 A7          0069*   	and	a		;is this the bug
04037A ED 52       0070*   	sbc	hl,de
04037C 30 02       0071*   	jr	nc,udiv2
04037E 19          0072*   	add	hl,de
04037F             0073*   ;	dec	c
04037F 0B          0074*   	dec	bc
040380             0075*   udiv2:
040380 3D          0076*   	dec	a
040381 20 ED       0077*   	jr	nz,udiv1
040383 37          0078*   	scf		;flag used for div0 error
040384 C5          0079*   	push	bc
040385 D1          0080*   	pop		de	;remainder
040386 C9          0081*   	ret
040387             0082*   
040387             0083*   
040387             0084*   
040387             0085*   ;------------------------------------------------------------------------
040387             0086*   ; neg24
040387             0087*   ; Returns: HLU = 0-HLU
040387             0088*   ; preserves all other registers
040387             0089*   ;------------------------------------------------------------------------
040387             0090*   neg24:
040387 D5          0091*   	push	de
040388 EB          0092*   	ex		de,hl
040389 21 00 00 00 0093*   	ld		hl,0
04038D B7          0094*   	or		a
04038E ED 52       0095*   	sbc		hl,de
040390 D1          0096*   	pop		de
040391 C9          0097*   	ret
040392             0098*   
040392             0099*   ;------------------------------------------------------------------------
040392             0100*   ; or_hlu_deu: 24 bit bitwise OR
040392             0101*   ; Returns: hlu = hlu OR deu
040392             0102*   ; preserves all other registers
040392             0103*   ;------------------------------------------------------------------------
040392             0104*   or_hlu_deu:
040392 22 1B 04 04 0105*   	ld	(bitbuf1),hl
040396 ED 53 1E 04 0106*   	ld	(bitbuf2),de
       04          
04039B D5          0107*   	push	de	;preserve DEU
04039C C5          0108*   	push	bc	;preserve BCU
04039D 06 03       0109*   	ld		b,3
04039F 21 1B 04 04 0110*   	ld	hl,bitbuf1
0403A3 11 1B 04 04 0111*   	ld	de,bitbuf1
0403A7             0112*   orloop_24:
0403A7 1A          0113*   	ld	a,(de)
0403A8 B6          0114*   	or	(hl)
0403A9 12          0115*   	ld	(de),a
0403AA 13          0116*   	inc	de
0403AB 23          0117*   	inc	hl
0403AC 10 F9       0118*   	djnz	orloop_24
0403AE 2A 1E 04 04 0119*   	ld	hl,(bitbuf2)
0403B2 C1          0120*   	pop		bc	;restore BC
0403B3 D1          0121*   	pop		de	;restore DE
0403B4             0122*   
0403B4             0123*   ;------------------------------------------------------------------------
0403B4             0124*   ; and_hlu_deu: 24 bit bitwise AND
0403B4             0125*   ; Returns: hlu = hlu AND deu
0403B4             0126*   ; preserves all other registers
0403B4             0127*   ;------------------------------------------------------------------------
0403B4             0128*   and_hlu_deu:
0403B4 22 1B 04 04 0129*   	ld	(bitbuf1),hl
0403B8 ED 53 1E 04 0130*   	ld	(bitbuf2),de
       04          
0403BD D5          0131*   	push	de	;preserve DEU
0403BE C5          0132*   	push	bc	;preserve BCU
0403BF 06 03       0133*   	ld		b,3
0403C1 21 1B 04 04 0134*   	ld	hl,bitbuf1
0403C5 11 1B 04 04 0135*   	ld	de,bitbuf1
0403C9             0136*   andloop_24:
0403C9 1A          0137*   	ld	a,(de)
0403CA A6          0138*   	and	(hl)
0403CB 12          0139*   	ld	(de),a
0403CC 13          0140*   	inc	de
0403CD 23          0141*   	inc	hl
0403CE 10 F9       0142*   	djnz	andloop_24
0403D0 2A 1E 04 04 0143*   	ld	hl,(bitbuf2)
0403D4 C1          0144*   	pop		bc	;restore BC
0403D5 D1          0145*   	pop		de	;restore DE
0403D6             0146*   
0403D6             0147*   ;------------------------------------------------------------------------
0403D6             0148*   ; xor_hlu_deu: 24 bit bitwise XOR
0403D6             0149*   ; Returns: hlu = hlu XOR deu
0403D6             0150*   ; preserves all other registers
0403D6             0151*   ;------------------------------------------------------------------------
0403D6             0152*   xor_hlu_deu:
0403D6 22 1B 04 04 0153*   	ld	(bitbuf1),hl
0403DA ED 53 1E 04 0154*   	ld	(bitbuf2),de
       04          
0403DF D5          0155*   	push	de	;preserve DEU
0403E0 C5          0156*   	push	bc	;preserve BCU
0403E1 06 03       0157*   	ld		b,3
0403E3 21 1B 04 04 0158*   	ld	hl,bitbuf1
0403E7 11 1B 04 04 0159*   	ld	de,bitbuf1
0403EB             0160*   xorloop_24:
0403EB 1A          0161*   	ld	a,(de)
0403EC AE          0162*   	xor	(hl)
0403ED 12          0163*   	ld	(de),a
0403EE 13          0164*   	inc	de
0403EF 23          0165*   	inc	hl
0403F0 10 F9       0166*   	djnz	xorloop_24
0403F2 2A 1E 04 04 0167*   	ld	hl,(bitbuf2)
0403F6 C1          0168*   	pop		bc	;restore BC
0403F7 D1          0169*   	pop		de	;restore DE
0403F8             0170*   
0403F8             0171*   ;------------------------------------------------------------------------
0403F8             0172*   ; shl_hlu: 24 bit shift left hlu by a positions
0403F8             0173*   ; Returns: hlu = hlu << a
0403F8             0174*   ;		   a = 0
0403F8             0175*   ; NOTE: only considers a up to 16 bits.
0403F8             0176*   ; preserves all other registers
0403F8             0177*   ; modified by Brandon R. Gates to use a instead of de
0403F8             0178*   ;------------------------------------------------------------------------
0403F8             0179*   shl_hlu:
0403F8 B7          0180*   	or a
0403F9 C8          0181*   	ret		z		;we're done
0403FA 29          0182*   	add		hl,hl	;shift HLU left
0403FB 3D          0183*   	dec a
0403FC 18 FA       0184*   	jr		shl_hlu
0403FE             0185*   
0403FE             0186*   ;------------------------------------------------------------------------
0403FE             0187*   ; shr_hlu: 24 bit shift right hlu by a positions
0403FE             0188*   ; Returns: hlu = hlu >> a
0403FE             0189*   ;		   a = 0
0403FE             0190*   ; NOTE: only considers a up to 16 bits.
0403FE             0191*   ; preserves all other registers
0403FE             0192*   ; modified by Brandon R. Gates to use a instead of de
0403FE             0193*   ;------------------------------------------------------------------------
0403FE             0194*   shr_hlu:
0403FE 22 1B 04 04 0195*   	ld		(bitbuf1),hl
040402 21 1D 04 04 0196*   	ld		hl,bitbuf1+2
040406             0197*   @shr_loop:
040406 B7          0198*   	or a
040407 28 0D       0199*   	jr		z,@shr_done		;we're done
040409             0200*   ;carry is clear from or instruction
040409 CB 1E       0201*   	rr		(hl)
04040B 2B          0202*   	dec		hl
04040C CB 1E       0203*   	rr		(hl)
04040E 2B          0204*   	dec		hl
04040F CB 1E       0205*   	rr		(hl)
040411 23          0206*   	inc		hl
040412 23          0207*   	inc		hl
040413 3D          0208*   	dec a
040414 18 F0       0209*   	jr		@shr_loop
040416             0210*   @shr_done:
040416 2A 1B 04 04 0211*   	ld		hl,(bitbuf1)	;collect result
04041A C9          0212*   	ret
04041B             0213*   
04041B             0214*   ;------------------------------------------------------------------------
04041B             0215*   ; Scratch area for calculations
04041B             0216*   ;------------------------------------------------------------------------
04041B 00 00 00    0217*   bitbuf1:	dw24	0	;bit manipulation buffer 1
04041E 00 00 00    0218*   bitbuf2:	dw24	0	;bit manipulation buffer 2
040421             0219*   
040421             0220*   ; -----------------------------------------------------------------------
040421             0221*   ; Functions added by Brandon R. Gates
040421             0222*   ; -----------------------------------------------------------------------
040421             0223*   
040421             0224*   ;------------------------------------------------------------------------
040421             0225*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
040421             0226*   ;              Determines the LSB of A and shifts HLU accordingly.
040421             0227*   ;              HLU = HLU >> LSB(A)
040421             0228*   ; Returns: HLU = HLU >> LSB(A)
040421             0229*   ; Destroys: af
040421             0230*   ;------------------------------------------------------------------------
040421             0231*   shr_hlu_log2a:
040421 B7          0232*   	or a    ; check for zero
040422 C8          0233*   	ret z   ; nothing to shift so we're done
040423 C5          0234*   	push 	bc ; preserve
040424 06 00       0235*   	ld		b,0 ; clear b
040426             0236*   @find_bit:
040426 0F          0237*   	rrca ; bit 0 to carry
040427 DA 30 04 04 0238*   	jp c,@found_bit
04042B 04          0239*   	inc b ; next bit
04042C C3 26 04 04 0240*   	jp @find_bit
040430             0241*   @found_bit:
040430 78          0242*   	ld a,b
040431 CD FE 03 04 0243*   	call shr_hlu
040435 C1          0244*   	pop 	bc ; restore
040436 C9          0245*   	ret
040437             0246*   ; end shr_hlu_log2a
040437             0247*   
040437             0248*   ;------------------------------------------------------------------------
040437             0249*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040437             0250*   ;                Determines the LSB of A and shifts HLU accordingly.
040437             0251*   ;                HLU = HLU << LSB(A)
040437             0252*   ; Returns: HLU = HLU << LSB(A)
040437             0253*   ; Destroys: af
040437             0254*   ;------------------------------------------------------------------------
040437             0255*   shl_hlu_log2a:
040437 B7          0256*   	or a    ; check for zero
040438 C8          0257*   	ret z   ; nothing to shift so we're done
040439 C5          0258*   	push 	bc ; preserve
04043A 06 00       0259*   	ld		b,0 ; clear b
04043C             0260*   @find_bit:
04043C 0F          0261*   	rrca ; bit 0 to carry
04043D DA 46 04 04 0262*   	jp c,@found_bit
040441 04          0263*   	inc b ; next bit
040442 C3 3C 04 04 0264*   	jp @find_bit
040446             0265*   @found_bit:
040446 78          0266*   	ld a,b
040447 CD F8 03 04 0267*   	call shl_hlu
04044B C1          0268*   	pop 	bc ; restore
04044C C9          0269*   	ret
04044D             0270*   ; end shl_hlu_log2a
04044D             0033        include "maths.inc"
04044D             0001*   ;------------------------------------------------------------------------
04044D             0002*   ; Scratch area for calculations
04044D             0003*   ;------------------------------------------------------------------------
04044D 00 00 00    0004*   scratch1: dw24 0 ;bit manipulation buffer 1
040450 00 00 00    0005*   scratch2: dw24 0 ;bit manipulation buffer 2
040453             0006*   
040453             0007*   ; absolute value of hlu
040453             0008*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040453             0009*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040453             0010*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040453             0011*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040453             0012*   ; destroys: a
040453             0013*   hlu_abs:
040453 19          0014*       add hl,de
040454 B7          0015*       or a
040455 ED 52       0016*       sbc hl,de
040457 FA 5C 04 04 0017*       jp m,@is_neg
04045B C9          0018*       ret ; hlu is positive or zero so we're done
04045C             0019*   @is_neg:
04045C F5          0020*       push af ; otherwise, save current flags for return
04045D CD 63 04 04 0021*       call neg_hlu ; negate hlu
040461 F1          0022*       pop af ; get back flags
040462 C9          0023*       ret
040463             0024*   
040463             0025*   ; flip the sign of hlu
040463             0026*   ; inputs: hlu
040463             0027*   ; returns: 0-hlu, flags set appropriately for the result:
040463             0028*   ;         s1,z0,pv0,n1,c1 if result is negative
040463             0029*   ;         s0,z1,pv0,n1,c0 if result is zero
040463             0030*   ;         s0,z0,pv0,n1,c1 if result is positive
040463             0031*   ; destroys a
040463             0032*   neg_hlu:
040463 D5          0033*       push de ; save de
040464 EB          0034*       ex de,hl ; put hl into de
040465 21 00 00 00 0035*       ld hl,0 ; clear hl
040469 AF          0036*       xor a ; clear carry
04046A ED 52       0037*       sbc hl,de ; 0-hlu = -hlu
04046C D1          0038*       pop de ; get de back
04046D C9          0039*       ret ; easy peasy
04046E             0040*   
04046E             0041*   ;------------------------------------------------------------------------
04046E             0042*   ; divide hlu by 2, inspired by above
04046E             0043*   ;------------------------------------------------------------------------
04046E             0044*   hlu_div2:
04046E 22 4D 04 04 0045*       ld (scratch1),hl
040472 21 4F 04 04 0046*       ld hl,scratch1+2
040476 CB 1E       0047*       rr (hl)
040478 2B          0048*       dec hl
040479 CB 1E       0049*       rr (hl)
04047B 2B          0050*       dec hl
04047C CB 1E       0051*       rr (hl)
04047E 23          0052*       inc hl
04047F 23          0053*       inc hl
040480 2A 4D 04 04 0054*       ld hl,(scratch1)
040484 C9          0055*       ret
040485             0056*   
040485             0057*   ; this is my little hack to divide by 16
040485             0058*   hlu_div16:
040485 AF          0059*       xor a
040486 29          0060*       add hl,hl
040487 17          0061*       rla
040488 29          0062*       add hl,hl
040489 17          0063*       rla
04048A 29          0064*       add hl,hl
04048B 17          0065*       rla
04048C 29          0066*       add hl,hl
04048D 17          0067*       rla
04048E 22 9B 04 04 0068*       ld (@scratch),hl
040492 32 9E 04 04 0069*       ld (@scratch+3),a
040496 2A 9C 04 04 0070*       ld hl,(@scratch+1)
04049A C9          0071*       ret
04049B             0072*   @scratch: ds 4
04049F             0073*   
04049F             0074*   ; hlu signed division by 256
04049F             0075*   ; returns: hlu / 256
04049F             0076*   ; destroys: af
04049F             0077*   hlu_sdiv256:
       FF FF FF FF 
04049F AF          0078*       xor a ; assume hl is positive
0404A0 22 B6 04 04 0079*       ld (@buffer),hl
0404A4             0080*       SIGN_HLU
0404A4 19          0001*M1     add hl,de ; 1 cycle
0404A5 B7          0002*M1     or a ; clear flags ; 1 cycle
0404A6 ED 52       0003*M1     sbc hl,de ; 2 cycles
0404A8             0004*M1     ; 4 cycles total
0404A8 F2 AD 04 04 0081*       jp p,@hl_pos
0404AC 3D          0082*       dec a
0404AD             0083*   @hl_pos:
0404AD 32 B9 04 04 0084*       ld (@buffer+3),a
0404B1 2A B7 04 04 0085*       ld hl,(@buffer+1)
0404B5 C9          0086*       ret
0404B6             0087*   @buffer: ds 4
0404BA             0088*   
0404BA             0089*   ; hlu 1 byte right shift, unsigned
0404BA             0090*   ; returns: hlu / 256, fractional portion in a
0404BA             0091*   ; destroys: af
0404BA             0092*   hlu_udiv256:
       FF FF FF FF 
0404BA AF          0093*       xor a
0404BB 32 CC 04 04 0094*       ld (@buffer+3),a
0404BF 7D          0095*       ld a,l ; save the fractional portion
0404C0 22 C9 04 04 0096*       ld (@buffer),hl
0404C4 2A CA 04 04 0097*       ld hl,(@buffer+1)
0404C8 C9          0098*       ret
0404C9             0099*   @buffer: ds 4
0404CD             0100*   
       FF FF FF FF 
0404CD 00 00 00 00 0101*   add_bcd_arg1: db #00,#00,#00,#00
0404D1 00 00 00 00 0102*   add_bcd_arg2: db #00,#00,#00,#00
0404D5             0103*   
0404D5             0104*   ; set bcd values in a scratch memory address from registers bcde
0404D5             0105*   ; input: hl; scratch address,bcde; 8-place bcd number
0404D5             0106*   ; destroys ; hl
0404D5             0107*   set_bcd:
0404D5 73          0108*       ld (hl),e
0404D6 23          0109*       inc hl
0404D7 72          0110*       ld (hl),d
0404D8 23          0111*       inc hl
0404D9 71          0112*       ld (hl),c
0404DA 23          0113*       inc hl
0404DB 70          0114*       ld (hl),b
0404DC C9          0115*       ret
0404DD             0116*   
0404DD             0117*   ; load bcd values from a scratch memory address to bcde
0404DD             0118*   ; input: hl; scratch address
0404DD             0119*   ; output: bcde; 8-place bcd number
0404DD             0120*   ; destroys: hl
0404DD             0121*   get_bcd:
0404DD 5E          0122*       ld e,(hl)
0404DE 23          0123*       inc hl
0404DF 56          0124*       ld d,(hl)
0404E0 23          0125*       inc hl
0404E1 4E          0126*       ld c,(hl)
0404E2 23          0127*       inc hl
0404E3 46          0128*       ld b,(hl)
0404E4 C9          0129*       ret
0404E5             0130*   
0404E5             0131*   ; BCD addition
0404E5             0132*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0404E5             0133*   ;       a is the number of bytes holding each number (number of places/2)
0404E5             0134*   ; outputs: (hl) + (de) --> (hl)
0404E5             0135*   ; destroys: a,b,de,hl
0404E5             0136*   add_bcd:
0404E5 47          0137*       ld b,a ; loop counter
0404E6 AF          0138*       xor a ; reset a, clear carry flag
0404E7             0139*   adcec:
0404E7 1A          0140*       ld a,(de) ; addend to acc
0404E8 8E          0141*       adc a,(hl) ; add (hl) to acc
0404E9 27          0142*       daa ; adjust result to bcd
0404EA 77          0143*       ld (hl),a ; store result
0404EB 23          0144*       inc hl ; advance memory pointers
0404EC 13          0145*       inc de
0404ED 10 F8       0146*       djnz adcec ; loop until b == 0
0404EF C9          0147*       ret
0404F0             0148*   
0404F0             0149*   ; BCD subtraction
0404F0             0150*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0404F0             0151*   ;       a is the number of bytes holding each number (number of places/2)
0404F0             0152*   ; outputs: (hl) - (de) --> (hl)
0404F0             0153*   ; destroys: a,b,de,hl
0404F0             0154*   sub_bcd:
0404F0 47          0155*       ld b,a ; loop counter
0404F1 AF          0156*       xor a ; reset a,clear carry flag
0404F2             0157*   subdec:
0404F2 1A          0158*       ld a,(de) ; subtrahend to acc
0404F3 9E          0159*       sbc a,(hl) ; subtract (hl) from acc
0404F4 27          0160*       daa ; adjust result to bcd
0404F5 77          0161*       ld (hl),a ; store result
0404F6 23          0162*       inc hl ; advance memory pointers
0404F7 13          0163*       inc de
0404F8 10 F8       0164*       djnz subdec ; loop until b == 0
0404FA C9          0165*       ret
0404FB             0166*   
0404FB             0167*   ; http://www.z80.info/pseudo-random.txt
0404FB             0168*   rand_8:
0404FB C5          0169*       push bc
0404FC 3A 0F 05 04 0170*       ld a,(r_seed)
040500 4F          0171*       ld c,a
040501             0172*   
040501 0F          0173*       rrca ; multiply by 32
040502 0F          0174*       rrca
040503 0F          0175*       rrca
040504 EE 1F       0176*       xor 0x1f
040506             0177*   
040506 81          0178*       add a,c
040507 DE FF       0179*       sbc a,255 ; carry
040509             0180*   
040509 32 0F 05 04 0181*       ld (r_seed),a
04050D C1          0182*       pop bc
04050E C9          0183*       ret
04050F 50          0184*   r_seed: defb $50
040510             0185*   
040510             0186*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
040510             0187*   prng24:
040510             0188*   ;;Expects ADL mode.
040510             0189*   ;;Output: HL
040510             0190*   ;;50cc
040510             0191*   ;;33 bytes
040510             0192*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
040510 ED 5B 31 05 0193*       ld de,(seed1)
       04          
040515 B7          0194*       or a
040516 ED 62       0195*       sbc hl,hl
040518 19          0196*       add hl,de
040519 29          0197*       add hl,hl
04051A 29          0198*       add hl,hl
04051B 2C          0199*       inc l
04051C 19          0200*       add hl,de
04051D 22 31 05 04 0201*       ld (seed1),hl
040521 2A 34 05 04 0202*       ld hl,(seed2)
040525 29          0203*       add hl,hl
040526 9F          0204*       sbc a,a
040527 E6 1B       0205*       and %00011011
040529 AD          0206*       xor l
04052A 6F          0207*       ld l,a
04052B 22 34 05 04 0208*       ld (seed2),hl
04052F 19          0209*       add hl,de
040530 C9          0210*       ret
040531 00 00 00    0211*   seed1: dl 0
040534 00 00 00    0212*   seed2: dl 0
040537             0034        include "files.inc"
040537             0001*   ; load to onboard 8k sram
040537             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
040537             0035        include "fixed168.inc"
040537             0001*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040537             0002*   ; uses EZ80 MLT instruction for speed
040537             0003*   ; operation: UHL * A --> UHL
040537             0004*   ; destroys: AF, HL
040537             0005*   smul24x8:
040537             0006*   ; make hl positive and store sign flag
040537 CD 53 04 04 0007*       call hlu_abs
04053B F5          0008*       push af
04053C             0009*   ; do the division
04053C CD 47 05 04 0010*       call mul24x8 ; hl = product
040540             0011*   ; adjust sign of result
040540 F1          0012*       pop af ; sign de
040541 F0          0013*       ret p ; hl was positive, nothing to do
040542 CD 63 04 04 0014*       call neg_hlu ; result is negative
040546 C9          0015*       ret
040547             0016*   
040547             0017*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040547             0018*   ; uses EZ80 MLT instruction for speed
040547             0019*   ; operation: UHL * A --> AUHL
040547             0020*   ; destroys: AF, HL
040547             0021*   mul24x8:
040547 D5          0022*       push de ; preserve de
040548             0023*   ; low byte
040548 5D          0024*       ld e,l
040549 57          0025*       ld d,a
04054A ED 5C       0026*       mlt de
04054C 6B          0027*       ld l,e ; product low byte
04054D 08          0028*       ex af,af' ; save multiplier
04054E 7A          0029*       ld a,d ; carry
04054F 08          0030*       ex af,af' ; save carry, restore multiplier
040550             0031*   ; high byte
040550 5C          0032*       ld e,h
040551 57          0033*       ld d,a
040552 ED 5C       0034*       mlt de
040554 08          0035*       ex af,af' ; save multiplier, restore carry
040555 83          0036*       add a,e ; add carry
040556 67          0037*       ld h,a ; product middle byte
040557 7A          0038*       ld a,d ; carry
040558 08          0039*       ex af,af' ; save carry, restore multiplier
040559             0040*   ; upper byte
040559 22 74 05 04 0041*       ld (@scratch),hl ; 7 cycles
04055D 5F          0042*       ld e,a
04055E 3A 76 05 04 0043*       ld a,(@scratch+2)
040562 57          0044*       ld d,a
040563 ED 5C       0045*       mlt de
040565 08          0046*       ex af,af' ; restore carry
040566 8B          0047*       adc a,e ; add carry
040567 32 76 05 04 0048*       ld (@scratch+2),a ; 5 cycles
04056B 2A 74 05 04 0049*       ld hl,(@scratch) ; 7 cycles
04056F             0050*   ; highest byte
04056F 3E 00       0051*       ld a,0 ; preserve carry flag
040571 8A          0052*       adc a,d ; product highest byte
040572 D1          0053*       pop de ; restore de
040573 C9          0054*       ret
040574             0055*   @scratch: ds 3
040577             0056*   
       FF FF FF 
040577 00 00 00 00 0057*   mul24out: blkb 6,0
       00 00       
04057D             0058*   
04057D             0059*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
04057D             0060*   ; operation: UHL * UDE --> mul24out
04057D             0061*   mul24:
04057D DD E5       0062*       push ix ; preserve
04057F             0063*   ; point to output buffer and clear it
04057F DD 21 77 05 0064*       ld ix,mul24out
       04          
040584 C5          0065*       push bc
040585 01 00 00 00 0066*       ld bc,0
040589 DD 0F 00    0067*       ld (ix),bc
04058C DD 0F 03    0068*       ld (ix+3),bc
04058F C1          0069*       pop bc
040590             0070*   ; STEP 1: UHL * E
040590 7B          0071*       ld a,e
040591 E5          0072*       push hl
040592 CD 47 05 04 0073*       call mul24x8
040596 DD 2F 00    0074*       ld (ix+0),hl
040599 DD 77 03    0075*       ld (ix+3),a
04059C             0076*   ; STEP 2: UHL * D
04059C E1          0077*       pop hl
04059D E5          0078*       push hl
04059E 7A          0079*       ld a,d
04059F CD 47 05 04 0080*       call mul24x8
0405A3 CD BC 05 04 0081*       call @accumulate
0405A7             0082*   ; STEP 3: UHL * DEU
0405A7 E1          0083*       pop hl
0405A8 ED 53 EC 05 0084*       ld (@de),de
       04          
0405AD 3A EE 05 04 0085*       ld a,(@de+2)
0405B1 CD 47 05 04 0086*       call mul24x8
0405B5 CD BC 05 04 0087*       call @accumulate
0405B9             0088*   ; all done
0405B9 DD E1       0089*       pop ix ; restore
0405BB C9          0090*       ret
0405BC             0091*   @accumulate:
0405BC DD 23       0092*       inc ix
0405BE             0093*   ; highest byte of product to carry
0405BE DD 77 03    0094*       ld (ix+3),a
0405C1             0095*   ; low byte of product
0405C1 7D          0096*       ld a,l
0405C2 DD 86 00    0097*       add a,(ix+0)
0405C5 DD 77 00    0098*       ld (ix+0),a
0405C8             0099*   ; high byte of product
0405C8 7C          0100*       ld a,h
0405C9 DD 8E 01    0101*       adc a,(ix+1)
0405CC DD 77 01    0102*       ld (ix+1),a
0405CF             0103*   ; uppper byte of product
0405CF 22 E9 05 04 0104*       ld (@hl),hl
0405D3 3A EB 05 04 0105*       ld a,(@hl+2)
0405D7 DD 8E 02    0106*       adc a,(ix+2)
0405DA DD 77 02    0107*       ld (ix+2),a
0405DD             0108*   ; carry
0405DD 3E 00       0109*       ld a,0 ; preserve flags
0405DF DD 8E 03    0110*       adc a,(ix+3)
0405E2 DD 77 03    0111*       ld (ix+3),a
0405E5 C9          0112*       ret
0405E6             0113*   
0405E6 00 00 00    0114*   @ix: dl 0
0405E9 00 00 00    0115*   @hl: dl 0
0405EC 00 00 00    0116*   @de: dl 0
0405EF             0117*   
0405EF             0118*   ; ; UHL * UDE --> UHL (unsigned)
0405EF             0119*   ; umul24:
0405EF             0120*   ;     call mul24
0405EF             0121*   ;     ld hl,(mul24out)
0405EF             0122*   ;     ret
0405EF             0123*   
0405EF             0124*   ; UH.L = UH.L*UD.E (unsigned)
0405EF             0125*   umul168:
0405EF CD 7D 05 04 0126*       call mul24
0405F3 2A 78 05 04 0127*       ld hl,(mul24out+1)
0405F7 C9          0128*       ret
0405F8             0129*   
0405F8             0130*   ; UH.L * UD.E --> UH.L (signed)
0405F8             0131*   smul168:
0405F8             0132*   ; make everything positive and store sign flags
0405F8 CD 53 04 04 0133*       call hlu_abs
0405FC F5          0134*       push af
0405FD EB          0135*       ex de,hl
0405FE CD 53 04 04 0136*       call hlu_abs
040602 EB          0137*       ex de,hl
040603 F5          0138*       push af
040604             0139*   ; do the division
040604 CD EF 05 04 0140*       call umul168 ; hl = product
040608             0141*   ; adjust sign of result
040608 F1          0142*       pop af ; sign de
040609 FA 14 06 04 0143*       jp m,@de_neg
04060D F1          0144*       pop af ; sign hl
04060E F0          0145*       ret p ; both positive, nothing to do
04060F             0146*   @hl_neg:
04060F CD 63 04 04 0147*       call neg_hlu ; de pos, hl neg, result is negative
040613 C9          0148*       ret
040614             0149*   @de_neg:
040614 F1          0150*       pop af
040615 F8          0151*       ret m ; both negative, nothing to do
040616 CD 63 04 04 0152*       call neg_hlu ; result is negative
04061A C9          0153*       ret
04061B             0154*   
04061B             0155*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
04061B             0156*   ; perform unsigned division of 16.8 fixed place values
04061B             0157*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
04061B             0158*   udiv168:
04061B             0159*   ; back up divisor
04061B ED 53 52 06 0160*       ld (@ude),de
       04          
040620             0161*   ; get the 16-bit integer part of the quotient
040620 CD 63 03 04 0162*       call udiv24 ; de = quotient, hl = remainder
040624             0163*   ; load quotient to upper three bytes of output
040624 ED 53 59 06 0164*       ld (div168_out+1),de
       04          
040629             0165*   @div256:
040629             0166*   ; multiply remainder by 256
040629             0167*       hlu_mul256
040629 29          0001*M1     add hl,hl ; * 2
04062A 29          0002*M1     add hl,hl ; * 4
04062B 29          0003*M1     add hl,hl ; * 8
04062C 29          0004*M1     add hl,hl ; * 16
04062D 29          0005*M1     add hl,hl ; * 32
04062E 29          0006*M1     add hl,hl ; * 64
04062F 29          0007*M1     add hl,hl ; * 128
040630 29          0008*M1     add hl,hl ; * 256
040631             0168*   ; skip fractional computation if remainder is zero
040631             0169*       SIGN_HLU
040631 19          0001*M1     add hl,de ; 1 cycle
040632 B7          0002*M1     or a ; clear flags ; 1 cycle
040633 ED 52       0003*M1     sbc hl,de ; 2 cycles
040635             0004*M1     ; 4 cycles total
040635 20 03       0170*       jr nz,@div_frac
040637 AF          0171*       xor a
040638 18 0A       0172*       jr @write_frac
04063A             0173*   ; now divide the shifted remainder by the divisor
04063A             0174*   @div_frac:
04063A ED 5B 52 06 0175*       ld de,(@ude) ; get back divisor
       04          
04063F CD 63 03 04 0176*       call udiv24 ; de = quotient, hl = remainder
040643             0177*   ; load low byte of quotient to low byte of output
040643 7B          0178*       ld a,e
040644             0179*   @write_frac:
040644 32 58 06 04 0180*       ld (div168_out),a
040648             0181*   ; load de with return value
040648 ED 5B 58 06 0182*       ld de,(div168_out)
       04          
04064D             0183*   ; load a with any overflow
04064D 3A 5B 06 04 0184*       ld a,(div168_out+3)
040651 C9          0185*       ret ; ud.e is the 16.8 result
040652             0186*   @ude: ds 6
040658             0187*   div168_out: ds 4 ; the extra byte is for overflow
04065C             0188*   
04065C             0189*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
04065C             0190*   ; perform signed division of 16.8 fixed place values
04065C             0191*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
04065C             0192*   sdiv168:
04065C             0193*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
04065C CD 53 04 04 0194*       call hlu_abs
040660 F5          0195*       push af
040661 EB          0196*       ex de,hl
040662 CD 53 04 04 0197*       call hlu_abs
040666 EB          0198*       ex de,hl
040667 F5          0199*       push af
040668             0200*   ; do the division
040668 CD 1B 06 04 0201*       call udiv168 ; de = quotient, hl = remainder
04066C             0202*   ; adjust sign of result
04066C F1          0203*       pop af ; sign de
04066D FA 7A 06 04 0204*       jp m,@de_neg
040671 F1          0205*       pop af ; sign hl
040672 F0          0206*       ret p ; both positive, nothing to do
040673             0207*   @hl_neg:
040673 EB          0208*       ex de,hl ; hl = quotient, de = remainder
040674 CD 63 04 04 0209*       call neg_hlu ; de pos, hl neg, result is negative
040678 EB          0210*       ex de,hl ; de = negated quotient, hl = remainder
040679 C9          0211*       ret
04067A             0212*   @de_neg:
04067A F1          0213*       pop af
04067B F8          0214*       ret m ; both negative, nothing to do
04067C EB          0215*       ex de,hl ; hl = quotient, de = remainder
04067D CD 63 04 04 0216*       call neg_hlu ; result is negative
040681 EB          0217*       ex de,hl ; de = negated quotient, hl = remainder
040682 C9          0218*       ret
040683             0219*   
040683             0220*   ; convert signed angles from a 360 to 256 degree circle
040683             0221*   ; inputs: uh.l is the angle360 in 16.8 fixed format
040683             0222*   ; outputs: uh.l is the angle256 in 16.8 fixed format
040683             0223*   ; destroys: TODO
040683             0224*   deg_360_to_256:
040683 D5          0225*       push de ; preserve de
040684             0226*   ; make angle positive and store sign flag
040684 CD 53 04 04 0227*       call hlu_abs
040688 F5          0228*       push af
040689             0229*   ; multiply by coversion factor of 256/360
040689 11 B6 00 00 0230*       ld de,0x0000B6 ; 0.711
04068D CD EF 05 04 0231*       call umul168 ; uh.l = uh.l * 0.711
040691             0232*   ; restore sign flag and adjust output accordingly
040691 F1          0233*       pop af
040692 F2 9A 06 04 0234*       jp p,@pos ; positive number
040696 CD 63 04 04 0235*       call neg_hlu
04069A             0236*   @pos:
04069A             0237*   ; restore de and return uh.l as the result
04069A D1          0238*       pop de
04069B C9          0239*       ret
04069C             0240*   
04069C             0241*   ; convert signed angles from a 256 to 360 degree circle
04069C             0242*   ; inputs: uh.l is the angle256 in 16.8 fixed format
04069C             0243*   ; outputs: uh.l is the angle360 in 16.8 fixed format
04069C             0244*   ; destroys: TODO
04069C             0245*   deg_256_to_360:
04069C D5          0246*       push de ; preserve de
04069D             0247*   ; make angle positive and store sign flag
04069D CD 53 04 04 0248*       call hlu_abs
0406A1 F5          0249*       push af
0406A2             0250*   ; multiply by coversion factor of 360/256
0406A2 11 68 01 00 0251*       ld de,0x000168 ; 1.406
0406A6 CD EF 05 04 0252*       call umul168 ; uh.l = uh.l * 1.406
0406AA             0253*   ; restore sign flag and adjust output accordingly
0406AA F1          0254*       pop af
0406AB F2 B3 06 04 0255*       jp p,@pos ; positive number
0406AF CD 63 04 04 0256*       call neg_hlu
0406B3             0257*   @pos:
0406B3             0258*   ; restore de and return uh.l as the result
0406B3 D1          0259*       pop de
0406B4 C9          0260*       ret
0406B5             0261*   
0406B5             0262*   ; fixed 16.8 routine
0406B5             0263*   ; cos(uh.l) --> uh.l
0406B5             0264*   ; destroys: f, hl
0406B5             0265*   cos168:
0406B5 D5          0266*       push de ; preserve de
0406B6             0267*   ; for cos we simply increment the angle by 90 degrees
0406B6             0268*   ; or 0x004000 in 16.8 degrees256
0406B6             0269*   ; which makes it a sin problem
0406B6 11 00 40 00 0270*       ld de,0x004000
0406BA 19          0271*       add hl,de ; modulo 256 happens below
0406BB D1          0272*       pop de ; restore de
0406BC             0273*   ; fall through to sin168
0406BC             0274*   
0406BC             0275*   ; ---------------------
0406BC             0276*   ; fixed 16.8 routine
0406BC             0277*   ; sin(uh.l) --> uh.l
0406BC             0278*   ; destroys: f, hl
0406BC             0279*   sin168:
0406BC D5          0280*       push de
0406BD             0281*   ; handle negative angles appropriately
0406BD CD 53 04 04 0282*       call hlu_abs
0406C1 F2 CA 06 04 0283*       jp p,@F
0406C5 11 00 00 FF 0284*       ld de,-256*256
0406C9 19          0285*       add hl,de
0406CA             0286*   @@:
0406CA 2E 03       0287*       ld l,3 ; multiply by 3 to get our lookup index
0406CC ED 6C       0288*       mlt hl
0406CE 11 82 09 04 0289*       ld de,sin_lut_168 ; grab the lut address
0406D2 19          0290*       add hl,de ; bump hl by the index
0406D3 ED 27       0291*       ld hl,(hl) ; don't try this on a z80!
0406D5 D1          0292*       pop de
0406D6 C9          0293*       ret
0406D7             0294*   
0406D7             0295*   ; 16.8 fixed inputs / outputs
0406D7             0296*   ; takes: uh.l as angle in degrees 256
0406D7             0297*   ;        ud.e as radius
0406D7             0298*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
0406D7             0299*   ;        displacements from origin (0,0)
0406D7             0300*   ; destroys: everything except indexes
0406D7             0301*   polar_to_cartesian:
0406D7             0302*   ; back up input parameters
0406D7 22 06 07 04 0303*       ld (@angle), hl
0406DB ED 53 09 07 0304*       ld (@radius), de
       04          
0406E0             0305*   ; compute dx = sin(uh.l) * ud.e
0406E0 CD BC 06 04 0306*       call sin168 ; uh.l = sin(uh.l)
0406E4 ED 5B 09 07 0307*       ld de,(@radius)
       04          
0406E9 CD F8 05 04 0308*       call smul168 ; uh.l = dx
0406ED E5          0309*       push hl
0406EE             0310*   ; compute dy = -cos(uh.l) * ud.e
0406EE 2A 06 07 04 0311*       ld hl,(@angle)
0406F2 CD B5 06 04 0312*       call cos168 ; uh.l = cos(uh.l)
0406F6 ED 5B 09 07 0313*       ld de,(@radius)
       04          
0406FB CD F8 05 04 0314*       call smul168 ; uh.l = dy
0406FF CD 63 04 04 0315*       call neg_hlu ; invert dy for screen coords convention
040703 EB          0316*       ex de,hl ; de = dy for output
040704 C1          0317*       pop bc ; bc = dx for output
040705             0318*   ; and out
040705 C9          0319*       ret
040706             0320*   @angle: ds 3
040709             0321*   @radius: ds 3
04070C             0322*   
04070C             0323*   ; 16.8 fixed inputs / outputs
04070C             0324*   ; inputs: ub.c as dx, ud.e as dy
04070C             0325*   ;        displacements from origin (0,0)
04070C             0326*   ; returns: uh.l as angle in degrees 256
04070C             0327*   ;        ud.e as radius
04070C             0328*   ; destroys: everything except indexes
04070C             0329*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
04070C ED 43 65 07 0330*       ld (dx168),bc ; dx argument for distance168
       04          
040711 ED 53 6B 07 0331*       ld (dy168),de ; dy argument for distance168
       04          
040716             0332*   ; compute radius
040716 CD 71 07 04 0333*       call distance168 ; uh.l = radius
04071A E5          0334*       push hl ; save radius
04071B             0335*   ; compute angle
04071B ED 4B 65 07 0336*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040720 ED 5B 6B 07 0337*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040725 CD D1 07 04 0338*       call atan2_168fast ; uh.l = angle
040729             0339*   ; return result
040729 D1          0340*       pop de ; de = radius (was hl)
04072A C9          0341*       ret
04072B             0342*   ; end cartesian_to_polar
04072B             0343*   
04072B             0344*   ; 16.8 fixed inputs / outputs
04072B             0345*   ; inputs: ub.c as dx, ud.e as dy
04072B             0346*   ;        displacements from origin (0,0)
04072B             0347*   ; returns: uh.l as angle in degrees 256
04072B             0348*   ;        ud.e as radius
04072B             0349*   ; destroys: everything except indexes
04072B             0350*   ; note: uses distance168sm which is more accurate for small deltas
04072B             0351*   cartesian_to_polar_sm:
04072B ED 43 65 07 0352*       ld (dx168),bc ; dx argument for distance168
       04          
040730 ED 53 6B 07 0353*       ld (dy168),de ; dy argument for distance168
       04          
040735             0354*   ; compute radius
040735 CD AC 07 04 0355*       call distance168sm ; uh.l = radius
040739 E5          0356*       push hl ; save radius
04073A             0357*   ; compute angle
04073A ED 4B 65 07 0358*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
04073F ED 5B 6B 07 0359*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040744 CD D1 07 04 0360*       call atan2_168fast ; uh.l = angle
040748             0361*   ; return result
040748 D1          0362*       pop de ; de = radius (was hl)
040749 C9          0363*       ret
04074A             0364*   ; end cartesian_to_polar
04074A             0365*   
04074A             0366*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
04074A             0367*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
04074A             0368*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
04074A             0369*   ;         also populates scratch locations dx168 and dy168
04074A             0370*   ; destroys: a,hl,bc,de
04074A             0371*   dxy168:
04074A             0372*   ; compute dx = x1-x0
04074A AF          0373*       xor a ; clear carry
04074B DD E5       0374*       push ix ; move ix to hl via the stack
04074D E1          0375*       pop hl ; hl = x1
04074E ED 42       0376*       sbc hl,bc ; hl = dx
040750 22 65 07 04 0377*       ld (dx168),hl ; dx to scratch
040754             0378*   ; compute dy = y1-y0
040754 AF          0379*       xor a ; clear carry
040755 FD E5       0380*       push iy ; move iy to hl via the stack
040757 E1          0381*       pop hl ; hl = y1
040758 ED 52       0382*       sbc hl,de ; hl = dy
04075A 22 6B 07 04 0383*       ld (dy168),hl ; dy to scratch
04075E             0384*   ; populate output registers and return
04075E EB          0385*       ex de,hl ; ud.e = dy
04075F ED 4B 65 07 0386*       ld bc,(dx168) ; ub.c = dx
       04          
040764 C9          0387*       ret
040765 00 00 00 00 0388*   dx168: blkb 6,0
       00 00       
04076B 00 00 00 00 0389*   dy168: blkb 6,0
       00 00       
040771             0390*   
040771             0391*   ; compute the euclidian distance between two cartesian coordinates
040771             0392*   ; using the formula d = sqrt(dx^2+dy^2)
040771             0393*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040771             0394*   ; output; uh.l is the 16.8 fixed format distance
040771             0395*   ;         also populates scratch locations dx168 and dy168
040771             0396*   ; destroys: a,hl,bc,de
040771             0397*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
040771             0398*   ;       thus the result will always be an integer, albeit in 16.8 format
040771             0399*   distance168:
040771             0400*   ; compute dy^2
040771 2A 6B 07 04 0401*       ld hl,(dy168)
040775 CD 53 04 04 0402*       call hlu_abs
040779             0403*       ; call hlu_udiv256 ; make integer to avoid overflow
040779             0404*       SRL_UHL ; make integer to avoid overflow
040779 3B          0001*M1     dec sp ; 1 cycle
04077A E5          0002*M1     push hl ; 4 cycles
04077B 33          0003*M1     inc sp ; 1 cycle
04077C E1          0004*M1     pop hl ; 4 cycles
04077D 23          0005*M1     inc hl ; 1 cycle
04077E 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040780             0007*M1     ; 13 cycles total
040780 E5          0405*       push hl
040781 D1          0406*       pop de
040782 CD 4A 03 04 0407*       call umul24 ; hl = dy^2
040786 E5          0408*       push hl ; save dy^2
040787             0409*   ; compute dx^2
040787 2A 65 07 04 0410*       ld hl,(dx168)
04078B CD 53 04 04 0411*       call hlu_abs
04078F             0412*       ; call hlu_udiv256 ; make integer to avoid overflow
04078F             0413*       SRL_UHL ; make integer to avoid overflow
04078F 3B          0001*M1     dec sp ; 1 cycle
040790 E5          0002*M1     push hl ; 4 cycles
040791 33          0003*M1     inc sp ; 1 cycle
040792 E1          0004*M1     pop hl ; 4 cycles
040793 23          0005*M1     inc hl ; 1 cycle
040794 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040796             0007*M1     ; 13 cycles total
040796 E5          0414*       push hl
040797 D1          0415*       pop de
040798 CD 4A 03 04 0416*       call umul24 ; hl = dx^2
04079C             0417*   ; add dx^2 and dy^2
04079C D1          0418*       pop de ; de = dy^2 (was hl)
04079D 19          0419*       add hl,de ; hl = dx^2 + dy^2
04079E             0420*   ; compute the square root
04079E CD 9C 08 04 0421*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
0407A2 EB          0422*       ex de,hl ; hl = distance
0407A3             0423*       hlu_mul256 ; convert back to 16.8 fixed
0407A3 29          0001*M1     add hl,hl ; * 2
0407A4 29          0002*M1     add hl,hl ; * 4
0407A5 29          0003*M1     add hl,hl ; * 8
0407A6 29          0004*M1     add hl,hl ; * 16
0407A7 29          0005*M1     add hl,hl ; * 32
0407A8 29          0006*M1     add hl,hl ; * 64
0407A9 29          0007*M1     add hl,hl ; * 128
0407AA 29          0008*M1     add hl,hl ; * 256
0407AB C9          0424*       ret
0407AC             0425*   
0407AC             0426*   ; compute the euclidian distance between two cartesian coordinates
0407AC             0427*   ; using the formula d = sqrt(dx^2+dy^2)
0407AC             0428*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
0407AC             0429*   ; output; uh.l is the 16.8 fixed format distance
0407AC             0430*   ;         also populates scratch locations dx168 and dy168
0407AC             0431*   ; destroys: a,hl,bc,de
0407AC             0432*   ; NOTE: sm means 'small' because it doesn't round down the deltas
0407AC             0433*   ;       making it more accurate for small deltas,
0407AC             0434*   ;       but will overflow if used for screen-sized deltas
0407AC             0435*   distance168sm:
0407AC             0436*   ; compute dy^2
0407AC 2A 6B 07 04 0437*       ld hl,(dy168)
0407B0 CD 53 04 04 0438*       call hlu_abs
0407B4 E5          0439*       push hl
0407B5 D1          0440*       pop de
0407B6 CD 4A 03 04 0441*       call umul24 ; hl = dy^2
0407BA E5          0442*       push hl ; save dy^2
0407BB             0443*   ; compute dx^2
0407BB 2A 65 07 04 0444*       ld hl,(dx168)
0407BF CD 53 04 04 0445*       call hlu_abs
0407C3 E5          0446*       push hl
0407C4 D1          0447*       pop de
0407C5 CD 4A 03 04 0448*       call umul24 ; hl = dx^2
0407C9             0449*   ; add dx^2 and dy^2
0407C9 D1          0450*       pop de ; de = dy^2 (was hl)
0407CA 19          0451*       add hl,de ; hl = dx^2 + dy^2
0407CB             0452*   ; compute the square root
0407CB CD 9C 08 04 0453*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
0407CF EB          0454*       ex de,hl ; hl = distance
0407D0 C9          0455*       ret
0407D1             0456*   
0407D1             0457*   ; atan2_(ub.c,ud.e) --> uh.l
0407D1             0458*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0407D1             0459*   ;   whether inputs are integers or fractional doesn't matter
0407D1             0460*   ;   so long as the sign bit of the upper byte is correct
0407D1             0461*   ; output: uh.l is the 16.8 fixed angle in degrees 256
0407D1             0462*   ; angles are COMPASS HEADINGS based on
0407D1             0463*   ; screen coordinate conventions,where the y axis is flipped
0407D1             0464*   ; #E0 224      0       32 #20
0407D1             0465*   ;        -x,-y | +x,-y
0407D1             0466*   ; #C0 192------+------ 64 #40
0407D1             0467*   ;        -x,+y | +x,+y
0407D1             0468*   ; #A0 160   128 #80   96 #60
0407D1             0469*   atan2_168fast:
0407D1             0470*   ; get signs and make everything positive
0407D1             0471*   ; get abs(x) and store its original sign
0407D1 C5          0472*       push bc
0407D2 E1          0473*       pop hl
0407D3 CD 53 04 04 0474*       call hlu_abs ; if x was negative this also sets the sign flag
0407D7 E5          0475*       push hl ; store abs(x)
0407D8 C1          0476*       pop bc ; bc = abs(x)
0407D9 F5          0477*       push af ; store sign of x
0407DA             0478*   ; get abs(y) and store its original sign
0407DA EB          0479*       ex de,hl ; hl = y
0407DB CD 53 04 04 0480*       call hlu_abs ; if y was negative this also sets the sign flag
0407DF EB          0481*       ex de,hl ; de = abs(y)
0407E0 F5          0482*       push af ; store sign of y
0407E1             0483*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0407E1             0484*   ; this ensures that our lookup value is between 0 and 1 inclusive
0407E1 AF          0485*       xor a ; clear the carry flag
0407E2 D5          0486*       push de
0407E3 E1          0487*       pop hl
0407E4 ED 42       0488*       sbc hl,bc
0407E6 F5          0489*       push af ; save sign of de - bc
0407E7 F2 F0 07 04 0490*       jp p,@1 ; bc <= de, so we skip ahead
0407EB             0491*   ; otherwise we swap bc and de
0407EB C5          0492*       push bc
0407EC E1          0493*       pop hl
0407ED EB          0494*       ex de,hl
0407EE E5          0495*       push hl
0407EF C1          0496*       pop bc
0407F0             0497*   @1:
0407F0             0498*   ; now we're ready to snag our preliminary result
0407F0 C5          0499*       push bc
0407F1 E1          0500*       pop hl
0407F2 CD 60 08 04 0501*       call atan_168fast ; uh.l comes back with prelim result
0407F6             0502*   ; now we adjust uh.l based on sign of de - bc
0407F6 F1          0503*       pop af
0407F7 F2 03 08 04 0504*       jp p,@2 ; bc <= de,so we skip ahead
0407FB EB          0505*       ex de,hl
0407FC 21 00 40 00 0506*       ld hl,64*256 ; subtract from 64 (90) degrees
040800 AF          0507*       xor a ; clear the carry flag
040801 ED 52       0508*       sbc hl,de
040803             0509*   @2:
040803             0510*   ; adjust the result based on quadrant
040803             0511*   ; #E0 224      0       32 #20
040803             0512*   ;        -x,-y | +x,-y
040803             0513*   ; #C0 192------+------ 64 #40
040803             0514*   ;        -x,+y | +x,+y
040803             0515*   ; #A0 160   128 #80   96 #60
040803 F1          0516*       pop af ; sign of y
040804 CA 41 08 04 0517*       jp z,@y_zero
040808 F2 21 08 04 0518*       jp p,@y_pos
04080C             0519*   ; y neg,check x
04080C F1          0520*       pop af ; sign of x
04080D CA 1B 08 04 0521*       jp z,@y_neg_x_zero
040811 F2 20 08 04 0522*       jp p,@y_neg_x_pos
040815             0523*   ; y neg,x neg
040815             0524*   ; angle is 128 to 256 (270 to 360)
040815             0525*   ; negating the intermediate does the trick
040815 CD 63 04 04 0526*       call neg_hlu
040819 18 31       0527*       jr @zero_hlu
04081B             0528*   
04081B             0529*   @y_neg_x_zero:
04081B             0530*   ; y neg,x zero
04081B             0531*   ; angle is 0
04081B 21 00 00 00 0532*       ld hl,0
04081F C9          0533*       ret
040820             0534*   @y_neg_x_pos:
040820             0535*   ; y neg,x pos
040820             0536*   ; angle is 0 to 64 (0 to 90)
040820             0537*   ; so we're good
040820 C9          0538*       ret
040821             0539*   
040821             0540*   @y_pos:
040821 F1          0541*       pop af ; sign of x
040822 CA 31 08 04 0542*       jp z,@y_pos_x_zero
040826 F2 36 08 04 0543*       jp p,@y_pos_x_pos
04082A             0544*   ; y pos,x neg
04082A             0545*   ; angle is 128 to 192 (180-270)
04082A             0546*   ; so we add 128 to intermediate
04082A 11 00 80 00 0547*       ld de,128*256
04082E 19          0548*       add hl,de
04082F 18 1B       0549*       jr @zero_hlu
040831             0550*   @y_pos_x_zero:
040831             0551*   ; y pos,x zero
040831             0552*   ; angle is 128 (180)
040831 21 00 80 00 0553*       ld hl,128*256
040835 C9          0554*       ret
040836             0555*   @y_pos_x_pos:
040836             0556*   ; y pos,x pos
040836             0557*   ; angle is 64 to 128 (90 to 180)
040836             0558*   ; neg the intermediate and add 180 degrees
040836 CD 63 04 04 0559*       call neg_hlu
04083A 11 00 80 00 0560*       ld de,128*256
04083E 19          0561*       add hl,de
04083F 18 0B       0562*       jr @zero_hlu
040841             0563*   
040841             0564*   @y_zero:
040841 F1          0565*       pop af ; sign of x
040842 FA 47 08 04 0566*       jp m,@y_zero_x_neg
040846             0567*   ; y zero,x pos
040846             0568*   ; angle is 64 (90),nothing to do
040846 C9          0569*       ret
040847             0570*   @y_zero_x_neg:
040847             0571*   ; y zero ,x neg
040847             0572*   ; angle is 192 (270)
040847 21 00 C0 00 0573*       ld hl,192*256
04084B C9          0574*       ret
04084C             0575*   @zero_hlu:
04084C AF          0576*       xor a
04084D 22 5A 08 04 0577*       ld (@scratch),hl
040851 32 5C 08 04 0578*       ld (@scratch+2),a
040855 2A 5A 08 04 0579*       ld hl,(@scratch)
040859 C9          0580*       ret
04085A             0581*   @scratch: ds 6
040860             0582*   
040860             0583*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040860             0584*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
040860             0585*   ; destroys: a,hl,bc,de
040860             0586*   ; note: only works for angles from 0 to 32 (45) degrees
040860             0587*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040860             0588*   atan_168fast:
040860             0589*   ; because we use compass headings instead of geometric angles
040860             0590*   ; we compute dx/dy which is 1/tan(theta) in the maths world
040860             0591*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
040860 CD 1B 06 04 0592*       call udiv168 ; ud.e = dx/dy
040864 EB          0593*       ex de,hl ; uh.l = dx/dy
040865             0594*   ; test uh.l for 0
040865 19          0595*       add hl,de
040866 B7          0596*       or a
040867 ED 52       0597*       sbc hl,de
040869 28 22       0598*       jr z,@is_zero
04086B             0599*   ; test uh.l for 1
04086B AF          0600*       xor a ; clear carry
04086C EB          0601*       ex de,hl
04086D 21 00 01 00 0602*       ld hl,1*256 ; 1 in 16.8 fixed format
040871 ED 52       0603*       sbc hl,de
040873 28 13       0604*       jr z,@is_45
040875 EB          0605*       ex de,hl
040876             0606*   ; no special cases so we move on
040876             0607*   ; l contains the fractional portion of tan(uh.l)
040876             0608*   ; we multiply it by three to get our lookup table index
040876 26 03       0609*       ld h,3
040878 ED 6C       0610*       mlt hl ; index into lut
04087A 11 00 00 00 0611*       ld de,0 ; clear deu
04087E 54          0612*       ld d,h ; copy hl to de
04087F 5D          0613*       ld e,l ; de contains our index
040880 21 85 0C 04 0614*       ld hl,atan_lut_168 ; grab the lut address
040884 19          0615*       add hl,de ; bump hl by the index
040885 ED 27       0616*       ld hl,(hl) ; don't try this on a z80!
040887 C9          0617*       ret ; and out
040888             0618*   @is_45:
040888 21 00 20 00 0619*       ld hl,32*256
04088C C9          0620*       ret
04088D             0621*   ; for the case tan(0)
04088D             0622*   @is_zero:
04088D 21 00 00 00 0623*       ld hl,0*256
040891 C9          0624*       ret
040892             0625*   
040892             0626*   ; Expects  ADL mode
040892             0627*   ; Inputs:  UH.L
040892             0628*   ; Outputs: UH.L is the 16.8 square root
040892             0629*   ;          UDE is the integer difference inputHL-DE^2
040892             0630*   sqrt168:
040892 CD 9C 08 04 0631*       call sqrt24
040896 EB          0632*       ex de,hl
040897 29          0633*       add hl,hl
040898 29          0634*       add hl,hl
040899 29          0635*       add hl,hl
04089A 29          0636*       add hl,hl
04089B C9          0637*       ret
04089C             0638*   
04089C             0639*   ; credit: xeda112358
04089C             0640*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
04089C             0641*   sqrt24:
04089C             0642*   ; Expects ADL mode
04089C             0643*   ; Inputs: HL
04089C             0644*   ; Outputs: DE is the integer square root
04089C             0645*   ;  HL is the difference inputHL-DE^2
04089C             0646*   ;  c flag reset
04089C 01 00 00 00 0647*       ld bc,0 ; clear bcu
0408A0 11 00 00 00 0648*       ld de,0 ; clear deu
0408A4 AF          0649*       xor a
0408A5 45          0650*       ld b,l
0408A6 C5          0651*       push bc
0408A7 47          0652*       ld b,a
0408A8 6F          0653*       ld l,a
0408A9             0654*   ; Iteration 1
0408A9 29          0655*       add hl,hl
0408AA CB 11       0656*       rl c
0408AC 29          0657*       add hl,hl
0408AD CB 11       0658*       rl c
0408AF 91          0659*       sub c
0408B0 30 04       0660*       jr nc,$+6
0408B2 1C          0661*       inc e
0408B3 1C          0662*       inc e
0408B4 2F          0663*       cpl
0408B5 4F          0664*       ld c,a
0408B6             0665*   ; Iteration 2
0408B6 29          0666*       add hl,hl
0408B7 CB 11       0667*       rl c
0408B9 29          0668*       add hl,hl
0408BA CB 11       0669*       rl c
0408BC CB 13       0670*       rl e
0408BE 7B          0671*       ld a,e
0408BF 91          0672*       sub c
0408C0 30 04       0673*       jr nc,$+6
0408C2 1C          0674*       inc e
0408C3 1C          0675*       inc e
0408C4 2F          0676*       cpl
0408C5 4F          0677*       ld c,a
0408C6             0678*   ; Iteration 3
0408C6 29          0679*       add hl,hl
0408C7 CB 11       0680*       rl c
0408C9 29          0681*       add hl,hl
0408CA CB 11       0682*       rl c
0408CC CB 13       0683*       rl e
0408CE 7B          0684*       ld a,e
0408CF 91          0685*       sub c
0408D0 30 04       0686*       jr nc,$+6
0408D2 1C          0687*       inc e
0408D3 1C          0688*       inc e
0408D4 2F          0689*       cpl
0408D5 4F          0690*       ld c,a
0408D6             0691*   ; Iteration 4
0408D6 29          0692*       add hl,hl
0408D7 CB 11       0693*       rl c
0408D9 29          0694*       add hl,hl
0408DA CB 11       0695*       rl c
0408DC CB 13       0696*       rl e
0408DE 7B          0697*       ld a,e
0408DF 91          0698*       sub c
0408E0 30 04       0699*       jr nc,$+6
0408E2 1C          0700*       inc e
0408E3 1C          0701*       inc e
0408E4 2F          0702*       cpl
0408E5 4F          0703*       ld c,a
0408E6             0704*   ; Iteration 5
0408E6 29          0705*       add hl,hl
0408E7 CB 11       0706*       rl c
0408E9 29          0707*       add hl,hl
0408EA CB 11       0708*       rl c
0408EC CB 13       0709*       rl e
0408EE 7B          0710*       ld a,e
0408EF 91          0711*       sub c
0408F0 30 04       0712*       jr nc,$+6
0408F2 1C          0713*       inc e
0408F3 1C          0714*       inc e
0408F4 2F          0715*       cpl
0408F5 4F          0716*       ld c,a
0408F6             0717*   ; Iteration 6
0408F6 29          0718*       add hl,hl
0408F7 CB 11       0719*       rl c
0408F9 29          0720*       add hl,hl
0408FA CB 11       0721*       rl c
0408FC CB 13       0722*       rl e
0408FE 7B          0723*       ld a,e
0408FF 91          0724*       sub c
040900 30 04       0725*       jr nc,$+6
040902 1C          0726*       inc e
040903 1C          0727*       inc e
040904 2F          0728*       cpl
040905 4F          0729*       ld c,a
040906             0730*   ; Iteration 7
040906 29          0731*       add hl,hl
040907 CB 11       0732*       rl c
040909 29          0733*       add hl,hl
04090A CB 11       0734*       rl c
04090C CB 10       0735*       rl b
04090E EB          0736*       ex de,hl
04090F 29          0737*       add hl,hl
040910 E5          0738*       push hl
040911 ED 42       0739*       sbc hl,bc
040913 30 06       0740*       jr nc,$+8
040915 7C          0741*       ld a,h
040916 2F          0742*       cpl
040917 47          0743*       ld b,a
040918 7D          0744*       ld a,l
040919 2F          0745*       cpl
04091A 4F          0746*       ld c,a
04091B E1          0747*       pop hl
04091C 30 02       0748*       jr nc,$+4
04091E 23          0749*       inc hl
04091F 23          0750*       inc hl
040920 EB          0751*       ex de,hl
040921             0752*   ; Iteration 8
040921 29          0753*       add hl,hl
040922 69          0754*       ld l,c
040923 60          0755*       ld h,b
040924 ED 6A       0756*       adc hl,hl
040926 ED 6A       0757*       adc hl,hl
040928 EB          0758*       ex de,hl
040929 29          0759*       add hl,hl
04092A ED 52       0760*       sbc hl,de
04092C 19          0761*       add hl,de
04092D EB          0762*       ex de,hl
04092E 30 04       0763*       jr nc,$+6
040930 ED 52       0764*       sbc hl,de
040932 13          0765*       inc de
040933 13          0766*       inc de
040934             0767*   ; Iteration 9
040934 F1          0768*       pop af
040935 17          0769*       rla
040936 ED 6A       0770*       adc hl,hl
040938 17          0771*       rla
040939 ED 6A       0772*       adc hl,hl
04093B EB          0773*       ex de,hl
04093C 29          0774*       add hl,hl
04093D ED 52       0775*       sbc hl,de
04093F 19          0776*       add hl,de
040940 EB          0777*       ex de,hl
040941 30 04       0778*       jr nc,$+6
040943 ED 52       0779*       sbc hl,de
040945 13          0780*       inc de
040946 13          0781*       inc de
040947             0782*   ; Iteration 10
040947 17          0783*       rla
040948 ED 6A       0784*       adc hl,hl
04094A 17          0785*       rla
04094B ED 6A       0786*       adc hl,hl
04094D EB          0787*       ex de,hl
04094E 29          0788*       add hl,hl
04094F ED 52       0789*       sbc hl,de
040951 19          0790*       add hl,de
040952 EB          0791*       ex de,hl
040953 30 04       0792*       jr nc,$+6
040955 ED 52       0793*       sbc hl,de
040957 13          0794*       inc de
040958 13          0795*       inc de
040959             0796*   ; Iteration 11
040959 17          0797*       rla
04095A ED 6A       0798*       adc hl,hl
04095C 17          0799*       rla
04095D ED 6A       0800*       adc hl,hl
04095F EB          0801*       ex de,hl
040960 29          0802*       add hl,hl
040961 ED 52       0803*       sbc hl,de
040963 19          0804*       add hl,de
040964 EB          0805*       ex de,hl
040965 30 04       0806*       jr nc,$+6
040967 ED 52       0807*       sbc hl,de
040969 13          0808*       inc de
04096A 13          0809*       inc de
04096B             0810*   ; Iteration 12
04096B 17          0811*       rla
04096C ED 6A       0812*       adc hl,hl
04096E 17          0813*       rla
04096F ED 6A       0814*       adc hl,hl
040971 EB          0815*       ex de,hl
040972 29          0816*       add hl,hl
040973 ED 52       0817*       sbc hl,de
040975 19          0818*       add hl,de
040976 EB          0819*       ex de,hl
040977 30 04       0820*       jr nc,$+6
040979 ED 52       0821*       sbc hl,de
04097B 13          0822*       inc de
04097C 13          0823*       inc de
04097D CB 1A       0824*       rr d
04097F CB 1B       0825*       rr e
040981 C9          0826*       ret
040982             0827*   
040982             0828*   sin_lut_168:
040982 00 00 00    0829*       dl 0x000000 ; 0.000 00, 0.000
040985 06 00 00    0830*       dl 0x000006 ; 1.406 01, 0.025
040988 0C 00 00    0831*       dl 0x00000C ; 2.813 02, 0.049
04098B 12 00 00    0832*       dl 0x000012 ; 4.219 03, 0.074
04098E 19 00 00    0833*       dl 0x000019 ; 5.625 04, 0.098
040991 1F 00 00    0834*       dl 0x00001F ; 7.031 05, 0.122
040994 25 00 00    0835*       dl 0x000025 ; 8.438 06, 0.147
040997 2B 00 00    0836*       dl 0x00002B ; 9.844 07, 0.171
04099A 31 00 00    0837*       dl 0x000031 ; 11.250 08, 0.195
04099D 38 00 00    0838*       dl 0x000038 ; 12.656 09, 0.219
0409A0 3E 00 00    0839*       dl 0x00003E ; 14.063 0A, 0.243
0409A3 44 00 00    0840*       dl 0x000044 ; 15.469 0B, 0.267
0409A6 4A 00 00    0841*       dl 0x00004A ; 16.875 0C, 0.290
0409A9 50 00 00    0842*       dl 0x000050 ; 18.281 0D, 0.314
0409AC 56 00 00    0843*       dl 0x000056 ; 19.688 0E, 0.337
0409AF 5C 00 00    0844*       dl 0x00005C ; 21.094 0F, 0.360
0409B2 61 00 00    0845*       dl 0x000061 ; 22.500 10, 0.383
0409B5 67 00 00    0846*       dl 0x000067 ; 23.906 11, 0.405
0409B8 6D 00 00    0847*       dl 0x00006D ; 25.313 12, 0.428
0409BB 73 00 00    0848*       dl 0x000073 ; 26.719 13, 0.450
0409BE 78 00 00    0849*       dl 0x000078 ; 28.125 14, 0.471
0409C1 7E 00 00    0850*       dl 0x00007E ; 29.531 15, 0.493
0409C4 83 00 00    0851*       dl 0x000083 ; 30.938 16, 0.514
0409C7 88 00 00    0852*       dl 0x000088 ; 32.344 17, 0.535
0409CA 8E 00 00    0853*       dl 0x00008E ; 33.750 18, 0.556
0409CD 93 00 00    0854*       dl 0x000093 ; 35.156 19, 0.576
0409D0 98 00 00    0855*       dl 0x000098 ; 36.563 1A, 0.596
0409D3 9D 00 00    0856*       dl 0x00009D ; 37.969 1B, 0.615
0409D6 A2 00 00    0857*       dl 0x0000A2 ; 39.375 1C, 0.634
0409D9 A7 00 00    0858*       dl 0x0000A7 ; 40.781 1D, 0.653
0409DC AB 00 00    0859*       dl 0x0000AB ; 42.188 1E, 0.672
0409DF B0 00 00    0860*       dl 0x0000B0 ; 43.594 1F, 0.690
0409E2 B5 00 00    0861*       dl 0x0000B5 ; 45.000 20, 0.707
0409E5 B9 00 00    0862*       dl 0x0000B9 ; 46.406 21, 0.724
0409E8 BD 00 00    0863*       dl 0x0000BD ; 47.813 22, 0.741
0409EB C1 00 00    0864*       dl 0x0000C1 ; 49.219 23, 0.757
0409EE C5 00 00    0865*       dl 0x0000C5 ; 50.625 24, 0.773
0409F1 C9 00 00    0866*       dl 0x0000C9 ; 52.031 25, 0.788
0409F4 CD 00 00    0867*       dl 0x0000CD ; 53.438 26, 0.803
0409F7 D1 00 00    0868*       dl 0x0000D1 ; 54.844 27, 0.818
0409FA D4 00 00    0869*       dl 0x0000D4 ; 56.250 28, 0.831
0409FD D8 00 00    0870*       dl 0x0000D8 ; 57.656 29, 0.845
040A00 DB 00 00    0871*       dl 0x0000DB ; 59.063 2A, 0.858
040A03 DE 00 00    0872*       dl 0x0000DE ; 60.469 2B, 0.870
040A06 E1 00 00    0873*       dl 0x0000E1 ; 61.875 2C, 0.882
040A09 E4 00 00    0874*       dl 0x0000E4 ; 63.281 2D, 0.893
040A0C E7 00 00    0875*       dl 0x0000E7 ; 64.688 2E, 0.904
040A0F EA 00 00    0876*       dl 0x0000EA ; 66.094 2F, 0.914
040A12 EC 00 00    0877*       dl 0x0000EC ; 67.500 30, 0.924
040A15 EE 00 00    0878*       dl 0x0000EE ; 68.906 31, 0.933
040A18 F1 00 00    0879*       dl 0x0000F1 ; 70.313 32, 0.942
040A1B F3 00 00    0880*       dl 0x0000F3 ; 71.719 33, 0.950
040A1E F4 00 00    0881*       dl 0x0000F4 ; 73.125 34, 0.957
040A21 F6 00 00    0882*       dl 0x0000F6 ; 74.531 35, 0.964
040A24 F8 00 00    0883*       dl 0x0000F8 ; 75.938 36, 0.970
040A27 F9 00 00    0884*       dl 0x0000F9 ; 77.344 37, 0.976
040A2A FB 00 00    0885*       dl 0x0000FB ; 78.750 38, 0.981
040A2D FC 00 00    0886*       dl 0x0000FC ; 80.156 39, 0.985
040A30 FD 00 00    0887*       dl 0x0000FD ; 81.563 3A, 0.989
040A33 FE 00 00    0888*       dl 0x0000FE ; 82.969 3B, 0.992
040A36 FE 00 00    0889*       dl 0x0000FE ; 84.375 3C, 0.995
040A39 FF 00 00    0890*       dl 0x0000FF ; 85.781 3D, 0.997
040A3C FF 00 00    0891*       dl 0x0000FF ; 87.188 3E, 0.999
040A3F FF 00 00    0892*       dl 0x0000FF ; 88.594 3F, 1.000
040A42 00 01 00    0893*       dl 0x000100 ; 90.000 40, 1.000
040A45 FF 00 00    0894*       dl 0x0000FF ; 91.406 41, 1.000
040A48 FF 00 00    0895*       dl 0x0000FF ; 92.813 42, 0.999
040A4B FF 00 00    0896*       dl 0x0000FF ; 94.219 43, 0.997
040A4E FE 00 00    0897*       dl 0x0000FE ; 95.625 44, 0.995
040A51 FE 00 00    0898*       dl 0x0000FE ; 97.031 45, 0.992
040A54 FD 00 00    0899*       dl 0x0000FD ; 98.438 46, 0.989
040A57 FC 00 00    0900*       dl 0x0000FC ; 99.844 47, 0.985
040A5A FB 00 00    0901*       dl 0x0000FB ; 101.250 48, 0.981
040A5D F9 00 00    0902*       dl 0x0000F9 ; 102.656 49, 0.976
040A60 F8 00 00    0903*       dl 0x0000F8 ; 104.063 4A, 0.970
040A63 F6 00 00    0904*       dl 0x0000F6 ; 105.469 4B, 0.964
040A66 F4 00 00    0905*       dl 0x0000F4 ; 106.875 4C, 0.957
040A69 F3 00 00    0906*       dl 0x0000F3 ; 108.281 4D, 0.950
040A6C F1 00 00    0907*       dl 0x0000F1 ; 109.688 4E, 0.942
040A6F EE 00 00    0908*       dl 0x0000EE ; 111.094 4F, 0.933
040A72 EC 00 00    0909*       dl 0x0000EC ; 112.500 50, 0.924
040A75 EA 00 00    0910*       dl 0x0000EA ; 113.906 51, 0.914
040A78 E7 00 00    0911*       dl 0x0000E7 ; 115.313 52, 0.904
040A7B E4 00 00    0912*       dl 0x0000E4 ; 116.719 53, 0.893
040A7E E1 00 00    0913*       dl 0x0000E1 ; 118.125 54, 0.882
040A81 DE 00 00    0914*       dl 0x0000DE ; 119.531 55, 0.870
040A84 DB 00 00    0915*       dl 0x0000DB ; 120.938 56, 0.858
040A87 D8 00 00    0916*       dl 0x0000D8 ; 122.344 57, 0.845
040A8A D4 00 00    0917*       dl 0x0000D4 ; 123.750 58, 0.831
040A8D D1 00 00    0918*       dl 0x0000D1 ; 125.156 59, 0.818
040A90 CD 00 00    0919*       dl 0x0000CD ; 126.563 5A, 0.803
040A93 C9 00 00    0920*       dl 0x0000C9 ; 127.969 5B, 0.788
040A96 C5 00 00    0921*       dl 0x0000C5 ; 129.375 5C, 0.773
040A99 C1 00 00    0922*       dl 0x0000C1 ; 130.781 5D, 0.757
040A9C BD 00 00    0923*       dl 0x0000BD ; 132.188 5E, 0.741
040A9F B9 00 00    0924*       dl 0x0000B9 ; 133.594 5F, 0.724
040AA2 B5 00 00    0925*       dl 0x0000B5 ; 135.000 60, 0.707
040AA5 B0 00 00    0926*       dl 0x0000B0 ; 136.406 61, 0.690
040AA8 AB 00 00    0927*       dl 0x0000AB ; 137.813 62, 0.672
040AAB A7 00 00    0928*       dl 0x0000A7 ; 139.219 63, 0.653
040AAE A2 00 00    0929*       dl 0x0000A2 ; 140.625 64, 0.634
040AB1 9D 00 00    0930*       dl 0x00009D ; 142.031 65, 0.615
040AB4 98 00 00    0931*       dl 0x000098 ; 143.438 66, 0.596
040AB7 93 00 00    0932*       dl 0x000093 ; 144.844 67, 0.576
040ABA 8E 00 00    0933*       dl 0x00008E ; 146.250 68, 0.556
040ABD 88 00 00    0934*       dl 0x000088 ; 147.656 69, 0.535
040AC0 83 00 00    0935*       dl 0x000083 ; 149.063 6A, 0.514
040AC3 7E 00 00    0936*       dl 0x00007E ; 150.469 6B, 0.493
040AC6 78 00 00    0937*       dl 0x000078 ; 151.875 6C, 0.471
040AC9 73 00 00    0938*       dl 0x000073 ; 153.281 6D, 0.450
040ACC 6D 00 00    0939*       dl 0x00006D ; 154.688 6E, 0.428
040ACF 67 00 00    0940*       dl 0x000067 ; 156.094 6F, 0.405
040AD2 61 00 00    0941*       dl 0x000061 ; 157.500 70, 0.383
040AD5 5C 00 00    0942*       dl 0x00005C ; 158.906 71, 0.360
040AD8 56 00 00    0943*       dl 0x000056 ; 160.313 72, 0.337
040ADB 50 00 00    0944*       dl 0x000050 ; 161.719 73, 0.314
040ADE 4A 00 00    0945*       dl 0x00004A ; 163.125 74, 0.290
040AE1 44 00 00    0946*       dl 0x000044 ; 164.531 75, 0.267
040AE4 3E 00 00    0947*       dl 0x00003E ; 165.938 76, 0.243
040AE7 38 00 00    0948*       dl 0x000038 ; 167.344 77, 0.219
040AEA 31 00 00    0949*       dl 0x000031 ; 168.750 78, 0.195
040AED 2B 00 00    0950*       dl 0x00002B ; 170.156 79, 0.171
040AF0 25 00 00    0951*       dl 0x000025 ; 171.563 7A, 0.147
040AF3 1F 00 00    0952*       dl 0x00001F ; 172.969 7B, 0.122
040AF6 19 00 00    0953*       dl 0x000019 ; 174.375 7C, 0.098
040AF9 12 00 00    0954*       dl 0x000012 ; 175.781 7D, 0.074
040AFC 0C 00 00    0955*       dl 0x00000C ; 177.188 7E, 0.049
040AFF 06 00 00    0956*       dl 0x000006 ; 178.594 7F, 0.025
040B02 00 00 00    0957*       dl 0x000000 ; 180.000 80, 0.000
040B05 FA FF FF    0958*       dl 0xFFFFFA ; 181.406 81, -0.025
040B08 F4 FF FF    0959*       dl 0xFFFFF4 ; 182.813 82, -0.049
040B0B EE FF FF    0960*       dl 0xFFFFEE ; 184.219 83, -0.074
040B0E E7 FF FF    0961*       dl 0xFFFFE7 ; 185.625 84, -0.098
040B11 E1 FF FF    0962*       dl 0xFFFFE1 ; 187.031 85, -0.122
040B14 DB FF FF    0963*       dl 0xFFFFDB ; 188.438 86, -0.147
040B17 D5 FF FF    0964*       dl 0xFFFFD5 ; 189.844 87, -0.171
040B1A CF FF FF    0965*       dl 0xFFFFCF ; 191.250 88, -0.195
040B1D C8 FF FF    0966*       dl 0xFFFFC8 ; 192.656 89, -0.219
040B20 C2 FF FF    0967*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040B23 BC FF FF    0968*       dl 0xFFFFBC ; 195.469 8B, -0.267
040B26 B6 FF FF    0969*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040B29 B0 FF FF    0970*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040B2C AA FF FF    0971*       dl 0xFFFFAA ; 199.688 8E, -0.337
040B2F A4 FF FF    0972*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040B32 9F FF FF    0973*       dl 0xFFFF9F ; 202.500 90, -0.383
040B35 99 FF FF    0974*       dl 0xFFFF99 ; 203.906 91, -0.405
040B38 93 FF FF    0975*       dl 0xFFFF93 ; 205.313 92, -0.428
040B3B 8D FF FF    0976*       dl 0xFFFF8D ; 206.719 93, -0.450
040B3E 88 FF FF    0977*       dl 0xFFFF88 ; 208.125 94, -0.471
040B41 82 FF FF    0978*       dl 0xFFFF82 ; 209.531 95, -0.493
040B44 7D FF FF    0979*       dl 0xFFFF7D ; 210.938 96, -0.514
040B47 78 FF FF    0980*       dl 0xFFFF78 ; 212.344 97, -0.535
040B4A 72 FF FF    0981*       dl 0xFFFF72 ; 213.750 98, -0.556
040B4D 6D FF FF    0982*       dl 0xFFFF6D ; 215.156 99, -0.576
040B50 68 FF FF    0983*       dl 0xFFFF68 ; 216.563 9A, -0.596
040B53 63 FF FF    0984*       dl 0xFFFF63 ; 217.969 9B, -0.615
040B56 5E FF FF    0985*       dl 0xFFFF5E ; 219.375 9C, -0.634
040B59 59 FF FF    0986*       dl 0xFFFF59 ; 220.781 9D, -0.653
040B5C 55 FF FF    0987*       dl 0xFFFF55 ; 222.188 9E, -0.672
040B5F 50 FF FF    0988*       dl 0xFFFF50 ; 223.594 9F, -0.690
040B62 4B FF FF    0989*       dl 0xFFFF4B ; 225.000 A0, -0.707
040B65 47 FF FF    0990*       dl 0xFFFF47 ; 226.406 A1, -0.724
040B68 43 FF FF    0991*       dl 0xFFFF43 ; 227.813 A2, -0.741
040B6B 3F FF FF    0992*       dl 0xFFFF3F ; 229.219 A3, -0.757
040B6E 3B FF FF    0993*       dl 0xFFFF3B ; 230.625 A4, -0.773
040B71 37 FF FF    0994*       dl 0xFFFF37 ; 232.031 A5, -0.788
040B74 33 FF FF    0995*       dl 0xFFFF33 ; 233.438 A6, -0.803
040B77 2F FF FF    0996*       dl 0xFFFF2F ; 234.844 A7, -0.818
040B7A 2C FF FF    0997*       dl 0xFFFF2C ; 236.250 A8, -0.831
040B7D 28 FF FF    0998*       dl 0xFFFF28 ; 237.656 A9, -0.845
040B80 25 FF FF    0999*       dl 0xFFFF25 ; 239.063 AA, -0.858
040B83 22 FF FF    1000*       dl 0xFFFF22 ; 240.469 AB, -0.870
040B86 1F FF FF    1001*       dl 0xFFFF1F ; 241.875 AC, -0.882
040B89 1C FF FF    1002*       dl 0xFFFF1C ; 243.281 AD, -0.893
040B8C 19 FF FF    1003*       dl 0xFFFF19 ; 244.688 AE, -0.904
040B8F 16 FF FF    1004*       dl 0xFFFF16 ; 246.094 AF, -0.914
040B92 14 FF FF    1005*       dl 0xFFFF14 ; 247.500 B0, -0.924
040B95 12 FF FF    1006*       dl 0xFFFF12 ; 248.906 B1, -0.933
040B98 0F FF FF    1007*       dl 0xFFFF0F ; 250.313 B2, -0.942
040B9B 0D FF FF    1008*       dl 0xFFFF0D ; 251.719 B3, -0.950
040B9E 0C FF FF    1009*       dl 0xFFFF0C ; 253.125 B4, -0.957
040BA1 0A FF FF    1010*       dl 0xFFFF0A ; 254.531 B5, -0.964
040BA4 08 FF FF    1011*       dl 0xFFFF08 ; 255.938 B6, -0.970
040BA7 07 FF FF    1012*       dl 0xFFFF07 ; 257.344 B7, -0.976
040BAA 05 FF FF    1013*       dl 0xFFFF05 ; 258.750 B8, -0.981
040BAD 04 FF FF    1014*       dl 0xFFFF04 ; 260.156 B9, -0.985
040BB0 03 FF FF    1015*       dl 0xFFFF03 ; 261.563 BA, -0.989
040BB3 02 FF FF    1016*       dl 0xFFFF02 ; 262.969 BB, -0.992
040BB6 02 FF FF    1017*       dl 0xFFFF02 ; 264.375 BC, -0.995
040BB9 01 FF FF    1018*       dl 0xFFFF01 ; 265.781 BD, -0.997
040BBC 01 FF FF    1019*       dl 0xFFFF01 ; 267.188 BE, -0.999
040BBF 01 FF FF    1020*       dl 0xFFFF01 ; 268.594 BF, -1.000
040BC2 00 FF FF    1021*       dl 0xFFFF00 ; 270.000 C0, -1.000
040BC5 01 FF FF    1022*       dl 0xFFFF01 ; 271.406 C1, -1.000
040BC8 01 FF FF    1023*       dl 0xFFFF01 ; 272.813 C2, -0.999
040BCB 01 FF FF    1024*       dl 0xFFFF01 ; 274.219 C3, -0.997
040BCE 02 FF FF    1025*       dl 0xFFFF02 ; 275.625 C4, -0.995
040BD1 02 FF FF    1026*       dl 0xFFFF02 ; 277.031 C5, -0.992
040BD4 03 FF FF    1027*       dl 0xFFFF03 ; 278.438 C6, -0.989
040BD7 04 FF FF    1028*       dl 0xFFFF04 ; 279.844 C7, -0.985
040BDA 05 FF FF    1029*       dl 0xFFFF05 ; 281.250 C8, -0.981
040BDD 07 FF FF    1030*       dl 0xFFFF07 ; 282.656 C9, -0.976
040BE0 08 FF FF    1031*       dl 0xFFFF08 ; 284.063 CA, -0.970
040BE3 0A FF FF    1032*       dl 0xFFFF0A ; 285.469 CB, -0.964
040BE6 0C FF FF    1033*       dl 0xFFFF0C ; 286.875 CC, -0.957
040BE9 0D FF FF    1034*       dl 0xFFFF0D ; 288.281 CD, -0.950
040BEC 0F FF FF    1035*       dl 0xFFFF0F ; 289.688 CE, -0.942
040BEF 12 FF FF    1036*       dl 0xFFFF12 ; 291.094 CF, -0.933
040BF2 14 FF FF    1037*       dl 0xFFFF14 ; 292.500 D0, -0.924
040BF5 16 FF FF    1038*       dl 0xFFFF16 ; 293.906 D1, -0.914
040BF8 19 FF FF    1039*       dl 0xFFFF19 ; 295.313 D2, -0.904
040BFB 1C FF FF    1040*       dl 0xFFFF1C ; 296.719 D3, -0.893
040BFE 1F FF FF    1041*       dl 0xFFFF1F ; 298.125 D4, -0.882
040C01 22 FF FF    1042*       dl 0xFFFF22 ; 299.531 D5, -0.870
040C04 25 FF FF    1043*       dl 0xFFFF25 ; 300.938 D6, -0.858
040C07 28 FF FF    1044*       dl 0xFFFF28 ; 302.344 D7, -0.845
040C0A 2C FF FF    1045*       dl 0xFFFF2C ; 303.750 D8, -0.831
040C0D 2F FF FF    1046*       dl 0xFFFF2F ; 305.156 D9, -0.818
040C10 33 FF FF    1047*       dl 0xFFFF33 ; 306.563 DA, -0.803
040C13 37 FF FF    1048*       dl 0xFFFF37 ; 307.969 DB, -0.788
040C16 3B FF FF    1049*       dl 0xFFFF3B ; 309.375 DC, -0.773
040C19 3F FF FF    1050*       dl 0xFFFF3F ; 310.781 DD, -0.757
040C1C 43 FF FF    1051*       dl 0xFFFF43 ; 312.188 DE, -0.741
040C1F 47 FF FF    1052*       dl 0xFFFF47 ; 313.594 DF, -0.724
040C22 4B FF FF    1053*       dl 0xFFFF4B ; 315.000 E0, -0.707
040C25 50 FF FF    1054*       dl 0xFFFF50 ; 316.406 E1, -0.690
040C28 55 FF FF    1055*       dl 0xFFFF55 ; 317.813 E2, -0.672
040C2B 59 FF FF    1056*       dl 0xFFFF59 ; 319.219 E3, -0.653
040C2E 5E FF FF    1057*       dl 0xFFFF5E ; 320.625 E4, -0.634
040C31 63 FF FF    1058*       dl 0xFFFF63 ; 322.031 E5, -0.615
040C34 68 FF FF    1059*       dl 0xFFFF68 ; 323.438 E6, -0.596
040C37 6D FF FF    1060*       dl 0xFFFF6D ; 324.844 E7, -0.576
040C3A 72 FF FF    1061*       dl 0xFFFF72 ; 326.250 E8, -0.556
040C3D 78 FF FF    1062*       dl 0xFFFF78 ; 327.656 E9, -0.535
040C40 7D FF FF    1063*       dl 0xFFFF7D ; 329.063 EA, -0.514
040C43 82 FF FF    1064*       dl 0xFFFF82 ; 330.469 EB, -0.493
040C46 88 FF FF    1065*       dl 0xFFFF88 ; 331.875 EC, -0.471
040C49 8D FF FF    1066*       dl 0xFFFF8D ; 333.281 ED, -0.450
040C4C 93 FF FF    1067*       dl 0xFFFF93 ; 334.688 EE, -0.428
040C4F 99 FF FF    1068*       dl 0xFFFF99 ; 336.094 EF, -0.405
040C52 9F FF FF    1069*       dl 0xFFFF9F ; 337.500 F0, -0.383
040C55 A4 FF FF    1070*       dl 0xFFFFA4 ; 338.906 F1, -0.360
040C58 AA FF FF    1071*       dl 0xFFFFAA ; 340.313 F2, -0.337
040C5B B0 FF FF    1072*       dl 0xFFFFB0 ; 341.719 F3, -0.314
040C5E B6 FF FF    1073*       dl 0xFFFFB6 ; 343.125 F4, -0.290
040C61 BC FF FF    1074*       dl 0xFFFFBC ; 344.531 F5, -0.267
040C64 C2 FF FF    1075*       dl 0xFFFFC2 ; 345.938 F6, -0.243
040C67 C8 FF FF    1076*       dl 0xFFFFC8 ; 347.344 F7, -0.219
040C6A CF FF FF    1077*       dl 0xFFFFCF ; 348.750 F8, -0.195
040C6D D5 FF FF    1078*       dl 0xFFFFD5 ; 350.156 F9, -0.171
040C70 DB FF FF    1079*       dl 0xFFFFDB ; 351.563 FA, -0.147
040C73 E1 FF FF    1080*       dl 0xFFFFE1 ; 352.969 FB, -0.122
040C76 E7 FF FF    1081*       dl 0xFFFFE7 ; 354.375 FC, -0.098
040C79 EE FF FF    1082*       dl 0xFFFFEE ; 355.781 FD, -0.074
040C7C F4 FF FF    1083*       dl 0xFFFFF4 ; 357.188 FE, -0.049
040C7F FA FF FF    1084*       dl 0xFFFFFA ; 358.594 FF, -0.025
040C82 00 00 00    1085*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
040C85             1086*   
040C85             1087*   atan_lut_168:
040C85 00 00 00    1088*       dl 0x000000 ; 000000, 0.000
040C88 28 00 00    1089*       dl 0x000028 ; 000001, 0.224
040C8B 51 00 00    1090*       dl 0x000051 ; 000002, 0.448
040C8E 7A 00 00    1091*       dl 0x00007A ; 000003, 0.671
040C91 A2 00 00    1092*       dl 0x0000A2 ; 000004, 0.895
040C94 CB 00 00    1093*       dl 0x0000CB ; 000005, 1.119
040C97 F4 00 00    1094*       dl 0x0000F4 ; 000006, 1.343
040C9A 1D 01 00    1095*       dl 0x00011D ; 000007, 1.566
040C9D 45 01 00    1096*       dl 0x000145 ; 000008, 1.790
040CA0 6E 01 00    1097*       dl 0x00016E ; 000009, 2.013
040CA3 97 01 00    1098*       dl 0x000197 ; 00000A, 2.237
040CA6 BF 01 00    1099*       dl 0x0001BF ; 00000B, 2.460
040CA9 E8 01 00    1100*       dl 0x0001E8 ; 00000C, 2.684
040CAC 11 02 00    1101*       dl 0x000211 ; 00000D, 2.907
040CAF 39 02 00    1102*       dl 0x000239 ; 00000E, 3.130
040CB2 62 02 00    1103*       dl 0x000262 ; 00000F, 3.353
040CB5 8B 02 00    1104*       dl 0x00028B ; 000010, 3.576
040CB8 B3 02 00    1105*       dl 0x0002B3 ; 000011, 3.799
040CBB DC 02 00    1106*       dl 0x0002DC ; 000012, 4.022
040CBE 04 03 00    1107*       dl 0x000304 ; 000013, 4.245
040CC1 2D 03 00    1108*       dl 0x00032D ; 000014, 4.467
040CC4 55 03 00    1109*       dl 0x000355 ; 000015, 4.690
040CC7 7E 03 00    1110*       dl 0x00037E ; 000016, 4.912
040CCA A6 03 00    1111*       dl 0x0003A6 ; 000017, 5.134
040CCD CE 03 00    1112*       dl 0x0003CE ; 000018, 5.356
040CD0 F7 03 00    1113*       dl 0x0003F7 ; 000019, 5.578
040CD3 1F 04 00    1114*       dl 0x00041F ; 00001A, 5.799
040CD6 48 04 00    1115*       dl 0x000448 ; 00001B, 6.021
040CD9 70 04 00    1116*       dl 0x000470 ; 00001C, 6.242
040CDC 98 04 00    1117*       dl 0x000498 ; 00001D, 6.463
040CDF C0 04 00    1118*       dl 0x0004C0 ; 00001E, 6.684
040CE2 E8 04 00    1119*       dl 0x0004E8 ; 00001F, 6.905
040CE5 11 05 00    1120*       dl 0x000511 ; 000020, 7.125
040CE8 39 05 00    1121*       dl 0x000539 ; 000021, 7.345
040CEB 61 05 00    1122*       dl 0x000561 ; 000022, 7.565
040CEE 89 05 00    1123*       dl 0x000589 ; 000023, 7.785
040CF1 B1 05 00    1124*       dl 0x0005B1 ; 000024, 8.005
040CF4 D9 05 00    1125*       dl 0x0005D9 ; 000025, 8.224
040CF7 01 06 00    1126*       dl 0x000601 ; 000026, 8.443
040CFA 28 06 00    1127*       dl 0x000628 ; 000027, 8.662
040CFD 50 06 00    1128*       dl 0x000650 ; 000028, 8.881
040D00 78 06 00    1129*       dl 0x000678 ; 000029, 9.099
040D03 A0 06 00    1130*       dl 0x0006A0 ; 00002A, 9.317
040D06 C7 06 00    1131*       dl 0x0006C7 ; 00002B, 9.535
040D09 EF 06 00    1132*       dl 0x0006EF ; 00002C, 9.752
040D0C 16 07 00    1133*       dl 0x000716 ; 00002D, 9.970
040D0F 3E 07 00    1134*       dl 0x00073E ; 00002E, 10.187
040D12 65 07 00    1135*       dl 0x000765 ; 00002F, 10.403
040D15 8D 07 00    1136*       dl 0x00078D ; 000030, 10.620
040D18 B4 07 00    1137*       dl 0x0007B4 ; 000031, 10.836
040D1B DB 07 00    1138*       dl 0x0007DB ; 000032, 11.051
040D1E 03 08 00    1139*       dl 0x000803 ; 000033, 11.267
040D21 2A 08 00    1140*       dl 0x00082A ; 000034, 11.482
040D24 51 08 00    1141*       dl 0x000851 ; 000035, 11.697
040D27 78 08 00    1142*       dl 0x000878 ; 000036, 11.911
040D2A 9F 08 00    1143*       dl 0x00089F ; 000037, 12.125
040D2D C6 08 00    1144*       dl 0x0008C6 ; 000038, 12.339
040D30 ED 08 00    1145*       dl 0x0008ED ; 000039, 12.553
040D33 13 09 00    1146*       dl 0x000913 ; 00003A, 12.766
040D36 3A 09 00    1147*       dl 0x00093A ; 00003B, 12.978
040D39 61 09 00    1148*       dl 0x000961 ; 00003C, 13.191
040D3C 87 09 00    1149*       dl 0x000987 ; 00003D, 13.403
040D3F AE 09 00    1150*       dl 0x0009AE ; 00003E, 13.614
040D42 D4 09 00    1151*       dl 0x0009D4 ; 00003F, 13.825
040D45 FB 09 00    1152*       dl 0x0009FB ; 000040, 14.036
040D48 21 0A 00    1153*       dl 0x000A21 ; 000041, 14.247
040D4B 47 0A 00    1154*       dl 0x000A47 ; 000042, 14.457
040D4E 6D 0A 00    1155*       dl 0x000A6D ; 000043, 14.666
040D51 94 0A 00    1156*       dl 0x000A94 ; 000044, 14.876
040D54 BA 0A 00    1157*       dl 0x000ABA ; 000045, 15.085
040D57 E0 0A 00    1158*       dl 0x000AE0 ; 000046, 15.293
040D5A 05 0B 00    1159*       dl 0x000B05 ; 000047, 15.501
040D5D 2B 0B 00    1160*       dl 0x000B2B ; 000048, 15.709
040D60 51 0B 00    1161*       dl 0x000B51 ; 000049, 15.916
040D63 77 0B 00    1162*       dl 0x000B77 ; 00004A, 16.123
040D66 9C 0B 00    1163*       dl 0x000B9C ; 00004B, 16.329
040D69 C2 0B 00    1164*       dl 0x000BC2 ; 00004C, 16.535
040D6C E7 0B 00    1165*       dl 0x000BE7 ; 00004D, 16.740
040D6F 0C 0C 00    1166*       dl 0x000C0C ; 00004E, 16.945
040D72 32 0C 00    1167*       dl 0x000C32 ; 00004F, 17.150
040D75 57 0C 00    1168*       dl 0x000C57 ; 000050, 17.354
040D78 7C 0C 00    1169*       dl 0x000C7C ; 000051, 17.558
040D7B A1 0C 00    1170*       dl 0x000CA1 ; 000052, 17.761
040D7E C6 0C 00    1171*       dl 0x000CC6 ; 000053, 17.964
040D81 EB 0C 00    1172*       dl 0x000CEB ; 000054, 18.166
040D84 0F 0D 00    1173*       dl 0x000D0F ; 000055, 18.368
040D87 34 0D 00    1174*       dl 0x000D34 ; 000056, 18.569
040D8A 58 0D 00    1175*       dl 0x000D58 ; 000057, 18.770
040D8D 7D 0D 00    1176*       dl 0x000D7D ; 000058, 18.970
040D90 A1 0D 00    1177*       dl 0x000DA1 ; 000059, 19.170
040D93 C6 0D 00    1178*       dl 0x000DC6 ; 00005A, 19.370
040D96 EA 0D 00    1179*       dl 0x000DEA ; 00005B, 19.569
040D99 0E 0E 00    1180*       dl 0x000E0E ; 00005C, 19.767
040D9C 32 0E 00    1181*       dl 0x000E32 ; 00005D, 19.965
040D9F 56 0E 00    1182*       dl 0x000E56 ; 00005E, 20.163
040DA2 7A 0E 00    1183*       dl 0x000E7A ; 00005F, 20.360
040DA5 9E 0E 00    1184*       dl 0x000E9E ; 000060, 20.556
040DA8 C1 0E 00    1185*       dl 0x000EC1 ; 000061, 20.752
040DAB E5 0E 00    1186*       dl 0x000EE5 ; 000062, 20.947
040DAE 08 0F 00    1187*       dl 0x000F08 ; 000063, 21.142
040DB1 2C 0F 00    1188*       dl 0x000F2C ; 000064, 21.337
040DB4 4F 0F 00    1189*       dl 0x000F4F ; 000065, 21.531
040DB7 72 0F 00    1190*       dl 0x000F72 ; 000066, 21.724
040DBA 95 0F 00    1191*       dl 0x000F95 ; 000067, 21.917
040DBD B8 0F 00    1192*       dl 0x000FB8 ; 000068, 22.109
040DC0 DB 0F 00    1193*       dl 0x000FDB ; 000069, 22.301
040DC3 FE 0F 00    1194*       dl 0x000FFE ; 00006A, 22.493
040DC6 21 10 00    1195*       dl 0x001021 ; 00006B, 22.683
040DC9 44 10 00    1196*       dl 0x001044 ; 00006C, 22.874
040DCC 66 10 00    1197*       dl 0x001066 ; 00006D, 23.063
040DCF 89 10 00    1198*       dl 0x001089 ; 00006E, 23.253
040DD2 AB 10 00    1199*       dl 0x0010AB ; 00006F, 23.441
040DD5 CD 10 00    1200*       dl 0x0010CD ; 000070, 23.629
040DD8 EF 10 00    1201*       dl 0x0010EF ; 000071, 23.817
040DDB 11 11 00    1202*       dl 0x001111 ; 000072, 24.004
040DDE 33 11 00    1203*       dl 0x001133 ; 000073, 24.191
040DE1 55 11 00    1204*       dl 0x001155 ; 000074, 24.376
040DE4 77 11 00    1205*       dl 0x001177 ; 000075, 24.562
040DE7 99 11 00    1206*       dl 0x001199 ; 000076, 24.747
040DEA BA 11 00    1207*       dl 0x0011BA ; 000077, 24.931
040DED DC 11 00    1208*       dl 0x0011DC ; 000078, 25.115
040DF0 FD 11 00    1209*       dl 0x0011FD ; 000079, 25.298
040DF3 1E 12 00    1210*       dl 0x00121E ; 00007A, 25.481
040DF6 3F 12 00    1211*       dl 0x00123F ; 00007B, 25.663
040DF9 60 12 00    1212*       dl 0x001260 ; 00007C, 25.844
040DFC 81 12 00    1213*       dl 0x001281 ; 00007D, 26.025
040DFF A2 12 00    1214*       dl 0x0012A2 ; 00007E, 26.206
040E02 C3 12 00    1215*       dl 0x0012C3 ; 00007F, 26.386
040E05 E4 12 00    1216*       dl 0x0012E4 ; 000080, 26.565
040E08 04 13 00    1217*       dl 0x001304 ; 000081, 26.744
040E0B 25 13 00    1218*       dl 0x001325 ; 000082, 26.922
040E0E 45 13 00    1219*       dl 0x001345 ; 000083, 27.100
040E11 65 13 00    1220*       dl 0x001365 ; 000084, 27.277
040E14 85 13 00    1221*       dl 0x001385 ; 000085, 27.453
040E17 A5 13 00    1222*       dl 0x0013A5 ; 000086, 27.629
040E1A C5 13 00    1223*       dl 0x0013C5 ; 000087, 27.805
040E1D E5 13 00    1224*       dl 0x0013E5 ; 000088, 27.979
040E20 05 14 00    1225*       dl 0x001405 ; 000089, 28.154
040E23 24 14 00    1226*       dl 0x001424 ; 00008A, 28.327
040E26 44 14 00    1227*       dl 0x001444 ; 00008B, 28.501
040E29 63 14 00    1228*       dl 0x001463 ; 00008C, 28.673
040E2C 83 14 00    1229*       dl 0x001483 ; 00008D, 28.845
040E2F A2 14 00    1230*       dl 0x0014A2 ; 00008E, 29.017
040E32 C1 14 00    1231*       dl 0x0014C1 ; 00008F, 29.187
040E35 E0 14 00    1232*       dl 0x0014E0 ; 000090, 29.358
040E38 FF 14 00    1233*       dl 0x0014FF ; 000091, 29.527
040E3B 1E 15 00    1234*       dl 0x00151E ; 000092, 29.697
040E3E 3C 15 00    1235*       dl 0x00153C ; 000093, 29.865
040E41 5B 15 00    1236*       dl 0x00155B ; 000094, 30.033
040E44 79 15 00    1237*       dl 0x001579 ; 000095, 30.201
040E47 98 15 00    1238*       dl 0x001598 ; 000096, 30.368
040E4A B6 15 00    1239*       dl 0x0015B6 ; 000097, 30.534
040E4D D4 15 00    1240*       dl 0x0015D4 ; 000098, 30.700
040E50 F2 15 00    1241*       dl 0x0015F2 ; 000099, 30.865
040E53 10 16 00    1242*       dl 0x001610 ; 00009A, 31.030
040E56 2E 16 00    1243*       dl 0x00162E ; 00009B, 31.194
040E59 4C 16 00    1244*       dl 0x00164C ; 00009C, 31.357
040E5C 6A 16 00    1245*       dl 0x00166A ; 00009D, 31.520
040E5F 87 16 00    1246*       dl 0x001687 ; 00009E, 31.682
040E62 A5 16 00    1247*       dl 0x0016A5 ; 00009F, 31.844
040E65 C2 16 00    1248*       dl 0x0016C2 ; 0000A0, 32.005
040E68 DF 16 00    1249*       dl 0x0016DF ; 0000A1, 32.166
040E6B FC 16 00    1250*       dl 0x0016FC ; 0000A2, 32.326
040E6E 19 17 00    1251*       dl 0x001719 ; 0000A3, 32.486
040E71 36 17 00    1252*       dl 0x001736 ; 0000A4, 32.645
040E74 53 17 00    1253*       dl 0x001753 ; 0000A5, 32.803
040E77 70 17 00    1254*       dl 0x001770 ; 0000A6, 32.961
040E7A 8C 17 00    1255*       dl 0x00178C ; 0000A7, 33.118
040E7D A9 17 00    1256*       dl 0x0017A9 ; 0000A8, 33.275
040E80 C5 17 00    1257*       dl 0x0017C5 ; 0000A9, 33.431
040E83 E2 17 00    1258*       dl 0x0017E2 ; 0000AA, 33.587
040E86 FE 17 00    1259*       dl 0x0017FE ; 0000AB, 33.742
040E89 1A 18 00    1260*       dl 0x00181A ; 0000AC, 33.896
040E8C 36 18 00    1261*       dl 0x001836 ; 0000AD, 34.050
040E8F 52 18 00    1262*       dl 0x001852 ; 0000AE, 34.203
040E92 6E 18 00    1263*       dl 0x00186E ; 0000AF, 34.356
040E95 8A 18 00    1264*       dl 0x00188A ; 0000B0, 34.509
040E98 A5 18 00    1265*       dl 0x0018A5 ; 0000B1, 34.660
040E9B C1 18 00    1266*       dl 0x0018C1 ; 0000B2, 34.811
040E9E DC 18 00    1267*       dl 0x0018DC ; 0000B3, 34.962
040EA1 F7 18 00    1268*       dl 0x0018F7 ; 0000B4, 35.112
040EA4 13 19 00    1269*       dl 0x001913 ; 0000B5, 35.262
040EA7 2E 19 00    1270*       dl 0x00192E ; 0000B6, 35.410
040EAA 49 19 00    1271*       dl 0x001949 ; 0000B7, 35.559
040EAD 64 19 00    1272*       dl 0x001964 ; 0000B8, 35.707
040EB0 7F 19 00    1273*       dl 0x00197F ; 0000B9, 35.854
040EB3 99 19 00    1274*       dl 0x001999 ; 0000BA, 36.001
040EB6 B4 19 00    1275*       dl 0x0019B4 ; 0000BB, 36.147
040EB9 CE 19 00    1276*       dl 0x0019CE ; 0000BC, 36.293
040EBC E9 19 00    1277*       dl 0x0019E9 ; 0000BD, 36.438
040EBF 03 1A 00    1278*       dl 0x001A03 ; 0000BE, 36.582
040EC2 1D 1A 00    1279*       dl 0x001A1D ; 0000BF, 36.726
040EC5 37 1A 00    1280*       dl 0x001A37 ; 0000C0, 36.870
040EC8 51 1A 00    1281*       dl 0x001A51 ; 0000C1, 37.013
040ECB 6B 1A 00    1282*       dl 0x001A6B ; 0000C2, 37.155
040ECE 85 1A 00    1283*       dl 0x001A85 ; 0000C3, 37.297
040ED1 9F 1A 00    1284*       dl 0x001A9F ; 0000C4, 37.439
040ED4 B9 1A 00    1285*       dl 0x001AB9 ; 0000C5, 37.579
040ED7 D2 1A 00    1286*       dl 0x001AD2 ; 0000C6, 37.720
040EDA EC 1A 00    1287*       dl 0x001AEC ; 0000C7, 37.859
040EDD 05 1B 00    1288*       dl 0x001B05 ; 0000C8, 37.999
040EE0 1E 1B 00    1289*       dl 0x001B1E ; 0000C9, 38.137
040EE3 37 1B 00    1290*       dl 0x001B37 ; 0000CA, 38.276
040EE6 50 1B 00    1291*       dl 0x001B50 ; 0000CB, 38.413
040EE9 69 1B 00    1292*       dl 0x001B69 ; 0000CC, 38.550
040EEC 82 1B 00    1293*       dl 0x001B82 ; 0000CD, 38.687
040EEF 9B 1B 00    1294*       dl 0x001B9B ; 0000CE, 38.823
040EF2 B4 1B 00    1295*       dl 0x001BB4 ; 0000CF, 38.959
040EF5 CC 1B 00    1296*       dl 0x001BCC ; 0000D0, 39.094
040EF8 E5 1B 00    1297*       dl 0x001BE5 ; 0000D1, 39.228
040EFB FD 1B 00    1298*       dl 0x001BFD ; 0000D2, 39.362
040EFE 16 1C 00    1299*       dl 0x001C16 ; 0000D3, 39.496
040F01 2E 1C 00    1300*       dl 0x001C2E ; 0000D4, 39.629
040F04 46 1C 00    1301*       dl 0x001C46 ; 0000D5, 39.762
040F07 5E 1C 00    1302*       dl 0x001C5E ; 0000D6, 39.894
040F0A 76 1C 00    1303*       dl 0x001C76 ; 0000D7, 40.025
040F0D 8E 1C 00    1304*       dl 0x001C8E ; 0000D8, 40.156
040F10 A5 1C 00    1305*       dl 0x001CA5 ; 0000D9, 40.286
040F13 BD 1C 00    1306*       dl 0x001CBD ; 0000DA, 40.416
040F16 D5 1C 00    1307*       dl 0x001CD5 ; 0000DB, 40.546
040F19 EC 1C 00    1308*       dl 0x001CEC ; 0000DC, 40.675
040F1C 04 1D 00    1309*       dl 0x001D04 ; 0000DD, 40.803
040F1F 1B 1D 00    1310*       dl 0x001D1B ; 0000DE, 40.931
040F22 32 1D 00    1311*       dl 0x001D32 ; 0000DF, 41.059
040F25 49 1D 00    1312*       dl 0x001D49 ; 0000E0, 41.186
040F28 60 1D 00    1313*       dl 0x001D60 ; 0000E1, 41.312
040F2B 77 1D 00    1314*       dl 0x001D77 ; 0000E2, 41.438
040F2E 8E 1D 00    1315*       dl 0x001D8E ; 0000E3, 41.564
040F31 A5 1D 00    1316*       dl 0x001DA5 ; 0000E4, 41.689
040F34 BB 1D 00    1317*       dl 0x001DBB ; 0000E5, 41.814
040F37 D2 1D 00    1318*       dl 0x001DD2 ; 0000E6, 41.938
040F3A E9 1D 00    1319*       dl 0x001DE9 ; 0000E7, 42.061
040F3D FF 1D 00    1320*       dl 0x001DFF ; 0000E8, 42.184
040F40 15 1E 00    1321*       dl 0x001E15 ; 0000E9, 42.307
040F43 2C 1E 00    1322*       dl 0x001E2C ; 0000EA, 42.429
040F46 42 1E 00    1323*       dl 0x001E42 ; 0000EB, 42.551
040F49 58 1E 00    1324*       dl 0x001E58 ; 0000EC, 42.672
040F4C 6E 1E 00    1325*       dl 0x001E6E ; 0000ED, 42.793
040F4F 84 1E 00    1326*       dl 0x001E84 ; 0000EE, 42.913
040F52 99 1E 00    1327*       dl 0x001E99 ; 0000EF, 43.033
040F55 AF 1E 00    1328*       dl 0x001EAF ; 0000F0, 43.152
040F58 C5 1E 00    1329*       dl 0x001EC5 ; 0000F1, 43.271
040F5B DA 1E 00    1330*       dl 0x001EDA ; 0000F2, 43.390
040F5E F0 1E 00    1331*       dl 0x001EF0 ; 0000F3, 43.508
040F61 05 1F 00    1332*       dl 0x001F05 ; 0000F4, 43.625
040F64 1B 1F 00    1333*       dl 0x001F1B ; 0000F5, 43.742
040F67 30 1F 00    1334*       dl 0x001F30 ; 0000F6, 43.859
040F6A 45 1F 00    1335*       dl 0x001F45 ; 0000F7, 43.975
040F6D 5A 1F 00    1336*       dl 0x001F5A ; 0000F8, 44.091
040F70 6F 1F 00    1337*       dl 0x001F6F ; 0000F9, 44.206
040F73 84 1F 00    1338*       dl 0x001F84 ; 0000FA, 44.321
040F76 99 1F 00    1339*       dl 0x001F99 ; 0000FB, 44.435
040F79 AD 1F 00    1340*       dl 0x001FAD ; 0000FC, 44.549
040F7C C2 1F 00    1341*       dl 0x001FC2 ; 0000FD, 44.662
040F7F D7 1F 00    1342*       dl 0x001FD7 ; 0000FE, 44.775
040F82 EB 1F 00    1343*       dl 0x001FEB ; 0000FF, 44.888
040F85 00 20 00    1344*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
040F88             0036        include "fonts.inc"
040F88             0001*   fonts_load:
040F88 DD 21 44 21 0002*       ld ix,font_list ; pointer to font list lookup
       04          
040F8D 06 07       0003*       ld b,num_fonts ; loop counter
040F8F             0004*   
040F8F             0005*   @load_loop:
040F8F C5          0006*       push bc ; save loop counter
040F90             0007*   
040F90             0008*   ; load font into a buffer
040F90 DD 27 06    0009*       ld hl,(ix+font_list_bufferId)
040F93 DD 31 09    0010*       ld iy,(ix+font_list_filename)
040F96 CD BC 14 04 0011*       call vdu_load_buffer_from_file
040F9A             0012*   
040F9A             0013*   ; create font from buffer
040F9A DD 27 06    0014*       ld hl,(ix+font_list_bufferId)
040F9D DD 5E 00    0015*       ld e,(ix+font_list_width)
040FA0 DD 56 03    0016*       ld d,(ix+font_list_height)
040FA3 3E 00       0017*       ld a,0 ; flags
040FA5 CD 3F 16 04 0018*       call vdu_font_create
040FA9             0019*   
040FA9             0020*   ; select font
040FA9 DD 27 06    0021*       ld hl,(ix+font_list_bufferId)
040FAC 3E 01       0022*       ld a,1 ; flags
040FAE CD 25 16 04 0023*       call vdu_font_select
040FB2             0024*   
040FB2             0025*   ; ; debug print filename
040FB2             0026*   ;     call printNewLine
040FB2             0027*   ;     ld hl,(ix+font_list_filename)
040FB2             0028*   ;     call printString
040FB2             0029*   
040FB2             0030*   ; advance font_list pointer to next record
040FB2 ED 32 0C    0031*       lea ix,ix+font_list_record_size
040FB5             0032*   
040FB5             0033*   ; restore loop counter
040FB5 C1          0034*       pop bc
040FB6 10 D7       0035*       djnz @load_loop
040FB8             0036*   
040FB8             0037*   ; all done
040FB8 C9          0038*       ret
040FB9             0037        include "images.inc"
040FB9             0001*   image_type: equ 0
040FB9             0002*   image_width: equ image_type+3
040FB9             0003*   image_height: equ image_width+3
040FB9             0004*   image_filesize: equ image_height+3
040FB9             0005*   image_filename: equ image_filesize+3
040FB9             0006*   image_bufferId: equ image_filename+3
040FB9             0007*   image_record_size: equ image_bufferId+3
040FB9             0008*   
040FB9 00 00 00    0009*   cur_image_list: dl 0
040FBC 00 00 00    0010*   cur_filename: dl 0
040FBF 00 00 00    0011*   cur_buffer_id: dl 0
040FC2             0012*   
040FC2             0013*   img_load_init:
040FC2             0014*   ; initialize logo's position parameters
040FC2 21 00 00 00 0015*       ld hl,0
040FC6 22 77 10 04 0016*       ld (logo_xvel),hl
040FCA 22 7A 10 04 0017*       ld (logo_xpos),hl
040FCE             0018*   ; begin 16.8 maths to determine logo's y position and velocity
040FCE 21 00 E0 00 0019*       ld hl,224*256
040FD2 22 80 10 04 0020*       ld (logo_ypos),hl
040FD6 EB          0021*       ex de,hl
040FD7 21 00 28 FF 0022*       ld hl,-240+24*256
040FDB             0023*       ; ld de,-256*[sprites_num_images+tiles_dg_num_images+ui_num_images]
040FDB 11 00 83 01 0024*       ld de,[sprites_num_images+tiles_dg_num_images+ui_num_images]*256
040FDF CD 5C 06 04 0025*       call sdiv168 ; ud.e = distance / num images = y velocity
040FE3 ED 53 7D 10 0026*       ld (logo_yvel),de
       04          
040FE8             0027*   ; all done
040FE8 C9          0028*       ret
040FE9             0029*   
040FE9             0030*   ; inputs: bc is the number of images to load, cur_image_list set
040FE9             0031*   img_load_main:
040FE9             0032*   ; back up loop counter
040FE9 C5          0033*       push bc
040FEA             0034*   
040FEA             0035*   ; load the next image
040FEA CD 21 10 04 0036*       call load_next_image
040FEE             0037*   
040FEE             0038*   ; plot the background
040FEE CD 87 12 04 0039*       call vdu_cls
040FF2 21 29 00 00 0040*       ld hl,BUF_SPLASH_BG
040FF6 CD 7C 13 04 0041*       call vdu_buff_select
040FFA 01 00 00 00 0042*       ld bc,0
040FFE 11 00 00 00 0043*       ld de,0
041002 CD D8 16 04 0044*       call vdu_plot_bmp
041006             0045*   
041006             0046*   ; ; draw the most recently loaded image
041006             0047*   ; 	ld hl,(cur_buffer_id)
041006             0048*   ; 	call vdu_buff_select
041006             0049*   ; 	ld bc,0
041006             0050*   ; 	ld de,0
041006             0051*   ; 	call vdu_plot_bmp
041006             0052*   
041006             0053*   ; move logo
041006 CD 52 10 04 0054*       call move_logo
04100A             0055*   
04100A             0056*   ; print current filename
04100A 2A BC 0F 04 0057*       ld hl,(cur_filename)
04100E CD 63 00 04 0058*       call printString
041012             0059*   
041012             0060*   ; flip the framebuffer
041012             0061*       ; call vdu_flip
041012             0062*   
041012             0063*   ; decrement loop counter
041012 C1          0064*       pop bc
041013 0B          0065*       dec bc
041014 79          0066*       ld a,c
041015 B7          0067*       or a
041016 C2 E9 0F 04 0068*       jp nz,img_load_main
04101A 78          0069*       ld a,b
04101B B7          0070*       or a
04101C C2 E9 0F 04 0071*       jp nz,img_load_main
041020 C9          0072*       ret
041021             0073*   
041021             0074*   load_next_image:
041021 FD 2A B9 0F 0075*       ld iy,(cur_image_list)
       04          
041026 FD E5       0076*       push iy
041028 FD 7E 00    0077*       ld a,(iy+image_type) ; get image type
04102B FD 07 03    0078*       ld bc,(iy+image_width) ; get image width
04102E FD 17 06    0079*       ld de,(iy+image_height) ; get image height
041031 FD 31 09    0080*       ld ix,(iy+image_filesize) ; get image file size
041034 FD 27 0F    0081*       ld hl,(iy+image_bufferId) ; get image bufferId
041037 22 BF 0F 04 0082*       ld (cur_buffer_id),hl
04103B FD 37 0C    0083*       ld iy,(iy+image_filename) ; get image filename
04103E FD 22 BC 0F 0084*       ld (cur_filename),iy
       04          
041043 CD 9A 14 04 0085*       call vdu_load_img
041047 FD E1       0086*       pop iy
041049 ED 33 12    0087*       lea iy,iy+image_record_size
04104C FD 22 B9 0F 0088*       ld (cur_image_list),iy
       04          
041051 C9          0089*       ret
041052             0090*   
041052             0091*   move_logo:
041052             0092*   ; activate logo bitmap
041052 21 2A 00 00 0093*       ld hl, BUF_SPLASH_LOGO
041056 CD 7C 13 04 0094*       call vdu_buff_select
04105A             0095*   ; update position based on velocity parameters
04105A 2A 80 10 04 0096*       ld hl,(logo_ypos)
04105E ED 5B 7D 10 0097*       ld de,(logo_yvel)
       04          
041063 19          0098*       add hl,de
041064 22 80 10 04 0099*       ld (logo_ypos),hl
041068             0100*   ; draw logo
041068 ED 4B 7A 10 0101*       ld bc,(logo_xpos)
       04          
04106D ED 5B 80 10 0102*       ld de,(logo_ypos)
       04          
041072 CD F4 16 04 0103*       call vdu_plot_bmp168
041076 C9          0104*       ret
041077             0105*   
041077 00 00 00    0106*   logo_xvel: dl 0
04107A 00 00 00    0107*   logo_xpos: dl 0
04107D             0108*   
04107D 00 00 00    0109*   logo_yvel: dl 0
041080 00 00 00    0110*   logo_ypos: dl 0
041083             0111*   
041083             0112*   load_ui_images:
041083             0113*   ; initialize image loading variables
041083 21 5A 5B 04 0114*       ld hl,ui_image_list
041087 22 B9 0F 04 0115*       ld (cur_image_list),hl
04108B             0116*   ; load images
04108B 06 2B       0117*       ld b,ui_num_images
04108D             0118*   @loop:
04108D C5          0119*       push bc
04108E CD 21 10 04 0120*       call load_next_image
041092 C1          0121*       pop bc
041093 10 F8       0122*       djnz @loop
041095 C9          0123*       ret
041096             0124*   ; end load_ui_images
041096             0125*   
041096             0126*   load_sprite_images:
041096             0127*   ; initialize image loading variables
041096 21 10 40 04 0128*       ld hl,sprites_image_list
04109A 22 B9 0F 04 0129*       ld (cur_image_list),hl
04109E 01 9D 00 00 0130*       ld bc,sprites_num_images
0410A2             0131*   ; load images
0410A2 CD E9 0F 04 0132*       call img_load_main
0410A6 C9          0133*       ret
0410A7             0134*   ; end load_sprite_images
0410A7             0135*   
0410A7             0136*   load_tilesets:
0410A7             0137*   ; initialize image loading variables
0410A7 21 93 23 04 0138*       ld hl,tiles_dg_image_list
0410AB 22 B9 0F 04 0139*       ld (cur_image_list),hl
0410AF 01 BB 00 00 0140*       ld bc,tiles_dg_num_images
0410B3             0141*   ; load images
0410B3 CD E9 0F 04 0142*       call img_load_main
0410B7 C9          0143*       ret
0410B8             0144*   ; end load_tilesets
0410B8             0145*   
0410B8             0146*   load_backgrounds:
0410B8             0147*   ; initialize image loading variables
0410B8 21 63 22 04 0148*       ld hl,bg_image_list
0410BC 22 B9 0F 04 0149*       ld (cur_image_list),hl
0410C0 01 08 00 00 0150*       ld bc,bg_num_images
0410C4             0151*   ; load images
0410C4 CD E9 0F 04 0152*       call img_load_main
0410C8 C9          0153*       ret
0410C9             0154*   ; end load_backgrounds
0410C9             0155*   
0410C9             0156*   ; ; initialize image loading variables
0410C9             0157*   ;     ld hl,tiles_xevious_image_list
0410C9             0158*   ;     ld (cur_image_list),hl
0410C9             0159*   ;     ld bc,tiles_xevious_num_images
0410C9             0160*   ; ; load images
0410C9             0161*   ;     call img_load_main
0410C9 C9          0162*       ret
0410CA             0038        include "timer.inc"
0410CA             0001*   ; Table 32. Timer Control Registers
0410CA             0002*   ; this constant is the base address of the timer control registers
0410CA             0003*   ; each timer takes three bytes:
0410CA             0004*   ;   0: control register
0410CA             0005*   ;   1: low byte of timer reset value
0410CA             0006*   ;   2: high byte of timer reset value
0410CA             0007*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0410CA             0008*   ; which correctly force the high and upper bytes of the address bus to zero
0410CA             0009*   TMR_CTL:     equ 80h
0410CA             0010*   
0410CA             0011*   ; Timer Control Register Bit Definitions
0410CA             0012*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0410CA             0013*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
0410CA             0014*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0410CA             0015*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
0410CA             0016*                               ; the TMRx_CTL register is read.
0410CA             0017*   
0410CA             0018*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0410CA             0019*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0410CA             0020*   
0410CA             0021*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0410CA             0022*                               ;  0,and counting stops when the end-of-count value is reached.
0410CA             0023*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0410CA             0024*                               ; written to the counter when the end-of-count value is reached.
0410CA             0025*   
0410CA             0026*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0410CA             0027*   CLK_DIV_256:  equ %00001100 ;
0410CA             0028*   CLK_DIV_64:   equ %00001000 ;
0410CA             0029*   CLK_DIV_16:   equ %00000100 ;
0410CA             0030*   CLK_DIV_4:    equ %00000000 ;
0410CA             0031*   
0410CA             0032*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0410CA             0033*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0410CA             0034*                               ; When a 1 is written to this bit,the values in the reload registers
0410CA             0035*                               ;  are loaded into the downcounter when the timer restarts. The
0410CA             0036*                               ; programmer must ensure that this bit is set to 1 each time
0410CA             0037*                               ; SINGLE-PASS mode is used.
0410CA             0038*   
0410CA             0039*   ; disable/enable the programmable reload timer
0410CA             0040*   PRT_EN_0:     equ %00000000 ;
0410CA             0041*   PRT_EN_1:     equ %00000001 ;
0410CA             0042*   
0410CA             0043*   ; Table 37. Timer Input Source Select Register
0410CA             0044*   ; Each of the 4 timers are allocated two bits of the 8-bit register
0410CA             0045*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0410CA             0046*   ;   00: System clock / CLK_DIV
0410CA             0047*   ;   01: RTC / CLK_DIV
0410CA             0048*   ;   NOTE: these are the values given in the manual,but it may be a typo
0410CA             0049*   ;   10: GPIO port B pin 1.
0410CA             0050*   ;   11: GPIO port B pin 1.
0410CA             0051*   TMR_ISS:   equ 92h ; register address
0410CA             0052*   
0410CA             0053*   ; Table 51. Real-Time Clock Control Register
0410CA             0054*   RTC_CTRL: equ EDh ; register address
0410CA             0055*   
0410CA             0056*   ; alarm interrupt disable/enable
0410CA             0057*   RTC_ALARM_0:    equ %00000000
0410CA             0058*   RTC_ALARM_1:    equ %10000000
0410CA             0059*   
0410CA             0060*   ; interrupt on alarm disable/enable
0410CA             0061*   RTC_INT_ENT_0:  equ %00000000
0410CA             0062*   RTC_INT_ENT_1:  equ %01000000
0410CA             0063*   
0410CA             0064*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0410CA             0065*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0410CA             0066*   
0410CA             0067*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0410CA             0068*                                   ; On-chip 32768 Hz oscillator is enabled.
0410CA             0069*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0410CA             0070*                                   ; On-chip 32768 Hz oscillator is disabled.
0410CA             0071*   
0410CA             0072*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0410CA             0073*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0410CA             0074*   
0410CA             0075*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0410CA             0076*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0410CA             0077*   
0410CA             0078*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0410CA             0079*                                   ; RTC counter is enabled.
0410CA             0080*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0410CA             0081*                                   ; RTC counter is disabled.
0410CA             0082*   
0410CA             0083*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0410CA             0084*   
0410CA             0085*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0410CA             0086*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0410CA 00 00 00    0087*   prt_reload: dl 0x000000
0410CD             0088*   
0410CD             0089*   ; set PRT timer
0410CD             0090*   prt_set:
0410CD 21 00 00 00 0091*       ld hl,0
0410D1 22 1B 11 04 0092*       ld (prt_irq_counter),hl
0410D5 2A CA 10 04 0093*       ld hl,(prt_reload)
0410D9 ED 29 84    0094*       out0 ($84),l
0410DC ED 21 85    0095*   	out0 ($85),h
0410DF             0096*   ; disable timer
0410DF 3E 06       0097*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0410E1 ED 39 83    0098*   	out0 ($83),a
0410E4             0099*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0410E4 3E 57       0100*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0410E6 ED 39 83    0101*   	out0 ($83),a
0410E9 C9          0102*       ret
0410EA             0103*   
0410EA             0104*   ; ===============================================
0410EA             0105*   ; PRT Timer Interrupt Handling
0410EA             0106*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0410EA             0107*   ; -----------------------------------------------
0410EA             0108*   prt_irq_init:
0410EA             0109*       ; set up interrupt vector table 2
0410EA 21 00 00 00 0110*   	ld hl,0
0410EE 3A 0C 01 00 0111*   	ld a,($10c)
0410F2 6F          0112*   	ld l,a
0410F3 3A 0D 01 00 0113*   	ld a,($10d)
0410F7 67          0114*   	ld h,a
0410F8             0115*   
0410F8             0116*   	; skip over CALL ($c3)
0410F8 23          0117*   	inc hl
0410F9             0118*   	; load address of jump into vector table 2 (in ram)
0410F9 ED 27       0119*   	ld hl,(hl)
0410FB             0120*   
0410FB             0121*   	; write CALL prt_irq_handler to vector table 2
0410FB 3E C3       0122*   	ld a,$c3
0410FD 77          0123*   	ld (hl),a
0410FE 23          0124*   	inc hl
0410FF 11 06 11 04 0125*   	ld de,prt_irq_handler
041103 ED 1F       0126*   	ld (hl),de
041105             0127*   
041105 C9          0128*       ret
041106             0129*   
041106             0130*   prt_irq_handler:
041106 F3          0131*   	di
041107 F5          0132*   	push af
041108 E5          0133*       push hl
041109 ED 38 83    0134*   	in0 a,($83)
04110C 2A 1B 11 04 0135*   	ld hl,(prt_irq_counter)
041110 23          0136*   	inc hl
041111 22 1B 11 04 0137*   	ld (prt_irq_counter),hl
041115 E1          0138*       pop hl
041116 F1          0139*   	pop af
041117 FB          0140*   	ei
041118 5B ED 4D    0141*   	reti.l
04111B             0142*   
04111B             0143*   prt_irq_counter:
04111B 00 00 00    0144*   	.dl 0
04111E             0145*   prt_irq_counter_saved:
04111E 00 00 00    0146*       .dl 0
041121             0147*   
041121             0148*   prt_loop_reset:
041121 E5          0149*       push hl
041122 21 00 00 00 0150*   	ld hl,0
041126 22 1B 11 04 0151*   	ld (prt_irq_counter),hl
04112A 22 8C 11 04 0152*       ld (prt_loop_counter),hl
04112E 22 8F 11 04 0153*       ld (prt_loops),hl
041132 CD CD 10 04 0154*       call prt_set
041136 E1          0155*       pop hl
041137 C9          0156*       ret
041138             0157*   
041138             0158*   prt_loop_start:
041138 E5          0159*       push hl
041139 21 00 00 00 0160*   	ld hl,0
04113D 22 1B 11 04 0161*   	ld (prt_irq_counter),hl
041141 E1          0162*       pop hl
041142 C9          0163*       ret
041143             0164*   
041143             0165*   prt_loop_stop:
041143 E5          0166*       push hl
041144 D5          0167*       push de
041145 2A 1B 11 04 0168*       ld hl,(prt_irq_counter)
041149 ED 5B 8C 11 0169*       ld de,(prt_loop_counter)
       04          
04114E 19          0170*       add hl,de
04114F 22 8C 11 04 0171*       ld (prt_loop_counter),hl
041153 21 00 00 00 0172*       ld hl,0
041157 22 1B 11 04 0173*       ld (prt_irq_counter),hl
04115B 2A 8F 11 04 0174*       ld hl,(prt_loops)
04115F 23          0175*       inc hl
041160 22 8F 11 04 0176*       ld (prt_loops),hl
041164 D1          0177*       pop de
041165 E1          0178*       pop hl
041166 C9          0179*       ret
041167             0180*   
041167             0181*   ; inputs: bc = y,x text coordinates to print
041167             0182*   prt_loop_print:
041167 F5          0183*       push af
041168 E5          0184*       push hl
041169 C5          0185*       push bc
04116A D5          0186*       push de
04116B DD E5       0187*       push ix
04116D FD E5       0188*       push iy
04116F CD 73 12 04 0189*       call vdu_move_cursor
041173             0190*   
041173 2A 8C 11 04 0191*       ld hl,(prt_loop_counter)
041177 CD AF 00 04 0192*       call printDec
04117B             0193*   
04117B 2A 8F 11 04 0194*       ld hl,(prt_loops)
04117F CD AF 00 04 0195*       call printDec
041183             0196*   
041183 FD E1       0197*       pop iy
041185 DD E1       0198*       pop ix
041187 D1          0199*       pop de
041188 C1          0200*       pop bc
041189 E1          0201*       pop hl
04118A F1          0202*       pop af
04118B C9          0203*       ret
04118C             0204*   
04118C             0205*   prt_loop_counter:
04118C 00 00 00    0206*       .dl 0
04118F             0207*   prt_loops:
04118F 00 00 00    0208*       .dl 0
041192             0209*   
041192             0210*   ; ===============================================
041192             0211*   ; Timer functions
041192             0212*   ; -----------------------------------------------
041192             0213*   ; set a countdown timer
041192             0214*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041192             0215*   ; returns: hl = current time
041192             0216*   tmr_set:
041192 FD 2F 03    0217*       ld (iy+3),hl            ; set time remaining
041195             0218*       MOSCALL mos_sysvars     ; ix points to syvars table
041195 3E 08       0001*M1 			LD	A, function
041197 5B CF       0002*M1 			RST.LIL	08h
041199 DD 27 00    0219*       ld hl,(ix+sysvar_time)  ; get current time
04119C FD 2F 00    0220*       ld (iy+0),hl            ; set start time
04119F C9          0221*       ret
0411A0             0222*   
0411A0             0223*   ; gets time remaining on a countdown timer
0411A0             0224*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0411A0             0225*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0411A0             0226*   ;          sign flags: pos = time not expired,zero or neg = time expired
0411A0             0227*   tmr_get:
0411A0             0228*       MOSCALL mos_sysvars     ; ix points to syvars table
0411A0 3E 08       0001*M1 			LD	A, function
0411A2 5B CF       0002*M1 			RST.LIL	08h
0411A4 DD 17 00    0229*       ld de,(ix+sysvar_time)  ; get current time
0411A7 FD 27 00    0230*       ld hl,(iy+0)            ; get start time
0411AA AF          0231*       xor a                   ; clear carry
0411AB ED 52       0232*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0411AD FD 17 03    0233*       ld de,(iy+3)            ; get timer set value
0411B0 AF          0234*       xor a                   ; clear carry
0411B1 ED 5A       0235*       adc hl,de               ; hl = time remaining
0411B3             0236*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0411B3 C9          0237*       ret
0411B4             0238*   
0411B4             0239*   tmr_test: ds 6 ; example of a buffer to hold timer data
0411BA             0240*   
       FF FF FF FF 
       FF FF 
0411BA 00 00 00    0241*   timestamp_now: dl 0
0411BD 00 00 00    0242*   timestamp_old: dl 0
0411C0 00 00 00    0243*   timestamp_chg: dl 0
0411C3             0244*   
0411C3             0245*   ; update the global timestamp from the system clock
0411C3             0246*   ; inputs: none
0411C3             0247*   ; returns: hl = time elapsed in 1/120ths of a second
0411C3             0248*   ;          ix = pointer to syvars table
0411C3             0249*   ; destroys: af,hl,de,ix
0411C3             0250*   timestamp_tick:
0411C3 ED 5B BA 11 0251*       ld de,(timestamp_now)   ; get previous time
       04          
0411C8 ED 53 BD 11 0252*       ld (timestamp_old),de   ; save previous time
       04          
0411CD             0253*       MOSCALL mos_sysvars     ; ix points to syvars table
0411CD 3E 08       0001*M1 			LD	A, function
0411CF 5B CF       0002*M1 			RST.LIL	08h
0411D1 DD 27 00    0254*       ld hl,(ix+sysvar_time)  ; get current time
0411D4 22 BA 11 04 0255*       ld (timestamp_now),hl   ; save current time
0411D8 AF          0256*       xor a                   ; clear carry
0411D9 ED 52       0257*       sbc hl,de               ; hl = time elapsed
0411DB 22 C0 11 04 0258*       ld (timestamp_chg),hl   ; save elapsed time
0411DF C9          0259*       ret
0411E0             0260*   
0411E0             0261*   ; set a countdown timer
0411E0             0262*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0411E0             0263*   ; requires: timestamp_tick to be called at least once before this function
0411E0             0264*   ; returns: hl = current time
0411E0             0265*   ; destroys: hl
0411E0             0266*   timestamp_tmr_set:
0411E0 FD 2F 03    0267*       ld (iy+3),hl            ; set time remaining
0411E3 2A BA 11 04 0268*       ld hl,(timestamp_now)   ; get current timestamp
0411E7 FD 2F 00    0269*       ld (iy+0),hl            ; set start time
0411EA C9          0270*       ret
0411EB             0271*   
0411EB             0272*   ; gets time remaining on a countdown timer following the global timestamp
0411EB             0273*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0411EB             0274*   ; requires: timestamp_tick to be called at least once before this function
0411EB             0275*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0411EB             0276*   ;          sign flags: pos = time not expired,zero or neg = time expired
0411EB             0277*   ; destroys: af,hl,de
0411EB             0278*   timestamp_tmr_get:
0411EB ED 5B BA 11 0279*       ld de,(timestamp_now)   ; get current timestamp
       04          
0411F0 FD 27 00    0280*       ld hl,(iy+0)            ; get start time
0411F3 AF          0281*       xor a                   ; clear carry
0411F4 ED 52       0282*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0411F6 FD 17 03    0283*       ld de,(iy+3)            ; get timer set value
0411F9 AF          0284*       xor a                   ; clear carry
0411FA ED 5A       0285*       adc hl,de               ; hl = time remaining
0411FC             0286*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0411FC C9          0287*       ret
0411FD             0288*   
0411FD             0289*   ; set a stopwatch
0411FD             0290*   ; returns: hl = start time
0411FD             0291*   ; destroys: hl,ix
0411FD             0292*   stopwatch_set:
0411FD             0293*       MOSCALL mos_sysvars     ; ix points to syvars table
0411FD 3E 08       0001*M1 			LD	A, function
0411FF 5B CF       0002*M1 			RST.LIL	08h
041201 DD 27 00    0294*       ld hl,(ix+sysvar_time)  ; get current time
041204 22 19 12 04 0295*       ld (stopwatch_started),hl            ; set start time
041208 C9          0296*       ret
041209             0297*   
041209             0298*   ; gets time elapsed on a stopwatch
041209             0299*   ; returns: hl = time elapsed in 1/120ths of a second
041209             0300*   ; destroys: af,hl,de,ix
041209             0301*   stopwatch_get:
041209             0302*       MOSCALL mos_sysvars     ; ix points to syvars table
041209 3E 08       0001*M1 			LD	A, function
04120B 5B CF       0002*M1 			RST.LIL	08h
04120D DD 27 00    0303*       ld hl,(ix+sysvar_time)  ; get current time
041210 ED 5B 19 12 0304*       ld de,(stopwatch_started)            ; get start time
       04          
041215 AF          0305*       xor a                   ; clear carry
041216 ED 52       0306*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041218 C9          0307*       ret
041219             0308*   
041219             0309*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04121C             0310*   
04121C             0311*   ; ------------------
04121C             0312*   ; delay routine
04121C             0313*   ; Author: Richard Turrnidge
04121C             0314*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
04121C             0315*   ; routine waits a fixed time,then returns
04121C             0316*   ; arrive with A =  the delay byte. One bit to be set only.
04121C             0317*   ; eg. ld A,00000100b
04121C             0318*   
04121C             0319*   multiPurposeDelay:
       FF FF FF 
04121C F5          0320*       push af
04121D C5          0321*       push bc
04121E DD E5       0322*       push ix
041220 47          0323*       ld b,a
041221 3E 08       0324*       ld a,$08
041223 5B CF       0325*       RST.LIL	08h                 ; get IX pointer to sysvars
041225             0326*   
041225             0327*   waitLoop:
041225             0328*   
041225 DD 7E 00    0329*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041228             0330*   
041228             0331*                                   ;   we check if bit set is same as last time we checked.
041228             0332*                                   ;   bit 0 - don't use
041228             0333*                                   ;   bit 1 - changes 64 times per second
041228             0334*                                   ;   bit 2 - changes 32 times per second
041228             0335*                                   ;   bit 3 - changes 16 times per second
041228             0336*   
041228             0337*                                   ;   bit 4 - changes 8 times per second
041228             0338*                                   ;   bit 5 - changes 4 times per second
041228             0339*                                   ;   bit 6 - changes 2 times per second
041228             0340*                                   ;   bit 7 - changes 1 times per second
041228 A0          0341*       and b
041229 4F          0342*       ld c,a
04122A 3A 3B 12 04 0343*       ld a,(oldTimeStamp)
04122E B9          0344*       cp c                        ; is A same as last value?
04122F 28 F4       0345*       jr z,waitLoop              ; loop here if it is
041231 79          0346*       ld a,c
041232 32 3B 12 04 0347*       ld (oldTimeStamp),a        ; set new value
041236             0348*   
041236 DD E1       0349*       pop ix
041238 C1          0350*       pop bc
041239 F1          0351*       pop af
04123A C9          0352*       ret
04123B             0353*   
04123B 00          0354*   oldTimeStamp:   .db 00h
04123C             0039        include "vdu.inc"
04123C             0001*   ; VDU 30: Home cursor
04123C             0002*   vdu_home_cursor:
04123C 3E 1E       0003*       ld a,30
04123E 5B D7       0004*   	rst.lil $10
041240 C9          0005*   	ret
041241             0006*   
041241             0007*   vdu_cursor_on:
041241 21 4C 12 04 0008*   	ld hl,@cmd
041245 01 03 00 00 0009*   	ld bc,@end-@cmd
041249 5B DF       0010*   	rst.lil $18
04124B C9          0011*   	ret
04124C             0012*   @cmd:
04124C 17 01 01    0013*   	db 23,1,1
04124F             0014*   @end:
04124F             0015*   
04124F             0016*   vdu_cursor_off:
04124F 21 5A 12 04 0017*   	ld hl,@cmd
041253 01 03 00 00 0018*   	ld bc,@end-@cmd
041257 5B DF       0019*   	rst.lil $18
041259 C9          0020*   	ret
04125A             0021*   @cmd:
04125A 17 01 00    0022*   	db 23,1,0
04125D             0023*   @end:
04125D             0024*   
04125D             0025*   ; VDU 5: Write text at graphics cursor
04125D             0026*   ; inputs: a is the character to write to the screen
04125D             0027*   ; prerequisites: the graphics cursor at the intended position on screen
04125D             0028*   ; outputs: see the name of the function
04125D             0029*   ; destroys: a, hl, bc
04125D             0030*   vdu_char_to_gfx_cursor:
04125D 32 6D 12 04 0031*   	ld (@arg),a
041261 21 6C 12 04 0032*   	ld hl,@cmd
041265 01 02 00 00 0033*   	ld bc,@end-@cmd
041269 5B DF       0034*   	rst.lil $18
04126B C9          0035*   	ret
04126C 05          0036*   @cmd: db 5
04126D 00          0037*   @arg: db 0
04126E             0038*   @end:
04126E             0039*   ; VDU 9: Move cursor forward one character
04126E             0040*   vdu_cursor_forward:
04126E 3E 09       0041*       ld a,9
041270 5B D7       0042*   	rst.lil $10
041272 C9          0043*   	ret
041273             0044*   
041273             0045*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041273             0046*   ; inputs: c=x, b=y 8-bit unsigned integers
041273             0047*   vdu_move_cursor:
041273 ED 43 84 12 0048*       ld (@x0),bc
       04          
041278 21 83 12 04 0049*   	ld hl,@cmd
04127C 01 03 00 00 0050*   	ld bc,@end-@cmd
041280 5B DF       0051*   	rst.lil $18
041282 C9          0052*   	ret
041283 1F          0053*   @cmd: 	db 31
041284 00          0054*   @x0:	db 0
041285 00          0055*   @y0: 	db 0
041286 00          0056*   @end: 	db 0 ; padding
041287             0057*   
041287             0058*   ; VDU 12: Clear text area (CLS)
041287             0059*   vdu_cls:
041287 3E 0C       0060*       ld a,12
041289 5B D7       0061*   	rst.lil $10
04128B C9          0062*   	ret
04128C             0063*   
04128C             0064*   vdu_flip:
04128C 21 97 12 04 0065*   	ld hl,@cmd
041290 01 03 00 00 0066*   	ld bc,@end-@cmd
041294 5B DF       0067*   	rst.lil $18
041296 C9          0068*   	ret
041297 17 00 C3    0069*   @cmd: db 23,0,0xC3
04129A             0070*   @end:
04129A             0071*   
04129A             0072*   ; VDU 16: Clear graphics area (CLG)
04129A             0073*   vdu_clg:
04129A 3E 10       0074*       ld a,16
04129C 5B D7       0075*   	rst.lil $10
04129E C9          0076*   	ret
04129F             0077*   
04129F             0078*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04129F             0079*   ; VDU 23, 7: Scrolling
04129F             0080*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04129F             0081*   ; inputs: a, extent; l, direction; h; speed
04129F             0082*   vdu_scroll_down:
04129F 32 B4 12 04 0083*   	ld (@extent),a
0412A3 22 B5 12 04 0084*   	ld (@dir),hl ; implicitly populates @speed
0412A7 21 B2 12 04 0085*   	ld hl,@cmd
0412AB 01 05 00 00 0086*   	ld bc,@end-@cmd
0412AF 5B DF       0087*   	rst.lil $18     ;; Sending command to VDP
0412B1 C9          0088*   	ret
0412B2 17 07       0089*   @cmd:       db 23,7
0412B4 00          0090*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
0412B5 00          0091*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
0412B6 00          0092*   @speed:     db 0x00 ; pixels
0412B7 00          0093*   @end:		db 0x00 ; padding
0412B8             0094*   
0412B8             0095*   ; COLOUR MODES
0412B8             0096*   ; Mode	Effect
0412B8             0097*   ; 0	Set on-screen pixel to target colour value
0412B8             0098*   ; 1	OR value with the on-screen pixel
0412B8             0099*   ; 2	AND value with the on-screen pixel
0412B8             0100*   ; 3	XOR value with the on-screen pixel
0412B8             0101*   ; 4	Invert the on-screen pixel
0412B8             0102*   ; 5	No operation
0412B8             0103*   ; 6	AND the inverse of the specified colour with the on-screen pixel
0412B8             0104*   ; 7	OR the inverse of the specified colour with the on-screen pixel
0412B8             0105*   
0412B8             0106*   ; VDU 17, colour: Define text colour (COLOUR)
0412B8             0107*   vdu_colour_text:
0412B8 32 C8 12 04 0108*   	ld (@arg),a
0412BC 21 C7 12 04 0109*   	ld hl,@cmd
0412C0 01 02 00 00 0110*   	ld bc,@end-@cmd
0412C4 5B DF       0111*   	rst.lil $18
0412C6 C9          0112*   	ret
0412C7 11          0113*   @cmd: db 17
0412C8 00          0114*   @arg: db 0
0412C9             0115*   @end:
0412C9             0116*   
0412C9             0117*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0412C9             0118*   ; inputs: a=mode, c=colour (add 128 to set background colour)
0412C9             0119*   vdu_gcol:
0412C9 32 DE 12 04 0120*   	ld (@mode),a
0412CD 79          0121*       ld a,c
0412CE 32 DF 12 04 0122*       ld (@col),a
0412D2 21 DD 12 04 0123*   	ld hl,@cmd
0412D6 01 03 00 00 0124*   	ld bc,@end-@cmd
0412DA 5B DF       0125*   	rst.lil $18
0412DC C9          0126*   	ret
0412DD 12          0127*   @cmd:  db 18
0412DE 00          0128*   @mode: db 0
0412DF 00          0129*   @col:  db 0
0412E0             0130*   @end:
0412E0             0131*   
0412E0             0132*   
0412E0             0133*   ; VDU 28, left, bottom, right, top: Set text viewport **
0412E0             0134*   ; MIND THE LITTLE-ENDIANESS
0412E0             0135*   ; inputs: c=left,b=bottom,e=right,d=top
0412E0             0136*   ; outputs; nothing
0412E0             0137*   ; destroys: a might make it out alive
0412E0             0138*   vdu_set_txt_viewport:
0412E0 ED 43 F6 12 0139*       ld (@lb),bc
       04          
0412E5 ED 53 F8 12 0140*   	ld (@rt),de
       04          
0412EA 21 F5 12 04 0141*   	ld hl,@cmd
0412EE 01 05 00 00 0142*   	ld bc,@end-@cmd
0412F2 5B DF       0143*   	rst.lil $18
0412F4 C9          0144*   	ret
0412F5 1C          0145*   @cmd:   db 28 ; set text viewport command
0412F6 00 00       0146*   @lb: 	dw 0x0000 ; set by bc
0412F8 00 00       0147*   @rt: 	dw 0x0000 ; set by de
0412FA 00          0148*   @end:   db 0x00	  ; padding
0412FB             0149*   
0412FB             0150*   ; Wait for VBLANK interrupt
0412FB             0151*   vdu_vblank:
0412FB DD E5       0152*       PUSH 	IX
0412FD             0153*   	MOSCALL	mos_sysvars
0412FD 3E 08       0001*M1 			LD	A, function
0412FF 5B CF       0002*M1 			RST.LIL	08h
041301 DD 7E 00    0154*   	LD	A, (IX + sysvar_time + 0)
041304             0155*   @wait:
041304 DD BE 00    0156*       CP 	A, (IX + sysvar_time + 0)
041307 28 FB       0157*       JR	Z, @wait
041309 DD E1       0158*       POP	IX
04130B C9          0159*       RET
04130C             0160*   
04130C             0161*   ; VDU 29, x; y;: Set graphics origin
04130C             0162*   ; This command sets the graphics origin.
04130C             0163*   ; The origin is the point on the screen where the coordinates (0,0) are located.
04130C             0164*   ; inputs: bc=x0,de=y0
04130C             0165*   ; outputs; nothing
04130C             0166*   ; destroys: a might make it out alive
04130C             0167*   vdu_set_gfx_origin:
04130C ED 43 22 13 0168*       ld (@x0),bc
       04          
041311 ED 53 24 13 0169*       ld (@y0),de
       04          
041316 21 21 13 04 0170*       ld hl,@cmd
04131A 01 05 00 00 0171*       ld bc,@end-@cmd
04131E 5B DF       0172*       rst.lil $18
041320 C9          0173*       ret
041321 1D          0174*   @cmd:   db 29 ; set graphics origin command
041322 00 00       0175*   @x0: 	dw 0x0000 ; set by bc
041324 00 00       0176*   @y0: 	dw 0x0000 ; set by de
041326 00          0177*   @end:   db 0x00	  ; padding
041327             0178*   
041327             0179*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
041327             0180*   ; NOTE: the order of the y-coordinate parameters are inverted
041327             0181*   ; 	because we have turned off logical screen scaling
041327             0182*   ; NOTE: coordinates are relative to current gfx origin
041327             0183*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041327             0184*   ; outputs; nothing
041327             0185*   ; destroys: a might make it out alive
041327             0186*   vdu_set_gfx_viewport:
041327 ED 43 47 13 0187*       ld (@x0),bc
       04          
04132C FD 22 49 13 0188*       ld (@y1),iy
       04          
041331 DD 22 4B 13 0189*   	ld (@x1),ix
       04          
041336 ED 53 4D 13 0190*   	ld (@y0),de
       04          
04133B 21 46 13 04 0191*   	ld hl,@cmd
04133F 01 09 00 00 0192*   	ld bc,@end-@cmd
041343 5B DF       0193*   	rst.lil $18
041345 C9          0194*   	ret
041346 18          0195*   @cmd:   db 24 ; set graphics viewport command
041347 00 00       0196*   @x0: 	dw 0x0000 ; set by bc
041349 00 00       0197*   @y1: 	dw 0x0000 ; set by iy
04134B 00 00       0198*   @x1: 	dw 0x0000 ; set by ix
04134D 00 00       0199*   @y0: 	dw 0x0000 ; set by de
04134F 00          0200*   @end:   db 0x00	  ; padding
041350             0201*   
041350             0202*   ; SCREEN MODES
041350             0203*   ; ===============================
041350             0204*   ; Mode  Horz  Vert  Cols  Refresh
041350             0205*   ; ---   ----  ----  ----  -------
041350             0206*   ; 11    320   240   2     60hz
041350             0207*   ; 139   320   240   2     60hz
041350             0208*   ; 23    512   384   2     60hz
041350             0209*   ; 151   512   384   2     60hz
041350             0210*   ; 6     640   240   2     60hz
041350             0211*   ; 134   640   240   2     60hz
041350             0212*   ; 2     640   480   2     60hz
041350             0213*   ; 130   640   480   2     60hz
041350             0214*   ; 17    800   600   2     60hz
041350             0215*   ; 145   800   600   2     60hz
041350             0216*   ; 18    1024  768   2     60hz
041350             0217*   ; 146   1024  768   2     60hz
041350             0218*   ; ---   ----  ----  ----  -------
041350             0219*   ; 10    320   240   4     60hz
041350             0220*   ; 138   320   240   4     60hz
041350             0221*   ; 22    512   384   4     60hz
041350             0222*   ; 150   512   384   4     60hz
041350             0223*   ; 5     640   240   4     60hz
041350             0224*   ; 133   640   240   4     60hz
041350             0225*   ; 1     640   480   4     60hz
041350             0226*   ; 129   640   480   4     60hz
041350             0227*   ; 16    800   600   4     60hz
041350             0228*   ; 19    1024  768   4     60hz
041350             0229*   ; ---   ----  ----  ----  -------
041350             0230*   ; 9     320   240   16    60hz
041350             0231*   ; 137   320   240   16    60hz
041350             0232*   ; 21    512   384   16    60hz
041350             0233*   ; 149   512   384   16    60hz
041350             0234*   ; 4     640   240   16    60hz
041350             0235*   ; 132   640   240   16    60hz
041350             0236*   ; 0     640   480   16    60hz
041350             0237*   ; 7     n/a   n/a   16    60hz
041350             0238*   ; ---   ----  ----  ----  -------
041350             0239*   ; 8     320   240   64    60hz
041350             0240*   ; 136   320   240   64    60hz
041350             0241*   ; 20    512   384   64    60hz
041350             0242*   ; 3     640   240   64    60hz
041350             0243*   ; ---   ----  ----  ----  -------
041350             0244*   vdu_set_screen_mode:
041350 32 60 13 04 0245*   	ld (@arg),a
041354 21 5F 13 04 0246*   	ld hl,@cmd
041358 01 02 00 00 0247*   	ld bc,@end-@cmd
04135C 5B DF       0248*   	rst.lil $18
04135E C9          0249*   	ret
04135F 16          0250*   @cmd: db 22 ; set screen mode
041360 00          0251*   @arg: db 0  ; screen mode parameter
041361             0252*   @end:
041361             0253*   
041361             0254*   ; get the current screen mode
041361             0255*   ; inputs: none
041361             0256*   ; outputs: a=screen mode
041361             0257*   ; destroys: af, ix
041361             0258*   vdu_get_screen_mode:
041361             0259*       MOSCALL mos_sysvars
041361 3E 08       0001*M1 			LD	A, function
041363 5B CF       0002*M1 			RST.LIL	08h
041365 DD 7E 27    0260*       ld a,(IX+sysvar_scrMode)
041368 C9          0261*       ret
041369             0262*   ; end vdu_get_screen_mode
041369             0263*   
041369             0264*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041369             0265*   ; inputs: a is scaling mode, 1=on, 0=off
041369             0266*   ; note: default setting on boot is scaling ON
041369             0267*   vdu_set_scaling:
041369 32 7B 13 04 0268*   	ld (@arg),a
04136D 21 78 13 04 0269*   	ld hl,@cmd
041371 01 04 00 00 0270*   	ld bc,@end-@cmd
041375 5B DF       0271*   	rst.lil $18
041377 C9          0272*   	ret
041378 17 00 C0    0273*   @cmd: db 23,0,0xC0
04137B 00          0274*   @arg: db 0  ; scaling on/off
04137C             0275*   @end:
04137C             0276*   
04137C             0277*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04137C             0278*   ; inputs: hl=bufferId
04137C             0279*   vdu_buff_select:
04137C 22 8E 13 04 0280*   	ld (@bufferId),hl
041380 21 8B 13 04 0281*   	ld hl,@cmd
041384 01 05 00 00 0282*   	ld bc,@end-@cmd
041388 5B DF       0283*   	rst.lil $18
04138A C9          0284*   	ret
04138B 17 1B 20    0285*   @cmd: db 23,27,0x20
04138E 00 00       0286*   @bufferId: dw 0x0000
041390 00          0287*   @end: db 0x00 ; padding
041391             0288*   
041391             0289*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041391             0290*   ; inputs: a=format; bc=width; de=height
041391             0291*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041391             0292*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041391             0293*   ; 0 	RGBA8888 (4-bytes per pixel)
041391             0294*   ; 1 	RGBA2222 (1-bytes per pixel)
041391             0295*   ; 2 	Mono/Mask (1-bit per pixel)
041391             0296*   ; 3 	Reserved for internal use by VDP (“native” format)
041391             0297*   vdu_bmp_create:
041391 ED 43 AD 13 0298*       ld (@width),bc
       04          
041396 ED 53 AF 13 0299*       ld (@height),de
       04          
04139B 32 B1 13 04 0300*       ld (@fmt),a
04139F 21 AA 13 04 0301*   	ld hl,@cmd
0413A3 01 08 00 00 0302*   	ld bc,@end-@cmd
0413A7 5B DF       0303*   	rst.lil $18
0413A9 C9          0304*   	ret
0413AA 17 1B 21    0305*   @cmd:       db 23,27,0x21
0413AD 00 00       0306*   @width:     dw 0x0000
0413AF 00 00       0307*   @height:    dw 0x0000
0413B1 00          0308*   @fmt:       db 0x00
0413B2             0309*   @end:
0413B2             0310*   
0413B2             0311*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0413B2             0312*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0413B2             0313*   vdu_load_img_rgba2_to_8:
0413B2             0314*   ; backup the target buffer id and image dimensions
0413B2 E5          0315*       push hl
0413B3 D5          0316*       push de
0413B4 C5          0317*       push bc
0413B5             0318*   ; load the rgba2 image to working buffer 65534
0413B5 21 FE FF 00 0319*       ld hl,65534 ; temporary working buffer id
0413B9 CD BC 14 04 0320*   	call vdu_load_buffer_from_file
0413BD             0321*   ; restore the image dimensions and target buffer id
0413BD C1          0322*       pop bc
0413BE D1          0323*       pop de
0413BF E1          0324*       pop hl
0413C0             0325*   ; fall through to vdu_rgba2_to_8
0413C0             0326*   
0413C0             0327*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0413C0             0328*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0413C0             0329*   ; the "expand bitmap" command is:
0413C0             0330*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0413C0             0331*   ; and then to reverse the byte order to fix endian-ness:
0413C0             0332*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0413C0             0333*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0413C0             0334*   ; VDU 23,27,&20,targetBufferID%;
0413C0             0335*   ; VDU 23,27,&21,width%;height%;0
0413C0             0336*   ; -------------------------------------------------------------------
0413C0             0337*   ; inputs: bc,de image width,height ; hl = targetBufferId
0413C0             0338*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0413C0             0339*   vdu_rgba2_to_8:
0413C0             0340*   ; load the image dimensions and buffer id parameters
0413C0 ED 43 1C 14 0341*       ld (@width),bc
       04          
0413C5 ED 53 1E 14 0342*       ld (@height),de
       04          
0413CA 22 01 14 04 0343*       ld (@bufferId0),hl
0413CE 22 0E 14 04 0344*       ld (@bufferId2),hl
0413D2 22 17 14 04 0345*       ld (@bufferId1),hl
0413D6             0346*   ; clean up bytes that got stomped on by the ID loads
0413D6 3E 48       0347*       ld a,0x48
0413D8 32 03 14 04 0348*       ld (@bufferId0+2),a
0413DC 3E 17       0349*       ld a,23
0413DE 32 19 14 04 0350*       ld (@bufferId1+2),a
0413E2 3E 18       0351*       ld a,24
0413E4 32 10 14 04 0352*       ld (@bufferId2+2),a
0413E8 AF          0353*       xor a
0413E9 32 20 14 04 0354*       ld (@height+2),a
0413ED             0355*   ; send the vdu command strings
0413ED 21 F8 13 04 0356*       ld hl,@beg
0413F1 01 29 00 00 0357*       ld bc,@end-@beg
0413F5 5B DF       0358*       rst.lil $18
0413F7 C9          0359*       ret
0413F8             0360*   @beg:
0413F8             0361*   ; Command 14: Consolidate blocks in a buffer
0413F8             0362*   ; VDU 23, 0, &A0, bufferId; 14
0413F8 17 00 A0    0363*       db 23,0,0xA0
0413FB FE FF       0364*       dw 65534 ; workingBufferId
0413FD 0E          0365*       db 14 ; consolidate blocks
0413FE             0366*   ; the "expand bitmap" command is:
0413FE             0367*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0413FE 17 00 A0    0368*       db 23,0,0xA0
041401 00 00       0369*   @bufferId0: dw 0x0000 ; targetBufferId
041403 48          0370*       db 0x48 ; given as decimal command 72 in the docs
041404 02          0371*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041405 FE FF       0372*       dw 65534 ; sourceBufferId
041407 00 7F BF FF 0373*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
04140B             0374*   ; reverse the byte order to fix endian-ness:
04140B             0375*   ; Command 24: Reverse the order of data of blocks within a buffer
04140B             0376*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
04140B             0377*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
04140B 17 00 A0    0378*       db 23,0,0xA0
04140E 00 00       0379*   @bufferId2:    dw 0x0000 ; targetBufferId
041410 18          0380*       db 24 ; reverse byte order
041411 04          0381*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041412 04 00       0382*       dw 4 ; size (4 bytes)
041414             0383*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041414             0384*   ; VDU 23,27,&20,targetBufferID%;
041414 17 1B 20    0385*       db 23,27,0x20 ; select bitmap
041417 00 00       0386*   @bufferId1: dw 0x0000 ; targetBufferId
041419             0387*   ; VDU 23,27,&21,width%;height%;0
041419 17 1B 21    0388*       db 23,27,0x21 ; create bitmap from buffer
04141C 00 00       0389*   @width: dw 0x0000
04141E 00 00       0390*   @height: dw 0x0000
041420 00          0391*       db 0x00 ; rgba8888 format
041421             0392*   @end:
041421             0393*   
041421             0394*   ; scratch variables
041421 00 00 00    0395*   bufferId0: dl 0x000000
041424 00 00 00    0396*   bufferId1: dl 0x000000
041427             0397*   
041427             0398*   ; load a vdu buffer from local memory
041427             0399*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041427             0400*   vdu_load_buffer:
041427 ED 43 50 14 0401*       ld (@length),bc
       04          
04142C D5          0402*       push de ; save data pointer
04142D             0403*   ; send the vdu command string
04142D 7D          0404*       ld a,l
04142E 32 4D 14 04 0405*       ld (@bufferId),a
041432 7C          0406*       ld a,h
041433 32 4E 14 04 0407*       ld (@bufferId+1),a
041437 21 4A 14 04 0408*       ld hl,@cmd
04143B 01 08 00 00 0409*       ld bc,@end-@cmd
04143F 5B DF       0410*       rst.lil $18
041441             0411*   ; send the buffer data
041441 E1          0412*       pop hl ; pointer to data
041442 ED 4B 50 14 0413*       ld bc,(@length)
       04          
041447 5B DF       0414*       rst.lil $18 ; send it
041449 C9          0415*       ret
04144A             0416*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04144A 17 00 A0    0417*   @cmd:       db 23,0,0xA0
04144D 00 00       0418*   @bufferId:	dw 0x0000
04144F 00          0419*   		    db 0 ; load buffer
041450 00 00       0420*   @length:	dw 0x0000
041452 00          0421*   @end: db 0 ; padding
041453             0422*   
041453             0423*   ; clear a buffer
041453             0424*   ; inputs: hl = bufferId
041453             0425*   vdu_clear_buffer:
041453 7D          0426*       ld a,l
041454 32 6B 14 04 0427*       ld (@bufferId),a
041458 7C          0428*       ld a,h
041459 32 6C 14 04 0429*       ld (@bufferId+1),a
04145D 21 68 14 04 0430*       ld hl,@cmd
041461 01 06 00 00 0431*       ld bc,@end-@cmd
041465 5B DF       0432*       rst.lil $18
041467 C9          0433*       ret
041468 17 00 A0    0434*   @cmd:       db 23,0,0xA0
04146B 00 00       0435*   @bufferId:	dw 0x0000
04146D 02          0436*   		    db 2 ; clear buffer
04146E             0437*   @end:
04146E             0438*   
04146E             0439*   vdu_clear_all_buffers:
04146E             0440*   ; clear all buffers
04146E 21 79 14 04 0441*       ld hl,@beg
041472 01 06 00 00 0442*       ld bc,@end-@beg
041476 5B DF       0443*       rst.lil $18
041478 C9          0444*       ret
041479 17 00 A0    0445*   @beg: db 23,0,$A0
04147C FF FF       0446*         dw -1 ; clear all buffers
04147E 02          0447*         db 2  ; command 2: clear a buffer
04147F             0448*   @end:
04147F             0449*   
04147F             0450*   ; Command 14: Consolidate blocks in a buffer
04147F             0451*   vdu_consolidate_buffer:
04147F             0452*   ; set parameters for vdu call
04147F 7D          0453*       ld a,l
041480 32 97 14 04 0454*       ld (@bufferId),a
041484 7C          0455*       ld a,h
041485 32 98 14 04 0456*       ld (@bufferId+1),a
041489 21 94 14 04 0457*       ld hl,@beg
04148D 01 06 00 00 0458*       ld bc,@end-@beg
041491 5B DF       0459*       rst.lil $18
041493 C9          0460*       ret
041494             0461*   ; VDU 23, 0, &A0, bufferId; 14
041494 17 00 A0    0462*   @beg: db 23,0,0xA0
041497 00 00       0463*   @bufferId: dw 0x0000
041499 0E          0464*              db 14
04149A             0465*   @end:
04149A             0466*   
04149A             0467*   ; load an image file to a buffer and make it a bitmap
04149A             0468*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
04149A             0469*   vdu_load_img:
04149A             0470*   ; back up image type and dimension parameters
04149A 22 21 14 04 0471*       ld (bufferId0),hl
04149E F5          0472*       push af
04149F C5          0473*   	push bc
0414A0 D5          0474*   	push de
0414A1             0475*   ; load the image
0414A1 CD BC 14 04 0476*   	call vdu_load_buffer_from_file
0414A5             0477*   ; now make it a bitmap
0414A5 2A 21 14 04 0478*       ld hl,(bufferId0)
0414A9 CD 7F 14 04 0479*       call vdu_consolidate_buffer
0414AD 2A 21 14 04 0480*       ld hl,(bufferId0)
0414B1 CD 7C 13 04 0481*       call vdu_buff_select
0414B5 D1          0482*   	pop de ; image height
0414B6 C1          0483*   	pop bc ; image width
0414B7 F1          0484*   	pop af ; image type
0414B8 C3 91 13 04 0485*   	jp vdu_bmp_create ; will return to caller from there
0414BC             0486*   
0414BC             0487*   ; inputs: hl = bufferId; iy = pointer to filename
0414BC             0488*   vdu_load_buffer_from_file:
0414BC 22 21 14 04 0489*       ld (bufferId0),hl
0414C0             0490*   
0414C0             0491*   ; clear target buffer
0414C0 CD 53 14 04 0492*       call vdu_clear_buffer
0414C4             0493*   
0414C4             0494*   ; open the file in read mode
0414C4             0495*   ; Open a file
0414C4             0496*   ; HLU: Filename
0414C4             0497*   ;   C: Mode
0414C4             0498*   ; Returns:
0414C4             0499*   ;   A: Filehandle, or 0 if couldn't open
0414C4 FD E5       0500*   	push iy ; pointer to filename
0414C6 E1          0501*   	pop hl
0414C7 0E 01       0502*   	ld c,fa_read
0414C9             0503*       MOSCALL mos_fopen
0414C9 3E 0A       0001*M1 			LD	A, function
0414CB 5B CF       0002*M1 			RST.LIL	08h
0414CD 32 08 15 04 0504*       ld (@filehandle),a
0414D1             0505*   
0414D1             0506*   @read_file:
0414D1             0507*   ; Read a block of data from a file
0414D1             0508*   ;   C: Filehandle
0414D1             0509*   ; HLU: Pointer to where to write the data to
0414D1             0510*   ; DEU: Number of bytes to read
0414D1             0511*   ; Returns:
0414D1             0512*   ; DEU: Number of bytes read
0414D1 3A 08 15 04 0513*       ld a,(@filehandle)
0414D5 4F          0514*       ld c,a
0414D6 21 00 E0 B7 0515*       ld hl,filedata
0414DA 11 00 20 00 0516*       ld de,8192 ; max we can read into onboard sram at one time
0414DE             0517*       MOSCALL mos_fread
0414DE 3E 1A       0001*M1 			LD	A, function
0414E0 5B CF       0002*M1 			RST.LIL	08h
0414E2             0518*   
0414E2             0519*   ; test de for zero bytes read
0414E2 21 00 00 00 0520*       ld hl,0
0414E6 AF          0521*       xor a ; clear carry
0414E7 ED 52       0522*       sbc hl,de
0414E9 CA FF 14 04 0523*       jp z,@close_file
0414ED             0524*   
0414ED             0525*   ; load a vdu buffer from local memory
0414ED             0526*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0414ED 2A 21 14 04 0527*       ld hl,(bufferId0)
0414F1 D5          0528*       push de ; chunksize
0414F2 C1          0529*       pop bc
0414F3 11 00 E0 B7 0530*       ld de,filedata
0414F7 CD 27 14 04 0531*       call vdu_load_buffer
0414FB             0532*   
0414FB             0533*   ; read the next block
0414FB C3 D1 14 04 0534*       jp @read_file
0414FF             0535*   
0414FF             0536*   ; close the file
0414FF             0537*   @close_file:
0414FF 3A 08 15 04 0538*       ld a,(@filehandle)
041503             0539*       MOSCALL mos_fclose
041503 3E 0B       0001*M1 			LD	A, function
041505 5B CF       0002*M1 			RST.LIL	08h
041507 C9          0540*       ret ; vdu_load_buffer_from_file
041508             0541*   
041508 00          0542*   @filehandle: db 0 ; file handle
041509 00 00 00    0543*   @fil: dl 0 ; pointer to FIL struct
04150C             0544*   
04150C 00 00 00    0545*   @chunkpointer: dl 0 ; pointer to current chunk
04150F             0546*   
04150F             0547*   ; File information structure (FILINFO)
04150F             0548*   @filinfo:
04150F 00 00 00 00 0549*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041513 00 00       0550*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041515 00 00       0551*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041517 00          0552*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041518 00 00 00 00 0553*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041525 00 00 00 00 0554*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041625             0040        include "vdu_fonts.inc"
041625             0001*   ; select font
041625             0002*   ; inputs: hl = bufferId, a = font flags
041625             0003*   ; Flags:
041625             0004*   ; Bit	Description
041625             0005*   ; 0	Adjust cursor position to ensure text baseline is aligned
041625             0006*   ;   0: Do not adjust cursor position (best for changing font on a new line)
041625             0007*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
041625             0008*   ; 1-7	Reserved for future use
041625             0009*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041625             0010*   vdu_font_select:
041625 22 3C 16 04 0011*       ld (@bufferId),hl
041629 32 3E 16 04 0012*       ld (@flags),a
04162D 21 38 16 04 0013*       ld hl,@cmd
041631 01 07 00 00 0014*       ld bc,@end-@cmd
041635 5B DF       0015*       rst.lil $18
041637 C9          0016*       ret
041638 17 00 95 00 0017*   @cmd: db 23, 0, 0x95, 0
04163C 00 00       0018*   @bufferId: dw 0x0000
04163E 00          0019*   @flags: db 0x00
04163F             0020*   @end:
04163F             0021*   
04163F             0022*   ; create font from buffer
04163F             0023*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
04163F             0024*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
04163F             0025*   vdu_font_create:
04163F 22 64 16 04 0026*       ld (@bufferId),hl
041643 ED 53 66 16 0027*       ld (@width),de ; also loads height
       04          
041648 32 69 16 04 0028*       ld (@flags),a
04164C 7A          0029*       ld a,d ; height
04164D 32 68 16 04 0030*       ld (@ascent),a ; ascent = height
041651             0031*   ; consolidate buffer
041651 CD 7F 14 04 0032*       call vdu_consolidate_buffer
041655             0033*   ; create font
041655 21 60 16 04 0034*       ld hl,@cmd
041659 01 0A 00 00 0035*       ld bc,@end-@cmd
04165D 5B DF       0036*       rst.lil $18
04165F C9          0037*       ret
041660 17 00 95 01 0038*   @cmd: db 23, 0, 0x95, 1
041664 00 00       0039*   @bufferId: dw 0x0000
041666 00          0040*   @width: db 0x00
041667 00          0041*   @height: db 0x00
041668 00          0042*   @ascent: db 0x00
041669 00          0043*   @flags: db 0x00
04166A             0044*   @end:
04166A             0045*   
04166A             0046*   ; set or adjust font property
04166A             0047*   ; inputs: hl = bufferId, a = field, de = value
04166A             0048*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
04166A             0049*   vdu_font_property:
04166A 22 86 16 04 0050*       ld (@bufferId),hl
04166E 32 88 16 04 0051*       ld (@field),a
041672 ED 53 89 16 0052*       ld (@value),de
       04          
041677 21 82 16 04 0053*       ld hl,@cmd
04167B 01 09 00 00 0054*       ld bc,@end-@cmd
04167F 5B DF       0055*       rst.lil $18
041681 C9          0056*       ret
041682 17 00 95 02 0057*   @cmd: db 23, 0, 0x95, 2
041686 00 00       0058*   @bufferId: dw 0x0000
041688 00          0059*   @field: db 0x00
041689 00 00       0060*   @value: dw 0x0000
04168B 00          0061*   @end: db 0x00 ; padding
04168C             0062*   
04168C             0063*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
04168C             0064*   
04168C             0065*   ; Clear/Delete font
04168C             0066*   ; inputs: hl = bufferId
04168C             0067*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
04168C             0068*   vdu_font_clear:
04168C 22 9F 16 04 0069*       ld (@bufferId),hl
041690 21 9B 16 04 0070*       ld hl,@cmd
041694 01 06 00 00 0071*       ld bc,@end-@cmd
041698 5B DF       0072*       rst.lil $18
04169A C9          0073*       ret
04169B 17 00 95 04 0074*   @cmd: db 23, 0, 0x95, 4
04169F 00 00       0075*   @bufferId: dw 0x0000
0416A1 00          0076*   @end: db 0x00 ; padding
0416A2             0077*   
0416A2             0078*   ; Copy system font to buffer
0416A2             0079*   ; inputs: hl = bufferId
0416A2             0080*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
0416A2             0081*   vdu_font_copy_system:
0416A2 22 B5 16 04 0082*       ld (@bufferId),hl
0416A6 21 B1 16 04 0083*       ld hl,@cmd
0416AA 01 06 00 00 0084*       ld bc,@end-@cmd
0416AE 5B DF       0085*       rst.lil $18
0416B0 C9          0086*       ret
0416B1 17 00 95 05 0087*   @cmd: db 23, 0, 0x95, 5
0416B5 00 00       0088*   @bufferId: dw 0x0000
0416B7 00          0089*   @end: db 0x00 ; padding
0416B8             0041        include "vdu_plot.inc"
0416B8             0001*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0416B8             0002*   ; PLOT code 	(Decimal) 	Effect
0416B8             0003*   ; &00-&07 	0-7 	Solid line, includes both ends
0416B8             0004*   plot_sl_both: equ 0x00
0416B8             0005*   
0416B8             0006*   ; &08-&0F 	8-15 	Solid line, final point omitted
0416B8             0007*   plot_sl_first: equ 0x08
0416B8             0008*   
0416B8             0009*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0416B8             0010*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0416B8             0011*   
0416B8             0012*   ; &20-&27 	32-39 	Solid line, first point omitted
0416B8             0013*   plot_sl_last: equ 0x20
0416B8             0014*   
0416B8             0015*   ; &28-&2F 	40-47 	Solid line, both points omitted
0416B8             0016*   plot_sl_none: equ 0x28
0416B8             0017*   
0416B8             0018*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0416B8             0019*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0416B8             0020*   
0416B8             0021*   ; &40-&47 	64-71 	Point plot
0416B8             0022*   plot_pt: equ 0x40
0416B8             0023*   
0416B8             0024*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0416B8             0025*   plot_lf_lr_non_bg: equ 0x48
0416B8             0026*   
0416B8             0027*   ; &50-&57 	80-87 	Triangle fill
0416B8             0028*   plot_tf: equ 0x50
0416B8             0029*   
0416B8             0030*   ; &58-&5F 	88-95 	Line fill right to background §§
0416B8             0031*   plot_lf_r_bg: equ 0x58
0416B8             0032*   
0416B8             0033*   ; &60-&67 	96-103 	Rectangle fill
0416B8             0034*   plot_rf: equ 0x60
0416B8             0035*   
0416B8             0036*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0416B8             0037*   plot_lf_lr_fg: equ 0x60
0416B8             0038*   
0416B8             0039*   ; &70-&77 	112-119 	Parallelogram fill
0416B8             0040*   plot_pf: equ 0x70
0416B8             0041*   
0416B8             0042*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0416B8             0043*   plot_lf_r_non_fg: equ 0x78
0416B8             0044*   
0416B8             0045*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
0416B8             0046*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0416B8             0047*   
0416B8             0048*   ; &90-&97 	144-151 	Circle outline
0416B8             0049*   plot_co: equ 0x90
0416B8             0050*   
0416B8             0051*   ; &98-&9F 	152-159 	Circle fill
0416B8             0052*   plot_cf: equ 0x98
0416B8             0053*   
0416B8             0054*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
0416B8             0055*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
0416B8             0056*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
0416B8             0057*   
0416B8             0058*   ; &B8-&BF 	184-191 	Rectangle copy/move
0416B8             0059*   plot_rcm: equ 0xB8
0416B8             0060*   
0416B8             0061*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0416B8             0062*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0416B8             0063*   ; &D0-&D7 	208-215 	Not defined
0416B8             0064*   ; &D8-&DF 	216-223 	Not defined
0416B8             0065*   ; &E0-&E7 	224-231 	Not defined
0416B8             0066*   
0416B8             0067*   ; &E8-&EF 	232-239 	Bitmap plot §
0416B8             0068*   plot_bmp: equ 0xE8
0416B8             0069*   
0416B8             0070*   ; &F0-&F7 	240-247 	Not defined
0416B8             0071*   ; &F8-&FF 	248-255 	Not defined
0416B8             0072*   
0416B8             0073*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0416B8             0074*   ; Agon Console8 VDP 2.2.0
0416B8             0075*   
0416B8             0076*   ; Within each group of eight plot codes, the effects are as follows:
0416B8             0077*   ; Plot code 	Effect
0416B8             0078*   ; 0 	Move relative
0416B8             0079*   mv_rel: equ 0
0416B8             0080*   
0416B8             0081*   ; 1 	Plot relative in current foreground colour
0416B8             0082*   dr_rel_fg: equ 1
0416B8             0083*   
0416B8             0084*   ; 2 	Not supported (Plot relative in logical inverse colour)
0416B8             0085*   ; 3 	Plot relative in current background colour
0416B8             0086*   dr_rel_bg: equ 3
0416B8             0087*   
0416B8             0088*   ; 4 	Move absolute
0416B8             0089*   mv_abs: equ 4
0416B8             0090*   
0416B8             0091*   ; 5 	Plot absolute in current foreground colour
0416B8             0092*   dr_abs_fg: equ 5
0416B8             0093*   
0416B8             0094*   ; 6 	Not supported (Plot absolute in logical inverse colour)
0416B8             0095*   ; 7 	Plot absolute in current background colour
0416B8             0096*   dr_abs_bg: equ 7
0416B8             0097*   
0416B8             0098*   ; Codes 0-3 use the position data provided as part of the command
0416B8             0099*   ; as a relative position, adding the position given to the current
0416B8             0100*   ; graphical cursor position. Codes 4-7 use the position data provided
0416B8             0101*   ; as part of the command as an absolute position, setting the current
0416B8             0102*   ; graphical cursor position to the position given.
0416B8             0103*   
0416B8             0104*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0416B8             0105*   ; current pixel colour. These operations cannot currently be supported
0416B8             0106*   ; by the graphics system the Agon VDP uses, so these codes are not
0416B8             0107*   ; supported. Support for these codes may be added in a future version
0416B8             0108*   ; of the VDP firmware.
0416B8             0109*   
0416B8             0110*   ; 16 colour palette constants
0416B8             0111*   c_black: equ 0
0416B8             0112*   c_red_dk: equ 1
0416B8             0113*   c_green_dk: equ 2
0416B8             0114*   c_yellow_dk: equ 3
0416B8             0115*   c_blue_dk: equ 4
0416B8             0116*   c_magenta_dk: equ 5
0416B8             0117*   c_cyan_dk: equ 6
0416B8             0118*   c_grey: equ 7
0416B8             0119*   c_grey_dk: equ 8
0416B8             0120*   c_red: equ 9
0416B8             0121*   c_green: equ 10
0416B8             0122*   c_yellow: equ 11
0416B8             0123*   c_blue: equ 12
0416B8             0124*   c_magenta: equ 13
0416B8             0125*   c_cyan: equ 14
0416B8             0126*   c_white: equ 15
0416B8             0127*   
0416B8             0128*   ; VDU 25, mode, x; y;: PLOT command
0416B8             0129*   ; inputs: a=mode, bc=x0, de=y0
0416B8             0130*   vdu_plot:
0416B8 32 D2 16 04 0131*       ld (@mode),a
0416BC ED 43 D3 16 0132*       ld (@x0),bc
       04          
0416C1 ED 53 D5 16 0133*       ld (@y0),de
       04          
0416C6 21 D1 16 04 0134*   	ld hl,@cmd
0416CA 01 06 00 00 0135*   	ld bc,@end-@cmd
0416CE 5B DF       0136*   	rst.lil $18
0416D0 C9          0137*   	ret
0416D1 19          0138*   @cmd:   db 25
0416D2 00          0139*   @mode:  db 0
0416D3 00 00       0140*   @x0: 	dw 0
0416D5 00 00       0141*   @y0: 	dw 0
0416D7 00          0142*   @end:   db 0 ; extra byte to soak up deu
0416D8             0143*   
0416D8             0144*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0416D8             0145*   ; &E8-&EF 	232-239 	Bitmap plot §
0416D8             0146*   ; VDU 25, mode, x; y;: PLOT command
0416D8             0147*   ; inputs: bc=x0, de=y0
0416D8             0148*   ; prerequisites: vdu_buff_select
0416D8             0149*   vdu_plot_bmp:
0416D8 ED 43 EF 16 0150*       ld (@x0),bc
       04          
0416DD ED 53 F1 16 0151*       ld (@y0),de
       04          
0416E2 21 ED 16 04 0152*   	ld hl,@cmd
0416E6 01 06 00 00 0153*   	ld bc,@end-@cmd
0416EA 5B DF       0154*   	rst.lil $18
0416EC C9          0155*   	ret
0416ED 19          0156*   @cmd:   db 25
0416EE ED          0157*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
0416EF 00 00       0158*   @x0: 	dw 0x0000
0416F1 00 00       0159*   @y0: 	dw 0x0000
0416F3 00          0160*   @end:   db 0x00 ; padding
0416F4             0161*   
0416F4             0162*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0416F4             0163*   ; &E8-&EF 	232-239 	Bitmap plot §
0416F4             0164*   ; VDU 25, mode, x; y;: PLOT command
0416F4             0165*   ; inputs: bc=x0, de=y0
0416F4             0166*   ; USING 16.8 FIXED POINT COORDINATES
0416F4             0167*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
0416F4             0168*   ;   the fractional portiion of the inputs are truncated
0416F4             0169*   ;   leaving only the 16-bit integer portion
0416F4             0170*   ; prerequisites: vdu_buff_select
0416F4             0171*   vdu_plot_bmp168:
0416F4             0172*   ; populate in the reverse of normal to keep the
0416F4             0173*   ; inputs from stomping on each other
0416F4 ED 53 12 17 0174*       ld (@y0-1),de
       04          
0416F9 ED 43 10 17 0175*       ld (@x0-1),bc
       04          
0416FE 3E ED       0176*       ld a,plot_bmp+dr_abs_fg ; 0xED
041700 32 10 17 04 0177*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
041704 21 0F 17 04 0178*   	ld hl,@cmd
041708 01 06 00 00 0179*   	ld bc,@end-@cmd
04170C 5B DF       0180*   	rst.lil $18
04170E C9          0181*   	ret
04170F 19          0182*   @cmd:   db 25
041710 ED          0183*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041711 00 00       0184*   @x0: 	dw 0x0000
041713 00 00       0185*   @y0: 	dw 0x0000
041715             0186*   @end:  ; no padding required b/c we shifted de right
041715             0187*   
041715             0188*   ; draw a filled rectangle
041715             0189*   vdu_plot_rf:
041715 ED 43 3C 17 0190*       ld (@x0),bc
       04          
04171A ED 53 3E 17 0191*       ld (@y0),de
       04          
04171F DD 22 42 17 0192*       ld (@x1),ix
       04          
041724 FD 22 44 17 0193*       ld (@y1),iy
       04          
041729 3E 19       0194*       ld a,25 ; we have to reload the 2nd plot command
04172B 32 40 17 04 0195*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04172F 21 3A 17 04 0196*   	ld hl,@cmd0
041733 01 0C 00 00 0197*   	ld bc,@end-@cmd0
041737 5B DF       0198*   	rst.lil $18
041739 C9          0199*       ret
04173A 19          0200*   @cmd0:  db 25 ; plot
04173B 04          0201*   @arg0:  db plot_sl_both+mv_abs
04173C 00 00       0202*   @x0:    dw 0x0000
04173E 00 00       0203*   @y0:    dw 0x0000
041740 19          0204*   @cmd1:  db 25 ; plot
041741 65          0205*   @arg1:  db plot_rf+dr_abs_fg
041742 00 00       0206*   @x1:    dw 0x0000
041744 00 00       0207*   @y1:    dw 0x0000
041746 00          0208*   @end:   db 0x00 ; padding
041747             0209*   
041747             0210*   ; draw a filled circle
041747             0211*   vdu_plot_cf:
041747 ED 43 6E 17 0212*       ld (@x0),bc
       04          
04174C ED 53 70 17 0213*       ld (@y0),de
       04          
041751 DD 22 74 17 0214*       ld (@x1),ix
       04          
041756 FD 22 76 17 0215*       ld (@y1),iy
       04          
04175B 3E 19       0216*       ld a,25 ; we have to reload the 2nd plot command
04175D 32 72 17 04 0217*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041761 21 6C 17 04 0218*   	ld hl,@cmd0
041765 01 0C 00 00 0219*   	ld bc,@end-@cmd0
041769 5B DF       0220*   	rst.lil $18
04176B C9          0221*       ret
04176C 19          0222*   @cmd0:  db 25 ; plot
04176D 04          0223*   @arg0:  db plot_sl_both+mv_abs
04176E 00 00       0224*   @x0:    dw 0x0000
041770 00 00       0225*   @y0:    dw 0x0000
041772 19          0226*   @cmd1:  db 25 ; plot
041773 9D          0227*   @arg1:  db plot_cf+dr_abs_fg
041774 00 00       0228*   @x1:    dw 0x0000
041776 00 00       0229*   @y1:    dw 0x0000
041778 00          0230*   @end:   db 0x00 ; padding
041779             0042        include "vdu_sprites.inc"
041779             0001*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041779             0002*   ; the VDP can support up to 256 sprites. They must be defined
041779             0003*   ; contiguously, and so the first sprite is sprite 0.
041779             0004*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041779             0005*   ; Once a selection of sprites have been defined, you can activate
041779             0006*   ; them using the VDU 23, 27, 7, n command, where n is the number
041779             0007*   ; of sprites to activate. This will activate the first n sprites,
041779             0008*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041779             0009*   
041779             0010*   ; A single sprite can have multiple "frames", referring to
041779             0011*   ; different bitmaps.
041779             0012*   ; (These bitmaps do not need to be the same size.)
041779             0013*   ; This allows a sprite to include an animation sequence,
041779             0014*   ; which can be stepped through one frame at a time, or picked
041779             0015*   ; in any order.
041779             0016*   
041779             0017*   ; Any format of bitmap can be used as a sprite frame. It should
041779             0018*   ; be noted however that "native" format bitmaps are not
041779             0019*   ; recommended for use as sprite frames, as they cannot get
041779             0020*   ; erased from the screen. (As noted above, the "native" bitmap
041779             0021*   ; format is not really intended for general use.) This is part
041779             0022*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041779             0023*   ; screen are now stored in RGBA2222 format.
041779             0024*   
041779             0025*   ; An "active" sprite can be hidden, so it will stop being drawn,
041779             0026*   ; and then later shown again.
041779             0027*   
041779             0028*   ; Moving sprites around the screen is done by changing the
041779             0029*   ; position of the sprite. This can be done either by setting
041779             0030*   ; the absolute position of the sprite, or by moving the sprite
041779             0031*   ; by a given number of pixels. (Sprites are positioned using
041779             0032*   ; pixel coordinates, and not by the logical OS coordinate system.)
041779             0033*   ; In the current sprite system, sprites will not update their
041779             0034*   ; position on-screen until either another drawing operation is
041779             0035*   ; performed or an explicit VDU 23, 27, 15 command is performed.
041779             0036*   
041779             0037*   ; VDU 23, 27, 4, n: Select sprite n
041779             0038*   ; inputs: a is the 8-bit sprite id
041779             0039*   vdu_sprite_select:
041779 32 8B 17 04 0040*       ld (@sprite),a
04177D 21 88 17 04 0041*       ld hl,@cmd
041781 01 04 00 00 0042*       ld bc,@end-@cmd
041785 5B DF       0043*       rst.lil $18
041787 C9          0044*       ret
041788 17 1B 04    0045*   @cmd:    db 23,27,4
04178B 00          0046*   @sprite: db 0x00
04178C             0047*   @end:
04178C             0048*   
04178C             0049*   ; VDU 23, 27, 5: Clear frames in current sprite
04178C             0050*   ; inputs: none
04178C             0051*   ; prerequisites: vdu_sprite_select
04178C             0052*   vdu_sprite_clear_frames:
04178C 21 97 17 04 0053*       ld hl,@cmd
041790 01 03 00 00 0054*       ld bc,@end-@cmd
041794 5B DF       0055*       rst.lil $18
041796 C9          0056*       ret
041797 17 1B 05    0057*   @cmd: db 23,27,5
04179A             0058*   @end:
04179A             0059*   
04179A             0060*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04179A             0061*   ; inputs: a is the 8-bit bitmap number
04179A             0062*   ; prerequisites: vdu_sprite_select
04179A             0063*   vdu_sprite_add_bmp:
04179A 32 AC 17 04 0064*       ld (@bmp),a
04179E 21 A9 17 04 0065*       ld hl,@cmd
0417A2 01 04 00 00 0066*       ld bc,@end-@cmd
0417A6 5B DF       0067*       rst.lil $18
0417A8 C9          0068*       ret
0417A9 17 1B 06    0069*   @cmd: db 23,27,6
0417AC 00          0070*   @bmp: db 0x00
0417AD             0071*   @end:
0417AD             0072*   
0417AD             0073*   ; VDU 23, 27, 7, n: Activate n sprites
0417AD             0074*   ; inputs: a is the number of sprites to activate
0417AD             0075*   ; prerequisites: each sprite activated must have at least one frame attached to it
0417AD             0076*   vdu_sprite_activate:
0417AD 32 BF 17 04 0077*       ld (@num),a
0417B1 21 BC 17 04 0078*       ld hl,@cmd
0417B5 01 04 00 00 0079*       ld bc,@end-@cmd
0417B9 5B DF       0080*       rst.lil $18
0417BB C9          0081*       ret
0417BC 17 1B 07    0082*   @cmd: db 23,27,7
0417BF 00          0083*   @num: db 0x00
0417C0             0084*   @end:
0417C0             0085*   
0417C0             0086*   ; VDU 23, 27, 8: Select next frame of current sprite
0417C0             0087*   ; inputs: none
0417C0             0088*   ; prerequisites: vdu_sprite_select
0417C0             0089*   vdu_sprite_next_frame:
0417C0 21 CB 17 04 0090*       ld hl,@cmd
0417C4 01 03 00 00 0091*       ld bc,@end-@cmd
0417C8 5B DF       0092*       rst.lil $18
0417CA C9          0093*       ret
0417CB 17 1B 08    0094*   @cmd: db 23,27,8
0417CE             0095*   @end:
0417CE             0096*   
0417CE             0097*   ; VDU 23, 27, 9: Select previous frame of current sprite
0417CE             0098*   ; inputs: none
0417CE             0099*   ; prerequisites: vdu_sprite_select
0417CE             0100*   vdu_sprite_prev_frame:
0417CE 21 D9 17 04 0101*       ld hl,@cmd
0417D2 01 03 00 00 0102*       ld bc,@end-@cmd
0417D6 5B DF       0103*       rst.lil $18
0417D8 C9          0104*       ret
0417D9 17 1B 09    0105*   @cmd: db 23,27,9
0417DC             0106*   @end:
0417DC             0107*   
0417DC             0108*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
0417DC             0109*   ; inputs: a is frame number to select
0417DC             0110*   ; prerequisites: vdu_sprite_select
0417DC             0111*   vdu_sprite_select_frame:
0417DC 32 EE 17 04 0112*       ld (@frame),a
0417E0 21 EB 17 04 0113*       ld hl,@cmd
0417E4 01 04 00 00 0114*       ld bc,@end-@cmd
0417E8 5B DF       0115*       rst.lil $18
0417EA C9          0116*       ret
0417EB 17 1B 0A    0117*   @cmd:    db 23,27,10
0417EE 00          0118*   @frame:  db 0x00
0417EF             0119*   @end:
0417EF             0120*   
0417EF             0121*   ; VDU 23, 27, 11: Show current sprite
0417EF             0122*   ; inputs: none
0417EF             0123*   ; prerequisites: vdu_sprite_select
0417EF             0124*   vdu_sprite_show:
0417EF 21 FA 17 04 0125*       ld hl,@cmd
0417F3 01 03 00 00 0126*       ld bc,@end-@cmd
0417F7 5B DF       0127*       rst.lil $18
0417F9 C9          0128*       ret
0417FA 17 1B 0B    0129*   @cmd: db 23,27,11
0417FD             0130*   @end:
0417FD             0131*   
0417FD             0132*   ; VDU 23, 27, 12: Hide current sprite
0417FD             0133*   ; inputs: none
0417FD             0134*   ; prerequisites: vdu_sprite_select
0417FD             0135*   vdu_sprite_hide:
0417FD 21 08 18 04 0136*       ld hl,@cmd
041801 01 03 00 00 0137*       ld bc,@end-@cmd
041805 5B DF       0138*       rst.lil $18
041807 C9          0139*       ret
041808 17 1B 0C    0140*   @cmd: db 23,27,12
04180B             0141*   @end:
04180B             0142*   
04180B             0143*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04180B             0144*   ; inputs: bc is x coordinate, de is y coordinate
04180B             0145*   ; prerequisites: vdu_sprite_select
04180B             0146*   vdu_sprite_move_abs:
04180B ED 43 23 18 0147*       ld (@xpos),bc
       04          
041810 ED 53 25 18 0148*       ld (@ypos),de
       04          
041815 21 20 18 04 0149*       ld hl,@cmd
041819 01 07 00 00 0150*       ld bc,@end-@cmd
04181D 5B DF       0151*       rst.lil $18
04181F C9          0152*       ret
041820 17 1B 0D    0153*   @cmd:  db 23,27,13
041823 00 00       0154*   @xpos: dw 0x0000
041825 00 00       0155*   @ypos: dw 0x0000
041827 00          0156*   @end:  db 0x00 ; padding
041828             0157*   
041828             0158*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041828             0159*   ; inputs: bc is x coordinate, de is y coordinate
041828             0160*   ; prerequisites: vdu_sprite_select
041828             0161*   vdu_sprite_move_rel:
041828 ED 43 40 18 0162*       ld (@dx),bc
       04          
04182D ED 53 42 18 0163*       ld (@dy),de
       04          
041832 21 3D 18 04 0164*       ld hl,@cmd
041836 01 07 00 00 0165*       ld bc,@end-@cmd
04183A 5B DF       0166*       rst.lil $18
04183C C9          0167*       ret
04183D 17 1B 0E    0168*   @cmd: db 23,27,14
041840 00 00       0169*   @dx:  dw 0x0000
041842 00 00       0170*   @dy:  dw 0x0000
041844 00          0171*   @end: db 0x00 ; padding
041845             0172*   
041845             0173*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041845             0174*   ; USING 16.8 FIXED POINT COORDINATES
041845             0175*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041845             0176*   ;   the fractional portiion of the inputs are truncated
041845             0177*   ;   leaving only the 16-bit integer portion
041845             0178*   ; prerequisites: vdu_sprite_select
041845             0179*   vdu_sprite_move_abs168:
041845             0180*   ; offset inputs by the gfx origin
041845             0181*   ; y coordinate
041845 21 00 30 00 0182*       ld hl,origin_top*256
041849 19          0183*       add hl,de
04184A 22 6C 18 04 0184*       ld (@ypos-1),hl
04184E             0185*   ; x coordinate
04184E 21 00 80 00 0186*       ld hl,origin_left*256
041852 09          0187*       add hl,bc
041853 22 6A 18 04 0188*       ld (@xpos-1),hl
041857             0189*   ; prepare vdu command
041857 3E 0D       0190*       ld a,13       ; restore the final byte of the command
041859 32 6A 18 04 0191*       ld (@cmd+2),a ; string that got stomped on by bcu
04185D 21 68 18 04 0192*       ld hl,@cmd
041861 01 07 00 00 0193*       ld bc,@end-@cmd
041865 5B DF       0194*       rst.lil $18
041867 C9          0195*       ret
041868 17 1B 0D    0196*   @cmd:  db 23,27,13
04186B 00 00       0197*   @xpos: dw 0x0000
04186D 00 00       0198*   @ypos: dw 0x0000
04186F             0199*   @end:  ; no padding required b/c we shifted de right
04186F             0200*   
04186F             0201*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04186F             0202*   ; USING 16.8 FIXED POINT COORDINATES
04186F             0203*   ; inputs: ub.c is dx, ud.e is dy
04186F             0204*   ;   the fractional portiion of the inputs are truncated
04186F             0205*   ;   leaving only the 16-bit integer portion
04186F             0206*   ; prerequisites: vdu_sprite_select
04186F             0207*   vdu_sprite_move_rel168:
04186F             0208*   ; populate in the reverse of normal to keep the
04186F             0209*   ; inputs from stomping on each other
04186F ED 53 8E 18 0210*       ld (@dy-1),de
       04          
041874 ED 43 8C 18 0211*       ld (@dx-1),bc
       04          
041879 3E 0E       0212*       ld a,14       ; restore the final byte of the command
04187B 32 8C 18 04 0213*       ld (@cmd+2),a ; string that got stomped on by bcu
04187F 21 8A 18 04 0214*       ld hl,@cmd
041883 01 07 00 00 0215*       ld bc,@end-@cmd
041887 5B DF       0216*       rst.lil $18
041889 C9          0217*       ret
04188A 17 1B 0E    0218*   @cmd:  db 23,27,14
04188D 00 00       0219*   @dx: dw 0x0000
04188F 00 00       0220*   @dy: dw 0x0000
041891             0221*   @end:  ; no padding required b/c we shifted de right
041891             0222*   
041891             0223*   ; VDU 23, 27, 15: Update the sprites in the GPU
041891             0224*   ; inputs: none
041891             0225*   vdu_sprite_update:
041891 21 9C 18 04 0226*       ld hl,@cmd
041895 01 03 00 00 0227*       ld bc,@end-@cmd
041899 5B DF       0228*       rst.lil $18
04189B C9          0229*       ret
04189C 17 1B 0F    0230*   @cmd: db 23,27,15
04189F             0231*   @end:
04189F             0232*   
04189F             0233*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04189F             0234*   ; inputs: none
04189F             0235*   vdu_sprite_bmp_reset:
04189F 21 AA 18 04 0236*       ld hl,@cmd
0418A3 01 03 00 00 0237*       ld bc,@end-@cmd
0418A7 5B DF       0238*       rst.lil $18
0418A9 C9          0239*       ret
0418AA 17 1B 10    0240*   @cmd: db 23,27,16
0418AD             0241*   @end:
0418AD             0242*   
0418AD             0243*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
0418AD             0244*   ; inputs: none
0418AD             0245*   vdu_sprite_reset:
0418AD 21 B8 18 04 0246*       ld hl,@cmd
0418B1 01 03 00 00 0247*       ld bc,@end-@cmd
0418B5 5B DF       0248*       rst.lil $18
0418B7 C9          0249*       ret
0418B8 17 1B 11    0250*   @cmd: db 23,27,17
0418BB             0251*   @end:
0418BB             0252*   
0418BB             0253*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
0418BB             0254*   ; inputs: a is the GCOL paint mode
0418BB             0255*   ; prerequisites: vdu_sprite_select
0418BB             0256*   vdu_sprite_set_gcol:
0418BB 32 CD 18 04 0257*       ld (@mode),a
0418BF 21 CA 18 04 0258*       ld hl,@cmd
0418C3 01 04 00 00 0259*       ld bc,@end-@cmd
0418C7 5B DF       0260*       rst.lil $18
0418C9 C9          0261*       ret
0418CA 17 1B 12    0262*   @cmd:  db 23,27,18
0418CD 00          0263*   @mode: db 0x00
0418CE             0264*   @end:
0418CE             0265*   
0418CE             0266*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
0418CE             0267*   ; inputs: hl=bufferId
0418CE             0268*   ; prerequisites: vdu_sprite_select
0418CE             0269*   vdu_sprite_add_buff:
0418CE 22 E0 18 04 0270*       ld (@bufferId),hl
0418D2 21 DD 18 04 0271*       ld hl,@cmd
0418D6 01 05 00 00 0272*       ld bc,@end-@cmd
0418DA 5B DF       0273*       rst.lil $18
0418DC C9          0274*       ret
0418DD 17 1B 26    0275*   @cmd:      db 23,27,0x26
0418E0 00 00       0276*   @bufferId: dw 0x0000
0418E2 00          0277*   @end:      db 0x00 ; padding
0418E3             0043    
0418E3             0044    ; APPLICATION INCLUDES
0418E3             0045        include "ascii.inc"
0418E3             0001*   purple_nurples_ascii:
0418E3 20 20 20 20 0002*       db 32,32,32,32,32,32,32,32,95,95,32,32,32,32,95,95,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,95,13,10
       20 20 20 20 
       5F 5F 20 20 
       20 20 5F 5F 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 5F 5F 0D 
       0A          
041908 5F 5F 5F 5F 0003*       db 95,95,95,95,95,32,95,47,32,32,124,95,95,47,32,32,124,95,95,95,95,95,95,32,32,32,32,95,95,95,95,32,124,32,32,124,32,95,95,13,10
       5F 20 5F 2F 
       20 20 7C 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 20 5F 
       5F 5F 5F 20 
       7C 20 20 7C 
       20 5F 5F 0D 
       0A          
041931 5C 5F 5F 20 0004*       db 92,95,95,32,32,92,32,32,32,95,95,92,32,32,32,95,95,92,95,95,32,32,92,32,95,47,32,95,95,95,92,124,32,32,124,47,32,47,13,10
       20 5C 20 20 
       20 5F 5F 5C 
       20 20 20 5F 
       5F 5C 5F 5F 
       20 20 5C 20 
       5F 2F 20 5F 
       5F 5F 5C 7C 
       20 20 7C 2F 
       20 2F 0D 0A 
041959 20 2F 20 5F 0005*       db 32,47,32,95,95,32,92,124,32,32,124,32,32,124,32,32,124,32,32,47,32,95,95,32,92,32,32,92,95,95,95,124,32,32,32,32,60,13,10
       5F 20 5C 7C 
       20 20 7C 20 
       20 7C 20 20 
       7C 20 20 2F 
       20 5F 5F 20 
       5C 20 20 5C 
       5F 5F 5F 7C 
       20 20 20 20 
       3C 0D 0A    
041980 28 5F 5F 5F 0006*       db 40,95,95,95,95,32,32,47,95,95,124,32,32,124,95,95,124,32,40,95,95,95,95,32,32,47,92,95,95,95,32,32,62,95,95,124,95,32,92,13,10
       5F 20 20 2F 
       5F 5F 7C 20 
       20 7C 5F 5F 
       7C 20 28 5F 
       5F 5F 5F 20 
       20 2F 5C 5F 
       5F 5F 20 20 
       3E 5F 5F 7C 
       5F 20 5C 0D 
       0A          
0419A9 20 20 20 20 0007*       db 32,32,32,32,32,92,47,32,95,95,95,95,95,32,32,32,32,95,95,32,32,46,95,95,47,32,32,32,32,32,92,47,32,32,32,32,32,92,47,13,10
       20 5C 2F 20 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 20 
       20 2E 5F 5F 
       2F 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 5C 2F 0D 
       0A          
0419D2 20 20 5F 5F 0008*       db 32,32,95,95,95,95,95,47,32,95,95,95,95,92,32,95,47,32,32,124,95,124,32,32,124,95,95,32,32,32,95,95,95,95,13,10
       5F 5F 5F 2F 
       20 5F 5F 5F 
       5F 5C 20 5F 
       2F 20 20 7C 
       5F 7C 20 20 
       7C 5F 5F 20 
       20 20 5F 5F 
       5F 5F 0D 0A 
0419F6 20 2F 20 20 0009*       db 32,47,32,32,95,32,92,32,32,32,95,95,92,32,32,92,32,32,32,95,95,92,32,32,124,32,32,92,95,47,32,95,95,32,92,13,10
       5F 20 5C 20 
       20 20 5F 5F 
       5C 20 20 5C 
       20 20 20 5F 
       5F 5C 20 20 
       7C 20 20 5C 
       5F 2F 20 5F 
       5F 20 5C 0D 
       0A          
041A1B 28 20 20 3C 0010*       db 40,32,32,60,95,62,32,41,32,32,124,32,32,32,32,32,124,32,32,124,32,124,32,32,32,89,32,32,92,32,32,95,95,95,47,13,10
       5F 3E 20 29 
       20 20 7C 20 
       20 20 20 20 
       7C 20 20 7C 
       20 7C 20 20 
       20 59 20 20 
       5C 20 20 5F 
       5F 5F 2F 0D 
       0A          
041A40 20 5C 5F 5F 0011*       db 32,92,95,95,95,95,47,124,95,95,124,32,32,32,32,32,124,95,95,124,32,124,95,95,95,124,32,32,47,92,95,95,95,32,32,62,13,10
       5F 5F 2F 7C 
       5F 5F 7C 20 
       20 20 20 20 
       7C 5F 5F 7C 
       20 7C 5F 5F 
       5F 7C 20 20 
       2F 5C 5F 5F 
       5F 20 20 3E 
       0D 0A       
041A66 5F 5F 5F 5F 0012*       db 95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,32,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
041AA4 5C 5F 5F 5F 0013*       db 92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,13,10
       5F 5F 5F 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       0D 0A       
041AE2 20 7C 20 20 0014*       db 32,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       20 20 20 5F 
       5F 5F 2F 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 0D 
       0A          
041B1F 20 7C 20 20 0015*       db 32,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       20 20 7C 20 
       20 20 7C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       0D 0A       
041B5D 20 7C 5F 5F 0016*       db 32,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 7C 20 
       20 20 7C 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       0D 0A       
041B9B 20 5F 5F 5F 0017*       db 32,95,95,95,95,95,95,95,32,32,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,92,47,95,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 0D 0A 
041BE3 20 5C 20 20 0018*       db 32,92,32,32,32,32,32,32,92,32,124,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,47,32,32,32,95,95,95,95,95,47,13,10
       20 20 20 20 
       5C 20 7C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       2F 20 20 20 
       5F 5F 5F 5F 
       5F 2F 0D 0A 
041C2B 20 2F 20 20 0019*       db 32,47,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,32,92,95,95,95,95,95,32,32,92,13,10
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 20 
       5C 5F 5F 5F 
       5F 5F 20 20 
       5C 0D 0A    
041C72 2F 20 20 20 0020*       db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 0D 0A 
041CBA 5C 5F 5F 5F 0021*       db 92,95,95,95,95,124,95,95,32,32,47,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 0D 0A 
041D02 20 20 20 20 0022*       db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 5C 
       2F 0D 0A    
041D49 00          0023*       db 0 ; string terminator
041D4A             0046        include "collisions.inc"
041D4A             0001*   ; ====== COLLISION DETECTION ======
041D4A             0002*   ; --- constants ---
041D4A             0003*   ; sprite_collisions flags
041D4A             0004*   ; collides_with_player: equ %00000001
041D4A             0005*   ; collides_with_laser: equ %00000010
041D4A             0006*   sprite_alive: equ 6; set when sprite is alive
041D4A             0007*   sprite_just_died: equ 7; set when sprite just died
041D4A             0008*   collide_top: equ %00001000
041D4A             0009*   collide_bottom: equ %00000100
041D4A             0010*   collide_left: equ %00000010
041D4A             0011*   collide_right: equ %00000001
041D4A             0012*   
041D4A 00 00 00    0013*   collision_table_pointer: dl 0x000000 ; pointer to the sprite in the group being checked for collision
041D4D             0014*   
041D4D             0015*   collision_draw_hitboxes:
041D4D             0016*   ; draw hitbox for ix collider
041D4D DD E5       0017*       push ix
041D4F FD E5       0018*       push iy
041D51 AF          0019*       xor a ; color mode 0
041D52 0E 09       0020*       ld c,c_red
041D54 CD C9 12 04 0021*       call vdu_gcol
041D58 01 00 00 00 0022*       ld bc,0
041D5C DD 4E 02    0023*       ld c,(ix+sprite_x+1)
041D5F DD 46 03    0024*       ld b,(ix+sprite_x+2)
041D62 11 00 00 00 0025*       ld de,0
041D66 DD 5E 05    0026*       ld e,(ix+sprite_y+1)
041D69 DD 56 06    0027*       ld d,(ix+sprite_y+2)
041D6C 21 00 00 00 0028*       ld hl,0 ; clear hlu and h
041D70 DD 6E 1E    0029*       ld l,(ix+sprite_dim_x)
041D73 09          0030*       add hl,bc ; hl = x1
041D74 E5          0031*       push hl ; save x1
041D75 21 00 00 00 0032*       ld hl,0 ; clear hlu and h
041D79 DD 6E 1F    0033*       ld l,(ix+sprite_dim_y)
041D7C 19          0034*       add hl,de ; hl = y1
041D7D DD E1       0035*       pop ix ; ix = x1 (was hl)
041D7F E5          0036*       push hl
041D80 FD E1       0037*       pop iy ; iy = y1
041D82 CD 15 17 04 0038*       call vdu_plot_rf
041D86 FD E1       0039*       pop iy
041D88 DD E1       0040*       pop ix
041D8A             0041*   
041D8A             0042*   ; draw hitbox for iy collider
041D8A DD E5       0043*       push ix
041D8C FD E5       0044*       push iy
041D8E AF          0045*       xor a ; color mode 0
041D8F 0E 0A       0046*       ld c,c_green
041D91 CD C9 12 04 0047*       call vdu_gcol
041D95 01 00 00 00 0048*       ld bc,0
041D99 FD 4E 02    0049*       ld c,(iy+sprite_x+1)
041D9C FD 46 03    0050*       ld b,(iy+sprite_x+2)
041D9F 11 00 00 00 0051*       ld de,0
041DA3 FD 5E 05    0052*       ld e,(iy+sprite_y+1)
041DA6 FD 56 06    0053*       ld d,(iy+sprite_y+2)
041DA9 21 00 00 00 0054*       ld hl,0 ; clear hlu and h
041DAD FD 6E 1E    0055*       ld l,(iy+sprite_dim_x)
041DB0 09          0056*       add hl,bc ; hl = x1
041DB1 E5          0057*       push hl ; save x1
041DB2 21 00 00 00 0058*       ld hl,0 ; clear hlu and h
041DB6 FD 6E 1F    0059*       ld l,(iy+sprite_dim_y)
041DB9 19          0060*       add hl,de ; hl = y1
041DBA DD E1       0061*       pop ix ; ix = x1 (was hl)
041DBC E5          0062*       push hl
041DBD FD E1       0063*       pop iy ; iy = y1
041DBF CD 15 17 04 0064*       call vdu_plot_rf
041DC3 FD E1       0065*       pop iy
041DC5 DD E1       0066*       pop ix
041DC7 C9          0067*       ret
041DC8             0068*   ; end collision_draw_hitboxes
041DC8             0069*   
041DC8             0070*   ; check_collision:
041DC8             0071*   ; Detects collision using bounding box method.
041DC8             0072*   ; Inputs:
041DC8             0073*   ;   IX -> Sprite/Tile table for Collider A
041DC8             0074*   ;   IY -> Sprite/Tile table for Collider B
041DC8             0075*   ; Outputs:
041DC8             0076*   ;   a = 0, zero flag set, positive sign, carry reset -> Collision detected
041DC8             0077*   ;   a = -1, zero flag reset, negative sign, carry set -> No collision detected
041DC8             0078*   ; Destroys: HL, DE, AF
041DC8             0079*   check_collision:
041DC8             0080*   check_collision_box:
041DC8             0081*   ; Test 1: (ay + ah) - by < 0
041DC8 21 00 00 00 0082*       ld hl,0                     ; Clear hlu
041DCC DD 6E 05    0083*       ld l,(ix+sprite_y+1)        ; Load ay integer part low byte
041DCF DD 66 06    0084*       ld h,(ix+sprite_y+2)        ; Load ay integer part high byte
041DD2 11 00 00 00 0085*       ld de,0                     ; Clear deu and d
041DD6 DD 5E 1F    0086*       ld e,(ix+sprite_dim_y)      ; Load ah
041DD9 19          0087*       add hl,de                   ; (ay + ah)
041DDA FD 5E 05    0088*       ld e,(iy+sprite_y+1)        ; Load by integer part low byte
041DDD FD 56 06    0089*       ld d,(iy+sprite_y+2)        ; Load by integer part high byte
041DE0 AF          0090*       xor a                       ; Clear carry
041DE1 ED 52       0091*       sbc hl,de                   ; (ay + ah) - by
041DE3 FA 46 1E 04 0092*       jp m,@not_collision         ; No collision if negative
041DE7             0093*   
041DE7             0094*   ; Test 2: ay - (by + bh) < 0
041DE7 21 00 00 00 0095*       ld hl,0                     ; Clear hlu
041DEB FD 6E 05    0096*       ld l,(iy+sprite_y+1)        ; Load by integer part low byte
041DEE FD 66 06    0097*       ld h,(iy+sprite_y+2)        ; Load by integer part high byte
041DF1 11 00 00 00 0098*       ld de,0                     ; Clear deu and d
041DF5 FD 5E 1F    0099*       ld e,(iy+sprite_dim_y)      ; Load bh
041DF8 19          0100*       add hl,de                   ; (by + bh)
041DF9 DD 5E 05    0101*       ld e,(ix+sprite_y+1)        ; Load ay integer part low byte
041DFC DD 56 06    0102*       ld d,(ix+sprite_y+2)        ; Load ay integer part high byte
041DFF AF          0103*       xor a                       ; Clear carry
041E00 ED 52       0104*       sbc hl,de                   ; (by + bh) - ay
041E02 FA 46 1E 04 0105*       jp m,@not_collision         ; No collision if negative
041E06             0106*   
041E06             0107*   ; Test 3: (ax + aw) - bx < 0
041E06 21 00 00 00 0108*       ld hl,0                     ; Clear hlu
041E0A DD 6E 02    0109*       ld l,(ix+sprite_x+1)        ; Load ax integer part low byte
041E0D DD 66 03    0110*       ld h,(ix+sprite_x+2)        ; Load ax integer part high byte
041E10 11 00 00 00 0111*       ld de,0                     ; Clear deu and d
041E14 DD 5E 1E    0112*       ld e,(ix+sprite_dim_x)      ; Load aw
041E17 19          0113*       add hl,de                   ; (ax + aw)
041E18 FD 5E 02    0114*       ld e,(iy+sprite_x+1)        ; Load bx integer part low byte
041E1B FD 56 03    0115*       ld d,(iy+sprite_x+2)        ; Load bx integer part high byte
041E1E AF          0116*       xor a                       ; Clear carry
041E1F ED 52       0117*       sbc hl,de                   ; (ax + aw) - bx
041E21 FA 46 1E 04 0118*       jp m,@not_collision         ; No collision if negative
041E25             0119*   
041E25             0120*   ; Test 4: ax - (bx + bw) < 0
041E25 21 00 00 00 0121*       ld hl,0                     ; Clear hlu
041E29 FD 6E 02    0122*       ld l,(iy+sprite_x+1)        ; Load bx integer part low byte
041E2C FD 66 03    0123*       ld h,(iy+sprite_x+2)        ; Load bx integer part high byte
041E2F 11 00 00 00 0124*       ld de,0                     ; Clear deu and d
041E33 FD 5E 1E    0125*       ld e,(iy+sprite_dim_x)      ; Load bw
041E36 19          0126*       add hl,de                   ; (bx + bw)
041E37 DD 5E 02    0127*       ld e,(ix+sprite_x+1)        ; Load ax integer part low byte
041E3A DD 56 03    0128*       ld d,(ix+sprite_x+2)        ; Load ax integer part high byte
041E3D AF          0129*       xor a                       ; Clear carry
041E3E ED 52       0130*       sbc hl,de                   ; (bx + bw) - ax
041E40 FA 46 1E 04 0131*       jp m,@not_collision         ; No collision if negative
041E44             0132*   
041E44             0133*   ; If all tests pass, collision is detected
041E44             0134*   @is_collision:
041E44 AF          0135*       xor a                       ; Clear accumulator and flags (a = 0)
041E45 C9          0136*       ret                         ; Return with zero flag set
041E46             0137*   
041E46             0138*   ; No collision detected
041E46             0139*   @not_collision:
041E46 3D          0140*       dec a                       ; Set a to -1
041E47 C9          0141*       ret                         ; Return with carry set
041E48             0142*   ; End check_collision_box
041E48             0143*   
041E48             0144*   
041E48             0145*   ; this routine detects collisions between two collidable objects,
041E48             0146*   ; which can include sprites, active tiles, or any screen coordinate
041E48             0147*   ; which has been set up with a sprite table structure that includes dim_x
041E48             0148*   ; representing the radius of the collidable object
041E48             0149*   ; inputs: ix and iy point to the colliding objects' sprite/tile table records
041E48             0150*   ; outputs: uh.l = distance - sum of radii
041E48             0151*   ;          zero flag set if collision detected
041E48             0152*   ;          dx168 and dy168 are also populated with the signed displacements
041E48             0153*   ; destroys: everything except indexes
041E48             0154*   ; check_collision:
041E48             0155*   check_collision_cartesian:
041E48             0156*   ; compute dx = x1-x0
041E48 DD 27 01    0157*       ld hl,(ix+sprite_x)
041E4B FD 17 01    0158*       ld de,(iy+sprite_x)
041E4E AF          0159*       xor a ; clear carry
041E4F ED 52       0160*       sbc hl,de
041E51 22 65 07 04 0161*       ld (dx168),hl ; dx to scratch
041E55             0162*   ; compute dy = y1-y0
041E55 DD 27 04    0163*       ld hl,(ix+sprite_y)
041E58 FD 17 04    0164*       ld de,(iy+sprite_y)
041E5B AF          0165*       xor a ; clear carry
041E5C ED 52       0166*       sbc hl,de ; hl = dy
041E5E 22 6B 07 04 0167*       ld (dy168),hl ; dy to scratch
041E62             0168*   ; compute euclidean distance between centers
041E62 CD 71 07 04 0169*       call distance168 ; uh.l = distance
041E66             0170*   ; check for overlap by summing half the radii
041E66 DD 7E 1E    0171*       ld a,(ix+sprite_dim_x)
041E69 CB 3F       0172*       srl a ; divide by 2
041E6B FD 5E 1E    0173*       ld e,(iy+sprite_dim_x)
041E6E CB 3B       0174*       srl e ; divide by 2
041E70 83          0175*       add a,e
041E71 11 00 00 00 0176*       ld de,0 ; clear deu and e
041E75 57          0177*       ld d,a ; ud.e = sum of radii
041E76 B7          0178*       or a ; clear carry
041E77 ED 52       0179*       sbc hl,de ; uh.l = distance - sum of radii
041E79 C8          0180*       ret z ; return collision
041E7A F0          0181*       ret p ; return no collision
041E7B AF          0182*       xor a ; return collision
041E7C C9          0183*       ret
041E7D             0184*   ; end check_collision_cartesian
041E7D             0185*   
041E7D             0186*   ; check collisions of a sprite or tile against a sprite group
041E7D             0187*   ; inputs: iy = pointer to sprite or tile record being checked
041E7D             0188*   ;         ix = pointer to sprite group, b = number of records in sprite group
041E7D             0189*   check_sprite_group_collisions:
041E7D             0190*   @collision_loop:
041E7D DD 22 4A 1D 0191*       ld (collision_table_pointer),ix ; update table pointer
       04          
041E82 C5          0192*       push bc ; backup loop counter
041E83             0193*   ; check sprite_collisions sprite_alive flag to see if sprite is active
041E83 DD CB 1D 76 0194*       bit sprite_alive,(ix+sprite_collisions)
041E87 CA 9D 1E 04 0195*       jp z,@next_record ; not alive so skip to next record
041E8B             0196*   ; sprite alive so check for collision
041E8B CD C8 1D 04 0197*       call check_collision
041E8F C2 9D 1E 04 0198*       jp nz,@next_record ; no collision
041E93             0199*   ; set sprite_just_died flag for each entity and return to caller
041E93 C1          0200*       pop bc ; dummy pop to balance stack
041E94 DD CB 1D FE 0201*       set sprite_just_died,(ix+sprite_collisions)
041E98 FD CB 1D FE 0202*       set sprite_just_died,(iy+sprite_collisions)
041E9C C9          0203*       ret
041E9D             0204*   @next_record:
041E9D C1          0205*       pop bc ; get back our loop counter
041E9E ED 32 40    0206*       lea ix,ix+table_record_size
041EA1 10 DA       0207*       djnz @collision_loop ; loop until we've checked all the records
041EA3             0208*   ; return to caller
041EA3 AF          0209*       xor a
041EA4 3C          0210*       inc a ; resets sign flag and a to non-zero indicating no collision
041EA5 C9          0211*       ret
041EA6             0212*   ; end check_sprite_group_collisions
041EA6             0213*   
041EA6             0214*   check_enemy_collision_laser: ; check for collisions with laser
041EA6 DD 21 30 94 0215*       ld ix,player_lasers_begin
       04          
041EAB 06 04       0216*       ld b,player_lasers_max
041EAD CD 7D 1E 04 0217*       call check_sprite_group_collisions
041EB1 C9          0218*       ret
041EB2             0219*   ; end check_enemy_collision_laser
041EB2             0220*   
041EB2             0221*   check_enemy_collision_player: ; check for collisions with player
041EB2 DD 21 30 95 0222*       ld ix,player_begin
       04          
041EB7 CD C8 1D 04 0223*       call check_collision
041EBB C0          0224*       ret nz ; no collision so nothing to do
041EBC DD CB 1D FE 0225*       set sprite_just_died,(ix+sprite_collisions)
041EC0 FD CB 1D FE 0226*       set sprite_just_died,(iy+sprite_collisions)
041EC4 AF          0227*       xor a ; signal collision detected
041EC5 C9          0228*       ret
041EC6             0229*   ; end check_enemy_collision_player
041EC6             0047        include "enemies.inc"
041EC6 D4 1E 04    0001*   enemies_state: dl enemies_alive
041EC9             0002*   
041EC9             0003*   do_enemies:
041EC9 2A C6 1E 04 0004*       ld hl,(enemies_state)
041ECD             0005*       CALL_HL
041ECD 01 D3 1E 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
041ED1 C5          0002*M1     push bc ; which constitutes the return address
041ED2 E9          0003*M1     jp (hl) ; Jump to the address in HL
041ED3 C9          0006*       ret
041ED4             0007*   
041ED4             0008*   enemies_alive:
041ED4 FD 21 70 95 0009*       ld iy,enemy_sprites_begin
       04          
041ED9 06 07       0010*       ld b,table_num_enemy_records
041EDB CD CF 7A 04 0011*       call move_sprite_group
041EDF C9          0012*       ret
041EE0             0013*   
041EE0             0014*   enemies_despawning:
041EE0 C9          0015*       ret
041EE1             0016*   
041EE1             0017*   enemies_dead:
041EE1 C9          0018*       ret
041EE2             0019*   
041EE2             0020*   enemies_respawning:
041EE2 C9          0021*       ret
041EE3             0048        include "enemy_fireball.inc"
041EE3             0001*   speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
041EE3             0002*   fireballs_max: equ 4
041EE3             0003*   
041EE3             0004*   fireball_defaults:
041EE3 03          0005*       db enemy_projectile     ; type
041EE4 0A 01 00    0006*       dl BUF_FIREBALL_2_000   ; base_bufferId
041EE7 35 1F 04    0007*       dl move_enemy_fireball  ; move_program
041EEA 40          0008*       db %01000000            ; collisions bit 6 signals sprite alive
041EEB 10          0009*       db 16                   ; dim_x
041EEC 10          0010*       db 16                   ; dim_y
041EED 20          0011*       db 32                   ; num_orientations
041EEE 02          0012*       db 2                    ; num_animations
041EEF 00          0013*       db 0                    ; animation
041EF0 08          0014*       db 8                    ; animation_timer
041EF1 00          0015*       db 0                    ; move_timer
041EF2 00          0016*       db 0                    ; move_step
041EF3 00          0017*       db 0                    ; points
041EF4 FE          0018*       db -2                   ; shield_damage
041EF5 00          0019*       db 0                    ; frame
041EF6             0020*   
041EF6             0021*   enemy_spawn_fireball:
041EF6 21 E3 1E 04 0022*       ld hl,fireball_defaults
041EFA DD 21 30 96 0023*       ld ix,fireballs_base
       04          
041EFF 06 04       0024*       ld b,fireballs_max
041F01 CD 52 86 04 0025*       call spawn_sprite_from_tile
041F05 D0          0026*       ret nc ; no carry means no free sprite slots, so we go home
041F06             0027*   ; other specific initialization
041F06             0028*   ; ------------------------------------------------
041F06             0029*   ; copy sprite heading and component velocities from targeting_computer
041F06 2A 50 7F 04 0030*       ld hl,(Bearing_t)
041F0A 11 00 80 00 0031*       ld de,128*256 ; rotate 128 degrees
041F0E 19          0032*       add hl,de
041F0F DD 2F 10    0033*       ld (ix+sprite_heading),hl
041F12 2A 59 7F 04 0034*       ld hl,(Vp_x)
041F16 DD 2F 07    0035*       ld (ix+sprite_xvel),hl
041F19 2A 5C 7F 04 0036*       ld hl,(Vp_y)
041F1D DD 2F 0A    0037*       ld (ix+sprite_yvel),hl
041F20             0038*   ; move projectile one frame's distance so it isn't drawn right over turret
041F20 DD 27 01    0039*       ld hl,(ix+sprite_x)
041F23 DD 17 07    0040*       ld de,(ix+sprite_xvel)
041F26 19          0041*       add hl,de
041F27 DD 2F 01    0042*       ld (ix+sprite_x),hl
041F2A DD 27 04    0043*       ld hl,(ix+sprite_y)
041F2D DD 17 0A    0044*       ld de,(ix+sprite_yvel)
041F30 19          0045*       add hl,de
041F31 DD 2F 04    0046*       ld (ix+sprite_y),hl
041F34 C9          0047*       ret
041F35             0048*   ; end enemy_spawn_fireball
041F35             0049*   
041F35             0050*   move_enemy_fireball:
041F35             0051*   ; run the movement program for the fireball enemy
041F35 CD 50 7B 04 0052*       call move_sprite
041F39 3A A3 79 04 0053*       ld a,(sprite_screen_edge)
041F3D B7          0054*       or a ; a will be non-zero if have scrolled off screen
041F3E C2 E9 79 04 0055*       jp nz,table_deactivate_sprite
041F42 CD B2 1E 04 0056*       call check_enemy_collision_player
041F46 C2 52 1F 04 0057*       jp nz,@animate ; no collision so do animation
041F4A CD 71 79 04 0058*       call update_shields
041F4E C3 A3 20 04 0059*       jp spawn_explosion
041F52             0060*   @animate:
041F52             0061*   ; check the animation timer
041F52 FD 35 23    0062*       dec (iy+sprite_animation_timer)
041F55 C0          0063*       ret nz ; not time to animate
041F56             0064*   ; reset the animation timer and bump animation
041F56 3E 08       0065*       ld a,8
041F58 FD 77 23    0066*       ld (iy+sprite_animation_timer),a
041F5B FD 7E 22    0067*       ld a,(iy+sprite_animation)
041F5E 3C          0068*       inc a
041F5F E6 01       0069*       and %00000001 ; modulo 2
041F61 FD 77 22    0070*       ld (iy+sprite_animation),a
041F64 CD 07 7C 04 0071*       call sprite_frame_heading_animation ; a, sprite_frame set to heading-based frame
041F68 CD DC 17 04 0072*       call vdu_sprite_select_frame
041F6C C9          0073*       ret
041F6D             0074*   ; end move_enemy_fireball
041F6D             0075*   
041F6D             0076*   init_enemy_fireballs:
041F6D             0077*   ; set pointer to seeker sprite table
041F6D FD 21 30 96 0078*       ld iy,fireballs_base
       04          
041F72 FD 7E 00    0079*       ld a,(iy+sprite_id) ; sprite id
041F75 1E 04       0080*       ld e,fireballs_max ; sprite loop counter
041F77             0081*   ; define seeker sprites
041F77             0082*   @sprites_loop:
041F77 F5          0083*       push af
041F78 D5          0084*       push de
041F79 CD 79 17 04 0085*       call vdu_sprite_select
041F7D CD 8C 17 04 0086*       call vdu_sprite_clear_frames
041F81 21 0A 01 00 0087*       ld hl,BUF_FIREBALL_2_000
041F85 06 80       0088*       ld b,4*32 ; 4 animations * 32 orientations
041F87             0089*   @frames_loop:
041F87 C5          0090*       push bc
041F88 E5          0091*       push hl
041F89 CD CE 18 04 0092*       call vdu_sprite_add_buff
041F8D E1          0093*       pop hl
041F8E 23          0094*       inc hl
041F8F C1          0095*       pop bc
041F90 10 F5       0096*       djnz @frames_loop
041F92 D1          0097*       pop de ; sprite loop counter
041F93 F1          0098*       pop af ; sprite id
041F94 3C          0099*       inc a
041F95 1D          0100*       dec e
041F96 C2 77 1F 04 0101*       jp nz,@sprites_loop
041F9A C9          0102*       ret
041F9B             0103*   ; end init_enemy_fireballs
041F9B             0049        include "enemy_seeker.inc"
041F9B 00          0001*   seekers_count: db 0
041F9C             0002*   seekers_max: equ 3
041F9C             0003*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
041F9C             0004*   
041F9C             0005*   seeker_defaults:
041F9C 01          0006*       db enemy_air            ; type
041F9D 4F 01 00    0007*       dl BUF_SEEKER_000       ; base_bufferId
041FA0 C7 1F 04    0008*       dl move_enemy_seeker    ; move_program
041FA3 40          0009*       db %01000000            ; collisions bit 6 signals sprite alive
041FA4 10          0010*       db 16                   ; dim_x
041FA5 10          0011*       db 16                   ; dim_y
041FA6 20          0012*       db 32                   ; num_orientations
041FA7 01          0013*       db 1                    ; num_animations
041FA8 00          0014*       db 0                    ; animation
041FA9 00          0015*       db 0                    ; animation_timer
041FAA 01          0016*       db 1                    ; move_timer
041FAB 00          0017*       db 0                    ; move_step
041FAC 0A          0018*       db 10                   ; points
041FAD FC          0019*       db -4                   ; shield_damage
041FAE 00          0020*       db 0                    ; frame
041FAF             0021*   
041FAF             0022*   enemy_spawn_seeker:
041FAF 21 9C 1F 04 0023*       ld hl,seeker_defaults
041FB3 DD 21 70 95 0024*       ld ix,seekers_base
       04          
041FB8 06 03       0025*       ld b,seekers_max
041FBA CD 52 86 04 0026*       call spawn_sprite_from_tile
041FBE D0          0027*       ret nc ; no carry means no free sprite slots, so we go home
041FBF             0028*   ; other specific initialization
041FBF 21 80 02 00 0029*       ld hl,speed_seeker
041FC3 DD 2F 0D    0030*       ld (ix+sprite_vel),hl
041FC6 C9          0031*       ret
041FC7             0032*   ; end enemy_spawn_seeker
041FC7             0033*   
041FC7             0034*   move_enemy_seeker:
041FC7             0035*   ; run the movement program for the seeker enemy
041FC7 CD FB 1F 04 0036*       call en_nav_seek_zag
041FCB CD B2 1E 04 0037*       call check_enemy_collision_player
041FCF CA F3 1F 04 0038*       jp z,@player
041FD3 CD A6 1E 04 0039*       call check_enemy_collision_laser
041FD7 CA EB 1F 04 0040*       jp z,@laser
041FDB             0041*   ; change the animation frame to match heading
041FDB FD 7E 00    0042*       ld a,(iy+sprite_id)
041FDE CD 79 17 04 0043*       call vdu_sprite_select
041FE2 CD 1C 7C 04 0044*       call sprite_frame_heading ; a, sprite_frame set to heading-based frame
041FE6 CD DC 17 04 0045*       call vdu_sprite_select_frame
041FEA C9          0046*       ret
041FEB             0047*   @laser:
041FEB CD 17 79 04 0048*       call update_score
041FEF C3 A3 20 04 0049*       jp spawn_explosion
041FF3             0050*   @player:
041FF3 CD 71 79 04 0051*       call update_shields
041FF7 C3 A3 20 04 0052*       jp spawn_explosion
041FFB             0053*   ; end move_enemy_seeker
041FFB             0054*   
041FFB             0055*   ; contains the logic for how to move the enemy
041FFB             0056*   ; and then does the moving
041FFB             0057*   ; inputs: a fully-populated active sprite table
041FFB             0058*   ;         player position variables
041FFB             0059*   ; destroys: everything except index registers
041FFB             0060*   ; outputs: moving enemies
041FFB             0061*   en_nav_seek_zag:
041FFB             0062*   ; set velocity and orientation by player's relative location
041FFB             0063*   ; move enemies y-axis
041FFB             0064*   ; where is player relative to us?
041FFB CD FE 7E 04 0065*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
041FFF             0066*   ; is player above or below us?
041FFF ED 53 1E 03 0067*       ld (ude),de ; dy
       04          
042004 3A 20 03 04 0068*       ld a,(ude+2) ; deu
042008 17          0069*       rla ; shift sign bit into carry
042009 D2 2E 20 04 0070*       jp nc,@zig_zag ; player is below,evade
04200D             0071*   ; player is even or above,so home in on current heading
04200D FD 2F 10    0072*       ld (iy+sprite_heading),hl ; save sprite heading
042010             0073*   ; fall through to @compute_velocities
042010             0074*   @compute_velocities:
042010 CD F1 7B 04 0075*       call sprite_compute_velocities
042014 CD 50 7B 04 0076*       call move_sprite ; move the sprite
042018 B7          0077*       or a ; a will be non-zero if have collided with screen edge
042019 C2 39 20 04 0078*       jp nz,@zag_switch ; switch direction
04201D C9          0079*       ret ; didn't hit edge, nothing else to do
04201E             0080*   @zig_zag_start:
04201E FD 2A A0 79 0081*       ld iy,(table_pointer)
       04          
042023 CD FB 04 04 0082*       call rand_8
042027 E6 3F       0083*       and %00111111 ; limit it to 64
042029 CB DF       0084*       set 3,a ; make sure it's at least 8
04202B FD 77 24    0085*       ld (iy+sprite_move_timer),a ; store it
04202E             0086*       ; fall through to @zig_zag
04202E             0087*   @zig_zag:
04202E FD 7E 24    0088*       ld a,(iy+sprite_move_timer)
042031 3D          0089*       dec a
042032 FD 77 24    0090*       ld (iy+sprite_move_timer),a
042035 C2 5B 20 04 0091*       jp nz,@zig_zag_no_switch
042039             0092*   @zag_switch:
042039             0093*       ; otherwise flip direction and restart timer
042039 FD 7E 25    0094*       ld a,(iy+sprite_move_step)
04203C EE 01       0095*       xor %1 ; flips bit zero
04203E FD 77 25    0096*       ld (iy+sprite_move_step),a ; store it
042041 C2 50 20 04 0097*       jp nz,@F ; zag right
042045             0098*   ;otherwise zag left
042045 21 00 A0 00 0099*       ld hl,160*256; southwest heading
042049 FD 2F 10    0100*       ld (iy+sprite_heading),hl ; save sprite heading
04204C C3 1E 20 04 0101*       jp @zig_zag_start
042050             0102*   @@: ; zag right
042050 21 00 60 00 0103*       ld hl,96*256; southeast heading
042054 FD 2F 10    0104*       ld (iy+sprite_heading),hl ; save sprite heading
042057 C3 1E 20 04 0105*       jp @zig_zag_start
04205B             0106*   @zig_zag_no_switch:
04205B             0107*       ; ld a,(sprite_orientation)
04205B FD 27 10    0108*       ld hl,(iy+sprite_heading)
04205E C3 10 20 04 0109*       jp @compute_velocities
042062             0110*   ; end en_nav_seek_zag
042062             0111*   
042062             0112*   
042062             0113*   init_enemy_seekers:
042062             0114*   ; set pointer to seeker sprite table
042062 FD 21 70 95 0115*       ld iy,seekers_base
       04          
042067 FD 7E 00    0116*       ld a,(iy+sprite_id) ; sprite id
04206A 1E 03       0117*       ld e,seekers_max ; sprite loop counter
04206C             0118*   ; define seeker sprites
04206C             0119*   @sprites_loop:
04206C F5          0120*       push af
04206D D5          0121*       push de
04206E CD 79 17 04 0122*   	call vdu_sprite_select
042072 CD 8C 17 04 0123*   	call vdu_sprite_clear_frames
042076 21 4F 01 00 0124*   	ld hl,BUF_SEEKER_000
04207A 06 20       0125*   	ld b,32 ; 32 bitmaps for seeker
04207C             0126*   @frames_loop:
04207C C5          0127*   	push bc
04207D E5          0128*   	push hl
04207E CD CE 18 04 0129*   	call vdu_sprite_add_buff
042082 E1          0130*   	pop hl
042083 23          0131*   	inc hl
042084 C1          0132*   	pop bc
042085 10 F5       0133*   	djnz @frames_loop
042087 D1          0134*       pop de ; sprite loop counter
042088 F1          0135*       pop af ; sprite id
042089 3C          0136*       inc a
04208A 1D          0137*       dec e
04208B C2 6C 20 04 0138*       jp nz,@sprites_loop
04208F C9          0139*       ret
042090             0140*   ; end init_enemy_seekers
042090             0050        include "explosion.inc"
042090             0001*   explosions_max: equ 8
042090             0002*   explosion_defaults:
042090 04          0003*       db explosion            ; type
042091 05 01 00    0004*       dl BUF_EXPLOSION_A	    ; base_bufferId
042094 ED 20 04    0005*       dl move_explosion	    ; move_program
042097 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
042098 07          0007*       db 7	                ; dim_x
042099 07          0008*       db 7                    ; dim_y
04209A 01          0009*       db 1                    ; num_orientations
04209B 05          0010*       db 5                    ; num_animations
04209C 05          0011*       db 5	                ; animation
04209D 08          0012*       db 8	                ; animation_timer
04209E 00          0013*       db 0	                ; move_timer
04209F 00          0014*       db 0	                ; move_step
0420A0 00          0015*       db 0	                ; points
0420A1 00          0016*       db 0	                ; shield_damage
0420A2 00          0017*       db 0                    ; frame
0420A3             0018*   
0420A3             0019*   spawn_explosion:
0420A3 21 90 20 04 0020*       ld hl,explosion_defaults
0420A7 DD 21 30 97 0021*       ld ix,explosions_base
       04          
0420AC 06 08       0022*       ld b,explosions_max
0420AE CD 9D 7A 04 0023*       call spawn_sprite_from_sprite
0420B2 D2 E9 79 04 0024*       jp nc,table_deactivate_sprite ; no carry means no free sprite slots, so we deactivate parent sprite and go home
0420B6             0025*   ; other specific initialization
0420B6 21 00 00 00 0026*       ld hl,0
0420BA DD 2F 07    0027*       ld (ix+sprite_xvel),hl
0420BD 21 00 01 00 0028*       ld hl,1*256
0420C1 DD 2F 0A    0029*       ld (ix+sprite_yvel),hl
0420C4             0030*   ; deactivate parent sprite
0420C4 C3 E9 79 04 0031*       jp table_deactivate_sprite
0420C8             0032*   ; end spawn_explosion
0420C8             0033*   
0420C8             0034*   tile_spawn_explosion:
0420C8 21 90 20 04 0035*       ld hl,explosion_defaults
0420CC DD 21 30 97 0036*       ld ix,explosions_base
       04          
0420D1 06 08       0037*       ld b,explosions_max
0420D3 CD 52 86 04 0038*       call spawn_sprite_from_tile
0420D7 D2 7E 83 04 0039*       jp nc,table_deactivate_tile ; no carry means no free sprite slots, so we deactivate parent tile and go home
0420DB             0040*   ; other specific initialization
0420DB 21 00 00 00 0041*       ld hl,0
0420DF DD 2F 07    0042*       ld (ix+sprite_xvel),hl
0420E2 21 00 01 00 0043*       ld hl,1*256
0420E6 DD 2F 0A    0044*       ld (ix+sprite_yvel),hl
0420E9             0045*   ; deactivate parent sprite
0420E9 C3 7E 83 04 0046*       jp table_deactivate_tile
0420ED             0047*   ; end tile_spawn_explosion
0420ED             0048*   
0420ED             0049*   move_explosion:
0420ED             0050*   ; run the movement program for the explosion
0420ED CD 50 7B 04 0051*       call move_sprite
0420F1 B7          0052*       or a ; a will be non-zero if have scrolled off screen
0420F2 C2 E9 79 04 0053*       jp nz,table_deactivate_sprite
0420F6             0054*   ; do the animations
0420F6 FD 35 23    0055*       dec (iy+sprite_animation_timer)
0420F9 C0          0056*       ret nz ; not time to bump animation frame
0420FA FD 34 28    0057*       inc (iy+sprite_frame)
0420FD FD 35 22    0058*       dec (iy+sprite_animation)
042100 CA E9 79 04 0059*       jp z,table_deactivate_sprite ; reached the end of the animations
042104 3E 08       0060*       ld a,8 ; reset animation timer
042106 FD 77 23    0061*       ld (iy+sprite_animation_timer),a
042109 C9          0062*       ret
04210A             0063*   ; end move_explosion
04210A             0064*   
04210A             0065*   move_explosions:
04210A             0066*   ; initialize pointers and loop counter
04210A FD 21 30 97 0067*       ld iy,explosions_base ; set iy to first record in table
       04          
04210F 06 08       0068*       ld b,explosions_max ; loop counter
042111 CD CF 7A 04 0069*       call move_sprite_group
042115 C9          0070*       ret
042116             0071*   ; end move_explosions
042116             0072*   
042116             0073*   init_explosions:
042116             0074*   ; set pointer to explosion sprite table
042116 FD 21 30 97 0075*       ld iy,explosions_base
       04          
04211B FD 7E 00    0076*       ld a,(iy+sprite_id) ; sprite id
04211E 1E 08       0077*       ld e,explosions_max ; sprite loop counter
042120             0078*   ; define explosion sprites
042120             0079*   @sprites_loop:
042120 F5          0080*       push af
042121 D5          0081*       push de
042122 CD 79 17 04 0082*   	call vdu_sprite_select
042126 CD 8C 17 04 0083*   	call vdu_sprite_clear_frames
04212A 21 05 01 00 0084*   	ld hl,BUF_EXPLOSION_A
04212E 06 05       0085*   	ld b,5 ; 5 bitmaps for explosion
042130             0086*   @frames_loop:
042130 C5          0087*   	push bc
042131 E5          0088*   	push hl
042132 CD CE 18 04 0089*   	call vdu_sprite_add_buff
042136 E1          0090*   	pop hl
042137 23          0091*   	inc hl
042138 C1          0092*   	pop bc
042139 10 F5       0093*   	djnz @frames_loop
04213B D1          0094*       pop de ; sprite loop counter
04213C F1          0095*       pop af ; sprite id
04213D 3C          0096*       inc a
04213E 1D          0097*       dec e
04213F C2 20 21 04 0098*       jp nz,@sprites_loop
042143 C9          0099*       ret
042144             0100*   ; end init_explosions
042144             0051        include "fonts_list.inc"
042144             0001*   ; Generated by asm_config_editor.py
042144             0002*   font_list_record_size: equ 12
042144             0003*   font_list_width: equ 0
042144             0004*   font_list_height: equ 3
042144             0005*   font_list_bufferId: equ 6
042144             0006*   font_list_filename: equ 9
042144             0007*   
042144             0008*   num_fonts: equ 7
042144             0009*   
042144             0010*   ; Index list:
042144             0011*   amiga_forever_8x8: equ 64000
042144             0012*   computer_pixel_7_8x12: equ 64001
042144             0013*   computer_pixel_7_8x16: equ 64002
042144             0014*   Lat2_VGA8_8x8: equ 64003
042144             0015*   Lat7_VGA8_8x8: equ 64004
042144             0016*   Squarewave_Bold_8x12: equ 64005
042144             0017*   wendy_neue_6x6: equ 64006
042144             0018*   
042144             0019*   font_list: ; width; height; bufferId; filename;:
042144 08 00 00 08 0020*   	dl 8, 8, 64000, fn_amiga_forever_8x8
       00 00 00 FA 
       00 98 21 04 
042150 08 00 00 0C 0021*   	dl 8, 12, 64001, fn_computer_pixel_7_8x12
       00 00 01 FA 
       00 B5 21 04 
04215C 08 00 00 10 0022*   	dl 8, 16, 64002, fn_computer_pixel_7_8x16
       00 00 02 FA 
       00 D6 21 04 
042168 08 00 00 08 0023*   	dl 8, 8, 64003, fn_Lat2_VGA8_8x8
       00 00 03 FA 
       00 F7 21 04 
042174 08 00 00 08 0024*   	dl 8, 8, 64004, fn_Lat7_VGA8_8x8
       00 00 04 FA 
       00 10 22 04 
042180 08 00 00 0C 0025*   	dl 8, 12, 64005, fn_Squarewave_Bold_8x12
       00 00 05 FA 
       00 29 22 04 
04218C 06 00 00 06 0026*   	dl 6, 6, 64006, fn_wendy_neue_6x6
       00 00 06 FA 
       00 49 22 04 
042198             0027*   
042198             0028*   ; files_list: ; filename:
042198 66 6F 6E 74 0029*   fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
0421B5 66 6F 6E 74 0030*   fn_computer_pixel_7_8x12: db "fonts/computer_pixel_7_8x12.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 32 2E 
       66 6F 6E 74 
       00          
0421D6 66 6F 6E 74 0031*   fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
0421F7 66 6F 6E 74 0032*   fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042210 66 6F 6E 74 0033*   fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042229 66 6F 6E 74 0034*   fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
042249 66 6F 6E 74 0035*   fn_wendy_neue_6x6: db "fonts/wendy_neue_6x6.font",0
       73 2F 77 65 
       6E 64 79 5F 
       6E 65 75 65 
       5F 36 78 36 
       2E 66 6F 6E 
       74 00       
042263             0052        include "images_bg.inc"
042263             0001*   ; Generated by make_images.py
042263             0002*   
042263             0003*   bg_num_images: equ 8
042263             0004*   
042263             0005*   ; buffer_ids:
042263             0006*   BUF_BG_STARS_0: equ 1024
042263             0007*   BUF_BG_STARS_1: equ 1025
042263             0008*   BUF_BG_STARS_2: equ 1026
042263             0009*   BUF_BG_STARS_3: equ 1027
042263             0010*   BUF_BG_STARS_4: equ 1028
042263             0011*   BUF_BG_STARS_5: equ 1029
042263             0012*   BUF_BG_STARS_6: equ 1030
042263             0013*   BUF_BG_STARS_7: equ 1031
042263             0014*   
042263             0015*   bg_image_list: ; type; width; height; size; filename; bufferId:
042263 01 00 00 00 0016*   	dl 1, 256, 256, 65536, fn_bg_stars_0, 1024
       01 00 00 01 
       00 00 00 01 
       F3 22 04 00 
       04 00       
042275 01 00 00 00 0017*   	dl 1, 256, 256, 65536, fn_bg_stars_1, 1025
       01 00 00 01 
       00 00 00 01 
       07 23 04 01 
       04 00       
042287 01 00 00 00 0018*   	dl 1, 256, 256, 65536, fn_bg_stars_2, 1026
       01 00 00 01 
       00 00 00 01 
       1B 23 04 02 
       04 00       
042299 01 00 00 00 0019*   	dl 1, 256, 256, 65536, fn_bg_stars_3, 1027
       01 00 00 01 
       00 00 00 01 
       2F 23 04 03 
       04 00       
0422AB 01 00 00 00 0020*   	dl 1, 256, 256, 65536, fn_bg_stars_4, 1028
       01 00 00 01 
       00 00 00 01 
       43 23 04 04 
       04 00       
0422BD 01 00 00 00 0021*   	dl 1, 256, 256, 65536, fn_bg_stars_5, 1029
       01 00 00 01 
       00 00 00 01 
       57 23 04 05 
       04 00       
0422CF 01 00 00 00 0022*   	dl 1, 256, 256, 65536, fn_bg_stars_6, 1030
       01 00 00 01 
       00 00 00 01 
       6B 23 04 06 
       04 00       
0422E1 01 00 00 00 0023*   	dl 1, 256, 256, 65536, fn_bg_stars_7, 1031
       01 00 00 01 
       00 00 00 01 
       7F 23 04 07 
       04 00       
0422F3             0024*   
0422F3             0025*   ; files_list: ; filename:
0422F3 62 67 2F 62 0026*   fn_bg_stars_0: db "bg/bg_stars_0.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       30 2E 72 67 
       62 61 32 00 
042307 62 67 2F 62 0027*   fn_bg_stars_1: db "bg/bg_stars_1.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       31 2E 72 67 
       62 61 32 00 
04231B 62 67 2F 62 0028*   fn_bg_stars_2: db "bg/bg_stars_2.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       32 2E 72 67 
       62 61 32 00 
04232F 62 67 2F 62 0029*   fn_bg_stars_3: db "bg/bg_stars_3.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       33 2E 72 67 
       62 61 32 00 
042343 62 67 2F 62 0030*   fn_bg_stars_4: db "bg/bg_stars_4.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       34 2E 72 67 
       62 61 32 00 
042357 62 67 2F 62 0031*   fn_bg_stars_5: db "bg/bg_stars_5.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       35 2E 72 67 
       62 61 32 00 
04236B 62 67 2F 62 0032*   fn_bg_stars_6: db "bg/bg_stars_6.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       36 2E 72 67 
       62 61 32 00 
04237F 62 67 2F 62 0033*   fn_bg_stars_7: db "bg/bg_stars_7.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       37 2E 72 67 
       62 61 32 00 
042393             0053        include "images_tiles_dg.inc"
042393             0001*   ; Generated by tiles_dg.py
042393             0002*   
042393             0003*   tiles_dg_num_images: equ 187
042393             0004*   
042393             0005*   ; bufferIds:
042393             0006*   
042393             0007*   
042393             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
042393 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       B9 30 04 00 
       02 00       
0423A5 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       CE 30 04 01 
       02 00       
0423B7 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       E3 30 04 02 
       02 00       
0423C9 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       F8 30 04 03 
       02 00       
0423DB 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       0D 31 04 04 
       02 00       
0423ED 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       22 31 04 05 
       02 00       
0423FF 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       37 31 04 06 
       02 00       
042411 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       4C 31 04 07 
       02 00       
042423 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       61 31 04 08 
       02 00       
042435 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       76 31 04 09 
       02 00       
042447 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       8B 31 04 0A 
       02 00       
042459 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       A0 31 04 0B 
       02 00       
04246B 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       B5 31 04 10 
       02 00       
04247D 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       CA 31 04 21 
       02 00       
04248F 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       DF 31 04 22 
       02 00       
0424A1 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       F4 31 04 23 
       02 00       
0424B3 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       09 32 04 24 
       02 00       
0424C5 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       1E 32 04 25 
       02 00       
0424D7 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       33 32 04 26 
       02 00       
0424E9 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       48 32 04 27 
       02 00       
0424FB 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       5D 32 04 28 
       02 00       
04250D 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_045, 557
       00 00 10 00 
       00 00 01 00 
       72 32 04 2D 
       02 00       
04251F 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_046, 558
       00 00 10 00 
       00 00 01 00 
       87 32 04 2E 
       02 00       
042531 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_047, 559
       00 00 10 00 
       00 00 01 00 
       9C 32 04 2F 
       02 00       
042543 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_048, 560
       00 00 10 00 
       00 00 01 00 
       B1 32 04 30 
       02 00       
042555 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       C6 32 04 31 
       02 00       
042567 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       DB 32 04 32 
       02 00       
042579 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       F0 32 04 33 
       02 00       
04258B 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       05 33 04 34 
       02 00       
04259D 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       1A 33 04 35 
       02 00       
0425AF 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       2F 33 04 36 
       02 00       
0425C1 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       44 33 04 37 
       02 00       
0425D3 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       59 33 04 38 
       02 00       
0425E5 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       6E 33 04 39 
       02 00       
0425F7 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       83 33 04 3A 
       02 00       
042609 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       98 33 04 3B 
       02 00       
04261B 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_061, 573
       00 00 10 00 
       00 00 01 00 
       AD 33 04 3D 
       02 00       
04262D 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_062, 574
       00 00 10 00 
       00 00 01 00 
       C2 33 04 3E 
       02 00       
04263F 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_063, 575
       00 00 10 00 
       00 00 01 00 
       D7 33 04 3F 
       02 00       
042651 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_064, 576
       00 00 10 00 
       00 00 01 00 
       EC 33 04 40 
       02 00       
042663 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       01 34 04 41 
       02 00       
042675 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       16 34 04 42 
       02 00       
042687 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       2B 34 04 43 
       02 00       
042699 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       40 34 04 44 
       02 00       
0426AB 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       55 34 04 45 
       02 00       
0426BD 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       6A 34 04 46 
       02 00       
0426CF 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       7F 34 04 47 
       02 00       
0426E1 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       94 34 04 48 
       02 00       
0426F3 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       A9 34 04 49 
       02 00       
042705 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       BE 34 04 4A 
       02 00       
042717 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       D3 34 04 4B 
       02 00       
042729 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_076, 588
       00 00 10 00 
       00 00 01 00 
       E8 34 04 4C 
       02 00       
04273B 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_077, 589
       00 00 10 00 
       00 00 01 00 
       FD 34 04 4D 
       02 00       
04274D 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       12 35 04 51 
       02 00       
04275F 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       27 35 04 52 
       02 00       
042771 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       3C 35 04 53 
       02 00       
042783 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       51 35 04 54 
       02 00       
042795 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       66 35 04 55 
       02 00       
0427A7 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       7B 35 04 56 
       02 00       
0427B9 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       90 35 04 57 
       02 00       
0427CB 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       A5 35 04 58 
       02 00       
0427DD 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       BA 35 04 59 
       02 00       
0427EF 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       CF 35 04 5A 
       02 00       
042801 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       E4 35 04 5B 
       02 00       
042813 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_092, 604
       00 00 10 00 
       00 00 01 00 
       F9 35 04 5C 
       02 00       
042825 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_093, 605
       00 00 10 00 
       00 00 01 00 
       0E 36 04 5D 
       02 00       
042837 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       23 36 04 61 
       02 00       
042849 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       38 36 04 62 
       02 00       
04285B 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       4D 36 04 63 
       02 00       
04286D 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       62 36 04 64 
       02 00       
04287F 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       77 36 04 65 
       02 00       
042891 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       8C 36 04 66 
       02 00       
0428A3 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       A1 36 04 67 
       02 00       
0428B5 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       B6 36 04 68 
       02 00       
0428C7 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       CB 36 04 69 
       02 00       
0428D9 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       E0 36 04 6A 
       02 00       
0428EB 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       F5 36 04 6B 
       02 00       
0428FD 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       0A 37 04 6C 
       02 00       
04290F 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       1F 37 04 71 
       02 00       
042921 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       34 37 04 72 
       02 00       
042933 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       49 37 04 73 
       02 00       
042945 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       5E 37 04 74 
       02 00       
042957 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       73 37 04 75 
       02 00       
042969 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       88 37 04 76 
       02 00       
04297B 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       9D 37 04 77 
       02 00       
04298D 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       B2 37 04 78 
       02 00       
04299F 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       C7 37 04 79 
       02 00       
0429B1 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       DC 37 04 7A 
       02 00       
0429C3 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       F1 37 04 7B 
       02 00       
0429D5 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       06 38 04 81 
       02 00       
0429E7 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       1B 38 04 82 
       02 00       
0429F9 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       30 38 04 83 
       02 00       
042A0B 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       45 38 04 84 
       02 00       
042A1D 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       5A 38 04 85 
       02 00       
042A2F 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       6F 38 04 86 
       02 00       
042A41 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       84 38 04 87 
       02 00       
042A53 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       99 38 04 88 
       02 00       
042A65 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       AE 38 04 89 
       02 00       
042A77 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       C3 38 04 8A 
       02 00       
042A89 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       D8 38 04 8B 
       02 00       
042A9B 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       ED 38 04 8C 
       02 00       
042AAD 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       02 39 04 91 
       02 00       
042ABF 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       17 39 04 92 
       02 00       
042AD1 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       2C 39 04 93 
       02 00       
042AE3 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       41 39 04 94 
       02 00       
042AF5 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       56 39 04 95 
       02 00       
042B07 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       6B 39 04 96 
       02 00       
042B19 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       80 39 04 97 
       02 00       
042B2B 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       95 39 04 98 
       02 00       
042B3D 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       AA 39 04 99 
       02 00       
042B4F 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       BF 39 04 9A 
       02 00       
042B61 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       D4 39 04 9B 
       02 00       
042B73 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       E9 39 04 9C 
       02 00       
042B85 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       FE 39 04 A1 
       02 00       
042B97 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       13 3A 04 A2 
       02 00       
042BA9 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       28 3A 04 A3 
       02 00       
042BBB 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       3D 3A 04 A4 
       02 00       
042BCD 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       52 3A 04 A5 
       02 00       
042BDF 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       67 3A 04 A6 
       02 00       
042BF1 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       7C 3A 04 A7 
       02 00       
042C03 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       91 3A 04 A8 
       02 00       
042C15 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       A6 3A 04 A9 
       02 00       
042C27 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       BB 3A 04 AA 
       02 00       
042C39 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       D0 3A 04 AB 
       02 00       
042C4B 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       E5 3A 04 AC 
       02 00       
042C5D 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_174, 686
       00 00 10 00 
       00 00 01 00 
       FA 3A 04 AE 
       02 00       
042C6F 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_175, 687
       00 00 10 00 
       00 00 01 00 
       0F 3B 04 AF 
       02 00       
042C81 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_176, 688
       00 00 10 00 
       00 00 01 00 
       24 3B 04 B0 
       02 00       
042C93 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       39 3B 04 B1 
       02 00       
042CA5 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       4E 3B 04 B2 
       02 00       
042CB7 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       63 3B 04 B3 
       02 00       
042CC9 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       78 3B 04 B4 
       02 00       
042CDB 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       8D 3B 04 B5 
       02 00       
042CED 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       A2 3B 04 B6 
       02 00       
042CFF 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       B7 3B 04 B7 
       02 00       
042D11 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       CC 3B 04 B8 
       02 00       
042D23 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       E1 3B 04 B9 
       02 00       
042D35 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       F6 3B 04 BA 
       02 00       
042D47 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       0B 3C 04 BB 
       02 00       
042D59 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       20 3C 04 BC 
       02 00       
042D6B 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_190, 702
       00 00 10 00 
       00 00 01 00 
       35 3C 04 BE 
       02 00       
042D7D 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_191, 703
       00 00 10 00 
       00 00 01 00 
       4A 3C 04 BF 
       02 00       
042D8F 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_192, 704
       00 00 10 00 
       00 00 01 00 
       5F 3C 04 C0 
       02 00       
042DA1 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       74 3C 04 C1 
       02 00       
042DB3 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       89 3C 04 C2 
       02 00       
042DC5 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       9E 3C 04 C3 
       02 00       
042DD7 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       B3 3C 04 C4 
       02 00       
042DE9 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       C8 3C 04 C5 
       02 00       
042DFB 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       DD 3C 04 C6 
       02 00       
042E0D 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       F2 3C 04 C7 
       02 00       
042E1F 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       07 3D 04 C8 
       02 00       
042E31 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       1C 3D 04 C9 
       02 00       
042E43 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       31 3D 04 CA 
       02 00       
042E55 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       46 3D 04 CB 
       02 00       
042E67 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       5B 3D 04 CC 
       02 00       
042E79 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_206, 718
       00 00 10 00 
       00 00 01 00 
       70 3D 04 CE 
       02 00       
042E8B 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_207, 719
       00 00 10 00 
       00 00 01 00 
       85 3D 04 CF 
       02 00       
042E9D 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_208, 720
       00 00 10 00 
       00 00 01 00 
       9A 3D 04 D0 
       02 00       
042EAF 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       AF 3D 04 D1 
       02 00       
042EC1 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       C4 3D 04 D2 
       02 00       
042ED3 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       D9 3D 04 D3 
       02 00       
042EE5 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       EE 3D 04 D4 
       02 00       
042EF7 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       03 3E 04 D5 
       02 00       
042F09 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       18 3E 04 D6 
       02 00       
042F1B 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       2D 3E 04 D7 
       02 00       
042F2D 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       42 3E 04 D8 
       02 00       
042F3F 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       57 3E 04 D9 
       02 00       
042F51 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       6C 3E 04 DA 
       02 00       
042F63 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       81 3E 04 DB 
       02 00       
042F75 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       96 3E 04 DC 
       02 00       
042F87 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       AB 3E 04 E1 
       02 00       
042F99 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       C0 3E 04 E2 
       02 00       
042FAB 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       D5 3E 04 E3 
       02 00       
042FBD 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       EA 3E 04 E4 
       02 00       
042FCF 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       FF 3E 04 E5 
       02 00       
042FE1 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       14 3F 04 E6 
       02 00       
042FF3 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       29 3F 04 E7 
       02 00       
043005 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       3E 3F 04 E8 
       02 00       
043017 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       53 3F 04 E9 
       02 00       
043029 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       68 3F 04 EA 
       02 00       
04303B 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       7D 3F 04 EB 
       02 00       
04304D 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       92 3F 04 EC 
       02 00       
04305F 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       A7 3F 04 F1 
       02 00       
043071 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       BC 3F 04 F2 
       02 00       
043083 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       D1 3F 04 F5 
       02 00       
043095 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       E6 3F 04 F6 
       02 00       
0430A7 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       FB 3F 04 F8 
       02 00       
0430B9             0196*   
0430B9             0197*   tiles_dg_files_list: ; filename:
0430B9 74 69 6C 65 0198*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0430CE 74 69 6C 65 0199*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
0430E3 74 69 6C 65 0200*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
0430F8 74 69 6C 65 0201*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
04310D 74 69 6C 65 0202*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
043122 74 69 6C 65 0203*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
043137 74 69 6C 65 0204*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
04314C 74 69 6C 65 0205*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
043161 74 69 6C 65 0206*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
043176 74 69 6C 65 0207*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
04318B 74 69 6C 65 0208*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
0431A0 74 69 6C 65 0209*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
0431B5 74 69 6C 65 0210*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0431CA 74 69 6C 65 0211*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
0431DF 74 69 6C 65 0212*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
0431F4 74 69 6C 65 0213*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
043209 74 69 6C 65 0214*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
04321E 74 69 6C 65 0215*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
043233 74 69 6C 65 0216*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
043248 74 69 6C 65 0217*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
04325D 74 69 6C 65 0218*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
043272 74 69 6C 65 0219*   fn_dg_045: db "tiles/dg/0/045.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 35 2E 72 
       67 62 61 32 
       00          
043287 74 69 6C 65 0220*   fn_dg_046: db "tiles/dg/0/046.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 36 2E 72 
       67 62 61 32 
       00          
04329C 74 69 6C 65 0221*   fn_dg_047: db "tiles/dg/0/047.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 37 2E 72 
       67 62 61 32 
       00          
0432B1 74 69 6C 65 0222*   fn_dg_048: db "tiles/dg/0/048.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0432C6 74 69 6C 65 0223*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
0432DB 74 69 6C 65 0224*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
0432F0 74 69 6C 65 0225*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
043305 74 69 6C 65 0226*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
04331A 74 69 6C 65 0227*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
04332F 74 69 6C 65 0228*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
043344 74 69 6C 65 0229*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
043359 74 69 6C 65 0230*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04336E 74 69 6C 65 0231*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
043383 74 69 6C 65 0232*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043398 74 69 6C 65 0233*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
0433AD 74 69 6C 65 0234*   fn_dg_061: db "tiles/dg/0/061.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 31 2E 72 
       67 62 61 32 
       00          
0433C2 74 69 6C 65 0235*   fn_dg_062: db "tiles/dg/0/062.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 32 2E 72 
       67 62 61 32 
       00          
0433D7 74 69 6C 65 0236*   fn_dg_063: db "tiles/dg/0/063.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 33 2E 72 
       67 62 61 32 
       00          
0433EC 74 69 6C 65 0237*   fn_dg_064: db "tiles/dg/0/064.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
043401 74 69 6C 65 0238*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
043416 74 69 6C 65 0239*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
04342B 74 69 6C 65 0240*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
043440 74 69 6C 65 0241*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
043455 74 69 6C 65 0242*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
04346A 74 69 6C 65 0243*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
04347F 74 69 6C 65 0244*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
043494 74 69 6C 65 0245*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0434A9 74 69 6C 65 0246*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
0434BE 74 69 6C 65 0247*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
0434D3 74 69 6C 65 0248*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
0434E8 74 69 6C 65 0249*   fn_dg_076: db "tiles/dg/0/076.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 36 2E 72 
       67 62 61 32 
       00          
0434FD 74 69 6C 65 0250*   fn_dg_077: db "tiles/dg/0/077.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 37 2E 72 
       67 62 61 32 
       00          
043512 74 69 6C 65 0251*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
043527 74 69 6C 65 0252*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
04353C 74 69 6C 65 0253*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
043551 74 69 6C 65 0254*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
043566 74 69 6C 65 0255*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
04357B 74 69 6C 65 0256*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
043590 74 69 6C 65 0257*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
0435A5 74 69 6C 65 0258*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0435BA 74 69 6C 65 0259*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
0435CF 74 69 6C 65 0260*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
0435E4 74 69 6C 65 0261*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
0435F9 74 69 6C 65 0262*   fn_dg_092: db "tiles/dg/0/092.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 32 2E 72 
       67 62 61 32 
       00          
04360E 74 69 6C 65 0263*   fn_dg_093: db "tiles/dg/0/093.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 33 2E 72 
       67 62 61 32 
       00          
043623 74 69 6C 65 0264*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
043638 74 69 6C 65 0265*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
04364D 74 69 6C 65 0266*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
043662 74 69 6C 65 0267*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
043677 74 69 6C 65 0268*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
04368C 74 69 6C 65 0269*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
0436A1 74 69 6C 65 0270*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
0436B6 74 69 6C 65 0271*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0436CB 74 69 6C 65 0272*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
0436E0 74 69 6C 65 0273*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
0436F5 74 69 6C 65 0274*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
04370A 74 69 6C 65 0275*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
04371F 74 69 6C 65 0276*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
043734 74 69 6C 65 0277*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
043749 74 69 6C 65 0278*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
04375E 74 69 6C 65 0279*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
043773 74 69 6C 65 0280*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
043788 74 69 6C 65 0281*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
04379D 74 69 6C 65 0282*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
0437B2 74 69 6C 65 0283*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0437C7 74 69 6C 65 0284*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
0437DC 74 69 6C 65 0285*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
0437F1 74 69 6C 65 0286*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
043806 74 69 6C 65 0287*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
04381B 74 69 6C 65 0288*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
043830 74 69 6C 65 0289*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
043845 74 69 6C 65 0290*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
04385A 74 69 6C 65 0291*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
04386F 74 69 6C 65 0292*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
043884 74 69 6C 65 0293*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
043899 74 69 6C 65 0294*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0438AE 74 69 6C 65 0295*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
0438C3 74 69 6C 65 0296*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
0438D8 74 69 6C 65 0297*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
0438ED 74 69 6C 65 0298*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
043902 74 69 6C 65 0299*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
043917 74 69 6C 65 0300*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
04392C 74 69 6C 65 0301*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
043941 74 69 6C 65 0302*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
043956 74 69 6C 65 0303*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
04396B 74 69 6C 65 0304*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
043980 74 69 6C 65 0305*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
043995 74 69 6C 65 0306*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0439AA 74 69 6C 65 0307*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
0439BF 74 69 6C 65 0308*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
0439D4 74 69 6C 65 0309*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
0439E9 74 69 6C 65 0310*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
0439FE 74 69 6C 65 0311*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
043A13 74 69 6C 65 0312*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
043A28 74 69 6C 65 0313*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
043A3D 74 69 6C 65 0314*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
043A52 74 69 6C 65 0315*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
043A67 74 69 6C 65 0316*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
043A7C 74 69 6C 65 0317*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
043A91 74 69 6C 65 0318*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
043AA6 74 69 6C 65 0319*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
043ABB 74 69 6C 65 0320*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
043AD0 74 69 6C 65 0321*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
043AE5 74 69 6C 65 0322*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
043AFA 74 69 6C 65 0323*   fn_dg_174: db "tiles/dg/0/174.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 34 2E 72 
       67 62 61 32 
       00          
043B0F 74 69 6C 65 0324*   fn_dg_175: db "tiles/dg/0/175.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 35 2E 72 
       67 62 61 32 
       00          
043B24 74 69 6C 65 0325*   fn_dg_176: db "tiles/dg/0/176.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
043B39 74 69 6C 65 0326*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
043B4E 74 69 6C 65 0327*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
043B63 74 69 6C 65 0328*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
043B78 74 69 6C 65 0329*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
043B8D 74 69 6C 65 0330*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
043BA2 74 69 6C 65 0331*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
043BB7 74 69 6C 65 0332*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
043BCC 74 69 6C 65 0333*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
043BE1 74 69 6C 65 0334*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
043BF6 74 69 6C 65 0335*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
043C0B 74 69 6C 65 0336*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
043C20 74 69 6C 65 0337*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
043C35 74 69 6C 65 0338*   fn_dg_190: db "tiles/dg/0/190.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 30 2E 72 
       67 62 61 32 
       00          
043C4A 74 69 6C 65 0339*   fn_dg_191: db "tiles/dg/0/191.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 31 2E 72 
       67 62 61 32 
       00          
043C5F 74 69 6C 65 0340*   fn_dg_192: db "tiles/dg/0/192.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
043C74 74 69 6C 65 0341*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
043C89 74 69 6C 65 0342*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
043C9E 74 69 6C 65 0343*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
043CB3 74 69 6C 65 0344*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
043CC8 74 69 6C 65 0345*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
043CDD 74 69 6C 65 0346*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
043CF2 74 69 6C 65 0347*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
043D07 74 69 6C 65 0348*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
043D1C 74 69 6C 65 0349*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
043D31 74 69 6C 65 0350*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
043D46 74 69 6C 65 0351*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
043D5B 74 69 6C 65 0352*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
043D70 74 69 6C 65 0353*   fn_dg_206: db "tiles/dg/0/206.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 36 2E 72 
       67 62 61 32 
       00          
043D85 74 69 6C 65 0354*   fn_dg_207: db "tiles/dg/0/207.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 37 2E 72 
       67 62 61 32 
       00          
043D9A 74 69 6C 65 0355*   fn_dg_208: db "tiles/dg/0/208.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
043DAF 74 69 6C 65 0356*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
043DC4 74 69 6C 65 0357*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
043DD9 74 69 6C 65 0358*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
043DEE 74 69 6C 65 0359*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
043E03 74 69 6C 65 0360*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
043E18 74 69 6C 65 0361*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
043E2D 74 69 6C 65 0362*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
043E42 74 69 6C 65 0363*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
043E57 74 69 6C 65 0364*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
043E6C 74 69 6C 65 0365*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
043E81 74 69 6C 65 0366*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
043E96 74 69 6C 65 0367*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
043EAB 74 69 6C 65 0368*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
043EC0 74 69 6C 65 0369*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
043ED5 74 69 6C 65 0370*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
043EEA 74 69 6C 65 0371*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
043EFF 74 69 6C 65 0372*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
043F14 74 69 6C 65 0373*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
043F29 74 69 6C 65 0374*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
043F3E 74 69 6C 65 0375*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
043F53 74 69 6C 65 0376*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
043F68 74 69 6C 65 0377*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
043F7D 74 69 6C 65 0378*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
043F92 74 69 6C 65 0379*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
043FA7 74 69 6C 65 0380*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
043FBC 74 69 6C 65 0381*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
043FD1 74 69 6C 65 0382*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
043FE6 74 69 6C 65 0383*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
043FFB 74 69 6C 65 0384*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044010             0054        include "images_sprites.inc"
044010             0001*   ; Generated by make_images.py
044010             0002*   
044010             0003*   sprites_num_images: equ 157
044010             0004*   
044010             0005*   ; buffer_ids:
044010             0006*   BUF_CRATER: equ 256
044010             0007*   BUF_CRATER_0: equ 257
044010             0008*   BUF_CRATER_1: equ 258
044010             0009*   BUF_CRATER_2: equ 259
044010             0010*   BUF_CRATER_3: equ 260
044010             0011*   BUF_EXPLOSION_A: equ 261
044010             0012*   BUF_EXPLOSION_B: equ 262
044010             0013*   BUF_EXPLOSION_C: equ 263
044010             0014*   BUF_EXPLOSION_D: equ 264
044010             0015*   BUF_EXPLOSION_E: equ 265
044010             0016*   BUF_FIREBALL_2_000: equ 266
044010             0017*   BUF_FIREBALL_2_008: equ 267
044010             0018*   BUF_FIREBALL_2_016: equ 268
044010             0019*   BUF_FIREBALL_2_024: equ 269
044010             0020*   BUF_FIREBALL_2_032: equ 270
044010             0021*   BUF_FIREBALL_2_040: equ 271
044010             0022*   BUF_FIREBALL_2_048: equ 272
044010             0023*   BUF_FIREBALL_2_056: equ 273
044010             0024*   BUF_FIREBALL_2_064: equ 274
044010             0025*   BUF_FIREBALL_2_072: equ 275
044010             0026*   BUF_FIREBALL_2_080: equ 276
044010             0027*   BUF_FIREBALL_2_088: equ 277
044010             0028*   BUF_FIREBALL_2_096: equ 278
044010             0029*   BUF_FIREBALL_2_104: equ 279
044010             0030*   BUF_FIREBALL_2_112: equ 280
044010             0031*   BUF_FIREBALL_2_120: equ 281
044010             0032*   BUF_FIREBALL_2_128: equ 282
044010             0033*   BUF_FIREBALL_2_136: equ 283
044010             0034*   BUF_FIREBALL_2_144: equ 284
044010             0035*   BUF_FIREBALL_2_152: equ 285
044010             0036*   BUF_FIREBALL_2_160: equ 286
044010             0037*   BUF_FIREBALL_2_168: equ 287
044010             0038*   BUF_FIREBALL_2_176: equ 288
044010             0039*   BUF_FIREBALL_2_184: equ 289
044010             0040*   BUF_FIREBALL_2_192: equ 290
044010             0041*   BUF_FIREBALL_2_200: equ 291
044010             0042*   BUF_FIREBALL_2_208: equ 292
044010             0043*   BUF_FIREBALL_2_216: equ 293
044010             0044*   BUF_FIREBALL_2_224: equ 294
044010             0045*   BUF_FIREBALL_2_232: equ 295
044010             0046*   BUF_FIREBALL_2_240: equ 296
044010             0047*   BUF_FIREBALL_2_248: equ 297
044010             0048*   BUF_FIREBALL_3_000: equ 298
044010             0049*   BUF_FIREBALL_3_008: equ 299
044010             0050*   BUF_FIREBALL_3_016: equ 300
044010             0051*   BUF_FIREBALL_3_024: equ 301
044010             0052*   BUF_FIREBALL_3_032: equ 302
044010             0053*   BUF_FIREBALL_3_040: equ 303
044010             0054*   BUF_FIREBALL_3_048: equ 304
044010             0055*   BUF_FIREBALL_3_056: equ 305
044010             0056*   BUF_FIREBALL_3_064: equ 306
044010             0057*   BUF_FIREBALL_3_072: equ 307
044010             0058*   BUF_FIREBALL_3_080: equ 308
044010             0059*   BUF_FIREBALL_3_088: equ 309
044010             0060*   BUF_FIREBALL_3_096: equ 310
044010             0061*   BUF_FIREBALL_3_104: equ 311
044010             0062*   BUF_FIREBALL_3_112: equ 312
044010             0063*   BUF_FIREBALL_3_120: equ 313
044010             0064*   BUF_FIREBALL_3_128: equ 314
044010             0065*   BUF_FIREBALL_3_136: equ 315
044010             0066*   BUF_FIREBALL_3_144: equ 316
044010             0067*   BUF_FIREBALL_3_152: equ 317
044010             0068*   BUF_FIREBALL_3_160: equ 318
044010             0069*   BUF_FIREBALL_3_168: equ 319
044010             0070*   BUF_FIREBALL_3_176: equ 320
044010             0071*   BUF_FIREBALL_3_184: equ 321
044010             0072*   BUF_FIREBALL_3_192: equ 322
044010             0073*   BUF_FIREBALL_3_200: equ 323
044010             0074*   BUF_FIREBALL_3_208: equ 324
044010             0075*   BUF_FIREBALL_3_216: equ 325
044010             0076*   BUF_FIREBALL_3_224: equ 326
044010             0077*   BUF_FIREBALL_3_232: equ 327
044010             0078*   BUF_FIREBALL_3_240: equ 328
044010             0079*   BUF_FIREBALL_3_248: equ 329
044010             0080*   BUF_LASER_A: equ 330
044010             0081*   BUF_LASER_B: equ 331
044010             0082*   BUF_LIGHTNING_H_0: equ 332
044010             0083*   BUF_LIGHTNING_H_1: equ 333
044010             0084*   BUF_PAD: equ 334
044010             0085*   BUF_SEEKER_000: equ 335
044010             0086*   BUF_SEEKER_008: equ 336
044010             0087*   BUF_SEEKER_016: equ 337
044010             0088*   BUF_SEEKER_024: equ 338
044010             0089*   BUF_SEEKER_032: equ 339
044010             0090*   BUF_SEEKER_040: equ 340
044010             0091*   BUF_SEEKER_048: equ 341
044010             0092*   BUF_SEEKER_056: equ 342
044010             0093*   BUF_SEEKER_064: equ 343
044010             0094*   BUF_SEEKER_072: equ 344
044010             0095*   BUF_SEEKER_080: equ 345
044010             0096*   BUF_SEEKER_088: equ 346
044010             0097*   BUF_SEEKER_096: equ 347
044010             0098*   BUF_SEEKER_104: equ 348
044010             0099*   BUF_SEEKER_112: equ 349
044010             0100*   BUF_SEEKER_120: equ 350
044010             0101*   BUF_SEEKER_128: equ 351
044010             0102*   BUF_SEEKER_136: equ 352
044010             0103*   BUF_SEEKER_144: equ 353
044010             0104*   BUF_SEEKER_152: equ 354
044010             0105*   BUF_SEEKER_160: equ 355
044010             0106*   BUF_SEEKER_168: equ 356
044010             0107*   BUF_SEEKER_176: equ 357
044010             0108*   BUF_SEEKER_184: equ 358
044010             0109*   BUF_SEEKER_192: equ 359
044010             0110*   BUF_SEEKER_200: equ 360
044010             0111*   BUF_SEEKER_208: equ 361
044010             0112*   BUF_SEEKER_216: equ 362
044010             0113*   BUF_SEEKER_224: equ 363
044010             0114*   BUF_SEEKER_232: equ 364
044010             0115*   BUF_SEEKER_240: equ 365
044010             0116*   BUF_SEEKER_248: equ 366
044010             0117*   BUF_SHIP_0L: equ 367
044010             0118*   BUF_SHIP_1C: equ 368
044010             0119*   BUF_SHIP_2R: equ 369
044010             0120*   BUF_SHIP_SMALL: equ 370
044010             0121*   BUF_TEST_STRIPES: equ 371
044010             0122*   BUF_TILE_BLANK: equ 372
044010             0123*   BUF_TILE_PAD_0: equ 373
044010             0124*   BUF_TILE_PAD_1: equ 374
044010             0125*   BUF_TILE_PAD_2: equ 375
044010             0126*   BUF_TILE_PAD_3: equ 376
044010             0127*   BUF_TILE_PAD_4: equ 377
044010             0128*   BUF_TILE_PAD_5: equ 378
044010             0129*   BUF_TILE_PAD_6: equ 379
044010             0130*   BUF_TILE_PAD_7: equ 380
044010             0131*   BUF_TURRET_000: equ 381
044010             0132*   BUF_TURRET_008: equ 382
044010             0133*   BUF_TURRET_016: equ 383
044010             0134*   BUF_TURRET_024: equ 384
044010             0135*   BUF_TURRET_032: equ 385
044010             0136*   BUF_TURRET_040: equ 386
044010             0137*   BUF_TURRET_048: equ 387
044010             0138*   BUF_TURRET_056: equ 388
044010             0139*   BUF_TURRET_064: equ 389
044010             0140*   BUF_TURRET_072: equ 390
044010             0141*   BUF_TURRET_080: equ 391
044010             0142*   BUF_TURRET_088: equ 392
044010             0143*   BUF_TURRET_096: equ 393
044010             0144*   BUF_TURRET_104: equ 394
044010             0145*   BUF_TURRET_112: equ 395
044010             0146*   BUF_TURRET_120: equ 396
044010             0147*   BUF_TURRET_128: equ 397
044010             0148*   BUF_TURRET_136: equ 398
044010             0149*   BUF_TURRET_144: equ 399
044010             0150*   BUF_TURRET_152: equ 400
044010             0151*   BUF_TURRET_160: equ 401
044010             0152*   BUF_TURRET_168: equ 402
044010             0153*   BUF_TURRET_176: equ 403
044010             0154*   BUF_TURRET_184: equ 404
044010             0155*   BUF_TURRET_192: equ 405
044010             0156*   BUF_TURRET_200: equ 406
044010             0157*   BUF_TURRET_208: equ 407
044010             0158*   BUF_TURRET_216: equ 408
044010             0159*   BUF_TURRET_224: equ 409
044010             0160*   BUF_TURRET_232: equ 410
044010             0161*   BUF_TURRET_240: equ 411
044010             0162*   BUF_TURRET_248: equ 412
044010             0163*   
044010             0164*   sprites_image_list: ; type; width; height; size; filename; bufferId:
044010 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       1A 4B 04 00 
       01 00       
044022 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_crater_0, 257
       00 00 10 00 
       00 00 01 00 
       2F 4B 04 01 
       01 00       
044034 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_crater_1, 258
       00 00 10 00 
       00 00 01 00 
       46 4B 04 02 
       01 00       
044046 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_crater_2, 259
       00 00 10 00 
       00 00 01 00 
       5D 4B 04 03 
       01 00       
044058 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_crater_3, 260
       00 00 10 00 
       00 00 01 00 
       74 4B 04 04 
       01 00       
04406A 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_explosion_a, 261
       00 00 10 00 
       00 00 01 00 
       8B 4B 04 05 
       01 00       
04407C 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_explosion_b, 262
       00 00 10 00 
       00 00 01 00 
       A5 4B 04 06 
       01 00       
04408E 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_explosion_c, 263
       00 00 10 00 
       00 00 01 00 
       BF 4B 04 07 
       01 00       
0440A0 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_explosion_d, 264
       00 00 10 00 
       00 00 01 00 
       D9 4B 04 08 
       01 00       
0440B2 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_explosion_e, 265
       00 00 10 00 
       00 00 01 00 
       F3 4B 04 09 
       01 00       
0440C4 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_fireball_2_000, 266
       00 00 10 00 
       00 00 01 00 
       0D 4C 04 0A 
       01 00       
0440D6 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_fireball_2_008, 267
       00 00 10 00 
       00 00 01 00 
       2A 4C 04 0B 
       01 00       
0440E8 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_fireball_2_016, 268
       00 00 10 00 
       00 00 01 00 
       47 4C 04 0C 
       01 00       
0440FA 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_fireball_2_024, 269
       00 00 10 00 
       00 00 01 00 
       64 4C 04 0D 
       01 00       
04410C 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_fireball_2_032, 270
       00 00 10 00 
       00 00 01 00 
       81 4C 04 0E 
       01 00       
04411E 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_fireball_2_040, 271
       00 00 10 00 
       00 00 01 00 
       9E 4C 04 0F 
       01 00       
044130 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_fireball_2_048, 272
       00 00 10 00 
       00 00 01 00 
       BB 4C 04 10 
       01 00       
044142 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_fireball_2_056, 273
       00 00 10 00 
       00 00 01 00 
       D8 4C 04 11 
       01 00       
044154 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_fireball_2_064, 274
       00 00 10 00 
       00 00 01 00 
       F5 4C 04 12 
       01 00       
044166 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_fireball_2_072, 275
       00 00 10 00 
       00 00 01 00 
       12 4D 04 13 
       01 00       
044178 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_fireball_2_080, 276
       00 00 10 00 
       00 00 01 00 
       2F 4D 04 14 
       01 00       
04418A 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_fireball_2_088, 277
       00 00 10 00 
       00 00 01 00 
       4C 4D 04 15 
       01 00       
04419C 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_fireball_2_096, 278
       00 00 10 00 
       00 00 01 00 
       69 4D 04 16 
       01 00       
0441AE 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_fireball_2_104, 279
       00 00 10 00 
       00 00 01 00 
       86 4D 04 17 
       01 00       
0441C0 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_fireball_2_112, 280
       00 00 10 00 
       00 00 01 00 
       A3 4D 04 18 
       01 00       
0441D2 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_fireball_2_120, 281
       00 00 10 00 
       00 00 01 00 
       C0 4D 04 19 
       01 00       
0441E4 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_fireball_2_128, 282
       00 00 10 00 
       00 00 01 00 
       DD 4D 04 1A 
       01 00       
0441F6 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_fireball_2_136, 283
       00 00 10 00 
       00 00 01 00 
       FA 4D 04 1B 
       01 00       
044208 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_fireball_2_144, 284
       00 00 10 00 
       00 00 01 00 
       17 4E 04 1C 
       01 00       
04421A 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_fireball_2_152, 285
       00 00 10 00 
       00 00 01 00 
       34 4E 04 1D 
       01 00       
04422C 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_fireball_2_160, 286
       00 00 10 00 
       00 00 01 00 
       51 4E 04 1E 
       01 00       
04423E 01 00 00 10 0196*   	dl 1, 16, 16, 256, fn_fireball_2_168, 287
       00 00 10 00 
       00 00 01 00 
       6E 4E 04 1F 
       01 00       
044250 01 00 00 10 0197*   	dl 1, 16, 16, 256, fn_fireball_2_176, 288
       00 00 10 00 
       00 00 01 00 
       8B 4E 04 20 
       01 00       
044262 01 00 00 10 0198*   	dl 1, 16, 16, 256, fn_fireball_2_184, 289
       00 00 10 00 
       00 00 01 00 
       A8 4E 04 21 
       01 00       
044274 01 00 00 10 0199*   	dl 1, 16, 16, 256, fn_fireball_2_192, 290
       00 00 10 00 
       00 00 01 00 
       C5 4E 04 22 
       01 00       
044286 01 00 00 10 0200*   	dl 1, 16, 16, 256, fn_fireball_2_200, 291
       00 00 10 00 
       00 00 01 00 
       E2 4E 04 23 
       01 00       
044298 01 00 00 10 0201*   	dl 1, 16, 16, 256, fn_fireball_2_208, 292
       00 00 10 00 
       00 00 01 00 
       FF 4E 04 24 
       01 00       
0442AA 01 00 00 10 0202*   	dl 1, 16, 16, 256, fn_fireball_2_216, 293
       00 00 10 00 
       00 00 01 00 
       1C 4F 04 25 
       01 00       
0442BC 01 00 00 10 0203*   	dl 1, 16, 16, 256, fn_fireball_2_224, 294
       00 00 10 00 
       00 00 01 00 
       39 4F 04 26 
       01 00       
0442CE 01 00 00 10 0204*   	dl 1, 16, 16, 256, fn_fireball_2_232, 295
       00 00 10 00 
       00 00 01 00 
       56 4F 04 27 
       01 00       
0442E0 01 00 00 10 0205*   	dl 1, 16, 16, 256, fn_fireball_2_240, 296
       00 00 10 00 
       00 00 01 00 
       73 4F 04 28 
       01 00       
0442F2 01 00 00 10 0206*   	dl 1, 16, 16, 256, fn_fireball_2_248, 297
       00 00 10 00 
       00 00 01 00 
       90 4F 04 29 
       01 00       
044304 01 00 00 10 0207*   	dl 1, 16, 16, 256, fn_fireball_3_000, 298
       00 00 10 00 
       00 00 01 00 
       AD 4F 04 2A 
       01 00       
044316 01 00 00 10 0208*   	dl 1, 16, 16, 256, fn_fireball_3_008, 299
       00 00 10 00 
       00 00 01 00 
       CA 4F 04 2B 
       01 00       
044328 01 00 00 10 0209*   	dl 1, 16, 16, 256, fn_fireball_3_016, 300
       00 00 10 00 
       00 00 01 00 
       E7 4F 04 2C 
       01 00       
04433A 01 00 00 10 0210*   	dl 1, 16, 16, 256, fn_fireball_3_024, 301
       00 00 10 00 
       00 00 01 00 
       04 50 04 2D 
       01 00       
04434C 01 00 00 10 0211*   	dl 1, 16, 16, 256, fn_fireball_3_032, 302
       00 00 10 00 
       00 00 01 00 
       21 50 04 2E 
       01 00       
04435E 01 00 00 10 0212*   	dl 1, 16, 16, 256, fn_fireball_3_040, 303
       00 00 10 00 
       00 00 01 00 
       3E 50 04 2F 
       01 00       
044370 01 00 00 10 0213*   	dl 1, 16, 16, 256, fn_fireball_3_048, 304
       00 00 10 00 
       00 00 01 00 
       5B 50 04 30 
       01 00       
044382 01 00 00 10 0214*   	dl 1, 16, 16, 256, fn_fireball_3_056, 305
       00 00 10 00 
       00 00 01 00 
       78 50 04 31 
       01 00       
044394 01 00 00 10 0215*   	dl 1, 16, 16, 256, fn_fireball_3_064, 306
       00 00 10 00 
       00 00 01 00 
       95 50 04 32 
       01 00       
0443A6 01 00 00 10 0216*   	dl 1, 16, 16, 256, fn_fireball_3_072, 307
       00 00 10 00 
       00 00 01 00 
       B2 50 04 33 
       01 00       
0443B8 01 00 00 10 0217*   	dl 1, 16, 16, 256, fn_fireball_3_080, 308
       00 00 10 00 
       00 00 01 00 
       CF 50 04 34 
       01 00       
0443CA 01 00 00 10 0218*   	dl 1, 16, 16, 256, fn_fireball_3_088, 309
       00 00 10 00 
       00 00 01 00 
       EC 50 04 35 
       01 00       
0443DC 01 00 00 10 0219*   	dl 1, 16, 16, 256, fn_fireball_3_096, 310
       00 00 10 00 
       00 00 01 00 
       09 51 04 36 
       01 00       
0443EE 01 00 00 10 0220*   	dl 1, 16, 16, 256, fn_fireball_3_104, 311
       00 00 10 00 
       00 00 01 00 
       26 51 04 37 
       01 00       
044400 01 00 00 10 0221*   	dl 1, 16, 16, 256, fn_fireball_3_112, 312
       00 00 10 00 
       00 00 01 00 
       43 51 04 38 
       01 00       
044412 01 00 00 10 0222*   	dl 1, 16, 16, 256, fn_fireball_3_120, 313
       00 00 10 00 
       00 00 01 00 
       60 51 04 39 
       01 00       
044424 01 00 00 10 0223*   	dl 1, 16, 16, 256, fn_fireball_3_128, 314
       00 00 10 00 
       00 00 01 00 
       7D 51 04 3A 
       01 00       
044436 01 00 00 10 0224*   	dl 1, 16, 16, 256, fn_fireball_3_136, 315
       00 00 10 00 
       00 00 01 00 
       9A 51 04 3B 
       01 00       
044448 01 00 00 10 0225*   	dl 1, 16, 16, 256, fn_fireball_3_144, 316
       00 00 10 00 
       00 00 01 00 
       B7 51 04 3C 
       01 00       
04445A 01 00 00 10 0226*   	dl 1, 16, 16, 256, fn_fireball_3_152, 317
       00 00 10 00 
       00 00 01 00 
       D4 51 04 3D 
       01 00       
04446C 01 00 00 10 0227*   	dl 1, 16, 16, 256, fn_fireball_3_160, 318
       00 00 10 00 
       00 00 01 00 
       F1 51 04 3E 
       01 00       
04447E 01 00 00 10 0228*   	dl 1, 16, 16, 256, fn_fireball_3_168, 319
       00 00 10 00 
       00 00 01 00 
       0E 52 04 3F 
       01 00       
044490 01 00 00 10 0229*   	dl 1, 16, 16, 256, fn_fireball_3_176, 320
       00 00 10 00 
       00 00 01 00 
       2B 52 04 40 
       01 00       
0444A2 01 00 00 10 0230*   	dl 1, 16, 16, 256, fn_fireball_3_184, 321
       00 00 10 00 
       00 00 01 00 
       48 52 04 41 
       01 00       
0444B4 01 00 00 10 0231*   	dl 1, 16, 16, 256, fn_fireball_3_192, 322
       00 00 10 00 
       00 00 01 00 
       65 52 04 42 
       01 00       
0444C6 01 00 00 10 0232*   	dl 1, 16, 16, 256, fn_fireball_3_200, 323
       00 00 10 00 
       00 00 01 00 
       82 52 04 43 
       01 00       
0444D8 01 00 00 10 0233*   	dl 1, 16, 16, 256, fn_fireball_3_208, 324
       00 00 10 00 
       00 00 01 00 
       9F 52 04 44 
       01 00       
0444EA 01 00 00 10 0234*   	dl 1, 16, 16, 256, fn_fireball_3_216, 325
       00 00 10 00 
       00 00 01 00 
       BC 52 04 45 
       01 00       
0444FC 01 00 00 10 0235*   	dl 1, 16, 16, 256, fn_fireball_3_224, 326
       00 00 10 00 
       00 00 01 00 
       D9 52 04 46 
       01 00       
04450E 01 00 00 10 0236*   	dl 1, 16, 16, 256, fn_fireball_3_232, 327
       00 00 10 00 
       00 00 01 00 
       F6 52 04 47 
       01 00       
044520 01 00 00 10 0237*   	dl 1, 16, 16, 256, fn_fireball_3_240, 328
       00 00 10 00 
       00 00 01 00 
       13 53 04 48 
       01 00       
044532 01 00 00 10 0238*   	dl 1, 16, 16, 256, fn_fireball_3_248, 329
       00 00 10 00 
       00 00 01 00 
       30 53 04 49 
       01 00       
044544 01 00 00 05 0239*   	dl 1, 5, 13, 65, fn_laser_a, 330
       00 00 0D 00 
       00 41 00 00 
       4D 53 04 4A 
       01 00       
044556 01 00 00 05 0240*   	dl 1, 5, 13, 65, fn_laser_b, 331
       00 00 0D 00 
       00 41 00 00 
       63 53 04 4B 
       01 00       
044568 01 00 00 10 0241*   	dl 1, 16, 16, 256, fn_lightning_h_0, 332
       00 00 10 00 
       00 00 01 00 
       79 53 04 4C 
       01 00       
04457A 01 00 00 10 0242*   	dl 1, 16, 16, 256, fn_lightning_h_1, 333
       00 00 10 00 
       00 00 01 00 
       95 53 04 4D 
       01 00       
04458C 01 00 00 10 0243*   	dl 1, 16, 16, 256, fn_pad, 334
       00 00 10 00 
       00 00 01 00 
       B1 53 04 4E 
       01 00       
04459E 01 00 00 10 0244*   	dl 1, 16, 16, 256, fn_seeker_000, 335
       00 00 10 00 
       00 00 01 00 
       C3 53 04 4F 
       01 00       
0445B0 01 00 00 10 0245*   	dl 1, 16, 16, 256, fn_seeker_008, 336
       00 00 10 00 
       00 00 01 00 
       DC 53 04 50 
       01 00       
0445C2 01 00 00 10 0246*   	dl 1, 16, 16, 256, fn_seeker_016, 337
       00 00 10 00 
       00 00 01 00 
       F5 53 04 51 
       01 00       
0445D4 01 00 00 10 0247*   	dl 1, 16, 16, 256, fn_seeker_024, 338
       00 00 10 00 
       00 00 01 00 
       0E 54 04 52 
       01 00       
0445E6 01 00 00 10 0248*   	dl 1, 16, 16, 256, fn_seeker_032, 339
       00 00 10 00 
       00 00 01 00 
       27 54 04 53 
       01 00       
0445F8 01 00 00 10 0249*   	dl 1, 16, 16, 256, fn_seeker_040, 340
       00 00 10 00 
       00 00 01 00 
       40 54 04 54 
       01 00       
04460A 01 00 00 10 0250*   	dl 1, 16, 16, 256, fn_seeker_048, 341
       00 00 10 00 
       00 00 01 00 
       59 54 04 55 
       01 00       
04461C 01 00 00 10 0251*   	dl 1, 16, 16, 256, fn_seeker_056, 342
       00 00 10 00 
       00 00 01 00 
       72 54 04 56 
       01 00       
04462E 01 00 00 10 0252*   	dl 1, 16, 16, 256, fn_seeker_064, 343
       00 00 10 00 
       00 00 01 00 
       8B 54 04 57 
       01 00       
044640 01 00 00 10 0253*   	dl 1, 16, 16, 256, fn_seeker_072, 344
       00 00 10 00 
       00 00 01 00 
       A4 54 04 58 
       01 00       
044652 01 00 00 10 0254*   	dl 1, 16, 16, 256, fn_seeker_080, 345
       00 00 10 00 
       00 00 01 00 
       BD 54 04 59 
       01 00       
044664 01 00 00 10 0255*   	dl 1, 16, 16, 256, fn_seeker_088, 346
       00 00 10 00 
       00 00 01 00 
       D6 54 04 5A 
       01 00       
044676 01 00 00 10 0256*   	dl 1, 16, 16, 256, fn_seeker_096, 347
       00 00 10 00 
       00 00 01 00 
       EF 54 04 5B 
       01 00       
044688 01 00 00 10 0257*   	dl 1, 16, 16, 256, fn_seeker_104, 348
       00 00 10 00 
       00 00 01 00 
       08 55 04 5C 
       01 00       
04469A 01 00 00 10 0258*   	dl 1, 16, 16, 256, fn_seeker_112, 349
       00 00 10 00 
       00 00 01 00 
       21 55 04 5D 
       01 00       
0446AC 01 00 00 10 0259*   	dl 1, 16, 16, 256, fn_seeker_120, 350
       00 00 10 00 
       00 00 01 00 
       3A 55 04 5E 
       01 00       
0446BE 01 00 00 10 0260*   	dl 1, 16, 16, 256, fn_seeker_128, 351
       00 00 10 00 
       00 00 01 00 
       53 55 04 5F 
       01 00       
0446D0 01 00 00 10 0261*   	dl 1, 16, 16, 256, fn_seeker_136, 352
       00 00 10 00 
       00 00 01 00 
       6C 55 04 60 
       01 00       
0446E2 01 00 00 10 0262*   	dl 1, 16, 16, 256, fn_seeker_144, 353
       00 00 10 00 
       00 00 01 00 
       85 55 04 61 
       01 00       
0446F4 01 00 00 10 0263*   	dl 1, 16, 16, 256, fn_seeker_152, 354
       00 00 10 00 
       00 00 01 00 
       9E 55 04 62 
       01 00       
044706 01 00 00 10 0264*   	dl 1, 16, 16, 256, fn_seeker_160, 355
       00 00 10 00 
       00 00 01 00 
       B7 55 04 63 
       01 00       
044718 01 00 00 10 0265*   	dl 1, 16, 16, 256, fn_seeker_168, 356
       00 00 10 00 
       00 00 01 00 
       D0 55 04 64 
       01 00       
04472A 01 00 00 10 0266*   	dl 1, 16, 16, 256, fn_seeker_176, 357
       00 00 10 00 
       00 00 01 00 
       E9 55 04 65 
       01 00       
04473C 01 00 00 10 0267*   	dl 1, 16, 16, 256, fn_seeker_184, 358
       00 00 10 00 
       00 00 01 00 
       02 56 04 66 
       01 00       
04474E 01 00 00 10 0268*   	dl 1, 16, 16, 256, fn_seeker_192, 359
       00 00 10 00 
       00 00 01 00 
       1B 56 04 67 
       01 00       
044760 01 00 00 10 0269*   	dl 1, 16, 16, 256, fn_seeker_200, 360
       00 00 10 00 
       00 00 01 00 
       34 56 04 68 
       01 00       
044772 01 00 00 10 0270*   	dl 1, 16, 16, 256, fn_seeker_208, 361
       00 00 10 00 
       00 00 01 00 
       4D 56 04 69 
       01 00       
044784 01 00 00 10 0271*   	dl 1, 16, 16, 256, fn_seeker_216, 362
       00 00 10 00 
       00 00 01 00 
       66 56 04 6A 
       01 00       
044796 01 00 00 10 0272*   	dl 1, 16, 16, 256, fn_seeker_224, 363
       00 00 10 00 
       00 00 01 00 
       7F 56 04 6B 
       01 00       
0447A8 01 00 00 10 0273*   	dl 1, 16, 16, 256, fn_seeker_232, 364
       00 00 10 00 
       00 00 01 00 
       98 56 04 6C 
       01 00       
0447BA 01 00 00 10 0274*   	dl 1, 16, 16, 256, fn_seeker_240, 365
       00 00 10 00 
       00 00 01 00 
       B1 56 04 6D 
       01 00       
0447CC 01 00 00 10 0275*   	dl 1, 16, 16, 256, fn_seeker_248, 366
       00 00 10 00 
       00 00 01 00 
       CA 56 04 6E 
       01 00       
0447DE 01 00 00 10 0276*   	dl 1, 16, 16, 256, fn_ship_0l, 367
       00 00 10 00 
       00 00 01 00 
       E3 56 04 6F 
       01 00       
0447F0 01 00 00 10 0277*   	dl 1, 16, 16, 256, fn_ship_1c, 368
       00 00 10 00 
       00 00 01 00 
       F9 56 04 70 
       01 00       
044802 01 00 00 10 0278*   	dl 1, 16, 16, 256, fn_ship_2r, 369
       00 00 10 00 
       00 00 01 00 
       0F 57 04 71 
       01 00       
044814 01 00 00 08 0279*   	dl 1, 8, 8, 64, fn_ship_small, 370
       00 00 08 00 
       00 40 00 00 
       25 57 04 72 
       01 00       
044826 01 00 00 10 0280*   	dl 1, 16, 16, 256, fn_test_stripes, 371
       00 00 10 00 
       00 00 01 00 
       3E 57 04 73 
       01 00       
044838 01 00 00 10 0281*   	dl 1, 16, 16, 256, fn_tile_blank, 372
       00 00 10 00 
       00 00 01 00 
       59 57 04 74 
       01 00       
04484A 01 00 00 10 0282*   	dl 1, 16, 16, 256, fn_tile_pad_0, 373
       00 00 10 00 
       00 00 01 00 
       72 57 04 75 
       01 00       
04485C 01 00 00 10 0283*   	dl 1, 16, 16, 256, fn_tile_pad_1, 374
       00 00 10 00 
       00 00 01 00 
       8B 57 04 76 
       01 00       
04486E 01 00 00 10 0284*   	dl 1, 16, 16, 256, fn_tile_pad_2, 375
       00 00 10 00 
       00 00 01 00 
       A4 57 04 77 
       01 00       
044880 01 00 00 10 0285*   	dl 1, 16, 16, 256, fn_tile_pad_3, 376
       00 00 10 00 
       00 00 01 00 
       BD 57 04 78 
       01 00       
044892 01 00 00 10 0286*   	dl 1, 16, 16, 256, fn_tile_pad_4, 377
       00 00 10 00 
       00 00 01 00 
       D6 57 04 79 
       01 00       
0448A4 01 00 00 10 0287*   	dl 1, 16, 16, 256, fn_tile_pad_5, 378
       00 00 10 00 
       00 00 01 00 
       EF 57 04 7A 
       01 00       
0448B6 01 00 00 10 0288*   	dl 1, 16, 16, 256, fn_tile_pad_6, 379
       00 00 10 00 
       00 00 01 00 
       08 58 04 7B 
       01 00       
0448C8 01 00 00 10 0289*   	dl 1, 16, 16, 256, fn_tile_pad_7, 380
       00 00 10 00 
       00 00 01 00 
       21 58 04 7C 
       01 00       
0448DA 01 00 00 10 0290*   	dl 1, 16, 16, 256, fn_turret_000, 381
       00 00 10 00 
       00 00 01 00 
       3A 58 04 7D 
       01 00       
0448EC 01 00 00 10 0291*   	dl 1, 16, 16, 256, fn_turret_008, 382
       00 00 10 00 
       00 00 01 00 
       53 58 04 7E 
       01 00       
0448FE 01 00 00 10 0292*   	dl 1, 16, 16, 256, fn_turret_016, 383
       00 00 10 00 
       00 00 01 00 
       6C 58 04 7F 
       01 00       
044910 01 00 00 10 0293*   	dl 1, 16, 16, 256, fn_turret_024, 384
       00 00 10 00 
       00 00 01 00 
       85 58 04 80 
       01 00       
044922 01 00 00 10 0294*   	dl 1, 16, 16, 256, fn_turret_032, 385
       00 00 10 00 
       00 00 01 00 
       9E 58 04 81 
       01 00       
044934 01 00 00 10 0295*   	dl 1, 16, 16, 256, fn_turret_040, 386
       00 00 10 00 
       00 00 01 00 
       B7 58 04 82 
       01 00       
044946 01 00 00 10 0296*   	dl 1, 16, 16, 256, fn_turret_048, 387
       00 00 10 00 
       00 00 01 00 
       D0 58 04 83 
       01 00       
044958 01 00 00 10 0297*   	dl 1, 16, 16, 256, fn_turret_056, 388
       00 00 10 00 
       00 00 01 00 
       E9 58 04 84 
       01 00       
04496A 01 00 00 10 0298*   	dl 1, 16, 16, 256, fn_turret_064, 389
       00 00 10 00 
       00 00 01 00 
       02 59 04 85 
       01 00       
04497C 01 00 00 10 0299*   	dl 1, 16, 16, 256, fn_turret_072, 390
       00 00 10 00 
       00 00 01 00 
       1B 59 04 86 
       01 00       
04498E 01 00 00 10 0300*   	dl 1, 16, 16, 256, fn_turret_080, 391
       00 00 10 00 
       00 00 01 00 
       34 59 04 87 
       01 00       
0449A0 01 00 00 10 0301*   	dl 1, 16, 16, 256, fn_turret_088, 392
       00 00 10 00 
       00 00 01 00 
       4D 59 04 88 
       01 00       
0449B2 01 00 00 10 0302*   	dl 1, 16, 16, 256, fn_turret_096, 393
       00 00 10 00 
       00 00 01 00 
       66 59 04 89 
       01 00       
0449C4 01 00 00 10 0303*   	dl 1, 16, 16, 256, fn_turret_104, 394
       00 00 10 00 
       00 00 01 00 
       7F 59 04 8A 
       01 00       
0449D6 01 00 00 10 0304*   	dl 1, 16, 16, 256, fn_turret_112, 395
       00 00 10 00 
       00 00 01 00 
       98 59 04 8B 
       01 00       
0449E8 01 00 00 10 0305*   	dl 1, 16, 16, 256, fn_turret_120, 396
       00 00 10 00 
       00 00 01 00 
       B1 59 04 8C 
       01 00       
0449FA 01 00 00 10 0306*   	dl 1, 16, 16, 256, fn_turret_128, 397
       00 00 10 00 
       00 00 01 00 
       CA 59 04 8D 
       01 00       
044A0C 01 00 00 10 0307*   	dl 1, 16, 16, 256, fn_turret_136, 398
       00 00 10 00 
       00 00 01 00 
       E3 59 04 8E 
       01 00       
044A1E 01 00 00 10 0308*   	dl 1, 16, 16, 256, fn_turret_144, 399
       00 00 10 00 
       00 00 01 00 
       FC 59 04 8F 
       01 00       
044A30 01 00 00 10 0309*   	dl 1, 16, 16, 256, fn_turret_152, 400
       00 00 10 00 
       00 00 01 00 
       15 5A 04 90 
       01 00       
044A42 01 00 00 10 0310*   	dl 1, 16, 16, 256, fn_turret_160, 401
       00 00 10 00 
       00 00 01 00 
       2E 5A 04 91 
       01 00       
044A54 01 00 00 10 0311*   	dl 1, 16, 16, 256, fn_turret_168, 402
       00 00 10 00 
       00 00 01 00 
       47 5A 04 92 
       01 00       
044A66 01 00 00 10 0312*   	dl 1, 16, 16, 256, fn_turret_176, 403
       00 00 10 00 
       00 00 01 00 
       60 5A 04 93 
       01 00       
044A78 01 00 00 10 0313*   	dl 1, 16, 16, 256, fn_turret_184, 404
       00 00 10 00 
       00 00 01 00 
       79 5A 04 94 
       01 00       
044A8A 01 00 00 10 0314*   	dl 1, 16, 16, 256, fn_turret_192, 405
       00 00 10 00 
       00 00 01 00 
       92 5A 04 95 
       01 00       
044A9C 01 00 00 10 0315*   	dl 1, 16, 16, 256, fn_turret_200, 406
       00 00 10 00 
       00 00 01 00 
       AB 5A 04 96 
       01 00       
044AAE 01 00 00 10 0316*   	dl 1, 16, 16, 256, fn_turret_208, 407
       00 00 10 00 
       00 00 01 00 
       C4 5A 04 97 
       01 00       
044AC0 01 00 00 10 0317*   	dl 1, 16, 16, 256, fn_turret_216, 408
       00 00 10 00 
       00 00 01 00 
       DD 5A 04 98 
       01 00       
044AD2 01 00 00 10 0318*   	dl 1, 16, 16, 256, fn_turret_224, 409
       00 00 10 00 
       00 00 01 00 
       F6 5A 04 99 
       01 00       
044AE4 01 00 00 10 0319*   	dl 1, 16, 16, 256, fn_turret_232, 410
       00 00 10 00 
       00 00 01 00 
       0F 5B 04 9A 
       01 00       
044AF6 01 00 00 10 0320*   	dl 1, 16, 16, 256, fn_turret_240, 411
       00 00 10 00 
       00 00 01 00 
       28 5B 04 9B 
       01 00       
044B08 01 00 00 10 0321*   	dl 1, 16, 16, 256, fn_turret_248, 412
       00 00 10 00 
       00 00 01 00 
       41 5B 04 9C 
       01 00       
044B1A             0322*   
044B1A             0323*   ; files_list: ; filename:
044B1A 73 70 72 69 0324*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
044B2F 73 70 72 69 0325*   fn_crater_0: db "sprites/crater_0.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 30 
       2E 72 67 62 
       61 32 00    
044B46 73 70 72 69 0326*   fn_crater_1: db "sprites/crater_1.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 31 
       2E 72 67 62 
       61 32 00    
044B5D 73 70 72 69 0327*   fn_crater_2: db "sprites/crater_2.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 32 
       2E 72 67 62 
       61 32 00    
044B74 73 70 72 69 0328*   fn_crater_3: db "sprites/crater_3.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 33 
       2E 72 67 62 
       61 32 00    
044B8B 73 70 72 69 0329*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
044BA5 73 70 72 69 0330*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
044BBF 73 70 72 69 0331*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
044BD9 73 70 72 69 0332*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
044BF3 73 70 72 69 0333*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
044C0D 73 70 72 69 0334*   fn_fireball_2_000: db "sprites/fireball_2_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044C2A 73 70 72 69 0335*   fn_fireball_2_008: db "sprites/fireball_2_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044C47 73 70 72 69 0336*   fn_fireball_2_016: db "sprites/fireball_2_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044C64 73 70 72 69 0337*   fn_fireball_2_024: db "sprites/fireball_2_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044C81 73 70 72 69 0338*   fn_fireball_2_032: db "sprites/fireball_2_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044C9E 73 70 72 69 0339*   fn_fireball_2_040: db "sprites/fireball_2_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044CBB 73 70 72 69 0340*   fn_fireball_2_048: db "sprites/fireball_2_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044CD8 73 70 72 69 0341*   fn_fireball_2_056: db "sprites/fireball_2_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044CF5 73 70 72 69 0342*   fn_fireball_2_064: db "sprites/fireball_2_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044D12 73 70 72 69 0343*   fn_fireball_2_072: db "sprites/fireball_2_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044D2F 73 70 72 69 0344*   fn_fireball_2_080: db "sprites/fireball_2_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044D4C 73 70 72 69 0345*   fn_fireball_2_088: db "sprites/fireball_2_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044D69 73 70 72 69 0346*   fn_fireball_2_096: db "sprites/fireball_2_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044D86 73 70 72 69 0347*   fn_fireball_2_104: db "sprites/fireball_2_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044DA3 73 70 72 69 0348*   fn_fireball_2_112: db "sprites/fireball_2_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
044DC0 73 70 72 69 0349*   fn_fireball_2_120: db "sprites/fireball_2_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044DDD 73 70 72 69 0350*   fn_fireball_2_128: db "sprites/fireball_2_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
044DFA 73 70 72 69 0351*   fn_fireball_2_136: db "sprites/fireball_2_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
044E17 73 70 72 69 0352*   fn_fireball_2_144: db "sprites/fireball_2_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044E34 73 70 72 69 0353*   fn_fireball_2_152: db "sprites/fireball_2_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
044E51 73 70 72 69 0354*   fn_fireball_2_160: db "sprites/fireball_2_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
044E6E 73 70 72 69 0355*   fn_fireball_2_168: db "sprites/fireball_2_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044E8B 73 70 72 69 0356*   fn_fireball_2_176: db "sprites/fireball_2_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044EA8 73 70 72 69 0357*   fn_fireball_2_184: db "sprites/fireball_2_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
044EC5 73 70 72 69 0358*   fn_fireball_2_192: db "sprites/fireball_2_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
044EE2 73 70 72 69 0359*   fn_fireball_2_200: db "sprites/fireball_2_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044EFF 73 70 72 69 0360*   fn_fireball_2_208: db "sprites/fireball_2_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
044F1C 73 70 72 69 0361*   fn_fireball_2_216: db "sprites/fireball_2_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044F39 73 70 72 69 0362*   fn_fireball_2_224: db "sprites/fireball_2_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
044F56 73 70 72 69 0363*   fn_fireball_2_232: db "sprites/fireball_2_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044F73 73 70 72 69 0364*   fn_fireball_2_240: db "sprites/fireball_2_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
044F90 73 70 72 69 0365*   fn_fireball_2_248: db "sprites/fireball_2_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044FAD 73 70 72 69 0366*   fn_fireball_3_000: db "sprites/fireball_3_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044FCA 73 70 72 69 0367*   fn_fireball_3_008: db "sprites/fireball_3_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044FE7 73 70 72 69 0368*   fn_fireball_3_016: db "sprites/fireball_3_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045004 73 70 72 69 0369*   fn_fireball_3_024: db "sprites/fireball_3_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045021 73 70 72 69 0370*   fn_fireball_3_032: db "sprites/fireball_3_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
04503E 73 70 72 69 0371*   fn_fireball_3_040: db "sprites/fireball_3_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
04505B 73 70 72 69 0372*   fn_fireball_3_048: db "sprites/fireball_3_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045078 73 70 72 69 0373*   fn_fireball_3_056: db "sprites/fireball_3_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045095 73 70 72 69 0374*   fn_fireball_3_064: db "sprites/fireball_3_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0450B2 73 70 72 69 0375*   fn_fireball_3_072: db "sprites/fireball_3_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0450CF 73 70 72 69 0376*   fn_fireball_3_080: db "sprites/fireball_3_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0450EC 73 70 72 69 0377*   fn_fireball_3_088: db "sprites/fireball_3_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045109 73 70 72 69 0378*   fn_fireball_3_096: db "sprites/fireball_3_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045126 73 70 72 69 0379*   fn_fireball_3_104: db "sprites/fireball_3_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045143 73 70 72 69 0380*   fn_fireball_3_112: db "sprites/fireball_3_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045160 73 70 72 69 0381*   fn_fireball_3_120: db "sprites/fireball_3_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04517D 73 70 72 69 0382*   fn_fireball_3_128: db "sprites/fireball_3_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
04519A 73 70 72 69 0383*   fn_fireball_3_136: db "sprites/fireball_3_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0451B7 73 70 72 69 0384*   fn_fireball_3_144: db "sprites/fireball_3_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0451D4 73 70 72 69 0385*   fn_fireball_3_152: db "sprites/fireball_3_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0451F1 73 70 72 69 0386*   fn_fireball_3_160: db "sprites/fireball_3_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04520E 73 70 72 69 0387*   fn_fireball_3_168: db "sprites/fireball_3_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
04522B 73 70 72 69 0388*   fn_fireball_3_176: db "sprites/fireball_3_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045248 73 70 72 69 0389*   fn_fireball_3_184: db "sprites/fireball_3_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045265 73 70 72 69 0390*   fn_fireball_3_192: db "sprites/fireball_3_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045282 73 70 72 69 0391*   fn_fireball_3_200: db "sprites/fireball_3_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04529F 73 70 72 69 0392*   fn_fireball_3_208: db "sprites/fireball_3_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0452BC 73 70 72 69 0393*   fn_fireball_3_216: db "sprites/fireball_3_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0452D9 73 70 72 69 0394*   fn_fireball_3_224: db "sprites/fireball_3_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0452F6 73 70 72 69 0395*   fn_fireball_3_232: db "sprites/fireball_3_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045313 73 70 72 69 0396*   fn_fireball_3_240: db "sprites/fireball_3_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045330 73 70 72 69 0397*   fn_fireball_3_248: db "sprites/fireball_3_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
04534D 73 70 72 69 0398*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
045363 73 70 72 69 0399*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
045379 73 70 72 69 0400*   fn_lightning_h_0: db "sprites/lightning_h_0.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       30 2E 72 67 
       62 61 32 00 
045395 73 70 72 69 0401*   fn_lightning_h_1: db "sprites/lightning_h_1.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       31 2E 72 67 
       62 61 32 00 
0453B1 73 70 72 69 0402*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
0453C3 73 70 72 69 0403*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0453DC 73 70 72 69 0404*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0453F5 73 70 72 69 0405*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
04540E 73 70 72 69 0406*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045427 73 70 72 69 0407*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
045440 73 70 72 69 0408*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045459 73 70 72 69 0409*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045472 73 70 72 69 0410*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04548B 73 70 72 69 0411*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0454A4 73 70 72 69 0412*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0454BD 73 70 72 69 0413*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0454D6 73 70 72 69 0414*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0454EF 73 70 72 69 0415*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045508 73 70 72 69 0416*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045521 73 70 72 69 0417*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
04553A 73 70 72 69 0418*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045553 73 70 72 69 0419*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
04556C 73 70 72 69 0420*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045585 73 70 72 69 0421*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
04559E 73 70 72 69 0422*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0455B7 73 70 72 69 0423*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0455D0 73 70 72 69 0424*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0455E9 73 70 72 69 0425*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045602 73 70 72 69 0426*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04561B 73 70 72 69 0427*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045634 73 70 72 69 0428*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04564D 73 70 72 69 0429*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045666 73 70 72 69 0430*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
04567F 73 70 72 69 0431*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045698 73 70 72 69 0432*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0456B1 73 70 72 69 0433*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0456CA 73 70 72 69 0434*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0456E3 73 70 72 69 0435*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
0456F9 73 70 72 69 0436*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
04570F 73 70 72 69 0437*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
045725 73 70 72 69 0438*   fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
04573E 73 70 72 69 0439*   fn_test_stripes: db "sprites/test_stripes.rgba2",0
       74 65 73 2F 
       74 65 73 74 
       5F 73 74 72 
       69 70 65 73 
       2E 72 67 62 
       61 32 00    
045759 73 70 72 69 0440*   fn_tile_blank: db "sprites/tile_blank.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 62 6C 61 
       6E 6B 2E 72 
       67 62 61 32 
       00          
045772 73 70 72 69 0441*   fn_tile_pad_0: db "sprites/tile_pad_0.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 30 2E 72 
       67 62 61 32 
       00          
04578B 73 70 72 69 0442*   fn_tile_pad_1: db "sprites/tile_pad_1.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 31 2E 72 
       67 62 61 32 
       00          
0457A4 73 70 72 69 0443*   fn_tile_pad_2: db "sprites/tile_pad_2.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 32 2E 72 
       67 62 61 32 
       00          
0457BD 73 70 72 69 0444*   fn_tile_pad_3: db "sprites/tile_pad_3.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 33 2E 72 
       67 62 61 32 
       00          
0457D6 73 70 72 69 0445*   fn_tile_pad_4: db "sprites/tile_pad_4.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 34 2E 72 
       67 62 61 32 
       00          
0457EF 73 70 72 69 0446*   fn_tile_pad_5: db "sprites/tile_pad_5.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 35 2E 72 
       67 62 61 32 
       00          
045808 73 70 72 69 0447*   fn_tile_pad_6: db "sprites/tile_pad_6.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 36 2E 72 
       67 62 61 32 
       00          
045821 73 70 72 69 0448*   fn_tile_pad_7: db "sprites/tile_pad_7.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 37 2E 72 
       67 62 61 32 
       00          
04583A 73 70 72 69 0449*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
045853 73 70 72 69 0450*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
04586C 73 70 72 69 0451*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045885 73 70 72 69 0452*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
04589E 73 70 72 69 0453*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0458B7 73 70 72 69 0454*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0458D0 73 70 72 69 0455*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0458E9 73 70 72 69 0456*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045902 73 70 72 69 0457*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
04591B 73 70 72 69 0458*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
045934 73 70 72 69 0459*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
04594D 73 70 72 69 0460*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045966 73 70 72 69 0461*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
04597F 73 70 72 69 0462*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045998 73 70 72 69 0463*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0459B1 73 70 72 69 0464*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0459CA 73 70 72 69 0465*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0459E3 73 70 72 69 0466*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0459FC 73 70 72 69 0467*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045A15 73 70 72 69 0468*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045A2E 73 70 72 69 0469*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045A47 73 70 72 69 0470*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045A60 73 70 72 69 0471*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045A79 73 70 72 69 0472*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045A92 73 70 72 69 0473*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045AAB 73 70 72 69 0474*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045AC4 73 70 72 69 0475*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045ADD 73 70 72 69 0476*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045AF6 73 70 72 69 0477*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045B0F 73 70 72 69 0478*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045B28 73 70 72 69 0479*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045B41 73 70 72 69 0480*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045B5A             0055        include "images_ui.inc"
045B5A             0001*   ; Generated by make_images.py
045B5A             0002*   
045B5A             0003*   ui_num_images: equ 43
045B5A             0004*   
045B5A             0005*   ; buffer_ids:
045B5A             0006*   BUF_BAR_H_0: equ 0
045B5A             0007*   BUF_BAR_H_1: equ 1
045B5A             0008*   BUF_BAR_H_2: equ 2
045B5A             0009*   BUF_BAR_V_0: equ 3
045B5A             0010*   BUF_BAR_V_1: equ 4
045B5A             0011*   BUF_BAR_V_2: equ 5
045B5A             0012*   BUF_BEZEL_L: equ 6
045B5A             0013*   BUF_BEZEL_R: equ 7
045B5A             0014*   BUF_CREDITS: equ 8
045B5A             0015*   BUF_CTL_PANEL_L: equ 9
045B5A             0016*   BUF_CTL_PANEL_R: equ 10
045B5A             0017*   BUF_JERRY_CAN: equ 11
045B5A             0018*   BUF_MFD_ARMS: equ 12
045B5A             0019*   BUF_MFD_BEZEL: equ 13
045B5A             0020*   BUF_MFD_BG: equ 14
045B5A             0021*   BUF_MFD_GUN_0: equ 15
045B5A             0022*   BUF_MFD_GUN_1: equ 16
045B5A             0023*   BUF_MFD_GUN_2: equ 17
045B5A             0024*   BUF_MFD_GUN_3: equ 18
045B5A             0025*   BUF_MFD_GUN_4: equ 19
045B5A             0026*   BUF_MFD_GUN_5: equ 20
045B5A             0027*   BUF_MFD_MAVERICK_0: equ 21
045B5A             0028*   BUF_MFD_MAVERICK_1: equ 22
045B5A             0029*   BUF_MFD_MAVERICK_2: equ 23
045B5A             0030*   BUF_MFD_MAVERICK_3: equ 24
045B5A             0031*   BUF_MFD_MAVERICK_4: equ 25
045B5A             0032*   BUF_MFD_MAVERICK_5: equ 26
045B5A             0033*   BUF_MFD_SIDEWINDER_0: equ 27
045B5A             0034*   BUF_MFD_SIDEWINDER_1: equ 28
045B5A             0035*   BUF_MFD_SIDEWINDER_2: equ 29
045B5A             0036*   BUF_MFD_SIDEWINDER_3: equ 30
045B5A             0037*   BUF_MFD_SIDEWINDER_4: equ 31
045B5A             0038*   BUF_MFD_SIDEWINDER_5: equ 32
045B5A             0039*   BUF_MFD_SPARROW_0: equ 33
045B5A             0040*   BUF_MFD_SPARROW_1: equ 34
045B5A             0041*   BUF_MFD_SPARROW_2: equ 35
045B5A             0042*   BUF_MFD_SPARROW_3: equ 36
045B5A             0043*   BUF_MFD_SPARROW_4: equ 37
045B5A             0044*   BUF_MFD_SPARROW_5: equ 38
045B5A             0045*   BUF_POWER: equ 39
045B5A             0046*   BUF_SHIELD: equ 40
045B5A             0047*   BUF_SPLASH_BG: equ 41
045B5A             0048*   BUF_SPLASH_LOGO: equ 42
045B5A             0049*   
045B5A             0050*   ui_image_list: ; type; width; height; size; filename; bufferId:
045B5A 01 00 00 80 0051*   	dl 1, 128, 8, 1024, fn_bar_h_0, 0
       00 00 08 00 
       00 00 04 00 
       60 5E 04 00 
       00 00       
045B6C 01 00 00 80 0052*   	dl 1, 128, 8, 1024, fn_bar_h_1, 1
       00 00 08 00 
       00 00 04 00 
       71 5E 04 01 
       00 00       
045B7E 01 00 00 80 0053*   	dl 1, 128, 8, 1024, fn_bar_h_2, 2
       00 00 08 00 
       00 00 04 00 
       82 5E 04 02 
       00 00       
045B90 01 00 00 08 0054*   	dl 1, 8, 128, 1024, fn_bar_v_0, 3
       00 00 80 00 
       00 00 04 00 
       93 5E 04 03 
       00 00       
045BA2 01 00 00 08 0055*   	dl 1, 8, 128, 1024, fn_bar_v_1, 4
       00 00 80 00 
       00 00 04 00 
       A4 5E 04 04 
       00 00       
045BB4 01 00 00 08 0056*   	dl 1, 8, 128, 1024, fn_bar_v_2, 5
       00 00 80 00 
       00 00 04 00 
       B5 5E 04 05 
       00 00       
045BC6 01 00 00 80 0057*   	dl 1, 128, 304, 38912, fn_bezel_l, 6
       00 00 30 01 
       00 00 98 00 
       C6 5E 04 06 
       00 00       
045BD8 01 00 00 80 0058*   	dl 1, 128, 304, 38912, fn_bezel_r, 7
       00 00 30 01 
       00 00 98 00 
       D7 5E 04 07 
       00 00       
045BEA 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_credits, 8
       00 00 10 00 
       00 00 01 00 
       E8 5E 04 08 
       00 00       
045BFC 01 00 00 80 0060*   	dl 1, 128, 128, 16384, fn_ctl_panel_l, 9
       00 00 80 00 
       00 00 40 00 
       F9 5E 04 09 
       00 00       
045C0E 01 00 00 80 0061*   	dl 1, 128, 128, 16384, fn_ctl_panel_r, 10
       00 00 80 00 
       00 00 40 00 
       0E 5F 04 0A 
       00 00       
045C20 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_jerry_can, 11
       00 00 10 00 
       00 00 01 00 
       23 5F 04 0B 
       00 00       
045C32 01 00 00 24 0063*   	dl 1, 36, 18, 648, fn_mfd_arms, 12
       00 00 12 00 
       00 88 02 00 
       36 5F 04 0C 
       00 00       
045C44 01 00 00 60 0064*   	dl 1, 96, 96, 9216, fn_mfd_bezel, 13
       00 00 60 00 
       00 00 24 00 
       48 5F 04 0D 
       00 00       
045C56 01 00 00 40 0065*   	dl 1, 64, 64, 4096, fn_mfd_bg, 14
       00 00 40 00 
       00 00 10 00 
       5B 5F 04 0E 
       00 00       
045C68 01 00 00 01 0066*   	dl 1, 1, 6, 6, fn_mfd_gun_0, 15
       00 00 06 00 
       00 06 00 00 
       6B 5F 04 0F 
       00 00       
045C7A 01 00 00 01 0067*   	dl 1, 1, 6, 6, fn_mfd_gun_1, 16
       00 00 06 00 
       00 06 00 00 
       7E 5F 04 10 
       00 00       
045C8C 01 00 00 01 0068*   	dl 1, 1, 6, 6, fn_mfd_gun_2, 17
       00 00 06 00 
       00 06 00 00 
       91 5F 04 11 
       00 00       
045C9E 01 00 00 01 0069*   	dl 1, 1, 6, 6, fn_mfd_gun_3, 18
       00 00 06 00 
       00 06 00 00 
       A4 5F 04 12 
       00 00       
045CB0 01 00 00 01 0070*   	dl 1, 1, 6, 6, fn_mfd_gun_4, 19
       00 00 06 00 
       00 06 00 00 
       B7 5F 04 13 
       00 00       
045CC2 01 00 00 01 0071*   	dl 1, 1, 6, 6, fn_mfd_gun_5, 20
       00 00 06 00 
       00 06 00 00 
       CA 5F 04 14 
       00 00       
045CD4 01 00 00 04 0072*   	dl 1, 4, 6, 24, fn_mfd_maverick_0, 21
       00 00 06 00 
       00 18 00 00 
       DD 5F 04 15 
       00 00       
045CE6 01 00 00 04 0073*   	dl 1, 4, 6, 24, fn_mfd_maverick_1, 22
       00 00 06 00 
       00 18 00 00 
       F5 5F 04 16 
       00 00       
045CF8 01 00 00 04 0074*   	dl 1, 4, 6, 24, fn_mfd_maverick_2, 23
       00 00 06 00 
       00 18 00 00 
       0D 60 04 17 
       00 00       
045D0A 01 00 00 04 0075*   	dl 1, 4, 6, 24, fn_mfd_maverick_3, 24
       00 00 06 00 
       00 18 00 00 
       25 60 04 18 
       00 00       
045D1C 01 00 00 04 0076*   	dl 1, 4, 6, 24, fn_mfd_maverick_4, 25
       00 00 06 00 
       00 18 00 00 
       3D 60 04 19 
       00 00       
045D2E 01 00 00 04 0077*   	dl 1, 4, 6, 24, fn_mfd_maverick_5, 26
       00 00 06 00 
       00 18 00 00 
       55 60 04 1A 
       00 00       
045D40 01 00 00 03 0078*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_0, 27
       00 00 06 00 
       00 12 00 00 
       6D 60 04 1B 
       00 00       
045D52 01 00 00 03 0079*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_1, 28
       00 00 06 00 
       00 12 00 00 
       87 60 04 1C 
       00 00       
045D64 01 00 00 03 0080*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_2, 29
       00 00 06 00 
       00 12 00 00 
       A1 60 04 1D 
       00 00       
045D76 01 00 00 03 0081*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_3, 30
       00 00 06 00 
       00 12 00 00 
       BB 60 04 1E 
       00 00       
045D88 01 00 00 03 0082*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_4, 31
       00 00 06 00 
       00 12 00 00 
       D5 60 04 1F 
       00 00       
045D9A 01 00 00 03 0083*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_5, 32
       00 00 06 00 
       00 12 00 00 
       EF 60 04 20 
       00 00       
045DAC 01 00 00 03 0084*   	dl 1, 3, 7, 21, fn_mfd_sparrow_0, 33
       00 00 07 00 
       00 15 00 00 
       09 61 04 21 
       00 00       
045DBE 01 00 00 03 0085*   	dl 1, 3, 7, 21, fn_mfd_sparrow_1, 34
       00 00 07 00 
       00 15 00 00 
       20 61 04 22 
       00 00       
045DD0 01 00 00 03 0086*   	dl 1, 3, 7, 21, fn_mfd_sparrow_2, 35
       00 00 07 00 
       00 15 00 00 
       37 61 04 23 
       00 00       
045DE2 01 00 00 03 0087*   	dl 1, 3, 7, 21, fn_mfd_sparrow_3, 36
       00 00 07 00 
       00 15 00 00 
       4E 61 04 24 
       00 00       
045DF4 01 00 00 03 0088*   	dl 1, 3, 7, 21, fn_mfd_sparrow_4, 37
       00 00 07 00 
       00 15 00 00 
       65 61 04 25 
       00 00       
045E06 01 00 00 03 0089*   	dl 1, 3, 7, 21, fn_mfd_sparrow_5, 38
       00 00 07 00 
       00 15 00 00 
       7C 61 04 26 
       00 00       
045E18 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_power, 39
       00 00 10 00 
       00 00 01 00 
       93 61 04 27 
       00 00       
045E2A 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_shield, 40
       00 00 10 00 
       00 00 01 00 
       A2 61 04 28 
       00 00       
045E3C 01 00 00 40 0092*   	dl 1, 320, 240, 76800, fn_splash_bg, 41
       01 00 F0 00 
       00 00 2C 01 
       B2 61 04 29 
       00 00       
045E4E 01 00 00 A0 0093*   	dl 1, 160, 106, 16960, fn_splash_logo, 42
       00 00 6A 00 
       00 40 42 00 
       C5 61 04 2A 
       00 00       
045E60             0094*   
045E60             0095*   ; files_list: ; filename:
045E60 75 69 2F 62 0096*   fn_bar_h_0: db "ui/bar_h_0.rgba2",0
       61 72 5F 68 
       5F 30 2E 72 
       67 62 61 32 
       00          
045E71 75 69 2F 62 0097*   fn_bar_h_1: db "ui/bar_h_1.rgba2",0
       61 72 5F 68 
       5F 31 2E 72 
       67 62 61 32 
       00          
045E82 75 69 2F 62 0098*   fn_bar_h_2: db "ui/bar_h_2.rgba2",0
       61 72 5F 68 
       5F 32 2E 72 
       67 62 61 32 
       00          
045E93 75 69 2F 62 0099*   fn_bar_v_0: db "ui/bar_v_0.rgba2",0
       61 72 5F 76 
       5F 30 2E 72 
       67 62 61 32 
       00          
045EA4 75 69 2F 62 0100*   fn_bar_v_1: db "ui/bar_v_1.rgba2",0
       61 72 5F 76 
       5F 31 2E 72 
       67 62 61 32 
       00          
045EB5 75 69 2F 62 0101*   fn_bar_v_2: db "ui/bar_v_2.rgba2",0
       61 72 5F 76 
       5F 32 2E 72 
       67 62 61 32 
       00          
045EC6 75 69 2F 62 0102*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
045ED7 75 69 2F 62 0103*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
045EE8 75 69 2F 63 0104*   fn_credits: db "ui/credits.rgba2",0
       72 65 64 69 
       74 73 2E 72 
       67 62 61 32 
       00          
045EF9 75 69 2F 63 0105*   fn_ctl_panel_l: db "ui/ctl_panel_l.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
045F0E 75 69 2F 63 0106*   fn_ctl_panel_r: db "ui/ctl_panel_r.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
045F23 75 69 2F 6A 0107*   fn_jerry_can: db "ui/jerry_can.rgba2",0
       65 72 72 79 
       5F 63 61 6E 
       2E 72 67 62 
       61 32 00    
045F36 75 69 2F 6D 0108*   fn_mfd_arms: db "ui/mfd_arms.rgba2",0
       66 64 5F 61 
       72 6D 73 2E 
       72 67 62 61 
       32 00       
045F48 75 69 2F 6D 0109*   fn_mfd_bezel: db "ui/mfd_bezel.rgba2",0
       66 64 5F 62 
       65 7A 65 6C 
       2E 72 67 62 
       61 32 00    
045F5B 75 69 2F 6D 0110*   fn_mfd_bg: db "ui/mfd_bg.rgba2",0
       66 64 5F 62 
       67 2E 72 67 
       62 61 32 00 
045F6B 75 69 2F 6D 0111*   fn_mfd_gun_0: db "ui/mfd_gun_0.rgba2",0
       66 64 5F 67 
       75 6E 5F 30 
       2E 72 67 62 
       61 32 00    
045F7E 75 69 2F 6D 0112*   fn_mfd_gun_1: db "ui/mfd_gun_1.rgba2",0
       66 64 5F 67 
       75 6E 5F 31 
       2E 72 67 62 
       61 32 00    
045F91 75 69 2F 6D 0113*   fn_mfd_gun_2: db "ui/mfd_gun_2.rgba2",0
       66 64 5F 67 
       75 6E 5F 32 
       2E 72 67 62 
       61 32 00    
045FA4 75 69 2F 6D 0114*   fn_mfd_gun_3: db "ui/mfd_gun_3.rgba2",0
       66 64 5F 67 
       75 6E 5F 33 
       2E 72 67 62 
       61 32 00    
045FB7 75 69 2F 6D 0115*   fn_mfd_gun_4: db "ui/mfd_gun_4.rgba2",0
       66 64 5F 67 
       75 6E 5F 34 
       2E 72 67 62 
       61 32 00    
045FCA 75 69 2F 6D 0116*   fn_mfd_gun_5: db "ui/mfd_gun_5.rgba2",0
       66 64 5F 67 
       75 6E 5F 35 
       2E 72 67 62 
       61 32 00    
045FDD 75 69 2F 6D 0117*   fn_mfd_maverick_0: db "ui/mfd_maverick_0.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       30 2E 72 67 
       62 61 32 00 
045FF5 75 69 2F 6D 0118*   fn_mfd_maverick_1: db "ui/mfd_maverick_1.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       31 2E 72 67 
       62 61 32 00 
04600D 75 69 2F 6D 0119*   fn_mfd_maverick_2: db "ui/mfd_maverick_2.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       32 2E 72 67 
       62 61 32 00 
046025 75 69 2F 6D 0120*   fn_mfd_maverick_3: db "ui/mfd_maverick_3.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       33 2E 72 67 
       62 61 32 00 
04603D 75 69 2F 6D 0121*   fn_mfd_maverick_4: db "ui/mfd_maverick_4.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       34 2E 72 67 
       62 61 32 00 
046055 75 69 2F 6D 0122*   fn_mfd_maverick_5: db "ui/mfd_maverick_5.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       35 2E 72 67 
       62 61 32 00 
04606D 75 69 2F 6D 0123*   fn_mfd_sidewinder_0: db "ui/mfd_sidewinder_0.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 30 2E 
       72 67 62 61 
       32 00       
046087 75 69 2F 6D 0124*   fn_mfd_sidewinder_1: db "ui/mfd_sidewinder_1.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 31 2E 
       72 67 62 61 
       32 00       
0460A1 75 69 2F 6D 0125*   fn_mfd_sidewinder_2: db "ui/mfd_sidewinder_2.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 32 2E 
       72 67 62 61 
       32 00       
0460BB 75 69 2F 6D 0126*   fn_mfd_sidewinder_3: db "ui/mfd_sidewinder_3.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 33 2E 
       72 67 62 61 
       32 00       
0460D5 75 69 2F 6D 0127*   fn_mfd_sidewinder_4: db "ui/mfd_sidewinder_4.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 34 2E 
       72 67 62 61 
       32 00       
0460EF 75 69 2F 6D 0128*   fn_mfd_sidewinder_5: db "ui/mfd_sidewinder_5.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 35 2E 
       72 67 62 61 
       32 00       
046109 75 69 2F 6D 0129*   fn_mfd_sparrow_0: db "ui/mfd_sparrow_0.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 30 
       2E 72 67 62 
       61 32 00    
046120 75 69 2F 6D 0130*   fn_mfd_sparrow_1: db "ui/mfd_sparrow_1.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 31 
       2E 72 67 62 
       61 32 00    
046137 75 69 2F 6D 0131*   fn_mfd_sparrow_2: db "ui/mfd_sparrow_2.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 32 
       2E 72 67 62 
       61 32 00    
04614E 75 69 2F 6D 0132*   fn_mfd_sparrow_3: db "ui/mfd_sparrow_3.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 33 
       2E 72 67 62 
       61 32 00    
046165 75 69 2F 6D 0133*   fn_mfd_sparrow_4: db "ui/mfd_sparrow_4.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 34 
       2E 72 67 62 
       61 32 00    
04617C 75 69 2F 6D 0134*   fn_mfd_sparrow_5: db "ui/mfd_sparrow_5.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 35 
       2E 72 67 62 
       61 32 00    
046193 75 69 2F 70 0135*   fn_power: db "ui/power.rgba2",0
       6F 77 65 72 
       2E 72 67 62 
       61 32 00    
0461A2 75 69 2F 73 0136*   fn_shield: db "ui/shield.rgba2",0
       68 69 65 6C 
       64 2E 72 67 
       62 61 32 00 
0461B2 75 69 2F 73 0137*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
0461C5 75 69 2F 73 0138*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
0461DA             0056        include "levels.inc"
0461DA             0001*   ; tileset indices
0461DA             0002*   tiles_dg: equ 0
0461DA             0003*   ; tiles_xevious: equ 1
0461DA 00 00 00    0004*   tileset_ptr_idx: dl 0
0461DD             0005*   tileset_ptrs:
0461DD             0006*       ; dl tiles_xevious_levels
0461DD EE 62 04    0007*       dl tileset_00_levels
0461E0 00 00 00    0008*   tileset_ptrs_end: dl 0 ; list terminator
0461E3             0009*   
0461E3             0010*   ; get a pointer to the current tileset
0461E3             0011*   ; inputs: tileset_ptr_idx
0461E3             0012*   ; returns: ix = pointer to tileset levels lut
0461E3             0013*   get_tileset_ptr:
0461E3 3A DA 61 04 0014*       ld a,(tileset_ptr_idx)
0461E7 57          0015*       ld d,a ; d = tileset index
0461E8 1E 03       0016*       ld e,3 ; three bytes per index record
0461EA ED 5C       0017*       mlt de ; offset into tileset_ptrs lut
0461EC DD 21 DD 61 0018*       ld ix,tileset_ptrs
       04          
0461F1 DD 19       0019*       add ix,de ; ix = pointer to tileset_ptrs record
0461F3 C9          0020*       ret
0461F4             0021*   ; end get_tileset_ptr
0461F4             0022*   
0461F4             0023*   ; intialize a tileset
0461F4             0024*   ; inputs: a = index into tileset_ptrs
0461F4             0025*   init_tileset:
0461F4 32 DA 61 04 0026*       ld (tileset_ptr_idx),a ; store new tileset index
0461F8 CD E3 61 04 0027*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
0461FC DD 37 00    0028*       ld ix,(ix) ; ix = pointer to tileset levels lut
0461FF DD 7E FF    0029*       ld a,(ix-1) ; number of levels in the tileset
046202 32 32 62 04 0030*       ld (num_levels),a
046206 AF          0031*       xor a ; reset current level to zero
046207 32 31 62 04 0032*       ld (cur_level),a
04620B C3 6B 62 04 0033*       jp init_level
04620F             0034*   ; end init_tileset
04620F             0035*   
04620F             0036*   next_tileset:
04620F 21 DA 61 04 0037*       ld hl,tileset_ptr_idx
046213 34          0038*       inc (hl) ; bump to next index
046214 CD E3 61 04 0039*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
046218 DD 27 00    0040*       ld hl,(ix) ; ix = pointer to tileset levels lut
04621B             0041*       sign_hlu ; check for list terminator (0)
04621B 19          0001*M1     add hl,de ; 1 cycle
04621C B7          0002*M1     or a ; clear flags ; 1 cycle
04621D ED 52       0003*M1     sbc hl,de ; 2 cycles
04621F             0004*M1     ; 4 cycles total
04621F C2 2D 62 04 0042*       jp nz,@F ; not end of list
046223 3E FF       0043*       ld a,-1 ; will wrap around to zero on the next iteration
046225 32 DA 61 04 0044*       ld (tileset_ptr_idx),a
046229 C3 0F 62 04 0045*       jp next_tileset ; try again
04622D             0046*   @@:
04622D C3 F4 61 04 0047*       jp init_tileset
046231             0048*   ; end next_tileset
046231             0049*   
046231 00          0050*   cur_level: db 0
046232 00          0051*   num_levels: db 0
046233             0052*   
046233             0053*   ; get a pointer to the current level lookup record
046233             0054*   ; inputs: tileset_ptr_idx, cur_level
046233             0055*   ; returns: ix = pointer to level definition
046233             0056*   get_level_ptr:
046233 CD E3 61 04 0057*       call get_tileset_ptr
046237 DD 37 00    0058*       ld ix,(ix) ; ix = pointer to tileset levels lut
04623A 3A 31 62 04 0059*       ld a,(cur_level)
04623E 57          0060*       ld d,a ; d = level index
04623F 1E 03       0061*       ld e,3 ; three bytes per level record
046241 ED 5C       0062*       mlt de ; offset into tileset levels lut
046243 DD 19       0063*       add ix,de ; ix = pointer to level record
046245 C9          0064*       ret
046246             0065*   ; end get_level_ptr
046246             0066*   
046246             0067*   ; advance to the next level in the current tileset
046246             0068*   ; inputs: tileset_ptr_idx, cur_level
046246             0069*   next_level:
046246             0070*   ; update starting score
046246 2A 0E 79 04 0071*       ld hl,(player_score)
04624A 22 14 79 04 0072*       ld (player_starting_score),hl
04624E             0073*   ; set up pointers to next map definition
04624E 21 31 62 04 0074*       ld hl,cur_level
046252 34          0075*       inc (hl) ; bump to next level
046253 CD 33 62 04 0076*       call get_level_ptr ; ix points to current level lookup record
046257 DD 27 00    0077*       ld hl,(ix) ; hl = pointer to next level lookup record
04625A             0078*       sign_hlu ; check for list terminator (0)
04625A 19          0001*M1     add hl,de ; 1 cycle
04625B B7          0002*M1     or a ; clear flags ; 1 cycle
04625C ED 52       0003*M1     sbc hl,de ; 2 cycles
04625E             0004*M1     ; 4 cycles total
04625E C2 6B 62 04 0079*       jp nz,@F ; not end of list
046262 AF          0080*       xor a ; reset level to zero
046263 32 31 62 04 0081*       ld (cur_level),a
046267 C3 0F 62 04 0082*       jp next_tileset ; try next tileset
04626B             0083*   @@: ; fall through to init_level
04626B             0084*   ; end next_level
04626B             0085*   
04626B             0086*   ; inputs: ix pointed to tileset level definition
04626B             0087*   init_level:
04626B             0088*   ; set pointers
04626B CD 33 62 04 0089*       call get_level_ptr ; ix points to level lookup record
04626F DD 37 00    0090*       ld ix,(ix) ; ix points to level definition
046272             0091*   ; set tiles_cols
046272 DD 7E 00    0092*       ld a,(ix+0)
046275 32 68 84 04 0093*       ld (tiles_cols),a
046279             0094*   ; set tiles_row counter
046279 DD 7E 01    0095*       ld a,(ix+1)
04627C 32 65 84 04 0096*       ld (tiles_row),a
046280             0097*   ; set cur_baseBufferId
046280 DD 27 04    0098*       ld hl,(ix+4)
046283 22 69 84 04 0099*       ld (cur_baseBufferId),hl
046287             0100*   ; set tiles_row_defs
046287 ED 32 07    0101*       lea ix,ix+7 ; ix points to definition of first tile of first row
04628A DD 22 62 84 0102*       ld (tiles_row_defs),ix
       04          
04628F             0103*   ; reset tile rows and plot coordinates
04628F 21 FF FF FF 0104*       ld hl,-1
046293 22 74 85 04 0105*       ld (bg_y_plot),hl
046297 23          0106*       inc hl
046298 22 65 84 04 0107*       ld (tiles_row),hl
04629C 22 6D 84 04 0108*       ld (tiles_x_plot),hl
0462A0 21 F1 FF FF 0109*       ld hl,-15
0462A4 22 71 84 04 0110*       ld (tiles_y_plot),hl
0462A8             0111*   ; print_level:
0462A8             0112*   level_x: equ 48
0462A8             0113*   level_y: equ 0
0462A8 0E 30       0114*       ld c,level_x
0462AA 06 00       0115*       ld b,level_y
0462AC CD 73 12 04 0116*       call vdu_move_cursor
0462B0 CD 5C 00 04 0117*       call printInline
0462B4 4C 65 76 65 0118*       asciz "Level: "
       6C 3A 20 00 
0462BC 3A 31 62 04 0119*       ld a,(cur_level)
0462C0 CD 0B 89 04 0120*       call printHexA
0462C4             0121*   ; draw initial background tiles
0462C4 21 00 04 00 0122*       ld hl,BUF_BG_STARS_0
0462C8 CD 7C 13 04 0123*       call vdu_buff_select
0462CC 01 00 00 00 0124*       ld bc,0
0462D0 11 00 00 00 0125*       ld de,field_top
0462D4 CD D8 16 04 0126*       call vdu_plot_bmp
0462D8 21 04 04 00 0127*       ld hl,BUF_BG_STARS_4
0462DC CD 7C 13 04 0128*       call vdu_buff_select
0462E0 01 00 00 00 0129*       ld bc,0
0462E4 11 00 01 00 0130*       ld de,field_top+256
0462E8 CD D8 16 04 0131*       call vdu_plot_bmp
0462EC C9          0132*       ret
0462ED             0133*   ; end init_level
0462ED             0057        include "levels_tileset_0.inc"
0462ED             0001*   ; Generated from tiles/dg/dg0_03.tmx
0462ED             0002*   
0462ED 01          0003*   tileset_00_num_levels: db 1
0462EE             0004*   
0462EE             0005*   tileset_00_levels:
0462EE F4 62 04    0006*   	dl tileset_00_level_00
0462F1 00 00 00    0007*   	dl 0 ; list terminator
0462F4             0008*   
0462F4             0009*   tileset_00_level_00: ; Level 0
0462F4 10          0010*   	db 16          ; num cols
0462F5 00 01 00    0011*   	dl 256          ; num rows
0462F8 00 02 00    0012*   	dl 512 ; base bufferId
0462FB F8 F8 F8 F8 0013*   	db 248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248
       F8 F8 F8 F8 
       F8 F8 F8 F8 
       F8 F8 F8 F8 
04630B 00 00 00 00 0014*   	db 000,000,000,000,000,000,147,000,089,090,091,000,147,000,000,000
       00 00 93 00 
       59 5A 5B 00 
       93 00 00 00 
04631B 00 CE CF D0 0015*   	db 000,206,207,208,000,000,147,000,073,005,075,000,147,000,000,000
       00 00 93 00 
       49 05 4B 00 
       93 00 00 00 
04632B 81 BE 79 A7 0016*   	db 129,190,121,167,216,216,182,145,057,058,059,145,147,000,000,000
       D8 D8 B6 91 
       39 3A 3B 91 
       93 00 00 00 
04633B 00 AE AF B0 0017*   	db 000,174,175,176,000,206,183,208,000,000,000,206,207,207,208,000
       00 CE B7 D0 
       00 00 00 CE 
       CF CF D0 00 
04634B 00 00 83 00 0018*   	db 000,000,131,000,000,190,156,171,220,220,220,220,186,192,192,129
       00 BE 9C AB 
       DC DC DC DC 
       BA C0 C0 81 
04635B 00 00 83 00 0019*   	db 000,000,131,000,000,174,184,176,000,000,000,131,219,191,131,000
       00 AE B8 B0 
       00 00 00 83 
       DB BF 83 00 
04636B 00 CE CF D0 0020*   	db 000,206,207,208,000,000,215,000,000,000,000,131,187,191,131,000
       00 00 D7 00 
       00 00 00 83 
       BB BF 83 00 
04637B 81 BE 69 A7 0021*   	db 129,190,105,167,216,216,166,129,129,129,129,131,136,137,131,000
       D8 D8 A6 81 
       81 81 81 83 
       88 89 83 00 
04638B 00 AE AF B0 0022*   	db 000,174,175,176,000,000,131,000,000,000,000,131,134,135,131,000
       00 00 83 00 
       00 00 00 83 
       86 87 83 00 
04639B 00 00 83 00 0023*   	db 000,000,131,000,000,000,131,000,000,000,000,131,134,135,131,000
       00 00 83 00 
       00 00 00 83 
       86 87 83 00 
0463AB 00 00 83 00 0024*   	db 000,000,131,000,000,000,131,000,000,000,000,131,150,151,131,000
       00 00 83 00 
       00 00 00 83 
       96 97 83 00 
0463BB 00 CE CF D0 0025*   	db 000,206,207,208,000,000,131,000,000,000,000,131,150,151,131,000
       00 00 83 00 
       00 00 00 83 
       96 97 83 00 
0463CB 81 BE 79 A7 0026*   	db 129,190,121,167,216,216,231,216,216,216,216,168,154,155,131,000
       D8 D8 E7 D8 
       D8 D8 D8 A8 
       9A 9B 83 00 
0463DB 00 AE AF B0 0027*   	db 000,174,175,176,000,206,183,208,000,000,000,174,175,175,176,000
       00 CE B7 D0 
       00 00 00 AE 
       AF AF B0 00 
0463EB 00 00 83 00 0028*   	db 000,000,131,000,000,190,156,192,000,000,000,000,131,000,000,000
       00 BE 9C C0 
       00 00 00 00 
       83 00 00 00 
0463FB 00 00 83 00 0029*   	db 000,000,131,000,000,174,184,176,000,000,000,000,131,000,000,000
       00 AE B8 B0 
       00 00 00 00 
       83 00 00 00 
04640B 00 CE CF D0 0030*   	db 000,206,207,208,000,000,215,000,000,206,140,140,140,140,208,000
       00 00 D7 00 
       00 CE 8C 8C 
       8C 8C D0 00 
04641B 81 BE 79 A7 0031*   	db 129,190,121,167,216,216,166,000,000,140,081,082,083,084,140,129
       D8 D8 A6 00 
       00 8C 51 52 
       53 54 8C 81 
04642B 00 AE AF B0 0032*   	db 000,174,175,176,000,000,131,000,000,140,065,092,093,068,140,000
       00 00 83 00 
       00 8C 41 5C 
       5D 44 8C 00 
04643B 00 00 83 00 0033*   	db 000,000,131,000,000,000,131,129,129,140,049,076,077,052,140,000
       00 00 83 81 
       81 8C 31 4C 
       4D 34 8C 00 
04644B 00 00 83 00 0034*   	db 000,000,131,000,000,000,131,000,000,140,033,034,035,036,140,129
       00 00 83 00 
       00 8C 21 22 
       23 24 8C 81 
04645B 00 CE CF D0 0035*   	db 000,206,207,208,000,000,131,000,000,174,140,140,140,140,176,000
       00 00 83 00 
       00 AE 8C 8C 
       8C 8C B0 00 
04646B 81 BE 69 A7 0036*   	db 129,190,105,167,216,216,182,000,000,000,000,000,000,000,000,000
       D8 D8 B6 00 
       00 00 00 00 
       00 00 00 00 
04647B 00 AE AF B0 0037*   	db 000,174,175,176,000,206,183,208,000,000,000,000,000,000,000,000
       00 CE B7 D0 
       00 00 00 00 
       00 00 00 00 
04648B 00 00 83 00 0038*   	db 000,000,131,000,000,190,156,192,009,010,010,010,010,010,010,011
       00 BE 9C C0 
       09 0A 0A 0A 
       0A 0A 0A 0B 
04649B 00 00 83 00 0039*   	db 000,000,131,000,000,174,184,176,000,000,000,000,000,000,000,000
       00 AE B8 B0 
       00 00 00 00 
       00 00 00 00 
0464AB 00 CE CF D0 0040*   	db 000,206,207,208,000,000,215,145,145,081,082,088,083,084,145,145
       00 00 D7 91 
       91 51 52 58 
       53 54 91 91 
0464BB 81 BE 79 A7 0041*   	db 129,190,121,167,216,216,166,000,000,065,156,248,156,068,000,000
       D8 D8 A6 00 
       00 41 9C F8 
       9C 44 00 00 
0464CB 00 AE AF B4 0042*   	db 000,174,175,180,000,000,147,000,000,071,248,001,248,087,000,000
       00 00 93 00 
       00 47 F8 01 
       F8 57 00 00 
0464DB 00 00 00 D3 0043*   	db 000,000,000,211,000,000,147,000,000,049,156,248,156,052,000,000
       00 00 93 00 
       00 31 9C F8 
       9C 34 00 00 
0464EB 91 91 91 D3 0044*   	db 145,145,145,211,145,145,145,145,145,033,034,072,035,036,145,145
       91 91 91 91 
       91 21 22 48 
       23 24 91 91 
0464FB BF 93 98 D3 0045*   	db 191,147,152,211,153,147,191,191,191,147,191,191,191,147,191,191
       99 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
04650B BF 93 96 D3 0046*   	db 191,147,150,211,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
04651B BF 93 96 04 0047*   	db 191,147,150,004,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
04652B BF 93 96 04 0048*   	db 191,147,150,004,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
04653B BF 93 86 DB 0049*   	db 191,147,134,219,135,147,191,191,191,147,191,191,191,147,191,191
       87 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
04654B BF 93 8A DB 0050*   	db 191,147,138,219,139,147,191,191,191,147,191,191,191,147,191,191
       8B 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
04655B 91 91 91 DB 0051*   	db 145,145,145,219,145,145,145,145,145,145,145,145,145,145,145,145
       91 91 91 91 
       91 91 91 91 
       91 91 91 91 
04656B 00 83 00 DB 0052*   	db 000,131,000,219,000,131,000,000,000,131,000,000,000,131,000,000
       00 83 00 00 
       00 83 00 00 
       00 83 00 00 
04657B 00 83 00 DB 0053*   	db 000,131,000,219,000,131,000,000,000,131,000,000,000,131,000,000
       00 83 00 00 
       00 83 00 00 
       00 83 00 00 
04658B DC DC DC EC 0054*   	db 220,220,220,236,220,220,220,220,220,220,220,235,220,220,220,220
       DC DC DC DC 
       DC DC DC EB 
       DC DC DC DC 
04659B 00 83 00 00 0055*   	db 000,131,000,000,000,131,000,136,137,131,000,219,000,131,000,000
       00 83 00 88 
       89 83 00 DB 
       00 83 00 00 
0465AB 00 83 00 00 0056*   	db 000,131,000,000,000,131,000,134,135,131,000,219,000,131,000,000
       00 83 00 86 
       87 83 00 DB 
       00 83 00 00 
0465BB 00 83 00 00 0057*   	db 000,131,000,000,000,131,000,150,151,131,000,219,000,131,000,000
       00 83 00 96 
       97 83 00 DB 
       00 83 00 00 
0465CB 00 83 00 00 0058*   	db 000,131,000,000,000,131,000,154,155,131,000,187,000,131,000,000
       00 83 00 9A 
       9B 83 00 BB 
       00 83 00 00 
0465DB 81 81 81 81 0059*   	db 129,129,129,129,129,129,129,184,129,129,136,137,129,129,129,129
       81 81 81 B8 
       81 81 88 89 
       81 81 81 81 
0465EB BF BF D0 00 0060*   	db 191,191,208,000,000,206,191,215,191,191,134,135,009,010,010,011
       00 CE BF D7 
       BF BF 86 87 
       09 0A 0A 0B 
0465FB BF BF BF D0 0061*   	db 191,191,191,208,206,191,191,215,191,191,134,135,191,191,191,191
       CE BF BF D7 
       BF BF 86 87 
       BF BF BF BF 
04660B 59 5A 5B BF 0062*   	db 089,090,091,191,191,004,191,215,191,191,150,151,191,191,248,191
       BF 04 BF D7 
       BF BF 96 97 
       BF BF F8 BF 
04661B 49 05 4B BF 0063*   	db 073,005,075,191,191,004,167,200,191,191,150,151,191,248,001,248
       BF 04 A7 C8 
       BF BF 96 97 
       BF F8 01 F8 
04662B 39 3A 3B BF 0064*   	db 057,058,059,191,191,004,191,215,191,191,154,155,191,191,248,191
       BF 04 BF D7 
       BF BF 9A 9B 
       BF BF F8 BF 
04663B BF BF BF B0 0065*   	db 191,191,191,176,174,191,191,215,191,191,184,191,191,191,191,191
       AE BF BF D7 
       BF BF B8 BF 
       BF BF BF BF 
04664B BF BF B0 00 0066*   	db 191,191,176,000,000,174,191,165,216,216,232,216,216,216,216,216
       00 AE BF A5 
       D8 D8 E8 D8 
       D8 D8 D8 D8 
04665B 00 00 00 00 0067*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
04666B 81 81 81 81 0068*   	db 129,129,129,129,129,129,131,000,131,000,000,000,000,000,000,000
       81 81 83 00 
       83 00 00 00 
       00 00 00 00 
04667B 00 00 00 00 0069*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
04668B 00 00 00 00 0070*   	db 000,000,000,000,000,000,131,000,131,129,129,129,129,129,129,129
       00 00 83 00 
       83 81 81 81 
       81 81 81 81 
04669B 00 00 00 00 0071*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
0466AB 00 00 00 00 0072*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
0466BB 95 95 95 95 0073*   	db 149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149
       95 95 95 95 
       95 95 95 95 
       95 95 95 95 
0466CB 00 00 00 00 0074*   	db 000,000,000,000,000,206,191,191,191,208,000,000,000,000,000,000
       00 CE BF BF 
       BF D0 00 00 
       00 00 00 00 
0466DB BF BF BF BF 0075*   	db 191,191,191,191,191,191,089,090,091,191,191,191,191,191,191,191
       BF BF 59 5A 
       5B BF BF BF 
       BF BF BF BF 
0466EB BF BF BF BF 0076*   	db 191,191,191,191,191,191,073,005,075,191,191,191,191,191,191,191
       BF BF 49 05 
       4B BF BF BF 
       BF BF BF BF 
0466FB BF BF BF BF 0077*   	db 191,191,191,191,191,191,057,058,059,191,191,191,191,191,191,191
       BF BF 39 3A 
       3B BF BF BF 
       BF BF BF BF 
04670B 00 00 00 00 0078*   	db 000,000,000,000,000,174,191,191,191,176,000,000,000,000,000,000
       00 AE BF BF 
       BF B0 00 00 
       00 00 00 00 
04671B 85 85 85 85 0079*   	db 133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133
       85 85 85 85 
       85 85 85 85 
       85 85 85 85 
04672B 00 00 83 00 0080*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,000,147,000
       83 00 00 00 
       83 00 00 00 
       00 00 93 00 
04673B 00 00 83 00 0081*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,000,147,000
       83 00 00 00 
       83 00 00 00 
       00 00 93 00 
04674B 00 00 83 00 0082*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,206,207,208
       83 00 00 00 
       83 00 00 00 
       00 CE CF D0 
04675B 00 00 83 00 0083*   	db 000,000,131,000,131,000,000,000,131,000,000,000,206,191,248,191
       83 00 00 00 
       83 00 00 00 
       CE BF F8 BF 
04676B 81 81 81 81 0084*   	db 129,129,129,129,129,129,129,129,129,129,129,129,190,248,001,248
       81 81 81 81 
       81 81 81 81 
       BE F8 01 F8 
04677B 00 00 83 00 0085*   	db 000,000,131,000,131,000,000,000,131,000,000,000,174,191,248,191
       83 00 00 00 
       83 00 00 00 
       AE BF F8 BF 
04678B 00 00 83 00 0086*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,190,191,191
       83 00 00 00 
       83 00 00 00 
       00 BE BF BF 
04679B 00 00 83 00 0087*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,190,191,191
       83 00 00 00 
       83 00 00 00 
       00 BE BF BF 
0467AB 00 00 83 00 0088*   	db 000,000,131,000,131,000,000,000,131,000,000,000,206,191,191,191
       83 00 00 00 
       83 00 00 00 
       CE BF BF BF 
0467BB 00 CE 09 0A 0089*   	db 000,206,009,010,011,208,000,000,131,000,000,206,191,191,191,191
       0B D0 00 00 
       83 00 00 CE 
       BF BF BF BF 
0467CB BF BF 59 5A 0090*   	db 191,191,089,090,091,191,191,191,191,191,191,191,191,191,092,093
       5B BF BF BF 
       BF BF BF BF 
       BF BF 5C 5D 
0467DB BF BF 49 05 0091*   	db 191,191,073,005,075,191,191,191,191,191,191,191,191,191,076,077
       4B BF BF BF 
       BF BF BF BF 
       BF BF 4C 4D 
0467EB BF BF 39 3A 0092*   	db 191,191,057,058,059,191,191,191,191,191,191,191,191,191,191,191
       3B BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
0467FB 00 AE BF BF 0093*   	db 000,174,191,191,191,191,191,191,191,191,176,000,174,175,175,175
       BF BF BF BF 
       BF BF B0 00 
       AE AF AF AF 
04680B 00 00 83 00 0094*   	db 000,000,131,000,131,000,174,191,191,191,000,000,000,000,131,000
       83 00 AE BF 
       BF BF 00 00 
       00 00 83 00 
04681B 00 00 83 00 0095*   	db 000,000,131,000,131,000,000,191,191,191,000,000,000,000,131,000
       83 00 00 BF 
       BF BF 00 00 
       00 00 83 00 
04682B 00 00 83 00 0096*   	db 000,000,131,000,131,000,000,191,191,191,000,000,000,000,131,000
       83 00 00 BF 
       BF BF 00 00 
       00 00 83 00 
04683B 84 84 84 84 0097*   	db 132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132
       84 84 84 84 
       84 84 84 84 
       84 84 84 84 
04684B 00 00 00 00 0098*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
04685B 00 00 00 00 0099*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
04686B 00 00 00 00 0100*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
04687B 00 CE CF CF 0101*   	db 000,206,207,207,208,000,000,009,010,011,000,000,000,000,000,000
       D0 00 00 09 
       0A 0B 00 00 
       00 00 00 00 
04688B 00 BE 98 99 0102*   	db 000,190,152,153,192,000,000,191,248,191,000,000,000,000,000,000
       C0 00 00 BF 
       F8 BF 00 00 
       00 00 00 00 
04689B 00 BE 96 97 0103*   	db 000,190,150,151,192,145,145,248,001,248,000,000,000,000,000,000
       C0 91 91 F8 
       01 F8 00 00 
       00 00 00 00 
0468AB 00 BE 96 97 0104*   	db 000,190,150,151,192,000,000,191,248,191,000,000,000,000,000,000
       C0 00 00 BF 
       F8 BF 00 00 
       00 00 00 00 
0468BB 00 BE 96 97 0105*   	db 000,190,150,151,192,000,000,191,191,191,000,000,000,000,000,000
       C0 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
0468CB 00 BE 8A 8B 0106*   	db 000,190,138,139,192,145,145,191,191,191,000,000,000,000,000,000
       C0 91 91 BF 
       BF BF 00 00 
       00 00 00 00 
0468DB 00 AE BF BC 0107*   	db 000,174,191,188,176,000,000,191,191,191,000,206,207,207,208,000
       B0 00 00 BF 
       BF BF 00 CE 
       CF CF D0 00 
0468EB 00 00 BE DB 0108*   	db 000,000,190,219,000,000,000,191,191,191,145,190,152,153,192,000
       00 00 00 BF 
       BF BF 91 BE 
       98 99 C0 00 
0468FB BF BF BF DB 0109*   	db 191,191,191,219,208,000,206,191,191,191,000,190,150,151,192,000
       D0 00 CE BF 
       BF BF 00 BE 
       96 97 C0 00 
04690B 59 5A 5B DB 0110*   	db 089,090,091,219,191,191,191,191,167,216,216,168,150,151,192,000
       BF BF BF BF 
       A7 D8 D8 A8 
       96 97 C0 00 
04691B 49 05 4B AA 0111*   	db 073,005,075,170,191,191,191,191,191,191,000,190,150,151,192,000
       BF BF BF BF 
       BF BF 00 BE 
       96 97 C0 00 
04692B 39 3A 3B BF 0112*   	db 057,058,059,191,191,191,191,191,191,191,145,190,138,139,192,000
       BF BF BF BF 
       BF BF 91 BE 
       8A 8B C0 00 
04693B BF BF B0 93 0113*   	db 191,191,176,147,000,000,174,191,191,191,000,174,188,175,176,000
       00 00 AE BF 
       BF BF 00 AE 
       BC AF B0 00 
04694B 00 00 00 93 0114*   	db 000,000,000,147,000,000,000,191,008,191,000,000,219,192,000,000
       00 00 00 BF 
       08 BF 00 00 
       DB C0 00 00 
04695B 00 00 00 93 0115*   	db 000,000,000,147,000,000,000,191,008,220,220,220,170,192,000,000
       00 00 00 BF 
       08 DC DC DC 
       AA C0 00 00 
04696B 00 00 00 93 0116*   	db 000,000,000,147,000,000,000,191,008,191,175,175,175,176,000,000
       00 00 00 BF 
       08 BF AF AF 
       AF B0 00 00 
04697B 00 00 00 93 0117*   	db 000,000,000,147,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
04698B 00 00 CE CF 0118*   	db 000,000,206,207,208,000,000,191,191,191,000,000,000,000,000,000
       D0 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
04699B 00 CE BF F8 0119*   	db 000,206,191,248,191,208,000,191,191,191,208,000,206,191,191,191
       BF D0 00 BF 
       BF BF D0 00 
       CE BF BF BF 
0469AB 81 BE F8 01 0120*   	db 129,190,248,001,248,191,191,191,191,191,191,191,191,089,090,091
       F8 BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
0469BB 00 AE AF F8 0121*   	db 000,174,175,248,191,191,191,191,191,191,191,191,191,073,005,075
       BF BF BF BF 
       BF BF BF BF 
       BF 49 05 4B 
0469CB 00 00 AE BF 0122*   	db 000,000,174,191,176,000,174,191,191,191,191,191,191,057,058,059
       B0 00 AE BF 
       BF BF BF BF 
       BF 39 3A 3B 
0469DB 00 00 00 83 0123*   	db 000,000,000,131,000,000,000,000,131,000,000,000,174,191,191,191
       00 00 00 00 
       83 00 00 00 
       AE BF BF BF 
0469EB 7A 7B 7A 7B 0124*   	db 122,123,122,123,122,123,122,123,122,123,122,123,122,123,122,123
       7A 7B 7A 7B 
       7A 7B 7A 7B 
       7A 7B 7A 7B 
0469FB 6A 6B 6A 6B 0125*   	db 106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107
       6A 6B 6A 6B 
       6A 6B 6A 6B 
       6A 6B 6A 6B 
046A0B 00 93 00 93 0126*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046A1B 00 93 00 93 0127*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046A2B 00 93 00 93 0128*   	db 000,147,000,147,108,108,108,108,108,108,147,000,147,000,000,147
       6C 6C 6C 6C 
       6C 6C 93 00 
       93 00 00 93 
046A3B 00 93 00 93 0129*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,108,108,108
       00 00 00 00 
       00 00 93 00 
       93 6C 6C 6C 
046A4B 00 93 00 93 0130*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046A5B 00 93 00 93 0131*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046A6B CE BF BF BF 0132*   	db 206,191,191,191,208,000,000,000,000,206,191,191,191,208,206,191
       D0 00 00 00 
       00 CE BF BF 
       BF D0 CE BF 
046A7B BF 59 5A 5B 0133*   	db 191,089,090,091,191,191,191,191,191,191,089,090,091,191,191,191
       BF BF BF BF 
       BF BF 59 5A 
       5B BF BF BF 
046A8B BF 49 05 4B 0134*   	db 191,073,005,075,191,191,191,191,191,191,073,005,075,191,191,191
       BF BF BF BF 
       BF BF 49 05 
       4B BF BF BF 
046A9B BF 39 3A 3B 0135*   	db 191,057,058,059,191,191,191,191,191,191,057,058,059,191,191,191
       BF BF BF BF 
       BF BF 39 3A 
       3B BF BF BF 
046AAB AE BF BF BF 0136*   	db 174,191,191,191,176,000,000,000,000,174,191,191,191,176,174,191
       B0 00 00 00 
       00 AE BF BF 
       BF B0 AE BF 
046ABB 00 00 00 00 0137*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
046ACB 00 00 00 00 0138*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
046ADB 00 00 00 00 0139*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
046AEB 00 00 00 00 0140*   	db 000,000,000,000,000,000,000,000,000,206,248,208,000,000,000,000
       00 00 00 00 
       00 CE F8 D0 
       00 00 00 00 
046AFB 09 0A 0A 0A 0141*   	db 009,010,010,010,010,010,010,010,011,248,001,248,145,145,145,145
       0A 0A 0A 0A 
       0B F8 01 F8 
       91 91 91 91 
046B0B 00 00 00 00 0142*   	db 000,000,000,000,000,000,000,000,000,174,248,176,000,000,000,000
       00 00 00 00 
       00 AE F8 B0 
       00 00 00 00 
046B1B 00 00 00 00 0143*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046B2B 00 00 00 00 0144*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046B3B 00 00 00 00 0145*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046B4B 00 00 CE CF 0146*   	db 000,000,206,207,207,207,208,000,000,000,000,000,000,000,000,000
       CF CF D0 00 
       00 00 00 00 
       00 00 00 00 
046B5B 81 81 BE 59 0147*   	db 129,129,190,089,090,091,192,207,207,207,207,208,000,000,000,000
       5A 5B C0 CF 
       CF CF CF D0 
       00 00 00 00 
046B6B 00 00 BE 49 0148*   	db 000,000,190,073,005,075,167,216,216,216,216,182,208,000,000,000
       05 4B A7 D8 
       D8 D8 D8 B6 
       D0 00 00 00 
046B7B 81 81 BE 39 0149*   	db 129,129,190,057,058,059,192,176,000,000,000,215,192,000,000,000
       3A 3B C0 B0 
       00 00 00 D7 
       C0 00 00 00 
046B8B 00 00 AE AF 0150*   	db 000,000,174,175,175,175,176,000,000,000,000,215,192,000,000,000
       AF AF B0 00 
       00 00 00 D7 
       C0 00 00 00 
046B9B 00 00 00 83 0151*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
046BAB 00 00 00 83 0152*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
046BBB 00 00 00 83 0153*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
046BCB 00 00 00 83 0154*   	db 000,000,000,131,000,131,000,000,000,206,207,207,207,208,000,000
       00 83 00 00 
       00 CE CF CF 
       CF D0 00 00 
046BDB 81 81 81 81 0155*   	db 129,129,129,129,129,129,129,129,129,190,089,090,091,192,129,129
       81 81 81 81 
       81 BE 59 5A 
       5B C0 81 81 
046BEB 00 00 00 00 0156*   	db 000,000,000,000,000,000,000,000,000,190,073,005,075,192,000,000
       00 00 00 00 
       00 BE 49 05 
       4B C0 00 00 
046BFB 81 81 81 81 0157*   	db 129,129,129,129,129,129,129,129,129,190,057,058,059,192,129,129
       81 81 81 81 
       81 BE 39 3A 
       3B C0 81 81 
046C0B 00 00 00 83 0158*   	db 000,000,000,131,000,131,000,000,000,174,175,180,175,176,000,000
       00 83 00 00 
       00 AE AF B4 
       AF B0 00 00 
046C1B 00 00 00 83 0159*   	db 000,000,000,131,000,131,000,000,000,000,191,179,000,000,000,000
       00 83 00 00 
       00 00 BF B3 
       00 00 00 00 
046C2B 09 0A 0A 0A 0160*   	db 009,010,010,010,010,010,010,010,010,010,010,010,010,010,010,011
       0A 0A 0A 0A 
       0A 0A 0A 0A 
       0A 0A 0A 0B 
046C3B 00 00 00 83 0161*   	db 000,000,000,131,000,131,000,000,000,000,191,180,000,000,000,000
       00 83 00 00 
       00 00 BF B4 
       00 00 00 00 
046C4B 00 00 CE CF 0162*   	db 000,000,206,207,207,207,208,000,000,000,191,211,000,000,000,000
       CF CF D0 00 
       00 00 BF D3 
       00 00 00 00 
046C5B 00 00 BE 59 0163*   	db 000,000,190,089,090,091,192,000,000,000,191,211,000,000,000,000
       5A 5B C0 00 
       00 00 BF D3 
       00 00 00 00 
046C6B 00 00 BE 49 0164*   	db 000,000,190,073,005,075,192,000,000,206,191,248,208,000,000,000
       05 4B C0 00 
       00 CE BF F8 
       D0 00 00 00 
046C7B 81 81 BE 39 0165*   	db 129,129,190,057,058,059,171,220,220,220,248,001,248,145,145,145
       3A 3B AB DC 
       DC DC F8 01 
       F8 91 91 91 
046C8B 00 83 AE AF 0166*   	db 000,131,174,175,175,175,176,000,000,000,174,248,176,000,000,000
       AF AF B0 00 
       00 00 AE F8 
       B0 00 00 00 
046C9B 00 83 00 83 0167*   	db 000,131,000,131,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046CAB CE CF CF CF 0168*   	db 206,207,207,207,208,000,000,000,000,000,000,000,000,000,000,000
       D0 00 00 00 
       00 00 00 00 
       00 00 00 00 
046CBB 09 0A 0A 0A 0169*   	db 009,010,010,010,011,000,000,000,000,000,000,000,000,000,000,000
       0B 00 00 00 
       00 00 00 00 
       00 00 00 00 
046CCB BE CF CF CF 0170*   	db 190,207,207,207,192,000,000,000,000,000,000,000,000,000,000,000
       C0 00 00 00 
       00 00 00 00 
       00 00 00 00 
046CDB BE BF 04 BF 0171*   	db 190,191,004,191,192,000,000,000,000,000,000,000,000,000,000,000
       C0 00 00 00 
       00 00 00 00 
       00 00 00 00 
046CEB BE BF 04 BF 0172*   	db 190,191,004,191,191,000,000,206,207,207,207,208,000,000,000,000
       BF 00 00 CE 
       CF CF CF D0 
       00 00 00 00 
046CFB BE BF 04 BF 0173*   	db 190,191,004,191,192,129,129,190,089,090,091,192,000,000,000,000
       C0 81 81 BE 
       59 5A 5B C0 
       00 00 00 00 
046D0B AE AF AF AF 0174*   	db 174,175,175,175,176,000,000,190,073,005,075,167,216,216,182,000
       B0 00 00 BE 
       49 05 4B A7 
       D8 D8 B6 00 
046D1B 00 00 00 00 0175*   	db 000,000,000,000,000,000,000,190,057,058,059,192,000,000,215,000
       00 00 00 BE 
       39 3A 3B C0 
       00 00 D7 00 
046D2B 00 00 00 00 0176*   	db 000,000,000,000,000,000,000,174,175,175,175,176,000,000,215,000
       00 00 00 AE 
       AF AF AF B0 
       00 00 D7 00 
046D3B 00 00 00 00 0177*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
046D4B 00 00 00 00 0178*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
046D5B 00 00 00 00 0179*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
046D6B 00 00 00 00 0180*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
046D7B 00 00 00 00 0181*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
046D8B CF CF CF D0 0182*   	db 207,207,207,208,000,000,000,000,147,000,147,000,206,207,183,207
       00 00 00 00 
       93 00 93 00 
       CE CF B7 CF 
046D9B 59 5A 5B C0 0183*   	db 089,090,091,192,145,145,145,145,145,145,145,145,190,089,090,091
       91 91 91 91 
       91 91 91 91 
       BE 59 5A 5B 
046DAB 49 05 4B C0 0184*   	db 073,005,075,192,000,000,000,000,147,000,147,000,190,073,005,075
       00 00 00 00 
       93 00 93 00 
       BE 49 05 4B 
046DBB 39 3A 3B C0 0185*   	db 057,058,059,192,145,145,145,145,145,145,145,145,190,057,058,059
       91 91 91 91 
       91 91 91 91 
       BE 39 3A 3B 
046DCB BF B4 AF B0 0186*   	db 191,180,175,176,206,207,207,207,208,000,147,000,174,175,175,175
       CE CF CF CF 
       D0 00 93 00 
       AE AF AF AF 
046DDB BF D3 00 00 0187*   	db 191,211,000,000,009,010,010,010,011,000,147,000,000,000,000,000
       09 0A 0A 0A 
       0B 00 93 00 
       00 00 00 00 
046DEB BF D3 00 00 0188*   	db 191,211,000,000,190,207,207,207,192,000,147,000,000,000,000,000
       BE CF CF CF 
       C0 00 93 00 
       00 00 00 00 
046DFB BF D3 00 00 0189*   	db 191,211,000,000,190,191,008,191,192,000,152,153,145,145,145,145
       BE BF 08 BF 
       C0 00 98 99 
       91 91 91 91 
046E0B BF D3 00 00 0190*   	db 191,211,000,000,190,191,008,191,191,000,150,151,000,000,000,000
       BE BF 08 BF 
       BF 00 96 97 
       00 00 00 00 
046E1B BF D3 00 00 0191*   	db 191,211,000,000,190,191,008,191,192,000,150,151,000,000,000,000
       BE BF 08 BF 
       C0 00 96 97 
       00 00 00 00 
046E2B BF D3 00 00 0192*   	db 191,211,000,000,174,175,175,175,176,000,134,135,000,000,000,000
       AE AF AF AF 
       B0 00 86 87 
       00 00 00 00 
046E3B BF D3 00 00 0193*   	db 191,211,000,000,000,000,000,000,000,000,134,135,000,000,000,000
       00 00 00 00 
       00 00 86 87 
       00 00 00 00 
046E4B BF D3 00 CE 0194*   	db 191,211,000,206,207,207,207,208,000,000,138,139,129,129,129,129
       CF CF CF D0 
       00 00 8A 8B 
       81 81 81 81 
046E5B BF A1 A4 BE 0195*   	db 191,161,164,190,089,090,091,192,000,000,188,147,000,000,000,000
       59 5A 5B C0 
       00 00 BC 93 
       00 00 00 00 
046E6B AE AF BF BE 0196*   	db 174,175,191,190,073,005,075,171,220,220,170,147,000,000,000,000
       49 05 4B AB 
       DC DC AA 93 
       00 00 00 00 
046E7B 00 00 AE BE 0197*   	db 000,000,174,190,057,058,059,192,000,000,000,147,000,000,000,000
       39 3A 3B C0 
       00 00 00 93 
       00 00 00 00 
046E8B 00 00 00 AE 0198*   	db 000,000,000,174,175,175,175,191,129,129,129,129,129,129,129,129
       AF AF AF BF 
       81 81 81 81 
       81 81 81 81 
046E9B 00 00 00 00 0199*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
046EAB 00 00 00 00 0200*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
046EBB 09 0A 0A 0A 0201*   	db 009,010,010,010,010,010,010,010,010,010,010,010,010,010,010,011
       0A 0A 0A 0A 
       0A 0A 0A 0A 
       0A 0A 0A 0B 
046ECB 00 00 00 00 0202*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
046EDB 00 CE CF CF 0203*   	db 000,206,207,207,207,208,000,000,000,000,000,147,000,147,000,000
       CF D0 00 00 
       00 00 00 93 
       00 93 00 00 
046EEB 00 BE BF F8 0204*   	db 000,190,191,248,191,192,000,000,000,000,000,147,000,147,000,000
       BF C0 00 00 
       00 00 00 93 
       00 93 00 00 
046EFB 00 BE F8 01 0205*   	db 000,190,248,001,248,192,000,000,000,000,206,207,207,207,208,000
       F8 C0 00 00 
       00 00 CE CF 
       CF CF D0 00 
046F0B 00 AE BF F8 0206*   	db 000,174,191,248,191,176,000,000,000,000,190,089,090,091,192,000
       BF B0 00 00 
       00 00 BE 59 
       5A 5B C0 00 
046F1B 00 00 AE BC 0207*   	db 000,000,174,188,176,000,000,000,000,185,172,073,005,075,192,000
       B0 00 00 00 
       00 B9 AC 49 
       05 4B C0 00 
046F2B 00 00 00 DB 0208*   	db 000,000,000,219,000,000,000,000,000,219,190,057,058,059,192,000
       00 00 00 00 
       00 DB BE 39 
       3A 3B C0 00 
046F3B 00 00 00 DB 0209*   	db 000,000,000,219,000,000,000,000,000,219,174,175,175,175,176,000
       00 00 00 00 
       00 DB AE AF 
       AF AF B0 00 
046F4B 00 00 00 DB 0210*   	db 000,000,000,219,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046F5B 00 B9 DC EC 0211*   	db 000,185,220,236,220,220,220,220,220,204,000,000,000,000,000,000
       DC DC DC DC 
       DC CC 00 00 
       00 00 00 00 
046F6B 00 DB 00 00 0212*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046F7B 00 DB 00 00 0213*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046F8B 00 DB 00 00 0214*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046F9B 00 DB 00 00 0215*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046FAB DC AA 00 00 0216*   	db 220,170,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046FBB 00 00 00 00 0217*   	db 000,000,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046FCB 00 00 00 00 0218*   	db 000,000,000,000,000,000,000,206,207,187,207,208,000,000,000,000
       00 00 00 CE 
       CF BB CF D0 
       00 00 00 00 
046FDB 81 81 81 81 0219*   	db 129,129,129,129,129,129,129,190,089,090,091,192,129,129,129,129
       81 81 81 BE 
       59 5A 5B C0 
       81 81 81 81 
046FEB 00 00 00 00 0220*   	db 000,000,000,000,000,000,000,190,073,005,075,192,000,000,000,000
       00 00 00 BE 
       49 05 4B C0 
       00 00 00 00 
046FFB 00 00 00 00 0221*   	db 000,000,000,000,000,000,000,190,057,058,059,192,000,000,000,000
       00 00 00 BE 
       39 3A 3B C0 
       00 00 00 00 
04700B 00 00 00 00 0222*   	db 000,000,000,000,000,000,000,174,175,175,175,176,000,000,000,000
       00 00 00 AE 
       AF AF AF B0 
       00 00 00 00 
04701B 00 00 00 00 0223*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
04702B 00 00 00 00 0224*   	db 000,000,000,000,000,000,000,000,131,129,129,129,129,129,129,129
       00 00 00 00 
       83 81 81 81 
       81 81 81 81 
04703B 00 00 00 00 0225*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
04704B 00 00 00 00 0226*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
04705B 81 81 81 81 0227*   	db 129,129,129,129,129,129,129,129,131,000,000,000,000,000,000,000
       81 81 81 81 
       83 00 00 00 
       00 00 00 00 
04706B 00 00 00 00 0228*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
04707B 00 00 00 00 0229*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
04708B 00 00 00 00 0230*   	db 000,000,000,000,000,000,000,000,131,129,129,129,129,129,129,129
       00 00 00 00 
       83 81 81 81 
       81 81 81 81 
04709B BF BF BF D0 0231*   	db 191,191,191,208,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
0470AB 59 5A 5B BF 0232*   	db 089,090,091,191,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
0470BB 49 05 4B BF 0233*   	db 073,005,075,191,000,000,000,000,131,000,000,152,153,145,145,145
       00 00 00 00 
       83 00 00 98 
       99 91 91 91 
0470CB 39 3A 3B BF 0234*   	db 057,058,059,191,000,000,000,000,131,000,000,150,151,000,000,000
       00 00 00 00 
       83 00 00 96 
       97 00 00 00 
0470DB BF BF BF BF 0235*   	db 191,191,191,191,000,000,206,207,207,207,208,150,151,000,000,000
       00 00 CE CF 
       CF CF D0 96 
       97 00 00 00 
0470EB 00 00 BF BF 0236*   	db 000,000,191,191,191,191,191,191,248,191,192,150,151,145,145,145
       BF BF BF BF 
       F8 BF C0 96 
       97 91 91 91 
0470FB 00 00 BF BF 0237*   	db 000,000,191,191,191,191,191,248,001,248,192,134,135,000,000,000
       BF BF BF F8 
       01 F8 C0 86 
       87 00 00 00 
04710B 00 00 AE BF 0238*   	db 000,000,174,191,191,191,191,191,248,191,192,134,135,000,000,000
       BF BF BF BF 
       F8 BF C0 86 
       87 00 00 00 
04711B 00 00 00 83 0239*   	db 000,000,000,131,000,000,174,175,175,175,176,134,135,000,000,000
       00 00 AE AF 
       AF AF B0 86 
       87 00 00 00 
04712B 00 00 00 83 0240*   	db 000,000,000,131,000,000,000,000,131,000,000,134,135,000,000,000
       00 00 00 00 
       83 00 00 86 
       87 00 00 00 
04713B 6A 6B 6C 6B 0241*   	db 106,107,108,107,108,106,107,108,131,000,000,138,139,145,145,145
       6C 6A 6B 6C 
       83 00 00 8A 
       8B 91 91 91 
04714B 00 00 00 83 0242*   	db 000,000,000,131,000,000,000,000,131,000,000,191,191,000,000,000
       00 00 00 00 
       83 00 00 BF 
       BF 00 00 00 
04715B 00 00 00 83 0243*   	db 000,000,000,131,000,000,000,000,131,000,000,191,191,000,000,000
       00 00 00 00 
       83 00 00 BF 
       BF 00 00 00 
04716B 00 00 00 83 0244*   	db 000,000,000,131,000,000,000,000,131,206,207,207,207,208,000,000
       00 00 00 00 
       83 CE CF CF 
       CF D0 00 00 
04717B 00 00 00 83 0245*   	db 000,000,000,131,000,000,000,000,131,190,089,090,091,192,145,145
       00 00 00 00 
       83 BE 59 5A 
       5B C0 91 91 
04718B 00 00 00 83 0246*   	db 000,000,000,131,000,000,000,000,131,190,073,005,075,192,000,000
       00 00 00 00 
       83 BE 49 05 
       4B C0 00 00 
04719B 81 81 81 83 0247*   	db 129,129,129,131,129,129,129,129,131,190,057,058,059,192,145,145
       81 81 81 81 
       83 BE 39 3A 
       3B C0 91 91 
0471AB 00 00 00 83 0248*   	db 000,000,000,131,000,000,000,000,131,174,175,175,175,176,000,000
       00 00 00 00 
       83 AE AF AF 
       AF B0 00 00 
0471BB 00 00 00 83 0249*   	db 000,000,000,131,000,000,000,000,131,000,000,000,131,000,000,000
       00 00 00 00 
       83 00 00 00 
       83 00 00 00 
0471CB 09 0A 0A 0A 0250*   	db 009,010,010,010,010,010,010,010,010,010,010,010,010,010,010,011
       0A 0A 0A 0A 
       0A 0A 0A 0A 
       0A 0A 0A 0B 
0471DB 85 85 85 85 0251*   	db 133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133
       85 85 85 85 
       85 85 85 85 
       85 85 85 85 
0471EB 00 00 93 00 0252*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
0471FB 7A 7B 93 7A 0253*   	db 122,123,147,122,123,122,147,122,123,122,147,122,123,147,122,123
       7B 7A 93 7A 
       7B 7A 93 7A 
       7B 93 7A 7B 
04720B 6A 6B 93 6A 0254*   	db 106,107,147,106,107,106,147,106,107,106,147,106,107,147,106,107
       6B 6A 93 6A 
       6B 6A 93 6A 
       6B 93 6A 6B 
04721B 00 00 93 00 0255*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
04722B 00 00 93 00 0256*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
04723B 94 94 94 94 0257*   	db 148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148
       94 94 94 94 
       94 94 94 94 
       94 94 94 94 
04724B 59 5A 5B BF 0258*   	db 089,090,091,191,191,191,191,191,191,191,191,191,191,089,090,091
       BF BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
04725B 49 05 4B BF 0259*   	db 073,005,075,191,008,191,191,191,191,191,004,191,191,073,005,075
       08 BF BF BF 
       BF BF 04 BF 
       BF 49 05 4B 
04726B 39 3A 3B BF 0260*   	db 057,058,059,191,008,191,191,191,191,191,004,191,191,057,058,059
       08 BF BF BF 
       BF BF 04 BF 
       BF 39 3A 3B 
04727B BF BF BF BF 0261*   	db 191,191,191,191,008,191,191,191,191,191,004,191,191,191,191,191
       08 BF BF BF 
       BF BF 04 BF 
       BF BF BF BF 
04728B BF BF BF BF 0262*   	db 191,191,191,191,191,248,191,191,191,191,191,248,191,191,191,191
       BF F8 BF BF 
       BF BF BF F8 
       BF BF BF BF 
04729B BF BF BF BF 0263*   	db 191,191,191,191,248,001,248,191,191,191,248,001,248,191,191,191
       F8 01 F8 BF 
       BF BF F8 01 
       F8 BF BF BF 
0472AB BF BF BF BF 0264*   	db 191,191,191,191,191,248,191,191,191,191,191,248,191,191,191,191
       BF F8 BF BF 
       BF BF BF F8 
       BF BF BF BF 
0472BB 59 5A 5B BF 0265*   	db 089,090,091,191,191,191,191,191,191,191,191,191,191,089,090,091
       BF BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
0472CB 49 05 4B BF 0266*   	db 073,005,075,191,191,191,191,191,191,191,191,191,191,073,005,075
       BF BF BF BF 
       BF BF BF BF 
       BF 49 05 4B 
0472DB 39 3A 3B BF 0267*   	db 057,058,059,191,191,191,191,191,191,191,191,191,191,057,058,059
       BF BF BF BF 
       BF BF BF BF 
       BF 39 3A 3B 
0472EB 84 84 84 84 0268*   	db 132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132
       84 84 84 84 
       84 84 84 84 
       84 84 84 84 
0472FB             0058        include "player_state.inc"
0472FB             0001*   player_defaults:
0472FB 05          0002*       db player               ; type
0472FC 6F 01 00    0003*       dl BUF_SHIP_0L          ; base_bufferId
0472FF 62 73 04    0004*       dl do_player            ; move_program
047302 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
047303 10          0006*       db 16                   ; dim_x
047304 10          0007*       db 16                   ; dim_y
047305 01          0008*       db 1                    ; num_orientations
047306 01          0009*       db 1                    ; num_animations
047307 00          0010*       db 0                    ; animation
047308 00          0011*       db 0                    ; animation_timer
047309 00          0012*       db 0                    ; move_timer
04730A 00          0013*       db 0                    ; move_step
04730B 00          0014*       db 0                    ; points
04730C 00          0015*       db 0                    ; shield_damage
04730D 00          0016*       db 0                    ; frame
04730E             0017*   
04730E F1 73 04    0018*   player_state:  dl player_alive
047311 00          0019*   player_ships: db 0
047312             0020*   ; player_ships_max: db 3
047312 01          0021*   player_ships_max: db 1 ; DEBUG
047313             0022*   player_speed: equ 3*256 ; pixels per frame 16.8 fixed
047313             0023*   
047313             0024*   draw_player_ships:
047313             0025*   ; activate mfd
047313 DD 21 96 75 0026*       ld ix,mfd_bg_r
       04          
047318 CD A5 75 04 0027*       call mfd_activate
04731C             0028*   ; blank out previously drawn ships
04731C AF          0029*       xor a ; color mode 0
04731D 0E 00       0030*       ld c,c_black
04731F CD C9 12 04 0031*       call vdu_gcol
047323 01 00 00 00 0032*       ld bc,0
047327 11 00 00 00 0033*       ld de,0
04732B DD 21 3F 00 0034*       ld ix,63
       00          
047330 FD 21 0F 00 0035*       ld iy,15
       00          
047335 CD 15 17 04 0036*       call vdu_plot_rf
047339             0037*   ; draw the ships remaining
047339 21 72 01 00 0038*       ld hl,BUF_SHIP_SMALL
04733D CD 7C 13 04 0039*       call vdu_buff_select
047341 3A 11 73 04 0040*       ld a,(player_ships) ; loop counter
047345 01 04 00 00 0041*       ld bc,4 ; starting x-coordinate
047349             0042*   @loop:
047349 F5          0043*       push af ; back up loop counter
04734A C5          0044*       push bc ; save x-coordinate
04734B 11 04 00 00 0045*       ld de,4 ; y-coordinate
04734F CD D8 16 04 0046*       call vdu_plot_bmp
047353 C1          0047*       pop bc ; restore x-coordinate
047354 21 0C 00 00 0048*       ld hl,12 ; bump x-coords
047358 09          0049*       add hl,bc
047359 E5          0050*       push hl
04735A C1          0051*       pop bc ; bc = new x-coordinate
04735B F1          0052*       pop af
04735C 3D          0053*       dec a
04735D C2 49 73 04 0054*       jp nz,@loop
047361 C9          0055*       ret
047362             0056*   ; end draw_player_ships
047362             0057*   
047362             0058*   do_player:
047362 2A 0E 73 04 0059*       ld hl,(player_state)
047366             0060*       CALL_HL
047366 01 6C 73 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
04736A C5          0002*M1     push bc ; which constitutes the return address
04736B E9          0003*M1     jp (hl) ; Jump to the address in HL
04736C C9          0061*       ret
04736D             0062*   ; end do_player
04736D             0063*   
04736D             0064*   ; set initial player position
04736D             0065*   ; inputs: none,everything is hardcoded
04736D             0066*   ; outputs: player_x/y set to bottom-left corner of screen
04736D             0067*   ; destroys: pretty much everything
04736D             0068*   player_init:
04736D 3A 4C 79 04 0069*       ld a,(player_shields_max)
047371 32 4B 79 04 0070*       ld (player_shields),a
047375 3A DF 77 04 0071*       ld a,(laser_power_max)
047379 32 DD 77 04 0072*       ld (laser_power),a
04737D 3A BD 76 04 0073*       ld a,(player_fuel_max)
047381 32 BB 76 04 0074*       ld (player_fuel),a
047385             0075*   ; set all to zero so they will update
047385 AF          0076*       xor a
047386 32 DE 77 04 0077*       ld (laser_power_last),a
04738A 32 4D 79 04 0078*       ld (player_shields_last),a
04738E 32 BC 76 04 0079*       ld (player_fuel_last),a
047392             0080*   ; set player sprite record with defaults
047392 DD 21 30 95 0081*       ld ix,player_begin
       04          
047397 21 FB 72 04 0082*       ld hl,player_defaults
04739B 01 00 00 00 0083*       ld bc,0*256
04739F 11 00 40 01 0084*       ld de,sprite_bottom*256
0473A3 3E 01       0085*       ld a,1
0473A5 CD 5D 7A 04 0086*       call spawn_sprite_from_coords
0473A9 D2 D4 73 04 0087*       jp nc,@draw
0473AD DD CB 16 BE 0088*       res 7,(ix+sprite_type)
0473B1             0089*   ; load sprite frames
0473B1 DD 7E 00    0090*       ld a,(ix+sprite_id)
0473B4 CD 79 17 04 0091*       call vdu_sprite_select
0473B8 CD 8C 17 04 0092*       call vdu_sprite_clear_frames
0473BC 21 6F 01 00 0093*       ld hl,BUF_SHIP_0L
0473C0 CD CE 18 04 0094*       call vdu_sprite_add_buff
0473C4 21 70 01 00 0095*       ld hl,BUF_SHIP_1C
0473C8 CD CE 18 04 0096*       call vdu_sprite_add_buff
0473CC 21 71 01 00 0097*       ld hl,BUF_SHIP_2R
0473D0 CD CE 18 04 0098*       call vdu_sprite_add_buff
0473D4             0099*   @draw:
0473D4 01 00 00 00 0100*       ld bc,0*256
0473D8 11 00 40 01 0101*       ld de,sprite_bottom*256
0473DC CD 45 18 04 0102*       call vdu_sprite_move_abs168
0473E0 CD EF 17 04 0103*       call vdu_sprite_show
0473E4 21 F1 73 04 0104*       ld hl,player_alive
0473E8 22 0E 73 04 0105*       ld (player_state),hl
0473EC DD CB 1D F6 0106*       set sprite_alive,(ix+sprite_collisions)
0473F0 C9          0107*       ret
0473F1             0108*   ; end player_init
0473F1             0109*   
0473F1             0110*   player_alive:
0473F1 CD F8 76 04 0111*       call player_input
0473F5 CD 49 78 04 0112*       call player_move_weapons
0473F9 C9          0113*       ret
0473FA             0114*   ; end player_alive
0473FA             0115*   
0473FA             0116*   player_dying:
0473FA             0117*   ; DEBUG
0473FA             0118*   ; decrement lives
0473FA 3A 11 73 04 0119*       ld a,(player_ships)
0473FE 3D          0120*       dec a
0473FF CA 79 7C 04 0121*       jp z,game_over
047403 32 11 73 04 0122*       ld (player_ships),a
047407 CD 13 73 04 0123*       call draw_player_ships
04740B             0124*   ; reset the sprite table
04740B CD C5 79 04 0125*       call table_init
04740F 21 30 94 04 0126*       ld hl,table_base
047413 22 A0 79 04 0127*       ld (table_pointer),hl
047417             0128*   ; initialize sprites and active tiles table
047417 CD FD 79 04 0129*       call sprites_init
04741B CD C5 79 04 0130*       call table_init
04741F CD FE 82 04 0131*       call tile_table_init
047423             0132*   ; reset player score to what it was at the start of the level
047423 2A 14 79 04 0133*       ld hl,(player_starting_score)
047427 22 0E 79 04 0134*       ld (player_score),hl
04742B             0135*   ; set gfx origin and viewport to playing field window
04742B 01 80 00 00 0136*       ld bc,origin_left
04742F 11 30 00 00 0137*       ld de,origin_top
047433 CD 0C 13 04 0138*       call vdu_set_gfx_origin
047437 01 00 00 00 0139*       ld bc,field_left
04743B 11 00 00 00 0140*       ld de,field_top
04743F DD 21 FF 00 0141*       ld ix,field_right
       00          
047444 FD 21 4F 01 0142*       ld iy,field_bottom
       00          
047449 CD 27 13 04 0143*       call vdu_set_gfx_viewport
04744D CD 9A 12 04 0144*       call vdu_clg
047451             0145*   ; restart the level
047451 21 31 62 04 0146*       ld hl,cur_level
047455 35          0147*       dec (hl) ; decrement level so it will be incremented back to the same level
047456 CD 46 62 04 0148*       call next_level
04745A             0149*   ; spawn player sprite at starting position
04745A CD 6D 73 04 0150*       call player_init
04745E             0151*   ; set the game state to playing
04745E 21 B7 7E 04 0152*       ld hl,game_playing
047462 22 48 7C 04 0153*       ld (game_state), hl
047466             0154*   ; set game playing substates
047466 21 F1 73 04 0155*       ld hl,player_alive
04746A 22 0E 73 04 0156*       ld (player_state), hl
04746E 21 D4 1E 04 0157*       ld hl,enemies_alive
047472 22 C6 1E 04 0158*       ld (enemies_state), hl
047476 C9          0159*       ret
047477             0160*   ; END DEBUG
047477             0161*   
047477 21 E0 1E 04 0162*       ld hl,enemies_despawning
04747B 22 C6 1E 04 0163*       ld (enemies_state),hl
04747F C9          0164*       ret
047480             0165*   ; end player_dying
047480             0166*   
047480             0167*   player_dead:
047480 CD 49 78 04 0168*       call player_move_weapons
047484 C9          0169*       ret
047485             0170*   ; end player_dead
047485             0171*   
047485             0172*   
047485             0173*   kill_player:
047485 21 FA 73 04 0174*       ld hl,player_dying
047489 22 0E 73 04 0175*       ld (player_state),hl
04748D C9          0176*       ret
04748E             0177*   ; end kill_player
04748E             0178*   
04748E             0059        include "player_cockpit.inc"
04748E             0001*   ; offsets into control panel element definitions
04748E             0002*   panel_bufferId: equ 0
04748E             0003*   panel_x0: equ 3
04748E             0004*   panel_y0: equ 6
04748E             0005*   panel_x1: equ 9
04748E             0006*   panel_y1: equ 12
04748E             0007*   
04748E             0008*   ctl_panel_l:
04748E 09 00 00    0009*       dl BUF_CTL_PANEL_L ; bufferId
047491 00 00 00    0010*       dl 0 ; x0
047494 00 01 00    0011*       dl 256 ; y0
047497 80 00 00    0012*       dl 0+128 ; x1
04749A 80 01 00    0013*       dl 256+128 ; y1
04749D             0014*   
04749D             0015*   ctl_panel_r:
04749D 0A 00 00    0016*       dl BUF_CTL_PANEL_R ; bufferId
0474A0 80 01 00    0017*       dl 384 ; x0
0474A3 00 01 00    0018*       dl 256 ; y0
0474A6 00 02 00    0019*       dl 384+128 ; x1
0474A9 80 01 00    0020*       dl 256+128 ; y1
0474AC             0021*   
0474AC             0022*   mfd_bezel_l:
0474AC 0D 00 00    0023*       dl BUF_MFD_BEZEL ; bufferId
0474AF 18 00 00    0024*       dl 24 ; x0
0474B2 18 01 00    0025*       dl 280 ; y0
0474B5 78 00 00    0026*       dl 24+96 ; x1
0474B8 78 01 00    0027*       dl 280+96 ; y1
0474BB             0028*   
0474BB             0029*   mfd_bezel_r:
0474BB 0D 00 00    0030*       dl BUF_MFD_BEZEL ; bufferId
0474BE 88 01 00    0031*       dl 392 ; x0
0474C1 18 01 00    0032*       dl 280 ; y0
0474C4 E8 01 00    0033*       dl 392+96 ; x1
0474C7 78 01 00    0034*       dl 280+96 ; y1
0474CA             0035*   
0474CA             0036*   draw_player_cockpit:
0474CA DD 21 8E 74 0037*       ld ix,ctl_panel_l
       04          
0474CF CD 66 75 04 0038*       call draw_player_ctl_panel
0474D3 DD 21 9D 74 0039*       ld ix,ctl_panel_r
       04          
0474D8 CD 66 75 04 0040*       call draw_player_ctl_panel
0474DC DD 21 AC 74 0041*       ld ix,mfd_bezel_l
       04          
0474E1 CD 66 75 04 0042*       call draw_player_ctl_panel
0474E5 DD 21 78 75 0043*       ld ix,mfd_bg_l
       04          
0474EA CD 66 75 04 0044*       call draw_player_ctl_panel
0474EE DD 21 87 75 0045*       ld ix,mfd_arms_l
       04          
0474F3 CD 66 75 04 0046*       call draw_player_ctl_panel
0474F7 DD 21 BB 74 0047*       ld ix,mfd_bezel_r
       04          
0474FC CD 66 75 04 0048*       call draw_player_ctl_panel
047500 DD 21 96 75 0049*       ld ix,mfd_bg_r
       04          
047505 CD 66 75 04 0050*       call draw_player_ctl_panel
047509             0051*   
047509 21 28 00 00 0052*       ld hl,BUF_SHIELD
04750D CD 7C 13 04 0053*       call vdu_buff_select
047511 01 EC 01 00 0054*       ld bc,492
047515 11 70 01 00 0055*       ld de,368
047519 CD D8 16 04 0056*       call vdu_plot_bmp
04751D 21 27 00 00 0057*       ld hl,BUF_POWER
047521 CD 7C 13 04 0058*       call vdu_buff_select
047525 01 04 00 00 0059*       ld bc,4
047529 11 70 01 00 0060*       ld de,368
04752D CD D8 16 04 0061*       call vdu_plot_bmp
047531 21 08 00 00 0062*       ld hl,BUF_CREDITS
047535 CD 7C 13 04 0063*       call vdu_buff_select
047539 01 80 01 00 0064*       ld bc,384
04753D 11 05 01 00 0065*       ld de,261
047541 CD D8 16 04 0066*       call vdu_plot_bmp
047545 21 0B 00 00 0067*       ld hl,BUF_JERRY_CAN
047549 CD 7C 13 04 0068*       call vdu_buff_select
04754D 01 6E 00 00 0069*       ld bc,110
047551 11 02 01 00 0070*       ld de,258
047555 CD D8 16 04 0071*       call vdu_plot_bmp
047559             0072*   
047559 CD 60 79 04 0073*       call init_bar_shields
04755D CD F5 77 04 0074*       call init_bar_laser
047561 CD A2 76 04 0075*       call init_bar_fuel
047565             0076*   
047565 C9          0077*       ret
047566             0078*   ; end draw_player_cockpit
047566             0079*   
047566             0080*   draw_player_ctl_panel:
047566 DD 27 00    0081*       ld hl,(ix+panel_bufferId)
047569 CD 7C 13 04 0082*       call vdu_buff_select
04756D DD 07 03    0083*       ld bc,(ix+panel_x0)
047570 DD 17 06    0084*       ld de,(ix+panel_y0)
047573 CD D8 16 04 0085*       call vdu_plot_bmp
047577 C9          0086*       ret
047578             0087*   ; end draw_player_ctl_panel
047578             0088*   
047578             0089*   mfd_bg_l:
047578 0E 00 00    0090*       dl BUF_MFD_BG ; bufferId
04757B 28 00 00    0091*       dl 40 ; x0
04757E 28 01 00    0092*       dl 296 ; y0
047581 67 00 00    0093*       dl 40+63 ; x1
047584 67 01 00    0094*       dl 296+63 ; y1
047587             0095*   
047587             0096*   mfd_arms_l:
047587 0C 00 00    0097*       dl BUF_MFD_ARMS ; bufferId
04758A 36 00 00    0098*       dl 54 ; x0
04758D 40 01 00    0099*       dl 320 ; y0
047590 59 00 00    0100*       dl 54+35 ; x1
047593 51 01 00    0101*       dl 320+17 ; y1
047596             0102*   
047596             0103*   mfd_bg_r:
047596 0E 00 00    0104*       dl BUF_MFD_BG ; bufferId
047599 98 01 00    0105*       dl 408 ; x0
04759C 28 01 00    0106*       dl 296 ; y0
04759F D7 01 00    0107*       dl 408+63 ; x1
0475A2 67 01 00    0108*       dl 296+63 ; y1
0475A5             0109*   
0475A5             0110*   mfd_activate:
0475A5 DD E5       0111*       push ix ; preserve pointer
0475A7 DD 07 03    0112*       ld bc,(ix+panel_x0)
0475AA DD 17 06    0113*       ld de,(ix+panel_y0)
0475AD CD 0C 13 04 0114*       call vdu_set_gfx_origin
0475B1 01 00 00 00 0115*       ld bc,0
0475B5 11 00 00 00 0116*       ld de,0
0475B9 DD 21 3F 00 0117*       ld ix,63
       00          
0475BE FD 21 3F 00 0118*       ld iy,63
       00          
0475C3 CD 27 13 04 0119*       call vdu_set_gfx_viewport
0475C7 DD E1       0120*       pop ix ; restore pointer
0475C9 C9          0121*       ret
0475CA             0122*   ; end mfd_activate
0475CA             0123*   
0475CA             0124*   mfd_init:
0475CA DD 27 00    0125*       ld hl,(ix+panel_bufferId)
0475CD CD 7C 13 04 0126*       call vdu_buff_select
0475D1 01 00 00 00 0127*       ld bc,0
0475D5 11 00 00 00 0128*       ld de,0
0475D9 CD D8 16 04 0129*       call vdu_plot_bmp
0475DD C9          0130*       ret
0475DE             0131*   ; end mfd_init
0475DE             0132*   
0475DE             0133*   bar_val: equ 0 ; current value
0475DE             0134*   bar_x0: equ panel_x0
0475DE             0135*   bar_y0: equ panel_y0
0475DE             0136*   bar_x1: equ panel_x1
0475DE             0137*   bar_y1: equ panel_y1
0475DE             0138*   bar_y: equ 15 ; y-plot coordinate
0475DE             0139*   bar_x: equ 15 ; x-plot coordinate
0475DE             0140*   
0475DE             0141*   bar_yellow: equ 33
0475DE             0142*   bar_red: equ 17
0475DE             0143*   
0475DE             0144*   ; update a vertical bar display
0475DE             0145*   ; inputs: ix points to bar structure
0475DE             0146*   ;         bar_val set by caller
0475DE             0147*   ; prerequisite: bar_init called before first use
0475DE             0148*   bar_update_v:
0475DE             0149*   ; set gfx viewport
0475DE DD E5       0150*       push ix ; preserve pointer
0475E0 DD 07 03    0151*       ld bc,(ix+bar_x0)
0475E3 DD 17 06    0152*       ld de,(ix+bar_y0)
0475E6 DD 31 0C    0153*       ld iy,(ix+bar_y1)
0475E9 DD 37 09    0154*       ld ix,(ix+bar_x1)
0475EC CD 27 13 04 0155*       call vdu_set_gfx_viewport
0475F0 DD E1       0156*       pop ix ; restore pointer
0475F2             0157*   ; select the color based on the value thresholds
0475F2 DD 17 00    0158*       ld de,(ix+bar_val)
0475F5 21 EF FF FF 0159*       ld hl,-bar_red
0475F9 19          0160*       add hl,de
0475FA D2 17 76 04 0161*       jp nc,@red
0475FE 21 DF FF FF 0162*       ld hl,-bar_yellow
047602 19          0163*       add hl,de
047603 D2 0F 76 04 0164*       jp nc,@yellow
047607 21 05 00 00 0165*       ld hl,BUF_BAR_V_2 ; green
04760B C3 1B 76 04 0166*       jp @select
04760F             0167*   @yellow:
04760F 21 04 00 00 0168*       ld hl,BUF_BAR_V_1 ; yellow
047613 C3 1B 76 04 0169*       jp @select
047617             0170*   @red:
047617 21 03 00 00 0171*       ld hl,BUF_BAR_V_0 ; red
04761B             0172*   @select:
04761B CD 7C 13 04 0173*       call vdu_buff_select
04761F             0174*   ; get x-plot position
04761F DD 07 03    0175*       ld bc,(ix+bar_x0)
047622             0176*   ; compute y-plot position
047622 DD 17 00    0177*       ld de,(ix+bar_val)
047625 21 40 00 00 0178*       ld hl,64
047629 AF          0179*       xor a ; clear carry
04762A ED 52       0180*       sbc hl,de
04762C DD 17 0F    0181*       ld de,(ix+bar_y)
04762F 19          0182*       add hl,de
047630 7D          0183*       ld a,l
047631 E6 FC       0184*       and %11111100 ; round to nearest 4 pixels
047633 6F          0185*       ld l,a
047634 EB          0186*       ex de,hl
047635 CD D8 16 04 0187*       call vdu_plot_bmp
047639 C9          0188*       ret
04763A             0189*   ; end bar_update_v
04763A             0190*   
04763A             0191*   ; update a horizontal bar display
04763A             0192*   ; inputs: ix points to bar structure
04763A             0193*   ;         bar_val set by caller
04763A             0194*   ; prerequisite: bar_init called before first use
04763A             0195*   bar_update_h:
04763A             0196*   ; set gfx viewport
04763A DD E5       0197*       push ix ; preserve pointer
04763C DD 07 03    0198*       ld bc,(ix+bar_x0)
04763F DD 17 06    0199*       ld de,(ix+bar_y0)
047642 DD 31 0C    0200*       ld iy,(ix+bar_y1)
047645 DD 37 09    0201*       ld ix,(ix+bar_x1)
047648 CD 27 13 04 0202*       call vdu_set_gfx_viewport
04764C DD E1       0203*       pop ix ; restore pointer
04764E             0204*   ; select the color based on the value thresholds
04764E DD 17 00    0205*       ld de,(ix+bar_val)
047651 21 EF FF FF 0206*       ld hl,-bar_red
047655 19          0207*       add hl,de
047656 D2 73 76 04 0208*       jp nc,@red
04765A 21 DF FF FF 0209*       ld hl,-bar_yellow
04765E 19          0210*       add hl,de
04765F D2 6B 76 04 0211*       jp nc,@yellow
047663 21 02 00 00 0212*       ld hl,BUF_BAR_H_2 ; green
047667 C3 77 76 04 0213*       jp @select
04766B             0214*   @yellow:
04766B 21 01 00 00 0215*       ld hl,BUF_BAR_H_1 ; yellow
04766F C3 77 76 04 0216*       jp @select
047673             0217*   @red:
047673 21 00 00 00 0218*       ld hl,BUF_BAR_H_0 ; red
047677             0219*   @select:
047677 CD 7C 13 04 0220*       call vdu_buff_select
04767B             0221*   ; compute x-plot position
04767B DD 27 00    0222*       ld hl,(ix+bar_val)
04767E DD 07 0F    0223*       ld bc,(ix+bar_x)
047681 09          0224*       add hl,bc
047682 7D          0225*       ld a,l
047683 E6 FC       0226*       and %11111100 ; round to nearest 4 pixels
047685 6F          0227*       ld l,a
047686 E5          0228*       push hl
047687 C1          0229*       pop bc
047688             0230*   ; get y-plot position
047688 DD 17 06    0231*       ld de,(ix+bar_y0)
04768B CD D8 16 04 0232*       call vdu_plot_bmp
04768F C9          0233*       ret
047690             0234*   ; end bar_update_h
047690             0060        include "player_fuel.inc"
047690             0001*   
047690             0002*   bar_fuel:
047690 00 00 00    0003*       dl 0 ; value
047693 30 00 00    0004*       dl 48 ; x0
047696 08 01 00    0005*       dl 264 ; y0
047699 6F 00 00    0006*       dl 48+63 ; x1
04769C 0F 01 00    0007*       dl 264+7 ; y1
04769F F0 FF FF    0008*       dl 48-64 ; x-plot coordinate
0476A2             0009*   
0476A2             0010*   init_bar_fuel:
0476A2 3A BF 76 04 0011*       ld a,(discharge_fuel_timer_max)
0476A6 32 BE 76 04 0012*       ld (discharge_fuel_timer),a
0476AA DD 21 90 76 0013*       ld ix,bar_fuel
       04          
0476AF 3A BD 76 04 0014*       ld a,(player_fuel_max)
0476B3 DD 77 00    0015*       ld (ix+bar_val),a
0476B6 CD 3A 76 04 0016*       call bar_update_h
0476BA C9          0017*       ret
0476BB             0018*   ; end init_bar_fuel
0476BB             0019*   
0476BB 40          0020*   player_fuel: db 64 ; integer
0476BC 00          0021*   player_fuel_last: db 0 ; integer
0476BD 40          0022*   player_fuel_max: db 64 ; integer
0476BE 00          0023*   discharge_fuel_timer: db 0
0476BF 40          0024*   discharge_fuel_timer_max: db 64 ;
0476C0             0025*   discharge_fuel:
0476C0             0026*   ; check fuel timer
0476C0 21 BE 76 04 0027*       ld hl,discharge_fuel_timer
0476C4 35          0028*       dec (hl)
0476C5 C0          0029*       ret nz ; not time to discharge fuel so return
0476C6             0030*   ; reset fuel discharge timer
0476C6 3A BF 76 04 0031*       ld a,(discharge_fuel_timer_max)
0476CA 77          0032*       ld (hl),a
0476CB             0033*   ; discharge fuel
0476CB 21 BB 76 04 0034*       ld hl,player_fuel
0476CF 35          0035*       dec (hl)
0476D0 CA D9 76 04 0036*       jp z,@no_fuel
0476D4 FA D9 76 04 0037*       jp m,@no_fuel
0476D8 C9          0038*       ret ; fuel not zero so return
0476D9             0039*   @no_fuel:
0476D9 36 00       0040*       ld (hl),0 ; TODO: implement out-of-fuel handler
0476DB C9          0041*       ret
0476DC             0042*   ; end discharge_fuel
0476DC             0043*   
0476DC             0044*   draw_fuel:
0476DC CD C0 76 04 0045*       call discharge_fuel
0476E0 21 BC 76 04 0046*       ld hl,player_fuel_last
0476E4 3A BB 76 04 0047*       ld a,(player_fuel)
0476E8 BE          0048*       cp (hl)
0476E9 C8          0049*       ret z ; no change to update
0476EA 77          0050*       ld (hl),a
0476EB DD 21 90 76 0051*       ld ix,bar_fuel
       04          
0476F0 DD 77 00    0052*       ld (ix+bar_val),a ; TODO: this is redundant
0476F3 CD 3A 76 04 0053*       call bar_update_h
0476F7 C9          0054*       ret
0476F8             0055*   ; end draw_fuel
0476F8             0061        include "player_input.inc"
0476F8             0001*   ; UART ports for reading joystick input
0476F8             0002*   ; bit tests: 0 means actuated, 1 means not actuated
0476F8             0003*   portC: 	EQU 	$9E ; reads dpad input
0476F8             0004*   joy1_u: equ 1
0476F8             0005*   joy1_d: equ 3
0476F8             0006*   joy1_l: equ 5
0476F8             0007*   joy1_r: equ 7
0476F8             0008*   portD: 	EQU 	$A2 ; reads buttons
0476F8             0009*   btn1_a: equ 5
0476F8             0010*   
0476F8             0011*   ; process player keyboard input, set player bitmap
0476F8             0012*   ; velocities and draw player bitmap at updated coordinates
0476F8             0013*   ; Inputs: player_x/y set at desired position
0476F8             0014*   ; Returns: player bitmap drawn at updated position
0476F8             0015*   ; Destroys: probably everything except maybe iy
0476F8             0016*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
0476F8             0017*   ; TODO: requires sprite implementation
0476F8             0018*   player_input:
0476F8             0019*   ; point to player sprite record
0476F8 FD 21 30 95 0020*       ld iy,player_begin
       04          
0476FD FD 22 A0 79 0021*       ld (table_pointer),iy
       04          
047702             0022*   ; reset player component velocities to zero as the default
047702 21 00 00 00 0023*       ld hl,0
047706 FD 2F 07    0024*       ld (iy+sprite_xvel),hl
047709 FD 2F 0A    0025*       ld (iy+sprite_yvel),hl
04770C             0026*   ; make ship the active sprite
04770C FD 7E 00    0027*       ld a,(iy+sprite_id)
04770F CD 79 17 04 0028*       call vdu_sprite_select
047713             0029*   ; check for keypresses and branch accordingly
047713             0030*       MOSCALL    mos_getkbmap ;ix = pointer to MOS virtual keys table
047713 3E 1E       0001*M1 			LD	A, function
047715 5B CF       0002*M1 			RST.LIL	08h
047717             0031*   ; do player directional input
047717 AF          0032*       xor a ; clear flags
047718 DB 9E       0033*       in a,(portC) ; read dpad input
04771A 57          0034*       ld d,a ; save dpad input
04771B 3E 01       0035*       ld a,1 ; set ship's default animation to center
04771D             0036*   ; 26 Left: move player left
04771D DD CB 03 4E 0037*       bit 1,(ix+3)
047721 C2 2F 77 04 0038*       jp nz,@F
047725             0039*   ; test dpad left
047725 CB 6A       0040*       bit joy1_l,d
047727 CA 2F 77 04 0041*       jp z,@F
04772B C3 3B 77 04 0042*       jp @right
04772F             0043*   @@:
04772F FD 27 07    0044*       ld hl,(iy+sprite_xvel)
047732 01 00 FD FF 0045*       ld bc,-player_speed
047736 09          0046*       add hl,bc
047737 FD 2F 07    0047*       ld (iy+sprite_xvel),hl
04773A 3D          0048*       dec a ; set ship's animation to left
04773B             0049*   @right:
04773B             0050*   ; 122 Right: move player right
04773B DD CB 0F 4E 0051*       bit 1,(ix+15)
04773F C2 4D 77 04 0052*       jp nz,@F
047743             0053*   ; test dpad right
047743 CB 7A       0054*       bit joy1_r,d
047745 CA 4D 77 04 0055*       jp z,@F
047749 C3 59 77 04 0056*       jp @up
04774D             0057*   @@:
04774D FD 27 07    0058*       ld hl,(iy+sprite_xvel)
047750 01 00 03 00 0059*       ld bc,player_speed
047754 09          0060*       add hl,bc
047755 FD 2F 07    0061*       ld (iy+sprite_xvel),hl
047758 3C          0062*       inc a ; set ship's animation to right
047759             0063*   @up:
047759             0064*   ; 58 Up: move player up
047759 DD CB 07 4E 0065*       bit 1,(ix+7)
04775D C2 6B 77 04 0066*       jp nz,@F
047761             0067*   ; test dpad up
047761 CB 4A       0068*       bit joy1_u,d
047763 CA 6B 77 04 0069*       jp z,@F
047767 C3 76 77 04 0070*       jp @dn
04776B             0071*   @@:
04776B FD 27 0A    0072*       ld hl,(iy+sprite_yvel)
04776E 01 00 FD FF 0073*       ld bc,-player_speed
047772 09          0074*       add hl,bc
047773 FD 2F 0A    0075*       ld (iy+sprite_yvel),hl
047776             0076*   @dn:
047776             0077*   ; 42 Down: move player down
047776 DD CB 05 4E 0078*       bit 1,(ix+5)
04777A C2 88 77 04 0079*       jp nz,@F
04777E             0080*   ; test dpad down
04777E CB 5A       0081*       bit joy1_d,d
047780 CA 88 77 04 0082*       jp z,@F
047784 C3 93 77 04 0083*       jp @frame
047788             0084*   @@:
047788 FD 27 0A    0085*       ld hl,(iy+sprite_yvel)
04778B 01 00 03 00 0086*       ld bc,player_speed
04778F 09          0087*       add hl,bc
047790 FD 2F 0A    0088*       ld (iy+sprite_yvel),hl
047793             0089*   @frame:
047793             0090*   ; a should land here loaded with the correct frame
047793 CD DC 17 04 0091*       call vdu_sprite_select_frame
047797             0092*   ; draw player at updated position
047797 FD 21 30 95 0093*       ld iy,player_begin
       04          
04779C FD 22 A0 79 0094*       ld (table_pointer),iy
       04          
0477A1 CD 50 7B 04 0095*       call move_sprite
0477A5 FD 07 01    0096*       ld bc,(iy+sprite_x)
0477A8 FD 17 04    0097*       ld de,(iy+sprite_y)
0477AB CD 45 18 04 0098*       call vdu_sprite_move_abs168
0477AF             0099*   
0477AF             0100*   ; process player laser fire
0477AF             0101*   ; do player fire button input
0477AF             0102*   ; read joystick fire button
0477AF AF          0103*       xor a ; clear flags
0477B0 DB A2       0104*       in a,(portD) ; read joypad fire button input
0477B2 CB 6F       0105*       bit btn1_a,a
0477B4 CA 55 78 04 0106*       jp z,player_spawn_laser
0477B8             0107*   ; 99 Space: fire main weapon
0477B8 DD CB 0C 56 0108*       bit 2,(ix+12)
0477BC C2 55 78 04 0109*       jp nz,player_spawn_laser
0477C0             0110*   ; no fire button pressed so go home
0477C0 C9          0111*       ret
0477C1             0112*   ; end player_input
0477C1             0062        include "player_laser.inc"
0477C1             0001*   laser_defaults:
0477C1 06          0002*       db player_air        ; type
0477C2 4A 01 00    0003*       dl BUF_LASER_A	    ; base_bufferId
0477C5 B2 78 04    0004*       dl move_player_laser	; move_program
0477C8 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
0477C9 05          0006*       db 5	                ; dim_x
0477CA 0D          0007*       db 13                   ; dim_y
0477CB 01          0008*       db 1                    ; num_orientations
0477CC 02          0009*       db 2                    ; num_animations
0477CD 00          0010*       db 0	                ; animation
0477CE 02          0011*       db laser_animation_timer_reset ; animation_timer
0477CF 00          0012*       db 0	                ; move_timer
0477D0 00          0013*       db 0	                ; move_step
0477D1 00          0014*       db 0	                ; points
0477D2 00          0015*       db 0	                ; shield_damage
0477D3 00          0016*       db 0                    ; frame
0477D4             0017*   
0477D4             0018*   
0477D4             0019*   player_lasers_max: equ 4
0477D4             0020*   laser_speed: equ 4*256 ; 6 pixels per frame 16.8 fixed
0477D4             0021*   tmr_laser: ds 6 ; rate timer for firing laser
       FF FF FF FF 
       FF FF 
0477DA 0C 00 00    0022*   tmr_laser_reset: dl 120/10
0477DD             0023*   laser_animation_timer_reset: equ 2 ; animate every two frames
0477DD             0024*   
0477DD 40          0025*   laser_power: db 64 ; integer
0477DE 00          0026*   laser_power_last: db 0 ; integer
0477DF 40          0027*   laser_power_max: db 64 ; integer
0477E0 04          0028*   laser_power_per_shot: db 4 ; integer
0477E1 00          0029*   charge_laser_timer: db 0
0477E2 06          0030*   charge_laser_timer_max: db 6
0477E3             0031*   bar_laser:
0477E3 00 00 00    0032*       dl 0 ; value
0477E6 08 00 00    0033*       dl 8 ; x0
0477E9 30 01 00    0034*       dl 304 ; y0
0477EC 0F 00 00    0035*       dl 8+7 ; x1
0477EF 6F 01 00    0036*       dl 304+63 ; y1
0477F2 F0 00 00    0037*       dl 304-64 ; y-plot coordinate
0477F5             0038*   
0477F5             0039*   init_bar_laser:
0477F5 3A E2 77 04 0040*       ld a,(charge_laser_timer_max)
0477F9 32 E1 77 04 0041*       ld (charge_laser_timer),a
0477FD DD 21 E3 77 0042*       ld ix,bar_laser
       04          
047802 3A DF 77 04 0043*       ld a,(laser_power_max)
047806 DD 77 00    0044*       ld (ix+bar_val),a
047809 CD DE 75 04 0045*       call bar_update_v
04780D C9          0046*       ret
04780E             0047*   ; end init_bar_laser
04780E             0048*   
04780E             0049*   init_player_laser:
04780E             0050*   ; set pointer to laser sprite table
04780E FD 21 30 94 0051*       ld iy,player_weapons_begin
       04          
047813 FD 7E 00    0052*       ld a,(iy+sprite_id) ; sprite id
047816 1E 04       0053*       ld e,player_lasers_max ; sprite loop counter
047818             0054*   ; define laser sprites
047818             0055*   @sprites_loop:
047818 F5          0056*       push af
047819 D5          0057*       push de
04781A CD 79 17 04 0058*   	call vdu_sprite_select
04781E CD 8C 17 04 0059*   	call vdu_sprite_clear_frames
047822 21 4A 01 00 0060*   	ld hl,BUF_LASER_A
047826 06 02       0061*   	ld b,2 ; two bitmaps for laser
047828             0062*   @frames_loop:
047828 C5          0063*   	push bc
047829 E5          0064*   	push hl
04782A CD CE 18 04 0065*   	call vdu_sprite_add_buff
04782E E1          0066*   	pop hl
04782F 23          0067*   	inc hl
047830 C1          0068*   	pop bc
047831 10 F5       0069*   	djnz @frames_loop
047833 D1          0070*       pop de ; sprite loop counter
047834 F1          0071*       pop af ; sprite id
047835 3C          0072*       inc a
047836 1D          0073*       dec e
047837 C2 18 78 04 0074*       jp nz,@sprites_loop
04783B             0075*   ; set laser firing timer to zero
04783B FD 21 D4 77 0076*       ld iy,tmr_laser
       04          
047840 21 00 00 00 0077*       ld hl,0
047844 CD E0 11 04 0078*       call timestamp_tmr_set
047848 C9          0079*       ret
047849             0080*   ; end init_player_laser
047849             0081*   
047849             0082*   player_move_weapons:
047849             0083*   ; initialize pointers and loop counter
047849 FD 21 30 94 0084*       ld iy,player_weapons_begin ; set iy to first record in table
       04          
04784E 06 04       0085*       ld b,player_lasers_max ; loop counter
047850 CD CF 7A 04 0086*       call move_sprite_group
047854 C9          0087*       ret
047855             0088*   ; end player_move_weapons
047855             0089*   
047855             0090*   player_spawn_laser:
047855             0091*    ; check laser spawn timer
047855 FD 21 D4 77 0092*       ld iy,tmr_laser
       04          
04785A CD EB 11 04 0093*       call timestamp_tmr_get
04785E F0          0094*       ret p ; not time to fire
04785F             0095*   ; check laser power
04785F 3A DD 77 04 0096*       ld a,(laser_power)
047863 21 E0 77 04 0097*       ld hl,laser_power_per_shot
047867 96          0098*       sub (hl) ; units of power per laser shot
047868 D8          0099*       ret c ; not enough power to fire
047869             0100*   ; update power to reflect firing
047869 32 DD 77 04 0101*       ld (laser_power),a
04786D             0102*   ; reset timer
04786D 2A DA 77 04 0103*       ld hl,(tmr_laser_reset)
047871 CD E0 11 04 0104*       call timestamp_tmr_set
047875             0105*   ; fire the laser
047875 DD 21 30 94 0106*       ld ix,player_weapons_begin
       04          
04787A 06 04       0107*       ld b,player_lasers_max
04787C FD 21 30 95 0108*       ld iy,player_begin
       04          
047881 FD 22 A0 79 0109*       ld (table_pointer),iy
       04          
047886 21 C1 77 04 0110*       ld hl,laser_defaults
04788A CD 9D 7A 04 0111*       call spawn_sprite_from_sprite
04788E D0          0112*       ret nc ; no carry means no free sprite slots, so we go home
04788F             0113*   ; other specific initialization
04788F             0114*   ; ------------------------------------------------
04788F FD 21 30 95 0115*       ld iy,player_begin
       04          
047894             0116*   ; x-coordinate
047894 FD 27 01    0117*       ld hl,(iy+sprite_x)
047897 11 00 05 00 0118*       ld de,5*256 ; horizontal center with player sprite
04789B 19          0119*       add hl,de
04789C DD 2F 01    0120*       ld (ix+sprite_x),hl
04789F             0121*   ; y-coordinate
04789F FD 27 04    0122*       ld hl,(iy+sprite_y)
0478A2 11 00 FA FF 0123*       ld de,-6*256 ; set laser y a few pixels above player
0478A6 19          0124*       add hl,de
0478A7 DD 2F 04    0125*       ld (ix+sprite_y),hl
0478AA             0126*   ; set laser velocity
0478AA 21 00 FC FF 0127*       ld hl,-laser_speed
0478AE DD 2F 0A    0128*       ld (ix+sprite_yvel),hl
0478B1 C9          0129*       ret
0478B2             0130*   ; end player_spawn_laser
0478B2             0131*   
0478B2             0132*   move_player_laser:
0478B2             0133*   ; run the movement program for the laser
0478B2 CD 50 7B 04 0134*       call move_sprite
0478B6 3A A3 79 04 0135*       ld a,(sprite_screen_edge)
0478BA E6 08       0136*       and a,collide_top ; check collision with top of screen
0478BC CA C4 78 04 0137*       jp z,@F ; still on screen
0478C0 C3 E9 79 04 0138*       jp table_deactivate_sprite
0478C4             0139*   @@: ; check animation timer
0478C4 FD 35 23    0140*       dec (iy+sprite_animation_timer)
0478C7 C2 DB 78 04 0141*       jp nz,@F
0478CB 3E 02       0142*       ld a,laser_animation_timer_reset
0478CD FD 77 23    0143*       ld (iy+sprite_animation_timer),a
0478D0 FD 7E 00    0144*       ld a,(iy+sprite_id)
0478D3 CD 79 17 04 0145*       call vdu_sprite_select
0478D7 CD C0 17 04 0146*       call vdu_sprite_next_frame
0478DB             0147*   @@: ; all done
0478DB C9          0148*       ret
0478DC             0149*   ; end move_player_laser
0478DC             0150*   
0478DC             0151*   charge_laser:
0478DC             0152*   ; check laser timer
0478DC 21 E1 77 04 0153*       ld hl,charge_laser_timer
0478E0 35          0154*       dec (hl)
0478E1 C0          0155*       ret nz
0478E2 3A E2 77 04 0156*       ld a,(charge_laser_timer_max)
0478E6 77          0157*       ld (hl),a
0478E7 21 DD 77 04 0158*       ld hl,laser_power
0478EB 34          0159*       inc (hl)
0478EC 3E 40       0160*       ld a,64
0478EE BE          0161*       cp (hl)
0478EF D0          0162*       ret nc
0478F0 77          0163*       ld (hl),a
0478F1 C9          0164*       ret
0478F2             0165*   ; end charge_laser
0478F2             0166*   draw_laser:
0478F2 CD DC 78 04 0167*       call charge_laser
0478F6 21 DE 77 04 0168*       ld hl,laser_power_last
0478FA 3A DD 77 04 0169*       ld a,(laser_power)
0478FE BE          0170*       cp (hl)
0478FF C8          0171*       ret z ; no change to update
047900 77          0172*       ld (hl),a
047901 DD 21 E3 77 0173*       ld ix,bar_laser
       04          
047906 DD 77 00    0174*       ld (ix+bar_val),a ; TODO: this is redundant
047909 CD DE 75 04 0175*       call bar_update_v
04790D C9          0176*       ret
04790E             0063        include "player_score.inc"
04790E             0001*   ; scores are unsigned integers
04790E 00 00 00    0002*   player_score: dl 0
047911 00 00 00    0003*   player_score_last: dl 0 ; if equal to player_score, no need to update
047914 00 00 00    0004*   player_starting_score: dl 0 ; to reset after restarting a map
047917             0005*   
047917             0006*   ; inputs: iy set to sprite/tile record being tallied
047917             0007*   ; outputs: hl,player_score = updated score
047917             0008*   ; destroys: hl,de
047917             0009*   update_score:
047917 11 00 00 00 0010*       ld de,0 ; clear deu and d
04791B FD 5E 26    0011*       ld e,(iy+sprite_points)
04791E 2A 0E 79 04 0012*       ld hl,(player_score)
047922 19          0013*       add hl,de
047923 22 0E 79 04 0014*       ld (player_score),hl
047927 C9          0015*       ret
047928             0016*   ; end update_score
047928             0017*   
047928             0018*   ; text coordinates for score display
047928             0019*   score_x: equ 50
047928             0020*   score_y: equ 33
047928             0021*   ; inputs: none
047928             0022*   print_score:
047928 2A 11 79 04 0023*       ld hl,(player_score_last)
04792C ED 5B 0E 79 0024*       ld de,(player_score)
       04          
047931 ED 53 11 79 0025*       ld (player_score_last),de
       04          
047936 AF          0026*       xor a ; clear carry
047937 ED 52       0027*       sbc hl,de
047939 C8          0028*       ret z ; no change to update
04793A 0E 32       0029*       ld c,score_x
04793C 06 21       0030*       ld b,score_y
04793E CD 73 12 04 0031*       call vdu_move_cursor
047942 2A 0E 79 04 0032*       ld hl,(player_score)
047946 CD AF 00 04 0033*       call printDec
04794A C9          0034*       ret
04794B             0035*   ; end print_score
04794B             0064        include "player_shields.inc"
04794B             0001*   
04794B 40          0002*   player_shields: db 64
04794C             0003*   ; player_shields_max: db 64
04794C 08          0004*   player_shields_max: db 8 ; DEBUG
04794D 00          0005*   player_shields_last: db 0
04794E             0006*   bar_shields:
04794E 00 00 00    0007*       dl 0 ; value
047951 F0 01 00    0008*       dl 496 ; x0
047954 30 01 00    0009*       dl 304 ; y0
047957 F7 01 00    0010*       dl 496+7 ; x1
04795A 6F 01 00    0011*       dl 304+63 ; y1
04795D F0 00 00    0012*       dl 304-64 ; y-plot coordinate
047960             0013*   
047960             0014*   init_bar_shields:
047960 DD 21 4E 79 0015*       ld ix,bar_shields
       04          
047965 2A 4C 79 04 0016*       ld hl,(player_shields_max)
047969 DD 2F 00    0017*       ld (ix+bar_val),hl
04796C CD DE 75 04 0018*       call bar_update_v
047970 C9          0019*       ret
047971             0020*   ; end init_bar_shields
047971             0021*   
047971             0022*   ; inputs: iy set to sprite/tile record being tallied
047971             0023*   ; outputs: hl,player_shields = updated shields
047971             0024*   ; destroys: hl,de
047971             0025*   update_shields:
047971 FD 6E 27    0026*       ld l,(iy+sprite_shield_damage)
047974 3A 4B 79 04 0027*       ld a,(player_shields)
047978 85          0028*       add a,l
047979 F2 7E 79 04 0029*       jp p,@have_shields
04797D AF          0030*       xor a ; set to zero
04797E             0031*   @have_shields:
04797E 32 4B 79 04 0032*       ld (player_shields),a
047982 B7          0033*       or a ; check for zero
047983 CA 85 74 04 0034*       jp z,kill_player
047987 C9          0035*       ret
047988             0036*   ; end update_shields
047988             0037*   
047988             0038*   draw_shields:
047988 21 4D 79 04 0039*       ld hl,player_shields_last
04798C 3A 4B 79 04 0040*       ld a,(player_shields)
047990 BE          0041*       cp (hl)
047991 C8          0042*       ret z ; no change to update
047992 77          0043*       ld (hl),a
047993 DD 21 4E 79 0044*       ld ix,bar_shields
       04          
047998 DD 77 00    0045*       ld (ix+bar_val),a ; TODO: this is redundant
04799B CD DE 75 04 0046*       call bar_update_v
04799F C9          0047*       ret
0479A0             0065        include "screen.inc"
0479A0             0001*   
0479A0             0002*   screen_right: equ 511
0479A0             0003*   screen_bottom: equ 383
0479A0             0004*   origin_top: equ 48
0479A0             0005*   origin_left: equ 128
0479A0             0006*   field_top: equ 0
0479A0             0007*   field_bottom: equ screen_bottom-origin_top
0479A0             0008*   field_left: equ 0
0479A0             0009*   field_right: equ 255
0479A0             0010*   sprite_top: equ field_top
0479A0             0011*   sprite_bottom: equ field_bottom-15
0479A0             0012*   sprite_left: equ field_left
0479A0             0013*   sprite_right: equ field_right-15
0479A0             0014*   tile_bottom: equ screen_bottom+1
0479A0             0066        include "sprites.inc"
0479A0             0001*   ; sprite_type
0479A0             0002*   enemy_dead: equ 0
0479A0             0003*   enemy_air: equ 1
0479A0             0004*   enemy_ground: equ 2
0479A0             0005*   enemy_projectile: equ 3
0479A0             0006*   explosion: equ 4
0479A0             0007*   player: equ 5
0479A0             0008*   player_air: equ 6
0479A0             0009*   player_ground: equ 7
0479A0             0010*   
0479A0             0011*   ; ###### SPRITE TABLE FIELD INDICES ######
0479A0             0012*   table_record_size:         equ  64; bytes per sprite record
0479A0             0013*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
0479A0             0014*   ; sprite state variables
0479A0             0015*   sprite_state_variables:    equ   1; beginning of sprite state variables
0479A0             0016*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
0479A0             0017*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
0479A0             0018*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
0479A0             0019*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
0479A0             0020*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
0479A0             0021*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
0479A0             0022*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
0479A0             0023*   ; sprite definition variables
0479A0             0024*   sprite_definitions:        equ  22; beginnning of sprite definition variables
0479A0             0025*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
0479A0             0026*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
0479A0             0027*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
0479A0             0028*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
0479A0             0029*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
0479A0             0030*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
0479A0             0031*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
0479A0             0032*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
0479A0             0033*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
0479A0             0034*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
0479A0             0035*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
0479A0             0036*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
0479A0             0037*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
0479A0             0038*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
0479A0             0039*   sprite_frame:              equ  40; 1 bytes ;current animation frame
0479A0             0040*   
0479A0             0041*   ; ###### SPRITE TABLE VARIABLES ######
0479A0             0042*   ; pointer to top address of current record, initialized to table_base
0479A0 30 94 04    0043*   table_pointer: dl table_base
0479A3             0044*   
0479A3             0045*   ; flag indicating collision with screen edge
0479A3 00          0046*   sprite_screen_edge: db #00
0479A4             0047*   
0479A4             0048*   ; ######### COLLISION SPRITE PARAMETERS ##########
0479A4             0049*   ; integer coordinates are all that are needed for collision calculations
0479A4 00          0050*   collision_x: db 0x00
0479A5 00          0051*   collision_y: db 0x00
0479A6 00          0052*   collision_dim_x: db 0x00
0479A7 00          0053*   collision_dim_y: db 0x00
0479A8             0054*   
0479A8             0055*   ; scratch variables
0479A8 00          0056*   x: db 0x00 ; 8-bit signed integer
0479A9 00          0057*   y: db 0x00 ; 8-bit signed integer
0479AA 00 00 00    0058*   x0: dl 0x000000 ; 16.8 signed fixed place
0479AD 00 00 00    0059*   y0: dl 0x000000 ; 16.8 signed fixed place
0479B0 00 00 00    0060*   incx1: dl 0x000000 ; 16.8 signed fixed place
0479B3 00 00 00    0061*   incy1: dl 0x000000 ; 16.8 signed fixed place
0479B6 00 00 00    0062*   incx2: dl 0x000000 ; 16.8 signed fixed place
0479B9 00 00 00    0063*   incy2: dl 0x000000 ; 16.8 signed fixed place
0479BC             0064*   
0479BC             0065*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
0479BC 00 00 00    0066*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
0479BF 00 00 00    0067*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
0479C2 00 00 00    0068*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
0479C5             0069*   
0479C5             0070*   table_init:
0479C5             0071*   ; clear the sprite table
0479C5 AF          0072*       xor a ; write zeroes to sprite table
0479C6 21 30 94 04 0073*       ld hl,table_base ; address to copy from
0479CA 01 00 05 00 0074*       ld bc,table_end-table_base ; number of bytes to clear
0479CE CD 42 03 04 0075*       call clear_mem
0479D2             0076*   ; write sprite ids
0479D2 DD 21 30 94 0077*       ld ix,table_base
       04          
0479D7 AF          0078*       xor a ; sprite id
0479D8 0E 00       0079*       ld c,0 ; sprite type
0479DA 06 14       0080*       ld b,table_num_records ; loop counter
0479DC             0081*   @loop:
0479DC DD 77 00    0082*       ld (ix+sprite_id),a
0479DF DD 71 16    0083*       ld (ix+sprite_type),c
0479E2 ED 32 40    0084*       lea ix,ix+table_record_size
0479E5 3C          0085*       inc a
0479E6 10 F4       0086*       djnz @loop
0479E8 C9          0087*       ret
0479E9             0088*   ; end table_init
0479E9             0089*   
0479E9             0090*   ; deactivate the sprite with the given id
0479E9             0091*   ; inputs: iy set to sprite record
0479E9             0092*   ; outputs: nothing
0479E9             0093*   ; destroys: a,hl
0479E9             0094*   table_deactivate_sprite:
0479E9 FD 7E 00    0095*       ld a,(iy+sprite_id) ; get spriteId
0479EC CD 79 17 04 0096*       call vdu_sprite_select ; select sprite
0479F0 CD FD 17 04 0097*       call vdu_sprite_hide
0479F4 FD CB 1D B6 0098*       res sprite_alive,(iy+sprite_collisions)
0479F8 FD CB 1D BE 0099*       res sprite_just_died,(iy+sprite_collisions)
0479FC C9          0100*       ret
0479FD             0101*   ; end table_deactivate_sprite
0479FD             0102*   
0479FD             0103*   sprites_init:
0479FD             0104*   ; initialize sprites
0479FD CD AD 18 04 0105*   	call vdu_sprite_reset ; clear sprite data in vdp
047A01 AF          0106*   	xor a ; loop counter / sprite id
047A02             0107*   @sprite_loop:
047A02 F5          0108*   	push af ; save loop counter / sprite id
047A03 CD 79 17 04 0109*   	call vdu_sprite_select
047A07 21 00 01 00 0110*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
047A0B CD CE 18 04 0111*   	call vdu_sprite_add_buff
047A0F F1          0112*   	pop af ; restore loop counter / sprite id
047A10 3C          0113*       inc a
047A11 FE 14       0114*       cp table_num_records
047A13 C2 02 7A 04 0115*       jp nz,@sprite_loop
047A17 CD AD 17 04 0116*   	call vdu_sprite_activate
047A1B             0117*   
047A1B             0118*   ; define player sprite
047A1B 3A 30 95 04 0119*   	ld a,(player_begin+sprite_id)
047A1F CD 79 17 04 0120*   	call vdu_sprite_select
047A23 CD 8C 17 04 0121*   	call vdu_sprite_clear_frames
047A27 21 6F 01 00 0122*   	ld hl,BUF_SHIP_0L
047A2B 01 03 00 00 0123*   	ld bc,3 ; three bitmaps for player ship
047A2F             0124*   @sprite_player_loop:
047A2F C5          0125*   	push bc
047A30 E5          0126*   	push hl
047A31 CD CE 18 04 0127*   	call vdu_sprite_add_buff
047A35 E1          0128*   	pop hl
047A36 23          0129*   	inc hl
047A37 C1          0130*   	pop bc
047A38 10 F5       0131*   	djnz @sprite_player_loop
047A3A             0132*   
047A3A             0133*   ; define player weapon sprites
047A3A CD 0E 78 04 0134*       call init_player_laser
047A3E             0135*   
047A3E             0136*   ; define enemy sprites
047A3E CD 62 20 04 0137*       call init_enemy_seekers
047A42 CD 6D 1F 04 0138*       call init_enemy_fireballs
047A46             0139*   
047A46             0140*   ; define explosion sprites
047A46 CD 16 21 04 0141*       call init_explosions
047A4A C9          0142*       ret
047A4B             0143*   ; end sprites_init
047A4B             0144*   
047A4B             0145*   ; gets the next available sprite id for a particular sprite group
047A4B             0146*   ; inputs; ix = pointer to sprite group, b = number of records in sprite group
047A4B             0147*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
047A4B             0148*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047A4B             0149*   ; destroys: a,b,c,hl,ix
047A4B             0150*   table_get_next_id:
047A4B             0151*   @loop:
047A4B DD CB 1D 76 0152*       bit sprite_alive,(ix+sprite_collisions)
047A4F 28 07       0153*       jr z,@found
047A51 ED 32 40    0154*       lea ix,ix+table_record_size
047A54 10 F5       0155*       djnz @loop
047A56             0156*   @notfound:
047A56 AF          0157*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
047A57 C9          0158*       ret
047A58             0159*   @found:
047A58             0160*   ; return sprite id
047A58 DD 7E 00    0161*       ld a,(ix+sprite_id)
047A5B 37          0162*       scf ; sets carry flag indicating we found a free sprite
047A5C C9          0163*       ret ; done
047A5D             0164*   ; end table_get_next_id
047A5D             0165*   
047A5D             0166*   ; create a new sprite at the prescribed coordinates
047A5D             0167*   ; inputs: hl = pointer to new sprite default settings, ub.c, ud.e = x,y position
047A5D             0168*   ;         ix = pointer to sprite group, a = number of records in sprite group
047A5D             0169*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
047A5D             0170*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047A5D             0171*   spawn_sprite_from_coords:
047A5D ED 43 97 7A 0172*       ld (@sprite_x),bc ; store x-coordinate
       04          
047A62 ED 53 9A 7A 0173*       ld (@sprite_y),de ; store y-coordinate
       04          
047A67 47          0174*       ld b,a ; number of records in sprite group
047A68 E5          0175*       push hl ; back up pointer to new sprite defaults
047A69 CD 4B 7A 04 0176*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
047A6D E1          0177*       pop hl ; restore pointer to new sprite defaults
047A6E D0          0178*       ret nc ; no carry means no free sprite slots, so we go home
047A6F             0179*   ; copy default settings to new sprite
047A6F DD E5       0180*       push ix ; back up pointer to new sprite record
047A71 ED 32 16    0181*       lea ix,ix+sprite_definitions ; bump pointer to copy to
047A74 DD E5       0182*       push ix ; pointer to default sprite settings
047A76 D1          0183*       pop de ; address to copy to
047A77 01 2A 00 00 0184*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
047A7B ED B0       0185*       ldir ; copies defaults to new sprite record
047A7D DD E1       0186*       pop ix ; restore pointer to new sprite record
047A7F             0187*   ; copy sprite position from existing sprite
047A7F 2A 97 7A 04 0188*       ld hl,(@sprite_x)
047A83 DD 2F 01    0189*       ld (ix+sprite_x),hl
047A86 2A 9A 7A 04 0190*       ld hl,(@sprite_y)
047A8A DD 2F 04    0191*       ld (ix+sprite_y),hl
047A8D             0192*   ; return to caller
047A8D DD CB 16 FE 0193*       set 7,(ix+sprite_type) ; set just spawned flag
047A91 DD CB 1D F6 0194*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
047A95 37          0195*       scf ; set carry flag to indicate success
047A96 C9          0196*       ret
047A97 00 00 00    0197*   @sprite_x: dl 0 ; new sprite x-coordinate
047A9A 00 00 00    0198*   @sprite_y: dl 0 ; new sprite y-coordinate
047A9D             0199*   ; end spawn_sprite_from_coords
047A9D             0200*   
047A9D             0201*   ; create a new sprite at the same location as an existing sprite
047A9D             0202*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
047A9D             0203*   ;         ix = pointer to sprite group, b = number of records in sprite group
047A9D             0204*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
047A9D             0205*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047A9D             0206*   spawn_sprite_from_sprite:
047A9D E5          0207*       push hl ; back up pointer to new sprite defaults
047A9E CD 4B 7A 04 0208*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
047AA2 E1          0209*       pop hl ; restore pointer to new sprite defaults
047AA3 D0          0210*       ret nc ; no carry means no free sprite slots, so we go home
047AA4             0211*   ; copy default settings to new sprite
047AA4 DD E5       0212*       push ix ; back up pointer to new sprite record
047AA6 ED 32 16    0213*       lea ix,ix+sprite_definitions ; bump pointer to copy to
047AA9 DD E5       0214*       push ix ; pointer to default sprite settings
047AAB D1          0215*       pop de ; address to copy to
047AAC 01 2A 00 00 0216*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
047AB0 ED B0       0217*       ldir ; copies defaults to new sprite record
047AB2 DD E1       0218*       pop ix ; restore pointer to new sprite record
047AB4             0219*   ; copy sprite position from existing sprite
047AB4 FD 2A A0 79 0220*       ld iy,(table_pointer) ; get existing sprite record
       04          
047AB9 FD 27 01    0221*       ld hl,(iy+sprite_x)
047ABC DD 2F 01    0222*       ld (ix+sprite_x),hl
047ABF FD 27 04    0223*       ld hl,(iy+sprite_y)
047AC2 DD 2F 04    0224*       ld (ix+sprite_y),hl
047AC5             0225*   ; return to caller
047AC5 DD CB 16 FE 0226*       set 7,(ix+sprite_type) ; set just spawned flag
047AC9 DD CB 1D F6 0227*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
047ACD 37          0228*       scf ; set carry flag to indicate success
047ACE C9          0229*       ret
047ACF             0230*   ; end spawn_sprite_from_sprite
047ACF             0231*   
047ACF             0232*   ; call the behavior subroutines for a specified sprite group
047ACF             0233*   ; inputs: iy = pointer to sprite group, b = number of records in sprite group
047ACF             0234*   move_sprite_group:
047ACF C5          0235*       push bc ; backup loop counter
047AD0 FD E5       0236*       push iy ; backup table pointer
047AD2             0237*   @move_loop:
047AD2 FD 22 A0 79 0238*       ld (table_pointer),iy ; update table pointer
       04          
047AD7 C5          0239*       push bc ; backup loop counter
047AD8             0240*   ; check top bit of sprite_type to see if sprite is just spawned
047AD8 FD CB 16 7E 0241*       bit 7,(iy+sprite_type)
047ADC C2 11 7B 04 0242*       jp nz,@next_record ; if just spawned, skip to next record
047AE0             0243*   ; check sprite_just_died bit
047AE0 FD CB 1D 7E 0244*       bit sprite_just_died,(iy+sprite_collisions)
047AE4 C2 48 7B 04 0245*       jp nz,@sprite_died ; if just died, deactivate sprite
047AE8             0246*   ; check sprite_alive bit to see if sprite is active
047AE8 FD CB 1D 76 0247*       bit sprite_alive,(iy+sprite_collisions)
047AEC CA 11 7B 04 0248*       jp z,@next_record ; ... skip to next record
047AF0             0249*   ; otherwise move the sprite
047AF0 FD 27 1A    0250*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
047AF3             0251*       CALL_HL ; run the behavior subroutine
047AF3 01 F9 7A 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
047AF7 C5          0002*M1     push bc ; which constitutes the return address
047AF8 E9          0003*M1     jp (hl) ; Jump to the address in HL
047AF9 FD 7E 00    0252*       ld a,(iy+sprite_id) ; get spriteId
047AFC CD 79 17 04 0253*       call vdu_sprite_select ; select sprite
047B00 FD 7E 28    0254*       ld a,(iy+sprite_frame)
047B03 CD DC 17 04 0255*       call vdu_sprite_select_frame
047B07 FD 07 01    0256*       ld bc,(iy+sprite_x)
047B0A FD 17 04    0257*       ld de,(iy+sprite_y)
047B0D CD 45 18 04 0258*       call vdu_sprite_move_abs168
047B11             0259*   ; fall through to @next_record
047B11             0260*   @next_record:
047B11 ED 33 40    0261*       lea iy,iy+table_record_size
047B14 AF          0262*       xor a ; clears carry flag
047B15 32 A3 79 04 0263*       ld (sprite_screen_edge),a ; clear screen edge collision flag
047B19 C1          0264*       pop bc ; get back our loop counter
047B1A 10 B6       0265*       djnz @move_loop ; loop until we've checked all the records
047B1C             0266*   ; reset all just spawned flags
047B1C FD E1       0267*       pop iy ; get back table pointer
047B1E C1          0268*       pop bc ; get back loop counter
047B1F             0269*   @reset_just_spawned:
047B1F C5          0270*       push bc ; back up loop counter
047B20 FD CB 16 7E 0271*       bit 7,(iy+sprite_type) ; check if just spawned
047B24 CA 41 7B 04 0272*       jp z,@F
047B28 FD CB 16 BE 0273*       res 7,(iy+sprite_type) ; clear just spawned flag
047B2C FD 7E 00    0274*       ld a,(iy+sprite_id)
047B2F CD 79 17 04 0275*       call vdu_sprite_select
047B33 FD 07 01    0276*       ld bc,(iy+sprite_x)
047B36 FD 17 04    0277*       ld de,(iy+sprite_y)
047B39 CD 45 18 04 0278*       call vdu_sprite_move_abs168
047B3D CD EF 17 04 0279*       call vdu_sprite_show
047B41             0280*   @@:
047B41 ED 33 40    0281*       lea iy,iy+table_record_size
047B44 C1          0282*       pop bc ; get back loop counter
047B45 10 D8       0283*       djnz @reset_just_spawned
047B47 C9          0284*       ret
047B48             0285*   @sprite_died:
047B48 CD E9 79 04 0286*       call table_deactivate_sprite
047B4C C3 11 7B 04 0287*       jp @next_record
047B50             0288*   ; end move_sprite_group
047B50             0289*   
047B50             0290*   ; compute a sprite's new position based on its component x,y velocities
047B50             0291*   ; with screen boundary checking and update its sprite table record accordingly
047B50             0292*   ; inputs: table_pointer set to sprite record
047B50             0293*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
047B50             0294*   ; destroys: everything
047B50             0295*   ; note: actual rendering of sprite must be handled by caller
047B50             0296*   move_sprite:
047B50 FD 2A A0 79 0297*       ld iy,(table_pointer)
       04          
047B55             0298*   ; x-axis movement
047B55 FD 27 01    0299*       ld hl,(iy+sprite_x)
047B58 FD 17 07    0300*       ld de,(iy+sprite_xvel)
047B5B 19          0301*       add hl,de
047B5C FD 2F 01    0302*       ld (iy+sprite_x),hl
047B5F             0303*   ; y-axis movement
047B5F FD 27 04    0304*       ld hl,(iy+sprite_y)
047B62 FD 17 0A    0305*       ld de,(iy+sprite_yvel)
047B65 19          0306*       add hl,de
047B66 FD 2F 04    0307*       ld (iy+sprite_y),hl
047B69             0308*   ; detect screen edge collisions
047B69 AF          0309*       xor a ; reset screen edge collision flag and clear carry
047B6A 32 A3 79 04 0310*       ld (sprite_screen_edge),a
047B6E             0311*   ; y-axis first since we already have it in hl
047B6E 11 00 00 00 0312*       ld de,-sprite_top*256
047B72 ED 5A       0313*       adc hl,de
047B74 FA 9E 7B 04 0314*       jp m,@top
047B78 ED 52       0315*       sbc hl,de ; hl back to original value
047B7A 11 00 C0 FE 0316*       ld de,-sprite_bottom*256
047B7E ED 5A       0317*       adc hl,de
047B80 F2 A8 7B 04 0318*       jp p,@bottom
047B84             0319*   @xaxis:
047B84 FD 27 01    0320*       ld hl,(iy+sprite_x)
047B87 11 00 00 00 0321*       ld de,-sprite_left*256
047B8B ED 5A       0322*       adc hl,de
047B8D FA C3 7B 04 0323*       jp m,@left
047B91 ED 52       0324*       sbc hl,de ; hl back to original value
047B93 11 00 10 FF 0325*       ld de,-sprite_right*256
047B97 ED 5A       0326*       adc hl,de
047B99 F2 D1 7B 04 0327*       jp p,@right
047B9D             0328*   ; no edge collisions so go home
047B9D C9          0329*       ret
047B9E             0330*   @top:
047B9E 3E 08       0331*       ld a,collide_top
047BA0 21 00 00 00 0332*       ld hl,sprite_top*256
047BA4 C3 AE 7B 04 0333*       jp @collide_y
047BA8             0334*   @bottom:
047BA8 3E 04       0335*       ld a,collide_bottom
047BAA 21 00 40 01 0336*       ld hl,sprite_bottom*256
047BAE             0337*   @collide_y:
047BAE 32 A3 79 04 0338*       ld (sprite_screen_edge),a
047BB2 FD 2F 04    0339*       ld (iy+sprite_y),hl
047BB5             0340*   ; reverse y-axis velocity
047BB5 FD 27 0A    0341*       ld hl,(iy+sprite_yvel)
047BB8 CD 63 04 04 0342*       call neg_hlu
047BBC FD 2F 0A    0343*       ld (iy+sprite_yvel),hl
047BBF             0344*   ; go check for x-axis collisions
047BBF C3 84 7B 04 0345*       jp @xaxis
047BC3             0346*   @left:
047BC3 3A A3 79 04 0347*       ld a,(sprite_screen_edge)
047BC7 F6 02       0348*       or a,collide_left
047BC9 21 00 00 00 0349*       ld hl,sprite_left*256
047BCD C3 DB 7B 04 0350*       jp @collide_x
047BD1             0351*   @right:
047BD1 3A A3 79 04 0352*       ld a,(sprite_screen_edge)
047BD5 F6 01       0353*       or a,collide_right
047BD7 21 00 F0 00 0354*       ld hl,sprite_right*256
047BDB             0355*   @collide_x:
047BDB 32 A3 79 04 0356*       ld (sprite_screen_edge),a
047BDF FD 2F 01    0357*       ld (iy+sprite_x),hl
047BE2             0358*   ; reverse x-axis velocity
047BE2 FD 27 07    0359*       ld hl,(iy+sprite_xvel)
047BE5 CD 63 04 04 0360*       call neg_hlu
047BE9 FD 2F 07    0361*       ld (iy+sprite_xvel),hl
047BEC             0362*   ; final collision flag to a and return
047BEC 3A A3 79 04 0363*       ld a,(sprite_screen_edge)
047BF0 C9          0364*       ret
047BF1             0365*   ; end move_sprite
047BF1             0366*   
047BF1             0367*   sprite_compute_velocities:
047BF1 FD 27 10    0368*       ld hl,(iy+sprite_heading)
047BF4 FD 17 0D    0369*       ld de,(iy+sprite_vel)
047BF7 CD D7 06 04 0370*       call polar_to_cartesian
047BFB FD 2A A0 79 0371*       ld iy,(table_pointer)
       04          
047C00 FD 0F 07    0372*       ld (iy+sprite_xvel),bc ; save x-velocity component
047C03 FD 1F 0A    0373*       ld (iy+sprite_yvel),de ; save y-velocity component
047C06 C9          0374*       ret
047C07             0375*   ; end sprite_compute_velocities
047C07             0376*   
047C07             0377*   ; compute animation frame based on sprite_animation and sprite_heading
047C07             0378*   ; inputs: table_pointer set to sprite record
047C07             0379*   ; outputs: a, sprite_frame set to animation frame
047C07             0380*   ; destroys: a,hl
047C07             0381*   sprite_frame_heading_animation:
047C07 FD 7E 11    0382*       ld a,(iy+sprite_heading+1) ; we want the integer portion
047C0A CB 3F       0383*       srl a ; divide integer portion by 8
047C0C CB 3F       0384*       srl a
047C0E CB 3F       0385*       srl a
047C10 FD 66 22    0386*       ld h,(iy+sprite_animation)
047C13 2E 20       0387*       ld l,32 ; 32 orientation frames per animation
047C15 ED 6C       0388*       mlt hl ; hl = offset from base animation
047C17 85          0389*       add a,l ; modulo256 since sprite_frame is only 1 byte
047C18 FD 77 28    0390*       ld (iy+sprite_frame),a
047C1B C9          0391*       ret
047C1C             0392*   ; end sprite_frame_heading_animation
047C1C             0393*   
047C1C             0394*   ; compute animation frame based on sprite_heading
047C1C             0395*   ; inputs: table_pointer set to sprite record
047C1C             0396*   ; outputs: a, sprite_frame set to animation frame
047C1C             0397*   ; destroys: a,hl
047C1C             0398*   sprite_frame_heading:
047C1C FD 7E 11    0399*       ld a,(iy+sprite_heading+1) ; we want the integer portion
047C1F CB 3F       0400*       srl a ; divide integer portion by 8
047C21 CB 3F       0401*       srl a
047C23 CB 3F       0402*       srl a
047C25 FD 77 28    0403*       ld (iy+sprite_frame),a
047C28 C9          0404*       ret
047C29             0405*   ; end sprite_frame_heading
047C29             0406*   
047C29             0407*   ; load a sprite with animation bitmaps
047C29             0408*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
047C29             0409*   sprite_load_frames:
047C29             0410*   ; back up input parameters
047C29 E5          0411*       push hl ; base bufferId
047C2A C5          0412*       push bc ; bc = number of frames
047C2B CD 8C 17 04 0413*       call vdu_sprite_clear_frames
047C2F C1          0414*       pop bc ; bc = number of frames
047C30 E1          0415*       pop hl ; = base bufferId
047C31             0416*   @load_frames:
047C31 C5          0417*       push bc ; back up loop counter
047C32 E5          0418*       push hl ; back up base bufferId
047C33 CD CE 18 04 0419*       call vdu_sprite_add_buff
047C37 E1          0420*       pop hl ; restore base bufferId
047C38 23          0421*       inc hl ; bump it to the next frame
047C39             0422*   ; decrement loop counter
047C39 C1          0423*       pop bc
047C3A 0B          0424*       dec bc
047C3B 79          0425*       ld a,c
047C3C B7          0426*       or a
047C3D C2 31 7C 04 0427*       jp nz,@load_frames
047C41 78          0428*       ld a,b
047C42 B7          0429*       or a
047C43 C2 31 7C 04 0430*       jp nz,@load_frames
047C47 C9          0431*       ret
047C48             0432*   ; end sprite_load_frames
047C48             0067        include "state.inc"
047C48             0001*   ; Game state variables
047C48 56 7C 04    0002*   game_state:  dl game_main_menu
047C4B             0003*   
047C4B             0004*   do_game:
047C4B 2A 48 7C 04 0005*       ld hl,(game_state)   ; Load the current game state
047C4F             0006*       CALL_HL                ; Call the corresponding state handler
047C4F 01 55 7C 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
047C53 C5          0002*M1     push bc ; which constitutes the return address
047C54 E9          0003*M1     jp (hl) ; Jump to the address in HL
047C55 C9          0007*       ret
047C56             0008*   
047C56             0009*   ; ========================
047C56             0010*   ; Main Game States
047C56             0011*   ; ========================
047C56             0012*   
047C56             0013*   game_main_menu:
047C56             0014*       ; Handle main menu options
047C56             0015*       ; Example: Check input for "Start Game"
047C56 CD ED 7C 04 0016*       call check_input_menu
047C5A C2 17 7D 04 0017*       jp nz, game_init ; Start game on selection
047C5E C9          0018*       ret
047C5F             0019*   
047C5F             0020*   
047C5F             0021*   
047C5F             0022*   game_paused:
047C5F             0023*       ; Pause menu logic
047C5F CD F0 7C 04 0024*       call check_input_pause
047C63 C2 B7 7E 04 0025*       jp nz, game_playing ; Resume game
047C67 CA 56 7C 04 0026*       jp z, game_main_menu ; Exit to main menu
047C6B C9          0027*       ret
047C6C             0028*   
047C6C             0029*   game_level_transition:
047C6C             0030*       ; Handle level transitions
047C6C CD F1 7C 04 0031*       call load_next_level
047C70 21 B7 7E 04 0032*       ld hl, game_playing
047C74 22 48 7C 04 0033*       ld (game_state), hl
047C78 C9          0034*       ret
047C79             0035*   
047C79             0036*   game_over:
047C79 CD 3C 12 04 0037*       call vdu_home_cursor
047C7D CD 5C 00 04 0038*       call printInline
047C81 47 61 6D 65 0039*       asciz "Game Over!\r\nPress any key to continue..."
       20 4F 76 65 
       72 21 0D 0A 
       50 72 65 73 
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 2E 2E 
       00          
047CAA 21 17 7D 04 0040*       ld hl,game_init
047CAE 22 48 7C 04 0041*       ld (game_state),hl
047CB2 C9          0042*       ret
047CB3             0043*   
047CB3             0044*   game_victory:
047CB3             0045*       ; Display victory screen
047CB3 CD F3 7C 04 0046*       call display_victory
047CB7 C2 56 7C 04 0047*       jp nz, game_main_menu ; Return to main menu on input
047CBB C9          0048*       ret
047CBC             0049*   
047CBC             0050*   ; ========================
047CBC             0051*   ; Supporting States
047CBC             0052*   ; ========================
047CBC             0053*   
047CBC             0054*   game_loading:
047CBC             0055*       ; Show loading screen while preparing assets
047CBC CD F4 7C 04 0056*       call load_resources
047CC0 21 17 7D 04 0057*       ld hl, game_init
047CC4 22 48 7C 04 0058*       ld (game_state), hl
047CC8 C9          0059*       ret
047CC9             0060*   
047CC9             0061*   game_cutscene:
047CC9             0062*       ; Play a non-interactive cutscene
047CC9 CD F5 7C 04 0063*       call play_cutscene
047CCD C2 B7 7E 04 0064*       jp nz, game_playing ; Return to gameplay after cutscene
047CD1 C9          0065*       ret
047CD2             0066*   
047CD2             0067*   game_inventory:
047CD2             0068*       ; Open inventory or shop
047CD2 CD F6 7C 04 0069*       call display_inventory
047CD6 C2 B7 7E 04 0070*       jp nz, game_playing ; Return to gameplay after inventory close
047CDA C9          0071*       ret
047CDB             0072*   
047CDB             0073*   game_map:
047CDB             0074*       ; Display map or quest
047CDB CD F7 7C 04 0075*       call display_map
047CDF C2 B7 7E 04 0076*       jp nz, game_playing ; Return to gameplay after map close
047CE3 C9          0077*       ret
047CE4             0078*   
047CE4             0079*   game_exit:
047CE4             0080*       ; Handle exit logic
047CE4 CD F8 7C 04 0081*       call save_game
047CE8 C3 F9 7C 04 0082*       jp exit_game         ; Safely shut down
047CEC C9          0083*       ret
047CED             0084*   
047CED             0085*   ; ========================
047CED             0086*   ; Sub-state branching (Example for player state)
047CED             0087*   ; ========================
047CED             0088*   
047CED             0089*   
047CED             0090*   
047CED             0091*   
047CED             0092*   check_input_menu:
047CED C9          0093*       ret
047CEE             0094*   
047CEE             0095*   update_game_world:
047CEE C9          0096*       ret
047CEF             0097*   
047CEF             0098*   check_game_events:
047CEF C9          0099*       ret
047CF0             0100*   
047CF0             0101*   check_input_pause:
047CF0 C9          0102*       ret
047CF1             0103*   
047CF1             0104*   load_next_level:
047CF1 C9          0105*       ret
047CF2             0106*   
047CF2             0107*   display_game_over:
047CF2 C9          0108*       ret
047CF3             0109*   
047CF3             0110*   display_victory:
047CF3 C9          0111*       ret
047CF4             0112*   
047CF4             0113*   load_resources:
047CF4 C9          0114*       ret
047CF5             0115*   
047CF5             0116*   play_cutscene:
047CF5 C9          0117*       ret
047CF6             0118*   
047CF6             0119*   display_inventory:
047CF6 C9          0120*       ret
047CF7             0121*   
047CF7             0122*   display_map:
047CF7 C9          0123*       ret
047CF8             0124*   
047CF8             0125*   save_game:
047CF8 C9          0126*       ret
047CF9             0127*   
047CF9             0128*   exit_game:
047CF9 C9          0129*       ret
047CFA             0130*   
047CFA             0068        include "state_game_init.inc"
047CFA             0001*   ; hello_world: asciz "Welcome to Purple Nurples!"
047CFA             0002*   ; loading_time: asciz "Loading time:"
047CFA 50 72 65 73 0003*   loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
047D15 00          0004*   game_assets_loaded: db 0 ; non-zero when assets are loaded
047D16 00          0005*   original_screen_mode: db 0
047D17             0006*   
047D17             0007*   game_init:
047D17             0008*   ; check whether assets are loaded
047D17 3A 15 7D 04 0009*       ld a,(game_assets_loaded)
047D1B B7          0010*       or a
047D1C C2 27 7E 04 0011*       jp nz,@assets_loaded
047D20             0012*   ; get current screen mode and save it so we can return to it on exit
047D20 CD 61 13 04 0013*       call vdu_get_screen_mode
047D24 32 16 7D 04 0014*       ld (original_screen_mode),a
047D28             0015*   ; print ascii art splash screen
047D28 CD 87 12 04 0016*       call vdu_cls
047D2C CD 5C 00 04 0017*       call printInline
047D30 57 65 6C 63 0018*       asciz "Welcome to\r\n"
       6F 6D 65 20 
       74 6F 0D 0A 
       00          
047D3D 21 E3 18 04 0019*       ld hl,purple_nurples_ascii
047D41 CD 63 00 04 0020*       call printString
047D45 CD 5C 00 04 0021*       call printInline
047D49 4C 6F 61 64 0022*       asciz "Loading UI...\r\n"
       69 6E 67 20 
       55 49 2E 2E 
       2E 0D 0A 00 
047D59             0023*   ; clear all buffers
047D59 CD 6E 14 04 0024*       call vdu_clear_all_buffers
047D5D             0025*   ; load fonts
047D5D CD 88 0F 04 0026*   	call fonts_load
047D61             0027*   ; select font
047D61 21 02 FA 00 0028*       ld hl,computer_pixel_7_8x16
047D65 3E 01       0029*       ld a,1 ; flags
047D67 CD 25 16 04 0030*       call vdu_font_select
047D6B             0031*   ; load UI images
047D6B CD 83 10 04 0032*       call load_ui_images
047D6F             0033*   ; set up the display
047D6F 3E 08       0034*       ld a,8;+128 ; 136   320   240   64    60hz double-buffered
047D71 CD 50 13 04 0035*       call vdu_set_screen_mode
047D75 AF          0036*       xor a
047D76 CD 69 13 04 0037*       call vdu_set_scaling
047D7A             0038*   ; ; enable additional audio channels
047D7A             0039*   ; 	call vdu_enable_channels
047D7A             0040*   ; set text background color
047D7A 3E 9A       0041*       ld a,26+128 ; violet
047D7C CD B8 12 04 0042*       call vdu_colour_text
047D80             0043*   ; set text foreground color
047D80 3E 2F       0044*       ld a,47 ; aaaaff lavenderish
047D82 CD B8 12 04 0045*       call vdu_colour_text
047D86             0046*   ; set gfx bg color
047D86 AF          0047*       xor a ; plotting mode 0
047D87 3E 9A       0048*       ld a,26+128 ; violet
047D89 CD C9 12 04 0049*       call vdu_gcol
047D8D CD 87 12 04 0050*       call vdu_cls
047D91             0051*   ; set the cursor off
047D91 CD 4F 12 04 0052*       call vdu_cursor_off
047D95             0053*   ; VDU 28, left, bottom, right, top: Set text viewport **
047D95             0054*   ; MIND THE LITTLE-ENDIANESS
047D95             0055*   ; inputs: c=left,b=bottom,e=right,d=top
047D95 0E 00       0056*       ld c,0 ; left
047D97 16 00       0057*       ld d,0 ; top
047D99 1E 27       0058*       ld e,39 ; right
047D9B 06 00       0059*       ld b,0; bottom
047D9D CD E0 12 04 0060*       call vdu_set_txt_viewport
047DA1             0061*   ; load background and sprite images
047DA1 CD C2 0F 04 0062*       call img_load_init
047DA5 CD B8 10 04 0063*       call load_backgrounds
047DA9 CD 96 10 04 0064*       call load_sprite_images
047DAD             0065*   ; load tileset_ptrs
047DAD CD A7 10 04 0066*       call load_tilesets
047DB1             0067*   ; ; load sound effects ; TODO
047DB1             0068*   ; 	ld bc,SFX_num_buffers
047DB1             0069*   ; 	ld hl,SFX_buffer_id_lut
047DB1             0070*   ; 	ld (cur_buffer_id_lut),hl
047DB1             0071*   ; 	ld hl,SFX_load_routines_table
047DB1             0072*   ; 	ld (cur_load_jump_table),hl
047DB1             0073*   ; 	call sfx_load_main
047DB1             0074*   ; print loading complete message and wait for user keypress
047DB1 3E 01       0075*       ld a,1
047DB3 32 15 7D 04 0076*       ld (game_assets_loaded),a
047DB7 CD 87 12 04 0077*       call vdu_cls
047DBB CD 5C 00 04 0078*       call printInline
047DBF 50 72 65 73 0079*       asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
047DDA CD 8C 12 04 0080*       call vdu_flip
047DDE CD 3D 03 04 0081*       call waitKeypress
047DE2             0082*   ; set up display for gameplay
047DE2 3E 14       0083*       ld a,20
047DE4 CD 50 13 04 0084*       call vdu_set_screen_mode
047DE8 AF          0085*       xor a
047DE9 CD 69 13 04 0086*       call vdu_set_scaling
047DED CD 4F 12 04 0087*       call vdu_cursor_off
047DF1             0088*   ; select font
047DF1 21 03 FA 00 0089*       ld hl,Lat2_VGA8_8x8
047DF5 3E 01       0090*       ld a,1 ; flags
047DF7 CD 25 16 04 0091*       call vdu_font_select
047DFB             0092*   ; plot bezel art
047DFB 21 06 00 00 0093*       ld hl,BUF_BEZEL_L
047DFF CD 7C 13 04 0094*       call vdu_buff_select
047E03 01 00 00 00 0095*       ld bc,0
047E07 11 00 00 00 0096*       ld de,0
047E0B CD D8 16 04 0097*       call vdu_plot_bmp
047E0F 21 07 00 00 0098*       ld hl,BUF_BEZEL_R
047E13 CD 7C 13 04 0099*       call vdu_buff_select
047E17 01 80 01 00 0100*       ld bc,384
047E1B 11 00 00 00 0101*       ld de,0
047E1F CD D8 16 04 0102*       call vdu_plot_bmp
047E23             0103*   ; draw player cockpit
047E23 CD CA 74 04 0104*       call draw_player_cockpit
047E27             0105*   @assets_loaded:
047E27             0106*   ; set gfx origin and viewport to playing field window
047E27 01 80 00 00 0107*       ld bc,origin_left
047E2B 11 30 00 00 0108*       ld de,origin_top
047E2F CD 0C 13 04 0109*       call vdu_set_gfx_origin
047E33 01 00 00 00 0110*       ld bc,field_left
047E37 11 00 00 00 0111*       ld de,field_top
047E3B DD 21 FF 00 0112*       ld ix,field_right
       00          
047E40 FD 21 4F 01 0113*       ld iy,field_bottom
       00          
047E45 CD 27 13 04 0114*       call vdu_set_gfx_viewport
047E49             0115*   ; set background color
047E49 3E 9A       0116*       ld a,26+128 ; violet
047E4B CD C9 12 04 0117*       call vdu_gcol
047E4F CD 9A 12 04 0118*       call vdu_clg
047E53             0119*   ; VDU 28, left, bottom, right, top: Set text viewport **
047E53 0E 00       0120*       ld c,0 ; left
047E55 16 00       0121*       ld d,0 ; top
047E57 1E 3E       0122*       ld e,62 ; right
047E59 06 30       0123*       ld b,48; bottom
047E5B CD E0 12 04 0124*       call vdu_set_txt_viewport
047E5F             0125*   ; initialize the global timestamp
047E5F CD C3 11 04 0126*       call timestamp_tick
047E63             0127*   ; reset the sprite table
047E63 CD C5 79 04 0128*       call table_init
047E67 21 30 94 04 0129*       ld hl,table_base
047E6B 22 A0 79 04 0130*       ld (table_pointer),hl
047E6F             0131*   ; initialize sprites and active tiles table
047E6F CD FD 79 04 0132*       call sprites_init
047E73 CD C5 79 04 0133*       call table_init
047E77 CD FE 82 04 0134*       call tile_table_init
047E7B             0135*   ; initialize the first level
047E7B 3E 00       0136*       ld a,tiles_dg
047E7D CD F4 61 04 0137*       call init_tileset
047E81             0138*   ; initialize player
047E81 21 00 00 00 0139*       ld hl,0
047E85 22 0E 79 04 0140*       ld (player_score),hl
047E89 2B          0141*       dec hl ; anything but zero so print_score will update
047E8A 22 11 79 04 0142*       ld (player_score_last),hl
047E8E 3A 12 73 04 0143*       ld a,(player_ships_max)
047E92 32 11 73 04 0144*       ld (player_ships),a
047E96 CD 6D 73 04 0145*       call player_init
047E9A CD 13 73 04 0146*       call draw_player_ships
047E9E             0147*   ; set the game state to playing
047E9E 21 B7 7E 04 0148*       ld hl,game_playing
047EA2 22 48 7C 04 0149*       ld (game_state), hl
047EA6             0150*   ; set game playing substates
047EA6 21 F1 73 04 0151*       ld hl,player_alive
047EAA 22 0E 73 04 0152*       ld (player_state), hl
047EAE 21 D4 1E 04 0153*       ld hl,enemies_alive
047EB2 22 C6 1E 04 0154*       ld (enemies_state), hl
047EB6             0155*   ; done initializing
047EB6 C9          0156*       ret
047EB7             0157*   ; end game_init
047EB7             0069        include "state_game_playing.inc"
047EB7             0001*   ; main game state
047EB7             0002*   game_playing:
047EB7             0003*   ; Main gameplay loop
047EB7             0004*   
047EB7             0005*   ; plot tiles
047EB7 CD 74 84 04 0006*       call tiles_plot
047EBB             0007*   
047EBB             0008*   ; set gfx viewport to playing field window
047EBB 01 00 00 00 0009*       ld bc,field_left
047EBF 11 00 00 00 0010*       ld de,field_top
047EC3 DD 21 FF 00 0011*       ld ix,field_right
       00          
047EC8 FD 21 4F 01 0012*       ld iy,field_bottom
       00          
047ECD CD 27 13 04 0013*       call vdu_set_gfx_viewport
047ED1             0014*   
047ED1             0015*   ; process movement and collisions
047ED1 CD 62 73 04 0016*       call do_player
047ED5 CD C9 1E 04 0017*       call do_enemies
047ED9 CD 0A 21 04 0018*       call move_explosions
047EDD CD F6 85 04 0019*       call move_tiles
047EE1             0020*   
047EE1             0021*   ; update UI
047EE1 01 00 00 00 0022*       ld bc,0
047EE5 11 00 00 00 0023*       ld de,0
047EE9 CD 0C 13 04 0024*       call vdu_set_gfx_origin
047EED CD 28 79 04 0025*       call print_score
047EF1 CD 88 79 04 0026*       call draw_shields
047EF5 CD F2 78 04 0027*       call draw_laser
047EF9 CD DC 76 04 0028*       call draw_fuel
047EFD C9          0029*       ret
047EFE             0030*   
047EFE             0070        include "targeting.inc"
047EFE             0001*   ; compute orientation to player
047EFE             0002*   ; based on relative positions
047EFE             0003*   ; returns: uh.l 16.8 fixed angle256 to player
047EFE             0004*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
047EFE             0005*   ;    representing delta-x/y *to* target respectively
047EFE             0006*   ; inputs: iy pointed at sprite record
047EFE             0007*   ; destroys: everything except iy (sprite record pointer)
047EFE             0008*   orientation_to_player:
047EFE DD 21 30 95 0009*       ld ix,player_begin
       04          
047F03             0010*   ; compute dx
047F03 DD 27 01    0011*       ld hl,(ix+sprite_x)
047F06 FD 17 01    0012*       ld de,(iy+sprite_x)
047F09 B7          0013*       or a ; clear carry
047F0A ED 52       0014*       sbc hl,de ; dx
047F0C E5          0015*       push hl ; save dx
047F0D             0016*   ; compute dy
047F0D DD 27 04    0017*       ld hl,(ix+sprite_y)
047F10 FD 17 04    0018*       ld de,(iy+sprite_y)
047F13 B7          0019*       or a ; clear carry
047F14 ED 52       0020*       sbc hl,de ; dy
047F16 EB          0021*       ex de,hl ; de = dy
047F17             0022*   ; compute angle to player
047F17 C1          0023*       pop bc ; dx (was hl)
047F18 C5          0024*       push bc ; save dx
047F19 D5          0025*       push de ; save dy
047F1A CD D1 07 04 0026*       call atan2_168fast ; uh.l = angle to player
047F1E 3E E0       0027*       ld a,%11100000
047F20 A5          0028*       and l ; round angle to nearest 32th of a circle
047F21 6F          0029*       ld l,a
047F22 22 50 7F 04 0030*       ld (Bearing_t),hl ; return angle to player
047F26 D1          0031*       pop de ; restore dy
047F27 C1          0032*       pop bc ; restore dx
047F28 C9          0033*       ret
047F29             0034*   ; end orientation_to_player
047F29             0035*   
047F29             0036*   ; compute orientation to player
047F29             0037*   ; based on relative positions
047F29             0038*   ; returns: uh.l 16.8 fixed angle256 to player
047F29             0039*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
047F29             0040*   ;    representing delta-x/y *to* target respectively
047F29             0041*   ; inputs: iy pointed at tile record
047F29             0042*   ; destroys: everything except iy (tile record pointer)
047F29             0043*   tile_orientation_to_player:
047F29 DD 21 30 95 0044*       ld ix,player_begin
       04          
047F2E             0045*   ; compute dx
047F2E DD 27 01    0046*       ld hl,(ix+sprite_x)
047F31 FD 17 01    0047*       ld de,(iy+tile_x)
047F34 B7          0048*       or a ; clear carry
047F35 ED 52       0049*       sbc hl,de ; dx
047F37 E5          0050*       push hl ; save dx
047F38             0051*   ; compute dy
047F38 DD 27 04    0052*       ld hl,(ix+sprite_y)
047F3B FD 17 04    0053*       ld de,(iy+tile_y)
047F3E B7          0054*       or a ; clear carry
047F3F ED 52       0055*       sbc hl,de ; dy
047F41 EB          0056*       ex de,hl ; de = dy
047F42             0057*   ; compute angle to player
047F42 C1          0058*       pop bc ; dx (was hl)
047F43 CD D1 07 04 0059*       call atan2_168fast ; uh.l = angle to player
047F47 3E E0       0060*       ld a,%11100000
047F49 A5          0061*       and l ; round angle to nearest 32th of a circle
047F4A 6F          0062*       ld l,a
047F4B 22 50 7F 04 0063*       ld (Bearing_t),hl
047F4F C9          0064*       ret
047F50             0065*   ; end tile_orientation_to_player
047F50             0066*   
047F50             0067*   ; targeting_computer variables fixed 16.8 format
047F50 00 00 00    0068*   Bearing_t: dl 0x000000 ; angle to target
047F53 00 00 00    0069*   Heading_t: dl 0x000000 ; angle of target motion
047F56 00 00 00    0070*   Vp: dl 0x000000 ; velocity of projectile
047F59 00 00 00    0071*   Vp_x: dl 0x000000 ; x component of projectile velocity
047F5C 00 00 00    0072*   Vp_y: dl 0x000000 ; y component of projectile velocity
047F5F 00 00 00    0073*   Vt: dl 0x000000 ; velocity of target
047F62 00 00 00    0074*   Vt_x: dl 0x000000 ; x component of target velocity
047F65 00 00 00    0075*   Vt_y: dl 0x000000 ; y component of target velocity
047F68 00 00 00    0076*   Heading_p: dl 0x000000 ; angle of projectile motion
047F6B 00 00 00    0077*   lead_angle: dl 0x000000 ; lead angle
047F6E             0078*   
047F6E             0079*   ; Inputs:   Vp velocity of projectile set,
047F6E             0080*   ;           iy pointed to sprite record,
047F6E             0081*   ;           player position and velocities correctly set
047F6E             0082*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
047F6E             0083*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
047F6E             0084*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
047F6E             0085*   targeting_computer:
047F6E DD 21 30 95 0086*       ld ix,player_begin
       04          
047F73             0087*   ; ; compute target velocity from x,y component velocities
047F73             0088*   ;     ld bc,(ix+sprite_xvel)
047F73             0089*   ;     ld de,(ix+sprite_yvel)
047F73             0090*   ;     ld hl,-1*256 ; account for vertical ground movement
047F73             0091*   ;     add hl,de
047F73             0092*   ;     ex de,hl ; ud.e = player_yvel-1
047F73             0093*   ;     call cartesian_to_polar_sm ; uh.l = Heading_t, ud.e = Vt
047F73             0094*   ;     ld (Heading_t),hl ; PASSES
047F73             0095*   ;     ld (Vt),de ; PASSES
047F73             0096*   ; ; Bearing_t should have been set by prerequisite call to orientation_to_player
047F73             0097*   ; ; compute Heading_t-Bearing_t PASSES
047F73             0098*   ;     ld de,(Bearing_t)
047F73             0099*   ;     and a ; clear carry
047F73             0100*   ;     sbc hl,de ; Uh.l = Heading_t-Bearing_t
047F73             0101*   ; ; compute sin(Heading_t-Bearing_t)
047F73             0102*   ;     call sin168 ; uh.l = sin(Heading_t-Bearing_t)
047F73             0103*   ; ; compute (Vt*sin(Heading_t-Bearing_t))
047F73             0104*   ;     ld de,(Vt)
047F73             0105*   ;     call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
047F73             0106*   ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
047F73             0107*   ;     ld de,(Vp)
047F73             0108*   ;     call sdiv168 ; ud.e = (Vt*sin(Heading_t-Bearing_t)) / Vp
047F73             0109*   ;     ex de,hl ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
047F73             0110*   ; ; answer is in radians, convert to degrees256
047F73             0111*   ;     ld de,0x0028BE ; 40.74 = 57.29578*256/360
047F73             0112*   ;     call smul168 ; uh.l = angle in degrees256
047F73             0113*   ;     ld (lead_angle),hl ; TODO: fix this
047F73             0114*   ; ; add lead angle to target bearing
047F73             0115*   ;     ld de,(Bearing_t)
047F73             0116*   ;     add hl,de ; h.l = lead angle+target bearing
047F73             0117*   
047F73 2A 50 7F 04 0118*       ld hl,(Bearing_t) ; TODO: fix this
047F77             0119*   
047F77 E5          0120*       push hl
047F78             0121*   
047F78             0122*   ; compute component projectile velocities
047F78 ED 5B 56 7F 0123*       ld de,(Vp) ; Vp should have been set by caller
       04          
047F7D CD D7 06 04 0124*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
047F81 ED 43 59 7F 0125*       ld (Vp_x),bc
       04          
047F86             0126*       ; inc d ; account for vertical ground movement
047F86 ED 53 5C 7F 0127*       ld (Vp_y),de
       04          
047F8B E1          0128*       pop hl ; uh.l = lead angle+target bearing
047F8C 22 68 7F 04 0129*       ld (Heading_p),hl
047F90             0130*   
047F90 C9          0131*       ret
047F91             0132*   
047F91             0133*   ; debug print the results
047F91             0134*       PUSH_ALL
047F91 08          0001*M1     ex af,af'
047F92 D9          0002*M1     exx
047F93 F5          0003*M1     push af
047F94 E5          0004*M1     push hl
047F95 C5          0005*M1     push bc
047F96 D5          0006*M1     push de
047F97             0007*M1 
047F97 08          0008*M1     ex af,af'
047F98 D9          0009*M1     exx
047F99 F5          0010*M1     push af
047F9A E5          0011*M1     push hl
047F9B C5          0012*M1     push bc
047F9C D5          0013*M1     push de
047F9D DD E5       0014*M1     push ix
047F9F FD E5       0015*M1     push iy
047FA1 CD 3C 12 04 0135*       call vdu_home_cursor
047FA5 CD 78 00 04 0136*       call printNewLine
047FA9 CD 5C 00 04 0137*       call printInline
047FAD 42 74 20 00 0138*       asciz "Bt "
047FB1 2A 50 7F 04 0139*       ld hl,(Bearing_t)
047FB5 CD D4 01 04 0140*       call print_s168_hl
047FB9             0141*   
047FB9             0142*       ; call printInline
047FB9             0143*       ; asciz "\r\nHt "
047FB9             0144*       ; ld hl,(Heading_t)
047FB9             0145*       ; call print_s168_hl
047FB9             0146*   
047FB9             0147*       ; call printInline
047FB9             0148*       ; asciz "\r\nVt "
047FB9             0149*       ; ld hl,(Vt)
047FB9             0150*       ; call print_s168_hl
047FB9             0151*   
047FB9             0152*       ; call printInline
047FB9             0153*       ; asciz "\r\nVtx"
047FB9             0154*       ; ld hl,(ix+sprite_xvel)
047FB9             0155*       ; call print_s168_hl
047FB9             0156*   
047FB9             0157*       ; call printInline
047FB9             0158*       ; asciz "\r\nVty"
047FB9             0159*       ; ld hl,(ix+sprite_yvel)
047FB9             0160*       ; ld de,-1*256 ; account for vertical ground movement
047FB9             0161*       ; add hl,de
047FB9             0162*       ; call print_s168_hl
047FB9             0163*   
047FB9 CD 5C 00 04 0164*       call printInline
047FBD 0D 0A 4C 64 0165*       asciz "\r\nLda"
       61 00       
047FC3 2A 6B 7F 04 0166*       ld hl,(lead_angle)
047FC7 CD D4 01 04 0167*       call print_s168_hl
047FCB             0168*   
047FCB CD 5C 00 04 0169*       call printInline
047FCF 0D 0A 48 70 0170*       asciz "\r\nHp "
       20 00       
047FD5 2A 68 7F 04 0171*       ld hl,(Heading_p)
047FD9 CD D4 01 04 0172*       call print_s168_hl
047FDD             0173*   
047FDD             0174*       ; call printInline
047FDD             0175*       ; asciz "\r\nVp "
047FDD             0176*       ; ld hl,(Vp)
047FDD             0177*       ; call print_s168_hl
047FDD             0178*   
047FDD             0179*       ; call printInline
047FDD             0180*       ; asciz "\r\nVpx"
047FDD             0181*       ; ld hl,(Vp_x)
047FDD             0182*       ; call print_s168_hl
047FDD             0183*   
047FDD             0184*       ; call printInline
047FDD             0185*       ; asciz "\r\nVpy"
047FDD             0186*       ; ld hl,(Vp_y)
047FDD             0187*       ; call print_s168_hl
047FDD             0188*   
047FDD             0189*       POP_ALL
047FDD FD E1       0001*M1     pop iy
047FDF DD E1       0002*M1     pop ix
047FE1 D1          0003*M1     pop de
047FE2 C1          0004*M1     pop bc
047FE3 E1          0005*M1     pop hl
047FE4 F1          0006*M1     pop af
047FE5 08          0007*M1     ex af,af'
047FE6 D9          0008*M1     exx
047FE7             0009*M1 
047FE7 D1          0010*M1     pop de
047FE8 C1          0011*M1     pop bc
047FE9 E1          0012*M1     pop hl
047FEA F1          0013*M1     pop af
047FEB 08          0014*M1     ex af,af'
047FEC D9          0015*M1     exx
047FED C9          0190*       ret
047FEE             0071        include "tile_table.inc"
047FEE             0001*   ; ###### tile TABLE FIELD INDICES ######
047FEE             0002*   tile_table_record_size:         equ  64; bytes per tile record
047FEE             0003*   tile_id:                 equ   0; 1 bytes ;unique tileId, zero-based
047FEE             0004*   ; tile state variables
047FEE             0005*   tile_state_variables:    equ   1; beginning of tile state variables
047FEE             0006*   tile_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
047FEE             0007*   tile_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
047FEE             0008*   tile_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
047FEE             0009*   tile_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
047FEE             0010*   tile_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
047FEE             0011*   tile_heading:            equ  16; 3 bytes ;tile movement direction deg256 16.8 fixed
047FEE             0012*   tile_orientation:        equ  19; 3 bytes ;orientation bits
047FEE             0013*   ; tile definition variables
047FEE             0014*   tile_definitions:        equ  22; beginnning of tile definition variables
047FEE             0015*   tile_type:               equ  22; 1 bytes ;type of tile as defined in enemies.inc
047FEE             0016*   tile_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
047FEE             0017*   tile_move_program:       equ  26; 3 bytes ;address of tile's behavior subroutine
047FEE             0018*   tile_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
047FEE             0019*   tile_dim_x:              equ  30; 1 bytes ;tile width in pixels
047FEE             0020*   tile_dim_y:              equ  31; 1 bytes ;tile height in pixels
047FEE             0021*   tile_num_orientations:   equ  32; 1 bytes ;number of orientations for this tile
047FEE             0022*   tile_num_animations:     equ  33; 1 bytes ;number of animations for this tile
047FEE             0023*   tile_animation:          equ  34; 1 bytes ;current animation index, zero-based
047FEE             0024*   tile_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
047FEE             0025*   tile_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
047FEE             0026*   tile_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
047FEE             0027*   tile_points:             equ  38; 1 bytes ;points awarded for killing this tile type
047FEE             0028*   tile_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
047FEE             0029*   tile_frame:              equ  40; 1 bytes ;current animation frame
047FEE             0030*   
047FEE             0031*   ; ###### tile TABLE VARIABLES ######
047FEE 00 00 00 00 0032*   tile_stack: blkb 256*3,0 ; stack of pointers to tile records
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0482EE 00 00 00    0033*       dl 0 ; list terminator
0482F1             0034*   tile_stack_end:
0482F1 EE 7F 04    0035*   tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
0482F4 30 99 04    0036*   tile_table_pointer: dl tile_table_base ; pointer to top address of current record, initialized to tile_table_base
0482F7 00 00 00    0037*   num_active_tiles: dl 0 ; how many active tiles
0482FA 00          0038*   next_tile_id: db 0 ; next available tile id
0482FB 00 00 00    0039*   new_tile_table_pointer: dl 0 ; pointer to new tile record
0482FE             0040*   
0482FE             0041*   tile_table_init:
0482FE             0042*   ; reset num active tiles
0482FE 21 00 00 00 0043*       ld hl,0
048302 22 F7 82 04 0044*       ld (num_active_tiles),hl
048306             0045*   ; reset next tile id
048306 AF          0046*       xor a
048307 32 FA 82 04 0047*       ld (next_tile_id),a
04830B             0048*   ; clear the tile stack
04830B AF          0049*       xor a ; write zeroes to tile stack
04830C 21 EE 7F 04 0050*       ld hl,tile_stack
048310 01 03 03 00 0051*       ld bc,tile_stack_end-tile_stack
048314 CD 42 03 04 0052*       call clear_mem
048318             0053*   ; clear the tile table
048318 AF          0054*       xor a ; write zeroes to tile table
048319 21 30 99 04 0055*       ld hl,tile_table_base ; address to copy from
04831D 01 00 40 00 0056*       ld bc,tile_table_end-tile_table_base ; number of bytes to clear
048321 CD 42 03 04 0057*       call clear_mem
048325             0058*   ; write tile ids
048325 DD 21 30 99 0059*       ld ix,tile_table_base
       04          
04832A AF          0060*       xor a ; tile id
04832B 06 00       0061*       ld b,0 ; loop counter
04832D             0062*   @loop:
04832D DD 77 00    0063*       ld (ix+tile_id),a
048330 ED 32 40    0064*       lea ix,ix+table_record_size
048333 3C          0065*       inc a
048334 10 F7       0066*       djnz @loop
048336             0067*   ; set pointers to top of tile stack and tile table
048336 21 FA 82 04 0068*       ld hl,next_tile_id
04833A 3E FF       0069*       ld a,255 ; will wrap around to 0 on first call to create active tile
04833C 77          0070*       ld (hl),a
04833D 21 30 99 04 0071*       ld hl,tile_table_base
048341 22 F4 82 04 0072*       ld (tile_table_pointer),hl
048345 21 EE 7F 04 0073*       ld hl,tile_stack
048349 22 F1 82 04 0074*       ld (tile_stack_pointer),hl
04834D C9          0075*       ret
04834E             0076*   ; end tile_table_init
04834E             0077*   
04834E             0078*   ; gets the next available tile id
04834E             0079*   ; inputs; none
04834E             0080*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
04834E             0081*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
04834E             0082*   ; destroys: a,hl,ix
04834E             0083*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
04834E             0084*   tile_table_get_next_id:
04834E 21 F7 82 04 0085*       ld hl,num_active_tiles
048352 34          0086*       inc (hl)
048353 C2 5A 83 04 0087*       jp nz,@F ; check rollover to > 256 active tiles
048357 35          0088*       dec (hl) ; undo increment
048358 AF          0089*       xor a ; reset carry flag indicating that we didn't find a free tile
048359 C9          0090*       ret
04835A             0091*   @@:
04835A 7E          0092*       ld a,(hl) ; number of active tiles
04835B             0093*   ; point ix to next tile record
04835B 21 FA 82 04 0094*       ld hl,next_tile_id
04835F 34          0095*       inc (hl)
048360 56          0096*       ld d,(hl) ; index into tile table
048361 1E 40       0097*       ld e,tile_table_record_size
048363 ED 5C       0098*       mlt de ; de is now the offset to the table entry
048365 DD 21 30 99 0099*       ld ix,tile_table_base ; point to base address of tile table
       04          
04836A DD 19       0100*       add ix,de ; ix is now the address of the table entry
04836C             0101*   ; add tile pointer to tile stack
04836C 21 EE 7F 04 0102*       ld hl,tile_stack
048370 57          0103*       ld d,a ; number of active tiles
048371 15          0104*       dec d ; zero-based index
048372 1E 03       0105*       ld e,3 ; three bytes per tile record
048374 ED 5C       0106*       mlt de ; offset into tile stack
048376 19          0107*       add hl,de ; hl points to top of the active tiles
048377 ED 3F       0108*       ld (hl),ix
048379             0109*   ; return tile id
048379 DD 7E 00    0110*       ld a,(ix+tile_id)
04837C 37          0111*       scf ; sets carry flag indicating we found a free tile
04837D C9          0112*       ret ; done
04837E             0113*   ; end tile_table_get_next_id
04837E             0114*   
04837E             0115*   ; deactivate the tile with the given id
04837E             0116*   ; inputs: tile_stack_pointer set to record to remove
04837E             0117*   ; outputs: decrements num_active_tiles by one, tile_stack_pointer set to record above removed record, removes tile pointer from the tile stack, shifts stack records above it down one position
04837E             0118*   ; destroys: a,hl,bc,de
04837E             0119*   table_deactivate_tile:
04837E             0120*   ; compute address to copy from
04837E 2A F1 82 04 0121*       ld hl,(tile_stack_pointer)
048382 23          0122*       inc hl
048383 23          0123*       inc hl
048384 23          0124*       inc hl
048385 E5          0125*       push hl ; save copy from address
048386             0126*   ; compute bytes to copy
048386 3A F7 82 04 0127*       ld a,(num_active_tiles)
04838A 6F          0128*       ld l,a
04838B 26 03       0129*       ld h,3
04838D ED 6C       0130*       mlt hl
04838F 11 EE 7F 04 0131*       ld de,tile_stack
048393 19          0132*       add hl,de ; hl = bottom of stack address
048394 ED 5B F1 82 0133*       ld de,(tile_stack_pointer)
       04          
048399 B7          0134*       or a ; clear carry
04839A ED 52       0135*       sbc hl,de ; hl = bytes to copy
04839C E5          0136*       push hl
04839D C1          0137*       pop bc ; bytes to copy
04839E             0138*   ; compute target address
04839E ED 5B F1 82 0139*       ld de,(tile_stack_pointer)
       04          
0483A3             0140*   ; copy bytes
0483A3 E1          0141*       pop hl ; copy from address
0483A4 ED B0       0142*       ldir
0483A6             0143*   ; update stack pointer and active tile count
0483A6 21 F7 82 04 0144*       ld hl,num_active_tiles
0483AA 35          0145*       dec (hl)
0483AB 2A F1 82 04 0146*       ld hl,(tile_stack_pointer)
0483AF 2B          0147*       dec hl
0483B0 2B          0148*       dec hl
0483B1 2B          0149*       dec hl
0483B2 22 F1 82 04 0150*       ld (tile_stack_pointer),hl
0483B6 C9          0151*       ret
0483B7             0152*   ; end table_deactivate_tile
0483B7             0153*   
0483B7             0154*   ; spawn a new active tile at the prescribed location
0483B7             0155*   ; inputs: hl = pointer to new tile default settings, tiles_x_plot, tiles_y_plot = x,y position
0483B7             0156*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
0483B7             0157*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
0483B7             0158*   ; destroys: a,hl,bc,de,ix
0483B7             0159*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
0483B7             0160*   spawn_active_tile:
0483B7 E5          0161*       push hl ; back up pointer to new tile defaults
0483B8 CD 4E 83 04 0162*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
0483BC E1          0163*       pop hl ; restore pointer to new tile defaults
0483BD D0          0164*       ret nc ; no carry means no free tile slots, so we go home
0483BE             0165*   ; copy default settings to new tile
0483BE DD 22 FB 82 0166*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
0483C3 ED 32 16    0167*       lea ix,ix+tile_definitions ; bump pointer to copy to
0483C6 DD E5       0168*       push ix ; pointer to default tile settings
0483C8 D1          0169*       pop de ; address to copy to
0483C9 01 2A 00 00 0170*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
0483CD ED B0       0171*       ldir ; copies defaults to new tile record
0483CF             0172*   ; copy tile position from inputs
0483CF DD 2A FB 82 0173*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
0483D4 2A 6C 84 04 0174*       ld hl,(tiles_x_plot-1) ; shift up one byte to get 16.8 fixed point
0483D8 DD 2F 01    0175*       ld (ix+tile_x),hl
0483DB 2A 70 84 04 0176*       ld hl,(tiles_y_plot-1) ; shift up one byte to get 16.8 fixed point
0483DF DD 2F 04    0177*       ld (ix+tile_y),hl
0483E2             0178*   ; set default tile velocities
0483E2 21 00 00 00 0179*       ld hl,0
0483E6 DD 2F 07    0180*       ld (ix+tile_xvel),hl
0483E9 21 00 01 00 0181*       ld hl,1*256 ; 1 pixel per frame
0483ED DD 2F 0A    0182*       ld (ix+tile_yvel),hl
0483F0             0183*   ; return to caller
0483F0 DD CB 16 FE 0184*       set 7,(ix+sprite_type) ; set just spawned flag
0483F4 DD CB 1D F6 0185*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
0483F8 37          0186*       scf ; set carry flag to indicate success
0483F9 C9          0187*       ret
0483FA             0188*   ; end spawn_active_tile
0483FA             0189*   
0483FA             0190*   ; spawn a new active tile at the prescribed location
0483FA             0191*   ; inputs: iy pointer to current hl = pointer to new tile default settings
0483FA             0192*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
0483FA             0193*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
0483FA             0194*   ; destroys: a,hl,bc,de,ix
0483FA             0195*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
0483FA             0196*   spawn_active_tile_from_sprite:
0483FA E5          0197*       push hl ; back up pointer to new tile defaults
0483FB CD 4E 83 04 0198*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
0483FF E1          0199*       pop hl ; restore pointer to new tile defaults
048400 D0          0200*       ret nc ; no carry means no free tile slots, so we go home
048401             0201*   ; copy default settings to new tile
048401 DD 22 FB 82 0202*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
048406 ED 32 16    0203*       lea ix,ix+tile_definitions ; bump pointer to copy to
048409 DD E5       0204*       push ix ; pointer to default tile settings
04840B D1          0205*       pop de ; address to copy to
04840C 01 2A 00 00 0206*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
048410 ED B0       0207*       ldir ; copies defaults to new tile record
048412             0208*   ; copy tile position from existing sprite
048412 DD 2A FB 82 0209*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
048417 FD 2A A0 79 0210*       ld iy,(table_pointer) ; get existing sprite record
       04          
04841C FD 27 01    0211*       ld hl,(iy+sprite_x)
04841F DD 2F 01    0212*       ld (ix+tile_x),hl
048422 FD 27 04    0213*       ld hl,(iy+sprite_y)
048425 DD 2F 04    0214*       ld (ix+tile_y),hl
048428             0215*   ; set default tile velocities
048428 21 00 00 00 0216*       ld hl,0
04842C DD 2F 07    0217*       ld (ix+tile_xvel),hl
04842F 21 00 01 00 0218*       ld hl,1*256 ; 1 pixel per frame
048433 DD 2F 0A    0219*       ld (ix+tile_yvel),hl
048436             0220*   ; return to caller
048436 DD CB 16 FE 0221*       set 7,(ix+sprite_type) ; set just spawned flag
04843A DD CB 1D F6 0222*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
04843E 37          0223*       scf ; set carry flag to indicate success
04843F C9          0224*       ret
048440             0225*   ; end spawn_active_tile_from_sprite
048440             0226*   
048440             0227*   ; compute animation frame based on tile_animation and tile_heading
048440             0228*   ; inputs: iy set to tile record
048440             0229*   ; outputs: a, tile_frame set to animation frame
048440             0230*   ; destroys: a,hl
048440             0231*   tile_frame_heading_animation:
048440 FD 7E 11    0232*       ld a,(iy+tile_heading+1) ; we want the integer portion
048443 CB 3F       0233*       srl a ; divide integer portion by 8
048445 CB 3F       0234*       srl a
048447 CB 3F       0235*       srl a
048449 FD 66 22    0236*       ld h,(iy+tile_animation)
04844C 2E 20       0237*       ld l,32 ; 32 orientation frames per animation
04844E ED 6C       0238*       mlt hl ; hl = offset from base animation
048450 85          0239*       add a,l ; modulo256 since tile_frame is only 1 byte
048451 FD 77 28    0240*       ld (iy+tile_frame),a
048454 C9          0241*       ret
048455             0242*   ; end tile_frame_heading_animation
048455             0243*   
048455             0244*   ; compute animation frame based on tile_heading
048455             0245*   ; inputs: iy set to tile record
048455             0246*   ; outputs: a, tile_frame set to animation frame
048455             0247*   ; destroys: a,hl
048455             0248*   tile_frame_heading:
048455 FD 7E 11    0249*       ld a,(iy+tile_heading+1) ; we want the integer portion
048458 CB 3F       0250*       srl a ; divide integer portion by 8
04845A CB 3F       0251*       srl a
04845C CB 3F       0252*       srl a
04845E FD 77 28    0253*       ld (iy+tile_frame),a
048461 C9          0254*       ret
048462             0255*   ; end tile_frame_heading
048462             0072        include "tiles.inc"
048462 00 00 00    0001*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
048465 00 00 00    0002*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
048468             0003*       ; initialize to zero for a maximum of 256 rows in a level
048468 00          0004*   tiles_cols: db 0 ; number of tile columns in the current level
048469             0005*   
048469 00 00 00    0006*   cur_baseBufferId: dl 0
04846C 00          0007*       db 0 ; padding for byte-shifting
04846D 00 00 00    0008*   tiles_x_plot: dl 0
048470 00          0009*       db 0 ; padding for byte-shifting
048471 F1 FF FF    0010*   tiles_y_plot: dl -15
048474             0011*   
048474             0012*   tiles_plot:
048474             0013*   ; set gfx origin to playing field window
048474 01 80 00 00 0014*       ld bc,origin_left
048478 11 30 00 00 0015*       ld de,origin_top
04847C CD 0C 13 04 0016*       call vdu_set_gfx_origin
048480             0017*   ; set gfx viewport to playing field window
048480 01 00 00 00 0018*       ld bc,field_left
048484 11 00 00 00 0019*       ld de,field_top
048488 DD 21 FF 00 0020*       ld ix,field_right
       00          
04848D FD 21 4F 01 0021*       ld iy,field_bottom
       00          
048492 CD 27 13 04 0022*       call vdu_set_gfx_viewport
048496             0023*   ; move the background down one pixel
048496 3E 02       0024*       ld a,2 ; current gfx viewport
048498 2E 02       0025*       ld l,2 ; direction=down
04849A 26 01       0026*       ld h,1 ; speed=1 px
04849C CD 9F 12 04 0027*       call vdu_scroll_down
0484A0             0028*   ; set gfx viewport to one scanline to optimise plotting tiles
0484A0 01 00 00 00 0029*       ld bc,0 ; leftmost x-coord
0484A4 11 00 00 00 0030*       ld de,0 ; topmost y-coord
0484A8 DD 21 FF 00 0031*       ld ix,255 ; rightmost x-coord
       00          
0484AD FD 21 00 00 0032*       ld iy,0 ; bottommost y-coord
       00          
0484B2 CD 27 13 04 0033*       call vdu_set_gfx_viewport
0484B6             0034*   ; plot the background
0484B6 CD 7A 85 04 0035*       call bg_plot
0484BA             0036*   ; initialize tiles loop
0484BA 21 00 00 00 0037*       ld hl,0 ; init plotting x-coordinate
0484BE 22 6D 84 04 0038*       ld (tiles_x_plot),hl
0484C2 2A 62 84 04 0039*       ld hl,(tiles_row_defs)
0484C6 3A 68 84 04 0040*       ld a,(tiles_cols)
0484CA 47          0041*       ld b,a ; column loop counter
0484CB             0042*   @loop:
0484CB C5          0043*       push bc ; save the loop counter
0484CC             0044*   ; read the tile defintion for the current column
0484CC 7E          0045*       ld a,(hl) ; a has tile definition
0484CD E5          0046*       push hl ; save pointer to tile definition
0484CE 2A 69 84 04 0047*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
0484D2 6F          0048*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
0484D3 CD 7C 13 04 0049*       call vdu_buff_select ; tile bitmap buffer is now active
0484D7             0050*   ; plot the active bitmap
0484D7 ED 4B 6D 84 0051*       ld bc,(tiles_x_plot)
       04          
0484DC ED 5B 71 84 0052*       ld de,(tiles_y_plot)
       04          
0484E1 CD D8 16 04 0053*       call vdu_plot_bmp
0484E5             0054*   ; bump x-coords the width of one tile and save it
0484E5 2A 6D 84 04 0055*       ld hl,(tiles_x_plot)
0484E9 01 10 00 00 0056*       ld bc,16
0484ED 09          0057*       add hl,bc
0484EE 22 6D 84 04 0058*       ld (tiles_x_plot),hl
0484F2             0059*   ; prepare to loop to next column
0484F2 E1          0060*       pop hl ; get back pointer to tile def
0484F3 23          0061*       inc hl ; bump it to the next column
0484F4 C1          0062*       pop bc ; snag our loop counter
0484F5 10 D4       0063*       djnz @loop
0484F7             0064*   ; increment tiles plotting y-coordinate
0484F7             0065*   ; (we use ix b/c we want to preserve hl for the next step)
0484F7 DD 2A 71 84 0066*       ld ix,(tiles_y_plot)
       04          
0484FC 11 01 00 00 0067*       ld de,1
048500 DD 19       0068*       add ix,de
048502 DD 22 71 84 0069*       ld (tiles_y_plot),ix
       04          
048507 DD 7D       0070*       ld a,ixl
048509 FE 01       0071*       cp 1
04850B C0          0072*       ret nz
04850C             0073*   ; do active tiles
04850C E5          0074*       push hl ; save pointer to next row tile def
04850D CD 30 85 04 0075*       call do_active_tiles
048511 E1          0076*       pop hl ; get back pointer to next row tile def
048512             0077*   ; time to bump tiles_row_defs to next row
048512             0078*   ; (hl was already there at the end of the loop)
048512 22 62 84 04 0079*       ld (tiles_row_defs),hl
048516             0080*   ; reset coords to plot next row of tiles
048516 21 00 00 00 0081*       ld hl,0
04851A 22 6D 84 04 0082*       ld (tiles_x_plot),hl
04851E 21 F1 FF FF 0083*       ld hl,-15
048522 22 71 84 04 0084*       ld (tiles_y_plot),hl
048526             0085*   ; decrement tiles row counter
048526 21 65 84 04 0086*       ld hl,tiles_row
04852A 35          0087*       dec (hl)
04852B C0          0088*       ret nz
04852C             0089*   @inc_level:
04852C C3 46 62 04 0090*       jp next_level
048530             0091*   ; end tiles_plot
048530             0092*   
048530             0093*   do_active_tiles:
048530             0094*   ; initialize tiles loop
048530 21 00 00 00 0095*       ld hl,0 ; init plotting x-coordinate
048534 22 6D 84 04 0096*       ld (tiles_x_plot),hl
048538 2A 62 84 04 0097*       ld hl,(tiles_row_defs)
04853C 3A 68 84 04 0098*       ld a,(tiles_cols)
048540 47          0099*       ld b,a ; column loop counter
048541             0100*   @loop:
048541 C5          0101*       push bc ; save the loop counter
048542             0102*   ; read the tile defintion for the current column
048542 7E          0103*       ld a,(hl) ; a has tile definition
048543 E5          0104*       push hl ; save pointer to tile definition
048544 B7          0105*       or a ; check for null tile
048545 CA 61 85 04 0106*       jp z,@next_tile ; skip to next tile if null
048549 FE 11       0107*       cp 17 ; carry reset if active tile
04854B D2 61 85 04 0108*       jp nc,@next_tile ; skip to next tile if not active
04854F             0109*   ; call the tile activation routine
04854F 21 B2 85 04 0110*       ld hl,tile_activation_routines
048553 16 03       0111*       ld d,3 ; three bytes per table entry
048555 5F          0112*       ld e,a ; a is the tile type
048556 ED 5C       0113*       mlt de ; de is now the offset to the table entry
048558 19          0114*       add hl,de ; hl is now the address of the table entry
048559 ED 27       0115*       ld hl,(hl) ; hl is now the activation routine address
04855B             0116*       CALL_HL ; call the activation routine
04855B 01 61 85 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
04855F C5          0002*M1     push bc ; which constitutes the return address
048560 E9          0003*M1     jp (hl) ; Jump to the address in HL
048561             0117*   @next_tile:
048561             0118*   ; bump x-coords the width of one tile and save it
048561 2A 6D 84 04 0119*       ld hl,(tiles_x_plot)
048565 01 10 00 00 0120*       ld bc,16
048569 09          0121*       add hl,bc
04856A 22 6D 84 04 0122*       ld (tiles_x_plot),hl
04856E             0123*   ; prepare to loop to next column
04856E E1          0124*       pop hl ; get back pointer to tile def
04856F 23          0125*       inc hl ; bump it to the next column
048570 C1          0126*       pop bc ; snag our loop counter
048571 10 CE       0127*       djnz @loop
048573 C9          0128*       ret ; done
048574             0129*   ; end do_active_tiles
048574             0130*   
048574 FF FF FF    0131*   bg_y_plot: dl -1
048577 00 04 00    0132*   bg_bufferId: dl BUF_BG_STARS_0 ; default bufferId for background tiles
04857A             0133*   
04857A             0134*   bg_plot:
04857A             0135*   ; load current bg tile bufferId as default
04857A 2A 77 85 04 0136*       ld hl,(bg_bufferId)
04857E             0137*   ; check whether it is time for a new background tile
04857E 3A 74 85 04 0138*       ld a,(bg_y_plot)
048582 3C          0139*       inc a
048583 32 74 85 04 0140*       ld (bg_y_plot),a
048587 C2 9F 85 04 0141*       jp nz,@F ; not time for a new tile so draw current one
04858B             0142*   ; load the next background tile
04858B 21 00 04 00 0143*       ld hl,BUF_BG_STARS_0
04858F CD FB 04 04 0144*       call rand_8
048593 E6 07       0145*       and %0000111
048595 85          0146*       add a,l
048596 6F          0147*       ld l,a
048597 3E 00       0148*       ld a,0
048599 8C          0149*       adc a,h
04859A 67          0150*       ld h,a
04859B 22 77 85 04 0151*       ld (bg_bufferId),hl
04859F             0152*   @@:
04859F CD 7C 13 04 0153*       call vdu_buff_select
0485A3 01 00 00 00 0154*       ld bc,0
0485A7 ED 5B 74 85 0155*       ld de,(bg_y_plot)
       04          
0485AC 13          0156*       inc de
0485AD CD D8 16 04 0157*       call vdu_plot_bmp
0485B1 C9          0158*       ret
0485B2             0159*   ; end bg_plot
0485B2             0073        include "tiles_active.inc"
0485B2             0001*   
0485B2             0002*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
0485B2             0003*   tile_pad_small: equ 1
0485B2             0004*   tile_pad_med: equ 2
0485B2             0005*   tile_pad_large: equ 3
0485B2             0006*   tile_charge_shields: equ 4
0485B2             0007*   tile_turret_fireball: equ 5
0485B2             0008*   tile_laser_turret: equ 6
0485B2             0009*   tile_twin_laser_turret: equ 7
0485B2             0010*   tile_charge_fuel: equ 8
0485B2             0011*   tile_electrode: equ 9
0485B2             0012*   tile_lightning: equ 10
0485B2             0013*   ; tile_electrode_r: equ 11 ; same as tile_electrode
0485B2             0014*   tile_12: equ 12
0485B2             0015*   tile_13: equ 13
0485B2             0016*   tile_14: equ 14
0485B2             0017*   tile_15: equ 15
0485B2             0018*   tile_crater: equ 16
0485B2             0019*   
0485B2             0020*   tile_activation_routines:
0485B2 E2 85 04    0021*       dl activate_null_tile ; dummy spacer since tiled is 1-based
0485B5 46 88 04    0022*       dl activate_pad_small
0485B8 E2 85 04    0023*       dl activate_null_tile
0485BB E2 85 04    0024*       dl activate_null_tile
0485BE E2 85 04    0025*       dl activate_null_tile
0485C1 B1 88 04    0026*       dl activate_turret_fireball
0485C4 E2 85 04    0027*       dl activate_null_tile
0485C7 E2 85 04    0028*       dl activate_null_tile
0485CA E2 85 04    0029*       dl activate_null_tile
0485CD FC 86 04    0030*       dl activate_electrode
0485D0 FA 87 04    0031*       dl activate_lightning
0485D3 FC 86 04    0032*       dl activate_electrode
0485D6 E2 85 04    0033*       dl activate_null_tile
0485D9 E2 85 04    0034*       dl activate_null_tile
0485DC E2 85 04    0035*       dl activate_null_tile
0485DF AE 86 04    0036*       dl activate_crater
0485E2             0037*   ; end tile_activation_routines
0485E2             0038*   
0485E2             0039*   activate_null_tile:
0485E2 C9          0040*       ret ; dummy routine, do nothing
0485E3             0041*   move_active_tile:
0485E3             0042*   ; y-axis movement
0485E3 FD 27 04    0043*       ld hl,(iy+tile_y)
0485E6 FD 17 0A    0044*       ld de,(iy+tile_yvel)
0485E9 19          0045*       add hl,de
0485EA FD 2F 04    0046*       ld (iy+tile_y),hl
0485ED             0047*   ; detect screen edge collisions
0485ED             0048*   ; y-axis bottom is all we need to test
0485ED 11 00 80 FE 0049*       ld de,-tile_bottom*256
0485F1 ED 5A       0050*       adc hl,de
0485F3 F8          0051*       ret m ; still on screen so do nothing further
0485F4 AF          0052*       xor a ; signal caller that tile has scrolled off screen
0485F5 C9          0053*       ret
0485F6             0054*   ; end move_active_tile
0485F6             0055*   
0485F6             0056*   move_tiles:
0485F6             0057*   ; initialize pointers and loop counter
0485F6 FD 21 EE 7F 0058*       ld iy,tile_stack ; set iy to first record in table
       04          
0485FB             0059*   @move_loop:
0485FB FD 22 F1 82 0060*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
048600 FD 7E 02    0061*       ld a,(iy+2)
048603 B7          0062*       or a ; will be zero if at end of stack
048604 C8          0063*       ret z ; end of stack so we're done
048605             0064*   ; point iy to tile record
048605 FD 37 00    0065*       ld iy,(iy) ; iy points to the current tile record
048608 FD 22 F4 82 0066*       ld (tile_table_pointer),iy ; update table pointer
       04          
04860D             0067*   ; check top bit of tile_type to see if tile is just spawned
04860D FD CB 16 7E 0068*       bit 7,(iy+tile_type)
048611 C2 2F 86 04 0069*       jp nz,@just_spawned ; if just spawned, skip to next record
048615             0070*   ; check sprite_alive bit to see if tile is active
048615 FD CB 1D 76 0071*       bit sprite_alive,(iy+sprite_collisions)
048619 C8          0072*       ret z ; end of stack so we're done
04861A             0073*   ; otherwise we prepare to move the tile
04861A FD 27 1A    0074*       ld hl,(iy+tile_move_program) ; load the behavior subroutine address
04861D             0075*       CALL_HL
04861D 01 23 86 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
048621 C5          0002*M1     push bc ; which constitutes the return address
048622 E9          0003*M1     jp (hl) ; Jump to the address in HL
048623             0076*    ; get back stack pointer and loop
048623             0077*   @next_record:
048623 FD 2A F1 82 0078*       ld iy,(tile_stack_pointer)
       04          
048628 ED 33 03    0079*       lea iy,iy+3 ; next tile stack record
04862B C3 FB 85 04 0080*       jp @move_loop ; loop until we've checked all the records
04862F             0081*   @just_spawned:
04862F FD CB 16 BE 0082*       res 7,(iy+tile_type) ; clear just spawned flag
048633 C3 23 86 04 0083*       jp @next_record
048637             0084*   ; end move_tiles
048637             0085*   
048637             0086*   draw_active_tile:
048637 FD 27 17    0087*       ld hl,(iy+tile_base_bufferId)
04863A FD 7E 28    0088*       ld a,(iy+tile_frame)
04863D 85          0089*       add a,l ; TODO: with a little work we could make all tile base buffer ids align to 256
04863E 6F          0090*       ld l,a
04863F 3E 00       0091*       ld a,0 ; preserve carry
048641 8C          0092*       adc a,h
048642 67          0093*       ld h,a
048643 CD 7C 13 04 0094*       call vdu_buff_select ; buffer id of animation frame
048647 FD 07 01    0095*       ld bc,(iy+tile_x)
04864A FD 17 04    0096*       ld de,(iy+tile_y)
04864D CD F4 16 04 0097*       call vdu_plot_bmp168
048651 C9          0098*       ret
048652             0099*   ; end draw_active_tile
048652             0100*   
048652             0101*   ; create a new sprite at the same location as the current tile
048652             0102*   ; inputs: hl = pointer to new sprite default settings, tile_table_pointer = current tile
048652             0103*   ;         ix = pointer to sprite group, b = number of records in sprite group
048652             0104*   spawn_sprite_from_tile:
048652 E5          0105*       push hl ; back up pointer to new sprite defaults
048653 CD 4B 7A 04 0106*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
048657 E1          0107*       pop hl ; restore pointer to new sprite defaults
048658 D0          0108*       ret nc ; no carry means no free sprite slots, so we go home
048659             0109*   ; copy default settings to new sprite
048659 DD E5       0110*       push ix ; back up pointer to new sprite record
04865B ED 32 16    0111*       lea ix,ix+sprite_definitions ; bump pointer to copy to
04865E DD E5       0112*       push ix ; pointer to default sprite settings
048660 D1          0113*       pop de ; address to copy to
048661 01 2A 00 00 0114*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
048665 ED B0       0115*       ldir ; copies defaults to new sprite record
048667 DD E1       0116*       pop ix ; restore pointer to new sprite record
048669             0117*   ; copy sprite position from existing tile
048669 FD 2A F4 82 0118*       ld iy,(tile_table_pointer) ; get existing tile record
       04          
04866E FD 27 01    0119*       ld hl,(iy+tile_x)
048671 DD 2F 01    0120*       ld (ix+sprite_x),hl
048674 FD 27 04    0121*       ld hl,(iy+tile_y)
048677 DD 2F 04    0122*       ld (ix+sprite_y),hl
04867A             0123*   ; return to caller
04867A DD CB 16 FE 0124*       set 7,(ix+sprite_type) ; set just spawned flag
04867E DD CB 1D F6 0125*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
048682 37          0126*       scf ; set carry flag to indicate success
048683 C9          0127*       ret
048684             0128*   ; end spawn_sprite_from_tile
048684             0129*   
048684             0130*   ; create a new tile at the same location as the current tile
048684             0131*   ; inputs: tile_table_pointer = current tile
048684             0132*   spawn_active_tile_from_tile:
048684             0133*   ; copy default settings to new tile
048684 DD 2A F4 82 0134*       ld ix,(tile_table_pointer) ; get existing tile record
       04          
048689 ED 32 16    0135*       lea ix,ix+tile_definitions ; bump pointer to copy to
04868C DD E5       0136*       push ix ; pointer to default tile settings
04868E D1          0137*       pop de ; address to copy to
04868F 01 2A 00 00 0138*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
048693 ED B0       0139*       ldir ; copies defaults to new tile record
048695 DD 2A F4 82 0140*       ld ix,(tile_table_pointer) ; restore pointer to new tile record
       04          
04869A C9          0141*       ret
04869B             0142*   ; end spawn_active_tile_from_tile
04869B             0074        include "tile_crater.inc"
04869B             0001*   crater_defaults:
04869B 10          0002*       db tile_crater          ; type
04869C 05 01 00    0003*       dl BUF_EXPLOSION_A      ; base_bufferId
04869F B7 86 04    0004*       dl move_crater          ; move_program
0486A2 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
0486A3 10          0006*       db 16                   ; dim_x
0486A4 10          0007*       db 16                   ; dim_y
0486A5 01          0008*       db 1                    ; num_orientations
0486A6 04          0009*       db 4                    ; num_animations
0486A7 05          0010*       db 5	                ; animation
0486A8 08          0011*       db 8                    ; animation_timer
0486A9 00          0012*       db 0                    ; move_timer
0486AA 00          0013*       db 0                    ; move_step
0486AB 00          0014*       db 0                    ; points
0486AC 00          0015*       db 0                    ; shield_damage
0486AD 00          0016*       db 0                    ; frame
0486AE             0017*   
0486AE             0018*   activate_crater:
0486AE 21 9B 86 04 0019*       ld hl,crater_defaults
0486B2 CD 84 86 04 0020*       call spawn_active_tile_from_tile
0486B6             0021*   ; other specific initialization
0486B6 C9          0022*       ret
0486B7             0023*   ; end activate_crater
0486B7             0024*   
0486B7             0025*   move_crater:
0486B7 CD E3 85 04 0026*       call move_active_tile
0486BB CA 7E 83 04 0027*       jp z,table_deactivate_tile
0486BF             0028*   ; do animation
0486BF FD 35 23    0029*       dec (iy+tile_animation_timer)
0486C2 C0          0030*       ret nz ; not time to animate
0486C3 FD 35 22    0031*       dec (iy+sprite_animation) ; check whether time to transition to crater
0486C6 CC DC 86 04 0032*       call z,@make_crater
0486CA 3E 08       0033*       ld a,8
0486CC FD 77 23    0034*       ld (iy+tile_animation_timer),a
0486CF FD 7E 28    0035*       ld a,(iy+tile_frame)
0486D2 3C          0036*       inc a
0486D3 E6 03       0037*       and %00000011 ; modulo 4
0486D5 FD 77 28    0038*       ld (iy+tile_frame),a
0486D8 C3 37 86 04 0039*       jp draw_active_tile
0486DC             0040*   @make_crater:
0486DC 21 01 01 00 0041*       ld hl,BUF_CRATER_0
0486E0 FD 2F 17    0042*       ld (iy+tile_base_bufferId),hl
0486E3 3E FF       0043*       ld a,-1 ; will wrap to zero on return
0486E5 FD 77 28    0044*       ld (iy+tile_frame),a
0486E8 C9          0045*       ret
0486E9             0046*   ; end move_crater
0486E9             0075        include "tile_electrode.inc"
0486E9             0001*   electrode_defaults:
0486E9 09          0002*       db 9                    ; type
0486EA 74 01 00    0003*       dl BUF_TILE_BLANK       ; base_bufferId
0486ED 05 87 04    0004*       dl move_electrode       ; move_program
0486F0 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
0486F1 10          0006*       db 16                   ; dim_x
0486F2 10          0007*       db 16                   ; dim_y
0486F3 01          0008*       db 1                    ; num_orientations
0486F4 01          0009*       db 1                    ; num_animations
0486F5 00          0010*       db 0                    ; animation
0486F6 00          0011*       db 0                    ; animation_timer
0486F7 00          0012*       db 0                    ; move_timer
0486F8 00          0013*       db 0                    ; move_step
0486F9 05          0014*       db 5                    ; points
0486FA FC          0015*       db -4                   ; shield_damage
0486FB 00          0016*       db 0                    ; frame
0486FC             0017*   
0486FC             0018*   activate_electrode:
0486FC 21 E9 86 04 0019*       ld hl,electrode_defaults
048700             0020*   ; get next available active tile id
048700 CD B7 83 04 0021*       call spawn_active_tile
048704             0022*       ; ret nc ; no carry means no free active tile slots, so we go home
048704             0023*   ; other specific initialization
048704 C9          0024*       ret
048705             0025*   ; end activate_electrode
048705             0026*   
048705             0027*   move_electrode:
048705 CD E3 85 04 0028*       call move_active_tile
048709 CA 7E 83 04 0029*       jp z,table_deactivate_tile
04870D CD B2 1E 04 0030*       call check_enemy_collision_player
048711 C2 1D 87 04 0031*       jp nz,@laser ; no collision so check laser collision
048715 CD 71 79 04 0032*       call update_shields
048719 C3 2A 87 04 0033*       jp kill_electrode
04871D             0034*   @laser:
04871D CD A6 1E 04 0035*       call check_enemy_collision_laser
048721 C0          0036*       ret nz ; no collision so we're done
048722 CD 17 79 04 0037*       call update_score
048726 C3 2A 87 04 0038*       jp kill_electrode
04872A             0039*   ; end move_electrode
04872A             0040*   
04872A             0041*   kill_electrode:
04872A             0042*   ; activate blank tile bitmap
04872A 21 74 01 00 0043*       ld hl,BUF_TILE_BLANK
04872E CD 7C 13 04 0044*       call vdu_buff_select
048732             0045*   ; save y-coordinate of collision tile
048732 FD 27 04    0046*       ld hl,(iy+tile_y)
048735 22 E4 87 04 0047*       ld (@tile_y),hl
048739             0048*   ; initialize pointers
048739 2A F1 82 04 0049*       ld hl,(tile_stack_pointer)
04873D ED 27       0050*       ld hl,(hl) ; pointer to this tile table record
04873F E5          0051*       push hl ; save pointer to this tile table record
048740 DD 21 EE 7F 0052*       ld ix,tile_stack ; set ix to first record in table
       04          
048745             0053*   @check_loop:
048745 DD 22 E1 87 0054*       ld (@tile_stack_pointer),ix ; update stack pointer
       04          
04874A DD 7E 02    0055*       ld a,(ix+2)
04874D B7          0056*       or a ; will be zero if at end of stack
04874E CA BA 87 04 0057*       jp z,@done ; end of stack so we're done
048752             0058*   ; point ix to tile record
048752 DD 37 00    0059*       ld ix,(ix) ; ix points to the tile record being checked
048755             0060*   ; check top bit of tile_type to see if tile is just spawned
048755 DD CB 16 7E 0061*       bit 7,(ix+tile_type)
048759 C2 AE 87 04 0062*       jp nz,@next_record ; if just spawned, skip to next record
04875D             0063*   ; check sprite_alive bit to see if tile is active
04875D DD CB 1D 76 0064*       bit sprite_alive,(ix+sprite_collisions)
048761 C8          0065*       ret z ; end of stack so we're done
048762             0066*   ; check tile type
048762 DD 7E 16    0067*       ld a,(ix+tile_type)
048765 FE 0A       0068*       cp tile_lightning ; check if tile is lightning
048767 C2 AE 87 04 0069*       jp nz,@next_record ; if not an electrode, skip to next record
04876B             0070*   ; check tile position
04876B FD 2A E1 87 0071*       ld iy,(@tile_stack_pointer)
       04          
048770 FD 22 F1 82 0072*       ld (tile_stack_pointer),iy
       04          
048775 FD 37 00    0073*       ld iy,(iy) ; pointer to tile record to kill
048778 FD 22 F4 82 0074*       ld (tile_table_pointer),iy
       04          
04877D DD 27 04    0075*       ld hl,(ix+tile_y)
048780 ED 5B E4 87 0076*       ld de,(@tile_y)
       04          
048785 B7          0077*       or a ; clear carry
048786 E5          0078*       push hl
048787 ED 52       0079*       sbc hl,de
048789 E1          0080*       pop hl
04878A CA 9A 87 04 0081*       jp z,@kill_it
04878E 01 00 01 00 0082*       ld bc,1*256
048792 09          0083*       add hl,bc
048793 B7          0084*       or a
048794 ED 52       0085*       sbc hl,de
048796 C2 AE 87 04 0086*       jp nz,@next_record
04879A             0087*   @kill_it: ; deactivate tile and replace with inactive blank tile
04879A FD 07 01    0088*       ld bc,(iy+tile_x) ; get x position (ud.e already has y-position)
04879D CD F4 16 04 0089*       call vdu_plot_bmp168 ; plot blank tile (bitmap was activated at beginning of proc)
0487A1 CD 7E 83 04 0090*       call table_deactivate_tile
0487A5 DD 2A E1 87 0091*       ld ix,(@tile_stack_pointer) ; get back stack pointer
       04          
0487AA C3 45 87 04 0092*       jp @check_loop ; deactivate tile naturally advances to next record
0487AE             0093*    ; get back stack pointer and loop
0487AE             0094*   @next_record:
0487AE DD 2A E1 87 0095*       ld ix,(@tile_stack_pointer)
       04          
0487B3 ED 32 03    0096*       lea ix,ix+3 ; next tile stack record
0487B6 C3 45 87 04 0097*       jp @check_loop ; loop until we've checked all the records
0487BA             0098*   @done:
0487BA             0099*   ; find this tile record in the tile stack
0487BA D1          0100*       pop de ; restore pointer to this tile table record (was hl)
0487BB FD 21 EE 7F 0101*       ld iy,tile_stack ; set ix to first record in table
       04          
0487C0             0102*   @find_loop:
0487C0 FD 27 00    0103*       ld hl,(iy)
0487C3 ED 33 03    0104*       lea iy,iy+3 ; next tile stack record
0487C6 B7          0105*       or a ; clear carry
0487C7 ED 52       0106*       sbc hl,de ; if not the same address, loop
0487C9 C2 C0 87 04 0107*       jp nz,@find_loop
0487CD ED 33 FD    0108*       lea iy,iy-3 ; back up to the record we want
0487D0 FD 22 F1 82 0109*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
0487D5 FD 37 00    0110*       ld iy,(iy) ; iy points to the tile stack record
0487D8 FD 22 F4 82 0111*       ld (tile_table_pointer),iy ; set pointer to this tile record
       04          
0487DD C3 AE 86 04 0112*       jp activate_crater
0487E1 EE 7F 04    0113*   @tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
0487E4 00 00 00    0114*   @tile_y: dl 0 ; y position of tiles to kill
0487E7             0115*   ; end move_electrode
0487E7             0076        include "tile_lightning.inc"
0487E7             0001*   lightning_defaults:
0487E7 0A          0002*       db tile_lightning       ; type
0487E8 4C 01 00    0003*       dl BUF_LIGHTNING_H_0    ; base_bufferId
0487EB 04 88 04    0004*       dl move_lightning       ; move_program
0487EE 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
0487EF 10          0006*       db 16                   ; dim_x
0487F0 10          0007*       db 16                   ; dim_y
0487F1 01          0008*       db 1                    ; num_orientations
0487F2 02          0009*       db 2                    ; num_animations
0487F3 00          0010*       db 0                    ; animation
0487F4 08          0011*       db 8                    ; animation_timer
0487F5 00          0012*       db 0                    ; move_timer
0487F6 00          0013*       db 0                    ; move_step
0487F7 00          0014*       db 0                    ; points
0487F8 FF          0015*       db -1                    ; shield_damage
0487F9 00          0016*       db 0                    ; frame
0487FA             0017*   
0487FA             0018*   activate_lightning:
0487FA 21 E7 87 04 0019*       ld hl,lightning_defaults
0487FE             0020*   ; get next available active tile id
0487FE CD B7 83 04 0021*       call spawn_active_tile
048802 D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
048803             0023*   ; other specific initialization
048803 C9          0024*       ret
048804             0025*   ; end activate_lightning
048804             0026*   
048804             0027*   move_lightning:
048804 CD E3 85 04 0028*       call move_active_tile
048808 CA 7E 83 04 0029*       jp z,table_deactivate_tile
04880C CD A6 1E 04 0030*       call check_enemy_collision_laser ; kills laser on collision but does not die
048810 CD B2 1E 04 0031*       call check_enemy_collision_player
048814 C2 1C 88 04 0032*       jp nz,@animate ; no collision so do animation
048818 CD 71 79 04 0033*       call update_shields
04881C             0034*   @animate:
04881C FD 35 23    0035*       dec (iy+tile_animation_timer)
04881F C0          0036*       ret nz ; not time to animate
048820             0037*   ; reset the animation timer and bump animation
048820 3E 08       0038*       ld a,8
048822 FD 77 23    0039*       ld (iy+tile_animation_timer),a
048825 FD 7E 28    0040*       ld a,(iy+tile_frame)
048828 3C          0041*       inc a
048829 E6 01       0042*       and %00000001 ; modulo 1
04882B FD 77 28    0043*       ld (iy+tile_frame),a
04882E C3 37 86 04 0044*       jp draw_active_tile
048832 C9          0045*       ret
048833             0077        include "tile_pad_small.inc"
048833             0001*   pad_small_defaults:
048833 01          0002*       db tile_pad_small       ; type
048834 75 01 00    0003*       dl BUF_TILE_PAD_0       ; base_bufferId
048837 59 88 04    0004*       dl move_pad_small       ; move_program
04883A 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
04883B 10          0006*       db 16                   ; dim_x
04883C 10          0007*       db 16                   ; dim_y
04883D 01          0008*       db 1                    ; num_orientations
04883E 01          0009*       db 1                    ; num_animations
04883F 00          0010*       db 0                    ; animation
048840 10          0011*       db 16                   ; animation_timer
048841 00          0012*       db 0                    ; move_timer
048842 00          0013*       db 0                    ; move_step
048843 05          0014*       db 5                    ; points
048844 00          0015*       db 0                    ; shield_damage
048845 00          0016*       db 0                    ; frame
048846             0017*   
048846             0018*   activate_pad_small:
048846 21 33 88 04 0019*       ld hl,pad_small_defaults
04884A             0020*   ; get next available active tile id
04884A CD B7 83 04 0021*       call spawn_active_tile
04884E D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
04884F             0023*   ; other specific initialization
04884F CD FB 04 04 0024*       call rand_8     ; snag a random number
048853 E6 1F       0025*       and %00011111 ; keep only 5 lowest bits (max 31)
048855 DD 77 24    0026*       ld (ix+tile_move_timer),a ; when this hits zero,will spawn a seeker
048858 C9          0027*       ret
048859             0028*   ; end activate_pad_small
048859             0029*   
048859             0030*   move_pad_small:
048859 CD E3 85 04 0031*       call move_active_tile
04885D CA 7E 83 04 0032*       jp z,table_deactivate_tile
048861 CD A6 1E 04 0033*       call check_enemy_collision_laser
048865 CA 96 88 04 0034*       jp z,kill_pad_small
048869             0035*   ; do animation
048869 FD 35 23    0036*       dec (iy+tile_animation_timer)
04886C C2 82 88 04 0037*       jp nz,@F
048870 3E 10       0038*       ld a,16
048872 FD 77 23    0039*       ld (iy+tile_animation_timer),a
048875 FD 7E 28    0040*       ld a,(iy+tile_frame)
048878 3C          0041*       inc a
048879 E6 07       0042*       and %00000111 ; modulo 8
04887B FD 77 28    0043*       ld (iy+tile_frame),a
04887E CD 37 86 04 0044*       call draw_active_tile
048882             0045*   @@: ; check whether it is time to spawn a seeker
048882 FD 35 24    0046*       dec (iy+tile_move_timer)
048885 C0          0047*       ret nz
048886             0048*   ; spwan a seeker
048886 CD AF 1F 04 0049*       call enemy_spawn_seeker
04888A             0050*       ; fall through to reset move timer
04888A             0051*   pad_small_reset_move_timer:
04888A CD FB 04 04 0052*       call rand_8     ; snag a random number
04888E E6 1F       0053*       and %00011111   ; keep only 5 lowest bits (max 31)
048890 C6 40       0054*       add a,64 ; range is now 64-127
048892 FD 77 24    0055*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
048895 C9          0056*       ret
048896             0057*   
048896             0058*   kill_pad_small:
048896 CD 17 79 04 0059*       call update_score
04889A C3 AE 86 04 0060*       jp activate_crater
04889E             0061*   ; end move_pad_small
04889E             0078        include "tile_turret_fireball.inc"
04889E             0001*   turret_fireball_defaults:
04889E 02          0002*       db enemy_ground         ; type
04889F 7D 01 00    0003*       dl BUF_TURRET_000       ; base_bufferId
0488A2 C4 88 04    0004*       dl move_turret_fireball ; move_program
0488A5 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
0488A6 10          0006*       db 16                   ; dim_x
0488A7 10          0007*       db 16                   ; dim_y
0488A8 20          0008*       db 32                   ; num_orientations
0488A9 01          0009*       db 1                    ; num_animations
0488AA 00          0010*       db 0                    ; animation
0488AB 00          0011*       db 0                    ; animation_timer
0488AC 00          0012*       db 0                    ; move_timer
0488AD 00          0013*       db 0                    ; move_step
0488AE 05          0014*       db 5                    ; points
0488AF 00          0015*       db 0                    ; shield_damage
0488B0 00          0016*       db 0                    ; frame
0488B1             0017*   
0488B1             0018*   activate_turret_fireball:
0488B1 21 9E 88 04 0019*       ld hl,turret_fireball_defaults
0488B5             0020*   ; get next available active tile id
0488B5 CD B7 83 04 0021*       call spawn_active_tile
0488B9 D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
0488BA             0023*   ; other specific initialization
0488BA CD FB 04 04 0024*       call rand_8     ; snag a random number
0488BE E6 1F       0025*       and %00011111 ; keep only 5 lowest bits (max 31)
0488C0 DD 77 24    0026*       ld (ix+tile_move_timer),a ; when this hits zero,will spawn a fireball
0488C3 C9          0027*       ret
0488C4             0028*   ; end activate_turret_fireball
0488C4             0029*   
0488C4             0030*   move_turret_fireball:
0488C4 CD E3 85 04 0031*       call move_active_tile
0488C8 CA 7E 83 04 0032*       jp z,table_deactivate_tile
0488CC CD A6 1E 04 0033*       call check_enemy_collision_laser
0488D0 CA 03 89 04 0034*       jp z,kill_turret_fireball
0488D4             0035*   ; target player
0488D4 CD 29 7F 04 0036*       call tile_orientation_to_player
0488D8 21 00 04 00 0037*       ld hl,speed_fireball
0488DC 22 56 7F 04 0038*       ld (Vp),hl ; param for targeting_computer
0488E0 CD 6E 7F 04 0039*       call targeting_computer
0488E4 FD 2F 10    0040*       ld (iy+tile_heading),hl ; save active tile heading
0488E7 CD 55 84 04 0041*       call tile_frame_heading
0488EB CD 37 86 04 0042*       call draw_active_tile
0488EF             0043*   ; check whether it is time to spawn a fireball
0488EF FD 35 24    0044*       dec (iy+tile_move_timer)
0488F2 C0          0045*       ret nz
0488F3             0046*   ; spwan a fireball
0488F3 CD F6 1E 04 0047*       call enemy_spawn_fireball
0488F7             0048*       ; fall through to reset move timer
0488F7             0049*   turret_fireball_reset_move_timer:
0488F7 CD FB 04 04 0050*       call rand_8     ; snag a random number
0488FB E6 1F       0051*       and %00011111   ; keep only 5 lowest bits (max 31)
0488FD C6 18       0052*       add a,24 ; range is now 24-55
0488FF FD 77 24    0053*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
048902 C9          0054*       ret
048903             0055*   
048903             0056*   kill_turret_fireball:
048903 CD 17 79 04 0057*       call update_score
048907 C3 AE 86 04 0058*       jp activate_crater
04890B             0059*   ; end move_turret_fireball
04890B             0079        include "debug.inc"
04890B             0001*   printHexA:
04890B F5          0002*       push af
04890C C5          0003*       push bc
04890D CD 91 00 04 0004*       call printHex8
048911 3E 20       0005*       ld a,' '
048913 5B D7       0006*       rst.lil 10h
048915 C1          0007*       pop bc
048916 F1          0008*       pop af
048917 C9          0009*       ret
048918             0010*   
048918             0011*   printHexHL:
048918 F5          0012*       push af
048919 C5          0013*       push bc
04891A CD 8B 00 04 0014*       call printHex16
04891E 3E 20       0015*       ld a,' '
048920 5B D7       0016*       rst.lil 10h
048922 C1          0017*       pop bc
048923 F1          0018*       pop af
048924 C9          0019*       ret
048925             0020*   
048925             0021*   printHexUHL:
048925 F5          0022*       push af
048926 C5          0023*       push bc
048927 CD 83 00 04 0024*       call printHex24
04892B 3E 20       0025*       ld a,' '
04892D 5B D7       0026*       rst.lil 10h
04892F C1          0027*       pop bc
048930 F1          0028*       pop af
048931 C9          0029*       ret
048932             0030*   
048932             0031*   printHexAUHL:
048932 F5          0032*       push af
048933 C5          0033*       push bc
048934 CD 91 00 04 0034*       call printHex8
048938 3E 2E       0035*       ld a,'.'
04893A 5B D7       0036*       rst.lil 10h
04893C CD 83 00 04 0037*       call printHex24
048940 3E 20       0038*       ld a,' '
048942 5B D7       0039*       rst.lil 10h
048944 C1          0040*       pop bc
048945 F1          0041*       pop af
048946 C9          0042*       ret
048947             0043*   
048947             0044*   printHexABHL:
048947             0045*   ; preserve registers
048947 C5          0046*       push bc ; b will be ok c will not
048948 F5          0047*       push af ; will get totally destroyed
048949             0048*   ; print a
048949 CD 91 00 04 0049*       call printHex8
04894D             0050*   ; print b
04894D 78          0051*       ld a,b
04894E CD 91 00 04 0052*       call printHex8
048952             0053*   ; print hl
048952 CD 8B 00 04 0054*       call printHex16
048956             0055*   ; restore registers
048956 F1          0056*       pop af
048957 C1          0057*       pop bc
048958 C9          0058*       ret
048959             0059*   
048959             0060*   printHexBHL:
048959             0061*   ; preserve registers
048959 C5          0062*       push bc ; b will be ok c will not
04895A F5          0063*       push af ; will get totally destroyed
04895B             0064*   ; print b
04895B 78          0065*       ld a,b
04895C CD 91 00 04 0066*       call printHex8
048960             0067*   ; print hl
048960 CD 8B 00 04 0068*       call printHex16
048964             0069*   ; restore registers
048964 F1          0070*       pop af
048965 C1          0071*       pop bc
048966 C9          0072*       ret
048967             0073*   
048967             0074*   printHexCDE:
048967             0075*   ; preserve registers
048967 C5          0076*       push bc ; b will be ok c will not
048968 F5          0077*       push af ; will get totally destroyed
048969             0078*   ; print c
048969 79          0079*       ld a,c
04896A CD 91 00 04 0080*       call printHex8
04896E             0081*   ; print de
04896E EB          0082*       ex de,hl
04896F CD 8B 00 04 0083*       call printHex16
048973 EB          0084*       ex de,hl
048974             0085*   ; restore registers
048974 F1          0086*       pop af
048975 C1          0087*       pop bc
048976 C9          0088*       ret
048977             0089*   
048977             0090*   printHexUIX:
048977             0091*   ; store everything in scratch
048977 22 18 03 04 0092*       ld (uhl),hl
04897B ED 43 1B 03 0093*       ld (ubc),bc
       04          
048980 ED 53 1E 03 0094*       ld (ude),de
       04          
048985 DD 22 21 03 0095*       ld (uix),ix
       04          
04898A FD 22 24 03 0096*       ld (uiy),iy
       04          
04898F F5          0097*       push af ; fml
048990             0098*   
048990 21 AF 02 04 0099*       ld hl,str_ixu
048994 CD 63 00 04 0100*       call printString
048998 2A 21 03 04 0101*       ld hl,(uix)
04899C CD 83 00 04 0102*       call printHex24
0489A0 CD 78 00 04 0103*       call printNewLine
0489A4             0104*   
0489A4             0105*   ; restore everything
0489A4 2A 18 03 04 0106*       ld hl, (uhl)
0489A8 ED 4B 1B 03 0107*       ld bc, (ubc)
       04          
0489AD ED 5B 1E 03 0108*       ld de, (ude)
       04          
0489B2 DD 2A 21 03 0109*       ld ix, (uix)
       04          
0489B7 FD 2A 24 03 0110*       ld iy, (uiy)
       04          
0489BC F1          0111*       pop af
0489BD             0112*   ; all done
0489BD C9          0113*       ret
0489BE             0114*   
0489BE             0115*   
0489BE             0116*   ; print registers to screen in hexidecimal format
0489BE             0117*   ; inputs: none
0489BE             0118*   ; outputs: values of every register printed to screen
0489BE             0119*   ;    values of each register in global scratch memory
0489BE             0120*   ; destroys: nothing
0489BE             0121*   stepRegistersHex:
0489BE             0122*   ; store everything in scratch
0489BE 22 18 03 04 0123*       ld (uhl),hl
0489C2 ED 43 1B 03 0124*       ld (ubc),bc
       04          
0489C7 ED 53 1E 03 0125*       ld (ude),de
       04          
0489CC DD 22 21 03 0126*       ld (uix),ix
       04          
0489D1 FD 22 24 03 0127*       ld (uiy),iy
       04          
0489D6 F5          0128*       push af ; fml
0489D7 E1          0129*       pop hl ; thanks, zilog
0489D8 22 15 03 04 0130*       ld (uaf),hl
0489DC F5          0131*       push af ; dammit
0489DD             0132*   
0489DD             0133*   ; home the cursor
0489DD             0134*       ; call vdu_home_cursor
0489DD             0135*   
0489DD             0136*   ; print each register
0489DD 21 9B 02 04 0137*       ld hl,str_afu
0489E1 CD 63 00 04 0138*       call printString
0489E5 2A 15 03 04 0139*       ld hl,(uaf)
0489E9 CD 83 00 04 0140*       call printHex24
0489ED CD 78 00 04 0141*       call printNewLine
0489F1             0142*   
0489F1 21 A0 02 04 0143*       ld hl,str_hlu
0489F5 CD 63 00 04 0144*       call printString
0489F9 2A 18 03 04 0145*       ld hl,(uhl)
0489FD CD 83 00 04 0146*       call printHex24
048A01 CD 78 00 04 0147*       call printNewLine
048A05             0148*   
048A05 21 A5 02 04 0149*       ld hl,str_bcu
048A09 CD 63 00 04 0150*       call printString
048A0D 2A 1B 03 04 0151*       ld hl,(ubc)
048A11 CD 83 00 04 0152*       call printHex24
048A15 CD 78 00 04 0153*       call printNewLine
048A19             0154*   
048A19 21 AA 02 04 0155*       ld hl,str_deu
048A1D CD 63 00 04 0156*       call printString
048A21 2A 1E 03 04 0157*       ld hl,(ude)
048A25 CD 83 00 04 0158*       call printHex24
048A29 CD 78 00 04 0159*       call printNewLine
048A2D             0160*   
048A2D 21 AF 02 04 0161*       ld hl,str_ixu
048A31 CD 63 00 04 0162*       call printString
048A35 2A 21 03 04 0163*       ld hl,(uix)
048A39 CD 83 00 04 0164*       call printHex24
048A3D CD 78 00 04 0165*       call printNewLine
048A41             0166*   
048A41 21 B4 02 04 0167*       ld hl,str_iyu
048A45 CD 63 00 04 0168*       call printString
048A49 2A 24 03 04 0169*       ld hl,(uiy)
048A4D CD 83 00 04 0170*       call printHex24
048A51 CD 78 00 04 0171*       call printNewLine
048A55             0172*   
048A55             0173*       ; call vsync
048A55             0174*   
048A55 CD 78 00 04 0175*       call printNewLine
048A59             0176*   
048A59             0177*   ; check for right shift key and quit if pressed
048A59             0178*       MOSCALL mos_getkbmap
048A59 3E 1E       0001*M1 			LD	A, function
048A5B 5B CF       0002*M1 			RST.LIL	08h
048A5D             0179*   @stayhere:
048A5D             0180*   ; 7 RightShift
048A5D DD CB 00 76 0181*       bit 6,(ix+0)
048A61 20 02       0182*       jr nz,@RightShift
048A63 18 F8       0183*       jr @stayhere
048A65             0184*   @RightShift:
048A65 DD CB 0E 86 0185*       res 0,(ix+14) ; debounce the key (hopefully)
048A69 3E 80       0186*       ld a,%10000000
048A6B             0187*       ; call multiPurposeDelay
048A6B             0188*   
048A6B             0189*   ; restore everything
048A6B 2A 18 03 04 0190*       ld hl, (uhl)
048A6F ED 4B 1B 03 0191*       ld bc, (ubc)
       04          
048A74 ED 5B 1E 03 0192*       ld de, (ude)
       04          
048A79 DD 2A 21 03 0193*       ld ix, (uix)
       04          
048A7E FD 2A 24 03 0194*       ld iy, (uiy)
       04          
048A83 F1          0195*       pop af
048A84             0196*   ; all done
048A84 C9          0197*       ret
048A85             0198*   
048A85             0199*   ; print registers to screen in hexidecimal format
048A85             0200*   ; inputs: none
048A85             0201*   ; outputs: values of every register printed to screen
048A85             0202*   ;    values of each register in global scratch memory
048A85             0203*   ; destroys: nothing
048A85             0204*   dumpRegistersHex:
048A85             0205*   ; store everything in scratch
048A85 22 18 03 04 0206*       ld (uhl),hl
048A89 ED 43 1B 03 0207*       ld (ubc),bc
       04          
048A8E ED 53 1E 03 0208*       ld (ude),de
       04          
048A93 DD 22 21 03 0209*       ld (uix),ix
       04          
048A98 FD 22 24 03 0210*       ld (uiy),iy
       04          
048A9D F5          0211*       push af ; fml
048A9E E1          0212*       pop hl ; thanks, zilog
048A9F 22 15 03 04 0213*       ld (uaf),hl
048AA3 F5          0214*       push af ; dammit
048AA4             0215*   
048AA4             0216*   ; home the cursor
048AA4             0217*       ; call vdu_home_cursor
048AA4             0218*       ; call printNewLine
048AA4             0219*   
048AA4             0220*   ; print each register
048AA4 21 9B 02 04 0221*       ld hl,str_afu
048AA8 CD 63 00 04 0222*       call printString
048AAC 2A 15 03 04 0223*       ld hl,(uaf)
048AB0 CD 83 00 04 0224*       call printHex24
048AB4 CD 78 00 04 0225*       call printNewLine
048AB8             0226*   
048AB8 21 A0 02 04 0227*       ld hl,str_hlu
048ABC CD 63 00 04 0228*       call printString
048AC0 2A 18 03 04 0229*       ld hl,(uhl)
048AC4 CD 83 00 04 0230*       call printHex24
048AC8 CD 78 00 04 0231*       call printNewLine
048ACC             0232*   
048ACC 21 A5 02 04 0233*       ld hl,str_bcu
048AD0 CD 63 00 04 0234*       call printString
048AD4 2A 1B 03 04 0235*       ld hl,(ubc)
048AD8 CD 83 00 04 0236*       call printHex24
048ADC CD 78 00 04 0237*       call printNewLine
048AE0             0238*   
048AE0 21 AA 02 04 0239*       ld hl,str_deu
048AE4 CD 63 00 04 0240*       call printString
048AE8 2A 1E 03 04 0241*       ld hl,(ude)
048AEC CD 83 00 04 0242*       call printHex24
048AF0 CD 78 00 04 0243*       call printNewLine
048AF4             0244*   
048AF4 21 AF 02 04 0245*       ld hl,str_ixu
048AF8 CD 63 00 04 0246*       call printString
048AFC 2A 21 03 04 0247*       ld hl,(uix)
048B00 CD 83 00 04 0248*       call printHex24
048B04 CD 78 00 04 0249*       call printNewLine
048B08             0250*   
048B08 21 B4 02 04 0251*       ld hl,str_iyu
048B0C CD 63 00 04 0252*       call printString
048B10 2A 24 03 04 0253*       ld hl,(uiy)
048B14 CD 83 00 04 0254*       call printHex24
048B18             0255*   
048B18 CD 78 00 04 0256*       call printNewLine
048B1C CD 78 00 04 0257*       call printNewLine
048B20             0258*   ; restore everything
048B20 2A 18 03 04 0259*       ld hl, (uhl)
048B24 ED 4B 1B 03 0260*       ld bc, (ubc)
       04          
048B29 ED 5B 1E 03 0261*       ld de, (ude)
       04          
048B2E DD 2A 21 03 0262*       ld ix, (uix)
       04          
048B33 FD 2A 24 03 0263*       ld iy, (uiy)
       04          
048B38 F1          0264*       pop af
048B39             0265*   ; all done
048B39 C9          0266*       ret
048B3A             0267*   
048B3A             0268*   dumpRegistersHexPrime:
048B3A D9          0269*       exx
048B3B 08          0270*       ex af,af'
048B3C CD 85 8A 04 0271*       call dumpRegistersHex
048B40 08          0272*       ex af,af'
048B41 D9          0273*       exx
048B42 C9          0274*       ret
048B43             0275*   
048B43             0276*   ; additionally dump prime registers
048B43             0277*   ; inputs: none
048B43             0278*   ; outputs: values of every register printed to screen
048B43             0279*   ; destroys: nothing
048B43             0280*   dumpRegistersHexAll:
048B43 CD 85 8A 04 0281*       call dumpRegistersHex
048B47 08          0282*       ex af,af'
048B48 D9          0283*       exx
048B49 CD 85 8A 04 0284*       call dumpRegistersHex
048B4D 08          0285*       ex af,af'
048B4E D9          0286*       exx
048B4F C9          0287*       ret
048B50             0288*   
048B50             0289*   ; print hlu to screen in hexidecimal format
048B50             0290*   ; inputs: none
048B50             0291*   ; destroys: nothing
048B50             0292*   print_hex_hl:
048B50 F5          0293*       push af
048B51 E5          0294*       push hl
048B52 21 A0 02 04 0295*       ld hl,str_hlu
048B56 CD 63 00 04 0296*       call printString
048B5A E1          0297*       pop hl
048B5B E5          0298*       push hl
048B5C CD 83 00 04 0299*       call printHex24
048B60 3E 20       0300*       ld a,' '
048B62 5B D7       0301*       rst.lil 10h
048B64 E1          0302*       pop hl
048B65 F1          0303*       pop af
048B66 C9          0304*       ret
048B67             0305*   
048B67             0306*   ; print bcu to screen in hexidecimal format
048B67             0307*   ; inputs: none
048B67             0308*   ; destroys: nothing
048B67             0309*   print_hex_bc:
048B67 F5          0310*       push af
048B68 E5          0311*       push hl
048B69 C5          0312*       push bc
048B6A 21 A5 02 04 0313*       ld hl,str_bcu
048B6E CD 63 00 04 0314*       call printString
048B72 E1          0315*       pop hl
048B73 E5          0316*       push hl
048B74 CD 83 00 04 0317*       call printHex24
048B78 3E 20       0318*       ld a,' '
048B7A 5B D7       0319*       rst.lil 10h
048B7C C1          0320*       pop bc
048B7D E1          0321*       pop hl
048B7E F1          0322*       pop af
048B7F C9          0323*       ret
048B80             0324*   
048B80             0325*   ; print deu to screen in hexidecimal format
048B80             0326*   ; inputs: none
048B80             0327*   ; destroys: nothing
048B80             0328*   print_hex_de:
048B80 F5          0329*       push af
048B81 E5          0330*       push hl
048B82 D5          0331*       push de
048B83 21 AA 02 04 0332*       ld hl,str_deu
048B87 CD 63 00 04 0333*       call printString
048B8B E1          0334*       pop hl
048B8C E5          0335*       push hl
048B8D CD 83 00 04 0336*       call printHex24
048B91 3E 20       0337*       ld a,' '
048B93 5B D7       0338*       rst.lil 10h
048B95 D1          0339*       pop de
048B96 E1          0340*       pop hl
048B97 F1          0341*       pop af
048B98 C9          0342*       ret
048B99             0343*   
048B99             0344*   
048B99             0345*   ; inputs: whatever is in the flags register
048B99             0346*   ; outputs: binary representation of flags
048B99             0347*   ;          with a header so we know which is what
048B99             0348*   ; destroys: nothing
048B99             0349*   ; preserves: everything
048B99             0350*   dumpFlags:
048B99             0351*   ; first we curse zilog for not giving direct access to flags
048B99 F5          0352*       push af ; this is so we can send it back unharmed
048B9A F5          0353*       push af ; this is so we can pop it to hl
048B9B             0354*   ; store everything in scratch
048B9B 22 18 03 04 0355*       ld (uhl),hl
048B9F ED 43 1B 03 0356*       ld (ubc),bc
       04          
048BA4 ED 53 1E 03 0357*       ld (ude),de
       04          
048BA9 DD 22 21 03 0358*       ld (uix),ix
       04          
048BAE FD 22 24 03 0359*       ld (uiy),iy
       04          
048BB3             0360*   ; next we print the header
048BB3 21 DF 8B 04 0361*       ld hl,@header
048BB7 CD 63 00 04 0362*       call printString
048BBB E1          0363*       pop hl ; flags are now in l
048BBC 7D          0364*       ld a,l ; flags are now in a
048BBD CD 51 02 04 0365*       call printBin8
048BC1 CD 78 00 04 0366*       call printNewLine
048BC5             0367*   ; restore everything
048BC5 2A 18 03 04 0368*       ld hl, (uhl)
048BC9 ED 4B 1B 03 0369*       ld bc, (ubc)
       04          
048BCE ED 5B 1E 03 0370*       ld de, (ude)
       04          
048BD3 DD 2A 21 03 0371*       ld ix, (uix)
       04          
048BD8 FD 2A 24 03 0372*       ld iy, (uiy)
       04          
048BDD F1          0373*       pop af ; send her home the way she came
048BDE C9          0374*       ret
048BDF             0375*   ; Bit 7 (S): Sign flag
048BDF             0376*   ; Bit 6 (Z): Zero flag
048BDF             0377*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
048BDF             0378*   ; Bit 4 (H): Half Carry flag
048BDF             0379*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
048BDF             0380*   ; Bit 2 (PV): Parity/Overflow flag
048BDF             0381*   ; Bit 1 (N): Subtract flag
048BDF             0382*   ; Bit 0 (C): Carry flag
048BDF 53 5A 78 48 0383*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
048BEA             0384*   
048BEA             0385*   
048BEA             0386*   ; print bytes from an address to the screen in hexidecimal format
048BEA             0387*   ; inputs: hl = address of first byte to print, a = number of bytes to print
048BEA             0388*   ; outputs: values of each byte printed to screen separated by spaces
048BEA             0389*   ; destroys: nothing
048BEA             0390*   dumpMemoryHex:
048BEA             0391*   ; save registers to the stack
048BEA C5          0392*       push bc
048BEB E5          0393*       push hl
048BEC F5          0394*       push af
048BED             0395*   
048BED             0396*   ; print the address and separator
048BED CD 83 00 04 0397*       call printHex24
048BF1 3E 3A       0398*       ld a,':'
048BF3 5B D7       0399*       rst.lil 10h
048BF5 3E 20       0400*       ld a,' '
048BF7 5B D7       0401*       rst.lil 10h
048BF9             0402*   
048BF9             0403*   ; set b to be our loop counter
048BF9 F1          0404*       pop af
048BFA 47          0405*       ld b,a
048BFB E1          0406*       pop hl
048BFC E5          0407*       push hl
048BFD F5          0408*       push af
048BFE             0409*   @loop:
048BFE             0410*   ; print the byte
048BFE 7E          0411*       ld a,(hl)
048BFF CD 91 00 04 0412*       call printHex8
048C03             0413*   ; print a space
048C03 3E 20       0414*       ld a,' '
048C05 5B D7       0415*       rst.lil 10h
048C07 23          0416*       inc hl
048C08 10 F4       0417*       djnz @loop
048C0A CD 78 00 04 0418*       call printNewLine
048C0E             0419*   
048C0E             0420*   ; restore everything
048C0E F1          0421*       pop af
048C0F E1          0422*       pop hl
048C10 C1          0423*       pop bc
048C11             0424*   
048C11             0425*   ; all done
048C11 C9          0426*       ret
048C12             0427*   
048C12             0428*   
048C12             0429*   ; print bytes from an address to the screen in binary format
048C12             0430*   ; inputs: hl = address of first byte to print, a = number of bytes to print
048C12             0431*   ; outputs: values of each byte printed to screen separated by spaces
048C12             0432*   ; destroys: nothing
048C12             0433*   dumpMemoryBin:
048C12             0434*   ; save all registers to the stack
048C12 F5          0435*       push af
048C13 C5          0436*       push bc
048C14 D5          0437*       push de
048C15 E5          0438*       push hl
048C16 DD E5       0439*       push ix
048C18 FD E5       0440*       push iy
048C1A             0441*   
048C1A             0442*   ; set b to be our loop counter
048C1A 47          0443*       ld b,a
048C1B             0444*   @loop:
048C1B             0445*   ; print the byte
048C1B 7E          0446*       ld a,(hl)
048C1C E5          0447*       push hl
048C1D C5          0448*       push bc
048C1E CD 51 02 04 0449*       call printBin8
048C22 C1          0450*       pop bc
048C23             0451*   ; print a space
048C23 3E 20       0452*       ld a,' '
048C25 5B D7       0453*       rst.lil 10h
048C27 E1          0454*       pop hl
048C28 23          0455*       inc hl
048C29 10 F0       0456*       djnz @loop
048C2B CD 78 00 04 0457*       call printNewLine
048C2F             0458*   
048C2F             0459*   ; restore everything
048C2F FD E1       0460*       pop iy
048C31 DD E1       0461*       pop ix
048C33 E1          0462*       pop hl
048C34 D1          0463*       pop de
048C35 C1          0464*       pop bc
048C36 F1          0465*       pop af
048C37             0466*   ; all done
048C37 C9          0467*       ret
048C38             0468*   
048C38             0469*   ; print bytes from an address to the screen in binary format
048C38             0470*   ; with the bits of each byte in reverse order (lsb first)
048C38             0471*   ; inputs: hl = address of first byte to print, a = number of bytes to print
048C38             0472*   ; outputs: values of each byte printed to screen separated by spaces
048C38             0473*   ; destroys: nothing
048C38             0474*   dumpMemoryBinRev:
048C38             0475*   ; save all registers to the stack
048C38 F5          0476*       push af
048C39 C5          0477*       push bc
048C3A D5          0478*       push de
048C3B E5          0479*       push hl
048C3C DD E5       0480*       push ix
048C3E FD E5       0481*       push iy
048C40             0482*   
048C40             0483*   ; set b to be our loop counter
048C40 47          0484*       ld b,a
048C41             0485*   @loop:
048C41             0486*   ; print the byte
048C41 7E          0487*       ld a,(hl)
048C42 E5          0488*       push hl
048C43 C5          0489*       push bc
048C44 CD 76 02 04 0490*       call printBin8Rev
048C48 C1          0491*       pop bc
048C49             0492*   ; print a space
048C49 3E 20       0493*       ld a,' '
048C4B 5B D7       0494*       rst.lil 10h
048C4D E1          0495*       pop hl
048C4E 23          0496*       inc hl
048C4F 10 F0       0497*       djnz @loop
048C51 CD 78 00 04 0498*       call printNewLine
048C55             0499*   
048C55             0500*   ; restore everything
048C55 FD E1       0501*       pop iy
048C57 DD E1       0502*       pop ix
048C59 E1          0503*       pop hl
048C5A D1          0504*       pop de
048C5B C1          0505*       pop bc
048C5C F1          0506*       pop af
048C5D             0507*   ; all done
048C5D C9          0508*       ret
048C5E             0509*   
048C5E             0510*   DEBUG_PRINT:
048C5E             0511*       PUSH_ALL
048C5E 08          0001*M1     ex af,af'
048C5F D9          0002*M1     exx
048C60 F5          0003*M1     push af
048C61 E5          0004*M1     push hl
048C62 C5          0005*M1     push bc
048C63 D5          0006*M1     push de
048C64             0007*M1 
048C64 08          0008*M1     ex af,af'
048C65 D9          0009*M1     exx
048C66 F5          0010*M1     push af
048C67 E5          0011*M1     push hl
048C68 C5          0012*M1     push bc
048C69 D5          0013*M1     push de
048C6A DD E5       0014*M1     push ix
048C6C FD E5       0015*M1     push iy
048C6E 0E 00       0512*       ld c,0 ; X
048C70 06 00       0513*       ld b,0 ; Y
048C72 CD 73 12 04 0514*       call vdu_move_cursor
048C76             0515*       POP_ALL
048C76 FD E1       0001*M1     pop iy
048C78 DD E1       0002*M1     pop ix
048C7A D1          0003*M1     pop de
048C7B C1          0004*M1     pop bc
048C7C E1          0005*M1     pop hl
048C7D F1          0006*M1     pop af
048C7E 08          0007*M1     ex af,af'
048C7F D9          0008*M1     exx
048C80             0009*M1 
048C80 D1          0010*M1     pop de
048C81 C1          0011*M1     pop bc
048C82 E1          0012*M1     pop hl
048C83 F1          0013*M1     pop af
048C84 08          0014*M1     ex af,af'
048C85 D9          0015*M1     exx
048C86             0516*       PUSH_ALL
048C86 08          0001*M1     ex af,af'
048C87 D9          0002*M1     exx
048C88 F5          0003*M1     push af
048C89 E5          0004*M1     push hl
048C8A C5          0005*M1     push bc
048C8B D5          0006*M1     push de
048C8C             0007*M1 
048C8C 08          0008*M1     ex af,af'
048C8D D9          0009*M1     exx
048C8E F5          0010*M1     push af
048C8F E5          0011*M1     push hl
048C90 C5          0012*M1     push bc
048C91 D5          0013*M1     push de
048C92 DD E5       0014*M1     push ix
048C94 FD E5       0015*M1     push iy
048C96 CD 99 8B 04 0517*       call dumpFlags
048C9A             0518*       POP_ALL
048C9A FD E1       0001*M1     pop iy
048C9C DD E1       0002*M1     pop ix
048C9E D1          0003*M1     pop de
048C9F C1          0004*M1     pop bc
048CA0 E1          0005*M1     pop hl
048CA1 F1          0006*M1     pop af
048CA2 08          0007*M1     ex af,af'
048CA3 D9          0008*M1     exx
048CA4             0009*M1 
048CA4 D1          0010*M1     pop de
048CA5 C1          0011*M1     pop bc
048CA6 E1          0012*M1     pop hl
048CA7 F1          0013*M1     pop af
048CA8 08          0014*M1     ex af,af'
048CA9 D9          0015*M1     exx
048CAA             0519*       PUSH_ALL
048CAA 08          0001*M1     ex af,af'
048CAB D9          0002*M1     exx
048CAC F5          0003*M1     push af
048CAD E5          0004*M1     push hl
048CAE C5          0005*M1     push bc
048CAF D5          0006*M1     push de
048CB0             0007*M1 
048CB0 08          0008*M1     ex af,af'
048CB1 D9          0009*M1     exx
048CB2 F5          0010*M1     push af
048CB3 E5          0011*M1     push hl
048CB4 C5          0012*M1     push bc
048CB5 D5          0013*M1     push de
048CB6 DD E5       0014*M1     push ix
048CB8 FD E5       0015*M1     push iy
048CBA CD 85 8A 04 0520*       call dumpRegistersHex
048CBE             0521*       ; call waitKeypress
048CBE             0522*       POP_ALL
048CBE FD E1       0001*M1     pop iy
048CC0 DD E1       0002*M1     pop ix
048CC2 D1          0003*M1     pop de
048CC3 C1          0004*M1     pop bc
048CC4 E1          0005*M1     pop hl
048CC5 F1          0006*M1     pop af
048CC6 08          0007*M1     ex af,af'
048CC7 D9          0008*M1     exx
048CC8             0009*M1 
048CC8 D1          0010*M1     pop de
048CC9 C1          0011*M1     pop bc
048CCA E1          0012*M1     pop hl
048CCB F1          0013*M1     pop af
048CCC 08          0014*M1     ex af,af'
048CCD D9          0015*M1     exx
048CCE C9          0523*       ret
048CCF             0524*   
048CCF             0525*   DEBUG_PRINT_TILE_TABLE:
048CCF             0526*       PUSH_ALL
048CCF 08          0001*M1     ex af,af'
048CD0 D9          0002*M1     exx
048CD1 F5          0003*M1     push af
048CD2 E5          0004*M1     push hl
048CD3 C5          0005*M1     push bc
048CD4 D5          0006*M1     push de
048CD5             0007*M1 
048CD5 08          0008*M1     ex af,af'
048CD6 D9          0009*M1     exx
048CD7 F5          0010*M1     push af
048CD8 E5          0011*M1     push hl
048CD9 C5          0012*M1     push bc
048CDA D5          0013*M1     push de
048CDB DD E5       0014*M1     push ix
048CDD FD E5       0015*M1     push iy
048CDF CD 78 00 04 0527*       call printNewLine
048CE3 DD 21 EE 7F 0528*       ld ix,tile_stack
       04          
048CE8 DD 37 00    0529*       ld ix,(ix)
048CEB CD 84 91 04 0530*       call dump_tile_record
048CEF CD 78 00 04 0531*       call printNewLine
048CF3             0532*       POP_ALL
048CF3 FD E1       0001*M1     pop iy
048CF5 DD E1       0002*M1     pop ix
048CF7 D1          0003*M1     pop de
048CF8 C1          0004*M1     pop bc
048CF9 E1          0005*M1     pop hl
048CFA F1          0006*M1     pop af
048CFB 08          0007*M1     ex af,af'
048CFC D9          0008*M1     exx
048CFD             0009*M1 
048CFD D1          0010*M1     pop de
048CFE C1          0011*M1     pop bc
048CFF E1          0012*M1     pop hl
048D00 F1          0013*M1     pop af
048D01 08          0014*M1     ex af,af'
048D02 D9          0015*M1     exx
048D03 C9          0533*       ret
048D04             0534*   ; end DEBUG_PRINT_TILE_TABLE
048D04             0535*   
048D04             0536*   DEBUG_PRINT_TABLE:
048D04             0537*       PUSH_ALL
048D04 08          0001*M1     ex af,af'
048D05 D9          0002*M1     exx
048D06 F5          0003*M1     push af
048D07 E5          0004*M1     push hl
048D08 C5          0005*M1     push bc
048D09 D5          0006*M1     push de
048D0A             0007*M1 
048D0A 08          0008*M1     ex af,af'
048D0B D9          0009*M1     exx
048D0C F5          0010*M1     push af
048D0D E5          0011*M1     push hl
048D0E C5          0012*M1     push bc
048D0F D5          0013*M1     push de
048D10 DD E5       0014*M1     push ix
048D12 FD E5       0015*M1     push iy
048D14 CD 78 00 04 0538*       call printNewLine
048D18 CD BC 8F 04 0539*       call dump_sprite_record
048D1C CD 78 00 04 0540*       call printNewLine
048D20 CD 78 00 04 0541*       call printNewLine
048D24             0542*   
048D24 FD E5       0543*       push iy
048D26 DD E1       0544*       pop ix
048D28 CD BC 8F 04 0545*       call dump_sprite_record
048D2C CD 78 00 04 0546*       call printNewLine
048D30 CD 78 00 04 0547*       call printNewLine
048D34             0548*       POP_ALL
048D34 FD E1       0001*M1     pop iy
048D36 DD E1       0002*M1     pop ix
048D38 D1          0003*M1     pop de
048D39 C1          0004*M1     pop bc
048D3A E1          0005*M1     pop hl
048D3B F1          0006*M1     pop af
048D3C 08          0007*M1     ex af,af'
048D3D D9          0008*M1     exx
048D3E             0009*M1 
048D3E D1          0010*M1     pop de
048D3F C1          0011*M1     pop bc
048D40 E1          0012*M1     pop hl
048D41 F1          0013*M1     pop af
048D42 08          0014*M1     ex af,af'
048D43 D9          0015*M1     exx
048D44 C9          0549*       RET
048D45             0550*   
048D45             0551*   DEBUG_WAITKEYPRESS:
048D45             0552*       PUSH_ALL
048D45 08          0001*M1     ex af,af'
048D46 D9          0002*M1     exx
048D47 F5          0003*M1     push af
048D48 E5          0004*M1     push hl
048D49 C5          0005*M1     push bc
048D4A D5          0006*M1     push de
048D4B             0007*M1 
048D4B 08          0008*M1     ex af,af'
048D4C D9          0009*M1     exx
048D4D F5          0010*M1     push af
048D4E E5          0011*M1     push hl
048D4F C5          0012*M1     push bc
048D50 D5          0013*M1     push de
048D51 DD E5       0014*M1     push ix
048D53 FD E5       0015*M1     push iy
048D55 CD 3D 03 04 0553*       call waitKeypress
048D59             0554*       POP_ALL
048D59 FD E1       0001*M1     pop iy
048D5B DD E1       0002*M1     pop ix
048D5D D1          0003*M1     pop de
048D5E C1          0004*M1     pop bc
048D5F E1          0005*M1     pop hl
048D60 F1          0006*M1     pop af
048D61 08          0007*M1     ex af,af'
048D62 D9          0008*M1     exx
048D63             0009*M1 
048D63 D1          0010*M1     pop de
048D64 C1          0011*M1     pop bc
048D65 E1          0012*M1     pop hl
048D66 F1          0013*M1     pop af
048D67 08          0014*M1     ex af,af'
048D68 D9          0015*M1     exx
048D69 C9          0555*       RET
048D6A             0556*   
048D6A             0557*   DEBUG_PRINT_FIELDS:
048D6A             0558*       ; PUSH_ALL
048D6A 01 00 00 00 0559*       ld bc,0
048D6E 4F          0560*       ld c,a
048D6F DD 21 30 94 0561*       ld ix,table_base
       04          
048D74 DD 09       0562*       add ix,bc
048D76 06 14       0563*       ld b,table_num_records
048D78             0564*   @@:
048D78 DD E5       0565*       push ix
048D7A E1          0566*       pop hl
048D7B C5          0567*       push bc ; save loop counter
048D7C 3E 01       0568*       ld a,1 ; print one byte
048D7E CD EA 8B 04 0569*       call dumpMemoryHex
048D82 ED 32 40    0570*       lea ix,ix+table_record_size
048D85 C1          0571*       pop bc ; restore loop counter
048D86 10 F0       0572*       djnz @b
048D88             0573*       ; POP_ALL
048D88 C9          0574*       ret
048D89             0575*   
048D89             0576*   DEBUG_PRINT_TILE_STACK:
048D89             0577*       PUSH_ALL
048D89 08          0001*M1     ex af,af'
048D8A D9          0002*M1     exx
048D8B F5          0003*M1     push af
048D8C E5          0004*M1     push hl
048D8D C5          0005*M1     push bc
048D8E D5          0006*M1     push de
048D8F             0007*M1 
048D8F 08          0008*M1     ex af,af'
048D90 D9          0009*M1     exx
048D91 F5          0010*M1     push af
048D92 E5          0011*M1     push hl
048D93 C5          0012*M1     push bc
048D94 D5          0013*M1     push de
048D95 DD E5       0014*M1     push ix
048D97 FD E5       0015*M1     push iy
048D99 01 00 00 00 0578*       ld bc,0
048D9D 11 00 00 00 0579*       ld de,0
048DA1 CD 0C 13 04 0580*       call vdu_set_gfx_origin
048DA5 01 00 00 00 0581*       ld bc,0
048DA9 11 00 00 00 0582*       ld de,0
048DAD DD 21 7F 00 0583*       ld ix,127
       00          
048DB2 FD 21 F0 00 0584*       ld iy,240
       00          
048DB7 CD 27 13 04 0585*       call vdu_set_gfx_viewport
048DBB CD 9A 12 04 0586*       call vdu_clg
048DBF CD 3C 12 04 0587*       call vdu_home_cursor
048DC3 CD 78 00 04 0588*       call printNewLine
048DC7 CD 78 00 04 0589*       call printNewLine
048DCB 2A F1 82 04 0590*       ld hl,(tile_stack_pointer)
048DCF CD 25 89 04 0591*       call printHexUHL
048DD3 CD 78 00 04 0592*       call printNewLine
048DD7 3A F7 82 04 0593*       ld a,(num_active_tiles)
048DDB CD 0B 89 04 0594*       call printHexA
048DDF CD 78 00 04 0595*       call printNewLine
048DE3 A7          0596*       and a
048DE4 CA 12 8E 04 0597*       jp z,@done
048DE8 DD 21 EE 7F 0598*       ld ix,tile_stack
       04          
048DED 3A F7 82 04 0599*       ld a,(num_active_tiles)
048DF1 47          0600*       ld b,a
048DF2             0601*   @loop:
048DF2 C5          0602*       push bc
048DF3 DD E5       0603*       push ix
048DF5 DD 37 00    0604*       ld ix,(ix)
048DF8 DD 7E 00    0605*       ld a,(ix+tile_id)
048DFB CD 0B 89 04 0606*       call printHexA
048DFF DD 7E 16    0607*       ld a,(ix+tile_type)
048E02 CD 0B 89 04 0608*       call printHexA
048E06 CD 78 00 04 0609*       call printNewLine
048E0A DD E1       0610*       pop ix
048E0C ED 32 03    0611*       lea ix,ix+3
048E0F C1          0612*       pop bc
048E10 10 E0       0613*       djnz @loop
048E12             0614*   @done:
048E12             0615*       POP_ALL
048E12 FD E1       0001*M1     pop iy
048E14 DD E1       0002*M1     pop ix
048E16 D1          0003*M1     pop de
048E17 C1          0004*M1     pop bc
048E18 E1          0005*M1     pop hl
048E19 F1          0006*M1     pop af
048E1A 08          0007*M1     ex af,af'
048E1B D9          0008*M1     exx
048E1C             0009*M1 
048E1C D1          0010*M1     pop de
048E1D C1          0011*M1     pop bc
048E1E E1          0012*M1     pop hl
048E1F F1          0013*M1     pop af
048E20 08          0014*M1     ex af,af'
048E21 D9          0015*M1     exx
048E22 C9          0616*       ret
048E23             0617*   
048E23             0618*   DEBUG_DUMP_PLAYER_RECORD:
048E23             0619*       PUSH_ALL
048E23 08          0001*M1     ex af,af'
048E24 D9          0002*M1     exx
048E25 F5          0003*M1     push af
048E26 E5          0004*M1     push hl
048E27 C5          0005*M1     push bc
048E28 D5          0006*M1     push de
048E29             0007*M1 
048E29 08          0008*M1     ex af,af'
048E2A D9          0009*M1     exx
048E2B F5          0010*M1     push af
048E2C E5          0011*M1     push hl
048E2D C5          0012*M1     push bc
048E2E D5          0013*M1     push de
048E2F DD E5       0014*M1     push ix
048E31 FD E5       0015*M1     push iy
048E33 CD 78 00 04 0620*       call printNewLine
048E37 CD F1 92 04 0621*       CALL dump_player_record
048E3B CD 78 00 04 0622*       call printNewLine
048E3F             0623*       POP_ALL
048E3F FD E1       0001*M1     pop iy
048E41 DD E1       0002*M1     pop ix
048E43 D1          0003*M1     pop de
048E44 C1          0004*M1     pop bc
048E45 E1          0005*M1     pop hl
048E46 F1          0006*M1     pop af
048E47 08          0007*M1     ex af,af'
048E48 D9          0008*M1     exx
048E49             0009*M1 
048E49 D1          0010*M1     pop de
048E4A C1          0011*M1     pop bc
048E4B E1          0012*M1     pop hl
048E4C F1          0013*M1     pop af
048E4D 08          0014*M1     ex af,af'
048E4E D9          0015*M1     exx
048E4F C9          0624*       RET
048E50             0625*   
048E50             0626*   DEBUG_PRINT_SHIELDS:
048E50             0627*       PUSH_ALL
048E50 08          0001*M1     ex af,af'
048E51 D9          0002*M1     exx
048E52 F5          0003*M1     push af
048E53 E5          0004*M1     push hl
048E54 C5          0005*M1     push bc
048E55 D5          0006*M1     push de
048E56             0007*M1 
048E56 08          0008*M1     ex af,af'
048E57 D9          0009*M1     exx
048E58 F5          0010*M1     push af
048E59 E5          0011*M1     push hl
048E5A C5          0012*M1     push bc
048E5B D5          0013*M1     push de
048E5C DD E5       0014*M1     push ix
048E5E FD E5       0015*M1     push iy
048E60 0E 00       0628*       ld c,0 ; X
048E62 06 00       0629*       ld b,0 ; Y
048E64 CD 73 12 04 0630*       call vdu_move_cursor
048E68             0631*   
048E68 CD 99 8B 04 0632*       call dumpFlags
048E6C CD 85 8A 04 0633*       call dumpRegistersHex
048E70             0634*   
048E70 DD 21 4E 79 0635*       ld ix,bar_shields
       04          
048E75             0636*   
048E75 CD 5C 00 04 0637*       call printInline
048E79 76 61 6C 3A 0638*       asciz "val:"
       00          
048E7E DD 27 00    0639*       ld hl,(ix+bar_val)
048E81 CD AF 00 04 0640*       call printDec
048E85 CD 78 00 04 0641*       call printNewLine
048E89             0642*   
048E89 CD 5C 00 04 0643*       call printInline
048E8D 78 30 20 3A 0644*       asciz "x0 :"
       00          
048E92 DD 27 03    0645*       ld hl,(ix+bar_x0)
048E95 CD AF 00 04 0646*       call printDec
048E99 CD 78 00 04 0647*       call printNewLine
048E9D             0648*   
048E9D CD 5C 00 04 0649*       call printInline
048EA1 79 30 20 3A 0650*       asciz "y0 :"
       00          
048EA6 DD 27 06    0651*       ld hl,(ix+bar_y0)
048EA9 CD AF 00 04 0652*       call printDec
048EAD CD 78 00 04 0653*       call printNewLine
048EB1             0654*   
048EB1 CD 5C 00 04 0655*       call printInline
048EB5 78 31 20 3A 0656*       asciz "x1 :"
       00          
048EBA DD 27 09    0657*       ld hl,(ix+bar_x1)
048EBD CD AF 00 04 0658*       call printDec
048EC1 CD 78 00 04 0659*       call printNewLine
048EC5             0660*   
048EC5 CD 5C 00 04 0661*       call printInline
048EC9 79 31 20 3A 0662*       asciz "y1 :"
       00          
048ECE DD 27 0C    0663*       ld hl,(ix+bar_y1)
048ED1 CD AF 00 04 0664*       call printDec
048ED5 CD 78 00 04 0665*       call printNewLine
048ED9             0666*   
048ED9 CD 5C 00 04 0667*       call printInline
048EDD 79 20 20 3A 0668*       asciz "y  :"
       00          
048EE2 DD 27 0F    0669*       ld hl,(ix+bar_y)
048EE5 CD AF 00 04 0670*       call printDec
048EE9 CD 78 00 04 0671*       call printNewLine
048EED             0672*   
048EED             0673*       POP_ALL
048EED FD E1       0001*M1     pop iy
048EEF DD E1       0002*M1     pop ix
048EF1 D1          0003*M1     pop de
048EF2 C1          0004*M1     pop bc
048EF3 E1          0005*M1     pop hl
048EF4 F1          0006*M1     pop af
048EF5 08          0007*M1     ex af,af'
048EF6 D9          0008*M1     exx
048EF7             0009*M1 
048EF7 D1          0010*M1     pop de
048EF8 C1          0011*M1     pop bc
048EF9 E1          0012*M1     pop hl
048EFA F1          0013*M1     pop af
048EFB 08          0014*M1     ex af,af'
048EFC D9          0015*M1     exx
048EFD             0674*       ; call waitKeypress
048EFD C9          0675*       ret
048EFE             0676*   ; end DEBUG_PRINT_SHIELDS
048EFE             0677*   
048EFE             0678*   DEBUG_PRINT_BAR_UPDATE:
048EFE 0E 00       0679*       ld c,0 ; X
048F00 06 00       0680*       ld b,0 ; Y
048F02 CD 73 12 04 0681*       call vdu_move_cursor
048F06             0682*   
048F06 CD 5C 00 04 0683*       call printInline
048F0A 78 30 20 20 0684*       asciz "x0  :"
       3A 00       
048F10 21 00 00 00 0685*       ld hl,0 ; clear hlu
048F14 DD 6E 01    0686*       ld l,(ix+@x0-@cmd0+0)
048F17 DD 66 02    0687*       ld h,(ix+@x0-@cmd0+1)
048F1A CD AF 00 04 0688*       call printDec
048F1E CD 78 00 04 0689*       call printNewLine
048F22             0690*   
048F22 CD 5C 00 04 0691*       call printInline
048F26 79 30 20 20 0692*       asciz "y0  :"
       3A 00       
048F2C 21 00 00 00 0693*       ld hl,0 ; clear hlu
048F30 DD 6E 07    0694*       ld l,(ix+@y0-@cmd0+0)
048F33 DD 66 08    0695*       ld h,(ix+@y0-@cmd0+1)
048F36 CD AF 00 04 0696*       call printDec
048F3A CD 78 00 04 0697*       call printNewLine
048F3E             0698*   
048F3E CD 5C 00 04 0699*       call printInline
048F42 78 31 20 20 0700*       asciz "x1  :"
       3A 00       
048F48 21 00 00 00 0701*       ld hl,0 ; clear hlu
048F4C DD 6E 05    0702*       ld l,(ix+@x1-@cmd0+0)
048F4F DD 66 06    0703*       ld h,(ix+@x1-@cmd0+1)
048F52 CD AF 00 04 0704*       call printDec
048F56 CD 78 00 04 0705*       call printNewLine
048F5A             0706*   
048F5A CD 5C 00 04 0707*       call printInline
048F5E 79 31 20 20 0708*       asciz "y1  :"
       3A 00       
048F64 21 00 00 00 0709*       ld hl,0 ; clear hlu
048F68 DD 6E 03    0710*       ld l,(ix+@y1-@cmd0+0)
048F6B DD 66 04    0711*       ld h,(ix+@y1-@cmd0+1)
048F6E CD AF 00 04 0712*       call printDec
048F72 CD 78 00 04 0713*       call printNewLine
048F76             0714*   
048F76 CD 5C 00 04 0715*       call printInline
048F7A 78 32 20 20 0716*       asciz "x2  :"
       3A 00       
048F80 21 00 00 00 0717*       ld hl,0 ; clear hlu
048F84 DD 6E 0B    0718*       ld l,(ix+@x2-@cmd0+0)
048F87 DD 66 0C    0719*       ld h,(ix+@x2-@cmd0+1)
048F8A CD AF 00 04 0720*       call printDec
048F8E CD 78 00 04 0721*       call printNewLine
048F92             0722*   
048F92 CD 5C 00 04 0723*       call printInline
048F96 58 32 20 79 0724*       asciz "X2 y2:"
       32 3A 00    
048F9D 21 00 00 00 0725*       ld hl,0 ; clear hlu
048FA1 DD 6E 0D    0726*       ld l,(ix+@y2-@cmd0+0)
048FA4 DD 66 0E    0727*       ld h,(ix+@y2-@cmd0+1)
048FA7 CD AF 00 04 0728*       call printDec
048FAB C9          0729*       ret
048FAC 18          0730*   @cmd0:   db 24
048FAD 00 00       0731*   @x0: 	dw 0x0000
048FAF 00 00       0732*   @y1: 	dw 0x0000
048FB1 00 00       0733*   @x1: 	dw 0x0000
048FB3 00 00       0734*   @y0: 	dw 0x0000
048FB5             0735*   ; plot bitmap command
048FB5 19          0736*   @cmd1:   db 25 ; stomped on by @y0 load
048FB6 ED          0737*   @mode:  db plot_bmp+dr_abs_fg ; 0xED stomped on by @x2 load
048FB7 00 00       0738*   @x2: 	dw 0x0000
048FB9 00 00       0739*   @y2: 	dw 0x0000
048FBB 00          0740*   @end:  db 0x00 ; padding
048FBC             0741*   ; end DEBUG_PRINT_BAR_UPDATE
048FBC             0742*   
048FBC             0743*   
048FBC             0744*   dump_sprite_record:
048FBC             0745*       ; call vdu_home_cursor
048FBC CD 5C 00 04 0746*       call printInline
048FC0 69 64 20 20 0747*       asciz "id  : "
       3A 20 00    
048FC7 DD 7E 00    0748*       ld a,(ix+sprite_id)
048FCA CD 0B 89 04 0749*       call printHexA
048FCE             0750*   
048FCE CD 5C 00 04 0751*       call printInline
048FD2 0D 0A 78 20 0752*       asciz "\r\nx   :"
       20 20 3A 00 
048FDA DD 27 01    0753*       ld hl,(ix+sprite_x)
048FDD CD D4 01 04 0754*       call print_s168_hl
048FE1             0755*   
048FE1 CD 5C 00 04 0756*       call printInline
048FE5 0D 0A 79 20 0757*       asciz "\r\ny   :"
       20 20 3A 00 
048FED DD 27 04    0758*       ld hl,(ix+sprite_y)
048FF0 CD D4 01 04 0759*       call print_s168_hl
048FF4             0760*   
048FF4 CD 5C 00 04 0761*       call printInline
048FF8 0D 0A 78 76 0762*       asciz "\r\nxv  :"
       20 20 3A 00 
049000 DD 27 07    0763*       ld hl,(ix+sprite_xvel)
049003 CD D4 01 04 0764*       call print_s168_hl
049007             0765*   
049007 CD 5C 00 04 0766*       call printInline
04900B 0D 0A 79 76 0767*       asciz "\r\nyv  :"
       20 20 3A 00 
049013 DD 27 0A    0768*       ld hl,(ix+sprite_yvel)
049016 CD D4 01 04 0769*       call print_s168_hl
04901A             0770*   
04901A CD 5C 00 04 0771*       call printInline
04901E 0D 0A 76 20 0772*       asciz "\r\nv   :"
       20 20 3A 00 
049026 DD 27 0D    0773*       ld hl,(ix+sprite_vel)
049029 CD D4 01 04 0774*       call print_s168_hl
04902D             0775*   
04902D CD 5C 00 04 0776*       call printInline
049031 0D 0A 68 64 0777*       asciz "\r\nhdg :"
       67 20 3A 00 
049039 DD 27 10    0778*       ld hl,(ix+sprite_heading)
04903C CD D4 01 04 0779*       call print_s168_hl
049040             0780*   
049040 CD 5C 00 04 0781*       call printInline
049044 0D 0A 6F 72 0782*       asciz "\r\nori :"
       69 20 3A 00 
04904C DD 27 13    0783*       ld hl,(ix+sprite_orientation)
04904F CD D4 01 04 0784*       call print_s168_hl
049053             0785*   
049053 CD 5C 00 04 0786*       call printInline
049057 0D 0A 74 79 0787*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
049060 DD 7E 16    0788*       ld a,(ix+sprite_type)
049063 CD 0B 89 04 0789*       call printHexA
049067             0790*   
049067 CD 5C 00 04 0791*       call printInline
04906B 0D 0A 42 49 0792*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
049074 DD 27 17    0793*       ld hl,(ix+sprite_base_bufferId)
049077 CD 83 00 04 0794*       call printHex24
04907B             0795*   
04907B CD 5C 00 04 0796*       call printInline
04907F 0D 0A 6D 50 0797*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
049088 DD 27 1A    0798*       ld hl,(ix+sprite_move_program)
04908B CD 83 00 04 0799*       call printHex24
04908F             0800*   
04908F CD 5C 00 04 0801*       call printInline
049093 0D 0A 63 6F 0802*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
04909C DD 7E 1D    0803*       ld a,(ix+sprite_collisions)
04909F CD 51 02 04 0804*       call printBin8
0490A3             0805*   
0490A3 CD 5C 00 04 0806*       call printInline
0490A7 0D 0A 73 7A 0807*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
0490B0 DD 7E 1E    0808*       ld a,(ix+sprite_dim_x)
0490B3 CD 0B 89 04 0809*       call printHexA
0490B7             0810*   
0490B7 CD 5C 00 04 0811*       call printInline
0490BB 0D 0A 73 7A 0812*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
0490C4 DD 7E 1F    0813*       ld a,(ix+sprite_dim_y)
0490C7 CD 0B 89 04 0814*       call printHexA
0490CB             0815*   
0490CB CD 5C 00 04 0816*       call printInline
0490CF 0D 0A 23 6F 0817*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
0490D8 DD 7E 20    0818*       ld a,(ix+sprite_num_orientations)
0490DB CD 0B 89 04 0819*       call printHexA
0490DF             0820*   
0490DF CD 5C 00 04 0821*       call printInline
0490E3 0D 0A 23 61 0822*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
0490EC DD 7E 21    0823*       ld a,(ix+sprite_num_animations)
0490EF CD 0B 89 04 0824*       call printHexA
0490F3             0825*   
0490F3 CD 5C 00 04 0826*       call printInline
0490F7 0D 0A 61 6E 0827*       asciz "\r\nani : "
       69 20 3A 20 
       00          
049100 DD 7E 22    0828*       ld a,(ix+sprite_animation)
049103 CD 0B 89 04 0829*       call printHexA
049107             0830*   
049107 CD 5C 00 04 0831*       call printInline
04910B 0D 0A 61 6E 0832*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
049114 DD 7E 23    0833*       ld a,(ix+sprite_animation_timer)
049117 CD 0B 89 04 0834*       call printHexA
04911B             0835*   
04911B CD 5C 00 04 0836*       call printInline
04911F 0D 0A 6D 76 0837*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
049128 DD 7E 24    0838*       ld a,(ix+sprite_move_timer)
04912B CD 0B 89 04 0839*       call printHexA
04912F             0840*   
04912F CD 5C 00 04 0841*       call printInline
049133 0D 0A 6D 76 0842*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
04913C DD 7E 25    0843*       ld a,(ix+sprite_move_step)
04913F CD 0B 89 04 0844*       call printHexA
049143             0845*   
049143 CD 5C 00 04 0846*       call printInline
049147 0D 0A 70 74 0847*       asciz "\r\npts : "
       73 20 3A 20 
       00          
049150 DD 7E 26    0848*       ld a,(ix+sprite_points)
049153 CD 0B 89 04 0849*       call printHexA
049157             0850*   
049157 CD 5C 00 04 0851*       call printInline
04915B 0D 0A 64 6D 0852*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
049164 DD 7E 27    0853*       ld a,(ix+sprite_shield_damage)
049167 CD 0B 89 04 0854*       call printHexA
04916B             0855*   
04916B CD 5C 00 04 0856*       call printInline
04916F 0D 0A 66 72 0857*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
049178 DD 7E 28    0858*       ld a,(ix+sprite_frame)
04917B CD 0B 89 04 0859*       call printHexA
04917F             0860*   
04917F CD 78 00 04 0861*       call printNewLine
049183             0862*   
049183             0863*       ; call waitKeypress
049183 C9          0864*       ret
049184             0865*   
049184             0866*   dump_tile_record:
049184 CD 5C 00 04 0867*       call printInline
049188 69 64 20 20 0868*       asciz "id  : "
       3A 20 00    
04918F DD 7E 00    0869*       ld a,(ix+tile_id)
049192 CD 0B 89 04 0870*       call printHexA
049196             0871*   
049196 CD 5C 00 04 0872*       call printInline
04919A 0D 0A 78 20 0873*       asciz "\r\nx   :"
       20 20 3A 00 
0491A2 DD 27 01    0874*       ld hl,(ix+tile_x)
0491A5 CD D4 01 04 0875*       call print_s168_hl
0491A9             0876*   
0491A9 CD 5C 00 04 0877*       call printInline
0491AD 0D 0A 79 20 0878*       asciz "\r\ny   :"
       20 20 3A 00 
0491B5 DD 27 04    0879*       ld hl,(ix+tile_y)
0491B8 CD D4 01 04 0880*       call print_s168_hl
0491BC             0881*   
0491BC             0882*       ; call printInline
0491BC             0883*       ; asciz "\r\nxv  :"
0491BC             0884*       ; ld hl,(ix+tile_xvel)
0491BC             0885*       ; call print_s168_hl
0491BC             0886*   
0491BC             0887*       ; call printInline
0491BC             0888*       ; asciz "\r\nyv  :"
0491BC             0889*       ; ld hl,(ix+tile_yvel)
0491BC             0890*       ; call print_s168_hl
0491BC             0891*   
0491BC             0892*       ; call printInline
0491BC             0893*       ; asciz "\r\nv   :"
0491BC             0894*       ; ld hl,(ix+tile_vel)
0491BC             0895*       ; call print_s168_hl
0491BC             0896*   
0491BC             0897*       ; call printInline
0491BC             0898*       ; asciz "\r\nhdg :"
0491BC             0899*       ; ld hl,(ix+tile_heading)
0491BC             0900*       ; call print_s168_hl
0491BC             0901*   
0491BC             0902*       ; call printInline
0491BC             0903*       ; asciz "\r\nori :"
0491BC             0904*       ; ld hl,(ix+tile_orientation)
0491BC             0905*       ; call print_s168_hl
0491BC             0906*   
0491BC CD 5C 00 04 0907*       call printInline
0491C0 0D 0A 74 79 0908*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
0491C9 DD 7E 16    0909*       ld a,(ix+tile_type)
0491CC CD 0B 89 04 0910*       call printHexA
0491D0             0911*   
0491D0 CD 5C 00 04 0912*       call printInline
0491D4 0D 0A 42 49 0913*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
0491DD DD 27 17    0914*       ld hl,(ix+tile_base_bufferId)
0491E0 CD 83 00 04 0915*       call printHex24
0491E4             0916*   
0491E4 CD 5C 00 04 0917*       call printInline
0491E8 0D 0A 6D 50 0918*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
0491F1 DD 27 1A    0919*       ld hl,(ix+tile_move_program)
0491F4 CD 83 00 04 0920*       call printHex24
0491F8             0921*   
0491F8 CD 5C 00 04 0922*       call printInline
0491FC 0D 0A 63 6F 0923*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
049205 DD 7E 1D    0924*       ld a,(ix+tile_collisions)
049208 CD 51 02 04 0925*       call printBin8
04920C             0926*   
04920C CD 5C 00 04 0927*       call printInline
049210 0D 0A 73 7A 0928*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
049219 DD 7E 1E    0929*       ld a,(ix+tile_dim_x)
04921C CD 0B 89 04 0930*       call printHexA
049220             0931*   
049220 CD 5C 00 04 0932*       call printInline
049224 0D 0A 73 7A 0933*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
04922D DD 7E 1F    0934*       ld a,(ix+tile_dim_y)
049230 CD 0B 89 04 0935*       call printHexA
049234             0936*   
049234 CD 5C 00 04 0937*       call printInline
049238 0D 0A 23 6F 0938*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
049241 DD 7E 20    0939*       ld a,(ix+tile_num_orientations)
049244 CD 0B 89 04 0940*       call printHexA
049248             0941*   
049248 CD 5C 00 04 0942*       call printInline
04924C 0D 0A 23 61 0943*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
049255 DD 7E 21    0944*       ld a,(ix+tile_num_animations)
049258 CD 0B 89 04 0945*       call printHexA
04925C             0946*   
04925C CD 5C 00 04 0947*       call printInline
049260 0D 0A 61 6E 0948*       asciz "\r\nani : "
       69 20 3A 20 
       00          
049269 DD 7E 22    0949*       ld a,(ix+tile_animation)
04926C CD 0B 89 04 0950*       call printHexA
049270             0951*   
049270 CD 5C 00 04 0952*       call printInline
049274 0D 0A 61 6E 0953*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
04927D DD 7E 23    0954*       ld a,(ix+tile_animation_timer)
049280 CD 0B 89 04 0955*       call printHexA
049284             0956*   
049284 CD 5C 00 04 0957*       call printInline
049288 0D 0A 6D 76 0958*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
049291 DD 7E 24    0959*       ld a,(ix+tile_move_timer)
049294 CD 0B 89 04 0960*       call printHexA
049298             0961*   
049298 CD 5C 00 04 0962*       call printInline
04929C 0D 0A 6D 76 0963*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
0492A5 DD 7E 25    0964*       ld a,(ix+tile_move_step)
0492A8 CD 0B 89 04 0965*       call printHexA
0492AC             0966*   
0492AC CD 5C 00 04 0967*       call printInline
0492B0 0D 0A 70 74 0968*       asciz "\r\npts : "
       73 20 3A 20 
       00          
0492B9 DD 7E 26    0969*       ld a,(ix+tile_points)
0492BC CD 0B 89 04 0970*       call printHexA
0492C0             0971*   
0492C0 CD 5C 00 04 0972*       call printInline
0492C4 0D 0A 64 6D 0973*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
0492CD DD 7E 27    0974*       ld a,(ix+tile_shield_damage)
0492D0 CD 0B 89 04 0975*       call printHexA
0492D4             0976*   
0492D4 CD 5C 00 04 0977*       call printInline
0492D8 0D 0A 66 72 0978*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
0492E1 DD 7E 28    0979*       ld a,(ix+tile_frame)
0492E4 CD 0B 89 04 0980*       call printHexA
0492E8             0981*   
0492E8 CD 78 00 04 0982*       call printNewLine
0492EC CD 78 00 04 0983*       call printNewLine
0492F0             0984*   
0492F0             0985*       ; call waitKeypress
0492F0 C9          0986*       ret
0492F1             0987*   
0492F1             0988*   dump_player_record:
0492F1 DD 21 30 95 0989*       ld ix,player_begin
       04          
0492F6             0990*   
0492F6 CD 5C 00 04 0991*       call printInline
0492FA 69 64 20 20 0992*       asciz "id  : "
       3A 20 00    
049301 DD 7E 00    0993*       ld a,(ix+sprite_id)
049304 CD 0B 89 04 0994*       call printHexA
049308             0995*   
049308 CD 5C 00 04 0996*       call printInline
04930C 0D 0A 78 20 0997*       asciz "\r\nx   :"
       20 20 3A 00 
049314 DD 27 01    0998*       ld hl,(ix+sprite_x)
049317 CD D4 01 04 0999*       call print_s168_hl
04931B             1000*   
04931B CD 5C 00 04 1001*       call printInline
04931F 0D 0A 79 20 1002*       asciz "\r\ny   :"
       20 20 3A 00 
049327 DD 27 04    1003*       ld hl,(ix+sprite_y)
04932A CD D4 01 04 1004*       call print_s168_hl
04932E             1005*   
04932E CD 5C 00 04 1006*       call printInline
049332 0D 0A 78 76 1007*       asciz "\r\nxv  :"
       20 20 3A 00 
04933A DD 27 07    1008*       ld hl,(ix+sprite_xvel)
04933D CD D4 01 04 1009*       call print_s168_hl
049341             1010*   
049341 CD 5C 00 04 1011*       call printInline
049345 0D 0A 79 76 1012*       asciz "\r\nyv  :"
       20 20 3A 00 
04934D DD 27 0A    1013*       ld hl,(ix+sprite_yvel)
049350 CD D4 01 04 1014*       call print_s168_hl
049354             1015*   
049354 CD 5C 00 04 1016*       call printInline
049358 0D 0A 76 20 1017*       asciz "\r\nv   :"
       20 20 3A 00 
049360 DD 27 0D    1018*       ld hl,(ix+sprite_vel)
049363 CD D4 01 04 1019*       call print_s168_hl
049367             1020*   
049367 CD 5C 00 04 1021*       call printInline
04936B 0D 0A 68 64 1022*       asciz "\r\nhdg :"
       67 20 3A 00 
049373 DD 27 10    1023*       ld hl,(ix+sprite_heading)
049376 CD D4 01 04 1024*       call print_s168_hl
04937A             1025*   
04937A CD 5C 00 04 1026*       call printInline
04937E 0D 0A 6F 72 1027*       asciz "\r\nori :"
       69 20 3A 00 
049386 DD 27 13    1028*       ld hl,(ix+sprite_orientation)
049389 CD D4 01 04 1029*       call print_s168_hl
04938D             1030*   
04938D CD 5C 00 04 1031*       call printInline
049391 0D 0A 74 79 1032*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
04939A DD 7E 16    1033*       ld a,(ix+sprite_type)
04939D CD 0B 89 04 1034*       call printHexA
0493A1             1035*   
0493A1 CD 5C 00 04 1036*       call printInline
0493A5 0D 0A 42 49 1037*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
0493AE DD 27 17    1038*       ld hl,(ix+sprite_base_bufferId)
0493B1 CD 83 00 04 1039*       call printHex24
0493B5             1040*   
0493B5 CD 5C 00 04 1041*       call printInline
0493B9 0D 0A 6D 50 1042*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
0493C2 DD 27 1A    1043*       ld hl,(ix+sprite_move_program)
0493C5 CD 83 00 04 1044*       call printHex24
0493C9             1045*   
0493C9 CD 5C 00 04 1046*       call printInline
0493CD 0D 0A 63 6F 1047*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
0493D6 DD 7E 1D    1048*       ld a,(ix+sprite_collisions)
0493D9 CD 51 02 04 1049*       call printBin8
0493DD             1050*   
0493DD             1051*       ; call printInline
0493DD             1052*       ; asciz "\r\nszx : "
0493DD             1053*       ; ld a,(ix+sprite_dim_x)
0493DD             1054*       ; call printHexA
0493DD             1055*   
0493DD             1056*       ; call printInline
0493DD             1057*       ; asciz "\r\nszy : "
0493DD             1058*       ; ld a,(ix+sprite_dim_y)
0493DD             1059*       ; call printHexA
0493DD             1060*   
0493DD             1061*       ; call printInline
0493DD             1062*       ; asciz "\r\n#ori: "
0493DD             1063*       ; ld a,(ix+sprite_num_orientations)
0493DD             1064*       ; call printHexA
0493DD             1065*   
0493DD             1066*       ; call printInline
0493DD             1067*       ; asciz "\r\n#ani: "
0493DD             1068*       ; ld a,(ix+sprite_num_animations)
0493DD             1069*       ; call printHexA
0493DD             1070*   
0493DD             1071*       ; call printInline
0493DD             1072*       ; asciz "\r\nani : "
0493DD             1073*       ; ld a,(ix+sprite_animation)
0493DD             1074*       ; call printHexA
0493DD             1075*   
0493DD             1076*       ; call printInline
0493DD             1077*       ; asciz "\r\nanit: "
0493DD             1078*       ; ld a,(ix+sprite_animation_timer)
0493DD             1079*       ; call printHexA
0493DD             1080*   
0493DD             1081*       ; call printInline
0493DD             1082*       ; asciz "\r\nmvt : "
0493DD             1083*       ; ld a,(ix+sprite_move_timer)
0493DD             1084*       ; call printHexA
0493DD             1085*   
0493DD             1086*       ; call printInline
0493DD             1087*       ; asciz "\r\nmvs : "
0493DD             1088*       ; ld a,(ix+sprite_move_step)
0493DD             1089*       ; call printHexA
0493DD             1090*   
0493DD             1091*       ; call printInline
0493DD             1092*       ; asciz "\r\npts : "
0493DD             1093*       ; ld a,(ix+sprite_points)
0493DD             1094*       ; call printHexA
0493DD             1095*   
0493DD             1096*       ; call printInline
0493DD             1097*       ; asciz "\r\ndmg : "
0493DD             1098*       ; ld a,(ix+sprite_shield_damage)
0493DD             1099*       ; call printHexA
0493DD             1100*   
0493DD             1101*       ; call printInline
0493DD             1102*       ; asciz "\r\nfrm : "
0493DD             1103*       ; ld a,(ix+sprite_frame)
0493DD             1104*       ; call printHexA
0493DD             1105*   
0493DD             1106*       ; call printNewLine
0493DD             1107*       ; call printNewLine
0493DD             1108*   
0493DD             1109*       ; call waitKeypress
0493DD C9          1110*       ret
0493DE             0080    
0493DE             0081    ; --- MAIN PROGRAM FILE ---
0493DE             0082    main:
0493DE             0083        ; jp main_end ; DEBUG
0493DE             0084    
0493DE             0085    ; start a new game
0493DE 21 17 7D 04 0086        ld hl,game_init
0493E2 22 48 7C 04 0087        ld (game_state),hl
0493E6             0088    main_loop:
0493E6             0089    ; update the global timestamp
0493E6 CD C3 11 04 0090        call timestamp_tick
0493EA             0091    ; do gamestate logic
0493EA CD 4B 7C 04 0092        call do_game
0493EE             0093    ; wait for the next vblank mitigate flicker and for loop timing
0493EE CD FB 12 04 0094        call vdu_vblank
0493F2             0095    ; poll keyboard for escape keypress
0493F2 3E 08       0096        ld a, $08 ; code to send to MOS
0493F4 5B CF       0097        rst.lil $08 ; get IX pointer to System Variables
0493F6 DD 7E 05    0098        ld a, (ix + $05) ; get ASCII code of key pressed
0493F9 FE 1B       0099        cp 27 ; check if 27 (ascii code for ESC)
0493FB CA 03 94 04 0100        jp z, main_end ; if pressed, jump to exit
0493FF             0101    ; escape not pressed so loop
0493FF C3 E6 93 04 0102        jp main_loop
049403             0103    
049403             0104    main_end:
049403             0105    ; restore original screen mode
049403 3A 16 7D 04 0106        ld a,(original_screen_mode)
049407 CD 50 13 04 0107        call vdu_set_screen_mode
04940B             0108    ; print thanks for playing message
04940B CD 5C 00 04 0109        call printInline
04940F 54 68 61 6E 0110        asciz "Thank you for playing\r\n"
       6B 20 79 6F 
       75 20 66 6F 
       72 20 70 6C 
       61 79 69 6E 
       67 0D 0A 00 
049427 21 E3 18 04 0111        ld hl,purple_nurples_ascii
04942B CD 63 00 04 0112        call printString
04942F C9          0113        ret
049430             0114    ; end main
049430             0115    
049430             0116    ; needs to be the final include to leave room for the sprite and tile tables
049430             0117        include "tables.inc"
049430             0001*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
049430             0002*   table_base: equ $
049430             0003*   player_weapons_begin: equ table_base
049430             0004*   player_lasers_begin: equ player_weapons_begin
049430             0005*   player_lasers_end: equ table_record_size*player_lasers_max+player_lasers_begin
049430             0006*   player_weapons_end: equ table_record_size*player_lasers_max+player_weapons_begin
049430             0007*   player_begin: equ player_weapons_end
049430             0008*   player_end: equ table_record_size+player_begin
049430             0009*   enemy_sprites_begin: equ player_end
049430             0010*   seekers_base: equ enemy_sprites_begin
049430             0011*   seekers_end: equ table_record_size*seekers_max+seekers_base
049430             0012*   fireballs_base: equ seekers_end
049430             0013*   fireballs_end: equ table_record_size*fireballs_max+fireballs_base
049430             0014*   enemy_sprites_end: equ fireballs_end
049430             0015*   explosions_base: equ enemy_sprites_end
049430             0016*   explosions_end: equ table_record_size*explosions_max+explosions_base
049430             0017*   table_end: equ explosions_end
049430             0018*   
049430             0019*   table_num_records: equ table_end-table_base/table_record_size
049430             0020*   table_num_enemy_records: equ enemy_sprites_end-enemy_sprites_begin/table_record_size
049430             0021*   
049430             0022*   ; ### THIS IS THE SPACE ALLOCATED TO THE ACTIVE TILES TABLE ###
049430             0023*   tile_table_base: equ table_end
049430             0024*   tile_table_end: equ 256*tile_table_record_size+tile_table_base

PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C CD 44 6E 04 0015        call init
040050 CD 30 6F 04 0016        call main
040054             0017    
040054             0018    exit:
040054 FD E1       0019        pop iy
040056 DD E1       0020        pop ix
040058 D1          0021        pop de
040059 C1          0022        pop bc
04005A F1          0023        pop af
04005B 21 00 00 00 0024        ld hl,0
04005F             0025    
04005F C9          0026        ret
040060             0027    
040060             0028    ; API INCLUDES
040060             0029        include "mos_api.inc"
040060             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*   ; Title:	AGON MOS - API for user projects
040060             0003*   ; Author:	Dean Belfield
040060             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*   ;			Added MOS error codes for return in HL
040060             0006*   ; Created:	03/08/2022
040060             0007*   ; Last Updated:	10/08/2023
040060             0008*   ;
040060             0009*   ; Modinfo:
040060             0010*   ; 05/08/2022:	Added mos_feof
040060             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*   ; 13/10/2022:	Added mos_oscli
040060             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*   ; 19/05/2023:	Added sysvar_scrMode
040060             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*   ; 03/08/2023:	Added mos_setkbvector
040060             0028*   ; 10/08/2023:	Added mos_getkbmap
040060             0029*   
040060             0030*   ; VDP control (VDU 23, 0, n)
040060             0031*   ;
040060             0032*   vdp_gp:				EQU 80h
040060             0033*   vdp_keycode:		EQU 81h
040060             0034*   vdp_cursor:			EQU	82h
040060             0035*   vdp_scrchar:		EQU	83h
040060             0036*   vdp_scrpixel:		EQU	84h
040060             0037*   vdp_audio:			EQU	85h
040060             0038*   vdp_mode:			EQU	86h
040060             0039*   vdp_rtc:			EQU	87h
040060             0040*   vdp_keystate:		EQU	88h
040060             0041*   vdp_logicalcoords:	EQU	C0h
040060             0042*   vdp_terminalmode:	EQU	FFh
040060             0043*   
040060             0044*   ; MOS high level functions
040060             0045*   ;
040060             0046*   mos_getkey:			EQU	00h
040060             0047*   mos_load:			EQU	01h
040060             0048*   mos_save:			EQU	02h
040060             0049*   mos_cd:				EQU	03h
040060             0050*   mos_dir:			EQU	04h
040060             0051*   mos_del:			EQU	05h
040060             0052*   mos_ren:			EQU	06h
040060             0053*   mos_mkdir:			EQU	07h
040060             0054*   mos_sysvars:		EQU	08h
040060             0055*   mos_editline:		EQU	09h
040060             0056*   mos_fopen:			EQU	0Ah
040060             0057*   mos_fclose:			EQU	0Bh
040060             0058*   mos_fgetc:			EQU	0Ch
040060             0059*   mos_fputc:			EQU	0Dh
040060             0060*   mos_feof:			EQU	0Eh
040060             0061*   mos_getError:		EQU	0Fh
040060             0062*   mos_oscli:			EQU	10h
040060             0063*   mos_copy:			EQU	11h
040060             0064*   mos_getrtc:			EQU	12h
040060             0065*   mos_setrtc:			EQU	13h
040060             0066*   mos_setintvector:	EQU	14h
040060             0067*   mos_uopen:			EQU	15h
040060             0068*   mos_uclose:			EQU	16h
040060             0069*   mos_ugetc:			EQU	17h
040060             0070*   mos_uputc:			EQU	18h
040060             0071*   mos_getfil:			EQU	19h
040060             0072*   mos_fread:			EQU	1Ah
040060             0073*   mos_fwrite:			EQU	1Bh
040060             0074*   mos_flseek:			EQU	1Ch
040060             0075*   mos_setkbvector:	EQU	1Dh
040060             0076*   mos_getkbmap:		EQU	1Eh
040060             0077*   
040060             0078*   ; MOS program exit codes
040060             0079*   ;
040060             0080*   EXIT_OK:				EQU  0;	"OK",
040060             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*   ; FatFS file access functions
040060             0103*   ;
040060             0104*   ffs_fopen:			EQU	80h
040060             0105*   ffs_fclose:			EQU	81h
040060             0106*   ffs_fread:			EQU	82h
040060             0107*   ffs_fwrite:			EQU	83h
040060             0108*   ffs_flseek:			EQU	84h
040060             0109*   ffs_ftruncate:		EQU	85h
040060             0110*   ffs_fsync:			EQU	86h
040060             0111*   ffs_fforward:		EQU	87h
040060             0112*   ffs_fexpand:		EQU	88h
040060             0113*   ffs_fgets:			EQU	89h
040060             0114*   ffs_fputc:			EQU	8Ah
040060             0115*   ffs_fputs:			EQU	8Bh
040060             0116*   ffs_fprintf:		EQU	8Ch
040060             0117*   ffs_ftell:			EQU	8Dh
040060             0118*   ffs_feof:			EQU	8Eh
040060             0119*   ffs_fsize:			EQU	8Fh
040060             0120*   ffs_ferror:			EQU	90h
040060             0121*   
040060             0122*   ; FatFS directory access functions
040060             0123*   ;
040060             0124*   ffs_dopen:			EQU	91h
040060             0125*   ffs_dclose:			EQU	92h
040060             0126*   ffs_dread:			EQU	93h
040060             0127*   ffs_dfindfirst:		EQU	94h
040060             0128*   ffs_dfindnext:		EQU	95h
040060             0129*   
040060             0130*   ; FatFS file and directory management functions
040060             0131*   ;
040060             0132*   ffs_stat:			EQU	96h
040060             0133*   ffs_unlink:			EQU	97h
040060             0134*   ffs_rename:			EQU	98h
040060             0135*   ffs_chmod:			EQU	99h
040060             0136*   ffs_utime:			EQU	9Ah
040060             0137*   ffs_mkdir:			EQU	9Bh
040060             0138*   ffs_chdir:			EQU	9Ch
040060             0139*   ffs_chdrive:		EQU	9Dh
040060             0140*   ffs_getcwd:			EQU	9Eh
040060             0141*   
040060             0142*   ; FatFS volume management and system configuration functions
040060             0143*   ;
040060             0144*   ffs_mount:			EQU	9Fh
040060             0145*   ffs_mkfs:			EQU	A0h
040060             0146*   ffs_fdisk:			EQU	A1h
040060             0147*   ffs_getfree:		EQU	A2h
040060             0148*   ffs_getlabel:		EQU	A3h
040060             0149*   ffs_setlabel:		EQU	A4h
040060             0150*   ffs_setcp:			EQU	A5h
040060             0151*   
040060             0152*   ; File access modes
040060             0153*   ;
040060             0154*   fa_read:			EQU	01h
040060             0155*   fa_write:			EQU	02h
040060             0156*   fa_open_existing:	EQU	00h
040060             0157*   fa_create_new:		EQU	04h
040060             0158*   fa_create_always:	EQU	08h
040060             0159*   fa_open_always:		EQU	10h
040060             0160*   fa_open_append:		EQU	30h
040060             0161*   
040060             0162*   ; System variable indexes for api_sysvars
040060             0163*   ; Index into _sysvars in globals.inc
040060             0164*   ;
040060             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*   
040060             0192*   ; Flags for the VPD protocol
040060             0193*   ;
040060             0194*   vdp_pflag_cursor:		EQU	00000001b
040060             0195*   vdp_pflag_scrchar:		EQU	00000010b
040060             0196*   vdp_pflag_point:		EQU	00000100b
040060             0197*   vdp_pflag_audio:		EQU	00001000b
040060             0198*   vdp_pflag_mode:			EQU	00010000b
040060             0199*   vdp_pflag_rtc:			EQU	00100000b
040060             0200*   
040060             0201*   ;
040060             0202*   ; FatFS structures
040060             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*   ;
040060             0205*   ; Object ID and allocation information (FFOBJID)
040060             0206*   ;
040060             0207*   ; Indexes into FFOBJID structure
040060             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*   ;
040060             0215*   ; File object structure (FIL)
040060             0216*   ;
040060             0217*   ; Indexes into FIL structure
040060             0218*   fil_obj:		EQU 0	; 15: Object identifier
040060             0219*   fil_flag:		EQU	15 	;  1: File status flags
040060             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*   ;
040060             0227*   ; Directory object structure (DIR)
040060             0228*   ; Indexes into DIR structure
040060             0229*   dir_obj:		EQU  0	; 15: Object identifier
040060             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*   dir_clust:		EQU	19	;  4: Current cluster
040060             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*   ;
040060             0237*   ; File information structure (FILINFO)
040060             0238*   ;
040060             0239*   ; Indexes into FILINFO structure
040060             0240*   filinfo_fsize:		EQU 0	;   4: File size
040060             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*   ;
040060             0247*   ; Macro for calling the API
040060             0248*   ; Parameters:
040060             0249*   ; - function: One of the function numbers listed above
040060             0250*   ;
040060             0251*   	MACRO	MOSCALL	function
040060             0252*   			LD	A, function
040060             0253*   			RST.LIL	08h
040060             0254*   	ENDMACRO
040060             0030        include "macros.inc"
040060             0001*   
040060             0002*   ; test the sign of HL
040060             0003*   ; inputs: HL obviously
040060             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040060             0005*   ; destroys: flags
040060             0006*       MACRO SIGN_HLU
040060             0007*       add hl,de ; 1 cycle
040060             0008*       or a ; clear flags ; 1 cycle
040060             0009*       sbc hl,de ; 2 cycles
040060             0010*       ; 4 cycles total
040060             0011*       ENDMACRO
040060             0012*   
040060             0013*   ; put the value in A into HLU
040060             0014*   ; affects: HLU
040060             0015*   ; destroys: nothing
040060             0016*   ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
040060             0017*       MACRO A_TO_HLU
040060             0018*       xor a ; 1 cycle
040060             0019*       ld ($+8+1),hl ; 7 cycles
040060             0020*       ld ($+4+3),a ; 5 cycles
040060             0021*       ld hl,0x000000 ; 4 cycles
040060             0022*       ; 17 cycles total
040060             0023*       ENDMACRO
040060             0024*   
040060             0025*   ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
040060             0026*   ; one cycle less but burns flags
040060             0027*       MACRO A_TO_HLU_ALT
040060             0028*       push hl ; 4 cycles
040060             0029*       ld hl,2 ; 4 cycles
040060             0030*       add hl,sp ; 1 cycle
040060             0031*       ld (hl),a ; 2 cycles
040060             0032*       pop hl ; 4 cycles
040060             0033*       ; 15 cycles total
040060             0034*       ENDMACRO
040060             0035*   
040060             0036*       MACRO hlu_mul256
040060             0037*       add hl,hl ; * 2
040060             0038*       add hl,hl ; * 4
040060             0039*       add hl,hl ; * 8
040060             0040*       add hl,hl ; * 16
040060             0041*       add hl,hl ; * 32
040060             0042*       add hl,hl ; * 64
040060             0043*       add hl,hl ; * 128
040060             0044*       add hl,hl ; * 256
040060             0045*       ENDMACRO
040060             0046*   
040060             0047*   ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
040060             0048*       MACRO SRL_UHL
040060             0049*       dec sp ; 1 cycle
040060             0050*       push hl ; 4 cycles
040060             0051*       inc sp ; 1 cycle
040060             0052*       pop hl ; 4 cycles
040060             0053*       inc hl ; 1 cycle
040060             0054*       dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040060             0055*       ; 13 cycles total
040060             0056*       ENDMACRO
040060             0057*   
040060             0058*       MACRO printChar char
040060             0059*       LD A, char
040060             0060*       RST.LIL 10h
040060             0061*       ENDMACRO
040060             0062*   
040060             0063*   ; Simulated call to subroutine at HL
040060             0064*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0065*   ; outputs: whatever the subroutine does, including HL and BC
040060             0066*   ; destroys: only what the subroutine does, but always BC
040060             0067*       MACRO CALL_HL
040060             0068*       ld bc,@F ; Address of first instruction after the jump
040060             0069*       push bc ; which constitutes the return address
040060             0070*       jp (hl) ; Jump to the address in HL
040060             0071*   @@:
040060             0072*       ENDMACRO
040060             0073*   
040060             0074*   ; Simulated call to subroutine at IX
040060             0075*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0076*   ; outputs: whatever the subroutine does, including IX and BC
040060             0077*   ; destroys: only what the subroutine does, but always BC
040060             0078*       MACRO CALL_IX
040060             0079*       ld bc,@F ; Address of first instruction after the jump
040060             0080*       push bc ; which constitutes the return address
040060             0081*       jp (ix) ; Jump to the address in IX
040060             0082*   @@:
040060             0083*       ENDMACRO
040060             0084*   
040060             0085*   ; Simulated call to soubroutinte at IY
040060             0086*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0087*   ; outputs: whatever the subroutine does, including IY and BC
040060             0088*   ; destroys: only what the subroutine does, but always BC
040060             0089*       MACRO CALL_IY
040060             0090*       ld bc,@F ; Address of first instruction after the jump
040060             0091*       push bc ; which constitutes the return address
040060             0092*       jp (iy) ; Jump to the address in IY
040060             0093*   @@:
040060             0094*       ENDMACRO
040060             0095*   
040060             0096*   ; put the value in HLU into A
040060             0097*   ; destroys: af
040060             0098*       MACRO HLU_TO_A
040060             0099*       dec sp ; 1 cycle
040060             0100*       push hl ; 4 cycles
040060             0101*       inc sp ; 1 cycle
040060             0102*       pop af ; 4 cycles
040060             0103*       ; 10 cycles total
040060             0104*       ENDMACRO
040060             0105*   
040060             0106*       MACRO PUSH_ALL
040060             0107*       ex af,af'
040060             0108*       exx
040060             0109*       push af
040060             0110*       push hl
040060             0111*       push bc
040060             0112*       push de
040060             0113*   
040060             0114*       ex af,af'
040060             0115*       exx
040060             0116*       push af
040060             0117*       push hl
040060             0118*       push bc
040060             0119*       push de
040060             0120*       push ix
040060             0121*       push iy
040060             0122*       ENDMACRO
040060             0123*   
040060             0124*       MACRO POP_ALL
040060             0125*       pop iy
040060             0126*       pop ix
040060             0127*       pop de
040060             0128*       pop bc
040060             0129*       pop hl
040060             0130*       pop af
040060             0131*       ex af,af'
040060             0132*       exx
040060             0133*   
040060             0134*       pop de
040060             0135*       pop bc
040060             0136*       pop hl
040060             0137*       pop af
040060             0138*       ex af,af'
040060             0139*       exx
040060             0140*       ENDMACRO
040060             0031        include "functions.inc"
040060 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040100             0002*   
040100             0003*   ; Print a zero-terminated string inline with code, e.g.:
040100             0004*   ;
040100             0005*   ;    call printInline
040100             0006*   ;    ASCIZ "Hello, world!\r\n"
040100             0007*   ;
040100             0008*   ; Destroys: HL,AF
040100             0009*   printInline:
040100 E1          0010*       pop hl ; get the return address = pointer to start of string
040101 CD 07 01 04 0011*       call printString ; HL advances to end of string
040105 E5          0012*       push hl ; restore the return address = pointer to end of string
040106 C9          0013*       ret
040107             0014*   
040107             0015*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040107             0016*   ; Print a zero-terminated string
040107             0017*   ; HL: Pointer to string
040107             0018*   printString:
040107 C5          0019*       PUSH BC
040108 01 00 00 00 0020*       LD BC,0
04010C 3E 00       0021*       LD A,0
04010E 5B DF       0022*       RST.LIL 18h
040110 C1          0023*       POP BC
040111 C9          0024*       RET
040112             0025*   ; print a VDU sequence
040112             0026*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
040112             0027*   sendVDUsequence:
040112 C5          0028*       PUSH BC
040113 01 00 00 00 0029*       LD BC, 0
040117 4E          0030*       LD C, (HL)
040118 5B DF       0031*       RST.LIL 18h
04011A C1          0032*       POP BC
04011B C9          0033*       RET
04011C             0034*   ; Print Newline sequence to VDP
04011C             0035*   ; destroys bc
04011C             0036*   printNewLine:
04011C F5          0037*       push af ; for some reason rst.lil 10h sets carry flag
04011D 3E 0D       0038*       LD A, '\r'
04011F 5B D7       0039*       RST.LIL 10h
040121 3E 0A       0040*       LD A, '\n'
040123 5B D7       0041*       RST.LIL 10h
040125 F1          0042*       pop af
040126 C9          0043*       RET
040127             0044*   
040127             0045*   ; Print a 24-bit HEX number
040127             0046*   ; HLU: Number to print
040127             0047*   printHex24:
040127             0048*       HLU_TO_A
040127 3B          0001*M1     dec sp ; 1 cycle
040128 E5          0002*M1     push hl ; 4 cycles
040129 33          0003*M1     inc sp ; 1 cycle
04012A F1          0004*M1     pop af ; 4 cycles
04012B             0005*M1     ; 10 cycles total
04012B CD 35 01 04 0049*       CALL printHex8
04012F             0050*   ; Print a 16-bit HEX number
04012F             0051*   ; HL: Number to print
04012F             0052*   printHex16:
04012F 7C          0053*       LD A,H
040130 CD 35 01 04 0054*       CALL printHex8
040134 7D          0055*       LD A,L
040135             0056*   ; Print an 8-bit HEX number
040135             0057*   ; A: Number to print
040135             0058*   printHex8:
040135 4F          0059*       LD C,A
040136 1F          0060*       RRA
040137 1F          0061*       RRA
040138 1F          0062*       RRA
040139 1F          0063*       RRA
04013A CD 3F 01 04 0064*       CALL @F
04013E 79          0065*       LD A,C
04013F             0066*   @@:
04013F E6 0F       0067*       AND 0Fh
040141 C6 90       0068*       ADD A,90h
040143 27          0069*       DAA
040144 CE 40       0070*       ADC A,40h
040146 27          0071*       DAA
040147 5B D7       0072*       RST.LIL 10h
040149 C9          0073*       RET
04014A             0074*   
04014A             0075*   printHexA:
04014A F5          0076*       push af
04014B C5          0077*       push bc
04014C CD 35 01 04 0078*       call printHex8
040150 3E 20       0079*       ld a,' '
040152 5B D7       0080*       rst.lil 10h
040154 C1          0081*       pop bc
040155 F1          0082*       pop af
040156 C9          0083*       ret
040157             0084*   
040157             0085*   printHexHL:
040157 F5          0086*       push af
040158 C5          0087*       push bc
040159 CD 2F 01 04 0088*       call printHex16
04015D 3E 20       0089*       ld a,' '
04015F 5B D7       0090*       rst.lil 10h
040161 C1          0091*       pop bc
040162 F1          0092*       pop af
040163 C9          0093*       ret
040164             0094*   
040164             0095*   printHexUHL:
040164 F5          0096*       push af
040165 C5          0097*       push bc
040166 CD 27 01 04 0098*       call printHex24
04016A 3E 20       0099*       ld a,' '
04016C 5B D7       0100*       rst.lil 10h
04016E C1          0101*       pop bc
04016F F1          0102*       pop af
040170 C9          0103*       ret
040171             0104*   
040171             0105*   printHexAUHL:
040171 F5          0106*       push af
040172 C5          0107*       push bc
040173 CD 35 01 04 0108*       call printHex8
040177 3E 2E       0109*       ld a,'.'
040179 5B D7       0110*       rst.lil 10h
04017B CD 27 01 04 0111*       call printHex24
04017F 3E 20       0112*       ld a,' '
040181 5B D7       0113*       rst.lil 10h
040183 C1          0114*       pop bc
040184 F1          0115*       pop af
040185 C9          0116*       ret
040186             0117*   
040186             0118*   printHexABHL:
040186             0119*   ; preserve registers
040186 C5          0120*       push bc ; b will be ok c will not
040187 F5          0121*       push af ; will get totally destroyed
040188             0122*   ; print a
040188 CD 35 01 04 0123*       call printHex8
04018C             0124*   ; print b
04018C 78          0125*       ld a,b
04018D CD 35 01 04 0126*       call printHex8
040191             0127*   ; print hl
040191 CD 2F 01 04 0128*       call printHex16
040195             0129*   ; restore registers
040195 F1          0130*       pop af
040196 C1          0131*       pop bc
040197 C9          0132*       ret
040198             0133*   
040198             0134*   printHexBHL:
040198             0135*   ; preserve registers
040198 C5          0136*       push bc ; b will be ok c will not
040199 F5          0137*       push af ; will get totally destroyed
04019A             0138*   ; print b
04019A 78          0139*       ld a,b
04019B CD 35 01 04 0140*       call printHex8
04019F             0141*   ; print hl
04019F CD 2F 01 04 0142*       call printHex16
0401A3             0143*   ; restore registers
0401A3 F1          0144*       pop af
0401A4 C1          0145*       pop bc
0401A5 C9          0146*       ret
0401A6             0147*   
0401A6             0148*   printHexCDE:
0401A6             0149*   ; preserve registers
0401A6 C5          0150*       push bc ; b will be ok c will not
0401A7 F5          0151*       push af ; will get totally destroyed
0401A8             0152*   ; print c
0401A8 79          0153*       ld a,c
0401A9 CD 35 01 04 0154*       call printHex8
0401AD             0155*   ; print de
0401AD EB          0156*       ex de,hl
0401AE CD 2F 01 04 0157*       call printHex16
0401B2 EB          0158*       ex de,hl
0401B3             0159*   ; restore registers
0401B3 F1          0160*       pop af
0401B4 C1          0161*       pop bc
0401B5 C9          0162*       ret
0401B6             0163*   
0401B6             0164*   printHexUIX:
0401B6             0165*   ; store everything in scratch
0401B6 22 42 06 04 0166*       ld (uhl),hl
0401BA ED 43 45 06 0167*       ld (ubc),bc
       04          
0401BF ED 53 48 06 0168*       ld (ude),de
       04          
0401C4 DD 22 4B 06 0169*       ld (uix),ix
       04          
0401C9 FD 22 4E 06 0170*       ld (uiy),iy
       04          
0401CE F5          0171*       push af ; fml
0401CF             0172*   
0401CF 21 D9 05 04 0173*       ld hl,str_ixu
0401D3 CD 07 01 04 0174*       call printString
0401D7 2A 4B 06 04 0175*       ld hl,(uix)
0401DB CD 27 01 04 0176*       call printHex24
0401DF CD 1C 01 04 0177*       call printNewLine
0401E3             0178*   
0401E3             0179*   ; restore everything
0401E3 2A 42 06 04 0180*       ld hl, (uhl)
0401E7 ED 4B 45 06 0181*       ld bc, (ubc)
       04          
0401EC ED 5B 48 06 0182*       ld de, (ude)
       04          
0401F1 DD 2A 4B 06 0183*       ld ix, (uix)
       04          
0401F6 FD 2A 4E 06 0184*       ld iy, (uiy)
       04          
0401FB F1          0185*       pop af
0401FC             0186*   ; all done
0401FC C9          0187*       ret
0401FD             0188*   
0401FD             0189*   ; Print a 0x HEX prefix
0401FD             0190*   DisplayHexPrefix:
0401FD 3E 30       0191*       LD A, '0'
0401FF 5B D7       0192*       RST.LIL 10h
040201 3E 78       0193*       LD A, 'x'
040203 5B D7       0194*       RST.LIL 10h
040205 C9          0195*       RET
040206             0196*   
040206             0197*       MACRO printDecBC
040206             0198*       push hl
040206             0199*       push bc
040206             0200*       pop hl
040206             0201*       call printDec
040206             0202*       pop hl
040206             0203*       ENDMACRO
040206             0204*   
040206             0205*       MACRO printDecDE
040206             0206*       push hl
040206             0207*       push de
040206             0208*       pop hl
040206             0209*       call printDec
040206             0210*       pop hl
040206             0211*       ENDMACRO
040206             0212*   
040206             0213*       MACRO printDecHL
040206             0214*       call printDec
040206             0215*       ENDMACRO
040206             0216*   
040206             0217*       MACRO printDecIX
040206             0218*       push hl
040206             0219*       push ix
040206             0220*       pop hl
040206             0221*       call printDec
040206             0222*       pop hl
040206             0223*       ENDMACRO
040206             0224*   
040206             0225*       MACRO printDecIY
040206             0226*       push hl
040206             0227*       push iy
040206             0228*       pop hl
040206             0229*       call printDec
040206             0230*       pop hl
040206             0231*       ENDMACRO
040206             0232*   
040206             0233*   
040206             0234*   ; Prints the right justified decimal value in HL without leading zeroes
040206             0235*   ; HL : Value to print
040206             0236*   ; preserves all registers and flags
040206             0237*   printDec:
040206             0238*   ; BEGIN MY CODE
040206             0239*   ; back up all the things
040206 F5          0240*       push af
040207 C5          0241*       push bc
040208 D5          0242*       push de
040209 E5          0243*       push hl
04020A             0244*   ; END MY CODE
04020A 11 32 02 04 0245*       LD DE, _printDecBuffer
04020E CD 42 02 04 0246*       CALL u24_to_ascii
040212             0247*   ; BEGIN MY CODE
040212             0248*   ; replace leading zeroes with spaces
040212 21 32 02 04 0249*       LD HL, _printDecBuffer
040216 06 07       0250*       ld B, 7 ; if HL was 0, we want to keep the final zero
040218             0251*   @loop:
040218 7E          0252*       LD A, (HL)
040219 FE 30       0253*       CP '0'
04021B C2 25 02 04 0254*       JP NZ, @done
04021F 3E 20       0255*       LD A, ' '
040221 77          0256*       LD (HL), A
040222 23          0257*       INC HL
040223             0258*       ; CALL vdu_cursor_forward
040223 10 F3       0259*       DJNZ @loop
040225             0260*   @done:
040225             0261*   ; END MY CODE
040225 21 32 02 04 0262*       LD HL, _printDecBuffer
040229 CD 07 01 04 0263*       CALL printString
04022D             0264*   ; BEGIN MY CODE
04022D             0265*   ; restore all the things
04022D E1          0266*       pop hl
04022E D1          0267*       pop de
04022F C1          0268*       pop bc
040230 F1          0269*       pop af
040231             0270*   ; END MY CODE
040231 C9          0271*       RET
040232 00 00 00 00 0272*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040242             0273*   
040242             0274*   ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
040242             0275*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040242             0276*   ; so it will allways be 8 characters length
040242             0277*   ; HL : Value to convert to string
040242             0278*   ; DE : pointer to buffer, at least 8 byte + 0
040242             0279*   u24_to_ascii:
040242 01 80 69 67 0280*       LD BC,-10000000
040246 CD 79 02 04 0281*       CALL @one_digit
04024A 01 C0 BD F0 0282*       LD BC,-1000000
04024E CD 79 02 04 0283*       CALL @one_digit
040252 01 60 79 FE 0284*       LD BC,-100000
040256 CD 79 02 04 0285*       CALL @one_digit
04025A 01 F0 D8 FF 0286*       LD BC,-10000
04025E CD 79 02 04 0287*       CALL @one_digit
040262 01 18 FC FF 0288*       LD BC,-1000
040266 CD 79 02 04 0289*       CALL @one_digit
04026A 01 9C FF FF 0290*       LD BC,-100
04026E CD 79 02 04 0291*       CALL @one_digit
040272 0E F6       0292*       LD C,-10
040274 CD 79 02 04 0293*       CALL @one_digit
040278 48          0294*       LD C,B
040279             0295*   @one_digit:
040279 3E 2F       0296*       LD A,'0'-1
04027B             0297*   @divide_me:
04027B 3C          0298*       INC A
04027C 09          0299*       ADD HL,BC
04027D 38 FC       0300*       JR C,@divide_me
04027F ED 42       0301*       SBC HL,BC
040281 12          0302*       LD (DE),A
040282 13          0303*       INC DE
040283 C9          0304*       RET
040284             0305*   
040284             0306*   print_u24:
040284 D5          0307*       push de
040285 E5          0308*       push hl
040286 11 32 02 04 0309*       ld de,_printDecBuffer
04028A CD 42 02 04 0310*       call u24_to_ascii
04028E 21 32 02 04 0311*       ld hl,_printDecBuffer
040292 CD 07 01 04 0312*       call printString
040296 3E 20       0313*       ld a,' '
040298 5B D7       0314*       rst.lil 10h
04029A E1          0315*       pop hl
04029B D1          0316*       pop de
04029C C9          0317*       ret
04029D             0318*   
04029D             0319*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04029D             0320*   ; HL : Value to convert to string (integer part in H, fractional part in L)
04029D             0321*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04029D             0322*   u168_to_ascii:
04029D             0323*   ; add a leading space to make room for sign flag if needed
04029D 3E 20       0324*       ld a,' '
04029F 12          0325*       ld (de),a
0402A0 13          0326*       inc de
0402A1             0327*   ; Convert integer part
0402A1 E5          0328*       push hl ; Save HL (we’ll need the fractional part later)
0402A2             0329*       ; call hlu_udiv256 ; Shift to get integer portion in HL
0402A2             0330*       SRL_UHL ; Shift to get integer portion in HL
0402A2 3B          0001*M1     dec sp ; 1 cycle
0402A3 E5          0002*M1     push hl ; 4 cycles
0402A4 33          0003*M1     inc sp ; 1 cycle
0402A5 E1          0004*M1     pop hl ; 4 cycles
0402A6 23          0005*M1     inc hl ; 1 cycle
0402A7 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
0402A9             0007*M1     ; 13 cycles total
0402A9 01 F0 D8 FF 0331*       ld bc, -10000
0402AD CD D0 02 04 0332*       call @one_int
0402B1 01 18 FC FF 0333*       ld bc, -1000
0402B5 CD D0 02 04 0334*       call @one_int
0402B9 01 9C FF FF 0335*       ld bc, -100
0402BD CD D0 02 04 0336*       call @one_int
0402C1 0E F6       0337*       ld c, -10
0402C3 CD D0 02 04 0338*       call @one_int
0402C7 48          0339*       ld c, b
0402C8 CD D0 02 04 0340*       call @one_int
0402CC C3 DB 02 04 0341*       jp @frac ; Jump to fractional part conversion
0402D0             0342*   @one_int:
0402D0 3E 2F       0343*       ld a, '0' - 1 ; Start ASCII character at '0'
0402D2             0344*   @divide_me:
0402D2 3C          0345*       inc a
0402D3 09          0346*       add hl, bc ; Accumulate until overflow
0402D4 38 FC       0347*       jr c, @divide_me
0402D6 ED 42       0348*       sbc hl, bc ; Remove excess after overflow
0402D8 12          0349*       ld (de), a ; Store ASCII digit
0402D9 13          0350*       inc de
0402DA C9          0351*       ret
0402DB             0352*   ; Convert fractional part
0402DB             0353*   @frac:
0402DB 3E 2E       0354*       ld a, '.' ; Decimal point
0402DD 12          0355*       ld (de), a
0402DE 13          0356*       inc de
0402DF E1          0357*       pop hl ; Restore HL with original fraction
0402E0 06 03       0358*       ld b, 3 ; Loop counter for 3 fractional digits
0402E2             0359*   @frac_loop:
0402E2 26 0A       0360*       ld h, 10 ; Load multiplier for fractional part
0402E4 ED 6C       0361*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0402E6 3E 30       0362*       ld a, '0'
0402E8 84          0363*       add a, h ; Convert integer part to ASCII
0402E9 12          0364*       ld (de), a
0402EA 13          0365*       inc de
0402EB 10 F5       0366*       djnz @frac_loop ; Repeat for each fractional digit
0402ED             0367*   ; Add null terminator
0402ED AF          0368*       xor a ; Null terminator
0402EE 12          0369*       ld (de), a
0402EF C9          0370*       ret
0402F0             0371*   
0402F0             0372*   print_u168:
0402F0 D5          0373*       push de
0402F1 E5          0374*       push hl
0402F2 11 32 02 04 0375*       ld de,_printDecBuffer
0402F6 CD 9D 02 04 0376*       call u168_to_ascii
0402FA 21 32 02 04 0377*       ld hl,_printDecBuffer
0402FE CD 07 01 04 0378*       call printString
040302 E1          0379*       pop hl
040303 D1          0380*       pop de
040304 C9          0381*       ret
040305             0382*   
040305             0383*   ; signed version of u168_to_ascii
040305             0384*   s168_to_ascii:
040305 D5          0385*       push de ; save starting address of buffer
040306 CD 06 09 04 0386*       call hlu_abs
04030A F5          0387*       push af ; save sign flag
04030B CD 9D 02 04 0388*       call u168_to_ascii
04030F F1          0389*       pop af ; restore sign flag
040310 D1          0390*       pop de ; restore starting address of buffer
040311 F0          0391*       ret p ; hlu was positive so nothing to do
040312 3E 2D       0392*       ld a,'-'
040314 12          0393*       ld (de),a
040315 C9          0394*       ret
040316             0395*   
040316             0396*   print_s168:
040316 D5          0397*       push de
040317 E5          0398*       push hl
040318 11 32 02 04 0399*       ld de,_printDecBuffer
04031C CD 05 03 04 0400*       call s168_to_ascii
040320 21 32 02 04 0401*       ld hl,_printDecBuffer
040324 CD 07 01 04 0402*       call printString
040328 E1          0403*       pop hl
040329 D1          0404*       pop de
04032A C9          0405*       ret
04032B             0406*   
04032B             0407*   print_s168_hl:
04032B F5          0408*       push af
04032C E5          0409*       push hl
04032D CD 16 03 04 0410*       call print_s168
040331 3E 20       0411*       ld a,' '
040333 5B D7       0412*       rst.lil 10h
040335 E1          0413*       pop hl
040336 F1          0414*       pop af
040337 C9          0415*       ret
040338             0416*   
040338             0417*   print_s168_bc:
040338 F5          0418*       push af
040339 C5          0419*       push bc
04033A E5          0420*       push hl
04033B C5          0421*       push bc
04033C E1          0422*       pop hl
04033D CD 16 03 04 0423*       call print_s168
040341 3E 20       0424*       ld a,' '
040343 5B D7       0425*       rst.lil 10h
040345 E1          0426*       pop hl
040346 C1          0427*       pop bc
040347 F1          0428*       pop af
040348 C9          0429*       ret
040349             0430*   
040349             0431*   print_s168_de:
040349 F5          0432*       push af
04034A D5          0433*       push de
04034B E5          0434*       push hl
04034C EB          0435*       ex de,hl
04034D CD 16 03 04 0436*       call print_s168
040351 3E 20       0437*       ld a,' '
040353 5B D7       0438*       rst.lil 10h
040355 E1          0439*       pop hl
040356 D1          0440*       pop de
040357 F1          0441*       pop af
040358 C9          0442*       ret
040359             0443*   
040359             0444*   print_s168_hl_bc_de:
040359 F5          0445*       push af
04035A C5          0446*       push bc
04035B D5          0447*       push de
04035C E5          0448*       push hl
04035D CD 16 03 04 0449*       call print_s168
040361 3E 20       0450*       ld a,' '
040363 5B D7       0451*       rst.lil 10h
040365 C5          0452*       push bc
040366 E1          0453*       pop hl
040367 CD 16 03 04 0454*       call print_s168
04036B 3E 20       0455*       ld a,' '
04036D 5B D7       0456*       rst.lil 10h
04036F EB          0457*       ex de,hl
040370 CD 16 03 04 0458*       call print_s168
040374 3E 20       0459*       ld a,' '
040376 5B D7       0460*       rst.lil 10h
040378 E1          0461*       pop hl
040379 D1          0462*       pop de
04037A C1          0463*       pop bc
04037B F1          0464*       pop af
04037C C9          0465*       ret
04037D             0466*   
04037D             0467*   print_s168_bc_de:
04037D F5          0468*       push af
04037E C5          0469*       push bc
04037F D5          0470*       push de
040380 C5          0471*       push bc
040381 E1          0472*       pop hl
040382 CD 16 03 04 0473*       call print_s168
040386 3E 20       0474*       ld a,' '
040388 5B D7       0475*       rst.lil 10h
04038A EB          0476*       ex de,hl
04038B CD 16 03 04 0477*       call print_s168
04038F 3E 20       0478*       ld a,' '
040391 5B D7       0479*       rst.lil 10h
040393 E1          0480*       pop hl
040394 D1          0481*       pop de
040395 C1          0482*       pop bc
040396 F1          0483*       pop af
040397 C9          0484*       ret
040398             0485*   
040398             0486*   print_s168_a:
040398 F5          0487*       push af
040399 C5          0488*       push bc
04039A E5          0489*       push hl
04039B 21 00 00 00 0490*       ld hl,0
04039F 6F          0491*       ld l,a
0403A0 CD 2B 03 04 0492*       call print_s168_hl
0403A4 E1          0493*       pop hl
0403A5 C1          0494*       pop bc
0403A6 F1          0495*       pop af
0403A7 C9          0496*       ret
0403A8             0497*   
0403A8             0498*   ; #### new functions added by Brandon R. Gates ####
0403A8             0499*   
0403A8             0500*   ; print the binary representation of the 8-bit value in a
0403A8             0501*   ; destroys a, hl, bc
0403A8             0502*   printBin8:
0403A8 06 08       0503*       ld b,8 ; loop counter for 8 bits
0403AA 21 C5 03 04 0504*       ld hl,@cmd ; set hl to the low byte of the output string
0403AE             0505*       ; (which will be the high bit of the value in a)
0403AE             0506*   @loop:
0403AE 07          0507*       rlca ; put the next highest bit into carry
0403AF 38 04       0508*       jr c,@one
0403B1 36 30       0509*       ld (hl),'0'
0403B3 18 02       0510*       jr @next_bit
0403B5             0511*   @one:
0403B5 36 31       0512*       ld (hl),'1'
0403B7             0513*   @next_bit:
0403B7 23          0514*       inc hl
0403B8 10 F4       0515*       djnz @loop
0403BA             0516*   ; print it
0403BA 21 C5 03 04 0517*       ld hl,@cmd
0403BE 01 08 00 00 0518*       ld bc,@end-@cmd
0403C2 5B DF       0519*       rst.lil $18
0403C4 C9          0520*       ret
0403C5             0521*   @cmd: ds 8 ; eight bytes for eight bits
0403CD             0522*   @end:
0403CD             0523*   
0403CD             0524*   ; print the binary representation of the 8-bit value in a
0403CD             0525*   ; in reverse order (lsb first)
0403CD             0526*   ; destroys a, hl, bc
0403CD             0527*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
0403CD 06 08       0528*       ld b,8 ; loop counter for 8 bits
0403CF 21 EA 03 04 0529*       ld hl,@cmd ; set hl to the low byte of the output string
0403D3             0530*       ; (which will be the high bit of the value in a)
0403D3             0531*   @loop:
0403D3 0F          0532*       rrca ; put the next lowest bit into carry
0403D4 38 04       0533*       jr c,@one
0403D6 36 30       0534*       ld (hl),'0'
0403D8 18 02       0535*       jr @next_bit
0403DA             0536*   @one:
0403DA 36 31       0537*       ld (hl),'1'
0403DC             0538*   @next_bit:
0403DC 23          0539*       inc hl
0403DD 10 F4       0540*       djnz @loop
0403DF             0541*   ; print it
0403DF 21 EA 03 04 0542*       ld hl,@cmd
0403E3 01 08 00 00 0543*       ld bc,@end-@cmd
0403E7 5B DF       0544*       rst.lil $18
0403E9 C9          0545*       ret
0403EA             0546*   @cmd: ds 8 ; eight bytes for eight bits
0403F2             0547*   @end:
0403F2             0548*   
0403F2             0549*   ; print registers to screen in hexidecimal format
0403F2             0550*   ; inputs: none
0403F2             0551*   ; outputs: values of every register printed to screen
0403F2             0552*   ;    values of each register in global scratch memory
0403F2             0553*   ; destroys: nothing
0403F2             0554*   stepRegistersHex:
0403F2             0555*   ; store everything in scratch
       FF FF FF FF 
       FF FF FF FF 
0403F2 22 42 06 04 0556*       ld (uhl),hl
0403F6 ED 43 45 06 0557*       ld (ubc),bc
       04          
0403FB ED 53 48 06 0558*       ld (ude),de
       04          
040400 DD 22 4B 06 0559*       ld (uix),ix
       04          
040405 FD 22 4E 06 0560*       ld (uiy),iy
       04          
04040A F5          0561*       push af ; fml
04040B E1          0562*       pop hl ; thanks, zilog
04040C 22 3F 06 04 0563*       ld (uaf),hl
040410 F5          0564*       push af ; dammit
040411             0565*   
040411             0566*   ; home the cursor
040411             0567*       ; call vdu_home_cursor
040411             0568*   
040411             0569*   ; print each register
040411 21 C5 05 04 0570*       ld hl,str_afu
040415 CD 07 01 04 0571*       call printString
040419 2A 3F 06 04 0572*       ld hl,(uaf)
04041D CD 27 01 04 0573*       call printHex24
040421 CD 1C 01 04 0574*       call printNewLine
040425             0575*   
040425 21 CA 05 04 0576*       ld hl,str_hlu
040429 CD 07 01 04 0577*       call printString
04042D 2A 42 06 04 0578*       ld hl,(uhl)
040431 CD 27 01 04 0579*       call printHex24
040435 CD 1C 01 04 0580*       call printNewLine
040439             0581*   
040439 21 CF 05 04 0582*       ld hl,str_bcu
04043D CD 07 01 04 0583*       call printString
040441 2A 45 06 04 0584*       ld hl,(ubc)
040445 CD 27 01 04 0585*       call printHex24
040449 CD 1C 01 04 0586*       call printNewLine
04044D             0587*   
04044D 21 D4 05 04 0588*       ld hl,str_deu
040451 CD 07 01 04 0589*       call printString
040455 2A 48 06 04 0590*       ld hl,(ude)
040459 CD 27 01 04 0591*       call printHex24
04045D CD 1C 01 04 0592*       call printNewLine
040461             0593*   
040461 21 D9 05 04 0594*       ld hl,str_ixu
040465 CD 07 01 04 0595*       call printString
040469 2A 4B 06 04 0596*       ld hl,(uix)
04046D CD 27 01 04 0597*       call printHex24
040471 CD 1C 01 04 0598*       call printNewLine
040475             0599*   
040475 21 DE 05 04 0600*       ld hl,str_iyu
040479 CD 07 01 04 0601*       call printString
04047D 2A 4E 06 04 0602*       ld hl,(uiy)
040481 CD 27 01 04 0603*       call printHex24
040485 CD 1C 01 04 0604*       call printNewLine
040489             0605*   
040489             0606*       ; call vsync
040489             0607*   
040489 CD 1C 01 04 0608*       call printNewLine
04048D             0609*   
04048D             0610*   ; check for right shift key and quit if pressed
04048D             0611*       MOSCALL mos_getkbmap
04048D 3E 1E       0001*M1 			LD	A, function
04048F 5B CF       0002*M1 			RST.LIL	08h
040491             0612*   @stayhere:
040491             0613*   ; 7 RightShift
040491 DD CB 00 76 0614*       bit 6,(ix+0)
040495 20 02       0615*       jr nz,@RightShift
040497 18 F8       0616*       jr @stayhere
040499             0617*   @RightShift:
040499 DD CB 0E 86 0618*       res 0,(ix+14) ; debounce the key (hopefully)
04049D 3E 80       0619*       ld a,%10000000
04049F             0620*       ; call multiPurposeDelay
04049F             0621*   
04049F             0622*   ; restore everything
04049F 2A 42 06 04 0623*       ld hl, (uhl)
0404A3 ED 4B 45 06 0624*       ld bc, (ubc)
       04          
0404A8 ED 5B 48 06 0625*       ld de, (ude)
       04          
0404AD DD 2A 4B 06 0626*       ld ix, (uix)
       04          
0404B2 FD 2A 4E 06 0627*       ld iy, (uiy)
       04          
0404B7 F1          0628*       pop af
0404B8             0629*   ; all done
0404B8 C9          0630*       ret
0404B9             0631*   
0404B9             0632*   ; print registers to screen in hexidecimal format
0404B9             0633*   ; inputs: none
0404B9             0634*   ; outputs: values of every register printed to screen
0404B9             0635*   ;    values of each register in global scratch memory
0404B9             0636*   ; destroys: nothing
0404B9             0637*   dumpRegistersHex:
0404B9             0638*   ; store everything in scratch
0404B9 22 42 06 04 0639*       ld (uhl),hl
0404BD ED 43 45 06 0640*       ld (ubc),bc
       04          
0404C2 ED 53 48 06 0641*       ld (ude),de
       04          
0404C7 DD 22 4B 06 0642*       ld (uix),ix
       04          
0404CC FD 22 4E 06 0643*       ld (uiy),iy
       04          
0404D1 F5          0644*       push af ; fml
0404D2 E1          0645*       pop hl ; thanks, zilog
0404D3 22 3F 06 04 0646*       ld (uaf),hl
0404D7 F5          0647*       push af ; dammit
0404D8             0648*   
0404D8             0649*   ; home the cursor
0404D8             0650*       ; call vdu_home_cursor
0404D8             0651*       ; call printNewLine
0404D8             0652*   
0404D8             0653*   ; print each register
0404D8 21 C5 05 04 0654*       ld hl,str_afu
0404DC CD 07 01 04 0655*       call printString
0404E0 2A 3F 06 04 0656*       ld hl,(uaf)
0404E4 CD 27 01 04 0657*       call printHex24
0404E8 CD 1C 01 04 0658*       call printNewLine
0404EC             0659*   
0404EC 21 CA 05 04 0660*       ld hl,str_hlu
0404F0 CD 07 01 04 0661*       call printString
0404F4 2A 42 06 04 0662*       ld hl,(uhl)
0404F8 CD 27 01 04 0663*       call printHex24
0404FC CD 1C 01 04 0664*       call printNewLine
040500             0665*   
040500 21 CF 05 04 0666*       ld hl,str_bcu
040504 CD 07 01 04 0667*       call printString
040508 2A 45 06 04 0668*       ld hl,(ubc)
04050C CD 27 01 04 0669*       call printHex24
040510 CD 1C 01 04 0670*       call printNewLine
040514             0671*   
040514 21 D4 05 04 0672*       ld hl,str_deu
040518 CD 07 01 04 0673*       call printString
04051C 2A 48 06 04 0674*       ld hl,(ude)
040520 CD 27 01 04 0675*       call printHex24
040524 CD 1C 01 04 0676*       call printNewLine
040528             0677*   
040528 21 D9 05 04 0678*       ld hl,str_ixu
04052C CD 07 01 04 0679*       call printString
040530 2A 4B 06 04 0680*       ld hl,(uix)
040534 CD 27 01 04 0681*       call printHex24
040538 CD 1C 01 04 0682*       call printNewLine
04053C             0683*   
04053C 21 DE 05 04 0684*       ld hl,str_iyu
040540 CD 07 01 04 0685*       call printString
040544 2A 4E 06 04 0686*       ld hl,(uiy)
040548 CD 27 01 04 0687*       call printHex24
04054C             0688*       ; call printNewLine
04054C             0689*   
04054C             0690*       ; call vdu_vblank
04054C             0691*   
04054C             0692*       ; call printNewLine
04054C             0693*   ; restore everything
04054C 2A 42 06 04 0694*       ld hl, (uhl)
040550 ED 4B 45 06 0695*       ld bc, (ubc)
       04          
040555 ED 5B 48 06 0696*       ld de, (ude)
       04          
04055A DD 2A 4B 06 0697*       ld ix, (uix)
       04          
04055F FD 2A 4E 06 0698*       ld iy, (uiy)
       04          
040564 F1          0699*       pop af
040565             0700*   ; all done
040565 C9          0701*       ret
040566             0702*   
040566             0703*   dumpRegistersHexPrime:
040566 D9          0704*       exx
040567 08          0705*       ex af,af'
040568 CD B9 04 04 0706*       call dumpRegistersHex
04056C 08          0707*       ex af,af'
04056D D9          0708*       exx
04056E C9          0709*       ret
04056F             0710*   
04056F             0711*   ; additionally dump prime registers
04056F             0712*   ; inputs: none
04056F             0713*   ; outputs: values of every register printed to screen
04056F             0714*   ; destroys: nothing
04056F             0715*   dumpRegistersHexAll:
04056F CD B9 04 04 0716*       call dumpRegistersHex
040573 08          0717*       ex af,af'
040574 D9          0718*       exx
040575 CD B9 04 04 0719*       call dumpRegistersHex
040579 08          0720*       ex af,af'
04057A D9          0721*       exx
04057B C9          0722*       ret
04057C             0723*   
04057C             0724*   ; print hlu to screen in hexidecimal format
04057C             0725*   ; inputs: none
04057C             0726*   ; destroys: nothing
04057C             0727*   print_hex_hl:
04057C F5          0728*       push af
04057D E5          0729*       push hl
04057E 21 CA 05 04 0730*       ld hl,str_hlu
040582 CD 07 01 04 0731*       call printString
040586 E1          0732*       pop hl
040587 E5          0733*       push hl
040588 CD 27 01 04 0734*       call printHex24
04058C 3E 20       0735*       ld a,' '
04058E 5B D7       0736*       rst.lil 10h
040590 E1          0737*       pop hl
040591 F1          0738*       pop af
040592 C9          0739*       ret
040593             0740*   
040593             0741*   ; print bcu to screen in hexidecimal format
040593             0742*   ; inputs: none
040593             0743*   ; destroys: nothing
040593             0744*   print_hex_bc:
040593 F5          0745*       push af
040594 E5          0746*       push hl
040595 C5          0747*       push bc
040596 21 CF 05 04 0748*       ld hl,str_bcu
04059A CD 07 01 04 0749*       call printString
04059E E1          0750*       pop hl
04059F E5          0751*       push hl
0405A0 CD 27 01 04 0752*       call printHex24
0405A4 3E 20       0753*       ld a,' '
0405A6 5B D7       0754*       rst.lil 10h
0405A8 C1          0755*       pop bc
0405A9 E1          0756*       pop hl
0405AA F1          0757*       pop af
0405AB C9          0758*       ret
0405AC             0759*   
0405AC             0760*   ; print deu to screen in hexidecimal format
0405AC             0761*   ; inputs: none
0405AC             0762*   ; destroys: nothing
0405AC             0763*   print_hex_de:
0405AC F5          0764*       push af
0405AD E5          0765*       push hl
0405AE D5          0766*       push de
0405AF 21 D4 05 04 0767*       ld hl,str_deu
0405B3 CD 07 01 04 0768*       call printString
0405B7 E1          0769*       pop hl
0405B8 E5          0770*       push hl
0405B9 CD 27 01 04 0771*       call printHex24
0405BD 3E 20       0772*       ld a,' '
0405BF 5B D7       0773*       rst.lil 10h
0405C1 D1          0774*       pop de
0405C2 E1          0775*       pop hl
0405C3 F1          0776*       pop af
0405C4 C9          0777*       ret
0405C5             0778*   
0405C5 20 61 66 3D 0779*   str_afu: db " af=",0
       00          
0405CA 20 68 6C 3D 0780*   str_hlu: db " hl=",0
       00          
0405CF 20 62 63 3D 0781*   str_bcu: db " bc=",0
       00          
0405D4 20 64 65 3D 0782*   str_deu: db " de=",0
       00          
0405D9 20 69 78 3D 0783*   str_ixu: db " ix=",0
       00          
0405DE 20 69 79 3D 0784*   str_iyu: db " iy=",0
       00          
0405E3             0785*   
0405E3             0786*   ; print udeuhl to screen in hexidecimal format
0405E3             0787*   ; inputs: none
0405E3             0788*   ; outputs: concatenated hexidecimal udeuhl
0405E3             0789*   ; destroys: nothing
0405E3             0790*   dumpUDEUHLHex:
0405E3             0791*   ; store everything in scratch
0405E3 22 42 06 04 0792*       ld (uhl),hl
0405E7 ED 43 45 06 0793*       ld (ubc),bc
       04          
0405EC ED 53 48 06 0794*       ld (ude),de
       04          
0405F1 DD 22 4B 06 0795*       ld (uix),ix
       04          
0405F6 FD 22 4E 06 0796*       ld (uiy),iy
       04          
0405FB F5          0797*       push af
0405FC             0798*   
0405FC             0799*   ; print each register
0405FC             0800*   
0405FC 21 36 06 04 0801*       ld hl,str_udeuhl
040600 CD 07 01 04 0802*       call printString
040604 2A 48 06 04 0803*       ld hl,(ude)
040608 CD 27 01 04 0804*       call printHex24
04060C 3E 2E       0805*       ld a,'.' ; print a dot to separate the values
04060E 5B D7       0806*       rst.lil 10h
040610 2A 42 06 04 0807*       ld hl,(uhl)
040614 CD 27 01 04 0808*       call printHex24
040618 CD 1C 01 04 0809*       call printNewLine
04061C             0810*   
04061C             0811*   ; restore everything
04061C 2A 42 06 04 0812*       ld hl, (uhl)
040620 ED 4B 45 06 0813*       ld bc, (ubc)
       04          
040625 ED 5B 48 06 0814*       ld de, (ude)
       04          
04062A DD 2A 4B 06 0815*       ld ix, (uix)
       04          
04062F FD 2A 4E 06 0816*       ld iy, (uiy)
       04          
040634 F1          0817*       pop af
040635             0818*   ; all done
040635 C9          0819*       ret
040636             0820*   
040636 75 64 65 2E 0821*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04063F             0822*   
04063F             0823*   ; global scratch memory for registers
04063F 00 00 00    0824*   uaf: dl 0
040642 00 00 00    0825*   uhl: dl 0
040645 00 00 00    0826*   ubc: dl 0
040648 00 00 00    0827*   ude: dl 0
04064B 00 00 00    0828*   uix: dl 0
04064E 00 00 00    0829*   uiy: dl 0
040651 00 00 00    0830*   usp: dl 0
040654 00 00 00    0831*   upc: dl 0
040657             0832*   
040657             0833*   ; inputs: whatever is in the flags register
040657             0834*   ; outputs: binary representation of flags
040657             0835*   ;          with a header so we know which is what
040657             0836*   ; destroys: nothing
040657             0837*   ; preserves: everything
040657             0838*   dumpFlags:
040657             0839*   ; first we curse zilog for not giving direct access to flags
040657 F5          0840*       push af ; this is so we can send it back unharmed
040658 F5          0841*       push af ; this is so we can pop it to hl
040659             0842*   ; store everything in scratch
040659 22 42 06 04 0843*       ld (uhl),hl
04065D ED 43 45 06 0844*       ld (ubc),bc
       04          
040662 ED 53 48 06 0845*       ld (ude),de
       04          
040667 DD 22 4B 06 0846*       ld (uix),ix
       04          
04066C FD 22 4E 06 0847*       ld (uiy),iy
       04          
040671             0848*   ; next we print the header
040671 21 9D 06 04 0849*       ld hl,@header
040675 CD 07 01 04 0850*       call printString
040679 E1          0851*       pop hl ; flags are now in l
04067A 7D          0852*       ld a,l ; flags are now in a
04067B CD A8 03 04 0853*       call printBin8
04067F CD 1C 01 04 0854*       call printNewLine
040683             0855*   ; restore everything
040683 2A 42 06 04 0856*       ld hl, (uhl)
040687 ED 4B 45 06 0857*       ld bc, (ubc)
       04          
04068C ED 5B 48 06 0858*       ld de, (ude)
       04          
040691 DD 2A 4B 06 0859*       ld ix, (uix)
       04          
040696 FD 2A 4E 06 0860*       ld iy, (uiy)
       04          
04069B F1          0861*       pop af ; send her home the way she came
04069C C9          0862*       ret
04069D             0863*   ; Bit 7 (S): Sign flag
04069D             0864*   ; Bit 6 (Z): Zero flag
04069D             0865*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04069D             0866*   ; Bit 4 (H): Half Carry flag
04069D             0867*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04069D             0868*   ; Bit 2 (PV): Parity/Overflow flag
04069D             0869*   ; Bit 1 (N): Subtract flag
04069D             0870*   ; Bit 0 (C): Carry flag
04069D 53 5A 78 48 0871*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0406A8             0872*   
0406A8             0873*   ; set all the bits in the flag register
0406A8             0874*   ; more of an academic exercise than anything useful
0406A8             0875*   ; inputs; none
0406A8             0876*   ; outputs; a=0,f=255
0406A8             0877*   ; destroys: flags, hl
0406A8             0878*   ; preserves: a, because why not
0406A8             0879*   setAllFlags:
0406A8 21 FF 00 00 0880*       ld hl,255
0406AC 67          0881*       ld h,a ; four cycles to preserve a is cheap
0406AD E5          0882*       push hl
0406AE F1          0883*       pop af
0406AF C9          0884*       ret
0406B0             0885*   
0406B0             0886*   ; reset all the bits in the flag register
0406B0             0887*   ; unlike its inverse counterpart, this may actually be useful
0406B0             0888*   ; inputs; none
0406B0             0889*   ; outputs; a=0,f=0
0406B0             0890*   ; destroys: flags, hl
0406B0             0891*   ; preserves: a, because why not
0406B0             0892*   resetAllFlags:
0406B0 21 00 00 00 0893*       ld hl,0
0406B4 67          0894*       ld h,a ; four cycles to preserve a is cheap
0406B5 E5          0895*       push hl
0406B6 F1          0896*       pop af
0406B7 C9          0897*       ret
0406B8             0898*   
0406B8             0899*   ; wait until user presses a key
0406B8             0900*   ; inputs: none
0406B8             0901*   ; outputs: ascii code of key pressed in a
0406B8             0902*   ; destroys: af,ix
0406B8             0903*   waitKeypress:
0406B8             0904*       MOSCALL mos_getkey
0406B8 3E 00       0001*M1 			LD	A, function
0406BA 5B CF       0002*M1 			RST.LIL	08h
0406BC C9          0905*       ret
0406BD             0906*   
0406BD             0907*   ; print bytes from an address to the screen in hexidecimal format
0406BD             0908*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406BD             0909*   ; outputs: values of each byte printed to screen separated by spaces
0406BD             0910*   ; destroys: nothing
0406BD             0911*   dumpMemoryHex:
0406BD             0912*   ; save registers to the stack
0406BD C5          0913*       push bc
0406BE E5          0914*       push hl
0406BF F5          0915*       push af
0406C0             0916*   
0406C0             0917*   ; print the address and separator
0406C0 CD 27 01 04 0918*       call printHex24
0406C4 3E 3A       0919*       ld a,':'
0406C6 5B D7       0920*       rst.lil 10h
0406C8 3E 20       0921*       ld a,' '
0406CA 5B D7       0922*       rst.lil 10h
0406CC             0923*   
0406CC             0924*   ; set b to be our loop counter
0406CC F1          0925*       pop af
0406CD 47          0926*       ld b,a
0406CE E1          0927*       pop hl
0406CF E5          0928*       push hl
0406D0 F5          0929*       push af
0406D1             0930*   @loop:
0406D1             0931*   ; print the byte
0406D1 7E          0932*       ld a,(hl)
0406D2 CD 35 01 04 0933*       call printHex8
0406D6             0934*   ; print a space
0406D6 3E 20       0935*       ld a,' '
0406D8 5B D7       0936*       rst.lil 10h
0406DA 23          0937*       inc hl
0406DB 10 F4       0938*       djnz @loop
0406DD CD 1C 01 04 0939*       call printNewLine
0406E1             0940*   
0406E1             0941*   ; restore everything
0406E1 F1          0942*       pop af
0406E2 E1          0943*       pop hl
0406E3 C1          0944*       pop bc
0406E4             0945*   
0406E4             0946*   ; all done
0406E4 C9          0947*       ret
0406E5             0948*   
0406E5             0949*   
0406E5             0950*   ; print bytes from an address to the screen in binary format
0406E5             0951*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406E5             0952*   ; outputs: values of each byte printed to screen separated by spaces
0406E5             0953*   ; destroys: nothing
0406E5             0954*   dumpMemoryBin:
0406E5             0955*   ; save all registers to the stack
0406E5 F5          0956*       push af
0406E6 C5          0957*       push bc
0406E7 D5          0958*       push de
0406E8 E5          0959*       push hl
0406E9 DD E5       0960*       push ix
0406EB FD E5       0961*       push iy
0406ED             0962*   
0406ED             0963*   ; set b to be our loop counter
0406ED 47          0964*       ld b,a
0406EE             0965*   @loop:
0406EE             0966*   ; print the byte
0406EE 7E          0967*       ld a,(hl)
0406EF E5          0968*       push hl
0406F0 C5          0969*       push bc
0406F1 CD A8 03 04 0970*       call printBin8
0406F5 C1          0971*       pop bc
0406F6             0972*   ; print a space
0406F6 3E 20       0973*       ld a,' '
0406F8 5B D7       0974*       rst.lil 10h
0406FA E1          0975*       pop hl
0406FB 23          0976*       inc hl
0406FC 10 F0       0977*       djnz @loop
0406FE CD 1C 01 04 0978*       call printNewLine
040702             0979*   
040702             0980*   ; restore everything
040702 FD E1       0981*       pop iy
040704 DD E1       0982*       pop ix
040706 E1          0983*       pop hl
040707 D1          0984*       pop de
040708 C1          0985*       pop bc
040709 F1          0986*       pop af
04070A             0987*   ; all done
04070A C9          0988*       ret
04070B             0989*   
04070B             0990*   ; print bytes from an address to the screen in binary format
04070B             0991*   ; with the bits of each byte in reverse order (lsb first)
04070B             0992*   ; inputs: hl = address of first byte to print, a = number of bytes to print
04070B             0993*   ; outputs: values of each byte printed to screen separated by spaces
04070B             0994*   ; destroys: nothing
04070B             0995*   dumpMemoryBinRev:
04070B             0996*   ; save all registers to the stack
04070B F5          0997*       push af
04070C C5          0998*       push bc
04070D D5          0999*       push de
04070E E5          1000*       push hl
04070F DD E5       1001*       push ix
040711 FD E5       1002*       push iy
040713             1003*   
040713             1004*   ; set b to be our loop counter
040713 47          1005*       ld b,a
040714             1006*   @loop:
040714             1007*   ; print the byte
040714 7E          1008*       ld a,(hl)
040715 E5          1009*       push hl
040716 C5          1010*       push bc
040717 CD CD 03 04 1011*       call printBin8Rev
04071B C1          1012*       pop bc
04071C             1013*   ; print a space
04071C 3E 20       1014*       ld a,' '
04071E 5B D7       1015*       rst.lil 10h
040720 E1          1016*       pop hl
040721 23          1017*       inc hl
040722 10 F0       1018*       djnz @loop
040724 CD 1C 01 04 1019*       call printNewLine
040728             1020*   
040728             1021*   ; restore everything
040728 FD E1       1022*       pop iy
04072A DD E1       1023*       pop ix
04072C E1          1024*       pop hl
04072D D1          1025*       pop de
04072E C1          1026*       pop bc
04072F F1          1027*       pop af
040730             1028*   ; all done
040730 C9          1029*       ret
040731             1030*   
040731             1031*   ; clear a block of memory by writing a prescribed value to each byte in the range
040731             1032*   ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
040731             1033*   ; outputs: memory block is cleared
040731             1034*   ; destroys: hl, de
040731             1035*   clear_mem:
040731 0B          1036*       dec bc ; we do this because we will increment de before writing the first byte
040732 77          1037*       ld (hl),a
040733 E5          1038*       push hl
040734 D1          1039*       pop de
040735 13          1040*       inc de ; target address
040736 ED B0       1041*       ldir
040738 C9          1042*       ret
040739             0032        include "arith24.inc"
040739             0001*   ;------------------------------------------------------------------------
040739             0002*   ;  arith24.asm
040739             0003*   ;  24-bit ez80 arithmetic routines
040739             0004*   ;  Copyright (c) Shawn Sijnstra 2024
040739             0005*   ;  MIT license
040739             0006*   ;
040739             0007*   ;  This library was created as a tool to help make ez80
040739             0008*   ;  24-bit native assembly routines for simple mathematical problems
040739             0009*   ;  more widely available.
040739             0010*   ;
040739             0011*   ;------------------------------------------------------------------------
040739             0012*   
040739             0013*   ;------------------------------------------------------------------------
040739             0014*   ; umul24:	HL = HL*DE (unsigned)
040739             0015*   ; Preserves AF, BC, DE
040739             0016*   ; Uses a fast multiply routine.
040739             0017*   ;------------------------------------------------------------------------
040739             0018*   umul24:
040739 D5          0019*   	push	DE
04073A C5          0020*   	push	BC
04073B F5          0021*   	push	AF
04073C E5          0022*   	push	HL
04073D C1          0023*   	pop		BC
04073E 3E 18       0024*       ld	 	a, 24 ; No. of bits to process
040740 21 00 00 00 0025*       ld	 	hl, 0 ; Result
040744             0026*   umul24_lp:
040744 29          0027*   	add	hl,hl
040745 EB          0028*   	ex	de,hl
040746 29          0029*   	add	hl,hl
040747 EB          0030*   	ex	de,hl
040748 30 01       0031*   	jr	nc,umul24_nc
04074A 09          0032*   	add	hl,bc
04074B             0033*   umul24_nc:
04074B 3D          0034*   	dec	a
04074C 20 F6       0035*   	jr	nz,umul24_lp
04074E F1          0036*   	pop	af
04074F C1          0037*   	pop	bc
040750 D1          0038*   	pop	de
040751 C9          0039*   	ret
040752             0040*   
040752             0041*   
040752             0042*   ;------------------------------------------------------------------------
040752             0043*   ; udiv24
040752             0044*   ; Unsigned 24-bit division
040752             0045*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
040752             0046*   ;
040752             0047*   ; Uses AF BC DE HL
040752             0048*   ; Uses Restoring Division algorithm
040752             0049*   ;------------------------------------------------------------------------
040752             0050*   
040752             0051*   udiv24:
040752 E5          0052*   	push	hl
040753 C1          0053*   	pop		bc	;move dividend to BCU
040754 21 00 00 00 0054*   	ld		hl,0	;result
040758 A7          0055*   	and		a
040759 ED 52       0056*   	sbc		hl,de	;test for div by 0
04075B C8          0057*   	ret		z		;it's zero, carry flag is clear
04075C 19          0058*   	add		hl,de	;HL is 0 again
04075D 3E 18       0059*   	ld		a,24	;number of loops through.
04075F             0060*   udiv1:
04075F C5          0061*   	push	bc	;complicated way of doing this because of lack of access to top bits
040760 E3          0062*   	ex		(sp),hl
040761 37          0063*   	scf
040762 ED 6A       0064*   	adc	hl,hl
040764 E3          0065*   	ex	(sp),hl
040765 C1          0066*   	pop	bc		;we now have bc = (bc * 2) + 1
040766             0067*   
040766 ED 6A       0068*   	adc	hl,hl
040768 A7          0069*   	and	a		;is this the bug
040769 ED 52       0070*   	sbc	hl,de
04076B 30 02       0071*   	jr	nc,udiv2
04076D 19          0072*   	add	hl,de
04076E             0073*   ;	dec	c
04076E 0B          0074*   	dec	bc
04076F             0075*   udiv2:
04076F 3D          0076*   	dec	a
040770 20 ED       0077*   	jr	nz,udiv1
040772 37          0078*   	scf		;flag used for div0 error
040773 C5          0079*   	push	bc
040774 D1          0080*   	pop		de	;remainder
040775 C9          0081*   	ret
040776             0082*   
040776             0083*   
040776             0084*   
040776             0085*   ;------------------------------------------------------------------------
040776             0086*   ; neg24
040776             0087*   ; Returns: HLU = 0-HLU
040776             0088*   ; preserves all other registers
040776             0089*   ;------------------------------------------------------------------------
040776             0090*   neg24:
040776 D5          0091*   	push	de
040777 EB          0092*   	ex		de,hl
040778 21 00 00 00 0093*   	ld		hl,0
04077C B7          0094*   	or		a
04077D ED 52       0095*   	sbc		hl,de
04077F D1          0096*   	pop		de
040780 C9          0097*   	ret
040781             0098*   
040781             0099*   ;------------------------------------------------------------------------
040781             0100*   ; or_hlu_deu: 24 bit bitwise OR
040781             0101*   ; Returns: hlu = hlu OR deu
040781             0102*   ; preserves all other registers
040781             0103*   ;------------------------------------------------------------------------
040781             0104*   or_hlu_deu:
040781 22 0A 08 04 0105*   	ld	(bitbuf1),hl
040785 ED 53 0D 08 0106*   	ld	(bitbuf2),de
       04          
04078A D5          0107*   	push	de	;preserve DEU
04078B C5          0108*   	push	bc	;preserve BCU
04078C 06 03       0109*   	ld		b,3
04078E 21 0A 08 04 0110*   	ld	hl,bitbuf1
040792 11 0A 08 04 0111*   	ld	de,bitbuf1
040796             0112*   orloop_24:
040796 1A          0113*   	ld	a,(de)
040797 B6          0114*   	or	(hl)
040798 12          0115*   	ld	(de),a
040799 13          0116*   	inc	de
04079A 23          0117*   	inc	hl
04079B 10 F9       0118*   	djnz	orloop_24
04079D 2A 0D 08 04 0119*   	ld	hl,(bitbuf2)
0407A1 C1          0120*   	pop		bc	;restore BC
0407A2 D1          0121*   	pop		de	;restore DE
0407A3             0122*   
0407A3             0123*   ;------------------------------------------------------------------------
0407A3             0124*   ; and_hlu_deu: 24 bit bitwise AND
0407A3             0125*   ; Returns: hlu = hlu AND deu
0407A3             0126*   ; preserves all other registers
0407A3             0127*   ;------------------------------------------------------------------------
0407A3             0128*   and_hlu_deu:
0407A3 22 0A 08 04 0129*   	ld	(bitbuf1),hl
0407A7 ED 53 0D 08 0130*   	ld	(bitbuf2),de
       04          
0407AC D5          0131*   	push	de	;preserve DEU
0407AD C5          0132*   	push	bc	;preserve BCU
0407AE 06 03       0133*   	ld		b,3
0407B0 21 0A 08 04 0134*   	ld	hl,bitbuf1
0407B4 11 0A 08 04 0135*   	ld	de,bitbuf1
0407B8             0136*   andloop_24:
0407B8 1A          0137*   	ld	a,(de)
0407B9 A6          0138*   	and	(hl)
0407BA 12          0139*   	ld	(de),a
0407BB 13          0140*   	inc	de
0407BC 23          0141*   	inc	hl
0407BD 10 F9       0142*   	djnz	andloop_24
0407BF 2A 0D 08 04 0143*   	ld	hl,(bitbuf2)
0407C3 C1          0144*   	pop		bc	;restore BC
0407C4 D1          0145*   	pop		de	;restore DE
0407C5             0146*   
0407C5             0147*   ;------------------------------------------------------------------------
0407C5             0148*   ; xor_hlu_deu: 24 bit bitwise XOR
0407C5             0149*   ; Returns: hlu = hlu XOR deu
0407C5             0150*   ; preserves all other registers
0407C5             0151*   ;------------------------------------------------------------------------
0407C5             0152*   xor_hlu_deu:
0407C5 22 0A 08 04 0153*   	ld	(bitbuf1),hl
0407C9 ED 53 0D 08 0154*   	ld	(bitbuf2),de
       04          
0407CE D5          0155*   	push	de	;preserve DEU
0407CF C5          0156*   	push	bc	;preserve BCU
0407D0 06 03       0157*   	ld		b,3
0407D2 21 0A 08 04 0158*   	ld	hl,bitbuf1
0407D6 11 0A 08 04 0159*   	ld	de,bitbuf1
0407DA             0160*   xorloop_24:
0407DA 1A          0161*   	ld	a,(de)
0407DB AE          0162*   	xor	(hl)
0407DC 12          0163*   	ld	(de),a
0407DD 13          0164*   	inc	de
0407DE 23          0165*   	inc	hl
0407DF 10 F9       0166*   	djnz	xorloop_24
0407E1 2A 0D 08 04 0167*   	ld	hl,(bitbuf2)
0407E5 C1          0168*   	pop		bc	;restore BC
0407E6 D1          0169*   	pop		de	;restore DE
0407E7             0170*   
0407E7             0171*   ;------------------------------------------------------------------------
0407E7             0172*   ; shl_hlu: 24 bit shift left hlu by a positions
0407E7             0173*   ; Returns: hlu = hlu << a
0407E7             0174*   ;		   a = 0
0407E7             0175*   ; NOTE: only considers a up to 16 bits.
0407E7             0176*   ; preserves all other registers
0407E7             0177*   ; modified by Brandon R. Gates to use a instead of de
0407E7             0178*   ;------------------------------------------------------------------------
0407E7             0179*   shl_hlu:
0407E7 B7          0180*   	or a
0407E8 C8          0181*   	ret		z		;we're done
0407E9 29          0182*   	add		hl,hl	;shift HLU left
0407EA 3D          0183*   	dec a
0407EB 18 FA       0184*   	jr		shl_hlu
0407ED             0185*   
0407ED             0186*   ;------------------------------------------------------------------------
0407ED             0187*   ; shr_hlu: 24 bit shift right hlu by a positions
0407ED             0188*   ; Returns: hlu = hlu >> a
0407ED             0189*   ;		   a = 0
0407ED             0190*   ; NOTE: only considers a up to 16 bits.
0407ED             0191*   ; preserves all other registers
0407ED             0192*   ; modified by Brandon R. Gates to use a instead of de
0407ED             0193*   ;------------------------------------------------------------------------
0407ED             0194*   shr_hlu:
0407ED 22 0A 08 04 0195*   	ld		(bitbuf1),hl
0407F1 21 0C 08 04 0196*   	ld		hl,bitbuf1+2
0407F5             0197*   @shr_loop:
0407F5 B7          0198*   	or a
0407F6 28 0D       0199*   	jr		z,@shr_done		;we're done
0407F8             0200*   ;carry is clear from or instruction
0407F8 CB 1E       0201*   	rr		(hl)
0407FA 2B          0202*   	dec		hl
0407FB CB 1E       0203*   	rr		(hl)
0407FD 2B          0204*   	dec		hl
0407FE CB 1E       0205*   	rr		(hl)
040800 23          0206*   	inc		hl
040801 23          0207*   	inc		hl
040802 3D          0208*   	dec a
040803 18 F0       0209*   	jr		@shr_loop
040805             0210*   @shr_done:
040805 2A 0A 08 04 0211*   	ld		hl,(bitbuf1)	;collect result
040809 C9          0212*   	ret
04080A             0213*   
04080A             0214*   ;------------------------------------------------------------------------
04080A             0215*   ; Scratch area for calculations
04080A             0216*   ;------------------------------------------------------------------------
04080A 00 00 00    0217*   bitbuf1:	dw24	0	;bit manipulation buffer 1
04080D 00 00 00    0218*   bitbuf2:	dw24	0	;bit manipulation buffer 2
040810             0219*   
040810             0220*   ; -----------------------------------------------------------------------
040810             0221*   ; Functions added by Brandon R. Gates
040810             0222*   ; -----------------------------------------------------------------------
040810             0223*   
040810             0224*   ;------------------------------------------------------------------------
040810             0225*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
040810             0226*   ;              Determines the LSB of A and shifts HLU accordingly.
040810             0227*   ;              HLU = HLU >> LSB(A)
040810             0228*   ; Returns: HLU = HLU >> LSB(A)
040810             0229*   ; Destroys: af
040810             0230*   ;------------------------------------------------------------------------
040810             0231*   shr_hlu_log2a:
040810 B7          0232*   	or a    ; check for zero
040811 C8          0233*   	ret z   ; nothing to shift so we're done
040812 C5          0234*   	push 	bc ; preserve
040813 06 00       0235*   	ld		b,0 ; clear b
040815             0236*   @find_bit:
040815 0F          0237*   	rrca ; bit 0 to carry
040816 DA 1F 08 04 0238*   	jp c,@found_bit
04081A 04          0239*   	inc b ; next bit
04081B C3 15 08 04 0240*   	jp @find_bit
04081F             0241*   @found_bit:
04081F 78          0242*   	ld a,b
040820 CD ED 07 04 0243*   	call shr_hlu
040824 C1          0244*   	pop 	bc ; restore
040825 C9          0245*   	ret
040826             0246*   ; end shr_hlu_log2a
040826             0247*   
040826             0248*   ;------------------------------------------------------------------------
040826             0249*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040826             0250*   ;                Determines the LSB of A and shifts HLU accordingly.
040826             0251*   ;                HLU = HLU << LSB(A)
040826             0252*   ; Returns: HLU = HLU << LSB(A)
040826             0253*   ; Destroys: af
040826             0254*   ;------------------------------------------------------------------------
040826             0255*   shl_hlu_log2a:
040826 B7          0256*   	or a    ; check for zero
040827 C8          0257*   	ret z   ; nothing to shift so we're done
040828 C5          0258*   	push 	bc ; preserve
040829 06 00       0259*   	ld		b,0 ; clear b
04082B             0260*   @find_bit:
04082B 0F          0261*   	rrca ; bit 0 to carry
04082C DA 35 08 04 0262*   	jp c,@found_bit
040830 04          0263*   	inc b ; next bit
040831 C3 2B 08 04 0264*   	jp @find_bit
040835             0265*   @found_bit:
040835 78          0266*   	ld a,b
040836 CD E7 07 04 0267*   	call shl_hlu
04083A C1          0268*   	pop 	bc ; restore
04083B C9          0269*   	ret
04083C             0270*   ; end shl_hlu_log2a
04083C             0033        include "maths.inc"
04083C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040900             0002*   
040900             0003*   ;------------------------------------------------------------------------
040900             0004*   ; Scratch area for calculations
040900             0005*   ;------------------------------------------------------------------------
040900 00 00 00    0006*   scratch1: dw24 0 ;bit manipulation buffer 1
040903 00 00 00    0007*   scratch2: dw24 0 ;bit manipulation buffer 2
040906             0008*   
040906             0009*   ; absolute value of hlu
040906             0010*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040906             0011*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040906             0012*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040906             0013*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040906             0014*   ; destroys: a
040906             0015*   hlu_abs:
040906 19          0016*       add hl,de
040907 B7          0017*       or a
040908 ED 52       0018*       sbc hl,de
04090A FA 0F 09 04 0019*       jp m,@is_neg
04090E C9          0020*       ret ; hlu is positive or zero so we're done
04090F             0021*   @is_neg:
04090F F5          0022*       push af ; otherwise, save current flags for return
040910 CD 16 09 04 0023*       call neg_hlu ; negate hlu
040914 F1          0024*       pop af ; get back flags
040915 C9          0025*       ret
040916             0026*   
040916             0027*   ; flip the sign of hlu
040916             0028*   ; inputs: hlu
040916             0029*   ; returns: 0-hlu, flags set appropriately for the result:
040916             0030*   ;         s1,z0,pv0,n1,c1 if result is negative
040916             0031*   ;         s0,z1,pv0,n1,c0 if result is zero
040916             0032*   ;         s0,z0,pv0,n1,c1 if result is positive
040916             0033*   ; destroys a
040916             0034*   neg_hlu:
040916 D5          0035*       push de ; save de
040917 EB          0036*       ex de,hl ; put hl into de
040918 21 00 00 00 0037*       ld hl,0 ; clear hl
04091C AF          0038*       xor a ; clear carry
04091D ED 52       0039*       sbc hl,de ; 0-hlu = -hlu
04091F D1          0040*       pop de ; get de back
040920 C9          0041*       ret ; easy peasy
040921             0042*   
040921             0043*   ;------------------------------------------------------------------------
040921             0044*   ; divide hlu by 2, inspired by above
040921             0045*   ;------------------------------------------------------------------------
040921             0046*   hlu_div2:
040921 22 00 09 04 0047*       ld (scratch1),hl
040925 21 02 09 04 0048*       ld hl,scratch1+2
040929 CB 1E       0049*       rr (hl)
04092B 2B          0050*       dec hl
04092C CB 1E       0051*       rr (hl)
04092E 2B          0052*       dec hl
04092F CB 1E       0053*       rr (hl)
040931 23          0054*       inc hl
040932 23          0055*       inc hl
040933 2A 00 09 04 0056*       ld hl,(scratch1)
040937 C9          0057*       ret
040938             0058*   
040938             0059*   ; this is my little hack to divide by 16
040938             0060*   hlu_div16:
040938 AF          0061*       xor a
040939 29          0062*       add hl,hl
04093A 17          0063*       rla
04093B 29          0064*       add hl,hl
04093C 17          0065*       rla
04093D 29          0066*       add hl,hl
04093E 17          0067*       rla
04093F 29          0068*       add hl,hl
040940 17          0069*       rla
040941 22 4E 09 04 0070*       ld (@scratch),hl
040945 32 51 09 04 0071*       ld (@scratch+3),a
040949 2A 4F 09 04 0072*       ld hl,(@scratch+1)
04094D C9          0073*       ret
04094E             0074*   @scratch: ds 4
040952             0075*   
040952             0076*   ; hlu signed division by 256
040952             0077*   ; returns: hlu / 256
040952             0078*   ; destroys: af
040952             0079*   hlu_sdiv256:
       FF FF FF FF 
040952 AF          0080*       xor a ; assume hl is positive
040953 22 69 09 04 0081*       ld (@buffer),hl
040957             0082*       SIGN_HLU
040957 19          0001*M1     add hl,de ; 1 cycle
040958 B7          0002*M1     or a ; clear flags ; 1 cycle
040959 ED 52       0003*M1     sbc hl,de ; 2 cycles
04095B             0004*M1     ; 4 cycles total
04095B F2 60 09 04 0083*       jp p,@hl_pos
04095F 3D          0084*       dec a
040960             0085*   @hl_pos:
040960 32 6C 09 04 0086*       ld (@buffer+3),a
040964 2A 6A 09 04 0087*       ld hl,(@buffer+1)
040968 C9          0088*       ret
040969             0089*   @buffer: ds 4
04096D             0090*   
04096D             0091*   ; hlu 1 byte right shift, unsigned
04096D             0092*   ; returns: hlu / 256, fractional portion in a
04096D             0093*   ; destroys: af
04096D             0094*   hlu_udiv256:
       FF FF FF FF 
04096D AF          0095*       xor a
04096E 32 7F 09 04 0096*       ld (@buffer+3),a
040972 7D          0097*       ld a,l ; save the fractional portion
040973 22 7C 09 04 0098*       ld (@buffer),hl
040977 2A 7D 09 04 0099*       ld hl,(@buffer+1)
04097B C9          0100*       ret
04097C             0101*   @buffer: ds 4
040980             0102*   
       FF FF FF FF 
040980 00 00 00 00 0103*   add_bcd_arg1: db #00,#00,#00,#00
040984 00 00 00 00 0104*   add_bcd_arg2: db #00,#00,#00,#00
040988             0105*   
040988             0106*   ; set bcd values in a scratch memory address from registers bcde
040988             0107*   ; input: hl; scratch address,bcde; 8-place bcd number
040988             0108*   ; destroys ; hl
040988             0109*   set_bcd:
040988 73          0110*       ld (hl),e
040989 23          0111*       inc hl
04098A 72          0112*       ld (hl),d
04098B 23          0113*       inc hl
04098C 71          0114*       ld (hl),c
04098D 23          0115*       inc hl
04098E 70          0116*       ld (hl),b
04098F C9          0117*       ret
040990             0118*   
040990             0119*   ; load bcd values from a scratch memory address to bcde
040990             0120*   ; input: hl; scratch address
040990             0121*   ; output: bcde; 8-place bcd number
040990             0122*   ; destroys: hl
040990             0123*   get_bcd:
040990 5E          0124*       ld e,(hl)
040991 23          0125*       inc hl
040992 56          0126*       ld d,(hl)
040993 23          0127*       inc hl
040994 4E          0128*       ld c,(hl)
040995 23          0129*       inc hl
040996 46          0130*       ld b,(hl)
040997 C9          0131*       ret
040998             0132*   
040998             0133*   ; BCD addition
040998             0134*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040998             0135*   ;       a is the number of bytes holding each number (number of places/2)
040998             0136*   ; outputs: (hl) + (de) --> (hl)
040998             0137*   ; destroys: a,b,de,hl
040998             0138*   add_bcd:
040998 47          0139*       ld b,a ; loop counter
040999 AF          0140*       xor a ; reset a, clear carry flag
04099A             0141*   adcec:
04099A 1A          0142*       ld a,(de) ; addend to acc
04099B 8E          0143*       adc a,(hl) ; add (hl) to acc
04099C 27          0144*       daa ; adjust result to bcd
04099D 77          0145*       ld (hl),a ; store result
04099E 23          0146*       inc hl ; advance memory pointers
04099F 13          0147*       inc de
0409A0 10 F8       0148*       djnz adcec ; loop until b == 0
0409A2 C9          0149*       ret
0409A3             0150*   
0409A3             0151*   ; BCD subtraction
0409A3             0152*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0409A3             0153*   ;       a is the number of bytes holding each number (number of places/2)
0409A3             0154*   ; outputs: (hl) - (de) --> (hl)
0409A3             0155*   ; destroys: a,b,de,hl
0409A3             0156*   sub_bcd:
0409A3 47          0157*       ld b,a ; loop counter
0409A4 AF          0158*       xor a ; reset a,clear carry flag
0409A5             0159*   subdec:
0409A5 1A          0160*       ld a,(de) ; subtrahend to acc
0409A6 9E          0161*       sbc a,(hl) ; subtract (hl) from acc
0409A7 27          0162*       daa ; adjust result to bcd
0409A8 77          0163*       ld (hl),a ; store result
0409A9 23          0164*       inc hl ; advance memory pointers
0409AA 13          0165*       inc de
0409AB 10 F8       0166*       djnz subdec ; loop until b == 0
0409AD C9          0167*       ret
0409AE             0168*   
0409AE             0169*   ; http://www.z80.info/pseudo-random.txt
0409AE             0170*   rand_8:
0409AE C5          0171*       push bc
0409AF 3A C2 09 04 0172*       ld a,(r_seed)
0409B3 4F          0173*       ld c,a
0409B4             0174*   
0409B4 0F          0175*       rrca ; multiply by 32
0409B5 0F          0176*       rrca
0409B6 0F          0177*       rrca
0409B7 EE 1F       0178*       xor 0x1f
0409B9             0179*   
0409B9 81          0180*       add a,c
0409BA DE FF       0181*       sbc a,255 ; carry
0409BC             0182*   
0409BC 32 C2 09 04 0183*       ld (r_seed),a
0409C0 C1          0184*       pop bc
0409C1 C9          0185*       ret
0409C2 50          0186*   r_seed: defb $50
0409C3             0187*   
0409C3             0188*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
0409C3             0189*   prng24:
0409C3             0190*   ;;Expects ADL mode.
0409C3             0191*   ;;Output: HL
0409C3             0192*   ;;50cc
0409C3             0193*   ;;33 bytes
0409C3             0194*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
0409C3 ED 5B E4 09 0195*       ld de,(seed1)
       04          
0409C8 B7          0196*       or a
0409C9 ED 62       0197*       sbc hl,hl
0409CB 19          0198*       add hl,de
0409CC 29          0199*       add hl,hl
0409CD 29          0200*       add hl,hl
0409CE 2C          0201*       inc l
0409CF 19          0202*       add hl,de
0409D0 22 E4 09 04 0203*       ld (seed1),hl
0409D4 2A E7 09 04 0204*       ld hl,(seed2)
0409D8 29          0205*       add hl,hl
0409D9 9F          0206*       sbc a,a
0409DA E6 1B       0207*       and %00011011
0409DC AD          0208*       xor l
0409DD 6F          0209*       ld l,a
0409DE 22 E7 09 04 0210*       ld (seed2),hl
0409E2 19          0211*       add hl,de
0409E3 C9          0212*       ret
0409E4 00 00 00    0213*   seed1: dl 0
0409E7 00 00 00    0214*   seed2: dl 0
0409EA             0034        include "files.inc"
0409EA             0001*   ; load to onboard 8k sram
0409EA             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
0409EA             0035        include "fixed168.inc"
0409EA FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
040A00             0002*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040A00             0003*   ; uses EZ80 MLT instruction for speed
040A00             0004*   ; operation: UHL * A --> UHL
040A00             0005*   ; destroys: AF, HL
040A00             0006*   smul24x8:
040A00             0007*   ; make hl positive and store sign flag
040A00 CD 06 09 04 0008*       call hlu_abs
040A04 F5          0009*       push af
040A05             0010*   ; do the division
040A05 CD 10 0A 04 0011*       call mul24x8 ; hl = product
040A09             0012*   ; adjust sign of result
040A09 F1          0013*       pop af ; sign de
040A0A F0          0014*       ret p ; hl was positive, nothing to do
040A0B CD 16 09 04 0015*       call neg_hlu ; result is negative
040A0F C9          0016*       ret
040A10             0017*   
040A10             0018*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040A10             0019*   ; uses EZ80 MLT instruction for speed
040A10             0020*   ; operation: UHL * A --> AUHL
040A10             0021*   ; destroys: AF, HL
040A10             0022*   mul24x8:
040A10 D5          0023*       push de ; preserve de
040A11             0024*   ; low byte
040A11 5D          0025*       ld e,l
040A12 57          0026*       ld d,a
040A13 ED 5C       0027*       mlt de
040A15 6B          0028*       ld l,e ; product low byte
040A16 08          0029*       ex af,af' ; save multiplier
040A17 7A          0030*       ld a,d ; carry
040A18 08          0031*       ex af,af' ; save carry, restore multiplier
040A19             0032*   ; high byte
040A19 5C          0033*       ld e,h
040A1A 57          0034*       ld d,a
040A1B ED 5C       0035*       mlt de
040A1D 08          0036*       ex af,af' ; save multiplier, restore carry
040A1E 83          0037*       add a,e ; add carry
040A1F 67          0038*       ld h,a ; product middle byte
040A20 7A          0039*       ld a,d ; carry
040A21 08          0040*       ex af,af' ; save carry, restore multiplier
040A22             0041*   ; upper byte
040A22 22 3D 0A 04 0042*       ld (@scratch),hl ; 7 cycles
040A26 5F          0043*       ld e,a
040A27 3A 3F 0A 04 0044*       ld a,(@scratch+2)
040A2B 57          0045*       ld d,a
040A2C ED 5C       0046*       mlt de
040A2E 08          0047*       ex af,af' ; restore carry
040A2F 8B          0048*       adc a,e ; add carry
040A30 32 3F 0A 04 0049*       ld (@scratch+2),a ; 5 cycles
040A34 2A 3D 0A 04 0050*       ld hl,(@scratch) ; 7 cycles
040A38             0051*   ; highest byte
040A38 3E 00       0052*       ld a,0 ; preserve carry flag
040A3A 8A          0053*       adc a,d ; product highest byte
040A3B D1          0054*       pop de ; restore de
040A3C C9          0055*       ret
040A3D             0056*   @scratch: ds 3
040A40             0057*   
       FF FF FF 
040A40 00 00 00 00 0058*   mul24out: blkb 6,0
       00 00       
040A46             0059*   
040A46             0060*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040A46             0061*   ; operation: UHL * UDE --> mul24out
040A46             0062*   mul24:
040A46 DD E5       0063*       push ix ; preserve
040A48             0064*   ; point to output buffer and clear it
040A48 DD 21 40 0A 0065*       ld ix,mul24out
       04          
040A4D C5          0066*       push bc
040A4E 01 00 00 00 0067*       ld bc,0
040A52 DD 0F 00    0068*       ld (ix),bc
040A55 DD 0F 03    0069*       ld (ix+3),bc
040A58 C1          0070*       pop bc
040A59             0071*   ; STEP 1: UHL * E
040A59 7B          0072*       ld a,e
040A5A E5          0073*       push hl
040A5B CD 10 0A 04 0074*       call mul24x8
040A5F DD 2F 00    0075*       ld (ix+0),hl
040A62 DD 77 03    0076*       ld (ix+3),a
040A65             0077*   ; STEP 2: UHL * D
040A65 E1          0078*       pop hl
040A66 E5          0079*       push hl
040A67 7A          0080*       ld a,d
040A68 CD 10 0A 04 0081*       call mul24x8
040A6C CD 85 0A 04 0082*       call @accumulate
040A70             0083*   ; STEP 3: UHL * DEU
040A70 E1          0084*       pop hl
040A71 ED 53 B5 0A 0085*       ld (@de),de
       04          
040A76 3A B7 0A 04 0086*       ld a,(@de+2)
040A7A CD 10 0A 04 0087*       call mul24x8
040A7E CD 85 0A 04 0088*       call @accumulate
040A82             0089*   ; all done
040A82 DD E1       0090*       pop ix ; restore
040A84 C9          0091*       ret
040A85             0092*   @accumulate:
040A85 DD 23       0093*       inc ix
040A87             0094*   ; highest byte of product to carry
040A87 DD 77 03    0095*       ld (ix+3),a
040A8A             0096*   ; low byte of product
040A8A 7D          0097*       ld a,l
040A8B DD 86 00    0098*       add a,(ix+0)
040A8E DD 77 00    0099*       ld (ix+0),a
040A91             0100*   ; high byte of product
040A91 7C          0101*       ld a,h
040A92 DD 8E 01    0102*       adc a,(ix+1)
040A95 DD 77 01    0103*       ld (ix+1),a
040A98             0104*   ; uppper byte of product
040A98 22 B2 0A 04 0105*       ld (@hl),hl
040A9C 3A B4 0A 04 0106*       ld a,(@hl+2)
040AA0 DD 8E 02    0107*       adc a,(ix+2)
040AA3 DD 77 02    0108*       ld (ix+2),a
040AA6             0109*   ; carry
040AA6 3E 00       0110*       ld a,0 ; preserve flags
040AA8 DD 8E 03    0111*       adc a,(ix+3)
040AAB DD 77 03    0112*       ld (ix+3),a
040AAE C9          0113*       ret
040AAF             0114*   
040AAF 00 00 00    0115*   @ix: dl 0
040AB2 00 00 00    0116*   @hl: dl 0
040AB5 00 00 00    0117*   @de: dl 0
040AB8             0118*   
040AB8             0119*   ; ; UHL * UDE --> UHL (unsigned)
040AB8             0120*   ; umul24:
040AB8             0121*   ;     call mul24
040AB8             0122*   ;     ld hl,(mul24out)
040AB8             0123*   ;     ret
040AB8             0124*   
040AB8             0125*   ; UH.L = UH.L*UD.E (unsigned)
040AB8             0126*   umul168:
040AB8 CD 46 0A 04 0127*       call mul24
040ABC 2A 41 0A 04 0128*       ld hl,(mul24out+1)
040AC0 C9          0129*       ret
040AC1             0130*   
040AC1             0131*   ; UH.L * UD.E --> UH.L (signed)
040AC1             0132*   smul168:
040AC1             0133*   ; make everything positive and store sign flags
040AC1 CD 06 09 04 0134*       call hlu_abs
040AC5 F5          0135*       push af
040AC6 EB          0136*       ex de,hl
040AC7 CD 06 09 04 0137*       call hlu_abs
040ACB EB          0138*       ex de,hl
040ACC F5          0139*       push af
040ACD             0140*   ; do the division
040ACD CD B8 0A 04 0141*       call umul168 ; hl = product
040AD1             0142*   ; adjust sign of result
040AD1 F1          0143*       pop af ; sign de
040AD2 FA DD 0A 04 0144*       jp m,@de_neg
040AD6 F1          0145*       pop af ; sign hl
040AD7 F0          0146*       ret p ; both positive, nothing to do
040AD8             0147*   @hl_neg:
040AD8 CD 16 09 04 0148*       call neg_hlu ; de pos, hl neg, result is negative
040ADC C9          0149*       ret
040ADD             0150*   @de_neg:
040ADD F1          0151*       pop af
040ADE F8          0152*       ret m ; both negative, nothing to do
040ADF CD 16 09 04 0153*       call neg_hlu ; result is negative
040AE3 C9          0154*       ret
040AE4             0155*   
040AE4             0156*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040AE4             0157*   ; perform unsigned division of 16.8 fixed place values
040AE4             0158*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
040AE4             0159*   udiv168:
040AE4             0160*   ; back up divisor
040AE4 ED 53 1B 0B 0161*       ld (@ude),de
       04          
040AE9             0162*   ; get the 16-bit integer part of the quotient
040AE9 CD 52 07 04 0163*       call udiv24 ; de = quotient, hl = remainder
040AED             0164*   ; load quotient to upper three bytes of output
040AED ED 53 22 0B 0165*       ld (div168_out+1),de
       04          
040AF2             0166*   @div256:
040AF2             0167*   ; multiply remainder by 256
040AF2             0168*       hlu_mul256
040AF2 29          0001*M1     add hl,hl ; * 2
040AF3 29          0002*M1     add hl,hl ; * 4
040AF4 29          0003*M1     add hl,hl ; * 8
040AF5 29          0004*M1     add hl,hl ; * 16
040AF6 29          0005*M1     add hl,hl ; * 32
040AF7 29          0006*M1     add hl,hl ; * 64
040AF8 29          0007*M1     add hl,hl ; * 128
040AF9 29          0008*M1     add hl,hl ; * 256
040AFA             0169*   ; skip fractional computation if remainder is zero
040AFA             0170*       SIGN_HLU
040AFA 19          0001*M1     add hl,de ; 1 cycle
040AFB B7          0002*M1     or a ; clear flags ; 1 cycle
040AFC ED 52       0003*M1     sbc hl,de ; 2 cycles
040AFE             0004*M1     ; 4 cycles total
040AFE 20 03       0171*       jr nz,@div_frac
040B00 AF          0172*       xor a
040B01 18 0A       0173*       jr @write_frac
040B03             0174*   ; now divide the shifted remainder by the divisor
040B03             0175*   @div_frac:
040B03 ED 5B 1B 0B 0176*       ld de,(@ude) ; get back divisor
       04          
040B08 CD 52 07 04 0177*       call udiv24 ; de = quotient, hl = remainder
040B0C             0178*   ; load low byte of quotient to low byte of output
040B0C 7B          0179*       ld a,e
040B0D             0180*   @write_frac:
040B0D 32 21 0B 04 0181*       ld (div168_out),a
040B11             0182*   ; load de with return value
040B11 ED 5B 21 0B 0183*       ld de,(div168_out)
       04          
040B16             0184*   ; load a with any overflow
040B16 3A 24 0B 04 0185*       ld a,(div168_out+3)
040B1A C9          0186*       ret ; ud.e is the 16.8 result
040B1B             0187*   @ude: ds 6
040B21             0188*   div168_out: ds 4 ; the extra byte is for overflow
040B25             0189*   
040B25             0190*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040B25             0191*   ; perform signed division of 16.8 fixed place values
040B25             0192*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040B25             0193*   sdiv168:
040B25             0194*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040B25 CD 06 09 04 0195*       call hlu_abs
040B29 F5          0196*       push af
040B2A EB          0197*       ex de,hl
040B2B CD 06 09 04 0198*       call hlu_abs
040B2F EB          0199*       ex de,hl
040B30 F5          0200*       push af
040B31             0201*   ; do the division
040B31 CD E4 0A 04 0202*       call udiv168 ; de = quotient, hl = remainder
040B35             0203*   ; adjust sign of result
040B35 F1          0204*       pop af ; sign de
040B36 FA 43 0B 04 0205*       jp m,@de_neg
040B3A F1          0206*       pop af ; sign hl
040B3B F0          0207*       ret p ; both positive, nothing to do
040B3C             0208*   @hl_neg:
040B3C EB          0209*       ex de,hl ; hl = quotient, de = remainder
040B3D CD 16 09 04 0210*       call neg_hlu ; de pos, hl neg, result is negative
040B41 EB          0211*       ex de,hl ; de = negated quotient, hl = remainder
040B42 C9          0212*       ret
040B43             0213*   @de_neg:
040B43 F1          0214*       pop af
040B44 F8          0215*       ret m ; both negative, nothing to do
040B45 EB          0216*       ex de,hl ; hl = quotient, de = remainder
040B46 CD 16 09 04 0217*       call neg_hlu ; result is negative
040B4A EB          0218*       ex de,hl ; de = negated quotient, hl = remainder
040B4B C9          0219*       ret
040B4C             0220*   
040B4C             0221*   ; convert signed angles from a 360 to 256 degree circle
040B4C             0222*   ; inputs: uh.l is the angle360 in 16.8 fixed format
040B4C             0223*   ; outputs: uh.l is the angle256 in 16.8 fixed format
040B4C             0224*   ; destroys: TODO
040B4C             0225*   deg_360_to_256:
040B4C D5          0226*       push de ; preserve de
040B4D             0227*   ; make angle positive and store sign flag
040B4D CD 06 09 04 0228*       call hlu_abs
040B51 F5          0229*       push af
040B52             0230*   ; multiply by coversion factor of 256/360
040B52 11 B6 00 00 0231*       ld de,0x0000B6 ; 0.711
040B56 CD B8 0A 04 0232*       call umul168 ; uh.l = uh.l * 0.711
040B5A             0233*   ; restore sign flag and adjust output accordingly
040B5A F1          0234*       pop af
040B5B F2 63 0B 04 0235*       jp p,@pos ; positive number
040B5F CD 16 09 04 0236*       call neg_hlu
040B63             0237*   @pos:
040B63             0238*   ; restore de and return uh.l as the result
040B63 D1          0239*       pop de
040B64 C9          0240*       ret
040B65             0241*   
040B65             0242*   ; convert signed angles from a 256 to 360 degree circle
040B65             0243*   ; inputs: uh.l is the angle256 in 16.8 fixed format
040B65             0244*   ; outputs: uh.l is the angle360 in 16.8 fixed format
040B65             0245*   ; destroys: TODO
040B65             0246*   deg_256_to_360:
040B65 D5          0247*       push de ; preserve de
040B66             0248*   ; make angle positive and store sign flag
040B66 CD 06 09 04 0249*       call hlu_abs
040B6A F5          0250*       push af
040B6B             0251*   ; multiply by coversion factor of 360/256
040B6B 11 68 01 00 0252*       ld de,0x000168 ; 1.406
040B6F CD B8 0A 04 0253*       call umul168 ; uh.l = uh.l * 1.406
040B73             0254*   ; restore sign flag and adjust output accordingly
040B73 F1          0255*       pop af
040B74 F2 7C 0B 04 0256*       jp p,@pos ; positive number
040B78 CD 16 09 04 0257*       call neg_hlu
040B7C             0258*   @pos:
040B7C             0259*   ; restore de and return uh.l as the result
040B7C D1          0260*       pop de
040B7D C9          0261*       ret
040B7E             0262*   
040B7E             0263*   ; fixed 16.8 routine
040B7E             0264*   ; cos(uh.l) --> uh.l
040B7E             0265*   ; destroys: f, hl
040B7E             0266*   cos168:
040B7E D5          0267*       push de ; preserve de
040B7F             0268*   ; for cos we simply increment the angle by 90 degrees
040B7F             0269*   ; or 0x004000 in 16.8 degrees256
040B7F             0270*   ; which makes it a sin problem
040B7F 11 00 40 00 0271*       ld de,0x004000
040B83 19          0272*       add hl,de ; modulo 256 happens below
040B84 D1          0273*       pop de ; restore de
040B85             0274*   ; fall through to sin168
040B85             0275*   
040B85             0276*   ; ---------------------
040B85             0277*   ; fixed 16.8 routine
040B85             0278*   ; sin(uh.l) --> uh.l
040B85             0279*   ; destroys: f, hl
040B85             0280*   sin168:
040B85 D5          0281*       push de
040B86             0282*   ; handle negative angles appropriately
040B86 CD 06 09 04 0283*       call hlu_abs
040B8A F2 93 0B 04 0284*       jp p,@F
040B8E 11 00 00 FF 0285*       ld de,-256*256
040B92 19          0286*       add hl,de
040B93             0287*   @@:
040B93 2E 03       0288*       ld l,3 ; multiply by 3 to get our lookup index
040B95 ED 6C       0289*       mlt hl
040B97 11 4B 0E 04 0290*       ld de,sin_lut_168 ; grab the lut address
040B9B 19          0291*       add hl,de ; bump hl by the index
040B9C ED 27       0292*       ld hl,(hl) ; don't try this on a z80!
040B9E D1          0293*       pop de
040B9F C9          0294*       ret
040BA0             0295*   
040BA0             0296*   ; 16.8 fixed inputs / outputs
040BA0             0297*   ; takes: uh.l as angle in degrees 256
040BA0             0298*   ;        ud.e as radius
040BA0             0299*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
040BA0             0300*   ;        displacements from origin (0,0)
040BA0             0301*   ; destroys: everything except indexes
040BA0             0302*   polar_to_cartesian:
040BA0             0303*   ; back up input parameters
040BA0 22 CF 0B 04 0304*       ld (@angle), hl
040BA4 ED 53 D2 0B 0305*       ld (@radius), de
       04          
040BA9             0306*   ; compute dx = sin(uh.l) * ud.e
040BA9 CD 85 0B 04 0307*       call sin168 ; uh.l = sin(uh.l)
040BAD ED 5B D2 0B 0308*       ld de,(@radius)
       04          
040BB2 CD C1 0A 04 0309*       call smul168 ; uh.l = dx
040BB6 E5          0310*       push hl
040BB7             0311*   ; compute dy = -cos(uh.l) * ud.e
040BB7 2A CF 0B 04 0312*       ld hl,(@angle)
040BBB CD 7E 0B 04 0313*       call cos168 ; uh.l = cos(uh.l)
040BBF ED 5B D2 0B 0314*       ld de,(@radius)
       04          
040BC4 CD C1 0A 04 0315*       call smul168 ; uh.l = dy
040BC8 CD 16 09 04 0316*       call neg_hlu ; invert dy for screen coords convention
040BCC EB          0317*       ex de,hl ; de = dy for output
040BCD C1          0318*       pop bc ; bc = dx for output
040BCE             0319*   ; and out
040BCE C9          0320*       ret
040BCF             0321*   @angle: ds 3
040BD2             0322*   @radius: ds 3
040BD5             0323*   
040BD5             0324*   ; 16.8 fixed inputs / outputs
040BD5             0325*   ; inputs: ub.c as dx, ud.e as dy
040BD5             0326*   ;        displacements from origin (0,0)
040BD5             0327*   ; returns: uh.l as angle in degrees 256
040BD5             0328*   ;        ud.e as radius
040BD5             0329*   ; destroys: everything except indexes
040BD5             0330*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040BD5 ED 43 2E 0C 0331*       ld (dx168),bc ; dx argument for distance168
       04          
040BDA ED 53 34 0C 0332*       ld (dy168),de ; dy argument for distance168
       04          
040BDF             0333*   ; compute radius
040BDF CD 3A 0C 04 0334*       call distance168 ; uh.l = radius
040BE3 E5          0335*       push hl ; save radius
040BE4             0336*   ; compute angle
040BE4 ED 4B 2E 0C 0337*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040BE9 ED 5B 34 0C 0338*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040BEE CD 9A 0C 04 0339*       call atan2_168fast ; uh.l = angle
040BF2             0340*   ; return result
040BF2 D1          0341*       pop de ; de = radius (was hl)
040BF3 C9          0342*       ret
040BF4             0343*   ; end cartesian_to_polar
040BF4             0344*   
040BF4             0345*   ; 16.8 fixed inputs / outputs
040BF4             0346*   ; inputs: ub.c as dx, ud.e as dy
040BF4             0347*   ;        displacements from origin (0,0)
040BF4             0348*   ; returns: uh.l as angle in degrees 256
040BF4             0349*   ;        ud.e as radius
040BF4             0350*   ; destroys: everything except indexes
040BF4             0351*   ; note: uses distance168sm which is more accurate for small deltas
040BF4             0352*   cartesian_to_polar_sm:
040BF4 ED 43 2E 0C 0353*       ld (dx168),bc ; dx argument for distance168
       04          
040BF9 ED 53 34 0C 0354*       ld (dy168),de ; dy argument for distance168
       04          
040BFE             0355*   ; compute radius
040BFE CD 75 0C 04 0356*       call distance168sm ; uh.l = radius
040C02 E5          0357*       push hl ; save radius
040C03             0358*   ; compute angle
040C03 ED 4B 2E 0C 0359*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040C08 ED 5B 34 0C 0360*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040C0D CD 9A 0C 04 0361*       call atan2_168fast ; uh.l = angle
040C11             0362*   ; return result
040C11 D1          0363*       pop de ; de = radius (was hl)
040C12 C9          0364*       ret
040C13             0365*   ; end cartesian_to_polar
040C13             0366*   
040C13             0367*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040C13             0368*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040C13             0369*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040C13             0370*   ;         also populates scratch locations dx168 and dy168
040C13             0371*   ; destroys: a,hl,bc,de
040C13             0372*   dxy168:
040C13             0373*   ; compute dx = x1-x0
040C13 AF          0374*       xor a ; clear carry
040C14 DD E5       0375*       push ix ; move ix to hl via the stack
040C16 E1          0376*       pop hl ; hl = x1
040C17 ED 42       0377*       sbc hl,bc ; hl = dx
040C19 22 2E 0C 04 0378*       ld (dx168),hl ; dx to scratch
040C1D             0379*   ; compute dy = y1-y0
040C1D AF          0380*       xor a ; clear carry
040C1E FD E5       0381*       push iy ; move iy to hl via the stack
040C20 E1          0382*       pop hl ; hl = y1
040C21 ED 52       0383*       sbc hl,de ; hl = dy
040C23 22 34 0C 04 0384*       ld (dy168),hl ; dy to scratch
040C27             0385*   ; populate output registers and return
040C27 EB          0386*       ex de,hl ; ud.e = dy
040C28 ED 4B 2E 0C 0387*       ld bc,(dx168) ; ub.c = dx
       04          
040C2D C9          0388*       ret
040C2E 00 00 00 00 0389*   dx168: blkb 6,0
       00 00       
040C34 00 00 00 00 0390*   dy168: blkb 6,0
       00 00       
040C3A             0391*   
040C3A             0392*   ; compute the euclidian distance between two cartesian coordinates
040C3A             0393*   ; using the formula d = sqrt(dx^2+dy^2)
040C3A             0394*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C3A             0395*   ; output; uh.l is the 16.8 fixed format distance
040C3A             0396*   ;         also populates scratch locations dx168 and dy168
040C3A             0397*   ; destroys: a,hl,bc,de
040C3A             0398*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
040C3A             0399*   ;       thus the result will always be an integer, albeit in 16.8 format
040C3A             0400*   distance168:
040C3A             0401*   ; compute dy^2
040C3A 2A 34 0C 04 0402*       ld hl,(dy168)
040C3E CD 06 09 04 0403*       call hlu_abs
040C42             0404*       ; call hlu_udiv256 ; make integer to avoid overflow
040C42             0405*       SRL_UHL ; make integer to avoid overflow
040C42 3B          0001*M1     dec sp ; 1 cycle
040C43 E5          0002*M1     push hl ; 4 cycles
040C44 33          0003*M1     inc sp ; 1 cycle
040C45 E1          0004*M1     pop hl ; 4 cycles
040C46 23          0005*M1     inc hl ; 1 cycle
040C47 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040C49             0007*M1     ; 13 cycles total
040C49 E5          0406*       push hl
040C4A D1          0407*       pop de
040C4B CD 39 07 04 0408*       call umul24 ; hl = dy^2
040C4F E5          0409*       push hl ; save dy^2
040C50             0410*   ; compute dx^2
040C50 2A 2E 0C 04 0411*       ld hl,(dx168)
040C54 CD 06 09 04 0412*       call hlu_abs
040C58             0413*       ; call hlu_udiv256 ; make integer to avoid overflow
040C58             0414*       SRL_UHL ; make integer to avoid overflow
040C58 3B          0001*M1     dec sp ; 1 cycle
040C59 E5          0002*M1     push hl ; 4 cycles
040C5A 33          0003*M1     inc sp ; 1 cycle
040C5B E1          0004*M1     pop hl ; 4 cycles
040C5C 23          0005*M1     inc hl ; 1 cycle
040C5D 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040C5F             0007*M1     ; 13 cycles total
040C5F E5          0415*       push hl
040C60 D1          0416*       pop de
040C61 CD 39 07 04 0417*       call umul24 ; hl = dx^2
040C65             0418*   ; add dx^2 and dy^2
040C65 D1          0419*       pop de ; de = dy^2 (was hl)
040C66 19          0420*       add hl,de ; hl = dx^2 + dy^2
040C67             0421*   ; compute the square root
040C67 CD 65 0D 04 0422*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C6B EB          0423*       ex de,hl ; hl = distance
040C6C             0424*       hlu_mul256 ; convert back to 16.8 fixed
040C6C 29          0001*M1     add hl,hl ; * 2
040C6D 29          0002*M1     add hl,hl ; * 4
040C6E 29          0003*M1     add hl,hl ; * 8
040C6F 29          0004*M1     add hl,hl ; * 16
040C70 29          0005*M1     add hl,hl ; * 32
040C71 29          0006*M1     add hl,hl ; * 64
040C72 29          0007*M1     add hl,hl ; * 128
040C73 29          0008*M1     add hl,hl ; * 256
040C74 C9          0425*       ret
040C75             0426*   
040C75             0427*   ; compute the euclidian distance between two cartesian coordinates
040C75             0428*   ; using the formula d = sqrt(dx^2+dy^2)
040C75             0429*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C75             0430*   ; output; uh.l is the 16.8 fixed format distance
040C75             0431*   ;         also populates scratch locations dx168 and dy168
040C75             0432*   ; destroys: a,hl,bc,de
040C75             0433*   ; NOTE: sm means 'small' because it doesn't round down the deltas
040C75             0434*   ;       making it more accurate for small deltas,
040C75             0435*   ;       but will overflow if used for screen-sized deltas
040C75             0436*   distance168sm:
040C75             0437*   ; compute dy^2
040C75 2A 34 0C 04 0438*       ld hl,(dy168)
040C79 CD 06 09 04 0439*       call hlu_abs
040C7D E5          0440*       push hl
040C7E D1          0441*       pop de
040C7F CD 39 07 04 0442*       call umul24 ; hl = dy^2
040C83 E5          0443*       push hl ; save dy^2
040C84             0444*   ; compute dx^2
040C84 2A 2E 0C 04 0445*       ld hl,(dx168)
040C88 CD 06 09 04 0446*       call hlu_abs
040C8C E5          0447*       push hl
040C8D D1          0448*       pop de
040C8E CD 39 07 04 0449*       call umul24 ; hl = dx^2
040C92             0450*   ; add dx^2 and dy^2
040C92 D1          0451*       pop de ; de = dy^2 (was hl)
040C93 19          0452*       add hl,de ; hl = dx^2 + dy^2
040C94             0453*   ; compute the square root
040C94 CD 65 0D 04 0454*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C98 EB          0455*       ex de,hl ; hl = distance
040C99 C9          0456*       ret
040C9A             0457*   
040C9A             0458*   ; atan2_(ub.c,ud.e) --> uh.l
040C9A             0459*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040C9A             0460*   ;   whether inputs are integers or fractional doesn't matter
040C9A             0461*   ;   so long as the sign bit of the upper byte is correct
040C9A             0462*   ; output: uh.l is the 16.8 fixed angle in degrees 256
040C9A             0463*   ; angles are COMPASS HEADINGS based on
040C9A             0464*   ; screen coordinate conventions,where the y axis is flipped
040C9A             0465*   ; #E0 224      0       32 #20
040C9A             0466*   ;        -x,-y | +x,-y
040C9A             0467*   ; #C0 192------+------ 64 #40
040C9A             0468*   ;        -x,+y | +x,+y
040C9A             0469*   ; #A0 160   128 #80   96 #60
040C9A             0470*   atan2_168fast:
040C9A             0471*   ; get signs and make everything positive
040C9A             0472*   ; get abs(x) and store its original sign
040C9A C5          0473*       push bc
040C9B E1          0474*       pop hl
040C9C CD 06 09 04 0475*       call hlu_abs ; if x was negative this also sets the sign flag
040CA0 E5          0476*       push hl ; store abs(x)
040CA1 C1          0477*       pop bc ; bc = abs(x)
040CA2 F5          0478*       push af ; store sign of x
040CA3             0479*   ; get abs(y) and store its original sign
040CA3 EB          0480*       ex de,hl ; hl = y
040CA4 CD 06 09 04 0481*       call hlu_abs ; if y was negative this also sets the sign flag
040CA8 EB          0482*       ex de,hl ; de = abs(y)
040CA9 F5          0483*       push af ; store sign of y
040CAA             0484*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
040CAA             0485*   ; this ensures that our lookup value is between 0 and 1 inclusive
040CAA AF          0486*       xor a ; clear the carry flag
040CAB D5          0487*       push de
040CAC E1          0488*       pop hl
040CAD ED 42       0489*       sbc hl,bc
040CAF F5          0490*       push af ; save sign of de - bc
040CB0 F2 B9 0C 04 0491*       jp p,@1 ; bc <= de, so we skip ahead
040CB4             0492*   ; otherwise we swap bc and de
040CB4 C5          0493*       push bc
040CB5 E1          0494*       pop hl
040CB6 EB          0495*       ex de,hl
040CB7 E5          0496*       push hl
040CB8 C1          0497*       pop bc
040CB9             0498*   @1:
040CB9             0499*   ; now we're ready to snag our preliminary result
040CB9 C5          0500*       push bc
040CBA E1          0501*       pop hl
040CBB CD 29 0D 04 0502*       call atan_168fast ; uh.l comes back with prelim result
040CBF             0503*   ; now we adjust uh.l based on sign of de - bc
040CBF F1          0504*       pop af
040CC0 F2 CC 0C 04 0505*       jp p,@2 ; bc <= de,so we skip ahead
040CC4 EB          0506*       ex de,hl
040CC5 21 00 40 00 0507*       ld hl,64*256 ; subtract from 64 (90) degrees
040CC9 AF          0508*       xor a ; clear the carry flag
040CCA ED 52       0509*       sbc hl,de
040CCC             0510*   @2:
040CCC             0511*   ; adjust the result based on quadrant
040CCC             0512*   ; #E0 224      0       32 #20
040CCC             0513*   ;        -x,-y | +x,-y
040CCC             0514*   ; #C0 192------+------ 64 #40
040CCC             0515*   ;        -x,+y | +x,+y
040CCC             0516*   ; #A0 160   128 #80   96 #60
040CCC F1          0517*       pop af ; sign of y
040CCD CA 0A 0D 04 0518*       jp z,@y_zero
040CD1 F2 EA 0C 04 0519*       jp p,@y_pos
040CD5             0520*   ; y neg,check x
040CD5 F1          0521*       pop af ; sign of x
040CD6 CA E4 0C 04 0522*       jp z,@y_neg_x_zero
040CDA F2 E9 0C 04 0523*       jp p,@y_neg_x_pos
040CDE             0524*   ; y neg,x neg
040CDE             0525*   ; angle is 128 to 256 (270 to 360)
040CDE             0526*   ; negating the intermediate does the trick
040CDE CD 16 09 04 0527*       call neg_hlu
040CE2 18 31       0528*       jr @zero_hlu
040CE4             0529*   
040CE4             0530*   @y_neg_x_zero:
040CE4             0531*   ; y neg,x zero
040CE4             0532*   ; angle is 0
040CE4 21 00 00 00 0533*       ld hl,0
040CE8 C9          0534*       ret
040CE9             0535*   @y_neg_x_pos:
040CE9             0536*   ; y neg,x pos
040CE9             0537*   ; angle is 0 to 64 (0 to 90)
040CE9             0538*   ; so we're good
040CE9 C9          0539*       ret
040CEA             0540*   
040CEA             0541*   @y_pos:
040CEA F1          0542*       pop af ; sign of x
040CEB CA FA 0C 04 0543*       jp z,@y_pos_x_zero
040CEF F2 FF 0C 04 0544*       jp p,@y_pos_x_pos
040CF3             0545*   ; y pos,x neg
040CF3             0546*   ; angle is 128 to 192 (180-270)
040CF3             0547*   ; so we add 128 to intermediate
040CF3 11 00 80 00 0548*       ld de,128*256
040CF7 19          0549*       add hl,de
040CF8 18 1B       0550*       jr @zero_hlu
040CFA             0551*   @y_pos_x_zero:
040CFA             0552*   ; y pos,x zero
040CFA             0553*   ; angle is 128 (180)
040CFA 21 00 80 00 0554*       ld hl,128*256
040CFE C9          0555*       ret
040CFF             0556*   @y_pos_x_pos:
040CFF             0557*   ; y pos,x pos
040CFF             0558*   ; angle is 64 to 128 (90 to 180)
040CFF             0559*   ; neg the intermediate and add 180 degrees
040CFF CD 16 09 04 0560*       call neg_hlu
040D03 11 00 80 00 0561*       ld de,128*256
040D07 19          0562*       add hl,de
040D08 18 0B       0563*       jr @zero_hlu
040D0A             0564*   
040D0A             0565*   @y_zero:
040D0A F1          0566*       pop af ; sign of x
040D0B FA 10 0D 04 0567*       jp m,@y_zero_x_neg
040D0F             0568*   ; y zero,x pos
040D0F             0569*   ; angle is 64 (90),nothing to do
040D0F C9          0570*       ret
040D10             0571*   @y_zero_x_neg:
040D10             0572*   ; y zero ,x neg
040D10             0573*   ; angle is 192 (270)
040D10 21 00 C0 00 0574*       ld hl,192*256
040D14 C9          0575*       ret
040D15             0576*   @zero_hlu:
040D15 AF          0577*       xor a
040D16 22 23 0D 04 0578*       ld (@scratch),hl
040D1A 32 25 0D 04 0579*       ld (@scratch+2),a
040D1E 2A 23 0D 04 0580*       ld hl,(@scratch)
040D22 C9          0581*       ret
040D23             0582*   @scratch: ds 6
040D29             0583*   
040D29             0584*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040D29             0585*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
040D29             0586*   ; destroys: a,hl,bc,de
040D29             0587*   ; note: only works for angles from 0 to 32 (45) degrees
040D29             0588*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040D29             0589*   atan_168fast:
040D29             0590*   ; because we use compass headings instead of geometric angles
040D29             0591*   ; we compute dx/dy which is 1/tan(theta) in the maths world
040D29             0592*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
040D29 CD E4 0A 04 0593*       call udiv168 ; ud.e = dx/dy
040D2D EB          0594*       ex de,hl ; uh.l = dx/dy
040D2E             0595*   ; test uh.l for 0
040D2E 19          0596*       add hl,de
040D2F B7          0597*       or a
040D30 ED 52       0598*       sbc hl,de
040D32 28 22       0599*       jr z,@is_zero
040D34             0600*   ; test uh.l for 1
040D34 AF          0601*       xor a ; clear carry
040D35 EB          0602*       ex de,hl
040D36 21 00 01 00 0603*       ld hl,1*256 ; 1 in 16.8 fixed format
040D3A ED 52       0604*       sbc hl,de
040D3C 28 13       0605*       jr z,@is_45
040D3E EB          0606*       ex de,hl
040D3F             0607*   ; no special cases so we move on
040D3F             0608*   ; l contains the fractional portion of tan(uh.l)
040D3F             0609*   ; we multiply it by three to get our lookup table index
040D3F 26 03       0610*       ld h,3
040D41 ED 6C       0611*       mlt hl ; index into lut
040D43 11 00 00 00 0612*       ld de,0 ; clear deu
040D47 54          0613*       ld d,h ; copy hl to de
040D48 5D          0614*       ld e,l ; de contains our index
040D49 21 4E 11 04 0615*       ld hl,atan_lut_168 ; grab the lut address
040D4D 19          0616*       add hl,de ; bump hl by the index
040D4E ED 27       0617*       ld hl,(hl) ; don't try this on a z80!
040D50 C9          0618*       ret ; and out
040D51             0619*   @is_45:
040D51 21 00 20 00 0620*       ld hl,32*256
040D55 C9          0621*       ret
040D56             0622*   ; for the case tan(0)
040D56             0623*   @is_zero:
040D56 21 00 00 00 0624*       ld hl,0*256
040D5A C9          0625*       ret
040D5B             0626*   
040D5B             0627*   ; Expects  ADL mode
040D5B             0628*   ; Inputs:  UH.L
040D5B             0629*   ; Outputs: UH.L is the 16.8 square root
040D5B             0630*   ;          UDE is the integer difference inputHL-DE^2
040D5B             0631*   sqrt168:
040D5B CD 65 0D 04 0632*       call sqrt24
040D5F EB          0633*       ex de,hl
040D60 29          0634*       add hl,hl
040D61 29          0635*       add hl,hl
040D62 29          0636*       add hl,hl
040D63 29          0637*       add hl,hl
040D64 C9          0638*       ret
040D65             0639*   
040D65             0640*   ; credit: xeda112358
040D65             0641*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040D65             0642*   sqrt24:
040D65             0643*   ; Expects ADL mode
040D65             0644*   ; Inputs: HL
040D65             0645*   ; Outputs: DE is the integer square root
040D65             0646*   ;  HL is the difference inputHL-DE^2
040D65             0647*   ;  c flag reset
040D65 01 00 00 00 0648*       ld bc,0 ; clear bcu
040D69 11 00 00 00 0649*       ld de,0 ; clear deu
040D6D AF          0650*       xor a
040D6E 45          0651*       ld b,l
040D6F C5          0652*       push bc
040D70 47          0653*       ld b,a
040D71 6F          0654*       ld l,a
040D72             0655*   ; Iteration 1
040D72 29          0656*       add hl,hl
040D73 CB 11       0657*       rl c
040D75 29          0658*       add hl,hl
040D76 CB 11       0659*       rl c
040D78 91          0660*       sub c
040D79 30 04       0661*       jr nc,$+6
040D7B 1C          0662*       inc e
040D7C 1C          0663*       inc e
040D7D 2F          0664*       cpl
040D7E 4F          0665*       ld c,a
040D7F             0666*   ; Iteration 2
040D7F 29          0667*       add hl,hl
040D80 CB 11       0668*       rl c
040D82 29          0669*       add hl,hl
040D83 CB 11       0670*       rl c
040D85 CB 13       0671*       rl e
040D87 7B          0672*       ld a,e
040D88 91          0673*       sub c
040D89 30 04       0674*       jr nc,$+6
040D8B 1C          0675*       inc e
040D8C 1C          0676*       inc e
040D8D 2F          0677*       cpl
040D8E 4F          0678*       ld c,a
040D8F             0679*   ; Iteration 3
040D8F 29          0680*       add hl,hl
040D90 CB 11       0681*       rl c
040D92 29          0682*       add hl,hl
040D93 CB 11       0683*       rl c
040D95 CB 13       0684*       rl e
040D97 7B          0685*       ld a,e
040D98 91          0686*       sub c
040D99 30 04       0687*       jr nc,$+6
040D9B 1C          0688*       inc e
040D9C 1C          0689*       inc e
040D9D 2F          0690*       cpl
040D9E 4F          0691*       ld c,a
040D9F             0692*   ; Iteration 4
040D9F 29          0693*       add hl,hl
040DA0 CB 11       0694*       rl c
040DA2 29          0695*       add hl,hl
040DA3 CB 11       0696*       rl c
040DA5 CB 13       0697*       rl e
040DA7 7B          0698*       ld a,e
040DA8 91          0699*       sub c
040DA9 30 04       0700*       jr nc,$+6
040DAB 1C          0701*       inc e
040DAC 1C          0702*       inc e
040DAD 2F          0703*       cpl
040DAE 4F          0704*       ld c,a
040DAF             0705*   ; Iteration 5
040DAF 29          0706*       add hl,hl
040DB0 CB 11       0707*       rl c
040DB2 29          0708*       add hl,hl
040DB3 CB 11       0709*       rl c
040DB5 CB 13       0710*       rl e
040DB7 7B          0711*       ld a,e
040DB8 91          0712*       sub c
040DB9 30 04       0713*       jr nc,$+6
040DBB 1C          0714*       inc e
040DBC 1C          0715*       inc e
040DBD 2F          0716*       cpl
040DBE 4F          0717*       ld c,a
040DBF             0718*   ; Iteration 6
040DBF 29          0719*       add hl,hl
040DC0 CB 11       0720*       rl c
040DC2 29          0721*       add hl,hl
040DC3 CB 11       0722*       rl c
040DC5 CB 13       0723*       rl e
040DC7 7B          0724*       ld a,e
040DC8 91          0725*       sub c
040DC9 30 04       0726*       jr nc,$+6
040DCB 1C          0727*       inc e
040DCC 1C          0728*       inc e
040DCD 2F          0729*       cpl
040DCE 4F          0730*       ld c,a
040DCF             0731*   ; Iteration 7
040DCF 29          0732*       add hl,hl
040DD0 CB 11       0733*       rl c
040DD2 29          0734*       add hl,hl
040DD3 CB 11       0735*       rl c
040DD5 CB 10       0736*       rl b
040DD7 EB          0737*       ex de,hl
040DD8 29          0738*       add hl,hl
040DD9 E5          0739*       push hl
040DDA ED 42       0740*       sbc hl,bc
040DDC 30 06       0741*       jr nc,$+8
040DDE 7C          0742*       ld a,h
040DDF 2F          0743*       cpl
040DE0 47          0744*       ld b,a
040DE1 7D          0745*       ld a,l
040DE2 2F          0746*       cpl
040DE3 4F          0747*       ld c,a
040DE4 E1          0748*       pop hl
040DE5 30 02       0749*       jr nc,$+4
040DE7 23          0750*       inc hl
040DE8 23          0751*       inc hl
040DE9 EB          0752*       ex de,hl
040DEA             0753*   ; Iteration 8
040DEA 29          0754*       add hl,hl
040DEB 69          0755*       ld l,c
040DEC 60          0756*       ld h,b
040DED ED 6A       0757*       adc hl,hl
040DEF ED 6A       0758*       adc hl,hl
040DF1 EB          0759*       ex de,hl
040DF2 29          0760*       add hl,hl
040DF3 ED 52       0761*       sbc hl,de
040DF5 19          0762*       add hl,de
040DF6 EB          0763*       ex de,hl
040DF7 30 04       0764*       jr nc,$+6
040DF9 ED 52       0765*       sbc hl,de
040DFB 13          0766*       inc de
040DFC 13          0767*       inc de
040DFD             0768*   ; Iteration 9
040DFD F1          0769*       pop af
040DFE 17          0770*       rla
040DFF ED 6A       0771*       adc hl,hl
040E01 17          0772*       rla
040E02 ED 6A       0773*       adc hl,hl
040E04 EB          0774*       ex de,hl
040E05 29          0775*       add hl,hl
040E06 ED 52       0776*       sbc hl,de
040E08 19          0777*       add hl,de
040E09 EB          0778*       ex de,hl
040E0A 30 04       0779*       jr nc,$+6
040E0C ED 52       0780*       sbc hl,de
040E0E 13          0781*       inc de
040E0F 13          0782*       inc de
040E10             0783*   ; Iteration 10
040E10 17          0784*       rla
040E11 ED 6A       0785*       adc hl,hl
040E13 17          0786*       rla
040E14 ED 6A       0787*       adc hl,hl
040E16 EB          0788*       ex de,hl
040E17 29          0789*       add hl,hl
040E18 ED 52       0790*       sbc hl,de
040E1A 19          0791*       add hl,de
040E1B EB          0792*       ex de,hl
040E1C 30 04       0793*       jr nc,$+6
040E1E ED 52       0794*       sbc hl,de
040E20 13          0795*       inc de
040E21 13          0796*       inc de
040E22             0797*   ; Iteration 11
040E22 17          0798*       rla
040E23 ED 6A       0799*       adc hl,hl
040E25 17          0800*       rla
040E26 ED 6A       0801*       adc hl,hl
040E28 EB          0802*       ex de,hl
040E29 29          0803*       add hl,hl
040E2A ED 52       0804*       sbc hl,de
040E2C 19          0805*       add hl,de
040E2D EB          0806*       ex de,hl
040E2E 30 04       0807*       jr nc,$+6
040E30 ED 52       0808*       sbc hl,de
040E32 13          0809*       inc de
040E33 13          0810*       inc de
040E34             0811*   ; Iteration 12
040E34 17          0812*       rla
040E35 ED 6A       0813*       adc hl,hl
040E37 17          0814*       rla
040E38 ED 6A       0815*       adc hl,hl
040E3A EB          0816*       ex de,hl
040E3B 29          0817*       add hl,hl
040E3C ED 52       0818*       sbc hl,de
040E3E 19          0819*       add hl,de
040E3F EB          0820*       ex de,hl
040E40 30 04       0821*       jr nc,$+6
040E42 ED 52       0822*       sbc hl,de
040E44 13          0823*       inc de
040E45 13          0824*       inc de
040E46 CB 1A       0825*       rr d
040E48 CB 1B       0826*       rr e
040E4A C9          0827*       ret
040E4B             0828*   
040E4B             0829*   sin_lut_168:
040E4B 00 00 00    0830*       dl 0x000000 ; 0.000 00, 0.000
040E4E 06 00 00    0831*       dl 0x000006 ; 1.406 01, 0.025
040E51 0C 00 00    0832*       dl 0x00000C ; 2.813 02, 0.049
040E54 12 00 00    0833*       dl 0x000012 ; 4.219 03, 0.074
040E57 19 00 00    0834*       dl 0x000019 ; 5.625 04, 0.098
040E5A 1F 00 00    0835*       dl 0x00001F ; 7.031 05, 0.122
040E5D 25 00 00    0836*       dl 0x000025 ; 8.438 06, 0.147
040E60 2B 00 00    0837*       dl 0x00002B ; 9.844 07, 0.171
040E63 31 00 00    0838*       dl 0x000031 ; 11.250 08, 0.195
040E66 38 00 00    0839*       dl 0x000038 ; 12.656 09, 0.219
040E69 3E 00 00    0840*       dl 0x00003E ; 14.063 0A, 0.243
040E6C 44 00 00    0841*       dl 0x000044 ; 15.469 0B, 0.267
040E6F 4A 00 00    0842*       dl 0x00004A ; 16.875 0C, 0.290
040E72 50 00 00    0843*       dl 0x000050 ; 18.281 0D, 0.314
040E75 56 00 00    0844*       dl 0x000056 ; 19.688 0E, 0.337
040E78 5C 00 00    0845*       dl 0x00005C ; 21.094 0F, 0.360
040E7B 61 00 00    0846*       dl 0x000061 ; 22.500 10, 0.383
040E7E 67 00 00    0847*       dl 0x000067 ; 23.906 11, 0.405
040E81 6D 00 00    0848*       dl 0x00006D ; 25.313 12, 0.428
040E84 73 00 00    0849*       dl 0x000073 ; 26.719 13, 0.450
040E87 78 00 00    0850*       dl 0x000078 ; 28.125 14, 0.471
040E8A 7E 00 00    0851*       dl 0x00007E ; 29.531 15, 0.493
040E8D 83 00 00    0852*       dl 0x000083 ; 30.938 16, 0.514
040E90 88 00 00    0853*       dl 0x000088 ; 32.344 17, 0.535
040E93 8E 00 00    0854*       dl 0x00008E ; 33.750 18, 0.556
040E96 93 00 00    0855*       dl 0x000093 ; 35.156 19, 0.576
040E99 98 00 00    0856*       dl 0x000098 ; 36.563 1A, 0.596
040E9C 9D 00 00    0857*       dl 0x00009D ; 37.969 1B, 0.615
040E9F A2 00 00    0858*       dl 0x0000A2 ; 39.375 1C, 0.634
040EA2 A7 00 00    0859*       dl 0x0000A7 ; 40.781 1D, 0.653
040EA5 AB 00 00    0860*       dl 0x0000AB ; 42.188 1E, 0.672
040EA8 B0 00 00    0861*       dl 0x0000B0 ; 43.594 1F, 0.690
040EAB B5 00 00    0862*       dl 0x0000B5 ; 45.000 20, 0.707
040EAE B9 00 00    0863*       dl 0x0000B9 ; 46.406 21, 0.724
040EB1 BD 00 00    0864*       dl 0x0000BD ; 47.813 22, 0.741
040EB4 C1 00 00    0865*       dl 0x0000C1 ; 49.219 23, 0.757
040EB7 C5 00 00    0866*       dl 0x0000C5 ; 50.625 24, 0.773
040EBA C9 00 00    0867*       dl 0x0000C9 ; 52.031 25, 0.788
040EBD CD 00 00    0868*       dl 0x0000CD ; 53.438 26, 0.803
040EC0 D1 00 00    0869*       dl 0x0000D1 ; 54.844 27, 0.818
040EC3 D4 00 00    0870*       dl 0x0000D4 ; 56.250 28, 0.831
040EC6 D8 00 00    0871*       dl 0x0000D8 ; 57.656 29, 0.845
040EC9 DB 00 00    0872*       dl 0x0000DB ; 59.063 2A, 0.858
040ECC DE 00 00    0873*       dl 0x0000DE ; 60.469 2B, 0.870
040ECF E1 00 00    0874*       dl 0x0000E1 ; 61.875 2C, 0.882
040ED2 E4 00 00    0875*       dl 0x0000E4 ; 63.281 2D, 0.893
040ED5 E7 00 00    0876*       dl 0x0000E7 ; 64.688 2E, 0.904
040ED8 EA 00 00    0877*       dl 0x0000EA ; 66.094 2F, 0.914
040EDB EC 00 00    0878*       dl 0x0000EC ; 67.500 30, 0.924
040EDE EE 00 00    0879*       dl 0x0000EE ; 68.906 31, 0.933
040EE1 F1 00 00    0880*       dl 0x0000F1 ; 70.313 32, 0.942
040EE4 F3 00 00    0881*       dl 0x0000F3 ; 71.719 33, 0.950
040EE7 F4 00 00    0882*       dl 0x0000F4 ; 73.125 34, 0.957
040EEA F6 00 00    0883*       dl 0x0000F6 ; 74.531 35, 0.964
040EED F8 00 00    0884*       dl 0x0000F8 ; 75.938 36, 0.970
040EF0 F9 00 00    0885*       dl 0x0000F9 ; 77.344 37, 0.976
040EF3 FB 00 00    0886*       dl 0x0000FB ; 78.750 38, 0.981
040EF6 FC 00 00    0887*       dl 0x0000FC ; 80.156 39, 0.985
040EF9 FD 00 00    0888*       dl 0x0000FD ; 81.563 3A, 0.989
040EFC FE 00 00    0889*       dl 0x0000FE ; 82.969 3B, 0.992
040EFF FE 00 00    0890*       dl 0x0000FE ; 84.375 3C, 0.995
040F02 FF 00 00    0891*       dl 0x0000FF ; 85.781 3D, 0.997
040F05 FF 00 00    0892*       dl 0x0000FF ; 87.188 3E, 0.999
040F08 FF 00 00    0893*       dl 0x0000FF ; 88.594 3F, 1.000
040F0B 00 01 00    0894*       dl 0x000100 ; 90.000 40, 1.000
040F0E FF 00 00    0895*       dl 0x0000FF ; 91.406 41, 1.000
040F11 FF 00 00    0896*       dl 0x0000FF ; 92.813 42, 0.999
040F14 FF 00 00    0897*       dl 0x0000FF ; 94.219 43, 0.997
040F17 FE 00 00    0898*       dl 0x0000FE ; 95.625 44, 0.995
040F1A FE 00 00    0899*       dl 0x0000FE ; 97.031 45, 0.992
040F1D FD 00 00    0900*       dl 0x0000FD ; 98.438 46, 0.989
040F20 FC 00 00    0901*       dl 0x0000FC ; 99.844 47, 0.985
040F23 FB 00 00    0902*       dl 0x0000FB ; 101.250 48, 0.981
040F26 F9 00 00    0903*       dl 0x0000F9 ; 102.656 49, 0.976
040F29 F8 00 00    0904*       dl 0x0000F8 ; 104.063 4A, 0.970
040F2C F6 00 00    0905*       dl 0x0000F6 ; 105.469 4B, 0.964
040F2F F4 00 00    0906*       dl 0x0000F4 ; 106.875 4C, 0.957
040F32 F3 00 00    0907*       dl 0x0000F3 ; 108.281 4D, 0.950
040F35 F1 00 00    0908*       dl 0x0000F1 ; 109.688 4E, 0.942
040F38 EE 00 00    0909*       dl 0x0000EE ; 111.094 4F, 0.933
040F3B EC 00 00    0910*       dl 0x0000EC ; 112.500 50, 0.924
040F3E EA 00 00    0911*       dl 0x0000EA ; 113.906 51, 0.914
040F41 E7 00 00    0912*       dl 0x0000E7 ; 115.313 52, 0.904
040F44 E4 00 00    0913*       dl 0x0000E4 ; 116.719 53, 0.893
040F47 E1 00 00    0914*       dl 0x0000E1 ; 118.125 54, 0.882
040F4A DE 00 00    0915*       dl 0x0000DE ; 119.531 55, 0.870
040F4D DB 00 00    0916*       dl 0x0000DB ; 120.938 56, 0.858
040F50 D8 00 00    0917*       dl 0x0000D8 ; 122.344 57, 0.845
040F53 D4 00 00    0918*       dl 0x0000D4 ; 123.750 58, 0.831
040F56 D1 00 00    0919*       dl 0x0000D1 ; 125.156 59, 0.818
040F59 CD 00 00    0920*       dl 0x0000CD ; 126.563 5A, 0.803
040F5C C9 00 00    0921*       dl 0x0000C9 ; 127.969 5B, 0.788
040F5F C5 00 00    0922*       dl 0x0000C5 ; 129.375 5C, 0.773
040F62 C1 00 00    0923*       dl 0x0000C1 ; 130.781 5D, 0.757
040F65 BD 00 00    0924*       dl 0x0000BD ; 132.188 5E, 0.741
040F68 B9 00 00    0925*       dl 0x0000B9 ; 133.594 5F, 0.724
040F6B B5 00 00    0926*       dl 0x0000B5 ; 135.000 60, 0.707
040F6E B0 00 00    0927*       dl 0x0000B0 ; 136.406 61, 0.690
040F71 AB 00 00    0928*       dl 0x0000AB ; 137.813 62, 0.672
040F74 A7 00 00    0929*       dl 0x0000A7 ; 139.219 63, 0.653
040F77 A2 00 00    0930*       dl 0x0000A2 ; 140.625 64, 0.634
040F7A 9D 00 00    0931*       dl 0x00009D ; 142.031 65, 0.615
040F7D 98 00 00    0932*       dl 0x000098 ; 143.438 66, 0.596
040F80 93 00 00    0933*       dl 0x000093 ; 144.844 67, 0.576
040F83 8E 00 00    0934*       dl 0x00008E ; 146.250 68, 0.556
040F86 88 00 00    0935*       dl 0x000088 ; 147.656 69, 0.535
040F89 83 00 00    0936*       dl 0x000083 ; 149.063 6A, 0.514
040F8C 7E 00 00    0937*       dl 0x00007E ; 150.469 6B, 0.493
040F8F 78 00 00    0938*       dl 0x000078 ; 151.875 6C, 0.471
040F92 73 00 00    0939*       dl 0x000073 ; 153.281 6D, 0.450
040F95 6D 00 00    0940*       dl 0x00006D ; 154.688 6E, 0.428
040F98 67 00 00    0941*       dl 0x000067 ; 156.094 6F, 0.405
040F9B 61 00 00    0942*       dl 0x000061 ; 157.500 70, 0.383
040F9E 5C 00 00    0943*       dl 0x00005C ; 158.906 71, 0.360
040FA1 56 00 00    0944*       dl 0x000056 ; 160.313 72, 0.337
040FA4 50 00 00    0945*       dl 0x000050 ; 161.719 73, 0.314
040FA7 4A 00 00    0946*       dl 0x00004A ; 163.125 74, 0.290
040FAA 44 00 00    0947*       dl 0x000044 ; 164.531 75, 0.267
040FAD 3E 00 00    0948*       dl 0x00003E ; 165.938 76, 0.243
040FB0 38 00 00    0949*       dl 0x000038 ; 167.344 77, 0.219
040FB3 31 00 00    0950*       dl 0x000031 ; 168.750 78, 0.195
040FB6 2B 00 00    0951*       dl 0x00002B ; 170.156 79, 0.171
040FB9 25 00 00    0952*       dl 0x000025 ; 171.563 7A, 0.147
040FBC 1F 00 00    0953*       dl 0x00001F ; 172.969 7B, 0.122
040FBF 19 00 00    0954*       dl 0x000019 ; 174.375 7C, 0.098
040FC2 12 00 00    0955*       dl 0x000012 ; 175.781 7D, 0.074
040FC5 0C 00 00    0956*       dl 0x00000C ; 177.188 7E, 0.049
040FC8 06 00 00    0957*       dl 0x000006 ; 178.594 7F, 0.025
040FCB 00 00 00    0958*       dl 0x000000 ; 180.000 80, 0.000
040FCE FA FF FF    0959*       dl 0xFFFFFA ; 181.406 81, -0.025
040FD1 F4 FF FF    0960*       dl 0xFFFFF4 ; 182.813 82, -0.049
040FD4 EE FF FF    0961*       dl 0xFFFFEE ; 184.219 83, -0.074
040FD7 E7 FF FF    0962*       dl 0xFFFFE7 ; 185.625 84, -0.098
040FDA E1 FF FF    0963*       dl 0xFFFFE1 ; 187.031 85, -0.122
040FDD DB FF FF    0964*       dl 0xFFFFDB ; 188.438 86, -0.147
040FE0 D5 FF FF    0965*       dl 0xFFFFD5 ; 189.844 87, -0.171
040FE3 CF FF FF    0966*       dl 0xFFFFCF ; 191.250 88, -0.195
040FE6 C8 FF FF    0967*       dl 0xFFFFC8 ; 192.656 89, -0.219
040FE9 C2 FF FF    0968*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040FEC BC FF FF    0969*       dl 0xFFFFBC ; 195.469 8B, -0.267
040FEF B6 FF FF    0970*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040FF2 B0 FF FF    0971*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040FF5 AA FF FF    0972*       dl 0xFFFFAA ; 199.688 8E, -0.337
040FF8 A4 FF FF    0973*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040FFB 9F FF FF    0974*       dl 0xFFFF9F ; 202.500 90, -0.383
040FFE 99 FF FF    0975*       dl 0xFFFF99 ; 203.906 91, -0.405
041001 93 FF FF    0976*       dl 0xFFFF93 ; 205.313 92, -0.428
041004 8D FF FF    0977*       dl 0xFFFF8D ; 206.719 93, -0.450
041007 88 FF FF    0978*       dl 0xFFFF88 ; 208.125 94, -0.471
04100A 82 FF FF    0979*       dl 0xFFFF82 ; 209.531 95, -0.493
04100D 7D FF FF    0980*       dl 0xFFFF7D ; 210.938 96, -0.514
041010 78 FF FF    0981*       dl 0xFFFF78 ; 212.344 97, -0.535
041013 72 FF FF    0982*       dl 0xFFFF72 ; 213.750 98, -0.556
041016 6D FF FF    0983*       dl 0xFFFF6D ; 215.156 99, -0.576
041019 68 FF FF    0984*       dl 0xFFFF68 ; 216.563 9A, -0.596
04101C 63 FF FF    0985*       dl 0xFFFF63 ; 217.969 9B, -0.615
04101F 5E FF FF    0986*       dl 0xFFFF5E ; 219.375 9C, -0.634
041022 59 FF FF    0987*       dl 0xFFFF59 ; 220.781 9D, -0.653
041025 55 FF FF    0988*       dl 0xFFFF55 ; 222.188 9E, -0.672
041028 50 FF FF    0989*       dl 0xFFFF50 ; 223.594 9F, -0.690
04102B 4B FF FF    0990*       dl 0xFFFF4B ; 225.000 A0, -0.707
04102E 47 FF FF    0991*       dl 0xFFFF47 ; 226.406 A1, -0.724
041031 43 FF FF    0992*       dl 0xFFFF43 ; 227.813 A2, -0.741
041034 3F FF FF    0993*       dl 0xFFFF3F ; 229.219 A3, -0.757
041037 3B FF FF    0994*       dl 0xFFFF3B ; 230.625 A4, -0.773
04103A 37 FF FF    0995*       dl 0xFFFF37 ; 232.031 A5, -0.788
04103D 33 FF FF    0996*       dl 0xFFFF33 ; 233.438 A6, -0.803
041040 2F FF FF    0997*       dl 0xFFFF2F ; 234.844 A7, -0.818
041043 2C FF FF    0998*       dl 0xFFFF2C ; 236.250 A8, -0.831
041046 28 FF FF    0999*       dl 0xFFFF28 ; 237.656 A9, -0.845
041049 25 FF FF    1000*       dl 0xFFFF25 ; 239.063 AA, -0.858
04104C 22 FF FF    1001*       dl 0xFFFF22 ; 240.469 AB, -0.870
04104F 1F FF FF    1002*       dl 0xFFFF1F ; 241.875 AC, -0.882
041052 1C FF FF    1003*       dl 0xFFFF1C ; 243.281 AD, -0.893
041055 19 FF FF    1004*       dl 0xFFFF19 ; 244.688 AE, -0.904
041058 16 FF FF    1005*       dl 0xFFFF16 ; 246.094 AF, -0.914
04105B 14 FF FF    1006*       dl 0xFFFF14 ; 247.500 B0, -0.924
04105E 12 FF FF    1007*       dl 0xFFFF12 ; 248.906 B1, -0.933
041061 0F FF FF    1008*       dl 0xFFFF0F ; 250.313 B2, -0.942
041064 0D FF FF    1009*       dl 0xFFFF0D ; 251.719 B3, -0.950
041067 0C FF FF    1010*       dl 0xFFFF0C ; 253.125 B4, -0.957
04106A 0A FF FF    1011*       dl 0xFFFF0A ; 254.531 B5, -0.964
04106D 08 FF FF    1012*       dl 0xFFFF08 ; 255.938 B6, -0.970
041070 07 FF FF    1013*       dl 0xFFFF07 ; 257.344 B7, -0.976
041073 05 FF FF    1014*       dl 0xFFFF05 ; 258.750 B8, -0.981
041076 04 FF FF    1015*       dl 0xFFFF04 ; 260.156 B9, -0.985
041079 03 FF FF    1016*       dl 0xFFFF03 ; 261.563 BA, -0.989
04107C 02 FF FF    1017*       dl 0xFFFF02 ; 262.969 BB, -0.992
04107F 02 FF FF    1018*       dl 0xFFFF02 ; 264.375 BC, -0.995
041082 01 FF FF    1019*       dl 0xFFFF01 ; 265.781 BD, -0.997
041085 01 FF FF    1020*       dl 0xFFFF01 ; 267.188 BE, -0.999
041088 01 FF FF    1021*       dl 0xFFFF01 ; 268.594 BF, -1.000
04108B 00 FF FF    1022*       dl 0xFFFF00 ; 270.000 C0, -1.000
04108E 01 FF FF    1023*       dl 0xFFFF01 ; 271.406 C1, -1.000
041091 01 FF FF    1024*       dl 0xFFFF01 ; 272.813 C2, -0.999
041094 01 FF FF    1025*       dl 0xFFFF01 ; 274.219 C3, -0.997
041097 02 FF FF    1026*       dl 0xFFFF02 ; 275.625 C4, -0.995
04109A 02 FF FF    1027*       dl 0xFFFF02 ; 277.031 C5, -0.992
04109D 03 FF FF    1028*       dl 0xFFFF03 ; 278.438 C6, -0.989
0410A0 04 FF FF    1029*       dl 0xFFFF04 ; 279.844 C7, -0.985
0410A3 05 FF FF    1030*       dl 0xFFFF05 ; 281.250 C8, -0.981
0410A6 07 FF FF    1031*       dl 0xFFFF07 ; 282.656 C9, -0.976
0410A9 08 FF FF    1032*       dl 0xFFFF08 ; 284.063 CA, -0.970
0410AC 0A FF FF    1033*       dl 0xFFFF0A ; 285.469 CB, -0.964
0410AF 0C FF FF    1034*       dl 0xFFFF0C ; 286.875 CC, -0.957
0410B2 0D FF FF    1035*       dl 0xFFFF0D ; 288.281 CD, -0.950
0410B5 0F FF FF    1036*       dl 0xFFFF0F ; 289.688 CE, -0.942
0410B8 12 FF FF    1037*       dl 0xFFFF12 ; 291.094 CF, -0.933
0410BB 14 FF FF    1038*       dl 0xFFFF14 ; 292.500 D0, -0.924
0410BE 16 FF FF    1039*       dl 0xFFFF16 ; 293.906 D1, -0.914
0410C1 19 FF FF    1040*       dl 0xFFFF19 ; 295.313 D2, -0.904
0410C4 1C FF FF    1041*       dl 0xFFFF1C ; 296.719 D3, -0.893
0410C7 1F FF FF    1042*       dl 0xFFFF1F ; 298.125 D4, -0.882
0410CA 22 FF FF    1043*       dl 0xFFFF22 ; 299.531 D5, -0.870
0410CD 25 FF FF    1044*       dl 0xFFFF25 ; 300.938 D6, -0.858
0410D0 28 FF FF    1045*       dl 0xFFFF28 ; 302.344 D7, -0.845
0410D3 2C FF FF    1046*       dl 0xFFFF2C ; 303.750 D8, -0.831
0410D6 2F FF FF    1047*       dl 0xFFFF2F ; 305.156 D9, -0.818
0410D9 33 FF FF    1048*       dl 0xFFFF33 ; 306.563 DA, -0.803
0410DC 37 FF FF    1049*       dl 0xFFFF37 ; 307.969 DB, -0.788
0410DF 3B FF FF    1050*       dl 0xFFFF3B ; 309.375 DC, -0.773
0410E2 3F FF FF    1051*       dl 0xFFFF3F ; 310.781 DD, -0.757
0410E5 43 FF FF    1052*       dl 0xFFFF43 ; 312.188 DE, -0.741
0410E8 47 FF FF    1053*       dl 0xFFFF47 ; 313.594 DF, -0.724
0410EB 4B FF FF    1054*       dl 0xFFFF4B ; 315.000 E0, -0.707
0410EE 50 FF FF    1055*       dl 0xFFFF50 ; 316.406 E1, -0.690
0410F1 55 FF FF    1056*       dl 0xFFFF55 ; 317.813 E2, -0.672
0410F4 59 FF FF    1057*       dl 0xFFFF59 ; 319.219 E3, -0.653
0410F7 5E FF FF    1058*       dl 0xFFFF5E ; 320.625 E4, -0.634
0410FA 63 FF FF    1059*       dl 0xFFFF63 ; 322.031 E5, -0.615
0410FD 68 FF FF    1060*       dl 0xFFFF68 ; 323.438 E6, -0.596
041100 6D FF FF    1061*       dl 0xFFFF6D ; 324.844 E7, -0.576
041103 72 FF FF    1062*       dl 0xFFFF72 ; 326.250 E8, -0.556
041106 78 FF FF    1063*       dl 0xFFFF78 ; 327.656 E9, -0.535
041109 7D FF FF    1064*       dl 0xFFFF7D ; 329.063 EA, -0.514
04110C 82 FF FF    1065*       dl 0xFFFF82 ; 330.469 EB, -0.493
04110F 88 FF FF    1066*       dl 0xFFFF88 ; 331.875 EC, -0.471
041112 8D FF FF    1067*       dl 0xFFFF8D ; 333.281 ED, -0.450
041115 93 FF FF    1068*       dl 0xFFFF93 ; 334.688 EE, -0.428
041118 99 FF FF    1069*       dl 0xFFFF99 ; 336.094 EF, -0.405
04111B 9F FF FF    1070*       dl 0xFFFF9F ; 337.500 F0, -0.383
04111E A4 FF FF    1071*       dl 0xFFFFA4 ; 338.906 F1, -0.360
041121 AA FF FF    1072*       dl 0xFFFFAA ; 340.313 F2, -0.337
041124 B0 FF FF    1073*       dl 0xFFFFB0 ; 341.719 F3, -0.314
041127 B6 FF FF    1074*       dl 0xFFFFB6 ; 343.125 F4, -0.290
04112A BC FF FF    1075*       dl 0xFFFFBC ; 344.531 F5, -0.267
04112D C2 FF FF    1076*       dl 0xFFFFC2 ; 345.938 F6, -0.243
041130 C8 FF FF    1077*       dl 0xFFFFC8 ; 347.344 F7, -0.219
041133 CF FF FF    1078*       dl 0xFFFFCF ; 348.750 F8, -0.195
041136 D5 FF FF    1079*       dl 0xFFFFD5 ; 350.156 F9, -0.171
041139 DB FF FF    1080*       dl 0xFFFFDB ; 351.563 FA, -0.147
04113C E1 FF FF    1081*       dl 0xFFFFE1 ; 352.969 FB, -0.122
04113F E7 FF FF    1082*       dl 0xFFFFE7 ; 354.375 FC, -0.098
041142 EE FF FF    1083*       dl 0xFFFFEE ; 355.781 FD, -0.074
041145 F4 FF FF    1084*       dl 0xFFFFF4 ; 357.188 FE, -0.049
041148 FA FF FF    1085*       dl 0xFFFFFA ; 358.594 FF, -0.025
04114B 00 00 00    1086*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
04114E             1087*   
04114E             1088*   atan_lut_168:
04114E 00 00 00    1089*       dl 0x000000 ; 000000, 0.000
041151 28 00 00    1090*       dl 0x000028 ; 000001, 0.224
041154 51 00 00    1091*       dl 0x000051 ; 000002, 0.448
041157 7A 00 00    1092*       dl 0x00007A ; 000003, 0.671
04115A A2 00 00    1093*       dl 0x0000A2 ; 000004, 0.895
04115D CB 00 00    1094*       dl 0x0000CB ; 000005, 1.119
041160 F4 00 00    1095*       dl 0x0000F4 ; 000006, 1.343
041163 1D 01 00    1096*       dl 0x00011D ; 000007, 1.566
041166 45 01 00    1097*       dl 0x000145 ; 000008, 1.790
041169 6E 01 00    1098*       dl 0x00016E ; 000009, 2.013
04116C 97 01 00    1099*       dl 0x000197 ; 00000A, 2.237
04116F BF 01 00    1100*       dl 0x0001BF ; 00000B, 2.460
041172 E8 01 00    1101*       dl 0x0001E8 ; 00000C, 2.684
041175 11 02 00    1102*       dl 0x000211 ; 00000D, 2.907
041178 39 02 00    1103*       dl 0x000239 ; 00000E, 3.130
04117B 62 02 00    1104*       dl 0x000262 ; 00000F, 3.353
04117E 8B 02 00    1105*       dl 0x00028B ; 000010, 3.576
041181 B3 02 00    1106*       dl 0x0002B3 ; 000011, 3.799
041184 DC 02 00    1107*       dl 0x0002DC ; 000012, 4.022
041187 04 03 00    1108*       dl 0x000304 ; 000013, 4.245
04118A 2D 03 00    1109*       dl 0x00032D ; 000014, 4.467
04118D 55 03 00    1110*       dl 0x000355 ; 000015, 4.690
041190 7E 03 00    1111*       dl 0x00037E ; 000016, 4.912
041193 A6 03 00    1112*       dl 0x0003A6 ; 000017, 5.134
041196 CE 03 00    1113*       dl 0x0003CE ; 000018, 5.356
041199 F7 03 00    1114*       dl 0x0003F7 ; 000019, 5.578
04119C 1F 04 00    1115*       dl 0x00041F ; 00001A, 5.799
04119F 48 04 00    1116*       dl 0x000448 ; 00001B, 6.021
0411A2 70 04 00    1117*       dl 0x000470 ; 00001C, 6.242
0411A5 98 04 00    1118*       dl 0x000498 ; 00001D, 6.463
0411A8 C0 04 00    1119*       dl 0x0004C0 ; 00001E, 6.684
0411AB E8 04 00    1120*       dl 0x0004E8 ; 00001F, 6.905
0411AE 11 05 00    1121*       dl 0x000511 ; 000020, 7.125
0411B1 39 05 00    1122*       dl 0x000539 ; 000021, 7.345
0411B4 61 05 00    1123*       dl 0x000561 ; 000022, 7.565
0411B7 89 05 00    1124*       dl 0x000589 ; 000023, 7.785
0411BA B1 05 00    1125*       dl 0x0005B1 ; 000024, 8.005
0411BD D9 05 00    1126*       dl 0x0005D9 ; 000025, 8.224
0411C0 01 06 00    1127*       dl 0x000601 ; 000026, 8.443
0411C3 28 06 00    1128*       dl 0x000628 ; 000027, 8.662
0411C6 50 06 00    1129*       dl 0x000650 ; 000028, 8.881
0411C9 78 06 00    1130*       dl 0x000678 ; 000029, 9.099
0411CC A0 06 00    1131*       dl 0x0006A0 ; 00002A, 9.317
0411CF C7 06 00    1132*       dl 0x0006C7 ; 00002B, 9.535
0411D2 EF 06 00    1133*       dl 0x0006EF ; 00002C, 9.752
0411D5 16 07 00    1134*       dl 0x000716 ; 00002D, 9.970
0411D8 3E 07 00    1135*       dl 0x00073E ; 00002E, 10.187
0411DB 65 07 00    1136*       dl 0x000765 ; 00002F, 10.403
0411DE 8D 07 00    1137*       dl 0x00078D ; 000030, 10.620
0411E1 B4 07 00    1138*       dl 0x0007B4 ; 000031, 10.836
0411E4 DB 07 00    1139*       dl 0x0007DB ; 000032, 11.051
0411E7 03 08 00    1140*       dl 0x000803 ; 000033, 11.267
0411EA 2A 08 00    1141*       dl 0x00082A ; 000034, 11.482
0411ED 51 08 00    1142*       dl 0x000851 ; 000035, 11.697
0411F0 78 08 00    1143*       dl 0x000878 ; 000036, 11.911
0411F3 9F 08 00    1144*       dl 0x00089F ; 000037, 12.125
0411F6 C6 08 00    1145*       dl 0x0008C6 ; 000038, 12.339
0411F9 ED 08 00    1146*       dl 0x0008ED ; 000039, 12.553
0411FC 13 09 00    1147*       dl 0x000913 ; 00003A, 12.766
0411FF 3A 09 00    1148*       dl 0x00093A ; 00003B, 12.978
041202 61 09 00    1149*       dl 0x000961 ; 00003C, 13.191
041205 87 09 00    1150*       dl 0x000987 ; 00003D, 13.403
041208 AE 09 00    1151*       dl 0x0009AE ; 00003E, 13.614
04120B D4 09 00    1152*       dl 0x0009D4 ; 00003F, 13.825
04120E FB 09 00    1153*       dl 0x0009FB ; 000040, 14.036
041211 21 0A 00    1154*       dl 0x000A21 ; 000041, 14.247
041214 47 0A 00    1155*       dl 0x000A47 ; 000042, 14.457
041217 6D 0A 00    1156*       dl 0x000A6D ; 000043, 14.666
04121A 94 0A 00    1157*       dl 0x000A94 ; 000044, 14.876
04121D BA 0A 00    1158*       dl 0x000ABA ; 000045, 15.085
041220 E0 0A 00    1159*       dl 0x000AE0 ; 000046, 15.293
041223 05 0B 00    1160*       dl 0x000B05 ; 000047, 15.501
041226 2B 0B 00    1161*       dl 0x000B2B ; 000048, 15.709
041229 51 0B 00    1162*       dl 0x000B51 ; 000049, 15.916
04122C 77 0B 00    1163*       dl 0x000B77 ; 00004A, 16.123
04122F 9C 0B 00    1164*       dl 0x000B9C ; 00004B, 16.329
041232 C2 0B 00    1165*       dl 0x000BC2 ; 00004C, 16.535
041235 E7 0B 00    1166*       dl 0x000BE7 ; 00004D, 16.740
041238 0C 0C 00    1167*       dl 0x000C0C ; 00004E, 16.945
04123B 32 0C 00    1168*       dl 0x000C32 ; 00004F, 17.150
04123E 57 0C 00    1169*       dl 0x000C57 ; 000050, 17.354
041241 7C 0C 00    1170*       dl 0x000C7C ; 000051, 17.558
041244 A1 0C 00    1171*       dl 0x000CA1 ; 000052, 17.761
041247 C6 0C 00    1172*       dl 0x000CC6 ; 000053, 17.964
04124A EB 0C 00    1173*       dl 0x000CEB ; 000054, 18.166
04124D 0F 0D 00    1174*       dl 0x000D0F ; 000055, 18.368
041250 34 0D 00    1175*       dl 0x000D34 ; 000056, 18.569
041253 58 0D 00    1176*       dl 0x000D58 ; 000057, 18.770
041256 7D 0D 00    1177*       dl 0x000D7D ; 000058, 18.970
041259 A1 0D 00    1178*       dl 0x000DA1 ; 000059, 19.170
04125C C6 0D 00    1179*       dl 0x000DC6 ; 00005A, 19.370
04125F EA 0D 00    1180*       dl 0x000DEA ; 00005B, 19.569
041262 0E 0E 00    1181*       dl 0x000E0E ; 00005C, 19.767
041265 32 0E 00    1182*       dl 0x000E32 ; 00005D, 19.965
041268 56 0E 00    1183*       dl 0x000E56 ; 00005E, 20.163
04126B 7A 0E 00    1184*       dl 0x000E7A ; 00005F, 20.360
04126E 9E 0E 00    1185*       dl 0x000E9E ; 000060, 20.556
041271 C1 0E 00    1186*       dl 0x000EC1 ; 000061, 20.752
041274 E5 0E 00    1187*       dl 0x000EE5 ; 000062, 20.947
041277 08 0F 00    1188*       dl 0x000F08 ; 000063, 21.142
04127A 2C 0F 00    1189*       dl 0x000F2C ; 000064, 21.337
04127D 4F 0F 00    1190*       dl 0x000F4F ; 000065, 21.531
041280 72 0F 00    1191*       dl 0x000F72 ; 000066, 21.724
041283 95 0F 00    1192*       dl 0x000F95 ; 000067, 21.917
041286 B8 0F 00    1193*       dl 0x000FB8 ; 000068, 22.109
041289 DB 0F 00    1194*       dl 0x000FDB ; 000069, 22.301
04128C FE 0F 00    1195*       dl 0x000FFE ; 00006A, 22.493
04128F 21 10 00    1196*       dl 0x001021 ; 00006B, 22.683
041292 44 10 00    1197*       dl 0x001044 ; 00006C, 22.874
041295 66 10 00    1198*       dl 0x001066 ; 00006D, 23.063
041298 89 10 00    1199*       dl 0x001089 ; 00006E, 23.253
04129B AB 10 00    1200*       dl 0x0010AB ; 00006F, 23.441
04129E CD 10 00    1201*       dl 0x0010CD ; 000070, 23.629
0412A1 EF 10 00    1202*       dl 0x0010EF ; 000071, 23.817
0412A4 11 11 00    1203*       dl 0x001111 ; 000072, 24.004
0412A7 33 11 00    1204*       dl 0x001133 ; 000073, 24.191
0412AA 55 11 00    1205*       dl 0x001155 ; 000074, 24.376
0412AD 77 11 00    1206*       dl 0x001177 ; 000075, 24.562
0412B0 99 11 00    1207*       dl 0x001199 ; 000076, 24.747
0412B3 BA 11 00    1208*       dl 0x0011BA ; 000077, 24.931
0412B6 DC 11 00    1209*       dl 0x0011DC ; 000078, 25.115
0412B9 FD 11 00    1210*       dl 0x0011FD ; 000079, 25.298
0412BC 1E 12 00    1211*       dl 0x00121E ; 00007A, 25.481
0412BF 3F 12 00    1212*       dl 0x00123F ; 00007B, 25.663
0412C2 60 12 00    1213*       dl 0x001260 ; 00007C, 25.844
0412C5 81 12 00    1214*       dl 0x001281 ; 00007D, 26.025
0412C8 A2 12 00    1215*       dl 0x0012A2 ; 00007E, 26.206
0412CB C3 12 00    1216*       dl 0x0012C3 ; 00007F, 26.386
0412CE E4 12 00    1217*       dl 0x0012E4 ; 000080, 26.565
0412D1 04 13 00    1218*       dl 0x001304 ; 000081, 26.744
0412D4 25 13 00    1219*       dl 0x001325 ; 000082, 26.922
0412D7 45 13 00    1220*       dl 0x001345 ; 000083, 27.100
0412DA 65 13 00    1221*       dl 0x001365 ; 000084, 27.277
0412DD 85 13 00    1222*       dl 0x001385 ; 000085, 27.453
0412E0 A5 13 00    1223*       dl 0x0013A5 ; 000086, 27.629
0412E3 C5 13 00    1224*       dl 0x0013C5 ; 000087, 27.805
0412E6 E5 13 00    1225*       dl 0x0013E5 ; 000088, 27.979
0412E9 05 14 00    1226*       dl 0x001405 ; 000089, 28.154
0412EC 24 14 00    1227*       dl 0x001424 ; 00008A, 28.327
0412EF 44 14 00    1228*       dl 0x001444 ; 00008B, 28.501
0412F2 63 14 00    1229*       dl 0x001463 ; 00008C, 28.673
0412F5 83 14 00    1230*       dl 0x001483 ; 00008D, 28.845
0412F8 A2 14 00    1231*       dl 0x0014A2 ; 00008E, 29.017
0412FB C1 14 00    1232*       dl 0x0014C1 ; 00008F, 29.187
0412FE E0 14 00    1233*       dl 0x0014E0 ; 000090, 29.358
041301 FF 14 00    1234*       dl 0x0014FF ; 000091, 29.527
041304 1E 15 00    1235*       dl 0x00151E ; 000092, 29.697
041307 3C 15 00    1236*       dl 0x00153C ; 000093, 29.865
04130A 5B 15 00    1237*       dl 0x00155B ; 000094, 30.033
04130D 79 15 00    1238*       dl 0x001579 ; 000095, 30.201
041310 98 15 00    1239*       dl 0x001598 ; 000096, 30.368
041313 B6 15 00    1240*       dl 0x0015B6 ; 000097, 30.534
041316 D4 15 00    1241*       dl 0x0015D4 ; 000098, 30.700
041319 F2 15 00    1242*       dl 0x0015F2 ; 000099, 30.865
04131C 10 16 00    1243*       dl 0x001610 ; 00009A, 31.030
04131F 2E 16 00    1244*       dl 0x00162E ; 00009B, 31.194
041322 4C 16 00    1245*       dl 0x00164C ; 00009C, 31.357
041325 6A 16 00    1246*       dl 0x00166A ; 00009D, 31.520
041328 87 16 00    1247*       dl 0x001687 ; 00009E, 31.682
04132B A5 16 00    1248*       dl 0x0016A5 ; 00009F, 31.844
04132E C2 16 00    1249*       dl 0x0016C2 ; 0000A0, 32.005
041331 DF 16 00    1250*       dl 0x0016DF ; 0000A1, 32.166
041334 FC 16 00    1251*       dl 0x0016FC ; 0000A2, 32.326
041337 19 17 00    1252*       dl 0x001719 ; 0000A3, 32.486
04133A 36 17 00    1253*       dl 0x001736 ; 0000A4, 32.645
04133D 53 17 00    1254*       dl 0x001753 ; 0000A5, 32.803
041340 70 17 00    1255*       dl 0x001770 ; 0000A6, 32.961
041343 8C 17 00    1256*       dl 0x00178C ; 0000A7, 33.118
041346 A9 17 00    1257*       dl 0x0017A9 ; 0000A8, 33.275
041349 C5 17 00    1258*       dl 0x0017C5 ; 0000A9, 33.431
04134C E2 17 00    1259*       dl 0x0017E2 ; 0000AA, 33.587
04134F FE 17 00    1260*       dl 0x0017FE ; 0000AB, 33.742
041352 1A 18 00    1261*       dl 0x00181A ; 0000AC, 33.896
041355 36 18 00    1262*       dl 0x001836 ; 0000AD, 34.050
041358 52 18 00    1263*       dl 0x001852 ; 0000AE, 34.203
04135B 6E 18 00    1264*       dl 0x00186E ; 0000AF, 34.356
04135E 8A 18 00    1265*       dl 0x00188A ; 0000B0, 34.509
041361 A5 18 00    1266*       dl 0x0018A5 ; 0000B1, 34.660
041364 C1 18 00    1267*       dl 0x0018C1 ; 0000B2, 34.811
041367 DC 18 00    1268*       dl 0x0018DC ; 0000B3, 34.962
04136A F7 18 00    1269*       dl 0x0018F7 ; 0000B4, 35.112
04136D 13 19 00    1270*       dl 0x001913 ; 0000B5, 35.262
041370 2E 19 00    1271*       dl 0x00192E ; 0000B6, 35.410
041373 49 19 00    1272*       dl 0x001949 ; 0000B7, 35.559
041376 64 19 00    1273*       dl 0x001964 ; 0000B8, 35.707
041379 7F 19 00    1274*       dl 0x00197F ; 0000B9, 35.854
04137C 99 19 00    1275*       dl 0x001999 ; 0000BA, 36.001
04137F B4 19 00    1276*       dl 0x0019B4 ; 0000BB, 36.147
041382 CE 19 00    1277*       dl 0x0019CE ; 0000BC, 36.293
041385 E9 19 00    1278*       dl 0x0019E9 ; 0000BD, 36.438
041388 03 1A 00    1279*       dl 0x001A03 ; 0000BE, 36.582
04138B 1D 1A 00    1280*       dl 0x001A1D ; 0000BF, 36.726
04138E 37 1A 00    1281*       dl 0x001A37 ; 0000C0, 36.870
041391 51 1A 00    1282*       dl 0x001A51 ; 0000C1, 37.013
041394 6B 1A 00    1283*       dl 0x001A6B ; 0000C2, 37.155
041397 85 1A 00    1284*       dl 0x001A85 ; 0000C3, 37.297
04139A 9F 1A 00    1285*       dl 0x001A9F ; 0000C4, 37.439
04139D B9 1A 00    1286*       dl 0x001AB9 ; 0000C5, 37.579
0413A0 D2 1A 00    1287*       dl 0x001AD2 ; 0000C6, 37.720
0413A3 EC 1A 00    1288*       dl 0x001AEC ; 0000C7, 37.859
0413A6 05 1B 00    1289*       dl 0x001B05 ; 0000C8, 37.999
0413A9 1E 1B 00    1290*       dl 0x001B1E ; 0000C9, 38.137
0413AC 37 1B 00    1291*       dl 0x001B37 ; 0000CA, 38.276
0413AF 50 1B 00    1292*       dl 0x001B50 ; 0000CB, 38.413
0413B2 69 1B 00    1293*       dl 0x001B69 ; 0000CC, 38.550
0413B5 82 1B 00    1294*       dl 0x001B82 ; 0000CD, 38.687
0413B8 9B 1B 00    1295*       dl 0x001B9B ; 0000CE, 38.823
0413BB B4 1B 00    1296*       dl 0x001BB4 ; 0000CF, 38.959
0413BE CC 1B 00    1297*       dl 0x001BCC ; 0000D0, 39.094
0413C1 E5 1B 00    1298*       dl 0x001BE5 ; 0000D1, 39.228
0413C4 FD 1B 00    1299*       dl 0x001BFD ; 0000D2, 39.362
0413C7 16 1C 00    1300*       dl 0x001C16 ; 0000D3, 39.496
0413CA 2E 1C 00    1301*       dl 0x001C2E ; 0000D4, 39.629
0413CD 46 1C 00    1302*       dl 0x001C46 ; 0000D5, 39.762
0413D0 5E 1C 00    1303*       dl 0x001C5E ; 0000D6, 39.894
0413D3 76 1C 00    1304*       dl 0x001C76 ; 0000D7, 40.025
0413D6 8E 1C 00    1305*       dl 0x001C8E ; 0000D8, 40.156
0413D9 A5 1C 00    1306*       dl 0x001CA5 ; 0000D9, 40.286
0413DC BD 1C 00    1307*       dl 0x001CBD ; 0000DA, 40.416
0413DF D5 1C 00    1308*       dl 0x001CD5 ; 0000DB, 40.546
0413E2 EC 1C 00    1309*       dl 0x001CEC ; 0000DC, 40.675
0413E5 04 1D 00    1310*       dl 0x001D04 ; 0000DD, 40.803
0413E8 1B 1D 00    1311*       dl 0x001D1B ; 0000DE, 40.931
0413EB 32 1D 00    1312*       dl 0x001D32 ; 0000DF, 41.059
0413EE 49 1D 00    1313*       dl 0x001D49 ; 0000E0, 41.186
0413F1 60 1D 00    1314*       dl 0x001D60 ; 0000E1, 41.312
0413F4 77 1D 00    1315*       dl 0x001D77 ; 0000E2, 41.438
0413F7 8E 1D 00    1316*       dl 0x001D8E ; 0000E3, 41.564
0413FA A5 1D 00    1317*       dl 0x001DA5 ; 0000E4, 41.689
0413FD BB 1D 00    1318*       dl 0x001DBB ; 0000E5, 41.814
041400 D2 1D 00    1319*       dl 0x001DD2 ; 0000E6, 41.938
041403 E9 1D 00    1320*       dl 0x001DE9 ; 0000E7, 42.061
041406 FF 1D 00    1321*       dl 0x001DFF ; 0000E8, 42.184
041409 15 1E 00    1322*       dl 0x001E15 ; 0000E9, 42.307
04140C 2C 1E 00    1323*       dl 0x001E2C ; 0000EA, 42.429
04140F 42 1E 00    1324*       dl 0x001E42 ; 0000EB, 42.551
041412 58 1E 00    1325*       dl 0x001E58 ; 0000EC, 42.672
041415 6E 1E 00    1326*       dl 0x001E6E ; 0000ED, 42.793
041418 84 1E 00    1327*       dl 0x001E84 ; 0000EE, 42.913
04141B 99 1E 00    1328*       dl 0x001E99 ; 0000EF, 43.033
04141E AF 1E 00    1329*       dl 0x001EAF ; 0000F0, 43.152
041421 C5 1E 00    1330*       dl 0x001EC5 ; 0000F1, 43.271
041424 DA 1E 00    1331*       dl 0x001EDA ; 0000F2, 43.390
041427 F0 1E 00    1332*       dl 0x001EF0 ; 0000F3, 43.508
04142A 05 1F 00    1333*       dl 0x001F05 ; 0000F4, 43.625
04142D 1B 1F 00    1334*       dl 0x001F1B ; 0000F5, 43.742
041430 30 1F 00    1335*       dl 0x001F30 ; 0000F6, 43.859
041433 45 1F 00    1336*       dl 0x001F45 ; 0000F7, 43.975
041436 5A 1F 00    1337*       dl 0x001F5A ; 0000F8, 44.091
041439 6F 1F 00    1338*       dl 0x001F6F ; 0000F9, 44.206
04143C 84 1F 00    1339*       dl 0x001F84 ; 0000FA, 44.321
04143F 99 1F 00    1340*       dl 0x001F99 ; 0000FB, 44.435
041442 AD 1F 00    1341*       dl 0x001FAD ; 0000FC, 44.549
041445 C2 1F 00    1342*       dl 0x001FC2 ; 0000FD, 44.662
041448 D7 1F 00    1343*       dl 0x001FD7 ; 0000FE, 44.775
04144B EB 1F 00    1344*       dl 0x001FEB ; 0000FF, 44.888
04144E 00 20 00    1345*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
041451             0036        include "fonts.inc"
041451 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041500             0002*   
041500             0003*   fonts_load:
041500 DD 21 00 29 0004*       ld ix,font_list ; pointer to font list lookup
       04          
041505 06 12       0005*       ld b,num_fonts ; loop counter
041507             0006*   
041507             0007*   @load_loop:
041507 C5          0008*       push bc ; save loop counter
041508             0009*   
041508             0010*   ; load font into a buffer
041508 DD 27 06    0011*       ld hl,(ix+font_list_bufferId)
04150B DD 31 09    0012*       ld iy,(ix+font_list_filename)
04150E CD 78 1B 04 0013*       call vdu_load_buffer_from_file
041512             0014*   
041512             0015*   ; create font from buffer
041512 DD 27 06    0016*       ld hl,(ix+font_list_bufferId)
041515 DD 5E 00    0017*       ld e,(ix+font_list_width)
041518 DD 56 03    0018*       ld d,(ix+font_list_height)
04151B 3E 00       0019*       ld a,0 ; flags
04151D CD 1A 1D 04 0020*       call vdu_font_create
041521             0021*   
041521             0022*   ; select font
041521 DD 27 06    0023*       ld hl,(ix+font_list_bufferId)
041524 3E 01       0024*       ld a,1 ; flags
041526 CD 00 1D 04 0025*       call vdu_font_select
04152A             0026*   
04152A             0027*   ; ; debug print filename
04152A             0028*   ;     call printNewLine
04152A             0029*   ;     ld hl,(ix+font_list_filename)
04152A             0030*   ;     call printString
04152A             0031*   
04152A             0032*   ; advance font_list pointer to next record
04152A ED 32 0C    0033*       lea ix,ix+font_list_record_size
04152D             0034*   
04152D             0035*   ; restore loop counter
04152D C1          0036*       pop bc
04152E 10 D7       0037*       djnz @load_loop
041530             0038*   
041530             0039*   ; all done
041530 C9          0040*       ret
041531             0037        include "images.inc"
041531 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041600             0002*   
041600             0003*   image_type: equ 0
041600             0004*   image_width: equ image_type+3
041600             0005*   image_height: equ image_width+3
041600             0006*   image_filesize: equ image_height+3
041600             0007*   image_filename: equ image_filesize+3
041600             0008*   image_bufferId: equ image_filename+3
041600             0009*   image_record_size: equ image_bufferId+3
041600             0010*   
041600 00 00 00    0011*   cur_image_list: dl 0
041603 00 00 00    0012*   cur_filename: dl 0
041606 00 00 00    0013*   cur_buffer_id: dl 0
041609             0014*   
041609             0015*   img_load_init:
041609             0016*   ; initialize logo's position parameters
041609 21 00 00 00 0017*       ld hl,0
04160D 22 BE 16 04 0018*       ld (logo_xvel),hl
041611 22 C1 16 04 0019*       ld (logo_xpos),hl
041615             0020*   ; begin 16.8 maths to determine logo's y position and velocity
041615 21 00 E0 00 0021*       ld hl,224*256
041619 22 C7 16 04 0022*       ld (logo_ypos),hl
04161D EB          0023*       ex de,hl
04161E 21 00 28 FF 0024*       ld hl,-240+24*256
041622             0025*       ; ld de,-256*[sprites_num_images+tiles_dg_num_images+ui_num_images]
041622 11 00 0C 01 0026*       ld de,sprites_num_images+tiles_dg_num_images+ui_num_images*256
041626 CD 25 0B 04 0027*       call sdiv168 ; ud.e = distance / num images = y velocity
04162A ED 53 C4 16 0028*       ld (logo_yvel),de
       04          
04162F             0029*   ; all done
04162F C9          0030*       ret
041630             0031*   
041630             0032*   ; inputs: bc is the number of images to load, cur_image_list set
041630             0033*   img_load_main:
041630             0034*   ; back up loop counter
041630 C5          0035*       push bc
041631             0036*   
041631             0037*   ; load the next image
041631 CD 68 16 04 0038*       call load_next_image
041635             0039*   
041635             0040*   ; plot the background
041635 CD 4B 19 04 0041*       call vdu_cls
041639 21 02 00 00 0042*       ld hl,BUF_SPLASH_BG
04163D CD 38 1A 04 0043*       call vdu_buff_select
041641 01 00 00 00 0044*       ld bc,0
041645 11 00 00 00 0045*       ld de,0
041649 CD 20 1E 04 0046*       call vdu_plot_bmp
04164D             0047*   
04164D             0048*   ; ; draw the most recently loaded image
04164D             0049*   ; 	ld hl,(cur_buffer_id)
04164D             0050*   ; 	call vdu_buff_select
04164D             0051*   ; 	ld bc,0
04164D             0052*   ; 	ld de,0
04164D             0053*   ; 	call vdu_plot_bmp
04164D             0054*   
04164D             0055*   ; move logo
04164D CD 99 16 04 0056*       call move_logo
041651             0057*   
041651             0058*   ; print current filename
041651 2A 03 16 04 0059*       ld hl,(cur_filename)
041655 CD 07 01 04 0060*       call printString
041659             0061*   
041659             0062*   ; flip the framebuffer
041659             0063*       ; call vdu_flip
041659             0064*   
041659             0065*   ; decrement loop counter
041659 C1          0066*       pop bc
04165A 0B          0067*       dec bc
04165B 79          0068*       ld a,c
04165C B7          0069*       or a
04165D C2 30 16 04 0070*       jp nz,img_load_main
041661 78          0071*       ld a,b
041662 B7          0072*       or a
041663 C2 30 16 04 0073*       jp nz,img_load_main
041667 C9          0074*       ret
041668             0075*   
041668             0076*   load_next_image:
041668 FD 2A 00 16 0077*       ld iy,(cur_image_list)
       04          
04166D FD E5       0078*       push iy
04166F FD 7E 00    0079*       ld a,(iy+image_type) ; get image type
041672 FD 07 03    0080*       ld bc,(iy+image_width) ; get image width
041675 FD 17 06    0081*       ld de,(iy+image_height) ; get image height
041678 FD 31 09    0082*       ld ix,(iy+image_filesize) ; get image file size
04167B FD 27 0F    0083*       ld hl,(iy+image_bufferId) ; get image bufferId
04167E 22 06 16 04 0084*       ld (cur_buffer_id),hl
041682 FD 37 0C    0085*       ld iy,(iy+image_filename) ; get image filename
041685 FD 22 03 16 0086*       ld (cur_filename),iy
       04          
04168A CD 56 1B 04 0087*       call vdu_load_img
04168E FD E1       0088*       pop iy
041690 ED 33 12    0089*       lea iy,iy+image_record_size
041693 FD 22 00 16 0090*       ld (cur_image_list),iy
       04          
041698 C9          0091*       ret
041699             0092*   
041699             0093*   move_logo:
041699             0094*   ; activate logo bitmap
041699 21 03 00 00 0095*       ld hl, BUF_SPLASH_LOGO
04169D CD 38 1A 04 0096*       call vdu_buff_select
0416A1             0097*   ; update position based on velocity parameters
0416A1 2A C7 16 04 0098*       ld hl,(logo_ypos)
0416A5 ED 5B C4 16 0099*       ld de,(logo_yvel)
       04          
0416AA 19          0100*       add hl,de
0416AB 22 C7 16 04 0101*       ld (logo_ypos),hl
0416AF             0102*   ; draw logo
0416AF ED 4B C1 16 0103*       ld bc,(logo_xpos)
       04          
0416B4 ED 5B C7 16 0104*       ld de,(logo_ypos)
       04          
0416B9 CD 3C 1E 04 0105*       call vdu_plot_bmp168
0416BD C9          0106*       ret
0416BE             0107*   
0416BE 00 00 00    0108*   logo_xvel: dl 0
0416C1 00 00 00    0109*   logo_xpos: dl 0
0416C4             0110*   
0416C4 00 00 00    0111*   logo_yvel: dl 0
0416C7 00 00 00    0112*   logo_ypos: dl 0
0416CA             0113*   
0416CA             0114*   load_ui_images:
0416CA             0115*   ; initialize image loading variables
0416CA 21 65 55 04 0116*       ld hl,ui_image_list
0416CE 22 00 16 04 0117*       ld (cur_image_list),hl
0416D2             0118*   ; load images
0416D2 06 04       0119*       ld b,ui_num_images
0416D4             0120*   @loop:
0416D4 C5          0121*       push bc
0416D5 CD 68 16 04 0122*       call load_next_image
0416D9 C1          0123*       pop bc
0416DA 10 F8       0124*       djnz @loop
0416DC C9          0125*       ret
0416DD             0126*   
0416DD             0127*   load_sprite_images:
0416DD             0128*   ; initialize image loading variables
0416DD 21 08 48 04 0129*       ld hl,sprites_image_list
0416E1 22 00 16 04 0130*       ld (cur_image_list),hl
0416E5 01 50 00 00 0131*       ld bc,sprites_num_images
0416E9             0132*   ; load images
0416E9 CD 30 16 04 0133*       call img_load_main
0416ED C9          0134*       ret
0416EE             0135*   
0416EE             0136*   load_tilesets:
0416EE             0137*   ; initialize image loading variables
0416EE 21 00 2C 04 0138*       ld hl,tiles_dg_image_list
0416F2 22 00 16 04 0139*       ld (cur_image_list),hl
0416F6 01 B8 00 00 0140*       ld bc,tiles_dg_num_images
0416FA             0141*   ; load images
0416FA CD 30 16 04 0142*       call img_load_main
0416FE             0143*   
0416FE             0144*   ; ; initialize image loading variables
0416FE             0145*   ;     ld hl,tiles_xevious_image_list
0416FE             0146*   ;     ld (cur_image_list),hl
0416FE             0147*   ;     ld bc,tiles_xevious_num_images
0416FE             0148*   ; ; load images
0416FE             0149*   ;     call img_load_main
0416FE C9          0150*       ret
0416FF             0038        include "timer.inc"
0416FF FF          0001*       align 256
041700             0002*   
041700             0003*   ; Table 32. Timer Control Registers
041700             0004*   ; this constant is the base address of the timer control registers
041700             0005*   ; each timer takes three bytes:
041700             0006*   ;   0: control register
041700             0007*   ;   1: low byte of timer reset value
041700             0008*   ;   2: high byte of timer reset value
041700             0009*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
041700             0010*   ; which correctly force the high and upper bytes of the address bus to zero
041700             0011*   TMR_CTL:     equ 80h
041700             0012*   
041700             0013*   ; Timer Control Register Bit Definitions
041700             0014*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
041700             0015*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
041700             0016*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
041700             0017*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
041700             0018*                               ; the TMRx_CTL register is read.
041700             0019*   
041700             0020*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
041700             0021*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
041700             0022*   
041700             0023*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
041700             0024*                               ;  0,and counting stops when the end-of-count value is reached.
041700             0025*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
041700             0026*                               ; written to the counter when the end-of-count value is reached.
041700             0027*   
041700             0028*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
041700             0029*   CLK_DIV_256:  equ %00001100 ;
041700             0030*   CLK_DIV_64:   equ %00001000 ;
041700             0031*   CLK_DIV_16:   equ %00000100 ;
041700             0032*   CLK_DIV_4:    equ %00000000 ;
041700             0033*   
041700             0034*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
041700             0035*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
041700             0036*                               ; When a 1 is written to this bit,the values in the reload registers
041700             0037*                               ;  are loaded into the downcounter when the timer restarts. The
041700             0038*                               ; programmer must ensure that this bit is set to 1 each time
041700             0039*                               ; SINGLE-PASS mode is used.
041700             0040*   
041700             0041*   ; disable/enable the programmable reload timer
041700             0042*   PRT_EN_0:     equ %00000000 ;
041700             0043*   PRT_EN_1:     equ %00000001 ;
041700             0044*   
041700             0045*   ; Table 37. Timer Input Source Select Register
041700             0046*   ; Each of the 4 timers are allocated two bits of the 8-bit register
041700             0047*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
041700             0048*   ;   00: System clock / CLK_DIV
041700             0049*   ;   01: RTC / CLK_DIV
041700             0050*   ;   NOTE: these are the values given in the manual,but it may be a typo
041700             0051*   ;   10: GPIO port B pin 1.
041700             0052*   ;   11: GPIO port B pin 1.
041700             0053*   TMR_ISS:   equ 92h ; register address
041700             0054*   
041700             0055*   ; Table 51. Real-Time Clock Control Register
041700             0056*   RTC_CTRL: equ EDh ; register address
041700             0057*   
041700             0058*   ; alarm interrupt disable/enable
041700             0059*   RTC_ALARM_0:    equ %00000000
041700             0060*   RTC_ALARM_1:    equ %10000000
041700             0061*   
041700             0062*   ; interrupt on alarm disable/enable
041700             0063*   RTC_INT_ENT_0:  equ %00000000
041700             0064*   RTC_INT_ENT_1:  equ %01000000
041700             0065*   
041700             0066*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
041700             0067*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
041700             0068*   
041700             0069*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
041700             0070*                                   ; On-chip 32768 Hz oscillator is enabled.
041700             0071*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
041700             0072*                                   ; On-chip 32768 Hz oscillator is disabled.
041700             0073*   
041700             0074*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
041700             0075*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
041700             0076*   
041700             0077*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
041700             0078*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
041700             0079*   
041700             0080*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
041700             0081*                                   ; RTC counter is enabled.
041700             0082*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
041700             0083*                                   ; RTC counter is disabled.
041700             0084*   
041700             0085*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
041700             0086*   
041700             0087*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
041700             0088*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
041700 00 00 00    0089*   prt_reload: dl 0x000000
041703             0090*   
041703             0091*   ; set PRT timer
041703             0092*   prt_set:
041703 21 00 00 00 0093*       ld hl,0
041707 22 51 17 04 0094*       ld (prt_irq_counter),hl
04170B 2A 00 17 04 0095*       ld hl,(prt_reload)
04170F ED 29 84    0096*       out0 ($84),l
041712 ED 21 85    0097*   	out0 ($85),h
041715             0098*   ; disable timer
041715 3E 06       0099*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041717 ED 39 83    0100*   	out0 ($83),a
04171A             0101*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04171A 3E 57       0102*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04171C ED 39 83    0103*   	out0 ($83),a
04171F C9          0104*       ret
041720             0105*   
041720             0106*   ; ===============================================
041720             0107*   ; PRT Timer Interrupt Handling
041720             0108*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
041720             0109*   ; -----------------------------------------------
041720             0110*   prt_irq_init:
041720             0111*       ; set up interrupt vector table 2
041720 21 00 00 00 0112*   	ld hl,0
041724 3A 0C 01 00 0113*   	ld a,($10c)
041728 6F          0114*   	ld l,a
041729 3A 0D 01 00 0115*   	ld a,($10d)
04172D 67          0116*   	ld h,a
04172E             0117*   
04172E             0118*   	; skip over CALL ($c3)
04172E 23          0119*   	inc hl
04172F             0120*   	; load address of jump into vector table 2 (in ram)
04172F ED 27       0121*   	ld hl,(hl)
041731             0122*   
041731             0123*   	; write CALL prt_irq_handler to vector table 2
041731 3E C3       0124*   	ld a,$c3
041733 77          0125*   	ld (hl),a
041734 23          0126*   	inc hl
041735 11 3C 17 04 0127*   	ld de,prt_irq_handler
041739 ED 1F       0128*   	ld (hl),de
04173B             0129*   
04173B C9          0130*       ret
04173C             0131*   
04173C             0132*   prt_irq_handler:
04173C F3          0133*   	di
04173D F5          0134*   	push af
04173E E5          0135*       push hl
04173F ED 38 83    0136*   	in0 a,($83)
041742 2A 51 17 04 0137*   	ld hl,(prt_irq_counter)
041746 23          0138*   	inc hl
041747 22 51 17 04 0139*   	ld (prt_irq_counter),hl
04174B E1          0140*       pop hl
04174C F1          0141*   	pop af
04174D FB          0142*   	ei
04174E 5B ED 4D    0143*   	reti.l
041751             0144*   
041751             0145*   prt_irq_counter:
041751 00 00 00    0146*   	.dl 0
041754             0147*   prt_irq_counter_saved:
041754 00 00 00    0148*       .dl 0
041757             0149*   
041757             0150*   prt_loop_reset:
041757 E5          0151*       push hl
041758 21 00 00 00 0152*   	ld hl,0
04175C 22 51 17 04 0153*   	ld (prt_irq_counter),hl
041760 22 C2 17 04 0154*       ld (prt_loop_counter),hl
041764 22 C5 17 04 0155*       ld (prt_loops),hl
041768 CD 03 17 04 0156*       call prt_set
04176C E1          0157*       pop hl
04176D C9          0158*       ret
04176E             0159*   
04176E             0160*   prt_loop_start:
04176E E5          0161*       push hl
04176F 21 00 00 00 0162*   	ld hl,0
041773 22 51 17 04 0163*   	ld (prt_irq_counter),hl
041777 E1          0164*       pop hl
041778 C9          0165*       ret
041779             0166*   
041779             0167*   prt_loop_stop:
041779 E5          0168*       push hl
04177A D5          0169*       push de
04177B 2A 51 17 04 0170*       ld hl,(prt_irq_counter)
04177F ED 5B C2 17 0171*       ld de,(prt_loop_counter)
       04          
041784 19          0172*       add hl,de
041785 22 C2 17 04 0173*       ld (prt_loop_counter),hl
041789 21 00 00 00 0174*       ld hl,0
04178D 22 51 17 04 0175*       ld (prt_irq_counter),hl
041791 2A C5 17 04 0176*       ld hl,(prt_loops)
041795 23          0177*       inc hl
041796 22 C5 17 04 0178*       ld (prt_loops),hl
04179A D1          0179*       pop de
04179B E1          0180*       pop hl
04179C C9          0181*       ret
04179D             0182*   
04179D             0183*   ; inputs: bc = y,x text coordinates to print
04179D             0184*   prt_loop_print:
04179D F5          0185*       push af
04179E E5          0186*       push hl
04179F C5          0187*       push bc
0417A0 D5          0188*       push de
0417A1 DD E5       0189*       push ix
0417A3 FD E5       0190*       push iy
0417A5 CD 37 19 04 0191*       call vdu_move_cursor
0417A9             0192*   
0417A9 2A C2 17 04 0193*       ld hl,(prt_loop_counter)
0417AD CD 06 02 04 0194*       call printDec
0417B1             0195*   
0417B1 2A C5 17 04 0196*       ld hl,(prt_loops)
0417B5 CD 06 02 04 0197*       call printDec
0417B9             0198*   
0417B9 FD E1       0199*       pop iy
0417BB DD E1       0200*       pop ix
0417BD D1          0201*       pop de
0417BE C1          0202*       pop bc
0417BF E1          0203*       pop hl
0417C0 F1          0204*       pop af
0417C1 C9          0205*       ret
0417C2             0206*   
0417C2             0207*   prt_loop_counter:
0417C2 00 00 00    0208*       .dl 0
0417C5             0209*   prt_loops:
0417C5 00 00 00    0210*       .dl 0
0417C8             0211*   
0417C8             0212*   ; ===============================================
0417C8             0213*   ; Timer functions
0417C8             0214*   ; -----------------------------------------------
0417C8             0215*   ; set a countdown timer
0417C8             0216*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0417C8             0217*   ; returns: hl = current time
0417C8             0218*   tmr_set:
0417C8 FD 2F 03    0219*       ld (iy+3),hl            ; set time remaining
0417CB             0220*       MOSCALL mos_sysvars     ; ix points to syvars table
0417CB 3E 08       0001*M1 			LD	A, function
0417CD 5B CF       0002*M1 			RST.LIL	08h
0417CF DD 27 00    0221*       ld hl,(ix+sysvar_time)  ; get current time
0417D2 FD 2F 00    0222*       ld (iy+0),hl            ; set start time
0417D5 C9          0223*       ret
0417D6             0224*   
0417D6             0225*   ; gets time remaining on a countdown timer
0417D6             0226*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0417D6             0227*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0417D6             0228*   ;          sign flags: pos = time not expired,zero or neg = time expired
0417D6             0229*   tmr_get:
0417D6             0230*       MOSCALL mos_sysvars     ; ix points to syvars table
0417D6 3E 08       0001*M1 			LD	A, function
0417D8 5B CF       0002*M1 			RST.LIL	08h
0417DA DD 17 00    0231*       ld de,(ix+sysvar_time)  ; get current time
0417DD FD 27 00    0232*       ld hl,(iy+0)            ; get start time
0417E0 AF          0233*       xor a                   ; clear carry
0417E1 ED 52       0234*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0417E3 FD 17 03    0235*       ld de,(iy+3)            ; get timer set value
0417E6 AF          0236*       xor a                   ; clear carry
0417E7 ED 5A       0237*       adc hl,de               ; hl = time remaining
0417E9             0238*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0417E9 C9          0239*       ret
0417EA             0240*   
0417EA             0241*   tmr_test: ds 6 ; example of a buffer to hold timer data
0417F0             0242*   
       FF FF FF FF 
       FF FF 
0417F0 00 00 00    0243*   timestamp_now: dl 0
0417F3 00 00 00    0244*   timestamp_old: dl 0
0417F6 00 00 00    0245*   timestamp_chg: dl 0
0417F9             0246*   
0417F9             0247*   ; update the global timestamp from the system clock
0417F9             0248*   ; inputs: none
0417F9             0249*   ; returns: hl = time elapsed in 1/120ths of a second
0417F9             0250*   ;          ix = pointer to syvars table
0417F9             0251*   ; destroys: af,hl,de,ix
0417F9             0252*   timestamp_tick:
0417F9 ED 5B F0 17 0253*       ld de,(timestamp_now)   ; get previous time
       04          
0417FE ED 53 F3 17 0254*       ld (timestamp_old),de   ; save previous time
       04          
041803             0255*       MOSCALL mos_sysvars     ; ix points to syvars table
041803 3E 08       0001*M1 			LD	A, function
041805 5B CF       0002*M1 			RST.LIL	08h
041807 DD 27 00    0256*       ld hl,(ix+sysvar_time)  ; get current time
04180A 22 F0 17 04 0257*       ld (timestamp_now),hl   ; save current time
04180E AF          0258*       xor a                   ; clear carry
04180F ED 52       0259*       sbc hl,de               ; hl = time elapsed
041811 22 F6 17 04 0260*       ld (timestamp_chg),hl   ; save elapsed time
041815 C9          0261*       ret
041816             0262*   
041816             0263*   ; set a countdown timer
041816             0264*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041816             0265*   ; requires: timestamp_tick to be called at least once before this function
041816             0266*   ; returns: hl = current time
041816             0267*   ; destroys: hl
041816             0268*   timestamp_tmr_set:
041816 FD 2F 03    0269*       ld (iy+3),hl            ; set time remaining
041819 2A F0 17 04 0270*       ld hl,(timestamp_now)   ; get current timestamp
04181D FD 2F 00    0271*       ld (iy+0),hl            ; set start time
041820 C9          0272*       ret
041821             0273*   
041821             0274*   ; gets time remaining on a countdown timer following the global timestamp
041821             0275*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041821             0276*   ; requires: timestamp_tick to be called at least once before this function
041821             0277*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041821             0278*   ;          sign flags: pos = time not expired,zero or neg = time expired
041821             0279*   ; destroys: af,hl,de
041821             0280*   timestamp_tmr_get:
041821 ED 5B F0 17 0281*       ld de,(timestamp_now)   ; get current timestamp
       04          
041826 FD 27 00    0282*       ld hl,(iy+0)            ; get start time
041829 AF          0283*       xor a                   ; clear carry
04182A ED 52       0284*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04182C FD 17 03    0285*       ld de,(iy+3)            ; get timer set value
04182F AF          0286*       xor a                   ; clear carry
041830 ED 5A       0287*       adc hl,de               ; hl = time remaining
041832             0288*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041832 C9          0289*       ret
041833             0290*   
041833             0291*   ; set a stopwatch
041833             0292*   ; returns: hl = start time
041833             0293*   ; destroys: hl,ix
041833             0294*   stopwatch_set:
041833             0295*       MOSCALL mos_sysvars     ; ix points to syvars table
041833 3E 08       0001*M1 			LD	A, function
041835 5B CF       0002*M1 			RST.LIL	08h
041837 DD 27 00    0296*       ld hl,(ix+sysvar_time)  ; get current time
04183A 22 4F 18 04 0297*       ld (stopwatch_started),hl            ; set start time
04183E C9          0298*       ret
04183F             0299*   
04183F             0300*   ; gets time elapsed on a stopwatch
04183F             0301*   ; returns: hl = time elapsed in 1/120ths of a second
04183F             0302*   ; destroys: af,hl,de,ix
04183F             0303*   stopwatch_get:
04183F             0304*       MOSCALL mos_sysvars     ; ix points to syvars table
04183F 3E 08       0001*M1 			LD	A, function
041841 5B CF       0002*M1 			RST.LIL	08h
041843 DD 27 00    0305*       ld hl,(ix+sysvar_time)  ; get current time
041846 ED 5B 4F 18 0306*       ld de,(stopwatch_started)            ; get start time
       04          
04184B AF          0307*       xor a                   ; clear carry
04184C ED 52       0308*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04184E C9          0309*       ret
04184F             0310*   
04184F             0311*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041852             0312*   
041852             0313*   ; ------------------
041852             0314*   ; delay routine
041852             0315*   ; Author: Richard Turrnidge
041852             0316*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041852             0317*   ; routine waits a fixed time,then returns
041852             0318*   ; arrive with A =  the delay byte. One bit to be set only.
041852             0319*   ; eg. ld A,00000100b
041852             0320*   
041852             0321*   multiPurposeDelay:
       FF FF FF 
041852 F5          0322*       push af
041853 C5          0323*       push bc
041854 DD E5       0324*       push ix
041856 47          0325*       ld b,a
041857 3E 08       0326*       ld a,$08
041859 5B CF       0327*       RST.LIL	08h                 ; get IX pointer to sysvars
04185B             0328*   
04185B             0329*   waitLoop:
04185B             0330*   
04185B DD 7E 00    0331*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04185E             0332*   
04185E             0333*                                   ;   we check if bit set is same as last time we checked.
04185E             0334*                                   ;   bit 0 - don't use
04185E             0335*                                   ;   bit 1 - changes 64 times per second
04185E             0336*                                   ;   bit 2 - changes 32 times per second
04185E             0337*                                   ;   bit 3 - changes 16 times per second
04185E             0338*   
04185E             0339*                                   ;   bit 4 - changes 8 times per second
04185E             0340*                                   ;   bit 5 - changes 4 times per second
04185E             0341*                                   ;   bit 6 - changes 2 times per second
04185E             0342*                                   ;   bit 7 - changes 1 times per second
04185E A0          0343*       and b
04185F 4F          0344*       ld c,a
041860 3A 71 18 04 0345*       ld a,(oldTimeStamp)
041864 B9          0346*       cp c                        ; is A same as last value?
041865 28 F4       0347*       jr z,waitLoop              ; loop here if it is
041867 79          0348*       ld a,c
041868 32 71 18 04 0349*       ld (oldTimeStamp),a        ; set new value
04186C             0350*   
04186C DD E1       0351*       pop ix
04186E C1          0352*       pop bc
04186F F1          0353*       pop af
041870 C9          0354*       ret
041871             0355*   
041871 00          0356*   oldTimeStamp:   .db 00h
041872             0039        include "vdu.inc"
041872 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
041900             0002*   
041900             0003*   ; VDU 30: Home cursor
041900             0004*   vdu_home_cursor:
041900 3E 1E       0005*       ld a,30
041902 5B D7       0006*   	rst.lil $10
041904 C9          0007*   	ret
041905             0008*   
041905             0009*   vdu_cursor_on:
041905 21 10 19 04 0010*   	ld hl,@cmd
041909 01 03 00 00 0011*   	ld bc,@end-@cmd
04190D 5B DF       0012*   	rst.lil $18
04190F C9          0013*   	ret
041910             0014*   @cmd:
041910 17 01 01    0015*   	db 23,1,1
041913             0016*   @end:
041913             0017*   
041913             0018*   vdu_cursor_off:
041913 21 1E 19 04 0019*   	ld hl,@cmd
041917 01 03 00 00 0020*   	ld bc,@end-@cmd
04191B 5B DF       0021*   	rst.lil $18
04191D C9          0022*   	ret
04191E             0023*   @cmd:
04191E 17 01 00    0024*   	db 23,1,0
041921             0025*   @end:
041921             0026*   
041921             0027*   ; VDU 5: Write text at graphics cursor
041921             0028*   ; inputs: a is the character to write to the screen
041921             0029*   ; prerequisites: the graphics cursor at the intended position on screen
041921             0030*   ; outputs: see the name of the function
041921             0031*   ; destroys: a, hl, bc
041921             0032*   vdu_char_to_gfx_cursor:
041921 32 31 19 04 0033*   	ld (@arg),a
041925 21 30 19 04 0034*   	ld hl,@cmd
041929 01 02 00 00 0035*   	ld bc,@end-@cmd
04192D 5B DF       0036*   	rst.lil $18
04192F C9          0037*   	ret
041930 05          0038*   @cmd: db 5
041931 00          0039*   @arg: db 0
041932             0040*   @end:
041932             0041*   ; VDU 9: Move cursor forward one character
041932             0042*   vdu_cursor_forward:
041932 3E 09       0043*       ld a,9
041934 5B D7       0044*   	rst.lil $10
041936 C9          0045*   	ret
041937             0046*   
041937             0047*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041937             0048*   ; inputs: c=x, b=y 8-bit unsigned integers
041937             0049*   vdu_move_cursor:
041937 ED 43 48 19 0050*       ld (@x0),bc
       04          
04193C 21 47 19 04 0051*   	ld hl,@cmd
041940 01 03 00 00 0052*   	ld bc,@end-@cmd
041944 5B DF       0053*   	rst.lil $18
041946 C9          0054*   	ret
041947 1F          0055*   @cmd: 	db 31
041948 00          0056*   @x0:	db 0
041949 00          0057*   @y0: 	db 0
04194A 00          0058*   @end: 	db 0 ; padding
04194B             0059*   
04194B             0060*   ; VDU 12: Clear text area (CLS)
04194B             0061*   vdu_cls:
04194B 3E 0C       0062*       ld a,12
04194D 5B D7       0063*   	rst.lil $10
04194F C9          0064*   	ret
041950             0065*   
041950             0066*   vdu_flip:
041950 21 5B 19 04 0067*   	ld hl,@cmd
041954 01 03 00 00 0068*   	ld bc,@end-@cmd
041958 5B DF       0069*   	rst.lil $18
04195A C9          0070*   	ret
04195B 17 00 C3    0071*   @cmd: db 23,0,0xC3
04195E             0072*   @end:
04195E             0073*   
04195E             0074*   ; VDU 16: Clear graphics area (CLG)
04195E             0075*   vdu_clg:
04195E 3E 10       0076*       ld a,16
041960 5B D7       0077*   	rst.lil $10
041962 C9          0078*   	ret
041963             0079*   
041963             0080*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041963             0081*   ; VDU 23, 7: Scrolling
041963             0082*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041963             0083*   ; inputs: a, extent; l, direction; h; speed
041963             0084*   vdu_scroll_down:
041963 32 78 19 04 0085*   	ld (@extent),a
041967 22 79 19 04 0086*   	ld (@dir),hl ; implicitly populates @speed
04196B 21 76 19 04 0087*   	ld hl,@cmd
04196F 01 05 00 00 0088*   	ld bc,@end-@cmd
041973 5B DF       0089*   	rst.lil $18     ;; Sending command to VDP
041975 C9          0090*   	ret
041976 17 07       0091*   @cmd:       db 23,7
041978 00          0092*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041979 00          0093*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04197A 00          0094*   @speed:     db 0x00 ; pixels
04197B 00          0095*   @end:		db 0x00 ; padding
04197C             0096*   
04197C             0097*   ; COLOUR MODES
04197C             0098*   ; Mode	Effect
04197C             0099*   ; 0	Set on-screen pixel to target colour value
04197C             0100*   ; 1	OR value with the on-screen pixel
04197C             0101*   ; 2	AND value with the on-screen pixel
04197C             0102*   ; 3	XOR value with the on-screen pixel
04197C             0103*   ; 4	Invert the on-screen pixel
04197C             0104*   ; 5	No operation
04197C             0105*   ; 6	AND the inverse of the specified colour with the on-screen pixel
04197C             0106*   ; 7	OR the inverse of the specified colour with the on-screen pixel
04197C             0107*   
04197C             0108*   ; VDU 17, colour: Define text colour (COLOUR)
04197C             0109*   vdu_colour_text:
04197C 32 8C 19 04 0110*   	ld (@arg),a
041980 21 8B 19 04 0111*   	ld hl,@cmd
041984 01 02 00 00 0112*   	ld bc,@end-@cmd
041988 5B DF       0113*   	rst.lil $18
04198A C9          0114*   	ret
04198B 11          0115*   @cmd: db 17
04198C 00          0116*   @arg: db 0
04198D             0117*   @end:
04198D             0118*   
04198D             0119*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04198D             0120*   ; inputs: a=mode, c=colour (add 128 to set background colour)
04198D             0121*   vdu_gcol:
04198D 32 A2 19 04 0122*   	ld (@mode),a
041991 79          0123*       ld a,c
041992 32 A3 19 04 0124*       ld (@col),a
041996 21 A1 19 04 0125*   	ld hl,@cmd
04199A 01 03 00 00 0126*   	ld bc,@end-@cmd
04199E 5B DF       0127*   	rst.lil $18
0419A0 C9          0128*   	ret
0419A1 12          0129*   @cmd:  db 18
0419A2 00          0130*   @mode: db 0
0419A3 00          0131*   @col:  db 0
0419A4             0132*   @end:
0419A4             0133*   
0419A4             0134*   
0419A4             0135*   ; VDU 28, left, bottom, right, top: Set text viewport **
0419A4             0136*   ; MIND THE LITTLE-ENDIANESS
0419A4             0137*   ; inputs: c=left,b=bottom,e=right,d=top
0419A4             0138*   ; outputs; nothing
0419A4             0139*   ; destroys: a might make it out alive
0419A4             0140*   vdu_set_txt_viewport:
0419A4 ED 43 BA 19 0141*       ld (@lb),bc
       04          
0419A9 ED 53 BC 19 0142*   	ld (@rt),de
       04          
0419AE 21 B9 19 04 0143*   	ld hl,@cmd
0419B2 01 05 00 00 0144*   	ld bc,@end-@cmd
0419B6 5B DF       0145*   	rst.lil $18
0419B8 C9          0146*   	ret
0419B9 1C          0147*   @cmd:   db 28 ; set text viewport command
0419BA 00 00       0148*   @lb: 	dw 0x0000 ; set by bc
0419BC 00 00       0149*   @rt: 	dw 0x0000 ; set by de
0419BE 00          0150*   @end:   db 0x00	  ; padding
0419BF             0151*   
0419BF             0152*   ; Wait for VBLANK interrupt
0419BF             0153*   vdu_vblank:
0419BF DD E5       0154*       PUSH 	IX
0419C1             0155*   	MOSCALL	mos_sysvars
0419C1 3E 08       0001*M1 			LD	A, function
0419C3 5B CF       0002*M1 			RST.LIL	08h
0419C5 DD 7E 00    0156*   	LD	A, (IX + sysvar_time + 0)
0419C8             0157*   @wait:
0419C8 DD BE 00    0158*       CP 	A, (IX + sysvar_time + 0)
0419CB 28 FB       0159*       JR	Z, @wait
0419CD DD E1       0160*       POP	IX
0419CF C9          0161*       RET
0419D0             0162*   
0419D0             0163*   ; VDU 29, x; y;: Set graphics origin
0419D0             0164*   ; This command sets the graphics origin.
0419D0             0165*   ; The origin is the point on the screen where the coordinates (0,0) are located.
0419D0             0166*   ; inputs: bc=x0,de=y0
0419D0             0167*   ; outputs; nothing
0419D0             0168*   ; destroys: a might make it out alive
0419D0             0169*   vdu_set_gfx_origin:
0419D0 ED 43 E6 19 0170*       ld (@x0),bc
       04          
0419D5 ED 53 E8 19 0171*       ld (@y0),de
       04          
0419DA 21 E5 19 04 0172*       ld hl,@cmd
0419DE 01 05 00 00 0173*       ld bc,@end-@cmd
0419E2 5B DF       0174*       rst.lil $18
0419E4 C9          0175*       ret
0419E5 1D          0176*   @cmd:   db 29 ; set graphics origin command
0419E6 00 00       0177*   @x0: 	dw 0x0000 ; set by bc
0419E8 00 00       0178*   @y0: 	dw 0x0000 ; set by de
0419EA 00          0179*   @end:   db 0x00	  ; padding
0419EB             0180*   
0419EB             0181*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
0419EB             0182*   ; NOTE: the order of the y-coordinate parameters are inverted
0419EB             0183*   ; 	because we have turned off logical screen scaling
0419EB             0184*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0419EB             0185*   ; outputs; nothing
0419EB             0186*   ; destroys: a might make it out alive
0419EB             0187*   vdu_set_gfx_viewport:
0419EB ED 43 0B 1A 0188*       ld (@x0),bc
       04          
0419F0 FD 22 0D 1A 0189*       ld (@y1),iy
       04          
0419F5 DD 22 0F 1A 0190*   	ld (@x1),ix
       04          
0419FA ED 53 11 1A 0191*   	ld (@y0),de
       04          
0419FF 21 0A 1A 04 0192*   	ld hl,@cmd
041A03 01 09 00 00 0193*   	ld bc,@end-@cmd
041A07 5B DF       0194*   	rst.lil $18
041A09 C9          0195*   	ret
041A0A 18          0196*   @cmd:   db 24 ; set graphics viewport command
041A0B 00 00       0197*   @x0: 	dw 0x0000 ; set by bc
041A0D 00 00       0198*   @y1: 	dw 0x0000 ; set by iy
041A0F 00 00       0199*   @x1: 	dw 0x0000 ; set by ix
041A11 00 00       0200*   @y0: 	dw 0x0000 ; set by de
041A13 00          0201*   @end:   db 0x00	  ; padding
041A14             0202*   
041A14             0203*   ; SCREEN MODES
041A14             0204*   ; ===============================
041A14             0205*   ; Mode  Horz  Vert  Cols  Refresh
041A14             0206*   ; ---   ----  ----  ----  -------
041A14             0207*   ; 11    320   240   2     60hz
041A14             0208*   ; 139   320   240   2     60hz
041A14             0209*   ; 23    512   384   2     60hz
041A14             0210*   ; 151   512   384   2     60hz
041A14             0211*   ; 6     640   240   2     60hz
041A14             0212*   ; 134   640   240   2     60hz
041A14             0213*   ; 2     640   480   2     60hz
041A14             0214*   ; 130   640   480   2     60hz
041A14             0215*   ; 17    800   600   2     60hz
041A14             0216*   ; 145   800   600   2     60hz
041A14             0217*   ; 18    1024  768   2     60hz
041A14             0218*   ; 146   1024  768   2     60hz
041A14             0219*   ; ---   ----  ----  ----  -------
041A14             0220*   ; 10    320   240   4     60hz
041A14             0221*   ; 138   320   240   4     60hz
041A14             0222*   ; 22    512   384   4     60hz
041A14             0223*   ; 150   512   384   4     60hz
041A14             0224*   ; 5     640   240   4     60hz
041A14             0225*   ; 133   640   240   4     60hz
041A14             0226*   ; 1     640   480   4     60hz
041A14             0227*   ; 129   640   480   4     60hz
041A14             0228*   ; 16    800   600   4     60hz
041A14             0229*   ; 19    1024  768   4     60hz
041A14             0230*   ; ---   ----  ----  ----  -------
041A14             0231*   ; 9     320   240   16    60hz
041A14             0232*   ; 137   320   240   16    60hz
041A14             0233*   ; 21    512   384   16    60hz
041A14             0234*   ; 149   512   384   16    60hz
041A14             0235*   ; 4     640   240   16    60hz
041A14             0236*   ; 132   640   240   16    60hz
041A14             0237*   ; 0     640   480   16    60hz
041A14             0238*   ; 7     n/a   n/a   16    60hz
041A14             0239*   ; ---   ----  ----  ----  -------
041A14             0240*   ; 8     320   240   64    60hz
041A14             0241*   ; 136   320   240   64    60hz
041A14             0242*   ; 20    512   384   64    60hz
041A14             0243*   ; 3     640   240   64    60hz
041A14             0244*   ; ---   ----  ----  ----  -------
041A14             0245*   vdu_set_screen_mode:
041A14 32 24 1A 04 0246*   	ld (@arg),a
041A18 21 23 1A 04 0247*   	ld hl,@cmd
041A1C 01 02 00 00 0248*   	ld bc,@end-@cmd
041A20 5B DF       0249*   	rst.lil $18
041A22 C9          0250*   	ret
041A23 16          0251*   @cmd: db 22 ; set screen mode
041A24 00          0252*   @arg: db 0  ; screen mode parameter
041A25             0253*   @end:
041A25             0254*   
041A25             0255*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041A25             0256*   ; inputs: a is scaling mode, 1=on, 0=off
041A25             0257*   ; note: default setting on boot is scaling ON
041A25             0258*   vdu_set_scaling:
041A25 32 37 1A 04 0259*   	ld (@arg),a
041A29 21 34 1A 04 0260*   	ld hl,@cmd
041A2D 01 04 00 00 0261*   	ld bc,@end-@cmd
041A31 5B DF       0262*   	rst.lil $18
041A33 C9          0263*   	ret
041A34 17 00 C0    0264*   @cmd: db 23,0,0xC0
041A37 00          0265*   @arg: db 0  ; scaling on/off
041A38             0266*   @end:
041A38             0267*   
041A38             0268*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041A38             0269*   ; inputs: hl=bufferId
041A38             0270*   vdu_buff_select:
041A38 22 4A 1A 04 0271*   	ld (@bufferId),hl
041A3C 21 47 1A 04 0272*   	ld hl,@cmd
041A40 01 05 00 00 0273*   	ld bc,@end-@cmd
041A44 5B DF       0274*   	rst.lil $18
041A46 C9          0275*   	ret
041A47 17 1B 20    0276*   @cmd: db 23,27,0x20
041A4A 00 00       0277*   @bufferId: dw 0x0000
041A4C 00          0278*   @end: db 0x00 ; padding
041A4D             0279*   
041A4D             0280*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041A4D             0281*   ; inputs: a=format; bc=width; de=height
041A4D             0282*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041A4D             0283*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041A4D             0284*   ; 0 	RGBA8888 (4-bytes per pixel)
041A4D             0285*   ; 1 	RGBA2222 (1-bytes per pixel)
041A4D             0286*   ; 2 	Mono/Mask (1-bit per pixel)
041A4D             0287*   ; 3 	Reserved for internal use by VDP (“native” format)
041A4D             0288*   vdu_bmp_create:
041A4D ED 43 69 1A 0289*       ld (@width),bc
       04          
041A52 ED 53 6B 1A 0290*       ld (@height),de
       04          
041A57 32 6D 1A 04 0291*       ld (@fmt),a
041A5B 21 66 1A 04 0292*   	ld hl,@cmd
041A5F 01 08 00 00 0293*   	ld bc,@end-@cmd
041A63 5B DF       0294*   	rst.lil $18
041A65 C9          0295*   	ret
041A66 17 1B 21    0296*   @cmd:       db 23,27,0x21
041A69 00 00       0297*   @width:     dw 0x0000
041A6B 00 00       0298*   @height:    dw 0x0000
041A6D 00          0299*   @fmt:       db 0x00
041A6E             0300*   @end:
041A6E             0301*   
041A6E             0302*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041A6E             0303*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041A6E             0304*   vdu_load_img_rgba2_to_8:
041A6E             0305*   ; backup the target buffer id and image dimensions
041A6E E5          0306*       push hl
041A6F D5          0307*       push de
041A70 C5          0308*       push bc
041A71             0309*   ; load the rgba2 image to working buffer 65534
041A71 21 FE FF 00 0310*       ld hl,65534 ; temporary working buffer id
041A75 CD 78 1B 04 0311*   	call vdu_load_buffer_from_file
041A79             0312*   ; restore the image dimensions and target buffer id
041A79 C1          0313*       pop bc
041A7A D1          0314*       pop de
041A7B E1          0315*       pop hl
041A7C             0316*   ; fall through to vdu_rgba2_to_8
041A7C             0317*   
041A7C             0318*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041A7C             0319*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041A7C             0320*   ; the "expand bitmap" command is:
041A7C             0321*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041A7C             0322*   ; and then to reverse the byte order to fix endian-ness:
041A7C             0323*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041A7C             0324*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041A7C             0325*   ; VDU 23,27,&20,targetBufferID%;
041A7C             0326*   ; VDU 23,27,&21,width%;height%;0
041A7C             0327*   ; -------------------------------------------------------------------
041A7C             0328*   ; inputs: bc,de image width,height ; hl = targetBufferId
041A7C             0329*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041A7C             0330*   vdu_rgba2_to_8:
041A7C             0331*   ; load the image dimensions and buffer id parameters
041A7C ED 43 D8 1A 0332*       ld (@width),bc
       04          
041A81 ED 53 DA 1A 0333*       ld (@height),de
       04          
041A86 22 BD 1A 04 0334*       ld (@bufferId0),hl
041A8A 22 CA 1A 04 0335*       ld (@bufferId2),hl
041A8E 22 D3 1A 04 0336*       ld (@bufferId1),hl
041A92             0337*   ; clean up bytes that got stomped on by the ID loads
041A92 3E 48       0338*       ld a,0x48
041A94 32 BF 1A 04 0339*       ld (@bufferId0+2),a
041A98 3E 17       0340*       ld a,23
041A9A 32 D5 1A 04 0341*       ld (@bufferId1+2),a
041A9E 3E 18       0342*       ld a,24
041AA0 32 CC 1A 04 0343*       ld (@bufferId2+2),a
041AA4 AF          0344*       xor a
041AA5 32 DC 1A 04 0345*       ld (@height+2),a
041AA9             0346*   ; send the vdu command strings
041AA9 21 B4 1A 04 0347*       ld hl,@beg
041AAD 01 29 00 00 0348*       ld bc,@end-@beg
041AB1 5B DF       0349*       rst.lil $18
041AB3 C9          0350*       ret
041AB4             0351*   @beg:
041AB4             0352*   ; Command 14: Consolidate blocks in a buffer
041AB4             0353*   ; VDU 23, 0, &A0, bufferId; 14
041AB4 17 00 A0    0354*       db 23,0,0xA0
041AB7 FE FF       0355*       dw 65534 ; workingBufferId
041AB9 0E          0356*       db 14 ; consolidate blocks
041ABA             0357*   ; the "expand bitmap" command is:
041ABA             0358*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041ABA 17 00 A0    0359*       db 23,0,0xA0
041ABD 00 00       0360*   @bufferId0: dw 0x0000 ; targetBufferId
041ABF 48          0361*       db 0x48 ; given as decimal command 72 in the docs
041AC0 02          0362*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041AC1 FE FF       0363*       dw 65534 ; sourceBufferId
041AC3 00 7F BF FF 0364*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041AC7             0365*   ; reverse the byte order to fix endian-ness:
041AC7             0366*   ; Command 24: Reverse the order of data of blocks within a buffer
041AC7             0367*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041AC7             0368*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041AC7 17 00 A0    0369*       db 23,0,0xA0
041ACA 00 00       0370*   @bufferId2:    dw 0x0000 ; targetBufferId
041ACC 18          0371*       db 24 ; reverse byte order
041ACD 04          0372*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041ACE 04 00       0373*       dw 4 ; size (4 bytes)
041AD0             0374*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041AD0             0375*   ; VDU 23,27,&20,targetBufferID%;
041AD0 17 1B 20    0376*       db 23,27,0x20 ; select bitmap
041AD3 00 00       0377*   @bufferId1: dw 0x0000 ; targetBufferId
041AD5             0378*   ; VDU 23,27,&21,width%;height%;0
041AD5 17 1B 21    0379*       db 23,27,0x21 ; create bitmap from buffer
041AD8 00 00       0380*   @width: dw 0x0000
041ADA 00 00       0381*   @height: dw 0x0000
041ADC 00          0382*       db 0x00 ; rgba8888 format
041ADD             0383*   @end:
041ADD             0384*   
041ADD             0385*   ; scratch variables
041ADD 00 00 00    0386*   bufferId0: dl 0x000000
041AE0 00 00 00    0387*   bufferId1: dl 0x000000
041AE3             0388*   
041AE3             0389*   ; load a vdu buffer from local memory
041AE3             0390*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041AE3             0391*   vdu_load_buffer:
041AE3 ED 43 0C 1B 0392*       ld (@length),bc
       04          
041AE8 D5          0393*       push de ; save data pointer
041AE9             0394*   ; send the vdu command string
041AE9 7D          0395*       ld a,l
041AEA 32 09 1B 04 0396*       ld (@bufferId),a
041AEE 7C          0397*       ld a,h
041AEF 32 0A 1B 04 0398*       ld (@bufferId+1),a
041AF3 21 06 1B 04 0399*       ld hl,@cmd
041AF7 01 08 00 00 0400*       ld bc,@end-@cmd
041AFB 5B DF       0401*       rst.lil $18
041AFD             0402*   ; send the buffer data
041AFD E1          0403*       pop hl ; pointer to data
041AFE ED 4B 0C 1B 0404*       ld bc,(@length)
       04          
041B03 5B DF       0405*       rst.lil $18 ; send it
041B05 C9          0406*       ret
041B06             0407*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041B06 17 00 A0    0408*   @cmd:       db 23,0,0xA0
041B09 00 00       0409*   @bufferId:	dw 0x0000
041B0B 00          0410*   		    db 0 ; load buffer
041B0C 00 00       0411*   @length:	dw 0x0000
041B0E 00          0412*   @end: db 0 ; padding
041B0F             0413*   
041B0F             0414*   ; clear a buffer
041B0F             0415*   ; inputs: hl = bufferId
041B0F             0416*   vdu_clear_buffer:
041B0F 7D          0417*       ld a,l
041B10 32 27 1B 04 0418*       ld (@bufferId),a
041B14 7C          0419*       ld a,h
041B15 32 28 1B 04 0420*       ld (@bufferId+1),a
041B19 21 24 1B 04 0421*       ld hl,@cmd
041B1D 01 06 00 00 0422*       ld bc,@end-@cmd
041B21 5B DF       0423*       rst.lil $18
041B23 C9          0424*       ret
041B24 17 00 A0    0425*   @cmd:       db 23,0,0xA0
041B27 00 00       0426*   @bufferId:	dw 0x0000
041B29 02          0427*   		    db 2 ; clear buffer
041B2A             0428*   @end:
041B2A             0429*   
041B2A             0430*   vdu_clear_all_buffers:
041B2A             0431*   ; clear all buffers
041B2A 21 35 1B 04 0432*       ld hl,@beg
041B2E 01 06 00 00 0433*       ld bc,@end-@beg
041B32 5B DF       0434*       rst.lil $18
041B34 C9          0435*       ret
041B35 17 00 A0    0436*   @beg: db 23,0,$A0
041B38 FF FF       0437*         dw -1 ; clear all buffers
041B3A 02          0438*         db 2  ; command 2: clear a buffer
041B3B             0439*   @end:
041B3B             0440*   
041B3B             0441*   ; Command 14: Consolidate blocks in a buffer
041B3B             0442*   vdu_consolidate_buffer:
041B3B             0443*   ; set parameters for vdu call
041B3B 7D          0444*       ld a,l
041B3C 32 53 1B 04 0445*       ld (@bufferId),a
041B40 7C          0446*       ld a,h
041B41 32 54 1B 04 0447*       ld (@bufferId+1),a
041B45 21 50 1B 04 0448*       ld hl,@beg
041B49 01 06 00 00 0449*       ld bc,@end-@beg
041B4D 5B DF       0450*       rst.lil $18
041B4F C9          0451*       ret
041B50             0452*   ; VDU 23, 0, &A0, bufferId; 14
041B50 17 00 A0    0453*   @beg: db 23,0,0xA0
041B53 00 00       0454*   @bufferId: dw 0x0000
041B55 0E          0455*              db 14
041B56             0456*   @end:
041B56             0457*   
041B56             0458*   ; load an image file to a buffer and make it a bitmap
041B56             0459*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041B56             0460*   vdu_load_img:
041B56             0461*   ; back up image type and dimension parameters
041B56 22 DD 1A 04 0462*       ld (bufferId0),hl
041B5A F5          0463*       push af
041B5B C5          0464*   	push bc
041B5C D5          0465*   	push de
041B5D             0466*   ; load the image
041B5D CD 78 1B 04 0467*   	call vdu_load_buffer_from_file
041B61             0468*   ; now make it a bitmap
041B61 2A DD 1A 04 0469*       ld hl,(bufferId0)
041B65 CD 3B 1B 04 0470*       call vdu_consolidate_buffer
041B69 2A DD 1A 04 0471*       ld hl,(bufferId0)
041B6D CD 38 1A 04 0472*       call vdu_buff_select
041B71 D1          0473*   	pop de ; image height
041B72 C1          0474*   	pop bc ; image width
041B73 F1          0475*   	pop af ; image type
041B74 C3 4D 1A 04 0476*   	jp vdu_bmp_create ; will return to caller from there
041B78             0477*   
041B78             0478*   ; inputs: hl = bufferId; iy = pointer to filename
041B78             0479*   vdu_load_buffer_from_file:
041B78 22 DD 1A 04 0480*       ld (bufferId0),hl
041B7C             0481*   
041B7C             0482*   ; clear target buffer
041B7C CD 0F 1B 04 0483*       call vdu_clear_buffer
041B80             0484*   
041B80             0485*   ; open the file in read mode
041B80             0486*   ; Open a file
041B80             0487*   ; HLU: Filename
041B80             0488*   ;   C: Mode
041B80             0489*   ; Returns:
041B80             0490*   ;   A: Filehandle, or 0 if couldn't open
041B80 FD E5       0491*   	push iy ; pointer to filename
041B82 E1          0492*   	pop hl
041B83 0E 01       0493*   	ld c,fa_read
041B85             0494*       MOSCALL mos_fopen
041B85 3E 0A       0001*M1 			LD	A, function
041B87 5B CF       0002*M1 			RST.LIL	08h
041B89 32 C4 1B 04 0495*       ld (@filehandle),a
041B8D             0496*   
041B8D             0497*   @read_file:
041B8D             0498*   ; Read a block of data from a file
041B8D             0499*   ;   C: Filehandle
041B8D             0500*   ; HLU: Pointer to where to write the data to
041B8D             0501*   ; DEU: Number of bytes to read
041B8D             0502*   ; Returns:
041B8D             0503*   ; DEU: Number of bytes read
041B8D 3A C4 1B 04 0504*       ld a,(@filehandle)
041B91 4F          0505*       ld c,a
041B92 21 00 E0 B7 0506*       ld hl,filedata
041B96 11 00 20 00 0507*       ld de,8192 ; max we can read into onboard sram at one time
041B9A             0508*       MOSCALL mos_fread
041B9A 3E 1A       0001*M1 			LD	A, function
041B9C 5B CF       0002*M1 			RST.LIL	08h
041B9E             0509*   
041B9E             0510*   ; test de for zero bytes read
041B9E 21 00 00 00 0511*       ld hl,0
041BA2 AF          0512*       xor a ; clear carry
041BA3 ED 52       0513*       sbc hl,de
041BA5 CA BB 1B 04 0514*       jp z,@close_file
041BA9             0515*   
041BA9             0516*   ; load a vdu buffer from local memory
041BA9             0517*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041BA9 2A DD 1A 04 0518*       ld hl,(bufferId0)
041BAD D5          0519*       push de ; chunksize
041BAE C1          0520*       pop bc
041BAF 11 00 E0 B7 0521*       ld de,filedata
041BB3 CD E3 1A 04 0522*       call vdu_load_buffer
041BB7             0523*   
041BB7             0524*   ; read the next block
041BB7 C3 8D 1B 04 0525*       jp @read_file
041BBB             0526*   
041BBB             0527*   ; close the file
041BBB             0528*   @close_file:
041BBB 3A C4 1B 04 0529*       ld a,(@filehandle)
041BBF             0530*       MOSCALL mos_fclose
041BBF 3E 0B       0001*M1 			LD	A, function
041BC1 5B CF       0002*M1 			RST.LIL	08h
041BC3 C9          0531*       ret ; vdu_load_buffer_from_file
041BC4             0532*   
041BC4 00          0533*   @filehandle: db 0 ; file handle
041BC5 00 00 00    0534*   @fil: dl 0 ; pointer to FIL struct
041BC8             0535*   
041BC8 00 00 00    0536*   @chunkpointer: dl 0 ; pointer to current chunk
041BCB             0537*   
041BCB             0538*   ; File information structure (FILINFO)
041BCB             0539*   @filinfo:
041BCB 00 00 00 00 0540*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041BCF 00 00       0541*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041BD1 00 00       0542*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041BD3 00          0543*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041BD4 00 00 00 00 0544*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041BE1 00 00 00 00 0545*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041CE1             0040        include "vdu_fonts.inc"
041CE1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041D00             0002*   ; select font
041D00             0003*   ; inputs: hl = bufferId, a = font flags
041D00             0004*   ; Flags:
041D00             0005*   ; Bit	Description
041D00             0006*   ; 0	Adjust cursor position to ensure text baseline is aligned
041D00             0007*   ;   0: Do not adjust cursor position (best for changing font on a new line)
041D00             0008*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
041D00             0009*   ; 1-7	Reserved for future use
041D00             0010*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041D00             0011*   vdu_font_select:
041D00 22 17 1D 04 0012*       ld (@bufferId),hl
041D04 32 19 1D 04 0013*       ld (@flags),a
041D08 21 13 1D 04 0014*       ld hl,@cmd
041D0C 01 07 00 00 0015*       ld bc,@end-@cmd
041D10 5B DF       0016*       rst.lil $18
041D12 C9          0017*       ret
041D13 17 00 95 00 0018*   @cmd: db 23, 0, 0x95, 0
041D17 00 00       0019*   @bufferId: dw 0x0000
041D19 00          0020*   @flags: db 0x00
041D1A             0021*   @end:
041D1A             0022*   
041D1A             0023*   ; create font from buffer
041D1A             0024*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041D1A             0025*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041D1A             0026*   vdu_font_create:
041D1A 22 3F 1D 04 0027*       ld (@bufferId),hl
041D1E ED 53 41 1D 0028*       ld (@width),de ; also loads height
       04          
041D23 32 44 1D 04 0029*       ld (@flags),a
041D27 7A          0030*       ld a,d ; height
041D28 32 43 1D 04 0031*       ld (@ascent),a ; ascent = height
041D2C             0032*   ; consolidate buffer
041D2C CD 3B 1B 04 0033*       call vdu_consolidate_buffer
041D30             0034*   ; create font
041D30 21 3B 1D 04 0035*       ld hl,@cmd
041D34 01 0A 00 00 0036*       ld bc,@end-@cmd
041D38 5B DF       0037*       rst.lil $18
041D3A C9          0038*       ret
041D3B 17 00 95 01 0039*   @cmd: db 23, 0, 0x95, 1
041D3F 00 00       0040*   @bufferId: dw 0x0000
041D41 00          0041*   @width: db 0x00
041D42 00          0042*   @height: db 0x00
041D43 00          0043*   @ascent: db 0x00
041D44 00          0044*   @flags: db 0x00
041D45             0045*   @end:
041D45             0046*   
041D45             0047*   ; set or adjust font property
041D45             0048*   ; inputs: hl = bufferId, a = field, de = value
041D45             0049*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041D45             0050*   vdu_font_property:
041D45 22 61 1D 04 0051*       ld (@bufferId),hl
041D49 32 63 1D 04 0052*       ld (@field),a
041D4D ED 53 64 1D 0053*       ld (@value),de
       04          
041D52 21 5D 1D 04 0054*       ld hl,@cmd
041D56 01 09 00 00 0055*       ld bc,@end-@cmd
041D5A 5B DF       0056*       rst.lil $18
041D5C C9          0057*       ret
041D5D 17 00 95 02 0058*   @cmd: db 23, 0, 0x95, 2
041D61 00 00       0059*   @bufferId: dw 0x0000
041D63 00          0060*   @field: db 0x00
041D64 00 00       0061*   @value: dw 0x0000
041D66 00          0062*   @end: db 0x00 ; padding
041D67             0063*   
041D67             0064*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041D67             0065*   
041D67             0066*   ; Clear/Delete font
041D67             0067*   ; inputs: hl = bufferId
041D67             0068*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041D67             0069*   vdu_font_clear:
041D67 22 7A 1D 04 0070*       ld (@bufferId),hl
041D6B 21 76 1D 04 0071*       ld hl,@cmd
041D6F 01 06 00 00 0072*       ld bc,@end-@cmd
041D73 5B DF       0073*       rst.lil $18
041D75 C9          0074*       ret
041D76 17 00 95 04 0075*   @cmd: db 23, 0, 0x95, 4
041D7A 00 00       0076*   @bufferId: dw 0x0000
041D7C 00          0077*   @end: db 0x00 ; padding
041D7D             0078*   
041D7D             0079*   ; Copy system font to buffer
041D7D             0080*   ; inputs: hl = bufferId
041D7D             0081*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041D7D             0082*   vdu_font_copy_system:
041D7D 22 90 1D 04 0083*       ld (@bufferId),hl
041D81 21 8C 1D 04 0084*       ld hl,@cmd
041D85 01 06 00 00 0085*       ld bc,@end-@cmd
041D89 5B DF       0086*       rst.lil $18
041D8B C9          0087*       ret
041D8C 17 00 95 05 0088*   @cmd: db 23, 0, 0x95, 5
041D90 00 00       0089*   @bufferId: dw 0x0000
041D92 00          0090*   @end: db 0x00 ; padding
041D93             0041        include "vdu_plot.inc"
041D93 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
041E00             0002*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041E00             0003*   ; PLOT code 	(Decimal) 	Effect
041E00             0004*   ; &00-&07 	0-7 	Solid line, includes both ends
041E00             0005*   plot_sl_both: equ 0x00
041E00             0006*   
041E00             0007*   ; &08-&0F 	8-15 	Solid line, final point omitted
041E00             0008*   plot_sl_first: equ 0x08
041E00             0009*   
041E00             0010*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
041E00             0011*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
041E00             0012*   
041E00             0013*   ; &20-&27 	32-39 	Solid line, first point omitted
041E00             0014*   plot_sl_last: equ 0x20
041E00             0015*   
041E00             0016*   ; &28-&2F 	40-47 	Solid line, both points omitted
041E00             0017*   plot_sl_none: equ 0x28
041E00             0018*   
041E00             0019*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
041E00             0020*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
041E00             0021*   
041E00             0022*   ; &40-&47 	64-71 	Point plot
041E00             0023*   plot_pt: equ 0x40
041E00             0024*   
041E00             0025*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
041E00             0026*   plot_lf_lr_non_bg: equ 0x48
041E00             0027*   
041E00             0028*   ; &50-&57 	80-87 	Triangle fill
041E00             0029*   plot_tf: equ 0x50
041E00             0030*   
041E00             0031*   ; &58-&5F 	88-95 	Line fill right to background §§
041E00             0032*   plot_lf_r_bg: equ 0x58
041E00             0033*   
041E00             0034*   ; &60-&67 	96-103 	Rectangle fill
041E00             0035*   plot_rf: equ 0x60
041E00             0036*   
041E00             0037*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
041E00             0038*   plot_lf_lr_fg: equ 0x60
041E00             0039*   
041E00             0040*   ; &70-&77 	112-119 	Parallelogram fill
041E00             0041*   plot_pf: equ 0x70
041E00             0042*   
041E00             0043*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
041E00             0044*   plot_lf_r_non_fg: equ 0x78
041E00             0045*   
041E00             0046*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
041E00             0047*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
041E00             0048*   
041E00             0049*   ; &90-&97 	144-151 	Circle outline
041E00             0050*   plot_co: equ 0x90
041E00             0051*   
041E00             0052*   ; &98-&9F 	152-159 	Circle fill
041E00             0053*   plot_cf: equ 0x98
041E00             0054*   
041E00             0055*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
041E00             0056*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
041E00             0057*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
041E00             0058*   
041E00             0059*   ; &B8-&BF 	184-191 	Rectangle copy/move
041E00             0060*   plot_rcm: equ 0xB8
041E00             0061*   
041E00             0062*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
041E00             0063*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
041E00             0064*   ; &D0-&D7 	208-215 	Not defined
041E00             0065*   ; &D8-&DF 	216-223 	Not defined
041E00             0066*   ; &E0-&E7 	224-231 	Not defined
041E00             0067*   
041E00             0068*   ; &E8-&EF 	232-239 	Bitmap plot §
041E00             0069*   plot_bmp: equ 0xE8
041E00             0070*   
041E00             0071*   ; &F0-&F7 	240-247 	Not defined
041E00             0072*   ; &F8-&FF 	248-255 	Not defined
041E00             0073*   
041E00             0074*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
041E00             0075*   ; Agon Console8 VDP 2.2.0
041E00             0076*   
041E00             0077*   ; Within each group of eight plot codes, the effects are as follows:
041E00             0078*   ; Plot code 	Effect
041E00             0079*   ; 0 	Move relative
041E00             0080*   mv_rel: equ 0
041E00             0081*   
041E00             0082*   ; 1 	Plot relative in current foreground colour
041E00             0083*   dr_rel_fg: equ 1
041E00             0084*   
041E00             0085*   ; 2 	Not supported (Plot relative in logical inverse colour)
041E00             0086*   ; 3 	Plot relative in current background colour
041E00             0087*   dr_rel_bg: equ 3
041E00             0088*   
041E00             0089*   ; 4 	Move absolute
041E00             0090*   mv_abs: equ 4
041E00             0091*   
041E00             0092*   ; 5 	Plot absolute in current foreground colour
041E00             0093*   dr_abs_fg: equ 5
041E00             0094*   
041E00             0095*   ; 6 	Not supported (Plot absolute in logical inverse colour)
041E00             0096*   ; 7 	Plot absolute in current background colour
041E00             0097*   dr_abs_bg: equ 7
041E00             0098*   
041E00             0099*   ; Codes 0-3 use the position data provided as part of the command
041E00             0100*   ; as a relative position, adding the position given to the current
041E00             0101*   ; graphical cursor position. Codes 4-7 use the position data provided
041E00             0102*   ; as part of the command as an absolute position, setting the current
041E00             0103*   ; graphical cursor position to the position given.
041E00             0104*   
041E00             0105*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
041E00             0106*   ; current pixel colour. These operations cannot currently be supported
041E00             0107*   ; by the graphics system the Agon VDP uses, so these codes are not
041E00             0108*   ; supported. Support for these codes may be added in a future version
041E00             0109*   ; of the VDP firmware.
041E00             0110*   
041E00             0111*   ; 16 colour palette constants
041E00             0112*   c_black: equ 0
041E00             0113*   c_red_dk: equ 1
041E00             0114*   c_green_dk: equ 2
041E00             0115*   c_yellow_dk: equ 3
041E00             0116*   c_blue_dk: equ 4
041E00             0117*   c_magenta_dk: equ 5
041E00             0118*   c_cyan_dk: equ 6
041E00             0119*   c_grey: equ 7
041E00             0120*   c_grey_dk: equ 8
041E00             0121*   c_red: equ 9
041E00             0122*   c_green: equ 10
041E00             0123*   c_yellow: equ 11
041E00             0124*   c_blue: equ 12
041E00             0125*   c_magenta: equ 13
041E00             0126*   c_cyan: equ 14
041E00             0127*   c_white: equ 15
041E00             0128*   
041E00             0129*   ; VDU 25, mode, x; y;: PLOT command
041E00             0130*   ; inputs: a=mode, bc=x0, de=y0
041E00             0131*   vdu_plot:
041E00 32 1A 1E 04 0132*       ld (@mode),a
041E04 ED 43 1B 1E 0133*       ld (@x0),bc
       04          
041E09 ED 53 1D 1E 0134*       ld (@y0),de
       04          
041E0E 21 19 1E 04 0135*   	ld hl,@cmd
041E12 01 06 00 00 0136*   	ld bc,@end-@cmd
041E16 5B DF       0137*   	rst.lil $18
041E18 C9          0138*   	ret
041E19 19          0139*   @cmd:   db 25
041E1A 00          0140*   @mode:  db 0
041E1B 00 00       0141*   @x0: 	dw 0
041E1D 00 00       0142*   @y0: 	dw 0
041E1F 00          0143*   @end:   db 0 ; extra byte to soak up deu
041E20             0144*   
041E20             0145*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041E20             0146*   ; &E8-&EF 	232-239 	Bitmap plot §
041E20             0147*   ; VDU 25, mode, x; y;: PLOT command
041E20             0148*   ; inputs: bc=x0, de=y0
041E20             0149*   ; prerequisites: vdu_buff_select
041E20             0150*   vdu_plot_bmp:
041E20 ED 43 37 1E 0151*       ld (@x0),bc
       04          
041E25 ED 53 39 1E 0152*       ld (@y0),de
       04          
041E2A 21 35 1E 04 0153*   	ld hl,@cmd
041E2E 01 06 00 00 0154*   	ld bc,@end-@cmd
041E32 5B DF       0155*   	rst.lil $18
041E34 C9          0156*   	ret
041E35 19          0157*   @cmd:   db 25
041E36 ED          0158*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041E37 00 00       0159*   @x0: 	dw 0x0000
041E39 00 00       0160*   @y0: 	dw 0x0000
041E3B 00          0161*   @end:   db 0x00 ; padding
041E3C             0162*   
041E3C             0163*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041E3C             0164*   ; &E8-&EF 	232-239 	Bitmap plot §
041E3C             0165*   ; VDU 25, mode, x; y;: PLOT command
041E3C             0166*   ; inputs: bc=x0, de=y0
041E3C             0167*   ; USING 16.8 FIXED POINT COORDINATES
041E3C             0168*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041E3C             0169*   ;   the fractional portiion of the inputs are truncated
041E3C             0170*   ;   leaving only the 16-bit integer portion
041E3C             0171*   ; prerequisites: vdu_buff_select
041E3C             0172*   vdu_plot_bmp168:
041E3C             0173*   ; populate in the reverse of normal to keep the
041E3C             0174*   ; inputs from stomping on each other
041E3C ED 53 5A 1E 0175*       ld (@y0-1),de
       04          
041E41 ED 43 58 1E 0176*       ld (@x0-1),bc
       04          
041E46 3E ED       0177*       ld a,plot_bmp+dr_abs_fg ; 0xED
041E48 32 58 1E 04 0178*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
041E4C 21 57 1E 04 0179*   	ld hl,@cmd
041E50 01 06 00 00 0180*   	ld bc,@end-@cmd
041E54 5B DF       0181*   	rst.lil $18
041E56 C9          0182*   	ret
041E57 19          0183*   @cmd:   db 25
041E58 ED          0184*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041E59 00 00       0185*   @x0: 	dw 0x0000
041E5B 00 00       0186*   @y0: 	dw 0x0000
041E5D             0187*   @end:  ; no padding required b/c we shifted de right
041E5D             0188*   
041E5D             0189*   ; draw a filled rectangle
041E5D             0190*   vdu_plot_rf:
041E5D ED 43 84 1E 0191*       ld (@x0),bc
       04          
041E62 ED 53 86 1E 0192*       ld (@y0),de
       04          
041E67 DD 22 8A 1E 0193*       ld (@x1),ix
       04          
041E6C FD 22 8C 1E 0194*       ld (@y1),iy
       04          
041E71 3E 19       0195*       ld a,25 ; we have to reload the 2nd plot command
041E73 32 88 1E 04 0196*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041E77 21 82 1E 04 0197*   	ld hl,@cmd0
041E7B 01 0C 00 00 0198*   	ld bc,@end-@cmd0
041E7F 5B DF       0199*   	rst.lil $18
041E81 C9          0200*       ret
041E82 19          0201*   @cmd0:  db 25 ; plot
041E83 04          0202*   @arg0:  db plot_sl_both+mv_abs
041E84 00 00       0203*   @x0:    dw 0x0000
041E86 00 00       0204*   @y0:    dw 0x0000
041E88 19          0205*   @cmd1:  db 25 ; plot
041E89 65          0206*   @arg1:  db plot_rf+dr_abs_fg
041E8A 00 00       0207*   @x1:    dw 0x0000
041E8C 00 00       0208*   @y1:    dw 0x0000
041E8E 00          0209*   @end:   db 0x00 ; padding
041E8F             0210*   
041E8F             0211*   ; draw a filled circle
041E8F             0212*   vdu_plot_cf:
041E8F ED 43 B6 1E 0213*       ld (@x0),bc
       04          
041E94 ED 53 B8 1E 0214*       ld (@y0),de
       04          
041E99 DD 22 BC 1E 0215*       ld (@x1),ix
       04          
041E9E FD 22 BE 1E 0216*       ld (@y1),iy
       04          
041EA3 3E 19       0217*       ld a,25 ; we have to reload the 2nd plot command
041EA5 32 BA 1E 04 0218*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041EA9 21 B4 1E 04 0219*   	ld hl,@cmd0
041EAD 01 0C 00 00 0220*   	ld bc,@end-@cmd0
041EB1 5B DF       0221*   	rst.lil $18
041EB3 C9          0222*       ret
041EB4 19          0223*   @cmd0:  db 25 ; plot
041EB5 04          0224*   @arg0:  db plot_sl_both+mv_abs
041EB6 00 00       0225*   @x0:    dw 0x0000
041EB8 00 00       0226*   @y0:    dw 0x0000
041EBA 19          0227*   @cmd1:  db 25 ; plot
041EBB 9D          0228*   @arg1:  db plot_cf+dr_abs_fg
041EBC 00 00       0229*   @x1:    dw 0x0000
041EBE 00 00       0230*   @y1:    dw 0x0000
041EC0 00          0231*   @end:   db 0x00 ; padding
041EC1             0042        include "vdu_sprites.inc"
041EC1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041F00             0002*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041F00             0003*   ; the VDP can support up to 256 sprites. They must be defined
041F00             0004*   ; contiguously, and so the first sprite is sprite 0.
041F00             0005*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041F00             0006*   ; Once a selection of sprites have been defined, you can activate
041F00             0007*   ; them using the VDU 23, 27, 7, n command, where n is the number
041F00             0008*   ; of sprites to activate. This will activate the first n sprites,
041F00             0009*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041F00             0010*   
041F00             0011*   ; A single sprite can have multiple "frames", referring to
041F00             0012*   ; different bitmaps.
041F00             0013*   ; (These bitmaps do not need to be the same size.)
041F00             0014*   ; This allows a sprite to include an animation sequence,
041F00             0015*   ; which can be stepped through one frame at a time, or picked
041F00             0016*   ; in any order.
041F00             0017*   
041F00             0018*   ; Any format of bitmap can be used as a sprite frame. It should
041F00             0019*   ; be noted however that "native" format bitmaps are not
041F00             0020*   ; recommended for use as sprite frames, as they cannot get
041F00             0021*   ; erased from the screen. (As noted above, the "native" bitmap
041F00             0022*   ; format is not really intended for general use.) This is part
041F00             0023*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041F00             0024*   ; screen are now stored in RGBA2222 format.
041F00             0025*   
041F00             0026*   ; An "active" sprite can be hidden, so it will stop being drawn,
041F00             0027*   ; and then later shown again.
041F00             0028*   
041F00             0029*   ; Moving sprites around the screen is done by changing the
041F00             0030*   ; position of the sprite. This can be done either by setting
041F00             0031*   ; the absolute position of the sprite, or by moving the sprite
041F00             0032*   ; by a given number of pixels. (Sprites are positioned using
041F00             0033*   ; pixel coordinates, and not by the logical OS coordinate system.)
041F00             0034*   ; In the current sprite system, sprites will not update their
041F00             0035*   ; position on-screen until either another drawing operation is
041F00             0036*   ; performed or an explicit VDU 23, 27, 15 command is performed.
041F00             0037*   
041F00             0038*   ; VDU 23, 27, 4, n: Select sprite n
041F00             0039*   ; inputs: a is the 8-bit sprite id
041F00             0040*   vdu_sprite_select:
041F00 32 12 1F 04 0041*       ld (@sprite),a
041F04 21 0F 1F 04 0042*       ld hl,@cmd
041F08 01 04 00 00 0043*       ld bc,@end-@cmd
041F0C 5B DF       0044*       rst.lil $18
041F0E C9          0045*       ret
041F0F 17 1B 04    0046*   @cmd:    db 23,27,4
041F12 00          0047*   @sprite: db 0x00
041F13             0048*   @end:
041F13             0049*   
041F13             0050*   ; VDU 23, 27, 5: Clear frames in current sprite
041F13             0051*   ; inputs: none
041F13             0052*   ; prerequisites: vdu_sprite_select
041F13             0053*   vdu_sprite_clear_frames:
041F13 21 1E 1F 04 0054*       ld hl,@cmd
041F17 01 03 00 00 0055*       ld bc,@end-@cmd
041F1B 5B DF       0056*       rst.lil $18
041F1D C9          0057*       ret
041F1E 17 1B 05    0058*   @cmd: db 23,27,5
041F21             0059*   @end:
041F21             0060*   
041F21             0061*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
041F21             0062*   ; inputs: a is the 8-bit bitmap number
041F21             0063*   ; prerequisites: vdu_sprite_select
041F21             0064*   vdu_sprite_add_bmp:
041F21 32 33 1F 04 0065*       ld (@bmp),a
041F25 21 30 1F 04 0066*       ld hl,@cmd
041F29 01 04 00 00 0067*       ld bc,@end-@cmd
041F2D 5B DF       0068*       rst.lil $18
041F2F C9          0069*       ret
041F30 17 1B 06    0070*   @cmd: db 23,27,6
041F33 00          0071*   @bmp: db 0x00
041F34             0072*   @end:
041F34             0073*   
041F34             0074*   ; VDU 23, 27, 7, n: Activate n sprites
041F34             0075*   ; inputs: a is the number of sprites to activate
041F34             0076*   ; prerequisites: each sprite activated must have at least one frame attached to it
041F34             0077*   vdu_sprite_activate:
041F34 32 46 1F 04 0078*       ld (@num),a
041F38 21 43 1F 04 0079*       ld hl,@cmd
041F3C 01 04 00 00 0080*       ld bc,@end-@cmd
041F40 5B DF       0081*       rst.lil $18
041F42 C9          0082*       ret
041F43 17 1B 07    0083*   @cmd: db 23,27,7
041F46 00          0084*   @num: db 0x00
041F47             0085*   @end:
041F47             0086*   
041F47             0087*   ; VDU 23, 27, 8: Select next frame of current sprite
041F47             0088*   ; inputs: none
041F47             0089*   ; prerequisites: vdu_sprite_select
041F47             0090*   vdu_sprite_next_frame:
041F47 21 52 1F 04 0091*       ld hl,@cmd
041F4B 01 03 00 00 0092*       ld bc,@end-@cmd
041F4F 5B DF       0093*       rst.lil $18
041F51 C9          0094*       ret
041F52 17 1B 08    0095*   @cmd: db 23,27,8
041F55             0096*   @end:
041F55             0097*   
041F55             0098*   ; VDU 23, 27, 9: Select previous frame of current sprite
041F55             0099*   ; inputs: none
041F55             0100*   ; prerequisites: vdu_sprite_select
041F55             0101*   vdu_sprite_prev_frame:
041F55 21 60 1F 04 0102*       ld hl,@cmd
041F59 01 03 00 00 0103*       ld bc,@end-@cmd
041F5D 5B DF       0104*       rst.lil $18
041F5F C9          0105*       ret
041F60 17 1B 09    0106*   @cmd: db 23,27,9
041F63             0107*   @end:
041F63             0108*   
041F63             0109*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
041F63             0110*   ; inputs: a is frame number to select
041F63             0111*   ; prerequisites: vdu_sprite_select
041F63             0112*   vdu_sprite_select_frame:
041F63 32 75 1F 04 0113*       ld (@frame),a
041F67 21 72 1F 04 0114*       ld hl,@cmd
041F6B 01 04 00 00 0115*       ld bc,@end-@cmd
041F6F 5B DF       0116*       rst.lil $18
041F71 C9          0117*       ret
041F72 17 1B 0A    0118*   @cmd:    db 23,27,10
041F75 00          0119*   @frame:  db 0x00
041F76             0120*   @end:
041F76             0121*   
041F76             0122*   ; VDU 23, 27, 11: Show current sprite
041F76             0123*   ; inputs: none
041F76             0124*   ; prerequisites: vdu_sprite_select
041F76             0125*   vdu_sprite_show:
041F76 21 81 1F 04 0126*       ld hl,@cmd
041F7A 01 03 00 00 0127*       ld bc,@end-@cmd
041F7E 5B DF       0128*       rst.lil $18
041F80 C9          0129*       ret
041F81 17 1B 0B    0130*   @cmd: db 23,27,11
041F84             0131*   @end:
041F84             0132*   
041F84             0133*   ; VDU 23, 27, 12: Hide current sprite
041F84             0134*   ; inputs: none
041F84             0135*   ; prerequisites: vdu_sprite_select
041F84             0136*   vdu_sprite_hide:
041F84 21 8F 1F 04 0137*       ld hl,@cmd
041F88 01 03 00 00 0138*       ld bc,@end-@cmd
041F8C 5B DF       0139*       rst.lil $18
041F8E C9          0140*       ret
041F8F 17 1B 0C    0141*   @cmd: db 23,27,12
041F92             0142*   @end:
041F92             0143*   
041F92             0144*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041F92             0145*   ; inputs: bc is x coordinate, de is y coordinate
041F92             0146*   ; prerequisites: vdu_sprite_select
041F92             0147*   vdu_sprite_move_abs:
041F92 ED 43 AA 1F 0148*       ld (@xpos),bc
       04          
041F97 ED 53 AC 1F 0149*       ld (@ypos),de
       04          
041F9C 21 A7 1F 04 0150*       ld hl,@cmd
041FA0 01 07 00 00 0151*       ld bc,@end-@cmd
041FA4 5B DF       0152*       rst.lil $18
041FA6 C9          0153*       ret
041FA7 17 1B 0D    0154*   @cmd:  db 23,27,13
041FAA 00 00       0155*   @xpos: dw 0x0000
041FAC 00 00       0156*   @ypos: dw 0x0000
041FAE 00          0157*   @end:  db 0x00 ; padding
041FAF             0158*   
041FAF             0159*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041FAF             0160*   ; inputs: bc is x coordinate, de is y coordinate
041FAF             0161*   ; prerequisites: vdu_sprite_select
041FAF             0162*   vdu_sprite_move_rel:
041FAF ED 43 C7 1F 0163*       ld (@dx),bc
       04          
041FB4 ED 53 C9 1F 0164*       ld (@dy),de
       04          
041FB9 21 C4 1F 04 0165*       ld hl,@cmd
041FBD 01 07 00 00 0166*       ld bc,@end-@cmd
041FC1 5B DF       0167*       rst.lil $18
041FC3 C9          0168*       ret
041FC4 17 1B 0E    0169*   @cmd: db 23,27,14
041FC7 00 00       0170*   @dx:  dw 0x0000
041FC9 00 00       0171*   @dy:  dw 0x0000
041FCB 00          0172*   @end: db 0x00 ; padding
041FCC             0173*   
041FCC             0174*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041FCC             0175*   ; USING 16.8 FIXED POINT COORDINATES
041FCC             0176*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041FCC             0177*   ;   the fractional portiion of the inputs are truncated
041FCC             0178*   ;   leaving only the 16-bit integer portion
041FCC             0179*   ; prerequisites: vdu_sprite_select
041FCC             0180*   vdu_sprite_move_abs168:
041FCC             0181*   ; offset inputs by the gfx origin
041FCC             0182*   ; y coordinate
041FCC 21 00 00 00 0183*       ld hl,origin_top*256
041FD0 19          0184*       add hl,de
041FD1 22 F3 1F 04 0185*       ld (@ypos-1),hl
041FD5             0186*   ; x coordinate
041FD5 21 00 80 00 0187*       ld hl,origin_left*256
041FD9 09          0188*       add hl,bc
041FDA 22 F1 1F 04 0189*       ld (@xpos-1),hl
041FDE             0190*   ; prepare vdu command
041FDE 3E 0D       0191*       ld a,13       ; restore the final byte of the command
041FE0 32 F1 1F 04 0192*       ld (@cmd+2),a ; string that got stomped on by bcu
041FE4 21 EF 1F 04 0193*       ld hl,@cmd
041FE8 01 07 00 00 0194*       ld bc,@end-@cmd
041FEC 5B DF       0195*       rst.lil $18
041FEE C9          0196*       ret
041FEF 17 1B 0D    0197*   @cmd:  db 23,27,13
041FF2 00 00       0198*   @xpos: dw 0x0000
041FF4 00 00       0199*   @ypos: dw 0x0000
041FF6             0200*   @end:  ; no padding required b/c we shifted de right
041FF6             0201*   
041FF6             0202*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041FF6             0203*   ; USING 16.8 FIXED POINT COORDINATES
041FF6             0204*   ; inputs: ub.c is dx, ud.e is dy
041FF6             0205*   ;   the fractional portiion of the inputs are truncated
041FF6             0206*   ;   leaving only the 16-bit integer portion
041FF6             0207*   ; prerequisites: vdu_sprite_select
041FF6             0208*   vdu_sprite_move_rel168:
041FF6             0209*   ; populate in the reverse of normal to keep the
041FF6             0210*   ; inputs from stomping on each other
041FF6 ED 53 15 20 0211*       ld (@dy-1),de
       04          
041FFB ED 43 13 20 0212*       ld (@dx-1),bc
       04          
042000 3E 0E       0213*       ld a,14       ; restore the final byte of the command
042002 32 13 20 04 0214*       ld (@cmd+2),a ; string that got stomped on by bcu
042006 21 11 20 04 0215*       ld hl,@cmd
04200A 01 07 00 00 0216*       ld bc,@end-@cmd
04200E 5B DF       0217*       rst.lil $18
042010 C9          0218*       ret
042011 17 1B 0E    0219*   @cmd:  db 23,27,14
042014 00 00       0220*   @dx: dw 0x0000
042016 00 00       0221*   @dy: dw 0x0000
042018             0222*   @end:  ; no padding required b/c we shifted de right
042018             0223*   
042018             0224*   ; VDU 23, 27, 15: Update the sprites in the GPU
042018             0225*   ; inputs: none
042018             0226*   vdu_sprite_update:
042018 21 23 20 04 0227*       ld hl,@cmd
04201C 01 03 00 00 0228*       ld bc,@end-@cmd
042020 5B DF       0229*       rst.lil $18
042022 C9          0230*       ret
042023 17 1B 0F    0231*   @cmd: db 23,27,15
042026             0232*   @end:
042026             0233*   
042026             0234*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042026             0235*   ; inputs: none
042026             0236*   vdu_sprite_bmp_reset:
042026 21 31 20 04 0237*       ld hl,@cmd
04202A 01 03 00 00 0238*       ld bc,@end-@cmd
04202E 5B DF       0239*       rst.lil $18
042030 C9          0240*       ret
042031 17 1B 10    0241*   @cmd: db 23,27,16
042034             0242*   @end:
042034             0243*   
042034             0244*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042034             0245*   ; inputs: none
042034             0246*   vdu_sprite_reset:
042034 21 3F 20 04 0247*       ld hl,@cmd
042038 01 03 00 00 0248*       ld bc,@end-@cmd
04203C 5B DF       0249*       rst.lil $18
04203E C9          0250*       ret
04203F 17 1B 11    0251*   @cmd: db 23,27,17
042042             0252*   @end:
042042             0253*   
042042             0254*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042042             0255*   ; inputs: a is the GCOL paint mode
042042             0256*   ; prerequisites: vdu_sprite_select
042042             0257*   vdu_sprite_set_gcol:
042042 32 54 20 04 0258*       ld (@mode),a
042046 21 51 20 04 0259*       ld hl,@cmd
04204A 01 04 00 00 0260*       ld bc,@end-@cmd
04204E 5B DF       0261*       rst.lil $18
042050 C9          0262*       ret
042051 17 1B 12    0263*   @cmd:  db 23,27,18
042054 00          0264*   @mode: db 0x00
042055             0265*   @end:
042055             0266*   
042055             0267*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
042055             0268*   ; inputs: hl=bufferId
042055             0269*   ; prerequisites: vdu_sprite_select
042055             0270*   vdu_sprite_add_buff:
042055 22 67 20 04 0271*       ld (@bufferId),hl
042059 21 64 20 04 0272*       ld hl,@cmd
04205D 01 05 00 00 0273*       ld bc,@end-@cmd
042061 5B DF       0274*       rst.lil $18
042063 C9          0275*       ret
042064 17 1B 26    0276*   @cmd:      db 23,27,0x26
042067 00 00       0277*   @bufferId: dw 0x0000
042069 00          0278*   @end:      db 0x00 ; padding
04206A             0043    
04206A             0044    ; APPLICATION INCLUDES
04206A             0045        include "ascii.inc"
04206A             0001*   loading_ui:
04206A 57 45 4C 43 0002*       db "WELCOME TO ...",13,10
       4F 4D 45 20 
       54 4F 20 2E 
       2E 2E 0D 0A 
04207A 0D 0A       0003*       db 13,10
04207C 20 20 20 20 0004*       db 32,32,32,32,32,32,32,32,95,95,32,32,32,32,95,95,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,95,13,10
       20 20 20 20 
       5F 5F 20 20 
       20 20 5F 5F 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 5F 5F 0D 
       0A          
0420A1 5F 5F 5F 5F 0005*       db 95,95,95,95,95,32,95,47,32,32,124,95,95,47,32,32,124,95,95,95,95,95,95,32,32,32,32,95,95,95,95,32,124,32,32,124,32,95,95,13,10
       5F 20 5F 2F 
       20 20 7C 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 20 5F 
       5F 5F 5F 20 
       7C 20 20 7C 
       20 5F 5F 0D 
       0A          
0420CA 5C 5F 5F 20 0006*       db 92,95,95,32,32,92,32,32,32,95,95,92,32,32,32,95,95,92,95,95,32,32,92,32,95,47,32,95,95,95,92,124,32,32,124,47,32,47,13,10
       20 5C 20 20 
       20 5F 5F 5C 
       20 20 20 5F 
       5F 5C 5F 5F 
       20 20 5C 20 
       5F 2F 20 5F 
       5F 5F 5C 7C 
       20 20 7C 2F 
       20 2F 0D 0A 
0420F2 20 2F 20 5F 0007*       db 32,47,32,95,95,32,92,124,32,32,124,32,32,124,32,32,124,32,32,47,32,95,95,32,92,32,32,92,95,95,95,124,32,32,32,32,60,13,10
       5F 20 5C 7C 
       20 20 7C 20 
       20 7C 20 20 
       7C 20 20 2F 
       20 5F 5F 20 
       5C 20 20 5C 
       5F 5F 5F 7C 
       20 20 20 20 
       3C 0D 0A    
042119 28 5F 5F 5F 0008*       db 40,95,95,95,95,32,32,47,95,95,124,32,32,124,95,95,124,32,40,95,95,95,95,32,32,47,92,95,95,95,32,32,62,95,95,124,95,32,92,13,10
       5F 20 20 2F 
       5F 5F 7C 20 
       20 7C 5F 5F 
       7C 20 28 5F 
       5F 5F 5F 20 
       20 2F 5C 5F 
       5F 5F 20 20 
       3E 5F 5F 7C 
       5F 20 5C 0D 
       0A          
042142 20 20 20 20 0009*       db 32,32,32,32,32,92,47,32,95,95,95,95,95,32,32,32,32,95,95,32,32,46,95,95,47,32,32,32,32,32,92,47,32,32,32,32,32,92,47,13,10
       20 5C 2F 20 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 20 
       20 2E 5F 5F 
       2F 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 5C 2F 0D 
       0A          
04216B 20 20 5F 5F 0010*       db 32,32,95,95,95,95,95,47,32,95,95,95,95,92,32,95,47,32,32,124,95,124,32,32,124,95,95,32,32,32,95,95,95,95,13,10
       5F 5F 5F 2F 
       20 5F 5F 5F 
       5F 5C 20 5F 
       2F 20 20 7C 
       5F 7C 20 20 
       7C 5F 5F 20 
       20 20 5F 5F 
       5F 5F 0D 0A 
04218F 20 2F 20 20 0011*       db 32,47,32,32,95,32,92,32,32,32,95,95,92,32,32,92,32,32,32,95,95,92,32,32,124,32,32,92,95,47,32,95,95,32,92,13,10
       5F 20 5C 20 
       20 20 5F 5F 
       5C 20 20 5C 
       20 20 20 5F 
       5F 5C 20 20 
       7C 20 20 5C 
       5F 2F 20 5F 
       5F 20 5C 0D 
       0A          
0421B4 28 20 20 3C 0012*       db 40,32,32,60,95,62,32,41,32,32,124,32,32,32,32,32,124,32,32,124,32,124,32,32,32,89,32,32,92,32,32,95,95,95,47,13,10
       5F 3E 20 29 
       20 20 7C 20 
       20 20 20 20 
       7C 20 20 7C 
       20 7C 20 20 
       20 59 20 20 
       5C 20 20 5F 
       5F 5F 2F 0D 
       0A          
0421D9 20 5C 5F 5F 0013*       db 32,92,95,95,95,95,47,124,95,95,124,32,32,32,32,32,124,95,95,124,32,124,95,95,95,124,32,32,47,92,95,95,95,32,32,62,13,10
       5F 5F 2F 7C 
       5F 5F 7C 20 
       20 20 20 20 
       7C 5F 5F 7C 
       20 7C 5F 5F 
       5F 7C 20 20 
       2F 5C 5F 5F 
       5F 20 20 3E 
       0D 0A       
0421FF 5F 5F 5F 5F 0014*       db 95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,32,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
04223D 5C 5F 5F 5F 0015*       db 92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,13,10
       5F 5F 5F 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       0D 0A       
04227B 20 7C 20 20 0016*       db 32,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       20 20 20 5F 
       5F 5F 2F 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 0D 
       0A          
0422B8 20 7C 20 20 0017*       db 32,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       20 20 7C 20 
       20 20 7C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       0D 0A       
0422F6 20 7C 5F 5F 0018*       db 32,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 7C 20 
       20 20 7C 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       0D 0A       
042334 20 5F 5F 5F 0019*       db 32,95,95,95,95,95,95,95,32,32,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,92,47,95,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 0D 0A 
04237C 20 5C 20 20 0020*       db 32,92,32,32,32,32,32,32,92,32,124,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,47,32,32,32,95,95,95,95,95,47,13,10
       20 20 20 20 
       5C 20 7C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       2F 20 20 20 
       5F 5F 5F 5F 
       5F 2F 0D 0A 
0423C4 20 2F 20 20 0021*       db 32,47,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,32,92,95,95,95,95,95,32,32,92,13,10
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 20 
       5C 5F 5F 5F 
       5F 5F 20 20 
       5C 0D 0A    
04240B 2F 20 20 20 0022*       db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 0D 0A 
042453 5C 5F 5F 5F 0023*       db 92,95,95,95,95,124,95,95,32,32,47,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 0D 0A 
04249B 20 20 20 20 0024*       db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 5C 
       2F 0D 0A    
0424E2 4C 4F 41 44 0025*       db "LOADING UI ...",0
       49 4E 47 20 
       55 49 20 2E 
       2E 2E 00    
0424F1             0046        include "collisions.inc"
0424F1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042500             0002*   ; ====== COLLISION DETECTION ======
042500             0003*   ; --- constants ---
042500             0004*   ; sprite_collisions flags
042500             0005*   ; collides_with_player: equ %00000001
042500             0006*   ; collides_with_laser: equ %00000010
042500             0007*   sprite_alive: equ 6; set when sprite is alive
042500             0008*   sprite_just_died: equ 7; set when sprite just died
042500             0009*   collide_top: equ %00001000
042500             0010*   collide_bottom: equ %00000100
042500             0011*   collide_left: equ %00000010
042500             0012*   collide_right: equ %00000001
042500             0013*   
042500 00 00 00    0014*   collision_table_pointer: dl 0x000000 ; pointer to the sprite in the group being checked for collision
042503             0015*   
042503             0016*   ; this routine detects collisions between two collidable objects,
042503             0017*   ; which can include sprites, active tiles, or any screen coordinate
042503             0018*   ; which has been set up with a sprite table structure that includes dim_x
042503             0019*   ; representing the radius of the collidable object
042503             0020*   ; inputs: ix and iy point to the colliding objects' sprite/tile table records
042503             0021*   ; outputs: uh.l = distance - sum of radii
042503             0022*   ;          zero flag set or sign flag negative if collision detected
042503             0023*   ;          dx168 and dy168 are also populated with the signed displacements
042503             0024*   ; destroys: everything except indexes
042503             0025*   check_collision:
042503             0026*   ; compute dx = x1-x0
042503 DD 27 01    0027*       ld hl,(ix+sprite_x)
042506 FD 17 01    0028*       ld de,(iy+sprite_x)
042509 AF          0029*       xor a ; clear carry
04250A ED 52       0030*       sbc hl,de
04250C 22 2E 0C 04 0031*       ld (dx168),hl ; dx to scratch
042510             0032*   ; compute dy = y1-y0
042510 DD 27 04    0033*       ld hl,(ix+sprite_y)
042513 FD 17 04    0034*       ld de,(iy+sprite_y)
042516 AF          0035*       xor a ; clear carry
042517 ED 52       0036*       sbc hl,de ; hl = dy
042519 22 34 0C 04 0037*       ld (dy168),hl ; dy to scratch
04251D             0038*   ; compute euclidean distance between centers
04251D CD 3A 0C 04 0039*       call distance168 ; uh.l = distance
042521             0040*   ; check for overlap by summing half the radii
042521 DD 7E 1E    0041*       ld a,(ix+sprite_dim_x)
042524 CB 3F       0042*       srl a ; divide by 2
042526 FD 5E 1E    0043*       ld e,(iy+sprite_dim_x)
042529 CB 3B       0044*       srl e ; divide by 2
04252B 83          0045*       add a,e
04252C 11 00 00 00 0046*       ld de,0 ; clear deu and e
042530 57          0047*       ld d,a ; ud.e = sum of radii
042531 B7          0048*       or a ; clear carry
042532 ED 52       0049*       sbc hl,de ; uh.l = distance - sum of radii
042534 C9          0050*       ret
042535             0051*   ; end check_collision
042535             0052*   
042535             0053*   ; check collisions of a sprite or tile against a sprite group
042535             0054*   ; inputs: iy = pointer to sprite or tile record being checked
042535             0055*   ;         ix = pointer to sprite group, b = number of records in sprite group
042535             0056*   check_sprite_group_collisions:
042535             0057*   @collision_loop:
042535 DD 22 00 25 0058*       ld (collision_table_pointer),ix ; update table pointer
       04          
04253A C5          0059*       push bc ; backup loop counter
04253B             0060*   ; check sprite_collisions sprite_alive flag to see if sprite is active
04253B DD CB 1D 76 0061*       bit sprite_alive,(ix+sprite_collisions)
04253F CA 55 25 04 0062*       jp z,@next_record ; not alive so skip to next record
042543             0063*   ; sprite alive so check for collision
042543 CD 03 25 04 0064*       call check_collision
042547 F2 55 25 04 0065*       jp p,@next_record ; no collision
04254B             0066*   ; set sprite_just_died flag for each entity and return to caller
04254B C1          0067*       pop bc ; dummy pop to balance stack
04254C DD CB 1D FE 0068*       set sprite_just_died,(ix+sprite_collisions)
042550 FD CB 1D FE 0069*       set sprite_just_died,(iy+sprite_collisions)
042554 C9          0070*       ret
042555             0071*   @next_record:
042555 C1          0072*       pop bc ; get back our loop counter
042556 ED 32 40    0073*       lea ix,ix+table_record_size
042559 10 DA       0074*       djnz @collision_loop ; loop until we've checked all the records
04255B             0075*   ; return to caller
04255B AF          0076*       xor a
04255C 3C          0077*       inc a ; resets sign flag and a to non-zero indicating no collision
04255D C9          0078*       ret
04255E             0079*   ; end check_sprite_group_collisions
04255E             0080*   
04255E             0081*   check_enemy_collision_laser: ; check for collisions with laser
04255E DD 21 00 80 0082*       ld ix,player_lasers_begin
       04          
042563 06 04       0083*       ld b,player_lasers_max
042565 CD 35 25 04 0084*       call check_sprite_group_collisions
042569 C9          0085*       ret
04256A             0086*   ; end check_enemy_collision_laser
04256A             0087*   
04256A             0088*   check_enemy_collision_player: ; check for collisions with player
04256A DD 21 00 81 0089*       ld ix,player_begin
       04          
04256F CD 03 25 04 0090*       call check_collision
042573 F0          0091*       ret p ; no collision so nothing to do
042574 DD CB 1D FE 0092*       set sprite_just_died,(ix+sprite_collisions)
042578 FD CB 1D FE 0093*       set sprite_just_died,(iy+sprite_collisions)
04257C AF          0094*       xor a ; signal collision detected
04257D C9          0095*       ret
04257E             0096*   ; end check_enemy_collision_player
04257E             0097*   
04257E             0098*   ; this routine vanquishes the enemy sprite
04257E             0099*   ; and replaces it with an animated explosion
04257E             0100*   ; destroys: everything except index registers
04257E             0101*   ; returns: a=-1 to indicate enemy died, and an incandescent ball of debris and gas
04257E             0102*   enemy_kill:
04257E 2A 00 59 04 0103*       ld hl,(player_score)
042582 01 00 00 00 0104*       ld bc,0 ; clear bcu
042586 FD 4E 26    0105*       ld c,(iy+sprite_points)
042589 09          0106*       add hl,bc
04258A 22 00 59 04 0107*       ld (player_score),hl
04258E C9          0108*       ret ; DEBUG
04258F C3 13 28 04 0109*       jp spawn_explosion
042593             0110*   ; end enemy_kill
042593             0047        include "enemies.inc"
042593             0001*   move_enemies:
042593             0002*   ; initialize pointers and loop counter
042593 FD 21 40 81 0003*       ld iy,enemy_sprites_begin ; set iy to first record in table
       04          
042598 06 07       0004*       ld b,table_num_enemy_records ; loop counter
04259A CD 79 6A 04 0005*       call move_sprite_group
04259E C9          0006*       ret
04259F             0007*   ; end move_enemies
04259F             0048        include "enemy_fireball.inc"
04259F FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
042600             0002*   speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
042600             0003*   fireballs_max: equ 4
042600             0004*   
042600             0005*   fireball_defaults:
042600 03          0006*       db enemy_projectile        ; type
042601 06 01 00    0007*       dl BUF_FIREBALL_A	    ; base_bufferId
042604 58 26 04    0008*       dl move_enemy_fireball	; move_program
042607 40          0009*       db %01000000            ; collisions bit 6 signals sprite alive
042608 07          0010*       db 7	                ; dim_x
042609 07          0011*       db 7                    ; dim_y
04260A 01          0012*       db 1                    ; num_orientations
04260B 01          0013*       db 1                    ; num_animations
04260C 00          0014*       db 0	                ; animation
04260D 00          0015*       db 0	                ; animation_timer
04260E 00          0016*       db 0	                ; move_timer
04260F 00          0017*       db 0	                ; move_step
042610 14          0018*       db 20	                ; points
042611 05          0019*       db 5	                ; shield_damage
042612 00          0020*       db 0                    ; frame
042613             0021*   
042613             0022*   enemy_spawn_fireball:
042613 21 00 26 04 0023*       ld hl,fireball_defaults
042617 DD 21 00 82 0024*       ld ix,fireballs_base
       04          
04261C 06 04       0025*       ld b,fireballs_max
04261E CD BF 67 04 0026*       call spawn_sprite_from_tile
042622 D0          0027*       ret nc ; no carry means no free sprite slots, so we go home
042623             0028*   ; other specific initialization
042623             0029*   ; ------------------------------------------------
042623             0030*   ; center the fireball on the turret
042623 11 80 03 00 0031*       ld de,3*256+128 ; half the fireball size
042627 FD 27 01    0032*       ld hl,(iy+sprite_x)
04262A 19          0033*       add hl,de
04262B DD 2F 01    0034*       ld (ix+sprite_x),hl
04262E FD 27 04    0035*       ld hl,(iy+sprite_y)
042631 19          0036*       add hl,de
042632 DD 2F 04    0037*       ld (ix+sprite_y),hl
042635             0038*   ; copy component velocities from targeting_computer
042635 2A 56 5F 04 0039*       ld hl,(Vp_x)
042639 DD 2F 07    0040*       ld (ix+sprite_xvel),hl
04263C 2A 59 5F 04 0041*       ld hl,(Vp_y)
042640 DD 2F 0A    0042*       ld (ix+sprite_yvel),hl
042643             0043*   ; move projectile one frame's distance so it isn't drawn right over turret
042643 DD 27 01    0044*       ld hl,(ix+sprite_x)
042646 DD 17 07    0045*       ld de,(ix+sprite_xvel)
042649 19          0046*       add hl,de
04264A DD 2F 01    0047*       ld (ix+sprite_x),hl
04264D DD 27 04    0048*       ld hl,(ix+sprite_y)
042650 DD 17 0A    0049*       ld de,(ix+sprite_yvel)
042653 19          0050*       add hl,de
042654 DD 2F 04    0051*       ld (ix+sprite_y),hl
042657 C9          0052*       ret
042658             0053*   ; end enemy_spawn_fireball
042658             0054*   
042658             0055*   move_enemy_fireball:
042658             0056*   ; run the movement program for the fireball enemy
042658 CD F3 6A 04 0057*       call move_sprite
04265C 3A 68 69 04 0058*       ld a,(sprite_screen_edge)
042660 B7          0059*       or a ; a will be non-zero if have scrolled off screen
042661 C2 AE 69 04 0060*       jp nz,table_deactivate_sprite
042665 CD 6A 25 04 0061*       call check_enemy_collision_player
042669 F0          0062*       ret p ; no collision so nothing to do
04266A C3 7E 25 04 0063*       jp enemy_kill
04266E             0064*   ; end move_enemy_fireball
04266E             0065*   
04266E             0066*   init_enemy_fireballs:
04266E             0067*   ; set pointer to seeker sprite table
04266E FD 21 00 82 0068*       ld iy,fireballs_base
       04          
042673 FD 7E 00    0069*       ld a,(iy+sprite_id) ; sprite id
042676 1E 04       0070*       ld e,fireballs_max ; sprite loop counter
042678             0071*   ; define seeker sprites
042678             0072*   @sprites_loop:
042678 F5          0073*       push af
042679 D5          0074*       push de
04267A CD 00 1F 04 0075*   	call vdu_sprite_select
04267E CD 13 1F 04 0076*   	call vdu_sprite_clear_frames
042682 21 06 01 00 0077*   	ld hl,BUF_FIREBALL_A
042686 06 02       0078*   	ld b,2
042688             0079*   @frames_loop:
042688 C5          0080*   	push bc
042689 E5          0081*   	push hl
04268A CD 55 20 04 0082*   	call vdu_sprite_add_buff
04268E E1          0083*   	pop hl
04268F 23          0084*   	inc hl
042690 C1          0085*   	pop bc
042691 10 F5       0086*   	djnz @frames_loop
042693 D1          0087*       pop de ; sprite loop counter
042694 F1          0088*       pop af ; sprite id
042695 3C          0089*       inc a
042696 1D          0090*       dec e
042697 C2 78 26 04 0091*       jp nz,@sprites_loop
04269B C9          0092*       ret
04269C             0093*   ; end init_enemy_fireballs
04269C             0049        include "enemy_seeker.inc"
04269C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
042700             0002*   
042700 00          0003*   seekers_count: db 0
042701             0004*   seekers_max: equ 3
042701             0005*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
042701             0006*   
042701             0007*   seeker_defaults:
042701 01          0008*       db enemy_air            ; type
042702 0B 01 00    0009*       dl BUF_SEEKER_000       ; base_bufferId
042705 25 27 04    0010*       dl move_enemy_seeker    ; move_program
042708 40          0011*       db %01000000            ; collisions bit 6 signals sprite alive
042709 10          0012*       db 16                   ; dim_x
04270A 10          0013*       db 16                   ; dim_y
04270B 20          0014*       db 32                   ; num_orientations
04270C 01          0015*       db 1                    ; num_animations
04270D 00          0016*       db 0                    ; animation
04270E 00          0017*       db 0                    ; animation_timer
04270F 01          0018*       db 1                    ; move_timer
042710 00          0019*       db 0                    ; move_step
042711 0A          0020*       db 10                   ; points
042712 02          0021*       db 2                    ; shield_damage
042713 00          0022*       db 0                    ; frame
042714             0023*   
042714             0024*   enemy_spawn_seeker:
042714 21 01 27 04 0025*       ld hl,seeker_defaults
042718 CD 1E 6A 04 0026*       call spawn_sprite_from_sprite
04271C D0          0027*       ret nc ; no carry means no free sprite slots, so we go home
04271D             0028*   ; other specific initialization
04271D 21 80 02 00 0029*       ld hl,speed_seeker
042721 DD 2F 0D    0030*       ld (ix+sprite_vel),hl
042724 C9          0031*       ret
042725             0032*   ; end enemy_spawn_seeker
042725             0033*   
042725             0034*   move_enemy_seeker:
042725             0035*   ; run the movement program for the seeker enemy
042725 CD 32 27 04 0036*       call en_nav_seek_zag
042729 CD 6A 25 04 0037*       call check_enemy_collision_player
04272D             0038*       ; TODO: handle collision event
04272D CD 5E 25 04 0039*       call check_enemy_collision_laser
042731             0040*       ; TODO: handle collision event
042731 C9          0041*       ret
042732             0042*   ; end move_enemy_seeker
042732             0043*   
042732             0044*   ; contains the logic for how to move the enemy
042732             0045*   ; and then does the moving
042732             0046*   ; inputs: a fully-populated active sprite table
042732             0047*   ;         player position variables
042732             0048*   ; destroys: everything except index registers
042732             0049*   ; outputs: moving enemies
042732             0050*   en_nav_seek_zag:
042732             0051*   ; set velocity and orientation by player's relative location
042732             0052*   ; move enemies y-axis
042732             0053*   ; where is player relative to us?
042732 CD 00 5F 04 0054*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
042736             0055*   ; is player above or below us?
042736 ED 53 48 06 0056*       ld (ude),de ; dy
       04          
04273B 3A 4A 06 04 0057*       ld a,(ude+2) ; deu
04273F 17          0058*       rla ; shift sign bit into carry
042740 D2 69 27 04 0059*       jp nc,@zig_zag ; player is below,evade
042744             0060*   ; player is even or above,so home in on current heading
042744 FD 2F 10    0061*       ld (iy+sprite_heading),hl ; save sprite heading
042747             0062*   ; fall through to @compute_velocities
042747             0063*   @compute_velocities:
042747 CD 94 6B 04 0064*       call sprite_compute_velocities
04274B             0065*   ; change the animation frame to match heading
04274B CD C1 6B 04 0066*       call sprite_frame_heading ; a, sprite_frame set to heading-based frame
04274F CD F3 6A 04 0067*       call move_sprite ; move the sprite
042753 B7          0068*       or a ; a will be non-zero if have collided with screen edge
042754 C2 74 27 04 0069*       jp nz,@zag_switch ; switch direction
042758 C9          0070*       ret ; didn't hit edge, nothing else to do
042759             0071*   @zig_zag_start:
042759 FD 2A 65 69 0072*       ld iy,(table_pointer)
       04          
04275E CD AE 09 04 0073*       call rand_8
042762 E6 3F       0074*       and %00111111 ; limit it to 64
042764 CB DF       0075*       set 3,a ; make sure it's at least 8
042766 FD 77 24    0076*       ld (iy+sprite_move_timer),a ; store it
042769             0077*       ; fall through to @zig_zag
042769             0078*   @zig_zag:
042769 FD 7E 24    0079*       ld a,(iy+sprite_move_timer)
04276C 3D          0080*       dec a
04276D FD 77 24    0081*       ld (iy+sprite_move_timer),a
042770 C2 96 27 04 0082*       jp nz,@zig_zag_no_switch
042774             0083*   @zag_switch:
042774             0084*       ; otherwise flip direction and restart timer
042774 FD 7E 25    0085*       ld a,(iy+sprite_move_step)
042777 EE 01       0086*       xor %1 ; flips bit zero
042779 FD 77 25    0087*       ld (iy+sprite_move_step),a ; store it
04277C C2 8B 27 04 0088*       jp nz,@F ; zag right
042780             0089*   ;otherwise zag left
042780 21 00 A0 00 0090*       ld hl,160*256; southwest heading
042784 FD 2F 10    0091*       ld (iy+sprite_heading),hl ; save sprite heading
042787 C3 59 27 04 0092*       jp @zig_zag_start
04278B             0093*   @@: ; zag right
04278B 21 00 60 00 0094*       ld hl,96*256; southeast heading
04278F FD 2F 10    0095*       ld (iy+sprite_heading),hl ; save sprite heading
042792 C3 59 27 04 0096*       jp @zig_zag_start
042796             0097*   @zig_zag_no_switch:
042796             0098*       ; ld a,(sprite_orientation)
042796 FD 27 10    0099*       ld hl,(iy+sprite_heading)
042799 C3 47 27 04 0100*       jp @compute_velocities
04279D             0101*   ; end en_nav_seek_zag
04279D             0102*   
04279D             0103*   
04279D             0104*   init_enemy_seekers:
04279D             0105*   ; set pointer to seeker sprite table
04279D FD 21 40 81 0106*       ld iy,seekers_base
       04          
0427A2 FD 7E 00    0107*       ld a,(iy+sprite_id) ; sprite id
0427A5 1E 03       0108*       ld e,seekers_max ; sprite loop counter
0427A7             0109*   ; define seeker sprites
0427A7             0110*   @sprites_loop:
0427A7 F5          0111*       push af
0427A8 D5          0112*       push de
0427A9 CD 00 1F 04 0113*   	call vdu_sprite_select
0427AD CD 13 1F 04 0114*   	call vdu_sprite_clear_frames
0427B1 21 0B 01 00 0115*   	ld hl,BUF_SEEKER_000
0427B5 06 20       0116*   	ld b,32 ; 32 bitmaps for seeker
0427B7             0117*   @frames_loop:
0427B7 C5          0118*   	push bc
0427B8 E5          0119*   	push hl
0427B9 CD 55 20 04 0120*   	call vdu_sprite_add_buff
0427BD E1          0121*   	pop hl
0427BE 23          0122*   	inc hl
0427BF C1          0123*   	pop bc
0427C0 10 F5       0124*   	djnz @frames_loop
0427C2 D1          0125*       pop de ; sprite loop counter
0427C3 F1          0126*       pop af ; sprite id
0427C4 3C          0127*       inc a
0427C5 1D          0128*       dec e
0427C6 C2 A7 27 04 0129*       jp nz,@sprites_loop
0427CA C9          0130*       ret
0427CB             0131*   ; end init_enemy_seekers
0427CB             0050        include "explosion.inc"
0427CB FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
042800             0002*   explosion_defaults:
042800 04          0003*       db explosion            ; type
042801 01 01 00    0004*       dl BUF_EXPLOSION_A	    ; base_bufferId
042804 2A 28 04    0005*       dl move_explosion	    ; move_program
042807 00          0006*       db 0                    ; collisions
042808 07          0007*       db 7	                ; dim_x
042809 07          0008*       db 7                    ; dim_y
04280A 01          0009*       db 1                    ; num_orientations
04280B 05          0010*       db 5                    ; num_animations
04280C 05          0011*       db 5	                ; animation
04280D 08          0012*       db 8	                ; animation_timer
04280E 00          0013*       db 0	                ; move_timer
04280F 00          0014*       db 0	                ; move_step
042810 00          0015*       db 0	                ; points
042811 05          0016*       db 5	                ; shield_damage
042812 00          0017*       db 0                    ; frame
042813             0018*   
042813             0019*   spawn_explosion:
042813 21 00 28 04 0020*       ld hl,explosion_defaults
042817 CD 50 6A 04 0021*       call alter_sprite
04281B             0022*   ; other specific initialization
04281B 21 00 00 00 0023*       ld hl,0
04281F FD 2F 07    0024*       ld (iy+sprite_xvel),hl
042822 21 00 01 00 0025*       ld hl,1*256
042826 FD 2F 0A    0026*       ld (iy+sprite_yvel),hl
042829 C9          0027*       ret
04282A             0028*   ; end spawn_explosion
04282A             0029*   
04282A             0030*   move_explosion:
04282A             0031*   ; run the movement program for the explosion
04282A CD F3 6A 04 0032*       call move_sprite
04282E B7          0033*       or a ; a will be non-zero if have scrolled off screen
04282F C2 47 28 04 0034*       jp nz,@make_crater
042833             0035*   ; do the animations
042833 FD 35 23    0036*       dec (iy+sprite_animation_timer)
042836 C0          0037*       ret nz ; not time to bump animation frame
042837 FD 34 28    0038*       inc (iy+sprite_frame)
04283A FD 35 22    0039*       dec (iy+sprite_animation)
04283D CA 47 28 04 0040*       jp z,@make_crater ; reached the end of the animations
042841 3E 08       0041*       ld a,8 ; reset animation timer
042843 FD 77 23    0042*       ld (iy+sprite_animation_timer),a
042846 C9          0043*       ret
042847             0044*   @make_crater: ; deactivate sprite and draw a crater in its place
042847 21 00 01 00 0045*       ld hl,BUF_CRATER
04284B CD 38 1A 04 0046*       call vdu_buff_select
04284F FD 07 01    0047*       ld bc,(iy+sprite_x)
042852 FD 17 04    0048*       ld de,(iy+sprite_y)
042855 CD 3C 1E 04 0049*       call vdu_plot_bmp168
042859 C3 AE 69 04 0050*       jp table_deactivate_sprite
04285D             0051*   ; end move_explosion
04285D             0051        include "fonts_list.inc"
04285D FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042900             0002*   
042900             0003*   ; Generated by asm_config_editor.py
042900             0004*   font_list_record_size: equ 12
042900             0005*   font_list_width: equ 0
042900             0006*   font_list_height: equ 3
042900             0007*   font_list_bufferId: equ 6
042900             0008*   font_list_filename: equ 9
042900             0009*   
042900             0010*   num_fonts: equ 18
042900             0011*   
042900             0012*   ; Index list:
042900             0013*   amiga_forever_16x24: equ 64000
042900             0014*   amiga_forever_8x16: equ 64001
042900             0015*   amiga_forever_8x8: equ 64002
042900             0016*   computer_pixel_7_10x15: equ 64003
042900             0017*   computer_pixel_7_10x24: equ 64004
042900             0018*   computer_pixel_7_8x16: equ 64005
042900             0019*   Lat2_Terminus12x6_6x12: equ 64006
042900             0020*   Lat2_TerminusBold14_8x14: equ 64007
042900             0021*   Lat2_VGA14_8x14: equ 64008
042900             0022*   Lat2_VGA16_8x16: equ 64009
042900             0023*   Lat2_VGA8_8x8: equ 64010
042900             0024*   Lat7_Fixed13_8x13: equ 64011
042900             0025*   Lat7_Terminus12x6_6x12: equ 64012
042900             0026*   Lat7_TerminusBold16_8x16: equ 64013
042900             0027*   Lat7_VGA14_8x14: equ 64014
042900             0028*   Lat7_VGA8x8: equ 64015
042900             0029*   scriptorium_12x14: equ 64016
042900             0030*   Squarewave_Bold_8x12: equ 64017
042900             0031*   
042900             0032*   font_list: ; width; height; bufferId; filename;:
042900 10 00 00 18 0033*   	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 D8 29 04 
04290C 08 00 00 10 0034*   	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 F7 29 04 
042918 08 00 00 08 0035*   	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 15 2A 04 
042924 0A 00 00 0F 0036*   	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 32 2A 04 
042930 0A 00 00 18 0037*   	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 54 2A 04 
04293C 08 00 00 10 0038*   	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 76 2A 04 
042948 06 00 00 0C 0039*   	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 97 2A 04 
042954 08 00 00 0E 0040*   	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 B9 2A 04 
042960 08 00 00 0E 0041*   	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 DD 2A 04 
04296C 08 00 00 10 0042*   	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 F8 2A 04 
042978 08 00 00 08 0043*   	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 13 2B 04 
042984 08 00 00 0D 0044*   	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 2C 2B 04 
042990 06 00 00 0C 0045*   	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 49 2B 04 
04299C 08 00 00 10 0046*   	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 6B 2B 04 
0429A8 08 00 00 0E 0047*   	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 8F 2B 04 
0429B4 08 00 00 08 0048*   	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 AA 2B 04 
0429C0 0C 00 00 0E 0049*   	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 C3 2B 04 
0429CC 08 00 00 0C 0050*   	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 E0 2B 04 
0429D8             0051*   
0429D8             0052*   ; files_list: ; filename:
0429D8 66 6F 6E 74 0053*   fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
0429F7 66 6F 6E 74 0054*   fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
042A15 66 6F 6E 74 0055*   fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042A32 66 6F 6E 74 0056*   fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
042A54 66 6F 6E 74 0057*   fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
042A76 66 6F 6E 74 0058*   fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
042A97 66 6F 6E 74 0059*   fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
042AB9 66 6F 6E 74 0060*   fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
042ADD 66 6F 6E 74 0061*   fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
042AF8 66 6F 6E 74 0062*   fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
042B13 66 6F 6E 74 0063*   fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042B2C 66 6F 6E 74 0064*   fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
042B49 66 6F 6E 74 0065*   fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
042B6B 66 6F 6E 74 0066*   fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
042B8F 66 6F 6E 74 0067*   fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
042BAA 66 6F 6E 74 0068*   fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042BC3 66 6F 6E 74 0069*   fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
042BE0 66 6F 6E 74 0070*   fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
042C00             0052        include "images_tiles_dg.inc"
042C00             0001*   ; Generated by tiles_dg.py
042C00             0002*   
042C00             0003*   tiles_dg_num_images: equ 184
042C00             0004*   
042C00             0005*   ; bufferIds:
042C00             0006*   
042C00             0007*   
042C00             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
042C00 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       F0 38 04 00 
       02 00       
042C12 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       05 39 04 01 
       02 00       
042C24 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       1A 39 04 02 
       02 00       
042C36 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       2F 39 04 03 
       02 00       
042C48 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       44 39 04 04 
       02 00       
042C5A 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       59 39 04 05 
       02 00       
042C6C 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       6E 39 04 06 
       02 00       
042C7E 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       83 39 04 07 
       02 00       
042C90 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       98 39 04 08 
       02 00       
042CA2 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       AD 39 04 09 
       02 00       
042CB4 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       C2 39 04 0A 
       02 00       
042CC6 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       D7 39 04 0B 
       02 00       
042CD8 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_012, 524
       00 00 10 00 
       00 00 01 00 
       EC 39 04 0C 
       02 00       
042CEA 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_013, 525
       00 00 10 00 
       00 00 01 00 
       01 3A 04 0D 
       02 00       
042CFC 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_014, 526
       00 00 10 00 
       00 00 01 00 
       16 3A 04 0E 
       02 00       
042D0E 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_015, 527
       00 00 10 00 
       00 00 01 00 
       2B 3A 04 0F 
       02 00       
042D20 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       40 3A 04 10 
       02 00       
042D32 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_025, 537
       00 00 10 00 
       00 00 01 00 
       55 3A 04 19 
       02 00       
042D44 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_026, 538
       00 00 10 00 
       00 00 01 00 
       6A 3A 04 1A 
       02 00       
042D56 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_027, 539
       00 00 10 00 
       00 00 01 00 
       7F 3A 04 1B 
       02 00       
042D68 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_028, 540
       00 00 10 00 
       00 00 01 00 
       94 3A 04 1C 
       02 00       
042D7A 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_029, 541
       00 00 10 00 
       00 00 01 00 
       A9 3A 04 1D 
       02 00       
042D8C 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_030, 542
       00 00 10 00 
       00 00 01 00 
       BE 3A 04 1E 
       02 00       
042D9E 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_031, 543
       00 00 10 00 
       00 00 01 00 
       D3 3A 04 1F 
       02 00       
042DB0 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_032, 544
       00 00 10 00 
       00 00 01 00 
       E8 3A 04 20 
       02 00       
042DC2 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       FD 3A 04 21 
       02 00       
042DD4 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       12 3B 04 22 
       02 00       
042DE6 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       27 3B 04 23 
       02 00       
042DF8 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       3C 3B 04 24 
       02 00       
042E0A 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       51 3B 04 25 
       02 00       
042E1C 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       66 3B 04 26 
       02 00       
042E2E 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       7B 3B 04 27 
       02 00       
042E40 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       90 3B 04 28 
       02 00       
042E52 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       A5 3B 04 31 
       02 00       
042E64 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       BA 3B 04 32 
       02 00       
042E76 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       CF 3B 04 33 
       02 00       
042E88 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       E4 3B 04 34 
       02 00       
042E9A 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       F9 3B 04 35 
       02 00       
042EAC 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       0E 3C 04 36 
       02 00       
042EBE 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       23 3C 04 37 
       02 00       
042ED0 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       38 3C 04 38 
       02 00       
042EE2 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       4D 3C 04 39 
       02 00       
042EF4 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       62 3C 04 3A 
       02 00       
042F06 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       77 3C 04 3B 
       02 00       
042F18 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       8C 3C 04 41 
       02 00       
042F2A 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       A1 3C 04 42 
       02 00       
042F3C 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       B6 3C 04 43 
       02 00       
042F4E 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       CB 3C 04 44 
       02 00       
042F60 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       E0 3C 04 45 
       02 00       
042F72 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       F5 3C 04 46 
       02 00       
042F84 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       0A 3D 04 47 
       02 00       
042F96 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       1F 3D 04 48 
       02 00       
042FA8 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       34 3D 04 49 
       02 00       
042FBA 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       49 3D 04 4A 
       02 00       
042FCC 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       5E 3D 04 4B 
       02 00       
042FDE 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       73 3D 04 51 
       02 00       
042FF0 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       88 3D 04 52 
       02 00       
043002 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       9D 3D 04 53 
       02 00       
043014 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       B2 3D 04 54 
       02 00       
043026 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       C7 3D 04 55 
       02 00       
043038 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       DC 3D 04 56 
       02 00       
04304A 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       F1 3D 04 57 
       02 00       
04305C 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       06 3E 04 58 
       02 00       
04306E 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       1B 3E 04 59 
       02 00       
043080 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       30 3E 04 5A 
       02 00       
043092 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       45 3E 04 5B 
       02 00       
0430A4 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       5A 3E 04 61 
       02 00       
0430B6 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       6F 3E 04 62 
       02 00       
0430C8 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       84 3E 04 63 
       02 00       
0430DA 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       99 3E 04 64 
       02 00       
0430EC 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       AE 3E 04 65 
       02 00       
0430FE 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       C3 3E 04 66 
       02 00       
043110 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       D8 3E 04 67 
       02 00       
043122 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       ED 3E 04 68 
       02 00       
043134 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       02 3F 04 69 
       02 00       
043146 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       17 3F 04 6A 
       02 00       
043158 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       2C 3F 04 6B 
       02 00       
04316A 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       41 3F 04 6C 
       02 00       
04317C 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       56 3F 04 71 
       02 00       
04318E 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       6B 3F 04 72 
       02 00       
0431A0 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       80 3F 04 73 
       02 00       
0431B2 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       95 3F 04 74 
       02 00       
0431C4 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       AA 3F 04 75 
       02 00       
0431D6 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       BF 3F 04 76 
       02 00       
0431E8 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       D4 3F 04 77 
       02 00       
0431FA 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       E9 3F 04 78 
       02 00       
04320C 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       FE 3F 04 79 
       02 00       
04321E 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       13 40 04 7A 
       02 00       
043230 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       28 40 04 7B 
       02 00       
043242 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       3D 40 04 81 
       02 00       
043254 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       52 40 04 82 
       02 00       
043266 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       67 40 04 83 
       02 00       
043278 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       7C 40 04 84 
       02 00       
04328A 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       91 40 04 85 
       02 00       
04329C 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       A6 40 04 86 
       02 00       
0432AE 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       BB 40 04 87 
       02 00       
0432C0 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       D0 40 04 88 
       02 00       
0432D2 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       E5 40 04 89 
       02 00       
0432E4 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       FA 40 04 8A 
       02 00       
0432F6 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       0F 41 04 8B 
       02 00       
043308 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       24 41 04 8C 
       02 00       
04331A 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_141, 653
       00 00 10 00 
       00 00 01 00 
       39 41 04 8D 
       02 00       
04332C 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_142, 654
       00 00 10 00 
       00 00 01 00 
       4E 41 04 8E 
       02 00       
04333E 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       63 41 04 91 
       02 00       
043350 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       78 41 04 92 
       02 00       
043362 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       8D 41 04 93 
       02 00       
043374 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       A2 41 04 94 
       02 00       
043386 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       B7 41 04 95 
       02 00       
043398 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       CC 41 04 96 
       02 00       
0433AA 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       E1 41 04 97 
       02 00       
0433BC 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       F6 41 04 98 
       02 00       
0433CE 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       0B 42 04 99 
       02 00       
0433E0 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       20 42 04 9A 
       02 00       
0433F2 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       35 42 04 9B 
       02 00       
043404 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       4A 42 04 9C 
       02 00       
043416 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_157, 669
       00 00 10 00 
       00 00 01 00 
       5F 42 04 9D 
       02 00       
043428 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_158, 670
       00 00 10 00 
       00 00 01 00 
       74 42 04 9E 
       02 00       
04343A 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       89 42 04 A1 
       02 00       
04344C 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       9E 42 04 A2 
       02 00       
04345E 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       B3 42 04 A3 
       02 00       
043470 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       C8 42 04 A4 
       02 00       
043482 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       DD 42 04 A5 
       02 00       
043494 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       F2 42 04 A6 
       02 00       
0434A6 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       07 43 04 A7 
       02 00       
0434B8 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       1C 43 04 A8 
       02 00       
0434CA 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       31 43 04 A9 
       02 00       
0434DC 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       46 43 04 AA 
       02 00       
0434EE 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       5B 43 04 AB 
       02 00       
043500 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       70 43 04 AC 
       02 00       
043512 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       85 43 04 B1 
       02 00       
043524 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       9A 43 04 B2 
       02 00       
043536 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       AF 43 04 B3 
       02 00       
043548 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       C4 43 04 B4 
       02 00       
04355A 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       D9 43 04 B5 
       02 00       
04356C 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       EE 43 04 B6 
       02 00       
04357E 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       03 44 04 B7 
       02 00       
043590 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       18 44 04 B8 
       02 00       
0435A2 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       2D 44 04 B9 
       02 00       
0435B4 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       42 44 04 BA 
       02 00       
0435C6 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       57 44 04 BB 
       02 00       
0435D8 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       6C 44 04 BC 
       02 00       
0435EA 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       81 44 04 C1 
       02 00       
0435FC 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       96 44 04 C2 
       02 00       
04360E 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       AB 44 04 C3 
       02 00       
043620 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       C0 44 04 C4 
       02 00       
043632 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       D5 44 04 C5 
       02 00       
043644 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       EA 44 04 C6 
       02 00       
043656 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       FF 44 04 C7 
       02 00       
043668 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       14 45 04 C8 
       02 00       
04367A 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       29 45 04 C9 
       02 00       
04368C 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       3E 45 04 CA 
       02 00       
04369E 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       53 45 04 CB 
       02 00       
0436B0 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       68 45 04 CC 
       02 00       
0436C2 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       7D 45 04 D1 
       02 00       
0436D4 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       92 45 04 D2 
       02 00       
0436E6 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       A7 45 04 D3 
       02 00       
0436F8 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       BC 45 04 D4 
       02 00       
04370A 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       D1 45 04 D5 
       02 00       
04371C 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       E6 45 04 D6 
       02 00       
04372E 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       FB 45 04 D7 
       02 00       
043740 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       10 46 04 D8 
       02 00       
043752 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       25 46 04 D9 
       02 00       
043764 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       3A 46 04 DA 
       02 00       
043776 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       4F 46 04 DB 
       02 00       
043788 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       64 46 04 DC 
       02 00       
04379A 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       79 46 04 E1 
       02 00       
0437AC 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       8E 46 04 E2 
       02 00       
0437BE 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       A3 46 04 E3 
       02 00       
0437D0 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       B8 46 04 E4 
       02 00       
0437E2 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       CD 46 04 E5 
       02 00       
0437F4 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       E2 46 04 E6 
       02 00       
043806 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       F7 46 04 E7 
       02 00       
043818 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       0C 47 04 E8 
       02 00       
04382A 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       21 47 04 E9 
       02 00       
04383C 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       36 47 04 EA 
       02 00       
04384E 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       4B 47 04 EB 
       02 00       
043860 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       60 47 04 EC 
       02 00       
043872 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       75 47 04 F1 
       02 00       
043884 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       8A 47 04 F2 
       02 00       
043896 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_243, 755
       00 00 10 00 
       00 00 01 00 
       9F 47 04 F3 
       02 00       
0438A8 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       B4 47 04 F5 
       02 00       
0438BA 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       C9 47 04 F6 
       02 00       
0438CC 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_247, 759
       00 00 10 00 
       00 00 01 00 
       DE 47 04 F7 
       02 00       
0438DE 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       F3 47 04 F8 
       02 00       
0438F0             0193*   
0438F0             0194*   tiles_dg_files_list: ; filename:
0438F0 74 69 6C 65 0195*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
043905 74 69 6C 65 0196*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
04391A 74 69 6C 65 0197*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
04392F 74 69 6C 65 0198*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
043944 74 69 6C 65 0199*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
043959 74 69 6C 65 0200*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
04396E 74 69 6C 65 0201*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
043983 74 69 6C 65 0202*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
043998 74 69 6C 65 0203*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0439AD 74 69 6C 65 0204*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
0439C2 74 69 6C 65 0205*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
0439D7 74 69 6C 65 0206*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
0439EC 74 69 6C 65 0207*   fn_dg_012: db "tiles/dg/0/012.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 32 2E 72 
       67 62 61 32 
       00          
043A01 74 69 6C 65 0208*   fn_dg_013: db "tiles/dg/0/013.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 33 2E 72 
       67 62 61 32 
       00          
043A16 74 69 6C 65 0209*   fn_dg_014: db "tiles/dg/0/014.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 34 2E 72 
       67 62 61 32 
       00          
043A2B 74 69 6C 65 0210*   fn_dg_015: db "tiles/dg/0/015.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 35 2E 72 
       67 62 61 32 
       00          
043A40 74 69 6C 65 0211*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
043A55 74 69 6C 65 0212*   fn_dg_025: db "tiles/dg/0/025.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 35 2E 72 
       67 62 61 32 
       00          
043A6A 74 69 6C 65 0213*   fn_dg_026: db "tiles/dg/0/026.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 36 2E 72 
       67 62 61 32 
       00          
043A7F 74 69 6C 65 0214*   fn_dg_027: db "tiles/dg/0/027.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 37 2E 72 
       67 62 61 32 
       00          
043A94 74 69 6C 65 0215*   fn_dg_028: db "tiles/dg/0/028.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 38 2E 72 
       67 62 61 32 
       00          
043AA9 74 69 6C 65 0216*   fn_dg_029: db "tiles/dg/0/029.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 39 2E 72 
       67 62 61 32 
       00          
043ABE 74 69 6C 65 0217*   fn_dg_030: db "tiles/dg/0/030.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 30 2E 72 
       67 62 61 32 
       00          
043AD3 74 69 6C 65 0218*   fn_dg_031: db "tiles/dg/0/031.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 31 2E 72 
       67 62 61 32 
       00          
043AE8 74 69 6C 65 0219*   fn_dg_032: db "tiles/dg/0/032.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
043AFD 74 69 6C 65 0220*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
043B12 74 69 6C 65 0221*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
043B27 74 69 6C 65 0222*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
043B3C 74 69 6C 65 0223*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
043B51 74 69 6C 65 0224*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
043B66 74 69 6C 65 0225*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
043B7B 74 69 6C 65 0226*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
043B90 74 69 6C 65 0227*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
043BA5 74 69 6C 65 0228*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
043BBA 74 69 6C 65 0229*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
043BCF 74 69 6C 65 0230*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
043BE4 74 69 6C 65 0231*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
043BF9 74 69 6C 65 0232*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
043C0E 74 69 6C 65 0233*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
043C23 74 69 6C 65 0234*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
043C38 74 69 6C 65 0235*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
043C4D 74 69 6C 65 0236*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
043C62 74 69 6C 65 0237*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043C77 74 69 6C 65 0238*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
043C8C 74 69 6C 65 0239*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
043CA1 74 69 6C 65 0240*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
043CB6 74 69 6C 65 0241*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
043CCB 74 69 6C 65 0242*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
043CE0 74 69 6C 65 0243*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
043CF5 74 69 6C 65 0244*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
043D0A 74 69 6C 65 0245*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
043D1F 74 69 6C 65 0246*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
043D34 74 69 6C 65 0247*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
043D49 74 69 6C 65 0248*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
043D5E 74 69 6C 65 0249*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
043D73 74 69 6C 65 0250*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
043D88 74 69 6C 65 0251*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
043D9D 74 69 6C 65 0252*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
043DB2 74 69 6C 65 0253*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
043DC7 74 69 6C 65 0254*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
043DDC 74 69 6C 65 0255*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
043DF1 74 69 6C 65 0256*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
043E06 74 69 6C 65 0257*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
043E1B 74 69 6C 65 0258*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
043E30 74 69 6C 65 0259*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
043E45 74 69 6C 65 0260*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
043E5A 74 69 6C 65 0261*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
043E6F 74 69 6C 65 0262*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
043E84 74 69 6C 65 0263*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
043E99 74 69 6C 65 0264*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
043EAE 74 69 6C 65 0265*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
043EC3 74 69 6C 65 0266*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
043ED8 74 69 6C 65 0267*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
043EED 74 69 6C 65 0268*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
043F02 74 69 6C 65 0269*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
043F17 74 69 6C 65 0270*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
043F2C 74 69 6C 65 0271*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
043F41 74 69 6C 65 0272*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
043F56 74 69 6C 65 0273*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
043F6B 74 69 6C 65 0274*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
043F80 74 69 6C 65 0275*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
043F95 74 69 6C 65 0276*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
043FAA 74 69 6C 65 0277*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
043FBF 74 69 6C 65 0278*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
043FD4 74 69 6C 65 0279*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
043FE9 74 69 6C 65 0280*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
043FFE 74 69 6C 65 0281*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
044013 74 69 6C 65 0282*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
044028 74 69 6C 65 0283*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
04403D 74 69 6C 65 0284*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
044052 74 69 6C 65 0285*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
044067 74 69 6C 65 0286*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
04407C 74 69 6C 65 0287*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
044091 74 69 6C 65 0288*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
0440A6 74 69 6C 65 0289*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
0440BB 74 69 6C 65 0290*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
0440D0 74 69 6C 65 0291*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0440E5 74 69 6C 65 0292*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
0440FA 74 69 6C 65 0293*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
04410F 74 69 6C 65 0294*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
044124 74 69 6C 65 0295*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
044139 74 69 6C 65 0296*   fn_dg_141: db "tiles/dg/0/141.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 31 2E 72 
       67 62 61 32 
       00          
04414E 74 69 6C 65 0297*   fn_dg_142: db "tiles/dg/0/142.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 32 2E 72 
       67 62 61 32 
       00          
044163 74 69 6C 65 0298*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
044178 74 69 6C 65 0299*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
04418D 74 69 6C 65 0300*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
0441A2 74 69 6C 65 0301*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
0441B7 74 69 6C 65 0302*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
0441CC 74 69 6C 65 0303*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
0441E1 74 69 6C 65 0304*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
0441F6 74 69 6C 65 0305*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
04420B 74 69 6C 65 0306*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
044220 74 69 6C 65 0307*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
044235 74 69 6C 65 0308*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
04424A 74 69 6C 65 0309*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
04425F 74 69 6C 65 0310*   fn_dg_157: db "tiles/dg/0/157.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 37 2E 72 
       67 62 61 32 
       00          
044274 74 69 6C 65 0311*   fn_dg_158: db "tiles/dg/0/158.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 38 2E 72 
       67 62 61 32 
       00          
044289 74 69 6C 65 0312*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
04429E 74 69 6C 65 0313*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
0442B3 74 69 6C 65 0314*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
0442C8 74 69 6C 65 0315*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
0442DD 74 69 6C 65 0316*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
0442F2 74 69 6C 65 0317*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
044307 74 69 6C 65 0318*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
04431C 74 69 6C 65 0319*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044331 74 69 6C 65 0320*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
044346 74 69 6C 65 0321*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
04435B 74 69 6C 65 0322*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
044370 74 69 6C 65 0323*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
044385 74 69 6C 65 0324*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
04439A 74 69 6C 65 0325*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
0443AF 74 69 6C 65 0326*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
0443C4 74 69 6C 65 0327*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
0443D9 74 69 6C 65 0328*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
0443EE 74 69 6C 65 0329*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
044403 74 69 6C 65 0330*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
044418 74 69 6C 65 0331*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04442D 74 69 6C 65 0332*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
044442 74 69 6C 65 0333*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
044457 74 69 6C 65 0334*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
04446C 74 69 6C 65 0335*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
044481 74 69 6C 65 0336*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
044496 74 69 6C 65 0337*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
0444AB 74 69 6C 65 0338*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
0444C0 74 69 6C 65 0339*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
0444D5 74 69 6C 65 0340*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
0444EA 74 69 6C 65 0341*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
0444FF 74 69 6C 65 0342*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
044514 74 69 6C 65 0343*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044529 74 69 6C 65 0344*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
04453E 74 69 6C 65 0345*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
044553 74 69 6C 65 0346*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
044568 74 69 6C 65 0347*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
04457D 74 69 6C 65 0348*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
044592 74 69 6C 65 0349*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
0445A7 74 69 6C 65 0350*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
0445BC 74 69 6C 65 0351*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
0445D1 74 69 6C 65 0352*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
0445E6 74 69 6C 65 0353*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
0445FB 74 69 6C 65 0354*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
044610 74 69 6C 65 0355*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044625 74 69 6C 65 0356*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
04463A 74 69 6C 65 0357*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
04464F 74 69 6C 65 0358*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
044664 74 69 6C 65 0359*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
044679 74 69 6C 65 0360*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
04468E 74 69 6C 65 0361*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
0446A3 74 69 6C 65 0362*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
0446B8 74 69 6C 65 0363*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
0446CD 74 69 6C 65 0364*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
0446E2 74 69 6C 65 0365*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
0446F7 74 69 6C 65 0366*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
04470C 74 69 6C 65 0367*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044721 74 69 6C 65 0368*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
044736 74 69 6C 65 0369*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
04474B 74 69 6C 65 0370*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
044760 74 69 6C 65 0371*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
044775 74 69 6C 65 0372*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
04478A 74 69 6C 65 0373*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
04479F 74 69 6C 65 0374*   fn_dg_243: db "tiles/dg/0/243.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 33 2E 72 
       67 62 61 32 
       00          
0447B4 74 69 6C 65 0375*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
0447C9 74 69 6C 65 0376*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
0447DE 74 69 6C 65 0377*   fn_dg_247: db "tiles/dg/0/247.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 37 2E 72 
       67 62 61 32 
       00          
0447F3 74 69 6C 65 0378*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044808             0053        ; include "images_tiles_xevious.inc"
044808             0054        include "images_sprites.inc"
044808             0001*   ; Generated by make_images.py
044808             0002*   
044808             0003*   sprites_num_images: equ 80
044808             0004*   
044808             0005*   ; buffer_ids:
044808             0006*   BUF_CRATER: equ 256
044808             0007*   BUF_EXPLOSION_A: equ 257
044808             0008*   BUF_EXPLOSION_B: equ 258
044808             0009*   BUF_EXPLOSION_C: equ 259
044808             0010*   BUF_EXPLOSION_D: equ 260
044808             0011*   BUF_EXPLOSION_E: equ 261
044808             0012*   BUF_FIREBALL_A: equ 262
044808             0013*   BUF_FIREBALL_B: equ 263
044808             0014*   BUF_LASER_A: equ 264
044808             0015*   BUF_LASER_B: equ 265
044808             0016*   BUF_PAD: equ 266
044808             0017*   BUF_SEEKER_000: equ 267
044808             0018*   BUF_SEEKER_008: equ 268
044808             0019*   BUF_SEEKER_016: equ 269
044808             0020*   BUF_SEEKER_024: equ 270
044808             0021*   BUF_SEEKER_032: equ 271
044808             0022*   BUF_SEEKER_040: equ 272
044808             0023*   BUF_SEEKER_048: equ 273
044808             0024*   BUF_SEEKER_056: equ 274
044808             0025*   BUF_SEEKER_064: equ 275
044808             0026*   BUF_SEEKER_072: equ 276
044808             0027*   BUF_SEEKER_080: equ 277
044808             0028*   BUF_SEEKER_088: equ 278
044808             0029*   BUF_SEEKER_096: equ 279
044808             0030*   BUF_SEEKER_104: equ 280
044808             0031*   BUF_SEEKER_112: equ 281
044808             0032*   BUF_SEEKER_120: equ 282
044808             0033*   BUF_SEEKER_128: equ 283
044808             0034*   BUF_SEEKER_136: equ 284
044808             0035*   BUF_SEEKER_144: equ 285
044808             0036*   BUF_SEEKER_152: equ 286
044808             0037*   BUF_SEEKER_160: equ 287
044808             0038*   BUF_SEEKER_168: equ 288
044808             0039*   BUF_SEEKER_176: equ 289
044808             0040*   BUF_SEEKER_184: equ 290
044808             0041*   BUF_SEEKER_192: equ 291
044808             0042*   BUF_SEEKER_200: equ 292
044808             0043*   BUF_SEEKER_208: equ 293
044808             0044*   BUF_SEEKER_216: equ 294
044808             0045*   BUF_SEEKER_224: equ 295
044808             0046*   BUF_SEEKER_232: equ 296
044808             0047*   BUF_SEEKER_240: equ 297
044808             0048*   BUF_SEEKER_248: equ 298
044808             0049*   BUF_SHIP_0L: equ 299
044808             0050*   BUF_SHIP_1C: equ 300
044808             0051*   BUF_SHIP_2R: equ 301
044808             0052*   BUF_SHIP_SMALL: equ 302
044808             0053*   BUF_TEST_STRIPES: equ 303
044808             0054*   BUF_TURRET_000: equ 304
044808             0055*   BUF_TURRET_008: equ 305
044808             0056*   BUF_TURRET_016: equ 306
044808             0057*   BUF_TURRET_024: equ 307
044808             0058*   BUF_TURRET_032: equ 308
044808             0059*   BUF_TURRET_040: equ 309
044808             0060*   BUF_TURRET_048: equ 310
044808             0061*   BUF_TURRET_056: equ 311
044808             0062*   BUF_TURRET_064: equ 312
044808             0063*   BUF_TURRET_072: equ 313
044808             0064*   BUF_TURRET_080: equ 314
044808             0065*   BUF_TURRET_088: equ 315
044808             0066*   BUF_TURRET_096: equ 316
044808             0067*   BUF_TURRET_104: equ 317
044808             0068*   BUF_TURRET_112: equ 318
044808             0069*   BUF_TURRET_120: equ 319
044808             0070*   BUF_TURRET_128: equ 320
044808             0071*   BUF_TURRET_136: equ 321
044808             0072*   BUF_TURRET_144: equ 322
044808             0073*   BUF_TURRET_152: equ 323
044808             0074*   BUF_TURRET_160: equ 324
044808             0075*   BUF_TURRET_168: equ 325
044808             0076*   BUF_TURRET_176: equ 326
044808             0077*   BUF_TURRET_184: equ 327
044808             0078*   BUF_TURRET_192: equ 328
044808             0079*   BUF_TURRET_200: equ 329
044808             0080*   BUF_TURRET_208: equ 330
044808             0081*   BUF_TURRET_216: equ 331
044808             0082*   BUF_TURRET_224: equ 332
044808             0083*   BUF_TURRET_232: equ 333
044808             0084*   BUF_TURRET_240: equ 334
044808             0085*   BUF_TURRET_248: equ 335
044808             0086*   
044808             0087*   sprites_image_list: ; type; width; height; size; filename; bufferId:
044808 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       A8 4D 04 00 
       01 00       
04481A 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_explosion_a, 257
       00 00 10 00 
       00 00 01 00 
       BD 4D 04 01 
       01 00       
04482C 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_explosion_b, 258
       00 00 10 00 
       00 00 01 00 
       D7 4D 04 02 
       01 00       
04483E 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_explosion_c, 259
       00 00 10 00 
       00 00 01 00 
       F1 4D 04 03 
       01 00       
044850 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_explosion_d, 260
       00 00 10 00 
       00 00 01 00 
       0B 4E 04 04 
       01 00       
044862 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_explosion_e, 261
       00 00 10 00 
       00 00 01 00 
       25 4E 04 05 
       01 00       
044874 01 00 00 07 0094*   	dl 1, 7, 7, 49, fn_fireball_a, 262
       00 00 07 00 
       00 31 00 00 
       3F 4E 04 06 
       01 00       
044886 01 00 00 07 0095*   	dl 1, 7, 7, 49, fn_fireball_b, 263
       00 00 07 00 
       00 31 00 00 
       58 4E 04 07 
       01 00       
044898 01 00 00 05 0096*   	dl 1, 5, 13, 65, fn_laser_a, 264
       00 00 0D 00 
       00 41 00 00 
       71 4E 04 08 
       01 00       
0448AA 01 00 00 05 0097*   	dl 1, 5, 13, 65, fn_laser_b, 265
       00 00 0D 00 
       00 41 00 00 
       87 4E 04 09 
       01 00       
0448BC 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_pad, 266
       00 00 10 00 
       00 00 01 00 
       9D 4E 04 0A 
       01 00       
0448CE 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_seeker_000, 267
       00 00 10 00 
       00 00 01 00 
       AF 4E 04 0B 
       01 00       
0448E0 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_seeker_008, 268
       00 00 10 00 
       00 00 01 00 
       C8 4E 04 0C 
       01 00       
0448F2 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_seeker_016, 269
       00 00 10 00 
       00 00 01 00 
       E1 4E 04 0D 
       01 00       
044904 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_seeker_024, 270
       00 00 10 00 
       00 00 01 00 
       FA 4E 04 0E 
       01 00       
044916 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_seeker_032, 271
       00 00 10 00 
       00 00 01 00 
       13 4F 04 0F 
       01 00       
044928 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_seeker_040, 272
       00 00 10 00 
       00 00 01 00 
       2C 4F 04 10 
       01 00       
04493A 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_seeker_048, 273
       00 00 10 00 
       00 00 01 00 
       45 4F 04 11 
       01 00       
04494C 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_seeker_056, 274
       00 00 10 00 
       00 00 01 00 
       5E 4F 04 12 
       01 00       
04495E 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_seeker_064, 275
       00 00 10 00 
       00 00 01 00 
       77 4F 04 13 
       01 00       
044970 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_seeker_072, 276
       00 00 10 00 
       00 00 01 00 
       90 4F 04 14 
       01 00       
044982 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_seeker_080, 277
       00 00 10 00 
       00 00 01 00 
       A9 4F 04 15 
       01 00       
044994 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_seeker_088, 278
       00 00 10 00 
       00 00 01 00 
       C2 4F 04 16 
       01 00       
0449A6 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_seeker_096, 279
       00 00 10 00 
       00 00 01 00 
       DB 4F 04 17 
       01 00       
0449B8 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_seeker_104, 280
       00 00 10 00 
       00 00 01 00 
       F4 4F 04 18 
       01 00       
0449CA 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_seeker_112, 281
       00 00 10 00 
       00 00 01 00 
       0D 50 04 19 
       01 00       
0449DC 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_seeker_120, 282
       00 00 10 00 
       00 00 01 00 
       26 50 04 1A 
       01 00       
0449EE 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_seeker_128, 283
       00 00 10 00 
       00 00 01 00 
       3F 50 04 1B 
       01 00       
044A00 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_seeker_136, 284
       00 00 10 00 
       00 00 01 00 
       58 50 04 1C 
       01 00       
044A12 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_seeker_144, 285
       00 00 10 00 
       00 00 01 00 
       71 50 04 1D 
       01 00       
044A24 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_seeker_152, 286
       00 00 10 00 
       00 00 01 00 
       8A 50 04 1E 
       01 00       
044A36 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_seeker_160, 287
       00 00 10 00 
       00 00 01 00 
       A3 50 04 1F 
       01 00       
044A48 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_seeker_168, 288
       00 00 10 00 
       00 00 01 00 
       BC 50 04 20 
       01 00       
044A5A 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_seeker_176, 289
       00 00 10 00 
       00 00 01 00 
       D5 50 04 21 
       01 00       
044A6C 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_seeker_184, 290
       00 00 10 00 
       00 00 01 00 
       EE 50 04 22 
       01 00       
044A7E 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_seeker_192, 291
       00 00 10 00 
       00 00 01 00 
       07 51 04 23 
       01 00       
044A90 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_seeker_200, 292
       00 00 10 00 
       00 00 01 00 
       20 51 04 24 
       01 00       
044AA2 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_seeker_208, 293
       00 00 10 00 
       00 00 01 00 
       39 51 04 25 
       01 00       
044AB4 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_seeker_216, 294
       00 00 10 00 
       00 00 01 00 
       52 51 04 26 
       01 00       
044AC6 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_seeker_224, 295
       00 00 10 00 
       00 00 01 00 
       6B 51 04 27 
       01 00       
044AD8 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_seeker_232, 296
       00 00 10 00 
       00 00 01 00 
       84 51 04 28 
       01 00       
044AEA 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_seeker_240, 297
       00 00 10 00 
       00 00 01 00 
       9D 51 04 29 
       01 00       
044AFC 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_seeker_248, 298
       00 00 10 00 
       00 00 01 00 
       B6 51 04 2A 
       01 00       
044B0E 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_ship_0l, 299
       00 00 10 00 
       00 00 01 00 
       CF 51 04 2B 
       01 00       
044B20 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_ship_1c, 300
       00 00 10 00 
       00 00 01 00 
       E5 51 04 2C 
       01 00       
044B32 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_ship_2r, 301
       00 00 10 00 
       00 00 01 00 
       FB 51 04 2D 
       01 00       
044B44 01 00 00 08 0134*   	dl 1, 8, 8, 64, fn_ship_small, 302
       00 00 08 00 
       00 40 00 00 
       11 52 04 2E 
       01 00       
044B56 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_test_stripes, 303
       00 00 10 00 
       00 00 01 00 
       2A 52 04 2F 
       01 00       
044B68 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_turret_000, 304
       00 00 10 00 
       00 00 01 00 
       45 52 04 30 
       01 00       
044B7A 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_turret_008, 305
       00 00 10 00 
       00 00 01 00 
       5E 52 04 31 
       01 00       
044B8C 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_turret_016, 306
       00 00 10 00 
       00 00 01 00 
       77 52 04 32 
       01 00       
044B9E 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_turret_024, 307
       00 00 10 00 
       00 00 01 00 
       90 52 04 33 
       01 00       
044BB0 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_turret_032, 308
       00 00 10 00 
       00 00 01 00 
       A9 52 04 34 
       01 00       
044BC2 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_turret_040, 309
       00 00 10 00 
       00 00 01 00 
       C2 52 04 35 
       01 00       
044BD4 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_turret_048, 310
       00 00 10 00 
       00 00 01 00 
       DB 52 04 36 
       01 00       
044BE6 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_turret_056, 311
       00 00 10 00 
       00 00 01 00 
       F4 52 04 37 
       01 00       
044BF8 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_turret_064, 312
       00 00 10 00 
       00 00 01 00 
       0D 53 04 38 
       01 00       
044C0A 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_turret_072, 313
       00 00 10 00 
       00 00 01 00 
       26 53 04 39 
       01 00       
044C1C 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_turret_080, 314
       00 00 10 00 
       00 00 01 00 
       3F 53 04 3A 
       01 00       
044C2E 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_turret_088, 315
       00 00 10 00 
       00 00 01 00 
       58 53 04 3B 
       01 00       
044C40 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_turret_096, 316
       00 00 10 00 
       00 00 01 00 
       71 53 04 3C 
       01 00       
044C52 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_turret_104, 317
       00 00 10 00 
       00 00 01 00 
       8A 53 04 3D 
       01 00       
044C64 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_turret_112, 318
       00 00 10 00 
       00 00 01 00 
       A3 53 04 3E 
       01 00       
044C76 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_turret_120, 319
       00 00 10 00 
       00 00 01 00 
       BC 53 04 3F 
       01 00       
044C88 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_turret_128, 320
       00 00 10 00 
       00 00 01 00 
       D5 53 04 40 
       01 00       
044C9A 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_turret_136, 321
       00 00 10 00 
       00 00 01 00 
       EE 53 04 41 
       01 00       
044CAC 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_turret_144, 322
       00 00 10 00 
       00 00 01 00 
       07 54 04 42 
       01 00       
044CBE 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_turret_152, 323
       00 00 10 00 
       00 00 01 00 
       20 54 04 43 
       01 00       
044CD0 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_turret_160, 324
       00 00 10 00 
       00 00 01 00 
       39 54 04 44 
       01 00       
044CE2 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_turret_168, 325
       00 00 10 00 
       00 00 01 00 
       52 54 04 45 
       01 00       
044CF4 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_turret_176, 326
       00 00 10 00 
       00 00 01 00 
       6B 54 04 46 
       01 00       
044D06 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_turret_184, 327
       00 00 10 00 
       00 00 01 00 
       84 54 04 47 
       01 00       
044D18 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_turret_192, 328
       00 00 10 00 
       00 00 01 00 
       9D 54 04 48 
       01 00       
044D2A 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_turret_200, 329
       00 00 10 00 
       00 00 01 00 
       B6 54 04 49 
       01 00       
044D3C 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_turret_208, 330
       00 00 10 00 
       00 00 01 00 
       CF 54 04 4A 
       01 00       
044D4E 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_turret_216, 331
       00 00 10 00 
       00 00 01 00 
       E8 54 04 4B 
       01 00       
044D60 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_turret_224, 332
       00 00 10 00 
       00 00 01 00 
       01 55 04 4C 
       01 00       
044D72 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_turret_232, 333
       00 00 10 00 
       00 00 01 00 
       1A 55 04 4D 
       01 00       
044D84 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_turret_240, 334
       00 00 10 00 
       00 00 01 00 
       33 55 04 4E 
       01 00       
044D96 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_turret_248, 335
       00 00 10 00 
       00 00 01 00 
       4C 55 04 4F 
       01 00       
044DA8             0168*   
044DA8             0169*   ; files_list: ; filename:
044DA8 73 70 72 69 0170*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
044DBD 73 70 72 69 0171*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
044DD7 73 70 72 69 0172*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
044DF1 73 70 72 69 0173*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
044E0B 73 70 72 69 0174*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
044E25 73 70 72 69 0175*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
044E3F 73 70 72 69 0176*   fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
044E58 73 70 72 69 0177*   fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
044E71 73 70 72 69 0178*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
044E87 73 70 72 69 0179*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
044E9D 73 70 72 69 0180*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
044EAF 73 70 72 69 0181*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044EC8 73 70 72 69 0182*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044EE1 73 70 72 69 0183*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044EFA 73 70 72 69 0184*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044F13 73 70 72 69 0185*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044F2C 73 70 72 69 0186*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044F45 73 70 72 69 0187*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044F5E 73 70 72 69 0188*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044F77 73 70 72 69 0189*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044F90 73 70 72 69 0190*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044FA9 73 70 72 69 0191*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044FC2 73 70 72 69 0192*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044FDB 73 70 72 69 0193*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044FF4 73 70 72 69 0194*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04500D 73 70 72 69 0195*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045026 73 70 72 69 0196*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04503F 73 70 72 69 0197*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045058 73 70 72 69 0198*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045071 73 70 72 69 0199*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
04508A 73 70 72 69 0200*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0450A3 73 70 72 69 0201*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0450BC 73 70 72 69 0202*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0450D5 73 70 72 69 0203*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0450EE 73 70 72 69 0204*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045107 73 70 72 69 0205*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045120 73 70 72 69 0206*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045139 73 70 72 69 0207*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045152 73 70 72 69 0208*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
04516B 73 70 72 69 0209*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045184 73 70 72 69 0210*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
04519D 73 70 72 69 0211*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0451B6 73 70 72 69 0212*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0451CF 73 70 72 69 0213*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
0451E5 73 70 72 69 0214*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
0451FB 73 70 72 69 0215*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
045211 73 70 72 69 0216*   fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
04522A 73 70 72 69 0217*   fn_test_stripes: db "sprites/test_stripes.rgba2",0
       74 65 73 2F 
       74 65 73 74 
       5F 73 74 72 
       69 70 65 73 
       2E 72 67 62 
       61 32 00    
045245 73 70 72 69 0218*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
04525E 73 70 72 69 0219*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045277 73 70 72 69 0220*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045290 73 70 72 69 0221*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0452A9 73 70 72 69 0222*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0452C2 73 70 72 69 0223*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0452DB 73 70 72 69 0224*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0452F4 73 70 72 69 0225*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04530D 73 70 72 69 0226*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
045326 73 70 72 69 0227*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
04533F 73 70 72 69 0228*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045358 73 70 72 69 0229*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045371 73 70 72 69 0230*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
04538A 73 70 72 69 0231*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0453A3 73 70 72 69 0232*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0453BC 73 70 72 69 0233*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0453D5 73 70 72 69 0234*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0453EE 73 70 72 69 0235*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045407 73 70 72 69 0236*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045420 73 70 72 69 0237*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045439 73 70 72 69 0238*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045452 73 70 72 69 0239*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
04546B 73 70 72 69 0240*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045484 73 70 72 69 0241*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04549D 73 70 72 69 0242*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0454B6 73 70 72 69 0243*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0454CF 73 70 72 69 0244*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0454E8 73 70 72 69 0245*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045501 73 70 72 69 0246*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
04551A 73 70 72 69 0247*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045533 73 70 72 69 0248*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
04554C 73 70 72 69 0249*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045565             0055        include "images_ui.inc"
045565             0001*   ; Generated by make_images.py
045565             0002*   
045565             0003*   ui_num_images: equ 4
045565             0004*   
045565             0005*   ; buffer_ids:
045565             0006*   BUF_BEZEL_L: equ 0
045565             0007*   BUF_BEZEL_R: equ 1
045565             0008*   BUF_SPLASH_BG: equ 2
045565             0009*   BUF_SPLASH_LOGO: equ 3
045565             0010*   
045565             0011*   ui_image_list: ; type; width; height; size; filename; bufferId:
045565 01 00 00 80 0012*   	dl 1, 128, 384, 49152, fn_bezel_l, 0
       00 00 80 01 
       00 00 C0 00 
       AD 55 04 00 
       00 00       
045577 01 00 00 80 0013*   	dl 1, 128, 384, 49152, fn_bezel_r, 1
       00 00 80 01 
       00 00 C0 00 
       BE 55 04 01 
       00 00       
045589 01 00 00 40 0014*   	dl 1, 320, 240, 76800, fn_splash_bg, 2
       01 00 F0 00 
       00 00 2C 01 
       CF 55 04 02 
       00 00       
04559B 01 00 00 A0 0015*   	dl 1, 160, 106, 16960, fn_splash_logo, 3
       00 00 6A 00 
       00 40 42 00 
       E2 55 04 03 
       00 00       
0455AD             0016*   
0455AD             0017*   ; files_list: ; filename:
0455AD 75 69 2F 62 0018*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
0455BE 75 69 2F 62 0019*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
0455CF 75 69 2F 73 0020*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
0455E2 75 69 2F 73 0021*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
0455F7             0056        include "levels.inc"
0455F7 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF          
045600             0002*   
045600             0003*   ; tileset indices
045600             0004*   tiles_dg: equ 0
045600             0005*   ; tiles_xevious: equ 1
045600 00 00 00    0006*   tileset_ptr_idx: dl 0
045603             0007*   tileset_ptrs:
045603             0008*       ; dl tiles_xevious_levels
045603 CB 56 04    0009*       dl tileset_00_levels
045606 00 00 00    0010*   tileset_ptrs_end: dl 0 ; list terminator
045609             0011*   
045609             0012*   ; get a pointer to the current tileset
045609             0013*   ; inputs: tileset_ptr_idx
045609             0014*   ; returns: ix = pointer to tileset levels lut
045609             0015*   get_tileset_ptr:
045609 3A 00 56 04 0016*       ld a,(tileset_ptr_idx)
04560D 57          0017*       ld d,a ; d = tileset index
04560E 1E 03       0018*       ld e,3 ; three bytes per index record
045610 ED 5C       0019*       mlt de ; offset into tileset_ptrs lut
045612 DD 21 03 56 0020*       ld ix,tileset_ptrs
       04          
045617 DD 19       0021*       add ix,de ; ix = pointer to tileset_ptrs record
045619 C9          0022*       ret
04561A             0023*   ; end get_tileset_ptr
04561A             0024*   
04561A             0025*   ; intialize a tileset
04561A             0026*   ; inputs: a = index into tileset_ptrs
04561A             0027*   init_tileset:
04561A 32 00 56 04 0028*       ld (tileset_ptr_idx),a ; store new tileset index
04561E CD 09 56 04 0029*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
045622 DD 37 00    0030*       ld ix,(ix) ; ix = pointer to tileset levels lut
045625 DD 7E FF    0031*       ld a,(ix-1) ; number of levels in the tileset
045628 32 58 56 04 0032*       ld (num_levels),a
04562C AF          0033*       xor a ; reset current level to zero
04562D 32 57 56 04 0034*       ld (cur_level),a
045631 C3 89 56 04 0035*       jp init_level
045635             0036*   ; end init_tileset
045635             0037*   
045635             0038*   next_tileset:
045635 21 00 56 04 0039*       ld hl,tileset_ptr_idx
045639 34          0040*       inc (hl) ; bump to next index
04563A CD 09 56 04 0041*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
04563E DD 27 00    0042*       ld hl,(ix) ; ix = pointer to tileset levels lut
045641             0043*       sign_hlu ; check for list terminator (0)
045641 19          0001*M1     add hl,de ; 1 cycle
045642 B7          0002*M1     or a ; clear flags ; 1 cycle
045643 ED 52       0003*M1     sbc hl,de ; 2 cycles
045645             0004*M1     ; 4 cycles total
045645 C2 53 56 04 0044*       jp nz,@F ; not end of list
045649 3E FF       0045*       ld a,-1 ; will wrap around to zero on the next iteration
04564B 32 00 56 04 0046*       ld (tileset_ptr_idx),a
04564F C3 35 56 04 0047*       jp next_tileset ; try again
045653             0048*   @@:
045653 C3 1A 56 04 0049*       jp init_tileset
045657             0050*   ; end next_tileset
045657             0051*   
045657 00          0052*   cur_level: db 0
045658 00          0053*   num_levels: db 0
045659             0054*   
045659             0055*   ; get a pointer to the current level lookup record
045659             0056*   ; inputs: tileset_ptr_idx, cur_level
045659             0057*   ; returns: ix = pointer to level definition
045659             0058*   get_level_ptr:
045659 CD 09 56 04 0059*       call get_tileset_ptr
04565D DD 37 00    0060*       ld ix,(ix) ; ix = pointer to tileset levels lut
045660 3A 57 56 04 0061*       ld a,(cur_level)
045664 57          0062*       ld d,a ; d = level index
045665 1E 03       0063*       ld e,3 ; three bytes per level record
045667 ED 5C       0064*       mlt de ; offset into tileset levels lut
045669 DD 19       0065*       add ix,de ; ix = pointer to level record
04566B C9          0066*       ret
04566C             0067*   ; end get_level_ptr
04566C             0068*   
04566C             0069*   ; advance to the next level in the current tileset
04566C             0070*   ; inputs: tileset_ptr_idx, cur_level
04566C             0071*   next_level:
04566C 21 57 56 04 0072*       ld hl,cur_level
045670 34          0073*       inc (hl) ; bump to next level
045671 CD 59 56 04 0074*       call get_level_ptr ; ix points to current level lookup record
045675 DD 27 00    0075*       ld hl,(ix) ; hl = pointer to next level lookup record
045678             0076*       sign_hlu ; check for list terminator (0)
045678 19          0001*M1     add hl,de ; 1 cycle
045679 B7          0002*M1     or a ; clear flags ; 1 cycle
04567A ED 52       0003*M1     sbc hl,de ; 2 cycles
04567C             0004*M1     ; 4 cycles total
04567C C2 89 56 04 0077*       jp nz,@F ; not end of list
045680 AF          0078*       xor a ; reset level to zero
045681 32 57 56 04 0079*       ld (cur_level),a
045685 C3 35 56 04 0080*       jp next_tileset ; try next tileset
045689             0081*   @@: ; fall through to init_level
045689             0082*   ; end next_level
045689             0083*   
045689             0084*   ; inputs: ix pointed to tileset level definition
045689             0085*   init_level:
045689 CD 59 56 04 0086*       call get_level_ptr ; ix points to level lookup record
04568D DD 37 00    0087*       ld ix,(ix) ; ix points to level definition
045690             0088*   ; set tiles_cols
045690 DD 7E 00    0089*       ld a,(ix+0)
045693 32 06 66 04 0090*       ld (tiles_cols),a
045697             0091*   ; set tiles_row counter
045697 DD 7E 01    0092*       ld a,(ix+1)
04569A 32 03 66 04 0093*       ld (tiles_row),a
04569E             0094*   ; set cur_baseBufferId
04569E DD 27 04    0095*       ld hl,(ix+4)
0456A1 22 07 66 04 0096*       ld (cur_baseBufferId),hl
0456A5             0097*   ; set tiles_row_defs
0456A5 ED 32 07    0098*       lea ix,ix+7 ; ix points to definition of first tile of first row
0456A8 DD 22 00 66 0099*       ld (tiles_row_defs),ix
       04          
0456AD             0100*   ; print_level:
0456AD             0101*   level_x: equ 48
0456AD             0102*   level_y: equ 0
0456AD 0E 30       0103*       ld c,level_x
0456AF 06 00       0104*       ld b,level_y
0456B1 CD 37 19 04 0105*       call vdu_move_cursor
0456B5 CD 00 01 04 0106*       call printInline
0456B9 4C 65 76 65 0107*       asciz "Level: "
       6C 3A 20 00 
0456C1 3A 57 56 04 0108*       ld a,(cur_level)
0456C5 CD 4A 01 04 0109*       call printHexA
0456C9             0110*       ; call printNewLine
0456C9             0111*       ; ld hl,(cur_baseBufferId)
0456C9             0112*       ; call printDec
0456C9             0113*   
0456C9             0114*   ; ; draw initial background tiles
0456C9             0115*   ; ; TODO: make this a stars background
0456C9             0116*   ;     ld hl,BUF_STATION_BG_00
0456C9             0117*   ;     call vdu_buff_select
0456C9             0118*   ;     ld bc,0
0456C9             0119*   ;     ld de,field_top
0456C9             0120*   ;     call vdu_plot_bmp
0456C9             0121*   
0456C9             0122*   ;     ld hl,BUF_STATION_BG_01
0456C9             0123*   ;     call vdu_buff_select
0456C9             0124*   ;     ld bc,0
0456C9             0125*   ;     ld de,field_top+256
0456C9             0126*   ;     call vdu_plot_bmp
0456C9             0127*   
0456C9 C9          0128*       ret
0456CA             0129*   ; end init_level
0456CA             0057        include "levels_tileset_0.inc"
0456CA             0001*   ; Generated from tiles/dg/dg0_00.tmx
0456CA             0002*   
0456CA 01          0003*   tileset_00_num_levels: db 1
0456CB             0004*   
0456CB             0005*   tileset_00_levels:
0456CB D1 56 04    0006*   	dl tileset_00_level_00
0456CE 00 00 00    0007*   	dl 0 ; list terminator
0456D1             0008*   
0456D1             0009*   tileset_00_level_00: ; Level 0
0456D1 10          0010*   	db 16          ; num cols
0456D2 20 00 00    0011*   	dl 32          ; num rows
0456D5 00 02 00    0012*   	dl 512 ; base bufferId
0456D8 00 00 00 00 0013*   	db 000,000,000,000,000,101,116,115,100,115,104,000,000,000,000,000
       00 65 74 73 
       64 73 68 00 
       00 00 00 00 
0456E8 00 00 00 65 0014*   	db 000,000,000,101,098,116,113,114,114,115,116,097,104,000,000,000
       62 74 71 72 
       72 73 74 61 
       68 00 00 00 
0456F8 00 65 61 F5 0015*   	db 000,101,097,245,246,098,097,099,098,099,113,113,114,098,104,000
       F6 62 61 63 
       62 63 71 71 
       72 62 68 00 
045708 00 74 71 88 0016*   	db 000,116,113,136,137,115,113,114,113,114,098,099,113,114,100,000
       89 73 71 72 
       71 72 62 63 
       71 72 64 00 
045718 65 72 61 96 0017*   	db 101,114,097,150,151,099,097,105,098,098,081,082,074,083,084,104
       97 63 61 69 
       62 62 51 52 
       4A 53 54 68 
045728 05 71 72 96 0018*   	db 005,113,114,150,151,167,216,216,182,113,065,066,248,067,068,116
       97 A7 D8 D8 
       B6 71 41 42 
       F8 43 44 74 
045738 71 69 62 9A 0019*   	db 113,105,098,154,155,097,098,097,165,168,055,248,000,248,056,114
       9B 61 62 61 
       A5 A8 37 F8 
       00 F8 38 72 
045748 71 72 64 72 0020*   	db 113,114,100,114,113,100,113,114,113,114,049,050,248,051,052,098
       71 64 71 72 
       71 72 31 32 
       F8 33 34 62 
045758 61 62 61 64 0021*   	db 097,098,097,100,097,098,100,098,098,098,033,034,074,035,036,099
       61 62 64 62 
       62 62 21 22 
       4A 23 24 63 
045768 71 64 71 72 0022*   	db 113,100,113,114,113,114,121,114,115,113,087,088,188,113,100,113
       71 72 79 72 
       73 71 57 58 
       BC 71 64 71 
045778 61 62 59 5A 0023*   	db 097,098,089,090,091,098,114,098,136,137,071,072,219,097,098,097
       5B 62 72 62 
       88 89 47 48 
       DB 61 62 61 
045788 64 71 49 00 0024*   	db 100,113,073,000,075,171,220,172,134,135,171,220,236,220,220,172
       4B AB DC AC 
       86 87 AB DC 
       EC DC DC AC 
045798 62 64 39 3A 0025*   	db 098,100,057,058,059,097,098,100,134,135,099,100,097,098,100,098
       3B 61 62 64 
       86 87 63 64 
       61 62 64 62 
0457A8 72 62 72 73 0026*   	db 114,098,114,115,113,116,099,113,154,155,115,113,100,113,114,113
       71 74 63 71 
       9A 9B 73 71 
       64 71 72 71 
0457B8 62 72 62 63 0027*   	db 098,114,098,099,113,114,105,114,241,242,099,097,098,097,098,100
       71 72 69 72 
       F1 F2 63 61 
       62 61 62 64 
0457C8 73 79 71 72 0028*   	db 115,121,113,114,097,098,113,114,180,114,113,100,113,121,113,114
       61 62 71 72 
       B4 72 71 64 
       71 79 71 72 
0457D8 61 62 98 99 0029*   	db 097,098,152,153,098,152,153,098,211,100,097,098,100,243,098,098
       62 98 99 62 
       D3 64 61 62 
       64 F3 62 62 
0457E8 64 71 86 87 0030*   	db 100,113,134,135,114,134,135,115,195,212,212,212,212,243,114,113
       72 86 87 73 
       C3 D4 D4 D4 
       D4 F3 72 71 
0457F8 62 61 F5 F6 0031*   	db 098,097,245,246,098,245,246,099,211,114,099,097,098,243,098,100
       62 F5 F6 63 
       D3 72 63 61 
       62 F3 62 64 
045808 71 72 F1 F2 0032*   	db 113,114,241,242,115,241,242,163,162,098,105,100,087,088,113,114
       73 F1 F2 A3 
       A2 62 69 64 
       57 58 71 72 
045818 73 71 51 52 0033*   	db 115,113,081,082,074,083,084,098,114,115,113,116,071,072,098,098
       4A 53 54 62 
       72 73 71 74 
       47 48 62 62 
045828 63 61 41 42 0034*   	db 099,097,065,066,248,067,068,113,089,090,090,090,090,091,114,113
       F8 43 44 71 
       59 5A 5A 5A 
       5A 5B 72 71 
045838 71 64 37 F8 0035*   	db 113,100,055,248,000,248,056,114,073,148,098,040,105,075,098,100
       00 F8 38 72 
       49 94 62 28 
       69 4B 62 64 
045848 61 62 31 32 0036*   	db 097,098,049,050,248,051,052,114,073,132,056,000,055,075,113,114
       F8 33 34 72 
       49 84 38 00 
       37 4B 71 72 
045858 71 64 21 22 0037*   	db 113,100,033,034,074,035,036,114,073,247,116,040,123,075,098,121
       4A 23 24 72 
       49 F7 74 28 
       7B 4B 62 79 
045868 61 62 F1 F2 0038*   	db 097,098,241,242,100,241,242,098,073,113,243,121,107,075,099,113
       64 F1 F2 62 
       49 71 F3 79 
       6B 4B 63 71 
045878 67 71 86 87 0039*   	db 103,113,134,135,114,134,135,113,057,058,058,058,058,059,114,102
       72 86 87 71 
       39 3A 3A 3A 
       3A 3B 72 66 
045888 00 64 9A 9B 0040*   	db 000,100,154,155,098,154,155,100,098,098,099,180,098,100,098,000
       62 9A 9B 64 
       62 62 63 B4 
       62 64 62 00 
045898 00 67 72 63 0041*   	db 000,103,114,099,113,114,114,115,163,212,212,196,113,114,098,000
       71 72 72 73 
       A3 D4 D4 C4 
       71 72 62 00 
0458A8 00 00 62 71 0042*   	db 000,000,098,113,121,098,098,099,105,098,097,211,100,098,102,000
       79 62 62 63 
       69 62 61 D3 
       64 62 66 00 
0458B8 00 00 67 71 0043*   	db 000,000,103,113,114,100,114,113,100,113,114,179,114,102,000,000
       72 64 72 71 
       64 71 72 B3 
       72 66 00 00 
0458C8 00 00 00 00 0044*   	db 000,000,000,000,000,103,100,097,098,100,102,000,000,000,000,000
       00 67 64 61 
       62 64 66 00 
       00 00 00 00 
0458D8             0058        ; include "levels_xevious.inc"
0458D8             0059        include "player.inc"
0458D8 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
045900             0002*   
045900             0003*   ; ######## GAME STATE VARIABLES #######
045900             0004*   ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
045900 00 00 00    0005*   player_score: dl 0 ; integer
045903             0006*   ; player current shields,binary
045903             0007*   ; when < 0 player splodes
045903             0008*   ; restores to player_max_shields when new ship spawns
045903 10 00 00    0009*   player_shields: dl 16 ; integer
045906             0010*   ; max player shields,binary
045906             0011*   ; can increase with power-ups (todo)
045906 10 00 00    0012*   player_max_shields: dl 16 ; integer
045909             0013*   ; when reaches zero,game ends
045909             0014*   ; can increase based on TODO
045909 03          0015*   player_ships: db 3 ; integer
04590A             0016*   
04590A             0017*   speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
04590A             0018*   
04590A 00          0019*   player_weapons_count: db 0
04590B             0020*   player_lasers_max: equ 4
04590B             0021*   
04590B             0022*   player_defaults:
04590B 05          0023*       db player               ; type
04590C 2B 01 00    0024*       dl BUF_SHIP_0L          ; base_bufferId
04590F EF 5D 04    0025*       dl do_player            ; move_program
045912 40          0026*       db %01000000            ; collisions bit 6 signals sprite alive
045913 10          0027*       db 16                   ; dim_x
045914 10          0028*       db 16                   ; dim_y
045915 01          0029*       db 1                    ; num_orientations
045916 01          0030*       db 1                    ; num_animations
045917 00          0031*       db 0                    ; animation
045918 00          0032*       db 0                    ; animation_timer
045919 00          0033*       db 0                    ; move_timer
04591A 00          0034*       db 0                    ; move_step
04591B 00          0035*       db 0                    ; points
04591C 00          0036*       db 0                    ; shield_damage
04591D 00          0037*       db 0                    ; frame
04591E             0038*   
04591E             0039*   
04591E             0040*   ; set initial player position
04591E             0041*   ; inputs: none,everything is hardcoded
04591E             0042*   ; outputs: player_x/y set to bottom-left corner of screen
04591E             0043*   ; destroys: a
04591E             0044*   player_init:
04591E FD 21 00 81 0045*       ld iy,player_begin
       04          
045923 FD 22 65 69 0046*       ld (table_pointer),iy
       04          
045928 FD 7E 00    0047*       ld a,(iy+sprite_id)
04592B CD 00 1F 04 0048*       call vdu_sprite_select
04592F CD 13 1F 04 0049*       call vdu_sprite_clear_frames
045933 21 2B 01 00 0050*       ld hl,BUF_SHIP_0L
045937 CD 55 20 04 0051*       call vdu_sprite_add_buff
04593B 21 2C 01 00 0052*       ld hl,BUF_SHIP_1C
04593F CD 55 20 04 0053*       call vdu_sprite_add_buff
045943 21 2D 01 00 0054*       ld hl,BUF_SHIP_2R
045947 CD 55 20 04 0055*       call vdu_sprite_add_buff
04594B 01 00 00 00 0056*       ld bc,0
04594F FD 0F 01    0057*       ld (iy+sprite_x),bc
045952 11 00 6F 01 0058*       ld de,sprite_bottom*256 ; max sprite y-coordinate
045956 FD 1F 04    0059*       ld (iy+sprite_y),de
045959 CD CC 1F 04 0060*       call vdu_sprite_move_abs168
04595D CD 76 1F 04 0061*       call vdu_sprite_show
045961 21 FA 5D 04 0062*       ld hl,player_alive
045965 22 EC 5D 04 0063*       ld (player_state),hl
045969 FD CB 1D F6 0064*       set sprite_alive,(iy+sprite_collisions)
04596D C9          0065*       ret
04596E             0066*   
04596E             0067*   ; process player keyboard input, set player bitmap
04596E             0068*   ; velocities and draw player bitmap at updated coordinates
04596E             0069*   ; Inputs: player_x/y set at desired position
04596E             0070*   ; Returns: player bitmap drawn at updated position
04596E             0071*   ; Destroys: probably everything except maybe iy
04596E             0072*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
04596E             0073*   ; TODO: requires sprite implementation
04596E             0074*   player_input:
04596E FD 21 00 81 0075*       ld iy,player_begin
       04          
045973 FD 22 65 69 0076*       ld (table_pointer),iy
       04          
045978             0077*   ; ; did we die last frame?
045978             0078*   ;     ld a,(player_collisions)
045978             0079*   ;     and %00000010 ; zero flag will be set if not dead
045978             0080*   ;     jr z,player_not_dead
045978             0081*   ; ; yes we died
045978             0082*   ;     call kill_player
045978             0083*   ;     ret ; done
045978             0084*   player_not_dead: ; yay we didn't die
045978             0085*   ; reset player component velocities to zero as the default
045978 21 00 00 00 0086*       ld hl,0
04597C FD 2F 07    0087*       ld (iy+sprite_xvel),hl
04597F FD 2F 0A    0088*       ld (iy+sprite_yvel),hl
045982             0089*   ; make ship the active sprite
045982 FD 7E 00    0090*       ld a,(iy+sprite_id)
045985 CD 00 1F 04 0091*       call vdu_sprite_select
045989             0092*   ; check for keypresses and branch accordingly
045989             0093*   ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
045989             0094*       MOSCALL    mos_getkbmap ;ix = pointer to MOS virtual keys table
045989 3E 1E       0001*M1 			LD	A, function
04598B 5B CF       0002*M1 			RST.LIL	08h
04598D             0095*   ; we test all four arrow keys and add/subract velocities accordingly
04598D             0096*   ; this handles the case where two opposing movement keys
04598D             0097*   ; are down simultaneously (velocities will net to zero)
04598D             0098*   ; and allows diagonal movement when a vertical and horizontal key are down
04598D             0099*   ; it also allows movement and action keys to be detected simultaneously
04598D             0100*   ; so we can walk and chew gum at the same time
04598D 3E 01       0101*       ld a,1 ; set ship's default animation to center
04598F             0102*           ; if left and right are both down a will net to
04598F             0103*   
04598F             0104*   ; 99 Space: fire main weapon
04598F DD CB 0C 56 0105*       bit 2,(ix+12)
045993 F5          0106*       push af ; save flags for after player movement processed
045994             0107*   ; 26 Left: move player left
045994 DD CB 03 4E 0108*       bit 1,(ix+3)
045998 CA A8 59 04 0109*       jp z,@F
04599C FD 27 07    0110*       ld hl,(iy+sprite_xvel)
04599F 01 00 FD FF 0111*       ld bc,-speed_player
0459A3 09          0112*       add hl,bc
0459A4 FD 2F 07    0113*       ld (iy+sprite_xvel),hl
0459A7 3D          0114*       dec a ; set ship's animation to left
0459A8             0115*   @@:
0459A8             0116*   ; 122 Right: move player right
0459A8 DD CB 0F 4E 0117*       bit 1,(ix+15)
0459AC CA BC 59 04 0118*       jp z,@F
0459B0 FD 27 07    0119*       ld hl,(iy+sprite_xvel)
0459B3 01 00 03 00 0120*       ld bc,speed_player
0459B7 09          0121*       add hl,bc
0459B8 FD 2F 07    0122*       ld (iy+sprite_xvel),hl
0459BB 3C          0123*       inc a ; set ship's animation to right
0459BC             0124*   @@:
0459BC             0125*   ; 58 Up: move player up
0459BC DD CB 07 4E 0126*       bit 1,(ix+7)
0459C0 CA CF 59 04 0127*       jp z,@F
0459C4 FD 27 0A    0128*       ld hl,(iy+sprite_yvel)
0459C7 01 00 FD FF 0129*       ld bc,-speed_player
0459CB 09          0130*       add hl,bc
0459CC FD 2F 0A    0131*       ld (iy+sprite_yvel),hl
0459CF             0132*   @@:
0459CF             0133*   ; 42 Down: move player down
0459CF DD CB 05 4E 0134*       bit 1,(ix+5)
0459D3 CA E2 59 04 0135*       jp z,@F
0459D7 FD 27 0A    0136*       ld hl,(iy+sprite_yvel)
0459DA 01 00 03 00 0137*       ld bc,speed_player
0459DE 09          0138*       add hl,bc
0459DF FD 2F 0A    0139*       ld (iy+sprite_yvel),hl
0459E2             0140*   @@:
0459E2             0141*   ; a should land here loaded with the correct frame
0459E2 CD 63 1F 04 0142*       call vdu_sprite_select_frame
0459E6             0143*   ; draw player at updated position
0459E6 FD 21 00 81 0144*       ld iy,player_begin
       04          
0459EB FD 22 65 69 0145*       ld (table_pointer),iy
       04          
0459F0 CD F3 6A 04 0146*       call move_sprite
0459F4 FD 07 01    0147*       ld bc,(iy+sprite_x)
0459F7 FD 17 04    0148*       ld de,(iy+sprite_y)
0459FA CD CC 1F 04 0149*       call vdu_sprite_move_abs168
0459FE             0150*   ; process player laser fire
0459FE F1          0151*       pop af ; restore flags from spacebar check
0459FF C2 1C 5C 04 0152*       jp nz,player_spawn_laser ; will return to caller from there
045A03 C9          0153*       ret
045A04             0154*   ; end player_input
045A04             0155*   
045A04             0156*   score_x: equ 48
045A04             0157*   score_y: equ 1
045A04             0158*   ; prints the player's score
045A04             0159*   print_score:
045A04 0E 30       0160*       ld c,score_x
045A06 06 01       0161*       ld b,score_y
045A08 CD 37 19 04 0162*       call vdu_move_cursor
045A0C             0163*   ; TODO: make this part of the UI setup and only print as needed
045A0C CD 00 01 04 0164*       call printInline
045A10 53 63 6F 72 0165*       asciz "Score:"
       65 3A 00    
045A17             0166*   ; END TODO
045A17 2A 00 59 04 0167*       ld hl,(player_score)
045A1B CD 06 02 04 0168*       call printDec
045A1F C9          0169*       ret
045A20             0170*   ; end print_score
045A20             0171*   
045A20             0172*   player_move_weapons:
045A20             0173*   ; initialize pointers and loop counter
045A20 FD 21 00 80 0174*       ld iy,player_weapons_begin ; set iy to first record in table
       04          
045A25 06 04       0175*       ld b,player_lasers_max ; loop counter
045A27 CD 79 6A 04 0176*       call move_sprite_group
045A2B C9          0177*       ret
045A2C             0178*   ; end player_move_weapons
045A2C             0179*   
045A2C             0180*   ; ###################################################################
045A2C             0181*   ; TODO: the below is all stuff from the original code we need to port
045A2C             0182*   ; ###################################################################
045A2C             0183*   
045A2C             0184*   kill_player:
045A2C             0185*   ; ; set player status to dead
045A2C             0186*   ;     xor a; sets all player flags to zero
045A2C             0187*   ;     ld (player_collisions),a
045A2C             0188*   ; ; deduct a ship from the inventory
045A2C             0189*   ;     ld a,(player_ships)
045A2C             0190*   ;     dec a
045A2C             0191*   ;     ld (player_ships),a
045A2C             0192*   ; ; are we out of ships?
045A2C             0193*   ;     jp z,game_over
045A2C             0194*   ; ; wait a few ticks
045A2C             0195*   ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
045A2C             0196*   ;     ld (player_move_timer),a
045A2C             0197*   ; kill_player_loop:
045A2C             0198*   ;     call vdu_vblank
045A2C             0199*   ;     ld a,(player_move_timer)
045A2C             0200*   ;     dec a
045A2C             0201*   ;     ld (player_move_timer),a
045A2C             0202*   ;     jr nz,kill_player_loop
045A2C             0203*   ;     call player_init ; player respawn if timer zero
045A2C C9          0204*       ret ; and out
045A2D             0205*   
045A2D             0206*   ; draws the player's shields level
045A2D             0207*   ; draw_shields:
045A2D             0208*   ; TODO: Agonize this routine
045A2D             0209*   ; ; prep the loop to draw the bars
045A2D             0210*   ;     ld a,(player_shields) ; snag shields
045A2D             0211*   ;     and a
045A2D             0212*   ;     ret z ; don't draw if zero shields
045A2D             0213*   ; ; set loop counter and drawing position
045A2D             0214*   ;     ld b,a ; loop counter
045A2D             0215*   ;     ld hl,#5300+48+12
045A2D             0216*   ; ; set color based on bars remaining
045A2D             0217*   ;     ld c,103 ; bright green 28fe0a
045A2D             0218*   ;     cp 9
045A2D             0219*   ;     jp p,draw_shields_loop
045A2D             0220*   ;     ld c,74 ; bright yellow eafe5b
045A2D             0221*   ;     cp 3
045A2D             0222*   ;     jp p,draw_shields_loop
045A2D             0223*   ;     ld c,28 ; bright red fe0a0a
045A2D             0224*   ; draw_shields_loop:
045A2D             0225*   ;     push bc ; yup,outta
045A2D             0226*   ;     push hl ; registers again
045A2D             0227*   ;     ; ld a,#A8 ; ▀,168
045A2D             0228*   ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
045A2D             0229*   ;     ; call draw_char
045A2D             0230*   ;     call draw_num ; we nuked draw_char for the time being
045A2D             0231*   ;     pop hl
045A2D             0232*   ;     ld a,8
045A2D             0233*   ;     add a,l
045A2D             0234*   ;     ld l,a
045A2D             0235*   ;     pop bc
045A2D             0236*   ;     djnz draw_shields_loop
045A2D             0237*       ; ret
045A2D             0238*   
045A2D             0239*   
045A2D             0240*   ; draw_lives:
045A2D             0241*   ;     ld hl,player_small ; make small yellow ship the active sprite
045A2D             0242*   ;     ld (sprite_base_bufferId),hl
045A2D             0243*   ;     ; ld a,#80 ; northern orientation
045A2D             0244*   ;     ; ld (sprite_orientation),a
045A2D             0245*   ;     ld hl,0 ; north
045A2D             0246*   ;     ld (sprite_heading),hl
045A2D             0247*   ;     xor a
045A2D             0248*   ;     ld (sprite_frame),a
045A2D             0249*   ;     ld a,#56 ; top of visible screen
045A2D             0250*   ;     ld (sprite_y+1),a
045A2D             0251*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
045A2D             0252*   ;     ld a,(player_ships)
045A2D             0253*   ;     dec a ; we draw one fewer ships than lives
045A2D             0254*   ;     ret z ; nothing to draw here, move along
045A2D             0255*   ;     ld b,a ; loop counter
045A2D             0256*   ;     ld a,256-16 ; initial x position
045A2D             0257*   ; draw_lives_loop:
045A2D             0258*   ;     ld (sprite_x+1),a
045A2D             0259*   ;     push af
045A2D             0260*   ;     push bc
045A2D             0261*   ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
045A2D             0262*   ;     pop bc
045A2D             0263*   ;     pop af
045A2D             0264*   ;     sub 10
045A2D             0265*   ;     djnz draw_lives_loop
045A2D             0266*   ;     ret
045A2D             0267*   
045A2D             0268*   
045A2D             0269*   dump_player_record:
045A2D DD 21 00 81 0270*       ld ix,player_begin
       04          
045A32             0271*   
045A32 CD 00 01 04 0272*       call printInline
045A36 69 64 20 20 0273*       asciz "id  : "
       3A 20 00    
045A3D DD 7E 00    0274*       ld a,(ix+sprite_id)
045A40 CD 4A 01 04 0275*       call printHexA
045A44             0276*   
045A44 CD 00 01 04 0277*       call printInline
045A48 0D 0A 78 20 0278*       asciz "\r\nx   :"
       20 20 3A 00 
045A50 DD 27 01    0279*       ld hl,(ix+sprite_x)
045A53 CD 2B 03 04 0280*       call print_s168_hl
045A57             0281*   
045A57 CD 00 01 04 0282*       call printInline
045A5B 0D 0A 79 20 0283*       asciz "\r\ny   :"
       20 20 3A 00 
045A63 DD 27 04    0284*       ld hl,(ix+sprite_y)
045A66 CD 2B 03 04 0285*       call print_s168_hl
045A6A             0286*   
045A6A CD 00 01 04 0287*       call printInline
045A6E 0D 0A 78 76 0288*       asciz "\r\nxv  :"
       20 20 3A 00 
045A76 DD 27 07    0289*       ld hl,(ix+sprite_xvel)
045A79 CD 2B 03 04 0290*       call print_s168_hl
045A7D             0291*   
045A7D CD 00 01 04 0292*       call printInline
045A81 0D 0A 79 76 0293*       asciz "\r\nyv  :"
       20 20 3A 00 
045A89 DD 27 0A    0294*       ld hl,(ix+sprite_yvel)
045A8C CD 2B 03 04 0295*       call print_s168_hl
045A90             0296*   
045A90 CD 00 01 04 0297*       call printInline
045A94 0D 0A 76 20 0298*       asciz "\r\nv   :"
       20 20 3A 00 
045A9C DD 27 0D    0299*       ld hl,(ix+sprite_vel)
045A9F CD 2B 03 04 0300*       call print_s168_hl
045AA3             0301*   
045AA3 CD 00 01 04 0302*       call printInline
045AA7 0D 0A 68 64 0303*       asciz "\r\nhdg :"
       67 20 3A 00 
045AAF DD 27 10    0304*       ld hl,(ix+sprite_heading)
045AB2 CD 2B 03 04 0305*       call print_s168_hl
045AB6             0306*   
045AB6 CD 00 01 04 0307*       call printInline
045ABA 0D 0A 6F 72 0308*       asciz "\r\nori :"
       69 20 3A 00 
045AC2 DD 27 13    0309*       ld hl,(ix+sprite_orientation)
045AC5 CD 2B 03 04 0310*       call print_s168_hl
045AC9             0311*   
045AC9 CD 00 01 04 0312*       call printInline
045ACD 0D 0A 74 79 0313*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
045AD6 DD 7E 16    0314*       ld a,(ix+sprite_type)
045AD9 CD 4A 01 04 0315*       call printHexA
045ADD             0316*   
045ADD CD 00 01 04 0317*       call printInline
045AE1 0D 0A 42 49 0318*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
045AEA DD 27 17    0319*       ld hl,(ix+sprite_base_bufferId)
045AED CD 27 01 04 0320*       call printHex24
045AF1             0321*   
045AF1 CD 00 01 04 0322*       call printInline
045AF5 0D 0A 6D 50 0323*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
045AFE DD 27 1A    0324*       ld hl,(ix+sprite_move_program)
045B01 CD 27 01 04 0325*       call printHex24
045B05             0326*   
045B05 CD 00 01 04 0327*       call printInline
045B09 0D 0A 63 6F 0328*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
045B12 DD 7E 1D    0329*       ld a,(ix+sprite_collisions)
045B15 CD A8 03 04 0330*       call printBin8
045B19             0331*   
045B19             0332*       ; call printInline
045B19             0333*       ; asciz "\r\nszx : "
045B19             0334*       ; ld a,(ix+sprite_dim_x)
045B19             0335*       ; call printHexA
045B19             0336*   
045B19             0337*       ; call printInline
045B19             0338*       ; asciz "\r\nszy : "
045B19             0339*       ; ld a,(ix+sprite_dim_y)
045B19             0340*       ; call printHexA
045B19             0341*   
045B19             0342*       ; call printInline
045B19             0343*       ; asciz "\r\n#ori: "
045B19             0344*       ; ld a,(ix+sprite_num_orientations)
045B19             0345*       ; call printHexA
045B19             0346*   
045B19             0347*       ; call printInline
045B19             0348*       ; asciz "\r\n#ani: "
045B19             0349*       ; ld a,(ix+sprite_num_animations)
045B19             0350*       ; call printHexA
045B19             0351*   
045B19             0352*       ; call printInline
045B19             0353*       ; asciz "\r\nani : "
045B19             0354*       ; ld a,(ix+sprite_animation)
045B19             0355*       ; call printHexA
045B19             0356*   
045B19             0357*       ; call printInline
045B19             0358*       ; asciz "\r\nanit: "
045B19             0359*       ; ld a,(ix+sprite_animation_timer)
045B19             0360*       ; call printHexA
045B19             0361*   
045B19             0362*       ; call printInline
045B19             0363*       ; asciz "\r\nmvt : "
045B19             0364*       ; ld a,(ix+sprite_move_timer)
045B19             0365*       ; call printHexA
045B19             0366*   
045B19             0367*       ; call printInline
045B19             0368*       ; asciz "\r\nmvs : "
045B19             0369*       ; ld a,(ix+sprite_move_step)
045B19             0370*       ; call printHexA
045B19             0371*   
045B19             0372*       ; call printInline
045B19             0373*       ; asciz "\r\npts : "
045B19             0374*       ; ld a,(ix+sprite_points)
045B19             0375*       ; call printHexA
045B19             0376*   
045B19             0377*       ; call printInline
045B19             0378*       ; asciz "\r\ndmg : "
045B19             0379*       ; ld a,(ix+sprite_shield_damage)
045B19             0380*       ; call printHexA
045B19             0381*   
045B19             0382*       ; call printInline
045B19             0383*       ; asciz "\r\nfrm : "
045B19             0384*       ; ld a,(ix+sprite_frame)
045B19             0385*       ; call printHexA
045B19             0386*   
045B19             0387*       ; call printNewLine
045B19             0388*       ; call printNewLine
045B19             0389*   
045B19             0390*       ; call waitKeypress
045B19 C9          0391*       ret
045B1A             0060        include "player_laser.inc"
045B1A FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
045C00             0002*   speed_laser: equ 4*256 ; 6 pixels per frame 16.8 fixed
045C00             0003*   tmr_laser: ds 6 ; rate timer for firing laser
       FF FF FF FF 
       FF FF 
045C06 28 00 00    0004*   tmr_laser_reset: dl 120/3
045C09             0005*   laser_animation_timer_reset: equ 2 ; animate every two frames
045C09             0006*   
045C09             0007*   
045C09             0008*   laser_defaults:
045C09 06          0009*       db player_air        ; type
045C0A 08 01 00    0010*       dl BUF_LASER_A	    ; base_bufferId
045C0D 77 5C 04    0011*       dl move_player_laser	; move_program
045C10 40          0012*       db %01000000            ; collisions bit 6 signals sprite alive
045C11 05          0013*       db 5	                ; dim_x
045C12 0D          0014*       db 13                   ; dim_y
045C13 01          0015*       db 1                    ; num_orientations
045C14 02          0016*       db 2                    ; num_animations
045C15 00          0017*       db 0	                ; animation
045C16 02          0018*       db laser_animation_timer_reset ; animation_timer
045C17 00          0019*       db 0	                ; move_timer
045C18 00          0020*       db 0	                ; move_step
045C19 00          0021*       db 0	                ; points
045C1A 00          0022*       db 0	                ; shield_damage
045C1B 00          0023*       db 0                    ; frame
045C1C             0024*   
045C1C             0025*   player_spawn_laser:
045C1C             0026*   ; check laser spawn timer
045C1C FD 21 00 5C 0027*       ld iy,tmr_laser
       04          
045C21 CD 21 18 04 0028*       call timestamp_tmr_get
045C25 F0          0029*       ret p ; not time to fire
045C26             0030*   ; check if at max weapons active
045C26 3A 0A 59 04 0031*       ld a,(player_weapons_count)
045C2A FE 04       0032*       cp player_lasers_max
045C2C C8          0033*       ret z ; at max weapons active
045C2D 3C          0034*       inc a
045C2E 32 0A 59 04 0035*       ld (player_weapons_count),a
045C32             0036*   ; reset timer
045C32 2A 06 5C 04 0037*       ld hl,(tmr_laser_reset)
045C36 CD 16 18 04 0038*       call timestamp_tmr_set
045C3A             0039*   ; fire the laser
045C3A DD 21 00 80 0040*       ld ix,player_weapons_begin
       04          
045C3F 06 04       0041*       ld b,player_lasers_max
045C41 FD 21 00 81 0042*       ld iy,player_begin
       04          
045C46 FD 22 65 69 0043*       ld (table_pointer),iy
       04          
045C4B 21 09 5C 04 0044*       ld hl,laser_defaults
045C4F CD 1E 6A 04 0045*       call spawn_sprite_from_sprite
045C53 D0          0046*       ret nc ; no carry means no free sprite slots, so we go home
045C54             0047*   ; other specific initialization
045C54             0048*   ; ------------------------------------------------
045C54 FD 21 00 81 0049*       ld iy,player_begin
       04          
045C59             0050*   ; x-coordinate
045C59 FD 27 01    0051*       ld hl,(iy+sprite_x)
045C5C 11 00 05 00 0052*       ld de,5*256 ; horizontal center with player sprite
045C60 19          0053*       add hl,de
045C61 DD 2F 01    0054*       ld (ix+sprite_x),hl
045C64             0055*   ; y-coordinate
045C64 FD 27 04    0056*       ld hl,(iy+sprite_y)
045C67 11 00 FA FF 0057*       ld de,-6*256 ; set laser y a few pixels above player
045C6B 19          0058*       add hl,de
045C6C DD 2F 04    0059*       ld (ix+sprite_y),hl
045C6F             0060*   ; set laser velocity
045C6F 21 00 FC FF 0061*       ld hl,-speed_laser
045C73 DD 2F 0A    0062*       ld (ix+sprite_yvel),hl
045C76 C9          0063*       ret
045C77             0064*   ; end player_spawn_laser
045C77             0065*   
045C77             0066*   move_player_laser:
045C77             0067*   ; run the movement program for the laser player
045C77 CD F3 6A 04 0068*       call move_sprite
045C7B 3A 68 69 04 0069*       ld a,(sprite_screen_edge)
045C7F B7          0070*       or a ; a will be non-zero if have scrolled off screen
045C80 CA 8D 5C 04 0071*       jp z,@F ; still on screen
045C84 21 0A 59 04 0072*       ld hl,player_weapons_count
045C88 35          0073*       dec (hl)
045C89 C3 AE 69 04 0074*       jp table_deactivate_sprite
045C8D             0075*   @@: ; check animation timer
045C8D FD 35 23    0076*       dec (iy+sprite_animation_timer)
045C90 C2 A4 5C 04 0077*       jp nz,@F
045C94 3E 02       0078*       ld a,laser_animation_timer_reset
045C96 FD 77 23    0079*       ld (iy+sprite_animation_timer),a
045C99 FD 7E 00    0080*       ld a,(iy+sprite_id)
045C9C CD 00 1F 04 0081*       call vdu_sprite_select
045CA0 CD 47 1F 04 0082*       call vdu_sprite_next_frame
045CA4             0083*   @@: ; all done
045CA4 C9          0084*       ret
045CA5             0085*   ; end move_player_laser
045CA5             0086*   
045CA5             0087*   init_player_laser:
045CA5             0088*   ; set pointer to laser sprite table
045CA5 FD 21 00 80 0089*       ld iy,player_weapons_begin
       04          
045CAA FD 7E 00    0090*       ld a,(iy+sprite_id) ; sprite id
045CAD 1E 04       0091*       ld e,player_lasers_max ; sprite loop counter
045CAF             0092*   ; define laser sprites
045CAF             0093*   @sprites_loop:
045CAF F5          0094*       push af
045CB0 D5          0095*       push de
045CB1 CD 00 1F 04 0096*   	call vdu_sprite_select
045CB5 CD 13 1F 04 0097*   	call vdu_sprite_clear_frames
045CB9 21 08 01 00 0098*   	ld hl,BUF_LASER_A
045CBD 06 02       0099*   	ld b,2 ; two bitmaps for laser
045CBF             0100*   @frames_loop:
045CBF C5          0101*   	push bc
045CC0 E5          0102*   	push hl
045CC1 CD 55 20 04 0103*   	call vdu_sprite_add_buff
045CC5 E1          0104*   	pop hl
045CC6 23          0105*   	inc hl
045CC7 C1          0106*   	pop bc
045CC8 10 F5       0107*   	djnz @frames_loop
045CCA D1          0108*       pop de ; sprite loop counter
045CCB F1          0109*       pop af ; sprite id
045CCC 3C          0110*       inc a
045CCD 1D          0111*       dec e
045CCE C2 AF 5C 04 0112*       jp nz,@sprites_loop
045CD2             0113*   ; set laser firing timer to zero
045CD2 FD 21 00 5C 0114*       ld iy,tmr_laser
       04          
045CD7 21 00 00 00 0115*       ld hl,0
045CDB CD 16 18 04 0116*       call timestamp_tmr_set
045CDF C9          0117*       ret
045CE0             0061        include "state.inc"
045CE0 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
045D00             0002*   
045D00             0003*   ; Game state variables
045D00 0E 5D 04    0004*   game_state:  dl game_main_menu
045D03             0005*   
045D03             0006*   do_game:
045D03 2A 00 5D 04 0007*       ld hl,(game_state)   ; Load the current game state
045D07             0008*       CALL_HL                ; Call the corresponding state handler
045D07 01 0D 5D 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
045D0B C5          0002*M1     push bc ; which constitutes the return address
045D0C E9          0003*M1     jp (hl) ; Jump to the address in HL
045D0D             0004*M1 @@:
045D0D C9          0009*       ret
045D0E             0010*   
045D0E             0011*   ; ========================
045D0E             0012*   ; Main Game States
045D0E             0013*   ; ========================
045D0E             0014*   
045D0E             0015*   game_main_menu:
045D0E             0016*       ; Handle main menu options
045D0E             0017*       ; Example: Check input for "Start Game"
045D0E CD 1E 5E 04 0018*       call check_input_menu
045D12 C2 17 5D 04 0019*       jp nz, game_initialize ; Start game on selection
045D16 C9          0020*       ret
045D17             0021*   
045D17             0022*   game_initialize:
045D17             0023*   ; reset the sprite table
045D17 CD 8A 69 04 0024*       call table_init
045D1B 21 00 80 04 0025*       ld hl,table_base
045D1F 22 65 69 04 0026*       ld (table_pointer),hl
045D23             0027*   ; initialize sprites and active tiles table
045D23 CD C2 69 04 0028*       call sprites_init
045D27 CD 8A 69 04 0029*       call table_init
045D2B CD 10 63 04 0030*       call tile_table_init
045D2F             0031*   ; initialize the first level
045D2F 3E 00       0032*       ld a,tiles_dg
045D31 CD 1A 56 04 0033*       call init_tileset
045D35             0034*   ; initialize player
045D35 21 00 00 00 0035*       ld hl,0
045D39 22 00 59 04 0036*       ld (player_score),hl
045D3D 2A 06 59 04 0037*       ld hl,(player_max_shields)
045D41 22 03 59 04 0038*       ld (player_shields),hl
045D45 3E 03       0039*       ld a,3
045D47 32 09 59 04 0040*       ld (player_ships),a
045D4B CD 1E 59 04 0041*       call player_init
045D4F             0042*   ; ; TODO: TEMPORARY UNTIL MAP LOGIC IMPLEMENTED
045D4F             0043*   ;     ld hl,enemies_dead
045D4F             0044*   ;     ld (enemies_state),hl
045D4F             0045*   ; ; END TODO
045D4F             0046*   ; set the game state to playing
045D4F 21 58 5D 04 0047*       ld hl,game_playing
045D53 22 00 5D 04 0048*       ld (game_state), hl
045D57             0049*   ; done initializing
045D57 C9          0050*       ret
045D58             0051*   
045D58             0052*   game_playing:
045D58             0053*   ; Main gameplay loop
045D58 CD 12 66 04 0054*       call tiles_plot
045D5C             0055*   
045D5C             0056*   ; set gfx origin and viewport to playing field window
045D5C 01 80 00 00 0057*       ld bc,origin_left
045D60 11 00 00 00 0058*       ld de,origin_top
045D64 CD D0 19 04 0059*       call vdu_set_gfx_origin
045D68 01 00 00 00 0060*       ld bc,field_left
045D6C 11 00 00 00 0061*       ld de,field_top
045D70 DD 21 FF 00 0062*       ld ix,field_right
       00          
045D75 FD 21 7F 01 0063*       ld iy,field_bottom
       00          
045D7A CD EB 19 04 0064*       call vdu_set_gfx_viewport
045D7E             0065*   
045D7E CD EF 5D 04 0066*       call do_player
045D82 CD 08 5E 04 0067*       call do_enemies
045D86 CD 4A 67 04 0068*       call move_tiles
045D8A             0069*   ; update UI: TODO make this a standalone function
045D8A CD 04 5A 04 0070*       call print_score
045D8E C9          0071*       ret
045D8F             0072*   
045D8F             0073*   game_paused:
045D8F             0074*       ; Pause menu logic
045D8F CD 21 5E 04 0075*       call check_input_pause
045D93 C2 58 5D 04 0076*       jp nz, game_playing ; Resume game
045D97 CA 0E 5D 04 0077*       jp z, game_main_menu ; Exit to main menu
045D9B C9          0078*       ret
045D9C             0079*   
045D9C             0080*   game_level_transition:
045D9C             0081*       ; Handle level transitions
045D9C CD 22 5E 04 0082*       call load_next_level
045DA0 21 58 5D 04 0083*       ld hl, game_playing
045DA4 22 00 5D 04 0084*       ld (game_state), hl
045DA8 C9          0085*       ret
045DA9             0086*   
045DA9             0087*   game_over:
045DA9             0088*       ; Display game over screen
045DA9 CD 23 5E 04 0089*       call display_game_over
045DAD C2 0E 5D 04 0090*       jp nz, game_main_menu ; Return to main menu on input
045DB1 C9          0091*       ret
045DB2             0092*   
045DB2             0093*   game_victory:
045DB2             0094*       ; Display victory screen
045DB2 CD 24 5E 04 0095*       call display_victory
045DB6 C2 0E 5D 04 0096*       jp nz, game_main_menu ; Return to main menu on input
045DBA C9          0097*       ret
045DBB             0098*   
045DBB             0099*   ; ========================
045DBB             0100*   ; Supporting States
045DBB             0101*   ; ========================
045DBB             0102*   
045DBB             0103*   game_loading:
045DBB             0104*       ; Show loading screen while preparing assets
045DBB CD 25 5E 04 0105*       call load_resources
045DBF 21 17 5D 04 0106*       ld hl, game_initialize
045DC3 22 00 5D 04 0107*       ld (game_state), hl
045DC7 C9          0108*       ret
045DC8             0109*   
045DC8             0110*   game_cutscene:
045DC8             0111*       ; Play a non-interactive cutscene
045DC8 CD 26 5E 04 0112*       call play_cutscene
045DCC C2 58 5D 04 0113*       jp nz, game_playing ; Return to gameplay after cutscene
045DD0 C9          0114*       ret
045DD1             0115*   
045DD1             0116*   game_inventory:
045DD1             0117*       ; Open inventory or shop
045DD1 CD 27 5E 04 0118*       call display_inventory
045DD5 C2 58 5D 04 0119*       jp nz, game_playing ; Return to gameplay after inventory close
045DD9 C9          0120*       ret
045DDA             0121*   
045DDA             0122*   game_map:
045DDA             0123*       ; Display map or quest
045DDA CD 28 5E 04 0124*       call display_map
045DDE C2 58 5D 04 0125*       jp nz, game_playing ; Return to gameplay after map close
045DE2 C9          0126*       ret
045DE3             0127*   
045DE3             0128*   game_exit:
045DE3             0129*       ; Handle exit logic
045DE3 CD 29 5E 04 0130*       call save_game
045DE7 C3 2A 5E 04 0131*       jp exit_game         ; Safely shut down
045DEB C9          0132*       ret
045DEC             0133*   
045DEC             0134*   ; ========================
045DEC             0135*   ; Sub-state branching (Example for player state)
045DEC             0136*   ; ========================
045DEC             0137*   
045DEC FA 5D 04    0138*   player_state:  dl player_alive ; Player state variable
045DEF             0139*   
045DEF             0140*   do_player:
045DEF 2A EC 5D 04 0141*       ld hl,(player_state)
045DF3             0142*       CALL_HL                ; Call the corresponding player state
045DF3 01 F9 5D 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
045DF7 C5          0002*M1     push bc ; which constitutes the return address
045DF8 E9          0003*M1     jp (hl) ; Jump to the address in HL
045DF9             0004*M1 @@:
045DF9 C9          0143*       ret
045DFA             0144*   
045DFA             0145*   player_alive:
045DFA CD 6E 59 04 0146*       call player_input     ; Handle player input
045DFE CD 20 5A 04 0147*       call player_move_weapons    ; Handle laser movement and collision detection
045E02 C9          0148*       ret
045E03             0149*   
045E03             0150*   player_dead:
045E03 CD 20 5A 04 0151*       call player_move_weapons    ; Handle laser movement and collision detection
045E07 C9          0152*       ret
045E08             0153*   
045E08             0154*   do_enemies:
045E08 2A 13 5E 04 0155*       ld hl,(enemies_state)
045E0C             0156*       CALL_HL
045E0C 01 12 5E 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
045E10 C5          0002*M1     push bc ; which constitutes the return address
045E11 E9          0003*M1     jp (hl) ; Jump to the address in HL
045E12             0004*M1 @@:
045E12 C9          0157*       ret
045E13 19 5E 04    0158*   enemies_state: dl enemies_alive
045E16             0159*   
045E16             0160*   enemies_dead:
045E16 C9          0161*       ret
045E17             0162*   
045E17             0163*   enemies_respawning:
045E17 C9          0164*       ret
045E18             0165*   
045E18             0166*   enemies_respawn:
045E18 C9          0167*       ret
045E19             0168*   
045E19             0169*   enemies_alive:
045E19 CD 93 25 04 0170*       call move_enemies
045E1D C9          0171*       ret
045E1E             0172*   
045E1E             0173*   check_input_menu:
045E1E C9          0174*       ret
045E1F             0175*   
045E1F             0176*   update_game_world:
045E1F C9          0177*       ret
045E20             0178*   
045E20             0179*   check_game_events:
045E20 C9          0180*       ret
045E21             0181*   
045E21             0182*   check_input_pause:
045E21 C9          0183*       ret
045E22             0184*   
045E22             0185*   load_next_level:
045E22 C9          0186*       ret
045E23             0187*   
045E23             0188*   display_game_over:
045E23 C9          0189*       ret
045E24             0190*   
045E24             0191*   display_victory:
045E24 C9          0192*       ret
045E25             0193*   
045E25             0194*   load_resources:
045E25 C9          0195*       ret
045E26             0196*   
045E26             0197*   play_cutscene:
045E26 C9          0198*       ret
045E27             0199*   
045E27             0200*   display_inventory:
045E27 C9          0201*       ret
045E28             0202*   
045E28             0203*   display_map:
045E28 C9          0204*       ret
045E29             0205*   
045E29             0206*   save_game:
045E29 C9          0207*       ret
045E2A             0208*   
045E2A             0209*   exit_game:
045E2A C9          0210*       ret
045E2B             0211*   
045E2B             0062        include "targeting.inc"
045E2B FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
045F00             0002*   
045F00             0003*   ; compute orientation to player
045F00             0004*   ; based on relative positions
045F00             0005*   ; returns: uh.l 16.8 fixed angle256 to player
045F00             0006*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
045F00             0007*   ;    representing delta-x/y *to* target respectively
045F00             0008*   ; inputs: iy pointed at sprite record
045F00             0009*   ; destroys: everything except iy (sprite record pointer)
045F00             0010*   orientation_to_player:
045F00 FD E5       0011*       push iy ; preserve sprite record pointer
045F02 DD 21 00 81 0012*       ld ix,player_begin
       04          
045F07 FD 07 01    0013*       ld bc,(iy+sprite_x)
045F0A FD 17 04    0014*       ld de,(iy+sprite_y)
045F0D DD 37 01    0015*       ld ix,(ix+sprite_x)
045F10 DD 31 04    0016*       ld iy,(ix+sprite_y)
045F13 CD 13 0C 04 0017*       call dxy168
045F17 C5          0018*       push bc ; dx
045F18 D5          0019*       push de ; dy
045F19 CD 9A 0C 04 0020*       call atan2_168fast ; uh.l = angle to player
045F1D 22 4D 5F 04 0021*       ld (Bearing_t),hl
045F21 D1          0022*       pop de ; dy
045F22 C1          0023*       pop bc ; dx
045F23 FD E1       0024*       pop iy ; restore sprite record pointer
045F25 C9          0025*       ret
045F26             0026*   ; end orientation_to_player
045F26             0027*   
045F26             0028*   ; compute orientation to player
045F26             0029*   ; based on relative positions
045F26             0030*   ; returns: uh.l 16.8 fixed angle256 to player
045F26             0031*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
045F26             0032*   ;    representing delta-x/y *to* target respectively
045F26             0033*   ; inputs: iy pointed at tile record
045F26             0034*   ; destroys: everything except iy (tile record pointer)
045F26             0035*   tile_orientation_to_player:
045F26 DD 21 00 81 0036*       ld ix,player_begin
       04          
045F2B             0037*   ; compute dx
045F2B DD 27 01    0038*       ld hl,(ix+sprite_x)
045F2E FD 17 01    0039*       ld de,(iy+tile_x)
045F31 B7          0040*       or a ; clear carry
045F32 ED 52       0041*       sbc hl,de ; dx
045F34 E5          0042*       push hl ; save dx
045F35             0043*   ; compute dy
045F35 DD 27 04    0044*       ld hl,(ix+sprite_y)
045F38 FD 17 04    0045*       ld de,(iy+tile_y)
045F3B B7          0046*       or a ; clear carry
045F3C ED 52       0047*       sbc hl,de ; dy
045F3E EB          0048*       ex de,hl ; de = dy
045F3F             0049*   ; compute angle to player
045F3F C1          0050*       pop bc ; dx (was hl)
045F40 CD 9A 0C 04 0051*       call atan2_168fast ; uh.l = angle to player
045F44 3E E0       0052*       ld a,%11100000
045F46 A5          0053*       and l ; round angle to nearest 32th of a circle
045F47 6F          0054*       ld l,a
045F48 22 4D 5F 04 0055*       ld (Bearing_t),hl
045F4C C9          0056*       ret
045F4D             0057*   ; end tile_orientation_to_player
045F4D             0058*   
045F4D             0059*   ; targeting_computer variables fixed 16.8 format
045F4D 00 00 00    0060*   Bearing_t: dl 0x000000 ; angle to target
045F50 00 00 00    0061*   Heading_t: dl 0x000000 ; angle of target motion
045F53 00 00 00    0062*   Vp: dl 0x000000 ; velocity of projectile
045F56 00 00 00    0063*   Vp_x: dl 0x000000 ; x component of projectile velocity
045F59 00 00 00    0064*   Vp_y: dl 0x000000 ; y component of projectile velocity
045F5C 00 00 00    0065*   Vt: dl 0x000000 ; velocity of target
045F5F 00 00 00    0066*   Vt_x: dl 0x000000 ; x component of target velocity
045F62 00 00 00    0067*   Vt_y: dl 0x000000 ; y component of target velocity
045F65 00 00 00    0068*   Heading_p: dl 0x000000 ; angle of projectile motion
045F68 00 00 00    0069*   lead_angle: dl 0x000000 ; lead angle
045F6B             0070*   
045F6B             0071*   ; Inputs:   Vp velocity of projectile set,
045F6B             0072*   ;           iy pointed to sprite record,
045F6B             0073*   ;           player position and velocities correctly set
045F6B             0074*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
045F6B             0075*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
045F6B             0076*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
045F6B             0077*   targeting_computer:
045F6B DD 21 00 81 0078*       ld ix,player_begin
       04          
045F70             0079*   ; ; compute target velocity from x,y component velocities
045F70             0080*   ;     ld bc,(ix+sprite_xvel)
045F70             0081*   ;     ld de,(ix+sprite_yvel)
045F70             0082*   ;     ld hl,-1*256 ; account for vertical ground movement
045F70             0083*   ;     add hl,de
045F70             0084*   ;     ex de,hl ; ud.e = player_yvel-1
045F70             0085*   ;     call cartesian_to_polar_sm ; uh.l = Heading_t, ud.e = Vt
045F70             0086*   ;     ld (Heading_t),hl ; PASSES
045F70             0087*   ;     ld (Vt),de ; PASSES
045F70             0088*   ; ; Bearing_t should have been set by prerequisite call to orientation_to_player
045F70             0089*   ; ; compute Heading_t-Bearing_t PASSES
045F70             0090*   ;     ld de,(Bearing_t)
045F70             0091*   ;     and a ; clear carry
045F70             0092*   ;     sbc hl,de ; Uh.l = Heading_t-Bearing_t
045F70             0093*   ; ; compute sin(Heading_t-Bearing_t)
045F70             0094*   ;     call sin168 ; uh.l = sin(Heading_t-Bearing_t)
045F70             0095*   ; ; compute (Vt*sin(Heading_t-Bearing_t))
045F70             0096*   ;     ld de,(Vt)
045F70             0097*   ;     call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
045F70             0098*   ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
045F70             0099*   ;     ld de,(Vp)
045F70             0100*   ;     call sdiv168 ; ud.e = (Vt*sin(Heading_t-Bearing_t)) / Vp
045F70             0101*   ;     ex de,hl ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
045F70             0102*   ; ; answer is in radians, convert to degrees256
045F70             0103*   ;     ld de,0x0028BE ; 40.74 = 57.29578*256/360
045F70             0104*   ;     call smul168 ; uh.l = angle in degrees256
045F70             0105*   ;     ld (lead_angle),hl ; DEBUG
045F70             0106*   ; ; add lead angle to target bearing
045F70             0107*   ;     ld de,(Bearing_t)
045F70             0108*   ;     add hl,de ; h.l = lead angle+target bearing
045F70             0109*   
045F70 2A 4D 5F 04 0110*       ld hl,(Bearing_t) ; DEBUG
045F74             0111*   
045F74 E5          0112*       push hl
045F75             0113*   
045F75             0114*   ; compute component projectile velocities
045F75 ED 5B 53 5F 0115*       ld de,(Vp) ; Vp should have been set by caller
       04          
045F7A CD A0 0B 04 0116*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
045F7E ED 43 56 5F 0117*       ld (Vp_x),bc
       04          
045F83 14          0118*       inc d ; account for vertical ground movement
045F84 ED 53 59 5F 0119*       ld (Vp_y),de
       04          
045F89 E1          0120*       pop hl ; uh.l = lead angle+target bearing
045F8A 22 65 5F 04 0121*       ld (Heading_p),hl
045F8E             0122*   
045F8E C9          0123*       ret
045F8F             0124*   
045F8F             0125*   ; debug print the results
045F8F             0126*       PUSH_ALL
045F8F 08          0001*M1     ex af,af'
045F90 D9          0002*M1     exx
045F91 F5          0003*M1     push af
045F92 E5          0004*M1     push hl
045F93 C5          0005*M1     push bc
045F94 D5          0006*M1     push de
045F95             0007*M1 
045F95 08          0008*M1     ex af,af'
045F96 D9          0009*M1     exx
045F97 F5          0010*M1     push af
045F98 E5          0011*M1     push hl
045F99 C5          0012*M1     push bc
045F9A D5          0013*M1     push de
045F9B DD E5       0014*M1     push ix
045F9D FD E5       0015*M1     push iy
045F9F CD 00 19 04 0127*       call vdu_home_cursor
045FA3 CD 1C 01 04 0128*       call printNewLine
045FA7 CD 00 01 04 0129*       call printInline
045FAB 42 74 20 00 0130*       asciz "Bt "
045FAF 2A 4D 5F 04 0131*       ld hl,(Bearing_t)
045FB3 CD 2B 03 04 0132*       call print_s168_hl
045FB7             0133*   
045FB7             0134*       ; call printInline
045FB7             0135*       ; asciz "\r\nHt "
045FB7             0136*       ; ld hl,(Heading_t)
045FB7             0137*       ; call print_s168_hl
045FB7             0138*   
045FB7             0139*       ; call printInline
045FB7             0140*       ; asciz "\r\nVt "
045FB7             0141*       ; ld hl,(Vt)
045FB7             0142*       ; call print_s168_hl
045FB7             0143*   
045FB7             0144*       ; call printInline
045FB7             0145*       ; asciz "\r\nVtx"
045FB7             0146*       ; ld hl,(ix+sprite_xvel)
045FB7             0147*       ; call print_s168_hl
045FB7             0148*   
045FB7             0149*       ; call printInline
045FB7             0150*       ; asciz "\r\nVty"
045FB7             0151*       ; ld hl,(ix+sprite_yvel)
045FB7             0152*       ; ld de,-1*256 ; account for vertical ground movement
045FB7             0153*       ; add hl,de
045FB7             0154*       ; call print_s168_hl
045FB7             0155*   
045FB7 CD 00 01 04 0156*       call printInline
045FBB 0D 0A 4C 64 0157*       asciz "\r\nLda"
       61 00       
045FC1 2A 68 5F 04 0158*       ld hl,(lead_angle)
045FC5 CD 2B 03 04 0159*       call print_s168_hl
045FC9             0160*   
045FC9 CD 00 01 04 0161*       call printInline
045FCD 0D 0A 48 70 0162*       asciz "\r\nHp "
       20 00       
045FD3 2A 65 5F 04 0163*       ld hl,(Heading_p)
045FD7 CD 2B 03 04 0164*       call print_s168_hl
045FDB             0165*   
045FDB             0166*       ; call printInline
045FDB             0167*       ; asciz "\r\nVp "
045FDB             0168*       ; ld hl,(Vp)
045FDB             0169*       ; call print_s168_hl
045FDB             0170*   
045FDB             0171*       ; call printInline
045FDB             0172*       ; asciz "\r\nVpx"
045FDB             0173*       ; ld hl,(Vp_x)
045FDB             0174*       ; call print_s168_hl
045FDB             0175*   
045FDB             0176*       ; call printInline
045FDB             0177*       ; asciz "\r\nVpy"
045FDB             0178*       ; ld hl,(Vp_y)
045FDB             0179*       ; call print_s168_hl
045FDB             0180*   
045FDB             0181*       POP_ALL
045FDB FD E1       0001*M1     pop iy
045FDD DD E1       0002*M1     pop ix
045FDF D1          0003*M1     pop de
045FE0 C1          0004*M1     pop bc
045FE1 E1          0005*M1     pop hl
045FE2 F1          0006*M1     pop af
045FE3 08          0007*M1     ex af,af'
045FE4 D9          0008*M1     exx
045FE5             0009*M1 
045FE5 D1          0010*M1     pop de
045FE6 C1          0011*M1     pop bc
045FE7 E1          0012*M1     pop hl
045FE8 F1          0013*M1     pop af
045FE9 08          0014*M1     ex af,af'
045FEA D9          0015*M1     exx
045FEB C9          0182*       ret
045FEC             0063        include "tile_table.inc"
045FEC             0001*   ; ###### tile TABLE FIELD INDICES ######
045FEC             0002*   tile_table_record_size:         equ  64; 41 bytes ;41 bytes per tile record
045FEC             0003*   tile_id:                 equ   0; 1 bytes ;unique tileId, zero-based
045FEC             0004*   ; tile state variables
045FEC             0005*   tile_state_variables:    equ   1; beginning of tile state variables
045FEC             0006*   tile_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
045FEC             0007*   tile_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
045FEC             0008*   tile_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
045FEC             0009*   tile_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
045FEC             0010*   tile_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
045FEC             0011*   tile_heading:            equ  16; 3 bytes ;tile movement direction deg256 16.8 fixed
045FEC             0012*   tile_orientation:        equ  19; 3 bytes ;orientation bits
045FEC             0013*   ; tile definition variables
045FEC             0014*   tile_definitions:        equ  22; beginnning of tile definition variables
045FEC             0015*   tile_type:               equ  22; 1 bytes ;type of tile as defined in enemies.inc
045FEC             0016*   tile_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
045FEC             0017*   tile_move_program:       equ  26; 3 bytes ;address of tile's behavior subroutine
045FEC             0018*   tile_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
045FEC             0019*   tile_dim_x:              equ  30; 1 bytes ;tile width in pixels
045FEC             0020*   tile_dim_y:              equ  31; 1 bytes ;tile height in pixels
045FEC             0021*   tile_num_orientations:   equ  32; 1 bytes ;number of orientations for this tile
045FEC             0022*   tile_num_animations:     equ  33; 1 bytes ;number of animations for this tile
045FEC             0023*   tile_animation:          equ  34; 1 bytes ;current animation index, zero-based
045FEC             0024*   tile_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
045FEC             0025*   tile_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
045FEC             0026*   tile_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
045FEC             0027*   tile_points:             equ  38; 1 bytes ;points awarded for killing this tile type
045FEC             0028*   tile_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
045FEC             0029*   tile_frame:              equ  40; 1 bytes ;current animation frame
045FEC             0030*   
045FEC             0031*   ; ###### tile TABLE VARIABLES ######
045FEC FF FF FF FF 0032*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
046000 00 00 00 00 0033*   tile_stack: blkb 256*3,0 ; stack of pointers to tile records
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046300 00 00 00    0034*       dl 0 ; list terminator
046303             0035*   tile_stack_end:
046303 00 60 04    0036*   tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
046306 00 00 05    0037*   tile_table_pointer: dl tile_table_base ; pointer to top address of current record, initialized to tile_table_base
046309 00 00 00    0038*   num_active_tiles: dl 0 ; how many active tiles
04630C 00          0039*   next_tile_id: db 0 ; next available tile id
04630D 00 00 00    0040*   new_tile_table_pointer: dl 0 ; pointer to new tile record
046310             0041*   
046310             0042*   tile_table_init:
046310             0043*   ; clear the tile stack
046310 AF          0044*       xor a ; write zeroes to tile stack
046311 21 00 60 04 0045*       ld hl,tile_stack
046315 01 03 03 00 0046*       ld bc,tile_stack_end-tile_stack
046319 CD 31 07 04 0047*       call clear_mem
04631D             0048*   ; clear the tile table
04631D AF          0049*       xor a ; write zeroes to tile table
04631E 21 00 00 05 0050*       ld hl,tile_table_base ; address to copy from
046322 01 00 40 00 0051*       ld bc,tile_table_end-tile_table_base ; number of bytes to clear
046326 CD 31 07 04 0052*       call clear_mem
04632A             0053*   ; write tile ids
04632A DD 21 00 00 0054*       ld ix,tile_table_base
       05          
04632F AF          0055*       xor a ; tile id
046330 06 00       0056*       ld b,0 ; loop counter
046332             0057*   @loop:
046332 DD 77 00    0058*       ld (ix+tile_id),a
046335 ED 32 40    0059*       lea ix,ix+table_record_size
046338 3C          0060*       inc a
046339 10 F7       0061*       djnz @loop
04633B             0062*   ; set pointers to top of tile stack and tile table
04633B 21 0C 63 04 0063*       ld hl,next_tile_id
04633F 3E FF       0064*       ld a,255 ; will wrap around to 0 on first call to create active tile
046341 77          0065*       ld (hl),a
046342 21 00 00 05 0066*       ld hl,tile_table_base
046346 22 06 63 04 0067*       ld (tile_table_pointer),hl
04634A 21 00 60 04 0068*       ld hl,tile_stack
04634E 22 03 63 04 0069*       ld (tile_stack_pointer),hl
046352 C9          0070*       ret
046353             0071*   ; end tile_table_init
046353             0072*   
046353             0073*   ; gets the next available tile id
046353             0074*   ; inputs; none
046353             0075*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
046353             0076*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
046353             0077*   ; destroys: a,hl,ix
046353             0078*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
046353             0079*   tile_table_get_next_id:
046353 21 09 63 04 0080*       ld hl,num_active_tiles
046357 34          0081*       inc (hl)
046358 C2 5F 63 04 0082*       jp nz,@F ; check rollover to > 256 active tiles
04635C 35          0083*       dec (hl) ; undo increment
04635D AF          0084*       xor a ; reset carry flag indicating that we didn't find a free tile
04635E C9          0085*       ret
04635F             0086*   @@:
04635F 7E          0087*       ld a,(hl) ; number of active tiles
046360             0088*   ; point ix to next tile record
046360 21 0C 63 04 0089*       ld hl,next_tile_id
046364 34          0090*       inc (hl)
046365 56          0091*       ld d,(hl) ; index into tile table
046366 1E 40       0092*       ld e,tile_table_record_size
046368 ED 5C       0093*       mlt de ; de is now the offset to the table entry
04636A DD 21 00 00 0094*       ld ix,tile_table_base ; point to base address of tile table
       05          
04636F DD 19       0095*       add ix,de ; ix is now the address of the table entry
046371             0096*   ; add tile pointer to tile stack
046371 21 00 60 04 0097*       ld hl,tile_stack
046375 57          0098*       ld d,a ; number of active tiles
046376 15          0099*       dec d ; zero-based index
046377 1E 03       0100*       ld e,3 ; three bytes per tile record
046379 ED 5C       0101*       mlt de ; offset into tile stack
04637B 19          0102*       add hl,de ; hl points to top of the active tiles
04637C ED 3F       0103*       ld (hl),ix
04637E             0104*   ; return tile id
04637E DD 7E 00    0105*       ld a,(ix+tile_id)
046381 37          0106*       scf ; sets carry flag indicating we found a free tile
046382 C9          0107*       ret ; done
046383             0108*   ; end tile_table_get_next_id
046383             0109*   
046383             0110*   ; deactivate the tile with the given id
046383             0111*   ; inputs: tile_stack_pointer set to record to remove
046383             0112*   ; outputs: decrements num_active_tiles by one, tile_stack_pointer set to record above removed record, removes tile pointer from the tile stack, shifts stack records above it down one position
046383             0113*   ; destroys: a,hl,bc,de
046383             0114*   table_deactivate_tile:
046383             0115*   ; compute address to copy from
046383 2A 03 63 04 0116*       ld hl,(tile_stack_pointer)
046387 23          0117*       inc hl
046388 23          0118*       inc hl
046389 23          0119*       inc hl
04638A E5          0120*       push hl ; save copy from address
04638B             0121*   ; compute bytes to copy
04638B 3A 09 63 04 0122*       ld a,(num_active_tiles)
04638F 6F          0123*       ld l,a
046390 26 03       0124*       ld h,3
046392 ED 6C       0125*       mlt hl
046394 11 00 60 04 0126*       ld de,tile_stack
046398 19          0127*       add hl,de ; hl = bottom of stack address
046399 ED 5B 03 63 0128*       ld de,(tile_stack_pointer)
       04          
04639E B7          0129*       or a ; clear carry
04639F ED 52       0130*       sbc hl,de ; hl = bytes to copy
0463A1 E5          0131*       push hl
0463A2 C1          0132*       pop bc ; bytes to copy
0463A3             0133*   ; compute target address
0463A3 ED 5B 03 63 0134*       ld de,(tile_stack_pointer)
       04          
0463A8             0135*   ; copy bytes
0463A8 E1          0136*       pop hl ; copy from address
0463A9 ED B0       0137*       ldir
0463AB             0138*   ; update stack pointer and active tile count
0463AB 21 09 63 04 0139*       ld hl,num_active_tiles
0463AF 35          0140*       dec (hl)
0463B0 2A 03 63 04 0141*       ld hl,(tile_stack_pointer)
0463B4 2B          0142*       dec hl
0463B5 2B          0143*       dec hl
0463B6 2B          0144*       dec hl
0463B7 22 03 63 04 0145*       ld (tile_stack_pointer),hl
0463BB C9          0146*       ret
0463BC             0147*   ; end table_deactivate_tile
0463BC             0148*   
0463BC             0149*   ; change an existing tile to a new type, keeping its position and velocity the same
0463BC             0150*   ; inputs: hl = pointer to new tile default settings, tile_table_pointer = existing tile
0463BC             0151*   alter_tile:
0463BC             0152*   ; copy default settings to new tile
0463BC ED 33 16    0153*       lea iy,iy+tile_definitions ; bump pointer to copy to
0463BF FD E5       0154*       push iy ; pointer to default tile settings
0463C1 D1          0155*       pop de ; address to copy to
0463C2 01 2A 00 00 0156*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
0463C6 ED B0       0157*       ldir ; copies new defaults existing tile record
0463C8             0158*   ; return to caller
0463C8 FD 2A 06 63 0159*       ld iy,(tile_table_pointer) ; reset tile_table_pointer
       04          
0463CD DD CB 16 FE 0160*       set 7,(ix+sprite_type) ; set just spawned flag
0463D1 DD CB 1D F6 0161*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
0463D5 37          0162*       scf ; set carry flag to indicate success
0463D6 C9          0163*       ret
0463D7             0164*   ; end alter_tile
0463D7             0165*   
0463D7             0166*   ; spawn a new active tile at the prescribed location
0463D7             0167*   ; inputs: hl = pointer to new tile default settings, tiles_x_plot, tiles_y_plot = x,y position
0463D7             0168*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
0463D7             0169*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
0463D7             0170*   ; destroys: a,hl,ix
0463D7             0171*   ; preserves: bc,de (x,y position)
0463D7             0172*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
0463D7             0173*   spawn_active_tile:
0463D7 E5          0174*       push hl ; back up pointer to new tile defaults
0463D8 CD 53 63 04 0175*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
0463DC E1          0176*       pop hl ; restore pointer to new tile defaults
0463DD D0          0177*       ret nc ; no carry means no free tile slots, so we go home
0463DE             0178*   ; copy default settings to new tile
0463DE DD 22 0D 63 0179*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
0463E3 ED 32 16    0180*       lea ix,ix+tile_definitions ; bump pointer to copy to
0463E6 DD E5       0181*       push ix ; pointer to default tile settings
0463E8 D1          0182*       pop de ; address to copy to
0463E9 01 2A 00 00 0183*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
0463ED ED B0       0184*       ldir ; copies defaults to new tile record
0463EF             0185*   ; copy tile position from inputs
0463EF DD 2A 0D 63 0186*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
0463F4 2A 0A 66 04 0187*       ld hl,(tiles_x_plot-1) ; shift up one byte to get 16.8 fixed point
0463F8 DD 2F 01    0188*       ld (ix+tile_x),hl
0463FB 2A 0E 66 04 0189*       ld hl,(tiles_y_plot-1) ; shift up one byte to get 16.8 fixed point
0463FF DD 2F 04    0190*       ld (ix+tile_y),hl
046402             0191*   ; set default tile velocities
046402 21 00 00 00 0192*       ld hl,0
046406 DD 2F 07    0193*       ld (ix+tile_xvel),hl
046409 21 00 01 00 0194*       ld hl,1*256 ; 1 pixel per frame
04640D DD 2F 0A    0195*       ld (ix+tile_yvel),hl
046410             0196*   ; return to caller
046410 DD CB 16 FE 0197*       set 7,(ix+sprite_type) ; set just spawned flag
046414 DD CB 1D F6 0198*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
046418 37          0199*       scf ; set carry flag to indicate success
046419 C9          0200*       ret
04641A             0201*   ; end spawn_active_tile
04641A             0202*   
04641A             0203*   ; compute animation frame based on tile_animation and tile_heading
04641A             0204*   ; inputs: iy set to tile record
04641A             0205*   ; outputs: a, tile_frame set to animation frame
04641A             0206*   ; destroys: a,hl
04641A             0207*   tile_frame_heading_animation:
04641A FD 7E 11    0208*       ld a,(iy+tile_heading+1) ; we want the integer portion
04641D CB 3F       0209*       srl a ; divide integer portion by 8
04641F CB 3F       0210*       srl a
046421 CB 3F       0211*       srl a
046423 FD 66 22    0212*       ld h,(iy+tile_animation)
046426 2E 20       0213*       ld l,32 ; 32 orientation frames per animation
046428 ED 6C       0214*       mlt hl ; hl = offset from base animation
04642A 85          0215*       add a,l ; modulo256 since tile_frame is only 1 byte
04642B FD 77 28    0216*       ld (iy+tile_frame),a
04642E C9          0217*       ret
04642F             0218*   ; end tile_frame_heading_animation
04642F             0219*   
04642F             0220*   ; compute animation frame based on tile_heading
04642F             0221*   ; inputs: iy set to tile record
04642F             0222*   ; outputs: a, tile_frame set to animation frame
04642F             0223*   ; destroys: a,hl
04642F             0224*   tile_frame_heading:
04642F FD 7E 11    0225*       ld a,(iy+tile_heading+1) ; we want the integer portion
046432 CB 3F       0226*       srl a ; divide integer portion by 8
046434 CB 3F       0227*       srl a
046436 CB 3F       0228*       srl a
046438 FD 77 28    0229*       ld (iy+tile_frame),a
04643B C9          0230*       ret
04643C             0231*   ; end tile_frame_heading
04643C             0232*   
04643C             0233*   dump_tile_record:
04643C CD 00 01 04 0234*       call printInline
046440 69 64 20 20 0235*       asciz "id  : "
       3A 20 00    
046447 DD 7E 00    0236*       ld a,(ix+tile_id)
04644A CD 4A 01 04 0237*       call printHexA
04644E             0238*   
04644E CD 00 01 04 0239*       call printInline
046452 0D 0A 78 20 0240*       asciz "\r\nx   :"
       20 20 3A 00 
04645A DD 27 01    0241*       ld hl,(ix+tile_x)
04645D CD 2B 03 04 0242*       call print_s168_hl
046461             0243*   
046461 CD 00 01 04 0244*       call printInline
046465 0D 0A 79 20 0245*       asciz "\r\ny   :"
       20 20 3A 00 
04646D DD 27 04    0246*       ld hl,(ix+tile_y)
046470 CD 2B 03 04 0247*       call print_s168_hl
046474             0248*   
046474 CD 00 01 04 0249*       call printInline
046478 0D 0A 78 76 0250*       asciz "\r\nxv  :"
       20 20 3A 00 
046480 DD 27 07    0251*       ld hl,(ix+tile_xvel)
046483 CD 2B 03 04 0252*       call print_s168_hl
046487             0253*   
046487 CD 00 01 04 0254*       call printInline
04648B 0D 0A 79 76 0255*       asciz "\r\nyv  :"
       20 20 3A 00 
046493 DD 27 0A    0256*       ld hl,(ix+tile_yvel)
046496 CD 2B 03 04 0257*       call print_s168_hl
04649A             0258*   
04649A CD 00 01 04 0259*       call printInline
04649E 0D 0A 76 20 0260*       asciz "\r\nv   :"
       20 20 3A 00 
0464A6 DD 27 0D    0261*       ld hl,(ix+tile_vel)
0464A9 CD 2B 03 04 0262*       call print_s168_hl
0464AD             0263*   
0464AD CD 00 01 04 0264*       call printInline
0464B1 0D 0A 68 64 0265*       asciz "\r\nhdg :"
       67 20 3A 00 
0464B9 DD 27 10    0266*       ld hl,(ix+tile_heading)
0464BC CD 2B 03 04 0267*       call print_s168_hl
0464C0             0268*   
0464C0 CD 00 01 04 0269*       call printInline
0464C4 0D 0A 6F 72 0270*       asciz "\r\nori :"
       69 20 3A 00 
0464CC DD 27 13    0271*       ld hl,(ix+tile_orientation)
0464CF CD 2B 03 04 0272*       call print_s168_hl
0464D3             0273*   
0464D3 CD 00 01 04 0274*       call printInline
0464D7 0D 0A 74 79 0275*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
0464E0 DD 7E 16    0276*       ld a,(ix+tile_type)
0464E3 CD 4A 01 04 0277*       call printHexA
0464E7             0278*   
0464E7 CD 00 01 04 0279*       call printInline
0464EB 0D 0A 42 49 0280*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
0464F4 DD 27 17    0281*       ld hl,(ix+tile_base_bufferId)
0464F7 CD 27 01 04 0282*       call printHex24
0464FB             0283*   
0464FB CD 00 01 04 0284*       call printInline
0464FF 0D 0A 6D 50 0285*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
046508 DD 27 1A    0286*       ld hl,(ix+tile_move_program)
04650B CD 27 01 04 0287*       call printHex24
04650F             0288*   
04650F CD 00 01 04 0289*       call printInline
046513 0D 0A 63 6F 0290*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
04651C DD 7E 1D    0291*       ld a,(ix+tile_collisions)
04651F CD A8 03 04 0292*       call printBin8
046523             0293*   
046523             0294*       ; call printInline
046523             0295*       ; asciz "\r\nszx : "
046523             0296*       ; ld a,(ix+tile_dim_x)
046523             0297*       ; call printHexA
046523             0298*   
046523             0299*       ; call printInline
046523             0300*       ; asciz "\r\nszy : "
046523             0301*       ; ld a,(ix+tile_dim_y)
046523             0302*       ; call printHexA
046523             0303*   
046523             0304*       ; call printInline
046523             0305*       ; asciz "\r\n#ori: "
046523             0306*       ; ld a,(ix+tile_num_orientations)
046523             0307*       ; call printHexA
046523             0308*   
046523             0309*       ; call printInline
046523             0310*       ; asciz "\r\n#ani: "
046523             0311*       ; ld a,(ix+tile_num_animations)
046523             0312*       ; call printHexA
046523             0313*   
046523             0314*       ; call printInline
046523             0315*       ; asciz "\r\nani : "
046523             0316*       ; ld a,(ix+tile_animation)
046523             0317*       ; call printHexA
046523             0318*   
046523             0319*       ; call printInline
046523             0320*       ; asciz "\r\nanit: "
046523             0321*       ; ld a,(ix+tile_animation_timer)
046523             0322*       ; call printHexA
046523             0323*   
046523             0324*       ; call printInline
046523             0325*       ; asciz "\r\nmvt : "
046523             0326*       ; ld a,(ix+tile_move_timer)
046523             0327*       ; call printHexA
046523             0328*   
046523             0329*       ; call printInline
046523             0330*       ; asciz "\r\nmvs : "
046523             0331*       ; ld a,(ix+tile_move_step)
046523             0332*       ; call printHexA
046523             0333*   
046523             0334*       ; call printInline
046523             0335*       ; asciz "\r\npts : "
046523             0336*       ; ld a,(ix+tile_points)
046523             0337*       ; call printHexA
046523             0338*   
046523             0339*       ; call printInline
046523             0340*       ; asciz "\r\ndmg : "
046523             0341*       ; ld a,(ix+tile_shield_damage)
046523             0342*       ; call printHexA
046523             0343*   
046523             0344*       ; call printInline
046523             0345*       ; asciz "\r\nfrm : "
046523             0346*       ; ld a,(ix+tile_frame)
046523             0347*       ; call printHexA
046523             0348*   
046523             0349*       ; call printNewLine
046523             0350*       ; call printNewLine
046523             0351*   
046523             0352*       ; call waitKeypress
046523 C9          0353*       ret
046524             0064        include "tiles.inc"
046524 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
046600 00 00 00    0002*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
046603 00 00 00    0003*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
046606             0004*       ; initialize to zero for a maximum of 256 rows in a level
046606 00          0005*   tiles_cols: db 0 ; number of tile columns in the current level
046607             0006*   
046607 00 00 00    0007*   cur_baseBufferId: dl 0
04660A 00          0008*       db 0 ; padding for byte-shifting
04660B 00 00 00    0009*   tiles_x_plot: dl 0
04660E 00          0010*       db 0 ; padding for byte-shifting
04660F F1 FF FF    0011*   tiles_y_plot: dl -15
046612             0012*   
046612             0013*   tiles_plot:
046612             0014*   ; set gfx viewport to playing field window
046612 01 00 00 00 0015*       ld bc,field_left
046616 11 00 00 00 0016*       ld de,field_top
04661A DD 21 FF 00 0017*       ld ix,field_right
       00          
04661F FD 21 7F 01 0018*       ld iy,field_bottom
       00          
046624 CD EB 19 04 0019*       call vdu_set_gfx_viewport
046628             0020*   ; move the background down one pixel
046628 3E 02       0021*       ld a,2 ; current gfx viewport
04662A 2E 02       0022*       ld l,2 ; direction=down
04662C 26 01       0023*       ld h,1 ; speed=1 px
04662E CD 63 19 04 0024*       call vdu_scroll_down
046632             0025*   ; set gfx viewport to one scanline to optimise plotting tiles
046632 01 00 00 00 0026*       ld bc,0 ; leftmost x-coord
046636 11 00 00 00 0027*       ld de,0 ; topmost y-coord
04663A DD 21 FF 00 0028*       ld ix,255 ; rightmost x-coord
       00          
04663F FD 21 00 00 0029*       ld iy,0 ; bottommost y-coord
       00          
046644 CD EB 19 04 0030*       call vdu_set_gfx_viewport
046648             0031*   ; ; plot the background
046648             0032*   ;     call bg_plot
046648             0033*   ; initialize tiles loop
046648 21 00 00 00 0034*       ld hl,0 ; init plotting x-coordinate
04664C 22 0B 66 04 0035*       ld (tiles_x_plot),hl
046650 2A 00 66 04 0036*       ld hl,(tiles_row_defs)
046654 3A 06 66 04 0037*       ld a,(tiles_cols)
046658 47          0038*       ld b,a ; column loop counter
046659             0039*   @loop:
046659 C5          0040*       push bc ; save the loop counter
04665A             0041*   ; read the tile defintion for the current column
04665A 7E          0042*       ld a,(hl) ; a has tile definition
04665B E5          0043*       push hl ; save pointer to tile definition
04665C 2A 07 66 04 0044*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
046660 6F          0045*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
046661 CD 38 1A 04 0046*       call vdu_buff_select ; tile bitmap buffer is now active
046665             0047*   ; plot the active bitmap
046665 ED 4B 0B 66 0048*       ld bc,(tiles_x_plot)
       04          
04666A ED 5B 0F 66 0049*       ld de,(tiles_y_plot)
       04          
04666F CD 20 1E 04 0050*       call vdu_plot_bmp
046673             0051*   ; bump x-coords the width of one tile and save it
046673 2A 0B 66 04 0052*       ld hl,(tiles_x_plot)
046677 01 10 00 00 0053*       ld bc,16
04667B 09          0054*       add hl,bc
04667C 22 0B 66 04 0055*       ld (tiles_x_plot),hl
046680             0056*   ; prepare to loop to next column
046680 E1          0057*       pop hl ; get back pointer to tile def
046681 23          0058*       inc hl ; bump it to the next column
046682 C1          0059*       pop bc ; snag our loop counter
046683 10 D4       0060*       djnz @loop
046685             0061*   ; increment tiles plotting y-coordinate
046685             0062*   ; (we use ix b/c we want to preserve hl for the next step)
046685 DD 2A 0F 66 0063*       ld ix,(tiles_y_plot)
       04          
04668A 11 01 00 00 0064*       ld de,1
04668E DD 19       0065*       add ix,de
046690 DD 22 0F 66 0066*       ld (tiles_y_plot),ix
       04          
046695 DD 7D       0067*       ld a,ixl
046697 FE 01       0068*       cp 1
046699 C0          0069*       ret nz
04669A             0070*   ; do active tiles
04669A E5          0071*       push hl ; save pointer to next row tile def
04669B CD BE 66 04 0072*       call do_active_tiles
04669F E1          0073*       pop hl ; get back pointer to next row tile def
0466A0             0074*   ; time to bump tiles_row_defs to next row
0466A0             0075*   ; (hl was already there at the end of the loop)
0466A0 22 00 66 04 0076*       ld (tiles_row_defs),hl
0466A4             0077*   ; reset coords to plot next row of tiles
0466A4 21 00 00 00 0078*       ld hl,0
0466A8 22 0B 66 04 0079*       ld (tiles_x_plot),hl
0466AC 21 F1 FF FF 0080*       ld hl,-15
0466B0 22 0F 66 04 0081*       ld (tiles_y_plot),hl
0466B4             0082*   ; decrement tiles row counter
0466B4 21 03 66 04 0083*       ld hl,tiles_row
0466B8 35          0084*       dec (hl)
0466B9 C0          0085*       ret nz
0466BA             0086*   @inc_level:
0466BA C3 6C 56 04 0087*       jp next_level
0466BE             0088*   ; end tiles_plot
0466BE             0089*   
0466BE             0090*   do_active_tiles:
0466BE             0091*   ; initialize tiles loop
0466BE 21 00 00 00 0092*       ld hl,0 ; init plotting x-coordinate
0466C2 22 0B 66 04 0093*       ld (tiles_x_plot),hl
0466C6 2A 00 66 04 0094*       ld hl,(tiles_row_defs)
0466CA 3A 06 66 04 0095*       ld a,(tiles_cols)
0466CE 47          0096*       ld b,a ; column loop counter
0466CF             0097*   @loop:
0466CF C5          0098*       push bc ; save the loop counter
0466D0             0099*   ; read the tile defintion for the current column
0466D0 7E          0100*       ld a,(hl) ; a has tile definition
0466D1 E5          0101*       push hl ; save pointer to tile definition
0466D2 B7          0102*       or a ; check for null tile
0466D3 CA EF 66 04 0103*       jp z,@next_tile ; skip to next tile if null
0466D7 FE 11       0104*       cp 17 ; carry reset if active tile
0466D9 D2 EF 66 04 0105*       jp nc,@next_tile ; skip to next tile if not active
0466DD             0106*   ; call the tile activation routine
0466DD 21 03 67 04 0107*       ld hl,tile_activation_routines
0466E1 16 03       0108*       ld d,3 ; three bytes per table entry
0466E3 5F          0109*       ld e,a ; a is the tile type
0466E4 ED 5C       0110*       mlt de ; de is now the offset to the table entry
0466E6 19          0111*       add hl,de ; hl is now the address of the table entry
0466E7 ED 27       0112*       ld hl,(hl) ; hl is now the activation routine address
0466E9             0113*       CALL_HL ; call the activation routine
0466E9 01 EF 66 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
0466ED C5          0002*M1     push bc ; which constitutes the return address
0466EE E9          0003*M1     jp (hl) ; Jump to the address in HL
0466EF             0004*M1 @@:
0466EF             0114*   @next_tile:
0466EF             0115*   ; bump x-coords the width of one tile and save it
0466EF 2A 0B 66 04 0116*       ld hl,(tiles_x_plot)
0466F3 01 10 00 00 0117*       ld bc,16
0466F7 09          0118*       add hl,bc
0466F8 22 0B 66 04 0119*       ld (tiles_x_plot),hl
0466FC             0120*   ; prepare to loop to next column
0466FC E1          0121*       pop hl ; get back pointer to tile def
0466FD 23          0122*       inc hl ; bump it to the next column
0466FE C1          0123*       pop bc ; snag our loop counter
0466FF 10 CE       0124*       djnz @loop
046701 C9          0125*       ret ; done
046702             0126*   ; end do_active_tiles
046702             0127*   
046702             0128*   ; bg_y_plot: dl -1
046702             0129*   ; bg_bufferId: dl BUF_STATION_BG_00 ; default bufferId for background tiles
046702             0130*   
046702             0131*   bg_plot: ; TODO: implement this
046702             0132*   ; ; load current bg tile bufferId as default
046702             0133*   ;     ld hl,(bg_bufferId)
046702             0134*   ; ; check whether it is time for a new background tile
046702             0135*   ;     ld a,(bg_y_plot)
046702             0136*   ;     inc a
046702             0137*   ;     ld (bg_y_plot),a
046702             0138*   ;     jp nz,@F ; not time for a new tile so draw current one
046702             0139*   ; ; load the next background tile
046702             0140*   ;     ld hl,BUF_STATION_BG_00
046702             0141*   ;     call rand_8
046702             0142*   ;     and %0000011
046702             0143*   ;     add a,l
046702             0144*   ;     ld l,a
046702             0145*   ;     ld a,0
046702             0146*   ;     adc a,h
046702             0147*   ;     ld h,a
046702             0148*   ;     ld (bg_bufferId),hl
046702             0149*   ; @@:
046702             0150*   ;     call vdu_buff_select
046702             0151*   ;     ld bc,0
046702             0152*   ;     ld de,(bg_y_plot)
046702             0153*   ;     inc de
046702             0154*   ;     call vdu_plot_bmp
046702             0155*   ; all done
046702 C9          0156*       ret
046703             0065        include "tiles_active.inc"
046703             0001*   
046703             0002*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
046703             0003*   tile_pad_small: equ 1
046703             0004*   tile_pad_med: equ 2
046703             0005*   tile_pad_large: equ 3
046703             0006*   tile_pad_huge: equ 4
046703             0007*   tile_turret_fireball: equ 5
046703             0008*   tile_laser_turret: equ 6
046703             0009*   tile_twin_laser_turret: equ 7
046703             0010*   tile_gatling_turret: equ 8
046703             0011*   tile_electrode_r: equ 9
046703             0012*   tile_electrode_u: equ 10
046703             0013*   tile_piston_r: equ 11
046703             0014*   tile_piston_u: equ 12
046703             0015*   tile_spark_r: equ 13
046703             0016*   tile_spark_u: equ 14
046703             0017*   tile_flame_r: equ 15
046703             0018*   tile_flame_u: equ 16
046703             0019*   
046703             0020*   active_tile_timer: equ 24 ; 2/10ths of a second
046703             0021*   tile_activation_routines:
046703 36 67 04    0022*       dl activate_null_tile ; dummy spacer since tiled is 1-based
046706 13 68 04    0023*       dl activate_pad_small
046709 36 67 04    0024*       dl activate_null_tile  ;  activate_pad_med
04670C 36 67 04    0025*       dl activate_null_tile  ;  activate_pad_large
04670F 36 67 04    0026*       dl activate_null_tile  ;  activate_pad_huge
046712 13 69 04    0027*       dl activate_turret_fireball
046715 36 67 04    0028*       dl activate_null_tile  ;  activate_laser_turret
046718 36 67 04    0029*       dl activate_null_tile  ;  activate_twin_laser_turret
04671B 36 67 04    0030*       dl activate_null_tile  ;  activate_gatling_turret
04671E 36 67 04    0031*       dl activate_null_tile  ;  activate_electrode_r
046721 36 67 04    0032*       dl activate_null_tile  ;  activate_electrode_u
046724 36 67 04    0033*       dl activate_null_tile  ;  activate_piston_r
046727 36 67 04    0034*       dl activate_null_tile  ;  activate_piston_u
04672A 36 67 04    0035*       dl activate_null_tile  ;  activate_spark_r
04672D 36 67 04    0036*       dl activate_null_tile  ;  activate_spark_u
046730 36 67 04    0037*       dl activate_null_tile  ;  activate_flame_r
046733 36 67 04    0038*       dl activate_null_tile  ;  activate_flame_u
046736             0039*   ; end tile_activation_routines
046736             0040*   
046736             0041*   activate_null_tile:
046736 C9          0042*       ret ; dummy routine, do nothing
046737             0043*   move_active_tile:
046737             0044*   ; y-axis movement
046737 FD 27 04    0045*       ld hl,(iy+tile_y)
04673A FD 17 0A    0046*       ld de,(iy+tile_yvel)
04673D 19          0047*       add hl,de
04673E FD 2F 04    0048*       ld (iy+tile_y),hl
046741             0049*   ; detect screen edge collisions
046741             0050*   ; y-axis bottom is all we need to test
046741 11 00 80 FE 0051*       ld de,-tile_bottom*256
046745 ED 5A       0052*       adc hl,de
046747 F8          0053*       ret m ; still on screen so do nothing further
046748 AF          0054*       xor a ; signal caller that tile has scrolled off screen
046749 C9          0055*       ret
04674A             0056*   ; end move_active_tile
04674A             0057*   
04674A             0058*   move_tiles:
04674A             0059*   ; initialize pointers and loop counter
04674A FD 21 00 60 0060*       ld iy,tile_stack ; set iy to first record in table
       04          
04674F             0061*   @move_loop:
04674F FD 22 03 63 0062*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
046754 FD 7E 02    0063*       ld a,(iy+2)
046757 B7          0064*       or a ; will be zero if at end of stack
046758 C8          0065*       ret z ; end of stack so we're done
046759             0066*   ; point iy to tile record
046759 FD 37 00    0067*       ld iy,(iy) ; iy points to the current tile record
04675C FD 22 06 63 0068*       ld (tile_table_pointer),iy ; update table pointer
       04          
046761             0069*   ; check top bit of tile_type to see if tile is just spawned
046761 FD CB 16 7E 0070*       bit 7,(iy+tile_type)
046765 C2 83 67 04 0071*       jp nz,@just_spawned ; if just spawned, skip to next record
046769             0072*   ; check sprite_alive bit to see if tile is active
046769 FD CB 1D 76 0073*       bit sprite_alive,(iy+sprite_collisions)
04676D C8          0074*       ret z ; end of stack so we're done
04676E             0075*   ; otherwise we prepare to move the tile
04676E FD 27 1A    0076*       ld hl,(iy+tile_move_program) ; load the behavior subroutine address
046771             0077*       CALL_HL
046771 01 77 67 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
046775 C5          0002*M1     push bc ; which constitutes the return address
046776 E9          0003*M1     jp (hl) ; Jump to the address in HL
046777             0004*M1 @@:
046777             0078*    ; get back stack pointer and loop
046777             0079*   @next_record:
046777 FD 2A 03 63 0080*       ld iy,(tile_stack_pointer)
       04          
04677C ED 33 03    0081*       lea iy,iy+3 ; next tile stack record
04677F C3 4F 67 04 0082*       jp @move_loop ; loop until we've checked all the records
046783             0083*   @just_spawned:
046783 FD CB 16 BE 0084*       res 7,(iy+tile_type) ; clear just spawned flag
046787 C3 77 67 04 0085*       jp @next_record
04678B             0086*   ; end move_tiles
04678B             0087*   
04678B             0088*   ; this routine vanquishes the tile tile
04678B             0089*   ; and replaces it with an animated explosion
04678B             0090*   ; destroys: everything except index registers
04678B             0091*   ; returns: a=-1 to indicate tile died, and an incandescent ball of debris and gas
04678B             0092*   tile_kill:
04678B FD 2A 03 63 0093*       ld iy,(tile_stack_pointer)
       04          
046790 2A 00 59 04 0094*       ld hl,(player_score)
046794 01 00 00 00 0095*       ld bc,0 ; clear bcu
046798 FD 4E 26    0096*       ld c,(iy+tile_points)
04679B 09          0097*       add hl,bc
04679C 22 00 59 04 0098*       ld (player_score),hl
0467A0 C3 13 28 04 0099*       jp spawn_explosion
0467A4             0100*   ; end tile_kill
0467A4             0101*   
0467A4             0102*   draw_active_tile:
0467A4 FD 27 17    0103*       ld hl,(iy+tile_base_bufferId)
0467A7 FD 7E 28    0104*       ld a,(iy+tile_frame)
0467AA 85          0105*       add a,l ; TODO: with a little work we could make all tile base buffer ids align to 256
0467AB 6F          0106*       ld l,a
0467AC 3E 00       0107*       ld a,0 ; preserve carry
0467AE 8C          0108*       adc a,h
0467AF 67          0109*       ld h,a
0467B0 CD 38 1A 04 0110*       call vdu_buff_select ; buffer id of animation frame
0467B4 FD 07 01    0111*       ld bc,(iy+tile_x)
0467B7 FD 17 04    0112*       ld de,(iy+tile_y)
0467BA CD 3C 1E 04 0113*       call vdu_plot_bmp168
0467BE C9          0114*       ret
0467BF             0115*   ; end draw_active_tile
0467BF             0116*   
0467BF             0117*   ; create a new sprite at the same location as the current tile
0467BF             0118*   ; inputs: hl = pointer to new sprite default settings, tile_table_pointer = current tile
0467BF             0119*   ;         ix = pointer to sprite group, b = number of records in sprite group
0467BF             0120*   spawn_sprite_from_tile:
0467BF E5          0121*       push hl ; back up pointer to new sprite defaults
0467C0 CD 0C 6A 04 0122*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
0467C4 E1          0123*       pop hl ; restore pointer to new sprite defaults
0467C5 D0          0124*       ret nc ; no carry means no free sprite slots, so we go home
0467C6             0125*   ; copy default settings to new sprite
0467C6 DD E5       0126*       push ix ; back up pointer to new sprite record
0467C8 ED 32 16    0127*       lea ix,ix+sprite_definitions ; bump pointer to copy to
0467CB DD E5       0128*       push ix ; pointer to default sprite settings
0467CD D1          0129*       pop de ; address to copy to
0467CE 01 2A 00 00 0130*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
0467D2 ED B0       0131*       ldir ; copies defaults to new sprite record
0467D4 DD E1       0132*       pop ix ; restore pointer to new sprite record
0467D6             0133*   ; copy sprite position, velocity and orientation from existing tile
0467D6 FD 2A 06 63 0134*       ld iy,(tile_table_pointer) ; get existing tile record
       04          
0467DB FD 27 01    0135*       ld hl,(iy+tile_x)
0467DE DD 2F 01    0136*       ld (ix+sprite_x),hl
0467E1 FD 27 04    0137*       ld hl,(iy+tile_y)
0467E4 DD 2F 04    0138*       ld (ix+sprite_y),hl
0467E7             0139*   ; return to caller
0467E7 DD CB 16 FE 0140*       set 7,(ix+sprite_type) ; set just spawned flag
0467EB DD CB 1D F6 0141*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
0467EF 37          0142*       scf ; set carry flag to indicate success
0467F0 C9          0143*       ret
0467F1             0144*   ; end spawn_sprite_from_tile
0467F1             0066        include "tile_pad_small.inc"
0467F1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
046800             0002*   pad_small_defaults:
046800 01          0003*       db tile_pad_small       ; type
046801 0A 01 00    0004*       dl BUF_PAD              ; base_bufferId
046804 22 68 04    0005*       dl move_pad_small       ; move_program
046807 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
046808 10          0007*       db 16                   ; dim_x
046809 10          0008*       db 16                   ; dim_y
04680A 01          0009*       db 1                    ; num_orientations
04680B 01          0010*       db 1                    ; num_animations
04680C 00          0011*       db 0                    ; animation
04680D 00          0012*       db 0                    ; animation_timer
04680E 18          0013*       db 24                   ; move_timer
04680F 00          0014*       db 0                    ; move_step
046810 05          0015*       db 5                    ; points
046811 00          0016*       db 0                    ; shield_damage
046812 00          0017*       db 0                    ; frame
046813             0018*   
046813             0019*   activate_pad_small:
046813 21 00 68 04 0020*       ld hl,pad_small_defaults
046817             0021*   ; get next available tile id
046817 CD D7 63 04 0022*       call spawn_active_tile
04681B D0          0023*       ret nc ; no carry means no free tile slots, so we go home
04681C             0024*   ; other specific initialization
04681C 3E 40       0025*       ld a,64
04681E FD 77 24    0026*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
046821 C9          0027*       ret
046822             0028*   ; end activate_pad_small
046822             0029*   
046822             0030*   move_pad_small:
046822 CD 37 67 04 0031*       call move_active_tile
046826 B7          0032*       or a ; a will be non-zero if have scrolled off screen
046827 C2 83 63 04 0033*       jp nz,table_deactivate_tile
04682B CD 5E 25 04 0034*       call check_enemy_collision_laser
04682F             0035*       ; TODO: handle collision event
04682F             0036*   ; check whether it is time to spawn a seeker
04682F FD 35 24    0037*       dec (iy+tile_move_timer)
046832 C0          0038*       ret nz
046833             0039*   pad_small_reset_move_timer:
046833 CD AE 09 04 0040*       call rand_8     ; snag a random number
046837 E6 1F       0041*       and %00011111   ; keep only 5 lowest bits (max 31)
046839 C6 40       0042*       add a,64 ; range is now 64-127
04683B FD 77 24    0043*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
04683E CD 14 27 04 0044*       call enemy_spawn_seeker
046842 C9          0045*       ret
046843             0067        include "tile_turret_fireball.inc"
046843 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
046900             0002*   turret_fireball_defaults:
046900 02          0003*       db enemy_ground         ; type
046901 30 01 00    0004*       dl BUF_TURRET_000       ; base_bufferId
046904             0005*       ; dl BUF_CRATER       ; base_bufferId DEBUG
046904 22 69 04    0006*       dl move_turret_fireball ; move_program
046907 40          0007*       db %01000000            ; collisions bit 6 signals sprite alive
046908 10          0008*       db 16                   ; dim_x
046909 10          0009*       db 16                   ; dim_y
04690A 20          0010*       db 32                   ; num_orientations
04690B 01          0011*       db 1                    ; num_animations
04690C 00          0012*       db 0                    ; animation
04690D 00          0013*       db 0                    ; animation_timer
04690E 18          0014*       db 24                   ; move_timer
04690F 00          0015*       db 0                    ; move_step
046910 05          0016*       db 5                    ; points
046911 00          0017*       db 0                    ; shield_damage
046912 00          0018*       db 0                    ; frame
046913             0019*   
046913             0020*   activate_turret_fireball:
046913 21 00 69 04 0021*       ld hl,turret_fireball_defaults
046917             0022*   ; get next available active tile id
046917 CD D7 63 04 0023*       call spawn_active_tile
04691B D0          0024*       ret nc ; no carry means no free active tile slots, so we go home
04691C             0025*   ; other specific initialization
04691C 3E 40       0026*       ld a,64
04691E FD 77 24    0027*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
046921 C9          0028*       ret
046922             0029*   ; end activate_turret_fireball
046922             0030*   
046922             0031*   move_turret_fireball:
046922 CD 37 67 04 0032*       call move_active_tile
046926 CA 83 63 04 0033*       jp z,table_deactivate_tile
04692A CD 5E 25 04 0034*       call check_enemy_collision_laser
04692E FA 61 69 04 0035*       jp m,kill_turret_fireball
046932             0036*   ; target player
046932 CD 26 5F 04 0037*       call tile_orientation_to_player
046936 21 00 04 00 0038*       ld hl,speed_fireball
04693A 22 53 5F 04 0039*       ld (Vp),hl ; param for targeting_computer
04693E CD 6B 5F 04 0040*       call targeting_computer
046942 FD 2F 10    0041*       ld (iy+tile_heading),hl ; save active tile heading
046945 CD 2F 64 04 0042*       call tile_frame_heading
046949 CD A4 67 04 0043*       call draw_active_tile
04694D             0044*   ; check whether it is time to spawn a fireball
04694D FD 35 24    0045*       dec (iy+tile_move_timer)
046950 C0          0046*       ret nz
046951             0047*   ; spwan a fireball
046951 CD 13 26 04 0048*       call enemy_spawn_fireball
046955             0049*       ; fall through to reset move timer
046955             0050*   turret_fireball_reset_move_timer:
046955 CD AE 09 04 0051*       call rand_8     ; snag a random number
046959 E6 1F       0052*       and %00011111   ; keep only 5 lowest bits (max 31)
04695B C6 18       0053*       add a,24 ; range is now 24-55
04695D FD 77 24    0054*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
046960 C9          0055*       ret
046961             0056*   
046961             0057*   kill_turret_fireball: ; TODO: tally score and spawn explosion
046961 C3 83 63 04 0058*       jp table_deactivate_tile
046965             0059*   ; end move_turret_fireball
046965             0068        include "sprites.inc"
046965             0001*   ; sprite_type
046965             0002*   enemy_dead: equ 0
046965             0003*   enemy_air: equ 1
046965             0004*   enemy_ground: equ 2
046965             0005*   enemy_projectile: equ 3
046965             0006*   explosion: equ 4
046965             0007*   player: equ 5
046965             0008*   player_air: equ 6
046965             0009*   player_ground: equ 7
046965             0010*   
046965             0011*   ; ###### SPRITE TABLE FIELD INDICES ######
046965             0012*   table_record_size:         equ  64; 40 bytes ;40 bytes per sprite record
046965             0013*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
046965             0014*   ; sprite state variables
046965             0015*   sprite_state_variables:    equ   1; beginning of sprite state variables
046965             0016*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
046965             0017*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
046965             0018*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
046965             0019*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
046965             0020*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
046965             0021*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
046965             0022*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
046965             0023*   ; sprite definition variables
046965             0024*   sprite_definitions:        equ  22; beginnning of sprite definition variables
046965             0025*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
046965             0026*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
046965             0027*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
046965             0028*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
046965             0029*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
046965             0030*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
046965             0031*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
046965             0032*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
046965             0033*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
046965             0034*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
046965             0035*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
046965             0036*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
046965             0037*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
046965             0038*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
046965             0039*   sprite_frame:              equ  40; 1 bytes ;current animation frame
046965             0040*   
046965             0041*   ; ###### SPRITE TABLE VARIABLES ######
046965             0042*   ; maximum number of sprites
046965             0043*   table_max_records: equ 16 ; it can handle more but this is pushing it
046965             0044*   ; table_total_bytes: equ table_end-table_start_variables
046965             0045*   
046965             0046*   ; pointer to top address of current record, initialized to table_base
046965 00 80 04    0047*   table_pointer: dl table_base
046968             0048*   
046968             0049*   ; flag indicating collision with screen edge
046968             0050*   ; uses orientation codes to specify which edge(s)
046968 00          0051*   sprite_screen_edge: db #00
046969             0052*   
046969             0053*   ; origin_top: equ 48
046969             0054*   origin_top: equ 0
046969             0055*   origin_left: equ 128
046969             0056*   field_top: equ 0
046969             0057*   field_bottom: equ 383-origin_top
046969             0058*   field_left: equ 0
046969             0059*   field_right: equ 255
046969             0060*   sprite_top: equ field_top + 0
046969             0061*   sprite_bottom: equ field_bottom-16
046969             0062*   sprite_left: equ field_left
046969             0063*   sprite_right: equ field_right-16
046969             0064*   
046969             0065*   tile_bottom: equ 384
046969             0066*   
046969             0067*   ; ######### COLLISION SPRITE PARAMETERS ##########
046969             0068*   ; integer coordinates are all that are needed for collision calculations
046969 00          0069*   collision_x: db 0x00
04696A 00          0070*   collision_y: db 0x00
04696B 00          0071*   collision_dim_x: db 0x00
04696C 00          0072*   collision_dim_y: db 0x00
04696D             0073*   
04696D             0074*   ; scratch variables
04696D 00          0075*   x: db 0x00 ; 8-bit signed integer
04696E 00          0076*   y: db 0x00 ; 8-bit signed integer
04696F 00 00 00    0077*   x0: dl 0x000000 ; 16.8 signed fixed place
046972 00 00 00    0078*   y0: dl 0x000000 ; 16.8 signed fixed place
046975 00 00 00    0079*   incx1: dl 0x000000 ; 16.8 signed fixed place
046978 00 00 00    0080*   incy1: dl 0x000000 ; 16.8 signed fixed place
04697B 00 00 00    0081*   incx2: dl 0x000000 ; 16.8 signed fixed place
04697E 00 00 00    0082*   incy2: dl 0x000000 ; 16.8 signed fixed place
046981             0083*   
046981             0084*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
046981 00 00 00    0085*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
046984 00 00 00    0086*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
046987 00 00 00    0087*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
04698A             0088*   
04698A             0089*   table_init:
04698A             0090*   ; clear the sprite table
04698A AF          0091*       xor a ; write zeroes to sprite table
04698B 21 00 80 04 0092*       ld hl,table_base ; address to copy from
04698F 01 00 03 00 0093*       ld bc,table_end-table_base ; number of bytes to clear
046993 CD 31 07 04 0094*       call clear_mem
046997             0095*   ; write sprite ids
046997 DD 21 00 80 0096*       ld ix,table_base
       04          
04699C AF          0097*       xor a ; sprite id
04699D 0E 00       0098*       ld c,0 ; sprite type
04699F 06 0C       0099*       ld b,table_num_records ; loop counter
0469A1             0100*   @loop:
0469A1 DD 77 00    0101*       ld (ix+sprite_id),a
0469A4 DD 71 16    0102*       ld (ix+sprite_type),c
0469A7 ED 32 40    0103*       lea ix,ix+table_record_size
0469AA 3C          0104*       inc a
0469AB 10 F4       0105*       djnz @loop
0469AD C9          0106*       ret
0469AE             0107*   ; end table_init
0469AE             0108*   
0469AE             0109*   ; deactivate the sprite with the given id
0469AE             0110*   ; inputs: iy set to sprite record
0469AE             0111*   ; outputs: nothing
0469AE             0112*   ; destroys: a,hl
0469AE             0113*   table_deactivate_sprite:
0469AE FD 7E 00    0114*       ld a,(iy+sprite_id) ; get spriteId
0469B1 CD 00 1F 04 0115*       call vdu_sprite_select ; select sprite
0469B5 CD 84 1F 04 0116*       call vdu_sprite_hide
0469B9 FD CB 1D B6 0117*       res sprite_alive,(iy+sprite_collisions)
0469BD FD CB 1D BE 0118*       res sprite_just_died,(iy+sprite_collisions)
0469C1 C9          0119*       ret
0469C2             0120*   ; end table_deactivate_sprite
0469C2             0121*   
0469C2             0122*   sprites_init:
0469C2             0123*   ; initialize sprites
0469C2 CD 34 20 04 0124*   	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
0469C6 AF          0125*   	xor a ; loop counter / sprite id
0469C7             0126*   @sprite_loop:
0469C7 F5          0127*   	push af ; save loop counter / sprite id
0469C8 CD 00 1F 04 0128*   	call vdu_sprite_select
0469CC 21 00 01 00 0129*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
0469D0 CD 55 20 04 0130*   	call vdu_sprite_add_buff
0469D4 F1          0131*   	pop af ; restore loop counter / sprite id
0469D5 3C          0132*       inc a
0469D6 FE 0C       0133*       cp table_num_records
0469D8 C2 C7 69 04 0134*       jp nz,@sprite_loop
0469DC CD 34 1F 04 0135*   	call vdu_sprite_activate
0469E0             0136*   
0469E0             0137*   ; define player sprite
0469E0 3A 00 81 04 0138*   	ld a,(player_begin+sprite_id)
0469E4 CD 00 1F 04 0139*   	call vdu_sprite_select
0469E8 CD 13 1F 04 0140*   	call vdu_sprite_clear_frames
0469EC 21 2B 01 00 0141*   	ld hl,BUF_SHIP_0L
0469F0 01 03 00 00 0142*   	ld bc,3 ; three bitmaps for player ship
0469F4             0143*   @sprite_player_loop:
0469F4 C5          0144*   	push bc
0469F5 E5          0145*   	push hl
0469F6 CD 55 20 04 0146*   	call vdu_sprite_add_buff
0469FA E1          0147*   	pop hl
0469FB 23          0148*   	inc hl
0469FC C1          0149*   	pop bc
0469FD 10 F5       0150*   	djnz @sprite_player_loop
0469FF             0151*   
0469FF             0152*   ; define player weapon sprites
0469FF CD A5 5C 04 0153*       call init_player_laser
046A03             0154*   
046A03             0155*   ; define enemy sprites
046A03 CD 9D 27 04 0156*       call init_enemy_seekers
046A07 CD 6E 26 04 0157*       call init_enemy_fireballs
046A0B C9          0158*       ret
046A0C             0159*   ; end sprites_init
046A0C             0160*   
046A0C             0161*   ; gets the next available sprite id for a particular sprite group
046A0C             0162*   ; inputs; ix = pointer to sprite group, b = number of records in sprite group
046A0C             0163*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
046A0C             0164*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
046A0C             0165*   ; destroys: a,b,c,hl,ix
046A0C             0166*   table_get_next_id:
046A0C             0167*   @loop:
046A0C DD CB 1D 76 0168*       bit sprite_alive,(ix+sprite_collisions)
046A10 28 07       0169*       jr z,@found
046A12 ED 32 40    0170*       lea ix,ix+table_record_size
046A15 10 F5       0171*       djnz @loop
046A17             0172*   @notfound:
046A17 AF          0173*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
046A18 C9          0174*       ret
046A19             0175*   @found:
046A19             0176*   ; return sprite id
046A19 DD 7E 00    0177*       ld a,(ix+sprite_id)
046A1C 37          0178*       scf ; sets carry flag indicating we found a free sprite
046A1D C9          0179*       ret ; done
046A1E             0180*   ; end table_get_next_id
046A1E             0181*   
046A1E             0182*   ; create a new sprite at the same location as an existing sprite
046A1E             0183*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
046A1E             0184*   ;         ix = pointer to sprite group, b = number of records in sprite group
046A1E             0185*   spawn_sprite_from_sprite:
046A1E E5          0186*       push hl ; back up pointer to new sprite defaults
046A1F CD 0C 6A 04 0187*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
046A23 E1          0188*       pop hl ; restore pointer to new sprite defaults
046A24 D0          0189*       ret nc ; no carry means no free sprite slots, so we go home
046A25             0190*   ; copy default settings to new sprite
046A25 DD E5       0191*       push ix ; back up pointer to new sprite record
046A27 ED 32 16    0192*       lea ix,ix+sprite_definitions ; bump pointer to copy to
046A2A DD E5       0193*       push ix ; pointer to default sprite settings
046A2C D1          0194*       pop de ; address to copy to
046A2D 01 2A 00 00 0195*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
046A31 ED B0       0196*       ldir ; copies defaults to new sprite record
046A33 DD E1       0197*       pop ix ; restore pointer to new sprite record
046A35             0198*   ; copy sprite position, velocity and orientation from existing sprite
046A35 FD 2A 65 69 0199*       ld iy,(table_pointer) ; get existing sprite record
       04          
046A3A FD 27 01    0200*       ld hl,(iy+sprite_x)
046A3D DD 2F 01    0201*       ld (ix+sprite_x),hl
046A40 FD 27 04    0202*       ld hl,(iy+sprite_y)
046A43 DD 2F 04    0203*       ld (ix+sprite_y),hl
046A46             0204*   ; return to caller
046A46 DD CB 16 FE 0205*       set 7,(ix+sprite_type) ; set just spawned flag
046A4A DD CB 1D F6 0206*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
046A4E 37          0207*       scf ; set carry flag to indicate success
046A4F C9          0208*       ret
046A50             0209*   ; end spawn_sprite_from_sprite
046A50             0210*   
046A50             0211*   ; change an existing sprite to a new type, keeping its position and velocity the same
046A50             0212*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
046A50             0213*   ;         ix = pointer to sprite group, b = number of records in sprite group
046A50             0214*   alter_sprite:
046A50 E5          0215*       push hl ; back up pointer to new sprite defaults
046A51 CD 0C 6A 04 0216*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
046A55 E1          0217*       pop hl ; restore pointer to new sprite defaults
046A56 D0          0218*       ret nc ; no carry means no free sprite slots, so we go home
046A57             0219*   ; copy default settings to new sprite
046A57 DD E5       0220*       push ix ; back up pointer to new sprite record
046A59 ED 32 16    0221*       lea ix,ix+sprite_definitions ; bump pointer to copy to
046A5C DD E5       0222*       push ix ; pointer to default sprite settings
046A5E D1          0223*       pop de ; address to copy to
046A5F 01 2A 00 00 0224*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
046A63 ED B0       0225*       ldir ; copies defaults to new sprite record
046A65 DD E1       0226*       pop ix ; restore pointer to new sprite record
046A67             0227*   ; copy sprite position, velocity and orientation from existing sprite
046A67 FD 2A 65 69 0228*       ld iy,(table_pointer) ; get existing sprite record
       04          
046A6C FD 27 01    0229*       ld hl,(iy+sprite_x)
046A6F DD 2F 01    0230*       ld (ix+sprite_x),hl
046A72 FD 27 04    0231*       ld hl,(iy+sprite_y)
046A75 DD 2F 04    0232*       ld (ix+sprite_y),hl
046A78             0233*   ; return to caller
046A78 37          0234*       scf ; set carry flag to indicate success
046A79             0235*   ; end alter_sprite
046A79             0236*   
046A79             0237*   ; call the behavior subroutines for a specified sprite group
046A79             0238*   ; inputs: iy = pointer to sprite group, b = number of records in sprite group
046A79             0239*   move_sprite_group:
046A79 C5          0240*       push bc ; backup loop counter
046A7A FD E5       0241*       push iy ; backup table pointer
046A7C             0242*   @move_loop:
046A7C FD 22 65 69 0243*       ld (table_pointer),iy ; update table pointer
       04          
046A81 C5          0244*       push bc ; backup loop counter
046A82             0245*   ; check top bit of sprite_type to see if sprite is just spawned
046A82 FD CB 16 7E 0246*       bit 7,(iy+sprite_type)
046A86 C2 B4 6A 04 0247*       jp nz,@next_record ; if just spawned, skip to next record
046A8A             0248*   ; check sprite_just_died bit
046A8A FD CB 1D 7E 0249*       bit sprite_just_died,(iy+sprite_collisions)
046A8E C2 EB 6A 04 0250*       jp nz,@sprite_died ; if just died, deactivate sprite
046A92             0251*   ; check sprite_alive bit to see if sprite is active
046A92 FD CB 1D 76 0252*       bit sprite_alive,(iy+sprite_collisions)
046A96 CA B4 6A 04 0253*       jp z,@next_record ; ... skip to next record
046A9A             0254*   ; otherwise move the sprite
046A9A FD 27 1A    0255*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
046A9D             0256*       CALL_HL ; run the behavior subroutine
046A9D 01 A3 6A 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
046AA1 C5          0002*M1     push bc ; which constitutes the return address
046AA2 E9          0003*M1     jp (hl) ; Jump to the address in HL
046AA3             0004*M1 @@:
046AA3 FD 7E 00    0257*       ld a,(iy+sprite_id) ; get spriteId
046AA6 CD 00 1F 04 0258*       call vdu_sprite_select ; select sprite
046AAA FD 07 01    0259*       ld bc,(iy+sprite_x)
046AAD FD 17 04    0260*       ld de,(iy+sprite_y)
046AB0 CD CC 1F 04 0261*       call vdu_sprite_move_abs168
046AB4             0262*   ; fall through to @next_record
046AB4             0263*   @next_record:
046AB4 ED 33 40    0264*       lea iy,iy+table_record_size
046AB7 AF          0265*       xor a ; clears carry flag
046AB8 32 68 69 04 0266*       ld (sprite_screen_edge),a ; clear screen edge collision flag
046ABC C1          0267*       pop bc ; get back our loop counter
046ABD 10 BD       0268*       djnz @move_loop ; loop until we've checked all the records
046ABF             0269*   ; reset all just spawned flags
046ABF FD E1       0270*       pop iy ; get back table pointer
046AC1 C1          0271*       pop bc ; get back loop counter
046AC2             0272*   @reset_just_spawned:
046AC2 C5          0273*       push bc ; back up loop counter
046AC3 FD CB 16 7E 0274*       bit 7,(iy+sprite_type) ; check if just spawned
046AC7 CA E4 6A 04 0275*       jp z,@F
046ACB FD CB 16 BE 0276*       res 7,(iy+sprite_type) ; clear just spawned flag
046ACF FD 7E 00    0277*       ld a,(iy+sprite_id)
046AD2 CD 00 1F 04 0278*       call vdu_sprite_select
046AD6 FD 07 01    0279*       ld bc,(iy+sprite_x)
046AD9 FD 17 04    0280*       ld de,(iy+sprite_y)
046ADC CD CC 1F 04 0281*       call vdu_sprite_move_abs168
046AE0 CD 76 1F 04 0282*       call vdu_sprite_show
046AE4             0283*   @@:
046AE4 ED 33 40    0284*       lea iy,iy+table_record_size
046AE7 C1          0285*       pop bc ; get back loop counter
046AE8 10 D8       0286*       djnz @reset_just_spawned
046AEA C9          0287*       ret
046AEB             0288*   @sprite_died:
046AEB CD AE 69 04 0289*       call table_deactivate_sprite
046AEF C3 B4 6A 04 0290*       jp @next_record
046AF3             0291*   ; end move_sprite_group
046AF3             0292*   
046AF3             0293*   ; compute a sprite's new position based on its component x,y velocities
046AF3             0294*   ; with screen boundary checking and update its sprite table record accordingly
046AF3             0295*   ; inputs: table_pointer set to sprite record
046AF3             0296*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
046AF3             0297*   ; destroys: everything
046AF3             0298*   ; note: actual rendering of sprite must be handled by caller
046AF3             0299*   move_sprite:
046AF3 FD 2A 65 69 0300*       ld iy,(table_pointer)
       04          
046AF8             0301*   ; x-axis movement
046AF8 FD 27 01    0302*       ld hl,(iy+sprite_x)
046AFB FD 17 07    0303*       ld de,(iy+sprite_xvel)
046AFE 19          0304*       add hl,de
046AFF FD 2F 01    0305*       ld (iy+sprite_x),hl
046B02             0306*   ; y-axis movement
046B02 FD 27 04    0307*       ld hl,(iy+sprite_y)
046B05 FD 17 0A    0308*       ld de,(iy+sprite_yvel)
046B08 19          0309*       add hl,de
046B09 FD 2F 04    0310*       ld (iy+sprite_y),hl
046B0C             0311*   ; detect screen edge collisions
046B0C AF          0312*       xor a ; reset screen edge collision flag and clear carry
046B0D 32 68 69 04 0313*       ld (sprite_screen_edge),a
046B11             0314*   ; y-axis first since we already have it in hl
046B11 11 00 00 00 0315*       ld de,-sprite_top*256
046B15 ED 5A       0316*       adc hl,de
046B17 FA 41 6B 04 0317*       jp m,@top
046B1B ED 52       0318*       sbc hl,de ; hl back to original value
046B1D 11 00 91 FE 0319*       ld de,-sprite_bottom*256
046B21 ED 5A       0320*       adc hl,de
046B23 F2 4B 6B 04 0321*       jp p,@bottom
046B27             0322*   @xaxis:
046B27 FD 27 01    0323*       ld hl,(iy+sprite_x)
046B2A 11 00 00 00 0324*       ld de,-sprite_left*256
046B2E ED 5A       0325*       adc hl,de
046B30 FA 66 6B 04 0326*       jp m,@left
046B34 ED 52       0327*       sbc hl,de ; hl back to original value
046B36 11 00 11 FF 0328*       ld de,-sprite_right*256
046B3A ED 5A       0329*       adc hl,de
046B3C F2 74 6B 04 0330*       jp p,@right
046B40             0331*   ; no edge collisions so go home
046B40 C9          0332*       ret
046B41             0333*   @top:
046B41 3E 08       0334*       ld a,collide_top
046B43 21 00 00 00 0335*       ld hl,sprite_top*256
046B47 C3 51 6B 04 0336*       jp @collide_y
046B4B             0337*   @bottom:
046B4B 3E 04       0338*       ld a,collide_bottom
046B4D 21 00 6F 01 0339*       ld hl,sprite_bottom*256
046B51             0340*   @collide_y:
046B51 32 68 69 04 0341*       ld (sprite_screen_edge),a
046B55 FD 2F 04    0342*       ld (iy+sprite_y),hl
046B58             0343*   ; reverse y-axis velocity
046B58 FD 27 0A    0344*       ld hl,(iy+sprite_yvel)
046B5B CD 16 09 04 0345*       call neg_hlu
046B5F FD 2F 0A    0346*       ld (iy+sprite_yvel),hl
046B62             0347*   ; go check for x-axis collisions
046B62 C3 27 6B 04 0348*       jp @xaxis
046B66             0349*   @left:
046B66 3A 68 69 04 0350*       ld a,(sprite_screen_edge)
046B6A F6 02       0351*       or a,collide_left
046B6C 21 00 00 00 0352*       ld hl,sprite_left*256
046B70 C3 7E 6B 04 0353*       jp @collide_x
046B74             0354*   @right:
046B74 3A 68 69 04 0355*       ld a,(sprite_screen_edge)
046B78 F6 01       0356*       or a,collide_right
046B7A 21 00 EF 00 0357*       ld hl,sprite_right*256
046B7E             0358*   @collide_x:
046B7E 32 68 69 04 0359*       ld (sprite_screen_edge),a
046B82 FD 2F 01    0360*       ld (iy+sprite_x),hl
046B85             0361*   ; reverse x-axis velocity
046B85 FD 27 07    0362*       ld hl,(iy+sprite_xvel)
046B88 CD 16 09 04 0363*       call neg_hlu
046B8C FD 2F 07    0364*       ld (iy+sprite_xvel),hl
046B8F             0365*   ; final collision flag to a and return
046B8F 3A 68 69 04 0366*       ld a,(sprite_screen_edge)
046B93 C9          0367*       ret
046B94             0368*   ; end move_sprite
046B94             0369*   
046B94             0370*   sprite_compute_velocities:
046B94 FD 2A 65 69 0371*       ld iy,(table_pointer)
       04          
046B99 FD 17 0D    0372*       ld de,(iy+sprite_vel)
046B9C CD A0 0B 04 0373*       call polar_to_cartesian
046BA0 FD 2A 65 69 0374*       ld iy,(table_pointer)
       04          
046BA5 FD 0F 07    0375*       ld (iy+sprite_xvel),bc ; save x-velocity component
046BA8 FD 1F 0A    0376*       ld (iy+sprite_yvel),de ; save y-velocity component
046BAB C9          0377*       ret
046BAC             0378*   ; end sprite_compute_velocities
046BAC             0379*   
046BAC             0380*   ; compute animation frame based on sprite_animation and sprite_heading
046BAC             0381*   ; inputs: table_pointer set to sprite record
046BAC             0382*   ; outputs: a, sprite_frame set to animation frame
046BAC             0383*   ; destroys: a,hl
046BAC             0384*   sprite_frame_heading_animation:
046BAC FD 7E 11    0385*       ld a,(iy+sprite_heading+1) ; we want the integer portion
046BAF CB 3F       0386*       srl a ; divide integer portion by 8
046BB1 CB 3F       0387*       srl a
046BB3 CB 3F       0388*       srl a
046BB5 FD 66 22    0389*       ld h,(iy+sprite_animation)
046BB8 2E 20       0390*       ld l,32 ; 32 orientation frames per animation
046BBA ED 6C       0391*       mlt hl ; hl = offset from base animation
046BBC 85          0392*       add a,l ; modulo256 since sprite_frame is only 1 byte
046BBD FD 77 28    0393*       ld (iy+sprite_frame),a
046BC0 C9          0394*       ret
046BC1             0395*   ; end sprite_frame_heading_animation
046BC1             0396*   
046BC1             0397*   ; compute animation frame based on sprite_heading
046BC1             0398*   ; inputs: table_pointer set to sprite record
046BC1             0399*   ; outputs: a, sprite_frame set to animation frame
046BC1             0400*   ; destroys: a,hl
046BC1             0401*   sprite_frame_heading:
046BC1 FD 7E 11    0402*       ld a,(iy+sprite_heading+1) ; we want the integer portion
046BC4 CB 3F       0403*       srl a ; divide integer portion by 8
046BC6 CB 3F       0404*       srl a
046BC8 CB 3F       0405*       srl a
046BCA FD 77 28    0406*       ld (iy+sprite_frame),a
046BCD C9          0407*       ret
046BCE             0408*   ; end sprite_frame_heading
046BCE             0409*   
046BCE             0410*   ; load a sprite with animation bitmaps
046BCE             0411*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
046BCE             0412*   sprite_load_frames:
046BCE             0413*   ; back up input parameters
046BCE E5          0414*       push hl ; base bufferId
046BCF C5          0415*       push bc ; bc = number of frames
046BD0 CD 13 1F 04 0416*       call vdu_sprite_clear_frames
046BD4 C1          0417*       pop bc ; bc = number of frames
046BD5 E1          0418*       pop hl ; = base bufferId
046BD6             0419*   @load_frames:
046BD6 C5          0420*       push bc ; back up loop counter
046BD7 E5          0421*       push hl ; back up base bufferId
046BD8 CD 55 20 04 0422*       call vdu_sprite_add_buff
046BDC E1          0423*       pop hl ; restore base bufferId
046BDD 23          0424*       inc hl ; bump it to the next frame
046BDE             0425*   ; decrement loop counter
046BDE C1          0426*       pop bc
046BDF 0B          0427*       dec bc
046BE0 79          0428*       ld a,c
046BE1 B7          0429*       or a
046BE2 C2 D6 6B 04 0430*       jp nz,@load_frames
046BE6 78          0431*       ld a,b
046BE7 B7          0432*       or a
046BE8 C2 D6 6B 04 0433*       jp nz,@load_frames
046BEC C9          0434*       ret
046BED             0435*   ; end sprite_load_frames
046BED             0436*   
046BED             0437*   
046BED             0438*   
046BED             0439*   
046BED             0440*   dump_sprite_record:
046BED             0441*       ; call vdu_home_cursor
046BED CD 00 01 04 0442*       call printInline
046BF1 69 64 20 20 0443*       asciz "id  : "
       3A 20 00    
046BF8 DD 7E 00    0444*       ld a,(ix+sprite_id)
046BFB CD 4A 01 04 0445*       call printHexA
046BFF             0446*   
046BFF CD 00 01 04 0447*       call printInline
046C03 0D 0A 78 20 0448*       asciz "\r\nx   :"
       20 20 3A 00 
046C0B DD 27 01    0449*       ld hl,(ix+sprite_x)
046C0E CD 2B 03 04 0450*       call print_s168_hl
046C12             0451*   
046C12 CD 00 01 04 0452*       call printInline
046C16 0D 0A 79 20 0453*       asciz "\r\ny   :"
       20 20 3A 00 
046C1E DD 27 04    0454*       ld hl,(ix+sprite_y)
046C21 CD 2B 03 04 0455*       call print_s168_hl
046C25             0456*   
046C25 CD 00 01 04 0457*       call printInline
046C29 0D 0A 78 76 0458*       asciz "\r\nxv  :"
       20 20 3A 00 
046C31 DD 27 07    0459*       ld hl,(ix+sprite_xvel)
046C34 CD 2B 03 04 0460*       call print_s168_hl
046C38             0461*   
046C38 CD 00 01 04 0462*       call printInline
046C3C 0D 0A 79 76 0463*       asciz "\r\nyv  :"
       20 20 3A 00 
046C44 DD 27 0A    0464*       ld hl,(ix+sprite_yvel)
046C47 CD 2B 03 04 0465*       call print_s168_hl
046C4B             0466*   
046C4B CD 00 01 04 0467*       call printInline
046C4F 0D 0A 76 20 0468*       asciz "\r\nv   :"
       20 20 3A 00 
046C57 DD 27 0D    0469*       ld hl,(ix+sprite_vel)
046C5A CD 2B 03 04 0470*       call print_s168_hl
046C5E             0471*   
046C5E CD 00 01 04 0472*       call printInline
046C62 0D 0A 68 64 0473*       asciz "\r\nhdg :"
       67 20 3A 00 
046C6A DD 27 10    0474*       ld hl,(ix+sprite_heading)
046C6D CD 2B 03 04 0475*       call print_s168_hl
046C71             0476*   
046C71 CD 00 01 04 0477*       call printInline
046C75 0D 0A 6F 72 0478*       asciz "\r\nori :"
       69 20 3A 00 
046C7D DD 27 13    0479*       ld hl,(ix+sprite_orientation)
046C80 CD 2B 03 04 0480*       call print_s168_hl
046C84             0481*   
046C84 CD 00 01 04 0482*       call printInline
046C88 0D 0A 74 79 0483*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
046C91 DD 7E 16    0484*       ld a,(ix+sprite_type)
046C94 CD 4A 01 04 0485*       call printHexA
046C98             0486*   
046C98 CD 00 01 04 0487*       call printInline
046C9C 0D 0A 42 49 0488*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
046CA5 DD 27 17    0489*       ld hl,(ix+sprite_base_bufferId)
046CA8 CD 27 01 04 0490*       call printHex24
046CAC             0491*   
046CAC CD 00 01 04 0492*       call printInline
046CB0 0D 0A 6D 50 0493*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
046CB9 DD 27 1A    0494*       ld hl,(ix+sprite_move_program)
046CBC CD 27 01 04 0495*       call printHex24
046CC0             0496*   
046CC0 CD 00 01 04 0497*       call printInline
046CC4 0D 0A 63 6F 0498*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
046CCD DD 7E 1D    0499*       ld a,(ix+sprite_collisions)
046CD0 CD A8 03 04 0500*       call printBin8
046CD4             0501*   
046CD4 CD 00 01 04 0502*       call printInline
046CD8 0D 0A 73 7A 0503*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
046CE1 DD 7E 1E    0504*       ld a,(ix+sprite_dim_x)
046CE4 CD 4A 01 04 0505*       call printHexA
046CE8             0506*   
046CE8 CD 00 01 04 0507*       call printInline
046CEC 0D 0A 73 7A 0508*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
046CF5 DD 7E 1F    0509*       ld a,(ix+sprite_dim_y)
046CF8 CD 4A 01 04 0510*       call printHexA
046CFC             0511*   
046CFC CD 00 01 04 0512*       call printInline
046D00 0D 0A 23 6F 0513*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
046D09 DD 7E 20    0514*       ld a,(ix+sprite_num_orientations)
046D0C CD 4A 01 04 0515*       call printHexA
046D10             0516*   
046D10 CD 00 01 04 0517*       call printInline
046D14 0D 0A 23 61 0518*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
046D1D DD 7E 21    0519*       ld a,(ix+sprite_num_animations)
046D20 CD 4A 01 04 0520*       call printHexA
046D24             0521*   
046D24 CD 00 01 04 0522*       call printInline
046D28 0D 0A 61 6E 0523*       asciz "\r\nani : "
       69 20 3A 20 
       00          
046D31 DD 7E 22    0524*       ld a,(ix+sprite_animation)
046D34 CD 4A 01 04 0525*       call printHexA
046D38             0526*   
046D38 CD 00 01 04 0527*       call printInline
046D3C 0D 0A 61 6E 0528*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
046D45 DD 7E 23    0529*       ld a,(ix+sprite_animation_timer)
046D48 CD 4A 01 04 0530*       call printHexA
046D4C             0531*   
046D4C CD 00 01 04 0532*       call printInline
046D50 0D 0A 6D 76 0533*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
046D59 DD 7E 24    0534*       ld a,(ix+sprite_move_timer)
046D5C CD 4A 01 04 0535*       call printHexA
046D60             0536*   
046D60 CD 00 01 04 0537*       call printInline
046D64 0D 0A 6D 76 0538*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
046D6D DD 7E 25    0539*       ld a,(ix+sprite_move_step)
046D70 CD 4A 01 04 0540*       call printHexA
046D74             0541*   
046D74 CD 00 01 04 0542*       call printInline
046D78 0D 0A 70 74 0543*       asciz "\r\npts : "
       73 20 3A 20 
       00          
046D81 DD 7E 26    0544*       ld a,(ix+sprite_points)
046D84 CD 4A 01 04 0545*       call printHexA
046D88             0546*   
046D88 CD 00 01 04 0547*       call printInline
046D8C 0D 0A 64 6D 0548*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
046D95 DD 7E 27    0549*       ld a,(ix+sprite_shield_damage)
046D98 CD 4A 01 04 0550*       call printHexA
046D9C             0551*   
046D9C CD 00 01 04 0552*       call printInline
046DA0 0D 0A 66 72 0553*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
046DA9 DD 7E 28    0554*       ld a,(ix+sprite_frame)
046DAC CD 4A 01 04 0555*       call printHexA
046DB0             0556*   
046DB0             0557*       ; call printNewLine
046DB0             0558*   
046DB0             0559*       ; call waitKeypress
046DB0 C9          0560*       ret
046DB1             0561*   
046DB1             0069    
046DB1 FF FF FF FF 0070        align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
046E00             0071    
046E00             0072    ; --- MAIN PROGRAM FILE ---
046E00 57 65 6C 63 0073    hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
046E1B 4C 6F 61 64 0074    loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
046E29 50 72 65 73 0075    loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
046E44             0076    
046E44             0077    init:
046E44             0078    ; clear all buffers
046E44 CD 2A 1B 04 0079        call vdu_clear_all_buffers
046E48             0080    
046E48             0081    ; print loading ui message
046E48 CD 4B 19 04 0082        call vdu_cls
046E4C 21 6A 20 04 0083        ld hl,loading_ui
046E50 CD 07 01 04 0084        call printString
046E54 CD 50 19 04 0085        call vdu_flip
046E58             0086    ; load UI images
046E58 CD CA 16 04 0087        call load_ui_images
046E5C             0088    
046E5C             0089    ; set up the display
046E5C 3E 08       0090        ld a,8;+128 ; 136   320   240   64    60hz double-buffered
046E5E             0091        ; ld a,20 ;  512   384   64    60hz single-buffered
046E5E CD 14 1A 04 0092        call vdu_set_screen_mode
046E62 AF          0093        xor a
046E63 CD 25 1A 04 0094        call vdu_set_scaling
046E67             0095    
046E67             0096    ; ; enable additional audio channels
046E67             0097    ; 	call vdu_enable_channels
046E67             0098    
046E67             0099    ; set text background color
046E67 3E 9A       0100        ld a,26+128 ; violet
046E69 CD 7C 19 04 0101        call vdu_colour_text
046E6D             0102    
046E6D             0103    ; set text foreground color
046E6D 3E 2F       0104        ld a,47 ; aaaaff lavenderish
046E6F CD 7C 19 04 0105        call vdu_colour_text
046E73             0106    
046E73             0107    ; set gfx bg color
046E73 AF          0108        xor a ; plotting mode 0
046E74 3E 9A       0109        ld a,26+128 ; violet
046E76 CD 8D 19 04 0110        call vdu_gcol
046E7A CD 4B 19 04 0111        call vdu_cls
046E7E             0112    
046E7E             0113    ; set the cursor off
046E7E CD 13 19 04 0114        call vdu_cursor_off
046E82             0115    
046E82             0116    ; VDU 28, left, bottom, right, top: Set text viewport **
046E82             0117    ; MIND THE LITTLE-ENDIANESS
046E82             0118    ; inputs: c=left,b=bottom,e=right,d=top
046E82 0E 00       0119        ld c,0 ; left
046E84 16 00       0120        ld d,0 ; top
046E86 1E 27       0121        ld e,39 ; right
046E88 06 00       0122        ld b,0; bottom
046E8A CD A4 19 04 0123        call vdu_set_txt_viewport
046E8E             0124    
046E8E             0125    ; load sprites
046E8E CD 09 16 04 0126        call img_load_init ; sets up the animated load screen
046E92 CD DD 16 04 0127        call load_sprite_images
046E96             0128    
046E96             0129    ; load tileset_ptrs
046E96 CD EE 16 04 0130        call load_tilesets
046E9A             0131    
046E9A             0132    ; ; load sound effects ; TODO
046E9A             0133    ; 	ld bc,SFX_num_buffers
046E9A             0134    ; 	ld hl,SFX_buffer_id_lut
046E9A             0135    ; 	ld (cur_buffer_id_lut),hl
046E9A             0136    ; 	ld hl,SFX_load_routines_table
046E9A             0137    ; 	ld (cur_load_jump_table),hl
046E9A             0138    ; 	call sfx_load_main
046E9A             0139    
046E9A             0140    ; print loading complete message and wait for user keypress
046E9A CD 4B 19 04 0141        call vdu_cls
046E9E 21 29 6E 04 0142        ld hl,loading_complete
046EA2 CD 07 01 04 0143        call printString
046EA6 CD 50 19 04 0144        call vdu_flip
046EAA CD B8 06 04 0145        call waitKeypress
046EAE             0146    
046EAE             0147    ; set up display for gameplay
046EAE             0148        ; ld a,8
046EAE 3E 14       0149        ld a,20
046EB0 CD 14 1A 04 0150        call vdu_set_screen_mode
046EB4 AF          0151        xor a
046EB5 CD 25 1A 04 0152        call vdu_set_scaling
046EB9 CD 13 19 04 0153        call vdu_cursor_off
046EBD             0154    ; load fonts
046EBD CD 00 15 04 0155    	call fonts_load
046EC1             0156    ; select font
046EC1             0157        ; ld hl,computer_pixel_7_8x16
046EC1 21 02 FA 00 0158        ld hl,amiga_forever_8x8 ; DEBUG
046EC5 3E 01       0159        ld a,1 ; flags
046EC7 CD 00 1D 04 0160        call vdu_font_select
046ECB             0161    ; plot bezel art
046ECB 21 00 00 00 0162        ld hl,BUF_BEZEL_L
046ECF CD 38 1A 04 0163        call vdu_buff_select
046ED3 01 00 00 00 0164        ld bc,0
046ED7 11 00 00 00 0165        ld de,0
046EDB CD 20 1E 04 0166        call vdu_plot_bmp
046EDF 21 01 00 00 0167        ld hl,BUF_BEZEL_R
046EE3 CD 38 1A 04 0168        call vdu_buff_select
046EE7 01 80 01 00 0169        ld bc,384
046EEB 11 00 00 00 0170        ld de,0
046EEF CD 20 1E 04 0171        call vdu_plot_bmp
046EF3             0172    ; set gfx origin and viewport to playing field window
046EF3 01 80 00 00 0173        ld bc,origin_left
046EF7 11 00 00 00 0174        ld de,origin_top
046EFB CD D0 19 04 0175        call vdu_set_gfx_origin
046EFF 01 00 00 00 0176        ld bc,field_left
046F03 11 00 00 00 0177        ld de,field_top
046F07 DD 21 FF 00 0178        ld ix,field_right
       00          
046F0C FD 21 7F 01 0179        ld iy,field_bottom
       00          
046F11 CD EB 19 04 0180        call vdu_set_gfx_viewport
046F15             0181    ; set background color
046F15 3E 9A       0182        ld a,26+128 ; violet
046F17 CD 8D 19 04 0183        call vdu_gcol
046F1B CD 5E 19 04 0184        call vdu_clg
046F1F             0185    ; VDU 28, left, bottom, right, top: Set text viewport **
046F1F 0E 00       0186        ld c,0 ; left
046F21 16 00       0187        ld d,0 ; top
046F23 1E 3E       0188        ld e,62 ; right
046F25 06 30       0189        ld b,48; bottom
046F27 CD A4 19 04 0190        call vdu_set_txt_viewport
046F2B             0191    
046F2B             0192    ; initialize the global timestamp
046F2B CD F9 17 04 0193        call timestamp_tick
046F2F             0194    
046F2F             0195    ; done with init
046F2F C9          0196        ret
046F30             0197    
046F30             0198    main:
046F30             0199    ; start a new game
046F30 CD 17 5D 04 0200        call game_initialize
046F34             0201    
046F34             0202    main_loop:
046F34             0203    ; update the global timestamp
046F34 CD F9 17 04 0204        call timestamp_tick
046F38             0205    ; do gamestate logic
046F38 CD 03 5D 04 0206        call do_game
046F3C             0207    
046F3C             0208    ; ; DEBUG
046F3C             0209    ;     CALL DEBUG_PRINT
046F3C             0210    ;     ; CALL DEBUG_DUMP_PLAYER_RECORD
046F3C             0211    ;     CALL DEBUG_PRINT_TILE_TABLE
046F3C             0212    ;     CALL DEBUG_PRINT_TILE_STACK
046F3C             0213    ;     ; CALL DEBUG_WAITKEYPRESS
046F3C             0214    ; ; END DEBUG
046F3C             0215    
046F3C             0216    ; wait for the next vblank mitigate flicker and for loop timing
046F3C CD BF 19 04 0217        call vdu_vblank
046F40             0218        ; call vdu_vblank ; DEBUG
046F40             0219        ; call vdu_vblank ; DEBUG
046F40             0220    
046F40             0221    ; poll keyboard for escape keypress
046F40 3E 08       0222        ld a, $08 ; code to send to MOS
046F42 5B CF       0223        rst.lil $08 ; get IX pointer to System Variables
046F44 DD 7E 05    0224        ld a, (ix + $05) ; get ASCII code of key pressed
046F47 FE 1B       0225        cp 27 ; check if 27 (ascii code for ESC)
046F49 CA 51 6F 04 0226        jp z, main_end ; if pressed, jump to exit
046F4D             0227    
046F4D             0228    ; escape not pressed so loop
046F4D C3 34 6F 04 0229        jp main_loop
046F51             0230    
046F51             0231    main_end:
046F51 CD 05 19 04 0232        call vdu_cursor_on
046F55 C9          0233        ret
046F56             0234    
046F56             0235    DEBUG_PRINT:
046F56             0236        PUSH_ALL
046F56 08          0001M1      ex af,af'
046F57 D9          0002M1      exx
046F58 F5          0003M1      push af
046F59 E5          0004M1      push hl
046F5A C5          0005M1      push bc
046F5B D5          0006M1      push de
046F5C             0007M1  
046F5C 08          0008M1      ex af,af'
046F5D D9          0009M1      exx
046F5E F5          0010M1      push af
046F5F E5          0011M1      push hl
046F60 C5          0012M1      push bc
046F61 D5          0013M1      push de
046F62 DD E5       0014M1      push ix
046F64 FD E5       0015M1      push iy
046F66 0E 00       0237        ld c,0 ; X
046F68 06 00       0238        ld b,0 ; Y
046F6A CD 37 19 04 0239        call vdu_move_cursor
046F6E             0240        POP_ALL
046F6E FD E1       0001M1      pop iy
046F70 DD E1       0002M1      pop ix
046F72 D1          0003M1      pop de
046F73 C1          0004M1      pop bc
046F74 E1          0005M1      pop hl
046F75 F1          0006M1      pop af
046F76 08          0007M1      ex af,af'
046F77 D9          0008M1      exx
046F78             0009M1  
046F78 D1          0010M1      pop de
046F79 C1          0011M1      pop bc
046F7A E1          0012M1      pop hl
046F7B F1          0013M1      pop af
046F7C 08          0014M1      ex af,af'
046F7D D9          0015M1      exx
046F7E             0241        PUSH_ALL
046F7E 08          0001M1      ex af,af'
046F7F D9          0002M1      exx
046F80 F5          0003M1      push af
046F81 E5          0004M1      push hl
046F82 C5          0005M1      push bc
046F83 D5          0006M1      push de
046F84             0007M1  
046F84 08          0008M1      ex af,af'
046F85 D9          0009M1      exx
046F86 F5          0010M1      push af
046F87 E5          0011M1      push hl
046F88 C5          0012M1      push bc
046F89 D5          0013M1      push de
046F8A DD E5       0014M1      push ix
046F8C FD E5       0015M1      push iy
046F8E CD 57 06 04 0242        call dumpFlags
046F92             0243        POP_ALL
046F92 FD E1       0001M1      pop iy
046F94 DD E1       0002M1      pop ix
046F96 D1          0003M1      pop de
046F97 C1          0004M1      pop bc
046F98 E1          0005M1      pop hl
046F99 F1          0006M1      pop af
046F9A 08          0007M1      ex af,af'
046F9B D9          0008M1      exx
046F9C             0009M1  
046F9C D1          0010M1      pop de
046F9D C1          0011M1      pop bc
046F9E E1          0012M1      pop hl
046F9F F1          0013M1      pop af
046FA0 08          0014M1      ex af,af'
046FA1 D9          0015M1      exx
046FA2             0244        PUSH_ALL
046FA2 08          0001M1      ex af,af'
046FA3 D9          0002M1      exx
046FA4 F5          0003M1      push af
046FA5 E5          0004M1      push hl
046FA6 C5          0005M1      push bc
046FA7 D5          0006M1      push de
046FA8             0007M1  
046FA8 08          0008M1      ex af,af'
046FA9 D9          0009M1      exx
046FAA F5          0010M1      push af
046FAB E5          0011M1      push hl
046FAC C5          0012M1      push bc
046FAD D5          0013M1      push de
046FAE DD E5       0014M1      push ix
046FB0 FD E5       0015M1      push iy
046FB2 CD B9 04 04 0245        call dumpRegistersHex
046FB6             0246        ; call waitKeypress
046FB6             0247        POP_ALL
046FB6 FD E1       0001M1      pop iy
046FB8 DD E1       0002M1      pop ix
046FBA D1          0003M1      pop de
046FBB C1          0004M1      pop bc
046FBC E1          0005M1      pop hl
046FBD F1          0006M1      pop af
046FBE 08          0007M1      ex af,af'
046FBF D9          0008M1      exx
046FC0             0009M1  
046FC0 D1          0010M1      pop de
046FC1 C1          0011M1      pop bc
046FC2 E1          0012M1      pop hl
046FC3 F1          0013M1      pop af
046FC4 08          0014M1      ex af,af'
046FC5 D9          0015M1      exx
046FC6 C9          0248        ret
046FC7             0249    
046FC7             0250    DEBUG_PRINT_TILE_TABLE:
046FC7             0251        PUSH_ALL
046FC7 08          0001M1      ex af,af'
046FC8 D9          0002M1      exx
046FC9 F5          0003M1      push af
046FCA E5          0004M1      push hl
046FCB C5          0005M1      push bc
046FCC D5          0006M1      push de
046FCD             0007M1  
046FCD 08          0008M1      ex af,af'
046FCE D9          0009M1      exx
046FCF F5          0010M1      push af
046FD0 E5          0011M1      push hl
046FD1 C5          0012M1      push bc
046FD2 D5          0013M1      push de
046FD3 DD E5       0014M1      push ix
046FD5 FD E5       0015M1      push iy
046FD7 CD 1C 01 04 0252        call printNewLine
046FDB DD 21 00 60 0253        ld ix,tile_stack
       04          
046FE0 DD 37 00    0254        ld ix,(ix)
046FE3 CD 3C 64 04 0255        call dump_tile_record
046FE7 CD 1C 01 04 0256        call printNewLine
046FEB             0257        POP_ALL
046FEB FD E1       0001M1      pop iy
046FED DD E1       0002M1      pop ix
046FEF D1          0003M1      pop de
046FF0 C1          0004M1      pop bc
046FF1 E1          0005M1      pop hl
046FF2 F1          0006M1      pop af
046FF3 08          0007M1      ex af,af'
046FF4 D9          0008M1      exx
046FF5             0009M1  
046FF5 D1          0010M1      pop de
046FF6 C1          0011M1      pop bc
046FF7 E1          0012M1      pop hl
046FF8 F1          0013M1      pop af
046FF9 08          0014M1      ex af,af'
046FFA D9          0015M1      exx
046FFB C9          0258        ret
046FFC             0259    ; end DEBUG_PRINT_TILE_TABLE
046FFC             0260    
046FFC             0261    DEBUG_PRINT_TABLE:
046FFC             0262        PUSH_ALL
046FFC 08          0001M1      ex af,af'
046FFD D9          0002M1      exx
046FFE F5          0003M1      push af
046FFF E5          0004M1      push hl
047000 C5          0005M1      push bc
047001 D5          0006M1      push de
047002             0007M1  
047002 08          0008M1      ex af,af'
047003 D9          0009M1      exx
047004 F5          0010M1      push af
047005 E5          0011M1      push hl
047006 C5          0012M1      push bc
047007 D5          0013M1      push de
047008 DD E5       0014M1      push ix
04700A FD E5       0015M1      push iy
04700C             0263        ; call vdu_home_cursor
04700C 0E 00       0264        ld c,0
04700E 06 00       0265        ld b,0
047010 CD 37 19 04 0266        call vdu_move_cursor
047014             0267    
047014             0268        ; ld a,(player_weapons_count)
047014             0269        ; call printHexA
047014             0270        ; call printNewLine
047014             0271    
047014             0272        ; LIST_FIELD sprite_move_program,3 ; DEBUG
047014             0273        ; LIST_FIELD sprite_type,1 ; DEBUG
047014             0274    
047014 DD 21 00 80 0275        ld ix,player_weapons_begin
       04          
047019 CD ED 6B 04 0276        call dump_sprite_record
04701D CD 1C 01 04 0277        call printNewLine
047021 CD 1C 01 04 0278        call printNewLine
047025             0279    
047025 ED 32 40    0280        lea ix,ix+table_record_size
047028 CD ED 6B 04 0281        call dump_sprite_record
04702C CD 1C 01 04 0282        call printNewLine
047030 CD 1C 01 04 0283        call printNewLine
047034             0284    
047034 ED 32 40    0285        lea ix,ix+table_record_size
047037 CD ED 6B 04 0286        call dump_sprite_record
04703B CD 1C 01 04 0287        call printNewLine
04703F CD 1C 01 04 0288        call printNewLine
047043             0289    
047043 ED 32 40    0290        lea ix,ix+table_record_size
047046 CD ED 6B 04 0291        call dump_sprite_record
04704A CD 1C 01 04 0292        call printNewLine
04704E CD 1C 01 04 0293        call printNewLine
047052             0294    
047052             0295        ; ld ix,player_begin
047052             0296        ; call dump_sprite_record
047052             0297    
047052             0298        ; call waitKeypress
047052             0299        POP_ALL
047052 FD E1       0001M1      pop iy
047054 DD E1       0002M1      pop ix
047056 D1          0003M1      pop de
047057 C1          0004M1      pop bc
047058 E1          0005M1      pop hl
047059 F1          0006M1      pop af
04705A 08          0007M1      ex af,af'
04705B D9          0008M1      exx
04705C             0009M1  
04705C D1          0010M1      pop de
04705D C1          0011M1      pop bc
04705E E1          0012M1      pop hl
04705F F1          0013M1      pop af
047060 08          0014M1      ex af,af'
047061 D9          0015M1      exx
047062 C9          0300        RET
047063             0301    
047063             0302    DEBUG_WAITKEYPRESS:
047063             0303        PUSH_ALL
047063 08          0001M1      ex af,af'
047064 D9          0002M1      exx
047065 F5          0003M1      push af
047066 E5          0004M1      push hl
047067 C5          0005M1      push bc
047068 D5          0006M1      push de
047069             0007M1  
047069 08          0008M1      ex af,af'
04706A D9          0009M1      exx
04706B F5          0010M1      push af
04706C E5          0011M1      push hl
04706D C5          0012M1      push bc
04706E D5          0013M1      push de
04706F DD E5       0014M1      push ix
047071 FD E5       0015M1      push iy
047073 CD B8 06 04 0304        call waitKeypress
047077             0305        POP_ALL
047077 FD E1       0001M1      pop iy
047079 DD E1       0002M1      pop ix
04707B D1          0003M1      pop de
04707C C1          0004M1      pop bc
04707D E1          0005M1      pop hl
04707E F1          0006M1      pop af
04707F 08          0007M1      ex af,af'
047080 D9          0008M1      exx
047081             0009M1  
047081 D1          0010M1      pop de
047082 C1          0011M1      pop bc
047083 E1          0012M1      pop hl
047084 F1          0013M1      pop af
047085 08          0014M1      ex af,af'
047086 D9          0015M1      exx
047087 C9          0306        RET
047088             0307    
047088             0308    DEBUG_PRINT_FIELDS:
047088             0309        ; PUSH_ALL
047088 01 00 00 00 0310        ld bc,0
04708C 4F          0311        ld c,a
04708D DD 21 00 80 0312        ld ix,table_base
       04          
047092 DD 09       0313        add ix,bc
047094 06 0C       0314        ld b,table_num_records
047096             0315    @@:
047096 DD E5       0316        push ix
047098 E1          0317        pop hl
047099 C5          0318        push bc ; save loop counter
04709A 3E 01       0319        ld a,1 ; print one byte
04709C CD BD 06 04 0320        call dumpMemoryHex
0470A0 ED 32 40    0321        lea ix,ix+table_record_size
0470A3 C1          0322        pop bc ; restore loop counter
0470A4 10 F0       0323        djnz @b
0470A6             0324        ; POP_ALL
0470A6 C9          0325        ret
0470A7             0326    
0470A7             0327    DEBUG_PRINT_TILE_STACK:
0470A7             0328        PUSH_ALL
0470A7 08          0001M1      ex af,af'
0470A8 D9          0002M1      exx
0470A9 F5          0003M1      push af
0470AA E5          0004M1      push hl
0470AB C5          0005M1      push bc
0470AC D5          0006M1      push de
0470AD             0007M1  
0470AD 08          0008M1      ex af,af'
0470AE D9          0009M1      exx
0470AF F5          0010M1      push af
0470B0 E5          0011M1      push hl
0470B1 C5          0012M1      push bc
0470B2 D5          0013M1      push de
0470B3 DD E5       0014M1      push ix
0470B5 FD E5       0015M1      push iy
0470B7 CD 1C 01 04 0329        call printNewLine
0470BB CD 1C 01 04 0330        call printNewLine
0470BF 2A 03 63 04 0331        ld hl,(tile_stack_pointer)
0470C3 CD 64 01 04 0332        call printHexUHL
0470C7 CD 1C 01 04 0333        call printNewLine
0470CB 3A 09 63 04 0334        ld a,(num_active_tiles)
0470CF CD 4A 01 04 0335        call printHexA
0470D3 CD 1C 01 04 0336        call printNewLine
0470D7 DD 21 00 60 0337        ld ix,tile_stack
       04          
0470DC 06 08       0338        ld b,8
0470DE             0339    @loop:
0470DE C5          0340        push bc
0470DF DD 27 00    0341        ld hl,(ix)
0470E2 CD 64 01 04 0342        call printHexUHL
0470E6 CD 1C 01 04 0343        call printNewLine
0470EA ED 32 03    0344        lea ix,ix+3
0470ED C1          0345        pop bc
0470EE 10 EE       0346        djnz @loop
0470F0             0347        POP_ALL
0470F0 FD E1       0001M1      pop iy
0470F2 DD E1       0002M1      pop ix
0470F4 D1          0003M1      pop de
0470F5 C1          0004M1      pop bc
0470F6 E1          0005M1      pop hl
0470F7 F1          0006M1      pop af
0470F8 08          0007M1      ex af,af'
0470F9 D9          0008M1      exx
0470FA             0009M1  
0470FA D1          0010M1      pop de
0470FB C1          0011M1      pop bc
0470FC E1          0012M1      pop hl
0470FD F1          0013M1      pop af
0470FE 08          0014M1      ex af,af'
0470FF D9          0015M1      exx
047100 C9          0348        ret
047101             0349    
047101             0350    DEBUG_DUMP_PLAYER_RECORD:
047101             0351        PUSH_ALL
047101 08          0001M1      ex af,af'
047102 D9          0002M1      exx
047103 F5          0003M1      push af
047104 E5          0004M1      push hl
047105 C5          0005M1      push bc
047106 D5          0006M1      push de
047107             0007M1  
047107 08          0008M1      ex af,af'
047108 D9          0009M1      exx
047109 F5          0010M1      push af
04710A E5          0011M1      push hl
04710B C5          0012M1      push bc
04710C D5          0013M1      push de
04710D DD E5       0014M1      push ix
04710F FD E5       0015M1      push iy
047111 CD 1C 01 04 0352        call printNewLine
047115 CD 2D 5A 04 0353        CALL dump_player_record
047119 CD 1C 01 04 0354        call printNewLine
04711D             0355        POP_ALL
04711D FD E1       0001M1      pop iy
04711F DD E1       0002M1      pop ix
047121 D1          0003M1      pop de
047122 C1          0004M1      pop bc
047123 E1          0005M1      pop hl
047124 F1          0006M1      pop af
047125 08          0007M1      ex af,af'
047126 D9          0008M1      exx
047127             0009M1  
047127 D1          0010M1      pop de
047128 C1          0011M1      pop bc
047129 E1          0012M1      pop hl
04712A F1          0013M1      pop af
04712B 08          0014M1      ex af,af'
04712C D9          0015M1      exx
04712D C9          0356        RET
04712E             0357    
04712E             0358        include "tables.inc"
04712E             0001*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
04712E             0002*   ; table_base: equ $
04712E             0003*   table_base: equ 0x048000 ; DEBUG
04712E             0004*   player_weapons_begin: equ table_base
04712E             0005*   player_lasers_begin: equ player_weapons_begin
04712E             0006*   player_lasers_end: equ table_record_size*player_lasers_max+player_lasers_begin
04712E             0007*   player_weapons_end: equ table_record_size*player_lasers_max+player_weapons_begin
04712E             0008*   player_begin: equ player_weapons_end
04712E             0009*   player_end: equ table_record_size+player_begin
04712E             0010*   enemy_sprites_begin: equ player_end
04712E             0011*   seekers_base: equ enemy_sprites_begin
04712E             0012*   seekers_end: equ table_record_size*seekers_max+seekers_base
04712E             0013*   fireballs_base: equ seekers_end
04712E             0014*   fireballs_end: equ table_record_size*fireballs_max+fireballs_base
04712E             0015*   enemy_sprites_end: equ fireballs_end
04712E             0016*   table_end: equ enemy_sprites_end
04712E             0017*   
04712E             0018*   table_num_records: equ table_end-table_base/table_record_size
04712E             0019*   table_num_enemy_records: equ enemy_sprites_end-enemy_sprites_begin/table_record_size
04712E             0020*   ; ### THIS IS THE SPACE ALLOCATED TO THE ACTIVE TILES TABLE ###
04712E             0021*   ; tile_table_base: equ table_end
04712E             0022*   tile_table_base: equ 0x050000 ; DEBUG
04712E             0023*   tile_table_end: equ 256*tile_table_record_size+tile_table_base

PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C CD 4F 67 04 0015        call init
040050 CD 33 68 04 0016        call main
040054             0017    
040054             0018    exit:
040054 FD E1       0019        pop iy
040056 DD E1       0020        pop ix
040058 D1          0021        pop de
040059 C1          0022        pop bc
04005A F1          0023        pop af
04005B 21 00 00 00 0024        ld hl,0
04005F             0025    
04005F C9          0026        ret
040060             0027    
040060             0028    ; API INCLUDES
040060             0029        include "mos_api.inc"
040060             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*   ; Title:	AGON MOS - API for user projects
040060             0003*   ; Author:	Dean Belfield
040060             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*   ;			Added MOS error codes for return in HL
040060             0006*   ; Created:	03/08/2022
040060             0007*   ; Last Updated:	10/08/2023
040060             0008*   ;
040060             0009*   ; Modinfo:
040060             0010*   ; 05/08/2022:	Added mos_feof
040060             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*   ; 13/10/2022:	Added mos_oscli
040060             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*   ; 19/05/2023:	Added sysvar_scrMode
040060             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*   ; 03/08/2023:	Added mos_setkbvector
040060             0028*   ; 10/08/2023:	Added mos_getkbmap
040060             0029*   
040060             0030*   ; VDP control (VDU 23, 0, n)
040060             0031*   ;
040060             0032*   vdp_gp:				EQU 80h
040060             0033*   vdp_keycode:		EQU 81h
040060             0034*   vdp_cursor:			EQU	82h
040060             0035*   vdp_scrchar:		EQU	83h
040060             0036*   vdp_scrpixel:		EQU	84h
040060             0037*   vdp_audio:			EQU	85h
040060             0038*   vdp_mode:			EQU	86h
040060             0039*   vdp_rtc:			EQU	87h
040060             0040*   vdp_keystate:		EQU	88h
040060             0041*   vdp_logicalcoords:	EQU	C0h
040060             0042*   vdp_terminalmode:	EQU	FFh
040060             0043*   
040060             0044*   ; MOS high level functions
040060             0045*   ;
040060             0046*   mos_getkey:			EQU	00h
040060             0047*   mos_load:			EQU	01h
040060             0048*   mos_save:			EQU	02h
040060             0049*   mos_cd:				EQU	03h
040060             0050*   mos_dir:			EQU	04h
040060             0051*   mos_del:			EQU	05h
040060             0052*   mos_ren:			EQU	06h
040060             0053*   mos_mkdir:			EQU	07h
040060             0054*   mos_sysvars:		EQU	08h
040060             0055*   mos_editline:		EQU	09h
040060             0056*   mos_fopen:			EQU	0Ah
040060             0057*   mos_fclose:			EQU	0Bh
040060             0058*   mos_fgetc:			EQU	0Ch
040060             0059*   mos_fputc:			EQU	0Dh
040060             0060*   mos_feof:			EQU	0Eh
040060             0061*   mos_getError:		EQU	0Fh
040060             0062*   mos_oscli:			EQU	10h
040060             0063*   mos_copy:			EQU	11h
040060             0064*   mos_getrtc:			EQU	12h
040060             0065*   mos_setrtc:			EQU	13h
040060             0066*   mos_setintvector:	EQU	14h
040060             0067*   mos_uopen:			EQU	15h
040060             0068*   mos_uclose:			EQU	16h
040060             0069*   mos_ugetc:			EQU	17h
040060             0070*   mos_uputc:			EQU	18h
040060             0071*   mos_getfil:			EQU	19h
040060             0072*   mos_fread:			EQU	1Ah
040060             0073*   mos_fwrite:			EQU	1Bh
040060             0074*   mos_flseek:			EQU	1Ch
040060             0075*   mos_setkbvector:	EQU	1Dh
040060             0076*   mos_getkbmap:		EQU	1Eh
040060             0077*   
040060             0078*   ; MOS program exit codes
040060             0079*   ;
040060             0080*   EXIT_OK:				EQU  0;	"OK",
040060             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*   ; FatFS file access functions
040060             0103*   ;
040060             0104*   ffs_fopen:			EQU	80h
040060             0105*   ffs_fclose:			EQU	81h
040060             0106*   ffs_fread:			EQU	82h
040060             0107*   ffs_fwrite:			EQU	83h
040060             0108*   ffs_flseek:			EQU	84h
040060             0109*   ffs_ftruncate:		EQU	85h
040060             0110*   ffs_fsync:			EQU	86h
040060             0111*   ffs_fforward:		EQU	87h
040060             0112*   ffs_fexpand:		EQU	88h
040060             0113*   ffs_fgets:			EQU	89h
040060             0114*   ffs_fputc:			EQU	8Ah
040060             0115*   ffs_fputs:			EQU	8Bh
040060             0116*   ffs_fprintf:		EQU	8Ch
040060             0117*   ffs_ftell:			EQU	8Dh
040060             0118*   ffs_feof:			EQU	8Eh
040060             0119*   ffs_fsize:			EQU	8Fh
040060             0120*   ffs_ferror:			EQU	90h
040060             0121*   
040060             0122*   ; FatFS directory access functions
040060             0123*   ;
040060             0124*   ffs_dopen:			EQU	91h
040060             0125*   ffs_dclose:			EQU	92h
040060             0126*   ffs_dread:			EQU	93h
040060             0127*   ffs_dfindfirst:		EQU	94h
040060             0128*   ffs_dfindnext:		EQU	95h
040060             0129*   
040060             0130*   ; FatFS file and directory management functions
040060             0131*   ;
040060             0132*   ffs_stat:			EQU	96h
040060             0133*   ffs_unlink:			EQU	97h
040060             0134*   ffs_rename:			EQU	98h
040060             0135*   ffs_chmod:			EQU	99h
040060             0136*   ffs_utime:			EQU	9Ah
040060             0137*   ffs_mkdir:			EQU	9Bh
040060             0138*   ffs_chdir:			EQU	9Ch
040060             0139*   ffs_chdrive:		EQU	9Dh
040060             0140*   ffs_getcwd:			EQU	9Eh
040060             0141*   
040060             0142*   ; FatFS volume management and system configuration functions
040060             0143*   ;
040060             0144*   ffs_mount:			EQU	9Fh
040060             0145*   ffs_mkfs:			EQU	A0h
040060             0146*   ffs_fdisk:			EQU	A1h
040060             0147*   ffs_getfree:		EQU	A2h
040060             0148*   ffs_getlabel:		EQU	A3h
040060             0149*   ffs_setlabel:		EQU	A4h
040060             0150*   ffs_setcp:			EQU	A5h
040060             0151*   
040060             0152*   ; File access modes
040060             0153*   ;
040060             0154*   fa_read:			EQU	01h
040060             0155*   fa_write:			EQU	02h
040060             0156*   fa_open_existing:	EQU	00h
040060             0157*   fa_create_new:		EQU	04h
040060             0158*   fa_create_always:	EQU	08h
040060             0159*   fa_open_always:		EQU	10h
040060             0160*   fa_open_append:		EQU	30h
040060             0161*   
040060             0162*   ; System variable indexes for api_sysvars
040060             0163*   ; Index into _sysvars in globals.inc
040060             0164*   ;
040060             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*   
040060             0192*   ; Flags for the VPD protocol
040060             0193*   ;
040060             0194*   vdp_pflag_cursor:		EQU	00000001b
040060             0195*   vdp_pflag_scrchar:		EQU	00000010b
040060             0196*   vdp_pflag_point:		EQU	00000100b
040060             0197*   vdp_pflag_audio:		EQU	00001000b
040060             0198*   vdp_pflag_mode:			EQU	00010000b
040060             0199*   vdp_pflag_rtc:			EQU	00100000b
040060             0200*   
040060             0201*   ;
040060             0202*   ; FatFS structures
040060             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*   ;
040060             0205*   ; Object ID and allocation information (FFOBJID)
040060             0206*   ;
040060             0207*   ; Indexes into FFOBJID structure
040060             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*   ;
040060             0215*   ; File object structure (FIL)
040060             0216*   ;
040060             0217*   ; Indexes into FIL structure
040060             0218*   fil_obj:		EQU 0	; 15: Object identifier
040060             0219*   fil_flag:		EQU	15 	;  1: File status flags
040060             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*   ;
040060             0227*   ; Directory object structure (DIR)
040060             0228*   ; Indexes into DIR structure
040060             0229*   dir_obj:		EQU  0	; 15: Object identifier
040060             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*   dir_clust:		EQU	19	;  4: Current cluster
040060             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*   ;
040060             0237*   ; File information structure (FILINFO)
040060             0238*   ;
040060             0239*   ; Indexes into FILINFO structure
040060             0240*   filinfo_fsize:		EQU 0	;   4: File size
040060             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*   ;
040060             0247*   ; Macro for calling the API
040060             0248*   ; Parameters:
040060             0249*   ; - function: One of the function numbers listed above
040060             0250*   ;
040060             0251*   	MACRO	MOSCALL	function
040060             0252*   			LD	A, function
040060             0253*   			RST.LIL	08h
040060             0254*   	ENDMACRO
040060             0030        include "functions.inc"
040060 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040100             0002*   
040100             0003*       MACRO printChar char
040100             0004*       LD A, char
040100             0005*       RST.LIL 10h
040100             0006*       ENDMACRO
040100             0007*   
040100             0008*   ; Simulated call to subroutine at HL
040100             0009*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040100             0010*   ; outputs: whatever the subroutine does, including HL and BC
040100             0011*   ; destroys: only what the subroutine does, but always BC
040100             0012*       MACRO callHL
040100             0013*       ld bc,@F ; Address of first instruction after the jump
040100             0014*       push bc ; which constitutes the return address
040100             0015*       jp (hl) ; Jump to the address in HL
040100             0016*   @@:
040100             0017*       ENDMACRO
040100             0018*   
040100             0019*   ; Simulated call to subroutine at IX
040100             0020*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040100             0021*   ; outputs: whatever the subroutine does, including IX and BC
040100             0022*   ; destroys: only what the subroutine does, but always BC
040100             0023*       MACRO callIX
040100             0024*       ld bc,@F ; Address of first instruction after the jump
040100             0025*       push bc ; which constitutes the return address
040100             0026*       jp (ix) ; Jump to the address in IX
040100             0027*   @@:
040100             0028*       ENDMACRO
040100             0029*   
040100             0030*   ; Simulated call to soubroutinte at IY
040100             0031*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040100             0032*   ; outputs: whatever the subroutine does, including IY and BC
040100             0033*   ; destroys: only what the subroutine does, but always BC
040100             0034*       MACRO callIY
040100             0035*       ld bc,@F ; Address of first instruction after the jump
040100             0036*       push bc ; which constitutes the return address
040100             0037*       jp (iy) ; Jump to the address in IY
040100             0038*   @@:
040100             0039*       ENDMACRO
040100             0040*   
040100             0041*   ; put the value in HLU into the accumulator
040100             0042*   ; destroys: af
040100             0043*       MACRO HLU_TO_A
040100             0044*       push hl ; 4 cycles
040100             0045*       inc sp ; 1 cycle
040100             0046*       pop af ; 4 cycles
040100             0047*       dec sp ; 1 cycle
040100             0048*       ; 10 cycles total
040100             0049*       ENDMACRO
040100             0050*   
040100             0051*   A_TO_HLU:
040100             0052*       ; call is 7 cycles
040100 22 0D 01 04 0053*       ld (@scratch),hl ; 7 cycles
040104 32 0F 01 04 0054*       ld (@scratch+2),a ; 5 cycles
040108 2A 0D 01 04 0055*       ld hl,(@scratch) ; 7 cycles
04010C C9          0056*       ret ; 6 cycles
04010D             0057*       ; 25 cycles total
04010D 00 00 00    0058*   @scratch: dl 0
040110             0059*   
040110             0060*       ; TODO: implement this
040110             0061*       ; MACRO A_TO_HLU
040110             0062*       ;     push.s af
040110             0063*       ;     inc sp
040110             0064*       ;     push.s hl
040110             0065*       ;     pop hl
040110             0066*       ;     inc sp
040110             0067*       ;     inc sp
040110             0068*       ; ENDMACRO
040110             0069*   
040110             0070*       MACRO PUSH_ALL
040110             0071*       ex af,af'
040110             0072*       exx
040110             0073*       push af
040110             0074*       push hl
040110             0075*       push bc
040110             0076*       push de
040110             0077*   
040110             0078*       ex af,af'
040110             0079*       exx
040110             0080*       push af
040110             0081*       push hl
040110             0082*       push bc
040110             0083*       push de
040110             0084*       push ix
040110             0085*       push iy
040110             0086*       ENDMACRO
040110             0087*   
040110             0088*       MACRO POP_ALL
040110             0089*       pop iy
040110             0090*       pop ix
040110             0091*       pop de
040110             0092*       pop bc
040110             0093*       pop hl
040110             0094*       pop af
040110             0095*       ex af,af'
040110             0096*       exx
040110             0097*   
040110             0098*       pop de
040110             0099*       pop bc
040110             0100*       pop hl
040110             0101*       pop af
040110             0102*       ex af,af'
040110             0103*       exx
040110             0104*       ENDMACRO
040110             0105*   
040110             0106*   ; Print a zero-terminated string inline with code, e.g.:
040110             0107*   ;
040110             0108*   ;    call printInline
040110             0109*   ;    ASCIZ "Hello, world!\r\n"
040110             0110*   ;
040110             0111*   ; Destroys: HL,AF
040110             0112*   printInline:
040110 E1          0113*       pop hl ; get the return address = pointer to start of string
040111 CD 17 01 04 0114*       call printString ; HL advances to end of string
040115 E5          0115*       push hl ; restore the return address = pointer to end of string
040116 C9          0116*       ret
040117             0117*   
040117             0118*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040117             0119*   ; Print a zero-terminated string
040117             0120*   ; HL: Pointer to string
040117             0121*   printString:
040117 C5          0122*       PUSH BC
040118 01 00 00 00 0123*       LD BC,0
04011C 3E 00       0124*       LD A,0
04011E 5B DF       0125*       RST.LIL 18h
040120 C1          0126*       POP BC
040121 C9          0127*       RET
040122             0128*   ; print a VDU sequence
040122             0129*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
040122             0130*   sendVDUsequence:
040122 C5          0131*       PUSH BC
040123 01 00 00 00 0132*       LD BC, 0
040127 4E          0133*       LD C, (HL)
040128 5B DF       0134*       RST.LIL 18h
04012A C1          0135*       POP BC
04012B C9          0136*       RET
04012C             0137*   ; Print Newline sequence to VDP
04012C             0138*   ; destroys bc
04012C             0139*   printNewLine:
04012C F5          0140*       push af ; for some reason rst.lil 10h sets carry flag
04012D 3E 0D       0141*       LD A, '\r'
04012F 5B D7       0142*       RST.LIL 10h
040131 3E 0A       0143*       LD A, '\n'
040133 5B D7       0144*       RST.LIL 10h
040135 F1          0145*       pop af
040136 C9          0146*       RET
040137             0147*   
040137             0148*   ; Print a 24-bit HEX number
040137             0149*   ; HLU: Number to print
040137             0150*   printHex24:
040137             0151*       HLU_TO_A
040137 E5          0001*M1     push hl ; 4 cycles
040138 33          0002*M1     inc sp ; 1 cycle
040139 F1          0003*M1     pop af ; 4 cycles
04013A 3B          0004*M1     dec sp ; 1 cycle
04013B             0005*M1     ; 10 cycles total
04013B CD 45 01 04 0152*       CALL printHex8
04013F             0153*   ; Print a 16-bit HEX number
04013F             0154*   ; HL: Number to print
04013F             0155*   printHex16:
04013F 7C          0156*       LD A,H
040140 CD 45 01 04 0157*       CALL printHex8
040144 7D          0158*       LD A,L
040145             0159*   ; Print an 8-bit HEX number
040145             0160*   ; A: Number to print
040145             0161*   printHex8:
040145 4F          0162*       LD C,A
040146 1F          0163*       RRA
040147 1F          0164*       RRA
040148 1F          0165*       RRA
040149 1F          0166*       RRA
04014A CD 4F 01 04 0167*       CALL @F
04014E 79          0168*       LD A,C
04014F             0169*   @@:
04014F E6 0F       0170*       AND 0Fh
040151 C6 90       0171*       ADD A,90h
040153 27          0172*       DAA
040154 CE 40       0173*       ADC A,40h
040156 27          0174*       DAA
040157 5B D7       0175*       RST.LIL 10h
040159 C9          0176*       RET
04015A             0177*   
04015A             0178*   printHexA:
04015A F5          0179*       push af
04015B C5          0180*       push bc
04015C CD 45 01 04 0181*       call printHex8
040160 3E 20       0182*       ld a,' '
040162 5B D7       0183*       rst.lil 10h
040164 C1          0184*       pop bc
040165 F1          0185*       pop af
040166 C9          0186*       ret
040167             0187*   
040167             0188*   printHexHL:
040167 F5          0189*       push af
040168 C5          0190*       push bc
040169 CD 3F 01 04 0191*       call printHex16
04016D 3E 20       0192*       ld a,' '
04016F 5B D7       0193*       rst.lil 10h
040171 C1          0194*       pop bc
040172 F1          0195*       pop af
040173 C9          0196*       ret
040174             0197*   
040174             0198*   printHexUHL:
040174 F5          0199*       push af
040175 C5          0200*       push bc
040176 CD 37 01 04 0201*       call printHex24
04017A 3E 20       0202*       ld a,' '
04017C 5B D7       0203*       rst.lil 10h
04017E C1          0204*       pop bc
04017F F1          0205*       pop af
040180 C9          0206*       ret
040181             0207*   
040181             0208*   printHexAUHL:
040181 F5          0209*       push af
040182 C5          0210*       push bc
040183 CD 45 01 04 0211*       call printHex8
040187 3E 2E       0212*       ld a,'.'
040189 5B D7       0213*       rst.lil 10h
04018B CD 37 01 04 0214*       call printHex24
04018F 3E 20       0215*       ld a,' '
040191 5B D7       0216*       rst.lil 10h
040193 C1          0217*       pop bc
040194 F1          0218*       pop af
040195 C9          0219*       ret
040196             0220*   
040196             0221*   printHexABHL:
040196             0222*   ; preserve registers
040196 C5          0223*       push bc ; b will be ok c will not
040197 F5          0224*       push af ; will get totally destroyed
040198             0225*   ; print a
040198 CD 45 01 04 0226*       call printHex8
04019C             0227*   ; print b
04019C 78          0228*       ld a,b
04019D CD 45 01 04 0229*       call printHex8
0401A1             0230*   ; print hl
0401A1 CD 3F 01 04 0231*       call printHex16
0401A5             0232*   ; restore registers
0401A5 F1          0233*       pop af
0401A6 C1          0234*       pop bc
0401A7 C9          0235*       ret
0401A8             0236*   
0401A8             0237*   printHexBHL:
0401A8             0238*   ; preserve registers
0401A8 C5          0239*       push bc ; b will be ok c will not
0401A9 F5          0240*       push af ; will get totally destroyed
0401AA             0241*   ; print b
0401AA 78          0242*       ld a,b
0401AB CD 45 01 04 0243*       call printHex8
0401AF             0244*   ; print hl
0401AF CD 3F 01 04 0245*       call printHex16
0401B3             0246*   ; restore registers
0401B3 F1          0247*       pop af
0401B4 C1          0248*       pop bc
0401B5 C9          0249*       ret
0401B6             0250*   
0401B6             0251*   printHexCDE:
0401B6             0252*   ; preserve registers
0401B6 C5          0253*       push bc ; b will be ok c will not
0401B7 F5          0254*       push af ; will get totally destroyed
0401B8             0255*   ; print c
0401B8 79          0256*       ld a,c
0401B9 CD 45 01 04 0257*       call printHex8
0401BD             0258*   ; print de
0401BD EB          0259*       ex de,hl
0401BE CD 3F 01 04 0260*       call printHex16
0401C2 EB          0261*       ex de,hl
0401C3             0262*   ; restore registers
0401C3 F1          0263*       pop af
0401C4 C1          0264*       pop bc
0401C5 C9          0265*       ret
0401C6             0266*   
0401C6             0267*   printHexUIX:
0401C6             0268*   ; store everything in scratch
0401C6 22 4F 06 04 0269*       ld (uhl),hl
0401CA ED 43 52 06 0270*       ld (ubc),bc
       04          
0401CF ED 53 55 06 0271*       ld (ude),de
       04          
0401D4 DD 22 58 06 0272*       ld (uix),ix
       04          
0401D9 FD 22 5B 06 0273*       ld (uiy),iy
       04          
0401DE F5          0274*       push af ; fml
0401DF             0275*   
0401DF 21 E6 05 04 0276*       ld hl,str_ixu
0401E3 CD 17 01 04 0277*       call printString
0401E7 2A 58 06 04 0278*       ld hl,(uix)
0401EB CD 37 01 04 0279*       call printHex24
0401EF CD 2C 01 04 0280*       call printNewLine
0401F3             0281*   
0401F3             0282*   ; restore everything
0401F3 2A 4F 06 04 0283*       ld hl, (uhl)
0401F7 ED 4B 52 06 0284*       ld bc, (ubc)
       04          
0401FC ED 5B 55 06 0285*       ld de, (ude)
       04          
040201 DD 2A 58 06 0286*       ld ix, (uix)
       04          
040206 FD 2A 5B 06 0287*       ld iy, (uiy)
       04          
04020B F1          0288*       pop af
04020C             0289*   ; all done
04020C C9          0290*       ret
04020D             0291*   
04020D             0292*   ; Print a 0x HEX prefix
04020D             0293*   DisplayHexPrefix:
04020D 3E 30       0294*       LD A, '0'
04020F 5B D7       0295*       RST.LIL 10h
040211 3E 78       0296*       LD A, 'x'
040213 5B D7       0297*       RST.LIL 10h
040215 C9          0298*       RET
040216             0299*   
040216             0300*       MACRO printDecBC
040216             0301*       push hl
040216             0302*       push bc
040216             0303*       pop hl
040216             0304*       call printDec
040216             0305*       pop hl
040216             0306*       ENDMACRO
040216             0307*   
040216             0308*       MACRO printDecDE
040216             0309*       push hl
040216             0310*       push de
040216             0311*       pop hl
040216             0312*       call printDec
040216             0313*       pop hl
040216             0314*       ENDMACRO
040216             0315*   
040216             0316*       MACRO printDecHL
040216             0317*       call printDec
040216             0318*       ENDMACRO
040216             0319*   
040216             0320*       MACRO printDecIX
040216             0321*       push hl
040216             0322*       push ix
040216             0323*       pop hl
040216             0324*       call printDec
040216             0325*       pop hl
040216             0326*       ENDMACRO
040216             0327*   
040216             0328*       MACRO printDecIY
040216             0329*       push hl
040216             0330*       push iy
040216             0331*       pop hl
040216             0332*       call printDec
040216             0333*       pop hl
040216             0334*       ENDMACRO
040216             0335*   
040216             0336*   
040216             0337*   ; Prints the right justified decimal value in HL without leading zeroes
040216             0338*   ; HL : Value to print
040216             0339*   ; preserves all registers and flags
040216             0340*   printDec:
040216             0341*   ; BEGIN MY CODE
040216             0342*   ; back up all the things
040216 F5          0343*       push af
040217 C5          0344*       push bc
040218 D5          0345*       push de
040219 E5          0346*       push hl
04021A             0347*   ; END MY CODE
04021A 11 42 02 04 0348*       LD DE, _printDecBuffer
04021E CD 52 02 04 0349*       CALL u24_to_ascii
040222             0350*   ; BEGIN MY CODE
040222             0351*   ; replace leading zeroes with spaces
040222 21 42 02 04 0352*       LD HL, _printDecBuffer
040226 06 07       0353*       ld B, 7 ; if HL was 0, we want to keep the final zero
040228             0354*   @loop:
040228 7E          0355*       LD A, (HL)
040229 FE 30       0356*       CP '0'
04022B C2 35 02 04 0357*       JP NZ, @done
04022F 3E 20       0358*       LD A, ' '
040231 77          0359*       LD (HL), A
040232 23          0360*       INC HL
040233             0361*       ; CALL vdu_cursor_forward
040233 10 F3       0362*       DJNZ @loop
040235             0363*   @done:
040235             0364*   ; END MY CODE
040235 21 42 02 04 0365*       LD HL, _printDecBuffer
040239 CD 17 01 04 0366*       CALL printString
04023D             0367*   ; BEGIN MY CODE
04023D             0368*   ; restore all the things
04023D E1          0369*       pop hl
04023E D1          0370*       pop de
04023F C1          0371*       pop bc
040240 F1          0372*       pop af
040241             0373*   ; END MY CODE
040241 C9          0374*       RET
040242 00 00 00 00 0375*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040252             0376*   
040252             0377*   ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
040252             0378*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040252             0379*   ; so it will allways be 8 characters length
040252             0380*   ; HL : Value to convert to string
040252             0381*   ; DE : pointer to buffer, at least 8 byte + 0
040252             0382*   u24_to_ascii:
040252 01 80 69 67 0383*       LD BC,-10000000
040256 CD 89 02 04 0384*       CALL @one_digit
04025A 01 C0 BD F0 0385*       LD BC,-1000000
04025E CD 89 02 04 0386*       CALL @one_digit
040262 01 60 79 FE 0387*       LD BC,-100000
040266 CD 89 02 04 0388*       CALL @one_digit
04026A 01 F0 D8 FF 0389*       LD BC,-10000
04026E CD 89 02 04 0390*       CALL @one_digit
040272 01 18 FC FF 0391*       LD BC,-1000
040276 CD 89 02 04 0392*       CALL @one_digit
04027A 01 9C FF FF 0393*       LD BC,-100
04027E CD 89 02 04 0394*       CALL @one_digit
040282 0E F6       0395*       LD C,-10
040284 CD 89 02 04 0396*       CALL @one_digit
040288 48          0397*       LD C,B
040289             0398*   @one_digit:
040289 3E 2F       0399*       LD A,'0'-1
04028B             0400*   @divide_me:
04028B 3C          0401*       INC A
04028C 09          0402*       ADD HL,BC
04028D 38 FC       0403*       JR C,@divide_me
04028F ED 42       0404*       SBC HL,BC
040291 12          0405*       LD (DE),A
040292 13          0406*       INC DE
040293 C9          0407*       RET
040294             0408*   
040294             0409*   print_u24:
040294 D5          0410*       push de
040295 E5          0411*       push hl
040296 11 42 02 04 0412*       ld de,_printDecBuffer
04029A CD 52 02 04 0413*       call u24_to_ascii
04029E 21 42 02 04 0414*       ld hl,_printDecBuffer
0402A2 CD 17 01 04 0415*       call printString
0402A6 3E 20       0416*       ld a,' '
0402A8 5B D7       0417*       rst.lil 10h
0402AA E1          0418*       pop hl
0402AB D1          0419*       pop de
0402AC C9          0420*       ret
0402AD             0421*   
0402AD             0422*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
0402AD             0423*   ; HL : Value to convert to string (integer part in H, fractional part in L)
0402AD             0424*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
0402AD             0425*   u168_to_ascii:
0402AD             0426*   ; add a leading space to make room for sign flag if needed
0402AD 3E 20       0427*       ld a,' '
0402AF 12          0428*       ld (de),a
0402B0 13          0429*       inc de
0402B1             0430*   ; Convert integer part
0402B1 E5          0431*       push hl ; Save HL (we’ll need the fractional part later)
0402B2 CD 6D 09 04 0432*       call hlu_udiv256 ; Shift to get integer portion in HL
0402B6 01 F0 D8 FF 0433*       ld bc, -10000
0402BA CD DD 02 04 0434*       call @one_int
0402BE 01 18 FC FF 0435*       ld bc, -1000
0402C2 CD DD 02 04 0436*       call @one_int
0402C6 01 9C FF FF 0437*       ld bc, -100
0402CA CD DD 02 04 0438*       call @one_int
0402CE 0E F6       0439*       ld c, -10
0402D0 CD DD 02 04 0440*       call @one_int
0402D4 48          0441*       ld c, b
0402D5 CD DD 02 04 0442*       call @one_int
0402D9 C3 E8 02 04 0443*       jp @frac ; Jump to fractional part conversion
0402DD             0444*   @one_int:
0402DD 3E 2F       0445*       ld a, '0' - 1 ; Start ASCII character at '0'
0402DF             0446*   @divide_me:
0402DF 3C          0447*       inc a
0402E0 09          0448*       add hl, bc ; Accumulate until overflow
0402E1 38 FC       0449*       jr c, @divide_me
0402E3 ED 42       0450*       sbc hl, bc ; Remove excess after overflow
0402E5 12          0451*       ld (de), a ; Store ASCII digit
0402E6 13          0452*       inc de
0402E7 C9          0453*       ret
0402E8             0454*   ; Convert fractional part
0402E8             0455*   @frac:
0402E8 3E 2E       0456*       ld a, '.' ; Decimal point
0402EA 12          0457*       ld (de), a
0402EB 13          0458*       inc de
0402EC E1          0459*       pop hl ; Restore HL with original fraction
0402ED 06 03       0460*       ld b, 3 ; Loop counter for 3 fractional digits
0402EF             0461*   @frac_loop:
0402EF 26 0A       0462*       ld h, 10 ; Load multiplier for fractional part
0402F1 ED 6C       0463*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0402F3 3E 30       0464*       ld a, '0'
0402F5 84          0465*       add a, h ; Convert integer part to ASCII
0402F6 12          0466*       ld (de), a
0402F7 13          0467*       inc de
0402F8 10 F5       0468*       djnz @frac_loop ; Repeat for each fractional digit
0402FA             0469*   ; Add null terminator
0402FA AF          0470*       xor a ; Null terminator
0402FB 12          0471*       ld (de), a
0402FC C9          0472*       ret
0402FD             0473*   
0402FD             0474*   print_u168:
0402FD D5          0475*       push de
0402FE E5          0476*       push hl
0402FF 11 42 02 04 0477*       ld de,_printDecBuffer
040303 CD AD 02 04 0478*       call u168_to_ascii
040307 21 42 02 04 0479*       ld hl,_printDecBuffer
04030B CD 17 01 04 0480*       call printString
04030F E1          0481*       pop hl
040310 D1          0482*       pop de
040311 C9          0483*       ret
040312             0484*   
040312             0485*   ; signed version of u168_to_ascii
040312             0486*   s168_to_ascii:
040312 D5          0487*       push de ; save starting address of buffer
040313 CD 06 09 04 0488*       call hlu_abs
040317 F5          0489*       push af ; save sign flag
040318 CD AD 02 04 0490*       call u168_to_ascii
04031C F1          0491*       pop af ; restore sign flag
04031D D1          0492*       pop de ; restore starting address of buffer
04031E F0          0493*       ret p ; hlu was positive so nothing to do
04031F 3E 2D       0494*       ld a,'-'
040321 12          0495*       ld (de),a
040322 C9          0496*       ret
040323             0497*   
040323             0498*   print_s168:
040323 D5          0499*       push de
040324 E5          0500*       push hl
040325 11 42 02 04 0501*       ld de,_printDecBuffer
040329 CD 12 03 04 0502*       call s168_to_ascii
04032D 21 42 02 04 0503*       ld hl,_printDecBuffer
040331 CD 17 01 04 0504*       call printString
040335 E1          0505*       pop hl
040336 D1          0506*       pop de
040337 C9          0507*       ret
040338             0508*   
040338             0509*   print_s168_hl:
040338 F5          0510*       push af
040339 E5          0511*       push hl
04033A CD 23 03 04 0512*       call print_s168
04033E 3E 20       0513*       ld a,' '
040340 5B D7       0514*       rst.lil 10h
040342 E1          0515*       pop hl
040343 F1          0516*       pop af
040344 C9          0517*       ret
040345             0518*   
040345             0519*   print_s168_bc:
040345 F5          0520*       push af
040346 C5          0521*       push bc
040347 E5          0522*       push hl
040348 C5          0523*       push bc
040349 E1          0524*       pop hl
04034A CD 23 03 04 0525*       call print_s168
04034E 3E 20       0526*       ld a,' '
040350 5B D7       0527*       rst.lil 10h
040352 E1          0528*       pop hl
040353 C1          0529*       pop bc
040354 F1          0530*       pop af
040355 C9          0531*       ret
040356             0532*   
040356             0533*   print_s168_de:
040356 F5          0534*       push af
040357 D5          0535*       push de
040358 E5          0536*       push hl
040359 EB          0537*       ex de,hl
04035A CD 23 03 04 0538*       call print_s168
04035E 3E 20       0539*       ld a,' '
040360 5B D7       0540*       rst.lil 10h
040362 E1          0541*       pop hl
040363 D1          0542*       pop de
040364 F1          0543*       pop af
040365 C9          0544*       ret
040366             0545*   
040366             0546*   print_s168_hl_bc_de:
040366 F5          0547*       push af
040367 C5          0548*       push bc
040368 D5          0549*       push de
040369 E5          0550*       push hl
04036A CD 23 03 04 0551*       call print_s168
04036E 3E 20       0552*       ld a,' '
040370 5B D7       0553*       rst.lil 10h
040372 C5          0554*       push bc
040373 E1          0555*       pop hl
040374 CD 23 03 04 0556*       call print_s168
040378 3E 20       0557*       ld a,' '
04037A 5B D7       0558*       rst.lil 10h
04037C EB          0559*       ex de,hl
04037D CD 23 03 04 0560*       call print_s168
040381 3E 20       0561*       ld a,' '
040383 5B D7       0562*       rst.lil 10h
040385 E1          0563*       pop hl
040386 D1          0564*       pop de
040387 C1          0565*       pop bc
040388 F1          0566*       pop af
040389 C9          0567*       ret
04038A             0568*   
04038A             0569*   print_s168_bc_de:
04038A F5          0570*       push af
04038B C5          0571*       push bc
04038C D5          0572*       push de
04038D C5          0573*       push bc
04038E E1          0574*       pop hl
04038F CD 23 03 04 0575*       call print_s168
040393 3E 20       0576*       ld a,' '
040395 5B D7       0577*       rst.lil 10h
040397 EB          0578*       ex de,hl
040398 CD 23 03 04 0579*       call print_s168
04039C 3E 20       0580*       ld a,' '
04039E 5B D7       0581*       rst.lil 10h
0403A0 E1          0582*       pop hl
0403A1 D1          0583*       pop de
0403A2 C1          0584*       pop bc
0403A3 F1          0585*       pop af
0403A4 C9          0586*       ret
0403A5             0587*   
0403A5             0588*   print_s168_a:
0403A5 F5          0589*       push af
0403A6 C5          0590*       push bc
0403A7 E5          0591*       push hl
0403A8 21 00 00 00 0592*       ld hl,0
0403AC 6F          0593*       ld l,a
0403AD CD 38 03 04 0594*       call print_s168_hl
0403B1 E1          0595*       pop hl
0403B2 C1          0596*       pop bc
0403B3 F1          0597*       pop af
0403B4 C9          0598*       ret
0403B5             0599*   
0403B5             0600*   ; #### new functions added by Brandon R. Gates ####
0403B5             0601*   
0403B5             0602*   ; print the binary representation of the 8-bit value in a
0403B5             0603*   ; destroys a, hl, bc
0403B5             0604*   printBin8:
0403B5 06 08       0605*       ld b,8 ; loop counter for 8 bits
0403B7 21 D2 03 04 0606*       ld hl,@cmd ; set hl to the low byte of the output string
0403BB             0607*       ; (which will be the high bit of the value in a)
0403BB             0608*   @loop:
0403BB 07          0609*       rlca ; put the next highest bit into carry
0403BC 38 04       0610*       jr c,@one
0403BE 36 30       0611*       ld (hl),'0'
0403C0 18 02       0612*       jr @next_bit
0403C2             0613*   @one:
0403C2 36 31       0614*       ld (hl),'1'
0403C4             0615*   @next_bit:
0403C4 23          0616*       inc hl
0403C5 10 F4       0617*       djnz @loop
0403C7             0618*   ; print it
0403C7 21 D2 03 04 0619*       ld hl,@cmd
0403CB 01 08 00 00 0620*       ld bc,@end-@cmd
0403CF 5B DF       0621*       rst.lil $18
0403D1 C9          0622*       ret
0403D2             0623*   @cmd: ds 8 ; eight bytes for eight bits
0403DA             0624*   @end:
0403DA             0625*   
0403DA             0626*   ; print the binary representation of the 8-bit value in a
0403DA             0627*   ; in reverse order (lsb first)
0403DA             0628*   ; destroys a, hl, bc
0403DA             0629*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
0403DA 06 08       0630*       ld b,8 ; loop counter for 8 bits
0403DC 21 F7 03 04 0631*       ld hl,@cmd ; set hl to the low byte of the output string
0403E0             0632*       ; (which will be the high bit of the value in a)
0403E0             0633*   @loop:
0403E0 0F          0634*       rrca ; put the next lowest bit into carry
0403E1 38 04       0635*       jr c,@one
0403E3 36 30       0636*       ld (hl),'0'
0403E5 18 02       0637*       jr @next_bit
0403E7             0638*   @one:
0403E7 36 31       0639*       ld (hl),'1'
0403E9             0640*   @next_bit:
0403E9 23          0641*       inc hl
0403EA 10 F4       0642*       djnz @loop
0403EC             0643*   ; print it
0403EC 21 F7 03 04 0644*       ld hl,@cmd
0403F0 01 08 00 00 0645*       ld bc,@end-@cmd
0403F4 5B DF       0646*       rst.lil $18
0403F6 C9          0647*       ret
0403F7             0648*   @cmd: ds 8 ; eight bytes for eight bits
0403FF             0649*   @end:
0403FF             0650*   
0403FF             0651*   ; print registers to screen in hexidecimal format
0403FF             0652*   ; inputs: none
0403FF             0653*   ; outputs: values of every register printed to screen
0403FF             0654*   ;    values of each register in global scratch memory
0403FF             0655*   ; destroys: nothing
0403FF             0656*   stepRegistersHex:
0403FF             0657*   ; store everything in scratch
       FF FF FF FF 
       FF FF FF FF 
0403FF 22 4F 06 04 0658*       ld (uhl),hl
040403 ED 43 52 06 0659*       ld (ubc),bc
       04          
040408 ED 53 55 06 0660*       ld (ude),de
       04          
04040D DD 22 58 06 0661*       ld (uix),ix
       04          
040412 FD 22 5B 06 0662*       ld (uiy),iy
       04          
040417 F5          0663*       push af ; fml
040418 E1          0664*       pop hl ; thanks, zilog
040419 22 4C 06 04 0665*       ld (uaf),hl
04041D F5          0666*       push af ; dammit
04041E             0667*   
04041E             0668*   ; home the cursor
04041E             0669*       ; call vdu_home_cursor
04041E             0670*   
04041E             0671*   ; print each register
04041E 21 D2 05 04 0672*       ld hl,str_afu
040422 CD 17 01 04 0673*       call printString
040426 2A 4C 06 04 0674*       ld hl,(uaf)
04042A CD 37 01 04 0675*       call printHex24
04042E CD 2C 01 04 0676*       call printNewLine
040432             0677*   
040432 21 D7 05 04 0678*       ld hl,str_hlu
040436 CD 17 01 04 0679*       call printString
04043A 2A 4F 06 04 0680*       ld hl,(uhl)
04043E CD 37 01 04 0681*       call printHex24
040442 CD 2C 01 04 0682*       call printNewLine
040446             0683*   
040446 21 DC 05 04 0684*       ld hl,str_bcu
04044A CD 17 01 04 0685*       call printString
04044E 2A 52 06 04 0686*       ld hl,(ubc)
040452 CD 37 01 04 0687*       call printHex24
040456 CD 2C 01 04 0688*       call printNewLine
04045A             0689*   
04045A 21 E1 05 04 0690*       ld hl,str_deu
04045E CD 17 01 04 0691*       call printString
040462 2A 55 06 04 0692*       ld hl,(ude)
040466 CD 37 01 04 0693*       call printHex24
04046A CD 2C 01 04 0694*       call printNewLine
04046E             0695*   
04046E 21 E6 05 04 0696*       ld hl,str_ixu
040472 CD 17 01 04 0697*       call printString
040476 2A 58 06 04 0698*       ld hl,(uix)
04047A CD 37 01 04 0699*       call printHex24
04047E CD 2C 01 04 0700*       call printNewLine
040482             0701*   
040482 21 EB 05 04 0702*       ld hl,str_iyu
040486 CD 17 01 04 0703*       call printString
04048A 2A 5B 06 04 0704*       ld hl,(uiy)
04048E CD 37 01 04 0705*       call printHex24
040492 CD 2C 01 04 0706*       call printNewLine
040496             0707*   
040496             0708*       ; call vsync
040496             0709*   
040496 CD 2C 01 04 0710*       call printNewLine
04049A             0711*   
04049A             0712*   ; check for right shift key and quit if pressed
04049A             0713*       MOSCALL mos_getkbmap
04049A 3E 1E       0001*M1 			LD	A, function
04049C 5B CF       0002*M1 			RST.LIL	08h
04049E             0714*   @stayhere:
04049E             0715*   ; 7 RightShift
04049E DD CB 00 76 0716*       bit 6,(ix+0)
0404A2 20 02       0717*       jr nz,@RightShift
0404A4 18 F8       0718*       jr @stayhere
0404A6             0719*   @RightShift:
0404A6 DD CB 0E 86 0720*       res 0,(ix+14) ; debounce the key (hopefully)
0404AA 3E 80       0721*       ld a,%10000000
0404AC             0722*       ; call multiPurposeDelay
0404AC             0723*   
0404AC             0724*   ; restore everything
0404AC 2A 4F 06 04 0725*       ld hl, (uhl)
0404B0 ED 4B 52 06 0726*       ld bc, (ubc)
       04          
0404B5 ED 5B 55 06 0727*       ld de, (ude)
       04          
0404BA DD 2A 58 06 0728*       ld ix, (uix)
       04          
0404BF FD 2A 5B 06 0729*       ld iy, (uiy)
       04          
0404C4 F1          0730*       pop af
0404C5             0731*   ; all done
0404C5 C9          0732*       ret
0404C6             0733*   
0404C6             0734*   ; print registers to screen in hexidecimal format
0404C6             0735*   ; inputs: none
0404C6             0736*   ; outputs: values of every register printed to screen
0404C6             0737*   ;    values of each register in global scratch memory
0404C6             0738*   ; destroys: nothing
0404C6             0739*   dumpRegistersHex:
0404C6             0740*   ; store everything in scratch
0404C6 22 4F 06 04 0741*       ld (uhl),hl
0404CA ED 43 52 06 0742*       ld (ubc),bc
       04          
0404CF ED 53 55 06 0743*       ld (ude),de
       04          
0404D4 DD 22 58 06 0744*       ld (uix),ix
       04          
0404D9 FD 22 5B 06 0745*       ld (uiy),iy
       04          
0404DE F5          0746*       push af ; fml
0404DF E1          0747*       pop hl ; thanks, zilog
0404E0 22 4C 06 04 0748*       ld (uaf),hl
0404E4 F5          0749*       push af ; dammit
0404E5             0750*   
0404E5             0751*   ; home the cursor
0404E5             0752*       ; call vdu_home_cursor
0404E5             0753*       ; call printNewLine
0404E5             0754*   
0404E5             0755*   ; print each register
0404E5 21 D2 05 04 0756*       ld hl,str_afu
0404E9 CD 17 01 04 0757*       call printString
0404ED 2A 4C 06 04 0758*       ld hl,(uaf)
0404F1 CD 37 01 04 0759*       call printHex24
0404F5 CD 2C 01 04 0760*       call printNewLine
0404F9             0761*   
0404F9 21 D7 05 04 0762*       ld hl,str_hlu
0404FD CD 17 01 04 0763*       call printString
040501 2A 4F 06 04 0764*       ld hl,(uhl)
040505 CD 37 01 04 0765*       call printHex24
040509 CD 2C 01 04 0766*       call printNewLine
04050D             0767*   
04050D 21 DC 05 04 0768*       ld hl,str_bcu
040511 CD 17 01 04 0769*       call printString
040515 2A 52 06 04 0770*       ld hl,(ubc)
040519 CD 37 01 04 0771*       call printHex24
04051D CD 2C 01 04 0772*       call printNewLine
040521             0773*   
040521 21 E1 05 04 0774*       ld hl,str_deu
040525 CD 17 01 04 0775*       call printString
040529 2A 55 06 04 0776*       ld hl,(ude)
04052D CD 37 01 04 0777*       call printHex24
040531 CD 2C 01 04 0778*       call printNewLine
040535             0779*   
040535 21 E6 05 04 0780*       ld hl,str_ixu
040539 CD 17 01 04 0781*       call printString
04053D 2A 58 06 04 0782*       ld hl,(uix)
040541 CD 37 01 04 0783*       call printHex24
040545 CD 2C 01 04 0784*       call printNewLine
040549             0785*   
040549 21 EB 05 04 0786*       ld hl,str_iyu
04054D CD 17 01 04 0787*       call printString
040551 2A 5B 06 04 0788*       ld hl,(uiy)
040555 CD 37 01 04 0789*       call printHex24
040559             0790*       ; call printNewLine
040559             0791*   
040559             0792*       ; call vdu_vblank
040559             0793*   
040559             0794*       ; call printNewLine
040559             0795*   ; restore everything
040559 2A 4F 06 04 0796*       ld hl, (uhl)
04055D ED 4B 52 06 0797*       ld bc, (ubc)
       04          
040562 ED 5B 55 06 0798*       ld de, (ude)
       04          
040567 DD 2A 58 06 0799*       ld ix, (uix)
       04          
04056C FD 2A 5B 06 0800*       ld iy, (uiy)
       04          
040571 F1          0801*       pop af
040572             0802*   ; all done
040572 C9          0803*       ret
040573             0804*   
040573             0805*   dumpRegistersHexPrime:
040573 D9          0806*       exx
040574 08          0807*       ex af,af'
040575 CD C6 04 04 0808*       call dumpRegistersHex
040579 08          0809*       ex af,af'
04057A D9          0810*       exx
04057B C9          0811*       ret
04057C             0812*   
04057C             0813*   ; additionally dump prime registers
04057C             0814*   ; inputs: none
04057C             0815*   ; outputs: values of every register printed to screen
04057C             0816*   ; destroys: nothing
04057C             0817*   dumpRegistersHexAll:
04057C CD C6 04 04 0818*       call dumpRegistersHex
040580 08          0819*       ex af,af'
040581 D9          0820*       exx
040582 CD C6 04 04 0821*       call dumpRegistersHex
040586 08          0822*       ex af,af'
040587 D9          0823*       exx
040588 C9          0824*       ret
040589             0825*   
040589             0826*   ; print hlu to screen in hexidecimal format
040589             0827*   ; inputs: none
040589             0828*   ; destroys: nothing
040589             0829*   print_hex_hl:
040589 F5          0830*       push af
04058A E5          0831*       push hl
04058B 21 D7 05 04 0832*       ld hl,str_hlu
04058F CD 17 01 04 0833*       call printString
040593 E1          0834*       pop hl
040594 E5          0835*       push hl
040595 CD 37 01 04 0836*       call printHex24
040599 3E 20       0837*       ld a,' '
04059B 5B D7       0838*       rst.lil 10h
04059D E1          0839*       pop hl
04059E F1          0840*       pop af
04059F C9          0841*       ret
0405A0             0842*   
0405A0             0843*   ; print bcu to screen in hexidecimal format
0405A0             0844*   ; inputs: none
0405A0             0845*   ; destroys: nothing
0405A0             0846*   print_hex_bc:
0405A0 F5          0847*       push af
0405A1 E5          0848*       push hl
0405A2 C5          0849*       push bc
0405A3 21 DC 05 04 0850*       ld hl,str_bcu
0405A7 CD 17 01 04 0851*       call printString
0405AB E1          0852*       pop hl
0405AC E5          0853*       push hl
0405AD CD 37 01 04 0854*       call printHex24
0405B1 3E 20       0855*       ld a,' '
0405B3 5B D7       0856*       rst.lil 10h
0405B5 C1          0857*       pop bc
0405B6 E1          0858*       pop hl
0405B7 F1          0859*       pop af
0405B8 C9          0860*       ret
0405B9             0861*   
0405B9             0862*   ; print deu to screen in hexidecimal format
0405B9             0863*   ; inputs: none
0405B9             0864*   ; destroys: nothing
0405B9             0865*   print_hex_de:
0405B9 F5          0866*       push af
0405BA E5          0867*       push hl
0405BB D5          0868*       push de
0405BC 21 E1 05 04 0869*       ld hl,str_deu
0405C0 CD 17 01 04 0870*       call printString
0405C4 E1          0871*       pop hl
0405C5 E5          0872*       push hl
0405C6 CD 37 01 04 0873*       call printHex24
0405CA 3E 20       0874*       ld a,' '
0405CC 5B D7       0875*       rst.lil 10h
0405CE D1          0876*       pop de
0405CF E1          0877*       pop hl
0405D0 F1          0878*       pop af
0405D1 C9          0879*       ret
0405D2             0880*   
0405D2 20 61 66 3D 0881*   str_afu: db " af=",0
       00          
0405D7 20 68 6C 3D 0882*   str_hlu: db " hl=",0
       00          
0405DC 20 62 63 3D 0883*   str_bcu: db " bc=",0
       00          
0405E1 20 64 65 3D 0884*   str_deu: db " de=",0
       00          
0405E6 20 69 78 3D 0885*   str_ixu: db " ix=",0
       00          
0405EB 20 69 79 3D 0886*   str_iyu: db " iy=",0
       00          
0405F0             0887*   
0405F0             0888*   ; print udeuhl to screen in hexidecimal format
0405F0             0889*   ; inputs: none
0405F0             0890*   ; outputs: concatenated hexidecimal udeuhl
0405F0             0891*   ; destroys: nothing
0405F0             0892*   dumpUDEUHLHex:
0405F0             0893*   ; store everything in scratch
0405F0 22 4F 06 04 0894*       ld (uhl),hl
0405F4 ED 43 52 06 0895*       ld (ubc),bc
       04          
0405F9 ED 53 55 06 0896*       ld (ude),de
       04          
0405FE DD 22 58 06 0897*       ld (uix),ix
       04          
040603 FD 22 5B 06 0898*       ld (uiy),iy
       04          
040608 F5          0899*       push af
040609             0900*   
040609             0901*   ; print each register
040609             0902*   
040609 21 43 06 04 0903*       ld hl,str_udeuhl
04060D CD 17 01 04 0904*       call printString
040611 2A 55 06 04 0905*       ld hl,(ude)
040615 CD 37 01 04 0906*       call printHex24
040619 3E 2E       0907*       ld a,'.' ; print a dot to separate the values
04061B 5B D7       0908*       rst.lil 10h
04061D 2A 4F 06 04 0909*       ld hl,(uhl)
040621 CD 37 01 04 0910*       call printHex24
040625 CD 2C 01 04 0911*       call printNewLine
040629             0912*   
040629             0913*   ; restore everything
040629 2A 4F 06 04 0914*       ld hl, (uhl)
04062D ED 4B 52 06 0915*       ld bc, (ubc)
       04          
040632 ED 5B 55 06 0916*       ld de, (ude)
       04          
040637 DD 2A 58 06 0917*       ld ix, (uix)
       04          
04063C FD 2A 5B 06 0918*       ld iy, (uiy)
       04          
040641 F1          0919*       pop af
040642             0920*   ; all done
040642 C9          0921*       ret
040643             0922*   
040643 75 64 65 2E 0923*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04064C             0924*   
04064C             0925*   ; global scratch memory for registers
04064C 00 00 00    0926*   uaf: dl 0
04064F 00 00 00    0927*   uhl: dl 0
040652 00 00 00    0928*   ubc: dl 0
040655 00 00 00    0929*   ude: dl 0
040658 00 00 00    0930*   uix: dl 0
04065B 00 00 00    0931*   uiy: dl 0
04065E 00 00 00    0932*   usp: dl 0
040661 00 00 00    0933*   upc: dl 0
040664             0934*   
040664             0935*   ; inputs: whatever is in the flags register
040664             0936*   ; outputs: binary representation of flags
040664             0937*   ;          with a header so we know which is what
040664             0938*   ; destroys: nothing
040664             0939*   ; preserves: everything
040664             0940*   dumpFlags:
040664             0941*   ; first we curse zilog for not giving direct access to flags
040664 F5          0942*       push af ; this is so we can send it back unharmed
040665 F5          0943*       push af ; this is so we can pop it to hl
040666             0944*   ; store everything in scratch
040666 22 4F 06 04 0945*       ld (uhl),hl
04066A ED 43 52 06 0946*       ld (ubc),bc
       04          
04066F ED 53 55 06 0947*       ld (ude),de
       04          
040674 DD 22 58 06 0948*       ld (uix),ix
       04          
040679 FD 22 5B 06 0949*       ld (uiy),iy
       04          
04067E             0950*   ; next we print the header
04067E 21 AA 06 04 0951*       ld hl,@header
040682 CD 17 01 04 0952*       call printString
040686 E1          0953*       pop hl ; flags are now in l
040687 7D          0954*       ld a,l ; flags are now in a
040688 CD B5 03 04 0955*       call printBin8
04068C CD 2C 01 04 0956*       call printNewLine
040690             0957*   ; restore everything
040690 2A 4F 06 04 0958*       ld hl, (uhl)
040694 ED 4B 52 06 0959*       ld bc, (ubc)
       04          
040699 ED 5B 55 06 0960*       ld de, (ude)
       04          
04069E DD 2A 58 06 0961*       ld ix, (uix)
       04          
0406A3 FD 2A 5B 06 0962*       ld iy, (uiy)
       04          
0406A8 F1          0963*       pop af ; send her home the way she came
0406A9 C9          0964*       ret
0406AA             0965*   ; Bit 7 (S): Sign flag
0406AA             0966*   ; Bit 6 (Z): Zero flag
0406AA             0967*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0406AA             0968*   ; Bit 4 (H): Half Carry flag
0406AA             0969*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0406AA             0970*   ; Bit 2 (PV): Parity/Overflow flag
0406AA             0971*   ; Bit 1 (N): Subtract flag
0406AA             0972*   ; Bit 0 (C): Carry flag
0406AA 53 5A 78 48 0973*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0406B5             0974*   
0406B5             0975*   ; set all the bits in the flag register
0406B5             0976*   ; more of an academic exercise than anything useful
0406B5             0977*   ; inputs; none
0406B5             0978*   ; outputs; a=0,f=255
0406B5             0979*   ; destroys: flags, hl
0406B5             0980*   ; preserves: a, because why not
0406B5             0981*   setAllFlags:
0406B5 21 FF 00 00 0982*       ld hl,255
0406B9 67          0983*       ld h,a ; four cycles to preserve a is cheap
0406BA E5          0984*       push hl
0406BB F1          0985*       pop af
0406BC C9          0986*       ret
0406BD             0987*   
0406BD             0988*   ; reset all the bits in the flag register
0406BD             0989*   ; unlike its inverse counterpart, this may actually be useful
0406BD             0990*   ; inputs; none
0406BD             0991*   ; outputs; a=0,f=0
0406BD             0992*   ; destroys: flags, hl
0406BD             0993*   ; preserves: a, because why not
0406BD             0994*   resetAllFlags:
0406BD 21 00 00 00 0995*       ld hl,0
0406C1 67          0996*       ld h,a ; four cycles to preserve a is cheap
0406C2 E5          0997*       push hl
0406C3 F1          0998*       pop af
0406C4 C9          0999*       ret
0406C5             1000*   
0406C5             1001*   ; wait until user presses a key
0406C5             1002*   ; inputs: none
0406C5             1003*   ; outputs: ascii code of key pressed in a
0406C5             1004*   ; destroys: af,ix
0406C5             1005*   waitKeypress:
0406C5             1006*       MOSCALL mos_getkey
0406C5 3E 00       0001*M1 			LD	A, function
0406C7 5B CF       0002*M1 			RST.LIL	08h
0406C9 C9          1007*       ret
0406CA             1008*   
0406CA             1009*   ; print bytes from an address to the screen in hexidecimal format
0406CA             1010*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406CA             1011*   ; outputs: values of each byte printed to screen separated by spaces
0406CA             1012*   ; destroys: nothing
0406CA             1013*   dumpMemoryHex:
0406CA             1014*   ; save registers to the stack
0406CA C5          1015*       push bc
0406CB E5          1016*       push hl
0406CC F5          1017*       push af
0406CD             1018*   
0406CD             1019*   ; print the address and separator
0406CD CD 37 01 04 1020*       call printHex24
0406D1 3E 3A       1021*       ld a,':'
0406D3 5B D7       1022*       rst.lil 10h
0406D5 3E 20       1023*       ld a,' '
0406D7 5B D7       1024*       rst.lil 10h
0406D9             1025*   
0406D9             1026*   ; set b to be our loop counter
0406D9 F1          1027*       pop af
0406DA 47          1028*       ld b,a
0406DB E1          1029*       pop hl
0406DC E5          1030*       push hl
0406DD F5          1031*       push af
0406DE             1032*   @loop:
0406DE             1033*   ; print the byte
0406DE 7E          1034*       ld a,(hl)
0406DF CD 45 01 04 1035*       call printHex8
0406E3             1036*   ; print a space
0406E3 3E 20       1037*       ld a,' '
0406E5 5B D7       1038*       rst.lil 10h
0406E7 23          1039*       inc hl
0406E8 10 F4       1040*       djnz @loop
0406EA CD 2C 01 04 1041*       call printNewLine
0406EE             1042*   
0406EE             1043*   ; restore everything
0406EE F1          1044*       pop af
0406EF E1          1045*       pop hl
0406F0 C1          1046*       pop bc
0406F1             1047*   
0406F1             1048*   ; all done
0406F1 C9          1049*       ret
0406F2             1050*   
0406F2             1051*   
0406F2             1052*   ; print bytes from an address to the screen in binary format
0406F2             1053*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406F2             1054*   ; outputs: values of each byte printed to screen separated by spaces
0406F2             1055*   ; destroys: nothing
0406F2             1056*   dumpMemoryBin:
0406F2             1057*   ; save all registers to the stack
0406F2 F5          1058*       push af
0406F3 C5          1059*       push bc
0406F4 D5          1060*       push de
0406F5 E5          1061*       push hl
0406F6 DD E5       1062*       push ix
0406F8 FD E5       1063*       push iy
0406FA             1064*   
0406FA             1065*   ; set b to be our loop counter
0406FA 47          1066*       ld b,a
0406FB             1067*   @loop:
0406FB             1068*   ; print the byte
0406FB 7E          1069*       ld a,(hl)
0406FC E5          1070*       push hl
0406FD C5          1071*       push bc
0406FE CD B5 03 04 1072*       call printBin8
040702 C1          1073*       pop bc
040703             1074*   ; print a space
040703 3E 20       1075*       ld a,' '
040705 5B D7       1076*       rst.lil 10h
040707 E1          1077*       pop hl
040708 23          1078*       inc hl
040709 10 F0       1079*       djnz @loop
04070B CD 2C 01 04 1080*       call printNewLine
04070F             1081*   
04070F             1082*   ; restore everything
04070F FD E1       1083*       pop iy
040711 DD E1       1084*       pop ix
040713 E1          1085*       pop hl
040714 D1          1086*       pop de
040715 C1          1087*       pop bc
040716 F1          1088*       pop af
040717             1089*   ; all done
040717 C9          1090*       ret
040718             1091*   
040718             1092*   ; print bytes from an address to the screen in binary format
040718             1093*   ; with the bits of each byte in reverse order (lsb first)
040718             1094*   ; inputs: hl = address of first byte to print, a = number of bytes to print
040718             1095*   ; outputs: values of each byte printed to screen separated by spaces
040718             1096*   ; destroys: nothing
040718             1097*   dumpMemoryBinRev:
040718             1098*   ; save all registers to the stack
040718 F5          1099*       push af
040719 C5          1100*       push bc
04071A D5          1101*       push de
04071B E5          1102*       push hl
04071C DD E5       1103*       push ix
04071E FD E5       1104*       push iy
040720             1105*   
040720             1106*   ; set b to be our loop counter
040720 47          1107*       ld b,a
040721             1108*   @loop:
040721             1109*   ; print the byte
040721 7E          1110*       ld a,(hl)
040722 E5          1111*       push hl
040723 C5          1112*       push bc
040724 CD DA 03 04 1113*       call printBin8Rev
040728 C1          1114*       pop bc
040729             1115*   ; print a space
040729 3E 20       1116*       ld a,' '
04072B 5B D7       1117*       rst.lil 10h
04072D E1          1118*       pop hl
04072E 23          1119*       inc hl
04072F 10 F0       1120*       djnz @loop
040731 CD 2C 01 04 1121*       call printNewLine
040735             1122*   
040735             1123*   ; restore everything
040735 FD E1       1124*       pop iy
040737 DD E1       1125*       pop ix
040739 E1          1126*       pop hl
04073A D1          1127*       pop de
04073B C1          1128*       pop bc
04073C F1          1129*       pop af
04073D             1130*   ; all done
04073D C9          1131*       ret
04073E             0031        include "arith24.inc"
04073E             0001*   ;------------------------------------------------------------------------
04073E             0002*   ;  arith24.asm
04073E             0003*   ;  24-bit ez80 arithmetic routines
04073E             0004*   ;  Copyright (c) Shawn Sijnstra 2024
04073E             0005*   ;  MIT license
04073E             0006*   ;
04073E             0007*   ;  This library was created as a tool to help make ez80
04073E             0008*   ;  24-bit native assembly routines for simple mathematical problems
04073E             0009*   ;  more widely available.
04073E             0010*   ;
04073E             0011*   ;------------------------------------------------------------------------
04073E             0012*   
04073E             0013*   ; ;------------------------------------------------------------------------
04073E             0014*   ; ; DEPRECATED BY umul24 in fixed168.inc
04073E             0015*   ; ;------------------------------------------------------------------------
04073E             0016*   ; ; umul24:	HL = HL*DE (unsigned)
04073E             0017*   ; ; Preserves AF, BC, DE
04073E             0018*   ; ; Uses a fast multiply routine.
04073E             0019*   ; ;------------------------------------------------------------------------
04073E             0020*   ; umul24:
04073E             0021*   ; 	push	DE
04073E             0022*   ; 	push	BC
04073E             0023*   ; 	push	AF
04073E             0024*   ; 	push	HL
04073E             0025*   ; 	pop		BC
04073E             0026*   ;     ld	 	a, 24 ; No. of bits to process
04073E             0027*   ;     ld	 	hl, 0 ; Result
04073E             0028*   ; umul24_lp:
04073E             0029*   ; 	add	hl,hl
04073E             0030*   ; 	ex	de,hl
04073E             0031*   ; 	add	hl,hl
04073E             0032*   ; 	ex	de,hl
04073E             0033*   ; 	jr	nc,umul24_nc
04073E             0034*   ; 	add	hl,bc
04073E             0035*   ; umul24_nc:
04073E             0036*   ; 	dec	a
04073E             0037*   ; 	jr	nz,umul24_lp
04073E             0038*   ; 	pop	af
04073E             0039*   ; 	pop	bc
04073E             0040*   ; 	pop	de
04073E             0041*   ; 	ret
04073E             0042*   
04073E             0043*   
04073E             0044*   ;------------------------------------------------------------------------
04073E             0045*   ; udiv24
04073E             0046*   ; Unsigned 24-bit division
04073E             0047*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
04073E             0048*   ;
04073E             0049*   ; Uses AF BC DE HL
04073E             0050*   ; Uses Restoring Division algorithm
04073E             0051*   ;------------------------------------------------------------------------
04073E             0052*   
04073E             0053*   udiv24:
04073E E5          0054*   	push	hl
04073F C1          0055*   	pop		bc	;move dividend to BCU
040740 21 00 00 00 0056*   	ld		hl,0	;result
040744 A7          0057*   	and		a
040745 ED 52       0058*   	sbc		hl,de	;test for div by 0
040747 C8          0059*   	ret		z		;it's zero, carry flag is clear
040748 19          0060*   	add		hl,de	;HL is 0 again
040749 3E 18       0061*   	ld		a,24	;number of loops through.
04074B             0062*   udiv1:
04074B C5          0063*   	push	bc	;complicated way of doing this because of lack of access to top bits
04074C E3          0064*   	ex		(sp),hl
04074D 37          0065*   	scf
04074E ED 6A       0066*   	adc	hl,hl
040750 E3          0067*   	ex	(sp),hl
040751 C1          0068*   	pop	bc		;we now have bc = (bc * 2) + 1
040752             0069*   
040752 ED 6A       0070*   	adc	hl,hl
040754 A7          0071*   	and	a		;is this the bug
040755 ED 52       0072*   	sbc	hl,de
040757 30 02       0073*   	jr	nc,udiv2
040759 19          0074*   	add	hl,de
04075A             0075*   ;	dec	c
04075A 0B          0076*   	dec	bc
04075B             0077*   udiv2:
04075B 3D          0078*   	dec	a
04075C 20 ED       0079*   	jr	nz,udiv1
04075E 37          0080*   	scf		;flag used for div0 error
04075F C5          0081*   	push	bc
040760 D1          0082*   	pop		de	;remainder
040761 C9          0083*   	ret
040762             0084*   
040762             0085*   
040762             0086*   
040762             0087*   ;------------------------------------------------------------------------
040762             0088*   ; neg24
040762             0089*   ; Returns: HLU = 0-HLU
040762             0090*   ; preserves all other registers
040762             0091*   ;------------------------------------------------------------------------
040762             0092*   neg24:
040762 D5          0093*   	push	de
040763 EB          0094*   	ex		de,hl
040764 21 00 00 00 0095*   	ld		hl,0
040768 B7          0096*   	or		a
040769 ED 52       0097*   	sbc		hl,de
04076B D1          0098*   	pop		de
04076C C9          0099*   	ret
04076D             0100*   
04076D             0101*   ;------------------------------------------------------------------------
04076D             0102*   ; or_hlu_deu: 24 bit bitwise OR
04076D             0103*   ; Returns: hlu = hlu OR deu
04076D             0104*   ; preserves all other registers
04076D             0105*   ;------------------------------------------------------------------------
04076D             0106*   or_hlu_deu:
04076D 22 F6 07 04 0107*   	ld	(bitbuf1),hl
040771 ED 53 F9 07 0108*   	ld	(bitbuf2),de
       04          
040776 D5          0109*   	push	de	;preserve DEU
040777 C5          0110*   	push	bc	;preserve BCU
040778 06 03       0111*   	ld		b,3
04077A 21 F6 07 04 0112*   	ld	hl,bitbuf1
04077E 11 F6 07 04 0113*   	ld	de,bitbuf1
040782             0114*   orloop_24:
040782 1A          0115*   	ld	a,(de)
040783 B6          0116*   	or	(hl)
040784 12          0117*   	ld	(de),a
040785 13          0118*   	inc	de
040786 23          0119*   	inc	hl
040787 10 F9       0120*   	djnz	orloop_24
040789 2A F9 07 04 0121*   	ld	hl,(bitbuf2)
04078D C1          0122*   	pop		bc	;restore BC
04078E D1          0123*   	pop		de	;restore DE
04078F             0124*   
04078F             0125*   ;------------------------------------------------------------------------
04078F             0126*   ; and_hlu_deu: 24 bit bitwise AND
04078F             0127*   ; Returns: hlu = hlu AND deu
04078F             0128*   ; preserves all other registers
04078F             0129*   ;------------------------------------------------------------------------
04078F             0130*   and_hlu_deu:
04078F 22 F6 07 04 0131*   	ld	(bitbuf1),hl
040793 ED 53 F9 07 0132*   	ld	(bitbuf2),de
       04          
040798 D5          0133*   	push	de	;preserve DEU
040799 C5          0134*   	push	bc	;preserve BCU
04079A 06 03       0135*   	ld		b,3
04079C 21 F6 07 04 0136*   	ld	hl,bitbuf1
0407A0 11 F6 07 04 0137*   	ld	de,bitbuf1
0407A4             0138*   andloop_24:
0407A4 1A          0139*   	ld	a,(de)
0407A5 A6          0140*   	and	(hl)
0407A6 12          0141*   	ld	(de),a
0407A7 13          0142*   	inc	de
0407A8 23          0143*   	inc	hl
0407A9 10 F9       0144*   	djnz	andloop_24
0407AB 2A F9 07 04 0145*   	ld	hl,(bitbuf2)
0407AF C1          0146*   	pop		bc	;restore BC
0407B0 D1          0147*   	pop		de	;restore DE
0407B1             0148*   
0407B1             0149*   ;------------------------------------------------------------------------
0407B1             0150*   ; xor_hlu_deu: 24 bit bitwise XOR
0407B1             0151*   ; Returns: hlu = hlu XOR deu
0407B1             0152*   ; preserves all other registers
0407B1             0153*   ;------------------------------------------------------------------------
0407B1             0154*   xor_hlu_deu:
0407B1 22 F6 07 04 0155*   	ld	(bitbuf1),hl
0407B5 ED 53 F9 07 0156*   	ld	(bitbuf2),de
       04          
0407BA D5          0157*   	push	de	;preserve DEU
0407BB C5          0158*   	push	bc	;preserve BCU
0407BC 06 03       0159*   	ld		b,3
0407BE 21 F6 07 04 0160*   	ld	hl,bitbuf1
0407C2 11 F6 07 04 0161*   	ld	de,bitbuf1
0407C6             0162*   xorloop_24:
0407C6 1A          0163*   	ld	a,(de)
0407C7 AE          0164*   	xor	(hl)
0407C8 12          0165*   	ld	(de),a
0407C9 13          0166*   	inc	de
0407CA 23          0167*   	inc	hl
0407CB 10 F9       0168*   	djnz	xorloop_24
0407CD 2A F9 07 04 0169*   	ld	hl,(bitbuf2)
0407D1 C1          0170*   	pop		bc	;restore BC
0407D2 D1          0171*   	pop		de	;restore DE
0407D3             0172*   
0407D3             0173*   ;------------------------------------------------------------------------
0407D3             0174*   ; shl_hlu: 24 bit shift left hlu by a positions
0407D3             0175*   ; Returns: hlu = hlu << a
0407D3             0176*   ;		   a = 0
0407D3             0177*   ; NOTE: only considers a up to 16 bits.
0407D3             0178*   ; preserves all other registers
0407D3             0179*   ; modified by Brandon R. Gates to use a instead of de
0407D3             0180*   ;------------------------------------------------------------------------
0407D3             0181*   shl_hlu:
0407D3 B7          0182*   	or a
0407D4 C8          0183*   	ret		z		;we're done
0407D5 29          0184*   	add		hl,hl	;shift HLU left
0407D6 3D          0185*   	dec a
0407D7 18 FA       0186*   	jr		shl_hlu
0407D9             0187*   
0407D9             0188*   ;------------------------------------------------------------------------
0407D9             0189*   ; shr_hlu: 24 bit shift right hlu by a positions
0407D9             0190*   ; Returns: hlu = hlu >> a
0407D9             0191*   ;		   a = 0
0407D9             0192*   ; NOTE: only considers a up to 16 bits.
0407D9             0193*   ; preserves all other registers
0407D9             0194*   ; modified by Brandon R. Gates to use a instead of de
0407D9             0195*   ;------------------------------------------------------------------------
0407D9             0196*   shr_hlu:
0407D9 22 F6 07 04 0197*   	ld		(bitbuf1),hl
0407DD 21 F8 07 04 0198*   	ld		hl,bitbuf1+2
0407E1             0199*   @shr_loop:
0407E1 B7          0200*   	or a
0407E2 28 0D       0201*   	jr		z,@shr_done		;we're done
0407E4             0202*   ;carry is clear from or instruction
0407E4 CB 1E       0203*   	rr		(hl)
0407E6 2B          0204*   	dec		hl
0407E7 CB 1E       0205*   	rr		(hl)
0407E9 2B          0206*   	dec		hl
0407EA CB 1E       0207*   	rr		(hl)
0407EC 23          0208*   	inc		hl
0407ED 23          0209*   	inc		hl
0407EE 3D          0210*   	dec a
0407EF 18 F0       0211*   	jr		@shr_loop
0407F1             0212*   @shr_done:
0407F1 2A F6 07 04 0213*   	ld		hl,(bitbuf1)	;collect result
0407F5 C9          0214*   	ret
0407F6             0215*   
0407F6             0216*   ;------------------------------------------------------------------------
0407F6             0217*   ; Scratch area for calculations
0407F6             0218*   ;------------------------------------------------------------------------
0407F6 00 00 00    0219*   bitbuf1:	dw24	0	;bit manipulation buffer 1
0407F9 00 00 00    0220*   bitbuf2:	dw24	0	;bit manipulation buffer 2
0407FC             0221*   
0407FC             0222*   ; -----------------------------------------------------------------------
0407FC             0223*   ; Functions added by Brandon R. Gates
0407FC             0224*   ; -----------------------------------------------------------------------
0407FC             0225*   
0407FC             0226*   ;------------------------------------------------------------------------
0407FC             0227*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
0407FC             0228*   ;              Determines the LSB of A and shifts HLU accordingly.
0407FC             0229*   ;              HLU = HLU >> LSB(A)
0407FC             0230*   ; Returns: HLU = HLU >> LSB(A)
0407FC             0231*   ; Destroys: af
0407FC             0232*   ;------------------------------------------------------------------------
0407FC             0233*   shr_hlu_log2a:
0407FC B7          0234*   	or a    ; check for zero
0407FD C8          0235*   	ret z   ; nothing to shift so we're done
0407FE C5          0236*   	push 	bc ; preserve
0407FF 06 00       0237*   	ld		b,0 ; clear b
040801             0238*   @find_bit:
040801 0F          0239*   	rrca ; bit 0 to carry
040802 DA 0B 08 04 0240*   	jp c,@found_bit
040806 04          0241*   	inc b ; next bit
040807 C3 01 08 04 0242*   	jp @find_bit
04080B             0243*   @found_bit:
04080B 78          0244*   	ld a,b
04080C CD D9 07 04 0245*   	call shr_hlu
040810 C1          0246*   	pop 	bc ; restore
040811 C9          0247*   	ret
040812             0248*   ; end shr_hlu_log2a
040812             0249*   
040812             0250*   ;------------------------------------------------------------------------
040812             0251*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040812             0252*   ;                Determines the LSB of A and shifts HLU accordingly.
040812             0253*   ;                HLU = HLU << LSB(A)
040812             0254*   ; Returns: HLU = HLU << LSB(A)
040812             0255*   ; Destroys: af
040812             0256*   ;------------------------------------------------------------------------
040812             0257*   shl_hlu_log2a:
040812 B7          0258*   	or a    ; check for zero
040813 C8          0259*   	ret z   ; nothing to shift so we're done
040814 C5          0260*   	push 	bc ; preserve
040815 06 00       0261*   	ld		b,0 ; clear b
040817             0262*   @find_bit:
040817 0F          0263*   	rrca ; bit 0 to carry
040818 DA 21 08 04 0264*   	jp c,@found_bit
04081C 04          0265*   	inc b ; next bit
04081D C3 17 08 04 0266*   	jp @find_bit
040821             0267*   @found_bit:
040821 78          0268*   	ld a,b
040822 CD D3 07 04 0269*   	call shl_hlu
040826 C1          0270*   	pop 	bc ; restore
040827 C9          0271*   	ret
040828             0272*   ; end shl_hlu_log2a
040828             0032        include "maths.inc"
040828 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040900             0002*   ; test the sign of HL
040900             0003*   ; inputs: HL obviously
040900             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040900             0005*   ; destroys: flags
040900             0006*       MACRO sign_hlu
040900             0007*       add hl,de
040900             0008*       or a ; clear flags
040900             0009*       sbc hl,de
040900             0010*       ENDMACRO
040900             0011*   
040900             0012*   
040900             0013*   ;------------------------------------------------------------------------
040900             0014*   ; Scratch area for calculations
040900             0015*   ;------------------------------------------------------------------------
040900 00 00 00    0016*   scratch1: dw24 0 ;bit manipulation buffer 1
040903 00 00 00    0017*   scratch2: dw24 0 ;bit manipulation buffer 2
040906             0018*   
040906             0019*   ; absolute value of hlu
040906             0020*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040906             0021*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040906             0022*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040906             0023*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040906             0024*   ; destroys: a
040906             0025*   hlu_abs:
040906 19          0026*       add hl,de
040907 B7          0027*       or a
040908 ED 52       0028*       sbc hl,de
04090A FA 0F 09 04 0029*       jp m,@is_neg
04090E C9          0030*       ret ; hlu is positive or zero so we're done
04090F             0031*   @is_neg:
04090F F5          0032*       push af ; otherwise, save current flags for return
040910 CD 16 09 04 0033*       call neg_hlu ; negate hlu
040914 F1          0034*       pop af ; get back flags
040915 C9          0035*       ret
040916             0036*   
040916             0037*   ; flip the sign of hlu
040916             0038*   ; inputs: hlu
040916             0039*   ; returns: 0-hlu, flags set appropriately for the result:
040916             0040*   ;         s1,z0,pv0,n1,c1 if result is negative
040916             0041*   ;         s0,z1,pv0,n1,c0 if result is zero
040916             0042*   ;         s0,z0,pv0,n1,c1 if result is positive
040916             0043*   ; destroys a
040916             0044*   neg_hlu:
040916 D5          0045*       push de ; save de
040917 EB          0046*       ex de,hl ; put hl into de
040918 21 00 00 00 0047*       ld hl,0 ; clear hl
04091C AF          0048*       xor a ; clear carry
04091D ED 52       0049*       sbc hl,de ; 0-hlu = -hlu
04091F D1          0050*       pop de ; get de back
040920 C9          0051*       ret ; easy peasy
040921             0052*   
040921             0053*   ;------------------------------------------------------------------------
040921             0054*   ; divide hlu by 2, inspired by above
040921             0055*   ;------------------------------------------------------------------------
040921             0056*   hlu_div2:
040921 22 00 09 04 0057*       ld (scratch1),hl
040925 21 02 09 04 0058*       ld hl,scratch1+2
040929 CB 1E       0059*       rr (hl)
04092B 2B          0060*       dec hl
04092C CB 1E       0061*       rr (hl)
04092E 2B          0062*       dec hl
04092F CB 1E       0063*       rr (hl)
040931 23          0064*       inc hl
040932 23          0065*       inc hl
040933 2A 00 09 04 0066*       ld hl,(scratch1)
040937 C9          0067*       ret
040938             0068*   
040938             0069*   ; this is my little hack to divide by 16
040938             0070*   hlu_div16:
040938 AF          0071*       xor a
040939 29          0072*       add hl,hl
04093A 17          0073*       rla
04093B 29          0074*       add hl,hl
04093C 17          0075*       rla
04093D 29          0076*       add hl,hl
04093E 17          0077*       rla
04093F 29          0078*       add hl,hl
040940 17          0079*       rla
040941 22 4E 09 04 0080*       ld (@scratch),hl
040945 32 51 09 04 0081*       ld (@scratch+3),a
040949 2A 4F 09 04 0082*       ld hl,(@scratch+1)
04094D C9          0083*       ret
04094E             0084*   @scratch: ds 4
040952             0085*   
040952             0086*   ; hlu signed division by 256
040952             0087*   ; returns: hlu / 256
040952             0088*   ; destroys: af
040952             0089*   hlu_sdiv256:
       FF FF FF FF 
040952 AF          0090*       xor a ; assume hl is positive
040953 22 69 09 04 0091*       ld (@buffer),hl
040957             0092*       sign_hlu
040957 19          0001*M1     add hl,de
040958 B7          0002*M1     or a ; clear flags
040959 ED 52       0003*M1     sbc hl,de
04095B F2 60 09 04 0093*       jp p,@hl_pos
04095F 3D          0094*       dec a
040960             0095*   @hl_pos:
040960 32 6C 09 04 0096*       ld (@buffer+3),a
040964 2A 6A 09 04 0097*       ld hl,(@buffer+1)
040968 C9          0098*       ret
040969             0099*   @buffer: ds 4
04096D             0100*   
04096D             0101*   ; hlu 1 byte right shift, unsigned
04096D             0102*   ; returns: hlu / 256, fractional portion in a
04096D             0103*   ; destroys: af
04096D             0104*   hlu_udiv256:
       FF FF FF FF 
04096D AF          0105*       xor a
04096E 32 7F 09 04 0106*       ld (@buffer+3),a
040972 7D          0107*       ld a,l ; save the fractional portion
040973 22 7C 09 04 0108*       ld (@buffer),hl
040977 2A 7D 09 04 0109*       ld hl,(@buffer+1)
04097B C9          0110*       ret
04097C             0111*   @buffer: ds 4
040980             0112*   
040980             0113*       MACRO hlu_mul256
040980             0114*       add hl,hl ; * 2
040980             0115*       add hl,hl ; * 4
040980             0116*       add hl,hl ; * 8
040980             0117*       add hl,hl ; * 16
040980             0118*       add hl,hl ; * 32
040980             0119*       add hl,hl ; * 64
040980             0120*       add hl,hl ; * 128
040980             0121*       add hl,hl ; * 256
040980             0122*       ENDMACRO
040980             0123*   
       FF FF FF FF 
040980 00 00 00 00 0124*   add_bcd_arg1: db #00,#00,#00,#00
040984 00 00 00 00 0125*   add_bcd_arg2: db #00,#00,#00,#00
040988             0126*   
040988             0127*   ; set bcd values in a scratch memory address from registers bcde
040988             0128*   ; input: hl; scratch address,bcde; 8-place bcd number
040988             0129*   ; destroys ; hl
040988             0130*   set_bcd:
040988 73          0131*       ld (hl),e
040989 23          0132*       inc hl
04098A 72          0133*       ld (hl),d
04098B 23          0134*       inc hl
04098C 71          0135*       ld (hl),c
04098D 23          0136*       inc hl
04098E 70          0137*       ld (hl),b
04098F C9          0138*       ret
040990             0139*   
040990             0140*   ; load bcd values from a scratch memory address to bcde
040990             0141*   ; input: hl; scratch address
040990             0142*   ; output: bcde; 8-place bcd number
040990             0143*   ; destroys: hl
040990             0144*   get_bcd:
040990 5E          0145*       ld e,(hl)
040991 23          0146*       inc hl
040992 56          0147*       ld d,(hl)
040993 23          0148*       inc hl
040994 4E          0149*       ld c,(hl)
040995 23          0150*       inc hl
040996 46          0151*       ld b,(hl)
040997 C9          0152*       ret
040998             0153*   
040998             0154*   ; BCD addition
040998             0155*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040998             0156*   ;       a is the number of bytes holding each number (number of places/2)
040998             0157*   ; outputs: (hl) + (de) --> (hl)
040998             0158*   ; destroys: a,b,de,hl
040998             0159*   add_bcd:
040998 47          0160*       ld b,a ; loop counter
040999 AF          0161*       xor a ; reset a, clear carry flag
04099A             0162*   adcec:
04099A 1A          0163*       ld a,(de) ; addend to acc
04099B 8E          0164*       adc a,(hl) ; add (hl) to acc
04099C 27          0165*       daa ; adjust result to bcd
04099D 77          0166*       ld (hl),a ; store result
04099E 23          0167*       inc hl ; advance memory pointers
04099F 13          0168*       inc de
0409A0 10 F8       0169*       djnz adcec ; loop until b == 0
0409A2 C9          0170*       ret
0409A3             0171*   
0409A3             0172*   ; BCD subtraction
0409A3             0173*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0409A3             0174*   ;       a is the number of bytes holding each number (number of places/2)
0409A3             0175*   ; outputs: (hl) - (de) --> (hl)
0409A3             0176*   ; destroys: a,b,de,hl
0409A3             0177*   sub_bcd:
0409A3 47          0178*       ld b,a ; loop counter
0409A4 AF          0179*       xor a ; reset a,clear carry flag
0409A5             0180*   subdec:
0409A5 1A          0181*       ld a,(de) ; subtrahend to acc
0409A6 9E          0182*       sbc a,(hl) ; subtract (hl) from acc
0409A7 27          0183*       daa ; adjust result to bcd
0409A8 77          0184*       ld (hl),a ; store result
0409A9 23          0185*       inc hl ; advance memory pointers
0409AA 13          0186*       inc de
0409AB 10 F8       0187*       djnz subdec ; loop until b == 0
0409AD C9          0188*       ret
0409AE             0189*   
0409AE             0190*   ; http://www.z80.info/pseudo-random.txt
0409AE             0191*   rand_8:
0409AE C5          0192*       push bc
0409AF 3A C2 09 04 0193*       ld a,(r_seed)
0409B3 4F          0194*       ld c,a
0409B4             0195*   
0409B4 0F          0196*       rrca ; multiply by 32
0409B5 0F          0197*       rrca
0409B6 0F          0198*       rrca
0409B7 EE 1F       0199*       xor 0x1f
0409B9             0200*   
0409B9 81          0201*       add a,c
0409BA DE FF       0202*       sbc a,255 ; carry
0409BC             0203*   
0409BC 32 C2 09 04 0204*       ld (r_seed),a
0409C0 C1          0205*       pop bc
0409C1 C9          0206*       ret
0409C2 50          0207*   r_seed: defb $50
0409C3             0208*   
0409C3             0209*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
0409C3             0210*   prng24:
0409C3             0211*   ;;Expects ADL mode.
0409C3             0212*   ;;Output: HL
0409C3             0213*   ;;50cc
0409C3             0214*   ;;33 bytes
0409C3             0215*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
0409C3 ED 5B E4 09 0216*       ld de,(seed1)
       04          
0409C8 B7          0217*       or a
0409C9 ED 62       0218*       sbc hl,hl
0409CB 19          0219*       add hl,de
0409CC 29          0220*       add hl,hl
0409CD 29          0221*       add hl,hl
0409CE 2C          0222*       inc l
0409CF 19          0223*       add hl,de
0409D0 22 E4 09 04 0224*       ld (seed1),hl
0409D4 2A E7 09 04 0225*       ld hl,(seed2)
0409D8 29          0226*       add hl,hl
0409D9 9F          0227*       sbc a,a
0409DA E6 1B       0228*       and %00011011
0409DC AD          0229*       xor l
0409DD 6F          0230*       ld l,a
0409DE 22 E7 09 04 0231*       ld (seed2),hl
0409E2 19          0232*       add hl,de
0409E3 C9          0233*       ret
0409E4 00 00 00    0234*   seed1: dl 0
0409E7 00 00 00    0235*   seed2: dl 0
0409EA             0033        include "files.inc"
0409EA             0001*   ; load to onboard 8k sram
0409EA             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
0409EA             0034        include "fixed168.inc"
0409EA FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
040A00             0002*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040A00             0003*   ; uses EZ80 MLT instruction for speed
040A00             0004*   ; operation: UHL * A --> UHL
040A00             0005*   ; destroys: AF, HL
040A00             0006*   smul24x8:
040A00             0007*   ; make hl positive and store sign flag
040A00 CD 06 09 04 0008*       call hlu_abs
040A04 F5          0009*       push af
040A05             0010*   ; do the division
040A05 CD 10 0A 04 0011*       call mul24x8 ; hl = product
040A09             0012*   ; adjust sign of result
040A09 F1          0013*       pop af ; sign de
040A0A F0          0014*       ret p ; hl was positive, nothing to do
040A0B CD 16 09 04 0015*       call neg_hlu ; result is negative
040A0F C9          0016*       ret
040A10             0017*   
040A10             0018*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040A10             0019*   ; uses EZ80 MLT instruction for speed
040A10             0020*   ; operation: UHL * A --> AUHL
040A10             0021*   ; destroys: AF, HL
040A10             0022*   mul24x8:
040A10 D5          0023*       push de ; preserve de
040A11             0024*   ; low byte
040A11 5D          0025*       ld e,l
040A12 57          0026*       ld d,a
040A13 ED 5C       0027*       mlt de
040A15 6B          0028*       ld l,e ; product low byte
040A16 08          0029*       ex af,af' ; save multiplier
040A17 7A          0030*       ld a,d ; carry
040A18 08          0031*       ex af,af' ; save carry, restore multiplier
040A19             0032*   ; high byte
040A19 5C          0033*       ld e,h
040A1A 57          0034*       ld d,a
040A1B ED 5C       0035*       mlt de
040A1D 08          0036*       ex af,af' ; save multiplier, restore carry
040A1E 83          0037*       add a,e ; add carry
040A1F 67          0038*       ld h,a ; product middle byte
040A20 7A          0039*       ld a,d ; carry
040A21 08          0040*       ex af,af' ; save carry, restore multiplier
040A22             0041*   ; upper byte
040A22 22 3D 0A 04 0042*       ld (@scratch),hl ; 7 cycles
040A26 5F          0043*       ld e,a
040A27 3A 3F 0A 04 0044*       ld a,(@scratch+2)
040A2B 57          0045*       ld d,a
040A2C ED 5C       0046*       mlt de
040A2E 08          0047*       ex af,af' ; restore carry
040A2F 8B          0048*       adc a,e ; add carry
040A30 32 3F 0A 04 0049*       ld (@scratch+2),a ; 5 cycles
040A34 2A 3D 0A 04 0050*       ld hl,(@scratch) ; 7 cycles
040A38             0051*   ; highest byte
040A38 3E 00       0052*       ld a,0 ; preserve carry flag
040A3A 8A          0053*       adc a,d ; product highest byte
040A3B D1          0054*       pop de ; restore de
040A3C C9          0055*       ret
040A3D             0056*   @scratch: ds 3
040A40             0057*   
       FF FF FF 
040A40 00 00 00 00 0058*   mul24out: blkb 6,0
       00 00       
040A46             0059*   
040A46             0060*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040A46             0061*   ; operation: UHL * UDE --> mul24out
040A46             0062*   mul24:
040A46 DD E5       0063*       push ix ; preserve
040A48             0064*   ; point to output buffer and clear it
040A48 DD 21 40 0A 0065*       ld ix,mul24out
       04          
040A4D C5          0066*       push bc
040A4E 01 00 00 00 0067*       ld bc,0
040A52 DD 0F 00    0068*       ld (ix),bc
040A55 DD 0F 03    0069*       ld (ix+3),bc
040A58 C1          0070*       pop bc
040A59             0071*   ; STEP 1: UHL * E
040A59 7B          0072*       ld a,e
040A5A E5          0073*       push hl
040A5B CD 10 0A 04 0074*       call mul24x8
040A5F DD 2F 00    0075*       ld (ix+0),hl
040A62 DD 77 03    0076*       ld (ix+3),a
040A65             0077*   ; STEP 2: UHL * D
040A65 E1          0078*       pop hl
040A66 E5          0079*       push hl
040A67 7A          0080*       ld a,d
040A68 CD 10 0A 04 0081*       call mul24x8
040A6C CD 85 0A 04 0082*       call @accumulate
040A70             0083*   ; STEP 3: UHL * DEU
040A70 E1          0084*       pop hl
040A71 ED 53 B5 0A 0085*       ld (@de),de
       04          
040A76 3A B7 0A 04 0086*       ld a,(@de+2)
040A7A CD 10 0A 04 0087*       call mul24x8
040A7E CD 85 0A 04 0088*       call @accumulate
040A82             0089*   ; all done
040A82 DD E1       0090*       pop ix ; restore
040A84 C9          0091*       ret
040A85             0092*   @accumulate:
040A85 DD 23       0093*       inc ix
040A87             0094*   ; highest byte of product to carry
040A87 DD 77 03    0095*       ld (ix+3),a
040A8A             0096*   ; low byte of product
040A8A 7D          0097*       ld a,l
040A8B DD 86 00    0098*       add a,(ix+0)
040A8E DD 77 00    0099*       ld (ix+0),a
040A91             0100*   ; high byte of product
040A91 7C          0101*       ld a,h
040A92 DD 8E 01    0102*       adc a,(ix+1)
040A95 DD 77 01    0103*       ld (ix+1),a
040A98             0104*   ; uppper byte of product
040A98 22 B2 0A 04 0105*       ld (@hl),hl
040A9C 3A B4 0A 04 0106*       ld a,(@hl+2)
040AA0 DD 8E 02    0107*       adc a,(ix+2)
040AA3 DD 77 02    0108*       ld (ix+2),a
040AA6             0109*   ; carry
040AA6 3E 00       0110*       ld a,0 ; preserve flags
040AA8 DD 8E 03    0111*       adc a,(ix+3)
040AAB DD 77 03    0112*       ld (ix+3),a
040AAE C9          0113*       ret
040AAF             0114*   
040AAF 00 00 00    0115*   @ix: dl 0
040AB2 00 00 00    0116*   @hl: dl 0
040AB5 00 00 00    0117*   @de: dl 0
040AB8             0118*   
040AB8             0119*   ; UHL * UDE --> UHL (unsigned)
040AB8             0120*   umul24:
040AB8 CD 46 0A 04 0121*       call mul24
040ABC 2A 40 0A 04 0122*       ld hl,(mul24out)
040AC0 C9          0123*       ret
040AC1             0124*   
040AC1             0125*   ; UH.L = UH.L*UD.E (unsigned)
040AC1             0126*   umul168:
040AC1 CD 46 0A 04 0127*       call mul24
040AC5 2A 41 0A 04 0128*       ld hl,(mul24out+1)
040AC9 C9          0129*       ret
040ACA             0130*   
040ACA             0131*   ; UH.L * UD.E --> UH.L (signed)
040ACA             0132*   smul168:
040ACA             0133*   ; make everything positive and store sign flags
040ACA CD 06 09 04 0134*       call hlu_abs
040ACE F5          0135*       push af
040ACF EB          0136*       ex de,hl
040AD0 CD 06 09 04 0137*       call hlu_abs
040AD4 EB          0138*       ex de,hl
040AD5 F5          0139*       push af
040AD6             0140*   ; do the division
040AD6 CD C1 0A 04 0141*       call umul168 ; hl = product
040ADA             0142*   ; adjust sign of result
040ADA F1          0143*       pop af ; sign de
040ADB FA E6 0A 04 0144*       jp m,@de_neg
040ADF F1          0145*       pop af ; sign hl
040AE0 F0          0146*       ret p ; both positive, nothing to do
040AE1             0147*   @hl_neg:
040AE1 CD 16 09 04 0148*       call neg_hlu ; de pos, hl neg, result is negative
040AE5 C9          0149*       ret
040AE6             0150*   @de_neg:
040AE6 F1          0151*       pop af
040AE7 F8          0152*       ret m ; both negative, nothing to do
040AE8 CD 16 09 04 0153*       call neg_hlu ; result is negative
040AEC C9          0154*       ret
040AED             0155*   
040AED             0156*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040AED             0157*   ; perform unsigned division of 16.8 fixed place values
040AED             0158*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
040AED             0159*   udiv168:
040AED             0160*   ; back up divisor
040AED ED 53 24 0B 0161*       ld (@ude),de
       04          
040AF2             0162*   ; get the 16-bit integer part of the quotient
040AF2 CD 3E 07 04 0163*       call udiv24 ; de = quotient, hl = remainder
040AF6             0164*   ; load quotient to upper three bytes of output
040AF6 ED 53 2B 0B 0165*       ld (div168_out+1),de
       04          
040AFB             0166*   @div256:
040AFB             0167*   ; multiply remainder by 256
040AFB             0168*       hlu_mul256
040AFB 29          0001*M1     add hl,hl ; * 2
040AFC 29          0002*M1     add hl,hl ; * 4
040AFD 29          0003*M1     add hl,hl ; * 8
040AFE 29          0004*M1     add hl,hl ; * 16
040AFF 29          0005*M1     add hl,hl ; * 32
040B00 29          0006*M1     add hl,hl ; * 64
040B01 29          0007*M1     add hl,hl ; * 128
040B02 29          0008*M1     add hl,hl ; * 256
040B03             0169*   ; skip fractional computation if remainder is zero
040B03             0170*       sign_hlu
040B03 19          0001*M1     add hl,de
040B04 B7          0002*M1     or a ; clear flags
040B05 ED 52       0003*M1     sbc hl,de
040B07 20 03       0171*       jr nz,@div_frac
040B09 AF          0172*       xor a
040B0A 18 0A       0173*       jr @write_frac
040B0C             0174*   ; now divide the shifted remainder by the divisor
040B0C             0175*   @div_frac:
040B0C ED 5B 24 0B 0176*       ld de,(@ude) ; get back divisor
       04          
040B11 CD 3E 07 04 0177*       call udiv24 ; de = quotient, hl = remainder
040B15             0178*   ; load low byte of quotient to low byte of output
040B15 7B          0179*       ld a,e
040B16             0180*   @write_frac:
040B16 32 2A 0B 04 0181*       ld (div168_out),a
040B1A             0182*   ; load de with return value
040B1A ED 5B 2A 0B 0183*       ld de,(div168_out)
       04          
040B1F             0184*   ; load a with any overflow
040B1F 3A 2D 0B 04 0185*       ld a,(div168_out+3)
040B23 C9          0186*       ret ; ud.e is the 16.8 result
040B24             0187*   @ude: ds 6
040B2A             0188*   div168_out: ds 4 ; the extra byte is for overflow
040B2E             0189*   
040B2E             0190*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040B2E             0191*   ; perform signed division of 16.8 fixed place values
040B2E             0192*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040B2E             0193*   sdiv168:
040B2E             0194*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040B2E CD 06 09 04 0195*       call hlu_abs
040B32 F5          0196*       push af
040B33 EB          0197*       ex de,hl
040B34 CD 06 09 04 0198*       call hlu_abs
040B38 EB          0199*       ex de,hl
040B39 F5          0200*       push af
040B3A             0201*   ; do the division
040B3A CD ED 0A 04 0202*       call udiv168 ; de = quotient, hl = remainder
040B3E             0203*   ; adjust sign of result
040B3E F1          0204*       pop af ; sign de
040B3F FA 4C 0B 04 0205*       jp m,@de_neg
040B43 F1          0206*       pop af ; sign hl
040B44 F0          0207*       ret p ; both positive, nothing to do
040B45             0208*   @hl_neg:
040B45 EB          0209*       ex de,hl ; hl = quotient, de = remainder
040B46 CD 16 09 04 0210*       call neg_hlu ; de pos, hl neg, result is negative
040B4A EB          0211*       ex de,hl ; de = negated quotient, hl = remainder
040B4B C9          0212*       ret
040B4C             0213*   @de_neg:
040B4C F1          0214*       pop af
040B4D F8          0215*       ret m ; both negative, nothing to do
040B4E EB          0216*       ex de,hl ; hl = quotient, de = remainder
040B4F CD 16 09 04 0217*       call neg_hlu ; result is negative
040B53 EB          0218*       ex de,hl ; de = negated quotient, hl = remainder
040B54 C9          0219*       ret
040B55             0220*   
040B55             0221*   ; convert signed angles from a 360 to 256 degree circle
040B55             0222*   ; inputs: uh.l is the angle360 in 16.8 fixed format
040B55             0223*   ; outputs: uh.l is the angle256 in 16.8 fixed format
040B55             0224*   ; destroys: TODO
040B55             0225*   deg_360_to_256:
040B55 D5          0226*       push de ; preserve de
040B56             0227*   ; make angle positive and store sign flag
040B56 CD 06 09 04 0228*       call hlu_abs
040B5A F5          0229*       push af
040B5B             0230*   ; multiply by coversion factor of 256/360
040B5B 11 B6 00 00 0231*       ld de,0x0000B6 ; 0.711
040B5F CD C1 0A 04 0232*       call umul168 ; uh.l = uh.l * 0.711
040B63             0233*   ; restore sign flag and adjust output accordingly
040B63 F1          0234*       pop af
040B64 F2 6C 0B 04 0235*       jp p,@pos ; positive number
040B68 CD 16 09 04 0236*       call neg_hlu
040B6C             0237*   @pos:
040B6C             0238*   ; restore de and return uh.l as the result
040B6C D1          0239*       pop de
040B6D C9          0240*       ret
040B6E             0241*   
040B6E             0242*   ; convert signed angles from a 256 to 360 degree circle
040B6E             0243*   ; inputs: uh.l is the angle256 in 16.8 fixed format
040B6E             0244*   ; outputs: uh.l is the angle360 in 16.8 fixed format
040B6E             0245*   ; destroys: TODO
040B6E             0246*   deg_256_to_360:
040B6E D5          0247*       push de ; preserve de
040B6F             0248*   ; make angle positive and store sign flag
040B6F CD 06 09 04 0249*       call hlu_abs
040B73 F5          0250*       push af
040B74             0251*   ; multiply by coversion factor of 360/256
040B74 11 68 01 00 0252*       ld de,0x000168 ; 1.406
040B78 CD C1 0A 04 0253*       call umul168 ; uh.l = uh.l * 1.406
040B7C             0254*   ; restore sign flag and adjust output accordingly
040B7C F1          0255*       pop af
040B7D F2 85 0B 04 0256*       jp p,@pos ; positive number
040B81 CD 16 09 04 0257*       call neg_hlu
040B85             0258*   @pos:
040B85             0259*   ; restore de and return uh.l as the result
040B85 D1          0260*       pop de
040B86 C9          0261*       ret
040B87             0262*   
040B87             0263*   ; fixed 16.8 routine
040B87             0264*   ; cos(uh.l) --> uh.l
040B87             0265*   ; destroys: f, hl
040B87             0266*   cos168:
040B87 D5          0267*       push de ; preserve de
040B88             0268*   ; for cos we simply increment the angle by 90 degrees
040B88             0269*   ; or 0x004000 in 16.8 degrees256
040B88             0270*   ; which makes it a sin problem
040B88 11 00 40 00 0271*       ld de,0x004000
040B8C 19          0272*       add hl,de ; modulo 256 happens below
040B8D D1          0273*       pop de ; restore de
040B8E             0274*   ; fall through to sin168
040B8E             0275*   
040B8E             0276*   ; ---------------------
040B8E             0277*   ; fixed 16.8 routine
040B8E             0278*   ; sin(uh.l) --> uh.l
040B8E             0279*   ; destroys: f, hl
040B8E             0280*   sin168:
040B8E D5          0281*       push de
040B8F             0282*   ; handle negative angles appropriately
040B8F CD 06 09 04 0283*       call hlu_abs
040B93 F2 9C 0B 04 0284*       jp p,@F
040B97 11 00 00 FF 0285*       ld de,-256*256
040B9B 19          0286*       add hl,de
040B9C             0287*   @@:
040B9C 2E 03       0288*       ld l,3 ; multiply by 3 to get our lookup index
040B9E ED 6C       0289*       mlt hl
040BA0 11 4E 0E 04 0290*       ld de,sin_lut_168 ; grab the lut address
040BA4 19          0291*       add hl,de ; bump hl by the index
040BA5 ED 27       0292*       ld hl,(hl) ; don't try this on a z80!
040BA7 D1          0293*       pop de
040BA8 C9          0294*       ret
040BA9             0295*   
040BA9             0296*   ; 16.8 fixed inputs / outputs
040BA9             0297*   ; takes: uh.l as angle in degrees 256
040BA9             0298*   ;        ud.e as radius
040BA9             0299*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
040BA9             0300*   ;        displacements from origin (0,0)
040BA9             0301*   ; destroys: everything except indexes
040BA9             0302*   polar_to_cartesian:
040BA9             0303*   ; back up input parameters
040BA9 22 D8 0B 04 0304*       ld (@angle), hl
040BAD ED 53 DB 0B 0305*       ld (@radius), de
       04          
040BB2             0306*   ; compute dx = sin(uh.l) * ud.e
040BB2 CD 8E 0B 04 0307*       call sin168 ; uh.l = sin(uh.l)
040BB6 ED 5B DB 0B 0308*       ld de,(@radius)
       04          
040BBB CD CA 0A 04 0309*       call smul168 ; uh.l = dx
040BBF E5          0310*       push hl
040BC0             0311*   ; compute dy = -cos(uh.l) * ud.e
040BC0 2A D8 0B 04 0312*       ld hl,(@angle)
040BC4 CD 87 0B 04 0313*       call cos168 ; uh.l = cos(uh.l)
040BC8 ED 5B DB 0B 0314*       ld de,(@radius)
       04          
040BCD CD CA 0A 04 0315*       call smul168 ; uh.l = dy
040BD1 CD 16 09 04 0316*       call neg_hlu ; invert dy for screen coords convention
040BD5 EB          0317*       ex de,hl ; de = dy for output
040BD6 C1          0318*       pop bc ; bc = dx for output
040BD7             0319*   ; and out
040BD7 C9          0320*       ret
040BD8             0321*   @angle: ds 3
040BDB             0322*   @radius: ds 3
040BDE             0323*   
040BDE             0324*   ; 16.8 fixed inputs / outputs
040BDE             0325*   ; inputs: ub.c as dx, ud.e as dy
040BDE             0326*   ;        displacements from origin (0,0)
040BDE             0327*   ; returns: uh.l as angle in degrees 256
040BDE             0328*   ;        ud.e as radius
040BDE             0329*   ; destroys: everything except indexes
040BDE             0330*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040BDE ED 43 37 0C 0331*       ld (dx168),bc ; dx argument for distance168
       04          
040BE3 ED 53 3D 0C 0332*       ld (dy168),de ; dy argument for distance168
       04          
040BE8             0333*   ; compute radius
040BE8 CD 43 0C 04 0334*       call distance168 ; uh.l = radius
040BEC E5          0335*       push hl ; save radius
040BED             0336*   ; compute angle
040BED ED 4B 37 0C 0337*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040BF2 ED 5B 3D 0C 0338*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040BF7 CD 9D 0C 04 0339*       call atan2_168fast ; uh.l = angle
040BFB             0340*   ; return result
040BFB D1          0341*       pop de ; de = radius (was hl)
040BFC C9          0342*       ret
040BFD             0343*   ; end cartesian_to_polar
040BFD             0344*   
040BFD             0345*   ; 16.8 fixed inputs / outputs
040BFD             0346*   ; inputs: ub.c as dx, ud.e as dy
040BFD             0347*   ;        displacements from origin (0,0)
040BFD             0348*   ; returns: uh.l as angle in degrees 256
040BFD             0349*   ;        ud.e as radius
040BFD             0350*   ; destroys: everything except indexes
040BFD             0351*   ; note: uses distance168sm which is more accurate for small deltas
040BFD             0352*   cartesian_to_polar_sm:
040BFD ED 43 37 0C 0353*       ld (dx168),bc ; dx argument for distance168
       04          
040C02 ED 53 3D 0C 0354*       ld (dy168),de ; dy argument for distance168
       04          
040C07             0355*   ; compute radius
040C07 CD 78 0C 04 0356*       call distance168sm ; uh.l = radius
040C0B E5          0357*       push hl ; save radius
040C0C             0358*   ; compute angle
040C0C ED 4B 37 0C 0359*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040C11 ED 5B 3D 0C 0360*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040C16 CD 9D 0C 04 0361*       call atan2_168fast ; uh.l = angle
040C1A             0362*   ; return result
040C1A D1          0363*       pop de ; de = radius (was hl)
040C1B C9          0364*       ret
040C1C             0365*   ; end cartesian_to_polar
040C1C             0366*   
040C1C             0367*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040C1C             0368*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040C1C             0369*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040C1C             0370*   ;         also populates scratch locations dx168 and dy168
040C1C             0371*   ; destroys: a,hl,bc,de
040C1C             0372*   dxy168:
040C1C             0373*   ; compute dx = x1-x0
040C1C AF          0374*       xor a ; clear carry
040C1D DD E5       0375*       push ix ; move ix to hl via the stack
040C1F E1          0376*       pop hl ; hl = x1
040C20 ED 42       0377*       sbc hl,bc ; hl = dx
040C22 22 37 0C 04 0378*       ld (dx168),hl ; dx to scratch
040C26             0379*   ; compute dy = y1-y0
040C26 AF          0380*       xor a ; clear carry
040C27 FD E5       0381*       push iy ; move iy to hl via the stack
040C29 E1          0382*       pop hl ; hl = y1
040C2A ED 52       0383*       sbc hl,de ; hl = dy
040C2C 22 3D 0C 04 0384*       ld (dy168),hl ; dy to scratch
040C30             0385*   ; populate output registers and return
040C30 EB          0386*       ex de,hl ; ud.e = dy
040C31 ED 4B 37 0C 0387*       ld bc,(dx168) ; ub.c = dx
       04          
040C36 C9          0388*       ret
040C37 00 00 00 00 0389*   dx168: blkb 6,0
       00 00       
040C3D 00 00 00 00 0390*   dy168: blkb 6,0
       00 00       
040C43             0391*   
040C43             0392*   ; compute the euclidian distance between two cartesian coordinates
040C43             0393*   ; using the formula d = sqrt(dx^2+dy^2)
040C43             0394*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C43             0395*   ; output; uh.l is the 16.8 fixed format distance
040C43             0396*   ;         also populates scratch locations dx168 and dy168
040C43             0397*   ; destroys: a,hl,bc,de
040C43             0398*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
040C43             0399*   ;       thus the result will always be an integer, albeit in 16.8 format
040C43             0400*   distance168:
040C43             0401*   ; compute dy^2
040C43 2A 3D 0C 04 0402*       ld hl,(dy168)
040C47 CD 06 09 04 0403*       call hlu_abs
040C4B CD 6D 09 04 0404*       call hlu_udiv256 ; make integer to avoid overflow
040C4F E5          0405*       push hl
040C50 D1          0406*       pop de
040C51 CD B8 0A 04 0407*       call umul24 ; hl = dy^2
040C55 E5          0408*       push hl ; save dy^2
040C56             0409*   ; compute dx^2
040C56 2A 37 0C 04 0410*       ld hl,(dx168)
040C5A CD 06 09 04 0411*       call hlu_abs
040C5E CD 6D 09 04 0412*       call hlu_udiv256 ; make integer to avoid overflow
040C62 E5          0413*       push hl
040C63 D1          0414*       pop de
040C64 CD B8 0A 04 0415*       call umul24 ; hl = dx^2
040C68             0416*   ; add dx^2 and dy^2
040C68 D1          0417*       pop de ; de = dy^2 (was hl)
040C69 19          0418*       add hl,de ; hl = dx^2 + dy^2
040C6A             0419*   ; compute the square root
040C6A CD 68 0D 04 0420*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C6E EB          0421*       ex de,hl ; hl = distance
040C6F             0422*       hlu_mul256 ; convert back to 16.8 fixed
040C6F 29          0001*M1     add hl,hl ; * 2
040C70 29          0002*M1     add hl,hl ; * 4
040C71 29          0003*M1     add hl,hl ; * 8
040C72 29          0004*M1     add hl,hl ; * 16
040C73 29          0005*M1     add hl,hl ; * 32
040C74 29          0006*M1     add hl,hl ; * 64
040C75 29          0007*M1     add hl,hl ; * 128
040C76 29          0008*M1     add hl,hl ; * 256
040C77 C9          0423*       ret
040C78             0424*   
040C78             0425*   ; compute the euclidian distance between two cartesian coordinates
040C78             0426*   ; using the formula d = sqrt(dx^2+dy^2)
040C78             0427*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C78             0428*   ; output; uh.l is the 16.8 fixed format distance
040C78             0429*   ;         also populates scratch locations dx168 and dy168
040C78             0430*   ; destroys: a,hl,bc,de
040C78             0431*   ; NOTE: sm means 'small' because it doesn't round down the deltas
040C78             0432*   ;       making it more accurate for small deltas,
040C78             0433*   ;       but will overflow if used for screen-sized deltas
040C78             0434*   distance168sm:
040C78             0435*   ; compute dy^2
040C78 2A 3D 0C 04 0436*       ld hl,(dy168)
040C7C CD 06 09 04 0437*       call hlu_abs
040C80 E5          0438*       push hl
040C81 D1          0439*       pop de
040C82 CD B8 0A 04 0440*       call umul24 ; hl = dy^2
040C86 E5          0441*       push hl ; save dy^2
040C87             0442*   ; compute dx^2
040C87 2A 37 0C 04 0443*       ld hl,(dx168)
040C8B CD 06 09 04 0444*       call hlu_abs
040C8F E5          0445*       push hl
040C90 D1          0446*       pop de
040C91 CD B8 0A 04 0447*       call umul24 ; hl = dx^2
040C95             0448*   ; add dx^2 and dy^2
040C95 D1          0449*       pop de ; de = dy^2 (was hl)
040C96 19          0450*       add hl,de ; hl = dx^2 + dy^2
040C97             0451*   ; compute the square root
040C97 CD 68 0D 04 0452*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C9B EB          0453*       ex de,hl ; hl = distance
040C9C C9          0454*       ret
040C9D             0455*   
040C9D             0456*   ; atan2_(ub.c,ud.e) --> uh.l
040C9D             0457*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040C9D             0458*   ;   whether inputs are integers or fractional doesn't matter
040C9D             0459*   ;   so long as the sign bit of the upper byte is correct
040C9D             0460*   ; output: uh.l is the 16.8 fixed angle in degrees 256
040C9D             0461*   ; angles are COMPASS HEADINGS based on
040C9D             0462*   ; screen coordinate conventions,where the y axis is flipped
040C9D             0463*   ; #E0 224      0       32 #20
040C9D             0464*   ;        -x,-y | +x,-y
040C9D             0465*   ; #C0 192------+------ 64 #40
040C9D             0466*   ;        -x,+y | +x,+y
040C9D             0467*   ; #A0 160   128 #80   96 #60
040C9D             0468*   atan2_168fast:
040C9D             0469*   ; get signs and make everything positive
040C9D             0470*   ; get abs(x) and store its original sign
040C9D C5          0471*       push bc
040C9E E1          0472*       pop hl
040C9F CD 06 09 04 0473*       call hlu_abs ; if x was negative this also sets the sign flag
040CA3 E5          0474*       push hl ; store abs(x)
040CA4 C1          0475*       pop bc ; bc = abs(x)
040CA5 F5          0476*       push af ; store sign of x
040CA6             0477*   ; get abs(y) and store its original sign
040CA6 EB          0478*       ex de,hl ; hl = y
040CA7 CD 06 09 04 0479*       call hlu_abs ; if y was negative this also sets the sign flag
040CAB EB          0480*       ex de,hl ; de = abs(y)
040CAC F5          0481*       push af ; store sign of y
040CAD             0482*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
040CAD             0483*   ; this ensures that our lookup value is between 0 and 1 inclusive
040CAD AF          0484*       xor a ; clear the carry flag
040CAE D5          0485*       push de
040CAF E1          0486*       pop hl
040CB0 ED 42       0487*       sbc hl,bc
040CB2 F5          0488*       push af ; save sign of de - bc
040CB3 F2 BC 0C 04 0489*       jp p,@1 ; bc <= de, so we skip ahead
040CB7             0490*   ; otherwise we swap bc and de
040CB7 C5          0491*       push bc
040CB8 E1          0492*       pop hl
040CB9 EB          0493*       ex de,hl
040CBA E5          0494*       push hl
040CBB C1          0495*       pop bc
040CBC             0496*   @1:
040CBC             0497*   ; now we're ready to snag our preliminary result
040CBC C5          0498*       push bc
040CBD E1          0499*       pop hl
040CBE CD 2C 0D 04 0500*       call atan_168fast ; uh.l comes back with prelim result
040CC2             0501*   ; now we adjust uh.l based on sign of de - bc
040CC2 F1          0502*       pop af
040CC3 F2 CF 0C 04 0503*       jp p,@2 ; bc <= de,so we skip ahead
040CC7 EB          0504*       ex de,hl
040CC8 21 00 40 00 0505*       ld hl,64*256 ; subtract from 64 (90) degrees
040CCC AF          0506*       xor a ; clear the carry flag
040CCD ED 52       0507*       sbc hl,de
040CCF             0508*   @2:
040CCF             0509*   ; adjust the result based on quadrant
040CCF             0510*   ; #E0 224      0       32 #20
040CCF             0511*   ;        -x,-y | +x,-y
040CCF             0512*   ; #C0 192------+------ 64 #40
040CCF             0513*   ;        -x,+y | +x,+y
040CCF             0514*   ; #A0 160   128 #80   96 #60
040CCF F1          0515*       pop af ; sign of y
040CD0 CA 0D 0D 04 0516*       jp z,@y_zero
040CD4 F2 ED 0C 04 0517*       jp p,@y_pos
040CD8             0518*   ; y neg,check x
040CD8 F1          0519*       pop af ; sign of x
040CD9 CA E7 0C 04 0520*       jp z,@y_neg_x_zero
040CDD F2 EC 0C 04 0521*       jp p,@y_neg_x_pos
040CE1             0522*   ; y neg,x neg
040CE1             0523*   ; angle is 128 to 256 (270 to 360)
040CE1             0524*   ; negating the intermediate does the trick
040CE1 CD 16 09 04 0525*       call neg_hlu
040CE5 18 31       0526*       jr @zero_hlu
040CE7             0527*   
040CE7             0528*   @y_neg_x_zero:
040CE7             0529*   ; y neg,x zero
040CE7             0530*   ; angle is 0
040CE7 21 00 00 00 0531*       ld hl,0
040CEB C9          0532*       ret
040CEC             0533*   @y_neg_x_pos:
040CEC             0534*   ; y neg,x pos
040CEC             0535*   ; angle is 0 to 64 (0 to 90)
040CEC             0536*   ; so we're good
040CEC C9          0537*       ret
040CED             0538*   
040CED             0539*   @y_pos:
040CED F1          0540*       pop af ; sign of x
040CEE CA FD 0C 04 0541*       jp z,@y_pos_x_zero
040CF2 F2 02 0D 04 0542*       jp p,@y_pos_x_pos
040CF6             0543*   ; y pos,x neg
040CF6             0544*   ; angle is 128 to 192 (180-270)
040CF6             0545*   ; so we add 128 to intermediate
040CF6 11 00 80 00 0546*       ld de,128*256
040CFA 19          0547*       add hl,de
040CFB 18 1B       0548*       jr @zero_hlu
040CFD             0549*   @y_pos_x_zero:
040CFD             0550*   ; y pos,x zero
040CFD             0551*   ; angle is 128 (180)
040CFD 21 00 80 00 0552*       ld hl,128*256
040D01 C9          0553*       ret
040D02             0554*   @y_pos_x_pos:
040D02             0555*   ; y pos,x pos
040D02             0556*   ; angle is 64 to 128 (90 to 180)
040D02             0557*   ; neg the intermediate and add 180 degrees
040D02 CD 16 09 04 0558*       call neg_hlu
040D06 11 00 80 00 0559*       ld de,128*256
040D0A 19          0560*       add hl,de
040D0B 18 0B       0561*       jr @zero_hlu
040D0D             0562*   
040D0D             0563*   @y_zero:
040D0D F1          0564*       pop af ; sign of x
040D0E FA 13 0D 04 0565*       jp m,@y_zero_x_neg
040D12             0566*   ; y zero,x pos
040D12             0567*   ; angle is 64 (90),nothing to do
040D12 C9          0568*       ret
040D13             0569*   @y_zero_x_neg:
040D13             0570*   ; y zero ,x neg
040D13             0571*   ; angle is 192 (270)
040D13 21 00 C0 00 0572*       ld hl,192*256
040D17 C9          0573*       ret
040D18             0574*   @zero_hlu:
040D18 AF          0575*       xor a
040D19 22 26 0D 04 0576*       ld (@scratch),hl
040D1D 32 28 0D 04 0577*       ld (@scratch+2),a
040D21 2A 26 0D 04 0578*       ld hl,(@scratch)
040D25 C9          0579*       ret
040D26             0580*   @scratch: ds 6
040D2C             0581*   
040D2C             0582*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040D2C             0583*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
040D2C             0584*   ; destroys: a,hl,bc,de
040D2C             0585*   ; note: only works for angles from 0 to 32 (45) degrees
040D2C             0586*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040D2C             0587*   atan_168fast:
040D2C             0588*   ; because we use compass headings instead of geometric angles
040D2C             0589*   ; we compute dx/dy which is 1/tan(theta) in the maths world
040D2C             0590*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
040D2C CD ED 0A 04 0591*       call udiv168 ; ud.e = dx/dy
040D30 EB          0592*       ex de,hl ; uh.l = dx/dy
040D31             0593*   ; test uh.l for 0
040D31 19          0594*       add hl,de
040D32 B7          0595*       or a
040D33 ED 52       0596*       sbc hl,de
040D35 28 22       0597*       jr z,@is_zero
040D37             0598*   ; test uh.l for 1
040D37 AF          0599*       xor a ; clear carry
040D38 EB          0600*       ex de,hl
040D39 21 00 01 00 0601*       ld hl,1*256 ; 1 in 16.8 fixed format
040D3D ED 52       0602*       sbc hl,de
040D3F 28 13       0603*       jr z,@is_45
040D41 EB          0604*       ex de,hl
040D42             0605*   ; no special cases so we move on
040D42             0606*   ; l contains the fractional portion of tan(uh.l)
040D42             0607*   ; we multiply it by three to get our lookup table index
040D42 26 03       0608*       ld h,3
040D44 ED 6C       0609*       mlt hl ; index into lut
040D46 11 00 00 00 0610*       ld de,0 ; clear deu
040D4A 54          0611*       ld d,h ; copy hl to de
040D4B 5D          0612*       ld e,l ; de contains our index
040D4C 21 51 11 04 0613*       ld hl,atan_lut_168 ; grab the lut address
040D50 19          0614*       add hl,de ; bump hl by the index
040D51 ED 27       0615*       ld hl,(hl) ; don't try this on a z80!
040D53 C9          0616*       ret ; and out
040D54             0617*   @is_45:
040D54 21 00 20 00 0618*       ld hl,32*256
040D58 C9          0619*       ret
040D59             0620*   ; for the case tan(0)
040D59             0621*   @is_zero:
040D59 21 00 00 00 0622*       ld hl,0*256
040D5D C9          0623*       ret
040D5E             0624*   
040D5E             0625*   ; Expects  ADL mode
040D5E             0626*   ; Inputs:  UH.L
040D5E             0627*   ; Outputs: UH.L is the 16.8 square root
040D5E             0628*   ;          UDE is the integer difference inputHL-DE^2
040D5E             0629*   sqrt168:
040D5E CD 68 0D 04 0630*       call sqrt24
040D62 EB          0631*       ex de,hl
040D63 29          0632*       add hl,hl
040D64 29          0633*       add hl,hl
040D65 29          0634*       add hl,hl
040D66 29          0635*       add hl,hl
040D67 C9          0636*       ret
040D68             0637*   
040D68             0638*   ; credit: xeda112358
040D68             0639*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040D68             0640*   sqrt24:
040D68             0641*   ; Expects ADL mode
040D68             0642*   ; Inputs: HL
040D68             0643*   ; Outputs: DE is the integer square root
040D68             0644*   ;  HL is the difference inputHL-DE^2
040D68             0645*   ;  c flag reset
040D68 01 00 00 00 0646*       ld bc,0 ; clear bcu
040D6C 11 00 00 00 0647*       ld de,0 ; clear deu
040D70 AF          0648*       xor a
040D71 45          0649*       ld b,l
040D72 C5          0650*       push bc
040D73 47          0651*       ld b,a
040D74 6F          0652*       ld l,a
040D75             0653*   ; Iteration 1
040D75 29          0654*       add hl,hl
040D76 CB 11       0655*       rl c
040D78 29          0656*       add hl,hl
040D79 CB 11       0657*       rl c
040D7B 91          0658*       sub c
040D7C 30 04       0659*       jr nc,$+6
040D7E 1C          0660*       inc e
040D7F 1C          0661*       inc e
040D80 2F          0662*       cpl
040D81 4F          0663*       ld c,a
040D82             0664*   ; Iteration 2
040D82 29          0665*       add hl,hl
040D83 CB 11       0666*       rl c
040D85 29          0667*       add hl,hl
040D86 CB 11       0668*       rl c
040D88 CB 13       0669*       rl e
040D8A 7B          0670*       ld a,e
040D8B 91          0671*       sub c
040D8C 30 04       0672*       jr nc,$+6
040D8E 1C          0673*       inc e
040D8F 1C          0674*       inc e
040D90 2F          0675*       cpl
040D91 4F          0676*       ld c,a
040D92             0677*   ; Iteration 3
040D92 29          0678*       add hl,hl
040D93 CB 11       0679*       rl c
040D95 29          0680*       add hl,hl
040D96 CB 11       0681*       rl c
040D98 CB 13       0682*       rl e
040D9A 7B          0683*       ld a,e
040D9B 91          0684*       sub c
040D9C 30 04       0685*       jr nc,$+6
040D9E 1C          0686*       inc e
040D9F 1C          0687*       inc e
040DA0 2F          0688*       cpl
040DA1 4F          0689*       ld c,a
040DA2             0690*   ; Iteration 4
040DA2 29          0691*       add hl,hl
040DA3 CB 11       0692*       rl c
040DA5 29          0693*       add hl,hl
040DA6 CB 11       0694*       rl c
040DA8 CB 13       0695*       rl e
040DAA 7B          0696*       ld a,e
040DAB 91          0697*       sub c
040DAC 30 04       0698*       jr nc,$+6
040DAE 1C          0699*       inc e
040DAF 1C          0700*       inc e
040DB0 2F          0701*       cpl
040DB1 4F          0702*       ld c,a
040DB2             0703*   ; Iteration 5
040DB2 29          0704*       add hl,hl
040DB3 CB 11       0705*       rl c
040DB5 29          0706*       add hl,hl
040DB6 CB 11       0707*       rl c
040DB8 CB 13       0708*       rl e
040DBA 7B          0709*       ld a,e
040DBB 91          0710*       sub c
040DBC 30 04       0711*       jr nc,$+6
040DBE 1C          0712*       inc e
040DBF 1C          0713*       inc e
040DC0 2F          0714*       cpl
040DC1 4F          0715*       ld c,a
040DC2             0716*   ; Iteration 6
040DC2 29          0717*       add hl,hl
040DC3 CB 11       0718*       rl c
040DC5 29          0719*       add hl,hl
040DC6 CB 11       0720*       rl c
040DC8 CB 13       0721*       rl e
040DCA 7B          0722*       ld a,e
040DCB 91          0723*       sub c
040DCC 30 04       0724*       jr nc,$+6
040DCE 1C          0725*       inc e
040DCF 1C          0726*       inc e
040DD0 2F          0727*       cpl
040DD1 4F          0728*       ld c,a
040DD2             0729*   ; Iteration 7
040DD2 29          0730*       add hl,hl
040DD3 CB 11       0731*       rl c
040DD5 29          0732*       add hl,hl
040DD6 CB 11       0733*       rl c
040DD8 CB 10       0734*       rl b
040DDA EB          0735*       ex de,hl
040DDB 29          0736*       add hl,hl
040DDC E5          0737*       push hl
040DDD ED 42       0738*       sbc hl,bc
040DDF 30 06       0739*       jr nc,$+8
040DE1 7C          0740*       ld a,h
040DE2 2F          0741*       cpl
040DE3 47          0742*       ld b,a
040DE4 7D          0743*       ld a,l
040DE5 2F          0744*       cpl
040DE6 4F          0745*       ld c,a
040DE7 E1          0746*       pop hl
040DE8 30 02       0747*       jr nc,$+4
040DEA 23          0748*       inc hl
040DEB 23          0749*       inc hl
040DEC EB          0750*       ex de,hl
040DED             0751*   ; Iteration 8
040DED 29          0752*       add hl,hl
040DEE 69          0753*       ld l,c
040DEF 60          0754*       ld h,b
040DF0 ED 6A       0755*       adc hl,hl
040DF2 ED 6A       0756*       adc hl,hl
040DF4 EB          0757*       ex de,hl
040DF5 29          0758*       add hl,hl
040DF6 ED 52       0759*       sbc hl,de
040DF8 19          0760*       add hl,de
040DF9 EB          0761*       ex de,hl
040DFA 30 04       0762*       jr nc,$+6
040DFC ED 52       0763*       sbc hl,de
040DFE 13          0764*       inc de
040DFF 13          0765*       inc de
040E00             0766*   ; Iteration 9
040E00 F1          0767*       pop af
040E01 17          0768*       rla
040E02 ED 6A       0769*       adc hl,hl
040E04 17          0770*       rla
040E05 ED 6A       0771*       adc hl,hl
040E07 EB          0772*       ex de,hl
040E08 29          0773*       add hl,hl
040E09 ED 52       0774*       sbc hl,de
040E0B 19          0775*       add hl,de
040E0C EB          0776*       ex de,hl
040E0D 30 04       0777*       jr nc,$+6
040E0F ED 52       0778*       sbc hl,de
040E11 13          0779*       inc de
040E12 13          0780*       inc de
040E13             0781*   ; Iteration 10
040E13 17          0782*       rla
040E14 ED 6A       0783*       adc hl,hl
040E16 17          0784*       rla
040E17 ED 6A       0785*       adc hl,hl
040E19 EB          0786*       ex de,hl
040E1A 29          0787*       add hl,hl
040E1B ED 52       0788*       sbc hl,de
040E1D 19          0789*       add hl,de
040E1E EB          0790*       ex de,hl
040E1F 30 04       0791*       jr nc,$+6
040E21 ED 52       0792*       sbc hl,de
040E23 13          0793*       inc de
040E24 13          0794*       inc de
040E25             0795*   ; Iteration 11
040E25 17          0796*       rla
040E26 ED 6A       0797*       adc hl,hl
040E28 17          0798*       rla
040E29 ED 6A       0799*       adc hl,hl
040E2B EB          0800*       ex de,hl
040E2C 29          0801*       add hl,hl
040E2D ED 52       0802*       sbc hl,de
040E2F 19          0803*       add hl,de
040E30 EB          0804*       ex de,hl
040E31 30 04       0805*       jr nc,$+6
040E33 ED 52       0806*       sbc hl,de
040E35 13          0807*       inc de
040E36 13          0808*       inc de
040E37             0809*   ; Iteration 12
040E37 17          0810*       rla
040E38 ED 6A       0811*       adc hl,hl
040E3A 17          0812*       rla
040E3B ED 6A       0813*       adc hl,hl
040E3D EB          0814*       ex de,hl
040E3E 29          0815*       add hl,hl
040E3F ED 52       0816*       sbc hl,de
040E41 19          0817*       add hl,de
040E42 EB          0818*       ex de,hl
040E43 30 04       0819*       jr nc,$+6
040E45 ED 52       0820*       sbc hl,de
040E47 13          0821*       inc de
040E48 13          0822*       inc de
040E49 CB 1A       0823*       rr d
040E4B CB 1B       0824*       rr e
040E4D C9          0825*       ret
040E4E             0826*   
040E4E             0827*   sin_lut_168:
040E4E 00 00 00    0828*       dl 0x000000 ; 0.000 00, 0.000
040E51 06 00 00    0829*       dl 0x000006 ; 1.406 01, 0.025
040E54 0C 00 00    0830*       dl 0x00000C ; 2.813 02, 0.049
040E57 12 00 00    0831*       dl 0x000012 ; 4.219 03, 0.074
040E5A 19 00 00    0832*       dl 0x000019 ; 5.625 04, 0.098
040E5D 1F 00 00    0833*       dl 0x00001F ; 7.031 05, 0.122
040E60 25 00 00    0834*       dl 0x000025 ; 8.438 06, 0.147
040E63 2B 00 00    0835*       dl 0x00002B ; 9.844 07, 0.171
040E66 31 00 00    0836*       dl 0x000031 ; 11.250 08, 0.195
040E69 38 00 00    0837*       dl 0x000038 ; 12.656 09, 0.219
040E6C 3E 00 00    0838*       dl 0x00003E ; 14.063 0A, 0.243
040E6F 44 00 00    0839*       dl 0x000044 ; 15.469 0B, 0.267
040E72 4A 00 00    0840*       dl 0x00004A ; 16.875 0C, 0.290
040E75 50 00 00    0841*       dl 0x000050 ; 18.281 0D, 0.314
040E78 56 00 00    0842*       dl 0x000056 ; 19.688 0E, 0.337
040E7B 5C 00 00    0843*       dl 0x00005C ; 21.094 0F, 0.360
040E7E 61 00 00    0844*       dl 0x000061 ; 22.500 10, 0.383
040E81 67 00 00    0845*       dl 0x000067 ; 23.906 11, 0.405
040E84 6D 00 00    0846*       dl 0x00006D ; 25.313 12, 0.428
040E87 73 00 00    0847*       dl 0x000073 ; 26.719 13, 0.450
040E8A 78 00 00    0848*       dl 0x000078 ; 28.125 14, 0.471
040E8D 7E 00 00    0849*       dl 0x00007E ; 29.531 15, 0.493
040E90 83 00 00    0850*       dl 0x000083 ; 30.938 16, 0.514
040E93 88 00 00    0851*       dl 0x000088 ; 32.344 17, 0.535
040E96 8E 00 00    0852*       dl 0x00008E ; 33.750 18, 0.556
040E99 93 00 00    0853*       dl 0x000093 ; 35.156 19, 0.576
040E9C 98 00 00    0854*       dl 0x000098 ; 36.563 1A, 0.596
040E9F 9D 00 00    0855*       dl 0x00009D ; 37.969 1B, 0.615
040EA2 A2 00 00    0856*       dl 0x0000A2 ; 39.375 1C, 0.634
040EA5 A7 00 00    0857*       dl 0x0000A7 ; 40.781 1D, 0.653
040EA8 AB 00 00    0858*       dl 0x0000AB ; 42.188 1E, 0.672
040EAB B0 00 00    0859*       dl 0x0000B0 ; 43.594 1F, 0.690
040EAE B5 00 00    0860*       dl 0x0000B5 ; 45.000 20, 0.707
040EB1 B9 00 00    0861*       dl 0x0000B9 ; 46.406 21, 0.724
040EB4 BD 00 00    0862*       dl 0x0000BD ; 47.813 22, 0.741
040EB7 C1 00 00    0863*       dl 0x0000C1 ; 49.219 23, 0.757
040EBA C5 00 00    0864*       dl 0x0000C5 ; 50.625 24, 0.773
040EBD C9 00 00    0865*       dl 0x0000C9 ; 52.031 25, 0.788
040EC0 CD 00 00    0866*       dl 0x0000CD ; 53.438 26, 0.803
040EC3 D1 00 00    0867*       dl 0x0000D1 ; 54.844 27, 0.818
040EC6 D4 00 00    0868*       dl 0x0000D4 ; 56.250 28, 0.831
040EC9 D8 00 00    0869*       dl 0x0000D8 ; 57.656 29, 0.845
040ECC DB 00 00    0870*       dl 0x0000DB ; 59.063 2A, 0.858
040ECF DE 00 00    0871*       dl 0x0000DE ; 60.469 2B, 0.870
040ED2 E1 00 00    0872*       dl 0x0000E1 ; 61.875 2C, 0.882
040ED5 E4 00 00    0873*       dl 0x0000E4 ; 63.281 2D, 0.893
040ED8 E7 00 00    0874*       dl 0x0000E7 ; 64.688 2E, 0.904
040EDB EA 00 00    0875*       dl 0x0000EA ; 66.094 2F, 0.914
040EDE EC 00 00    0876*       dl 0x0000EC ; 67.500 30, 0.924
040EE1 EE 00 00    0877*       dl 0x0000EE ; 68.906 31, 0.933
040EE4 F1 00 00    0878*       dl 0x0000F1 ; 70.313 32, 0.942
040EE7 F3 00 00    0879*       dl 0x0000F3 ; 71.719 33, 0.950
040EEA F4 00 00    0880*       dl 0x0000F4 ; 73.125 34, 0.957
040EED F6 00 00    0881*       dl 0x0000F6 ; 74.531 35, 0.964
040EF0 F8 00 00    0882*       dl 0x0000F8 ; 75.938 36, 0.970
040EF3 F9 00 00    0883*       dl 0x0000F9 ; 77.344 37, 0.976
040EF6 FB 00 00    0884*       dl 0x0000FB ; 78.750 38, 0.981
040EF9 FC 00 00    0885*       dl 0x0000FC ; 80.156 39, 0.985
040EFC FD 00 00    0886*       dl 0x0000FD ; 81.563 3A, 0.989
040EFF FE 00 00    0887*       dl 0x0000FE ; 82.969 3B, 0.992
040F02 FE 00 00    0888*       dl 0x0000FE ; 84.375 3C, 0.995
040F05 FF 00 00    0889*       dl 0x0000FF ; 85.781 3D, 0.997
040F08 FF 00 00    0890*       dl 0x0000FF ; 87.188 3E, 0.999
040F0B FF 00 00    0891*       dl 0x0000FF ; 88.594 3F, 1.000
040F0E 00 01 00    0892*       dl 0x000100 ; 90.000 40, 1.000
040F11 FF 00 00    0893*       dl 0x0000FF ; 91.406 41, 1.000
040F14 FF 00 00    0894*       dl 0x0000FF ; 92.813 42, 0.999
040F17 FF 00 00    0895*       dl 0x0000FF ; 94.219 43, 0.997
040F1A FE 00 00    0896*       dl 0x0000FE ; 95.625 44, 0.995
040F1D FE 00 00    0897*       dl 0x0000FE ; 97.031 45, 0.992
040F20 FD 00 00    0898*       dl 0x0000FD ; 98.438 46, 0.989
040F23 FC 00 00    0899*       dl 0x0000FC ; 99.844 47, 0.985
040F26 FB 00 00    0900*       dl 0x0000FB ; 101.250 48, 0.981
040F29 F9 00 00    0901*       dl 0x0000F9 ; 102.656 49, 0.976
040F2C F8 00 00    0902*       dl 0x0000F8 ; 104.063 4A, 0.970
040F2F F6 00 00    0903*       dl 0x0000F6 ; 105.469 4B, 0.964
040F32 F4 00 00    0904*       dl 0x0000F4 ; 106.875 4C, 0.957
040F35 F3 00 00    0905*       dl 0x0000F3 ; 108.281 4D, 0.950
040F38 F1 00 00    0906*       dl 0x0000F1 ; 109.688 4E, 0.942
040F3B EE 00 00    0907*       dl 0x0000EE ; 111.094 4F, 0.933
040F3E EC 00 00    0908*       dl 0x0000EC ; 112.500 50, 0.924
040F41 EA 00 00    0909*       dl 0x0000EA ; 113.906 51, 0.914
040F44 E7 00 00    0910*       dl 0x0000E7 ; 115.313 52, 0.904
040F47 E4 00 00    0911*       dl 0x0000E4 ; 116.719 53, 0.893
040F4A E1 00 00    0912*       dl 0x0000E1 ; 118.125 54, 0.882
040F4D DE 00 00    0913*       dl 0x0000DE ; 119.531 55, 0.870
040F50 DB 00 00    0914*       dl 0x0000DB ; 120.938 56, 0.858
040F53 D8 00 00    0915*       dl 0x0000D8 ; 122.344 57, 0.845
040F56 D4 00 00    0916*       dl 0x0000D4 ; 123.750 58, 0.831
040F59 D1 00 00    0917*       dl 0x0000D1 ; 125.156 59, 0.818
040F5C CD 00 00    0918*       dl 0x0000CD ; 126.563 5A, 0.803
040F5F C9 00 00    0919*       dl 0x0000C9 ; 127.969 5B, 0.788
040F62 C5 00 00    0920*       dl 0x0000C5 ; 129.375 5C, 0.773
040F65 C1 00 00    0921*       dl 0x0000C1 ; 130.781 5D, 0.757
040F68 BD 00 00    0922*       dl 0x0000BD ; 132.188 5E, 0.741
040F6B B9 00 00    0923*       dl 0x0000B9 ; 133.594 5F, 0.724
040F6E B5 00 00    0924*       dl 0x0000B5 ; 135.000 60, 0.707
040F71 B0 00 00    0925*       dl 0x0000B0 ; 136.406 61, 0.690
040F74 AB 00 00    0926*       dl 0x0000AB ; 137.813 62, 0.672
040F77 A7 00 00    0927*       dl 0x0000A7 ; 139.219 63, 0.653
040F7A A2 00 00    0928*       dl 0x0000A2 ; 140.625 64, 0.634
040F7D 9D 00 00    0929*       dl 0x00009D ; 142.031 65, 0.615
040F80 98 00 00    0930*       dl 0x000098 ; 143.438 66, 0.596
040F83 93 00 00    0931*       dl 0x000093 ; 144.844 67, 0.576
040F86 8E 00 00    0932*       dl 0x00008E ; 146.250 68, 0.556
040F89 88 00 00    0933*       dl 0x000088 ; 147.656 69, 0.535
040F8C 83 00 00    0934*       dl 0x000083 ; 149.063 6A, 0.514
040F8F 7E 00 00    0935*       dl 0x00007E ; 150.469 6B, 0.493
040F92 78 00 00    0936*       dl 0x000078 ; 151.875 6C, 0.471
040F95 73 00 00    0937*       dl 0x000073 ; 153.281 6D, 0.450
040F98 6D 00 00    0938*       dl 0x00006D ; 154.688 6E, 0.428
040F9B 67 00 00    0939*       dl 0x000067 ; 156.094 6F, 0.405
040F9E 61 00 00    0940*       dl 0x000061 ; 157.500 70, 0.383
040FA1 5C 00 00    0941*       dl 0x00005C ; 158.906 71, 0.360
040FA4 56 00 00    0942*       dl 0x000056 ; 160.313 72, 0.337
040FA7 50 00 00    0943*       dl 0x000050 ; 161.719 73, 0.314
040FAA 4A 00 00    0944*       dl 0x00004A ; 163.125 74, 0.290
040FAD 44 00 00    0945*       dl 0x000044 ; 164.531 75, 0.267
040FB0 3E 00 00    0946*       dl 0x00003E ; 165.938 76, 0.243
040FB3 38 00 00    0947*       dl 0x000038 ; 167.344 77, 0.219
040FB6 31 00 00    0948*       dl 0x000031 ; 168.750 78, 0.195
040FB9 2B 00 00    0949*       dl 0x00002B ; 170.156 79, 0.171
040FBC 25 00 00    0950*       dl 0x000025 ; 171.563 7A, 0.147
040FBF 1F 00 00    0951*       dl 0x00001F ; 172.969 7B, 0.122
040FC2 19 00 00    0952*       dl 0x000019 ; 174.375 7C, 0.098
040FC5 12 00 00    0953*       dl 0x000012 ; 175.781 7D, 0.074
040FC8 0C 00 00    0954*       dl 0x00000C ; 177.188 7E, 0.049
040FCB 06 00 00    0955*       dl 0x000006 ; 178.594 7F, 0.025
040FCE 00 00 00    0956*       dl 0x000000 ; 180.000 80, 0.000
040FD1 FA FF FF    0957*       dl 0xFFFFFA ; 181.406 81, -0.025
040FD4 F4 FF FF    0958*       dl 0xFFFFF4 ; 182.813 82, -0.049
040FD7 EE FF FF    0959*       dl 0xFFFFEE ; 184.219 83, -0.074
040FDA E7 FF FF    0960*       dl 0xFFFFE7 ; 185.625 84, -0.098
040FDD E1 FF FF    0961*       dl 0xFFFFE1 ; 187.031 85, -0.122
040FE0 DB FF FF    0962*       dl 0xFFFFDB ; 188.438 86, -0.147
040FE3 D5 FF FF    0963*       dl 0xFFFFD5 ; 189.844 87, -0.171
040FE6 CF FF FF    0964*       dl 0xFFFFCF ; 191.250 88, -0.195
040FE9 C8 FF FF    0965*       dl 0xFFFFC8 ; 192.656 89, -0.219
040FEC C2 FF FF    0966*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040FEF BC FF FF    0967*       dl 0xFFFFBC ; 195.469 8B, -0.267
040FF2 B6 FF FF    0968*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040FF5 B0 FF FF    0969*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040FF8 AA FF FF    0970*       dl 0xFFFFAA ; 199.688 8E, -0.337
040FFB A4 FF FF    0971*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040FFE 9F FF FF    0972*       dl 0xFFFF9F ; 202.500 90, -0.383
041001 99 FF FF    0973*       dl 0xFFFF99 ; 203.906 91, -0.405
041004 93 FF FF    0974*       dl 0xFFFF93 ; 205.313 92, -0.428
041007 8D FF FF    0975*       dl 0xFFFF8D ; 206.719 93, -0.450
04100A 88 FF FF    0976*       dl 0xFFFF88 ; 208.125 94, -0.471
04100D 82 FF FF    0977*       dl 0xFFFF82 ; 209.531 95, -0.493
041010 7D FF FF    0978*       dl 0xFFFF7D ; 210.938 96, -0.514
041013 78 FF FF    0979*       dl 0xFFFF78 ; 212.344 97, -0.535
041016 72 FF FF    0980*       dl 0xFFFF72 ; 213.750 98, -0.556
041019 6D FF FF    0981*       dl 0xFFFF6D ; 215.156 99, -0.576
04101C 68 FF FF    0982*       dl 0xFFFF68 ; 216.563 9A, -0.596
04101F 63 FF FF    0983*       dl 0xFFFF63 ; 217.969 9B, -0.615
041022 5E FF FF    0984*       dl 0xFFFF5E ; 219.375 9C, -0.634
041025 59 FF FF    0985*       dl 0xFFFF59 ; 220.781 9D, -0.653
041028 55 FF FF    0986*       dl 0xFFFF55 ; 222.188 9E, -0.672
04102B 50 FF FF    0987*       dl 0xFFFF50 ; 223.594 9F, -0.690
04102E 4B FF FF    0988*       dl 0xFFFF4B ; 225.000 A0, -0.707
041031 47 FF FF    0989*       dl 0xFFFF47 ; 226.406 A1, -0.724
041034 43 FF FF    0990*       dl 0xFFFF43 ; 227.813 A2, -0.741
041037 3F FF FF    0991*       dl 0xFFFF3F ; 229.219 A3, -0.757
04103A 3B FF FF    0992*       dl 0xFFFF3B ; 230.625 A4, -0.773
04103D 37 FF FF    0993*       dl 0xFFFF37 ; 232.031 A5, -0.788
041040 33 FF FF    0994*       dl 0xFFFF33 ; 233.438 A6, -0.803
041043 2F FF FF    0995*       dl 0xFFFF2F ; 234.844 A7, -0.818
041046 2C FF FF    0996*       dl 0xFFFF2C ; 236.250 A8, -0.831
041049 28 FF FF    0997*       dl 0xFFFF28 ; 237.656 A9, -0.845
04104C 25 FF FF    0998*       dl 0xFFFF25 ; 239.063 AA, -0.858
04104F 22 FF FF    0999*       dl 0xFFFF22 ; 240.469 AB, -0.870
041052 1F FF FF    1000*       dl 0xFFFF1F ; 241.875 AC, -0.882
041055 1C FF FF    1001*       dl 0xFFFF1C ; 243.281 AD, -0.893
041058 19 FF FF    1002*       dl 0xFFFF19 ; 244.688 AE, -0.904
04105B 16 FF FF    1003*       dl 0xFFFF16 ; 246.094 AF, -0.914
04105E 14 FF FF    1004*       dl 0xFFFF14 ; 247.500 B0, -0.924
041061 12 FF FF    1005*       dl 0xFFFF12 ; 248.906 B1, -0.933
041064 0F FF FF    1006*       dl 0xFFFF0F ; 250.313 B2, -0.942
041067 0D FF FF    1007*       dl 0xFFFF0D ; 251.719 B3, -0.950
04106A 0C FF FF    1008*       dl 0xFFFF0C ; 253.125 B4, -0.957
04106D 0A FF FF    1009*       dl 0xFFFF0A ; 254.531 B5, -0.964
041070 08 FF FF    1010*       dl 0xFFFF08 ; 255.938 B6, -0.970
041073 07 FF FF    1011*       dl 0xFFFF07 ; 257.344 B7, -0.976
041076 05 FF FF    1012*       dl 0xFFFF05 ; 258.750 B8, -0.981
041079 04 FF FF    1013*       dl 0xFFFF04 ; 260.156 B9, -0.985
04107C 03 FF FF    1014*       dl 0xFFFF03 ; 261.563 BA, -0.989
04107F 02 FF FF    1015*       dl 0xFFFF02 ; 262.969 BB, -0.992
041082 02 FF FF    1016*       dl 0xFFFF02 ; 264.375 BC, -0.995
041085 01 FF FF    1017*       dl 0xFFFF01 ; 265.781 BD, -0.997
041088 01 FF FF    1018*       dl 0xFFFF01 ; 267.188 BE, -0.999
04108B 01 FF FF    1019*       dl 0xFFFF01 ; 268.594 BF, -1.000
04108E 00 FF FF    1020*       dl 0xFFFF00 ; 270.000 C0, -1.000
041091 01 FF FF    1021*       dl 0xFFFF01 ; 271.406 C1, -1.000
041094 01 FF FF    1022*       dl 0xFFFF01 ; 272.813 C2, -0.999
041097 01 FF FF    1023*       dl 0xFFFF01 ; 274.219 C3, -0.997
04109A 02 FF FF    1024*       dl 0xFFFF02 ; 275.625 C4, -0.995
04109D 02 FF FF    1025*       dl 0xFFFF02 ; 277.031 C5, -0.992
0410A0 03 FF FF    1026*       dl 0xFFFF03 ; 278.438 C6, -0.989
0410A3 04 FF FF    1027*       dl 0xFFFF04 ; 279.844 C7, -0.985
0410A6 05 FF FF    1028*       dl 0xFFFF05 ; 281.250 C8, -0.981
0410A9 07 FF FF    1029*       dl 0xFFFF07 ; 282.656 C9, -0.976
0410AC 08 FF FF    1030*       dl 0xFFFF08 ; 284.063 CA, -0.970
0410AF 0A FF FF    1031*       dl 0xFFFF0A ; 285.469 CB, -0.964
0410B2 0C FF FF    1032*       dl 0xFFFF0C ; 286.875 CC, -0.957
0410B5 0D FF FF    1033*       dl 0xFFFF0D ; 288.281 CD, -0.950
0410B8 0F FF FF    1034*       dl 0xFFFF0F ; 289.688 CE, -0.942
0410BB 12 FF FF    1035*       dl 0xFFFF12 ; 291.094 CF, -0.933
0410BE 14 FF FF    1036*       dl 0xFFFF14 ; 292.500 D0, -0.924
0410C1 16 FF FF    1037*       dl 0xFFFF16 ; 293.906 D1, -0.914
0410C4 19 FF FF    1038*       dl 0xFFFF19 ; 295.313 D2, -0.904
0410C7 1C FF FF    1039*       dl 0xFFFF1C ; 296.719 D3, -0.893
0410CA 1F FF FF    1040*       dl 0xFFFF1F ; 298.125 D4, -0.882
0410CD 22 FF FF    1041*       dl 0xFFFF22 ; 299.531 D5, -0.870
0410D0 25 FF FF    1042*       dl 0xFFFF25 ; 300.938 D6, -0.858
0410D3 28 FF FF    1043*       dl 0xFFFF28 ; 302.344 D7, -0.845
0410D6 2C FF FF    1044*       dl 0xFFFF2C ; 303.750 D8, -0.831
0410D9 2F FF FF    1045*       dl 0xFFFF2F ; 305.156 D9, -0.818
0410DC 33 FF FF    1046*       dl 0xFFFF33 ; 306.563 DA, -0.803
0410DF 37 FF FF    1047*       dl 0xFFFF37 ; 307.969 DB, -0.788
0410E2 3B FF FF    1048*       dl 0xFFFF3B ; 309.375 DC, -0.773
0410E5 3F FF FF    1049*       dl 0xFFFF3F ; 310.781 DD, -0.757
0410E8 43 FF FF    1050*       dl 0xFFFF43 ; 312.188 DE, -0.741
0410EB 47 FF FF    1051*       dl 0xFFFF47 ; 313.594 DF, -0.724
0410EE 4B FF FF    1052*       dl 0xFFFF4B ; 315.000 E0, -0.707
0410F1 50 FF FF    1053*       dl 0xFFFF50 ; 316.406 E1, -0.690
0410F4 55 FF FF    1054*       dl 0xFFFF55 ; 317.813 E2, -0.672
0410F7 59 FF FF    1055*       dl 0xFFFF59 ; 319.219 E3, -0.653
0410FA 5E FF FF    1056*       dl 0xFFFF5E ; 320.625 E4, -0.634
0410FD 63 FF FF    1057*       dl 0xFFFF63 ; 322.031 E5, -0.615
041100 68 FF FF    1058*       dl 0xFFFF68 ; 323.438 E6, -0.596
041103 6D FF FF    1059*       dl 0xFFFF6D ; 324.844 E7, -0.576
041106 72 FF FF    1060*       dl 0xFFFF72 ; 326.250 E8, -0.556
041109 78 FF FF    1061*       dl 0xFFFF78 ; 327.656 E9, -0.535
04110C 7D FF FF    1062*       dl 0xFFFF7D ; 329.063 EA, -0.514
04110F 82 FF FF    1063*       dl 0xFFFF82 ; 330.469 EB, -0.493
041112 88 FF FF    1064*       dl 0xFFFF88 ; 331.875 EC, -0.471
041115 8D FF FF    1065*       dl 0xFFFF8D ; 333.281 ED, -0.450
041118 93 FF FF    1066*       dl 0xFFFF93 ; 334.688 EE, -0.428
04111B 99 FF FF    1067*       dl 0xFFFF99 ; 336.094 EF, -0.405
04111E 9F FF FF    1068*       dl 0xFFFF9F ; 337.500 F0, -0.383
041121 A4 FF FF    1069*       dl 0xFFFFA4 ; 338.906 F1, -0.360
041124 AA FF FF    1070*       dl 0xFFFFAA ; 340.313 F2, -0.337
041127 B0 FF FF    1071*       dl 0xFFFFB0 ; 341.719 F3, -0.314
04112A B6 FF FF    1072*       dl 0xFFFFB6 ; 343.125 F4, -0.290
04112D BC FF FF    1073*       dl 0xFFFFBC ; 344.531 F5, -0.267
041130 C2 FF FF    1074*       dl 0xFFFFC2 ; 345.938 F6, -0.243
041133 C8 FF FF    1075*       dl 0xFFFFC8 ; 347.344 F7, -0.219
041136 CF FF FF    1076*       dl 0xFFFFCF ; 348.750 F8, -0.195
041139 D5 FF FF    1077*       dl 0xFFFFD5 ; 350.156 F9, -0.171
04113C DB FF FF    1078*       dl 0xFFFFDB ; 351.563 FA, -0.147
04113F E1 FF FF    1079*       dl 0xFFFFE1 ; 352.969 FB, -0.122
041142 E7 FF FF    1080*       dl 0xFFFFE7 ; 354.375 FC, -0.098
041145 EE FF FF    1081*       dl 0xFFFFEE ; 355.781 FD, -0.074
041148 F4 FF FF    1082*       dl 0xFFFFF4 ; 357.188 FE, -0.049
04114B FA FF FF    1083*       dl 0xFFFFFA ; 358.594 FF, -0.025
04114E 00 00 00    1084*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
041151             1085*   
041151             1086*   atan_lut_168:
041151 00 00 00    1087*       dl 0x000000 ; 000000, 0.000
041154 28 00 00    1088*       dl 0x000028 ; 000001, 0.224
041157 51 00 00    1089*       dl 0x000051 ; 000002, 0.448
04115A 7A 00 00    1090*       dl 0x00007A ; 000003, 0.671
04115D A2 00 00    1091*       dl 0x0000A2 ; 000004, 0.895
041160 CB 00 00    1092*       dl 0x0000CB ; 000005, 1.119
041163 F4 00 00    1093*       dl 0x0000F4 ; 000006, 1.343
041166 1D 01 00    1094*       dl 0x00011D ; 000007, 1.566
041169 45 01 00    1095*       dl 0x000145 ; 000008, 1.790
04116C 6E 01 00    1096*       dl 0x00016E ; 000009, 2.013
04116F 97 01 00    1097*       dl 0x000197 ; 00000A, 2.237
041172 BF 01 00    1098*       dl 0x0001BF ; 00000B, 2.460
041175 E8 01 00    1099*       dl 0x0001E8 ; 00000C, 2.684
041178 11 02 00    1100*       dl 0x000211 ; 00000D, 2.907
04117B 39 02 00    1101*       dl 0x000239 ; 00000E, 3.130
04117E 62 02 00    1102*       dl 0x000262 ; 00000F, 3.353
041181 8B 02 00    1103*       dl 0x00028B ; 000010, 3.576
041184 B3 02 00    1104*       dl 0x0002B3 ; 000011, 3.799
041187 DC 02 00    1105*       dl 0x0002DC ; 000012, 4.022
04118A 04 03 00    1106*       dl 0x000304 ; 000013, 4.245
04118D 2D 03 00    1107*       dl 0x00032D ; 000014, 4.467
041190 55 03 00    1108*       dl 0x000355 ; 000015, 4.690
041193 7E 03 00    1109*       dl 0x00037E ; 000016, 4.912
041196 A6 03 00    1110*       dl 0x0003A6 ; 000017, 5.134
041199 CE 03 00    1111*       dl 0x0003CE ; 000018, 5.356
04119C F7 03 00    1112*       dl 0x0003F7 ; 000019, 5.578
04119F 1F 04 00    1113*       dl 0x00041F ; 00001A, 5.799
0411A2 48 04 00    1114*       dl 0x000448 ; 00001B, 6.021
0411A5 70 04 00    1115*       dl 0x000470 ; 00001C, 6.242
0411A8 98 04 00    1116*       dl 0x000498 ; 00001D, 6.463
0411AB C0 04 00    1117*       dl 0x0004C0 ; 00001E, 6.684
0411AE E8 04 00    1118*       dl 0x0004E8 ; 00001F, 6.905
0411B1 11 05 00    1119*       dl 0x000511 ; 000020, 7.125
0411B4 39 05 00    1120*       dl 0x000539 ; 000021, 7.345
0411B7 61 05 00    1121*       dl 0x000561 ; 000022, 7.565
0411BA 89 05 00    1122*       dl 0x000589 ; 000023, 7.785
0411BD B1 05 00    1123*       dl 0x0005B1 ; 000024, 8.005
0411C0 D9 05 00    1124*       dl 0x0005D9 ; 000025, 8.224
0411C3 01 06 00    1125*       dl 0x000601 ; 000026, 8.443
0411C6 28 06 00    1126*       dl 0x000628 ; 000027, 8.662
0411C9 50 06 00    1127*       dl 0x000650 ; 000028, 8.881
0411CC 78 06 00    1128*       dl 0x000678 ; 000029, 9.099
0411CF A0 06 00    1129*       dl 0x0006A0 ; 00002A, 9.317
0411D2 C7 06 00    1130*       dl 0x0006C7 ; 00002B, 9.535
0411D5 EF 06 00    1131*       dl 0x0006EF ; 00002C, 9.752
0411D8 16 07 00    1132*       dl 0x000716 ; 00002D, 9.970
0411DB 3E 07 00    1133*       dl 0x00073E ; 00002E, 10.187
0411DE 65 07 00    1134*       dl 0x000765 ; 00002F, 10.403
0411E1 8D 07 00    1135*       dl 0x00078D ; 000030, 10.620
0411E4 B4 07 00    1136*       dl 0x0007B4 ; 000031, 10.836
0411E7 DB 07 00    1137*       dl 0x0007DB ; 000032, 11.051
0411EA 03 08 00    1138*       dl 0x000803 ; 000033, 11.267
0411ED 2A 08 00    1139*       dl 0x00082A ; 000034, 11.482
0411F0 51 08 00    1140*       dl 0x000851 ; 000035, 11.697
0411F3 78 08 00    1141*       dl 0x000878 ; 000036, 11.911
0411F6 9F 08 00    1142*       dl 0x00089F ; 000037, 12.125
0411F9 C6 08 00    1143*       dl 0x0008C6 ; 000038, 12.339
0411FC ED 08 00    1144*       dl 0x0008ED ; 000039, 12.553
0411FF 13 09 00    1145*       dl 0x000913 ; 00003A, 12.766
041202 3A 09 00    1146*       dl 0x00093A ; 00003B, 12.978
041205 61 09 00    1147*       dl 0x000961 ; 00003C, 13.191
041208 87 09 00    1148*       dl 0x000987 ; 00003D, 13.403
04120B AE 09 00    1149*       dl 0x0009AE ; 00003E, 13.614
04120E D4 09 00    1150*       dl 0x0009D4 ; 00003F, 13.825
041211 FB 09 00    1151*       dl 0x0009FB ; 000040, 14.036
041214 21 0A 00    1152*       dl 0x000A21 ; 000041, 14.247
041217 47 0A 00    1153*       dl 0x000A47 ; 000042, 14.457
04121A 6D 0A 00    1154*       dl 0x000A6D ; 000043, 14.666
04121D 94 0A 00    1155*       dl 0x000A94 ; 000044, 14.876
041220 BA 0A 00    1156*       dl 0x000ABA ; 000045, 15.085
041223 E0 0A 00    1157*       dl 0x000AE0 ; 000046, 15.293
041226 05 0B 00    1158*       dl 0x000B05 ; 000047, 15.501
041229 2B 0B 00    1159*       dl 0x000B2B ; 000048, 15.709
04122C 51 0B 00    1160*       dl 0x000B51 ; 000049, 15.916
04122F 77 0B 00    1161*       dl 0x000B77 ; 00004A, 16.123
041232 9C 0B 00    1162*       dl 0x000B9C ; 00004B, 16.329
041235 C2 0B 00    1163*       dl 0x000BC2 ; 00004C, 16.535
041238 E7 0B 00    1164*       dl 0x000BE7 ; 00004D, 16.740
04123B 0C 0C 00    1165*       dl 0x000C0C ; 00004E, 16.945
04123E 32 0C 00    1166*       dl 0x000C32 ; 00004F, 17.150
041241 57 0C 00    1167*       dl 0x000C57 ; 000050, 17.354
041244 7C 0C 00    1168*       dl 0x000C7C ; 000051, 17.558
041247 A1 0C 00    1169*       dl 0x000CA1 ; 000052, 17.761
04124A C6 0C 00    1170*       dl 0x000CC6 ; 000053, 17.964
04124D EB 0C 00    1171*       dl 0x000CEB ; 000054, 18.166
041250 0F 0D 00    1172*       dl 0x000D0F ; 000055, 18.368
041253 34 0D 00    1173*       dl 0x000D34 ; 000056, 18.569
041256 58 0D 00    1174*       dl 0x000D58 ; 000057, 18.770
041259 7D 0D 00    1175*       dl 0x000D7D ; 000058, 18.970
04125C A1 0D 00    1176*       dl 0x000DA1 ; 000059, 19.170
04125F C6 0D 00    1177*       dl 0x000DC6 ; 00005A, 19.370
041262 EA 0D 00    1178*       dl 0x000DEA ; 00005B, 19.569
041265 0E 0E 00    1179*       dl 0x000E0E ; 00005C, 19.767
041268 32 0E 00    1180*       dl 0x000E32 ; 00005D, 19.965
04126B 56 0E 00    1181*       dl 0x000E56 ; 00005E, 20.163
04126E 7A 0E 00    1182*       dl 0x000E7A ; 00005F, 20.360
041271 9E 0E 00    1183*       dl 0x000E9E ; 000060, 20.556
041274 C1 0E 00    1184*       dl 0x000EC1 ; 000061, 20.752
041277 E5 0E 00    1185*       dl 0x000EE5 ; 000062, 20.947
04127A 08 0F 00    1186*       dl 0x000F08 ; 000063, 21.142
04127D 2C 0F 00    1187*       dl 0x000F2C ; 000064, 21.337
041280 4F 0F 00    1188*       dl 0x000F4F ; 000065, 21.531
041283 72 0F 00    1189*       dl 0x000F72 ; 000066, 21.724
041286 95 0F 00    1190*       dl 0x000F95 ; 000067, 21.917
041289 B8 0F 00    1191*       dl 0x000FB8 ; 000068, 22.109
04128C DB 0F 00    1192*       dl 0x000FDB ; 000069, 22.301
04128F FE 0F 00    1193*       dl 0x000FFE ; 00006A, 22.493
041292 21 10 00    1194*       dl 0x001021 ; 00006B, 22.683
041295 44 10 00    1195*       dl 0x001044 ; 00006C, 22.874
041298 66 10 00    1196*       dl 0x001066 ; 00006D, 23.063
04129B 89 10 00    1197*       dl 0x001089 ; 00006E, 23.253
04129E AB 10 00    1198*       dl 0x0010AB ; 00006F, 23.441
0412A1 CD 10 00    1199*       dl 0x0010CD ; 000070, 23.629
0412A4 EF 10 00    1200*       dl 0x0010EF ; 000071, 23.817
0412A7 11 11 00    1201*       dl 0x001111 ; 000072, 24.004
0412AA 33 11 00    1202*       dl 0x001133 ; 000073, 24.191
0412AD 55 11 00    1203*       dl 0x001155 ; 000074, 24.376
0412B0 77 11 00    1204*       dl 0x001177 ; 000075, 24.562
0412B3 99 11 00    1205*       dl 0x001199 ; 000076, 24.747
0412B6 BA 11 00    1206*       dl 0x0011BA ; 000077, 24.931
0412B9 DC 11 00    1207*       dl 0x0011DC ; 000078, 25.115
0412BC FD 11 00    1208*       dl 0x0011FD ; 000079, 25.298
0412BF 1E 12 00    1209*       dl 0x00121E ; 00007A, 25.481
0412C2 3F 12 00    1210*       dl 0x00123F ; 00007B, 25.663
0412C5 60 12 00    1211*       dl 0x001260 ; 00007C, 25.844
0412C8 81 12 00    1212*       dl 0x001281 ; 00007D, 26.025
0412CB A2 12 00    1213*       dl 0x0012A2 ; 00007E, 26.206
0412CE C3 12 00    1214*       dl 0x0012C3 ; 00007F, 26.386
0412D1 E4 12 00    1215*       dl 0x0012E4 ; 000080, 26.565
0412D4 04 13 00    1216*       dl 0x001304 ; 000081, 26.744
0412D7 25 13 00    1217*       dl 0x001325 ; 000082, 26.922
0412DA 45 13 00    1218*       dl 0x001345 ; 000083, 27.100
0412DD 65 13 00    1219*       dl 0x001365 ; 000084, 27.277
0412E0 85 13 00    1220*       dl 0x001385 ; 000085, 27.453
0412E3 A5 13 00    1221*       dl 0x0013A5 ; 000086, 27.629
0412E6 C5 13 00    1222*       dl 0x0013C5 ; 000087, 27.805
0412E9 E5 13 00    1223*       dl 0x0013E5 ; 000088, 27.979
0412EC 05 14 00    1224*       dl 0x001405 ; 000089, 28.154
0412EF 24 14 00    1225*       dl 0x001424 ; 00008A, 28.327
0412F2 44 14 00    1226*       dl 0x001444 ; 00008B, 28.501
0412F5 63 14 00    1227*       dl 0x001463 ; 00008C, 28.673
0412F8 83 14 00    1228*       dl 0x001483 ; 00008D, 28.845
0412FB A2 14 00    1229*       dl 0x0014A2 ; 00008E, 29.017
0412FE C1 14 00    1230*       dl 0x0014C1 ; 00008F, 29.187
041301 E0 14 00    1231*       dl 0x0014E0 ; 000090, 29.358
041304 FF 14 00    1232*       dl 0x0014FF ; 000091, 29.527
041307 1E 15 00    1233*       dl 0x00151E ; 000092, 29.697
04130A 3C 15 00    1234*       dl 0x00153C ; 000093, 29.865
04130D 5B 15 00    1235*       dl 0x00155B ; 000094, 30.033
041310 79 15 00    1236*       dl 0x001579 ; 000095, 30.201
041313 98 15 00    1237*       dl 0x001598 ; 000096, 30.368
041316 B6 15 00    1238*       dl 0x0015B6 ; 000097, 30.534
041319 D4 15 00    1239*       dl 0x0015D4 ; 000098, 30.700
04131C F2 15 00    1240*       dl 0x0015F2 ; 000099, 30.865
04131F 10 16 00    1241*       dl 0x001610 ; 00009A, 31.030
041322 2E 16 00    1242*       dl 0x00162E ; 00009B, 31.194
041325 4C 16 00    1243*       dl 0x00164C ; 00009C, 31.357
041328 6A 16 00    1244*       dl 0x00166A ; 00009D, 31.520
04132B 87 16 00    1245*       dl 0x001687 ; 00009E, 31.682
04132E A5 16 00    1246*       dl 0x0016A5 ; 00009F, 31.844
041331 C2 16 00    1247*       dl 0x0016C2 ; 0000A0, 32.005
041334 DF 16 00    1248*       dl 0x0016DF ; 0000A1, 32.166
041337 FC 16 00    1249*       dl 0x0016FC ; 0000A2, 32.326
04133A 19 17 00    1250*       dl 0x001719 ; 0000A3, 32.486
04133D 36 17 00    1251*       dl 0x001736 ; 0000A4, 32.645
041340 53 17 00    1252*       dl 0x001753 ; 0000A5, 32.803
041343 70 17 00    1253*       dl 0x001770 ; 0000A6, 32.961
041346 8C 17 00    1254*       dl 0x00178C ; 0000A7, 33.118
041349 A9 17 00    1255*       dl 0x0017A9 ; 0000A8, 33.275
04134C C5 17 00    1256*       dl 0x0017C5 ; 0000A9, 33.431
04134F E2 17 00    1257*       dl 0x0017E2 ; 0000AA, 33.587
041352 FE 17 00    1258*       dl 0x0017FE ; 0000AB, 33.742
041355 1A 18 00    1259*       dl 0x00181A ; 0000AC, 33.896
041358 36 18 00    1260*       dl 0x001836 ; 0000AD, 34.050
04135B 52 18 00    1261*       dl 0x001852 ; 0000AE, 34.203
04135E 6E 18 00    1262*       dl 0x00186E ; 0000AF, 34.356
041361 8A 18 00    1263*       dl 0x00188A ; 0000B0, 34.509
041364 A5 18 00    1264*       dl 0x0018A5 ; 0000B1, 34.660
041367 C1 18 00    1265*       dl 0x0018C1 ; 0000B2, 34.811
04136A DC 18 00    1266*       dl 0x0018DC ; 0000B3, 34.962
04136D F7 18 00    1267*       dl 0x0018F7 ; 0000B4, 35.112
041370 13 19 00    1268*       dl 0x001913 ; 0000B5, 35.262
041373 2E 19 00    1269*       dl 0x00192E ; 0000B6, 35.410
041376 49 19 00    1270*       dl 0x001949 ; 0000B7, 35.559
041379 64 19 00    1271*       dl 0x001964 ; 0000B8, 35.707
04137C 7F 19 00    1272*       dl 0x00197F ; 0000B9, 35.854
04137F 99 19 00    1273*       dl 0x001999 ; 0000BA, 36.001
041382 B4 19 00    1274*       dl 0x0019B4 ; 0000BB, 36.147
041385 CE 19 00    1275*       dl 0x0019CE ; 0000BC, 36.293
041388 E9 19 00    1276*       dl 0x0019E9 ; 0000BD, 36.438
04138B 03 1A 00    1277*       dl 0x001A03 ; 0000BE, 36.582
04138E 1D 1A 00    1278*       dl 0x001A1D ; 0000BF, 36.726
041391 37 1A 00    1279*       dl 0x001A37 ; 0000C0, 36.870
041394 51 1A 00    1280*       dl 0x001A51 ; 0000C1, 37.013
041397 6B 1A 00    1281*       dl 0x001A6B ; 0000C2, 37.155
04139A 85 1A 00    1282*       dl 0x001A85 ; 0000C3, 37.297
04139D 9F 1A 00    1283*       dl 0x001A9F ; 0000C4, 37.439
0413A0 B9 1A 00    1284*       dl 0x001AB9 ; 0000C5, 37.579
0413A3 D2 1A 00    1285*       dl 0x001AD2 ; 0000C6, 37.720
0413A6 EC 1A 00    1286*       dl 0x001AEC ; 0000C7, 37.859
0413A9 05 1B 00    1287*       dl 0x001B05 ; 0000C8, 37.999
0413AC 1E 1B 00    1288*       dl 0x001B1E ; 0000C9, 38.137
0413AF 37 1B 00    1289*       dl 0x001B37 ; 0000CA, 38.276
0413B2 50 1B 00    1290*       dl 0x001B50 ; 0000CB, 38.413
0413B5 69 1B 00    1291*       dl 0x001B69 ; 0000CC, 38.550
0413B8 82 1B 00    1292*       dl 0x001B82 ; 0000CD, 38.687
0413BB 9B 1B 00    1293*       dl 0x001B9B ; 0000CE, 38.823
0413BE B4 1B 00    1294*       dl 0x001BB4 ; 0000CF, 38.959
0413C1 CC 1B 00    1295*       dl 0x001BCC ; 0000D0, 39.094
0413C4 E5 1B 00    1296*       dl 0x001BE5 ; 0000D1, 39.228
0413C7 FD 1B 00    1297*       dl 0x001BFD ; 0000D2, 39.362
0413CA 16 1C 00    1298*       dl 0x001C16 ; 0000D3, 39.496
0413CD 2E 1C 00    1299*       dl 0x001C2E ; 0000D4, 39.629
0413D0 46 1C 00    1300*       dl 0x001C46 ; 0000D5, 39.762
0413D3 5E 1C 00    1301*       dl 0x001C5E ; 0000D6, 39.894
0413D6 76 1C 00    1302*       dl 0x001C76 ; 0000D7, 40.025
0413D9 8E 1C 00    1303*       dl 0x001C8E ; 0000D8, 40.156
0413DC A5 1C 00    1304*       dl 0x001CA5 ; 0000D9, 40.286
0413DF BD 1C 00    1305*       dl 0x001CBD ; 0000DA, 40.416
0413E2 D5 1C 00    1306*       dl 0x001CD5 ; 0000DB, 40.546
0413E5 EC 1C 00    1307*       dl 0x001CEC ; 0000DC, 40.675
0413E8 04 1D 00    1308*       dl 0x001D04 ; 0000DD, 40.803
0413EB 1B 1D 00    1309*       dl 0x001D1B ; 0000DE, 40.931
0413EE 32 1D 00    1310*       dl 0x001D32 ; 0000DF, 41.059
0413F1 49 1D 00    1311*       dl 0x001D49 ; 0000E0, 41.186
0413F4 60 1D 00    1312*       dl 0x001D60 ; 0000E1, 41.312
0413F7 77 1D 00    1313*       dl 0x001D77 ; 0000E2, 41.438
0413FA 8E 1D 00    1314*       dl 0x001D8E ; 0000E3, 41.564
0413FD A5 1D 00    1315*       dl 0x001DA5 ; 0000E4, 41.689
041400 BB 1D 00    1316*       dl 0x001DBB ; 0000E5, 41.814
041403 D2 1D 00    1317*       dl 0x001DD2 ; 0000E6, 41.938
041406 E9 1D 00    1318*       dl 0x001DE9 ; 0000E7, 42.061
041409 FF 1D 00    1319*       dl 0x001DFF ; 0000E8, 42.184
04140C 15 1E 00    1320*       dl 0x001E15 ; 0000E9, 42.307
04140F 2C 1E 00    1321*       dl 0x001E2C ; 0000EA, 42.429
041412 42 1E 00    1322*       dl 0x001E42 ; 0000EB, 42.551
041415 58 1E 00    1323*       dl 0x001E58 ; 0000EC, 42.672
041418 6E 1E 00    1324*       dl 0x001E6E ; 0000ED, 42.793
04141B 84 1E 00    1325*       dl 0x001E84 ; 0000EE, 42.913
04141E 99 1E 00    1326*       dl 0x001E99 ; 0000EF, 43.033
041421 AF 1E 00    1327*       dl 0x001EAF ; 0000F0, 43.152
041424 C5 1E 00    1328*       dl 0x001EC5 ; 0000F1, 43.271
041427 DA 1E 00    1329*       dl 0x001EDA ; 0000F2, 43.390
04142A F0 1E 00    1330*       dl 0x001EF0 ; 0000F3, 43.508
04142D 05 1F 00    1331*       dl 0x001F05 ; 0000F4, 43.625
041430 1B 1F 00    1332*       dl 0x001F1B ; 0000F5, 43.742
041433 30 1F 00    1333*       dl 0x001F30 ; 0000F6, 43.859
041436 45 1F 00    1334*       dl 0x001F45 ; 0000F7, 43.975
041439 5A 1F 00    1335*       dl 0x001F5A ; 0000F8, 44.091
04143C 6F 1F 00    1336*       dl 0x001F6F ; 0000F9, 44.206
04143F 84 1F 00    1337*       dl 0x001F84 ; 0000FA, 44.321
041442 99 1F 00    1338*       dl 0x001F99 ; 0000FB, 44.435
041445 AD 1F 00    1339*       dl 0x001FAD ; 0000FC, 44.549
041448 C2 1F 00    1340*       dl 0x001FC2 ; 0000FD, 44.662
04144B D7 1F 00    1341*       dl 0x001FD7 ; 0000FE, 44.775
04144E EB 1F 00    1342*       dl 0x001FEB ; 0000FF, 44.888
041451 00 20 00    1343*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
041454             0035        include "fonts.inc"
041454 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
041500             0002*   
041500             0003*   fonts_load:
041500 DD 21 00 25 0004*       ld ix,font_list ; pointer to font list lookup
       04          
041505 06 12       0005*       ld b,num_fonts ; loop counter
041507             0006*   
041507             0007*   @load_loop:
041507 C5          0008*       push bc ; save loop counter
041508             0009*   
041508             0010*   ; load font into a buffer
041508 DD 27 06    0011*       ld hl,(ix+font_list_bufferId)
04150B DD 31 09    0012*       ld iy,(ix+font_list_filename)
04150E CD 78 1B 04 0013*       call vdu_load_buffer_from_file
041512             0014*   
041512             0015*   ; create font from buffer
041512 DD 27 06    0016*       ld hl,(ix+font_list_bufferId)
041515 DD 5E 00    0017*       ld e,(ix+font_list_width)
041518 DD 56 03    0018*       ld d,(ix+font_list_height)
04151B 3E 00       0019*       ld a,0 ; flags
04151D CD 1A 1D 04 0020*       call vdu_font_create
041521             0021*   
041521             0022*   ; select font
041521 DD 27 06    0023*       ld hl,(ix+font_list_bufferId)
041524 3E 01       0024*       ld a,1 ; flags
041526 CD 00 1D 04 0025*       call vdu_font_select
04152A             0026*   
04152A             0027*   ; ; debug print filename
04152A             0028*   ;     call printNewLine
04152A             0029*   ;     ld hl,(ix+font_list_filename)
04152A             0030*   ;     call printString
04152A             0031*   
04152A             0032*   ; advance font_list pointer to next record
04152A ED 32 0C    0033*       lea ix,ix+font_list_record_size
04152D             0034*   
04152D             0035*   ; restore loop counter
04152D C1          0036*       pop bc
04152E 10 D7       0037*       djnz @load_loop
041530             0038*   
041530             0039*   ; all done
041530 C9          0040*       ret
041531             0036        include "images.inc"
041531 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041600             0002*   
041600             0003*   image_type: equ 0
041600             0004*   image_width: equ image_type+3
041600             0005*   image_height: equ image_width+3
041600             0006*   image_filesize: equ image_height+3
041600             0007*   image_filename: equ image_filesize+3
041600             0008*   image_bufferId: equ image_filename+3
041600             0009*   image_record_size: equ image_bufferId+3
041600             0010*   
041600 00 00 00    0011*   cur_image_list: dl 0
041603 00 00 00    0012*   cur_filename: dl 0
041606 00 00 00    0013*   cur_buffer_id: dl 0
041609             0014*   
041609             0015*   img_load_init:
041609             0016*   ; initialize logo's position parameters
041609 21 00 00 00 0017*       ld hl,0
04160D 22 BE 16 04 0018*       ld (logo_xvel),hl
041611 22 C1 16 04 0019*       ld (logo_xpos),hl
041615             0020*   ; begin 16.8 maths to determine logo's y position and velocity
041615 21 00 E0 00 0021*       ld hl,224*256
041619 22 C7 16 04 0022*       ld (logo_ypos),hl
04161D EB          0023*       ex de,hl
04161E 21 00 10 FF 0024*       ld hl,-240*256
041622             0025*       ; ld de,-256*[sprites_num_images+tiles_dg_num_images+ui_num_images]
041622 11 00 0C 01 0026*       ld de,sprites_num_images+tiles_dg_num_images+ui_num_images*256
041626 CD 2E 0B 04 0027*       call sdiv168 ; ud.e = distance / num images = y velocity
04162A ED 53 C4 16 0028*       ld (logo_yvel),de
       04          
04162F             0029*   ; all done
04162F C9          0030*       ret
041630             0031*   
041630             0032*   ; inputs: bc is the number of images to load, cur_image_list set
041630             0033*   img_load_main:
041630             0034*   ; back up loop counter
041630 C5          0035*       push bc
041631             0036*   
041631             0037*   ; load the next image
041631 CD 68 16 04 0038*       call load_next_image
041635             0039*   
041635             0040*   ; plot the background
041635 CD 4B 19 04 0041*       call vdu_cls
041639 21 02 00 00 0042*       ld hl,BUF_SPLASH_BG
04163D CD 38 1A 04 0043*       call vdu_buff_select
041641 01 00 00 00 0044*       ld bc,0
041645 11 00 00 00 0045*       ld de,0
041649 CD 20 1E 04 0046*       call vdu_plot_bmp
04164D             0047*   
04164D             0048*   ; ; draw the most recently loaded image
04164D             0049*   ; 	ld hl,(cur_buffer_id)
04164D             0050*   ; 	call vdu_buff_select
04164D             0051*   ; 	ld bc,0
04164D             0052*   ; 	ld de,0
04164D             0053*   ; 	call vdu_plot_bmp
04164D             0054*   
04164D             0055*   ; move logo
04164D CD 99 16 04 0056*       call move_logo
041651             0057*   
041651             0058*   ; print current filename
041651 2A 03 16 04 0059*       ld hl,(cur_filename)
041655 CD 17 01 04 0060*       call printString
041659             0061*   
041659             0062*   ; flip the framebuffer
041659             0063*       ; call vdu_flip
041659             0064*   
041659             0065*   ; decrement loop counter
041659 C1          0066*       pop bc
04165A 0B          0067*       dec bc
04165B 79          0068*       ld a,c
04165C B7          0069*       or a
04165D C2 30 16 04 0070*       jp nz,img_load_main
041661 78          0071*       ld a,b
041662 B7          0072*       or a
041663 C2 30 16 04 0073*       jp nz,img_load_main
041667 C9          0074*       ret
041668             0075*   
041668             0076*   load_next_image:
041668 FD 2A 00 16 0077*       ld iy,(cur_image_list)
       04          
04166D FD E5       0078*       push iy
04166F FD 7E 00    0079*       ld a,(iy+image_type) ; get image type
041672 FD 07 03    0080*       ld bc,(iy+image_width) ; get image width
041675 FD 17 06    0081*       ld de,(iy+image_height) ; get image height
041678 FD 31 09    0082*       ld ix,(iy+image_filesize) ; get image file size
04167B FD 27 0F    0083*       ld hl,(iy+image_bufferId) ; get image bufferId
04167E 22 06 16 04 0084*       ld (cur_buffer_id),hl
041682 FD 37 0C    0085*       ld iy,(iy+image_filename) ; get image filename
041685 FD 22 03 16 0086*       ld (cur_filename),iy
       04          
04168A CD 56 1B 04 0087*       call vdu_load_img
04168E FD E1       0088*       pop iy
041690 ED 33 12    0089*       lea iy,iy+image_record_size
041693 FD 22 00 16 0090*       ld (cur_image_list),iy
       04          
041698 C9          0091*       ret
041699             0092*   
041699             0093*   move_logo:
041699             0094*   ; activate logo bitmap
041699 21 03 00 00 0095*       ld hl, BUF_SPLASH_LOGO
04169D CD 38 1A 04 0096*       call vdu_buff_select
0416A1             0097*   ; update position based on velocity parameters
0416A1 2A C7 16 04 0098*       ld hl,(logo_ypos)
0416A5 ED 5B C4 16 0099*       ld de,(logo_yvel)
       04          
0416AA 19          0100*       add hl,de
0416AB 22 C7 16 04 0101*       ld (logo_ypos),hl
0416AF             0102*   ; draw logo
0416AF ED 4B C1 16 0103*       ld bc,(logo_xpos)
       04          
0416B4 ED 5B C7 16 0104*       ld de,(logo_ypos)
       04          
0416B9 CD 3C 1E 04 0105*       call vdu_plot_bmp168
0416BD C9          0106*       ret
0416BE             0107*   
0416BE 00 00 00    0108*   logo_xvel: dl 0
0416C1 00 00 00    0109*   logo_xpos: dl 0
0416C4             0110*   
0416C4 00 00 00    0111*   logo_yvel: dl 0
0416C7 00 00 00    0112*   logo_ypos: dl 0
0416CA             0113*   
0416CA             0114*   load_ui_images:
0416CA             0115*   ; initialize image loading variables
0416CA 21 65 51 04 0116*       ld hl,ui_image_list
0416CE 22 00 16 04 0117*       ld (cur_image_list),hl
0416D2             0118*   ; load images
0416D2 06 04       0119*       ld b,ui_num_images
0416D4             0120*   @loop:
0416D4 C5          0121*       push bc
0416D5 CD 68 16 04 0122*       call load_next_image
0416D9 C1          0123*       pop bc
0416DA 10 F8       0124*       djnz @loop
0416DC C9          0125*       ret
0416DD             0126*   
0416DD             0127*   load_sprite_images:
0416DD             0128*   ; initialize image loading variables
0416DD 21 08 44 04 0129*       ld hl,sprites_image_list
0416E1 22 00 16 04 0130*       ld (cur_image_list),hl
0416E5 01 50 00 00 0131*       ld bc,sprites_num_images
0416E9             0132*   ; load images
0416E9 CD 30 16 04 0133*       call img_load_main
0416ED C9          0134*       ret
0416EE             0135*   
0416EE             0136*   load_tilesets:
0416EE             0137*   ; initialize image loading variables
0416EE 21 00 28 04 0138*       ld hl,tiles_dg_image_list
0416F2 22 00 16 04 0139*       ld (cur_image_list),hl
0416F6 01 B8 00 00 0140*       ld bc,tiles_dg_num_images
0416FA             0141*   ; load images
0416FA CD 30 16 04 0142*       call img_load_main
0416FE             0143*   
0416FE             0144*   ; ; initialize image loading variables
0416FE             0145*   ;     ld hl,tiles_xevious_image_list
0416FE             0146*   ;     ld (cur_image_list),hl
0416FE             0147*   ;     ld bc,tiles_xevious_num_images
0416FE             0148*   ; ; load images
0416FE             0149*   ;     call img_load_main
0416FE C9          0150*       ret
0416FF             0037        include "timer.inc"
0416FF FF          0001*       align 256
041700             0002*   
041700             0003*   ; Table 32. Timer Control Registers
041700             0004*   ; this constant is the base address of the timer control registers
041700             0005*   ; each timer takes three bytes:
041700             0006*   ;   0: control register
041700             0007*   ;   1: low byte of timer reset value
041700             0008*   ;   2: high byte of timer reset value
041700             0009*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
041700             0010*   ; which correctly force the high and upper bytes of the address bus to zero
041700             0011*   TMR_CTL:     equ 80h
041700             0012*   
041700             0013*   ; Timer Control Register Bit Definitions
041700             0014*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
041700             0015*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
041700             0016*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
041700             0017*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
041700             0018*                               ; the TMRx_CTL register is read.
041700             0019*   
041700             0020*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
041700             0021*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
041700             0022*   
041700             0023*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
041700             0024*                               ;  0,and counting stops when the end-of-count value is reached.
041700             0025*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
041700             0026*                               ; written to the counter when the end-of-count value is reached.
041700             0027*   
041700             0028*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
041700             0029*   CLK_DIV_256:  equ %00001100 ;
041700             0030*   CLK_DIV_64:   equ %00001000 ;
041700             0031*   CLK_DIV_16:   equ %00000100 ;
041700             0032*   CLK_DIV_4:    equ %00000000 ;
041700             0033*   
041700             0034*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
041700             0035*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
041700             0036*                               ; When a 1 is written to this bit,the values in the reload registers
041700             0037*                               ;  are loaded into the downcounter when the timer restarts. The
041700             0038*                               ; programmer must ensure that this bit is set to 1 each time
041700             0039*                               ; SINGLE-PASS mode is used.
041700             0040*   
041700             0041*   ; disable/enable the programmable reload timer
041700             0042*   PRT_EN_0:     equ %00000000 ;
041700             0043*   PRT_EN_1:     equ %00000001 ;
041700             0044*   
041700             0045*   ; Table 37. Timer Input Source Select Register
041700             0046*   ; Each of the 4 timers are allocated two bits of the 8-bit register
041700             0047*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
041700             0048*   ;   00: System clock / CLK_DIV
041700             0049*   ;   01: RTC / CLK_DIV
041700             0050*   ;   NOTE: these are the values given in the manual,but it may be a typo
041700             0051*   ;   10: GPIO port B pin 1.
041700             0052*   ;   11: GPIO port B pin 1.
041700             0053*   TMR_ISS:   equ 92h ; register address
041700             0054*   
041700             0055*   ; Table 51. Real-Time Clock Control Register
041700             0056*   RTC_CTRL: equ EDh ; register address
041700             0057*   
041700             0058*   ; alarm interrupt disable/enable
041700             0059*   RTC_ALARM_0:    equ %00000000
041700             0060*   RTC_ALARM_1:    equ %10000000
041700             0061*   
041700             0062*   ; interrupt on alarm disable/enable
041700             0063*   RTC_INT_ENT_0:  equ %00000000
041700             0064*   RTC_INT_ENT_1:  equ %01000000
041700             0065*   
041700             0066*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
041700             0067*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
041700             0068*   
041700             0069*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
041700             0070*                                   ; On-chip 32768 Hz oscillator is enabled.
041700             0071*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
041700             0072*                                   ; On-chip 32768 Hz oscillator is disabled.
041700             0073*   
041700             0074*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
041700             0075*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
041700             0076*   
041700             0077*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
041700             0078*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
041700             0079*   
041700             0080*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
041700             0081*                                   ; RTC counter is enabled.
041700             0082*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
041700             0083*                                   ; RTC counter is disabled.
041700             0084*   
041700             0085*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
041700             0086*   
041700             0087*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
041700             0088*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
041700 00 00 00    0089*   prt_reload: dl 0x000000
041703             0090*   
041703             0091*   ; set PRT timer
041703             0092*   prt_set:
041703 21 00 00 00 0093*       ld hl,0
041707 22 51 17 04 0094*       ld (prt_irq_counter),hl
04170B 2A 00 17 04 0095*       ld hl,(prt_reload)
04170F ED 29 84    0096*       out0 ($84),l
041712 ED 21 85    0097*   	out0 ($85),h
041715             0098*   ; disable timer
041715 3E 06       0099*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041717 ED 39 83    0100*   	out0 ($83),a
04171A             0101*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04171A 3E 57       0102*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04171C ED 39 83    0103*   	out0 ($83),a
04171F C9          0104*       ret
041720             0105*   
041720             0106*   ; ===============================================
041720             0107*   ; PRT Timer Interrupt Handling
041720             0108*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
041720             0109*   ; -----------------------------------------------
041720             0110*   prt_irq_init:
041720             0111*       ; set up interrupt vector table 2
041720 21 00 00 00 0112*   	ld hl,0
041724 3A 0C 01 00 0113*   	ld a,($10c)
041728 6F          0114*   	ld l,a
041729 3A 0D 01 00 0115*   	ld a,($10d)
04172D 67          0116*   	ld h,a
04172E             0117*   
04172E             0118*   	; skip over CALL ($c3)
04172E 23          0119*   	inc hl
04172F             0120*   	; load address of jump into vector table 2 (in ram)
04172F ED 27       0121*   	ld hl,(hl)
041731             0122*   
041731             0123*   	; write CALL prt_irq_handler to vector table 2
041731 3E C3       0124*   	ld a,$c3
041733 77          0125*   	ld (hl),a
041734 23          0126*   	inc hl
041735 11 3C 17 04 0127*   	ld de,prt_irq_handler
041739 ED 1F       0128*   	ld (hl),de
04173B             0129*   
04173B C9          0130*       ret
04173C             0131*   
04173C             0132*   prt_irq_handler:
04173C F3          0133*   	di
04173D F5          0134*   	push af
04173E E5          0135*       push hl
04173F ED 38 83    0136*   	in0 a,($83)
041742 2A 51 17 04 0137*   	ld hl,(prt_irq_counter)
041746 23          0138*   	inc hl
041747 22 51 17 04 0139*   	ld (prt_irq_counter),hl
04174B E1          0140*       pop hl
04174C F1          0141*   	pop af
04174D FB          0142*   	ei
04174E 5B ED 4D    0143*   	reti.l
041751             0144*   
041751             0145*   prt_irq_counter:
041751 00 00 00    0146*   	.dl 0
041754             0147*   prt_irq_counter_saved:
041754 00 00 00    0148*       .dl 0
041757             0149*   
041757             0150*   prt_loop_reset:
041757 E5          0151*       push hl
041758 21 00 00 00 0152*   	ld hl,0
04175C 22 51 17 04 0153*   	ld (prt_irq_counter),hl
041760 22 C2 17 04 0154*       ld (prt_loop_counter),hl
041764 22 C5 17 04 0155*       ld (prt_loops),hl
041768 CD 03 17 04 0156*       call prt_set
04176C E1          0157*       pop hl
04176D C9          0158*       ret
04176E             0159*   
04176E             0160*   prt_loop_start:
04176E E5          0161*       push hl
04176F 21 00 00 00 0162*   	ld hl,0
041773 22 51 17 04 0163*   	ld (prt_irq_counter),hl
041777 E1          0164*       pop hl
041778 C9          0165*       ret
041779             0166*   
041779             0167*   prt_loop_stop:
041779 E5          0168*       push hl
04177A D5          0169*       push de
04177B 2A 51 17 04 0170*       ld hl,(prt_irq_counter)
04177F ED 5B C2 17 0171*       ld de,(prt_loop_counter)
       04          
041784 19          0172*       add hl,de
041785 22 C2 17 04 0173*       ld (prt_loop_counter),hl
041789 21 00 00 00 0174*       ld hl,0
04178D 22 51 17 04 0175*       ld (prt_irq_counter),hl
041791 2A C5 17 04 0176*       ld hl,(prt_loops)
041795 23          0177*       inc hl
041796 22 C5 17 04 0178*       ld (prt_loops),hl
04179A D1          0179*       pop de
04179B E1          0180*       pop hl
04179C C9          0181*       ret
04179D             0182*   
04179D             0183*   ; inputs: bc = y,x text coordinates to print
04179D             0184*   prt_loop_print:
04179D F5          0185*       push af
04179E E5          0186*       push hl
04179F C5          0187*       push bc
0417A0 D5          0188*       push de
0417A1 DD E5       0189*       push ix
0417A3 FD E5       0190*       push iy
0417A5 CD 37 19 04 0191*       call vdu_move_cursor
0417A9             0192*   
0417A9 2A C2 17 04 0193*       ld hl,(prt_loop_counter)
0417AD CD 16 02 04 0194*       call printDec
0417B1             0195*   
0417B1 2A C5 17 04 0196*       ld hl,(prt_loops)
0417B5 CD 16 02 04 0197*       call printDec
0417B9             0198*   
0417B9 FD E1       0199*       pop iy
0417BB DD E1       0200*       pop ix
0417BD D1          0201*       pop de
0417BE C1          0202*       pop bc
0417BF E1          0203*       pop hl
0417C0 F1          0204*       pop af
0417C1 C9          0205*       ret
0417C2             0206*   
0417C2             0207*   prt_loop_counter:
0417C2 00 00 00    0208*       .dl 0
0417C5             0209*   prt_loops:
0417C5 00 00 00    0210*       .dl 0
0417C8             0211*   
0417C8             0212*   ; ===============================================
0417C8             0213*   ; Timer functions
0417C8             0214*   ; -----------------------------------------------
0417C8             0215*   ; set a countdown timer
0417C8             0216*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0417C8             0217*   ; returns: hl = current time
0417C8             0218*   tmr_set:
0417C8 FD 2F 03    0219*       ld (iy+3),hl            ; set time remaining
0417CB             0220*       MOSCALL mos_sysvars     ; ix points to syvars table
0417CB 3E 08       0001*M1 			LD	A, function
0417CD 5B CF       0002*M1 			RST.LIL	08h
0417CF DD 27 00    0221*       ld hl,(ix+sysvar_time)  ; get current time
0417D2 FD 2F 00    0222*       ld (iy+0),hl            ; set start time
0417D5 C9          0223*       ret
0417D6             0224*   
0417D6             0225*   ; gets time remaining on a countdown timer
0417D6             0226*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0417D6             0227*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0417D6             0228*   ;          sign flags: pos = time not expired,zero or neg = time expired
0417D6             0229*   tmr_get:
0417D6             0230*       MOSCALL mos_sysvars     ; ix points to syvars table
0417D6 3E 08       0001*M1 			LD	A, function
0417D8 5B CF       0002*M1 			RST.LIL	08h
0417DA DD 17 00    0231*       ld de,(ix+sysvar_time)  ; get current time
0417DD FD 27 00    0232*       ld hl,(iy+0)            ; get start time
0417E0 AF          0233*       xor a                   ; clear carry
0417E1 ED 52       0234*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0417E3 FD 17 03    0235*       ld de,(iy+3)            ; get timer set value
0417E6 AF          0236*       xor a                   ; clear carry
0417E7 ED 5A       0237*       adc hl,de               ; hl = time remaining
0417E9             0238*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0417E9 C9          0239*       ret
0417EA             0240*   
0417EA             0241*   tmr_test: ds 6 ; example of a buffer to hold timer data
0417F0             0242*   
       FF FF FF FF 
       FF FF 
0417F0 00 00 00    0243*   timestamp_now: dl 0
0417F3 00 00 00    0244*   timestamp_old: dl 0
0417F6 00 00 00    0245*   timestamp_chg: dl 0
0417F9             0246*   
0417F9             0247*   ; update the global timestamp from the system clock
0417F9             0248*   ; inputs: none
0417F9             0249*   ; returns: hl = time elapsed in 1/120ths of a second
0417F9             0250*   ;          ix = pointer to syvars table
0417F9             0251*   ; destroys: af,hl,de,ix
0417F9             0252*   timestamp_tick:
0417F9 ED 5B F0 17 0253*       ld de,(timestamp_now)   ; get previous time
       04          
0417FE ED 53 F3 17 0254*       ld (timestamp_old),de   ; save previous time
       04          
041803             0255*       MOSCALL mos_sysvars     ; ix points to syvars table
041803 3E 08       0001*M1 			LD	A, function
041805 5B CF       0002*M1 			RST.LIL	08h
041807 DD 27 00    0256*       ld hl,(ix+sysvar_time)  ; get current time
04180A 22 F0 17 04 0257*       ld (timestamp_now),hl   ; save current time
04180E AF          0258*       xor a                   ; clear carry
04180F ED 52       0259*       sbc hl,de               ; hl = time elapsed
041811 22 F6 17 04 0260*       ld (timestamp_chg),hl   ; save elapsed time
041815 C9          0261*       ret
041816             0262*   
041816             0263*   ; set a countdown timer
041816             0264*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041816             0265*   ; requires: timestamp_tick to be called at least once before this function
041816             0266*   ; returns: hl = current time
041816             0267*   ; destroys: hl
041816             0268*   timestamp_tmr_set:
041816 FD 2F 03    0269*       ld (iy+3),hl            ; set time remaining
041819 2A F0 17 04 0270*       ld hl,(timestamp_now)   ; get current timestamp
04181D FD 2F 00    0271*       ld (iy+0),hl            ; set start time
041820 C9          0272*       ret
041821             0273*   
041821             0274*   ; gets time remaining on a countdown timer following the global timestamp
041821             0275*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041821             0276*   ; requires: timestamp_tick to be called at least once before this function
041821             0277*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041821             0278*   ;          sign flags: pos = time not expired,zero or neg = time expired
041821             0279*   ; destroys: af,hl,de
041821             0280*   timestamp_tmr_get:
041821 ED 5B F0 17 0281*       ld de,(timestamp_now)   ; get current timestamp
       04          
041826 FD 27 00    0282*       ld hl,(iy+0)            ; get start time
041829 AF          0283*       xor a                   ; clear carry
04182A ED 52       0284*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04182C FD 17 03    0285*       ld de,(iy+3)            ; get timer set value
04182F AF          0286*       xor a                   ; clear carry
041830 ED 5A       0287*       adc hl,de               ; hl = time remaining
041832             0288*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041832 C9          0289*       ret
041833             0290*   
041833             0291*   ; set a stopwatch
041833             0292*   ; returns: hl = start time
041833             0293*   ; destroys: hl,ix
041833             0294*   stopwatch_set:
041833             0295*       MOSCALL mos_sysvars     ; ix points to syvars table
041833 3E 08       0001*M1 			LD	A, function
041835 5B CF       0002*M1 			RST.LIL	08h
041837 DD 27 00    0296*       ld hl,(ix+sysvar_time)  ; get current time
04183A 22 4F 18 04 0297*       ld (stopwatch_started),hl            ; set start time
04183E C9          0298*       ret
04183F             0299*   
04183F             0300*   ; gets time elapsed on a stopwatch
04183F             0301*   ; returns: hl = time elapsed in 1/120ths of a second
04183F             0302*   ; destroys: af,hl,de,ix
04183F             0303*   stopwatch_get:
04183F             0304*       MOSCALL mos_sysvars     ; ix points to syvars table
04183F 3E 08       0001*M1 			LD	A, function
041841 5B CF       0002*M1 			RST.LIL	08h
041843 DD 27 00    0305*       ld hl,(ix+sysvar_time)  ; get current time
041846 ED 5B 4F 18 0306*       ld de,(stopwatch_started)            ; get start time
       04          
04184B AF          0307*       xor a                   ; clear carry
04184C ED 52       0308*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04184E C9          0309*       ret
04184F             0310*   
04184F             0311*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041852             0312*   
041852             0313*   ; ------------------
041852             0314*   ; delay routine
041852             0315*   ; Author: Richard Turrnidge
041852             0316*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041852             0317*   ; routine waits a fixed time,then returns
041852             0318*   ; arrive with A =  the delay byte. One bit to be set only.
041852             0319*   ; eg. ld A,00000100b
041852             0320*   
041852             0321*   multiPurposeDelay:
       FF FF FF 
041852 F5          0322*       push af
041853 C5          0323*       push bc
041854 DD E5       0324*       push ix
041856 47          0325*       ld b,a
041857 3E 08       0326*       ld a,$08
041859 5B CF       0327*       RST.LIL	08h                 ; get IX pointer to sysvars
04185B             0328*   
04185B             0329*   waitLoop:
04185B             0330*   
04185B DD 7E 00    0331*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04185E             0332*   
04185E             0333*                                   ;   we check if bit set is same as last time we checked.
04185E             0334*                                   ;   bit 0 - don't use
04185E             0335*                                   ;   bit 1 - changes 64 times per second
04185E             0336*                                   ;   bit 2 - changes 32 times per second
04185E             0337*                                   ;   bit 3 - changes 16 times per second
04185E             0338*   
04185E             0339*                                   ;   bit 4 - changes 8 times per second
04185E             0340*                                   ;   bit 5 - changes 4 times per second
04185E             0341*                                   ;   bit 6 - changes 2 times per second
04185E             0342*                                   ;   bit 7 - changes 1 times per second
04185E A0          0343*       and b
04185F 4F          0344*       ld c,a
041860 3A 71 18 04 0345*       ld a,(oldTimeStamp)
041864 B9          0346*       cp c                        ; is A same as last value?
041865 28 F4       0347*       jr z,waitLoop              ; loop here if it is
041867 79          0348*       ld a,c
041868 32 71 18 04 0349*       ld (oldTimeStamp),a        ; set new value
04186C             0350*   
04186C DD E1       0351*       pop ix
04186E C1          0352*       pop bc
04186F F1          0353*       pop af
041870 C9          0354*       ret
041871             0355*   
041871 00          0356*   oldTimeStamp:   .db 00h
041872             0038        include "vdu.inc"
041872 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
041900             0002*   
041900             0003*   ; VDU 30: Home cursor
041900             0004*   vdu_home_cursor:
041900 3E 1E       0005*       ld a,30
041902 5B D7       0006*   	rst.lil $10
041904 C9          0007*   	ret
041905             0008*   
041905             0009*   vdu_cursor_on:
041905 21 10 19 04 0010*   	ld hl,@cmd
041909 01 03 00 00 0011*   	ld bc,@end-@cmd
04190D 5B DF       0012*   	rst.lil $18
04190F C9          0013*   	ret
041910             0014*   @cmd:
041910 17 01 01    0015*   	db 23,1,1
041913             0016*   @end:
041913             0017*   
041913             0018*   vdu_cursor_off:
041913 21 1E 19 04 0019*   	ld hl,@cmd
041917 01 03 00 00 0020*   	ld bc,@end-@cmd
04191B 5B DF       0021*   	rst.lil $18
04191D C9          0022*   	ret
04191E             0023*   @cmd:
04191E 17 01 00    0024*   	db 23,1,0
041921             0025*   @end:
041921             0026*   
041921             0027*   ; VDU 5: Write text at graphics cursor
041921             0028*   ; inputs: a is the character to write to the screen
041921             0029*   ; prerequisites: the graphics cursor at the intended position on screen
041921             0030*   ; outputs: see the name of the function
041921             0031*   ; destroys: a, hl, bc
041921             0032*   vdu_char_to_gfx_cursor:
041921 32 31 19 04 0033*   	ld (@arg),a
041925 21 30 19 04 0034*   	ld hl,@cmd
041929 01 02 00 00 0035*   	ld bc,@end-@cmd
04192D 5B DF       0036*   	rst.lil $18
04192F C9          0037*   	ret
041930 05          0038*   @cmd: db 5
041931 00          0039*   @arg: db 0
041932             0040*   @end:
041932             0041*   ; VDU 9: Move cursor forward one character
041932             0042*   vdu_cursor_forward:
041932 3E 09       0043*       ld a,9
041934 5B D7       0044*   	rst.lil $10
041936 C9          0045*   	ret
041937             0046*   
041937             0047*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041937             0048*   ; inputs: c=x, b=y 8-bit unsigned integers
041937             0049*   vdu_move_cursor:
041937 ED 43 48 19 0050*       ld (@x0),bc
       04          
04193C 21 47 19 04 0051*   	ld hl,@cmd
041940 01 03 00 00 0052*   	ld bc,@end-@cmd
041944 5B DF       0053*   	rst.lil $18
041946 C9          0054*   	ret
041947 1F          0055*   @cmd: 	db 31
041948 00          0056*   @x0:	db 0
041949 00          0057*   @y0: 	db 0
04194A 00          0058*   @end: 	db 0 ; padding
04194B             0059*   
04194B             0060*   ; VDU 12: Clear text area (CLS)
04194B             0061*   vdu_cls:
04194B 3E 0C       0062*       ld a,12
04194D 5B D7       0063*   	rst.lil $10
04194F C9          0064*   	ret
041950             0065*   
041950             0066*   vdu_flip:
041950 21 5B 19 04 0067*   	ld hl,@cmd
041954 01 03 00 00 0068*   	ld bc,@end-@cmd
041958 5B DF       0069*   	rst.lil $18
04195A C9          0070*   	ret
04195B 17 00 C3    0071*   @cmd: db 23,0,0xC3
04195E             0072*   @end:
04195E             0073*   
04195E             0074*   ; VDU 16: Clear graphics area (CLG)
04195E             0075*   vdu_clg:
04195E 3E 10       0076*       ld a,16
041960 5B D7       0077*   	rst.lil $10
041962 C9          0078*   	ret
041963             0079*   
041963             0080*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041963             0081*   ; VDU 23, 7: Scrolling
041963             0082*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041963             0083*   ; inputs: a, extent; l, direction; h; speed
041963             0084*   vdu_scroll_down:
041963 32 78 19 04 0085*   	ld (@extent),a
041967 22 79 19 04 0086*   	ld (@dir),hl ; implicitly populates @speed
04196B 21 76 19 04 0087*   	ld hl,@cmd
04196F 01 05 00 00 0088*   	ld bc,@end-@cmd
041973 5B DF       0089*   	rst.lil $18     ;; Sending command to VDP
041975 C9          0090*   	ret
041976 17 07       0091*   @cmd:       db 23,7
041978 00          0092*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041979 00          0093*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04197A 00          0094*   @speed:     db 0x00 ; pixels
04197B 00          0095*   @end:		db 0x00 ; padding
04197C             0096*   
04197C             0097*   ; COLOUR MODES
04197C             0098*   ; Mode	Effect
04197C             0099*   ; 0	Set on-screen pixel to target colour value
04197C             0100*   ; 1	OR value with the on-screen pixel
04197C             0101*   ; 2	AND value with the on-screen pixel
04197C             0102*   ; 3	XOR value with the on-screen pixel
04197C             0103*   ; 4	Invert the on-screen pixel
04197C             0104*   ; 5	No operation
04197C             0105*   ; 6	AND the inverse of the specified colour with the on-screen pixel
04197C             0106*   ; 7	OR the inverse of the specified colour with the on-screen pixel
04197C             0107*   
04197C             0108*   ; VDU 17, colour: Define text colour (COLOUR)
04197C             0109*   vdu_colour_text:
04197C 32 8C 19 04 0110*   	ld (@arg),a
041980 21 8B 19 04 0111*   	ld hl,@cmd
041984 01 02 00 00 0112*   	ld bc,@end-@cmd
041988 5B DF       0113*   	rst.lil $18
04198A C9          0114*   	ret
04198B 11          0115*   @cmd: db 17
04198C 00          0116*   @arg: db 0
04198D             0117*   @end:
04198D             0118*   
04198D             0119*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04198D             0120*   ; inputs: a=mode, c=colour (add 128 to set background colour)
04198D             0121*   vdu_gcol:
04198D 32 A2 19 04 0122*   	ld (@mode),a
041991 79          0123*       ld a,c
041992 32 A3 19 04 0124*       ld (@col),a
041996 21 A1 19 04 0125*   	ld hl,@cmd
04199A 01 03 00 00 0126*   	ld bc,@end-@cmd
04199E 5B DF       0127*   	rst.lil $18
0419A0 C9          0128*   	ret
0419A1 12          0129*   @cmd:  db 18
0419A2 00          0130*   @mode: db 0
0419A3 00          0131*   @col:  db 0
0419A4             0132*   @end:
0419A4             0133*   
0419A4             0134*   
0419A4             0135*   ; VDU 28, left, bottom, right, top: Set text viewport **
0419A4             0136*   ; MIND THE LITTLE-ENDIANESS
0419A4             0137*   ; inputs: c=left,b=bottom,e=right,d=top
0419A4             0138*   ; outputs; nothing
0419A4             0139*   ; destroys: a might make it out alive
0419A4             0140*   vdu_set_txt_viewport:
0419A4 ED 43 BA 19 0141*       ld (@lb),bc
       04          
0419A9 ED 53 BC 19 0142*   	ld (@rt),de
       04          
0419AE 21 B9 19 04 0143*   	ld hl,@cmd
0419B2 01 05 00 00 0144*   	ld bc,@end-@cmd
0419B6 5B DF       0145*   	rst.lil $18
0419B8 C9          0146*   	ret
0419B9 1C          0147*   @cmd:   db 28 ; set text viewport command
0419BA 00 00       0148*   @lb: 	dw 0x0000 ; set by bc
0419BC 00 00       0149*   @rt: 	dw 0x0000 ; set by de
0419BE 00          0150*   @end:   db 0x00	  ; padding
0419BF             0151*   
0419BF             0152*   ; Wait for VBLANK interrupt
0419BF             0153*   vdu_vblank:
0419BF DD E5       0154*       PUSH 	IX
0419C1             0155*   	MOSCALL	mos_sysvars
0419C1 3E 08       0001*M1 			LD	A, function
0419C3 5B CF       0002*M1 			RST.LIL	08h
0419C5 DD 7E 00    0156*   	LD	A, (IX + sysvar_time + 0)
0419C8             0157*   @wait:
0419C8 DD BE 00    0158*       CP 	A, (IX + sysvar_time + 0)
0419CB 28 FB       0159*       JR	Z, @wait
0419CD DD E1       0160*       POP	IX
0419CF C9          0161*       RET
0419D0             0162*   
0419D0             0163*   ; VDU 29, x; y;: Set graphics origin
0419D0             0164*   ; This command sets the graphics origin.
0419D0             0165*   ; The origin is the point on the screen where the coordinates (0,0) are located.
0419D0             0166*   ; inputs: bc=x0,de=y0
0419D0             0167*   ; outputs; nothing
0419D0             0168*   ; destroys: a might make it out alive
0419D0             0169*   vdu_set_gfx_origin:
0419D0 ED 43 E6 19 0170*       ld (@x0),bc
       04          
0419D5 ED 53 E8 19 0171*       ld (@y0),de
       04          
0419DA 21 E5 19 04 0172*       ld hl,@cmd
0419DE 01 05 00 00 0173*       ld bc,@end-@cmd
0419E2 5B DF       0174*       rst.lil $18
0419E4 C9          0175*       ret
0419E5 1D          0176*   @cmd:   db 29 ; set graphics origin command
0419E6 00 00       0177*   @x0: 	dw 0x0000 ; set by bc
0419E8 00 00       0178*   @y0: 	dw 0x0000 ; set by de
0419EA 00          0179*   @end:   db 0x00	  ; padding
0419EB             0180*   
0419EB             0181*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
0419EB             0182*   ; NOTE: the order of the y-coordinate parameters are inverted
0419EB             0183*   ; 	because we have turned off logical screen scaling
0419EB             0184*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0419EB             0185*   ; outputs; nothing
0419EB             0186*   ; destroys: a might make it out alive
0419EB             0187*   vdu_set_gfx_viewport:
0419EB ED 43 0B 1A 0188*       ld (@x0),bc
       04          
0419F0 FD 22 0D 1A 0189*       ld (@y1),iy
       04          
0419F5 DD 22 0F 1A 0190*   	ld (@x1),ix
       04          
0419FA ED 53 11 1A 0191*   	ld (@y0),de
       04          
0419FF 21 0A 1A 04 0192*   	ld hl,@cmd
041A03 01 09 00 00 0193*   	ld bc,@end-@cmd
041A07 5B DF       0194*   	rst.lil $18
041A09 C9          0195*   	ret
041A0A 18          0196*   @cmd:   db 24 ; set graphics viewport command
041A0B 00 00       0197*   @x0: 	dw 0x0000 ; set by bc
041A0D 00 00       0198*   @y1: 	dw 0x0000 ; set by iy
041A0F 00 00       0199*   @x1: 	dw 0x0000 ; set by ix
041A11 00 00       0200*   @y0: 	dw 0x0000 ; set by de
041A13 00          0201*   @end:   db 0x00	  ; padding
041A14             0202*   
041A14             0203*   ; SCREEN MODES
041A14             0204*   ; ===============================
041A14             0205*   ; Mode  Horz  Vert  Cols  Refresh
041A14             0206*   ; ---   ----  ----  ----  -------
041A14             0207*   ; 11    320   240   2     60hz
041A14             0208*   ; 139   320   240   2     60hz
041A14             0209*   ; 23    512   384   2     60hz
041A14             0210*   ; 151   512   384   2     60hz
041A14             0211*   ; 6     640   240   2     60hz
041A14             0212*   ; 134   640   240   2     60hz
041A14             0213*   ; 2     640   480   2     60hz
041A14             0214*   ; 130   640   480   2     60hz
041A14             0215*   ; 17    800   600   2     60hz
041A14             0216*   ; 145   800   600   2     60hz
041A14             0217*   ; 18    1024  768   2     60hz
041A14             0218*   ; 146   1024  768   2     60hz
041A14             0219*   ; ---   ----  ----  ----  -------
041A14             0220*   ; 10    320   240   4     60hz
041A14             0221*   ; 138   320   240   4     60hz
041A14             0222*   ; 22    512   384   4     60hz
041A14             0223*   ; 150   512   384   4     60hz
041A14             0224*   ; 5     640   240   4     60hz
041A14             0225*   ; 133   640   240   4     60hz
041A14             0226*   ; 1     640   480   4     60hz
041A14             0227*   ; 129   640   480   4     60hz
041A14             0228*   ; 16    800   600   4     60hz
041A14             0229*   ; 19    1024  768   4     60hz
041A14             0230*   ; ---   ----  ----  ----  -------
041A14             0231*   ; 9     320   240   16    60hz
041A14             0232*   ; 137   320   240   16    60hz
041A14             0233*   ; 21    512   384   16    60hz
041A14             0234*   ; 149   512   384   16    60hz
041A14             0235*   ; 4     640   240   16    60hz
041A14             0236*   ; 132   640   240   16    60hz
041A14             0237*   ; 0     640   480   16    60hz
041A14             0238*   ; 7     n/a   n/a   16    60hz
041A14             0239*   ; ---   ----  ----  ----  -------
041A14             0240*   ; 8     320   240   64    60hz
041A14             0241*   ; 136   320   240   64    60hz
041A14             0242*   ; 20    512   384   64    60hz
041A14             0243*   ; 3     640   240   64    60hz
041A14             0244*   ; ---   ----  ----  ----  -------
041A14             0245*   vdu_set_screen_mode:
041A14 32 24 1A 04 0246*   	ld (@arg),a
041A18 21 23 1A 04 0247*   	ld hl,@cmd
041A1C 01 02 00 00 0248*   	ld bc,@end-@cmd
041A20 5B DF       0249*   	rst.lil $18
041A22 C9          0250*   	ret
041A23 16          0251*   @cmd: db 22 ; set screen mode
041A24 00          0252*   @arg: db 0  ; screen mode parameter
041A25             0253*   @end:
041A25             0254*   
041A25             0255*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041A25             0256*   ; inputs: a is scaling mode, 1=on, 0=off
041A25             0257*   ; note: default setting on boot is scaling ON
041A25             0258*   vdu_set_scaling:
041A25 32 37 1A 04 0259*   	ld (@arg),a
041A29 21 34 1A 04 0260*   	ld hl,@cmd
041A2D 01 04 00 00 0261*   	ld bc,@end-@cmd
041A31 5B DF       0262*   	rst.lil $18
041A33 C9          0263*   	ret
041A34 17 00 C0    0264*   @cmd: db 23,0,0xC0
041A37 00          0265*   @arg: db 0  ; scaling on/off
041A38             0266*   @end:
041A38             0267*   
041A38             0268*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041A38             0269*   ; inputs: hl=bufferId
041A38             0270*   vdu_buff_select:
041A38 22 4A 1A 04 0271*   	ld (@bufferId),hl
041A3C 21 47 1A 04 0272*   	ld hl,@cmd
041A40 01 05 00 00 0273*   	ld bc,@end-@cmd
041A44 5B DF       0274*   	rst.lil $18
041A46 C9          0275*   	ret
041A47 17 1B 20    0276*   @cmd: db 23,27,0x20
041A4A 00 00       0277*   @bufferId: dw 0x0000
041A4C 00          0278*   @end: db 0x00 ; padding
041A4D             0279*   
041A4D             0280*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041A4D             0281*   ; inputs: a=format; bc=width; de=height
041A4D             0282*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041A4D             0283*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041A4D             0284*   ; 0 	RGBA8888 (4-bytes per pixel)
041A4D             0285*   ; 1 	RGBA2222 (1-bytes per pixel)
041A4D             0286*   ; 2 	Mono/Mask (1-bit per pixel)
041A4D             0287*   ; 3 	Reserved for internal use by VDP (“native” format)
041A4D             0288*   vdu_bmp_create:
041A4D ED 43 69 1A 0289*       ld (@width),bc
       04          
041A52 ED 53 6B 1A 0290*       ld (@height),de
       04          
041A57 32 6D 1A 04 0291*       ld (@fmt),a
041A5B 21 66 1A 04 0292*   	ld hl,@cmd
041A5F 01 08 00 00 0293*   	ld bc,@end-@cmd
041A63 5B DF       0294*   	rst.lil $18
041A65 C9          0295*   	ret
041A66 17 1B 21    0296*   @cmd:       db 23,27,0x21
041A69 00 00       0297*   @width:     dw 0x0000
041A6B 00 00       0298*   @height:    dw 0x0000
041A6D 00          0299*   @fmt:       db 0x00
041A6E             0300*   @end:
041A6E             0301*   
041A6E             0302*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041A6E             0303*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041A6E             0304*   vdu_load_img_rgba2_to_8:
041A6E             0305*   ; backup the target buffer id and image dimensions
041A6E E5          0306*       push hl
041A6F D5          0307*       push de
041A70 C5          0308*       push bc
041A71             0309*   ; load the rgba2 image to working buffer 65534
041A71 21 FE FF 00 0310*       ld hl,65534 ; temporary working buffer id
041A75 CD 78 1B 04 0311*   	call vdu_load_buffer_from_file
041A79             0312*   ; restore the image dimensions and target buffer id
041A79 C1          0313*       pop bc
041A7A D1          0314*       pop de
041A7B E1          0315*       pop hl
041A7C             0316*   ; fall through to vdu_rgba2_to_8
041A7C             0317*   
041A7C             0318*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041A7C             0319*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041A7C             0320*   ; the "expand bitmap" command is:
041A7C             0321*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041A7C             0322*   ; and then to reverse the byte order to fix endian-ness:
041A7C             0323*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041A7C             0324*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041A7C             0325*   ; VDU 23,27,&20,targetBufferID%;
041A7C             0326*   ; VDU 23,27,&21,width%;height%;0
041A7C             0327*   ; -------------------------------------------------------------------
041A7C             0328*   ; inputs: bc,de image width,height ; hl = targetBufferId
041A7C             0329*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041A7C             0330*   vdu_rgba2_to_8:
041A7C             0331*   ; load the image dimensions and buffer id parameters
041A7C ED 43 D8 1A 0332*       ld (@width),bc
       04          
041A81 ED 53 DA 1A 0333*       ld (@height),de
       04          
041A86 22 BD 1A 04 0334*       ld (@bufferId0),hl
041A8A 22 CA 1A 04 0335*       ld (@bufferId2),hl
041A8E 22 D3 1A 04 0336*       ld (@bufferId1),hl
041A92             0337*   ; clean up bytes that got stomped on by the ID loads
041A92 3E 48       0338*       ld a,0x48
041A94 32 BF 1A 04 0339*       ld (@bufferId0+2),a
041A98 3E 17       0340*       ld a,23
041A9A 32 D5 1A 04 0341*       ld (@bufferId1+2),a
041A9E 3E 18       0342*       ld a,24
041AA0 32 CC 1A 04 0343*       ld (@bufferId2+2),a
041AA4 AF          0344*       xor a
041AA5 32 DC 1A 04 0345*       ld (@height+2),a
041AA9             0346*   ; send the vdu command strings
041AA9 21 B4 1A 04 0347*       ld hl,@beg
041AAD 01 29 00 00 0348*       ld bc,@end-@beg
041AB1 5B DF       0349*       rst.lil $18
041AB3 C9          0350*       ret
041AB4             0351*   @beg:
041AB4             0352*   ; Command 14: Consolidate blocks in a buffer
041AB4             0353*   ; VDU 23, 0, &A0, bufferId; 14
041AB4 17 00 A0    0354*       db 23,0,0xA0
041AB7 FE FF       0355*       dw 65534 ; workingBufferId
041AB9 0E          0356*       db 14 ; consolidate blocks
041ABA             0357*   ; the "expand bitmap" command is:
041ABA             0358*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041ABA 17 00 A0    0359*       db 23,0,0xA0
041ABD 00 00       0360*   @bufferId0: dw 0x0000 ; targetBufferId
041ABF 48          0361*       db 0x48 ; given as decimal command 72 in the docs
041AC0 02          0362*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041AC1 FE FF       0363*       dw 65534 ; sourceBufferId
041AC3 00 7F BF FF 0364*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041AC7             0365*   ; reverse the byte order to fix endian-ness:
041AC7             0366*   ; Command 24: Reverse the order of data of blocks within a buffer
041AC7             0367*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041AC7             0368*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041AC7 17 00 A0    0369*       db 23,0,0xA0
041ACA 00 00       0370*   @bufferId2:    dw 0x0000 ; targetBufferId
041ACC 18          0371*       db 24 ; reverse byte order
041ACD 04          0372*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041ACE 04 00       0373*       dw 4 ; size (4 bytes)
041AD0             0374*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041AD0             0375*   ; VDU 23,27,&20,targetBufferID%;
041AD0 17 1B 20    0376*       db 23,27,0x20 ; select bitmap
041AD3 00 00       0377*   @bufferId1: dw 0x0000 ; targetBufferId
041AD5             0378*   ; VDU 23,27,&21,width%;height%;0
041AD5 17 1B 21    0379*       db 23,27,0x21 ; create bitmap from buffer
041AD8 00 00       0380*   @width: dw 0x0000
041ADA 00 00       0381*   @height: dw 0x0000
041ADC 00          0382*       db 0x00 ; rgba8888 format
041ADD             0383*   @end:
041ADD             0384*   
041ADD             0385*   ; scratch variables
041ADD 00 00 00    0386*   bufferId0: dl 0x000000
041AE0 00 00 00    0387*   bufferId1: dl 0x000000
041AE3             0388*   
041AE3             0389*   ; load a vdu buffer from local memory
041AE3             0390*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041AE3             0391*   vdu_load_buffer:
041AE3 ED 43 0C 1B 0392*       ld (@length),bc
       04          
041AE8 D5          0393*       push de ; save data pointer
041AE9             0394*   ; send the vdu command string
041AE9 7D          0395*       ld a,l
041AEA 32 09 1B 04 0396*       ld (@bufferId),a
041AEE 7C          0397*       ld a,h
041AEF 32 0A 1B 04 0398*       ld (@bufferId+1),a
041AF3 21 06 1B 04 0399*       ld hl,@cmd
041AF7 01 08 00 00 0400*       ld bc,@end-@cmd
041AFB 5B DF       0401*       rst.lil $18
041AFD             0402*   ; send the buffer data
041AFD E1          0403*       pop hl ; pointer to data
041AFE ED 4B 0C 1B 0404*       ld bc,(@length)
       04          
041B03 5B DF       0405*       rst.lil $18 ; send it
041B05 C9          0406*       ret
041B06             0407*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041B06 17 00 A0    0408*   @cmd:       db 23,0,0xA0
041B09 00 00       0409*   @bufferId:	dw 0x0000
041B0B 00          0410*   		    db 0 ; load buffer
041B0C 00 00       0411*   @length:	dw 0x0000
041B0E 00          0412*   @end: db 0 ; padding
041B0F             0413*   
041B0F             0414*   ; clear a buffer
041B0F             0415*   ; inputs: hl = bufferId
041B0F             0416*   vdu_clear_buffer:
041B0F 7D          0417*       ld a,l
041B10 32 27 1B 04 0418*       ld (@bufferId),a
041B14 7C          0419*       ld a,h
041B15 32 28 1B 04 0420*       ld (@bufferId+1),a
041B19 21 24 1B 04 0421*       ld hl,@cmd
041B1D 01 06 00 00 0422*       ld bc,@end-@cmd
041B21 5B DF       0423*       rst.lil $18
041B23 C9          0424*       ret
041B24 17 00 A0    0425*   @cmd:       db 23,0,0xA0
041B27 00 00       0426*   @bufferId:	dw 0x0000
041B29 02          0427*   		    db 2 ; clear buffer
041B2A             0428*   @end:
041B2A             0429*   
041B2A             0430*   vdu_clear_all_buffers:
041B2A             0431*   ; clear all buffers
041B2A 21 35 1B 04 0432*       ld hl,@beg
041B2E 01 06 00 00 0433*       ld bc,@end-@beg
041B32 5B DF       0434*       rst.lil $18
041B34 C9          0435*       ret
041B35 17 00 A0    0436*   @beg: db 23,0,$A0
041B38 FF FF       0437*         dw -1 ; clear all buffers
041B3A 02          0438*         db 2  ; command 2: clear a buffer
041B3B             0439*   @end:
041B3B             0440*   
041B3B             0441*   ; Command 14: Consolidate blocks in a buffer
041B3B             0442*   vdu_consolidate_buffer:
041B3B             0443*   ; set parameters for vdu call
041B3B 7D          0444*       ld a,l
041B3C 32 53 1B 04 0445*       ld (@bufferId),a
041B40 7C          0446*       ld a,h
041B41 32 54 1B 04 0447*       ld (@bufferId+1),a
041B45 21 50 1B 04 0448*       ld hl,@beg
041B49 01 06 00 00 0449*       ld bc,@end-@beg
041B4D 5B DF       0450*       rst.lil $18
041B4F C9          0451*       ret
041B50             0452*   ; VDU 23, 0, &A0, bufferId; 14
041B50 17 00 A0    0453*   @beg: db 23,0,0xA0
041B53 00 00       0454*   @bufferId: dw 0x0000
041B55 0E          0455*              db 14
041B56             0456*   @end:
041B56             0457*   
041B56             0458*   ; load an image file to a buffer and make it a bitmap
041B56             0459*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041B56             0460*   vdu_load_img:
041B56             0461*   ; back up image type and dimension parameters
041B56 22 DD 1A 04 0462*       ld (bufferId0),hl
041B5A F5          0463*       push af
041B5B C5          0464*   	push bc
041B5C D5          0465*   	push de
041B5D             0466*   ; load the image
041B5D CD 78 1B 04 0467*   	call vdu_load_buffer_from_file
041B61             0468*   ; now make it a bitmap
041B61 2A DD 1A 04 0469*       ld hl,(bufferId0)
041B65 CD 3B 1B 04 0470*       call vdu_consolidate_buffer
041B69 2A DD 1A 04 0471*       ld hl,(bufferId0)
041B6D CD 38 1A 04 0472*       call vdu_buff_select
041B71 D1          0473*   	pop de ; image height
041B72 C1          0474*   	pop bc ; image width
041B73 F1          0475*   	pop af ; image type
041B74 C3 4D 1A 04 0476*   	jp vdu_bmp_create ; will return to caller from there
041B78             0477*   
041B78             0478*   ; inputs: hl = bufferId; iy = pointer to filename
041B78             0479*   vdu_load_buffer_from_file:
041B78 22 DD 1A 04 0480*       ld (bufferId0),hl
041B7C             0481*   
041B7C             0482*   ; clear target buffer
041B7C CD 0F 1B 04 0483*       call vdu_clear_buffer
041B80             0484*   
041B80             0485*   ; open the file in read mode
041B80             0486*   ; Open a file
041B80             0487*   ; HLU: Filename
041B80             0488*   ;   C: Mode
041B80             0489*   ; Returns:
041B80             0490*   ;   A: Filehandle, or 0 if couldn't open
041B80 FD E5       0491*   	push iy ; pointer to filename
041B82 E1          0492*   	pop hl
041B83 0E 01       0493*   	ld c,fa_read
041B85             0494*       MOSCALL mos_fopen
041B85 3E 0A       0001*M1 			LD	A, function
041B87 5B CF       0002*M1 			RST.LIL	08h
041B89 32 C4 1B 04 0495*       ld (@filehandle),a
041B8D             0496*   
041B8D             0497*   @read_file:
041B8D             0498*   ; Read a block of data from a file
041B8D             0499*   ;   C: Filehandle
041B8D             0500*   ; HLU: Pointer to where to write the data to
041B8D             0501*   ; DEU: Number of bytes to read
041B8D             0502*   ; Returns:
041B8D             0503*   ; DEU: Number of bytes read
041B8D 3A C4 1B 04 0504*       ld a,(@filehandle)
041B91 4F          0505*       ld c,a
041B92 21 00 E0 B7 0506*       ld hl,filedata
041B96 11 00 20 00 0507*       ld de,8192 ; max we can read into onboard sram at one time
041B9A             0508*       MOSCALL mos_fread
041B9A 3E 1A       0001*M1 			LD	A, function
041B9C 5B CF       0002*M1 			RST.LIL	08h
041B9E             0509*   
041B9E             0510*   ; test de for zero bytes read
041B9E 21 00 00 00 0511*       ld hl,0
041BA2 AF          0512*       xor a ; clear carry
041BA3 ED 52       0513*       sbc hl,de
041BA5 CA BB 1B 04 0514*       jp z,@close_file
041BA9             0515*   
041BA9             0516*   ; load a vdu buffer from local memory
041BA9             0517*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041BA9 2A DD 1A 04 0518*       ld hl,(bufferId0)
041BAD D5          0519*       push de ; chunksize
041BAE C1          0520*       pop bc
041BAF 11 00 E0 B7 0521*       ld de,filedata
041BB3 CD E3 1A 04 0522*       call vdu_load_buffer
041BB7             0523*   
041BB7             0524*   ; read the next block
041BB7 C3 8D 1B 04 0525*       jp @read_file
041BBB             0526*   
041BBB             0527*   ; close the file
041BBB             0528*   @close_file:
041BBB 3A C4 1B 04 0529*       ld a,(@filehandle)
041BBF             0530*       MOSCALL mos_fclose
041BBF 3E 0B       0001*M1 			LD	A, function
041BC1 5B CF       0002*M1 			RST.LIL	08h
041BC3 C9          0531*       ret ; vdu_load_buffer_from_file
041BC4             0532*   
041BC4 00          0533*   @filehandle: db 0 ; file handle
041BC5 00 00 00    0534*   @fil: dl 0 ; pointer to FIL struct
041BC8             0535*   
041BC8 00 00 00    0536*   @chunkpointer: dl 0 ; pointer to current chunk
041BCB             0537*   
041BCB             0538*   ; File information structure (FILINFO)
041BCB             0539*   @filinfo:
041BCB 00 00 00 00 0540*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041BCF 00 00       0541*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041BD1 00 00       0542*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041BD3 00          0543*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041BD4 00 00 00 00 0544*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041BE1 00 00 00 00 0545*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041CE1             0039        include "vdu_fonts.inc"
041CE1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041D00             0002*   ; select font
041D00             0003*   ; inputs: hl = bufferId, a = font flags
041D00             0004*   ; Flags:
041D00             0005*   ; Bit	Description
041D00             0006*   ; 0	Adjust cursor position to ensure text baseline is aligned
041D00             0007*   ;   0: Do not adjust cursor position (best for changing font on a new line)
041D00             0008*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
041D00             0009*   ; 1-7	Reserved for future use
041D00             0010*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041D00             0011*   vdu_font_select:
041D00 22 17 1D 04 0012*       ld (@bufferId),hl
041D04 32 19 1D 04 0013*       ld (@flags),a
041D08 21 13 1D 04 0014*       ld hl,@cmd
041D0C 01 07 00 00 0015*       ld bc,@end-@cmd
041D10 5B DF       0016*       rst.lil $18
041D12 C9          0017*       ret
041D13 17 00 95 00 0018*   @cmd: db 23, 0, 0x95, 0
041D17 00 00       0019*   @bufferId: dw 0x0000
041D19 00          0020*   @flags: db 0x00
041D1A             0021*   @end:
041D1A             0022*   
041D1A             0023*   ; create font from buffer
041D1A             0024*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041D1A             0025*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041D1A             0026*   vdu_font_create:
041D1A 22 3F 1D 04 0027*       ld (@bufferId),hl
041D1E ED 53 41 1D 0028*       ld (@width),de ; also loads height
       04          
041D23 32 44 1D 04 0029*       ld (@flags),a
041D27 7A          0030*       ld a,d ; height
041D28 32 43 1D 04 0031*       ld (@ascent),a ; ascent = height
041D2C             0032*   ; consolidate buffer
041D2C CD 3B 1B 04 0033*       call vdu_consolidate_buffer
041D30             0034*   ; create font
041D30 21 3B 1D 04 0035*       ld hl,@cmd
041D34 01 0A 00 00 0036*       ld bc,@end-@cmd
041D38 5B DF       0037*       rst.lil $18
041D3A C9          0038*       ret
041D3B 17 00 95 01 0039*   @cmd: db 23, 0, 0x95, 1
041D3F 00 00       0040*   @bufferId: dw 0x0000
041D41 00          0041*   @width: db 0x00
041D42 00          0042*   @height: db 0x00
041D43 00          0043*   @ascent: db 0x00
041D44 00          0044*   @flags: db 0x00
041D45             0045*   @end:
041D45             0046*   
041D45             0047*   ; set or adjust font property
041D45             0048*   ; inputs: hl = bufferId, a = field, de = value
041D45             0049*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041D45             0050*   vdu_font_property:
041D45 22 61 1D 04 0051*       ld (@bufferId),hl
041D49 32 63 1D 04 0052*       ld (@field),a
041D4D ED 53 64 1D 0053*       ld (@value),de
       04          
041D52 21 5D 1D 04 0054*       ld hl,@cmd
041D56 01 09 00 00 0055*       ld bc,@end-@cmd
041D5A 5B DF       0056*       rst.lil $18
041D5C C9          0057*       ret
041D5D 17 00 95 02 0058*   @cmd: db 23, 0, 0x95, 2
041D61 00 00       0059*   @bufferId: dw 0x0000
041D63 00          0060*   @field: db 0x00
041D64 00 00       0061*   @value: dw 0x0000
041D66 00          0062*   @end: db 0x00 ; padding
041D67             0063*   
041D67             0064*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041D67             0065*   
041D67             0066*   ; Clear/Delete font
041D67             0067*   ; inputs: hl = bufferId
041D67             0068*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041D67             0069*   vdu_font_clear:
041D67 22 7A 1D 04 0070*       ld (@bufferId),hl
041D6B 21 76 1D 04 0071*       ld hl,@cmd
041D6F 01 06 00 00 0072*       ld bc,@end-@cmd
041D73 5B DF       0073*       rst.lil $18
041D75 C9          0074*       ret
041D76 17 00 95 04 0075*   @cmd: db 23, 0, 0x95, 4
041D7A 00 00       0076*   @bufferId: dw 0x0000
041D7C 00          0077*   @end: db 0x00 ; padding
041D7D             0078*   
041D7D             0079*   ; Copy system font to buffer
041D7D             0080*   ; inputs: hl = bufferId
041D7D             0081*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041D7D             0082*   vdu_font_copy_system:
041D7D 22 90 1D 04 0083*       ld (@bufferId),hl
041D81 21 8C 1D 04 0084*       ld hl,@cmd
041D85 01 06 00 00 0085*       ld bc,@end-@cmd
041D89 5B DF       0086*       rst.lil $18
041D8B C9          0087*       ret
041D8C 17 00 95 05 0088*   @cmd: db 23, 0, 0x95, 5
041D90 00 00       0089*   @bufferId: dw 0x0000
041D92 00          0090*   @end: db 0x00 ; padding
041D93             0040        include "vdu_plot.inc"
041D93 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
041E00             0002*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041E00             0003*   ; PLOT code 	(Decimal) 	Effect
041E00             0004*   ; &00-&07 	0-7 	Solid line, includes both ends
041E00             0005*   plot_sl_both: equ 0x00
041E00             0006*   
041E00             0007*   ; &08-&0F 	8-15 	Solid line, final point omitted
041E00             0008*   plot_sl_first: equ 0x08
041E00             0009*   
041E00             0010*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
041E00             0011*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
041E00             0012*   
041E00             0013*   ; &20-&27 	32-39 	Solid line, first point omitted
041E00             0014*   plot_sl_last: equ 0x20
041E00             0015*   
041E00             0016*   ; &28-&2F 	40-47 	Solid line, both points omitted
041E00             0017*   plot_sl_none: equ 0x28
041E00             0018*   
041E00             0019*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
041E00             0020*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
041E00             0021*   
041E00             0022*   ; &40-&47 	64-71 	Point plot
041E00             0023*   plot_pt: equ 0x40
041E00             0024*   
041E00             0025*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
041E00             0026*   plot_lf_lr_non_bg: equ 0x48
041E00             0027*   
041E00             0028*   ; &50-&57 	80-87 	Triangle fill
041E00             0029*   plot_tf: equ 0x50
041E00             0030*   
041E00             0031*   ; &58-&5F 	88-95 	Line fill right to background §§
041E00             0032*   plot_lf_r_bg: equ 0x58
041E00             0033*   
041E00             0034*   ; &60-&67 	96-103 	Rectangle fill
041E00             0035*   plot_rf: equ 0x60
041E00             0036*   
041E00             0037*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
041E00             0038*   plot_lf_lr_fg: equ 0x60
041E00             0039*   
041E00             0040*   ; &70-&77 	112-119 	Parallelogram fill
041E00             0041*   plot_pf: equ 0x70
041E00             0042*   
041E00             0043*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
041E00             0044*   plot_lf_r_non_fg: equ 0x78
041E00             0045*   
041E00             0046*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
041E00             0047*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
041E00             0048*   
041E00             0049*   ; &90-&97 	144-151 	Circle outline
041E00             0050*   plot_co: equ 0x90
041E00             0051*   
041E00             0052*   ; &98-&9F 	152-159 	Circle fill
041E00             0053*   plot_cf: equ 0x98
041E00             0054*   
041E00             0055*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
041E00             0056*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
041E00             0057*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
041E00             0058*   
041E00             0059*   ; &B8-&BF 	184-191 	Rectangle copy/move
041E00             0060*   plot_rcm: equ 0xB8
041E00             0061*   
041E00             0062*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
041E00             0063*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
041E00             0064*   ; &D0-&D7 	208-215 	Not defined
041E00             0065*   ; &D8-&DF 	216-223 	Not defined
041E00             0066*   ; &E0-&E7 	224-231 	Not defined
041E00             0067*   
041E00             0068*   ; &E8-&EF 	232-239 	Bitmap plot §
041E00             0069*   plot_bmp: equ 0xE8
041E00             0070*   
041E00             0071*   ; &F0-&F7 	240-247 	Not defined
041E00             0072*   ; &F8-&FF 	248-255 	Not defined
041E00             0073*   
041E00             0074*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
041E00             0075*   ; Agon Console8 VDP 2.2.0
041E00             0076*   
041E00             0077*   ; Within each group of eight plot codes, the effects are as follows:
041E00             0078*   ; Plot code 	Effect
041E00             0079*   ; 0 	Move relative
041E00             0080*   mv_rel: equ 0
041E00             0081*   
041E00             0082*   ; 1 	Plot relative in current foreground colour
041E00             0083*   dr_rel_fg: equ 1
041E00             0084*   
041E00             0085*   ; 2 	Not supported (Plot relative in logical inverse colour)
041E00             0086*   ; 3 	Plot relative in current background colour
041E00             0087*   dr_rel_bg: equ 3
041E00             0088*   
041E00             0089*   ; 4 	Move absolute
041E00             0090*   mv_abs: equ 4
041E00             0091*   
041E00             0092*   ; 5 	Plot absolute in current foreground colour
041E00             0093*   dr_abs_fg: equ 5
041E00             0094*   
041E00             0095*   ; 6 	Not supported (Plot absolute in logical inverse colour)
041E00             0096*   ; 7 	Plot absolute in current background colour
041E00             0097*   dr_abs_bg: equ 7
041E00             0098*   
041E00             0099*   ; Codes 0-3 use the position data provided as part of the command
041E00             0100*   ; as a relative position, adding the position given to the current
041E00             0101*   ; graphical cursor position. Codes 4-7 use the position data provided
041E00             0102*   ; as part of the command as an absolute position, setting the current
041E00             0103*   ; graphical cursor position to the position given.
041E00             0104*   
041E00             0105*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
041E00             0106*   ; current pixel colour. These operations cannot currently be supported
041E00             0107*   ; by the graphics system the Agon VDP uses, so these codes are not
041E00             0108*   ; supported. Support for these codes may be added in a future version
041E00             0109*   ; of the VDP firmware.
041E00             0110*   
041E00             0111*   ; 16 colour palette constants
041E00             0112*   c_black: equ 0
041E00             0113*   c_red_dk: equ 1
041E00             0114*   c_green_dk: equ 2
041E00             0115*   c_yellow_dk: equ 3
041E00             0116*   c_blue_dk: equ 4
041E00             0117*   c_magenta_dk: equ 5
041E00             0118*   c_cyan_dk: equ 6
041E00             0119*   c_grey: equ 7
041E00             0120*   c_grey_dk: equ 8
041E00             0121*   c_red: equ 9
041E00             0122*   c_green: equ 10
041E00             0123*   c_yellow: equ 11
041E00             0124*   c_blue: equ 12
041E00             0125*   c_magenta: equ 13
041E00             0126*   c_cyan: equ 14
041E00             0127*   c_white: equ 15
041E00             0128*   
041E00             0129*   ; VDU 25, mode, x; y;: PLOT command
041E00             0130*   ; inputs: a=mode, bc=x0, de=y0
041E00             0131*   vdu_plot:
041E00 32 1A 1E 04 0132*       ld (@mode),a
041E04 ED 43 1B 1E 0133*       ld (@x0),bc
       04          
041E09 ED 53 1D 1E 0134*       ld (@y0),de
       04          
041E0E 21 19 1E 04 0135*   	ld hl,@cmd
041E12 01 06 00 00 0136*   	ld bc,@end-@cmd
041E16 5B DF       0137*   	rst.lil $18
041E18 C9          0138*   	ret
041E19 19          0139*   @cmd:   db 25
041E1A 00          0140*   @mode:  db 0
041E1B 00 00       0141*   @x0: 	dw 0
041E1D 00 00       0142*   @y0: 	dw 0
041E1F 00          0143*   @end:   db 0 ; extra byte to soak up deu
041E20             0144*   
041E20             0145*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041E20             0146*   ; &E8-&EF 	232-239 	Bitmap plot §
041E20             0147*   ; VDU 25, mode, x; y;: PLOT command
041E20             0148*   ; inputs: bc=x0, de=y0
041E20             0149*   ; prerequisites: vdu_buff_select
041E20             0150*   vdu_plot_bmp:
041E20 ED 43 37 1E 0151*       ld (@x0),bc
       04          
041E25 ED 53 39 1E 0152*       ld (@y0),de
       04          
041E2A 21 35 1E 04 0153*   	ld hl,@cmd
041E2E 01 06 00 00 0154*   	ld bc,@end-@cmd
041E32 5B DF       0155*   	rst.lil $18
041E34 C9          0156*   	ret
041E35 19          0157*   @cmd:   db 25
041E36 ED          0158*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041E37 00 00       0159*   @x0: 	dw 0x0000
041E39 00 00       0160*   @y0: 	dw 0x0000
041E3B 00          0161*   @end:   db 0x00 ; padding
041E3C             0162*   
041E3C             0163*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041E3C             0164*   ; &E8-&EF 	232-239 	Bitmap plot §
041E3C             0165*   ; VDU 25, mode, x; y;: PLOT command
041E3C             0166*   ; inputs: bc=x0, de=y0
041E3C             0167*   ; USING 16.8 FIXED POINT COORDINATES
041E3C             0168*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041E3C             0169*   ;   the fractional portiion of the inputs are truncated
041E3C             0170*   ;   leaving only the 16-bit integer portion
041E3C             0171*   ; prerequisites: vdu_buff_select
041E3C             0172*   vdu_plot_bmp168:
041E3C             0173*   ; populate in the reverse of normal to keep the
041E3C             0174*   ; inputs from stomping on each other
041E3C ED 53 5A 1E 0175*       ld (@y0-1),de
       04          
041E41 ED 43 58 1E 0176*       ld (@x0-1),bc
       04          
041E46 3E ED       0177*       ld a,plot_bmp+dr_abs_fg ; 0xED
041E48 32 58 1E 04 0178*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
041E4C 21 57 1E 04 0179*   	ld hl,@cmd
041E50 01 06 00 00 0180*   	ld bc,@end-@cmd
041E54 5B DF       0181*   	rst.lil $18
041E56 C9          0182*   	ret
041E57 19          0183*   @cmd:   db 25
041E58 ED          0184*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041E59 00 00       0185*   @x0: 	dw 0x0000
041E5B 00 00       0186*   @y0: 	dw 0x0000
041E5D             0187*   @end:  ; no padding required b/c we shifted de right
041E5D             0188*   
041E5D             0189*   ; draw a filled rectangle
041E5D             0190*   vdu_plot_rf:
041E5D ED 43 84 1E 0191*       ld (@x0),bc
       04          
041E62 ED 53 86 1E 0192*       ld (@y0),de
       04          
041E67 DD 22 8A 1E 0193*       ld (@x1),ix
       04          
041E6C FD 22 8C 1E 0194*       ld (@y1),iy
       04          
041E71 3E 19       0195*       ld a,25 ; we have to reload the 2nd plot command
041E73 32 88 1E 04 0196*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041E77 21 82 1E 04 0197*   	ld hl,@cmd0
041E7B 01 0C 00 00 0198*   	ld bc,@end-@cmd0
041E7F 5B DF       0199*   	rst.lil $18
041E81 C9          0200*       ret
041E82 19          0201*   @cmd0:  db 25 ; plot
041E83 04          0202*   @arg0:  db plot_sl_both+mv_abs
041E84 00 00       0203*   @x0:    dw 0x0000
041E86 00 00       0204*   @y0:    dw 0x0000
041E88 19          0205*   @cmd1:  db 25 ; plot
041E89 65          0206*   @arg1:  db plot_rf+dr_abs_fg
041E8A 00 00       0207*   @x1:    dw 0x0000
041E8C 00 00       0208*   @y1:    dw 0x0000
041E8E 00          0209*   @end:   db 0x00 ; padding
041E8F             0210*   
041E8F             0211*   ; draw a filled circle
041E8F             0212*   vdu_plot_cf:
041E8F ED 43 B6 1E 0213*       ld (@x0),bc
       04          
041E94 ED 53 B8 1E 0214*       ld (@y0),de
       04          
041E99 DD 22 BC 1E 0215*       ld (@x1),ix
       04          
041E9E FD 22 BE 1E 0216*       ld (@y1),iy
       04          
041EA3 3E 19       0217*       ld a,25 ; we have to reload the 2nd plot command
041EA5 32 BA 1E 04 0218*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041EA9 21 B4 1E 04 0219*   	ld hl,@cmd0
041EAD 01 0C 00 00 0220*   	ld bc,@end-@cmd0
041EB1 5B DF       0221*   	rst.lil $18
041EB3 C9          0222*       ret
041EB4 19          0223*   @cmd0:  db 25 ; plot
041EB5 04          0224*   @arg0:  db plot_sl_both+mv_abs
041EB6 00 00       0225*   @x0:    dw 0x0000
041EB8 00 00       0226*   @y0:    dw 0x0000
041EBA 19          0227*   @cmd1:  db 25 ; plot
041EBB 9D          0228*   @arg1:  db plot_cf+dr_abs_fg
041EBC 00 00       0229*   @x1:    dw 0x0000
041EBE 00 00       0230*   @y1:    dw 0x0000
041EC0 00          0231*   @end:   db 0x00 ; padding
041EC1             0041        include "vdu_sprites.inc"
041EC1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041F00             0002*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041F00             0003*   ; the VDP can support up to 256 sprites. They must be defined
041F00             0004*   ; contiguously, and so the first sprite is sprite 0.
041F00             0005*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041F00             0006*   ; Once a selection of sprites have been defined, you can activate
041F00             0007*   ; them using the VDU 23, 27, 7, n command, where n is the number
041F00             0008*   ; of sprites to activate. This will activate the first n sprites,
041F00             0009*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041F00             0010*   
041F00             0011*   ; A single sprite can have multiple "frames", referring to
041F00             0012*   ; different bitmaps.
041F00             0013*   ; (These bitmaps do not need to be the same size.)
041F00             0014*   ; This allows a sprite to include an animation sequence,
041F00             0015*   ; which can be stepped through one frame at a time, or picked
041F00             0016*   ; in any order.
041F00             0017*   
041F00             0018*   ; Any format of bitmap can be used as a sprite frame. It should
041F00             0019*   ; be noted however that "native" format bitmaps are not
041F00             0020*   ; recommended for use as sprite frames, as they cannot get
041F00             0021*   ; erased from the screen. (As noted above, the "native" bitmap
041F00             0022*   ; format is not really intended for general use.) This is part
041F00             0023*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041F00             0024*   ; screen are now stored in RGBA2222 format.
041F00             0025*   
041F00             0026*   ; An "active" sprite can be hidden, so it will stop being drawn,
041F00             0027*   ; and then later shown again.
041F00             0028*   
041F00             0029*   ; Moving sprites around the screen is done by changing the
041F00             0030*   ; position of the sprite. This can be done either by setting
041F00             0031*   ; the absolute position of the sprite, or by moving the sprite
041F00             0032*   ; by a given number of pixels. (Sprites are positioned using
041F00             0033*   ; pixel coordinates, and not by the logical OS coordinate system.)
041F00             0034*   ; In the current sprite system, sprites will not update their
041F00             0035*   ; position on-screen until either another drawing operation is
041F00             0036*   ; performed or an explicit VDU 23, 27, 15 command is performed.
041F00             0037*   
041F00             0038*   ; VDU 23, 27, 4, n: Select sprite n
041F00             0039*   ; inputs: a is the 8-bit sprite id
041F00             0040*   vdu_sprite_select:
041F00 32 12 1F 04 0041*       ld (@sprite),a
041F04 21 0F 1F 04 0042*       ld hl,@cmd
041F08 01 04 00 00 0043*       ld bc,@end-@cmd
041F0C 5B DF       0044*       rst.lil $18
041F0E C9          0045*       ret
041F0F 17 1B 04    0046*   @cmd:    db 23,27,4
041F12 00          0047*   @sprite: db 0x00
041F13             0048*   @end:
041F13             0049*   
041F13             0050*   ; VDU 23, 27, 5: Clear frames in current sprite
041F13             0051*   ; inputs: none
041F13             0052*   ; prerequisites: vdu_sprite_select
041F13             0053*   vdu_sprite_clear_frames:
041F13 21 1E 1F 04 0054*       ld hl,@cmd
041F17 01 03 00 00 0055*       ld bc,@end-@cmd
041F1B 5B DF       0056*       rst.lil $18
041F1D C9          0057*       ret
041F1E 17 1B 05    0058*   @cmd: db 23,27,5
041F21             0059*   @end:
041F21             0060*   
041F21             0061*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
041F21             0062*   ; inputs: a is the 8-bit bitmap number
041F21             0063*   ; prerequisites: vdu_sprite_select
041F21             0064*   vdu_sprite_add_bmp:
041F21 32 33 1F 04 0065*       ld (@bmp),a
041F25 21 30 1F 04 0066*       ld hl,@cmd
041F29 01 04 00 00 0067*       ld bc,@end-@cmd
041F2D 5B DF       0068*       rst.lil $18
041F2F C9          0069*       ret
041F30 17 1B 06    0070*   @cmd: db 23,27,6
041F33 00          0071*   @bmp: db 0x00
041F34             0072*   @end:
041F34             0073*   
041F34             0074*   ; VDU 23, 27, 7, n: Activate n sprites
041F34             0075*   ; inputs: a is the number of sprites to activate
041F34             0076*   ; prerequisites: each sprite activated must have at least one frame attached to it
041F34             0077*   vdu_sprite_activate:
041F34 32 46 1F 04 0078*       ld (@num),a
041F38 21 43 1F 04 0079*       ld hl,@cmd
041F3C 01 04 00 00 0080*       ld bc,@end-@cmd
041F40 5B DF       0081*       rst.lil $18
041F42 C9          0082*       ret
041F43 17 1B 07    0083*   @cmd: db 23,27,7
041F46 00          0084*   @num: db 0x00
041F47             0085*   @end:
041F47             0086*   
041F47             0087*   ; VDU 23, 27, 8: Select next frame of current sprite
041F47             0088*   ; inputs: none
041F47             0089*   ; prerequisites: vdu_sprite_select
041F47             0090*   vdu_sprite_next_frame:
041F47 21 52 1F 04 0091*       ld hl,@cmd
041F4B 01 03 00 00 0092*       ld bc,@end-@cmd
041F4F 5B DF       0093*       rst.lil $18
041F51 C9          0094*       ret
041F52 17 1B 08    0095*   @cmd: db 23,27,8
041F55             0096*   @end:
041F55             0097*   
041F55             0098*   ; VDU 23, 27, 9: Select previous frame of current sprite
041F55             0099*   ; inputs: none
041F55             0100*   ; prerequisites: vdu_sprite_select
041F55             0101*   vdu_sprite_prev_frame:
041F55 21 60 1F 04 0102*       ld hl,@cmd
041F59 01 03 00 00 0103*       ld bc,@end-@cmd
041F5D 5B DF       0104*       rst.lil $18
041F5F C9          0105*       ret
041F60 17 1B 09    0106*   @cmd: db 23,27,9
041F63             0107*   @end:
041F63             0108*   
041F63             0109*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
041F63             0110*   ; inputs: a is frame number to select
041F63             0111*   ; prerequisites: vdu_sprite_select
041F63             0112*   vdu_sprite_select_frame:
041F63 32 75 1F 04 0113*       ld (@frame),a
041F67 21 72 1F 04 0114*       ld hl,@cmd
041F6B 01 04 00 00 0115*       ld bc,@end-@cmd
041F6F 5B DF       0116*       rst.lil $18
041F71 C9          0117*       ret
041F72 17 1B 0A    0118*   @cmd:    db 23,27,10
041F75 00          0119*   @frame:  db 0x00
041F76             0120*   @end:
041F76             0121*   
041F76             0122*   ; VDU 23, 27, 11: Show current sprite
041F76             0123*   ; inputs: none
041F76             0124*   ; prerequisites: vdu_sprite_select
041F76             0125*   vdu_sprite_show:
041F76 21 81 1F 04 0126*       ld hl,@cmd
041F7A 01 03 00 00 0127*       ld bc,@end-@cmd
041F7E 5B DF       0128*       rst.lil $18
041F80 C9          0129*       ret
041F81 17 1B 0B    0130*   @cmd: db 23,27,11
041F84             0131*   @end:
041F84             0132*   
041F84             0133*   ; VDU 23, 27, 12: Hide current sprite
041F84             0134*   ; inputs: none
041F84             0135*   ; prerequisites: vdu_sprite_select
041F84             0136*   vdu_sprite_hide:
041F84 21 8F 1F 04 0137*       ld hl,@cmd
041F88 01 03 00 00 0138*       ld bc,@end-@cmd
041F8C 5B DF       0139*       rst.lil $18
041F8E C9          0140*       ret
041F8F 17 1B 0C    0141*   @cmd: db 23,27,12
041F92             0142*   @end:
041F92             0143*   
041F92             0144*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041F92             0145*   ; inputs: bc is x coordinate, de is y coordinate
041F92             0146*   ; prerequisites: vdu_sprite_select
041F92             0147*   vdu_sprite_move_abs:
041F92 ED 43 AA 1F 0148*       ld (@xpos),bc
       04          
041F97 ED 53 AC 1F 0149*       ld (@ypos),de
       04          
041F9C 21 A7 1F 04 0150*       ld hl,@cmd
041FA0 01 07 00 00 0151*       ld bc,@end-@cmd
041FA4 5B DF       0152*       rst.lil $18
041FA6 C9          0153*       ret
041FA7 17 1B 0D    0154*   @cmd:  db 23,27,13
041FAA 00 00       0155*   @xpos: dw 0x0000
041FAC 00 00       0156*   @ypos: dw 0x0000
041FAE 00          0157*   @end:  db 0x00 ; padding
041FAF             0158*   
041FAF             0159*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041FAF             0160*   ; inputs: bc is x coordinate, de is y coordinate
041FAF             0161*   ; prerequisites: vdu_sprite_select
041FAF             0162*   vdu_sprite_move_rel:
041FAF ED 43 C7 1F 0163*       ld (@dx),bc
       04          
041FB4 ED 53 C9 1F 0164*       ld (@dy),de
       04          
041FB9 21 C4 1F 04 0165*       ld hl,@cmd
041FBD 01 07 00 00 0166*       ld bc,@end-@cmd
041FC1 5B DF       0167*       rst.lil $18
041FC3 C9          0168*       ret
041FC4 17 1B 0E    0169*   @cmd: db 23,27,14
041FC7 00 00       0170*   @dx:  dw 0x0000
041FC9 00 00       0171*   @dy:  dw 0x0000
041FCB 00          0172*   @end: db 0x00 ; padding
041FCC             0173*   
041FCC             0174*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041FCC             0175*   ; USING 16.8 FIXED POINT COORDINATES
041FCC             0176*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041FCC             0177*   ;   the fractional portiion of the inputs are truncated
041FCC             0178*   ;   leaving only the 16-bit integer portion
041FCC             0179*   ; prerequisites: vdu_sprite_select
041FCC             0180*   vdu_sprite_move_abs168:
041FCC             0181*   ; offset inputs by the gfx origin
041FCC             0182*   ; y coordinate
041FCC 21 00 00 00 0183*       ld hl,origin_top*256
041FD0 19          0184*       add hl,de
041FD1 22 F3 1F 04 0185*       ld (@ypos-1),hl
041FD5             0186*   ; x coordinate
041FD5 21 00 80 00 0187*       ld hl,origin_left*256
041FD9 09          0188*       add hl,bc
041FDA 22 F1 1F 04 0189*       ld (@xpos-1),hl
041FDE             0190*   ; prepare vdu command
041FDE 3E 0D       0191*       ld a,13       ; restore the final byte of the command
041FE0 32 F1 1F 04 0192*       ld (@cmd+2),a ; string that got stomped on by bcu
041FE4 21 EF 1F 04 0193*       ld hl,@cmd
041FE8 01 07 00 00 0194*       ld bc,@end-@cmd
041FEC 5B DF       0195*       rst.lil $18
041FEE C9          0196*       ret
041FEF 17 1B 0D    0197*   @cmd:  db 23,27,13
041FF2 00 00       0198*   @xpos: dw 0x0000
041FF4 00 00       0199*   @ypos: dw 0x0000
041FF6             0200*   @end:  ; no padding required b/c we shifted de right
041FF6             0201*   
041FF6             0202*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041FF6             0203*   ; USING 16.8 FIXED POINT COORDINATES
041FF6             0204*   ; inputs: ub.c is dx, ud.e is dy
041FF6             0205*   ;   the fractional portiion of the inputs are truncated
041FF6             0206*   ;   leaving only the 16-bit integer portion
041FF6             0207*   ; prerequisites: vdu_sprite_select
041FF6             0208*   vdu_sprite_move_rel168:
041FF6             0209*   ; populate in the reverse of normal to keep the
041FF6             0210*   ; inputs from stomping on each other
041FF6 ED 53 15 20 0211*       ld (@dy-1),de
       04          
041FFB ED 43 13 20 0212*       ld (@dx-1),bc
       04          
042000 3E 0E       0213*       ld a,14       ; restore the final byte of the command
042002 32 13 20 04 0214*       ld (@cmd+2),a ; string that got stomped on by bcu
042006 21 11 20 04 0215*       ld hl,@cmd
04200A 01 07 00 00 0216*       ld bc,@end-@cmd
04200E 5B DF       0217*       rst.lil $18
042010 C9          0218*       ret
042011 17 1B 0E    0219*   @cmd:  db 23,27,14
042014 00 00       0220*   @dx: dw 0x0000
042016 00 00       0221*   @dy: dw 0x0000
042018             0222*   @end:  ; no padding required b/c we shifted de right
042018             0223*   
042018             0224*   ; VDU 23, 27, 15: Update the sprites in the GPU
042018             0225*   ; inputs: none
042018             0226*   vdu_sprite_update:
042018 21 23 20 04 0227*       ld hl,@cmd
04201C 01 03 00 00 0228*       ld bc,@end-@cmd
042020 5B DF       0229*       rst.lil $18
042022 C9          0230*       ret
042023 17 1B 0F    0231*   @cmd: db 23,27,15
042026             0232*   @end:
042026             0233*   
042026             0234*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042026             0235*   ; inputs: none
042026             0236*   vdu_sprite_bmp_reset:
042026 21 31 20 04 0237*       ld hl,@cmd
04202A 01 03 00 00 0238*       ld bc,@end-@cmd
04202E 5B DF       0239*       rst.lil $18
042030 C9          0240*       ret
042031 17 1B 10    0241*   @cmd: db 23,27,16
042034             0242*   @end:
042034             0243*   
042034             0244*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042034             0245*   ; inputs: none
042034             0246*   vdu_sprite_reset:
042034 21 3F 20 04 0247*       ld hl,@cmd
042038 01 03 00 00 0248*       ld bc,@end-@cmd
04203C 5B DF       0249*       rst.lil $18
04203E C9          0250*       ret
04203F 17 1B 11    0251*   @cmd: db 23,27,17
042042             0252*   @end:
042042             0253*   
042042             0254*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042042             0255*   ; inputs: a is the GCOL paint mode
042042             0256*   ; prerequisites: vdu_sprite_select
042042             0257*   vdu_sprite_set_gcol:
042042 32 54 20 04 0258*       ld (@mode),a
042046 21 51 20 04 0259*       ld hl,@cmd
04204A 01 04 00 00 0260*       ld bc,@end-@cmd
04204E 5B DF       0261*       rst.lil $18
042050 C9          0262*       ret
042051 17 1B 12    0263*   @cmd:  db 23,27,18
042054 00          0264*   @mode: db 0x00
042055             0265*   @end:
042055             0266*   
042055             0267*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
042055             0268*   ; inputs: hl=bufferId
042055             0269*   ; prerequisites: vdu_sprite_select
042055             0270*   vdu_sprite_add_buff:
042055 22 67 20 04 0271*       ld (@bufferId),hl
042059 21 64 20 04 0272*       ld hl,@cmd
04205D 01 05 00 00 0273*       ld bc,@end-@cmd
042061 5B DF       0274*       rst.lil $18
042063 C9          0275*       ret
042064 17 1B 26    0276*   @cmd:      db 23,27,0x26
042067 00 00       0277*   @bufferId: dw 0x0000
042069 00          0278*   @end:      db 0x00 ; padding
04206A             0042    
04206A             0043    ; APPLICATION INCLUDES
04206A             0044        include "collisions.inc"
04206A FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
042100             0002*   ; ====== COLLISION DETECTION ======
042100             0003*   ; --- constants ---
042100             0004*   ; sprite_collisions flags
042100             0005*   collides_with_player: equ %00000001
042100             0006*   collides_with_laser: equ %00000010
042100             0007*   sprite_alive: equ 6 ; set when sprite is alive
042100             0008*   sprite_just_died: equ 7 ; set when sprite just died
042100             0009*   
042100             0010*   collide_top: equ %00001000
042100             0011*   collide_bottom: equ %00000100
042100             0012*   collide_left: equ %00000010
042100             0013*   collide_right: equ %00000001
042100             0014*   
042100             0015*   ; this routine detects collisions between two collidable objects,
042100             0016*   ; which can include sprites, active tiles, or any screen coordinate
042100             0017*   ; which has been set up with a sprite table structure that includes dim_x
042100             0018*   ; representing the radius of the collidable object
042100             0019*   ; inputs: ix and iy point to the colliding objects' sprite table records
042100             0020*   ; outputs: uh.l = distance - sum of radii
042100             0021*   ;          zero flag set or sign flag negative if collision detected
042100             0022*   ;          dx168 and dy168 are also populated with the signed displacements
042100             0023*   ; destroys: everything except indexes
042100             0024*   check_collision:
042100             0025*   ; compute dx = x1-x0
042100 DD 27 01    0026*       ld hl,(ix+sprite_x)
042103 FD 17 01    0027*       ld de,(iy+sprite_x)
042106 AF          0028*       xor a ; clear carry
042107 ED 52       0029*       sbc hl,de
042109 22 37 0C 04 0030*       ld (dx168),hl ; dx to scratch
04210D             0031*   ; compute dy = y1-y0
04210D DD 27 04    0032*       ld hl,(ix+sprite_y)
042110 FD 17 04    0033*       ld de,(iy+sprite_y)
042113 AF          0034*       xor a ; clear carry
042114 ED 52       0035*       sbc hl,de ; hl = dy
042116 22 3D 0C 04 0036*       ld (dy168),hl ; dy to scratch
04211A             0037*   ; compute euclidean distance between centers
04211A CD 43 0C 04 0038*       call distance168 ; uh.l = distance
04211E             0039*   ; check for overlap by summing half the radii
04211E DD 7E 1E    0040*       ld a,(ix+sprite_dim_x)
042121 CB 3F       0041*       srl a ; divide by 2
042123 FD 5E 1E    0042*       ld e,(iy+sprite_dim_x)
042126 CB 3B       0043*       srl e ; divide by 2
042128 83          0044*       add a,e
042129 11 00 00 00 0045*       ld de,0 ; clear deu and e
04212D 57          0046*       ld d,a ; ud.e = sum of radii
04212E B7          0047*       or a ; clear carry
04212F ED 52       0048*       sbc hl,de ; uh.l = distance - sum of radii
042131 C9          0049*       ret
042132             0050*   ; end check_collision
042132             0045        include "enemies.inc"
042132 04          0001*   max_enemy_sprites: db 4
042133             0002*   
042133             0003*   move_enemies:
042133             0004*   ; are there any active enemies or explosions?
042133 3A 03 62 04 0005*       ld a,(table_active_sprites)
042137 A7          0006*       and a ; will be zero if no alive enemies or explosions
042138 C2 3D 21 04 0007*       jp nz,@they_live
04213C             0008*       ; DEPRECATED: though may be used in the future
04213C             0009*       ; ld hl,enemies_dead
04213C             0010*       ; ld (enemies_state),hl
04213C             0011*       ; END DEPRECATED
04213C C9          0012*       ret
04213D             0013*   @they_live:
04213D             0014*   ; initialize pointers and loop counter
04213D FD 21 00 60 0015*       ld iy,table_base ; set iy to first record in table
       04          
042142 06 08       0016*       ld b,table_num_records ; loop counter
042144             0017*   @move_loop:
042144 FD 22 00 62 0018*       ld (table_pointer),iy ; update table pointer
       04          
042149 C5          0019*       push bc ; backup loop counter
04214A             0020*   ; check top bit of sprite_type to see if sprite is just spawned
04214A FD 7E 16    0021*       ld a,(iy+sprite_type)
04214D CB 7F       0022*       bit 7,a
04214F C2 8E 21 04 0023*       jp nz,@next_record ; if just spawned, skip to next record
042153             0024*   ; check sprite_type to see if sprite is active
042153 A7          0025*       and a ; if zero, sprite is dead
042154 CA 8E 21 04 0026*       jp z,@next_record ; ... and we skip to next record
042158             0027*   ; otherwise we prepare to move the sprite
042158 FD 27 1A    0028*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
04215B             0029*       callHL
04215B 01 61 21 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
04215F C5          0002*M1     push bc ; which constitutes the return address
042160 E9          0003*M1     jp (hl) ; Jump to the address in HL
042161             0004*M1 @@:
042161             0030*   ; move_enemies_loop_return: return from behavior subroutines
042161 FD 2A 00 62 0031*       ld iy,(table_pointer) ; get back table pointer
       04          
042166             0032*   ; now we check results of all the moves
042166 FD CB 1D 7E 0033*       bit sprite_just_died,(iy+sprite_collisions)
04216A CA 76 21 04 0034*       jp z,@draw_sprite ; if not dead, draw sprite
04216E CD 5C 62 04 0035*       call table_deactivate_sprite
042172 C3 8E 21 04 0036*       jp @next_record ; and to the next record
042176             0037*   @draw_sprite:
042176 FD 7E 00    0038*       ld a,(iy+sprite_id) ; get spriteId
042179 CD 00 1F 04 0039*       call vdu_sprite_select ; select sprite
04217D FD 7E 28    0040*       ld a,(iy+sprite_frame)
042180 CD 63 1F 04 0041*       call vdu_sprite_select_frame
042184 FD 07 01    0042*       ld bc,(iy+sprite_x)
042187 FD 17 04    0043*       ld de,(iy+sprite_y)
04218A CD CC 1F 04 0044*       call vdu_sprite_move_abs168
04218E             0045*   ; fall through to @next_record
04218E             0046*   @next_record:
04218E ED 33 40    0047*       lea iy,iy+table_record_size
042191 AF          0048*       xor a ; clears carry flag
042192 32 04 62 04 0049*       ld (sprite_screen_edge),a ; clear screen edge collision flag
042196 C1          0050*       pop bc ; get back our loop counter
042197 10 AB       0051*       djnz @move_loop ; loop until we've checked all the records
042199             0052*   ; reset all just spawned flags
042199 FD 21 00 60 0053*       ld iy,table_base
       04          
04219E 06 08       0054*       ld b,table_num_records ; loop counter
0421A0             0055*   @reset_just_spawned:
0421A0 C5          0056*       push bc ; back up loop counter
0421A1 FD CB 16 7E 0057*       bit 7,(iy+sprite_type) ; check if just spawned
0421A5 CA D8 21 04 0058*       jp z,@F
0421A9 FD CB 16 BE 0059*       res 7,(iy+sprite_type) ; clear just spawned flag
0421AD FD 7E 00    0060*       ld a,(iy+sprite_id)
0421B0 CD 00 1F 04 0061*       call vdu_sprite_select
0421B4 FD 27 17    0062*       ld hl,(iy+sprite_base_bufferId)
0421B7 FD 46 21    0063*       ld b,(iy+sprite_num_animations)
0421BA FD 4E 20    0064*       ld c,(iy+sprite_num_orientations)
0421BD ED 4C       0065*       mlt bc ; bc total frames
0421BF CD DE 63 04 0066*       call sprite_load_frames
0421C3 FD 7E 28    0067*       ld a,(iy+sprite_frame)
0421C6 CD 63 1F 04 0068*       call vdu_sprite_select_frame
0421CA FD 07 01    0069*       ld bc,(iy+sprite_x)
0421CD FD 17 04    0070*       ld de,(iy+sprite_y)
0421D0 CD CC 1F 04 0071*       call vdu_sprite_move_abs168
0421D4 CD 76 1F 04 0072*       call vdu_sprite_show
0421D8             0073*   @@:
0421D8 ED 33 40    0074*       lea iy,iy+table_record_size
0421DB C1          0075*       pop bc ; get back loop counter
0421DC 10 C2       0076*       djnz @reset_just_spawned
0421DE             0077*   ; and done
0421DE C9          0078*       ret
0421DF             0079*   
0421DF             0080*   ; TODO: much if this is deprecated by new sprite table system and needs to be rewritten
0421DF             0081*   check_enemy_collisions:
0421DF             0082*   ; ; check what we collide with
0421DF             0083*   ;     ld a,(iy+sprite_collisions)
0421DF             0084*   ;     push af ; save collision flags
0421DF             0085*   ;     and collides_with_player ; check for collisions with player
0421DF             0086*   ;     call nz,check_enemy_collision_player
0421DF             0087*   ;     pop af ; restore collision flags
0421DF             0088*   ;     and collides_with_laser ; check for collisions with laser
0421DF             0089*   ;     call nz,check_enemy_collision_laser
0421DF C9          0090*       ret
0421E0             0091*   check_enemy_collision_laser: ; check for collisions with laser
0421E0             0092*       ; ld ix,laser_start_variables
0421E0             0093*       ; bit sprite_alive,(ix+sprite_collisions)
0421E0             0094*       ; ret z ; laser dead, nothing to do
0421E0             0095*       ; call check_collision
0421E0             0096*       ; ret p ; no collision
0421E0             0097*       ; ld ix,laser_start_variables
0421E0             0098*       ; set sprite_just_died,(ix+sprite_collisions)
0421E0             0099*       ; set sprite_alive,(ix+sprite_collisions)
0421E0             0100*       ; call enemy_kill
0421E0 C9          0101*       ret
0421E1             0102*   check_enemy_collision_player: ; check for collisions with player
0421E1             0103*       ; ld ix,player_begin
0421E1             0104*       ; bit sprite_alive,(ix+sprite_collisions)
0421E1             0105*       ; ret z ; player dead, no collision
0421E1             0106*       ; call check_collision
0421E1             0107*       ; ret p ; no collision
0421E1             0108*       ; call enemy_kill
0421E1 C9          0109*       ret
0421E2             0110*   ; end check_enemy_collisions
0421E2             0111*   ; END TODO
0421E2             0112*   
0421E2             0113*   ; this routine vanquishes the enemy sprite
0421E2             0114*   ; and replaces it with an animated explosion
0421E2             0115*   ; destroys: everything except index registers
0421E2             0116*   ; returns: a=-1 to indicate enemy died, and an incandescent ball of debris and gas
0421E2             0117*   enemy_kill:
0421E2 FD 2A 00 62 0118*       ld iy,(table_pointer)
       04          
0421E7 2A 00 55 04 0119*       ld hl,(player_score)
0421EB 01 00 00 00 0120*       ld bc,0 ; clear bcu
0421EF FD 4E 26    0121*       ld c,(iy+sprite_points)
0421F2 09          0122*       add hl,bc
0421F3 22 00 55 04 0123*       ld (player_score),hl
0421F7 C3 13 24 04 0124*       jp spawn_explosion
0421FB             0125*   ; end enemy_kill
0421FB             0046        include "enemy_fireball.inc"
0421FB FF FF FF FF 0001*       align 256
       FF          
042200             0002*   speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
042200             0003*   
042200             0004*   fireball_defaults:
042200 03          0005*       db enemy_projectile        ; type
042201 06 01 00    0006*       dl BUF_FIREBALL_A	    ; base_bufferId
042204 51 22 04    0007*       dl move_enemy_fireball	; move_program
042207 01          0008*       db collides_with_player ; collisions
042208 07          0009*       db 7	                ; dim_x
042209 07          0010*       db 7                    ; dim_y
04220A 01          0011*       db 1                    ; num_orientations
04220B 01          0012*       db 1                    ; num_animations
04220C 00          0013*       db 0	                ; animation
04220D 00          0014*       db 0	                ; animation_timer
04220E 00          0015*       db 0	                ; move_timer
04220F 00          0016*       db 0	                ; move_step
042210 14          0017*       db 20	                ; points
042211 05          0018*       db 5	                ; shield_damage
042212 00          0019*       db 0                    ; frame
042213             0020*   
042213             0021*   enemy_spawn_fireball:
042213 21 00 22 04 0022*       ld hl,fireball_defaults
042217 CD A0 63 04 0023*       call spawn_sprite_from_sprite
04221B D0          0024*       ret nc ; no carry means no free sprite slots, so we go home
04221C             0025*   ; other specific initialization
04221C             0026*   ; ------------------------------------------------
04221C             0027*   ; center the fireball on the turret
04221C 11 80 03 00 0028*       ld de,3*256+128 ; half the fireball size
042220 FD 27 01    0029*       ld hl,(iy+sprite_x)
042223 19          0030*       add hl,de
042224 DD 2F 01    0031*       ld (ix+sprite_x),hl
042227 FD 27 04    0032*       ld hl,(iy+sprite_y)
04222A 19          0033*       add hl,de
04222B DD 2F 04    0034*       ld (ix+sprite_y),hl
04222E             0035*   ; copy component velocities from targeting_computer
04222E 2A 35 5B 04 0036*       ld hl,(Vp_x)
042232 DD 2F 07    0037*       ld (ix+sprite_xvel),hl
042235 2A 38 5B 04 0038*       ld hl,(Vp_y)
042239 DD 2F 0A    0039*       ld (ix+sprite_yvel),hl
04223C             0040*   ; move projectile one frame's distance so it isn't drawn right over turret
04223C DD 27 01    0041*       ld hl,(ix+sprite_x)
04223F DD 17 07    0042*       ld de,(ix+sprite_xvel)
042242 19          0043*       add hl,de
042243 DD 2F 01    0044*       ld (ix+sprite_x),hl
042246 DD 27 04    0045*       ld hl,(ix+sprite_y)
042249 DD 17 0A    0046*       ld de,(ix+sprite_yvel)
04224C 19          0047*       add hl,de
04224D DD 2F 04    0048*       ld (ix+sprite_y),hl
042250 C9          0049*       ret
042251             0050*   ; end enemy_spawn_fireball
042251             0051*   
042251             0052*   move_enemy_fireball:
042251             0053*   ; run the movement program for the fireball enemy
042251 CD B3 62 04 0054*       call move_sprite
042255 3A 04 62 04 0055*       ld a,(sprite_screen_edge)
042259 B7          0056*       or a ; a will be non-zero if have scrolled off screen
04225A C2 5C 62 04 0057*       jp nz,table_deactivate_sprite
04225E C3 DF 21 04 0058*       jp check_enemy_collisions
042262             0059*   ; end move_enemy_fireball
042262             0047        include "enemy_seeker.inc"
042262 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
042300             0002*   
042300 00          0003*   seekers_count: db 0
042301             0004*   seekers_max: equ 3
042301             0005*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
042301             0006*   
042301             0007*   seeker_defaults:
042301 01          0008*       db enemy_air         ; type
042302 0B 01 00    0009*       dl BUF_SEEKER_000        ; base_bufferId
042305 25 23 04    0010*       dl move_enemy_seeker    ; move_program
042308 03          0011*       db collides_with_laser | collides_with_player ; collisions
042309 10          0012*       db 16                    ; dim_x
04230A 10          0013*       db 16                   ; dim_y
04230B 20          0014*       db 32                   ; num_orientations
04230C 01          0015*       db 1                    ; num_animations
04230D 00          0016*       db 0                    ; animation
04230E 00          0017*       db 0                    ; animation_timer
04230F 01          0018*       db 1                    ; move_timer
042310 00          0019*       db 0                    ; move_step
042311 0A          0020*       db 10                    ; points
042312 02          0021*       db 2                    ; shield_damage
042313 00          0022*       db 0                    ; frame
042314             0023*   
042314             0024*   enemy_spawn_seeker:
042314 21 01 23 04 0025*       ld hl,seeker_defaults
042318 CD A0 63 04 0026*       call spawn_sprite_from_sprite
04231C D0          0027*       ret nc ; no carry means no free sprite slots, so we go home
04231D             0028*   ; other specific initialization
04231D 21 80 02 00 0029*       ld hl,speed_seeker
042321 DD 2F 0D    0030*       ld (ix+sprite_vel),hl
042324 C9          0031*       ret
042325             0032*   ; end enemy_spawn_seeker
042325             0033*   
042325             0034*   move_enemy_seeker:
042325             0035*   ; run the movement program for the seeker enemy
042325 CD 2E 23 04 0036*       call en_nav_seek_zag
042329 C3 DF 21 04 0037*       jp check_enemy_collisions
04232D C9          0038*       ret
04232E             0039*   ; end move_enemy_seeker
04232E             0040*   
04232E             0041*   ; contains the logic for how to move the enemy
04232E             0042*   ; and then does the moving
04232E             0043*   ; inputs: a fully-populated active sprite table
04232E             0044*   ;         player position variables
04232E             0045*   ; destroys: everything except index registers
04232E             0046*   ; outputs: moving enemies
04232E             0047*   en_nav_seek_zag:
04232E             0048*   ; set velocity and orientation by player's relative location
04232E             0049*   ; move enemies y-axis
04232E             0050*   ; where is player relative to us?
04232E CD 00 5B 04 0051*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
042332             0052*   ; is player above or below us?
042332 ED 53 55 06 0053*       ld (ude),de ; dy
       04          
042337 3A 57 06 04 0054*       ld a,(ude+2) ; deu
04233B 17          0055*       rla ; shift sign bit into carry
04233C D2 65 23 04 0056*       jp nc,@zig_zag ; player is below,evade
042340             0057*   ; player is even or above,so home in on current heading
042340 FD 2F 10    0058*       ld (iy+sprite_heading),hl ; save sprite heading
042343             0059*   ; fall through to @compute_velocities
042343             0060*   @compute_velocities:
042343 CD 54 63 04 0061*       call sprite_compute_velocities
042347             0062*   ; change the animation frame to match heading
042347 CD D1 63 04 0063*       call sprite_frame_heading ; a, sprite_frame set to heading-based frame
04234B CD B3 62 04 0064*       call move_sprite ; move the sprite
04234F B7          0065*       or a ; a will be non-zero if have collided with screen edge
042350 C2 70 23 04 0066*       jp nz,@zag_switch ; switch direction
042354 C9          0067*       ret ; didn't hit edge, nothing else to do
042355             0068*   @zig_zag_start:
042355 FD 2A 00 62 0069*       ld iy,(table_pointer)
       04          
04235A CD AE 09 04 0070*       call rand_8
04235E E6 3F       0071*       and %00111111 ; limit it to 64
042360 CB DF       0072*       set 3,a ; make sure it's at least 8
042362 FD 77 24    0073*       ld (iy+sprite_move_timer),a ; store it
042365             0074*       ; fall through to @zig_zag
042365             0075*   @zig_zag:
042365 FD 7E 24    0076*       ld a,(iy+sprite_move_timer)
042368 3D          0077*       dec a
042369 FD 77 24    0078*       ld (iy+sprite_move_timer),a
04236C C2 92 23 04 0079*       jp nz,@zig_zag_no_switch
042370             0080*   @zag_switch:
042370             0081*       ; otherwise flip direction and restart timer
042370 FD 7E 25    0082*       ld a,(iy+sprite_move_step)
042373 EE 01       0083*       xor %1 ; flips bit zero
042375 FD 77 25    0084*       ld (iy+sprite_move_step),a ; store it
042378 C2 87 23 04 0085*       jp nz,@F ; zag right
04237C             0086*   ;otherwise zag left
04237C 21 00 A0 00 0087*       ld hl,160*256; southwest heading
042380 FD 2F 10    0088*       ld (iy+sprite_heading),hl ; save sprite heading
042383 C3 55 23 04 0089*       jp @zig_zag_start
042387             0090*   @@: ; zag right
042387 21 00 60 00 0091*       ld hl,96*256; southeast heading
04238B FD 2F 10    0092*       ld (iy+sprite_heading),hl ; save sprite heading
04238E C3 55 23 04 0093*       jp @zig_zag_start
042392             0094*   @zig_zag_no_switch:
042392             0095*       ; ld a,(sprite_orientation)
042392 FD 27 10    0096*       ld hl,(iy+sprite_heading)
042395 C3 43 23 04 0097*       jp @compute_velocities
042399             0098*   ; end en_nav_seek_zag
042399             0048        include "explosion.inc"
042399 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042400             0002*   explosion_defaults:
042400 04          0003*       db explosion            ; type
042401 01 01 00    0004*       dl BUF_EXPLOSION_A	    ; base_bufferId
042404 2A 24 04    0005*       dl move_explosion	    ; move_program
042407 00          0006*       db 0                    ; collisions
042408 07          0007*       db 7	                ; dim_x
042409 07          0008*       db 7                    ; dim_y
04240A 01          0009*       db 1                    ; num_orientations
04240B 05          0010*       db 5                    ; num_animations
04240C 05          0011*       db 5	                ; animation
04240D 08          0012*       db 8	                ; animation_timer
04240E 00          0013*       db 0	                ; move_timer
04240F 00          0014*       db 0	                ; move_step
042410 00          0015*       db 0	                ; points
042411 05          0016*       db 5	                ; shield_damage
042412 00          0017*       db 0                    ; frame
042413             0018*   
042413             0019*   spawn_explosion:
042413 21 00 24 04 0020*       ld hl,explosion_defaults
042417 CD 6C 63 04 0021*       call alter_sprite
04241B             0022*   ; other specific initialization
04241B 21 00 00 00 0023*       ld hl,0
04241F FD 2F 07    0024*       ld (iy+sprite_xvel),hl
042422 21 00 01 00 0025*       ld hl,1*256
042426 FD 2F 0A    0026*       ld (iy+sprite_yvel),hl
042429 C9          0027*       ret
04242A             0028*   ; end spawn_explosion
04242A             0029*   
04242A             0030*   move_explosion:
04242A             0031*   ; run the movement program for the explosion
04242A CD B3 62 04 0032*       call move_sprite
04242E B7          0033*       or a ; a will be non-zero if have scrolled off screen
04242F C2 47 24 04 0034*       jp nz,@make_crater
042433             0035*   ; do the animations
042433 FD 35 23    0036*       dec (iy+sprite_animation_timer)
042436 C0          0037*       ret nz ; not time to bump animation frame
042437 FD 34 28    0038*       inc (iy+sprite_frame)
04243A FD 35 22    0039*       dec (iy+sprite_animation)
04243D CA 47 24 04 0040*       jp z,@make_crater ; reached the end of the animations
042441 3E 08       0041*       ld a,8 ; reset animation timer
042443 FD 77 23    0042*       ld (iy+sprite_animation_timer),a
042446 C9          0043*       ret
042447             0044*   @make_crater: ; deactivate sprite and draw a crater in its place
042447 21 00 01 00 0045*       ld hl,BUF_CRATER
04244B CD 38 1A 04 0046*       call vdu_buff_select
04244F FD 07 01    0047*       ld bc,(iy+sprite_x)
042452 FD 17 04    0048*       ld de,(iy+sprite_y)
042455 CD 3C 1E 04 0049*       call vdu_plot_bmp168
042459 C3 5C 62 04 0050*       jp table_deactivate_sprite
04245D             0051*   ; end move_explosion
04245D             0049        include "fonts_list.inc"
04245D FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042500             0002*   
042500             0003*   ; Generated by asm_config_editor.py
042500             0004*   font_list_record_size: equ 12
042500             0005*   font_list_width: equ 0
042500             0006*   font_list_height: equ 3
042500             0007*   font_list_bufferId: equ 6
042500             0008*   font_list_filename: equ 9
042500             0009*   
042500             0010*   num_fonts: equ 18
042500             0011*   
042500             0012*   ; Index list:
042500             0013*   amiga_forever_16x24: equ 64000
042500             0014*   amiga_forever_8x16: equ 64001
042500             0015*   amiga_forever_8x8: equ 64002
042500             0016*   computer_pixel_7_10x15: equ 64003
042500             0017*   computer_pixel_7_10x24: equ 64004
042500             0018*   computer_pixel_7_8x16: equ 64005
042500             0019*   Lat2_Terminus12x6_6x12: equ 64006
042500             0020*   Lat2_TerminusBold14_8x14: equ 64007
042500             0021*   Lat2_VGA14_8x14: equ 64008
042500             0022*   Lat2_VGA16_8x16: equ 64009
042500             0023*   Lat2_VGA8_8x8: equ 64010
042500             0024*   Lat7_Fixed13_8x13: equ 64011
042500             0025*   Lat7_Terminus12x6_6x12: equ 64012
042500             0026*   Lat7_TerminusBold16_8x16: equ 64013
042500             0027*   Lat7_VGA14_8x14: equ 64014
042500             0028*   Lat7_VGA8x8: equ 64015
042500             0029*   scriptorium_12x14: equ 64016
042500             0030*   Squarewave_Bold_8x12: equ 64017
042500             0031*   
042500             0032*   font_list: ; width; height; bufferId; filename;:
042500 10 00 00 18 0033*   	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 D8 25 04 
04250C 08 00 00 10 0034*   	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 F7 25 04 
042518 08 00 00 08 0035*   	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 15 26 04 
042524 0A 00 00 0F 0036*   	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 32 26 04 
042530 0A 00 00 18 0037*   	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 54 26 04 
04253C 08 00 00 10 0038*   	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 76 26 04 
042548 06 00 00 0C 0039*   	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 97 26 04 
042554 08 00 00 0E 0040*   	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 B9 26 04 
042560 08 00 00 0E 0041*   	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 DD 26 04 
04256C 08 00 00 10 0042*   	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 F8 26 04 
042578 08 00 00 08 0043*   	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 13 27 04 
042584 08 00 00 0D 0044*   	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 2C 27 04 
042590 06 00 00 0C 0045*   	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 49 27 04 
04259C 08 00 00 10 0046*   	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 6B 27 04 
0425A8 08 00 00 0E 0047*   	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 8F 27 04 
0425B4 08 00 00 08 0048*   	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 AA 27 04 
0425C0 0C 00 00 0E 0049*   	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 C3 27 04 
0425CC 08 00 00 0C 0050*   	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 E0 27 04 
0425D8             0051*   
0425D8             0052*   ; files_list: ; filename:
0425D8 66 6F 6E 74 0053*   fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
0425F7 66 6F 6E 74 0054*   fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
042615 66 6F 6E 74 0055*   fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042632 66 6F 6E 74 0056*   fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
042654 66 6F 6E 74 0057*   fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
042676 66 6F 6E 74 0058*   fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
042697 66 6F 6E 74 0059*   fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
0426B9 66 6F 6E 74 0060*   fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
0426DD 66 6F 6E 74 0061*   fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
0426F8 66 6F 6E 74 0062*   fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
042713 66 6F 6E 74 0063*   fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
04272C 66 6F 6E 74 0064*   fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
042749 66 6F 6E 74 0065*   fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
04276B 66 6F 6E 74 0066*   fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
04278F 66 6F 6E 74 0067*   fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
0427AA 66 6F 6E 74 0068*   fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
0427C3 66 6F 6E 74 0069*   fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
0427E0 66 6F 6E 74 0070*   fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
042800             0050        include "images_tiles_dg.inc"
042800             0001*   ; Generated by tiles_dg.py
042800             0002*   
042800             0003*   tiles_dg_num_images: equ 184
042800             0004*   
042800             0005*   ; bufferIds:
042800             0006*   
042800             0007*   
042800             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
042800 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       F0 34 04 00 
       02 00       
042812 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       05 35 04 01 
       02 00       
042824 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       1A 35 04 02 
       02 00       
042836 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       2F 35 04 03 
       02 00       
042848 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       44 35 04 04 
       02 00       
04285A 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       59 35 04 05 
       02 00       
04286C 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       6E 35 04 06 
       02 00       
04287E 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       83 35 04 07 
       02 00       
042890 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       98 35 04 08 
       02 00       
0428A2 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       AD 35 04 09 
       02 00       
0428B4 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       C2 35 04 0A 
       02 00       
0428C6 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       D7 35 04 0B 
       02 00       
0428D8 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_012, 524
       00 00 10 00 
       00 00 01 00 
       EC 35 04 0C 
       02 00       
0428EA 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_013, 525
       00 00 10 00 
       00 00 01 00 
       01 36 04 0D 
       02 00       
0428FC 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_014, 526
       00 00 10 00 
       00 00 01 00 
       16 36 04 0E 
       02 00       
04290E 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_015, 527
       00 00 10 00 
       00 00 01 00 
       2B 36 04 0F 
       02 00       
042920 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       40 36 04 10 
       02 00       
042932 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_025, 537
       00 00 10 00 
       00 00 01 00 
       55 36 04 19 
       02 00       
042944 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_026, 538
       00 00 10 00 
       00 00 01 00 
       6A 36 04 1A 
       02 00       
042956 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_027, 539
       00 00 10 00 
       00 00 01 00 
       7F 36 04 1B 
       02 00       
042968 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_028, 540
       00 00 10 00 
       00 00 01 00 
       94 36 04 1C 
       02 00       
04297A 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_029, 541
       00 00 10 00 
       00 00 01 00 
       A9 36 04 1D 
       02 00       
04298C 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_030, 542
       00 00 10 00 
       00 00 01 00 
       BE 36 04 1E 
       02 00       
04299E 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_031, 543
       00 00 10 00 
       00 00 01 00 
       D3 36 04 1F 
       02 00       
0429B0 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_032, 544
       00 00 10 00 
       00 00 01 00 
       E8 36 04 20 
       02 00       
0429C2 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       FD 36 04 21 
       02 00       
0429D4 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       12 37 04 22 
       02 00       
0429E6 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       27 37 04 23 
       02 00       
0429F8 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       3C 37 04 24 
       02 00       
042A0A 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       51 37 04 25 
       02 00       
042A1C 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       66 37 04 26 
       02 00       
042A2E 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       7B 37 04 27 
       02 00       
042A40 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       90 37 04 28 
       02 00       
042A52 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       A5 37 04 31 
       02 00       
042A64 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       BA 37 04 32 
       02 00       
042A76 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       CF 37 04 33 
       02 00       
042A88 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       E4 37 04 34 
       02 00       
042A9A 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       F9 37 04 35 
       02 00       
042AAC 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       0E 38 04 36 
       02 00       
042ABE 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       23 38 04 37 
       02 00       
042AD0 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       38 38 04 38 
       02 00       
042AE2 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       4D 38 04 39 
       02 00       
042AF4 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       62 38 04 3A 
       02 00       
042B06 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       77 38 04 3B 
       02 00       
042B18 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       8C 38 04 41 
       02 00       
042B2A 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       A1 38 04 42 
       02 00       
042B3C 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       B6 38 04 43 
       02 00       
042B4E 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       CB 38 04 44 
       02 00       
042B60 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       E0 38 04 45 
       02 00       
042B72 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       F5 38 04 46 
       02 00       
042B84 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       0A 39 04 47 
       02 00       
042B96 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       1F 39 04 48 
       02 00       
042BA8 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       34 39 04 49 
       02 00       
042BBA 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       49 39 04 4A 
       02 00       
042BCC 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       5E 39 04 4B 
       02 00       
042BDE 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       73 39 04 51 
       02 00       
042BF0 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       88 39 04 52 
       02 00       
042C02 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       9D 39 04 53 
       02 00       
042C14 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       B2 39 04 54 
       02 00       
042C26 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       C7 39 04 55 
       02 00       
042C38 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       DC 39 04 56 
       02 00       
042C4A 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       F1 39 04 57 
       02 00       
042C5C 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       06 3A 04 58 
       02 00       
042C6E 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       1B 3A 04 59 
       02 00       
042C80 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       30 3A 04 5A 
       02 00       
042C92 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       45 3A 04 5B 
       02 00       
042CA4 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       5A 3A 04 61 
       02 00       
042CB6 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       6F 3A 04 62 
       02 00       
042CC8 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       84 3A 04 63 
       02 00       
042CDA 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       99 3A 04 64 
       02 00       
042CEC 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       AE 3A 04 65 
       02 00       
042CFE 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       C3 3A 04 66 
       02 00       
042D10 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       D8 3A 04 67 
       02 00       
042D22 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       ED 3A 04 68 
       02 00       
042D34 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       02 3B 04 69 
       02 00       
042D46 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       17 3B 04 6A 
       02 00       
042D58 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       2C 3B 04 6B 
       02 00       
042D6A 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       41 3B 04 6C 
       02 00       
042D7C 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       56 3B 04 71 
       02 00       
042D8E 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       6B 3B 04 72 
       02 00       
042DA0 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       80 3B 04 73 
       02 00       
042DB2 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       95 3B 04 74 
       02 00       
042DC4 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       AA 3B 04 75 
       02 00       
042DD6 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       BF 3B 04 76 
       02 00       
042DE8 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       D4 3B 04 77 
       02 00       
042DFA 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       E9 3B 04 78 
       02 00       
042E0C 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       FE 3B 04 79 
       02 00       
042E1E 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       13 3C 04 7A 
       02 00       
042E30 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       28 3C 04 7B 
       02 00       
042E42 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       3D 3C 04 81 
       02 00       
042E54 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       52 3C 04 82 
       02 00       
042E66 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       67 3C 04 83 
       02 00       
042E78 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       7C 3C 04 84 
       02 00       
042E8A 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       91 3C 04 85 
       02 00       
042E9C 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       A6 3C 04 86 
       02 00       
042EAE 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       BB 3C 04 87 
       02 00       
042EC0 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       D0 3C 04 88 
       02 00       
042ED2 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       E5 3C 04 89 
       02 00       
042EE4 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       FA 3C 04 8A 
       02 00       
042EF6 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       0F 3D 04 8B 
       02 00       
042F08 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       24 3D 04 8C 
       02 00       
042F1A 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_141, 653
       00 00 10 00 
       00 00 01 00 
       39 3D 04 8D 
       02 00       
042F2C 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_142, 654
       00 00 10 00 
       00 00 01 00 
       4E 3D 04 8E 
       02 00       
042F3E 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       63 3D 04 91 
       02 00       
042F50 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       78 3D 04 92 
       02 00       
042F62 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       8D 3D 04 93 
       02 00       
042F74 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       A2 3D 04 94 
       02 00       
042F86 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       B7 3D 04 95 
       02 00       
042F98 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       CC 3D 04 96 
       02 00       
042FAA 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       E1 3D 04 97 
       02 00       
042FBC 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       F6 3D 04 98 
       02 00       
042FCE 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       0B 3E 04 99 
       02 00       
042FE0 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       20 3E 04 9A 
       02 00       
042FF2 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       35 3E 04 9B 
       02 00       
043004 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       4A 3E 04 9C 
       02 00       
043016 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_157, 669
       00 00 10 00 
       00 00 01 00 
       5F 3E 04 9D 
       02 00       
043028 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_158, 670
       00 00 10 00 
       00 00 01 00 
       74 3E 04 9E 
       02 00       
04303A 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       89 3E 04 A1 
       02 00       
04304C 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       9E 3E 04 A2 
       02 00       
04305E 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       B3 3E 04 A3 
       02 00       
043070 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       C8 3E 04 A4 
       02 00       
043082 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       DD 3E 04 A5 
       02 00       
043094 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       F2 3E 04 A6 
       02 00       
0430A6 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       07 3F 04 A7 
       02 00       
0430B8 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       1C 3F 04 A8 
       02 00       
0430CA 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       31 3F 04 A9 
       02 00       
0430DC 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       46 3F 04 AA 
       02 00       
0430EE 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       5B 3F 04 AB 
       02 00       
043100 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       70 3F 04 AC 
       02 00       
043112 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       85 3F 04 B1 
       02 00       
043124 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       9A 3F 04 B2 
       02 00       
043136 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       AF 3F 04 B3 
       02 00       
043148 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       C4 3F 04 B4 
       02 00       
04315A 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       D9 3F 04 B5 
       02 00       
04316C 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       EE 3F 04 B6 
       02 00       
04317E 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       03 40 04 B7 
       02 00       
043190 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       18 40 04 B8 
       02 00       
0431A2 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       2D 40 04 B9 
       02 00       
0431B4 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       42 40 04 BA 
       02 00       
0431C6 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       57 40 04 BB 
       02 00       
0431D8 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       6C 40 04 BC 
       02 00       
0431EA 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       81 40 04 C1 
       02 00       
0431FC 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       96 40 04 C2 
       02 00       
04320E 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       AB 40 04 C3 
       02 00       
043220 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       C0 40 04 C4 
       02 00       
043232 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       D5 40 04 C5 
       02 00       
043244 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       EA 40 04 C6 
       02 00       
043256 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       FF 40 04 C7 
       02 00       
043268 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       14 41 04 C8 
       02 00       
04327A 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       29 41 04 C9 
       02 00       
04328C 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       3E 41 04 CA 
       02 00       
04329E 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       53 41 04 CB 
       02 00       
0432B0 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       68 41 04 CC 
       02 00       
0432C2 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       7D 41 04 D1 
       02 00       
0432D4 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       92 41 04 D2 
       02 00       
0432E6 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       A7 41 04 D3 
       02 00       
0432F8 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       BC 41 04 D4 
       02 00       
04330A 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       D1 41 04 D5 
       02 00       
04331C 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       E6 41 04 D6 
       02 00       
04332E 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       FB 41 04 D7 
       02 00       
043340 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       10 42 04 D8 
       02 00       
043352 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       25 42 04 D9 
       02 00       
043364 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       3A 42 04 DA 
       02 00       
043376 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       4F 42 04 DB 
       02 00       
043388 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       64 42 04 DC 
       02 00       
04339A 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       79 42 04 E1 
       02 00       
0433AC 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       8E 42 04 E2 
       02 00       
0433BE 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       A3 42 04 E3 
       02 00       
0433D0 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       B8 42 04 E4 
       02 00       
0433E2 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       CD 42 04 E5 
       02 00       
0433F4 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       E2 42 04 E6 
       02 00       
043406 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       F7 42 04 E7 
       02 00       
043418 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       0C 43 04 E8 
       02 00       
04342A 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       21 43 04 E9 
       02 00       
04343C 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       36 43 04 EA 
       02 00       
04344E 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       4B 43 04 EB 
       02 00       
043460 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       60 43 04 EC 
       02 00       
043472 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       75 43 04 F1 
       02 00       
043484 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       8A 43 04 F2 
       02 00       
043496 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_243, 755
       00 00 10 00 
       00 00 01 00 
       9F 43 04 F3 
       02 00       
0434A8 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       B4 43 04 F5 
       02 00       
0434BA 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       C9 43 04 F6 
       02 00       
0434CC 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_247, 759
       00 00 10 00 
       00 00 01 00 
       DE 43 04 F7 
       02 00       
0434DE 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       F3 43 04 F8 
       02 00       
0434F0             0193*   
0434F0             0194*   tiles_dg_files_list: ; filename:
0434F0 74 69 6C 65 0195*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
043505 74 69 6C 65 0196*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
04351A 74 69 6C 65 0197*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
04352F 74 69 6C 65 0198*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
043544 74 69 6C 65 0199*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
043559 74 69 6C 65 0200*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
04356E 74 69 6C 65 0201*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
043583 74 69 6C 65 0202*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
043598 74 69 6C 65 0203*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0435AD 74 69 6C 65 0204*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
0435C2 74 69 6C 65 0205*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
0435D7 74 69 6C 65 0206*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
0435EC 74 69 6C 65 0207*   fn_dg_012: db "tiles/dg/0/012.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 32 2E 72 
       67 62 61 32 
       00          
043601 74 69 6C 65 0208*   fn_dg_013: db "tiles/dg/0/013.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 33 2E 72 
       67 62 61 32 
       00          
043616 74 69 6C 65 0209*   fn_dg_014: db "tiles/dg/0/014.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 34 2E 72 
       67 62 61 32 
       00          
04362B 74 69 6C 65 0210*   fn_dg_015: db "tiles/dg/0/015.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 35 2E 72 
       67 62 61 32 
       00          
043640 74 69 6C 65 0211*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
043655 74 69 6C 65 0212*   fn_dg_025: db "tiles/dg/0/025.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 35 2E 72 
       67 62 61 32 
       00          
04366A 74 69 6C 65 0213*   fn_dg_026: db "tiles/dg/0/026.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 36 2E 72 
       67 62 61 32 
       00          
04367F 74 69 6C 65 0214*   fn_dg_027: db "tiles/dg/0/027.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 37 2E 72 
       67 62 61 32 
       00          
043694 74 69 6C 65 0215*   fn_dg_028: db "tiles/dg/0/028.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 38 2E 72 
       67 62 61 32 
       00          
0436A9 74 69 6C 65 0216*   fn_dg_029: db "tiles/dg/0/029.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 39 2E 72 
       67 62 61 32 
       00          
0436BE 74 69 6C 65 0217*   fn_dg_030: db "tiles/dg/0/030.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 30 2E 72 
       67 62 61 32 
       00          
0436D3 74 69 6C 65 0218*   fn_dg_031: db "tiles/dg/0/031.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 31 2E 72 
       67 62 61 32 
       00          
0436E8 74 69 6C 65 0219*   fn_dg_032: db "tiles/dg/0/032.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0436FD 74 69 6C 65 0220*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
043712 74 69 6C 65 0221*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
043727 74 69 6C 65 0222*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
04373C 74 69 6C 65 0223*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
043751 74 69 6C 65 0224*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
043766 74 69 6C 65 0225*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
04377B 74 69 6C 65 0226*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
043790 74 69 6C 65 0227*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0437A5 74 69 6C 65 0228*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
0437BA 74 69 6C 65 0229*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
0437CF 74 69 6C 65 0230*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
0437E4 74 69 6C 65 0231*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
0437F9 74 69 6C 65 0232*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
04380E 74 69 6C 65 0233*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
043823 74 69 6C 65 0234*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
043838 74 69 6C 65 0235*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04384D 74 69 6C 65 0236*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
043862 74 69 6C 65 0237*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043877 74 69 6C 65 0238*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
04388C 74 69 6C 65 0239*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
0438A1 74 69 6C 65 0240*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
0438B6 74 69 6C 65 0241*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
0438CB 74 69 6C 65 0242*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
0438E0 74 69 6C 65 0243*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
0438F5 74 69 6C 65 0244*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
04390A 74 69 6C 65 0245*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
04391F 74 69 6C 65 0246*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
043934 74 69 6C 65 0247*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
043949 74 69 6C 65 0248*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
04395E 74 69 6C 65 0249*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
043973 74 69 6C 65 0250*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
043988 74 69 6C 65 0251*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
04399D 74 69 6C 65 0252*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
0439B2 74 69 6C 65 0253*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
0439C7 74 69 6C 65 0254*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
0439DC 74 69 6C 65 0255*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
0439F1 74 69 6C 65 0256*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
043A06 74 69 6C 65 0257*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
043A1B 74 69 6C 65 0258*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
043A30 74 69 6C 65 0259*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
043A45 74 69 6C 65 0260*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
043A5A 74 69 6C 65 0261*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
043A6F 74 69 6C 65 0262*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
043A84 74 69 6C 65 0263*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
043A99 74 69 6C 65 0264*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
043AAE 74 69 6C 65 0265*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
043AC3 74 69 6C 65 0266*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
043AD8 74 69 6C 65 0267*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
043AED 74 69 6C 65 0268*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
043B02 74 69 6C 65 0269*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
043B17 74 69 6C 65 0270*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
043B2C 74 69 6C 65 0271*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
043B41 74 69 6C 65 0272*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
043B56 74 69 6C 65 0273*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
043B6B 74 69 6C 65 0274*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
043B80 74 69 6C 65 0275*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
043B95 74 69 6C 65 0276*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
043BAA 74 69 6C 65 0277*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
043BBF 74 69 6C 65 0278*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
043BD4 74 69 6C 65 0279*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
043BE9 74 69 6C 65 0280*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
043BFE 74 69 6C 65 0281*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
043C13 74 69 6C 65 0282*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
043C28 74 69 6C 65 0283*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
043C3D 74 69 6C 65 0284*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
043C52 74 69 6C 65 0285*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
043C67 74 69 6C 65 0286*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
043C7C 74 69 6C 65 0287*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
043C91 74 69 6C 65 0288*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
043CA6 74 69 6C 65 0289*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
043CBB 74 69 6C 65 0290*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
043CD0 74 69 6C 65 0291*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
043CE5 74 69 6C 65 0292*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
043CFA 74 69 6C 65 0293*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
043D0F 74 69 6C 65 0294*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
043D24 74 69 6C 65 0295*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
043D39 74 69 6C 65 0296*   fn_dg_141: db "tiles/dg/0/141.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 31 2E 72 
       67 62 61 32 
       00          
043D4E 74 69 6C 65 0297*   fn_dg_142: db "tiles/dg/0/142.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 32 2E 72 
       67 62 61 32 
       00          
043D63 74 69 6C 65 0298*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
043D78 74 69 6C 65 0299*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
043D8D 74 69 6C 65 0300*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
043DA2 74 69 6C 65 0301*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
043DB7 74 69 6C 65 0302*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
043DCC 74 69 6C 65 0303*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
043DE1 74 69 6C 65 0304*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
043DF6 74 69 6C 65 0305*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
043E0B 74 69 6C 65 0306*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
043E20 74 69 6C 65 0307*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
043E35 74 69 6C 65 0308*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
043E4A 74 69 6C 65 0309*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
043E5F 74 69 6C 65 0310*   fn_dg_157: db "tiles/dg/0/157.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 37 2E 72 
       67 62 61 32 
       00          
043E74 74 69 6C 65 0311*   fn_dg_158: db "tiles/dg/0/158.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 38 2E 72 
       67 62 61 32 
       00          
043E89 74 69 6C 65 0312*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
043E9E 74 69 6C 65 0313*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
043EB3 74 69 6C 65 0314*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
043EC8 74 69 6C 65 0315*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
043EDD 74 69 6C 65 0316*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
043EF2 74 69 6C 65 0317*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
043F07 74 69 6C 65 0318*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
043F1C 74 69 6C 65 0319*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
043F31 74 69 6C 65 0320*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
043F46 74 69 6C 65 0321*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
043F5B 74 69 6C 65 0322*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
043F70 74 69 6C 65 0323*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
043F85 74 69 6C 65 0324*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
043F9A 74 69 6C 65 0325*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
043FAF 74 69 6C 65 0326*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
043FC4 74 69 6C 65 0327*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
043FD9 74 69 6C 65 0328*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
043FEE 74 69 6C 65 0329*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
044003 74 69 6C 65 0330*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
044018 74 69 6C 65 0331*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04402D 74 69 6C 65 0332*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
044042 74 69 6C 65 0333*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
044057 74 69 6C 65 0334*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
04406C 74 69 6C 65 0335*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
044081 74 69 6C 65 0336*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
044096 74 69 6C 65 0337*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
0440AB 74 69 6C 65 0338*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
0440C0 74 69 6C 65 0339*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
0440D5 74 69 6C 65 0340*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
0440EA 74 69 6C 65 0341*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
0440FF 74 69 6C 65 0342*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
044114 74 69 6C 65 0343*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044129 74 69 6C 65 0344*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
04413E 74 69 6C 65 0345*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
044153 74 69 6C 65 0346*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
044168 74 69 6C 65 0347*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
04417D 74 69 6C 65 0348*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
044192 74 69 6C 65 0349*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
0441A7 74 69 6C 65 0350*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
0441BC 74 69 6C 65 0351*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
0441D1 74 69 6C 65 0352*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
0441E6 74 69 6C 65 0353*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
0441FB 74 69 6C 65 0354*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
044210 74 69 6C 65 0355*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044225 74 69 6C 65 0356*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
04423A 74 69 6C 65 0357*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
04424F 74 69 6C 65 0358*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
044264 74 69 6C 65 0359*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
044279 74 69 6C 65 0360*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
04428E 74 69 6C 65 0361*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
0442A3 74 69 6C 65 0362*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
0442B8 74 69 6C 65 0363*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
0442CD 74 69 6C 65 0364*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
0442E2 74 69 6C 65 0365*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
0442F7 74 69 6C 65 0366*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
04430C 74 69 6C 65 0367*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044321 74 69 6C 65 0368*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
044336 74 69 6C 65 0369*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
04434B 74 69 6C 65 0370*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
044360 74 69 6C 65 0371*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
044375 74 69 6C 65 0372*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
04438A 74 69 6C 65 0373*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
04439F 74 69 6C 65 0374*   fn_dg_243: db "tiles/dg/0/243.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 33 2E 72 
       67 62 61 32 
       00          
0443B4 74 69 6C 65 0375*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
0443C9 74 69 6C 65 0376*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
0443DE 74 69 6C 65 0377*   fn_dg_247: db "tiles/dg/0/247.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 37 2E 72 
       67 62 61 32 
       00          
0443F3 74 69 6C 65 0378*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044408             0051        ; include "images_tiles_xevious.inc"
044408             0052        include "images_sprites.inc"
044408             0001*   ; Generated by make_images.py
044408             0002*   
044408             0003*   sprites_num_images: equ 80
044408             0004*   
044408             0005*   ; buffer_ids:
044408             0006*   BUF_CRATER: equ 256
044408             0007*   BUF_EXPLOSION_A: equ 257
044408             0008*   BUF_EXPLOSION_B: equ 258
044408             0009*   BUF_EXPLOSION_C: equ 259
044408             0010*   BUF_EXPLOSION_D: equ 260
044408             0011*   BUF_EXPLOSION_E: equ 261
044408             0012*   BUF_FIREBALL_A: equ 262
044408             0013*   BUF_FIREBALL_B: equ 263
044408             0014*   BUF_LASER_A: equ 264
044408             0015*   BUF_LASER_B: equ 265
044408             0016*   BUF_PAD: equ 266
044408             0017*   BUF_SEEKER_000: equ 267
044408             0018*   BUF_SEEKER_008: equ 268
044408             0019*   BUF_SEEKER_016: equ 269
044408             0020*   BUF_SEEKER_024: equ 270
044408             0021*   BUF_SEEKER_032: equ 271
044408             0022*   BUF_SEEKER_040: equ 272
044408             0023*   BUF_SEEKER_048: equ 273
044408             0024*   BUF_SEEKER_056: equ 274
044408             0025*   BUF_SEEKER_064: equ 275
044408             0026*   BUF_SEEKER_072: equ 276
044408             0027*   BUF_SEEKER_080: equ 277
044408             0028*   BUF_SEEKER_088: equ 278
044408             0029*   BUF_SEEKER_096: equ 279
044408             0030*   BUF_SEEKER_104: equ 280
044408             0031*   BUF_SEEKER_112: equ 281
044408             0032*   BUF_SEEKER_120: equ 282
044408             0033*   BUF_SEEKER_128: equ 283
044408             0034*   BUF_SEEKER_136: equ 284
044408             0035*   BUF_SEEKER_144: equ 285
044408             0036*   BUF_SEEKER_152: equ 286
044408             0037*   BUF_SEEKER_160: equ 287
044408             0038*   BUF_SEEKER_168: equ 288
044408             0039*   BUF_SEEKER_176: equ 289
044408             0040*   BUF_SEEKER_184: equ 290
044408             0041*   BUF_SEEKER_192: equ 291
044408             0042*   BUF_SEEKER_200: equ 292
044408             0043*   BUF_SEEKER_208: equ 293
044408             0044*   BUF_SEEKER_216: equ 294
044408             0045*   BUF_SEEKER_224: equ 295
044408             0046*   BUF_SEEKER_232: equ 296
044408             0047*   BUF_SEEKER_240: equ 297
044408             0048*   BUF_SEEKER_248: equ 298
044408             0049*   BUF_SHIP_0L: equ 299
044408             0050*   BUF_SHIP_1C: equ 300
044408             0051*   BUF_SHIP_2R: equ 301
044408             0052*   BUF_SHIP_SMALL: equ 302
044408             0053*   BUF_TEST_STRIPES: equ 303
044408             0054*   BUF_TURRET_000: equ 304
044408             0055*   BUF_TURRET_008: equ 305
044408             0056*   BUF_TURRET_016: equ 306
044408             0057*   BUF_TURRET_024: equ 307
044408             0058*   BUF_TURRET_032: equ 308
044408             0059*   BUF_TURRET_040: equ 309
044408             0060*   BUF_TURRET_048: equ 310
044408             0061*   BUF_TURRET_056: equ 311
044408             0062*   BUF_TURRET_064: equ 312
044408             0063*   BUF_TURRET_072: equ 313
044408             0064*   BUF_TURRET_080: equ 314
044408             0065*   BUF_TURRET_088: equ 315
044408             0066*   BUF_TURRET_096: equ 316
044408             0067*   BUF_TURRET_104: equ 317
044408             0068*   BUF_TURRET_112: equ 318
044408             0069*   BUF_TURRET_120: equ 319
044408             0070*   BUF_TURRET_128: equ 320
044408             0071*   BUF_TURRET_136: equ 321
044408             0072*   BUF_TURRET_144: equ 322
044408             0073*   BUF_TURRET_152: equ 323
044408             0074*   BUF_TURRET_160: equ 324
044408             0075*   BUF_TURRET_168: equ 325
044408             0076*   BUF_TURRET_176: equ 326
044408             0077*   BUF_TURRET_184: equ 327
044408             0078*   BUF_TURRET_192: equ 328
044408             0079*   BUF_TURRET_200: equ 329
044408             0080*   BUF_TURRET_208: equ 330
044408             0081*   BUF_TURRET_216: equ 331
044408             0082*   BUF_TURRET_224: equ 332
044408             0083*   BUF_TURRET_232: equ 333
044408             0084*   BUF_TURRET_240: equ 334
044408             0085*   BUF_TURRET_248: equ 335
044408             0086*   
044408             0087*   sprites_image_list: ; type; width; height; size; filename; bufferId:
044408 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       A8 49 04 00 
       01 00       
04441A 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_explosion_a, 257
       00 00 10 00 
       00 00 01 00 
       BD 49 04 01 
       01 00       
04442C 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_explosion_b, 258
       00 00 10 00 
       00 00 01 00 
       D7 49 04 02 
       01 00       
04443E 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_explosion_c, 259
       00 00 10 00 
       00 00 01 00 
       F1 49 04 03 
       01 00       
044450 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_explosion_d, 260
       00 00 10 00 
       00 00 01 00 
       0B 4A 04 04 
       01 00       
044462 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_explosion_e, 261
       00 00 10 00 
       00 00 01 00 
       25 4A 04 05 
       01 00       
044474 01 00 00 07 0094*   	dl 1, 7, 7, 49, fn_fireball_a, 262
       00 00 07 00 
       00 31 00 00 
       3F 4A 04 06 
       01 00       
044486 01 00 00 07 0095*   	dl 1, 7, 7, 49, fn_fireball_b, 263
       00 00 07 00 
       00 31 00 00 
       58 4A 04 07 
       01 00       
044498 01 00 00 05 0096*   	dl 1, 5, 13, 65, fn_laser_a, 264
       00 00 0D 00 
       00 41 00 00 
       71 4A 04 08 
       01 00       
0444AA 01 00 00 05 0097*   	dl 1, 5, 13, 65, fn_laser_b, 265
       00 00 0D 00 
       00 41 00 00 
       87 4A 04 09 
       01 00       
0444BC 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_pad, 266
       00 00 10 00 
       00 00 01 00 
       9D 4A 04 0A 
       01 00       
0444CE 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_seeker_000, 267
       00 00 10 00 
       00 00 01 00 
       AF 4A 04 0B 
       01 00       
0444E0 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_seeker_008, 268
       00 00 10 00 
       00 00 01 00 
       C8 4A 04 0C 
       01 00       
0444F2 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_seeker_016, 269
       00 00 10 00 
       00 00 01 00 
       E1 4A 04 0D 
       01 00       
044504 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_seeker_024, 270
       00 00 10 00 
       00 00 01 00 
       FA 4A 04 0E 
       01 00       
044516 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_seeker_032, 271
       00 00 10 00 
       00 00 01 00 
       13 4B 04 0F 
       01 00       
044528 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_seeker_040, 272
       00 00 10 00 
       00 00 01 00 
       2C 4B 04 10 
       01 00       
04453A 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_seeker_048, 273
       00 00 10 00 
       00 00 01 00 
       45 4B 04 11 
       01 00       
04454C 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_seeker_056, 274
       00 00 10 00 
       00 00 01 00 
       5E 4B 04 12 
       01 00       
04455E 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_seeker_064, 275
       00 00 10 00 
       00 00 01 00 
       77 4B 04 13 
       01 00       
044570 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_seeker_072, 276
       00 00 10 00 
       00 00 01 00 
       90 4B 04 14 
       01 00       
044582 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_seeker_080, 277
       00 00 10 00 
       00 00 01 00 
       A9 4B 04 15 
       01 00       
044594 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_seeker_088, 278
       00 00 10 00 
       00 00 01 00 
       C2 4B 04 16 
       01 00       
0445A6 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_seeker_096, 279
       00 00 10 00 
       00 00 01 00 
       DB 4B 04 17 
       01 00       
0445B8 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_seeker_104, 280
       00 00 10 00 
       00 00 01 00 
       F4 4B 04 18 
       01 00       
0445CA 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_seeker_112, 281
       00 00 10 00 
       00 00 01 00 
       0D 4C 04 19 
       01 00       
0445DC 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_seeker_120, 282
       00 00 10 00 
       00 00 01 00 
       26 4C 04 1A 
       01 00       
0445EE 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_seeker_128, 283
       00 00 10 00 
       00 00 01 00 
       3F 4C 04 1B 
       01 00       
044600 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_seeker_136, 284
       00 00 10 00 
       00 00 01 00 
       58 4C 04 1C 
       01 00       
044612 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_seeker_144, 285
       00 00 10 00 
       00 00 01 00 
       71 4C 04 1D 
       01 00       
044624 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_seeker_152, 286
       00 00 10 00 
       00 00 01 00 
       8A 4C 04 1E 
       01 00       
044636 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_seeker_160, 287
       00 00 10 00 
       00 00 01 00 
       A3 4C 04 1F 
       01 00       
044648 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_seeker_168, 288
       00 00 10 00 
       00 00 01 00 
       BC 4C 04 20 
       01 00       
04465A 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_seeker_176, 289
       00 00 10 00 
       00 00 01 00 
       D5 4C 04 21 
       01 00       
04466C 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_seeker_184, 290
       00 00 10 00 
       00 00 01 00 
       EE 4C 04 22 
       01 00       
04467E 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_seeker_192, 291
       00 00 10 00 
       00 00 01 00 
       07 4D 04 23 
       01 00       
044690 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_seeker_200, 292
       00 00 10 00 
       00 00 01 00 
       20 4D 04 24 
       01 00       
0446A2 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_seeker_208, 293
       00 00 10 00 
       00 00 01 00 
       39 4D 04 25 
       01 00       
0446B4 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_seeker_216, 294
       00 00 10 00 
       00 00 01 00 
       52 4D 04 26 
       01 00       
0446C6 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_seeker_224, 295
       00 00 10 00 
       00 00 01 00 
       6B 4D 04 27 
       01 00       
0446D8 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_seeker_232, 296
       00 00 10 00 
       00 00 01 00 
       84 4D 04 28 
       01 00       
0446EA 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_seeker_240, 297
       00 00 10 00 
       00 00 01 00 
       9D 4D 04 29 
       01 00       
0446FC 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_seeker_248, 298
       00 00 10 00 
       00 00 01 00 
       B6 4D 04 2A 
       01 00       
04470E 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_ship_0l, 299
       00 00 10 00 
       00 00 01 00 
       CF 4D 04 2B 
       01 00       
044720 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_ship_1c, 300
       00 00 10 00 
       00 00 01 00 
       E5 4D 04 2C 
       01 00       
044732 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_ship_2r, 301
       00 00 10 00 
       00 00 01 00 
       FB 4D 04 2D 
       01 00       
044744 01 00 00 08 0134*   	dl 1, 8, 8, 64, fn_ship_small, 302
       00 00 08 00 
       00 40 00 00 
       11 4E 04 2E 
       01 00       
044756 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_test_stripes, 303
       00 00 10 00 
       00 00 01 00 
       2A 4E 04 2F 
       01 00       
044768 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_turret_000, 304
       00 00 10 00 
       00 00 01 00 
       45 4E 04 30 
       01 00       
04477A 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_turret_008, 305
       00 00 10 00 
       00 00 01 00 
       5E 4E 04 31 
       01 00       
04478C 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_turret_016, 306
       00 00 10 00 
       00 00 01 00 
       77 4E 04 32 
       01 00       
04479E 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_turret_024, 307
       00 00 10 00 
       00 00 01 00 
       90 4E 04 33 
       01 00       
0447B0 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_turret_032, 308
       00 00 10 00 
       00 00 01 00 
       A9 4E 04 34 
       01 00       
0447C2 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_turret_040, 309
       00 00 10 00 
       00 00 01 00 
       C2 4E 04 35 
       01 00       
0447D4 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_turret_048, 310
       00 00 10 00 
       00 00 01 00 
       DB 4E 04 36 
       01 00       
0447E6 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_turret_056, 311
       00 00 10 00 
       00 00 01 00 
       F4 4E 04 37 
       01 00       
0447F8 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_turret_064, 312
       00 00 10 00 
       00 00 01 00 
       0D 4F 04 38 
       01 00       
04480A 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_turret_072, 313
       00 00 10 00 
       00 00 01 00 
       26 4F 04 39 
       01 00       
04481C 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_turret_080, 314
       00 00 10 00 
       00 00 01 00 
       3F 4F 04 3A 
       01 00       
04482E 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_turret_088, 315
       00 00 10 00 
       00 00 01 00 
       58 4F 04 3B 
       01 00       
044840 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_turret_096, 316
       00 00 10 00 
       00 00 01 00 
       71 4F 04 3C 
       01 00       
044852 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_turret_104, 317
       00 00 10 00 
       00 00 01 00 
       8A 4F 04 3D 
       01 00       
044864 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_turret_112, 318
       00 00 10 00 
       00 00 01 00 
       A3 4F 04 3E 
       01 00       
044876 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_turret_120, 319
       00 00 10 00 
       00 00 01 00 
       BC 4F 04 3F 
       01 00       
044888 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_turret_128, 320
       00 00 10 00 
       00 00 01 00 
       D5 4F 04 40 
       01 00       
04489A 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_turret_136, 321
       00 00 10 00 
       00 00 01 00 
       EE 4F 04 41 
       01 00       
0448AC 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_turret_144, 322
       00 00 10 00 
       00 00 01 00 
       07 50 04 42 
       01 00       
0448BE 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_turret_152, 323
       00 00 10 00 
       00 00 01 00 
       20 50 04 43 
       01 00       
0448D0 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_turret_160, 324
       00 00 10 00 
       00 00 01 00 
       39 50 04 44 
       01 00       
0448E2 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_turret_168, 325
       00 00 10 00 
       00 00 01 00 
       52 50 04 45 
       01 00       
0448F4 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_turret_176, 326
       00 00 10 00 
       00 00 01 00 
       6B 50 04 46 
       01 00       
044906 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_turret_184, 327
       00 00 10 00 
       00 00 01 00 
       84 50 04 47 
       01 00       
044918 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_turret_192, 328
       00 00 10 00 
       00 00 01 00 
       9D 50 04 48 
       01 00       
04492A 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_turret_200, 329
       00 00 10 00 
       00 00 01 00 
       B6 50 04 49 
       01 00       
04493C 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_turret_208, 330
       00 00 10 00 
       00 00 01 00 
       CF 50 04 4A 
       01 00       
04494E 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_turret_216, 331
       00 00 10 00 
       00 00 01 00 
       E8 50 04 4B 
       01 00       
044960 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_turret_224, 332
       00 00 10 00 
       00 00 01 00 
       01 51 04 4C 
       01 00       
044972 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_turret_232, 333
       00 00 10 00 
       00 00 01 00 
       1A 51 04 4D 
       01 00       
044984 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_turret_240, 334
       00 00 10 00 
       00 00 01 00 
       33 51 04 4E 
       01 00       
044996 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_turret_248, 335
       00 00 10 00 
       00 00 01 00 
       4C 51 04 4F 
       01 00       
0449A8             0168*   
0449A8             0169*   ; files_list: ; filename:
0449A8 73 70 72 69 0170*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
0449BD 73 70 72 69 0171*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
0449D7 73 70 72 69 0172*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
0449F1 73 70 72 69 0173*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
044A0B 73 70 72 69 0174*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
044A25 73 70 72 69 0175*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
044A3F 73 70 72 69 0176*   fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
044A58 73 70 72 69 0177*   fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
044A71 73 70 72 69 0178*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
044A87 73 70 72 69 0179*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
044A9D 73 70 72 69 0180*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
044AAF 73 70 72 69 0181*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044AC8 73 70 72 69 0182*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044AE1 73 70 72 69 0183*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044AFA 73 70 72 69 0184*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044B13 73 70 72 69 0185*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044B2C 73 70 72 69 0186*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044B45 73 70 72 69 0187*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044B5E 73 70 72 69 0188*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044B77 73 70 72 69 0189*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044B90 73 70 72 69 0190*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044BA9 73 70 72 69 0191*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044BC2 73 70 72 69 0192*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044BDB 73 70 72 69 0193*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044BF4 73 70 72 69 0194*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044C0D 73 70 72 69 0195*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
044C26 73 70 72 69 0196*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044C3F 73 70 72 69 0197*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
044C58 73 70 72 69 0198*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
044C71 73 70 72 69 0199*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044C8A 73 70 72 69 0200*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
044CA3 73 70 72 69 0201*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
044CBC 73 70 72 69 0202*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044CD5 73 70 72 69 0203*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044CEE 73 70 72 69 0204*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
044D07 73 70 72 69 0205*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
044D20 73 70 72 69 0206*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044D39 73 70 72 69 0207*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
044D52 73 70 72 69 0208*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044D6B 73 70 72 69 0209*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
044D84 73 70 72 69 0210*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044D9D 73 70 72 69 0211*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
044DB6 73 70 72 69 0212*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044DCF 73 70 72 69 0213*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
044DE5 73 70 72 69 0214*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
044DFB 73 70 72 69 0215*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
044E11 73 70 72 69 0216*   fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
044E2A 73 70 72 69 0217*   fn_test_stripes: db "sprites/test_stripes.rgba2",0
       74 65 73 2F 
       74 65 73 74 
       5F 73 74 72 
       69 70 65 73 
       2E 72 67 62 
       61 32 00    
044E45 73 70 72 69 0218*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044E5E 73 70 72 69 0219*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044E77 73 70 72 69 0220*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044E90 73 70 72 69 0221*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044EA9 73 70 72 69 0222*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044EC2 73 70 72 69 0223*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044EDB 73 70 72 69 0224*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044EF4 73 70 72 69 0225*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044F0D 73 70 72 69 0226*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044F26 73 70 72 69 0227*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044F3F 73 70 72 69 0228*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044F58 73 70 72 69 0229*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044F71 73 70 72 69 0230*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044F8A 73 70 72 69 0231*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044FA3 73 70 72 69 0232*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
044FBC 73 70 72 69 0233*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044FD5 73 70 72 69 0234*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
044FEE 73 70 72 69 0235*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045007 73 70 72 69 0236*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045020 73 70 72 69 0237*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045039 73 70 72 69 0238*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045052 73 70 72 69 0239*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
04506B 73 70 72 69 0240*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045084 73 70 72 69 0241*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04509D 73 70 72 69 0242*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0450B6 73 70 72 69 0243*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0450CF 73 70 72 69 0244*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0450E8 73 70 72 69 0245*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045101 73 70 72 69 0246*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
04511A 73 70 72 69 0247*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045133 73 70 72 69 0248*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
04514C 73 70 72 69 0249*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045165             0053        include "images_ui.inc"
045165             0001*   ; Generated by make_images.py
045165             0002*   
045165             0003*   ui_num_images: equ 4
045165             0004*   
045165             0005*   ; buffer_ids:
045165             0006*   BUF_BEZEL_L: equ 0
045165             0007*   BUF_BEZEL_R: equ 1
045165             0008*   BUF_SPLASH_BG: equ 2
045165             0009*   BUF_SPLASH_LOGO: equ 3
045165             0010*   
045165             0011*   ui_image_list: ; type; width; height; size; filename; bufferId:
045165 01 00 00 80 0012*   	dl 1, 128, 384, 49152, fn_bezel_l, 0
       00 00 80 01 
       00 00 C0 00 
       AD 51 04 00 
       00 00       
045177 01 00 00 80 0013*   	dl 1, 128, 384, 49152, fn_bezel_r, 1
       00 00 80 01 
       00 00 C0 00 
       BE 51 04 01 
       00 00       
045189 01 00 00 40 0014*   	dl 1, 320, 240, 76800, fn_splash_bg, 2
       01 00 F0 00 
       00 00 2C 01 
       CF 51 04 02 
       00 00       
04519B 01 00 00 40 0015*   	dl 1, 320, 240, 76800, fn_splash_logo, 3
       01 00 F0 00 
       00 00 2C 01 
       E2 51 04 03 
       00 00       
0451AD             0016*   
0451AD             0017*   ; files_list: ; filename:
0451AD 75 69 2F 62 0018*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
0451BE 75 69 2F 62 0019*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
0451CF 75 69 2F 73 0020*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
0451E2 75 69 2F 73 0021*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
0451F7             0054        ; include "laser.inc"
0451F7             0055        include "levels.inc"
0451F7 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF          
045200             0002*   
045200             0003*   ; tileset indices
045200             0004*   tiles_dg: equ 0
045200             0005*   ; tiles_xevious: equ 1
045200 00 00 00    0006*   tileset_ptr_idx: dl 0
045203             0007*   tileset_ptrs:
045203             0008*       ; dl tiles_xevious_levels
045203 CB 52 04    0009*       dl tileset_00_levels
045206 00 00 00    0010*   tileset_ptrs_end: dl 0 ; list terminator
045209             0011*   
045209             0012*   ; get a pointer to the current tileset
045209             0013*   ; inputs: tileset_ptr_idx
045209             0014*   ; returns: ix = pointer to tileset levels lut
045209             0015*   get_tileset_ptr:
045209 3A 00 52 04 0016*       ld a,(tileset_ptr_idx)
04520D 57          0017*       ld d,a ; d = tileset index
04520E 1E 03       0018*       ld e,3 ; three bytes per index record
045210 ED 5C       0019*       mlt de ; offset into tileset_ptrs lut
045212 DD 21 03 52 0020*       ld ix,tileset_ptrs
       04          
045217 DD 19       0021*       add ix,de ; ix = pointer to tileset_ptrs record
045219 C9          0022*       ret
04521A             0023*   ; end get_tileset_ptr
04521A             0024*   
04521A             0025*   ; intialize a tileset
04521A             0026*   ; inputs: a = index into tileset_ptrs
04521A             0027*   init_tileset:
04521A 32 00 52 04 0028*       ld (tileset_ptr_idx),a ; store new tileset index
04521E CD 09 52 04 0029*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
045222 DD 37 00    0030*       ld ix,(ix) ; ix = pointer to tileset levels lut
045225 DD 7E FF    0031*       ld a,(ix-1) ; number of levels in the tileset
045228 32 58 52 04 0032*       ld (num_levels),a
04522C AF          0033*       xor a ; reset current level to zero
04522D 32 57 52 04 0034*       ld (cur_level),a
045231 C3 89 52 04 0035*       jp init_level
045235             0036*   ; end init_tileset
045235             0037*   
045235             0038*   next_tileset:
045235 21 00 52 04 0039*       ld hl,tileset_ptr_idx
045239 34          0040*       inc (hl) ; bump to next index
04523A CD 09 52 04 0041*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
04523E DD 27 00    0042*       ld hl,(ix) ; ix = pointer to tileset levels lut
045241             0043*       sign_hlu ; check for list terminator (0)
045241 19          0001*M1     add hl,de
045242 B7          0002*M1     or a ; clear flags
045243 ED 52       0003*M1     sbc hl,de
045245 C2 53 52 04 0044*       jp nz,@F ; not end of list
045249 3E FF       0045*       ld a,-1 ; will wrap around to zero on the next iteration
04524B 32 00 52 04 0046*       ld (tileset_ptr_idx),a
04524F C3 35 52 04 0047*       jp next_tileset ; try again
045253             0048*   @@:
045253 C3 1A 52 04 0049*       jp init_tileset
045257             0050*   ; end next_tileset
045257             0051*   
045257 00          0052*   cur_level: db 0
045258 00          0053*   num_levels: db 0
045259             0054*   
045259             0055*   ; get a pointer to the current level lookup record
045259             0056*   ; inputs: tileset_ptr_idx, cur_level
045259             0057*   ; returns: ix = pointer to level definition
045259             0058*   get_level_ptr:
045259 CD 09 52 04 0059*       call get_tileset_ptr
04525D DD 37 00    0060*       ld ix,(ix) ; ix = pointer to tileset levels lut
045260 3A 57 52 04 0061*       ld a,(cur_level)
045264 57          0062*       ld d,a ; d = level index
045265 1E 03       0063*       ld e,3 ; three bytes per level record
045267 ED 5C       0064*       mlt de ; offset into tileset levels lut
045269 DD 19       0065*       add ix,de ; ix = pointer to level record
04526B C9          0066*       ret
04526C             0067*   ; end get_level_ptr
04526C             0068*   
04526C             0069*   ; advance to the next level in the current tileset
04526C             0070*   ; inputs: tileset_ptr_idx, cur_level
04526C             0071*   next_level:
04526C 21 57 52 04 0072*       ld hl,cur_level
045270 34          0073*       inc (hl) ; bump to next level
045271 CD 59 52 04 0074*       call get_level_ptr ; ix points to current level lookup record
045275 DD 27 00    0075*       ld hl,(ix) ; hl = pointer to next level lookup record
045278             0076*       sign_hlu ; check for list terminator (0)
045278 19          0001*M1     add hl,de
045279 B7          0002*M1     or a ; clear flags
04527A ED 52       0003*M1     sbc hl,de
04527C C2 89 52 04 0077*       jp nz,@F ; not end of list
045280 AF          0078*       xor a ; reset level to zero
045281 32 57 52 04 0079*       ld (cur_level),a
045285 C3 35 52 04 0080*       jp next_tileset ; try next tileset
045289             0081*   @@: ; fall through to init_level
045289             0082*   ; end next_level
045289             0083*   
045289             0084*   ; inputs: ix pointed to tileset level definition
045289             0085*   init_level:
045289 CD 59 52 04 0086*       call get_level_ptr ; ix points to level lookup record
04528D DD 37 00    0087*       ld ix,(ix) ; ix points to level definition
045290             0088*   ; set tiles_cols
045290 DD 7E 00    0089*       ld a,(ix+0)
045293 32 06 5C 04 0090*       ld (tiles_cols),a
045297             0091*   ; set tiles_row counter
045297 DD 7E 01    0092*       ld a,(ix+1)
04529A 32 03 5C 04 0093*       ld (tiles_row),a
04529E             0094*   ; set cur_baseBufferId
04529E DD 27 04    0095*       ld hl,(ix+4)
0452A1 22 07 5C 04 0096*       ld (cur_baseBufferId),hl
0452A5             0097*   ; set tiles_row_defs
0452A5 ED 32 07    0098*       lea ix,ix+7 ; ix points to definition of first tile of first row
0452A8 DD 22 00 5C 0099*       ld (tiles_row_defs),ix
       04          
0452AD             0100*   ; print_level:
0452AD             0101*   level_x: equ 48
0452AD             0102*   level_y: equ 0
0452AD 0E 30       0103*       ld c,level_x
0452AF 06 00       0104*       ld b,level_y
0452B1 CD 37 19 04 0105*       call vdu_move_cursor
0452B5 CD 10 01 04 0106*       call printInline
0452B9 4C 65 76 65 0107*       asciz "Level: "
       6C 3A 20 00 
0452C1 3A 57 52 04 0108*       ld a,(cur_level)
0452C5 CD 5A 01 04 0109*       call printHexA
0452C9             0110*       ; call printNewLine
0452C9             0111*       ; ld hl,(cur_baseBufferId)
0452C9             0112*       ; call printDec
0452C9             0113*   
0452C9             0114*   ; ; draw initial background tiles
0452C9             0115*   ; ; TODO: make this a stars background
0452C9             0116*   ;     ld hl,BUF_STATION_BG_00
0452C9             0117*   ;     call vdu_buff_select
0452C9             0118*   ;     ld bc,0
0452C9             0119*   ;     ld de,field_top
0452C9             0120*   ;     call vdu_plot_bmp
0452C9             0121*   
0452C9             0122*   ;     ld hl,BUF_STATION_BG_01
0452C9             0123*   ;     call vdu_buff_select
0452C9             0124*   ;     ld bc,0
0452C9             0125*   ;     ld de,field_top+256
0452C9             0126*   ;     call vdu_plot_bmp
0452C9             0127*   
0452C9 C9          0128*       ret
0452CA             0129*   ; end init_level
0452CA             0056        include "levels_tileset_0.inc"
0452CA             0001*   ; Generated from tiles/dg/dg0_00.tmx
0452CA             0002*   
0452CA 01          0003*   tileset_00_num_levels: db 1
0452CB             0004*   
0452CB             0005*   tileset_00_levels:
0452CB D1 52 04    0006*   	dl tileset_00_level_00
0452CE 00 00 00    0007*   	dl 0 ; list terminator
0452D1             0008*   
0452D1             0009*   tileset_00_level_00: ; Level 0
0452D1 10          0010*   	db 16          ; num cols
0452D2 20 00 00    0011*   	dl 32          ; num rows
0452D5 00 02 00    0012*   	dl 512 ; base bufferId
0452D8 00 00 00 00 0013*   	db 000,000,000,000,000,101,116,034,139,115,104,000,000,000,000,000
       00 65 74 22 
       8B 73 68 00 
       00 00 00 00 
0452E8 00 00 00 65 0014*   	db 000,000,000,101,098,116,113,114,114,115,116,097,104,000,000,000
       62 74 71 72 
       72 73 74 61 
       68 00 00 00 
0452F8 00 65 61 F5 0015*   	db 000,101,097,245,246,098,097,098,098,099,113,113,114,098,104,000
       F6 62 61 62 
       62 63 71 71 
       72 62 68 00 
045308 00 74 71 88 0016*   	db 000,116,113,136,137,115,113,114,113,114,098,099,113,114,100,000
       89 73 71 72 
       71 72 62 63 
       71 72 64 00 
045318 65 72 61 96 0017*   	db 101,114,097,150,151,099,097,105,098,098,081,082,074,083,084,104
       97 63 61 69 
       62 62 51 52 
       4A 53 54 68 
045328 63 71 72 96 0018*   	db 099,113,114,150,151,167,216,216,182,113,065,066,248,067,068,116
       97 A7 D8 D8 
       B6 71 41 42 
       F8 43 44 74 
045338 71 69 62 9A 0019*   	db 113,105,098,154,155,097,098,097,165,168,055,248,001,248,056,114
       9B 61 62 61 
       A5 A8 37 F8 
       01 F8 38 72 
045348 71 72 64 72 0020*   	db 113,114,100,114,113,100,113,114,113,114,049,050,248,051,052,098
       71 64 71 72 
       71 72 31 32 
       F8 33 34 62 
045358 61 62 61 64 0021*   	db 097,098,097,100,097,098,100,098,098,098,033,034,074,035,036,099
       61 62 64 62 
       62 62 21 22 
       4A 23 24 63 
045368 71 64 71 72 0022*   	db 113,100,113,114,113,114,121,114,115,113,087,088,188,113,100,113
       71 72 79 72 
       73 71 57 58 
       BC 71 64 71 
045378 61 62 59 5A 0023*   	db 097,098,089,090,091,098,114,098,136,137,071,072,219,097,098,097
       5B 62 72 62 
       88 89 47 48 
       DB 61 62 61 
045388 64 71 49 00 0024*   	db 100,113,073,000,075,171,220,172,134,135,171,220,236,220,220,172
       4B AB DC AC 
       86 87 AB DC 
       EC DC DC AC 
045398 62 64 39 3A 0025*   	db 098,100,057,058,059,097,098,100,134,135,099,100,097,098,100,098
       3B 61 62 64 
       86 87 63 64 
       61 62 64 62 
0453A8 72 62 72 73 0026*   	db 114,098,114,115,113,116,099,113,154,155,115,113,100,113,114,113
       71 74 63 71 
       9A 9B 73 71 
       64 71 72 71 
0453B8 62 72 62 63 0027*   	db 098,114,098,099,113,114,105,114,241,242,099,097,098,097,098,100
       71 72 69 72 
       F1 F2 63 61 
       62 61 62 64 
0453C8 73 79 71 72 0028*   	db 115,121,113,114,097,098,113,114,180,114,113,100,113,121,113,114
       61 62 71 72 
       B4 72 71 64 
       71 79 71 72 
0453D8 61 62 98 99 0029*   	db 097,098,152,153,098,152,153,098,211,100,097,098,100,243,098,098
       62 98 99 62 
       D3 64 61 62 
       64 F3 62 62 
0453E8 64 71 86 87 0030*   	db 100,113,134,135,114,134,135,115,195,212,212,212,212,243,114,113
       72 86 87 73 
       C3 D4 D4 D4 
       D4 F3 72 71 
0453F8 62 61 F5 F6 0031*   	db 098,097,245,246,098,245,246,099,211,114,099,097,098,243,098,100
       62 F5 F6 63 
       D3 72 63 61 
       62 F3 62 64 
045408 71 72 F1 F2 0032*   	db 113,114,241,242,115,241,242,163,162,098,105,100,087,088,113,114
       73 F1 F2 A3 
       A2 62 69 64 
       57 58 71 72 
045418 73 71 51 52 0033*   	db 115,113,081,082,074,083,084,098,114,115,113,116,071,072,098,098
       4A 53 54 62 
       72 73 71 74 
       47 48 62 62 
045428 63 61 41 42 0034*   	db 099,097,065,066,248,067,068,113,089,090,090,090,090,091,114,113
       F8 43 44 71 
       59 5A 5A 5A 
       5A 5B 72 71 
045438 71 64 37 F8 0035*   	db 113,100,055,248,000,248,056,114,073,148,098,040,105,075,098,100
       00 F8 38 72 
       49 94 62 28 
       69 4B 62 64 
045448 61 62 31 32 0036*   	db 097,098,049,050,248,051,052,114,073,132,056,000,055,075,113,114
       F8 33 34 72 
       49 84 38 00 
       37 4B 71 72 
045458 71 64 21 22 0037*   	db 113,100,033,034,074,035,036,114,073,247,116,040,123,075,098,121
       4A 23 24 72 
       49 F7 74 28 
       7B 4B 62 79 
045468 61 62 F1 F2 0038*   	db 097,098,241,242,100,241,242,098,073,113,243,121,107,075,099,113
       64 F1 F2 62 
       49 71 F3 79 
       6B 4B 63 71 
045478 67 71 86 87 0039*   	db 103,113,134,135,114,134,135,113,057,058,058,058,058,059,114,102
       72 86 87 71 
       39 3A 3A 3A 
       3A 3B 72 66 
045488 00 64 9A 9B 0040*   	db 000,100,154,155,098,154,155,100,098,098,099,180,098,100,098,000
       62 9A 9B 64 
       62 62 63 B4 
       62 64 62 00 
045498 00 67 72 63 0041*   	db 000,103,114,099,113,114,114,115,163,212,212,196,113,114,098,000
       71 72 72 73 
       A3 D4 D4 C4 
       71 72 62 00 
0454A8 00 00 62 71 0042*   	db 000,000,098,113,121,098,098,099,105,098,097,211,100,098,102,000
       79 62 62 63 
       69 62 61 D3 
       64 62 66 00 
0454B8 00 00 67 71 0043*   	db 000,000,103,113,114,100,114,113,100,113,114,179,114,102,000,000
       72 64 72 71 
       64 71 72 B3 
       72 66 00 00 
0454C8 00 00 00 00 0044*   	db 000,000,000,000,000,103,100,097,098,100,102,000,000,000,000,000
       00 67 64 61 
       62 64 66 00 
       00 00 00 00 
0454D8             0057        ; include "levels_xevious.inc"
0454D8             0058        include "player.inc"
0454D8 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
045500             0002*   
045500             0003*   ; ######## GAME STATE VARIABLES #######
045500             0004*   ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
045500 00 00 00    0005*   player_score: dl 0 ; integer
045503             0006*   ; player current shields,binary
045503             0007*   ; when < 0 player splodes
045503             0008*   ; restores to player_max_shields when new ship spawns
045503 10 00 00    0009*   player_shields: dl 16 ; integer
045506             0010*   ; max player shields,binary
045506             0011*   ; can increase with power-ups (todo)
045506 10 00 00    0012*   player_max_shields: dl 16 ; integer
045509             0013*   ; when reaches zero,game ends
045509             0014*   ; can increase based on TODO
045509 03          0015*   player_ships: db 3 ; integer
04550A             0016*   
04550A             0017*   speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
04550A             0018*   
04550A 00          0019*   player_weapons_count: db 0
04550B             0020*   player_weapons_max: equ 4
04550B             0021*   
04550B             0022*   player_defaults:
04550B 05          0023*       db player               ; type
04550C 2B 01 00    0024*       dl BUF_SHIP_0L          ; base_bufferId
04550F E0 59 04    0025*       dl do_player            ; move_program
045512 00          0026*       db 0                    ; collisions
045513 10          0027*       db 16                   ; dim_x
045514 10          0028*       db 16                   ; dim_y
045515 01          0029*       db 1                    ; num_orientations
045516 01          0030*       db 1                    ; num_animations
045517 00          0031*       db 0                    ; animation
045518 00          0032*       db 0                    ; animation_timer
045519 00          0033*       db 0                    ; move_timer
04551A 00          0034*       db 0                    ; move_step
04551B 00          0035*       db 0                    ; points
04551C 00          0036*       db 0                    ; shield_damage
04551D 00          0037*       db 0                    ; frame
04551E             0038*   
04551E             0039*   
04551E             0040*   ; set initial player position
04551E             0041*   ; inputs: none,everything is hardcoded
04551E             0042*   ; outputs: player_x/y set to bottom-left corner of screen
04551E             0043*   ; destroys: a
04551E             0044*   player_init:
04551E FD 21 00 61 0045*       ld iy,player_begin
       04          
045523 FD 22 00 62 0046*       ld (table_pointer),iy
       04          
045528 FD 7E 00    0047*       ld a,(iy+sprite_id)
04552B CD 00 1F 04 0048*       call vdu_sprite_select
04552F CD 13 1F 04 0049*       call vdu_sprite_clear_frames
045533 21 2B 01 00 0050*       ld hl,BUF_SHIP_0L
045537 CD 55 20 04 0051*       call vdu_sprite_add_buff
04553B 21 2C 01 00 0052*       ld hl,BUF_SHIP_1C
04553F CD 55 20 04 0053*       call vdu_sprite_add_buff
045543 21 2D 01 00 0054*       ld hl,BUF_SHIP_2R
045547 CD 55 20 04 0055*       call vdu_sprite_add_buff
04554B 01 00 00 00 0056*       ld bc,0
04554F FD 0F 01    0057*       ld (iy+sprite_x),bc
045552 11 00 6F 01 0058*       ld de,sprite_bottom*256 ; max sprite y-coordinate
045556 FD 1F 04    0059*       ld (iy+sprite_y),de
045559 CD CC 1F 04 0060*       call vdu_sprite_move_abs168
04555D CD 76 1F 04 0061*       call vdu_sprite_show
045561 21 EB 59 04 0062*       ld hl,player_alive
045565 22 DD 59 04 0063*       ld (player_state),hl
045569 FD CB 1D F6 0064*       set sprite_alive,(iy+sprite_collisions)
04556D C9          0065*       ret
04556E             0066*   
04556E             0067*   ; process player keyboard input, set player bitmap
04556E             0068*   ; velocities and draw player bitmap at updated coordinates
04556E             0069*   ; Inputs: player_x/y set at desired position
04556E             0070*   ; Returns: player bitmap drawn at updated position
04556E             0071*   ; Destroys: probably everything except maybe iy
04556E             0072*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
04556E             0073*   ; TODO: requires sprite implementation
04556E             0074*   player_input:
04556E FD 21 00 61 0075*       ld iy,player_begin
       04          
045573 FD 22 00 62 0076*       ld (table_pointer),iy
       04          
045578             0077*   ; ; did we die last frame?
045578             0078*   ;     ld a,(player_collisions)
045578             0079*   ;     and %00000010 ; zero flag will be set if not dead
045578             0080*   ;     jr z,player_not_dead
045578             0081*   ; ; yes we died
045578             0082*   ;     call kill_player
045578             0083*   ;     ret ; done
045578             0084*   player_not_dead: ; yay we didn't die
045578             0085*   ; reset player component velocities to zero as the default
045578 21 00 00 00 0086*       ld hl,0
04557C FD 2F 07    0087*       ld (iy+sprite_xvel),hl
04557F FD 2F 0A    0088*       ld (iy+sprite_yvel),hl
045582             0089*   ; make ship the active sprite
045582 FD 7E 00    0090*       ld a,(iy+sprite_id)
045585 CD 00 1F 04 0091*       call vdu_sprite_select
045589             0092*   ; check for keypresses and branch accordingly
045589             0093*   ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
045589             0094*       MOSCALL    mos_getkbmap ;ix = pointer to MOS virtual keys table
045589 3E 1E       0001*M1 			LD	A, function
04558B 5B CF       0002*M1 			RST.LIL	08h
04558D             0095*   ; we test all four arrow keys and add/subract velocities accordingly
04558D             0096*   ; this handles the case where two opposing movement keys
04558D             0097*   ; are down simultaneously (velocities will net to zero)
04558D             0098*   ; and allows diagonal movement when a vertical and horizontal key are down
04558D             0099*   ; it also allows movement and action keys to be detected simultaneously
04558D             0100*   ; so we can walk and chew gum at the same time
04558D 3E 01       0101*       ld a,1 ; set ship's default animation to center
04558F             0102*           ; if left and right are both down a will net to
04558F             0103*   
04558F             0104*   ; 99 Space: fire main weapon
04558F DD CB 0C 56 0105*       bit 2,(ix+12)
045593 F5          0106*       push af ; save flags for after player movement processed
045594             0107*   ; 26 Left: move player left
045594 DD CB 03 4E 0108*       bit 1,(ix+3)
045598 CA A8 55 04 0109*       jp z,@F
04559C FD 27 07    0110*       ld hl,(iy+sprite_xvel)
04559F 01 00 FD FF 0111*       ld bc,-speed_player
0455A3 09          0112*       add hl,bc
0455A4 FD 2F 07    0113*       ld (iy+sprite_xvel),hl
0455A7 3D          0114*       dec a ; set ship's animation to left
0455A8             0115*   @@:
0455A8             0116*   ; 122 Right: move player right
0455A8 DD CB 0F 4E 0117*       bit 1,(ix+15)
0455AC CA BC 55 04 0118*       jp z,@F
0455B0 FD 27 07    0119*       ld hl,(iy+sprite_xvel)
0455B3 01 00 03 00 0120*       ld bc,speed_player
0455B7 09          0121*       add hl,bc
0455B8 FD 2F 07    0122*       ld (iy+sprite_xvel),hl
0455BB 3C          0123*       inc a ; set ship's animation to right
0455BC             0124*   @@:
0455BC             0125*   ; 58 Up: move player up
0455BC DD CB 07 4E 0126*       bit 1,(ix+7)
0455C0 CA CF 55 04 0127*       jp z,@F
0455C4 FD 27 0A    0128*       ld hl,(iy+sprite_yvel)
0455C7 01 00 FD FF 0129*       ld bc,-speed_player
0455CB 09          0130*       add hl,bc
0455CC FD 2F 0A    0131*       ld (iy+sprite_yvel),hl
0455CF             0132*   @@:
0455CF             0133*   ; 42 Down: move player down
0455CF DD CB 05 4E 0134*       bit 1,(ix+5)
0455D3 CA E2 55 04 0135*       jp z,@F
0455D7 FD 27 0A    0136*       ld hl,(iy+sprite_yvel)
0455DA 01 00 03 00 0137*       ld bc,speed_player
0455DE 09          0138*       add hl,bc
0455DF FD 2F 0A    0139*       ld (iy+sprite_yvel),hl
0455E2             0140*   @@:
0455E2             0141*   ; a should land here loaded with the correct frame
0455E2 CD 63 1F 04 0142*       call vdu_sprite_select_frame
0455E6             0143*   ; draw player at updated position
0455E6 FD 21 00 61 0144*       ld iy,player_begin
       04          
0455EB FD 22 00 62 0145*       ld (table_pointer),iy
       04          
0455F0 CD B3 62 04 0146*       call move_sprite
0455F4 FD 07 01    0147*       ld bc,(iy+sprite_x)
0455F7 FD 17 04    0148*       ld de,(iy+sprite_y)
0455FA CD CC 1F 04 0149*       call vdu_sprite_move_abs168
0455FE             0150*   ; process player laser fire
0455FE F1          0151*       pop af ; restore flags from spacebar check
0455FF C2 91 57 04 0152*       jp nz,player_spawn_laser ; will return to caller from there
045603 C9          0153*       ret
045604             0154*   ; end player_input
045604             0155*   
045604             0156*   score_x: equ 48
045604             0157*   score_y: equ 1
045604             0158*   ; prints the player's score
045604             0159*   print_score:
045604 0E 30       0160*       ld c,score_x
045606 06 01       0161*       ld b,score_y
045608 CD 37 19 04 0162*       call vdu_move_cursor
04560C             0163*   ; TODO: make this part of the UI setup and only print as needed
04560C CD 10 01 04 0164*       call printInline
045610 53 63 6F 72 0165*       asciz "Score:"
       65 3A 00    
045617             0166*   ; END TODO
045617 2A 00 55 04 0167*       ld hl,(player_score)
04561B CD 16 02 04 0168*       call printDec
04561F C9          0169*       ret
045620             0170*   ; end print_score
045620             0171*   
045620             0172*   ; ###################################################################
045620             0173*   ; TODO: the below is all stuff from the original code we need to port
045620             0174*   ; ###################################################################
045620             0175*   
045620             0176*   kill_player:
045620             0177*   ; ; set player status to dead
045620             0178*   ;     xor a; sets all player flags to zero
045620             0179*   ;     ld (player_collisions),a
045620             0180*   ; ; deduct a ship from the inventory
045620             0181*   ;     ld a,(player_ships)
045620             0182*   ;     dec a
045620             0183*   ;     ld (player_ships),a
045620             0184*   ; ; are we out of ships?
045620             0185*   ;     jp z,game_over
045620             0186*   ; ; wait a few ticks
045620             0187*   ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
045620             0188*   ;     ld (player_move_timer),a
045620             0189*   ; kill_player_loop:
045620             0190*   ;     call vdu_vblank
045620             0191*   ;     ld a,(player_move_timer)
045620             0192*   ;     dec a
045620             0193*   ;     ld (player_move_timer),a
045620             0194*   ;     jr nz,kill_player_loop
045620             0195*   ;     call player_init ; player respawn if timer zero
045620 C9          0196*       ret ; and out
045621             0197*   
045621             0198*   ; draws the player's shields level
045621             0199*   ; draw_shields:
045621             0200*   ; TODO: Agonize this routine
045621             0201*   ; ; prep the loop to draw the bars
045621             0202*   ;     ld a,(player_shields) ; snag shields
045621             0203*   ;     and a
045621             0204*   ;     ret z ; don't draw if zero shields
045621             0205*   ; ; set loop counter and drawing position
045621             0206*   ;     ld b,a ; loop counter
045621             0207*   ;     ld hl,#5300+48+12
045621             0208*   ; ; set color based on bars remaining
045621             0209*   ;     ld c,103 ; bright green 28fe0a
045621             0210*   ;     cp 9
045621             0211*   ;     jp p,draw_shields_loop
045621             0212*   ;     ld c,74 ; bright yellow eafe5b
045621             0213*   ;     cp 3
045621             0214*   ;     jp p,draw_shields_loop
045621             0215*   ;     ld c,28 ; bright red fe0a0a
045621             0216*   ; draw_shields_loop:
045621             0217*   ;     push bc ; yup,outta
045621             0218*   ;     push hl ; registers again
045621             0219*   ;     ; ld a,#A8 ; ▀,168
045621             0220*   ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
045621             0221*   ;     ; call draw_char
045621             0222*   ;     call draw_num ; we nuked draw_char for the time being
045621             0223*   ;     pop hl
045621             0224*   ;     ld a,8
045621             0225*   ;     add a,l
045621             0226*   ;     ld l,a
045621             0227*   ;     pop bc
045621             0228*   ;     djnz draw_shields_loop
045621             0229*       ; ret
045621             0230*   
045621             0231*   
045621             0232*   ; draw_lives:
045621             0233*   ;     ld hl,player_small ; make small yellow ship the active sprite
045621             0234*   ;     ld (sprite_base_bufferId),hl
045621             0235*   ;     ; ld a,#80 ; northern orientation
045621             0236*   ;     ; ld (sprite_orientation),a
045621             0237*   ;     ld hl,0 ; north
045621             0238*   ;     ld (sprite_heading),hl
045621             0239*   ;     xor a
045621             0240*   ;     ld (sprite_frame),a
045621             0241*   ;     ld a,#56 ; top of visible screen
045621             0242*   ;     ld (sprite_y+1),a
045621             0243*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
045621             0244*   ;     ld a,(player_ships)
045621             0245*   ;     dec a ; we draw one fewer ships than lives
045621             0246*   ;     ret z ; nothing to draw here, move along
045621             0247*   ;     ld b,a ; loop counter
045621             0248*   ;     ld a,256-16 ; initial x position
045621             0249*   ; draw_lives_loop:
045621             0250*   ;     ld (sprite_x+1),a
045621             0251*   ;     push af
045621             0252*   ;     push bc
045621             0253*   ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
045621             0254*   ;     pop bc
045621             0255*   ;     pop af
045621             0256*   ;     sub 10
045621             0257*   ;     djnz draw_lives_loop
045621             0258*   ;     ret
045621             0059        include "player_laser.inc"
045621 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
045700             0002*   speed_laser: equ 4*256 ; 6 pixels per frame 16.8 fixed
045700             0003*   tmr_laser: ds 6 ; rate timer for firing laser
       FF FF FF FF 
       FF FF 
045706 28 00 00    0004*   tmr_laser_reset: dl 120/3
045709             0005*   laser_animation_timer_reset: equ 2 ; animate every two frames
045709             0006*   
045709             0007*   
045709             0008*   laser_defaults:
045709 06          0009*       db player_air        ; type
04570A 08 01 00    0010*       dl BUF_LASER_A	    ; base_bufferId
04570D EC 57 04    0011*       dl move_player_laser	; move_program
045710 00          0012*       db 0 ; collisions
045711 05          0013*       db 5	                ; dim_x
045712 0D          0014*       db 13                   ; dim_y
045713 01          0015*       db 1                    ; num_orientations
045714 02          0016*       db 2                    ; num_animations
045715 00          0017*       db 0	                ; animation
045716 02          0018*       db laser_animation_timer_reset ; animation_timer
045717 00          0019*       db 0	                ; move_timer
045718 00          0020*       db 0	                ; move_step
045719 00          0021*       db 0	                ; points
04571A 00          0022*       db 0	                ; shield_damage
04571B 00          0023*       db 0                    ; frame
04571C             0024*   
04571C             0025*   laser_control:
04571C             0026*   
04571C             0027*   move_weapons:
04571C             0028*   ; initialize pointers and loop counter
04571C FD 21 00 60 0029*       ld iy,player_weapons_begin ; set iy to first record in table
       04          
045721             0030*       ; PUSH_ALL
045721             0031*       ; ; call vdu_home_cursor
045721             0032*       ; ; call dumpRegistersHex
045721             0033*       ; CALL DEBUG_PRINT_TABLE
045721             0034*       ; ; CALL DEBUG_WAITKEYPRESS
045721             0035*       ; POP_ALL
045721             0036*   
045721 06 04       0037*       ld b,player_weapons_max ; loop counter
045723             0038*   @move_loop:
045723 FD 22 00 62 0039*       ld (table_pointer),iy ; update table pointer
       04          
045728 C5          0040*       push bc ; backup loop counter
045729             0041*   ; check top bit of sprite_type to see if sprite is just spawned
045729 FD 7E 16    0042*       ld a,(iy+sprite_type)
04572C CB 7F       0043*       bit 7,a
04572E C2 56 57 04 0044*       jp nz,@next_record ; if just spawned, skip to next record
045732             0045*   ; check sprite_type to see if sprite is active
045732 A7          0046*       and a ; if zero, sprite is dead
045733 CA 56 57 04 0047*       jp z,@next_record ; ... and we skip to next record
045737             0048*   ; otherwise we prepare to move the sprite
045737 FD 27 1A    0049*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
04573A             0050*       callHL
04573A 01 40 57 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
04573E C5          0002*M1     push bc ; which constitutes the return address
04573F E9          0003*M1     jp (hl) ; Jump to the address in HL
045740             0004*M1 @@:
045740             0051*   ; move_weapons_loop_return: return from behavior subroutines
045740 FD 2A 00 62 0052*       ld iy,(table_pointer) ; get back table pointer
       04          
045745             0053*   ; ; now we check results of all the moves
045745             0054*   ;     bit sprite_just_died,(iy+sprite_collisions)
045745             0055*   ;     jp z,@draw_sprite ; if not dead, draw sprite
045745             0056*   ;     call table_deactivate_sprite
045745             0057*   ;     jp @next_record ; and to the next record
045745             0058*   @draw_sprite:
045745 FD 7E 00    0059*       ld a,(iy+sprite_id) ; get spriteId
045748 CD 00 1F 04 0060*       call vdu_sprite_select ; select sprite
04574C FD 07 01    0061*       ld bc,(iy+sprite_x)
04574F FD 17 04    0062*       ld de,(iy+sprite_y)
045752 CD CC 1F 04 0063*       call vdu_sprite_move_abs168
045756             0064*   ; fall through to @next_record
045756             0065*   @next_record:
045756 ED 33 40    0066*       lea iy,iy+table_record_size
045759 AF          0067*       xor a ; clears carry flag
04575A 32 04 62 04 0068*       ld (sprite_screen_edge),a ; clear screen edge collision flag
04575E C1          0069*       pop bc ; get back our loop counter
04575F 10 C2       0070*       djnz @move_loop ; loop until we've checked all the records
045761             0071*   ; reset all just spawned flags
045761 FD 21 00 60 0072*       ld iy,player_weapons_begin
       04          
045766 06 04       0073*       ld b,player_weapons_max ; loop counter
045768             0074*   @reset_just_spawned:
045768 C5          0075*       push bc ; back up loop counter
045769 FD CB 16 7E 0076*       bit 7,(iy+sprite_type) ; check if just spawned
04576D CA 8A 57 04 0077*       jp z,@F
045771 FD CB 16 BE 0078*       res 7,(iy+sprite_type) ; clear just spawned flag
045775 FD 7E 00    0079*       ld a,(iy+sprite_id)
045778 CD 00 1F 04 0080*       call vdu_sprite_select
04577C FD 07 01    0081*       ld bc,(iy+sprite_x)
04577F FD 17 04    0082*       ld de,(iy+sprite_y)
045782 CD CC 1F 04 0083*       call vdu_sprite_move_abs168
045786 CD 76 1F 04 0084*       call vdu_sprite_show
04578A             0085*   @@:
04578A ED 33 40    0086*       lea iy,iy+table_record_size
04578D C1          0087*       pop bc ; get back loop counter
04578E 10 D8       0088*       djnz @reset_just_spawned
045790 C9          0089*       ret
045791             0090*   ; end laser_control
045791             0091*   
045791             0092*   player_spawn_laser:
045791             0093*   ; check laser spawn timer
045791 FD 21 00 57 0094*       ld iy,tmr_laser
       04          
045796 CD 21 18 04 0095*       call timestamp_tmr_get
04579A F0          0096*       ret p ; not time to fire
04579B             0097*   ; check if at max weapons active
04579B 3A 0A 55 04 0098*       ld a,(player_weapons_count)
04579F FE 04       0099*       cp player_weapons_max
0457A1 C8          0100*       ret z ; at max weapons active
0457A2 3C          0101*       inc a
0457A3 32 0A 55 04 0102*       ld (player_weapons_count),a
0457A7             0103*   ; reset timer
0457A7 2A 06 57 04 0104*       ld hl,(tmr_laser_reset)
0457AB CD 16 18 04 0105*       call timestamp_tmr_set
0457AF             0106*   ; fire the laser
0457AF DD 21 00 60 0107*       ld ix,player_weapons_begin
       04          
0457B4 06 04       0108*       ld b,player_weapons_max
0457B6 FD 21 00 61 0109*       ld iy,player_begin
       04          
0457BB FD 22 00 62 0110*       ld (table_pointer),iy
       04          
0457C0 21 09 57 04 0111*       ld hl,laser_defaults
0457C4 CD CB 65 04 0112*       call spawn_sprite_from_sprite_new
0457C8 D0          0113*       ret nc ; no carry means no free sprite slots, so we go home
0457C9             0114*   ; other specific initialization
0457C9             0115*   ; ------------------------------------------------
0457C9 FD 21 00 61 0116*       ld iy,player_begin
       04          
0457CE             0117*   ; x-coordinate
0457CE FD 27 01    0118*       ld hl,(iy+sprite_x)
0457D1 11 00 05 00 0119*       ld de,5*256 ; horizontal center with player sprite
0457D5 19          0120*       add hl,de
0457D6 DD 2F 01    0121*       ld (ix+sprite_x),hl
0457D9             0122*   ; y-coordinate
0457D9 FD 27 04    0123*       ld hl,(iy+sprite_y)
0457DC 11 00 FA FF 0124*       ld de,-6*256 ; set laser y a few pixels above player
0457E0 19          0125*       add hl,de
0457E1 DD 2F 04    0126*       ld (ix+sprite_y),hl
0457E4             0127*   ; set laser velocity
0457E4 21 00 FC FF 0128*       ld hl,-speed_laser
0457E8 DD 2F 0A    0129*       ld (ix+sprite_yvel),hl
0457EB C9          0130*       ret
0457EC             0131*   ; end player_spawn_laser
0457EC             0132*   
0457EC             0133*   move_player_laser:
0457EC             0134*   ; run the movement program for the laser player
0457EC CD B3 62 04 0135*       call move_sprite
0457F0 3A 04 62 04 0136*       ld a,(sprite_screen_edge)
0457F4 B7          0137*       or a ; a will be non-zero if have scrolled off screen
0457F5 CA 02 58 04 0138*       jp z,@F ; still on screen
0457F9 21 0A 55 04 0139*       ld hl,player_weapons_count
0457FD 35          0140*       dec (hl)
0457FE C3 5C 62 04 0141*       jp table_deactivate_sprite
045802             0142*   @@: ; check animation timer
045802 FD 35 23    0143*       dec (iy+sprite_animation_timer)
045805 C2 19 58 04 0144*       jp nz,@F
045809 3E 02       0145*       ld a,laser_animation_timer_reset
04580B FD 77 23    0146*       ld (iy+sprite_animation_timer),a
04580E FD 7E 00    0147*       ld a,(iy+sprite_id)
045811 CD 00 1F 04 0148*       call vdu_sprite_select
045815 CD 47 1F 04 0149*       call vdu_sprite_next_frame
045819             0150*   @@: ; all done
045819 C9          0151*       ret
04581A             0152*   ; end move_player_laser
04581A             0153*   
04581A             0154*   init_player_laser:
04581A             0155*   ; set pointer to laser sprite table
04581A FD 21 00 60 0156*       ld iy,player_weapons_begin
       04          
04581F FD 7E 00    0157*       ld a,(iy+sprite_id) ; loop counter / sprite id
045822             0158*   ; define laser sprites
045822             0159*   @loop:
045822 F5          0160*       push af
045823 CD 00 1F 04 0161*   	call vdu_sprite_select
045827 CD 13 1F 04 0162*   	call vdu_sprite_clear_frames
04582B 21 08 01 00 0163*   	ld hl,BUF_LASER_A
04582F 06 02       0164*   	ld b,2 ; two bitmaps for laser
045831             0165*   @sprite_laser_loop:
045831 C5          0166*   	push bc
045832 E5          0167*   	push hl
045833 CD 55 20 04 0168*   	call vdu_sprite_add_buff
045837 E1          0169*   	pop hl
045838 23          0170*   	inc hl
045839 C1          0171*   	pop bc
04583A 10 F5       0172*   	djnz @sprite_laser_loop
04583C F1          0173*       pop af ; restore loop counter / sprite id
04583D 3C          0174*       inc a
04583E FE 04       0175*       cp player_weapons_max
045840 C2 22 58 04 0176*       jp nz,@loop
045844             0177*   ; set laser firing timer to zero
045844 FD 21 00 57 0178*       ld iy,tmr_laser
       04          
045849 21 00 00 00 0179*       ld hl,0
04584D CD 16 18 04 0180*       call timestamp_tmr_set
045851 C9          0181*       ret
045852             0060        include "state.inc"
045852 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
045900             0002*   
045900             0003*   ; Game state variables
045900 0E 59 04    0004*   game_state:  dl game_main_menu
045903             0005*   
045903             0006*   do_game:
045903 2A 00 59 04 0007*       ld hl,(game_state)   ; Load the current game state
045907             0008*       callHL                ; Call the corresponding state handler
045907 01 0D 59 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
04590B C5          0002*M1     push bc ; which constitutes the return address
04590C E9          0003*M1     jp (hl) ; Jump to the address in HL
04590D             0004*M1 @@:
04590D C9          0009*       ret
04590E             0010*   
04590E             0011*   ; ========================
04590E             0012*   ; Main Game States
04590E             0013*   ; ========================
04590E             0014*   
04590E             0015*   game_main_menu:
04590E             0016*       ; Handle main menu options
04590E             0017*       ; Example: Check input for "Start Game"
04590E CD 0F 5A 04 0018*       call check_input_menu
045912 C2 17 59 04 0019*       jp nz, game_initialize ; Start game on selection
045916 C9          0020*       ret
045917             0021*   
045917             0022*   game_initialize:
045917             0023*   ; reset the sprite table
045917 CD 26 62 04 0024*       call table_init
04591B AF          0025*       xor a
04591C 32 03 62 04 0026*       ld (table_active_sprites),a
045920 21 00 60 04 0027*       ld hl,table_base
045924 22 00 62 04 0028*       ld (table_pointer),hl
045928             0029*   ; initialize sprites
045928 CD 71 62 04 0030*       call sprites_init
04592C             0031*   ; initialize the first level
04592C 3E 00       0032*       ld a,tiles_dg
04592E CD 1A 52 04 0033*       call init_tileset
045932             0034*   ; initialize player
045932 21 00 00 00 0035*       ld hl,0
045936 22 00 55 04 0036*       ld (player_score),hl
04593A 2A 06 55 04 0037*       ld hl,(player_max_shields)
04593E 22 03 55 04 0038*       ld (player_shields),hl
045942 3E 03       0039*       ld a,3
045944 32 09 55 04 0040*       ld (player_ships),a
045948 CD 1E 55 04 0041*       call player_init
04594C             0042*   ; ; TODO: TEMPORARY UNTIL MAP LOGIC IMPLEMENTED
04594C             0043*   ;     ld hl,enemies_dead
04594C             0044*   ;     ld (enemies_state),hl
04594C             0045*   ; ; END TODO
04594C             0046*   ; set the game state to playing
04594C 21 55 59 04 0047*       ld hl,game_playing
045950 22 00 59 04 0048*       ld (game_state), hl
045954             0049*   ; done initializing
045954 C9          0050*       ret
045955             0051*   
045955             0052*   game_playing:
045955             0053*   ; Main gameplay loop
045955             0054*       ; call tiles_plot
045955             0055*   
045955             0056*   ; set gfx origin and viewport to playing field window
045955 01 80 00 00 0057*       ld bc,origin_left
045959 11 00 00 00 0058*       ld de,origin_top
04595D CD D0 19 04 0059*       call vdu_set_gfx_origin
045961 01 00 00 00 0060*       ld bc,field_left
045965 11 00 00 00 0061*       ld de,field_top
045969 DD 21 FF 00 0062*       ld ix,field_right
       00          
04596E FD 21 7F 01 0063*       ld iy,field_bottom
       00          
045973 CD EB 19 04 0064*       call vdu_set_gfx_viewport
045977             0065*   
045977 CD E0 59 04 0066*       call do_player
04597B             0067*       ; call do_enemies
04597B             0068*   ; update UI: TODO make this a standalone function
04597B CD 04 56 04 0069*       call print_score
04597F C9          0070*       ret
045980             0071*   
045980             0072*   game_paused:
045980             0073*       ; Pause menu logic
045980 CD 12 5A 04 0074*       call check_input_pause
045984 C2 55 59 04 0075*       jp nz, game_playing ; Resume game
045988 CA 0E 59 04 0076*       jp z, game_main_menu ; Exit to main menu
04598C C9          0077*       ret
04598D             0078*   
04598D             0079*   game_level_transition:
04598D             0080*       ; Handle level transitions
04598D CD 13 5A 04 0081*       call load_next_level
045991 21 55 59 04 0082*       ld hl, game_playing
045995 22 00 59 04 0083*       ld (game_state), hl
045999 C9          0084*       ret
04599A             0085*   
04599A             0086*   game_over:
04599A             0087*       ; Display game over screen
04599A CD 14 5A 04 0088*       call display_game_over
04599E C2 0E 59 04 0089*       jp nz, game_main_menu ; Return to main menu on input
0459A2 C9          0090*       ret
0459A3             0091*   
0459A3             0092*   game_victory:
0459A3             0093*       ; Display victory screen
0459A3 CD 15 5A 04 0094*       call display_victory
0459A7 C2 0E 59 04 0095*       jp nz, game_main_menu ; Return to main menu on input
0459AB C9          0096*       ret
0459AC             0097*   
0459AC             0098*   ; ========================
0459AC             0099*   ; Supporting States
0459AC             0100*   ; ========================
0459AC             0101*   
0459AC             0102*   game_loading:
0459AC             0103*       ; Show loading screen while preparing assets
0459AC CD 16 5A 04 0104*       call load_resources
0459B0 21 17 59 04 0105*       ld hl, game_initialize
0459B4 22 00 59 04 0106*       ld (game_state), hl
0459B8 C9          0107*       ret
0459B9             0108*   
0459B9             0109*   game_cutscene:
0459B9             0110*       ; Play a non-interactive cutscene
0459B9 CD 17 5A 04 0111*       call play_cutscene
0459BD C2 55 59 04 0112*       jp nz, game_playing ; Return to gameplay after cutscene
0459C1 C9          0113*       ret
0459C2             0114*   
0459C2             0115*   game_inventory:
0459C2             0116*       ; Open inventory or shop
0459C2 CD 18 5A 04 0117*       call display_inventory
0459C6 C2 55 59 04 0118*       jp nz, game_playing ; Return to gameplay after inventory close
0459CA C9          0119*       ret
0459CB             0120*   
0459CB             0121*   game_map:
0459CB             0122*       ; Display map or quest
0459CB CD 19 5A 04 0123*       call display_map
0459CF C2 55 59 04 0124*       jp nz, game_playing ; Return to gameplay after map close
0459D3 C9          0125*       ret
0459D4             0126*   
0459D4             0127*   game_exit:
0459D4             0128*       ; Handle exit logic
0459D4 CD 1A 5A 04 0129*       call save_game
0459D8 C3 1B 5A 04 0130*       jp exit_game         ; Safely shut down
0459DC C9          0131*       ret
0459DD             0132*   
0459DD             0133*   ; ========================
0459DD             0134*   ; Sub-state branching (Example for player state)
0459DD             0135*   ; ========================
0459DD             0136*   
0459DD EB 59 04    0137*   player_state:  dl player_alive ; Player state variable
0459E0             0138*   
0459E0             0139*   do_player:
0459E0 2A DD 59 04 0140*       ld hl,(player_state)
0459E4             0141*       callHL                ; Call the corresponding player state
0459E4 01 EA 59 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
0459E8 C5          0002*M1     push bc ; which constitutes the return address
0459E9 E9          0003*M1     jp (hl) ; Jump to the address in HL
0459EA             0004*M1 @@:
0459EA C9          0142*       ret
0459EB             0143*   
0459EB             0144*   player_alive:
0459EB CD 6E 55 04 0145*       call player_input     ; Handle player input
0459EF CD 1C 57 04 0146*       call laser_control    ; Handle laser movement and collision detection
0459F3 C9          0147*       ret
0459F4             0148*   
0459F4             0149*   player_dead:
0459F4 CD 1C 57 04 0150*       call laser_control    ; Handle laser movement and collision detection
0459F8 C9          0151*       ret
0459F9             0152*   
0459F9             0153*   do_enemies:
0459F9 2A 04 5A 04 0154*       ld hl,(enemies_state)
0459FD             0155*       callHL
0459FD 01 03 5A 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
045A01 C5          0002*M1     push bc ; which constitutes the return address
045A02 E9          0003*M1     jp (hl) ; Jump to the address in HL
045A03             0004*M1 @@:
045A03 C9          0156*       ret
045A04 0A 5A 04    0157*   enemies_state: dl enemies_alive
045A07             0158*   
045A07             0159*   enemies_dead:
045A07 C9          0160*       ret
045A08             0161*   
045A08             0162*   enemies_respawning:
045A08 C9          0163*       ret
045A09             0164*   
045A09             0165*   enemies_respawn:
045A09 C9          0166*       ret
045A0A             0167*   
045A0A             0168*   enemies_alive:
045A0A CD 33 21 04 0169*       call move_enemies
045A0E C9          0170*       ret
045A0F             0171*   
045A0F             0172*   check_input_menu:
045A0F C9          0173*       ret
045A10             0174*   
045A10             0175*   update_game_world:
045A10 C9          0176*       ret
045A11             0177*   
045A11             0178*   check_game_events:
045A11 C9          0179*       ret
045A12             0180*   
045A12             0181*   check_input_pause:
045A12 C9          0182*       ret
045A13             0183*   
045A13             0184*   load_next_level:
045A13 C9          0185*       ret
045A14             0186*   
045A14             0187*   display_game_over:
045A14 C9          0188*       ret
045A15             0189*   
045A15             0190*   display_victory:
045A15 C9          0191*       ret
045A16             0192*   
045A16             0193*   load_resources:
045A16 C9          0194*       ret
045A17             0195*   
045A17             0196*   play_cutscene:
045A17 C9          0197*       ret
045A18             0198*   
045A18             0199*   display_inventory:
045A18 C9          0200*       ret
045A19             0201*   
045A19             0202*   display_map:
045A19 C9          0203*       ret
045A1A             0204*   
045A1A             0205*   save_game:
045A1A C9          0206*       ret
045A1B             0207*   
045A1B             0208*   exit_game:
045A1B C9          0209*       ret
045A1C             0210*   
045A1C             0061        include "targeting.inc"
045A1C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
045B00             0002*   
045B00             0003*   ; compute orientation to player
045B00             0004*   ; based on relative positions
045B00             0005*   ; returns: h.l 16.8 fixed angle256 to player
045B00             0006*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
045B00             0007*   ;    representing delta-x/y *to* target respectively
045B00             0008*   orientation_to_player:
045B00 DD 21 00 61 0009*       ld ix,player_begin
       04          
045B05 FD 2A 00 62 0010*       ld iy,(table_pointer)
       04          
045B0A FD 07 01    0011*       ld bc,(iy+sprite_x)
045B0D FD 17 04    0012*       ld de,(iy+sprite_y)
045B10 DD 37 01    0013*       ld ix,(ix+sprite_x)
045B13 DD 31 04    0014*       ld iy,(ix+sprite_y)
045B16 CD 1C 0C 04 0015*       call dxy168
045B1A C5          0016*       push bc ; dx
045B1B D5          0017*       push de ; dy
045B1C CD 9D 0C 04 0018*       call atan2_168fast ; uh.l = angle to player
045B20 22 2C 5B 04 0019*       ld (Bearing_t),hl
045B24 D1          0020*       pop de ; dy
045B25 C1          0021*       pop bc ; dx
045B26 FD 2A 00 62 0022*       ld iy,(table_pointer)
       04          
045B2B C9          0023*       ret
045B2C             0024*   ; end orientation_to_player
045B2C             0025*   
045B2C             0026*   ; targeting_computer variables fixed 16.8 format
045B2C 00 00 00    0027*   Bearing_t: dl 0x000000 ; angle to target
045B2F 00 00 00    0028*   Heading_t: dl 0x000000 ; angle of target motion
045B32 00 00 00    0029*   Vp: dl 0x000000 ; velocity of projectile
045B35 00 00 00    0030*   Vp_x: dl 0x000000 ; x component of projectile velocity
045B38 00 00 00    0031*   Vp_y: dl 0x000000 ; y component of projectile velocity
045B3B 00 00 00    0032*   Vt: dl 0x000000 ; velocity of target
045B3E 00 00 00    0033*   Vt_x: dl 0x000000 ; x component of target velocity
045B41 00 00 00    0034*   Vt_y: dl 0x000000 ; y component of target velocity
045B44 00 00 00    0035*   Heading_p: dl 0x000000 ; angle of projectile motion
045B47 00 00 00    0036*   lead_angle: dl 0x000000 ; lead angle
045B4A             0037*   
045B4A             0038*   ; Inputs:   Vp velocity of projectile set,
045B4A             0039*   ;           IY pointed to sprite record,
045B4A             0040*   ;           player position and velocities correctly set
045B4A             0041*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
045B4A             0042*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
045B4A             0043*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
045B4A             0044*   targeting_computer:
045B4A DD 21 00 61 0045*       ld ix,player_begin
       04          
045B4F             0046*   ; ; compute target velocity from x,y component velocities
045B4F             0047*   ;     ld bc,(ix+sprite_xvel)
045B4F             0048*   ;     ld de,(ix+sprite_yvel)
045B4F             0049*   ;     ld hl,-1*256 ; account for vertical ground movement
045B4F             0050*   ;     add hl,de
045B4F             0051*   ;     ex de,hl ; ud.e = player_yvel-1
045B4F             0052*   ;     call cartesian_to_polar_sm ; uh.l = Heading_t, ud.e = Vt
045B4F             0053*   ;     ld (Heading_t),hl ; PASSES
045B4F             0054*   ;     ld (Vt),de ; PASSES
045B4F             0055*   ; ; Bearing_t should have been set by prerequisite call to orientation_to_player
045B4F             0056*   ; ; compute Heading_t-Bearing_t PASSES
045B4F             0057*   ;     ld de,(Bearing_t)
045B4F             0058*   ;     and a ; clear carry
045B4F             0059*   ;     sbc hl,de ; Uh.l = Heading_t-Bearing_t
045B4F             0060*   ; ; compute sin(Heading_t-Bearing_t)
045B4F             0061*   ;     call sin168 ; uh.l = sin(Heading_t-Bearing_t)
045B4F             0062*   ; ; compute (Vt*sin(Heading_t-Bearing_t))
045B4F             0063*   ;     ld de,(Vt)
045B4F             0064*   ;     call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
045B4F             0065*   ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
045B4F             0066*   ;     ld de,(Vp)
045B4F             0067*   ;     call sdiv168 ; ud.e = (Vt*sin(Heading_t-Bearing_t)) / Vp
045B4F             0068*   ;     ex de,hl ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
045B4F             0069*   ; ; answer is in radians, convert to degrees256
045B4F             0070*   ;     ld de,0x0028BE ; 40.74 = 57.29578*256/360
045B4F             0071*   ;     call smul168 ; uh.l = angle in degrees256
045B4F             0072*   ;     ld (lead_angle),hl ; DEBUG
045B4F             0073*   ; ; add lead angle to target bearing
045B4F             0074*   ;     ld de,(Bearing_t)
045B4F             0075*   ;     add hl,de ; h.l = lead angle+target bearing
045B4F E5          0076*       push hl
045B50             0077*   
045B50             0078*   ; compute component projectile velocities
045B50 ED 5B 32 5B 0079*       ld de,(Vp) ; Vp should have been set by caller
       04          
045B55 CD A9 0B 04 0080*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
045B59 ED 43 35 5B 0081*       ld (Vp_x),bc
       04          
045B5E ED 53 38 5B 0082*       ld (Vp_y),de
       04          
045B63 E1          0083*       pop hl ; uh.l = lead angle+target bearing
045B64 22 44 5B 04 0084*       ld (Heading_p),hl
045B68             0085*   
045B68 C9          0086*       ret
045B69             0087*   
045B69             0088*   ; debug print the results
045B69             0089*       PUSH_ALL
045B69 08          0001*M1     ex af,af'
045B6A D9          0002*M1     exx
045B6B F5          0003*M1     push af
045B6C E5          0004*M1     push hl
045B6D C5          0005*M1     push bc
045B6E D5          0006*M1     push de
045B6F             0007*M1 
045B6F 08          0008*M1     ex af,af'
045B70 D9          0009*M1     exx
045B71 F5          0010*M1     push af
045B72 E5          0011*M1     push hl
045B73 C5          0012*M1     push bc
045B74 D5          0013*M1     push de
045B75 DD E5       0014*M1     push ix
045B77 FD E5       0015*M1     push iy
045B79 CD 00 19 04 0090*       call vdu_home_cursor
045B7D CD 2C 01 04 0091*       call printNewLine
045B81 CD 10 01 04 0092*       call printInline
045B85 42 74 20 00 0093*       asciz "Bt "
045B89 2A 2C 5B 04 0094*       ld hl,(Bearing_t)
045B8D CD 38 03 04 0095*       call print_s168_hl
045B91             0096*   
045B91             0097*       ; call printInline
045B91             0098*       ; asciz "\r\nHt "
045B91             0099*       ; ld hl,(Heading_t)
045B91             0100*       ; call print_s168_hl
045B91             0101*   
045B91             0102*       ; call printInline
045B91             0103*       ; asciz "\r\nVt "
045B91             0104*       ; ld hl,(Vt)
045B91             0105*       ; call print_s168_hl
045B91             0106*   
045B91             0107*       ; call printInline
045B91             0108*       ; asciz "\r\nVtx"
045B91             0109*       ; ld hl,(ix+sprite_xvel)
045B91             0110*       ; call print_s168_hl
045B91             0111*   
045B91             0112*       ; call printInline
045B91             0113*       ; asciz "\r\nVty"
045B91             0114*       ; ld hl,(ix+sprite_yvel)
045B91             0115*       ; ld de,-1*256 ; account for vertical ground movement
045B91             0116*       ; add hl,de
045B91             0117*       ; call print_s168_hl
045B91             0118*   
045B91 CD 10 01 04 0119*       call printInline
045B95 0D 0A 4C 64 0120*       asciz "\r\nLda"
       61 00       
045B9B 2A 47 5B 04 0121*       ld hl,(lead_angle)
045B9F CD 38 03 04 0122*       call print_s168_hl
045BA3             0123*   
045BA3 CD 10 01 04 0124*       call printInline
045BA7 0D 0A 48 70 0125*       asciz "\r\nHp "
       20 00       
045BAD 2A 44 5B 04 0126*       ld hl,(Heading_p)
045BB1 CD 38 03 04 0127*       call print_s168_hl
045BB5             0128*   
045BB5             0129*       ; call printInline
045BB5             0130*       ; asciz "\r\nVp "
045BB5             0131*       ; ld hl,(Vp)
045BB5             0132*       ; call print_s168_hl
045BB5             0133*   
045BB5             0134*       ; call printInline
045BB5             0135*       ; asciz "\r\nVpx"
045BB5             0136*       ; ld hl,(Vp_x)
045BB5             0137*       ; call print_s168_hl
045BB5             0138*   
045BB5             0139*       ; call printInline
045BB5             0140*       ; asciz "\r\nVpy"
045BB5             0141*       ; ld hl,(Vp_y)
045BB5             0142*       ; call print_s168_hl
045BB5             0143*   
045BB5             0144*       POP_ALL
045BB5 FD E1       0001*M1     pop iy
045BB7 DD E1       0002*M1     pop ix
045BB9 D1          0003*M1     pop de
045BBA C1          0004*M1     pop bc
045BBB E1          0005*M1     pop hl
045BBC F1          0006*M1     pop af
045BBD 08          0007*M1     ex af,af'
045BBE D9          0008*M1     exx
045BBF             0009*M1 
045BBF D1          0010*M1     pop de
045BC0 C1          0011*M1     pop bc
045BC1 E1          0012*M1     pop hl
045BC2 F1          0013*M1     pop af
045BC3 08          0014*M1     ex af,af'
045BC4 D9          0015*M1     exx
045BC5 C9          0145*       ret
045BC6             0062        include "tiles.inc"
045BC6 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
045C00             0002*   
045C00             0003*   ; ######### TILES #########
045C00             0004*   ; TODO: implement buffering of tiles here when there isn't other stuff to do
045C00             0005*   ; tiles_defs: ds 256*16 ; 256 rows of 16 tiles, each tile is a byte
045C00 00 00 00    0006*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
045C03 00 00 00    0007*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
045C06             0008*       ; initialize to zero for a maximum of 256 rows in a level
045C06 00          0009*   tiles_cols: db 0 ; number of tile columns in the current level
045C07             0010*   
045C07 00 00 00    0011*   cur_baseBufferId: dl 0
045C0A 00 00 00    0012*   tiles_x_plot: dl 0
045C0D F1 FF FF    0013*   tiles_y_plot: dl -15
045C10             0014*   
045C10             0015*   tiles_plot:
045C10             0016*   ; set gfx viewport to playing field window
045C10 01 00 00 00 0017*       ld bc,field_left
045C14 11 00 00 00 0018*       ld de,field_top
045C18 DD 21 FF 00 0019*       ld ix,field_right
       00          
045C1D FD 21 7F 01 0020*       ld iy,field_bottom
       00          
045C22 CD EB 19 04 0021*       call vdu_set_gfx_viewport
045C26             0022*   ; move the background down one pixel
045C26 3E 02       0023*       ld a,2 ; current gfx viewport
045C28 2E 02       0024*       ld l,2 ; direction=down
045C2A 26 01       0025*       ld h,1 ; speed=1 px
045C2C CD 63 19 04 0026*       call vdu_scroll_down
045C30             0027*   ; set gfx viewport to one scanline to optimise plotting tiles
045C30 01 00 00 00 0028*       ld bc,0 ; leftmost x-coord
045C34 11 00 00 00 0029*       ld de,0 ; topmost y-coord
045C38 DD 21 FF 00 0030*       ld ix,255 ; rightmost x-coord
       00          
045C3D FD 21 00 00 0031*       ld iy,0 ; bottommost y-coord
       00          
045C42 CD EB 19 04 0032*       call vdu_set_gfx_viewport
045C46             0033*   ; ; plot the background
045C46             0034*   ;     call bg_plot
045C46             0035*   ; initialize tiles loop
045C46 21 00 00 00 0036*       ld hl,0 ; init plotting x-coordinate
045C4A 22 0A 5C 04 0037*       ld (tiles_x_plot),hl
045C4E 2A 00 5C 04 0038*       ld hl,(tiles_row_defs)
045C52 3A 06 5C 04 0039*       ld a,(tiles_cols)
045C56 47          0040*       ld b,a ; column loop counter
045C57             0041*   @loop:
045C57 C5          0042*       push bc ; save the loop counter
045C58             0043*   ; read the tile defintion for the current column
045C58 7E          0044*       ld a,(hl) ; a has tile definition
045C59 E5          0045*       push hl ; save pointer to tile definition
045C5A 2A 07 5C 04 0046*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
045C5E 6F          0047*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
045C5F CD 38 1A 04 0048*       call vdu_buff_select ; tile bitmap buffer is now active
045C63             0049*   ; plot the active bitmap
045C63 ED 4B 0A 5C 0050*       ld bc,(tiles_x_plot)
       04          
045C68 ED 5B 0D 5C 0051*       ld de,(tiles_y_plot)
       04          
045C6D CD 20 1E 04 0052*       call vdu_plot_bmp
045C71             0053*   ; bump x-coords the width of one tile and save it
045C71 2A 0A 5C 04 0054*       ld hl,(tiles_x_plot)
045C75 01 10 00 00 0055*       ld bc,16
045C79 09          0056*       add hl,bc
045C7A 22 0A 5C 04 0057*       ld (tiles_x_plot),hl
045C7E             0058*   ; prepare to loop to next column
045C7E E1          0059*       pop hl ; get back pointer to tile def
045C7F 23          0060*       inc hl ; bump it to the next column
045C80 C1          0061*       pop bc ; snag our loop counter
045C81 10 D4       0062*       djnz @loop
045C83             0063*   ; increment tiles plotting y-coordinate
045C83             0064*   ; (we use ix b/c we want to preserve hl for the next step)
045C83 DD 2A 0D 5C 0065*       ld ix,(tiles_y_plot)
       04          
045C88 11 01 00 00 0066*       ld de,1
045C8C DD 19       0067*       add ix,de
045C8E DD 22 0D 5C 0068*       ld (tiles_y_plot),ix
       04          
045C93 DD 7D       0069*       ld a,ixl
045C95 FE 01       0070*       cp 1
045C97 C0          0071*       ret nz
045C98             0072*   ; do active tiles
045C98 E5          0073*       push hl ; save pointer to next row tile def
045C99 CD CB 5C 04 0074*       call do_active_tiles
045C9D E1          0075*       pop hl ; get back pointer to next row tile def
045C9E             0076*   ; time to bump tiles_row_defs to next row
045C9E             0077*   ; (hl was already there at the end of the loop)
045C9E 22 00 5C 04 0078*       ld (tiles_row_defs),hl
045CA2             0079*   ; reset coords to plot next row of tiles
045CA2 21 00 00 00 0080*       ld hl,0
045CA6 22 0A 5C 04 0081*       ld (tiles_x_plot),hl
045CAA 21 F1 FF FF 0082*       ld hl,-15
045CAE 22 0D 5C 04 0083*       ld (tiles_y_plot),hl
045CB2             0084*   ; decrement tiles row counter
045CB2 21 03 5C 04 0085*       ld hl,tiles_row
045CB6 35          0086*       dec (hl)
045CB7 C0          0087*       ret nz
045CB8             0088*   @inc_level:
045CB8             0089*   ; increase the number of enemy sprites
045CB8 3A 32 21 04 0090*       ld a,(max_enemy_sprites)
045CBC 3C          0091*       inc a
045CBD FE 10       0092*       cp table_max_records ; if we're at the global limit,skip ahead at max level
045CBF CA 6C 52 04 0093*       jp z,next_level
045CC3 32 32 21 04 0094*       ld (max_enemy_sprites),a ; otherwise save the updated number
045CC7 C3 6C 52 04 0095*       jp next_level
045CCB             0096*   ; end tiles_plot
045CCB             0097*   
045CCB             0098*   do_active_tiles:
045CCB             0099*   ; initialize tiles loop
045CCB 21 00 00 00 0100*       ld hl,0 ; init plotting x-coordinate
045CCF 22 0A 5C 04 0101*       ld (tiles_x_plot),hl
045CD3 2A 00 5C 04 0102*       ld hl,(tiles_row_defs)
045CD7 3A 06 5C 04 0103*       ld a,(tiles_cols)
045CDB 47          0104*       ld b,a ; column loop counter
045CDC             0105*   @loop:
045CDC C5          0106*       push bc ; save the loop counter
045CDD             0107*   ; read the tile defintion for the current column
045CDD 7E          0108*       ld a,(hl) ; a has tile definition
045CDE E5          0109*       push hl ; save pointer to tile definition
045CDF B7          0110*       or a ; check for null tile
045CE0 CA FC 5C 04 0111*       jp z,@next_tile ; skip to next tile if null
045CE4 FE 11       0112*       cp 17 ; carry reset if active tile
045CE6 D2 FC 5C 04 0113*       jp nc,@next_tile ; skip to next tile if not active
045CEA             0114*   ; call the tile activation routine
045CEA 21 57 5D 04 0115*       ld hl,tile_activation_routines
045CEE 16 03       0116*       ld d,3 ; three bytes per table entry
045CF0 5F          0117*       ld e,a ; a is the tile type
045CF1 ED 5C       0118*       mlt de ; de is now the offset to the table entry
045CF3 19          0119*       add hl,de ; hl is now the address of the table entry
045CF4 ED 27       0120*       ld hl,(hl) ; hl is now the activation routine address
045CF6             0121*       callHL ; call the activation routine
045CF6 01 FC 5C 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
045CFA C5          0002*M1     push bc ; which constitutes the return address
045CFB E9          0003*M1     jp (hl) ; Jump to the address in HL
045CFC             0004*M1 @@:
045CFC             0122*   @next_tile:
045CFC             0123*   ; bump x-coords the width of one tile and save it
045CFC 2A 0A 5C 04 0124*       ld hl,(tiles_x_plot)
045D00 01 10 00 00 0125*       ld bc,16
045D04 09          0126*       add hl,bc
045D05 22 0A 5C 04 0127*       ld (tiles_x_plot),hl
045D09             0128*   ; prepare to loop to next column
045D09 E1          0129*       pop hl ; get back pointer to tile def
045D0A 23          0130*       inc hl ; bump it to the next column
045D0B C1          0131*       pop bc ; snag our loop counter
045D0C 10 CE       0132*       djnz @loop
045D0E C9          0133*       ret ; done
045D0F             0134*   ; end do_active_tiles
045D0F             0135*   
045D0F             0136*   ; create a new sprite at the same location as an active tile
045D0F             0137*   ; inputs: hl = pointer to new sprite default settings, tiles_x_plot, tiles_y_plot set
045D0F             0138*   spawn_sprite_from_tile:
045D0F CD 83 63 04 0139*       call spawn_sprite
045D13 D0          0140*       ret nc ; no carry means no free sprite slots, so we go home
045D14             0141*   ; update the new sprite's position and make it visible
045D14 2A 0A 5C 04 0142*       ld hl,(tiles_x_plot)
045D18             0143*       hlu_mul256
045D18 29          0001*M1     add hl,hl ; * 2
045D19 29          0002*M1     add hl,hl ; * 4
045D1A 29          0003*M1     add hl,hl ; * 8
045D1B 29          0004*M1     add hl,hl ; * 16
045D1C 29          0005*M1     add hl,hl ; * 32
045D1D 29          0006*M1     add hl,hl ; * 64
045D1E 29          0007*M1     add hl,hl ; * 128
045D1F 29          0008*M1     add hl,hl ; * 256
045D20 E5          0144*       push hl
045D21 C1          0145*       pop bc
045D22 DD 0F 01    0146*       ld (ix+sprite_x),bc
045D25 11 00 FF FF 0147*       ld de,-1*256 ; TODO: implement y-coord for reals
045D29 DD 1F 04    0148*       ld (ix+sprite_y),de
045D2C 21 00 01 00 0149*       ld hl,1*256
045D30 DD 2F 0A    0150*       ld (ix+sprite_yvel),hl
045D33             0151*   ; return to caller
045D33 37          0152*       scf ; set carry flag to indicate success
045D34 C9          0153*       ret
045D35             0154*   ; end spawn_sprite_from_tile
045D35             0155*   
045D35             0156*   move_active_tile:
045D35             0157*   ; y-axis movement
045D35 FD 27 04    0158*       ld hl,(iy+sprite_y)
045D38 FD 17 0A    0159*       ld de,(iy+sprite_yvel)
045D3B 19          0160*       add hl,de
045D3C FD 2F 04    0161*       ld (iy+sprite_y),hl
045D3F             0162*   ; detect screen edge collisions
045D3F AF          0163*       xor a ; reset screen edge collision flag and clear carry
045D40 32 04 62 04 0164*       ld (sprite_screen_edge),a
045D44             0165*   ; y-axis bottom is all we need to test
045D44 11 00 91 FE 0166*       ld de,-sprite_bottom*256
045D48 ED 5A       0167*       adc hl,de
045D4A F2 4F 5D 04 0168*       jp p,@bottom ; scrolled off screen so deactivate
045D4E C9          0169*       ret ; still on screen so do nothing further
045D4F             0170*   @bottom:
045D4F 3E 04       0171*       ld a,collide_bottom
045D51 32 04 62 04 0172*       ld (sprite_screen_edge),a
045D55 C9          0173*       ret
045D56             0174*   
045D56             0175*   
045D56             0176*   ; bg_y_plot: dl -1
045D56             0177*   ; bg_bufferId: dl BUF_STATION_BG_00 ; default bufferId for background tiles
045D56             0178*   
045D56             0179*   bg_plot: ; TODO: implement this
045D56             0180*   ; ; load current bg tile bufferId as default
045D56             0181*   ;     ld hl,(bg_bufferId)
045D56             0182*   ; ; check whether it is time for a new background tile
045D56             0183*   ;     ld a,(bg_y_plot)
045D56             0184*   ;     inc a
045D56             0185*   ;     ld (bg_y_plot),a
045D56             0186*   ;     jp nz,@F ; not time for a new tile so draw current one
045D56             0187*   ; ; load the next background tile
045D56             0188*   ;     ld hl,BUF_STATION_BG_00
045D56             0189*   ;     call rand_8
045D56             0190*   ;     and %0000011
045D56             0191*   ;     add a,l
045D56             0192*   ;     ld l,a
045D56             0193*   ;     ld a,0
045D56             0194*   ;     adc a,h
045D56             0195*   ;     ld h,a
045D56             0196*   ;     ld (bg_bufferId),hl
045D56             0197*   ; @@:
045D56             0198*   ;     call vdu_buff_select
045D56             0199*   ;     ld bc,0
045D56             0200*   ;     ld de,(bg_y_plot)
045D56             0201*   ;     inc de
045D56             0202*   ;     call vdu_plot_bmp
045D56             0203*   ; all done
045D56 C9          0204*       ret
045D57             0205*   
045D57             0206*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
045D57             0207*   tile_pad_small: equ 1
045D57             0208*   tile_pad_med: equ 2
045D57             0209*   tile_pad_large: equ 3
045D57             0210*   tile_pad_huge: equ 4
045D57             0211*   tile_turret_fireball: equ 5
045D57             0212*   tile_laser_turret: equ 6
045D57             0213*   tile_twin_laser_turret: equ 7
045D57             0214*   tile_gatling_turret: equ 8
045D57             0215*   tile_electrode_r: equ 9
045D57             0216*   tile_electrode_u: equ 10
045D57             0217*   tile_piston_r: equ 11
045D57             0218*   tile_piston_u: equ 12
045D57             0219*   tile_spark_r: equ 13
045D57             0220*   tile_spark_u: equ 14
045D57             0221*   tile_flame_r: equ 15
045D57             0222*   tile_flame_u: equ 16
045D57             0223*   
045D57             0224*   active_tile_timer: equ 24 ; 2/10ths of a second
045D57             0225*   tile_activation_routines:
045D57 8A 5D 04    0226*       dl activate_null_tile ; dummy spacer since tiled is 1-based
045D5A 13 5E 04    0227*       dl activate_pad_small
045D5D 8A 5D 04    0228*       dl activate_null_tile  ;  activate_pad_med
045D60 8A 5D 04    0229*       dl activate_null_tile  ;  activate_pad_large
045D63 8A 5D 04    0230*       dl activate_null_tile  ;  activate_pad_huge
045D66 13 5F 04    0231*       dl activate_turret_fireball
045D69 8A 5D 04    0232*       dl activate_null_tile  ;  activate_laser_turret
045D6C 8A 5D 04    0233*       dl activate_null_tile  ;  activate_twin_laser_turret
045D6F 8A 5D 04    0234*       dl activate_null_tile  ;  activate_gatling_turret
045D72 8A 5D 04    0235*       dl activate_null_tile  ;  activate_electrode_r
045D75 8A 5D 04    0236*       dl activate_null_tile  ;  activate_electrode_u
045D78 8A 5D 04    0237*       dl activate_null_tile  ;  activate_piston_r
045D7B 8A 5D 04    0238*       dl activate_null_tile  ;  activate_piston_u
045D7E 8A 5D 04    0239*       dl activate_null_tile  ;  activate_spark_r
045D81 8A 5D 04    0240*       dl activate_null_tile  ;  activate_spark_u
045D84 8A 5D 04    0241*       dl activate_null_tile  ;  activate_flame_r
045D87 8A 5D 04    0242*       dl activate_null_tile  ;  activate_flame_u
045D8A             0243*   ; end tile_activation_routines
045D8A             0244*   
045D8A             0245*   activate_null_tile:
045D8A C9          0246*       ret ; dummy routine, do nothing
045D8B             0247*   
045D8B             0248*   ; ld_act_laser_turret:
045D8B             0249*   ;     ; call sprite_variables_to_stack
045D8B             0250*   
045D8B             0251*   ;     ld hl,move_laser_turret
045D8B             0252*   ;     ld (sprite_move_program),hl
045D8B             0253*   
045D8B             0254*   ;     xor a
045D8B             0255*   ;     ld (sprite_animation),a
045D8B             0256*   ;     ld (sprite_move_step),a
045D8B             0257*   
045D8B             0258*   ;     call rand_8     ; snag a random number
045D8B             0259*   ;     and %00011111   ; keep only 5 lowest bits (max 31)
045D8B             0260*   ;     add a,64 ; range is now 64-127
045D8B             0261*   ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
045D8B             0262*   
045D8B             0263*   ;     ld a,%10 ; collides with laser but not player
045D8B             0264*   ;     ld (iy+sprite_collisions),a
045D8B             0265*   
045D8B             0266*   ;     ld a,#10 ; BCD
045D8B             0267*   ;     ld (sprite_points),a
045D8B             0268*   ;     ld a,0 ; binary
045D8B             0269*   ;     ld (sprite_shield_damage),a
045D8B             0270*   
045D8B             0271*   ;     ld hl,tile_turret_fireball ; dt_ld_act loads this to sprite_base_bufferId
045D8B             0272*   ;     jp dt_ld_act
045D8B             0273*   
045D8B             0274*   
045D8B             0275*   ; move_laser_turret:
045D8B             0276*   ; ; compute orientation to player
045D8B             0277*   ;     call orientation_to_player
045D8B             0278*   ; ; h.l 8.8 fixed angle256 to player
045D8B             0279*   ; ; bc and de as signed 16-bit integers
045D8B             0280*   ; ; representing delta-x/y *to* target respectively
045D8B             0281*   ;     ld (Bearing_t),hl
045D8B             0282*   ;     ld hl,0x0400
045D8B             0283*   ;     ld (Vp),hl
045D8B             0284*   ;     call targeting_computer
045D8B             0285*   ;     ld (sprite_heading),hl ; store bearing to player
045D8B             0286*   ; ; is it time to launch a fireball?
045D8B             0287*   ;     ld hl,sprite_move_timer
045D8B             0288*   ;     dec (hl)
045D8B             0289*   ;     jp nz,move_laser_turret_boilerplate
045D8B             0290*   ;     call fireballs_init
045D8B             0291*   ;     ; reset move timer so can fire again if player doesn't take us out
045D8B             0292*   ;     call rand_8     ; snag a random number
045D8B             0293*   ;     and %00011111   ; keep only 5 lowest bits (max 31)
045D8B             0294*   ;     add a,64 ; range is now 64-127
045D8B             0295*   ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
045D8B             0296*   ; move_laser_turret_boilerplate:
045D8B             0297*   ;     call move_active_tiles
045D8B             0298*   ;     call check_collisions
045D8B             0299*   ;     ret
045D8B             0300*   
045D8B             0301*   
045D8B             0302*   ; fireballs_init:
045D8B             0303*   ;     ; call sprite_variables_to_stack
045D8B             0304*   
045D8B             0305*   ;     ld hl,enemy_fireball
045D8B             0306*   ;     ld (sprite_base_bufferId),hl
045D8B             0307*   
045D8B             0308*   ;     ld hl,move_fireballs
045D8B             0309*   ;     ld (sprite_move_program),hl
045D8B             0310*   
045D8B             0311*   ;     ld a,%11 ; collides with laser and player
045D8B             0312*   ;     ld (iy+sprite_collisions),a
045D8B             0313*   
045D8B             0314*   ;     ld hl,(Vp)
045D8B             0315*   ;     ld (sprite_vel),hl
045D8B             0316*   ;     ld hl,(Vp_x)
045D8B             0317*   ;     ld (sprite_xvel),hl
045D8B             0318*   ;     ld hl,(Vp_y)
045D8B             0319*   ;     inc h ; account for ground movement
045D8B             0320*   ;     ld (sprite_yvel),hl
045D8B             0321*   
045D8B             0322*   ;     xor a ; zero a
045D8B             0323*   ;     ld (sprite_animation),a
045D8B             0324*   ;     ld (sprite_move_step),a
045D8B             0325*   ;     ld (sprite_move_timer),a
045D8B             0326*   
045D8B             0327*   ;     ld a,6 ; 1/10th of a second timer
045D8B             0328*   ;     ld (sprite_animation_timer),a
045D8B             0329*   
045D8B             0330*   ;     ld a,0x00 ; BCD
045D8B             0331*   ;     ld (sprite_points),a
045D8B             0332*   ;     ld a,1 ; binary
045D8B             0333*   ;     ld (sprite_shield_damage),a
045D8B             0334*   
045D8B             0335*   ;     call table_add_record ; plops that on the sprite stack for later
045D8B             0336*   ;     ; call sprite_variables_from_stack ; come back to where we started
045D8B             0337*   ;     ret
045D8B             0063        include "tile_pad_small.inc"
045D8B FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
045E00             0002*   pad_small_defaults:
045E00 01          0003*       db tile_pad_small       ; type
045E01 0A 01 00    0004*       dl BUF_PAD              ; base_bufferId
045E04 22 5E 04    0005*       dl move_pad_small       ; move_program
045E07 02          0006*       db collides_with_laser  ; collisions
045E08 10          0007*       db 16                   ; dim_x
045E09 10          0008*       db 16                   ; dim_y
045E0A 01          0009*       db 1                    ; num_orientations
045E0B 01          0010*       db 1                    ; num_animations
045E0C 00          0011*       db 0                    ; animation
045E0D 00          0012*       db 0                    ; animation_timer
045E0E 18          0013*       db 24                   ; move_timer
045E0F 00          0014*       db 0                    ; move_step
045E10 05          0015*       db 5                    ; points
045E11 00          0016*       db 0                    ; shield_damage
045E12 00          0017*       db 0                    ; frame
045E13             0018*   
045E13             0019*   activate_pad_small:
045E13 21 00 5E 04 0020*       ld hl,pad_small_defaults
045E17             0021*   ; get next available sprite id
045E17 CD 0F 5D 04 0022*       call spawn_sprite_from_tile
045E1B D0          0023*       ret nc ; no carry means no free sprite slots, so we go home
045E1C             0024*   ; other specific initialization
045E1C 3E 40       0025*       ld a,64
045E1E FD 77 24    0026*       ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a seeker
045E21 C9          0027*       ret
045E22             0028*   ; end activate_pad_small
045E22             0029*   
045E22             0030*   move_pad_small:
045E22 CD 35 5D 04 0031*       call move_active_tile
045E26 B7          0032*       or a ; a will be non-zero if have scrolled off screen
045E27 C2 5C 62 04 0033*       jp nz,table_deactivate_sprite
045E2B CD DF 21 04 0034*       call check_enemy_collisions
045E2F F8          0035*       ret m ; was collision so nothing more to do
045E30             0036*   ; check whether it is time to spawn a seeker
045E30 FD 35 24    0037*       dec (iy+sprite_move_timer)
045E33 C0          0038*       ret nz
045E34             0039*   pad_small_reset_move_timer:
045E34 CD AE 09 04 0040*       call rand_8     ; snag a random number
045E38 E6 1F       0041*       and %00011111   ; keep only 5 lowest bits (max 31)
045E3A C6 40       0042*       add a,64 ; range is now 64-127
045E3C FD 77 24    0043*       ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a seeker
045E3F CD 14 23 04 0044*       call enemy_spawn_seeker
045E43 C9          0045*       ret
045E44             0064        include "tile_turret_fireball.inc"
045E44 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
045F00             0002*   turret_fireball_defaults:
045F00 02          0003*       db enemy_ground         ; type
045F01 30 01 00    0004*       dl BUF_TURRET_000       ; base_bufferId
045F04 22 5F 04    0005*       dl move_turret_fireball ; move_program
045F07 02          0006*       db collides_with_laser  ; collisions
045F08 10          0007*       db 16                   ; dim_x
045F09 10          0008*       db 16                   ; dim_y
045F0A 20          0009*       db 32                   ; num_orientations
045F0B 01          0010*       db 1                    ; num_animations
045F0C 00          0011*       db 0                    ; animation
045F0D 00          0012*       db 0                    ; animation_timer
045F0E 18          0013*       db 24                   ; move_timer
045F0F 00          0014*       db 0                    ; move_step
045F10 05          0015*       db 5                    ; points
045F11 00          0016*       db 0                    ; shield_damage
045F12 00          0017*       db 0                    ; frame
045F13             0018*   
045F13             0019*   activate_turret_fireball:
045F13 21 00 5F 04 0020*       ld hl,turret_fireball_defaults
045F17             0021*   ; get next available sprite id
045F17 CD 0F 5D 04 0022*       call spawn_sprite_from_tile
045F1B D0          0023*       ret nc ; no carry means no free sprite slots, so we go home
045F1C             0024*   ; other specific initialization
045F1C 3E 40       0025*       ld a,64
045F1E FD 77 24    0026*       ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a seeker
045F21 C9          0027*       ret
045F22             0028*   ; end activate_turret_fireball
045F22             0029*   
045F22             0030*   move_turret_fireball:
045F22 CD 35 5D 04 0031*       call move_active_tile
045F26 B7          0032*       or a ; a will be non-zero if have scrolled off screen
045F27 C2 5C 62 04 0033*       jp nz,table_deactivate_sprite
045F2B CD DF 21 04 0034*       call check_enemy_collisions
045F2F F8          0035*       ret m ; was collision so nothing more to do
045F30             0036*   ; target player
045F30 21 00 04 00 0037*       ld hl,speed_fireball
045F34 22 32 5B 04 0038*       ld (Vp),hl ; param for targeting_computer
045F38 CD 00 5B 04 0039*       call orientation_to_player
045F3C CD 4A 5B 04 0040*       call targeting_computer
045F40 FD 2F 10    0041*       ld (iy+sprite_heading),hl ; save sprite heading
045F43 CD D1 63 04 0042*       call sprite_frame_heading
045F47             0043*   ; check whether it is time to spawn a fireball
045F47 FD 35 24    0044*       dec (iy+sprite_move_timer)
045F4A C0          0045*       ret nz
045F4B             0046*   ; spwan a fireball
045F4B CD 13 22 04 0047*       call enemy_spawn_fireball
045F4F             0048*       ; fall through to reset move timer
045F4F             0049*   turret_fireball_reset_move_timer:
045F4F CD AE 09 04 0050*       call rand_8     ; snag a random number
045F53 E6 1F       0051*       and %00011111   ; keep only 5 lowest bits (max 31)
045F55 C6 18       0052*       add a,24 ; range is now 24-55
045F57 FD 77 24    0053*       ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a fireball
045F5A C9          0054*       ret
045F5B             0065        include "sprites.inc"
045F5B             0001*   ; sprite_type
045F5B             0002*   enemy_dead: equ 0
045F5B             0003*   enemy_air: equ 1
045F5B             0004*   enemy_ground: equ 2
045F5B             0005*   enemy_projectile: equ 3
045F5B             0006*   explosion: equ 4
045F5B             0007*   player: equ 5
045F5B             0008*   player_air: equ 6
045F5B             0009*   player_ground: equ 7
045F5B             0010*   
045F5B             0011*   ; ###### SPRITE TABLE FIELD INDICES ######
045F5B             0012*   table_record_size:    equ  64; 40 bytes ;40 bytes per sprite record
045F5B             0013*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
045F5B             0014*   ; sprite state variables
045F5B             0015*   sprite_state_variables:    equ   1; beginning of sprite state variables
045F5B             0016*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
045F5B             0017*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
045F5B             0018*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
045F5B             0019*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
045F5B             0020*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
045F5B             0021*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
045F5B             0022*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
045F5B             0023*   ; sprite definition variables
045F5B             0024*   sprite_definitions:        equ  22; beginnning of sprite definition variables
045F5B             0025*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
045F5B             0026*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
045F5B             0027*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
045F5B             0028*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
045F5B             0029*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
045F5B             0030*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
045F5B             0031*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
045F5B             0032*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
045F5B             0033*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
045F5B             0034*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
045F5B             0035*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
045F5B             0036*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
045F5B             0037*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
045F5B             0038*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
045F5B             0039*   sprite_frame:              equ  40; 1 bytes ;current animation frame
045F5B             0040*   
045F5B             0041*   ; ###### SPRITE TABLE VARIABLES ######
045F5B             0042*   ; maximum number of sprites
045F5B             0043*   table_max_records: equ 16 ; it can handle more but this is pushing it
045F5B             0044*   ; table_total_bytes: equ table_end-table_start_variables
045F5B             0045*   
045F5B             0046*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
045F5B FF FF FF FF 0047*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
046000             0048*   table_base:
046000 00 00 00 00 0049*   player_weapons_begin: blkb table_record_size*player_weapons_max,0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046100             0050*   player_weapons_end:
046100 00 00 00 00 0051*   player_begin: blkb table_record_size,0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046140             0052*   player_end:
046140             0053*   enemy_sprites_begin:
046140 00 00 00 00 0054*   seekers_base: blkb table_record_size*seekers_max,0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046200             0055*   enemy_sprites_end:
046200             0056*   table_end:
046200             0057*   
046200             0058*   table_num_records: equ table_end-table_base/table_record_size
046200             0059*   
046200             0060*   ; pointer to top address of current record, initialized to table_base
046200 00 60 04    0061*   table_pointer: dl table_base
046203             0062*   ; how many active sprites
046203 00          0063*   table_active_sprites: db 0x00
046204             0064*   ; flag indicating collision with screen edge
046204             0065*   ; uses orientation codes to specify which edge(s)
046204 00          0066*   sprite_screen_edge: db #00
046205             0067*   
046205             0068*   ; origin_top: equ 48
046205             0069*   origin_top: equ 0
046205             0070*   origin_left: equ 128
046205             0071*   field_top: equ 0
046205             0072*   field_bottom: equ 383-origin_top
046205             0073*   field_left: equ 0
046205             0074*   field_right: equ 255
046205             0075*   sprite_top: equ field_top + 0
046205             0076*   sprite_bottom: equ field_bottom-16
046205             0077*   sprite_left: equ field_left
046205             0078*   sprite_right: equ field_right-16
046205             0079*   
046205             0080*   ; ######### COLLISION SPRITE PARAMETERS ##########
046205             0081*   ; integer coordinates are all that are needed for collision calculations
046205 00          0082*   collision_x: db 0x00
046206 00          0083*   collision_y: db 0x00
046207 00          0084*   collision_dim_x: db 0x00
046208 00          0085*   collision_dim_y: db 0x00
046209             0086*   
046209             0087*   ; scratch variables
046209 00          0088*   x: db 0x00 ; 8-bit signed integer
04620A 00          0089*   y: db 0x00 ; 8-bit signed integer
04620B 00 00 00    0090*   x0: dl 0x000000 ; 16.8 signed fixed place
04620E 00 00 00    0091*   y0: dl 0x000000 ; 16.8 signed fixed place
046211 00 00 00    0092*   incx1: dl 0x000000 ; 16.8 signed fixed place
046214 00 00 00    0093*   incy1: dl 0x000000 ; 16.8 signed fixed place
046217 00 00 00    0094*   incx2: dl 0x000000 ; 16.8 signed fixed place
04621A 00 00 00    0095*   incy2: dl 0x000000 ; 16.8 signed fixed place
04621D             0096*   
04621D             0097*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
04621D 00 00 00    0098*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
046220 00 00 00    0099*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
046223 00 00 00    0100*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
046226             0101*   
046226             0102*   table_init:
046226 DD 21 00 60 0103*       ld ix,table_base
       04          
04622B AF          0104*       xor a ; sprite id
04622C 0E 00       0105*       ld c,0 ; sprite type
04622E 06 08       0106*       ld b,table_num_records ; loop counter
046230             0107*   @loop:
046230 DD 77 00    0108*       ld (ix+sprite_id),a
046233 DD 71 16    0109*       ld (ix+sprite_type),c
046236 ED 32 40    0110*       lea ix,ix+table_record_size
046239 3C          0111*       inc a
04623A 10 F4       0112*       djnz @loop
04623C C9          0113*       ret
04623D             0114*   
04623D             0115*   ; gets the next available sprite id
04623D             0116*   ; inputs; none
04623D             0117*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
04623D             0118*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
04623D             0119*   ; destroys: a,b,c,hl,ix
04623D             0120*   ; affects: bumps table_active_sprites by one
04623D             0121*   table_get_next_id:
04623D DD 21 00 60 0122*       ld ix,table_base
       04          
046242 06 08       0123*       ld b,table_num_records ; loop counter
046244 0E 00       0124*       ld c,0 ; sprite id counter
046246             0125*   @loop:
046246 DD 7E 16    0126*       ld a,(ix+sprite_type)
046249 A7          0127*       and a
04624A 28 08       0128*       jr z,@found
04624C ED 32 40    0129*       lea ix,ix+table_record_size
04624F 0C          0130*       inc c
046250 10 F4       0131*       djnz @loop
046252             0132*   @notfound:
046252 AF          0133*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
046253 C9          0134*       ret
046254             0135*   @found:
046254             0136*   ; bump number of active sprites
046254 21 03 62 04 0137*       ld hl,table_active_sprites
046258 34          0138*       inc (hl)
046259             0139*   ; return sprite id
046259 79          0140*       ld a,c
04625A 37          0141*       scf ; sets carry flag indicating we found a free sprite
04625B C9          0142*       ret ; done
04625C             0143*   ; end table_get_next_id
04625C             0144*   
04625C             0145*   ; deactivate the sprite with the given id
04625C             0146*   ; inputs: iy set to sprite record
04625C             0147*   ; outputs: nothingblkw
04625C             0148*   ; destroys: a,hl
04625C             0149*   ; affects: decrements table_active_sprites by one
04625C             0150*   table_deactivate_sprite:
04625C FD 7E 00    0151*       ld a,(iy+sprite_id) ; get spriteId
04625F CD 00 1F 04 0152*       call vdu_sprite_select ; select sprite
046263 CD 84 1F 04 0153*       call vdu_sprite_hide
046267 AF          0154*       xor a
046268 FD 77 16    0155*       ld (iy+sprite_type),a
04626B 21 03 62 04 0156*       ld hl,table_active_sprites
04626F 35          0157*       dec (hl)
046270 C9          0158*       ret
046271             0159*   ; end table_deactivate_sprite
046271             0160*   
046271             0161*   sprites_init:
046271             0162*   ; initialize sprites
046271 CD 34 20 04 0163*   	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
046275 AF          0164*   	xor a ; loop counter / sprite id
046276             0165*   @sprite_loop:
046276 F5          0166*   	push af ; save loop counter / sprite id
046277 CD 00 1F 04 0167*   	call vdu_sprite_select
04627B 21 00 01 00 0168*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
04627F CD 55 20 04 0169*   	call vdu_sprite_add_buff
046283 F1          0170*   	pop af ; restore loop counter / sprite id
046284 3C          0171*       inc a
046285 FE 08       0172*       cp table_num_records
046287 C2 76 62 04 0173*       jp nz,@sprite_loop
04628B CD 34 1F 04 0174*   	call vdu_sprite_activate
04628F             0175*   
04628F             0176*   ; define player sprite
04628F 3A 00 61 04 0177*   	ld a,(player_begin+sprite_id)
046293 CD 00 1F 04 0178*   	call vdu_sprite_select
046297 CD 13 1F 04 0179*   	call vdu_sprite_clear_frames
04629B 21 2B 01 00 0180*   	ld hl,BUF_SHIP_0L
04629F 01 03 00 00 0181*   	ld bc,3 ; three bitmaps for player ship
0462A3             0182*   @sprite_player_loop:
0462A3 C5          0183*   	push bc
0462A4 E5          0184*   	push hl
0462A5 CD 55 20 04 0185*   	call vdu_sprite_add_buff
0462A9 E1          0186*   	pop hl
0462AA 23          0187*   	inc hl
0462AB C1          0188*   	pop bc
0462AC 10 F5       0189*   	djnz @sprite_player_loop
0462AE             0190*   
0462AE             0191*   ; define laser sprites
0462AE CD 1A 58 04 0192*       call init_player_laser
0462B2 C9          0193*       ret
0462B3             0194*   ; end sprites_init
0462B3             0195*   
0462B3             0196*   ; compute a sprite's new position based on its component x,y velocities
0462B3             0197*   ; with screen boundary checking and update its sprite table record accordingly
0462B3             0198*   ; inputs: table_pointer set to sprite record
0462B3             0199*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
0462B3             0200*   ; destroys: everything
0462B3             0201*   ; note: actual rendering of sprite must be handled by caller
0462B3             0202*   move_sprite:
0462B3 FD 2A 00 62 0203*       ld iy,(table_pointer)
       04          
0462B8             0204*   ; x-axis movement
0462B8 FD 27 01    0205*       ld hl,(iy+sprite_x)
0462BB FD 17 07    0206*       ld de,(iy+sprite_xvel)
0462BE 19          0207*       add hl,de
0462BF FD 2F 01    0208*       ld (iy+sprite_x),hl
0462C2             0209*   ; y-axis movement
0462C2 FD 27 04    0210*       ld hl,(iy+sprite_y)
0462C5 FD 17 0A    0211*       ld de,(iy+sprite_yvel)
0462C8 19          0212*       add hl,de
0462C9 FD 2F 04    0213*       ld (iy+sprite_y),hl
0462CC             0214*   ; detect screen edge collisions
0462CC AF          0215*       xor a ; reset screen edge collision flag and clear carry
0462CD 32 04 62 04 0216*       ld (sprite_screen_edge),a
0462D1             0217*   ; y-axis first since we already have it in hl
0462D1 11 00 00 00 0218*       ld de,-sprite_top*256
0462D5 ED 5A       0219*       adc hl,de
0462D7 FA 01 63 04 0220*       jp m,@top
0462DB ED 52       0221*       sbc hl,de ; hl back to original value
0462DD 11 00 91 FE 0222*       ld de,-sprite_bottom*256
0462E1 ED 5A       0223*       adc hl,de
0462E3 F2 0B 63 04 0224*       jp p,@bottom
0462E7             0225*   @xaxis:
0462E7 FD 27 01    0226*       ld hl,(iy+sprite_x)
0462EA 11 00 00 00 0227*       ld de,-sprite_left*256
0462EE ED 5A       0228*       adc hl,de
0462F0 FA 26 63 04 0229*       jp m,@left
0462F4 ED 52       0230*       sbc hl,de ; hl back to original value
0462F6 11 00 11 FF 0231*       ld de,-sprite_right*256
0462FA ED 5A       0232*       adc hl,de
0462FC F2 34 63 04 0233*       jp p,@right
046300             0234*   ; no edge collisions so go home
046300 C9          0235*       ret
046301             0236*   @top:
046301 3E 08       0237*       ld a,collide_top
046303 21 00 00 00 0238*       ld hl,sprite_top*256
046307 C3 11 63 04 0239*       jp @collide_y
04630B             0240*   @bottom:
04630B 3E 04       0241*       ld a,collide_bottom
04630D 21 00 6F 01 0242*       ld hl,sprite_bottom*256
046311             0243*   @collide_y:
046311 32 04 62 04 0244*       ld (sprite_screen_edge),a
046315 FD 2F 04    0245*       ld (iy+sprite_y),hl
046318             0246*   ; reverse y-axis velocity
046318 FD 27 0A    0247*       ld hl,(iy+sprite_yvel)
04631B CD 16 09 04 0248*       call neg_hlu
04631F FD 2F 0A    0249*       ld (iy+sprite_yvel),hl
046322             0250*   ; go check for x-axis collisions
046322 C3 E7 62 04 0251*       jp @xaxis
046326             0252*   @left:
046326 3A 04 62 04 0253*       ld a,(sprite_screen_edge)
04632A F6 02       0254*       or a,collide_left
04632C 21 00 00 00 0255*       ld hl,sprite_left*256
046330 C3 3E 63 04 0256*       jp @collide_x
046334             0257*   @right:
046334 3A 04 62 04 0258*       ld a,(sprite_screen_edge)
046338 F6 01       0259*       or a,collide_right
04633A 21 00 EF 00 0260*       ld hl,sprite_right*256
04633E             0261*   @collide_x:
04633E 32 04 62 04 0262*       ld (sprite_screen_edge),a
046342 FD 2F 01    0263*       ld (iy+sprite_x),hl
046345             0264*   ; reverse x-axis velocity
046345 FD 27 07    0265*       ld hl,(iy+sprite_xvel)
046348 CD 16 09 04 0266*       call neg_hlu
04634C FD 2F 07    0267*       ld (iy+sprite_xvel),hl
04634F             0268*   ; final collision flag to a and return
04634F 3A 04 62 04 0269*       ld a,(sprite_screen_edge)
046353 C9          0270*       ret
046354             0271*   ; end move_sprite
046354             0272*   
046354             0273*   sprite_compute_velocities:
046354 FD 2A 00 62 0274*       ld iy,(table_pointer)
       04          
046359 FD 17 0D    0275*       ld de,(iy+sprite_vel)
04635C CD A9 0B 04 0276*       call polar_to_cartesian
046360 FD 2A 00 62 0277*       ld iy,(table_pointer)
       04          
046365 FD 0F 07    0278*       ld (iy+sprite_xvel),bc ; save x-velocity component
046368 FD 1F 0A    0279*       ld (iy+sprite_yvel),de ; save y-velocity component
04636B C9          0280*       ret
04636C             0281*   ; end sprite_compute_velocities
04636C             0282*   
04636C             0283*   ; change an existing sprite to a new type, keeping its position and velocity the same
04636C             0284*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
04636C             0285*   alter_sprite:
04636C             0286*   ; copy default settings to new sprite
04636C ED 33 16    0287*       lea iy,iy+sprite_definitions ; bump pointer to copy to
04636F FD E5       0288*       push iy ; pointer to default sprite settings
046371 D1          0289*       pop de ; address to copy to
046372 01 2A 00 00 0290*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
046376 ED B0       0291*       ldir ; copies new defaults existing sprite record
046378             0292*   ; return to caller
046378 FD 2A 00 62 0293*       ld iy,(table_pointer) ; reset table_pointer
       04          
04637D FD CB 16 FE 0294*       set 7,(iy+sprite_type) ; set just spawned flag
046381 37          0295*       scf ; set carry flag to indicate success
046382 C9          0296*       ret
046383             0297*   ; end alter_sprite
046383             0298*   
046383             0299*   ; create a new sprite at the same location as an existing sprite
046383             0300*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
046383             0301*   spawn_sprite:
046383 E5          0302*       push hl ; back up pointer to new sprite defaults
046384 CD 3D 62 04 0303*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
046388 E1          0304*       pop hl ; restore pointer to new sprite defaults
046389 D0          0305*       ret nc ; no carry means no free sprite slots, so we go home
04638A             0306*   ; copy default settings to new sprite
04638A DD E5       0307*       push ix ; back up pointer to new sprite record
04638C ED 32 16    0308*       lea ix,ix+sprite_definitions ; bump pointer to copy to
04638F DD E5       0309*       push ix ; pointer to default sprite settings
046391 D1          0310*       pop de ; address to copy to
046392 01 2A 00 00 0311*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
046396 ED B0       0312*       ldir ; copies defaults to new sprite record
046398             0313*   ; return to caller
046398 DD E1       0314*       pop ix ; restore pointer to new sprite record
04639A DD CB 16 FE 0315*       set 7,(ix+sprite_type) ; set just spawned flag
04639E 37          0316*       scf ; set carry flag to indicate success
04639F C9          0317*       ret
0463A0             0318*   
0463A0             0319*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
0463A0             0320*   spawn_sprite_from_sprite:
0463A0 CD 83 63 04 0321*       call spawn_sprite
0463A4 D0          0322*       ret nc ; no carry means no free sprite slots, so we go home
0463A5             0323*   ; copy sprite position, velocity and orientation from existing sprite
0463A5 FD 2A 00 62 0324*       ld iy,(table_pointer) ; get existing sprite record
       04          
0463AA FD 27 01    0325*       ld hl,(iy+sprite_x)
0463AD DD 2F 01    0326*       ld (ix+sprite_x),hl
0463B0 FD 27 04    0327*       ld hl,(iy+sprite_y)
0463B3 DD 2F 04    0328*       ld (ix+sprite_y),hl
0463B6             0329*   ; return to caller
0463B6 DD CB 16 FE 0330*       set 7,(ix+sprite_type) ; set just spawned flag
0463BA 37          0331*       scf ; set carry flag to indicate success
0463BB C9          0332*       ret
0463BC             0333*   
0463BC             0334*   ; compute animation frame based on sprite_animation and sprite_heading
0463BC             0335*   ; inputs: table_pointer set to sprite record
0463BC             0336*   ; outputs: a, sprite_frame set to animation frame
0463BC             0337*   ; destroys: a,hl
0463BC             0338*   sprite_frame_heading_animation:
0463BC FD 7E 11    0339*       ld a,(iy+sprite_heading+1) ; we want the integer portion
0463BF CB 3F       0340*       srl a ; divide integer portion by 8
0463C1 CB 3F       0341*       srl a
0463C3 CB 3F       0342*       srl a
0463C5 FD 66 22    0343*       ld h,(iy+sprite_animation)
0463C8 2E 20       0344*       ld l,32 ; 32 orientation frames per animation
0463CA ED 6C       0345*       mlt hl ; hl = offset from base animation
0463CC 85          0346*       add a,l ; modulo256 since sprite_frame is only 1 byte
0463CD FD 77 28    0347*       ld (iy+sprite_frame),a
0463D0 C9          0348*       ret
0463D1             0349*   ; end sprite_frame_heading_animation
0463D1             0350*   
0463D1             0351*   ; compute animation frame based on sprite_heading
0463D1             0352*   ; inputs: table_pointer set to sprite record
0463D1             0353*   ; outputs: a, sprite_frame set to animation frame
0463D1             0354*   ; destroys: a,hl
0463D1             0355*   sprite_frame_heading:
0463D1 FD 7E 11    0356*       ld a,(iy+sprite_heading+1) ; we want the integer portion
0463D4 CB 3F       0357*       srl a ; divide integer portion by 8
0463D6 CB 3F       0358*       srl a
0463D8 CB 3F       0359*       srl a
0463DA FD 77 28    0360*       ld (iy+sprite_frame),a
0463DD C9          0361*       ret
0463DE             0362*   ; end sprite_frame_heading
0463DE             0363*   
0463DE             0364*   ; load a sprite with animation bitmaps
0463DE             0365*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
0463DE             0366*   sprite_load_frames:
0463DE             0367*   ; back up input parameters
0463DE E5          0368*       push hl ; base bufferId
0463DF C5          0369*       push bc ; bc = number of frames
0463E0 CD 13 1F 04 0370*       call vdu_sprite_clear_frames
0463E4 C1          0371*       pop bc ; bc = number of frames
0463E5 E1          0372*       pop hl ; = base bufferId
0463E6             0373*   @load_frames:
0463E6 C5          0374*       push bc ; back up loop counter
0463E7 E5          0375*       push hl ; back up base bufferId
0463E8 CD 55 20 04 0376*       call vdu_sprite_add_buff
0463EC E1          0377*       pop hl ; restore base bufferId
0463ED 23          0378*       inc hl ; bump it to the next frame
0463EE             0379*   ; decrement loop counter
0463EE C1          0380*       pop bc
0463EF 0B          0381*       dec bc
0463F0 79          0382*       ld a,c
0463F1 B7          0383*       or a
0463F2 C2 E6 63 04 0384*       jp nz,@load_frames
0463F6 78          0385*       ld a,b
0463F7 B7          0386*       or a
0463F8 C2 E6 63 04 0387*       jp nz,@load_frames
0463FC C9          0388*       ret
0463FD             0389*   ; end sprite_load_frames
0463FD             0390*   
0463FD             0391*   dump_sprite_record:
0463FD             0392*       ; call vdu_home_cursor
0463FD CD 10 01 04 0393*       call printInline
046401 69 64 3A 20 0394*       asciz "id:   "
       20 20 00    
046408 DD 7E 00    0395*       ld a,(ix+sprite_id)
04640B CD 5A 01 04 0396*       call printHexA
04640F             0397*   
04640F CD 10 01 04 0398*       call printInline
046413 0D 0A 78 3A 0399*       asciz "\r\nx:   "
       20 20 20 00 
04641B DD 27 01    0400*       ld hl,(ix+sprite_x)
04641E CD 38 03 04 0401*       call print_s168_hl
046422             0402*   
046422 CD 10 01 04 0403*       call printInline
046426 0D 0A 79 3A 0404*       asciz "\r\ny:   "
       20 20 20 00 
04642E DD 27 04    0405*       ld hl,(ix+sprite_y)
046431 CD 38 03 04 0406*       call print_s168_hl
046435             0407*   
046435 CD 10 01 04 0408*       call printInline
046439 0D 0A 78 76 0409*       asciz "\r\nxv:  "
       3A 20 20 00 
046441 DD 27 07    0410*       ld hl,(ix+sprite_xvel)
046444 CD 38 03 04 0411*       call print_s168_hl
046448             0412*   
046448 CD 10 01 04 0413*       call printInline
04644C 0D 0A 79 76 0414*       asciz "\r\nyv:  "
       3A 20 20 00 
046454 DD 27 0A    0415*       ld hl,(ix+sprite_yvel)
046457 CD 38 03 04 0416*       call print_s168_hl
04645B             0417*   
04645B CD 10 01 04 0418*       call printInline
04645F 0D 0A 76 3A 0419*       asciz "\r\nv:   "
       20 20 20 00 
046467 DD 27 0D    0420*       ld hl,(ix+sprite_vel)
04646A CD 38 03 04 0421*       call print_s168_hl
04646E             0422*   
04646E CD 10 01 04 0423*       call printInline
046472 0D 0A 68 64 0424*       asciz "\r\nhdg  "
       67 20 20 00 
04647A DD 27 10    0425*       ld hl,(ix+sprite_heading)
04647D CD 38 03 04 0426*       call print_s168_hl
046481             0427*   
046481 CD 10 01 04 0428*       call printInline
046485 0D 0A 6F 72 0429*       asciz "\r\nori: "
       69 3A 20 00 
04648D DD 27 13    0430*       ld hl,(ix+sprite_orientation)
046490 CD 38 03 04 0431*       call print_s168_hl
046494             0432*   
046494 CD 10 01 04 0433*       call printInline
046498 0D 0A 74 79 0434*       asciz "\r\ntyp: "
       70 3A 20 00 
0464A0 DD 7E 16    0435*       ld a,(ix+sprite_type)
0464A3 CD 5A 01 04 0436*       call printHexA
0464A7             0437*   
0464A7 CD 10 01 04 0438*       call printInline
0464AB 0D 0A 42 49 0439*       asciz "\r\nBId: "
       64 3A 20 00 
0464B3 DD 27 17    0440*       ld hl,(ix+sprite_base_bufferId)
0464B6 CD 37 01 04 0441*       call printHex24
0464BA             0442*   
0464BA CD 10 01 04 0443*       call printInline
0464BE 0D 0A 6D 50 0444*       asciz "\r\nmPg: "
       67 3A 20 00 
0464C6 DD 27 1A    0445*       ld hl,(ix+sprite_move_program)
0464C9 CD 37 01 04 0446*       call printHex24
0464CD             0447*   
0464CD CD 10 01 04 0448*       call printInline
0464D1 0D 0A 63 6F 0449*       asciz "\r\ncol: "
       6C 3A 20 00 
0464D9 DD 7E 1D    0450*       ld a,(ix+sprite_collisions)
0464DC CD B5 03 04 0451*       call printBin8
0464E0             0452*   
0464E0 CD 10 01 04 0453*       call printInline
0464E4 0D 0A 73 7A 0454*       asciz "\r\nszx: "
       78 3A 20 00 
0464EC DD 7E 1E    0455*       ld a,(ix+sprite_dim_x)
0464EF CD 5A 01 04 0456*       call printHexA
0464F3             0457*   
0464F3 CD 10 01 04 0458*       call printInline
0464F7 0D 0A 73 7A 0459*       asciz "\r\nszy: "
       79 3A 20 00 
0464FF DD 7E 1F    0460*       ld a,(ix+sprite_dim_y)
046502 CD 5A 01 04 0461*       call printHexA
046506             0462*   
046506 CD 10 01 04 0463*       call printInline
04650A 0D 0A 23 6F 0464*       asciz "\r\n#ori:"
       72 69 3A 00 
046512 DD 7E 20    0465*       ld a,(ix+sprite_num_orientations)
046515 CD 5A 01 04 0466*       call printHexA
046519             0467*   
046519 CD 10 01 04 0468*       call printInline
04651D 0D 0A 23 61 0469*       asciz "\r\n#ani:"
       6E 69 3A 00 
046525 DD 7E 21    0470*       ld a,(ix+sprite_num_animations)
046528 CD 5A 01 04 0471*       call printHexA
04652C             0472*   
04652C CD 10 01 04 0473*       call printInline
046530 0D 0A 61 6E 0474*       asciz "\r\nani: "
       69 3A 20 00 
046538 DD 7E 22    0475*       ld a,(ix+sprite_animation)
04653B CD 5A 01 04 0476*       call printHexA
04653F             0477*   
04653F CD 10 01 04 0478*       call printInline
046543 0D 0A 61 6E 0479*       asciz "\r\nanit:"
       69 74 3A 00 
04654B DD 7E 23    0480*       ld a,(ix+sprite_animation_timer)
04654E CD 5A 01 04 0481*       call printHexA
046552             0482*   
046552 CD 10 01 04 0483*       call printInline
046556 0D 0A 6D 76 0484*       asciz "\r\nmvt: "
       74 3A 20 00 
04655E DD 7E 24    0485*       ld a,(ix+sprite_move_timer)
046561 CD 5A 01 04 0486*       call printHexA
046565             0487*   
046565 CD 10 01 04 0488*       call printInline
046569 0D 0A 6D 76 0489*       asciz "\r\nmvs: "
       73 3A 20 00 
046571 DD 7E 25    0490*       ld a,(ix+sprite_move_step)
046574 CD 5A 01 04 0491*       call printHexA
046578             0492*   
046578 CD 10 01 04 0493*       call printInline
04657C 0D 0A 70 74 0494*       asciz "\r\npts: "
       73 3A 20 00 
046584 DD 7E 26    0495*       ld a,(ix+sprite_points)
046587 CD 5A 01 04 0496*       call printHexA
04658B             0497*   
04658B CD 10 01 04 0498*       call printInline
04658F 0D 0A 64 6D 0499*       asciz "\r\ndmg: "
       67 3A 20 00 
046597 DD 7E 27    0500*       ld a,(ix+sprite_shield_damage)
04659A CD 5A 01 04 0501*       call printHexA
04659E             0502*   
04659E CD 10 01 04 0503*       call printInline
0465A2 0D 0A 66 72 0504*       asciz "\r\nfrm: "
       6D 3A 20 00 
0465AA DD 7E 28    0505*       ld a,(ix+sprite_frame)
0465AD CD 5A 01 04 0506*       call printHexA
0465B1             0507*   
0465B1             0508*       ; call waitKeypress
0465B1 C9          0509*       ret
0465B2             0066        include "sprites_new.inc"
0465B2             0001*   ; gets the next available sprite id for a particular sprite group
0465B2             0002*   ; inputs; ix = pointer to sprite group, b = number of records in sprite group
0465B2             0003*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
0465B2             0004*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
0465B2             0005*   ; destroys: a,b,c,hl,ix
0465B2             0006*   ; affects: bumps table_active_sprites by one
0465B2             0007*   table_get_next_id_new:
0465B2 DD 4E 00    0008*       ld c,(ix+sprite_id) ; sprite id counter
0465B5             0009*   @loop:
0465B5 DD 7E 16    0010*       ld a,(ix+sprite_type)
0465B8 A7          0011*       and a
0465B9 28 08       0012*       jr z,@found
0465BB ED 32 40    0013*       lea ix,ix+table_record_size
0465BE 0C          0014*       inc c
0465BF 10 F4       0015*       djnz @loop
0465C1             0016*   @notfound:
0465C1 AF          0017*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
0465C2 C9          0018*       ret
0465C3             0019*   @found:
0465C3             0020*   ; bump number of active sprites
0465C3 21 03 62 04 0021*       ld hl,table_active_sprites
0465C7 34          0022*       inc (hl)
0465C8             0023*   ; return sprite id
0465C8 79          0024*       ld a,c
0465C9 37          0025*       scf ; sets carry flag indicating we found a free sprite
0465CA C9          0026*       ret ; done
0465CB             0027*   ; end table_get_next_id_new
0465CB             0028*   
0465CB             0029*   ; create a new sprite at the same location as an existing sprite
0465CB             0030*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
0465CB             0031*   ;         ix = pointer to sprite group, b = number of records in sprite group
0465CB             0032*   ; affects: bumps table_active_sprites by one
0465CB             0033*   spawn_sprite_from_sprite_new:
0465CB E5          0034*       push hl ; back up pointer to new sprite defaults
0465CC CD B2 65 04 0035*       call table_get_next_id_new ; if available: a = new sprite id, ix = pointer to new sprite vars
0465D0 E1          0036*       pop hl ; restore pointer to new sprite defaults
0465D1 D0          0037*       ret nc ; no carry means no free sprite slots, so we go home
0465D2             0038*   ; copy default settings to new sprite
0465D2 DD E5       0039*       push ix ; back up pointer to new sprite record
0465D4 ED 32 16    0040*       lea ix,ix+sprite_definitions ; bump pointer to copy to
0465D7 DD E5       0041*       push ix ; pointer to default sprite settings
0465D9 D1          0042*       pop de ; address to copy to
0465DA 01 2A 00 00 0043*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
0465DE ED B0       0044*       ldir ; copies defaults to new sprite record
0465E0 DD E1       0045*       pop ix ; restore pointer to new sprite record
0465E2             0046*   ; copy sprite position, velocity and orientation from existing sprite
0465E2 FD 2A 00 62 0047*       ld iy,(table_pointer) ; get existing sprite record
       04          
0465E7 FD 27 01    0048*       ld hl,(iy+sprite_x)
0465EA DD 2F 01    0049*       ld (ix+sprite_x),hl
0465ED FD 27 04    0050*       ld hl,(iy+sprite_y)
0465F0 DD 2F 04    0051*       ld (ix+sprite_y),hl
0465F3             0052*   ; return to caller
0465F3 DD CB 16 FE 0053*       set 7,(ix+sprite_type) ; set just spawned flag
0465F7 37          0054*       scf ; set carry flag to indicate success
0465F8             0055*   
0465F8             0056*       ; CALL DEBUG_PRINT_TABLE
0465F8             0057*       ; CALL DEBUG_WAITKEYPRESS
0465F8 C9          0058*       ret
0465F9             0059*   ; end spawn_sprite_from_sprite_new
0465F9             0060*   
0465F9             0061*   ; change an existing sprite to a new type, keeping its position and velocity the same
0465F9             0062*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
0465F9             0063*   ;         ix = pointer to sprite group, b = number of records in sprite group
0465F9             0064*   alter_sprite_new:
0465F9 E5          0065*       push hl ; back up pointer to new sprite defaults
0465FA CD B2 65 04 0066*       call table_get_next_id_new ; if available: a = new sprite id, ix = pointer to new sprite vars
0465FE 35          0067*       dec (hl) ; decrement table_active_sprites by one since we're not actually creating a new sprite
0465FF E1          0068*       pop hl ; restore pointer to new sprite defaults
046600 D0          0069*       ret nc ; no carry means no free sprite slots, so we go home
046601             0070*   ; copy default settings to new sprite
046601 DD E5       0071*       push ix ; back up pointer to new sprite record
046603 ED 32 16    0072*       lea ix,ix+sprite_definitions ; bump pointer to copy to
046606 DD E5       0073*       push ix ; pointer to default sprite settings
046608 D1          0074*       pop de ; address to copy to
046609 01 2A 00 00 0075*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
04660D ED B0       0076*       ldir ; copies defaults to new sprite record
04660F DD E1       0077*       pop ix ; restore pointer to new sprite record
046611             0078*   ; copy sprite position, velocity and orientation from existing sprite
046611 FD 2A 00 62 0079*       ld iy,(table_pointer) ; get existing sprite record
       04          
046616 FD 27 01    0080*       ld hl,(iy+sprite_x)
046619 DD 2F 01    0081*       ld (ix+sprite_x),hl
04661C FD 27 04    0082*       ld hl,(iy+sprite_y)
04661F DD 2F 04    0083*       ld (ix+sprite_y),hl
046622             0084*   ; return to caller
046622 37          0085*       scf ; set carry flag to indicate success
046623             0086*   ; end alter_sprite_new
046623             0067    
046623 FF FF FF FF 0068        align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
046700             0069    
046700             0070    ; --- MAIN PROGRAM FILE ---
046700 57 65 6C 63 0071    hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
04671B 4C 6F 61 64 0072    loading_ui: asciz "Loading UI"
       69 6E 67 20 
       55 49 00    
046726 4C 6F 61 64 0073    loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
046734 50 72 65 73 0074    loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
04674F             0075    
04674F             0076    init:
04674F             0077    ; clear all buffers
04674F CD 2A 1B 04 0078        call vdu_clear_all_buffers
046753             0079    
046753             0080    ; set up the display
046753 3E 08       0081        ld a,8;+128 ; 136   320   240   64    60hz double-buffered
046755 CD 14 1A 04 0082        call vdu_set_screen_mode
046759 AF          0083        xor a
04675A CD 25 1A 04 0084        call vdu_set_scaling
04675E             0085    
04675E             0086    ; ; enable additional audio channels
04675E             0087    ; 	call vdu_enable_channels
04675E             0088    
04675E             0089    ; set text background color
04675E 3E 9A       0090        ld a,26+128 ; violet
046760 CD 7C 19 04 0091        call vdu_colour_text
046764             0092    
046764             0093    ; set text foreground color
046764 3E 2F       0094        ld a,47 ; aaaaff lavenderish
046766 CD 7C 19 04 0095        call vdu_colour_text
04676A             0096    
04676A             0097    ; set gfx bg color
04676A AF          0098        xor a ; plotting mode 0
04676B 3E 9A       0099        ld a,26+128 ; violet
04676D CD 8D 19 04 0100        call vdu_gcol
046771 CD 4B 19 04 0101        call vdu_cls
046775             0102    
046775             0103    ; set the cursor off
046775 CD 13 19 04 0104        call vdu_cursor_off
046779             0105    
046779             0106    ; VDU 28, left, bottom, right, top: Set text viewport **
046779             0107    ; MIND THE LITTLE-ENDIANESS
046779             0108    ; inputs: c=left,b=bottom,e=right,d=top
046779 0E 00       0109        ld c,0 ; left
04677B 16 00       0110        ld d,0 ; top
04677D 1E 27       0111        ld e,39 ; right
04677F 06 00       0112        ld b,0; bottom
046781 CD A4 19 04 0113        call vdu_set_txt_viewport
046785             0114    
046785             0115    ; print loading ui message
046785 21 1B 67 04 0116        ld hl,loading_ui
046789 CD 17 01 04 0117        call printString
04678D CD 50 19 04 0118        call vdu_flip
046791             0119    
046791             0120    ; load UI images
046791 CD CA 16 04 0121        call load_ui_images
046795             0122    
046795             0123    ; load sprites
046795 CD 09 16 04 0124        call img_load_init ; sets up the animated load screen
046799 CD DD 16 04 0125        call load_sprite_images
04679D             0126    
04679D             0127    ; load tileset_ptrs
04679D CD EE 16 04 0128        call load_tilesets
0467A1             0129    
0467A1             0130    ; ; load sound effects ; TODO
0467A1             0131    ; 	ld bc,SFX_num_buffers
0467A1             0132    ; 	ld hl,SFX_buffer_id_lut
0467A1             0133    ; 	ld (cur_buffer_id_lut),hl
0467A1             0134    ; 	ld hl,SFX_load_routines_table
0467A1             0135    ; 	ld (cur_load_jump_table),hl
0467A1             0136    ; 	call sfx_load_main
0467A1             0137    
0467A1             0138    ; print loading complete message and wait for user keypress
0467A1 CD 4B 19 04 0139        call vdu_cls
0467A5 21 34 67 04 0140        ld hl,loading_complete
0467A9 CD 17 01 04 0141        call printString
0467AD CD 50 19 04 0142        call vdu_flip
0467B1             0143        ; call waitKeypress
0467B1             0144    
0467B1             0145    ; set up display for gameplay
0467B1             0146        ; ld a,8
0467B1 3E 14       0147        ld a,20
0467B3 CD 14 1A 04 0148        call vdu_set_screen_mode
0467B7 AF          0149        xor a
0467B8 CD 25 1A 04 0150        call vdu_set_scaling
0467BC CD 13 19 04 0151        call vdu_cursor_off
0467C0             0152    ; load fonts
0467C0 CD 00 15 04 0153    	call fonts_load
0467C4             0154    ; select font
0467C4             0155        ; ld hl,computer_pixel_7_8x16
0467C4 21 02 FA 00 0156        ld hl,amiga_forever_8x8 ; DEBUG
0467C8 3E 01       0157        ld a,1 ; flags
0467CA CD 00 1D 04 0158        call vdu_font_select
0467CE             0159    ; plot bezel art
0467CE 21 00 00 00 0160        ld hl,BUF_BEZEL_L
0467D2 CD 38 1A 04 0161        call vdu_buff_select
0467D6 01 00 00 00 0162        ld bc,0
0467DA 11 00 00 00 0163        ld de,0
0467DE CD 20 1E 04 0164        call vdu_plot_bmp
0467E2 21 01 00 00 0165        ld hl,BUF_BEZEL_R
0467E6 CD 38 1A 04 0166        call vdu_buff_select
0467EA 01 80 01 00 0167        ld bc,384
0467EE 11 00 00 00 0168        ld de,0
0467F2 CD 20 1E 04 0169        call vdu_plot_bmp
0467F6             0170    ; set gfx origin and viewport to playing field window
0467F6 01 80 00 00 0171        ld bc,origin_left
0467FA 11 00 00 00 0172        ld de,origin_top
0467FE CD D0 19 04 0173        call vdu_set_gfx_origin
046802 01 00 00 00 0174        ld bc,field_left
046806 11 00 00 00 0175        ld de,field_top
04680A DD 21 FF 00 0176        ld ix,field_right
       00          
04680F FD 21 7F 01 0177        ld iy,field_bottom
       00          
046814 CD EB 19 04 0178        call vdu_set_gfx_viewport
046818             0179    ; set background color
046818 3E 9A       0180        ld a,26+128 ; violet
04681A CD 8D 19 04 0181        call vdu_gcol
04681E CD 5E 19 04 0182        call vdu_clg
046822             0183    ; VDU 28, left, bottom, right, top: Set text viewport **
046822 0E 00       0184        ld c,0 ; left
046824 16 00       0185        ld d,0 ; top
046826 1E 3E       0186        ld e,62 ; right
046828 06 30       0187        ld b,48; bottom
04682A CD A4 19 04 0188        call vdu_set_txt_viewport
04682E             0189    
04682E             0190    ; initialize the global timestamp
04682E CD F9 17 04 0191        call timestamp_tick
046832             0192    
046832             0193    ; done with init
046832 C9          0194        ret
046833             0195    
046833             0196    main:
046833             0197    ; start a new game
046833 CD 17 59 04 0198        call game_initialize
046837             0199    
046837             0200        ; CALL DEBUG_PRINT_TABLE
046837             0201        ; CALL DEBUG_WAITKEYPRESS
046837             0202    main_loop:
046837             0203    ; update the global timestamp
046837 CD F9 17 04 0204        call timestamp_tick
04683B             0205    ; do gamestate logic
04683B CD 03 59 04 0206        call do_game
04683F             0207        ; CALL DEBUG_PRINT_TABLE
04683F             0208    ; wait for the next vblank mitigate flicker and for loop timing
04683F CD BF 19 04 0209        call vdu_vblank
046843             0210        ; call vdu_vblank ; DEBUG
046843             0211        ; call vdu_vblank ; DEBUG
046843             0212    
046843             0213    ; poll keyboard for escape keypress
046843 3E 08       0214        ld a, $08 ; code to send to MOS
046845 5B CF       0215        rst.lil $08 ; get IX pointer to System Variables
046847 DD 7E 05    0216        ld a, (ix + $05) ; get ASCII code of key pressed
04684A FE 1B       0217        cp 27 ; check if 27 (ascii code for ESC)
04684C CA 54 68 04 0218        jp z, main_end ; if pressed, jump to exit
046850             0219    
046850             0220    ; escape not pressed so loop
046850 C3 37 68 04 0221        jp main_loop
046854             0222    
046854             0223    main_end:
046854 CD 05 19 04 0224        call vdu_cursor_on
046858 C9          0225        ret
046859             0226    
046859             0227    DEBUG_PRINT:
046859             0228        PUSH_ALL
046859 08          0001M1      ex af,af'
04685A D9          0002M1      exx
04685B F5          0003M1      push af
04685C E5          0004M1      push hl
04685D C5          0005M1      push bc
04685E D5          0006M1      push de
04685F             0007M1  
04685F 08          0008M1      ex af,af'
046860 D9          0009M1      exx
046861 F5          0010M1      push af
046862 E5          0011M1      push hl
046863 C5          0012M1      push bc
046864 D5          0013M1      push de
046865 DD E5       0014M1      push ix
046867 FD E5       0015M1      push iy
046869 0E 00       0229        ld c,0
04686B 06 00       0230        ld b,0
04686D CD 37 19 04 0231        call vdu_move_cursor
046871             0232        POP_ALL
046871 FD E1       0001M1      pop iy
046873 DD E1       0002M1      pop ix
046875 D1          0003M1      pop de
046876 C1          0004M1      pop bc
046877 E1          0005M1      pop hl
046878 F1          0006M1      pop af
046879 08          0007M1      ex af,af'
04687A D9          0008M1      exx
04687B             0009M1  
04687B D1          0010M1      pop de
04687C C1          0011M1      pop bc
04687D E1          0012M1      pop hl
04687E F1          0013M1      pop af
04687F 08          0014M1      ex af,af'
046880 D9          0015M1      exx
046881             0233        PUSH_ALL
046881 08          0001M1      ex af,af'
046882 D9          0002M1      exx
046883 F5          0003M1      push af
046884 E5          0004M1      push hl
046885 C5          0005M1      push bc
046886 D5          0006M1      push de
046887             0007M1  
046887 08          0008M1      ex af,af'
046888 D9          0009M1      exx
046889 F5          0010M1      push af
04688A E5          0011M1      push hl
04688B C5          0012M1      push bc
04688C D5          0013M1      push de
04688D DD E5       0014M1      push ix
04688F FD E5       0015M1      push iy
046891 CD 64 06 04 0234        call dumpFlags
046895             0235        POP_ALL
046895 FD E1       0001M1      pop iy
046897 DD E1       0002M1      pop ix
046899 D1          0003M1      pop de
04689A C1          0004M1      pop bc
04689B E1          0005M1      pop hl
04689C F1          0006M1      pop af
04689D 08          0007M1      ex af,af'
04689E D9          0008M1      exx
04689F             0009M1  
04689F D1          0010M1      pop de
0468A0 C1          0011M1      pop bc
0468A1 E1          0012M1      pop hl
0468A2 F1          0013M1      pop af
0468A3 08          0014M1      ex af,af'
0468A4 D9          0015M1      exx
0468A5             0236        PUSH_ALL
0468A5 08          0001M1      ex af,af'
0468A6 D9          0002M1      exx
0468A7 F5          0003M1      push af
0468A8 E5          0004M1      push hl
0468A9 C5          0005M1      push bc
0468AA D5          0006M1      push de
0468AB             0007M1  
0468AB 08          0008M1      ex af,af'
0468AC D9          0009M1      exx
0468AD F5          0010M1      push af
0468AE E5          0011M1      push hl
0468AF C5          0012M1      push bc
0468B0 D5          0013M1      push de
0468B1 DD E5       0014M1      push ix
0468B3 FD E5       0015M1      push iy
0468B5 CD C6 04 04 0237        call dumpRegistersHex
0468B9             0238        ; call waitKeypress
0468B9             0239        POP_ALL
0468B9 FD E1       0001M1      pop iy
0468BB DD E1       0002M1      pop ix
0468BD D1          0003M1      pop de
0468BE C1          0004M1      pop bc
0468BF E1          0005M1      pop hl
0468C0 F1          0006M1      pop af
0468C1 08          0007M1      ex af,af'
0468C2 D9          0008M1      exx
0468C3             0009M1  
0468C3 D1          0010M1      pop de
0468C4 C1          0011M1      pop bc
0468C5 E1          0012M1      pop hl
0468C6 F1          0013M1      pop af
0468C7 08          0014M1      ex af,af'
0468C8 D9          0015M1      exx
0468C9 C9          0240        ret
0468CA             0241    
0468CA             0242    DEBUG_PRINT_TABLE:
0468CA             0243        PUSH_ALL
0468CA 08          0001M1      ex af,af'
0468CB D9          0002M1      exx
0468CC F5          0003M1      push af
0468CD E5          0004M1      push hl
0468CE C5          0005M1      push bc
0468CF D5          0006M1      push de
0468D0             0007M1  
0468D0 08          0008M1      ex af,af'
0468D1 D9          0009M1      exx
0468D2 F5          0010M1      push af
0468D3 E5          0011M1      push hl
0468D4 C5          0012M1      push bc
0468D5 D5          0013M1      push de
0468D6 DD E5       0014M1      push ix
0468D8 FD E5       0015M1      push iy
0468DA             0244        ; call vdu_home_cursor
0468DA 0E 00       0245        ld c,0
0468DC 06 00       0246        ld b,0
0468DE CD 37 19 04 0247        call vdu_move_cursor
0468E2             0248    
0468E2             0249        ; ld a,(player_weapons_count)
0468E2             0250        ; call printHexA
0468E2             0251        ; call printNewLine
0468E2             0252    
0468E2             0253        ; LIST_FIELD sprite_move_program,3 ; DEBUG
0468E2             0254        ; LIST_FIELD sprite_type,1 ; DEBUG
0468E2             0255    
0468E2 DD 21 00 60 0256        ld ix,player_weapons_begin
       04          
0468E7 CD FD 63 04 0257        call dump_sprite_record
0468EB CD 2C 01 04 0258        call printNewLine
0468EF             0259    
0468EF DD 21 00 61 0260        ld ix,player_begin
       04          
0468F4 CD FD 63 04 0261        call dump_sprite_record
0468F8             0262    
0468F8             0263        ; call waitKeypress
0468F8             0264        POP_ALL
0468F8 FD E1       0001M1      pop iy
0468FA DD E1       0002M1      pop ix
0468FC D1          0003M1      pop de
0468FD C1          0004M1      pop bc
0468FE E1          0005M1      pop hl
0468FF F1          0006M1      pop af
046900 08          0007M1      ex af,af'
046901 D9          0008M1      exx
046902             0009M1  
046902 D1          0010M1      pop de
046903 C1          0011M1      pop bc
046904 E1          0012M1      pop hl
046905 F1          0013M1      pop af
046906 08          0014M1      ex af,af'
046907 D9          0015M1      exx
046908 C9          0265        RET
046909             0266    
046909             0267    DEBUG_WAITKEYPRESS:
046909             0268        PUSH_ALL
046909 08          0001M1      ex af,af'
04690A D9          0002M1      exx
04690B F5          0003M1      push af
04690C E5          0004M1      push hl
04690D C5          0005M1      push bc
04690E D5          0006M1      push de
04690F             0007M1  
04690F 08          0008M1      ex af,af'
046910 D9          0009M1      exx
046911 F5          0010M1      push af
046912 E5          0011M1      push hl
046913 C5          0012M1      push bc
046914 D5          0013M1      push de
046915 DD E5       0014M1      push ix
046917 FD E5       0015M1      push iy
046919 CD C5 06 04 0269        call waitKeypress
04691D             0270        POP_ALL
04691D FD E1       0001M1      pop iy
04691F DD E1       0002M1      pop ix
046921 D1          0003M1      pop de
046922 C1          0004M1      pop bc
046923 E1          0005M1      pop hl
046924 F1          0006M1      pop af
046925 08          0007M1      ex af,af'
046926 D9          0008M1      exx
046927             0009M1  
046927 D1          0010M1      pop de
046928 C1          0011M1      pop bc
046929 E1          0012M1      pop hl
04692A F1          0013M1      pop af
04692B 08          0014M1      ex af,af'
04692C D9          0015M1      exx
04692D C9          0271        RET

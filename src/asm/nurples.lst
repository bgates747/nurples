PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C             0015    
04004C CD FB 9C 04 0016        call init
040050 CD 04 9D 04 0017        call main
040054             0018    
040054             0019    exit:
040054 FD E1       0020        pop iy
040056 DD E1       0021        pop ix
040058 D1          0022        pop de
040059 C1          0023        pop bc
04005A F1          0024        pop af
04005B 21 00 00 00 0025        ld hl,0
04005F             0026    
04005F C9          0027        ret
040060             0028    
040060             0029    ; API INCLUDES
040060             0030        include "mos_api.inc"
040060             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*   ; Title:	AGON MOS - API for user projects
040060             0003*   ; Author:	Dean Belfield
040060             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*   ;			Added MOS error codes for return in HL
040060             0006*   ; Created:	03/08/2022
040060             0007*   ; Last Updated:	10/08/2023
040060             0008*   ;
040060             0009*   ; Modinfo:
040060             0010*   ; 05/08/2022:	Added mos_feof
040060             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*   ; 13/10/2022:	Added mos_oscli
040060             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*   ; 19/05/2023:	Added sysvar_scrMode
040060             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*   ; 03/08/2023:	Added mos_setkbvector
040060             0028*   ; 10/08/2023:	Added mos_getkbmap
040060             0029*   
040060             0030*   ; VDP control (VDU 23, 0, n)
040060             0031*   ;
040060             0032*   vdp_gp:				EQU 80h
040060             0033*   vdp_keycode:		EQU 81h
040060             0034*   vdp_cursor:			EQU	82h
040060             0035*   vdp_scrchar:		EQU	83h
040060             0036*   vdp_scrpixel:		EQU	84h
040060             0037*   vdp_audio:			EQU	85h
040060             0038*   vdp_mode:			EQU	86h
040060             0039*   vdp_rtc:			EQU	87h
040060             0040*   vdp_keystate:		EQU	88h
040060             0041*   vdp_logicalcoords:	EQU	C0h
040060             0042*   vdp_terminalmode:	EQU	FFh
040060             0043*   
040060             0044*   ; MOS high level functions
040060             0045*   ;
040060             0046*   mos_getkey:			EQU	00h
040060             0047*   mos_load:			EQU	01h
040060             0048*   mos_save:			EQU	02h
040060             0049*   mos_cd:				EQU	03h
040060             0050*   mos_dir:			EQU	04h
040060             0051*   mos_del:			EQU	05h
040060             0052*   mos_ren:			EQU	06h
040060             0053*   mos_mkdir:			EQU	07h
040060             0054*   mos_sysvars:		EQU	08h
040060             0055*   mos_editline:		EQU	09h
040060             0056*   mos_fopen:			EQU	0Ah
040060             0057*   mos_fclose:			EQU	0Bh
040060             0058*   mos_fgetc:			EQU	0Ch
040060             0059*   mos_fputc:			EQU	0Dh
040060             0060*   mos_feof:			EQU	0Eh
040060             0061*   mos_getError:		EQU	0Fh
040060             0062*   mos_oscli:			EQU	10h
040060             0063*   mos_copy:			EQU	11h
040060             0064*   mos_getrtc:			EQU	12h
040060             0065*   mos_setrtc:			EQU	13h
040060             0066*   mos_setintvector:	EQU	14h
040060             0067*   mos_uopen:			EQU	15h
040060             0068*   mos_uclose:			EQU	16h
040060             0069*   mos_ugetc:			EQU	17h
040060             0070*   mos_uputc:			EQU	18h
040060             0071*   mos_getfil:			EQU	19h
040060             0072*   mos_fread:			EQU	1Ah
040060             0073*   mos_fwrite:			EQU	1Bh
040060             0074*   mos_flseek:			EQU	1Ch
040060             0075*   mos_setkbvector:	EQU	1Dh
040060             0076*   mos_getkbmap:		EQU	1Eh
040060             0077*   
040060             0078*   ; MOS program exit codes
040060             0079*   ;
040060             0080*   EXIT_OK:				EQU  0;	"OK",
040060             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*   ; FatFS file access functions
040060             0103*   ;
040060             0104*   ffs_fopen:			EQU	80h
040060             0105*   ffs_fclose:			EQU	81h
040060             0106*   ffs_fread:			EQU	82h
040060             0107*   ffs_fwrite:			EQU	83h
040060             0108*   ffs_flseek:			EQU	84h
040060             0109*   ffs_ftruncate:		EQU	85h
040060             0110*   ffs_fsync:			EQU	86h
040060             0111*   ffs_fforward:		EQU	87h
040060             0112*   ffs_fexpand:		EQU	88h
040060             0113*   ffs_fgets:			EQU	89h
040060             0114*   ffs_fputc:			EQU	8Ah
040060             0115*   ffs_fputs:			EQU	8Bh
040060             0116*   ffs_fprintf:		EQU	8Ch
040060             0117*   ffs_ftell:			EQU	8Dh
040060             0118*   ffs_feof:			EQU	8Eh
040060             0119*   ffs_fsize:			EQU	8Fh
040060             0120*   ffs_ferror:			EQU	90h
040060             0121*   
040060             0122*   ; FatFS directory access functions
040060             0123*   ;
040060             0124*   ffs_dopen:			EQU	91h
040060             0125*   ffs_dclose:			EQU	92h
040060             0126*   ffs_dread:			EQU	93h
040060             0127*   ffs_dfindfirst:		EQU	94h
040060             0128*   ffs_dfindnext:		EQU	95h
040060             0129*   
040060             0130*   ; FatFS file and directory management functions
040060             0131*   ;
040060             0132*   ffs_stat:			EQU	96h
040060             0133*   ffs_unlink:			EQU	97h
040060             0134*   ffs_rename:			EQU	98h
040060             0135*   ffs_chmod:			EQU	99h
040060             0136*   ffs_utime:			EQU	9Ah
040060             0137*   ffs_mkdir:			EQU	9Bh
040060             0138*   ffs_chdir:			EQU	9Ch
040060             0139*   ffs_chdrive:		EQU	9Dh
040060             0140*   ffs_getcwd:			EQU	9Eh
040060             0141*   
040060             0142*   ; FatFS volume management and system configuration functions
040060             0143*   ;
040060             0144*   ffs_mount:			EQU	9Fh
040060             0145*   ffs_mkfs:			EQU	A0h
040060             0146*   ffs_fdisk:			EQU	A1h
040060             0147*   ffs_getfree:		EQU	A2h
040060             0148*   ffs_getlabel:		EQU	A3h
040060             0149*   ffs_setlabel:		EQU	A4h
040060             0150*   ffs_setcp:			EQU	A5h
040060             0151*   
040060             0152*   ; File access modes
040060             0153*   ;
040060             0154*   fa_read:			EQU	01h
040060             0155*   fa_write:			EQU	02h
040060             0156*   fa_open_existing:	EQU	00h
040060             0157*   fa_create_new:		EQU	04h
040060             0158*   fa_create_always:	EQU	08h
040060             0159*   fa_open_always:		EQU	10h
040060             0160*   fa_open_append:		EQU	30h
040060             0161*   
040060             0162*   ; System variable indexes for api_sysvars
040060             0163*   ; Index into _sysvars in globals.inc
040060             0164*   ;
040060             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*   
040060             0192*   ; Flags for the VPD protocol
040060             0193*   ;
040060             0194*   vdp_pflag_cursor:		EQU	00000001b
040060             0195*   vdp_pflag_scrchar:		EQU	00000010b
040060             0196*   vdp_pflag_point:		EQU	00000100b
040060             0197*   vdp_pflag_audio:		EQU	00001000b
040060             0198*   vdp_pflag_mode:			EQU	00010000b
040060             0199*   vdp_pflag_rtc:			EQU	00100000b
040060             0200*   
040060             0201*   ;
040060             0202*   ; FatFS structures
040060             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*   ;
040060             0205*   ; Object ID and allocation information (FFOBJID)
040060             0206*   ;
040060             0207*   ; Indexes into FFOBJID structure
040060             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*   ;
040060             0215*   ; File object structure (FIL)
040060             0216*   ;
040060             0217*   ; Indexes into FIL structure
040060             0218*   fil_obj:		EQU 0	; 15: Object identifier
040060             0219*   fil_flag:		EQU	15 	;  1: File status flags
040060             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*   ;
040060             0227*   ; Directory object structure (DIR)
040060             0228*   ; Indexes into DIR structure
040060             0229*   dir_obj:		EQU  0	; 15: Object identifier
040060             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*   dir_clust:		EQU	19	;  4: Current cluster
040060             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*   ;
040060             0237*   ; File information structure (FILINFO)
040060             0238*   ;
040060             0239*   ; Indexes into FILINFO structure
040060             0240*   filinfo_fsize:		EQU 0	;   4: File size
040060             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*   ;
040060             0247*   ; Macro for calling the API
040060             0248*   ; Parameters:
040060             0249*   ; - function: One of the function numbers listed above
040060             0250*   ;
040060             0251*   	MACRO	MOSCALL	function
040060             0252*   			LD	A, function
040060             0253*   			RST.LIL	08h
040060             0254*   	ENDMACRO
040060             0031        include "macros.inc"
040060             0001*   
040060             0002*   ; test the sign of HL
040060             0003*   ; inputs: HL obviously
040060             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040060             0005*   ; destroys: flags
040060             0006*       MACRO SIGN_HLU
040060             0007*       add hl,de ; 1 cycle
040060             0008*       or a ; clear flags ; 1 cycle
040060             0009*       sbc hl,de ; 2 cycles
040060             0010*       ; 4 cycles total
040060             0011*       ENDMACRO
040060             0012*   
040060             0013*   ; put the value in A into HLU
040060             0014*   ; affects: HLU
040060             0015*   ; destroys: nothing
040060             0016*   ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
040060             0017*       MACRO A_TO_HLU
040060             0018*       xor a ; 1 cycle
040060             0019*       ld ($+8+1),hl ; 7 cycles
040060             0020*       ld ($+4+3),a ; 5 cycles
040060             0021*       ld hl,0x000000 ; 4 cycles
040060             0022*       ; 17 cycles total
040060             0023*       ENDMACRO
040060             0024*   
040060             0025*   ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
040060             0026*   ; one cycle less but burns flags
040060             0027*       MACRO A_TO_HLU_ALT
040060             0028*       push hl ; 4 cycles
040060             0029*       ld hl,2 ; 4 cycles
040060             0030*       add hl,sp ; 1 cycle
040060             0031*       ld (hl),a ; 2 cycles
040060             0032*       pop hl ; 4 cycles
040060             0033*       ; 15 cycles total
040060             0034*       ENDMACRO
040060             0035*   
040060             0036*       MACRO hlu_mul256
040060             0037*       add hl,hl ; * 2
040060             0038*       add hl,hl ; * 4
040060             0039*       add hl,hl ; * 8
040060             0040*       add hl,hl ; * 16
040060             0041*       add hl,hl ; * 32
040060             0042*       add hl,hl ; * 64
040060             0043*       add hl,hl ; * 128
040060             0044*       add hl,hl ; * 256
040060             0045*       ENDMACRO
040060             0046*   
040060             0047*   ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
040060             0048*       MACRO SRL_UHL
040060             0049*       dec sp ; 1 cycle
040060             0050*       push hl ; 4 cycles
040060             0051*       inc sp ; 1 cycle
040060             0052*       pop hl ; 4 cycles
040060             0053*       inc hl ; 1 cycle
040060             0054*       dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040060             0055*       ; 13 cycles total
040060             0056*       ENDMACRO
040060             0057*   
040060             0058*       MACRO printChar char
040060             0059*       LD A, char
040060             0060*       RST.LIL 10h
040060             0061*       ENDMACRO
040060             0062*   
040060             0063*   ; Simulated call to subroutine at HL
040060             0064*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0065*   ; outputs: whatever the subroutine does, including HL and BC
040060             0066*   ; destroys: only what the subroutine does, but always BC
040060             0067*       MACRO CALL_HL
040060             0068*       ld bc,$+6 ; Address of first instruction after the jump
040060             0069*       push bc ; which constitutes the return address
040060             0070*       jp (hl) ; Jump to the address in HL
040060             0071*       ENDMACRO
040060             0072*   
040060             0073*   ; Simulated call to subroutine at IX
040060             0074*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0075*   ; outputs: whatever the subroutine does, including IX and BC
040060             0076*   ; destroys: only what the subroutine does, but always BC
040060             0077*       MACRO CALL_IX
040060             0078*       ld bc,$+6 ; Address of first instruction after the jump
040060             0079*       push bc ; which constitutes the return address
040060             0080*       jp (ix) ; Jump to the address in IX
040060             0081*       ENDMACRO
040060             0082*   
040060             0083*   ; Simulated call to soubroutinte at IY
040060             0084*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0085*   ; outputs: whatever the subroutine does, including IY and BC
040060             0086*   ; destroys: only what the subroutine does, but always BC
040060             0087*       MACRO CALL_IY
040060             0088*       ld bc,$+6 ; Address of first instruction after the jump
040060             0089*       push bc ; which constitutes the return address
040060             0090*       jp (iy) ; Jump to the address in IY
040060             0091*       ENDMACRO
040060             0092*   
040060             0093*   ; put the value in HLU into A
040060             0094*   ; destroys: af
040060             0095*       MACRO HLU_TO_A
040060             0096*       dec sp ; 1 cycle
040060             0097*       push hl ; 4 cycles
040060             0098*       inc sp ; 1 cycle
040060             0099*       pop af ; 4 cycles
040060             0100*       ; 10 cycles total
040060             0101*       ENDMACRO
040060             0102*   
040060             0103*       MACRO PUSH_ALL
040060             0104*       ex af,af'
040060             0105*       exx
040060             0106*       push af
040060             0107*       push hl
040060             0108*       push bc
040060             0109*       push de
040060             0110*   
040060             0111*       ex af,af'
040060             0112*       exx
040060             0113*       push af
040060             0114*       push hl
040060             0115*       push bc
040060             0116*       push de
040060             0117*       push ix
040060             0118*       push iy
040060             0119*       ENDMACRO
040060             0120*   
040060             0121*       MACRO POP_ALL
040060             0122*       pop iy
040060             0123*       pop ix
040060             0124*       pop de
040060             0125*       pop bc
040060             0126*       pop hl
040060             0127*       pop af
040060             0128*       ex af,af'
040060             0129*       exx
040060             0130*   
040060             0131*       pop de
040060             0132*       pop bc
040060             0133*       pop hl
040060             0134*       pop af
040060             0135*       ex af,af'
040060             0136*       exx
040060             0137*       ENDMACRO
040060             0032        include "functions.inc"
040060             0001*   ; Print a zero-terminated string inline with code, e.g.:
040060             0002*   ;
040060             0003*   ;    call printInline
040060             0004*   ;    ASCIZ "Hello, world!\r\n"
040060             0005*   ;
040060             0006*   ; Destroys: HL,AF
040060             0007*   printInline:
040060 E1          0008*       pop hl ; get the return address = pointer to start of string
040061 CD 67 00 04 0009*       call printString ; HL advances to end of string
040065 E5          0010*       push hl ; restore the return address = pointer to end of string
040066 C9          0011*       ret
040067             0012*   
040067             0013*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040067             0014*   ; Print a zero-terminated string
040067             0015*   ; HL: Pointer to string
040067             0016*   printString:
040067 C5          0017*       PUSH BC
040068 01 00 00 00 0018*       LD BC,0
04006C 3E 00       0019*       LD A,0
04006E 5B DF       0020*       RST.LIL 18h
040070 C1          0021*       POP BC
040071 C9          0022*       RET
040072             0023*   ; print a VDU sequence
040072             0024*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
040072             0025*   sendVDUsequence:
040072 C5          0026*       PUSH BC
040073 01 00 00 00 0027*       LD BC, 0
040077 4E          0028*       LD C, (HL)
040078 5B DF       0029*       RST.LIL 18h
04007A C1          0030*       POP BC
04007B C9          0031*       RET
04007C             0032*   ; Print Newline sequence to VDP
04007C             0033*   ; destroys bc
04007C             0034*   printNewLine:
04007C F5          0035*       push af ; for some reason rst.lil 10h sets carry flag
04007D 3E 0D       0036*       LD A, '\r'
04007F 5B D7       0037*       RST.LIL 10h
040081 3E 0A       0038*       LD A, '\n'
040083 5B D7       0039*       RST.LIL 10h
040085 F1          0040*       pop af
040086 C9          0041*       RET
040087             0042*   
040087             0043*   ; print a zero-terminated string at a graphics coordinate
040087             0044*   ; Inputs: HL Pointer to string, BC,DE x,y position (in pixels)
040087             0045*   printStringGfx:
040087 E5          0046*       push hl ; preserve string pointer
040088             0047*   ; move graphics cursor to x,y location
040088 3E 44       0048*       ld a,plot_pt+mv_abs
04008A CD 1A 18 04 0049*       call vdu_plot
04008E             0050*   ; print string
04008E E1          0051*       pop hl ; restore string pointer
04008F             0052*   @print_loop:
04008F 7E          0053*       ld a,(hl)
040090 B7          0054*       or a ; check for end of string
040091 C8          0055*       ret z ; if zero, we're done
040092 08          0056*       ex af,af' ; preserve character
040093 3E 05       0057*       ld a,5 ; VDU 5 char to gfx cursor
040095 5B D7       0058*       rst.lil 10h ; send it
040097 08          0059*       ex af,af' ; restore character
040098 5B D7       0060*       rst.lil 10h ; print character
04009A 23          0061*       inc hl
04009B C3 8F 00 04 0062*       jp @print_loop
04009F C9          0063*       ret
0400A0             0064*   ; end printStringGfx
0400A0             0065*   
0400A0             0066*   ; Print a 24-bit HEX number
0400A0             0067*   ; HLU: Number to print
0400A0             0068*   printHex24:
0400A0             0069*       HLU_TO_A
0400A0 3B          0001*M1     dec sp ; 1 cycle
0400A1 E5          0002*M1     push hl ; 4 cycles
0400A2 33          0003*M1     inc sp ; 1 cycle
0400A3 F1          0004*M1     pop af ; 4 cycles
0400A4             0005*M1     ; 10 cycles total
0400A4 CD AE 00 04 0070*       CALL printHex8
0400A8             0071*   ; Print a 16-bit HEX number
0400A8             0072*   ; HL: Number to print
0400A8             0073*   printHex16:
0400A8 7C          0074*       LD A,H
0400A9 CD AE 00 04 0075*       CALL printHex8
0400AD 7D          0076*       LD A,L
0400AE             0077*   ; Print an 8-bit HEX number
0400AE             0078*   ; A: Number to print
0400AE             0079*   printHex8:
0400AE 4F          0080*       LD C,A
0400AF 1F          0081*       RRA
0400B0 1F          0082*       RRA
0400B1 1F          0083*       RRA
0400B2 1F          0084*       RRA
0400B3 CD B8 00 04 0085*       CALL @F
0400B7 79          0086*       LD A,C
0400B8             0087*   @@:
0400B8 E6 0F       0088*       AND 0Fh
0400BA C6 90       0089*       ADD A,90h
0400BC 27          0090*       DAA
0400BD CE 40       0091*       ADC A,40h
0400BF 27          0092*       DAA
0400C0 5B D7       0093*       RST.LIL 10h
0400C2 C9          0094*       RET
0400C3             0095*   
0400C3             0096*   ; Print a 0x HEX prefix
0400C3             0097*   DisplayHexPrefix:
0400C3 3E 30       0098*       LD A, '0'
0400C5 5B D7       0099*       RST.LIL 10h
0400C7 3E 78       0100*       LD A, 'x'
0400C9 5B D7       0101*       RST.LIL 10h
0400CB C9          0102*       RET
0400CC             0103*   
0400CC             0104*       MACRO printDecBC
0400CC             0105*       push hl
0400CC             0106*       push bc
0400CC             0107*       pop hl
0400CC             0108*       call printDec
0400CC             0109*       pop hl
0400CC             0110*       ENDMACRO
0400CC             0111*   
0400CC             0112*       MACRO printDecDE
0400CC             0113*       push hl
0400CC             0114*       push de
0400CC             0115*       pop hl
0400CC             0116*       call printDec
0400CC             0117*       pop hl
0400CC             0118*       ENDMACRO
0400CC             0119*   
0400CC             0120*       MACRO printDecHL
0400CC             0121*       call printDec
0400CC             0122*       ENDMACRO
0400CC             0123*   
0400CC             0124*       MACRO printDecIX
0400CC             0125*       push hl
0400CC             0126*       push ix
0400CC             0127*       pop hl
0400CC             0128*       call printDec
0400CC             0129*       pop hl
0400CC             0130*       ENDMACRO
0400CC             0131*   
0400CC             0132*       MACRO printDecIY
0400CC             0133*       push hl
0400CC             0134*       push iy
0400CC             0135*       pop hl
0400CC             0136*       call printDec
0400CC             0137*       pop hl
0400CC             0138*       ENDMACRO
0400CC             0139*   
0400CC             0140*   
0400CC             0141*   ; Prints the right justified decimal value in HL without leading zeroes
0400CC             0142*   ; HL : Value to print
0400CC             0143*   ; preserves all registers and flags
0400CC             0144*   printDec:
0400CC             0145*   ; BEGIN MY CODE
0400CC             0146*   ; back up all the things
0400CC F5          0147*       push af
0400CD C5          0148*       push bc
0400CE D5          0149*       push de
0400CF E5          0150*       push hl
0400D0             0151*   ; END MY CODE
0400D0 11 F8 00 04 0152*       LD DE, _printDecBuffer
0400D4 CD 08 01 04 0153*       CALL u24_to_ascii
0400D8             0154*   ; BEGIN MY CODE
0400D8             0155*   ; replace leading zeroes with spaces
0400D8 21 F8 00 04 0156*       LD HL, _printDecBuffer
0400DC 06 07       0157*       ld B, 7 ; if HL was 0, we want to keep the final zero
0400DE             0158*   @loop:
0400DE 7E          0159*       LD A, (HL)
0400DF FE 30       0160*       CP '0'
0400E1 C2 EB 00 04 0161*       JP NZ, @done
0400E5 3E 20       0162*       LD A, ' '
0400E7 77          0163*       LD (HL), A
0400E8 23          0164*       INC HL
0400E9             0165*       ; CALL vdu_cursor_forward
0400E9 10 F3       0166*       DJNZ @loop
0400EB             0167*   @done:
0400EB             0168*   ; END MY CODE
0400EB 21 F8 00 04 0169*       LD HL, _printDecBuffer
0400EF CD 67 00 04 0170*       CALL printString
0400F3             0171*   ; BEGIN MY CODE
0400F3             0172*   ; restore all the things
0400F3 E1          0173*       pop hl
0400F4 D1          0174*       pop de
0400F5 C1          0175*       pop bc
0400F6 F1          0176*       pop af
0400F7             0177*   ; END MY CODE
0400F7 C9          0178*       RET
0400F8 00 00 00 00 0179*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040108             0180*   
040108             0181*   ; This routine converts the unsigned 24-bit value in HLU into its ASCII representation,
040108             0182*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040108             0183*   ; so it will allways be 8 characters length
040108             0184*   ; HL : Value to convert to string
040108             0185*   ; DE : pointer to buffer, at least 8 byte + 0
040108             0186*   u24_to_ascii:
040108 01 80 69 67 0187*       LD BC,-10000000
04010C CD 3F 01 04 0188*       CALL @one_digit
040110 01 C0 BD F0 0189*       LD BC,-1000000
040114 CD 3F 01 04 0190*       CALL @one_digit
040118 01 60 79 FE 0191*       LD BC,-100000
04011C CD 3F 01 04 0192*       CALL @one_digit
040120 01 F0 D8 FF 0193*       LD BC,-10000
040124 CD 3F 01 04 0194*       CALL @one_digit
040128 01 18 FC FF 0195*       LD BC,-1000
04012C CD 3F 01 04 0196*       CALL @one_digit
040130 01 9C FF FF 0197*       LD BC,-100
040134 CD 3F 01 04 0198*       CALL @one_digit
040138 0E F6       0199*       LD C,-10
04013A CD 3F 01 04 0200*       CALL @one_digit
04013E 48          0201*       LD C,B
04013F             0202*   @one_digit:
04013F 3E 2F       0203*       LD A,'0'-1
040141             0204*   @divide_me:
040141 3C          0205*       INC A
040142 09          0206*       ADD HL,BC
040143 38 FC       0207*       JR C,@divide_me
040145 ED 42       0208*       SBC HL,BC
040147 12          0209*       LD (DE),A
040148 13          0210*       INC DE
040149 C9          0211*       RET
04014A             0212*   
04014A             0213*   print_u24:
04014A D5          0214*       push de
04014B E5          0215*       push hl
04014C 11 F8 00 04 0216*       ld de,_printDecBuffer
040150 CD 08 01 04 0217*       call u24_to_ascii
040154 21 F8 00 04 0218*       ld hl,_printDecBuffer
040158 CD 67 00 04 0219*       call printString
04015C 3E 20       0220*       ld a,' '
04015E 5B D7       0221*       rst.lil 10h
040160 E1          0222*       pop hl
040161 D1          0223*       pop de
040162 C9          0224*       ret
040163             0225*   
040163             0226*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
040163             0227*   ; HL : Value to convert to string (integer part in H, fractional part in L)
040163             0228*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
040163             0229*   u168_to_ascii:
040163             0230*   ; add a leading space to make room for sign flag if needed
040163 3E 20       0231*       ld a,' '
040165 12          0232*       ld (de),a
040166 13          0233*       inc de
040167             0234*   ; Convert integer part
040167 E5          0235*       push hl ; Save HL (we’ll need the fractional part later)
040168             0236*       ; call hlu_udiv256 ; Shift to get integer portion in HL
040168             0237*       SRL_UHL ; Shift to get integer portion in HL
040168 3B          0001*M1     dec sp ; 1 cycle
040169 E5          0002*M1     push hl ; 4 cycles
04016A 33          0003*M1     inc sp ; 1 cycle
04016B E1          0004*M1     pop hl ; 4 cycles
04016C 23          0005*M1     inc hl ; 1 cycle
04016D 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04016F             0007*M1     ; 13 cycles total
04016F 01 F0 D8 FF 0238*       ld bc, -10000
040173 CD 96 01 04 0239*       call @one_int
040177 01 18 FC FF 0240*       ld bc, -1000
04017B CD 96 01 04 0241*       call @one_int
04017F 01 9C FF FF 0242*       ld bc, -100
040183 CD 96 01 04 0243*       call @one_int
040187 0E F6       0244*       ld c, -10
040189 CD 96 01 04 0245*       call @one_int
04018D 48          0246*       ld c, b
04018E CD 96 01 04 0247*       call @one_int
040192 C3 A1 01 04 0248*       jp @frac ; Jump to fractional part conversion
040196             0249*   @one_int:
040196 3E 2F       0250*       ld a, '0' - 1 ; Start ASCII character at '0'
040198             0251*   @divide_me:
040198 3C          0252*       inc a
040199 09          0253*       add hl, bc ; Accumulate until overflow
04019A 38 FC       0254*       jr c, @divide_me
04019C ED 42       0255*       sbc hl, bc ; Remove excess after overflow
04019E 12          0256*       ld (de), a ; Store ASCII digit
04019F 13          0257*       inc de
0401A0 C9          0258*       ret
0401A1             0259*   ; Convert fractional part
0401A1             0260*   @frac:
0401A1 3E 2E       0261*       ld a, '.' ; Decimal point
0401A3 12          0262*       ld (de), a
0401A4 13          0263*       inc de
0401A5 E1          0264*       pop hl ; Restore HL with original fraction
0401A6 06 03       0265*       ld b, 3 ; Loop counter for 3 fractional digits
0401A8             0266*   @frac_loop:
0401A8 26 0A       0267*       ld h, 10 ; Load multiplier for fractional part
0401AA ED 6C       0268*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0401AC 3E 30       0269*       ld a, '0'
0401AE 84          0270*       add a, h ; Convert integer part to ASCII
0401AF 12          0271*       ld (de), a
0401B0 13          0272*       inc de
0401B1 10 F5       0273*       djnz @frac_loop ; Repeat for each fractional digit
0401B3             0274*   ; Add null terminator
0401B3 AF          0275*       xor a ; Null terminator
0401B4 12          0276*       ld (de), a
0401B5 C9          0277*       ret
0401B6             0278*   
0401B6             0279*   print_u168:
0401B6 D5          0280*       push de
0401B7 E5          0281*       push hl
0401B8 11 F8 00 04 0282*       ld de,_printDecBuffer
0401BC CD 63 01 04 0283*       call u168_to_ascii
0401C0 21 F8 00 04 0284*       ld hl,_printDecBuffer
0401C4 CD 67 00 04 0285*       call printString
0401C8 E1          0286*       pop hl
0401C9 D1          0287*       pop de
0401CA C9          0288*       ret
0401CB             0289*   
0401CB             0290*   ; signed version of u168_to_ascii
0401CB             0291*   s168_to_ascii:
0401CB D5          0292*       push de ; save starting address of buffer
0401CC CD 70 04 04 0293*       call hlu_abs
0401D0 F5          0294*       push af ; save sign flag
0401D1 CD 63 01 04 0295*       call u168_to_ascii
0401D5 F1          0296*       pop af ; restore sign flag
0401D6 D1          0297*       pop de ; restore starting address of buffer
0401D7 F0          0298*       ret p ; hlu was positive so nothing to do
0401D8 3E 2D       0299*       ld a,'-'
0401DA 12          0300*       ld (de),a
0401DB C9          0301*       ret
0401DC             0302*   
0401DC             0303*   print_s168:
0401DC D5          0304*       push de
0401DD E5          0305*       push hl
0401DE 11 F8 00 04 0306*       ld de,_printDecBuffer
0401E2 CD CB 01 04 0307*       call s168_to_ascii
0401E6 21 F8 00 04 0308*       ld hl,_printDecBuffer
0401EA CD 67 00 04 0309*       call printString
0401EE E1          0310*       pop hl
0401EF D1          0311*       pop de
0401F0 C9          0312*       ret
0401F1             0313*   
0401F1             0314*   print_s168_hl:
0401F1 F5          0315*       push af
0401F2 E5          0316*       push hl
0401F3 CD DC 01 04 0317*       call print_s168
0401F7 3E 20       0318*       ld a,' '
0401F9 5B D7       0319*       rst.lil 10h
0401FB E1          0320*       pop hl
0401FC F1          0321*       pop af
0401FD C9          0322*       ret
0401FE             0323*   
0401FE             0324*   print_s168_bc:
0401FE F5          0325*       push af
0401FF C5          0326*       push bc
040200 E5          0327*       push hl
040201 C5          0328*       push bc
040202 E1          0329*       pop hl
040203 CD DC 01 04 0330*       call print_s168
040207 3E 20       0331*       ld a,' '
040209 5B D7       0332*       rst.lil 10h
04020B E1          0333*       pop hl
04020C C1          0334*       pop bc
04020D F1          0335*       pop af
04020E C9          0336*       ret
04020F             0337*   
04020F             0338*   print_s168_de:
04020F F5          0339*       push af
040210 D5          0340*       push de
040211 E5          0341*       push hl
040212 EB          0342*       ex de,hl
040213 CD DC 01 04 0343*       call print_s168
040217 3E 20       0344*       ld a,' '
040219 5B D7       0345*       rst.lil 10h
04021B E1          0346*       pop hl
04021C D1          0347*       pop de
04021D F1          0348*       pop af
04021E C9          0349*       ret
04021F             0350*   
04021F             0351*   print_s168_hl_bc_de:
04021F F5          0352*       push af
040220 C5          0353*       push bc
040221 D5          0354*       push de
040222 E5          0355*       push hl
040223 CD DC 01 04 0356*       call print_s168
040227 3E 20       0357*       ld a,' '
040229 5B D7       0358*       rst.lil 10h
04022B C5          0359*       push bc
04022C E1          0360*       pop hl
04022D CD DC 01 04 0361*       call print_s168
040231 3E 20       0362*       ld a,' '
040233 5B D7       0363*       rst.lil 10h
040235 EB          0364*       ex de,hl
040236 CD DC 01 04 0365*       call print_s168
04023A 3E 20       0366*       ld a,' '
04023C 5B D7       0367*       rst.lil 10h
04023E E1          0368*       pop hl
04023F D1          0369*       pop de
040240 C1          0370*       pop bc
040241 F1          0371*       pop af
040242 C9          0372*       ret
040243             0373*   
040243             0374*   print_s168_bc_de:
040243 F5          0375*       push af
040244 C5          0376*       push bc
040245 D5          0377*       push de
040246 C5          0378*       push bc
040247 E1          0379*       pop hl
040248 CD DC 01 04 0380*       call print_s168
04024C 3E 20       0381*       ld a,' '
04024E 5B D7       0382*       rst.lil 10h
040250 EB          0383*       ex de,hl
040251 CD DC 01 04 0384*       call print_s168
040255 3E 20       0385*       ld a,' '
040257 5B D7       0386*       rst.lil 10h
040259 E1          0387*       pop hl
04025A D1          0388*       pop de
04025B C1          0389*       pop bc
04025C F1          0390*       pop af
04025D C9          0391*       ret
04025E             0392*   
04025E             0393*   print_s168_a:
04025E F5          0394*       push af
04025F C5          0395*       push bc
040260 E5          0396*       push hl
040261 21 00 00 00 0397*       ld hl,0
040265 6F          0398*       ld l,a
040266 CD F1 01 04 0399*       call print_s168_hl
04026A E1          0400*       pop hl
04026B C1          0401*       pop bc
04026C F1          0402*       pop af
04026D C9          0403*       ret
04026E             0404*   
04026E             0405*   ; #### new functions added by Brandon R. Gates ####
04026E             0406*   
04026E             0407*   ; print the binary representation of the 8-bit value in a
04026E             0408*   ; destroys a, hl, bc
04026E             0409*   printBin8:
04026E 06 08       0410*       ld b,8 ; loop counter for 8 bits
040270 21 8B 02 04 0411*       ld hl,@cmd ; set hl to the low byte of the output string
040274             0412*       ; (which will be the high bit of the value in a)
040274             0413*   @loop:
040274 07          0414*       rlca ; put the next highest bit into carry
040275 38 04       0415*       jr c,@one
040277 36 30       0416*       ld (hl),'0'
040279 18 02       0417*       jr @next_bit
04027B             0418*   @one:
04027B 36 31       0419*       ld (hl),'1'
04027D             0420*   @next_bit:
04027D 23          0421*       inc hl
04027E 10 F4       0422*       djnz @loop
040280             0423*   ; print it
040280 21 8B 02 04 0424*       ld hl,@cmd
040284 01 08 00 00 0425*       ld bc,@end-@cmd
040288 5B DF       0426*       rst.lil $18
04028A C9          0427*       ret
04028B             0428*   @cmd: ds 8 ; eight bytes for eight bits
040293             0429*   @end:
040293             0430*   
040293             0431*   ; print the binary representation of the 8-bit value in a
040293             0432*   ; in reverse order (lsb first)
040293             0433*   ; destroys a, hl, bc
040293             0434*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
040293 06 08       0435*       ld b,8 ; loop counter for 8 bits
040295 21 B0 02 04 0436*       ld hl,@cmd ; set hl to the low byte of the output string
040299             0437*       ; (which will be the high bit of the value in a)
040299             0438*   @loop:
040299 0F          0439*       rrca ; put the next lowest bit into carry
04029A 38 04       0440*       jr c,@one
04029C 36 30       0441*       ld (hl),'0'
04029E 18 02       0442*       jr @next_bit
0402A0             0443*   @one:
0402A0 36 31       0444*       ld (hl),'1'
0402A2             0445*   @next_bit:
0402A2 23          0446*       inc hl
0402A3 10 F4       0447*       djnz @loop
0402A5             0448*   ; print it
0402A5 21 B0 02 04 0449*       ld hl,@cmd
0402A9 01 08 00 00 0450*       ld bc,@end-@cmd
0402AD 5B DF       0451*       rst.lil $18
0402AF C9          0452*       ret
0402B0             0453*   @cmd: ds 8 ; eight bytes for eight bits
0402B8             0454*   @end:
0402B8             0455*   
       FF FF FF FF 
       FF FF FF FF 
0402B8 20 61 66 3D 0456*   str_afu: db " af=",0
       00          
0402BD 20 68 6C 3D 0457*   str_hlu: db " hl=",0
       00          
0402C2 20 62 63 3D 0458*   str_bcu: db " bc=",0
       00          
0402C7 20 64 65 3D 0459*   str_deu: db " de=",0
       00          
0402CC 20 69 78 3D 0460*   str_ixu: db " ix=",0
       00          
0402D1 20 69 79 3D 0461*   str_iyu: db " iy=",0
       00          
0402D6             0462*   
0402D6             0463*   ; print udeuhl to screen in hexidecimal format
0402D6             0464*   ; inputs: none
0402D6             0465*   ; outputs: concatenated hexidecimal udeuhl
0402D6             0466*   ; destroys: nothing
0402D6             0467*   dumpUDEUHLHex:
0402D6             0468*   ; store everything in scratch
0402D6 22 35 03 04 0469*       ld (uhl),hl
0402DA ED 43 38 03 0470*       ld (ubc),bc
       04          
0402DF ED 53 3B 03 0471*       ld (ude),de
       04          
0402E4 DD 22 3E 03 0472*       ld (uix),ix
       04          
0402E9 FD 22 41 03 0473*       ld (uiy),iy
       04          
0402EE F5          0474*       push af
0402EF             0475*   
0402EF             0476*   ; print each register
0402EF             0477*   
0402EF 21 29 03 04 0478*       ld hl,str_udeuhl
0402F3 CD 67 00 04 0479*       call printString
0402F7 2A 3B 03 04 0480*       ld hl,(ude)
0402FB CD A0 00 04 0481*       call printHex24
0402FF 3E 2E       0482*       ld a,'.' ; print a dot to separate the values
040301 5B D7       0483*       rst.lil 10h
040303 2A 35 03 04 0484*       ld hl,(uhl)
040307 CD A0 00 04 0485*       call printHex24
04030B CD 7C 00 04 0486*       call printNewLine
04030F             0487*   
04030F             0488*   ; restore everything
04030F 2A 35 03 04 0489*       ld hl, (uhl)
040313 ED 4B 38 03 0490*       ld bc, (ubc)
       04          
040318 ED 5B 3B 03 0491*       ld de, (ude)
       04          
04031D DD 2A 3E 03 0492*       ld ix, (uix)
       04          
040322 FD 2A 41 03 0493*       ld iy, (uiy)
       04          
040327 F1          0494*       pop af
040328             0495*   ; all done
040328 C9          0496*       ret
040329             0497*   
040329 75 64 65 2E 0498*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
040332             0499*   
040332             0500*   ; global scratch memory for registers
040332 00 00 00    0501*   uaf: dl 0
040335 00 00 00    0502*   uhl: dl 0
040338 00 00 00    0503*   ubc: dl 0
04033B 00 00 00    0504*   ude: dl 0
04033E 00 00 00    0505*   uix: dl 0
040341 00 00 00    0506*   uiy: dl 0
040344 00 00 00    0507*   usp: dl 0
040347 00 00 00    0508*   upc: dl 0
04034A             0509*   
04034A             0510*   
04034A             0511*   ; set all the bits in the flag register
04034A             0512*   ; more of an academic exercise than anything useful
04034A             0513*   ; inputs; none
04034A             0514*   ; outputs; a=0,f=255
04034A             0515*   ; destroys: flags, hl
04034A             0516*   ; preserves: a, because why not
04034A             0517*   setAllFlags:
04034A 21 FF 00 00 0518*       ld hl,255
04034E 67          0519*       ld h,a ; four cycles to preserve a is cheap
04034F E5          0520*       push hl
040350 F1          0521*       pop af
040351 C9          0522*       ret
040352             0523*   
040352             0524*   ; reset all the bits in the flag register
040352             0525*   ; unlike its inverse counterpart, this may actually be useful
040352             0526*   ; inputs; none
040352             0527*   ; outputs; a=0,f=0
040352             0528*   ; destroys: flags, hl
040352             0529*   ; preserves: a, because why not
040352             0530*   resetAllFlags:
040352 21 00 00 00 0531*       ld hl,0
040356 67          0532*       ld h,a ; four cycles to preserve a is cheap
040357 E5          0533*       push hl
040358 F1          0534*       pop af
040359 C9          0535*       ret
04035A             0536*   
04035A             0537*   ; wait until user presses a key
04035A             0538*   ; inputs: none
04035A             0539*   ; outputs: ascii code of key pressed in a
04035A             0540*   ; destroys: af,ix
04035A             0541*   waitKeypress:
04035A             0542*       MOSCALL mos_getkey
04035A 3E 00       0001*M1 			LD	A, function
04035C 5B CF       0002*M1 			RST.LIL	08h
04035E C9          0543*       ret
04035F             0544*   
04035F             0545*   ; clear a block of memory by writing a prescribed value to each byte in the range
04035F             0546*   ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
04035F             0547*   ; outputs: memory block is cleared
04035F             0548*   ; destroys: hl, de
04035F             0549*   clear_mem:
04035F 0B          0550*       dec bc ; we do this because we will increment de before writing the first byte
040360 77          0551*       ld (hl),a
040361 E5          0552*       push hl
040362 D1          0553*       pop de
040363 13          0554*       inc de ; target address
040364 ED B0       0555*       ldir
040366 C9          0556*       ret
040367             0033        include "arith24.inc"
040367             0001*   ;------------------------------------------------------------------------
040367             0002*   ;  arith24.asm
040367             0003*   ;  24-bit ez80 arithmetic routines
040367             0004*   ;  Copyright (c) Shawn Sijnstra 2024
040367             0005*   ;  MIT license
040367             0006*   ;
040367             0007*   ;  This library was created as a tool to help make ez80
040367             0008*   ;  24-bit native assembly routines for simple mathematical problems
040367             0009*   ;  more widely available.
040367             0010*   ;
040367             0011*   ;------------------------------------------------------------------------
040367             0012*   
040367             0013*   ;------------------------------------------------------------------------
040367             0014*   ; umul24:	HL = HL*DE (unsigned)
040367             0015*   ; Preserves AF, BC, DE
040367             0016*   ; Uses a fast multiply routine.
040367             0017*   ;------------------------------------------------------------------------
040367             0018*   umul24:
040367 D5          0019*   	push	DE
040368 C5          0020*   	push	BC
040369 F5          0021*   	push	AF
04036A E5          0022*   	push	HL
04036B C1          0023*   	pop		BC
04036C 3E 18       0024*       ld	 	a, 24 ; No. of bits to process
04036E 21 00 00 00 0025*       ld	 	hl, 0 ; Result
040372             0026*   umul24_lp:
040372 29          0027*   	add	hl,hl
040373 EB          0028*   	ex	de,hl
040374 29          0029*   	add	hl,hl
040375 EB          0030*   	ex	de,hl
040376 30 01       0031*   	jr	nc,umul24_nc
040378 09          0032*   	add	hl,bc
040379             0033*   umul24_nc:
040379 3D          0034*   	dec	a
04037A 20 F6       0035*   	jr	nz,umul24_lp
04037C F1          0036*   	pop	af
04037D C1          0037*   	pop	bc
04037E D1          0038*   	pop	de
04037F C9          0039*   	ret
040380             0040*   
040380             0041*   
040380             0042*   ;------------------------------------------------------------------------
040380             0043*   ; udiv24
040380             0044*   ; Unsigned 24-bit division
040380             0045*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
040380             0046*   ;
040380             0047*   ; Uses AF BC DE HL
040380             0048*   ; Uses Restoring Division algorithm
040380             0049*   ;------------------------------------------------------------------------
040380             0050*   
040380             0051*   udiv24:
040380 E5          0052*   	push	hl
040381 C1          0053*   	pop		bc	;move dividend to BCU
040382 21 00 00 00 0054*   	ld		hl,0	;result
040386 A7          0055*   	and		a
040387 ED 52       0056*   	sbc		hl,de	;test for div by 0
040389 C8          0057*   	ret		z		;it's zero, carry flag is clear
04038A 19          0058*   	add		hl,de	;HL is 0 again
04038B 3E 18       0059*   	ld		a,24	;number of loops through.
04038D             0060*   udiv1:
04038D C5          0061*   	push	bc	;complicated way of doing this because of lack of access to top bits
04038E E3          0062*   	ex		(sp),hl
04038F 37          0063*   	scf
040390 ED 6A       0064*   	adc	hl,hl
040392 E3          0065*   	ex	(sp),hl
040393 C1          0066*   	pop	bc		;we now have bc = (bc * 2) + 1
040394             0067*   
040394 ED 6A       0068*   	adc	hl,hl
040396 A7          0069*   	and	a		;is this the bug
040397 ED 52       0070*   	sbc	hl,de
040399 30 02       0071*   	jr	nc,udiv2
04039B 19          0072*   	add	hl,de
04039C             0073*   ;	dec	c
04039C 0B          0074*   	dec	bc
04039D             0075*   udiv2:
04039D 3D          0076*   	dec	a
04039E 20 ED       0077*   	jr	nz,udiv1
0403A0 37          0078*   	scf		;flag used for div0 error
0403A1 C5          0079*   	push	bc
0403A2 D1          0080*   	pop		de	;remainder
0403A3 C9          0081*   	ret
0403A4             0082*   
0403A4             0083*   
0403A4             0084*   
0403A4             0085*   ;------------------------------------------------------------------------
0403A4             0086*   ; neg24
0403A4             0087*   ; Returns: HLU = 0-HLU
0403A4             0088*   ; preserves all other registers
0403A4             0089*   ;------------------------------------------------------------------------
0403A4             0090*   neg24:
0403A4 D5          0091*   	push	de
0403A5 EB          0092*   	ex		de,hl
0403A6 21 00 00 00 0093*   	ld		hl,0
0403AA B7          0094*   	or		a
0403AB ED 52       0095*   	sbc		hl,de
0403AD D1          0096*   	pop		de
0403AE C9          0097*   	ret
0403AF             0098*   
0403AF             0099*   ;------------------------------------------------------------------------
0403AF             0100*   ; or_hlu_deu: 24 bit bitwise OR
0403AF             0101*   ; Returns: hlu = hlu OR deu
0403AF             0102*   ; preserves all other registers
0403AF             0103*   ;------------------------------------------------------------------------
0403AF             0104*   or_hlu_deu:
0403AF 22 38 04 04 0105*   	ld	(bitbuf1),hl
0403B3 ED 53 3B 04 0106*   	ld	(bitbuf2),de
       04          
0403B8 D5          0107*   	push	de	;preserve DEU
0403B9 C5          0108*   	push	bc	;preserve BCU
0403BA 06 03       0109*   	ld		b,3
0403BC 21 38 04 04 0110*   	ld	hl,bitbuf1
0403C0 11 38 04 04 0111*   	ld	de,bitbuf1
0403C4             0112*   orloop_24:
0403C4 1A          0113*   	ld	a,(de)
0403C5 B6          0114*   	or	(hl)
0403C6 12          0115*   	ld	(de),a
0403C7 13          0116*   	inc	de
0403C8 23          0117*   	inc	hl
0403C9 10 F9       0118*   	djnz	orloop_24
0403CB 2A 3B 04 04 0119*   	ld	hl,(bitbuf2)
0403CF C1          0120*   	pop		bc	;restore BC
0403D0 D1          0121*   	pop		de	;restore DE
0403D1             0122*   
0403D1             0123*   ;------------------------------------------------------------------------
0403D1             0124*   ; and_hlu_deu: 24 bit bitwise AND
0403D1             0125*   ; Returns: hlu = hlu AND deu
0403D1             0126*   ; preserves all other registers
0403D1             0127*   ;------------------------------------------------------------------------
0403D1             0128*   and_hlu_deu:
0403D1 22 38 04 04 0129*   	ld	(bitbuf1),hl
0403D5 ED 53 3B 04 0130*   	ld	(bitbuf2),de
       04          
0403DA D5          0131*   	push	de	;preserve DEU
0403DB C5          0132*   	push	bc	;preserve BCU
0403DC 06 03       0133*   	ld		b,3
0403DE 21 38 04 04 0134*   	ld	hl,bitbuf1
0403E2 11 38 04 04 0135*   	ld	de,bitbuf1
0403E6             0136*   andloop_24:
0403E6 1A          0137*   	ld	a,(de)
0403E7 A6          0138*   	and	(hl)
0403E8 12          0139*   	ld	(de),a
0403E9 13          0140*   	inc	de
0403EA 23          0141*   	inc	hl
0403EB 10 F9       0142*   	djnz	andloop_24
0403ED 2A 3B 04 04 0143*   	ld	hl,(bitbuf2)
0403F1 C1          0144*   	pop		bc	;restore BC
0403F2 D1          0145*   	pop		de	;restore DE
0403F3             0146*   
0403F3             0147*   ;------------------------------------------------------------------------
0403F3             0148*   ; xor_hlu_deu: 24 bit bitwise XOR
0403F3             0149*   ; Returns: hlu = hlu XOR deu
0403F3             0150*   ; preserves all other registers
0403F3             0151*   ;------------------------------------------------------------------------
0403F3             0152*   xor_hlu_deu:
0403F3 22 38 04 04 0153*   	ld	(bitbuf1),hl
0403F7 ED 53 3B 04 0154*   	ld	(bitbuf2),de
       04          
0403FC D5          0155*   	push	de	;preserve DEU
0403FD C5          0156*   	push	bc	;preserve BCU
0403FE 06 03       0157*   	ld		b,3
040400 21 38 04 04 0158*   	ld	hl,bitbuf1
040404 11 38 04 04 0159*   	ld	de,bitbuf1
040408             0160*   xorloop_24:
040408 1A          0161*   	ld	a,(de)
040409 AE          0162*   	xor	(hl)
04040A 12          0163*   	ld	(de),a
04040B 13          0164*   	inc	de
04040C 23          0165*   	inc	hl
04040D 10 F9       0166*   	djnz	xorloop_24
04040F 2A 3B 04 04 0167*   	ld	hl,(bitbuf2)
040413 C1          0168*   	pop		bc	;restore BC
040414 D1          0169*   	pop		de	;restore DE
040415             0170*   
040415             0171*   ;------------------------------------------------------------------------
040415             0172*   ; shl_hlu: 24 bit shift left hlu by a positions
040415             0173*   ; Returns: hlu = hlu << a
040415             0174*   ;		   a = 0
040415             0175*   ; NOTE: only considers a up to 16 bits.
040415             0176*   ; preserves all other registers
040415             0177*   ; modified by Brandon R. Gates to use a instead of de
040415             0178*   ;------------------------------------------------------------------------
040415             0179*   shl_hlu:
040415 B7          0180*   	or a
040416 C8          0181*   	ret		z		;we're done
040417 29          0182*   	add		hl,hl	;shift HLU left
040418 3D          0183*   	dec a
040419 18 FA       0184*   	jr		shl_hlu
04041B             0185*   
04041B             0186*   ;------------------------------------------------------------------------
04041B             0187*   ; shr_hlu: 24 bit shift right hlu by a positions
04041B             0188*   ; Returns: hlu = hlu >> a
04041B             0189*   ;		   a = 0
04041B             0190*   ; NOTE: only considers a up to 16 bits.
04041B             0191*   ; preserves all other registers
04041B             0192*   ; modified by Brandon R. Gates to use a instead of de
04041B             0193*   ;------------------------------------------------------------------------
04041B             0194*   shr_hlu:
04041B 22 38 04 04 0195*   	ld		(bitbuf1),hl
04041F 21 3A 04 04 0196*   	ld		hl,bitbuf1+2
040423             0197*   @shr_loop:
040423 B7          0198*   	or a
040424 28 0D       0199*   	jr		z,@shr_done		;we're done
040426             0200*   ;carry is clear from or instruction
040426 CB 1E       0201*   	rr		(hl)
040428 2B          0202*   	dec		hl
040429 CB 1E       0203*   	rr		(hl)
04042B 2B          0204*   	dec		hl
04042C CB 1E       0205*   	rr		(hl)
04042E 23          0206*   	inc		hl
04042F 23          0207*   	inc		hl
040430 3D          0208*   	dec a
040431 18 F0       0209*   	jr		@shr_loop
040433             0210*   @shr_done:
040433 2A 38 04 04 0211*   	ld		hl,(bitbuf1)	;collect result
040437 C9          0212*   	ret
040438             0213*   
040438             0214*   ;------------------------------------------------------------------------
040438             0215*   ; Scratch area for calculations
040438             0216*   ;------------------------------------------------------------------------
040438 00 00 00    0217*   bitbuf1:	dw24	0	;bit manipulation buffer 1
04043B 00 00 00    0218*   bitbuf2:	dw24	0	;bit manipulation buffer 2
04043E             0219*   
04043E             0220*   ; -----------------------------------------------------------------------
04043E             0221*   ; Functions added by Brandon R. Gates
04043E             0222*   ; -----------------------------------------------------------------------
04043E             0223*   
04043E             0224*   ;------------------------------------------------------------------------
04043E             0225*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
04043E             0226*   ;              Determines the LSB of A and shifts HLU accordingly.
04043E             0227*   ;              HLU = HLU >> LSB(A)
04043E             0228*   ; Returns: HLU = HLU >> LSB(A)
04043E             0229*   ; Destroys: af
04043E             0230*   ;------------------------------------------------------------------------
04043E             0231*   shr_hlu_log2a:
04043E B7          0232*   	or a    ; check for zero
04043F C8          0233*   	ret z   ; nothing to shift so we're done
040440 C5          0234*   	push 	bc ; preserve
040441 06 00       0235*   	ld		b,0 ; clear b
040443             0236*   @find_bit:
040443 0F          0237*   	rrca ; bit 0 to carry
040444 DA 4D 04 04 0238*   	jp c,@found_bit
040448 04          0239*   	inc b ; next bit
040449 C3 43 04 04 0240*   	jp @find_bit
04044D             0241*   @found_bit:
04044D 78          0242*   	ld a,b
04044E CD 1B 04 04 0243*   	call shr_hlu
040452 C1          0244*   	pop 	bc ; restore
040453 C9          0245*   	ret
040454             0246*   ; end shr_hlu_log2a
040454             0247*   
040454             0248*   ;------------------------------------------------------------------------
040454             0249*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040454             0250*   ;                Determines the LSB of A and shifts HLU accordingly.
040454             0251*   ;                HLU = HLU << LSB(A)
040454             0252*   ; Returns: HLU = HLU << LSB(A)
040454             0253*   ; Destroys: af
040454             0254*   ;------------------------------------------------------------------------
040454             0255*   shl_hlu_log2a:
040454 B7          0256*   	or a    ; check for zero
040455 C8          0257*   	ret z   ; nothing to shift so we're done
040456 C5          0258*   	push 	bc ; preserve
040457 06 00       0259*   	ld		b,0 ; clear b
040459             0260*   @find_bit:
040459 0F          0261*   	rrca ; bit 0 to carry
04045A DA 63 04 04 0262*   	jp c,@found_bit
04045E 04          0263*   	inc b ; next bit
04045F C3 59 04 04 0264*   	jp @find_bit
040463             0265*   @found_bit:
040463 78          0266*   	ld a,b
040464 CD 15 04 04 0267*   	call shl_hlu
040468 C1          0268*   	pop 	bc ; restore
040469 C9          0269*   	ret
04046A             0270*   ; end shl_hlu_log2a
04046A             0034        include "maths.inc"
04046A             0001*   ;------------------------------------------------------------------------
04046A             0002*   ; Scratch area for calculations
04046A             0003*   ;------------------------------------------------------------------------
04046A 00 00 00    0004*   scratch1: dw24 0 ;bit manipulation buffer 1
04046D 00 00 00    0005*   scratch2: dw24 0 ;bit manipulation buffer 2
040470             0006*   
040470             0007*   ; absolute value of hlu
040470             0008*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040470             0009*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040470             0010*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040470             0011*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040470             0012*   ; destroys: a
040470             0013*   hlu_abs:
040470 19          0014*       add hl,de
040471 B7          0015*       or a
040472 ED 52       0016*       sbc hl,de
040474 FA 79 04 04 0017*       jp m,@is_neg
040478 C9          0018*       ret ; hlu is positive or zero so we're done
040479             0019*   @is_neg:
040479 F5          0020*       push af ; otherwise, save current flags for return
04047A CD 80 04 04 0021*       call neg_hlu ; negate hlu
04047E F1          0022*       pop af ; get back flags
04047F C9          0023*       ret
040480             0024*   
040480             0025*   ; flip the sign of hlu
040480             0026*   ; inputs: hlu
040480             0027*   ; returns: 0-hlu, flags set appropriately for the result:
040480             0028*   ;         s1,z0,pv0,n1,c1 if result is negative
040480             0029*   ;         s0,z1,pv0,n1,c0 if result is zero
040480             0030*   ;         s0,z0,pv0,n1,c1 if result is positive
040480             0031*   ; destroys a
040480             0032*   neg_hlu:
040480 D5          0033*       push de ; save de
040481 EB          0034*       ex de,hl ; put hl into de
040482 21 00 00 00 0035*       ld hl,0 ; clear hl
040486 AF          0036*       xor a ; clear carry
040487 ED 52       0037*       sbc hl,de ; 0-hlu = -hlu
040489 D1          0038*       pop de ; get de back
04048A C9          0039*       ret ; easy peasy
04048B             0040*   
04048B             0041*   ;------------------------------------------------------------------------
04048B             0042*   ; divide hlu by 2, inspired by above
04048B             0043*   ;------------------------------------------------------------------------
04048B             0044*   hlu_div2:
04048B 22 6A 04 04 0045*       ld (scratch1),hl
04048F 21 6C 04 04 0046*       ld hl,scratch1+2
040493 CB 1E       0047*       rr (hl)
040495 2B          0048*       dec hl
040496 CB 1E       0049*       rr (hl)
040498 2B          0050*       dec hl
040499 CB 1E       0051*       rr (hl)
04049B 23          0052*       inc hl
04049C 23          0053*       inc hl
04049D 2A 6A 04 04 0054*       ld hl,(scratch1)
0404A1 C9          0055*       ret
0404A2             0056*   
0404A2             0057*   ; this is my little hack to divide by 16
0404A2             0058*   hlu_div16:
0404A2 AF          0059*       xor a
0404A3 29          0060*       add hl,hl
0404A4 17          0061*       rla
0404A5 29          0062*       add hl,hl
0404A6 17          0063*       rla
0404A7 29          0064*       add hl,hl
0404A8 17          0065*       rla
0404A9 29          0066*       add hl,hl
0404AA 17          0067*       rla
0404AB 22 B8 04 04 0068*       ld (@scratch),hl
0404AF 32 BB 04 04 0069*       ld (@scratch+3),a
0404B3 2A B9 04 04 0070*       ld hl,(@scratch+1)
0404B7 C9          0071*       ret
0404B8             0072*   @scratch: ds 4
0404BC             0073*   
0404BC             0074*   ; hlu signed division by 256
0404BC             0075*   ; returns: hlu / 256
0404BC             0076*   ; destroys: af
0404BC             0077*   hlu_sdiv256:
       FF FF FF FF 
0404BC AF          0078*       xor a ; assume hl is positive
0404BD 22 D3 04 04 0079*       ld (@buffer),hl
0404C1             0080*       SIGN_HLU
0404C1 19          0001*M1     add hl,de ; 1 cycle
0404C2 B7          0002*M1     or a ; clear flags ; 1 cycle
0404C3 ED 52       0003*M1     sbc hl,de ; 2 cycles
0404C5             0004*M1     ; 4 cycles total
0404C5 F2 CA 04 04 0081*       jp p,@hl_pos
0404C9 3D          0082*       dec a
0404CA             0083*   @hl_pos:
0404CA 32 D6 04 04 0084*       ld (@buffer+3),a
0404CE 2A D4 04 04 0085*       ld hl,(@buffer+1)
0404D2 C9          0086*       ret
0404D3             0087*   @buffer: ds 4
0404D7             0088*   
0404D7             0089*   ; hlu 1 byte right shift, unsigned
0404D7             0090*   ; returns: hlu / 256, fractional portion in a
0404D7             0091*   ; destroys: af
0404D7             0092*   hlu_udiv256:
       FF FF FF FF 
0404D7 AF          0093*       xor a
0404D8 32 E9 04 04 0094*       ld (@buffer+3),a
0404DC 7D          0095*       ld a,l ; save the fractional portion
0404DD 22 E6 04 04 0096*       ld (@buffer),hl
0404E1 2A E7 04 04 0097*       ld hl,(@buffer+1)
0404E5 C9          0098*       ret
0404E6             0099*   @buffer: ds 4
0404EA             0100*   
       FF FF FF FF 
0404EA 00 00 00 00 0101*   add_bcd_arg1: db #00,#00,#00,#00
0404EE 00 00 00 00 0102*   add_bcd_arg2: db #00,#00,#00,#00
0404F2             0103*   
0404F2             0104*   ; set bcd values in a scratch memory address from registers bcde
0404F2             0105*   ; input: hl; scratch address,bcde; 8-place bcd number
0404F2             0106*   ; destroys ; hl
0404F2             0107*   set_bcd:
0404F2 73          0108*       ld (hl),e
0404F3 23          0109*       inc hl
0404F4 72          0110*       ld (hl),d
0404F5 23          0111*       inc hl
0404F6 71          0112*       ld (hl),c
0404F7 23          0113*       inc hl
0404F8 70          0114*       ld (hl),b
0404F9 C9          0115*       ret
0404FA             0116*   
0404FA             0117*   ; load bcd values from a scratch memory address to bcde
0404FA             0118*   ; input: hl; scratch address
0404FA             0119*   ; output: bcde; 8-place bcd number
0404FA             0120*   ; destroys: hl
0404FA             0121*   get_bcd:
0404FA 5E          0122*       ld e,(hl)
0404FB 23          0123*       inc hl
0404FC 56          0124*       ld d,(hl)
0404FD 23          0125*       inc hl
0404FE 4E          0126*       ld c,(hl)
0404FF 23          0127*       inc hl
040500 46          0128*       ld b,(hl)
040501 C9          0129*       ret
040502             0130*   
040502             0131*   ; BCD addition
040502             0132*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040502             0133*   ;       a is the number of bytes holding each number (number of places/2)
040502             0134*   ; outputs: (hl) + (de) --> (hl)
040502             0135*   ; destroys: a,b,de,hl
040502             0136*   add_bcd:
040502 47          0137*       ld b,a ; loop counter
040503 AF          0138*       xor a ; reset a, clear carry flag
040504             0139*   adcec:
040504 1A          0140*       ld a,(de) ; addend to acc
040505 8E          0141*       adc a,(hl) ; add (hl) to acc
040506 27          0142*       daa ; adjust result to bcd
040507 77          0143*       ld (hl),a ; store result
040508 23          0144*       inc hl ; advance memory pointers
040509 13          0145*       inc de
04050A 10 F8       0146*       djnz adcec ; loop until b == 0
04050C C9          0147*       ret
04050D             0148*   
04050D             0149*   ; BCD subtraction
04050D             0150*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04050D             0151*   ;       a is the number of bytes holding each number (number of places/2)
04050D             0152*   ; outputs: (hl) - (de) --> (hl)
04050D             0153*   ; destroys: a,b,de,hl
04050D             0154*   sub_bcd:
04050D 47          0155*       ld b,a ; loop counter
04050E AF          0156*       xor a ; reset a,clear carry flag
04050F             0157*   subdec:
04050F 1A          0158*       ld a,(de) ; subtrahend to acc
040510 9E          0159*       sbc a,(hl) ; subtract (hl) from acc
040511 27          0160*       daa ; adjust result to bcd
040512 77          0161*       ld (hl),a ; store result
040513 23          0162*       inc hl ; advance memory pointers
040514 13          0163*       inc de
040515 10 F8       0164*       djnz subdec ; loop until b == 0
040517 C9          0165*       ret
040518             0166*   
040518             0167*   ; http://www.z80.info/pseudo-random.txt
040518             0168*   rand_8:
040518 C5          0169*       push bc
040519 3A 2C 05 04 0170*       ld a,(r_seed)
04051D 4F          0171*       ld c,a
04051E             0172*   
04051E 0F          0173*       rrca ; multiply by 32
04051F 0F          0174*       rrca
040520 0F          0175*       rrca
040521 EE 1F       0176*       xor 0x1f
040523             0177*   
040523 81          0178*       add a,c
040524 DE FF       0179*       sbc a,255 ; carry
040526             0180*   
040526 32 2C 05 04 0181*       ld (r_seed),a
04052A C1          0182*       pop bc
04052B C9          0183*       ret
04052C 50          0184*   r_seed: defb $50
04052D             0185*   
04052D             0186*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
04052D             0187*   prng24:
04052D             0188*   ;;Expects ADL mode.
04052D             0189*   ;;Output: HL
04052D             0190*   ;;50cc
04052D             0191*   ;;33 bytes
04052D             0192*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
04052D ED 5B 4E 05 0193*       ld de,(seed1)
       04          
040532 B7          0194*       or a
040533 ED 62       0195*       sbc hl,hl
040535 19          0196*       add hl,de
040536 29          0197*       add hl,hl
040537 29          0198*       add hl,hl
040538 2C          0199*       inc l
040539 19          0200*       add hl,de
04053A 22 4E 05 04 0201*       ld (seed1),hl
04053E 2A 51 05 04 0202*       ld hl,(seed2)
040542 29          0203*       add hl,hl
040543 9F          0204*       sbc a,a
040544 E6 1B       0205*       and %00011011
040546 AD          0206*       xor l
040547 6F          0207*       ld l,a
040548 22 51 05 04 0208*       ld (seed2),hl
04054C 19          0209*       add hl,de
04054D C9          0210*       ret
04054E 00 00 00    0211*   seed1: dl 0
040551 00 00 00    0212*   seed2: dl 0
040554             0035        include "files.inc"
040554             0001*   ; load to onboard 8k sram
040554             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
040554             0036        include "fixed168.inc"
040554             0001*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040554             0002*   ; uses EZ80 MLT instruction for speed
040554             0003*   ; operation: UHL * A --> UHL
040554             0004*   ; destroys: AF, HL
040554             0005*   smul24x8:
040554             0006*   ; make hl positive and store sign flag
040554 CD 70 04 04 0007*       call hlu_abs
040558 F5          0008*       push af
040559             0009*   ; do the division
040559 CD 64 05 04 0010*       call mul24x8 ; hl = product
04055D             0011*   ; adjust sign of result
04055D F1          0012*       pop af ; sign de
04055E F0          0013*       ret p ; hl was positive, nothing to do
04055F CD 80 04 04 0014*       call neg_hlu ; result is negative
040563 C9          0015*       ret
040564             0016*   
040564             0017*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040564             0018*   ; uses EZ80 MLT instruction for speed
040564             0019*   ; operation: UHL * A --> AUHL
040564             0020*   ; destroys: AF, HL
040564             0021*   mul24x8:
040564 D5          0022*       push de ; preserve de
040565             0023*   ; low byte
040565 5D          0024*       ld e,l
040566 57          0025*       ld d,a
040567 ED 5C       0026*       mlt de
040569 6B          0027*       ld l,e ; product low byte
04056A 08          0028*       ex af,af' ; save multiplier
04056B 7A          0029*       ld a,d ; carry
04056C 08          0030*       ex af,af' ; save carry, restore multiplier
04056D             0031*   ; high byte
04056D 5C          0032*       ld e,h
04056E 57          0033*       ld d,a
04056F ED 5C       0034*       mlt de
040571 08          0035*       ex af,af' ; save multiplier, restore carry
040572 83          0036*       add a,e ; add carry
040573 67          0037*       ld h,a ; product middle byte
040574 7A          0038*       ld a,d ; carry
040575 08          0039*       ex af,af' ; save carry, restore multiplier
040576             0040*   ; upper byte
040576 22 91 05 04 0041*       ld (@scratch),hl ; 7 cycles
04057A 5F          0042*       ld e,a
04057B 3A 93 05 04 0043*       ld a,(@scratch+2)
04057F 57          0044*       ld d,a
040580 ED 5C       0045*       mlt de
040582 08          0046*       ex af,af' ; restore carry
040583 8B          0047*       adc a,e ; add carry
040584 32 93 05 04 0048*       ld (@scratch+2),a ; 5 cycles
040588 2A 91 05 04 0049*       ld hl,(@scratch) ; 7 cycles
04058C             0050*   ; highest byte
04058C 3E 00       0051*       ld a,0 ; preserve carry flag
04058E 8A          0052*       adc a,d ; product highest byte
04058F D1          0053*       pop de ; restore de
040590 C9          0054*       ret
040591             0055*   @scratch: ds 3
040594             0056*   
       FF FF FF 
040594 00 00 00 00 0057*   mul24out: blkb 6,0
       00 00       
04059A             0058*   
04059A             0059*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
04059A             0060*   ; operation: UHL * UDE --> mul24out
04059A             0061*   mul24:
04059A DD E5       0062*       push ix ; preserve
04059C             0063*   ; point to output buffer and clear it
04059C DD 21 94 05 0064*       ld ix,mul24out
       04          
0405A1 C5          0065*       push bc
0405A2 01 00 00 00 0066*       ld bc,0
0405A6 DD 0F 00    0067*       ld (ix),bc
0405A9 DD 0F 03    0068*       ld (ix+3),bc
0405AC C1          0069*       pop bc
0405AD             0070*   ; STEP 1: UHL * E
0405AD 7B          0071*       ld a,e
0405AE E5          0072*       push hl
0405AF CD 64 05 04 0073*       call mul24x8
0405B3 DD 2F 00    0074*       ld (ix+0),hl
0405B6 DD 77 03    0075*       ld (ix+3),a
0405B9             0076*   ; STEP 2: UHL * D
0405B9 E1          0077*       pop hl
0405BA E5          0078*       push hl
0405BB 7A          0079*       ld a,d
0405BC CD 64 05 04 0080*       call mul24x8
0405C0 CD D9 05 04 0081*       call @accumulate
0405C4             0082*   ; STEP 3: UHL * DEU
0405C4 E1          0083*       pop hl
0405C5 ED 53 09 06 0084*       ld (@de),de
       04          
0405CA 3A 0B 06 04 0085*       ld a,(@de+2)
0405CE CD 64 05 04 0086*       call mul24x8
0405D2 CD D9 05 04 0087*       call @accumulate
0405D6             0088*   ; all done
0405D6 DD E1       0089*       pop ix ; restore
0405D8 C9          0090*       ret
0405D9             0091*   @accumulate:
0405D9 DD 23       0092*       inc ix
0405DB             0093*   ; highest byte of product to carry
0405DB DD 77 03    0094*       ld (ix+3),a
0405DE             0095*   ; low byte of product
0405DE 7D          0096*       ld a,l
0405DF DD 86 00    0097*       add a,(ix+0)
0405E2 DD 77 00    0098*       ld (ix+0),a
0405E5             0099*   ; high byte of product
0405E5 7C          0100*       ld a,h
0405E6 DD 8E 01    0101*       adc a,(ix+1)
0405E9 DD 77 01    0102*       ld (ix+1),a
0405EC             0103*   ; uppper byte of product
0405EC 22 06 06 04 0104*       ld (@hl),hl
0405F0 3A 08 06 04 0105*       ld a,(@hl+2)
0405F4 DD 8E 02    0106*       adc a,(ix+2)
0405F7 DD 77 02    0107*       ld (ix+2),a
0405FA             0108*   ; carry
0405FA 3E 00       0109*       ld a,0 ; preserve flags
0405FC DD 8E 03    0110*       adc a,(ix+3)
0405FF DD 77 03    0111*       ld (ix+3),a
040602 C9          0112*       ret
040603             0113*   
040603 00 00 00    0114*   @ix: dl 0
040606 00 00 00    0115*   @hl: dl 0
040609 00 00 00    0116*   @de: dl 0
04060C             0117*   
04060C             0118*   ; ; UHL * UDE --> UHL (unsigned)
04060C             0119*   ; umul24:
04060C             0120*   ;     call mul24
04060C             0121*   ;     ld hl,(mul24out)
04060C             0122*   ;     ret
04060C             0123*   
04060C             0124*   ; UH.L = UH.L*UD.E (unsigned)
04060C             0125*   umul168:
04060C CD 9A 05 04 0126*       call mul24
040610 2A 95 05 04 0127*       ld hl,(mul24out+1)
040614 C9          0128*       ret
040615             0129*   
040615             0130*   ; UH.L * UD.E --> UH.L (signed)
040615             0131*   smul168:
040615             0132*   ; make everything positive and store sign flags
040615 CD 70 04 04 0133*       call hlu_abs
040619 F5          0134*       push af
04061A EB          0135*       ex de,hl
04061B CD 70 04 04 0136*       call hlu_abs
04061F EB          0137*       ex de,hl
040620 F5          0138*       push af
040621             0139*   ; do the division
040621 CD 0C 06 04 0140*       call umul168 ; hl = product
040625             0141*   ; adjust sign of result
040625 F1          0142*       pop af ; sign de
040626 FA 31 06 04 0143*       jp m,@de_neg
04062A F1          0144*       pop af ; sign hl
04062B F0          0145*       ret p ; both positive, nothing to do
04062C             0146*   @hl_neg:
04062C CD 80 04 04 0147*       call neg_hlu ; de pos, hl neg, result is negative
040630 C9          0148*       ret
040631             0149*   @de_neg:
040631 F1          0150*       pop af
040632 F8          0151*       ret m ; both negative, nothing to do
040633 CD 80 04 04 0152*       call neg_hlu ; result is negative
040637 C9          0153*       ret
040638             0154*   
040638             0155*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040638             0156*   ; perform unsigned division of 16.8 fixed place values
040638             0157*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
040638             0158*   udiv168:
040638             0159*   ; back up divisor
040638 ED 53 6F 06 0160*       ld (@ude),de
       04          
04063D             0161*   ; get the 16-bit integer part of the quotient
04063D CD 80 03 04 0162*       call udiv24 ; de = quotient, hl = remainder
040641             0163*   ; load quotient to upper three bytes of output
040641 ED 53 76 06 0164*       ld (div168_out+1),de
       04          
040646             0165*   @div256:
040646             0166*   ; multiply remainder by 256
040646             0167*       hlu_mul256
040646 29          0001*M1     add hl,hl ; * 2
040647 29          0002*M1     add hl,hl ; * 4
040648 29          0003*M1     add hl,hl ; * 8
040649 29          0004*M1     add hl,hl ; * 16
04064A 29          0005*M1     add hl,hl ; * 32
04064B 29          0006*M1     add hl,hl ; * 64
04064C 29          0007*M1     add hl,hl ; * 128
04064D 29          0008*M1     add hl,hl ; * 256
04064E             0168*   ; skip fractional computation if remainder is zero
04064E             0169*       SIGN_HLU
04064E 19          0001*M1     add hl,de ; 1 cycle
04064F B7          0002*M1     or a ; clear flags ; 1 cycle
040650 ED 52       0003*M1     sbc hl,de ; 2 cycles
040652             0004*M1     ; 4 cycles total
040652 20 03       0170*       jr nz,@div_frac
040654 AF          0171*       xor a
040655 18 0A       0172*       jr @write_frac
040657             0173*   ; now divide the shifted remainder by the divisor
040657             0174*   @div_frac:
040657 ED 5B 6F 06 0175*       ld de,(@ude) ; get back divisor
       04          
04065C CD 80 03 04 0176*       call udiv24 ; de = quotient, hl = remainder
040660             0177*   ; load low byte of quotient to low byte of output
040660 7B          0178*       ld a,e
040661             0179*   @write_frac:
040661 32 75 06 04 0180*       ld (div168_out),a
040665             0181*   ; load de with return value
040665 ED 5B 75 06 0182*       ld de,(div168_out)
       04          
04066A             0183*   ; load a with any overflow
04066A 3A 78 06 04 0184*       ld a,(div168_out+3)
04066E C9          0185*       ret ; ud.e is the 16.8 result
04066F             0186*   @ude: ds 6
040675             0187*   div168_out: ds 4 ; the extra byte is for overflow
040679             0188*   
040679             0189*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040679             0190*   ; perform signed division of 16.8 fixed place values
040679             0191*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040679             0192*   sdiv168:
040679             0193*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040679 CD 70 04 04 0194*       call hlu_abs
04067D F5          0195*       push af
04067E EB          0196*       ex de,hl
04067F CD 70 04 04 0197*       call hlu_abs
040683 EB          0198*       ex de,hl
040684 F5          0199*       push af
040685             0200*   ; do the division
040685 CD 38 06 04 0201*       call udiv168 ; de = quotient, hl = remainder
040689             0202*   ; adjust sign of result
040689 F1          0203*       pop af ; sign de
04068A FA 97 06 04 0204*       jp m,@de_neg
04068E F1          0205*       pop af ; sign hl
04068F F0          0206*       ret p ; both positive, nothing to do
040690             0207*   @hl_neg:
040690 EB          0208*       ex de,hl ; hl = quotient, de = remainder
040691 CD 80 04 04 0209*       call neg_hlu ; de pos, hl neg, result is negative
040695 EB          0210*       ex de,hl ; de = negated quotient, hl = remainder
040696 C9          0211*       ret
040697             0212*   @de_neg:
040697 F1          0213*       pop af
040698 F8          0214*       ret m ; both negative, nothing to do
040699 EB          0215*       ex de,hl ; hl = quotient, de = remainder
04069A CD 80 04 04 0216*       call neg_hlu ; result is negative
04069E EB          0217*       ex de,hl ; de = negated quotient, hl = remainder
04069F C9          0218*       ret
0406A0             0219*   
0406A0             0220*   ; convert signed angles from a 360 to 256 degree circle
0406A0             0221*   ; inputs: uh.l is the angle360 in 16.8 fixed format
0406A0             0222*   ; outputs: uh.l is the angle256 in 16.8 fixed format
0406A0             0223*   ; destroys: TODO
0406A0             0224*   deg_360_to_256:
0406A0 D5          0225*       push de ; preserve de
0406A1             0226*   ; make angle positive and store sign flag
0406A1 CD 70 04 04 0227*       call hlu_abs
0406A5 F5          0228*       push af
0406A6             0229*   ; multiply by coversion factor of 256/360
0406A6 11 B6 00 00 0230*       ld de,0x0000B6 ; 0.711
0406AA CD 0C 06 04 0231*       call umul168 ; uh.l = uh.l * 0.711
0406AE             0232*   ; restore sign flag and adjust output accordingly
0406AE F1          0233*       pop af
0406AF F2 B7 06 04 0234*       jp p,@pos ; positive number
0406B3 CD 80 04 04 0235*       call neg_hlu
0406B7             0236*   @pos:
0406B7             0237*   ; restore de and return uh.l as the result
0406B7 D1          0238*       pop de
0406B8 C9          0239*       ret
0406B9             0240*   
0406B9             0241*   ; convert signed angles from a 256 to 360 degree circle
0406B9             0242*   ; inputs: uh.l is the angle256 in 16.8 fixed format
0406B9             0243*   ; outputs: uh.l is the angle360 in 16.8 fixed format
0406B9             0244*   ; destroys: TODO
0406B9             0245*   deg_256_to_360:
0406B9 D5          0246*       push de ; preserve de
0406BA             0247*   ; make angle positive and store sign flag
0406BA CD 70 04 04 0248*       call hlu_abs
0406BE F5          0249*       push af
0406BF             0250*   ; multiply by coversion factor of 360/256
0406BF 11 68 01 00 0251*       ld de,0x000168 ; 1.406
0406C3 CD 0C 06 04 0252*       call umul168 ; uh.l = uh.l * 1.406
0406C7             0253*   ; restore sign flag and adjust output accordingly
0406C7 F1          0254*       pop af
0406C8 F2 D0 06 04 0255*       jp p,@pos ; positive number
0406CC CD 80 04 04 0256*       call neg_hlu
0406D0             0257*   @pos:
0406D0             0258*   ; restore de and return uh.l as the result
0406D0 D1          0259*       pop de
0406D1 C9          0260*       ret
0406D2             0261*   
0406D2             0262*   ; fixed 16.8 routine
0406D2             0263*   ; cos(uh.l) --> uh.l
0406D2             0264*   ; destroys: f, hl
0406D2             0265*   cos168:
0406D2 D5          0266*       push de ; preserve de
0406D3             0267*   ; for cos we simply increment the angle by 90 degrees
0406D3             0268*   ; or 0x004000 in 16.8 degrees256
0406D3             0269*   ; which makes it a sin problem
0406D3 11 00 40 00 0270*       ld de,0x004000
0406D7 19          0271*       add hl,de ; modulo 256 happens below
0406D8 D1          0272*       pop de ; restore de
0406D9             0273*   ; fall through to sin168
0406D9             0274*   
0406D9             0275*   ; ---------------------
0406D9             0276*   ; fixed 16.8 routine
0406D9             0277*   ; sin(uh.l) --> uh.l
0406D9             0278*   ; destroys: f, hl
0406D9             0279*   sin168:
0406D9 D5          0280*       push de
0406DA             0281*   ; handle negative angles appropriately
0406DA CD 70 04 04 0282*       call hlu_abs
0406DE F2 E7 06 04 0283*       jp p,@F
0406E2 11 00 00 FF 0284*       ld de,-256*256
0406E6 19          0285*       add hl,de
0406E7             0286*   @@:
0406E7 2E 03       0287*       ld l,3 ; multiply by 3 to get our lookup index
0406E9 ED 6C       0288*       mlt hl
0406EB 11 9F 09 04 0289*       ld de,sin_lut_168 ; grab the lut address
0406EF 19          0290*       add hl,de ; bump hl by the index
0406F0 ED 27       0291*       ld hl,(hl) ; don't try this on a z80!
0406F2 D1          0292*       pop de
0406F3 C9          0293*       ret
0406F4             0294*   
0406F4             0295*   ; 16.8 fixed inputs / outputs
0406F4             0296*   ; takes: uh.l as angle in degrees 256
0406F4             0297*   ;        ud.e as radius
0406F4             0298*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
0406F4             0299*   ;        displacements from origin (0,0)
0406F4             0300*   ; destroys: everything except indexes
0406F4             0301*   polar_to_cartesian:
0406F4             0302*   ; back up input parameters
0406F4 22 23 07 04 0303*       ld (@angle), hl
0406F8 ED 53 26 07 0304*       ld (@radius), de
       04          
0406FD             0305*   ; compute dx = sin(uh.l) * ud.e
0406FD CD D9 06 04 0306*       call sin168 ; uh.l = sin(uh.l)
040701 ED 5B 26 07 0307*       ld de,(@radius)
       04          
040706 CD 15 06 04 0308*       call smul168 ; uh.l = dx
04070A E5          0309*       push hl
04070B             0310*   ; compute dy = -cos(uh.l) * ud.e
04070B 2A 23 07 04 0311*       ld hl,(@angle)
04070F CD D2 06 04 0312*       call cos168 ; uh.l = cos(uh.l)
040713 ED 5B 26 07 0313*       ld de,(@radius)
       04          
040718 CD 15 06 04 0314*       call smul168 ; uh.l = dy
04071C CD 80 04 04 0315*       call neg_hlu ; invert dy for screen coords convention
040720 EB          0316*       ex de,hl ; de = dy for output
040721 C1          0317*       pop bc ; bc = dx for output
040722             0318*   ; and out
040722 C9          0319*       ret
040723             0320*   @angle: ds 3
040726             0321*   @radius: ds 3
040729             0322*   
040729             0323*   ; 16.8 fixed inputs / outputs
040729             0324*   ; inputs: ub.c as dx, ud.e as dy
040729             0325*   ;        displacements from origin (0,0)
040729             0326*   ; returns: uh.l as angle in degrees 256
040729             0327*   ;        ud.e as radius
040729             0328*   ; destroys: everything except indexes
040729             0329*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040729 ED 43 82 07 0330*       ld (dx168),bc ; dx argument for distance168
       04          
04072E ED 53 88 07 0331*       ld (dy168),de ; dy argument for distance168
       04          
040733             0332*   ; compute radius
040733 CD 8E 07 04 0333*       call distance168 ; uh.l = radius
040737 E5          0334*       push hl ; save radius
040738             0335*   ; compute angle
040738 ED 4B 82 07 0336*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
04073D ED 5B 88 07 0337*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040742 CD EE 07 04 0338*       call atan2_168fast ; uh.l = angle
040746             0339*   ; return result
040746 D1          0340*       pop de ; de = radius (was hl)
040747 C9          0341*       ret
040748             0342*   ; end cartesian_to_polar
040748             0343*   
040748             0344*   ; 16.8 fixed inputs / outputs
040748             0345*   ; inputs: ub.c as dx, ud.e as dy
040748             0346*   ;        displacements from origin (0,0)
040748             0347*   ; returns: uh.l as angle in degrees 256
040748             0348*   ;        ud.e as radius
040748             0349*   ; destroys: everything except indexes
040748             0350*   ; note: uses distance168sm which is more accurate for small deltas
040748             0351*   cartesian_to_polar_sm:
040748 ED 43 82 07 0352*       ld (dx168),bc ; dx argument for distance168
       04          
04074D ED 53 88 07 0353*       ld (dy168),de ; dy argument for distance168
       04          
040752             0354*   ; compute radius
040752 CD C9 07 04 0355*       call distance168sm ; uh.l = radius
040756 E5          0356*       push hl ; save radius
040757             0357*   ; compute angle
040757 ED 4B 82 07 0358*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
04075C ED 5B 88 07 0359*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040761 CD EE 07 04 0360*       call atan2_168fast ; uh.l = angle
040765             0361*   ; return result
040765 D1          0362*       pop de ; de = radius (was hl)
040766 C9          0363*       ret
040767             0364*   ; end cartesian_to_polar
040767             0365*   
040767             0366*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040767             0367*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040767             0368*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040767             0369*   ;         also populates scratch locations dx168 and dy168
040767             0370*   ; destroys: a,hl,bc,de
040767             0371*   dxy168:
040767             0372*   ; compute dx = x1-x0
040767 AF          0373*       xor a ; clear carry
040768 DD E5       0374*       push ix ; move ix to hl via the stack
04076A E1          0375*       pop hl ; hl = x1
04076B ED 42       0376*       sbc hl,bc ; hl = dx
04076D 22 82 07 04 0377*       ld (dx168),hl ; dx to scratch
040771             0378*   ; compute dy = y1-y0
040771 AF          0379*       xor a ; clear carry
040772 FD E5       0380*       push iy ; move iy to hl via the stack
040774 E1          0381*       pop hl ; hl = y1
040775 ED 52       0382*       sbc hl,de ; hl = dy
040777 22 88 07 04 0383*       ld (dy168),hl ; dy to scratch
04077B             0384*   ; populate output registers and return
04077B EB          0385*       ex de,hl ; ud.e = dy
04077C ED 4B 82 07 0386*       ld bc,(dx168) ; ub.c = dx
       04          
040781 C9          0387*       ret
040782 00 00 00 00 0388*   dx168: blkb 6,0
       00 00       
040788 00 00 00 00 0389*   dy168: blkb 6,0
       00 00       
04078E             0390*   
04078E             0391*   ; compute the euclidian distance between two cartesian coordinates
04078E             0392*   ; using the formula d = sqrt(dx^2+dy^2)
04078E             0393*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
04078E             0394*   ; output; uh.l is the 16.8 fixed format distance
04078E             0395*   ;         also populates scratch locations dx168 and dy168
04078E             0396*   ; destroys: a,hl,bc,de
04078E             0397*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
04078E             0398*   ;       thus the result will always be an integer, albeit in 16.8 format
04078E             0399*   distance168:
04078E             0400*   ; compute dy^2
04078E 2A 88 07 04 0401*       ld hl,(dy168)
040792 CD 70 04 04 0402*       call hlu_abs
040796             0403*       ; call hlu_udiv256 ; make integer to avoid overflow
040796             0404*       SRL_UHL ; make integer to avoid overflow
040796 3B          0001*M1     dec sp ; 1 cycle
040797 E5          0002*M1     push hl ; 4 cycles
040798 33          0003*M1     inc sp ; 1 cycle
040799 E1          0004*M1     pop hl ; 4 cycles
04079A 23          0005*M1     inc hl ; 1 cycle
04079B 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04079D             0007*M1     ; 13 cycles total
04079D E5          0405*       push hl
04079E D1          0406*       pop de
04079F CD 67 03 04 0407*       call umul24 ; hl = dy^2
0407A3 E5          0408*       push hl ; save dy^2
0407A4             0409*   ; compute dx^2
0407A4 2A 82 07 04 0410*       ld hl,(dx168)
0407A8 CD 70 04 04 0411*       call hlu_abs
0407AC             0412*       ; call hlu_udiv256 ; make integer to avoid overflow
0407AC             0413*       SRL_UHL ; make integer to avoid overflow
0407AC 3B          0001*M1     dec sp ; 1 cycle
0407AD E5          0002*M1     push hl ; 4 cycles
0407AE 33          0003*M1     inc sp ; 1 cycle
0407AF E1          0004*M1     pop hl ; 4 cycles
0407B0 23          0005*M1     inc hl ; 1 cycle
0407B1 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
0407B3             0007*M1     ; 13 cycles total
0407B3 E5          0414*       push hl
0407B4 D1          0415*       pop de
0407B5 CD 67 03 04 0416*       call umul24 ; hl = dx^2
0407B9             0417*   ; add dx^2 and dy^2
0407B9 D1          0418*       pop de ; de = dy^2 (was hl)
0407BA 19          0419*       add hl,de ; hl = dx^2 + dy^2
0407BB             0420*   ; compute the square root
0407BB CD B9 08 04 0421*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
0407BF EB          0422*       ex de,hl ; hl = distance
0407C0             0423*       hlu_mul256 ; convert back to 16.8 fixed
0407C0 29          0001*M1     add hl,hl ; * 2
0407C1 29          0002*M1     add hl,hl ; * 4
0407C2 29          0003*M1     add hl,hl ; * 8
0407C3 29          0004*M1     add hl,hl ; * 16
0407C4 29          0005*M1     add hl,hl ; * 32
0407C5 29          0006*M1     add hl,hl ; * 64
0407C6 29          0007*M1     add hl,hl ; * 128
0407C7 29          0008*M1     add hl,hl ; * 256
0407C8 C9          0424*       ret
0407C9             0425*   
0407C9             0426*   ; compute the euclidian distance between two cartesian coordinates
0407C9             0427*   ; using the formula d = sqrt(dx^2+dy^2)
0407C9             0428*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
0407C9             0429*   ; output; uh.l is the 16.8 fixed format distance
0407C9             0430*   ;         also populates scratch locations dx168 and dy168
0407C9             0431*   ; destroys: a,hl,bc,de
0407C9             0432*   ; NOTE: sm means 'small' because it doesn't round down the deltas
0407C9             0433*   ;       making it more accurate for small deltas,
0407C9             0434*   ;       but will overflow if used for screen-sized deltas
0407C9             0435*   distance168sm:
0407C9             0436*   ; compute dy^2
0407C9 2A 88 07 04 0437*       ld hl,(dy168)
0407CD CD 70 04 04 0438*       call hlu_abs
0407D1 E5          0439*       push hl
0407D2 D1          0440*       pop de
0407D3 CD 67 03 04 0441*       call umul24 ; hl = dy^2
0407D7 E5          0442*       push hl ; save dy^2
0407D8             0443*   ; compute dx^2
0407D8 2A 82 07 04 0444*       ld hl,(dx168)
0407DC CD 70 04 04 0445*       call hlu_abs
0407E0 E5          0446*       push hl
0407E1 D1          0447*       pop de
0407E2 CD 67 03 04 0448*       call umul24 ; hl = dx^2
0407E6             0449*   ; add dx^2 and dy^2
0407E6 D1          0450*       pop de ; de = dy^2 (was hl)
0407E7 19          0451*       add hl,de ; hl = dx^2 + dy^2
0407E8             0452*   ; compute the square root
0407E8 CD B9 08 04 0453*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
0407EC EB          0454*       ex de,hl ; hl = distance
0407ED C9          0455*       ret
0407EE             0456*   
0407EE             0457*   ; atan2_(ub.c,ud.e) --> uh.l
0407EE             0458*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0407EE             0459*   ;   whether inputs are integers or fractional doesn't matter
0407EE             0460*   ;   so long as the sign bit of the upper byte is correct
0407EE             0461*   ; output: uh.l is the 16.8 fixed angle in degrees 256
0407EE             0462*   ; angles are COMPASS HEADINGS based on
0407EE             0463*   ; screen coordinate conventions,where the y axis is flipped
0407EE             0464*   ; #E0 224      0       32 #20
0407EE             0465*   ;        -x,-y | +x,-y
0407EE             0466*   ; #C0 192------+------ 64 #40
0407EE             0467*   ;        -x,+y | +x,+y
0407EE             0468*   ; #A0 160   128 #80   96 #60
0407EE             0469*   atan2_168fast:
0407EE             0470*   ; get signs and make everything positive
0407EE             0471*   ; get abs(x) and store its original sign
0407EE C5          0472*       push bc
0407EF E1          0473*       pop hl
0407F0 CD 70 04 04 0474*       call hlu_abs ; if x was negative this also sets the sign flag
0407F4 E5          0475*       push hl ; store abs(x)
0407F5 C1          0476*       pop bc ; bc = abs(x)
0407F6 F5          0477*       push af ; store sign of x
0407F7             0478*   ; get abs(y) and store its original sign
0407F7 EB          0479*       ex de,hl ; hl = y
0407F8 CD 70 04 04 0480*       call hlu_abs ; if y was negative this also sets the sign flag
0407FC EB          0481*       ex de,hl ; de = abs(y)
0407FD F5          0482*       push af ; store sign of y
0407FE             0483*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0407FE             0484*   ; this ensures that our lookup value is between 0 and 1 inclusive
0407FE AF          0485*       xor a ; clear the carry flag
0407FF D5          0486*       push de
040800 E1          0487*       pop hl
040801 ED 42       0488*       sbc hl,bc
040803 F5          0489*       push af ; save sign of de - bc
040804 F2 0D 08 04 0490*       jp p,@1 ; bc <= de, so we skip ahead
040808             0491*   ; otherwise we swap bc and de
040808 C5          0492*       push bc
040809 E1          0493*       pop hl
04080A EB          0494*       ex de,hl
04080B E5          0495*       push hl
04080C C1          0496*       pop bc
04080D             0497*   @1:
04080D             0498*   ; now we're ready to snag our preliminary result
04080D C5          0499*       push bc
04080E E1          0500*       pop hl
04080F CD 7D 08 04 0501*       call atan_168fast ; uh.l comes back with prelim result
040813             0502*   ; now we adjust uh.l based on sign of de - bc
040813 F1          0503*       pop af
040814 F2 20 08 04 0504*       jp p,@2 ; bc <= de,so we skip ahead
040818 EB          0505*       ex de,hl
040819 21 00 40 00 0506*       ld hl,64*256 ; subtract from 64 (90) degrees
04081D AF          0507*       xor a ; clear the carry flag
04081E ED 52       0508*       sbc hl,de
040820             0509*   @2:
040820             0510*   ; adjust the result based on quadrant
040820             0511*   ; #E0 224      0       32 #20
040820             0512*   ;        -x,-y | +x,-y
040820             0513*   ; #C0 192------+------ 64 #40
040820             0514*   ;        -x,+y | +x,+y
040820             0515*   ; #A0 160   128 #80   96 #60
040820 F1          0516*       pop af ; sign of y
040821 CA 5E 08 04 0517*       jp z,@y_zero
040825 F2 3E 08 04 0518*       jp p,@y_pos
040829             0519*   ; y neg,check x
040829 F1          0520*       pop af ; sign of x
04082A CA 38 08 04 0521*       jp z,@y_neg_x_zero
04082E F2 3D 08 04 0522*       jp p,@y_neg_x_pos
040832             0523*   ; y neg,x neg
040832             0524*   ; angle is 128 to 256 (270 to 360)
040832             0525*   ; negating the intermediate does the trick
040832 CD 80 04 04 0526*       call neg_hlu
040836 18 31       0527*       jr @zero_hlu
040838             0528*   
040838             0529*   @y_neg_x_zero:
040838             0530*   ; y neg,x zero
040838             0531*   ; angle is 0
040838 21 00 00 00 0532*       ld hl,0
04083C C9          0533*       ret
04083D             0534*   @y_neg_x_pos:
04083D             0535*   ; y neg,x pos
04083D             0536*   ; angle is 0 to 64 (0 to 90)
04083D             0537*   ; so we're good
04083D C9          0538*       ret
04083E             0539*   
04083E             0540*   @y_pos:
04083E F1          0541*       pop af ; sign of x
04083F CA 4E 08 04 0542*       jp z,@y_pos_x_zero
040843 F2 53 08 04 0543*       jp p,@y_pos_x_pos
040847             0544*   ; y pos,x neg
040847             0545*   ; angle is 128 to 192 (180-270)
040847             0546*   ; so we add 128 to intermediate
040847 11 00 80 00 0547*       ld de,128*256
04084B 19          0548*       add hl,de
04084C 18 1B       0549*       jr @zero_hlu
04084E             0550*   @y_pos_x_zero:
04084E             0551*   ; y pos,x zero
04084E             0552*   ; angle is 128 (180)
04084E 21 00 80 00 0553*       ld hl,128*256
040852 C9          0554*       ret
040853             0555*   @y_pos_x_pos:
040853             0556*   ; y pos,x pos
040853             0557*   ; angle is 64 to 128 (90 to 180)
040853             0558*   ; neg the intermediate and add 180 degrees
040853 CD 80 04 04 0559*       call neg_hlu
040857 11 00 80 00 0560*       ld de,128*256
04085B 19          0561*       add hl,de
04085C 18 0B       0562*       jr @zero_hlu
04085E             0563*   
04085E             0564*   @y_zero:
04085E F1          0565*       pop af ; sign of x
04085F FA 64 08 04 0566*       jp m,@y_zero_x_neg
040863             0567*   ; y zero,x pos
040863             0568*   ; angle is 64 (90),nothing to do
040863 C9          0569*       ret
040864             0570*   @y_zero_x_neg:
040864             0571*   ; y zero ,x neg
040864             0572*   ; angle is 192 (270)
040864 21 00 C0 00 0573*       ld hl,192*256
040868 C9          0574*       ret
040869             0575*   @zero_hlu:
040869 AF          0576*       xor a
04086A 22 77 08 04 0577*       ld (@scratch),hl
04086E 32 79 08 04 0578*       ld (@scratch+2),a
040872 2A 77 08 04 0579*       ld hl,(@scratch)
040876 C9          0580*       ret
040877             0581*   @scratch: ds 6
04087D             0582*   
04087D             0583*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
04087D             0584*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
04087D             0585*   ; destroys: a,hl,bc,de
04087D             0586*   ; note: only works for angles from 0 to 32 (45) degrees
04087D             0587*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
04087D             0588*   atan_168fast:
04087D             0589*   ; because we use compass headings instead of geometric angles
04087D             0590*   ; we compute dx/dy which is 1/tan(theta) in the maths world
04087D             0591*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
04087D CD 38 06 04 0592*       call udiv168 ; ud.e = dx/dy
040881 EB          0593*       ex de,hl ; uh.l = dx/dy
040882             0594*   ; test uh.l for 0
040882 19          0595*       add hl,de
040883 B7          0596*       or a
040884 ED 52       0597*       sbc hl,de
040886 28 22       0598*       jr z,@is_zero
040888             0599*   ; test uh.l for 1
040888 AF          0600*       xor a ; clear carry
040889 EB          0601*       ex de,hl
04088A 21 00 01 00 0602*       ld hl,1*256 ; 1 in 16.8 fixed format
04088E ED 52       0603*       sbc hl,de
040890 28 13       0604*       jr z,@is_45
040892 EB          0605*       ex de,hl
040893             0606*   ; no special cases so we move on
040893             0607*   ; l contains the fractional portion of tan(uh.l)
040893             0608*   ; we multiply it by three to get our lookup table index
040893 26 03       0609*       ld h,3
040895 ED 6C       0610*       mlt hl ; index into lut
040897 11 00 00 00 0611*       ld de,0 ; clear deu
04089B 54          0612*       ld d,h ; copy hl to de
04089C 5D          0613*       ld e,l ; de contains our index
04089D 21 A2 0C 04 0614*       ld hl,atan_lut_168 ; grab the lut address
0408A1 19          0615*       add hl,de ; bump hl by the index
0408A2 ED 27       0616*       ld hl,(hl) ; don't try this on a z80!
0408A4 C9          0617*       ret ; and out
0408A5             0618*   @is_45:
0408A5 21 00 20 00 0619*       ld hl,32*256
0408A9 C9          0620*       ret
0408AA             0621*   ; for the case tan(0)
0408AA             0622*   @is_zero:
0408AA 21 00 00 00 0623*       ld hl,0*256
0408AE C9          0624*       ret
0408AF             0625*   
0408AF             0626*   ; Expects  ADL mode
0408AF             0627*   ; Inputs:  UH.L
0408AF             0628*   ; Outputs: UH.L is the 16.8 square root
0408AF             0629*   ;          UDE is the integer difference inputHL-DE^2
0408AF             0630*   sqrt168:
0408AF CD B9 08 04 0631*       call sqrt24
0408B3 EB          0632*       ex de,hl
0408B4 29          0633*       add hl,hl
0408B5 29          0634*       add hl,hl
0408B6 29          0635*       add hl,hl
0408B7 29          0636*       add hl,hl
0408B8 C9          0637*       ret
0408B9             0638*   
0408B9             0639*   ; credit: xeda112358
0408B9             0640*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
0408B9             0641*   sqrt24:
0408B9             0642*   ; Expects ADL mode
0408B9             0643*   ; Inputs: HL
0408B9             0644*   ; Outputs: DE is the integer square root
0408B9             0645*   ;  HL is the difference inputHL-DE^2
0408B9             0646*   ;  c flag reset
0408B9 01 00 00 00 0647*       ld bc,0 ; clear bcu
0408BD 11 00 00 00 0648*       ld de,0 ; clear deu
0408C1 AF          0649*       xor a
0408C2 45          0650*       ld b,l
0408C3 C5          0651*       push bc
0408C4 47          0652*       ld b,a
0408C5 6F          0653*       ld l,a
0408C6             0654*   ; Iteration 1
0408C6 29          0655*       add hl,hl
0408C7 CB 11       0656*       rl c
0408C9 29          0657*       add hl,hl
0408CA CB 11       0658*       rl c
0408CC 91          0659*       sub c
0408CD 30 04       0660*       jr nc,$+6
0408CF 1C          0661*       inc e
0408D0 1C          0662*       inc e
0408D1 2F          0663*       cpl
0408D2 4F          0664*       ld c,a
0408D3             0665*   ; Iteration 2
0408D3 29          0666*       add hl,hl
0408D4 CB 11       0667*       rl c
0408D6 29          0668*       add hl,hl
0408D7 CB 11       0669*       rl c
0408D9 CB 13       0670*       rl e
0408DB 7B          0671*       ld a,e
0408DC 91          0672*       sub c
0408DD 30 04       0673*       jr nc,$+6
0408DF 1C          0674*       inc e
0408E0 1C          0675*       inc e
0408E1 2F          0676*       cpl
0408E2 4F          0677*       ld c,a
0408E3             0678*   ; Iteration 3
0408E3 29          0679*       add hl,hl
0408E4 CB 11       0680*       rl c
0408E6 29          0681*       add hl,hl
0408E7 CB 11       0682*       rl c
0408E9 CB 13       0683*       rl e
0408EB 7B          0684*       ld a,e
0408EC 91          0685*       sub c
0408ED 30 04       0686*       jr nc,$+6
0408EF 1C          0687*       inc e
0408F0 1C          0688*       inc e
0408F1 2F          0689*       cpl
0408F2 4F          0690*       ld c,a
0408F3             0691*   ; Iteration 4
0408F3 29          0692*       add hl,hl
0408F4 CB 11       0693*       rl c
0408F6 29          0694*       add hl,hl
0408F7 CB 11       0695*       rl c
0408F9 CB 13       0696*       rl e
0408FB 7B          0697*       ld a,e
0408FC 91          0698*       sub c
0408FD 30 04       0699*       jr nc,$+6
0408FF 1C          0700*       inc e
040900 1C          0701*       inc e
040901 2F          0702*       cpl
040902 4F          0703*       ld c,a
040903             0704*   ; Iteration 5
040903 29          0705*       add hl,hl
040904 CB 11       0706*       rl c
040906 29          0707*       add hl,hl
040907 CB 11       0708*       rl c
040909 CB 13       0709*       rl e
04090B 7B          0710*       ld a,e
04090C 91          0711*       sub c
04090D 30 04       0712*       jr nc,$+6
04090F 1C          0713*       inc e
040910 1C          0714*       inc e
040911 2F          0715*       cpl
040912 4F          0716*       ld c,a
040913             0717*   ; Iteration 6
040913 29          0718*       add hl,hl
040914 CB 11       0719*       rl c
040916 29          0720*       add hl,hl
040917 CB 11       0721*       rl c
040919 CB 13       0722*       rl e
04091B 7B          0723*       ld a,e
04091C 91          0724*       sub c
04091D 30 04       0725*       jr nc,$+6
04091F 1C          0726*       inc e
040920 1C          0727*       inc e
040921 2F          0728*       cpl
040922 4F          0729*       ld c,a
040923             0730*   ; Iteration 7
040923 29          0731*       add hl,hl
040924 CB 11       0732*       rl c
040926 29          0733*       add hl,hl
040927 CB 11       0734*       rl c
040929 CB 10       0735*       rl b
04092B EB          0736*       ex de,hl
04092C 29          0737*       add hl,hl
04092D E5          0738*       push hl
04092E ED 42       0739*       sbc hl,bc
040930 30 06       0740*       jr nc,$+8
040932 7C          0741*       ld a,h
040933 2F          0742*       cpl
040934 47          0743*       ld b,a
040935 7D          0744*       ld a,l
040936 2F          0745*       cpl
040937 4F          0746*       ld c,a
040938 E1          0747*       pop hl
040939 30 02       0748*       jr nc,$+4
04093B 23          0749*       inc hl
04093C 23          0750*       inc hl
04093D EB          0751*       ex de,hl
04093E             0752*   ; Iteration 8
04093E 29          0753*       add hl,hl
04093F 69          0754*       ld l,c
040940 60          0755*       ld h,b
040941 ED 6A       0756*       adc hl,hl
040943 ED 6A       0757*       adc hl,hl
040945 EB          0758*       ex de,hl
040946 29          0759*       add hl,hl
040947 ED 52       0760*       sbc hl,de
040949 19          0761*       add hl,de
04094A EB          0762*       ex de,hl
04094B 30 04       0763*       jr nc,$+6
04094D ED 52       0764*       sbc hl,de
04094F 13          0765*       inc de
040950 13          0766*       inc de
040951             0767*   ; Iteration 9
040951 F1          0768*       pop af
040952 17          0769*       rla
040953 ED 6A       0770*       adc hl,hl
040955 17          0771*       rla
040956 ED 6A       0772*       adc hl,hl
040958 EB          0773*       ex de,hl
040959 29          0774*       add hl,hl
04095A ED 52       0775*       sbc hl,de
04095C 19          0776*       add hl,de
04095D EB          0777*       ex de,hl
04095E 30 04       0778*       jr nc,$+6
040960 ED 52       0779*       sbc hl,de
040962 13          0780*       inc de
040963 13          0781*       inc de
040964             0782*   ; Iteration 10
040964 17          0783*       rla
040965 ED 6A       0784*       adc hl,hl
040967 17          0785*       rla
040968 ED 6A       0786*       adc hl,hl
04096A EB          0787*       ex de,hl
04096B 29          0788*       add hl,hl
04096C ED 52       0789*       sbc hl,de
04096E 19          0790*       add hl,de
04096F EB          0791*       ex de,hl
040970 30 04       0792*       jr nc,$+6
040972 ED 52       0793*       sbc hl,de
040974 13          0794*       inc de
040975 13          0795*       inc de
040976             0796*   ; Iteration 11
040976 17          0797*       rla
040977 ED 6A       0798*       adc hl,hl
040979 17          0799*       rla
04097A ED 6A       0800*       adc hl,hl
04097C EB          0801*       ex de,hl
04097D 29          0802*       add hl,hl
04097E ED 52       0803*       sbc hl,de
040980 19          0804*       add hl,de
040981 EB          0805*       ex de,hl
040982 30 04       0806*       jr nc,$+6
040984 ED 52       0807*       sbc hl,de
040986 13          0808*       inc de
040987 13          0809*       inc de
040988             0810*   ; Iteration 12
040988 17          0811*       rla
040989 ED 6A       0812*       adc hl,hl
04098B 17          0813*       rla
04098C ED 6A       0814*       adc hl,hl
04098E EB          0815*       ex de,hl
04098F 29          0816*       add hl,hl
040990 ED 52       0817*       sbc hl,de
040992 19          0818*       add hl,de
040993 EB          0819*       ex de,hl
040994 30 04       0820*       jr nc,$+6
040996 ED 52       0821*       sbc hl,de
040998 13          0822*       inc de
040999 13          0823*       inc de
04099A CB 1A       0824*       rr d
04099C CB 1B       0825*       rr e
04099E C9          0826*       ret
04099F             0827*   
04099F             0828*   sin_lut_168:
04099F 00 00 00    0829*       dl 0x000000 ; 0.000 00, 0.000
0409A2 06 00 00    0830*       dl 0x000006 ; 1.406 01, 0.025
0409A5 0C 00 00    0831*       dl 0x00000C ; 2.813 02, 0.049
0409A8 12 00 00    0832*       dl 0x000012 ; 4.219 03, 0.074
0409AB 19 00 00    0833*       dl 0x000019 ; 5.625 04, 0.098
0409AE 1F 00 00    0834*       dl 0x00001F ; 7.031 05, 0.122
0409B1 25 00 00    0835*       dl 0x000025 ; 8.438 06, 0.147
0409B4 2B 00 00    0836*       dl 0x00002B ; 9.844 07, 0.171
0409B7 31 00 00    0837*       dl 0x000031 ; 11.250 08, 0.195
0409BA 38 00 00    0838*       dl 0x000038 ; 12.656 09, 0.219
0409BD 3E 00 00    0839*       dl 0x00003E ; 14.063 0A, 0.243
0409C0 44 00 00    0840*       dl 0x000044 ; 15.469 0B, 0.267
0409C3 4A 00 00    0841*       dl 0x00004A ; 16.875 0C, 0.290
0409C6 50 00 00    0842*       dl 0x000050 ; 18.281 0D, 0.314
0409C9 56 00 00    0843*       dl 0x000056 ; 19.688 0E, 0.337
0409CC 5C 00 00    0844*       dl 0x00005C ; 21.094 0F, 0.360
0409CF 61 00 00    0845*       dl 0x000061 ; 22.500 10, 0.383
0409D2 67 00 00    0846*       dl 0x000067 ; 23.906 11, 0.405
0409D5 6D 00 00    0847*       dl 0x00006D ; 25.313 12, 0.428
0409D8 73 00 00    0848*       dl 0x000073 ; 26.719 13, 0.450
0409DB 78 00 00    0849*       dl 0x000078 ; 28.125 14, 0.471
0409DE 7E 00 00    0850*       dl 0x00007E ; 29.531 15, 0.493
0409E1 83 00 00    0851*       dl 0x000083 ; 30.938 16, 0.514
0409E4 88 00 00    0852*       dl 0x000088 ; 32.344 17, 0.535
0409E7 8E 00 00    0853*       dl 0x00008E ; 33.750 18, 0.556
0409EA 93 00 00    0854*       dl 0x000093 ; 35.156 19, 0.576
0409ED 98 00 00    0855*       dl 0x000098 ; 36.563 1A, 0.596
0409F0 9D 00 00    0856*       dl 0x00009D ; 37.969 1B, 0.615
0409F3 A2 00 00    0857*       dl 0x0000A2 ; 39.375 1C, 0.634
0409F6 A7 00 00    0858*       dl 0x0000A7 ; 40.781 1D, 0.653
0409F9 AB 00 00    0859*       dl 0x0000AB ; 42.188 1E, 0.672
0409FC B0 00 00    0860*       dl 0x0000B0 ; 43.594 1F, 0.690
0409FF B5 00 00    0861*       dl 0x0000B5 ; 45.000 20, 0.707
040A02 B9 00 00    0862*       dl 0x0000B9 ; 46.406 21, 0.724
040A05 BD 00 00    0863*       dl 0x0000BD ; 47.813 22, 0.741
040A08 C1 00 00    0864*       dl 0x0000C1 ; 49.219 23, 0.757
040A0B C5 00 00    0865*       dl 0x0000C5 ; 50.625 24, 0.773
040A0E C9 00 00    0866*       dl 0x0000C9 ; 52.031 25, 0.788
040A11 CD 00 00    0867*       dl 0x0000CD ; 53.438 26, 0.803
040A14 D1 00 00    0868*       dl 0x0000D1 ; 54.844 27, 0.818
040A17 D4 00 00    0869*       dl 0x0000D4 ; 56.250 28, 0.831
040A1A D8 00 00    0870*       dl 0x0000D8 ; 57.656 29, 0.845
040A1D DB 00 00    0871*       dl 0x0000DB ; 59.063 2A, 0.858
040A20 DE 00 00    0872*       dl 0x0000DE ; 60.469 2B, 0.870
040A23 E1 00 00    0873*       dl 0x0000E1 ; 61.875 2C, 0.882
040A26 E4 00 00    0874*       dl 0x0000E4 ; 63.281 2D, 0.893
040A29 E7 00 00    0875*       dl 0x0000E7 ; 64.688 2E, 0.904
040A2C EA 00 00    0876*       dl 0x0000EA ; 66.094 2F, 0.914
040A2F EC 00 00    0877*       dl 0x0000EC ; 67.500 30, 0.924
040A32 EE 00 00    0878*       dl 0x0000EE ; 68.906 31, 0.933
040A35 F1 00 00    0879*       dl 0x0000F1 ; 70.313 32, 0.942
040A38 F3 00 00    0880*       dl 0x0000F3 ; 71.719 33, 0.950
040A3B F4 00 00    0881*       dl 0x0000F4 ; 73.125 34, 0.957
040A3E F6 00 00    0882*       dl 0x0000F6 ; 74.531 35, 0.964
040A41 F8 00 00    0883*       dl 0x0000F8 ; 75.938 36, 0.970
040A44 F9 00 00    0884*       dl 0x0000F9 ; 77.344 37, 0.976
040A47 FB 00 00    0885*       dl 0x0000FB ; 78.750 38, 0.981
040A4A FC 00 00    0886*       dl 0x0000FC ; 80.156 39, 0.985
040A4D FD 00 00    0887*       dl 0x0000FD ; 81.563 3A, 0.989
040A50 FE 00 00    0888*       dl 0x0000FE ; 82.969 3B, 0.992
040A53 FE 00 00    0889*       dl 0x0000FE ; 84.375 3C, 0.995
040A56 FF 00 00    0890*       dl 0x0000FF ; 85.781 3D, 0.997
040A59 FF 00 00    0891*       dl 0x0000FF ; 87.188 3E, 0.999
040A5C FF 00 00    0892*       dl 0x0000FF ; 88.594 3F, 1.000
040A5F 00 01 00    0893*       dl 0x000100 ; 90.000 40, 1.000
040A62 FF 00 00    0894*       dl 0x0000FF ; 91.406 41, 1.000
040A65 FF 00 00    0895*       dl 0x0000FF ; 92.813 42, 0.999
040A68 FF 00 00    0896*       dl 0x0000FF ; 94.219 43, 0.997
040A6B FE 00 00    0897*       dl 0x0000FE ; 95.625 44, 0.995
040A6E FE 00 00    0898*       dl 0x0000FE ; 97.031 45, 0.992
040A71 FD 00 00    0899*       dl 0x0000FD ; 98.438 46, 0.989
040A74 FC 00 00    0900*       dl 0x0000FC ; 99.844 47, 0.985
040A77 FB 00 00    0901*       dl 0x0000FB ; 101.250 48, 0.981
040A7A F9 00 00    0902*       dl 0x0000F9 ; 102.656 49, 0.976
040A7D F8 00 00    0903*       dl 0x0000F8 ; 104.063 4A, 0.970
040A80 F6 00 00    0904*       dl 0x0000F6 ; 105.469 4B, 0.964
040A83 F4 00 00    0905*       dl 0x0000F4 ; 106.875 4C, 0.957
040A86 F3 00 00    0906*       dl 0x0000F3 ; 108.281 4D, 0.950
040A89 F1 00 00    0907*       dl 0x0000F1 ; 109.688 4E, 0.942
040A8C EE 00 00    0908*       dl 0x0000EE ; 111.094 4F, 0.933
040A8F EC 00 00    0909*       dl 0x0000EC ; 112.500 50, 0.924
040A92 EA 00 00    0910*       dl 0x0000EA ; 113.906 51, 0.914
040A95 E7 00 00    0911*       dl 0x0000E7 ; 115.313 52, 0.904
040A98 E4 00 00    0912*       dl 0x0000E4 ; 116.719 53, 0.893
040A9B E1 00 00    0913*       dl 0x0000E1 ; 118.125 54, 0.882
040A9E DE 00 00    0914*       dl 0x0000DE ; 119.531 55, 0.870
040AA1 DB 00 00    0915*       dl 0x0000DB ; 120.938 56, 0.858
040AA4 D8 00 00    0916*       dl 0x0000D8 ; 122.344 57, 0.845
040AA7 D4 00 00    0917*       dl 0x0000D4 ; 123.750 58, 0.831
040AAA D1 00 00    0918*       dl 0x0000D1 ; 125.156 59, 0.818
040AAD CD 00 00    0919*       dl 0x0000CD ; 126.563 5A, 0.803
040AB0 C9 00 00    0920*       dl 0x0000C9 ; 127.969 5B, 0.788
040AB3 C5 00 00    0921*       dl 0x0000C5 ; 129.375 5C, 0.773
040AB6 C1 00 00    0922*       dl 0x0000C1 ; 130.781 5D, 0.757
040AB9 BD 00 00    0923*       dl 0x0000BD ; 132.188 5E, 0.741
040ABC B9 00 00    0924*       dl 0x0000B9 ; 133.594 5F, 0.724
040ABF B5 00 00    0925*       dl 0x0000B5 ; 135.000 60, 0.707
040AC2 B0 00 00    0926*       dl 0x0000B0 ; 136.406 61, 0.690
040AC5 AB 00 00    0927*       dl 0x0000AB ; 137.813 62, 0.672
040AC8 A7 00 00    0928*       dl 0x0000A7 ; 139.219 63, 0.653
040ACB A2 00 00    0929*       dl 0x0000A2 ; 140.625 64, 0.634
040ACE 9D 00 00    0930*       dl 0x00009D ; 142.031 65, 0.615
040AD1 98 00 00    0931*       dl 0x000098 ; 143.438 66, 0.596
040AD4 93 00 00    0932*       dl 0x000093 ; 144.844 67, 0.576
040AD7 8E 00 00    0933*       dl 0x00008E ; 146.250 68, 0.556
040ADA 88 00 00    0934*       dl 0x000088 ; 147.656 69, 0.535
040ADD 83 00 00    0935*       dl 0x000083 ; 149.063 6A, 0.514
040AE0 7E 00 00    0936*       dl 0x00007E ; 150.469 6B, 0.493
040AE3 78 00 00    0937*       dl 0x000078 ; 151.875 6C, 0.471
040AE6 73 00 00    0938*       dl 0x000073 ; 153.281 6D, 0.450
040AE9 6D 00 00    0939*       dl 0x00006D ; 154.688 6E, 0.428
040AEC 67 00 00    0940*       dl 0x000067 ; 156.094 6F, 0.405
040AEF 61 00 00    0941*       dl 0x000061 ; 157.500 70, 0.383
040AF2 5C 00 00    0942*       dl 0x00005C ; 158.906 71, 0.360
040AF5 56 00 00    0943*       dl 0x000056 ; 160.313 72, 0.337
040AF8 50 00 00    0944*       dl 0x000050 ; 161.719 73, 0.314
040AFB 4A 00 00    0945*       dl 0x00004A ; 163.125 74, 0.290
040AFE 44 00 00    0946*       dl 0x000044 ; 164.531 75, 0.267
040B01 3E 00 00    0947*       dl 0x00003E ; 165.938 76, 0.243
040B04 38 00 00    0948*       dl 0x000038 ; 167.344 77, 0.219
040B07 31 00 00    0949*       dl 0x000031 ; 168.750 78, 0.195
040B0A 2B 00 00    0950*       dl 0x00002B ; 170.156 79, 0.171
040B0D 25 00 00    0951*       dl 0x000025 ; 171.563 7A, 0.147
040B10 1F 00 00    0952*       dl 0x00001F ; 172.969 7B, 0.122
040B13 19 00 00    0953*       dl 0x000019 ; 174.375 7C, 0.098
040B16 12 00 00    0954*       dl 0x000012 ; 175.781 7D, 0.074
040B19 0C 00 00    0955*       dl 0x00000C ; 177.188 7E, 0.049
040B1C 06 00 00    0956*       dl 0x000006 ; 178.594 7F, 0.025
040B1F 00 00 00    0957*       dl 0x000000 ; 180.000 80, 0.000
040B22 FA FF FF    0958*       dl 0xFFFFFA ; 181.406 81, -0.025
040B25 F4 FF FF    0959*       dl 0xFFFFF4 ; 182.813 82, -0.049
040B28 EE FF FF    0960*       dl 0xFFFFEE ; 184.219 83, -0.074
040B2B E7 FF FF    0961*       dl 0xFFFFE7 ; 185.625 84, -0.098
040B2E E1 FF FF    0962*       dl 0xFFFFE1 ; 187.031 85, -0.122
040B31 DB FF FF    0963*       dl 0xFFFFDB ; 188.438 86, -0.147
040B34 D5 FF FF    0964*       dl 0xFFFFD5 ; 189.844 87, -0.171
040B37 CF FF FF    0965*       dl 0xFFFFCF ; 191.250 88, -0.195
040B3A C8 FF FF    0966*       dl 0xFFFFC8 ; 192.656 89, -0.219
040B3D C2 FF FF    0967*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040B40 BC FF FF    0968*       dl 0xFFFFBC ; 195.469 8B, -0.267
040B43 B6 FF FF    0969*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040B46 B0 FF FF    0970*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040B49 AA FF FF    0971*       dl 0xFFFFAA ; 199.688 8E, -0.337
040B4C A4 FF FF    0972*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040B4F 9F FF FF    0973*       dl 0xFFFF9F ; 202.500 90, -0.383
040B52 99 FF FF    0974*       dl 0xFFFF99 ; 203.906 91, -0.405
040B55 93 FF FF    0975*       dl 0xFFFF93 ; 205.313 92, -0.428
040B58 8D FF FF    0976*       dl 0xFFFF8D ; 206.719 93, -0.450
040B5B 88 FF FF    0977*       dl 0xFFFF88 ; 208.125 94, -0.471
040B5E 82 FF FF    0978*       dl 0xFFFF82 ; 209.531 95, -0.493
040B61 7D FF FF    0979*       dl 0xFFFF7D ; 210.938 96, -0.514
040B64 78 FF FF    0980*       dl 0xFFFF78 ; 212.344 97, -0.535
040B67 72 FF FF    0981*       dl 0xFFFF72 ; 213.750 98, -0.556
040B6A 6D FF FF    0982*       dl 0xFFFF6D ; 215.156 99, -0.576
040B6D 68 FF FF    0983*       dl 0xFFFF68 ; 216.563 9A, -0.596
040B70 63 FF FF    0984*       dl 0xFFFF63 ; 217.969 9B, -0.615
040B73 5E FF FF    0985*       dl 0xFFFF5E ; 219.375 9C, -0.634
040B76 59 FF FF    0986*       dl 0xFFFF59 ; 220.781 9D, -0.653
040B79 55 FF FF    0987*       dl 0xFFFF55 ; 222.188 9E, -0.672
040B7C 50 FF FF    0988*       dl 0xFFFF50 ; 223.594 9F, -0.690
040B7F 4B FF FF    0989*       dl 0xFFFF4B ; 225.000 A0, -0.707
040B82 47 FF FF    0990*       dl 0xFFFF47 ; 226.406 A1, -0.724
040B85 43 FF FF    0991*       dl 0xFFFF43 ; 227.813 A2, -0.741
040B88 3F FF FF    0992*       dl 0xFFFF3F ; 229.219 A3, -0.757
040B8B 3B FF FF    0993*       dl 0xFFFF3B ; 230.625 A4, -0.773
040B8E 37 FF FF    0994*       dl 0xFFFF37 ; 232.031 A5, -0.788
040B91 33 FF FF    0995*       dl 0xFFFF33 ; 233.438 A6, -0.803
040B94 2F FF FF    0996*       dl 0xFFFF2F ; 234.844 A7, -0.818
040B97 2C FF FF    0997*       dl 0xFFFF2C ; 236.250 A8, -0.831
040B9A 28 FF FF    0998*       dl 0xFFFF28 ; 237.656 A9, -0.845
040B9D 25 FF FF    0999*       dl 0xFFFF25 ; 239.063 AA, -0.858
040BA0 22 FF FF    1000*       dl 0xFFFF22 ; 240.469 AB, -0.870
040BA3 1F FF FF    1001*       dl 0xFFFF1F ; 241.875 AC, -0.882
040BA6 1C FF FF    1002*       dl 0xFFFF1C ; 243.281 AD, -0.893
040BA9 19 FF FF    1003*       dl 0xFFFF19 ; 244.688 AE, -0.904
040BAC 16 FF FF    1004*       dl 0xFFFF16 ; 246.094 AF, -0.914
040BAF 14 FF FF    1005*       dl 0xFFFF14 ; 247.500 B0, -0.924
040BB2 12 FF FF    1006*       dl 0xFFFF12 ; 248.906 B1, -0.933
040BB5 0F FF FF    1007*       dl 0xFFFF0F ; 250.313 B2, -0.942
040BB8 0D FF FF    1008*       dl 0xFFFF0D ; 251.719 B3, -0.950
040BBB 0C FF FF    1009*       dl 0xFFFF0C ; 253.125 B4, -0.957
040BBE 0A FF FF    1010*       dl 0xFFFF0A ; 254.531 B5, -0.964
040BC1 08 FF FF    1011*       dl 0xFFFF08 ; 255.938 B6, -0.970
040BC4 07 FF FF    1012*       dl 0xFFFF07 ; 257.344 B7, -0.976
040BC7 05 FF FF    1013*       dl 0xFFFF05 ; 258.750 B8, -0.981
040BCA 04 FF FF    1014*       dl 0xFFFF04 ; 260.156 B9, -0.985
040BCD 03 FF FF    1015*       dl 0xFFFF03 ; 261.563 BA, -0.989
040BD0 02 FF FF    1016*       dl 0xFFFF02 ; 262.969 BB, -0.992
040BD3 02 FF FF    1017*       dl 0xFFFF02 ; 264.375 BC, -0.995
040BD6 01 FF FF    1018*       dl 0xFFFF01 ; 265.781 BD, -0.997
040BD9 01 FF FF    1019*       dl 0xFFFF01 ; 267.188 BE, -0.999
040BDC 01 FF FF    1020*       dl 0xFFFF01 ; 268.594 BF, -1.000
040BDF 00 FF FF    1021*       dl 0xFFFF00 ; 270.000 C0, -1.000
040BE2 01 FF FF    1022*       dl 0xFFFF01 ; 271.406 C1, -1.000
040BE5 01 FF FF    1023*       dl 0xFFFF01 ; 272.813 C2, -0.999
040BE8 01 FF FF    1024*       dl 0xFFFF01 ; 274.219 C3, -0.997
040BEB 02 FF FF    1025*       dl 0xFFFF02 ; 275.625 C4, -0.995
040BEE 02 FF FF    1026*       dl 0xFFFF02 ; 277.031 C5, -0.992
040BF1 03 FF FF    1027*       dl 0xFFFF03 ; 278.438 C6, -0.989
040BF4 04 FF FF    1028*       dl 0xFFFF04 ; 279.844 C7, -0.985
040BF7 05 FF FF    1029*       dl 0xFFFF05 ; 281.250 C8, -0.981
040BFA 07 FF FF    1030*       dl 0xFFFF07 ; 282.656 C9, -0.976
040BFD 08 FF FF    1031*       dl 0xFFFF08 ; 284.063 CA, -0.970
040C00 0A FF FF    1032*       dl 0xFFFF0A ; 285.469 CB, -0.964
040C03 0C FF FF    1033*       dl 0xFFFF0C ; 286.875 CC, -0.957
040C06 0D FF FF    1034*       dl 0xFFFF0D ; 288.281 CD, -0.950
040C09 0F FF FF    1035*       dl 0xFFFF0F ; 289.688 CE, -0.942
040C0C 12 FF FF    1036*       dl 0xFFFF12 ; 291.094 CF, -0.933
040C0F 14 FF FF    1037*       dl 0xFFFF14 ; 292.500 D0, -0.924
040C12 16 FF FF    1038*       dl 0xFFFF16 ; 293.906 D1, -0.914
040C15 19 FF FF    1039*       dl 0xFFFF19 ; 295.313 D2, -0.904
040C18 1C FF FF    1040*       dl 0xFFFF1C ; 296.719 D3, -0.893
040C1B 1F FF FF    1041*       dl 0xFFFF1F ; 298.125 D4, -0.882
040C1E 22 FF FF    1042*       dl 0xFFFF22 ; 299.531 D5, -0.870
040C21 25 FF FF    1043*       dl 0xFFFF25 ; 300.938 D6, -0.858
040C24 28 FF FF    1044*       dl 0xFFFF28 ; 302.344 D7, -0.845
040C27 2C FF FF    1045*       dl 0xFFFF2C ; 303.750 D8, -0.831
040C2A 2F FF FF    1046*       dl 0xFFFF2F ; 305.156 D9, -0.818
040C2D 33 FF FF    1047*       dl 0xFFFF33 ; 306.563 DA, -0.803
040C30 37 FF FF    1048*       dl 0xFFFF37 ; 307.969 DB, -0.788
040C33 3B FF FF    1049*       dl 0xFFFF3B ; 309.375 DC, -0.773
040C36 3F FF FF    1050*       dl 0xFFFF3F ; 310.781 DD, -0.757
040C39 43 FF FF    1051*       dl 0xFFFF43 ; 312.188 DE, -0.741
040C3C 47 FF FF    1052*       dl 0xFFFF47 ; 313.594 DF, -0.724
040C3F 4B FF FF    1053*       dl 0xFFFF4B ; 315.000 E0, -0.707
040C42 50 FF FF    1054*       dl 0xFFFF50 ; 316.406 E1, -0.690
040C45 55 FF FF    1055*       dl 0xFFFF55 ; 317.813 E2, -0.672
040C48 59 FF FF    1056*       dl 0xFFFF59 ; 319.219 E3, -0.653
040C4B 5E FF FF    1057*       dl 0xFFFF5E ; 320.625 E4, -0.634
040C4E 63 FF FF    1058*       dl 0xFFFF63 ; 322.031 E5, -0.615
040C51 68 FF FF    1059*       dl 0xFFFF68 ; 323.438 E6, -0.596
040C54 6D FF FF    1060*       dl 0xFFFF6D ; 324.844 E7, -0.576
040C57 72 FF FF    1061*       dl 0xFFFF72 ; 326.250 E8, -0.556
040C5A 78 FF FF    1062*       dl 0xFFFF78 ; 327.656 E9, -0.535
040C5D 7D FF FF    1063*       dl 0xFFFF7D ; 329.063 EA, -0.514
040C60 82 FF FF    1064*       dl 0xFFFF82 ; 330.469 EB, -0.493
040C63 88 FF FF    1065*       dl 0xFFFF88 ; 331.875 EC, -0.471
040C66 8D FF FF    1066*       dl 0xFFFF8D ; 333.281 ED, -0.450
040C69 93 FF FF    1067*       dl 0xFFFF93 ; 334.688 EE, -0.428
040C6C 99 FF FF    1068*       dl 0xFFFF99 ; 336.094 EF, -0.405
040C6F 9F FF FF    1069*       dl 0xFFFF9F ; 337.500 F0, -0.383
040C72 A4 FF FF    1070*       dl 0xFFFFA4 ; 338.906 F1, -0.360
040C75 AA FF FF    1071*       dl 0xFFFFAA ; 340.313 F2, -0.337
040C78 B0 FF FF    1072*       dl 0xFFFFB0 ; 341.719 F3, -0.314
040C7B B6 FF FF    1073*       dl 0xFFFFB6 ; 343.125 F4, -0.290
040C7E BC FF FF    1074*       dl 0xFFFFBC ; 344.531 F5, -0.267
040C81 C2 FF FF    1075*       dl 0xFFFFC2 ; 345.938 F6, -0.243
040C84 C8 FF FF    1076*       dl 0xFFFFC8 ; 347.344 F7, -0.219
040C87 CF FF FF    1077*       dl 0xFFFFCF ; 348.750 F8, -0.195
040C8A D5 FF FF    1078*       dl 0xFFFFD5 ; 350.156 F9, -0.171
040C8D DB FF FF    1079*       dl 0xFFFFDB ; 351.563 FA, -0.147
040C90 E1 FF FF    1080*       dl 0xFFFFE1 ; 352.969 FB, -0.122
040C93 E7 FF FF    1081*       dl 0xFFFFE7 ; 354.375 FC, -0.098
040C96 EE FF FF    1082*       dl 0xFFFFEE ; 355.781 FD, -0.074
040C99 F4 FF FF    1083*       dl 0xFFFFF4 ; 357.188 FE, -0.049
040C9C FA FF FF    1084*       dl 0xFFFFFA ; 358.594 FF, -0.025
040C9F 00 00 00    1085*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
040CA2             1086*   
040CA2             1087*   atan_lut_168:
040CA2 00 00 00    1088*       dl 0x000000 ; 000000, 0.000
040CA5 28 00 00    1089*       dl 0x000028 ; 000001, 0.224
040CA8 51 00 00    1090*       dl 0x000051 ; 000002, 0.448
040CAB 7A 00 00    1091*       dl 0x00007A ; 000003, 0.671
040CAE A2 00 00    1092*       dl 0x0000A2 ; 000004, 0.895
040CB1 CB 00 00    1093*       dl 0x0000CB ; 000005, 1.119
040CB4 F4 00 00    1094*       dl 0x0000F4 ; 000006, 1.343
040CB7 1D 01 00    1095*       dl 0x00011D ; 000007, 1.566
040CBA 45 01 00    1096*       dl 0x000145 ; 000008, 1.790
040CBD 6E 01 00    1097*       dl 0x00016E ; 000009, 2.013
040CC0 97 01 00    1098*       dl 0x000197 ; 00000A, 2.237
040CC3 BF 01 00    1099*       dl 0x0001BF ; 00000B, 2.460
040CC6 E8 01 00    1100*       dl 0x0001E8 ; 00000C, 2.684
040CC9 11 02 00    1101*       dl 0x000211 ; 00000D, 2.907
040CCC 39 02 00    1102*       dl 0x000239 ; 00000E, 3.130
040CCF 62 02 00    1103*       dl 0x000262 ; 00000F, 3.353
040CD2 8B 02 00    1104*       dl 0x00028B ; 000010, 3.576
040CD5 B3 02 00    1105*       dl 0x0002B3 ; 000011, 3.799
040CD8 DC 02 00    1106*       dl 0x0002DC ; 000012, 4.022
040CDB 04 03 00    1107*       dl 0x000304 ; 000013, 4.245
040CDE 2D 03 00    1108*       dl 0x00032D ; 000014, 4.467
040CE1 55 03 00    1109*       dl 0x000355 ; 000015, 4.690
040CE4 7E 03 00    1110*       dl 0x00037E ; 000016, 4.912
040CE7 A6 03 00    1111*       dl 0x0003A6 ; 000017, 5.134
040CEA CE 03 00    1112*       dl 0x0003CE ; 000018, 5.356
040CED F7 03 00    1113*       dl 0x0003F7 ; 000019, 5.578
040CF0 1F 04 00    1114*       dl 0x00041F ; 00001A, 5.799
040CF3 48 04 00    1115*       dl 0x000448 ; 00001B, 6.021
040CF6 70 04 00    1116*       dl 0x000470 ; 00001C, 6.242
040CF9 98 04 00    1117*       dl 0x000498 ; 00001D, 6.463
040CFC C0 04 00    1118*       dl 0x0004C0 ; 00001E, 6.684
040CFF E8 04 00    1119*       dl 0x0004E8 ; 00001F, 6.905
040D02 11 05 00    1120*       dl 0x000511 ; 000020, 7.125
040D05 39 05 00    1121*       dl 0x000539 ; 000021, 7.345
040D08 61 05 00    1122*       dl 0x000561 ; 000022, 7.565
040D0B 89 05 00    1123*       dl 0x000589 ; 000023, 7.785
040D0E B1 05 00    1124*       dl 0x0005B1 ; 000024, 8.005
040D11 D9 05 00    1125*       dl 0x0005D9 ; 000025, 8.224
040D14 01 06 00    1126*       dl 0x000601 ; 000026, 8.443
040D17 28 06 00    1127*       dl 0x000628 ; 000027, 8.662
040D1A 50 06 00    1128*       dl 0x000650 ; 000028, 8.881
040D1D 78 06 00    1129*       dl 0x000678 ; 000029, 9.099
040D20 A0 06 00    1130*       dl 0x0006A0 ; 00002A, 9.317
040D23 C7 06 00    1131*       dl 0x0006C7 ; 00002B, 9.535
040D26 EF 06 00    1132*       dl 0x0006EF ; 00002C, 9.752
040D29 16 07 00    1133*       dl 0x000716 ; 00002D, 9.970
040D2C 3E 07 00    1134*       dl 0x00073E ; 00002E, 10.187
040D2F 65 07 00    1135*       dl 0x000765 ; 00002F, 10.403
040D32 8D 07 00    1136*       dl 0x00078D ; 000030, 10.620
040D35 B4 07 00    1137*       dl 0x0007B4 ; 000031, 10.836
040D38 DB 07 00    1138*       dl 0x0007DB ; 000032, 11.051
040D3B 03 08 00    1139*       dl 0x000803 ; 000033, 11.267
040D3E 2A 08 00    1140*       dl 0x00082A ; 000034, 11.482
040D41 51 08 00    1141*       dl 0x000851 ; 000035, 11.697
040D44 78 08 00    1142*       dl 0x000878 ; 000036, 11.911
040D47 9F 08 00    1143*       dl 0x00089F ; 000037, 12.125
040D4A C6 08 00    1144*       dl 0x0008C6 ; 000038, 12.339
040D4D ED 08 00    1145*       dl 0x0008ED ; 000039, 12.553
040D50 13 09 00    1146*       dl 0x000913 ; 00003A, 12.766
040D53 3A 09 00    1147*       dl 0x00093A ; 00003B, 12.978
040D56 61 09 00    1148*       dl 0x000961 ; 00003C, 13.191
040D59 87 09 00    1149*       dl 0x000987 ; 00003D, 13.403
040D5C AE 09 00    1150*       dl 0x0009AE ; 00003E, 13.614
040D5F D4 09 00    1151*       dl 0x0009D4 ; 00003F, 13.825
040D62 FB 09 00    1152*       dl 0x0009FB ; 000040, 14.036
040D65 21 0A 00    1153*       dl 0x000A21 ; 000041, 14.247
040D68 47 0A 00    1154*       dl 0x000A47 ; 000042, 14.457
040D6B 6D 0A 00    1155*       dl 0x000A6D ; 000043, 14.666
040D6E 94 0A 00    1156*       dl 0x000A94 ; 000044, 14.876
040D71 BA 0A 00    1157*       dl 0x000ABA ; 000045, 15.085
040D74 E0 0A 00    1158*       dl 0x000AE0 ; 000046, 15.293
040D77 05 0B 00    1159*       dl 0x000B05 ; 000047, 15.501
040D7A 2B 0B 00    1160*       dl 0x000B2B ; 000048, 15.709
040D7D 51 0B 00    1161*       dl 0x000B51 ; 000049, 15.916
040D80 77 0B 00    1162*       dl 0x000B77 ; 00004A, 16.123
040D83 9C 0B 00    1163*       dl 0x000B9C ; 00004B, 16.329
040D86 C2 0B 00    1164*       dl 0x000BC2 ; 00004C, 16.535
040D89 E7 0B 00    1165*       dl 0x000BE7 ; 00004D, 16.740
040D8C 0C 0C 00    1166*       dl 0x000C0C ; 00004E, 16.945
040D8F 32 0C 00    1167*       dl 0x000C32 ; 00004F, 17.150
040D92 57 0C 00    1168*       dl 0x000C57 ; 000050, 17.354
040D95 7C 0C 00    1169*       dl 0x000C7C ; 000051, 17.558
040D98 A1 0C 00    1170*       dl 0x000CA1 ; 000052, 17.761
040D9B C6 0C 00    1171*       dl 0x000CC6 ; 000053, 17.964
040D9E EB 0C 00    1172*       dl 0x000CEB ; 000054, 18.166
040DA1 0F 0D 00    1173*       dl 0x000D0F ; 000055, 18.368
040DA4 34 0D 00    1174*       dl 0x000D34 ; 000056, 18.569
040DA7 58 0D 00    1175*       dl 0x000D58 ; 000057, 18.770
040DAA 7D 0D 00    1176*       dl 0x000D7D ; 000058, 18.970
040DAD A1 0D 00    1177*       dl 0x000DA1 ; 000059, 19.170
040DB0 C6 0D 00    1178*       dl 0x000DC6 ; 00005A, 19.370
040DB3 EA 0D 00    1179*       dl 0x000DEA ; 00005B, 19.569
040DB6 0E 0E 00    1180*       dl 0x000E0E ; 00005C, 19.767
040DB9 32 0E 00    1181*       dl 0x000E32 ; 00005D, 19.965
040DBC 56 0E 00    1182*       dl 0x000E56 ; 00005E, 20.163
040DBF 7A 0E 00    1183*       dl 0x000E7A ; 00005F, 20.360
040DC2 9E 0E 00    1184*       dl 0x000E9E ; 000060, 20.556
040DC5 C1 0E 00    1185*       dl 0x000EC1 ; 000061, 20.752
040DC8 E5 0E 00    1186*       dl 0x000EE5 ; 000062, 20.947
040DCB 08 0F 00    1187*       dl 0x000F08 ; 000063, 21.142
040DCE 2C 0F 00    1188*       dl 0x000F2C ; 000064, 21.337
040DD1 4F 0F 00    1189*       dl 0x000F4F ; 000065, 21.531
040DD4 72 0F 00    1190*       dl 0x000F72 ; 000066, 21.724
040DD7 95 0F 00    1191*       dl 0x000F95 ; 000067, 21.917
040DDA B8 0F 00    1192*       dl 0x000FB8 ; 000068, 22.109
040DDD DB 0F 00    1193*       dl 0x000FDB ; 000069, 22.301
040DE0 FE 0F 00    1194*       dl 0x000FFE ; 00006A, 22.493
040DE3 21 10 00    1195*       dl 0x001021 ; 00006B, 22.683
040DE6 44 10 00    1196*       dl 0x001044 ; 00006C, 22.874
040DE9 66 10 00    1197*       dl 0x001066 ; 00006D, 23.063
040DEC 89 10 00    1198*       dl 0x001089 ; 00006E, 23.253
040DEF AB 10 00    1199*       dl 0x0010AB ; 00006F, 23.441
040DF2 CD 10 00    1200*       dl 0x0010CD ; 000070, 23.629
040DF5 EF 10 00    1201*       dl 0x0010EF ; 000071, 23.817
040DF8 11 11 00    1202*       dl 0x001111 ; 000072, 24.004
040DFB 33 11 00    1203*       dl 0x001133 ; 000073, 24.191
040DFE 55 11 00    1204*       dl 0x001155 ; 000074, 24.376
040E01 77 11 00    1205*       dl 0x001177 ; 000075, 24.562
040E04 99 11 00    1206*       dl 0x001199 ; 000076, 24.747
040E07 BA 11 00    1207*       dl 0x0011BA ; 000077, 24.931
040E0A DC 11 00    1208*       dl 0x0011DC ; 000078, 25.115
040E0D FD 11 00    1209*       dl 0x0011FD ; 000079, 25.298
040E10 1E 12 00    1210*       dl 0x00121E ; 00007A, 25.481
040E13 3F 12 00    1211*       dl 0x00123F ; 00007B, 25.663
040E16 60 12 00    1212*       dl 0x001260 ; 00007C, 25.844
040E19 81 12 00    1213*       dl 0x001281 ; 00007D, 26.025
040E1C A2 12 00    1214*       dl 0x0012A2 ; 00007E, 26.206
040E1F C3 12 00    1215*       dl 0x0012C3 ; 00007F, 26.386
040E22 E4 12 00    1216*       dl 0x0012E4 ; 000080, 26.565
040E25 04 13 00    1217*       dl 0x001304 ; 000081, 26.744
040E28 25 13 00    1218*       dl 0x001325 ; 000082, 26.922
040E2B 45 13 00    1219*       dl 0x001345 ; 000083, 27.100
040E2E 65 13 00    1220*       dl 0x001365 ; 000084, 27.277
040E31 85 13 00    1221*       dl 0x001385 ; 000085, 27.453
040E34 A5 13 00    1222*       dl 0x0013A5 ; 000086, 27.629
040E37 C5 13 00    1223*       dl 0x0013C5 ; 000087, 27.805
040E3A E5 13 00    1224*       dl 0x0013E5 ; 000088, 27.979
040E3D 05 14 00    1225*       dl 0x001405 ; 000089, 28.154
040E40 24 14 00    1226*       dl 0x001424 ; 00008A, 28.327
040E43 44 14 00    1227*       dl 0x001444 ; 00008B, 28.501
040E46 63 14 00    1228*       dl 0x001463 ; 00008C, 28.673
040E49 83 14 00    1229*       dl 0x001483 ; 00008D, 28.845
040E4C A2 14 00    1230*       dl 0x0014A2 ; 00008E, 29.017
040E4F C1 14 00    1231*       dl 0x0014C1 ; 00008F, 29.187
040E52 E0 14 00    1232*       dl 0x0014E0 ; 000090, 29.358
040E55 FF 14 00    1233*       dl 0x0014FF ; 000091, 29.527
040E58 1E 15 00    1234*       dl 0x00151E ; 000092, 29.697
040E5B 3C 15 00    1235*       dl 0x00153C ; 000093, 29.865
040E5E 5B 15 00    1236*       dl 0x00155B ; 000094, 30.033
040E61 79 15 00    1237*       dl 0x001579 ; 000095, 30.201
040E64 98 15 00    1238*       dl 0x001598 ; 000096, 30.368
040E67 B6 15 00    1239*       dl 0x0015B6 ; 000097, 30.534
040E6A D4 15 00    1240*       dl 0x0015D4 ; 000098, 30.700
040E6D F2 15 00    1241*       dl 0x0015F2 ; 000099, 30.865
040E70 10 16 00    1242*       dl 0x001610 ; 00009A, 31.030
040E73 2E 16 00    1243*       dl 0x00162E ; 00009B, 31.194
040E76 4C 16 00    1244*       dl 0x00164C ; 00009C, 31.357
040E79 6A 16 00    1245*       dl 0x00166A ; 00009D, 31.520
040E7C 87 16 00    1246*       dl 0x001687 ; 00009E, 31.682
040E7F A5 16 00    1247*       dl 0x0016A5 ; 00009F, 31.844
040E82 C2 16 00    1248*       dl 0x0016C2 ; 0000A0, 32.005
040E85 DF 16 00    1249*       dl 0x0016DF ; 0000A1, 32.166
040E88 FC 16 00    1250*       dl 0x0016FC ; 0000A2, 32.326
040E8B 19 17 00    1251*       dl 0x001719 ; 0000A3, 32.486
040E8E 36 17 00    1252*       dl 0x001736 ; 0000A4, 32.645
040E91 53 17 00    1253*       dl 0x001753 ; 0000A5, 32.803
040E94 70 17 00    1254*       dl 0x001770 ; 0000A6, 32.961
040E97 8C 17 00    1255*       dl 0x00178C ; 0000A7, 33.118
040E9A A9 17 00    1256*       dl 0x0017A9 ; 0000A8, 33.275
040E9D C5 17 00    1257*       dl 0x0017C5 ; 0000A9, 33.431
040EA0 E2 17 00    1258*       dl 0x0017E2 ; 0000AA, 33.587
040EA3 FE 17 00    1259*       dl 0x0017FE ; 0000AB, 33.742
040EA6 1A 18 00    1260*       dl 0x00181A ; 0000AC, 33.896
040EA9 36 18 00    1261*       dl 0x001836 ; 0000AD, 34.050
040EAC 52 18 00    1262*       dl 0x001852 ; 0000AE, 34.203
040EAF 6E 18 00    1263*       dl 0x00186E ; 0000AF, 34.356
040EB2 8A 18 00    1264*       dl 0x00188A ; 0000B0, 34.509
040EB5 A5 18 00    1265*       dl 0x0018A5 ; 0000B1, 34.660
040EB8 C1 18 00    1266*       dl 0x0018C1 ; 0000B2, 34.811
040EBB DC 18 00    1267*       dl 0x0018DC ; 0000B3, 34.962
040EBE F7 18 00    1268*       dl 0x0018F7 ; 0000B4, 35.112
040EC1 13 19 00    1269*       dl 0x001913 ; 0000B5, 35.262
040EC4 2E 19 00    1270*       dl 0x00192E ; 0000B6, 35.410
040EC7 49 19 00    1271*       dl 0x001949 ; 0000B7, 35.559
040ECA 64 19 00    1272*       dl 0x001964 ; 0000B8, 35.707
040ECD 7F 19 00    1273*       dl 0x00197F ; 0000B9, 35.854
040ED0 99 19 00    1274*       dl 0x001999 ; 0000BA, 36.001
040ED3 B4 19 00    1275*       dl 0x0019B4 ; 0000BB, 36.147
040ED6 CE 19 00    1276*       dl 0x0019CE ; 0000BC, 36.293
040ED9 E9 19 00    1277*       dl 0x0019E9 ; 0000BD, 36.438
040EDC 03 1A 00    1278*       dl 0x001A03 ; 0000BE, 36.582
040EDF 1D 1A 00    1279*       dl 0x001A1D ; 0000BF, 36.726
040EE2 37 1A 00    1280*       dl 0x001A37 ; 0000C0, 36.870
040EE5 51 1A 00    1281*       dl 0x001A51 ; 0000C1, 37.013
040EE8 6B 1A 00    1282*       dl 0x001A6B ; 0000C2, 37.155
040EEB 85 1A 00    1283*       dl 0x001A85 ; 0000C3, 37.297
040EEE 9F 1A 00    1284*       dl 0x001A9F ; 0000C4, 37.439
040EF1 B9 1A 00    1285*       dl 0x001AB9 ; 0000C5, 37.579
040EF4 D2 1A 00    1286*       dl 0x001AD2 ; 0000C6, 37.720
040EF7 EC 1A 00    1287*       dl 0x001AEC ; 0000C7, 37.859
040EFA 05 1B 00    1288*       dl 0x001B05 ; 0000C8, 37.999
040EFD 1E 1B 00    1289*       dl 0x001B1E ; 0000C9, 38.137
040F00 37 1B 00    1290*       dl 0x001B37 ; 0000CA, 38.276
040F03 50 1B 00    1291*       dl 0x001B50 ; 0000CB, 38.413
040F06 69 1B 00    1292*       dl 0x001B69 ; 0000CC, 38.550
040F09 82 1B 00    1293*       dl 0x001B82 ; 0000CD, 38.687
040F0C 9B 1B 00    1294*       dl 0x001B9B ; 0000CE, 38.823
040F0F B4 1B 00    1295*       dl 0x001BB4 ; 0000CF, 38.959
040F12 CC 1B 00    1296*       dl 0x001BCC ; 0000D0, 39.094
040F15 E5 1B 00    1297*       dl 0x001BE5 ; 0000D1, 39.228
040F18 FD 1B 00    1298*       dl 0x001BFD ; 0000D2, 39.362
040F1B 16 1C 00    1299*       dl 0x001C16 ; 0000D3, 39.496
040F1E 2E 1C 00    1300*       dl 0x001C2E ; 0000D4, 39.629
040F21 46 1C 00    1301*       dl 0x001C46 ; 0000D5, 39.762
040F24 5E 1C 00    1302*       dl 0x001C5E ; 0000D6, 39.894
040F27 76 1C 00    1303*       dl 0x001C76 ; 0000D7, 40.025
040F2A 8E 1C 00    1304*       dl 0x001C8E ; 0000D8, 40.156
040F2D A5 1C 00    1305*       dl 0x001CA5 ; 0000D9, 40.286
040F30 BD 1C 00    1306*       dl 0x001CBD ; 0000DA, 40.416
040F33 D5 1C 00    1307*       dl 0x001CD5 ; 0000DB, 40.546
040F36 EC 1C 00    1308*       dl 0x001CEC ; 0000DC, 40.675
040F39 04 1D 00    1309*       dl 0x001D04 ; 0000DD, 40.803
040F3C 1B 1D 00    1310*       dl 0x001D1B ; 0000DE, 40.931
040F3F 32 1D 00    1311*       dl 0x001D32 ; 0000DF, 41.059
040F42 49 1D 00    1312*       dl 0x001D49 ; 0000E0, 41.186
040F45 60 1D 00    1313*       dl 0x001D60 ; 0000E1, 41.312
040F48 77 1D 00    1314*       dl 0x001D77 ; 0000E2, 41.438
040F4B 8E 1D 00    1315*       dl 0x001D8E ; 0000E3, 41.564
040F4E A5 1D 00    1316*       dl 0x001DA5 ; 0000E4, 41.689
040F51 BB 1D 00    1317*       dl 0x001DBB ; 0000E5, 41.814
040F54 D2 1D 00    1318*       dl 0x001DD2 ; 0000E6, 41.938
040F57 E9 1D 00    1319*       dl 0x001DE9 ; 0000E7, 42.061
040F5A FF 1D 00    1320*       dl 0x001DFF ; 0000E8, 42.184
040F5D 15 1E 00    1321*       dl 0x001E15 ; 0000E9, 42.307
040F60 2C 1E 00    1322*       dl 0x001E2C ; 0000EA, 42.429
040F63 42 1E 00    1323*       dl 0x001E42 ; 0000EB, 42.551
040F66 58 1E 00    1324*       dl 0x001E58 ; 0000EC, 42.672
040F69 6E 1E 00    1325*       dl 0x001E6E ; 0000ED, 42.793
040F6C 84 1E 00    1326*       dl 0x001E84 ; 0000EE, 42.913
040F6F 99 1E 00    1327*       dl 0x001E99 ; 0000EF, 43.033
040F72 AF 1E 00    1328*       dl 0x001EAF ; 0000F0, 43.152
040F75 C5 1E 00    1329*       dl 0x001EC5 ; 0000F1, 43.271
040F78 DA 1E 00    1330*       dl 0x001EDA ; 0000F2, 43.390
040F7B F0 1E 00    1331*       dl 0x001EF0 ; 0000F3, 43.508
040F7E 05 1F 00    1332*       dl 0x001F05 ; 0000F4, 43.625
040F81 1B 1F 00    1333*       dl 0x001F1B ; 0000F5, 43.742
040F84 30 1F 00    1334*       dl 0x001F30 ; 0000F6, 43.859
040F87 45 1F 00    1335*       dl 0x001F45 ; 0000F7, 43.975
040F8A 5A 1F 00    1336*       dl 0x001F5A ; 0000F8, 44.091
040F8D 6F 1F 00    1337*       dl 0x001F6F ; 0000F9, 44.206
040F90 84 1F 00    1338*       dl 0x001F84 ; 0000FA, 44.321
040F93 99 1F 00    1339*       dl 0x001F99 ; 0000FB, 44.435
040F96 AD 1F 00    1340*       dl 0x001FAD ; 0000FC, 44.549
040F99 C2 1F 00    1341*       dl 0x001FC2 ; 0000FD, 44.662
040F9C D7 1F 00    1342*       dl 0x001FD7 ; 0000FE, 44.775
040F9F EB 1F 00    1343*       dl 0x001FEB ; 0000FF, 44.888
040FA2 00 20 00    1344*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
040FA5             0037        include "fonts.inc"
040FA5             0001*   fonts_load:
040FA5 DD 21 2C 23 0002*       ld ix,font_list ; pointer to font list lookup
       04          
040FAA 06 0D       0003*       ld b,num_fonts ; loop counter
040FAC             0004*   
040FAC             0005*   @load_loop:
040FAC C5          0006*       push bc ; save loop counter
040FAD             0007*   
040FAD             0008*   ; load font into a buffer
040FAD DD 27 06    0009*       ld hl,(ix+font_list_bufferId)
040FB0 DD 31 09    0010*       ld iy,(ix+font_list_filename)
040FB3 CD 4E 15 04 0011*       call vdu_load_buffer_from_file
040FB7             0012*   
040FB7             0013*   ; create font from buffer
040FB7 DD 27 06    0014*       ld hl,(ix+font_list_bufferId)
040FBA DD 5E 00    0015*       ld e,(ix+font_list_width)
040FBD DD 56 03    0016*       ld d,(ix+font_list_height)
040FC0 3E 00       0017*       ld a,0 ; flags
040FC2 CD A1 17 04 0018*       call vdu_font_create
040FC6             0019*   
040FC6             0020*   ; select font
040FC6 DD 27 06    0021*       ld hl,(ix+font_list_bufferId)
040FC9 3E 01       0022*       ld a,1 ; flags
040FCB CD 87 17 04 0023*       call vdu_font_select
040FCF             0024*   
040FCF             0025*   ; ; debug print filename
040FCF             0026*   ;     call printNewLine
040FCF             0027*   ;     ld hl,(ix+font_list_filename)
040FCF             0028*   ;     call printString
040FCF             0029*   
040FCF             0030*   ; advance font_list pointer to next record
040FCF ED 32 0C    0031*       lea ix,ix+font_list_record_size
040FD2             0032*   
040FD2             0033*   ; restore loop counter
040FD2 C1          0034*       pop bc
040FD3 10 D7       0035*       djnz @load_loop
040FD5             0036*   
040FD5             0037*   ; all done
040FD5 C9          0038*       ret
040FD6             0038        include "images.inc"
040FD6             0001*   image_type: equ 0
040FD6             0002*   image_width: equ image_type+3
040FD6             0003*   image_height: equ image_width+3
040FD6             0004*   image_filesize: equ image_height+3
040FD6             0005*   image_filename: equ image_filesize+3
040FD6             0006*   image_bufferId: equ image_filename+3
040FD6             0007*   image_record_size: equ image_bufferId+3
040FD6             0008*   
040FD6 00 00 00    0009*   cur_image_list: dl 0
040FD9 00 00 00    0010*   cur_filename: dl 0
040FDC 00 00 00    0011*   cur_buffer_id: dl 0
040FDF             0012*   
040FDF             0013*   img_load_init:
040FDF             0014*   ; initialize logo's position parameters
040FDF 21 00 00 00 0015*       ld hl,0
040FE3 22 94 10 04 0016*       ld (logo_xvel),hl
040FE7 22 97 10 04 0017*       ld (logo_xpos),hl
040FEB             0018*   ; begin 16.8 maths to determine logo's y position and velocity
040FEB 21 00 E0 00 0019*       ld hl,224*256
040FEF 22 9D 10 04 0020*       ld (logo_ypos),hl
040FF3 EB          0021*       ex de,hl
040FF4 21 00 28 FF 0022*       ld hl,-240+24*256
040FF8             0023*       ; ld de,-256*[sprites_num_images+tiles_dg_num_images+ui_num_images]
040FF8 11 00 8C 01 0024*       ld de,[sprites_num_images+tiles_dg_num_images+ui_num_images]*256
040FFC CD 79 06 04 0025*       call sdiv168 ; ud.e = distance / num images = y velocity
041000 ED 53 9A 10 0026*       ld (logo_yvel),de
       04          
041005             0027*   ; all done
041005 C9          0028*       ret
041006             0029*   
041006             0030*   ; inputs: bc is the number of images to load, cur_image_list set
041006             0031*   img_load_main:
041006             0032*   ; back up loop counter
041006 C5          0033*       push bc
041007             0034*   
041007             0035*   ; load the next image
041007 CD 3E 10 04 0036*       call load_next_image
04100B             0037*   
04100B             0038*   ; plot the background
04100B CD 45 13 04 0039*       call vdu_cls
04100F 21 2C 00 00 0040*       ld hl,BUF_SPLASH_BG
041013 CD 3A 14 04 0041*       call vdu_buff_select
041017 01 00 00 00 0042*       ld bc,0
04101B 11 00 00 00 0043*       ld de,0
04101F CD 3A 18 04 0044*       call vdu_plot_bmp
041023             0045*   
041023             0046*   ; ; draw the most recently loaded image
041023             0047*   ; 	ld hl,(cur_buffer_id)
041023             0048*   ; 	call vdu_buff_select
041023             0049*   ; 	ld bc,0
041023             0050*   ; 	ld de,0
041023             0051*   ; 	call vdu_plot_bmp
041023             0052*   
041023             0053*   ; move logo
041023 CD 6F 10 04 0054*       call move_logo
041027             0055*   
041027             0056*   ; print current filename
041027 2A D9 0F 04 0057*       ld hl,(cur_filename)
04102B CD 67 00 04 0058*       call printString
04102F             0059*   
04102F             0060*   ; flip the framebuffer
04102F             0061*       ; call vdu_flip
04102F             0062*   
04102F             0063*   ; decrement loop counter
04102F C1          0064*       pop bc
041030 0B          0065*       dec bc
041031 79          0066*       ld a,c
041032 B7          0067*       or a
041033 C2 06 10 04 0068*       jp nz,img_load_main
041037 78          0069*       ld a,b
041038 B7          0070*       or a
041039 C2 06 10 04 0071*       jp nz,img_load_main
04103D C9          0072*       ret
04103E             0073*   
04103E             0074*   load_next_image:
04103E FD 2A D6 0F 0075*       ld iy,(cur_image_list)
       04          
041043 FD E5       0076*       push iy
041045 FD 7E 00    0077*       ld a,(iy+image_type) ; get image type
041048 FD 07 03    0078*       ld bc,(iy+image_width) ; get image width
04104B FD 17 06    0079*       ld de,(iy+image_height) ; get image height
04104E FD 31 09    0080*       ld ix,(iy+image_filesize) ; get image file size
041051 FD 27 0F    0081*       ld hl,(iy+image_bufferId) ; get image bufferId
041054 22 DC 0F 04 0082*       ld (cur_buffer_id),hl
041058 FD 37 0C    0083*       ld iy,(iy+image_filename) ; get image filename
04105B FD 22 D9 0F 0084*       ld (cur_filename),iy
       04          
041060 CD 2C 15 04 0085*       call vdu_load_img
041064 FD E1       0086*       pop iy
041066 ED 33 12    0087*       lea iy,iy+image_record_size
041069 FD 22 D6 0F 0088*       ld (cur_image_list),iy
       04          
04106E C9          0089*       ret
04106F             0090*   
04106F             0091*   move_logo:
04106F             0092*   ; activate logo bitmap
04106F 21 2D 00 00 0093*       ld hl, BUF_SPLASH_LOGO
041073 CD 3A 14 04 0094*       call vdu_buff_select
041077             0095*   ; update position based on velocity parameters
041077 2A 9D 10 04 0096*       ld hl,(logo_ypos)
04107B ED 5B 9A 10 0097*       ld de,(logo_yvel)
       04          
041080 19          0098*       add hl,de
041081 22 9D 10 04 0099*       ld (logo_ypos),hl
041085             0100*   ; draw logo
041085 ED 4B 97 10 0101*       ld bc,(logo_xpos)
       04          
04108A ED 5B 9D 10 0102*       ld de,(logo_ypos)
       04          
04108F CD 56 18 04 0103*       call vdu_plot_bmp168
041093 C9          0104*       ret
041094             0105*   
041094 00 00 00    0106*   logo_xvel: dl 0
041097 00 00 00    0107*   logo_xpos: dl 0
04109A             0108*   
04109A 00 00 00    0109*   logo_yvel: dl 0
04109D 00 00 00    0110*   logo_ypos: dl 0
0410A0             0111*   
0410A0             0112*   load_ui_images:
0410A0             0113*   ; initialize image loading variables
0410A0 21 CE 5E 04 0114*       ld hl,ui_image_list
0410A4 22 D6 0F 04 0115*       ld (cur_image_list),hl
0410A8             0116*   ; load images
0410A8 06 2E       0117*       ld b,ui_num_images
0410AA             0118*   @loop:
0410AA C5          0119*       push bc
0410AB CD 3E 10 04 0120*       call load_next_image
0410AF C1          0121*       pop bc
0410B0 10 F8       0122*       djnz @loop
0410B2 C9          0123*       ret
0410B3             0124*   ; end load_ui_images
0410B3             0125*   
0410B3             0126*   load_sprite_images:
0410B3             0127*   ; initialize image loading variables
0410B3 21 8E 42 04 0128*       ld hl,sprites_image_list
0410B7 22 D6 0F 04 0129*       ld (cur_image_list),hl
0410BB 01 A3 00 00 0130*       ld bc,sprites_num_images
0410BF             0131*   ; load images
0410BF CD 06 10 04 0132*       call img_load_main
0410C3 C9          0133*       ret
0410C4             0134*   ; end load_sprite_images
0410C4             0135*   
0410C4             0136*   load_tilesets:
0410C4             0137*   ; initialize image loading variables
0410C4 21 11 26 04 0138*       ld hl,tiles_dg_image_list
0410C8 22 D6 0F 04 0139*       ld (cur_image_list),hl
0410CC 01 BB 00 00 0140*       ld bc,tiles_dg_num_images
0410D0             0141*   ; load images
0410D0 CD 06 10 04 0142*       call img_load_main
0410D4 C9          0143*       ret
0410D5             0144*   ; end load_tilesets
0410D5             0145*   
0410D5             0146*   load_backgrounds:
0410D5             0147*   ; initialize image loading variables
0410D5 21 79 25 04 0148*       ld hl,bg_image_list
0410D9 22 D6 0F 04 0149*       ld (cur_image_list),hl
0410DD 01 04 00 00 0150*       ld bc,bg_num_images
0410E1             0151*   ; load images
0410E1 CD 06 10 04 0152*       call img_load_main
0410E5 C9          0153*       ret
0410E6             0154*   ; end load_backgrounds
0410E6             0155*   
0410E6             0156*   ; ; initialize image loading variables
0410E6             0157*   ;     ld hl,tiles_xevious_image_list
0410E6             0158*   ;     ld (cur_image_list),hl
0410E6             0159*   ;     ld bc,tiles_xevious_num_images
0410E6             0160*   ; ; load images
0410E6             0161*   ;     call img_load_main
0410E6 C9          0162*       ret
0410E7             0039        include "timer.inc"
0410E7             0001*   ; Table 32. Timer Control Registers
0410E7             0002*   TMR0_CTL: equ 80h
0410E7             0003*   TMR1_CTL: equ 83h
0410E7             0004*   TMR2_CTL: equ 86h
0410E7             0005*   TMR3_CTL: equ 89h
0410E7             0006*   TMR4_CTL: equ 8Ch
0410E7             0007*   TMR5_CTL: equ 8Fh
0410E7             0008*   
0410E7             0009*   ; each timer register takes three bytes:
0410E7             0010*   ;   0: control register
0410E7             0011*   ;   1: low byte of timer reset value
0410E7             0012*   ;   2: high byte of timer reset value
0410E7             0013*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0410E7             0014*   ; which correctly force the high and upper bytes of the address bus to zero
0410E7             0015*   
0410E7             0016*   TMR_REG_CTL: equ 0
0410E7             0017*   TMR_RES_LOW: equ 1
0410E7             0018*   TMR_RES_HIGH: equ 2
0410E7             0019*   
0410E7             0020*   ; Timer Control Register Bit Definitions
0410E7             0021*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0410E7             0022*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
0410E7             0023*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0410E7             0024*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
0410E7             0025*                               ; the TMRx_CTL register is read.
0410E7             0026*   
0410E7             0027*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0410E7             0028*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0410E7             0029*   
0410E7             0030*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0410E7             0031*                               ;  0,and counting stops when the end-of-count value is reached.
0410E7             0032*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0410E7             0033*                               ; written to the counter when the end-of-count value is reached.
0410E7             0034*   
0410E7             0035*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0410E7             0036*   CLK_DIV_256:  equ %00001100 ;
0410E7             0037*   CLK_DIV_64:   equ %00001000 ;
0410E7             0038*   CLK_DIV_16:   equ %00000100 ;
0410E7             0039*   CLK_DIV_4:    equ %00000000 ;
0410E7             0040*   
0410E7             0041*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0410E7             0042*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0410E7             0043*                               ; When a 1 is written to this bit,the values in the reload registers
0410E7             0044*                               ;  are loaded into the downcounter when the timer restarts. The
0410E7             0045*                               ; programmer must ensure that this bit is set to 1 each time
0410E7             0046*                               ; SINGLE-PASS mode is used.
0410E7             0047*   
0410E7             0048*   ; disable/enable the programmable reload timer
0410E7             0049*   PRT_EN_0:     equ %00000000 ;
0410E7             0050*   PRT_EN_1:     equ %00000001 ;
0410E7             0051*   
0410E7             0052*   ; Table 37. Timer Input Source Select Register
0410E7             0053*   ; Each of the 4 timers are allocated two bits of the 8-bit register
0410E7             0054*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0410E7             0055*   ;   00: System clock / CLK_DIV
0410E7             0056*   ;   01: RTC / CLK_DIV
0410E7             0057*   ;   NOTE: these are the values given in the manual,but it may be a typo
0410E7             0058*   ;   10: GPIO port B pin 1.
0410E7             0059*   ;   11: GPIO port B pin 1.
0410E7             0060*   TMR_ISS:   equ 92h ; register address
0410E7             0061*   
0410E7             0062*   ; Table 51. Real-Time Clock Control Register
0410E7             0063*   RTC_CTRL: equ EDh ; register address
0410E7             0064*   
0410E7             0065*   ; alarm interrupt disable/enable
0410E7             0066*   RTC_ALARM_0:    equ %00000000
0410E7             0067*   RTC_ALARM_1:    equ %10000000
0410E7             0068*   
0410E7             0069*   ; interrupt on alarm disable/enable
0410E7             0070*   RTC_INT_ENT_0:  equ %00000000
0410E7             0071*   RTC_INT_ENT_1:  equ %01000000
0410E7             0072*   
0410E7             0073*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0410E7             0074*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0410E7             0075*   
0410E7             0076*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0410E7             0077*                                   ; On-chip 32768 Hz oscillator is enabled.
0410E7             0078*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0410E7             0079*                                   ; On-chip 32768 Hz oscillator is disabled.
0410E7             0080*   
0410E7             0081*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0410E7             0082*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0410E7             0083*   
0410E7             0084*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0410E7             0085*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0410E7             0086*   
0410E7             0087*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0410E7             0088*                                   ; RTC counter is enabled.
0410E7             0089*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0410E7             0090*                                   ; RTC counter is disabled.
0410E7             0091*   
0410E7             0092*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0410E7             0093*   
0410E7             0094*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0410E7             0095*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0410E7 00 00 00    0096*   prt_reload: dl 0x000000
0410EA             0097*   
0410EA             0098*   ; returns: a = 0 if running on hardware,1 if running on emulator
0410EA             0099*   ;          de = number PRT interrupts during test interval
0410EA             0100*   prt_calibrate:
0410EA CD B9 13 04 0101*       call vdu_vblank
0410EE             0102*   ; set a MOS timer
0410EE 21 78 00 00 0103*       ld hl,120*1 ; 1 second
0410F2 FD 21 72 12 0104*       ld iy,tmr_test
       04          
0410F7 CD 50 12 04 0105*       call tmr_set
0410FB             0106*   ; set a PRT timer
0410FB             0107*       ; ld hl,prt_reload_hardware
0410FB             0108*       ; ld hl,prt_reload_emulator
0410FB 21 05 2D 00 0109*       ld hl,prt_reload_emulator + prt_reload_hardware / 2
0410FF 22 E7 10 04 0110*       ld (prt_reload),hl
041103 CD 8B 11 04 0111*       call prt_set
041107             0112*   @loop:
041107             0113*   ; check time remaining on MOS timer
041107 CD 5E 12 04 0114*       call tmr_get
04110B CA 15 11 04 0115*       jp z,@done ; time expired,so quit
04110F FA 15 11 04 0116*       jp m,@done ; time past expiration (negative),so quit
041113 18 F2       0117*       jr @loop
041115             0118*   @done:
041115 ED 5B D9 11 0119*       ld de,(prt_irq_counter)
       04          
04111A 01 0C 2D 00 0120*       ld bc,prt_reload_hardware ; default value for running on hardware
04111E ED 43 E7 10 0121*       ld (prt_reload),bc
       04          
041123 21 64 00 00 0122*       ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
041127 AF          0123*       xor a ; clear carry,zero is default value for running on hardware
041128 32 4A 11 04 0124*       ld (is_emulator),a
04112C ED 52       0125*       sbc hl,de
04112E 21 4B 11 04 0126*       ld hl,on_hardware ; default message for running on hardware
041132 CA EA 10 04 0127*       jp z,prt_calibrate ; zero result is indeterminate so we try again
041136 F8          0128*       ret m ; negative result means we're on hardware
041137 3C          0129*       inc a ; we're on emulator
041138 32 4A 11 04 0130*       ld (is_emulator),a
04113C 01 FF 2C 00 0131*       ld bc,prt_reload_emulator
041140 ED 43 E7 10 0132*       ld (prt_reload),bc
       04          
041145 21 61 11 04 0133*       ld hl,on_emulator
041149 C9          0134*       ret
04114A 00          0135*   is_emulator: db 0
04114B 52 75 6E 6E 0136*   on_hardware: defb "Running on hardware\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 0D 
       0A 00       
041161 52 75 6E 6E 0137*   on_emulator: defb "Running on emulator\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 0D 
       0A 00       
041177             0138*   
041177 43 61 6C 69 0139*   calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04118B             0140*   
04118B             0141*   ; set PRT timer
04118B             0142*   prt_set:
04118B 21 00 00 00 0143*       ld hl,0
04118F 22 D9 11 04 0144*       ld (prt_irq_counter),hl
041193 2A E7 10 04 0145*       ld hl,(prt_reload)
041197 ED 29 84    0146*       out0 (TMR1_CTL+TMR_RES_LOW),l
04119A ED 21 85    0147*   	out0 (TMR1_CTL+TMR_RES_HIGH),h
04119D             0148*   ; disable timer
04119D 3E 06       0149*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
04119F ED 39 83    0150*   	out0 (TMR1_CTL+TMR_REG_CTL),a
0411A2             0151*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0411A2 3E 57       0152*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0411A4 ED 39 83    0153*   	out0 (TMR1_CTL+TMR_REG_CTL),a
0411A7 C9          0154*       ret
0411A8             0155*   
0411A8             0156*   ; ===============================================
0411A8             0157*   ; PRT Timer Interrupt Handling
0411A8             0158*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
0411A8             0159*   ; -----------------------------------------------
0411A8             0160*   prt_irq_init:
0411A8             0161*       ; set up interrupt vector table 2
0411A8 21 00 00 00 0162*   	ld hl,0
0411AC 3A 0C 01 00 0163*   	ld a,($10c)
0411B0 6F          0164*   	ld l,a
0411B1 3A 0D 01 00 0165*   	ld a,($10d)
0411B5 67          0166*   	ld h,a
0411B6             0167*   
0411B6             0168*   	; skip over CALL ($c3)
0411B6 23          0169*   	inc hl
0411B7             0170*   	; load address of jump into vector table 2 (in ram)
0411B7 ED 27       0171*   	ld hl,(hl)
0411B9             0172*   
0411B9             0173*   	; write CALL prt_irq_handler to vector table 2
0411B9 3E C3       0174*   	ld a,$c3
0411BB 77          0175*   	ld (hl),a
0411BC 23          0176*   	inc hl
0411BD 11 C4 11 04 0177*   	ld de,prt_irq_handler
0411C1 ED 1F       0178*   	ld (hl),de
0411C3             0179*   
0411C3 C9          0180*       ret
0411C4             0181*   
0411C4             0182*   prt_irq_handler:
0411C4 F3          0183*   	di
0411C5 F5          0184*   	push af
0411C6 E5          0185*       push hl
0411C7 ED 38 83    0186*   	in0 a,(TMR1_CTL+TMR_REG_CTL)
0411CA 2A D9 11 04 0187*   	ld hl,(prt_irq_counter)
0411CE 23          0188*   	inc hl
0411CF 22 D9 11 04 0189*   	ld (prt_irq_counter),hl
0411D3 E1          0190*       pop hl
0411D4 F1          0191*   	pop af
0411D5 FB          0192*   	ei
0411D6 5B ED 4D    0193*   	reti.l
0411D9             0194*   
0411D9             0195*   prt_irq_counter:
0411D9 00 00 00    0196*   	.dl 0
0411DC             0197*   prt_irq_counter_saved:
0411DC 00 00 00    0198*       .dl 0
0411DF             0199*   
0411DF             0200*   prt_loop_reset:
0411DF E5          0201*       push hl
0411E0 21 00 00 00 0202*   	ld hl,0
0411E4 22 D9 11 04 0203*   	ld (prt_irq_counter),hl
0411E8 22 4A 12 04 0204*       ld (prt_loop_counter),hl
0411EC 22 4D 12 04 0205*       ld (prt_loops),hl
0411F0 CD 8B 11 04 0206*       call prt_set
0411F4 E1          0207*       pop hl
0411F5 C9          0208*       ret
0411F6             0209*   
0411F6             0210*   prt_loop_start:
0411F6 E5          0211*       push hl
0411F7 21 00 00 00 0212*   	ld hl,0
0411FB 22 D9 11 04 0213*   	ld (prt_irq_counter),hl
0411FF E1          0214*       pop hl
041200 C9          0215*       ret
041201             0216*   
041201             0217*   prt_loop_stop:
041201 E5          0218*       push hl
041202 D5          0219*       push de
041203 2A D9 11 04 0220*       ld hl,(prt_irq_counter)
041207 ED 5B 4A 12 0221*       ld de,(prt_loop_counter)
       04          
04120C 19          0222*       add hl,de
04120D 22 4A 12 04 0223*       ld (prt_loop_counter),hl
041211 21 00 00 00 0224*       ld hl,0
041215 22 D9 11 04 0225*       ld (prt_irq_counter),hl
041219 2A 4D 12 04 0226*       ld hl,(prt_loops)
04121D 23          0227*       inc hl
04121E 22 4D 12 04 0228*       ld (prt_loops),hl
041222 D1          0229*       pop de
041223 E1          0230*       pop hl
041224 C9          0231*       ret
041225             0232*   
041225             0233*   ; inputs: bc = y,x text coordinates to print
041225             0234*   prt_loop_print:
041225 F5          0235*       push af
041226 E5          0236*       push hl
041227 C5          0237*       push bc
041228 D5          0238*       push de
041229 DD E5       0239*       push ix
04122B FD E5       0240*       push iy
04122D CD 31 13 04 0241*       call vdu_move_cursor
041231             0242*   
041231 2A 4A 12 04 0243*       ld hl,(prt_loop_counter)
041235 CD CC 00 04 0244*       call printDec
041239             0245*   
041239 2A 4D 12 04 0246*       ld hl,(prt_loops)
04123D CD CC 00 04 0247*       call printDec
041241             0248*   
041241 FD E1       0249*       pop iy
041243 DD E1       0250*       pop ix
041245 D1          0251*       pop de
041246 C1          0252*       pop bc
041247 E1          0253*       pop hl
041248 F1          0254*       pop af
041249 C9          0255*       ret
04124A             0256*   
04124A             0257*   prt_loop_counter:
04124A 00 00 00    0258*       .dl 0
04124D             0259*   prt_loops:
04124D 00 00 00    0260*       .dl 0
041250             0261*   
041250             0262*   ; ===============================================
041250             0263*   ; Timer functions
041250             0264*   ; -----------------------------------------------
041250             0265*   ; set a countdown timer
041250             0266*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041250             0267*   ; returns: hl = current time
041250             0268*   tmr_set:
041250 FD 2F 03    0269*       ld (iy+3),hl            ; set time remaining
041253             0270*       MOSCALL mos_sysvars     ; ix points to syvars table
041253 3E 08       0001*M1 			LD	A, function
041255 5B CF       0002*M1 			RST.LIL	08h
041257 DD 27 00    0271*       ld hl,(ix+sysvar_time)  ; get current time
04125A FD 2F 00    0272*       ld (iy+0),hl            ; set start time
04125D C9          0273*       ret
04125E             0274*   
04125E             0275*   ; gets time remaining on a countdown timer
04125E             0276*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04125E             0277*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04125E             0278*   ;          sign flags: pos = time not expired,zero or neg = time expired
04125E             0279*   tmr_get:
04125E             0280*       MOSCALL mos_sysvars     ; ix points to syvars table
04125E 3E 08       0001*M1 			LD	A, function
041260 5B CF       0002*M1 			RST.LIL	08h
041262 DD 17 00    0281*       ld de,(ix+sysvar_time)  ; get current time
041265 FD 27 00    0282*       ld hl,(iy+0)            ; get start time
041268 AF          0283*       xor a                   ; clear carry
041269 ED 52       0284*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04126B FD 17 03    0285*       ld de,(iy+3)            ; get timer set value
04126E AF          0286*       xor a                   ; clear carry
04126F ED 5A       0287*       adc hl,de               ; hl = time remaining
041271             0288*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041271 C9          0289*       ret
041272             0290*   
041272             0291*   tmr_test: ds 6 ; example of a buffer to hold timer data
041278             0292*   
       FF FF FF FF 
       FF FF 
041278 00 00 00    0293*   timestamp_now: dl 0
04127B 00 00 00    0294*   timestamp_old: dl 0
04127E 00 00 00    0295*   timestamp_chg: dl 0
041281             0296*   
041281             0297*   ; update the global timestamp from the system clock
041281             0298*   ; inputs: none
041281             0299*   ; returns: hl = time elapsed in 1/120ths of a second
041281             0300*   ;          de = current time
041281             0301*   ;          ix = pointer to syvars table
041281             0302*   ; destroys: af,hl,de,ix
041281             0303*   timestamp_tick:
041281 ED 5B 78 12 0304*       ld de,(timestamp_now)   ; get previous time
       04          
041286 ED 53 7B 12 0305*       ld (timestamp_old),de   ; save previous time
       04          
04128B             0306*       MOSCALL mos_sysvars     ; ix points to syvars table
04128B 3E 08       0001*M1 			LD	A, function
04128D 5B CF       0002*M1 			RST.LIL	08h
04128F DD 27 00    0307*       ld hl,(ix+sysvar_time)  ; get current time
041292 22 78 12 04 0308*       ld (timestamp_now),hl   ; save current time
041296 AF          0309*       xor a                   ; clear carry
041297 ED 52       0310*       sbc hl,de               ; hl = time elapsed
041299 22 7E 12 04 0311*       ld (timestamp_chg),hl   ; save elapsed time
04129D C9          0312*       ret
04129E             0313*   
04129E             0314*   ; set a countdown timer
04129E             0315*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04129E             0316*   ; requires: timestamp_tick to be called at least once before this function
04129E             0317*   ; returns: hl = current time
04129E             0318*   ; destroys: hl
04129E             0319*   timestamp_tmr_set:
04129E FD 2F 03    0320*       ld (iy+3),hl            ; set time remaining
0412A1 2A 78 12 04 0321*       ld hl,(timestamp_now)   ; get current timestamp
0412A5 FD 2F 00    0322*       ld (iy+0),hl            ; set start time
0412A8 C9          0323*       ret
0412A9             0324*   
0412A9             0325*   ; gets time remaining on a countdown timer following the global timestamp
0412A9             0326*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0412A9             0327*   ; requires: timestamp_tick to be called at least once before this function
0412A9             0328*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0412A9             0329*   ;          sign flags: pos = time not expired,zero or neg = time expired
0412A9             0330*   ; destroys: af,hl,de
0412A9             0331*   timestamp_tmr_get:
0412A9 ED 5B 78 12 0332*       ld de,(timestamp_now)   ; get current timestamp
       04          
0412AE FD 27 00    0333*       ld hl,(iy+0)            ; get start time
0412B1 AF          0334*       xor a                   ; clear carry
0412B2 ED 52       0335*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0412B4 FD 17 03    0336*       ld de,(iy+3)            ; get timer set value
0412B7 AF          0337*       xor a                   ; clear carry
0412B8 ED 5A       0338*       adc hl,de               ; hl = time remaining
0412BA             0339*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0412BA C9          0340*       ret
0412BB             0341*   
0412BB             0342*   ; set a stopwatch
0412BB             0343*   ; returns: hl = start time
0412BB             0344*   ; destroys: hl,ix
0412BB             0345*   stopwatch_set:
0412BB             0346*       MOSCALL mos_sysvars     ; ix points to syvars table
0412BB 3E 08       0001*M1 			LD	A, function
0412BD 5B CF       0002*M1 			RST.LIL	08h
0412BF DD 27 00    0347*       ld hl,(ix+sysvar_time)  ; get current time
0412C2 22 D7 12 04 0348*       ld (stopwatch_started),hl            ; set start time
0412C6 C9          0349*       ret
0412C7             0350*   
0412C7             0351*   ; gets time elapsed on a stopwatch
0412C7             0352*   ; returns: hl = time elapsed in 1/120ths of a second
0412C7             0353*   ; destroys: af,hl,de,ix
0412C7             0354*   stopwatch_get:
0412C7             0355*       MOSCALL mos_sysvars     ; ix points to syvars table
0412C7 3E 08       0001*M1 			LD	A, function
0412C9 5B CF       0002*M1 			RST.LIL	08h
0412CB DD 27 00    0356*       ld hl,(ix+sysvar_time)  ; get current time
0412CE ED 5B D7 12 0357*       ld de,(stopwatch_started)            ; get start time
       04          
0412D3 AF          0358*       xor a                   ; clear carry
0412D4 ED 52       0359*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
0412D6 C9          0360*       ret
0412D7             0361*   
0412D7             0362*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
0412DA             0363*   
0412DA             0364*   ; ------------------
0412DA             0365*   ; delay routine
0412DA             0366*   ; Author: Richard Turrnidge
0412DA             0367*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
0412DA             0368*   ; routine waits a fixed time,then returns
0412DA             0369*   ; arrive with A =  the delay byte. One bit to be set only.
0412DA             0370*   ; eg. ld A,00000100b
0412DA             0371*   
0412DA             0372*   multiPurposeDelay:
       FF FF FF 
0412DA F5          0373*       push af
0412DB C5          0374*       push bc
0412DC DD E5       0375*       push ix
0412DE 47          0376*       ld b,a
0412DF 3E 08       0377*       ld a,$08
0412E1 5B CF       0378*       RST.LIL	08h                 ; get IX pointer to sysvars
0412E3             0379*   
0412E3             0380*   waitLoop:
0412E3             0381*   
0412E3 DD 7E 00    0382*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
0412E6             0383*   
0412E6             0384*                                   ;   we check if bit set is same as last time we checked.
0412E6             0385*                                   ;   bit 0 - don't use
0412E6             0386*                                   ;   bit 1 - changes 64 times per second
0412E6             0387*                                   ;   bit 2 - changes 32 times per second
0412E6             0388*                                   ;   bit 3 - changes 16 times per second
0412E6             0389*   
0412E6             0390*                                   ;   bit 4 - changes 8 times per second
0412E6             0391*                                   ;   bit 5 - changes 4 times per second
0412E6             0392*                                   ;   bit 6 - changes 2 times per second
0412E6             0393*                                   ;   bit 7 - changes 1 times per second
0412E6 A0          0394*       and b
0412E7 4F          0395*       ld c,a
0412E8 3A F9 12 04 0396*       ld a,(oldTimeStamp)
0412EC B9          0397*       cp c                        ; is A same as last value?
0412ED 28 F4       0398*       jr z,waitLoop              ; loop here if it is
0412EF 79          0399*       ld a,c
0412F0 32 F9 12 04 0400*       ld (oldTimeStamp),a        ; set new value
0412F4             0401*   
0412F4 DD E1       0402*       pop ix
0412F6 C1          0403*       pop bc
0412F7 F1          0404*       pop af
0412F8 C9          0405*       ret
0412F9             0406*   
0412F9 00          0407*   oldTimeStamp:   .db 00h
0412FA             0040        include "vdu.inc"
0412FA             0001*   ; VDU 30: Home cursor
0412FA             0002*   vdu_home_cursor:
0412FA 3E 1E       0003*       ld a,30
0412FC 5B D7       0004*   	rst.lil $10
0412FE C9          0005*   	ret
0412FF             0006*   
0412FF             0007*   vdu_cursor_on:
0412FF 21 0A 13 04 0008*   	ld hl,@cmd
041303 01 03 00 00 0009*   	ld bc,@end-@cmd
041307 5B DF       0010*   	rst.lil $18
041309 C9          0011*   	ret
04130A             0012*   @cmd:
04130A 17 01 01    0013*   	db 23,1,1
04130D             0014*   @end:
04130D             0015*   
04130D             0016*   vdu_cursor_off:
04130D 21 18 13 04 0017*   	ld hl,@cmd
041311 01 03 00 00 0018*   	ld bc,@end-@cmd
041315 5B DF       0019*   	rst.lil $18
041317 C9          0020*   	ret
041318             0021*   @cmd:
041318 17 01 00    0022*   	db 23,1,0
04131B             0023*   @end:
04131B             0024*   
04131B             0025*   ; VDU 5: Write text at graphics cursor
04131B             0026*   ; inputs: a is the character to write to the screen
04131B             0027*   ; prerequisites: the graphics cursor at the intended position on screen
04131B             0028*   ; outputs: see the name of the function
04131B             0029*   ; destroys: a, hl, bc
04131B             0030*   vdu_char_to_gfx_cursor:
04131B 32 2B 13 04 0031*   	ld (@arg),a
04131F 21 2A 13 04 0032*   	ld hl,@cmd
041323 01 02 00 00 0033*   	ld bc,@end-@cmd
041327 5B DF       0034*   	rst.lil $18
041329 C9          0035*   	ret
04132A 05          0036*   @cmd: db 5
04132B 00          0037*   @arg: db 0
04132C             0038*   @end:
04132C             0039*   ; VDU 9: Move cursor forward one character
04132C             0040*   vdu_cursor_forward:
04132C 3E 09       0041*       ld a,9
04132E 5B D7       0042*   	rst.lil $10
041330 C9          0043*   	ret
041331             0044*   
041331             0045*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041331             0046*   ; inputs: c=x, b=y 8-bit unsigned integers
041331             0047*   vdu_move_cursor:
041331 ED 43 42 13 0048*       ld (@x0),bc
       04          
041336 21 41 13 04 0049*   	ld hl,@cmd
04133A 01 03 00 00 0050*   	ld bc,@end-@cmd
04133E 5B DF       0051*   	rst.lil $18
041340 C9          0052*   	ret
041341 1F          0053*   @cmd: 	db 31
041342 00          0054*   @x0:	db 0
041343 00          0055*   @y0: 	db 0
041344 00          0056*   @end: 	db 0 ; padding
041345             0057*   
041345             0058*   ; VDU 12: Clear text area (CLS)
041345             0059*   vdu_cls:
041345 3E 0C       0060*       ld a,12
041347 5B D7       0061*   	rst.lil $10
041349 C9          0062*   	ret
04134A             0063*   
04134A             0064*   vdu_flip:
04134A 21 55 13 04 0065*   	ld hl,@cmd
04134E 01 03 00 00 0066*   	ld bc,@end-@cmd
041352 5B DF       0067*   	rst.lil $18
041354 C9          0068*   	ret
041355 17 00 C3    0069*   @cmd: db 23,0,0xC3
041358             0070*   @end:
041358             0071*   
041358             0072*   ; VDU 16: Clear graphics area (CLG)
041358             0073*   vdu_clg:
041358 3E 10       0074*       ld a,16
04135A 5B D7       0075*   	rst.lil $10
04135C C9          0076*   	ret
04135D             0077*   
04135D             0078*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04135D             0079*   ; VDU 23, 7: Scrolling
04135D             0080*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04135D             0081*   ; inputs: a, extent; l, direction; h; speed
04135D             0082*   vdu_scroll_down:
04135D 32 72 13 04 0083*   	ld (@extent),a
041361 22 73 13 04 0084*   	ld (@dir),hl ; implicitly populates @speed
041365 21 70 13 04 0085*   	ld hl,@cmd
041369 01 05 00 00 0086*   	ld bc,@end-@cmd
04136D 5B DF       0087*   	rst.lil $18     ;; Sending command to VDP
04136F C9          0088*   	ret
041370 17 07       0089*   @cmd:       db 23,7
041372 00          0090*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041373 00          0091*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
041374 00          0092*   @speed:     db 0x00 ; pixels
041375 00          0093*   @end:		db 0x00 ; padding
041376             0094*   
041376             0095*   ; COLOUR MODES
041376             0096*   ; Mode	Effect
041376             0097*   ; 0	Set on-screen pixel to target colour value
041376             0098*   ; 1	OR value with the on-screen pixel
041376             0099*   ; 2	AND value with the on-screen pixel
041376             0100*   ; 3	XOR value with the on-screen pixel
041376             0101*   ; 4	Invert the on-screen pixel
041376             0102*   ; 5	No operation
041376             0103*   ; 6	AND the inverse of the specified colour with the on-screen pixel
041376             0104*   ; 7	OR the inverse of the specified colour with the on-screen pixel
041376             0105*   
041376             0106*   ; VDU 17, colour: Define text colour (COLOUR)
041376             0107*   vdu_colour_text:
041376 32 86 13 04 0108*   	ld (@arg),a
04137A 21 85 13 04 0109*   	ld hl,@cmd
04137E 01 02 00 00 0110*   	ld bc,@end-@cmd
041382 5B DF       0111*   	rst.lil $18
041384 C9          0112*   	ret
041385 11          0113*   @cmd: db 17
041386 00          0114*   @arg: db 0
041387             0115*   @end:
041387             0116*   
041387             0117*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
041387             0118*   ; inputs: a=mode, c=colour (add 128 to set background colour)
041387             0119*   vdu_gcol:
041387 32 9C 13 04 0120*   	ld (@mode),a
04138B 79          0121*       ld a,c
04138C 32 9D 13 04 0122*       ld (@col),a
041390 21 9B 13 04 0123*   	ld hl,@cmd
041394 01 03 00 00 0124*   	ld bc,@end-@cmd
041398 5B DF       0125*   	rst.lil $18
04139A C9          0126*   	ret
04139B 12          0127*   @cmd:  db 18
04139C 00          0128*   @mode: db 0
04139D 00          0129*   @col:  db 0
04139E             0130*   @end:
04139E             0131*   
04139E             0132*   
04139E             0133*   ; VDU 28, left, bottom, right, top: Set text viewport **
04139E             0134*   ; MIND THE LITTLE-ENDIANESS
04139E             0135*   ; inputs: c=left,b=bottom,e=right,d=top
04139E             0136*   ; outputs; nothing
04139E             0137*   ; destroys: a might make it out alive
04139E             0138*   vdu_set_txt_viewport:
04139E ED 43 B4 13 0139*       ld (@lb),bc
       04          
0413A3 ED 53 B6 13 0140*   	ld (@rt),de
       04          
0413A8 21 B3 13 04 0141*   	ld hl,@cmd
0413AC 01 05 00 00 0142*   	ld bc,@end-@cmd
0413B0 5B DF       0143*   	rst.lil $18
0413B2 C9          0144*   	ret
0413B3 1C          0145*   @cmd:   db 28 ; set text viewport command
0413B4 00 00       0146*   @lb: 	dw 0x0000 ; set by bc
0413B6 00 00       0147*   @rt: 	dw 0x0000 ; set by de
0413B8 00          0148*   @end:   db 0x00	  ; padding
0413B9             0149*   
0413B9             0150*   ; Wait for VBLANK interrupt
0413B9             0151*   vdu_vblank:
0413B9 DD E5       0152*       PUSH 	IX
0413BB             0153*   	MOSCALL	mos_sysvars
0413BB 3E 08       0001*M1 			LD	A, function
0413BD 5B CF       0002*M1 			RST.LIL	08h
0413BF DD 7E 00    0154*   	LD	A, (IX + sysvar_time + 0)
0413C2             0155*   @wait:
0413C2 DD BE 00    0156*       CP 	A, (IX + sysvar_time + 0)
0413C5 28 FB       0157*       JR	Z, @wait
0413C7 DD E1       0158*       POP	IX
0413C9 C9          0159*       RET
0413CA             0160*   
0413CA             0161*   ; VDU 29, x; y;: Set graphics origin
0413CA             0162*   ; This command sets the graphics origin.
0413CA             0163*   ; The origin is the point on the screen where the coordinates (0,0) are located.
0413CA             0164*   ; inputs: bc=x0,de=y0
0413CA             0165*   ; outputs; nothing
0413CA             0166*   ; destroys: a might make it out alive
0413CA             0167*   vdu_set_gfx_origin:
0413CA ED 43 E0 13 0168*       ld (@x0),bc
       04          
0413CF ED 53 E2 13 0169*       ld (@y0),de
       04          
0413D4 21 DF 13 04 0170*       ld hl,@cmd
0413D8 01 05 00 00 0171*       ld bc,@end-@cmd
0413DC 5B DF       0172*       rst.lil $18
0413DE C9          0173*       ret
0413DF 1D          0174*   @cmd:   db 29 ; set graphics origin command
0413E0 00 00       0175*   @x0: 	dw 0x0000 ; set by bc
0413E2 00 00       0176*   @y0: 	dw 0x0000 ; set by de
0413E4 00          0177*   @end:   db 0x00	  ; padding
0413E5             0178*   
0413E5             0179*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
0413E5             0180*   ; NOTE: the order of the y-coordinate parameters are inverted
0413E5             0181*   ; 	because we have turned off logical screen scaling
0413E5             0182*   ; NOTE: coordinates are relative to current gfx origin
0413E5             0183*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0413E5             0184*   ; outputs; nothing
0413E5             0185*   ; destroys: a might make it out alive
0413E5             0186*   vdu_set_gfx_viewport:
0413E5 ED 43 05 14 0187*       ld (@x0),bc
       04          
0413EA FD 22 07 14 0188*       ld (@y1),iy
       04          
0413EF DD 22 09 14 0189*   	ld (@x1),ix
       04          
0413F4 ED 53 0B 14 0190*   	ld (@y0),de
       04          
0413F9 21 04 14 04 0191*   	ld hl,@cmd
0413FD 01 09 00 00 0192*   	ld bc,@end-@cmd
041401 5B DF       0193*   	rst.lil $18
041403 C9          0194*   	ret
041404 18          0195*   @cmd:   db 24 ; set graphics viewport command
041405 00 00       0196*   @x0: 	dw 0x0000 ; set by bc
041407 00 00       0197*   @y1: 	dw 0x0000 ; set by iy
041409 00 00       0198*   @x1: 	dw 0x0000 ; set by ix
04140B 00 00       0199*   @y0: 	dw 0x0000 ; set by de
04140D 00          0200*   @end:   db 0x00	  ; padding
04140E             0201*   
04140E             0202*   ; SCREEN MODES
04140E             0203*   ; ===============================
04140E             0204*   ; Mode  Horz  Vert  Cols  Refresh
04140E             0205*   ; ---   ----  ----  ----  -------
04140E             0206*   ; 11    320   240   2     60hz
04140E             0207*   ; 139   320   240   2     60hz
04140E             0208*   ; 23    512   384   2     60hz
04140E             0209*   ; 151   512   384   2     60hz
04140E             0210*   ; 6     640   240   2     60hz
04140E             0211*   ; 134   640   240   2     60hz
04140E             0212*   ; 2     640   480   2     60hz
04140E             0213*   ; 130   640   480   2     60hz
04140E             0214*   ; 17    800   600   2     60hz
04140E             0215*   ; 145   800   600   2     60hz
04140E             0216*   ; 18    1024  768   2     60hz
04140E             0217*   ; 146   1024  768   2     60hz
04140E             0218*   ; ---   ----  ----  ----  -------
04140E             0219*   ; 10    320   240   4     60hz
04140E             0220*   ; 138   320   240   4     60hz
04140E             0221*   ; 22    512   384   4     60hz
04140E             0222*   ; 150   512   384   4     60hz
04140E             0223*   ; 5     640   240   4     60hz
04140E             0224*   ; 133   640   240   4     60hz
04140E             0225*   ; 1     640   480   4     60hz
04140E             0226*   ; 129   640   480   4     60hz
04140E             0227*   ; 16    800   600   4     60hz
04140E             0228*   ; 19    1024  768   4     60hz
04140E             0229*   ; ---   ----  ----  ----  -------
04140E             0230*   ; 9     320   240   16    60hz
04140E             0231*   ; 137   320   240   16    60hz
04140E             0232*   ; 21    512   384   16    60hz
04140E             0233*   ; 149   512   384   16    60hz
04140E             0234*   ; 4     640   240   16    60hz
04140E             0235*   ; 132   640   240   16    60hz
04140E             0236*   ; 0     640   480   16    60hz
04140E             0237*   ; 7     n/a   n/a   16    60hz
04140E             0238*   ; ---   ----  ----  ----  -------
04140E             0239*   ; 8     320   240   64    60hz
04140E             0240*   ; 136   320   240   64    60hz
04140E             0241*   ; 20    512   384   64    60hz
04140E             0242*   ; 3     640   240   64    60hz
04140E             0243*   ; ---   ----  ----  ----  -------
04140E             0244*   vdu_set_screen_mode:
04140E 32 1E 14 04 0245*   	ld (@arg),a
041412 21 1D 14 04 0246*   	ld hl,@cmd
041416 01 02 00 00 0247*   	ld bc,@end-@cmd
04141A 5B DF       0248*   	rst.lil $18
04141C C9          0249*   	ret
04141D 16          0250*   @cmd: db 22 ; set screen mode
04141E 00          0251*   @arg: db 0  ; screen mode parameter
04141F             0252*   @end:
04141F             0253*   
04141F             0254*   ; get the current screen mode
04141F             0255*   ; inputs: none
04141F             0256*   ; outputs: a=screen mode
04141F             0257*   ; destroys: af, ix
04141F             0258*   vdu_get_screen_mode:
04141F             0259*       MOSCALL mos_sysvars
04141F 3E 08       0001*M1 			LD	A, function
041421 5B CF       0002*M1 			RST.LIL	08h
041423 DD 7E 27    0260*       ld a,(IX+sysvar_scrMode)
041426 C9          0261*       ret
041427             0262*   ; end vdu_get_screen_mode
041427             0263*   
041427             0264*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041427             0265*   ; inputs: a is scaling mode, 1=on, 0=off
041427             0266*   ; note: default setting on boot is scaling ON
041427             0267*   vdu_set_scaling:
041427 32 39 14 04 0268*   	ld (@arg),a
04142B 21 36 14 04 0269*   	ld hl,@cmd
04142F 01 04 00 00 0270*   	ld bc,@end-@cmd
041433 5B DF       0271*   	rst.lil $18
041435 C9          0272*   	ret
041436 17 00 C0    0273*   @cmd: db 23,0,0xC0
041439 00          0274*   @arg: db 0  ; scaling on/off
04143A             0275*   @end:
04143A             0276*   
04143A             0277*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04143A             0278*   ; inputs: hl=bufferId
04143A             0279*   vdu_buff_select:
04143A 22 4C 14 04 0280*   	ld (@bufferId),hl
04143E 21 49 14 04 0281*   	ld hl,@cmd
041442 01 05 00 00 0282*   	ld bc,@end-@cmd
041446 5B DF       0283*   	rst.lil $18
041448 C9          0284*   	ret
041449 17 1B 20    0285*   @cmd: db 23,27,0x20
04144C 00 00       0286*   @bufferId: dw 0x0000
04144E 00          0287*   @end: db 0x00 ; padding
04144F             0288*   
04144F             0289*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04144F             0290*   ; inputs: a=format; bc=width; de=height
04144F             0291*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04144F             0292*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04144F             0293*   ; 0 	RGBA8888 (4-bytes per pixel)
04144F             0294*   ; 1 	RGBA2222 (1-bytes per pixel)
04144F             0295*   ; 2 	Mono/Mask (1-bit per pixel)
04144F             0296*   ; 3 	Reserved for internal use by VDP (“native” format)
04144F             0297*   vdu_bmp_create:
04144F ED 43 6B 14 0298*       ld (@width),bc
       04          
041454 ED 53 6D 14 0299*       ld (@height),de
       04          
041459 32 6F 14 04 0300*       ld (@fmt),a
04145D 21 68 14 04 0301*   	ld hl,@cmd
041461 01 08 00 00 0302*   	ld bc,@end-@cmd
041465 5B DF       0303*   	rst.lil $18
041467 C9          0304*   	ret
041468 17 1B 21    0305*   @cmd:       db 23,27,0x21
04146B 00 00       0306*   @width:     dw 0x0000
04146D 00 00       0307*   @height:    dw 0x0000
04146F 00          0308*   @fmt:       db 0x00
041470             0309*   @end:
041470             0310*   
041470             0311*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041470             0312*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041470             0313*   vdu_load_img_rgba2_to_8:
041470             0314*   ; backup the target buffer id and image dimensions
041470 E5          0315*       push hl
041471 D5          0316*       push de
041472 C5          0317*       push bc
041473             0318*   ; load the rgba2 image to working buffer 65534
041473 21 FE FF 00 0319*       ld hl,65534 ; temporary working buffer id
041477 CD 4E 15 04 0320*   	call vdu_load_buffer_from_file
04147B             0321*   ; restore the image dimensions and target buffer id
04147B C1          0322*       pop bc
04147C D1          0323*       pop de
04147D E1          0324*       pop hl
04147E             0325*   ; fall through to vdu_rgba2_to_8
04147E             0326*   
04147E             0327*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
04147E             0328*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
04147E             0329*   ; the "expand bitmap" command is:
04147E             0330*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
04147E             0331*   ; and then to reverse the byte order to fix endian-ness:
04147E             0332*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
04147E             0333*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
04147E             0334*   ; VDU 23,27,&20,targetBufferID%;
04147E             0335*   ; VDU 23,27,&21,width%;height%;0
04147E             0336*   ; -------------------------------------------------------------------
04147E             0337*   ; inputs: bc,de image width,height ; hl = targetBufferId
04147E             0338*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
04147E             0339*   vdu_rgba2_to_8:
04147E             0340*   ; load the image dimensions and buffer id parameters
04147E ED 43 DA 14 0341*       ld (@width),bc
       04          
041483 ED 53 DC 14 0342*       ld (@height),de
       04          
041488 22 BF 14 04 0343*       ld (@bufferId0),hl
04148C 22 CC 14 04 0344*       ld (@bufferId2),hl
041490 22 D5 14 04 0345*       ld (@bufferId1),hl
041494             0346*   ; clean up bytes that got stomped on by the ID loads
041494 3E 48       0347*       ld a,0x48
041496 32 C1 14 04 0348*       ld (@bufferId0+2),a
04149A 3E 17       0349*       ld a,23
04149C 32 D7 14 04 0350*       ld (@bufferId1+2),a
0414A0 3E 18       0351*       ld a,24
0414A2 32 CE 14 04 0352*       ld (@bufferId2+2),a
0414A6 AF          0353*       xor a
0414A7 32 DE 14 04 0354*       ld (@height+2),a
0414AB             0355*   ; send the vdu command strings
0414AB 21 B6 14 04 0356*       ld hl,@beg
0414AF 01 29 00 00 0357*       ld bc,@end-@beg
0414B3 5B DF       0358*       rst.lil $18
0414B5 C9          0359*       ret
0414B6             0360*   @beg:
0414B6             0361*   ; Command 14: Consolidate blocks in a buffer
0414B6             0362*   ; VDU 23, 0, &A0, bufferId; 14
0414B6 17 00 A0    0363*       db 23,0,0xA0
0414B9 FE FF       0364*       dw 65534 ; workingBufferId
0414BB 0E          0365*       db 14 ; consolidate blocks
0414BC             0366*   ; the "expand bitmap" command is:
0414BC             0367*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0414BC 17 00 A0    0368*       db 23,0,0xA0
0414BF 00 00       0369*   @bufferId0: dw 0x0000 ; targetBufferId
0414C1 48          0370*       db 0x48 ; given as decimal command 72 in the docs
0414C2 02          0371*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0414C3 FE FF       0372*       dw 65534 ; sourceBufferId
0414C5 00 7F BF FF 0373*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
0414C9             0374*   ; reverse the byte order to fix endian-ness:
0414C9             0375*   ; Command 24: Reverse the order of data of blocks within a buffer
0414C9             0376*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
0414C9             0377*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0414C9 17 00 A0    0378*       db 23,0,0xA0
0414CC 00 00       0379*   @bufferId2:    dw 0x0000 ; targetBufferId
0414CE 18          0380*       db 24 ; reverse byte order
0414CF 04          0381*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
0414D0 04 00       0382*       dw 4 ; size (4 bytes)
0414D2             0383*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0414D2             0384*   ; VDU 23,27,&20,targetBufferID%;
0414D2 17 1B 20    0385*       db 23,27,0x20 ; select bitmap
0414D5 00 00       0386*   @bufferId1: dw 0x0000 ; targetBufferId
0414D7             0387*   ; VDU 23,27,&21,width%;height%;0
0414D7 17 1B 21    0388*       db 23,27,0x21 ; create bitmap from buffer
0414DA 00 00       0389*   @width: dw 0x0000
0414DC 00 00       0390*   @height: dw 0x0000
0414DE 00          0391*       db 0x00 ; rgba8888 format
0414DF             0392*   @end:
0414DF             0393*   
0414DF             0394*   ; scratch variables
0414DF 00 00 00    0395*   bufferId0: dl 0x000000
0414E2 00 00 00    0396*   bufferId1: dl 0x000000
0414E5             0397*   
0414E5             0398*   ; load a vdu buffer from local memory
0414E5             0399*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0414E5             0400*   vdu_load_buffer:
0414E5 ED 43 0E 15 0401*       ld (@length),bc
       04          
0414EA D5          0402*       push de ; save data pointer
0414EB             0403*   ; send the vdu command string
0414EB 7D          0404*       ld a,l
0414EC 32 0B 15 04 0405*       ld (@bufferId),a
0414F0 7C          0406*       ld a,h
0414F1 32 0C 15 04 0407*       ld (@bufferId+1),a
0414F5 21 08 15 04 0408*       ld hl,@cmd
0414F9 01 08 00 00 0409*       ld bc,@end-@cmd
0414FD 5B DF       0410*       rst.lil $18
0414FF             0411*   ; send the buffer data
0414FF E1          0412*       pop hl ; pointer to data
041500 ED 4B 0E 15 0413*       ld bc,(@length)
       04          
041505 5B DF       0414*       rst.lil $18 ; send it
041507 C9          0415*       ret
041508             0416*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041508 17 00 A0    0417*   @cmd:       db 23,0,0xA0
04150B 00 00       0418*   @bufferId:	dw 0x0000
04150D 00          0419*   		    db 0 ; load buffer
04150E 00 00       0420*   @length:	dw 0x0000
041510 00          0421*   @end: db 0 ; padding
041511             0422*   
041511             0423*   ; Command 14: Consolidate blocks in a buffer
041511             0424*   vdu_consolidate_buffer:
041511             0425*   ; set parameters for vdu call
041511 7D          0426*       ld a,l
041512 32 29 15 04 0427*       ld (@bufferId),a
041516 7C          0428*       ld a,h
041517 32 2A 15 04 0429*       ld (@bufferId+1),a
04151B 21 26 15 04 0430*       ld hl,@beg
04151F 01 06 00 00 0431*       ld bc,@end-@beg
041523 5B DF       0432*       rst.lil $18
041525 C9          0433*       ret
041526             0434*   ; VDU 23, 0, &A0, bufferId; 14
041526 17 00 A0    0435*   @beg: db 23,0,0xA0
041529 00 00       0436*   @bufferId: dw 0x0000
04152B 0E          0437*              db 14
04152C             0438*   @end:
04152C             0439*   
04152C             0440*   ; load an image file to a buffer and make it a bitmap
04152C             0441*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
04152C             0442*   vdu_load_img:
04152C             0443*   ; back up image type and dimension parameters
04152C 22 DF 14 04 0444*       ld (bufferId0),hl
041530 F5          0445*       push af
041531 C5          0446*   	push bc
041532 D5          0447*   	push de
041533             0448*   ; load the image
041533 CD 4E 15 04 0449*   	call vdu_load_buffer_from_file
041537             0450*   ; now make it a bitmap
041537 2A DF 14 04 0451*       ld hl,(bufferId0)
04153B CD 11 15 04 0452*       call vdu_consolidate_buffer
04153F 2A DF 14 04 0453*       ld hl,(bufferId0)
041543 CD 3A 14 04 0454*       call vdu_buff_select
041547 D1          0455*   	pop de ; image height
041548 C1          0456*   	pop bc ; image width
041549 F1          0457*   	pop af ; image type
04154A C3 4F 14 04 0458*   	jp vdu_bmp_create ; will return to caller from there
04154E             0459*   
04154E             0460*   ; inputs: hl = bufferId; iy = pointer to filename
04154E             0461*   vdu_load_buffer_from_file:
04154E 22 DF 14 04 0462*       ld (bufferId0),hl
041552             0463*   
041552             0464*   ; clear target buffer
041552 CD FA 16 04 0465*       call vdu_clear_buffer
041556             0466*   
041556             0467*   ; open the file in read mode
041556             0468*   ; Open a file
041556             0469*   ; HLU: Filename
041556             0470*   ;   C: Mode
041556             0471*   ; Returns:
041556             0472*   ;   A: Filehandle, or 0 if couldn't open
041556 FD E5       0473*   	push iy ; pointer to filename
041558 E1          0474*   	pop hl
041559 0E 01       0475*   	ld c,fa_read
04155B             0476*       MOSCALL mos_fopen
04155B 3E 0A       0001*M1 			LD	A, function
04155D 5B CF       0002*M1 			RST.LIL	08h
04155F 32 9A 15 04 0477*       ld (@filehandle),a
041563             0478*   
041563             0479*   @read_file:
041563             0480*   ; Read a block of data from a file
041563             0481*   ;   C: Filehandle
041563             0482*   ; HLU: Pointer to where to write the data to
041563             0483*   ; DEU: Number of bytes to read
041563             0484*   ; Returns:
041563             0485*   ; DEU: Number of bytes read
041563 3A 9A 15 04 0486*       ld a,(@filehandle)
041567 4F          0487*       ld c,a
041568 21 00 E0 B7 0488*       ld hl,filedata
04156C 11 00 20 00 0489*       ld de,8192 ; max we can read into onboard sram at one time
041570             0490*       MOSCALL mos_fread
041570 3E 1A       0001*M1 			LD	A, function
041572 5B CF       0002*M1 			RST.LIL	08h
041574             0491*   
041574             0492*   ; test de for zero bytes read
041574 21 00 00 00 0493*       ld hl,0
041578 AF          0494*       xor a ; clear carry
041579 ED 52       0495*       sbc hl,de
04157B CA 91 15 04 0496*       jp z,@close_file
04157F             0497*   
04157F             0498*   ; load a vdu buffer from local memory
04157F             0499*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
04157F 2A DF 14 04 0500*       ld hl,(bufferId0)
041583 D5          0501*       push de ; chunksize
041584 C1          0502*       pop bc
041585 11 00 E0 B7 0503*       ld de,filedata
041589 CD E5 14 04 0504*       call vdu_load_buffer
04158D             0505*   
04158D             0506*   ; read the next block
04158D C3 63 15 04 0507*       jp @read_file
041591             0508*   
041591             0509*   ; close the file
041591             0510*   @close_file:
041591 3A 9A 15 04 0511*       ld a,(@filehandle)
041595             0512*       MOSCALL mos_fclose
041595 3E 0B       0001*M1 			LD	A, function
041597 5B CF       0002*M1 			RST.LIL	08h
041599 C9          0513*       ret ; vdu_load_buffer_from_file
04159A             0514*   
04159A 00          0515*   @filehandle: db 0 ; file handle
04159B 00 00 00    0516*   @fil: dl 0 ; pointer to FIL struct
04159E             0517*   
04159E 00 00 00    0518*   @chunkpointer: dl 0 ; pointer to current chunk
0415A1             0519*   
0415A1             0520*   ; File information structure (FILINFO)
0415A1             0521*   @filinfo:
0415A1 00 00 00 00 0522*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
0415A5 00 00       0523*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
0415A7 00 00       0524*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
0415A9 00          0525*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
0415AA 00 00 00 00 0526*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
0415B7 00 00 00 00 0527*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0416B7             0041        include "vdu_buffered_api.inc"
0416B7             0001*   ; https://agonconsole8.github.io/agon-docs/vdp/Buffered-Commands-API/
0416B7             0002*   
0416B7             0003*   ; Command 0: Write block to a buffer
0416B7             0004*   ; VDU 23, 0, &A0, bufferId; 0, length; <buffer-data>
0416B7             0005*   ; inputs: hl = bufferId, bc = length of data, de = pointer to data
0416B7             0006*   vdu_write_block_to_buffer:
0416B7             0007*   ; back up input parameters
0416B7 D5          0008*       push de ; pointer to data
0416B8 C5          0009*       push bc ; length of data
0416B9             0010*   ; set up the vdu command string
0416B9 22 D9 16 04 0011*       ld (@bufferId),hl
0416BD ED 43 DC 16 0012*       ld (@length),bc
       04          
0416C2 AF          0013*       xor a ; load buffer
0416C3 32 DB 16 04 0014*       ld (@bufferId+2),a
0416C7 21 D6 16 04 0015*       ld hl,@cmd0
0416CB 01 08 00 00 0016*       ld bc,@end0-@cmd0
0416CF 5B DF       0017*       rst.lil $18
0416D1             0018*   ; send the buffer data
0416D1 C1          0019*       pop bc ; length of data
0416D2 E1          0020*       pop hl ; pointer to data (was de)
0416D3 5B DF       0021*       rst.lil $18 ; send it
0416D5 C9          0022*       ret
0416D6             0023*   ; command string data
0416D6 17 00 A0    0024*   @cmd0:      db 23,0,0xA0
0416D9 00 00       0025*   @bufferId:	dw 0x0000
0416DB 00          0026*               db 0 ; load buffer
0416DC 00 00       0027*   @length:	dw 0x0000
0416DE 00          0028*   @end0:      db 0x00 ; padding
0416DF             0029*   ; end vdu_write_block_to_buffer
0416DF             0030*   
0416DF             0031*   ; Command 1: Call a buffer
0416DF             0032*   ; VDU 23, 0, &A0, bufferId; 1
0416DF             0033*   ; inputs: hl = bufferId
0416DF             0034*   vdu_call_buffer:
0416DF 22 F7 16 04 0035*       ld (@bufferId),hl
0416E3 3E 01       0036*       ld a,1 ; call buffer
0416E5 32 F9 16 04 0037*       ld (@bufferId+2),a
0416E9 21 F4 16 04 0038*       ld hl,@cmd
0416ED 01 06 00 00 0039*       ld bc,@end-@cmd
0416F1 5B DF       0040*       rst.lil $18
0416F3 C9          0041*       ret
0416F4 17 00 A0    0042*   @cmd:     db 23,0,0xA0
0416F7 00 00       0043*   @bufferId: dw 0x0000
0416F9 01          0044*              db 1 ; call buffer
0416FA             0045*   @end:
0416FA             0046*   ; end vdu_call_buffer
0416FA             0047*   
0416FA             0048*   ; Command 2: Clear a buffer
0416FA             0049*   ; VDU 23, 0 &A0, bufferId; 2
0416FA             0050*   ; inputs: hl = bufferId
0416FA             0051*   vdu_clear_buffer:
0416FA 22 12 17 04 0052*       ld (@bufferId),hl
0416FE 3E 02       0053*       ld a,2 ; clear buffer
041700 32 14 17 04 0054*       ld (@bufferId+2),a
041704 21 0F 17 04 0055*       ld hl,@cmd
041708 01 06 00 00 0056*       ld bc,@end-@cmd
04170C 5B DF       0057*       rst.lil $18
04170E C9          0058*       ret
04170F 17 00 A0    0059*   @cmd:     db 23,0,0xA0
041712 00 00       0060*   @bufferId: dw 0x0000
041714 02          0061*              db 2 ; clear buffer
041715             0062*   @end:
041715             0063*   ; end vdu_clear_buffer
041715             0064*   
041715             0065*   ; Clear all buffers
041715             0066*   ; inputs: none
041715             0067*   vdu_clear_all_buffers:
041715             0068*   ; clear all buffers
041715 21 20 17 04 0069*       ld hl,@beg
041719 01 06 00 00 0070*       ld bc,@end-@beg
04171D 5B DF       0071*       rst.lil $18
04171F C9          0072*       ret
041720 17 00 A0    0073*   @beg: db 23,0,$A0
041723 FF FF       0074*         dw -1 ; bufferId -1 (65535) means clear all buffers
041725 02          0075*         db 2  ; command 2: clear a buffer
041726             0076*   @end:
041726             0077*   ; end vdu_clear_all_buffers
041726             0078*   
041726             0079*   ; Command 3: Create a writeable buffer
041726             0080*   ; VDU 23, 0 &A0, bufferId; 3, length;
041726             0081*   ; inputs: hl = bufferId, bc = length
041726             0082*   vdu_create_writeable_buffer:
041726 22 43 17 04 0083*       ld (@bufferId),hl
04172A ED 43 46 17 0084*       ld (@length),bc
       04          
04172F 3E 03       0085*       ld a,3 ; create writeable buffer
041731 32 45 17 04 0086*       ld (@bufferId+2),a
041735 21 40 17 04 0087*       ld hl,@cmd
041739 01 08 00 00 0088*       ld bc,@end-@cmd
04173D 5B DF       0089*       rst.lil $18
04173F C9          0090*       ret
041740 17 00 A0    0091*   @cmd:     db 23,0,0xA0
041743 00 00       0092*   @bufferId: dw 0x0000
041745 03          0093*              db 3 ; create writeable buffer
041746 00 00       0094*   @length: dw 0x0000
041748 00          0095*   @end:     db 0x00 ; padding
041749             0096*   ; end vdu_create_writeable_buffer
041749             0097*   
041749             0098*   ; Command 4: Set output stream to a buffer
041749             0099*   ; VDU 23, 0 &A0, bufferId; 4
041749             0100*   ; inputs: hl = bufferId
041749             0101*   vdu_set_output_stream_buffer:
041749 22 61 17 04 0102*       ld (@bufferId),hl
04174D 3E 04       0103*       ld a,4 ; set output stream to buffer
04174F 32 63 17 04 0104*       ld (@bufferId+2),a
041753 21 5E 17 04 0105*       ld hl,@cmd
041757 01 06 00 00 0106*       ld bc,@end-@cmd
04175B 5B DF       0107*       rst.lil $18
04175D C9          0108*       ret
04175E 17 00 A0    0109*   @cmd:     db 23,0,0xA0
041761 00 00       0110*   @bufferId: dw 0x0000
041763 04          0111*              db 4 ; set output stream to buffer
041764 00          0112*   @end:     db 0x00 ; padding
041765             0113*   ; end vdu_set_output_stream_buffer
041765             0114*   
041765             0115*   ; Command 5: Adjust buffer contents
041765             0116*   ; VDU 23, 0, &A0, bufferId; 5, operation, offset; [count;] <operand>, [arguments]
041765             0117*   vdu_adjust_buffer:
041765 C9          0118*       ret ; TODO: implement
041766             0119*   ; end vdu_adjust_buffer
041766             0120*   
041766             0121*   ; Command 6: Conditionally call a buffer
041766             0122*   ; VDU 23, 0, &A0, bufferId; 6, operation, checkBufferId; checkOffset; [arguments]
041766             0123*   vdu_call_buffer_conditional:
041766 C9          0124*       ret ; TODO: implement
041767             0125*   ; end vdu_call_buffer_conditional
041767             0126*   
041767             0127*   ; Command 7: Jump to a buffer
041767             0128*   ; VDU 23, 0, &A0, bufferId; 7
041767             0129*   ; inputs: hl = bufferId
041767             0130*   vdu_jump_to_buffer:
041767 22 7F 17 04 0131*       ld (@bufferId),hl
04176B 3E 07       0132*       ld a,7 ; jump to buffer
04176D 32 81 17 04 0133*       ld (@bufferId+2),a
041771 21 7C 17 04 0134*       ld hl,@cmd
041775 01 06 00 00 0135*       ld bc,@end-@cmd
041779 5B DF       0136*       rst.lil $18
04177B C9          0137*       ret
04177C 17 00 A0    0138*   @cmd:     db 23,0,0xA0
04177F 00 00       0139*   @bufferId: dw 0x0000
041781 07          0140*              db 7 ; jump to buffer
041782 00          0141*   @end:     db 0x00 ; padding
041783             0142*   ; end vdu_jump_to_buffer
041783             0143*   
041783             0144*   ; Command 8: Conditional Jump to a buffer
041783             0145*   ; VDU 23, 0, &A0, bufferId; 8, operation, checkBufferId; checkOffset; [arguments]
041783             0146*   vdu_jump_to_buffer_conditional:
041783 C9          0147*       ret ; TODO: implement
041784             0148*   ; end vdu_jump_to_buffer_conditional
041784             0149*   
041784             0150*   ; Command 9: Jump to an offset in a buffer
041784             0151*   ; VDU 23, 0, &A0, bufferId; 9, offset; offsetHighByte, [blockNumber;]
041784             0152*   vdu_jump_to_buffer_offset:
041784 C9          0153*       ret ; TODO: implement
041785             0154*   ; end vdu_jump_to_buffer_offset
041785             0155*   
041785             0156*   ; Command 10: Conditional jump to an offset in a buffer
041785             0157*   ; VDU 23, 0, &A0, bufferId; 10, offset; offsetHighByte, [blockNumber;] [arguments]
041785             0158*   vdu_jump_to_buffer_offset_conditional:
041785 C9          0159*       ret ; TODO: implement
041786             0160*   ; end vdu_jump_to_buffer_offset_conditional
041786             0161*   
041786             0162*   ; Command 11: Call buffer with an offset
041786             0163*   ; VDU 23, 0, &A0, bufferId; 11, offset; offsetHighByte, [blockNumber;]
041786             0164*   vdu_call_buffer_offset:
041786 C9          0165*       ret ; TODO: implement
041787             0166*   ; end vdu_call_buffer_offset
041787             0167*   
041787             0042        include "vdu_fonts.inc"
041787             0001*   ; select font
041787             0002*   ; inputs: hl = bufferId, a = font flags
041787             0003*   ; Flags:
041787             0004*   ; Bit	Description
041787             0005*   ; 0	Adjust cursor position to ensure text baseline is aligned
041787             0006*   ;   0: Do not adjust cursor position (best for changing font on a new line)
041787             0007*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
041787             0008*   ; 1-7	Reserved for future use
041787             0009*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041787             0010*   vdu_font_select:
041787 22 9E 17 04 0011*       ld (@bufferId),hl
04178B 32 A0 17 04 0012*       ld (@flags),a
04178F 21 9A 17 04 0013*       ld hl,@cmd
041793 01 07 00 00 0014*       ld bc,@end-@cmd
041797 5B DF       0015*       rst.lil $18
041799 C9          0016*       ret
04179A 17 00 95 00 0017*   @cmd: db 23, 0, 0x95, 0
04179E 00 00       0018*   @bufferId: dw 0x0000
0417A0 00          0019*   @flags: db 0x00
0417A1             0020*   @end:
0417A1             0021*   
0417A1             0022*   ; create font from buffer
0417A1             0023*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
0417A1             0024*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
0417A1             0025*   vdu_font_create:
0417A1 22 C6 17 04 0026*       ld (@bufferId),hl
0417A5 ED 53 C8 17 0027*       ld (@width),de ; also loads height
       04          
0417AA 32 CB 17 04 0028*       ld (@flags),a
0417AE 7A          0029*       ld a,d ; height
0417AF 32 CA 17 04 0030*       ld (@ascent),a ; ascent = height
0417B3             0031*   ; consolidate buffer
0417B3 CD 11 15 04 0032*       call vdu_consolidate_buffer
0417B7             0033*   ; create font
0417B7 21 C2 17 04 0034*       ld hl,@cmd
0417BB 01 0A 00 00 0035*       ld bc,@end-@cmd
0417BF 5B DF       0036*       rst.lil $18
0417C1 C9          0037*       ret
0417C2 17 00 95 01 0038*   @cmd: db 23, 0, 0x95, 1
0417C6 00 00       0039*   @bufferId: dw 0x0000
0417C8 00          0040*   @width: db 0x00
0417C9 00          0041*   @height: db 0x00
0417CA 00          0042*   @ascent: db 0x00
0417CB 00          0043*   @flags: db 0x00
0417CC             0044*   @end:
0417CC             0045*   
0417CC             0046*   ; set or adjust font property
0417CC             0047*   ; inputs: hl = bufferId, a = field, de = value
0417CC             0048*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
0417CC             0049*   vdu_font_property:
0417CC 22 E8 17 04 0050*       ld (@bufferId),hl
0417D0 32 EA 17 04 0051*       ld (@field),a
0417D4 ED 53 EB 17 0052*       ld (@value),de
       04          
0417D9 21 E4 17 04 0053*       ld hl,@cmd
0417DD 01 09 00 00 0054*       ld bc,@end-@cmd
0417E1 5B DF       0055*       rst.lil $18
0417E3 C9          0056*       ret
0417E4 17 00 95 02 0057*   @cmd: db 23, 0, 0x95, 2
0417E8 00 00       0058*   @bufferId: dw 0x0000
0417EA 00          0059*   @field: db 0x00
0417EB 00 00       0060*   @value: dw 0x0000
0417ED 00          0061*   @end: db 0x00 ; padding
0417EE             0062*   
0417EE             0063*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
0417EE             0064*   
0417EE             0065*   ; Clear/Delete font
0417EE             0066*   ; inputs: hl = bufferId
0417EE             0067*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
0417EE             0068*   vdu_font_clear:
0417EE 22 01 18 04 0069*       ld (@bufferId),hl
0417F2 21 FD 17 04 0070*       ld hl,@cmd
0417F6 01 06 00 00 0071*       ld bc,@end-@cmd
0417FA 5B DF       0072*       rst.lil $18
0417FC C9          0073*       ret
0417FD 17 00 95 04 0074*   @cmd: db 23, 0, 0x95, 4
041801 00 00       0075*   @bufferId: dw 0x0000
041803 00          0076*   @end: db 0x00 ; padding
041804             0077*   
041804             0078*   ; Copy system font to buffer
041804             0079*   ; inputs: hl = bufferId
041804             0080*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041804             0081*   vdu_font_copy_system:
041804 22 17 18 04 0082*       ld (@bufferId),hl
041808 21 13 18 04 0083*       ld hl,@cmd
04180C 01 06 00 00 0084*       ld bc,@end-@cmd
041810 5B DF       0085*       rst.lil $18
041812 C9          0086*       ret
041813 17 00 95 05 0087*   @cmd: db 23, 0, 0x95, 5
041817 00 00       0088*   @bufferId: dw 0x0000
041819 00          0089*   @end: db 0x00 ; padding
04181A             0043        include "vdu_plot.inc"
04181A             0001*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04181A             0002*   ; PLOT code 	(Decimal) 	Effect
04181A             0003*   ; &00-&07 	0-7 	Solid line, includes both ends
04181A             0004*   plot_sl_both: equ 0x00
04181A             0005*   
04181A             0006*   ; &08-&0F 	8-15 	Solid line, final point omitted
04181A             0007*   plot_sl_first: equ 0x08
04181A             0008*   
04181A             0009*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
04181A             0010*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
04181A             0011*   
04181A             0012*   ; &20-&27 	32-39 	Solid line, first point omitted
04181A             0013*   plot_sl_last: equ 0x20
04181A             0014*   
04181A             0015*   ; &28-&2F 	40-47 	Solid line, both points omitted
04181A             0016*   plot_sl_none: equ 0x28
04181A             0017*   
04181A             0018*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
04181A             0019*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
04181A             0020*   
04181A             0021*   ; &40-&47 	64-71 	Point plot
04181A             0022*   plot_pt: equ 0x40
04181A             0023*   
04181A             0024*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
04181A             0025*   plot_lf_lr_non_bg: equ 0x48
04181A             0026*   
04181A             0027*   ; &50-&57 	80-87 	Triangle fill
04181A             0028*   plot_tf: equ 0x50
04181A             0029*   
04181A             0030*   ; &58-&5F 	88-95 	Line fill right to background §§
04181A             0031*   plot_lf_r_bg: equ 0x58
04181A             0032*   
04181A             0033*   ; &60-&67 	96-103 	Rectangle fill
04181A             0034*   plot_rf: equ 0x60
04181A             0035*   
04181A             0036*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
04181A             0037*   plot_lf_lr_fg: equ 0x60
04181A             0038*   
04181A             0039*   ; &70-&77 	112-119 	Parallelogram fill
04181A             0040*   plot_pf: equ 0x70
04181A             0041*   
04181A             0042*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
04181A             0043*   plot_lf_r_non_fg: equ 0x78
04181A             0044*   
04181A             0045*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
04181A             0046*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
04181A             0047*   
04181A             0048*   ; &90-&97 	144-151 	Circle outline
04181A             0049*   plot_co: equ 0x90
04181A             0050*   
04181A             0051*   ; &98-&9F 	152-159 	Circle fill
04181A             0052*   plot_cf: equ 0x98
04181A             0053*   
04181A             0054*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
04181A             0055*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
04181A             0056*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
04181A             0057*   
04181A             0058*   ; &B8-&BF 	184-191 	Rectangle copy/move
04181A             0059*   plot_rcm: equ 0xB8
04181A             0060*   
04181A             0061*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
04181A             0062*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
04181A             0063*   ; &D0-&D7 	208-215 	Not defined
04181A             0064*   ; &D8-&DF 	216-223 	Not defined
04181A             0065*   ; &E0-&E7 	224-231 	Not defined
04181A             0066*   
04181A             0067*   ; &E8-&EF 	232-239 	Bitmap plot §
04181A             0068*   plot_bmp: equ 0xE8
04181A             0069*   
04181A             0070*   ; &F0-&F7 	240-247 	Not defined
04181A             0071*   ; &F8-&FF 	248-255 	Not defined
04181A             0072*   
04181A             0073*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
04181A             0074*   ; Agon Console8 VDP 2.2.0
04181A             0075*   
04181A             0076*   ; Within each group of eight plot codes, the effects are as follows:
04181A             0077*   ; Plot code 	Effect
04181A             0078*   ; 0 	Move relative
04181A             0079*   mv_rel: equ 0
04181A             0080*   
04181A             0081*   ; 1 	Plot relative in current foreground colour
04181A             0082*   dr_rel_fg: equ 1
04181A             0083*   
04181A             0084*   ; 2 	Not supported (Plot relative in logical inverse colour)
04181A             0085*   ; 3 	Plot relative in current background colour
04181A             0086*   dr_rel_bg: equ 3
04181A             0087*   
04181A             0088*   ; 4 	Move absolute
04181A             0089*   mv_abs: equ 4
04181A             0090*   
04181A             0091*   ; 5 	Plot absolute in current foreground colour
04181A             0092*   dr_abs_fg: equ 5
04181A             0093*   
04181A             0094*   ; 6 	Not supported (Plot absolute in logical inverse colour)
04181A             0095*   ; 7 	Plot absolute in current background colour
04181A             0096*   dr_abs_bg: equ 7
04181A             0097*   
04181A             0098*   ; Codes 0-3 use the position data provided as part of the command
04181A             0099*   ; as a relative position, adding the position given to the current
04181A             0100*   ; graphical cursor position. Codes 4-7 use the position data provided
04181A             0101*   ; as part of the command as an absolute position, setting the current
04181A             0102*   ; graphical cursor position to the position given.
04181A             0103*   
04181A             0104*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
04181A             0105*   ; current pixel colour. These operations cannot currently be supported
04181A             0106*   ; by the graphics system the Agon VDP uses, so these codes are not
04181A             0107*   ; supported. Support for these codes may be added in a future version
04181A             0108*   ; of the VDP firmware.
04181A             0109*   
04181A             0110*   ; 16 colour palette constants
04181A             0111*   c_black: equ 0
04181A             0112*   c_red_dk: equ 1
04181A             0113*   c_green_dk: equ 2
04181A             0114*   c_yellow_dk: equ 3
04181A             0115*   c_blue_dk: equ 4
04181A             0116*   c_magenta_dk: equ 5
04181A             0117*   c_cyan_dk: equ 6
04181A             0118*   c_grey: equ 7
04181A             0119*   c_grey_dk: equ 8
04181A             0120*   c_red: equ 9
04181A             0121*   c_green: equ 10
04181A             0122*   c_yellow: equ 11
04181A             0123*   c_blue: equ 12
04181A             0124*   c_magenta: equ 13
04181A             0125*   c_cyan: equ 14
04181A             0126*   c_white: equ 15
04181A             0127*   
04181A             0128*   ; VDU 25, mode, x; y;: PLOT command
04181A             0129*   ; inputs: a=mode, bc=x0, de=y0
04181A             0130*   vdu_plot:
04181A 32 34 18 04 0131*       ld (@mode),a
04181E ED 43 35 18 0132*       ld (@x0),bc
       04          
041823 ED 53 37 18 0133*       ld (@y0),de
       04          
041828 21 33 18 04 0134*   	ld hl,@cmd
04182C 01 06 00 00 0135*   	ld bc,@end-@cmd
041830 5B DF       0136*   	rst.lil $18
041832 C9          0137*   	ret
041833 19          0138*   @cmd:   db 25
041834 00          0139*   @mode:  db 0
041835 00 00       0140*   @x0: 	dw 0
041837 00 00       0141*   @y0: 	dw 0
041839 00          0142*   @end:   db 0 ; extra byte to soak up deu
04183A             0143*   
04183A             0144*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04183A             0145*   ; &E8-&EF 	232-239 	Bitmap plot §
04183A             0146*   ; VDU 25, mode, x; y;: PLOT command
04183A             0147*   ; inputs: bc=x0, de=y0
04183A             0148*   ; prerequisites: vdu_buff_select
04183A             0149*   vdu_plot_bmp:
04183A ED 43 51 18 0150*       ld (@x0),bc
       04          
04183F ED 53 53 18 0151*       ld (@y0),de
       04          
041844 21 4F 18 04 0152*   	ld hl,@cmd
041848 01 06 00 00 0153*   	ld bc,@end-@cmd
04184C 5B DF       0154*   	rst.lil $18
04184E C9          0155*   	ret
04184F 19          0156*   @cmd:   db 25
041850 ED          0157*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041851 00 00       0158*   @x0: 	dw 0x0000
041853 00 00       0159*   @y0: 	dw 0x0000
041855 00          0160*   @end:   db 0x00 ; padding
041856             0161*   
041856             0162*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041856             0163*   ; &E8-&EF 	232-239 	Bitmap plot §
041856             0164*   ; VDU 25, mode, x; y;: PLOT command
041856             0165*   ; inputs: bc=x0, de=y0
041856             0166*   ; USING 16.8 FIXED POINT COORDINATES
041856             0167*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041856             0168*   ;   the fractional portiion of the inputs are truncated
041856             0169*   ;   leaving only the 16-bit integer portion
041856             0170*   ; prerequisites: vdu_buff_select
041856             0171*   vdu_plot_bmp168:
041856             0172*   ; populate in the reverse of normal to keep the
041856             0173*   ; inputs from stomping on each other
041856 ED 53 74 18 0174*       ld (@y0-1),de
       04          
04185B ED 43 72 18 0175*       ld (@x0-1),bc
       04          
041860 3E ED       0176*       ld a,plot_bmp+dr_abs_fg ; 0xED
041862 32 72 18 04 0177*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
041866 21 71 18 04 0178*   	ld hl,@cmd
04186A 01 06 00 00 0179*   	ld bc,@end-@cmd
04186E 5B DF       0180*   	rst.lil $18
041870 C9          0181*   	ret
041871 19          0182*   @cmd:   db 25
041872 ED          0183*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041873 00 00       0184*   @x0: 	dw 0x0000
041875 00 00       0185*   @y0: 	dw 0x0000
041877             0186*   @end:  ; no padding required b/c we shifted de right
041877             0187*   
041877             0188*   ; draw a filled rectangle
041877             0189*   vdu_plot_rf:
041877 ED 43 9E 18 0190*       ld (@x0),bc
       04          
04187C ED 53 A0 18 0191*       ld (@y0),de
       04          
041881 DD 22 A4 18 0192*       ld (@x1),ix
       04          
041886 FD 22 A6 18 0193*       ld (@y1),iy
       04          
04188B 3E 19       0194*       ld a,25 ; we have to reload the 2nd plot command
04188D 32 A2 18 04 0195*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041891 21 9C 18 04 0196*   	ld hl,@cmd0
041895 01 0C 00 00 0197*   	ld bc,@end-@cmd0
041899 5B DF       0198*   	rst.lil $18
04189B C9          0199*       ret
04189C 19          0200*   @cmd0:  db 25 ; plot
04189D 04          0201*   @arg0:  db plot_sl_both+mv_abs
04189E 00 00       0202*   @x0:    dw 0x0000
0418A0 00 00       0203*   @y0:    dw 0x0000
0418A2 19          0204*   @cmd1:  db 25 ; plot
0418A3 65          0205*   @arg1:  db plot_rf+dr_abs_fg
0418A4 00 00       0206*   @x1:    dw 0x0000
0418A6 00 00       0207*   @y1:    dw 0x0000
0418A8 00          0208*   @end:   db 0x00 ; padding
0418A9             0209*   
0418A9             0210*   ; draw a filled circle
0418A9             0211*   vdu_plot_cf:
0418A9 ED 43 D0 18 0212*       ld (@x0),bc
       04          
0418AE ED 53 D2 18 0213*       ld (@y0),de
       04          
0418B3 DD 22 D6 18 0214*       ld (@x1),ix
       04          
0418B8 FD 22 D8 18 0215*       ld (@y1),iy
       04          
0418BD 3E 19       0216*       ld a,25 ; we have to reload the 2nd plot command
0418BF 32 D4 18 04 0217*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0418C3 21 CE 18 04 0218*   	ld hl,@cmd0
0418C7 01 0C 00 00 0219*   	ld bc,@end-@cmd0
0418CB 5B DF       0220*   	rst.lil $18
0418CD C9          0221*       ret
0418CE 19          0222*   @cmd0:  db 25 ; plot
0418CF 04          0223*   @arg0:  db plot_sl_both+mv_abs
0418D0 00 00       0224*   @x0:    dw 0x0000
0418D2 00 00       0225*   @y0:    dw 0x0000
0418D4 19          0226*   @cmd1:  db 25 ; plot
0418D5 9D          0227*   @arg1:  db plot_cf+dr_abs_fg
0418D6 00 00       0228*   @x1:    dw 0x0000
0418D8 00 00       0229*   @y1:    dw 0x0000
0418DA 00          0230*   @end:   db 0x00 ; padding
0418DB             0044        include "vdu_sprites.inc"
0418DB             0001*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
0418DB             0002*   ; the VDP can support up to 256 sprites. They must be defined
0418DB             0003*   ; contiguously, and so the first sprite is sprite 0.
0418DB             0004*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
0418DB             0005*   ; Once a selection of sprites have been defined, you can activate
0418DB             0006*   ; them using the VDU 23, 27, 7, n command, where n is the number
0418DB             0007*   ; of sprites to activate. This will activate the first n sprites,
0418DB             0008*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
0418DB             0009*   
0418DB             0010*   ; A single sprite can have multiple "frames", referring to
0418DB             0011*   ; different bitmaps.
0418DB             0012*   ; (These bitmaps do not need to be the same size.)
0418DB             0013*   ; This allows a sprite to include an animation sequence,
0418DB             0014*   ; which can be stepped through one frame at a time, or picked
0418DB             0015*   ; in any order.
0418DB             0016*   
0418DB             0017*   ; Any format of bitmap can be used as a sprite frame. It should
0418DB             0018*   ; be noted however that "native" format bitmaps are not
0418DB             0019*   ; recommended for use as sprite frames, as they cannot get
0418DB             0020*   ; erased from the screen. (As noted above, the "native" bitmap
0418DB             0021*   ; format is not really intended for general use.) This is part
0418DB             0022*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
0418DB             0023*   ; screen are now stored in RGBA2222 format.
0418DB             0024*   
0418DB             0025*   ; An "active" sprite can be hidden, so it will stop being drawn,
0418DB             0026*   ; and then later shown again.
0418DB             0027*   
0418DB             0028*   ; Moving sprites around the screen is done by changing the
0418DB             0029*   ; position of the sprite. This can be done either by setting
0418DB             0030*   ; the absolute position of the sprite, or by moving the sprite
0418DB             0031*   ; by a given number of pixels. (Sprites are positioned using
0418DB             0032*   ; pixel coordinates, and not by the logical OS coordinate system.)
0418DB             0033*   ; In the current sprite system, sprites will not update their
0418DB             0034*   ; position on-screen until either another drawing operation is
0418DB             0035*   ; performed or an explicit VDU 23, 27, 15 command is performed.
0418DB             0036*   
0418DB             0037*   ; VDU 23, 27, 4, n: Select sprite n
0418DB             0038*   ; inputs: a is the 8-bit sprite id
0418DB             0039*   vdu_sprite_select:
0418DB 32 ED 18 04 0040*       ld (@sprite),a
0418DF 21 EA 18 04 0041*       ld hl,@cmd
0418E3 01 04 00 00 0042*       ld bc,@end-@cmd
0418E7 5B DF       0043*       rst.lil $18
0418E9 C9          0044*       ret
0418EA 17 1B 04    0045*   @cmd:    db 23,27,4
0418ED 00          0046*   @sprite: db 0x00
0418EE             0047*   @end:
0418EE             0048*   
0418EE             0049*   ; VDU 23, 27, 5: Clear frames in current sprite
0418EE             0050*   ; inputs: none
0418EE             0051*   ; prerequisites: vdu_sprite_select
0418EE             0052*   vdu_sprite_clear_frames:
0418EE 21 F9 18 04 0053*       ld hl,@cmd
0418F2 01 03 00 00 0054*       ld bc,@end-@cmd
0418F6 5B DF       0055*       rst.lil $18
0418F8 C9          0056*       ret
0418F9 17 1B 05    0057*   @cmd: db 23,27,5
0418FC             0058*   @end:
0418FC             0059*   
0418FC             0060*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
0418FC             0061*   ; inputs: a is the 8-bit bitmap number
0418FC             0062*   ; prerequisites: vdu_sprite_select
0418FC             0063*   vdu_sprite_add_bmp:
0418FC 32 0E 19 04 0064*       ld (@bmp),a
041900 21 0B 19 04 0065*       ld hl,@cmd
041904 01 04 00 00 0066*       ld bc,@end-@cmd
041908 5B DF       0067*       rst.lil $18
04190A C9          0068*       ret
04190B 17 1B 06    0069*   @cmd: db 23,27,6
04190E 00          0070*   @bmp: db 0x00
04190F             0071*   @end:
04190F             0072*   
04190F             0073*   ; VDU 23, 27, 7, n: Activate n sprites
04190F             0074*   ; inputs: a is the number of sprites to activate
04190F             0075*   ; prerequisites: each sprite activated must have at least one frame attached to it
04190F             0076*   vdu_sprite_activate:
04190F 32 21 19 04 0077*       ld (@num),a
041913 21 1E 19 04 0078*       ld hl,@cmd
041917 01 04 00 00 0079*       ld bc,@end-@cmd
04191B 5B DF       0080*       rst.lil $18
04191D C9          0081*       ret
04191E 17 1B 07    0082*   @cmd: db 23,27,7
041921 00          0083*   @num: db 0x00
041922             0084*   @end:
041922             0085*   
041922             0086*   ; VDU 23, 27, 8: Select next frame of current sprite
041922             0087*   ; inputs: none
041922             0088*   ; prerequisites: vdu_sprite_select
041922             0089*   vdu_sprite_next_frame:
041922 21 2D 19 04 0090*       ld hl,@cmd
041926 01 03 00 00 0091*       ld bc,@end-@cmd
04192A 5B DF       0092*       rst.lil $18
04192C C9          0093*       ret
04192D 17 1B 08    0094*   @cmd: db 23,27,8
041930             0095*   @end:
041930             0096*   
041930             0097*   ; VDU 23, 27, 9: Select previous frame of current sprite
041930             0098*   ; inputs: none
041930             0099*   ; prerequisites: vdu_sprite_select
041930             0100*   vdu_sprite_prev_frame:
041930 21 3B 19 04 0101*       ld hl,@cmd
041934 01 03 00 00 0102*       ld bc,@end-@cmd
041938 5B DF       0103*       rst.lil $18
04193A C9          0104*       ret
04193B 17 1B 09    0105*   @cmd: db 23,27,9
04193E             0106*   @end:
04193E             0107*   
04193E             0108*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04193E             0109*   ; inputs: a is frame number to select
04193E             0110*   ; prerequisites: vdu_sprite_select
04193E             0111*   vdu_sprite_select_frame:
04193E 32 50 19 04 0112*       ld (@frame),a
041942 21 4D 19 04 0113*       ld hl,@cmd
041946 01 04 00 00 0114*       ld bc,@end-@cmd
04194A 5B DF       0115*       rst.lil $18
04194C C9          0116*       ret
04194D 17 1B 0A    0117*   @cmd:    db 23,27,10
041950 00          0118*   @frame:  db 0x00
041951             0119*   @end:
041951             0120*   
041951             0121*   ; VDU 23, 27, 11: Show current sprite
041951             0122*   ; inputs: none
041951             0123*   ; prerequisites: vdu_sprite_select
041951             0124*   vdu_sprite_show:
041951 21 5C 19 04 0125*       ld hl,@cmd
041955 01 03 00 00 0126*       ld bc,@end-@cmd
041959 5B DF       0127*       rst.lil $18
04195B C9          0128*       ret
04195C 17 1B 0B    0129*   @cmd: db 23,27,11
04195F             0130*   @end:
04195F             0131*   
04195F             0132*   ; VDU 23, 27, 12: Hide current sprite
04195F             0133*   ; inputs: none
04195F             0134*   ; prerequisites: vdu_sprite_select
04195F             0135*   vdu_sprite_hide:
04195F 21 6A 19 04 0136*       ld hl,@cmd
041963 01 03 00 00 0137*       ld bc,@end-@cmd
041967 5B DF       0138*       rst.lil $18
041969 C9          0139*       ret
04196A 17 1B 0C    0140*   @cmd: db 23,27,12
04196D             0141*   @end:
04196D             0142*   
04196D             0143*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04196D             0144*   ; inputs: bc is x coordinate, de is y coordinate
04196D             0145*   ; prerequisites: vdu_sprite_select
04196D             0146*   vdu_sprite_move_abs:
04196D ED 43 85 19 0147*       ld (@xpos),bc
       04          
041972 ED 53 87 19 0148*       ld (@ypos),de
       04          
041977 21 82 19 04 0149*       ld hl,@cmd
04197B 01 07 00 00 0150*       ld bc,@end-@cmd
04197F 5B DF       0151*       rst.lil $18
041981 C9          0152*       ret
041982 17 1B 0D    0153*   @cmd:  db 23,27,13
041985 00 00       0154*   @xpos: dw 0x0000
041987 00 00       0155*   @ypos: dw 0x0000
041989 00          0156*   @end:  db 0x00 ; padding
04198A             0157*   
04198A             0158*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04198A             0159*   ; inputs: bc is x coordinate, de is y coordinate
04198A             0160*   ; prerequisites: vdu_sprite_select
04198A             0161*   vdu_sprite_move_rel:
04198A ED 43 A2 19 0162*       ld (@dx),bc
       04          
04198F ED 53 A4 19 0163*       ld (@dy),de
       04          
041994 21 9F 19 04 0164*       ld hl,@cmd
041998 01 07 00 00 0165*       ld bc,@end-@cmd
04199C 5B DF       0166*       rst.lil $18
04199E C9          0167*       ret
04199F 17 1B 0E    0168*   @cmd: db 23,27,14
0419A2 00 00       0169*   @dx:  dw 0x0000
0419A4 00 00       0170*   @dy:  dw 0x0000
0419A6 00          0171*   @end: db 0x00 ; padding
0419A7             0172*   
0419A7             0173*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
0419A7             0174*   ; USING 16.8 FIXED POINT COORDINATES
0419A7             0175*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
0419A7             0176*   ;   the fractional portiion of the inputs are truncated
0419A7             0177*   ;   leaving only the 16-bit integer portion
0419A7             0178*   ; prerequisites: vdu_sprite_select
0419A7             0179*   vdu_sprite_move_abs168:
0419A7             0180*   ; offset inputs by the gfx origin
0419A7             0181*   ; y coordinate
0419A7 21 00 30 00 0182*       ld hl,origin_top*256
0419AB 19          0183*       add hl,de
0419AC 22 CE 19 04 0184*       ld (@ypos-1),hl
0419B0             0185*   ; x coordinate
0419B0 21 00 80 00 0186*       ld hl,origin_left*256
0419B4 09          0187*       add hl,bc
0419B5 22 CC 19 04 0188*       ld (@xpos-1),hl
0419B9             0189*   ; prepare vdu command
0419B9 3E 0D       0190*       ld a,13       ; restore the final byte of the command
0419BB 32 CC 19 04 0191*       ld (@cmd+2),a ; string that got stomped on by bcu
0419BF 21 CA 19 04 0192*       ld hl,@cmd
0419C3 01 07 00 00 0193*       ld bc,@end-@cmd
0419C7 5B DF       0194*       rst.lil $18
0419C9 C9          0195*       ret
0419CA 17 1B 0D    0196*   @cmd:  db 23,27,13
0419CD 00 00       0197*   @xpos: dw 0x0000
0419CF 00 00       0198*   @ypos: dw 0x0000
0419D1             0199*   @end:  ; no padding required b/c we shifted de right
0419D1             0200*   
0419D1             0201*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0419D1             0202*   ; USING 16.8 FIXED POINT COORDINATES
0419D1             0203*   ; inputs: ub.c is dx, ud.e is dy
0419D1             0204*   ;   the fractional portiion of the inputs are truncated
0419D1             0205*   ;   leaving only the 16-bit integer portion
0419D1             0206*   ; prerequisites: vdu_sprite_select
0419D1             0207*   vdu_sprite_move_rel168:
0419D1             0208*   ; populate in the reverse of normal to keep the
0419D1             0209*   ; inputs from stomping on each other
0419D1 ED 53 F0 19 0210*       ld (@dy-1),de
       04          
0419D6 ED 43 EE 19 0211*       ld (@dx-1),bc
       04          
0419DB 3E 0E       0212*       ld a,14       ; restore the final byte of the command
0419DD 32 EE 19 04 0213*       ld (@cmd+2),a ; string that got stomped on by bcu
0419E1 21 EC 19 04 0214*       ld hl,@cmd
0419E5 01 07 00 00 0215*       ld bc,@end-@cmd
0419E9 5B DF       0216*       rst.lil $18
0419EB C9          0217*       ret
0419EC 17 1B 0E    0218*   @cmd:  db 23,27,14
0419EF 00 00       0219*   @dx: dw 0x0000
0419F1 00 00       0220*   @dy: dw 0x0000
0419F3             0221*   @end:  ; no padding required b/c we shifted de right
0419F3             0222*   
0419F3             0223*   ; VDU 23, 27, 15: Update the sprites in the GPU
0419F3             0224*   ; inputs: none
0419F3             0225*   vdu_sprite_update:
0419F3 21 FE 19 04 0226*       ld hl,@cmd
0419F7 01 03 00 00 0227*       ld bc,@end-@cmd
0419FB 5B DF       0228*       rst.lil $18
0419FD C9          0229*       ret
0419FE 17 1B 0F    0230*   @cmd: db 23,27,15
041A01             0231*   @end:
041A01             0232*   
041A01             0233*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
041A01             0234*   ; inputs: none
041A01             0235*   vdu_sprite_bmp_reset:
041A01 21 0C 1A 04 0236*       ld hl,@cmd
041A05 01 03 00 00 0237*       ld bc,@end-@cmd
041A09 5B DF       0238*       rst.lil $18
041A0B C9          0239*       ret
041A0C 17 1B 10    0240*   @cmd: db 23,27,16
041A0F             0241*   @end:
041A0F             0242*   
041A0F             0243*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
041A0F             0244*   ; inputs: none
041A0F             0245*   vdu_sprite_reset:
041A0F 21 1A 1A 04 0246*       ld hl,@cmd
041A13 01 03 00 00 0247*       ld bc,@end-@cmd
041A17 5B DF       0248*       rst.lil $18
041A19 C9          0249*       ret
041A1A 17 1B 11    0250*   @cmd: db 23,27,17
041A1D             0251*   @end:
041A1D             0252*   
041A1D             0253*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
041A1D             0254*   ; inputs: a is the GCOL paint mode
041A1D             0255*   ; prerequisites: vdu_sprite_select
041A1D             0256*   vdu_sprite_set_gcol:
041A1D 32 2F 1A 04 0257*       ld (@mode),a
041A21 21 2C 1A 04 0258*       ld hl,@cmd
041A25 01 04 00 00 0259*       ld bc,@end-@cmd
041A29 5B DF       0260*       rst.lil $18
041A2B C9          0261*       ret
041A2C 17 1B 12    0262*   @cmd:  db 23,27,18
041A2F 00          0263*   @mode: db 0x00
041A30             0264*   @end:
041A30             0265*   
041A30             0266*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
041A30             0267*   ; inputs: hl=bufferId
041A30             0268*   ; prerequisites: vdu_sprite_select
041A30             0269*   vdu_sprite_add_buff:
041A30 22 42 1A 04 0270*       ld (@bufferId),hl
041A34 21 3F 1A 04 0271*       ld hl,@cmd
041A38 01 05 00 00 0272*       ld bc,@end-@cmd
041A3C 5B DF       0273*       rst.lil $18
041A3E C9          0274*       ret
041A3F 17 1B 26    0275*   @cmd:      db 23,27,0x26
041A42 00 00       0276*   @bufferId: dw 0x0000
041A44 00          0277*   @end:      db 0x00 ; padding
041A45             0045    
041A45             0046    ; APPLICATION INCLUDES
041A45             0047        include "ascii.inc"
041A45             0001*   purple_nurples_ascii:
041A45 20 20 20 20 0002*       db 32,32,32,32,32,32,32,32,95,95,32,32,32,32,95,95,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,95,13,10
       20 20 20 20 
       5F 5F 20 20 
       20 20 5F 5F 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 5F 5F 0D 
       0A          
041A6A 5F 5F 5F 5F 0003*       db 95,95,95,95,95,32,95,47,32,32,124,95,95,47,32,32,124,95,95,95,95,95,95,32,32,32,32,95,95,95,95,32,124,32,32,124,32,95,95,13,10
       5F 20 5F 2F 
       20 20 7C 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 20 5F 
       5F 5F 5F 20 
       7C 20 20 7C 
       20 5F 5F 0D 
       0A          
041A93 5C 5F 5F 20 0004*       db 92,95,95,32,32,92,32,32,32,95,95,92,32,32,32,95,95,92,95,95,32,32,92,32,95,47,32,95,95,95,92,124,32,32,124,47,32,47,13,10
       20 5C 20 20 
       20 5F 5F 5C 
       20 20 20 5F 
       5F 5C 5F 5F 
       20 20 5C 20 
       5F 2F 20 5F 
       5F 5F 5C 7C 
       20 20 7C 2F 
       20 2F 0D 0A 
041ABB 20 2F 20 5F 0005*       db 32,47,32,95,95,32,92,124,32,32,124,32,32,124,32,32,124,32,32,47,32,95,95,32,92,32,32,92,95,95,95,124,32,32,32,32,60,13,10
       5F 20 5C 7C 
       20 20 7C 20 
       20 7C 20 20 
       7C 20 20 2F 
       20 5F 5F 20 
       5C 20 20 5C 
       5F 5F 5F 7C 
       20 20 20 20 
       3C 0D 0A    
041AE2 28 5F 5F 5F 0006*       db 40,95,95,95,95,32,32,47,95,95,124,32,32,124,95,95,124,32,40,95,95,95,95,32,32,47,92,95,95,95,32,32,62,95,95,124,95,32,92,13,10
       5F 20 20 2F 
       5F 5F 7C 20 
       20 7C 5F 5F 
       7C 20 28 5F 
       5F 5F 5F 20 
       20 2F 5C 5F 
       5F 5F 20 20 
       3E 5F 5F 7C 
       5F 20 5C 0D 
       0A          
041B0B 20 20 20 20 0007*       db 32,32,32,32,32,92,47,32,95,95,95,95,95,32,32,32,32,95,95,32,32,46,95,95,47,32,32,32,32,32,92,47,32,32,32,32,32,92,47,13,10
       20 5C 2F 20 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 20 
       20 2E 5F 5F 
       2F 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 5C 2F 0D 
       0A          
041B34 20 20 5F 5F 0008*       db 32,32,95,95,95,95,95,47,32,95,95,95,95,92,32,95,47,32,32,124,95,124,32,32,124,95,95,32,32,32,95,95,95,95,13,10
       5F 5F 5F 2F 
       20 5F 5F 5F 
       5F 5C 20 5F 
       2F 20 20 7C 
       5F 7C 20 20 
       7C 5F 5F 20 
       20 20 5F 5F 
       5F 5F 0D 0A 
041B58 20 2F 20 20 0009*       db 32,47,32,32,95,32,92,32,32,32,95,95,92,32,32,92,32,32,32,95,95,92,32,32,124,32,32,92,95,47,32,95,95,32,92,13,10
       5F 20 5C 20 
       20 20 5F 5F 
       5C 20 20 5C 
       20 20 20 5F 
       5F 5C 20 20 
       7C 20 20 5C 
       5F 2F 20 5F 
       5F 20 5C 0D 
       0A          
041B7D 28 20 20 3C 0010*       db 40,32,32,60,95,62,32,41,32,32,124,32,32,32,32,32,124,32,32,124,32,124,32,32,32,89,32,32,92,32,32,95,95,95,47,13,10
       5F 3E 20 29 
       20 20 7C 20 
       20 20 20 20 
       7C 20 20 7C 
       20 7C 20 20 
       20 59 20 20 
       5C 20 20 5F 
       5F 5F 2F 0D 
       0A          
041BA2 20 5C 5F 5F 0011*       db 32,92,95,95,95,95,47,124,95,95,124,32,32,32,32,32,124,95,95,124,32,124,95,95,95,124,32,32,47,92,95,95,95,32,32,62,13,10
       5F 5F 2F 7C 
       5F 5F 7C 20 
       20 20 20 20 
       7C 5F 5F 7C 
       20 7C 5F 5F 
       5F 7C 20 20 
       2F 5C 5F 5F 
       5F 20 20 3E 
       0D 0A       
041BC8 5F 5F 5F 5F 0012*       db 95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,32,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
041C06 5C 5F 5F 5F 0013*       db 92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,13,10
       5F 5F 5F 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       0D 0A       
041C44 20 7C 20 20 0014*       db 32,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       20 20 20 5F 
       5F 5F 2F 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 0D 
       0A          
041C81 20 7C 20 20 0015*       db 32,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       20 20 7C 20 
       20 20 7C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       0D 0A       
041CBF 20 7C 5F 5F 0016*       db 32,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 7C 20 
       20 20 7C 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       0D 0A       
041CFD 20 5F 5F 5F 0017*       db 32,95,95,95,95,95,95,95,32,32,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,92,47,95,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 0D 0A 
041D45 20 5C 20 20 0018*       db 32,92,32,32,32,32,32,32,92,32,124,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,47,32,32,32,95,95,95,95,95,47,13,10
       20 20 20 20 
       5C 20 7C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       2F 20 20 20 
       5F 5F 5F 5F 
       5F 2F 0D 0A 
041D8D 20 2F 20 20 0019*       db 32,47,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,32,92,95,95,95,95,95,32,32,92,13,10
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 20 
       5C 5F 5F 5F 
       5F 5F 20 20 
       5C 0D 0A    
041DD4 2F 20 20 20 0020*       db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 0D 0A 
041E1C 5C 5F 5F 5F 0021*       db 92,95,95,95,95,124,95,95,32,32,47,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 0D 0A 
041E64 20 20 20 20 0022*       db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 5C 
       2F 0D 0A    
041EAB 00          0023*       db 0 ; string terminator
041EAC             0048        include "collisions.inc"
041EAC             0001*   ; ====== COLLISION DETECTION ======
041EAC             0002*   ; --- constants ---
041EAC             0003*   ; sprite_collisions flags
041EAC             0004*   ; collides_with_player: equ %00000001
041EAC             0005*   ; collides_with_laser: equ %00000010
041EAC             0006*   sprite_alive: equ 6; set when sprite is alive
041EAC             0007*   sprite_just_died: equ 7; set when sprite just died
041EAC             0008*   collide_top: equ %00001000
041EAC             0009*   collide_bottom: equ %00000100
041EAC             0010*   collide_left: equ %00000010
041EAC             0011*   collide_right: equ %00000001
041EAC             0012*   
041EAC 00 00 00    0013*   collision_table_pointer: dl 0x000000 ; pointer to the sprite in the group being checked for collision
041EAF             0014*   
041EAF             0015*   collision_draw_hitboxes:
041EAF             0016*   ; draw hitbox for ix collider
041EAF DD E5       0017*       push ix
041EB1 FD E5       0018*       push iy
041EB3 AF          0019*       xor a ; color mode 0
041EB4 0E 09       0020*       ld c,c_red
041EB6 CD 87 13 04 0021*       call vdu_gcol
041EBA 01 00 00 00 0022*       ld bc,0
041EBE DD 4E 02    0023*       ld c,(ix+sprite_x+1)
041EC1 DD 46 03    0024*       ld b,(ix+sprite_x+2)
041EC4 11 00 00 00 0025*       ld de,0
041EC8 DD 5E 05    0026*       ld e,(ix+sprite_y+1)
041ECB DD 56 06    0027*       ld d,(ix+sprite_y+2)
041ECE 21 00 00 00 0028*       ld hl,0 ; clear hlu and h
041ED2 DD 6E 1E    0029*       ld l,(ix+sprite_dim_x)
041ED5 09          0030*       add hl,bc ; hl = x1
041ED6 E5          0031*       push hl ; save x1
041ED7 21 00 00 00 0032*       ld hl,0 ; clear hlu and h
041EDB DD 6E 1F    0033*       ld l,(ix+sprite_dim_y)
041EDE 19          0034*       add hl,de ; hl = y1
041EDF DD E1       0035*       pop ix ; ix = x1 (was hl)
041EE1 E5          0036*       push hl
041EE2 FD E1       0037*       pop iy ; iy = y1
041EE4 CD 77 18 04 0038*       call vdu_plot_rf
041EE8 FD E1       0039*       pop iy
041EEA DD E1       0040*       pop ix
041EEC             0041*   
041EEC             0042*   ; draw hitbox for iy collider
041EEC DD E5       0043*       push ix
041EEE FD E5       0044*       push iy
041EF0 AF          0045*       xor a ; color mode 0
041EF1 0E 0A       0046*       ld c,c_green
041EF3 CD 87 13 04 0047*       call vdu_gcol
041EF7 01 00 00 00 0048*       ld bc,0
041EFB FD 4E 02    0049*       ld c,(iy+sprite_x+1)
041EFE FD 46 03    0050*       ld b,(iy+sprite_x+2)
041F01 11 00 00 00 0051*       ld de,0
041F05 FD 5E 05    0052*       ld e,(iy+sprite_y+1)
041F08 FD 56 06    0053*       ld d,(iy+sprite_y+2)
041F0B 21 00 00 00 0054*       ld hl,0 ; clear hlu and h
041F0F FD 6E 1E    0055*       ld l,(iy+sprite_dim_x)
041F12 09          0056*       add hl,bc ; hl = x1
041F13 E5          0057*       push hl ; save x1
041F14 21 00 00 00 0058*       ld hl,0 ; clear hlu and h
041F18 FD 6E 1F    0059*       ld l,(iy+sprite_dim_y)
041F1B 19          0060*       add hl,de ; hl = y1
041F1C DD E1       0061*       pop ix ; ix = x1 (was hl)
041F1E E5          0062*       push hl
041F1F FD E1       0063*       pop iy ; iy = y1
041F21 CD 77 18 04 0064*       call vdu_plot_rf
041F25 FD E1       0065*       pop iy
041F27 DD E1       0066*       pop ix
041F29 C9          0067*       ret
041F2A             0068*   ; end collision_draw_hitboxes
041F2A             0069*   
041F2A             0070*   ; check_collision:
041F2A             0071*   ; Detects collision using bounding box method.
041F2A             0072*   ; Inputs:
041F2A             0073*   ;   IX -> Sprite/Tile table for Collider A
041F2A             0074*   ;   IY -> Sprite/Tile table for Collider B
041F2A             0075*   ; Outputs:
041F2A             0076*   ;   a = 0, zero flag set, positive sign, carry reset -> Collision detected
041F2A             0077*   ;   a = -1, zero flag reset, negative sign, carry set -> No collision detected
041F2A             0078*   ; Destroys: HL, DE, AF
041F2A             0079*   check_collision:
041F2A             0080*   check_collision_box:
041F2A             0081*   ; Test 1: (ay + ah) - by < 0
041F2A 21 00 00 00 0082*       ld hl,0                     ; Clear hlu
041F2E DD 6E 05    0083*       ld l,(ix+sprite_y+1)        ; Load ay integer part low byte
041F31 DD 66 06    0084*       ld h,(ix+sprite_y+2)        ; Load ay integer part high byte
041F34 11 00 00 00 0085*       ld de,0                     ; Clear deu and d
041F38 DD 5E 1F    0086*       ld e,(ix+sprite_dim_y)      ; Load ah
041F3B 19          0087*       add hl,de                   ; (ay + ah)
041F3C FD 5E 05    0088*       ld e,(iy+sprite_y+1)        ; Load by integer part low byte
041F3F FD 56 06    0089*       ld d,(iy+sprite_y+2)        ; Load by integer part high byte
041F42 AF          0090*       xor a                       ; Clear carry
041F43 ED 52       0091*       sbc hl,de                   ; (ay + ah) - by
041F45 FA A8 1F 04 0092*       jp m,@not_collision         ; No collision if negative
041F49             0093*   
041F49             0094*   ; Test 2: ay - (by + bh) < 0
041F49 21 00 00 00 0095*       ld hl,0                     ; Clear hlu
041F4D FD 6E 05    0096*       ld l,(iy+sprite_y+1)        ; Load by integer part low byte
041F50 FD 66 06    0097*       ld h,(iy+sprite_y+2)        ; Load by integer part high byte
041F53 11 00 00 00 0098*       ld de,0                     ; Clear deu and d
041F57 FD 5E 1F    0099*       ld e,(iy+sprite_dim_y)      ; Load bh
041F5A 19          0100*       add hl,de                   ; (by + bh)
041F5B DD 5E 05    0101*       ld e,(ix+sprite_y+1)        ; Load ay integer part low byte
041F5E DD 56 06    0102*       ld d,(ix+sprite_y+2)        ; Load ay integer part high byte
041F61 AF          0103*       xor a                       ; Clear carry
041F62 ED 52       0104*       sbc hl,de                   ; (by + bh) - ay
041F64 FA A8 1F 04 0105*       jp m,@not_collision         ; No collision if negative
041F68             0106*   
041F68             0107*   ; Test 3: (ax + aw) - bx < 0
041F68 21 00 00 00 0108*       ld hl,0                     ; Clear hlu
041F6C DD 6E 02    0109*       ld l,(ix+sprite_x+1)        ; Load ax integer part low byte
041F6F DD 66 03    0110*       ld h,(ix+sprite_x+2)        ; Load ax integer part high byte
041F72 11 00 00 00 0111*       ld de,0                     ; Clear deu and d
041F76 DD 5E 1E    0112*       ld e,(ix+sprite_dim_x)      ; Load aw
041F79 19          0113*       add hl,de                   ; (ax + aw)
041F7A FD 5E 02    0114*       ld e,(iy+sprite_x+1)        ; Load bx integer part low byte
041F7D FD 56 03    0115*       ld d,(iy+sprite_x+2)        ; Load bx integer part high byte
041F80 AF          0116*       xor a                       ; Clear carry
041F81 ED 52       0117*       sbc hl,de                   ; (ax + aw) - bx
041F83 FA A8 1F 04 0118*       jp m,@not_collision         ; No collision if negative
041F87             0119*   
041F87             0120*   ; Test 4: ax - (bx + bw) < 0
041F87 21 00 00 00 0121*       ld hl,0                     ; Clear hlu
041F8B FD 6E 02    0122*       ld l,(iy+sprite_x+1)        ; Load bx integer part low byte
041F8E FD 66 03    0123*       ld h,(iy+sprite_x+2)        ; Load bx integer part high byte
041F91 11 00 00 00 0124*       ld de,0                     ; Clear deu and d
041F95 FD 5E 1E    0125*       ld e,(iy+sprite_dim_x)      ; Load bw
041F98 19          0126*       add hl,de                   ; (bx + bw)
041F99 DD 5E 02    0127*       ld e,(ix+sprite_x+1)        ; Load ax integer part low byte
041F9C DD 56 03    0128*       ld d,(ix+sprite_x+2)        ; Load ax integer part high byte
041F9F AF          0129*       xor a                       ; Clear carry
041FA0 ED 52       0130*       sbc hl,de                   ; (bx + bw) - ax
041FA2 FA A8 1F 04 0131*       jp m,@not_collision         ; No collision if negative
041FA6             0132*   
041FA6             0133*   ; If all tests pass, collision is detected
041FA6             0134*   @is_collision:
041FA6 AF          0135*       xor a                       ; Clear accumulator and flags (a = 0)
041FA7 C9          0136*       ret                         ; Return with zero flag set
041FA8             0137*   
041FA8             0138*   ; No collision detected
041FA8             0139*   @not_collision:
041FA8 3D          0140*       dec a                       ; Set a to -1
041FA9 C9          0141*       ret                         ; Return with carry set
041FAA             0142*   ; End check_collision_box
041FAA             0143*   
041FAA             0144*   
041FAA             0145*   ; this routine detects collisions between two collidable objects,
041FAA             0146*   ; which can include sprites, active tiles, or any screen coordinate
041FAA             0147*   ; which has been set up with a sprite table structure that includes dim_x
041FAA             0148*   ; representing the radius of the collidable object
041FAA             0149*   ; inputs: ix and iy point to the colliding objects' sprite/tile table records
041FAA             0150*   ; outputs: uh.l = distance - sum of radii
041FAA             0151*   ;          zero flag set if collision detected
041FAA             0152*   ;          dx168 and dy168 are also populated with the signed displacements
041FAA             0153*   ; destroys: everything except indexes
041FAA             0154*   ; check_collision:
041FAA             0155*   check_collision_cartesian:
041FAA             0156*   ; compute dx = x1-x0
041FAA DD 27 01    0157*       ld hl,(ix+sprite_x)
041FAD FD 17 01    0158*       ld de,(iy+sprite_x)
041FB0 AF          0159*       xor a ; clear carry
041FB1 ED 52       0160*       sbc hl,de
041FB3 22 82 07 04 0161*       ld (dx168),hl ; dx to scratch
041FB7             0162*   ; compute dy = y1-y0
041FB7 DD 27 04    0163*       ld hl,(ix+sprite_y)
041FBA FD 17 04    0164*       ld de,(iy+sprite_y)
041FBD AF          0165*       xor a ; clear carry
041FBE ED 52       0166*       sbc hl,de ; hl = dy
041FC0 22 88 07 04 0167*       ld (dy168),hl ; dy to scratch
041FC4             0168*   ; compute euclidean distance between centers
041FC4 CD 8E 07 04 0169*       call distance168 ; uh.l = distance
041FC8             0170*   ; check for overlap by summing half the radii
041FC8 DD 7E 1E    0171*       ld a,(ix+sprite_dim_x)
041FCB CB 3F       0172*       srl a ; divide by 2
041FCD FD 5E 1E    0173*       ld e,(iy+sprite_dim_x)
041FD0 CB 3B       0174*       srl e ; divide by 2
041FD2 83          0175*       add a,e
041FD3 11 00 00 00 0176*       ld de,0 ; clear deu and e
041FD7 57          0177*       ld d,a ; ud.e = sum of radii
041FD8 B7          0178*       or a ; clear carry
041FD9 ED 52       0179*       sbc hl,de ; uh.l = distance - sum of radii
041FDB C8          0180*       ret z ; return collision
041FDC F0          0181*       ret p ; return no collision
041FDD AF          0182*       xor a ; return collision
041FDE C9          0183*       ret
041FDF             0184*   ; end check_collision_cartesian
041FDF             0185*   
041FDF             0186*   ; check collisions of a sprite or tile against a sprite group
041FDF             0187*   ; inputs: iy = pointer to sprite or tile record being checked
041FDF             0188*   ;         ix = pointer to sprite group, b = number of records in sprite group
041FDF             0189*   check_sprite_group_collisions:
041FDF             0190*   @collision_loop:
041FDF DD 22 AC 1E 0191*       ld (collision_table_pointer),ix ; update table pointer
       04          
041FE4 C5          0192*       push bc ; backup loop counter
041FE5             0193*   ; check sprite_collisions sprite_alive flag to see if sprite is active
041FE5 DD CB 1D 76 0194*       bit sprite_alive,(ix+sprite_collisions)
041FE9 CA FF 1F 04 0195*       jp z,@next_record ; not alive so skip to next record
041FED             0196*   ; sprite alive so check for collision
041FED CD 2A 1F 04 0197*       call check_collision
041FF1 C2 FF 1F 04 0198*       jp nz,@next_record ; no collision
041FF5             0199*   ; set sprite_just_died flag for each entity and return to caller
041FF5 C1          0200*       pop bc ; dummy pop to balance stack
041FF6 DD CB 1D FE 0201*       set sprite_just_died,(ix+sprite_collisions)
041FFA FD CB 1D FE 0202*       set sprite_just_died,(iy+sprite_collisions)
041FFE C9          0203*       ret
041FFF             0204*   @next_record:
041FFF C1          0205*       pop bc ; get back our loop counter
042000 ED 32 40    0206*       lea ix,ix+table_record_size
042003 10 DA       0207*       djnz @collision_loop ; loop until we've checked all the records
042005             0208*   ; return to caller
042005 AF          0209*       xor a
042006 3C          0210*       inc a ; resets sign flag and a to non-zero indicating no collision
042007 C9          0211*       ret
042008             0212*   ; end check_sprite_group_collisions
042008             0213*   
042008             0214*   check_enemy_collision_laser: ; check for collisions with laser
042008 DD 21 56 9D 0215*       ld ix,player_lasers_begin
       04          
04200D 06 04       0216*       ld b,player_lasers_max
04200F CD DF 1F 04 0217*       call check_sprite_group_collisions
042013 C9          0218*       ret
042014             0219*   ; end check_enemy_collision_laser
042014             0220*   
042014             0221*   check_enemy_collision_player: ; check for collisions with player
042014 DD 21 56 9E 0222*       ld ix,player_begin
       04          
042019 CD 2A 1F 04 0223*       call check_collision
04201D C0          0224*       ret nz ; no collision so nothing to do
04201E DD CB 1D FE 0225*       set sprite_just_died,(ix+sprite_collisions)
042022 FD CB 1D FE 0226*       set sprite_just_died,(iy+sprite_collisions)
042026 AF          0227*       xor a ; signal collision detected
042027 C9          0228*       ret
042028             0229*   ; end check_enemy_collision_player
042028             0049        include "enemies.inc"
042028 36 20 04    0001*   enemies_state: dl enemies_alive
04202B             0002*   
04202B             0003*   do_enemies:
04202B 2A 28 20 04 0004*       ld hl,(enemies_state)
04202F             0005*       CALL_HL
04202F 01 35 20 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
042033 C5          0002*M1     push bc ; which constitutes the return address
042034 E9          0003*M1     jp (hl) ; Jump to the address in HL
042035 C9          0006*       ret
042036             0007*   
042036             0008*   enemies_alive:
042036 FD 21 96 9E 0009*       ld iy,enemy_sprites_begin
       04          
04203B 06 07       0010*       ld b,table_num_enemy_records
04203D CD 0B 80 04 0011*       call move_sprite_group
042041 C9          0012*       ret
042042             0013*   
042042             0014*   enemies_despawning:
042042 C9          0015*       ret
042043             0016*   
042043             0017*   enemies_dead:
042043 C9          0018*       ret
042044             0019*   
042044             0020*   enemies_respawning:
042044 C9          0021*       ret
042045             0050        include "enemy_fireball.inc"
042045             0001*   speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
042045             0002*   fireballs_max: equ 4
042045             0003*   
042045             0004*   fireball_defaults:
042045 03          0005*       db enemy_projectile     ; type
042046 11 01 00    0006*       dl BUF_FIREBALL_2_000   ; base_bufferId
042049 97 20 04    0007*       dl move_enemy_fireball  ; move_program
04204C 40          0008*       db %01000000            ; collisions bit 6 signals sprite alive
04204D 10          0009*       db 16                   ; dim_x
04204E 10          0010*       db 16                   ; dim_y
04204F 20          0011*       db 32                   ; num_orientations
042050 02          0012*       db 2                    ; num_animations
042051 00          0013*       db 0                    ; animation
042052 08          0014*       db 8                    ; animation_timer
042053 00          0015*       db 0                    ; move_timer
042054 00          0016*       db 0                    ; move_step
042055 00          0017*       db 0                    ; points
042056 FE          0018*       db -2                   ; shield_damage
042057 00          0019*       db 0                    ; frame
042058             0020*   
042058             0021*   enemy_spawn_fireball:
042058 21 45 20 04 0022*       ld hl,fireball_defaults
04205C DD 21 56 9F 0023*       ld ix,fireballs_base
       04          
042061 06 04       0024*       ld b,fireballs_max
042063 CD 98 8B 04 0025*       call spawn_sprite_from_tile
042067 D0          0026*       ret nc ; no carry means no free sprite slots, so we go home
042068             0027*   ; other specific initialization
042068             0028*   ; ------------------------------------------------
042068             0029*   ; copy sprite heading and component velocities from targeting_computer
042068 2A A8 84 04 0030*       ld hl,(Bearing_t)
04206C 11 00 80 00 0031*       ld de,128*256 ; rotate 128 degrees
042070 19          0032*       add hl,de
042071 DD 2F 10    0033*       ld (ix+sprite_heading),hl
042074 2A B1 84 04 0034*       ld hl,(Vp_x)
042078 DD 2F 07    0035*       ld (ix+sprite_xvel),hl
04207B 2A B4 84 04 0036*       ld hl,(Vp_y)
04207F DD 2F 0A    0037*       ld (ix+sprite_yvel),hl
042082             0038*   ; move projectile one frame's distance so it isn't drawn right over turret
042082 DD 27 01    0039*       ld hl,(ix+sprite_x)
042085 DD 17 07    0040*       ld de,(ix+sprite_xvel)
042088 19          0041*       add hl,de
042089 DD 2F 01    0042*       ld (ix+sprite_x),hl
04208C DD 27 04    0043*       ld hl,(ix+sprite_y)
04208F DD 17 0A    0044*       ld de,(ix+sprite_yvel)
042092 19          0045*       add hl,de
042093 DD 2F 04    0046*       ld (ix+sprite_y),hl
042096 C9          0047*       ret
042097             0048*   ; end enemy_spawn_fireball
042097             0049*   
042097             0050*   move_enemy_fireball:
042097             0051*   ; run the movement program for the fireball enemy
042097 CD A1 80 04 0052*       call move_sprite
04209B 3A DF 7E 04 0053*       ld a,(sprite_screen_edge)
04209F B7          0054*       or a ; a will be non-zero if have scrolled off screen
0420A0 C2 25 7F 04 0055*       jp nz,table_deactivate_sprite
0420A4 DD 21 56 9E 0056*       ld ix,player_begin
       04          
0420A9 DD CB 1D 76 0057*       bit sprite_alive,(ix+sprite_collisions)
0420AD CA C1 20 04 0058*       jp z,@animate ; player is dead so don't check for collisions
0420B1 CD 14 20 04 0059*       call check_enemy_collision_player
0420B5 C2 C1 20 04 0060*       jp nz,@animate ; no collision so do animation
0420B9 CD 8A 7E 04 0061*       call update_shields
0420BD C3 6D 22 04 0062*       jp spawn_explosion
0420C1             0063*   @animate:
0420C1             0064*   ; check the animation timer
0420C1 FD 35 23    0065*       dec (iy+sprite_animation_timer)
0420C4 C0          0066*       ret nz ; not time to animate
0420C5             0067*   ; reset the animation timer and bump animation
0420C5 3E 08       0068*       ld a,8
0420C7 FD 77 23    0069*       ld (iy+sprite_animation_timer),a
0420CA FD 7E 22    0070*       ld a,(iy+sprite_animation)
0420CD 3C          0071*       inc a
0420CE E6 01       0072*       and %00000001 ; modulo 2
0420D0 FD 77 22    0073*       ld (iy+sprite_animation),a
0420D3 CD 58 81 04 0074*       call sprite_frame_heading_animation ; a, sprite_frame set to heading-based frame
0420D7 CD 3E 19 04 0075*       call vdu_sprite_select_frame
0420DB C9          0076*       ret
0420DC             0077*   ; end move_enemy_fireball
0420DC             0078*   
0420DC             0079*   init_enemy_fireballs:
0420DC             0080*   ; set pointer to seeker sprite table
0420DC FD 21 56 9F 0081*       ld iy,fireballs_base
       04          
0420E1 FD 7E 00    0082*       ld a,(iy+sprite_id) ; sprite id
0420E4 1E 04       0083*       ld e,fireballs_max ; sprite loop counter
0420E6             0084*   ; define seeker sprites
0420E6             0085*   @sprites_loop:
0420E6 F5          0086*       push af
0420E7 D5          0087*       push de
0420E8 CD DB 18 04 0088*       call vdu_sprite_select
0420EC CD EE 18 04 0089*       call vdu_sprite_clear_frames
0420F0 21 11 01 00 0090*       ld hl,BUF_FIREBALL_2_000
0420F4 06 80       0091*       ld b,4*32 ; 4 animations * 32 orientations
0420F6             0092*   @frames_loop:
0420F6 C5          0093*       push bc
0420F7 E5          0094*       push hl
0420F8 CD 30 1A 04 0095*       call vdu_sprite_add_buff
0420FC E1          0096*       pop hl
0420FD 23          0097*       inc hl
0420FE C1          0098*       pop bc
0420FF 10 F5       0099*       djnz @frames_loop
042101 D1          0100*       pop de ; sprite loop counter
042102 F1          0101*       pop af ; sprite id
042103 3C          0102*       inc a
042104 1D          0103*       dec e
042105 C2 E6 20 04 0104*       jp nz,@sprites_loop
042109 C9          0105*       ret
04210A             0106*   ; end init_enemy_fireballs
04210A             0051        include "enemy_seeker.inc"
04210A 00          0001*   seekers_count: db 0
04210B             0002*   seekers_max: equ 3
04210B             0003*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
04210B             0004*   
04210B             0005*   seeker_defaults:
04210B 01          0006*       db enemy_air            ; type
04210C 56 01 00    0007*       dl BUF_SEEKER_000       ; base_bufferId
04210F C2 21 04    0008*       dl en_nav_seek_zag    ; move_program
042112 40          0009*       db %01000000            ; collisions bit 6 signals sprite alive
042113 10          0010*       db 16                   ; dim_x
042114 10          0011*       db 16                   ; dim_y
042115 20          0012*       db 32                   ; num_orientations
042116 01          0013*       db 1                    ; num_animations
042117 00          0014*       db 0                    ; animation
042118 00          0015*       db 0                    ; animation_timer
042119 01          0016*       db 1                    ; move_timer
04211A 00          0017*       db 0                    ; move_step
04211B 0A          0018*       db 10                   ; points
04211C FC          0019*       db -4                   ; shield_damage
04211D 00          0020*       db 0                    ; frame
04211E             0021*   
04211E             0022*   enemy_spawn_seeker:
04211E 21 0B 21 04 0023*       ld hl,seeker_defaults
042122 DD 21 96 9E 0024*       ld ix,seekers_base
       04          
042127 06 03       0025*       ld b,seekers_max
042129 CD 98 8B 04 0026*       call spawn_sprite_from_tile
04212D D0          0027*       ret nc ; no carry means no free sprite slots, so we go home
04212E             0028*   ; other specific initialization
04212E 21 80 02 00 0029*       ld hl,speed_seeker
042132 DD 2F 0D    0030*       ld (ix+sprite_vel),hl
042135 C9          0031*       ret
042136             0032*   ; end enemy_spawn_seeker
042136             0033*   
042136             0034*   move_enemy_seeker_orbit:
042136             0035*   ; compute x coordinate of orbit origin based on sprite id
042136 3E 05       0036*       ld a,seeker_min_sprite_id
042138 FD 96 00    0037*       sub (iy+sprite_id)
04213B 6F          0038*       ld l,a
04213C 26 55       0039*       ld h,85 ; 1/3 the playing field width
04213E ED 6C       0040*       mlt hl
042140 3E 40       0041*       ld a,64 ; 1/4 of the playing field width
042142 85          0042*       add a,l ; a = x coordinate of orbit origin
042143 FD 77 25    0043*       ld (iy+sprite_move_step),a ; as good a place as any to store it
042146             0044*   ; initialize orbit angle
042146 AF          0045*       xor a
042147 FD 77 13    0046*       ld (iy+sprite_orientation),a
04214A             0047*   ; ; initialize move timer
04214A             0048*   ;     inc a ; set to 1
04214A             0049*   ;     ld (iy+sprite_move_timer),a
04214A             0050*   ; init done, so update move program
04214A 21 51 21 04 0051*       ld hl,@stage1 ; update move program pointer
04214E FD 2F 1A    0052*       ld (iy+sprite_move_program),hl
042151             0053*   ; fall through to @stage1
042151             0054*   @stage1:
042151             0055*   ; ; check whether time to update orbit angle
042151             0056*   ;     dec (iy+sprite_move_timer)
042151             0057*   ;     jp nz,@F ; not time to change so simply movethe sprite on the current heading
042151             0058*   ;     inc (iy+sprite_move_timer) ; reset timer to 1
042151             0059*   ; update the target coordinates based on orbit angle and radius
042151 FD 34 13    0060*       inc (iy+sprite_orientation) ; increment angle
042154 21 00 00 00 0061*       ld hl,0 ; clear hlu and l
042158 FD 66 13    0062*       ld h,(iy+sprite_orientation) ; uh.l = angle
04215B 11 00 80 00 0063*       ld de,128*256 ; ud.e = radius
04215F CD F4 06 04 0064*       call polar_to_cartesian ; u.bc, u.de = x,y offsets
042163 FD 7E 25    0065*       ld a,(iy+sprite_move_step) ; x coordinate of orbit origin
042166 80          0066*       add a,b ; add x offset
042167 01 00 00 00 0067*       ld bc,0 ; bcu and c
04216B 47          0068*       ld b,a ; ub.c = x
04216C 21 00 A8 00 0069*       ld hl,336/2*256
042170 19          0070*       add hl,de
042171 EB          0071*       ex de,hl ; ud.e = y
042172 CD 85 84 04 0072*       call bearing_to_coord ; uh.l = angle to coordinate
042176 FD 2F 10    0073*       ld (iy+sprite_heading),hl ; save angle as heading
042179             0074*   ; compute component velocities, save them in sprite record, and move the sprite
042179 CD 42 81 04 0075*       call sprite_compute_velocities
04217D             0076*   @@:
04217D CD A1 80 04 0077*       call move_sprite ; move the sprite
042181 C3 85 21 04 0078*       jp move_enemy_seeker
042185             0079*   ; end move_enemy_seeker_orbit
042185             0080*   
042185             0081*   move_enemy_seeker:
042185 DD 21 56 9E 0082*       ld ix,player_begin
       04          
04218A DD CB 1D 76 0083*       bit sprite_alive,(ix+sprite_collisions)
04218E CA 9A 21 04 0084*       jp z,@F ; player is dead so don't check for collisions
042192 CD 14 20 04 0085*       call check_enemy_collision_player
042196 CA BA 21 04 0086*       jp z,@player
04219A             0087*   @@:
04219A CD 08 20 04 0088*       call check_enemy_collision_laser
04219E CA B2 21 04 0089*       jp z,@laser
0421A2             0090*   ; change the animation frame to match heading
0421A2 FD 7E 00    0091*       ld a,(iy+sprite_id)
0421A5 CD DB 18 04 0092*       call vdu_sprite_select
0421A9 CD 6D 81 04 0093*       call sprite_frame_heading ; a, sprite_frame set to heading-based frame
0421AD CD 3E 19 04 0094*       call vdu_sprite_select_frame
0421B1 C9          0095*       ret
0421B2             0096*   @laser:
0421B2 CD 32 7E 04 0097*       call update_score
0421B6 C3 6D 22 04 0098*       jp spawn_explosion
0421BA             0099*   @player:
0421BA CD 8A 7E 04 0100*       call update_shields
0421BE C3 6D 22 04 0101*       jp spawn_explosion
0421C2             0102*   ; end move_enemy_seeker
0421C2             0103*   
0421C2             0104*   ; contains the logic for how to move the enemy
0421C2             0105*   ; and then does the moving
0421C2             0106*   ; inputs: a fully-populated active sprite table
0421C2             0107*   ;         player position variables
0421C2             0108*   ; destroys: everything except index registers
0421C2             0109*   ; outputs: moving enemies
0421C2             0110*   en_nav_seek_zag:
0421C2             0111*   ; set velocity and orientation by player's relative location
0421C2             0112*   ; move enemies y-axis
0421C2             0113*   ; where is player relative to us?
0421C2 CD 33 84 04 0114*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
0421C6             0115*   ; is player above or below us?
0421C6 ED 53 3B 03 0116*       ld (ude),de ; dy
       04          
0421CB 3A 3D 03 04 0117*       ld a,(ude+2) ; deu
0421CF 17          0118*       rla ; shift sign bit into carry
0421D0 D2 F8 21 04 0119*       jp nc,@zig_zag ; player is below,evade
0421D4             0120*   ; player is even or above,so home in on current heading
0421D4 FD 2F 10    0121*       ld (iy+sprite_heading),hl ; save sprite heading
0421D7             0122*   ; fall through to @compute_velocities
0421D7             0123*   @compute_velocities:
0421D7 CD 42 81 04 0124*       call sprite_compute_velocities
0421DB CD A1 80 04 0125*       call move_sprite ; move the sprite
0421DF B7          0126*       or a ; a will be non-zero if have collided with screen edge
0421E0 C2 03 22 04 0127*       jp nz,@zag_switch ; switch direction
0421E4 C3 85 21 04 0128*       jp move_enemy_seeker ; didn't hit an edge so check collisions and move sprite
0421E8             0129*   @zig_zag_start:
0421E8 FD 2A DC 7E 0130*       ld iy,(table_pointer)
       04          
0421ED CD 18 05 04 0131*       call rand_8
0421F1 E6 3F       0132*       and %00111111 ; limit it to 64
0421F3 CB DF       0133*       set 3,a ; make sure it's at least 8
0421F5 FD 77 24    0134*       ld (iy+sprite_move_timer),a ; store it
0421F8             0135*       ; fall through to @zig_zag
0421F8             0136*   @zig_zag:
0421F8 FD 7E 24    0137*       ld a,(iy+sprite_move_timer)
0421FB 3D          0138*       dec a
0421FC FD 77 24    0139*       ld (iy+sprite_move_timer),a
0421FF C2 25 22 04 0140*       jp nz,@zig_zag_no_switch
042203             0141*   @zag_switch:
042203             0142*       ; otherwise flip direction and restart timer
042203 FD 7E 25    0143*       ld a,(iy+sprite_move_step)
042206 EE 01       0144*       xor %1 ; flips bit zero
042208 FD 77 25    0145*       ld (iy+sprite_move_step),a ; store it
04220B C2 1A 22 04 0146*       jp nz,@F ; zag right
04220F             0147*   ;otherwise zag left
04220F 21 00 A0 00 0148*       ld hl,160*256; southwest heading
042213 FD 2F 10    0149*       ld (iy+sprite_heading),hl ; save sprite heading
042216 C3 E8 21 04 0150*       jp @zig_zag_start
04221A             0151*   @@: ; zag right
04221A 21 00 60 00 0152*       ld hl,96*256; southeast heading
04221E FD 2F 10    0153*       ld (iy+sprite_heading),hl ; save sprite heading
042221 C3 E8 21 04 0154*       jp @zig_zag_start
042225             0155*   @zig_zag_no_switch:
042225             0156*       ; ld a,(sprite_orientation)
042225 FD 27 10    0157*       ld hl,(iy+sprite_heading)
042228 C3 D7 21 04 0158*       jp @compute_velocities
04222C             0159*   ; end en_nav_seek_zag
04222C             0160*   
04222C             0161*   
04222C             0162*   init_enemy_seekers:
04222C             0163*   ; set pointer to seeker sprite table
04222C FD 21 96 9E 0164*       ld iy,seekers_base
       04          
042231 FD 7E 00    0165*       ld a,(iy+sprite_id) ; sprite id
042234 1E 03       0166*       ld e,seekers_max ; sprite loop counter
042236             0167*   ; define seeker sprites
042236             0168*   @sprites_loop:
042236 F5          0169*       push af
042237 D5          0170*       push de
042238 CD DB 18 04 0171*   	call vdu_sprite_select
04223C CD EE 18 04 0172*   	call vdu_sprite_clear_frames
042240 21 56 01 00 0173*   	ld hl,BUF_SEEKER_000
042244 06 20       0174*   	ld b,32 ; 32 bitmaps for seeker
042246             0175*   @frames_loop:
042246 C5          0176*   	push bc
042247 E5          0177*   	push hl
042248 CD 30 1A 04 0178*   	call vdu_sprite_add_buff
04224C E1          0179*   	pop hl
04224D 23          0180*   	inc hl
04224E C1          0181*   	pop bc
04224F 10 F5       0182*   	djnz @frames_loop
042251 D1          0183*       pop de ; sprite loop counter
042252 F1          0184*       pop af ; sprite id
042253 3C          0185*       inc a
042254 1D          0186*       dec e
042255 C2 36 22 04 0187*       jp nz,@sprites_loop
042259 C9          0188*       ret
04225A             0189*   ; end init_enemy_seekers
04225A             0052        include "explosion.inc"
04225A             0001*   explosions_max: equ 8
04225A             0002*   explosion_defaults:
04225A 04          0003*       db explosion            ; type
04225B 0C 01 00    0004*       dl BUF_EXPLOSION_A	    ; base_bufferId
04225E D5 22 04    0005*       dl move_explosion	    ; move_program
042261 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
042262 07          0007*       db 7	                ; dim_x
042263 07          0008*       db 7                    ; dim_y
042264 01          0009*       db 1                    ; num_orientations
042265 05          0010*       db 5                    ; num_animations
042266 05          0011*       db 5	                ; animation
042267 08          0012*       db 8	                ; animation_timer
042268 00          0013*       db 0	                ; move_timer
042269 00          0014*       db 0	                ; move_step
04226A 00          0015*       db 0	                ; points
04226B 00          0016*       db 0	                ; shield_damage
04226C 00          0017*       db 0                    ; frame
04226D             0018*   
04226D             0019*   spawn_explosion:
04226D 21 5A 22 04 0020*       ld hl,explosion_defaults
042271 DD 21 56 A0 0021*       ld ix,explosions_base
       04          
042276 06 08       0022*       ld b,explosions_max
042278 CD D9 7F 04 0023*       call spawn_sprite_from_sprite
04227C D2 25 7F 04 0024*       jp nc,table_deactivate_sprite ; no carry means no free sprite slots, so we deactivate parent sprite and go home
042280             0025*   ; other specific initialization
042280 21 00 00 00 0026*       ld hl,0
042284 DD 2F 07    0027*       ld (ix+sprite_xvel),hl
042287 21 00 01 00 0028*       ld hl,1*256
04228B DD 2F 0A    0029*       ld (ix+sprite_yvel),hl
04228E             0030*   ; deactivate parent sprite
04228E C3 25 7F 04 0031*       jp table_deactivate_sprite
042292             0032*   ; end spawn_explosion
042292             0033*   
042292             0034*   spawn_explosion_player:
042292 FD 21 56 9E 0035*       ld iy,player_begin
       04          
042297 FD 22 DC 7E 0036*       ld (table_pointer),iy
       04          
04229C 21 5A 22 04 0037*       ld hl,explosion_defaults
0422A0 DD 21 56 A0 0038*       ld ix,explosions_base
       04          
0422A5 06 08       0039*       ld b,explosions_max
0422A7 CD D9 7F 04 0040*       call spawn_sprite_from_sprite
0422AB D2 25 7F 04 0041*       jp nc,table_deactivate_sprite ; no carry means no free sprite slots, so we deactivate parent sprite and go home
0422AF             0042*   ; other specific initialization
0422AF C9          0043*       ret
0422B0             0044*   ; end spawn_explosion_player
0422B0             0045*   
0422B0             0046*   tile_spawn_explosion:
0422B0 21 5A 22 04 0047*       ld hl,explosion_defaults
0422B4 DD 21 56 A0 0048*       ld ix,explosions_base
       04          
0422B9 06 08       0049*       ld b,explosions_max
0422BB CD 98 8B 04 0050*       call spawn_sprite_from_tile
0422BF D2 D6 88 04 0051*       jp nc,table_deactivate_tile ; no carry means no free sprite slots, so we deactivate parent tile and go home
0422C3             0052*   ; other specific initialization
0422C3 21 00 00 00 0053*       ld hl,0
0422C7 DD 2F 07    0054*       ld (ix+sprite_xvel),hl
0422CA 21 00 01 00 0055*       ld hl,1*256
0422CE DD 2F 0A    0056*       ld (ix+sprite_yvel),hl
0422D1             0057*   ; deactivate parent sprite
0422D1 C3 D6 88 04 0058*       jp table_deactivate_tile
0422D5             0059*   ; end tile_spawn_explosion
0422D5             0060*   
0422D5             0061*   move_explosion:
0422D5             0062*   ; run the movement program for the explosion
0422D5 CD A1 80 04 0063*       call move_sprite
0422D9 B7          0064*       or a ; a will be non-zero if have scrolled off screen
0422DA C2 25 7F 04 0065*       jp nz,table_deactivate_sprite
0422DE             0066*   ; do the animations
0422DE FD 35 23    0067*       dec (iy+sprite_animation_timer)
0422E1 C0          0068*       ret nz ; not time to bump animation frame
0422E2 FD 34 28    0069*       inc (iy+sprite_frame)
0422E5 FD 35 22    0070*       dec (iy+sprite_animation)
0422E8 CA 25 7F 04 0071*       jp z,table_deactivate_sprite ; reached the end of the animations
0422EC 3E 08       0072*       ld a,8 ; reset animation timer
0422EE FD 77 23    0073*       ld (iy+sprite_animation_timer),a
0422F1 C9          0074*       ret
0422F2             0075*   ; end move_explosion
0422F2             0076*   
0422F2             0077*   move_explosions:
0422F2             0078*   ; initialize pointers and loop counter
0422F2 FD 21 56 A0 0079*       ld iy,explosions_base ; set iy to first record in table
       04          
0422F7 06 08       0080*       ld b,explosions_max ; loop counter
0422F9 CD 0B 80 04 0081*       call move_sprite_group
0422FD C9          0082*       ret
0422FE             0083*   ; end move_explosions
0422FE             0084*   
0422FE             0085*   init_explosions:
0422FE             0086*   ; set pointer to explosion sprite table
0422FE FD 21 56 A0 0087*       ld iy,explosions_base
       04          
042303 FD 7E 00    0088*       ld a,(iy+sprite_id) ; sprite id
042306 1E 08       0089*       ld e,explosions_max ; sprite loop counter
042308             0090*   ; define explosion sprites
042308             0091*   @sprites_loop:
042308 F5          0092*       push af
042309 D5          0093*       push de
04230A CD DB 18 04 0094*   	call vdu_sprite_select
04230E CD EE 18 04 0095*   	call vdu_sprite_clear_frames
042312 21 0C 01 00 0096*   	ld hl,BUF_EXPLOSION_A
042316 06 05       0097*   	ld b,5 ; 5 bitmaps for explosion
042318             0098*   @frames_loop:
042318 C5          0099*   	push bc
042319 E5          0100*   	push hl
04231A CD 30 1A 04 0101*   	call vdu_sprite_add_buff
04231E E1          0102*   	pop hl
04231F 23          0103*   	inc hl
042320 C1          0104*   	pop bc
042321 10 F5       0105*   	djnz @frames_loop
042323 D1          0106*       pop de ; sprite loop counter
042324 F1          0107*       pop af ; sprite id
042325 3C          0108*       inc a
042326 1D          0109*       dec e
042327 C2 08 23 04 0110*       jp nz,@sprites_loop
04232B C9          0111*       ret
04232C             0112*   ; end init_explosions
04232C             0053        include "fonts_list.inc"
04232C             0001*   ; Generated by asm_config_editor.py
04232C             0002*   font_list_record_size: equ 12
04232C             0003*   font_list_width: equ 0
04232C             0004*   font_list_height: equ 3
04232C             0005*   font_list_bufferId: equ 6
04232C             0006*   font_list_filename: equ 9
04232C             0007*   
04232C             0008*   num_fonts: equ 13
04232C             0009*   
04232C             0010*   ; Index list:
04232C             0011*   amiga_forever_8x8: equ 64000
04232C             0012*   computer_pixel_7_8x12: equ 64001
04232C             0013*   computer_pixel_7_8x16: equ 64002
04232C             0014*   dopecre_8x8: equ 64003
04232C             0015*   gamer_2_8x8: equ 64004
04232C             0016*   Lat15_VGA8_8x8: equ 64005
04232C             0017*   Lat2_VGA8_8x8: equ 64006
04232C             0018*   Lat38_VGA8_8x8: equ 64007
04232C             0019*   Lat7_VGA8_8x8: equ 64008
04232C             0020*   planetary_contact_8x8: equ 64009
04232C             0021*   Squarewave_Bold_8x12: equ 64010
04232C             0022*   super_mario_bros_2_8x8: equ 64011
04232C             0023*   wendy_neue_6x6: equ 64012
04232C             0024*   
04232C             0025*   font_list: ; width; height; bufferId; filename;:
04232C 08 00 00 08 0026*   	dl 8, 8, 64000, fn_amiga_forever_8x8
       00 00 00 FA 
       00 C8 23 04 
042338 08 00 00 0C 0027*   	dl 8, 12, 64001, fn_computer_pixel_7_8x12
       00 00 01 FA 
       00 EA 23 04 
042344 08 00 00 10 0028*   	dl 8, 16, 64002, fn_computer_pixel_7_8x16
       00 00 02 FA 
       00 10 24 04 
042350 08 00 00 08 0029*   	dl 8, 8, 64003, fn_dopecre_8x8
       00 00 03 FA 
       00 36 24 04 
04235C 08 00 00 08 0030*   	dl 8, 8, 64004, fn_gamer_2_8x8
       00 00 04 FA 
       00 52 24 04 
042368 08 00 00 08 0031*   	dl 8, 8, 64005, fn_Lat15_VGA8_8x8
       00 00 05 FA 
       00 6E 24 04 
042374 08 00 00 08 0032*   	dl 8, 8, 64006, fn_Lat2_VGA8_8x8
       00 00 06 FA 
       00 8D 24 04 
042380 08 00 00 08 0033*   	dl 8, 8, 64007, fn_Lat38_VGA8_8x8
       00 00 07 FA 
       00 AB 24 04 
04238C 08 00 00 08 0034*   	dl 8, 8, 64008, fn_Lat7_VGA8_8x8
       00 00 08 FA 
       00 CA 24 04 
042398 08 00 00 08 0035*   	dl 8, 8, 64009, fn_planetary_contact_8x8
       00 00 09 FA 
       00 E8 24 04 
0423A4 08 00 00 0C 0036*   	dl 8, 12, 64010, fn_Squarewave_Bold_8x12
       00 00 0A FA 
       00 0E 25 04 
0423B0 08 00 00 08 0037*   	dl 8, 8, 64011, fn_super_mario_bros_2_8x8
       00 00 0B FA 
       00 33 25 04 
0423BC 06 00 00 06 0038*   	dl 6, 6, 64012, fn_wendy_neue_6x6
       00 00 0C FA 
       00 5A 25 04 
0423C8             0039*   
0423C8             0040*   ; files_list: ; filename:
0423C8 2F 6D 6F 73 0041*   fn_amiga_forever_8x8: db "/mos/fonts/amiga_forever_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 61 
       6D 69 67 61 
       5F 66 6F 72 
       65 76 65 72 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
0423EA 2F 6D 6F 73 0042*   fn_computer_pixel_7_8x12: db "/mos/fonts/computer_pixel_7_8x12.font",0
       2F 66 6F 6E 
       74 73 2F 63 
       6F 6D 70 75 
       74 65 72 5F 
       70 69 78 65 
       6C 5F 37 5F 
       38 78 31 32 
       2E 66 6F 6E 
       74 00       
042410 2F 6D 6F 73 0043*   fn_computer_pixel_7_8x16: db "/mos/fonts/computer_pixel_7_8x16.font",0
       2F 66 6F 6E 
       74 73 2F 63 
       6F 6D 70 75 
       74 65 72 5F 
       70 69 78 65 
       6C 5F 37 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
042436 2F 6D 6F 73 0044*   fn_dopecre_8x8: db "/mos/fonts/dopecre_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 64 
       6F 70 65 63 
       72 65 5F 38 
       78 38 2E 66 
       6F 6E 74 00 
042452 2F 6D 6F 73 0045*   fn_gamer_2_8x8: db "/mos/fonts/gamer_2_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 67 
       61 6D 65 72 
       5F 32 5F 38 
       78 38 2E 66 
       6F 6E 74 00 
04246E 2F 6D 6F 73 0046*   fn_Lat15_VGA8_8x8: db "/mos/fonts/Lat15-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 31 35 
       2D 56 47 41 
       38 5F 38 78 
       38 2E 66 6F 
       6E 74 00    
04248D 2F 6D 6F 73 0047*   fn_Lat2_VGA8_8x8: db "/mos/fonts/Lat2-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 32 2D 
       56 47 41 38 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
0424AB 2F 6D 6F 73 0048*   fn_Lat38_VGA8_8x8: db "/mos/fonts/Lat38-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 33 38 
       2D 56 47 41 
       38 5F 38 78 
       38 2E 66 6F 
       6E 74 00    
0424CA 2F 6D 6F 73 0049*   fn_Lat7_VGA8_8x8: db "/mos/fonts/Lat7-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 37 2D 
       56 47 41 38 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
0424E8 2F 6D 6F 73 0050*   fn_planetary_contact_8x8: db "/mos/fonts/planetary_contact_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 70 
       6C 61 6E 65 
       74 61 72 79 
       5F 63 6F 6E 
       74 61 63 74 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
04250E 2F 6D 6F 73 0051*   fn_Squarewave_Bold_8x12: db "/mos/fonts/Squarewave_Bold_8x12.font",0
       2F 66 6F 6E 
       74 73 2F 53 
       71 75 61 72 
       65 77 61 76 
       65 5F 42 6F 
       6C 64 5F 38 
       78 31 32 2E 
       66 6F 6E 74 
       00          
042533 2F 6D 6F 73 0052*   fn_super_mario_bros_2_8x8: db "/mos/fonts/super_mario_bros_2_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 73 
       75 70 65 72 
       5F 6D 61 72 
       69 6F 5F 62 
       72 6F 73 5F 
       32 5F 38 78 
       38 2E 66 6F 
       6E 74 00    
04255A 2F 6D 6F 73 0053*   fn_wendy_neue_6x6: db "/mos/fonts/wendy_neue_6x6.font",0
       2F 66 6F 6E 
       74 73 2F 77 
       65 6E 64 79 
       5F 6E 65 75 
       65 5F 36 78 
       36 2E 66 6F 
       6E 74 00    
042579             0054        include "images_bg.inc"
042579             0001*   ; Generated by make_images.py
042579             0002*   
042579             0003*   bg_num_images: equ 4
042579             0004*   
042579             0005*   ; buffer_ids:
042579             0006*   BUF_BG_STARS_0: equ 1024
042579             0007*   BUF_BG_STARS_3: equ 1025
042579             0008*   BUF_BG_STARS_4: equ 1026
042579             0009*   BUF_BG_STARS_6: equ 1027
042579             0010*   
042579             0011*   bg_image_list: ; type; width; height; size; filename; bufferId:
042579 01 00 00 00 0012*   	dl 1, 256, 256, 65536, fn_bg_stars_0, 1024
       01 00 00 01 
       00 00 00 01 
       C1 25 04 00 
       04 00       
04258B 01 00 00 00 0013*   	dl 1, 256, 256, 65536, fn_bg_stars_3, 1025
       01 00 00 01 
       00 00 00 01 
       D5 25 04 01 
       04 00       
04259D 01 00 00 00 0014*   	dl 1, 256, 256, 65536, fn_bg_stars_4, 1026
       01 00 00 01 
       00 00 00 01 
       E9 25 04 02 
       04 00       
0425AF 01 00 00 00 0015*   	dl 1, 256, 256, 65536, fn_bg_stars_6, 1027
       01 00 00 01 
       00 00 00 01 
       FD 25 04 03 
       04 00       
0425C1             0016*   
0425C1             0017*   ; files_list: ; filename:
0425C1 62 67 2F 62 0018*   fn_bg_stars_0: db "bg/bg_stars_0.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       30 2E 72 67 
       62 61 32 00 
0425D5 62 67 2F 62 0019*   fn_bg_stars_3: db "bg/bg_stars_3.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       33 2E 72 67 
       62 61 32 00 
0425E9 62 67 2F 62 0020*   fn_bg_stars_4: db "bg/bg_stars_4.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       34 2E 72 67 
       62 61 32 00 
0425FD 62 67 2F 62 0021*   fn_bg_stars_6: db "bg/bg_stars_6.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       36 2E 72 67 
       62 61 32 00 
042611             0055        include "images_tiles_dg.inc"
042611             0001*   ; Generated by tiles_dg.py
042611             0002*   
042611             0003*   tiles_dg_num_images: equ 187
042611             0004*   
042611             0005*   ; bufferIds:
042611             0006*   
042611             0007*   
042611             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
042611 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       37 33 04 00 
       02 00       
042623 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       4C 33 04 01 
       02 00       
042635 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       61 33 04 02 
       02 00       
042647 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       76 33 04 03 
       02 00       
042659 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       8B 33 04 04 
       02 00       
04266B 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       A0 33 04 05 
       02 00       
04267D 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       B5 33 04 06 
       02 00       
04268F 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       CA 33 04 07 
       02 00       
0426A1 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       DF 33 04 08 
       02 00       
0426B3 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       F4 33 04 09 
       02 00       
0426C5 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       09 34 04 0A 
       02 00       
0426D7 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       1E 34 04 0B 
       02 00       
0426E9 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       33 34 04 10 
       02 00       
0426FB 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       48 34 04 21 
       02 00       
04270D 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       5D 34 04 22 
       02 00       
04271F 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       72 34 04 23 
       02 00       
042731 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       87 34 04 24 
       02 00       
042743 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       9C 34 04 25 
       02 00       
042755 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       B1 34 04 26 
       02 00       
042767 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       C6 34 04 27 
       02 00       
042779 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       DB 34 04 28 
       02 00       
04278B 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_045, 557
       00 00 10 00 
       00 00 01 00 
       F0 34 04 2D 
       02 00       
04279D 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_046, 558
       00 00 10 00 
       00 00 01 00 
       05 35 04 2E 
       02 00       
0427AF 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_047, 559
       00 00 10 00 
       00 00 01 00 
       1A 35 04 2F 
       02 00       
0427C1 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_048, 560
       00 00 10 00 
       00 00 01 00 
       2F 35 04 30 
       02 00       
0427D3 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       44 35 04 31 
       02 00       
0427E5 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       59 35 04 32 
       02 00       
0427F7 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       6E 35 04 33 
       02 00       
042809 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       83 35 04 34 
       02 00       
04281B 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       98 35 04 35 
       02 00       
04282D 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       AD 35 04 36 
       02 00       
04283F 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       C2 35 04 37 
       02 00       
042851 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       D7 35 04 38 
       02 00       
042863 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       EC 35 04 39 
       02 00       
042875 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       01 36 04 3A 
       02 00       
042887 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       16 36 04 3B 
       02 00       
042899 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_061, 573
       00 00 10 00 
       00 00 01 00 
       2B 36 04 3D 
       02 00       
0428AB 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_062, 574
       00 00 10 00 
       00 00 01 00 
       40 36 04 3E 
       02 00       
0428BD 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_063, 575
       00 00 10 00 
       00 00 01 00 
       55 36 04 3F 
       02 00       
0428CF 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_064, 576
       00 00 10 00 
       00 00 01 00 
       6A 36 04 40 
       02 00       
0428E1 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       7F 36 04 41 
       02 00       
0428F3 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       94 36 04 42 
       02 00       
042905 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       A9 36 04 43 
       02 00       
042917 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       BE 36 04 44 
       02 00       
042929 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       D3 36 04 45 
       02 00       
04293B 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       E8 36 04 46 
       02 00       
04294D 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       FD 36 04 47 
       02 00       
04295F 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       12 37 04 48 
       02 00       
042971 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       27 37 04 49 
       02 00       
042983 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       3C 37 04 4A 
       02 00       
042995 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       51 37 04 4B 
       02 00       
0429A7 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_076, 588
       00 00 10 00 
       00 00 01 00 
       66 37 04 4C 
       02 00       
0429B9 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_077, 589
       00 00 10 00 
       00 00 01 00 
       7B 37 04 4D 
       02 00       
0429CB 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       90 37 04 51 
       02 00       
0429DD 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       A5 37 04 52 
       02 00       
0429EF 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       BA 37 04 53 
       02 00       
042A01 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       CF 37 04 54 
       02 00       
042A13 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       E4 37 04 55 
       02 00       
042A25 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       F9 37 04 56 
       02 00       
042A37 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       0E 38 04 57 
       02 00       
042A49 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       23 38 04 58 
       02 00       
042A5B 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       38 38 04 59 
       02 00       
042A6D 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       4D 38 04 5A 
       02 00       
042A7F 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       62 38 04 5B 
       02 00       
042A91 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_092, 604
       00 00 10 00 
       00 00 01 00 
       77 38 04 5C 
       02 00       
042AA3 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_093, 605
       00 00 10 00 
       00 00 01 00 
       8C 38 04 5D 
       02 00       
042AB5 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       A1 38 04 61 
       02 00       
042AC7 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       B6 38 04 62 
       02 00       
042AD9 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       CB 38 04 63 
       02 00       
042AEB 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       E0 38 04 64 
       02 00       
042AFD 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       F5 38 04 65 
       02 00       
042B0F 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       0A 39 04 66 
       02 00       
042B21 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       1F 39 04 67 
       02 00       
042B33 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       34 39 04 68 
       02 00       
042B45 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       49 39 04 69 
       02 00       
042B57 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       5E 39 04 6A 
       02 00       
042B69 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       73 39 04 6B 
       02 00       
042B7B 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       88 39 04 6C 
       02 00       
042B8D 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       9D 39 04 71 
       02 00       
042B9F 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       B2 39 04 72 
       02 00       
042BB1 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       C7 39 04 73 
       02 00       
042BC3 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       DC 39 04 74 
       02 00       
042BD5 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       F1 39 04 75 
       02 00       
042BE7 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       06 3A 04 76 
       02 00       
042BF9 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       1B 3A 04 77 
       02 00       
042C0B 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       30 3A 04 78 
       02 00       
042C1D 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       45 3A 04 79 
       02 00       
042C2F 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       5A 3A 04 7A 
       02 00       
042C41 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       6F 3A 04 7B 
       02 00       
042C53 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       84 3A 04 81 
       02 00       
042C65 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       99 3A 04 82 
       02 00       
042C77 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       AE 3A 04 83 
       02 00       
042C89 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       C3 3A 04 84 
       02 00       
042C9B 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       D8 3A 04 85 
       02 00       
042CAD 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       ED 3A 04 86 
       02 00       
042CBF 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       02 3B 04 87 
       02 00       
042CD1 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       17 3B 04 88 
       02 00       
042CE3 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       2C 3B 04 89 
       02 00       
042CF5 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       41 3B 04 8A 
       02 00       
042D07 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       56 3B 04 8B 
       02 00       
042D19 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       6B 3B 04 8C 
       02 00       
042D2B 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       80 3B 04 91 
       02 00       
042D3D 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       95 3B 04 92 
       02 00       
042D4F 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       AA 3B 04 93 
       02 00       
042D61 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       BF 3B 04 94 
       02 00       
042D73 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       D4 3B 04 95 
       02 00       
042D85 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       E9 3B 04 96 
       02 00       
042D97 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       FE 3B 04 97 
       02 00       
042DA9 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       13 3C 04 98 
       02 00       
042DBB 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       28 3C 04 99 
       02 00       
042DCD 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       3D 3C 04 9A 
       02 00       
042DDF 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       52 3C 04 9B 
       02 00       
042DF1 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       67 3C 04 9C 
       02 00       
042E03 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       7C 3C 04 A1 
       02 00       
042E15 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       91 3C 04 A2 
       02 00       
042E27 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       A6 3C 04 A3 
       02 00       
042E39 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       BB 3C 04 A4 
       02 00       
042E4B 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       D0 3C 04 A5 
       02 00       
042E5D 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       E5 3C 04 A6 
       02 00       
042E6F 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       FA 3C 04 A7 
       02 00       
042E81 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       0F 3D 04 A8 
       02 00       
042E93 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       24 3D 04 A9 
       02 00       
042EA5 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       39 3D 04 AA 
       02 00       
042EB7 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       4E 3D 04 AB 
       02 00       
042EC9 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       63 3D 04 AC 
       02 00       
042EDB 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_174, 686
       00 00 10 00 
       00 00 01 00 
       78 3D 04 AE 
       02 00       
042EED 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_175, 687
       00 00 10 00 
       00 00 01 00 
       8D 3D 04 AF 
       02 00       
042EFF 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_176, 688
       00 00 10 00 
       00 00 01 00 
       A2 3D 04 B0 
       02 00       
042F11 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       B7 3D 04 B1 
       02 00       
042F23 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       CC 3D 04 B2 
       02 00       
042F35 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       E1 3D 04 B3 
       02 00       
042F47 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       F6 3D 04 B4 
       02 00       
042F59 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       0B 3E 04 B5 
       02 00       
042F6B 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       20 3E 04 B6 
       02 00       
042F7D 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       35 3E 04 B7 
       02 00       
042F8F 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       4A 3E 04 B8 
       02 00       
042FA1 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       5F 3E 04 B9 
       02 00       
042FB3 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       74 3E 04 BA 
       02 00       
042FC5 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       89 3E 04 BB 
       02 00       
042FD7 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       9E 3E 04 BC 
       02 00       
042FE9 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_190, 702
       00 00 10 00 
       00 00 01 00 
       B3 3E 04 BE 
       02 00       
042FFB 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_191, 703
       00 00 10 00 
       00 00 01 00 
       C8 3E 04 BF 
       02 00       
04300D 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_192, 704
       00 00 10 00 
       00 00 01 00 
       DD 3E 04 C0 
       02 00       
04301F 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       F2 3E 04 C1 
       02 00       
043031 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       07 3F 04 C2 
       02 00       
043043 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       1C 3F 04 C3 
       02 00       
043055 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       31 3F 04 C4 
       02 00       
043067 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       46 3F 04 C5 
       02 00       
043079 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       5B 3F 04 C6 
       02 00       
04308B 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       70 3F 04 C7 
       02 00       
04309D 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       85 3F 04 C8 
       02 00       
0430AF 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       9A 3F 04 C9 
       02 00       
0430C1 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       AF 3F 04 CA 
       02 00       
0430D3 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       C4 3F 04 CB 
       02 00       
0430E5 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       D9 3F 04 CC 
       02 00       
0430F7 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_206, 718
       00 00 10 00 
       00 00 01 00 
       EE 3F 04 CE 
       02 00       
043109 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_207, 719
       00 00 10 00 
       00 00 01 00 
       03 40 04 CF 
       02 00       
04311B 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_208, 720
       00 00 10 00 
       00 00 01 00 
       18 40 04 D0 
       02 00       
04312D 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       2D 40 04 D1 
       02 00       
04313F 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       42 40 04 D2 
       02 00       
043151 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       57 40 04 D3 
       02 00       
043163 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       6C 40 04 D4 
       02 00       
043175 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       81 40 04 D5 
       02 00       
043187 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       96 40 04 D6 
       02 00       
043199 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       AB 40 04 D7 
       02 00       
0431AB 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       C0 40 04 D8 
       02 00       
0431BD 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       D5 40 04 D9 
       02 00       
0431CF 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       EA 40 04 DA 
       02 00       
0431E1 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       FF 40 04 DB 
       02 00       
0431F3 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       14 41 04 DC 
       02 00       
043205 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       29 41 04 E1 
       02 00       
043217 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       3E 41 04 E2 
       02 00       
043229 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       53 41 04 E3 
       02 00       
04323B 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       68 41 04 E4 
       02 00       
04324D 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       7D 41 04 E5 
       02 00       
04325F 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       92 41 04 E6 
       02 00       
043271 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       A7 41 04 E7 
       02 00       
043283 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       BC 41 04 E8 
       02 00       
043295 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       D1 41 04 E9 
       02 00       
0432A7 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       E6 41 04 EA 
       02 00       
0432B9 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       FB 41 04 EB 
       02 00       
0432CB 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       10 42 04 EC 
       02 00       
0432DD 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       25 42 04 F1 
       02 00       
0432EF 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       3A 42 04 F2 
       02 00       
043301 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       4F 42 04 F5 
       02 00       
043313 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       64 42 04 F6 
       02 00       
043325 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       79 42 04 F8 
       02 00       
043337             0196*   
043337             0197*   tiles_dg_files_list: ; filename:
043337 74 69 6C 65 0198*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
04334C 74 69 6C 65 0199*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
043361 74 69 6C 65 0200*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
043376 74 69 6C 65 0201*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
04338B 74 69 6C 65 0202*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
0433A0 74 69 6C 65 0203*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
0433B5 74 69 6C 65 0204*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
0433CA 74 69 6C 65 0205*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
0433DF 74 69 6C 65 0206*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0433F4 74 69 6C 65 0207*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
043409 74 69 6C 65 0208*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
04341E 74 69 6C 65 0209*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
043433 74 69 6C 65 0210*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
043448 74 69 6C 65 0211*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
04345D 74 69 6C 65 0212*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
043472 74 69 6C 65 0213*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
043487 74 69 6C 65 0214*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
04349C 74 69 6C 65 0215*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
0434B1 74 69 6C 65 0216*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
0434C6 74 69 6C 65 0217*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
0434DB 74 69 6C 65 0218*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0434F0 74 69 6C 65 0219*   fn_dg_045: db "tiles/dg/0/045.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 35 2E 72 
       67 62 61 32 
       00          
043505 74 69 6C 65 0220*   fn_dg_046: db "tiles/dg/0/046.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 36 2E 72 
       67 62 61 32 
       00          
04351A 74 69 6C 65 0221*   fn_dg_047: db "tiles/dg/0/047.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 37 2E 72 
       67 62 61 32 
       00          
04352F 74 69 6C 65 0222*   fn_dg_048: db "tiles/dg/0/048.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
043544 74 69 6C 65 0223*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
043559 74 69 6C 65 0224*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
04356E 74 69 6C 65 0225*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
043583 74 69 6C 65 0226*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
043598 74 69 6C 65 0227*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
0435AD 74 69 6C 65 0228*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
0435C2 74 69 6C 65 0229*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
0435D7 74 69 6C 65 0230*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0435EC 74 69 6C 65 0231*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
043601 74 69 6C 65 0232*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043616 74 69 6C 65 0233*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
04362B 74 69 6C 65 0234*   fn_dg_061: db "tiles/dg/0/061.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 31 2E 72 
       67 62 61 32 
       00          
043640 74 69 6C 65 0235*   fn_dg_062: db "tiles/dg/0/062.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 32 2E 72 
       67 62 61 32 
       00          
043655 74 69 6C 65 0236*   fn_dg_063: db "tiles/dg/0/063.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 33 2E 72 
       67 62 61 32 
       00          
04366A 74 69 6C 65 0237*   fn_dg_064: db "tiles/dg/0/064.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
04367F 74 69 6C 65 0238*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
043694 74 69 6C 65 0239*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
0436A9 74 69 6C 65 0240*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
0436BE 74 69 6C 65 0241*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
0436D3 74 69 6C 65 0242*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
0436E8 74 69 6C 65 0243*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
0436FD 74 69 6C 65 0244*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
043712 74 69 6C 65 0245*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
043727 74 69 6C 65 0246*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
04373C 74 69 6C 65 0247*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
043751 74 69 6C 65 0248*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
043766 74 69 6C 65 0249*   fn_dg_076: db "tiles/dg/0/076.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 36 2E 72 
       67 62 61 32 
       00          
04377B 74 69 6C 65 0250*   fn_dg_077: db "tiles/dg/0/077.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 37 2E 72 
       67 62 61 32 
       00          
043790 74 69 6C 65 0251*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
0437A5 74 69 6C 65 0252*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
0437BA 74 69 6C 65 0253*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
0437CF 74 69 6C 65 0254*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
0437E4 74 69 6C 65 0255*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
0437F9 74 69 6C 65 0256*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
04380E 74 69 6C 65 0257*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
043823 74 69 6C 65 0258*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
043838 74 69 6C 65 0259*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
04384D 74 69 6C 65 0260*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
043862 74 69 6C 65 0261*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
043877 74 69 6C 65 0262*   fn_dg_092: db "tiles/dg/0/092.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 32 2E 72 
       67 62 61 32 
       00          
04388C 74 69 6C 65 0263*   fn_dg_093: db "tiles/dg/0/093.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 33 2E 72 
       67 62 61 32 
       00          
0438A1 74 69 6C 65 0264*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
0438B6 74 69 6C 65 0265*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
0438CB 74 69 6C 65 0266*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
0438E0 74 69 6C 65 0267*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
0438F5 74 69 6C 65 0268*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
04390A 74 69 6C 65 0269*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
04391F 74 69 6C 65 0270*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
043934 74 69 6C 65 0271*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
043949 74 69 6C 65 0272*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
04395E 74 69 6C 65 0273*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
043973 74 69 6C 65 0274*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
043988 74 69 6C 65 0275*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
04399D 74 69 6C 65 0276*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
0439B2 74 69 6C 65 0277*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
0439C7 74 69 6C 65 0278*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
0439DC 74 69 6C 65 0279*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
0439F1 74 69 6C 65 0280*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
043A06 74 69 6C 65 0281*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
043A1B 74 69 6C 65 0282*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
043A30 74 69 6C 65 0283*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
043A45 74 69 6C 65 0284*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
043A5A 74 69 6C 65 0285*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
043A6F 74 69 6C 65 0286*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
043A84 74 69 6C 65 0287*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
043A99 74 69 6C 65 0288*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
043AAE 74 69 6C 65 0289*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
043AC3 74 69 6C 65 0290*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
043AD8 74 69 6C 65 0291*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
043AED 74 69 6C 65 0292*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
043B02 74 69 6C 65 0293*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
043B17 74 69 6C 65 0294*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
043B2C 74 69 6C 65 0295*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
043B41 74 69 6C 65 0296*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
043B56 74 69 6C 65 0297*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
043B6B 74 69 6C 65 0298*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
043B80 74 69 6C 65 0299*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
043B95 74 69 6C 65 0300*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
043BAA 74 69 6C 65 0301*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
043BBF 74 69 6C 65 0302*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
043BD4 74 69 6C 65 0303*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
043BE9 74 69 6C 65 0304*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
043BFE 74 69 6C 65 0305*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
043C13 74 69 6C 65 0306*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
043C28 74 69 6C 65 0307*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
043C3D 74 69 6C 65 0308*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
043C52 74 69 6C 65 0309*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
043C67 74 69 6C 65 0310*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
043C7C 74 69 6C 65 0311*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
043C91 74 69 6C 65 0312*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
043CA6 74 69 6C 65 0313*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
043CBB 74 69 6C 65 0314*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
043CD0 74 69 6C 65 0315*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
043CE5 74 69 6C 65 0316*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
043CFA 74 69 6C 65 0317*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
043D0F 74 69 6C 65 0318*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
043D24 74 69 6C 65 0319*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
043D39 74 69 6C 65 0320*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
043D4E 74 69 6C 65 0321*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
043D63 74 69 6C 65 0322*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
043D78 74 69 6C 65 0323*   fn_dg_174: db "tiles/dg/0/174.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 34 2E 72 
       67 62 61 32 
       00          
043D8D 74 69 6C 65 0324*   fn_dg_175: db "tiles/dg/0/175.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 35 2E 72 
       67 62 61 32 
       00          
043DA2 74 69 6C 65 0325*   fn_dg_176: db "tiles/dg/0/176.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
043DB7 74 69 6C 65 0326*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
043DCC 74 69 6C 65 0327*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
043DE1 74 69 6C 65 0328*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
043DF6 74 69 6C 65 0329*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
043E0B 74 69 6C 65 0330*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
043E20 74 69 6C 65 0331*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
043E35 74 69 6C 65 0332*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
043E4A 74 69 6C 65 0333*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
043E5F 74 69 6C 65 0334*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
043E74 74 69 6C 65 0335*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
043E89 74 69 6C 65 0336*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
043E9E 74 69 6C 65 0337*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
043EB3 74 69 6C 65 0338*   fn_dg_190: db "tiles/dg/0/190.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 30 2E 72 
       67 62 61 32 
       00          
043EC8 74 69 6C 65 0339*   fn_dg_191: db "tiles/dg/0/191.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 31 2E 72 
       67 62 61 32 
       00          
043EDD 74 69 6C 65 0340*   fn_dg_192: db "tiles/dg/0/192.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
043EF2 74 69 6C 65 0341*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
043F07 74 69 6C 65 0342*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
043F1C 74 69 6C 65 0343*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
043F31 74 69 6C 65 0344*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
043F46 74 69 6C 65 0345*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
043F5B 74 69 6C 65 0346*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
043F70 74 69 6C 65 0347*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
043F85 74 69 6C 65 0348*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
043F9A 74 69 6C 65 0349*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
043FAF 74 69 6C 65 0350*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
043FC4 74 69 6C 65 0351*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
043FD9 74 69 6C 65 0352*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
043FEE 74 69 6C 65 0353*   fn_dg_206: db "tiles/dg/0/206.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 36 2E 72 
       67 62 61 32 
       00          
044003 74 69 6C 65 0354*   fn_dg_207: db "tiles/dg/0/207.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 37 2E 72 
       67 62 61 32 
       00          
044018 74 69 6C 65 0355*   fn_dg_208: db "tiles/dg/0/208.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
04402D 74 69 6C 65 0356*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
044042 74 69 6C 65 0357*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
044057 74 69 6C 65 0358*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
04406C 74 69 6C 65 0359*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
044081 74 69 6C 65 0360*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
044096 74 69 6C 65 0361*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
0440AB 74 69 6C 65 0362*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
0440C0 74 69 6C 65 0363*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0440D5 74 69 6C 65 0364*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
0440EA 74 69 6C 65 0365*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
0440FF 74 69 6C 65 0366*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
044114 74 69 6C 65 0367*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
044129 74 69 6C 65 0368*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
04413E 74 69 6C 65 0369*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
044153 74 69 6C 65 0370*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
044168 74 69 6C 65 0371*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
04417D 74 69 6C 65 0372*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
044192 74 69 6C 65 0373*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
0441A7 74 69 6C 65 0374*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
0441BC 74 69 6C 65 0375*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0441D1 74 69 6C 65 0376*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
0441E6 74 69 6C 65 0377*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
0441FB 74 69 6C 65 0378*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
044210 74 69 6C 65 0379*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
044225 74 69 6C 65 0380*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
04423A 74 69 6C 65 0381*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
04424F 74 69 6C 65 0382*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
044264 74 69 6C 65 0383*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
044279 74 69 6C 65 0384*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
04428E             0056        include "images_sprites.inc"
04428E             0001*   ; Generated by make_images.py
04428E             0002*   
04428E             0003*   sprites_num_images: equ 163
04428E             0004*   
04428E             0005*   ; buffer_ids:
04428E             0006*   BUF_CRATER: equ 256
04428E             0007*   BUF_CRATER_0.: equ 257
04428E             0008*   BUF_CRATER_0: equ 258
04428E             0009*   BUF_CRATER_1.: equ 259
04428E             0010*   BUF_CRATER_1: equ 260
04428E             0011*   BUF_CRATER_2: equ 261
04428E             0012*   BUF_CRATER_3: equ 262
04428E             0013*   BUF_CRATER_A: equ 263
04428E             0014*   BUF_CRATER_B: equ 264
04428E             0015*   BUF_CRATER_C: equ 265
04428E             0016*   BUF_CRATER_D: equ 266
04428E             0017*   BUF_CRATER_E: equ 267
04428E             0018*   BUF_EXPLOSION_A: equ 268
04428E             0019*   BUF_EXPLOSION_B: equ 269
04428E             0020*   BUF_EXPLOSION_C: equ 270
04428E             0021*   BUF_EXPLOSION_D: equ 271
04428E             0022*   BUF_EXPLOSION_E: equ 272
04428E             0023*   BUF_FIREBALL_2_000: equ 273
04428E             0024*   BUF_FIREBALL_2_008: equ 274
04428E             0025*   BUF_FIREBALL_2_016: equ 275
04428E             0026*   BUF_FIREBALL_2_024: equ 276
04428E             0027*   BUF_FIREBALL_2_032: equ 277
04428E             0028*   BUF_FIREBALL_2_040: equ 278
04428E             0029*   BUF_FIREBALL_2_048: equ 279
04428E             0030*   BUF_FIREBALL_2_056: equ 280
04428E             0031*   BUF_FIREBALL_2_064: equ 281
04428E             0032*   BUF_FIREBALL_2_072: equ 282
04428E             0033*   BUF_FIREBALL_2_080: equ 283
04428E             0034*   BUF_FIREBALL_2_088: equ 284
04428E             0035*   BUF_FIREBALL_2_096: equ 285
04428E             0036*   BUF_FIREBALL_2_104: equ 286
04428E             0037*   BUF_FIREBALL_2_112: equ 287
04428E             0038*   BUF_FIREBALL_2_120: equ 288
04428E             0039*   BUF_FIREBALL_2_128: equ 289
04428E             0040*   BUF_FIREBALL_2_136: equ 290
04428E             0041*   BUF_FIREBALL_2_144: equ 291
04428E             0042*   BUF_FIREBALL_2_152: equ 292
04428E             0043*   BUF_FIREBALL_2_160: equ 293
04428E             0044*   BUF_FIREBALL_2_168: equ 294
04428E             0045*   BUF_FIREBALL_2_176: equ 295
04428E             0046*   BUF_FIREBALL_2_184: equ 296
04428E             0047*   BUF_FIREBALL_2_192: equ 297
04428E             0048*   BUF_FIREBALL_2_200: equ 298
04428E             0049*   BUF_FIREBALL_2_208: equ 299
04428E             0050*   BUF_FIREBALL_2_216: equ 300
04428E             0051*   BUF_FIREBALL_2_224: equ 301
04428E             0052*   BUF_FIREBALL_2_232: equ 302
04428E             0053*   BUF_FIREBALL_2_240: equ 303
04428E             0054*   BUF_FIREBALL_2_248: equ 304
04428E             0055*   BUF_FIREBALL_3_000: equ 305
04428E             0056*   BUF_FIREBALL_3_008: equ 306
04428E             0057*   BUF_FIREBALL_3_016: equ 307
04428E             0058*   BUF_FIREBALL_3_024: equ 308
04428E             0059*   BUF_FIREBALL_3_032: equ 309
04428E             0060*   BUF_FIREBALL_3_040: equ 310
04428E             0061*   BUF_FIREBALL_3_048: equ 311
04428E             0062*   BUF_FIREBALL_3_056: equ 312
04428E             0063*   BUF_FIREBALL_3_064: equ 313
04428E             0064*   BUF_FIREBALL_3_072: equ 314
04428E             0065*   BUF_FIREBALL_3_080: equ 315
04428E             0066*   BUF_FIREBALL_3_088: equ 316
04428E             0067*   BUF_FIREBALL_3_096: equ 317
04428E             0068*   BUF_FIREBALL_3_104: equ 318
04428E             0069*   BUF_FIREBALL_3_112: equ 319
04428E             0070*   BUF_FIREBALL_3_120: equ 320
04428E             0071*   BUF_FIREBALL_3_128: equ 321
04428E             0072*   BUF_FIREBALL_3_136: equ 322
04428E             0073*   BUF_FIREBALL_3_144: equ 323
04428E             0074*   BUF_FIREBALL_3_152: equ 324
04428E             0075*   BUF_FIREBALL_3_160: equ 325
04428E             0076*   BUF_FIREBALL_3_168: equ 326
04428E             0077*   BUF_FIREBALL_3_176: equ 327
04428E             0078*   BUF_FIREBALL_3_184: equ 328
04428E             0079*   BUF_FIREBALL_3_192: equ 329
04428E             0080*   BUF_FIREBALL_3_200: equ 330
04428E             0081*   BUF_FIREBALL_3_208: equ 331
04428E             0082*   BUF_FIREBALL_3_216: equ 332
04428E             0083*   BUF_FIREBALL_3_224: equ 333
04428E             0084*   BUF_FIREBALL_3_232: equ 334
04428E             0085*   BUF_FIREBALL_3_240: equ 335
04428E             0086*   BUF_FIREBALL_3_248: equ 336
04428E             0087*   BUF_LASER_A: equ 337
04428E             0088*   BUF_LASER_B: equ 338
04428E             0089*   BUF_LIGHTNING_H_0: equ 339
04428E             0090*   BUF_LIGHTNING_H_1: equ 340
04428E             0091*   BUF_PAD: equ 341
04428E             0092*   BUF_SEEKER_000: equ 342
04428E             0093*   BUF_SEEKER_008: equ 343
04428E             0094*   BUF_SEEKER_016: equ 344
04428E             0095*   BUF_SEEKER_024: equ 345
04428E             0096*   BUF_SEEKER_032: equ 346
04428E             0097*   BUF_SEEKER_040: equ 347
04428E             0098*   BUF_SEEKER_048: equ 348
04428E             0099*   BUF_SEEKER_056: equ 349
04428E             0100*   BUF_SEEKER_064: equ 350
04428E             0101*   BUF_SEEKER_072: equ 351
04428E             0102*   BUF_SEEKER_080: equ 352
04428E             0103*   BUF_SEEKER_088: equ 353
04428E             0104*   BUF_SEEKER_096: equ 354
04428E             0105*   BUF_SEEKER_104: equ 355
04428E             0106*   BUF_SEEKER_112: equ 356
04428E             0107*   BUF_SEEKER_120: equ 357
04428E             0108*   BUF_SEEKER_128: equ 358
04428E             0109*   BUF_SEEKER_136: equ 359
04428E             0110*   BUF_SEEKER_144: equ 360
04428E             0111*   BUF_SEEKER_152: equ 361
04428E             0112*   BUF_SEEKER_160: equ 362
04428E             0113*   BUF_SEEKER_168: equ 363
04428E             0114*   BUF_SEEKER_176: equ 364
04428E             0115*   BUF_SEEKER_184: equ 365
04428E             0116*   BUF_SEEKER_192: equ 366
04428E             0117*   BUF_SEEKER_200: equ 367
04428E             0118*   BUF_SEEKER_208: equ 368
04428E             0119*   BUF_SEEKER_216: equ 369
04428E             0120*   BUF_SEEKER_224: equ 370
04428E             0121*   BUF_SEEKER_232: equ 371
04428E             0122*   BUF_SEEKER_240: equ 372
04428E             0123*   BUF_SEEKER_248: equ 373
04428E             0124*   BUF_SHIP_0L: equ 374
04428E             0125*   BUF_SHIP_1C: equ 375
04428E             0126*   BUF_SHIP_2R: equ 376
04428E             0127*   BUF_TEST_STRIPES: equ 377
04428E             0128*   BUF_TILE_BLANK: equ 378
04428E             0129*   BUF_TILE_PAD_0: equ 379
04428E             0130*   BUF_TILE_PAD_1: equ 380
04428E             0131*   BUF_TILE_PAD_2: equ 381
04428E             0132*   BUF_TILE_PAD_3: equ 382
04428E             0133*   BUF_TILE_PAD_4: equ 383
04428E             0134*   BUF_TILE_PAD_5: equ 384
04428E             0135*   BUF_TILE_PAD_6: equ 385
04428E             0136*   BUF_TILE_PAD_7: equ 386
04428E             0137*   BUF_TURRET_000: equ 387
04428E             0138*   BUF_TURRET_008: equ 388
04428E             0139*   BUF_TURRET_016: equ 389
04428E             0140*   BUF_TURRET_024: equ 390
04428E             0141*   BUF_TURRET_032: equ 391
04428E             0142*   BUF_TURRET_040: equ 392
04428E             0143*   BUF_TURRET_048: equ 393
04428E             0144*   BUF_TURRET_056: equ 394
04428E             0145*   BUF_TURRET_064: equ 395
04428E             0146*   BUF_TURRET_072: equ 396
04428E             0147*   BUF_TURRET_080: equ 397
04428E             0148*   BUF_TURRET_088: equ 398
04428E             0149*   BUF_TURRET_096: equ 399
04428E             0150*   BUF_TURRET_104: equ 400
04428E             0151*   BUF_TURRET_112: equ 401
04428E             0152*   BUF_TURRET_120: equ 402
04428E             0153*   BUF_TURRET_128: equ 403
04428E             0154*   BUF_TURRET_136: equ 404
04428E             0155*   BUF_TURRET_144: equ 405
04428E             0156*   BUF_TURRET_152: equ 406
04428E             0157*   BUF_TURRET_160: equ 407
04428E             0158*   BUF_TURRET_168: equ 408
04428E             0159*   BUF_TURRET_176: equ 409
04428E             0160*   BUF_TURRET_184: equ 410
04428E             0161*   BUF_TURRET_192: equ 411
04428E             0162*   BUF_TURRET_200: equ 412
04428E             0163*   BUF_TURRET_208: equ 413
04428E             0164*   BUF_TURRET_216: equ 414
04428E             0165*   BUF_TURRET_224: equ 415
04428E             0166*   BUF_TURRET_232: equ 416
04428E             0167*   BUF_TURRET_240: equ 417
04428E             0168*   BUF_TURRET_248: equ 418
04428E             0169*   
04428E             0170*   sprites_image_list: ; type; width; height; size; filename; bufferId:
04428E 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       04 4E 04 00 
       01 00       
0442A0 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_crater_0., 257
       00 00 10 00 
       00 00 01 00 
       19 4E 04 01 
       01 00       
0442B2 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_crater_0, 258
       00 00 10 00 
       00 00 01 00 
       31 4E 04 02 
       01 00       
0442C4 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_crater_1., 259
       00 00 10 00 
       00 00 01 00 
       48 4E 04 03 
       01 00       
0442D6 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_crater_1, 260
       00 00 10 00 
       00 00 01 00 
       60 4E 04 04 
       01 00       
0442E8 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_crater_2, 261
       00 00 10 00 
       00 00 01 00 
       77 4E 04 05 
       01 00       
0442FA 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_crater_3, 262
       00 00 10 00 
       00 00 01 00 
       8E 4E 04 06 
       01 00       
04430C 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_crater_a, 263
       00 00 10 00 
       00 00 01 00 
       A5 4E 04 07 
       01 00       
04431E 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_crater_b, 264
       00 00 10 00 
       00 00 01 00 
       BC 4E 04 08 
       01 00       
044330 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_crater_c, 265
       00 00 10 00 
       00 00 01 00 
       D3 4E 04 09 
       01 00       
044342 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_crater_d, 266
       00 00 10 00 
       00 00 01 00 
       EA 4E 04 0A 
       01 00       
044354 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_crater_e, 267
       00 00 10 00 
       00 00 01 00 
       01 4F 04 0B 
       01 00       
044366 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_explosion_a, 268
       00 00 10 00 
       00 00 01 00 
       18 4F 04 0C 
       01 00       
044378 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_explosion_b, 269
       00 00 10 00 
       00 00 01 00 
       32 4F 04 0D 
       01 00       
04438A 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_explosion_c, 270
       00 00 10 00 
       00 00 01 00 
       4C 4F 04 0E 
       01 00       
04439C 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_explosion_d, 271
       00 00 10 00 
       00 00 01 00 
       66 4F 04 0F 
       01 00       
0443AE 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_explosion_e, 272
       00 00 10 00 
       00 00 01 00 
       80 4F 04 10 
       01 00       
0443C0 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_fireball_2_000, 273
       00 00 10 00 
       00 00 01 00 
       9A 4F 04 11 
       01 00       
0443D2 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_fireball_2_008, 274
       00 00 10 00 
       00 00 01 00 
       B7 4F 04 12 
       01 00       
0443E4 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_fireball_2_016, 275
       00 00 10 00 
       00 00 01 00 
       D4 4F 04 13 
       01 00       
0443F6 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_fireball_2_024, 276
       00 00 10 00 
       00 00 01 00 
       F1 4F 04 14 
       01 00       
044408 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_fireball_2_032, 277
       00 00 10 00 
       00 00 01 00 
       0E 50 04 15 
       01 00       
04441A 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_fireball_2_040, 278
       00 00 10 00 
       00 00 01 00 
       2B 50 04 16 
       01 00       
04442C 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_fireball_2_048, 279
       00 00 10 00 
       00 00 01 00 
       48 50 04 17 
       01 00       
04443E 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_fireball_2_056, 280
       00 00 10 00 
       00 00 01 00 
       65 50 04 18 
       01 00       
044450 01 00 00 10 0196*   	dl 1, 16, 16, 256, fn_fireball_2_064, 281
       00 00 10 00 
       00 00 01 00 
       82 50 04 19 
       01 00       
044462 01 00 00 10 0197*   	dl 1, 16, 16, 256, fn_fireball_2_072, 282
       00 00 10 00 
       00 00 01 00 
       9F 50 04 1A 
       01 00       
044474 01 00 00 10 0198*   	dl 1, 16, 16, 256, fn_fireball_2_080, 283
       00 00 10 00 
       00 00 01 00 
       BC 50 04 1B 
       01 00       
044486 01 00 00 10 0199*   	dl 1, 16, 16, 256, fn_fireball_2_088, 284
       00 00 10 00 
       00 00 01 00 
       D9 50 04 1C 
       01 00       
044498 01 00 00 10 0200*   	dl 1, 16, 16, 256, fn_fireball_2_096, 285
       00 00 10 00 
       00 00 01 00 
       F6 50 04 1D 
       01 00       
0444AA 01 00 00 10 0201*   	dl 1, 16, 16, 256, fn_fireball_2_104, 286
       00 00 10 00 
       00 00 01 00 
       13 51 04 1E 
       01 00       
0444BC 01 00 00 10 0202*   	dl 1, 16, 16, 256, fn_fireball_2_112, 287
       00 00 10 00 
       00 00 01 00 
       30 51 04 1F 
       01 00       
0444CE 01 00 00 10 0203*   	dl 1, 16, 16, 256, fn_fireball_2_120, 288
       00 00 10 00 
       00 00 01 00 
       4D 51 04 20 
       01 00       
0444E0 01 00 00 10 0204*   	dl 1, 16, 16, 256, fn_fireball_2_128, 289
       00 00 10 00 
       00 00 01 00 
       6A 51 04 21 
       01 00       
0444F2 01 00 00 10 0205*   	dl 1, 16, 16, 256, fn_fireball_2_136, 290
       00 00 10 00 
       00 00 01 00 
       87 51 04 22 
       01 00       
044504 01 00 00 10 0206*   	dl 1, 16, 16, 256, fn_fireball_2_144, 291
       00 00 10 00 
       00 00 01 00 
       A4 51 04 23 
       01 00       
044516 01 00 00 10 0207*   	dl 1, 16, 16, 256, fn_fireball_2_152, 292
       00 00 10 00 
       00 00 01 00 
       C1 51 04 24 
       01 00       
044528 01 00 00 10 0208*   	dl 1, 16, 16, 256, fn_fireball_2_160, 293
       00 00 10 00 
       00 00 01 00 
       DE 51 04 25 
       01 00       
04453A 01 00 00 10 0209*   	dl 1, 16, 16, 256, fn_fireball_2_168, 294
       00 00 10 00 
       00 00 01 00 
       FB 51 04 26 
       01 00       
04454C 01 00 00 10 0210*   	dl 1, 16, 16, 256, fn_fireball_2_176, 295
       00 00 10 00 
       00 00 01 00 
       18 52 04 27 
       01 00       
04455E 01 00 00 10 0211*   	dl 1, 16, 16, 256, fn_fireball_2_184, 296
       00 00 10 00 
       00 00 01 00 
       35 52 04 28 
       01 00       
044570 01 00 00 10 0212*   	dl 1, 16, 16, 256, fn_fireball_2_192, 297
       00 00 10 00 
       00 00 01 00 
       52 52 04 29 
       01 00       
044582 01 00 00 10 0213*   	dl 1, 16, 16, 256, fn_fireball_2_200, 298
       00 00 10 00 
       00 00 01 00 
       6F 52 04 2A 
       01 00       
044594 01 00 00 10 0214*   	dl 1, 16, 16, 256, fn_fireball_2_208, 299
       00 00 10 00 
       00 00 01 00 
       8C 52 04 2B 
       01 00       
0445A6 01 00 00 10 0215*   	dl 1, 16, 16, 256, fn_fireball_2_216, 300
       00 00 10 00 
       00 00 01 00 
       A9 52 04 2C 
       01 00       
0445B8 01 00 00 10 0216*   	dl 1, 16, 16, 256, fn_fireball_2_224, 301
       00 00 10 00 
       00 00 01 00 
       C6 52 04 2D 
       01 00       
0445CA 01 00 00 10 0217*   	dl 1, 16, 16, 256, fn_fireball_2_232, 302
       00 00 10 00 
       00 00 01 00 
       E3 52 04 2E 
       01 00       
0445DC 01 00 00 10 0218*   	dl 1, 16, 16, 256, fn_fireball_2_240, 303
       00 00 10 00 
       00 00 01 00 
       00 53 04 2F 
       01 00       
0445EE 01 00 00 10 0219*   	dl 1, 16, 16, 256, fn_fireball_2_248, 304
       00 00 10 00 
       00 00 01 00 
       1D 53 04 30 
       01 00       
044600 01 00 00 10 0220*   	dl 1, 16, 16, 256, fn_fireball_3_000, 305
       00 00 10 00 
       00 00 01 00 
       3A 53 04 31 
       01 00       
044612 01 00 00 10 0221*   	dl 1, 16, 16, 256, fn_fireball_3_008, 306
       00 00 10 00 
       00 00 01 00 
       57 53 04 32 
       01 00       
044624 01 00 00 10 0222*   	dl 1, 16, 16, 256, fn_fireball_3_016, 307
       00 00 10 00 
       00 00 01 00 
       74 53 04 33 
       01 00       
044636 01 00 00 10 0223*   	dl 1, 16, 16, 256, fn_fireball_3_024, 308
       00 00 10 00 
       00 00 01 00 
       91 53 04 34 
       01 00       
044648 01 00 00 10 0224*   	dl 1, 16, 16, 256, fn_fireball_3_032, 309
       00 00 10 00 
       00 00 01 00 
       AE 53 04 35 
       01 00       
04465A 01 00 00 10 0225*   	dl 1, 16, 16, 256, fn_fireball_3_040, 310
       00 00 10 00 
       00 00 01 00 
       CB 53 04 36 
       01 00       
04466C 01 00 00 10 0226*   	dl 1, 16, 16, 256, fn_fireball_3_048, 311
       00 00 10 00 
       00 00 01 00 
       E8 53 04 37 
       01 00       
04467E 01 00 00 10 0227*   	dl 1, 16, 16, 256, fn_fireball_3_056, 312
       00 00 10 00 
       00 00 01 00 
       05 54 04 38 
       01 00       
044690 01 00 00 10 0228*   	dl 1, 16, 16, 256, fn_fireball_3_064, 313
       00 00 10 00 
       00 00 01 00 
       22 54 04 39 
       01 00       
0446A2 01 00 00 10 0229*   	dl 1, 16, 16, 256, fn_fireball_3_072, 314
       00 00 10 00 
       00 00 01 00 
       3F 54 04 3A 
       01 00       
0446B4 01 00 00 10 0230*   	dl 1, 16, 16, 256, fn_fireball_3_080, 315
       00 00 10 00 
       00 00 01 00 
       5C 54 04 3B 
       01 00       
0446C6 01 00 00 10 0231*   	dl 1, 16, 16, 256, fn_fireball_3_088, 316
       00 00 10 00 
       00 00 01 00 
       79 54 04 3C 
       01 00       
0446D8 01 00 00 10 0232*   	dl 1, 16, 16, 256, fn_fireball_3_096, 317
       00 00 10 00 
       00 00 01 00 
       96 54 04 3D 
       01 00       
0446EA 01 00 00 10 0233*   	dl 1, 16, 16, 256, fn_fireball_3_104, 318
       00 00 10 00 
       00 00 01 00 
       B3 54 04 3E 
       01 00       
0446FC 01 00 00 10 0234*   	dl 1, 16, 16, 256, fn_fireball_3_112, 319
       00 00 10 00 
       00 00 01 00 
       D0 54 04 3F 
       01 00       
04470E 01 00 00 10 0235*   	dl 1, 16, 16, 256, fn_fireball_3_120, 320
       00 00 10 00 
       00 00 01 00 
       ED 54 04 40 
       01 00       
044720 01 00 00 10 0236*   	dl 1, 16, 16, 256, fn_fireball_3_128, 321
       00 00 10 00 
       00 00 01 00 
       0A 55 04 41 
       01 00       
044732 01 00 00 10 0237*   	dl 1, 16, 16, 256, fn_fireball_3_136, 322
       00 00 10 00 
       00 00 01 00 
       27 55 04 42 
       01 00       
044744 01 00 00 10 0238*   	dl 1, 16, 16, 256, fn_fireball_3_144, 323
       00 00 10 00 
       00 00 01 00 
       44 55 04 43 
       01 00       
044756 01 00 00 10 0239*   	dl 1, 16, 16, 256, fn_fireball_3_152, 324
       00 00 10 00 
       00 00 01 00 
       61 55 04 44 
       01 00       
044768 01 00 00 10 0240*   	dl 1, 16, 16, 256, fn_fireball_3_160, 325
       00 00 10 00 
       00 00 01 00 
       7E 55 04 45 
       01 00       
04477A 01 00 00 10 0241*   	dl 1, 16, 16, 256, fn_fireball_3_168, 326
       00 00 10 00 
       00 00 01 00 
       9B 55 04 46 
       01 00       
04478C 01 00 00 10 0242*   	dl 1, 16, 16, 256, fn_fireball_3_176, 327
       00 00 10 00 
       00 00 01 00 
       B8 55 04 47 
       01 00       
04479E 01 00 00 10 0243*   	dl 1, 16, 16, 256, fn_fireball_3_184, 328
       00 00 10 00 
       00 00 01 00 
       D5 55 04 48 
       01 00       
0447B0 01 00 00 10 0244*   	dl 1, 16, 16, 256, fn_fireball_3_192, 329
       00 00 10 00 
       00 00 01 00 
       F2 55 04 49 
       01 00       
0447C2 01 00 00 10 0245*   	dl 1, 16, 16, 256, fn_fireball_3_200, 330
       00 00 10 00 
       00 00 01 00 
       0F 56 04 4A 
       01 00       
0447D4 01 00 00 10 0246*   	dl 1, 16, 16, 256, fn_fireball_3_208, 331
       00 00 10 00 
       00 00 01 00 
       2C 56 04 4B 
       01 00       
0447E6 01 00 00 10 0247*   	dl 1, 16, 16, 256, fn_fireball_3_216, 332
       00 00 10 00 
       00 00 01 00 
       49 56 04 4C 
       01 00       
0447F8 01 00 00 10 0248*   	dl 1, 16, 16, 256, fn_fireball_3_224, 333
       00 00 10 00 
       00 00 01 00 
       66 56 04 4D 
       01 00       
04480A 01 00 00 10 0249*   	dl 1, 16, 16, 256, fn_fireball_3_232, 334
       00 00 10 00 
       00 00 01 00 
       83 56 04 4E 
       01 00       
04481C 01 00 00 10 0250*   	dl 1, 16, 16, 256, fn_fireball_3_240, 335
       00 00 10 00 
       00 00 01 00 
       A0 56 04 4F 
       01 00       
04482E 01 00 00 10 0251*   	dl 1, 16, 16, 256, fn_fireball_3_248, 336
       00 00 10 00 
       00 00 01 00 
       BD 56 04 50 
       01 00       
044840 01 00 00 05 0252*   	dl 1, 5, 13, 65, fn_laser_a, 337
       00 00 0D 00 
       00 41 00 00 
       DA 56 04 51 
       01 00       
044852 01 00 00 05 0253*   	dl 1, 5, 13, 65, fn_laser_b, 338
       00 00 0D 00 
       00 41 00 00 
       F0 56 04 52 
       01 00       
044864 01 00 00 10 0254*   	dl 1, 16, 16, 256, fn_lightning_h_0, 339
       00 00 10 00 
       00 00 01 00 
       06 57 04 53 
       01 00       
044876 01 00 00 10 0255*   	dl 1, 16, 16, 256, fn_lightning_h_1, 340
       00 00 10 00 
       00 00 01 00 
       22 57 04 54 
       01 00       
044888 01 00 00 10 0256*   	dl 1, 16, 16, 256, fn_pad, 341
       00 00 10 00 
       00 00 01 00 
       3E 57 04 55 
       01 00       
04489A 01 00 00 10 0257*   	dl 1, 16, 16, 256, fn_seeker_000, 342
       00 00 10 00 
       00 00 01 00 
       50 57 04 56 
       01 00       
0448AC 01 00 00 10 0258*   	dl 1, 16, 16, 256, fn_seeker_008, 343
       00 00 10 00 
       00 00 01 00 
       69 57 04 57 
       01 00       
0448BE 01 00 00 10 0259*   	dl 1, 16, 16, 256, fn_seeker_016, 344
       00 00 10 00 
       00 00 01 00 
       82 57 04 58 
       01 00       
0448D0 01 00 00 10 0260*   	dl 1, 16, 16, 256, fn_seeker_024, 345
       00 00 10 00 
       00 00 01 00 
       9B 57 04 59 
       01 00       
0448E2 01 00 00 10 0261*   	dl 1, 16, 16, 256, fn_seeker_032, 346
       00 00 10 00 
       00 00 01 00 
       B4 57 04 5A 
       01 00       
0448F4 01 00 00 10 0262*   	dl 1, 16, 16, 256, fn_seeker_040, 347
       00 00 10 00 
       00 00 01 00 
       CD 57 04 5B 
       01 00       
044906 01 00 00 10 0263*   	dl 1, 16, 16, 256, fn_seeker_048, 348
       00 00 10 00 
       00 00 01 00 
       E6 57 04 5C 
       01 00       
044918 01 00 00 10 0264*   	dl 1, 16, 16, 256, fn_seeker_056, 349
       00 00 10 00 
       00 00 01 00 
       FF 57 04 5D 
       01 00       
04492A 01 00 00 10 0265*   	dl 1, 16, 16, 256, fn_seeker_064, 350
       00 00 10 00 
       00 00 01 00 
       18 58 04 5E 
       01 00       
04493C 01 00 00 10 0266*   	dl 1, 16, 16, 256, fn_seeker_072, 351
       00 00 10 00 
       00 00 01 00 
       31 58 04 5F 
       01 00       
04494E 01 00 00 10 0267*   	dl 1, 16, 16, 256, fn_seeker_080, 352
       00 00 10 00 
       00 00 01 00 
       4A 58 04 60 
       01 00       
044960 01 00 00 10 0268*   	dl 1, 16, 16, 256, fn_seeker_088, 353
       00 00 10 00 
       00 00 01 00 
       63 58 04 61 
       01 00       
044972 01 00 00 10 0269*   	dl 1, 16, 16, 256, fn_seeker_096, 354
       00 00 10 00 
       00 00 01 00 
       7C 58 04 62 
       01 00       
044984 01 00 00 10 0270*   	dl 1, 16, 16, 256, fn_seeker_104, 355
       00 00 10 00 
       00 00 01 00 
       95 58 04 63 
       01 00       
044996 01 00 00 10 0271*   	dl 1, 16, 16, 256, fn_seeker_112, 356
       00 00 10 00 
       00 00 01 00 
       AE 58 04 64 
       01 00       
0449A8 01 00 00 10 0272*   	dl 1, 16, 16, 256, fn_seeker_120, 357
       00 00 10 00 
       00 00 01 00 
       C7 58 04 65 
       01 00       
0449BA 01 00 00 10 0273*   	dl 1, 16, 16, 256, fn_seeker_128, 358
       00 00 10 00 
       00 00 01 00 
       E0 58 04 66 
       01 00       
0449CC 01 00 00 10 0274*   	dl 1, 16, 16, 256, fn_seeker_136, 359
       00 00 10 00 
       00 00 01 00 
       F9 58 04 67 
       01 00       
0449DE 01 00 00 10 0275*   	dl 1, 16, 16, 256, fn_seeker_144, 360
       00 00 10 00 
       00 00 01 00 
       12 59 04 68 
       01 00       
0449F0 01 00 00 10 0276*   	dl 1, 16, 16, 256, fn_seeker_152, 361
       00 00 10 00 
       00 00 01 00 
       2B 59 04 69 
       01 00       
044A02 01 00 00 10 0277*   	dl 1, 16, 16, 256, fn_seeker_160, 362
       00 00 10 00 
       00 00 01 00 
       44 59 04 6A 
       01 00       
044A14 01 00 00 10 0278*   	dl 1, 16, 16, 256, fn_seeker_168, 363
       00 00 10 00 
       00 00 01 00 
       5D 59 04 6B 
       01 00       
044A26 01 00 00 10 0279*   	dl 1, 16, 16, 256, fn_seeker_176, 364
       00 00 10 00 
       00 00 01 00 
       76 59 04 6C 
       01 00       
044A38 01 00 00 10 0280*   	dl 1, 16, 16, 256, fn_seeker_184, 365
       00 00 10 00 
       00 00 01 00 
       8F 59 04 6D 
       01 00       
044A4A 01 00 00 10 0281*   	dl 1, 16, 16, 256, fn_seeker_192, 366
       00 00 10 00 
       00 00 01 00 
       A8 59 04 6E 
       01 00       
044A5C 01 00 00 10 0282*   	dl 1, 16, 16, 256, fn_seeker_200, 367
       00 00 10 00 
       00 00 01 00 
       C1 59 04 6F 
       01 00       
044A6E 01 00 00 10 0283*   	dl 1, 16, 16, 256, fn_seeker_208, 368
       00 00 10 00 
       00 00 01 00 
       DA 59 04 70 
       01 00       
044A80 01 00 00 10 0284*   	dl 1, 16, 16, 256, fn_seeker_216, 369
       00 00 10 00 
       00 00 01 00 
       F3 59 04 71 
       01 00       
044A92 01 00 00 10 0285*   	dl 1, 16, 16, 256, fn_seeker_224, 370
       00 00 10 00 
       00 00 01 00 
       0C 5A 04 72 
       01 00       
044AA4 01 00 00 10 0286*   	dl 1, 16, 16, 256, fn_seeker_232, 371
       00 00 10 00 
       00 00 01 00 
       25 5A 04 73 
       01 00       
044AB6 01 00 00 10 0287*   	dl 1, 16, 16, 256, fn_seeker_240, 372
       00 00 10 00 
       00 00 01 00 
       3E 5A 04 74 
       01 00       
044AC8 01 00 00 10 0288*   	dl 1, 16, 16, 256, fn_seeker_248, 373
       00 00 10 00 
       00 00 01 00 
       57 5A 04 75 
       01 00       
044ADA 01 00 00 10 0289*   	dl 1, 16, 16, 256, fn_ship_0l, 374
       00 00 10 00 
       00 00 01 00 
       70 5A 04 76 
       01 00       
044AEC 01 00 00 10 0290*   	dl 1, 16, 16, 256, fn_ship_1c, 375
       00 00 10 00 
       00 00 01 00 
       86 5A 04 77 
       01 00       
044AFE 01 00 00 10 0291*   	dl 1, 16, 16, 256, fn_ship_2r, 376
       00 00 10 00 
       00 00 01 00 
       9C 5A 04 78 
       01 00       
044B10 01 00 00 10 0292*   	dl 1, 16, 16, 256, fn_test_stripes, 377
       00 00 10 00 
       00 00 01 00 
       B2 5A 04 79 
       01 00       
044B22 01 00 00 10 0293*   	dl 1, 16, 16, 256, fn_tile_blank, 378
       00 00 10 00 
       00 00 01 00 
       CD 5A 04 7A 
       01 00       
044B34 01 00 00 10 0294*   	dl 1, 16, 16, 256, fn_tile_pad_0, 379
       00 00 10 00 
       00 00 01 00 
       E6 5A 04 7B 
       01 00       
044B46 01 00 00 10 0295*   	dl 1, 16, 16, 256, fn_tile_pad_1, 380
       00 00 10 00 
       00 00 01 00 
       FF 5A 04 7C 
       01 00       
044B58 01 00 00 10 0296*   	dl 1, 16, 16, 256, fn_tile_pad_2, 381
       00 00 10 00 
       00 00 01 00 
       18 5B 04 7D 
       01 00       
044B6A 01 00 00 10 0297*   	dl 1, 16, 16, 256, fn_tile_pad_3, 382
       00 00 10 00 
       00 00 01 00 
       31 5B 04 7E 
       01 00       
044B7C 01 00 00 10 0298*   	dl 1, 16, 16, 256, fn_tile_pad_4, 383
       00 00 10 00 
       00 00 01 00 
       4A 5B 04 7F 
       01 00       
044B8E 01 00 00 10 0299*   	dl 1, 16, 16, 256, fn_tile_pad_5, 384
       00 00 10 00 
       00 00 01 00 
       63 5B 04 80 
       01 00       
044BA0 01 00 00 10 0300*   	dl 1, 16, 16, 256, fn_tile_pad_6, 385
       00 00 10 00 
       00 00 01 00 
       7C 5B 04 81 
       01 00       
044BB2 01 00 00 10 0301*   	dl 1, 16, 16, 256, fn_tile_pad_7, 386
       00 00 10 00 
       00 00 01 00 
       95 5B 04 82 
       01 00       
044BC4 01 00 00 10 0302*   	dl 1, 16, 16, 256, fn_turret_000, 387
       00 00 10 00 
       00 00 01 00 
       AE 5B 04 83 
       01 00       
044BD6 01 00 00 10 0303*   	dl 1, 16, 16, 256, fn_turret_008, 388
       00 00 10 00 
       00 00 01 00 
       C7 5B 04 84 
       01 00       
044BE8 01 00 00 10 0304*   	dl 1, 16, 16, 256, fn_turret_016, 389
       00 00 10 00 
       00 00 01 00 
       E0 5B 04 85 
       01 00       
044BFA 01 00 00 10 0305*   	dl 1, 16, 16, 256, fn_turret_024, 390
       00 00 10 00 
       00 00 01 00 
       F9 5B 04 86 
       01 00       
044C0C 01 00 00 10 0306*   	dl 1, 16, 16, 256, fn_turret_032, 391
       00 00 10 00 
       00 00 01 00 
       12 5C 04 87 
       01 00       
044C1E 01 00 00 10 0307*   	dl 1, 16, 16, 256, fn_turret_040, 392
       00 00 10 00 
       00 00 01 00 
       2B 5C 04 88 
       01 00       
044C30 01 00 00 10 0308*   	dl 1, 16, 16, 256, fn_turret_048, 393
       00 00 10 00 
       00 00 01 00 
       44 5C 04 89 
       01 00       
044C42 01 00 00 10 0309*   	dl 1, 16, 16, 256, fn_turret_056, 394
       00 00 10 00 
       00 00 01 00 
       5D 5C 04 8A 
       01 00       
044C54 01 00 00 10 0310*   	dl 1, 16, 16, 256, fn_turret_064, 395
       00 00 10 00 
       00 00 01 00 
       76 5C 04 8B 
       01 00       
044C66 01 00 00 10 0311*   	dl 1, 16, 16, 256, fn_turret_072, 396
       00 00 10 00 
       00 00 01 00 
       8F 5C 04 8C 
       01 00       
044C78 01 00 00 10 0312*   	dl 1, 16, 16, 256, fn_turret_080, 397
       00 00 10 00 
       00 00 01 00 
       A8 5C 04 8D 
       01 00       
044C8A 01 00 00 10 0313*   	dl 1, 16, 16, 256, fn_turret_088, 398
       00 00 10 00 
       00 00 01 00 
       C1 5C 04 8E 
       01 00       
044C9C 01 00 00 10 0314*   	dl 1, 16, 16, 256, fn_turret_096, 399
       00 00 10 00 
       00 00 01 00 
       DA 5C 04 8F 
       01 00       
044CAE 01 00 00 10 0315*   	dl 1, 16, 16, 256, fn_turret_104, 400
       00 00 10 00 
       00 00 01 00 
       F3 5C 04 90 
       01 00       
044CC0 01 00 00 10 0316*   	dl 1, 16, 16, 256, fn_turret_112, 401
       00 00 10 00 
       00 00 01 00 
       0C 5D 04 91 
       01 00       
044CD2 01 00 00 10 0317*   	dl 1, 16, 16, 256, fn_turret_120, 402
       00 00 10 00 
       00 00 01 00 
       25 5D 04 92 
       01 00       
044CE4 01 00 00 10 0318*   	dl 1, 16, 16, 256, fn_turret_128, 403
       00 00 10 00 
       00 00 01 00 
       3E 5D 04 93 
       01 00       
044CF6 01 00 00 10 0319*   	dl 1, 16, 16, 256, fn_turret_136, 404
       00 00 10 00 
       00 00 01 00 
       57 5D 04 94 
       01 00       
044D08 01 00 00 10 0320*   	dl 1, 16, 16, 256, fn_turret_144, 405
       00 00 10 00 
       00 00 01 00 
       70 5D 04 95 
       01 00       
044D1A 01 00 00 10 0321*   	dl 1, 16, 16, 256, fn_turret_152, 406
       00 00 10 00 
       00 00 01 00 
       89 5D 04 96 
       01 00       
044D2C 01 00 00 10 0322*   	dl 1, 16, 16, 256, fn_turret_160, 407
       00 00 10 00 
       00 00 01 00 
       A2 5D 04 97 
       01 00       
044D3E 01 00 00 10 0323*   	dl 1, 16, 16, 256, fn_turret_168, 408
       00 00 10 00 
       00 00 01 00 
       BB 5D 04 98 
       01 00       
044D50 01 00 00 10 0324*   	dl 1, 16, 16, 256, fn_turret_176, 409
       00 00 10 00 
       00 00 01 00 
       D4 5D 04 99 
       01 00       
044D62 01 00 00 10 0325*   	dl 1, 16, 16, 256, fn_turret_184, 410
       00 00 10 00 
       00 00 01 00 
       ED 5D 04 9A 
       01 00       
044D74 01 00 00 10 0326*   	dl 1, 16, 16, 256, fn_turret_192, 411
       00 00 10 00 
       00 00 01 00 
       06 5E 04 9B 
       01 00       
044D86 01 00 00 10 0327*   	dl 1, 16, 16, 256, fn_turret_200, 412
       00 00 10 00 
       00 00 01 00 
       1F 5E 04 9C 
       01 00       
044D98 01 00 00 10 0328*   	dl 1, 16, 16, 256, fn_turret_208, 413
       00 00 10 00 
       00 00 01 00 
       38 5E 04 9D 
       01 00       
044DAA 01 00 00 10 0329*   	dl 1, 16, 16, 256, fn_turret_216, 414
       00 00 10 00 
       00 00 01 00 
       51 5E 04 9E 
       01 00       
044DBC 01 00 00 10 0330*   	dl 1, 16, 16, 256, fn_turret_224, 415
       00 00 10 00 
       00 00 01 00 
       6A 5E 04 9F 
       01 00       
044DCE 01 00 00 10 0331*   	dl 1, 16, 16, 256, fn_turret_232, 416
       00 00 10 00 
       00 00 01 00 
       83 5E 04 A0 
       01 00       
044DE0 01 00 00 10 0332*   	dl 1, 16, 16, 256, fn_turret_240, 417
       00 00 10 00 
       00 00 01 00 
       9C 5E 04 A1 
       01 00       
044DF2 01 00 00 10 0333*   	dl 1, 16, 16, 256, fn_turret_248, 418
       00 00 10 00 
       00 00 01 00 
       B5 5E 04 A2 
       01 00       
044E04             0334*   
044E04             0335*   ; files_list: ; filename:
044E04 73 70 72 69 0336*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
044E19 73 70 72 69 0337*   fn_crater_0.: db "sprites/crater_0..rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 30 
       2E 2E 72 67 
       62 61 32 00 
044E31 73 70 72 69 0338*   fn_crater_0: db "sprites/crater_0.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 30 
       2E 72 67 62 
       61 32 00    
044E48 73 70 72 69 0339*   fn_crater_1.: db "sprites/crater_1..rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 31 
       2E 2E 72 67 
       62 61 32 00 
044E60 73 70 72 69 0340*   fn_crater_1: db "sprites/crater_1.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 31 
       2E 72 67 62 
       61 32 00    
044E77 73 70 72 69 0341*   fn_crater_2: db "sprites/crater_2.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 32 
       2E 72 67 62 
       61 32 00    
044E8E 73 70 72 69 0342*   fn_crater_3: db "sprites/crater_3.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 33 
       2E 72 67 62 
       61 32 00    
044EA5 73 70 72 69 0343*   fn_crater_a: db "sprites/crater_a.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 61 
       2E 72 67 62 
       61 32 00    
044EBC 73 70 72 69 0344*   fn_crater_b: db "sprites/crater_b.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 62 
       2E 72 67 62 
       61 32 00    
044ED3 73 70 72 69 0345*   fn_crater_c: db "sprites/crater_c.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 63 
       2E 72 67 62 
       61 32 00    
044EEA 73 70 72 69 0346*   fn_crater_d: db "sprites/crater_d.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 64 
       2E 72 67 62 
       61 32 00    
044F01 73 70 72 69 0347*   fn_crater_e: db "sprites/crater_e.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 65 
       2E 72 67 62 
       61 32 00    
044F18 73 70 72 69 0348*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
044F32 73 70 72 69 0349*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
044F4C 73 70 72 69 0350*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
044F66 73 70 72 69 0351*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
044F80 73 70 72 69 0352*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
044F9A 73 70 72 69 0353*   fn_fireball_2_000: db "sprites/fireball_2_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044FB7 73 70 72 69 0354*   fn_fireball_2_008: db "sprites/fireball_2_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044FD4 73 70 72 69 0355*   fn_fireball_2_016: db "sprites/fireball_2_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044FF1 73 70 72 69 0356*   fn_fireball_2_024: db "sprites/fireball_2_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
04500E 73 70 72 69 0357*   fn_fireball_2_032: db "sprites/fireball_2_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
04502B 73 70 72 69 0358*   fn_fireball_2_040: db "sprites/fireball_2_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045048 73 70 72 69 0359*   fn_fireball_2_048: db "sprites/fireball_2_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045065 73 70 72 69 0360*   fn_fireball_2_056: db "sprites/fireball_2_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045082 73 70 72 69 0361*   fn_fireball_2_064: db "sprites/fireball_2_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
04509F 73 70 72 69 0362*   fn_fireball_2_072: db "sprites/fireball_2_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0450BC 73 70 72 69 0363*   fn_fireball_2_080: db "sprites/fireball_2_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0450D9 73 70 72 69 0364*   fn_fireball_2_088: db "sprites/fireball_2_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0450F6 73 70 72 69 0365*   fn_fireball_2_096: db "sprites/fireball_2_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045113 73 70 72 69 0366*   fn_fireball_2_104: db "sprites/fireball_2_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045130 73 70 72 69 0367*   fn_fireball_2_112: db "sprites/fireball_2_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
04514D 73 70 72 69 0368*   fn_fireball_2_120: db "sprites/fireball_2_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04516A 73 70 72 69 0369*   fn_fireball_2_128: db "sprites/fireball_2_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045187 73 70 72 69 0370*   fn_fireball_2_136: db "sprites/fireball_2_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0451A4 73 70 72 69 0371*   fn_fireball_2_144: db "sprites/fireball_2_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0451C1 73 70 72 69 0372*   fn_fireball_2_152: db "sprites/fireball_2_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0451DE 73 70 72 69 0373*   fn_fireball_2_160: db "sprites/fireball_2_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0451FB 73 70 72 69 0374*   fn_fireball_2_168: db "sprites/fireball_2_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045218 73 70 72 69 0375*   fn_fireball_2_176: db "sprites/fireball_2_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045235 73 70 72 69 0376*   fn_fireball_2_184: db "sprites/fireball_2_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045252 73 70 72 69 0377*   fn_fireball_2_192: db "sprites/fireball_2_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
04526F 73 70 72 69 0378*   fn_fireball_2_200: db "sprites/fireball_2_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04528C 73 70 72 69 0379*   fn_fireball_2_208: db "sprites/fireball_2_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0452A9 73 70 72 69 0380*   fn_fireball_2_216: db "sprites/fireball_2_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0452C6 73 70 72 69 0381*   fn_fireball_2_224: db "sprites/fireball_2_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0452E3 73 70 72 69 0382*   fn_fireball_2_232: db "sprites/fireball_2_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045300 73 70 72 69 0383*   fn_fireball_2_240: db "sprites/fireball_2_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
04531D 73 70 72 69 0384*   fn_fireball_2_248: db "sprites/fireball_2_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
04533A 73 70 72 69 0385*   fn_fireball_3_000: db "sprites/fireball_3_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
045357 73 70 72 69 0386*   fn_fireball_3_008: db "sprites/fireball_3_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045374 73 70 72 69 0387*   fn_fireball_3_016: db "sprites/fireball_3_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045391 73 70 72 69 0388*   fn_fireball_3_024: db "sprites/fireball_3_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0453AE 73 70 72 69 0389*   fn_fireball_3_032: db "sprites/fireball_3_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0453CB 73 70 72 69 0390*   fn_fireball_3_040: db "sprites/fireball_3_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0453E8 73 70 72 69 0391*   fn_fireball_3_048: db "sprites/fireball_3_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045405 73 70 72 69 0392*   fn_fireball_3_056: db "sprites/fireball_3_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045422 73 70 72 69 0393*   fn_fireball_3_064: db "sprites/fireball_3_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
04543F 73 70 72 69 0394*   fn_fireball_3_072: db "sprites/fireball_3_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
04545C 73 70 72 69 0395*   fn_fireball_3_080: db "sprites/fireball_3_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045479 73 70 72 69 0396*   fn_fireball_3_088: db "sprites/fireball_3_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045496 73 70 72 69 0397*   fn_fireball_3_096: db "sprites/fireball_3_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
0454B3 73 70 72 69 0398*   fn_fireball_3_104: db "sprites/fireball_3_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0454D0 73 70 72 69 0399*   fn_fireball_3_112: db "sprites/fireball_3_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0454ED 73 70 72 69 0400*   fn_fireball_3_120: db "sprites/fireball_3_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04550A 73 70 72 69 0401*   fn_fireball_3_128: db "sprites/fireball_3_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045527 73 70 72 69 0402*   fn_fireball_3_136: db "sprites/fireball_3_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045544 73 70 72 69 0403*   fn_fireball_3_144: db "sprites/fireball_3_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045561 73 70 72 69 0404*   fn_fireball_3_152: db "sprites/fireball_3_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
04557E 73 70 72 69 0405*   fn_fireball_3_160: db "sprites/fireball_3_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04559B 73 70 72 69 0406*   fn_fireball_3_168: db "sprites/fireball_3_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0455B8 73 70 72 69 0407*   fn_fireball_3_176: db "sprites/fireball_3_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0455D5 73 70 72 69 0408*   fn_fireball_3_184: db "sprites/fireball_3_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
0455F2 73 70 72 69 0409*   fn_fireball_3_192: db "sprites/fireball_3_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
04560F 73 70 72 69 0410*   fn_fireball_3_200: db "sprites/fireball_3_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04562C 73 70 72 69 0411*   fn_fireball_3_208: db "sprites/fireball_3_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045649 73 70 72 69 0412*   fn_fireball_3_216: db "sprites/fireball_3_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045666 73 70 72 69 0413*   fn_fireball_3_224: db "sprites/fireball_3_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045683 73 70 72 69 0414*   fn_fireball_3_232: db "sprites/fireball_3_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0456A0 73 70 72 69 0415*   fn_fireball_3_240: db "sprites/fireball_3_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0456BD 73 70 72 69 0416*   fn_fireball_3_248: db "sprites/fireball_3_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0456DA 73 70 72 69 0417*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
0456F0 73 70 72 69 0418*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
045706 73 70 72 69 0419*   fn_lightning_h_0: db "sprites/lightning_h_0.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       30 2E 72 67 
       62 61 32 00 
045722 73 70 72 69 0420*   fn_lightning_h_1: db "sprites/lightning_h_1.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       31 2E 72 67 
       62 61 32 00 
04573E 73 70 72 69 0421*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
045750 73 70 72 69 0422*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
045769 73 70 72 69 0423*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045782 73 70 72 69 0424*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
04579B 73 70 72 69 0425*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0457B4 73 70 72 69 0426*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0457CD 73 70 72 69 0427*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0457E6 73 70 72 69 0428*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0457FF 73 70 72 69 0429*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045818 73 70 72 69 0430*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
045831 73 70 72 69 0431*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
04584A 73 70 72 69 0432*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045863 73 70 72 69 0433*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
04587C 73 70 72 69 0434*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045895 73 70 72 69 0435*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0458AE 73 70 72 69 0436*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0458C7 73 70 72 69 0437*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0458E0 73 70 72 69 0438*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0458F9 73 70 72 69 0439*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045912 73 70 72 69 0440*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
04592B 73 70 72 69 0441*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045944 73 70 72 69 0442*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04595D 73 70 72 69 0443*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045976 73 70 72 69 0444*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
04598F 73 70 72 69 0445*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
0459A8 73 70 72 69 0446*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0459C1 73 70 72 69 0447*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0459DA 73 70 72 69 0448*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0459F3 73 70 72 69 0449*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045A0C 73 70 72 69 0450*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045A25 73 70 72 69 0451*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045A3E 73 70 72 69 0452*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045A57 73 70 72 69 0453*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045A70 73 70 72 69 0454*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
045A86 73 70 72 69 0455*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
045A9C 73 70 72 69 0456*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
045AB2 73 70 72 69 0457*   fn_test_stripes: db "sprites/test_stripes.rgba2",0
       74 65 73 2F 
       74 65 73 74 
       5F 73 74 72 
       69 70 65 73 
       2E 72 67 62 
       61 32 00    
045ACD 73 70 72 69 0458*   fn_tile_blank: db "sprites/tile_blank.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 62 6C 61 
       6E 6B 2E 72 
       67 62 61 32 
       00          
045AE6 73 70 72 69 0459*   fn_tile_pad_0: db "sprites/tile_pad_0.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 30 2E 72 
       67 62 61 32 
       00          
045AFF 73 70 72 69 0460*   fn_tile_pad_1: db "sprites/tile_pad_1.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 31 2E 72 
       67 62 61 32 
       00          
045B18 73 70 72 69 0461*   fn_tile_pad_2: db "sprites/tile_pad_2.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 32 2E 72 
       67 62 61 32 
       00          
045B31 73 70 72 69 0462*   fn_tile_pad_3: db "sprites/tile_pad_3.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 33 2E 72 
       67 62 61 32 
       00          
045B4A 73 70 72 69 0463*   fn_tile_pad_4: db "sprites/tile_pad_4.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 34 2E 72 
       67 62 61 32 
       00          
045B63 73 70 72 69 0464*   fn_tile_pad_5: db "sprites/tile_pad_5.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 35 2E 72 
       67 62 61 32 
       00          
045B7C 73 70 72 69 0465*   fn_tile_pad_6: db "sprites/tile_pad_6.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 36 2E 72 
       67 62 61 32 
       00          
045B95 73 70 72 69 0466*   fn_tile_pad_7: db "sprites/tile_pad_7.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 37 2E 72 
       67 62 61 32 
       00          
045BAE 73 70 72 69 0467*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
045BC7 73 70 72 69 0468*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045BE0 73 70 72 69 0469*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045BF9 73 70 72 69 0470*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045C12 73 70 72 69 0471*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
045C2B 73 70 72 69 0472*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045C44 73 70 72 69 0473*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045C5D 73 70 72 69 0474*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045C76 73 70 72 69 0475*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
045C8F 73 70 72 69 0476*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
045CA8 73 70 72 69 0477*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045CC1 73 70 72 69 0478*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045CDA 73 70 72 69 0479*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045CF3 73 70 72 69 0480*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045D0C 73 70 72 69 0481*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045D25 73 70 72 69 0482*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045D3E 73 70 72 69 0483*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045D57 73 70 72 69 0484*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045D70 73 70 72 69 0485*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045D89 73 70 72 69 0486*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045DA2 73 70 72 69 0487*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045DBB 73 70 72 69 0488*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045DD4 73 70 72 69 0489*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045DED 73 70 72 69 0490*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045E06 73 70 72 69 0491*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045E1F 73 70 72 69 0492*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045E38 73 70 72 69 0493*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045E51 73 70 72 69 0494*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045E6A 73 70 72 69 0495*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045E83 73 70 72 69 0496*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045E9C 73 70 72 69 0497*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045EB5 73 70 72 69 0498*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045ECE             0057        include "images_ui.inc"
045ECE             0001*   ; Generated by make_images.py
045ECE             0002*   
045ECE             0003*   ui_num_images: equ 46
045ECE             0004*   
045ECE             0005*   ; buffer_ids:
045ECE             0006*   BUF_BAR_H_0: equ 0
045ECE             0007*   BUF_BAR_H_1: equ 1
045ECE             0008*   BUF_BAR_H_2: equ 2
045ECE             0009*   BUF_BAR_V_0: equ 3
045ECE             0010*   BUF_BAR_V_1: equ 4
045ECE             0011*   BUF_BAR_V_2: equ 5
045ECE             0012*   BUF_BEZEL_L: equ 6
045ECE             0013*   BUF_BEZEL_R: equ 7
045ECE             0014*   BUF_CREDITS: equ 8
045ECE             0015*   BUF_CTL_PANEL_L: equ 9
045ECE             0016*   BUF_CTL_PANEL_NAVBALL_SM: equ 10
045ECE             0017*   BUF_CTL_PANEL_R: equ 11
045ECE             0018*   BUF_CTL_PANEL_TOP: equ 12
045ECE             0019*   BUF_JERRY_CAN: equ 13
045ECE             0020*   BUF_MFD_ARMS: equ 14
045ECE             0021*   BUF_MFD_BEZEL: equ 15
045ECE             0022*   BUF_MFD_BG: equ 16
045ECE             0023*   BUF_MFD_GUN_0: equ 17
045ECE             0024*   BUF_MFD_GUN_1: equ 18
045ECE             0025*   BUF_MFD_GUN_2: equ 19
045ECE             0026*   BUF_MFD_GUN_3: equ 20
045ECE             0027*   BUF_MFD_GUN_4: equ 21
045ECE             0028*   BUF_MFD_GUN_5: equ 22
045ECE             0029*   BUF_MFD_MAVERICK_0: equ 23
045ECE             0030*   BUF_MFD_MAVERICK_1: equ 24
045ECE             0031*   BUF_MFD_MAVERICK_2: equ 25
045ECE             0032*   BUF_MFD_MAVERICK_3: equ 26
045ECE             0033*   BUF_MFD_MAVERICK_4: equ 27
045ECE             0034*   BUF_MFD_MAVERICK_5: equ 28
045ECE             0035*   BUF_MFD_SIDEWINDER_0: equ 29
045ECE             0036*   BUF_MFD_SIDEWINDER_1: equ 30
045ECE             0037*   BUF_MFD_SIDEWINDER_2: equ 31
045ECE             0038*   BUF_MFD_SIDEWINDER_3: equ 32
045ECE             0039*   BUF_MFD_SIDEWINDER_4: equ 33
045ECE             0040*   BUF_MFD_SIDEWINDER_5: equ 34
045ECE             0041*   BUF_MFD_SPARROW_0: equ 35
045ECE             0042*   BUF_MFD_SPARROW_1: equ 36
045ECE             0043*   BUF_MFD_SPARROW_2: equ 37
045ECE             0044*   BUF_MFD_SPARROW_3: equ 38
045ECE             0045*   BUF_MFD_SPARROW_4: equ 39
045ECE             0046*   BUF_MFD_SPARROW_5: equ 40
045ECE             0047*   BUF_POWER: equ 41
045ECE             0048*   BUF_SHIELD: equ 42
045ECE             0049*   BUF_SHIP_MFD: equ 43
045ECE             0050*   BUF_SPLASH_BG: equ 44
045ECE             0051*   BUF_SPLASH_LOGO: equ 45
045ECE             0052*   
045ECE             0053*   ui_image_list: ; type; width; height; size; filename; bufferId:
045ECE 01 00 00 80 0054*   	dl 1, 128, 8, 1024, fn_bar_h_0, 0
       00 00 08 00 
       00 00 04 00 
       0A 62 04 00 
       00 00       
045EE0 01 00 00 80 0055*   	dl 1, 128, 8, 1024, fn_bar_h_1, 1
       00 00 08 00 
       00 00 04 00 
       1B 62 04 01 
       00 00       
045EF2 01 00 00 80 0056*   	dl 1, 128, 8, 1024, fn_bar_h_2, 2
       00 00 08 00 
       00 00 04 00 
       2C 62 04 02 
       00 00       
045F04 01 00 00 08 0057*   	dl 1, 8, 128, 1024, fn_bar_v_0, 3
       00 00 80 00 
       00 00 04 00 
       3D 62 04 03 
       00 00       
045F16 01 00 00 08 0058*   	dl 1, 8, 128, 1024, fn_bar_v_1, 4
       00 00 80 00 
       00 00 04 00 
       4E 62 04 04 
       00 00       
045F28 01 00 00 08 0059*   	dl 1, 8, 128, 1024, fn_bar_v_2, 5
       00 00 80 00 
       00 00 04 00 
       5F 62 04 05 
       00 00       
045F3A 01 00 00 80 0060*   	dl 1, 128, 304, 38912, fn_bezel_l, 6
       00 00 30 01 
       00 00 98 00 
       70 62 04 06 
       00 00       
045F4C 01 00 00 80 0061*   	dl 1, 128, 304, 38912, fn_bezel_r, 7
       00 00 30 01 
       00 00 98 00 
       81 62 04 07 
       00 00       
045F5E 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_credits, 8
       00 00 10 00 
       00 00 01 00 
       92 62 04 08 
       00 00       
045F70 01 00 00 80 0063*   	dl 1, 128, 128, 16384, fn_ctl_panel_l, 9
       00 00 80 00 
       00 00 40 00 
       A3 62 04 09 
       00 00       
045F82 01 00 00 27 0064*   	dl 1, 39, 39, 1521, fn_ctl_panel_navball_sm, 10
       00 00 27 00 
       00 F1 05 00 
       B8 62 04 0A 
       00 00       
045F94 01 00 00 80 0065*   	dl 1, 128, 128, 16384, fn_ctl_panel_r, 11
       00 00 80 00 
       00 00 40 00 
       D6 62 04 0B 
       00 00       
045FA6 01 00 00 60 0066*   	dl 1, 352, 48, 16896, fn_ctl_panel_top, 12
       01 00 30 00 
       00 00 42 00 
       EB 62 04 0C 
       00 00       
045FB8 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_jerry_can, 13
       00 00 10 00 
       00 00 01 00 
       02 63 04 0D 
       00 00       
045FCA 01 00 00 24 0068*   	dl 1, 36, 18, 648, fn_mfd_arms, 14
       00 00 12 00 
       00 88 02 00 
       15 63 04 0E 
       00 00       
045FDC 01 00 00 60 0069*   	dl 1, 96, 96, 9216, fn_mfd_bezel, 15
       00 00 60 00 
       00 00 24 00 
       27 63 04 0F 
       00 00       
045FEE 01 00 00 40 0070*   	dl 1, 64, 64, 4096, fn_mfd_bg, 16
       00 00 40 00 
       00 00 10 00 
       3A 63 04 10 
       00 00       
046000 01 00 00 01 0071*   	dl 1, 1, 6, 6, fn_mfd_gun_0, 17
       00 00 06 00 
       00 06 00 00 
       4A 63 04 11 
       00 00       
046012 01 00 00 01 0072*   	dl 1, 1, 6, 6, fn_mfd_gun_1, 18
       00 00 06 00 
       00 06 00 00 
       5D 63 04 12 
       00 00       
046024 01 00 00 01 0073*   	dl 1, 1, 6, 6, fn_mfd_gun_2, 19
       00 00 06 00 
       00 06 00 00 
       70 63 04 13 
       00 00       
046036 01 00 00 01 0074*   	dl 1, 1, 6, 6, fn_mfd_gun_3, 20
       00 00 06 00 
       00 06 00 00 
       83 63 04 14 
       00 00       
046048 01 00 00 01 0075*   	dl 1, 1, 6, 6, fn_mfd_gun_4, 21
       00 00 06 00 
       00 06 00 00 
       96 63 04 15 
       00 00       
04605A 01 00 00 01 0076*   	dl 1, 1, 6, 6, fn_mfd_gun_5, 22
       00 00 06 00 
       00 06 00 00 
       A9 63 04 16 
       00 00       
04606C 01 00 00 04 0077*   	dl 1, 4, 6, 24, fn_mfd_maverick_0, 23
       00 00 06 00 
       00 18 00 00 
       BC 63 04 17 
       00 00       
04607E 01 00 00 04 0078*   	dl 1, 4, 6, 24, fn_mfd_maverick_1, 24
       00 00 06 00 
       00 18 00 00 
       D4 63 04 18 
       00 00       
046090 01 00 00 04 0079*   	dl 1, 4, 6, 24, fn_mfd_maverick_2, 25
       00 00 06 00 
       00 18 00 00 
       EC 63 04 19 
       00 00       
0460A2 01 00 00 04 0080*   	dl 1, 4, 6, 24, fn_mfd_maverick_3, 26
       00 00 06 00 
       00 18 00 00 
       04 64 04 1A 
       00 00       
0460B4 01 00 00 04 0081*   	dl 1, 4, 6, 24, fn_mfd_maverick_4, 27
       00 00 06 00 
       00 18 00 00 
       1C 64 04 1B 
       00 00       
0460C6 01 00 00 04 0082*   	dl 1, 4, 6, 24, fn_mfd_maverick_5, 28
       00 00 06 00 
       00 18 00 00 
       34 64 04 1C 
       00 00       
0460D8 01 00 00 03 0083*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_0, 29
       00 00 06 00 
       00 12 00 00 
       4C 64 04 1D 
       00 00       
0460EA 01 00 00 03 0084*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_1, 30
       00 00 06 00 
       00 12 00 00 
       66 64 04 1E 
       00 00       
0460FC 01 00 00 03 0085*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_2, 31
       00 00 06 00 
       00 12 00 00 
       80 64 04 1F 
       00 00       
04610E 01 00 00 03 0086*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_3, 32
       00 00 06 00 
       00 12 00 00 
       9A 64 04 20 
       00 00       
046120 01 00 00 03 0087*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_4, 33
       00 00 06 00 
       00 12 00 00 
       B4 64 04 21 
       00 00       
046132 01 00 00 03 0088*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_5, 34
       00 00 06 00 
       00 12 00 00 
       CE 64 04 22 
       00 00       
046144 01 00 00 03 0089*   	dl 1, 3, 7, 21, fn_mfd_sparrow_0, 35
       00 00 07 00 
       00 15 00 00 
       E8 64 04 23 
       00 00       
046156 01 00 00 03 0090*   	dl 1, 3, 7, 21, fn_mfd_sparrow_1, 36
       00 00 07 00 
       00 15 00 00 
       FF 64 04 24 
       00 00       
046168 01 00 00 03 0091*   	dl 1, 3, 7, 21, fn_mfd_sparrow_2, 37
       00 00 07 00 
       00 15 00 00 
       16 65 04 25 
       00 00       
04617A 01 00 00 03 0092*   	dl 1, 3, 7, 21, fn_mfd_sparrow_3, 38
       00 00 07 00 
       00 15 00 00 
       2D 65 04 26 
       00 00       
04618C 01 00 00 03 0093*   	dl 1, 3, 7, 21, fn_mfd_sparrow_4, 39
       00 00 07 00 
       00 15 00 00 
       44 65 04 27 
       00 00       
04619E 01 00 00 03 0094*   	dl 1, 3, 7, 21, fn_mfd_sparrow_5, 40
       00 00 07 00 
       00 15 00 00 
       5B 65 04 28 
       00 00       
0461B0 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_power, 41
       00 00 10 00 
       00 00 01 00 
       72 65 04 29 
       00 00       
0461C2 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_shield, 42
       00 00 10 00 
       00 00 01 00 
       81 65 04 2A 
       00 00       
0461D4 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_ship_mfd, 43
       00 00 10 00 
       00 00 01 00 
       91 65 04 2B 
       00 00       
0461E6 01 00 00 40 0098*   	dl 1, 320, 240, 76800, fn_splash_bg, 44
       01 00 F0 00 
       00 00 2C 01 
       A3 65 04 2C 
       00 00       
0461F8 01 00 00 A0 0099*   	dl 1, 160, 106, 16960, fn_splash_logo, 45
       00 00 6A 00 
       00 40 42 00 
       B6 65 04 2D 
       00 00       
04620A             0100*   
04620A             0101*   ; files_list: ; filename:
04620A 75 69 2F 62 0102*   fn_bar_h_0: db "ui/bar_h_0.rgba2",0
       61 72 5F 68 
       5F 30 2E 72 
       67 62 61 32 
       00          
04621B 75 69 2F 62 0103*   fn_bar_h_1: db "ui/bar_h_1.rgba2",0
       61 72 5F 68 
       5F 31 2E 72 
       67 62 61 32 
       00          
04622C 75 69 2F 62 0104*   fn_bar_h_2: db "ui/bar_h_2.rgba2",0
       61 72 5F 68 
       5F 32 2E 72 
       67 62 61 32 
       00          
04623D 75 69 2F 62 0105*   fn_bar_v_0: db "ui/bar_v_0.rgba2",0
       61 72 5F 76 
       5F 30 2E 72 
       67 62 61 32 
       00          
04624E 75 69 2F 62 0106*   fn_bar_v_1: db "ui/bar_v_1.rgba2",0
       61 72 5F 76 
       5F 31 2E 72 
       67 62 61 32 
       00          
04625F 75 69 2F 62 0107*   fn_bar_v_2: db "ui/bar_v_2.rgba2",0
       61 72 5F 76 
       5F 32 2E 72 
       67 62 61 32 
       00          
046270 75 69 2F 62 0108*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
046281 75 69 2F 62 0109*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
046292 75 69 2F 63 0110*   fn_credits: db "ui/credits.rgba2",0
       72 65 64 69 
       74 73 2E 72 
       67 62 61 32 
       00          
0462A3 75 69 2F 63 0111*   fn_ctl_panel_l: db "ui/ctl_panel_l.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
0462B8 75 69 2F 63 0112*   fn_ctl_panel_navball_sm: db "ui/ctl_panel_navball_sm.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 6E 61 76 
       62 61 6C 6C 
       5F 73 6D 2E 
       72 67 62 61 
       32 00       
0462D6 75 69 2F 63 0113*   fn_ctl_panel_r: db "ui/ctl_panel_r.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
0462EB 75 69 2F 63 0114*   fn_ctl_panel_top: db "ui/ctl_panel_top.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 74 6F 70 
       2E 72 67 62 
       61 32 00    
046302 75 69 2F 6A 0115*   fn_jerry_can: db "ui/jerry_can.rgba2",0
       65 72 72 79 
       5F 63 61 6E 
       2E 72 67 62 
       61 32 00    
046315 75 69 2F 6D 0116*   fn_mfd_arms: db "ui/mfd_arms.rgba2",0
       66 64 5F 61 
       72 6D 73 2E 
       72 67 62 61 
       32 00       
046327 75 69 2F 6D 0117*   fn_mfd_bezel: db "ui/mfd_bezel.rgba2",0
       66 64 5F 62 
       65 7A 65 6C 
       2E 72 67 62 
       61 32 00    
04633A 75 69 2F 6D 0118*   fn_mfd_bg: db "ui/mfd_bg.rgba2",0
       66 64 5F 62 
       67 2E 72 67 
       62 61 32 00 
04634A 75 69 2F 6D 0119*   fn_mfd_gun_0: db "ui/mfd_gun_0.rgba2",0
       66 64 5F 67 
       75 6E 5F 30 
       2E 72 67 62 
       61 32 00    
04635D 75 69 2F 6D 0120*   fn_mfd_gun_1: db "ui/mfd_gun_1.rgba2",0
       66 64 5F 67 
       75 6E 5F 31 
       2E 72 67 62 
       61 32 00    
046370 75 69 2F 6D 0121*   fn_mfd_gun_2: db "ui/mfd_gun_2.rgba2",0
       66 64 5F 67 
       75 6E 5F 32 
       2E 72 67 62 
       61 32 00    
046383 75 69 2F 6D 0122*   fn_mfd_gun_3: db "ui/mfd_gun_3.rgba2",0
       66 64 5F 67 
       75 6E 5F 33 
       2E 72 67 62 
       61 32 00    
046396 75 69 2F 6D 0123*   fn_mfd_gun_4: db "ui/mfd_gun_4.rgba2",0
       66 64 5F 67 
       75 6E 5F 34 
       2E 72 67 62 
       61 32 00    
0463A9 75 69 2F 6D 0124*   fn_mfd_gun_5: db "ui/mfd_gun_5.rgba2",0
       66 64 5F 67 
       75 6E 5F 35 
       2E 72 67 62 
       61 32 00    
0463BC 75 69 2F 6D 0125*   fn_mfd_maverick_0: db "ui/mfd_maverick_0.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       30 2E 72 67 
       62 61 32 00 
0463D4 75 69 2F 6D 0126*   fn_mfd_maverick_1: db "ui/mfd_maverick_1.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       31 2E 72 67 
       62 61 32 00 
0463EC 75 69 2F 6D 0127*   fn_mfd_maverick_2: db "ui/mfd_maverick_2.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       32 2E 72 67 
       62 61 32 00 
046404 75 69 2F 6D 0128*   fn_mfd_maverick_3: db "ui/mfd_maverick_3.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       33 2E 72 67 
       62 61 32 00 
04641C 75 69 2F 6D 0129*   fn_mfd_maverick_4: db "ui/mfd_maverick_4.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       34 2E 72 67 
       62 61 32 00 
046434 75 69 2F 6D 0130*   fn_mfd_maverick_5: db "ui/mfd_maverick_5.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       35 2E 72 67 
       62 61 32 00 
04644C 75 69 2F 6D 0131*   fn_mfd_sidewinder_0: db "ui/mfd_sidewinder_0.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 30 2E 
       72 67 62 61 
       32 00       
046466 75 69 2F 6D 0132*   fn_mfd_sidewinder_1: db "ui/mfd_sidewinder_1.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 31 2E 
       72 67 62 61 
       32 00       
046480 75 69 2F 6D 0133*   fn_mfd_sidewinder_2: db "ui/mfd_sidewinder_2.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 32 2E 
       72 67 62 61 
       32 00       
04649A 75 69 2F 6D 0134*   fn_mfd_sidewinder_3: db "ui/mfd_sidewinder_3.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 33 2E 
       72 67 62 61 
       32 00       
0464B4 75 69 2F 6D 0135*   fn_mfd_sidewinder_4: db "ui/mfd_sidewinder_4.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 34 2E 
       72 67 62 61 
       32 00       
0464CE 75 69 2F 6D 0136*   fn_mfd_sidewinder_5: db "ui/mfd_sidewinder_5.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 35 2E 
       72 67 62 61 
       32 00       
0464E8 75 69 2F 6D 0137*   fn_mfd_sparrow_0: db "ui/mfd_sparrow_0.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 30 
       2E 72 67 62 
       61 32 00    
0464FF 75 69 2F 6D 0138*   fn_mfd_sparrow_1: db "ui/mfd_sparrow_1.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 31 
       2E 72 67 62 
       61 32 00    
046516 75 69 2F 6D 0139*   fn_mfd_sparrow_2: db "ui/mfd_sparrow_2.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 32 
       2E 72 67 62 
       61 32 00    
04652D 75 69 2F 6D 0140*   fn_mfd_sparrow_3: db "ui/mfd_sparrow_3.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 33 
       2E 72 67 62 
       61 32 00    
046544 75 69 2F 6D 0141*   fn_mfd_sparrow_4: db "ui/mfd_sparrow_4.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 34 
       2E 72 67 62 
       61 32 00    
04655B 75 69 2F 6D 0142*   fn_mfd_sparrow_5: db "ui/mfd_sparrow_5.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 35 
       2E 72 67 62 
       61 32 00    
046572 75 69 2F 70 0143*   fn_power: db "ui/power.rgba2",0
       6F 77 65 72 
       2E 72 67 62 
       61 32 00    
046581 75 69 2F 73 0144*   fn_shield: db "ui/shield.rgba2",0
       68 69 65 6C 
       64 2E 72 67 
       62 61 32 00 
046591 75 69 2F 73 0145*   fn_ship_mfd: db "ui/ship_mfd.rgba2",0
       68 69 70 5F 
       6D 66 64 2E 
       72 67 62 61 
       32 00       
0465A3 75 69 2F 73 0146*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
0465B6 75 69 2F 73 0147*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
0465CB             0058        include "levels.inc"
0465CB             0001*   ; tileset indices
0465CB             0002*   tiles_dg: equ 0
0465CB             0003*   ; tiles_xevious: equ 1
0465CB 00 00 00    0004*   tileset_ptr_idx: dl 0
0465CE             0005*   tileset_ptrs:
0465CE             0006*       ; dl tiles_xevious_levels
0465CE 55 67 04    0007*       dl tileset_00_levels
0465D1 00 00 00    0008*   tileset_ptrs_end: dl 0 ; list terminator
0465D4             0009*   
0465D4             0010*   ; get a pointer to the current tileset
0465D4             0011*   ; inputs: tileset_ptr_idx
0465D4             0012*   ; returns: ix = pointer to tileset levels lut
0465D4             0013*   get_tileset_ptr:
0465D4 3A CB 65 04 0014*       ld a,(tileset_ptr_idx)
0465D8 57          0015*       ld d,a ; d = tileset index
0465D9 1E 03       0016*       ld e,3 ; three bytes per index record
0465DB ED 5C       0017*       mlt de ; offset into tileset_ptrs lut
0465DD DD 21 CE 65 0018*       ld ix,tileset_ptrs
       04          
0465E2 DD 19       0019*       add ix,de ; ix = pointer to tileset_ptrs record
0465E4 C9          0020*       ret
0465E5             0021*   ; end get_tileset_ptr
0465E5             0022*   
0465E5             0023*   ; intialize a tileset
0465E5             0024*   ; inputs: a = index into tileset_ptrs
0465E5             0025*   init_tileset:
0465E5 32 CB 65 04 0026*       ld (tileset_ptr_idx),a ; store new tileset index
0465E9 CD D4 65 04 0027*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
0465ED DD 37 00    0028*       ld ix,(ix) ; ix = pointer to tileset levels lut
0465F0 DD 7E FF    0029*       ld a,(ix-1) ; number of levels in the tileset
0465F3 32 23 66 04 0030*       ld (num_levels),a
0465F7 AF          0031*       xor a ; reset current level to zero
0465F8 32 22 66 04 0032*       ld (cur_level),a
0465FC C3 5C 66 04 0033*       jp init_level
046600             0034*   ; end init_tileset
046600             0035*   
046600             0036*   next_tileset:
046600 21 CB 65 04 0037*       ld hl,tileset_ptr_idx
046604 34          0038*       inc (hl) ; bump to next index
046605 CD D4 65 04 0039*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
046609 DD 27 00    0040*       ld hl,(ix) ; ix = pointer to tileset levels lut
04660C             0041*       sign_hlu ; check for list terminator (0)
04660C 19          0001*M1     add hl,de ; 1 cycle
04660D B7          0002*M1     or a ; clear flags ; 1 cycle
04660E ED 52       0003*M1     sbc hl,de ; 2 cycles
046610             0004*M1     ; 4 cycles total
046610 C2 1E 66 04 0042*       jp nz,@F ; not end of list
046614 3E FF       0043*       ld a,-1 ; will wrap around to zero on the next iteration
046616 32 CB 65 04 0044*       ld (tileset_ptr_idx),a
04661A C3 00 66 04 0045*       jp next_tileset ; try again
04661E             0046*   @@:
04661E C3 E5 65 04 0047*       jp init_tileset
046622             0048*   ; end next_tileset
046622             0049*   
046622 00          0050*   cur_level: db 0
046623 00          0051*   num_levels: db 0
046624             0052*   
046624             0053*   ; get a pointer to the current level lookup record
046624             0054*   ; inputs: tileset_ptr_idx, cur_level
046624             0055*   ; returns: ix = pointer to level definition
046624             0056*   get_level_ptr:
046624 CD D4 65 04 0057*       call get_tileset_ptr
046628 DD 37 00    0058*       ld ix,(ix) ; ix = pointer to tileset levels lut
04662B 3A 22 66 04 0059*       ld a,(cur_level)
04662F 57          0060*       ld d,a ; d = level index
046630 1E 03       0061*       ld e,3 ; three bytes per level record
046632 ED 5C       0062*       mlt de ; offset into tileset levels lut
046634 DD 19       0063*       add ix,de ; ix = pointer to level record
046636 C9          0064*       ret
046637             0065*   ; end get_level_ptr
046637             0066*   
046637             0067*   ; advance to the next level in the current tileset
046637             0068*   ; inputs: tileset_ptr_idx, cur_level
046637             0069*   next_level:
046637             0070*   ; update starting score
046637 2A 2C 7E 04 0071*       ld hl,(player_score)
04663B 22 2F 7E 04 0072*       ld (player_starting_score),hl
04663F             0073*   ; set up pointers to next map definition
04663F 21 22 66 04 0074*       ld hl,cur_level
046643 34          0075*       inc (hl) ; bump to next level
046644 CD 24 66 04 0076*       call get_level_ptr ; ix points to current level lookup record
046648 DD 27 00    0077*       ld hl,(ix) ; hl = pointer to next level lookup record
04664B             0078*       sign_hlu ; check for list terminator (0)
04664B 19          0001*M1     add hl,de ; 1 cycle
04664C B7          0002*M1     or a ; clear flags ; 1 cycle
04664D ED 52       0003*M1     sbc hl,de ; 2 cycles
04664F             0004*M1     ; 4 cycles total
04664F C2 5C 66 04 0079*       jp nz,@F ; not end of list
046653 AF          0080*       xor a ; reset level to zero
046654 32 22 66 04 0081*       ld (cur_level),a
046658 C3 00 66 04 0082*       jp next_tileset ; try next tileset
04665C             0083*   @@: ; fall through to init_level
04665C             0084*   ; end next_level
04665C             0085*   
04665C             0086*   ; inputs: tileset_ptr_idx, cur_level
04665C             0087*   init_level:
04665C             0088*   ; ; initialize sprites and active tiles table
04665C             0089*   ;     call sprites_init
04665C             0090*   ;     call table_init
04665C             0091*   ;     call tile_table_init
04665C             0092*   ; set pointers
04665C CD 24 66 04 0093*       call get_level_ptr ; ix points to level lookup record
046660 DD 37 00    0094*       ld ix,(ix) ; ix points to level definition
046663             0095*   ; set tiles_cols
046663 DD 7E 00    0096*       ld a,(ix+0)
046666 32 C0 89 04 0097*       ld (tiles_cols),a
04666A             0098*   ; set tiles_row counter
04666A DD 7E 01    0099*       ld a,(ix+1)
04666D 32 BD 89 04 0100*       ld (tiles_row),a
046671             0101*   ; set cur_baseBufferId
046671 DD 27 04    0102*       ld hl,(ix+4)
046674 22 C1 89 04 0103*       ld (cur_baseBufferId),hl
046678             0104*   ; set tiles_row_defs
046678 ED 32 07    0105*       lea ix,ix+7 ; ix points to definition of first tile of first row
04667B DD 22 BA 89 0106*       ld (tiles_row_defs),ix
       04          
046680             0107*   ; reset tile rows and plot coordinates
046680 21 FF FF FF 0108*       ld hl,-1
046684 22 BA 8A 04 0109*       ld (bg_y_plot),hl
046688 23          0110*       inc hl
046689 22 C5 89 04 0111*       ld (tiles_x_plot),hl
04668D 21 F1 FF FF 0112*       ld hl,-15
046691 22 C9 89 04 0113*       ld (tiles_y_plot),hl
046695             0114*   ; print level number, score, and countdown to start
046695 CD 2C 67 04 0115*       call print_level
046699 CD 47 7E 04 0116*       call print_score
04669D CD CB 66 04 0117*       call start_level_countdown
0466A1 C9          0118*       ret
0466A2             0119*   ; end init_level
0466A2             0120*   
0466A2             0121*   init_bg:
0466A2             0122*   ; draw initial background tiles
0466A2 21 00 04 00 0123*       ld hl,BUF_BG_STARS_0
0466A6 CD 3A 14 04 0124*       call vdu_buff_select
0466AA 01 00 00 00 0125*       ld bc,0
0466AE 11 00 00 00 0126*       ld de,field_top
0466B2 CD 3A 18 04 0127*       call vdu_plot_bmp
0466B6 21 02 04 00 0128*       ld hl,BUF_BG_STARS_4
0466BA CD 3A 14 04 0129*       call vdu_buff_select
0466BE 01 00 00 00 0130*       ld bc,0
0466C2 11 00 01 00 0131*       ld de,field_top+256
0466C6 CD 3A 18 04 0132*       call vdu_plot_bmp
0466CA C9          0133*       ret
0466CB             0134*   ; end init_level
0466CB             0135*   start_level_countdown:
0466CB             0136*   ; set gfx origin and viewport to playing field window
0466CB CD B9 7E 04 0137*       call set_gfx_playing_field
0466CF CD A2 66 04 0138*       call init_bg
0466D3             0139*   ; set text colors
0466D3 3E 90       0140*       ld a,16+128 ; darkest blue
0466D5 CD 76 13 04 0141*       call vdu_colour_text
0466D9 3E 3A       0142*       ld a,58 ; dark orange
0466DB CD 76 13 04 0143*       call vdu_colour_text
0466DF             0144*   ; print get ready message
0466DF 0E 1B       0145*       ld c,27 ; x
0466E1 06 10       0146*       ld b,16 ; y
0466E3 CD 31 13 04 0147*       call vdu_move_cursor
0466E7 CD 60 00 04 0148*       call printInline
0466EB 47 65 74 20 0149*       asciz "Get Ready!"
       52 65 61 64 
       79 21 00    
0466F6             0150*   ; countdown to restart
0466F6 0E 18       0151*       ld c,24 ; x
0466F8 06 11       0152*       ld b,17 ; y
0466FA CD 31 13 04 0153*       call vdu_move_cursor
0466FE CD 60 00 04 0154*       call printInline
046702 53 74 61 72 0155*       asciz "Starting In..."
       74 69 6E 67 
       20 49 6E 2E 
       2E 2E 00    
046711 06 06       0156*       ld b,6 ; loop counter
046713             0157*   @waitLoop:
046713 C5          0158*       push bc
046714 78          0159*       ld a,b
046715 3D          0160*       dec a
046716 CD 7F 8E 04 0161*       call printHexA
04671A 0E 26       0162*       ld c,38 ; x
04671C 06 11       0163*       ld b,17 ; y
04671E CD 31 13 04 0164*       call vdu_move_cursor
046722 3E 80       0165*       ld a,%10000000 ; bit 7 changes once per second
046724 CD DA 12 04 0166*       call multiPurposeDelay
046728 C1          0167*       pop bc
046729 10 E8       0168*       djnz @waitLoop
04672B C9          0169*       ret
04672C             0170*   ; end start_level_countdown
04672C             0171*   
04672C             0172*   level_x: equ 39
04672C             0173*   level_y: equ 1
04672C             0174*   print_level:
04672C             0175*   ; set text colors
04672C 3E 80       0176*       ld a,c_black+128
04672E CD 76 13 04 0177*       call vdu_colour_text
046732 3E 0A       0178*       ld a,c_green
046734 CD 76 13 04 0179*       call vdu_colour_text
046738             0180*   ; set text coordinates and print
046738 0E 27       0181*       ld c,level_x
04673A 06 01       0182*       ld b,level_y
04673C CD 31 13 04 0183*       call vdu_move_cursor
046740 CD 60 00 04 0184*       call printInline
046744 4C 65 76 65 0185*       asciz "Level "
       6C 20 00    
04674B 3A 22 66 04 0186*       ld a,(cur_level)
04674F CD 7F 8E 04 0187*       call printHexA
046753 C9          0188*       ret
046754             0189*   ; end print_level
046754             0059        include "levels_tileset_0.inc"
046754             0001*   ; Generated from tiles/dg/dg0_03.tmx
046754             0002*   
046754 01          0003*   tileset_00_num_levels: db 1
046755             0004*   
046755             0005*   tileset_00_levels:
046755 5B 67 04    0006*   	dl tileset_00_level_00
046758 00 00 00    0007*   	dl 0 ; list terminator
04675B             0008*   
04675B             0009*   tileset_00_level_00: ; Level 0
04675B 10          0010*   	db 16          ; num cols
04675C 00 01 00    0011*   	dl 256          ; num rows
04675F 00 02 00    0012*   	dl 512 ; base bufferId
046762 F8 F8 F8 F8 0013*   	db 248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248
       F8 F8 F8 F8 
       F8 F8 F8 F8 
       F8 F8 F8 F8 
046772 00 00 00 00 0014*   	db 000,000,000,000,000,000,147,000,089,090,091,000,147,000,000,000
       00 00 93 00 
       59 5A 5B 00 
       93 00 00 00 
046782 00 CE CF D0 0015*   	db 000,206,207,208,000,000,147,000,073,005,075,000,147,000,000,000
       00 00 93 00 
       49 05 4B 00 
       93 00 00 00 
046792 81 BE 79 A7 0016*   	db 129,190,121,167,216,216,182,145,057,058,059,145,147,000,000,000
       D8 D8 B6 91 
       39 3A 3B 91 
       93 00 00 00 
0467A2 00 AE AF B0 0017*   	db 000,174,175,176,000,206,183,208,000,000,000,206,207,207,208,000
       00 CE B7 D0 
       00 00 00 CE 
       CF CF D0 00 
0467B2 00 00 83 00 0018*   	db 000,000,131,000,000,190,156,171,220,220,220,220,186,192,192,129
       00 BE 9C AB 
       DC DC DC DC 
       BA C0 C0 81 
0467C2 00 00 83 00 0019*   	db 000,000,131,000,000,174,184,176,000,000,000,131,219,191,131,000
       00 AE B8 B0 
       00 00 00 83 
       DB BF 83 00 
0467D2 00 CE CF D0 0020*   	db 000,206,207,208,000,000,215,000,000,000,000,131,187,191,131,000
       00 00 D7 00 
       00 00 00 83 
       BB BF 83 00 
0467E2 81 BE 69 A7 0021*   	db 129,190,105,167,216,216,166,129,129,129,129,131,136,137,131,000
       D8 D8 A6 81 
       81 81 81 83 
       88 89 83 00 
0467F2 00 AE AF B0 0022*   	db 000,174,175,176,000,000,131,000,000,000,000,131,134,135,131,000
       00 00 83 00 
       00 00 00 83 
       86 87 83 00 
046802 00 00 83 00 0023*   	db 000,000,131,000,000,000,131,000,000,000,000,131,134,135,131,000
       00 00 83 00 
       00 00 00 83 
       86 87 83 00 
046812 00 00 83 00 0024*   	db 000,000,131,000,000,000,131,000,000,000,000,131,150,151,131,000
       00 00 83 00 
       00 00 00 83 
       96 97 83 00 
046822 00 CE CF D0 0025*   	db 000,206,207,208,000,000,131,000,000,000,000,131,150,151,131,000
       00 00 83 00 
       00 00 00 83 
       96 97 83 00 
046832 81 BE 79 A7 0026*   	db 129,190,121,167,216,216,231,216,216,216,216,168,154,155,131,000
       D8 D8 E7 D8 
       D8 D8 D8 A8 
       9A 9B 83 00 
046842 00 AE AF B0 0027*   	db 000,174,175,176,000,206,183,208,000,000,000,174,175,175,176,000
       00 CE B7 D0 
       00 00 00 AE 
       AF AF B0 00 
046852 00 00 83 00 0028*   	db 000,000,131,000,000,190,156,192,000,000,000,000,131,000,000,000
       00 BE 9C C0 
       00 00 00 00 
       83 00 00 00 
046862 00 00 83 00 0029*   	db 000,000,131,000,000,174,184,176,000,000,000,000,131,000,000,000
       00 AE B8 B0 
       00 00 00 00 
       83 00 00 00 
046872 00 CE CF D0 0030*   	db 000,206,207,208,000,000,215,000,000,206,140,140,140,140,208,000
       00 00 D7 00 
       00 CE 8C 8C 
       8C 8C D0 00 
046882 81 BE 79 A7 0031*   	db 129,190,121,167,216,216,166,000,000,140,081,082,083,084,140,129
       D8 D8 A6 00 
       00 8C 51 52 
       53 54 8C 81 
046892 00 AE AF B0 0032*   	db 000,174,175,176,000,000,131,000,000,140,065,092,093,068,140,000
       00 00 83 00 
       00 8C 41 5C 
       5D 44 8C 00 
0468A2 00 00 83 00 0033*   	db 000,000,131,000,000,000,131,129,129,140,049,076,077,052,140,000
       00 00 83 81 
       81 8C 31 4C 
       4D 34 8C 00 
0468B2 00 00 83 00 0034*   	db 000,000,131,000,000,000,131,000,000,140,033,034,035,036,140,129
       00 00 83 00 
       00 8C 21 22 
       23 24 8C 81 
0468C2 00 CE CF D0 0035*   	db 000,206,207,208,000,000,131,000,000,174,140,140,140,140,176,000
       00 00 83 00 
       00 AE 8C 8C 
       8C 8C B0 00 
0468D2 81 BE 69 A7 0036*   	db 129,190,105,167,216,216,182,000,000,000,000,000,000,000,000,000
       D8 D8 B6 00 
       00 00 00 00 
       00 00 00 00 
0468E2 00 AE AF B0 0037*   	db 000,174,175,176,000,206,183,208,000,000,000,000,000,000,000,000
       00 CE B7 D0 
       00 00 00 00 
       00 00 00 00 
0468F2 00 00 83 00 0038*   	db 000,000,131,000,000,190,156,192,009,010,010,010,010,010,010,011
       00 BE 9C C0 
       09 0A 0A 0A 
       0A 0A 0A 0B 
046902 00 00 83 00 0039*   	db 000,000,131,000,000,174,184,176,000,000,000,000,000,000,000,000
       00 AE B8 B0 
       00 00 00 00 
       00 00 00 00 
046912 00 CE CF D0 0040*   	db 000,206,207,208,000,000,215,145,145,081,082,088,083,084,145,145
       00 00 D7 91 
       91 51 52 58 
       53 54 91 91 
046922 81 BE 79 A7 0041*   	db 129,190,121,167,216,216,166,000,000,065,156,248,156,068,000,000
       D8 D8 A6 00 
       00 41 9C F8 
       9C 44 00 00 
046932 00 AE AF B4 0042*   	db 000,174,175,180,000,000,147,000,000,071,248,001,248,087,000,000
       00 00 93 00 
       00 47 F8 01 
       F8 57 00 00 
046942 00 00 00 D3 0043*   	db 000,000,000,211,000,000,147,000,000,049,156,248,156,052,000,000
       00 00 93 00 
       00 31 9C F8 
       9C 34 00 00 
046952 91 91 91 D3 0044*   	db 145,145,145,211,145,145,145,145,145,033,034,072,035,036,145,145
       91 91 91 91 
       91 21 22 48 
       23 24 91 91 
046962 BF 93 98 D3 0045*   	db 191,147,152,211,153,147,191,191,191,147,191,191,191,147,191,191
       99 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046972 BF 93 96 D3 0046*   	db 191,147,150,211,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046982 BF 93 96 04 0047*   	db 191,147,150,004,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046992 BF 93 96 04 0048*   	db 191,147,150,004,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
0469A2 BF 93 86 DB 0049*   	db 191,147,134,219,135,147,191,191,191,147,191,191,191,147,191,191
       87 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
0469B2 BF 93 8A DB 0050*   	db 191,147,138,219,139,147,191,191,191,147,191,191,191,147,191,191
       8B 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
0469C2 91 91 91 DB 0051*   	db 145,145,145,219,145,145,145,145,145,145,145,145,145,145,145,145
       91 91 91 91 
       91 91 91 91 
       91 91 91 91 
0469D2 00 83 00 DB 0052*   	db 000,131,000,219,000,131,000,000,000,131,000,000,000,131,000,000
       00 83 00 00 
       00 83 00 00 
       00 83 00 00 
0469E2 00 83 00 DB 0053*   	db 000,131,000,219,000,131,000,000,000,131,000,000,000,131,000,000
       00 83 00 00 
       00 83 00 00 
       00 83 00 00 
0469F2 DC DC DC EC 0054*   	db 220,220,220,236,220,220,220,220,220,220,220,235,220,220,220,220
       DC DC DC DC 
       DC DC DC EB 
       DC DC DC DC 
046A02 00 83 00 00 0055*   	db 000,131,000,000,000,131,000,136,137,131,000,219,000,131,000,000
       00 83 00 88 
       89 83 00 DB 
       00 83 00 00 
046A12 00 83 00 00 0056*   	db 000,131,000,000,000,131,000,134,135,131,000,219,000,131,000,000
       00 83 00 86 
       87 83 00 DB 
       00 83 00 00 
046A22 00 83 00 00 0057*   	db 000,131,000,000,000,131,000,150,151,131,000,219,000,131,000,000
       00 83 00 96 
       97 83 00 DB 
       00 83 00 00 
046A32 00 83 00 00 0058*   	db 000,131,000,000,000,131,000,154,155,131,000,187,000,131,000,000
       00 83 00 9A 
       9B 83 00 BB 
       00 83 00 00 
046A42 81 81 81 81 0059*   	db 129,129,129,129,129,129,129,184,129,129,136,137,129,129,129,129
       81 81 81 B8 
       81 81 88 89 
       81 81 81 81 
046A52 BF BF D0 00 0060*   	db 191,191,208,000,000,206,191,215,191,191,134,135,009,010,010,011
       00 CE BF D7 
       BF BF 86 87 
       09 0A 0A 0B 
046A62 BF BF BF D0 0061*   	db 191,191,191,208,206,191,191,215,191,191,134,135,191,191,191,191
       CE BF BF D7 
       BF BF 86 87 
       BF BF BF BF 
046A72 59 5A 5B BF 0062*   	db 089,090,091,191,191,004,191,215,191,191,150,151,191,191,248,191
       BF 04 BF D7 
       BF BF 96 97 
       BF BF F8 BF 
046A82 49 05 4B BF 0063*   	db 073,005,075,191,191,004,167,200,191,191,150,151,191,248,001,248
       BF 04 A7 C8 
       BF BF 96 97 
       BF F8 01 F8 
046A92 39 3A 3B BF 0064*   	db 057,058,059,191,191,004,191,215,191,191,154,155,191,191,248,191
       BF 04 BF D7 
       BF BF 9A 9B 
       BF BF F8 BF 
046AA2 BF BF BF B0 0065*   	db 191,191,191,176,174,191,191,215,191,191,184,191,191,191,191,191
       AE BF BF D7 
       BF BF B8 BF 
       BF BF BF BF 
046AB2 BF BF B0 00 0066*   	db 191,191,176,000,000,174,191,165,216,216,232,216,216,216,216,216
       00 AE BF A5 
       D8 D8 E8 D8 
       D8 D8 D8 D8 
046AC2 00 00 00 00 0067*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
046AD2 81 81 81 81 0068*   	db 129,129,129,129,129,129,131,000,131,000,000,000,000,000,000,000
       81 81 83 00 
       83 00 00 00 
       00 00 00 00 
046AE2 00 00 00 00 0069*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
046AF2 00 00 00 00 0070*   	db 000,000,000,000,000,000,131,000,131,129,129,129,129,129,129,129
       00 00 83 00 
       83 81 81 81 
       81 81 81 81 
046B02 00 00 00 00 0071*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
046B12 00 00 00 00 0072*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
046B22 95 95 95 95 0073*   	db 149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149
       95 95 95 95 
       95 95 95 95 
       95 95 95 95 
046B32 00 00 00 00 0074*   	db 000,000,000,000,000,206,191,191,191,208,000,000,000,000,000,000
       00 CE BF BF 
       BF D0 00 00 
       00 00 00 00 
046B42 BF BF BF BF 0075*   	db 191,191,191,191,191,191,089,090,091,191,191,191,191,191,191,191
       BF BF 59 5A 
       5B BF BF BF 
       BF BF BF BF 
046B52 BF BF BF BF 0076*   	db 191,191,191,191,191,191,073,005,075,191,191,191,191,191,191,191
       BF BF 49 05 
       4B BF BF BF 
       BF BF BF BF 
046B62 BF BF BF BF 0077*   	db 191,191,191,191,191,191,057,058,059,191,191,191,191,191,191,191
       BF BF 39 3A 
       3B BF BF BF 
       BF BF BF BF 
046B72 00 00 00 00 0078*   	db 000,000,000,000,000,174,191,191,191,176,000,000,000,000,000,000
       00 AE BF BF 
       BF B0 00 00 
       00 00 00 00 
046B82 85 85 85 85 0079*   	db 133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133
       85 85 85 85 
       85 85 85 85 
       85 85 85 85 
046B92 00 00 83 00 0080*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,000,147,000
       83 00 00 00 
       83 00 00 00 
       00 00 93 00 
046BA2 00 00 83 00 0081*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,000,147,000
       83 00 00 00 
       83 00 00 00 
       00 00 93 00 
046BB2 00 00 83 00 0082*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,206,207,208
       83 00 00 00 
       83 00 00 00 
       00 CE CF D0 
046BC2 00 00 83 00 0083*   	db 000,000,131,000,131,000,000,000,131,000,000,000,206,191,248,191
       83 00 00 00 
       83 00 00 00 
       CE BF F8 BF 
046BD2 81 81 81 81 0084*   	db 129,129,129,129,129,129,129,129,129,129,129,129,190,248,001,248
       81 81 81 81 
       81 81 81 81 
       BE F8 01 F8 
046BE2 00 00 83 00 0085*   	db 000,000,131,000,131,000,000,000,131,000,000,000,174,191,248,191
       83 00 00 00 
       83 00 00 00 
       AE BF F8 BF 
046BF2 00 00 83 00 0086*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,190,191,191
       83 00 00 00 
       83 00 00 00 
       00 BE BF BF 
046C02 00 00 83 00 0087*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,190,191,191
       83 00 00 00 
       83 00 00 00 
       00 BE BF BF 
046C12 00 00 83 00 0088*   	db 000,000,131,000,131,000,000,000,131,000,000,000,206,191,191,191
       83 00 00 00 
       83 00 00 00 
       CE BF BF BF 
046C22 00 CE 09 0A 0089*   	db 000,206,009,010,011,208,000,000,131,000,000,206,191,191,191,191
       0B D0 00 00 
       83 00 00 CE 
       BF BF BF BF 
046C32 BF BF 59 5A 0090*   	db 191,191,089,090,091,191,191,191,191,191,191,191,191,191,092,093
       5B BF BF BF 
       BF BF BF BF 
       BF BF 5C 5D 
046C42 BF BF 49 05 0091*   	db 191,191,073,005,075,191,191,191,191,191,191,191,191,191,076,077
       4B BF BF BF 
       BF BF BF BF 
       BF BF 4C 4D 
046C52 BF BF 39 3A 0092*   	db 191,191,057,058,059,191,191,191,191,191,191,191,191,191,191,191
       3B BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
046C62 00 AE BF BF 0093*   	db 000,174,191,191,191,191,191,191,191,191,176,000,174,175,175,175
       BF BF BF BF 
       BF BF B0 00 
       AE AF AF AF 
046C72 00 00 83 00 0094*   	db 000,000,131,000,131,000,174,191,191,191,000,000,000,000,131,000
       83 00 AE BF 
       BF BF 00 00 
       00 00 83 00 
046C82 00 00 83 00 0095*   	db 000,000,131,000,131,000,000,191,191,191,000,000,000,000,131,000
       83 00 00 BF 
       BF BF 00 00 
       00 00 83 00 
046C92 00 00 83 00 0096*   	db 000,000,131,000,131,000,000,191,191,191,000,000,000,000,131,000
       83 00 00 BF 
       BF BF 00 00 
       00 00 83 00 
046CA2 84 84 84 84 0097*   	db 132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132
       84 84 84 84 
       84 84 84 84 
       84 84 84 84 
046CB2 00 00 00 00 0098*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046CC2 00 00 00 00 0099*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046CD2 00 00 00 00 0100*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046CE2 00 CE CF CF 0101*   	db 000,206,207,207,208,000,000,009,010,011,000,000,000,000,000,000
       D0 00 00 09 
       0A 0B 00 00 
       00 00 00 00 
046CF2 00 BE 98 99 0102*   	db 000,190,152,153,192,000,000,191,248,191,000,000,000,000,000,000
       C0 00 00 BF 
       F8 BF 00 00 
       00 00 00 00 
046D02 00 BE 96 97 0103*   	db 000,190,150,151,192,145,145,248,001,248,000,000,000,000,000,000
       C0 91 91 F8 
       01 F8 00 00 
       00 00 00 00 
046D12 00 BE 96 97 0104*   	db 000,190,150,151,192,000,000,191,248,191,000,000,000,000,000,000
       C0 00 00 BF 
       F8 BF 00 00 
       00 00 00 00 
046D22 00 BE 96 97 0105*   	db 000,190,150,151,192,000,000,191,191,191,000,000,000,000,000,000
       C0 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046D32 00 BE 8A 8B 0106*   	db 000,190,138,139,192,145,145,191,191,191,000,000,000,000,000,000
       C0 91 91 BF 
       BF BF 00 00 
       00 00 00 00 
046D42 00 AE BF BC 0107*   	db 000,174,191,188,176,000,000,191,191,191,000,206,207,207,208,000
       B0 00 00 BF 
       BF BF 00 CE 
       CF CF D0 00 
046D52 00 00 BE DB 0108*   	db 000,000,190,219,000,000,000,191,191,191,145,190,152,153,192,000
       00 00 00 BF 
       BF BF 91 BE 
       98 99 C0 00 
046D62 BF BF BF DB 0109*   	db 191,191,191,219,208,000,206,191,191,191,000,190,150,151,192,000
       D0 00 CE BF 
       BF BF 00 BE 
       96 97 C0 00 
046D72 59 5A 5B DB 0110*   	db 089,090,091,219,191,191,191,191,167,216,216,168,150,151,192,000
       BF BF BF BF 
       A7 D8 D8 A8 
       96 97 C0 00 
046D82 49 05 4B AA 0111*   	db 073,005,075,170,191,191,191,191,191,191,000,190,150,151,192,000
       BF BF BF BF 
       BF BF 00 BE 
       96 97 C0 00 
046D92 39 3A 3B BF 0112*   	db 057,058,059,191,191,191,191,191,191,191,145,190,138,139,192,000
       BF BF BF BF 
       BF BF 91 BE 
       8A 8B C0 00 
046DA2 BF BF B0 93 0113*   	db 191,191,176,147,000,000,174,191,191,191,000,174,188,175,176,000
       00 00 AE BF 
       BF BF 00 AE 
       BC AF B0 00 
046DB2 00 00 00 93 0114*   	db 000,000,000,147,000,000,000,191,008,191,000,000,219,192,000,000
       00 00 00 BF 
       08 BF 00 00 
       DB C0 00 00 
046DC2 00 00 00 93 0115*   	db 000,000,000,147,000,000,000,191,008,220,220,220,170,192,000,000
       00 00 00 BF 
       08 DC DC DC 
       AA C0 00 00 
046DD2 00 00 00 93 0116*   	db 000,000,000,147,000,000,000,191,008,191,175,175,175,176,000,000
       00 00 00 BF 
       08 BF AF AF 
       AF B0 00 00 
046DE2 00 00 00 93 0117*   	db 000,000,000,147,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046DF2 00 00 CE CF 0118*   	db 000,000,206,207,208,000,000,191,191,191,000,000,000,000,000,000
       D0 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046E02 00 CE BF F8 0119*   	db 000,206,191,248,191,208,000,191,191,191,208,000,206,191,191,191
       BF D0 00 BF 
       BF BF D0 00 
       CE BF BF BF 
046E12 81 BE F8 01 0120*   	db 129,190,248,001,248,191,191,191,191,191,191,191,191,089,090,091
       F8 BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
046E22 00 AE AF F8 0121*   	db 000,174,175,248,191,191,191,191,191,191,191,191,191,073,005,075
       BF BF BF BF 
       BF BF BF BF 
       BF 49 05 4B 
046E32 00 00 AE BF 0122*   	db 000,000,174,191,176,000,174,191,191,191,191,191,191,057,058,059
       B0 00 AE BF 
       BF BF BF BF 
       BF 39 3A 3B 
046E42 00 00 00 83 0123*   	db 000,000,000,131,000,000,000,000,131,000,000,000,174,191,191,191
       00 00 00 00 
       83 00 00 00 
       AE BF BF BF 
046E52 7A 7B 7A 7B 0124*   	db 122,123,122,123,122,123,122,123,122,123,122,123,122,123,122,123
       7A 7B 7A 7B 
       7A 7B 7A 7B 
       7A 7B 7A 7B 
046E62 6A 6B 6A 6B 0125*   	db 106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107
       6A 6B 6A 6B 
       6A 6B 6A 6B 
       6A 6B 6A 6B 
046E72 00 93 00 93 0126*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046E82 00 93 00 93 0127*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046E92 00 93 00 93 0128*   	db 000,147,000,147,108,108,108,108,108,108,147,000,147,000,000,147
       6C 6C 6C 6C 
       6C 6C 93 00 
       93 00 00 93 
046EA2 00 93 00 93 0129*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,108,108,108
       00 00 00 00 
       00 00 93 00 
       93 6C 6C 6C 
046EB2 00 93 00 93 0130*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046EC2 00 93 00 93 0131*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046ED2 CE BF BF BF 0132*   	db 206,191,191,191,208,000,000,000,000,206,191,191,191,208,206,191
       D0 00 00 00 
       00 CE BF BF 
       BF D0 CE BF 
046EE2 BF 59 5A 5B 0133*   	db 191,089,090,091,191,191,191,191,191,191,089,090,091,191,191,191
       BF BF BF BF 
       BF BF 59 5A 
       5B BF BF BF 
046EF2 BF 49 05 4B 0134*   	db 191,073,005,075,191,191,191,191,191,191,073,005,075,191,191,191
       BF BF BF BF 
       BF BF 49 05 
       4B BF BF BF 
046F02 BF 39 3A 3B 0135*   	db 191,057,058,059,191,191,191,191,191,191,057,058,059,191,191,191
       BF BF BF BF 
       BF BF 39 3A 
       3B BF BF BF 
046F12 AE BF BF BF 0136*   	db 174,191,191,191,176,000,000,000,000,174,191,191,191,176,174,191
       B0 00 00 00 
       00 AE BF BF 
       BF B0 AE BF 
046F22 00 00 00 00 0137*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
046F32 00 00 00 00 0138*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
046F42 00 00 00 00 0139*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
046F52 00 00 00 00 0140*   	db 000,000,000,000,000,000,000,000,000,206,248,208,000,000,000,000
       00 00 00 00 
       00 CE F8 D0 
       00 00 00 00 
046F62 09 0A 0A 0A 0141*   	db 009,010,010,010,010,010,010,010,011,248,001,248,145,145,145,145
       0A 0A 0A 0A 
       0B F8 01 F8 
       91 91 91 91 
046F72 00 00 00 00 0142*   	db 000,000,000,000,000,000,000,000,000,174,248,176,000,000,000,000
       00 00 00 00 
       00 AE F8 B0 
       00 00 00 00 
046F82 00 00 00 00 0143*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046F92 00 00 00 00 0144*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046FA2 00 00 00 00 0145*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046FB2 00 00 CE CF 0146*   	db 000,000,206,207,207,207,208,000,000,000,000,000,000,000,000,000
       CF CF D0 00 
       00 00 00 00 
       00 00 00 00 
046FC2 81 81 BE 59 0147*   	db 129,129,190,089,090,091,192,207,207,207,207,208,000,000,000,000
       5A 5B C0 CF 
       CF CF CF D0 
       00 00 00 00 
046FD2 00 00 BE 49 0148*   	db 000,000,190,073,005,075,167,216,216,216,216,182,208,000,000,000
       05 4B A7 D8 
       D8 D8 D8 B6 
       D0 00 00 00 
046FE2 81 81 BE 39 0149*   	db 129,129,190,057,058,059,192,176,000,000,000,215,192,000,000,000
       3A 3B C0 B0 
       00 00 00 D7 
       C0 00 00 00 
046FF2 00 00 AE AF 0150*   	db 000,000,174,175,175,175,176,000,000,000,000,215,192,000,000,000
       AF AF B0 00 
       00 00 00 D7 
       C0 00 00 00 
047002 00 00 00 83 0151*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
047012 00 00 00 83 0152*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
047022 00 00 00 83 0153*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
047032 00 00 00 83 0154*   	db 000,000,000,131,000,131,000,000,000,206,207,207,207,208,000,000
       00 83 00 00 
       00 CE CF CF 
       CF D0 00 00 
047042 81 81 81 81 0155*   	db 129,129,129,129,129,129,129,129,129,190,089,090,091,192,129,129
       81 81 81 81 
       81 BE 59 5A 
       5B C0 81 81 
047052 00 00 00 00 0156*   	db 000,000,000,000,000,000,000,000,000,190,073,005,075,192,000,000
       00 00 00 00 
       00 BE 49 05 
       4B C0 00 00 
047062 81 81 81 81 0157*   	db 129,129,129,129,129,129,129,129,129,190,057,058,059,192,129,129
       81 81 81 81 
       81 BE 39 3A 
       3B C0 81 81 
047072 00 00 00 83 0158*   	db 000,000,000,131,000,131,000,000,000,174,175,180,175,176,000,000
       00 83 00 00 
       00 AE AF B4 
       AF B0 00 00 
047082 00 00 00 83 0159*   	db 000,000,000,131,000,131,000,000,000,000,191,179,000,000,000,000
       00 83 00 00 
       00 00 BF B3 
       00 00 00 00 
047092 09 0A 0A 0A 0160*   	db 009,010,010,010,010,010,010,010,010,010,010,010,010,010,010,011
       0A 0A 0A 0A 
       0A 0A 0A 0A 
       0A 0A 0A 0B 
0470A2 00 00 00 83 0161*   	db 000,000,000,131,000,131,000,000,000,000,191,180,000,000,000,000
       00 83 00 00 
       00 00 BF B4 
       00 00 00 00 
0470B2 00 00 CE CF 0162*   	db 000,000,206,207,207,207,208,000,000,000,191,211,000,000,000,000
       CF CF D0 00 
       00 00 BF D3 
       00 00 00 00 
0470C2 00 00 BE 59 0163*   	db 000,000,190,089,090,091,192,000,000,000,191,211,000,000,000,000
       5A 5B C0 00 
       00 00 BF D3 
       00 00 00 00 
0470D2 00 00 BE 49 0164*   	db 000,000,190,073,005,075,192,000,000,206,191,248,208,000,000,000
       05 4B C0 00 
       00 CE BF F8 
       D0 00 00 00 
0470E2 81 81 BE 39 0165*   	db 129,129,190,057,058,059,171,220,220,220,248,001,248,145,145,145
       3A 3B AB DC 
       DC DC F8 01 
       F8 91 91 91 
0470F2 00 83 AE AF 0166*   	db 000,131,174,175,175,175,176,000,000,000,174,248,176,000,000,000
       AF AF B0 00 
       00 00 AE F8 
       B0 00 00 00 
047102 00 83 00 83 0167*   	db 000,131,000,131,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047112 CE CF CF CF 0168*   	db 206,207,207,207,208,000,000,000,000,000,000,000,000,000,000,000
       D0 00 00 00 
       00 00 00 00 
       00 00 00 00 
047122 09 0A 0A 0A 0169*   	db 009,010,010,010,011,000,000,000,000,000,000,000,000,000,000,000
       0B 00 00 00 
       00 00 00 00 
       00 00 00 00 
047132 BE CF CF CF 0170*   	db 190,207,207,207,192,000,000,000,000,000,000,000,000,000,000,000
       C0 00 00 00 
       00 00 00 00 
       00 00 00 00 
047142 BE BF 04 BF 0171*   	db 190,191,004,191,192,000,000,000,000,000,000,000,000,000,000,000
       C0 00 00 00 
       00 00 00 00 
       00 00 00 00 
047152 BE BF 04 BF 0172*   	db 190,191,004,191,191,000,000,206,207,207,207,208,000,000,000,000
       BF 00 00 CE 
       CF CF CF D0 
       00 00 00 00 
047162 BE BF 04 BF 0173*   	db 190,191,004,191,192,129,129,190,089,090,091,192,000,000,000,000
       C0 81 81 BE 
       59 5A 5B C0 
       00 00 00 00 
047172 AE AF AF AF 0174*   	db 174,175,175,175,176,000,000,190,073,005,075,167,216,216,182,000
       B0 00 00 BE 
       49 05 4B A7 
       D8 D8 B6 00 
047182 00 00 00 00 0175*   	db 000,000,000,000,000,000,000,190,057,058,059,192,000,000,215,000
       00 00 00 BE 
       39 3A 3B C0 
       00 00 D7 00 
047192 00 00 00 00 0176*   	db 000,000,000,000,000,000,000,174,175,175,175,176,000,000,215,000
       00 00 00 AE 
       AF AF AF B0 
       00 00 D7 00 
0471A2 00 00 00 00 0177*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
0471B2 00 00 00 00 0178*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
0471C2 00 00 00 00 0179*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
0471D2 00 00 00 00 0180*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
0471E2 00 00 00 00 0181*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
0471F2 CF CF CF D0 0182*   	db 207,207,207,208,000,000,000,000,147,000,147,000,206,207,183,207
       00 00 00 00 
       93 00 93 00 
       CE CF B7 CF 
047202 59 5A 5B C0 0183*   	db 089,090,091,192,145,145,145,145,145,145,145,145,190,089,090,091
       91 91 91 91 
       91 91 91 91 
       BE 59 5A 5B 
047212 49 05 4B C0 0184*   	db 073,005,075,192,000,000,000,000,147,000,147,000,190,073,005,075
       00 00 00 00 
       93 00 93 00 
       BE 49 05 4B 
047222 39 3A 3B C0 0185*   	db 057,058,059,192,145,145,145,145,145,145,145,145,190,057,058,059
       91 91 91 91 
       91 91 91 91 
       BE 39 3A 3B 
047232 BF B4 AF B0 0186*   	db 191,180,175,176,206,207,207,207,208,000,147,000,174,175,175,175
       CE CF CF CF 
       D0 00 93 00 
       AE AF AF AF 
047242 BF D3 00 00 0187*   	db 191,211,000,000,009,010,010,010,011,000,147,000,000,000,000,000
       09 0A 0A 0A 
       0B 00 93 00 
       00 00 00 00 
047252 BF D3 00 00 0188*   	db 191,211,000,000,190,207,207,207,192,000,147,000,000,000,000,000
       BE CF CF CF 
       C0 00 93 00 
       00 00 00 00 
047262 BF D3 00 00 0189*   	db 191,211,000,000,190,191,008,191,192,000,152,153,145,145,145,145
       BE BF 08 BF 
       C0 00 98 99 
       91 91 91 91 
047272 BF D3 00 00 0190*   	db 191,211,000,000,190,191,008,191,191,000,150,151,000,000,000,000
       BE BF 08 BF 
       BF 00 96 97 
       00 00 00 00 
047282 BF D3 00 00 0191*   	db 191,211,000,000,190,191,008,191,192,000,150,151,000,000,000,000
       BE BF 08 BF 
       C0 00 96 97 
       00 00 00 00 
047292 BF D3 00 00 0192*   	db 191,211,000,000,174,175,175,175,176,000,134,135,000,000,000,000
       AE AF AF AF 
       B0 00 86 87 
       00 00 00 00 
0472A2 BF D3 00 00 0193*   	db 191,211,000,000,000,000,000,000,000,000,134,135,000,000,000,000
       00 00 00 00 
       00 00 86 87 
       00 00 00 00 
0472B2 BF D3 00 CE 0194*   	db 191,211,000,206,207,207,207,208,000,000,138,139,129,129,129,129
       CF CF CF D0 
       00 00 8A 8B 
       81 81 81 81 
0472C2 BF A1 A4 BE 0195*   	db 191,161,164,190,089,090,091,192,000,000,188,147,000,000,000,000
       59 5A 5B C0 
       00 00 BC 93 
       00 00 00 00 
0472D2 AE AF BF BE 0196*   	db 174,175,191,190,073,005,075,171,220,220,170,147,000,000,000,000
       49 05 4B AB 
       DC DC AA 93 
       00 00 00 00 
0472E2 00 00 AE BE 0197*   	db 000,000,174,190,057,058,059,192,000,000,000,147,000,000,000,000
       39 3A 3B C0 
       00 00 00 93 
       00 00 00 00 
0472F2 00 00 00 AE 0198*   	db 000,000,000,174,175,175,175,191,129,129,129,129,129,129,129,129
       AF AF AF BF 
       81 81 81 81 
       81 81 81 81 
047302 00 00 00 00 0199*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
047312 00 00 00 00 0200*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
047322 09 0A 0A 0A 0201*   	db 009,010,010,010,010,010,010,010,010,010,010,010,010,010,010,011
       0A 0A 0A 0A 
       0A 0A 0A 0A 
       0A 0A 0A 0B 
047332 00 00 00 00 0202*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
047342 00 CE CF CF 0203*   	db 000,206,207,207,207,208,000,000,000,000,000,147,000,147,000,000
       CF D0 00 00 
       00 00 00 93 
       00 93 00 00 
047352 00 BE BF F8 0204*   	db 000,190,191,248,191,192,000,000,000,000,000,147,000,147,000,000
       BF C0 00 00 
       00 00 00 93 
       00 93 00 00 
047362 00 BE F8 01 0205*   	db 000,190,248,001,248,192,000,000,000,000,206,207,207,207,208,000
       F8 C0 00 00 
       00 00 CE CF 
       CF CF D0 00 
047372 00 AE BF F8 0206*   	db 000,174,191,248,191,176,000,000,000,000,190,089,090,091,192,000
       BF B0 00 00 
       00 00 BE 59 
       5A 5B C0 00 
047382 00 00 AE BC 0207*   	db 000,000,174,188,176,000,000,000,000,185,172,073,005,075,192,000
       B0 00 00 00 
       00 B9 AC 49 
       05 4B C0 00 
047392 00 00 00 DB 0208*   	db 000,000,000,219,000,000,000,000,000,219,190,057,058,059,192,000
       00 00 00 00 
       00 DB BE 39 
       3A 3B C0 00 
0473A2 00 00 00 DB 0209*   	db 000,000,000,219,000,000,000,000,000,219,174,175,175,175,176,000
       00 00 00 00 
       00 DB AE AF 
       AF AF B0 00 
0473B2 00 00 00 DB 0210*   	db 000,000,000,219,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
0473C2 00 B9 DC EC 0211*   	db 000,185,220,236,220,220,220,220,220,204,000,000,000,000,000,000
       DC DC DC DC 
       DC CC 00 00 
       00 00 00 00 
0473D2 00 DB 00 00 0212*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
0473E2 00 DB 00 00 0213*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
0473F2 00 DB 00 00 0214*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
047402 00 DB 00 00 0215*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
047412 DC AA 00 00 0216*   	db 220,170,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
047422 00 00 00 00 0217*   	db 000,000,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
047432 00 00 00 00 0218*   	db 000,000,000,000,000,000,000,206,207,187,207,208,000,000,000,000
       00 00 00 CE 
       CF BB CF D0 
       00 00 00 00 
047442 81 81 81 81 0219*   	db 129,129,129,129,129,129,129,190,089,090,091,192,129,129,129,129
       81 81 81 BE 
       59 5A 5B C0 
       81 81 81 81 
047452 00 00 00 00 0220*   	db 000,000,000,000,000,000,000,190,073,005,075,192,000,000,000,000
       00 00 00 BE 
       49 05 4B C0 
       00 00 00 00 
047462 00 00 00 00 0221*   	db 000,000,000,000,000,000,000,190,057,058,059,192,000,000,000,000
       00 00 00 BE 
       39 3A 3B C0 
       00 00 00 00 
047472 00 00 00 00 0222*   	db 000,000,000,000,000,000,000,174,175,175,175,176,000,000,000,000
       00 00 00 AE 
       AF AF AF B0 
       00 00 00 00 
047482 00 00 00 00 0223*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047492 00 00 00 00 0224*   	db 000,000,000,000,000,000,000,000,131,129,129,129,129,129,129,129
       00 00 00 00 
       83 81 81 81 
       81 81 81 81 
0474A2 00 00 00 00 0225*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
0474B2 00 00 00 00 0226*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
0474C2 81 81 81 81 0227*   	db 129,129,129,129,129,129,129,129,131,000,000,000,000,000,000,000
       81 81 81 81 
       83 00 00 00 
       00 00 00 00 
0474D2 00 00 00 00 0228*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
0474E2 00 00 00 00 0229*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
0474F2 00 00 00 00 0230*   	db 000,000,000,000,000,000,000,000,131,129,129,129,129,129,129,129
       00 00 00 00 
       83 81 81 81 
       81 81 81 81 
047502 BF BF BF D0 0231*   	db 191,191,191,208,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047512 59 5A 5B BF 0232*   	db 089,090,091,191,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047522 49 05 4B BF 0233*   	db 073,005,075,191,000,000,000,000,131,000,000,152,153,145,145,145
       00 00 00 00 
       83 00 00 98 
       99 91 91 91 
047532 39 3A 3B BF 0234*   	db 057,058,059,191,000,000,000,000,131,000,000,150,151,000,000,000
       00 00 00 00 
       83 00 00 96 
       97 00 00 00 
047542 BF BF BF BF 0235*   	db 191,191,191,191,000,000,206,207,207,207,208,150,151,000,000,000
       00 00 CE CF 
       CF CF D0 96 
       97 00 00 00 
047552 00 00 BF BF 0236*   	db 000,000,191,191,191,191,191,191,248,191,192,150,151,145,145,145
       BF BF BF BF 
       F8 BF C0 96 
       97 91 91 91 
047562 00 00 BF BF 0237*   	db 000,000,191,191,191,191,191,248,001,248,192,134,135,000,000,000
       BF BF BF F8 
       01 F8 C0 86 
       87 00 00 00 
047572 00 00 AE BF 0238*   	db 000,000,174,191,191,191,191,191,248,191,192,134,135,000,000,000
       BF BF BF BF 
       F8 BF C0 86 
       87 00 00 00 
047582 00 00 00 83 0239*   	db 000,000,000,131,000,000,174,175,175,175,176,134,135,000,000,000
       00 00 AE AF 
       AF AF B0 86 
       87 00 00 00 
047592 00 00 00 83 0240*   	db 000,000,000,131,000,000,000,000,131,000,000,134,135,000,000,000
       00 00 00 00 
       83 00 00 86 
       87 00 00 00 
0475A2 6A 6B 6C 6B 0241*   	db 106,107,108,107,108,106,107,108,131,000,000,138,139,145,145,145
       6C 6A 6B 6C 
       83 00 00 8A 
       8B 91 91 91 
0475B2 00 00 00 83 0242*   	db 000,000,000,131,000,000,000,000,131,000,000,191,191,000,000,000
       00 00 00 00 
       83 00 00 BF 
       BF 00 00 00 
0475C2 00 00 00 83 0243*   	db 000,000,000,131,000,000,000,000,131,000,000,191,191,000,000,000
       00 00 00 00 
       83 00 00 BF 
       BF 00 00 00 
0475D2 00 00 00 83 0244*   	db 000,000,000,131,000,000,000,000,131,206,207,207,207,208,000,000
       00 00 00 00 
       83 CE CF CF 
       CF D0 00 00 
0475E2 00 00 00 83 0245*   	db 000,000,000,131,000,000,000,000,131,190,089,090,091,192,145,145
       00 00 00 00 
       83 BE 59 5A 
       5B C0 91 91 
0475F2 00 00 00 83 0246*   	db 000,000,000,131,000,000,000,000,131,190,073,005,075,192,000,000
       00 00 00 00 
       83 BE 49 05 
       4B C0 00 00 
047602 81 81 81 83 0247*   	db 129,129,129,131,129,129,129,129,131,190,057,058,059,192,145,145
       81 81 81 81 
       83 BE 39 3A 
       3B C0 91 91 
047612 00 00 00 83 0248*   	db 000,000,000,131,000,000,000,000,131,174,175,175,175,176,000,000
       00 00 00 00 
       83 AE AF AF 
       AF B0 00 00 
047622 00 00 00 83 0249*   	db 000,000,000,131,000,000,000,000,131,000,000,000,131,000,000,000
       00 00 00 00 
       83 00 00 00 
       83 00 00 00 
047632 09 0A 0A 0A 0250*   	db 009,010,010,010,010,010,010,010,010,010,010,010,010,010,010,011
       0A 0A 0A 0A 
       0A 0A 0A 0A 
       0A 0A 0A 0B 
047642 85 85 85 85 0251*   	db 133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133
       85 85 85 85 
       85 85 85 85 
       85 85 85 85 
047652 00 00 93 00 0252*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
047662 7A 7B 93 7A 0253*   	db 122,123,147,122,123,122,147,122,123,122,147,122,123,147,122,123
       7B 7A 93 7A 
       7B 7A 93 7A 
       7B 93 7A 7B 
047672 6A 6B 93 6A 0254*   	db 106,107,147,106,107,106,147,106,107,106,147,106,107,147,106,107
       6B 6A 93 6A 
       6B 6A 93 6A 
       6B 93 6A 6B 
047682 00 00 93 00 0255*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
047692 00 00 93 00 0256*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
0476A2 94 94 94 94 0257*   	db 148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148
       94 94 94 94 
       94 94 94 94 
       94 94 94 94 
0476B2 59 5A 5B BF 0258*   	db 089,090,091,191,191,191,191,191,191,191,191,191,191,089,090,091
       BF BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
0476C2 49 05 4B BF 0259*   	db 073,005,075,191,008,191,191,191,191,191,004,191,191,073,005,075
       08 BF BF BF 
       BF BF 04 BF 
       BF 49 05 4B 
0476D2 39 3A 3B BF 0260*   	db 057,058,059,191,008,191,191,191,191,191,004,191,191,057,058,059
       08 BF BF BF 
       BF BF 04 BF 
       BF 39 3A 3B 
0476E2 BF BF BF BF 0261*   	db 191,191,191,191,008,191,191,191,191,191,004,191,191,191,191,191
       08 BF BF BF 
       BF BF 04 BF 
       BF BF BF BF 
0476F2 BF BF BF BF 0262*   	db 191,191,191,191,191,248,191,191,191,191,191,248,191,191,191,191
       BF F8 BF BF 
       BF BF BF F8 
       BF BF BF BF 
047702 BF BF BF BF 0263*   	db 191,191,191,191,248,001,248,191,191,191,248,001,248,191,191,191
       F8 01 F8 BF 
       BF BF F8 01 
       F8 BF BF BF 
047712 BF BF BF BF 0264*   	db 191,191,191,191,191,248,191,191,191,191,191,248,191,191,191,191
       BF F8 BF BF 
       BF BF BF F8 
       BF BF BF BF 
047722 59 5A 5B BF 0265*   	db 089,090,091,191,191,191,191,191,191,191,191,191,191,089,090,091
       BF BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
047732 49 05 4B BF 0266*   	db 073,005,075,191,191,191,191,191,191,191,191,191,191,073,005,075
       BF BF BF BF 
       BF BF BF BF 
       BF 49 05 4B 
047742 39 3A 3B BF 0267*   	db 057,058,059,191,191,191,191,191,191,191,191,191,191,057,058,059
       BF BF BF BF 
       BF BF BF BF 
       BF 39 3A 3B 
047752 84 84 84 84 0268*   	db 132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132
       84 84 84 84 
       84 84 84 84 
       84 84 84 84 
047762             0060        include "player_state.inc"
047762             0001*   player_defaults:
047762 05          0002*       db player               ; type
047763 76 01 00    0003*       dl BUF_SHIP_0L          ; base_bufferId
047766 CA 77 04    0004*       dl do_player            ; move_program
047769 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
04776A 10          0006*       db 16                   ; dim_x
04776B 10          0007*       db 16                   ; dim_y
04776C 01          0008*       db 1                    ; num_orientations
04776D 01          0009*       db 1                    ; num_animations
04776E 00          0010*       db 0                    ; animation
04776F 00          0011*       db 0                    ; animation_timer
047770 00          0012*       db 0                    ; move_timer
047771 00          0013*       db 0                    ; move_step
047772 00          0014*       db 0                    ; points
047773 00          0015*       db 0                    ; shield_damage
047774 00          0016*       db 0                    ; frame
047775             0017*   
047775 63 78 04    0018*   player_state:  dl player_alive
047778 00          0019*   player_ships: db 0
047779 03          0020*   player_ships_max: db 3
04777A             0021*   player_speed: equ 3*256 ; pixels per frame 16.8 fixed
04777A             0022*   
04777A             0023*   draw_player_ships:
04777A             0024*   ; activate mfd
04777A DD 21 BC 79 0025*       ld ix,mfd_ships
       04          
04777F CD C3 7A 04 0026*       call mfd_activate
047783             0027*   ; blank out previously drawn ships
047783 AF          0028*       xor a ; color mode 0
047784 0E 00       0029*       ld c,c_black
047786 CD 87 13 04 0030*       call vdu_gcol
04778A 01 00 00 00 0031*       ld bc,0
04778E 11 00 00 00 0032*       ld de,0
047792 DD 21 4F 00 0033*       ld ix,0+79
       00          
047797 FD 21 0F 00 0034*       ld iy,0+15
       00          
04779C CD 77 18 04 0035*       call vdu_plot_rf
0477A0             0036*   ; draw the ships remaining
0477A0 21 2B 00 00 0037*       ld hl,BUF_SHIP_MFD
0477A4 CD 3A 14 04 0038*       call vdu_buff_select
0477A8 3A 78 77 04 0039*       ld a,(player_ships) ; loop counter
0477AC 01 00 00 00 0040*       ld bc,0 ; starting x-coordinate
0477B0             0041*   @loop:
0477B0 3D          0042*       dec a ; we don't count the ship we're flying
0477B1 C8          0043*       ret z
0477B2 F5          0044*       push af ; back up loop counter
0477B3 C5          0045*       push bc ; save x-coordinate
0477B4 11 00 00 00 0046*       ld de,0 ; y-coordinate
0477B8 CD 3A 18 04 0047*       call vdu_plot_bmp
0477BC C1          0048*       pop bc ; restore x-coordinate
0477BD 21 10 00 00 0049*       ld hl,16 ; bump x-coords
0477C1 09          0050*       add hl,bc
0477C2 E5          0051*       push hl
0477C3 C1          0052*       pop bc ; bc = new x-coordinate
0477C4 F1          0053*       pop af
0477C5 C3 B0 77 04 0054*       jp @loop
0477C9 C9          0055*       ret
0477CA             0056*   ; end draw_player_ships
0477CA             0057*   
0477CA             0058*   do_player:
0477CA 2A 75 77 04 0059*       ld hl,(player_state)
0477CE             0060*       CALL_HL
0477CE 01 D4 77 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
0477D2 C5          0002*M1     push bc ; which constitutes the return address
0477D3 E9          0003*M1     jp (hl) ; Jump to the address in HL
0477D4 C9          0061*       ret
0477D5             0062*   ; end do_player
0477D5             0063*   
0477D5             0064*   ; set initial player position
0477D5             0065*   ; inputs: none,everything is hardcoded
0477D5             0066*   ; outputs: player_x/y set to bottom-left corner of screen
0477D5             0067*   ; destroys: pretty much everything
0477D5             0068*   player_init:
0477D5 3A 65 7E 04 0069*       ld a,(player_shields_max)
0477D9 32 64 7E 04 0070*       ld (player_shields),a
0477DD 3A FD 7C 04 0071*       ld a,(laser_power_max)
0477E1 32 FB 7C 04 0072*       ld (laser_power),a
0477E5 3A DB 7B 04 0073*       ld a,(player_fuel_max)
0477E9 32 D9 7B 04 0074*       ld (player_fuel),a
0477ED             0075*   ; set all to zero so they will update
0477ED AF          0076*       xor a
0477EE 32 FC 7C 04 0077*       ld (laser_power_last),a
0477F2 32 66 7E 04 0078*       ld (player_shields_last),a
0477F6 32 DA 7B 04 0079*       ld (player_fuel_last),a
0477FA             0080*   ; set player sprite record with defaults
0477FA DD 21 56 9E 0081*       ld ix,player_begin
       04          
0477FF 21 62 77 04 0082*       ld hl,player_defaults
047803 01 00 00 00 0083*       ld bc,0*256
047807 11 00 40 01 0084*       ld de,sprite_bottom*256
04780B 3E 01       0085*       ld a,1
04780D CD 99 7F 04 0086*       call spawn_sprite_from_coords
047811 D2 3C 78 04 0087*       jp nc,@draw
047815 DD CB 16 BE 0088*       res 7,(ix+sprite_type)
047819             0089*   ; load sprite frames
047819 DD 7E 00    0090*       ld a,(ix+sprite_id)
04781C CD DB 18 04 0091*       call vdu_sprite_select
047820 CD EE 18 04 0092*       call vdu_sprite_clear_frames
047824 21 76 01 00 0093*       ld hl,BUF_SHIP_0L
047828 CD 30 1A 04 0094*       call vdu_sprite_add_buff
04782C 21 77 01 00 0095*       ld hl,BUF_SHIP_1C
047830 CD 30 1A 04 0096*       call vdu_sprite_add_buff
047834 21 78 01 00 0097*       ld hl,BUF_SHIP_2R
047838 CD 30 1A 04 0098*       call vdu_sprite_add_buff
04783C             0099*   @draw:
04783C 01 00 00 00 0100*       ld bc,0*256
047840 11 00 40 01 0101*       ld de,sprite_bottom*256
047844 CD A7 19 04 0102*       call vdu_sprite_move_abs168
047848 CD 51 19 04 0103*       call vdu_sprite_show
04784C 21 63 78 04 0104*       ld hl,player_alive
047850 22 75 77 04 0105*       ld (player_state),hl
047854 DD CB 1D F6 0106*       set sprite_alive,(ix+sprite_collisions)
047858             0107*   
047858             0108*   ; point to first song in the index
047858 21 52 99 04 0109*       ld hl,SFX_filename_index
04785C ED 27       0110*       ld hl,(hl) ; pointer to first song filename
04785E CD 56 9A 04 0111*       call play_song
047862             0112*   
047862 C9          0113*       ret
047863             0114*   ; end player_init
047863             0115*   
047863             0116*   player_alive:
047863 CD 16 7C 04 0117*       call player_input
047867 CD 67 7D 04 0118*       call player_move_weapons
04786B C9          0119*       ret
04786C             0120*   ; end player_alive
04786C             0121*   
04786C             0122*   kill_player:
04786C             0123*   ; set player collision flag to dead
04786C DD 21 56 9E 0124*       ld ix,player_begin
       04          
047871 DD CB 1D B6 0125*       res sprite_alive,(ix+sprite_collisions)
047875             0126*   ; change seeker move program to move_enemy_seeker_orbit
047875 FD 21 96 9E 0127*       ld iy,seekers_base
       04          
04787A 21 36 21 04 0128*       ld hl,move_enemy_seeker_orbit
04787E 06 03       0129*       ld b,seekers_max
047880 CD 8C 80 04 0130*       call change_sprite_group_move_program
047884             0131*   ; set player state to dying
047884 21 8D 78 04 0132*       ld hl,player_dying
047888 22 75 77 04 0133*       ld (player_state),hl
04788C C9          0134*       ret
04788D             0135*   ; end kill_player
04788D             0136*   
04788D             0137*   player_dying:
04788D             0138*   ; spawn explosions at player location
04788D 06 10       0139*       ld b,16 ; loop counter
04788F             0140*   @loop_explode:
04788F C5          0141*       push bc ; save loop counter
047890 CD 92 22 04 0142*       call spawn_explosion_player
047894 21 00 00 00 0143*       ld hl,0
047898 DD 2F 07    0144*       ld (ix+sprite_xvel),hl
04789B 21 00 01 00 0145*       ld hl,1*256
04789F DD 2F 0A    0146*       ld (ix+sprite_yvel),hl
0478A2             0147*   ; move explosions for a few frames
0478A2 06 10       0148*       ld b,16 ; loop counter
0478A4             0149*   @loop_animate:
0478A4 C5          0150*       push bc
0478A5 CD E2 78 04 0151*       call @animate
0478A9 C1          0152*       pop bc
0478AA 10 F8       0153*       djnz @loop_animate
0478AC C1          0154*       pop bc
0478AD 10 E0       0155*       djnz @loop_explode
0478AF             0156*   ; delay until grand finale
0478AF 06 10       0157*       ld b,16 ; loop counter
0478B1             0158*   @loop_delay:
0478B1 C5          0159*       push bc
0478B2 CD E2 78 04 0160*       call @animate
0478B6 C1          0161*       pop bc
0478B7 10 F8       0162*       djnz @loop_delay
0478B9             0163*   ; set up the grand finale
0478B9 06 08       0164*       ld b,explosions_max ; loop counter
0478BB             0165*   @loop_spawn_finale:
0478BB C5          0166*       push bc
0478BC CD 92 22 04 0167*       call spawn_explosion_player
0478C0 CD FF 78 04 0168*       call @rand
0478C4 DD 2F 07    0169*       ld (ix+sprite_xvel),hl
0478C7 CD FF 78 04 0170*       call @rand
0478CB DD 2F 0A    0171*       ld (ix+sprite_yvel),hl
0478CE C1          0172*       pop bc
0478CF 10 EA       0173*       djnz @loop_spawn_finale
0478D1             0174*   @loop_finale_animate:
0478D1 C5          0175*       push bc
0478D2 CD E2 78 04 0176*       call @animate
0478D6 C1          0177*       pop bc
0478D7 10 F8       0178*       djnz @loop_finale_animate
0478D9             0179*   
0478D9             0180*   ; set game state to player dead
0478D9 21 1F 79 04 0181*       ld hl,player_dead
0478DD 22 75 77 04 0182*       ld (player_state),hl
0478E1 C9          0183*       ret
0478E2             0184*   @animate:
0478E2 CD CC 89 04 0185*       call tiles_plot
0478E6 CD B9 7E 04 0186*       call set_gfx_playing_field
0478EA CD 67 7D 04 0187*       call player_move_weapons
0478EE CD 2B 20 04 0188*       call do_enemies
0478F2 CD F2 22 04 0189*       call move_explosions
0478F6 CD 3C 8B 04 0190*       call move_tiles
0478FA CD B9 13 04 0191*       call vdu_vblank
0478FE C9          0192*       ret
0478FF             0193*   @rand:
0478FF 21 00 00 00 0194*       ld hl,0
047903 CD 18 05 04 0195*       call rand_8
047907 47          0196*       ld b,a
047908 E6 01       0197*       and %00000001
04790A 67          0198*       ld h,a
04790B 68          0199*       ld l,b
04790C CB 78       0200*       bit 7,b
04790E C8          0201*       ret z
04790F CD 80 04 04 0202*       call neg_hlu
047913 C9          0203*       ret
047914             0204*   ; end player_dying
047914             0205*   
047914 47 65 74 20 0206*   get_ready: asciz "Get Ready!"
       52 65 61 64 
       79 21 00    
04791F             0207*   
04791F             0208*   player_dead:
04791F             0209*   ; reset player score to what it was at the start of the level
04791F 2A 2F 7E 04 0210*       ld hl,(player_starting_score)
047923 22 2C 7E 04 0211*       ld (player_score),hl
047927             0212*   ; decrement lives
047927 3A 78 77 04 0213*       ld a,(player_ships)
04792B 3D          0214*       dec a
04792C CA CA 81 04 0215*       jp z,game_over
047930 32 78 77 04 0216*       ld (player_ships),a
047934 CD 7A 77 04 0217*       call draw_player_ships
047938             0218*   ; reset the sprite table
047938 CD 01 7F 04 0219*       call table_init
04793C 21 56 9D 04 0220*       ld hl,table_base
047940 22 DC 7E 04 0221*       ld (table_pointer),hl
047944             0222*   ; initialize sprites and active tiles table
047944 CD 39 7F 04 0223*       call sprites_init
047948 CD 01 7F 04 0224*       call table_init
04794C CD 56 88 04 0225*       call tile_table_init
047950             0226*   ; ; reset player score to what it was at the start of the level
047950             0227*   ;     ld hl,(player_starting_score)
047950             0228*   ;     ld (player_score),hl
047950             0229*   ; restart the level
047950 CD 5C 66 04 0230*       call init_level
047954             0231*   ; spawn player sprite at starting position
047954 CD D5 77 04 0232*       call player_init
047958             0233*   ; set the game state to playing
047958 21 02 84 04 0234*       ld hl,game_playing
04795C 22 99 81 04 0235*       ld (game_state), hl
047960             0236*   ; set game playing substates
047960 21 63 78 04 0237*       ld hl,player_alive
047964 22 75 77 04 0238*       ld (player_state), hl
047968 21 36 20 04 0239*       ld hl,enemies_alive
04796C 22 28 20 04 0240*       ld (enemies_state), hl
047970 C9          0241*       ret
047971             0242*   ; end player_dead
047971             0061        include "player_cockpit.inc"
047971             0001*   ; offsets into control panel element definitions
047971             0002*   panel_bufferId: equ 0
047971             0003*   panel_x0: equ 3
047971             0004*   panel_y0: equ 6
047971             0005*   panel_x1: equ 9
047971             0006*   panel_y1: equ 12
047971             0007*   
047971             0008*   ctl_panel_l:
047971 09 00 00    0009*       dl BUF_CTL_PANEL_L ; bufferId
047974 00 00 00    0010*       dl 0 ; x0
047977 00 01 00    0011*       dl 256 ; y0
04797A 7F 00 00    0012*       dl 0+127 ; x1
04797D 7F 01 00    0013*       dl 256+127 ; y1
047980             0014*   
047980             0015*   ctl_panel_r:
047980 0B 00 00    0016*       dl BUF_CTL_PANEL_R ; bufferId
047983 80 01 00    0017*       dl 384 ; x0
047986 00 01 00    0018*       dl 256 ; y0
047989 FF 01 00    0019*       dl 384+127 ; x1
04798C 7F 01 00    0020*       dl 256+127 ; y1
04798F             0021*   
04798F             0022*   ctl_panel_top:
04798F 0C 00 00    0023*       dl BUF_CTL_PANEL_TOP ; bufferId
047992 50 00 00    0024*       dl 80 ; x0
047995 00 00 00    0025*       dl 0 ; y0
047998 AF 01 00    0026*       dl 80+351 ; x1
04799B 2F 00 00    0027*       dl 0+47 ; y1
04799E             0028*   
04799E             0029*   mfd_bezel_l:
04799E 0F 00 00    0030*       dl BUF_MFD_BEZEL ; bufferId
0479A1 18 00 00    0031*       dl 24 ; x0
0479A4 18 01 00    0032*       dl 280 ; y0
0479A7 77 00 00    0033*       dl 24+95 ; x1
0479AA 77 01 00    0034*       dl 280+95 ; y1
0479AD             0035*   
0479AD             0036*   mfd_bezel_r:
0479AD 0F 00 00    0037*       dl BUF_MFD_BEZEL ; bufferId
0479B0 88 01 00    0038*       dl 392 ; x0
0479B3 18 01 00    0039*       dl 280 ; y0
0479B6 E7 01 00    0040*       dl 392+95 ; x1
0479B9 77 01 00    0041*       dl 280+95 ; y1
0479BC             0042*   
0479BC             0043*   mfd_ships:
0479BC 00 00 00    0044*       dl 0 ; bufferId
0479BF 80 00 00    0045*       dl 128 ; x0
0479C2 08 00 00    0046*       dl 8 ; y0
0479C5 CF 00 00    0047*       dl 128+79 ; x1
0479C8 27 00 00    0048*       dl 8+31 ; y1
0479CB             0049*   
0479CB             0050*   draw_player_cockpit:
0479CB DD 21 71 79 0051*       ld ix,ctl_panel_l
       04          
0479D0 CD 84 7A 04 0052*       call draw_player_ctl_panel
0479D4 DD 21 80 79 0053*       ld ix,ctl_panel_r
       04          
0479D9 CD 84 7A 04 0054*       call draw_player_ctl_panel
0479DD DD 21 8F 79 0055*       ld ix,ctl_panel_top
       04          
0479E2 CD 84 7A 04 0056*       call draw_player_ctl_panel
0479E6 DD 21 9E 79 0057*       ld ix,mfd_bezel_l
       04          
0479EB CD 84 7A 04 0058*       call draw_player_ctl_panel
0479EF DD 21 96 7A 0059*       ld ix,mfd_bg_l
       04          
0479F4 CD 84 7A 04 0060*       call draw_player_ctl_panel
0479F8 DD 21 A5 7A 0061*       ld ix,mfd_arms_l
       04          
0479FD CD 84 7A 04 0062*       call draw_player_ctl_panel
047A01 DD 21 AD 79 0063*       ld ix,mfd_bezel_r
       04          
047A06 CD 84 7A 04 0064*       call draw_player_ctl_panel
047A0A DD 21 B4 7A 0065*       ld ix,mfd_bg_r
       04          
047A0F CD 84 7A 04 0066*       call draw_player_ctl_panel
047A13             0067*   
047A13 21 2A 00 00 0068*       ld hl,BUF_SHIELD
047A17 CD 3A 14 04 0069*       call vdu_buff_select
047A1B 01 EC 01 00 0070*       ld bc,492
047A1F 11 70 01 00 0071*       ld de,368
047A23 CD 3A 18 04 0072*       call vdu_plot_bmp
047A27             0073*   
047A27 21 29 00 00 0074*       ld hl,BUF_POWER
047A2B CD 3A 14 04 0075*       call vdu_buff_select
047A2F 01 04 00 00 0076*       ld bc,4
047A33 11 70 01 00 0077*       ld de,368
047A37 CD 3A 18 04 0078*       call vdu_plot_bmp
047A3B             0079*   
047A3B 21 08 00 00 0080*       ld hl,BUF_CREDITS
047A3F CD 3A 14 04 0081*       call vdu_buff_select
047A43 01 80 01 00 0082*       ld bc,384
047A47 11 05 01 00 0083*       ld de,261
047A4B CD 3A 18 04 0084*       call vdu_plot_bmp
047A4F             0085*   
047A4F 21 0D 00 00 0086*       ld hl,BUF_JERRY_CAN
047A53 CD 3A 14 04 0087*       call vdu_buff_select
047A57 01 6E 00 00 0088*       ld bc,110
047A5B 11 02 01 00 0089*       ld de,258
047A5F CD 3A 18 04 0090*       call vdu_plot_bmp
047A63             0091*   
047A63 21 0A 00 00 0092*       ld hl,BUF_CTL_PANEL_NAVBALL_SM
047A67 CD 3A 14 04 0093*       call vdu_buff_select
047A6B 01 A4 01 00 0094*       ld bc,420
047A6F 11 35 01 00 0095*       ld de,309
047A73 CD 3A 18 04 0096*       call vdu_plot_bmp
047A77             0097*   
047A77 CD 79 7E 04 0098*       call init_bar_shields
047A7B CD 13 7D 04 0099*       call init_bar_laser
047A7F CD C0 7B 04 0100*       call init_bar_fuel
047A83             0101*   
047A83 C9          0102*       ret
047A84             0103*   ; end draw_player_cockpit
047A84             0104*   
047A84             0105*   draw_player_ctl_panel:
047A84 DD 27 00    0106*       ld hl,(ix+panel_bufferId)
047A87 CD 3A 14 04 0107*       call vdu_buff_select
047A8B DD 07 03    0108*       ld bc,(ix+panel_x0)
047A8E DD 17 06    0109*       ld de,(ix+panel_y0)
047A91 CD 3A 18 04 0110*       call vdu_plot_bmp
047A95 C9          0111*       ret
047A96             0112*   ; end draw_player_ctl_panel
047A96             0113*   
047A96             0114*   mfd_bg_l:
047A96 10 00 00    0115*       dl BUF_MFD_BG ; bufferId
047A99 28 00 00    0116*       dl 40 ; x0
047A9C 28 01 00    0117*       dl 296 ; y0
047A9F 67 00 00    0118*       dl 40+63 ; x1
047AA2 67 01 00    0119*       dl 296+63 ; y1
047AA5             0120*   
047AA5             0121*   mfd_arms_l:
047AA5 0E 00 00    0122*       dl BUF_MFD_ARMS ; bufferId
047AA8 36 00 00    0123*       dl 54 ; x0
047AAB 40 01 00    0124*       dl 320 ; y0
047AAE 59 00 00    0125*       dl 54+35 ; x1
047AB1 51 01 00    0126*       dl 320+17 ; y1
047AB4             0127*   
047AB4             0128*   mfd_bg_r:
047AB4 10 00 00    0129*       dl BUF_MFD_BG ; bufferId
047AB7 98 01 00    0130*       dl 408 ; x0
047ABA 28 01 00    0131*       dl 296 ; y0
047ABD D7 01 00    0132*       dl 408+63 ; x1
047AC0 67 01 00    0133*       dl 296+63 ; y1
047AC3             0134*   
047AC3             0135*   mfd_activate:
047AC3 DD E5       0136*       push ix ; preserve pointer
047AC5 DD 07 03    0137*       ld bc,(ix+panel_x0)
047AC8 DD 17 06    0138*       ld de,(ix+panel_y0)
047ACB CD CA 13 04 0139*       call vdu_set_gfx_origin
047ACF 01 00 00 00 0140*       ld bc,0
047AD3 11 00 00 00 0141*       ld de,0
047AD7 DD 21 3F 00 0142*       ld ix,63
       00          
047ADC FD 21 3F 00 0143*       ld iy,63
       00          
047AE1 CD E5 13 04 0144*       call vdu_set_gfx_viewport
047AE5 DD E1       0145*       pop ix ; restore pointer
047AE7 C9          0146*       ret
047AE8             0147*   ; end mfd_activate
047AE8             0148*   
047AE8             0149*   mfd_init:
047AE8 DD 27 00    0150*       ld hl,(ix+panel_bufferId)
047AEB CD 3A 14 04 0151*       call vdu_buff_select
047AEF 01 00 00 00 0152*       ld bc,0
047AF3 11 00 00 00 0153*       ld de,0
047AF7 CD 3A 18 04 0154*       call vdu_plot_bmp
047AFB C9          0155*       ret
047AFC             0156*   ; end mfd_init
047AFC             0157*   
047AFC             0158*   bar_val: equ 0 ; current value
047AFC             0159*   bar_x0: equ panel_x0
047AFC             0160*   bar_y0: equ panel_y0
047AFC             0161*   bar_x1: equ panel_x1
047AFC             0162*   bar_y1: equ panel_y1
047AFC             0163*   bar_y: equ 15 ; y-plot coordinate
047AFC             0164*   bar_x: equ 15 ; x-plot coordinate
047AFC             0165*   
047AFC             0166*   bar_yellow: equ 33
047AFC             0167*   bar_red: equ 17
047AFC             0168*   
047AFC             0169*   ; update a vertical bar display
047AFC             0170*   ; inputs: ix points to bar structure
047AFC             0171*   ;         bar_val set by caller
047AFC             0172*   ; prerequisite: bar_init called before first use
047AFC             0173*   bar_update_v:
047AFC             0174*   ; set gfx viewport
047AFC DD E5       0175*       push ix ; preserve pointer
047AFE DD 07 03    0176*       ld bc,(ix+bar_x0)
047B01 DD 17 06    0177*       ld de,(ix+bar_y0)
047B04 DD 31 0C    0178*       ld iy,(ix+bar_y1)
047B07 DD 37 09    0179*       ld ix,(ix+bar_x1)
047B0A CD E5 13 04 0180*       call vdu_set_gfx_viewport
047B0E DD E1       0181*       pop ix ; restore pointer
047B10             0182*   ; select the color based on the value thresholds
047B10 DD 17 00    0183*       ld de,(ix+bar_val)
047B13 21 EF FF FF 0184*       ld hl,-bar_red
047B17 19          0185*       add hl,de
047B18 D2 35 7B 04 0186*       jp nc,@red
047B1C 21 DF FF FF 0187*       ld hl,-bar_yellow
047B20 19          0188*       add hl,de
047B21 D2 2D 7B 04 0189*       jp nc,@yellow
047B25 21 05 00 00 0190*       ld hl,BUF_BAR_V_2 ; green
047B29 C3 39 7B 04 0191*       jp @select
047B2D             0192*   @yellow:
047B2D 21 04 00 00 0193*       ld hl,BUF_BAR_V_1 ; yellow
047B31 C3 39 7B 04 0194*       jp @select
047B35             0195*   @red:
047B35 21 03 00 00 0196*       ld hl,BUF_BAR_V_0 ; red
047B39             0197*   @select:
047B39 CD 3A 14 04 0198*       call vdu_buff_select
047B3D             0199*   ; get x-plot position
047B3D DD 07 03    0200*       ld bc,(ix+bar_x0)
047B40             0201*   ; compute y-plot position
047B40 DD 17 00    0202*       ld de,(ix+bar_val)
047B43 21 40 00 00 0203*       ld hl,64
047B47 AF          0204*       xor a ; clear carry
047B48 ED 52       0205*       sbc hl,de
047B4A DD 17 0F    0206*       ld de,(ix+bar_y)
047B4D 19          0207*       add hl,de
047B4E 7D          0208*       ld a,l
047B4F E6 FC       0209*       and %11111100 ; round to nearest 4 pixels
047B51 6F          0210*       ld l,a
047B52 EB          0211*       ex de,hl
047B53 CD 3A 18 04 0212*       call vdu_plot_bmp
047B57 C9          0213*       ret
047B58             0214*   ; end bar_update_v
047B58             0215*   
047B58             0216*   ; update a horizontal bar display
047B58             0217*   ; inputs: ix points to bar structure
047B58             0218*   ;         bar_val set by caller
047B58             0219*   ; prerequisite: bar_init called before first use
047B58             0220*   bar_update_h:
047B58             0221*   ; set gfx viewport
047B58 DD E5       0222*       push ix ; preserve pointer
047B5A DD 07 03    0223*       ld bc,(ix+bar_x0)
047B5D DD 17 06    0224*       ld de,(ix+bar_y0)
047B60 DD 31 0C    0225*       ld iy,(ix+bar_y1)
047B63 DD 37 09    0226*       ld ix,(ix+bar_x1)
047B66 CD E5 13 04 0227*       call vdu_set_gfx_viewport
047B6A DD E1       0228*       pop ix ; restore pointer
047B6C             0229*   ; select the color based on the value thresholds
047B6C DD 17 00    0230*       ld de,(ix+bar_val)
047B6F 21 EF FF FF 0231*       ld hl,-bar_red
047B73 19          0232*       add hl,de
047B74 D2 91 7B 04 0233*       jp nc,@red
047B78 21 DF FF FF 0234*       ld hl,-bar_yellow
047B7C 19          0235*       add hl,de
047B7D D2 89 7B 04 0236*       jp nc,@yellow
047B81 21 02 00 00 0237*       ld hl,BUF_BAR_H_2 ; green
047B85 C3 95 7B 04 0238*       jp @select
047B89             0239*   @yellow:
047B89 21 01 00 00 0240*       ld hl,BUF_BAR_H_1 ; yellow
047B8D C3 95 7B 04 0241*       jp @select
047B91             0242*   @red:
047B91 21 00 00 00 0243*       ld hl,BUF_BAR_H_0 ; red
047B95             0244*   @select:
047B95 CD 3A 14 04 0245*       call vdu_buff_select
047B99             0246*   ; compute x-plot position
047B99 DD 27 00    0247*       ld hl,(ix+bar_val)
047B9C DD 07 0F    0248*       ld bc,(ix+bar_x)
047B9F 09          0249*       add hl,bc
047BA0 7D          0250*       ld a,l
047BA1 E6 FC       0251*       and %11111100 ; round to nearest 4 pixels
047BA3 6F          0252*       ld l,a
047BA4 E5          0253*       push hl
047BA5 C1          0254*       pop bc
047BA6             0255*   ; get y-plot position
047BA6 DD 17 06    0256*       ld de,(ix+bar_y0)
047BA9 CD 3A 18 04 0257*       call vdu_plot_bmp
047BAD C9          0258*       ret
047BAE             0259*   ; end bar_update_h
047BAE             0062        include "player_fuel.inc"
047BAE             0001*   
047BAE             0002*   bar_fuel:
047BAE 00 00 00    0003*       dl 0 ; value
047BB1 30 00 00    0004*       dl 48 ; x0
047BB4 08 01 00    0005*       dl 264 ; y0
047BB7 6F 00 00    0006*       dl 48+63 ; x1
047BBA 0F 01 00    0007*       dl 264+7 ; y1
047BBD F0 FF FF    0008*       dl 48-64 ; x-plot coordinate
047BC0             0009*   
047BC0             0010*   init_bar_fuel:
047BC0 3A DD 7B 04 0011*       ld a,(discharge_fuel_timer_max)
047BC4 32 DC 7B 04 0012*       ld (discharge_fuel_timer),a
047BC8 DD 21 AE 7B 0013*       ld ix,bar_fuel
       04          
047BCD 3A DB 7B 04 0014*       ld a,(player_fuel_max)
047BD1 DD 77 00    0015*       ld (ix+bar_val),a
047BD4 CD 58 7B 04 0016*       call bar_update_h
047BD8 C9          0017*       ret
047BD9             0018*   ; end init_bar_fuel
047BD9             0019*   
047BD9 40          0020*   player_fuel: db 64 ; integer
047BDA 00          0021*   player_fuel_last: db 0 ; integer
047BDB 40          0022*   player_fuel_max: db 64 ; integer
047BDC 00          0023*   discharge_fuel_timer: db 0
047BDD 40          0024*   discharge_fuel_timer_max: db 64 ;
047BDE             0025*   discharge_fuel:
047BDE             0026*   ; check fuel timer
047BDE 21 DC 7B 04 0027*       ld hl,discharge_fuel_timer
047BE2 35          0028*       dec (hl)
047BE3 C0          0029*       ret nz ; not time to discharge fuel so return
047BE4             0030*   ; reset fuel discharge timer
047BE4 3A DD 7B 04 0031*       ld a,(discharge_fuel_timer_max)
047BE8 77          0032*       ld (hl),a
047BE9             0033*   ; discharge fuel
047BE9 21 D9 7B 04 0034*       ld hl,player_fuel
047BED 35          0035*       dec (hl)
047BEE CA F7 7B 04 0036*       jp z,@no_fuel
047BF2 FA F7 7B 04 0037*       jp m,@no_fuel
047BF6 C9          0038*       ret ; fuel not zero so return
047BF7             0039*   @no_fuel:
047BF7 36 00       0040*       ld (hl),0 ; TODO: implement out-of-fuel handler
047BF9 C9          0041*       ret
047BFA             0042*   ; end discharge_fuel
047BFA             0043*   
047BFA             0044*   draw_fuel:
047BFA CD DE 7B 04 0045*       call discharge_fuel
047BFE 21 DA 7B 04 0046*       ld hl,player_fuel_last
047C02 3A D9 7B 04 0047*       ld a,(player_fuel)
047C06 BE          0048*       cp (hl)
047C07 C8          0049*       ret z ; no change to update
047C08 77          0050*       ld (hl),a
047C09 DD 21 AE 7B 0051*       ld ix,bar_fuel
       04          
047C0E DD 77 00    0052*       ld (ix+bar_val),a ; TODO: this is redundant
047C11 CD 58 7B 04 0053*       call bar_update_h
047C15 C9          0054*       ret
047C16             0055*   ; end draw_fuel
047C16             0063        include "player_input.inc"
047C16             0001*   ; UART ports for reading joystick input
047C16             0002*   ; bit tests: 0 means actuated, 1 means not actuated
047C16             0003*   portC: 	EQU 	$9E ; reads dpad input
047C16             0004*   joy1_u: equ 1
047C16             0005*   joy1_d: equ 3
047C16             0006*   joy1_l: equ 5
047C16             0007*   joy1_r: equ 7
047C16             0008*   portD: 	EQU 	$A2 ; reads buttons
047C16             0009*   btn1_a: equ 5
047C16             0010*   
047C16             0011*   ; process player keyboard input, set player bitmap
047C16             0012*   ; velocities and draw player bitmap at updated coordinates
047C16             0013*   ; Inputs: player_x/y set at desired position
047C16             0014*   ; Returns: player bitmap drawn at updated position
047C16             0015*   ; Destroys: probably everything except maybe iy
047C16             0016*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
047C16             0017*   ; TODO: requires sprite implementation
047C16             0018*   player_input:
047C16             0019*   ; point to player sprite record
047C16 FD 21 56 9E 0020*       ld iy,player_begin
       04          
047C1B FD 22 DC 7E 0021*       ld (table_pointer),iy
       04          
047C20             0022*   ; reset player component velocities to zero as the default
047C20 21 00 00 00 0023*       ld hl,0
047C24 FD 2F 07    0024*       ld (iy+sprite_xvel),hl
047C27 FD 2F 0A    0025*       ld (iy+sprite_yvel),hl
047C2A             0026*   ; make ship the active sprite
047C2A FD 7E 00    0027*       ld a,(iy+sprite_id)
047C2D CD DB 18 04 0028*       call vdu_sprite_select
047C31             0029*   ; check for keypresses and branch accordingly
047C31             0030*       MOSCALL    mos_getkbmap ;ix = pointer to MOS virtual keys table
047C31 3E 1E       0001*M1 			LD	A, function
047C33 5B CF       0002*M1 			RST.LIL	08h
047C35             0031*   ; do player directional input
047C35 AF          0032*       xor a ; clear flags
047C36 DB 9E       0033*       in a,(portC) ; read dpad input
047C38 57          0034*       ld d,a ; save dpad input
047C39 3E 01       0035*       ld a,1 ; set ship's default animation to center
047C3B             0036*   ; 26 Left: move player left
047C3B DD CB 03 4E 0037*       bit 1,(ix+3)
047C3F C2 4D 7C 04 0038*       jp nz,@F
047C43             0039*   ; test dpad left
047C43 CB 6A       0040*       bit joy1_l,d
047C45 CA 4D 7C 04 0041*       jp z,@F
047C49 C3 59 7C 04 0042*       jp @right
047C4D             0043*   @@:
047C4D FD 27 07    0044*       ld hl,(iy+sprite_xvel)
047C50 01 00 FD FF 0045*       ld bc,-player_speed
047C54 09          0046*       add hl,bc
047C55 FD 2F 07    0047*       ld (iy+sprite_xvel),hl
047C58 3D          0048*       dec a ; set ship's animation to left
047C59             0049*   @right:
047C59             0050*   ; 122 Right: move player right
047C59 DD CB 0F 4E 0051*       bit 1,(ix+15)
047C5D C2 6B 7C 04 0052*       jp nz,@F
047C61             0053*   ; test dpad right
047C61 CB 7A       0054*       bit joy1_r,d
047C63 CA 6B 7C 04 0055*       jp z,@F
047C67 C3 77 7C 04 0056*       jp @up
047C6B             0057*   @@:
047C6B FD 27 07    0058*       ld hl,(iy+sprite_xvel)
047C6E 01 00 03 00 0059*       ld bc,player_speed
047C72 09          0060*       add hl,bc
047C73 FD 2F 07    0061*       ld (iy+sprite_xvel),hl
047C76 3C          0062*       inc a ; set ship's animation to right
047C77             0063*   @up:
047C77             0064*   ; 58 Up: move player up
047C77 DD CB 07 4E 0065*       bit 1,(ix+7)
047C7B C2 89 7C 04 0066*       jp nz,@F
047C7F             0067*   ; test dpad up
047C7F CB 4A       0068*       bit joy1_u,d
047C81 CA 89 7C 04 0069*       jp z,@F
047C85 C3 94 7C 04 0070*       jp @dn
047C89             0071*   @@:
047C89 FD 27 0A    0072*       ld hl,(iy+sprite_yvel)
047C8C 01 00 FD FF 0073*       ld bc,-player_speed
047C90 09          0074*       add hl,bc
047C91 FD 2F 0A    0075*       ld (iy+sprite_yvel),hl
047C94             0076*   @dn:
047C94             0077*   ; 42 Down: move player down
047C94 DD CB 05 4E 0078*       bit 1,(ix+5)
047C98 C2 A6 7C 04 0079*       jp nz,@F
047C9C             0080*   ; test dpad down
047C9C CB 5A       0081*       bit joy1_d,d
047C9E CA A6 7C 04 0082*       jp z,@F
047CA2 C3 B1 7C 04 0083*       jp @frame
047CA6             0084*   @@:
047CA6 FD 27 0A    0085*       ld hl,(iy+sprite_yvel)
047CA9 01 00 03 00 0086*       ld bc,player_speed
047CAD 09          0087*       add hl,bc
047CAE FD 2F 0A    0088*       ld (iy+sprite_yvel),hl
047CB1             0089*   @frame:
047CB1             0090*   ; a should land here loaded with the correct frame
047CB1 CD 3E 19 04 0091*       call vdu_sprite_select_frame
047CB5             0092*   ; draw player at updated position
047CB5 FD 21 56 9E 0093*       ld iy,player_begin
       04          
047CBA FD 22 DC 7E 0094*       ld (table_pointer),iy
       04          
047CBF CD A1 80 04 0095*       call move_sprite
047CC3 FD 07 01    0096*       ld bc,(iy+sprite_x)
047CC6 FD 17 04    0097*       ld de,(iy+sprite_y)
047CC9 CD A7 19 04 0098*       call vdu_sprite_move_abs168
047CCD             0099*   
047CCD             0100*   ; process player laser fire
047CCD             0101*   ; do player fire button input
047CCD             0102*   ; read joystick fire button
047CCD AF          0103*       xor a ; clear flags
047CCE DB A2       0104*       in a,(portD) ; read joypad fire button input
047CD0 CB 6F       0105*       bit btn1_a,a
047CD2 CA 73 7D 04 0106*       jp z,player_spawn_laser
047CD6             0107*   ; 99 Space: fire main weapon
047CD6 DD CB 0C 56 0108*       bit 2,(ix+12)
047CDA C2 73 7D 04 0109*       jp nz,player_spawn_laser
047CDE             0110*   ; no fire button pressed so go home
047CDE C9          0111*       ret
047CDF             0112*   ; end player_input
047CDF             0064        include "player_laser.inc"
047CDF             0001*   laser_defaults:
047CDF 06          0002*       db player_air        ; type
047CE0 51 01 00    0003*       dl BUF_LASER_A	    ; base_bufferId
047CE3 D0 7D 04    0004*       dl move_player_laser	; move_program
047CE6 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
047CE7 05          0006*       db 5	                ; dim_x
047CE8 0D          0007*       db 13                   ; dim_y
047CE9 01          0008*       db 1                    ; num_orientations
047CEA 02          0009*       db 2                    ; num_animations
047CEB 00          0010*       db 0	                ; animation
047CEC 02          0011*       db laser_animation_timer_reset ; animation_timer
047CED 00          0012*       db 0	                ; move_timer
047CEE 00          0013*       db 0	                ; move_step
047CEF 00          0014*       db 0	                ; points
047CF0 00          0015*       db 0	                ; shield_damage
047CF1 00          0016*       db 0                    ; frame
047CF2             0017*   
047CF2             0018*   
047CF2             0019*   player_lasers_max: equ 4
047CF2             0020*   laser_speed: equ 4*256 ; 6 pixels per frame 16.8 fixed
047CF2             0021*   tmr_laser: ds 6 ; rate timer for firing laser
       FF FF FF FF 
       FF FF 
047CF8 0C 00 00    0022*   tmr_laser_reset: dl 120/10
047CFB             0023*   laser_animation_timer_reset: equ 2 ; animate every two frames
047CFB             0024*   
047CFB 40          0025*   laser_power: db 64 ; integer
047CFC 00          0026*   laser_power_last: db 0 ; integer
047CFD 40          0027*   laser_power_max: db 64 ; integer
047CFE 04          0028*   laser_power_per_shot: db 4 ; integer
047CFF 00          0029*   charge_laser_timer: db 0
047D00 06          0030*   charge_laser_timer_max: db 6
047D01             0031*   bar_laser:
047D01 00 00 00    0032*       dl 0 ; value
047D04 08 00 00    0033*       dl 8 ; x0
047D07 30 01 00    0034*       dl 304 ; y0
047D0A 0F 00 00    0035*       dl 8+7 ; x1
047D0D 6F 01 00    0036*       dl 304+63 ; y1
047D10 F0 00 00    0037*       dl 304-64 ; y-plot coordinate
047D13             0038*   
047D13             0039*   init_bar_laser:
047D13 3A 00 7D 04 0040*       ld a,(charge_laser_timer_max)
047D17 32 FF 7C 04 0041*       ld (charge_laser_timer),a
047D1B DD 21 01 7D 0042*       ld ix,bar_laser
       04          
047D20 3A FD 7C 04 0043*       ld a,(laser_power_max)
047D24 DD 77 00    0044*       ld (ix+bar_val),a
047D27 CD FC 7A 04 0045*       call bar_update_v
047D2B C9          0046*       ret
047D2C             0047*   ; end init_bar_laser
047D2C             0048*   
047D2C             0049*   init_player_laser:
047D2C             0050*   ; set pointer to laser sprite table
047D2C FD 21 56 9D 0051*       ld iy,player_weapons_begin
       04          
047D31 FD 7E 00    0052*       ld a,(iy+sprite_id) ; sprite id
047D34 1E 04       0053*       ld e,player_lasers_max ; sprite loop counter
047D36             0054*   ; define laser sprites
047D36             0055*   @sprites_loop:
047D36 F5          0056*       push af
047D37 D5          0057*       push de
047D38 CD DB 18 04 0058*   	call vdu_sprite_select
047D3C CD EE 18 04 0059*   	call vdu_sprite_clear_frames
047D40 21 51 01 00 0060*   	ld hl,BUF_LASER_A
047D44 06 02       0061*   	ld b,2 ; two bitmaps for laser
047D46             0062*   @frames_loop:
047D46 C5          0063*   	push bc
047D47 E5          0064*   	push hl
047D48 CD 30 1A 04 0065*   	call vdu_sprite_add_buff
047D4C E1          0066*   	pop hl
047D4D 23          0067*   	inc hl
047D4E C1          0068*   	pop bc
047D4F 10 F5       0069*   	djnz @frames_loop
047D51 D1          0070*       pop de ; sprite loop counter
047D52 F1          0071*       pop af ; sprite id
047D53 3C          0072*       inc a
047D54 1D          0073*       dec e
047D55 C2 36 7D 04 0074*       jp nz,@sprites_loop
047D59             0075*   ; set laser firing timer to zero
047D59 FD 21 F2 7C 0076*       ld iy,tmr_laser
       04          
047D5E 21 00 00 00 0077*       ld hl,0
047D62 CD 9E 12 04 0078*       call timestamp_tmr_set
047D66 C9          0079*       ret
047D67             0080*   ; end init_player_laser
047D67             0081*   
047D67             0082*   player_move_weapons:
047D67             0083*   ; initialize pointers and loop counter
047D67 FD 21 56 9D 0084*       ld iy,player_weapons_begin ; set iy to first record in table
       04          
047D6C 06 04       0085*       ld b,player_lasers_max ; loop counter
047D6E CD 0B 80 04 0086*       call move_sprite_group
047D72 C9          0087*       ret
047D73             0088*   ; end player_move_weapons
047D73             0089*   
047D73             0090*   player_spawn_laser:
047D73             0091*    ; check laser spawn timer
047D73 FD 21 F2 7C 0092*       ld iy,tmr_laser
       04          
047D78 CD A9 12 04 0093*       call timestamp_tmr_get
047D7C F0          0094*       ret p ; not time to fire
047D7D             0095*   ; check laser power
047D7D 3A FB 7C 04 0096*       ld a,(laser_power)
047D81 21 FE 7C 04 0097*       ld hl,laser_power_per_shot
047D85 96          0098*       sub (hl) ; units of power per laser shot
047D86 D8          0099*       ret c ; not enough power to fire
047D87             0100*   ; update power to reflect firing
047D87 32 FB 7C 04 0101*       ld (laser_power),a
047D8B             0102*   ; reset timer
047D8B 2A F8 7C 04 0103*       ld hl,(tmr_laser_reset)
047D8F CD 9E 12 04 0104*       call timestamp_tmr_set
047D93             0105*   ; fire the laser
047D93 DD 21 56 9D 0106*       ld ix,player_weapons_begin
       04          
047D98 06 04       0107*       ld b,player_lasers_max
047D9A FD 21 56 9E 0108*       ld iy,player_begin
       04          
047D9F FD 22 DC 7E 0109*       ld (table_pointer),iy
       04          
047DA4 21 DF 7C 04 0110*       ld hl,laser_defaults
047DA8 CD D9 7F 04 0111*       call spawn_sprite_from_sprite
047DAC D0          0112*       ret nc ; no carry means no free sprite slots, so we go home
047DAD             0113*   ; other specific initialization
047DAD             0114*   ; ------------------------------------------------
047DAD FD 21 56 9E 0115*       ld iy,player_begin
       04          
047DB2             0116*   ; x-coordinate
047DB2 FD 27 01    0117*       ld hl,(iy+sprite_x)
047DB5 11 00 05 00 0118*       ld de,5*256 ; horizontal center with player sprite
047DB9 19          0119*       add hl,de
047DBA DD 2F 01    0120*       ld (ix+sprite_x),hl
047DBD             0121*   ; y-coordinate
047DBD FD 27 04    0122*       ld hl,(iy+sprite_y)
047DC0 11 00 FA FF 0123*       ld de,-6*256 ; set laser y a few pixels above player
047DC4 19          0124*       add hl,de
047DC5 DD 2F 04    0125*       ld (ix+sprite_y),hl
047DC8             0126*   ; set laser velocity
047DC8 21 00 FC FF 0127*       ld hl,-laser_speed
047DCC DD 2F 0A    0128*       ld (ix+sprite_yvel),hl
047DCF C9          0129*       ret
047DD0             0130*   ; end player_spawn_laser
047DD0             0131*   
047DD0             0132*   move_player_laser:
047DD0             0133*   ; run the movement program for the laser
047DD0 CD A1 80 04 0134*       call move_sprite
047DD4 3A DF 7E 04 0135*       ld a,(sprite_screen_edge)
047DD8 E6 08       0136*       and a,collide_top ; check collision with top of screen
047DDA CA E2 7D 04 0137*       jp z,@F ; still on screen
047DDE C3 25 7F 04 0138*       jp table_deactivate_sprite
047DE2             0139*   @@: ; check animation timer
047DE2 FD 35 23    0140*       dec (iy+sprite_animation_timer)
047DE5 C2 F9 7D 04 0141*       jp nz,@F
047DE9 3E 02       0142*       ld a,laser_animation_timer_reset
047DEB FD 77 23    0143*       ld (iy+sprite_animation_timer),a
047DEE FD 7E 00    0144*       ld a,(iy+sprite_id)
047DF1 CD DB 18 04 0145*       call vdu_sprite_select
047DF5 CD 22 19 04 0146*       call vdu_sprite_next_frame
047DF9             0147*   @@: ; all done
047DF9 C9          0148*       ret
047DFA             0149*   ; end move_player_laser
047DFA             0150*   
047DFA             0151*   charge_laser:
047DFA             0152*   ; check laser timer
047DFA 21 FF 7C 04 0153*       ld hl,charge_laser_timer
047DFE 35          0154*       dec (hl)
047DFF C0          0155*       ret nz
047E00 3A 00 7D 04 0156*       ld a,(charge_laser_timer_max)
047E04 77          0157*       ld (hl),a
047E05 21 FB 7C 04 0158*       ld hl,laser_power
047E09 34          0159*       inc (hl)
047E0A 3E 40       0160*       ld a,64
047E0C BE          0161*       cp (hl)
047E0D D0          0162*       ret nc
047E0E 77          0163*       ld (hl),a
047E0F C9          0164*       ret
047E10             0165*   ; end charge_laser
047E10             0166*   draw_laser:
047E10 CD FA 7D 04 0167*       call charge_laser
047E14 21 FC 7C 04 0168*       ld hl,laser_power_last
047E18 3A FB 7C 04 0169*       ld a,(laser_power)
047E1C BE          0170*       cp (hl)
047E1D C8          0171*       ret z ; no change to update
047E1E 77          0172*       ld (hl),a
047E1F DD 21 01 7D 0173*       ld ix,bar_laser
       04          
047E24 DD 77 00    0174*       ld (ix+bar_val),a ; TODO: this is redundant
047E27 CD FC 7A 04 0175*       call bar_update_v
047E2B C9          0176*       ret
047E2C             0065        include "player_score.inc"
047E2C             0001*   ; scores are unsigned integers
047E2C 00 00 00    0002*   player_score: dl 0
047E2F 00 00 00    0003*   player_starting_score: dl 0 ; to reset after restarting a map
047E32             0004*   
047E32             0005*   ; inputs: iy set to sprite/tile record being tallied
047E32             0006*   ; outputs: hl,player_score = updated score
047E32             0007*   ; destroys: hl,de
047E32             0008*   update_score:
047E32 11 00 00 00 0009*       ld de,0 ; clear deu and d
047E36 FD 5E 26    0010*       ld e,(iy+sprite_points)
047E39 2A 2C 7E 04 0011*       ld hl,(player_score)
047E3D 19          0012*       add hl,de
047E3E 22 2C 7E 04 0013*       ld (player_score),hl
047E42 CD 47 7E 04 0014*       call print_score
047E46 C9          0015*       ret
047E47             0016*   ; end update_score
047E47             0017*   
047E47             0018*   ; text coordinates for score display
047E47             0019*   score_x: equ 50
047E47             0020*   score_y: equ 33
047E47             0021*   ; inputs: none
047E47             0022*   print_score:
047E47             0023*   ; set text colors
047E47 3E 80       0024*       ld a,c_black+128
047E49 CD 76 13 04 0025*       call vdu_colour_text
047E4D 3E 0A       0026*       ld a,c_green
047E4F CD 76 13 04 0027*       call vdu_colour_text
047E53             0028*   ; print the score
047E53 0E 32       0029*       ld c,score_x
047E55 06 21       0030*       ld b,score_y
047E57 CD 31 13 04 0031*       call vdu_move_cursor
047E5B 2A 2C 7E 04 0032*       ld hl,(player_score)
047E5F CD CC 00 04 0033*       call printDec
047E63 C9          0034*       ret
047E64             0035*   ; end print_score
047E64             0066        include "player_shields.inc"
047E64             0001*   
047E64 40          0002*   player_shields: db 64
047E65 40          0003*   player_shields_max: db 64
047E66             0004*   ; player_shields_max: db 8 ; DEBUG
047E66 00          0005*   player_shields_last: db 0
047E67             0006*   bar_shields:
047E67 00 00 00    0007*       dl 0 ; value
047E6A F0 01 00    0008*       dl 496 ; x0
047E6D 30 01 00    0009*       dl 304 ; y0
047E70 F7 01 00    0010*       dl 496+7 ; x1
047E73 6F 01 00    0011*       dl 304+63 ; y1
047E76 F0 00 00    0012*       dl 304-64 ; y-plot coordinate
047E79             0013*   
047E79             0014*   init_bar_shields:
047E79 DD 21 67 7E 0015*       ld ix,bar_shields
       04          
047E7E 2A 65 7E 04 0016*       ld hl,(player_shields_max)
047E82 DD 2F 00    0017*       ld (ix+bar_val),hl
047E85 CD FC 7A 04 0018*       call bar_update_v
047E89 C9          0019*       ret
047E8A             0020*   ; end init_bar_shields
047E8A             0021*   
047E8A             0022*   ; inputs: iy set to sprite/tile record being tallied
047E8A             0023*   ; outputs: hl,player_shields = updated shields
047E8A             0024*   ; destroys: hl,de
047E8A             0025*   update_shields:
047E8A FD 6E 27    0026*       ld l,(iy+sprite_shield_damage)
047E8D 3A 64 7E 04 0027*       ld a,(player_shields)
047E91 85          0028*       add a,l
047E92 F2 97 7E 04 0029*       jp p,@have_shields
047E96 AF          0030*       xor a ; set to zero
047E97             0031*   @have_shields:
047E97 32 64 7E 04 0032*       ld (player_shields),a
047E9B B7          0033*       or a ; check for zero
047E9C CA 6C 78 04 0034*       jp z,kill_player
047EA0 C9          0035*       ret
047EA1             0036*   ; end update_shields
047EA1             0037*   
047EA1             0038*   draw_shields:
047EA1 21 66 7E 04 0039*       ld hl,player_shields_last
047EA5 3A 64 7E 04 0040*       ld a,(player_shields)
047EA9 BE          0041*       cp (hl)
047EAA C8          0042*       ret z ; no change to update
047EAB 77          0043*       ld (hl),a
047EAC DD 21 67 7E 0044*       ld ix,bar_shields
       04          
047EB1 DD 77 00    0045*       ld (ix+bar_val),a ; TODO: this is redundant
047EB4 CD FC 7A 04 0046*       call bar_update_v
047EB8 C9          0047*       ret
047EB9             0067        include "screen.inc"
047EB9             0001*   
047EB9             0002*   screen_right: equ 511
047EB9             0003*   screen_bottom: equ 383
047EB9             0004*   origin_top: equ 48
047EB9             0005*   origin_left: equ 128
047EB9             0006*   field_top: equ 0
047EB9             0007*   field_bottom: equ screen_bottom-origin_top
047EB9             0008*   field_left: equ 0
047EB9             0009*   field_right: equ 255
047EB9             0010*   sprite_top: equ field_top
047EB9             0011*   sprite_bottom: equ field_bottom-15
047EB9             0012*   sprite_left: equ field_left
047EB9             0013*   sprite_right: equ field_right-15
047EB9             0014*   tile_bottom: equ screen_bottom+1
047EB9             0015*   
047EB9             0016*   ; set gfx origin and viewport to playing field window
047EB9             0017*   set_gfx_playing_field:
047EB9 01 80 00 00 0018*       ld bc,origin_left
047EBD 11 30 00 00 0019*       ld de,origin_top
047EC1 CD CA 13 04 0020*       call vdu_set_gfx_origin
047EC5 01 00 00 00 0021*       ld bc,field_left
047EC9 11 00 00 00 0022*       ld de,field_top
047ECD DD 21 FF 00 0023*       ld ix,field_right
       00          
047ED2 FD 21 4F 01 0024*       ld iy,field_bottom
       00          
047ED7 CD E5 13 04 0025*       call vdu_set_gfx_viewport
047EDB C9          0026*       ret
047EDC             0027*   ; end set_gfx_playing_field
047EDC             0068        include "sprites.inc"
047EDC             0001*   ; sprite_type
047EDC             0002*   enemy_dead: equ 0
047EDC             0003*   enemy_air: equ 1
047EDC             0004*   enemy_ground: equ 2
047EDC             0005*   enemy_projectile: equ 3
047EDC             0006*   explosion: equ 4
047EDC             0007*   player: equ 5
047EDC             0008*   player_air: equ 6
047EDC             0009*   player_ground: equ 7
047EDC             0010*   
047EDC             0011*   ; ###### SPRITE TABLE FIELD INDICES ######
047EDC             0012*   table_record_size:         equ  64; bytes per sprite record
047EDC             0013*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
047EDC             0014*   ; sprite state variables
047EDC             0015*   sprite_state_variables:    equ   1; beginning of sprite state variables
047EDC             0016*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
047EDC             0017*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
047EDC             0018*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
047EDC             0019*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
047EDC             0020*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
047EDC             0021*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
047EDC             0022*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
047EDC             0023*   ; sprite definition variables
047EDC             0024*   sprite_definitions:        equ  22; beginnning of sprite definition variables
047EDC             0025*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
047EDC             0026*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
047EDC             0027*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
047EDC             0028*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
047EDC             0029*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
047EDC             0030*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
047EDC             0031*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
047EDC             0032*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
047EDC             0033*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
047EDC             0034*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
047EDC             0035*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
047EDC             0036*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
047EDC             0037*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
047EDC             0038*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
047EDC             0039*   sprite_frame:              equ  40; 1 bytes ;current animation frame
047EDC             0040*   
047EDC             0041*   ; ###### SPRITE TABLE VARIABLES ######
047EDC             0042*   ; pointer to top address of current record, initialized to table_base
047EDC 56 9D 04    0043*   table_pointer: dl table_base
047EDF             0044*   
047EDF             0045*   ; flag indicating collision with screen edge
047EDF 00          0046*   sprite_screen_edge: db #00
047EE0             0047*   
047EE0             0048*   ; ######### COLLISION SPRITE PARAMETERS ##########
047EE0             0049*   ; integer coordinates are all that are needed for collision calculations
047EE0 00          0050*   collision_x: db 0x00
047EE1 00          0051*   collision_y: db 0x00
047EE2 00          0052*   collision_dim_x: db 0x00
047EE3 00          0053*   collision_dim_y: db 0x00
047EE4             0054*   
047EE4             0055*   ; scratch variables
047EE4 00          0056*   x: db 0x00 ; 8-bit signed integer
047EE5 00          0057*   y: db 0x00 ; 8-bit signed integer
047EE6 00 00 00    0058*   x0: dl 0x000000 ; 16.8 signed fixed place
047EE9 00 00 00    0059*   y0: dl 0x000000 ; 16.8 signed fixed place
047EEC 00 00 00    0060*   incx1: dl 0x000000 ; 16.8 signed fixed place
047EEF 00 00 00    0061*   incy1: dl 0x000000 ; 16.8 signed fixed place
047EF2 00 00 00    0062*   incx2: dl 0x000000 ; 16.8 signed fixed place
047EF5 00 00 00    0063*   incy2: dl 0x000000 ; 16.8 signed fixed place
047EF8             0064*   
047EF8             0065*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
047EF8 00 00 00    0066*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
047EFB 00 00 00    0067*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
047EFE 00 00 00    0068*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
047F01             0069*   
047F01             0070*   table_init:
047F01             0071*   ; clear the sprite table
047F01 AF          0072*       xor a ; write zeroes to sprite table
047F02 21 56 9D 04 0073*       ld hl,table_base ; address to copy from
047F06 01 00 05 00 0074*       ld bc,table_end-table_base ; number of bytes to clear
047F0A CD 5F 03 04 0075*       call clear_mem
047F0E             0076*   ; write sprite ids
047F0E DD 21 56 9D 0077*       ld ix,table_base
       04          
047F13 AF          0078*       xor a ; sprite id
047F14 0E 00       0079*       ld c,0 ; sprite type
047F16 06 14       0080*       ld b,table_num_records ; loop counter
047F18             0081*   @loop:
047F18 DD 77 00    0082*       ld (ix+sprite_id),a
047F1B DD 71 16    0083*       ld (ix+sprite_type),c
047F1E ED 32 40    0084*       lea ix,ix+table_record_size
047F21 3C          0085*       inc a
047F22 10 F4       0086*       djnz @loop
047F24 C9          0087*       ret
047F25             0088*   ; end table_init
047F25             0089*   
047F25             0090*   ; deactivate the sprite with the given id
047F25             0091*   ; inputs: iy set to sprite record
047F25             0092*   ; outputs: nothing
047F25             0093*   ; destroys: a,hl
047F25             0094*   table_deactivate_sprite:
047F25 FD 7E 00    0095*       ld a,(iy+sprite_id) ; get spriteId
047F28 CD DB 18 04 0096*       call vdu_sprite_select ; select sprite
047F2C CD 5F 19 04 0097*       call vdu_sprite_hide
047F30 FD CB 1D B6 0098*       res sprite_alive,(iy+sprite_collisions)
047F34 FD CB 1D BE 0099*       res sprite_just_died,(iy+sprite_collisions)
047F38 C9          0100*       ret
047F39             0101*   ; end table_deactivate_sprite
047F39             0102*   
047F39             0103*   sprites_init:
047F39             0104*   ; initialize sprites
047F39 CD 0F 1A 04 0105*   	call vdu_sprite_reset ; clear sprite data in vdp
047F3D AF          0106*   	xor a ; loop counter / sprite id
047F3E             0107*   @sprite_loop:
047F3E F5          0108*   	push af ; save loop counter / sprite id
047F3F CD DB 18 04 0109*   	call vdu_sprite_select
047F43 21 00 01 00 0110*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
047F47 CD 30 1A 04 0111*   	call vdu_sprite_add_buff
047F4B F1          0112*   	pop af ; restore loop counter / sprite id
047F4C 3C          0113*       inc a
047F4D FE 14       0114*       cp table_num_records
047F4F C2 3E 7F 04 0115*       jp nz,@sprite_loop
047F53 CD 0F 19 04 0116*   	call vdu_sprite_activate
047F57             0117*   
047F57             0118*   ; define player sprite
047F57 3A 56 9E 04 0119*   	ld a,(player_begin+sprite_id)
047F5B CD DB 18 04 0120*   	call vdu_sprite_select
047F5F CD EE 18 04 0121*   	call vdu_sprite_clear_frames
047F63 21 76 01 00 0122*   	ld hl,BUF_SHIP_0L
047F67 01 03 00 00 0123*   	ld bc,3 ; three bitmaps for player ship
047F6B             0124*   @sprite_player_loop:
047F6B C5          0125*   	push bc
047F6C E5          0126*   	push hl
047F6D CD 30 1A 04 0127*   	call vdu_sprite_add_buff
047F71 E1          0128*   	pop hl
047F72 23          0129*   	inc hl
047F73 C1          0130*   	pop bc
047F74 10 F5       0131*   	djnz @sprite_player_loop
047F76             0132*   
047F76             0133*   ; define player weapon sprites
047F76 CD 2C 7D 04 0134*       call init_player_laser
047F7A             0135*   
047F7A             0136*   ; define enemy sprites
047F7A CD 2C 22 04 0137*       call init_enemy_seekers
047F7E CD DC 20 04 0138*       call init_enemy_fireballs
047F82             0139*   
047F82             0140*   ; define explosion sprites
047F82 CD FE 22 04 0141*       call init_explosions
047F86 C9          0142*       ret
047F87             0143*   ; end sprites_init
047F87             0144*   
047F87             0145*   ; gets the next available sprite id for a particular sprite group
047F87             0146*   ; inputs; ix = pointer to sprite group, b = number of records in sprite group
047F87             0147*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
047F87             0148*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047F87             0149*   ; destroys: a,b,c,hl,ix
047F87             0150*   table_get_next_id:
047F87             0151*   @loop:
047F87 DD CB 1D 76 0152*       bit sprite_alive,(ix+sprite_collisions)
047F8B 28 07       0153*       jr z,@found
047F8D ED 32 40    0154*       lea ix,ix+table_record_size
047F90 10 F5       0155*       djnz @loop
047F92             0156*   @notfound:
047F92 AF          0157*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
047F93 C9          0158*       ret
047F94             0159*   @found:
047F94             0160*   ; return sprite id
047F94 DD 7E 00    0161*       ld a,(ix+sprite_id)
047F97 37          0162*       scf ; sets carry flag indicating we found a free sprite
047F98 C9          0163*       ret ; done
047F99             0164*   ; end table_get_next_id
047F99             0165*   
047F99             0166*   ; create a new sprite at the prescribed coordinates
047F99             0167*   ; inputs: hl = pointer to new sprite default settings, ub.c, ud.e = x,y position
047F99             0168*   ;         ix = pointer to sprite group, a = number of records in sprite group
047F99             0169*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
047F99             0170*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047F99             0171*   spawn_sprite_from_coords:
047F99 ED 43 D3 7F 0172*       ld (@sprite_x),bc ; store x-coordinate
       04          
047F9E ED 53 D6 7F 0173*       ld (@sprite_y),de ; store y-coordinate
       04          
047FA3 47          0174*       ld b,a ; number of records in sprite group
047FA4 E5          0175*       push hl ; back up pointer to new sprite defaults
047FA5 CD 87 7F 04 0176*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
047FA9 E1          0177*       pop hl ; restore pointer to new sprite defaults
047FAA D0          0178*       ret nc ; no carry means no free sprite slots, so we go home
047FAB             0179*   ; copy default settings to new sprite
047FAB DD E5       0180*       push ix ; back up pointer to new sprite record
047FAD ED 32 16    0181*       lea ix,ix+sprite_definitions ; bump pointer to copy to
047FB0 DD E5       0182*       push ix ; pointer to default sprite settings
047FB2 D1          0183*       pop de ; address to copy to
047FB3 01 2A 00 00 0184*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
047FB7 ED B0       0185*       ldir ; copies defaults to new sprite record
047FB9 DD E1       0186*       pop ix ; restore pointer to new sprite record
047FBB             0187*   ; copy sprite position from existing sprite
047FBB 2A D3 7F 04 0188*       ld hl,(@sprite_x)
047FBF DD 2F 01    0189*       ld (ix+sprite_x),hl
047FC2 2A D6 7F 04 0190*       ld hl,(@sprite_y)
047FC6 DD 2F 04    0191*       ld (ix+sprite_y),hl
047FC9             0192*   ; return to caller
047FC9 DD CB 16 FE 0193*       set 7,(ix+sprite_type) ; set just spawned flag
047FCD DD CB 1D F6 0194*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
047FD1 37          0195*       scf ; set carry flag to indicate success
047FD2 C9          0196*       ret
047FD3 00 00 00    0197*   @sprite_x: dl 0 ; new sprite x-coordinate
047FD6 00 00 00    0198*   @sprite_y: dl 0 ; new sprite y-coordinate
047FD9             0199*   ; end spawn_sprite_from_coords
047FD9             0200*   
047FD9             0201*   ; create a new sprite at the same location as an existing sprite
047FD9             0202*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
047FD9             0203*   ;         ix = pointer to sprite group, b = number of records in sprite group
047FD9             0204*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
047FD9             0205*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047FD9             0206*   spawn_sprite_from_sprite:
047FD9 E5          0207*       push hl ; back up pointer to new sprite defaults
047FDA CD 87 7F 04 0208*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
047FDE E1          0209*       pop hl ; restore pointer to new sprite defaults
047FDF D0          0210*       ret nc ; no carry means no free sprite slots, so we go home
047FE0             0211*   ; copy default settings to new sprite
047FE0 DD E5       0212*       push ix ; back up pointer to new sprite record
047FE2 ED 32 16    0213*       lea ix,ix+sprite_definitions ; bump pointer to copy to
047FE5 DD E5       0214*       push ix ; pointer to default sprite settings
047FE7 D1          0215*       pop de ; address to copy to
047FE8 01 2A 00 00 0216*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
047FEC ED B0       0217*       ldir ; copies defaults to new sprite record
047FEE DD E1       0218*       pop ix ; restore pointer to new sprite record
047FF0             0219*   ; copy sprite position from existing sprite
047FF0 FD 2A DC 7E 0220*       ld iy,(table_pointer) ; get existing sprite record
       04          
047FF5 FD 27 01    0221*       ld hl,(iy+sprite_x)
047FF8 DD 2F 01    0222*       ld (ix+sprite_x),hl
047FFB FD 27 04    0223*       ld hl,(iy+sprite_y)
047FFE DD 2F 04    0224*       ld (ix+sprite_y),hl
048001             0225*   ; return to caller
048001 DD CB 16 FE 0226*       set 7,(ix+sprite_type) ; set just spawned flag
048005 DD CB 1D F6 0227*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
048009 37          0228*       scf ; set carry flag to indicate success
04800A C9          0229*       ret
04800B             0230*   ; end spawn_sprite_from_sprite
04800B             0231*   
04800B             0232*   ; call the behavior subroutines for a specified sprite group
04800B             0233*   ; inputs: iy = pointer to sprite group, b = number of records in sprite group
04800B             0234*   move_sprite_group:
04800B C5          0235*       push bc ; backup loop counter
04800C FD E5       0236*       push iy ; backup table pointer
04800E             0237*   @move_loop:
04800E FD 22 DC 7E 0238*       ld (table_pointer),iy ; update table pointer
       04          
048013 C5          0239*       push bc ; backup loop counter
048014             0240*   ; check top bit of sprite_type to see if sprite is just spawned
048014 FD CB 16 7E 0241*       bit 7,(iy+sprite_type)
048018 C2 4D 80 04 0242*       jp nz,@next_record ; if just spawned, skip to next record
04801C             0243*   ; check sprite_just_died bit
04801C FD CB 1D 7E 0244*       bit sprite_just_died,(iy+sprite_collisions)
048020 C2 84 80 04 0245*       jp nz,@sprite_died ; if just died, deactivate sprite
048024             0246*   ; check sprite_alive bit to see if sprite is active
048024 FD CB 1D 76 0247*       bit sprite_alive,(iy+sprite_collisions)
048028 CA 4D 80 04 0248*       jp z,@next_record ; ... skip to next record
04802C             0249*   ; otherwise move the sprite
04802C FD 27 1A    0250*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
04802F             0251*       CALL_HL ; run the behavior subroutine
04802F 01 35 80 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
048033 C5          0002*M1     push bc ; which constitutes the return address
048034 E9          0003*M1     jp (hl) ; Jump to the address in HL
048035 FD 7E 00    0252*       ld a,(iy+sprite_id) ; get spriteId
048038 CD DB 18 04 0253*       call vdu_sprite_select ; select sprite
04803C FD 7E 28    0254*       ld a,(iy+sprite_frame)
04803F CD 3E 19 04 0255*       call vdu_sprite_select_frame
048043 FD 07 01    0256*       ld bc,(iy+sprite_x)
048046 FD 17 04    0257*       ld de,(iy+sprite_y)
048049 CD A7 19 04 0258*       call vdu_sprite_move_abs168
04804D             0259*   ; fall through to @next_record
04804D             0260*   @next_record:
04804D ED 33 40    0261*       lea iy,iy+table_record_size
048050 AF          0262*       xor a ; clears carry flag
048051 32 DF 7E 04 0263*       ld (sprite_screen_edge),a ; clear screen edge collision flag
048055 C1          0264*       pop bc ; get back our loop counter
048056 10 B6       0265*       djnz @move_loop ; loop until we've checked all the records
048058             0266*   ; reset all just spawned flags
048058 FD E1       0267*       pop iy ; get back table pointer
04805A C1          0268*       pop bc ; get back loop counter
04805B             0269*   @reset_just_spawned:
04805B C5          0270*       push bc ; back up loop counter
04805C FD CB 16 7E 0271*       bit 7,(iy+sprite_type) ; check if just spawned
048060 CA 7D 80 04 0272*       jp z,@F
048064 FD CB 16 BE 0273*       res 7,(iy+sprite_type) ; clear just spawned flag
048068 FD 7E 00    0274*       ld a,(iy+sprite_id)
04806B CD DB 18 04 0275*       call vdu_sprite_select
04806F FD 07 01    0276*       ld bc,(iy+sprite_x)
048072 FD 17 04    0277*       ld de,(iy+sprite_y)
048075 CD A7 19 04 0278*       call vdu_sprite_move_abs168
048079 CD 51 19 04 0279*       call vdu_sprite_show
04807D             0280*   @@:
04807D ED 33 40    0281*       lea iy,iy+table_record_size
048080 C1          0282*       pop bc ; get back loop counter
048081 10 D8       0283*       djnz @reset_just_spawned
048083 C9          0284*       ret
048084             0285*   @sprite_died:
048084 CD 25 7F 04 0286*       call table_deactivate_sprite
048088 C3 4D 80 04 0287*       jp @next_record
04808C             0288*   ; end move_sprite_group
04808C             0289*   
04808C             0290*   ; update behavior subroutines for a specified sprite group
04808C             0291*   ; inputs: hl = pointer to move program, iy = pointer to sprite group, b = number of records in sprite group
04808C             0292*   change_sprite_group_move_program:
04808C             0293*   @update_loop:
04808C             0294*   ; check sprite_alive bit to see if sprite is active
04808C FD CB 1D 76 0295*       bit sprite_alive,(iy+sprite_collisions)
048090 CA 9B 80 04 0296*       jp z,@next_record ; ... skip to next record
048094             0297*   ; otherwise load the behavior subroutine address
048094 FD 2F 1A    0298*       ld (iy+sprite_move_program),hl
048097             0299*    ; clear just spawned flag
048097 FD CB 16 BE 0300*       res 7,(iy+sprite_type)
04809B             0301*   ; fall through to @next_record
04809B             0302*   @next_record:
04809B ED 33 40    0303*       lea iy,iy+table_record_size
04809E 10 EC       0304*       djnz @update_loop ; loop until we've checked all the records
0480A0 C9          0305*       ret
0480A1             0306*   ; end change_sprite_group_move_program
0480A1             0307*   
0480A1             0308*   ; compute a sprite's new position based on its component x,y velocities
0480A1             0309*   ; with screen boundary checking and update its sprite table record accordingly
0480A1             0310*   ; inputs: table_pointer set to sprite record
0480A1             0311*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
0480A1             0312*   ; destroys: everything
0480A1             0313*   ; note: actual rendering of sprite must be handled by caller
0480A1             0314*   move_sprite:
0480A1 FD 2A DC 7E 0315*       ld iy,(table_pointer)
       04          
0480A6             0316*   ; x-axis movement
0480A6 FD 27 01    0317*       ld hl,(iy+sprite_x)
0480A9 FD 17 07    0318*       ld de,(iy+sprite_xvel)
0480AC 19          0319*       add hl,de
0480AD FD 2F 01    0320*       ld (iy+sprite_x),hl
0480B0             0321*   ; y-axis movement
0480B0 FD 27 04    0322*       ld hl,(iy+sprite_y)
0480B3 FD 17 0A    0323*       ld de,(iy+sprite_yvel)
0480B6 19          0324*       add hl,de
0480B7 FD 2F 04    0325*       ld (iy+sprite_y),hl
0480BA             0326*   ; detect screen edge collisions
0480BA AF          0327*       xor a ; reset screen edge collision flag and clear carry
0480BB 32 DF 7E 04 0328*       ld (sprite_screen_edge),a
0480BF             0329*   ; y-axis first since we already have it in hl
0480BF 11 00 00 00 0330*       ld de,-sprite_top*256
0480C3 ED 5A       0331*       adc hl,de
0480C5 FA EF 80 04 0332*       jp m,@top
0480C9 ED 52       0333*       sbc hl,de ; hl back to original value
0480CB 11 00 C0 FE 0334*       ld de,-sprite_bottom*256
0480CF ED 5A       0335*       adc hl,de
0480D1 F2 F9 80 04 0336*       jp p,@bottom
0480D5             0337*   @xaxis:
0480D5 FD 27 01    0338*       ld hl,(iy+sprite_x)
0480D8 11 00 00 00 0339*       ld de,-sprite_left*256
0480DC ED 5A       0340*       adc hl,de
0480DE FA 14 81 04 0341*       jp m,@left
0480E2 ED 52       0342*       sbc hl,de ; hl back to original value
0480E4 11 00 10 FF 0343*       ld de,-sprite_right*256
0480E8 ED 5A       0344*       adc hl,de
0480EA F2 22 81 04 0345*       jp p,@right
0480EE             0346*   ; no edge collisions so go home
0480EE C9          0347*       ret
0480EF             0348*   @top:
0480EF 3E 08       0349*       ld a,collide_top
0480F1 21 00 00 00 0350*       ld hl,sprite_top*256
0480F5 C3 FF 80 04 0351*       jp @collide_y
0480F9             0352*   @bottom:
0480F9 3E 04       0353*       ld a,collide_bottom
0480FB 21 00 40 01 0354*       ld hl,sprite_bottom*256
0480FF             0355*   @collide_y:
0480FF 32 DF 7E 04 0356*       ld (sprite_screen_edge),a
048103 FD 2F 04    0357*       ld (iy+sprite_y),hl
048106             0358*   ; reverse y-axis velocity
048106 FD 27 0A    0359*       ld hl,(iy+sprite_yvel)
048109 CD 80 04 04 0360*       call neg_hlu
04810D FD 2F 0A    0361*       ld (iy+sprite_yvel),hl
048110             0362*   ; go check for x-axis collisions
048110 C3 D5 80 04 0363*       jp @xaxis
048114             0364*   @left:
048114 3A DF 7E 04 0365*       ld a,(sprite_screen_edge)
048118 F6 02       0366*       or a,collide_left
04811A 21 00 00 00 0367*       ld hl,sprite_left*256
04811E C3 2C 81 04 0368*       jp @collide_x
048122             0369*   @right:
048122 3A DF 7E 04 0370*       ld a,(sprite_screen_edge)
048126 F6 01       0371*       or a,collide_right
048128 21 00 F0 00 0372*       ld hl,sprite_right*256
04812C             0373*   @collide_x:
04812C 32 DF 7E 04 0374*       ld (sprite_screen_edge),a
048130 FD 2F 01    0375*       ld (iy+sprite_x),hl
048133             0376*   ; reverse x-axis velocity
048133 FD 27 07    0377*       ld hl,(iy+sprite_xvel)
048136 CD 80 04 04 0378*       call neg_hlu
04813A FD 2F 07    0379*       ld (iy+sprite_xvel),hl
04813D             0380*   ; final collision flag to a and return
04813D 3A DF 7E 04 0381*       ld a,(sprite_screen_edge)
048141 C9          0382*       ret
048142             0383*   ; end move_sprite
048142             0384*   
048142             0385*   sprite_compute_velocities:
048142 FD 27 10    0386*       ld hl,(iy+sprite_heading)
048145 FD 17 0D    0387*       ld de,(iy+sprite_vel)
048148 CD F4 06 04 0388*       call polar_to_cartesian
04814C FD 2A DC 7E 0389*       ld iy,(table_pointer)
       04          
048151 FD 0F 07    0390*       ld (iy+sprite_xvel),bc ; save x-velocity component
048154 FD 1F 0A    0391*       ld (iy+sprite_yvel),de ; save y-velocity component
048157 C9          0392*       ret
048158             0393*   ; end sprite_compute_velocities
048158             0394*   
048158             0395*   ; compute animation frame based on sprite_animation and sprite_heading
048158             0396*   ; inputs: table_pointer set to sprite record
048158             0397*   ; outputs: a, sprite_frame set to animation frame
048158             0398*   ; destroys: a,hl
048158             0399*   sprite_frame_heading_animation:
048158 FD 7E 11    0400*       ld a,(iy+sprite_heading+1) ; we want the integer portion
04815B CB 3F       0401*       srl a ; divide integer portion by 8
04815D CB 3F       0402*       srl a
04815F CB 3F       0403*       srl a
048161 FD 66 22    0404*       ld h,(iy+sprite_animation)
048164 2E 20       0405*       ld l,32 ; 32 orientation frames per animation
048166 ED 6C       0406*       mlt hl ; hl = offset from base animation
048168 85          0407*       add a,l ; modulo256 since sprite_frame is only 1 byte
048169 FD 77 28    0408*       ld (iy+sprite_frame),a
04816C C9          0409*       ret
04816D             0410*   ; end sprite_frame_heading_animation
04816D             0411*   
04816D             0412*   ; compute animation frame based on sprite_heading
04816D             0413*   ; inputs: table_pointer set to sprite record
04816D             0414*   ; outputs: a, sprite_frame set to animation frame
04816D             0415*   ; destroys: a,hl
04816D             0416*   sprite_frame_heading:
04816D FD 7E 11    0417*       ld a,(iy+sprite_heading+1) ; we want the integer portion
048170 CB 3F       0418*       srl a ; divide integer portion by 8
048172 CB 3F       0419*       srl a
048174 CB 3F       0420*       srl a
048176 FD 77 28    0421*       ld (iy+sprite_frame),a
048179 C9          0422*       ret
04817A             0423*   ; end sprite_frame_heading
04817A             0424*   
04817A             0425*   ; load a sprite with animation bitmaps
04817A             0426*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
04817A             0427*   sprite_load_frames:
04817A             0428*   ; back up input parameters
04817A E5          0429*       push hl ; base bufferId
04817B C5          0430*       push bc ; bc = number of frames
04817C CD EE 18 04 0431*       call vdu_sprite_clear_frames
048180 C1          0432*       pop bc ; bc = number of frames
048181 E1          0433*       pop hl ; = base bufferId
048182             0434*   @load_frames:
048182 C5          0435*       push bc ; back up loop counter
048183 E5          0436*       push hl ; back up base bufferId
048184 CD 30 1A 04 0437*       call vdu_sprite_add_buff
048188 E1          0438*       pop hl ; restore base bufferId
048189 23          0439*       inc hl ; bump it to the next frame
04818A             0440*   ; decrement loop counter
04818A C1          0441*       pop bc
04818B 0B          0442*       dec bc
04818C 79          0443*       ld a,c
04818D B7          0444*       or a
04818E C2 82 81 04 0445*       jp nz,@load_frames
048192 78          0446*       ld a,b
048193 B7          0447*       or a
048194 C2 82 81 04 0448*       jp nz,@load_frames
048198 C9          0449*       ret
048199             0450*   ; end sprite_load_frames
048199             0069        include "state.inc"
048199             0001*   ; Game state variables
048199 A7 81 04    0002*   game_state:  dl game_main_menu
04819C             0003*   
04819C             0004*   do_game:
04819C 2A 99 81 04 0005*       ld hl,(game_state)   ; Load the current game state
0481A0             0006*       CALL_HL                ; Call the corresponding state handler
0481A0 01 A6 81 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
0481A4 C5          0002*M1     push bc ; which constitutes the return address
0481A5 E9          0003*M1     jp (hl) ; Jump to the address in HL
0481A6 C9          0007*       ret
0481A7             0008*   
0481A7             0009*   ; ========================
0481A7             0010*   ; Main Game States
0481A7             0011*   ; ========================
0481A7             0012*   
0481A7             0013*   game_main_menu:
0481A7             0014*       ; Handle main menu options
0481A7             0015*       ; Example: Check input for "Start Game"
0481A7 CD 61 82 04 0016*       call check_input_menu
0481AB C2 8B 82 04 0017*       jp nz, game_init ; Start game on selection
0481AF C9          0018*       ret
0481B0             0019*   
0481B0             0020*   
0481B0             0021*   
0481B0             0022*   game_paused:
0481B0             0023*       ; Pause menu logic
0481B0 CD 64 82 04 0024*       call check_input_pause
0481B4 C2 02 84 04 0025*       jp nz, game_playing ; Resume game
0481B8 CA A7 81 04 0026*       jp z, game_main_menu ; Exit to main menu
0481BC C9          0027*       ret
0481BD             0028*   
0481BD             0029*   game_level_transition:
0481BD             0030*       ; Handle level transitions
0481BD CD 65 82 04 0031*       call load_next_level
0481C1 21 02 84 04 0032*       ld hl, game_playing
0481C5 22 99 81 04 0033*       ld (game_state), hl
0481C9 C9          0034*       ret
0481CA             0035*   
0481CA             0036*   game_over:
0481CA             0037*   ; set text colors
0481CA 3E 90       0038*       ld a,16+128 ; darkest blue
0481CC CD 76 13 04 0039*       call vdu_colour_text
0481D0 3E 3A       0040*       ld a,58 ; dark orange
0481D2 CD 76 13 04 0041*       call vdu_colour_text
0481D6             0042*   ; print game over and prompt
0481D6 0E 1B       0043*       ld c,27 ; x
0481D8 06 10       0044*       ld b,16 ; y
0481DA CD 31 13 04 0045*       call vdu_move_cursor
0481DE CD 60 00 04 0046*       call printInline
0481E2 47 41 4D 45 0047*       asciz "GAME OVER!"
       20 4F 56 45 
       52 21 00    
0481ED 0E 13       0048*       ld c,19 ; x
0481EF 06 11       0049*       ld b,17 ; y
0481F1 CD 31 13 04 0050*       call vdu_move_cursor
0481F5 CD 60 00 04 0051*       call printInline
0481F9 50 72 65 73 0052*       asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
048214 3E 20       0053*       ld a,%00100000 ; wait just a tick before polling for input
048216 CD DA 12 04 0054*       call multiPurposeDelay
04821A CD 5A 03 04 0055*       call waitKeypress
04821E             0056*   ; initialize a new game
04821E 21 8B 82 04 0057*       ld hl,game_init
048222 22 99 81 04 0058*       ld (game_state),hl
048226 C9          0059*       ret
048227             0060*   
048227             0061*   game_victory:
048227             0062*       ; Display victory screen
048227 CD 67 82 04 0063*       call display_victory
04822B C2 A7 81 04 0064*       jp nz, game_main_menu ; Return to main menu on input
04822F C9          0065*       ret
048230             0066*   
048230             0067*   ; ========================
048230             0068*   ; Supporting States
048230             0069*   ; ========================
048230             0070*   
048230             0071*   game_loading:
048230             0072*       ; Show loading screen while preparing assets
048230 CD 68 82 04 0073*       call load_resources
048234 21 8B 82 04 0074*       ld hl, game_init
048238 22 99 81 04 0075*       ld (game_state), hl
04823C C9          0076*       ret
04823D             0077*   
04823D             0078*   game_cutscene:
04823D             0079*       ; Play a non-interactive cutscene
04823D CD 69 82 04 0080*       call play_cutscene
048241 C2 02 84 04 0081*       jp nz, game_playing ; Return to gameplay after cutscene
048245 C9          0082*       ret
048246             0083*   
048246             0084*   game_inventory:
048246             0085*       ; Open inventory or shop
048246 CD 6A 82 04 0086*       call display_inventory
04824A C2 02 84 04 0087*       jp nz, game_playing ; Return to gameplay after inventory close
04824E C9          0088*       ret
04824F             0089*   
04824F             0090*   game_map:
04824F             0091*       ; Display map or quest
04824F CD 6B 82 04 0092*       call display_map
048253 C2 02 84 04 0093*       jp nz, game_playing ; Return to gameplay after map close
048257 C9          0094*       ret
048258             0095*   
048258             0096*   game_exit:
048258             0097*       ; Handle exit logic
048258 CD 6C 82 04 0098*       call save_game
04825C C3 6D 82 04 0099*       jp exit_game         ; Safely shut down
048260 C9          0100*       ret
048261             0101*   
048261             0102*   ; ========================
048261             0103*   ; Sub-state branching (Example for player state)
048261             0104*   ; ========================
048261             0105*   
048261             0106*   
048261             0107*   
048261             0108*   
048261             0109*   check_input_menu:
048261 C9          0110*       ret
048262             0111*   
048262             0112*   update_game_world:
048262 C9          0113*       ret
048263             0114*   
048263             0115*   check_game_events:
048263 C9          0116*       ret
048264             0117*   
048264             0118*   check_input_pause:
048264 C9          0119*       ret
048265             0120*   
048265             0121*   load_next_level:
048265 C9          0122*       ret
048266             0123*   
048266             0124*   display_game_over:
048266 C9          0125*       ret
048267             0126*   
048267             0127*   display_victory:
048267 C9          0128*       ret
048268             0129*   
048268             0130*   load_resources:
048268 C9          0131*       ret
048269             0132*   
048269             0133*   play_cutscene:
048269 C9          0134*       ret
04826A             0135*   
04826A             0136*   display_inventory:
04826A C9          0137*       ret
04826B             0138*   
04826B             0139*   display_map:
04826B C9          0140*       ret
04826C             0141*   
04826C             0142*   save_game:
04826C C9          0143*       ret
04826D             0144*   
04826D             0145*   exit_game:
04826D C9          0146*       ret
04826E             0147*   
04826E             0070        include "state_game_init.inc"
04826E             0001*   ; hello_world: asciz "Welcome to Purple Nurples!"
04826E             0002*   ; loading_time: asciz "Loading time:"
04826E 50 72 65 73 0003*   loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
048289 00          0004*   game_assets_loaded: db 0 ; non-zero when assets are loaded
04828A 00          0005*   original_screen_mode: db 0
04828B             0006*   
04828B             0007*   game_init:
04828B             0008*   ; check whether assets are loaded
04828B 3A 89 82 04 0009*       ld a,(game_assets_loaded)
04828F B7          0010*       or a
048290 C2 9B 83 04 0011*       jp nz,@assets_loaded
048294             0012*   ; get current screen mode and save it so we can return to it on exit
048294 CD 1F 14 04 0013*       call vdu_get_screen_mode
048298 32 8A 82 04 0014*       ld (original_screen_mode),a
04829C             0015*   ; print ascii art splash screen
04829C CD 45 13 04 0016*       call vdu_cls
0482A0 CD 60 00 04 0017*       call printInline
0482A4 57 65 6C 63 0018*       asciz "Welcome to\r\n"
       6F 6D 65 20 
       74 6F 0D 0A 
       00          
0482B1 21 45 1A 04 0019*       ld hl,purple_nurples_ascii
0482B5 CD 67 00 04 0020*       call printString
0482B9 CD 60 00 04 0021*       call printInline
0482BD 4C 6F 61 64 0022*       asciz "Loading UI...\r\n"
       69 6E 67 20 
       55 49 2E 2E 
       2E 0D 0A 00 
0482CD             0023*   ; clear all buffers
0482CD CD 15 17 04 0024*       call vdu_clear_all_buffers
0482D1             0025*   ; load fonts
0482D1 CD A5 0F 04 0026*   	call fonts_load
0482D5             0027*   ; select font
0482D5 21 07 FA 00 0028*       ld hl,Lat38_VGA8_8x8
0482D9 3E 01       0029*       ld a,1 ; flags
0482DB CD 87 17 04 0030*       call vdu_font_select
0482DF             0031*   ; load UI images
0482DF CD A0 10 04 0032*       call load_ui_images
0482E3             0033*   ; set up the display
0482E3 3E 08       0034*       ld a,8;+128 ; 136   320   240   64    60hz double-buffered
0482E5 CD 0E 14 04 0035*       call vdu_set_screen_mode
0482E9 AF          0036*       xor a
0482EA CD 27 14 04 0037*       call vdu_set_scaling
0482EE             0038*   ; ; enable additional audio channels
0482EE             0039*   ; 	call vdu_enable_channels
0482EE             0040*   ; set text background color
0482EE 3E 9A       0041*       ld a,26+128 ; violet
0482F0 CD 76 13 04 0042*       call vdu_colour_text
0482F4             0043*   ; set text foreground color
0482F4 3E 2F       0044*       ld a,47 ; aaaaff lavenderish
0482F6 CD 76 13 04 0045*       call vdu_colour_text
0482FA             0046*   ; set gfx bg color
0482FA AF          0047*       xor a ; plotting mode 0
0482FB 3E 9A       0048*       ld a,26+128 ; violet
0482FD CD 87 13 04 0049*       call vdu_gcol
048301 CD 45 13 04 0050*       call vdu_cls
048305             0051*   ; set the cursor off
048305 CD 0D 13 04 0052*       call vdu_cursor_off
048309             0053*   ; VDU 28, left, bottom, right, top: Set text viewport **
048309             0054*   ; MIND THE LITTLE-ENDIANESS
048309             0055*   ; inputs: c=left,b=bottom,e=right,d=top
048309 0E 00       0056*       ld c,0 ; left
04830B 16 00       0057*       ld d,0 ; top
04830D 1E 27       0058*       ld e,39 ; right
04830F 06 00       0059*       ld b,0; bottom
048311 CD 9E 13 04 0060*       call vdu_set_txt_viewport
048315             0061*   ; load background and sprite images
048315 CD DF 0F 04 0062*       call img_load_init
048319 CD D5 10 04 0063*       call load_backgrounds
04831D CD B3 10 04 0064*       call load_sprite_images
048321             0065*   ; load tileset_ptrs
048321 CD C4 10 04 0066*       call load_tilesets
048325             0067*   ; ; load sound effects ; TODO
048325             0068*   ; 	ld bc,SFX_num_buffers
048325             0069*   ; 	ld hl,SFX_buffer_id_lut
048325             0070*   ; 	ld (cur_buffer_id_lut),hl
048325             0071*   ; 	ld hl,SFX_load_routines_table
048325             0072*   ; 	ld (cur_load_jump_table),hl
048325             0073*   ; 	call sfx_load_main
048325             0074*   ; print loading complete message and wait for user keypress
048325 3E 01       0075*       ld a,1
048327 32 89 82 04 0076*       ld (game_assets_loaded),a
04832B CD 45 13 04 0077*       call vdu_cls
04832F CD 60 00 04 0078*       call printInline
048333 50 72 65 73 0079*       asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
04834E CD 4A 13 04 0080*       call vdu_flip
048352 CD 5A 03 04 0081*       call waitKeypress
048356             0082*   ; set up display for gameplay
048356 3E 14       0083*       ld a,20
048358 CD 0E 14 04 0084*       call vdu_set_screen_mode
04835C AF          0085*       xor a
04835D CD 27 14 04 0086*       call vdu_set_scaling
048361 CD 0D 13 04 0087*       call vdu_cursor_off
048365             0088*   ; select font
048365 21 07 FA 00 0089*       ld hl,Lat38_VGA8_8x8
048369 3E 01       0090*       ld a,1 ; flags
04836B CD 87 17 04 0091*       call vdu_font_select
04836F             0092*   ; plot bezel art
04836F 21 06 00 00 0093*       ld hl,BUF_BEZEL_L
048373 CD 3A 14 04 0094*       call vdu_buff_select
048377 01 00 00 00 0095*       ld bc,0
04837B 11 00 00 00 0096*       ld de,0
04837F CD 3A 18 04 0097*       call vdu_plot_bmp
048383 21 07 00 00 0098*       ld hl,BUF_BEZEL_R
048387 CD 3A 14 04 0099*       call vdu_buff_select
04838B 01 80 01 00 0100*       ld bc,384
04838F 11 00 00 00 0101*       ld de,0
048393 CD 3A 18 04 0102*       call vdu_plot_bmp
048397             0103*   ; draw player cockpit
048397 CD CB 79 04 0104*       call draw_player_cockpit
04839B             0105*   @assets_loaded:
04839B             0106*   ; set gfx origin and viewport to playing field window
04839B CD B9 7E 04 0107*       call set_gfx_playing_field
04839F CD A2 66 04 0108*       call init_bg ; plot the starry background
0483A3             0109*   ; VDU 28, left, bottom, right, top: Set text viewport **
0483A3 0E 00       0110*       ld c,0 ; left
0483A5 16 00       0111*       ld d,0 ; top
0483A7 1E 3E       0112*       ld e,62 ; right
0483A9 06 30       0113*       ld b,48; bottom
0483AB CD 9E 13 04 0114*       call vdu_set_txt_viewport
0483AF             0115*   ; initialize the global timestamp
0483AF CD 81 12 04 0116*       call timestamp_tick
0483B3             0117*   ; reset the sprite table
0483B3 CD 01 7F 04 0118*       call table_init
0483B7 21 56 9D 04 0119*       ld hl,table_base
0483BB 22 DC 7E 04 0120*       ld (table_pointer),hl
0483BF             0121*   ; initialize sprites and active tiles table
0483BF CD 39 7F 04 0122*       call sprites_init
0483C3 CD 01 7F 04 0123*       call table_init
0483C7 CD 56 88 04 0124*       call tile_table_init
0483CB             0125*   ; initialize the first level
0483CB 3E 00       0126*       ld a,tiles_dg
0483CD CD E5 65 04 0127*       call init_tileset
0483D1             0128*   ; initialize player
0483D1 21 00 00 00 0129*       ld hl,0
0483D5 22 2C 7E 04 0130*       ld (player_score),hl
0483D9 3A 79 77 04 0131*       ld a,(player_ships_max)
0483DD 32 78 77 04 0132*       ld (player_ships),a
0483E1 CD 7A 77 04 0133*       call draw_player_ships
0483E5 CD D5 77 04 0134*       call player_init
0483E9             0135*   ; set the game state to playing
0483E9 21 02 84 04 0136*       ld hl,game_playing
0483ED 22 99 81 04 0137*       ld (game_state), hl
0483F1             0138*   ; set game playing substates
0483F1 21 63 78 04 0139*       ld hl,player_alive
0483F5 22 75 77 04 0140*       ld (player_state), hl
0483F9 21 36 20 04 0141*       ld hl,enemies_alive
0483FD 22 28 20 04 0142*       ld (enemies_state), hl
048401             0143*   ; done initializing
048401 C9          0144*       ret
048402             0145*   ; end game_init
048402             0071        include "state_game_playing.inc"
048402             0001*   ; main game state
048402             0002*   game_playing:
048402             0003*   ; Main gameplay loop
048402             0004*   
048402             0005*   ; plot tiles
048402 CD CC 89 04 0006*       call tiles_plot
048406             0007*   
048406             0008*   ; set gfx viewport to playing field window
048406 CD B9 7E 04 0009*       call set_gfx_playing_field
04840A             0010*   
04840A             0011*   ; process movement and collisions
04840A CD CA 77 04 0012*       call do_player
04840E CD 2B 20 04 0013*       call do_enemies
048412 CD F2 22 04 0014*       call move_explosions
048416 CD 3C 8B 04 0015*       call move_tiles
04841A             0016*   
04841A             0017*   ; update UI
04841A 01 00 00 00 0018*       ld bc,0
04841E 11 00 00 00 0019*       ld de,0
048422 CD CA 13 04 0020*       call vdu_set_gfx_origin
048426             0021*       ; call print_score
048426 CD A1 7E 04 0022*       call draw_shields
04842A CD 10 7E 04 0023*       call draw_laser
04842E CD FA 7B 04 0024*       call draw_fuel
048432 C9          0025*       ret
048433             0026*   
048433             0072        include "targeting.inc"
048433             0001*   ; compute orientation to player
048433             0002*   ; based on relative positions
048433             0003*   ; returns: uh.l 16.8 fixed angle256 to player
048433             0004*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
048433             0005*   ;    representing delta-x/y *to* target respectively
048433             0006*   ; inputs: iy pointed at sprite record
048433             0007*   ; destroys: everything except iy (sprite record pointer)
048433             0008*   orientation_to_player:
048433 DD 21 56 9E 0009*       ld ix,player_begin
       04          
048438             0010*   ; compute dx
048438 DD 27 01    0011*       ld hl,(ix+sprite_x)
04843B FD 17 01    0012*       ld de,(iy+sprite_x)
04843E B7          0013*       or a ; clear carry
04843F ED 52       0014*       sbc hl,de ; dx
048441 E5          0015*       push hl ; save dx
048442             0016*   ; compute dy
048442 DD 27 04    0017*       ld hl,(ix+sprite_y)
048445 FD 17 04    0018*       ld de,(iy+sprite_y)
048448 B7          0019*       or a ; clear carry
048449 ED 52       0020*       sbc hl,de ; dy
04844B EB          0021*       ex de,hl ; de = dy
04844C             0022*   ; compute angle to player
04844C C1          0023*       pop bc ; dx (was hl)
04844D C5          0024*       push bc ; save dx
04844E D5          0025*       push de ; save dy
04844F CD EE 07 04 0026*       call atan2_168fast ; uh.l = angle to player
048453 3E E0       0027*       ld a,%11100000
048455 A5          0028*       and l ; round angle to nearest 32th of a circle
048456 6F          0029*       ld l,a
048457 22 A8 84 04 0030*       ld (Bearing_t),hl ; return angle to player
04845B D1          0031*       pop de ; restore dy
04845C C1          0032*       pop bc ; restore dx
04845D C9          0033*       ret
04845E             0034*   ; end orientation_to_player
04845E             0035*   
04845E             0036*   ; compute orientation to player
04845E             0037*   ; based on relative positions
04845E             0038*   ; returns: uh.l 16.8 fixed angle256 to player
04845E             0039*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
04845E             0040*   ;    representing delta-x/y *to* target respectively
04845E             0041*   ; inputs: iy pointed at tile record
04845E             0042*   ; destroys: everything except iy (tile record pointer)
04845E             0043*   tile_orientation_to_player:
04845E DD 21 56 9E 0044*       ld ix,player_begin
       04          
048463             0045*   ; compute dx
048463 DD 27 01    0046*       ld hl,(ix+sprite_x)
048466 FD 17 01    0047*       ld de,(iy+tile_x)
048469 B7          0048*       or a ; clear carry
04846A ED 52       0049*       sbc hl,de ; dx
04846C E5          0050*       push hl ; save dx
04846D             0051*   ; compute dy
04846D DD 27 04    0052*       ld hl,(ix+sprite_y)
048470 FD 17 04    0053*       ld de,(iy+tile_y)
048473 B7          0054*       or a ; clear carry
048474 ED 52       0055*       sbc hl,de ; dy
048476 EB          0056*       ex de,hl ; de = dy
048477             0057*   ; compute angle to player
048477 C1          0058*       pop bc ; dx (was hl)
048478 CD EE 07 04 0059*       call atan2_168fast ; uh.l = angle to player
04847C 3E E0       0060*       ld a,%11100000
04847E A5          0061*       and l ; round angle to nearest 32th of a circle
04847F 6F          0062*       ld l,a
048480 22 A8 84 04 0063*       ld (Bearing_t),hl
048484 C9          0064*       ret
048485             0065*   ; end tile_orientation_to_player
048485             0066*   
048485             0067*   ; compute orientation to coordinate
048485             0068*   ; based on relative positions
048485             0069*   ; returns: uh.l 16.8 fixed angle256 to coordinate
048485             0070*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
048485             0071*   ;    representing delta-x/y *to* target respectively
048485             0072*   ; inputs: iy pointed at sprite record, ub.c,ud.e are target x,y coordinates
048485             0073*   ; destroys: everything except iy (sprite record pointer)
048485             0074*   bearing_to_coord:
048485             0075*   ; compute dx
048485 C5          0076*       push bc
048486 E1          0077*       pop hl
048487 FD 07 01    0078*       ld bc,(iy+sprite_x)
04848A B7          0079*       or a ; clear carry
04848B ED 42       0080*       sbc hl,bc ; dx
04848D E5          0081*       push hl ; save dx
04848E             0082*   ; compute dy
04848E EB          0083*       ex de,hl
04848F FD 17 04    0084*       ld de,(iy+sprite_y)
048492 B7          0085*       or a ; clear carry
048493 ED 52       0086*       sbc hl,de ; dy
048495 EB          0087*       ex de,hl ; de = dy
048496             0088*   ; compute angle to coordinate
048496 C1          0089*       pop bc ; dx (was hl)
048497 C5          0090*       push bc ; save dx
048498 D5          0091*       push de ; save dy
048499 CD EE 07 04 0092*       call atan2_168fast ; uh.l = angle to coordinate
04849D 3E E0       0093*       ld a,%11100000
04849F A5          0094*       and l ; round angle to nearest 32th of a circle
0484A0 6F          0095*       ld l,a
0484A1 22 A8 84 04 0096*       ld (Bearing_t),hl ; return angle to coordinate
0484A5 D1          0097*       pop de ; restore dy
0484A6 C1          0098*       pop bc ; restore dx
0484A7 C9          0099*       ret
0484A8             0100*   ; end bearing_to_coord
0484A8             0101*   
0484A8             0102*   ; targeting_computer variables fixed 16.8 format
0484A8 00 00 00    0103*   Bearing_t: dl 0x000000 ; angle to target
0484AB 00 00 00    0104*   Heading_t: dl 0x000000 ; angle of target motion
0484AE 00 00 00    0105*   Vp: dl 0x000000 ; velocity of projectile
0484B1 00 00 00    0106*   Vp_x: dl 0x000000 ; x component of projectile velocity
0484B4 00 00 00    0107*   Vp_y: dl 0x000000 ; y component of projectile velocity
0484B7 00 00 00    0108*   Vt: dl 0x000000 ; velocity of target
0484BA 00 00 00    0109*   Vt_x: dl 0x000000 ; x component of target velocity
0484BD 00 00 00    0110*   Vt_y: dl 0x000000 ; y component of target velocity
0484C0 00 00 00    0111*   Heading_p: dl 0x000000 ; angle of projectile motion
0484C3 00 00 00    0112*   lead_angle: dl 0x000000 ; lead angle
0484C6             0113*   
0484C6             0114*   ; Inputs:   Vp velocity of projectile set,
0484C6             0115*   ;           iy pointed to sprite record,
0484C6             0116*   ;           player position and velocities correctly set
0484C6             0117*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
0484C6             0118*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
0484C6             0119*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
0484C6             0120*   targeting_computer:
0484C6 DD 21 56 9E 0121*       ld ix,player_begin
       04          
0484CB             0122*   ; ; compute target velocity from x,y component velocities
0484CB             0123*   ;     ld bc,(ix+sprite_xvel)
0484CB             0124*   ;     ld de,(ix+sprite_yvel)
0484CB             0125*   ;     ld hl,-1*256 ; account for vertical ground movement
0484CB             0126*   ;     add hl,de
0484CB             0127*   ;     ex de,hl ; ud.e = player_yvel-1
0484CB             0128*   ;     call cartesian_to_polar_sm ; uh.l = Heading_t, ud.e = Vt
0484CB             0129*   ;     ld (Heading_t),hl ; PASSES
0484CB             0130*   ;     ld (Vt),de ; PASSES
0484CB             0131*   ; ; Bearing_t should have been set by prerequisite call to orientation_to_player
0484CB             0132*   ; ; compute Heading_t-Bearing_t PASSES
0484CB             0133*   ;     ld de,(Bearing_t)
0484CB             0134*   ;     and a ; clear carry
0484CB             0135*   ;     sbc hl,de ; Uh.l = Heading_t-Bearing_t
0484CB             0136*   ; ; compute sin(Heading_t-Bearing_t)
0484CB             0137*   ;     call sin168 ; uh.l = sin(Heading_t-Bearing_t)
0484CB             0138*   ; ; compute (Vt*sin(Heading_t-Bearing_t))
0484CB             0139*   ;     ld de,(Vt)
0484CB             0140*   ;     call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
0484CB             0141*   ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
0484CB             0142*   ;     ld de,(Vp)
0484CB             0143*   ;     call sdiv168 ; ud.e = (Vt*sin(Heading_t-Bearing_t)) / Vp
0484CB             0144*   ;     ex de,hl ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
0484CB             0145*   ; ; answer is in radians, convert to degrees256
0484CB             0146*   ;     ld de,0x0028BE ; 40.74 = 57.29578*256/360
0484CB             0147*   ;     call smul168 ; uh.l = angle in degrees256
0484CB             0148*   ;     ld (lead_angle),hl ; TODO: fix this
0484CB             0149*   ; ; add lead angle to target bearing
0484CB             0150*   ;     ld de,(Bearing_t)
0484CB             0151*   ;     add hl,de ; h.l = lead angle+target bearing
0484CB             0152*   
0484CB 2A A8 84 04 0153*       ld hl,(Bearing_t) ; TODO: fix this
0484CF             0154*   
0484CF E5          0155*       push hl
0484D0             0156*   
0484D0             0157*   ; compute component projectile velocities
0484D0 ED 5B AE 84 0158*       ld de,(Vp) ; Vp should have been set by caller
       04          
0484D5 CD F4 06 04 0159*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
0484D9 ED 43 B1 84 0160*       ld (Vp_x),bc
       04          
0484DE             0161*       ; inc d ; account for vertical ground movement
0484DE ED 53 B4 84 0162*       ld (Vp_y),de
       04          
0484E3 E1          0163*       pop hl ; uh.l = lead angle+target bearing
0484E4 22 C0 84 04 0164*       ld (Heading_p),hl
0484E8             0165*   
0484E8 C9          0166*       ret
0484E9             0167*   
0484E9             0168*   ; debug print the results
0484E9             0169*       PUSH_ALL
0484E9 08          0001*M1     ex af,af'
0484EA D9          0002*M1     exx
0484EB F5          0003*M1     push af
0484EC E5          0004*M1     push hl
0484ED C5          0005*M1     push bc
0484EE D5          0006*M1     push de
0484EF             0007*M1 
0484EF 08          0008*M1     ex af,af'
0484F0 D9          0009*M1     exx
0484F1 F5          0010*M1     push af
0484F2 E5          0011*M1     push hl
0484F3 C5          0012*M1     push bc
0484F4 D5          0013*M1     push de
0484F5 DD E5       0014*M1     push ix
0484F7 FD E5       0015*M1     push iy
0484F9 CD FA 12 04 0170*       call vdu_home_cursor
0484FD CD 7C 00 04 0171*       call printNewLine
048501 CD 60 00 04 0172*       call printInline
048505 42 74 20 00 0173*       asciz "Bt "
048509 2A A8 84 04 0174*       ld hl,(Bearing_t)
04850D CD F1 01 04 0175*       call print_s168_hl
048511             0176*   
048511             0177*       ; call printInline
048511             0178*       ; asciz "\r\nHt "
048511             0179*       ; ld hl,(Heading_t)
048511             0180*       ; call print_s168_hl
048511             0181*   
048511             0182*       ; call printInline
048511             0183*       ; asciz "\r\nVt "
048511             0184*       ; ld hl,(Vt)
048511             0185*       ; call print_s168_hl
048511             0186*   
048511             0187*       ; call printInline
048511             0188*       ; asciz "\r\nVtx"
048511             0189*       ; ld hl,(ix+sprite_xvel)
048511             0190*       ; call print_s168_hl
048511             0191*   
048511             0192*       ; call printInline
048511             0193*       ; asciz "\r\nVty"
048511             0194*       ; ld hl,(ix+sprite_yvel)
048511             0195*       ; ld de,-1*256 ; account for vertical ground movement
048511             0196*       ; add hl,de
048511             0197*       ; call print_s168_hl
048511             0198*   
048511 CD 60 00 04 0199*       call printInline
048515 0D 0A 4C 64 0200*       asciz "\r\nLda"
       61 00       
04851B 2A C3 84 04 0201*       ld hl,(lead_angle)
04851F CD F1 01 04 0202*       call print_s168_hl
048523             0203*   
048523 CD 60 00 04 0204*       call printInline
048527 0D 0A 48 70 0205*       asciz "\r\nHp "
       20 00       
04852D 2A C0 84 04 0206*       ld hl,(Heading_p)
048531 CD F1 01 04 0207*       call print_s168_hl
048535             0208*   
048535             0209*       ; call printInline
048535             0210*       ; asciz "\r\nVp "
048535             0211*       ; ld hl,(Vp)
048535             0212*       ; call print_s168_hl
048535             0213*   
048535             0214*       ; call printInline
048535             0215*       ; asciz "\r\nVpx"
048535             0216*       ; ld hl,(Vp_x)
048535             0217*       ; call print_s168_hl
048535             0218*   
048535             0219*       ; call printInline
048535             0220*       ; asciz "\r\nVpy"
048535             0221*       ; ld hl,(Vp_y)
048535             0222*       ; call print_s168_hl
048535             0223*   
048535             0224*       POP_ALL
048535 FD E1       0001*M1     pop iy
048537 DD E1       0002*M1     pop ix
048539 D1          0003*M1     pop de
04853A C1          0004*M1     pop bc
04853B E1          0005*M1     pop hl
04853C F1          0006*M1     pop af
04853D 08          0007*M1     ex af,af'
04853E D9          0008*M1     exx
04853F             0009*M1 
04853F D1          0010*M1     pop de
048540 C1          0011*M1     pop bc
048541 E1          0012*M1     pop hl
048542 F1          0013*M1     pop af
048543 08          0014*M1     ex af,af'
048544 D9          0015*M1     exx
048545 C9          0225*       ret
048546             0073        include "tile_table.inc"
048546             0001*   ; ###### tile TABLE FIELD INDICES ######
048546             0002*   tile_table_record_size:         equ  64; bytes per tile record
048546             0003*   tile_id:                 equ   0; 1 bytes ;unique tileId, zero-based
048546             0004*   ; tile state variables
048546             0005*   tile_state_variables:    equ   1; beginning of tile state variables
048546             0006*   tile_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
048546             0007*   tile_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
048546             0008*   tile_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
048546             0009*   tile_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
048546             0010*   tile_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
048546             0011*   tile_heading:            equ  16; 3 bytes ;tile movement direction deg256 16.8 fixed
048546             0012*   tile_orientation:        equ  19; 3 bytes ;orientation bits
048546             0013*   ; tile definition variables
048546             0014*   tile_definitions:        equ  22; beginnning of tile definition variables
048546             0015*   tile_type:               equ  22; 1 bytes ;type of tile as defined in enemies.inc
048546             0016*   tile_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
048546             0017*   tile_move_program:       equ  26; 3 bytes ;address of tile's behavior subroutine
048546             0018*   tile_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
048546             0019*   tile_dim_x:              equ  30; 1 bytes ;tile width in pixels
048546             0020*   tile_dim_y:              equ  31; 1 bytes ;tile height in pixels
048546             0021*   tile_num_orientations:   equ  32; 1 bytes ;number of orientations for this tile
048546             0022*   tile_num_animations:     equ  33; 1 bytes ;number of animations for this tile
048546             0023*   tile_animation:          equ  34; 1 bytes ;current animation index, zero-based
048546             0024*   tile_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
048546             0025*   tile_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
048546             0026*   tile_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
048546             0027*   tile_points:             equ  38; 1 bytes ;points awarded for killing this tile type
048546             0028*   tile_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
048546             0029*   tile_frame:              equ  40; 1 bytes ;current animation frame
048546             0030*   
048546             0031*   ; ###### tile TABLE VARIABLES ######
048546 00 00 00 00 0032*   tile_stack: blkb 256*3,0 ; stack of pointers to tile records
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
048846 00 00 00    0033*       dl 0 ; list terminator
048849             0034*   tile_stack_end:
048849 46 85 04    0035*   tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
04884C 56 A2 04    0036*   tile_table_pointer: dl tile_table_base ; pointer to top address of current record, initialized to tile_table_base
04884F 00 00 00    0037*   num_active_tiles: dl 0 ; how many active tiles
048852 00          0038*   next_tile_id: db 0 ; next available tile id
048853 00 00 00    0039*   new_tile_table_pointer: dl 0 ; pointer to new tile record
048856             0040*   
048856             0041*   tile_table_init:
048856             0042*   ; reset num active tiles
048856 21 00 00 00 0043*       ld hl,0
04885A 22 4F 88 04 0044*       ld (num_active_tiles),hl
04885E             0045*   ; reset next tile id
04885E AF          0046*       xor a
04885F 32 52 88 04 0047*       ld (next_tile_id),a
048863             0048*   ; clear the tile stack
048863 AF          0049*       xor a ; write zeroes to tile stack
048864 21 46 85 04 0050*       ld hl,tile_stack
048868 01 03 03 00 0051*       ld bc,tile_stack_end-tile_stack
04886C CD 5F 03 04 0052*       call clear_mem
048870             0053*   ; clear the tile table
048870 AF          0054*       xor a ; write zeroes to tile table
048871 21 56 A2 04 0055*       ld hl,tile_table_base ; address to copy from
048875 01 00 40 00 0056*       ld bc,tile_table_end-tile_table_base ; number of bytes to clear
048879 CD 5F 03 04 0057*       call clear_mem
04887D             0058*   ; write tile ids
04887D DD 21 56 A2 0059*       ld ix,tile_table_base
       04          
048882 AF          0060*       xor a ; tile id
048883 06 00       0061*       ld b,0 ; loop counter
048885             0062*   @loop:
048885 DD 77 00    0063*       ld (ix+tile_id),a
048888 ED 32 40    0064*       lea ix,ix+table_record_size
04888B 3C          0065*       inc a
04888C 10 F7       0066*       djnz @loop
04888E             0067*   ; set pointers to top of tile stack and tile table
04888E 21 52 88 04 0068*       ld hl,next_tile_id
048892 3E FF       0069*       ld a,255 ; will wrap around to 0 on first call to create active tile
048894 77          0070*       ld (hl),a
048895 21 56 A2 04 0071*       ld hl,tile_table_base
048899 22 4C 88 04 0072*       ld (tile_table_pointer),hl
04889D 21 46 85 04 0073*       ld hl,tile_stack
0488A1 22 49 88 04 0074*       ld (tile_stack_pointer),hl
0488A5 C9          0075*       ret
0488A6             0076*   ; end tile_table_init
0488A6             0077*   
0488A6             0078*   ; gets the next available tile id
0488A6             0079*   ; inputs; none
0488A6             0080*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
0488A6             0081*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
0488A6             0082*   ; destroys: a,hl,ix
0488A6             0083*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
0488A6             0084*   tile_table_get_next_id:
0488A6 21 4F 88 04 0085*       ld hl,num_active_tiles
0488AA 34          0086*       inc (hl)
0488AB C2 B2 88 04 0087*       jp nz,@F ; check rollover to > 256 active tiles
0488AF 35          0088*       dec (hl) ; undo increment
0488B0 AF          0089*       xor a ; reset carry flag indicating that we didn't find a free tile
0488B1 C9          0090*       ret
0488B2             0091*   @@:
0488B2 7E          0092*       ld a,(hl) ; number of active tiles
0488B3             0093*   ; point ix to next tile record
0488B3 21 52 88 04 0094*       ld hl,next_tile_id
0488B7 34          0095*       inc (hl)
0488B8 56          0096*       ld d,(hl) ; index into tile table
0488B9 1E 40       0097*       ld e,tile_table_record_size
0488BB ED 5C       0098*       mlt de ; de is now the offset to the table entry
0488BD DD 21 56 A2 0099*       ld ix,tile_table_base ; point to base address of tile table
       04          
0488C2 DD 19       0100*       add ix,de ; ix is now the address of the table entry
0488C4             0101*   ; add tile pointer to tile stack
0488C4 21 46 85 04 0102*       ld hl,tile_stack
0488C8 57          0103*       ld d,a ; number of active tiles
0488C9 15          0104*       dec d ; zero-based index
0488CA 1E 03       0105*       ld e,3 ; three bytes per tile record
0488CC ED 5C       0106*       mlt de ; offset into tile stack
0488CE 19          0107*       add hl,de ; hl points to top of the active tiles
0488CF ED 3F       0108*       ld (hl),ix
0488D1             0109*   ; return tile id
0488D1 DD 7E 00    0110*       ld a,(ix+tile_id)
0488D4 37          0111*       scf ; sets carry flag indicating we found a free tile
0488D5 C9          0112*       ret ; done
0488D6             0113*   ; end tile_table_get_next_id
0488D6             0114*   
0488D6             0115*   ; deactivate the tile with the given id
0488D6             0116*   ; inputs: tile_stack_pointer set to record to remove
0488D6             0117*   ; outputs: decrements num_active_tiles by one, tile_stack_pointer set to record above removed record, removes tile pointer from the tile stack, shifts stack records above it down one position
0488D6             0118*   ; destroys: a,hl,bc,de
0488D6             0119*   table_deactivate_tile:
0488D6             0120*   ; compute address to copy from
0488D6 2A 49 88 04 0121*       ld hl,(tile_stack_pointer)
0488DA 23          0122*       inc hl
0488DB 23          0123*       inc hl
0488DC 23          0124*       inc hl
0488DD E5          0125*       push hl ; save copy from address
0488DE             0126*   ; compute bytes to copy
0488DE 3A 4F 88 04 0127*       ld a,(num_active_tiles)
0488E2 6F          0128*       ld l,a
0488E3 26 03       0129*       ld h,3
0488E5 ED 6C       0130*       mlt hl
0488E7 11 46 85 04 0131*       ld de,tile_stack
0488EB 19          0132*       add hl,de ; hl = bottom of stack address
0488EC ED 5B 49 88 0133*       ld de,(tile_stack_pointer)
       04          
0488F1 B7          0134*       or a ; clear carry
0488F2 ED 52       0135*       sbc hl,de ; hl = bytes to copy
0488F4 E5          0136*       push hl
0488F5 C1          0137*       pop bc ; bytes to copy
0488F6             0138*   ; compute target address
0488F6 ED 5B 49 88 0139*       ld de,(tile_stack_pointer)
       04          
0488FB             0140*   ; copy bytes
0488FB E1          0141*       pop hl ; copy from address
0488FC ED B0       0142*       ldir
0488FE             0143*   ; update stack pointer and active tile count
0488FE 21 4F 88 04 0144*       ld hl,num_active_tiles
048902 35          0145*       dec (hl)
048903 2A 49 88 04 0146*       ld hl,(tile_stack_pointer)
048907 2B          0147*       dec hl
048908 2B          0148*       dec hl
048909 2B          0149*       dec hl
04890A 22 49 88 04 0150*       ld (tile_stack_pointer),hl
04890E C9          0151*       ret
04890F             0152*   ; end table_deactivate_tile
04890F             0153*   
04890F             0154*   ; spawn a new active tile at the prescribed location
04890F             0155*   ; inputs: hl = pointer to new tile default settings, tiles_x_plot, tiles_y_plot = x,y position
04890F             0156*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
04890F             0157*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
04890F             0158*   ; destroys: a,hl,bc,de,ix
04890F             0159*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
04890F             0160*   spawn_active_tile:
04890F E5          0161*       push hl ; back up pointer to new tile defaults
048910 CD A6 88 04 0162*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
048914 E1          0163*       pop hl ; restore pointer to new tile defaults
048915 D0          0164*       ret nc ; no carry means no free tile slots, so we go home
048916             0165*   ; copy default settings to new tile
048916 DD 22 53 88 0166*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
04891B ED 32 16    0167*       lea ix,ix+tile_definitions ; bump pointer to copy to
04891E DD E5       0168*       push ix ; pointer to default tile settings
048920 D1          0169*       pop de ; address to copy to
048921 01 2A 00 00 0170*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
048925 ED B0       0171*       ldir ; copies defaults to new tile record
048927             0172*   ; copy tile position from inputs
048927 DD 2A 53 88 0173*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
04892C 2A C4 89 04 0174*       ld hl,(tiles_x_plot-1) ; shift up one byte to get 16.8 fixed point
048930 DD 2F 01    0175*       ld (ix+tile_x),hl
048933 2A C8 89 04 0176*       ld hl,(tiles_y_plot-1) ; shift up one byte to get 16.8 fixed point
048937 DD 2F 04    0177*       ld (ix+tile_y),hl
04893A             0178*   ; set default tile velocities
04893A 21 00 00 00 0179*       ld hl,0
04893E DD 2F 07    0180*       ld (ix+tile_xvel),hl
048941 21 00 01 00 0181*       ld hl,1*256 ; 1 pixel per frame
048945 DD 2F 0A    0182*       ld (ix+tile_yvel),hl
048948             0183*   ; return to caller
048948 DD CB 16 FE 0184*       set 7,(ix+sprite_type) ; set just spawned flag
04894C DD CB 1D F6 0185*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
048950 37          0186*       scf ; set carry flag to indicate success
048951 C9          0187*       ret
048952             0188*   ; end spawn_active_tile
048952             0189*   
048952             0190*   ; spawn a new active tile at the prescribed location
048952             0191*   ; inputs: iy pointer to current hl = pointer to new tile default settings
048952             0192*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
048952             0193*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
048952             0194*   ; destroys: a,hl,bc,de,ix
048952             0195*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
048952             0196*   spawn_active_tile_from_sprite:
048952 E5          0197*       push hl ; back up pointer to new tile defaults
048953 CD A6 88 04 0198*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
048957 E1          0199*       pop hl ; restore pointer to new tile defaults
048958 D0          0200*       ret nc ; no carry means no free tile slots, so we go home
048959             0201*   ; copy default settings to new tile
048959 DD 22 53 88 0202*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
04895E ED 32 16    0203*       lea ix,ix+tile_definitions ; bump pointer to copy to
048961 DD E5       0204*       push ix ; pointer to default tile settings
048963 D1          0205*       pop de ; address to copy to
048964 01 2A 00 00 0206*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
048968 ED B0       0207*       ldir ; copies defaults to new tile record
04896A             0208*   ; copy tile position from existing sprite
04896A DD 2A 53 88 0209*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
04896F FD 2A DC 7E 0210*       ld iy,(table_pointer) ; get existing sprite record
       04          
048974 FD 27 01    0211*       ld hl,(iy+sprite_x)
048977 DD 2F 01    0212*       ld (ix+tile_x),hl
04897A FD 27 04    0213*       ld hl,(iy+sprite_y)
04897D DD 2F 04    0214*       ld (ix+tile_y),hl
048980             0215*   ; set default tile velocities
048980 21 00 00 00 0216*       ld hl,0
048984 DD 2F 07    0217*       ld (ix+tile_xvel),hl
048987 21 00 01 00 0218*       ld hl,1*256 ; 1 pixel per frame
04898B DD 2F 0A    0219*       ld (ix+tile_yvel),hl
04898E             0220*   ; return to caller
04898E DD CB 16 FE 0221*       set 7,(ix+sprite_type) ; set just spawned flag
048992 DD CB 1D F6 0222*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
048996 37          0223*       scf ; set carry flag to indicate success
048997 C9          0224*       ret
048998             0225*   ; end spawn_active_tile_from_sprite
048998             0226*   
048998             0227*   ; compute animation frame based on tile_animation and tile_heading
048998             0228*   ; inputs: iy set to tile record
048998             0229*   ; outputs: a, tile_frame set to animation frame
048998             0230*   ; destroys: a,hl
048998             0231*   tile_frame_heading_animation:
048998 FD 7E 11    0232*       ld a,(iy+tile_heading+1) ; we want the integer portion
04899B CB 3F       0233*       srl a ; divide integer portion by 8
04899D CB 3F       0234*       srl a
04899F CB 3F       0235*       srl a
0489A1 FD 66 22    0236*       ld h,(iy+tile_animation)
0489A4 2E 20       0237*       ld l,32 ; 32 orientation frames per animation
0489A6 ED 6C       0238*       mlt hl ; hl = offset from base animation
0489A8 85          0239*       add a,l ; modulo256 since tile_frame is only 1 byte
0489A9 FD 77 28    0240*       ld (iy+tile_frame),a
0489AC C9          0241*       ret
0489AD             0242*   ; end tile_frame_heading_animation
0489AD             0243*   
0489AD             0244*   ; compute animation frame based on tile_heading
0489AD             0245*   ; inputs: iy set to tile record
0489AD             0246*   ; outputs: a, tile_frame set to animation frame
0489AD             0247*   ; destroys: a,hl
0489AD             0248*   tile_frame_heading:
0489AD FD 7E 11    0249*       ld a,(iy+tile_heading+1) ; we want the integer portion
0489B0 CB 3F       0250*       srl a ; divide integer portion by 8
0489B2 CB 3F       0251*       srl a
0489B4 CB 3F       0252*       srl a
0489B6 FD 77 28    0253*       ld (iy+tile_frame),a
0489B9 C9          0254*       ret
0489BA             0255*   ; end tile_frame_heading
0489BA             0074        include "tiles.inc"
0489BA 00 00 00    0001*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
0489BD 00 00 00    0002*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
0489C0             0003*       ; initialize to zero for a maximum of 256 rows in a level
0489C0 00          0004*   tiles_cols: db 0 ; number of tile columns in the current level
0489C1             0005*   
0489C1 00 00 00    0006*   cur_baseBufferId: dl 0
0489C4 00          0007*       db 0 ; padding for byte-shifting
0489C5 00 00 00    0008*   tiles_x_plot: dl 0
0489C8 00          0009*       db 0 ; padding for byte-shifting
0489C9 F1 FF FF    0010*   tiles_y_plot: dl -15
0489CC             0011*   
0489CC             0012*   tiles_plot:
0489CC             0013*   ; set gfx origin to playing field window
0489CC 01 80 00 00 0014*       ld bc,origin_left
0489D0 11 30 00 00 0015*       ld de,origin_top
0489D4 CD CA 13 04 0016*       call vdu_set_gfx_origin
0489D8             0017*   ; set gfx viewport to playing field window
0489D8 CD B9 7E 04 0018*       call set_gfx_playing_field
0489DC             0019*   ; move the background down one pixel
0489DC 3E 02       0020*       ld a,2 ; current gfx viewport
0489DE 2E 02       0021*       ld l,2 ; direction=down
0489E0 26 01       0022*       ld h,1 ; speed=1 px
0489E2 CD 5D 13 04 0023*       call vdu_scroll_down
0489E6             0024*   ; set gfx viewport to one scanline to optimise plotting tiles
0489E6 01 00 00 00 0025*       ld bc,0 ; leftmost x-coord
0489EA 11 00 00 00 0026*       ld de,0 ; topmost y-coord
0489EE DD 21 FF 00 0027*       ld ix,255 ; rightmost x-coord
       00          
0489F3 FD 21 00 00 0028*       ld iy,0 ; bottommost y-coord
       00          
0489F8 CD E5 13 04 0029*       call vdu_set_gfx_viewport
0489FC             0030*   ; plot the background
0489FC CD C0 8A 04 0031*       call bg_plot
048A00             0032*   ; initialize tiles loop
048A00 21 00 00 00 0033*       ld hl,0 ; init plotting x-coordinate
048A04 22 C5 89 04 0034*       ld (tiles_x_plot),hl
048A08 2A BA 89 04 0035*       ld hl,(tiles_row_defs)
048A0C 3A C0 89 04 0036*       ld a,(tiles_cols)
048A10 47          0037*       ld b,a ; column loop counter
048A11             0038*   @loop:
048A11 C5          0039*       push bc ; save the loop counter
048A12             0040*   ; read the tile defintion for the current column
048A12 7E          0041*       ld a,(hl) ; a has tile definition
048A13 E5          0042*       push hl ; save pointer to tile definition
048A14 2A C1 89 04 0043*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
048A18 6F          0044*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
048A19 CD 3A 14 04 0045*       call vdu_buff_select ; tile bitmap buffer is now active
048A1D             0046*   ; plot the active bitmap
048A1D ED 4B C5 89 0047*       ld bc,(tiles_x_plot)
       04          
048A22 ED 5B C9 89 0048*       ld de,(tiles_y_plot)
       04          
048A27 CD 3A 18 04 0049*       call vdu_plot_bmp
048A2B             0050*   ; bump x-coords the width of one tile and save it
048A2B 2A C5 89 04 0051*       ld hl,(tiles_x_plot)
048A2F 01 10 00 00 0052*       ld bc,16
048A33 09          0053*       add hl,bc
048A34 22 C5 89 04 0054*       ld (tiles_x_plot),hl
048A38             0055*   ; prepare to loop to next column
048A38 E1          0056*       pop hl ; get back pointer to tile def
048A39 23          0057*       inc hl ; bump it to the next column
048A3A C1          0058*       pop bc ; snag our loop counter
048A3B 10 D4       0059*       djnz @loop
048A3D             0060*   ; increment tiles plotting y-coordinate
048A3D             0061*   ; (we use ix b/c we want to preserve hl for the next step)
048A3D DD 2A C9 89 0062*       ld ix,(tiles_y_plot)
       04          
048A42 11 01 00 00 0063*       ld de,1
048A46 DD 19       0064*       add ix,de
048A48 DD 22 C9 89 0065*       ld (tiles_y_plot),ix
       04          
048A4D DD 7D       0066*       ld a,ixl
048A4F FE 01       0067*       cp 1
048A51 C0          0068*       ret nz
048A52             0069*   ; do active tiles
048A52 E5          0070*       push hl ; save pointer to next row tile def
048A53 CD 76 8A 04 0071*       call do_active_tiles
048A57 E1          0072*       pop hl ; get back pointer to next row tile def
048A58             0073*   ; time to bump tiles_row_defs to next row
048A58             0074*   ; (hl was already there at the end of the loop)
048A58 22 BA 89 04 0075*       ld (tiles_row_defs),hl
048A5C             0076*   ; reset coords to plot next row of tiles
048A5C 21 00 00 00 0077*       ld hl,0
048A60 22 C5 89 04 0078*       ld (tiles_x_plot),hl
048A64 21 F1 FF FF 0079*       ld hl,-15
048A68 22 C9 89 04 0080*       ld (tiles_y_plot),hl
048A6C             0081*   ; decrement tiles row counter
048A6C 21 BD 89 04 0082*       ld hl,tiles_row
048A70 35          0083*       dec (hl)
048A71 C0          0084*       ret nz
048A72             0085*   @inc_level:
048A72 C3 37 66 04 0086*       jp next_level
048A76             0087*   ; end tiles_plot
048A76             0088*   
048A76             0089*   do_active_tiles:
048A76             0090*   ; initialize tiles loop
048A76 21 00 00 00 0091*       ld hl,0 ; init plotting x-coordinate
048A7A 22 C5 89 04 0092*       ld (tiles_x_plot),hl
048A7E 2A BA 89 04 0093*       ld hl,(tiles_row_defs)
048A82 3A C0 89 04 0094*       ld a,(tiles_cols)
048A86 47          0095*       ld b,a ; column loop counter
048A87             0096*   @loop:
048A87 C5          0097*       push bc ; save the loop counter
048A88             0098*   ; read the tile defintion for the current column
048A88 7E          0099*       ld a,(hl) ; a has tile definition
048A89 E5          0100*       push hl ; save pointer to tile definition
048A8A B7          0101*       or a ; check for null tile
048A8B CA A7 8A 04 0102*       jp z,@next_tile ; skip to next tile if null
048A8F FE 11       0103*       cp 17 ; carry reset if active tile
048A91 D2 A7 8A 04 0104*       jp nc,@next_tile ; skip to next tile if not active
048A95             0105*   ; call the tile activation routine
048A95 21 F8 8A 04 0106*       ld hl,tile_activation_routines
048A99 16 03       0107*       ld d,3 ; three bytes per table entry
048A9B 5F          0108*       ld e,a ; a is the tile type
048A9C ED 5C       0109*       mlt de ; de is now the offset to the table entry
048A9E 19          0110*       add hl,de ; hl is now the address of the table entry
048A9F ED 27       0111*       ld hl,(hl) ; hl is now the activation routine address
048AA1             0112*       CALL_HL ; call the activation routine
048AA1 01 A7 8A 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
048AA5 C5          0002*M1     push bc ; which constitutes the return address
048AA6 E9          0003*M1     jp (hl) ; Jump to the address in HL
048AA7             0113*   @next_tile:
048AA7             0114*   ; bump x-coords the width of one tile and save it
048AA7 2A C5 89 04 0115*       ld hl,(tiles_x_plot)
048AAB 01 10 00 00 0116*       ld bc,16
048AAF 09          0117*       add hl,bc
048AB0 22 C5 89 04 0118*       ld (tiles_x_plot),hl
048AB4             0119*   ; prepare to loop to next column
048AB4 E1          0120*       pop hl ; get back pointer to tile def
048AB5 23          0121*       inc hl ; bump it to the next column
048AB6 C1          0122*       pop bc ; snag our loop counter
048AB7 10 CE       0123*       djnz @loop
048AB9 C9          0124*       ret ; done
048ABA             0125*   ; end do_active_tiles
048ABA             0126*   
048ABA FF FF FF    0127*   bg_y_plot: dl -1
048ABD 00 04 00    0128*   bg_bufferId: dl BUF_BG_STARS_0 ; default bufferId for background tiles
048AC0             0129*   
048AC0             0130*   bg_plot:
048AC0             0131*   ; load current bg tile bufferId as default
048AC0 2A BD 8A 04 0132*       ld hl,(bg_bufferId)
048AC4             0133*   ; check whether it is time for a new background tile
048AC4 3A BA 8A 04 0134*       ld a,(bg_y_plot)
048AC8 3C          0135*       inc a
048AC9 32 BA 8A 04 0136*       ld (bg_y_plot),a
048ACD C2 E5 8A 04 0137*       jp nz,@F ; not time for a new tile so draw current one
048AD1             0138*   ; load the next background tile
048AD1 21 00 04 00 0139*       ld hl,BUF_BG_STARS_0
048AD5 CD 18 05 04 0140*       call rand_8
048AD9 E6 03       0141*       and %0000011
048ADB 85          0142*       add a,l
048ADC 6F          0143*       ld l,a
048ADD 3E 00       0144*       ld a,0
048ADF 8C          0145*       adc a,h
048AE0 67          0146*       ld h,a
048AE1 22 BD 8A 04 0147*       ld (bg_bufferId),hl
048AE5             0148*   @@:
048AE5 CD 3A 14 04 0149*       call vdu_buff_select
048AE9 01 00 00 00 0150*       ld bc,0
048AED ED 5B BA 8A 0151*       ld de,(bg_y_plot)
       04          
048AF2 13          0152*       inc de
048AF3 CD 3A 18 04 0153*       call vdu_plot_bmp
048AF7 C9          0154*       ret
048AF8             0155*   ; end bg_plot
048AF8             0075        include "tiles_active.inc"
048AF8             0001*   
048AF8             0002*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
048AF8             0003*   tile_pad_small: equ 1
048AF8             0004*   tile_pad_med: equ 2
048AF8             0005*   tile_pad_large: equ 3
048AF8             0006*   tile_charge_shields: equ 4
048AF8             0007*   tile_turret_fireball: equ 5
048AF8             0008*   tile_laser_turret: equ 6
048AF8             0009*   tile_twin_laser_turret: equ 7
048AF8             0010*   tile_charge_fuel: equ 8
048AF8             0011*   tile_electrode: equ 9
048AF8             0012*   tile_lightning: equ 10
048AF8             0013*   ; tile_electrode_r: equ 11 ; same as tile_electrode
048AF8             0014*   tile_12: equ 12
048AF8             0015*   tile_13: equ 13
048AF8             0016*   tile_14: equ 14
048AF8             0017*   tile_15: equ 15
048AF8             0018*   tile_crater: equ 16
048AF8             0019*   
048AF8             0020*   tile_activation_routines:
048AF8 28 8B 04    0021*       dl activate_null_tile ; dummy spacer since tiled is 1-based
048AFB A6 8D 04    0022*       dl activate_pad_small
048AFE 28 8B 04    0023*       dl activate_null_tile
048B01 28 8B 04    0024*       dl activate_null_tile
048B04 28 8B 04    0025*       dl activate_null_tile
048B07 1B 8E 04    0026*       dl activate_turret_fireball
048B0A 28 8B 04    0027*       dl activate_null_tile
048B0D 28 8B 04    0028*       dl activate_null_tile
048B10 28 8B 04    0029*       dl activate_null_tile
048B13 42 8C 04    0030*       dl activate_electrode
048B16 4D 8D 04    0031*       dl activate_lightning
048B19 42 8C 04    0032*       dl activate_electrode
048B1C 28 8B 04    0033*       dl activate_null_tile
048B1F 28 8B 04    0034*       dl activate_null_tile
048B22 28 8B 04    0035*       dl activate_null_tile
048B25 F4 8B 04    0036*       dl activate_crater
048B28             0037*   ; end tile_activation_routines
048B28             0038*   
048B28             0039*   activate_null_tile:
048B28 C9          0040*       ret ; dummy routine, do nothing
048B29             0041*   move_active_tile:
048B29             0042*   ; y-axis movement
048B29 FD 27 04    0043*       ld hl,(iy+tile_y)
048B2C FD 17 0A    0044*       ld de,(iy+tile_yvel)
048B2F 19          0045*       add hl,de
048B30 FD 2F 04    0046*       ld (iy+tile_y),hl
048B33             0047*   ; detect screen edge collisions
048B33             0048*   ; y-axis bottom is all we need to test
048B33 11 00 80 FE 0049*       ld de,-tile_bottom*256
048B37 ED 5A       0050*       adc hl,de
048B39 F8          0051*       ret m ; still on screen so do nothing further
048B3A AF          0052*       xor a ; signal caller that tile has scrolled off screen
048B3B C9          0053*       ret
048B3C             0054*   ; end move_active_tile
048B3C             0055*   
048B3C             0056*   move_tiles:
048B3C             0057*   ; initialize pointers and loop counter
048B3C FD 21 46 85 0058*       ld iy,tile_stack ; set iy to first record in table
       04          
048B41             0059*   @move_loop:
048B41 FD 22 49 88 0060*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
048B46 FD 7E 02    0061*       ld a,(iy+2)
048B49 B7          0062*       or a ; will be zero if at end of stack
048B4A C8          0063*       ret z ; end of stack so we're done
048B4B             0064*   ; point iy to tile record
048B4B FD 37 00    0065*       ld iy,(iy) ; iy points to the current tile record
048B4E FD 22 4C 88 0066*       ld (tile_table_pointer),iy ; update table pointer
       04          
048B53             0067*   ; check top bit of tile_type to see if tile is just spawned
048B53 FD CB 16 7E 0068*       bit 7,(iy+tile_type)
048B57 C2 75 8B 04 0069*       jp nz,@just_spawned ; if just spawned, skip to next record
048B5B             0070*   ; check sprite_alive bit to see if tile is active
048B5B FD CB 1D 76 0071*       bit sprite_alive,(iy+sprite_collisions)
048B5F C8          0072*       ret z ; end of stack so we're done
048B60             0073*   ; otherwise we prepare to move the tile
048B60 FD 27 1A    0074*       ld hl,(iy+tile_move_program) ; load the behavior subroutine address
048B63             0075*       CALL_HL
048B63 01 69 8B 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
048B67 C5          0002*M1     push bc ; which constitutes the return address
048B68 E9          0003*M1     jp (hl) ; Jump to the address in HL
048B69             0076*    ; get back stack pointer and loop
048B69             0077*   @next_record:
048B69 FD 2A 49 88 0078*       ld iy,(tile_stack_pointer)
       04          
048B6E ED 33 03    0079*       lea iy,iy+3 ; next tile stack record
048B71 C3 41 8B 04 0080*       jp @move_loop ; loop until we've checked all the records
048B75             0081*   @just_spawned:
048B75 FD CB 16 BE 0082*       res 7,(iy+tile_type) ; clear just spawned flag
048B79 C3 69 8B 04 0083*       jp @next_record
048B7D             0084*   ; end move_tiles
048B7D             0085*   
048B7D             0086*   draw_active_tile:
048B7D FD 27 17    0087*       ld hl,(iy+tile_base_bufferId)
048B80 FD 7E 28    0088*       ld a,(iy+tile_frame)
048B83 85          0089*       add a,l ; TODO: with a little work we could make all tile base buffer ids align to 256
048B84 6F          0090*       ld l,a
048B85 3E 00       0091*       ld a,0 ; preserve carry
048B87 8C          0092*       adc a,h
048B88 67          0093*       ld h,a
048B89 CD 3A 14 04 0094*       call vdu_buff_select ; buffer id of animation frame
048B8D FD 07 01    0095*       ld bc,(iy+tile_x)
048B90 FD 17 04    0096*       ld de,(iy+tile_y)
048B93 CD 56 18 04 0097*       call vdu_plot_bmp168
048B97 C9          0098*       ret
048B98             0099*   ; end draw_active_tile
048B98             0100*   
048B98             0101*   ; create a new sprite at the same location as the current tile
048B98             0102*   ; inputs: hl = pointer to new sprite default settings, tile_table_pointer = current tile
048B98             0103*   ;         ix = pointer to sprite group, b = number of records in sprite group
048B98             0104*   spawn_sprite_from_tile:
048B98 E5          0105*       push hl ; back up pointer to new sprite defaults
048B99 CD 87 7F 04 0106*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
048B9D E1          0107*       pop hl ; restore pointer to new sprite defaults
048B9E D0          0108*       ret nc ; no carry means no free sprite slots, so we go home
048B9F             0109*   ; copy default settings to new sprite
048B9F DD E5       0110*       push ix ; back up pointer to new sprite record
048BA1 ED 32 16    0111*       lea ix,ix+sprite_definitions ; bump pointer to copy to
048BA4 DD E5       0112*       push ix ; pointer to default sprite settings
048BA6 D1          0113*       pop de ; address to copy to
048BA7 01 2A 00 00 0114*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
048BAB ED B0       0115*       ldir ; copies defaults to new sprite record
048BAD DD E1       0116*       pop ix ; restore pointer to new sprite record
048BAF             0117*   ; copy sprite position from existing tile
048BAF FD 2A 4C 88 0118*       ld iy,(tile_table_pointer) ; get existing tile record
       04          
048BB4 FD 27 01    0119*       ld hl,(iy+tile_x)
048BB7 DD 2F 01    0120*       ld (ix+sprite_x),hl
048BBA FD 27 04    0121*       ld hl,(iy+tile_y)
048BBD DD 2F 04    0122*       ld (ix+sprite_y),hl
048BC0             0123*   ; return to caller
048BC0 DD CB 16 FE 0124*       set 7,(ix+sprite_type) ; set just spawned flag
048BC4 DD CB 1D F6 0125*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
048BC8 37          0126*       scf ; set carry flag to indicate success
048BC9 C9          0127*       ret
048BCA             0128*   ; end spawn_sprite_from_tile
048BCA             0129*   
048BCA             0130*   ; create a new tile at the same location as the current tile
048BCA             0131*   ; inputs: tile_table_pointer = current tile
048BCA             0132*   spawn_active_tile_from_tile:
048BCA             0133*   ; copy default settings to new tile
048BCA DD 2A 4C 88 0134*       ld ix,(tile_table_pointer) ; get existing tile record
       04          
048BCF ED 32 16    0135*       lea ix,ix+tile_definitions ; bump pointer to copy to
048BD2 DD E5       0136*       push ix ; pointer to default tile settings
048BD4 D1          0137*       pop de ; address to copy to
048BD5 01 2A 00 00 0138*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
048BD9 ED B0       0139*       ldir ; copies defaults to new tile record
048BDB DD 2A 4C 88 0140*       ld ix,(tile_table_pointer) ; restore pointer to new tile record
       04          
048BE0 C9          0141*       ret
048BE1             0142*   ; end spawn_active_tile_from_tile
048BE1             0076        include "tile_crater.inc"
048BE1             0001*   crater_defaults:
048BE1 10          0002*       db tile_crater          ; type
048BE2 07 01 00    0003*       dl BUF_CRATER_A      ; base_bufferId
048BE5 FD 8B 04    0004*       dl move_crater          ; move_program
048BE8 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
048BE9 10          0006*       db 16                   ; dim_x
048BEA 10          0007*       db 16                   ; dim_y
048BEB 01          0008*       db 1                    ; num_orientations
048BEC 04          0009*       db 4                    ; num_animations
048BED 05          0010*       db 5	                ; animation
048BEE 08          0011*       db 8                    ; animation_timer
048BEF 00          0012*       db 0                    ; move_timer
048BF0 00          0013*       db 0                    ; move_step
048BF1 00          0014*       db 0                    ; points
048BF2 00          0015*       db 0                    ; shield_damage
048BF3 00          0016*       db 0                    ; frame
048BF4             0017*   
048BF4             0018*   activate_crater:
048BF4 21 E1 8B 04 0019*       ld hl,crater_defaults
048BF8 CD CA 8B 04 0020*       call spawn_active_tile_from_tile
048BFC             0021*   ; other specific initialization
048BFC C9          0022*       ret
048BFD             0023*   ; end activate_crater
048BFD             0024*   
048BFD             0025*   move_crater:
048BFD CD 29 8B 04 0026*       call move_active_tile
048C01 CA D6 88 04 0027*       jp z,table_deactivate_tile
048C05             0028*   ; do animation
048C05 FD 35 23    0029*       dec (iy+tile_animation_timer)
048C08 C0          0030*       ret nz ; not time to animate
048C09 FD 35 22    0031*       dec (iy+sprite_animation) ; check whether time to transition to crater
048C0C CC 22 8C 04 0032*       call z,@make_crater
048C10 3E 08       0033*       ld a,8
048C12 FD 77 23    0034*       ld (iy+tile_animation_timer),a
048C15 FD 7E 28    0035*       ld a,(iy+tile_frame)
048C18 3C          0036*       inc a
048C19 E6 03       0037*       and %00000011 ; modulo 4
048C1B FD 77 28    0038*       ld (iy+tile_frame),a
048C1E C3 7D 8B 04 0039*       jp draw_active_tile
048C22             0040*   @make_crater:
048C22 21 02 01 00 0041*       ld hl,BUF_CRATER_0
048C26 FD 2F 17    0042*       ld (iy+tile_base_bufferId),hl
048C29 3E FF       0043*       ld a,-1 ; will wrap to zero on return
048C2B FD 77 28    0044*       ld (iy+tile_frame),a
048C2E C9          0045*       ret
048C2F             0046*   ; end move_crater
048C2F             0077        include "tile_electrode.inc"
048C2F             0001*   electrode_defaults:
048C2F 09          0002*       db 9                    ; type
048C30 7A 01 00    0003*       dl BUF_TILE_BLANK       ; base_bufferId
048C33 4B 8C 04    0004*       dl move_electrode       ; move_program
048C36 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
048C37 10          0006*       db 16                   ; dim_x
048C38 10          0007*       db 16                   ; dim_y
048C39 01          0008*       db 1                    ; num_orientations
048C3A 01          0009*       db 1                    ; num_animations
048C3B 00          0010*       db 0                    ; animation
048C3C 00          0011*       db 0                    ; animation_timer
048C3D 00          0012*       db 0                    ; move_timer
048C3E 00          0013*       db 0                    ; move_step
048C3F 05          0014*       db 5                    ; points
048C40 FC          0015*       db -4                   ; shield_damage
048C41 00          0016*       db 0                    ; frame
048C42             0017*   
048C42             0018*   activate_electrode:
048C42 21 2F 8C 04 0019*       ld hl,electrode_defaults
048C46             0020*   ; get next available active tile id
048C46 CD 0F 89 04 0021*       call spawn_active_tile
048C4A             0022*       ; ret nc ; no carry means no free active tile slots, so we go home
048C4A             0023*   ; other specific initialization
048C4A C9          0024*       ret
048C4B             0025*   ; end activate_electrode
048C4B             0026*   
048C4B             0027*   move_electrode:
048C4B CD 29 8B 04 0028*       call move_active_tile
048C4F CA D6 88 04 0029*       jp z,table_deactivate_tile
048C53 DD 21 56 9E 0030*       ld ix,player_begin
       04          
048C58 DD CB 1D 76 0031*       bit sprite_alive,(ix+sprite_collisions)
048C5C CA 70 8C 04 0032*       jp z,@laser ; player is dead so don't check for collisions
048C60 CD 14 20 04 0033*       call check_enemy_collision_player
048C64 C2 70 8C 04 0034*       jp nz,@laser ; no collision so check laser collision
048C68 CD 8A 7E 04 0035*       call update_shields
048C6C C3 7D 8C 04 0036*       jp kill_electrode
048C70             0037*   @laser:
048C70 CD 08 20 04 0038*       call check_enemy_collision_laser
048C74 C0          0039*       ret nz ; no collision so we're done
048C75 CD 32 7E 04 0040*       call update_score
048C79 C3 7D 8C 04 0041*       jp kill_electrode
048C7D             0042*   ; end move_electrode
048C7D             0043*   
048C7D             0044*   kill_electrode:
048C7D             0045*   ; activate blank tile bitmap
048C7D 21 7A 01 00 0046*       ld hl,BUF_TILE_BLANK
048C81 CD 3A 14 04 0047*       call vdu_buff_select
048C85             0048*   ; save y-coordinate of collision tile
048C85 FD 27 04    0049*       ld hl,(iy+tile_y)
048C88 22 37 8D 04 0050*       ld (@tile_y),hl
048C8C             0051*   ; initialize pointers
048C8C 2A 49 88 04 0052*       ld hl,(tile_stack_pointer)
048C90 ED 27       0053*       ld hl,(hl) ; pointer to this tile table record
048C92 E5          0054*       push hl ; save pointer to this tile table record
048C93 DD 21 46 85 0055*       ld ix,tile_stack ; set ix to first record in table
       04          
048C98             0056*   @check_loop:
048C98 DD 22 34 8D 0057*       ld (@tile_stack_pointer),ix ; update stack pointer
       04          
048C9D DD 7E 02    0058*       ld a,(ix+2)
048CA0 B7          0059*       or a ; will be zero if at end of stack
048CA1 CA 0D 8D 04 0060*       jp z,@done ; end of stack so we're done
048CA5             0061*   ; point ix to tile record
048CA5 DD 37 00    0062*       ld ix,(ix) ; ix points to the tile record being checked
048CA8             0063*   ; check top bit of tile_type to see if tile is just spawned
048CA8 DD CB 16 7E 0064*       bit 7,(ix+tile_type)
048CAC C2 01 8D 04 0065*       jp nz,@next_record ; if just spawned, skip to next record
048CB0             0066*   ; check sprite_alive bit to see if tile is active
048CB0 DD CB 1D 76 0067*       bit sprite_alive,(ix+sprite_collisions)
048CB4 C8          0068*       ret z ; end of stack so we're done
048CB5             0069*   ; check tile type
048CB5 DD 7E 16    0070*       ld a,(ix+tile_type)
048CB8 FE 0A       0071*       cp tile_lightning ; check if tile is lightning
048CBA C2 01 8D 04 0072*       jp nz,@next_record ; if not an electrode, skip to next record
048CBE             0073*   ; check tile position
048CBE FD 2A 34 8D 0074*       ld iy,(@tile_stack_pointer)
       04          
048CC3 FD 22 49 88 0075*       ld (tile_stack_pointer),iy
       04          
048CC8 FD 37 00    0076*       ld iy,(iy) ; pointer to tile record to kill
048CCB FD 22 4C 88 0077*       ld (tile_table_pointer),iy
       04          
048CD0 DD 27 04    0078*       ld hl,(ix+tile_y)
048CD3 ED 5B 37 8D 0079*       ld de,(@tile_y)
       04          
048CD8 B7          0080*       or a ; clear carry
048CD9 E5          0081*       push hl
048CDA ED 52       0082*       sbc hl,de
048CDC E1          0083*       pop hl
048CDD CA ED 8C 04 0084*       jp z,@kill_it
048CE1 01 00 01 00 0085*       ld bc,1*256
048CE5 09          0086*       add hl,bc
048CE6 B7          0087*       or a
048CE7 ED 52       0088*       sbc hl,de
048CE9 C2 01 8D 04 0089*       jp nz,@next_record
048CED             0090*   @kill_it: ; deactivate tile and replace with inactive blank tile
048CED FD 07 01    0091*       ld bc,(iy+tile_x) ; get x position (ud.e already has y-position)
048CF0 CD 56 18 04 0092*       call vdu_plot_bmp168 ; plot blank tile (bitmap was activated at beginning of proc)
048CF4 CD D6 88 04 0093*       call table_deactivate_tile
048CF8 DD 2A 34 8D 0094*       ld ix,(@tile_stack_pointer) ; get back stack pointer
       04          
048CFD C3 98 8C 04 0095*       jp @check_loop ; deactivate tile naturally advances to next record
048D01             0096*    ; get back stack pointer and loop
048D01             0097*   @next_record:
048D01 DD 2A 34 8D 0098*       ld ix,(@tile_stack_pointer)
       04          
048D06 ED 32 03    0099*       lea ix,ix+3 ; next tile stack record
048D09 C3 98 8C 04 0100*       jp @check_loop ; loop until we've checked all the records
048D0D             0101*   @done:
048D0D             0102*   ; find this tile record in the tile stack
048D0D D1          0103*       pop de ; restore pointer to this tile table record (was hl)
048D0E FD 21 46 85 0104*       ld iy,tile_stack ; set ix to first record in table
       04          
048D13             0105*   @find_loop:
048D13 FD 27 00    0106*       ld hl,(iy)
048D16 ED 33 03    0107*       lea iy,iy+3 ; next tile stack record
048D19 B7          0108*       or a ; clear carry
048D1A ED 52       0109*       sbc hl,de ; if not the same address, loop
048D1C C2 13 8D 04 0110*       jp nz,@find_loop
048D20 ED 33 FD    0111*       lea iy,iy-3 ; back up to the record we want
048D23 FD 22 49 88 0112*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
048D28 FD 37 00    0113*       ld iy,(iy) ; iy points to the tile stack record
048D2B FD 22 4C 88 0114*       ld (tile_table_pointer),iy ; set pointer to this tile record
       04          
048D30 C3 F4 8B 04 0115*       jp activate_crater
048D34 46 85 04    0116*   @tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
048D37 00 00 00    0117*   @tile_y: dl 0 ; y position of tiles to kill
048D3A             0118*   ; end move_electrode
048D3A             0078        include "tile_lightning.inc"
048D3A             0001*   lightning_defaults:
048D3A 0A          0002*       db tile_lightning       ; type
048D3B 53 01 00    0003*       dl BUF_LIGHTNING_H_0    ; base_bufferId
048D3E 57 8D 04    0004*       dl move_lightning       ; move_program
048D41 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
048D42 10          0006*       db 16                   ; dim_x
048D43 10          0007*       db 16                   ; dim_y
048D44 01          0008*       db 1                    ; num_orientations
048D45 02          0009*       db 2                    ; num_animations
048D46 00          0010*       db 0                    ; animation
048D47 08          0011*       db 8                    ; animation_timer
048D48 00          0012*       db 0                    ; move_timer
048D49 00          0013*       db 0                    ; move_step
048D4A 00          0014*       db 0                    ; points
048D4B FF          0015*       db -1                    ; shield_damage
048D4C 00          0016*       db 0                    ; frame
048D4D             0017*   
048D4D             0018*   activate_lightning:
048D4D 21 3A 8D 04 0019*       ld hl,lightning_defaults
048D51             0020*   ; get next available active tile id
048D51 CD 0F 89 04 0021*       call spawn_active_tile
048D55 D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
048D56             0023*   ; other specific initialization
048D56 C9          0024*       ret
048D57             0025*   ; end activate_lightning
048D57             0026*   
048D57             0027*   move_lightning:
048D57 CD 29 8B 04 0028*       call move_active_tile
048D5B CA D6 88 04 0029*       jp z,table_deactivate_tile
048D5F CD 08 20 04 0030*       call check_enemy_collision_laser ; kills laser on collision but does not die
048D63 DD 21 56 9E 0031*       ld ix,player_begin
       04          
048D68 DD CB 1D 76 0032*       bit sprite_alive,(ix+sprite_collisions)
048D6C CA 7C 8D 04 0033*       jp z,@animate ; player is dead so don't check for collisions
048D70 CD 14 20 04 0034*       call check_enemy_collision_player
048D74 C2 7C 8D 04 0035*       jp nz,@animate ; no collision so do animation
048D78 CD 8A 7E 04 0036*       call update_shields
048D7C             0037*   @animate:
048D7C FD 35 23    0038*       dec (iy+tile_animation_timer)
048D7F C0          0039*       ret nz ; not time to animate
048D80             0040*   ; reset the animation timer and bump animation
048D80 3E 08       0041*       ld a,8
048D82 FD 77 23    0042*       ld (iy+tile_animation_timer),a
048D85 FD 7E 28    0043*       ld a,(iy+tile_frame)
048D88 3C          0044*       inc a
048D89 E6 01       0045*       and %00000001 ; modulo 1
048D8B FD 77 28    0046*       ld (iy+tile_frame),a
048D8E C3 7D 8B 04 0047*       jp draw_active_tile
048D92 C9          0048*       ret
048D93             0079        include "tile_pad_small.inc"
048D93             0001*   pad_small_defaults:
048D93 01          0002*       db tile_pad_small       ; type
048D94 7B 01 00    0003*       dl BUF_TILE_PAD_0       ; base_bufferId
048D97 B9 8D 04    0004*       dl move_pad_small       ; move_program
048D9A 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
048D9B 10          0006*       db 16                   ; dim_x
048D9C 10          0007*       db 16                   ; dim_y
048D9D 01          0008*       db 1                    ; num_orientations
048D9E 01          0009*       db 1                    ; num_animations
048D9F 00          0010*       db 0                    ; animation
048DA0 10          0011*       db 16                   ; animation_timer
048DA1 00          0012*       db 0                    ; move_timer
048DA2 00          0013*       db 0                    ; move_step
048DA3 05          0014*       db 5                    ; points
048DA4 00          0015*       db 0                    ; shield_damage
048DA5 00          0016*       db 0                    ; frame
048DA6             0017*   
048DA6             0018*   activate_pad_small:
048DA6 21 93 8D 04 0019*       ld hl,pad_small_defaults
048DAA             0020*   ; get next available active tile id
048DAA CD 0F 89 04 0021*       call spawn_active_tile
048DAE D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
048DAF             0023*   ; other specific initialization
048DAF CD 18 05 04 0024*       call rand_8     ; snag a random number
048DB3 E6 1F       0025*       and %00011111 ; keep only 5 lowest bits (max 31)
048DB5 DD 77 24    0026*       ld (ix+tile_move_timer),a ; when this hits zero,will spawn a seeker
048DB8 C9          0027*       ret
048DB9             0028*   ; end activate_pad_small
048DB9             0029*   
048DB9             0030*   move_pad_small:
048DB9 CD 29 8B 04 0031*       call move_active_tile
048DBD CA D6 88 04 0032*       jp z,table_deactivate_tile
048DC1 CD 08 20 04 0033*       call check_enemy_collision_laser
048DC5 CA 00 8E 04 0034*       jp z,kill_pad_small
048DC9             0035*   ; do animation
048DC9 FD 35 23    0036*       dec (iy+tile_animation_timer)
048DCC C2 E2 8D 04 0037*       jp nz,@F
048DD0 3E 10       0038*       ld a,16
048DD2 FD 77 23    0039*       ld (iy+tile_animation_timer),a
048DD5 FD 7E 28    0040*       ld a,(iy+tile_frame)
048DD8 3C          0041*       inc a
048DD9 E6 07       0042*       and %00000111 ; modulo 8
048DDB FD 77 28    0043*       ld (iy+tile_frame),a
048DDE CD 7D 8B 04 0044*       call draw_active_tile
048DE2             0045*   @@: ; check player alive
048DE2 DD 21 56 9E 0046*       ld ix,player_begin
       04          
048DE7 DD CB 1D 76 0047*       bit sprite_alive,(ix+sprite_collisions)
048DEB C8          0048*       ret z ; player dead so nothing more to do
048DEC             0049*   ; check whether it is time to spawn a seeker
048DEC FD 35 24    0050*       dec (iy+tile_move_timer)
048DEF C0          0051*       ret nz
048DF0             0052*   ; spwan a seeker
048DF0 CD 1E 21 04 0053*       call enemy_spawn_seeker
048DF4             0054*       ; ret ; DEBUG
048DF4             0055*       ; fall through to reset move timer
048DF4             0056*   pad_small_reset_move_timer:
048DF4 CD 18 05 04 0057*       call rand_8     ; snag a random number
048DF8 E6 1F       0058*       and %00011111   ; keep only 5 lowest bits (max 31)
048DFA C6 40       0059*       add a,64 ; range is now 64-127
048DFC FD 77 24    0060*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
048DFF C9          0061*       ret
048E00             0062*   
048E00             0063*   kill_pad_small:
048E00 CD 32 7E 04 0064*       call update_score
048E04 C3 F4 8B 04 0065*       jp activate_crater
048E08             0066*   ; end move_pad_small
048E08             0080        include "tile_turret_fireball.inc"
048E08             0001*   turret_fireball_defaults:
048E08 02          0002*       db enemy_ground         ; type
048E09 83 01 00    0003*       dl BUF_TURRET_000       ; base_bufferId
048E0C 2E 8E 04    0004*       dl move_turret_fireball ; move_program
048E0F 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
048E10 10          0006*       db 16                   ; dim_x
048E11 10          0007*       db 16                   ; dim_y
048E12 20          0008*       db 32                   ; num_orientations
048E13 01          0009*       db 1                    ; num_animations
048E14 00          0010*       db 0                    ; animation
048E15 00          0011*       db 0                    ; animation_timer
048E16 00          0012*       db 0                    ; move_timer
048E17 00          0013*       db 0                    ; move_step
048E18 05          0014*       db 5                    ; points
048E19 00          0015*       db 0                    ; shield_damage
048E1A 00          0016*       db 0                    ; frame
048E1B             0017*   
048E1B             0018*   activate_turret_fireball:
048E1B 21 08 8E 04 0019*       ld hl,turret_fireball_defaults
048E1F             0020*   ; get next available active tile id
048E1F CD 0F 89 04 0021*       call spawn_active_tile
048E23 D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
048E24             0023*   ; other specific initialization
048E24 CD 18 05 04 0024*       call rand_8     ; snag a random number
048E28 E6 1F       0025*       and %00011111 ; keep only 5 lowest bits (max 31)
048E2A DD 77 24    0026*       ld (ix+tile_move_timer),a ; when this hits zero,will spawn a fireball
048E2D C9          0027*       ret
048E2E             0028*   ; end activate_turret_fireball
048E2E             0029*   
048E2E             0030*   move_turret_fireball:
048E2E CD 29 8B 04 0031*       call move_active_tile
048E32 CA D6 88 04 0032*       jp z,table_deactivate_tile
048E36 CD 08 20 04 0033*       call check_enemy_collision_laser
048E3A CA 77 8E 04 0034*       jp z,kill_turret_fireball
048E3E             0035*   ; target player
048E3E CD 5E 84 04 0036*       call tile_orientation_to_player
048E42 21 00 04 00 0037*       ld hl,speed_fireball
048E46 22 AE 84 04 0038*       ld (Vp),hl ; param for targeting_computer
048E4A CD C6 84 04 0039*       call targeting_computer
048E4E FD 2F 10    0040*       ld (iy+tile_heading),hl ; save active tile heading
048E51 CD AD 89 04 0041*       call tile_frame_heading
048E55 CD 7D 8B 04 0042*       call draw_active_tile
048E59             0043*   ; check player alive
048E59 DD 21 56 9E 0044*       ld ix,player_begin
       04          
048E5E DD CB 1D 76 0045*       bit sprite_alive,(ix+sprite_collisions)
048E62 C8          0046*       ret z ; player dead so nothing more to do
048E63             0047*   ; check whether it is time to spawn a fireball
048E63 FD 35 24    0048*       dec (iy+tile_move_timer)
048E66 C0          0049*       ret nz
048E67             0050*   ; spwan a fireball
048E67 CD 58 20 04 0051*       call enemy_spawn_fireball
048E6B             0052*       ; fall through to reset move timer
048E6B             0053*   turret_fireball_reset_move_timer:
048E6B CD 18 05 04 0054*       call rand_8     ; snag a random number
048E6F E6 1F       0055*       and %00011111   ; keep only 5 lowest bits (max 31)
048E71 C6 18       0056*       add a,24 ; range is now 24-55
048E73 FD 77 24    0057*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
048E76 C9          0058*       ret
048E77             0059*   
048E77             0060*   kill_turret_fireball:
048E77 CD 32 7E 04 0061*       call update_score
048E7B C3 F4 8B 04 0062*       jp activate_crater
048E7F             0063*   ; end move_turret_fireball
048E7F             0081        include "debug.inc"
048E7F             0001*   printHexA:
048E7F F5          0002*       push af
048E80 C5          0003*       push bc
048E81 CD AE 00 04 0004*       call printHex8
048E85 3E 20       0005*       ld a,' '
048E87 5B D7       0006*       rst.lil 10h
048E89 C1          0007*       pop bc
048E8A F1          0008*       pop af
048E8B C9          0009*       ret
048E8C             0010*   
048E8C             0011*   printHexHL:
048E8C F5          0012*       push af
048E8D C5          0013*       push bc
048E8E CD A8 00 04 0014*       call printHex16
048E92 3E 20       0015*       ld a,' '
048E94 5B D7       0016*       rst.lil 10h
048E96 C1          0017*       pop bc
048E97 F1          0018*       pop af
048E98 C9          0019*       ret
048E99             0020*   
048E99             0021*   printHexUHL:
048E99 F5          0022*       push af
048E9A C5          0023*       push bc
048E9B CD A0 00 04 0024*       call printHex24
048E9F 3E 20       0025*       ld a,' '
048EA1 5B D7       0026*       rst.lil 10h
048EA3 C1          0027*       pop bc
048EA4 F1          0028*       pop af
048EA5 C9          0029*       ret
048EA6             0030*   
048EA6             0031*   printHexAUHL:
048EA6 F5          0032*       push af
048EA7 C5          0033*       push bc
048EA8 CD AE 00 04 0034*       call printHex8
048EAC 3E 2E       0035*       ld a,'.'
048EAE 5B D7       0036*       rst.lil 10h
048EB0 CD A0 00 04 0037*       call printHex24
048EB4 3E 20       0038*       ld a,' '
048EB6 5B D7       0039*       rst.lil 10h
048EB8 C1          0040*       pop bc
048EB9 F1          0041*       pop af
048EBA C9          0042*       ret
048EBB             0043*   
048EBB             0044*   printHexABHL:
048EBB             0045*   ; preserve registers
048EBB C5          0046*       push bc ; b will be ok c will not
048EBC F5          0047*       push af ; will get totally destroyed
048EBD             0048*   ; print a
048EBD CD AE 00 04 0049*       call printHex8
048EC1             0050*   ; print b
048EC1 78          0051*       ld a,b
048EC2 CD AE 00 04 0052*       call printHex8
048EC6             0053*   ; print hl
048EC6 CD A8 00 04 0054*       call printHex16
048ECA             0055*   ; restore registers
048ECA F1          0056*       pop af
048ECB C1          0057*       pop bc
048ECC C9          0058*       ret
048ECD             0059*   
048ECD             0060*   printHexBHL:
048ECD             0061*   ; preserve registers
048ECD C5          0062*       push bc ; b will be ok c will not
048ECE F5          0063*       push af ; will get totally destroyed
048ECF             0064*   ; print b
048ECF 78          0065*       ld a,b
048ED0 CD AE 00 04 0066*       call printHex8
048ED4             0067*   ; print hl
048ED4 CD A8 00 04 0068*       call printHex16
048ED8             0069*   ; restore registers
048ED8 F1          0070*       pop af
048ED9 C1          0071*       pop bc
048EDA C9          0072*       ret
048EDB             0073*   
048EDB             0074*   printHexCDE:
048EDB             0075*   ; preserve registers
048EDB C5          0076*       push bc ; b will be ok c will not
048EDC F5          0077*       push af ; will get totally destroyed
048EDD             0078*   ; print c
048EDD 79          0079*       ld a,c
048EDE CD AE 00 04 0080*       call printHex8
048EE2             0081*   ; print de
048EE2 EB          0082*       ex de,hl
048EE3 CD A8 00 04 0083*       call printHex16
048EE7 EB          0084*       ex de,hl
048EE8             0085*   ; restore registers
048EE8 F1          0086*       pop af
048EE9 C1          0087*       pop bc
048EEA C9          0088*       ret
048EEB             0089*   
048EEB             0090*   printHexUIX:
048EEB             0091*   ; store everything in scratch
048EEB 22 35 03 04 0092*       ld (uhl),hl
048EEF ED 43 38 03 0093*       ld (ubc),bc
       04          
048EF4 ED 53 3B 03 0094*       ld (ude),de
       04          
048EF9 DD 22 3E 03 0095*       ld (uix),ix
       04          
048EFE FD 22 41 03 0096*       ld (uiy),iy
       04          
048F03 F5          0097*       push af ; fml
048F04             0098*   
048F04 21 CC 02 04 0099*       ld hl,str_ixu
048F08 CD 67 00 04 0100*       call printString
048F0C 2A 3E 03 04 0101*       ld hl,(uix)
048F10 CD A0 00 04 0102*       call printHex24
048F14 CD 7C 00 04 0103*       call printNewLine
048F18             0104*   
048F18             0105*   ; restore everything
048F18 2A 35 03 04 0106*       ld hl, (uhl)
048F1C ED 4B 38 03 0107*       ld bc, (ubc)
       04          
048F21 ED 5B 3B 03 0108*       ld de, (ude)
       04          
048F26 DD 2A 3E 03 0109*       ld ix, (uix)
       04          
048F2B FD 2A 41 03 0110*       ld iy, (uiy)
       04          
048F30 F1          0111*       pop af
048F31             0112*   ; all done
048F31 C9          0113*       ret
048F32             0114*   
048F32             0115*   
048F32             0116*   ; print registers to screen in hexidecimal format
048F32             0117*   ; inputs: none
048F32             0118*   ; outputs: values of every register printed to screen
048F32             0119*   ;    values of each register in global scratch memory
048F32             0120*   ; destroys: nothing
048F32             0121*   stepRegistersHex:
048F32             0122*   ; store everything in scratch
048F32 22 35 03 04 0123*       ld (uhl),hl
048F36 ED 43 38 03 0124*       ld (ubc),bc
       04          
048F3B ED 53 3B 03 0125*       ld (ude),de
       04          
048F40 DD 22 3E 03 0126*       ld (uix),ix
       04          
048F45 FD 22 41 03 0127*       ld (uiy),iy
       04          
048F4A F5          0128*       push af ; fml
048F4B E1          0129*       pop hl ; thanks, zilog
048F4C 22 32 03 04 0130*       ld (uaf),hl
048F50 F5          0131*       push af ; dammit
048F51             0132*   
048F51             0133*   ; home the cursor
048F51             0134*       ; call vdu_home_cursor
048F51             0135*   
048F51             0136*   ; print each register
048F51 21 B8 02 04 0137*       ld hl,str_afu
048F55 CD 67 00 04 0138*       call printString
048F59 2A 32 03 04 0139*       ld hl,(uaf)
048F5D CD A0 00 04 0140*       call printHex24
048F61 CD 7C 00 04 0141*       call printNewLine
048F65             0142*   
048F65 21 BD 02 04 0143*       ld hl,str_hlu
048F69 CD 67 00 04 0144*       call printString
048F6D 2A 35 03 04 0145*       ld hl,(uhl)
048F71 CD A0 00 04 0146*       call printHex24
048F75 CD 7C 00 04 0147*       call printNewLine
048F79             0148*   
048F79 21 C2 02 04 0149*       ld hl,str_bcu
048F7D CD 67 00 04 0150*       call printString
048F81 2A 38 03 04 0151*       ld hl,(ubc)
048F85 CD A0 00 04 0152*       call printHex24
048F89 CD 7C 00 04 0153*       call printNewLine
048F8D             0154*   
048F8D 21 C7 02 04 0155*       ld hl,str_deu
048F91 CD 67 00 04 0156*       call printString
048F95 2A 3B 03 04 0157*       ld hl,(ude)
048F99 CD A0 00 04 0158*       call printHex24
048F9D CD 7C 00 04 0159*       call printNewLine
048FA1             0160*   
048FA1 21 CC 02 04 0161*       ld hl,str_ixu
048FA5 CD 67 00 04 0162*       call printString
048FA9 2A 3E 03 04 0163*       ld hl,(uix)
048FAD CD A0 00 04 0164*       call printHex24
048FB1 CD 7C 00 04 0165*       call printNewLine
048FB5             0166*   
048FB5 21 D1 02 04 0167*       ld hl,str_iyu
048FB9 CD 67 00 04 0168*       call printString
048FBD 2A 41 03 04 0169*       ld hl,(uiy)
048FC1 CD A0 00 04 0170*       call printHex24
048FC5 CD 7C 00 04 0171*       call printNewLine
048FC9             0172*   
048FC9             0173*       ; call vsync
048FC9             0174*   
048FC9 CD 7C 00 04 0175*       call printNewLine
048FCD             0176*   
048FCD             0177*   ; check for right shift key and quit if pressed
048FCD             0178*       MOSCALL mos_getkbmap
048FCD 3E 1E       0001*M1 			LD	A, function
048FCF 5B CF       0002*M1 			RST.LIL	08h
048FD1             0179*   @stayhere:
048FD1             0180*   ; 7 RightShift
048FD1 DD CB 00 76 0181*       bit 6,(ix+0)
048FD5 20 02       0182*       jr nz,@RightShift
048FD7 18 F8       0183*       jr @stayhere
048FD9             0184*   @RightShift:
048FD9 DD CB 0E 86 0185*       res 0,(ix+14) ; debounce the key (hopefully)
048FDD 3E 80       0186*       ld a,%10000000
048FDF             0187*       ; call multiPurposeDelay
048FDF             0188*   
048FDF             0189*   ; restore everything
048FDF 2A 35 03 04 0190*       ld hl, (uhl)
048FE3 ED 4B 38 03 0191*       ld bc, (ubc)
       04          
048FE8 ED 5B 3B 03 0192*       ld de, (ude)
       04          
048FED DD 2A 3E 03 0193*       ld ix, (uix)
       04          
048FF2 FD 2A 41 03 0194*       ld iy, (uiy)
       04          
048FF7 F1          0195*       pop af
048FF8             0196*   ; all done
048FF8 C9          0197*       ret
048FF9             0198*   
048FF9             0199*   ; print registers to screen in hexidecimal format
048FF9             0200*   ; inputs: none
048FF9             0201*   ; outputs: values of every register printed to screen
048FF9             0202*   ;    values of each register in global scratch memory
048FF9             0203*   ; destroys: nothing
048FF9             0204*   dumpRegistersHex:
048FF9             0205*   ; store everything in scratch
048FF9 22 35 03 04 0206*       ld (uhl),hl
048FFD ED 43 38 03 0207*       ld (ubc),bc
       04          
049002 ED 53 3B 03 0208*       ld (ude),de
       04          
049007 DD 22 3E 03 0209*       ld (uix),ix
       04          
04900C FD 22 41 03 0210*       ld (uiy),iy
       04          
049011 F5          0211*       push af ; fml
049012 E1          0212*       pop hl ; thanks, zilog
049013 22 32 03 04 0213*       ld (uaf),hl
049017 F5          0214*       push af ; dammit
049018             0215*   
049018             0216*   ; home the cursor
049018             0217*       ; call vdu_home_cursor
049018             0218*       ; call printNewLine
049018             0219*   
049018             0220*   ; print each register
049018 21 B8 02 04 0221*       ld hl,str_afu
04901C CD 67 00 04 0222*       call printString
049020 2A 32 03 04 0223*       ld hl,(uaf)
049024 CD A0 00 04 0224*       call printHex24
049028 CD 7C 00 04 0225*       call printNewLine
04902C             0226*   
04902C 21 BD 02 04 0227*       ld hl,str_hlu
049030 CD 67 00 04 0228*       call printString
049034 2A 35 03 04 0229*       ld hl,(uhl)
049038 CD A0 00 04 0230*       call printHex24
04903C CD 7C 00 04 0231*       call printNewLine
049040             0232*   
049040 21 C2 02 04 0233*       ld hl,str_bcu
049044 CD 67 00 04 0234*       call printString
049048 2A 38 03 04 0235*       ld hl,(ubc)
04904C CD A0 00 04 0236*       call printHex24
049050 CD 7C 00 04 0237*       call printNewLine
049054             0238*   
049054 21 C7 02 04 0239*       ld hl,str_deu
049058 CD 67 00 04 0240*       call printString
04905C 2A 3B 03 04 0241*       ld hl,(ude)
049060 CD A0 00 04 0242*       call printHex24
049064 CD 7C 00 04 0243*       call printNewLine
049068             0244*   
049068 21 CC 02 04 0245*       ld hl,str_ixu
04906C CD 67 00 04 0246*       call printString
049070 2A 3E 03 04 0247*       ld hl,(uix)
049074 CD A0 00 04 0248*       call printHex24
049078 CD 7C 00 04 0249*       call printNewLine
04907C             0250*   
04907C 21 D1 02 04 0251*       ld hl,str_iyu
049080 CD 67 00 04 0252*       call printString
049084 2A 41 03 04 0253*       ld hl,(uiy)
049088 CD A0 00 04 0254*       call printHex24
04908C             0255*   
04908C CD 7C 00 04 0256*       call printNewLine
049090 CD 7C 00 04 0257*       call printNewLine
049094             0258*   ; restore everything
049094 2A 35 03 04 0259*       ld hl, (uhl)
049098 ED 4B 38 03 0260*       ld bc, (ubc)
       04          
04909D ED 5B 3B 03 0261*       ld de, (ude)
       04          
0490A2 DD 2A 3E 03 0262*       ld ix, (uix)
       04          
0490A7 FD 2A 41 03 0263*       ld iy, (uiy)
       04          
0490AC F1          0264*       pop af
0490AD             0265*   ; all done
0490AD C9          0266*       ret
0490AE             0267*   
0490AE             0268*   dumpRegistersHexPrime:
0490AE D9          0269*       exx
0490AF 08          0270*       ex af,af'
0490B0 CD F9 8F 04 0271*       call dumpRegistersHex
0490B4 08          0272*       ex af,af'
0490B5 D9          0273*       exx
0490B6 C9          0274*       ret
0490B7             0275*   
0490B7             0276*   ; additionally dump prime registers
0490B7             0277*   ; inputs: none
0490B7             0278*   ; outputs: values of every register printed to screen
0490B7             0279*   ; destroys: nothing
0490B7             0280*   dumpRegistersHexAll:
0490B7 CD F9 8F 04 0281*       call dumpRegistersHex
0490BB 08          0282*       ex af,af'
0490BC D9          0283*       exx
0490BD CD F9 8F 04 0284*       call dumpRegistersHex
0490C1 08          0285*       ex af,af'
0490C2 D9          0286*       exx
0490C3 C9          0287*       ret
0490C4             0288*   
0490C4             0289*   ; print hlu to screen in hexidecimal format
0490C4             0290*   ; inputs: none
0490C4             0291*   ; destroys: nothing
0490C4             0292*   print_hex_hl:
0490C4 F5          0293*       push af
0490C5 E5          0294*       push hl
0490C6 21 BD 02 04 0295*       ld hl,str_hlu
0490CA CD 67 00 04 0296*       call printString
0490CE E1          0297*       pop hl
0490CF E5          0298*       push hl
0490D0 CD A0 00 04 0299*       call printHex24
0490D4 3E 20       0300*       ld a,' '
0490D6 5B D7       0301*       rst.lil 10h
0490D8 E1          0302*       pop hl
0490D9 F1          0303*       pop af
0490DA C9          0304*       ret
0490DB             0305*   
0490DB             0306*   ; print bcu to screen in hexidecimal format
0490DB             0307*   ; inputs: none
0490DB             0308*   ; destroys: nothing
0490DB             0309*   print_hex_bc:
0490DB F5          0310*       push af
0490DC E5          0311*       push hl
0490DD C5          0312*       push bc
0490DE 21 C2 02 04 0313*       ld hl,str_bcu
0490E2 CD 67 00 04 0314*       call printString
0490E6 E1          0315*       pop hl
0490E7 E5          0316*       push hl
0490E8 CD A0 00 04 0317*       call printHex24
0490EC 3E 20       0318*       ld a,' '
0490EE 5B D7       0319*       rst.lil 10h
0490F0 C1          0320*       pop bc
0490F1 E1          0321*       pop hl
0490F2 F1          0322*       pop af
0490F3 C9          0323*       ret
0490F4             0324*   
0490F4             0325*   ; print deu to screen in hexidecimal format
0490F4             0326*   ; inputs: none
0490F4             0327*   ; destroys: nothing
0490F4             0328*   print_hex_de:
0490F4 F5          0329*       push af
0490F5 E5          0330*       push hl
0490F6 D5          0331*       push de
0490F7 21 C7 02 04 0332*       ld hl,str_deu
0490FB CD 67 00 04 0333*       call printString
0490FF E1          0334*       pop hl
049100 E5          0335*       push hl
049101 CD A0 00 04 0336*       call printHex24
049105 3E 20       0337*       ld a,' '
049107 5B D7       0338*       rst.lil 10h
049109 D1          0339*       pop de
04910A E1          0340*       pop hl
04910B F1          0341*       pop af
04910C C9          0342*       ret
04910D             0343*   
04910D             0344*   
04910D             0345*   ; inputs: whatever is in the flags register
04910D             0346*   ; outputs: binary representation of flags
04910D             0347*   ;          with a header so we know which is what
04910D             0348*   ; destroys: nothing
04910D             0349*   ; preserves: everything
04910D             0350*   dumpFlags:
04910D             0351*   ; first we curse zilog for not giving direct access to flags
04910D F5          0352*       push af ; this is so we can send it back unharmed
04910E F5          0353*       push af ; this is so we can pop it to hl
04910F             0354*   ; store everything in scratch
04910F 22 35 03 04 0355*       ld (uhl),hl
049113 ED 43 38 03 0356*       ld (ubc),bc
       04          
049118 ED 53 3B 03 0357*       ld (ude),de
       04          
04911D DD 22 3E 03 0358*       ld (uix),ix
       04          
049122 FD 22 41 03 0359*       ld (uiy),iy
       04          
049127             0360*   ; next we print the header
049127 21 53 91 04 0361*       ld hl,@header
04912B CD 67 00 04 0362*       call printString
04912F E1          0363*       pop hl ; flags are now in l
049130 7D          0364*       ld a,l ; flags are now in a
049131 CD 6E 02 04 0365*       call printBin8
049135 CD 7C 00 04 0366*       call printNewLine
049139             0367*   ; restore everything
049139 2A 35 03 04 0368*       ld hl, (uhl)
04913D ED 4B 38 03 0369*       ld bc, (ubc)
       04          
049142 ED 5B 3B 03 0370*       ld de, (ude)
       04          
049147 DD 2A 3E 03 0371*       ld ix, (uix)
       04          
04914C FD 2A 41 03 0372*       ld iy, (uiy)
       04          
049151 F1          0373*       pop af ; send her home the way she came
049152 C9          0374*       ret
049153             0375*   ; Bit 7 (S): Sign flag
049153             0376*   ; Bit 6 (Z): Zero flag
049153             0377*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
049153             0378*   ; Bit 4 (H): Half Carry flag
049153             0379*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
049153             0380*   ; Bit 2 (PV): Parity/Overflow flag
049153             0381*   ; Bit 1 (N): Subtract flag
049153             0382*   ; Bit 0 (C): Carry flag
049153 53 5A 78 48 0383*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
04915E             0384*   
04915E             0385*   
04915E             0386*   ; print bytes from an address to the screen in hexidecimal format
04915E             0387*   ; inputs: hl = address of first byte to print, a = number of bytes to print
04915E             0388*   ; outputs: values of each byte printed to screen separated by spaces
04915E             0389*   ; destroys: nothing
04915E             0390*   dumpMemoryHex:
04915E             0391*   ; save registers to the stack
04915E C5          0392*       push bc
04915F E5          0393*       push hl
049160 F5          0394*       push af
049161             0395*   
049161             0396*   ; print the address and separator
049161 CD A0 00 04 0397*       call printHex24
049165 3E 3A       0398*       ld a,':'
049167 5B D7       0399*       rst.lil 10h
049169 3E 20       0400*       ld a,' '
04916B 5B D7       0401*       rst.lil 10h
04916D             0402*   
04916D             0403*   ; set b to be our loop counter
04916D F1          0404*       pop af
04916E 47          0405*       ld b,a
04916F E1          0406*       pop hl
049170 E5          0407*       push hl
049171 F5          0408*       push af
049172             0409*   @loop:
049172             0410*   ; print the byte
049172 7E          0411*       ld a,(hl)
049173 CD AE 00 04 0412*       call printHex8
049177             0413*   ; print a space
049177 3E 20       0414*       ld a,' '
049179 5B D7       0415*       rst.lil 10h
04917B 23          0416*       inc hl
04917C 10 F4       0417*       djnz @loop
04917E CD 7C 00 04 0418*       call printNewLine
049182             0419*   
049182             0420*   ; restore everything
049182 F1          0421*       pop af
049183 E1          0422*       pop hl
049184 C1          0423*       pop bc
049185             0424*   
049185             0425*   ; all done
049185 C9          0426*       ret
049186             0427*   
049186             0428*   
049186             0429*   ; print bytes from an address to the screen in binary format
049186             0430*   ; inputs: hl = address of first byte to print, a = number of bytes to print
049186             0431*   ; outputs: values of each byte printed to screen separated by spaces
049186             0432*   ; destroys: nothing
049186             0433*   dumpMemoryBin:
049186             0434*   ; save all registers to the stack
049186 F5          0435*       push af
049187 C5          0436*       push bc
049188 D5          0437*       push de
049189 E5          0438*       push hl
04918A DD E5       0439*       push ix
04918C FD E5       0440*       push iy
04918E             0441*   
04918E             0442*   ; set b to be our loop counter
04918E 47          0443*       ld b,a
04918F             0444*   @loop:
04918F             0445*   ; print the byte
04918F 7E          0446*       ld a,(hl)
049190 E5          0447*       push hl
049191 C5          0448*       push bc
049192 CD 6E 02 04 0449*       call printBin8
049196 C1          0450*       pop bc
049197             0451*   ; print a space
049197 3E 20       0452*       ld a,' '
049199 5B D7       0453*       rst.lil 10h
04919B E1          0454*       pop hl
04919C 23          0455*       inc hl
04919D 10 F0       0456*       djnz @loop
04919F CD 7C 00 04 0457*       call printNewLine
0491A3             0458*   
0491A3             0459*   ; restore everything
0491A3 FD E1       0460*       pop iy
0491A5 DD E1       0461*       pop ix
0491A7 E1          0462*       pop hl
0491A8 D1          0463*       pop de
0491A9 C1          0464*       pop bc
0491AA F1          0465*       pop af
0491AB             0466*   ; all done
0491AB C9          0467*       ret
0491AC             0468*   
0491AC             0469*   ; print bytes from an address to the screen in binary format
0491AC             0470*   ; with the bits of each byte in reverse order (lsb first)
0491AC             0471*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0491AC             0472*   ; outputs: values of each byte printed to screen separated by spaces
0491AC             0473*   ; destroys: nothing
0491AC             0474*   dumpMemoryBinRev:
0491AC             0475*   ; save all registers to the stack
0491AC F5          0476*       push af
0491AD C5          0477*       push bc
0491AE D5          0478*       push de
0491AF E5          0479*       push hl
0491B0 DD E5       0480*       push ix
0491B2 FD E5       0481*       push iy
0491B4             0482*   
0491B4             0483*   ; set b to be our loop counter
0491B4 47          0484*       ld b,a
0491B5             0485*   @loop:
0491B5             0486*   ; print the byte
0491B5 7E          0487*       ld a,(hl)
0491B6 E5          0488*       push hl
0491B7 C5          0489*       push bc
0491B8 CD 93 02 04 0490*       call printBin8Rev
0491BC C1          0491*       pop bc
0491BD             0492*   ; print a space
0491BD 3E 20       0493*       ld a,' '
0491BF 5B D7       0494*       rst.lil 10h
0491C1 E1          0495*       pop hl
0491C2 23          0496*       inc hl
0491C3 10 F0       0497*       djnz @loop
0491C5 CD 7C 00 04 0498*       call printNewLine
0491C9             0499*   
0491C9             0500*   ; restore everything
0491C9 FD E1       0501*       pop iy
0491CB DD E1       0502*       pop ix
0491CD E1          0503*       pop hl
0491CE D1          0504*       pop de
0491CF C1          0505*       pop bc
0491D0 F1          0506*       pop af
0491D1             0507*   ; all done
0491D1 C9          0508*       ret
0491D2             0509*   
0491D2             0510*   DEBUG_PRINT:
0491D2             0511*       PUSH_ALL
0491D2 08          0001*M1     ex af,af'
0491D3 D9          0002*M1     exx
0491D4 F5          0003*M1     push af
0491D5 E5          0004*M1     push hl
0491D6 C5          0005*M1     push bc
0491D7 D5          0006*M1     push de
0491D8             0007*M1 
0491D8 08          0008*M1     ex af,af'
0491D9 D9          0009*M1     exx
0491DA F5          0010*M1     push af
0491DB E5          0011*M1     push hl
0491DC C5          0012*M1     push bc
0491DD D5          0013*M1     push de
0491DE DD E5       0014*M1     push ix
0491E0 FD E5       0015*M1     push iy
0491E2 0E 00       0512*       ld c,0 ; X
0491E4 06 00       0513*       ld b,0 ; Y
0491E6 CD 31 13 04 0514*       call vdu_move_cursor
0491EA             0515*       POP_ALL
0491EA FD E1       0001*M1     pop iy
0491EC DD E1       0002*M1     pop ix
0491EE D1          0003*M1     pop de
0491EF C1          0004*M1     pop bc
0491F0 E1          0005*M1     pop hl
0491F1 F1          0006*M1     pop af
0491F2 08          0007*M1     ex af,af'
0491F3 D9          0008*M1     exx
0491F4             0009*M1 
0491F4 D1          0010*M1     pop de
0491F5 C1          0011*M1     pop bc
0491F6 E1          0012*M1     pop hl
0491F7 F1          0013*M1     pop af
0491F8 08          0014*M1     ex af,af'
0491F9 D9          0015*M1     exx
0491FA             0516*       PUSH_ALL
0491FA 08          0001*M1     ex af,af'
0491FB D9          0002*M1     exx
0491FC F5          0003*M1     push af
0491FD E5          0004*M1     push hl
0491FE C5          0005*M1     push bc
0491FF D5          0006*M1     push de
049200             0007*M1 
049200 08          0008*M1     ex af,af'
049201 D9          0009*M1     exx
049202 F5          0010*M1     push af
049203 E5          0011*M1     push hl
049204 C5          0012*M1     push bc
049205 D5          0013*M1     push de
049206 DD E5       0014*M1     push ix
049208 FD E5       0015*M1     push iy
04920A CD 0D 91 04 0517*       call dumpFlags
04920E             0518*       POP_ALL
04920E FD E1       0001*M1     pop iy
049210 DD E1       0002*M1     pop ix
049212 D1          0003*M1     pop de
049213 C1          0004*M1     pop bc
049214 E1          0005*M1     pop hl
049215 F1          0006*M1     pop af
049216 08          0007*M1     ex af,af'
049217 D9          0008*M1     exx
049218             0009*M1 
049218 D1          0010*M1     pop de
049219 C1          0011*M1     pop bc
04921A E1          0012*M1     pop hl
04921B F1          0013*M1     pop af
04921C 08          0014*M1     ex af,af'
04921D D9          0015*M1     exx
04921E             0519*       PUSH_ALL
04921E 08          0001*M1     ex af,af'
04921F D9          0002*M1     exx
049220 F5          0003*M1     push af
049221 E5          0004*M1     push hl
049222 C5          0005*M1     push bc
049223 D5          0006*M1     push de
049224             0007*M1 
049224 08          0008*M1     ex af,af'
049225 D9          0009*M1     exx
049226 F5          0010*M1     push af
049227 E5          0011*M1     push hl
049228 C5          0012*M1     push bc
049229 D5          0013*M1     push de
04922A DD E5       0014*M1     push ix
04922C FD E5       0015*M1     push iy
04922E CD F9 8F 04 0520*       call dumpRegistersHex
049232             0521*       ; call waitKeypress
049232             0522*       POP_ALL
049232 FD E1       0001*M1     pop iy
049234 DD E1       0002*M1     pop ix
049236 D1          0003*M1     pop de
049237 C1          0004*M1     pop bc
049238 E1          0005*M1     pop hl
049239 F1          0006*M1     pop af
04923A 08          0007*M1     ex af,af'
04923B D9          0008*M1     exx
04923C             0009*M1 
04923C D1          0010*M1     pop de
04923D C1          0011*M1     pop bc
04923E E1          0012*M1     pop hl
04923F F1          0013*M1     pop af
049240 08          0014*M1     ex af,af'
049241 D9          0015*M1     exx
049242 C9          0523*       ret
049243             0524*   
049243             0525*   DEBUG_PRINT_TILE_TABLE:
049243             0526*       PUSH_ALL
049243 08          0001*M1     ex af,af'
049244 D9          0002*M1     exx
049245 F5          0003*M1     push af
049246 E5          0004*M1     push hl
049247 C5          0005*M1     push bc
049248 D5          0006*M1     push de
049249             0007*M1 
049249 08          0008*M1     ex af,af'
04924A D9          0009*M1     exx
04924B F5          0010*M1     push af
04924C E5          0011*M1     push hl
04924D C5          0012*M1     push bc
04924E D5          0013*M1     push de
04924F DD E5       0014*M1     push ix
049251 FD E5       0015*M1     push iy
049253 CD 7C 00 04 0527*       call printNewLine
049257 DD 21 46 85 0528*       ld ix,tile_stack
       04          
04925C DD 37 00    0529*       ld ix,(ix)
04925F CD F8 96 04 0530*       call dump_tile_record
049263 CD 7C 00 04 0531*       call printNewLine
049267             0532*       POP_ALL
049267 FD E1       0001*M1     pop iy
049269 DD E1       0002*M1     pop ix
04926B D1          0003*M1     pop de
04926C C1          0004*M1     pop bc
04926D E1          0005*M1     pop hl
04926E F1          0006*M1     pop af
04926F 08          0007*M1     ex af,af'
049270 D9          0008*M1     exx
049271             0009*M1 
049271 D1          0010*M1     pop de
049272 C1          0011*M1     pop bc
049273 E1          0012*M1     pop hl
049274 F1          0013*M1     pop af
049275 08          0014*M1     ex af,af'
049276 D9          0015*M1     exx
049277 C9          0533*       ret
049278             0534*   ; end DEBUG_PRINT_TILE_TABLE
049278             0535*   
049278             0536*   DEBUG_PRINT_TABLE:
049278             0537*       PUSH_ALL
049278 08          0001*M1     ex af,af'
049279 D9          0002*M1     exx
04927A F5          0003*M1     push af
04927B E5          0004*M1     push hl
04927C C5          0005*M1     push bc
04927D D5          0006*M1     push de
04927E             0007*M1 
04927E 08          0008*M1     ex af,af'
04927F D9          0009*M1     exx
049280 F5          0010*M1     push af
049281 E5          0011*M1     push hl
049282 C5          0012*M1     push bc
049283 D5          0013*M1     push de
049284 DD E5       0014*M1     push ix
049286 FD E5       0015*M1     push iy
049288 CD 7C 00 04 0538*       call printNewLine
04928C CD 30 95 04 0539*       call dump_sprite_record
049290 CD 7C 00 04 0540*       call printNewLine
049294 CD 7C 00 04 0541*       call printNewLine
049298             0542*   
049298 FD E5       0543*       push iy
04929A DD E1       0544*       pop ix
04929C CD 30 95 04 0545*       call dump_sprite_record
0492A0 CD 7C 00 04 0546*       call printNewLine
0492A4 CD 7C 00 04 0547*       call printNewLine
0492A8             0548*       POP_ALL
0492A8 FD E1       0001*M1     pop iy
0492AA DD E1       0002*M1     pop ix
0492AC D1          0003*M1     pop de
0492AD C1          0004*M1     pop bc
0492AE E1          0005*M1     pop hl
0492AF F1          0006*M1     pop af
0492B0 08          0007*M1     ex af,af'
0492B1 D9          0008*M1     exx
0492B2             0009*M1 
0492B2 D1          0010*M1     pop de
0492B3 C1          0011*M1     pop bc
0492B4 E1          0012*M1     pop hl
0492B5 F1          0013*M1     pop af
0492B6 08          0014*M1     ex af,af'
0492B7 D9          0015*M1     exx
0492B8 C9          0549*       RET
0492B9             0550*   
0492B9             0551*   DEBUG_WAITKEYPRESS:
0492B9             0552*       PUSH_ALL
0492B9 08          0001*M1     ex af,af'
0492BA D9          0002*M1     exx
0492BB F5          0003*M1     push af
0492BC E5          0004*M1     push hl
0492BD C5          0005*M1     push bc
0492BE D5          0006*M1     push de
0492BF             0007*M1 
0492BF 08          0008*M1     ex af,af'
0492C0 D9          0009*M1     exx
0492C1 F5          0010*M1     push af
0492C2 E5          0011*M1     push hl
0492C3 C5          0012*M1     push bc
0492C4 D5          0013*M1     push de
0492C5 DD E5       0014*M1     push ix
0492C7 FD E5       0015*M1     push iy
0492C9 CD 5A 03 04 0553*       call waitKeypress
0492CD             0554*       POP_ALL
0492CD FD E1       0001*M1     pop iy
0492CF DD E1       0002*M1     pop ix
0492D1 D1          0003*M1     pop de
0492D2 C1          0004*M1     pop bc
0492D3 E1          0005*M1     pop hl
0492D4 F1          0006*M1     pop af
0492D5 08          0007*M1     ex af,af'
0492D6 D9          0008*M1     exx
0492D7             0009*M1 
0492D7 D1          0010*M1     pop de
0492D8 C1          0011*M1     pop bc
0492D9 E1          0012*M1     pop hl
0492DA F1          0013*M1     pop af
0492DB 08          0014*M1     ex af,af'
0492DC D9          0015*M1     exx
0492DD C9          0555*       RET
0492DE             0556*   
0492DE             0557*   DEBUG_PRINT_FIELDS:
0492DE             0558*       ; PUSH_ALL
0492DE 01 00 00 00 0559*       ld bc,0
0492E2 4F          0560*       ld c,a
0492E3 DD 21 56 9D 0561*       ld ix,table_base
       04          
0492E8 DD 09       0562*       add ix,bc
0492EA 06 14       0563*       ld b,table_num_records
0492EC             0564*   @@:
0492EC DD E5       0565*       push ix
0492EE E1          0566*       pop hl
0492EF C5          0567*       push bc ; save loop counter
0492F0 3E 01       0568*       ld a,1 ; print one byte
0492F2 CD 5E 91 04 0569*       call dumpMemoryHex
0492F6 ED 32 40    0570*       lea ix,ix+table_record_size
0492F9 C1          0571*       pop bc ; restore loop counter
0492FA 10 F0       0572*       djnz @b
0492FC             0573*       ; POP_ALL
0492FC C9          0574*       ret
0492FD             0575*   
0492FD             0576*   DEBUG_PRINT_TILE_STACK:
0492FD             0577*       PUSH_ALL
0492FD 08          0001*M1     ex af,af'
0492FE D9          0002*M1     exx
0492FF F5          0003*M1     push af
049300 E5          0004*M1     push hl
049301 C5          0005*M1     push bc
049302 D5          0006*M1     push de
049303             0007*M1 
049303 08          0008*M1     ex af,af'
049304 D9          0009*M1     exx
049305 F5          0010*M1     push af
049306 E5          0011*M1     push hl
049307 C5          0012*M1     push bc
049308 D5          0013*M1     push de
049309 DD E5       0014*M1     push ix
04930B FD E5       0015*M1     push iy
04930D 01 00 00 00 0578*       ld bc,0
049311 11 00 00 00 0579*       ld de,0
049315 CD CA 13 04 0580*       call vdu_set_gfx_origin
049319 01 00 00 00 0581*       ld bc,0
04931D 11 00 00 00 0582*       ld de,0
049321 DD 21 7F 00 0583*       ld ix,127
       00          
049326 FD 21 F0 00 0584*       ld iy,240
       00          
04932B CD E5 13 04 0585*       call vdu_set_gfx_viewport
04932F CD 58 13 04 0586*       call vdu_clg
049333 CD FA 12 04 0587*       call vdu_home_cursor
049337 CD 7C 00 04 0588*       call printNewLine
04933B CD 7C 00 04 0589*       call printNewLine
04933F 2A 49 88 04 0590*       ld hl,(tile_stack_pointer)
049343 CD 99 8E 04 0591*       call printHexUHL
049347 CD 7C 00 04 0592*       call printNewLine
04934B 3A 4F 88 04 0593*       ld a,(num_active_tiles)
04934F CD 7F 8E 04 0594*       call printHexA
049353 CD 7C 00 04 0595*       call printNewLine
049357 A7          0596*       and a
049358 CA 86 93 04 0597*       jp z,@done
04935C DD 21 46 85 0598*       ld ix,tile_stack
       04          
049361 3A 4F 88 04 0599*       ld a,(num_active_tiles)
049365 47          0600*       ld b,a
049366             0601*   @loop:
049366 C5          0602*       push bc
049367 DD E5       0603*       push ix
049369 DD 37 00    0604*       ld ix,(ix)
04936C DD 7E 00    0605*       ld a,(ix+tile_id)
04936F CD 7F 8E 04 0606*       call printHexA
049373 DD 7E 16    0607*       ld a,(ix+tile_type)
049376 CD 7F 8E 04 0608*       call printHexA
04937A CD 7C 00 04 0609*       call printNewLine
04937E DD E1       0610*       pop ix
049380 ED 32 03    0611*       lea ix,ix+3
049383 C1          0612*       pop bc
049384 10 E0       0613*       djnz @loop
049386             0614*   @done:
049386             0615*       POP_ALL
049386 FD E1       0001*M1     pop iy
049388 DD E1       0002*M1     pop ix
04938A D1          0003*M1     pop de
04938B C1          0004*M1     pop bc
04938C E1          0005*M1     pop hl
04938D F1          0006*M1     pop af
04938E 08          0007*M1     ex af,af'
04938F D9          0008*M1     exx
049390             0009*M1 
049390 D1          0010*M1     pop de
049391 C1          0011*M1     pop bc
049392 E1          0012*M1     pop hl
049393 F1          0013*M1     pop af
049394 08          0014*M1     ex af,af'
049395 D9          0015*M1     exx
049396 C9          0616*       ret
049397             0617*   
049397             0618*   DEBUG_DUMP_PLAYER_RECORD:
049397             0619*       PUSH_ALL
049397 08          0001*M1     ex af,af'
049398 D9          0002*M1     exx
049399 F5          0003*M1     push af
04939A E5          0004*M1     push hl
04939B C5          0005*M1     push bc
04939C D5          0006*M1     push de
04939D             0007*M1 
04939D 08          0008*M1     ex af,af'
04939E D9          0009*M1     exx
04939F F5          0010*M1     push af
0493A0 E5          0011*M1     push hl
0493A1 C5          0012*M1     push bc
0493A2 D5          0013*M1     push de
0493A3 DD E5       0014*M1     push ix
0493A5 FD E5       0015*M1     push iy
0493A7 CD 7C 00 04 0620*       call printNewLine
0493AB CD 65 98 04 0621*       CALL dump_player_record
0493AF CD 7C 00 04 0622*       call printNewLine
0493B3             0623*       POP_ALL
0493B3 FD E1       0001*M1     pop iy
0493B5 DD E1       0002*M1     pop ix
0493B7 D1          0003*M1     pop de
0493B8 C1          0004*M1     pop bc
0493B9 E1          0005*M1     pop hl
0493BA F1          0006*M1     pop af
0493BB 08          0007*M1     ex af,af'
0493BC D9          0008*M1     exx
0493BD             0009*M1 
0493BD D1          0010*M1     pop de
0493BE C1          0011*M1     pop bc
0493BF E1          0012*M1     pop hl
0493C0 F1          0013*M1     pop af
0493C1 08          0014*M1     ex af,af'
0493C2 D9          0015*M1     exx
0493C3 C9          0624*       RET
0493C4             0625*   
0493C4             0626*   DEBUG_PRINT_SHIELDS:
0493C4             0627*       PUSH_ALL
0493C4 08          0001*M1     ex af,af'
0493C5 D9          0002*M1     exx
0493C6 F5          0003*M1     push af
0493C7 E5          0004*M1     push hl
0493C8 C5          0005*M1     push bc
0493C9 D5          0006*M1     push de
0493CA             0007*M1 
0493CA 08          0008*M1     ex af,af'
0493CB D9          0009*M1     exx
0493CC F5          0010*M1     push af
0493CD E5          0011*M1     push hl
0493CE C5          0012*M1     push bc
0493CF D5          0013*M1     push de
0493D0 DD E5       0014*M1     push ix
0493D2 FD E5       0015*M1     push iy
0493D4 0E 00       0628*       ld c,0 ; X
0493D6 06 00       0629*       ld b,0 ; Y
0493D8 CD 31 13 04 0630*       call vdu_move_cursor
0493DC             0631*   
0493DC CD 0D 91 04 0632*       call dumpFlags
0493E0 CD F9 8F 04 0633*       call dumpRegistersHex
0493E4             0634*   
0493E4 DD 21 67 7E 0635*       ld ix,bar_shields
       04          
0493E9             0636*   
0493E9 CD 60 00 04 0637*       call printInline
0493ED 76 61 6C 3A 0638*       asciz "val:"
       00          
0493F2 DD 27 00    0639*       ld hl,(ix+bar_val)
0493F5 CD CC 00 04 0640*       call printDec
0493F9 CD 7C 00 04 0641*       call printNewLine
0493FD             0642*   
0493FD CD 60 00 04 0643*       call printInline
049401 78 30 20 3A 0644*       asciz "x0 :"
       00          
049406 DD 27 03    0645*       ld hl,(ix+bar_x0)
049409 CD CC 00 04 0646*       call printDec
04940D CD 7C 00 04 0647*       call printNewLine
049411             0648*   
049411 CD 60 00 04 0649*       call printInline
049415 79 30 20 3A 0650*       asciz "y0 :"
       00          
04941A DD 27 06    0651*       ld hl,(ix+bar_y0)
04941D CD CC 00 04 0652*       call printDec
049421 CD 7C 00 04 0653*       call printNewLine
049425             0654*   
049425 CD 60 00 04 0655*       call printInline
049429 78 31 20 3A 0656*       asciz "x1 :"
       00          
04942E DD 27 09    0657*       ld hl,(ix+bar_x1)
049431 CD CC 00 04 0658*       call printDec
049435 CD 7C 00 04 0659*       call printNewLine
049439             0660*   
049439 CD 60 00 04 0661*       call printInline
04943D 79 31 20 3A 0662*       asciz "y1 :"
       00          
049442 DD 27 0C    0663*       ld hl,(ix+bar_y1)
049445 CD CC 00 04 0664*       call printDec
049449 CD 7C 00 04 0665*       call printNewLine
04944D             0666*   
04944D CD 60 00 04 0667*       call printInline
049451 79 20 20 3A 0668*       asciz "y  :"
       00          
049456 DD 27 0F    0669*       ld hl,(ix+bar_y)
049459 CD CC 00 04 0670*       call printDec
04945D CD 7C 00 04 0671*       call printNewLine
049461             0672*   
049461             0673*       POP_ALL
049461 FD E1       0001*M1     pop iy
049463 DD E1       0002*M1     pop ix
049465 D1          0003*M1     pop de
049466 C1          0004*M1     pop bc
049467 E1          0005*M1     pop hl
049468 F1          0006*M1     pop af
049469 08          0007*M1     ex af,af'
04946A D9          0008*M1     exx
04946B             0009*M1 
04946B D1          0010*M1     pop de
04946C C1          0011*M1     pop bc
04946D E1          0012*M1     pop hl
04946E F1          0013*M1     pop af
04946F 08          0014*M1     ex af,af'
049470 D9          0015*M1     exx
049471             0674*       ; call waitKeypress
049471 C9          0675*       ret
049472             0676*   ; end DEBUG_PRINT_SHIELDS
049472             0677*   
049472             0678*   DEBUG_PRINT_BAR_UPDATE:
049472 0E 00       0679*       ld c,0 ; X
049474 06 00       0680*       ld b,0 ; Y
049476 CD 31 13 04 0681*       call vdu_move_cursor
04947A             0682*   
04947A CD 60 00 04 0683*       call printInline
04947E 78 30 20 20 0684*       asciz "x0  :"
       3A 00       
049484 21 00 00 00 0685*       ld hl,0 ; clear hlu
049488 DD 6E 01    0686*       ld l,(ix+@x0-@cmd0+0)
04948B DD 66 02    0687*       ld h,(ix+@x0-@cmd0+1)
04948E CD CC 00 04 0688*       call printDec
049492 CD 7C 00 04 0689*       call printNewLine
049496             0690*   
049496 CD 60 00 04 0691*       call printInline
04949A 79 30 20 20 0692*       asciz "y0  :"
       3A 00       
0494A0 21 00 00 00 0693*       ld hl,0 ; clear hlu
0494A4 DD 6E 07    0694*       ld l,(ix+@y0-@cmd0+0)
0494A7 DD 66 08    0695*       ld h,(ix+@y0-@cmd0+1)
0494AA CD CC 00 04 0696*       call printDec
0494AE CD 7C 00 04 0697*       call printNewLine
0494B2             0698*   
0494B2 CD 60 00 04 0699*       call printInline
0494B6 78 31 20 20 0700*       asciz "x1  :"
       3A 00       
0494BC 21 00 00 00 0701*       ld hl,0 ; clear hlu
0494C0 DD 6E 05    0702*       ld l,(ix+@x1-@cmd0+0)
0494C3 DD 66 06    0703*       ld h,(ix+@x1-@cmd0+1)
0494C6 CD CC 00 04 0704*       call printDec
0494CA CD 7C 00 04 0705*       call printNewLine
0494CE             0706*   
0494CE CD 60 00 04 0707*       call printInline
0494D2 79 31 20 20 0708*       asciz "y1  :"
       3A 00       
0494D8 21 00 00 00 0709*       ld hl,0 ; clear hlu
0494DC DD 6E 03    0710*       ld l,(ix+@y1-@cmd0+0)
0494DF DD 66 04    0711*       ld h,(ix+@y1-@cmd0+1)
0494E2 CD CC 00 04 0712*       call printDec
0494E6 CD 7C 00 04 0713*       call printNewLine
0494EA             0714*   
0494EA CD 60 00 04 0715*       call printInline
0494EE 78 32 20 20 0716*       asciz "x2  :"
       3A 00       
0494F4 21 00 00 00 0717*       ld hl,0 ; clear hlu
0494F8 DD 6E 0B    0718*       ld l,(ix+@x2-@cmd0+0)
0494FB DD 66 0C    0719*       ld h,(ix+@x2-@cmd0+1)
0494FE CD CC 00 04 0720*       call printDec
049502 CD 7C 00 04 0721*       call printNewLine
049506             0722*   
049506 CD 60 00 04 0723*       call printInline
04950A 58 32 20 79 0724*       asciz "X2 y2:"
       32 3A 00    
049511 21 00 00 00 0725*       ld hl,0 ; clear hlu
049515 DD 6E 0D    0726*       ld l,(ix+@y2-@cmd0+0)
049518 DD 66 0E    0727*       ld h,(ix+@y2-@cmd0+1)
04951B CD CC 00 04 0728*       call printDec
04951F C9          0729*       ret
049520 18          0730*   @cmd0:   db 24
049521 00 00       0731*   @x0: 	dw 0x0000
049523 00 00       0732*   @y1: 	dw 0x0000
049525 00 00       0733*   @x1: 	dw 0x0000
049527 00 00       0734*   @y0: 	dw 0x0000
049529             0735*   ; plot bitmap command
049529 19          0736*   @cmd1:   db 25 ; stomped on by @y0 load
04952A ED          0737*   @mode:  db plot_bmp+dr_abs_fg ; 0xED stomped on by @x2 load
04952B 00 00       0738*   @x2: 	dw 0x0000
04952D 00 00       0739*   @y2: 	dw 0x0000
04952F 00          0740*   @end:  db 0x00 ; padding
049530             0741*   ; end DEBUG_PRINT_BAR_UPDATE
049530             0742*   
049530             0743*   
049530             0744*   dump_sprite_record:
049530             0745*       ; call vdu_home_cursor
049530 CD 60 00 04 0746*       call printInline
049534 69 64 20 20 0747*       asciz "id  : "
       3A 20 00    
04953B DD 7E 00    0748*       ld a,(ix+sprite_id)
04953E CD 7F 8E 04 0749*       call printHexA
049542             0750*   
049542 CD 60 00 04 0751*       call printInline
049546 0D 0A 78 20 0752*       asciz "\r\nx   :"
       20 20 3A 00 
04954E DD 27 01    0753*       ld hl,(ix+sprite_x)
049551 CD F1 01 04 0754*       call print_s168_hl
049555             0755*   
049555 CD 60 00 04 0756*       call printInline
049559 0D 0A 79 20 0757*       asciz "\r\ny   :"
       20 20 3A 00 
049561 DD 27 04    0758*       ld hl,(ix+sprite_y)
049564 CD F1 01 04 0759*       call print_s168_hl
049568             0760*   
049568 CD 60 00 04 0761*       call printInline
04956C 0D 0A 78 76 0762*       asciz "\r\nxv  :"
       20 20 3A 00 
049574 DD 27 07    0763*       ld hl,(ix+sprite_xvel)
049577 CD F1 01 04 0764*       call print_s168_hl
04957B             0765*   
04957B CD 60 00 04 0766*       call printInline
04957F 0D 0A 79 76 0767*       asciz "\r\nyv  :"
       20 20 3A 00 
049587 DD 27 0A    0768*       ld hl,(ix+sprite_yvel)
04958A CD F1 01 04 0769*       call print_s168_hl
04958E             0770*   
04958E CD 60 00 04 0771*       call printInline
049592 0D 0A 76 20 0772*       asciz "\r\nv   :"
       20 20 3A 00 
04959A DD 27 0D    0773*       ld hl,(ix+sprite_vel)
04959D CD F1 01 04 0774*       call print_s168_hl
0495A1             0775*   
0495A1 CD 60 00 04 0776*       call printInline
0495A5 0D 0A 68 64 0777*       asciz "\r\nhdg :"
       67 20 3A 00 
0495AD DD 27 10    0778*       ld hl,(ix+sprite_heading)
0495B0 CD F1 01 04 0779*       call print_s168_hl
0495B4             0780*   
0495B4 CD 60 00 04 0781*       call printInline
0495B8 0D 0A 6F 72 0782*       asciz "\r\nori :"
       69 20 3A 00 
0495C0 DD 27 13    0783*       ld hl,(ix+sprite_orientation)
0495C3 CD F1 01 04 0784*       call print_s168_hl
0495C7             0785*   
0495C7 CD 60 00 04 0786*       call printInline
0495CB 0D 0A 74 79 0787*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
0495D4 DD 7E 16    0788*       ld a,(ix+sprite_type)
0495D7 CD 7F 8E 04 0789*       call printHexA
0495DB             0790*   
0495DB CD 60 00 04 0791*       call printInline
0495DF 0D 0A 42 49 0792*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
0495E8 DD 27 17    0793*       ld hl,(ix+sprite_base_bufferId)
0495EB CD A0 00 04 0794*       call printHex24
0495EF             0795*   
0495EF CD 60 00 04 0796*       call printInline
0495F3 0D 0A 6D 50 0797*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
0495FC DD 27 1A    0798*       ld hl,(ix+sprite_move_program)
0495FF CD A0 00 04 0799*       call printHex24
049603             0800*   
049603 CD 60 00 04 0801*       call printInline
049607 0D 0A 63 6F 0802*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
049610 DD 7E 1D    0803*       ld a,(ix+sprite_collisions)
049613 CD 6E 02 04 0804*       call printBin8
049617             0805*   
049617 CD 60 00 04 0806*       call printInline
04961B 0D 0A 73 7A 0807*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
049624 DD 7E 1E    0808*       ld a,(ix+sprite_dim_x)
049627 CD 7F 8E 04 0809*       call printHexA
04962B             0810*   
04962B CD 60 00 04 0811*       call printInline
04962F 0D 0A 73 7A 0812*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
049638 DD 7E 1F    0813*       ld a,(ix+sprite_dim_y)
04963B CD 7F 8E 04 0814*       call printHexA
04963F             0815*   
04963F CD 60 00 04 0816*       call printInline
049643 0D 0A 23 6F 0817*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
04964C DD 7E 20    0818*       ld a,(ix+sprite_num_orientations)
04964F CD 7F 8E 04 0819*       call printHexA
049653             0820*   
049653 CD 60 00 04 0821*       call printInline
049657 0D 0A 23 61 0822*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
049660 DD 7E 21    0823*       ld a,(ix+sprite_num_animations)
049663 CD 7F 8E 04 0824*       call printHexA
049667             0825*   
049667 CD 60 00 04 0826*       call printInline
04966B 0D 0A 61 6E 0827*       asciz "\r\nani : "
       69 20 3A 20 
       00          
049674 DD 7E 22    0828*       ld a,(ix+sprite_animation)
049677 CD 7F 8E 04 0829*       call printHexA
04967B             0830*   
04967B CD 60 00 04 0831*       call printInline
04967F 0D 0A 61 6E 0832*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
049688 DD 7E 23    0833*       ld a,(ix+sprite_animation_timer)
04968B CD 7F 8E 04 0834*       call printHexA
04968F             0835*   
04968F CD 60 00 04 0836*       call printInline
049693 0D 0A 6D 76 0837*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
04969C DD 7E 24    0838*       ld a,(ix+sprite_move_timer)
04969F CD 7F 8E 04 0839*       call printHexA
0496A3             0840*   
0496A3 CD 60 00 04 0841*       call printInline
0496A7 0D 0A 6D 76 0842*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
0496B0 DD 7E 25    0843*       ld a,(ix+sprite_move_step)
0496B3 CD 7F 8E 04 0844*       call printHexA
0496B7             0845*   
0496B7 CD 60 00 04 0846*       call printInline
0496BB 0D 0A 70 74 0847*       asciz "\r\npts : "
       73 20 3A 20 
       00          
0496C4 DD 7E 26    0848*       ld a,(ix+sprite_points)
0496C7 CD 7F 8E 04 0849*       call printHexA
0496CB             0850*   
0496CB CD 60 00 04 0851*       call printInline
0496CF 0D 0A 64 6D 0852*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
0496D8 DD 7E 27    0853*       ld a,(ix+sprite_shield_damage)
0496DB CD 7F 8E 04 0854*       call printHexA
0496DF             0855*   
0496DF CD 60 00 04 0856*       call printInline
0496E3 0D 0A 66 72 0857*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
0496EC DD 7E 28    0858*       ld a,(ix+sprite_frame)
0496EF CD 7F 8E 04 0859*       call printHexA
0496F3             0860*   
0496F3 CD 7C 00 04 0861*       call printNewLine
0496F7             0862*   
0496F7             0863*       ; call waitKeypress
0496F7 C9          0864*       ret
0496F8             0865*   
0496F8             0866*   dump_tile_record:
0496F8 CD 60 00 04 0867*       call printInline
0496FC 69 64 20 20 0868*       asciz "id  : "
       3A 20 00    
049703 DD 7E 00    0869*       ld a,(ix+tile_id)
049706 CD 7F 8E 04 0870*       call printHexA
04970A             0871*   
04970A CD 60 00 04 0872*       call printInline
04970E 0D 0A 78 20 0873*       asciz "\r\nx   :"
       20 20 3A 00 
049716 DD 27 01    0874*       ld hl,(ix+tile_x)
049719 CD F1 01 04 0875*       call print_s168_hl
04971D             0876*   
04971D CD 60 00 04 0877*       call printInline
049721 0D 0A 79 20 0878*       asciz "\r\ny   :"
       20 20 3A 00 
049729 DD 27 04    0879*       ld hl,(ix+tile_y)
04972C CD F1 01 04 0880*       call print_s168_hl
049730             0881*   
049730             0882*       ; call printInline
049730             0883*       ; asciz "\r\nxv  :"
049730             0884*       ; ld hl,(ix+tile_xvel)
049730             0885*       ; call print_s168_hl
049730             0886*   
049730             0887*       ; call printInline
049730             0888*       ; asciz "\r\nyv  :"
049730             0889*       ; ld hl,(ix+tile_yvel)
049730             0890*       ; call print_s168_hl
049730             0891*   
049730             0892*       ; call printInline
049730             0893*       ; asciz "\r\nv   :"
049730             0894*       ; ld hl,(ix+tile_vel)
049730             0895*       ; call print_s168_hl
049730             0896*   
049730             0897*       ; call printInline
049730             0898*       ; asciz "\r\nhdg :"
049730             0899*       ; ld hl,(ix+tile_heading)
049730             0900*       ; call print_s168_hl
049730             0901*   
049730             0902*       ; call printInline
049730             0903*       ; asciz "\r\nori :"
049730             0904*       ; ld hl,(ix+tile_orientation)
049730             0905*       ; call print_s168_hl
049730             0906*   
049730 CD 60 00 04 0907*       call printInline
049734 0D 0A 74 79 0908*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
04973D DD 7E 16    0909*       ld a,(ix+tile_type)
049740 CD 7F 8E 04 0910*       call printHexA
049744             0911*   
049744 CD 60 00 04 0912*       call printInline
049748 0D 0A 42 49 0913*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
049751 DD 27 17    0914*       ld hl,(ix+tile_base_bufferId)
049754 CD A0 00 04 0915*       call printHex24
049758             0916*   
049758 CD 60 00 04 0917*       call printInline
04975C 0D 0A 6D 50 0918*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
049765 DD 27 1A    0919*       ld hl,(ix+tile_move_program)
049768 CD A0 00 04 0920*       call printHex24
04976C             0921*   
04976C CD 60 00 04 0922*       call printInline
049770 0D 0A 63 6F 0923*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
049779 DD 7E 1D    0924*       ld a,(ix+tile_collisions)
04977C CD 6E 02 04 0925*       call printBin8
049780             0926*   
049780 CD 60 00 04 0927*       call printInline
049784 0D 0A 73 7A 0928*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
04978D DD 7E 1E    0929*       ld a,(ix+tile_dim_x)
049790 CD 7F 8E 04 0930*       call printHexA
049794             0931*   
049794 CD 60 00 04 0932*       call printInline
049798 0D 0A 73 7A 0933*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
0497A1 DD 7E 1F    0934*       ld a,(ix+tile_dim_y)
0497A4 CD 7F 8E 04 0935*       call printHexA
0497A8             0936*   
0497A8 CD 60 00 04 0937*       call printInline
0497AC 0D 0A 23 6F 0938*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
0497B5 DD 7E 20    0939*       ld a,(ix+tile_num_orientations)
0497B8 CD 7F 8E 04 0940*       call printHexA
0497BC             0941*   
0497BC CD 60 00 04 0942*       call printInline
0497C0 0D 0A 23 61 0943*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
0497C9 DD 7E 21    0944*       ld a,(ix+tile_num_animations)
0497CC CD 7F 8E 04 0945*       call printHexA
0497D0             0946*   
0497D0 CD 60 00 04 0947*       call printInline
0497D4 0D 0A 61 6E 0948*       asciz "\r\nani : "
       69 20 3A 20 
       00          
0497DD DD 7E 22    0949*       ld a,(ix+tile_animation)
0497E0 CD 7F 8E 04 0950*       call printHexA
0497E4             0951*   
0497E4 CD 60 00 04 0952*       call printInline
0497E8 0D 0A 61 6E 0953*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
0497F1 DD 7E 23    0954*       ld a,(ix+tile_animation_timer)
0497F4 CD 7F 8E 04 0955*       call printHexA
0497F8             0956*   
0497F8 CD 60 00 04 0957*       call printInline
0497FC 0D 0A 6D 76 0958*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
049805 DD 7E 24    0959*       ld a,(ix+tile_move_timer)
049808 CD 7F 8E 04 0960*       call printHexA
04980C             0961*   
04980C CD 60 00 04 0962*       call printInline
049810 0D 0A 6D 76 0963*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
049819 DD 7E 25    0964*       ld a,(ix+tile_move_step)
04981C CD 7F 8E 04 0965*       call printHexA
049820             0966*   
049820 CD 60 00 04 0967*       call printInline
049824 0D 0A 70 74 0968*       asciz "\r\npts : "
       73 20 3A 20 
       00          
04982D DD 7E 26    0969*       ld a,(ix+tile_points)
049830 CD 7F 8E 04 0970*       call printHexA
049834             0971*   
049834 CD 60 00 04 0972*       call printInline
049838 0D 0A 64 6D 0973*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
049841 DD 7E 27    0974*       ld a,(ix+tile_shield_damage)
049844 CD 7F 8E 04 0975*       call printHexA
049848             0976*   
049848 CD 60 00 04 0977*       call printInline
04984C 0D 0A 66 72 0978*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
049855 DD 7E 28    0979*       ld a,(ix+tile_frame)
049858 CD 7F 8E 04 0980*       call printHexA
04985C             0981*   
04985C CD 7C 00 04 0982*       call printNewLine
049860 CD 7C 00 04 0983*       call printNewLine
049864             0984*   
049864             0985*       ; call waitKeypress
049864 C9          0986*       ret
049865             0987*   
049865             0988*   dump_player_record:
049865 DD 21 56 9E 0989*       ld ix,player_begin
       04          
04986A             0990*   
04986A CD 60 00 04 0991*       call printInline
04986E 69 64 20 20 0992*       asciz "id  : "
       3A 20 00    
049875 DD 7E 00    0993*       ld a,(ix+sprite_id)
049878 CD 7F 8E 04 0994*       call printHexA
04987C             0995*   
04987C CD 60 00 04 0996*       call printInline
049880 0D 0A 78 20 0997*       asciz "\r\nx   :"
       20 20 3A 00 
049888 DD 27 01    0998*       ld hl,(ix+sprite_x)
04988B CD F1 01 04 0999*       call print_s168_hl
04988F             1000*   
04988F CD 60 00 04 1001*       call printInline
049893 0D 0A 79 20 1002*       asciz "\r\ny   :"
       20 20 3A 00 
04989B DD 27 04    1003*       ld hl,(ix+sprite_y)
04989E CD F1 01 04 1004*       call print_s168_hl
0498A2             1005*   
0498A2 CD 60 00 04 1006*       call printInline
0498A6 0D 0A 78 76 1007*       asciz "\r\nxv  :"
       20 20 3A 00 
0498AE DD 27 07    1008*       ld hl,(ix+sprite_xvel)
0498B1 CD F1 01 04 1009*       call print_s168_hl
0498B5             1010*   
0498B5 CD 60 00 04 1011*       call printInline
0498B9 0D 0A 79 76 1012*       asciz "\r\nyv  :"
       20 20 3A 00 
0498C1 DD 27 0A    1013*       ld hl,(ix+sprite_yvel)
0498C4 CD F1 01 04 1014*       call print_s168_hl
0498C8             1015*   
0498C8 CD 60 00 04 1016*       call printInline
0498CC 0D 0A 76 20 1017*       asciz "\r\nv   :"
       20 20 3A 00 
0498D4 DD 27 0D    1018*       ld hl,(ix+sprite_vel)
0498D7 CD F1 01 04 1019*       call print_s168_hl
0498DB             1020*   
0498DB CD 60 00 04 1021*       call printInline
0498DF 0D 0A 68 64 1022*       asciz "\r\nhdg :"
       67 20 3A 00 
0498E7 DD 27 10    1023*       ld hl,(ix+sprite_heading)
0498EA CD F1 01 04 1024*       call print_s168_hl
0498EE             1025*   
0498EE CD 60 00 04 1026*       call printInline
0498F2 0D 0A 6F 72 1027*       asciz "\r\nori :"
       69 20 3A 00 
0498FA DD 27 13    1028*       ld hl,(ix+sprite_orientation)
0498FD CD F1 01 04 1029*       call print_s168_hl
049901             1030*   
049901 CD 60 00 04 1031*       call printInline
049905 0D 0A 74 79 1032*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
04990E DD 7E 16    1033*       ld a,(ix+sprite_type)
049911 CD 7F 8E 04 1034*       call printHexA
049915             1035*   
049915 CD 60 00 04 1036*       call printInline
049919 0D 0A 42 49 1037*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
049922 DD 27 17    1038*       ld hl,(ix+sprite_base_bufferId)
049925 CD A0 00 04 1039*       call printHex24
049929             1040*   
049929 CD 60 00 04 1041*       call printInline
04992D 0D 0A 6D 50 1042*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
049936 DD 27 1A    1043*       ld hl,(ix+sprite_move_program)
049939 CD A0 00 04 1044*       call printHex24
04993D             1045*   
04993D CD 60 00 04 1046*       call printInline
049941 0D 0A 63 6F 1047*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
04994A DD 7E 1D    1048*       ld a,(ix+sprite_collisions)
04994D CD 6E 02 04 1049*       call printBin8
049951             1050*   
049951             1051*       ; call printInline
049951             1052*       ; asciz "\r\nszx : "
049951             1053*       ; ld a,(ix+sprite_dim_x)
049951             1054*       ; call printHexA
049951             1055*   
049951             1056*       ; call printInline
049951             1057*       ; asciz "\r\nszy : "
049951             1058*       ; ld a,(ix+sprite_dim_y)
049951             1059*       ; call printHexA
049951             1060*   
049951             1061*       ; call printInline
049951             1062*       ; asciz "\r\n#ori: "
049951             1063*       ; ld a,(ix+sprite_num_orientations)
049951             1064*       ; call printHexA
049951             1065*   
049951             1066*       ; call printInline
049951             1067*       ; asciz "\r\n#ani: "
049951             1068*       ; ld a,(ix+sprite_num_animations)
049951             1069*       ; call printHexA
049951             1070*   
049951             1071*       ; call printInline
049951             1072*       ; asciz "\r\nani : "
049951             1073*       ; ld a,(ix+sprite_animation)
049951             1074*       ; call printHexA
049951             1075*   
049951             1076*       ; call printInline
049951             1077*       ; asciz "\r\nanit: "
049951             1078*       ; ld a,(ix+sprite_animation_timer)
049951             1079*       ; call printHexA
049951             1080*   
049951             1081*       ; call printInline
049951             1082*       ; asciz "\r\nmvt : "
049951             1083*       ; ld a,(ix+sprite_move_timer)
049951             1084*       ; call printHexA
049951             1085*   
049951             1086*       ; call printInline
049951             1087*       ; asciz "\r\nmvs : "
049951             1088*       ; ld a,(ix+sprite_move_step)
049951             1089*       ; call printHexA
049951             1090*   
049951             1091*       ; call printInline
049951             1092*       ; asciz "\r\npts : "
049951             1093*       ; ld a,(ix+sprite_points)
049951             1094*       ; call printHexA
049951             1095*   
049951             1096*       ; call printInline
049951             1097*       ; asciz "\r\ndmg : "
049951             1098*       ; ld a,(ix+sprite_shield_damage)
049951             1099*       ; call printHexA
049951             1100*   
049951             1101*       ; call printInline
049951             1102*       ; asciz "\r\nfrm : "
049951             1103*       ; ld a,(ix+sprite_frame)
049951             1104*       ; call printHexA
049951             1105*   
049951             1106*       ; call printNewLine
049951             1107*       ; call printNewLine
049951             1108*   
049951             1109*       ; call waitKeypress
049951 C9          1110*       ret
049952             0082    
049952             0083    ; JUKEBOX INCLUDES
049952             0084        include "music.inc"
049952             0001*   ; This file is created by build_98_asm_sfx.py, do not edit it!
049952             0002*   
049952             0003*   SFX_num_buffers: equ 10
049952             0004*   sample_rate: equ 4096
049952             0005*   
049952             0006*   ; File name lookup index:
049952             0007*   SFX_filename_index:
049952 07 9A 04    0008*   	dl FN_Take_a_Ride
049955 1D 9A 04    0009*   	dl FN_Wild_Flower
049958 93 99 04    0010*   	dl FN_Barracuda
04995B DD 99 04    0011*   	dl FN_Jukebox_Hero
04995E A7 99 04    0012*   	dl FN_Come_Undone
049961 70 99 04    0013*   	dl FN_Africa
049964 81 99 04    0014*   	dl FN_Anytime
049967 BD 99 04    0015*   	dl FN_Every_Breath_You_Take
04996A F4 99 04    0016*   	dl FN_Rhiannon
04996D 33 9A 04    0017*   	dl FN_Wont_Get_Fooled_Again
049970             0018*   
049970             0019*   ; File name lookups:
049970 6D 75 73 69 0020*   FN_Africa: db "music/Africa.raw",0
       63 2F 41 66 
       72 69 63 61 
       2E 72 61 77 
       00          
049981 6D 75 73 69 0021*   FN_Anytime: db "music/Anytime.raw",0
       63 2F 41 6E 
       79 74 69 6D 
       65 2E 72 61 
       77 00       
049993 6D 75 73 69 0022*   FN_Barracuda: db "music/Barracuda.raw",0
       63 2F 42 61 
       72 72 61 63 
       75 64 61 2E 
       72 61 77 00 
0499A7 6D 75 73 69 0023*   FN_Come_Undone: db "music/Come_Undone.raw",0
       63 2F 43 6F 
       6D 65 5F 55 
       6E 64 6F 6E 
       65 2E 72 61 
       77 00       
0499BD 6D 75 73 69 0024*   FN_Every_Breath_You_Take: db "music/Every_Breath_You_Take.raw",0
       63 2F 45 76 
       65 72 79 5F 
       42 72 65 61 
       74 68 5F 59 
       6F 75 5F 54 
       61 6B 65 2E 
       72 61 77 00 
0499DD 6D 75 73 69 0025*   FN_Jukebox_Hero: db "music/Jukebox_Hero.raw",0
       63 2F 4A 75 
       6B 65 62 6F 
       78 5F 48 65 
       72 6F 2E 72 
       61 77 00    
0499F4 6D 75 73 69 0026*   FN_Rhiannon: db "music/Rhiannon.raw",0
       63 2F 52 68 
       69 61 6E 6E 
       6F 6E 2E 72 
       61 77 00    
049A07 6D 75 73 69 0027*   FN_Take_a_Ride: db "music/Take_a_Ride.raw",0
       63 2F 54 61 
       6B 65 5F 61 
       5F 52 69 64 
       65 2E 72 61 
       77 00       
049A1D 6D 75 73 69 0028*   FN_Wild_Flower: db "music/Wild_Flower.raw",0
       63 2F 57 69 
       6C 64 5F 46 
       6C 6F 77 65 
       72 2E 72 61 
       77 00       
049A33 6D 75 73 69 0029*   FN_Wont_Get_Fooled_Again: db "music/Wont_Get_Fooled_Again.raw",0
       63 2F 57 6F 
       6E 74 5F 47 
       65 74 5F 46 
       6F 6F 6C 65 
       64 5F 41 67 
       61 69 6E 2E 
       72 61 77 00 
049A53             0085        include "play.inc"
049A53             0001*   ; stream a song from the SD card
049A53             0002*   ; inputs: hl = pointer to filename
049A53             0003*   ; requirements: the file must be 8-bit signed PCM mono
049A53             0004*   ; uses: sound channels 0 and 1, buffers 0x3000 and 0x3001
049A53             0005*   ch0_buffer: equ 0x3000
049A53             0006*   ch1_buffer: equ 0x3001
049A53             0007*   cmd0_buffer: equ 0x3002
049A53             0008*   cmd1_buffer: equ 0x3003
049A53 00 00 00    0009*   current_song: dl 0 ; pointer to current song filename
049A56             0010*   play_song:
049A56 22 53 9A 04 0011*       ld (current_song),hl
049A5A             0012*   ; stop the PRT timer
049A5A CD B5 9C 04 0013*       call ps_prt_stop
049A5E             0014*   ; ; tell the user what they've won
049A5E             0015*   ;     ld hl,(current_song)
049A5E             0016*   ;     call printInline
049A5E             0017*   ;     asciz "Playing song: "
049A5E             0018*   ;     ld hl,(current_song)
049A5E             0019*   ;     call printString ; print the song filename
049A5E             0020*   ;     call printNewLine
049A5E             0021*   ; open the file in read mode
049A5E             0022*   ; Open a file
049A5E             0023*   ; HLU: Filename
049A5E             0024*   ;   C: Mode
049A5E             0025*   ; Returns:
049A5E             0026*   ;   A: Filehandle, or 0 if couldn't open
049A5E             0027*       ; ld hl,(current_song)
049A5E 0E 01       0028*   	ld c,fa_read
049A60             0029*       MOSCALL mos_fopen
049A60 3E 0A       0001*M1 			LD	A, function
049A62 5B CF       0002*M1 			RST.LIL	08h
049A64 32 10 9B 04 0030*       ld (ps_filehandle),a
049A68             0031*   ; read the first block of data
049A68 CD 72 9A 04 0032*       call ps_read_file
049A6C             0033*   ; enable interrupts and start the PRT timer
049A6C FB          0034*       ei
049A6D CD 98 9C 04 0035*       call ps_prt_start
049A71 C9          0036*       ret
049A72             0037*   ; end play_song
049A72             0038*   
049A72             0039*   ; read the next 1-second's worth of sound data from the file
049A72             0040*   ; and upload it to the sample buffer
049A72             0041*   ps_read_file:
049A72             0042*   ; disable interrupts so load is guaranteed to complete
049A72 F3          0043*       di
049A73             0044*   ; ; DEBUG
049A73             0045*   ;     ld a,'.'
049A73             0046*   ;     rst.lil 10h
049A73             0047*   ; ; END DEBUG
049A73             0048*   ; Read a block of data from a file
049A73             0049*   ;   C: Filehandle
049A73             0050*   ; HLU: Pointer to where to write the data to
049A73             0051*   ; DEU: Number of bytes to read
049A73             0052*   ; Returns:
049A73             0053*   ; DEU: Number of bytes read
049A73 3A 10 9B 04 0054*       ld a,(ps_filehandle)
049A77 4F          0055*       ld c,a
049A78 21 56 E2 04 0056*       ld hl,song_data
049A7C 11 00 10 00 0057*       ld de,sample_rate
049A80             0058*       MOSCALL mos_fread
049A80 3E 1A       0001*M1 			LD	A, function
049A82 5B CF       0002*M1 			RST.LIL	08h
049A84             0059*   ; test de for zero bytes read
049A84 21 00 00 00 0060*       ld hl,0
049A88 AF          0061*       xor a ; clear carry
049A89 ED 52       0062*       sbc hl,de ; hl = 0-chunksize
049A8B C2 9D 9A 04 0063*       jp nz,@load ; we read some data
049A8F             0064*   ; no data read so close file and play a random song
049A8F 3E 80       0065*       ld a,%10000000 ; wait a second to let the final sample play
049A91 CD DA 12 04 0066*       call multiPurposeDelay
049A95 CD D8 9A 04 0067*       call ps_close_file
049A99 C3 E5 9A 04 0068*       jp ps_play_random
049A9D             0069*   ; load a vdu buffer from local memory
049A9D             0070*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
049A9D             0071*   @load:
049A9D 3A 09 9B 04 0072*       ld a,(ps_channel)
049AA1 3C          0073*       inc a
049AA2 E6 01       0074*       and 1
049AA4 32 09 9B 04 0075*       ld (ps_channel),a
049AA8 21 00 30 00 0076*       ld hl,ch0_buffer
049AAC 6F          0077*       ld l,a
049AAD 22 0D 9B 04 0078*       ld (ps_sampleId),hl
049AB1 CD FA 16 04 0079*       call vdu_clear_buffer
049AB5 2A 0D 9B 04 0080*       ld hl,(ps_sampleId)
049AB9 D5          0081*       push de ; chunksize
049ABA C1          0082*       pop bc ; how much data to load
049ABB 11 56 E2 04 0083*       ld de,song_data ; pointer to data
049ABF CD E5 14 04 0084*       call vdu_load_buffer
049AC3 C9          0085*       ret
049AC4             0086*   ; end ps_read_file
049AC4             0087*   
049AC4             0088*   ; this is called by the PRT timer interrupt
049AC4             0089*   ps_play_sample:
049AC4             0090*   ; call the command buffer to play the sound
049AC4 2A 0D 9B 04 0091*       ld hl,(ps_sampleId)
049AC8 2C          0092*       inc l
049AC9 2C          0093*       inc l
049ACA 22 0A 9B 04 0094*       ld (ps_cmdId),hl ; TODO: perhaps not needed
049ACE CD DF 16 04 0095*       call vdu_call_buffer
049AD2             0096*   ; load the next chunk of data
049AD2 CD 72 9A 04 0097*       call ps_read_file
049AD6             0098*   ; reenable interrupts and return to the user input loop
049AD6 FB          0099*       ei
049AD7 C9          0100*       ret
049AD8             0101*   ; end ps_play_sample
049AD8             0102*   
049AD8             0103*   ; close the file
049AD8             0104*   ps_close_file:
049AD8 CD B5 9C 04 0105*       call ps_prt_stop ; stop the PRT timer
049ADC 3A 10 9B 04 0106*       ld a,(ps_filehandle)
049AE0             0107*       MOSCALL mos_fclose
049AE0 3E 0B       0001*M1 			LD	A, function
049AE2 5B CF       0002*M1 			RST.LIL	08h
049AE4 C9          0108*       ret
049AE5             0109*   ; end ps_close_file
049AE5             0110*   
049AE5             0111*   ; queue a random song to play next
049AE5             0112*   ps_play_random:
049AE5 CD 18 05 04 0113*       call rand_8 ; a = 0-255
049AE9 E6 07       0114*       and 7 ; mod 8
049AEB 57          0115*       ld d,a
049AEC 1E 03       0116*       ld e,3 ; three bytes per filename index
049AEE ED 5C       0117*       mlt de ; index into the filename table
049AF0 21 52 99 04 0118*       ld hl,SFX_filename_index
049AF4 19          0119*       add hl,de ; hl points to the filename index
049AF5 ED 27       0120*       ld hl,(hl) ; hl points to the filename
049AF7 EB          0121*       ex de,hl ; setting up cp hl,de
049AF8 2A 53 9A 04 0122*       ld hl,(current_song) ; don't play the same song twice in a row
049AFC B7          0123*       or a ; clear carry
049AFD ED 52       0124*       sbc hl,de
049AFF CA E5 9A 04 0125*       jp z,ps_play_random ; same song, try again
049B03 EB          0126*       ex de,hl ; pointer back to hl
049B04 CD 56 9A 04 0127*       call play_song ; hit it
049B08 C9          0128*       ret
049B09             0129*   ; end ps_play_random
049B09             0130*   
049B09             0131*   ; current active channel and bufferId's
049B09 00          0132*   ps_channel: db 0 ; channel number
049B0A 00 00 00    0133*   ps_cmdId: dl 0 ; command bufferId
049B0D 00 00 00    0134*   ps_sampleId: dl 0 ; sample bufferId
049B10             0135*   
049B10             0136*   ; song file info
049B10 00          0137*   ps_filehandle: db 0 ; file handle
049B11 00 00 00    0138*   ps_fil: dl 0 ; pointer to FIL struct
049B14 00 00 00    0139*   ps_chunkpointer: dl 0 ; pointer to current chunk
049B17             0140*   ; File information structure (FILINFO)
049B17             0141*   ps_filinfo:
049B17 00 00 00 00 0142*   ps_filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
049B1B 00 00       0143*   ps_filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
049B1D 00 00       0144*   ps_filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
049B1F 00          0145*   ps_filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
049B20 00 00 00 00 0146*   ps_filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
049B2D 00 00 00 00 0147*   ps_filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
049C2D             0148*   ; end play_song
049C2D             0149*   
049C2D             0150*   load_command_buffer:
049C2D 21 02 30 00 0151*       ld hl,cmd0_buffer
049C31 CD FA 16 04 0152*       call vdu_clear_buffer
049C35 21 02 30 00 0153*       ld hl,cmd0_buffer
049C39 01 1D 00 00 0154*       ld bc,ps_cmd0_end-ps_cmd0
049C3D 11 5E 9C 04 0155*       ld de,ps_cmd0
049C41 CD B7 16 04 0156*       call vdu_write_block_to_buffer
049C45             0157*   
049C45 21 03 30 00 0158*       ld hl,cmd1_buffer
049C49 CD FA 16 04 0159*       call vdu_clear_buffer
049C4D 21 03 30 00 0160*       ld hl,cmd1_buffer
049C51 01 1D 00 00 0161*       ld bc,ps_cmd1_end-ps_cmd1
049C55 11 7B 9C 04 0162*       ld de,ps_cmd1
049C59 CD B7 16 04 0163*       call vdu_write_block_to_buffer
049C5D C9          0164*       ret
049C5E             0165*   ps_cmd0:
049C5E             0166*   ; vdu_buffer_to_sound command string
049C5E             0167*   ; Command 5: Buffer to sound
049C5E             0168*   ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
049C5E 17 00 85    0169*       db 23,0,0x85 ; vdu sound command header
049C61 00          0170*       db 0x00 ; channel (ignored)
049C62 05          0171*       db 0x05 ; buffer to sound command
049C63 02          0172*       db 0x02 ; command 2 create sample
049C64 00 30       0173*       dw ch0_buffer
049C66 08          0174*       db 0+8 ; 0 = 8-bit signed PCM mono, 8 = sample rate argument follows
049C67 00 10       0175*       dw sample_rate ; Hz
049C69             0176*   ; vdu_play_sfx command string
049C69             0177*   ; Command 4: Set waveform
049C69             0178*   ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
049C69 17 00 85    0179*       db 23,0,$85 ; vdu sound command header
049C6C 00          0180*       db 0 ; channel
049C6D 04          0181*       db 4 ; set waveform command
049C6E 08          0182*       db 8 ; waveform 8 = sample
049C6F 00 30       0183*       dw ch0_buffer ; sample bufferId
049C71             0184*   ; Command 0: Play note
049C71             0185*   ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
049C71 17 00 85    0186*       db 23,0,$85 ; vdu sound command header
049C74 00          0187*       db 0 ; channel
049C75 00          0188*       db 0 ; play note command
049C76 7F          0189*       db 127  ; volume 127 = max
049C77 00 00       0190*       dw 0 ; frequency (relevant only for tuneable samples)
049C79 00 00       0191*       dw 0 ; duration (ms), zero means play one time in full
049C7B             0192*   ps_cmd0_end:
049C7B             0193*   
049C7B             0194*   ps_cmd1:
049C7B             0195*   ; vdu_buffer_to_sound command string
049C7B             0196*   ; Command 5: Buffer to sound
049C7B             0197*   ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
049C7B 17 00 85    0198*       db 23,0,0x85 ; vdu sound command header
049C7E 00          0199*       db 0x00 ; channel (ignored)
049C7F 05          0200*       db 0x05 ; buffer to sound command
049C80 02          0201*       db 0x02 ; command 2 create sample
049C81 01 30       0202*       dw ch1_buffer
049C83 08          0203*       db 0+8 ; 0 = 8-bit signed PCM mono, 8 = sample rate argument follows
049C84 00 10       0204*       dw sample_rate ; Hz
049C86             0205*   ; vdu_play_sfx command string
049C86             0206*   ; Command 4: Set waveform
049C86             0207*   ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
049C86 17 00 85    0208*       db 23,0,$85 ; vdu sound command header
049C89 01          0209*       db 1 ; channel
049C8A 04          0210*       db 4 ; set waveform command
049C8B 08          0211*       db 8 ; waveform 8 = sample
049C8C 01 30       0212*       dw ch1_buffer ; sample bufferId
049C8E             0213*   ; Command 0: Play note
049C8E             0214*   ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
049C8E 17 00 85    0215*       db 23,0,$85 ; vdu sound command header
049C91 01          0216*       db 1 ; channel
049C92 00          0217*       db 0 ; play note command
049C93 7F          0218*       db 127  ; volume 127 = max
049C94 00 00       0219*       dw 0 ; frequency (relevant only for tuneable samples)
049C96 00 00       0220*       dw 0 ; duration (ms), zero means play one time in full
049C98             0221*   ps_cmd1_end:
049C98             0222*   ; end load_command_buffers
049C98             0223*   
049C98             0086        include "timer_jukebox.inc"
049C98             0001*   ps_prt_reload: equ [72000/2]+1 ; 2 ticks per second at 18.432 MHz with a 256 clock divider
049C98             0002*   
049C98             0003*   ; start PRT timer
049C98             0004*   ps_prt_start:
049C98 21 00 00 00 0005*       ld hl,0
049C9C 22 D7 9C 04 0006*       ld (ps_prt_irq_counter),hl
049CA0 21 A1 8C 00 0007*       ld hl,ps_prt_reload
049CA4 ED 29 84    0008*       out0 (TMR1_CTL+TMR_RES_LOW),l
049CA7 ED 21 85    0009*   	out0 (TMR1_CTL+TMR_RES_HIGH),h
049CAA             0010*   ; disable timer (in effect, reset it)
049CAA 3E 0E       0011*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_256 | RST_EN_1 | PRT_EN_0
049CAC ED 39 83    0012*   	out0 (TMR1_CTL+TMR_REG_CTL),a
049CAF             0013*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 256
049CAF 3E 5F       0014*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_256 | RST_EN_1 | PRT_EN_1
049CB1 ED 39 83    0015*   	out0 (TMR1_CTL+TMR_REG_CTL),a
049CB4 C9          0016*       ret
049CB5             0017*   
049CB5             0018*   ; stop PRT timer
049CB5             0019*   ps_prt_stop:
049CB5 3E 0E       0020*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_256 | RST_EN_1 | PRT_EN_0
049CB7 ED 39 83    0021*   	out0 (TMR1_CTL+TMR_REG_CTL),a
049CBA C9          0022*       ret
049CBB             0023*   
049CBB             0024*   ; ===============================================
049CBB             0025*   ; PRT Timer Interrupt Handling
049CBB             0026*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
049CBB             0027*   ; -----------------------------------------------
049CBB             0028*   ps_prt_irq_init:
049CBB             0029*       ; set up interrupt vector table 2
049CBB 21 00 00 00 0030*   	ld hl,0
049CBF 3A 0C 01 00 0031*   	ld a,($10c)
049CC3 6F          0032*   	ld l,a
049CC4 3A 0D 01 00 0033*   	ld a,($10d)
049CC8 67          0034*   	ld h,a
049CC9             0035*   
049CC9             0036*   	; skip over CALL ($c3)
049CC9 23          0037*   	inc hl
049CCA             0038*   	; load address of jump into vector table 2 (in ram)
049CCA ED 27       0039*   	ld hl,(hl)
049CCC             0040*   
049CCC             0041*   	; write CALL ps_prt_irq_handler to vector table 2
049CCC 3E C3       0042*   	ld a,$c3
049CCE 77          0043*   	ld (hl),a
049CCF 23          0044*   	inc hl
049CD0 11 D8 9C 04 0045*   	ld de,ps_prt_irq_handler
049CD4 ED 1F       0046*   	ld (hl),de
049CD6             0047*   
049CD6 C9          0048*       ret
049CD7             0049*   ; end ps_prt_irq_init
049CD7             0050*   
049CD7             0051*   ; interrupt routine for playing the next sample
049CD7             0052*   ps_prt_irq_counter:
049CD7 00          0053*   	db 0
049CD8             0054*   ps_prt_irq_handler:
049CD8 F3          0055*   	di
049CD9 08          0056*   	ex af,af'
049CDA D9          0057*       exx
049CDB DD E5       0058*   	push ix
049CDD FD E5       0059*   	push iy
049CDF ED 38 83    0060*   	in0 a,(TMR1_CTL+TMR_REG_CTL)
049CE2 3A D7 9C 04 0061*       ld a,(ps_prt_irq_counter)
049CE6 3C          0062*       inc a
049CE7 E6 01       0063*       and 1 ; modulo 2
049CE9 32 D7 9C 04 0064*       ld (ps_prt_irq_counter),a
049CED CC C4 9A 04 0065*       call z,ps_play_sample
049CF1 FD E1       0066*   	pop iy
049CF3 DD E1       0067*   	pop ix
049CF5 D9          0068*       exx
049CF6 08          0069*       ex af,af'
049CF7 FB          0070*   	ei
049CF8 5B ED 4D    0071*   	reti.l
049CFB             0072*   ; end ps_prt_irq_handler
049CFB             0087    
049CFB             0088    ; --- MAIN PROGRAM FILE ---
049CFB             0089    init:
049CFB             0090    ; load play sample command buffers
049CFB CD 2D 9C 04 0091        call load_command_buffer
049CFF             0092    ; initialize play sample timer interrupt handler
049CFF CD BB 9C 04 0093        call ps_prt_irq_init
049D03 C9          0094        ret
049D04             0095    ; end init
049D04             0096    
049D04             0097    main:
049D04             0098    ; start a new game
049D04 21 8B 82 04 0099        ld hl,game_init
049D08 22 99 81 04 0100        ld (game_state),hl
049D0C             0101    main_loop:
049D0C             0102    ; update the global timestamp
049D0C CD 81 12 04 0103        call timestamp_tick
049D10             0104    ; do gamestate logic
049D10 CD 9C 81 04 0105        call do_game
049D14             0106    ; wait for the next vblank mitigate flicker and for loop timing
049D14 CD B9 13 04 0107        call vdu_vblank
049D18             0108    ; poll keyboard for escape keypress
049D18 3E 08       0109        ld a, $08 ; code to send to MOS
049D1A 5B CF       0110        rst.lil $08 ; get IX pointer to System Variables
049D1C DD 7E 05    0111        ld a, (ix + $05) ; get ASCII code of key pressed
049D1F FE 1B       0112        cp 27 ; check if 27 (ascii code for ESC)
049D21 CA 29 9D 04 0113        jp z, main_end ; if pressed, jump to exit
049D25             0114    ; escape not pressed so loop
049D25 C3 0C 9D 04 0115        jp main_loop
049D29             0116    
049D29             0117    main_end:
049D29             0118    ; restore original screen mode
049D29 3A 8A 82 04 0119        ld a,(original_screen_mode)
049D2D CD 0E 14 04 0120        call vdu_set_screen_mode
049D31             0121    ; print thanks for playing message
049D31 CD 60 00 04 0122        call printInline
049D35 54 68 61 6E 0123        asciz "Thank you for playing\r\n"
       6B 20 79 6F 
       75 20 66 6F 
       72 20 70 6C 
       61 79 69 6E 
       67 0D 0A 00 
049D4D 21 45 1A 04 0124        ld hl,purple_nurples_ascii
049D51 CD 67 00 04 0125        call printString
049D55 C9          0126        ret
049D56             0127    ; end main
049D56             0128    
049D56             0129    ; needs to be the final include to leave room for the sprite and tile tables
049D56             0130        include "tables.inc"
049D56             0001*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
049D56             0002*   table_base: equ $
049D56             0003*   player_weapons_begin: equ table_base
049D56             0004*   player_lasers_begin: equ player_weapons_begin
049D56             0005*   player_lasers_end: equ table_record_size*player_lasers_max+player_lasers_begin
049D56             0006*   player_weapons_end: equ table_record_size*player_lasers_max+player_weapons_begin
049D56             0007*   player_begin: equ player_weapons_end
049D56             0008*   player_end: equ table_record_size+player_begin
049D56             0009*   enemy_sprites_begin: equ player_end
049D56             0010*   seekers_base: equ enemy_sprites_begin
049D56             0011*   seeker_min_sprite_id: equ [seekers_base-table_base]/table_record_size
049D56             0012*   seekers_end: equ table_record_size*seekers_max+seekers_base
049D56             0013*   fireballs_base: equ seekers_end
049D56             0014*   fireballs_end: equ table_record_size*fireballs_max+fireballs_base
049D56             0015*   enemy_sprites_end: equ fireballs_end
049D56             0016*   explosions_base: equ enemy_sprites_end
049D56             0017*   explosions_end: equ table_record_size*explosions_max+explosions_base
049D56             0018*   table_end: equ explosions_end
049D56             0019*   
049D56             0020*   table_num_records: equ table_end-table_base/table_record_size
049D56             0021*   table_num_enemy_records: equ enemy_sprites_end-enemy_sprites_begin/table_record_size
049D56             0022*   
049D56             0023*   ; ### THIS IS THE SPACE ALLOCATED TO THE ACTIVE TILES TABLE ###
049D56             0024*   tile_table_base: equ table_end
049D56             0025*   tile_table_end: equ 256*tile_table_record_size+tile_table_base
049D56             0026*   
049D56             0027*   ; ### THIS IS THE SPACE ALLOCATED TO JUKEBOX SONG DATA ###
049D56             0028*   song_data: equ tile_table_end

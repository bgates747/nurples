PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C             0015    
04004C CD 00 91 04 0016        call main
040050             0017    
040050             0018    exit:
040050 FD E1       0019        pop iy
040052 DD E1       0020        pop ix
040054 D1          0021        pop de
040055 C1          0022        pop bc
040056 F1          0023        pop af
040057 21 00 00 00 0024        ld hl,0
04005B             0025    
04005B C9          0026        ret
04005C             0027    
04005C             0028    ; API INCLUDES
04005C             0029        include "mos_api.inc"
04005C             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
04005C             0002*   ; Title:	AGON MOS - API for user projects
04005C             0003*   ; Author:	Dean Belfield
04005C             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
04005C             0005*   ;			Added MOS error codes for return in HL
04005C             0006*   ; Created:	03/08/2022
04005C             0007*   ; Last Updated:	10/08/2023
04005C             0008*   ;
04005C             0009*   ; Modinfo:
04005C             0010*   ; 05/08/2022:	Added mos_feof
04005C             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
04005C             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
04005C             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
04005C             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
04005C             0015*   ; 13/10/2022:	Added mos_oscli
04005C             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
04005C             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
04005C             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
04005C             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
04005C             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
04005C             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
04005C             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
04005C             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
04005C             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
04005C             0025*   ; 19/05/2023:	Added sysvar_scrMode
04005C             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
04005C             0027*   ; 03/08/2023:	Added mos_setkbvector
04005C             0028*   ; 10/08/2023:	Added mos_getkbmap
04005C             0029*   
04005C             0030*   ; VDP control (VDU 23, 0, n)
04005C             0031*   ;
04005C             0032*   vdp_gp:				EQU 80h
04005C             0033*   vdp_keycode:		EQU 81h
04005C             0034*   vdp_cursor:			EQU	82h
04005C             0035*   vdp_scrchar:		EQU	83h
04005C             0036*   vdp_scrpixel:		EQU	84h
04005C             0037*   vdp_audio:			EQU	85h
04005C             0038*   vdp_mode:			EQU	86h
04005C             0039*   vdp_rtc:			EQU	87h
04005C             0040*   vdp_keystate:		EQU	88h
04005C             0041*   vdp_logicalcoords:	EQU	C0h
04005C             0042*   vdp_terminalmode:	EQU	FFh
04005C             0043*   
04005C             0044*   ; MOS high level functions
04005C             0045*   ;
04005C             0046*   mos_getkey:			EQU	00h
04005C             0047*   mos_load:			EQU	01h
04005C             0048*   mos_save:			EQU	02h
04005C             0049*   mos_cd:				EQU	03h
04005C             0050*   mos_dir:			EQU	04h
04005C             0051*   mos_del:			EQU	05h
04005C             0052*   mos_ren:			EQU	06h
04005C             0053*   mos_mkdir:			EQU	07h
04005C             0054*   mos_sysvars:		EQU	08h
04005C             0055*   mos_editline:		EQU	09h
04005C             0056*   mos_fopen:			EQU	0Ah
04005C             0057*   mos_fclose:			EQU	0Bh
04005C             0058*   mos_fgetc:			EQU	0Ch
04005C             0059*   mos_fputc:			EQU	0Dh
04005C             0060*   mos_feof:			EQU	0Eh
04005C             0061*   mos_getError:		EQU	0Fh
04005C             0062*   mos_oscli:			EQU	10h
04005C             0063*   mos_copy:			EQU	11h
04005C             0064*   mos_getrtc:			EQU	12h
04005C             0065*   mos_setrtc:			EQU	13h
04005C             0066*   mos_setintvector:	EQU	14h
04005C             0067*   mos_uopen:			EQU	15h
04005C             0068*   mos_uclose:			EQU	16h
04005C             0069*   mos_ugetc:			EQU	17h
04005C             0070*   mos_uputc:			EQU	18h
04005C             0071*   mos_getfil:			EQU	19h
04005C             0072*   mos_fread:			EQU	1Ah
04005C             0073*   mos_fwrite:			EQU	1Bh
04005C             0074*   mos_flseek:			EQU	1Ch
04005C             0075*   mos_setkbvector:	EQU	1Dh
04005C             0076*   mos_getkbmap:		EQU	1Eh
04005C             0077*   
04005C             0078*   ; MOS program exit codes
04005C             0079*   ;
04005C             0080*   EXIT_OK:				EQU  0;	"OK",
04005C             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
04005C             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
04005C             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
04005C             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
04005C             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
04005C             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
04005C             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
04005C             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
04005C             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
04005C             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
04005C             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
04005C             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
04005C             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
04005C             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
04005C             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
04005C             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
04005C             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
04005C             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
04005C             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
04005C             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
04005C             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
04005C             0102*   ; FatFS file access functions
04005C             0103*   ;
04005C             0104*   ffs_fopen:			EQU	80h
04005C             0105*   ffs_fclose:			EQU	81h
04005C             0106*   ffs_fread:			EQU	82h
04005C             0107*   ffs_fwrite:			EQU	83h
04005C             0108*   ffs_flseek:			EQU	84h
04005C             0109*   ffs_ftruncate:		EQU	85h
04005C             0110*   ffs_fsync:			EQU	86h
04005C             0111*   ffs_fforward:		EQU	87h
04005C             0112*   ffs_fexpand:		EQU	88h
04005C             0113*   ffs_fgets:			EQU	89h
04005C             0114*   ffs_fputc:			EQU	8Ah
04005C             0115*   ffs_fputs:			EQU	8Bh
04005C             0116*   ffs_fprintf:		EQU	8Ch
04005C             0117*   ffs_ftell:			EQU	8Dh
04005C             0118*   ffs_feof:			EQU	8Eh
04005C             0119*   ffs_fsize:			EQU	8Fh
04005C             0120*   ffs_ferror:			EQU	90h
04005C             0121*   
04005C             0122*   ; FatFS directory access functions
04005C             0123*   ;
04005C             0124*   ffs_dopen:			EQU	91h
04005C             0125*   ffs_dclose:			EQU	92h
04005C             0126*   ffs_dread:			EQU	93h
04005C             0127*   ffs_dfindfirst:		EQU	94h
04005C             0128*   ffs_dfindnext:		EQU	95h
04005C             0129*   
04005C             0130*   ; FatFS file and directory management functions
04005C             0131*   ;
04005C             0132*   ffs_stat:			EQU	96h
04005C             0133*   ffs_unlink:			EQU	97h
04005C             0134*   ffs_rename:			EQU	98h
04005C             0135*   ffs_chmod:			EQU	99h
04005C             0136*   ffs_utime:			EQU	9Ah
04005C             0137*   ffs_mkdir:			EQU	9Bh
04005C             0138*   ffs_chdir:			EQU	9Ch
04005C             0139*   ffs_chdrive:		EQU	9Dh
04005C             0140*   ffs_getcwd:			EQU	9Eh
04005C             0141*   
04005C             0142*   ; FatFS volume management and system configuration functions
04005C             0143*   ;
04005C             0144*   ffs_mount:			EQU	9Fh
04005C             0145*   ffs_mkfs:			EQU	A0h
04005C             0146*   ffs_fdisk:			EQU	A1h
04005C             0147*   ffs_getfree:		EQU	A2h
04005C             0148*   ffs_getlabel:		EQU	A3h
04005C             0149*   ffs_setlabel:		EQU	A4h
04005C             0150*   ffs_setcp:			EQU	A5h
04005C             0151*   
04005C             0152*   ; File access modes
04005C             0153*   ;
04005C             0154*   fa_read:			EQU	01h
04005C             0155*   fa_write:			EQU	02h
04005C             0156*   fa_open_existing:	EQU	00h
04005C             0157*   fa_create_new:		EQU	04h
04005C             0158*   fa_create_always:	EQU	08h
04005C             0159*   fa_open_always:		EQU	10h
04005C             0160*   fa_open_append:		EQU	30h
04005C             0161*   
04005C             0162*   ; System variable indexes for api_sysvars
04005C             0163*   ; Index into _sysvars in globals.inc
04005C             0164*   ;
04005C             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
04005C             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
04005C             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
04005C             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
04005C             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
04005C             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
04005C             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
04005C             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
04005C             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
04005C             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
04005C             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
04005C             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
04005C             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
04005C             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
04005C             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
04005C             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
04005C             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
04005C             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
04005C             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
04005C             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
04005C             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
04005C             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
04005C             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
04005C             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
04005C             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
04005C             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
04005C             0191*   
04005C             0192*   ; Flags for the VPD protocol
04005C             0193*   ;
04005C             0194*   vdp_pflag_cursor:		EQU	00000001b
04005C             0195*   vdp_pflag_scrchar:		EQU	00000010b
04005C             0196*   vdp_pflag_point:		EQU	00000100b
04005C             0197*   vdp_pflag_audio:		EQU	00001000b
04005C             0198*   vdp_pflag_mode:			EQU	00010000b
04005C             0199*   vdp_pflag_rtc:			EQU	00100000b
04005C             0200*   
04005C             0201*   ;
04005C             0202*   ; FatFS structures
04005C             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
04005C             0204*   ;
04005C             0205*   ; Object ID and allocation information (FFOBJID)
04005C             0206*   ;
04005C             0207*   ; Indexes into FFOBJID structure
04005C             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
04005C             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
04005C             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
04005C             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
04005C             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
04005C             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
04005C             0214*   ;
04005C             0215*   ; File object structure (FIL)
04005C             0216*   ;
04005C             0217*   ; Indexes into FIL structure
04005C             0218*   fil_obj:		EQU 0	; 15: Object identifier
04005C             0219*   fil_flag:		EQU	15 	;  1: File status flags
04005C             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
04005C             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
04005C             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
04005C             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
04005C             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
04005C             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
04005C             0226*   ;
04005C             0227*   ; Directory object structure (DIR)
04005C             0228*   ; Indexes into DIR structure
04005C             0229*   dir_obj:		EQU  0	; 15: Object identifier
04005C             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
04005C             0231*   dir_clust:		EQU	19	;  4: Current cluster
04005C             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
04005C             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
04005C             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
04005C             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
04005C             0236*   ;
04005C             0237*   ; File information structure (FILINFO)
04005C             0238*   ;
04005C             0239*   ; Indexes into FILINFO structure
04005C             0240*   filinfo_fsize:		EQU 0	;   4: File size
04005C             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
04005C             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
04005C             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
04005C             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
04005C             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
04005C             0246*   ;
04005C             0247*   ; Macro for calling the API
04005C             0248*   ; Parameters:
04005C             0249*   ; - function: One of the function numbers listed above
04005C             0250*   ;
04005C             0251*   	MACRO	MOSCALL	function
04005C             0252*   			LD	A, function
04005C             0253*   			RST.LIL	08h
04005C             0254*   	ENDMACRO
04005C             0030        include "macros.inc"
04005C             0001*   
04005C             0002*   ; test the sign of HL
04005C             0003*   ; inputs: HL obviously
04005C             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
04005C             0005*   ; destroys: flags
04005C             0006*       MACRO SIGN_HLU
04005C             0007*       add hl,de ; 1 cycle
04005C             0008*       or a ; clear flags ; 1 cycle
04005C             0009*       sbc hl,de ; 2 cycles
04005C             0010*       ; 4 cycles total
04005C             0011*       ENDMACRO
04005C             0012*   
04005C             0013*   ; put the value in A into HLU
04005C             0014*   ; affects: HLU
04005C             0015*   ; destroys: nothing
04005C             0016*   ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
04005C             0017*       MACRO A_TO_HLU
04005C             0018*       xor a ; 1 cycle
04005C             0019*       ld ($+8+1),hl ; 7 cycles
04005C             0020*       ld ($+4+3),a ; 5 cycles
04005C             0021*       ld hl,0x000000 ; 4 cycles
04005C             0022*       ; 17 cycles total
04005C             0023*       ENDMACRO
04005C             0024*   
04005C             0025*   ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
04005C             0026*   ; one cycle less but burns flags
04005C             0027*       MACRO A_TO_HLU_ALT
04005C             0028*       push hl ; 4 cycles
04005C             0029*       ld hl,2 ; 4 cycles
04005C             0030*       add hl,sp ; 1 cycle
04005C             0031*       ld (hl),a ; 2 cycles
04005C             0032*       pop hl ; 4 cycles
04005C             0033*       ; 15 cycles total
04005C             0034*       ENDMACRO
04005C             0035*   
04005C             0036*       MACRO hlu_mul256
04005C             0037*       add hl,hl ; * 2
04005C             0038*       add hl,hl ; * 4
04005C             0039*       add hl,hl ; * 8
04005C             0040*       add hl,hl ; * 16
04005C             0041*       add hl,hl ; * 32
04005C             0042*       add hl,hl ; * 64
04005C             0043*       add hl,hl ; * 128
04005C             0044*       add hl,hl ; * 256
04005C             0045*       ENDMACRO
04005C             0046*   
04005C             0047*   ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
04005C             0048*       MACRO SRL_UHL
04005C             0049*       dec sp ; 1 cycle
04005C             0050*       push hl ; 4 cycles
04005C             0051*       inc sp ; 1 cycle
04005C             0052*       pop hl ; 4 cycles
04005C             0053*       inc hl ; 1 cycle
04005C             0054*       dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04005C             0055*       ; 13 cycles total
04005C             0056*       ENDMACRO
04005C             0057*   
04005C             0058*       MACRO printChar char
04005C             0059*       LD A, char
04005C             0060*       RST.LIL 10h
04005C             0061*       ENDMACRO
04005C             0062*   
04005C             0063*   ; Simulated call to subroutine at HL
04005C             0064*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
04005C             0065*   ; outputs: whatever the subroutine does, including HL and BC
04005C             0066*   ; destroys: only what the subroutine does, but always BC
04005C             0067*       MACRO CALL_HL
04005C             0068*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0069*       push bc ; which constitutes the return address
04005C             0070*       jp (hl) ; Jump to the address in HL
04005C             0071*       ENDMACRO
04005C             0072*   
04005C             0073*   ; Simulated call to subroutine at IX
04005C             0074*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
04005C             0075*   ; outputs: whatever the subroutine does, including IX and BC
04005C             0076*   ; destroys: only what the subroutine does, but always BC
04005C             0077*       MACRO CALL_IX
04005C             0078*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0079*       push bc ; which constitutes the return address
04005C             0080*       jp (ix) ; Jump to the address in IX
04005C             0081*       ENDMACRO
04005C             0082*   
04005C             0083*   ; Simulated call to soubroutinte at IY
04005C             0084*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
04005C             0085*   ; outputs: whatever the subroutine does, including IY and BC
04005C             0086*   ; destroys: only what the subroutine does, but always BC
04005C             0087*       MACRO CALL_IY
04005C             0088*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0089*       push bc ; which constitutes the return address
04005C             0090*       jp (iy) ; Jump to the address in IY
04005C             0091*       ENDMACRO
04005C             0092*   
04005C             0093*   ; put the value in HLU into A
04005C             0094*   ; destroys: af
04005C             0095*       MACRO HLU_TO_A
04005C             0096*       dec sp ; 1 cycle
04005C             0097*       push hl ; 4 cycles
04005C             0098*       inc sp ; 1 cycle
04005C             0099*       pop af ; 4 cycles
04005C             0100*       ; 10 cycles total
04005C             0101*       ENDMACRO
04005C             0102*   
04005C             0103*       MACRO PUSH_ALL
04005C             0104*       ex af,af'
04005C             0105*       exx
04005C             0106*       push af
04005C             0107*       push hl
04005C             0108*       push bc
04005C             0109*       push de
04005C             0110*   
04005C             0111*       ex af,af'
04005C             0112*       exx
04005C             0113*       push af
04005C             0114*       push hl
04005C             0115*       push bc
04005C             0116*       push de
04005C             0117*       push ix
04005C             0118*       push iy
04005C             0119*       ENDMACRO
04005C             0120*   
04005C             0121*       MACRO POP_ALL
04005C             0122*       pop iy
04005C             0123*       pop ix
04005C             0124*       pop de
04005C             0125*       pop bc
04005C             0126*       pop hl
04005C             0127*       pop af
04005C             0128*       ex af,af'
04005C             0129*       exx
04005C             0130*   
04005C             0131*       pop de
04005C             0132*       pop bc
04005C             0133*       pop hl
04005C             0134*       pop af
04005C             0135*       ex af,af'
04005C             0136*       exx
04005C             0137*       ENDMACRO
04005C             0031        include "functions.inc"
04005C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040100             0002*   
040100             0003*   ; Print a zero-terminated string inline with code, e.g.:
040100             0004*   ;
040100             0005*   ;    call printInline
040100             0006*   ;    ASCIZ "Hello, world!\r\n"
040100             0007*   ;
040100             0008*   ; Destroys: HL,AF
040100             0009*   printInline:
040100 E1          0010*       pop hl ; get the return address = pointer to start of string
040101 CD 07 01 04 0011*       call printString ; HL advances to end of string
040105 E5          0012*       push hl ; restore the return address = pointer to end of string
040106 C9          0013*       ret
040107             0014*   
040107             0015*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040107             0016*   ; Print a zero-terminated string
040107             0017*   ; HL: Pointer to string
040107             0018*   printString:
040107 C5          0019*       PUSH BC
040108 01 00 00 00 0020*       LD BC,0
04010C 3E 00       0021*       LD A,0
04010E 5B DF       0022*       RST.LIL 18h
040110 C1          0023*       POP BC
040111 C9          0024*       RET
040112             0025*   ; print a VDU sequence
040112             0026*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
040112             0027*   sendVDUsequence:
040112 C5          0028*       PUSH BC
040113 01 00 00 00 0029*       LD BC, 0
040117 4E          0030*       LD C, (HL)
040118 5B DF       0031*       RST.LIL 18h
04011A C1          0032*       POP BC
04011B C9          0033*       RET
04011C             0034*   ; Print Newline sequence to VDP
04011C             0035*   ; destroys bc
04011C             0036*   printNewLine:
04011C F5          0037*       push af ; for some reason rst.lil 10h sets carry flag
04011D 3E 0D       0038*       LD A, '\r'
04011F 5B D7       0039*       RST.LIL 10h
040121 3E 0A       0040*       LD A, '\n'
040123 5B D7       0041*       RST.LIL 10h
040125 F1          0042*       pop af
040126 C9          0043*       RET
040127             0044*   
040127             0045*   ; Print a 24-bit HEX number
040127             0046*   ; HLU: Number to print
040127             0047*   printHex24:
040127             0048*       HLU_TO_A
040127 3B          0001*M1     dec sp ; 1 cycle
040128 E5          0002*M1     push hl ; 4 cycles
040129 33          0003*M1     inc sp ; 1 cycle
04012A F1          0004*M1     pop af ; 4 cycles
04012B             0005*M1     ; 10 cycles total
04012B CD 35 01 04 0049*       CALL printHex8
04012F             0050*   ; Print a 16-bit HEX number
04012F             0051*   ; HL: Number to print
04012F             0052*   printHex16:
04012F 7C          0053*       LD A,H
040130 CD 35 01 04 0054*       CALL printHex8
040134 7D          0055*       LD A,L
040135             0056*   ; Print an 8-bit HEX number
040135             0057*   ; A: Number to print
040135             0058*   printHex8:
040135 4F          0059*       LD C,A
040136 1F          0060*       RRA
040137 1F          0061*       RRA
040138 1F          0062*       RRA
040139 1F          0063*       RRA
04013A CD 3F 01 04 0064*       CALL @F
04013E 79          0065*       LD A,C
04013F             0066*   @@:
04013F E6 0F       0067*       AND 0Fh
040141 C6 90       0068*       ADD A,90h
040143 27          0069*       DAA
040144 CE 40       0070*       ADC A,40h
040146 27          0071*       DAA
040147 5B D7       0072*       RST.LIL 10h
040149 C9          0073*       RET
04014A             0074*   
04014A             0075*   ; Print a 0x HEX prefix
04014A             0076*   DisplayHexPrefix:
04014A 3E 30       0077*       LD A, '0'
04014C 5B D7       0078*       RST.LIL 10h
04014E 3E 78       0079*       LD A, 'x'
040150 5B D7       0080*       RST.LIL 10h
040152 C9          0081*       RET
040153             0082*   
040153             0083*       MACRO printDecBC
040153             0084*       push hl
040153             0085*       push bc
040153             0086*       pop hl
040153             0087*       call printDec
040153             0088*       pop hl
040153             0089*       ENDMACRO
040153             0090*   
040153             0091*       MACRO printDecDE
040153             0092*       push hl
040153             0093*       push de
040153             0094*       pop hl
040153             0095*       call printDec
040153             0096*       pop hl
040153             0097*       ENDMACRO
040153             0098*   
040153             0099*       MACRO printDecHL
040153             0100*       call printDec
040153             0101*       ENDMACRO
040153             0102*   
040153             0103*       MACRO printDecIX
040153             0104*       push hl
040153             0105*       push ix
040153             0106*       pop hl
040153             0107*       call printDec
040153             0108*       pop hl
040153             0109*       ENDMACRO
040153             0110*   
040153             0111*       MACRO printDecIY
040153             0112*       push hl
040153             0113*       push iy
040153             0114*       pop hl
040153             0115*       call printDec
040153             0116*       pop hl
040153             0117*       ENDMACRO
040153             0118*   
040153             0119*   
040153             0120*   ; Prints the right justified decimal value in HL without leading zeroes
040153             0121*   ; HL : Value to print
040153             0122*   ; preserves all registers and flags
040153             0123*   printDec:
040153             0124*   ; BEGIN MY CODE
040153             0125*   ; back up all the things
040153 F5          0126*       push af
040154 C5          0127*       push bc
040155 D5          0128*       push de
040156 E5          0129*       push hl
040157             0130*   ; END MY CODE
040157 11 7F 01 04 0131*       LD DE, _printDecBuffer
04015B CD 8F 01 04 0132*       CALL u24_to_ascii
04015F             0133*   ; BEGIN MY CODE
04015F             0134*   ; replace leading zeroes with spaces
04015F 21 7F 01 04 0135*       LD HL, _printDecBuffer
040163 06 07       0136*       ld B, 7 ; if HL was 0, we want to keep the final zero
040165             0137*   @loop:
040165 7E          0138*       LD A, (HL)
040166 FE 30       0139*       CP '0'
040168 C2 72 01 04 0140*       JP NZ, @done
04016C 3E 20       0141*       LD A, ' '
04016E 77          0142*       LD (HL), A
04016F 23          0143*       INC HL
040170             0144*       ; CALL vdu_cursor_forward
040170 10 F3       0145*       DJNZ @loop
040172             0146*   @done:
040172             0147*   ; END MY CODE
040172 21 7F 01 04 0148*       LD HL, _printDecBuffer
040176 CD 07 01 04 0149*       CALL printString
04017A             0150*   ; BEGIN MY CODE
04017A             0151*   ; restore all the things
04017A E1          0152*       pop hl
04017B D1          0153*       pop de
04017C C1          0154*       pop bc
04017D F1          0155*       pop af
04017E             0156*   ; END MY CODE
04017E C9          0157*       RET
04017F 00 00 00 00 0158*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04018F             0159*   
04018F             0160*   ; This routine converts the unsigned 24-bit value in HLU into its ASCII representation,
04018F             0161*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
04018F             0162*   ; so it will allways be 8 characters length
04018F             0163*   ; HL : Value to convert to string
04018F             0164*   ; DE : pointer to buffer, at least 8 byte + 0
04018F             0165*   u24_to_ascii:
04018F 01 80 69 67 0166*       LD BC,-10000000
040193 CD C6 01 04 0167*       CALL @one_digit
040197 01 C0 BD F0 0168*       LD BC,-1000000
04019B CD C6 01 04 0169*       CALL @one_digit
04019F 01 60 79 FE 0170*       LD BC,-100000
0401A3 CD C6 01 04 0171*       CALL @one_digit
0401A7 01 F0 D8 FF 0172*       LD BC,-10000
0401AB CD C6 01 04 0173*       CALL @one_digit
0401AF 01 18 FC FF 0174*       LD BC,-1000
0401B3 CD C6 01 04 0175*       CALL @one_digit
0401B7 01 9C FF FF 0176*       LD BC,-100
0401BB CD C6 01 04 0177*       CALL @one_digit
0401BF 0E F6       0178*       LD C,-10
0401C1 CD C6 01 04 0179*       CALL @one_digit
0401C5 48          0180*       LD C,B
0401C6             0181*   @one_digit:
0401C6 3E 2F       0182*       LD A,'0'-1
0401C8             0183*   @divide_me:
0401C8 3C          0184*       INC A
0401C9 09          0185*       ADD HL,BC
0401CA 38 FC       0186*       JR C,@divide_me
0401CC ED 42       0187*       SBC HL,BC
0401CE 12          0188*       LD (DE),A
0401CF 13          0189*       INC DE
0401D0 C9          0190*       RET
0401D1             0191*   
0401D1             0192*   print_u24:
0401D1 D5          0193*       push de
0401D2 E5          0194*       push hl
0401D3 11 7F 01 04 0195*       ld de,_printDecBuffer
0401D7 CD 8F 01 04 0196*       call u24_to_ascii
0401DB 21 7F 01 04 0197*       ld hl,_printDecBuffer
0401DF CD 07 01 04 0198*       call printString
0401E3 3E 20       0199*       ld a,' '
0401E5 5B D7       0200*       rst.lil 10h
0401E7 E1          0201*       pop hl
0401E8 D1          0202*       pop de
0401E9 C9          0203*       ret
0401EA             0204*   
0401EA             0205*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
0401EA             0206*   ; HL : Value to convert to string (integer part in H, fractional part in L)
0401EA             0207*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
0401EA             0208*   u168_to_ascii:
0401EA             0209*   ; add a leading space to make room for sign flag if needed
0401EA 3E 20       0210*       ld a,' '
0401EC 12          0211*       ld (de),a
0401ED 13          0212*       inc de
0401EE             0213*   ; Convert integer part
0401EE E5          0214*       push hl ; Save HL (we’ll need the fractional part later)
0401EF             0215*       ; call hlu_udiv256 ; Shift to get integer portion in HL
0401EF             0216*       SRL_UHL ; Shift to get integer portion in HL
0401EF 3B          0001*M1     dec sp ; 1 cycle
0401F0 E5          0002*M1     push hl ; 4 cycles
0401F1 33          0003*M1     inc sp ; 1 cycle
0401F2 E1          0004*M1     pop hl ; 4 cycles
0401F3 23          0005*M1     inc hl ; 1 cycle
0401F4 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
0401F6             0007*M1     ; 13 cycles total
0401F6 01 F0 D8 FF 0217*       ld bc, -10000
0401FA CD 1D 02 04 0218*       call @one_int
0401FE 01 18 FC FF 0219*       ld bc, -1000
040202 CD 1D 02 04 0220*       call @one_int
040206 01 9C FF FF 0221*       ld bc, -100
04020A CD 1D 02 04 0222*       call @one_int
04020E 0E F6       0223*       ld c, -10
040210 CD 1D 02 04 0224*       call @one_int
040214 48          0225*       ld c, b
040215 CD 1D 02 04 0226*       call @one_int
040219 C3 28 02 04 0227*       jp @frac ; Jump to fractional part conversion
04021D             0228*   @one_int:
04021D 3E 2F       0229*       ld a, '0' - 1 ; Start ASCII character at '0'
04021F             0230*   @divide_me:
04021F 3C          0231*       inc a
040220 09          0232*       add hl, bc ; Accumulate until overflow
040221 38 FC       0233*       jr c, @divide_me
040223 ED 42       0234*       sbc hl, bc ; Remove excess after overflow
040225 12          0235*       ld (de), a ; Store ASCII digit
040226 13          0236*       inc de
040227 C9          0237*       ret
040228             0238*   ; Convert fractional part
040228             0239*   @frac:
040228 3E 2E       0240*       ld a, '.' ; Decimal point
04022A 12          0241*       ld (de), a
04022B 13          0242*       inc de
04022C E1          0243*       pop hl ; Restore HL with original fraction
04022D 06 03       0244*       ld b, 3 ; Loop counter for 3 fractional digits
04022F             0245*   @frac_loop:
04022F 26 0A       0246*       ld h, 10 ; Load multiplier for fractional part
040231 ED 6C       0247*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
040233 3E 30       0248*       ld a, '0'
040235 84          0249*       add a, h ; Convert integer part to ASCII
040236 12          0250*       ld (de), a
040237 13          0251*       inc de
040238 10 F5       0252*       djnz @frac_loop ; Repeat for each fractional digit
04023A             0253*   ; Add null terminator
04023A AF          0254*       xor a ; Null terminator
04023B 12          0255*       ld (de), a
04023C C9          0256*       ret
04023D             0257*   
04023D             0258*   print_u168:
04023D D5          0259*       push de
04023E E5          0260*       push hl
04023F 11 7F 01 04 0261*       ld de,_printDecBuffer
040243 CD EA 01 04 0262*       call u168_to_ascii
040247 21 7F 01 04 0263*       ld hl,_printDecBuffer
04024B CD 07 01 04 0264*       call printString
04024F E1          0265*       pop hl
040250 D1          0266*       pop de
040251 C9          0267*       ret
040252             0268*   
040252             0269*   ; signed version of u168_to_ascii
040252             0270*   s168_to_ascii:
040252 D5          0271*       push de ; save starting address of buffer
040253 CD 06 05 04 0272*       call hlu_abs
040257 F5          0273*       push af ; save sign flag
040258 CD EA 01 04 0274*       call u168_to_ascii
04025C F1          0275*       pop af ; restore sign flag
04025D D1          0276*       pop de ; restore starting address of buffer
04025E F0          0277*       ret p ; hlu was positive so nothing to do
04025F 3E 2D       0278*       ld a,'-'
040261 12          0279*       ld (de),a
040262 C9          0280*       ret
040263             0281*   
040263             0282*   print_s168:
040263 D5          0283*       push de
040264 E5          0284*       push hl
040265 11 7F 01 04 0285*       ld de,_printDecBuffer
040269 CD 52 02 04 0286*       call s168_to_ascii
04026D 21 7F 01 04 0287*       ld hl,_printDecBuffer
040271 CD 07 01 04 0288*       call printString
040275 E1          0289*       pop hl
040276 D1          0290*       pop de
040277 C9          0291*       ret
040278             0292*   
040278             0293*   print_s168_hl:
040278 F5          0294*       push af
040279 E5          0295*       push hl
04027A CD 63 02 04 0296*       call print_s168
04027E 3E 20       0297*       ld a,' '
040280 5B D7       0298*       rst.lil 10h
040282 E1          0299*       pop hl
040283 F1          0300*       pop af
040284 C9          0301*       ret
040285             0302*   
040285             0303*   print_s168_bc:
040285 F5          0304*       push af
040286 C5          0305*       push bc
040287 E5          0306*       push hl
040288 C5          0307*       push bc
040289 E1          0308*       pop hl
04028A CD 63 02 04 0309*       call print_s168
04028E 3E 20       0310*       ld a,' '
040290 5B D7       0311*       rst.lil 10h
040292 E1          0312*       pop hl
040293 C1          0313*       pop bc
040294 F1          0314*       pop af
040295 C9          0315*       ret
040296             0316*   
040296             0317*   print_s168_de:
040296 F5          0318*       push af
040297 D5          0319*       push de
040298 E5          0320*       push hl
040299 EB          0321*       ex de,hl
04029A CD 63 02 04 0322*       call print_s168
04029E 3E 20       0323*       ld a,' '
0402A0 5B D7       0324*       rst.lil 10h
0402A2 E1          0325*       pop hl
0402A3 D1          0326*       pop de
0402A4 F1          0327*       pop af
0402A5 C9          0328*       ret
0402A6             0329*   
0402A6             0330*   print_s168_hl_bc_de:
0402A6 F5          0331*       push af
0402A7 C5          0332*       push bc
0402A8 D5          0333*       push de
0402A9 E5          0334*       push hl
0402AA CD 63 02 04 0335*       call print_s168
0402AE 3E 20       0336*       ld a,' '
0402B0 5B D7       0337*       rst.lil 10h
0402B2 C5          0338*       push bc
0402B3 E1          0339*       pop hl
0402B4 CD 63 02 04 0340*       call print_s168
0402B8 3E 20       0341*       ld a,' '
0402BA 5B D7       0342*       rst.lil 10h
0402BC EB          0343*       ex de,hl
0402BD CD 63 02 04 0344*       call print_s168
0402C1 3E 20       0345*       ld a,' '
0402C3 5B D7       0346*       rst.lil 10h
0402C5 E1          0347*       pop hl
0402C6 D1          0348*       pop de
0402C7 C1          0349*       pop bc
0402C8 F1          0350*       pop af
0402C9 C9          0351*       ret
0402CA             0352*   
0402CA             0353*   print_s168_bc_de:
0402CA F5          0354*       push af
0402CB C5          0355*       push bc
0402CC D5          0356*       push de
0402CD C5          0357*       push bc
0402CE E1          0358*       pop hl
0402CF CD 63 02 04 0359*       call print_s168
0402D3 3E 20       0360*       ld a,' '
0402D5 5B D7       0361*       rst.lil 10h
0402D7 EB          0362*       ex de,hl
0402D8 CD 63 02 04 0363*       call print_s168
0402DC 3E 20       0364*       ld a,' '
0402DE 5B D7       0365*       rst.lil 10h
0402E0 E1          0366*       pop hl
0402E1 D1          0367*       pop de
0402E2 C1          0368*       pop bc
0402E3 F1          0369*       pop af
0402E4 C9          0370*       ret
0402E5             0371*   
0402E5             0372*   print_s168_a:
0402E5 F5          0373*       push af
0402E6 C5          0374*       push bc
0402E7 E5          0375*       push hl
0402E8 21 00 00 00 0376*       ld hl,0
0402EC 6F          0377*       ld l,a
0402ED CD 78 02 04 0378*       call print_s168_hl
0402F1 E1          0379*       pop hl
0402F2 C1          0380*       pop bc
0402F3 F1          0381*       pop af
0402F4 C9          0382*       ret
0402F5             0383*   
0402F5             0384*   ; #### new functions added by Brandon R. Gates ####
0402F5             0385*   
0402F5             0386*   ; print the binary representation of the 8-bit value in a
0402F5             0387*   ; destroys a, hl, bc
0402F5             0388*   printBin8:
0402F5 06 08       0389*       ld b,8 ; loop counter for 8 bits
0402F7 21 12 03 04 0390*       ld hl,@cmd ; set hl to the low byte of the output string
0402FB             0391*       ; (which will be the high bit of the value in a)
0402FB             0392*   @loop:
0402FB 07          0393*       rlca ; put the next highest bit into carry
0402FC 38 04       0394*       jr c,@one
0402FE 36 30       0395*       ld (hl),'0'
040300 18 02       0396*       jr @next_bit
040302             0397*   @one:
040302 36 31       0398*       ld (hl),'1'
040304             0399*   @next_bit:
040304 23          0400*       inc hl
040305 10 F4       0401*       djnz @loop
040307             0402*   ; print it
040307 21 12 03 04 0403*       ld hl,@cmd
04030B 01 08 00 00 0404*       ld bc,@end-@cmd
04030F 5B DF       0405*       rst.lil $18
040311 C9          0406*       ret
040312             0407*   @cmd: ds 8 ; eight bytes for eight bits
04031A             0408*   @end:
04031A             0409*   
04031A             0410*   ; print the binary representation of the 8-bit value in a
04031A             0411*   ; in reverse order (lsb first)
04031A             0412*   ; destroys a, hl, bc
04031A             0413*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
04031A 06 08       0414*       ld b,8 ; loop counter for 8 bits
04031C 21 37 03 04 0415*       ld hl,@cmd ; set hl to the low byte of the output string
040320             0416*       ; (which will be the high bit of the value in a)
040320             0417*   @loop:
040320 0F          0418*       rrca ; put the next lowest bit into carry
040321 38 04       0419*       jr c,@one
040323 36 30       0420*       ld (hl),'0'
040325 18 02       0421*       jr @next_bit
040327             0422*   @one:
040327 36 31       0423*       ld (hl),'1'
040329             0424*   @next_bit:
040329 23          0425*       inc hl
04032A 10 F4       0426*       djnz @loop
04032C             0427*   ; print it
04032C 21 37 03 04 0428*       ld hl,@cmd
040330 01 08 00 00 0429*       ld bc,@end-@cmd
040334 5B DF       0430*       rst.lil $18
040336 C9          0431*       ret
040337             0432*   @cmd: ds 8 ; eight bytes for eight bits
04033F             0433*   @end:
04033F             0434*   
       FF FF FF FF 
       FF FF FF FF 
04033F 20 61 66 3D 0435*   str_afu: db " af=",0
       00          
040344 20 68 6C 3D 0436*   str_hlu: db " hl=",0
       00          
040349 20 62 63 3D 0437*   str_bcu: db " bc=",0
       00          
04034E 20 64 65 3D 0438*   str_deu: db " de=",0
       00          
040353 20 69 78 3D 0439*   str_ixu: db " ix=",0
       00          
040358 20 69 79 3D 0440*   str_iyu: db " iy=",0
       00          
04035D             0441*   
04035D             0442*   ; print udeuhl to screen in hexidecimal format
04035D             0443*   ; inputs: none
04035D             0444*   ; outputs: concatenated hexidecimal udeuhl
04035D             0445*   ; destroys: nothing
04035D             0446*   dumpUDEUHLHex:
04035D             0447*   ; store everything in scratch
04035D 22 BC 03 04 0448*       ld (uhl),hl
040361 ED 43 BF 03 0449*       ld (ubc),bc
       04          
040366 ED 53 C2 03 0450*       ld (ude),de
       04          
04036B DD 22 C5 03 0451*       ld (uix),ix
       04          
040370 FD 22 C8 03 0452*       ld (uiy),iy
       04          
040375 F5          0453*       push af
040376             0454*   
040376             0455*   ; print each register
040376             0456*   
040376 21 B0 03 04 0457*       ld hl,str_udeuhl
04037A CD 07 01 04 0458*       call printString
04037E 2A C2 03 04 0459*       ld hl,(ude)
040382 CD 27 01 04 0460*       call printHex24
040386 3E 2E       0461*       ld a,'.' ; print a dot to separate the values
040388 5B D7       0462*       rst.lil 10h
04038A 2A BC 03 04 0463*       ld hl,(uhl)
04038E CD 27 01 04 0464*       call printHex24
040392 CD 1C 01 04 0465*       call printNewLine
040396             0466*   
040396             0467*   ; restore everything
040396 2A BC 03 04 0468*       ld hl, (uhl)
04039A ED 4B BF 03 0469*       ld bc, (ubc)
       04          
04039F ED 5B C2 03 0470*       ld de, (ude)
       04          
0403A4 DD 2A C5 03 0471*       ld ix, (uix)
       04          
0403A9 FD 2A C8 03 0472*       ld iy, (uiy)
       04          
0403AE F1          0473*       pop af
0403AF             0474*   ; all done
0403AF C9          0475*       ret
0403B0             0476*   
0403B0 75 64 65 2E 0477*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0403B9             0478*   
0403B9             0479*   ; global scratch memory for registers
0403B9 00 00 00    0480*   uaf: dl 0
0403BC 00 00 00    0481*   uhl: dl 0
0403BF 00 00 00    0482*   ubc: dl 0
0403C2 00 00 00    0483*   ude: dl 0
0403C5 00 00 00    0484*   uix: dl 0
0403C8 00 00 00    0485*   uiy: dl 0
0403CB 00 00 00    0486*   usp: dl 0
0403CE 00 00 00    0487*   upc: dl 0
0403D1             0488*   
0403D1             0489*   
0403D1             0490*   ; set all the bits in the flag register
0403D1             0491*   ; more of an academic exercise than anything useful
0403D1             0492*   ; inputs; none
0403D1             0493*   ; outputs; a=0,f=255
0403D1             0494*   ; destroys: flags, hl
0403D1             0495*   ; preserves: a, because why not
0403D1             0496*   setAllFlags:
0403D1 21 FF 00 00 0497*       ld hl,255
0403D5 67          0498*       ld h,a ; four cycles to preserve a is cheap
0403D6 E5          0499*       push hl
0403D7 F1          0500*       pop af
0403D8 C9          0501*       ret
0403D9             0502*   
0403D9             0503*   ; reset all the bits in the flag register
0403D9             0504*   ; unlike its inverse counterpart, this may actually be useful
0403D9             0505*   ; inputs; none
0403D9             0506*   ; outputs; a=0,f=0
0403D9             0507*   ; destroys: flags, hl
0403D9             0508*   ; preserves: a, because why not
0403D9             0509*   resetAllFlags:
0403D9 21 00 00 00 0510*       ld hl,0
0403DD 67          0511*       ld h,a ; four cycles to preserve a is cheap
0403DE E5          0512*       push hl
0403DF F1          0513*       pop af
0403E0 C9          0514*       ret
0403E1             0515*   
0403E1             0516*   ; wait until user presses a key
0403E1             0517*   ; inputs: none
0403E1             0518*   ; outputs: ascii code of key pressed in a
0403E1             0519*   ; destroys: af,ix
0403E1             0520*   waitKeypress:
0403E1             0521*       MOSCALL mos_getkey
0403E1 3E 00       0001*M1 			LD	A, function
0403E3 5B CF       0002*M1 			RST.LIL	08h
0403E5 C9          0522*       ret
0403E6             0523*   
0403E6             0524*   ; clear a block of memory by writing a prescribed value to each byte in the range
0403E6             0525*   ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
0403E6             0526*   ; outputs: memory block is cleared
0403E6             0527*   ; destroys: hl, de
0403E6             0528*   clear_mem:
0403E6 0B          0529*       dec bc ; we do this because we will increment de before writing the first byte
0403E7 77          0530*       ld (hl),a
0403E8 E5          0531*       push hl
0403E9 D1          0532*       pop de
0403EA 13          0533*       inc de ; target address
0403EB ED B0       0534*       ldir
0403ED C9          0535*       ret
0403EE             0032        include "arith24.inc"
0403EE             0001*   ;------------------------------------------------------------------------
0403EE             0002*   ;  arith24.asm
0403EE             0003*   ;  24-bit ez80 arithmetic routines
0403EE             0004*   ;  Copyright (c) Shawn Sijnstra 2024
0403EE             0005*   ;  MIT license
0403EE             0006*   ;
0403EE             0007*   ;  This library was created as a tool to help make ez80
0403EE             0008*   ;  24-bit native assembly routines for simple mathematical problems
0403EE             0009*   ;  more widely available.
0403EE             0010*   ;
0403EE             0011*   ;------------------------------------------------------------------------
0403EE             0012*   
0403EE             0013*   ;------------------------------------------------------------------------
0403EE             0014*   ; umul24:	HL = HL*DE (unsigned)
0403EE             0015*   ; Preserves AF, BC, DE
0403EE             0016*   ; Uses a fast multiply routine.
0403EE             0017*   ;------------------------------------------------------------------------
0403EE             0018*   umul24:
0403EE D5          0019*   	push	DE
0403EF C5          0020*   	push	BC
0403F0 F5          0021*   	push	AF
0403F1 E5          0022*   	push	HL
0403F2 C1          0023*   	pop		BC
0403F3 3E 18       0024*       ld	 	a, 24 ; No. of bits to process
0403F5 21 00 00 00 0025*       ld	 	hl, 0 ; Result
0403F9             0026*   umul24_lp:
0403F9 29          0027*   	add	hl,hl
0403FA EB          0028*   	ex	de,hl
0403FB 29          0029*   	add	hl,hl
0403FC EB          0030*   	ex	de,hl
0403FD 30 01       0031*   	jr	nc,umul24_nc
0403FF 09          0032*   	add	hl,bc
040400             0033*   umul24_nc:
040400 3D          0034*   	dec	a
040401 20 F6       0035*   	jr	nz,umul24_lp
040403 F1          0036*   	pop	af
040404 C1          0037*   	pop	bc
040405 D1          0038*   	pop	de
040406 C9          0039*   	ret
040407             0040*   
040407             0041*   
040407             0042*   ;------------------------------------------------------------------------
040407             0043*   ; udiv24
040407             0044*   ; Unsigned 24-bit division
040407             0045*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
040407             0046*   ;
040407             0047*   ; Uses AF BC DE HL
040407             0048*   ; Uses Restoring Division algorithm
040407             0049*   ;------------------------------------------------------------------------
040407             0050*   
040407             0051*   udiv24:
040407 E5          0052*   	push	hl
040408 C1          0053*   	pop		bc	;move dividend to BCU
040409 21 00 00 00 0054*   	ld		hl,0	;result
04040D A7          0055*   	and		a
04040E ED 52       0056*   	sbc		hl,de	;test for div by 0
040410 C8          0057*   	ret		z		;it's zero, carry flag is clear
040411 19          0058*   	add		hl,de	;HL is 0 again
040412 3E 18       0059*   	ld		a,24	;number of loops through.
040414             0060*   udiv1:
040414 C5          0061*   	push	bc	;complicated way of doing this because of lack of access to top bits
040415 E3          0062*   	ex		(sp),hl
040416 37          0063*   	scf
040417 ED 6A       0064*   	adc	hl,hl
040419 E3          0065*   	ex	(sp),hl
04041A C1          0066*   	pop	bc		;we now have bc = (bc * 2) + 1
04041B             0067*   
04041B ED 6A       0068*   	adc	hl,hl
04041D A7          0069*   	and	a		;is this the bug
04041E ED 52       0070*   	sbc	hl,de
040420 30 02       0071*   	jr	nc,udiv2
040422 19          0072*   	add	hl,de
040423             0073*   ;	dec	c
040423 0B          0074*   	dec	bc
040424             0075*   udiv2:
040424 3D          0076*   	dec	a
040425 20 ED       0077*   	jr	nz,udiv1
040427 37          0078*   	scf		;flag used for div0 error
040428 C5          0079*   	push	bc
040429 D1          0080*   	pop		de	;remainder
04042A C9          0081*   	ret
04042B             0082*   
04042B             0083*   
04042B             0084*   
04042B             0085*   ;------------------------------------------------------------------------
04042B             0086*   ; neg24
04042B             0087*   ; Returns: HLU = 0-HLU
04042B             0088*   ; preserves all other registers
04042B             0089*   ;------------------------------------------------------------------------
04042B             0090*   neg24:
04042B D5          0091*   	push	de
04042C EB          0092*   	ex		de,hl
04042D 21 00 00 00 0093*   	ld		hl,0
040431 B7          0094*   	or		a
040432 ED 52       0095*   	sbc		hl,de
040434 D1          0096*   	pop		de
040435 C9          0097*   	ret
040436             0098*   
040436             0099*   ;------------------------------------------------------------------------
040436             0100*   ; or_hlu_deu: 24 bit bitwise OR
040436             0101*   ; Returns: hlu = hlu OR deu
040436             0102*   ; preserves all other registers
040436             0103*   ;------------------------------------------------------------------------
040436             0104*   or_hlu_deu:
040436 22 BF 04 04 0105*   	ld	(bitbuf1),hl
04043A ED 53 C2 04 0106*   	ld	(bitbuf2),de
       04          
04043F D5          0107*   	push	de	;preserve DEU
040440 C5          0108*   	push	bc	;preserve BCU
040441 06 03       0109*   	ld		b,3
040443 21 BF 04 04 0110*   	ld	hl,bitbuf1
040447 11 BF 04 04 0111*   	ld	de,bitbuf1
04044B             0112*   orloop_24:
04044B 1A          0113*   	ld	a,(de)
04044C B6          0114*   	or	(hl)
04044D 12          0115*   	ld	(de),a
04044E 13          0116*   	inc	de
04044F 23          0117*   	inc	hl
040450 10 F9       0118*   	djnz	orloop_24
040452 2A C2 04 04 0119*   	ld	hl,(bitbuf2)
040456 C1          0120*   	pop		bc	;restore BC
040457 D1          0121*   	pop		de	;restore DE
040458             0122*   
040458             0123*   ;------------------------------------------------------------------------
040458             0124*   ; and_hlu_deu: 24 bit bitwise AND
040458             0125*   ; Returns: hlu = hlu AND deu
040458             0126*   ; preserves all other registers
040458             0127*   ;------------------------------------------------------------------------
040458             0128*   and_hlu_deu:
040458 22 BF 04 04 0129*   	ld	(bitbuf1),hl
04045C ED 53 C2 04 0130*   	ld	(bitbuf2),de
       04          
040461 D5          0131*   	push	de	;preserve DEU
040462 C5          0132*   	push	bc	;preserve BCU
040463 06 03       0133*   	ld		b,3
040465 21 BF 04 04 0134*   	ld	hl,bitbuf1
040469 11 BF 04 04 0135*   	ld	de,bitbuf1
04046D             0136*   andloop_24:
04046D 1A          0137*   	ld	a,(de)
04046E A6          0138*   	and	(hl)
04046F 12          0139*   	ld	(de),a
040470 13          0140*   	inc	de
040471 23          0141*   	inc	hl
040472 10 F9       0142*   	djnz	andloop_24
040474 2A C2 04 04 0143*   	ld	hl,(bitbuf2)
040478 C1          0144*   	pop		bc	;restore BC
040479 D1          0145*   	pop		de	;restore DE
04047A             0146*   
04047A             0147*   ;------------------------------------------------------------------------
04047A             0148*   ; xor_hlu_deu: 24 bit bitwise XOR
04047A             0149*   ; Returns: hlu = hlu XOR deu
04047A             0150*   ; preserves all other registers
04047A             0151*   ;------------------------------------------------------------------------
04047A             0152*   xor_hlu_deu:
04047A 22 BF 04 04 0153*   	ld	(bitbuf1),hl
04047E ED 53 C2 04 0154*   	ld	(bitbuf2),de
       04          
040483 D5          0155*   	push	de	;preserve DEU
040484 C5          0156*   	push	bc	;preserve BCU
040485 06 03       0157*   	ld		b,3
040487 21 BF 04 04 0158*   	ld	hl,bitbuf1
04048B 11 BF 04 04 0159*   	ld	de,bitbuf1
04048F             0160*   xorloop_24:
04048F 1A          0161*   	ld	a,(de)
040490 AE          0162*   	xor	(hl)
040491 12          0163*   	ld	(de),a
040492 13          0164*   	inc	de
040493 23          0165*   	inc	hl
040494 10 F9       0166*   	djnz	xorloop_24
040496 2A C2 04 04 0167*   	ld	hl,(bitbuf2)
04049A C1          0168*   	pop		bc	;restore BC
04049B D1          0169*   	pop		de	;restore DE
04049C             0170*   
04049C             0171*   ;------------------------------------------------------------------------
04049C             0172*   ; shl_hlu: 24 bit shift left hlu by a positions
04049C             0173*   ; Returns: hlu = hlu << a
04049C             0174*   ;		   a = 0
04049C             0175*   ; NOTE: only considers a up to 16 bits.
04049C             0176*   ; preserves all other registers
04049C             0177*   ; modified by Brandon R. Gates to use a instead of de
04049C             0178*   ;------------------------------------------------------------------------
04049C             0179*   shl_hlu:
04049C B7          0180*   	or a
04049D C8          0181*   	ret		z		;we're done
04049E 29          0182*   	add		hl,hl	;shift HLU left
04049F 3D          0183*   	dec a
0404A0 18 FA       0184*   	jr		shl_hlu
0404A2             0185*   
0404A2             0186*   ;------------------------------------------------------------------------
0404A2             0187*   ; shr_hlu: 24 bit shift right hlu by a positions
0404A2             0188*   ; Returns: hlu = hlu >> a
0404A2             0189*   ;		   a = 0
0404A2             0190*   ; NOTE: only considers a up to 16 bits.
0404A2             0191*   ; preserves all other registers
0404A2             0192*   ; modified by Brandon R. Gates to use a instead of de
0404A2             0193*   ;------------------------------------------------------------------------
0404A2             0194*   shr_hlu:
0404A2 22 BF 04 04 0195*   	ld		(bitbuf1),hl
0404A6 21 C1 04 04 0196*   	ld		hl,bitbuf1+2
0404AA             0197*   @shr_loop:
0404AA B7          0198*   	or a
0404AB 28 0D       0199*   	jr		z,@shr_done		;we're done
0404AD             0200*   ;carry is clear from or instruction
0404AD CB 1E       0201*   	rr		(hl)
0404AF 2B          0202*   	dec		hl
0404B0 CB 1E       0203*   	rr		(hl)
0404B2 2B          0204*   	dec		hl
0404B3 CB 1E       0205*   	rr		(hl)
0404B5 23          0206*   	inc		hl
0404B6 23          0207*   	inc		hl
0404B7 3D          0208*   	dec a
0404B8 18 F0       0209*   	jr		@shr_loop
0404BA             0210*   @shr_done:
0404BA 2A BF 04 04 0211*   	ld		hl,(bitbuf1)	;collect result
0404BE C9          0212*   	ret
0404BF             0213*   
0404BF             0214*   ;------------------------------------------------------------------------
0404BF             0215*   ; Scratch area for calculations
0404BF             0216*   ;------------------------------------------------------------------------
0404BF 00 00 00    0217*   bitbuf1:	dw24	0	;bit manipulation buffer 1
0404C2 00 00 00    0218*   bitbuf2:	dw24	0	;bit manipulation buffer 2
0404C5             0219*   
0404C5             0220*   ; -----------------------------------------------------------------------
0404C5             0221*   ; Functions added by Brandon R. Gates
0404C5             0222*   ; -----------------------------------------------------------------------
0404C5             0223*   
0404C5             0224*   ;------------------------------------------------------------------------
0404C5             0225*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
0404C5             0226*   ;              Determines the LSB of A and shifts HLU accordingly.
0404C5             0227*   ;              HLU = HLU >> LSB(A)
0404C5             0228*   ; Returns: HLU = HLU >> LSB(A)
0404C5             0229*   ; Destroys: af
0404C5             0230*   ;------------------------------------------------------------------------
0404C5             0231*   shr_hlu_log2a:
0404C5 B7          0232*   	or a    ; check for zero
0404C6 C8          0233*   	ret z   ; nothing to shift so we're done
0404C7 C5          0234*   	push 	bc ; preserve
0404C8 06 00       0235*   	ld		b,0 ; clear b
0404CA             0236*   @find_bit:
0404CA 0F          0237*   	rrca ; bit 0 to carry
0404CB DA D4 04 04 0238*   	jp c,@found_bit
0404CF 04          0239*   	inc b ; next bit
0404D0 C3 CA 04 04 0240*   	jp @find_bit
0404D4             0241*   @found_bit:
0404D4 78          0242*   	ld a,b
0404D5 CD A2 04 04 0243*   	call shr_hlu
0404D9 C1          0244*   	pop 	bc ; restore
0404DA C9          0245*   	ret
0404DB             0246*   ; end shr_hlu_log2a
0404DB             0247*   
0404DB             0248*   ;------------------------------------------------------------------------
0404DB             0249*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
0404DB             0250*   ;                Determines the LSB of A and shifts HLU accordingly.
0404DB             0251*   ;                HLU = HLU << LSB(A)
0404DB             0252*   ; Returns: HLU = HLU << LSB(A)
0404DB             0253*   ; Destroys: af
0404DB             0254*   ;------------------------------------------------------------------------
0404DB             0255*   shl_hlu_log2a:
0404DB B7          0256*   	or a    ; check for zero
0404DC C8          0257*   	ret z   ; nothing to shift so we're done
0404DD C5          0258*   	push 	bc ; preserve
0404DE 06 00       0259*   	ld		b,0 ; clear b
0404E0             0260*   @find_bit:
0404E0 0F          0261*   	rrca ; bit 0 to carry
0404E1 DA EA 04 04 0262*   	jp c,@found_bit
0404E5 04          0263*   	inc b ; next bit
0404E6 C3 E0 04 04 0264*   	jp @find_bit
0404EA             0265*   @found_bit:
0404EA 78          0266*   	ld a,b
0404EB CD 9C 04 04 0267*   	call shl_hlu
0404EF C1          0268*   	pop 	bc ; restore
0404F0 C9          0269*   	ret
0404F1             0270*   ; end shl_hlu_log2a
0404F1             0033        include "maths.inc"
0404F1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
040500             0002*   
040500             0003*   ;------------------------------------------------------------------------
040500             0004*   ; Scratch area for calculations
040500             0005*   ;------------------------------------------------------------------------
040500 00 00 00    0006*   scratch1: dw24 0 ;bit manipulation buffer 1
040503 00 00 00    0007*   scratch2: dw24 0 ;bit manipulation buffer 2
040506             0008*   
040506             0009*   ; absolute value of hlu
040506             0010*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040506             0011*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040506             0012*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040506             0013*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040506             0014*   ; destroys: a
040506             0015*   hlu_abs:
040506 19          0016*       add hl,de
040507 B7          0017*       or a
040508 ED 52       0018*       sbc hl,de
04050A FA 0F 05 04 0019*       jp m,@is_neg
04050E C9          0020*       ret ; hlu is positive or zero so we're done
04050F             0021*   @is_neg:
04050F F5          0022*       push af ; otherwise, save current flags for return
040510 CD 16 05 04 0023*       call neg_hlu ; negate hlu
040514 F1          0024*       pop af ; get back flags
040515 C9          0025*       ret
040516             0026*   
040516             0027*   ; flip the sign of hlu
040516             0028*   ; inputs: hlu
040516             0029*   ; returns: 0-hlu, flags set appropriately for the result:
040516             0030*   ;         s1,z0,pv0,n1,c1 if result is negative
040516             0031*   ;         s0,z1,pv0,n1,c0 if result is zero
040516             0032*   ;         s0,z0,pv0,n1,c1 if result is positive
040516             0033*   ; destroys a
040516             0034*   neg_hlu:
040516 D5          0035*       push de ; save de
040517 EB          0036*       ex de,hl ; put hl into de
040518 21 00 00 00 0037*       ld hl,0 ; clear hl
04051C AF          0038*       xor a ; clear carry
04051D ED 52       0039*       sbc hl,de ; 0-hlu = -hlu
04051F D1          0040*       pop de ; get de back
040520 C9          0041*       ret ; easy peasy
040521             0042*   
040521             0043*   ;------------------------------------------------------------------------
040521             0044*   ; divide hlu by 2, inspired by above
040521             0045*   ;------------------------------------------------------------------------
040521             0046*   hlu_div2:
040521 22 00 05 04 0047*       ld (scratch1),hl
040525 21 02 05 04 0048*       ld hl,scratch1+2
040529 CB 1E       0049*       rr (hl)
04052B 2B          0050*       dec hl
04052C CB 1E       0051*       rr (hl)
04052E 2B          0052*       dec hl
04052F CB 1E       0053*       rr (hl)
040531 23          0054*       inc hl
040532 23          0055*       inc hl
040533 2A 00 05 04 0056*       ld hl,(scratch1)
040537 C9          0057*       ret
040538             0058*   
040538             0059*   ; this is my little hack to divide by 16
040538             0060*   hlu_div16:
040538 AF          0061*       xor a
040539 29          0062*       add hl,hl
04053A 17          0063*       rla
04053B 29          0064*       add hl,hl
04053C 17          0065*       rla
04053D 29          0066*       add hl,hl
04053E 17          0067*       rla
04053F 29          0068*       add hl,hl
040540 17          0069*       rla
040541 22 4E 05 04 0070*       ld (@scratch),hl
040545 32 51 05 04 0071*       ld (@scratch+3),a
040549 2A 4F 05 04 0072*       ld hl,(@scratch+1)
04054D C9          0073*       ret
04054E             0074*   @scratch: ds 4
040552             0075*   
040552             0076*   ; hlu signed division by 256
040552             0077*   ; returns: hlu / 256
040552             0078*   ; destroys: af
040552             0079*   hlu_sdiv256:
       FF FF FF FF 
040552 AF          0080*       xor a ; assume hl is positive
040553 22 69 05 04 0081*       ld (@buffer),hl
040557             0082*       SIGN_HLU
040557 19          0001*M1     add hl,de ; 1 cycle
040558 B7          0002*M1     or a ; clear flags ; 1 cycle
040559 ED 52       0003*M1     sbc hl,de ; 2 cycles
04055B             0004*M1     ; 4 cycles total
04055B F2 60 05 04 0083*       jp p,@hl_pos
04055F 3D          0084*       dec a
040560             0085*   @hl_pos:
040560 32 6C 05 04 0086*       ld (@buffer+3),a
040564 2A 6A 05 04 0087*       ld hl,(@buffer+1)
040568 C9          0088*       ret
040569             0089*   @buffer: ds 4
04056D             0090*   
04056D             0091*   ; hlu 1 byte right shift, unsigned
04056D             0092*   ; returns: hlu / 256, fractional portion in a
04056D             0093*   ; destroys: af
04056D             0094*   hlu_udiv256:
       FF FF FF FF 
04056D AF          0095*       xor a
04056E 32 7F 05 04 0096*       ld (@buffer+3),a
040572 7D          0097*       ld a,l ; save the fractional portion
040573 22 7C 05 04 0098*       ld (@buffer),hl
040577 2A 7D 05 04 0099*       ld hl,(@buffer+1)
04057B C9          0100*       ret
04057C             0101*   @buffer: ds 4
040580             0102*   
       FF FF FF FF 
040580 00 00 00 00 0103*   add_bcd_arg1: db #00,#00,#00,#00
040584 00 00 00 00 0104*   add_bcd_arg2: db #00,#00,#00,#00
040588             0105*   
040588             0106*   ; set bcd values in a scratch memory address from registers bcde
040588             0107*   ; input: hl; scratch address,bcde; 8-place bcd number
040588             0108*   ; destroys ; hl
040588             0109*   set_bcd:
040588 73          0110*       ld (hl),e
040589 23          0111*       inc hl
04058A 72          0112*       ld (hl),d
04058B 23          0113*       inc hl
04058C 71          0114*       ld (hl),c
04058D 23          0115*       inc hl
04058E 70          0116*       ld (hl),b
04058F C9          0117*       ret
040590             0118*   
040590             0119*   ; load bcd values from a scratch memory address to bcde
040590             0120*   ; input: hl; scratch address
040590             0121*   ; output: bcde; 8-place bcd number
040590             0122*   ; destroys: hl
040590             0123*   get_bcd:
040590 5E          0124*       ld e,(hl)
040591 23          0125*       inc hl
040592 56          0126*       ld d,(hl)
040593 23          0127*       inc hl
040594 4E          0128*       ld c,(hl)
040595 23          0129*       inc hl
040596 46          0130*       ld b,(hl)
040597 C9          0131*       ret
040598             0132*   
040598             0133*   ; BCD addition
040598             0134*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040598             0135*   ;       a is the number of bytes holding each number (number of places/2)
040598             0136*   ; outputs: (hl) + (de) --> (hl)
040598             0137*   ; destroys: a,b,de,hl
040598             0138*   add_bcd:
040598 47          0139*       ld b,a ; loop counter
040599 AF          0140*       xor a ; reset a, clear carry flag
04059A             0141*   adcec:
04059A 1A          0142*       ld a,(de) ; addend to acc
04059B 8E          0143*       adc a,(hl) ; add (hl) to acc
04059C 27          0144*       daa ; adjust result to bcd
04059D 77          0145*       ld (hl),a ; store result
04059E 23          0146*       inc hl ; advance memory pointers
04059F 13          0147*       inc de
0405A0 10 F8       0148*       djnz adcec ; loop until b == 0
0405A2 C9          0149*       ret
0405A3             0150*   
0405A3             0151*   ; BCD subtraction
0405A3             0152*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0405A3             0153*   ;       a is the number of bytes holding each number (number of places/2)
0405A3             0154*   ; outputs: (hl) - (de) --> (hl)
0405A3             0155*   ; destroys: a,b,de,hl
0405A3             0156*   sub_bcd:
0405A3 47          0157*       ld b,a ; loop counter
0405A4 AF          0158*       xor a ; reset a,clear carry flag
0405A5             0159*   subdec:
0405A5 1A          0160*       ld a,(de) ; subtrahend to acc
0405A6 9E          0161*       sbc a,(hl) ; subtract (hl) from acc
0405A7 27          0162*       daa ; adjust result to bcd
0405A8 77          0163*       ld (hl),a ; store result
0405A9 23          0164*       inc hl ; advance memory pointers
0405AA 13          0165*       inc de
0405AB 10 F8       0166*       djnz subdec ; loop until b == 0
0405AD C9          0167*       ret
0405AE             0168*   
0405AE             0169*   ; http://www.z80.info/pseudo-random.txt
0405AE             0170*   rand_8:
0405AE C5          0171*       push bc
0405AF 3A C2 05 04 0172*       ld a,(r_seed)
0405B3 4F          0173*       ld c,a
0405B4             0174*   
0405B4 0F          0175*       rrca ; multiply by 32
0405B5 0F          0176*       rrca
0405B6 0F          0177*       rrca
0405B7 EE 1F       0178*       xor 0x1f
0405B9             0179*   
0405B9 81          0180*       add a,c
0405BA DE FF       0181*       sbc a,255 ; carry
0405BC             0182*   
0405BC 32 C2 05 04 0183*       ld (r_seed),a
0405C0 C1          0184*       pop bc
0405C1 C9          0185*       ret
0405C2 50          0186*   r_seed: defb $50
0405C3             0187*   
0405C3             0188*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
0405C3             0189*   prng24:
0405C3             0190*   ;;Expects ADL mode.
0405C3             0191*   ;;Output: HL
0405C3             0192*   ;;50cc
0405C3             0193*   ;;33 bytes
0405C3             0194*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
0405C3 ED 5B E4 05 0195*       ld de,(seed1)
       04          
0405C8 B7          0196*       or a
0405C9 ED 62       0197*       sbc hl,hl
0405CB 19          0198*       add hl,de
0405CC 29          0199*       add hl,hl
0405CD 29          0200*       add hl,hl
0405CE 2C          0201*       inc l
0405CF 19          0202*       add hl,de
0405D0 22 E4 05 04 0203*       ld (seed1),hl
0405D4 2A E7 05 04 0204*       ld hl,(seed2)
0405D8 29          0205*       add hl,hl
0405D9 9F          0206*       sbc a,a
0405DA E6 1B       0207*       and %00011011
0405DC AD          0208*       xor l
0405DD 6F          0209*       ld l,a
0405DE 22 E7 05 04 0210*       ld (seed2),hl
0405E2 19          0211*       add hl,de
0405E3 C9          0212*       ret
0405E4 00 00 00    0213*   seed1: dl 0
0405E7 00 00 00    0214*   seed2: dl 0
0405EA             0034        include "files.inc"
0405EA             0001*   ; load to onboard 8k sram
0405EA             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
0405EA             0035        include "fixed168.inc"
0405EA FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
040600             0002*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040600             0003*   ; uses EZ80 MLT instruction for speed
040600             0004*   ; operation: UHL * A --> UHL
040600             0005*   ; destroys: AF, HL
040600             0006*   smul24x8:
040600             0007*   ; make hl positive and store sign flag
040600 CD 06 05 04 0008*       call hlu_abs
040604 F5          0009*       push af
040605             0010*   ; do the division
040605 CD 10 06 04 0011*       call mul24x8 ; hl = product
040609             0012*   ; adjust sign of result
040609 F1          0013*       pop af ; sign de
04060A F0          0014*       ret p ; hl was positive, nothing to do
04060B CD 16 05 04 0015*       call neg_hlu ; result is negative
04060F C9          0016*       ret
040610             0017*   
040610             0018*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040610             0019*   ; uses EZ80 MLT instruction for speed
040610             0020*   ; operation: UHL * A --> AUHL
040610             0021*   ; destroys: AF, HL
040610             0022*   mul24x8:
040610 D5          0023*       push de ; preserve de
040611             0024*   ; low byte
040611 5D          0025*       ld e,l
040612 57          0026*       ld d,a
040613 ED 5C       0027*       mlt de
040615 6B          0028*       ld l,e ; product low byte
040616 08          0029*       ex af,af' ; save multiplier
040617 7A          0030*       ld a,d ; carry
040618 08          0031*       ex af,af' ; save carry, restore multiplier
040619             0032*   ; high byte
040619 5C          0033*       ld e,h
04061A 57          0034*       ld d,a
04061B ED 5C       0035*       mlt de
04061D 08          0036*       ex af,af' ; save multiplier, restore carry
04061E 83          0037*       add a,e ; add carry
04061F 67          0038*       ld h,a ; product middle byte
040620 7A          0039*       ld a,d ; carry
040621 08          0040*       ex af,af' ; save carry, restore multiplier
040622             0041*   ; upper byte
040622 22 3D 06 04 0042*       ld (@scratch),hl ; 7 cycles
040626 5F          0043*       ld e,a
040627 3A 3F 06 04 0044*       ld a,(@scratch+2)
04062B 57          0045*       ld d,a
04062C ED 5C       0046*       mlt de
04062E 08          0047*       ex af,af' ; restore carry
04062F 8B          0048*       adc a,e ; add carry
040630 32 3F 06 04 0049*       ld (@scratch+2),a ; 5 cycles
040634 2A 3D 06 04 0050*       ld hl,(@scratch) ; 7 cycles
040638             0051*   ; highest byte
040638 3E 00       0052*       ld a,0 ; preserve carry flag
04063A 8A          0053*       adc a,d ; product highest byte
04063B D1          0054*       pop de ; restore de
04063C C9          0055*       ret
04063D             0056*   @scratch: ds 3
040640             0057*   
       FF FF FF 
040640 00 00 00 00 0058*   mul24out: blkb 6,0
       00 00       
040646             0059*   
040646             0060*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040646             0061*   ; operation: UHL * UDE --> mul24out
040646             0062*   mul24:
040646 DD E5       0063*       push ix ; preserve
040648             0064*   ; point to output buffer and clear it
040648 DD 21 40 06 0065*       ld ix,mul24out
       04          
04064D C5          0066*       push bc
04064E 01 00 00 00 0067*       ld bc,0
040652 DD 0F 00    0068*       ld (ix),bc
040655 DD 0F 03    0069*       ld (ix+3),bc
040658 C1          0070*       pop bc
040659             0071*   ; STEP 1: UHL * E
040659 7B          0072*       ld a,e
04065A E5          0073*       push hl
04065B CD 10 06 04 0074*       call mul24x8
04065F DD 2F 00    0075*       ld (ix+0),hl
040662 DD 77 03    0076*       ld (ix+3),a
040665             0077*   ; STEP 2: UHL * D
040665 E1          0078*       pop hl
040666 E5          0079*       push hl
040667 7A          0080*       ld a,d
040668 CD 10 06 04 0081*       call mul24x8
04066C CD 85 06 04 0082*       call @accumulate
040670             0083*   ; STEP 3: UHL * DEU
040670 E1          0084*       pop hl
040671 ED 53 B5 06 0085*       ld (@de),de
       04          
040676 3A B7 06 04 0086*       ld a,(@de+2)
04067A CD 10 06 04 0087*       call mul24x8
04067E CD 85 06 04 0088*       call @accumulate
040682             0089*   ; all done
040682 DD E1       0090*       pop ix ; restore
040684 C9          0091*       ret
040685             0092*   @accumulate:
040685 DD 23       0093*       inc ix
040687             0094*   ; highest byte of product to carry
040687 DD 77 03    0095*       ld (ix+3),a
04068A             0096*   ; low byte of product
04068A 7D          0097*       ld a,l
04068B DD 86 00    0098*       add a,(ix+0)
04068E DD 77 00    0099*       ld (ix+0),a
040691             0100*   ; high byte of product
040691 7C          0101*       ld a,h
040692 DD 8E 01    0102*       adc a,(ix+1)
040695 DD 77 01    0103*       ld (ix+1),a
040698             0104*   ; uppper byte of product
040698 22 B2 06 04 0105*       ld (@hl),hl
04069C 3A B4 06 04 0106*       ld a,(@hl+2)
0406A0 DD 8E 02    0107*       adc a,(ix+2)
0406A3 DD 77 02    0108*       ld (ix+2),a
0406A6             0109*   ; carry
0406A6 3E 00       0110*       ld a,0 ; preserve flags
0406A8 DD 8E 03    0111*       adc a,(ix+3)
0406AB DD 77 03    0112*       ld (ix+3),a
0406AE C9          0113*       ret
0406AF             0114*   
0406AF 00 00 00    0115*   @ix: dl 0
0406B2 00 00 00    0116*   @hl: dl 0
0406B5 00 00 00    0117*   @de: dl 0
0406B8             0118*   
0406B8             0119*   ; ; UHL * UDE --> UHL (unsigned)
0406B8             0120*   ; umul24:
0406B8             0121*   ;     call mul24
0406B8             0122*   ;     ld hl,(mul24out)
0406B8             0123*   ;     ret
0406B8             0124*   
0406B8             0125*   ; UH.L = UH.L*UD.E (unsigned)
0406B8             0126*   umul168:
0406B8 CD 46 06 04 0127*       call mul24
0406BC 2A 41 06 04 0128*       ld hl,(mul24out+1)
0406C0 C9          0129*       ret
0406C1             0130*   
0406C1             0131*   ; UH.L * UD.E --> UH.L (signed)
0406C1             0132*   smul168:
0406C1             0133*   ; make everything positive and store sign flags
0406C1 CD 06 05 04 0134*       call hlu_abs
0406C5 F5          0135*       push af
0406C6 EB          0136*       ex de,hl
0406C7 CD 06 05 04 0137*       call hlu_abs
0406CB EB          0138*       ex de,hl
0406CC F5          0139*       push af
0406CD             0140*   ; do the division
0406CD CD B8 06 04 0141*       call umul168 ; hl = product
0406D1             0142*   ; adjust sign of result
0406D1 F1          0143*       pop af ; sign de
0406D2 FA DD 06 04 0144*       jp m,@de_neg
0406D6 F1          0145*       pop af ; sign hl
0406D7 F0          0146*       ret p ; both positive, nothing to do
0406D8             0147*   @hl_neg:
0406D8 CD 16 05 04 0148*       call neg_hlu ; de pos, hl neg, result is negative
0406DC C9          0149*       ret
0406DD             0150*   @de_neg:
0406DD F1          0151*       pop af
0406DE F8          0152*       ret m ; both negative, nothing to do
0406DF CD 16 05 04 0153*       call neg_hlu ; result is negative
0406E3 C9          0154*       ret
0406E4             0155*   
0406E4             0156*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
0406E4             0157*   ; perform unsigned division of 16.8 fixed place values
0406E4             0158*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
0406E4             0159*   udiv168:
0406E4             0160*   ; back up divisor
0406E4 ED 53 1B 07 0161*       ld (@ude),de
       04          
0406E9             0162*   ; get the 16-bit integer part of the quotient
0406E9 CD 07 04 04 0163*       call udiv24 ; de = quotient, hl = remainder
0406ED             0164*   ; load quotient to upper three bytes of output
0406ED ED 53 22 07 0165*       ld (div168_out+1),de
       04          
0406F2             0166*   @div256:
0406F2             0167*   ; multiply remainder by 256
0406F2             0168*       hlu_mul256
0406F2 29          0001*M1     add hl,hl ; * 2
0406F3 29          0002*M1     add hl,hl ; * 4
0406F4 29          0003*M1     add hl,hl ; * 8
0406F5 29          0004*M1     add hl,hl ; * 16
0406F6 29          0005*M1     add hl,hl ; * 32
0406F7 29          0006*M1     add hl,hl ; * 64
0406F8 29          0007*M1     add hl,hl ; * 128
0406F9 29          0008*M1     add hl,hl ; * 256
0406FA             0169*   ; skip fractional computation if remainder is zero
0406FA             0170*       SIGN_HLU
0406FA 19          0001*M1     add hl,de ; 1 cycle
0406FB B7          0002*M1     or a ; clear flags ; 1 cycle
0406FC ED 52       0003*M1     sbc hl,de ; 2 cycles
0406FE             0004*M1     ; 4 cycles total
0406FE 20 03       0171*       jr nz,@div_frac
040700 AF          0172*       xor a
040701 18 0A       0173*       jr @write_frac
040703             0174*   ; now divide the shifted remainder by the divisor
040703             0175*   @div_frac:
040703 ED 5B 1B 07 0176*       ld de,(@ude) ; get back divisor
       04          
040708 CD 07 04 04 0177*       call udiv24 ; de = quotient, hl = remainder
04070C             0178*   ; load low byte of quotient to low byte of output
04070C 7B          0179*       ld a,e
04070D             0180*   @write_frac:
04070D 32 21 07 04 0181*       ld (div168_out),a
040711             0182*   ; load de with return value
040711 ED 5B 21 07 0183*       ld de,(div168_out)
       04          
040716             0184*   ; load a with any overflow
040716 3A 24 07 04 0185*       ld a,(div168_out+3)
04071A C9          0186*       ret ; ud.e is the 16.8 result
04071B             0187*   @ude: ds 6
040721             0188*   div168_out: ds 4 ; the extra byte is for overflow
040725             0189*   
040725             0190*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040725             0191*   ; perform signed division of 16.8 fixed place values
040725             0192*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040725             0193*   sdiv168:
040725             0194*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040725 CD 06 05 04 0195*       call hlu_abs
040729 F5          0196*       push af
04072A EB          0197*       ex de,hl
04072B CD 06 05 04 0198*       call hlu_abs
04072F EB          0199*       ex de,hl
040730 F5          0200*       push af
040731             0201*   ; do the division
040731 CD E4 06 04 0202*       call udiv168 ; de = quotient, hl = remainder
040735             0203*   ; adjust sign of result
040735 F1          0204*       pop af ; sign de
040736 FA 43 07 04 0205*       jp m,@de_neg
04073A F1          0206*       pop af ; sign hl
04073B F0          0207*       ret p ; both positive, nothing to do
04073C             0208*   @hl_neg:
04073C EB          0209*       ex de,hl ; hl = quotient, de = remainder
04073D CD 16 05 04 0210*       call neg_hlu ; de pos, hl neg, result is negative
040741 EB          0211*       ex de,hl ; de = negated quotient, hl = remainder
040742 C9          0212*       ret
040743             0213*   @de_neg:
040743 F1          0214*       pop af
040744 F8          0215*       ret m ; both negative, nothing to do
040745 EB          0216*       ex de,hl ; hl = quotient, de = remainder
040746 CD 16 05 04 0217*       call neg_hlu ; result is negative
04074A EB          0218*       ex de,hl ; de = negated quotient, hl = remainder
04074B C9          0219*       ret
04074C             0220*   
04074C             0221*   ; convert signed angles from a 360 to 256 degree circle
04074C             0222*   ; inputs: uh.l is the angle360 in 16.8 fixed format
04074C             0223*   ; outputs: uh.l is the angle256 in 16.8 fixed format
04074C             0224*   ; destroys: TODO
04074C             0225*   deg_360_to_256:
04074C D5          0226*       push de ; preserve de
04074D             0227*   ; make angle positive and store sign flag
04074D CD 06 05 04 0228*       call hlu_abs
040751 F5          0229*       push af
040752             0230*   ; multiply by coversion factor of 256/360
040752 11 B6 00 00 0231*       ld de,0x0000B6 ; 0.711
040756 CD B8 06 04 0232*       call umul168 ; uh.l = uh.l * 0.711
04075A             0233*   ; restore sign flag and adjust output accordingly
04075A F1          0234*       pop af
04075B F2 63 07 04 0235*       jp p,@pos ; positive number
04075F CD 16 05 04 0236*       call neg_hlu
040763             0237*   @pos:
040763             0238*   ; restore de and return uh.l as the result
040763 D1          0239*       pop de
040764 C9          0240*       ret
040765             0241*   
040765             0242*   ; convert signed angles from a 256 to 360 degree circle
040765             0243*   ; inputs: uh.l is the angle256 in 16.8 fixed format
040765             0244*   ; outputs: uh.l is the angle360 in 16.8 fixed format
040765             0245*   ; destroys: TODO
040765             0246*   deg_256_to_360:
040765 D5          0247*       push de ; preserve de
040766             0248*   ; make angle positive and store sign flag
040766 CD 06 05 04 0249*       call hlu_abs
04076A F5          0250*       push af
04076B             0251*   ; multiply by coversion factor of 360/256
04076B 11 68 01 00 0252*       ld de,0x000168 ; 1.406
04076F CD B8 06 04 0253*       call umul168 ; uh.l = uh.l * 1.406
040773             0254*   ; restore sign flag and adjust output accordingly
040773 F1          0255*       pop af
040774 F2 7C 07 04 0256*       jp p,@pos ; positive number
040778 CD 16 05 04 0257*       call neg_hlu
04077C             0258*   @pos:
04077C             0259*   ; restore de and return uh.l as the result
04077C D1          0260*       pop de
04077D C9          0261*       ret
04077E             0262*   
04077E             0263*   ; fixed 16.8 routine
04077E             0264*   ; cos(uh.l) --> uh.l
04077E             0265*   ; destroys: f, hl
04077E             0266*   cos168:
04077E D5          0267*       push de ; preserve de
04077F             0268*   ; for cos we simply increment the angle by 90 degrees
04077F             0269*   ; or 0x004000 in 16.8 degrees256
04077F             0270*   ; which makes it a sin problem
04077F 11 00 40 00 0271*       ld de,0x004000
040783 19          0272*       add hl,de ; modulo 256 happens below
040784 D1          0273*       pop de ; restore de
040785             0274*   ; fall through to sin168
040785             0275*   
040785             0276*   ; ---------------------
040785             0277*   ; fixed 16.8 routine
040785             0278*   ; sin(uh.l) --> uh.l
040785             0279*   ; destroys: f, hl
040785             0280*   sin168:
040785 D5          0281*       push de
040786             0282*   ; handle negative angles appropriately
040786 CD 06 05 04 0283*       call hlu_abs
04078A F2 93 07 04 0284*       jp p,@F
04078E 11 00 00 FF 0285*       ld de,-256*256
040792 19          0286*       add hl,de
040793             0287*   @@:
040793 2E 03       0288*       ld l,3 ; multiply by 3 to get our lookup index
040795 ED 6C       0289*       mlt hl
040797 11 4B 0A 04 0290*       ld de,sin_lut_168 ; grab the lut address
04079B 19          0291*       add hl,de ; bump hl by the index
04079C ED 27       0292*       ld hl,(hl) ; don't try this on a z80!
04079E D1          0293*       pop de
04079F C9          0294*       ret
0407A0             0295*   
0407A0             0296*   ; 16.8 fixed inputs / outputs
0407A0             0297*   ; takes: uh.l as angle in degrees 256
0407A0             0298*   ;        ud.e as radius
0407A0             0299*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
0407A0             0300*   ;        displacements from origin (0,0)
0407A0             0301*   ; destroys: everything except indexes
0407A0             0302*   polar_to_cartesian:
0407A0             0303*   ; back up input parameters
0407A0 22 CF 07 04 0304*       ld (@angle), hl
0407A4 ED 53 D2 07 0305*       ld (@radius), de
       04          
0407A9             0306*   ; compute dx = sin(uh.l) * ud.e
0407A9 CD 85 07 04 0307*       call sin168 ; uh.l = sin(uh.l)
0407AD ED 5B D2 07 0308*       ld de,(@radius)
       04          
0407B2 CD C1 06 04 0309*       call smul168 ; uh.l = dx
0407B6 E5          0310*       push hl
0407B7             0311*   ; compute dy = -cos(uh.l) * ud.e
0407B7 2A CF 07 04 0312*       ld hl,(@angle)
0407BB CD 7E 07 04 0313*       call cos168 ; uh.l = cos(uh.l)
0407BF ED 5B D2 07 0314*       ld de,(@radius)
       04          
0407C4 CD C1 06 04 0315*       call smul168 ; uh.l = dy
0407C8 CD 16 05 04 0316*       call neg_hlu ; invert dy for screen coords convention
0407CC EB          0317*       ex de,hl ; de = dy for output
0407CD C1          0318*       pop bc ; bc = dx for output
0407CE             0319*   ; and out
0407CE C9          0320*       ret
0407CF             0321*   @angle: ds 3
0407D2             0322*   @radius: ds 3
0407D5             0323*   
0407D5             0324*   ; 16.8 fixed inputs / outputs
0407D5             0325*   ; inputs: ub.c as dx, ud.e as dy
0407D5             0326*   ;        displacements from origin (0,0)
0407D5             0327*   ; returns: uh.l as angle in degrees 256
0407D5             0328*   ;        ud.e as radius
0407D5             0329*   ; destroys: everything except indexes
0407D5             0330*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
0407D5 ED 43 2E 08 0331*       ld (dx168),bc ; dx argument for distance168
       04          
0407DA ED 53 34 08 0332*       ld (dy168),de ; dy argument for distance168
       04          
0407DF             0333*   ; compute radius
0407DF CD 3A 08 04 0334*       call distance168 ; uh.l = radius
0407E3 E5          0335*       push hl ; save radius
0407E4             0336*   ; compute angle
0407E4 ED 4B 2E 08 0337*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
0407E9 ED 5B 34 08 0338*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
0407EE CD 9A 08 04 0339*       call atan2_168fast ; uh.l = angle
0407F2             0340*   ; return result
0407F2 D1          0341*       pop de ; de = radius (was hl)
0407F3 C9          0342*       ret
0407F4             0343*   ; end cartesian_to_polar
0407F4             0344*   
0407F4             0345*   ; 16.8 fixed inputs / outputs
0407F4             0346*   ; inputs: ub.c as dx, ud.e as dy
0407F4             0347*   ;        displacements from origin (0,0)
0407F4             0348*   ; returns: uh.l as angle in degrees 256
0407F4             0349*   ;        ud.e as radius
0407F4             0350*   ; destroys: everything except indexes
0407F4             0351*   ; note: uses distance168sm which is more accurate for small deltas
0407F4             0352*   cartesian_to_polar_sm:
0407F4 ED 43 2E 08 0353*       ld (dx168),bc ; dx argument for distance168
       04          
0407F9 ED 53 34 08 0354*       ld (dy168),de ; dy argument for distance168
       04          
0407FE             0355*   ; compute radius
0407FE CD 75 08 04 0356*       call distance168sm ; uh.l = radius
040802 E5          0357*       push hl ; save radius
040803             0358*   ; compute angle
040803 ED 4B 2E 08 0359*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040808 ED 5B 34 08 0360*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
04080D CD 9A 08 04 0361*       call atan2_168fast ; uh.l = angle
040811             0362*   ; return result
040811 D1          0363*       pop de ; de = radius (was hl)
040812 C9          0364*       ret
040813             0365*   ; end cartesian_to_polar
040813             0366*   
040813             0367*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040813             0368*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040813             0369*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040813             0370*   ;         also populates scratch locations dx168 and dy168
040813             0371*   ; destroys: a,hl,bc,de
040813             0372*   dxy168:
040813             0373*   ; compute dx = x1-x0
040813 AF          0374*       xor a ; clear carry
040814 DD E5       0375*       push ix ; move ix to hl via the stack
040816 E1          0376*       pop hl ; hl = x1
040817 ED 42       0377*       sbc hl,bc ; hl = dx
040819 22 2E 08 04 0378*       ld (dx168),hl ; dx to scratch
04081D             0379*   ; compute dy = y1-y0
04081D AF          0380*       xor a ; clear carry
04081E FD E5       0381*       push iy ; move iy to hl via the stack
040820 E1          0382*       pop hl ; hl = y1
040821 ED 52       0383*       sbc hl,de ; hl = dy
040823 22 34 08 04 0384*       ld (dy168),hl ; dy to scratch
040827             0385*   ; populate output registers and return
040827 EB          0386*       ex de,hl ; ud.e = dy
040828 ED 4B 2E 08 0387*       ld bc,(dx168) ; ub.c = dx
       04          
04082D C9          0388*       ret
04082E 00 00 00 00 0389*   dx168: blkb 6,0
       00 00       
040834 00 00 00 00 0390*   dy168: blkb 6,0
       00 00       
04083A             0391*   
04083A             0392*   ; compute the euclidian distance between two cartesian coordinates
04083A             0393*   ; using the formula d = sqrt(dx^2+dy^2)
04083A             0394*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
04083A             0395*   ; output; uh.l is the 16.8 fixed format distance
04083A             0396*   ;         also populates scratch locations dx168 and dy168
04083A             0397*   ; destroys: a,hl,bc,de
04083A             0398*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
04083A             0399*   ;       thus the result will always be an integer, albeit in 16.8 format
04083A             0400*   distance168:
04083A             0401*   ; compute dy^2
04083A 2A 34 08 04 0402*       ld hl,(dy168)
04083E CD 06 05 04 0403*       call hlu_abs
040842             0404*       ; call hlu_udiv256 ; make integer to avoid overflow
040842             0405*       SRL_UHL ; make integer to avoid overflow
040842 3B          0001*M1     dec sp ; 1 cycle
040843 E5          0002*M1     push hl ; 4 cycles
040844 33          0003*M1     inc sp ; 1 cycle
040845 E1          0004*M1     pop hl ; 4 cycles
040846 23          0005*M1     inc hl ; 1 cycle
040847 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040849             0007*M1     ; 13 cycles total
040849 E5          0406*       push hl
04084A D1          0407*       pop de
04084B CD EE 03 04 0408*       call umul24 ; hl = dy^2
04084F E5          0409*       push hl ; save dy^2
040850             0410*   ; compute dx^2
040850 2A 2E 08 04 0411*       ld hl,(dx168)
040854 CD 06 05 04 0412*       call hlu_abs
040858             0413*       ; call hlu_udiv256 ; make integer to avoid overflow
040858             0414*       SRL_UHL ; make integer to avoid overflow
040858 3B          0001*M1     dec sp ; 1 cycle
040859 E5          0002*M1     push hl ; 4 cycles
04085A 33          0003*M1     inc sp ; 1 cycle
04085B E1          0004*M1     pop hl ; 4 cycles
04085C 23          0005*M1     inc hl ; 1 cycle
04085D 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04085F             0007*M1     ; 13 cycles total
04085F E5          0415*       push hl
040860 D1          0416*       pop de
040861 CD EE 03 04 0417*       call umul24 ; hl = dx^2
040865             0418*   ; add dx^2 and dy^2
040865 D1          0419*       pop de ; de = dy^2 (was hl)
040866 19          0420*       add hl,de ; hl = dx^2 + dy^2
040867             0421*   ; compute the square root
040867 CD 65 09 04 0422*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
04086B EB          0423*       ex de,hl ; hl = distance
04086C             0424*       hlu_mul256 ; convert back to 16.8 fixed
04086C 29          0001*M1     add hl,hl ; * 2
04086D 29          0002*M1     add hl,hl ; * 4
04086E 29          0003*M1     add hl,hl ; * 8
04086F 29          0004*M1     add hl,hl ; * 16
040870 29          0005*M1     add hl,hl ; * 32
040871 29          0006*M1     add hl,hl ; * 64
040872 29          0007*M1     add hl,hl ; * 128
040873 29          0008*M1     add hl,hl ; * 256
040874 C9          0425*       ret
040875             0426*   
040875             0427*   ; compute the euclidian distance between two cartesian coordinates
040875             0428*   ; using the formula d = sqrt(dx^2+dy^2)
040875             0429*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040875             0430*   ; output; uh.l is the 16.8 fixed format distance
040875             0431*   ;         also populates scratch locations dx168 and dy168
040875             0432*   ; destroys: a,hl,bc,de
040875             0433*   ; NOTE: sm means 'small' because it doesn't round down the deltas
040875             0434*   ;       making it more accurate for small deltas,
040875             0435*   ;       but will overflow if used for screen-sized deltas
040875             0436*   distance168sm:
040875             0437*   ; compute dy^2
040875 2A 34 08 04 0438*       ld hl,(dy168)
040879 CD 06 05 04 0439*       call hlu_abs
04087D E5          0440*       push hl
04087E D1          0441*       pop de
04087F CD EE 03 04 0442*       call umul24 ; hl = dy^2
040883 E5          0443*       push hl ; save dy^2
040884             0444*   ; compute dx^2
040884 2A 2E 08 04 0445*       ld hl,(dx168)
040888 CD 06 05 04 0446*       call hlu_abs
04088C E5          0447*       push hl
04088D D1          0448*       pop de
04088E CD EE 03 04 0449*       call umul24 ; hl = dx^2
040892             0450*   ; add dx^2 and dy^2
040892 D1          0451*       pop de ; de = dy^2 (was hl)
040893 19          0452*       add hl,de ; hl = dx^2 + dy^2
040894             0453*   ; compute the square root
040894 CD 65 09 04 0454*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040898 EB          0455*       ex de,hl ; hl = distance
040899 C9          0456*       ret
04089A             0457*   
04089A             0458*   ; atan2_(ub.c,ud.e) --> uh.l
04089A             0459*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
04089A             0460*   ;   whether inputs are integers or fractional doesn't matter
04089A             0461*   ;   so long as the sign bit of the upper byte is correct
04089A             0462*   ; output: uh.l is the 16.8 fixed angle in degrees 256
04089A             0463*   ; angles are COMPASS HEADINGS based on
04089A             0464*   ; screen coordinate conventions,where the y axis is flipped
04089A             0465*   ; #E0 224      0       32 #20
04089A             0466*   ;        -x,-y | +x,-y
04089A             0467*   ; #C0 192------+------ 64 #40
04089A             0468*   ;        -x,+y | +x,+y
04089A             0469*   ; #A0 160   128 #80   96 #60
04089A             0470*   atan2_168fast:
04089A             0471*   ; get signs and make everything positive
04089A             0472*   ; get abs(x) and store its original sign
04089A C5          0473*       push bc
04089B E1          0474*       pop hl
04089C CD 06 05 04 0475*       call hlu_abs ; if x was negative this also sets the sign flag
0408A0 E5          0476*       push hl ; store abs(x)
0408A1 C1          0477*       pop bc ; bc = abs(x)
0408A2 F5          0478*       push af ; store sign of x
0408A3             0479*   ; get abs(y) and store its original sign
0408A3 EB          0480*       ex de,hl ; hl = y
0408A4 CD 06 05 04 0481*       call hlu_abs ; if y was negative this also sets the sign flag
0408A8 EB          0482*       ex de,hl ; de = abs(y)
0408A9 F5          0483*       push af ; store sign of y
0408AA             0484*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0408AA             0485*   ; this ensures that our lookup value is between 0 and 1 inclusive
0408AA AF          0486*       xor a ; clear the carry flag
0408AB D5          0487*       push de
0408AC E1          0488*       pop hl
0408AD ED 42       0489*       sbc hl,bc
0408AF F5          0490*       push af ; save sign of de - bc
0408B0 F2 B9 08 04 0491*       jp p,@1 ; bc <= de, so we skip ahead
0408B4             0492*   ; otherwise we swap bc and de
0408B4 C5          0493*       push bc
0408B5 E1          0494*       pop hl
0408B6 EB          0495*       ex de,hl
0408B7 E5          0496*       push hl
0408B8 C1          0497*       pop bc
0408B9             0498*   @1:
0408B9             0499*   ; now we're ready to snag our preliminary result
0408B9 C5          0500*       push bc
0408BA E1          0501*       pop hl
0408BB CD 29 09 04 0502*       call atan_168fast ; uh.l comes back with prelim result
0408BF             0503*   ; now we adjust uh.l based on sign of de - bc
0408BF F1          0504*       pop af
0408C0 F2 CC 08 04 0505*       jp p,@2 ; bc <= de,so we skip ahead
0408C4 EB          0506*       ex de,hl
0408C5 21 00 40 00 0507*       ld hl,64*256 ; subtract from 64 (90) degrees
0408C9 AF          0508*       xor a ; clear the carry flag
0408CA ED 52       0509*       sbc hl,de
0408CC             0510*   @2:
0408CC             0511*   ; adjust the result based on quadrant
0408CC             0512*   ; #E0 224      0       32 #20
0408CC             0513*   ;        -x,-y | +x,-y
0408CC             0514*   ; #C0 192------+------ 64 #40
0408CC             0515*   ;        -x,+y | +x,+y
0408CC             0516*   ; #A0 160   128 #80   96 #60
0408CC F1          0517*       pop af ; sign of y
0408CD CA 0A 09 04 0518*       jp z,@y_zero
0408D1 F2 EA 08 04 0519*       jp p,@y_pos
0408D5             0520*   ; y neg,check x
0408D5 F1          0521*       pop af ; sign of x
0408D6 CA E4 08 04 0522*       jp z,@y_neg_x_zero
0408DA F2 E9 08 04 0523*       jp p,@y_neg_x_pos
0408DE             0524*   ; y neg,x neg
0408DE             0525*   ; angle is 128 to 256 (270 to 360)
0408DE             0526*   ; negating the intermediate does the trick
0408DE CD 16 05 04 0527*       call neg_hlu
0408E2 18 31       0528*       jr @zero_hlu
0408E4             0529*   
0408E4             0530*   @y_neg_x_zero:
0408E4             0531*   ; y neg,x zero
0408E4             0532*   ; angle is 0
0408E4 21 00 00 00 0533*       ld hl,0
0408E8 C9          0534*       ret
0408E9             0535*   @y_neg_x_pos:
0408E9             0536*   ; y neg,x pos
0408E9             0537*   ; angle is 0 to 64 (0 to 90)
0408E9             0538*   ; so we're good
0408E9 C9          0539*       ret
0408EA             0540*   
0408EA             0541*   @y_pos:
0408EA F1          0542*       pop af ; sign of x
0408EB CA FA 08 04 0543*       jp z,@y_pos_x_zero
0408EF F2 FF 08 04 0544*       jp p,@y_pos_x_pos
0408F3             0545*   ; y pos,x neg
0408F3             0546*   ; angle is 128 to 192 (180-270)
0408F3             0547*   ; so we add 128 to intermediate
0408F3 11 00 80 00 0548*       ld de,128*256
0408F7 19          0549*       add hl,de
0408F8 18 1B       0550*       jr @zero_hlu
0408FA             0551*   @y_pos_x_zero:
0408FA             0552*   ; y pos,x zero
0408FA             0553*   ; angle is 128 (180)
0408FA 21 00 80 00 0554*       ld hl,128*256
0408FE C9          0555*       ret
0408FF             0556*   @y_pos_x_pos:
0408FF             0557*   ; y pos,x pos
0408FF             0558*   ; angle is 64 to 128 (90 to 180)
0408FF             0559*   ; neg the intermediate and add 180 degrees
0408FF CD 16 05 04 0560*       call neg_hlu
040903 11 00 80 00 0561*       ld de,128*256
040907 19          0562*       add hl,de
040908 18 0B       0563*       jr @zero_hlu
04090A             0564*   
04090A             0565*   @y_zero:
04090A F1          0566*       pop af ; sign of x
04090B FA 10 09 04 0567*       jp m,@y_zero_x_neg
04090F             0568*   ; y zero,x pos
04090F             0569*   ; angle is 64 (90),nothing to do
04090F C9          0570*       ret
040910             0571*   @y_zero_x_neg:
040910             0572*   ; y zero ,x neg
040910             0573*   ; angle is 192 (270)
040910 21 00 C0 00 0574*       ld hl,192*256
040914 C9          0575*       ret
040915             0576*   @zero_hlu:
040915 AF          0577*       xor a
040916 22 23 09 04 0578*       ld (@scratch),hl
04091A 32 25 09 04 0579*       ld (@scratch+2),a
04091E 2A 23 09 04 0580*       ld hl,(@scratch)
040922 C9          0581*       ret
040923             0582*   @scratch: ds 6
040929             0583*   
040929             0584*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040929             0585*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
040929             0586*   ; destroys: a,hl,bc,de
040929             0587*   ; note: only works for angles from 0 to 32 (45) degrees
040929             0588*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040929             0589*   atan_168fast:
040929             0590*   ; because we use compass headings instead of geometric angles
040929             0591*   ; we compute dx/dy which is 1/tan(theta) in the maths world
040929             0592*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
040929 CD E4 06 04 0593*       call udiv168 ; ud.e = dx/dy
04092D EB          0594*       ex de,hl ; uh.l = dx/dy
04092E             0595*   ; test uh.l for 0
04092E 19          0596*       add hl,de
04092F B7          0597*       or a
040930 ED 52       0598*       sbc hl,de
040932 28 22       0599*       jr z,@is_zero
040934             0600*   ; test uh.l for 1
040934 AF          0601*       xor a ; clear carry
040935 EB          0602*       ex de,hl
040936 21 00 01 00 0603*       ld hl,1*256 ; 1 in 16.8 fixed format
04093A ED 52       0604*       sbc hl,de
04093C 28 13       0605*       jr z,@is_45
04093E EB          0606*       ex de,hl
04093F             0607*   ; no special cases so we move on
04093F             0608*   ; l contains the fractional portion of tan(uh.l)
04093F             0609*   ; we multiply it by three to get our lookup table index
04093F 26 03       0610*       ld h,3
040941 ED 6C       0611*       mlt hl ; index into lut
040943 11 00 00 00 0612*       ld de,0 ; clear deu
040947 54          0613*       ld d,h ; copy hl to de
040948 5D          0614*       ld e,l ; de contains our index
040949 21 4E 0D 04 0615*       ld hl,atan_lut_168 ; grab the lut address
04094D 19          0616*       add hl,de ; bump hl by the index
04094E ED 27       0617*       ld hl,(hl) ; don't try this on a z80!
040950 C9          0618*       ret ; and out
040951             0619*   @is_45:
040951 21 00 20 00 0620*       ld hl,32*256
040955 C9          0621*       ret
040956             0622*   ; for the case tan(0)
040956             0623*   @is_zero:
040956 21 00 00 00 0624*       ld hl,0*256
04095A C9          0625*       ret
04095B             0626*   
04095B             0627*   ; Expects  ADL mode
04095B             0628*   ; Inputs:  UH.L
04095B             0629*   ; Outputs: UH.L is the 16.8 square root
04095B             0630*   ;          UDE is the integer difference inputHL-DE^2
04095B             0631*   sqrt168:
04095B CD 65 09 04 0632*       call sqrt24
04095F EB          0633*       ex de,hl
040960 29          0634*       add hl,hl
040961 29          0635*       add hl,hl
040962 29          0636*       add hl,hl
040963 29          0637*       add hl,hl
040964 C9          0638*       ret
040965             0639*   
040965             0640*   ; credit: xeda112358
040965             0641*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040965             0642*   sqrt24:
040965             0643*   ; Expects ADL mode
040965             0644*   ; Inputs: HL
040965             0645*   ; Outputs: DE is the integer square root
040965             0646*   ;  HL is the difference inputHL-DE^2
040965             0647*   ;  c flag reset
040965 01 00 00 00 0648*       ld bc,0 ; clear bcu
040969 11 00 00 00 0649*       ld de,0 ; clear deu
04096D AF          0650*       xor a
04096E 45          0651*       ld b,l
04096F C5          0652*       push bc
040970 47          0653*       ld b,a
040971 6F          0654*       ld l,a
040972             0655*   ; Iteration 1
040972 29          0656*       add hl,hl
040973 CB 11       0657*       rl c
040975 29          0658*       add hl,hl
040976 CB 11       0659*       rl c
040978 91          0660*       sub c
040979 30 04       0661*       jr nc,$+6
04097B 1C          0662*       inc e
04097C 1C          0663*       inc e
04097D 2F          0664*       cpl
04097E 4F          0665*       ld c,a
04097F             0666*   ; Iteration 2
04097F 29          0667*       add hl,hl
040980 CB 11       0668*       rl c
040982 29          0669*       add hl,hl
040983 CB 11       0670*       rl c
040985 CB 13       0671*       rl e
040987 7B          0672*       ld a,e
040988 91          0673*       sub c
040989 30 04       0674*       jr nc,$+6
04098B 1C          0675*       inc e
04098C 1C          0676*       inc e
04098D 2F          0677*       cpl
04098E 4F          0678*       ld c,a
04098F             0679*   ; Iteration 3
04098F 29          0680*       add hl,hl
040990 CB 11       0681*       rl c
040992 29          0682*       add hl,hl
040993 CB 11       0683*       rl c
040995 CB 13       0684*       rl e
040997 7B          0685*       ld a,e
040998 91          0686*       sub c
040999 30 04       0687*       jr nc,$+6
04099B 1C          0688*       inc e
04099C 1C          0689*       inc e
04099D 2F          0690*       cpl
04099E 4F          0691*       ld c,a
04099F             0692*   ; Iteration 4
04099F 29          0693*       add hl,hl
0409A0 CB 11       0694*       rl c
0409A2 29          0695*       add hl,hl
0409A3 CB 11       0696*       rl c
0409A5 CB 13       0697*       rl e
0409A7 7B          0698*       ld a,e
0409A8 91          0699*       sub c
0409A9 30 04       0700*       jr nc,$+6
0409AB 1C          0701*       inc e
0409AC 1C          0702*       inc e
0409AD 2F          0703*       cpl
0409AE 4F          0704*       ld c,a
0409AF             0705*   ; Iteration 5
0409AF 29          0706*       add hl,hl
0409B0 CB 11       0707*       rl c
0409B2 29          0708*       add hl,hl
0409B3 CB 11       0709*       rl c
0409B5 CB 13       0710*       rl e
0409B7 7B          0711*       ld a,e
0409B8 91          0712*       sub c
0409B9 30 04       0713*       jr nc,$+6
0409BB 1C          0714*       inc e
0409BC 1C          0715*       inc e
0409BD 2F          0716*       cpl
0409BE 4F          0717*       ld c,a
0409BF             0718*   ; Iteration 6
0409BF 29          0719*       add hl,hl
0409C0 CB 11       0720*       rl c
0409C2 29          0721*       add hl,hl
0409C3 CB 11       0722*       rl c
0409C5 CB 13       0723*       rl e
0409C7 7B          0724*       ld a,e
0409C8 91          0725*       sub c
0409C9 30 04       0726*       jr nc,$+6
0409CB 1C          0727*       inc e
0409CC 1C          0728*       inc e
0409CD 2F          0729*       cpl
0409CE 4F          0730*       ld c,a
0409CF             0731*   ; Iteration 7
0409CF 29          0732*       add hl,hl
0409D0 CB 11       0733*       rl c
0409D2 29          0734*       add hl,hl
0409D3 CB 11       0735*       rl c
0409D5 CB 10       0736*       rl b
0409D7 EB          0737*       ex de,hl
0409D8 29          0738*       add hl,hl
0409D9 E5          0739*       push hl
0409DA ED 42       0740*       sbc hl,bc
0409DC 30 06       0741*       jr nc,$+8
0409DE 7C          0742*       ld a,h
0409DF 2F          0743*       cpl
0409E0 47          0744*       ld b,a
0409E1 7D          0745*       ld a,l
0409E2 2F          0746*       cpl
0409E3 4F          0747*       ld c,a
0409E4 E1          0748*       pop hl
0409E5 30 02       0749*       jr nc,$+4
0409E7 23          0750*       inc hl
0409E8 23          0751*       inc hl
0409E9 EB          0752*       ex de,hl
0409EA             0753*   ; Iteration 8
0409EA 29          0754*       add hl,hl
0409EB 69          0755*       ld l,c
0409EC 60          0756*       ld h,b
0409ED ED 6A       0757*       adc hl,hl
0409EF ED 6A       0758*       adc hl,hl
0409F1 EB          0759*       ex de,hl
0409F2 29          0760*       add hl,hl
0409F3 ED 52       0761*       sbc hl,de
0409F5 19          0762*       add hl,de
0409F6 EB          0763*       ex de,hl
0409F7 30 04       0764*       jr nc,$+6
0409F9 ED 52       0765*       sbc hl,de
0409FB 13          0766*       inc de
0409FC 13          0767*       inc de
0409FD             0768*   ; Iteration 9
0409FD F1          0769*       pop af
0409FE 17          0770*       rla
0409FF ED 6A       0771*       adc hl,hl
040A01 17          0772*       rla
040A02 ED 6A       0773*       adc hl,hl
040A04 EB          0774*       ex de,hl
040A05 29          0775*       add hl,hl
040A06 ED 52       0776*       sbc hl,de
040A08 19          0777*       add hl,de
040A09 EB          0778*       ex de,hl
040A0A 30 04       0779*       jr nc,$+6
040A0C ED 52       0780*       sbc hl,de
040A0E 13          0781*       inc de
040A0F 13          0782*       inc de
040A10             0783*   ; Iteration 10
040A10 17          0784*       rla
040A11 ED 6A       0785*       adc hl,hl
040A13 17          0786*       rla
040A14 ED 6A       0787*       adc hl,hl
040A16 EB          0788*       ex de,hl
040A17 29          0789*       add hl,hl
040A18 ED 52       0790*       sbc hl,de
040A1A 19          0791*       add hl,de
040A1B EB          0792*       ex de,hl
040A1C 30 04       0793*       jr nc,$+6
040A1E ED 52       0794*       sbc hl,de
040A20 13          0795*       inc de
040A21 13          0796*       inc de
040A22             0797*   ; Iteration 11
040A22 17          0798*       rla
040A23 ED 6A       0799*       adc hl,hl
040A25 17          0800*       rla
040A26 ED 6A       0801*       adc hl,hl
040A28 EB          0802*       ex de,hl
040A29 29          0803*       add hl,hl
040A2A ED 52       0804*       sbc hl,de
040A2C 19          0805*       add hl,de
040A2D EB          0806*       ex de,hl
040A2E 30 04       0807*       jr nc,$+6
040A30 ED 52       0808*       sbc hl,de
040A32 13          0809*       inc de
040A33 13          0810*       inc de
040A34             0811*   ; Iteration 12
040A34 17          0812*       rla
040A35 ED 6A       0813*       adc hl,hl
040A37 17          0814*       rla
040A38 ED 6A       0815*       adc hl,hl
040A3A EB          0816*       ex de,hl
040A3B 29          0817*       add hl,hl
040A3C ED 52       0818*       sbc hl,de
040A3E 19          0819*       add hl,de
040A3F EB          0820*       ex de,hl
040A40 30 04       0821*       jr nc,$+6
040A42 ED 52       0822*       sbc hl,de
040A44 13          0823*       inc de
040A45 13          0824*       inc de
040A46 CB 1A       0825*       rr d
040A48 CB 1B       0826*       rr e
040A4A C9          0827*       ret
040A4B             0828*   
040A4B             0829*   sin_lut_168:
040A4B 00 00 00    0830*       dl 0x000000 ; 0.000 00, 0.000
040A4E 06 00 00    0831*       dl 0x000006 ; 1.406 01, 0.025
040A51 0C 00 00    0832*       dl 0x00000C ; 2.813 02, 0.049
040A54 12 00 00    0833*       dl 0x000012 ; 4.219 03, 0.074
040A57 19 00 00    0834*       dl 0x000019 ; 5.625 04, 0.098
040A5A 1F 00 00    0835*       dl 0x00001F ; 7.031 05, 0.122
040A5D 25 00 00    0836*       dl 0x000025 ; 8.438 06, 0.147
040A60 2B 00 00    0837*       dl 0x00002B ; 9.844 07, 0.171
040A63 31 00 00    0838*       dl 0x000031 ; 11.250 08, 0.195
040A66 38 00 00    0839*       dl 0x000038 ; 12.656 09, 0.219
040A69 3E 00 00    0840*       dl 0x00003E ; 14.063 0A, 0.243
040A6C 44 00 00    0841*       dl 0x000044 ; 15.469 0B, 0.267
040A6F 4A 00 00    0842*       dl 0x00004A ; 16.875 0C, 0.290
040A72 50 00 00    0843*       dl 0x000050 ; 18.281 0D, 0.314
040A75 56 00 00    0844*       dl 0x000056 ; 19.688 0E, 0.337
040A78 5C 00 00    0845*       dl 0x00005C ; 21.094 0F, 0.360
040A7B 61 00 00    0846*       dl 0x000061 ; 22.500 10, 0.383
040A7E 67 00 00    0847*       dl 0x000067 ; 23.906 11, 0.405
040A81 6D 00 00    0848*       dl 0x00006D ; 25.313 12, 0.428
040A84 73 00 00    0849*       dl 0x000073 ; 26.719 13, 0.450
040A87 78 00 00    0850*       dl 0x000078 ; 28.125 14, 0.471
040A8A 7E 00 00    0851*       dl 0x00007E ; 29.531 15, 0.493
040A8D 83 00 00    0852*       dl 0x000083 ; 30.938 16, 0.514
040A90 88 00 00    0853*       dl 0x000088 ; 32.344 17, 0.535
040A93 8E 00 00    0854*       dl 0x00008E ; 33.750 18, 0.556
040A96 93 00 00    0855*       dl 0x000093 ; 35.156 19, 0.576
040A99 98 00 00    0856*       dl 0x000098 ; 36.563 1A, 0.596
040A9C 9D 00 00    0857*       dl 0x00009D ; 37.969 1B, 0.615
040A9F A2 00 00    0858*       dl 0x0000A2 ; 39.375 1C, 0.634
040AA2 A7 00 00    0859*       dl 0x0000A7 ; 40.781 1D, 0.653
040AA5 AB 00 00    0860*       dl 0x0000AB ; 42.188 1E, 0.672
040AA8 B0 00 00    0861*       dl 0x0000B0 ; 43.594 1F, 0.690
040AAB B5 00 00    0862*       dl 0x0000B5 ; 45.000 20, 0.707
040AAE B9 00 00    0863*       dl 0x0000B9 ; 46.406 21, 0.724
040AB1 BD 00 00    0864*       dl 0x0000BD ; 47.813 22, 0.741
040AB4 C1 00 00    0865*       dl 0x0000C1 ; 49.219 23, 0.757
040AB7 C5 00 00    0866*       dl 0x0000C5 ; 50.625 24, 0.773
040ABA C9 00 00    0867*       dl 0x0000C9 ; 52.031 25, 0.788
040ABD CD 00 00    0868*       dl 0x0000CD ; 53.438 26, 0.803
040AC0 D1 00 00    0869*       dl 0x0000D1 ; 54.844 27, 0.818
040AC3 D4 00 00    0870*       dl 0x0000D4 ; 56.250 28, 0.831
040AC6 D8 00 00    0871*       dl 0x0000D8 ; 57.656 29, 0.845
040AC9 DB 00 00    0872*       dl 0x0000DB ; 59.063 2A, 0.858
040ACC DE 00 00    0873*       dl 0x0000DE ; 60.469 2B, 0.870
040ACF E1 00 00    0874*       dl 0x0000E1 ; 61.875 2C, 0.882
040AD2 E4 00 00    0875*       dl 0x0000E4 ; 63.281 2D, 0.893
040AD5 E7 00 00    0876*       dl 0x0000E7 ; 64.688 2E, 0.904
040AD8 EA 00 00    0877*       dl 0x0000EA ; 66.094 2F, 0.914
040ADB EC 00 00    0878*       dl 0x0000EC ; 67.500 30, 0.924
040ADE EE 00 00    0879*       dl 0x0000EE ; 68.906 31, 0.933
040AE1 F1 00 00    0880*       dl 0x0000F1 ; 70.313 32, 0.942
040AE4 F3 00 00    0881*       dl 0x0000F3 ; 71.719 33, 0.950
040AE7 F4 00 00    0882*       dl 0x0000F4 ; 73.125 34, 0.957
040AEA F6 00 00    0883*       dl 0x0000F6 ; 74.531 35, 0.964
040AED F8 00 00    0884*       dl 0x0000F8 ; 75.938 36, 0.970
040AF0 F9 00 00    0885*       dl 0x0000F9 ; 77.344 37, 0.976
040AF3 FB 00 00    0886*       dl 0x0000FB ; 78.750 38, 0.981
040AF6 FC 00 00    0887*       dl 0x0000FC ; 80.156 39, 0.985
040AF9 FD 00 00    0888*       dl 0x0000FD ; 81.563 3A, 0.989
040AFC FE 00 00    0889*       dl 0x0000FE ; 82.969 3B, 0.992
040AFF FE 00 00    0890*       dl 0x0000FE ; 84.375 3C, 0.995
040B02 FF 00 00    0891*       dl 0x0000FF ; 85.781 3D, 0.997
040B05 FF 00 00    0892*       dl 0x0000FF ; 87.188 3E, 0.999
040B08 FF 00 00    0893*       dl 0x0000FF ; 88.594 3F, 1.000
040B0B 00 01 00    0894*       dl 0x000100 ; 90.000 40, 1.000
040B0E FF 00 00    0895*       dl 0x0000FF ; 91.406 41, 1.000
040B11 FF 00 00    0896*       dl 0x0000FF ; 92.813 42, 0.999
040B14 FF 00 00    0897*       dl 0x0000FF ; 94.219 43, 0.997
040B17 FE 00 00    0898*       dl 0x0000FE ; 95.625 44, 0.995
040B1A FE 00 00    0899*       dl 0x0000FE ; 97.031 45, 0.992
040B1D FD 00 00    0900*       dl 0x0000FD ; 98.438 46, 0.989
040B20 FC 00 00    0901*       dl 0x0000FC ; 99.844 47, 0.985
040B23 FB 00 00    0902*       dl 0x0000FB ; 101.250 48, 0.981
040B26 F9 00 00    0903*       dl 0x0000F9 ; 102.656 49, 0.976
040B29 F8 00 00    0904*       dl 0x0000F8 ; 104.063 4A, 0.970
040B2C F6 00 00    0905*       dl 0x0000F6 ; 105.469 4B, 0.964
040B2F F4 00 00    0906*       dl 0x0000F4 ; 106.875 4C, 0.957
040B32 F3 00 00    0907*       dl 0x0000F3 ; 108.281 4D, 0.950
040B35 F1 00 00    0908*       dl 0x0000F1 ; 109.688 4E, 0.942
040B38 EE 00 00    0909*       dl 0x0000EE ; 111.094 4F, 0.933
040B3B EC 00 00    0910*       dl 0x0000EC ; 112.500 50, 0.924
040B3E EA 00 00    0911*       dl 0x0000EA ; 113.906 51, 0.914
040B41 E7 00 00    0912*       dl 0x0000E7 ; 115.313 52, 0.904
040B44 E4 00 00    0913*       dl 0x0000E4 ; 116.719 53, 0.893
040B47 E1 00 00    0914*       dl 0x0000E1 ; 118.125 54, 0.882
040B4A DE 00 00    0915*       dl 0x0000DE ; 119.531 55, 0.870
040B4D DB 00 00    0916*       dl 0x0000DB ; 120.938 56, 0.858
040B50 D8 00 00    0917*       dl 0x0000D8 ; 122.344 57, 0.845
040B53 D4 00 00    0918*       dl 0x0000D4 ; 123.750 58, 0.831
040B56 D1 00 00    0919*       dl 0x0000D1 ; 125.156 59, 0.818
040B59 CD 00 00    0920*       dl 0x0000CD ; 126.563 5A, 0.803
040B5C C9 00 00    0921*       dl 0x0000C9 ; 127.969 5B, 0.788
040B5F C5 00 00    0922*       dl 0x0000C5 ; 129.375 5C, 0.773
040B62 C1 00 00    0923*       dl 0x0000C1 ; 130.781 5D, 0.757
040B65 BD 00 00    0924*       dl 0x0000BD ; 132.188 5E, 0.741
040B68 B9 00 00    0925*       dl 0x0000B9 ; 133.594 5F, 0.724
040B6B B5 00 00    0926*       dl 0x0000B5 ; 135.000 60, 0.707
040B6E B0 00 00    0927*       dl 0x0000B0 ; 136.406 61, 0.690
040B71 AB 00 00    0928*       dl 0x0000AB ; 137.813 62, 0.672
040B74 A7 00 00    0929*       dl 0x0000A7 ; 139.219 63, 0.653
040B77 A2 00 00    0930*       dl 0x0000A2 ; 140.625 64, 0.634
040B7A 9D 00 00    0931*       dl 0x00009D ; 142.031 65, 0.615
040B7D 98 00 00    0932*       dl 0x000098 ; 143.438 66, 0.596
040B80 93 00 00    0933*       dl 0x000093 ; 144.844 67, 0.576
040B83 8E 00 00    0934*       dl 0x00008E ; 146.250 68, 0.556
040B86 88 00 00    0935*       dl 0x000088 ; 147.656 69, 0.535
040B89 83 00 00    0936*       dl 0x000083 ; 149.063 6A, 0.514
040B8C 7E 00 00    0937*       dl 0x00007E ; 150.469 6B, 0.493
040B8F 78 00 00    0938*       dl 0x000078 ; 151.875 6C, 0.471
040B92 73 00 00    0939*       dl 0x000073 ; 153.281 6D, 0.450
040B95 6D 00 00    0940*       dl 0x00006D ; 154.688 6E, 0.428
040B98 67 00 00    0941*       dl 0x000067 ; 156.094 6F, 0.405
040B9B 61 00 00    0942*       dl 0x000061 ; 157.500 70, 0.383
040B9E 5C 00 00    0943*       dl 0x00005C ; 158.906 71, 0.360
040BA1 56 00 00    0944*       dl 0x000056 ; 160.313 72, 0.337
040BA4 50 00 00    0945*       dl 0x000050 ; 161.719 73, 0.314
040BA7 4A 00 00    0946*       dl 0x00004A ; 163.125 74, 0.290
040BAA 44 00 00    0947*       dl 0x000044 ; 164.531 75, 0.267
040BAD 3E 00 00    0948*       dl 0x00003E ; 165.938 76, 0.243
040BB0 38 00 00    0949*       dl 0x000038 ; 167.344 77, 0.219
040BB3 31 00 00    0950*       dl 0x000031 ; 168.750 78, 0.195
040BB6 2B 00 00    0951*       dl 0x00002B ; 170.156 79, 0.171
040BB9 25 00 00    0952*       dl 0x000025 ; 171.563 7A, 0.147
040BBC 1F 00 00    0953*       dl 0x00001F ; 172.969 7B, 0.122
040BBF 19 00 00    0954*       dl 0x000019 ; 174.375 7C, 0.098
040BC2 12 00 00    0955*       dl 0x000012 ; 175.781 7D, 0.074
040BC5 0C 00 00    0956*       dl 0x00000C ; 177.188 7E, 0.049
040BC8 06 00 00    0957*       dl 0x000006 ; 178.594 7F, 0.025
040BCB 00 00 00    0958*       dl 0x000000 ; 180.000 80, 0.000
040BCE FA FF FF    0959*       dl 0xFFFFFA ; 181.406 81, -0.025
040BD1 F4 FF FF    0960*       dl 0xFFFFF4 ; 182.813 82, -0.049
040BD4 EE FF FF    0961*       dl 0xFFFFEE ; 184.219 83, -0.074
040BD7 E7 FF FF    0962*       dl 0xFFFFE7 ; 185.625 84, -0.098
040BDA E1 FF FF    0963*       dl 0xFFFFE1 ; 187.031 85, -0.122
040BDD DB FF FF    0964*       dl 0xFFFFDB ; 188.438 86, -0.147
040BE0 D5 FF FF    0965*       dl 0xFFFFD5 ; 189.844 87, -0.171
040BE3 CF FF FF    0966*       dl 0xFFFFCF ; 191.250 88, -0.195
040BE6 C8 FF FF    0967*       dl 0xFFFFC8 ; 192.656 89, -0.219
040BE9 C2 FF FF    0968*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040BEC BC FF FF    0969*       dl 0xFFFFBC ; 195.469 8B, -0.267
040BEF B6 FF FF    0970*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040BF2 B0 FF FF    0971*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040BF5 AA FF FF    0972*       dl 0xFFFFAA ; 199.688 8E, -0.337
040BF8 A4 FF FF    0973*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040BFB 9F FF FF    0974*       dl 0xFFFF9F ; 202.500 90, -0.383
040BFE 99 FF FF    0975*       dl 0xFFFF99 ; 203.906 91, -0.405
040C01 93 FF FF    0976*       dl 0xFFFF93 ; 205.313 92, -0.428
040C04 8D FF FF    0977*       dl 0xFFFF8D ; 206.719 93, -0.450
040C07 88 FF FF    0978*       dl 0xFFFF88 ; 208.125 94, -0.471
040C0A 82 FF FF    0979*       dl 0xFFFF82 ; 209.531 95, -0.493
040C0D 7D FF FF    0980*       dl 0xFFFF7D ; 210.938 96, -0.514
040C10 78 FF FF    0981*       dl 0xFFFF78 ; 212.344 97, -0.535
040C13 72 FF FF    0982*       dl 0xFFFF72 ; 213.750 98, -0.556
040C16 6D FF FF    0983*       dl 0xFFFF6D ; 215.156 99, -0.576
040C19 68 FF FF    0984*       dl 0xFFFF68 ; 216.563 9A, -0.596
040C1C 63 FF FF    0985*       dl 0xFFFF63 ; 217.969 9B, -0.615
040C1F 5E FF FF    0986*       dl 0xFFFF5E ; 219.375 9C, -0.634
040C22 59 FF FF    0987*       dl 0xFFFF59 ; 220.781 9D, -0.653
040C25 55 FF FF    0988*       dl 0xFFFF55 ; 222.188 9E, -0.672
040C28 50 FF FF    0989*       dl 0xFFFF50 ; 223.594 9F, -0.690
040C2B 4B FF FF    0990*       dl 0xFFFF4B ; 225.000 A0, -0.707
040C2E 47 FF FF    0991*       dl 0xFFFF47 ; 226.406 A1, -0.724
040C31 43 FF FF    0992*       dl 0xFFFF43 ; 227.813 A2, -0.741
040C34 3F FF FF    0993*       dl 0xFFFF3F ; 229.219 A3, -0.757
040C37 3B FF FF    0994*       dl 0xFFFF3B ; 230.625 A4, -0.773
040C3A 37 FF FF    0995*       dl 0xFFFF37 ; 232.031 A5, -0.788
040C3D 33 FF FF    0996*       dl 0xFFFF33 ; 233.438 A6, -0.803
040C40 2F FF FF    0997*       dl 0xFFFF2F ; 234.844 A7, -0.818
040C43 2C FF FF    0998*       dl 0xFFFF2C ; 236.250 A8, -0.831
040C46 28 FF FF    0999*       dl 0xFFFF28 ; 237.656 A9, -0.845
040C49 25 FF FF    1000*       dl 0xFFFF25 ; 239.063 AA, -0.858
040C4C 22 FF FF    1001*       dl 0xFFFF22 ; 240.469 AB, -0.870
040C4F 1F FF FF    1002*       dl 0xFFFF1F ; 241.875 AC, -0.882
040C52 1C FF FF    1003*       dl 0xFFFF1C ; 243.281 AD, -0.893
040C55 19 FF FF    1004*       dl 0xFFFF19 ; 244.688 AE, -0.904
040C58 16 FF FF    1005*       dl 0xFFFF16 ; 246.094 AF, -0.914
040C5B 14 FF FF    1006*       dl 0xFFFF14 ; 247.500 B0, -0.924
040C5E 12 FF FF    1007*       dl 0xFFFF12 ; 248.906 B1, -0.933
040C61 0F FF FF    1008*       dl 0xFFFF0F ; 250.313 B2, -0.942
040C64 0D FF FF    1009*       dl 0xFFFF0D ; 251.719 B3, -0.950
040C67 0C FF FF    1010*       dl 0xFFFF0C ; 253.125 B4, -0.957
040C6A 0A FF FF    1011*       dl 0xFFFF0A ; 254.531 B5, -0.964
040C6D 08 FF FF    1012*       dl 0xFFFF08 ; 255.938 B6, -0.970
040C70 07 FF FF    1013*       dl 0xFFFF07 ; 257.344 B7, -0.976
040C73 05 FF FF    1014*       dl 0xFFFF05 ; 258.750 B8, -0.981
040C76 04 FF FF    1015*       dl 0xFFFF04 ; 260.156 B9, -0.985
040C79 03 FF FF    1016*       dl 0xFFFF03 ; 261.563 BA, -0.989
040C7C 02 FF FF    1017*       dl 0xFFFF02 ; 262.969 BB, -0.992
040C7F 02 FF FF    1018*       dl 0xFFFF02 ; 264.375 BC, -0.995
040C82 01 FF FF    1019*       dl 0xFFFF01 ; 265.781 BD, -0.997
040C85 01 FF FF    1020*       dl 0xFFFF01 ; 267.188 BE, -0.999
040C88 01 FF FF    1021*       dl 0xFFFF01 ; 268.594 BF, -1.000
040C8B 00 FF FF    1022*       dl 0xFFFF00 ; 270.000 C0, -1.000
040C8E 01 FF FF    1023*       dl 0xFFFF01 ; 271.406 C1, -1.000
040C91 01 FF FF    1024*       dl 0xFFFF01 ; 272.813 C2, -0.999
040C94 01 FF FF    1025*       dl 0xFFFF01 ; 274.219 C3, -0.997
040C97 02 FF FF    1026*       dl 0xFFFF02 ; 275.625 C4, -0.995
040C9A 02 FF FF    1027*       dl 0xFFFF02 ; 277.031 C5, -0.992
040C9D 03 FF FF    1028*       dl 0xFFFF03 ; 278.438 C6, -0.989
040CA0 04 FF FF    1029*       dl 0xFFFF04 ; 279.844 C7, -0.985
040CA3 05 FF FF    1030*       dl 0xFFFF05 ; 281.250 C8, -0.981
040CA6 07 FF FF    1031*       dl 0xFFFF07 ; 282.656 C9, -0.976
040CA9 08 FF FF    1032*       dl 0xFFFF08 ; 284.063 CA, -0.970
040CAC 0A FF FF    1033*       dl 0xFFFF0A ; 285.469 CB, -0.964
040CAF 0C FF FF    1034*       dl 0xFFFF0C ; 286.875 CC, -0.957
040CB2 0D FF FF    1035*       dl 0xFFFF0D ; 288.281 CD, -0.950
040CB5 0F FF FF    1036*       dl 0xFFFF0F ; 289.688 CE, -0.942
040CB8 12 FF FF    1037*       dl 0xFFFF12 ; 291.094 CF, -0.933
040CBB 14 FF FF    1038*       dl 0xFFFF14 ; 292.500 D0, -0.924
040CBE 16 FF FF    1039*       dl 0xFFFF16 ; 293.906 D1, -0.914
040CC1 19 FF FF    1040*       dl 0xFFFF19 ; 295.313 D2, -0.904
040CC4 1C FF FF    1041*       dl 0xFFFF1C ; 296.719 D3, -0.893
040CC7 1F FF FF    1042*       dl 0xFFFF1F ; 298.125 D4, -0.882
040CCA 22 FF FF    1043*       dl 0xFFFF22 ; 299.531 D5, -0.870
040CCD 25 FF FF    1044*       dl 0xFFFF25 ; 300.938 D6, -0.858
040CD0 28 FF FF    1045*       dl 0xFFFF28 ; 302.344 D7, -0.845
040CD3 2C FF FF    1046*       dl 0xFFFF2C ; 303.750 D8, -0.831
040CD6 2F FF FF    1047*       dl 0xFFFF2F ; 305.156 D9, -0.818
040CD9 33 FF FF    1048*       dl 0xFFFF33 ; 306.563 DA, -0.803
040CDC 37 FF FF    1049*       dl 0xFFFF37 ; 307.969 DB, -0.788
040CDF 3B FF FF    1050*       dl 0xFFFF3B ; 309.375 DC, -0.773
040CE2 3F FF FF    1051*       dl 0xFFFF3F ; 310.781 DD, -0.757
040CE5 43 FF FF    1052*       dl 0xFFFF43 ; 312.188 DE, -0.741
040CE8 47 FF FF    1053*       dl 0xFFFF47 ; 313.594 DF, -0.724
040CEB 4B FF FF    1054*       dl 0xFFFF4B ; 315.000 E0, -0.707
040CEE 50 FF FF    1055*       dl 0xFFFF50 ; 316.406 E1, -0.690
040CF1 55 FF FF    1056*       dl 0xFFFF55 ; 317.813 E2, -0.672
040CF4 59 FF FF    1057*       dl 0xFFFF59 ; 319.219 E3, -0.653
040CF7 5E FF FF    1058*       dl 0xFFFF5E ; 320.625 E4, -0.634
040CFA 63 FF FF    1059*       dl 0xFFFF63 ; 322.031 E5, -0.615
040CFD 68 FF FF    1060*       dl 0xFFFF68 ; 323.438 E6, -0.596
040D00 6D FF FF    1061*       dl 0xFFFF6D ; 324.844 E7, -0.576
040D03 72 FF FF    1062*       dl 0xFFFF72 ; 326.250 E8, -0.556
040D06 78 FF FF    1063*       dl 0xFFFF78 ; 327.656 E9, -0.535
040D09 7D FF FF    1064*       dl 0xFFFF7D ; 329.063 EA, -0.514
040D0C 82 FF FF    1065*       dl 0xFFFF82 ; 330.469 EB, -0.493
040D0F 88 FF FF    1066*       dl 0xFFFF88 ; 331.875 EC, -0.471
040D12 8D FF FF    1067*       dl 0xFFFF8D ; 333.281 ED, -0.450
040D15 93 FF FF    1068*       dl 0xFFFF93 ; 334.688 EE, -0.428
040D18 99 FF FF    1069*       dl 0xFFFF99 ; 336.094 EF, -0.405
040D1B 9F FF FF    1070*       dl 0xFFFF9F ; 337.500 F0, -0.383
040D1E A4 FF FF    1071*       dl 0xFFFFA4 ; 338.906 F1, -0.360
040D21 AA FF FF    1072*       dl 0xFFFFAA ; 340.313 F2, -0.337
040D24 B0 FF FF    1073*       dl 0xFFFFB0 ; 341.719 F3, -0.314
040D27 B6 FF FF    1074*       dl 0xFFFFB6 ; 343.125 F4, -0.290
040D2A BC FF FF    1075*       dl 0xFFFFBC ; 344.531 F5, -0.267
040D2D C2 FF FF    1076*       dl 0xFFFFC2 ; 345.938 F6, -0.243
040D30 C8 FF FF    1077*       dl 0xFFFFC8 ; 347.344 F7, -0.219
040D33 CF FF FF    1078*       dl 0xFFFFCF ; 348.750 F8, -0.195
040D36 D5 FF FF    1079*       dl 0xFFFFD5 ; 350.156 F9, -0.171
040D39 DB FF FF    1080*       dl 0xFFFFDB ; 351.563 FA, -0.147
040D3C E1 FF FF    1081*       dl 0xFFFFE1 ; 352.969 FB, -0.122
040D3F E7 FF FF    1082*       dl 0xFFFFE7 ; 354.375 FC, -0.098
040D42 EE FF FF    1083*       dl 0xFFFFEE ; 355.781 FD, -0.074
040D45 F4 FF FF    1084*       dl 0xFFFFF4 ; 357.188 FE, -0.049
040D48 FA FF FF    1085*       dl 0xFFFFFA ; 358.594 FF, -0.025
040D4B 00 00 00    1086*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
040D4E             1087*   
040D4E             1088*   atan_lut_168:
040D4E 00 00 00    1089*       dl 0x000000 ; 000000, 0.000
040D51 28 00 00    1090*       dl 0x000028 ; 000001, 0.224
040D54 51 00 00    1091*       dl 0x000051 ; 000002, 0.448
040D57 7A 00 00    1092*       dl 0x00007A ; 000003, 0.671
040D5A A2 00 00    1093*       dl 0x0000A2 ; 000004, 0.895
040D5D CB 00 00    1094*       dl 0x0000CB ; 000005, 1.119
040D60 F4 00 00    1095*       dl 0x0000F4 ; 000006, 1.343
040D63 1D 01 00    1096*       dl 0x00011D ; 000007, 1.566
040D66 45 01 00    1097*       dl 0x000145 ; 000008, 1.790
040D69 6E 01 00    1098*       dl 0x00016E ; 000009, 2.013
040D6C 97 01 00    1099*       dl 0x000197 ; 00000A, 2.237
040D6F BF 01 00    1100*       dl 0x0001BF ; 00000B, 2.460
040D72 E8 01 00    1101*       dl 0x0001E8 ; 00000C, 2.684
040D75 11 02 00    1102*       dl 0x000211 ; 00000D, 2.907
040D78 39 02 00    1103*       dl 0x000239 ; 00000E, 3.130
040D7B 62 02 00    1104*       dl 0x000262 ; 00000F, 3.353
040D7E 8B 02 00    1105*       dl 0x00028B ; 000010, 3.576
040D81 B3 02 00    1106*       dl 0x0002B3 ; 000011, 3.799
040D84 DC 02 00    1107*       dl 0x0002DC ; 000012, 4.022
040D87 04 03 00    1108*       dl 0x000304 ; 000013, 4.245
040D8A 2D 03 00    1109*       dl 0x00032D ; 000014, 4.467
040D8D 55 03 00    1110*       dl 0x000355 ; 000015, 4.690
040D90 7E 03 00    1111*       dl 0x00037E ; 000016, 4.912
040D93 A6 03 00    1112*       dl 0x0003A6 ; 000017, 5.134
040D96 CE 03 00    1113*       dl 0x0003CE ; 000018, 5.356
040D99 F7 03 00    1114*       dl 0x0003F7 ; 000019, 5.578
040D9C 1F 04 00    1115*       dl 0x00041F ; 00001A, 5.799
040D9F 48 04 00    1116*       dl 0x000448 ; 00001B, 6.021
040DA2 70 04 00    1117*       dl 0x000470 ; 00001C, 6.242
040DA5 98 04 00    1118*       dl 0x000498 ; 00001D, 6.463
040DA8 C0 04 00    1119*       dl 0x0004C0 ; 00001E, 6.684
040DAB E8 04 00    1120*       dl 0x0004E8 ; 00001F, 6.905
040DAE 11 05 00    1121*       dl 0x000511 ; 000020, 7.125
040DB1 39 05 00    1122*       dl 0x000539 ; 000021, 7.345
040DB4 61 05 00    1123*       dl 0x000561 ; 000022, 7.565
040DB7 89 05 00    1124*       dl 0x000589 ; 000023, 7.785
040DBA B1 05 00    1125*       dl 0x0005B1 ; 000024, 8.005
040DBD D9 05 00    1126*       dl 0x0005D9 ; 000025, 8.224
040DC0 01 06 00    1127*       dl 0x000601 ; 000026, 8.443
040DC3 28 06 00    1128*       dl 0x000628 ; 000027, 8.662
040DC6 50 06 00    1129*       dl 0x000650 ; 000028, 8.881
040DC9 78 06 00    1130*       dl 0x000678 ; 000029, 9.099
040DCC A0 06 00    1131*       dl 0x0006A0 ; 00002A, 9.317
040DCF C7 06 00    1132*       dl 0x0006C7 ; 00002B, 9.535
040DD2 EF 06 00    1133*       dl 0x0006EF ; 00002C, 9.752
040DD5 16 07 00    1134*       dl 0x000716 ; 00002D, 9.970
040DD8 3E 07 00    1135*       dl 0x00073E ; 00002E, 10.187
040DDB 65 07 00    1136*       dl 0x000765 ; 00002F, 10.403
040DDE 8D 07 00    1137*       dl 0x00078D ; 000030, 10.620
040DE1 B4 07 00    1138*       dl 0x0007B4 ; 000031, 10.836
040DE4 DB 07 00    1139*       dl 0x0007DB ; 000032, 11.051
040DE7 03 08 00    1140*       dl 0x000803 ; 000033, 11.267
040DEA 2A 08 00    1141*       dl 0x00082A ; 000034, 11.482
040DED 51 08 00    1142*       dl 0x000851 ; 000035, 11.697
040DF0 78 08 00    1143*       dl 0x000878 ; 000036, 11.911
040DF3 9F 08 00    1144*       dl 0x00089F ; 000037, 12.125
040DF6 C6 08 00    1145*       dl 0x0008C6 ; 000038, 12.339
040DF9 ED 08 00    1146*       dl 0x0008ED ; 000039, 12.553
040DFC 13 09 00    1147*       dl 0x000913 ; 00003A, 12.766
040DFF 3A 09 00    1148*       dl 0x00093A ; 00003B, 12.978
040E02 61 09 00    1149*       dl 0x000961 ; 00003C, 13.191
040E05 87 09 00    1150*       dl 0x000987 ; 00003D, 13.403
040E08 AE 09 00    1151*       dl 0x0009AE ; 00003E, 13.614
040E0B D4 09 00    1152*       dl 0x0009D4 ; 00003F, 13.825
040E0E FB 09 00    1153*       dl 0x0009FB ; 000040, 14.036
040E11 21 0A 00    1154*       dl 0x000A21 ; 000041, 14.247
040E14 47 0A 00    1155*       dl 0x000A47 ; 000042, 14.457
040E17 6D 0A 00    1156*       dl 0x000A6D ; 000043, 14.666
040E1A 94 0A 00    1157*       dl 0x000A94 ; 000044, 14.876
040E1D BA 0A 00    1158*       dl 0x000ABA ; 000045, 15.085
040E20 E0 0A 00    1159*       dl 0x000AE0 ; 000046, 15.293
040E23 05 0B 00    1160*       dl 0x000B05 ; 000047, 15.501
040E26 2B 0B 00    1161*       dl 0x000B2B ; 000048, 15.709
040E29 51 0B 00    1162*       dl 0x000B51 ; 000049, 15.916
040E2C 77 0B 00    1163*       dl 0x000B77 ; 00004A, 16.123
040E2F 9C 0B 00    1164*       dl 0x000B9C ; 00004B, 16.329
040E32 C2 0B 00    1165*       dl 0x000BC2 ; 00004C, 16.535
040E35 E7 0B 00    1166*       dl 0x000BE7 ; 00004D, 16.740
040E38 0C 0C 00    1167*       dl 0x000C0C ; 00004E, 16.945
040E3B 32 0C 00    1168*       dl 0x000C32 ; 00004F, 17.150
040E3E 57 0C 00    1169*       dl 0x000C57 ; 000050, 17.354
040E41 7C 0C 00    1170*       dl 0x000C7C ; 000051, 17.558
040E44 A1 0C 00    1171*       dl 0x000CA1 ; 000052, 17.761
040E47 C6 0C 00    1172*       dl 0x000CC6 ; 000053, 17.964
040E4A EB 0C 00    1173*       dl 0x000CEB ; 000054, 18.166
040E4D 0F 0D 00    1174*       dl 0x000D0F ; 000055, 18.368
040E50 34 0D 00    1175*       dl 0x000D34 ; 000056, 18.569
040E53 58 0D 00    1176*       dl 0x000D58 ; 000057, 18.770
040E56 7D 0D 00    1177*       dl 0x000D7D ; 000058, 18.970
040E59 A1 0D 00    1178*       dl 0x000DA1 ; 000059, 19.170
040E5C C6 0D 00    1179*       dl 0x000DC6 ; 00005A, 19.370
040E5F EA 0D 00    1180*       dl 0x000DEA ; 00005B, 19.569
040E62 0E 0E 00    1181*       dl 0x000E0E ; 00005C, 19.767
040E65 32 0E 00    1182*       dl 0x000E32 ; 00005D, 19.965
040E68 56 0E 00    1183*       dl 0x000E56 ; 00005E, 20.163
040E6B 7A 0E 00    1184*       dl 0x000E7A ; 00005F, 20.360
040E6E 9E 0E 00    1185*       dl 0x000E9E ; 000060, 20.556
040E71 C1 0E 00    1186*       dl 0x000EC1 ; 000061, 20.752
040E74 E5 0E 00    1187*       dl 0x000EE5 ; 000062, 20.947
040E77 08 0F 00    1188*       dl 0x000F08 ; 000063, 21.142
040E7A 2C 0F 00    1189*       dl 0x000F2C ; 000064, 21.337
040E7D 4F 0F 00    1190*       dl 0x000F4F ; 000065, 21.531
040E80 72 0F 00    1191*       dl 0x000F72 ; 000066, 21.724
040E83 95 0F 00    1192*       dl 0x000F95 ; 000067, 21.917
040E86 B8 0F 00    1193*       dl 0x000FB8 ; 000068, 22.109
040E89 DB 0F 00    1194*       dl 0x000FDB ; 000069, 22.301
040E8C FE 0F 00    1195*       dl 0x000FFE ; 00006A, 22.493
040E8F 21 10 00    1196*       dl 0x001021 ; 00006B, 22.683
040E92 44 10 00    1197*       dl 0x001044 ; 00006C, 22.874
040E95 66 10 00    1198*       dl 0x001066 ; 00006D, 23.063
040E98 89 10 00    1199*       dl 0x001089 ; 00006E, 23.253
040E9B AB 10 00    1200*       dl 0x0010AB ; 00006F, 23.441
040E9E CD 10 00    1201*       dl 0x0010CD ; 000070, 23.629
040EA1 EF 10 00    1202*       dl 0x0010EF ; 000071, 23.817
040EA4 11 11 00    1203*       dl 0x001111 ; 000072, 24.004
040EA7 33 11 00    1204*       dl 0x001133 ; 000073, 24.191
040EAA 55 11 00    1205*       dl 0x001155 ; 000074, 24.376
040EAD 77 11 00    1206*       dl 0x001177 ; 000075, 24.562
040EB0 99 11 00    1207*       dl 0x001199 ; 000076, 24.747
040EB3 BA 11 00    1208*       dl 0x0011BA ; 000077, 24.931
040EB6 DC 11 00    1209*       dl 0x0011DC ; 000078, 25.115
040EB9 FD 11 00    1210*       dl 0x0011FD ; 000079, 25.298
040EBC 1E 12 00    1211*       dl 0x00121E ; 00007A, 25.481
040EBF 3F 12 00    1212*       dl 0x00123F ; 00007B, 25.663
040EC2 60 12 00    1213*       dl 0x001260 ; 00007C, 25.844
040EC5 81 12 00    1214*       dl 0x001281 ; 00007D, 26.025
040EC8 A2 12 00    1215*       dl 0x0012A2 ; 00007E, 26.206
040ECB C3 12 00    1216*       dl 0x0012C3 ; 00007F, 26.386
040ECE E4 12 00    1217*       dl 0x0012E4 ; 000080, 26.565
040ED1 04 13 00    1218*       dl 0x001304 ; 000081, 26.744
040ED4 25 13 00    1219*       dl 0x001325 ; 000082, 26.922
040ED7 45 13 00    1220*       dl 0x001345 ; 000083, 27.100
040EDA 65 13 00    1221*       dl 0x001365 ; 000084, 27.277
040EDD 85 13 00    1222*       dl 0x001385 ; 000085, 27.453
040EE0 A5 13 00    1223*       dl 0x0013A5 ; 000086, 27.629
040EE3 C5 13 00    1224*       dl 0x0013C5 ; 000087, 27.805
040EE6 E5 13 00    1225*       dl 0x0013E5 ; 000088, 27.979
040EE9 05 14 00    1226*       dl 0x001405 ; 000089, 28.154
040EEC 24 14 00    1227*       dl 0x001424 ; 00008A, 28.327
040EEF 44 14 00    1228*       dl 0x001444 ; 00008B, 28.501
040EF2 63 14 00    1229*       dl 0x001463 ; 00008C, 28.673
040EF5 83 14 00    1230*       dl 0x001483 ; 00008D, 28.845
040EF8 A2 14 00    1231*       dl 0x0014A2 ; 00008E, 29.017
040EFB C1 14 00    1232*       dl 0x0014C1 ; 00008F, 29.187
040EFE E0 14 00    1233*       dl 0x0014E0 ; 000090, 29.358
040F01 FF 14 00    1234*       dl 0x0014FF ; 000091, 29.527
040F04 1E 15 00    1235*       dl 0x00151E ; 000092, 29.697
040F07 3C 15 00    1236*       dl 0x00153C ; 000093, 29.865
040F0A 5B 15 00    1237*       dl 0x00155B ; 000094, 30.033
040F0D 79 15 00    1238*       dl 0x001579 ; 000095, 30.201
040F10 98 15 00    1239*       dl 0x001598 ; 000096, 30.368
040F13 B6 15 00    1240*       dl 0x0015B6 ; 000097, 30.534
040F16 D4 15 00    1241*       dl 0x0015D4 ; 000098, 30.700
040F19 F2 15 00    1242*       dl 0x0015F2 ; 000099, 30.865
040F1C 10 16 00    1243*       dl 0x001610 ; 00009A, 31.030
040F1F 2E 16 00    1244*       dl 0x00162E ; 00009B, 31.194
040F22 4C 16 00    1245*       dl 0x00164C ; 00009C, 31.357
040F25 6A 16 00    1246*       dl 0x00166A ; 00009D, 31.520
040F28 87 16 00    1247*       dl 0x001687 ; 00009E, 31.682
040F2B A5 16 00    1248*       dl 0x0016A5 ; 00009F, 31.844
040F2E C2 16 00    1249*       dl 0x0016C2 ; 0000A0, 32.005
040F31 DF 16 00    1250*       dl 0x0016DF ; 0000A1, 32.166
040F34 FC 16 00    1251*       dl 0x0016FC ; 0000A2, 32.326
040F37 19 17 00    1252*       dl 0x001719 ; 0000A3, 32.486
040F3A 36 17 00    1253*       dl 0x001736 ; 0000A4, 32.645
040F3D 53 17 00    1254*       dl 0x001753 ; 0000A5, 32.803
040F40 70 17 00    1255*       dl 0x001770 ; 0000A6, 32.961
040F43 8C 17 00    1256*       dl 0x00178C ; 0000A7, 33.118
040F46 A9 17 00    1257*       dl 0x0017A9 ; 0000A8, 33.275
040F49 C5 17 00    1258*       dl 0x0017C5 ; 0000A9, 33.431
040F4C E2 17 00    1259*       dl 0x0017E2 ; 0000AA, 33.587
040F4F FE 17 00    1260*       dl 0x0017FE ; 0000AB, 33.742
040F52 1A 18 00    1261*       dl 0x00181A ; 0000AC, 33.896
040F55 36 18 00    1262*       dl 0x001836 ; 0000AD, 34.050
040F58 52 18 00    1263*       dl 0x001852 ; 0000AE, 34.203
040F5B 6E 18 00    1264*       dl 0x00186E ; 0000AF, 34.356
040F5E 8A 18 00    1265*       dl 0x00188A ; 0000B0, 34.509
040F61 A5 18 00    1266*       dl 0x0018A5 ; 0000B1, 34.660
040F64 C1 18 00    1267*       dl 0x0018C1 ; 0000B2, 34.811
040F67 DC 18 00    1268*       dl 0x0018DC ; 0000B3, 34.962
040F6A F7 18 00    1269*       dl 0x0018F7 ; 0000B4, 35.112
040F6D 13 19 00    1270*       dl 0x001913 ; 0000B5, 35.262
040F70 2E 19 00    1271*       dl 0x00192E ; 0000B6, 35.410
040F73 49 19 00    1272*       dl 0x001949 ; 0000B7, 35.559
040F76 64 19 00    1273*       dl 0x001964 ; 0000B8, 35.707
040F79 7F 19 00    1274*       dl 0x00197F ; 0000B9, 35.854
040F7C 99 19 00    1275*       dl 0x001999 ; 0000BA, 36.001
040F7F B4 19 00    1276*       dl 0x0019B4 ; 0000BB, 36.147
040F82 CE 19 00    1277*       dl 0x0019CE ; 0000BC, 36.293
040F85 E9 19 00    1278*       dl 0x0019E9 ; 0000BD, 36.438
040F88 03 1A 00    1279*       dl 0x001A03 ; 0000BE, 36.582
040F8B 1D 1A 00    1280*       dl 0x001A1D ; 0000BF, 36.726
040F8E 37 1A 00    1281*       dl 0x001A37 ; 0000C0, 36.870
040F91 51 1A 00    1282*       dl 0x001A51 ; 0000C1, 37.013
040F94 6B 1A 00    1283*       dl 0x001A6B ; 0000C2, 37.155
040F97 85 1A 00    1284*       dl 0x001A85 ; 0000C3, 37.297
040F9A 9F 1A 00    1285*       dl 0x001A9F ; 0000C4, 37.439
040F9D B9 1A 00    1286*       dl 0x001AB9 ; 0000C5, 37.579
040FA0 D2 1A 00    1287*       dl 0x001AD2 ; 0000C6, 37.720
040FA3 EC 1A 00    1288*       dl 0x001AEC ; 0000C7, 37.859
040FA6 05 1B 00    1289*       dl 0x001B05 ; 0000C8, 37.999
040FA9 1E 1B 00    1290*       dl 0x001B1E ; 0000C9, 38.137
040FAC 37 1B 00    1291*       dl 0x001B37 ; 0000CA, 38.276
040FAF 50 1B 00    1292*       dl 0x001B50 ; 0000CB, 38.413
040FB2 69 1B 00    1293*       dl 0x001B69 ; 0000CC, 38.550
040FB5 82 1B 00    1294*       dl 0x001B82 ; 0000CD, 38.687
040FB8 9B 1B 00    1295*       dl 0x001B9B ; 0000CE, 38.823
040FBB B4 1B 00    1296*       dl 0x001BB4 ; 0000CF, 38.959
040FBE CC 1B 00    1297*       dl 0x001BCC ; 0000D0, 39.094
040FC1 E5 1B 00    1298*       dl 0x001BE5 ; 0000D1, 39.228
040FC4 FD 1B 00    1299*       dl 0x001BFD ; 0000D2, 39.362
040FC7 16 1C 00    1300*       dl 0x001C16 ; 0000D3, 39.496
040FCA 2E 1C 00    1301*       dl 0x001C2E ; 0000D4, 39.629
040FCD 46 1C 00    1302*       dl 0x001C46 ; 0000D5, 39.762
040FD0 5E 1C 00    1303*       dl 0x001C5E ; 0000D6, 39.894
040FD3 76 1C 00    1304*       dl 0x001C76 ; 0000D7, 40.025
040FD6 8E 1C 00    1305*       dl 0x001C8E ; 0000D8, 40.156
040FD9 A5 1C 00    1306*       dl 0x001CA5 ; 0000D9, 40.286
040FDC BD 1C 00    1307*       dl 0x001CBD ; 0000DA, 40.416
040FDF D5 1C 00    1308*       dl 0x001CD5 ; 0000DB, 40.546
040FE2 EC 1C 00    1309*       dl 0x001CEC ; 0000DC, 40.675
040FE5 04 1D 00    1310*       dl 0x001D04 ; 0000DD, 40.803
040FE8 1B 1D 00    1311*       dl 0x001D1B ; 0000DE, 40.931
040FEB 32 1D 00    1312*       dl 0x001D32 ; 0000DF, 41.059
040FEE 49 1D 00    1313*       dl 0x001D49 ; 0000E0, 41.186
040FF1 60 1D 00    1314*       dl 0x001D60 ; 0000E1, 41.312
040FF4 77 1D 00    1315*       dl 0x001D77 ; 0000E2, 41.438
040FF7 8E 1D 00    1316*       dl 0x001D8E ; 0000E3, 41.564
040FFA A5 1D 00    1317*       dl 0x001DA5 ; 0000E4, 41.689
040FFD BB 1D 00    1318*       dl 0x001DBB ; 0000E5, 41.814
041000 D2 1D 00    1319*       dl 0x001DD2 ; 0000E6, 41.938
041003 E9 1D 00    1320*       dl 0x001DE9 ; 0000E7, 42.061
041006 FF 1D 00    1321*       dl 0x001DFF ; 0000E8, 42.184
041009 15 1E 00    1322*       dl 0x001E15 ; 0000E9, 42.307
04100C 2C 1E 00    1323*       dl 0x001E2C ; 0000EA, 42.429
04100F 42 1E 00    1324*       dl 0x001E42 ; 0000EB, 42.551
041012 58 1E 00    1325*       dl 0x001E58 ; 0000EC, 42.672
041015 6E 1E 00    1326*       dl 0x001E6E ; 0000ED, 42.793
041018 84 1E 00    1327*       dl 0x001E84 ; 0000EE, 42.913
04101B 99 1E 00    1328*       dl 0x001E99 ; 0000EF, 43.033
04101E AF 1E 00    1329*       dl 0x001EAF ; 0000F0, 43.152
041021 C5 1E 00    1330*       dl 0x001EC5 ; 0000F1, 43.271
041024 DA 1E 00    1331*       dl 0x001EDA ; 0000F2, 43.390
041027 F0 1E 00    1332*       dl 0x001EF0 ; 0000F3, 43.508
04102A 05 1F 00    1333*       dl 0x001F05 ; 0000F4, 43.625
04102D 1B 1F 00    1334*       dl 0x001F1B ; 0000F5, 43.742
041030 30 1F 00    1335*       dl 0x001F30 ; 0000F6, 43.859
041033 45 1F 00    1336*       dl 0x001F45 ; 0000F7, 43.975
041036 5A 1F 00    1337*       dl 0x001F5A ; 0000F8, 44.091
041039 6F 1F 00    1338*       dl 0x001F6F ; 0000F9, 44.206
04103C 84 1F 00    1339*       dl 0x001F84 ; 0000FA, 44.321
04103F 99 1F 00    1340*       dl 0x001F99 ; 0000FB, 44.435
041042 AD 1F 00    1341*       dl 0x001FAD ; 0000FC, 44.549
041045 C2 1F 00    1342*       dl 0x001FC2 ; 0000FD, 44.662
041048 D7 1F 00    1343*       dl 0x001FD7 ; 0000FE, 44.775
04104B EB 1F 00    1344*       dl 0x001FEB ; 0000FF, 44.888
04104E 00 20 00    1345*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
041051             0036        include "fonts.inc"
041051 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041100             0002*   
041100             0003*   fonts_load:
041100 DD 21 00 27 0004*       ld ix,font_list ; pointer to font list lookup
       04          
041105 06 07       0005*       ld b,num_fonts ; loop counter
041107             0006*   
041107             0007*   @load_loop:
041107 C5          0008*       push bc ; save loop counter
041108             0009*   
041108             0010*   ; load font into a buffer
041108 DD 27 06    0011*       ld hl,(ix+font_list_bufferId)
04110B DD 31 09    0012*       ld iy,(ix+font_list_filename)
04110E CD 78 18 04 0013*       call vdu_load_buffer_from_file
041112             0014*   
041112             0015*   ; create font from buffer
041112 DD 27 06    0016*       ld hl,(ix+font_list_bufferId)
041115 DD 5E 00    0017*       ld e,(ix+font_list_width)
041118 DD 56 03    0018*       ld d,(ix+font_list_height)
04111B 3E 00       0019*       ld a,0 ; flags
04111D CD 1A 1A 04 0020*       call vdu_font_create
041121             0021*   
041121             0022*   ; select font
041121 DD 27 06    0023*       ld hl,(ix+font_list_bufferId)
041124 3E 01       0024*       ld a,1 ; flags
041126 CD 00 1A 04 0025*       call vdu_font_select
04112A             0026*   
04112A             0027*   ; ; debug print filename
04112A             0028*   ;     call printNewLine
04112A             0029*   ;     ld hl,(ix+font_list_filename)
04112A             0030*   ;     call printString
04112A             0031*   
04112A             0032*   ; advance font_list pointer to next record
04112A ED 32 0C    0033*       lea ix,ix+font_list_record_size
04112D             0034*   
04112D             0035*   ; restore loop counter
04112D C1          0036*       pop bc
04112E 10 D7       0037*       djnz @load_loop
041130             0038*   
041130             0039*   ; all done
041130 C9          0040*       ret
041131             0037        include "images.inc"
041131 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041200             0002*   
041200             0003*   image_type: equ 0
041200             0004*   image_width: equ image_type+3
041200             0005*   image_height: equ image_width+3
041200             0006*   image_filesize: equ image_height+3
041200             0007*   image_filename: equ image_filesize+3
041200             0008*   image_bufferId: equ image_filename+3
041200             0009*   image_record_size: equ image_bufferId+3
041200             0010*   
041200 00 00 00    0011*   cur_image_list: dl 0
041203 00 00 00    0012*   cur_filename: dl 0
041206 00 00 00    0013*   cur_buffer_id: dl 0
041209             0014*   
041209             0015*   img_load_init:
041209             0016*   ; initialize logo's position parameters
041209 21 00 00 00 0017*       ld hl,0
04120D 22 BE 12 04 0018*       ld (logo_xvel),hl
041211 22 C1 12 04 0019*       ld (logo_xpos),hl
041215             0020*   ; begin 16.8 maths to determine logo's y position and velocity
041215 21 00 E0 00 0021*       ld hl,224*256
041219 22 C7 12 04 0022*       ld (logo_ypos),hl
04121D EB          0023*       ex de,hl
04121E 21 00 28 FF 0024*       ld hl,-240+24*256
041222             0025*       ; ld de,-256*[sprites_num_images+tiles_dg_num_images+ui_num_images]
041222 11 00 83 01 0026*       ld de,[sprites_num_images+tiles_dg_num_images+ui_num_images]*256
041226 CD 25 07 04 0027*       call sdiv168 ; ud.e = distance / num images = y velocity
04122A ED 53 C4 12 0028*       ld (logo_yvel),de
       04          
04122F             0029*   ; all done
04122F C9          0030*       ret
041230             0031*   
041230             0032*   ; inputs: bc is the number of images to load, cur_image_list set
041230             0033*   img_load_main:
041230             0034*   ; back up loop counter
041230 C5          0035*       push bc
041231             0036*   
041231             0037*   ; load the next image
041231 CD 68 12 04 0038*       call load_next_image
041235             0039*   
041235             0040*   ; plot the background
041235 CD 4B 16 04 0041*       call vdu_cls
041239 21 29 00 00 0042*       ld hl,BUF_SPLASH_BG
04123D CD 38 17 04 0043*       call vdu_buff_select
041241 01 00 00 00 0044*       ld bc,0
041245 11 00 00 00 0045*       ld de,0
041249 CD 20 1B 04 0046*       call vdu_plot_bmp
04124D             0047*   
04124D             0048*   ; ; draw the most recently loaded image
04124D             0049*   ; 	ld hl,(cur_buffer_id)
04124D             0050*   ; 	call vdu_buff_select
04124D             0051*   ; 	ld bc,0
04124D             0052*   ; 	ld de,0
04124D             0053*   ; 	call vdu_plot_bmp
04124D             0054*   
04124D             0055*   ; move logo
04124D CD 99 12 04 0056*       call move_logo
041251             0057*   
041251             0058*   ; print current filename
041251 2A 03 12 04 0059*       ld hl,(cur_filename)
041255 CD 07 01 04 0060*       call printString
041259             0061*   
041259             0062*   ; flip the framebuffer
041259             0063*       ; call vdu_flip
041259             0064*   
041259             0065*   ; decrement loop counter
041259 C1          0066*       pop bc
04125A 0B          0067*       dec bc
04125B 79          0068*       ld a,c
04125C B7          0069*       or a
04125D C2 30 12 04 0070*       jp nz,img_load_main
041261 78          0071*       ld a,b
041262 B7          0072*       or a
041263 C2 30 12 04 0073*       jp nz,img_load_main
041267 C9          0074*       ret
041268             0075*   
041268             0076*   load_next_image:
041268 FD 2A 00 12 0077*       ld iy,(cur_image_list)
       04          
04126D FD E5       0078*       push iy
04126F FD 7E 00    0079*       ld a,(iy+image_type) ; get image type
041272 FD 07 03    0080*       ld bc,(iy+image_width) ; get image width
041275 FD 17 06    0081*       ld de,(iy+image_height) ; get image height
041278 FD 31 09    0082*       ld ix,(iy+image_filesize) ; get image file size
04127B FD 27 0F    0083*       ld hl,(iy+image_bufferId) ; get image bufferId
04127E 22 06 12 04 0084*       ld (cur_buffer_id),hl
041282 FD 37 0C    0085*       ld iy,(iy+image_filename) ; get image filename
041285 FD 22 03 12 0086*       ld (cur_filename),iy
       04          
04128A CD 56 18 04 0087*       call vdu_load_img
04128E FD E1       0088*       pop iy
041290 ED 33 12    0089*       lea iy,iy+image_record_size
041293 FD 22 00 12 0090*       ld (cur_image_list),iy
       04          
041298 C9          0091*       ret
041299             0092*   
041299             0093*   move_logo:
041299             0094*   ; activate logo bitmap
041299 21 2A 00 00 0095*       ld hl, BUF_SPLASH_LOGO
04129D CD 38 17 04 0096*       call vdu_buff_select
0412A1             0097*   ; update position based on velocity parameters
0412A1 2A C7 12 04 0098*       ld hl,(logo_ypos)
0412A5 ED 5B C4 12 0099*       ld de,(logo_yvel)
       04          
0412AA 19          0100*       add hl,de
0412AB 22 C7 12 04 0101*       ld (logo_ypos),hl
0412AF             0102*   ; draw logo
0412AF ED 4B C1 12 0103*       ld bc,(logo_xpos)
       04          
0412B4 ED 5B C7 12 0104*       ld de,(logo_ypos)
       04          
0412B9 CD 3C 1B 04 0105*       call vdu_plot_bmp168
0412BD C9          0106*       ret
0412BE             0107*   
0412BE 00 00 00    0108*   logo_xvel: dl 0
0412C1 00 00 00    0109*   logo_xpos: dl 0
0412C4             0110*   
0412C4 00 00 00    0111*   logo_yvel: dl 0
0412C7 00 00 00    0112*   logo_ypos: dl 0
0412CA             0113*   
0412CA             0114*   load_ui_images:
0412CA             0115*   ; initialize image loading variables
0412CA 21 16 61 04 0116*       ld hl,ui_image_list
0412CE 22 00 12 04 0117*       ld (cur_image_list),hl
0412D2             0118*   ; load images
0412D2 06 2B       0119*       ld b,ui_num_images
0412D4             0120*   @loop:
0412D4 C5          0121*       push bc
0412D5 CD 68 12 04 0122*       call load_next_image
0412D9 C1          0123*       pop bc
0412DA 10 F8       0124*       djnz @loop
0412DC C9          0125*       ret
0412DD             0126*   ; end load_ui_images
0412DD             0127*   
0412DD             0128*   load_sprite_images:
0412DD             0129*   ; initialize image loading variables
0412DD 21 CC 45 04 0130*       ld hl,sprites_image_list
0412E1 22 00 12 04 0131*       ld (cur_image_list),hl
0412E5 01 9D 00 00 0132*       ld bc,sprites_num_images
0412E9             0133*   ; load images
0412E9 CD 30 12 04 0134*       call img_load_main
0412ED C9          0135*       ret
0412EE             0136*   ; end load_sprite_images
0412EE             0137*   
0412EE             0138*   load_tilesets:
0412EE             0139*   ; initialize image loading variables
0412EE 21 4F 29 04 0140*       ld hl,tiles_dg_image_list
0412F2 22 00 12 04 0141*       ld (cur_image_list),hl
0412F6 01 BB 00 00 0142*       ld bc,tiles_dg_num_images
0412FA             0143*   ; load images
0412FA CD 30 12 04 0144*       call img_load_main
0412FE C9          0145*       ret
0412FF             0146*   ; end load_tilesets
0412FF             0147*   
0412FF             0148*   load_backgrounds:
0412FF             0149*   ; initialize image loading variables
0412FF 21 1F 28 04 0150*       ld hl,bg_image_list
041303 22 00 12 04 0151*       ld (cur_image_list),hl
041307 01 08 00 00 0152*       ld bc,bg_num_images
04130B             0153*   ; load images
04130B CD 30 12 04 0154*       call img_load_main
04130F C9          0155*       ret
041310             0156*   ; end load_backgrounds
041310             0157*   
041310             0158*   ; ; initialize image loading variables
041310             0159*   ;     ld hl,tiles_xevious_image_list
041310             0160*   ;     ld (cur_image_list),hl
041310             0161*   ;     ld bc,tiles_xevious_num_images
041310             0162*   ; ; load images
041310             0163*   ;     call img_load_main
041310 C9          0164*       ret
041311             0038        include "timer.inc"
041311 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041400             0002*   
041400             0003*   ; Table 32. Timer Control Registers
041400             0004*   ; this constant is the base address of the timer control registers
041400             0005*   ; each timer takes three bytes:
041400             0006*   ;   0: control register
041400             0007*   ;   1: low byte of timer reset value
041400             0008*   ;   2: high byte of timer reset value
041400             0009*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
041400             0010*   ; which correctly force the high and upper bytes of the address bus to zero
041400             0011*   TMR_CTL:     equ 80h
041400             0012*   
041400             0013*   ; Timer Control Register Bit Definitions
041400             0014*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
041400             0015*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
041400             0016*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
041400             0017*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
041400             0018*                               ; the TMRx_CTL register is read.
041400             0019*   
041400             0020*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
041400             0021*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
041400             0022*   
041400             0023*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
041400             0024*                               ;  0,and counting stops when the end-of-count value is reached.
041400             0025*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
041400             0026*                               ; written to the counter when the end-of-count value is reached.
041400             0027*   
041400             0028*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
041400             0029*   CLK_DIV_256:  equ %00001100 ;
041400             0030*   CLK_DIV_64:   equ %00001000 ;
041400             0031*   CLK_DIV_16:   equ %00000100 ;
041400             0032*   CLK_DIV_4:    equ %00000000 ;
041400             0033*   
041400             0034*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
041400             0035*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
041400             0036*                               ; When a 1 is written to this bit,the values in the reload registers
041400             0037*                               ;  are loaded into the downcounter when the timer restarts. The
041400             0038*                               ; programmer must ensure that this bit is set to 1 each time
041400             0039*                               ; SINGLE-PASS mode is used.
041400             0040*   
041400             0041*   ; disable/enable the programmable reload timer
041400             0042*   PRT_EN_0:     equ %00000000 ;
041400             0043*   PRT_EN_1:     equ %00000001 ;
041400             0044*   
041400             0045*   ; Table 37. Timer Input Source Select Register
041400             0046*   ; Each of the 4 timers are allocated two bits of the 8-bit register
041400             0047*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
041400             0048*   ;   00: System clock / CLK_DIV
041400             0049*   ;   01: RTC / CLK_DIV
041400             0050*   ;   NOTE: these are the values given in the manual,but it may be a typo
041400             0051*   ;   10: GPIO port B pin 1.
041400             0052*   ;   11: GPIO port B pin 1.
041400             0053*   TMR_ISS:   equ 92h ; register address
041400             0054*   
041400             0055*   ; Table 51. Real-Time Clock Control Register
041400             0056*   RTC_CTRL: equ EDh ; register address
041400             0057*   
041400             0058*   ; alarm interrupt disable/enable
041400             0059*   RTC_ALARM_0:    equ %00000000
041400             0060*   RTC_ALARM_1:    equ %10000000
041400             0061*   
041400             0062*   ; interrupt on alarm disable/enable
041400             0063*   RTC_INT_ENT_0:  equ %00000000
041400             0064*   RTC_INT_ENT_1:  equ %01000000
041400             0065*   
041400             0066*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
041400             0067*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
041400             0068*   
041400             0069*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
041400             0070*                                   ; On-chip 32768 Hz oscillator is enabled.
041400             0071*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
041400             0072*                                   ; On-chip 32768 Hz oscillator is disabled.
041400             0073*   
041400             0074*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
041400             0075*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
041400             0076*   
041400             0077*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
041400             0078*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
041400             0079*   
041400             0080*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
041400             0081*                                   ; RTC counter is enabled.
041400             0082*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
041400             0083*                                   ; RTC counter is disabled.
041400             0084*   
041400             0085*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
041400             0086*   
041400             0087*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
041400             0088*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
041400 00 00 00    0089*   prt_reload: dl 0x000000
041403             0090*   
041403             0091*   ; set PRT timer
041403             0092*   prt_set:
041403 21 00 00 00 0093*       ld hl,0
041407 22 51 14 04 0094*       ld (prt_irq_counter),hl
04140B 2A 00 14 04 0095*       ld hl,(prt_reload)
04140F ED 29 84    0096*       out0 ($84),l
041412 ED 21 85    0097*   	out0 ($85),h
041415             0098*   ; disable timer
041415 3E 06       0099*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041417 ED 39 83    0100*   	out0 ($83),a
04141A             0101*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04141A 3E 57       0102*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04141C ED 39 83    0103*   	out0 ($83),a
04141F C9          0104*       ret
041420             0105*   
041420             0106*   ; ===============================================
041420             0107*   ; PRT Timer Interrupt Handling
041420             0108*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
041420             0109*   ; -----------------------------------------------
041420             0110*   prt_irq_init:
041420             0111*       ; set up interrupt vector table 2
041420 21 00 00 00 0112*   	ld hl,0
041424 3A 0C 01 00 0113*   	ld a,($10c)
041428 6F          0114*   	ld l,a
041429 3A 0D 01 00 0115*   	ld a,($10d)
04142D 67          0116*   	ld h,a
04142E             0117*   
04142E             0118*   	; skip over CALL ($c3)
04142E 23          0119*   	inc hl
04142F             0120*   	; load address of jump into vector table 2 (in ram)
04142F ED 27       0121*   	ld hl,(hl)
041431             0122*   
041431             0123*   	; write CALL prt_irq_handler to vector table 2
041431 3E C3       0124*   	ld a,$c3
041433 77          0125*   	ld (hl),a
041434 23          0126*   	inc hl
041435 11 3C 14 04 0127*   	ld de,prt_irq_handler
041439 ED 1F       0128*   	ld (hl),de
04143B             0129*   
04143B C9          0130*       ret
04143C             0131*   
04143C             0132*   prt_irq_handler:
04143C F3          0133*   	di
04143D F5          0134*   	push af
04143E E5          0135*       push hl
04143F ED 38 83    0136*   	in0 a,($83)
041442 2A 51 14 04 0137*   	ld hl,(prt_irq_counter)
041446 23          0138*   	inc hl
041447 22 51 14 04 0139*   	ld (prt_irq_counter),hl
04144B E1          0140*       pop hl
04144C F1          0141*   	pop af
04144D FB          0142*   	ei
04144E 5B ED 4D    0143*   	reti.l
041451             0144*   
041451             0145*   prt_irq_counter:
041451 00 00 00    0146*   	.dl 0
041454             0147*   prt_irq_counter_saved:
041454 00 00 00    0148*       .dl 0
041457             0149*   
041457             0150*   prt_loop_reset:
041457 E5          0151*       push hl
041458 21 00 00 00 0152*   	ld hl,0
04145C 22 51 14 04 0153*   	ld (prt_irq_counter),hl
041460 22 C2 14 04 0154*       ld (prt_loop_counter),hl
041464 22 C5 14 04 0155*       ld (prt_loops),hl
041468 CD 03 14 04 0156*       call prt_set
04146C E1          0157*       pop hl
04146D C9          0158*       ret
04146E             0159*   
04146E             0160*   prt_loop_start:
04146E E5          0161*       push hl
04146F 21 00 00 00 0162*   	ld hl,0
041473 22 51 14 04 0163*   	ld (prt_irq_counter),hl
041477 E1          0164*       pop hl
041478 C9          0165*       ret
041479             0166*   
041479             0167*   prt_loop_stop:
041479 E5          0168*       push hl
04147A D5          0169*       push de
04147B 2A 51 14 04 0170*       ld hl,(prt_irq_counter)
04147F ED 5B C2 14 0171*       ld de,(prt_loop_counter)
       04          
041484 19          0172*       add hl,de
041485 22 C2 14 04 0173*       ld (prt_loop_counter),hl
041489 21 00 00 00 0174*       ld hl,0
04148D 22 51 14 04 0175*       ld (prt_irq_counter),hl
041491 2A C5 14 04 0176*       ld hl,(prt_loops)
041495 23          0177*       inc hl
041496 22 C5 14 04 0178*       ld (prt_loops),hl
04149A D1          0179*       pop de
04149B E1          0180*       pop hl
04149C C9          0181*       ret
04149D             0182*   
04149D             0183*   ; inputs: bc = y,x text coordinates to print
04149D             0184*   prt_loop_print:
04149D F5          0185*       push af
04149E E5          0186*       push hl
04149F C5          0187*       push bc
0414A0 D5          0188*       push de
0414A1 DD E5       0189*       push ix
0414A3 FD E5       0190*       push iy
0414A5 CD 37 16 04 0191*       call vdu_move_cursor
0414A9             0192*   
0414A9 2A C2 14 04 0193*       ld hl,(prt_loop_counter)
0414AD CD 53 01 04 0194*       call printDec
0414B1             0195*   
0414B1 2A C5 14 04 0196*       ld hl,(prt_loops)
0414B5 CD 53 01 04 0197*       call printDec
0414B9             0198*   
0414B9 FD E1       0199*       pop iy
0414BB DD E1       0200*       pop ix
0414BD D1          0201*       pop de
0414BE C1          0202*       pop bc
0414BF E1          0203*       pop hl
0414C0 F1          0204*       pop af
0414C1 C9          0205*       ret
0414C2             0206*   
0414C2             0207*   prt_loop_counter:
0414C2 00 00 00    0208*       .dl 0
0414C5             0209*   prt_loops:
0414C5 00 00 00    0210*       .dl 0
0414C8             0211*   
0414C8             0212*   ; ===============================================
0414C8             0213*   ; Timer functions
0414C8             0214*   ; -----------------------------------------------
0414C8             0215*   ; set a countdown timer
0414C8             0216*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0414C8             0217*   ; returns: hl = current time
0414C8             0218*   tmr_set:
0414C8 FD 2F 03    0219*       ld (iy+3),hl            ; set time remaining
0414CB             0220*       MOSCALL mos_sysvars     ; ix points to syvars table
0414CB 3E 08       0001*M1 			LD	A, function
0414CD 5B CF       0002*M1 			RST.LIL	08h
0414CF DD 27 00    0221*       ld hl,(ix+sysvar_time)  ; get current time
0414D2 FD 2F 00    0222*       ld (iy+0),hl            ; set start time
0414D5 C9          0223*       ret
0414D6             0224*   
0414D6             0225*   ; gets time remaining on a countdown timer
0414D6             0226*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0414D6             0227*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0414D6             0228*   ;          sign flags: pos = time not expired,zero or neg = time expired
0414D6             0229*   tmr_get:
0414D6             0230*       MOSCALL mos_sysvars     ; ix points to syvars table
0414D6 3E 08       0001*M1 			LD	A, function
0414D8 5B CF       0002*M1 			RST.LIL	08h
0414DA DD 17 00    0231*       ld de,(ix+sysvar_time)  ; get current time
0414DD FD 27 00    0232*       ld hl,(iy+0)            ; get start time
0414E0 AF          0233*       xor a                   ; clear carry
0414E1 ED 52       0234*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0414E3 FD 17 03    0235*       ld de,(iy+3)            ; get timer set value
0414E6 AF          0236*       xor a                   ; clear carry
0414E7 ED 5A       0237*       adc hl,de               ; hl = time remaining
0414E9             0238*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0414E9 C9          0239*       ret
0414EA             0240*   
0414EA             0241*   tmr_test: ds 6 ; example of a buffer to hold timer data
0414F0             0242*   
       FF FF FF FF 
       FF FF 
0414F0 00 00 00    0243*   timestamp_now: dl 0
0414F3 00 00 00    0244*   timestamp_old: dl 0
0414F6 00 00 00    0245*   timestamp_chg: dl 0
0414F9             0246*   
0414F9             0247*   ; update the global timestamp from the system clock
0414F9             0248*   ; inputs: none
0414F9             0249*   ; returns: hl = time elapsed in 1/120ths of a second
0414F9             0250*   ;          ix = pointer to syvars table
0414F9             0251*   ; destroys: af,hl,de,ix
0414F9             0252*   timestamp_tick:
0414F9 ED 5B F0 14 0253*       ld de,(timestamp_now)   ; get previous time
       04          
0414FE ED 53 F3 14 0254*       ld (timestamp_old),de   ; save previous time
       04          
041503             0255*       MOSCALL mos_sysvars     ; ix points to syvars table
041503 3E 08       0001*M1 			LD	A, function
041505 5B CF       0002*M1 			RST.LIL	08h
041507 DD 27 00    0256*       ld hl,(ix+sysvar_time)  ; get current time
04150A 22 F0 14 04 0257*       ld (timestamp_now),hl   ; save current time
04150E AF          0258*       xor a                   ; clear carry
04150F ED 52       0259*       sbc hl,de               ; hl = time elapsed
041511 22 F6 14 04 0260*       ld (timestamp_chg),hl   ; save elapsed time
041515 C9          0261*       ret
041516             0262*   
041516             0263*   ; set a countdown timer
041516             0264*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041516             0265*   ; requires: timestamp_tick to be called at least once before this function
041516             0266*   ; returns: hl = current time
041516             0267*   ; destroys: hl
041516             0268*   timestamp_tmr_set:
041516 FD 2F 03    0269*       ld (iy+3),hl            ; set time remaining
041519 2A F0 14 04 0270*       ld hl,(timestamp_now)   ; get current timestamp
04151D FD 2F 00    0271*       ld (iy+0),hl            ; set start time
041520 C9          0272*       ret
041521             0273*   
041521             0274*   ; gets time remaining on a countdown timer following the global timestamp
041521             0275*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041521             0276*   ; requires: timestamp_tick to be called at least once before this function
041521             0277*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041521             0278*   ;          sign flags: pos = time not expired,zero or neg = time expired
041521             0279*   ; destroys: af,hl,de
041521             0280*   timestamp_tmr_get:
041521 ED 5B F0 14 0281*       ld de,(timestamp_now)   ; get current timestamp
       04          
041526 FD 27 00    0282*       ld hl,(iy+0)            ; get start time
041529 AF          0283*       xor a                   ; clear carry
04152A ED 52       0284*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04152C FD 17 03    0285*       ld de,(iy+3)            ; get timer set value
04152F AF          0286*       xor a                   ; clear carry
041530 ED 5A       0287*       adc hl,de               ; hl = time remaining
041532             0288*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041532 C9          0289*       ret
041533             0290*   
041533             0291*   ; set a stopwatch
041533             0292*   ; returns: hl = start time
041533             0293*   ; destroys: hl,ix
041533             0294*   stopwatch_set:
041533             0295*       MOSCALL mos_sysvars     ; ix points to syvars table
041533 3E 08       0001*M1 			LD	A, function
041535 5B CF       0002*M1 			RST.LIL	08h
041537 DD 27 00    0296*       ld hl,(ix+sysvar_time)  ; get current time
04153A 22 4F 15 04 0297*       ld (stopwatch_started),hl            ; set start time
04153E C9          0298*       ret
04153F             0299*   
04153F             0300*   ; gets time elapsed on a stopwatch
04153F             0301*   ; returns: hl = time elapsed in 1/120ths of a second
04153F             0302*   ; destroys: af,hl,de,ix
04153F             0303*   stopwatch_get:
04153F             0304*       MOSCALL mos_sysvars     ; ix points to syvars table
04153F 3E 08       0001*M1 			LD	A, function
041541 5B CF       0002*M1 			RST.LIL	08h
041543 DD 27 00    0305*       ld hl,(ix+sysvar_time)  ; get current time
041546 ED 5B 4F 15 0306*       ld de,(stopwatch_started)            ; get start time
       04          
04154B AF          0307*       xor a                   ; clear carry
04154C ED 52       0308*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04154E C9          0309*       ret
04154F             0310*   
04154F             0311*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041552             0312*   
041552             0313*   ; ------------------
041552             0314*   ; delay routine
041552             0315*   ; Author: Richard Turrnidge
041552             0316*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041552             0317*   ; routine waits a fixed time,then returns
041552             0318*   ; arrive with A =  the delay byte. One bit to be set only.
041552             0319*   ; eg. ld A,00000100b
041552             0320*   
041552             0321*   multiPurposeDelay:
       FF FF FF 
041552 F5          0322*       push af
041553 C5          0323*       push bc
041554 DD E5       0324*       push ix
041556 47          0325*       ld b,a
041557 3E 08       0326*       ld a,$08
041559 5B CF       0327*       RST.LIL	08h                 ; get IX pointer to sysvars
04155B             0328*   
04155B             0329*   waitLoop:
04155B             0330*   
04155B DD 7E 00    0331*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04155E             0332*   
04155E             0333*                                   ;   we check if bit set is same as last time we checked.
04155E             0334*                                   ;   bit 0 - don't use
04155E             0335*                                   ;   bit 1 - changes 64 times per second
04155E             0336*                                   ;   bit 2 - changes 32 times per second
04155E             0337*                                   ;   bit 3 - changes 16 times per second
04155E             0338*   
04155E             0339*                                   ;   bit 4 - changes 8 times per second
04155E             0340*                                   ;   bit 5 - changes 4 times per second
04155E             0341*                                   ;   bit 6 - changes 2 times per second
04155E             0342*                                   ;   bit 7 - changes 1 times per second
04155E A0          0343*       and b
04155F 4F          0344*       ld c,a
041560 3A 71 15 04 0345*       ld a,(oldTimeStamp)
041564 B9          0346*       cp c                        ; is A same as last value?
041565 28 F4       0347*       jr z,waitLoop              ; loop here if it is
041567 79          0348*       ld a,c
041568 32 71 15 04 0349*       ld (oldTimeStamp),a        ; set new value
04156C             0350*   
04156C DD E1       0351*       pop ix
04156E C1          0352*       pop bc
04156F F1          0353*       pop af
041570 C9          0354*       ret
041571             0355*   
041571 00          0356*   oldTimeStamp:   .db 00h
041572             0039        include "vdu.inc"
041572 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
041600             0002*   
041600             0003*   ; VDU 30: Home cursor
041600             0004*   vdu_home_cursor:
041600 3E 1E       0005*       ld a,30
041602 5B D7       0006*   	rst.lil $10
041604 C9          0007*   	ret
041605             0008*   
041605             0009*   vdu_cursor_on:
041605 21 10 16 04 0010*   	ld hl,@cmd
041609 01 03 00 00 0011*   	ld bc,@end-@cmd
04160D 5B DF       0012*   	rst.lil $18
04160F C9          0013*   	ret
041610             0014*   @cmd:
041610 17 01 01    0015*   	db 23,1,1
041613             0016*   @end:
041613             0017*   
041613             0018*   vdu_cursor_off:
041613 21 1E 16 04 0019*   	ld hl,@cmd
041617 01 03 00 00 0020*   	ld bc,@end-@cmd
04161B 5B DF       0021*   	rst.lil $18
04161D C9          0022*   	ret
04161E             0023*   @cmd:
04161E 17 01 00    0024*   	db 23,1,0
041621             0025*   @end:
041621             0026*   
041621             0027*   ; VDU 5: Write text at graphics cursor
041621             0028*   ; inputs: a is the character to write to the screen
041621             0029*   ; prerequisites: the graphics cursor at the intended position on screen
041621             0030*   ; outputs: see the name of the function
041621             0031*   ; destroys: a, hl, bc
041621             0032*   vdu_char_to_gfx_cursor:
041621 32 31 16 04 0033*   	ld (@arg),a
041625 21 30 16 04 0034*   	ld hl,@cmd
041629 01 02 00 00 0035*   	ld bc,@end-@cmd
04162D 5B DF       0036*   	rst.lil $18
04162F C9          0037*   	ret
041630 05          0038*   @cmd: db 5
041631 00          0039*   @arg: db 0
041632             0040*   @end:
041632             0041*   ; VDU 9: Move cursor forward one character
041632             0042*   vdu_cursor_forward:
041632 3E 09       0043*       ld a,9
041634 5B D7       0044*   	rst.lil $10
041636 C9          0045*   	ret
041637             0046*   
041637             0047*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041637             0048*   ; inputs: c=x, b=y 8-bit unsigned integers
041637             0049*   vdu_move_cursor:
041637 ED 43 48 16 0050*       ld (@x0),bc
       04          
04163C 21 47 16 04 0051*   	ld hl,@cmd
041640 01 03 00 00 0052*   	ld bc,@end-@cmd
041644 5B DF       0053*   	rst.lil $18
041646 C9          0054*   	ret
041647 1F          0055*   @cmd: 	db 31
041648 00          0056*   @x0:	db 0
041649 00          0057*   @y0: 	db 0
04164A 00          0058*   @end: 	db 0 ; padding
04164B             0059*   
04164B             0060*   ; VDU 12: Clear text area (CLS)
04164B             0061*   vdu_cls:
04164B 3E 0C       0062*       ld a,12
04164D 5B D7       0063*   	rst.lil $10
04164F C9          0064*   	ret
041650             0065*   
041650             0066*   vdu_flip:
041650 21 5B 16 04 0067*   	ld hl,@cmd
041654 01 03 00 00 0068*   	ld bc,@end-@cmd
041658 5B DF       0069*   	rst.lil $18
04165A C9          0070*   	ret
04165B 17 00 C3    0071*   @cmd: db 23,0,0xC3
04165E             0072*   @end:
04165E             0073*   
04165E             0074*   ; VDU 16: Clear graphics area (CLG)
04165E             0075*   vdu_clg:
04165E 3E 10       0076*       ld a,16
041660 5B D7       0077*   	rst.lil $10
041662 C9          0078*   	ret
041663             0079*   
041663             0080*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041663             0081*   ; VDU 23, 7: Scrolling
041663             0082*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041663             0083*   ; inputs: a, extent; l, direction; h; speed
041663             0084*   vdu_scroll_down:
041663 32 78 16 04 0085*   	ld (@extent),a
041667 22 79 16 04 0086*   	ld (@dir),hl ; implicitly populates @speed
04166B 21 76 16 04 0087*   	ld hl,@cmd
04166F 01 05 00 00 0088*   	ld bc,@end-@cmd
041673 5B DF       0089*   	rst.lil $18     ;; Sending command to VDP
041675 C9          0090*   	ret
041676 17 07       0091*   @cmd:       db 23,7
041678 00          0092*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041679 00          0093*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04167A 00          0094*   @speed:     db 0x00 ; pixels
04167B 00          0095*   @end:		db 0x00 ; padding
04167C             0096*   
04167C             0097*   ; COLOUR MODES
04167C             0098*   ; Mode	Effect
04167C             0099*   ; 0	Set on-screen pixel to target colour value
04167C             0100*   ; 1	OR value with the on-screen pixel
04167C             0101*   ; 2	AND value with the on-screen pixel
04167C             0102*   ; 3	XOR value with the on-screen pixel
04167C             0103*   ; 4	Invert the on-screen pixel
04167C             0104*   ; 5	No operation
04167C             0105*   ; 6	AND the inverse of the specified colour with the on-screen pixel
04167C             0106*   ; 7	OR the inverse of the specified colour with the on-screen pixel
04167C             0107*   
04167C             0108*   ; VDU 17, colour: Define text colour (COLOUR)
04167C             0109*   vdu_colour_text:
04167C 32 8C 16 04 0110*   	ld (@arg),a
041680 21 8B 16 04 0111*   	ld hl,@cmd
041684 01 02 00 00 0112*   	ld bc,@end-@cmd
041688 5B DF       0113*   	rst.lil $18
04168A C9          0114*   	ret
04168B 11          0115*   @cmd: db 17
04168C 00          0116*   @arg: db 0
04168D             0117*   @end:
04168D             0118*   
04168D             0119*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04168D             0120*   ; inputs: a=mode, c=colour (add 128 to set background colour)
04168D             0121*   vdu_gcol:
04168D 32 A2 16 04 0122*   	ld (@mode),a
041691 79          0123*       ld a,c
041692 32 A3 16 04 0124*       ld (@col),a
041696 21 A1 16 04 0125*   	ld hl,@cmd
04169A 01 03 00 00 0126*   	ld bc,@end-@cmd
04169E 5B DF       0127*   	rst.lil $18
0416A0 C9          0128*   	ret
0416A1 12          0129*   @cmd:  db 18
0416A2 00          0130*   @mode: db 0
0416A3 00          0131*   @col:  db 0
0416A4             0132*   @end:
0416A4             0133*   
0416A4             0134*   
0416A4             0135*   ; VDU 28, left, bottom, right, top: Set text viewport **
0416A4             0136*   ; MIND THE LITTLE-ENDIANESS
0416A4             0137*   ; inputs: c=left,b=bottom,e=right,d=top
0416A4             0138*   ; outputs; nothing
0416A4             0139*   ; destroys: a might make it out alive
0416A4             0140*   vdu_set_txt_viewport:
0416A4 ED 43 BA 16 0141*       ld (@lb),bc
       04          
0416A9 ED 53 BC 16 0142*   	ld (@rt),de
       04          
0416AE 21 B9 16 04 0143*   	ld hl,@cmd
0416B2 01 05 00 00 0144*   	ld bc,@end-@cmd
0416B6 5B DF       0145*   	rst.lil $18
0416B8 C9          0146*   	ret
0416B9 1C          0147*   @cmd:   db 28 ; set text viewport command
0416BA 00 00       0148*   @lb: 	dw 0x0000 ; set by bc
0416BC 00 00       0149*   @rt: 	dw 0x0000 ; set by de
0416BE 00          0150*   @end:   db 0x00	  ; padding
0416BF             0151*   
0416BF             0152*   ; Wait for VBLANK interrupt
0416BF             0153*   vdu_vblank:
0416BF DD E5       0154*       PUSH 	IX
0416C1             0155*   	MOSCALL	mos_sysvars
0416C1 3E 08       0001*M1 			LD	A, function
0416C3 5B CF       0002*M1 			RST.LIL	08h
0416C5 DD 7E 00    0156*   	LD	A, (IX + sysvar_time + 0)
0416C8             0157*   @wait:
0416C8 DD BE 00    0158*       CP 	A, (IX + sysvar_time + 0)
0416CB 28 FB       0159*       JR	Z, @wait
0416CD DD E1       0160*       POP	IX
0416CF C9          0161*       RET
0416D0             0162*   
0416D0             0163*   ; VDU 29, x; y;: Set graphics origin
0416D0             0164*   ; This command sets the graphics origin.
0416D0             0165*   ; The origin is the point on the screen where the coordinates (0,0) are located.
0416D0             0166*   ; inputs: bc=x0,de=y0
0416D0             0167*   ; outputs; nothing
0416D0             0168*   ; destroys: a might make it out alive
0416D0             0169*   vdu_set_gfx_origin:
0416D0 ED 43 E6 16 0170*       ld (@x0),bc
       04          
0416D5 ED 53 E8 16 0171*       ld (@y0),de
       04          
0416DA 21 E5 16 04 0172*       ld hl,@cmd
0416DE 01 05 00 00 0173*       ld bc,@end-@cmd
0416E2 5B DF       0174*       rst.lil $18
0416E4 C9          0175*       ret
0416E5 1D          0176*   @cmd:   db 29 ; set graphics origin command
0416E6 00 00       0177*   @x0: 	dw 0x0000 ; set by bc
0416E8 00 00       0178*   @y0: 	dw 0x0000 ; set by de
0416EA 00          0179*   @end:   db 0x00	  ; padding
0416EB             0180*   
0416EB             0181*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
0416EB             0182*   ; NOTE: the order of the y-coordinate parameters are inverted
0416EB             0183*   ; 	because we have turned off logical screen scaling
0416EB             0184*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0416EB             0185*   ; outputs; nothing
0416EB             0186*   ; destroys: a might make it out alive
0416EB             0187*   vdu_set_gfx_viewport:
0416EB ED 43 0B 17 0188*       ld (@x0),bc
       04          
0416F0 FD 22 0D 17 0189*       ld (@y1),iy
       04          
0416F5 DD 22 0F 17 0190*   	ld (@x1),ix
       04          
0416FA ED 53 11 17 0191*   	ld (@y0),de
       04          
0416FF 21 0A 17 04 0192*   	ld hl,@cmd
041703 01 09 00 00 0193*   	ld bc,@end-@cmd
041707 5B DF       0194*   	rst.lil $18
041709 C9          0195*   	ret
04170A 18          0196*   @cmd:   db 24 ; set graphics viewport command
04170B 00 00       0197*   @x0: 	dw 0x0000 ; set by bc
04170D 00 00       0198*   @y1: 	dw 0x0000 ; set by iy
04170F 00 00       0199*   @x1: 	dw 0x0000 ; set by ix
041711 00 00       0200*   @y0: 	dw 0x0000 ; set by de
041713 00          0201*   @end:   db 0x00	  ; padding
041714             0202*   
041714             0203*   ; SCREEN MODES
041714             0204*   ; ===============================
041714             0205*   ; Mode  Horz  Vert  Cols  Refresh
041714             0206*   ; ---   ----  ----  ----  -------
041714             0207*   ; 11    320   240   2     60hz
041714             0208*   ; 139   320   240   2     60hz
041714             0209*   ; 23    512   384   2     60hz
041714             0210*   ; 151   512   384   2     60hz
041714             0211*   ; 6     640   240   2     60hz
041714             0212*   ; 134   640   240   2     60hz
041714             0213*   ; 2     640   480   2     60hz
041714             0214*   ; 130   640   480   2     60hz
041714             0215*   ; 17    800   600   2     60hz
041714             0216*   ; 145   800   600   2     60hz
041714             0217*   ; 18    1024  768   2     60hz
041714             0218*   ; 146   1024  768   2     60hz
041714             0219*   ; ---   ----  ----  ----  -------
041714             0220*   ; 10    320   240   4     60hz
041714             0221*   ; 138   320   240   4     60hz
041714             0222*   ; 22    512   384   4     60hz
041714             0223*   ; 150   512   384   4     60hz
041714             0224*   ; 5     640   240   4     60hz
041714             0225*   ; 133   640   240   4     60hz
041714             0226*   ; 1     640   480   4     60hz
041714             0227*   ; 129   640   480   4     60hz
041714             0228*   ; 16    800   600   4     60hz
041714             0229*   ; 19    1024  768   4     60hz
041714             0230*   ; ---   ----  ----  ----  -------
041714             0231*   ; 9     320   240   16    60hz
041714             0232*   ; 137   320   240   16    60hz
041714             0233*   ; 21    512   384   16    60hz
041714             0234*   ; 149   512   384   16    60hz
041714             0235*   ; 4     640   240   16    60hz
041714             0236*   ; 132   640   240   16    60hz
041714             0237*   ; 0     640   480   16    60hz
041714             0238*   ; 7     n/a   n/a   16    60hz
041714             0239*   ; ---   ----  ----  ----  -------
041714             0240*   ; 8     320   240   64    60hz
041714             0241*   ; 136   320   240   64    60hz
041714             0242*   ; 20    512   384   64    60hz
041714             0243*   ; 3     640   240   64    60hz
041714             0244*   ; ---   ----  ----  ----  -------
041714             0245*   vdu_set_screen_mode:
041714 32 24 17 04 0246*   	ld (@arg),a
041718 21 23 17 04 0247*   	ld hl,@cmd
04171C 01 02 00 00 0248*   	ld bc,@end-@cmd
041720 5B DF       0249*   	rst.lil $18
041722 C9          0250*   	ret
041723 16          0251*   @cmd: db 22 ; set screen mode
041724 00          0252*   @arg: db 0  ; screen mode parameter
041725             0253*   @end:
041725             0254*   
041725             0255*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041725             0256*   ; inputs: a is scaling mode, 1=on, 0=off
041725             0257*   ; note: default setting on boot is scaling ON
041725             0258*   vdu_set_scaling:
041725 32 37 17 04 0259*   	ld (@arg),a
041729 21 34 17 04 0260*   	ld hl,@cmd
04172D 01 04 00 00 0261*   	ld bc,@end-@cmd
041731 5B DF       0262*   	rst.lil $18
041733 C9          0263*   	ret
041734 17 00 C0    0264*   @cmd: db 23,0,0xC0
041737 00          0265*   @arg: db 0  ; scaling on/off
041738             0266*   @end:
041738             0267*   
041738             0268*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041738             0269*   ; inputs: hl=bufferId
041738             0270*   vdu_buff_select:
041738 22 4A 17 04 0271*   	ld (@bufferId),hl
04173C 21 47 17 04 0272*   	ld hl,@cmd
041740 01 05 00 00 0273*   	ld bc,@end-@cmd
041744 5B DF       0274*   	rst.lil $18
041746 C9          0275*   	ret
041747 17 1B 20    0276*   @cmd: db 23,27,0x20
04174A 00 00       0277*   @bufferId: dw 0x0000
04174C 00          0278*   @end: db 0x00 ; padding
04174D             0279*   
04174D             0280*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04174D             0281*   ; inputs: a=format; bc=width; de=height
04174D             0282*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04174D             0283*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04174D             0284*   ; 0 	RGBA8888 (4-bytes per pixel)
04174D             0285*   ; 1 	RGBA2222 (1-bytes per pixel)
04174D             0286*   ; 2 	Mono/Mask (1-bit per pixel)
04174D             0287*   ; 3 	Reserved for internal use by VDP (“native” format)
04174D             0288*   vdu_bmp_create:
04174D ED 43 69 17 0289*       ld (@width),bc
       04          
041752 ED 53 6B 17 0290*       ld (@height),de
       04          
041757 32 6D 17 04 0291*       ld (@fmt),a
04175B 21 66 17 04 0292*   	ld hl,@cmd
04175F 01 08 00 00 0293*   	ld bc,@end-@cmd
041763 5B DF       0294*   	rst.lil $18
041765 C9          0295*   	ret
041766 17 1B 21    0296*   @cmd:       db 23,27,0x21
041769 00 00       0297*   @width:     dw 0x0000
04176B 00 00       0298*   @height:    dw 0x0000
04176D 00          0299*   @fmt:       db 0x00
04176E             0300*   @end:
04176E             0301*   
04176E             0302*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
04176E             0303*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
04176E             0304*   vdu_load_img_rgba2_to_8:
04176E             0305*   ; backup the target buffer id and image dimensions
04176E E5          0306*       push hl
04176F D5          0307*       push de
041770 C5          0308*       push bc
041771             0309*   ; load the rgba2 image to working buffer 65534
041771 21 FE FF 00 0310*       ld hl,65534 ; temporary working buffer id
041775 CD 78 18 04 0311*   	call vdu_load_buffer_from_file
041779             0312*   ; restore the image dimensions and target buffer id
041779 C1          0313*       pop bc
04177A D1          0314*       pop de
04177B E1          0315*       pop hl
04177C             0316*   ; fall through to vdu_rgba2_to_8
04177C             0317*   
04177C             0318*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
04177C             0319*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
04177C             0320*   ; the "expand bitmap" command is:
04177C             0321*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
04177C             0322*   ; and then to reverse the byte order to fix endian-ness:
04177C             0323*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
04177C             0324*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
04177C             0325*   ; VDU 23,27,&20,targetBufferID%;
04177C             0326*   ; VDU 23,27,&21,width%;height%;0
04177C             0327*   ; -------------------------------------------------------------------
04177C             0328*   ; inputs: bc,de image width,height ; hl = targetBufferId
04177C             0329*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
04177C             0330*   vdu_rgba2_to_8:
04177C             0331*   ; load the image dimensions and buffer id parameters
04177C ED 43 D8 17 0332*       ld (@width),bc
       04          
041781 ED 53 DA 17 0333*       ld (@height),de
       04          
041786 22 BD 17 04 0334*       ld (@bufferId0),hl
04178A 22 CA 17 04 0335*       ld (@bufferId2),hl
04178E 22 D3 17 04 0336*       ld (@bufferId1),hl
041792             0337*   ; clean up bytes that got stomped on by the ID loads
041792 3E 48       0338*       ld a,0x48
041794 32 BF 17 04 0339*       ld (@bufferId0+2),a
041798 3E 17       0340*       ld a,23
04179A 32 D5 17 04 0341*       ld (@bufferId1+2),a
04179E 3E 18       0342*       ld a,24
0417A0 32 CC 17 04 0343*       ld (@bufferId2+2),a
0417A4 AF          0344*       xor a
0417A5 32 DC 17 04 0345*       ld (@height+2),a
0417A9             0346*   ; send the vdu command strings
0417A9 21 B4 17 04 0347*       ld hl,@beg
0417AD 01 29 00 00 0348*       ld bc,@end-@beg
0417B1 5B DF       0349*       rst.lil $18
0417B3 C9          0350*       ret
0417B4             0351*   @beg:
0417B4             0352*   ; Command 14: Consolidate blocks in a buffer
0417B4             0353*   ; VDU 23, 0, &A0, bufferId; 14
0417B4 17 00 A0    0354*       db 23,0,0xA0
0417B7 FE FF       0355*       dw 65534 ; workingBufferId
0417B9 0E          0356*       db 14 ; consolidate blocks
0417BA             0357*   ; the "expand bitmap" command is:
0417BA             0358*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0417BA 17 00 A0    0359*       db 23,0,0xA0
0417BD 00 00       0360*   @bufferId0: dw 0x0000 ; targetBufferId
0417BF 48          0361*       db 0x48 ; given as decimal command 72 in the docs
0417C0 02          0362*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0417C1 FE FF       0363*       dw 65534 ; sourceBufferId
0417C3 00 7F BF FF 0364*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
0417C7             0365*   ; reverse the byte order to fix endian-ness:
0417C7             0366*   ; Command 24: Reverse the order of data of blocks within a buffer
0417C7             0367*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
0417C7             0368*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0417C7 17 00 A0    0369*       db 23,0,0xA0
0417CA 00 00       0370*   @bufferId2:    dw 0x0000 ; targetBufferId
0417CC 18          0371*       db 24 ; reverse byte order
0417CD 04          0372*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
0417CE 04 00       0373*       dw 4 ; size (4 bytes)
0417D0             0374*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0417D0             0375*   ; VDU 23,27,&20,targetBufferID%;
0417D0 17 1B 20    0376*       db 23,27,0x20 ; select bitmap
0417D3 00 00       0377*   @bufferId1: dw 0x0000 ; targetBufferId
0417D5             0378*   ; VDU 23,27,&21,width%;height%;0
0417D5 17 1B 21    0379*       db 23,27,0x21 ; create bitmap from buffer
0417D8 00 00       0380*   @width: dw 0x0000
0417DA 00 00       0381*   @height: dw 0x0000
0417DC 00          0382*       db 0x00 ; rgba8888 format
0417DD             0383*   @end:
0417DD             0384*   
0417DD             0385*   ; scratch variables
0417DD 00 00 00    0386*   bufferId0: dl 0x000000
0417E0 00 00 00    0387*   bufferId1: dl 0x000000
0417E3             0388*   
0417E3             0389*   ; load a vdu buffer from local memory
0417E3             0390*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0417E3             0391*   vdu_load_buffer:
0417E3 ED 43 0C 18 0392*       ld (@length),bc
       04          
0417E8 D5          0393*       push de ; save data pointer
0417E9             0394*   ; send the vdu command string
0417E9 7D          0395*       ld a,l
0417EA 32 09 18 04 0396*       ld (@bufferId),a
0417EE 7C          0397*       ld a,h
0417EF 32 0A 18 04 0398*       ld (@bufferId+1),a
0417F3 21 06 18 04 0399*       ld hl,@cmd
0417F7 01 08 00 00 0400*       ld bc,@end-@cmd
0417FB 5B DF       0401*       rst.lil $18
0417FD             0402*   ; send the buffer data
0417FD E1          0403*       pop hl ; pointer to data
0417FE ED 4B 0C 18 0404*       ld bc,(@length)
       04          
041803 5B DF       0405*       rst.lil $18 ; send it
041805 C9          0406*       ret
041806             0407*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041806 17 00 A0    0408*   @cmd:       db 23,0,0xA0
041809 00 00       0409*   @bufferId:	dw 0x0000
04180B 00          0410*   		    db 0 ; load buffer
04180C 00 00       0411*   @length:	dw 0x0000
04180E 00          0412*   @end: db 0 ; padding
04180F             0413*   
04180F             0414*   ; clear a buffer
04180F             0415*   ; inputs: hl = bufferId
04180F             0416*   vdu_clear_buffer:
04180F 7D          0417*       ld a,l
041810 32 27 18 04 0418*       ld (@bufferId),a
041814 7C          0419*       ld a,h
041815 32 28 18 04 0420*       ld (@bufferId+1),a
041819 21 24 18 04 0421*       ld hl,@cmd
04181D 01 06 00 00 0422*       ld bc,@end-@cmd
041821 5B DF       0423*       rst.lil $18
041823 C9          0424*       ret
041824 17 00 A0    0425*   @cmd:       db 23,0,0xA0
041827 00 00       0426*   @bufferId:	dw 0x0000
041829 02          0427*   		    db 2 ; clear buffer
04182A             0428*   @end:
04182A             0429*   
04182A             0430*   vdu_clear_all_buffers:
04182A             0431*   ; clear all buffers
04182A 21 35 18 04 0432*       ld hl,@beg
04182E 01 06 00 00 0433*       ld bc,@end-@beg
041832 5B DF       0434*       rst.lil $18
041834 C9          0435*       ret
041835 17 00 A0    0436*   @beg: db 23,0,$A0
041838 FF FF       0437*         dw -1 ; clear all buffers
04183A 02          0438*         db 2  ; command 2: clear a buffer
04183B             0439*   @end:
04183B             0440*   
04183B             0441*   ; Command 14: Consolidate blocks in a buffer
04183B             0442*   vdu_consolidate_buffer:
04183B             0443*   ; set parameters for vdu call
04183B 7D          0444*       ld a,l
04183C 32 53 18 04 0445*       ld (@bufferId),a
041840 7C          0446*       ld a,h
041841 32 54 18 04 0447*       ld (@bufferId+1),a
041845 21 50 18 04 0448*       ld hl,@beg
041849 01 06 00 00 0449*       ld bc,@end-@beg
04184D 5B DF       0450*       rst.lil $18
04184F C9          0451*       ret
041850             0452*   ; VDU 23, 0, &A0, bufferId; 14
041850 17 00 A0    0453*   @beg: db 23,0,0xA0
041853 00 00       0454*   @bufferId: dw 0x0000
041855 0E          0455*              db 14
041856             0456*   @end:
041856             0457*   
041856             0458*   ; load an image file to a buffer and make it a bitmap
041856             0459*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041856             0460*   vdu_load_img:
041856             0461*   ; back up image type and dimension parameters
041856 22 DD 17 04 0462*       ld (bufferId0),hl
04185A F5          0463*       push af
04185B C5          0464*   	push bc
04185C D5          0465*   	push de
04185D             0466*   ; load the image
04185D CD 78 18 04 0467*   	call vdu_load_buffer_from_file
041861             0468*   ; now make it a bitmap
041861 2A DD 17 04 0469*       ld hl,(bufferId0)
041865 CD 3B 18 04 0470*       call vdu_consolidate_buffer
041869 2A DD 17 04 0471*       ld hl,(bufferId0)
04186D CD 38 17 04 0472*       call vdu_buff_select
041871 D1          0473*   	pop de ; image height
041872 C1          0474*   	pop bc ; image width
041873 F1          0475*   	pop af ; image type
041874 C3 4D 17 04 0476*   	jp vdu_bmp_create ; will return to caller from there
041878             0477*   
041878             0478*   ; inputs: hl = bufferId; iy = pointer to filename
041878             0479*   vdu_load_buffer_from_file:
041878 22 DD 17 04 0480*       ld (bufferId0),hl
04187C             0481*   
04187C             0482*   ; clear target buffer
04187C CD 0F 18 04 0483*       call vdu_clear_buffer
041880             0484*   
041880             0485*   ; open the file in read mode
041880             0486*   ; Open a file
041880             0487*   ; HLU: Filename
041880             0488*   ;   C: Mode
041880             0489*   ; Returns:
041880             0490*   ;   A: Filehandle, or 0 if couldn't open
041880 FD E5       0491*   	push iy ; pointer to filename
041882 E1          0492*   	pop hl
041883 0E 01       0493*   	ld c,fa_read
041885             0494*       MOSCALL mos_fopen
041885 3E 0A       0001*M1 			LD	A, function
041887 5B CF       0002*M1 			RST.LIL	08h
041889 32 C4 18 04 0495*       ld (@filehandle),a
04188D             0496*   
04188D             0497*   @read_file:
04188D             0498*   ; Read a block of data from a file
04188D             0499*   ;   C: Filehandle
04188D             0500*   ; HLU: Pointer to where to write the data to
04188D             0501*   ; DEU: Number of bytes to read
04188D             0502*   ; Returns:
04188D             0503*   ; DEU: Number of bytes read
04188D 3A C4 18 04 0504*       ld a,(@filehandle)
041891 4F          0505*       ld c,a
041892 21 00 E0 B7 0506*       ld hl,filedata
041896 11 00 20 00 0507*       ld de,8192 ; max we can read into onboard sram at one time
04189A             0508*       MOSCALL mos_fread
04189A 3E 1A       0001*M1 			LD	A, function
04189C 5B CF       0002*M1 			RST.LIL	08h
04189E             0509*   
04189E             0510*   ; test de for zero bytes read
04189E 21 00 00 00 0511*       ld hl,0
0418A2 AF          0512*       xor a ; clear carry
0418A3 ED 52       0513*       sbc hl,de
0418A5 CA BB 18 04 0514*       jp z,@close_file
0418A9             0515*   
0418A9             0516*   ; load a vdu buffer from local memory
0418A9             0517*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0418A9 2A DD 17 04 0518*       ld hl,(bufferId0)
0418AD D5          0519*       push de ; chunksize
0418AE C1          0520*       pop bc
0418AF 11 00 E0 B7 0521*       ld de,filedata
0418B3 CD E3 17 04 0522*       call vdu_load_buffer
0418B7             0523*   
0418B7             0524*   ; read the next block
0418B7 C3 8D 18 04 0525*       jp @read_file
0418BB             0526*   
0418BB             0527*   ; close the file
0418BB             0528*   @close_file:
0418BB 3A C4 18 04 0529*       ld a,(@filehandle)
0418BF             0530*       MOSCALL mos_fclose
0418BF 3E 0B       0001*M1 			LD	A, function
0418C1 5B CF       0002*M1 			RST.LIL	08h
0418C3 C9          0531*       ret ; vdu_load_buffer_from_file
0418C4             0532*   
0418C4 00          0533*   @filehandle: db 0 ; file handle
0418C5 00 00 00    0534*   @fil: dl 0 ; pointer to FIL struct
0418C8             0535*   
0418C8 00 00 00    0536*   @chunkpointer: dl 0 ; pointer to current chunk
0418CB             0537*   
0418CB             0538*   ; File information structure (FILINFO)
0418CB             0539*   @filinfo:
0418CB 00 00 00 00 0540*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
0418CF 00 00       0541*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
0418D1 00 00       0542*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
0418D3 00          0543*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
0418D4 00 00 00 00 0544*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
0418E1 00 00 00 00 0545*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0419E1             0040        include "vdu_fonts.inc"
0419E1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041A00             0002*   ; select font
041A00             0003*   ; inputs: hl = bufferId, a = font flags
041A00             0004*   ; Flags:
041A00             0005*   ; Bit	Description
041A00             0006*   ; 0	Adjust cursor position to ensure text baseline is aligned
041A00             0007*   ;   0: Do not adjust cursor position (best for changing font on a new line)
041A00             0008*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
041A00             0009*   ; 1-7	Reserved for future use
041A00             0010*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041A00             0011*   vdu_font_select:
041A00 22 17 1A 04 0012*       ld (@bufferId),hl
041A04 32 19 1A 04 0013*       ld (@flags),a
041A08 21 13 1A 04 0014*       ld hl,@cmd
041A0C 01 07 00 00 0015*       ld bc,@end-@cmd
041A10 5B DF       0016*       rst.lil $18
041A12 C9          0017*       ret
041A13 17 00 95 00 0018*   @cmd: db 23, 0, 0x95, 0
041A17 00 00       0019*   @bufferId: dw 0x0000
041A19 00          0020*   @flags: db 0x00
041A1A             0021*   @end:
041A1A             0022*   
041A1A             0023*   ; create font from buffer
041A1A             0024*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041A1A             0025*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041A1A             0026*   vdu_font_create:
041A1A 22 3F 1A 04 0027*       ld (@bufferId),hl
041A1E ED 53 41 1A 0028*       ld (@width),de ; also loads height
       04          
041A23 32 44 1A 04 0029*       ld (@flags),a
041A27 7A          0030*       ld a,d ; height
041A28 32 43 1A 04 0031*       ld (@ascent),a ; ascent = height
041A2C             0032*   ; consolidate buffer
041A2C CD 3B 18 04 0033*       call vdu_consolidate_buffer
041A30             0034*   ; create font
041A30 21 3B 1A 04 0035*       ld hl,@cmd
041A34 01 0A 00 00 0036*       ld bc,@end-@cmd
041A38 5B DF       0037*       rst.lil $18
041A3A C9          0038*       ret
041A3B 17 00 95 01 0039*   @cmd: db 23, 0, 0x95, 1
041A3F 00 00       0040*   @bufferId: dw 0x0000
041A41 00          0041*   @width: db 0x00
041A42 00          0042*   @height: db 0x00
041A43 00          0043*   @ascent: db 0x00
041A44 00          0044*   @flags: db 0x00
041A45             0045*   @end:
041A45             0046*   
041A45             0047*   ; set or adjust font property
041A45             0048*   ; inputs: hl = bufferId, a = field, de = value
041A45             0049*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041A45             0050*   vdu_font_property:
041A45 22 61 1A 04 0051*       ld (@bufferId),hl
041A49 32 63 1A 04 0052*       ld (@field),a
041A4D ED 53 64 1A 0053*       ld (@value),de
       04          
041A52 21 5D 1A 04 0054*       ld hl,@cmd
041A56 01 09 00 00 0055*       ld bc,@end-@cmd
041A5A 5B DF       0056*       rst.lil $18
041A5C C9          0057*       ret
041A5D 17 00 95 02 0058*   @cmd: db 23, 0, 0x95, 2
041A61 00 00       0059*   @bufferId: dw 0x0000
041A63 00          0060*   @field: db 0x00
041A64 00 00       0061*   @value: dw 0x0000
041A66 00          0062*   @end: db 0x00 ; padding
041A67             0063*   
041A67             0064*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041A67             0065*   
041A67             0066*   ; Clear/Delete font
041A67             0067*   ; inputs: hl = bufferId
041A67             0068*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041A67             0069*   vdu_font_clear:
041A67 22 7A 1A 04 0070*       ld (@bufferId),hl
041A6B 21 76 1A 04 0071*       ld hl,@cmd
041A6F 01 06 00 00 0072*       ld bc,@end-@cmd
041A73 5B DF       0073*       rst.lil $18
041A75 C9          0074*       ret
041A76 17 00 95 04 0075*   @cmd: db 23, 0, 0x95, 4
041A7A 00 00       0076*   @bufferId: dw 0x0000
041A7C 00          0077*   @end: db 0x00 ; padding
041A7D             0078*   
041A7D             0079*   ; Copy system font to buffer
041A7D             0080*   ; inputs: hl = bufferId
041A7D             0081*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041A7D             0082*   vdu_font_copy_system:
041A7D 22 90 1A 04 0083*       ld (@bufferId),hl
041A81 21 8C 1A 04 0084*       ld hl,@cmd
041A85 01 06 00 00 0085*       ld bc,@end-@cmd
041A89 5B DF       0086*       rst.lil $18
041A8B C9          0087*       ret
041A8C 17 00 95 05 0088*   @cmd: db 23, 0, 0x95, 5
041A90 00 00       0089*   @bufferId: dw 0x0000
041A92 00          0090*   @end: db 0x00 ; padding
041A93             0041        include "vdu_plot.inc"
041A93 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
041B00             0002*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041B00             0003*   ; PLOT code 	(Decimal) 	Effect
041B00             0004*   ; &00-&07 	0-7 	Solid line, includes both ends
041B00             0005*   plot_sl_both: equ 0x00
041B00             0006*   
041B00             0007*   ; &08-&0F 	8-15 	Solid line, final point omitted
041B00             0008*   plot_sl_first: equ 0x08
041B00             0009*   
041B00             0010*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
041B00             0011*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
041B00             0012*   
041B00             0013*   ; &20-&27 	32-39 	Solid line, first point omitted
041B00             0014*   plot_sl_last: equ 0x20
041B00             0015*   
041B00             0016*   ; &28-&2F 	40-47 	Solid line, both points omitted
041B00             0017*   plot_sl_none: equ 0x28
041B00             0018*   
041B00             0019*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
041B00             0020*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
041B00             0021*   
041B00             0022*   ; &40-&47 	64-71 	Point plot
041B00             0023*   plot_pt: equ 0x40
041B00             0024*   
041B00             0025*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
041B00             0026*   plot_lf_lr_non_bg: equ 0x48
041B00             0027*   
041B00             0028*   ; &50-&57 	80-87 	Triangle fill
041B00             0029*   plot_tf: equ 0x50
041B00             0030*   
041B00             0031*   ; &58-&5F 	88-95 	Line fill right to background §§
041B00             0032*   plot_lf_r_bg: equ 0x58
041B00             0033*   
041B00             0034*   ; &60-&67 	96-103 	Rectangle fill
041B00             0035*   plot_rf: equ 0x60
041B00             0036*   
041B00             0037*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
041B00             0038*   plot_lf_lr_fg: equ 0x60
041B00             0039*   
041B00             0040*   ; &70-&77 	112-119 	Parallelogram fill
041B00             0041*   plot_pf: equ 0x70
041B00             0042*   
041B00             0043*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
041B00             0044*   plot_lf_r_non_fg: equ 0x78
041B00             0045*   
041B00             0046*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
041B00             0047*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
041B00             0048*   
041B00             0049*   ; &90-&97 	144-151 	Circle outline
041B00             0050*   plot_co: equ 0x90
041B00             0051*   
041B00             0052*   ; &98-&9F 	152-159 	Circle fill
041B00             0053*   plot_cf: equ 0x98
041B00             0054*   
041B00             0055*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
041B00             0056*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
041B00             0057*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
041B00             0058*   
041B00             0059*   ; &B8-&BF 	184-191 	Rectangle copy/move
041B00             0060*   plot_rcm: equ 0xB8
041B00             0061*   
041B00             0062*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
041B00             0063*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
041B00             0064*   ; &D0-&D7 	208-215 	Not defined
041B00             0065*   ; &D8-&DF 	216-223 	Not defined
041B00             0066*   ; &E0-&E7 	224-231 	Not defined
041B00             0067*   
041B00             0068*   ; &E8-&EF 	232-239 	Bitmap plot §
041B00             0069*   plot_bmp: equ 0xE8
041B00             0070*   
041B00             0071*   ; &F0-&F7 	240-247 	Not defined
041B00             0072*   ; &F8-&FF 	248-255 	Not defined
041B00             0073*   
041B00             0074*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
041B00             0075*   ; Agon Console8 VDP 2.2.0
041B00             0076*   
041B00             0077*   ; Within each group of eight plot codes, the effects are as follows:
041B00             0078*   ; Plot code 	Effect
041B00             0079*   ; 0 	Move relative
041B00             0080*   mv_rel: equ 0
041B00             0081*   
041B00             0082*   ; 1 	Plot relative in current foreground colour
041B00             0083*   dr_rel_fg: equ 1
041B00             0084*   
041B00             0085*   ; 2 	Not supported (Plot relative in logical inverse colour)
041B00             0086*   ; 3 	Plot relative in current background colour
041B00             0087*   dr_rel_bg: equ 3
041B00             0088*   
041B00             0089*   ; 4 	Move absolute
041B00             0090*   mv_abs: equ 4
041B00             0091*   
041B00             0092*   ; 5 	Plot absolute in current foreground colour
041B00             0093*   dr_abs_fg: equ 5
041B00             0094*   
041B00             0095*   ; 6 	Not supported (Plot absolute in logical inverse colour)
041B00             0096*   ; 7 	Plot absolute in current background colour
041B00             0097*   dr_abs_bg: equ 7
041B00             0098*   
041B00             0099*   ; Codes 0-3 use the position data provided as part of the command
041B00             0100*   ; as a relative position, adding the position given to the current
041B00             0101*   ; graphical cursor position. Codes 4-7 use the position data provided
041B00             0102*   ; as part of the command as an absolute position, setting the current
041B00             0103*   ; graphical cursor position to the position given.
041B00             0104*   
041B00             0105*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
041B00             0106*   ; current pixel colour. These operations cannot currently be supported
041B00             0107*   ; by the graphics system the Agon VDP uses, so these codes are not
041B00             0108*   ; supported. Support for these codes may be added in a future version
041B00             0109*   ; of the VDP firmware.
041B00             0110*   
041B00             0111*   ; 16 colour palette constants
041B00             0112*   c_black: equ 0
041B00             0113*   c_red_dk: equ 1
041B00             0114*   c_green_dk: equ 2
041B00             0115*   c_yellow_dk: equ 3
041B00             0116*   c_blue_dk: equ 4
041B00             0117*   c_magenta_dk: equ 5
041B00             0118*   c_cyan_dk: equ 6
041B00             0119*   c_grey: equ 7
041B00             0120*   c_grey_dk: equ 8
041B00             0121*   c_red: equ 9
041B00             0122*   c_green: equ 10
041B00             0123*   c_yellow: equ 11
041B00             0124*   c_blue: equ 12
041B00             0125*   c_magenta: equ 13
041B00             0126*   c_cyan: equ 14
041B00             0127*   c_white: equ 15
041B00             0128*   
041B00             0129*   ; VDU 25, mode, x; y;: PLOT command
041B00             0130*   ; inputs: a=mode, bc=x0, de=y0
041B00             0131*   vdu_plot:
041B00 32 1A 1B 04 0132*       ld (@mode),a
041B04 ED 43 1B 1B 0133*       ld (@x0),bc
       04          
041B09 ED 53 1D 1B 0134*       ld (@y0),de
       04          
041B0E 21 19 1B 04 0135*   	ld hl,@cmd
041B12 01 06 00 00 0136*   	ld bc,@end-@cmd
041B16 5B DF       0137*   	rst.lil $18
041B18 C9          0138*   	ret
041B19 19          0139*   @cmd:   db 25
041B1A 00          0140*   @mode:  db 0
041B1B 00 00       0141*   @x0: 	dw 0
041B1D 00 00       0142*   @y0: 	dw 0
041B1F 00          0143*   @end:   db 0 ; extra byte to soak up deu
041B20             0144*   
041B20             0145*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041B20             0146*   ; &E8-&EF 	232-239 	Bitmap plot §
041B20             0147*   ; VDU 25, mode, x; y;: PLOT command
041B20             0148*   ; inputs: bc=x0, de=y0
041B20             0149*   ; prerequisites: vdu_buff_select
041B20             0150*   vdu_plot_bmp:
041B20 ED 43 37 1B 0151*       ld (@x0),bc
       04          
041B25 ED 53 39 1B 0152*       ld (@y0),de
       04          
041B2A 21 35 1B 04 0153*   	ld hl,@cmd
041B2E 01 06 00 00 0154*   	ld bc,@end-@cmd
041B32 5B DF       0155*   	rst.lil $18
041B34 C9          0156*   	ret
041B35 19          0157*   @cmd:   db 25
041B36 ED          0158*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041B37 00 00       0159*   @x0: 	dw 0x0000
041B39 00 00       0160*   @y0: 	dw 0x0000
041B3B 00          0161*   @end:   db 0x00 ; padding
041B3C             0162*   
041B3C             0163*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041B3C             0164*   ; &E8-&EF 	232-239 	Bitmap plot §
041B3C             0165*   ; VDU 25, mode, x; y;: PLOT command
041B3C             0166*   ; inputs: bc=x0, de=y0
041B3C             0167*   ; USING 16.8 FIXED POINT COORDINATES
041B3C             0168*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041B3C             0169*   ;   the fractional portiion of the inputs are truncated
041B3C             0170*   ;   leaving only the 16-bit integer portion
041B3C             0171*   ; prerequisites: vdu_buff_select
041B3C             0172*   vdu_plot_bmp168:
041B3C             0173*   ; populate in the reverse of normal to keep the
041B3C             0174*   ; inputs from stomping on each other
041B3C ED 53 5A 1B 0175*       ld (@y0-1),de
       04          
041B41 ED 43 58 1B 0176*       ld (@x0-1),bc
       04          
041B46 3E ED       0177*       ld a,plot_bmp+dr_abs_fg ; 0xED
041B48 32 58 1B 04 0178*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
041B4C 21 57 1B 04 0179*   	ld hl,@cmd
041B50 01 06 00 00 0180*   	ld bc,@end-@cmd
041B54 5B DF       0181*   	rst.lil $18
041B56 C9          0182*   	ret
041B57 19          0183*   @cmd:   db 25
041B58 ED          0184*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041B59 00 00       0185*   @x0: 	dw 0x0000
041B5B 00 00       0186*   @y0: 	dw 0x0000
041B5D             0187*   @end:  ; no padding required b/c we shifted de right
041B5D             0188*   
041B5D             0189*   ; draw a filled rectangle
041B5D             0190*   vdu_plot_rf:
041B5D ED 43 84 1B 0191*       ld (@x0),bc
       04          
041B62 ED 53 86 1B 0192*       ld (@y0),de
       04          
041B67 DD 22 8A 1B 0193*       ld (@x1),ix
       04          
041B6C FD 22 8C 1B 0194*       ld (@y1),iy
       04          
041B71 3E 19       0195*       ld a,25 ; we have to reload the 2nd plot command
041B73 32 88 1B 04 0196*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041B77 21 82 1B 04 0197*   	ld hl,@cmd0
041B7B 01 0C 00 00 0198*   	ld bc,@end-@cmd0
041B7F 5B DF       0199*   	rst.lil $18
041B81 C9          0200*       ret
041B82 19          0201*   @cmd0:  db 25 ; plot
041B83 04          0202*   @arg0:  db plot_sl_both+mv_abs
041B84 00 00       0203*   @x0:    dw 0x0000
041B86 00 00       0204*   @y0:    dw 0x0000
041B88 19          0205*   @cmd1:  db 25 ; plot
041B89 65          0206*   @arg1:  db plot_rf+dr_abs_fg
041B8A 00 00       0207*   @x1:    dw 0x0000
041B8C 00 00       0208*   @y1:    dw 0x0000
041B8E 00          0209*   @end:   db 0x00 ; padding
041B8F             0210*   
041B8F             0211*   ; draw a filled circle
041B8F             0212*   vdu_plot_cf:
041B8F ED 43 B6 1B 0213*       ld (@x0),bc
       04          
041B94 ED 53 B8 1B 0214*       ld (@y0),de
       04          
041B99 DD 22 BC 1B 0215*       ld (@x1),ix
       04          
041B9E FD 22 BE 1B 0216*       ld (@y1),iy
       04          
041BA3 3E 19       0217*       ld a,25 ; we have to reload the 2nd plot command
041BA5 32 BA 1B 04 0218*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041BA9 21 B4 1B 04 0219*   	ld hl,@cmd0
041BAD 01 0C 00 00 0220*   	ld bc,@end-@cmd0
041BB1 5B DF       0221*   	rst.lil $18
041BB3 C9          0222*       ret
041BB4 19          0223*   @cmd0:  db 25 ; plot
041BB5 04          0224*   @arg0:  db plot_sl_both+mv_abs
041BB6 00 00       0225*   @x0:    dw 0x0000
041BB8 00 00       0226*   @y0:    dw 0x0000
041BBA 19          0227*   @cmd1:  db 25 ; plot
041BBB 9D          0228*   @arg1:  db plot_cf+dr_abs_fg
041BBC 00 00       0229*   @x1:    dw 0x0000
041BBE 00 00       0230*   @y1:    dw 0x0000
041BC0 00          0231*   @end:   db 0x00 ; padding
041BC1             0042        include "vdu_sprites.inc"
041BC1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041C00             0002*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041C00             0003*   ; the VDP can support up to 256 sprites. They must be defined
041C00             0004*   ; contiguously, and so the first sprite is sprite 0.
041C00             0005*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041C00             0006*   ; Once a selection of sprites have been defined, you can activate
041C00             0007*   ; them using the VDU 23, 27, 7, n command, where n is the number
041C00             0008*   ; of sprites to activate. This will activate the first n sprites,
041C00             0009*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041C00             0010*   
041C00             0011*   ; A single sprite can have multiple "frames", referring to
041C00             0012*   ; different bitmaps.
041C00             0013*   ; (These bitmaps do not need to be the same size.)
041C00             0014*   ; This allows a sprite to include an animation sequence,
041C00             0015*   ; which can be stepped through one frame at a time, or picked
041C00             0016*   ; in any order.
041C00             0017*   
041C00             0018*   ; Any format of bitmap can be used as a sprite frame. It should
041C00             0019*   ; be noted however that "native" format bitmaps are not
041C00             0020*   ; recommended for use as sprite frames, as they cannot get
041C00             0021*   ; erased from the screen. (As noted above, the "native" bitmap
041C00             0022*   ; format is not really intended for general use.) This is part
041C00             0023*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041C00             0024*   ; screen are now stored in RGBA2222 format.
041C00             0025*   
041C00             0026*   ; An "active" sprite can be hidden, so it will stop being drawn,
041C00             0027*   ; and then later shown again.
041C00             0028*   
041C00             0029*   ; Moving sprites around the screen is done by changing the
041C00             0030*   ; position of the sprite. This can be done either by setting
041C00             0031*   ; the absolute position of the sprite, or by moving the sprite
041C00             0032*   ; by a given number of pixels. (Sprites are positioned using
041C00             0033*   ; pixel coordinates, and not by the logical OS coordinate system.)
041C00             0034*   ; In the current sprite system, sprites will not update their
041C00             0035*   ; position on-screen until either another drawing operation is
041C00             0036*   ; performed or an explicit VDU 23, 27, 15 command is performed.
041C00             0037*   
041C00             0038*   ; VDU 23, 27, 4, n: Select sprite n
041C00             0039*   ; inputs: a is the 8-bit sprite id
041C00             0040*   vdu_sprite_select:
041C00 32 12 1C 04 0041*       ld (@sprite),a
041C04 21 0F 1C 04 0042*       ld hl,@cmd
041C08 01 04 00 00 0043*       ld bc,@end-@cmd
041C0C 5B DF       0044*       rst.lil $18
041C0E C9          0045*       ret
041C0F 17 1B 04    0046*   @cmd:    db 23,27,4
041C12 00          0047*   @sprite: db 0x00
041C13             0048*   @end:
041C13             0049*   
041C13             0050*   ; VDU 23, 27, 5: Clear frames in current sprite
041C13             0051*   ; inputs: none
041C13             0052*   ; prerequisites: vdu_sprite_select
041C13             0053*   vdu_sprite_clear_frames:
041C13 21 1E 1C 04 0054*       ld hl,@cmd
041C17 01 03 00 00 0055*       ld bc,@end-@cmd
041C1B 5B DF       0056*       rst.lil $18
041C1D C9          0057*       ret
041C1E 17 1B 05    0058*   @cmd: db 23,27,5
041C21             0059*   @end:
041C21             0060*   
041C21             0061*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
041C21             0062*   ; inputs: a is the 8-bit bitmap number
041C21             0063*   ; prerequisites: vdu_sprite_select
041C21             0064*   vdu_sprite_add_bmp:
041C21 32 33 1C 04 0065*       ld (@bmp),a
041C25 21 30 1C 04 0066*       ld hl,@cmd
041C29 01 04 00 00 0067*       ld bc,@end-@cmd
041C2D 5B DF       0068*       rst.lil $18
041C2F C9          0069*       ret
041C30 17 1B 06    0070*   @cmd: db 23,27,6
041C33 00          0071*   @bmp: db 0x00
041C34             0072*   @end:
041C34             0073*   
041C34             0074*   ; VDU 23, 27, 7, n: Activate n sprites
041C34             0075*   ; inputs: a is the number of sprites to activate
041C34             0076*   ; prerequisites: each sprite activated must have at least one frame attached to it
041C34             0077*   vdu_sprite_activate:
041C34 32 46 1C 04 0078*       ld (@num),a
041C38 21 43 1C 04 0079*       ld hl,@cmd
041C3C 01 04 00 00 0080*       ld bc,@end-@cmd
041C40 5B DF       0081*       rst.lil $18
041C42 C9          0082*       ret
041C43 17 1B 07    0083*   @cmd: db 23,27,7
041C46 00          0084*   @num: db 0x00
041C47             0085*   @end:
041C47             0086*   
041C47             0087*   ; VDU 23, 27, 8: Select next frame of current sprite
041C47             0088*   ; inputs: none
041C47             0089*   ; prerequisites: vdu_sprite_select
041C47             0090*   vdu_sprite_next_frame:
041C47 21 52 1C 04 0091*       ld hl,@cmd
041C4B 01 03 00 00 0092*       ld bc,@end-@cmd
041C4F 5B DF       0093*       rst.lil $18
041C51 C9          0094*       ret
041C52 17 1B 08    0095*   @cmd: db 23,27,8
041C55             0096*   @end:
041C55             0097*   
041C55             0098*   ; VDU 23, 27, 9: Select previous frame of current sprite
041C55             0099*   ; inputs: none
041C55             0100*   ; prerequisites: vdu_sprite_select
041C55             0101*   vdu_sprite_prev_frame:
041C55 21 60 1C 04 0102*       ld hl,@cmd
041C59 01 03 00 00 0103*       ld bc,@end-@cmd
041C5D 5B DF       0104*       rst.lil $18
041C5F C9          0105*       ret
041C60 17 1B 09    0106*   @cmd: db 23,27,9
041C63             0107*   @end:
041C63             0108*   
041C63             0109*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
041C63             0110*   ; inputs: a is frame number to select
041C63             0111*   ; prerequisites: vdu_sprite_select
041C63             0112*   vdu_sprite_select_frame:
041C63 32 75 1C 04 0113*       ld (@frame),a
041C67 21 72 1C 04 0114*       ld hl,@cmd
041C6B 01 04 00 00 0115*       ld bc,@end-@cmd
041C6F 5B DF       0116*       rst.lil $18
041C71 C9          0117*       ret
041C72 17 1B 0A    0118*   @cmd:    db 23,27,10
041C75 00          0119*   @frame:  db 0x00
041C76             0120*   @end:
041C76             0121*   
041C76             0122*   ; VDU 23, 27, 11: Show current sprite
041C76             0123*   ; inputs: none
041C76             0124*   ; prerequisites: vdu_sprite_select
041C76             0125*   vdu_sprite_show:
041C76 21 81 1C 04 0126*       ld hl,@cmd
041C7A 01 03 00 00 0127*       ld bc,@end-@cmd
041C7E 5B DF       0128*       rst.lil $18
041C80 C9          0129*       ret
041C81 17 1B 0B    0130*   @cmd: db 23,27,11
041C84             0131*   @end:
041C84             0132*   
041C84             0133*   ; VDU 23, 27, 12: Hide current sprite
041C84             0134*   ; inputs: none
041C84             0135*   ; prerequisites: vdu_sprite_select
041C84             0136*   vdu_sprite_hide:
041C84 21 8F 1C 04 0137*       ld hl,@cmd
041C88 01 03 00 00 0138*       ld bc,@end-@cmd
041C8C 5B DF       0139*       rst.lil $18
041C8E C9          0140*       ret
041C8F 17 1B 0C    0141*   @cmd: db 23,27,12
041C92             0142*   @end:
041C92             0143*   
041C92             0144*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041C92             0145*   ; inputs: bc is x coordinate, de is y coordinate
041C92             0146*   ; prerequisites: vdu_sprite_select
041C92             0147*   vdu_sprite_move_abs:
041C92 ED 43 AA 1C 0148*       ld (@xpos),bc
       04          
041C97 ED 53 AC 1C 0149*       ld (@ypos),de
       04          
041C9C 21 A7 1C 04 0150*       ld hl,@cmd
041CA0 01 07 00 00 0151*       ld bc,@end-@cmd
041CA4 5B DF       0152*       rst.lil $18
041CA6 C9          0153*       ret
041CA7 17 1B 0D    0154*   @cmd:  db 23,27,13
041CAA 00 00       0155*   @xpos: dw 0x0000
041CAC 00 00       0156*   @ypos: dw 0x0000
041CAE 00          0157*   @end:  db 0x00 ; padding
041CAF             0158*   
041CAF             0159*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041CAF             0160*   ; inputs: bc is x coordinate, de is y coordinate
041CAF             0161*   ; prerequisites: vdu_sprite_select
041CAF             0162*   vdu_sprite_move_rel:
041CAF ED 43 C7 1C 0163*       ld (@dx),bc
       04          
041CB4 ED 53 C9 1C 0164*       ld (@dy),de
       04          
041CB9 21 C4 1C 04 0165*       ld hl,@cmd
041CBD 01 07 00 00 0166*       ld bc,@end-@cmd
041CC1 5B DF       0167*       rst.lil $18
041CC3 C9          0168*       ret
041CC4 17 1B 0E    0169*   @cmd: db 23,27,14
041CC7 00 00       0170*   @dx:  dw 0x0000
041CC9 00 00       0171*   @dy:  dw 0x0000
041CCB 00          0172*   @end: db 0x00 ; padding
041CCC             0173*   
041CCC             0174*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041CCC             0175*   ; USING 16.8 FIXED POINT COORDINATES
041CCC             0176*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041CCC             0177*   ;   the fractional portiion of the inputs are truncated
041CCC             0178*   ;   leaving only the 16-bit integer portion
041CCC             0179*   ; prerequisites: vdu_sprite_select
041CCC             0180*   vdu_sprite_move_abs168:
041CCC             0181*   ; offset inputs by the gfx origin
041CCC             0182*   ; y coordinate
041CCC 21 00 00 00 0183*       ld hl,origin_top*256
041CD0 19          0184*       add hl,de
041CD1 22 F3 1C 04 0185*       ld (@ypos-1),hl
041CD5             0186*   ; x coordinate
041CD5 21 00 80 00 0187*       ld hl,origin_left*256
041CD9 09          0188*       add hl,bc
041CDA 22 F1 1C 04 0189*       ld (@xpos-1),hl
041CDE             0190*   ; prepare vdu command
041CDE 3E 0D       0191*       ld a,13       ; restore the final byte of the command
041CE0 32 F1 1C 04 0192*       ld (@cmd+2),a ; string that got stomped on by bcu
041CE4 21 EF 1C 04 0193*       ld hl,@cmd
041CE8 01 07 00 00 0194*       ld bc,@end-@cmd
041CEC 5B DF       0195*       rst.lil $18
041CEE C9          0196*       ret
041CEF 17 1B 0D    0197*   @cmd:  db 23,27,13
041CF2 00 00       0198*   @xpos: dw 0x0000
041CF4 00 00       0199*   @ypos: dw 0x0000
041CF6             0200*   @end:  ; no padding required b/c we shifted de right
041CF6             0201*   
041CF6             0202*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041CF6             0203*   ; USING 16.8 FIXED POINT COORDINATES
041CF6             0204*   ; inputs: ub.c is dx, ud.e is dy
041CF6             0205*   ;   the fractional portiion of the inputs are truncated
041CF6             0206*   ;   leaving only the 16-bit integer portion
041CF6             0207*   ; prerequisites: vdu_sprite_select
041CF6             0208*   vdu_sprite_move_rel168:
041CF6             0209*   ; populate in the reverse of normal to keep the
041CF6             0210*   ; inputs from stomping on each other
041CF6 ED 53 15 1D 0211*       ld (@dy-1),de
       04          
041CFB ED 43 13 1D 0212*       ld (@dx-1),bc
       04          
041D00 3E 0E       0213*       ld a,14       ; restore the final byte of the command
041D02 32 13 1D 04 0214*       ld (@cmd+2),a ; string that got stomped on by bcu
041D06 21 11 1D 04 0215*       ld hl,@cmd
041D0A 01 07 00 00 0216*       ld bc,@end-@cmd
041D0E 5B DF       0217*       rst.lil $18
041D10 C9          0218*       ret
041D11 17 1B 0E    0219*   @cmd:  db 23,27,14
041D14 00 00       0220*   @dx: dw 0x0000
041D16 00 00       0221*   @dy: dw 0x0000
041D18             0222*   @end:  ; no padding required b/c we shifted de right
041D18             0223*   
041D18             0224*   ; VDU 23, 27, 15: Update the sprites in the GPU
041D18             0225*   ; inputs: none
041D18             0226*   vdu_sprite_update:
041D18 21 23 1D 04 0227*       ld hl,@cmd
041D1C 01 03 00 00 0228*       ld bc,@end-@cmd
041D20 5B DF       0229*       rst.lil $18
041D22 C9          0230*       ret
041D23 17 1B 0F    0231*   @cmd: db 23,27,15
041D26             0232*   @end:
041D26             0233*   
041D26             0234*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
041D26             0235*   ; inputs: none
041D26             0236*   vdu_sprite_bmp_reset:
041D26 21 31 1D 04 0237*       ld hl,@cmd
041D2A 01 03 00 00 0238*       ld bc,@end-@cmd
041D2E 5B DF       0239*       rst.lil $18
041D30 C9          0240*       ret
041D31 17 1B 10    0241*   @cmd: db 23,27,16
041D34             0242*   @end:
041D34             0243*   
041D34             0244*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
041D34             0245*   ; inputs: none
041D34             0246*   vdu_sprite_reset:
041D34 21 3F 1D 04 0247*       ld hl,@cmd
041D38 01 03 00 00 0248*       ld bc,@end-@cmd
041D3C 5B DF       0249*       rst.lil $18
041D3E C9          0250*       ret
041D3F 17 1B 11    0251*   @cmd: db 23,27,17
041D42             0252*   @end:
041D42             0253*   
041D42             0254*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
041D42             0255*   ; inputs: a is the GCOL paint mode
041D42             0256*   ; prerequisites: vdu_sprite_select
041D42             0257*   vdu_sprite_set_gcol:
041D42 32 54 1D 04 0258*       ld (@mode),a
041D46 21 51 1D 04 0259*       ld hl,@cmd
041D4A 01 04 00 00 0260*       ld bc,@end-@cmd
041D4E 5B DF       0261*       rst.lil $18
041D50 C9          0262*       ret
041D51 17 1B 12    0263*   @cmd:  db 23,27,18
041D54 00          0264*   @mode: db 0x00
041D55             0265*   @end:
041D55             0266*   
041D55             0267*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
041D55             0268*   ; inputs: hl=bufferId
041D55             0269*   ; prerequisites: vdu_sprite_select
041D55             0270*   vdu_sprite_add_buff:
041D55 22 67 1D 04 0271*       ld (@bufferId),hl
041D59 21 64 1D 04 0272*       ld hl,@cmd
041D5D 01 05 00 00 0273*       ld bc,@end-@cmd
041D61 5B DF       0274*       rst.lil $18
041D63 C9          0275*       ret
041D64 17 1B 26    0276*   @cmd:      db 23,27,0x26
041D67 00 00       0277*   @bufferId: dw 0x0000
041D69 00          0278*   @end:      db 0x00 ; padding
041D6A             0043    
041D6A             0044    ; APPLICATION INCLUDES
041D6A             0045        include "ascii.inc"
041D6A             0001*   loading_ui:
041D6A 57 45 4C 43 0002*       db "WELCOME TO ...",13,10
       4F 4D 45 20 
       54 4F 20 2E 
       2E 2E 0D 0A 
041D7A 0D 0A       0003*       db 13,10
041D7C 20 20 20 20 0004*       db 32,32,32,32,32,32,32,32,95,95,32,32,32,32,95,95,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,95,13,10
       20 20 20 20 
       5F 5F 20 20 
       20 20 5F 5F 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 5F 5F 0D 
       0A          
041DA1 5F 5F 5F 5F 0005*       db 95,95,95,95,95,32,95,47,32,32,124,95,95,47,32,32,124,95,95,95,95,95,95,32,32,32,32,95,95,95,95,32,124,32,32,124,32,95,95,13,10
       5F 20 5F 2F 
       20 20 7C 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 20 5F 
       5F 5F 5F 20 
       7C 20 20 7C 
       20 5F 5F 0D 
       0A          
041DCA 5C 5F 5F 20 0006*       db 92,95,95,32,32,92,32,32,32,95,95,92,32,32,32,95,95,92,95,95,32,32,92,32,95,47,32,95,95,95,92,124,32,32,124,47,32,47,13,10
       20 5C 20 20 
       20 5F 5F 5C 
       20 20 20 5F 
       5F 5C 5F 5F 
       20 20 5C 20 
       5F 2F 20 5F 
       5F 5F 5C 7C 
       20 20 7C 2F 
       20 2F 0D 0A 
041DF2 20 2F 20 5F 0007*       db 32,47,32,95,95,32,92,124,32,32,124,32,32,124,32,32,124,32,32,47,32,95,95,32,92,32,32,92,95,95,95,124,32,32,32,32,60,13,10
       5F 20 5C 7C 
       20 20 7C 20 
       20 7C 20 20 
       7C 20 20 2F 
       20 5F 5F 20 
       5C 20 20 5C 
       5F 5F 5F 7C 
       20 20 20 20 
       3C 0D 0A    
041E19 28 5F 5F 5F 0008*       db 40,95,95,95,95,32,32,47,95,95,124,32,32,124,95,95,124,32,40,95,95,95,95,32,32,47,92,95,95,95,32,32,62,95,95,124,95,32,92,13,10
       5F 20 20 2F 
       5F 5F 7C 20 
       20 7C 5F 5F 
       7C 20 28 5F 
       5F 5F 5F 20 
       20 2F 5C 5F 
       5F 5F 20 20 
       3E 5F 5F 7C 
       5F 20 5C 0D 
       0A          
041E42 20 20 20 20 0009*       db 32,32,32,32,32,92,47,32,95,95,95,95,95,32,32,32,32,95,95,32,32,46,95,95,47,32,32,32,32,32,92,47,32,32,32,32,32,92,47,13,10
       20 5C 2F 20 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 20 
       20 2E 5F 5F 
       2F 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 5C 2F 0D 
       0A          
041E6B 20 20 5F 5F 0010*       db 32,32,95,95,95,95,95,47,32,95,95,95,95,92,32,95,47,32,32,124,95,124,32,32,124,95,95,32,32,32,95,95,95,95,13,10
       5F 5F 5F 2F 
       20 5F 5F 5F 
       5F 5C 20 5F 
       2F 20 20 7C 
       5F 7C 20 20 
       7C 5F 5F 20 
       20 20 5F 5F 
       5F 5F 0D 0A 
041E8F 20 2F 20 20 0011*       db 32,47,32,32,95,32,92,32,32,32,95,95,92,32,32,92,32,32,32,95,95,92,32,32,124,32,32,92,95,47,32,95,95,32,92,13,10
       5F 20 5C 20 
       20 20 5F 5F 
       5C 20 20 5C 
       20 20 20 5F 
       5F 5C 20 20 
       7C 20 20 5C 
       5F 2F 20 5F 
       5F 20 5C 0D 
       0A          
041EB4 28 20 20 3C 0012*       db 40,32,32,60,95,62,32,41,32,32,124,32,32,32,32,32,124,32,32,124,32,124,32,32,32,89,32,32,92,32,32,95,95,95,47,13,10
       5F 3E 20 29 
       20 20 7C 20 
       20 20 20 20 
       7C 20 20 7C 
       20 7C 20 20 
       20 59 20 20 
       5C 20 20 5F 
       5F 5F 2F 0D 
       0A          
041ED9 20 5C 5F 5F 0013*       db 32,92,95,95,95,95,47,124,95,95,124,32,32,32,32,32,124,95,95,124,32,124,95,95,95,124,32,32,47,92,95,95,95,32,32,62,13,10
       5F 5F 2F 7C 
       5F 5F 7C 20 
       20 20 20 20 
       7C 5F 5F 7C 
       20 7C 5F 5F 
       5F 7C 20 20 
       2F 5C 5F 5F 
       5F 20 20 3E 
       0D 0A       
041EFF 5F 5F 5F 5F 0014*       db 95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,32,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
041F3D 5C 5F 5F 5F 0015*       db 92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,13,10
       5F 5F 5F 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       0D 0A       
041F7B 20 7C 20 20 0016*       db 32,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       20 20 20 5F 
       5F 5F 2F 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 0D 
       0A          
041FB8 20 7C 20 20 0017*       db 32,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       20 20 7C 20 
       20 20 7C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       0D 0A       
041FF6 20 7C 5F 5F 0018*       db 32,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 7C 20 
       20 20 7C 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       0D 0A       
042034 20 5F 5F 5F 0019*       db 32,95,95,95,95,95,95,95,32,32,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,92,47,95,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 0D 0A 
04207C 20 5C 20 20 0020*       db 32,92,32,32,32,32,32,32,92,32,124,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,47,32,32,32,95,95,95,95,95,47,13,10
       20 20 20 20 
       5C 20 7C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       2F 20 20 20 
       5F 5F 5F 5F 
       5F 2F 0D 0A 
0420C4 20 2F 20 20 0021*       db 32,47,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,32,92,95,95,95,95,95,32,32,92,13,10
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 20 
       5C 5F 5F 5F 
       5F 5F 20 20 
       5C 0D 0A    
04210B 2F 20 20 20 0022*       db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 0D 0A 
042153 5C 5F 5F 5F 0023*       db 92,95,95,95,95,124,95,95,32,32,47,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 0D 0A 
04219B 20 20 20 20 0024*       db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 5C 
       2F 0D 0A    
0421E2 4C 4F 41 44 0025*       db "LOADING UI ...",0
       49 4E 47 20 
       55 49 20 2E 
       2E 2E 00    
0421F1             0046        include "collisions.inc"
0421F1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042200             0002*   ; ====== COLLISION DETECTION ======
042200             0003*   ; --- constants ---
042200             0004*   ; sprite_collisions flags
042200             0005*   ; collides_with_player: equ %00000001
042200             0006*   ; collides_with_laser: equ %00000010
042200             0007*   sprite_alive: equ 6; set when sprite is alive
042200             0008*   sprite_just_died: equ 7; set when sprite just died
042200             0009*   collide_top: equ %00001000
042200             0010*   collide_bottom: equ %00000100
042200             0011*   collide_left: equ %00000010
042200             0012*   collide_right: equ %00000001
042200             0013*   
042200 00 00 00    0014*   collision_table_pointer: dl 0x000000 ; pointer to the sprite in the group being checked for collision
042203             0015*   
042203             0016*   collision_draw_hitboxes:
042203             0017*   ; draw hitbox for ix collider
042203 DD E5       0018*       push ix
042205 FD E5       0019*       push iy
042207 AF          0020*       xor a ; color mode 0
042208 0E 09       0021*       ld c,c_red
04220A CD 8D 16 04 0022*       call vdu_gcol
04220E 01 00 00 00 0023*       ld bc,0
042212 DD 4E 02    0024*       ld c,(ix+sprite_x+1)
042215 DD 46 03    0025*       ld b,(ix+sprite_x+2)
042218 11 00 00 00 0026*       ld de,0
04221C DD 5E 05    0027*       ld e,(ix+sprite_y+1)
04221F DD 56 06    0028*       ld d,(ix+sprite_y+2)
042222 21 00 00 00 0029*       ld hl,0 ; clear hlu and h
042226 DD 6E 1E    0030*       ld l,(ix+sprite_dim_x)
042229 09          0031*       add hl,bc ; hl = x1
04222A E5          0032*       push hl ; save x1
04222B 21 00 00 00 0033*       ld hl,0 ; clear hlu and h
04222F DD 6E 1F    0034*       ld l,(ix+sprite_dim_y)
042232 19          0035*       add hl,de ; hl = y1
042233 DD E1       0036*       pop ix ; ix = x1 (was hl)
042235 E5          0037*       push hl
042236 FD E1       0038*       pop iy ; iy = y1
042238 CD 5D 1B 04 0039*       call vdu_plot_rf
04223C FD E1       0040*       pop iy
04223E DD E1       0041*       pop ix
042240             0042*   
042240             0043*   ; draw hitbox for iy collider
042240 DD E5       0044*       push ix
042242 FD E5       0045*       push iy
042244 AF          0046*       xor a ; color mode 0
042245 0E 0A       0047*       ld c,c_green
042247 CD 8D 16 04 0048*       call vdu_gcol
04224B 01 00 00 00 0049*       ld bc,0
04224F FD 4E 02    0050*       ld c,(iy+sprite_x+1)
042252 FD 46 03    0051*       ld b,(iy+sprite_x+2)
042255 11 00 00 00 0052*       ld de,0
042259 FD 5E 05    0053*       ld e,(iy+sprite_y+1)
04225C FD 56 06    0054*       ld d,(iy+sprite_y+2)
04225F 21 00 00 00 0055*       ld hl,0 ; clear hlu and h
042263 FD 6E 1E    0056*       ld l,(iy+sprite_dim_x)
042266 09          0057*       add hl,bc ; hl = x1
042267 E5          0058*       push hl ; save x1
042268 21 00 00 00 0059*       ld hl,0 ; clear hlu and h
04226C FD 6E 1F    0060*       ld l,(iy+sprite_dim_y)
04226F 19          0061*       add hl,de ; hl = y1
042270 DD E1       0062*       pop ix ; ix = x1 (was hl)
042272 E5          0063*       push hl
042273 FD E1       0064*       pop iy ; iy = y1
042275 CD 5D 1B 04 0065*       call vdu_plot_rf
042279 FD E1       0066*       pop iy
04227B DD E1       0067*       pop ix
04227D C9          0068*       ret
04227E             0069*   ; end collision_draw_hitboxes
04227E             0070*   
04227E             0071*   ; check_collision:
04227E             0072*   ; Detects collision using bounding box method.
04227E             0073*   ; Inputs:
04227E             0074*   ;   IX -> Sprite/Tile table for Collider A
04227E             0075*   ;   IY -> Sprite/Tile table for Collider B
04227E             0076*   ; Outputs:
04227E             0077*   ;   a = 0, zero flag set, positive sign, carry reset -> Collision detected
04227E             0078*   ;   a = -1, zero flag reset, negative sign, carry set -> No collision detected
04227E             0079*   ; Destroys: HL, DE, AF
04227E             0080*   check_collision:
04227E             0081*   check_collision_box:
04227E             0082*   ; Test 1: (ay + ah) - by < 0
04227E 21 00 00 00 0083*       ld hl,0                     ; Clear hlu
042282 DD 6E 05    0084*       ld l,(ix+sprite_y+1)        ; Load ay integer part low byte
042285 DD 66 06    0085*       ld h,(ix+sprite_y+2)        ; Load ay integer part high byte
042288 11 00 00 00 0086*       ld de,0                     ; Clear deu and d
04228C DD 5E 1F    0087*       ld e,(ix+sprite_dim_y)      ; Load ah
04228F 19          0088*       add hl,de                   ; (ay + ah)
042290 FD 5E 05    0089*       ld e,(iy+sprite_y+1)        ; Load by integer part low byte
042293 FD 56 06    0090*       ld d,(iy+sprite_y+2)        ; Load by integer part high byte
042296 AF          0091*       xor a                       ; Clear carry
042297 ED 52       0092*       sbc hl,de                   ; (ay + ah) - by
042299 FA FC 22 04 0093*       jp m,@not_collision         ; No collision if negative
04229D             0094*   
04229D             0095*   ; Test 2: ay - (by + bh) < 0
04229D 21 00 00 00 0096*       ld hl,0                     ; Clear hlu
0422A1 FD 6E 05    0097*       ld l,(iy+sprite_y+1)        ; Load by integer part low byte
0422A4 FD 66 06    0098*       ld h,(iy+sprite_y+2)        ; Load by integer part high byte
0422A7 11 00 00 00 0099*       ld de,0                     ; Clear deu and d
0422AB FD 5E 1F    0100*       ld e,(iy+sprite_dim_y)      ; Load bh
0422AE 19          0101*       add hl,de                   ; (by + bh)
0422AF DD 5E 05    0102*       ld e,(ix+sprite_y+1)        ; Load ay integer part low byte
0422B2 DD 56 06    0103*       ld d,(ix+sprite_y+2)        ; Load ay integer part high byte
0422B5 AF          0104*       xor a                       ; Clear carry
0422B6 ED 52       0105*       sbc hl,de                   ; (by + bh) - ay
0422B8 FA FC 22 04 0106*       jp m,@not_collision         ; No collision if negative
0422BC             0107*   
0422BC             0108*   ; Test 3: (ax + aw) - bx < 0
0422BC 21 00 00 00 0109*       ld hl,0                     ; Clear hlu
0422C0 DD 6E 02    0110*       ld l,(ix+sprite_x+1)        ; Load ax integer part low byte
0422C3 DD 66 03    0111*       ld h,(ix+sprite_x+2)        ; Load ax integer part high byte
0422C6 11 00 00 00 0112*       ld de,0                     ; Clear deu and d
0422CA DD 5E 1E    0113*       ld e,(ix+sprite_dim_x)      ; Load aw
0422CD 19          0114*       add hl,de                   ; (ax + aw)
0422CE FD 5E 02    0115*       ld e,(iy+sprite_x+1)        ; Load bx integer part low byte
0422D1 FD 56 03    0116*       ld d,(iy+sprite_x+2)        ; Load bx integer part high byte
0422D4 AF          0117*       xor a                       ; Clear carry
0422D5 ED 52       0118*       sbc hl,de                   ; (ax + aw) - bx
0422D7 FA FC 22 04 0119*       jp m,@not_collision         ; No collision if negative
0422DB             0120*   
0422DB             0121*   ; Test 4: ax - (bx + bw) < 0
0422DB 21 00 00 00 0122*       ld hl,0                     ; Clear hlu
0422DF FD 6E 02    0123*       ld l,(iy+sprite_x+1)        ; Load bx integer part low byte
0422E2 FD 66 03    0124*       ld h,(iy+sprite_x+2)        ; Load bx integer part high byte
0422E5 11 00 00 00 0125*       ld de,0                     ; Clear deu and d
0422E9 FD 5E 1E    0126*       ld e,(iy+sprite_dim_x)      ; Load bw
0422EC 19          0127*       add hl,de                   ; (bx + bw)
0422ED DD 5E 02    0128*       ld e,(ix+sprite_x+1)        ; Load ax integer part low byte
0422F0 DD 56 03    0129*       ld d,(ix+sprite_x+2)        ; Load ax integer part high byte
0422F3 AF          0130*       xor a                       ; Clear carry
0422F4 ED 52       0131*       sbc hl,de                   ; (bx + bw) - ax
0422F6 FA FC 22 04 0132*       jp m,@not_collision         ; No collision if negative
0422FA             0133*   
0422FA             0134*   ; If all tests pass, collision is detected
0422FA             0135*   @is_collision:
0422FA AF          0136*       xor a                       ; Clear accumulator and flags (a = 0)
0422FB C9          0137*       ret                         ; Return with zero flag set
0422FC             0138*   
0422FC             0139*   ; No collision detected
0422FC             0140*   @not_collision:
0422FC 3D          0141*       dec a                       ; Set a to -1
0422FD C9          0142*       ret                         ; Return with carry set
0422FE             0143*   ; End check_collision_box
0422FE             0144*   
0422FE             0145*   
0422FE             0146*   ; this routine detects collisions between two collidable objects,
0422FE             0147*   ; which can include sprites, active tiles, or any screen coordinate
0422FE             0148*   ; which has been set up with a sprite table structure that includes dim_x
0422FE             0149*   ; representing the radius of the collidable object
0422FE             0150*   ; inputs: ix and iy point to the colliding objects' sprite/tile table records
0422FE             0151*   ; outputs: uh.l = distance - sum of radii
0422FE             0152*   ;          zero flag set if collision detected
0422FE             0153*   ;          dx168 and dy168 are also populated with the signed displacements
0422FE             0154*   ; destroys: everything except indexes
0422FE             0155*   ; check_collision:
0422FE             0156*   check_collision_cartesian:
0422FE             0157*   ; compute dx = x1-x0
0422FE DD 27 01    0158*       ld hl,(ix+sprite_x)
042301 FD 17 01    0159*       ld de,(iy+sprite_x)
042304 AF          0160*       xor a ; clear carry
042305 ED 52       0161*       sbc hl,de
042307 22 2E 08 04 0162*       ld (dx168),hl ; dx to scratch
04230B             0163*   ; compute dy = y1-y0
04230B DD 27 04    0164*       ld hl,(ix+sprite_y)
04230E FD 17 04    0165*       ld de,(iy+sprite_y)
042311 AF          0166*       xor a ; clear carry
042312 ED 52       0167*       sbc hl,de ; hl = dy
042314 22 34 08 04 0168*       ld (dy168),hl ; dy to scratch
042318             0169*   ; compute euclidean distance between centers
042318 CD 3A 08 04 0170*       call distance168 ; uh.l = distance
04231C             0171*   ; check for overlap by summing half the radii
04231C DD 7E 1E    0172*       ld a,(ix+sprite_dim_x)
04231F CB 3F       0173*       srl a ; divide by 2
042321 FD 5E 1E    0174*       ld e,(iy+sprite_dim_x)
042324 CB 3B       0175*       srl e ; divide by 2
042326 83          0176*       add a,e
042327 11 00 00 00 0177*       ld de,0 ; clear deu and e
04232B 57          0178*       ld d,a ; ud.e = sum of radii
04232C B7          0179*       or a ; clear carry
04232D ED 52       0180*       sbc hl,de ; uh.l = distance - sum of radii
04232F C8          0181*       ret z ; return collision
042330 F0          0182*       ret p ; return no collision
042331 AF          0183*       xor a ; return collision
042332 C9          0184*       ret
042333             0185*   ; end check_collision_cartesian
042333             0186*   
042333             0187*   ; check collisions of a sprite or tile against a sprite group
042333             0188*   ; inputs: iy = pointer to sprite or tile record being checked
042333             0189*   ;         ix = pointer to sprite group, b = number of records in sprite group
042333             0190*   check_sprite_group_collisions:
042333             0191*   @collision_loop:
042333 DD 22 00 22 0192*       ld (collision_table_pointer),ix ; update table pointer
       04          
042338 C5          0193*       push bc ; backup loop counter
042339             0194*   ; check sprite_collisions sprite_alive flag to see if sprite is active
042339 DD CB 1D 76 0195*       bit sprite_alive,(ix+sprite_collisions)
04233D CA 53 23 04 0196*       jp z,@next_record ; not alive so skip to next record
042341             0197*   ; sprite alive so check for collision
042341 CD 7E 22 04 0198*       call check_collision
042345 C2 53 23 04 0199*       jp nz,@next_record ; no collision
042349             0200*   ; set sprite_just_died flag for each entity and return to caller
042349 C1          0201*       pop bc ; dummy pop to balance stack
04234A DD CB 1D FE 0202*       set sprite_just_died,(ix+sprite_collisions)
04234E FD CB 1D FE 0203*       set sprite_just_died,(iy+sprite_collisions)
042352 C9          0204*       ret
042353             0205*   @next_record:
042353 C1          0206*       pop bc ; get back our loop counter
042354 ED 32 40    0207*       lea ix,ix+table_record_size
042357 10 DA       0208*       djnz @collision_loop ; loop until we've checked all the records
042359             0209*   ; return to caller
042359 AF          0210*       xor a
04235A 3C          0211*       inc a ; resets sign flag and a to non-zero indicating no collision
04235B C9          0212*       ret
04235C             0213*   ; end check_sprite_group_collisions
04235C             0214*   
04235C             0215*   check_enemy_collision_laser: ; check for collisions with laser
04235C DD 21 2A 91 0216*       ld ix,player_lasers_begin
       04          
042361 06 04       0217*       ld b,player_lasers_max
042363 CD 33 23 04 0218*       call check_sprite_group_collisions
042367 C9          0219*       ret
042368             0220*   ; end check_enemy_collision_laser
042368             0221*   
042368             0222*   check_enemy_collision_player: ; check for collisions with player
042368 DD 21 2A 92 0223*       ld ix,player_begin
       04          
04236D CD 7E 22 04 0224*       call check_collision
042371 C0          0225*       ret nz ; no collision so nothing to do
042372 DD CB 1D FE 0226*       set sprite_just_died,(ix+sprite_collisions)
042376 FD CB 1D FE 0227*       set sprite_just_died,(iy+sprite_collisions)
04237A AF          0228*       xor a ; signal collision detected
04237B C9          0229*       ret
04237C             0230*   ; end check_enemy_collision_player
04237C             0047        include "enemies.inc"
04237C 8A 23 04    0001*   enemies_state: dl enemies_alive
04237F             0002*   
04237F             0003*   do_enemies:
04237F 2A 7C 23 04 0004*       ld hl,(enemies_state)
042383             0005*       CALL_HL
042383 01 89 23 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
042387 C5          0002*M1     push bc ; which constitutes the return address
042388 E9          0003*M1     jp (hl) ; Jump to the address in HL
042389 C9          0006*       ret
04238A             0007*   
04238A             0008*   enemies_alive:
04238A FD 21 6A 92 0009*       ld iy,enemy_sprites_begin
       04          
04238F 06 07       0010*       ld b,table_num_enemy_records
042391 CD 9E 83 04 0011*       call move_sprite_group
042395 C9          0012*       ret
042396             0013*   
042396             0014*   enemies_despawning:
042396 C9          0015*       ret
042397             0016*   
042397             0017*   enemies_dead:
042397 C9          0018*       ret
042398             0019*   
042398             0020*   enemies_respawning:
042398 C9          0021*       ret
042399             0048        include "enemy_fireball.inc"
042399 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042400             0002*   speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
042400             0003*   fireballs_max: equ 4
042400             0004*   
042400             0005*   fireball_defaults:
042400 03          0006*       db enemy_projectile     ; type
042401 0A 01 00    0007*       dl BUF_FIREBALL_2_000   ; base_bufferId
042404 52 24 04    0008*       dl move_enemy_fireball  ; move_program
042407 40          0009*       db %01000000            ; collisions bit 6 signals sprite alive
042408 10          0010*       db 16                   ; dim_x
042409 10          0011*       db 16                   ; dim_y
04240A 20          0012*       db 32                   ; num_orientations
04240B 02          0013*       db 2                    ; num_animations
04240C 00          0014*       db 0                    ; animation
04240D 08          0015*       db 8                    ; animation_timer
04240E 00          0016*       db 0                    ; move_timer
04240F 00          0017*       db 0                    ; move_step
042410 00          0018*       db 0                    ; points
042411 FE          0019*       db -2                   ; shield_damage
042412 00          0020*       db 0                    ; frame
042413             0021*   
042413             0022*   enemy_spawn_fireball:
042413 21 00 24 04 0023*       ld hl,fireball_defaults
042417 DD 21 2A 93 0024*       ld ix,fireballs_base
       04          
04241C 06 04       0025*       ld b,fireballs_max
04241E CD F0 7C 04 0026*       call spawn_sprite_from_tile
042422 D0          0027*       ret nc ; no carry means no free sprite slots, so we go home
042423             0028*   ; other specific initialization
042423             0029*   ; ------------------------------------------------
042423             0030*   ; copy sprite heading and component velocities from targeting_computer
042423 2A 52 75 04 0031*       ld hl,(Bearing_t)
042427 11 00 80 00 0032*       ld de,128*256 ; rotate 128 degrees
04242B 19          0033*       add hl,de
04242C DD 2F 10    0034*       ld (ix+sprite_heading),hl
04242F 2A 5B 75 04 0035*       ld hl,(Vp_x)
042433 DD 2F 07    0036*       ld (ix+sprite_xvel),hl
042436 2A 5E 75 04 0037*       ld hl,(Vp_y)
04243A DD 2F 0A    0038*       ld (ix+sprite_yvel),hl
04243D             0039*   ; move projectile one frame's distance so it isn't drawn right over turret
04243D DD 27 01    0040*       ld hl,(ix+sprite_x)
042440 DD 17 07    0041*       ld de,(ix+sprite_xvel)
042443 19          0042*       add hl,de
042444 DD 2F 01    0043*       ld (ix+sprite_x),hl
042447 DD 27 04    0044*       ld hl,(ix+sprite_y)
04244A DD 17 0A    0045*       ld de,(ix+sprite_yvel)
04244D 19          0046*       add hl,de
04244E DD 2F 04    0047*       ld (ix+sprite_y),hl
042451 C9          0048*       ret
042452             0049*   ; end enemy_spawn_fireball
042452             0050*   
042452             0051*   move_enemy_fireball:
042452             0052*   ; run the movement program for the fireball enemy
042452 CD 1F 84 04 0053*       call move_sprite
042456 3A 72 82 04 0054*       ld a,(sprite_screen_edge)
04245A B7          0055*       or a ; a will be non-zero if have scrolled off screen
04245B C2 B8 82 04 0056*       jp nz,table_deactivate_sprite
04245F CD 68 23 04 0057*       call check_enemy_collision_player
042463 C2 6F 24 04 0058*       jp nz,@animate ; no collision so do animation
042467 CD 07 71 04 0059*       call update_shields
04246B C3 13 26 04 0060*       jp spawn_explosion
04246F             0061*   @animate:
04246F             0062*   ; check the animation timer
04246F FD 35 23    0063*       dec (iy+sprite_animation_timer)
042472 C0          0064*       ret nz ; not time to animate
042473             0065*   ; reset the animation timer and bump animation
042473 3E 08       0066*       ld a,8
042475 FD 77 23    0067*       ld (iy+sprite_animation_timer),a
042478 FD 7E 22    0068*       ld a,(iy+sprite_animation)
04247B 3C          0069*       inc a
04247C E6 01       0070*       and %00000001 ; modulo 2
04247E FD 77 22    0071*       ld (iy+sprite_animation),a
042481 CD D6 84 04 0072*       call sprite_frame_heading_animation ; a, sprite_frame set to heading-based frame
042485 CD 63 1C 04 0073*       call vdu_sprite_select_frame
042489 C9          0074*       ret
04248A             0075*   ; end move_enemy_fireball
04248A             0076*   
04248A             0077*   init_enemy_fireballs:
04248A             0078*   ; set pointer to seeker sprite table
04248A FD 21 2A 93 0079*       ld iy,fireballs_base
       04          
04248F FD 7E 00    0080*       ld a,(iy+sprite_id) ; sprite id
042492 1E 04       0081*       ld e,fireballs_max ; sprite loop counter
042494             0082*   ; define seeker sprites
042494             0083*   @sprites_loop:
042494 F5          0084*       push af
042495 D5          0085*       push de
042496 CD 00 1C 04 0086*       call vdu_sprite_select
04249A CD 13 1C 04 0087*       call vdu_sprite_clear_frames
04249E 21 0A 01 00 0088*       ld hl,BUF_FIREBALL_2_000
0424A2 06 80       0089*       ld b,4*32 ; 4 animations * 32 orientations
0424A4             0090*   @frames_loop:
0424A4 C5          0091*       push bc
0424A5 E5          0092*       push hl
0424A6 CD 55 1D 04 0093*       call vdu_sprite_add_buff
0424AA E1          0094*       pop hl
0424AB 23          0095*       inc hl
0424AC C1          0096*       pop bc
0424AD 10 F5       0097*       djnz @frames_loop
0424AF D1          0098*       pop de ; sprite loop counter
0424B0 F1          0099*       pop af ; sprite id
0424B1 3C          0100*       inc a
0424B2 1D          0101*       dec e
0424B3 C2 94 24 04 0102*       jp nz,@sprites_loop
0424B7 C9          0103*       ret
0424B8             0104*   ; end init_enemy_fireballs
0424B8             0049        include "enemy_seeker.inc"
0424B8 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
042500             0002*   
042500 00          0003*   seekers_count: db 0
042501             0004*   seekers_max: equ 3
042501             0005*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
042501             0006*   
042501             0007*   seeker_defaults:
042501 01          0008*       db enemy_air            ; type
042502 4F 01 00    0009*       dl BUF_SEEKER_000       ; base_bufferId
042505 2C 25 04    0010*       dl move_enemy_seeker    ; move_program
042508 40          0011*       db %01000000            ; collisions bit 6 signals sprite alive
042509 10          0012*       db 16                   ; dim_x
04250A 10          0013*       db 16                   ; dim_y
04250B 20          0014*       db 32                   ; num_orientations
04250C 01          0015*       db 1                    ; num_animations
04250D 00          0016*       db 0                    ; animation
04250E 00          0017*       db 0                    ; animation_timer
04250F 01          0018*       db 1                    ; move_timer
042510 00          0019*       db 0                    ; move_step
042511 0A          0020*       db 10                   ; points
042512 FC          0021*       db -4                   ; shield_damage
042513 00          0022*       db 0                    ; frame
042514             0023*   
042514             0024*   enemy_spawn_seeker:
042514 21 01 25 04 0025*       ld hl,seeker_defaults
042518 DD 21 6A 92 0026*       ld ix,seekers_base
       04          
04251D 06 03       0027*       ld b,seekers_max
04251F CD F0 7C 04 0028*       call spawn_sprite_from_tile
042523 D0          0029*       ret nc ; no carry means no free sprite slots, so we go home
042524             0030*   ; other specific initialization
042524 21 80 02 00 0031*       ld hl,speed_seeker
042528 DD 2F 0D    0032*       ld (ix+sprite_vel),hl
04252B C9          0033*       ret
04252C             0034*   ; end enemy_spawn_seeker
04252C             0035*   
04252C             0036*   move_enemy_seeker:
04252C             0037*   ; run the movement program for the seeker enemy
04252C CD 60 25 04 0038*       call en_nav_seek_zag
042530 CD 68 23 04 0039*       call check_enemy_collision_player
042534 CA 58 25 04 0040*       jp z,@player
042538 CD 5C 23 04 0041*       call check_enemy_collision_laser
04253C CA 50 25 04 0042*       jp z,@laser
042540             0043*   ; change the animation frame to match heading
042540 FD 7E 00    0044*       ld a,(iy+sprite_id)
042543 CD 00 1C 04 0045*       call vdu_sprite_select
042547 CD EB 84 04 0046*       call sprite_frame_heading ; a, sprite_frame set to heading-based frame
04254B CD 63 1C 04 0047*       call vdu_sprite_select_frame
04254F C9          0048*       ret
042550             0049*   @laser:
042550 CD B8 6C 04 0050*       call update_score
042554 C3 13 26 04 0051*       jp spawn_explosion
042558             0052*   @player:
042558 CD 07 71 04 0053*       call update_shields
04255C C3 13 26 04 0054*       jp spawn_explosion
042560             0055*   ; end move_enemy_seeker
042560             0056*   
042560             0057*   ; contains the logic for how to move the enemy
042560             0058*   ; and then does the moving
042560             0059*   ; inputs: a fully-populated active sprite table
042560             0060*   ;         player position variables
042560             0061*   ; destroys: everything except index registers
042560             0062*   ; outputs: moving enemies
042560             0063*   en_nav_seek_zag:
042560             0064*   ; set velocity and orientation by player's relative location
042560             0065*   ; move enemies y-axis
042560             0066*   ; where is player relative to us?
042560 CD 00 75 04 0067*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
042564             0068*   ; is player above or below us?
042564 ED 53 C2 03 0069*       ld (ude),de ; dy
       04          
042569 3A C4 03 04 0070*       ld a,(ude+2) ; deu
04256D 17          0071*       rla ; shift sign bit into carry
04256E D2 93 25 04 0072*       jp nc,@zig_zag ; player is below,evade
042572             0073*   ; player is even or above,so home in on current heading
042572 FD 2F 10    0074*       ld (iy+sprite_heading),hl ; save sprite heading
042575             0075*   ; fall through to @compute_velocities
042575             0076*   @compute_velocities:
042575 CD C0 84 04 0077*       call sprite_compute_velocities
042579 CD 1F 84 04 0078*       call move_sprite ; move the sprite
04257D B7          0079*       or a ; a will be non-zero if have collided with screen edge
04257E C2 9E 25 04 0080*       jp nz,@zag_switch ; switch direction
042582 C9          0081*       ret ; didn't hit edge, nothing else to do
042583             0082*   @zig_zag_start:
042583 FD 2A 6F 82 0083*       ld iy,(table_pointer)
       04          
042588 CD AE 05 04 0084*       call rand_8
04258C E6 3F       0085*       and %00111111 ; limit it to 64
04258E CB DF       0086*       set 3,a ; make sure it's at least 8
042590 FD 77 24    0087*       ld (iy+sprite_move_timer),a ; store it
042593             0088*       ; fall through to @zig_zag
042593             0089*   @zig_zag:
042593 FD 7E 24    0090*       ld a,(iy+sprite_move_timer)
042596 3D          0091*       dec a
042597 FD 77 24    0092*       ld (iy+sprite_move_timer),a
04259A C2 C0 25 04 0093*       jp nz,@zig_zag_no_switch
04259E             0094*   @zag_switch:
04259E             0095*       ; otherwise flip direction and restart timer
04259E FD 7E 25    0096*       ld a,(iy+sprite_move_step)
0425A1 EE 01       0097*       xor %1 ; flips bit zero
0425A3 FD 77 25    0098*       ld (iy+sprite_move_step),a ; store it
0425A6 C2 B5 25 04 0099*       jp nz,@F ; zag right
0425AA             0100*   ;otherwise zag left
0425AA 21 00 A0 00 0101*       ld hl,160*256; southwest heading
0425AE FD 2F 10    0102*       ld (iy+sprite_heading),hl ; save sprite heading
0425B1 C3 83 25 04 0103*       jp @zig_zag_start
0425B5             0104*   @@: ; zag right
0425B5 21 00 60 00 0105*       ld hl,96*256; southeast heading
0425B9 FD 2F 10    0106*       ld (iy+sprite_heading),hl ; save sprite heading
0425BC C3 83 25 04 0107*       jp @zig_zag_start
0425C0             0108*   @zig_zag_no_switch:
0425C0             0109*       ; ld a,(sprite_orientation)
0425C0 FD 27 10    0110*       ld hl,(iy+sprite_heading)
0425C3 C3 75 25 04 0111*       jp @compute_velocities
0425C7             0112*   ; end en_nav_seek_zag
0425C7             0113*   
0425C7             0114*   
0425C7             0115*   init_enemy_seekers:
0425C7             0116*   ; set pointer to seeker sprite table
0425C7 FD 21 6A 92 0117*       ld iy,seekers_base
       04          
0425CC FD 7E 00    0118*       ld a,(iy+sprite_id) ; sprite id
0425CF 1E 03       0119*       ld e,seekers_max ; sprite loop counter
0425D1             0120*   ; define seeker sprites
0425D1             0121*   @sprites_loop:
0425D1 F5          0122*       push af
0425D2 D5          0123*       push de
0425D3 CD 00 1C 04 0124*   	call vdu_sprite_select
0425D7 CD 13 1C 04 0125*   	call vdu_sprite_clear_frames
0425DB 21 4F 01 00 0126*   	ld hl,BUF_SEEKER_000
0425DF 06 20       0127*   	ld b,32 ; 32 bitmaps for seeker
0425E1             0128*   @frames_loop:
0425E1 C5          0129*   	push bc
0425E2 E5          0130*   	push hl
0425E3 CD 55 1D 04 0131*   	call vdu_sprite_add_buff
0425E7 E1          0132*   	pop hl
0425E8 23          0133*   	inc hl
0425E9 C1          0134*   	pop bc
0425EA 10 F5       0135*   	djnz @frames_loop
0425EC D1          0136*       pop de ; sprite loop counter
0425ED F1          0137*       pop af ; sprite id
0425EE 3C          0138*       inc a
0425EF 1D          0139*       dec e
0425F0 C2 D1 25 04 0140*       jp nz,@sprites_loop
0425F4 C9          0141*       ret
0425F5             0142*   ; end init_enemy_seekers
0425F5             0050        include "explosion.inc"
0425F5 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF    
042600             0002*   
042600             0003*   explosions_max: equ 8
042600             0004*   explosion_defaults:
042600 04          0005*       db explosion            ; type
042601 05 01 00    0006*       dl BUF_EXPLOSION_A	    ; base_bufferId
042604 5D 26 04    0007*       dl move_explosion	    ; move_program
042607 40          0008*       db %01000000            ; collisions bit 6 signals sprite alive
042608 07          0009*       db 7	                ; dim_x
042609 07          0010*       db 7                    ; dim_y
04260A 01          0011*       db 1                    ; num_orientations
04260B 05          0012*       db 5                    ; num_animations
04260C 05          0013*       db 5	                ; animation
04260D 08          0014*       db 8	                ; animation_timer
04260E 00          0015*       db 0	                ; move_timer
04260F 00          0016*       db 0	                ; move_step
042610 00          0017*       db 0	                ; points
042611 00          0018*       db 0	                ; shield_damage
042612 00          0019*       db 0                    ; frame
042613             0020*   
042613             0021*   spawn_explosion:
042613 21 00 26 04 0022*       ld hl,explosion_defaults
042617 DD 21 2A 94 0023*       ld ix,explosions_base
       04          
04261C 06 08       0024*       ld b,explosions_max
04261E CD 6C 83 04 0025*       call spawn_sprite_from_sprite
042622 D2 B8 82 04 0026*       jp nc,table_deactivate_sprite ; no carry means no free sprite slots, so we deactivate parent sprite and go home
042626             0027*   ; other specific initialization
042626 21 00 00 00 0028*       ld hl,0
04262A DD 2F 07    0029*       ld (ix+sprite_xvel),hl
04262D 21 00 01 00 0030*       ld hl,1*256
042631 DD 2F 0A    0031*       ld (ix+sprite_yvel),hl
042634             0032*   ; deactivate parent sprite
042634 C3 B8 82 04 0033*       jp table_deactivate_sprite
042638             0034*   ; end spawn_explosion
042638             0035*   
042638             0036*   tile_spawn_explosion:
042638 21 00 26 04 0037*       ld hl,explosion_defaults
04263C DD 21 2A 94 0038*       ld ix,explosions_base
       04          
042641 06 08       0039*       ld b,explosions_max
042643 CD F0 7C 04 0040*       call spawn_sprite_from_tile
042647 D2 90 79 04 0041*       jp nc,table_deactivate_tile ; no carry means no free sprite slots, so we deactivate parent tile and go home
04264B             0042*   ; other specific initialization
04264B 21 00 00 00 0043*       ld hl,0
04264F DD 2F 07    0044*       ld (ix+sprite_xvel),hl
042652 21 00 01 00 0045*       ld hl,1*256
042656 DD 2F 0A    0046*       ld (ix+sprite_yvel),hl
042659             0047*   ; deactivate parent sprite
042659 C3 90 79 04 0048*       jp table_deactivate_tile
04265D             0049*   ; end tile_spawn_explosion
04265D             0050*   
04265D             0051*   move_explosion:
04265D             0052*   ; run the movement program for the explosion
04265D CD 1F 84 04 0053*       call move_sprite
042661 B7          0054*       or a ; a will be non-zero if have scrolled off screen
042662 C2 B8 82 04 0055*       jp nz,table_deactivate_sprite
042666             0056*   ; do the animations
042666 FD 35 23    0057*       dec (iy+sprite_animation_timer)
042669 C0          0058*       ret nz ; not time to bump animation frame
04266A FD 34 28    0059*       inc (iy+sprite_frame)
04266D FD 35 22    0060*       dec (iy+sprite_animation)
042670 CA B8 82 04 0061*       jp z,table_deactivate_sprite ; reached the end of the animations
042674 3E 08       0062*       ld a,8 ; reset animation timer
042676 FD 77 23    0063*       ld (iy+sprite_animation_timer),a
042679 C9          0064*       ret
04267A             0065*   ; end move_explosion
04267A             0066*   
04267A             0067*   move_explosions:
04267A             0068*   ; initialize pointers and loop counter
04267A FD 21 2A 94 0069*       ld iy,explosions_base ; set iy to first record in table
       04          
04267F 06 08       0070*       ld b,explosions_max ; loop counter
042681 CD 9E 83 04 0071*       call move_sprite_group
042685 C9          0072*       ret
042686             0073*   ; end move_explosions
042686             0074*   
042686             0075*   init_explosions:
042686             0076*   ; set pointer to explosion sprite table
042686 FD 21 2A 94 0077*       ld iy,explosions_base
       04          
04268B FD 7E 00    0078*       ld a,(iy+sprite_id) ; sprite id
04268E 1E 08       0079*       ld e,explosions_max ; sprite loop counter
042690             0080*   ; define explosion sprites
042690             0081*   @sprites_loop:
042690 F5          0082*       push af
042691 D5          0083*       push de
042692 CD 00 1C 04 0084*   	call vdu_sprite_select
042696 CD 13 1C 04 0085*   	call vdu_sprite_clear_frames
04269A 21 05 01 00 0086*   	ld hl,BUF_EXPLOSION_A
04269E 06 05       0087*   	ld b,5 ; 5 bitmaps for explosion
0426A0             0088*   @frames_loop:
0426A0 C5          0089*   	push bc
0426A1 E5          0090*   	push hl
0426A2 CD 55 1D 04 0091*   	call vdu_sprite_add_buff
0426A6 E1          0092*   	pop hl
0426A7 23          0093*   	inc hl
0426A8 C1          0094*   	pop bc
0426A9 10 F5       0095*   	djnz @frames_loop
0426AB D1          0096*       pop de ; sprite loop counter
0426AC F1          0097*       pop af ; sprite id
0426AD 3C          0098*       inc a
0426AE 1D          0099*       dec e
0426AF C2 90 26 04 0100*       jp nz,@sprites_loop
0426B3 C9          0101*       ret
0426B4             0102*   ; end init_explosions
0426B4             0051        include "fonts_list.inc"
0426B4 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
042700             0002*   
042700             0003*   ; Generated by asm_config_editor.py
042700             0004*   font_list_record_size: equ 12
042700             0005*   font_list_width: equ 0
042700             0006*   font_list_height: equ 3
042700             0007*   font_list_bufferId: equ 6
042700             0008*   font_list_filename: equ 9
042700             0009*   
042700             0010*   num_fonts: equ 7
042700             0011*   
042700             0012*   ; Index list:
042700             0013*   amiga_forever_8x8: equ 64000
042700             0014*   computer_pixel_7_8x12: equ 64001
042700             0015*   computer_pixel_7_8x16: equ 64002
042700             0016*   Lat2_VGA8_8x8: equ 64003
042700             0017*   Lat7_VGA8_8x8: equ 64004
042700             0018*   Squarewave_Bold_8x12: equ 64005
042700             0019*   wendy_neue_6x6: equ 64006
042700             0020*   
042700             0021*   font_list: ; width; height; bufferId; filename;:
042700 08 00 00 08 0022*   	dl 8, 8, 64000, fn_amiga_forever_8x8
       00 00 00 FA 
       00 54 27 04 
04270C 08 00 00 0C 0023*   	dl 8, 12, 64001, fn_computer_pixel_7_8x12
       00 00 01 FA 
       00 71 27 04 
042718 08 00 00 10 0024*   	dl 8, 16, 64002, fn_computer_pixel_7_8x16
       00 00 02 FA 
       00 92 27 04 
042724 08 00 00 08 0025*   	dl 8, 8, 64003, fn_Lat2_VGA8_8x8
       00 00 03 FA 
       00 B3 27 04 
042730 08 00 00 08 0026*   	dl 8, 8, 64004, fn_Lat7_VGA8_8x8
       00 00 04 FA 
       00 CC 27 04 
04273C 08 00 00 0C 0027*   	dl 8, 12, 64005, fn_Squarewave_Bold_8x12
       00 00 05 FA 
       00 E5 27 04 
042748 06 00 00 06 0028*   	dl 6, 6, 64006, fn_wendy_neue_6x6
       00 00 06 FA 
       00 05 28 04 
042754             0029*   
042754             0030*   ; files_list: ; filename:
042754 66 6F 6E 74 0031*   fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042771 66 6F 6E 74 0032*   fn_computer_pixel_7_8x12: db "fonts/computer_pixel_7_8x12.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 32 2E 
       66 6F 6E 74 
       00          
042792 66 6F 6E 74 0033*   fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
0427B3 66 6F 6E 74 0034*   fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
0427CC 66 6F 6E 74 0035*   fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
0427E5 66 6F 6E 74 0036*   fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
042805 66 6F 6E 74 0037*   fn_wendy_neue_6x6: db "fonts/wendy_neue_6x6.font",0
       73 2F 77 65 
       6E 64 79 5F 
       6E 65 75 65 
       5F 36 78 36 
       2E 66 6F 6E 
       74 00       
04281F             0052        include "images_bg.inc"
04281F             0001*   ; Generated by make_images.py
04281F             0002*   
04281F             0003*   bg_num_images: equ 8
04281F             0004*   
04281F             0005*   ; buffer_ids:
04281F             0006*   BUF_BG_STARS_0: equ 1024
04281F             0007*   BUF_BG_STARS_1: equ 1025
04281F             0008*   BUF_BG_STARS_2: equ 1026
04281F             0009*   BUF_BG_STARS_3: equ 1027
04281F             0010*   BUF_BG_STARS_4: equ 1028
04281F             0011*   BUF_BG_STARS_5: equ 1029
04281F             0012*   BUF_BG_STARS_6: equ 1030
04281F             0013*   BUF_BG_STARS_7: equ 1031
04281F             0014*   
04281F             0015*   bg_image_list: ; type; width; height; size; filename; bufferId:
04281F 01 00 00 00 0016*   	dl 1, 256, 256, 65536, fn_bg_stars_0, 1024
       01 00 00 01 
       00 00 00 01 
       AF 28 04 00 
       04 00       
042831 01 00 00 00 0017*   	dl 1, 256, 256, 65536, fn_bg_stars_1, 1025
       01 00 00 01 
       00 00 00 01 
       C3 28 04 01 
       04 00       
042843 01 00 00 00 0018*   	dl 1, 256, 256, 65536, fn_bg_stars_2, 1026
       01 00 00 01 
       00 00 00 01 
       D7 28 04 02 
       04 00       
042855 01 00 00 00 0019*   	dl 1, 256, 256, 65536, fn_bg_stars_3, 1027
       01 00 00 01 
       00 00 00 01 
       EB 28 04 03 
       04 00       
042867 01 00 00 00 0020*   	dl 1, 256, 256, 65536, fn_bg_stars_4, 1028
       01 00 00 01 
       00 00 00 01 
       FF 28 04 04 
       04 00       
042879 01 00 00 00 0021*   	dl 1, 256, 256, 65536, fn_bg_stars_5, 1029
       01 00 00 01 
       00 00 00 01 
       13 29 04 05 
       04 00       
04288B 01 00 00 00 0022*   	dl 1, 256, 256, 65536, fn_bg_stars_6, 1030
       01 00 00 01 
       00 00 00 01 
       27 29 04 06 
       04 00       
04289D 01 00 00 00 0023*   	dl 1, 256, 256, 65536, fn_bg_stars_7, 1031
       01 00 00 01 
       00 00 00 01 
       3B 29 04 07 
       04 00       
0428AF             0024*   
0428AF             0025*   ; files_list: ; filename:
0428AF 62 67 2F 62 0026*   fn_bg_stars_0: db "bg/bg_stars_0.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       30 2E 72 67 
       62 61 32 00 
0428C3 62 67 2F 62 0027*   fn_bg_stars_1: db "bg/bg_stars_1.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       31 2E 72 67 
       62 61 32 00 
0428D7 62 67 2F 62 0028*   fn_bg_stars_2: db "bg/bg_stars_2.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       32 2E 72 67 
       62 61 32 00 
0428EB 62 67 2F 62 0029*   fn_bg_stars_3: db "bg/bg_stars_3.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       33 2E 72 67 
       62 61 32 00 
0428FF 62 67 2F 62 0030*   fn_bg_stars_4: db "bg/bg_stars_4.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       34 2E 72 67 
       62 61 32 00 
042913 62 67 2F 62 0031*   fn_bg_stars_5: db "bg/bg_stars_5.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       35 2E 72 67 
       62 61 32 00 
042927 62 67 2F 62 0032*   fn_bg_stars_6: db "bg/bg_stars_6.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       36 2E 72 67 
       62 61 32 00 
04293B 62 67 2F 62 0033*   fn_bg_stars_7: db "bg/bg_stars_7.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       37 2E 72 67 
       62 61 32 00 
04294F             0053        include "images_tiles_dg.inc"
04294F             0001*   ; Generated by tiles_dg.py
04294F             0002*   
04294F             0003*   tiles_dg_num_images: equ 187
04294F             0004*   
04294F             0005*   ; bufferIds:
04294F             0006*   
04294F             0007*   
04294F             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
04294F 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       75 36 04 00 
       02 00       
042961 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       8A 36 04 01 
       02 00       
042973 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       9F 36 04 02 
       02 00       
042985 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       B4 36 04 03 
       02 00       
042997 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       C9 36 04 04 
       02 00       
0429A9 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       DE 36 04 05 
       02 00       
0429BB 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       F3 36 04 06 
       02 00       
0429CD 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       08 37 04 07 
       02 00       
0429DF 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       1D 37 04 08 
       02 00       
0429F1 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       32 37 04 09 
       02 00       
042A03 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       47 37 04 0A 
       02 00       
042A15 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       5C 37 04 0B 
       02 00       
042A27 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       71 37 04 10 
       02 00       
042A39 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       86 37 04 21 
       02 00       
042A4B 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       9B 37 04 22 
       02 00       
042A5D 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       B0 37 04 23 
       02 00       
042A6F 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       C5 37 04 24 
       02 00       
042A81 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       DA 37 04 25 
       02 00       
042A93 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       EF 37 04 26 
       02 00       
042AA5 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       04 38 04 27 
       02 00       
042AB7 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       19 38 04 28 
       02 00       
042AC9 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_045, 557
       00 00 10 00 
       00 00 01 00 
       2E 38 04 2D 
       02 00       
042ADB 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_046, 558
       00 00 10 00 
       00 00 01 00 
       43 38 04 2E 
       02 00       
042AED 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_047, 559
       00 00 10 00 
       00 00 01 00 
       58 38 04 2F 
       02 00       
042AFF 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_048, 560
       00 00 10 00 
       00 00 01 00 
       6D 38 04 30 
       02 00       
042B11 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       82 38 04 31 
       02 00       
042B23 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       97 38 04 32 
       02 00       
042B35 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       AC 38 04 33 
       02 00       
042B47 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       C1 38 04 34 
       02 00       
042B59 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       D6 38 04 35 
       02 00       
042B6B 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       EB 38 04 36 
       02 00       
042B7D 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       00 39 04 37 
       02 00       
042B8F 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       15 39 04 38 
       02 00       
042BA1 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       2A 39 04 39 
       02 00       
042BB3 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       3F 39 04 3A 
       02 00       
042BC5 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       54 39 04 3B 
       02 00       
042BD7 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_061, 573
       00 00 10 00 
       00 00 01 00 
       69 39 04 3D 
       02 00       
042BE9 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_062, 574
       00 00 10 00 
       00 00 01 00 
       7E 39 04 3E 
       02 00       
042BFB 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_063, 575
       00 00 10 00 
       00 00 01 00 
       93 39 04 3F 
       02 00       
042C0D 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_064, 576
       00 00 10 00 
       00 00 01 00 
       A8 39 04 40 
       02 00       
042C1F 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       BD 39 04 41 
       02 00       
042C31 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       D2 39 04 42 
       02 00       
042C43 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       E7 39 04 43 
       02 00       
042C55 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       FC 39 04 44 
       02 00       
042C67 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       11 3A 04 45 
       02 00       
042C79 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       26 3A 04 46 
       02 00       
042C8B 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       3B 3A 04 47 
       02 00       
042C9D 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       50 3A 04 48 
       02 00       
042CAF 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       65 3A 04 49 
       02 00       
042CC1 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       7A 3A 04 4A 
       02 00       
042CD3 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       8F 3A 04 4B 
       02 00       
042CE5 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_076, 588
       00 00 10 00 
       00 00 01 00 
       A4 3A 04 4C 
       02 00       
042CF7 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_077, 589
       00 00 10 00 
       00 00 01 00 
       B9 3A 04 4D 
       02 00       
042D09 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       CE 3A 04 51 
       02 00       
042D1B 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       E3 3A 04 52 
       02 00       
042D2D 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       F8 3A 04 53 
       02 00       
042D3F 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       0D 3B 04 54 
       02 00       
042D51 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       22 3B 04 55 
       02 00       
042D63 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       37 3B 04 56 
       02 00       
042D75 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       4C 3B 04 57 
       02 00       
042D87 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       61 3B 04 58 
       02 00       
042D99 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       76 3B 04 59 
       02 00       
042DAB 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       8B 3B 04 5A 
       02 00       
042DBD 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       A0 3B 04 5B 
       02 00       
042DCF 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_092, 604
       00 00 10 00 
       00 00 01 00 
       B5 3B 04 5C 
       02 00       
042DE1 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_093, 605
       00 00 10 00 
       00 00 01 00 
       CA 3B 04 5D 
       02 00       
042DF3 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       DF 3B 04 61 
       02 00       
042E05 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       F4 3B 04 62 
       02 00       
042E17 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       09 3C 04 63 
       02 00       
042E29 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       1E 3C 04 64 
       02 00       
042E3B 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       33 3C 04 65 
       02 00       
042E4D 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       48 3C 04 66 
       02 00       
042E5F 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       5D 3C 04 67 
       02 00       
042E71 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       72 3C 04 68 
       02 00       
042E83 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       87 3C 04 69 
       02 00       
042E95 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       9C 3C 04 6A 
       02 00       
042EA7 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       B1 3C 04 6B 
       02 00       
042EB9 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       C6 3C 04 6C 
       02 00       
042ECB 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       DB 3C 04 71 
       02 00       
042EDD 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       F0 3C 04 72 
       02 00       
042EEF 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       05 3D 04 73 
       02 00       
042F01 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       1A 3D 04 74 
       02 00       
042F13 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       2F 3D 04 75 
       02 00       
042F25 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       44 3D 04 76 
       02 00       
042F37 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       59 3D 04 77 
       02 00       
042F49 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       6E 3D 04 78 
       02 00       
042F5B 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       83 3D 04 79 
       02 00       
042F6D 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       98 3D 04 7A 
       02 00       
042F7F 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       AD 3D 04 7B 
       02 00       
042F91 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       C2 3D 04 81 
       02 00       
042FA3 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       D7 3D 04 82 
       02 00       
042FB5 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       EC 3D 04 83 
       02 00       
042FC7 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       01 3E 04 84 
       02 00       
042FD9 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       16 3E 04 85 
       02 00       
042FEB 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       2B 3E 04 86 
       02 00       
042FFD 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       40 3E 04 87 
       02 00       
04300F 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       55 3E 04 88 
       02 00       
043021 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       6A 3E 04 89 
       02 00       
043033 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       7F 3E 04 8A 
       02 00       
043045 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       94 3E 04 8B 
       02 00       
043057 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       A9 3E 04 8C 
       02 00       
043069 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       BE 3E 04 91 
       02 00       
04307B 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       D3 3E 04 92 
       02 00       
04308D 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       E8 3E 04 93 
       02 00       
04309F 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       FD 3E 04 94 
       02 00       
0430B1 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       12 3F 04 95 
       02 00       
0430C3 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       27 3F 04 96 
       02 00       
0430D5 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       3C 3F 04 97 
       02 00       
0430E7 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       51 3F 04 98 
       02 00       
0430F9 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       66 3F 04 99 
       02 00       
04310B 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       7B 3F 04 9A 
       02 00       
04311D 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       90 3F 04 9B 
       02 00       
04312F 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       A5 3F 04 9C 
       02 00       
043141 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       BA 3F 04 A1 
       02 00       
043153 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       CF 3F 04 A2 
       02 00       
043165 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       E4 3F 04 A3 
       02 00       
043177 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       F9 3F 04 A4 
       02 00       
043189 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       0E 40 04 A5 
       02 00       
04319B 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       23 40 04 A6 
       02 00       
0431AD 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       38 40 04 A7 
       02 00       
0431BF 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       4D 40 04 A8 
       02 00       
0431D1 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       62 40 04 A9 
       02 00       
0431E3 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       77 40 04 AA 
       02 00       
0431F5 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       8C 40 04 AB 
       02 00       
043207 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       A1 40 04 AC 
       02 00       
043219 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_174, 686
       00 00 10 00 
       00 00 01 00 
       B6 40 04 AE 
       02 00       
04322B 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_175, 687
       00 00 10 00 
       00 00 01 00 
       CB 40 04 AF 
       02 00       
04323D 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_176, 688
       00 00 10 00 
       00 00 01 00 
       E0 40 04 B0 
       02 00       
04324F 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       F5 40 04 B1 
       02 00       
043261 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       0A 41 04 B2 
       02 00       
043273 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       1F 41 04 B3 
       02 00       
043285 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       34 41 04 B4 
       02 00       
043297 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       49 41 04 B5 
       02 00       
0432A9 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       5E 41 04 B6 
       02 00       
0432BB 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       73 41 04 B7 
       02 00       
0432CD 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       88 41 04 B8 
       02 00       
0432DF 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       9D 41 04 B9 
       02 00       
0432F1 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       B2 41 04 BA 
       02 00       
043303 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       C7 41 04 BB 
       02 00       
043315 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       DC 41 04 BC 
       02 00       
043327 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_190, 702
       00 00 10 00 
       00 00 01 00 
       F1 41 04 BE 
       02 00       
043339 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_191, 703
       00 00 10 00 
       00 00 01 00 
       06 42 04 BF 
       02 00       
04334B 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_192, 704
       00 00 10 00 
       00 00 01 00 
       1B 42 04 C0 
       02 00       
04335D 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       30 42 04 C1 
       02 00       
04336F 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       45 42 04 C2 
       02 00       
043381 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       5A 42 04 C3 
       02 00       
043393 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       6F 42 04 C4 
       02 00       
0433A5 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       84 42 04 C5 
       02 00       
0433B7 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       99 42 04 C6 
       02 00       
0433C9 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       AE 42 04 C7 
       02 00       
0433DB 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       C3 42 04 C8 
       02 00       
0433ED 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       D8 42 04 C9 
       02 00       
0433FF 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       ED 42 04 CA 
       02 00       
043411 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       02 43 04 CB 
       02 00       
043423 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       17 43 04 CC 
       02 00       
043435 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_206, 718
       00 00 10 00 
       00 00 01 00 
       2C 43 04 CE 
       02 00       
043447 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_207, 719
       00 00 10 00 
       00 00 01 00 
       41 43 04 CF 
       02 00       
043459 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_208, 720
       00 00 10 00 
       00 00 01 00 
       56 43 04 D0 
       02 00       
04346B 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       6B 43 04 D1 
       02 00       
04347D 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       80 43 04 D2 
       02 00       
04348F 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       95 43 04 D3 
       02 00       
0434A1 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       AA 43 04 D4 
       02 00       
0434B3 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       BF 43 04 D5 
       02 00       
0434C5 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       D4 43 04 D6 
       02 00       
0434D7 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       E9 43 04 D7 
       02 00       
0434E9 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       FE 43 04 D8 
       02 00       
0434FB 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       13 44 04 D9 
       02 00       
04350D 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       28 44 04 DA 
       02 00       
04351F 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       3D 44 04 DB 
       02 00       
043531 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       52 44 04 DC 
       02 00       
043543 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       67 44 04 E1 
       02 00       
043555 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       7C 44 04 E2 
       02 00       
043567 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       91 44 04 E3 
       02 00       
043579 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       A6 44 04 E4 
       02 00       
04358B 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       BB 44 04 E5 
       02 00       
04359D 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       D0 44 04 E6 
       02 00       
0435AF 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       E5 44 04 E7 
       02 00       
0435C1 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       FA 44 04 E8 
       02 00       
0435D3 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       0F 45 04 E9 
       02 00       
0435E5 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       24 45 04 EA 
       02 00       
0435F7 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       39 45 04 EB 
       02 00       
043609 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       4E 45 04 EC 
       02 00       
04361B 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       63 45 04 F1 
       02 00       
04362D 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       78 45 04 F2 
       02 00       
04363F 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       8D 45 04 F5 
       02 00       
043651 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       A2 45 04 F6 
       02 00       
043663 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       B7 45 04 F8 
       02 00       
043675             0196*   
043675             0197*   tiles_dg_files_list: ; filename:
043675 74 69 6C 65 0198*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
04368A 74 69 6C 65 0199*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
04369F 74 69 6C 65 0200*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
0436B4 74 69 6C 65 0201*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
0436C9 74 69 6C 65 0202*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
0436DE 74 69 6C 65 0203*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
0436F3 74 69 6C 65 0204*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
043708 74 69 6C 65 0205*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
04371D 74 69 6C 65 0206*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
043732 74 69 6C 65 0207*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
043747 74 69 6C 65 0208*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
04375C 74 69 6C 65 0209*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
043771 74 69 6C 65 0210*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
043786 74 69 6C 65 0211*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
04379B 74 69 6C 65 0212*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
0437B0 74 69 6C 65 0213*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
0437C5 74 69 6C 65 0214*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
0437DA 74 69 6C 65 0215*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
0437EF 74 69 6C 65 0216*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
043804 74 69 6C 65 0217*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
043819 74 69 6C 65 0218*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
04382E 74 69 6C 65 0219*   fn_dg_045: db "tiles/dg/0/045.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 35 2E 72 
       67 62 61 32 
       00          
043843 74 69 6C 65 0220*   fn_dg_046: db "tiles/dg/0/046.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 36 2E 72 
       67 62 61 32 
       00          
043858 74 69 6C 65 0221*   fn_dg_047: db "tiles/dg/0/047.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 37 2E 72 
       67 62 61 32 
       00          
04386D 74 69 6C 65 0222*   fn_dg_048: db "tiles/dg/0/048.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
043882 74 69 6C 65 0223*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
043897 74 69 6C 65 0224*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
0438AC 74 69 6C 65 0225*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
0438C1 74 69 6C 65 0226*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
0438D6 74 69 6C 65 0227*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
0438EB 74 69 6C 65 0228*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
043900 74 69 6C 65 0229*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
043915 74 69 6C 65 0230*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04392A 74 69 6C 65 0231*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
04393F 74 69 6C 65 0232*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043954 74 69 6C 65 0233*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
043969 74 69 6C 65 0234*   fn_dg_061: db "tiles/dg/0/061.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 31 2E 72 
       67 62 61 32 
       00          
04397E 74 69 6C 65 0235*   fn_dg_062: db "tiles/dg/0/062.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 32 2E 72 
       67 62 61 32 
       00          
043993 74 69 6C 65 0236*   fn_dg_063: db "tiles/dg/0/063.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 33 2E 72 
       67 62 61 32 
       00          
0439A8 74 69 6C 65 0237*   fn_dg_064: db "tiles/dg/0/064.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0439BD 74 69 6C 65 0238*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
0439D2 74 69 6C 65 0239*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
0439E7 74 69 6C 65 0240*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
0439FC 74 69 6C 65 0241*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
043A11 74 69 6C 65 0242*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
043A26 74 69 6C 65 0243*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
043A3B 74 69 6C 65 0244*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
043A50 74 69 6C 65 0245*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
043A65 74 69 6C 65 0246*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
043A7A 74 69 6C 65 0247*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
043A8F 74 69 6C 65 0248*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
043AA4 74 69 6C 65 0249*   fn_dg_076: db "tiles/dg/0/076.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 36 2E 72 
       67 62 61 32 
       00          
043AB9 74 69 6C 65 0250*   fn_dg_077: db "tiles/dg/0/077.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 37 2E 72 
       67 62 61 32 
       00          
043ACE 74 69 6C 65 0251*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
043AE3 74 69 6C 65 0252*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
043AF8 74 69 6C 65 0253*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
043B0D 74 69 6C 65 0254*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
043B22 74 69 6C 65 0255*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
043B37 74 69 6C 65 0256*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
043B4C 74 69 6C 65 0257*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
043B61 74 69 6C 65 0258*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
043B76 74 69 6C 65 0259*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
043B8B 74 69 6C 65 0260*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
043BA0 74 69 6C 65 0261*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
043BB5 74 69 6C 65 0262*   fn_dg_092: db "tiles/dg/0/092.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 32 2E 72 
       67 62 61 32 
       00          
043BCA 74 69 6C 65 0263*   fn_dg_093: db "tiles/dg/0/093.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 33 2E 72 
       67 62 61 32 
       00          
043BDF 74 69 6C 65 0264*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
043BF4 74 69 6C 65 0265*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
043C09 74 69 6C 65 0266*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
043C1E 74 69 6C 65 0267*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
043C33 74 69 6C 65 0268*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
043C48 74 69 6C 65 0269*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
043C5D 74 69 6C 65 0270*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
043C72 74 69 6C 65 0271*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
043C87 74 69 6C 65 0272*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
043C9C 74 69 6C 65 0273*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
043CB1 74 69 6C 65 0274*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
043CC6 74 69 6C 65 0275*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
043CDB 74 69 6C 65 0276*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
043CF0 74 69 6C 65 0277*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
043D05 74 69 6C 65 0278*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
043D1A 74 69 6C 65 0279*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
043D2F 74 69 6C 65 0280*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
043D44 74 69 6C 65 0281*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
043D59 74 69 6C 65 0282*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
043D6E 74 69 6C 65 0283*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
043D83 74 69 6C 65 0284*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
043D98 74 69 6C 65 0285*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
043DAD 74 69 6C 65 0286*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
043DC2 74 69 6C 65 0287*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
043DD7 74 69 6C 65 0288*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
043DEC 74 69 6C 65 0289*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
043E01 74 69 6C 65 0290*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
043E16 74 69 6C 65 0291*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
043E2B 74 69 6C 65 0292*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
043E40 74 69 6C 65 0293*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
043E55 74 69 6C 65 0294*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
043E6A 74 69 6C 65 0295*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
043E7F 74 69 6C 65 0296*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
043E94 74 69 6C 65 0297*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
043EA9 74 69 6C 65 0298*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
043EBE 74 69 6C 65 0299*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
043ED3 74 69 6C 65 0300*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
043EE8 74 69 6C 65 0301*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
043EFD 74 69 6C 65 0302*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
043F12 74 69 6C 65 0303*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
043F27 74 69 6C 65 0304*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
043F3C 74 69 6C 65 0305*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
043F51 74 69 6C 65 0306*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
043F66 74 69 6C 65 0307*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
043F7B 74 69 6C 65 0308*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
043F90 74 69 6C 65 0309*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
043FA5 74 69 6C 65 0310*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
043FBA 74 69 6C 65 0311*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
043FCF 74 69 6C 65 0312*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
043FE4 74 69 6C 65 0313*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
043FF9 74 69 6C 65 0314*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
04400E 74 69 6C 65 0315*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
044023 74 69 6C 65 0316*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
044038 74 69 6C 65 0317*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
04404D 74 69 6C 65 0318*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044062 74 69 6C 65 0319*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
044077 74 69 6C 65 0320*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
04408C 74 69 6C 65 0321*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
0440A1 74 69 6C 65 0322*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
0440B6 74 69 6C 65 0323*   fn_dg_174: db "tiles/dg/0/174.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 34 2E 72 
       67 62 61 32 
       00          
0440CB 74 69 6C 65 0324*   fn_dg_175: db "tiles/dg/0/175.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 35 2E 72 
       67 62 61 32 
       00          
0440E0 74 69 6C 65 0325*   fn_dg_176: db "tiles/dg/0/176.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0440F5 74 69 6C 65 0326*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
04410A 74 69 6C 65 0327*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
04411F 74 69 6C 65 0328*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
044134 74 69 6C 65 0329*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
044149 74 69 6C 65 0330*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
04415E 74 69 6C 65 0331*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
044173 74 69 6C 65 0332*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
044188 74 69 6C 65 0333*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04419D 74 69 6C 65 0334*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
0441B2 74 69 6C 65 0335*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
0441C7 74 69 6C 65 0336*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
0441DC 74 69 6C 65 0337*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
0441F1 74 69 6C 65 0338*   fn_dg_190: db "tiles/dg/0/190.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 30 2E 72 
       67 62 61 32 
       00          
044206 74 69 6C 65 0339*   fn_dg_191: db "tiles/dg/0/191.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 31 2E 72 
       67 62 61 32 
       00          
04421B 74 69 6C 65 0340*   fn_dg_192: db "tiles/dg/0/192.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
044230 74 69 6C 65 0341*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
044245 74 69 6C 65 0342*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
04425A 74 69 6C 65 0343*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
04426F 74 69 6C 65 0344*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
044284 74 69 6C 65 0345*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
044299 74 69 6C 65 0346*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
0442AE 74 69 6C 65 0347*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
0442C3 74 69 6C 65 0348*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0442D8 74 69 6C 65 0349*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
0442ED 74 69 6C 65 0350*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
044302 74 69 6C 65 0351*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
044317 74 69 6C 65 0352*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
04432C 74 69 6C 65 0353*   fn_dg_206: db "tiles/dg/0/206.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 36 2E 72 
       67 62 61 32 
       00          
044341 74 69 6C 65 0354*   fn_dg_207: db "tiles/dg/0/207.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 37 2E 72 
       67 62 61 32 
       00          
044356 74 69 6C 65 0355*   fn_dg_208: db "tiles/dg/0/208.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
04436B 74 69 6C 65 0356*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
044380 74 69 6C 65 0357*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
044395 74 69 6C 65 0358*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
0443AA 74 69 6C 65 0359*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
0443BF 74 69 6C 65 0360*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
0443D4 74 69 6C 65 0361*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
0443E9 74 69 6C 65 0362*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
0443FE 74 69 6C 65 0363*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044413 74 69 6C 65 0364*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
044428 74 69 6C 65 0365*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
04443D 74 69 6C 65 0366*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
044452 74 69 6C 65 0367*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
044467 74 69 6C 65 0368*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
04447C 74 69 6C 65 0369*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
044491 74 69 6C 65 0370*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
0444A6 74 69 6C 65 0371*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
0444BB 74 69 6C 65 0372*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
0444D0 74 69 6C 65 0373*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
0444E5 74 69 6C 65 0374*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
0444FA 74 69 6C 65 0375*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
04450F 74 69 6C 65 0376*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
044524 74 69 6C 65 0377*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
044539 74 69 6C 65 0378*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
04454E 74 69 6C 65 0379*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
044563 74 69 6C 65 0380*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
044578 74 69 6C 65 0381*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
04458D 74 69 6C 65 0382*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
0445A2 74 69 6C 65 0383*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
0445B7 74 69 6C 65 0384*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0445CC             0054        ; include "images_tiles_xevious.inc"
0445CC             0055        include "images_sprites.inc"
0445CC             0001*   ; Generated by make_images.py
0445CC             0002*   
0445CC             0003*   sprites_num_images: equ 157
0445CC             0004*   
0445CC             0005*   ; buffer_ids:
0445CC             0006*   BUF_CRATER: equ 256
0445CC             0007*   BUF_CRATER_0: equ 257
0445CC             0008*   BUF_CRATER_1: equ 258
0445CC             0009*   BUF_CRATER_2: equ 259
0445CC             0010*   BUF_CRATER_3: equ 260
0445CC             0011*   BUF_EXPLOSION_A: equ 261
0445CC             0012*   BUF_EXPLOSION_B: equ 262
0445CC             0013*   BUF_EXPLOSION_C: equ 263
0445CC             0014*   BUF_EXPLOSION_D: equ 264
0445CC             0015*   BUF_EXPLOSION_E: equ 265
0445CC             0016*   BUF_FIREBALL_2_000: equ 266
0445CC             0017*   BUF_FIREBALL_2_008: equ 267
0445CC             0018*   BUF_FIREBALL_2_016: equ 268
0445CC             0019*   BUF_FIREBALL_2_024: equ 269
0445CC             0020*   BUF_FIREBALL_2_032: equ 270
0445CC             0021*   BUF_FIREBALL_2_040: equ 271
0445CC             0022*   BUF_FIREBALL_2_048: equ 272
0445CC             0023*   BUF_FIREBALL_2_056: equ 273
0445CC             0024*   BUF_FIREBALL_2_064: equ 274
0445CC             0025*   BUF_FIREBALL_2_072: equ 275
0445CC             0026*   BUF_FIREBALL_2_080: equ 276
0445CC             0027*   BUF_FIREBALL_2_088: equ 277
0445CC             0028*   BUF_FIREBALL_2_096: equ 278
0445CC             0029*   BUF_FIREBALL_2_104: equ 279
0445CC             0030*   BUF_FIREBALL_2_112: equ 280
0445CC             0031*   BUF_FIREBALL_2_120: equ 281
0445CC             0032*   BUF_FIREBALL_2_128: equ 282
0445CC             0033*   BUF_FIREBALL_2_136: equ 283
0445CC             0034*   BUF_FIREBALL_2_144: equ 284
0445CC             0035*   BUF_FIREBALL_2_152: equ 285
0445CC             0036*   BUF_FIREBALL_2_160: equ 286
0445CC             0037*   BUF_FIREBALL_2_168: equ 287
0445CC             0038*   BUF_FIREBALL_2_176: equ 288
0445CC             0039*   BUF_FIREBALL_2_184: equ 289
0445CC             0040*   BUF_FIREBALL_2_192: equ 290
0445CC             0041*   BUF_FIREBALL_2_200: equ 291
0445CC             0042*   BUF_FIREBALL_2_208: equ 292
0445CC             0043*   BUF_FIREBALL_2_216: equ 293
0445CC             0044*   BUF_FIREBALL_2_224: equ 294
0445CC             0045*   BUF_FIREBALL_2_232: equ 295
0445CC             0046*   BUF_FIREBALL_2_240: equ 296
0445CC             0047*   BUF_FIREBALL_2_248: equ 297
0445CC             0048*   BUF_FIREBALL_3_000: equ 298
0445CC             0049*   BUF_FIREBALL_3_008: equ 299
0445CC             0050*   BUF_FIREBALL_3_016: equ 300
0445CC             0051*   BUF_FIREBALL_3_024: equ 301
0445CC             0052*   BUF_FIREBALL_3_032: equ 302
0445CC             0053*   BUF_FIREBALL_3_040: equ 303
0445CC             0054*   BUF_FIREBALL_3_048: equ 304
0445CC             0055*   BUF_FIREBALL_3_056: equ 305
0445CC             0056*   BUF_FIREBALL_3_064: equ 306
0445CC             0057*   BUF_FIREBALL_3_072: equ 307
0445CC             0058*   BUF_FIREBALL_3_080: equ 308
0445CC             0059*   BUF_FIREBALL_3_088: equ 309
0445CC             0060*   BUF_FIREBALL_3_096: equ 310
0445CC             0061*   BUF_FIREBALL_3_104: equ 311
0445CC             0062*   BUF_FIREBALL_3_112: equ 312
0445CC             0063*   BUF_FIREBALL_3_120: equ 313
0445CC             0064*   BUF_FIREBALL_3_128: equ 314
0445CC             0065*   BUF_FIREBALL_3_136: equ 315
0445CC             0066*   BUF_FIREBALL_3_144: equ 316
0445CC             0067*   BUF_FIREBALL_3_152: equ 317
0445CC             0068*   BUF_FIREBALL_3_160: equ 318
0445CC             0069*   BUF_FIREBALL_3_168: equ 319
0445CC             0070*   BUF_FIREBALL_3_176: equ 320
0445CC             0071*   BUF_FIREBALL_3_184: equ 321
0445CC             0072*   BUF_FIREBALL_3_192: equ 322
0445CC             0073*   BUF_FIREBALL_3_200: equ 323
0445CC             0074*   BUF_FIREBALL_3_208: equ 324
0445CC             0075*   BUF_FIREBALL_3_216: equ 325
0445CC             0076*   BUF_FIREBALL_3_224: equ 326
0445CC             0077*   BUF_FIREBALL_3_232: equ 327
0445CC             0078*   BUF_FIREBALL_3_240: equ 328
0445CC             0079*   BUF_FIREBALL_3_248: equ 329
0445CC             0080*   BUF_LASER_A: equ 330
0445CC             0081*   BUF_LASER_B: equ 331
0445CC             0082*   BUF_LIGHTNING_H_0: equ 332
0445CC             0083*   BUF_LIGHTNING_H_1: equ 333
0445CC             0084*   BUF_PAD: equ 334
0445CC             0085*   BUF_SEEKER_000: equ 335
0445CC             0086*   BUF_SEEKER_008: equ 336
0445CC             0087*   BUF_SEEKER_016: equ 337
0445CC             0088*   BUF_SEEKER_024: equ 338
0445CC             0089*   BUF_SEEKER_032: equ 339
0445CC             0090*   BUF_SEEKER_040: equ 340
0445CC             0091*   BUF_SEEKER_048: equ 341
0445CC             0092*   BUF_SEEKER_056: equ 342
0445CC             0093*   BUF_SEEKER_064: equ 343
0445CC             0094*   BUF_SEEKER_072: equ 344
0445CC             0095*   BUF_SEEKER_080: equ 345
0445CC             0096*   BUF_SEEKER_088: equ 346
0445CC             0097*   BUF_SEEKER_096: equ 347
0445CC             0098*   BUF_SEEKER_104: equ 348
0445CC             0099*   BUF_SEEKER_112: equ 349
0445CC             0100*   BUF_SEEKER_120: equ 350
0445CC             0101*   BUF_SEEKER_128: equ 351
0445CC             0102*   BUF_SEEKER_136: equ 352
0445CC             0103*   BUF_SEEKER_144: equ 353
0445CC             0104*   BUF_SEEKER_152: equ 354
0445CC             0105*   BUF_SEEKER_160: equ 355
0445CC             0106*   BUF_SEEKER_168: equ 356
0445CC             0107*   BUF_SEEKER_176: equ 357
0445CC             0108*   BUF_SEEKER_184: equ 358
0445CC             0109*   BUF_SEEKER_192: equ 359
0445CC             0110*   BUF_SEEKER_200: equ 360
0445CC             0111*   BUF_SEEKER_208: equ 361
0445CC             0112*   BUF_SEEKER_216: equ 362
0445CC             0113*   BUF_SEEKER_224: equ 363
0445CC             0114*   BUF_SEEKER_232: equ 364
0445CC             0115*   BUF_SEEKER_240: equ 365
0445CC             0116*   BUF_SEEKER_248: equ 366
0445CC             0117*   BUF_SHIP_0L: equ 367
0445CC             0118*   BUF_SHIP_1C: equ 368
0445CC             0119*   BUF_SHIP_2R: equ 369
0445CC             0120*   BUF_SHIP_SMALL: equ 370
0445CC             0121*   BUF_TEST_STRIPES: equ 371
0445CC             0122*   BUF_TILE_BLANK: equ 372
0445CC             0123*   BUF_TILE_PAD_0: equ 373
0445CC             0124*   BUF_TILE_PAD_1: equ 374
0445CC             0125*   BUF_TILE_PAD_2: equ 375
0445CC             0126*   BUF_TILE_PAD_3: equ 376
0445CC             0127*   BUF_TILE_PAD_4: equ 377
0445CC             0128*   BUF_TILE_PAD_5: equ 378
0445CC             0129*   BUF_TILE_PAD_6: equ 379
0445CC             0130*   BUF_TILE_PAD_7: equ 380
0445CC             0131*   BUF_TURRET_000: equ 381
0445CC             0132*   BUF_TURRET_008: equ 382
0445CC             0133*   BUF_TURRET_016: equ 383
0445CC             0134*   BUF_TURRET_024: equ 384
0445CC             0135*   BUF_TURRET_032: equ 385
0445CC             0136*   BUF_TURRET_040: equ 386
0445CC             0137*   BUF_TURRET_048: equ 387
0445CC             0138*   BUF_TURRET_056: equ 388
0445CC             0139*   BUF_TURRET_064: equ 389
0445CC             0140*   BUF_TURRET_072: equ 390
0445CC             0141*   BUF_TURRET_080: equ 391
0445CC             0142*   BUF_TURRET_088: equ 392
0445CC             0143*   BUF_TURRET_096: equ 393
0445CC             0144*   BUF_TURRET_104: equ 394
0445CC             0145*   BUF_TURRET_112: equ 395
0445CC             0146*   BUF_TURRET_120: equ 396
0445CC             0147*   BUF_TURRET_128: equ 397
0445CC             0148*   BUF_TURRET_136: equ 398
0445CC             0149*   BUF_TURRET_144: equ 399
0445CC             0150*   BUF_TURRET_152: equ 400
0445CC             0151*   BUF_TURRET_160: equ 401
0445CC             0152*   BUF_TURRET_168: equ 402
0445CC             0153*   BUF_TURRET_176: equ 403
0445CC             0154*   BUF_TURRET_184: equ 404
0445CC             0155*   BUF_TURRET_192: equ 405
0445CC             0156*   BUF_TURRET_200: equ 406
0445CC             0157*   BUF_TURRET_208: equ 407
0445CC             0158*   BUF_TURRET_216: equ 408
0445CC             0159*   BUF_TURRET_224: equ 409
0445CC             0160*   BUF_TURRET_232: equ 410
0445CC             0161*   BUF_TURRET_240: equ 411
0445CC             0162*   BUF_TURRET_248: equ 412
0445CC             0163*   
0445CC             0164*   sprites_image_list: ; type; width; height; size; filename; bufferId:
0445CC 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       D6 50 04 00 
       01 00       
0445DE 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_crater_0, 257
       00 00 10 00 
       00 00 01 00 
       EB 50 04 01 
       01 00       
0445F0 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_crater_1, 258
       00 00 10 00 
       00 00 01 00 
       02 51 04 02 
       01 00       
044602 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_crater_2, 259
       00 00 10 00 
       00 00 01 00 
       19 51 04 03 
       01 00       
044614 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_crater_3, 260
       00 00 10 00 
       00 00 01 00 
       30 51 04 04 
       01 00       
044626 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_explosion_a, 261
       00 00 10 00 
       00 00 01 00 
       47 51 04 05 
       01 00       
044638 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_explosion_b, 262
       00 00 10 00 
       00 00 01 00 
       61 51 04 06 
       01 00       
04464A 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_explosion_c, 263
       00 00 10 00 
       00 00 01 00 
       7B 51 04 07 
       01 00       
04465C 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_explosion_d, 264
       00 00 10 00 
       00 00 01 00 
       95 51 04 08 
       01 00       
04466E 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_explosion_e, 265
       00 00 10 00 
       00 00 01 00 
       AF 51 04 09 
       01 00       
044680 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_fireball_2_000, 266
       00 00 10 00 
       00 00 01 00 
       C9 51 04 0A 
       01 00       
044692 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_fireball_2_008, 267
       00 00 10 00 
       00 00 01 00 
       E6 51 04 0B 
       01 00       
0446A4 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_fireball_2_016, 268
       00 00 10 00 
       00 00 01 00 
       03 52 04 0C 
       01 00       
0446B6 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_fireball_2_024, 269
       00 00 10 00 
       00 00 01 00 
       20 52 04 0D 
       01 00       
0446C8 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_fireball_2_032, 270
       00 00 10 00 
       00 00 01 00 
       3D 52 04 0E 
       01 00       
0446DA 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_fireball_2_040, 271
       00 00 10 00 
       00 00 01 00 
       5A 52 04 0F 
       01 00       
0446EC 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_fireball_2_048, 272
       00 00 10 00 
       00 00 01 00 
       77 52 04 10 
       01 00       
0446FE 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_fireball_2_056, 273
       00 00 10 00 
       00 00 01 00 
       94 52 04 11 
       01 00       
044710 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_fireball_2_064, 274
       00 00 10 00 
       00 00 01 00 
       B1 52 04 12 
       01 00       
044722 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_fireball_2_072, 275
       00 00 10 00 
       00 00 01 00 
       CE 52 04 13 
       01 00       
044734 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_fireball_2_080, 276
       00 00 10 00 
       00 00 01 00 
       EB 52 04 14 
       01 00       
044746 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_fireball_2_088, 277
       00 00 10 00 
       00 00 01 00 
       08 53 04 15 
       01 00       
044758 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_fireball_2_096, 278
       00 00 10 00 
       00 00 01 00 
       25 53 04 16 
       01 00       
04476A 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_fireball_2_104, 279
       00 00 10 00 
       00 00 01 00 
       42 53 04 17 
       01 00       
04477C 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_fireball_2_112, 280
       00 00 10 00 
       00 00 01 00 
       5F 53 04 18 
       01 00       
04478E 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_fireball_2_120, 281
       00 00 10 00 
       00 00 01 00 
       7C 53 04 19 
       01 00       
0447A0 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_fireball_2_128, 282
       00 00 10 00 
       00 00 01 00 
       99 53 04 1A 
       01 00       
0447B2 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_fireball_2_136, 283
       00 00 10 00 
       00 00 01 00 
       B6 53 04 1B 
       01 00       
0447C4 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_fireball_2_144, 284
       00 00 10 00 
       00 00 01 00 
       D3 53 04 1C 
       01 00       
0447D6 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_fireball_2_152, 285
       00 00 10 00 
       00 00 01 00 
       F0 53 04 1D 
       01 00       
0447E8 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_fireball_2_160, 286
       00 00 10 00 
       00 00 01 00 
       0D 54 04 1E 
       01 00       
0447FA 01 00 00 10 0196*   	dl 1, 16, 16, 256, fn_fireball_2_168, 287
       00 00 10 00 
       00 00 01 00 
       2A 54 04 1F 
       01 00       
04480C 01 00 00 10 0197*   	dl 1, 16, 16, 256, fn_fireball_2_176, 288
       00 00 10 00 
       00 00 01 00 
       47 54 04 20 
       01 00       
04481E 01 00 00 10 0198*   	dl 1, 16, 16, 256, fn_fireball_2_184, 289
       00 00 10 00 
       00 00 01 00 
       64 54 04 21 
       01 00       
044830 01 00 00 10 0199*   	dl 1, 16, 16, 256, fn_fireball_2_192, 290
       00 00 10 00 
       00 00 01 00 
       81 54 04 22 
       01 00       
044842 01 00 00 10 0200*   	dl 1, 16, 16, 256, fn_fireball_2_200, 291
       00 00 10 00 
       00 00 01 00 
       9E 54 04 23 
       01 00       
044854 01 00 00 10 0201*   	dl 1, 16, 16, 256, fn_fireball_2_208, 292
       00 00 10 00 
       00 00 01 00 
       BB 54 04 24 
       01 00       
044866 01 00 00 10 0202*   	dl 1, 16, 16, 256, fn_fireball_2_216, 293
       00 00 10 00 
       00 00 01 00 
       D8 54 04 25 
       01 00       
044878 01 00 00 10 0203*   	dl 1, 16, 16, 256, fn_fireball_2_224, 294
       00 00 10 00 
       00 00 01 00 
       F5 54 04 26 
       01 00       
04488A 01 00 00 10 0204*   	dl 1, 16, 16, 256, fn_fireball_2_232, 295
       00 00 10 00 
       00 00 01 00 
       12 55 04 27 
       01 00       
04489C 01 00 00 10 0205*   	dl 1, 16, 16, 256, fn_fireball_2_240, 296
       00 00 10 00 
       00 00 01 00 
       2F 55 04 28 
       01 00       
0448AE 01 00 00 10 0206*   	dl 1, 16, 16, 256, fn_fireball_2_248, 297
       00 00 10 00 
       00 00 01 00 
       4C 55 04 29 
       01 00       
0448C0 01 00 00 10 0207*   	dl 1, 16, 16, 256, fn_fireball_3_000, 298
       00 00 10 00 
       00 00 01 00 
       69 55 04 2A 
       01 00       
0448D2 01 00 00 10 0208*   	dl 1, 16, 16, 256, fn_fireball_3_008, 299
       00 00 10 00 
       00 00 01 00 
       86 55 04 2B 
       01 00       
0448E4 01 00 00 10 0209*   	dl 1, 16, 16, 256, fn_fireball_3_016, 300
       00 00 10 00 
       00 00 01 00 
       A3 55 04 2C 
       01 00       
0448F6 01 00 00 10 0210*   	dl 1, 16, 16, 256, fn_fireball_3_024, 301
       00 00 10 00 
       00 00 01 00 
       C0 55 04 2D 
       01 00       
044908 01 00 00 10 0211*   	dl 1, 16, 16, 256, fn_fireball_3_032, 302
       00 00 10 00 
       00 00 01 00 
       DD 55 04 2E 
       01 00       
04491A 01 00 00 10 0212*   	dl 1, 16, 16, 256, fn_fireball_3_040, 303
       00 00 10 00 
       00 00 01 00 
       FA 55 04 2F 
       01 00       
04492C 01 00 00 10 0213*   	dl 1, 16, 16, 256, fn_fireball_3_048, 304
       00 00 10 00 
       00 00 01 00 
       17 56 04 30 
       01 00       
04493E 01 00 00 10 0214*   	dl 1, 16, 16, 256, fn_fireball_3_056, 305
       00 00 10 00 
       00 00 01 00 
       34 56 04 31 
       01 00       
044950 01 00 00 10 0215*   	dl 1, 16, 16, 256, fn_fireball_3_064, 306
       00 00 10 00 
       00 00 01 00 
       51 56 04 32 
       01 00       
044962 01 00 00 10 0216*   	dl 1, 16, 16, 256, fn_fireball_3_072, 307
       00 00 10 00 
       00 00 01 00 
       6E 56 04 33 
       01 00       
044974 01 00 00 10 0217*   	dl 1, 16, 16, 256, fn_fireball_3_080, 308
       00 00 10 00 
       00 00 01 00 
       8B 56 04 34 
       01 00       
044986 01 00 00 10 0218*   	dl 1, 16, 16, 256, fn_fireball_3_088, 309
       00 00 10 00 
       00 00 01 00 
       A8 56 04 35 
       01 00       
044998 01 00 00 10 0219*   	dl 1, 16, 16, 256, fn_fireball_3_096, 310
       00 00 10 00 
       00 00 01 00 
       C5 56 04 36 
       01 00       
0449AA 01 00 00 10 0220*   	dl 1, 16, 16, 256, fn_fireball_3_104, 311
       00 00 10 00 
       00 00 01 00 
       E2 56 04 37 
       01 00       
0449BC 01 00 00 10 0221*   	dl 1, 16, 16, 256, fn_fireball_3_112, 312
       00 00 10 00 
       00 00 01 00 
       FF 56 04 38 
       01 00       
0449CE 01 00 00 10 0222*   	dl 1, 16, 16, 256, fn_fireball_3_120, 313
       00 00 10 00 
       00 00 01 00 
       1C 57 04 39 
       01 00       
0449E0 01 00 00 10 0223*   	dl 1, 16, 16, 256, fn_fireball_3_128, 314
       00 00 10 00 
       00 00 01 00 
       39 57 04 3A 
       01 00       
0449F2 01 00 00 10 0224*   	dl 1, 16, 16, 256, fn_fireball_3_136, 315
       00 00 10 00 
       00 00 01 00 
       56 57 04 3B 
       01 00       
044A04 01 00 00 10 0225*   	dl 1, 16, 16, 256, fn_fireball_3_144, 316
       00 00 10 00 
       00 00 01 00 
       73 57 04 3C 
       01 00       
044A16 01 00 00 10 0226*   	dl 1, 16, 16, 256, fn_fireball_3_152, 317
       00 00 10 00 
       00 00 01 00 
       90 57 04 3D 
       01 00       
044A28 01 00 00 10 0227*   	dl 1, 16, 16, 256, fn_fireball_3_160, 318
       00 00 10 00 
       00 00 01 00 
       AD 57 04 3E 
       01 00       
044A3A 01 00 00 10 0228*   	dl 1, 16, 16, 256, fn_fireball_3_168, 319
       00 00 10 00 
       00 00 01 00 
       CA 57 04 3F 
       01 00       
044A4C 01 00 00 10 0229*   	dl 1, 16, 16, 256, fn_fireball_3_176, 320
       00 00 10 00 
       00 00 01 00 
       E7 57 04 40 
       01 00       
044A5E 01 00 00 10 0230*   	dl 1, 16, 16, 256, fn_fireball_3_184, 321
       00 00 10 00 
       00 00 01 00 
       04 58 04 41 
       01 00       
044A70 01 00 00 10 0231*   	dl 1, 16, 16, 256, fn_fireball_3_192, 322
       00 00 10 00 
       00 00 01 00 
       21 58 04 42 
       01 00       
044A82 01 00 00 10 0232*   	dl 1, 16, 16, 256, fn_fireball_3_200, 323
       00 00 10 00 
       00 00 01 00 
       3E 58 04 43 
       01 00       
044A94 01 00 00 10 0233*   	dl 1, 16, 16, 256, fn_fireball_3_208, 324
       00 00 10 00 
       00 00 01 00 
       5B 58 04 44 
       01 00       
044AA6 01 00 00 10 0234*   	dl 1, 16, 16, 256, fn_fireball_3_216, 325
       00 00 10 00 
       00 00 01 00 
       78 58 04 45 
       01 00       
044AB8 01 00 00 10 0235*   	dl 1, 16, 16, 256, fn_fireball_3_224, 326
       00 00 10 00 
       00 00 01 00 
       95 58 04 46 
       01 00       
044ACA 01 00 00 10 0236*   	dl 1, 16, 16, 256, fn_fireball_3_232, 327
       00 00 10 00 
       00 00 01 00 
       B2 58 04 47 
       01 00       
044ADC 01 00 00 10 0237*   	dl 1, 16, 16, 256, fn_fireball_3_240, 328
       00 00 10 00 
       00 00 01 00 
       CF 58 04 48 
       01 00       
044AEE 01 00 00 10 0238*   	dl 1, 16, 16, 256, fn_fireball_3_248, 329
       00 00 10 00 
       00 00 01 00 
       EC 58 04 49 
       01 00       
044B00 01 00 00 05 0239*   	dl 1, 5, 13, 65, fn_laser_a, 330
       00 00 0D 00 
       00 41 00 00 
       09 59 04 4A 
       01 00       
044B12 01 00 00 05 0240*   	dl 1, 5, 13, 65, fn_laser_b, 331
       00 00 0D 00 
       00 41 00 00 
       1F 59 04 4B 
       01 00       
044B24 01 00 00 10 0241*   	dl 1, 16, 16, 256, fn_lightning_h_0, 332
       00 00 10 00 
       00 00 01 00 
       35 59 04 4C 
       01 00       
044B36 01 00 00 10 0242*   	dl 1, 16, 16, 256, fn_lightning_h_1, 333
       00 00 10 00 
       00 00 01 00 
       51 59 04 4D 
       01 00       
044B48 01 00 00 10 0243*   	dl 1, 16, 16, 256, fn_pad, 334
       00 00 10 00 
       00 00 01 00 
       6D 59 04 4E 
       01 00       
044B5A 01 00 00 10 0244*   	dl 1, 16, 16, 256, fn_seeker_000, 335
       00 00 10 00 
       00 00 01 00 
       7F 59 04 4F 
       01 00       
044B6C 01 00 00 10 0245*   	dl 1, 16, 16, 256, fn_seeker_008, 336
       00 00 10 00 
       00 00 01 00 
       98 59 04 50 
       01 00       
044B7E 01 00 00 10 0246*   	dl 1, 16, 16, 256, fn_seeker_016, 337
       00 00 10 00 
       00 00 01 00 
       B1 59 04 51 
       01 00       
044B90 01 00 00 10 0247*   	dl 1, 16, 16, 256, fn_seeker_024, 338
       00 00 10 00 
       00 00 01 00 
       CA 59 04 52 
       01 00       
044BA2 01 00 00 10 0248*   	dl 1, 16, 16, 256, fn_seeker_032, 339
       00 00 10 00 
       00 00 01 00 
       E3 59 04 53 
       01 00       
044BB4 01 00 00 10 0249*   	dl 1, 16, 16, 256, fn_seeker_040, 340
       00 00 10 00 
       00 00 01 00 
       FC 59 04 54 
       01 00       
044BC6 01 00 00 10 0250*   	dl 1, 16, 16, 256, fn_seeker_048, 341
       00 00 10 00 
       00 00 01 00 
       15 5A 04 55 
       01 00       
044BD8 01 00 00 10 0251*   	dl 1, 16, 16, 256, fn_seeker_056, 342
       00 00 10 00 
       00 00 01 00 
       2E 5A 04 56 
       01 00       
044BEA 01 00 00 10 0252*   	dl 1, 16, 16, 256, fn_seeker_064, 343
       00 00 10 00 
       00 00 01 00 
       47 5A 04 57 
       01 00       
044BFC 01 00 00 10 0253*   	dl 1, 16, 16, 256, fn_seeker_072, 344
       00 00 10 00 
       00 00 01 00 
       60 5A 04 58 
       01 00       
044C0E 01 00 00 10 0254*   	dl 1, 16, 16, 256, fn_seeker_080, 345
       00 00 10 00 
       00 00 01 00 
       79 5A 04 59 
       01 00       
044C20 01 00 00 10 0255*   	dl 1, 16, 16, 256, fn_seeker_088, 346
       00 00 10 00 
       00 00 01 00 
       92 5A 04 5A 
       01 00       
044C32 01 00 00 10 0256*   	dl 1, 16, 16, 256, fn_seeker_096, 347
       00 00 10 00 
       00 00 01 00 
       AB 5A 04 5B 
       01 00       
044C44 01 00 00 10 0257*   	dl 1, 16, 16, 256, fn_seeker_104, 348
       00 00 10 00 
       00 00 01 00 
       C4 5A 04 5C 
       01 00       
044C56 01 00 00 10 0258*   	dl 1, 16, 16, 256, fn_seeker_112, 349
       00 00 10 00 
       00 00 01 00 
       DD 5A 04 5D 
       01 00       
044C68 01 00 00 10 0259*   	dl 1, 16, 16, 256, fn_seeker_120, 350
       00 00 10 00 
       00 00 01 00 
       F6 5A 04 5E 
       01 00       
044C7A 01 00 00 10 0260*   	dl 1, 16, 16, 256, fn_seeker_128, 351
       00 00 10 00 
       00 00 01 00 
       0F 5B 04 5F 
       01 00       
044C8C 01 00 00 10 0261*   	dl 1, 16, 16, 256, fn_seeker_136, 352
       00 00 10 00 
       00 00 01 00 
       28 5B 04 60 
       01 00       
044C9E 01 00 00 10 0262*   	dl 1, 16, 16, 256, fn_seeker_144, 353
       00 00 10 00 
       00 00 01 00 
       41 5B 04 61 
       01 00       
044CB0 01 00 00 10 0263*   	dl 1, 16, 16, 256, fn_seeker_152, 354
       00 00 10 00 
       00 00 01 00 
       5A 5B 04 62 
       01 00       
044CC2 01 00 00 10 0264*   	dl 1, 16, 16, 256, fn_seeker_160, 355
       00 00 10 00 
       00 00 01 00 
       73 5B 04 63 
       01 00       
044CD4 01 00 00 10 0265*   	dl 1, 16, 16, 256, fn_seeker_168, 356
       00 00 10 00 
       00 00 01 00 
       8C 5B 04 64 
       01 00       
044CE6 01 00 00 10 0266*   	dl 1, 16, 16, 256, fn_seeker_176, 357
       00 00 10 00 
       00 00 01 00 
       A5 5B 04 65 
       01 00       
044CF8 01 00 00 10 0267*   	dl 1, 16, 16, 256, fn_seeker_184, 358
       00 00 10 00 
       00 00 01 00 
       BE 5B 04 66 
       01 00       
044D0A 01 00 00 10 0268*   	dl 1, 16, 16, 256, fn_seeker_192, 359
       00 00 10 00 
       00 00 01 00 
       D7 5B 04 67 
       01 00       
044D1C 01 00 00 10 0269*   	dl 1, 16, 16, 256, fn_seeker_200, 360
       00 00 10 00 
       00 00 01 00 
       F0 5B 04 68 
       01 00       
044D2E 01 00 00 10 0270*   	dl 1, 16, 16, 256, fn_seeker_208, 361
       00 00 10 00 
       00 00 01 00 
       09 5C 04 69 
       01 00       
044D40 01 00 00 10 0271*   	dl 1, 16, 16, 256, fn_seeker_216, 362
       00 00 10 00 
       00 00 01 00 
       22 5C 04 6A 
       01 00       
044D52 01 00 00 10 0272*   	dl 1, 16, 16, 256, fn_seeker_224, 363
       00 00 10 00 
       00 00 01 00 
       3B 5C 04 6B 
       01 00       
044D64 01 00 00 10 0273*   	dl 1, 16, 16, 256, fn_seeker_232, 364
       00 00 10 00 
       00 00 01 00 
       54 5C 04 6C 
       01 00       
044D76 01 00 00 10 0274*   	dl 1, 16, 16, 256, fn_seeker_240, 365
       00 00 10 00 
       00 00 01 00 
       6D 5C 04 6D 
       01 00       
044D88 01 00 00 10 0275*   	dl 1, 16, 16, 256, fn_seeker_248, 366
       00 00 10 00 
       00 00 01 00 
       86 5C 04 6E 
       01 00       
044D9A 01 00 00 10 0276*   	dl 1, 16, 16, 256, fn_ship_0l, 367
       00 00 10 00 
       00 00 01 00 
       9F 5C 04 6F 
       01 00       
044DAC 01 00 00 10 0277*   	dl 1, 16, 16, 256, fn_ship_1c, 368
       00 00 10 00 
       00 00 01 00 
       B5 5C 04 70 
       01 00       
044DBE 01 00 00 10 0278*   	dl 1, 16, 16, 256, fn_ship_2r, 369
       00 00 10 00 
       00 00 01 00 
       CB 5C 04 71 
       01 00       
044DD0 01 00 00 08 0279*   	dl 1, 8, 8, 64, fn_ship_small, 370
       00 00 08 00 
       00 40 00 00 
       E1 5C 04 72 
       01 00       
044DE2 01 00 00 10 0280*   	dl 1, 16, 16, 256, fn_test_stripes, 371
       00 00 10 00 
       00 00 01 00 
       FA 5C 04 73 
       01 00       
044DF4 01 00 00 10 0281*   	dl 1, 16, 16, 256, fn_tile_blank, 372
       00 00 10 00 
       00 00 01 00 
       15 5D 04 74 
       01 00       
044E06 01 00 00 10 0282*   	dl 1, 16, 16, 256, fn_tile_pad_0, 373
       00 00 10 00 
       00 00 01 00 
       2E 5D 04 75 
       01 00       
044E18 01 00 00 10 0283*   	dl 1, 16, 16, 256, fn_tile_pad_1, 374
       00 00 10 00 
       00 00 01 00 
       47 5D 04 76 
       01 00       
044E2A 01 00 00 10 0284*   	dl 1, 16, 16, 256, fn_tile_pad_2, 375
       00 00 10 00 
       00 00 01 00 
       60 5D 04 77 
       01 00       
044E3C 01 00 00 10 0285*   	dl 1, 16, 16, 256, fn_tile_pad_3, 376
       00 00 10 00 
       00 00 01 00 
       79 5D 04 78 
       01 00       
044E4E 01 00 00 10 0286*   	dl 1, 16, 16, 256, fn_tile_pad_4, 377
       00 00 10 00 
       00 00 01 00 
       92 5D 04 79 
       01 00       
044E60 01 00 00 10 0287*   	dl 1, 16, 16, 256, fn_tile_pad_5, 378
       00 00 10 00 
       00 00 01 00 
       AB 5D 04 7A 
       01 00       
044E72 01 00 00 10 0288*   	dl 1, 16, 16, 256, fn_tile_pad_6, 379
       00 00 10 00 
       00 00 01 00 
       C4 5D 04 7B 
       01 00       
044E84 01 00 00 10 0289*   	dl 1, 16, 16, 256, fn_tile_pad_7, 380
       00 00 10 00 
       00 00 01 00 
       DD 5D 04 7C 
       01 00       
044E96 01 00 00 10 0290*   	dl 1, 16, 16, 256, fn_turret_000, 381
       00 00 10 00 
       00 00 01 00 
       F6 5D 04 7D 
       01 00       
044EA8 01 00 00 10 0291*   	dl 1, 16, 16, 256, fn_turret_008, 382
       00 00 10 00 
       00 00 01 00 
       0F 5E 04 7E 
       01 00       
044EBA 01 00 00 10 0292*   	dl 1, 16, 16, 256, fn_turret_016, 383
       00 00 10 00 
       00 00 01 00 
       28 5E 04 7F 
       01 00       
044ECC 01 00 00 10 0293*   	dl 1, 16, 16, 256, fn_turret_024, 384
       00 00 10 00 
       00 00 01 00 
       41 5E 04 80 
       01 00       
044EDE 01 00 00 10 0294*   	dl 1, 16, 16, 256, fn_turret_032, 385
       00 00 10 00 
       00 00 01 00 
       5A 5E 04 81 
       01 00       
044EF0 01 00 00 10 0295*   	dl 1, 16, 16, 256, fn_turret_040, 386
       00 00 10 00 
       00 00 01 00 
       73 5E 04 82 
       01 00       
044F02 01 00 00 10 0296*   	dl 1, 16, 16, 256, fn_turret_048, 387
       00 00 10 00 
       00 00 01 00 
       8C 5E 04 83 
       01 00       
044F14 01 00 00 10 0297*   	dl 1, 16, 16, 256, fn_turret_056, 388
       00 00 10 00 
       00 00 01 00 
       A5 5E 04 84 
       01 00       
044F26 01 00 00 10 0298*   	dl 1, 16, 16, 256, fn_turret_064, 389
       00 00 10 00 
       00 00 01 00 
       BE 5E 04 85 
       01 00       
044F38 01 00 00 10 0299*   	dl 1, 16, 16, 256, fn_turret_072, 390
       00 00 10 00 
       00 00 01 00 
       D7 5E 04 86 
       01 00       
044F4A 01 00 00 10 0300*   	dl 1, 16, 16, 256, fn_turret_080, 391
       00 00 10 00 
       00 00 01 00 
       F0 5E 04 87 
       01 00       
044F5C 01 00 00 10 0301*   	dl 1, 16, 16, 256, fn_turret_088, 392
       00 00 10 00 
       00 00 01 00 
       09 5F 04 88 
       01 00       
044F6E 01 00 00 10 0302*   	dl 1, 16, 16, 256, fn_turret_096, 393
       00 00 10 00 
       00 00 01 00 
       22 5F 04 89 
       01 00       
044F80 01 00 00 10 0303*   	dl 1, 16, 16, 256, fn_turret_104, 394
       00 00 10 00 
       00 00 01 00 
       3B 5F 04 8A 
       01 00       
044F92 01 00 00 10 0304*   	dl 1, 16, 16, 256, fn_turret_112, 395
       00 00 10 00 
       00 00 01 00 
       54 5F 04 8B 
       01 00       
044FA4 01 00 00 10 0305*   	dl 1, 16, 16, 256, fn_turret_120, 396
       00 00 10 00 
       00 00 01 00 
       6D 5F 04 8C 
       01 00       
044FB6 01 00 00 10 0306*   	dl 1, 16, 16, 256, fn_turret_128, 397
       00 00 10 00 
       00 00 01 00 
       86 5F 04 8D 
       01 00       
044FC8 01 00 00 10 0307*   	dl 1, 16, 16, 256, fn_turret_136, 398
       00 00 10 00 
       00 00 01 00 
       9F 5F 04 8E 
       01 00       
044FDA 01 00 00 10 0308*   	dl 1, 16, 16, 256, fn_turret_144, 399
       00 00 10 00 
       00 00 01 00 
       B8 5F 04 8F 
       01 00       
044FEC 01 00 00 10 0309*   	dl 1, 16, 16, 256, fn_turret_152, 400
       00 00 10 00 
       00 00 01 00 
       D1 5F 04 90 
       01 00       
044FFE 01 00 00 10 0310*   	dl 1, 16, 16, 256, fn_turret_160, 401
       00 00 10 00 
       00 00 01 00 
       EA 5F 04 91 
       01 00       
045010 01 00 00 10 0311*   	dl 1, 16, 16, 256, fn_turret_168, 402
       00 00 10 00 
       00 00 01 00 
       03 60 04 92 
       01 00       
045022 01 00 00 10 0312*   	dl 1, 16, 16, 256, fn_turret_176, 403
       00 00 10 00 
       00 00 01 00 
       1C 60 04 93 
       01 00       
045034 01 00 00 10 0313*   	dl 1, 16, 16, 256, fn_turret_184, 404
       00 00 10 00 
       00 00 01 00 
       35 60 04 94 
       01 00       
045046 01 00 00 10 0314*   	dl 1, 16, 16, 256, fn_turret_192, 405
       00 00 10 00 
       00 00 01 00 
       4E 60 04 95 
       01 00       
045058 01 00 00 10 0315*   	dl 1, 16, 16, 256, fn_turret_200, 406
       00 00 10 00 
       00 00 01 00 
       67 60 04 96 
       01 00       
04506A 01 00 00 10 0316*   	dl 1, 16, 16, 256, fn_turret_208, 407
       00 00 10 00 
       00 00 01 00 
       80 60 04 97 
       01 00       
04507C 01 00 00 10 0317*   	dl 1, 16, 16, 256, fn_turret_216, 408
       00 00 10 00 
       00 00 01 00 
       99 60 04 98 
       01 00       
04508E 01 00 00 10 0318*   	dl 1, 16, 16, 256, fn_turret_224, 409
       00 00 10 00 
       00 00 01 00 
       B2 60 04 99 
       01 00       
0450A0 01 00 00 10 0319*   	dl 1, 16, 16, 256, fn_turret_232, 410
       00 00 10 00 
       00 00 01 00 
       CB 60 04 9A 
       01 00       
0450B2 01 00 00 10 0320*   	dl 1, 16, 16, 256, fn_turret_240, 411
       00 00 10 00 
       00 00 01 00 
       E4 60 04 9B 
       01 00       
0450C4 01 00 00 10 0321*   	dl 1, 16, 16, 256, fn_turret_248, 412
       00 00 10 00 
       00 00 01 00 
       FD 60 04 9C 
       01 00       
0450D6             0322*   
0450D6             0323*   ; files_list: ; filename:
0450D6 73 70 72 69 0324*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
0450EB 73 70 72 69 0325*   fn_crater_0: db "sprites/crater_0.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 30 
       2E 72 67 62 
       61 32 00    
045102 73 70 72 69 0326*   fn_crater_1: db "sprites/crater_1.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 31 
       2E 72 67 62 
       61 32 00    
045119 73 70 72 69 0327*   fn_crater_2: db "sprites/crater_2.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 32 
       2E 72 67 62 
       61 32 00    
045130 73 70 72 69 0328*   fn_crater_3: db "sprites/crater_3.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 33 
       2E 72 67 62 
       61 32 00    
045147 73 70 72 69 0329*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
045161 73 70 72 69 0330*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
04517B 73 70 72 69 0331*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
045195 73 70 72 69 0332*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
0451AF 73 70 72 69 0333*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
0451C9 73 70 72 69 0334*   fn_fireball_2_000: db "sprites/fireball_2_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0451E6 73 70 72 69 0335*   fn_fireball_2_008: db "sprites/fireball_2_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045203 73 70 72 69 0336*   fn_fireball_2_016: db "sprites/fireball_2_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045220 73 70 72 69 0337*   fn_fireball_2_024: db "sprites/fireball_2_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
04523D 73 70 72 69 0338*   fn_fireball_2_032: db "sprites/fireball_2_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
04525A 73 70 72 69 0339*   fn_fireball_2_040: db "sprites/fireball_2_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045277 73 70 72 69 0340*   fn_fireball_2_048: db "sprites/fireball_2_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045294 73 70 72 69 0341*   fn_fireball_2_056: db "sprites/fireball_2_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0452B1 73 70 72 69 0342*   fn_fireball_2_064: db "sprites/fireball_2_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0452CE 73 70 72 69 0343*   fn_fireball_2_072: db "sprites/fireball_2_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0452EB 73 70 72 69 0344*   fn_fireball_2_080: db "sprites/fireball_2_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045308 73 70 72 69 0345*   fn_fireball_2_088: db "sprites/fireball_2_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045325 73 70 72 69 0346*   fn_fireball_2_096: db "sprites/fireball_2_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045342 73 70 72 69 0347*   fn_fireball_2_104: db "sprites/fireball_2_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04535F 73 70 72 69 0348*   fn_fireball_2_112: db "sprites/fireball_2_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
04537C 73 70 72 69 0349*   fn_fireball_2_120: db "sprites/fireball_2_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045399 73 70 72 69 0350*   fn_fireball_2_128: db "sprites/fireball_2_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0453B6 73 70 72 69 0351*   fn_fireball_2_136: db "sprites/fireball_2_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0453D3 73 70 72 69 0352*   fn_fireball_2_144: db "sprites/fireball_2_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0453F0 73 70 72 69 0353*   fn_fireball_2_152: db "sprites/fireball_2_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
04540D 73 70 72 69 0354*   fn_fireball_2_160: db "sprites/fireball_2_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04542A 73 70 72 69 0355*   fn_fireball_2_168: db "sprites/fireball_2_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045447 73 70 72 69 0356*   fn_fireball_2_176: db "sprites/fireball_2_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045464 73 70 72 69 0357*   fn_fireball_2_184: db "sprites/fireball_2_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045481 73 70 72 69 0358*   fn_fireball_2_192: db "sprites/fireball_2_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
04549E 73 70 72 69 0359*   fn_fireball_2_200: db "sprites/fireball_2_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0454BB 73 70 72 69 0360*   fn_fireball_2_208: db "sprites/fireball_2_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0454D8 73 70 72 69 0361*   fn_fireball_2_216: db "sprites/fireball_2_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0454F5 73 70 72 69 0362*   fn_fireball_2_224: db "sprites/fireball_2_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045512 73 70 72 69 0363*   fn_fireball_2_232: db "sprites/fireball_2_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
04552F 73 70 72 69 0364*   fn_fireball_2_240: db "sprites/fireball_2_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
04554C 73 70 72 69 0365*   fn_fireball_2_248: db "sprites/fireball_2_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045569 73 70 72 69 0366*   fn_fireball_3_000: db "sprites/fireball_3_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
045586 73 70 72 69 0367*   fn_fireball_3_008: db "sprites/fireball_3_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0455A3 73 70 72 69 0368*   fn_fireball_3_016: db "sprites/fireball_3_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0455C0 73 70 72 69 0369*   fn_fireball_3_024: db "sprites/fireball_3_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0455DD 73 70 72 69 0370*   fn_fireball_3_032: db "sprites/fireball_3_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0455FA 73 70 72 69 0371*   fn_fireball_3_040: db "sprites/fireball_3_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045617 73 70 72 69 0372*   fn_fireball_3_048: db "sprites/fireball_3_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045634 73 70 72 69 0373*   fn_fireball_3_056: db "sprites/fireball_3_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045651 73 70 72 69 0374*   fn_fireball_3_064: db "sprites/fireball_3_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
04566E 73 70 72 69 0375*   fn_fireball_3_072: db "sprites/fireball_3_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
04568B 73 70 72 69 0376*   fn_fireball_3_080: db "sprites/fireball_3_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0456A8 73 70 72 69 0377*   fn_fireball_3_088: db "sprites/fireball_3_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0456C5 73 70 72 69 0378*   fn_fireball_3_096: db "sprites/fireball_3_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
0456E2 73 70 72 69 0379*   fn_fireball_3_104: db "sprites/fireball_3_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0456FF 73 70 72 69 0380*   fn_fireball_3_112: db "sprites/fireball_3_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
04571C 73 70 72 69 0381*   fn_fireball_3_120: db "sprites/fireball_3_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045739 73 70 72 69 0382*   fn_fireball_3_128: db "sprites/fireball_3_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045756 73 70 72 69 0383*   fn_fireball_3_136: db "sprites/fireball_3_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045773 73 70 72 69 0384*   fn_fireball_3_144: db "sprites/fireball_3_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045790 73 70 72 69 0385*   fn_fireball_3_152: db "sprites/fireball_3_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0457AD 73 70 72 69 0386*   fn_fireball_3_160: db "sprites/fireball_3_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0457CA 73 70 72 69 0387*   fn_fireball_3_168: db "sprites/fireball_3_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0457E7 73 70 72 69 0388*   fn_fireball_3_176: db "sprites/fireball_3_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045804 73 70 72 69 0389*   fn_fireball_3_184: db "sprites/fireball_3_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045821 73 70 72 69 0390*   fn_fireball_3_192: db "sprites/fireball_3_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
04583E 73 70 72 69 0391*   fn_fireball_3_200: db "sprites/fireball_3_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04585B 73 70 72 69 0392*   fn_fireball_3_208: db "sprites/fireball_3_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045878 73 70 72 69 0393*   fn_fireball_3_216: db "sprites/fireball_3_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045895 73 70 72 69 0394*   fn_fireball_3_224: db "sprites/fireball_3_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0458B2 73 70 72 69 0395*   fn_fireball_3_232: db "sprites/fireball_3_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0458CF 73 70 72 69 0396*   fn_fireball_3_240: db "sprites/fireball_3_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0458EC 73 70 72 69 0397*   fn_fireball_3_248: db "sprites/fireball_3_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045909 73 70 72 69 0398*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
04591F 73 70 72 69 0399*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
045935 73 70 72 69 0400*   fn_lightning_h_0: db "sprites/lightning_h_0.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       30 2E 72 67 
       62 61 32 00 
045951 73 70 72 69 0401*   fn_lightning_h_1: db "sprites/lightning_h_1.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       31 2E 72 67 
       62 61 32 00 
04596D 73 70 72 69 0402*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
04597F 73 70 72 69 0403*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
045998 73 70 72 69 0404*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0459B1 73 70 72 69 0405*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0459CA 73 70 72 69 0406*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0459E3 73 70 72 69 0407*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0459FC 73 70 72 69 0408*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045A15 73 70 72 69 0409*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045A2E 73 70 72 69 0410*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045A47 73 70 72 69 0411*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
045A60 73 70 72 69 0412*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
045A79 73 70 72 69 0413*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045A92 73 70 72 69 0414*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045AAB 73 70 72 69 0415*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045AC4 73 70 72 69 0416*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045ADD 73 70 72 69 0417*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045AF6 73 70 72 69 0418*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045B0F 73 70 72 69 0419*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045B28 73 70 72 69 0420*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045B41 73 70 72 69 0421*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045B5A 73 70 72 69 0422*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045B73 73 70 72 69 0423*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045B8C 73 70 72 69 0424*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045BA5 73 70 72 69 0425*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045BBE 73 70 72 69 0426*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045BD7 73 70 72 69 0427*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045BF0 73 70 72 69 0428*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045C09 73 70 72 69 0429*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045C22 73 70 72 69 0430*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045C3B 73 70 72 69 0431*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045C54 73 70 72 69 0432*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045C6D 73 70 72 69 0433*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045C86 73 70 72 69 0434*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045C9F 73 70 72 69 0435*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
045CB5 73 70 72 69 0436*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
045CCB 73 70 72 69 0437*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
045CE1 73 70 72 69 0438*   fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
045CFA 73 70 72 69 0439*   fn_test_stripes: db "sprites/test_stripes.rgba2",0
       74 65 73 2F 
       74 65 73 74 
       5F 73 74 72 
       69 70 65 73 
       2E 72 67 62 
       61 32 00    
045D15 73 70 72 69 0440*   fn_tile_blank: db "sprites/tile_blank.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 62 6C 61 
       6E 6B 2E 72 
       67 62 61 32 
       00          
045D2E 73 70 72 69 0441*   fn_tile_pad_0: db "sprites/tile_pad_0.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 30 2E 72 
       67 62 61 32 
       00          
045D47 73 70 72 69 0442*   fn_tile_pad_1: db "sprites/tile_pad_1.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 31 2E 72 
       67 62 61 32 
       00          
045D60 73 70 72 69 0443*   fn_tile_pad_2: db "sprites/tile_pad_2.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 32 2E 72 
       67 62 61 32 
       00          
045D79 73 70 72 69 0444*   fn_tile_pad_3: db "sprites/tile_pad_3.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 33 2E 72 
       67 62 61 32 
       00          
045D92 73 70 72 69 0445*   fn_tile_pad_4: db "sprites/tile_pad_4.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 34 2E 72 
       67 62 61 32 
       00          
045DAB 73 70 72 69 0446*   fn_tile_pad_5: db "sprites/tile_pad_5.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 35 2E 72 
       67 62 61 32 
       00          
045DC4 73 70 72 69 0447*   fn_tile_pad_6: db "sprites/tile_pad_6.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 36 2E 72 
       67 62 61 32 
       00          
045DDD 73 70 72 69 0448*   fn_tile_pad_7: db "sprites/tile_pad_7.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 37 2E 72 
       67 62 61 32 
       00          
045DF6 73 70 72 69 0449*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
045E0F 73 70 72 69 0450*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045E28 73 70 72 69 0451*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045E41 73 70 72 69 0452*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045E5A 73 70 72 69 0453*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
045E73 73 70 72 69 0454*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045E8C 73 70 72 69 0455*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045EA5 73 70 72 69 0456*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045EBE 73 70 72 69 0457*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
045ED7 73 70 72 69 0458*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
045EF0 73 70 72 69 0459*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045F09 73 70 72 69 0460*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045F22 73 70 72 69 0461*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045F3B 73 70 72 69 0462*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045F54 73 70 72 69 0463*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045F6D 73 70 72 69 0464*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045F86 73 70 72 69 0465*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045F9F 73 70 72 69 0466*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045FB8 73 70 72 69 0467*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045FD1 73 70 72 69 0468*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045FEA 73 70 72 69 0469*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
046003 73 70 72 69 0470*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
04601C 73 70 72 69 0471*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
046035 73 70 72 69 0472*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04604E 73 70 72 69 0473*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
046067 73 70 72 69 0474*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
046080 73 70 72 69 0475*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
046099 73 70 72 69 0476*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0460B2 73 70 72 69 0477*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0460CB 73 70 72 69 0478*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0460E4 73 70 72 69 0479*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0460FD 73 70 72 69 0480*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
046116             0056        include "images_ui.inc"
046116             0001*   ; Generated by make_images.py
046116             0002*   
046116             0003*   ui_num_images: equ 43
046116             0004*   
046116             0005*   ; buffer_ids:
046116             0006*   BUF_BAR_H_0: equ 0
046116             0007*   BUF_BAR_H_1: equ 1
046116             0008*   BUF_BAR_H_2: equ 2
046116             0009*   BUF_BAR_V_0: equ 3
046116             0010*   BUF_BAR_V_1: equ 4
046116             0011*   BUF_BAR_V_2: equ 5
046116             0012*   BUF_BEZEL_L: equ 6
046116             0013*   BUF_BEZEL_R: equ 7
046116             0014*   BUF_CREDITS: equ 8
046116             0015*   BUF_CTL_PANEL_L: equ 9
046116             0016*   BUF_CTL_PANEL_R: equ 10
046116             0017*   BUF_JERRY_CAN: equ 11
046116             0018*   BUF_MFD_ARMS: equ 12
046116             0019*   BUF_MFD_BEZEL: equ 13
046116             0020*   BUF_MFD_BG: equ 14
046116             0021*   BUF_MFD_GUN_0: equ 15
046116             0022*   BUF_MFD_GUN_1: equ 16
046116             0023*   BUF_MFD_GUN_2: equ 17
046116             0024*   BUF_MFD_GUN_3: equ 18
046116             0025*   BUF_MFD_GUN_4: equ 19
046116             0026*   BUF_MFD_GUN_5: equ 20
046116             0027*   BUF_MFD_MAVERICK_0: equ 21
046116             0028*   BUF_MFD_MAVERICK_1: equ 22
046116             0029*   BUF_MFD_MAVERICK_2: equ 23
046116             0030*   BUF_MFD_MAVERICK_3: equ 24
046116             0031*   BUF_MFD_MAVERICK_4: equ 25
046116             0032*   BUF_MFD_MAVERICK_5: equ 26
046116             0033*   BUF_MFD_SIDEWINDER_0: equ 27
046116             0034*   BUF_MFD_SIDEWINDER_1: equ 28
046116             0035*   BUF_MFD_SIDEWINDER_2: equ 29
046116             0036*   BUF_MFD_SIDEWINDER_3: equ 30
046116             0037*   BUF_MFD_SIDEWINDER_4: equ 31
046116             0038*   BUF_MFD_SIDEWINDER_5: equ 32
046116             0039*   BUF_MFD_SPARROW_0: equ 33
046116             0040*   BUF_MFD_SPARROW_1: equ 34
046116             0041*   BUF_MFD_SPARROW_2: equ 35
046116             0042*   BUF_MFD_SPARROW_3: equ 36
046116             0043*   BUF_MFD_SPARROW_4: equ 37
046116             0044*   BUF_MFD_SPARROW_5: equ 38
046116             0045*   BUF_POWER: equ 39
046116             0046*   BUF_SHIELD: equ 40
046116             0047*   BUF_SPLASH_BG: equ 41
046116             0048*   BUF_SPLASH_LOGO: equ 42
046116             0049*   
046116             0050*   ui_image_list: ; type; width; height; size; filename; bufferId:
046116 01 00 00 80 0051*   	dl 1, 128, 8, 1024, fn_bar_h_0, 0
       00 00 08 00 
       00 00 04 00 
       1C 64 04 00 
       00 00       
046128 01 00 00 80 0052*   	dl 1, 128, 8, 1024, fn_bar_h_1, 1
       00 00 08 00 
       00 00 04 00 
       2D 64 04 01 
       00 00       
04613A 01 00 00 80 0053*   	dl 1, 128, 8, 1024, fn_bar_h_2, 2
       00 00 08 00 
       00 00 04 00 
       3E 64 04 02 
       00 00       
04614C 01 00 00 08 0054*   	dl 1, 8, 128, 1024, fn_bar_v_0, 3
       00 00 80 00 
       00 00 04 00 
       4F 64 04 03 
       00 00       
04615E 01 00 00 08 0055*   	dl 1, 8, 128, 1024, fn_bar_v_1, 4
       00 00 80 00 
       00 00 04 00 
       60 64 04 04 
       00 00       
046170 01 00 00 08 0056*   	dl 1, 8, 128, 1024, fn_bar_v_2, 5
       00 00 80 00 
       00 00 04 00 
       71 64 04 05 
       00 00       
046182 01 00 00 80 0057*   	dl 1, 128, 304, 38912, fn_bezel_l, 6
       00 00 30 01 
       00 00 98 00 
       82 64 04 06 
       00 00       
046194 01 00 00 80 0058*   	dl 1, 128, 304, 38912, fn_bezel_r, 7
       00 00 30 01 
       00 00 98 00 
       93 64 04 07 
       00 00       
0461A6 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_credits, 8
       00 00 10 00 
       00 00 01 00 
       A4 64 04 08 
       00 00       
0461B8 01 00 00 80 0060*   	dl 1, 128, 128, 16384, fn_ctl_panel_l, 9
       00 00 80 00 
       00 00 40 00 
       B5 64 04 09 
       00 00       
0461CA 01 00 00 80 0061*   	dl 1, 128, 128, 16384, fn_ctl_panel_r, 10
       00 00 80 00 
       00 00 40 00 
       CA 64 04 0A 
       00 00       
0461DC 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_jerry_can, 11
       00 00 10 00 
       00 00 01 00 
       DF 64 04 0B 
       00 00       
0461EE 01 00 00 24 0063*   	dl 1, 36, 18, 648, fn_mfd_arms, 12
       00 00 12 00 
       00 88 02 00 
       F2 64 04 0C 
       00 00       
046200 01 00 00 60 0064*   	dl 1, 96, 96, 9216, fn_mfd_bezel, 13
       00 00 60 00 
       00 00 24 00 
       04 65 04 0D 
       00 00       
046212 01 00 00 40 0065*   	dl 1, 64, 64, 4096, fn_mfd_bg, 14
       00 00 40 00 
       00 00 10 00 
       17 65 04 0E 
       00 00       
046224 01 00 00 01 0066*   	dl 1, 1, 6, 6, fn_mfd_gun_0, 15
       00 00 06 00 
       00 06 00 00 
       27 65 04 0F 
       00 00       
046236 01 00 00 01 0067*   	dl 1, 1, 6, 6, fn_mfd_gun_1, 16
       00 00 06 00 
       00 06 00 00 
       3A 65 04 10 
       00 00       
046248 01 00 00 01 0068*   	dl 1, 1, 6, 6, fn_mfd_gun_2, 17
       00 00 06 00 
       00 06 00 00 
       4D 65 04 11 
       00 00       
04625A 01 00 00 01 0069*   	dl 1, 1, 6, 6, fn_mfd_gun_3, 18
       00 00 06 00 
       00 06 00 00 
       60 65 04 12 
       00 00       
04626C 01 00 00 01 0070*   	dl 1, 1, 6, 6, fn_mfd_gun_4, 19
       00 00 06 00 
       00 06 00 00 
       73 65 04 13 
       00 00       
04627E 01 00 00 01 0071*   	dl 1, 1, 6, 6, fn_mfd_gun_5, 20
       00 00 06 00 
       00 06 00 00 
       86 65 04 14 
       00 00       
046290 01 00 00 04 0072*   	dl 1, 4, 6, 24, fn_mfd_maverick_0, 21
       00 00 06 00 
       00 18 00 00 
       99 65 04 15 
       00 00       
0462A2 01 00 00 04 0073*   	dl 1, 4, 6, 24, fn_mfd_maverick_1, 22
       00 00 06 00 
       00 18 00 00 
       B1 65 04 16 
       00 00       
0462B4 01 00 00 04 0074*   	dl 1, 4, 6, 24, fn_mfd_maverick_2, 23
       00 00 06 00 
       00 18 00 00 
       C9 65 04 17 
       00 00       
0462C6 01 00 00 04 0075*   	dl 1, 4, 6, 24, fn_mfd_maverick_3, 24
       00 00 06 00 
       00 18 00 00 
       E1 65 04 18 
       00 00       
0462D8 01 00 00 04 0076*   	dl 1, 4, 6, 24, fn_mfd_maverick_4, 25
       00 00 06 00 
       00 18 00 00 
       F9 65 04 19 
       00 00       
0462EA 01 00 00 04 0077*   	dl 1, 4, 6, 24, fn_mfd_maverick_5, 26
       00 00 06 00 
       00 18 00 00 
       11 66 04 1A 
       00 00       
0462FC 01 00 00 03 0078*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_0, 27
       00 00 06 00 
       00 12 00 00 
       29 66 04 1B 
       00 00       
04630E 01 00 00 03 0079*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_1, 28
       00 00 06 00 
       00 12 00 00 
       43 66 04 1C 
       00 00       
046320 01 00 00 03 0080*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_2, 29
       00 00 06 00 
       00 12 00 00 
       5D 66 04 1D 
       00 00       
046332 01 00 00 03 0081*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_3, 30
       00 00 06 00 
       00 12 00 00 
       77 66 04 1E 
       00 00       
046344 01 00 00 03 0082*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_4, 31
       00 00 06 00 
       00 12 00 00 
       91 66 04 1F 
       00 00       
046356 01 00 00 03 0083*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_5, 32
       00 00 06 00 
       00 12 00 00 
       AB 66 04 20 
       00 00       
046368 01 00 00 03 0084*   	dl 1, 3, 7, 21, fn_mfd_sparrow_0, 33
       00 00 07 00 
       00 15 00 00 
       C5 66 04 21 
       00 00       
04637A 01 00 00 03 0085*   	dl 1, 3, 7, 21, fn_mfd_sparrow_1, 34
       00 00 07 00 
       00 15 00 00 
       DC 66 04 22 
       00 00       
04638C 01 00 00 03 0086*   	dl 1, 3, 7, 21, fn_mfd_sparrow_2, 35
       00 00 07 00 
       00 15 00 00 
       F3 66 04 23 
       00 00       
04639E 01 00 00 03 0087*   	dl 1, 3, 7, 21, fn_mfd_sparrow_3, 36
       00 00 07 00 
       00 15 00 00 
       0A 67 04 24 
       00 00       
0463B0 01 00 00 03 0088*   	dl 1, 3, 7, 21, fn_mfd_sparrow_4, 37
       00 00 07 00 
       00 15 00 00 
       21 67 04 25 
       00 00       
0463C2 01 00 00 03 0089*   	dl 1, 3, 7, 21, fn_mfd_sparrow_5, 38
       00 00 07 00 
       00 15 00 00 
       38 67 04 26 
       00 00       
0463D4 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_power, 39
       00 00 10 00 
       00 00 01 00 
       4F 67 04 27 
       00 00       
0463E6 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_shield, 40
       00 00 10 00 
       00 00 01 00 
       5E 67 04 28 
       00 00       
0463F8 01 00 00 40 0092*   	dl 1, 320, 240, 76800, fn_splash_bg, 41
       01 00 F0 00 
       00 00 2C 01 
       6E 67 04 29 
       00 00       
04640A 01 00 00 A0 0093*   	dl 1, 160, 106, 16960, fn_splash_logo, 42
       00 00 6A 00 
       00 40 42 00 
       81 67 04 2A 
       00 00       
04641C             0094*   
04641C             0095*   ; files_list: ; filename:
04641C 75 69 2F 62 0096*   fn_bar_h_0: db "ui/bar_h_0.rgba2",0
       61 72 5F 68 
       5F 30 2E 72 
       67 62 61 32 
       00          
04642D 75 69 2F 62 0097*   fn_bar_h_1: db "ui/bar_h_1.rgba2",0
       61 72 5F 68 
       5F 31 2E 72 
       67 62 61 32 
       00          
04643E 75 69 2F 62 0098*   fn_bar_h_2: db "ui/bar_h_2.rgba2",0
       61 72 5F 68 
       5F 32 2E 72 
       67 62 61 32 
       00          
04644F 75 69 2F 62 0099*   fn_bar_v_0: db "ui/bar_v_0.rgba2",0
       61 72 5F 76 
       5F 30 2E 72 
       67 62 61 32 
       00          
046460 75 69 2F 62 0100*   fn_bar_v_1: db "ui/bar_v_1.rgba2",0
       61 72 5F 76 
       5F 31 2E 72 
       67 62 61 32 
       00          
046471 75 69 2F 62 0101*   fn_bar_v_2: db "ui/bar_v_2.rgba2",0
       61 72 5F 76 
       5F 32 2E 72 
       67 62 61 32 
       00          
046482 75 69 2F 62 0102*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
046493 75 69 2F 62 0103*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
0464A4 75 69 2F 63 0104*   fn_credits: db "ui/credits.rgba2",0
       72 65 64 69 
       74 73 2E 72 
       67 62 61 32 
       00          
0464B5 75 69 2F 63 0105*   fn_ctl_panel_l: db "ui/ctl_panel_l.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
0464CA 75 69 2F 63 0106*   fn_ctl_panel_r: db "ui/ctl_panel_r.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
0464DF 75 69 2F 6A 0107*   fn_jerry_can: db "ui/jerry_can.rgba2",0
       65 72 72 79 
       5F 63 61 6E 
       2E 72 67 62 
       61 32 00    
0464F2 75 69 2F 6D 0108*   fn_mfd_arms: db "ui/mfd_arms.rgba2",0
       66 64 5F 61 
       72 6D 73 2E 
       72 67 62 61 
       32 00       
046504 75 69 2F 6D 0109*   fn_mfd_bezel: db "ui/mfd_bezel.rgba2",0
       66 64 5F 62 
       65 7A 65 6C 
       2E 72 67 62 
       61 32 00    
046517 75 69 2F 6D 0110*   fn_mfd_bg: db "ui/mfd_bg.rgba2",0
       66 64 5F 62 
       67 2E 72 67 
       62 61 32 00 
046527 75 69 2F 6D 0111*   fn_mfd_gun_0: db "ui/mfd_gun_0.rgba2",0
       66 64 5F 67 
       75 6E 5F 30 
       2E 72 67 62 
       61 32 00    
04653A 75 69 2F 6D 0112*   fn_mfd_gun_1: db "ui/mfd_gun_1.rgba2",0
       66 64 5F 67 
       75 6E 5F 31 
       2E 72 67 62 
       61 32 00    
04654D 75 69 2F 6D 0113*   fn_mfd_gun_2: db "ui/mfd_gun_2.rgba2",0
       66 64 5F 67 
       75 6E 5F 32 
       2E 72 67 62 
       61 32 00    
046560 75 69 2F 6D 0114*   fn_mfd_gun_3: db "ui/mfd_gun_3.rgba2",0
       66 64 5F 67 
       75 6E 5F 33 
       2E 72 67 62 
       61 32 00    
046573 75 69 2F 6D 0115*   fn_mfd_gun_4: db "ui/mfd_gun_4.rgba2",0
       66 64 5F 67 
       75 6E 5F 34 
       2E 72 67 62 
       61 32 00    
046586 75 69 2F 6D 0116*   fn_mfd_gun_5: db "ui/mfd_gun_5.rgba2",0
       66 64 5F 67 
       75 6E 5F 35 
       2E 72 67 62 
       61 32 00    
046599 75 69 2F 6D 0117*   fn_mfd_maverick_0: db "ui/mfd_maverick_0.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       30 2E 72 67 
       62 61 32 00 
0465B1 75 69 2F 6D 0118*   fn_mfd_maverick_1: db "ui/mfd_maverick_1.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       31 2E 72 67 
       62 61 32 00 
0465C9 75 69 2F 6D 0119*   fn_mfd_maverick_2: db "ui/mfd_maverick_2.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       32 2E 72 67 
       62 61 32 00 
0465E1 75 69 2F 6D 0120*   fn_mfd_maverick_3: db "ui/mfd_maverick_3.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       33 2E 72 67 
       62 61 32 00 
0465F9 75 69 2F 6D 0121*   fn_mfd_maverick_4: db "ui/mfd_maverick_4.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       34 2E 72 67 
       62 61 32 00 
046611 75 69 2F 6D 0122*   fn_mfd_maverick_5: db "ui/mfd_maverick_5.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       35 2E 72 67 
       62 61 32 00 
046629 75 69 2F 6D 0123*   fn_mfd_sidewinder_0: db "ui/mfd_sidewinder_0.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 30 2E 
       72 67 62 61 
       32 00       
046643 75 69 2F 6D 0124*   fn_mfd_sidewinder_1: db "ui/mfd_sidewinder_1.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 31 2E 
       72 67 62 61 
       32 00       
04665D 75 69 2F 6D 0125*   fn_mfd_sidewinder_2: db "ui/mfd_sidewinder_2.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 32 2E 
       72 67 62 61 
       32 00       
046677 75 69 2F 6D 0126*   fn_mfd_sidewinder_3: db "ui/mfd_sidewinder_3.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 33 2E 
       72 67 62 61 
       32 00       
046691 75 69 2F 6D 0127*   fn_mfd_sidewinder_4: db "ui/mfd_sidewinder_4.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 34 2E 
       72 67 62 61 
       32 00       
0466AB 75 69 2F 6D 0128*   fn_mfd_sidewinder_5: db "ui/mfd_sidewinder_5.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 35 2E 
       72 67 62 61 
       32 00       
0466C5 75 69 2F 6D 0129*   fn_mfd_sparrow_0: db "ui/mfd_sparrow_0.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 30 
       2E 72 67 62 
       61 32 00    
0466DC 75 69 2F 6D 0130*   fn_mfd_sparrow_1: db "ui/mfd_sparrow_1.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 31 
       2E 72 67 62 
       61 32 00    
0466F3 75 69 2F 6D 0131*   fn_mfd_sparrow_2: db "ui/mfd_sparrow_2.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 32 
       2E 72 67 62 
       61 32 00    
04670A 75 69 2F 6D 0132*   fn_mfd_sparrow_3: db "ui/mfd_sparrow_3.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 33 
       2E 72 67 62 
       61 32 00    
046721 75 69 2F 6D 0133*   fn_mfd_sparrow_4: db "ui/mfd_sparrow_4.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 34 
       2E 72 67 62 
       61 32 00    
046738 75 69 2F 6D 0134*   fn_mfd_sparrow_5: db "ui/mfd_sparrow_5.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 35 
       2E 72 67 62 
       61 32 00    
04674F 75 69 2F 70 0135*   fn_power: db "ui/power.rgba2",0
       6F 77 65 72 
       2E 72 67 62 
       61 32 00    
04675E 75 69 2F 73 0136*   fn_shield: db "ui/shield.rgba2",0
       68 69 65 6C 
       64 2E 72 67 
       62 61 32 00 
04676E 75 69 2F 73 0137*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
046781 75 69 2F 73 0138*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
046796             0057        include "levels.inc"
046796 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
046800             0002*   
046800             0003*   ; tileset indices
046800             0004*   tiles_dg: equ 0
046800             0005*   ; tiles_xevious: equ 1
046800 00 00 00    0006*   tileset_ptr_idx: dl 0
046803             0007*   tileset_ptrs:
046803             0008*       ; dl tiles_xevious_levels
046803 F3 68 04    0009*       dl tileset_00_levels
046806 00 00 00    0010*   tileset_ptrs_end: dl 0 ; list terminator
046809             0011*   
046809             0012*   ; get a pointer to the current tileset
046809             0013*   ; inputs: tileset_ptr_idx
046809             0014*   ; returns: ix = pointer to tileset levels lut
046809             0015*   get_tileset_ptr:
046809 3A 00 68 04 0016*       ld a,(tileset_ptr_idx)
04680D 57          0017*       ld d,a ; d = tileset index
04680E 1E 03       0018*       ld e,3 ; three bytes per index record
046810 ED 5C       0019*       mlt de ; offset into tileset_ptrs lut
046812 DD 21 03 68 0020*       ld ix,tileset_ptrs
       04          
046817 DD 19       0021*       add ix,de ; ix = pointer to tileset_ptrs record
046819 C9          0022*       ret
04681A             0023*   ; end get_tileset_ptr
04681A             0024*   
04681A             0025*   ; intialize a tileset
04681A             0026*   ; inputs: a = index into tileset_ptrs
04681A             0027*   init_tileset:
04681A 32 00 68 04 0028*       ld (tileset_ptr_idx),a ; store new tileset index
04681E CD 09 68 04 0029*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
046822 DD 37 00    0030*       ld ix,(ix) ; ix = pointer to tileset levels lut
046825 DD 7E FF    0031*       ld a,(ix-1) ; number of levels in the tileset
046828 32 58 68 04 0032*       ld (num_levels),a
04682C AF          0033*       xor a ; reset current level to zero
04682D 32 57 68 04 0034*       ld (cur_level),a
046831 C3 89 68 04 0035*       jp init_level
046835             0036*   ; end init_tileset
046835             0037*   
046835             0038*   next_tileset:
046835 21 00 68 04 0039*       ld hl,tileset_ptr_idx
046839 34          0040*       inc (hl) ; bump to next index
04683A CD 09 68 04 0041*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
04683E DD 27 00    0042*       ld hl,(ix) ; ix = pointer to tileset levels lut
046841             0043*       sign_hlu ; check for list terminator (0)
046841 19          0001*M1     add hl,de ; 1 cycle
046842 B7          0002*M1     or a ; clear flags ; 1 cycle
046843 ED 52       0003*M1     sbc hl,de ; 2 cycles
046845             0004*M1     ; 4 cycles total
046845 C2 53 68 04 0044*       jp nz,@F ; not end of list
046849 3E FF       0045*       ld a,-1 ; will wrap around to zero on the next iteration
04684B 32 00 68 04 0046*       ld (tileset_ptr_idx),a
04684F C3 35 68 04 0047*       jp next_tileset ; try again
046853             0048*   @@:
046853 C3 1A 68 04 0049*       jp init_tileset
046857             0050*   ; end next_tileset
046857             0051*   
046857 00          0052*   cur_level: db 0
046858 00          0053*   num_levels: db 0
046859             0054*   
046859             0055*   ; get a pointer to the current level lookup record
046859             0056*   ; inputs: tileset_ptr_idx, cur_level
046859             0057*   ; returns: ix = pointer to level definition
046859             0058*   get_level_ptr:
046859 CD 09 68 04 0059*       call get_tileset_ptr
04685D DD 37 00    0060*       ld ix,(ix) ; ix = pointer to tileset levels lut
046860 3A 57 68 04 0061*       ld a,(cur_level)
046864 57          0062*       ld d,a ; d = level index
046865 1E 03       0063*       ld e,3 ; three bytes per level record
046867 ED 5C       0064*       mlt de ; offset into tileset levels lut
046869 DD 19       0065*       add ix,de ; ix = pointer to level record
04686B C9          0066*       ret
04686C             0067*   ; end get_level_ptr
04686C             0068*   
04686C             0069*   ; advance to the next level in the current tileset
04686C             0070*   ; inputs: tileset_ptr_idx, cur_level
04686C             0071*   next_level:
04686C 21 57 68 04 0072*       ld hl,cur_level
046870 34          0073*       inc (hl) ; bump to next level
046871 CD 59 68 04 0074*       call get_level_ptr ; ix points to current level lookup record
046875 DD 27 00    0075*       ld hl,(ix) ; hl = pointer to next level lookup record
046878             0076*       sign_hlu ; check for list terminator (0)
046878 19          0001*M1     add hl,de ; 1 cycle
046879 B7          0002*M1     or a ; clear flags ; 1 cycle
04687A ED 52       0003*M1     sbc hl,de ; 2 cycles
04687C             0004*M1     ; 4 cycles total
04687C C2 89 68 04 0077*       jp nz,@F ; not end of list
046880 AF          0078*       xor a ; reset level to zero
046881 32 57 68 04 0079*       ld (cur_level),a
046885 C3 35 68 04 0080*       jp next_tileset ; try next tileset
046889             0081*   @@: ; fall through to init_level
046889             0082*   ; end next_level
046889             0083*   
046889             0084*   ; inputs: ix pointed to tileset level definition
046889             0085*   init_level:
046889 CD 59 68 04 0086*       call get_level_ptr ; ix points to level lookup record
04688D DD 37 00    0087*       ld ix,(ix) ; ix points to level definition
046890             0088*   ; set tiles_cols
046890 DD 7E 00    0089*       ld a,(ix+0)
046893 32 06 7B 04 0090*       ld (tiles_cols),a
046897             0091*   ; set tiles_row counter
046897 DD 7E 01    0092*       ld a,(ix+1)
04689A 32 03 7B 04 0093*       ld (tiles_row),a
04689E             0094*   ; set cur_baseBufferId
04689E DD 27 04    0095*       ld hl,(ix+4)
0468A1 22 07 7B 04 0096*       ld (cur_baseBufferId),hl
0468A5             0097*   ; set tiles_row_defs
0468A5 ED 32 07    0098*       lea ix,ix+7 ; ix points to definition of first tile of first row
0468A8 DD 22 00 7B 0099*       ld (tiles_row_defs),ix
       04          
0468AD             0100*   ; print_level:
0468AD             0101*   level_x: equ 48
0468AD             0102*   level_y: equ 0
0468AD 0E 30       0103*       ld c,level_x
0468AF 06 00       0104*       ld b,level_y
0468B1 CD 37 16 04 0105*       call vdu_move_cursor
0468B5 CD 00 01 04 0106*       call printInline
0468B9 4C 65 76 65 0107*       asciz "Level: "
       6C 3A 20 00 
0468C1 3A 57 68 04 0108*       ld a,(cur_level)
0468C5 CD 00 86 04 0109*       call printHexA
0468C9             0110*       ; call printNewLine
0468C9             0111*       ; ld hl,(cur_baseBufferId)
0468C9             0112*       ; call printDec
0468C9             0113*   
0468C9             0114*   ; draw initial background tiles
0468C9 21 00 04 00 0115*       ld hl,BUF_BG_STARS_0
0468CD CD 38 17 04 0116*       call vdu_buff_select
0468D1 01 00 00 00 0117*       ld bc,0
0468D5 11 00 00 00 0118*       ld de,field_top
0468D9 CD 20 1B 04 0119*       call vdu_plot_bmp
0468DD             0120*   
0468DD 21 04 04 00 0121*       ld hl,BUF_BG_STARS_4
0468E1 CD 38 17 04 0122*       call vdu_buff_select
0468E5 01 00 00 00 0123*       ld bc,0
0468E9 11 00 01 00 0124*       ld de,field_top+256
0468ED CD 20 1B 04 0125*       call vdu_plot_bmp
0468F1             0126*   
0468F1 C9          0127*       ret
0468F2             0128*   ; end init_level
0468F2             0058        include "levels_tileset_0.inc"
0468F2             0001*   ; Generated from tiles/dg/dg0_00.tmx
0468F2             0002*   
0468F2 01          0003*   tileset_00_num_levels: db 1
0468F3             0004*   
0468F3             0005*   tileset_00_levels:
0468F3 F9 68 04    0006*   	dl tileset_00_level_00
0468F6 00 00 00    0007*   	dl 0 ; list terminator
0468F9             0008*   
0468F9             0009*   tileset_00_level_00: ; Level 0
0468F9 10          0010*   	db 16          ; num cols
0468FA 20 00 00    0011*   	dl 32          ; num rows
0468FD 00 02 00    0012*   	dl 512 ; base bufferId
046900 00 00 00 00 0013*   	db 000,000,000,000,000,000,000,005,000,000,000,001,000,000,000,000
       00 00 00 05 
       00 00 00 01 
       00 00 00 00 
046910 00 00 00 00 0014*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046920 00 00 00 00 0015*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046930 00 00 00 00 0016*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046940 00 00 00 00 0017*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046950 00 00 00 00 0018*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046960 00 00 00 00 0019*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046970 00 00 00 00 0020*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046980 00 00 00 00 0021*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046990 00 00 00 00 0022*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0469A0 00 00 00 00 0023*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0469B0 00 00 00 00 0024*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0469C0 00 00 00 00 0025*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0469D0 00 00 00 00 0026*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0469E0 00 00 00 00 0027*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0469F0 00 00 00 00 0028*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A00 00 00 00 00 0029*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A10 00 00 00 00 0030*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A20 00 00 00 00 0031*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A30 00 00 00 00 0032*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A40 00 00 00 00 0033*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A50 00 00 00 00 0034*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A60 00 00 00 00 0035*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A70 00 00 00 00 0036*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A80 00 00 00 00 0037*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046A90 00 00 00 00 0038*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046AA0 00 00 00 00 0039*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046AB0 00 00 00 00 0040*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046AC0 00 00 00 00 0041*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046AD0 00 00 00 00 0042*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046AE0 00 00 00 00 0043*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046AF0 00 00 00 00 0044*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046B00             0059        ; include "levels_xevious.inc"
046B00             0060        include "player.inc"
046B00             0001*       align 256
046B00             0002*   
046B00             0003*   ; ######## GAME STATE VARIABLES #######
046B00 12 6B 04    0004*   player_state:  dl player_alive ; Player state variable
046B03 00 00 00    0005*   player_score: dl 0 ; integer
046B06 03          0006*   player_ships: db 3 ; integer
046B07             0007*   speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
046B07             0008*   player_lasers_max: equ 4
046B07             0009*   
046B07             0010*   do_player:
046B07 2A 00 6B 04 0011*       ld hl,(player_state)
046B0B             0012*       CALL_HL                ; Call the corresponding player state
046B0B 01 11 6B 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
046B0F C5          0002*M1     push bc ; which constitutes the return address
046B10 E9          0003*M1     jp (hl) ; Jump to the address in HL
046B11 C9          0013*       ret
046B12             0014*   
046B12             0015*   player_alive:
046B12 CD C5 6B 04 0016*       call player_input     ; Handle player input
046B16 CD 8E 6C 04 0017*       call player_move_weapons    ; Handle laser movement and collision detection
046B1A C9          0018*       ret
046B1B             0019*   
046B1B             0020*   player_dead:
046B1B CD 8E 6C 04 0021*       call player_move_weapons    ; Handle laser movement and collision detection
046B1F C9          0022*       ret
046B20             0023*   
046B20             0024*   player_defaults:
046B20 05          0025*       db player               ; type
046B21 6F 01 00    0026*       dl BUF_SHIP_0L          ; base_bufferId
046B24 07 6B 04    0027*       dl do_player            ; move_program
046B27 40          0028*       db %01000000            ; collisions bit 6 signals sprite alive
046B28 10          0029*       db 16                   ; dim_x
046B29 10          0030*       db 16                   ; dim_y
046B2A 01          0031*       db 1                    ; num_orientations
046B2B 01          0032*       db 1                    ; num_animations
046B2C 00          0033*       db 0                    ; animation
046B2D 00          0034*       db 0                    ; animation_timer
046B2E 00          0035*       db 0                    ; move_timer
046B2F 00          0036*       db 0                    ; move_step
046B30 00          0037*       db 0                    ; points
046B31 00          0038*       db 0                    ; shield_damage
046B32 00          0039*       db 0                    ; frame
046B33             0040*   
046B33             0041*   
046B33             0042*   ; set initial player position
046B33             0043*   ; inputs: none,everything is hardcoded
046B33             0044*   ; outputs: player_x/y set to bottom-left corner of screen
046B33             0045*   ; destroys: a
046B33             0046*   player_init:
046B33 3A E2 70 04 0047*       ld a,(player_shields_max)
046B37 32 E1 70 04 0048*       ld (player_shields),a
046B3B 3A AB 6E 04 0049*       ld a,(laser_power_max)
046B3F 32 A9 6E 04 0050*       ld (laser_power),a
046B43 3A 63 6F 04 0051*       ld a,(player_fuel_max)
046B47 32 61 6F 04 0052*       ld (player_fuel),a
046B4B 21 00 00 00 0053*       ld hl,0
046B4F 22 03 6B 04 0054*       ld (player_score),hl
046B53 AF          0055*       xor a
046B54 32 AA 6E 04 0056*       ld (laser_power_last),a ; set to zero so draw_laser will update
046B58 32 E3 70 04 0057*       ld (player_shields_last),a ; set to zero so draw_shields will update
046B5C 32 62 6F 04 0058*       ld (player_fuel_last),a ; set to zero so draw_fuel will update
046B60 3E 03       0059*       ld a,3
046B62 32 06 6B 04 0060*       ld (player_ships),a
046B66             0061*   
046B66             0062*   ; set player sprite record with defaults
046B66 DD 21 2A 92 0063*       ld ix,player_begin
       04          
046B6B 21 20 6B 04 0064*       ld hl,player_defaults
046B6F 01 00 00 00 0065*       ld bc,0*256
046B73 11 00 70 01 0066*       ld de,sprite_bottom*256
046B77 3E 01       0067*       ld a,1
046B79 CD 2C 83 04 0068*       call spawn_sprite_from_coords
046B7D D2 A8 6B 04 0069*       jp nc,@draw ; player sprite record already exists so skip to draw
046B81 DD CB 16 BE 0070*       res 7,(ix+sprite_type) ; clear just spawned flag
046B85             0071*   
046B85             0072*   ; load sprite frames
046B85 DD 7E 00    0073*       ld a,(ix+sprite_id)
046B88 CD 00 1C 04 0074*       call vdu_sprite_select
046B8C CD 13 1C 04 0075*       call vdu_sprite_clear_frames
046B90 21 6F 01 00 0076*       ld hl,BUF_SHIP_0L
046B94 CD 55 1D 04 0077*       call vdu_sprite_add_buff
046B98 21 70 01 00 0078*       ld hl,BUF_SHIP_1C
046B9C CD 55 1D 04 0079*       call vdu_sprite_add_buff
046BA0 21 71 01 00 0080*       ld hl,BUF_SHIP_2R
046BA4 CD 55 1D 04 0081*       call vdu_sprite_add_buff
046BA8             0082*   
046BA8             0083*   @draw:
046BA8 01 00 00 00 0084*       ld bc,0*256
046BAC 11 00 70 01 0085*       ld de,sprite_bottom*256
046BB0 CD CC 1C 04 0086*       call vdu_sprite_move_abs168
046BB4 CD 76 1C 04 0087*       call vdu_sprite_show
046BB8 21 12 6B 04 0088*       ld hl,player_alive
046BBC 22 00 6B 04 0089*       ld (player_state),hl
046BC0 DD CB 1D F6 0090*       set sprite_alive,(ix+sprite_collisions)
046BC4 C9          0091*       ret
046BC5             0092*   ; end player_init
046BC5             0093*   
046BC5             0094*   ; UART ports for reading joystick input
046BC5             0095*   ; bit tests: 0 means actuated, 1 means not actuated
046BC5             0096*   portC: 	EQU 	$9E ; reads dpad input
046BC5             0097*   joy1_u: equ 1
046BC5             0098*   joy1_d: equ 3
046BC5             0099*   joy1_l: equ 5
046BC5             0100*   joy1_r: equ 7
046BC5             0101*   portD: 	EQU 	$A2 ; reads buttons
046BC5             0102*   btn1_a: equ 5
046BC5             0103*   
046BC5             0104*   ; process player keyboard input, set player bitmap
046BC5             0105*   ; velocities and draw player bitmap at updated coordinates
046BC5             0106*   ; Inputs: player_x/y set at desired position
046BC5             0107*   ; Returns: player bitmap drawn at updated position
046BC5             0108*   ; Destroys: probably everything except maybe iy
046BC5             0109*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
046BC5             0110*   ; TODO: requires sprite implementation
046BC5             0111*   player_input:
046BC5             0112*   ; point to player sprite record
046BC5 FD 21 2A 92 0113*       ld iy,player_begin
       04          
046BCA FD 22 6F 82 0114*       ld (table_pointer),iy
       04          
046BCF             0115*   ; reset player component velocities to zero as the default
046BCF 21 00 00 00 0116*       ld hl,0
046BD3 FD 2F 07    0117*       ld (iy+sprite_xvel),hl
046BD6 FD 2F 0A    0118*       ld (iy+sprite_yvel),hl
046BD9             0119*   ; make ship the active sprite
046BD9 FD 7E 00    0120*       ld a,(iy+sprite_id)
046BDC CD 00 1C 04 0121*       call vdu_sprite_select
046BE0             0122*   ; check for keypresses and branch accordingly
046BE0             0123*       MOSCALL    mos_getkbmap ;ix = pointer to MOS virtual keys table
046BE0 3E 1E       0001*M1 			LD	A, function
046BE2 5B CF       0002*M1 			RST.LIL	08h
046BE4             0124*   ; do player directional input
046BE4 AF          0125*       xor a ; clear flags
046BE5 DB 9E       0126*       in a,(portC) ; read dpad input
046BE7 57          0127*       ld d,a ; save dpad input
046BE8 3E 01       0128*       ld a,1 ; set ship's default animation to center
046BEA             0129*   ; 26 Left: move player left
046BEA DD CB 03 4E 0130*       bit 1,(ix+3)
046BEE C2 FC 6B 04 0131*       jp nz,@F
046BF2             0132*   ; test dpad left
046BF2 CB 6A       0133*       bit joy1_l,d
046BF4 CA FC 6B 04 0134*       jp z,@F
046BF8 C3 08 6C 04 0135*       jp @right
046BFC             0136*   @@:
046BFC FD 27 07    0137*       ld hl,(iy+sprite_xvel)
046BFF 01 00 FD FF 0138*       ld bc,-speed_player
046C03 09          0139*       add hl,bc
046C04 FD 2F 07    0140*       ld (iy+sprite_xvel),hl
046C07 3D          0141*       dec a ; set ship's animation to left
046C08             0142*   @right:
046C08             0143*   ; 122 Right: move player right
046C08 DD CB 0F 4E 0144*       bit 1,(ix+15)
046C0C C2 1A 6C 04 0145*       jp nz,@F
046C10             0146*   ; test dpad right
046C10 CB 7A       0147*       bit joy1_r,d
046C12 CA 1A 6C 04 0148*       jp z,@F
046C16 C3 26 6C 04 0149*       jp @up
046C1A             0150*   @@:
046C1A FD 27 07    0151*       ld hl,(iy+sprite_xvel)
046C1D 01 00 03 00 0152*       ld bc,speed_player
046C21 09          0153*       add hl,bc
046C22 FD 2F 07    0154*       ld (iy+sprite_xvel),hl
046C25 3C          0155*       inc a ; set ship's animation to right
046C26             0156*   @up:
046C26             0157*   ; 58 Up: move player up
046C26 DD CB 07 4E 0158*       bit 1,(ix+7)
046C2A C2 38 6C 04 0159*       jp nz,@F
046C2E             0160*   ; test dpad up
046C2E CB 4A       0161*       bit joy1_u,d
046C30 CA 38 6C 04 0162*       jp z,@F
046C34 C3 43 6C 04 0163*       jp @dn
046C38             0164*   @@:
046C38 FD 27 0A    0165*       ld hl,(iy+sprite_yvel)
046C3B 01 00 FD FF 0166*       ld bc,-speed_player
046C3F 09          0167*       add hl,bc
046C40 FD 2F 0A    0168*       ld (iy+sprite_yvel),hl
046C43             0169*   @dn:
046C43             0170*   ; 42 Down: move player down
046C43 DD CB 05 4E 0171*       bit 1,(ix+5)
046C47 C2 55 6C 04 0172*       jp nz,@F
046C4B             0173*   ; test dpad down
046C4B CB 5A       0174*       bit joy1_d,d
046C4D CA 55 6C 04 0175*       jp z,@F
046C51 C3 60 6C 04 0176*       jp @frame
046C55             0177*   @@:
046C55 FD 27 0A    0178*       ld hl,(iy+sprite_yvel)
046C58 01 00 03 00 0179*       ld bc,speed_player
046C5C 09          0180*       add hl,bc
046C5D FD 2F 0A    0181*       ld (iy+sprite_yvel),hl
046C60             0182*   @frame:
046C60             0183*   ; a should land here loaded with the correct frame
046C60 CD 63 1C 04 0184*       call vdu_sprite_select_frame
046C64             0185*   ; draw player at updated position
046C64 FD 21 2A 92 0186*       ld iy,player_begin
       04          
046C69 FD 22 6F 82 0187*       ld (table_pointer),iy
       04          
046C6E CD 1F 84 04 0188*       call move_sprite
046C72 FD 07 01    0189*       ld bc,(iy+sprite_x)
046C75 FD 17 04    0190*       ld de,(iy+sprite_y)
046C78 CD CC 1C 04 0191*       call vdu_sprite_move_abs168
046C7C             0192*   
046C7C             0193*   ; process player laser fire
046C7C             0194*   ; do player fire button input
046C7C             0195*   ; read joystick fire button
046C7C AF          0196*       xor a ; clear flags
046C7D DB A2       0197*       in a,(portD) ; read joypad fire button input
046C7F CB 6F       0198*       bit btn1_a,a
046C81 CA 1C 70 04 0199*       jp z,player_spawn_laser
046C85             0200*   ; 99 Space: fire main weapon
046C85 DD CB 0C 56 0201*       bit 2,(ix+12)
046C89 C2 1C 70 04 0202*       jp nz,player_spawn_laser
046C8D             0203*   ; no fire button pressed so go home
046C8D C9          0204*       ret
046C8E             0205*   ; end player_input
046C8E             0206*   
046C8E             0207*   player_move_weapons:
046C8E             0208*   ; initialize pointers and loop counter
046C8E FD 21 2A 91 0209*       ld iy,player_weapons_begin ; set iy to first record in table
       04          
046C93 06 04       0210*       ld b,player_lasers_max ; loop counter
046C95 CD 9E 83 04 0211*       call move_sprite_group
046C99 C9          0212*       ret
046C9A             0213*   ; end player_move_weapons
046C9A             0214*   
046C9A             0215*   kill_player:
046C9A             0216*   ; DEBUG
046C9A 21 C6 72 04 0217*       ld hl,game_init
046C9E 22 00 72 04 0218*       ld (game_state),hl
046CA2 C9          0219*       ret
046CA3             0220*   ; END DEBUG
046CA3             0221*   
046CA3 21 96 23 04 0222*       ld hl,enemies_despawning
046CA7 22 7C 23 04 0223*       ld (enemies_state),hl
046CAB 21 B4 6C 04 0224*       ld hl,player_dying
046CAF 22 00 6B 04 0225*       ld (player_state),hl
046CB3 C9          0226*       ret
046CB4             0227*   ; end kill_player
046CB4             0228*   
046CB4             0229*   player_dying:
046CB4             0230*   
046CB4 C9          0231*       ret
046CB5             0232*   ; end player_dying
046CB5             0061        include "player_cockpit.inc"
046CB5             0001*   score_x: equ 50
046CB5             0002*   score_y: equ 33
046CB5             0003*   ; prints the player's score
046CB5 00 00 00    0004*   player_score_last: dl 0 ; integer
046CB8             0005*   
046CB8             0006*   ; inputs: iy set to sprite/tile record being tallied
046CB8             0007*   ; outputs: hl,player_score = updated score
046CB8             0008*   ; destroys: hl,de
046CB8             0009*   update_score:
046CB8 11 00 00 00 0010*       ld de,0 ; clear deu and d
046CBC FD 5E 26    0011*       ld e,(iy+sprite_points)
046CBF 2A 03 6B 04 0012*       ld hl,(player_score)
046CC3 19          0013*       add hl,de
046CC4 22 03 6B 04 0014*       ld (player_score),hl
046CC8 C9          0015*       ret
046CC9             0016*   ; end update_score
046CC9             0017*   
046CC9             0018*   ; inputs: none
046CC9             0019*   print_score:
046CC9 2A B5 6C 04 0020*       ld hl,(player_score_last)
046CCD ED 5B 03 6B 0021*       ld de,(player_score)
       04          
046CD2 ED 53 B5 6C 0022*       ld (player_score_last),de
       04          
046CD7 AF          0023*       xor a ; clear carry
046CD8 ED 52       0024*       sbc hl,de
046CDA C8          0025*       ret z ; no change to update
046CDB 0E 32       0026*       ld c,score_x
046CDD 06 21       0027*       ld b,score_y
046CDF CD 37 16 04 0028*       call vdu_move_cursor
046CE3 2A 03 6B 04 0029*       ld hl,(player_score)
046CE7 CD 53 01 04 0030*       call printDec
046CEB C9          0031*       ret
046CEC             0032*   ; end print_score
046CEC             0033*   
046CEC             0034*   ; offsets into control panel element definitions
046CEC             0035*   panel_bufferId: equ 0
046CEC             0036*   panel_x0: equ 3
046CEC             0037*   panel_y0: equ 6
046CEC             0038*   panel_x1: equ 9
046CEC             0039*   panel_y1: equ 12
046CEC             0040*   
046CEC             0041*   ctl_panel_l:
046CEC 09 00 00    0042*       dl BUF_CTL_PANEL_L ; bufferId
046CEF 00 00 00    0043*       dl 0 ; x0
046CF2 00 01 00    0044*       dl 256 ; y0
046CF5 80 00 00    0045*       dl 0+128 ; x1
046CF8 80 01 00    0046*       dl 256+128 ; y1
046CFB             0047*   
046CFB             0048*   ctl_panel_r:
046CFB 0A 00 00    0049*       dl BUF_CTL_PANEL_R ; bufferId
046CFE 80 01 00    0050*       dl 384 ; x0
046D01 00 01 00    0051*       dl 256 ; y0
046D04 00 02 00    0052*       dl 384+128 ; x1
046D07 80 01 00    0053*       dl 256+128 ; y1
046D0A             0054*   
046D0A             0055*   mfd_bezel_l:
046D0A 0D 00 00    0056*       dl BUF_MFD_BEZEL ; bufferId
046D0D 18 00 00    0057*       dl 24 ; x0
046D10 18 01 00    0058*       dl 280 ; y0
046D13 78 00 00    0059*       dl 24+96 ; x1
046D16 78 01 00    0060*       dl 280+96 ; y1
046D19             0061*   
046D19             0062*   mfd_bezel_r:
046D19 0D 00 00    0063*       dl BUF_MFD_BEZEL ; bufferId
046D1C 88 01 00    0064*       dl 392 ; x0
046D1F 18 01 00    0065*       dl 280 ; y0
046D22 E8 01 00    0066*       dl 392+96 ; x1
046D25 78 01 00    0067*       dl 280+96 ; y1
046D28             0068*   
046D28             0069*   draw_player_cockpit:
046D28 DD 21 EC 6C 0070*       ld ix,ctl_panel_l
       04          
046D2D CD C4 6D 04 0071*       call draw_player_ctl_panel
046D31 DD 21 FB 6C 0072*       ld ix,ctl_panel_r
       04          
046D36 CD C4 6D 04 0073*       call draw_player_ctl_panel
046D3A DD 21 0A 6D 0074*       ld ix,mfd_bezel_l
       04          
046D3F CD C4 6D 04 0075*       call draw_player_ctl_panel
046D43 DD 21 D6 6D 0076*       ld ix,mfd_bg_l
       04          
046D48 CD C4 6D 04 0077*       call draw_player_ctl_panel
046D4C DD 21 E5 6D 0078*       ld ix,mfd_arms_l
       04          
046D51 CD C4 6D 04 0079*       call draw_player_ctl_panel
046D55 DD 21 19 6D 0080*       ld ix,mfd_bezel_r
       04          
046D5A CD C4 6D 04 0081*       call draw_player_ctl_panel
046D5E DD 21 F4 6D 0082*       ld ix,mfd_bg_r
       04          
046D63 CD C4 6D 04 0083*       call draw_player_ctl_panel
046D67             0084*   
046D67 21 28 00 00 0085*       ld hl,BUF_SHIELD
046D6B CD 38 17 04 0086*       call vdu_buff_select
046D6F 01 EC 01 00 0087*       ld bc,492
046D73 11 70 01 00 0088*       ld de,368
046D77 CD 20 1B 04 0089*       call vdu_plot_bmp
046D7B 21 27 00 00 0090*       ld hl,BUF_POWER
046D7F CD 38 17 04 0091*       call vdu_buff_select
046D83 01 04 00 00 0092*       ld bc,4
046D87 11 70 01 00 0093*       ld de,368
046D8B CD 20 1B 04 0094*       call vdu_plot_bmp
046D8F 21 08 00 00 0095*       ld hl,BUF_CREDITS
046D93 CD 38 17 04 0096*       call vdu_buff_select
046D97 01 80 01 00 0097*       ld bc,384
046D9B 11 05 01 00 0098*       ld de,261
046D9F CD 20 1B 04 0099*       call vdu_plot_bmp
046DA3 21 0B 00 00 0100*       ld hl,BUF_JERRY_CAN
046DA7 CD 38 17 04 0101*       call vdu_buff_select
046DAB 01 6E 00 00 0102*       ld bc,110
046DAF 11 02 01 00 0103*       ld de,258
046DB3 CD 20 1B 04 0104*       call vdu_plot_bmp
046DB7             0105*   
046DB7 CD F6 70 04 0106*       call init_bar_shields
046DBB CD 90 6E 04 0107*       call init_bar_laser
046DBF CD 48 6F 04 0108*       call init_bar_fuel
046DC3 C9          0109*       ret
046DC4             0110*   ; end draw_player_cockpit
046DC4             0111*   
046DC4             0112*   draw_player_ctl_panel:
046DC4 DD 27 00    0113*       ld hl,(ix+panel_bufferId)
046DC7 CD 38 17 04 0114*       call vdu_buff_select
046DCB DD 07 03    0115*       ld bc,(ix+panel_x0)
046DCE DD 17 06    0116*       ld de,(ix+panel_y0)
046DD1 CD 20 1B 04 0117*       call vdu_plot_bmp
046DD5 C9          0118*       ret
046DD6             0119*   ; end draw_player_ctl_panel
046DD6             0120*   
046DD6             0121*   mfd_bg_l:
046DD6 0E 00 00    0122*       dl BUF_MFD_BG ; bufferId
046DD9 28 00 00    0123*       dl 40 ; x0
046DDC 28 01 00    0124*       dl 296 ; y0
046DDF 67 00 00    0125*       dl 40+63 ; x1
046DE2 67 01 00    0126*       dl 296+63 ; y1
046DE5             0127*   
046DE5             0128*   mfd_arms_l:
046DE5 0C 00 00    0129*       dl BUF_MFD_ARMS ; bufferId
046DE8 36 00 00    0130*       dl 54 ; x0
046DEB 40 01 00    0131*       dl 320 ; y0
046DEE 59 00 00    0132*       dl 54+35 ; x1
046DF1 51 01 00    0133*       dl 320+17 ; y1
046DF4             0134*   
046DF4             0135*   mfd_bg_r:
046DF4 0E 00 00    0136*       dl BUF_MFD_BG ; bufferId
046DF7 98 01 00    0137*       dl 408 ; x0
046DFA 28 01 00    0138*       dl 296 ; y0
046DFD D7 01 00    0139*       dl 408+63 ; x1
046E00 67 01 00    0140*       dl 296+63 ; y1
046E03             0141*   
046E03             0142*   mfd_activate:
046E03 DD 07 03    0143*       ld bc,(ix+panel_x0)
046E06 DD 17 06    0144*       ld de,(ix+panel_y0)
046E09 CD D0 16 04 0145*       call vdu_set_gfx_origin
046E0D C9          0146*       ret
046E0E             0147*   ; end mfd_activate
046E0E             0148*   
046E0E             0149*   mfd_init:
046E0E DD 27 00    0150*       ld hl,(ix+panel_bufferId)
046E11 CD 38 17 04 0151*       call vdu_buff_select
046E15 01 00 00 00 0152*       ld bc,0
046E19 11 00 00 00 0153*       ld de,0
046E1D CD 20 1B 04 0154*       call vdu_plot_bmp
046E21 C9          0155*       ret
046E22             0156*   ; end mfd_init
046E22             0157*   
046E22             0158*   bar_val: equ 0 ; current value
046E22             0159*   bar_x0: equ panel_x0
046E22             0160*   bar_y0: equ panel_y0
046E22             0161*   bar_x1: equ panel_x1
046E22             0162*   bar_y1: equ panel_y1
046E22             0163*   bar_y: equ 15 ; y-plot coordinate
046E22             0164*   bar_x: equ 15 ; x-plot coordinate
046E22             0165*   
046E22             0166*   bar_yellow: equ 33
046E22             0167*   bar_red: equ 17
046E22             0168*   
046E22             0169*   ; update a vertical bar display
046E22             0170*   ; inputs: ix points to bar structure
046E22             0171*   ;         bar_val set by caller
046E22             0172*   ; prerequisite: bar_init called before first use
046E22             0173*   bar_update_v:
046E22             0174*   ; set gfx viewport
046E22 DD E5       0175*       push ix ; preserve pointer
046E24 DD 07 03    0176*       ld bc,(ix+bar_x0)
046E27 DD 17 06    0177*       ld de,(ix+bar_y0)
046E2A DD 31 0C    0178*       ld iy,(ix+bar_y1)
046E2D DD 37 09    0179*       ld ix,(ix+bar_x1)
046E30 CD EB 16 04 0180*       call vdu_set_gfx_viewport
046E34 DD E1       0181*       pop ix ; restore pointer
046E36             0182*   ; select the color based on the value thresholds
046E36 DD 17 00    0183*       ld de,(ix+bar_val)
046E39 21 EF FF FF 0184*       ld hl,-bar_red
046E3D 19          0185*       add hl,de
046E3E D2 5B 6E 04 0186*       jp nc,@red
046E42 21 DF FF FF 0187*       ld hl,-bar_yellow
046E46 19          0188*       add hl,de
046E47 D2 53 6E 04 0189*       jp nc,@yellow
046E4B 21 05 00 00 0190*       ld hl,BUF_BAR_V_2 ; green
046E4F C3 5F 6E 04 0191*       jp @select
046E53             0192*   @yellow:
046E53 21 04 00 00 0193*       ld hl,BUF_BAR_V_1 ; yellow
046E57 C3 5F 6E 04 0194*       jp @select
046E5B             0195*   @red:
046E5B 21 03 00 00 0196*       ld hl,BUF_BAR_V_0 ; red
046E5F             0197*   @select:
046E5F CD 38 17 04 0198*       call vdu_buff_select
046E63             0199*   ; get x-plot position
046E63 DD 07 03    0200*       ld bc,(ix+bar_x0)
046E66             0201*   ; compute y-plot position
046E66 DD 17 00    0202*       ld de,(ix+bar_val)
046E69 21 40 00 00 0203*       ld hl,64
046E6D AF          0204*       xor a ; clear carry
046E6E ED 52       0205*       sbc hl,de
046E70 DD 17 0F    0206*       ld de,(ix+bar_y)
046E73 19          0207*       add hl,de
046E74 7D          0208*       ld a,l
046E75 E6 FC       0209*       and %11111100 ; round to nearest 4 pixels
046E77 6F          0210*       ld l,a
046E78 EB          0211*       ex de,hl
046E79 CD 20 1B 04 0212*       call vdu_plot_bmp
046E7D C9          0213*       ret
046E7E             0214*   ; end bar_update_v
046E7E             0215*   
046E7E             0216*   
046E7E             0217*   bar_laser:
046E7E 00 00 00    0218*       dl 0 ; value
046E81 08 00 00    0219*       dl 8 ; x0
046E84 30 01 00    0220*       dl 304 ; y0
046E87 0F 00 00    0221*       dl 8+7 ; x1
046E8A 6F 01 00    0222*       dl 304+63 ; y1
046E8D F0 00 00    0223*       dl 304-64 ; y-plot coordinate
046E90             0224*   
046E90             0225*   init_bar_laser:
046E90 3A AD 6E 04 0226*       ld a,(charge_laser_timer_max)
046E94 32 AC 6E 04 0227*       ld (charge_laser_timer),a
046E98 DD 21 7E 6E 0228*       ld ix,bar_laser
       04          
046E9D 3A AB 6E 04 0229*       ld a,(laser_power_max)
046EA1 DD 77 00    0230*       ld (ix+bar_val),a
046EA4 CD 22 6E 04 0231*       call bar_update_v
046EA8 C9          0232*       ret
046EA9             0233*   ; end init_bar_laser
046EA9             0234*   
046EA9 40          0235*   laser_power: db 64 ; integer
046EAA 00          0236*   laser_power_last: db 0 ; integer
046EAB 40          0237*   laser_power_max: db 64 ; integer
046EAC 00          0238*   charge_laser_timer: db 0
046EAD 06          0239*   charge_laser_timer_max: db 6
046EAE             0240*   charge_laser:
046EAE             0241*   ; check laser timer
046EAE 21 AC 6E 04 0242*       ld hl,charge_laser_timer
046EB2 35          0243*       dec (hl)
046EB3 C0          0244*       ret nz
046EB4 3A AD 6E 04 0245*       ld a,(charge_laser_timer_max)
046EB8 77          0246*       ld (hl),a
046EB9 21 A9 6E 04 0247*       ld hl,laser_power
046EBD 34          0248*       inc (hl)
046EBE 3E 40       0249*       ld a,64
046EC0 BE          0250*       cp (hl)
046EC1 D0          0251*       ret nc
046EC2 77          0252*       ld (hl),a
046EC3 C9          0253*       ret
046EC4             0254*   ; end charge_laser
046EC4             0255*   draw_laser:
046EC4 CD AE 6E 04 0256*       call charge_laser
046EC8 21 AA 6E 04 0257*       ld hl,laser_power_last
046ECC 3A A9 6E 04 0258*       ld a,(laser_power)
046ED0 BE          0259*       cp (hl)
046ED1 C8          0260*       ret z ; no change to update
046ED2 77          0261*       ld (hl),a
046ED3 DD 21 7E 6E 0262*       ld ix,bar_laser
       04          
046ED8 DD 77 00    0263*       ld (ix+bar_val),a ; TODO: this is redundant
046EDB CD 22 6E 04 0264*       call bar_update_v
046EDF C9          0265*       ret
046EE0             0266*   
046EE0             0267*   
046EE0             0268*   ; update a horizontal bar display
046EE0             0269*   ; inputs: ix points to bar structure
046EE0             0270*   ;         bar_val set by caller
046EE0             0271*   ; prerequisite: bar_init called before first use
046EE0             0272*   bar_update_h:
046EE0             0273*   ; set gfx viewport
046EE0 DD E5       0274*       push ix ; preserve pointer
046EE2 DD 07 03    0275*       ld bc,(ix+bar_x0)
046EE5 DD 17 06    0276*       ld de,(ix+bar_y0)
046EE8 DD 31 0C    0277*       ld iy,(ix+bar_y1)
046EEB DD 37 09    0278*       ld ix,(ix+bar_x1)
046EEE CD EB 16 04 0279*       call vdu_set_gfx_viewport
046EF2 DD E1       0280*       pop ix ; restore pointer
046EF4             0281*   ; select the color based on the value thresholds
046EF4 DD 17 00    0282*       ld de,(ix+bar_val)
046EF7 21 EF FF FF 0283*       ld hl,-bar_red
046EFB 19          0284*       add hl,de
046EFC D2 19 6F 04 0285*       jp nc,@red
046F00 21 DF FF FF 0286*       ld hl,-bar_yellow
046F04 19          0287*       add hl,de
046F05 D2 11 6F 04 0288*       jp nc,@yellow
046F09 21 02 00 00 0289*       ld hl,BUF_BAR_H_2 ; green
046F0D C3 1D 6F 04 0290*       jp @select
046F11             0291*   @yellow:
046F11 21 01 00 00 0292*       ld hl,BUF_BAR_H_1 ; yellow
046F15 C3 1D 6F 04 0293*       jp @select
046F19             0294*   @red:
046F19 21 00 00 00 0295*       ld hl,BUF_BAR_H_0 ; red
046F1D             0296*   @select:
046F1D CD 38 17 04 0297*       call vdu_buff_select
046F21             0298*   ; compute x-plot position
046F21 DD 27 00    0299*       ld hl,(ix+bar_val)
046F24 DD 07 0F    0300*       ld bc,(ix+bar_x)
046F27 09          0301*       add hl,bc
046F28 7D          0302*       ld a,l
046F29 E6 FC       0303*       and %11111100 ; round to nearest 4 pixels
046F2B 6F          0304*       ld l,a
046F2C E5          0305*       push hl
046F2D C1          0306*       pop bc
046F2E             0307*   ; get y-plot position
046F2E DD 17 06    0308*       ld de,(ix+bar_y0)
046F31 CD 20 1B 04 0309*       call vdu_plot_bmp
046F35 C9          0310*       ret
046F36             0311*   ; end bar_update_h
046F36             0312*   
046F36             0313*   bar_fuel:
046F36 00 00 00    0314*       dl 0 ; value
046F39 30 00 00    0315*       dl 48 ; x0
046F3C 08 01 00    0316*       dl 264 ; y0
046F3F 6F 00 00    0317*       dl 48+63 ; x1
046F42 0F 01 00    0318*       dl 264+7 ; y1
046F45 F0 FF FF    0319*       dl 48-64 ; x-plot coordinate
046F48             0320*   
046F48             0321*   init_bar_fuel:
046F48 3A 65 6F 04 0322*       ld a,(discharge_fuel_timer_max)
046F4C 32 64 6F 04 0323*       ld (discharge_fuel_timer),a
046F50 DD 21 36 6F 0324*       ld ix,bar_fuel
       04          
046F55 3A 63 6F 04 0325*       ld a,(player_fuel_max)
046F59 DD 77 00    0326*       ld (ix+bar_val),a
046F5C CD E0 6E 04 0327*       call bar_update_h
046F60 C9          0328*       ret
046F61             0329*   ; end init_bar_fuel
046F61             0330*   
046F61 40          0331*   player_fuel: db 64 ; integer
046F62 00          0332*   player_fuel_last: db 0 ; integer
046F63 40          0333*   player_fuel_max: db 64 ; integer
046F64 00          0334*   discharge_fuel_timer: db 0
046F65 40          0335*   discharge_fuel_timer_max: db 64 ;
046F66             0336*   discharge_fuel:
046F66             0337*   ; check fuel timer
046F66 21 64 6F 04 0338*       ld hl,discharge_fuel_timer
046F6A 35          0339*       dec (hl)
046F6B C0          0340*       ret nz ; not time to discharge fuel so return
046F6C             0341*   ; reset fuel discharge timer
046F6C 3A 65 6F 04 0342*       ld a,(discharge_fuel_timer_max)
046F70 77          0343*       ld (hl),a
046F71             0344*   ; discharge fuel
046F71 21 61 6F 04 0345*       ld hl,player_fuel
046F75 35          0346*       dec (hl)
046F76 CA 7F 6F 04 0347*       jp z,@no_fuel
046F7A FA 7F 6F 04 0348*       jp m,@no_fuel
046F7E C9          0349*       ret ; fuel not zero so return
046F7F             0350*   @no_fuel:
046F7F 36 00       0351*       ld (hl),0 ; TODO: implement out-of-fuel handler
046F81 C9          0352*       ret
046F82             0353*   ; end discharge_fuel
046F82             0354*   
046F82             0355*   draw_fuel:
046F82 CD 66 6F 04 0356*       call discharge_fuel
046F86 21 62 6F 04 0357*       ld hl,player_fuel_last
046F8A 3A 61 6F 04 0358*       ld a,(player_fuel)
046F8E BE          0359*       cp (hl)
046F8F C8          0360*       ret z ; no change to update
046F90 77          0361*       ld (hl),a
046F91 DD 21 36 6F 0362*       ld ix,bar_fuel
       04          
046F96 DD 77 00    0363*       ld (ix+bar_val),a ; TODO: this is redundant
046F99 CD E0 6E 04 0364*       call bar_update_h
046F9D C9          0365*       ret
046F9E             0366*   ; end draw_fuel
046F9E             0062        include "player_laser.inc"
046F9E FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
047000             0002*   speed_laser: equ 4*256 ; 6 pixels per frame 16.8 fixed
047000             0003*   tmr_laser: ds 6 ; rate timer for firing laser
       FF FF FF FF 
       FF FF 
047006 0C 00 00    0004*   tmr_laser_reset: dl 120/10
047009             0005*   laser_animation_timer_reset: equ 2 ; animate every two frames
047009             0006*   
047009             0007*   laser_defaults:
047009 06          0008*       db player_air        ; type
04700A 4A 01 00    0009*       dl BUF_LASER_A	    ; base_bufferId
04700D 7C 70 04    0010*       dl move_player_laser	; move_program
047010 40          0011*       db %01000000            ; collisions bit 6 signals sprite alive
047011 05          0012*       db 5	                ; dim_x
047012 0D          0013*       db 13                   ; dim_y
047013 01          0014*       db 1                    ; num_orientations
047014 02          0015*       db 2                    ; num_animations
047015 00          0016*       db 0	                ; animation
047016 02          0017*       db laser_animation_timer_reset ; animation_timer
047017 00          0018*       db 0	                ; move_timer
047018 00          0019*       db 0	                ; move_step
047019 00          0020*       db 0	                ; points
04701A 00          0021*       db 0	                ; shield_damage
04701B 00          0022*       db 0                    ; frame
04701C             0023*   
04701C             0024*   player_spawn_laser:
04701C             0025*   ; check laser power
04701C 3A A9 6E 04 0026*       ld a,(laser_power)
047020 D6 04       0027*       sub a,4 ; units of power per laser shot
047022 D8          0028*       ret c ; not enough power to fire
047023             0029*    ; check laser spawn timer
047023 FD 21 00 70 0030*       ld iy,tmr_laser
       04          
047028 CD 21 15 04 0031*       call timestamp_tmr_get
04702C F0          0032*       ret p ; not time to fire
04702D             0033*   ; update power to reflect firing
04702D 3A A9 6E 04 0034*       ld a,(laser_power)
047031 D6 04       0035*       sub a,4 ; units of power per laser shot
047033 32 A9 6E 04 0036*       ld (laser_power),a
047037             0037*   ; reset timer
047037 2A 06 70 04 0038*       ld hl,(tmr_laser_reset)
04703B CD 16 15 04 0039*       call timestamp_tmr_set
04703F             0040*   ; fire the laser
04703F DD 21 2A 91 0041*       ld ix,player_weapons_begin
       04          
047044 06 04       0042*       ld b,player_lasers_max
047046 FD 21 2A 92 0043*       ld iy,player_begin
       04          
04704B FD 22 6F 82 0044*       ld (table_pointer),iy
       04          
047050 21 09 70 04 0045*       ld hl,laser_defaults
047054 CD 6C 83 04 0046*       call spawn_sprite_from_sprite
047058 D0          0047*       ret nc ; no carry means no free sprite slots, so we go home
047059             0048*   ; other specific initialization
047059             0049*   ; ------------------------------------------------
047059 FD 21 2A 92 0050*       ld iy,player_begin
       04          
04705E             0051*   ; x-coordinate
04705E FD 27 01    0052*       ld hl,(iy+sprite_x)
047061 11 00 05 00 0053*       ld de,5*256 ; horizontal center with player sprite
047065 19          0054*       add hl,de
047066 DD 2F 01    0055*       ld (ix+sprite_x),hl
047069             0056*   ; y-coordinate
047069 FD 27 04    0057*       ld hl,(iy+sprite_y)
04706C 11 00 FA FF 0058*       ld de,-6*256 ; set laser y a few pixels above player
047070 19          0059*       add hl,de
047071 DD 2F 04    0060*       ld (ix+sprite_y),hl
047074             0061*   ; set laser velocity
047074 21 00 FC FF 0062*       ld hl,-speed_laser
047078 DD 2F 0A    0063*       ld (ix+sprite_yvel),hl
04707B C9          0064*       ret
04707C             0065*   ; end player_spawn_laser
04707C             0066*   
04707C             0067*   move_player_laser:
04707C             0068*   ; run the movement program for the laser
04707C CD 1F 84 04 0069*       call move_sprite
047080 3A 72 82 04 0070*       ld a,(sprite_screen_edge)
047084 E6 08       0071*       and a,collide_top ; check collision with top of screen
047086 CA 8E 70 04 0072*       jp z,@F ; still on screen
04708A C3 B8 82 04 0073*       jp table_deactivate_sprite
04708E             0074*   @@: ; check animation timer
04708E FD 35 23    0075*       dec (iy+sprite_animation_timer)
047091 C2 A5 70 04 0076*       jp nz,@F
047095 3E 02       0077*       ld a,laser_animation_timer_reset
047097 FD 77 23    0078*       ld (iy+sprite_animation_timer),a
04709A FD 7E 00    0079*       ld a,(iy+sprite_id)
04709D CD 00 1C 04 0080*       call vdu_sprite_select
0470A1 CD 47 1C 04 0081*       call vdu_sprite_next_frame
0470A5             0082*   @@: ; all done
0470A5 C9          0083*       ret
0470A6             0084*   ; end move_player_laser
0470A6             0085*   
0470A6             0086*   init_player_laser:
0470A6             0087*   ; set pointer to laser sprite table
0470A6 FD 21 2A 91 0088*       ld iy,player_weapons_begin
       04          
0470AB FD 7E 00    0089*       ld a,(iy+sprite_id) ; sprite id
0470AE 1E 04       0090*       ld e,player_lasers_max ; sprite loop counter
0470B0             0091*   ; define laser sprites
0470B0             0092*   @sprites_loop:
0470B0 F5          0093*       push af
0470B1 D5          0094*       push de
0470B2 CD 00 1C 04 0095*   	call vdu_sprite_select
0470B6 CD 13 1C 04 0096*   	call vdu_sprite_clear_frames
0470BA 21 4A 01 00 0097*   	ld hl,BUF_LASER_A
0470BE 06 02       0098*   	ld b,2 ; two bitmaps for laser
0470C0             0099*   @frames_loop:
0470C0 C5          0100*   	push bc
0470C1 E5          0101*   	push hl
0470C2 CD 55 1D 04 0102*   	call vdu_sprite_add_buff
0470C6 E1          0103*   	pop hl
0470C7 23          0104*   	inc hl
0470C8 C1          0105*   	pop bc
0470C9 10 F5       0106*   	djnz @frames_loop
0470CB D1          0107*       pop de ; sprite loop counter
0470CC F1          0108*       pop af ; sprite id
0470CD 3C          0109*       inc a
0470CE 1D          0110*       dec e
0470CF C2 B0 70 04 0111*       jp nz,@sprites_loop
0470D3             0112*   ; set laser firing timer to zero
0470D3 FD 21 00 70 0113*       ld iy,tmr_laser
       04          
0470D8 21 00 00 00 0114*       ld hl,0
0470DC CD 16 15 04 0115*       call timestamp_tmr_set
0470E0 C9          0116*       ret
0470E1             0117*   ; end init_player_laser
0470E1             0063        include "player_shields.inc"
0470E1             0001*   
0470E1 40          0002*   player_shields: db 64 ; integer
0470E2             0003*   ; max player shields,binary
0470E2             0004*   ; can increase with power-ups (todo)
0470E2             0005*   ; player_shields_max: db 64 ; integer
0470E2 04          0006*   player_shields_max: db 4 ; DEBUG
0470E3 00          0007*   player_shields_last: db 0 ; integer
0470E4             0008*   bar_shields:
0470E4 00 00 00    0009*       dl 0 ; value
0470E7 F0 01 00    0010*       dl 496 ; x0
0470EA 30 01 00    0011*       dl 304 ; y0
0470ED F7 01 00    0012*       dl 496+7 ; x1
0470F0 6F 01 00    0013*       dl 304+63 ; y1
0470F3 F0 00 00    0014*       dl 304-64 ; y-plot coordinate
0470F6             0015*   
0470F6             0016*   init_bar_shields:
0470F6 DD 21 E4 70 0017*       ld ix,bar_shields
       04          
0470FB 2A E2 70 04 0018*       ld hl,(player_shields_max)
0470FF DD 2F 00    0019*       ld (ix+bar_val),hl
047102 CD 22 6E 04 0020*       call bar_update_v
047106 C9          0021*       ret
047107             0022*   ; end init_bar_shields
047107             0023*   
047107             0024*   ; inputs: iy set to sprite/tile record being tallied
047107             0025*   ; outputs: hl,player_shields = updated shields
047107             0026*   ; destroys: hl,de
047107             0027*   update_shields:
047107 FD 6E 27    0028*       ld l,(iy+sprite_shield_damage)
04710A 3A E1 70 04 0029*       ld a,(player_shields)
04710E 85          0030*       add a,l
04710F F2 14 71 04 0031*       jp p,@have_shields
047113 AF          0032*       xor a ; set to zero
047114             0033*   @have_shields:
047114 32 E1 70 04 0034*       ld (player_shields),a
047118 B7          0035*       or a ; check for zero
047119 CA 9A 6C 04 0036*       jp z,kill_player
04711D C9          0037*       ret
04711E             0038*   ; end update_shields
04711E             0039*   
04711E             0040*   draw_shields:
04711E 21 E3 70 04 0041*       ld hl,player_shields_last
047122 3A E1 70 04 0042*       ld a,(player_shields)
047126 BE          0043*       cp (hl)
047127 C8          0044*       ret z ; no change to update
047128 77          0045*       ld (hl),a
047129 DD 21 E4 70 0046*       ld ix,bar_shields
       04          
04712E DD 77 00    0047*       ld (ix+bar_val),a ; TODO: this is redundant
047131 CD 22 6E 04 0048*       call bar_update_v
047135 C9          0049*       ret
047136             0064        include "state.inc"
047136 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
047200             0002*   
047200             0003*   ; Game state variables
047200 0E 72 04    0004*   game_state:  dl game_main_menu
047203             0005*   
047203             0006*   do_game:
047203 2A 00 72 04 0007*       ld hl,(game_state)   ; Load the current game state
047207             0008*       CALL_HL                ; Call the corresponding state handler
047207 01 0D 72 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
04720B C5          0002*M1     push bc ; which constitutes the return address
04720C E9          0003*M1     jp (hl) ; Jump to the address in HL
04720D C9          0009*       ret
04720E             0010*   
04720E             0011*   ; ========================
04720E             0012*   ; Main Game States
04720E             0013*   ; ========================
04720E             0014*   
04720E             0015*   game_main_menu:
04720E             0016*       ; Handle main menu options
04720E             0017*       ; Example: Check input for "Start Game"
04720E CD 74 72 04 0018*       call check_input_menu
047212 C2 C6 72 04 0019*       jp nz, game_init ; Start game on selection
047216 C9          0020*       ret
047217             0021*   
047217             0022*   
047217             0023*   
047217             0024*   game_paused:
047217             0025*       ; Pause menu logic
047217 CD 77 72 04 0026*       call check_input_pause
04721B C2 11 74 04 0027*       jp nz, game_playing ; Resume game
04721F CA 0E 72 04 0028*       jp z, game_main_menu ; Exit to main menu
047223 C9          0029*       ret
047224             0030*   
047224             0031*   game_level_transition:
047224             0032*       ; Handle level transitions
047224 CD 78 72 04 0033*       call load_next_level
047228 21 11 74 04 0034*       ld hl, game_playing
04722C 22 00 72 04 0035*       ld (game_state), hl
047230 C9          0036*       ret
047231             0037*   
047231             0038*   game_over:
047231             0039*       ; Display game over screen
047231 CD 79 72 04 0040*       call display_game_over
047235 C2 0E 72 04 0041*       jp nz, game_main_menu ; Return to main menu on input
047239 C9          0042*       ret
04723A             0043*   
04723A             0044*   game_victory:
04723A             0045*       ; Display victory screen
04723A CD 7A 72 04 0046*       call display_victory
04723E C2 0E 72 04 0047*       jp nz, game_main_menu ; Return to main menu on input
047242 C9          0048*       ret
047243             0049*   
047243             0050*   ; ========================
047243             0051*   ; Supporting States
047243             0052*   ; ========================
047243             0053*   
047243             0054*   game_loading:
047243             0055*       ; Show loading screen while preparing assets
047243 CD 7B 72 04 0056*       call load_resources
047247 21 C6 72 04 0057*       ld hl, game_init
04724B 22 00 72 04 0058*       ld (game_state), hl
04724F C9          0059*       ret
047250             0060*   
047250             0061*   game_cutscene:
047250             0062*       ; Play a non-interactive cutscene
047250 CD 7C 72 04 0063*       call play_cutscene
047254 C2 11 74 04 0064*       jp nz, game_playing ; Return to gameplay after cutscene
047258 C9          0065*       ret
047259             0066*   
047259             0067*   game_inventory:
047259             0068*       ; Open inventory or shop
047259 CD 7D 72 04 0069*       call display_inventory
04725D C2 11 74 04 0070*       jp nz, game_playing ; Return to gameplay after inventory close
047261 C9          0071*       ret
047262             0072*   
047262             0073*   game_map:
047262             0074*       ; Display map or quest
047262 CD 7E 72 04 0075*       call display_map
047266 C2 11 74 04 0076*       jp nz, game_playing ; Return to gameplay after map close
04726A C9          0077*       ret
04726B             0078*   
04726B             0079*   game_exit:
04726B             0080*       ; Handle exit logic
04726B CD 7F 72 04 0081*       call save_game
04726F C3 80 72 04 0082*       jp exit_game         ; Safely shut down
047273 C9          0083*       ret
047274             0084*   
047274             0085*   ; ========================
047274             0086*   ; Sub-state branching (Example for player state)
047274             0087*   ; ========================
047274             0088*   
047274             0089*   
047274             0090*   
047274             0091*   
047274             0092*   check_input_menu:
047274 C9          0093*       ret
047275             0094*   
047275             0095*   update_game_world:
047275 C9          0096*       ret
047276             0097*   
047276             0098*   check_game_events:
047276 C9          0099*       ret
047277             0100*   
047277             0101*   check_input_pause:
047277 C9          0102*       ret
047278             0103*   
047278             0104*   load_next_level:
047278 C9          0105*       ret
047279             0106*   
047279             0107*   display_game_over:
047279 C9          0108*       ret
04727A             0109*   
04727A             0110*   display_victory:
04727A C9          0111*       ret
04727B             0112*   
04727B             0113*   load_resources:
04727B C9          0114*       ret
04727C             0115*   
04727C             0116*   play_cutscene:
04727C C9          0117*       ret
04727D             0118*   
04727D             0119*   display_inventory:
04727D C9          0120*       ret
04727E             0121*   
04727E             0122*   display_map:
04727E C9          0123*       ret
04727F             0124*   
04727F             0125*   save_game:
04727F C9          0126*       ret
047280             0127*   
047280             0128*   exit_game:
047280 C9          0129*       ret
047281             0130*   
047281             0065        include "state_game_init.inc"
047281 57 65 6C 63 0001*   hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
04729C 4C 6F 61 64 0002*   loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
0472AA 50 72 65 73 0003*   loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
0472C5 00          0004*   game_assets_loaded: db 0 ; non-zero when assets are loaded
0472C6             0005*   game_init:
0472C6             0006*   ; check whether assets are loaded
0472C6 3A C5 72 04 0007*       ld a,(game_assets_loaded)
0472CA B7          0008*       or a
0472CB C2 51 73 04 0009*       jp nz,@assets_loaded
0472CF             0010*   ; clear all buffers
0472CF CD 2A 18 04 0011*       call vdu_clear_all_buffers
0472D3             0012*   ; load fonts
0472D3 CD 00 11 04 0013*   	call fonts_load
0472D7             0014*   ; select font
0472D7 21 02 FA 00 0015*       ld hl,computer_pixel_7_8x16
0472DB 3E 01       0016*       ld a,1 ; flags
0472DD CD 00 1A 04 0017*       call vdu_font_select
0472E1             0018*   ; print loading ui message
0472E1 CD 4B 16 04 0019*       call vdu_cls
0472E5 21 6A 1D 04 0020*       ld hl,loading_ui
0472E9 CD 07 01 04 0021*       call printString
0472ED CD 50 16 04 0022*       call vdu_flip
0472F1             0023*   ; load UI images
0472F1 CD CA 12 04 0024*       call load_ui_images
0472F5             0025*   ; set up the display
0472F5 3E 08       0026*       ld a,8;+128 ; 136   320   240   64    60hz double-buffered
0472F7             0027*       ; ld a,20 ;  512   384   64    60hz single-buffered
0472F7 CD 14 17 04 0028*       call vdu_set_screen_mode
0472FB AF          0029*       xor a
0472FC CD 25 17 04 0030*       call vdu_set_scaling
047300             0031*   ; ; enable additional audio channels
047300             0032*   ; 	call vdu_enable_channels
047300             0033*   ; set text background color
047300 3E 9A       0034*       ld a,26+128 ; violet
047302 CD 7C 16 04 0035*       call vdu_colour_text
047306             0036*   ; set text foreground color
047306 3E 2F       0037*       ld a,47 ; aaaaff lavenderish
047308 CD 7C 16 04 0038*       call vdu_colour_text
04730C             0039*   ; set gfx bg color
04730C AF          0040*       xor a ; plotting mode 0
04730D 3E 9A       0041*       ld a,26+128 ; violet
04730F CD 8D 16 04 0042*       call vdu_gcol
047313 CD 4B 16 04 0043*       call vdu_cls
047317             0044*   ; set the cursor off
047317 CD 13 16 04 0045*       call vdu_cursor_off
04731B             0046*   ; VDU 28, left, bottom, right, top: Set text viewport **
04731B             0047*   ; MIND THE LITTLE-ENDIANESS
04731B             0048*   ; inputs: c=left,b=bottom,e=right,d=top
04731B 0E 00       0049*       ld c,0 ; left
04731D 16 00       0050*       ld d,0 ; top
04731F 1E 27       0051*       ld e,39 ; right
047321 06 00       0052*       ld b,0; bottom
047323 CD A4 16 04 0053*       call vdu_set_txt_viewport
047327             0054*   ; load background and sprite images
047327 CD 09 12 04 0055*       call img_load_init
04732B CD FF 12 04 0056*       call load_backgrounds
04732F CD DD 12 04 0057*       call load_sprite_images
047333             0058*   ; load tileset_ptrs
047333 CD EE 12 04 0059*       call load_tilesets
047337             0060*   ; ; load sound effects ; TODO
047337             0061*   ; 	ld bc,SFX_num_buffers
047337             0062*   ; 	ld hl,SFX_buffer_id_lut
047337             0063*   ; 	ld (cur_buffer_id_lut),hl
047337             0064*   ; 	ld hl,SFX_load_routines_table
047337             0065*   ; 	ld (cur_load_jump_table),hl
047337             0066*   ; 	call sfx_load_main
047337             0067*   ; print loading complete message and wait for user keypress
047337 3E 01       0068*       ld a,1
047339 32 C5 72 04 0069*       ld (game_assets_loaded),a
04733D CD 4B 16 04 0070*       call vdu_cls
047341 21 AA 72 04 0071*       ld hl,loading_complete
047345 CD 07 01 04 0072*       call printString
047349 CD 50 16 04 0073*       call vdu_flip
04734D CD E1 03 04 0074*       call waitKeypress
047351             0075*   @assets_loaded:
047351             0076*   ; set up display for gameplay
047351 3E 14       0077*       ld a,20
047353 CD 14 17 04 0078*       call vdu_set_screen_mode
047357 AF          0079*       xor a
047358 CD 25 17 04 0080*       call vdu_set_scaling
04735C CD 13 16 04 0081*       call vdu_cursor_off
047360             0082*   ; select font
047360 21 03 FA 00 0083*       ld hl,Lat2_VGA8_8x8
047364 3E 01       0084*       ld a,1 ; flags
047366 CD 00 1A 04 0085*       call vdu_font_select
04736A             0086*   ; plot bezel art
04736A 21 06 00 00 0087*       ld hl,BUF_BEZEL_L
04736E CD 38 17 04 0088*       call vdu_buff_select
047372 01 00 00 00 0089*       ld bc,0
047376 11 00 00 00 0090*       ld de,0
04737A CD 20 1B 04 0091*       call vdu_plot_bmp
04737E 21 07 00 00 0092*       ld hl,BUF_BEZEL_R
047382 CD 38 17 04 0093*       call vdu_buff_select
047386 01 80 01 00 0094*       ld bc,384
04738A 11 00 00 00 0095*       ld de,0
04738E CD 20 1B 04 0096*       call vdu_plot_bmp
047392             0097*   ; draw player cockpit
047392 CD 28 6D 04 0098*       call draw_player_cockpit
047396             0099*   ; set gfx origin and viewport to playing field window
047396 01 80 00 00 0100*       ld bc,origin_left
04739A 11 00 00 00 0101*       ld de,origin_top
04739E CD D0 16 04 0102*       call vdu_set_gfx_origin
0473A2 01 00 00 00 0103*       ld bc,field_left
0473A6 11 00 00 00 0104*       ld de,field_top
0473AA DD 21 FF 00 0105*       ld ix,field_right
       00          
0473AF FD 21 7F 01 0106*       ld iy,field_bottom
       00          
0473B4 CD EB 16 04 0107*       call vdu_set_gfx_viewport
0473B8             0108*   ; set background color
0473B8 3E 9A       0109*       ld a,26+128 ; violet
0473BA CD 8D 16 04 0110*       call vdu_gcol
0473BE CD 5E 16 04 0111*       call vdu_clg
0473C2             0112*   ; VDU 28, left, bottom, right, top: Set text viewport **
0473C2 0E 00       0113*       ld c,0 ; left
0473C4 16 00       0114*       ld d,0 ; top
0473C6 1E 3E       0115*       ld e,62 ; right
0473C8 06 30       0116*       ld b,48; bottom
0473CA CD A4 16 04 0117*       call vdu_set_txt_viewport
0473CE             0118*   ; initialize the global timestamp
0473CE CD F9 14 04 0119*       call timestamp_tick
0473D2             0120*   ; reset the sprite table
0473D2 CD 94 82 04 0121*       call table_init
0473D6 21 2A 91 04 0122*       ld hl,table_base
0473DA 22 6F 82 04 0123*       ld (table_pointer),hl
0473DE 22 B5 6C 04 0124*       ld (player_score_last),hl ; anything but zero so print_score will update
0473E2             0125*   ; initialize sprites and active tiles table
0473E2 CD CC 82 04 0126*       call sprites_init
0473E6 CD 94 82 04 0127*       call table_init
0473EA CD 10 79 04 0128*       call tile_table_init
0473EE             0129*   ; initialize the first level
0473EE 3E 00       0130*       ld a,tiles_dg
0473F0 CD 1A 68 04 0131*       call init_tileset
0473F4             0132*   ; initialize player
0473F4 CD 33 6B 04 0133*       call player_init
0473F8             0134*   ; set the game state to playing
0473F8 21 11 74 04 0135*       ld hl,game_playing
0473FC 22 00 72 04 0136*       ld (game_state), hl
047400             0137*   ; set game playing substates
047400 21 12 6B 04 0138*       ld hl,player_alive
047404 22 00 6B 04 0139*       ld (player_state), hl
047408 21 8A 23 04 0140*       ld hl,enemies_alive
04740C 22 7C 23 04 0141*       ld (enemies_state), hl
047410             0142*   ; done initializing
047410 C9          0143*       ret
047411             0144*   ; end game_init
047411             0066        include "state_game_playing.inc"
047411             0001*   ; main game state
047411             0002*   game_playing:
047411             0003*   ; Main gameplay loop
047411             0004*   
047411             0005*   ; plot tiles
047411 CD 12 7B 04 0006*       call tiles_plot
047415             0007*   
047415             0008*   ; set gfx viewport to playing field window
047415 01 00 00 00 0009*       ld bc,field_left
047419 11 00 00 00 0010*       ld de,field_top
04741D DD 21 FF 00 0011*       ld ix,field_right
       00          
047422 FD 21 7F 01 0012*       ld iy,field_bottom
       00          
047427 CD EB 16 04 0013*       call vdu_set_gfx_viewport
04742B             0014*   
04742B             0015*   ; process movement and collisions
04742B CD 07 6B 04 0016*       call do_player
04742F CD 7F 23 04 0017*       call do_enemies
047433 CD 7A 26 04 0018*       call move_explosions
047437 CD 94 7C 04 0019*       call move_tiles
04743B             0020*   
04743B             0021*   ; update UI
04743B 01 00 00 00 0022*       ld bc,0
04743F 11 00 00 00 0023*       ld de,0
047443 CD D0 16 04 0024*       call vdu_set_gfx_origin
047447 CD C9 6C 04 0025*       call print_score
04744B CD 1E 71 04 0026*       call draw_shields
04744F CD C4 6E 04 0027*       call draw_laser
047453 CD 82 6F 04 0028*       call draw_fuel
047457 C9          0029*       ret
047458             0030*   
047458             0067        include "targeting.inc"
047458 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
047500             0002*   
047500             0003*   ; compute orientation to player
047500             0004*   ; based on relative positions
047500             0005*   ; returns: uh.l 16.8 fixed angle256 to player
047500             0006*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
047500             0007*   ;    representing delta-x/y *to* target respectively
047500             0008*   ; inputs: iy pointed at sprite record
047500             0009*   ; destroys: everything except iy (sprite record pointer)
047500             0010*   orientation_to_player:
047500 DD 21 2A 92 0011*       ld ix,player_begin
       04          
047505             0012*   ; compute dx
047505 DD 27 01    0013*       ld hl,(ix+sprite_x)
047508 FD 17 01    0014*       ld de,(iy+sprite_x)
04750B B7          0015*       or a ; clear carry
04750C ED 52       0016*       sbc hl,de ; dx
04750E E5          0017*       push hl ; save dx
04750F             0018*   ; compute dy
04750F DD 27 04    0019*       ld hl,(ix+sprite_y)
047512 FD 17 04    0020*       ld de,(iy+sprite_y)
047515 B7          0021*       or a ; clear carry
047516 ED 52       0022*       sbc hl,de ; dy
047518 EB          0023*       ex de,hl ; de = dy
047519             0024*   ; compute angle to player
047519 C1          0025*       pop bc ; dx (was hl)
04751A C5          0026*       push bc ; save dx
04751B D5          0027*       push de ; save dy
04751C CD 9A 08 04 0028*       call atan2_168fast ; uh.l = angle to player
047520 3E E0       0029*       ld a,%11100000
047522 A5          0030*       and l ; round angle to nearest 32th of a circle
047523 6F          0031*       ld l,a
047524 22 52 75 04 0032*       ld (Bearing_t),hl ; return angle to player
047528 D1          0033*       pop de ; restore dy
047529 C1          0034*       pop bc ; restore dx
04752A C9          0035*       ret
04752B             0036*   ; end orientation_to_player
04752B             0037*   
04752B             0038*   ; compute orientation to player
04752B             0039*   ; based on relative positions
04752B             0040*   ; returns: uh.l 16.8 fixed angle256 to player
04752B             0041*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
04752B             0042*   ;    representing delta-x/y *to* target respectively
04752B             0043*   ; inputs: iy pointed at tile record
04752B             0044*   ; destroys: everything except iy (tile record pointer)
04752B             0045*   tile_orientation_to_player:
04752B DD 21 2A 92 0046*       ld ix,player_begin
       04          
047530             0047*   ; compute dx
047530 DD 27 01    0048*       ld hl,(ix+sprite_x)
047533 FD 17 01    0049*       ld de,(iy+tile_x)
047536 B7          0050*       or a ; clear carry
047537 ED 52       0051*       sbc hl,de ; dx
047539 E5          0052*       push hl ; save dx
04753A             0053*   ; compute dy
04753A DD 27 04    0054*       ld hl,(ix+sprite_y)
04753D FD 17 04    0055*       ld de,(iy+tile_y)
047540 B7          0056*       or a ; clear carry
047541 ED 52       0057*       sbc hl,de ; dy
047543 EB          0058*       ex de,hl ; de = dy
047544             0059*   ; compute angle to player
047544 C1          0060*       pop bc ; dx (was hl)
047545 CD 9A 08 04 0061*       call atan2_168fast ; uh.l = angle to player
047549 3E E0       0062*       ld a,%11100000
04754B A5          0063*       and l ; round angle to nearest 32th of a circle
04754C 6F          0064*       ld l,a
04754D 22 52 75 04 0065*       ld (Bearing_t),hl
047551 C9          0066*       ret
047552             0067*   ; end tile_orientation_to_player
047552             0068*   
047552             0069*   ; targeting_computer variables fixed 16.8 format
047552 00 00 00    0070*   Bearing_t: dl 0x000000 ; angle to target
047555 00 00 00    0071*   Heading_t: dl 0x000000 ; angle of target motion
047558 00 00 00    0072*   Vp: dl 0x000000 ; velocity of projectile
04755B 00 00 00    0073*   Vp_x: dl 0x000000 ; x component of projectile velocity
04755E 00 00 00    0074*   Vp_y: dl 0x000000 ; y component of projectile velocity
047561 00 00 00    0075*   Vt: dl 0x000000 ; velocity of target
047564 00 00 00    0076*   Vt_x: dl 0x000000 ; x component of target velocity
047567 00 00 00    0077*   Vt_y: dl 0x000000 ; y component of target velocity
04756A 00 00 00    0078*   Heading_p: dl 0x000000 ; angle of projectile motion
04756D 00 00 00    0079*   lead_angle: dl 0x000000 ; lead angle
047570             0080*   
047570             0081*   ; Inputs:   Vp velocity of projectile set,
047570             0082*   ;           iy pointed to sprite record,
047570             0083*   ;           player position and velocities correctly set
047570             0084*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
047570             0085*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
047570             0086*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
047570             0087*   targeting_computer:
047570 DD 21 2A 92 0088*       ld ix,player_begin
       04          
047575             0089*   ; ; compute target velocity from x,y component velocities
047575             0090*   ;     ld bc,(ix+sprite_xvel)
047575             0091*   ;     ld de,(ix+sprite_yvel)
047575             0092*   ;     ld hl,-1*256 ; account for vertical ground movement
047575             0093*   ;     add hl,de
047575             0094*   ;     ex de,hl ; ud.e = player_yvel-1
047575             0095*   ;     call cartesian_to_polar_sm ; uh.l = Heading_t, ud.e = Vt
047575             0096*   ;     ld (Heading_t),hl ; PASSES
047575             0097*   ;     ld (Vt),de ; PASSES
047575             0098*   ; ; Bearing_t should have been set by prerequisite call to orientation_to_player
047575             0099*   ; ; compute Heading_t-Bearing_t PASSES
047575             0100*   ;     ld de,(Bearing_t)
047575             0101*   ;     and a ; clear carry
047575             0102*   ;     sbc hl,de ; Uh.l = Heading_t-Bearing_t
047575             0103*   ; ; compute sin(Heading_t-Bearing_t)
047575             0104*   ;     call sin168 ; uh.l = sin(Heading_t-Bearing_t)
047575             0105*   ; ; compute (Vt*sin(Heading_t-Bearing_t))
047575             0106*   ;     ld de,(Vt)
047575             0107*   ;     call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
047575             0108*   ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
047575             0109*   ;     ld de,(Vp)
047575             0110*   ;     call sdiv168 ; ud.e = (Vt*sin(Heading_t-Bearing_t)) / Vp
047575             0111*   ;     ex de,hl ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
047575             0112*   ; ; answer is in radians, convert to degrees256
047575             0113*   ;     ld de,0x0028BE ; 40.74 = 57.29578*256/360
047575             0114*   ;     call smul168 ; uh.l = angle in degrees256
047575             0115*   ;     ld (lead_angle),hl ; TODO: fix this
047575             0116*   ; ; add lead angle to target bearing
047575             0117*   ;     ld de,(Bearing_t)
047575             0118*   ;     add hl,de ; h.l = lead angle+target bearing
047575             0119*   
047575 2A 52 75 04 0120*       ld hl,(Bearing_t) ; TODO: fix this
047579             0121*   
047579 E5          0122*       push hl
04757A             0123*   
04757A             0124*   ; compute component projectile velocities
04757A ED 5B 58 75 0125*       ld de,(Vp) ; Vp should have been set by caller
       04          
04757F CD A0 07 04 0126*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
047583 ED 43 5B 75 0127*       ld (Vp_x),bc
       04          
047588             0128*       ; inc d ; account for vertical ground movement
047588 ED 53 5E 75 0129*       ld (Vp_y),de
       04          
04758D E1          0130*       pop hl ; uh.l = lead angle+target bearing
04758E 22 6A 75 04 0131*       ld (Heading_p),hl
047592             0132*   
047592 C9          0133*       ret
047593             0134*   
047593             0135*   ; debug print the results
047593             0136*       PUSH_ALL
047593 08          0001*M1     ex af,af'
047594 D9          0002*M1     exx
047595 F5          0003*M1     push af
047596 E5          0004*M1     push hl
047597 C5          0005*M1     push bc
047598 D5          0006*M1     push de
047599             0007*M1 
047599 08          0008*M1     ex af,af'
04759A D9          0009*M1     exx
04759B F5          0010*M1     push af
04759C E5          0011*M1     push hl
04759D C5          0012*M1     push bc
04759E D5          0013*M1     push de
04759F DD E5       0014*M1     push ix
0475A1 FD E5       0015*M1     push iy
0475A3 CD 00 16 04 0137*       call vdu_home_cursor
0475A7 CD 1C 01 04 0138*       call printNewLine
0475AB CD 00 01 04 0139*       call printInline
0475AF 42 74 20 00 0140*       asciz "Bt "
0475B3 2A 52 75 04 0141*       ld hl,(Bearing_t)
0475B7 CD 78 02 04 0142*       call print_s168_hl
0475BB             0143*   
0475BB             0144*       ; call printInline
0475BB             0145*       ; asciz "\r\nHt "
0475BB             0146*       ; ld hl,(Heading_t)
0475BB             0147*       ; call print_s168_hl
0475BB             0148*   
0475BB             0149*       ; call printInline
0475BB             0150*       ; asciz "\r\nVt "
0475BB             0151*       ; ld hl,(Vt)
0475BB             0152*       ; call print_s168_hl
0475BB             0153*   
0475BB             0154*       ; call printInline
0475BB             0155*       ; asciz "\r\nVtx"
0475BB             0156*       ; ld hl,(ix+sprite_xvel)
0475BB             0157*       ; call print_s168_hl
0475BB             0158*   
0475BB             0159*       ; call printInline
0475BB             0160*       ; asciz "\r\nVty"
0475BB             0161*       ; ld hl,(ix+sprite_yvel)
0475BB             0162*       ; ld de,-1*256 ; account for vertical ground movement
0475BB             0163*       ; add hl,de
0475BB             0164*       ; call print_s168_hl
0475BB             0165*   
0475BB CD 00 01 04 0166*       call printInline
0475BF 0D 0A 4C 64 0167*       asciz "\r\nLda"
       61 00       
0475C5 2A 6D 75 04 0168*       ld hl,(lead_angle)
0475C9 CD 78 02 04 0169*       call print_s168_hl
0475CD             0170*   
0475CD CD 00 01 04 0171*       call printInline
0475D1 0D 0A 48 70 0172*       asciz "\r\nHp "
       20 00       
0475D7 2A 6A 75 04 0173*       ld hl,(Heading_p)
0475DB CD 78 02 04 0174*       call print_s168_hl
0475DF             0175*   
0475DF             0176*       ; call printInline
0475DF             0177*       ; asciz "\r\nVp "
0475DF             0178*       ; ld hl,(Vp)
0475DF             0179*       ; call print_s168_hl
0475DF             0180*   
0475DF             0181*       ; call printInline
0475DF             0182*       ; asciz "\r\nVpx"
0475DF             0183*       ; ld hl,(Vp_x)
0475DF             0184*       ; call print_s168_hl
0475DF             0185*   
0475DF             0186*       ; call printInline
0475DF             0187*       ; asciz "\r\nVpy"
0475DF             0188*       ; ld hl,(Vp_y)
0475DF             0189*       ; call print_s168_hl
0475DF             0190*   
0475DF             0191*       POP_ALL
0475DF FD E1       0001*M1     pop iy
0475E1 DD E1       0002*M1     pop ix
0475E3 D1          0003*M1     pop de
0475E4 C1          0004*M1     pop bc
0475E5 E1          0005*M1     pop hl
0475E6 F1          0006*M1     pop af
0475E7 08          0007*M1     ex af,af'
0475E8 D9          0008*M1     exx
0475E9             0009*M1 
0475E9 D1          0010*M1     pop de
0475EA C1          0011*M1     pop bc
0475EB E1          0012*M1     pop hl
0475EC F1          0013*M1     pop af
0475ED 08          0014*M1     ex af,af'
0475EE D9          0015*M1     exx
0475EF C9          0192*       ret
0475F0             0068        include "tile_table.inc"
0475F0             0001*   ; ###### tile TABLE FIELD INDICES ######
0475F0             0002*   tile_table_record_size:         equ  64; 41 bytes ;41 bytes per tile record
0475F0             0003*   tile_id:                 equ   0; 1 bytes ;unique tileId, zero-based
0475F0             0004*   ; tile state variables
0475F0             0005*   tile_state_variables:    equ   1; beginning of tile state variables
0475F0             0006*   tile_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
0475F0             0007*   tile_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
0475F0             0008*   tile_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
0475F0             0009*   tile_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
0475F0             0010*   tile_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
0475F0             0011*   tile_heading:            equ  16; 3 bytes ;tile movement direction deg256 16.8 fixed
0475F0             0012*   tile_orientation:        equ  19; 3 bytes ;orientation bits
0475F0             0013*   ; tile definition variables
0475F0             0014*   tile_definitions:        equ  22; beginnning of tile definition variables
0475F0             0015*   tile_type:               equ  22; 1 bytes ;type of tile as defined in enemies.inc
0475F0             0016*   tile_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
0475F0             0017*   tile_move_program:       equ  26; 3 bytes ;address of tile's behavior subroutine
0475F0             0018*   tile_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
0475F0             0019*   tile_dim_x:              equ  30; 1 bytes ;tile width in pixels
0475F0             0020*   tile_dim_y:              equ  31; 1 bytes ;tile height in pixels
0475F0             0021*   tile_num_orientations:   equ  32; 1 bytes ;number of orientations for this tile
0475F0             0022*   tile_num_animations:     equ  33; 1 bytes ;number of animations for this tile
0475F0             0023*   tile_animation:          equ  34; 1 bytes ;current animation index, zero-based
0475F0             0024*   tile_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
0475F0             0025*   tile_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
0475F0             0026*   tile_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
0475F0             0027*   tile_points:             equ  38; 1 bytes ;points awarded for killing this tile type
0475F0             0028*   tile_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
0475F0             0029*   tile_frame:              equ  40; 1 bytes ;current animation frame
0475F0             0030*   
0475F0             0031*   ; ###### tile TABLE VARIABLES ######
0475F0 FF FF FF FF 0032*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
047600 00 00 00 00 0033*   tile_stack: blkb 256*3,0 ; stack of pointers to tile records
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047900 00 00 00    0034*       dl 0 ; list terminator
047903             0035*   tile_stack_end:
047903 00 76 04    0036*   tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
047906 2A 96 04    0037*   tile_table_pointer: dl tile_table_base ; pointer to top address of current record, initialized to tile_table_base
047909 00 00 00    0038*   num_active_tiles: dl 0 ; how many active tiles
04790C 00          0039*   next_tile_id: db 0 ; next available tile id
04790D 00 00 00    0040*   new_tile_table_pointer: dl 0 ; pointer to new tile record
047910             0041*   
047910             0042*   tile_table_init:
047910             0043*   ; reset num active tiles
047910 21 00 00 00 0044*       ld hl,0
047914 22 09 79 04 0045*       ld (num_active_tiles),hl
047918             0046*   ; reset next tile id
047918 AF          0047*       xor a
047919 32 0C 79 04 0048*       ld (next_tile_id),a
04791D             0049*   ; clear the tile stack
04791D AF          0050*       xor a ; write zeroes to tile stack
04791E 21 00 76 04 0051*       ld hl,tile_stack
047922 01 03 03 00 0052*       ld bc,tile_stack_end-tile_stack
047926 CD E6 03 04 0053*       call clear_mem
04792A             0054*   ; clear the tile table
04792A AF          0055*       xor a ; write zeroes to tile table
04792B 21 2A 96 04 0056*       ld hl,tile_table_base ; address to copy from
04792F 01 00 40 00 0057*       ld bc,tile_table_end-tile_table_base ; number of bytes to clear
047933 CD E6 03 04 0058*       call clear_mem
047937             0059*   ; write tile ids
047937 DD 21 2A 96 0060*       ld ix,tile_table_base
       04          
04793C AF          0061*       xor a ; tile id
04793D 06 00       0062*       ld b,0 ; loop counter
04793F             0063*   @loop:
04793F DD 77 00    0064*       ld (ix+tile_id),a
047942 ED 32 40    0065*       lea ix,ix+table_record_size
047945 3C          0066*       inc a
047946 10 F7       0067*       djnz @loop
047948             0068*   ; set pointers to top of tile stack and tile table
047948 21 0C 79 04 0069*       ld hl,next_tile_id
04794C 3E FF       0070*       ld a,255 ; will wrap around to 0 on first call to create active tile
04794E 77          0071*       ld (hl),a
04794F 21 2A 96 04 0072*       ld hl,tile_table_base
047953 22 06 79 04 0073*       ld (tile_table_pointer),hl
047957 21 00 76 04 0074*       ld hl,tile_stack
04795B 22 03 79 04 0075*       ld (tile_stack_pointer),hl
04795F C9          0076*       ret
047960             0077*   ; end tile_table_init
047960             0078*   
047960             0079*   ; gets the next available tile id
047960             0080*   ; inputs; none
047960             0081*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
047960             0082*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
047960             0083*   ; destroys: a,hl,ix
047960             0084*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
047960             0085*   tile_table_get_next_id:
047960 21 09 79 04 0086*       ld hl,num_active_tiles
047964 34          0087*       inc (hl)
047965 C2 6C 79 04 0088*       jp nz,@F ; check rollover to > 256 active tiles
047969 35          0089*       dec (hl) ; undo increment
04796A AF          0090*       xor a ; reset carry flag indicating that we didn't find a free tile
04796B C9          0091*       ret
04796C             0092*   @@:
04796C 7E          0093*       ld a,(hl) ; number of active tiles
04796D             0094*   ; point ix to next tile record
04796D 21 0C 79 04 0095*       ld hl,next_tile_id
047971 34          0096*       inc (hl)
047972 56          0097*       ld d,(hl) ; index into tile table
047973 1E 40       0098*       ld e,tile_table_record_size
047975 ED 5C       0099*       mlt de ; de is now the offset to the table entry
047977 DD 21 2A 96 0100*       ld ix,tile_table_base ; point to base address of tile table
       04          
04797C DD 19       0101*       add ix,de ; ix is now the address of the table entry
04797E             0102*   ; add tile pointer to tile stack
04797E 21 00 76 04 0103*       ld hl,tile_stack
047982 57          0104*       ld d,a ; number of active tiles
047983 15          0105*       dec d ; zero-based index
047984 1E 03       0106*       ld e,3 ; three bytes per tile record
047986 ED 5C       0107*       mlt de ; offset into tile stack
047988 19          0108*       add hl,de ; hl points to top of the active tiles
047989 ED 3F       0109*       ld (hl),ix
04798B             0110*   ; return tile id
04798B DD 7E 00    0111*       ld a,(ix+tile_id)
04798E 37          0112*       scf ; sets carry flag indicating we found a free tile
04798F C9          0113*       ret ; done
047990             0114*   ; end tile_table_get_next_id
047990             0115*   
047990             0116*   ; deactivate the tile with the given id
047990             0117*   ; inputs: tile_stack_pointer set to record to remove
047990             0118*   ; outputs: decrements num_active_tiles by one, tile_stack_pointer set to record above removed record, removes tile pointer from the tile stack, shifts stack records above it down one position
047990             0119*   ; destroys: a,hl,bc,de
047990             0120*   table_deactivate_tile:
047990             0121*   ; compute address to copy from
047990 2A 03 79 04 0122*       ld hl,(tile_stack_pointer)
047994 23          0123*       inc hl
047995 23          0124*       inc hl
047996 23          0125*       inc hl
047997 E5          0126*       push hl ; save copy from address
047998             0127*   ; compute bytes to copy
047998 3A 09 79 04 0128*       ld a,(num_active_tiles)
04799C 6F          0129*       ld l,a
04799D 26 03       0130*       ld h,3
04799F ED 6C       0131*       mlt hl
0479A1 11 00 76 04 0132*       ld de,tile_stack
0479A5 19          0133*       add hl,de ; hl = bottom of stack address
0479A6 ED 5B 03 79 0134*       ld de,(tile_stack_pointer)
       04          
0479AB B7          0135*       or a ; clear carry
0479AC ED 52       0136*       sbc hl,de ; hl = bytes to copy
0479AE E5          0137*       push hl
0479AF C1          0138*       pop bc ; bytes to copy
0479B0             0139*   ; compute target address
0479B0 ED 5B 03 79 0140*       ld de,(tile_stack_pointer)
       04          
0479B5             0141*   ; copy bytes
0479B5 E1          0142*       pop hl ; copy from address
0479B6 ED B0       0143*       ldir
0479B8             0144*   ; update stack pointer and active tile count
0479B8 21 09 79 04 0145*       ld hl,num_active_tiles
0479BC 35          0146*       dec (hl)
0479BD 2A 03 79 04 0147*       ld hl,(tile_stack_pointer)
0479C1 2B          0148*       dec hl
0479C2 2B          0149*       dec hl
0479C3 2B          0150*       dec hl
0479C4 22 03 79 04 0151*       ld (tile_stack_pointer),hl
0479C8 C9          0152*       ret
0479C9             0153*   ; end table_deactivate_tile
0479C9             0154*   
0479C9             0155*   ; spawn a new active tile at the prescribed location
0479C9             0156*   ; inputs: hl = pointer to new tile default settings, tiles_x_plot, tiles_y_plot = x,y position
0479C9             0157*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
0479C9             0158*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
0479C9             0159*   ; destroys: a,hl,bc,de,ix
0479C9             0160*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
0479C9             0161*   spawn_active_tile:
0479C9 E5          0162*       push hl ; back up pointer to new tile defaults
0479CA CD 60 79 04 0163*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
0479CE E1          0164*       pop hl ; restore pointer to new tile defaults
0479CF D0          0165*       ret nc ; no carry means no free tile slots, so we go home
0479D0             0166*   ; copy default settings to new tile
0479D0 DD 22 0D 79 0167*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
0479D5 ED 32 16    0168*       lea ix,ix+tile_definitions ; bump pointer to copy to
0479D8 DD E5       0169*       push ix ; pointer to default tile settings
0479DA D1          0170*       pop de ; address to copy to
0479DB 01 2A 00 00 0171*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
0479DF ED B0       0172*       ldir ; copies defaults to new tile record
0479E1             0173*   ; copy tile position from inputs
0479E1 DD 2A 0D 79 0174*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
0479E6 2A 0A 7B 04 0175*       ld hl,(tiles_x_plot-1) ; shift up one byte to get 16.8 fixed point
0479EA DD 2F 01    0176*       ld (ix+tile_x),hl
0479ED 2A 0E 7B 04 0177*       ld hl,(tiles_y_plot-1) ; shift up one byte to get 16.8 fixed point
0479F1 DD 2F 04    0178*       ld (ix+tile_y),hl
0479F4             0179*   ; set default tile velocities
0479F4 21 00 00 00 0180*       ld hl,0
0479F8 DD 2F 07    0181*       ld (ix+tile_xvel),hl
0479FB 21 00 01 00 0182*       ld hl,1*256 ; 1 pixel per frame
0479FF DD 2F 0A    0183*       ld (ix+tile_yvel),hl
047A02             0184*   ; return to caller
047A02 DD CB 16 FE 0185*       set 7,(ix+sprite_type) ; set just spawned flag
047A06 DD CB 1D F6 0186*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
047A0A 37          0187*       scf ; set carry flag to indicate success
047A0B C9          0188*       ret
047A0C             0189*   ; end spawn_active_tile
047A0C             0190*   
047A0C             0191*   ; spawn a new active tile at the prescribed location
047A0C             0192*   ; inputs: iy pointer to current hl = pointer to new tile default settings
047A0C             0193*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
047A0C             0194*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
047A0C             0195*   ; destroys: a,hl,bc,de,ix
047A0C             0196*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
047A0C             0197*   spawn_active_tile_from_sprite:
047A0C E5          0198*       push hl ; back up pointer to new tile defaults
047A0D CD 60 79 04 0199*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
047A11 E1          0200*       pop hl ; restore pointer to new tile defaults
047A12 D0          0201*       ret nc ; no carry means no free tile slots, so we go home
047A13             0202*   ; copy default settings to new tile
047A13 DD 22 0D 79 0203*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
047A18 ED 32 16    0204*       lea ix,ix+tile_definitions ; bump pointer to copy to
047A1B DD E5       0205*       push ix ; pointer to default tile settings
047A1D D1          0206*       pop de ; address to copy to
047A1E 01 2A 00 00 0207*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
047A22 ED B0       0208*       ldir ; copies defaults to new tile record
047A24             0209*   ; copy tile position from existing sprite
047A24 DD 2A 0D 79 0210*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
047A29 FD 2A 6F 82 0211*       ld iy,(table_pointer) ; get existing sprite record
       04          
047A2E FD 27 01    0212*       ld hl,(iy+sprite_x)
047A31 DD 2F 01    0213*       ld (ix+tile_x),hl
047A34 FD 27 04    0214*       ld hl,(iy+sprite_y)
047A37 DD 2F 04    0215*       ld (ix+tile_y),hl
047A3A             0216*   ; set default tile velocities
047A3A 21 00 00 00 0217*       ld hl,0
047A3E DD 2F 07    0218*       ld (ix+tile_xvel),hl
047A41 21 00 01 00 0219*       ld hl,1*256 ; 1 pixel per frame
047A45 DD 2F 0A    0220*       ld (ix+tile_yvel),hl
047A48             0221*   ; return to caller
047A48 DD CB 16 FE 0222*       set 7,(ix+sprite_type) ; set just spawned flag
047A4C DD CB 1D F6 0223*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
047A50 37          0224*       scf ; set carry flag to indicate success
047A51 C9          0225*       ret
047A52             0226*   ; end spawn_active_tile_from_sprite
047A52             0227*   
047A52             0228*   ; compute animation frame based on tile_animation and tile_heading
047A52             0229*   ; inputs: iy set to tile record
047A52             0230*   ; outputs: a, tile_frame set to animation frame
047A52             0231*   ; destroys: a,hl
047A52             0232*   tile_frame_heading_animation:
047A52 FD 7E 11    0233*       ld a,(iy+tile_heading+1) ; we want the integer portion
047A55 CB 3F       0234*       srl a ; divide integer portion by 8
047A57 CB 3F       0235*       srl a
047A59 CB 3F       0236*       srl a
047A5B FD 66 22    0237*       ld h,(iy+tile_animation)
047A5E 2E 20       0238*       ld l,32 ; 32 orientation frames per animation
047A60 ED 6C       0239*       mlt hl ; hl = offset from base animation
047A62 85          0240*       add a,l ; modulo256 since tile_frame is only 1 byte
047A63 FD 77 28    0241*       ld (iy+tile_frame),a
047A66 C9          0242*       ret
047A67             0243*   ; end tile_frame_heading_animation
047A67             0244*   
047A67             0245*   ; compute animation frame based on tile_heading
047A67             0246*   ; inputs: iy set to tile record
047A67             0247*   ; outputs: a, tile_frame set to animation frame
047A67             0248*   ; destroys: a,hl
047A67             0249*   tile_frame_heading:
047A67 FD 7E 11    0250*       ld a,(iy+tile_heading+1) ; we want the integer portion
047A6A CB 3F       0251*       srl a ; divide integer portion by 8
047A6C CB 3F       0252*       srl a
047A6E CB 3F       0253*       srl a
047A70 FD 77 28    0254*       ld (iy+tile_frame),a
047A73 C9          0255*       ret
047A74             0256*   ; end tile_frame_heading
047A74             0069        include "tiles.inc"
047A74 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
047B00 00 00 00    0002*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
047B03 00 00 00    0003*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
047B06             0004*       ; initialize to zero for a maximum of 256 rows in a level
047B06 00          0005*   tiles_cols: db 0 ; number of tile columns in the current level
047B07             0006*   
047B07 00 00 00    0007*   cur_baseBufferId: dl 0
047B0A 00          0008*       db 0 ; padding for byte-shifting
047B0B 00 00 00    0009*   tiles_x_plot: dl 0
047B0E 00          0010*       db 0 ; padding for byte-shifting
047B0F F1 FF FF    0011*   tiles_y_plot: dl -15
047B12             0012*   
047B12             0013*   tiles_plot:
047B12             0014*   ; set gfx origin to playing field window
047B12 01 80 00 00 0015*       ld bc,origin_left
047B16 11 00 00 00 0016*       ld de,origin_top
047B1A CD D0 16 04 0017*       call vdu_set_gfx_origin
047B1E             0018*   ; set gfx viewport to playing field window
047B1E 01 00 00 00 0019*       ld bc,field_left
047B22 11 00 00 00 0020*       ld de,field_top
047B26 DD 21 FF 00 0021*       ld ix,field_right
       00          
047B2B FD 21 7F 01 0022*       ld iy,field_bottom
       00          
047B30 CD EB 16 04 0023*       call vdu_set_gfx_viewport
047B34             0024*   ; move the background down one pixel
047B34 3E 02       0025*       ld a,2 ; current gfx viewport
047B36 2E 02       0026*       ld l,2 ; direction=down
047B38 26 01       0027*       ld h,1 ; speed=1 px
047B3A CD 63 16 04 0028*       call vdu_scroll_down
047B3E             0029*   ; set gfx viewport to one scanline to optimise plotting tiles
047B3E 01 00 00 00 0030*       ld bc,0 ; leftmost x-coord
047B42 11 00 00 00 0031*       ld de,0 ; topmost y-coord
047B46 DD 21 FF 00 0032*       ld ix,255 ; rightmost x-coord
       00          
047B4B FD 21 00 00 0033*       ld iy,0 ; bottommost y-coord
       00          
047B50 CD EB 16 04 0034*       call vdu_set_gfx_viewport
047B54             0035*   ; plot the background
047B54 CD 18 7C 04 0036*       call bg_plot
047B58             0037*   ; initialize tiles loop
047B58 21 00 00 00 0038*       ld hl,0 ; init plotting x-coordinate
047B5C 22 0B 7B 04 0039*       ld (tiles_x_plot),hl
047B60 2A 00 7B 04 0040*       ld hl,(tiles_row_defs)
047B64 3A 06 7B 04 0041*       ld a,(tiles_cols)
047B68 47          0042*       ld b,a ; column loop counter
047B69             0043*   @loop:
047B69 C5          0044*       push bc ; save the loop counter
047B6A             0045*   ; read the tile defintion for the current column
047B6A 7E          0046*       ld a,(hl) ; a has tile definition
047B6B E5          0047*       push hl ; save pointer to tile definition
047B6C 2A 07 7B 04 0048*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
047B70 6F          0049*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
047B71 CD 38 17 04 0050*       call vdu_buff_select ; tile bitmap buffer is now active
047B75             0051*   ; plot the active bitmap
047B75 ED 4B 0B 7B 0052*       ld bc,(tiles_x_plot)
       04          
047B7A ED 5B 0F 7B 0053*       ld de,(tiles_y_plot)
       04          
047B7F CD 20 1B 04 0054*       call vdu_plot_bmp
047B83             0055*   ; bump x-coords the width of one tile and save it
047B83 2A 0B 7B 04 0056*       ld hl,(tiles_x_plot)
047B87 01 10 00 00 0057*       ld bc,16
047B8B 09          0058*       add hl,bc
047B8C 22 0B 7B 04 0059*       ld (tiles_x_plot),hl
047B90             0060*   ; prepare to loop to next column
047B90 E1          0061*       pop hl ; get back pointer to tile def
047B91 23          0062*       inc hl ; bump it to the next column
047B92 C1          0063*       pop bc ; snag our loop counter
047B93 10 D4       0064*       djnz @loop
047B95             0065*   ; increment tiles plotting y-coordinate
047B95             0066*   ; (we use ix b/c we want to preserve hl for the next step)
047B95 DD 2A 0F 7B 0067*       ld ix,(tiles_y_plot)
       04          
047B9A 11 01 00 00 0068*       ld de,1
047B9E DD 19       0069*       add ix,de
047BA0 DD 22 0F 7B 0070*       ld (tiles_y_plot),ix
       04          
047BA5 DD 7D       0071*       ld a,ixl
047BA7 FE 01       0072*       cp 1
047BA9 C0          0073*       ret nz
047BAA             0074*   ; do active tiles
047BAA E5          0075*       push hl ; save pointer to next row tile def
047BAB CD CE 7B 04 0076*       call do_active_tiles
047BAF E1          0077*       pop hl ; get back pointer to next row tile def
047BB0             0078*   ; time to bump tiles_row_defs to next row
047BB0             0079*   ; (hl was already there at the end of the loop)
047BB0 22 00 7B 04 0080*       ld (tiles_row_defs),hl
047BB4             0081*   ; reset coords to plot next row of tiles
047BB4 21 00 00 00 0082*       ld hl,0
047BB8 22 0B 7B 04 0083*       ld (tiles_x_plot),hl
047BBC 21 F1 FF FF 0084*       ld hl,-15
047BC0 22 0F 7B 04 0085*       ld (tiles_y_plot),hl
047BC4             0086*   ; decrement tiles row counter
047BC4 21 03 7B 04 0087*       ld hl,tiles_row
047BC8 35          0088*       dec (hl)
047BC9 C0          0089*       ret nz
047BCA             0090*   @inc_level:
047BCA C3 6C 68 04 0091*       jp next_level
047BCE             0092*   ; end tiles_plot
047BCE             0093*   
047BCE             0094*   do_active_tiles:
047BCE             0095*   ; initialize tiles loop
047BCE 21 00 00 00 0096*       ld hl,0 ; init plotting x-coordinate
047BD2 22 0B 7B 04 0097*       ld (tiles_x_plot),hl
047BD6 2A 00 7B 04 0098*       ld hl,(tiles_row_defs)
047BDA 3A 06 7B 04 0099*       ld a,(tiles_cols)
047BDE 47          0100*       ld b,a ; column loop counter
047BDF             0101*   @loop:
047BDF C5          0102*       push bc ; save the loop counter
047BE0             0103*   ; read the tile defintion for the current column
047BE0 7E          0104*       ld a,(hl) ; a has tile definition
047BE1 E5          0105*       push hl ; save pointer to tile definition
047BE2 B7          0106*       or a ; check for null tile
047BE3 CA FF 7B 04 0107*       jp z,@next_tile ; skip to next tile if null
047BE7 FE 11       0108*       cp 17 ; carry reset if active tile
047BE9 D2 FF 7B 04 0109*       jp nc,@next_tile ; skip to next tile if not active
047BED             0110*   ; call the tile activation routine
047BED 21 50 7C 04 0111*       ld hl,tile_activation_routines
047BF1 16 03       0112*       ld d,3 ; three bytes per table entry
047BF3 5F          0113*       ld e,a ; a is the tile type
047BF4 ED 5C       0114*       mlt de ; de is now the offset to the table entry
047BF6 19          0115*       add hl,de ; hl is now the address of the table entry
047BF7 ED 27       0116*       ld hl,(hl) ; hl is now the activation routine address
047BF9             0117*       CALL_HL ; call the activation routine
047BF9 01 FF 7B 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
047BFD C5          0002*M1     push bc ; which constitutes the return address
047BFE E9          0003*M1     jp (hl) ; Jump to the address in HL
047BFF             0118*   @next_tile:
047BFF             0119*   ; bump x-coords the width of one tile and save it
047BFF 2A 0B 7B 04 0120*       ld hl,(tiles_x_plot)
047C03 01 10 00 00 0121*       ld bc,16
047C07 09          0122*       add hl,bc
047C08 22 0B 7B 04 0123*       ld (tiles_x_plot),hl
047C0C             0124*   ; prepare to loop to next column
047C0C E1          0125*       pop hl ; get back pointer to tile def
047C0D 23          0126*       inc hl ; bump it to the next column
047C0E C1          0127*       pop bc ; snag our loop counter
047C0F 10 CE       0128*       djnz @loop
047C11 C9          0129*       ret ; done
047C12             0130*   ; end do_active_tiles
047C12             0131*   
047C12 FF FF FF    0132*   bg_y_plot: dl -1
047C15 00 04 00    0133*   bg_bufferId: dl BUF_BG_STARS_0 ; default bufferId for background tiles
047C18             0134*   
047C18             0135*   bg_plot: ; TODO: implement this
047C18             0136*   ; load current bg tile bufferId as default
047C18 2A 15 7C 04 0137*       ld hl,(bg_bufferId)
047C1C             0138*   ; check whether it is time for a new background tile
047C1C 3A 12 7C 04 0139*       ld a,(bg_y_plot)
047C20 3C          0140*       inc a
047C21 32 12 7C 04 0141*       ld (bg_y_plot),a
047C25 C2 3D 7C 04 0142*       jp nz,@F ; not time for a new tile so draw current one
047C29             0143*   ; load the next background tile
047C29 21 00 04 00 0144*       ld hl,BUF_BG_STARS_0
047C2D CD AE 05 04 0145*       call rand_8
047C31 E6 07       0146*       and %0000111
047C33 85          0147*       add a,l
047C34 6F          0148*       ld l,a
047C35 3E 00       0149*       ld a,0
047C37 8C          0150*       adc a,h
047C38 67          0151*       ld h,a
047C39 22 15 7C 04 0152*       ld (bg_bufferId),hl
047C3D             0153*   @@:
047C3D CD 38 17 04 0154*       call vdu_buff_select
047C41 01 00 00 00 0155*       ld bc,0
047C45 ED 5B 12 7C 0156*       ld de,(bg_y_plot)
       04          
047C4A 13          0157*       inc de
047C4B CD 20 1B 04 0158*       call vdu_plot_bmp
047C4F C9          0159*       ret
047C50             0160*   ; end bg_plot
047C50             0070        include "tiles_active.inc"
047C50             0001*   
047C50             0002*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
047C50             0003*   tile_pad_small: equ 1
047C50             0004*   tile_pad_med: equ 2
047C50             0005*   tile_pad_large: equ 3
047C50             0006*   tile_charge_shields: equ 4
047C50             0007*   tile_turret_fireball: equ 5
047C50             0008*   tile_laser_turret: equ 6
047C50             0009*   tile_twin_laser_turret: equ 7
047C50             0010*   tile_charge_fuel: equ 8
047C50             0011*   tile_electrode: equ 9
047C50             0012*   tile_lightning: equ 10
047C50             0013*   ; tile_electrode_r: equ 11 ; same as tile_electrode
047C50             0014*   tile_12: equ 12
047C50             0015*   tile_13: equ 13
047C50             0016*   tile_14: equ 14
047C50             0017*   tile_15: equ 15
047C50             0018*   tile_crater: equ 16
047C50             0019*   
047C50             0020*   tile_activation_routines:
047C50 80 7C 04    0021*       dl activate_null_tile ; dummy spacer since tiled is 1-based
047C53 13 81 04    0022*       dl activate_pad_small
047C56 80 7C 04    0023*       dl activate_null_tile
047C59 80 7C 04    0024*       dl activate_null_tile
047C5C 80 7C 04    0025*       dl activate_null_tile
047C5F 13 82 04    0026*       dl activate_turret_fireball
047C62 80 7C 04    0027*       dl activate_null_tile
047C65 80 7C 04    0028*       dl activate_null_tile
047C68 80 7C 04    0029*       dl activate_null_tile
047C6B 13 7F 04    0030*       dl activate_electrode
047C6E 13 80 04    0031*       dl activate_lightning
047C71 13 7F 04    0032*       dl activate_electrode
047C74 80 7C 04    0033*       dl activate_null_tile
047C77 80 7C 04    0034*       dl activate_null_tile
047C7A 80 7C 04    0035*       dl activate_null_tile
047C7D 13 7E 04    0036*       dl activate_crater
047C80             0037*   ; end tile_activation_routines
047C80             0038*   
047C80             0039*   activate_null_tile:
047C80 C9          0040*       ret ; dummy routine, do nothing
047C81             0041*   move_active_tile:
047C81             0042*   ; y-axis movement
047C81 FD 27 04    0043*       ld hl,(iy+tile_y)
047C84 FD 17 0A    0044*       ld de,(iy+tile_yvel)
047C87 19          0045*       add hl,de
047C88 FD 2F 04    0046*       ld (iy+tile_y),hl
047C8B             0047*   ; detect screen edge collisions
047C8B             0048*   ; y-axis bottom is all we need to test
047C8B 11 00 80 FE 0049*       ld de,-tile_bottom*256
047C8F ED 5A       0050*       adc hl,de
047C91 F8          0051*       ret m ; still on screen so do nothing further
047C92 AF          0052*       xor a ; signal caller that tile has scrolled off screen
047C93 C9          0053*       ret
047C94             0054*   ; end move_active_tile
047C94             0055*   
047C94             0056*   move_tiles:
047C94             0057*   ; initialize pointers and loop counter
047C94 FD 21 00 76 0058*       ld iy,tile_stack ; set iy to first record in table
       04          
047C99             0059*   @move_loop:
047C99 FD 22 03 79 0060*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
047C9E FD 7E 02    0061*       ld a,(iy+2)
047CA1 B7          0062*       or a ; will be zero if at end of stack
047CA2 C8          0063*       ret z ; end of stack so we're done
047CA3             0064*   ; point iy to tile record
047CA3 FD 37 00    0065*       ld iy,(iy) ; iy points to the current tile record
047CA6 FD 22 06 79 0066*       ld (tile_table_pointer),iy ; update table pointer
       04          
047CAB             0067*   ; check top bit of tile_type to see if tile is just spawned
047CAB FD CB 16 7E 0068*       bit 7,(iy+tile_type)
047CAF C2 CD 7C 04 0069*       jp nz,@just_spawned ; if just spawned, skip to next record
047CB3             0070*   ; check sprite_alive bit to see if tile is active
047CB3 FD CB 1D 76 0071*       bit sprite_alive,(iy+sprite_collisions)
047CB7 C8          0072*       ret z ; end of stack so we're done
047CB8             0073*   ; otherwise we prepare to move the tile
047CB8 FD 27 1A    0074*       ld hl,(iy+tile_move_program) ; load the behavior subroutine address
047CBB             0075*       CALL_HL
047CBB 01 C1 7C 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
047CBF C5          0002*M1     push bc ; which constitutes the return address
047CC0 E9          0003*M1     jp (hl) ; Jump to the address in HL
047CC1             0076*    ; get back stack pointer and loop
047CC1             0077*   @next_record:
047CC1 FD 2A 03 79 0078*       ld iy,(tile_stack_pointer)
       04          
047CC6 ED 33 03    0079*       lea iy,iy+3 ; next tile stack record
047CC9 C3 99 7C 04 0080*       jp @move_loop ; loop until we've checked all the records
047CCD             0081*   @just_spawned:
047CCD FD CB 16 BE 0082*       res 7,(iy+tile_type) ; clear just spawned flag
047CD1 C3 C1 7C 04 0083*       jp @next_record
047CD5             0084*   ; end move_tiles
047CD5             0085*   
047CD5             0086*   draw_active_tile:
047CD5 FD 27 17    0087*       ld hl,(iy+tile_base_bufferId)
047CD8 FD 7E 28    0088*       ld a,(iy+tile_frame)
047CDB 85          0089*       add a,l ; TODO: with a little work we could make all tile base buffer ids align to 256
047CDC 6F          0090*       ld l,a
047CDD 3E 00       0091*       ld a,0 ; preserve carry
047CDF 8C          0092*       adc a,h
047CE0 67          0093*       ld h,a
047CE1 CD 38 17 04 0094*       call vdu_buff_select ; buffer id of animation frame
047CE5 FD 07 01    0095*       ld bc,(iy+tile_x)
047CE8 FD 17 04    0096*       ld de,(iy+tile_y)
047CEB CD 3C 1B 04 0097*       call vdu_plot_bmp168
047CEF C9          0098*       ret
047CF0             0099*   ; end draw_active_tile
047CF0             0100*   
047CF0             0101*   ; create a new sprite at the same location as the current tile
047CF0             0102*   ; inputs: hl = pointer to new sprite default settings, tile_table_pointer = current tile
047CF0             0103*   ;         ix = pointer to sprite group, b = number of records in sprite group
047CF0             0104*   spawn_sprite_from_tile:
047CF0 E5          0105*       push hl ; back up pointer to new sprite defaults
047CF1 CD 1A 83 04 0106*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
047CF5 E1          0107*       pop hl ; restore pointer to new sprite defaults
047CF6 D0          0108*       ret nc ; no carry means no free sprite slots, so we go home
047CF7             0109*   ; copy default settings to new sprite
047CF7 DD E5       0110*       push ix ; back up pointer to new sprite record
047CF9 ED 32 16    0111*       lea ix,ix+sprite_definitions ; bump pointer to copy to
047CFC DD E5       0112*       push ix ; pointer to default sprite settings
047CFE D1          0113*       pop de ; address to copy to
047CFF 01 2A 00 00 0114*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
047D03 ED B0       0115*       ldir ; copies defaults to new sprite record
047D05 DD E1       0116*       pop ix ; restore pointer to new sprite record
047D07             0117*   ; copy sprite position from existing tile
047D07 FD 2A 06 79 0118*       ld iy,(tile_table_pointer) ; get existing tile record
       04          
047D0C FD 27 01    0119*       ld hl,(iy+tile_x)
047D0F DD 2F 01    0120*       ld (ix+sprite_x),hl
047D12 FD 27 04    0121*       ld hl,(iy+tile_y)
047D15 DD 2F 04    0122*       ld (ix+sprite_y),hl
047D18             0123*   ; return to caller
047D18 DD CB 16 FE 0124*       set 7,(ix+sprite_type) ; set just spawned flag
047D1C DD CB 1D F6 0125*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
047D20 37          0126*       scf ; set carry flag to indicate success
047D21 C9          0127*       ret
047D22             0128*   ; end spawn_sprite_from_tile
047D22             0129*   
047D22             0130*   ; create a new tile at the same location as the current tile
047D22             0131*   ; inputs: tile_table_pointer = current tile
047D22             0132*   spawn_active_tile_from_tile:
047D22             0133*   ; copy default settings to new tile
047D22 DD 2A 06 79 0134*       ld ix,(tile_table_pointer) ; get existing tile record
       04          
047D27 ED 32 16    0135*       lea ix,ix+tile_definitions ; bump pointer to copy to
047D2A DD E5       0136*       push ix ; pointer to default tile settings
047D2C D1          0137*       pop de ; address to copy to
047D2D 01 2A 00 00 0138*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
047D31 ED B0       0139*       ldir ; copies defaults to new tile record
047D33 DD 2A 06 79 0140*       ld ix,(tile_table_pointer) ; restore pointer to new tile record
       04          
047D38 C9          0141*       ret
047D39             0142*   ; end spawn_active_tile_from_tile
047D39             0071        include "tile_crater.inc"
047D39 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
047E00             0002*   crater_defaults:
047E00 10          0003*       db tile_crater          ; type
047E01 05 01 00    0004*       dl BUF_EXPLOSION_A      ; base_bufferId
047E04 1C 7E 04    0005*       dl move_crater          ; move_program
047E07 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
047E08 10          0007*       db 16                   ; dim_x
047E09 10          0008*       db 16                   ; dim_y
047E0A 01          0009*       db 1                    ; num_orientations
047E0B 04          0010*       db 4                    ; num_animations
047E0C 05          0011*       db 5	                ; animation
047E0D 08          0012*       db 8                    ; animation_timer
047E0E 00          0013*       db 0                    ; move_timer
047E0F 00          0014*       db 0                    ; move_step
047E10 00          0015*       db 0                    ; points
047E11 00          0016*       db 0                    ; shield_damage
047E12 00          0017*       db 0                    ; frame
047E13             0018*   
047E13             0019*   activate_crater:
047E13 21 00 7E 04 0020*       ld hl,crater_defaults
047E17 CD 22 7D 04 0021*       call spawn_active_tile_from_tile
047E1B             0022*   ; other specific initialization
047E1B C9          0023*       ret
047E1C             0024*   ; end activate_crater
047E1C             0025*   
047E1C             0026*   move_crater:
047E1C CD 81 7C 04 0027*       call move_active_tile
047E20 CA 90 79 04 0028*       jp z,table_deactivate_tile
047E24             0029*   ; do animation
047E24 FD 35 23    0030*       dec (iy+tile_animation_timer)
047E27 C0          0031*       ret nz ; not time to animate
047E28 FD 35 22    0032*       dec (iy+sprite_animation) ; check whether time to transition to crater
047E2B CC 41 7E 04 0033*       call z,@make_crater
047E2F 3E 08       0034*       ld a,8
047E31 FD 77 23    0035*       ld (iy+tile_animation_timer),a
047E34 FD 7E 28    0036*       ld a,(iy+tile_frame)
047E37 3C          0037*       inc a
047E38 E6 03       0038*       and %00000011 ; modulo 4
047E3A FD 77 28    0039*       ld (iy+tile_frame),a
047E3D C3 D5 7C 04 0040*       jp draw_active_tile
047E41             0041*   @make_crater:
047E41 21 01 01 00 0042*       ld hl,BUF_CRATER_0
047E45 FD 2F 17    0043*       ld (iy+tile_base_bufferId),hl
047E48 3E FF       0044*       ld a,-1 ; will wrap to zero on return
047E4A FD 77 28    0045*       ld (iy+tile_frame),a
047E4D C9          0046*       ret
047E4E             0047*   ; end move_crater
047E4E             0072        include "tile_electrode.inc"
047E4E FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
047F00             0002*   electrode_defaults:
047F00 09          0003*       db 9                    ; type
047F01 74 01 00    0004*       dl BUF_TILE_BLANK       ; base_bufferId
047F04 1C 7F 04    0005*       dl move_electrode       ; move_program
047F07 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
047F08 10          0007*       db 16                   ; dim_x
047F09 10          0008*       db 16                   ; dim_y
047F0A 01          0009*       db 1                    ; num_orientations
047F0B 01          0010*       db 1                    ; num_animations
047F0C 00          0011*       db 0                    ; animation
047F0D 00          0012*       db 0                    ; animation_timer
047F0E 00          0013*       db 0                    ; move_timer
047F0F 00          0014*       db 0                    ; move_step
047F10 05          0015*       db 5                    ; points
047F11 FC          0016*       db -4                   ; shield_damage
047F12 00          0017*       db 0                    ; frame
047F13             0018*   
047F13             0019*   activate_electrode:
047F13 21 00 7F 04 0020*       ld hl,electrode_defaults
047F17             0021*   ; get next available active tile id
047F17 CD C9 79 04 0022*       call spawn_active_tile
047F1B             0023*       ; ret nc ; no carry means no free active tile slots, so we go home
047F1B             0024*   ; other specific initialization
047F1B C9          0025*       ret
047F1C             0026*   ; end activate_electrode
047F1C             0027*   
047F1C             0028*   move_electrode:
047F1C CD 81 7C 04 0029*       call move_active_tile
047F20 CA 90 79 04 0030*       jp z,table_deactivate_tile
047F24 CD 68 23 04 0031*       call check_enemy_collision_player
047F28 C2 34 7F 04 0032*       jp nz,@laser ; no collision so check laser collision
047F2C CD 07 71 04 0033*       call update_shields
047F30 C3 41 7F 04 0034*       jp kill_electrode
047F34             0035*   @laser:
047F34 CD 5C 23 04 0036*       call check_enemy_collision_laser
047F38 C0          0037*       ret nz ; no collision so we're done
047F39 CD B8 6C 04 0038*       call update_score
047F3D C3 41 7F 04 0039*       jp kill_electrode
047F41             0040*   ; end move_electrode
047F41             0041*   
047F41             0042*   kill_electrode:
047F41             0043*   ; activate blank tile bitmap
047F41 21 74 01 00 0044*       ld hl,BUF_TILE_BLANK
047F45 CD 38 17 04 0045*       call vdu_buff_select
047F49             0046*   ; save y-coordinate of collision tile
047F49 FD 27 04    0047*       ld hl,(iy+tile_y)
047F4C 22 FB 7F 04 0048*       ld (@tile_y),hl
047F50             0049*   ; initialize pointers
047F50 2A 03 79 04 0050*       ld hl,(tile_stack_pointer)
047F54 ED 27       0051*       ld hl,(hl) ; pointer to this tile table record
047F56 E5          0052*       push hl ; save pointer to this tile table record
047F57 DD 21 00 76 0053*       ld ix,tile_stack ; set ix to first record in table
       04          
047F5C             0054*   @check_loop:
047F5C DD 22 F8 7F 0055*       ld (@tile_stack_pointer),ix ; update stack pointer
       04          
047F61 DD 7E 02    0056*       ld a,(ix+2)
047F64 B7          0057*       or a ; will be zero if at end of stack
047F65 CA D1 7F 04 0058*       jp z,@done ; end of stack so we're done
047F69             0059*   ; point ix to tile record
047F69 DD 37 00    0060*       ld ix,(ix) ; ix points to the tile record being checked
047F6C             0061*   ; check top bit of tile_type to see if tile is just spawned
047F6C DD CB 16 7E 0062*       bit 7,(ix+tile_type)
047F70 C2 C5 7F 04 0063*       jp nz,@next_record ; if just spawned, skip to next record
047F74             0064*   ; check sprite_alive bit to see if tile is active
047F74 DD CB 1D 76 0065*       bit sprite_alive,(ix+sprite_collisions)
047F78 C8          0066*       ret z ; end of stack so we're done
047F79             0067*   ; check tile type
047F79 DD 7E 16    0068*       ld a,(ix+tile_type)
047F7C FE 0A       0069*       cp tile_lightning ; check if tile is lightning
047F7E C2 C5 7F 04 0070*       jp nz,@next_record ; if not an electrode, skip to next record
047F82             0071*   ; check tile position
047F82 FD 2A F8 7F 0072*       ld iy,(@tile_stack_pointer)
       04          
047F87 FD 22 03 79 0073*       ld (tile_stack_pointer),iy
       04          
047F8C FD 37 00    0074*       ld iy,(iy) ; pointer to tile record to kill
047F8F FD 22 06 79 0075*       ld (tile_table_pointer),iy
       04          
047F94 DD 27 04    0076*       ld hl,(ix+tile_y)
047F97 ED 5B FB 7F 0077*       ld de,(@tile_y)
       04          
047F9C B7          0078*       or a ; clear carry
047F9D E5          0079*       push hl
047F9E ED 52       0080*       sbc hl,de
047FA0 E1          0081*       pop hl
047FA1 CA B1 7F 04 0082*       jp z,@kill_it
047FA5 01 00 01 00 0083*       ld bc,1*256
047FA9 09          0084*       add hl,bc
047FAA B7          0085*       or a
047FAB ED 52       0086*       sbc hl,de
047FAD C2 C5 7F 04 0087*       jp nz,@next_record
047FB1             0088*   @kill_it: ; deactivate tile and replace with inactive blank tile
047FB1 FD 07 01    0089*       ld bc,(iy+tile_x) ; get x position (ud.e already has y-position)
047FB4 CD 3C 1B 04 0090*       call vdu_plot_bmp168 ; plot blank tile (bitmap was activated at beginning of proc)
047FB8 CD 90 79 04 0091*       call table_deactivate_tile
047FBC DD 2A F8 7F 0092*       ld ix,(@tile_stack_pointer) ; get back stack pointer
       04          
047FC1 C3 5C 7F 04 0093*       jp @check_loop ; deactivate tile naturally advances to next record
047FC5             0094*    ; get back stack pointer and loop
047FC5             0095*   @next_record:
047FC5 DD 2A F8 7F 0096*       ld ix,(@tile_stack_pointer)
       04          
047FCA ED 32 03    0097*       lea ix,ix+3 ; next tile stack record
047FCD C3 5C 7F 04 0098*       jp @check_loop ; loop until we've checked all the records
047FD1             0099*   @done:
047FD1             0100*   ; find this tile record in the tile stack
047FD1 D1          0101*       pop de ; restore pointer to this tile table record (was hl)
047FD2 FD 21 00 76 0102*       ld iy,tile_stack ; set ix to first record in table
       04          
047FD7             0103*   @find_loop:
047FD7 FD 27 00    0104*       ld hl,(iy)
047FDA ED 33 03    0105*       lea iy,iy+3 ; next tile stack record
047FDD B7          0106*       or a ; clear carry
047FDE ED 52       0107*       sbc hl,de ; if not the same address, loop
047FE0 C2 D7 7F 04 0108*       jp nz,@find_loop
047FE4 ED 33 FD    0109*       lea iy,iy-3 ; back up to the record we want
047FE7 FD 22 03 79 0110*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
047FEC FD 37 00    0111*       ld iy,(iy) ; iy points to the tile stack record
047FEF FD 22 06 79 0112*       ld (tile_table_pointer),iy ; set pointer to this tile record
       04          
047FF4 C3 13 7E 04 0113*       jp activate_crater
047FF8 00 76 04    0114*   @tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
047FFB 00 00 00    0115*   @tile_y: dl 0 ; y position of tiles to kill
047FFE             0116*   ; end move_electrode
047FFE             0073        include "tile_lightning.inc"
047FFE FF FF       0001*       align 256
048000             0002*   lightning_defaults:
048000 0A          0003*       db tile_lightning       ; type
048001 4C 01 00    0004*       dl BUF_LIGHTNING_H_0    ; base_bufferId
048004 1D 80 04    0005*       dl move_lightning       ; move_program
048007 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
048008 10          0007*       db 16                   ; dim_x
048009 10          0008*       db 16                   ; dim_y
04800A 01          0009*       db 1                    ; num_orientations
04800B 02          0010*       db 2                    ; num_animations
04800C 00          0011*       db 0                    ; animation
04800D 08          0012*       db 8                    ; animation_timer
04800E 00          0013*       db 0                    ; move_timer
04800F 00          0014*       db 0                    ; move_step
048010 00          0015*       db 0                    ; points
048011 FF          0016*       db -1                    ; shield_damage
048012 00          0017*       db 0                    ; frame
048013             0018*   
048013             0019*   activate_lightning:
048013 21 00 80 04 0020*       ld hl,lightning_defaults
048017             0021*   ; get next available active tile id
048017 CD C9 79 04 0022*       call spawn_active_tile
04801B D0          0023*       ret nc ; no carry means no free active tile slots, so we go home
04801C             0024*   ; other specific initialization
04801C C9          0025*       ret
04801D             0026*   ; end activate_lightning
04801D             0027*   
04801D             0028*   move_lightning:
04801D CD 81 7C 04 0029*       call move_active_tile
048021 CA 90 79 04 0030*       jp z,table_deactivate_tile
048025 CD 5C 23 04 0031*       call check_enemy_collision_laser ; kills laser on collision but does not die
048029 CD 68 23 04 0032*       call check_enemy_collision_player
04802D C2 35 80 04 0033*       jp nz,@animate ; no collision so do animation
048031 CD 07 71 04 0034*       call update_shields
048035             0035*   @animate:
048035 FD 35 23    0036*       dec (iy+tile_animation_timer)
048038 C0          0037*       ret nz ; not time to animate
048039             0038*   ; reset the animation timer and bump animation
048039 3E 08       0039*       ld a,8
04803B FD 77 23    0040*       ld (iy+tile_animation_timer),a
04803E FD 7E 28    0041*       ld a,(iy+tile_frame)
048041 3C          0042*       inc a
048042 E6 01       0043*       and %00000001 ; modulo 1
048044 FD 77 28    0044*       ld (iy+tile_frame),a
048047 C3 D5 7C 04 0045*       jp draw_active_tile
04804B C9          0046*       ret
04804C             0074        include "tile_pad_small.inc"
04804C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
048100             0002*   pad_small_defaults:
048100 01          0003*       db tile_pad_small       ; type
048101 75 01 00    0004*       dl BUF_TILE_PAD_0       ; base_bufferId
048104 28 81 04    0005*       dl move_pad_small       ; move_program
048107 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
048108 10          0007*       db 16                   ; dim_x
048109 10          0008*       db 16                   ; dim_y
04810A 01          0009*       db 1                    ; num_orientations
04810B 01          0010*       db 1                    ; num_animations
04810C 00          0011*       db 0                    ; animation
04810D 10          0012*       db 16                   ; animation_timer
04810E 40          0013*       db sprite_top           ; move_timer
04810F 00          0014*       db 0                    ; move_step
048110 05          0015*       db 5                    ; points
048111 00          0016*       db 0                    ; shield_damage
048112 00          0017*       db 0                    ; frame
048113             0018*   
048113             0019*   activate_pad_small:
048113 21 00 81 04 0020*       ld hl,pad_small_defaults
048117             0021*   ; get next available active tile id
048117 CD C9 79 04 0022*       call spawn_active_tile
04811B D0          0023*       ret nc ; no carry means no free active tile slots, so we go home
04811C             0024*   ; other specific initialization
04811C CD AE 05 04 0025*       call rand_8     ; snag a random number
048120 E6 0F       0026*       and %00001111 ; keep only 4 lowest bits (max 15)
048122 C6 40       0027*       add a,sprite_top ; make sure minimum is sprite_top
048124 FD 77 24    0028*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
048127 C9          0029*       ret
048128             0030*   ; end activate_pad_small
048128             0031*   
048128             0032*   move_pad_small:
048128 CD 81 7C 04 0033*       call move_active_tile
04812C CA 90 79 04 0034*       jp z,table_deactivate_tile
048130 CD 5C 23 04 0035*       call check_enemy_collision_laser
048134 CA 65 81 04 0036*       jp z,kill_pad_small
048138             0037*   ; do animation
048138 FD 35 23    0038*       dec (iy+tile_animation_timer)
04813B C2 51 81 04 0039*       jp nz,@F
04813F 3E 10       0040*       ld a,16
048141 FD 77 23    0041*       ld (iy+tile_animation_timer),a
048144 FD 7E 28    0042*       ld a,(iy+tile_frame)
048147 3C          0043*       inc a
048148 E6 07       0044*       and %00000111 ; modulo 8
04814A FD 77 28    0045*       ld (iy+tile_frame),a
04814D CD D5 7C 04 0046*       call draw_active_tile
048151             0047*   @@: ; check whether it is time to spawn a seeker
048151 FD 35 24    0048*       dec (iy+tile_move_timer)
048154 C0          0049*       ret nz
048155             0050*   ; spwan a seeker
048155 CD 14 25 04 0051*       call enemy_spawn_seeker
048159             0052*       ; fall through to reset move timer
048159             0053*   pad_small_reset_move_timer:
048159 CD AE 05 04 0054*       call rand_8     ; snag a random number
04815D E6 1F       0055*       and %00011111   ; keep only 5 lowest bits (max 31)
04815F C6 40       0056*       add a,64 ; range is now 64-127
048161 FD 77 24    0057*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
048164 C9          0058*       ret
048165             0059*   
048165             0060*   kill_pad_small:
048165 CD B8 6C 04 0061*       call update_score
048169 C3 13 7E 04 0062*       jp activate_crater
04816D             0063*   ; end move_pad_small
04816D             0075        include "tile_turret_fireball.inc"
04816D FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
048200             0002*   turret_fireball_defaults:
048200 02          0003*       db enemy_ground         ; type
048201 7D 01 00    0004*       dl BUF_TURRET_000       ; base_bufferId
048204 28 82 04    0005*       dl move_turret_fireball ; move_program
048207 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
048208 10          0007*       db 16                   ; dim_x
048209 10          0008*       db 16                   ; dim_y
04820A 20          0009*       db 32                   ; num_orientations
04820B 01          0010*       db 1                    ; num_animations
04820C 00          0011*       db 0                    ; animation
04820D 00          0012*       db 0                    ; animation_timer
04820E 40          0013*       db sprite_top           ; move_timer
04820F 00          0014*       db 0                    ; move_step
048210 05          0015*       db 5                    ; points
048211 00          0016*       db 0                    ; shield_damage
048212 00          0017*       db 0                    ; frame
048213             0018*   
048213             0019*   activate_turret_fireball:
048213 21 00 82 04 0020*       ld hl,turret_fireball_defaults
048217             0021*   ; get next available active tile id
048217 CD C9 79 04 0022*       call spawn_active_tile
04821B D0          0023*       ret nc ; no carry means no free active tile slots, so we go home
04821C             0024*   ; other specific initialization
04821C CD AE 05 04 0025*       call rand_8     ; snag a random number
048220 E6 0F       0026*       and %00001111 ; keep only 4 lowest bits (max 15)
048222 C6 40       0027*       add a,sprite_top ; make sure minimum is sprite_top
048224 FD 77 24    0028*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
048227 C9          0029*       ret
048228             0030*   ; end activate_turret_fireball
048228             0031*   
048228             0032*   move_turret_fireball:
048228 CD 81 7C 04 0033*       call move_active_tile
04822C CA 90 79 04 0034*       jp z,table_deactivate_tile
048230 CD 5C 23 04 0035*       call check_enemy_collision_laser
048234 CA 67 82 04 0036*       jp z,kill_turret_fireball
048238             0037*   ; target player
048238 CD 2B 75 04 0038*       call tile_orientation_to_player
04823C 21 00 04 00 0039*       ld hl,speed_fireball
048240 22 58 75 04 0040*       ld (Vp),hl ; param for targeting_computer
048244 CD 70 75 04 0041*       call targeting_computer
048248 FD 2F 10    0042*       ld (iy+tile_heading),hl ; save active tile heading
04824B CD 67 7A 04 0043*       call tile_frame_heading
04824F CD D5 7C 04 0044*       call draw_active_tile
048253             0045*   ; check whether it is time to spawn a fireball
048253 FD 35 24    0046*       dec (iy+tile_move_timer)
048256 C0          0047*       ret nz
048257             0048*   ; spwan a fireball
048257 CD 13 24 04 0049*       call enemy_spawn_fireball
04825B             0050*       ; fall through to reset move timer
04825B             0051*   turret_fireball_reset_move_timer:
04825B CD AE 05 04 0052*       call rand_8     ; snag a random number
04825F E6 1F       0053*       and %00011111   ; keep only 5 lowest bits (max 31)
048261 C6 18       0054*       add a,24 ; range is now 24-55
048263 FD 77 24    0055*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
048266 C9          0056*       ret
048267             0057*   
048267             0058*   kill_turret_fireball:
048267 CD B8 6C 04 0059*       call update_score
04826B C3 13 7E 04 0060*       jp activate_crater
04826F             0061*   ; end move_turret_fireball
04826F             0076        include "sprites.inc"
04826F             0001*   ; sprite_type
04826F             0002*   enemy_dead: equ 0
04826F             0003*   enemy_air: equ 1
04826F             0004*   enemy_ground: equ 2
04826F             0005*   enemy_projectile: equ 3
04826F             0006*   explosion: equ 4
04826F             0007*   player: equ 5
04826F             0008*   player_air: equ 6
04826F             0009*   player_ground: equ 7
04826F             0010*   
04826F             0011*   ; ###### SPRITE TABLE FIELD INDICES ######
04826F             0012*   table_record_size:         equ  64; 40 bytes ;40 bytes per sprite record
04826F             0013*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
04826F             0014*   ; sprite state variables
04826F             0015*   sprite_state_variables:    equ   1; beginning of sprite state variables
04826F             0016*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
04826F             0017*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
04826F             0018*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
04826F             0019*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
04826F             0020*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
04826F             0021*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
04826F             0022*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
04826F             0023*   ; sprite definition variables
04826F             0024*   sprite_definitions:        equ  22; beginnning of sprite definition variables
04826F             0025*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
04826F             0026*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
04826F             0027*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
04826F             0028*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
04826F             0029*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
04826F             0030*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
04826F             0031*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
04826F             0032*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
04826F             0033*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
04826F             0034*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
04826F             0035*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
04826F             0036*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
04826F             0037*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
04826F             0038*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
04826F             0039*   sprite_frame:              equ  40; 1 bytes ;current animation frame
04826F             0040*   
04826F             0041*   ; ###### SPRITE TABLE VARIABLES ######
04826F             0042*   ; maximum number of sprites
04826F             0043*   table_max_records: equ 16 ; it can handle more but this is pushing it
04826F             0044*   ; table_total_bytes: equ table_end-table_start_variables
04826F             0045*   
04826F             0046*   ; pointer to top address of current record, initialized to table_base
04826F 2A 91 04    0047*   table_pointer: dl table_base
048272             0048*   
048272             0049*   ; flag indicating collision with screen edge
048272             0050*   ; uses orientation codes to specify which edge(s)
048272 00          0051*   sprite_screen_edge: db #00
048273             0052*   
048273             0053*   ; origin_top: equ 48
048273             0054*   origin_top: equ 0
048273             0055*   origin_left: equ 128
048273             0056*   field_top: equ 0
048273             0057*   field_bottom: equ 383-origin_top
048273             0058*   field_left: equ 0
048273             0059*   field_right: equ 255
048273             0060*   sprite_top: equ field_top + 64
048273             0061*   sprite_bottom: equ field_bottom-15
048273             0062*   sprite_left: equ field_left
048273             0063*   sprite_right: equ field_right-15
048273             0064*   
048273             0065*   tile_bottom: equ 384
048273             0066*   
048273             0067*   ; ######### COLLISION SPRITE PARAMETERS ##########
048273             0068*   ; integer coordinates are all that are needed for collision calculations
048273 00          0069*   collision_x: db 0x00
048274 00          0070*   collision_y: db 0x00
048275 00          0071*   collision_dim_x: db 0x00
048276 00          0072*   collision_dim_y: db 0x00
048277             0073*   
048277             0074*   ; scratch variables
048277 00          0075*   x: db 0x00 ; 8-bit signed integer
048278 00          0076*   y: db 0x00 ; 8-bit signed integer
048279 00 00 00    0077*   x0: dl 0x000000 ; 16.8 signed fixed place
04827C 00 00 00    0078*   y0: dl 0x000000 ; 16.8 signed fixed place
04827F 00 00 00    0079*   incx1: dl 0x000000 ; 16.8 signed fixed place
048282 00 00 00    0080*   incy1: dl 0x000000 ; 16.8 signed fixed place
048285 00 00 00    0081*   incx2: dl 0x000000 ; 16.8 signed fixed place
048288 00 00 00    0082*   incy2: dl 0x000000 ; 16.8 signed fixed place
04828B             0083*   
04828B             0084*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
04828B 00 00 00    0085*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
04828E 00 00 00    0086*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
048291 00 00 00    0087*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
048294             0088*   
048294             0089*   table_init:
048294             0090*   ; clear the sprite table
048294 AF          0091*       xor a ; write zeroes to sprite table
048295 21 2A 91 04 0092*       ld hl,table_base ; address to copy from
048299 01 00 05 00 0093*       ld bc,table_end-table_base ; number of bytes to clear
04829D CD E6 03 04 0094*       call clear_mem
0482A1             0095*   ; write sprite ids
0482A1 DD 21 2A 91 0096*       ld ix,table_base
       04          
0482A6 AF          0097*       xor a ; sprite id
0482A7 0E 00       0098*       ld c,0 ; sprite type
0482A9 06 14       0099*       ld b,table_num_records ; loop counter
0482AB             0100*   @loop:
0482AB DD 77 00    0101*       ld (ix+sprite_id),a
0482AE DD 71 16    0102*       ld (ix+sprite_type),c
0482B1 ED 32 40    0103*       lea ix,ix+table_record_size
0482B4 3C          0104*       inc a
0482B5 10 F4       0105*       djnz @loop
0482B7 C9          0106*       ret
0482B8             0107*   ; end table_init
0482B8             0108*   
0482B8             0109*   ; deactivate the sprite with the given id
0482B8             0110*   ; inputs: iy set to sprite record
0482B8             0111*   ; outputs: nothing
0482B8             0112*   ; destroys: a,hl
0482B8             0113*   table_deactivate_sprite:
0482B8 FD 7E 00    0114*       ld a,(iy+sprite_id) ; get spriteId
0482BB CD 00 1C 04 0115*       call vdu_sprite_select ; select sprite
0482BF CD 84 1C 04 0116*       call vdu_sprite_hide
0482C3 FD CB 1D B6 0117*       res sprite_alive,(iy+sprite_collisions)
0482C7 FD CB 1D BE 0118*       res sprite_just_died,(iy+sprite_collisions)
0482CB C9          0119*       ret
0482CC             0120*   ; end table_deactivate_sprite
0482CC             0121*   
0482CC             0122*   sprites_init:
0482CC             0123*   ; initialize sprites
0482CC CD 34 1D 04 0124*   	call vdu_sprite_reset ; clear sprite data in vdp
0482D0 AF          0125*   	xor a ; loop counter / sprite id
0482D1             0126*   @sprite_loop:
0482D1 F5          0127*   	push af ; save loop counter / sprite id
0482D2 CD 00 1C 04 0128*   	call vdu_sprite_select
0482D6 21 00 01 00 0129*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
0482DA CD 55 1D 04 0130*   	call vdu_sprite_add_buff
0482DE F1          0131*   	pop af ; restore loop counter / sprite id
0482DF 3C          0132*       inc a
0482E0 FE 14       0133*       cp table_num_records
0482E2 C2 D1 82 04 0134*       jp nz,@sprite_loop
0482E6 CD 34 1C 04 0135*   	call vdu_sprite_activate
0482EA             0136*   
0482EA             0137*   ; define player sprite
0482EA 3A 2A 92 04 0138*   	ld a,(player_begin+sprite_id)
0482EE CD 00 1C 04 0139*   	call vdu_sprite_select
0482F2 CD 13 1C 04 0140*   	call vdu_sprite_clear_frames
0482F6 21 6F 01 00 0141*   	ld hl,BUF_SHIP_0L
0482FA 01 03 00 00 0142*   	ld bc,3 ; three bitmaps for player ship
0482FE             0143*   @sprite_player_loop:
0482FE C5          0144*   	push bc
0482FF E5          0145*   	push hl
048300 CD 55 1D 04 0146*   	call vdu_sprite_add_buff
048304 E1          0147*   	pop hl
048305 23          0148*   	inc hl
048306 C1          0149*   	pop bc
048307 10 F5       0150*   	djnz @sprite_player_loop
048309             0151*   
048309             0152*   ; define player weapon sprites
048309 CD A6 70 04 0153*       call init_player_laser
04830D             0154*   
04830D             0155*   ; define enemy sprites
04830D CD C7 25 04 0156*       call init_enemy_seekers
048311 CD 8A 24 04 0157*       call init_enemy_fireballs
048315             0158*   
048315             0159*   ; define explosion sprites
048315 CD 86 26 04 0160*       call init_explosions
048319 C9          0161*       ret
04831A             0162*   ; end sprites_init
04831A             0163*   
04831A             0164*   ; gets the next available sprite id for a particular sprite group
04831A             0165*   ; inputs; ix = pointer to sprite group, b = number of records in sprite group
04831A             0166*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
04831A             0167*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
04831A             0168*   ; destroys: a,b,c,hl,ix
04831A             0169*   table_get_next_id:
04831A             0170*   @loop:
04831A DD CB 1D 76 0171*       bit sprite_alive,(ix+sprite_collisions)
04831E 28 07       0172*       jr z,@found
048320 ED 32 40    0173*       lea ix,ix+table_record_size
048323 10 F5       0174*       djnz @loop
048325             0175*   @notfound:
048325 AF          0176*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
048326 C9          0177*       ret
048327             0178*   @found:
048327             0179*   ; return sprite id
048327 DD 7E 00    0180*       ld a,(ix+sprite_id)
04832A 37          0181*       scf ; sets carry flag indicating we found a free sprite
04832B C9          0182*       ret ; done
04832C             0183*   ; end table_get_next_id
04832C             0184*   
04832C             0185*   ; create a new sprite at the prescribed coordinates
04832C             0186*   ; inputs: hl = pointer to new sprite default settings, ub.c, ud.e = x,y position
04832C             0187*   ;         ix = pointer to sprite group, a = number of records in sprite group
04832C             0188*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
04832C             0189*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
04832C             0190*   spawn_sprite_from_coords:
04832C ED 43 66 83 0191*       ld (@sprite_x),bc ; store x-coordinate
       04          
048331 ED 53 69 83 0192*       ld (@sprite_y),de ; store y-coordinate
       04          
048336 47          0193*       ld b,a ; number of records in sprite group
048337 E5          0194*       push hl ; back up pointer to new sprite defaults
048338 CD 1A 83 04 0195*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
04833C E1          0196*       pop hl ; restore pointer to new sprite defaults
04833D D0          0197*       ret nc ; no carry means no free sprite slots, so we go home
04833E             0198*   ; copy default settings to new sprite
04833E DD E5       0199*       push ix ; back up pointer to new sprite record
048340 ED 32 16    0200*       lea ix,ix+sprite_definitions ; bump pointer to copy to
048343 DD E5       0201*       push ix ; pointer to default sprite settings
048345 D1          0202*       pop de ; address to copy to
048346 01 2A 00 00 0203*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
04834A ED B0       0204*       ldir ; copies defaults to new sprite record
04834C DD E1       0205*       pop ix ; restore pointer to new sprite record
04834E             0206*   ; copy sprite position from existing sprite
04834E 2A 66 83 04 0207*       ld hl,(@sprite_x)
048352 DD 2F 01    0208*       ld (ix+sprite_x),hl
048355 2A 69 83 04 0209*       ld hl,(@sprite_y)
048359 DD 2F 04    0210*       ld (ix+sprite_y),hl
04835C             0211*   ; return to caller
04835C DD CB 16 FE 0212*       set 7,(ix+sprite_type) ; set just spawned flag
048360 DD CB 1D F6 0213*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
048364 37          0214*       scf ; set carry flag to indicate success
048365 C9          0215*       ret
048366 00 00 00    0216*   @sprite_x: dl 0 ; new sprite x-coordinate
048369 00 00 00    0217*   @sprite_y: dl 0 ; new sprite y-coordinate
04836C             0218*   ; end spawn_sprite_from_coords
04836C             0219*   
04836C             0220*   ; create a new sprite at the same location as an existing sprite
04836C             0221*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
04836C             0222*   ;         ix = pointer to sprite group, b = number of records in sprite group
04836C             0223*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
04836C             0224*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
04836C             0225*   spawn_sprite_from_sprite:
04836C E5          0226*       push hl ; back up pointer to new sprite defaults
04836D CD 1A 83 04 0227*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
048371 E1          0228*       pop hl ; restore pointer to new sprite defaults
048372 D0          0229*       ret nc ; no carry means no free sprite slots, so we go home
048373             0230*   ; copy default settings to new sprite
048373 DD E5       0231*       push ix ; back up pointer to new sprite record
048375 ED 32 16    0232*       lea ix,ix+sprite_definitions ; bump pointer to copy to
048378 DD E5       0233*       push ix ; pointer to default sprite settings
04837A D1          0234*       pop de ; address to copy to
04837B 01 2A 00 00 0235*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
04837F ED B0       0236*       ldir ; copies defaults to new sprite record
048381 DD E1       0237*       pop ix ; restore pointer to new sprite record
048383             0238*   ; copy sprite position from existing sprite
048383 FD 2A 6F 82 0239*       ld iy,(table_pointer) ; get existing sprite record
       04          
048388 FD 27 01    0240*       ld hl,(iy+sprite_x)
04838B DD 2F 01    0241*       ld (ix+sprite_x),hl
04838E FD 27 04    0242*       ld hl,(iy+sprite_y)
048391 DD 2F 04    0243*       ld (ix+sprite_y),hl
048394             0244*   ; return to caller
048394 DD CB 16 FE 0245*       set 7,(ix+sprite_type) ; set just spawned flag
048398 DD CB 1D F6 0246*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
04839C 37          0247*       scf ; set carry flag to indicate success
04839D C9          0248*       ret
04839E             0249*   ; end spawn_sprite_from_sprite
04839E             0250*   
04839E             0251*   ; call the behavior subroutines for a specified sprite group
04839E             0252*   ; inputs: iy = pointer to sprite group, b = number of records in sprite group
04839E             0253*   move_sprite_group:
04839E C5          0254*       push bc ; backup loop counter
04839F FD E5       0255*       push iy ; backup table pointer
0483A1             0256*   @move_loop:
0483A1 FD 22 6F 82 0257*       ld (table_pointer),iy ; update table pointer
       04          
0483A6 C5          0258*       push bc ; backup loop counter
0483A7             0259*   ; check top bit of sprite_type to see if sprite is just spawned
0483A7 FD CB 16 7E 0260*       bit 7,(iy+sprite_type)
0483AB C2 E0 83 04 0261*       jp nz,@next_record ; if just spawned, skip to next record
0483AF             0262*   ; check sprite_just_died bit
0483AF FD CB 1D 7E 0263*       bit sprite_just_died,(iy+sprite_collisions)
0483B3 C2 17 84 04 0264*       jp nz,@sprite_died ; if just died, deactivate sprite
0483B7             0265*   ; check sprite_alive bit to see if sprite is active
0483B7 FD CB 1D 76 0266*       bit sprite_alive,(iy+sprite_collisions)
0483BB CA E0 83 04 0267*       jp z,@next_record ; ... skip to next record
0483BF             0268*   ; otherwise move the sprite
0483BF FD 27 1A    0269*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
0483C2             0270*       CALL_HL ; run the behavior subroutine
0483C2 01 C8 83 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
0483C6 C5          0002*M1     push bc ; which constitutes the return address
0483C7 E9          0003*M1     jp (hl) ; Jump to the address in HL
0483C8 FD 7E 00    0271*       ld a,(iy+sprite_id) ; get spriteId
0483CB CD 00 1C 04 0272*       call vdu_sprite_select ; select sprite
0483CF FD 7E 28    0273*       ld a,(iy+sprite_frame)
0483D2 CD 63 1C 04 0274*       call vdu_sprite_select_frame
0483D6 FD 07 01    0275*       ld bc,(iy+sprite_x)
0483D9 FD 17 04    0276*       ld de,(iy+sprite_y)
0483DC CD CC 1C 04 0277*       call vdu_sprite_move_abs168
0483E0             0278*   ; fall through to @next_record
0483E0             0279*   @next_record:
0483E0 ED 33 40    0280*       lea iy,iy+table_record_size
0483E3 AF          0281*       xor a ; clears carry flag
0483E4 32 72 82 04 0282*       ld (sprite_screen_edge),a ; clear screen edge collision flag
0483E8 C1          0283*       pop bc ; get back our loop counter
0483E9 10 B6       0284*       djnz @move_loop ; loop until we've checked all the records
0483EB             0285*   ; reset all just spawned flags
0483EB FD E1       0286*       pop iy ; get back table pointer
0483ED C1          0287*       pop bc ; get back loop counter
0483EE             0288*   @reset_just_spawned:
0483EE C5          0289*       push bc ; back up loop counter
0483EF FD CB 16 7E 0290*       bit 7,(iy+sprite_type) ; check if just spawned
0483F3 CA 10 84 04 0291*       jp z,@F
0483F7 FD CB 16 BE 0292*       res 7,(iy+sprite_type) ; clear just spawned flag
0483FB FD 7E 00    0293*       ld a,(iy+sprite_id)
0483FE CD 00 1C 04 0294*       call vdu_sprite_select
048402 FD 07 01    0295*       ld bc,(iy+sprite_x)
048405 FD 17 04    0296*       ld de,(iy+sprite_y)
048408 CD CC 1C 04 0297*       call vdu_sprite_move_abs168
04840C CD 76 1C 04 0298*       call vdu_sprite_show
048410             0299*   @@:
048410 ED 33 40    0300*       lea iy,iy+table_record_size
048413 C1          0301*       pop bc ; get back loop counter
048414 10 D8       0302*       djnz @reset_just_spawned
048416 C9          0303*       ret
048417             0304*   @sprite_died:
048417 CD B8 82 04 0305*       call table_deactivate_sprite
04841B C3 E0 83 04 0306*       jp @next_record
04841F             0307*   ; end move_sprite_group
04841F             0308*   
04841F             0309*   ; compute a sprite's new position based on its component x,y velocities
04841F             0310*   ; with screen boundary checking and update its sprite table record accordingly
04841F             0311*   ; inputs: table_pointer set to sprite record
04841F             0312*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
04841F             0313*   ; destroys: everything
04841F             0314*   ; note: actual rendering of sprite must be handled by caller
04841F             0315*   move_sprite:
04841F FD 2A 6F 82 0316*       ld iy,(table_pointer)
       04          
048424             0317*   ; x-axis movement
048424 FD 27 01    0318*       ld hl,(iy+sprite_x)
048427 FD 17 07    0319*       ld de,(iy+sprite_xvel)
04842A 19          0320*       add hl,de
04842B FD 2F 01    0321*       ld (iy+sprite_x),hl
04842E             0322*   ; y-axis movement
04842E FD 27 04    0323*       ld hl,(iy+sprite_y)
048431 FD 17 0A    0324*       ld de,(iy+sprite_yvel)
048434 19          0325*       add hl,de
048435 FD 2F 04    0326*       ld (iy+sprite_y),hl
048438             0327*   ; detect screen edge collisions
048438 AF          0328*       xor a ; reset screen edge collision flag and clear carry
048439 32 72 82 04 0329*       ld (sprite_screen_edge),a
04843D             0330*   ; y-axis first since we already have it in hl
04843D 11 00 C0 FF 0331*       ld de,-sprite_top*256
048441 ED 5A       0332*       adc hl,de
048443 FA 6D 84 04 0333*       jp m,@top
048447 ED 52       0334*       sbc hl,de ; hl back to original value
048449 11 00 90 FE 0335*       ld de,-sprite_bottom*256
04844D ED 5A       0336*       adc hl,de
04844F F2 77 84 04 0337*       jp p,@bottom
048453             0338*   @xaxis:
048453 FD 27 01    0339*       ld hl,(iy+sprite_x)
048456 11 00 00 00 0340*       ld de,-sprite_left*256
04845A ED 5A       0341*       adc hl,de
04845C FA 92 84 04 0342*       jp m,@left
048460 ED 52       0343*       sbc hl,de ; hl back to original value
048462 11 00 10 FF 0344*       ld de,-sprite_right*256
048466 ED 5A       0345*       adc hl,de
048468 F2 A0 84 04 0346*       jp p,@right
04846C             0347*   ; no edge collisions so go home
04846C C9          0348*       ret
04846D             0349*   @top:
04846D 3E 08       0350*       ld a,collide_top
04846F 21 00 40 00 0351*       ld hl,sprite_top*256
048473 C3 7D 84 04 0352*       jp @collide_y
048477             0353*   @bottom:
048477 3E 04       0354*       ld a,collide_bottom
048479 21 00 70 01 0355*       ld hl,sprite_bottom*256
04847D             0356*   @collide_y:
04847D 32 72 82 04 0357*       ld (sprite_screen_edge),a
048481 FD 2F 04    0358*       ld (iy+sprite_y),hl
048484             0359*   ; reverse y-axis velocity
048484 FD 27 0A    0360*       ld hl,(iy+sprite_yvel)
048487 CD 16 05 04 0361*       call neg_hlu
04848B FD 2F 0A    0362*       ld (iy+sprite_yvel),hl
04848E             0363*   ; go check for x-axis collisions
04848E C3 53 84 04 0364*       jp @xaxis
048492             0365*   @left:
048492 3A 72 82 04 0366*       ld a,(sprite_screen_edge)
048496 F6 02       0367*       or a,collide_left
048498 21 00 00 00 0368*       ld hl,sprite_left*256
04849C C3 AA 84 04 0369*       jp @collide_x
0484A0             0370*   @right:
0484A0 3A 72 82 04 0371*       ld a,(sprite_screen_edge)
0484A4 F6 01       0372*       or a,collide_right
0484A6 21 00 F0 00 0373*       ld hl,sprite_right*256
0484AA             0374*   @collide_x:
0484AA 32 72 82 04 0375*       ld (sprite_screen_edge),a
0484AE FD 2F 01    0376*       ld (iy+sprite_x),hl
0484B1             0377*   ; reverse x-axis velocity
0484B1 FD 27 07    0378*       ld hl,(iy+sprite_xvel)
0484B4 CD 16 05 04 0379*       call neg_hlu
0484B8 FD 2F 07    0380*       ld (iy+sprite_xvel),hl
0484BB             0381*   ; final collision flag to a and return
0484BB 3A 72 82 04 0382*       ld a,(sprite_screen_edge)
0484BF C9          0383*       ret
0484C0             0384*   ; end move_sprite
0484C0             0385*   
0484C0             0386*   sprite_compute_velocities:
0484C0 FD 27 10    0387*       ld hl,(iy+sprite_heading)
0484C3 FD 17 0D    0388*       ld de,(iy+sprite_vel)
0484C6 CD A0 07 04 0389*       call polar_to_cartesian
0484CA FD 2A 6F 82 0390*       ld iy,(table_pointer)
       04          
0484CF FD 0F 07    0391*       ld (iy+sprite_xvel),bc ; save x-velocity component
0484D2 FD 1F 0A    0392*       ld (iy+sprite_yvel),de ; save y-velocity component
0484D5 C9          0393*       ret
0484D6             0394*   ; end sprite_compute_velocities
0484D6             0395*   
0484D6             0396*   ; compute animation frame based on sprite_animation and sprite_heading
0484D6             0397*   ; inputs: table_pointer set to sprite record
0484D6             0398*   ; outputs: a, sprite_frame set to animation frame
0484D6             0399*   ; destroys: a,hl
0484D6             0400*   sprite_frame_heading_animation:
0484D6 FD 7E 11    0401*       ld a,(iy+sprite_heading+1) ; we want the integer portion
0484D9 CB 3F       0402*       srl a ; divide integer portion by 8
0484DB CB 3F       0403*       srl a
0484DD CB 3F       0404*       srl a
0484DF FD 66 22    0405*       ld h,(iy+sprite_animation)
0484E2 2E 20       0406*       ld l,32 ; 32 orientation frames per animation
0484E4 ED 6C       0407*       mlt hl ; hl = offset from base animation
0484E6 85          0408*       add a,l ; modulo256 since sprite_frame is only 1 byte
0484E7 FD 77 28    0409*       ld (iy+sprite_frame),a
0484EA C9          0410*       ret
0484EB             0411*   ; end sprite_frame_heading_animation
0484EB             0412*   
0484EB             0413*   ; compute animation frame based on sprite_heading
0484EB             0414*   ; inputs: table_pointer set to sprite record
0484EB             0415*   ; outputs: a, sprite_frame set to animation frame
0484EB             0416*   ; destroys: a,hl
0484EB             0417*   sprite_frame_heading:
0484EB FD 7E 11    0418*       ld a,(iy+sprite_heading+1) ; we want the integer portion
0484EE CB 3F       0419*       srl a ; divide integer portion by 8
0484F0 CB 3F       0420*       srl a
0484F2 CB 3F       0421*       srl a
0484F4 FD 77 28    0422*       ld (iy+sprite_frame),a
0484F7 C9          0423*       ret
0484F8             0424*   ; end sprite_frame_heading
0484F8             0425*   
0484F8             0426*   ; load a sprite with animation bitmaps
0484F8             0427*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
0484F8             0428*   sprite_load_frames:
0484F8             0429*   ; back up input parameters
0484F8 E5          0430*       push hl ; base bufferId
0484F9 C5          0431*       push bc ; bc = number of frames
0484FA CD 13 1C 04 0432*       call vdu_sprite_clear_frames
0484FE C1          0433*       pop bc ; bc = number of frames
0484FF E1          0434*       pop hl ; = base bufferId
048500             0435*   @load_frames:
048500 C5          0436*       push bc ; back up loop counter
048501 E5          0437*       push hl ; back up base bufferId
048502 CD 55 1D 04 0438*       call vdu_sprite_add_buff
048506 E1          0439*       pop hl ; restore base bufferId
048507 23          0440*       inc hl ; bump it to the next frame
048508             0441*   ; decrement loop counter
048508 C1          0442*       pop bc
048509 0B          0443*       dec bc
04850A 79          0444*       ld a,c
04850B B7          0445*       or a
04850C C2 00 85 04 0446*       jp nz,@load_frames
048510 78          0447*       ld a,b
048511 B7          0448*       or a
048512 C2 00 85 04 0449*       jp nz,@load_frames
048516 C9          0450*       ret
048517             0451*   ; end sprite_load_frames
048517             0077        include "debug.inc"
048517 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
048600             0002*   
048600             0003*   
048600             0004*   printHexA:
048600 F5          0005*       push af
048601 C5          0006*       push bc
048602 CD 35 01 04 0007*       call printHex8
048606 3E 20       0008*       ld a,' '
048608 5B D7       0009*       rst.lil 10h
04860A C1          0010*       pop bc
04860B F1          0011*       pop af
04860C C9          0012*       ret
04860D             0013*   
04860D             0014*   printHexHL:
04860D F5          0015*       push af
04860E C5          0016*       push bc
04860F CD 2F 01 04 0017*       call printHex16
048613 3E 20       0018*       ld a,' '
048615 5B D7       0019*       rst.lil 10h
048617 C1          0020*       pop bc
048618 F1          0021*       pop af
048619 C9          0022*       ret
04861A             0023*   
04861A             0024*   printHexUHL:
04861A F5          0025*       push af
04861B C5          0026*       push bc
04861C CD 27 01 04 0027*       call printHex24
048620 3E 20       0028*       ld a,' '
048622 5B D7       0029*       rst.lil 10h
048624 C1          0030*       pop bc
048625 F1          0031*       pop af
048626 C9          0032*       ret
048627             0033*   
048627             0034*   printHexAUHL:
048627 F5          0035*       push af
048628 C5          0036*       push bc
048629 CD 35 01 04 0037*       call printHex8
04862D 3E 2E       0038*       ld a,'.'
04862F 5B D7       0039*       rst.lil 10h
048631 CD 27 01 04 0040*       call printHex24
048635 3E 20       0041*       ld a,' '
048637 5B D7       0042*       rst.lil 10h
048639 C1          0043*       pop bc
04863A F1          0044*       pop af
04863B C9          0045*       ret
04863C             0046*   
04863C             0047*   printHexABHL:
04863C             0048*   ; preserve registers
04863C C5          0049*       push bc ; b will be ok c will not
04863D F5          0050*       push af ; will get totally destroyed
04863E             0051*   ; print a
04863E CD 35 01 04 0052*       call printHex8
048642             0053*   ; print b
048642 78          0054*       ld a,b
048643 CD 35 01 04 0055*       call printHex8
048647             0056*   ; print hl
048647 CD 2F 01 04 0057*       call printHex16
04864B             0058*   ; restore registers
04864B F1          0059*       pop af
04864C C1          0060*       pop bc
04864D C9          0061*       ret
04864E             0062*   
04864E             0063*   printHexBHL:
04864E             0064*   ; preserve registers
04864E C5          0065*       push bc ; b will be ok c will not
04864F F5          0066*       push af ; will get totally destroyed
048650             0067*   ; print b
048650 78          0068*       ld a,b
048651 CD 35 01 04 0069*       call printHex8
048655             0070*   ; print hl
048655 CD 2F 01 04 0071*       call printHex16
048659             0072*   ; restore registers
048659 F1          0073*       pop af
04865A C1          0074*       pop bc
04865B C9          0075*       ret
04865C             0076*   
04865C             0077*   printHexCDE:
04865C             0078*   ; preserve registers
04865C C5          0079*       push bc ; b will be ok c will not
04865D F5          0080*       push af ; will get totally destroyed
04865E             0081*   ; print c
04865E 79          0082*       ld a,c
04865F CD 35 01 04 0083*       call printHex8
048663             0084*   ; print de
048663 EB          0085*       ex de,hl
048664 CD 2F 01 04 0086*       call printHex16
048668 EB          0087*       ex de,hl
048669             0088*   ; restore registers
048669 F1          0089*       pop af
04866A C1          0090*       pop bc
04866B C9          0091*       ret
04866C             0092*   
04866C             0093*   printHexUIX:
04866C             0094*   ; store everything in scratch
04866C 22 BC 03 04 0095*       ld (uhl),hl
048670 ED 43 BF 03 0096*       ld (ubc),bc
       04          
048675 ED 53 C2 03 0097*       ld (ude),de
       04          
04867A DD 22 C5 03 0098*       ld (uix),ix
       04          
04867F FD 22 C8 03 0099*       ld (uiy),iy
       04          
048684 F5          0100*       push af ; fml
048685             0101*   
048685 21 53 03 04 0102*       ld hl,str_ixu
048689 CD 07 01 04 0103*       call printString
04868D 2A C5 03 04 0104*       ld hl,(uix)
048691 CD 27 01 04 0105*       call printHex24
048695 CD 1C 01 04 0106*       call printNewLine
048699             0107*   
048699             0108*   ; restore everything
048699 2A BC 03 04 0109*       ld hl, (uhl)
04869D ED 4B BF 03 0110*       ld bc, (ubc)
       04          
0486A2 ED 5B C2 03 0111*       ld de, (ude)
       04          
0486A7 DD 2A C5 03 0112*       ld ix, (uix)
       04          
0486AC FD 2A C8 03 0113*       ld iy, (uiy)
       04          
0486B1 F1          0114*       pop af
0486B2             0115*   ; all done
0486B2 C9          0116*       ret
0486B3             0117*   
0486B3             0118*   
0486B3             0119*   ; print registers to screen in hexidecimal format
0486B3             0120*   ; inputs: none
0486B3             0121*   ; outputs: values of every register printed to screen
0486B3             0122*   ;    values of each register in global scratch memory
0486B3             0123*   ; destroys: nothing
0486B3             0124*   stepRegistersHex:
0486B3             0125*   ; store everything in scratch
0486B3 22 BC 03 04 0126*       ld (uhl),hl
0486B7 ED 43 BF 03 0127*       ld (ubc),bc
       04          
0486BC ED 53 C2 03 0128*       ld (ude),de
       04          
0486C1 DD 22 C5 03 0129*       ld (uix),ix
       04          
0486C6 FD 22 C8 03 0130*       ld (uiy),iy
       04          
0486CB F5          0131*       push af ; fml
0486CC E1          0132*       pop hl ; thanks, zilog
0486CD 22 B9 03 04 0133*       ld (uaf),hl
0486D1 F5          0134*       push af ; dammit
0486D2             0135*   
0486D2             0136*   ; home the cursor
0486D2             0137*       ; call vdu_home_cursor
0486D2             0138*   
0486D2             0139*   ; print each register
0486D2 21 3F 03 04 0140*       ld hl,str_afu
0486D6 CD 07 01 04 0141*       call printString
0486DA 2A B9 03 04 0142*       ld hl,(uaf)
0486DE CD 27 01 04 0143*       call printHex24
0486E2 CD 1C 01 04 0144*       call printNewLine
0486E6             0145*   
0486E6 21 44 03 04 0146*       ld hl,str_hlu
0486EA CD 07 01 04 0147*       call printString
0486EE 2A BC 03 04 0148*       ld hl,(uhl)
0486F2 CD 27 01 04 0149*       call printHex24
0486F6 CD 1C 01 04 0150*       call printNewLine
0486FA             0151*   
0486FA 21 49 03 04 0152*       ld hl,str_bcu
0486FE CD 07 01 04 0153*       call printString
048702 2A BF 03 04 0154*       ld hl,(ubc)
048706 CD 27 01 04 0155*       call printHex24
04870A CD 1C 01 04 0156*       call printNewLine
04870E             0157*   
04870E 21 4E 03 04 0158*       ld hl,str_deu
048712 CD 07 01 04 0159*       call printString
048716 2A C2 03 04 0160*       ld hl,(ude)
04871A CD 27 01 04 0161*       call printHex24
04871E CD 1C 01 04 0162*       call printNewLine
048722             0163*   
048722 21 53 03 04 0164*       ld hl,str_ixu
048726 CD 07 01 04 0165*       call printString
04872A 2A C5 03 04 0166*       ld hl,(uix)
04872E CD 27 01 04 0167*       call printHex24
048732 CD 1C 01 04 0168*       call printNewLine
048736             0169*   
048736 21 58 03 04 0170*       ld hl,str_iyu
04873A CD 07 01 04 0171*       call printString
04873E 2A C8 03 04 0172*       ld hl,(uiy)
048742 CD 27 01 04 0173*       call printHex24
048746 CD 1C 01 04 0174*       call printNewLine
04874A             0175*   
04874A             0176*       ; call vsync
04874A             0177*   
04874A CD 1C 01 04 0178*       call printNewLine
04874E             0179*   
04874E             0180*   ; check for right shift key and quit if pressed
04874E             0181*       MOSCALL mos_getkbmap
04874E 3E 1E       0001*M1 			LD	A, function
048750 5B CF       0002*M1 			RST.LIL	08h
048752             0182*   @stayhere:
048752             0183*   ; 7 RightShift
048752 DD CB 00 76 0184*       bit 6,(ix+0)
048756 20 02       0185*       jr nz,@RightShift
048758 18 F8       0186*       jr @stayhere
04875A             0187*   @RightShift:
04875A DD CB 0E 86 0188*       res 0,(ix+14) ; debounce the key (hopefully)
04875E 3E 80       0189*       ld a,%10000000
048760             0190*       ; call multiPurposeDelay
048760             0191*   
048760             0192*   ; restore everything
048760 2A BC 03 04 0193*       ld hl, (uhl)
048764 ED 4B BF 03 0194*       ld bc, (ubc)
       04          
048769 ED 5B C2 03 0195*       ld de, (ude)
       04          
04876E DD 2A C5 03 0196*       ld ix, (uix)
       04          
048773 FD 2A C8 03 0197*       ld iy, (uiy)
       04          
048778 F1          0198*       pop af
048779             0199*   ; all done
048779 C9          0200*       ret
04877A             0201*   
04877A             0202*   ; print registers to screen in hexidecimal format
04877A             0203*   ; inputs: none
04877A             0204*   ; outputs: values of every register printed to screen
04877A             0205*   ;    values of each register in global scratch memory
04877A             0206*   ; destroys: nothing
04877A             0207*   dumpRegistersHex:
04877A             0208*   ; store everything in scratch
04877A 22 BC 03 04 0209*       ld (uhl),hl
04877E ED 43 BF 03 0210*       ld (ubc),bc
       04          
048783 ED 53 C2 03 0211*       ld (ude),de
       04          
048788 DD 22 C5 03 0212*       ld (uix),ix
       04          
04878D FD 22 C8 03 0213*       ld (uiy),iy
       04          
048792 F5          0214*       push af ; fml
048793 E1          0215*       pop hl ; thanks, zilog
048794 22 B9 03 04 0216*       ld (uaf),hl
048798 F5          0217*       push af ; dammit
048799             0218*   
048799             0219*   ; home the cursor
048799             0220*       ; call vdu_home_cursor
048799             0221*       ; call printNewLine
048799             0222*   
048799             0223*   ; print each register
048799 21 3F 03 04 0224*       ld hl,str_afu
04879D CD 07 01 04 0225*       call printString
0487A1 2A B9 03 04 0226*       ld hl,(uaf)
0487A5 CD 27 01 04 0227*       call printHex24
0487A9 CD 1C 01 04 0228*       call printNewLine
0487AD             0229*   
0487AD 21 44 03 04 0230*       ld hl,str_hlu
0487B1 CD 07 01 04 0231*       call printString
0487B5 2A BC 03 04 0232*       ld hl,(uhl)
0487B9 CD 27 01 04 0233*       call printHex24
0487BD CD 1C 01 04 0234*       call printNewLine
0487C1             0235*   
0487C1 21 49 03 04 0236*       ld hl,str_bcu
0487C5 CD 07 01 04 0237*       call printString
0487C9 2A BF 03 04 0238*       ld hl,(ubc)
0487CD CD 27 01 04 0239*       call printHex24
0487D1 CD 1C 01 04 0240*       call printNewLine
0487D5             0241*   
0487D5 21 4E 03 04 0242*       ld hl,str_deu
0487D9 CD 07 01 04 0243*       call printString
0487DD 2A C2 03 04 0244*       ld hl,(ude)
0487E1 CD 27 01 04 0245*       call printHex24
0487E5 CD 1C 01 04 0246*       call printNewLine
0487E9             0247*   
0487E9 21 53 03 04 0248*       ld hl,str_ixu
0487ED CD 07 01 04 0249*       call printString
0487F1 2A C5 03 04 0250*       ld hl,(uix)
0487F5 CD 27 01 04 0251*       call printHex24
0487F9 CD 1C 01 04 0252*       call printNewLine
0487FD             0253*   
0487FD 21 58 03 04 0254*       ld hl,str_iyu
048801 CD 07 01 04 0255*       call printString
048805 2A C8 03 04 0256*       ld hl,(uiy)
048809 CD 27 01 04 0257*       call printHex24
04880D             0258*   
04880D CD 1C 01 04 0259*       call printNewLine
048811 CD 1C 01 04 0260*       call printNewLine
048815             0261*   ; restore everything
048815 2A BC 03 04 0262*       ld hl, (uhl)
048819 ED 4B BF 03 0263*       ld bc, (ubc)
       04          
04881E ED 5B C2 03 0264*       ld de, (ude)
       04          
048823 DD 2A C5 03 0265*       ld ix, (uix)
       04          
048828 FD 2A C8 03 0266*       ld iy, (uiy)
       04          
04882D F1          0267*       pop af
04882E             0268*   ; all done
04882E C9          0269*       ret
04882F             0270*   
04882F             0271*   dumpRegistersHexPrime:
04882F D9          0272*       exx
048830 08          0273*       ex af,af'
048831 CD 7A 87 04 0274*       call dumpRegistersHex
048835 08          0275*       ex af,af'
048836 D9          0276*       exx
048837 C9          0277*       ret
048838             0278*   
048838             0279*   ; additionally dump prime registers
048838             0280*   ; inputs: none
048838             0281*   ; outputs: values of every register printed to screen
048838             0282*   ; destroys: nothing
048838             0283*   dumpRegistersHexAll:
048838 CD 7A 87 04 0284*       call dumpRegistersHex
04883C 08          0285*       ex af,af'
04883D D9          0286*       exx
04883E CD 7A 87 04 0287*       call dumpRegistersHex
048842 08          0288*       ex af,af'
048843 D9          0289*       exx
048844 C9          0290*       ret
048845             0291*   
048845             0292*   ; print hlu to screen in hexidecimal format
048845             0293*   ; inputs: none
048845             0294*   ; destroys: nothing
048845             0295*   print_hex_hl:
048845 F5          0296*       push af
048846 E5          0297*       push hl
048847 21 44 03 04 0298*       ld hl,str_hlu
04884B CD 07 01 04 0299*       call printString
04884F E1          0300*       pop hl
048850 E5          0301*       push hl
048851 CD 27 01 04 0302*       call printHex24
048855 3E 20       0303*       ld a,' '
048857 5B D7       0304*       rst.lil 10h
048859 E1          0305*       pop hl
04885A F1          0306*       pop af
04885B C9          0307*       ret
04885C             0308*   
04885C             0309*   ; print bcu to screen in hexidecimal format
04885C             0310*   ; inputs: none
04885C             0311*   ; destroys: nothing
04885C             0312*   print_hex_bc:
04885C F5          0313*       push af
04885D E5          0314*       push hl
04885E C5          0315*       push bc
04885F 21 49 03 04 0316*       ld hl,str_bcu
048863 CD 07 01 04 0317*       call printString
048867 E1          0318*       pop hl
048868 E5          0319*       push hl
048869 CD 27 01 04 0320*       call printHex24
04886D 3E 20       0321*       ld a,' '
04886F 5B D7       0322*       rst.lil 10h
048871 C1          0323*       pop bc
048872 E1          0324*       pop hl
048873 F1          0325*       pop af
048874 C9          0326*       ret
048875             0327*   
048875             0328*   ; print deu to screen in hexidecimal format
048875             0329*   ; inputs: none
048875             0330*   ; destroys: nothing
048875             0331*   print_hex_de:
048875 F5          0332*       push af
048876 E5          0333*       push hl
048877 D5          0334*       push de
048878 21 4E 03 04 0335*       ld hl,str_deu
04887C CD 07 01 04 0336*       call printString
048880 E1          0337*       pop hl
048881 E5          0338*       push hl
048882 CD 27 01 04 0339*       call printHex24
048886 3E 20       0340*       ld a,' '
048888 5B D7       0341*       rst.lil 10h
04888A D1          0342*       pop de
04888B E1          0343*       pop hl
04888C F1          0344*       pop af
04888D C9          0345*       ret
04888E             0346*   
04888E             0347*   
04888E             0348*   ; inputs: whatever is in the flags register
04888E             0349*   ; outputs: binary representation of flags
04888E             0350*   ;          with a header so we know which is what
04888E             0351*   ; destroys: nothing
04888E             0352*   ; preserves: everything
04888E             0353*   dumpFlags:
04888E             0354*   ; first we curse zilog for not giving direct access to flags
04888E F5          0355*       push af ; this is so we can send it back unharmed
04888F F5          0356*       push af ; this is so we can pop it to hl
048890             0357*   ; store everything in scratch
048890 22 BC 03 04 0358*       ld (uhl),hl
048894 ED 43 BF 03 0359*       ld (ubc),bc
       04          
048899 ED 53 C2 03 0360*       ld (ude),de
       04          
04889E DD 22 C5 03 0361*       ld (uix),ix
       04          
0488A3 FD 22 C8 03 0362*       ld (uiy),iy
       04          
0488A8             0363*   ; next we print the header
0488A8 21 D4 88 04 0364*       ld hl,@header
0488AC CD 07 01 04 0365*       call printString
0488B0 E1          0366*       pop hl ; flags are now in l
0488B1 7D          0367*       ld a,l ; flags are now in a
0488B2 CD F5 02 04 0368*       call printBin8
0488B6 CD 1C 01 04 0369*       call printNewLine
0488BA             0370*   ; restore everything
0488BA 2A BC 03 04 0371*       ld hl, (uhl)
0488BE ED 4B BF 03 0372*       ld bc, (ubc)
       04          
0488C3 ED 5B C2 03 0373*       ld de, (ude)
       04          
0488C8 DD 2A C5 03 0374*       ld ix, (uix)
       04          
0488CD FD 2A C8 03 0375*       ld iy, (uiy)
       04          
0488D2 F1          0376*       pop af ; send her home the way she came
0488D3 C9          0377*       ret
0488D4             0378*   ; Bit 7 (S): Sign flag
0488D4             0379*   ; Bit 6 (Z): Zero flag
0488D4             0380*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0488D4             0381*   ; Bit 4 (H): Half Carry flag
0488D4             0382*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0488D4             0383*   ; Bit 2 (PV): Parity/Overflow flag
0488D4             0384*   ; Bit 1 (N): Subtract flag
0488D4             0385*   ; Bit 0 (C): Carry flag
0488D4 53 5A 78 48 0386*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0488DF             0387*   
0488DF             0388*   
0488DF             0389*   ; print bytes from an address to the screen in hexidecimal format
0488DF             0390*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0488DF             0391*   ; outputs: values of each byte printed to screen separated by spaces
0488DF             0392*   ; destroys: nothing
0488DF             0393*   dumpMemoryHex:
0488DF             0394*   ; save registers to the stack
0488DF C5          0395*       push bc
0488E0 E5          0396*       push hl
0488E1 F5          0397*       push af
0488E2             0398*   
0488E2             0399*   ; print the address and separator
0488E2 CD 27 01 04 0400*       call printHex24
0488E6 3E 3A       0401*       ld a,':'
0488E8 5B D7       0402*       rst.lil 10h
0488EA 3E 20       0403*       ld a,' '
0488EC 5B D7       0404*       rst.lil 10h
0488EE             0405*   
0488EE             0406*   ; set b to be our loop counter
0488EE F1          0407*       pop af
0488EF 47          0408*       ld b,a
0488F0 E1          0409*       pop hl
0488F1 E5          0410*       push hl
0488F2 F5          0411*       push af
0488F3             0412*   @loop:
0488F3             0413*   ; print the byte
0488F3 7E          0414*       ld a,(hl)
0488F4 CD 35 01 04 0415*       call printHex8
0488F8             0416*   ; print a space
0488F8 3E 20       0417*       ld a,' '
0488FA 5B D7       0418*       rst.lil 10h
0488FC 23          0419*       inc hl
0488FD 10 F4       0420*       djnz @loop
0488FF CD 1C 01 04 0421*       call printNewLine
048903             0422*   
048903             0423*   ; restore everything
048903 F1          0424*       pop af
048904 E1          0425*       pop hl
048905 C1          0426*       pop bc
048906             0427*   
048906             0428*   ; all done
048906 C9          0429*       ret
048907             0430*   
048907             0431*   
048907             0432*   ; print bytes from an address to the screen in binary format
048907             0433*   ; inputs: hl = address of first byte to print, a = number of bytes to print
048907             0434*   ; outputs: values of each byte printed to screen separated by spaces
048907             0435*   ; destroys: nothing
048907             0436*   dumpMemoryBin:
048907             0437*   ; save all registers to the stack
048907 F5          0438*       push af
048908 C5          0439*       push bc
048909 D5          0440*       push de
04890A E5          0441*       push hl
04890B DD E5       0442*       push ix
04890D FD E5       0443*       push iy
04890F             0444*   
04890F             0445*   ; set b to be our loop counter
04890F 47          0446*       ld b,a
048910             0447*   @loop:
048910             0448*   ; print the byte
048910 7E          0449*       ld a,(hl)
048911 E5          0450*       push hl
048912 C5          0451*       push bc
048913 CD F5 02 04 0452*       call printBin8
048917 C1          0453*       pop bc
048918             0454*   ; print a space
048918 3E 20       0455*       ld a,' '
04891A 5B D7       0456*       rst.lil 10h
04891C E1          0457*       pop hl
04891D 23          0458*       inc hl
04891E 10 F0       0459*       djnz @loop
048920 CD 1C 01 04 0460*       call printNewLine
048924             0461*   
048924             0462*   ; restore everything
048924 FD E1       0463*       pop iy
048926 DD E1       0464*       pop ix
048928 E1          0465*       pop hl
048929 D1          0466*       pop de
04892A C1          0467*       pop bc
04892B F1          0468*       pop af
04892C             0469*   ; all done
04892C C9          0470*       ret
04892D             0471*   
04892D             0472*   ; print bytes from an address to the screen in binary format
04892D             0473*   ; with the bits of each byte in reverse order (lsb first)
04892D             0474*   ; inputs: hl = address of first byte to print, a = number of bytes to print
04892D             0475*   ; outputs: values of each byte printed to screen separated by spaces
04892D             0476*   ; destroys: nothing
04892D             0477*   dumpMemoryBinRev:
04892D             0478*   ; save all registers to the stack
04892D F5          0479*       push af
04892E C5          0480*       push bc
04892F D5          0481*       push de
048930 E5          0482*       push hl
048931 DD E5       0483*       push ix
048933 FD E5       0484*       push iy
048935             0485*   
048935             0486*   ; set b to be our loop counter
048935 47          0487*       ld b,a
048936             0488*   @loop:
048936             0489*   ; print the byte
048936 7E          0490*       ld a,(hl)
048937 E5          0491*       push hl
048938 C5          0492*       push bc
048939 CD 1A 03 04 0493*       call printBin8Rev
04893D C1          0494*       pop bc
04893E             0495*   ; print a space
04893E 3E 20       0496*       ld a,' '
048940 5B D7       0497*       rst.lil 10h
048942 E1          0498*       pop hl
048943 23          0499*       inc hl
048944 10 F0       0500*       djnz @loop
048946 CD 1C 01 04 0501*       call printNewLine
04894A             0502*   
04894A             0503*   ; restore everything
04894A FD E1       0504*       pop iy
04894C DD E1       0505*       pop ix
04894E E1          0506*       pop hl
04894F D1          0507*       pop de
048950 C1          0508*       pop bc
048951 F1          0509*       pop af
048952             0510*   ; all done
048952 C9          0511*       ret
048953             0512*   
048953             0513*   DEBUG_PRINT:
048953             0514*       PUSH_ALL
048953 08          0001*M1     ex af,af'
048954 D9          0002*M1     exx
048955 F5          0003*M1     push af
048956 E5          0004*M1     push hl
048957 C5          0005*M1     push bc
048958 D5          0006*M1     push de
048959             0007*M1 
048959 08          0008*M1     ex af,af'
04895A D9          0009*M1     exx
04895B F5          0010*M1     push af
04895C E5          0011*M1     push hl
04895D C5          0012*M1     push bc
04895E D5          0013*M1     push de
04895F DD E5       0014*M1     push ix
048961 FD E5       0015*M1     push iy
048963 0E 00       0515*       ld c,0 ; X
048965 06 00       0516*       ld b,0 ; Y
048967 CD 37 16 04 0517*       call vdu_move_cursor
04896B             0518*       POP_ALL
04896B FD E1       0001*M1     pop iy
04896D DD E1       0002*M1     pop ix
04896F D1          0003*M1     pop de
048970 C1          0004*M1     pop bc
048971 E1          0005*M1     pop hl
048972 F1          0006*M1     pop af
048973 08          0007*M1     ex af,af'
048974 D9          0008*M1     exx
048975             0009*M1 
048975 D1          0010*M1     pop de
048976 C1          0011*M1     pop bc
048977 E1          0012*M1     pop hl
048978 F1          0013*M1     pop af
048979 08          0014*M1     ex af,af'
04897A D9          0015*M1     exx
04897B             0519*       PUSH_ALL
04897B 08          0001*M1     ex af,af'
04897C D9          0002*M1     exx
04897D F5          0003*M1     push af
04897E E5          0004*M1     push hl
04897F C5          0005*M1     push bc
048980 D5          0006*M1     push de
048981             0007*M1 
048981 08          0008*M1     ex af,af'
048982 D9          0009*M1     exx
048983 F5          0010*M1     push af
048984 E5          0011*M1     push hl
048985 C5          0012*M1     push bc
048986 D5          0013*M1     push de
048987 DD E5       0014*M1     push ix
048989 FD E5       0015*M1     push iy
04898B CD 8E 88 04 0520*       call dumpFlags
04898F             0521*       POP_ALL
04898F FD E1       0001*M1     pop iy
048991 DD E1       0002*M1     pop ix
048993 D1          0003*M1     pop de
048994 C1          0004*M1     pop bc
048995 E1          0005*M1     pop hl
048996 F1          0006*M1     pop af
048997 08          0007*M1     ex af,af'
048998 D9          0008*M1     exx
048999             0009*M1 
048999 D1          0010*M1     pop de
04899A C1          0011*M1     pop bc
04899B E1          0012*M1     pop hl
04899C F1          0013*M1     pop af
04899D 08          0014*M1     ex af,af'
04899E D9          0015*M1     exx
04899F             0522*       PUSH_ALL
04899F 08          0001*M1     ex af,af'
0489A0 D9          0002*M1     exx
0489A1 F5          0003*M1     push af
0489A2 E5          0004*M1     push hl
0489A3 C5          0005*M1     push bc
0489A4 D5          0006*M1     push de
0489A5             0007*M1 
0489A5 08          0008*M1     ex af,af'
0489A6 D9          0009*M1     exx
0489A7 F5          0010*M1     push af
0489A8 E5          0011*M1     push hl
0489A9 C5          0012*M1     push bc
0489AA D5          0013*M1     push de
0489AB DD E5       0014*M1     push ix
0489AD FD E5       0015*M1     push iy
0489AF CD 7A 87 04 0523*       call dumpRegistersHex
0489B3             0524*       ; call waitKeypress
0489B3             0525*       POP_ALL
0489B3 FD E1       0001*M1     pop iy
0489B5 DD E1       0002*M1     pop ix
0489B7 D1          0003*M1     pop de
0489B8 C1          0004*M1     pop bc
0489B9 E1          0005*M1     pop hl
0489BA F1          0006*M1     pop af
0489BB 08          0007*M1     ex af,af'
0489BC D9          0008*M1     exx
0489BD             0009*M1 
0489BD D1          0010*M1     pop de
0489BE C1          0011*M1     pop bc
0489BF E1          0012*M1     pop hl
0489C0 F1          0013*M1     pop af
0489C1 08          0014*M1     ex af,af'
0489C2 D9          0015*M1     exx
0489C3 C9          0526*       ret
0489C4             0527*   
0489C4             0528*   DEBUG_PRINT_TILE_TABLE:
0489C4             0529*       PUSH_ALL
0489C4 08          0001*M1     ex af,af'
0489C5 D9          0002*M1     exx
0489C6 F5          0003*M1     push af
0489C7 E5          0004*M1     push hl
0489C8 C5          0005*M1     push bc
0489C9 D5          0006*M1     push de
0489CA             0007*M1 
0489CA 08          0008*M1     ex af,af'
0489CB D9          0009*M1     exx
0489CC F5          0010*M1     push af
0489CD E5          0011*M1     push hl
0489CE C5          0012*M1     push bc
0489CF D5          0013*M1     push de
0489D0 DD E5       0014*M1     push ix
0489D2 FD E5       0015*M1     push iy
0489D4 CD 1C 01 04 0530*       call printNewLine
0489D8 DD 21 00 76 0531*       ld ix,tile_stack
       04          
0489DD DD 37 00    0532*       ld ix,(ix)
0489E0 CD 79 8E 04 0533*       call dump_tile_record
0489E4 CD 1C 01 04 0534*       call printNewLine
0489E8             0535*       POP_ALL
0489E8 FD E1       0001*M1     pop iy
0489EA DD E1       0002*M1     pop ix
0489EC D1          0003*M1     pop de
0489ED C1          0004*M1     pop bc
0489EE E1          0005*M1     pop hl
0489EF F1          0006*M1     pop af
0489F0 08          0007*M1     ex af,af'
0489F1 D9          0008*M1     exx
0489F2             0009*M1 
0489F2 D1          0010*M1     pop de
0489F3 C1          0011*M1     pop bc
0489F4 E1          0012*M1     pop hl
0489F5 F1          0013*M1     pop af
0489F6 08          0014*M1     ex af,af'
0489F7 D9          0015*M1     exx
0489F8 C9          0536*       ret
0489F9             0537*   ; end DEBUG_PRINT_TILE_TABLE
0489F9             0538*   
0489F9             0539*   DEBUG_PRINT_TABLE:
0489F9             0540*       PUSH_ALL
0489F9 08          0001*M1     ex af,af'
0489FA D9          0002*M1     exx
0489FB F5          0003*M1     push af
0489FC E5          0004*M1     push hl
0489FD C5          0005*M1     push bc
0489FE D5          0006*M1     push de
0489FF             0007*M1 
0489FF 08          0008*M1     ex af,af'
048A00 D9          0009*M1     exx
048A01 F5          0010*M1     push af
048A02 E5          0011*M1     push hl
048A03 C5          0012*M1     push bc
048A04 D5          0013*M1     push de
048A05 DD E5       0014*M1     push ix
048A07 FD E5       0015*M1     push iy
048A09 CD 1C 01 04 0541*       call printNewLine
048A0D CD B1 8C 04 0542*       call dump_sprite_record
048A11 CD 1C 01 04 0543*       call printNewLine
048A15 CD 1C 01 04 0544*       call printNewLine
048A19             0545*   
048A19 FD E5       0546*       push iy
048A1B DD E1       0547*       pop ix
048A1D CD B1 8C 04 0548*       call dump_sprite_record
048A21 CD 1C 01 04 0549*       call printNewLine
048A25 CD 1C 01 04 0550*       call printNewLine
048A29             0551*       POP_ALL
048A29 FD E1       0001*M1     pop iy
048A2B DD E1       0002*M1     pop ix
048A2D D1          0003*M1     pop de
048A2E C1          0004*M1     pop bc
048A2F E1          0005*M1     pop hl
048A30 F1          0006*M1     pop af
048A31 08          0007*M1     ex af,af'
048A32 D9          0008*M1     exx
048A33             0009*M1 
048A33 D1          0010*M1     pop de
048A34 C1          0011*M1     pop bc
048A35 E1          0012*M1     pop hl
048A36 F1          0013*M1     pop af
048A37 08          0014*M1     ex af,af'
048A38 D9          0015*M1     exx
048A39 C9          0552*       RET
048A3A             0553*   
048A3A             0554*   DEBUG_WAITKEYPRESS:
048A3A             0555*       PUSH_ALL
048A3A 08          0001*M1     ex af,af'
048A3B D9          0002*M1     exx
048A3C F5          0003*M1     push af
048A3D E5          0004*M1     push hl
048A3E C5          0005*M1     push bc
048A3F D5          0006*M1     push de
048A40             0007*M1 
048A40 08          0008*M1     ex af,af'
048A41 D9          0009*M1     exx
048A42 F5          0010*M1     push af
048A43 E5          0011*M1     push hl
048A44 C5          0012*M1     push bc
048A45 D5          0013*M1     push de
048A46 DD E5       0014*M1     push ix
048A48 FD E5       0015*M1     push iy
048A4A CD E1 03 04 0556*       call waitKeypress
048A4E             0557*       POP_ALL
048A4E FD E1       0001*M1     pop iy
048A50 DD E1       0002*M1     pop ix
048A52 D1          0003*M1     pop de
048A53 C1          0004*M1     pop bc
048A54 E1          0005*M1     pop hl
048A55 F1          0006*M1     pop af
048A56 08          0007*M1     ex af,af'
048A57 D9          0008*M1     exx
048A58             0009*M1 
048A58 D1          0010*M1     pop de
048A59 C1          0011*M1     pop bc
048A5A E1          0012*M1     pop hl
048A5B F1          0013*M1     pop af
048A5C 08          0014*M1     ex af,af'
048A5D D9          0015*M1     exx
048A5E C9          0558*       RET
048A5F             0559*   
048A5F             0560*   DEBUG_PRINT_FIELDS:
048A5F             0561*       ; PUSH_ALL
048A5F 01 00 00 00 0562*       ld bc,0
048A63 4F          0563*       ld c,a
048A64 DD 21 2A 91 0564*       ld ix,table_base
       04          
048A69 DD 09       0565*       add ix,bc
048A6B 06 14       0566*       ld b,table_num_records
048A6D             0567*   @@:
048A6D DD E5       0568*       push ix
048A6F E1          0569*       pop hl
048A70 C5          0570*       push bc ; save loop counter
048A71 3E 01       0571*       ld a,1 ; print one byte
048A73 CD DF 88 04 0572*       call dumpMemoryHex
048A77 ED 32 40    0573*       lea ix,ix+table_record_size
048A7A C1          0574*       pop bc ; restore loop counter
048A7B 10 F0       0575*       djnz @b
048A7D             0576*       ; POP_ALL
048A7D C9          0577*       ret
048A7E             0578*   
048A7E             0579*   DEBUG_PRINT_TILE_STACK:
048A7E             0580*       PUSH_ALL
048A7E 08          0001*M1     ex af,af'
048A7F D9          0002*M1     exx
048A80 F5          0003*M1     push af
048A81 E5          0004*M1     push hl
048A82 C5          0005*M1     push bc
048A83 D5          0006*M1     push de
048A84             0007*M1 
048A84 08          0008*M1     ex af,af'
048A85 D9          0009*M1     exx
048A86 F5          0010*M1     push af
048A87 E5          0011*M1     push hl
048A88 C5          0012*M1     push bc
048A89 D5          0013*M1     push de
048A8A DD E5       0014*M1     push ix
048A8C FD E5       0015*M1     push iy
048A8E 01 00 00 00 0581*       ld bc,0
048A92 11 00 00 00 0582*       ld de,0
048A96 CD D0 16 04 0583*       call vdu_set_gfx_origin
048A9A 01 00 00 00 0584*       ld bc,0
048A9E 11 00 00 00 0585*       ld de,0
048AA2 DD 21 7F 00 0586*       ld ix,127
       00          
048AA7 FD 21 F0 00 0587*       ld iy,240
       00          
048AAC CD EB 16 04 0588*       call vdu_set_gfx_viewport
048AB0 CD 5E 16 04 0589*       call vdu_clg
048AB4 CD 00 16 04 0590*       call vdu_home_cursor
048AB8 CD 1C 01 04 0591*       call printNewLine
048ABC CD 1C 01 04 0592*       call printNewLine
048AC0 2A 03 79 04 0593*       ld hl,(tile_stack_pointer)
048AC4 CD 1A 86 04 0594*       call printHexUHL
048AC8 CD 1C 01 04 0595*       call printNewLine
048ACC 3A 09 79 04 0596*       ld a,(num_active_tiles)
048AD0 CD 00 86 04 0597*       call printHexA
048AD4 CD 1C 01 04 0598*       call printNewLine
048AD8 A7          0599*       and a
048AD9 CA 07 8B 04 0600*       jp z,@done
048ADD DD 21 00 76 0601*       ld ix,tile_stack
       04          
048AE2 3A 09 79 04 0602*       ld a,(num_active_tiles)
048AE6 47          0603*       ld b,a
048AE7             0604*   @loop:
048AE7 C5          0605*       push bc
048AE8 DD E5       0606*       push ix
048AEA DD 37 00    0607*       ld ix,(ix)
048AED DD 7E 00    0608*       ld a,(ix+tile_id)
048AF0 CD 00 86 04 0609*       call printHexA
048AF4 DD 7E 16    0610*       ld a,(ix+tile_type)
048AF7 CD 00 86 04 0611*       call printHexA
048AFB CD 1C 01 04 0612*       call printNewLine
048AFF DD E1       0613*       pop ix
048B01 ED 32 03    0614*       lea ix,ix+3
048B04 C1          0615*       pop bc
048B05 10 E0       0616*       djnz @loop
048B07             0617*   @done:
048B07             0618*       POP_ALL
048B07 FD E1       0001*M1     pop iy
048B09 DD E1       0002*M1     pop ix
048B0B D1          0003*M1     pop de
048B0C C1          0004*M1     pop bc
048B0D E1          0005*M1     pop hl
048B0E F1          0006*M1     pop af
048B0F 08          0007*M1     ex af,af'
048B10 D9          0008*M1     exx
048B11             0009*M1 
048B11 D1          0010*M1     pop de
048B12 C1          0011*M1     pop bc
048B13 E1          0012*M1     pop hl
048B14 F1          0013*M1     pop af
048B15 08          0014*M1     ex af,af'
048B16 D9          0015*M1     exx
048B17 C9          0619*       ret
048B18             0620*   
048B18             0621*   DEBUG_DUMP_PLAYER_RECORD:
048B18             0622*       PUSH_ALL
048B18 08          0001*M1     ex af,af'
048B19 D9          0002*M1     exx
048B1A F5          0003*M1     push af
048B1B E5          0004*M1     push hl
048B1C C5          0005*M1     push bc
048B1D D5          0006*M1     push de
048B1E             0007*M1 
048B1E 08          0008*M1     ex af,af'
048B1F D9          0009*M1     exx
048B20 F5          0010*M1     push af
048B21 E5          0011*M1     push hl
048B22 C5          0012*M1     push bc
048B23 D5          0013*M1     push de
048B24 DD E5       0014*M1     push ix
048B26 FD E5       0015*M1     push iy
048B28 CD 1C 01 04 0623*       call printNewLine
048B2C CD E6 8F 04 0624*       CALL dump_player_record
048B30 CD 1C 01 04 0625*       call printNewLine
048B34             0626*       POP_ALL
048B34 FD E1       0001*M1     pop iy
048B36 DD E1       0002*M1     pop ix
048B38 D1          0003*M1     pop de
048B39 C1          0004*M1     pop bc
048B3A E1          0005*M1     pop hl
048B3B F1          0006*M1     pop af
048B3C 08          0007*M1     ex af,af'
048B3D D9          0008*M1     exx
048B3E             0009*M1 
048B3E D1          0010*M1     pop de
048B3F C1          0011*M1     pop bc
048B40 E1          0012*M1     pop hl
048B41 F1          0013*M1     pop af
048B42 08          0014*M1     ex af,af'
048B43 D9          0015*M1     exx
048B44 C9          0627*       RET
048B45             0628*   
048B45             0629*   DEBUG_PRINT_SHIELDS:
048B45             0630*       PUSH_ALL
048B45 08          0001*M1     ex af,af'
048B46 D9          0002*M1     exx
048B47 F5          0003*M1     push af
048B48 E5          0004*M1     push hl
048B49 C5          0005*M1     push bc
048B4A D5          0006*M1     push de
048B4B             0007*M1 
048B4B 08          0008*M1     ex af,af'
048B4C D9          0009*M1     exx
048B4D F5          0010*M1     push af
048B4E E5          0011*M1     push hl
048B4F C5          0012*M1     push bc
048B50 D5          0013*M1     push de
048B51 DD E5       0014*M1     push ix
048B53 FD E5       0015*M1     push iy
048B55 0E 00       0631*       ld c,0 ; X
048B57 06 00       0632*       ld b,0 ; Y
048B59 CD 37 16 04 0633*       call vdu_move_cursor
048B5D             0634*   
048B5D CD 8E 88 04 0635*       call dumpFlags
048B61 CD 7A 87 04 0636*       call dumpRegistersHex
048B65             0637*   
048B65 DD 21 E4 70 0638*       ld ix,bar_shields
       04          
048B6A             0639*   
048B6A CD 00 01 04 0640*       call printInline
048B6E 76 61 6C 3A 0641*       asciz "val:"
       00          
048B73 DD 27 00    0642*       ld hl,(ix+bar_val)
048B76 CD 53 01 04 0643*       call printDec
048B7A CD 1C 01 04 0644*       call printNewLine
048B7E             0645*   
048B7E CD 00 01 04 0646*       call printInline
048B82 78 30 20 3A 0647*       asciz "x0 :"
       00          
048B87 DD 27 03    0648*       ld hl,(ix+bar_x0)
048B8A CD 53 01 04 0649*       call printDec
048B8E CD 1C 01 04 0650*       call printNewLine
048B92             0651*   
048B92 CD 00 01 04 0652*       call printInline
048B96 79 30 20 3A 0653*       asciz "y0 :"
       00          
048B9B DD 27 06    0654*       ld hl,(ix+bar_y0)
048B9E CD 53 01 04 0655*       call printDec
048BA2 CD 1C 01 04 0656*       call printNewLine
048BA6             0657*   
048BA6 CD 00 01 04 0658*       call printInline
048BAA 78 31 20 3A 0659*       asciz "x1 :"
       00          
048BAF DD 27 09    0660*       ld hl,(ix+bar_x1)
048BB2 CD 53 01 04 0661*       call printDec
048BB6 CD 1C 01 04 0662*       call printNewLine
048BBA             0663*   
048BBA CD 00 01 04 0664*       call printInline
048BBE 79 31 20 3A 0665*       asciz "y1 :"
       00          
048BC3 DD 27 0C    0666*       ld hl,(ix+bar_y1)
048BC6 CD 53 01 04 0667*       call printDec
048BCA CD 1C 01 04 0668*       call printNewLine
048BCE             0669*   
048BCE CD 00 01 04 0670*       call printInline
048BD2 79 20 20 3A 0671*       asciz "y  :"
       00          
048BD7 DD 27 0F    0672*       ld hl,(ix+bar_y)
048BDA CD 53 01 04 0673*       call printDec
048BDE CD 1C 01 04 0674*       call printNewLine
048BE2             0675*   
048BE2             0676*       POP_ALL
048BE2 FD E1       0001*M1     pop iy
048BE4 DD E1       0002*M1     pop ix
048BE6 D1          0003*M1     pop de
048BE7 C1          0004*M1     pop bc
048BE8 E1          0005*M1     pop hl
048BE9 F1          0006*M1     pop af
048BEA 08          0007*M1     ex af,af'
048BEB D9          0008*M1     exx
048BEC             0009*M1 
048BEC D1          0010*M1     pop de
048BED C1          0011*M1     pop bc
048BEE E1          0012*M1     pop hl
048BEF F1          0013*M1     pop af
048BF0 08          0014*M1     ex af,af'
048BF1 D9          0015*M1     exx
048BF2             0677*       ; call waitKeypress
048BF2 C9          0678*       ret
048BF3             0679*   ; end DEBUG_PRINT_SHIELDS
048BF3             0680*   
048BF3             0681*   DEBUG_PRINT_BAR_UPDATE:
048BF3 0E 00       0682*       ld c,0 ; X
048BF5 06 00       0683*       ld b,0 ; Y
048BF7 CD 37 16 04 0684*       call vdu_move_cursor
048BFB             0685*   
048BFB CD 00 01 04 0686*       call printInline
048BFF 78 30 20 20 0687*       asciz "x0  :"
       3A 00       
048C05 21 00 00 00 0688*       ld hl,0 ; clear hlu
048C09 DD 6E 01    0689*       ld l,(ix+@x0-@cmd0+0)
048C0C DD 66 02    0690*       ld h,(ix+@x0-@cmd0+1)
048C0F CD 53 01 04 0691*       call printDec
048C13 CD 1C 01 04 0692*       call printNewLine
048C17             0693*   
048C17 CD 00 01 04 0694*       call printInline
048C1B 79 30 20 20 0695*       asciz "y0  :"
       3A 00       
048C21 21 00 00 00 0696*       ld hl,0 ; clear hlu
048C25 DD 6E 07    0697*       ld l,(ix+@y0-@cmd0+0)
048C28 DD 66 08    0698*       ld h,(ix+@y0-@cmd0+1)
048C2B CD 53 01 04 0699*       call printDec
048C2F CD 1C 01 04 0700*       call printNewLine
048C33             0701*   
048C33 CD 00 01 04 0702*       call printInline
048C37 78 31 20 20 0703*       asciz "x1  :"
       3A 00       
048C3D 21 00 00 00 0704*       ld hl,0 ; clear hlu
048C41 DD 6E 05    0705*       ld l,(ix+@x1-@cmd0+0)
048C44 DD 66 06    0706*       ld h,(ix+@x1-@cmd0+1)
048C47 CD 53 01 04 0707*       call printDec
048C4B CD 1C 01 04 0708*       call printNewLine
048C4F             0709*   
048C4F CD 00 01 04 0710*       call printInline
048C53 79 31 20 20 0711*       asciz "y1  :"
       3A 00       
048C59 21 00 00 00 0712*       ld hl,0 ; clear hlu
048C5D DD 6E 03    0713*       ld l,(ix+@y1-@cmd0+0)
048C60 DD 66 04    0714*       ld h,(ix+@y1-@cmd0+1)
048C63 CD 53 01 04 0715*       call printDec
048C67 CD 1C 01 04 0716*       call printNewLine
048C6B             0717*   
048C6B CD 00 01 04 0718*       call printInline
048C6F 78 32 20 20 0719*       asciz "x2  :"
       3A 00       
048C75 21 00 00 00 0720*       ld hl,0 ; clear hlu
048C79 DD 6E 0B    0721*       ld l,(ix+@x2-@cmd0+0)
048C7C DD 66 0C    0722*       ld h,(ix+@x2-@cmd0+1)
048C7F CD 53 01 04 0723*       call printDec
048C83 CD 1C 01 04 0724*       call printNewLine
048C87             0725*   
048C87 CD 00 01 04 0726*       call printInline
048C8B 58 32 20 79 0727*       asciz "X2 y2:"
       32 3A 00    
048C92 21 00 00 00 0728*       ld hl,0 ; clear hlu
048C96 DD 6E 0D    0729*       ld l,(ix+@y2-@cmd0+0)
048C99 DD 66 0E    0730*       ld h,(ix+@y2-@cmd0+1)
048C9C CD 53 01 04 0731*       call printDec
048CA0 C9          0732*       ret
048CA1 18          0733*   @cmd0:   db 24
048CA2 00 00       0734*   @x0: 	dw 0x0000
048CA4 00 00       0735*   @y1: 	dw 0x0000
048CA6 00 00       0736*   @x1: 	dw 0x0000
048CA8 00 00       0737*   @y0: 	dw 0x0000
048CAA             0738*   ; plot bitmap command
048CAA 19          0739*   @cmd1:   db 25 ; stomped on by @y0 load
048CAB ED          0740*   @mode:  db plot_bmp+dr_abs_fg ; 0xED stomped on by @x2 load
048CAC 00 00       0741*   @x2: 	dw 0x0000
048CAE 00 00       0742*   @y2: 	dw 0x0000
048CB0 00          0743*   @end:  db 0x00 ; padding
048CB1             0744*   ; end DEBUG_PRINT_BAR_UPDATE
048CB1             0745*   
048CB1             0746*   
048CB1             0747*   dump_sprite_record:
048CB1             0748*       ; call vdu_home_cursor
048CB1 CD 00 01 04 0749*       call printInline
048CB5 69 64 20 20 0750*       asciz "id  : "
       3A 20 00    
048CBC DD 7E 00    0751*       ld a,(ix+sprite_id)
048CBF CD 00 86 04 0752*       call printHexA
048CC3             0753*   
048CC3 CD 00 01 04 0754*       call printInline
048CC7 0D 0A 78 20 0755*       asciz "\r\nx   :"
       20 20 3A 00 
048CCF DD 27 01    0756*       ld hl,(ix+sprite_x)
048CD2 CD 78 02 04 0757*       call print_s168_hl
048CD6             0758*   
048CD6 CD 00 01 04 0759*       call printInline
048CDA 0D 0A 79 20 0760*       asciz "\r\ny   :"
       20 20 3A 00 
048CE2 DD 27 04    0761*       ld hl,(ix+sprite_y)
048CE5 CD 78 02 04 0762*       call print_s168_hl
048CE9             0763*   
048CE9 CD 00 01 04 0764*       call printInline
048CED 0D 0A 78 76 0765*       asciz "\r\nxv  :"
       20 20 3A 00 
048CF5 DD 27 07    0766*       ld hl,(ix+sprite_xvel)
048CF8 CD 78 02 04 0767*       call print_s168_hl
048CFC             0768*   
048CFC CD 00 01 04 0769*       call printInline
048D00 0D 0A 79 76 0770*       asciz "\r\nyv  :"
       20 20 3A 00 
048D08 DD 27 0A    0771*       ld hl,(ix+sprite_yvel)
048D0B CD 78 02 04 0772*       call print_s168_hl
048D0F             0773*   
048D0F CD 00 01 04 0774*       call printInline
048D13 0D 0A 76 20 0775*       asciz "\r\nv   :"
       20 20 3A 00 
048D1B DD 27 0D    0776*       ld hl,(ix+sprite_vel)
048D1E CD 78 02 04 0777*       call print_s168_hl
048D22             0778*   
048D22 CD 00 01 04 0779*       call printInline
048D26 0D 0A 68 64 0780*       asciz "\r\nhdg :"
       67 20 3A 00 
048D2E DD 27 10    0781*       ld hl,(ix+sprite_heading)
048D31 CD 78 02 04 0782*       call print_s168_hl
048D35             0783*   
048D35 CD 00 01 04 0784*       call printInline
048D39 0D 0A 6F 72 0785*       asciz "\r\nori :"
       69 20 3A 00 
048D41 DD 27 13    0786*       ld hl,(ix+sprite_orientation)
048D44 CD 78 02 04 0787*       call print_s168_hl
048D48             0788*   
048D48 CD 00 01 04 0789*       call printInline
048D4C 0D 0A 74 79 0790*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
048D55 DD 7E 16    0791*       ld a,(ix+sprite_type)
048D58 CD 00 86 04 0792*       call printHexA
048D5C             0793*   
048D5C CD 00 01 04 0794*       call printInline
048D60 0D 0A 42 49 0795*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
048D69 DD 27 17    0796*       ld hl,(ix+sprite_base_bufferId)
048D6C CD 27 01 04 0797*       call printHex24
048D70             0798*   
048D70 CD 00 01 04 0799*       call printInline
048D74 0D 0A 6D 50 0800*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
048D7D DD 27 1A    0801*       ld hl,(ix+sprite_move_program)
048D80 CD 27 01 04 0802*       call printHex24
048D84             0803*   
048D84 CD 00 01 04 0804*       call printInline
048D88 0D 0A 63 6F 0805*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
048D91 DD 7E 1D    0806*       ld a,(ix+sprite_collisions)
048D94 CD F5 02 04 0807*       call printBin8
048D98             0808*   
048D98 CD 00 01 04 0809*       call printInline
048D9C 0D 0A 73 7A 0810*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
048DA5 DD 7E 1E    0811*       ld a,(ix+sprite_dim_x)
048DA8 CD 00 86 04 0812*       call printHexA
048DAC             0813*   
048DAC CD 00 01 04 0814*       call printInline
048DB0 0D 0A 73 7A 0815*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
048DB9 DD 7E 1F    0816*       ld a,(ix+sprite_dim_y)
048DBC CD 00 86 04 0817*       call printHexA
048DC0             0818*   
048DC0 CD 00 01 04 0819*       call printInline
048DC4 0D 0A 23 6F 0820*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
048DCD DD 7E 20    0821*       ld a,(ix+sprite_num_orientations)
048DD0 CD 00 86 04 0822*       call printHexA
048DD4             0823*   
048DD4 CD 00 01 04 0824*       call printInline
048DD8 0D 0A 23 61 0825*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
048DE1 DD 7E 21    0826*       ld a,(ix+sprite_num_animations)
048DE4 CD 00 86 04 0827*       call printHexA
048DE8             0828*   
048DE8 CD 00 01 04 0829*       call printInline
048DEC 0D 0A 61 6E 0830*       asciz "\r\nani : "
       69 20 3A 20 
       00          
048DF5 DD 7E 22    0831*       ld a,(ix+sprite_animation)
048DF8 CD 00 86 04 0832*       call printHexA
048DFC             0833*   
048DFC CD 00 01 04 0834*       call printInline
048E00 0D 0A 61 6E 0835*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
048E09 DD 7E 23    0836*       ld a,(ix+sprite_animation_timer)
048E0C CD 00 86 04 0837*       call printHexA
048E10             0838*   
048E10 CD 00 01 04 0839*       call printInline
048E14 0D 0A 6D 76 0840*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
048E1D DD 7E 24    0841*       ld a,(ix+sprite_move_timer)
048E20 CD 00 86 04 0842*       call printHexA
048E24             0843*   
048E24 CD 00 01 04 0844*       call printInline
048E28 0D 0A 6D 76 0845*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
048E31 DD 7E 25    0846*       ld a,(ix+sprite_move_step)
048E34 CD 00 86 04 0847*       call printHexA
048E38             0848*   
048E38 CD 00 01 04 0849*       call printInline
048E3C 0D 0A 70 74 0850*       asciz "\r\npts : "
       73 20 3A 20 
       00          
048E45 DD 7E 26    0851*       ld a,(ix+sprite_points)
048E48 CD 00 86 04 0852*       call printHexA
048E4C             0853*   
048E4C CD 00 01 04 0854*       call printInline
048E50 0D 0A 64 6D 0855*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
048E59 DD 7E 27    0856*       ld a,(ix+sprite_shield_damage)
048E5C CD 00 86 04 0857*       call printHexA
048E60             0858*   
048E60 CD 00 01 04 0859*       call printInline
048E64 0D 0A 66 72 0860*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
048E6D DD 7E 28    0861*       ld a,(ix+sprite_frame)
048E70 CD 00 86 04 0862*       call printHexA
048E74             0863*   
048E74 CD 1C 01 04 0864*       call printNewLine
048E78             0865*   
048E78             0866*       ; call waitKeypress
048E78 C9          0867*       ret
048E79             0868*   
048E79             0869*   dump_tile_record:
048E79 CD 00 01 04 0870*       call printInline
048E7D 69 64 20 20 0871*       asciz "id  : "
       3A 20 00    
048E84 DD 7E 00    0872*       ld a,(ix+tile_id)
048E87 CD 00 86 04 0873*       call printHexA
048E8B             0874*   
048E8B CD 00 01 04 0875*       call printInline
048E8F 0D 0A 78 20 0876*       asciz "\r\nx   :"
       20 20 3A 00 
048E97 DD 27 01    0877*       ld hl,(ix+tile_x)
048E9A CD 78 02 04 0878*       call print_s168_hl
048E9E             0879*   
048E9E CD 00 01 04 0880*       call printInline
048EA2 0D 0A 79 20 0881*       asciz "\r\ny   :"
       20 20 3A 00 
048EAA DD 27 04    0882*       ld hl,(ix+tile_y)
048EAD CD 78 02 04 0883*       call print_s168_hl
048EB1             0884*   
048EB1             0885*       ; call printInline
048EB1             0886*       ; asciz "\r\nxv  :"
048EB1             0887*       ; ld hl,(ix+tile_xvel)
048EB1             0888*       ; call print_s168_hl
048EB1             0889*   
048EB1             0890*       ; call printInline
048EB1             0891*       ; asciz "\r\nyv  :"
048EB1             0892*       ; ld hl,(ix+tile_yvel)
048EB1             0893*       ; call print_s168_hl
048EB1             0894*   
048EB1             0895*       ; call printInline
048EB1             0896*       ; asciz "\r\nv   :"
048EB1             0897*       ; ld hl,(ix+tile_vel)
048EB1             0898*       ; call print_s168_hl
048EB1             0899*   
048EB1             0900*       ; call printInline
048EB1             0901*       ; asciz "\r\nhdg :"
048EB1             0902*       ; ld hl,(ix+tile_heading)
048EB1             0903*       ; call print_s168_hl
048EB1             0904*   
048EB1             0905*       ; call printInline
048EB1             0906*       ; asciz "\r\nori :"
048EB1             0907*       ; ld hl,(ix+tile_orientation)
048EB1             0908*       ; call print_s168_hl
048EB1             0909*   
048EB1 CD 00 01 04 0910*       call printInline
048EB5 0D 0A 74 79 0911*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
048EBE DD 7E 16    0912*       ld a,(ix+tile_type)
048EC1 CD 00 86 04 0913*       call printHexA
048EC5             0914*   
048EC5 CD 00 01 04 0915*       call printInline
048EC9 0D 0A 42 49 0916*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
048ED2 DD 27 17    0917*       ld hl,(ix+tile_base_bufferId)
048ED5 CD 27 01 04 0918*       call printHex24
048ED9             0919*   
048ED9 CD 00 01 04 0920*       call printInline
048EDD 0D 0A 6D 50 0921*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
048EE6 DD 27 1A    0922*       ld hl,(ix+tile_move_program)
048EE9 CD 27 01 04 0923*       call printHex24
048EED             0924*   
048EED CD 00 01 04 0925*       call printInline
048EF1 0D 0A 63 6F 0926*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
048EFA DD 7E 1D    0927*       ld a,(ix+tile_collisions)
048EFD CD F5 02 04 0928*       call printBin8
048F01             0929*   
048F01 CD 00 01 04 0930*       call printInline
048F05 0D 0A 73 7A 0931*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
048F0E DD 7E 1E    0932*       ld a,(ix+tile_dim_x)
048F11 CD 00 86 04 0933*       call printHexA
048F15             0934*   
048F15 CD 00 01 04 0935*       call printInline
048F19 0D 0A 73 7A 0936*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
048F22 DD 7E 1F    0937*       ld a,(ix+tile_dim_y)
048F25 CD 00 86 04 0938*       call printHexA
048F29             0939*   
048F29 CD 00 01 04 0940*       call printInline
048F2D 0D 0A 23 6F 0941*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
048F36 DD 7E 20    0942*       ld a,(ix+tile_num_orientations)
048F39 CD 00 86 04 0943*       call printHexA
048F3D             0944*   
048F3D CD 00 01 04 0945*       call printInline
048F41 0D 0A 23 61 0946*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
048F4A DD 7E 21    0947*       ld a,(ix+tile_num_animations)
048F4D CD 00 86 04 0948*       call printHexA
048F51             0949*   
048F51 CD 00 01 04 0950*       call printInline
048F55 0D 0A 61 6E 0951*       asciz "\r\nani : "
       69 20 3A 20 
       00          
048F5E DD 7E 22    0952*       ld a,(ix+tile_animation)
048F61 CD 00 86 04 0953*       call printHexA
048F65             0954*   
048F65 CD 00 01 04 0955*       call printInline
048F69 0D 0A 61 6E 0956*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
048F72 DD 7E 23    0957*       ld a,(ix+tile_animation_timer)
048F75 CD 00 86 04 0958*       call printHexA
048F79             0959*   
048F79 CD 00 01 04 0960*       call printInline
048F7D 0D 0A 6D 76 0961*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
048F86 DD 7E 24    0962*       ld a,(ix+tile_move_timer)
048F89 CD 00 86 04 0963*       call printHexA
048F8D             0964*   
048F8D CD 00 01 04 0965*       call printInline
048F91 0D 0A 6D 76 0966*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
048F9A DD 7E 25    0967*       ld a,(ix+tile_move_step)
048F9D CD 00 86 04 0968*       call printHexA
048FA1             0969*   
048FA1 CD 00 01 04 0970*       call printInline
048FA5 0D 0A 70 74 0971*       asciz "\r\npts : "
       73 20 3A 20 
       00          
048FAE DD 7E 26    0972*       ld a,(ix+tile_points)
048FB1 CD 00 86 04 0973*       call printHexA
048FB5             0974*   
048FB5 CD 00 01 04 0975*       call printInline
048FB9 0D 0A 64 6D 0976*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
048FC2 DD 7E 27    0977*       ld a,(ix+tile_shield_damage)
048FC5 CD 00 86 04 0978*       call printHexA
048FC9             0979*   
048FC9 CD 00 01 04 0980*       call printInline
048FCD 0D 0A 66 72 0981*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
048FD6 DD 7E 28    0982*       ld a,(ix+tile_frame)
048FD9 CD 00 86 04 0983*       call printHexA
048FDD             0984*   
048FDD CD 1C 01 04 0985*       call printNewLine
048FE1 CD 1C 01 04 0986*       call printNewLine
048FE5             0987*   
048FE5             0988*       ; call waitKeypress
048FE5 C9          0989*       ret
048FE6             0990*   
048FE6             0991*   dump_player_record:
048FE6 DD 21 2A 92 0992*       ld ix,player_begin
       04          
048FEB             0993*   
048FEB CD 00 01 04 0994*       call printInline
048FEF 69 64 20 20 0995*       asciz "id  : "
       3A 20 00    
048FF6 DD 7E 00    0996*       ld a,(ix+sprite_id)
048FF9 CD 00 86 04 0997*       call printHexA
048FFD             0998*   
048FFD CD 00 01 04 0999*       call printInline
049001 0D 0A 78 20 1000*       asciz "\r\nx   :"
       20 20 3A 00 
049009 DD 27 01    1001*       ld hl,(ix+sprite_x)
04900C CD 78 02 04 1002*       call print_s168_hl
049010             1003*   
049010 CD 00 01 04 1004*       call printInline
049014 0D 0A 79 20 1005*       asciz "\r\ny   :"
       20 20 3A 00 
04901C DD 27 04    1006*       ld hl,(ix+sprite_y)
04901F CD 78 02 04 1007*       call print_s168_hl
049023             1008*   
049023 CD 00 01 04 1009*       call printInline
049027 0D 0A 78 76 1010*       asciz "\r\nxv  :"
       20 20 3A 00 
04902F DD 27 07    1011*       ld hl,(ix+sprite_xvel)
049032 CD 78 02 04 1012*       call print_s168_hl
049036             1013*   
049036 CD 00 01 04 1014*       call printInline
04903A 0D 0A 79 76 1015*       asciz "\r\nyv  :"
       20 20 3A 00 
049042 DD 27 0A    1016*       ld hl,(ix+sprite_yvel)
049045 CD 78 02 04 1017*       call print_s168_hl
049049             1018*   
049049 CD 00 01 04 1019*       call printInline
04904D 0D 0A 76 20 1020*       asciz "\r\nv   :"
       20 20 3A 00 
049055 DD 27 0D    1021*       ld hl,(ix+sprite_vel)
049058 CD 78 02 04 1022*       call print_s168_hl
04905C             1023*   
04905C CD 00 01 04 1024*       call printInline
049060 0D 0A 68 64 1025*       asciz "\r\nhdg :"
       67 20 3A 00 
049068 DD 27 10    1026*       ld hl,(ix+sprite_heading)
04906B CD 78 02 04 1027*       call print_s168_hl
04906F             1028*   
04906F CD 00 01 04 1029*       call printInline
049073 0D 0A 6F 72 1030*       asciz "\r\nori :"
       69 20 3A 00 
04907B DD 27 13    1031*       ld hl,(ix+sprite_orientation)
04907E CD 78 02 04 1032*       call print_s168_hl
049082             1033*   
049082 CD 00 01 04 1034*       call printInline
049086 0D 0A 74 79 1035*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
04908F DD 7E 16    1036*       ld a,(ix+sprite_type)
049092 CD 00 86 04 1037*       call printHexA
049096             1038*   
049096 CD 00 01 04 1039*       call printInline
04909A 0D 0A 42 49 1040*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
0490A3 DD 27 17    1041*       ld hl,(ix+sprite_base_bufferId)
0490A6 CD 27 01 04 1042*       call printHex24
0490AA             1043*   
0490AA CD 00 01 04 1044*       call printInline
0490AE 0D 0A 6D 50 1045*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
0490B7 DD 27 1A    1046*       ld hl,(ix+sprite_move_program)
0490BA CD 27 01 04 1047*       call printHex24
0490BE             1048*   
0490BE CD 00 01 04 1049*       call printInline
0490C2 0D 0A 63 6F 1050*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
0490CB DD 7E 1D    1051*       ld a,(ix+sprite_collisions)
0490CE CD F5 02 04 1052*       call printBin8
0490D2             1053*   
0490D2             1054*       ; call printInline
0490D2             1055*       ; asciz "\r\nszx : "
0490D2             1056*       ; ld a,(ix+sprite_dim_x)
0490D2             1057*       ; call printHexA
0490D2             1058*   
0490D2             1059*       ; call printInline
0490D2             1060*       ; asciz "\r\nszy : "
0490D2             1061*       ; ld a,(ix+sprite_dim_y)
0490D2             1062*       ; call printHexA
0490D2             1063*   
0490D2             1064*       ; call printInline
0490D2             1065*       ; asciz "\r\n#ori: "
0490D2             1066*       ; ld a,(ix+sprite_num_orientations)
0490D2             1067*       ; call printHexA
0490D2             1068*   
0490D2             1069*       ; call printInline
0490D2             1070*       ; asciz "\r\n#ani: "
0490D2             1071*       ; ld a,(ix+sprite_num_animations)
0490D2             1072*       ; call printHexA
0490D2             1073*   
0490D2             1074*       ; call printInline
0490D2             1075*       ; asciz "\r\nani : "
0490D2             1076*       ; ld a,(ix+sprite_animation)
0490D2             1077*       ; call printHexA
0490D2             1078*   
0490D2             1079*       ; call printInline
0490D2             1080*       ; asciz "\r\nanit: "
0490D2             1081*       ; ld a,(ix+sprite_animation_timer)
0490D2             1082*       ; call printHexA
0490D2             1083*   
0490D2             1084*       ; call printInline
0490D2             1085*       ; asciz "\r\nmvt : "
0490D2             1086*       ; ld a,(ix+sprite_move_timer)
0490D2             1087*       ; call printHexA
0490D2             1088*   
0490D2             1089*       ; call printInline
0490D2             1090*       ; asciz "\r\nmvs : "
0490D2             1091*       ; ld a,(ix+sprite_move_step)
0490D2             1092*       ; call printHexA
0490D2             1093*   
0490D2             1094*       ; call printInline
0490D2             1095*       ; asciz "\r\npts : "
0490D2             1096*       ; ld a,(ix+sprite_points)
0490D2             1097*       ; call printHexA
0490D2             1098*   
0490D2             1099*       ; call printInline
0490D2             1100*       ; asciz "\r\ndmg : "
0490D2             1101*       ; ld a,(ix+sprite_shield_damage)
0490D2             1102*       ; call printHexA
0490D2             1103*   
0490D2             1104*       ; call printInline
0490D2             1105*       ; asciz "\r\nfrm : "
0490D2             1106*       ; ld a,(ix+sprite_frame)
0490D2             1107*       ; call printHexA
0490D2             1108*   
0490D2             1109*       ; call printNewLine
0490D2             1110*       ; call printNewLine
0490D2             1111*   
0490D2             1112*       ; call waitKeypress
0490D2 C9          1113*       ret
0490D3             0078    
0490D3 FF FF FF FF 0079        align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
049100             0080    
049100             0081    ; --- MAIN PROGRAM FILE ---
049100             0082    main:
049100             0083    ; start a new game
049100 21 C6 72 04 0084        ld hl,game_init
049104 22 00 72 04 0085        ld (game_state),hl
049108             0086    main_loop:
049108             0087    ; update the global timestamp
049108 CD F9 14 04 0088        call timestamp_tick
04910C             0089    ; do gamestate logic
04910C CD 03 72 04 0090        call do_game
049110             0091    ; wait for the next vblank mitigate flicker and for loop timing
049110 CD BF 16 04 0092        call vdu_vblank
049114             0093    ; poll keyboard for escape keypress
049114 3E 08       0094        ld a, $08 ; code to send to MOS
049116 5B CF       0095        rst.lil $08 ; get IX pointer to System Variables
049118 DD 7E 05    0096        ld a, (ix + $05) ; get ASCII code of key pressed
04911B FE 1B       0097        cp 27 ; check if 27 (ascii code for ESC)
04911D CA 25 91 04 0098        jp z, main_end ; if pressed, jump to exit
049121             0099    ; escape not pressed so loop
049121 C3 08 91 04 0100        jp main_loop
049125             0101    
049125             0102    main_end:
049125 CD 05 16 04 0103        call vdu_cursor_on
049129 C9          0104        ret
04912A             0105    ; end main
04912A             0106    
04912A             0107        include "tables.inc"
04912A             0001*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
04912A             0002*   table_base: equ $
04912A             0003*   player_weapons_begin: equ table_base
04912A             0004*   player_lasers_begin: equ player_weapons_begin
04912A             0005*   player_lasers_end: equ table_record_size*player_lasers_max+player_lasers_begin
04912A             0006*   player_weapons_end: equ table_record_size*player_lasers_max+player_weapons_begin
04912A             0007*   player_begin: equ player_weapons_end
04912A             0008*   player_end: equ table_record_size+player_begin
04912A             0009*   enemy_sprites_begin: equ player_end
04912A             0010*   seekers_base: equ enemy_sprites_begin
04912A             0011*   seekers_end: equ table_record_size*seekers_max+seekers_base
04912A             0012*   fireballs_base: equ seekers_end
04912A             0013*   fireballs_end: equ table_record_size*fireballs_max+fireballs_base
04912A             0014*   enemy_sprites_end: equ fireballs_end
04912A             0015*   explosions_base: equ enemy_sprites_end
04912A             0016*   explosions_end: equ table_record_size*explosions_max+explosions_base
04912A             0017*   table_end: equ explosions_end
04912A             0018*   
04912A             0019*   table_num_records: equ table_end-table_base/table_record_size
04912A             0020*   table_num_enemy_records: equ enemy_sprites_end-enemy_sprites_begin/table_record_size
04912A             0021*   
04912A             0022*   ; ### THIS IS THE SPACE ALLOCATED TO THE ACTIVE TILES TABLE ###
04912A             0023*   tile_table_base: equ table_end
04912A             0024*   tile_table_end: equ 256*tile_table_record_size+tile_table_base

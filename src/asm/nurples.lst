PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C CD 44 75 04 0015        call init
040050 CD 41 76 04 0016        call main
040054             0017    
040054             0018    exit:
040054 FD E1       0019        pop iy
040056 DD E1       0020        pop ix
040058 D1          0021        pop de
040059 C1          0022        pop bc
04005A F1          0023        pop af
04005B 21 00 00 00 0024        ld hl,0
04005F             0025    
04005F C9          0026        ret
040060             0027    
040060             0028    ; API INCLUDES
040060             0029        include "mos_api.inc"
040060             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*   ; Title:	AGON MOS - API for user projects
040060             0003*   ; Author:	Dean Belfield
040060             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*   ;			Added MOS error codes for return in HL
040060             0006*   ; Created:	03/08/2022
040060             0007*   ; Last Updated:	10/08/2023
040060             0008*   ;
040060             0009*   ; Modinfo:
040060             0010*   ; 05/08/2022:	Added mos_feof
040060             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*   ; 13/10/2022:	Added mos_oscli
040060             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*   ; 19/05/2023:	Added sysvar_scrMode
040060             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*   ; 03/08/2023:	Added mos_setkbvector
040060             0028*   ; 10/08/2023:	Added mos_getkbmap
040060             0029*   
040060             0030*   ; VDP control (VDU 23, 0, n)
040060             0031*   ;
040060             0032*   vdp_gp:				EQU 80h
040060             0033*   vdp_keycode:		EQU 81h
040060             0034*   vdp_cursor:			EQU	82h
040060             0035*   vdp_scrchar:		EQU	83h
040060             0036*   vdp_scrpixel:		EQU	84h
040060             0037*   vdp_audio:			EQU	85h
040060             0038*   vdp_mode:			EQU	86h
040060             0039*   vdp_rtc:			EQU	87h
040060             0040*   vdp_keystate:		EQU	88h
040060             0041*   vdp_logicalcoords:	EQU	C0h
040060             0042*   vdp_terminalmode:	EQU	FFh
040060             0043*   
040060             0044*   ; MOS high level functions
040060             0045*   ;
040060             0046*   mos_getkey:			EQU	00h
040060             0047*   mos_load:			EQU	01h
040060             0048*   mos_save:			EQU	02h
040060             0049*   mos_cd:				EQU	03h
040060             0050*   mos_dir:			EQU	04h
040060             0051*   mos_del:			EQU	05h
040060             0052*   mos_ren:			EQU	06h
040060             0053*   mos_mkdir:			EQU	07h
040060             0054*   mos_sysvars:		EQU	08h
040060             0055*   mos_editline:		EQU	09h
040060             0056*   mos_fopen:			EQU	0Ah
040060             0057*   mos_fclose:			EQU	0Bh
040060             0058*   mos_fgetc:			EQU	0Ch
040060             0059*   mos_fputc:			EQU	0Dh
040060             0060*   mos_feof:			EQU	0Eh
040060             0061*   mos_getError:		EQU	0Fh
040060             0062*   mos_oscli:			EQU	10h
040060             0063*   mos_copy:			EQU	11h
040060             0064*   mos_getrtc:			EQU	12h
040060             0065*   mos_setrtc:			EQU	13h
040060             0066*   mos_setintvector:	EQU	14h
040060             0067*   mos_uopen:			EQU	15h
040060             0068*   mos_uclose:			EQU	16h
040060             0069*   mos_ugetc:			EQU	17h
040060             0070*   mos_uputc:			EQU	18h
040060             0071*   mos_getfil:			EQU	19h
040060             0072*   mos_fread:			EQU	1Ah
040060             0073*   mos_fwrite:			EQU	1Bh
040060             0074*   mos_flseek:			EQU	1Ch
040060             0075*   mos_setkbvector:	EQU	1Dh
040060             0076*   mos_getkbmap:		EQU	1Eh
040060             0077*   
040060             0078*   ; MOS program exit codes
040060             0079*   ;
040060             0080*   EXIT_OK:				EQU  0;	"OK",
040060             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*   ; FatFS file access functions
040060             0103*   ;
040060             0104*   ffs_fopen:			EQU	80h
040060             0105*   ffs_fclose:			EQU	81h
040060             0106*   ffs_fread:			EQU	82h
040060             0107*   ffs_fwrite:			EQU	83h
040060             0108*   ffs_flseek:			EQU	84h
040060             0109*   ffs_ftruncate:		EQU	85h
040060             0110*   ffs_fsync:			EQU	86h
040060             0111*   ffs_fforward:		EQU	87h
040060             0112*   ffs_fexpand:		EQU	88h
040060             0113*   ffs_fgets:			EQU	89h
040060             0114*   ffs_fputc:			EQU	8Ah
040060             0115*   ffs_fputs:			EQU	8Bh
040060             0116*   ffs_fprintf:		EQU	8Ch
040060             0117*   ffs_ftell:			EQU	8Dh
040060             0118*   ffs_feof:			EQU	8Eh
040060             0119*   ffs_fsize:			EQU	8Fh
040060             0120*   ffs_ferror:			EQU	90h
040060             0121*   
040060             0122*   ; FatFS directory access functions
040060             0123*   ;
040060             0124*   ffs_dopen:			EQU	91h
040060             0125*   ffs_dclose:			EQU	92h
040060             0126*   ffs_dread:			EQU	93h
040060             0127*   ffs_dfindfirst:		EQU	94h
040060             0128*   ffs_dfindnext:		EQU	95h
040060             0129*   
040060             0130*   ; FatFS file and directory management functions
040060             0131*   ;
040060             0132*   ffs_stat:			EQU	96h
040060             0133*   ffs_unlink:			EQU	97h
040060             0134*   ffs_rename:			EQU	98h
040060             0135*   ffs_chmod:			EQU	99h
040060             0136*   ffs_utime:			EQU	9Ah
040060             0137*   ffs_mkdir:			EQU	9Bh
040060             0138*   ffs_chdir:			EQU	9Ch
040060             0139*   ffs_chdrive:		EQU	9Dh
040060             0140*   ffs_getcwd:			EQU	9Eh
040060             0141*   
040060             0142*   ; FatFS volume management and system configuration functions
040060             0143*   ;
040060             0144*   ffs_mount:			EQU	9Fh
040060             0145*   ffs_mkfs:			EQU	A0h
040060             0146*   ffs_fdisk:			EQU	A1h
040060             0147*   ffs_getfree:		EQU	A2h
040060             0148*   ffs_getlabel:		EQU	A3h
040060             0149*   ffs_setlabel:		EQU	A4h
040060             0150*   ffs_setcp:			EQU	A5h
040060             0151*   
040060             0152*   ; File access modes
040060             0153*   ;
040060             0154*   fa_read:			EQU	01h
040060             0155*   fa_write:			EQU	02h
040060             0156*   fa_open_existing:	EQU	00h
040060             0157*   fa_create_new:		EQU	04h
040060             0158*   fa_create_always:	EQU	08h
040060             0159*   fa_open_always:		EQU	10h
040060             0160*   fa_open_append:		EQU	30h
040060             0161*   
040060             0162*   ; System variable indexes for api_sysvars
040060             0163*   ; Index into _sysvars in globals.inc
040060             0164*   ;
040060             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*   
040060             0192*   ; Flags for the VPD protocol
040060             0193*   ;
040060             0194*   vdp_pflag_cursor:		EQU	00000001b
040060             0195*   vdp_pflag_scrchar:		EQU	00000010b
040060             0196*   vdp_pflag_point:		EQU	00000100b
040060             0197*   vdp_pflag_audio:		EQU	00001000b
040060             0198*   vdp_pflag_mode:			EQU	00010000b
040060             0199*   vdp_pflag_rtc:			EQU	00100000b
040060             0200*   
040060             0201*   ;
040060             0202*   ; FatFS structures
040060             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*   ;
040060             0205*   ; Object ID and allocation information (FFOBJID)
040060             0206*   ;
040060             0207*   ; Indexes into FFOBJID structure
040060             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*   ;
040060             0215*   ; File object structure (FIL)
040060             0216*   ;
040060             0217*   ; Indexes into FIL structure
040060             0218*   fil_obj:		EQU 0	; 15: Object identifier
040060             0219*   fil_flag:		EQU	15 	;  1: File status flags
040060             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*   ;
040060             0227*   ; Directory object structure (DIR)
040060             0228*   ; Indexes into DIR structure
040060             0229*   dir_obj:		EQU  0	; 15: Object identifier
040060             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*   dir_clust:		EQU	19	;  4: Current cluster
040060             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*   ;
040060             0237*   ; File information structure (FILINFO)
040060             0238*   ;
040060             0239*   ; Indexes into FILINFO structure
040060             0240*   filinfo_fsize:		EQU 0	;   4: File size
040060             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*   ;
040060             0247*   ; Macro for calling the API
040060             0248*   ; Parameters:
040060             0249*   ; - function: One of the function numbers listed above
040060             0250*   ;
040060             0251*   	MACRO	MOSCALL	function
040060             0252*   			LD	A, function
040060             0253*   			RST.LIL	08h
040060             0254*   	ENDMACRO
040060             0030        include "macros.inc"
040060             0001*   
040060             0002*   ; test the sign of HL
040060             0003*   ; inputs: HL obviously
040060             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040060             0005*   ; destroys: flags
040060             0006*       MACRO SIGN_HLU
040060             0007*       add hl,de ; 1 cycle
040060             0008*       or a ; clear flags ; 1 cycle
040060             0009*       sbc hl,de ; 2 cycles
040060             0010*       ; 4 cycles total
040060             0011*       ENDMACRO
040060             0012*   
040060             0013*   ; put the value in A into HLU
040060             0014*   ; affects: HLU
040060             0015*   ; destroys: nothing
040060             0016*   ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
040060             0017*       MACRO A_TO_HLU
040060             0018*       xor a ; 1 cycle
040060             0019*       ld ($+8+1),hl ; 7 cycles
040060             0020*       ld ($+4+3),a ; 5 cycles
040060             0021*       ld hl,0x000000 ; 4 cycles
040060             0022*       ; 17 cycles total
040060             0023*       ENDMACRO
040060             0024*   
040060             0025*   ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
040060             0026*   ; one cycle less but burns flags
040060             0027*       MACRO A_TO_HLU_ALT
040060             0028*       push hl ; 4 cycles
040060             0029*       ld hl,2 ; 4 cycles
040060             0030*       add hl,sp ; 1 cycle
040060             0031*       ld (hl),a ; 2 cycles
040060             0032*       pop hl ; 4 cycles
040060             0033*       ; 15 cycles total
040060             0034*       ENDMACRO
040060             0035*   
040060             0036*       MACRO hlu_mul256
040060             0037*       add hl,hl ; * 2
040060             0038*       add hl,hl ; * 4
040060             0039*       add hl,hl ; * 8
040060             0040*       add hl,hl ; * 16
040060             0041*       add hl,hl ; * 32
040060             0042*       add hl,hl ; * 64
040060             0043*       add hl,hl ; * 128
040060             0044*       add hl,hl ; * 256
040060             0045*       ENDMACRO
040060             0046*   
040060             0047*   ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
040060             0048*       MACRO SRL_UHL
040060             0049*       dec sp ; 1 cycle
040060             0050*       push hl ; 4 cycles
040060             0051*       inc sp ; 1 cycle
040060             0052*       pop hl ; 4 cycles
040060             0053*       inc hl ; 1 cycle
040060             0054*       dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040060             0055*       ; 13 cycles total
040060             0056*       ENDMACRO
040060             0057*   
040060             0058*       MACRO printChar char
040060             0059*       LD A, char
040060             0060*       RST.LIL 10h
040060             0061*       ENDMACRO
040060             0062*   
040060             0063*   ; Simulated call to subroutine at HL
040060             0064*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0065*   ; outputs: whatever the subroutine does, including HL and BC
040060             0066*   ; destroys: only what the subroutine does, but always BC
040060             0067*       MACRO CALL_HL
040060             0068*       ld bc,$+6 ; Address of first instruction after the jump
040060             0069*       push bc ; which constitutes the return address
040060             0070*       jp (hl) ; Jump to the address in HL
040060             0071*       ENDMACRO
040060             0072*   
040060             0073*   ; Simulated call to subroutine at IX
040060             0074*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0075*   ; outputs: whatever the subroutine does, including IX and BC
040060             0076*   ; destroys: only what the subroutine does, but always BC
040060             0077*       MACRO CALL_IX
040060             0078*       ld bc,$+6 ; Address of first instruction after the jump
040060             0079*       push bc ; which constitutes the return address
040060             0080*       jp (ix) ; Jump to the address in IX
040060             0081*       ENDMACRO
040060             0082*   
040060             0083*   ; Simulated call to soubroutinte at IY
040060             0084*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0085*   ; outputs: whatever the subroutine does, including IY and BC
040060             0086*   ; destroys: only what the subroutine does, but always BC
040060             0087*       MACRO CALL_IY
040060             0088*       ld bc,$+6 ; Address of first instruction after the jump
040060             0089*       push bc ; which constitutes the return address
040060             0090*       jp (iy) ; Jump to the address in IY
040060             0091*       ENDMACRO
040060             0092*   
040060             0093*   ; put the value in HLU into A
040060             0094*   ; destroys: af
040060             0095*       MACRO HLU_TO_A
040060             0096*       dec sp ; 1 cycle
040060             0097*       push hl ; 4 cycles
040060             0098*       inc sp ; 1 cycle
040060             0099*       pop af ; 4 cycles
040060             0100*       ; 10 cycles total
040060             0101*       ENDMACRO
040060             0102*   
040060             0103*       MACRO PUSH_ALL
040060             0104*       ex af,af'
040060             0105*       exx
040060             0106*       push af
040060             0107*       push hl
040060             0108*       push bc
040060             0109*       push de
040060             0110*   
040060             0111*       ex af,af'
040060             0112*       exx
040060             0113*       push af
040060             0114*       push hl
040060             0115*       push bc
040060             0116*       push de
040060             0117*       push ix
040060             0118*       push iy
040060             0119*       ENDMACRO
040060             0120*   
040060             0121*       MACRO POP_ALL
040060             0122*       pop iy
040060             0123*       pop ix
040060             0124*       pop de
040060             0125*       pop bc
040060             0126*       pop hl
040060             0127*       pop af
040060             0128*       ex af,af'
040060             0129*       exx
040060             0130*   
040060             0131*       pop de
040060             0132*       pop bc
040060             0133*       pop hl
040060             0134*       pop af
040060             0135*       ex af,af'
040060             0136*       exx
040060             0137*       ENDMACRO
040060             0031        include "functions.inc"
040060 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040100             0002*   
040100             0003*   ; Print a zero-terminated string inline with code, e.g.:
040100             0004*   ;
040100             0005*   ;    call printInline
040100             0006*   ;    ASCIZ "Hello, world!\r\n"
040100             0007*   ;
040100             0008*   ; Destroys: HL,AF
040100             0009*   printInline:
040100 E1          0010*       pop hl ; get the return address = pointer to start of string
040101 CD 07 01 04 0011*       call printString ; HL advances to end of string
040105 E5          0012*       push hl ; restore the return address = pointer to end of string
040106 C9          0013*       ret
040107             0014*   
040107             0015*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040107             0016*   ; Print a zero-terminated string
040107             0017*   ; HL: Pointer to string
040107             0018*   printString:
040107 C5          0019*       PUSH BC
040108 01 00 00 00 0020*       LD BC,0
04010C 3E 00       0021*       LD A,0
04010E 5B DF       0022*       RST.LIL 18h
040110 C1          0023*       POP BC
040111 C9          0024*       RET
040112             0025*   ; print a VDU sequence
040112             0026*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
040112             0027*   sendVDUsequence:
040112 C5          0028*       PUSH BC
040113 01 00 00 00 0029*       LD BC, 0
040117 4E          0030*       LD C, (HL)
040118 5B DF       0031*       RST.LIL 18h
04011A C1          0032*       POP BC
04011B C9          0033*       RET
04011C             0034*   ; Print Newline sequence to VDP
04011C             0035*   ; destroys bc
04011C             0036*   printNewLine:
04011C F5          0037*       push af ; for some reason rst.lil 10h sets carry flag
04011D 3E 0D       0038*       LD A, '\r'
04011F 5B D7       0039*       RST.LIL 10h
040121 3E 0A       0040*       LD A, '\n'
040123 5B D7       0041*       RST.LIL 10h
040125 F1          0042*       pop af
040126 C9          0043*       RET
040127             0044*   
040127             0045*   ; Print a 24-bit HEX number
040127             0046*   ; HLU: Number to print
040127             0047*   printHex24:
040127             0048*       HLU_TO_A
040127 3B          0001*M1     dec sp ; 1 cycle
040128 E5          0002*M1     push hl ; 4 cycles
040129 33          0003*M1     inc sp ; 1 cycle
04012A F1          0004*M1     pop af ; 4 cycles
04012B             0005*M1     ; 10 cycles total
04012B CD 35 01 04 0049*       CALL printHex8
04012F             0050*   ; Print a 16-bit HEX number
04012F             0051*   ; HL: Number to print
04012F             0052*   printHex16:
04012F 7C          0053*       LD A,H
040130 CD 35 01 04 0054*       CALL printHex8
040134 7D          0055*       LD A,L
040135             0056*   ; Print an 8-bit HEX number
040135             0057*   ; A: Number to print
040135             0058*   printHex8:
040135 4F          0059*       LD C,A
040136 1F          0060*       RRA
040137 1F          0061*       RRA
040138 1F          0062*       RRA
040139 1F          0063*       RRA
04013A CD 3F 01 04 0064*       CALL @F
04013E 79          0065*       LD A,C
04013F             0066*   @@:
04013F E6 0F       0067*       AND 0Fh
040141 C6 90       0068*       ADD A,90h
040143 27          0069*       DAA
040144 CE 40       0070*       ADC A,40h
040146 27          0071*       DAA
040147 5B D7       0072*       RST.LIL 10h
040149 C9          0073*       RET
04014A             0074*   
04014A             0075*   printHexA:
04014A F5          0076*       push af
04014B C5          0077*       push bc
04014C CD 35 01 04 0078*       call printHex8
040150 3E 20       0079*       ld a,' '
040152 5B D7       0080*       rst.lil 10h
040154 C1          0081*       pop bc
040155 F1          0082*       pop af
040156 C9          0083*       ret
040157             0084*   
040157             0085*   printHexHL:
040157 F5          0086*       push af
040158 C5          0087*       push bc
040159 CD 2F 01 04 0088*       call printHex16
04015D 3E 20       0089*       ld a,' '
04015F 5B D7       0090*       rst.lil 10h
040161 C1          0091*       pop bc
040162 F1          0092*       pop af
040163 C9          0093*       ret
040164             0094*   
040164             0095*   printHexUHL:
040164 F5          0096*       push af
040165 C5          0097*       push bc
040166 CD 27 01 04 0098*       call printHex24
04016A 3E 20       0099*       ld a,' '
04016C 5B D7       0100*       rst.lil 10h
04016E C1          0101*       pop bc
04016F F1          0102*       pop af
040170 C9          0103*       ret
040171             0104*   
040171             0105*   printHexAUHL:
040171 F5          0106*       push af
040172 C5          0107*       push bc
040173 CD 35 01 04 0108*       call printHex8
040177 3E 2E       0109*       ld a,'.'
040179 5B D7       0110*       rst.lil 10h
04017B CD 27 01 04 0111*       call printHex24
04017F 3E 20       0112*       ld a,' '
040181 5B D7       0113*       rst.lil 10h
040183 C1          0114*       pop bc
040184 F1          0115*       pop af
040185 C9          0116*       ret
040186             0117*   
040186             0118*   printHexABHL:
040186             0119*   ; preserve registers
040186 C5          0120*       push bc ; b will be ok c will not
040187 F5          0121*       push af ; will get totally destroyed
040188             0122*   ; print a
040188 CD 35 01 04 0123*       call printHex8
04018C             0124*   ; print b
04018C 78          0125*       ld a,b
04018D CD 35 01 04 0126*       call printHex8
040191             0127*   ; print hl
040191 CD 2F 01 04 0128*       call printHex16
040195             0129*   ; restore registers
040195 F1          0130*       pop af
040196 C1          0131*       pop bc
040197 C9          0132*       ret
040198             0133*   
040198             0134*   printHexBHL:
040198             0135*   ; preserve registers
040198 C5          0136*       push bc ; b will be ok c will not
040199 F5          0137*       push af ; will get totally destroyed
04019A             0138*   ; print b
04019A 78          0139*       ld a,b
04019B CD 35 01 04 0140*       call printHex8
04019F             0141*   ; print hl
04019F CD 2F 01 04 0142*       call printHex16
0401A3             0143*   ; restore registers
0401A3 F1          0144*       pop af
0401A4 C1          0145*       pop bc
0401A5 C9          0146*       ret
0401A6             0147*   
0401A6             0148*   printHexCDE:
0401A6             0149*   ; preserve registers
0401A6 C5          0150*       push bc ; b will be ok c will not
0401A7 F5          0151*       push af ; will get totally destroyed
0401A8             0152*   ; print c
0401A8 79          0153*       ld a,c
0401A9 CD 35 01 04 0154*       call printHex8
0401AD             0155*   ; print de
0401AD EB          0156*       ex de,hl
0401AE CD 2F 01 04 0157*       call printHex16
0401B2 EB          0158*       ex de,hl
0401B3             0159*   ; restore registers
0401B3 F1          0160*       pop af
0401B4 C1          0161*       pop bc
0401B5 C9          0162*       ret
0401B6             0163*   
0401B6             0164*   printHexUIX:
0401B6             0165*   ; store everything in scratch
0401B6 22 42 06 04 0166*       ld (uhl),hl
0401BA ED 43 45 06 0167*       ld (ubc),bc
       04          
0401BF ED 53 48 06 0168*       ld (ude),de
       04          
0401C4 DD 22 4B 06 0169*       ld (uix),ix
       04          
0401C9 FD 22 4E 06 0170*       ld (uiy),iy
       04          
0401CE F5          0171*       push af ; fml
0401CF             0172*   
0401CF 21 D9 05 04 0173*       ld hl,str_ixu
0401D3 CD 07 01 04 0174*       call printString
0401D7 2A 4B 06 04 0175*       ld hl,(uix)
0401DB CD 27 01 04 0176*       call printHex24
0401DF CD 1C 01 04 0177*       call printNewLine
0401E3             0178*   
0401E3             0179*   ; restore everything
0401E3 2A 42 06 04 0180*       ld hl, (uhl)
0401E7 ED 4B 45 06 0181*       ld bc, (ubc)
       04          
0401EC ED 5B 48 06 0182*       ld de, (ude)
       04          
0401F1 DD 2A 4B 06 0183*       ld ix, (uix)
       04          
0401F6 FD 2A 4E 06 0184*       ld iy, (uiy)
       04          
0401FB F1          0185*       pop af
0401FC             0186*   ; all done
0401FC C9          0187*       ret
0401FD             0188*   
0401FD             0189*   ; Print a 0x HEX prefix
0401FD             0190*   DisplayHexPrefix:
0401FD 3E 30       0191*       LD A, '0'
0401FF 5B D7       0192*       RST.LIL 10h
040201 3E 78       0193*       LD A, 'x'
040203 5B D7       0194*       RST.LIL 10h
040205 C9          0195*       RET
040206             0196*   
040206             0197*       MACRO printDecBC
040206             0198*       push hl
040206             0199*       push bc
040206             0200*       pop hl
040206             0201*       call printDec
040206             0202*       pop hl
040206             0203*       ENDMACRO
040206             0204*   
040206             0205*       MACRO printDecDE
040206             0206*       push hl
040206             0207*       push de
040206             0208*       pop hl
040206             0209*       call printDec
040206             0210*       pop hl
040206             0211*       ENDMACRO
040206             0212*   
040206             0213*       MACRO printDecHL
040206             0214*       call printDec
040206             0215*       ENDMACRO
040206             0216*   
040206             0217*       MACRO printDecIX
040206             0218*       push hl
040206             0219*       push ix
040206             0220*       pop hl
040206             0221*       call printDec
040206             0222*       pop hl
040206             0223*       ENDMACRO
040206             0224*   
040206             0225*       MACRO printDecIY
040206             0226*       push hl
040206             0227*       push iy
040206             0228*       pop hl
040206             0229*       call printDec
040206             0230*       pop hl
040206             0231*       ENDMACRO
040206             0232*   
040206             0233*   
040206             0234*   ; Prints the right justified decimal value in HL without leading zeroes
040206             0235*   ; HL : Value to print
040206             0236*   ; preserves all registers and flags
040206             0237*   printDec:
040206             0238*   ; BEGIN MY CODE
040206             0239*   ; back up all the things
040206 F5          0240*       push af
040207 C5          0241*       push bc
040208 D5          0242*       push de
040209 E5          0243*       push hl
04020A             0244*   ; END MY CODE
04020A 11 32 02 04 0245*       LD DE, _printDecBuffer
04020E CD 42 02 04 0246*       CALL u24_to_ascii
040212             0247*   ; BEGIN MY CODE
040212             0248*   ; replace leading zeroes with spaces
040212 21 32 02 04 0249*       LD HL, _printDecBuffer
040216 06 07       0250*       ld B, 7 ; if HL was 0, we want to keep the final zero
040218             0251*   @loop:
040218 7E          0252*       LD A, (HL)
040219 FE 30       0253*       CP '0'
04021B C2 25 02 04 0254*       JP NZ, @done
04021F 3E 20       0255*       LD A, ' '
040221 77          0256*       LD (HL), A
040222 23          0257*       INC HL
040223             0258*       ; CALL vdu_cursor_forward
040223 10 F3       0259*       DJNZ @loop
040225             0260*   @done:
040225             0261*   ; END MY CODE
040225 21 32 02 04 0262*       LD HL, _printDecBuffer
040229 CD 07 01 04 0263*       CALL printString
04022D             0264*   ; BEGIN MY CODE
04022D             0265*   ; restore all the things
04022D E1          0266*       pop hl
04022E D1          0267*       pop de
04022F C1          0268*       pop bc
040230 F1          0269*       pop af
040231             0270*   ; END MY CODE
040231 C9          0271*       RET
040232 00 00 00 00 0272*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040242             0273*   
040242             0274*   ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
040242             0275*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040242             0276*   ; so it will allways be 8 characters length
040242             0277*   ; HL : Value to convert to string
040242             0278*   ; DE : pointer to buffer, at least 8 byte + 0
040242             0279*   u24_to_ascii:
040242 01 80 69 67 0280*       LD BC,-10000000
040246 CD 79 02 04 0281*       CALL @one_digit
04024A 01 C0 BD F0 0282*       LD BC,-1000000
04024E CD 79 02 04 0283*       CALL @one_digit
040252 01 60 79 FE 0284*       LD BC,-100000
040256 CD 79 02 04 0285*       CALL @one_digit
04025A 01 F0 D8 FF 0286*       LD BC,-10000
04025E CD 79 02 04 0287*       CALL @one_digit
040262 01 18 FC FF 0288*       LD BC,-1000
040266 CD 79 02 04 0289*       CALL @one_digit
04026A 01 9C FF FF 0290*       LD BC,-100
04026E CD 79 02 04 0291*       CALL @one_digit
040272 0E F6       0292*       LD C,-10
040274 CD 79 02 04 0293*       CALL @one_digit
040278 48          0294*       LD C,B
040279             0295*   @one_digit:
040279 3E 2F       0296*       LD A,'0'-1
04027B             0297*   @divide_me:
04027B 3C          0298*       INC A
04027C 09          0299*       ADD HL,BC
04027D 38 FC       0300*       JR C,@divide_me
04027F ED 42       0301*       SBC HL,BC
040281 12          0302*       LD (DE),A
040282 13          0303*       INC DE
040283 C9          0304*       RET
040284             0305*   
040284             0306*   print_u24:
040284 D5          0307*       push de
040285 E5          0308*       push hl
040286 11 32 02 04 0309*       ld de,_printDecBuffer
04028A CD 42 02 04 0310*       call u24_to_ascii
04028E 21 32 02 04 0311*       ld hl,_printDecBuffer
040292 CD 07 01 04 0312*       call printString
040296 3E 20       0313*       ld a,' '
040298 5B D7       0314*       rst.lil 10h
04029A E1          0315*       pop hl
04029B D1          0316*       pop de
04029C C9          0317*       ret
04029D             0318*   
04029D             0319*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04029D             0320*   ; HL : Value to convert to string (integer part in H, fractional part in L)
04029D             0321*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04029D             0322*   u168_to_ascii:
04029D             0323*   ; add a leading space to make room for sign flag if needed
04029D 3E 20       0324*       ld a,' '
04029F 12          0325*       ld (de),a
0402A0 13          0326*       inc de
0402A1             0327*   ; Convert integer part
0402A1 E5          0328*       push hl ; Save HL (we’ll need the fractional part later)
0402A2             0329*       ; call hlu_udiv256 ; Shift to get integer portion in HL
0402A2             0330*       SRL_UHL ; Shift to get integer portion in HL
0402A2 3B          0001*M1     dec sp ; 1 cycle
0402A3 E5          0002*M1     push hl ; 4 cycles
0402A4 33          0003*M1     inc sp ; 1 cycle
0402A5 E1          0004*M1     pop hl ; 4 cycles
0402A6 23          0005*M1     inc hl ; 1 cycle
0402A7 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
0402A9             0007*M1     ; 13 cycles total
0402A9 01 F0 D8 FF 0331*       ld bc, -10000
0402AD CD D0 02 04 0332*       call @one_int
0402B1 01 18 FC FF 0333*       ld bc, -1000
0402B5 CD D0 02 04 0334*       call @one_int
0402B9 01 9C FF FF 0335*       ld bc, -100
0402BD CD D0 02 04 0336*       call @one_int
0402C1 0E F6       0337*       ld c, -10
0402C3 CD D0 02 04 0338*       call @one_int
0402C7 48          0339*       ld c, b
0402C8 CD D0 02 04 0340*       call @one_int
0402CC C3 DB 02 04 0341*       jp @frac ; Jump to fractional part conversion
0402D0             0342*   @one_int:
0402D0 3E 2F       0343*       ld a, '0' - 1 ; Start ASCII character at '0'
0402D2             0344*   @divide_me:
0402D2 3C          0345*       inc a
0402D3 09          0346*       add hl, bc ; Accumulate until overflow
0402D4 38 FC       0347*       jr c, @divide_me
0402D6 ED 42       0348*       sbc hl, bc ; Remove excess after overflow
0402D8 12          0349*       ld (de), a ; Store ASCII digit
0402D9 13          0350*       inc de
0402DA C9          0351*       ret
0402DB             0352*   ; Convert fractional part
0402DB             0353*   @frac:
0402DB 3E 2E       0354*       ld a, '.' ; Decimal point
0402DD 12          0355*       ld (de), a
0402DE 13          0356*       inc de
0402DF E1          0357*       pop hl ; Restore HL with original fraction
0402E0 06 03       0358*       ld b, 3 ; Loop counter for 3 fractional digits
0402E2             0359*   @frac_loop:
0402E2 26 0A       0360*       ld h, 10 ; Load multiplier for fractional part
0402E4 ED 6C       0361*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0402E6 3E 30       0362*       ld a, '0'
0402E8 84          0363*       add a, h ; Convert integer part to ASCII
0402E9 12          0364*       ld (de), a
0402EA 13          0365*       inc de
0402EB 10 F5       0366*       djnz @frac_loop ; Repeat for each fractional digit
0402ED             0367*   ; Add null terminator
0402ED AF          0368*       xor a ; Null terminator
0402EE 12          0369*       ld (de), a
0402EF C9          0370*       ret
0402F0             0371*   
0402F0             0372*   print_u168:
0402F0 D5          0373*       push de
0402F1 E5          0374*       push hl
0402F2 11 32 02 04 0375*       ld de,_printDecBuffer
0402F6 CD 9D 02 04 0376*       call u168_to_ascii
0402FA 21 32 02 04 0377*       ld hl,_printDecBuffer
0402FE CD 07 01 04 0378*       call printString
040302 E1          0379*       pop hl
040303 D1          0380*       pop de
040304 C9          0381*       ret
040305             0382*   
040305             0383*   ; signed version of u168_to_ascii
040305             0384*   s168_to_ascii:
040305 D5          0385*       push de ; save starting address of buffer
040306 CD 06 09 04 0386*       call hlu_abs
04030A F5          0387*       push af ; save sign flag
04030B CD 9D 02 04 0388*       call u168_to_ascii
04030F F1          0389*       pop af ; restore sign flag
040310 D1          0390*       pop de ; restore starting address of buffer
040311 F0          0391*       ret p ; hlu was positive so nothing to do
040312 3E 2D       0392*       ld a,'-'
040314 12          0393*       ld (de),a
040315 C9          0394*       ret
040316             0395*   
040316             0396*   print_s168:
040316 D5          0397*       push de
040317 E5          0398*       push hl
040318 11 32 02 04 0399*       ld de,_printDecBuffer
04031C CD 05 03 04 0400*       call s168_to_ascii
040320 21 32 02 04 0401*       ld hl,_printDecBuffer
040324 CD 07 01 04 0402*       call printString
040328 E1          0403*       pop hl
040329 D1          0404*       pop de
04032A C9          0405*       ret
04032B             0406*   
04032B             0407*   print_s168_hl:
04032B F5          0408*       push af
04032C E5          0409*       push hl
04032D CD 16 03 04 0410*       call print_s168
040331 3E 20       0411*       ld a,' '
040333 5B D7       0412*       rst.lil 10h
040335 E1          0413*       pop hl
040336 F1          0414*       pop af
040337 C9          0415*       ret
040338             0416*   
040338             0417*   print_s168_bc:
040338 F5          0418*       push af
040339 C5          0419*       push bc
04033A E5          0420*       push hl
04033B C5          0421*       push bc
04033C E1          0422*       pop hl
04033D CD 16 03 04 0423*       call print_s168
040341 3E 20       0424*       ld a,' '
040343 5B D7       0425*       rst.lil 10h
040345 E1          0426*       pop hl
040346 C1          0427*       pop bc
040347 F1          0428*       pop af
040348 C9          0429*       ret
040349             0430*   
040349             0431*   print_s168_de:
040349 F5          0432*       push af
04034A D5          0433*       push de
04034B E5          0434*       push hl
04034C EB          0435*       ex de,hl
04034D CD 16 03 04 0436*       call print_s168
040351 3E 20       0437*       ld a,' '
040353 5B D7       0438*       rst.lil 10h
040355 E1          0439*       pop hl
040356 D1          0440*       pop de
040357 F1          0441*       pop af
040358 C9          0442*       ret
040359             0443*   
040359             0444*   print_s168_hl_bc_de:
040359 F5          0445*       push af
04035A C5          0446*       push bc
04035B D5          0447*       push de
04035C E5          0448*       push hl
04035D CD 16 03 04 0449*       call print_s168
040361 3E 20       0450*       ld a,' '
040363 5B D7       0451*       rst.lil 10h
040365 C5          0452*       push bc
040366 E1          0453*       pop hl
040367 CD 16 03 04 0454*       call print_s168
04036B 3E 20       0455*       ld a,' '
04036D 5B D7       0456*       rst.lil 10h
04036F EB          0457*       ex de,hl
040370 CD 16 03 04 0458*       call print_s168
040374 3E 20       0459*       ld a,' '
040376 5B D7       0460*       rst.lil 10h
040378 E1          0461*       pop hl
040379 D1          0462*       pop de
04037A C1          0463*       pop bc
04037B F1          0464*       pop af
04037C C9          0465*       ret
04037D             0466*   
04037D             0467*   print_s168_bc_de:
04037D F5          0468*       push af
04037E C5          0469*       push bc
04037F D5          0470*       push de
040380 C5          0471*       push bc
040381 E1          0472*       pop hl
040382 CD 16 03 04 0473*       call print_s168
040386 3E 20       0474*       ld a,' '
040388 5B D7       0475*       rst.lil 10h
04038A EB          0476*       ex de,hl
04038B CD 16 03 04 0477*       call print_s168
04038F 3E 20       0478*       ld a,' '
040391 5B D7       0479*       rst.lil 10h
040393 E1          0480*       pop hl
040394 D1          0481*       pop de
040395 C1          0482*       pop bc
040396 F1          0483*       pop af
040397 C9          0484*       ret
040398             0485*   
040398             0486*   print_s168_a:
040398 F5          0487*       push af
040399 C5          0488*       push bc
04039A E5          0489*       push hl
04039B 21 00 00 00 0490*       ld hl,0
04039F 6F          0491*       ld l,a
0403A0 CD 2B 03 04 0492*       call print_s168_hl
0403A4 E1          0493*       pop hl
0403A5 C1          0494*       pop bc
0403A6 F1          0495*       pop af
0403A7 C9          0496*       ret
0403A8             0497*   
0403A8             0498*   ; #### new functions added by Brandon R. Gates ####
0403A8             0499*   
0403A8             0500*   ; print the binary representation of the 8-bit value in a
0403A8             0501*   ; destroys a, hl, bc
0403A8             0502*   printBin8:
0403A8 06 08       0503*       ld b,8 ; loop counter for 8 bits
0403AA 21 C5 03 04 0504*       ld hl,@cmd ; set hl to the low byte of the output string
0403AE             0505*       ; (which will be the high bit of the value in a)
0403AE             0506*   @loop:
0403AE 07          0507*       rlca ; put the next highest bit into carry
0403AF 38 04       0508*       jr c,@one
0403B1 36 30       0509*       ld (hl),'0'
0403B3 18 02       0510*       jr @next_bit
0403B5             0511*   @one:
0403B5 36 31       0512*       ld (hl),'1'
0403B7             0513*   @next_bit:
0403B7 23          0514*       inc hl
0403B8 10 F4       0515*       djnz @loop
0403BA             0516*   ; print it
0403BA 21 C5 03 04 0517*       ld hl,@cmd
0403BE 01 08 00 00 0518*       ld bc,@end-@cmd
0403C2 5B DF       0519*       rst.lil $18
0403C4 C9          0520*       ret
0403C5             0521*   @cmd: ds 8 ; eight bytes for eight bits
0403CD             0522*   @end:
0403CD             0523*   
0403CD             0524*   ; print the binary representation of the 8-bit value in a
0403CD             0525*   ; in reverse order (lsb first)
0403CD             0526*   ; destroys a, hl, bc
0403CD             0527*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
0403CD 06 08       0528*       ld b,8 ; loop counter for 8 bits
0403CF 21 EA 03 04 0529*       ld hl,@cmd ; set hl to the low byte of the output string
0403D3             0530*       ; (which will be the high bit of the value in a)
0403D3             0531*   @loop:
0403D3 0F          0532*       rrca ; put the next lowest bit into carry
0403D4 38 04       0533*       jr c,@one
0403D6 36 30       0534*       ld (hl),'0'
0403D8 18 02       0535*       jr @next_bit
0403DA             0536*   @one:
0403DA 36 31       0537*       ld (hl),'1'
0403DC             0538*   @next_bit:
0403DC 23          0539*       inc hl
0403DD 10 F4       0540*       djnz @loop
0403DF             0541*   ; print it
0403DF 21 EA 03 04 0542*       ld hl,@cmd
0403E3 01 08 00 00 0543*       ld bc,@end-@cmd
0403E7 5B DF       0544*       rst.lil $18
0403E9 C9          0545*       ret
0403EA             0546*   @cmd: ds 8 ; eight bytes for eight bits
0403F2             0547*   @end:
0403F2             0548*   
0403F2             0549*   ; print registers to screen in hexidecimal format
0403F2             0550*   ; inputs: none
0403F2             0551*   ; outputs: values of every register printed to screen
0403F2             0552*   ;    values of each register in global scratch memory
0403F2             0553*   ; destroys: nothing
0403F2             0554*   stepRegistersHex:
0403F2             0555*   ; store everything in scratch
       FF FF FF FF 
       FF FF FF FF 
0403F2 22 42 06 04 0556*       ld (uhl),hl
0403F6 ED 43 45 06 0557*       ld (ubc),bc
       04          
0403FB ED 53 48 06 0558*       ld (ude),de
       04          
040400 DD 22 4B 06 0559*       ld (uix),ix
       04          
040405 FD 22 4E 06 0560*       ld (uiy),iy
       04          
04040A F5          0561*       push af ; fml
04040B E1          0562*       pop hl ; thanks, zilog
04040C 22 3F 06 04 0563*       ld (uaf),hl
040410 F5          0564*       push af ; dammit
040411             0565*   
040411             0566*   ; home the cursor
040411             0567*       ; call vdu_home_cursor
040411             0568*   
040411             0569*   ; print each register
040411 21 C5 05 04 0570*       ld hl,str_afu
040415 CD 07 01 04 0571*       call printString
040419 2A 3F 06 04 0572*       ld hl,(uaf)
04041D CD 27 01 04 0573*       call printHex24
040421 CD 1C 01 04 0574*       call printNewLine
040425             0575*   
040425 21 CA 05 04 0576*       ld hl,str_hlu
040429 CD 07 01 04 0577*       call printString
04042D 2A 42 06 04 0578*       ld hl,(uhl)
040431 CD 27 01 04 0579*       call printHex24
040435 CD 1C 01 04 0580*       call printNewLine
040439             0581*   
040439 21 CF 05 04 0582*       ld hl,str_bcu
04043D CD 07 01 04 0583*       call printString
040441 2A 45 06 04 0584*       ld hl,(ubc)
040445 CD 27 01 04 0585*       call printHex24
040449 CD 1C 01 04 0586*       call printNewLine
04044D             0587*   
04044D 21 D4 05 04 0588*       ld hl,str_deu
040451 CD 07 01 04 0589*       call printString
040455 2A 48 06 04 0590*       ld hl,(ude)
040459 CD 27 01 04 0591*       call printHex24
04045D CD 1C 01 04 0592*       call printNewLine
040461             0593*   
040461 21 D9 05 04 0594*       ld hl,str_ixu
040465 CD 07 01 04 0595*       call printString
040469 2A 4B 06 04 0596*       ld hl,(uix)
04046D CD 27 01 04 0597*       call printHex24
040471 CD 1C 01 04 0598*       call printNewLine
040475             0599*   
040475 21 DE 05 04 0600*       ld hl,str_iyu
040479 CD 07 01 04 0601*       call printString
04047D 2A 4E 06 04 0602*       ld hl,(uiy)
040481 CD 27 01 04 0603*       call printHex24
040485 CD 1C 01 04 0604*       call printNewLine
040489             0605*   
040489             0606*       ; call vsync
040489             0607*   
040489 CD 1C 01 04 0608*       call printNewLine
04048D             0609*   
04048D             0610*   ; check for right shift key and quit if pressed
04048D             0611*       MOSCALL mos_getkbmap
04048D 3E 1E       0001*M1 			LD	A, function
04048F 5B CF       0002*M1 			RST.LIL	08h
040491             0612*   @stayhere:
040491             0613*   ; 7 RightShift
040491 DD CB 00 76 0614*       bit 6,(ix+0)
040495 20 02       0615*       jr nz,@RightShift
040497 18 F8       0616*       jr @stayhere
040499             0617*   @RightShift:
040499 DD CB 0E 86 0618*       res 0,(ix+14) ; debounce the key (hopefully)
04049D 3E 80       0619*       ld a,%10000000
04049F             0620*       ; call multiPurposeDelay
04049F             0621*   
04049F             0622*   ; restore everything
04049F 2A 42 06 04 0623*       ld hl, (uhl)
0404A3 ED 4B 45 06 0624*       ld bc, (ubc)
       04          
0404A8 ED 5B 48 06 0625*       ld de, (ude)
       04          
0404AD DD 2A 4B 06 0626*       ld ix, (uix)
       04          
0404B2 FD 2A 4E 06 0627*       ld iy, (uiy)
       04          
0404B7 F1          0628*       pop af
0404B8             0629*   ; all done
0404B8 C9          0630*       ret
0404B9             0631*   
0404B9             0632*   ; print registers to screen in hexidecimal format
0404B9             0633*   ; inputs: none
0404B9             0634*   ; outputs: values of every register printed to screen
0404B9             0635*   ;    values of each register in global scratch memory
0404B9             0636*   ; destroys: nothing
0404B9             0637*   dumpRegistersHex:
0404B9             0638*   ; store everything in scratch
0404B9 22 42 06 04 0639*       ld (uhl),hl
0404BD ED 43 45 06 0640*       ld (ubc),bc
       04          
0404C2 ED 53 48 06 0641*       ld (ude),de
       04          
0404C7 DD 22 4B 06 0642*       ld (uix),ix
       04          
0404CC FD 22 4E 06 0643*       ld (uiy),iy
       04          
0404D1 F5          0644*       push af ; fml
0404D2 E1          0645*       pop hl ; thanks, zilog
0404D3 22 3F 06 04 0646*       ld (uaf),hl
0404D7 F5          0647*       push af ; dammit
0404D8             0648*   
0404D8             0649*   ; home the cursor
0404D8             0650*       ; call vdu_home_cursor
0404D8             0651*       ; call printNewLine
0404D8             0652*   
0404D8             0653*   ; print each register
0404D8 21 C5 05 04 0654*       ld hl,str_afu
0404DC CD 07 01 04 0655*       call printString
0404E0 2A 3F 06 04 0656*       ld hl,(uaf)
0404E4 CD 27 01 04 0657*       call printHex24
0404E8 CD 1C 01 04 0658*       call printNewLine
0404EC             0659*   
0404EC 21 CA 05 04 0660*       ld hl,str_hlu
0404F0 CD 07 01 04 0661*       call printString
0404F4 2A 42 06 04 0662*       ld hl,(uhl)
0404F8 CD 27 01 04 0663*       call printHex24
0404FC CD 1C 01 04 0664*       call printNewLine
040500             0665*   
040500 21 CF 05 04 0666*       ld hl,str_bcu
040504 CD 07 01 04 0667*       call printString
040508 2A 45 06 04 0668*       ld hl,(ubc)
04050C CD 27 01 04 0669*       call printHex24
040510 CD 1C 01 04 0670*       call printNewLine
040514             0671*   
040514 21 D4 05 04 0672*       ld hl,str_deu
040518 CD 07 01 04 0673*       call printString
04051C 2A 48 06 04 0674*       ld hl,(ude)
040520 CD 27 01 04 0675*       call printHex24
040524 CD 1C 01 04 0676*       call printNewLine
040528             0677*   
040528 21 D9 05 04 0678*       ld hl,str_ixu
04052C CD 07 01 04 0679*       call printString
040530 2A 4B 06 04 0680*       ld hl,(uix)
040534 CD 27 01 04 0681*       call printHex24
040538 CD 1C 01 04 0682*       call printNewLine
04053C             0683*   
04053C 21 DE 05 04 0684*       ld hl,str_iyu
040540 CD 07 01 04 0685*       call printString
040544 2A 4E 06 04 0686*       ld hl,(uiy)
040548 CD 27 01 04 0687*       call printHex24
04054C             0688*       ; call printNewLine
04054C             0689*   
04054C             0690*       ; call vdu_vblank
04054C             0691*   
04054C             0692*       ; call printNewLine
04054C             0693*   ; restore everything
04054C 2A 42 06 04 0694*       ld hl, (uhl)
040550 ED 4B 45 06 0695*       ld bc, (ubc)
       04          
040555 ED 5B 48 06 0696*       ld de, (ude)
       04          
04055A DD 2A 4B 06 0697*       ld ix, (uix)
       04          
04055F FD 2A 4E 06 0698*       ld iy, (uiy)
       04          
040564 F1          0699*       pop af
040565             0700*   ; all done
040565 C9          0701*       ret
040566             0702*   
040566             0703*   dumpRegistersHexPrime:
040566 D9          0704*       exx
040567 08          0705*       ex af,af'
040568 CD B9 04 04 0706*       call dumpRegistersHex
04056C 08          0707*       ex af,af'
04056D D9          0708*       exx
04056E C9          0709*       ret
04056F             0710*   
04056F             0711*   ; additionally dump prime registers
04056F             0712*   ; inputs: none
04056F             0713*   ; outputs: values of every register printed to screen
04056F             0714*   ; destroys: nothing
04056F             0715*   dumpRegistersHexAll:
04056F CD B9 04 04 0716*       call dumpRegistersHex
040573 08          0717*       ex af,af'
040574 D9          0718*       exx
040575 CD B9 04 04 0719*       call dumpRegistersHex
040579 08          0720*       ex af,af'
04057A D9          0721*       exx
04057B C9          0722*       ret
04057C             0723*   
04057C             0724*   ; print hlu to screen in hexidecimal format
04057C             0725*   ; inputs: none
04057C             0726*   ; destroys: nothing
04057C             0727*   print_hex_hl:
04057C F5          0728*       push af
04057D E5          0729*       push hl
04057E 21 CA 05 04 0730*       ld hl,str_hlu
040582 CD 07 01 04 0731*       call printString
040586 E1          0732*       pop hl
040587 E5          0733*       push hl
040588 CD 27 01 04 0734*       call printHex24
04058C 3E 20       0735*       ld a,' '
04058E 5B D7       0736*       rst.lil 10h
040590 E1          0737*       pop hl
040591 F1          0738*       pop af
040592 C9          0739*       ret
040593             0740*   
040593             0741*   ; print bcu to screen in hexidecimal format
040593             0742*   ; inputs: none
040593             0743*   ; destroys: nothing
040593             0744*   print_hex_bc:
040593 F5          0745*       push af
040594 E5          0746*       push hl
040595 C5          0747*       push bc
040596 21 CF 05 04 0748*       ld hl,str_bcu
04059A CD 07 01 04 0749*       call printString
04059E E1          0750*       pop hl
04059F E5          0751*       push hl
0405A0 CD 27 01 04 0752*       call printHex24
0405A4 3E 20       0753*       ld a,' '
0405A6 5B D7       0754*       rst.lil 10h
0405A8 C1          0755*       pop bc
0405A9 E1          0756*       pop hl
0405AA F1          0757*       pop af
0405AB C9          0758*       ret
0405AC             0759*   
0405AC             0760*   ; print deu to screen in hexidecimal format
0405AC             0761*   ; inputs: none
0405AC             0762*   ; destroys: nothing
0405AC             0763*   print_hex_de:
0405AC F5          0764*       push af
0405AD E5          0765*       push hl
0405AE D5          0766*       push de
0405AF 21 D4 05 04 0767*       ld hl,str_deu
0405B3 CD 07 01 04 0768*       call printString
0405B7 E1          0769*       pop hl
0405B8 E5          0770*       push hl
0405B9 CD 27 01 04 0771*       call printHex24
0405BD 3E 20       0772*       ld a,' '
0405BF 5B D7       0773*       rst.lil 10h
0405C1 D1          0774*       pop de
0405C2 E1          0775*       pop hl
0405C3 F1          0776*       pop af
0405C4 C9          0777*       ret
0405C5             0778*   
0405C5 20 61 66 3D 0779*   str_afu: db " af=",0
       00          
0405CA 20 68 6C 3D 0780*   str_hlu: db " hl=",0
       00          
0405CF 20 62 63 3D 0781*   str_bcu: db " bc=",0
       00          
0405D4 20 64 65 3D 0782*   str_deu: db " de=",0
       00          
0405D9 20 69 78 3D 0783*   str_ixu: db " ix=",0
       00          
0405DE 20 69 79 3D 0784*   str_iyu: db " iy=",0
       00          
0405E3             0785*   
0405E3             0786*   ; print udeuhl to screen in hexidecimal format
0405E3             0787*   ; inputs: none
0405E3             0788*   ; outputs: concatenated hexidecimal udeuhl
0405E3             0789*   ; destroys: nothing
0405E3             0790*   dumpUDEUHLHex:
0405E3             0791*   ; store everything in scratch
0405E3 22 42 06 04 0792*       ld (uhl),hl
0405E7 ED 43 45 06 0793*       ld (ubc),bc
       04          
0405EC ED 53 48 06 0794*       ld (ude),de
       04          
0405F1 DD 22 4B 06 0795*       ld (uix),ix
       04          
0405F6 FD 22 4E 06 0796*       ld (uiy),iy
       04          
0405FB F5          0797*       push af
0405FC             0798*   
0405FC             0799*   ; print each register
0405FC             0800*   
0405FC 21 36 06 04 0801*       ld hl,str_udeuhl
040600 CD 07 01 04 0802*       call printString
040604 2A 48 06 04 0803*       ld hl,(ude)
040608 CD 27 01 04 0804*       call printHex24
04060C 3E 2E       0805*       ld a,'.' ; print a dot to separate the values
04060E 5B D7       0806*       rst.lil 10h
040610 2A 42 06 04 0807*       ld hl,(uhl)
040614 CD 27 01 04 0808*       call printHex24
040618 CD 1C 01 04 0809*       call printNewLine
04061C             0810*   
04061C             0811*   ; restore everything
04061C 2A 42 06 04 0812*       ld hl, (uhl)
040620 ED 4B 45 06 0813*       ld bc, (ubc)
       04          
040625 ED 5B 48 06 0814*       ld de, (ude)
       04          
04062A DD 2A 4B 06 0815*       ld ix, (uix)
       04          
04062F FD 2A 4E 06 0816*       ld iy, (uiy)
       04          
040634 F1          0817*       pop af
040635             0818*   ; all done
040635 C9          0819*       ret
040636             0820*   
040636 75 64 65 2E 0821*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04063F             0822*   
04063F             0823*   ; global scratch memory for registers
04063F 00 00 00    0824*   uaf: dl 0
040642 00 00 00    0825*   uhl: dl 0
040645 00 00 00    0826*   ubc: dl 0
040648 00 00 00    0827*   ude: dl 0
04064B 00 00 00    0828*   uix: dl 0
04064E 00 00 00    0829*   uiy: dl 0
040651 00 00 00    0830*   usp: dl 0
040654 00 00 00    0831*   upc: dl 0
040657             0832*   
040657             0833*   ; inputs: whatever is in the flags register
040657             0834*   ; outputs: binary representation of flags
040657             0835*   ;          with a header so we know which is what
040657             0836*   ; destroys: nothing
040657             0837*   ; preserves: everything
040657             0838*   dumpFlags:
040657             0839*   ; first we curse zilog for not giving direct access to flags
040657 F5          0840*       push af ; this is so we can send it back unharmed
040658 F5          0841*       push af ; this is so we can pop it to hl
040659             0842*   ; store everything in scratch
040659 22 42 06 04 0843*       ld (uhl),hl
04065D ED 43 45 06 0844*       ld (ubc),bc
       04          
040662 ED 53 48 06 0845*       ld (ude),de
       04          
040667 DD 22 4B 06 0846*       ld (uix),ix
       04          
04066C FD 22 4E 06 0847*       ld (uiy),iy
       04          
040671             0848*   ; next we print the header
040671 21 9D 06 04 0849*       ld hl,@header
040675 CD 07 01 04 0850*       call printString
040679 E1          0851*       pop hl ; flags are now in l
04067A 7D          0852*       ld a,l ; flags are now in a
04067B CD A8 03 04 0853*       call printBin8
04067F CD 1C 01 04 0854*       call printNewLine
040683             0855*   ; restore everything
040683 2A 42 06 04 0856*       ld hl, (uhl)
040687 ED 4B 45 06 0857*       ld bc, (ubc)
       04          
04068C ED 5B 48 06 0858*       ld de, (ude)
       04          
040691 DD 2A 4B 06 0859*       ld ix, (uix)
       04          
040696 FD 2A 4E 06 0860*       ld iy, (uiy)
       04          
04069B F1          0861*       pop af ; send her home the way she came
04069C C9          0862*       ret
04069D             0863*   ; Bit 7 (S): Sign flag
04069D             0864*   ; Bit 6 (Z): Zero flag
04069D             0865*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04069D             0866*   ; Bit 4 (H): Half Carry flag
04069D             0867*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04069D             0868*   ; Bit 2 (PV): Parity/Overflow flag
04069D             0869*   ; Bit 1 (N): Subtract flag
04069D             0870*   ; Bit 0 (C): Carry flag
04069D 53 5A 78 48 0871*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0406A8             0872*   
0406A8             0873*   ; set all the bits in the flag register
0406A8             0874*   ; more of an academic exercise than anything useful
0406A8             0875*   ; inputs; none
0406A8             0876*   ; outputs; a=0,f=255
0406A8             0877*   ; destroys: flags, hl
0406A8             0878*   ; preserves: a, because why not
0406A8             0879*   setAllFlags:
0406A8 21 FF 00 00 0880*       ld hl,255
0406AC 67          0881*       ld h,a ; four cycles to preserve a is cheap
0406AD E5          0882*       push hl
0406AE F1          0883*       pop af
0406AF C9          0884*       ret
0406B0             0885*   
0406B0             0886*   ; reset all the bits in the flag register
0406B0             0887*   ; unlike its inverse counterpart, this may actually be useful
0406B0             0888*   ; inputs; none
0406B0             0889*   ; outputs; a=0,f=0
0406B0             0890*   ; destroys: flags, hl
0406B0             0891*   ; preserves: a, because why not
0406B0             0892*   resetAllFlags:
0406B0 21 00 00 00 0893*       ld hl,0
0406B4 67          0894*       ld h,a ; four cycles to preserve a is cheap
0406B5 E5          0895*       push hl
0406B6 F1          0896*       pop af
0406B7 C9          0897*       ret
0406B8             0898*   
0406B8             0899*   ; wait until user presses a key
0406B8             0900*   ; inputs: none
0406B8             0901*   ; outputs: ascii code of key pressed in a
0406B8             0902*   ; destroys: af,ix
0406B8             0903*   waitKeypress:
0406B8             0904*       MOSCALL mos_getkey
0406B8 3E 00       0001*M1 			LD	A, function
0406BA 5B CF       0002*M1 			RST.LIL	08h
0406BC C9          0905*       ret
0406BD             0906*   
0406BD             0907*   ; print bytes from an address to the screen in hexidecimal format
0406BD             0908*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406BD             0909*   ; outputs: values of each byte printed to screen separated by spaces
0406BD             0910*   ; destroys: nothing
0406BD             0911*   dumpMemoryHex:
0406BD             0912*   ; save registers to the stack
0406BD C5          0913*       push bc
0406BE E5          0914*       push hl
0406BF F5          0915*       push af
0406C0             0916*   
0406C0             0917*   ; print the address and separator
0406C0 CD 27 01 04 0918*       call printHex24
0406C4 3E 3A       0919*       ld a,':'
0406C6 5B D7       0920*       rst.lil 10h
0406C8 3E 20       0921*       ld a,' '
0406CA 5B D7       0922*       rst.lil 10h
0406CC             0923*   
0406CC             0924*   ; set b to be our loop counter
0406CC F1          0925*       pop af
0406CD 47          0926*       ld b,a
0406CE E1          0927*       pop hl
0406CF E5          0928*       push hl
0406D0 F5          0929*       push af
0406D1             0930*   @loop:
0406D1             0931*   ; print the byte
0406D1 7E          0932*       ld a,(hl)
0406D2 CD 35 01 04 0933*       call printHex8
0406D6             0934*   ; print a space
0406D6 3E 20       0935*       ld a,' '
0406D8 5B D7       0936*       rst.lil 10h
0406DA 23          0937*       inc hl
0406DB 10 F4       0938*       djnz @loop
0406DD CD 1C 01 04 0939*       call printNewLine
0406E1             0940*   
0406E1             0941*   ; restore everything
0406E1 F1          0942*       pop af
0406E2 E1          0943*       pop hl
0406E3 C1          0944*       pop bc
0406E4             0945*   
0406E4             0946*   ; all done
0406E4 C9          0947*       ret
0406E5             0948*   
0406E5             0949*   
0406E5             0950*   ; print bytes from an address to the screen in binary format
0406E5             0951*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406E5             0952*   ; outputs: values of each byte printed to screen separated by spaces
0406E5             0953*   ; destroys: nothing
0406E5             0954*   dumpMemoryBin:
0406E5             0955*   ; save all registers to the stack
0406E5 F5          0956*       push af
0406E6 C5          0957*       push bc
0406E7 D5          0958*       push de
0406E8 E5          0959*       push hl
0406E9 DD E5       0960*       push ix
0406EB FD E5       0961*       push iy
0406ED             0962*   
0406ED             0963*   ; set b to be our loop counter
0406ED 47          0964*       ld b,a
0406EE             0965*   @loop:
0406EE             0966*   ; print the byte
0406EE 7E          0967*       ld a,(hl)
0406EF E5          0968*       push hl
0406F0 C5          0969*       push bc
0406F1 CD A8 03 04 0970*       call printBin8
0406F5 C1          0971*       pop bc
0406F6             0972*   ; print a space
0406F6 3E 20       0973*       ld a,' '
0406F8 5B D7       0974*       rst.lil 10h
0406FA E1          0975*       pop hl
0406FB 23          0976*       inc hl
0406FC 10 F0       0977*       djnz @loop
0406FE CD 1C 01 04 0978*       call printNewLine
040702             0979*   
040702             0980*   ; restore everything
040702 FD E1       0981*       pop iy
040704 DD E1       0982*       pop ix
040706 E1          0983*       pop hl
040707 D1          0984*       pop de
040708 C1          0985*       pop bc
040709 F1          0986*       pop af
04070A             0987*   ; all done
04070A C9          0988*       ret
04070B             0989*   
04070B             0990*   ; print bytes from an address to the screen in binary format
04070B             0991*   ; with the bits of each byte in reverse order (lsb first)
04070B             0992*   ; inputs: hl = address of first byte to print, a = number of bytes to print
04070B             0993*   ; outputs: values of each byte printed to screen separated by spaces
04070B             0994*   ; destroys: nothing
04070B             0995*   dumpMemoryBinRev:
04070B             0996*   ; save all registers to the stack
04070B F5          0997*       push af
04070C C5          0998*       push bc
04070D D5          0999*       push de
04070E E5          1000*       push hl
04070F DD E5       1001*       push ix
040711 FD E5       1002*       push iy
040713             1003*   
040713             1004*   ; set b to be our loop counter
040713 47          1005*       ld b,a
040714             1006*   @loop:
040714             1007*   ; print the byte
040714 7E          1008*       ld a,(hl)
040715 E5          1009*       push hl
040716 C5          1010*       push bc
040717 CD CD 03 04 1011*       call printBin8Rev
04071B C1          1012*       pop bc
04071C             1013*   ; print a space
04071C 3E 20       1014*       ld a,' '
04071E 5B D7       1015*       rst.lil 10h
040720 E1          1016*       pop hl
040721 23          1017*       inc hl
040722 10 F0       1018*       djnz @loop
040724 CD 1C 01 04 1019*       call printNewLine
040728             1020*   
040728             1021*   ; restore everything
040728 FD E1       1022*       pop iy
04072A DD E1       1023*       pop ix
04072C E1          1024*       pop hl
04072D D1          1025*       pop de
04072E C1          1026*       pop bc
04072F F1          1027*       pop af
040730             1028*   ; all done
040730 C9          1029*       ret
040731             1030*   
040731             1031*   ; clear a block of memory by writing a prescribed value to each byte in the range
040731             1032*   ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
040731             1033*   ; outputs: memory block is cleared
040731             1034*   ; destroys: hl, de
040731             1035*   clear_mem:
040731 0B          1036*       dec bc ; we do this because we will increment de before writing the first byte
040732 77          1037*       ld (hl),a
040733 E5          1038*       push hl
040734 D1          1039*       pop de
040735 13          1040*       inc de ; target address
040736 ED B0       1041*       ldir
040738 C9          1042*       ret
040739             0032        include "arith24.inc"
040739             0001*   ;------------------------------------------------------------------------
040739             0002*   ;  arith24.asm
040739             0003*   ;  24-bit ez80 arithmetic routines
040739             0004*   ;  Copyright (c) Shawn Sijnstra 2024
040739             0005*   ;  MIT license
040739             0006*   ;
040739             0007*   ;  This library was created as a tool to help make ez80
040739             0008*   ;  24-bit native assembly routines for simple mathematical problems
040739             0009*   ;  more widely available.
040739             0010*   ;
040739             0011*   ;------------------------------------------------------------------------
040739             0012*   
040739             0013*   ;------------------------------------------------------------------------
040739             0014*   ; umul24:	HL = HL*DE (unsigned)
040739             0015*   ; Preserves AF, BC, DE
040739             0016*   ; Uses a fast multiply routine.
040739             0017*   ;------------------------------------------------------------------------
040739             0018*   umul24:
040739 D5          0019*   	push	DE
04073A C5          0020*   	push	BC
04073B F5          0021*   	push	AF
04073C E5          0022*   	push	HL
04073D C1          0023*   	pop		BC
04073E 3E 18       0024*       ld	 	a, 24 ; No. of bits to process
040740 21 00 00 00 0025*       ld	 	hl, 0 ; Result
040744             0026*   umul24_lp:
040744 29          0027*   	add	hl,hl
040745 EB          0028*   	ex	de,hl
040746 29          0029*   	add	hl,hl
040747 EB          0030*   	ex	de,hl
040748 30 01       0031*   	jr	nc,umul24_nc
04074A 09          0032*   	add	hl,bc
04074B             0033*   umul24_nc:
04074B 3D          0034*   	dec	a
04074C 20 F6       0035*   	jr	nz,umul24_lp
04074E F1          0036*   	pop	af
04074F C1          0037*   	pop	bc
040750 D1          0038*   	pop	de
040751 C9          0039*   	ret
040752             0040*   
040752             0041*   
040752             0042*   ;------------------------------------------------------------------------
040752             0043*   ; udiv24
040752             0044*   ; Unsigned 24-bit division
040752             0045*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
040752             0046*   ;
040752             0047*   ; Uses AF BC DE HL
040752             0048*   ; Uses Restoring Division algorithm
040752             0049*   ;------------------------------------------------------------------------
040752             0050*   
040752             0051*   udiv24:
040752 E5          0052*   	push	hl
040753 C1          0053*   	pop		bc	;move dividend to BCU
040754 21 00 00 00 0054*   	ld		hl,0	;result
040758 A7          0055*   	and		a
040759 ED 52       0056*   	sbc		hl,de	;test for div by 0
04075B C8          0057*   	ret		z		;it's zero, carry flag is clear
04075C 19          0058*   	add		hl,de	;HL is 0 again
04075D 3E 18       0059*   	ld		a,24	;number of loops through.
04075F             0060*   udiv1:
04075F C5          0061*   	push	bc	;complicated way of doing this because of lack of access to top bits
040760 E3          0062*   	ex		(sp),hl
040761 37          0063*   	scf
040762 ED 6A       0064*   	adc	hl,hl
040764 E3          0065*   	ex	(sp),hl
040765 C1          0066*   	pop	bc		;we now have bc = (bc * 2) + 1
040766             0067*   
040766 ED 6A       0068*   	adc	hl,hl
040768 A7          0069*   	and	a		;is this the bug
040769 ED 52       0070*   	sbc	hl,de
04076B 30 02       0071*   	jr	nc,udiv2
04076D 19          0072*   	add	hl,de
04076E             0073*   ;	dec	c
04076E 0B          0074*   	dec	bc
04076F             0075*   udiv2:
04076F 3D          0076*   	dec	a
040770 20 ED       0077*   	jr	nz,udiv1
040772 37          0078*   	scf		;flag used for div0 error
040773 C5          0079*   	push	bc
040774 D1          0080*   	pop		de	;remainder
040775 C9          0081*   	ret
040776             0082*   
040776             0083*   
040776             0084*   
040776             0085*   ;------------------------------------------------------------------------
040776             0086*   ; neg24
040776             0087*   ; Returns: HLU = 0-HLU
040776             0088*   ; preserves all other registers
040776             0089*   ;------------------------------------------------------------------------
040776             0090*   neg24:
040776 D5          0091*   	push	de
040777 EB          0092*   	ex		de,hl
040778 21 00 00 00 0093*   	ld		hl,0
04077C B7          0094*   	or		a
04077D ED 52       0095*   	sbc		hl,de
04077F D1          0096*   	pop		de
040780 C9          0097*   	ret
040781             0098*   
040781             0099*   ;------------------------------------------------------------------------
040781             0100*   ; or_hlu_deu: 24 bit bitwise OR
040781             0101*   ; Returns: hlu = hlu OR deu
040781             0102*   ; preserves all other registers
040781             0103*   ;------------------------------------------------------------------------
040781             0104*   or_hlu_deu:
040781 22 0A 08 04 0105*   	ld	(bitbuf1),hl
040785 ED 53 0D 08 0106*   	ld	(bitbuf2),de
       04          
04078A D5          0107*   	push	de	;preserve DEU
04078B C5          0108*   	push	bc	;preserve BCU
04078C 06 03       0109*   	ld		b,3
04078E 21 0A 08 04 0110*   	ld	hl,bitbuf1
040792 11 0A 08 04 0111*   	ld	de,bitbuf1
040796             0112*   orloop_24:
040796 1A          0113*   	ld	a,(de)
040797 B6          0114*   	or	(hl)
040798 12          0115*   	ld	(de),a
040799 13          0116*   	inc	de
04079A 23          0117*   	inc	hl
04079B 10 F9       0118*   	djnz	orloop_24
04079D 2A 0D 08 04 0119*   	ld	hl,(bitbuf2)
0407A1 C1          0120*   	pop		bc	;restore BC
0407A2 D1          0121*   	pop		de	;restore DE
0407A3             0122*   
0407A3             0123*   ;------------------------------------------------------------------------
0407A3             0124*   ; and_hlu_deu: 24 bit bitwise AND
0407A3             0125*   ; Returns: hlu = hlu AND deu
0407A3             0126*   ; preserves all other registers
0407A3             0127*   ;------------------------------------------------------------------------
0407A3             0128*   and_hlu_deu:
0407A3 22 0A 08 04 0129*   	ld	(bitbuf1),hl
0407A7 ED 53 0D 08 0130*   	ld	(bitbuf2),de
       04          
0407AC D5          0131*   	push	de	;preserve DEU
0407AD C5          0132*   	push	bc	;preserve BCU
0407AE 06 03       0133*   	ld		b,3
0407B0 21 0A 08 04 0134*   	ld	hl,bitbuf1
0407B4 11 0A 08 04 0135*   	ld	de,bitbuf1
0407B8             0136*   andloop_24:
0407B8 1A          0137*   	ld	a,(de)
0407B9 A6          0138*   	and	(hl)
0407BA 12          0139*   	ld	(de),a
0407BB 13          0140*   	inc	de
0407BC 23          0141*   	inc	hl
0407BD 10 F9       0142*   	djnz	andloop_24
0407BF 2A 0D 08 04 0143*   	ld	hl,(bitbuf2)
0407C3 C1          0144*   	pop		bc	;restore BC
0407C4 D1          0145*   	pop		de	;restore DE
0407C5             0146*   
0407C5             0147*   ;------------------------------------------------------------------------
0407C5             0148*   ; xor_hlu_deu: 24 bit bitwise XOR
0407C5             0149*   ; Returns: hlu = hlu XOR deu
0407C5             0150*   ; preserves all other registers
0407C5             0151*   ;------------------------------------------------------------------------
0407C5             0152*   xor_hlu_deu:
0407C5 22 0A 08 04 0153*   	ld	(bitbuf1),hl
0407C9 ED 53 0D 08 0154*   	ld	(bitbuf2),de
       04          
0407CE D5          0155*   	push	de	;preserve DEU
0407CF C5          0156*   	push	bc	;preserve BCU
0407D0 06 03       0157*   	ld		b,3
0407D2 21 0A 08 04 0158*   	ld	hl,bitbuf1
0407D6 11 0A 08 04 0159*   	ld	de,bitbuf1
0407DA             0160*   xorloop_24:
0407DA 1A          0161*   	ld	a,(de)
0407DB AE          0162*   	xor	(hl)
0407DC 12          0163*   	ld	(de),a
0407DD 13          0164*   	inc	de
0407DE 23          0165*   	inc	hl
0407DF 10 F9       0166*   	djnz	xorloop_24
0407E1 2A 0D 08 04 0167*   	ld	hl,(bitbuf2)
0407E5 C1          0168*   	pop		bc	;restore BC
0407E6 D1          0169*   	pop		de	;restore DE
0407E7             0170*   
0407E7             0171*   ;------------------------------------------------------------------------
0407E7             0172*   ; shl_hlu: 24 bit shift left hlu by a positions
0407E7             0173*   ; Returns: hlu = hlu << a
0407E7             0174*   ;		   a = 0
0407E7             0175*   ; NOTE: only considers a up to 16 bits.
0407E7             0176*   ; preserves all other registers
0407E7             0177*   ; modified by Brandon R. Gates to use a instead of de
0407E7             0178*   ;------------------------------------------------------------------------
0407E7             0179*   shl_hlu:
0407E7 B7          0180*   	or a
0407E8 C8          0181*   	ret		z		;we're done
0407E9 29          0182*   	add		hl,hl	;shift HLU left
0407EA 3D          0183*   	dec a
0407EB 18 FA       0184*   	jr		shl_hlu
0407ED             0185*   
0407ED             0186*   ;------------------------------------------------------------------------
0407ED             0187*   ; shr_hlu: 24 bit shift right hlu by a positions
0407ED             0188*   ; Returns: hlu = hlu >> a
0407ED             0189*   ;		   a = 0
0407ED             0190*   ; NOTE: only considers a up to 16 bits.
0407ED             0191*   ; preserves all other registers
0407ED             0192*   ; modified by Brandon R. Gates to use a instead of de
0407ED             0193*   ;------------------------------------------------------------------------
0407ED             0194*   shr_hlu:
0407ED 22 0A 08 04 0195*   	ld		(bitbuf1),hl
0407F1 21 0C 08 04 0196*   	ld		hl,bitbuf1+2
0407F5             0197*   @shr_loop:
0407F5 B7          0198*   	or a
0407F6 28 0D       0199*   	jr		z,@shr_done		;we're done
0407F8             0200*   ;carry is clear from or instruction
0407F8 CB 1E       0201*   	rr		(hl)
0407FA 2B          0202*   	dec		hl
0407FB CB 1E       0203*   	rr		(hl)
0407FD 2B          0204*   	dec		hl
0407FE CB 1E       0205*   	rr		(hl)
040800 23          0206*   	inc		hl
040801 23          0207*   	inc		hl
040802 3D          0208*   	dec a
040803 18 F0       0209*   	jr		@shr_loop
040805             0210*   @shr_done:
040805 2A 0A 08 04 0211*   	ld		hl,(bitbuf1)	;collect result
040809 C9          0212*   	ret
04080A             0213*   
04080A             0214*   ;------------------------------------------------------------------------
04080A             0215*   ; Scratch area for calculations
04080A             0216*   ;------------------------------------------------------------------------
04080A 00 00 00    0217*   bitbuf1:	dw24	0	;bit manipulation buffer 1
04080D 00 00 00    0218*   bitbuf2:	dw24	0	;bit manipulation buffer 2
040810             0219*   
040810             0220*   ; -----------------------------------------------------------------------
040810             0221*   ; Functions added by Brandon R. Gates
040810             0222*   ; -----------------------------------------------------------------------
040810             0223*   
040810             0224*   ;------------------------------------------------------------------------
040810             0225*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
040810             0226*   ;              Determines the LSB of A and shifts HLU accordingly.
040810             0227*   ;              HLU = HLU >> LSB(A)
040810             0228*   ; Returns: HLU = HLU >> LSB(A)
040810             0229*   ; Destroys: af
040810             0230*   ;------------------------------------------------------------------------
040810             0231*   shr_hlu_log2a:
040810 B7          0232*   	or a    ; check for zero
040811 C8          0233*   	ret z   ; nothing to shift so we're done
040812 C5          0234*   	push 	bc ; preserve
040813 06 00       0235*   	ld		b,0 ; clear b
040815             0236*   @find_bit:
040815 0F          0237*   	rrca ; bit 0 to carry
040816 DA 1F 08 04 0238*   	jp c,@found_bit
04081A 04          0239*   	inc b ; next bit
04081B C3 15 08 04 0240*   	jp @find_bit
04081F             0241*   @found_bit:
04081F 78          0242*   	ld a,b
040820 CD ED 07 04 0243*   	call shr_hlu
040824 C1          0244*   	pop 	bc ; restore
040825 C9          0245*   	ret
040826             0246*   ; end shr_hlu_log2a
040826             0247*   
040826             0248*   ;------------------------------------------------------------------------
040826             0249*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040826             0250*   ;                Determines the LSB of A and shifts HLU accordingly.
040826             0251*   ;                HLU = HLU << LSB(A)
040826             0252*   ; Returns: HLU = HLU << LSB(A)
040826             0253*   ; Destroys: af
040826             0254*   ;------------------------------------------------------------------------
040826             0255*   shl_hlu_log2a:
040826 B7          0256*   	or a    ; check for zero
040827 C8          0257*   	ret z   ; nothing to shift so we're done
040828 C5          0258*   	push 	bc ; preserve
040829 06 00       0259*   	ld		b,0 ; clear b
04082B             0260*   @find_bit:
04082B 0F          0261*   	rrca ; bit 0 to carry
04082C DA 35 08 04 0262*   	jp c,@found_bit
040830 04          0263*   	inc b ; next bit
040831 C3 2B 08 04 0264*   	jp @find_bit
040835             0265*   @found_bit:
040835 78          0266*   	ld a,b
040836 CD E7 07 04 0267*   	call shl_hlu
04083A C1          0268*   	pop 	bc ; restore
04083B C9          0269*   	ret
04083C             0270*   ; end shl_hlu_log2a
04083C             0033        include "maths.inc"
04083C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040900             0002*   
040900             0003*   ;------------------------------------------------------------------------
040900             0004*   ; Scratch area for calculations
040900             0005*   ;------------------------------------------------------------------------
040900 00 00 00    0006*   scratch1: dw24 0 ;bit manipulation buffer 1
040903 00 00 00    0007*   scratch2: dw24 0 ;bit manipulation buffer 2
040906             0008*   
040906             0009*   ; absolute value of hlu
040906             0010*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040906             0011*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040906             0012*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040906             0013*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040906             0014*   ; destroys: a
040906             0015*   hlu_abs:
040906 19          0016*       add hl,de
040907 B7          0017*       or a
040908 ED 52       0018*       sbc hl,de
04090A FA 0F 09 04 0019*       jp m,@is_neg
04090E C9          0020*       ret ; hlu is positive or zero so we're done
04090F             0021*   @is_neg:
04090F F5          0022*       push af ; otherwise, save current flags for return
040910 CD 16 09 04 0023*       call neg_hlu ; negate hlu
040914 F1          0024*       pop af ; get back flags
040915 C9          0025*       ret
040916             0026*   
040916             0027*   ; flip the sign of hlu
040916             0028*   ; inputs: hlu
040916             0029*   ; returns: 0-hlu, flags set appropriately for the result:
040916             0030*   ;         s1,z0,pv0,n1,c1 if result is negative
040916             0031*   ;         s0,z1,pv0,n1,c0 if result is zero
040916             0032*   ;         s0,z0,pv0,n1,c1 if result is positive
040916             0033*   ; destroys a
040916             0034*   neg_hlu:
040916 D5          0035*       push de ; save de
040917 EB          0036*       ex de,hl ; put hl into de
040918 21 00 00 00 0037*       ld hl,0 ; clear hl
04091C AF          0038*       xor a ; clear carry
04091D ED 52       0039*       sbc hl,de ; 0-hlu = -hlu
04091F D1          0040*       pop de ; get de back
040920 C9          0041*       ret ; easy peasy
040921             0042*   
040921             0043*   ;------------------------------------------------------------------------
040921             0044*   ; divide hlu by 2, inspired by above
040921             0045*   ;------------------------------------------------------------------------
040921             0046*   hlu_div2:
040921 22 00 09 04 0047*       ld (scratch1),hl
040925 21 02 09 04 0048*       ld hl,scratch1+2
040929 CB 1E       0049*       rr (hl)
04092B 2B          0050*       dec hl
04092C CB 1E       0051*       rr (hl)
04092E 2B          0052*       dec hl
04092F CB 1E       0053*       rr (hl)
040931 23          0054*       inc hl
040932 23          0055*       inc hl
040933 2A 00 09 04 0056*       ld hl,(scratch1)
040937 C9          0057*       ret
040938             0058*   
040938             0059*   ; this is my little hack to divide by 16
040938             0060*   hlu_div16:
040938 AF          0061*       xor a
040939 29          0062*       add hl,hl
04093A 17          0063*       rla
04093B 29          0064*       add hl,hl
04093C 17          0065*       rla
04093D 29          0066*       add hl,hl
04093E 17          0067*       rla
04093F 29          0068*       add hl,hl
040940 17          0069*       rla
040941 22 4E 09 04 0070*       ld (@scratch),hl
040945 32 51 09 04 0071*       ld (@scratch+3),a
040949 2A 4F 09 04 0072*       ld hl,(@scratch+1)
04094D C9          0073*       ret
04094E             0074*   @scratch: ds 4
040952             0075*   
040952             0076*   ; hlu signed division by 256
040952             0077*   ; returns: hlu / 256
040952             0078*   ; destroys: af
040952             0079*   hlu_sdiv256:
       FF FF FF FF 
040952 AF          0080*       xor a ; assume hl is positive
040953 22 69 09 04 0081*       ld (@buffer),hl
040957             0082*       SIGN_HLU
040957 19          0001*M1     add hl,de ; 1 cycle
040958 B7          0002*M1     or a ; clear flags ; 1 cycle
040959 ED 52       0003*M1     sbc hl,de ; 2 cycles
04095B             0004*M1     ; 4 cycles total
04095B F2 60 09 04 0083*       jp p,@hl_pos
04095F 3D          0084*       dec a
040960             0085*   @hl_pos:
040960 32 6C 09 04 0086*       ld (@buffer+3),a
040964 2A 6A 09 04 0087*       ld hl,(@buffer+1)
040968 C9          0088*       ret
040969             0089*   @buffer: ds 4
04096D             0090*   
04096D             0091*   ; hlu 1 byte right shift, unsigned
04096D             0092*   ; returns: hlu / 256, fractional portion in a
04096D             0093*   ; destroys: af
04096D             0094*   hlu_udiv256:
       FF FF FF FF 
04096D AF          0095*       xor a
04096E 32 7F 09 04 0096*       ld (@buffer+3),a
040972 7D          0097*       ld a,l ; save the fractional portion
040973 22 7C 09 04 0098*       ld (@buffer),hl
040977 2A 7D 09 04 0099*       ld hl,(@buffer+1)
04097B C9          0100*       ret
04097C             0101*   @buffer: ds 4
040980             0102*   
       FF FF FF FF 
040980 00 00 00 00 0103*   add_bcd_arg1: db #00,#00,#00,#00
040984 00 00 00 00 0104*   add_bcd_arg2: db #00,#00,#00,#00
040988             0105*   
040988             0106*   ; set bcd values in a scratch memory address from registers bcde
040988             0107*   ; input: hl; scratch address,bcde; 8-place bcd number
040988             0108*   ; destroys ; hl
040988             0109*   set_bcd:
040988 73          0110*       ld (hl),e
040989 23          0111*       inc hl
04098A 72          0112*       ld (hl),d
04098B 23          0113*       inc hl
04098C 71          0114*       ld (hl),c
04098D 23          0115*       inc hl
04098E 70          0116*       ld (hl),b
04098F C9          0117*       ret
040990             0118*   
040990             0119*   ; load bcd values from a scratch memory address to bcde
040990             0120*   ; input: hl; scratch address
040990             0121*   ; output: bcde; 8-place bcd number
040990             0122*   ; destroys: hl
040990             0123*   get_bcd:
040990 5E          0124*       ld e,(hl)
040991 23          0125*       inc hl
040992 56          0126*       ld d,(hl)
040993 23          0127*       inc hl
040994 4E          0128*       ld c,(hl)
040995 23          0129*       inc hl
040996 46          0130*       ld b,(hl)
040997 C9          0131*       ret
040998             0132*   
040998             0133*   ; BCD addition
040998             0134*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040998             0135*   ;       a is the number of bytes holding each number (number of places/2)
040998             0136*   ; outputs: (hl) + (de) --> (hl)
040998             0137*   ; destroys: a,b,de,hl
040998             0138*   add_bcd:
040998 47          0139*       ld b,a ; loop counter
040999 AF          0140*       xor a ; reset a, clear carry flag
04099A             0141*   adcec:
04099A 1A          0142*       ld a,(de) ; addend to acc
04099B 8E          0143*       adc a,(hl) ; add (hl) to acc
04099C 27          0144*       daa ; adjust result to bcd
04099D 77          0145*       ld (hl),a ; store result
04099E 23          0146*       inc hl ; advance memory pointers
04099F 13          0147*       inc de
0409A0 10 F8       0148*       djnz adcec ; loop until b == 0
0409A2 C9          0149*       ret
0409A3             0150*   
0409A3             0151*   ; BCD subtraction
0409A3             0152*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0409A3             0153*   ;       a is the number of bytes holding each number (number of places/2)
0409A3             0154*   ; outputs: (hl) - (de) --> (hl)
0409A3             0155*   ; destroys: a,b,de,hl
0409A3             0156*   sub_bcd:
0409A3 47          0157*       ld b,a ; loop counter
0409A4 AF          0158*       xor a ; reset a,clear carry flag
0409A5             0159*   subdec:
0409A5 1A          0160*       ld a,(de) ; subtrahend to acc
0409A6 9E          0161*       sbc a,(hl) ; subtract (hl) from acc
0409A7 27          0162*       daa ; adjust result to bcd
0409A8 77          0163*       ld (hl),a ; store result
0409A9 23          0164*       inc hl ; advance memory pointers
0409AA 13          0165*       inc de
0409AB 10 F8       0166*       djnz subdec ; loop until b == 0
0409AD C9          0167*       ret
0409AE             0168*   
0409AE             0169*   ; http://www.z80.info/pseudo-random.txt
0409AE             0170*   rand_8:
0409AE C5          0171*       push bc
0409AF 3A C2 09 04 0172*       ld a,(r_seed)
0409B3 4F          0173*       ld c,a
0409B4             0174*   
0409B4 0F          0175*       rrca ; multiply by 32
0409B5 0F          0176*       rrca
0409B6 0F          0177*       rrca
0409B7 EE 1F       0178*       xor 0x1f
0409B9             0179*   
0409B9 81          0180*       add a,c
0409BA DE FF       0181*       sbc a,255 ; carry
0409BC             0182*   
0409BC 32 C2 09 04 0183*       ld (r_seed),a
0409C0 C1          0184*       pop bc
0409C1 C9          0185*       ret
0409C2 50          0186*   r_seed: defb $50
0409C3             0187*   
0409C3             0188*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
0409C3             0189*   prng24:
0409C3             0190*   ;;Expects ADL mode.
0409C3             0191*   ;;Output: HL
0409C3             0192*   ;;50cc
0409C3             0193*   ;;33 bytes
0409C3             0194*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
0409C3 ED 5B E4 09 0195*       ld de,(seed1)
       04          
0409C8 B7          0196*       or a
0409C9 ED 62       0197*       sbc hl,hl
0409CB 19          0198*       add hl,de
0409CC 29          0199*       add hl,hl
0409CD 29          0200*       add hl,hl
0409CE 2C          0201*       inc l
0409CF 19          0202*       add hl,de
0409D0 22 E4 09 04 0203*       ld (seed1),hl
0409D4 2A E7 09 04 0204*       ld hl,(seed2)
0409D8 29          0205*       add hl,hl
0409D9 9F          0206*       sbc a,a
0409DA E6 1B       0207*       and %00011011
0409DC AD          0208*       xor l
0409DD 6F          0209*       ld l,a
0409DE 22 E7 09 04 0210*       ld (seed2),hl
0409E2 19          0211*       add hl,de
0409E3 C9          0212*       ret
0409E4 00 00 00    0213*   seed1: dl 0
0409E7 00 00 00    0214*   seed2: dl 0
0409EA             0034        include "files.inc"
0409EA             0001*   ; load to onboard 8k sram
0409EA             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
0409EA             0035        include "fixed168.inc"
0409EA FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
040A00             0002*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040A00             0003*   ; uses EZ80 MLT instruction for speed
040A00             0004*   ; operation: UHL * A --> UHL
040A00             0005*   ; destroys: AF, HL
040A00             0006*   smul24x8:
040A00             0007*   ; make hl positive and store sign flag
040A00 CD 06 09 04 0008*       call hlu_abs
040A04 F5          0009*       push af
040A05             0010*   ; do the division
040A05 CD 10 0A 04 0011*       call mul24x8 ; hl = product
040A09             0012*   ; adjust sign of result
040A09 F1          0013*       pop af ; sign de
040A0A F0          0014*       ret p ; hl was positive, nothing to do
040A0B CD 16 09 04 0015*       call neg_hlu ; result is negative
040A0F C9          0016*       ret
040A10             0017*   
040A10             0018*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040A10             0019*   ; uses EZ80 MLT instruction for speed
040A10             0020*   ; operation: UHL * A --> AUHL
040A10             0021*   ; destroys: AF, HL
040A10             0022*   mul24x8:
040A10 D5          0023*       push de ; preserve de
040A11             0024*   ; low byte
040A11 5D          0025*       ld e,l
040A12 57          0026*       ld d,a
040A13 ED 5C       0027*       mlt de
040A15 6B          0028*       ld l,e ; product low byte
040A16 08          0029*       ex af,af' ; save multiplier
040A17 7A          0030*       ld a,d ; carry
040A18 08          0031*       ex af,af' ; save carry, restore multiplier
040A19             0032*   ; high byte
040A19 5C          0033*       ld e,h
040A1A 57          0034*       ld d,a
040A1B ED 5C       0035*       mlt de
040A1D 08          0036*       ex af,af' ; save multiplier, restore carry
040A1E 83          0037*       add a,e ; add carry
040A1F 67          0038*       ld h,a ; product middle byte
040A20 7A          0039*       ld a,d ; carry
040A21 08          0040*       ex af,af' ; save carry, restore multiplier
040A22             0041*   ; upper byte
040A22 22 3D 0A 04 0042*       ld (@scratch),hl ; 7 cycles
040A26 5F          0043*       ld e,a
040A27 3A 3F 0A 04 0044*       ld a,(@scratch+2)
040A2B 57          0045*       ld d,a
040A2C ED 5C       0046*       mlt de
040A2E 08          0047*       ex af,af' ; restore carry
040A2F 8B          0048*       adc a,e ; add carry
040A30 32 3F 0A 04 0049*       ld (@scratch+2),a ; 5 cycles
040A34 2A 3D 0A 04 0050*       ld hl,(@scratch) ; 7 cycles
040A38             0051*   ; highest byte
040A38 3E 00       0052*       ld a,0 ; preserve carry flag
040A3A 8A          0053*       adc a,d ; product highest byte
040A3B D1          0054*       pop de ; restore de
040A3C C9          0055*       ret
040A3D             0056*   @scratch: ds 3
040A40             0057*   
       FF FF FF 
040A40 00 00 00 00 0058*   mul24out: blkb 6,0
       00 00       
040A46             0059*   
040A46             0060*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040A46             0061*   ; operation: UHL * UDE --> mul24out
040A46             0062*   mul24:
040A46 DD E5       0063*       push ix ; preserve
040A48             0064*   ; point to output buffer and clear it
040A48 DD 21 40 0A 0065*       ld ix,mul24out
       04          
040A4D C5          0066*       push bc
040A4E 01 00 00 00 0067*       ld bc,0
040A52 DD 0F 00    0068*       ld (ix),bc
040A55 DD 0F 03    0069*       ld (ix+3),bc
040A58 C1          0070*       pop bc
040A59             0071*   ; STEP 1: UHL * E
040A59 7B          0072*       ld a,e
040A5A E5          0073*       push hl
040A5B CD 10 0A 04 0074*       call mul24x8
040A5F DD 2F 00    0075*       ld (ix+0),hl
040A62 DD 77 03    0076*       ld (ix+3),a
040A65             0077*   ; STEP 2: UHL * D
040A65 E1          0078*       pop hl
040A66 E5          0079*       push hl
040A67 7A          0080*       ld a,d
040A68 CD 10 0A 04 0081*       call mul24x8
040A6C CD 85 0A 04 0082*       call @accumulate
040A70             0083*   ; STEP 3: UHL * DEU
040A70 E1          0084*       pop hl
040A71 ED 53 B5 0A 0085*       ld (@de),de
       04          
040A76 3A B7 0A 04 0086*       ld a,(@de+2)
040A7A CD 10 0A 04 0087*       call mul24x8
040A7E CD 85 0A 04 0088*       call @accumulate
040A82             0089*   ; all done
040A82 DD E1       0090*       pop ix ; restore
040A84 C9          0091*       ret
040A85             0092*   @accumulate:
040A85 DD 23       0093*       inc ix
040A87             0094*   ; highest byte of product to carry
040A87 DD 77 03    0095*       ld (ix+3),a
040A8A             0096*   ; low byte of product
040A8A 7D          0097*       ld a,l
040A8B DD 86 00    0098*       add a,(ix+0)
040A8E DD 77 00    0099*       ld (ix+0),a
040A91             0100*   ; high byte of product
040A91 7C          0101*       ld a,h
040A92 DD 8E 01    0102*       adc a,(ix+1)
040A95 DD 77 01    0103*       ld (ix+1),a
040A98             0104*   ; uppper byte of product
040A98 22 B2 0A 04 0105*       ld (@hl),hl
040A9C 3A B4 0A 04 0106*       ld a,(@hl+2)
040AA0 DD 8E 02    0107*       adc a,(ix+2)
040AA3 DD 77 02    0108*       ld (ix+2),a
040AA6             0109*   ; carry
040AA6 3E 00       0110*       ld a,0 ; preserve flags
040AA8 DD 8E 03    0111*       adc a,(ix+3)
040AAB DD 77 03    0112*       ld (ix+3),a
040AAE C9          0113*       ret
040AAF             0114*   
040AAF 00 00 00    0115*   @ix: dl 0
040AB2 00 00 00    0116*   @hl: dl 0
040AB5 00 00 00    0117*   @de: dl 0
040AB8             0118*   
040AB8             0119*   ; ; UHL * UDE --> UHL (unsigned)
040AB8             0120*   ; umul24:
040AB8             0121*   ;     call mul24
040AB8             0122*   ;     ld hl,(mul24out)
040AB8             0123*   ;     ret
040AB8             0124*   
040AB8             0125*   ; UH.L = UH.L*UD.E (unsigned)
040AB8             0126*   umul168:
040AB8 CD 46 0A 04 0127*       call mul24
040ABC 2A 41 0A 04 0128*       ld hl,(mul24out+1)
040AC0 C9          0129*       ret
040AC1             0130*   
040AC1             0131*   ; UH.L * UD.E --> UH.L (signed)
040AC1             0132*   smul168:
040AC1             0133*   ; make everything positive and store sign flags
040AC1 CD 06 09 04 0134*       call hlu_abs
040AC5 F5          0135*       push af
040AC6 EB          0136*       ex de,hl
040AC7 CD 06 09 04 0137*       call hlu_abs
040ACB EB          0138*       ex de,hl
040ACC F5          0139*       push af
040ACD             0140*   ; do the division
040ACD CD B8 0A 04 0141*       call umul168 ; hl = product
040AD1             0142*   ; adjust sign of result
040AD1 F1          0143*       pop af ; sign de
040AD2 FA DD 0A 04 0144*       jp m,@de_neg
040AD6 F1          0145*       pop af ; sign hl
040AD7 F0          0146*       ret p ; both positive, nothing to do
040AD8             0147*   @hl_neg:
040AD8 CD 16 09 04 0148*       call neg_hlu ; de pos, hl neg, result is negative
040ADC C9          0149*       ret
040ADD             0150*   @de_neg:
040ADD F1          0151*       pop af
040ADE F8          0152*       ret m ; both negative, nothing to do
040ADF CD 16 09 04 0153*       call neg_hlu ; result is negative
040AE3 C9          0154*       ret
040AE4             0155*   
040AE4             0156*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040AE4             0157*   ; perform unsigned division of 16.8 fixed place values
040AE4             0158*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
040AE4             0159*   udiv168:
040AE4             0160*   ; back up divisor
040AE4 ED 53 1B 0B 0161*       ld (@ude),de
       04          
040AE9             0162*   ; get the 16-bit integer part of the quotient
040AE9 CD 52 07 04 0163*       call udiv24 ; de = quotient, hl = remainder
040AED             0164*   ; load quotient to upper three bytes of output
040AED ED 53 22 0B 0165*       ld (div168_out+1),de
       04          
040AF2             0166*   @div256:
040AF2             0167*   ; multiply remainder by 256
040AF2             0168*       hlu_mul256
040AF2 29          0001*M1     add hl,hl ; * 2
040AF3 29          0002*M1     add hl,hl ; * 4
040AF4 29          0003*M1     add hl,hl ; * 8
040AF5 29          0004*M1     add hl,hl ; * 16
040AF6 29          0005*M1     add hl,hl ; * 32
040AF7 29          0006*M1     add hl,hl ; * 64
040AF8 29          0007*M1     add hl,hl ; * 128
040AF9 29          0008*M1     add hl,hl ; * 256
040AFA             0169*   ; skip fractional computation if remainder is zero
040AFA             0170*       SIGN_HLU
040AFA 19          0001*M1     add hl,de ; 1 cycle
040AFB B7          0002*M1     or a ; clear flags ; 1 cycle
040AFC ED 52       0003*M1     sbc hl,de ; 2 cycles
040AFE             0004*M1     ; 4 cycles total
040AFE 20 03       0171*       jr nz,@div_frac
040B00 AF          0172*       xor a
040B01 18 0A       0173*       jr @write_frac
040B03             0174*   ; now divide the shifted remainder by the divisor
040B03             0175*   @div_frac:
040B03 ED 5B 1B 0B 0176*       ld de,(@ude) ; get back divisor
       04          
040B08 CD 52 07 04 0177*       call udiv24 ; de = quotient, hl = remainder
040B0C             0178*   ; load low byte of quotient to low byte of output
040B0C 7B          0179*       ld a,e
040B0D             0180*   @write_frac:
040B0D 32 21 0B 04 0181*       ld (div168_out),a
040B11             0182*   ; load de with return value
040B11 ED 5B 21 0B 0183*       ld de,(div168_out)
       04          
040B16             0184*   ; load a with any overflow
040B16 3A 24 0B 04 0185*       ld a,(div168_out+3)
040B1A C9          0186*       ret ; ud.e is the 16.8 result
040B1B             0187*   @ude: ds 6
040B21             0188*   div168_out: ds 4 ; the extra byte is for overflow
040B25             0189*   
040B25             0190*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040B25             0191*   ; perform signed division of 16.8 fixed place values
040B25             0192*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040B25             0193*   sdiv168:
040B25             0194*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040B25 CD 06 09 04 0195*       call hlu_abs
040B29 F5          0196*       push af
040B2A EB          0197*       ex de,hl
040B2B CD 06 09 04 0198*       call hlu_abs
040B2F EB          0199*       ex de,hl
040B30 F5          0200*       push af
040B31             0201*   ; do the division
040B31 CD E4 0A 04 0202*       call udiv168 ; de = quotient, hl = remainder
040B35             0203*   ; adjust sign of result
040B35 F1          0204*       pop af ; sign de
040B36 FA 43 0B 04 0205*       jp m,@de_neg
040B3A F1          0206*       pop af ; sign hl
040B3B F0          0207*       ret p ; both positive, nothing to do
040B3C             0208*   @hl_neg:
040B3C EB          0209*       ex de,hl ; hl = quotient, de = remainder
040B3D CD 16 09 04 0210*       call neg_hlu ; de pos, hl neg, result is negative
040B41 EB          0211*       ex de,hl ; de = negated quotient, hl = remainder
040B42 C9          0212*       ret
040B43             0213*   @de_neg:
040B43 F1          0214*       pop af
040B44 F8          0215*       ret m ; both negative, nothing to do
040B45 EB          0216*       ex de,hl ; hl = quotient, de = remainder
040B46 CD 16 09 04 0217*       call neg_hlu ; result is negative
040B4A EB          0218*       ex de,hl ; de = negated quotient, hl = remainder
040B4B C9          0219*       ret
040B4C             0220*   
040B4C             0221*   ; convert signed angles from a 360 to 256 degree circle
040B4C             0222*   ; inputs: uh.l is the angle360 in 16.8 fixed format
040B4C             0223*   ; outputs: uh.l is the angle256 in 16.8 fixed format
040B4C             0224*   ; destroys: TODO
040B4C             0225*   deg_360_to_256:
040B4C D5          0226*       push de ; preserve de
040B4D             0227*   ; make angle positive and store sign flag
040B4D CD 06 09 04 0228*       call hlu_abs
040B51 F5          0229*       push af
040B52             0230*   ; multiply by coversion factor of 256/360
040B52 11 B6 00 00 0231*       ld de,0x0000B6 ; 0.711
040B56 CD B8 0A 04 0232*       call umul168 ; uh.l = uh.l * 0.711
040B5A             0233*   ; restore sign flag and adjust output accordingly
040B5A F1          0234*       pop af
040B5B F2 63 0B 04 0235*       jp p,@pos ; positive number
040B5F CD 16 09 04 0236*       call neg_hlu
040B63             0237*   @pos:
040B63             0238*   ; restore de and return uh.l as the result
040B63 D1          0239*       pop de
040B64 C9          0240*       ret
040B65             0241*   
040B65             0242*   ; convert signed angles from a 256 to 360 degree circle
040B65             0243*   ; inputs: uh.l is the angle256 in 16.8 fixed format
040B65             0244*   ; outputs: uh.l is the angle360 in 16.8 fixed format
040B65             0245*   ; destroys: TODO
040B65             0246*   deg_256_to_360:
040B65 D5          0247*       push de ; preserve de
040B66             0248*   ; make angle positive and store sign flag
040B66 CD 06 09 04 0249*       call hlu_abs
040B6A F5          0250*       push af
040B6B             0251*   ; multiply by coversion factor of 360/256
040B6B 11 68 01 00 0252*       ld de,0x000168 ; 1.406
040B6F CD B8 0A 04 0253*       call umul168 ; uh.l = uh.l * 1.406
040B73             0254*   ; restore sign flag and adjust output accordingly
040B73 F1          0255*       pop af
040B74 F2 7C 0B 04 0256*       jp p,@pos ; positive number
040B78 CD 16 09 04 0257*       call neg_hlu
040B7C             0258*   @pos:
040B7C             0259*   ; restore de and return uh.l as the result
040B7C D1          0260*       pop de
040B7D C9          0261*       ret
040B7E             0262*   
040B7E             0263*   ; fixed 16.8 routine
040B7E             0264*   ; cos(uh.l) --> uh.l
040B7E             0265*   ; destroys: f, hl
040B7E             0266*   cos168:
040B7E D5          0267*       push de ; preserve de
040B7F             0268*   ; for cos we simply increment the angle by 90 degrees
040B7F             0269*   ; or 0x004000 in 16.8 degrees256
040B7F             0270*   ; which makes it a sin problem
040B7F 11 00 40 00 0271*       ld de,0x004000
040B83 19          0272*       add hl,de ; modulo 256 happens below
040B84 D1          0273*       pop de ; restore de
040B85             0274*   ; fall through to sin168
040B85             0275*   
040B85             0276*   ; ---------------------
040B85             0277*   ; fixed 16.8 routine
040B85             0278*   ; sin(uh.l) --> uh.l
040B85             0279*   ; destroys: f, hl
040B85             0280*   sin168:
040B85 D5          0281*       push de
040B86             0282*   ; handle negative angles appropriately
040B86 CD 06 09 04 0283*       call hlu_abs
040B8A F2 93 0B 04 0284*       jp p,@F
040B8E 11 00 00 FF 0285*       ld de,-256*256
040B92 19          0286*       add hl,de
040B93             0287*   @@:
040B93 2E 03       0288*       ld l,3 ; multiply by 3 to get our lookup index
040B95 ED 6C       0289*       mlt hl
040B97 11 4B 0E 04 0290*       ld de,sin_lut_168 ; grab the lut address
040B9B 19          0291*       add hl,de ; bump hl by the index
040B9C ED 27       0292*       ld hl,(hl) ; don't try this on a z80!
040B9E D1          0293*       pop de
040B9F C9          0294*       ret
040BA0             0295*   
040BA0             0296*   ; 16.8 fixed inputs / outputs
040BA0             0297*   ; takes: uh.l as angle in degrees 256
040BA0             0298*   ;        ud.e as radius
040BA0             0299*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
040BA0             0300*   ;        displacements from origin (0,0)
040BA0             0301*   ; destroys: everything except indexes
040BA0             0302*   polar_to_cartesian:
040BA0             0303*   ; back up input parameters
040BA0 22 CF 0B 04 0304*       ld (@angle), hl
040BA4 ED 53 D2 0B 0305*       ld (@radius), de
       04          
040BA9             0306*   ; compute dx = sin(uh.l) * ud.e
040BA9 CD 85 0B 04 0307*       call sin168 ; uh.l = sin(uh.l)
040BAD ED 5B D2 0B 0308*       ld de,(@radius)
       04          
040BB2 CD C1 0A 04 0309*       call smul168 ; uh.l = dx
040BB6 E5          0310*       push hl
040BB7             0311*   ; compute dy = -cos(uh.l) * ud.e
040BB7 2A CF 0B 04 0312*       ld hl,(@angle)
040BBB CD 7E 0B 04 0313*       call cos168 ; uh.l = cos(uh.l)
040BBF ED 5B D2 0B 0314*       ld de,(@radius)
       04          
040BC4 CD C1 0A 04 0315*       call smul168 ; uh.l = dy
040BC8 CD 16 09 04 0316*       call neg_hlu ; invert dy for screen coords convention
040BCC EB          0317*       ex de,hl ; de = dy for output
040BCD C1          0318*       pop bc ; bc = dx for output
040BCE             0319*   ; and out
040BCE C9          0320*       ret
040BCF             0321*   @angle: ds 3
040BD2             0322*   @radius: ds 3
040BD5             0323*   
040BD5             0324*   ; 16.8 fixed inputs / outputs
040BD5             0325*   ; inputs: ub.c as dx, ud.e as dy
040BD5             0326*   ;        displacements from origin (0,0)
040BD5             0327*   ; returns: uh.l as angle in degrees 256
040BD5             0328*   ;        ud.e as radius
040BD5             0329*   ; destroys: everything except indexes
040BD5             0330*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040BD5 ED 43 2E 0C 0331*       ld (dx168),bc ; dx argument for distance168
       04          
040BDA ED 53 34 0C 0332*       ld (dy168),de ; dy argument for distance168
       04          
040BDF             0333*   ; compute radius
040BDF CD 3A 0C 04 0334*       call distance168 ; uh.l = radius
040BE3 E5          0335*       push hl ; save radius
040BE4             0336*   ; compute angle
040BE4 ED 4B 2E 0C 0337*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040BE9 ED 5B 34 0C 0338*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040BEE CD 9A 0C 04 0339*       call atan2_168fast ; uh.l = angle
040BF2             0340*   ; return result
040BF2 D1          0341*       pop de ; de = radius (was hl)
040BF3 C9          0342*       ret
040BF4             0343*   ; end cartesian_to_polar
040BF4             0344*   
040BF4             0345*   ; 16.8 fixed inputs / outputs
040BF4             0346*   ; inputs: ub.c as dx, ud.e as dy
040BF4             0347*   ;        displacements from origin (0,0)
040BF4             0348*   ; returns: uh.l as angle in degrees 256
040BF4             0349*   ;        ud.e as radius
040BF4             0350*   ; destroys: everything except indexes
040BF4             0351*   ; note: uses distance168sm which is more accurate for small deltas
040BF4             0352*   cartesian_to_polar_sm:
040BF4 ED 43 2E 0C 0353*       ld (dx168),bc ; dx argument for distance168
       04          
040BF9 ED 53 34 0C 0354*       ld (dy168),de ; dy argument for distance168
       04          
040BFE             0355*   ; compute radius
040BFE CD 75 0C 04 0356*       call distance168sm ; uh.l = radius
040C02 E5          0357*       push hl ; save radius
040C03             0358*   ; compute angle
040C03 ED 4B 2E 0C 0359*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040C08 ED 5B 34 0C 0360*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040C0D CD 9A 0C 04 0361*       call atan2_168fast ; uh.l = angle
040C11             0362*   ; return result
040C11 D1          0363*       pop de ; de = radius (was hl)
040C12 C9          0364*       ret
040C13             0365*   ; end cartesian_to_polar
040C13             0366*   
040C13             0367*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040C13             0368*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040C13             0369*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040C13             0370*   ;         also populates scratch locations dx168 and dy168
040C13             0371*   ; destroys: a,hl,bc,de
040C13             0372*   dxy168:
040C13             0373*   ; compute dx = x1-x0
040C13 AF          0374*       xor a ; clear carry
040C14 DD E5       0375*       push ix ; move ix to hl via the stack
040C16 E1          0376*       pop hl ; hl = x1
040C17 ED 42       0377*       sbc hl,bc ; hl = dx
040C19 22 2E 0C 04 0378*       ld (dx168),hl ; dx to scratch
040C1D             0379*   ; compute dy = y1-y0
040C1D AF          0380*       xor a ; clear carry
040C1E FD E5       0381*       push iy ; move iy to hl via the stack
040C20 E1          0382*       pop hl ; hl = y1
040C21 ED 52       0383*       sbc hl,de ; hl = dy
040C23 22 34 0C 04 0384*       ld (dy168),hl ; dy to scratch
040C27             0385*   ; populate output registers and return
040C27 EB          0386*       ex de,hl ; ud.e = dy
040C28 ED 4B 2E 0C 0387*       ld bc,(dx168) ; ub.c = dx
       04          
040C2D C9          0388*       ret
040C2E 00 00 00 00 0389*   dx168: blkb 6,0
       00 00       
040C34 00 00 00 00 0390*   dy168: blkb 6,0
       00 00       
040C3A             0391*   
040C3A             0392*   ; compute the euclidian distance between two cartesian coordinates
040C3A             0393*   ; using the formula d = sqrt(dx^2+dy^2)
040C3A             0394*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C3A             0395*   ; output; uh.l is the 16.8 fixed format distance
040C3A             0396*   ;         also populates scratch locations dx168 and dy168
040C3A             0397*   ; destroys: a,hl,bc,de
040C3A             0398*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
040C3A             0399*   ;       thus the result will always be an integer, albeit in 16.8 format
040C3A             0400*   distance168:
040C3A             0401*   ; compute dy^2
040C3A 2A 34 0C 04 0402*       ld hl,(dy168)
040C3E CD 06 09 04 0403*       call hlu_abs
040C42             0404*       ; call hlu_udiv256 ; make integer to avoid overflow
040C42             0405*       SRL_UHL ; make integer to avoid overflow
040C42 3B          0001*M1     dec sp ; 1 cycle
040C43 E5          0002*M1     push hl ; 4 cycles
040C44 33          0003*M1     inc sp ; 1 cycle
040C45 E1          0004*M1     pop hl ; 4 cycles
040C46 23          0005*M1     inc hl ; 1 cycle
040C47 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040C49             0007*M1     ; 13 cycles total
040C49 E5          0406*       push hl
040C4A D1          0407*       pop de
040C4B CD 39 07 04 0408*       call umul24 ; hl = dy^2
040C4F E5          0409*       push hl ; save dy^2
040C50             0410*   ; compute dx^2
040C50 2A 2E 0C 04 0411*       ld hl,(dx168)
040C54 CD 06 09 04 0412*       call hlu_abs
040C58             0413*       ; call hlu_udiv256 ; make integer to avoid overflow
040C58             0414*       SRL_UHL ; make integer to avoid overflow
040C58 3B          0001*M1     dec sp ; 1 cycle
040C59 E5          0002*M1     push hl ; 4 cycles
040C5A 33          0003*M1     inc sp ; 1 cycle
040C5B E1          0004*M1     pop hl ; 4 cycles
040C5C 23          0005*M1     inc hl ; 1 cycle
040C5D 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040C5F             0007*M1     ; 13 cycles total
040C5F E5          0415*       push hl
040C60 D1          0416*       pop de
040C61 CD 39 07 04 0417*       call umul24 ; hl = dx^2
040C65             0418*   ; add dx^2 and dy^2
040C65 D1          0419*       pop de ; de = dy^2 (was hl)
040C66 19          0420*       add hl,de ; hl = dx^2 + dy^2
040C67             0421*   ; compute the square root
040C67 CD 65 0D 04 0422*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C6B EB          0423*       ex de,hl ; hl = distance
040C6C             0424*       hlu_mul256 ; convert back to 16.8 fixed
040C6C 29          0001*M1     add hl,hl ; * 2
040C6D 29          0002*M1     add hl,hl ; * 4
040C6E 29          0003*M1     add hl,hl ; * 8
040C6F 29          0004*M1     add hl,hl ; * 16
040C70 29          0005*M1     add hl,hl ; * 32
040C71 29          0006*M1     add hl,hl ; * 64
040C72 29          0007*M1     add hl,hl ; * 128
040C73 29          0008*M1     add hl,hl ; * 256
040C74 C9          0425*       ret
040C75             0426*   
040C75             0427*   ; compute the euclidian distance between two cartesian coordinates
040C75             0428*   ; using the formula d = sqrt(dx^2+dy^2)
040C75             0429*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C75             0430*   ; output; uh.l is the 16.8 fixed format distance
040C75             0431*   ;         also populates scratch locations dx168 and dy168
040C75             0432*   ; destroys: a,hl,bc,de
040C75             0433*   ; NOTE: sm means 'small' because it doesn't round down the deltas
040C75             0434*   ;       making it more accurate for small deltas,
040C75             0435*   ;       but will overflow if used for screen-sized deltas
040C75             0436*   distance168sm:
040C75             0437*   ; compute dy^2
040C75 2A 34 0C 04 0438*       ld hl,(dy168)
040C79 CD 06 09 04 0439*       call hlu_abs
040C7D E5          0440*       push hl
040C7E D1          0441*       pop de
040C7F CD 39 07 04 0442*       call umul24 ; hl = dy^2
040C83 E5          0443*       push hl ; save dy^2
040C84             0444*   ; compute dx^2
040C84 2A 2E 0C 04 0445*       ld hl,(dx168)
040C88 CD 06 09 04 0446*       call hlu_abs
040C8C E5          0447*       push hl
040C8D D1          0448*       pop de
040C8E CD 39 07 04 0449*       call umul24 ; hl = dx^2
040C92             0450*   ; add dx^2 and dy^2
040C92 D1          0451*       pop de ; de = dy^2 (was hl)
040C93 19          0452*       add hl,de ; hl = dx^2 + dy^2
040C94             0453*   ; compute the square root
040C94 CD 65 0D 04 0454*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C98 EB          0455*       ex de,hl ; hl = distance
040C99 C9          0456*       ret
040C9A             0457*   
040C9A             0458*   ; atan2_(ub.c,ud.e) --> uh.l
040C9A             0459*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040C9A             0460*   ;   whether inputs are integers or fractional doesn't matter
040C9A             0461*   ;   so long as the sign bit of the upper byte is correct
040C9A             0462*   ; output: uh.l is the 16.8 fixed angle in degrees 256
040C9A             0463*   ; angles are COMPASS HEADINGS based on
040C9A             0464*   ; screen coordinate conventions,where the y axis is flipped
040C9A             0465*   ; #E0 224      0       32 #20
040C9A             0466*   ;        -x,-y | +x,-y
040C9A             0467*   ; #C0 192------+------ 64 #40
040C9A             0468*   ;        -x,+y | +x,+y
040C9A             0469*   ; #A0 160   128 #80   96 #60
040C9A             0470*   atan2_168fast:
040C9A             0471*   ; get signs and make everything positive
040C9A             0472*   ; get abs(x) and store its original sign
040C9A C5          0473*       push bc
040C9B E1          0474*       pop hl
040C9C CD 06 09 04 0475*       call hlu_abs ; if x was negative this also sets the sign flag
040CA0 E5          0476*       push hl ; store abs(x)
040CA1 C1          0477*       pop bc ; bc = abs(x)
040CA2 F5          0478*       push af ; store sign of x
040CA3             0479*   ; get abs(y) and store its original sign
040CA3 EB          0480*       ex de,hl ; hl = y
040CA4 CD 06 09 04 0481*       call hlu_abs ; if y was negative this also sets the sign flag
040CA8 EB          0482*       ex de,hl ; de = abs(y)
040CA9 F5          0483*       push af ; store sign of y
040CAA             0484*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
040CAA             0485*   ; this ensures that our lookup value is between 0 and 1 inclusive
040CAA AF          0486*       xor a ; clear the carry flag
040CAB D5          0487*       push de
040CAC E1          0488*       pop hl
040CAD ED 42       0489*       sbc hl,bc
040CAF F5          0490*       push af ; save sign of de - bc
040CB0 F2 B9 0C 04 0491*       jp p,@1 ; bc <= de, so we skip ahead
040CB4             0492*   ; otherwise we swap bc and de
040CB4 C5          0493*       push bc
040CB5 E1          0494*       pop hl
040CB6 EB          0495*       ex de,hl
040CB7 E5          0496*       push hl
040CB8 C1          0497*       pop bc
040CB9             0498*   @1:
040CB9             0499*   ; now we're ready to snag our preliminary result
040CB9 C5          0500*       push bc
040CBA E1          0501*       pop hl
040CBB CD 29 0D 04 0502*       call atan_168fast ; uh.l comes back with prelim result
040CBF             0503*   ; now we adjust uh.l based on sign of de - bc
040CBF F1          0504*       pop af
040CC0 F2 CC 0C 04 0505*       jp p,@2 ; bc <= de,so we skip ahead
040CC4 EB          0506*       ex de,hl
040CC5 21 00 40 00 0507*       ld hl,64*256 ; subtract from 64 (90) degrees
040CC9 AF          0508*       xor a ; clear the carry flag
040CCA ED 52       0509*       sbc hl,de
040CCC             0510*   @2:
040CCC             0511*   ; adjust the result based on quadrant
040CCC             0512*   ; #E0 224      0       32 #20
040CCC             0513*   ;        -x,-y | +x,-y
040CCC             0514*   ; #C0 192------+------ 64 #40
040CCC             0515*   ;        -x,+y | +x,+y
040CCC             0516*   ; #A0 160   128 #80   96 #60
040CCC F1          0517*       pop af ; sign of y
040CCD CA 0A 0D 04 0518*       jp z,@y_zero
040CD1 F2 EA 0C 04 0519*       jp p,@y_pos
040CD5             0520*   ; y neg,check x
040CD5 F1          0521*       pop af ; sign of x
040CD6 CA E4 0C 04 0522*       jp z,@y_neg_x_zero
040CDA F2 E9 0C 04 0523*       jp p,@y_neg_x_pos
040CDE             0524*   ; y neg,x neg
040CDE             0525*   ; angle is 128 to 256 (270 to 360)
040CDE             0526*   ; negating the intermediate does the trick
040CDE CD 16 09 04 0527*       call neg_hlu
040CE2 18 31       0528*       jr @zero_hlu
040CE4             0529*   
040CE4             0530*   @y_neg_x_zero:
040CE4             0531*   ; y neg,x zero
040CE4             0532*   ; angle is 0
040CE4 21 00 00 00 0533*       ld hl,0
040CE8 C9          0534*       ret
040CE9             0535*   @y_neg_x_pos:
040CE9             0536*   ; y neg,x pos
040CE9             0537*   ; angle is 0 to 64 (0 to 90)
040CE9             0538*   ; so we're good
040CE9 C9          0539*       ret
040CEA             0540*   
040CEA             0541*   @y_pos:
040CEA F1          0542*       pop af ; sign of x
040CEB CA FA 0C 04 0543*       jp z,@y_pos_x_zero
040CEF F2 FF 0C 04 0544*       jp p,@y_pos_x_pos
040CF3             0545*   ; y pos,x neg
040CF3             0546*   ; angle is 128 to 192 (180-270)
040CF3             0547*   ; so we add 128 to intermediate
040CF3 11 00 80 00 0548*       ld de,128*256
040CF7 19          0549*       add hl,de
040CF8 18 1B       0550*       jr @zero_hlu
040CFA             0551*   @y_pos_x_zero:
040CFA             0552*   ; y pos,x zero
040CFA             0553*   ; angle is 128 (180)
040CFA 21 00 80 00 0554*       ld hl,128*256
040CFE C9          0555*       ret
040CFF             0556*   @y_pos_x_pos:
040CFF             0557*   ; y pos,x pos
040CFF             0558*   ; angle is 64 to 128 (90 to 180)
040CFF             0559*   ; neg the intermediate and add 180 degrees
040CFF CD 16 09 04 0560*       call neg_hlu
040D03 11 00 80 00 0561*       ld de,128*256
040D07 19          0562*       add hl,de
040D08 18 0B       0563*       jr @zero_hlu
040D0A             0564*   
040D0A             0565*   @y_zero:
040D0A F1          0566*       pop af ; sign of x
040D0B FA 10 0D 04 0567*       jp m,@y_zero_x_neg
040D0F             0568*   ; y zero,x pos
040D0F             0569*   ; angle is 64 (90),nothing to do
040D0F C9          0570*       ret
040D10             0571*   @y_zero_x_neg:
040D10             0572*   ; y zero ,x neg
040D10             0573*   ; angle is 192 (270)
040D10 21 00 C0 00 0574*       ld hl,192*256
040D14 C9          0575*       ret
040D15             0576*   @zero_hlu:
040D15 AF          0577*       xor a
040D16 22 23 0D 04 0578*       ld (@scratch),hl
040D1A 32 25 0D 04 0579*       ld (@scratch+2),a
040D1E 2A 23 0D 04 0580*       ld hl,(@scratch)
040D22 C9          0581*       ret
040D23             0582*   @scratch: ds 6
040D29             0583*   
040D29             0584*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040D29             0585*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
040D29             0586*   ; destroys: a,hl,bc,de
040D29             0587*   ; note: only works for angles from 0 to 32 (45) degrees
040D29             0588*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040D29             0589*   atan_168fast:
040D29             0590*   ; because we use compass headings instead of geometric angles
040D29             0591*   ; we compute dx/dy which is 1/tan(theta) in the maths world
040D29             0592*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
040D29 CD E4 0A 04 0593*       call udiv168 ; ud.e = dx/dy
040D2D EB          0594*       ex de,hl ; uh.l = dx/dy
040D2E             0595*   ; test uh.l for 0
040D2E 19          0596*       add hl,de
040D2F B7          0597*       or a
040D30 ED 52       0598*       sbc hl,de
040D32 28 22       0599*       jr z,@is_zero
040D34             0600*   ; test uh.l for 1
040D34 AF          0601*       xor a ; clear carry
040D35 EB          0602*       ex de,hl
040D36 21 00 01 00 0603*       ld hl,1*256 ; 1 in 16.8 fixed format
040D3A ED 52       0604*       sbc hl,de
040D3C 28 13       0605*       jr z,@is_45
040D3E EB          0606*       ex de,hl
040D3F             0607*   ; no special cases so we move on
040D3F             0608*   ; l contains the fractional portion of tan(uh.l)
040D3F             0609*   ; we multiply it by three to get our lookup table index
040D3F 26 03       0610*       ld h,3
040D41 ED 6C       0611*       mlt hl ; index into lut
040D43 11 00 00 00 0612*       ld de,0 ; clear deu
040D47 54          0613*       ld d,h ; copy hl to de
040D48 5D          0614*       ld e,l ; de contains our index
040D49 21 4E 11 04 0615*       ld hl,atan_lut_168 ; grab the lut address
040D4D 19          0616*       add hl,de ; bump hl by the index
040D4E ED 27       0617*       ld hl,(hl) ; don't try this on a z80!
040D50 C9          0618*       ret ; and out
040D51             0619*   @is_45:
040D51 21 00 20 00 0620*       ld hl,32*256
040D55 C9          0621*       ret
040D56             0622*   ; for the case tan(0)
040D56             0623*   @is_zero:
040D56 21 00 00 00 0624*       ld hl,0*256
040D5A C9          0625*       ret
040D5B             0626*   
040D5B             0627*   ; Expects  ADL mode
040D5B             0628*   ; Inputs:  UH.L
040D5B             0629*   ; Outputs: UH.L is the 16.8 square root
040D5B             0630*   ;          UDE is the integer difference inputHL-DE^2
040D5B             0631*   sqrt168:
040D5B CD 65 0D 04 0632*       call sqrt24
040D5F EB          0633*       ex de,hl
040D60 29          0634*       add hl,hl
040D61 29          0635*       add hl,hl
040D62 29          0636*       add hl,hl
040D63 29          0637*       add hl,hl
040D64 C9          0638*       ret
040D65             0639*   
040D65             0640*   ; credit: xeda112358
040D65             0641*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040D65             0642*   sqrt24:
040D65             0643*   ; Expects ADL mode
040D65             0644*   ; Inputs: HL
040D65             0645*   ; Outputs: DE is the integer square root
040D65             0646*   ;  HL is the difference inputHL-DE^2
040D65             0647*   ;  c flag reset
040D65 01 00 00 00 0648*       ld bc,0 ; clear bcu
040D69 11 00 00 00 0649*       ld de,0 ; clear deu
040D6D AF          0650*       xor a
040D6E 45          0651*       ld b,l
040D6F C5          0652*       push bc
040D70 47          0653*       ld b,a
040D71 6F          0654*       ld l,a
040D72             0655*   ; Iteration 1
040D72 29          0656*       add hl,hl
040D73 CB 11       0657*       rl c
040D75 29          0658*       add hl,hl
040D76 CB 11       0659*       rl c
040D78 91          0660*       sub c
040D79 30 04       0661*       jr nc,$+6
040D7B 1C          0662*       inc e
040D7C 1C          0663*       inc e
040D7D 2F          0664*       cpl
040D7E 4F          0665*       ld c,a
040D7F             0666*   ; Iteration 2
040D7F 29          0667*       add hl,hl
040D80 CB 11       0668*       rl c
040D82 29          0669*       add hl,hl
040D83 CB 11       0670*       rl c
040D85 CB 13       0671*       rl e
040D87 7B          0672*       ld a,e
040D88 91          0673*       sub c
040D89 30 04       0674*       jr nc,$+6
040D8B 1C          0675*       inc e
040D8C 1C          0676*       inc e
040D8D 2F          0677*       cpl
040D8E 4F          0678*       ld c,a
040D8F             0679*   ; Iteration 3
040D8F 29          0680*       add hl,hl
040D90 CB 11       0681*       rl c
040D92 29          0682*       add hl,hl
040D93 CB 11       0683*       rl c
040D95 CB 13       0684*       rl e
040D97 7B          0685*       ld a,e
040D98 91          0686*       sub c
040D99 30 04       0687*       jr nc,$+6
040D9B 1C          0688*       inc e
040D9C 1C          0689*       inc e
040D9D 2F          0690*       cpl
040D9E 4F          0691*       ld c,a
040D9F             0692*   ; Iteration 4
040D9F 29          0693*       add hl,hl
040DA0 CB 11       0694*       rl c
040DA2 29          0695*       add hl,hl
040DA3 CB 11       0696*       rl c
040DA5 CB 13       0697*       rl e
040DA7 7B          0698*       ld a,e
040DA8 91          0699*       sub c
040DA9 30 04       0700*       jr nc,$+6
040DAB 1C          0701*       inc e
040DAC 1C          0702*       inc e
040DAD 2F          0703*       cpl
040DAE 4F          0704*       ld c,a
040DAF             0705*   ; Iteration 5
040DAF 29          0706*       add hl,hl
040DB0 CB 11       0707*       rl c
040DB2 29          0708*       add hl,hl
040DB3 CB 11       0709*       rl c
040DB5 CB 13       0710*       rl e
040DB7 7B          0711*       ld a,e
040DB8 91          0712*       sub c
040DB9 30 04       0713*       jr nc,$+6
040DBB 1C          0714*       inc e
040DBC 1C          0715*       inc e
040DBD 2F          0716*       cpl
040DBE 4F          0717*       ld c,a
040DBF             0718*   ; Iteration 6
040DBF 29          0719*       add hl,hl
040DC0 CB 11       0720*       rl c
040DC2 29          0721*       add hl,hl
040DC3 CB 11       0722*       rl c
040DC5 CB 13       0723*       rl e
040DC7 7B          0724*       ld a,e
040DC8 91          0725*       sub c
040DC9 30 04       0726*       jr nc,$+6
040DCB 1C          0727*       inc e
040DCC 1C          0728*       inc e
040DCD 2F          0729*       cpl
040DCE 4F          0730*       ld c,a
040DCF             0731*   ; Iteration 7
040DCF 29          0732*       add hl,hl
040DD0 CB 11       0733*       rl c
040DD2 29          0734*       add hl,hl
040DD3 CB 11       0735*       rl c
040DD5 CB 10       0736*       rl b
040DD7 EB          0737*       ex de,hl
040DD8 29          0738*       add hl,hl
040DD9 E5          0739*       push hl
040DDA ED 42       0740*       sbc hl,bc
040DDC 30 06       0741*       jr nc,$+8
040DDE 7C          0742*       ld a,h
040DDF 2F          0743*       cpl
040DE0 47          0744*       ld b,a
040DE1 7D          0745*       ld a,l
040DE2 2F          0746*       cpl
040DE3 4F          0747*       ld c,a
040DE4 E1          0748*       pop hl
040DE5 30 02       0749*       jr nc,$+4
040DE7 23          0750*       inc hl
040DE8 23          0751*       inc hl
040DE9 EB          0752*       ex de,hl
040DEA             0753*   ; Iteration 8
040DEA 29          0754*       add hl,hl
040DEB 69          0755*       ld l,c
040DEC 60          0756*       ld h,b
040DED ED 6A       0757*       adc hl,hl
040DEF ED 6A       0758*       adc hl,hl
040DF1 EB          0759*       ex de,hl
040DF2 29          0760*       add hl,hl
040DF3 ED 52       0761*       sbc hl,de
040DF5 19          0762*       add hl,de
040DF6 EB          0763*       ex de,hl
040DF7 30 04       0764*       jr nc,$+6
040DF9 ED 52       0765*       sbc hl,de
040DFB 13          0766*       inc de
040DFC 13          0767*       inc de
040DFD             0768*   ; Iteration 9
040DFD F1          0769*       pop af
040DFE 17          0770*       rla
040DFF ED 6A       0771*       adc hl,hl
040E01 17          0772*       rla
040E02 ED 6A       0773*       adc hl,hl
040E04 EB          0774*       ex de,hl
040E05 29          0775*       add hl,hl
040E06 ED 52       0776*       sbc hl,de
040E08 19          0777*       add hl,de
040E09 EB          0778*       ex de,hl
040E0A 30 04       0779*       jr nc,$+6
040E0C ED 52       0780*       sbc hl,de
040E0E 13          0781*       inc de
040E0F 13          0782*       inc de
040E10             0783*   ; Iteration 10
040E10 17          0784*       rla
040E11 ED 6A       0785*       adc hl,hl
040E13 17          0786*       rla
040E14 ED 6A       0787*       adc hl,hl
040E16 EB          0788*       ex de,hl
040E17 29          0789*       add hl,hl
040E18 ED 52       0790*       sbc hl,de
040E1A 19          0791*       add hl,de
040E1B EB          0792*       ex de,hl
040E1C 30 04       0793*       jr nc,$+6
040E1E ED 52       0794*       sbc hl,de
040E20 13          0795*       inc de
040E21 13          0796*       inc de
040E22             0797*   ; Iteration 11
040E22 17          0798*       rla
040E23 ED 6A       0799*       adc hl,hl
040E25 17          0800*       rla
040E26 ED 6A       0801*       adc hl,hl
040E28 EB          0802*       ex de,hl
040E29 29          0803*       add hl,hl
040E2A ED 52       0804*       sbc hl,de
040E2C 19          0805*       add hl,de
040E2D EB          0806*       ex de,hl
040E2E 30 04       0807*       jr nc,$+6
040E30 ED 52       0808*       sbc hl,de
040E32 13          0809*       inc de
040E33 13          0810*       inc de
040E34             0811*   ; Iteration 12
040E34 17          0812*       rla
040E35 ED 6A       0813*       adc hl,hl
040E37 17          0814*       rla
040E38 ED 6A       0815*       adc hl,hl
040E3A EB          0816*       ex de,hl
040E3B 29          0817*       add hl,hl
040E3C ED 52       0818*       sbc hl,de
040E3E 19          0819*       add hl,de
040E3F EB          0820*       ex de,hl
040E40 30 04       0821*       jr nc,$+6
040E42 ED 52       0822*       sbc hl,de
040E44 13          0823*       inc de
040E45 13          0824*       inc de
040E46 CB 1A       0825*       rr d
040E48 CB 1B       0826*       rr e
040E4A C9          0827*       ret
040E4B             0828*   
040E4B             0829*   sin_lut_168:
040E4B 00 00 00    0830*       dl 0x000000 ; 0.000 00, 0.000
040E4E 06 00 00    0831*       dl 0x000006 ; 1.406 01, 0.025
040E51 0C 00 00    0832*       dl 0x00000C ; 2.813 02, 0.049
040E54 12 00 00    0833*       dl 0x000012 ; 4.219 03, 0.074
040E57 19 00 00    0834*       dl 0x000019 ; 5.625 04, 0.098
040E5A 1F 00 00    0835*       dl 0x00001F ; 7.031 05, 0.122
040E5D 25 00 00    0836*       dl 0x000025 ; 8.438 06, 0.147
040E60 2B 00 00    0837*       dl 0x00002B ; 9.844 07, 0.171
040E63 31 00 00    0838*       dl 0x000031 ; 11.250 08, 0.195
040E66 38 00 00    0839*       dl 0x000038 ; 12.656 09, 0.219
040E69 3E 00 00    0840*       dl 0x00003E ; 14.063 0A, 0.243
040E6C 44 00 00    0841*       dl 0x000044 ; 15.469 0B, 0.267
040E6F 4A 00 00    0842*       dl 0x00004A ; 16.875 0C, 0.290
040E72 50 00 00    0843*       dl 0x000050 ; 18.281 0D, 0.314
040E75 56 00 00    0844*       dl 0x000056 ; 19.688 0E, 0.337
040E78 5C 00 00    0845*       dl 0x00005C ; 21.094 0F, 0.360
040E7B 61 00 00    0846*       dl 0x000061 ; 22.500 10, 0.383
040E7E 67 00 00    0847*       dl 0x000067 ; 23.906 11, 0.405
040E81 6D 00 00    0848*       dl 0x00006D ; 25.313 12, 0.428
040E84 73 00 00    0849*       dl 0x000073 ; 26.719 13, 0.450
040E87 78 00 00    0850*       dl 0x000078 ; 28.125 14, 0.471
040E8A 7E 00 00    0851*       dl 0x00007E ; 29.531 15, 0.493
040E8D 83 00 00    0852*       dl 0x000083 ; 30.938 16, 0.514
040E90 88 00 00    0853*       dl 0x000088 ; 32.344 17, 0.535
040E93 8E 00 00    0854*       dl 0x00008E ; 33.750 18, 0.556
040E96 93 00 00    0855*       dl 0x000093 ; 35.156 19, 0.576
040E99 98 00 00    0856*       dl 0x000098 ; 36.563 1A, 0.596
040E9C 9D 00 00    0857*       dl 0x00009D ; 37.969 1B, 0.615
040E9F A2 00 00    0858*       dl 0x0000A2 ; 39.375 1C, 0.634
040EA2 A7 00 00    0859*       dl 0x0000A7 ; 40.781 1D, 0.653
040EA5 AB 00 00    0860*       dl 0x0000AB ; 42.188 1E, 0.672
040EA8 B0 00 00    0861*       dl 0x0000B0 ; 43.594 1F, 0.690
040EAB B5 00 00    0862*       dl 0x0000B5 ; 45.000 20, 0.707
040EAE B9 00 00    0863*       dl 0x0000B9 ; 46.406 21, 0.724
040EB1 BD 00 00    0864*       dl 0x0000BD ; 47.813 22, 0.741
040EB4 C1 00 00    0865*       dl 0x0000C1 ; 49.219 23, 0.757
040EB7 C5 00 00    0866*       dl 0x0000C5 ; 50.625 24, 0.773
040EBA C9 00 00    0867*       dl 0x0000C9 ; 52.031 25, 0.788
040EBD CD 00 00    0868*       dl 0x0000CD ; 53.438 26, 0.803
040EC0 D1 00 00    0869*       dl 0x0000D1 ; 54.844 27, 0.818
040EC3 D4 00 00    0870*       dl 0x0000D4 ; 56.250 28, 0.831
040EC6 D8 00 00    0871*       dl 0x0000D8 ; 57.656 29, 0.845
040EC9 DB 00 00    0872*       dl 0x0000DB ; 59.063 2A, 0.858
040ECC DE 00 00    0873*       dl 0x0000DE ; 60.469 2B, 0.870
040ECF E1 00 00    0874*       dl 0x0000E1 ; 61.875 2C, 0.882
040ED2 E4 00 00    0875*       dl 0x0000E4 ; 63.281 2D, 0.893
040ED5 E7 00 00    0876*       dl 0x0000E7 ; 64.688 2E, 0.904
040ED8 EA 00 00    0877*       dl 0x0000EA ; 66.094 2F, 0.914
040EDB EC 00 00    0878*       dl 0x0000EC ; 67.500 30, 0.924
040EDE EE 00 00    0879*       dl 0x0000EE ; 68.906 31, 0.933
040EE1 F1 00 00    0880*       dl 0x0000F1 ; 70.313 32, 0.942
040EE4 F3 00 00    0881*       dl 0x0000F3 ; 71.719 33, 0.950
040EE7 F4 00 00    0882*       dl 0x0000F4 ; 73.125 34, 0.957
040EEA F6 00 00    0883*       dl 0x0000F6 ; 74.531 35, 0.964
040EED F8 00 00    0884*       dl 0x0000F8 ; 75.938 36, 0.970
040EF0 F9 00 00    0885*       dl 0x0000F9 ; 77.344 37, 0.976
040EF3 FB 00 00    0886*       dl 0x0000FB ; 78.750 38, 0.981
040EF6 FC 00 00    0887*       dl 0x0000FC ; 80.156 39, 0.985
040EF9 FD 00 00    0888*       dl 0x0000FD ; 81.563 3A, 0.989
040EFC FE 00 00    0889*       dl 0x0000FE ; 82.969 3B, 0.992
040EFF FE 00 00    0890*       dl 0x0000FE ; 84.375 3C, 0.995
040F02 FF 00 00    0891*       dl 0x0000FF ; 85.781 3D, 0.997
040F05 FF 00 00    0892*       dl 0x0000FF ; 87.188 3E, 0.999
040F08 FF 00 00    0893*       dl 0x0000FF ; 88.594 3F, 1.000
040F0B 00 01 00    0894*       dl 0x000100 ; 90.000 40, 1.000
040F0E FF 00 00    0895*       dl 0x0000FF ; 91.406 41, 1.000
040F11 FF 00 00    0896*       dl 0x0000FF ; 92.813 42, 0.999
040F14 FF 00 00    0897*       dl 0x0000FF ; 94.219 43, 0.997
040F17 FE 00 00    0898*       dl 0x0000FE ; 95.625 44, 0.995
040F1A FE 00 00    0899*       dl 0x0000FE ; 97.031 45, 0.992
040F1D FD 00 00    0900*       dl 0x0000FD ; 98.438 46, 0.989
040F20 FC 00 00    0901*       dl 0x0000FC ; 99.844 47, 0.985
040F23 FB 00 00    0902*       dl 0x0000FB ; 101.250 48, 0.981
040F26 F9 00 00    0903*       dl 0x0000F9 ; 102.656 49, 0.976
040F29 F8 00 00    0904*       dl 0x0000F8 ; 104.063 4A, 0.970
040F2C F6 00 00    0905*       dl 0x0000F6 ; 105.469 4B, 0.964
040F2F F4 00 00    0906*       dl 0x0000F4 ; 106.875 4C, 0.957
040F32 F3 00 00    0907*       dl 0x0000F3 ; 108.281 4D, 0.950
040F35 F1 00 00    0908*       dl 0x0000F1 ; 109.688 4E, 0.942
040F38 EE 00 00    0909*       dl 0x0000EE ; 111.094 4F, 0.933
040F3B EC 00 00    0910*       dl 0x0000EC ; 112.500 50, 0.924
040F3E EA 00 00    0911*       dl 0x0000EA ; 113.906 51, 0.914
040F41 E7 00 00    0912*       dl 0x0000E7 ; 115.313 52, 0.904
040F44 E4 00 00    0913*       dl 0x0000E4 ; 116.719 53, 0.893
040F47 E1 00 00    0914*       dl 0x0000E1 ; 118.125 54, 0.882
040F4A DE 00 00    0915*       dl 0x0000DE ; 119.531 55, 0.870
040F4D DB 00 00    0916*       dl 0x0000DB ; 120.938 56, 0.858
040F50 D8 00 00    0917*       dl 0x0000D8 ; 122.344 57, 0.845
040F53 D4 00 00    0918*       dl 0x0000D4 ; 123.750 58, 0.831
040F56 D1 00 00    0919*       dl 0x0000D1 ; 125.156 59, 0.818
040F59 CD 00 00    0920*       dl 0x0000CD ; 126.563 5A, 0.803
040F5C C9 00 00    0921*       dl 0x0000C9 ; 127.969 5B, 0.788
040F5F C5 00 00    0922*       dl 0x0000C5 ; 129.375 5C, 0.773
040F62 C1 00 00    0923*       dl 0x0000C1 ; 130.781 5D, 0.757
040F65 BD 00 00    0924*       dl 0x0000BD ; 132.188 5E, 0.741
040F68 B9 00 00    0925*       dl 0x0000B9 ; 133.594 5F, 0.724
040F6B B5 00 00    0926*       dl 0x0000B5 ; 135.000 60, 0.707
040F6E B0 00 00    0927*       dl 0x0000B0 ; 136.406 61, 0.690
040F71 AB 00 00    0928*       dl 0x0000AB ; 137.813 62, 0.672
040F74 A7 00 00    0929*       dl 0x0000A7 ; 139.219 63, 0.653
040F77 A2 00 00    0930*       dl 0x0000A2 ; 140.625 64, 0.634
040F7A 9D 00 00    0931*       dl 0x00009D ; 142.031 65, 0.615
040F7D 98 00 00    0932*       dl 0x000098 ; 143.438 66, 0.596
040F80 93 00 00    0933*       dl 0x000093 ; 144.844 67, 0.576
040F83 8E 00 00    0934*       dl 0x00008E ; 146.250 68, 0.556
040F86 88 00 00    0935*       dl 0x000088 ; 147.656 69, 0.535
040F89 83 00 00    0936*       dl 0x000083 ; 149.063 6A, 0.514
040F8C 7E 00 00    0937*       dl 0x00007E ; 150.469 6B, 0.493
040F8F 78 00 00    0938*       dl 0x000078 ; 151.875 6C, 0.471
040F92 73 00 00    0939*       dl 0x000073 ; 153.281 6D, 0.450
040F95 6D 00 00    0940*       dl 0x00006D ; 154.688 6E, 0.428
040F98 67 00 00    0941*       dl 0x000067 ; 156.094 6F, 0.405
040F9B 61 00 00    0942*       dl 0x000061 ; 157.500 70, 0.383
040F9E 5C 00 00    0943*       dl 0x00005C ; 158.906 71, 0.360
040FA1 56 00 00    0944*       dl 0x000056 ; 160.313 72, 0.337
040FA4 50 00 00    0945*       dl 0x000050 ; 161.719 73, 0.314
040FA7 4A 00 00    0946*       dl 0x00004A ; 163.125 74, 0.290
040FAA 44 00 00    0947*       dl 0x000044 ; 164.531 75, 0.267
040FAD 3E 00 00    0948*       dl 0x00003E ; 165.938 76, 0.243
040FB0 38 00 00    0949*       dl 0x000038 ; 167.344 77, 0.219
040FB3 31 00 00    0950*       dl 0x000031 ; 168.750 78, 0.195
040FB6 2B 00 00    0951*       dl 0x00002B ; 170.156 79, 0.171
040FB9 25 00 00    0952*       dl 0x000025 ; 171.563 7A, 0.147
040FBC 1F 00 00    0953*       dl 0x00001F ; 172.969 7B, 0.122
040FBF 19 00 00    0954*       dl 0x000019 ; 174.375 7C, 0.098
040FC2 12 00 00    0955*       dl 0x000012 ; 175.781 7D, 0.074
040FC5 0C 00 00    0956*       dl 0x00000C ; 177.188 7E, 0.049
040FC8 06 00 00    0957*       dl 0x000006 ; 178.594 7F, 0.025
040FCB 00 00 00    0958*       dl 0x000000 ; 180.000 80, 0.000
040FCE FA FF FF    0959*       dl 0xFFFFFA ; 181.406 81, -0.025
040FD1 F4 FF FF    0960*       dl 0xFFFFF4 ; 182.813 82, -0.049
040FD4 EE FF FF    0961*       dl 0xFFFFEE ; 184.219 83, -0.074
040FD7 E7 FF FF    0962*       dl 0xFFFFE7 ; 185.625 84, -0.098
040FDA E1 FF FF    0963*       dl 0xFFFFE1 ; 187.031 85, -0.122
040FDD DB FF FF    0964*       dl 0xFFFFDB ; 188.438 86, -0.147
040FE0 D5 FF FF    0965*       dl 0xFFFFD5 ; 189.844 87, -0.171
040FE3 CF FF FF    0966*       dl 0xFFFFCF ; 191.250 88, -0.195
040FE6 C8 FF FF    0967*       dl 0xFFFFC8 ; 192.656 89, -0.219
040FE9 C2 FF FF    0968*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040FEC BC FF FF    0969*       dl 0xFFFFBC ; 195.469 8B, -0.267
040FEF B6 FF FF    0970*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040FF2 B0 FF FF    0971*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040FF5 AA FF FF    0972*       dl 0xFFFFAA ; 199.688 8E, -0.337
040FF8 A4 FF FF    0973*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040FFB 9F FF FF    0974*       dl 0xFFFF9F ; 202.500 90, -0.383
040FFE 99 FF FF    0975*       dl 0xFFFF99 ; 203.906 91, -0.405
041001 93 FF FF    0976*       dl 0xFFFF93 ; 205.313 92, -0.428
041004 8D FF FF    0977*       dl 0xFFFF8D ; 206.719 93, -0.450
041007 88 FF FF    0978*       dl 0xFFFF88 ; 208.125 94, -0.471
04100A 82 FF FF    0979*       dl 0xFFFF82 ; 209.531 95, -0.493
04100D 7D FF FF    0980*       dl 0xFFFF7D ; 210.938 96, -0.514
041010 78 FF FF    0981*       dl 0xFFFF78 ; 212.344 97, -0.535
041013 72 FF FF    0982*       dl 0xFFFF72 ; 213.750 98, -0.556
041016 6D FF FF    0983*       dl 0xFFFF6D ; 215.156 99, -0.576
041019 68 FF FF    0984*       dl 0xFFFF68 ; 216.563 9A, -0.596
04101C 63 FF FF    0985*       dl 0xFFFF63 ; 217.969 9B, -0.615
04101F 5E FF FF    0986*       dl 0xFFFF5E ; 219.375 9C, -0.634
041022 59 FF FF    0987*       dl 0xFFFF59 ; 220.781 9D, -0.653
041025 55 FF FF    0988*       dl 0xFFFF55 ; 222.188 9E, -0.672
041028 50 FF FF    0989*       dl 0xFFFF50 ; 223.594 9F, -0.690
04102B 4B FF FF    0990*       dl 0xFFFF4B ; 225.000 A0, -0.707
04102E 47 FF FF    0991*       dl 0xFFFF47 ; 226.406 A1, -0.724
041031 43 FF FF    0992*       dl 0xFFFF43 ; 227.813 A2, -0.741
041034 3F FF FF    0993*       dl 0xFFFF3F ; 229.219 A3, -0.757
041037 3B FF FF    0994*       dl 0xFFFF3B ; 230.625 A4, -0.773
04103A 37 FF FF    0995*       dl 0xFFFF37 ; 232.031 A5, -0.788
04103D 33 FF FF    0996*       dl 0xFFFF33 ; 233.438 A6, -0.803
041040 2F FF FF    0997*       dl 0xFFFF2F ; 234.844 A7, -0.818
041043 2C FF FF    0998*       dl 0xFFFF2C ; 236.250 A8, -0.831
041046 28 FF FF    0999*       dl 0xFFFF28 ; 237.656 A9, -0.845
041049 25 FF FF    1000*       dl 0xFFFF25 ; 239.063 AA, -0.858
04104C 22 FF FF    1001*       dl 0xFFFF22 ; 240.469 AB, -0.870
04104F 1F FF FF    1002*       dl 0xFFFF1F ; 241.875 AC, -0.882
041052 1C FF FF    1003*       dl 0xFFFF1C ; 243.281 AD, -0.893
041055 19 FF FF    1004*       dl 0xFFFF19 ; 244.688 AE, -0.904
041058 16 FF FF    1005*       dl 0xFFFF16 ; 246.094 AF, -0.914
04105B 14 FF FF    1006*       dl 0xFFFF14 ; 247.500 B0, -0.924
04105E 12 FF FF    1007*       dl 0xFFFF12 ; 248.906 B1, -0.933
041061 0F FF FF    1008*       dl 0xFFFF0F ; 250.313 B2, -0.942
041064 0D FF FF    1009*       dl 0xFFFF0D ; 251.719 B3, -0.950
041067 0C FF FF    1010*       dl 0xFFFF0C ; 253.125 B4, -0.957
04106A 0A FF FF    1011*       dl 0xFFFF0A ; 254.531 B5, -0.964
04106D 08 FF FF    1012*       dl 0xFFFF08 ; 255.938 B6, -0.970
041070 07 FF FF    1013*       dl 0xFFFF07 ; 257.344 B7, -0.976
041073 05 FF FF    1014*       dl 0xFFFF05 ; 258.750 B8, -0.981
041076 04 FF FF    1015*       dl 0xFFFF04 ; 260.156 B9, -0.985
041079 03 FF FF    1016*       dl 0xFFFF03 ; 261.563 BA, -0.989
04107C 02 FF FF    1017*       dl 0xFFFF02 ; 262.969 BB, -0.992
04107F 02 FF FF    1018*       dl 0xFFFF02 ; 264.375 BC, -0.995
041082 01 FF FF    1019*       dl 0xFFFF01 ; 265.781 BD, -0.997
041085 01 FF FF    1020*       dl 0xFFFF01 ; 267.188 BE, -0.999
041088 01 FF FF    1021*       dl 0xFFFF01 ; 268.594 BF, -1.000
04108B 00 FF FF    1022*       dl 0xFFFF00 ; 270.000 C0, -1.000
04108E 01 FF FF    1023*       dl 0xFFFF01 ; 271.406 C1, -1.000
041091 01 FF FF    1024*       dl 0xFFFF01 ; 272.813 C2, -0.999
041094 01 FF FF    1025*       dl 0xFFFF01 ; 274.219 C3, -0.997
041097 02 FF FF    1026*       dl 0xFFFF02 ; 275.625 C4, -0.995
04109A 02 FF FF    1027*       dl 0xFFFF02 ; 277.031 C5, -0.992
04109D 03 FF FF    1028*       dl 0xFFFF03 ; 278.438 C6, -0.989
0410A0 04 FF FF    1029*       dl 0xFFFF04 ; 279.844 C7, -0.985
0410A3 05 FF FF    1030*       dl 0xFFFF05 ; 281.250 C8, -0.981
0410A6 07 FF FF    1031*       dl 0xFFFF07 ; 282.656 C9, -0.976
0410A9 08 FF FF    1032*       dl 0xFFFF08 ; 284.063 CA, -0.970
0410AC 0A FF FF    1033*       dl 0xFFFF0A ; 285.469 CB, -0.964
0410AF 0C FF FF    1034*       dl 0xFFFF0C ; 286.875 CC, -0.957
0410B2 0D FF FF    1035*       dl 0xFFFF0D ; 288.281 CD, -0.950
0410B5 0F FF FF    1036*       dl 0xFFFF0F ; 289.688 CE, -0.942
0410B8 12 FF FF    1037*       dl 0xFFFF12 ; 291.094 CF, -0.933
0410BB 14 FF FF    1038*       dl 0xFFFF14 ; 292.500 D0, -0.924
0410BE 16 FF FF    1039*       dl 0xFFFF16 ; 293.906 D1, -0.914
0410C1 19 FF FF    1040*       dl 0xFFFF19 ; 295.313 D2, -0.904
0410C4 1C FF FF    1041*       dl 0xFFFF1C ; 296.719 D3, -0.893
0410C7 1F FF FF    1042*       dl 0xFFFF1F ; 298.125 D4, -0.882
0410CA 22 FF FF    1043*       dl 0xFFFF22 ; 299.531 D5, -0.870
0410CD 25 FF FF    1044*       dl 0xFFFF25 ; 300.938 D6, -0.858
0410D0 28 FF FF    1045*       dl 0xFFFF28 ; 302.344 D7, -0.845
0410D3 2C FF FF    1046*       dl 0xFFFF2C ; 303.750 D8, -0.831
0410D6 2F FF FF    1047*       dl 0xFFFF2F ; 305.156 D9, -0.818
0410D9 33 FF FF    1048*       dl 0xFFFF33 ; 306.563 DA, -0.803
0410DC 37 FF FF    1049*       dl 0xFFFF37 ; 307.969 DB, -0.788
0410DF 3B FF FF    1050*       dl 0xFFFF3B ; 309.375 DC, -0.773
0410E2 3F FF FF    1051*       dl 0xFFFF3F ; 310.781 DD, -0.757
0410E5 43 FF FF    1052*       dl 0xFFFF43 ; 312.188 DE, -0.741
0410E8 47 FF FF    1053*       dl 0xFFFF47 ; 313.594 DF, -0.724
0410EB 4B FF FF    1054*       dl 0xFFFF4B ; 315.000 E0, -0.707
0410EE 50 FF FF    1055*       dl 0xFFFF50 ; 316.406 E1, -0.690
0410F1 55 FF FF    1056*       dl 0xFFFF55 ; 317.813 E2, -0.672
0410F4 59 FF FF    1057*       dl 0xFFFF59 ; 319.219 E3, -0.653
0410F7 5E FF FF    1058*       dl 0xFFFF5E ; 320.625 E4, -0.634
0410FA 63 FF FF    1059*       dl 0xFFFF63 ; 322.031 E5, -0.615
0410FD 68 FF FF    1060*       dl 0xFFFF68 ; 323.438 E6, -0.596
041100 6D FF FF    1061*       dl 0xFFFF6D ; 324.844 E7, -0.576
041103 72 FF FF    1062*       dl 0xFFFF72 ; 326.250 E8, -0.556
041106 78 FF FF    1063*       dl 0xFFFF78 ; 327.656 E9, -0.535
041109 7D FF FF    1064*       dl 0xFFFF7D ; 329.063 EA, -0.514
04110C 82 FF FF    1065*       dl 0xFFFF82 ; 330.469 EB, -0.493
04110F 88 FF FF    1066*       dl 0xFFFF88 ; 331.875 EC, -0.471
041112 8D FF FF    1067*       dl 0xFFFF8D ; 333.281 ED, -0.450
041115 93 FF FF    1068*       dl 0xFFFF93 ; 334.688 EE, -0.428
041118 99 FF FF    1069*       dl 0xFFFF99 ; 336.094 EF, -0.405
04111B 9F FF FF    1070*       dl 0xFFFF9F ; 337.500 F0, -0.383
04111E A4 FF FF    1071*       dl 0xFFFFA4 ; 338.906 F1, -0.360
041121 AA FF FF    1072*       dl 0xFFFFAA ; 340.313 F2, -0.337
041124 B0 FF FF    1073*       dl 0xFFFFB0 ; 341.719 F3, -0.314
041127 B6 FF FF    1074*       dl 0xFFFFB6 ; 343.125 F4, -0.290
04112A BC FF FF    1075*       dl 0xFFFFBC ; 344.531 F5, -0.267
04112D C2 FF FF    1076*       dl 0xFFFFC2 ; 345.938 F6, -0.243
041130 C8 FF FF    1077*       dl 0xFFFFC8 ; 347.344 F7, -0.219
041133 CF FF FF    1078*       dl 0xFFFFCF ; 348.750 F8, -0.195
041136 D5 FF FF    1079*       dl 0xFFFFD5 ; 350.156 F9, -0.171
041139 DB FF FF    1080*       dl 0xFFFFDB ; 351.563 FA, -0.147
04113C E1 FF FF    1081*       dl 0xFFFFE1 ; 352.969 FB, -0.122
04113F E7 FF FF    1082*       dl 0xFFFFE7 ; 354.375 FC, -0.098
041142 EE FF FF    1083*       dl 0xFFFFEE ; 355.781 FD, -0.074
041145 F4 FF FF    1084*       dl 0xFFFFF4 ; 357.188 FE, -0.049
041148 FA FF FF    1085*       dl 0xFFFFFA ; 358.594 FF, -0.025
04114B 00 00 00    1086*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
04114E             1087*   
04114E             1088*   atan_lut_168:
04114E 00 00 00    1089*       dl 0x000000 ; 000000, 0.000
041151 28 00 00    1090*       dl 0x000028 ; 000001, 0.224
041154 51 00 00    1091*       dl 0x000051 ; 000002, 0.448
041157 7A 00 00    1092*       dl 0x00007A ; 000003, 0.671
04115A A2 00 00    1093*       dl 0x0000A2 ; 000004, 0.895
04115D CB 00 00    1094*       dl 0x0000CB ; 000005, 1.119
041160 F4 00 00    1095*       dl 0x0000F4 ; 000006, 1.343
041163 1D 01 00    1096*       dl 0x00011D ; 000007, 1.566
041166 45 01 00    1097*       dl 0x000145 ; 000008, 1.790
041169 6E 01 00    1098*       dl 0x00016E ; 000009, 2.013
04116C 97 01 00    1099*       dl 0x000197 ; 00000A, 2.237
04116F BF 01 00    1100*       dl 0x0001BF ; 00000B, 2.460
041172 E8 01 00    1101*       dl 0x0001E8 ; 00000C, 2.684
041175 11 02 00    1102*       dl 0x000211 ; 00000D, 2.907
041178 39 02 00    1103*       dl 0x000239 ; 00000E, 3.130
04117B 62 02 00    1104*       dl 0x000262 ; 00000F, 3.353
04117E 8B 02 00    1105*       dl 0x00028B ; 000010, 3.576
041181 B3 02 00    1106*       dl 0x0002B3 ; 000011, 3.799
041184 DC 02 00    1107*       dl 0x0002DC ; 000012, 4.022
041187 04 03 00    1108*       dl 0x000304 ; 000013, 4.245
04118A 2D 03 00    1109*       dl 0x00032D ; 000014, 4.467
04118D 55 03 00    1110*       dl 0x000355 ; 000015, 4.690
041190 7E 03 00    1111*       dl 0x00037E ; 000016, 4.912
041193 A6 03 00    1112*       dl 0x0003A6 ; 000017, 5.134
041196 CE 03 00    1113*       dl 0x0003CE ; 000018, 5.356
041199 F7 03 00    1114*       dl 0x0003F7 ; 000019, 5.578
04119C 1F 04 00    1115*       dl 0x00041F ; 00001A, 5.799
04119F 48 04 00    1116*       dl 0x000448 ; 00001B, 6.021
0411A2 70 04 00    1117*       dl 0x000470 ; 00001C, 6.242
0411A5 98 04 00    1118*       dl 0x000498 ; 00001D, 6.463
0411A8 C0 04 00    1119*       dl 0x0004C0 ; 00001E, 6.684
0411AB E8 04 00    1120*       dl 0x0004E8 ; 00001F, 6.905
0411AE 11 05 00    1121*       dl 0x000511 ; 000020, 7.125
0411B1 39 05 00    1122*       dl 0x000539 ; 000021, 7.345
0411B4 61 05 00    1123*       dl 0x000561 ; 000022, 7.565
0411B7 89 05 00    1124*       dl 0x000589 ; 000023, 7.785
0411BA B1 05 00    1125*       dl 0x0005B1 ; 000024, 8.005
0411BD D9 05 00    1126*       dl 0x0005D9 ; 000025, 8.224
0411C0 01 06 00    1127*       dl 0x000601 ; 000026, 8.443
0411C3 28 06 00    1128*       dl 0x000628 ; 000027, 8.662
0411C6 50 06 00    1129*       dl 0x000650 ; 000028, 8.881
0411C9 78 06 00    1130*       dl 0x000678 ; 000029, 9.099
0411CC A0 06 00    1131*       dl 0x0006A0 ; 00002A, 9.317
0411CF C7 06 00    1132*       dl 0x0006C7 ; 00002B, 9.535
0411D2 EF 06 00    1133*       dl 0x0006EF ; 00002C, 9.752
0411D5 16 07 00    1134*       dl 0x000716 ; 00002D, 9.970
0411D8 3E 07 00    1135*       dl 0x00073E ; 00002E, 10.187
0411DB 65 07 00    1136*       dl 0x000765 ; 00002F, 10.403
0411DE 8D 07 00    1137*       dl 0x00078D ; 000030, 10.620
0411E1 B4 07 00    1138*       dl 0x0007B4 ; 000031, 10.836
0411E4 DB 07 00    1139*       dl 0x0007DB ; 000032, 11.051
0411E7 03 08 00    1140*       dl 0x000803 ; 000033, 11.267
0411EA 2A 08 00    1141*       dl 0x00082A ; 000034, 11.482
0411ED 51 08 00    1142*       dl 0x000851 ; 000035, 11.697
0411F0 78 08 00    1143*       dl 0x000878 ; 000036, 11.911
0411F3 9F 08 00    1144*       dl 0x00089F ; 000037, 12.125
0411F6 C6 08 00    1145*       dl 0x0008C6 ; 000038, 12.339
0411F9 ED 08 00    1146*       dl 0x0008ED ; 000039, 12.553
0411FC 13 09 00    1147*       dl 0x000913 ; 00003A, 12.766
0411FF 3A 09 00    1148*       dl 0x00093A ; 00003B, 12.978
041202 61 09 00    1149*       dl 0x000961 ; 00003C, 13.191
041205 87 09 00    1150*       dl 0x000987 ; 00003D, 13.403
041208 AE 09 00    1151*       dl 0x0009AE ; 00003E, 13.614
04120B D4 09 00    1152*       dl 0x0009D4 ; 00003F, 13.825
04120E FB 09 00    1153*       dl 0x0009FB ; 000040, 14.036
041211 21 0A 00    1154*       dl 0x000A21 ; 000041, 14.247
041214 47 0A 00    1155*       dl 0x000A47 ; 000042, 14.457
041217 6D 0A 00    1156*       dl 0x000A6D ; 000043, 14.666
04121A 94 0A 00    1157*       dl 0x000A94 ; 000044, 14.876
04121D BA 0A 00    1158*       dl 0x000ABA ; 000045, 15.085
041220 E0 0A 00    1159*       dl 0x000AE0 ; 000046, 15.293
041223 05 0B 00    1160*       dl 0x000B05 ; 000047, 15.501
041226 2B 0B 00    1161*       dl 0x000B2B ; 000048, 15.709
041229 51 0B 00    1162*       dl 0x000B51 ; 000049, 15.916
04122C 77 0B 00    1163*       dl 0x000B77 ; 00004A, 16.123
04122F 9C 0B 00    1164*       dl 0x000B9C ; 00004B, 16.329
041232 C2 0B 00    1165*       dl 0x000BC2 ; 00004C, 16.535
041235 E7 0B 00    1166*       dl 0x000BE7 ; 00004D, 16.740
041238 0C 0C 00    1167*       dl 0x000C0C ; 00004E, 16.945
04123B 32 0C 00    1168*       dl 0x000C32 ; 00004F, 17.150
04123E 57 0C 00    1169*       dl 0x000C57 ; 000050, 17.354
041241 7C 0C 00    1170*       dl 0x000C7C ; 000051, 17.558
041244 A1 0C 00    1171*       dl 0x000CA1 ; 000052, 17.761
041247 C6 0C 00    1172*       dl 0x000CC6 ; 000053, 17.964
04124A EB 0C 00    1173*       dl 0x000CEB ; 000054, 18.166
04124D 0F 0D 00    1174*       dl 0x000D0F ; 000055, 18.368
041250 34 0D 00    1175*       dl 0x000D34 ; 000056, 18.569
041253 58 0D 00    1176*       dl 0x000D58 ; 000057, 18.770
041256 7D 0D 00    1177*       dl 0x000D7D ; 000058, 18.970
041259 A1 0D 00    1178*       dl 0x000DA1 ; 000059, 19.170
04125C C6 0D 00    1179*       dl 0x000DC6 ; 00005A, 19.370
04125F EA 0D 00    1180*       dl 0x000DEA ; 00005B, 19.569
041262 0E 0E 00    1181*       dl 0x000E0E ; 00005C, 19.767
041265 32 0E 00    1182*       dl 0x000E32 ; 00005D, 19.965
041268 56 0E 00    1183*       dl 0x000E56 ; 00005E, 20.163
04126B 7A 0E 00    1184*       dl 0x000E7A ; 00005F, 20.360
04126E 9E 0E 00    1185*       dl 0x000E9E ; 000060, 20.556
041271 C1 0E 00    1186*       dl 0x000EC1 ; 000061, 20.752
041274 E5 0E 00    1187*       dl 0x000EE5 ; 000062, 20.947
041277 08 0F 00    1188*       dl 0x000F08 ; 000063, 21.142
04127A 2C 0F 00    1189*       dl 0x000F2C ; 000064, 21.337
04127D 4F 0F 00    1190*       dl 0x000F4F ; 000065, 21.531
041280 72 0F 00    1191*       dl 0x000F72 ; 000066, 21.724
041283 95 0F 00    1192*       dl 0x000F95 ; 000067, 21.917
041286 B8 0F 00    1193*       dl 0x000FB8 ; 000068, 22.109
041289 DB 0F 00    1194*       dl 0x000FDB ; 000069, 22.301
04128C FE 0F 00    1195*       dl 0x000FFE ; 00006A, 22.493
04128F 21 10 00    1196*       dl 0x001021 ; 00006B, 22.683
041292 44 10 00    1197*       dl 0x001044 ; 00006C, 22.874
041295 66 10 00    1198*       dl 0x001066 ; 00006D, 23.063
041298 89 10 00    1199*       dl 0x001089 ; 00006E, 23.253
04129B AB 10 00    1200*       dl 0x0010AB ; 00006F, 23.441
04129E CD 10 00    1201*       dl 0x0010CD ; 000070, 23.629
0412A1 EF 10 00    1202*       dl 0x0010EF ; 000071, 23.817
0412A4 11 11 00    1203*       dl 0x001111 ; 000072, 24.004
0412A7 33 11 00    1204*       dl 0x001133 ; 000073, 24.191
0412AA 55 11 00    1205*       dl 0x001155 ; 000074, 24.376
0412AD 77 11 00    1206*       dl 0x001177 ; 000075, 24.562
0412B0 99 11 00    1207*       dl 0x001199 ; 000076, 24.747
0412B3 BA 11 00    1208*       dl 0x0011BA ; 000077, 24.931
0412B6 DC 11 00    1209*       dl 0x0011DC ; 000078, 25.115
0412B9 FD 11 00    1210*       dl 0x0011FD ; 000079, 25.298
0412BC 1E 12 00    1211*       dl 0x00121E ; 00007A, 25.481
0412BF 3F 12 00    1212*       dl 0x00123F ; 00007B, 25.663
0412C2 60 12 00    1213*       dl 0x001260 ; 00007C, 25.844
0412C5 81 12 00    1214*       dl 0x001281 ; 00007D, 26.025
0412C8 A2 12 00    1215*       dl 0x0012A2 ; 00007E, 26.206
0412CB C3 12 00    1216*       dl 0x0012C3 ; 00007F, 26.386
0412CE E4 12 00    1217*       dl 0x0012E4 ; 000080, 26.565
0412D1 04 13 00    1218*       dl 0x001304 ; 000081, 26.744
0412D4 25 13 00    1219*       dl 0x001325 ; 000082, 26.922
0412D7 45 13 00    1220*       dl 0x001345 ; 000083, 27.100
0412DA 65 13 00    1221*       dl 0x001365 ; 000084, 27.277
0412DD 85 13 00    1222*       dl 0x001385 ; 000085, 27.453
0412E0 A5 13 00    1223*       dl 0x0013A5 ; 000086, 27.629
0412E3 C5 13 00    1224*       dl 0x0013C5 ; 000087, 27.805
0412E6 E5 13 00    1225*       dl 0x0013E5 ; 000088, 27.979
0412E9 05 14 00    1226*       dl 0x001405 ; 000089, 28.154
0412EC 24 14 00    1227*       dl 0x001424 ; 00008A, 28.327
0412EF 44 14 00    1228*       dl 0x001444 ; 00008B, 28.501
0412F2 63 14 00    1229*       dl 0x001463 ; 00008C, 28.673
0412F5 83 14 00    1230*       dl 0x001483 ; 00008D, 28.845
0412F8 A2 14 00    1231*       dl 0x0014A2 ; 00008E, 29.017
0412FB C1 14 00    1232*       dl 0x0014C1 ; 00008F, 29.187
0412FE E0 14 00    1233*       dl 0x0014E0 ; 000090, 29.358
041301 FF 14 00    1234*       dl 0x0014FF ; 000091, 29.527
041304 1E 15 00    1235*       dl 0x00151E ; 000092, 29.697
041307 3C 15 00    1236*       dl 0x00153C ; 000093, 29.865
04130A 5B 15 00    1237*       dl 0x00155B ; 000094, 30.033
04130D 79 15 00    1238*       dl 0x001579 ; 000095, 30.201
041310 98 15 00    1239*       dl 0x001598 ; 000096, 30.368
041313 B6 15 00    1240*       dl 0x0015B6 ; 000097, 30.534
041316 D4 15 00    1241*       dl 0x0015D4 ; 000098, 30.700
041319 F2 15 00    1242*       dl 0x0015F2 ; 000099, 30.865
04131C 10 16 00    1243*       dl 0x001610 ; 00009A, 31.030
04131F 2E 16 00    1244*       dl 0x00162E ; 00009B, 31.194
041322 4C 16 00    1245*       dl 0x00164C ; 00009C, 31.357
041325 6A 16 00    1246*       dl 0x00166A ; 00009D, 31.520
041328 87 16 00    1247*       dl 0x001687 ; 00009E, 31.682
04132B A5 16 00    1248*       dl 0x0016A5 ; 00009F, 31.844
04132E C2 16 00    1249*       dl 0x0016C2 ; 0000A0, 32.005
041331 DF 16 00    1250*       dl 0x0016DF ; 0000A1, 32.166
041334 FC 16 00    1251*       dl 0x0016FC ; 0000A2, 32.326
041337 19 17 00    1252*       dl 0x001719 ; 0000A3, 32.486
04133A 36 17 00    1253*       dl 0x001736 ; 0000A4, 32.645
04133D 53 17 00    1254*       dl 0x001753 ; 0000A5, 32.803
041340 70 17 00    1255*       dl 0x001770 ; 0000A6, 32.961
041343 8C 17 00    1256*       dl 0x00178C ; 0000A7, 33.118
041346 A9 17 00    1257*       dl 0x0017A9 ; 0000A8, 33.275
041349 C5 17 00    1258*       dl 0x0017C5 ; 0000A9, 33.431
04134C E2 17 00    1259*       dl 0x0017E2 ; 0000AA, 33.587
04134F FE 17 00    1260*       dl 0x0017FE ; 0000AB, 33.742
041352 1A 18 00    1261*       dl 0x00181A ; 0000AC, 33.896
041355 36 18 00    1262*       dl 0x001836 ; 0000AD, 34.050
041358 52 18 00    1263*       dl 0x001852 ; 0000AE, 34.203
04135B 6E 18 00    1264*       dl 0x00186E ; 0000AF, 34.356
04135E 8A 18 00    1265*       dl 0x00188A ; 0000B0, 34.509
041361 A5 18 00    1266*       dl 0x0018A5 ; 0000B1, 34.660
041364 C1 18 00    1267*       dl 0x0018C1 ; 0000B2, 34.811
041367 DC 18 00    1268*       dl 0x0018DC ; 0000B3, 34.962
04136A F7 18 00    1269*       dl 0x0018F7 ; 0000B4, 35.112
04136D 13 19 00    1270*       dl 0x001913 ; 0000B5, 35.262
041370 2E 19 00    1271*       dl 0x00192E ; 0000B6, 35.410
041373 49 19 00    1272*       dl 0x001949 ; 0000B7, 35.559
041376 64 19 00    1273*       dl 0x001964 ; 0000B8, 35.707
041379 7F 19 00    1274*       dl 0x00197F ; 0000B9, 35.854
04137C 99 19 00    1275*       dl 0x001999 ; 0000BA, 36.001
04137F B4 19 00    1276*       dl 0x0019B4 ; 0000BB, 36.147
041382 CE 19 00    1277*       dl 0x0019CE ; 0000BC, 36.293
041385 E9 19 00    1278*       dl 0x0019E9 ; 0000BD, 36.438
041388 03 1A 00    1279*       dl 0x001A03 ; 0000BE, 36.582
04138B 1D 1A 00    1280*       dl 0x001A1D ; 0000BF, 36.726
04138E 37 1A 00    1281*       dl 0x001A37 ; 0000C0, 36.870
041391 51 1A 00    1282*       dl 0x001A51 ; 0000C1, 37.013
041394 6B 1A 00    1283*       dl 0x001A6B ; 0000C2, 37.155
041397 85 1A 00    1284*       dl 0x001A85 ; 0000C3, 37.297
04139A 9F 1A 00    1285*       dl 0x001A9F ; 0000C4, 37.439
04139D B9 1A 00    1286*       dl 0x001AB9 ; 0000C5, 37.579
0413A0 D2 1A 00    1287*       dl 0x001AD2 ; 0000C6, 37.720
0413A3 EC 1A 00    1288*       dl 0x001AEC ; 0000C7, 37.859
0413A6 05 1B 00    1289*       dl 0x001B05 ; 0000C8, 37.999
0413A9 1E 1B 00    1290*       dl 0x001B1E ; 0000C9, 38.137
0413AC 37 1B 00    1291*       dl 0x001B37 ; 0000CA, 38.276
0413AF 50 1B 00    1292*       dl 0x001B50 ; 0000CB, 38.413
0413B2 69 1B 00    1293*       dl 0x001B69 ; 0000CC, 38.550
0413B5 82 1B 00    1294*       dl 0x001B82 ; 0000CD, 38.687
0413B8 9B 1B 00    1295*       dl 0x001B9B ; 0000CE, 38.823
0413BB B4 1B 00    1296*       dl 0x001BB4 ; 0000CF, 38.959
0413BE CC 1B 00    1297*       dl 0x001BCC ; 0000D0, 39.094
0413C1 E5 1B 00    1298*       dl 0x001BE5 ; 0000D1, 39.228
0413C4 FD 1B 00    1299*       dl 0x001BFD ; 0000D2, 39.362
0413C7 16 1C 00    1300*       dl 0x001C16 ; 0000D3, 39.496
0413CA 2E 1C 00    1301*       dl 0x001C2E ; 0000D4, 39.629
0413CD 46 1C 00    1302*       dl 0x001C46 ; 0000D5, 39.762
0413D0 5E 1C 00    1303*       dl 0x001C5E ; 0000D6, 39.894
0413D3 76 1C 00    1304*       dl 0x001C76 ; 0000D7, 40.025
0413D6 8E 1C 00    1305*       dl 0x001C8E ; 0000D8, 40.156
0413D9 A5 1C 00    1306*       dl 0x001CA5 ; 0000D9, 40.286
0413DC BD 1C 00    1307*       dl 0x001CBD ; 0000DA, 40.416
0413DF D5 1C 00    1308*       dl 0x001CD5 ; 0000DB, 40.546
0413E2 EC 1C 00    1309*       dl 0x001CEC ; 0000DC, 40.675
0413E5 04 1D 00    1310*       dl 0x001D04 ; 0000DD, 40.803
0413E8 1B 1D 00    1311*       dl 0x001D1B ; 0000DE, 40.931
0413EB 32 1D 00    1312*       dl 0x001D32 ; 0000DF, 41.059
0413EE 49 1D 00    1313*       dl 0x001D49 ; 0000E0, 41.186
0413F1 60 1D 00    1314*       dl 0x001D60 ; 0000E1, 41.312
0413F4 77 1D 00    1315*       dl 0x001D77 ; 0000E2, 41.438
0413F7 8E 1D 00    1316*       dl 0x001D8E ; 0000E3, 41.564
0413FA A5 1D 00    1317*       dl 0x001DA5 ; 0000E4, 41.689
0413FD BB 1D 00    1318*       dl 0x001DBB ; 0000E5, 41.814
041400 D2 1D 00    1319*       dl 0x001DD2 ; 0000E6, 41.938
041403 E9 1D 00    1320*       dl 0x001DE9 ; 0000E7, 42.061
041406 FF 1D 00    1321*       dl 0x001DFF ; 0000E8, 42.184
041409 15 1E 00    1322*       dl 0x001E15 ; 0000E9, 42.307
04140C 2C 1E 00    1323*       dl 0x001E2C ; 0000EA, 42.429
04140F 42 1E 00    1324*       dl 0x001E42 ; 0000EB, 42.551
041412 58 1E 00    1325*       dl 0x001E58 ; 0000EC, 42.672
041415 6E 1E 00    1326*       dl 0x001E6E ; 0000ED, 42.793
041418 84 1E 00    1327*       dl 0x001E84 ; 0000EE, 42.913
04141B 99 1E 00    1328*       dl 0x001E99 ; 0000EF, 43.033
04141E AF 1E 00    1329*       dl 0x001EAF ; 0000F0, 43.152
041421 C5 1E 00    1330*       dl 0x001EC5 ; 0000F1, 43.271
041424 DA 1E 00    1331*       dl 0x001EDA ; 0000F2, 43.390
041427 F0 1E 00    1332*       dl 0x001EF0 ; 0000F3, 43.508
04142A 05 1F 00    1333*       dl 0x001F05 ; 0000F4, 43.625
04142D 1B 1F 00    1334*       dl 0x001F1B ; 0000F5, 43.742
041430 30 1F 00    1335*       dl 0x001F30 ; 0000F6, 43.859
041433 45 1F 00    1336*       dl 0x001F45 ; 0000F7, 43.975
041436 5A 1F 00    1337*       dl 0x001F5A ; 0000F8, 44.091
041439 6F 1F 00    1338*       dl 0x001F6F ; 0000F9, 44.206
04143C 84 1F 00    1339*       dl 0x001F84 ; 0000FA, 44.321
04143F 99 1F 00    1340*       dl 0x001F99 ; 0000FB, 44.435
041442 AD 1F 00    1341*       dl 0x001FAD ; 0000FC, 44.549
041445 C2 1F 00    1342*       dl 0x001FC2 ; 0000FD, 44.662
041448 D7 1F 00    1343*       dl 0x001FD7 ; 0000FE, 44.775
04144B EB 1F 00    1344*       dl 0x001FEB ; 0000FF, 44.888
04144E 00 20 00    1345*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
041451             0036        include "fonts.inc"
041451 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041500             0002*   
041500             0003*   fonts_load:
041500 DD 21 00 2B 0004*       ld ix,font_list ; pointer to font list lookup
       04          
041505 06 12       0005*       ld b,num_fonts ; loop counter
041507             0006*   
041507             0007*   @load_loop:
041507 C5          0008*       push bc ; save loop counter
041508             0009*   
041508             0010*   ; load font into a buffer
041508 DD 27 06    0011*       ld hl,(ix+font_list_bufferId)
04150B DD 31 09    0012*       ld iy,(ix+font_list_filename)
04150E CD 78 1C 04 0013*       call vdu_load_buffer_from_file
041512             0014*   
041512             0015*   ; create font from buffer
041512 DD 27 06    0016*       ld hl,(ix+font_list_bufferId)
041515 DD 5E 00    0017*       ld e,(ix+font_list_width)
041518 DD 56 03    0018*       ld d,(ix+font_list_height)
04151B 3E 00       0019*       ld a,0 ; flags
04151D CD 1A 1E 04 0020*       call vdu_font_create
041521             0021*   
041521             0022*   ; select font
041521 DD 27 06    0023*       ld hl,(ix+font_list_bufferId)
041524 3E 01       0024*       ld a,1 ; flags
041526 CD 00 1E 04 0025*       call vdu_font_select
04152A             0026*   
04152A             0027*   ; ; debug print filename
04152A             0028*   ;     call printNewLine
04152A             0029*   ;     ld hl,(ix+font_list_filename)
04152A             0030*   ;     call printString
04152A             0031*   
04152A             0032*   ; advance font_list pointer to next record
04152A ED 32 0C    0033*       lea ix,ix+font_list_record_size
04152D             0034*   
04152D             0035*   ; restore loop counter
04152D C1          0036*       pop bc
04152E 10 D7       0037*       djnz @load_loop
041530             0038*   
041530             0039*   ; all done
041530 C9          0040*       ret
041531             0037        include "images.inc"
041531 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041600             0002*   
041600             0003*   image_type: equ 0
041600             0004*   image_width: equ image_type+3
041600             0005*   image_height: equ image_width+3
041600             0006*   image_filesize: equ image_height+3
041600             0007*   image_filename: equ image_filesize+3
041600             0008*   image_bufferId: equ image_filename+3
041600             0009*   image_record_size: equ image_bufferId+3
041600             0010*   
041600 00 00 00    0011*   cur_image_list: dl 0
041603 00 00 00    0012*   cur_filename: dl 0
041606 00 00 00    0013*   cur_buffer_id: dl 0
041609             0014*   
041609             0015*   img_load_init:
041609             0016*   ; initialize logo's position parameters
041609 21 00 00 00 0017*       ld hl,0
04160D 22 C2 16 04 0018*       ld (logo_xvel),hl
041611 22 C5 16 04 0019*       ld (logo_xpos),hl
041615             0020*   ; begin 16.8 maths to determine logo's y position and velocity
041615 21 00 E0 00 0021*       ld hl,224*256
041619 22 CB 16 04 0022*       ld (logo_ypos),hl
04161D EB          0023*       ex de,hl
04161E 21 00 28 FF 0024*       ld hl,-240+24*256
041622             0025*       ; ld de,-256*[sprites_num_images+tiles_dg_num_images+ui_num_images]
041622 11 00 28 01 0026*       ld de,sprites_num_images+tiles_dg_num_images+ui_num_images*256
041626 CD 25 0B 04 0027*       call sdiv168 ; ud.e = distance / num images = y velocity
04162A ED 53 C8 16 0028*       ld (logo_yvel),de
       04          
04162F             0029*   ; all done
04162F C9          0030*       ret
041630             0031*   
041630             0032*   ; inputs: bc is the number of images to load, cur_image_list set
041630             0033*   img_load_main:
041630             0034*   ; back up loop counter
041630 C5          0035*       push bc
041631             0036*   
041631             0037*   ; load the next image
041631 CD 6C 16 04 0038*       call load_next_image
041635             0039*   
041635             0040*   ; plot the background
041635 CD 4B 1A 04 0041*       call vdu_cls
041639 21 1E 00 00 0042*       ld hl,BUF_SPLASH_BG
04163D CD 38 1B 04 0043*       call vdu_buff_select
041641 01 00 00 00 0044*       ld bc,0
041645 11 00 00 00 0045*       ld de,0
041649 CD 20 1F 04 0046*       call vdu_plot_bmp
04164D             0047*   
04164D             0048*   ; ; draw the most recently loaded image
04164D             0049*   ; 	ld hl,(cur_buffer_id)
04164D             0050*   ; 	call vdu_buff_select
04164D             0051*   ; 	ld bc,0
04164D             0052*   ; 	ld de,0
04164D             0053*   ; 	call vdu_plot_bmp
04164D             0054*   
04164D             0055*   ; move logo
04164D CD 9D 16 04 0056*       call move_logo
041651             0057*   
041651             0058*   ; print current filename
041651 2A 03 16 04 0059*       ld hl,(cur_filename)
041655 CD 07 01 04 0060*       call printString
041659             0061*   
041659             0062*   ; flip the framebuffer
041659 CD 50 1A 04 0063*       call vdu_flip
04165D             0064*   
04165D             0065*   ; decrement loop counter
04165D C1          0066*       pop bc
04165E 0B          0067*       dec bc
04165F 79          0068*       ld a,c
041660 B7          0069*       or a
041661 C2 30 16 04 0070*       jp nz,img_load_main
041665 78          0071*       ld a,b
041666 B7          0072*       or a
041667 C2 30 16 04 0073*       jp nz,img_load_main
04166B C9          0074*       ret
04166C             0075*   
04166C             0076*   load_next_image:
04166C FD 2A 00 16 0077*       ld iy,(cur_image_list)
       04          
041671 FD E5       0078*       push iy
041673 FD 7E 00    0079*       ld a,(iy+image_type) ; get image type
041676 FD 07 03    0080*       ld bc,(iy+image_width) ; get image width
041679 FD 17 06    0081*       ld de,(iy+image_height) ; get image height
04167C FD 31 09    0082*       ld ix,(iy+image_filesize) ; get image file size
04167F FD 27 0F    0083*       ld hl,(iy+image_bufferId) ; get image bufferId
041682 22 06 16 04 0084*       ld (cur_buffer_id),hl
041686 FD 37 0C    0085*       ld iy,(iy+image_filename) ; get image filename
041689 FD 22 03 16 0086*       ld (cur_filename),iy
       04          
04168E CD 56 1C 04 0087*       call vdu_load_img
041692 FD E1       0088*       pop iy
041694 ED 33 12    0089*       lea iy,iy+image_record_size
041697 FD 22 00 16 0090*       ld (cur_image_list),iy
       04          
04169C C9          0091*       ret
04169D             0092*   
04169D             0093*   move_logo:
04169D             0094*   ; activate logo bitmap
04169D 21 1F 00 00 0095*       ld hl, BUF_SPLASH_LOGO
0416A1 CD 38 1B 04 0096*       call vdu_buff_select
0416A5             0097*   ; update position based on velocity parameters
0416A5 2A CB 16 04 0098*       ld hl,(logo_ypos)
0416A9 ED 5B C8 16 0099*       ld de,(logo_yvel)
       04          
0416AE 19          0100*       add hl,de
0416AF 22 CB 16 04 0101*       ld (logo_ypos),hl
0416B3             0102*   ; draw logo
0416B3 ED 4B C5 16 0103*       ld bc,(logo_xpos)
       04          
0416B8 ED 5B CB 16 0104*       ld de,(logo_ypos)
       04          
0416BD CD 3C 1F 04 0105*       call vdu_plot_bmp168
0416C1 C9          0106*       ret
0416C2             0107*   
0416C2 00 00 00    0108*   logo_xvel: dl 0
0416C5 00 00 00    0109*   logo_xpos: dl 0
0416C8             0110*   
0416C8 00 00 00    0111*   logo_yvel: dl 0
0416CB 00 00 00    0112*   logo_ypos: dl 0
0416CE             0113*   
0416CE             0114*   load_ui_images:
0416CE             0115*   ; initialize image loading variables
0416CE 21 65 57 04 0116*       ld hl,ui_image_list
0416D2 22 00 16 04 0117*       ld (cur_image_list),hl
0416D6             0118*   ; load images
0416D6 06 20       0119*       ld b,ui_num_images
0416D8             0120*   @loop:
0416D8 C5          0121*       push bc
0416D9 CD 6C 16 04 0122*       call load_next_image
0416DD C1          0123*       pop bc
0416DE 10 F8       0124*       djnz @loop
0416E0 C9          0125*       ret
0416E1             0126*   
0416E1             0127*   load_sprite_images:
0416E1             0128*   ; initialize image loading variables
0416E1 21 08 4A 04 0129*       ld hl,sprites_image_list
0416E5 22 00 16 04 0130*       ld (cur_image_list),hl
0416E9 01 50 00 00 0131*       ld bc,sprites_num_images
0416ED             0132*   ; load images
0416ED CD 30 16 04 0133*       call img_load_main
0416F1 C9          0134*       ret
0416F2             0135*   
0416F2             0136*   load_tilesets:
0416F2             0137*   ; initialize image loading variables
0416F2 21 00 2E 04 0138*       ld hl,tiles_dg_image_list
0416F6 22 00 16 04 0139*       ld (cur_image_list),hl
0416FA 01 B8 00 00 0140*       ld bc,tiles_dg_num_images
0416FE             0141*   ; load images
0416FE CD 30 16 04 0142*       call img_load_main
041702             0143*   
041702             0144*   ; ; initialize image loading variables
041702             0145*   ;     ld hl,tiles_xevious_image_list
041702             0146*   ;     ld (cur_image_list),hl
041702             0147*   ;     ld bc,tiles_xevious_num_images
041702             0148*   ; ; load images
041702             0149*   ;     call img_load_main
041702 C9          0150*       ret
041703             0038        include "timer.inc"
041703 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
041800             0002*   
041800             0003*   ; Table 32. Timer Control Registers
041800             0004*   ; this constant is the base address of the timer control registers
041800             0005*   ; each timer takes three bytes:
041800             0006*   ;   0: control register
041800             0007*   ;   1: low byte of timer reset value
041800             0008*   ;   2: high byte of timer reset value
041800             0009*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
041800             0010*   ; which correctly force the high and upper bytes of the address bus to zero
041800             0011*   TMR_CTL:     equ 80h
041800             0012*   
041800             0013*   ; Timer Control Register Bit Definitions
041800             0014*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
041800             0015*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
041800             0016*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
041800             0017*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
041800             0018*                               ; the TMRx_CTL register is read.
041800             0019*   
041800             0020*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
041800             0021*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
041800             0022*   
041800             0023*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
041800             0024*                               ;  0,and counting stops when the end-of-count value is reached.
041800             0025*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
041800             0026*                               ; written to the counter when the end-of-count value is reached.
041800             0027*   
041800             0028*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
041800             0029*   CLK_DIV_256:  equ %00001100 ;
041800             0030*   CLK_DIV_64:   equ %00001000 ;
041800             0031*   CLK_DIV_16:   equ %00000100 ;
041800             0032*   CLK_DIV_4:    equ %00000000 ;
041800             0033*   
041800             0034*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
041800             0035*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
041800             0036*                               ; When a 1 is written to this bit,the values in the reload registers
041800             0037*                               ;  are loaded into the downcounter when the timer restarts. The
041800             0038*                               ; programmer must ensure that this bit is set to 1 each time
041800             0039*                               ; SINGLE-PASS mode is used.
041800             0040*   
041800             0041*   ; disable/enable the programmable reload timer
041800             0042*   PRT_EN_0:     equ %00000000 ;
041800             0043*   PRT_EN_1:     equ %00000001 ;
041800             0044*   
041800             0045*   ; Table 37. Timer Input Source Select Register
041800             0046*   ; Each of the 4 timers are allocated two bits of the 8-bit register
041800             0047*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
041800             0048*   ;   00: System clock / CLK_DIV
041800             0049*   ;   01: RTC / CLK_DIV
041800             0050*   ;   NOTE: these are the values given in the manual,but it may be a typo
041800             0051*   ;   10: GPIO port B pin 1.
041800             0052*   ;   11: GPIO port B pin 1.
041800             0053*   TMR_ISS:   equ 92h ; register address
041800             0054*   
041800             0055*   ; Table 51. Real-Time Clock Control Register
041800             0056*   RTC_CTRL: equ EDh ; register address
041800             0057*   
041800             0058*   ; alarm interrupt disable/enable
041800             0059*   RTC_ALARM_0:    equ %00000000
041800             0060*   RTC_ALARM_1:    equ %10000000
041800             0061*   
041800             0062*   ; interrupt on alarm disable/enable
041800             0063*   RTC_INT_ENT_0:  equ %00000000
041800             0064*   RTC_INT_ENT_1:  equ %01000000
041800             0065*   
041800             0066*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
041800             0067*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
041800             0068*   
041800             0069*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
041800             0070*                                   ; On-chip 32768 Hz oscillator is enabled.
041800             0071*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
041800             0072*                                   ; On-chip 32768 Hz oscillator is disabled.
041800             0073*   
041800             0074*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
041800             0075*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
041800             0076*   
041800             0077*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
041800             0078*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
041800             0079*   
041800             0080*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
041800             0081*                                   ; RTC counter is enabled.
041800             0082*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
041800             0083*                                   ; RTC counter is disabled.
041800             0084*   
041800             0085*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
041800             0086*   
041800             0087*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
041800             0088*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
041800 00 00 00    0089*   prt_reload: dl 0x000000
041803             0090*   
041803             0091*   ; set PRT timer
041803             0092*   prt_set:
041803 21 00 00 00 0093*       ld hl,0
041807 22 51 18 04 0094*       ld (prt_irq_counter),hl
04180B 2A 00 18 04 0095*       ld hl,(prt_reload)
04180F ED 29 84    0096*       out0 ($84),l
041812 ED 21 85    0097*   	out0 ($85),h
041815             0098*   ; disable timer
041815 3E 06       0099*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041817 ED 39 83    0100*   	out0 ($83),a
04181A             0101*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04181A 3E 57       0102*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04181C ED 39 83    0103*   	out0 ($83),a
04181F C9          0104*       ret
041820             0105*   
041820             0106*   ; ===============================================
041820             0107*   ; PRT Timer Interrupt Handling
041820             0108*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
041820             0109*   ; -----------------------------------------------
041820             0110*   prt_irq_init:
041820             0111*       ; set up interrupt vector table 2
041820 21 00 00 00 0112*   	ld hl,0
041824 3A 0C 01 00 0113*   	ld a,($10c)
041828 6F          0114*   	ld l,a
041829 3A 0D 01 00 0115*   	ld a,($10d)
04182D 67          0116*   	ld h,a
04182E             0117*   
04182E             0118*   	; skip over CALL ($c3)
04182E 23          0119*   	inc hl
04182F             0120*   	; load address of jump into vector table 2 (in ram)
04182F ED 27       0121*   	ld hl,(hl)
041831             0122*   
041831             0123*   	; write CALL prt_irq_handler to vector table 2
041831 3E C3       0124*   	ld a,$c3
041833 77          0125*   	ld (hl),a
041834 23          0126*   	inc hl
041835 11 3C 18 04 0127*   	ld de,prt_irq_handler
041839 ED 1F       0128*   	ld (hl),de
04183B             0129*   
04183B C9          0130*       ret
04183C             0131*   
04183C             0132*   prt_irq_handler:
04183C F3          0133*   	di
04183D F5          0134*   	push af
04183E E5          0135*       push hl
04183F ED 38 83    0136*   	in0 a,($83)
041842 2A 51 18 04 0137*   	ld hl,(prt_irq_counter)
041846 23          0138*   	inc hl
041847 22 51 18 04 0139*   	ld (prt_irq_counter),hl
04184B E1          0140*       pop hl
04184C F1          0141*   	pop af
04184D FB          0142*   	ei
04184E 5B ED 4D    0143*   	reti.l
041851             0144*   
041851             0145*   prt_irq_counter:
041851 00 00 00    0146*   	.dl 0
041854             0147*   prt_irq_counter_saved:
041854 00 00 00    0148*       .dl 0
041857             0149*   
041857             0150*   prt_loop_reset:
041857 E5          0151*       push hl
041858 21 00 00 00 0152*   	ld hl,0
04185C 22 51 18 04 0153*   	ld (prt_irq_counter),hl
041860 22 C2 18 04 0154*       ld (prt_loop_counter),hl
041864 22 C5 18 04 0155*       ld (prt_loops),hl
041868 CD 03 18 04 0156*       call prt_set
04186C E1          0157*       pop hl
04186D C9          0158*       ret
04186E             0159*   
04186E             0160*   prt_loop_start:
04186E E5          0161*       push hl
04186F 21 00 00 00 0162*   	ld hl,0
041873 22 51 18 04 0163*   	ld (prt_irq_counter),hl
041877 E1          0164*       pop hl
041878 C9          0165*       ret
041879             0166*   
041879             0167*   prt_loop_stop:
041879 E5          0168*       push hl
04187A D5          0169*       push de
04187B 2A 51 18 04 0170*       ld hl,(prt_irq_counter)
04187F ED 5B C2 18 0171*       ld de,(prt_loop_counter)
       04          
041884 19          0172*       add hl,de
041885 22 C2 18 04 0173*       ld (prt_loop_counter),hl
041889 21 00 00 00 0174*       ld hl,0
04188D 22 51 18 04 0175*       ld (prt_irq_counter),hl
041891 2A C5 18 04 0176*       ld hl,(prt_loops)
041895 23          0177*       inc hl
041896 22 C5 18 04 0178*       ld (prt_loops),hl
04189A D1          0179*       pop de
04189B E1          0180*       pop hl
04189C C9          0181*       ret
04189D             0182*   
04189D             0183*   ; inputs: bc = y,x text coordinates to print
04189D             0184*   prt_loop_print:
04189D F5          0185*       push af
04189E E5          0186*       push hl
04189F C5          0187*       push bc
0418A0 D5          0188*       push de
0418A1 DD E5       0189*       push ix
0418A3 FD E5       0190*       push iy
0418A5 CD 37 1A 04 0191*       call vdu_move_cursor
0418A9             0192*   
0418A9 2A C2 18 04 0193*       ld hl,(prt_loop_counter)
0418AD CD 06 02 04 0194*       call printDec
0418B1             0195*   
0418B1 2A C5 18 04 0196*       ld hl,(prt_loops)
0418B5 CD 06 02 04 0197*       call printDec
0418B9             0198*   
0418B9 FD E1       0199*       pop iy
0418BB DD E1       0200*       pop ix
0418BD D1          0201*       pop de
0418BE C1          0202*       pop bc
0418BF E1          0203*       pop hl
0418C0 F1          0204*       pop af
0418C1 C9          0205*       ret
0418C2             0206*   
0418C2             0207*   prt_loop_counter:
0418C2 00 00 00    0208*       .dl 0
0418C5             0209*   prt_loops:
0418C5 00 00 00    0210*       .dl 0
0418C8             0211*   
0418C8             0212*   ; ===============================================
0418C8             0213*   ; Timer functions
0418C8             0214*   ; -----------------------------------------------
0418C8             0215*   ; set a countdown timer
0418C8             0216*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0418C8             0217*   ; returns: hl = current time
0418C8             0218*   tmr_set:
0418C8 FD 2F 03    0219*       ld (iy+3),hl            ; set time remaining
0418CB             0220*       MOSCALL mos_sysvars     ; ix points to syvars table
0418CB 3E 08       0001*M1 			LD	A, function
0418CD 5B CF       0002*M1 			RST.LIL	08h
0418CF DD 27 00    0221*       ld hl,(ix+sysvar_time)  ; get current time
0418D2 FD 2F 00    0222*       ld (iy+0),hl            ; set start time
0418D5 C9          0223*       ret
0418D6             0224*   
0418D6             0225*   ; gets time remaining on a countdown timer
0418D6             0226*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0418D6             0227*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0418D6             0228*   ;          sign flags: pos = time not expired,zero or neg = time expired
0418D6             0229*   tmr_get:
0418D6             0230*       MOSCALL mos_sysvars     ; ix points to syvars table
0418D6 3E 08       0001*M1 			LD	A, function
0418D8 5B CF       0002*M1 			RST.LIL	08h
0418DA DD 17 00    0231*       ld de,(ix+sysvar_time)  ; get current time
0418DD FD 27 00    0232*       ld hl,(iy+0)            ; get start time
0418E0 AF          0233*       xor a                   ; clear carry
0418E1 ED 52       0234*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0418E3 FD 17 03    0235*       ld de,(iy+3)            ; get timer set value
0418E6 AF          0236*       xor a                   ; clear carry
0418E7 ED 5A       0237*       adc hl,de               ; hl = time remaining
0418E9             0238*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0418E9 C9          0239*       ret
0418EA             0240*   
0418EA             0241*   tmr_test: ds 6 ; example of a buffer to hold timer data
0418F0             0242*   
       FF FF FF FF 
       FF FF 
0418F0 00 00 00    0243*   timestamp_now: dl 0
0418F3 00 00 00    0244*   timestamp_old: dl 0
0418F6 00 00 00    0245*   timestamp_chg: dl 0
0418F9             0246*   
0418F9             0247*   ; update the global timestamp from the system clock
0418F9             0248*   ; inputs: none
0418F9             0249*   ; returns: hl = time elapsed in 1/120ths of a second
0418F9             0250*   ;          ix = pointer to syvars table
0418F9             0251*   ; destroys: af,hl,de,ix
0418F9             0252*   timestamp_tick:
0418F9 ED 5B F0 18 0253*       ld de,(timestamp_now)   ; get previous time
       04          
0418FE ED 53 F3 18 0254*       ld (timestamp_old),de   ; save previous time
       04          
041903             0255*       MOSCALL mos_sysvars     ; ix points to syvars table
041903 3E 08       0001*M1 			LD	A, function
041905 5B CF       0002*M1 			RST.LIL	08h
041907 DD 27 00    0256*       ld hl,(ix+sysvar_time)  ; get current time
04190A 22 F0 18 04 0257*       ld (timestamp_now),hl   ; save current time
04190E AF          0258*       xor a                   ; clear carry
04190F ED 52       0259*       sbc hl,de               ; hl = time elapsed
041911 22 F6 18 04 0260*       ld (timestamp_chg),hl   ; save elapsed time
041915 C9          0261*       ret
041916             0262*   
041916             0263*   ; set a countdown timer
041916             0264*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041916             0265*   ; requires: timestamp_tick to be called at least once before this function
041916             0266*   ; returns: hl = current time
041916             0267*   ; destroys: hl
041916             0268*   timestamp_tmr_set:
041916 FD 2F 03    0269*       ld (iy+3),hl            ; set time remaining
041919 2A F0 18 04 0270*       ld hl,(timestamp_now)   ; get current timestamp
04191D FD 2F 00    0271*       ld (iy+0),hl            ; set start time
041920 C9          0272*       ret
041921             0273*   
041921             0274*   ; gets time remaining on a countdown timer following the global timestamp
041921             0275*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041921             0276*   ; requires: timestamp_tick to be called at least once before this function
041921             0277*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041921             0278*   ;          sign flags: pos = time not expired,zero or neg = time expired
041921             0279*   ; destroys: af,hl,de
041921             0280*   timestamp_tmr_get:
041921 ED 5B F0 18 0281*       ld de,(timestamp_now)   ; get current timestamp
       04          
041926 FD 27 00    0282*       ld hl,(iy+0)            ; get start time
041929 AF          0283*       xor a                   ; clear carry
04192A ED 52       0284*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04192C FD 17 03    0285*       ld de,(iy+3)            ; get timer set value
04192F AF          0286*       xor a                   ; clear carry
041930 ED 5A       0287*       adc hl,de               ; hl = time remaining
041932             0288*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041932 C9          0289*       ret
041933             0290*   
041933             0291*   ; set a stopwatch
041933             0292*   ; returns: hl = start time
041933             0293*   ; destroys: hl,ix
041933             0294*   stopwatch_set:
041933             0295*       MOSCALL mos_sysvars     ; ix points to syvars table
041933 3E 08       0001*M1 			LD	A, function
041935 5B CF       0002*M1 			RST.LIL	08h
041937 DD 27 00    0296*       ld hl,(ix+sysvar_time)  ; get current time
04193A 22 4F 19 04 0297*       ld (stopwatch_started),hl            ; set start time
04193E C9          0298*       ret
04193F             0299*   
04193F             0300*   ; gets time elapsed on a stopwatch
04193F             0301*   ; returns: hl = time elapsed in 1/120ths of a second
04193F             0302*   ; destroys: af,hl,de,ix
04193F             0303*   stopwatch_get:
04193F             0304*       MOSCALL mos_sysvars     ; ix points to syvars table
04193F 3E 08       0001*M1 			LD	A, function
041941 5B CF       0002*M1 			RST.LIL	08h
041943 DD 27 00    0305*       ld hl,(ix+sysvar_time)  ; get current time
041946 ED 5B 4F 19 0306*       ld de,(stopwatch_started)            ; get start time
       04          
04194B AF          0307*       xor a                   ; clear carry
04194C ED 52       0308*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04194E C9          0309*       ret
04194F             0310*   
04194F             0311*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041952             0312*   
041952             0313*   ; ------------------
041952             0314*   ; delay routine
041952             0315*   ; Author: Richard Turrnidge
041952             0316*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041952             0317*   ; routine waits a fixed time,then returns
041952             0318*   ; arrive with A =  the delay byte. One bit to be set only.
041952             0319*   ; eg. ld A,00000100b
041952             0320*   
041952             0321*   multiPurposeDelay:
       FF FF FF 
041952 F5          0322*       push af
041953 C5          0323*       push bc
041954 DD E5       0324*       push ix
041956 47          0325*       ld b,a
041957 3E 08       0326*       ld a,$08
041959 5B CF       0327*       RST.LIL	08h                 ; get IX pointer to sysvars
04195B             0328*   
04195B             0329*   waitLoop:
04195B             0330*   
04195B DD 7E 00    0331*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04195E             0332*   
04195E             0333*                                   ;   we check if bit set is same as last time we checked.
04195E             0334*                                   ;   bit 0 - don't use
04195E             0335*                                   ;   bit 1 - changes 64 times per second
04195E             0336*                                   ;   bit 2 - changes 32 times per second
04195E             0337*                                   ;   bit 3 - changes 16 times per second
04195E             0338*   
04195E             0339*                                   ;   bit 4 - changes 8 times per second
04195E             0340*                                   ;   bit 5 - changes 4 times per second
04195E             0341*                                   ;   bit 6 - changes 2 times per second
04195E             0342*                                   ;   bit 7 - changes 1 times per second
04195E A0          0343*       and b
04195F 4F          0344*       ld c,a
041960 3A 71 19 04 0345*       ld a,(oldTimeStamp)
041964 B9          0346*       cp c                        ; is A same as last value?
041965 28 F4       0347*       jr z,waitLoop              ; loop here if it is
041967 79          0348*       ld a,c
041968 32 71 19 04 0349*       ld (oldTimeStamp),a        ; set new value
04196C             0350*   
04196C DD E1       0351*       pop ix
04196E C1          0352*       pop bc
04196F F1          0353*       pop af
041970 C9          0354*       ret
041971             0355*   
041971 00          0356*   oldTimeStamp:   .db 00h
041972             0039        include "vdu.inc"
041972 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
041A00             0002*   
041A00             0003*   ; VDU 30: Home cursor
041A00             0004*   vdu_home_cursor:
041A00 3E 1E       0005*       ld a,30
041A02 5B D7       0006*   	rst.lil $10
041A04 C9          0007*   	ret
041A05             0008*   
041A05             0009*   vdu_cursor_on:
041A05 21 10 1A 04 0010*   	ld hl,@cmd
041A09 01 03 00 00 0011*   	ld bc,@end-@cmd
041A0D 5B DF       0012*   	rst.lil $18
041A0F C9          0013*   	ret
041A10             0014*   @cmd:
041A10 17 01 01    0015*   	db 23,1,1
041A13             0016*   @end:
041A13             0017*   
041A13             0018*   vdu_cursor_off:
041A13 21 1E 1A 04 0019*   	ld hl,@cmd
041A17 01 03 00 00 0020*   	ld bc,@end-@cmd
041A1B 5B DF       0021*   	rst.lil $18
041A1D C9          0022*   	ret
041A1E             0023*   @cmd:
041A1E 17 01 00    0024*   	db 23,1,0
041A21             0025*   @end:
041A21             0026*   
041A21             0027*   ; VDU 5: Write text at graphics cursor
041A21             0028*   ; inputs: a is the character to write to the screen
041A21             0029*   ; prerequisites: the graphics cursor at the intended position on screen
041A21             0030*   ; outputs: see the name of the function
041A21             0031*   ; destroys: a, hl, bc
041A21             0032*   vdu_char_to_gfx_cursor:
041A21 32 31 1A 04 0033*   	ld (@arg),a
041A25 21 30 1A 04 0034*   	ld hl,@cmd
041A29 01 02 00 00 0035*   	ld bc,@end-@cmd
041A2D 5B DF       0036*   	rst.lil $18
041A2F C9          0037*   	ret
041A30 05          0038*   @cmd: db 5
041A31 00          0039*   @arg: db 0
041A32             0040*   @end:
041A32             0041*   ; VDU 9: Move cursor forward one character
041A32             0042*   vdu_cursor_forward:
041A32 3E 09       0043*       ld a,9
041A34 5B D7       0044*   	rst.lil $10
041A36 C9          0045*   	ret
041A37             0046*   
041A37             0047*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041A37             0048*   ; inputs: c=x, b=y 8-bit unsigned integers
041A37             0049*   vdu_move_cursor:
041A37 ED 43 48 1A 0050*       ld (@x0),bc
       04          
041A3C 21 47 1A 04 0051*   	ld hl,@cmd
041A40 01 03 00 00 0052*   	ld bc,@end-@cmd
041A44 5B DF       0053*   	rst.lil $18
041A46 C9          0054*   	ret
041A47 1F          0055*   @cmd: 	db 31
041A48 00          0056*   @x0:	db 0
041A49 00          0057*   @y0: 	db 0
041A4A 00          0058*   @end: 	db 0 ; padding
041A4B             0059*   
041A4B             0060*   ; VDU 12: Clear text area (CLS)
041A4B             0061*   vdu_cls:
041A4B 3E 0C       0062*       ld a,12
041A4D 5B D7       0063*   	rst.lil $10
041A4F C9          0064*   	ret
041A50             0065*   
041A50             0066*   vdu_flip:
041A50 21 5B 1A 04 0067*   	ld hl,@cmd
041A54 01 03 00 00 0068*   	ld bc,@end-@cmd
041A58 5B DF       0069*   	rst.lil $18
041A5A C9          0070*   	ret
041A5B 17 00 C3    0071*   @cmd: db 23,0,0xC3
041A5E             0072*   @end:
041A5E             0073*   
041A5E             0074*   ; VDU 16: Clear graphics area (CLG)
041A5E             0075*   vdu_clg:
041A5E 3E 10       0076*       ld a,16
041A60 5B D7       0077*   	rst.lil $10
041A62 C9          0078*   	ret
041A63             0079*   
041A63             0080*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041A63             0081*   ; VDU 23, 7: Scrolling
041A63             0082*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041A63             0083*   ; inputs: a, extent; l, direction; h; speed
041A63             0084*   vdu_scroll_down:
041A63 32 78 1A 04 0085*   	ld (@extent),a
041A67 22 79 1A 04 0086*   	ld (@dir),hl ; implicitly populates @speed
041A6B 21 76 1A 04 0087*   	ld hl,@cmd
041A6F 01 05 00 00 0088*   	ld bc,@end-@cmd
041A73 5B DF       0089*   	rst.lil $18     ;; Sending command to VDP
041A75 C9          0090*   	ret
041A76 17 07       0091*   @cmd:       db 23,7
041A78 00          0092*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041A79 00          0093*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
041A7A 00          0094*   @speed:     db 0x00 ; pixels
041A7B 00          0095*   @end:		db 0x00 ; padding
041A7C             0096*   
041A7C             0097*   ; COLOUR MODES
041A7C             0098*   ; Mode	Effect
041A7C             0099*   ; 0	Set on-screen pixel to target colour value
041A7C             0100*   ; 1	OR value with the on-screen pixel
041A7C             0101*   ; 2	AND value with the on-screen pixel
041A7C             0102*   ; 3	XOR value with the on-screen pixel
041A7C             0103*   ; 4	Invert the on-screen pixel
041A7C             0104*   ; 5	No operation
041A7C             0105*   ; 6	AND the inverse of the specified colour with the on-screen pixel
041A7C             0106*   ; 7	OR the inverse of the specified colour with the on-screen pixel
041A7C             0107*   
041A7C             0108*   ; VDU 17, colour: Define text colour (COLOUR)
041A7C             0109*   vdu_colour_text:
041A7C 32 8C 1A 04 0110*   	ld (@arg),a
041A80 21 8B 1A 04 0111*   	ld hl,@cmd
041A84 01 02 00 00 0112*   	ld bc,@end-@cmd
041A88 5B DF       0113*   	rst.lil $18
041A8A C9          0114*   	ret
041A8B 11          0115*   @cmd: db 17
041A8C 00          0116*   @arg: db 0
041A8D             0117*   @end:
041A8D             0118*   
041A8D             0119*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
041A8D             0120*   ; inputs: a=mode, c=colour (add 128 to set background colour)
041A8D             0121*   vdu_gcol:
041A8D 32 A2 1A 04 0122*   	ld (@mode),a
041A91 79          0123*       ld a,c
041A92 32 A3 1A 04 0124*       ld (@col),a
041A96 21 A1 1A 04 0125*   	ld hl,@cmd
041A9A 01 03 00 00 0126*   	ld bc,@end-@cmd
041A9E 5B DF       0127*   	rst.lil $18
041AA0 C9          0128*   	ret
041AA1 12          0129*   @cmd:  db 18
041AA2 00          0130*   @mode: db 0
041AA3 00          0131*   @col:  db 0
041AA4             0132*   @end:
041AA4             0133*   
041AA4             0134*   
041AA4             0135*   ; VDU 28, left, bottom, right, top: Set text viewport **
041AA4             0136*   ; MIND THE LITTLE-ENDIANESS
041AA4             0137*   ; inputs: c=left,b=bottom,e=right,d=top
041AA4             0138*   ; outputs; nothing
041AA4             0139*   ; destroys: a might make it out alive
041AA4             0140*   vdu_set_txt_viewport:
041AA4 ED 43 BA 1A 0141*       ld (@lb),bc
       04          
041AA9 ED 53 BC 1A 0142*   	ld (@rt),de
       04          
041AAE 21 B9 1A 04 0143*   	ld hl,@cmd
041AB2 01 05 00 00 0144*   	ld bc,@end-@cmd
041AB6 5B DF       0145*   	rst.lil $18
041AB8 C9          0146*   	ret
041AB9 1C          0147*   @cmd:   db 28 ; set text viewport command
041ABA 00 00       0148*   @lb: 	dw 0x0000 ; set by bc
041ABC 00 00       0149*   @rt: 	dw 0x0000 ; set by de
041ABE 00          0150*   @end:   db 0x00	  ; padding
041ABF             0151*   
041ABF             0152*   ; Wait for VBLANK interrupt
041ABF             0153*   vdu_vblank:
041ABF DD E5       0154*       PUSH 	IX
041AC1             0155*   	MOSCALL	mos_sysvars
041AC1 3E 08       0001*M1 			LD	A, function
041AC3 5B CF       0002*M1 			RST.LIL	08h
041AC5 DD 7E 00    0156*   	LD	A, (IX + sysvar_time + 0)
041AC8             0157*   @wait:
041AC8 DD BE 00    0158*       CP 	A, (IX + sysvar_time + 0)
041ACB 28 FB       0159*       JR	Z, @wait
041ACD DD E1       0160*       POP	IX
041ACF C9          0161*       RET
041AD0             0162*   
041AD0             0163*   ; VDU 29, x; y;: Set graphics origin
041AD0             0164*   ; This command sets the graphics origin.
041AD0             0165*   ; The origin is the point on the screen where the coordinates (0,0) are located.
041AD0             0166*   ; inputs: bc=x0,de=y0
041AD0             0167*   ; outputs; nothing
041AD0             0168*   ; destroys: a might make it out alive
041AD0             0169*   vdu_set_gfx_origin:
041AD0 ED 43 E6 1A 0170*       ld (@x0),bc
       04          
041AD5 ED 53 E8 1A 0171*       ld (@y0),de
       04          
041ADA 21 E5 1A 04 0172*       ld hl,@cmd
041ADE 01 05 00 00 0173*       ld bc,@end-@cmd
041AE2 5B DF       0174*       rst.lil $18
041AE4 C9          0175*       ret
041AE5 1D          0176*   @cmd:   db 29 ; set graphics origin command
041AE6 00 00       0177*   @x0: 	dw 0x0000 ; set by bc
041AE8 00 00       0178*   @y0: 	dw 0x0000 ; set by de
041AEA 00          0179*   @end:   db 0x00	  ; padding
041AEB             0180*   
041AEB             0181*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
041AEB             0182*   ; NOTE: the order of the y-coordinate parameters are inverted
041AEB             0183*   ; 	because we have turned off logical screen scaling
041AEB             0184*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041AEB             0185*   ; outputs; nothing
041AEB             0186*   ; destroys: a might make it out alive
041AEB             0187*   vdu_set_gfx_viewport:
041AEB ED 43 0B 1B 0188*       ld (@x0),bc
       04          
041AF0 FD 22 0D 1B 0189*       ld (@y1),iy
       04          
041AF5 DD 22 0F 1B 0190*   	ld (@x1),ix
       04          
041AFA ED 53 11 1B 0191*   	ld (@y0),de
       04          
041AFF 21 0A 1B 04 0192*   	ld hl,@cmd
041B03 01 09 00 00 0193*   	ld bc,@end-@cmd
041B07 5B DF       0194*   	rst.lil $18
041B09 C9          0195*   	ret
041B0A 18          0196*   @cmd:   db 24 ; set graphics viewport command
041B0B 00 00       0197*   @x0: 	dw 0x0000 ; set by bc
041B0D 00 00       0198*   @y1: 	dw 0x0000 ; set by iy
041B0F 00 00       0199*   @x1: 	dw 0x0000 ; set by ix
041B11 00 00       0200*   @y0: 	dw 0x0000 ; set by de
041B13 00          0201*   @end:   db 0x00	  ; padding
041B14             0202*   
041B14             0203*   ; SCREEN MODES
041B14             0204*   ; ===============================
041B14             0205*   ; Mode  Horz  Vert  Cols  Refresh
041B14             0206*   ; ---   ----  ----  ----  -------
041B14             0207*   ; 11    320   240   2     60hz
041B14             0208*   ; 139   320   240   2     60hz
041B14             0209*   ; 23    512   384   2     60hz
041B14             0210*   ; 151   512   384   2     60hz
041B14             0211*   ; 6     640   240   2     60hz
041B14             0212*   ; 134   640   240   2     60hz
041B14             0213*   ; 2     640   480   2     60hz
041B14             0214*   ; 130   640   480   2     60hz
041B14             0215*   ; 17    800   600   2     60hz
041B14             0216*   ; 145   800   600   2     60hz
041B14             0217*   ; 18    1024  768   2     60hz
041B14             0218*   ; 146   1024  768   2     60hz
041B14             0219*   ; ---   ----  ----  ----  -------
041B14             0220*   ; 10    320   240   4     60hz
041B14             0221*   ; 138   320   240   4     60hz
041B14             0222*   ; 22    512   384   4     60hz
041B14             0223*   ; 150   512   384   4     60hz
041B14             0224*   ; 5     640   240   4     60hz
041B14             0225*   ; 133   640   240   4     60hz
041B14             0226*   ; 1     640   480   4     60hz
041B14             0227*   ; 129   640   480   4     60hz
041B14             0228*   ; 16    800   600   4     60hz
041B14             0229*   ; 19    1024  768   4     60hz
041B14             0230*   ; ---   ----  ----  ----  -------
041B14             0231*   ; 9     320   240   16    60hz
041B14             0232*   ; 137   320   240   16    60hz
041B14             0233*   ; 21    512   384   16    60hz
041B14             0234*   ; 149   512   384   16    60hz
041B14             0235*   ; 4     640   240   16    60hz
041B14             0236*   ; 132   640   240   16    60hz
041B14             0237*   ; 0     640   480   16    60hz
041B14             0238*   ; 7     n/a   n/a   16    60hz
041B14             0239*   ; ---   ----  ----  ----  -------
041B14             0240*   ; 8     320   240   64    60hz
041B14             0241*   ; 136   320   240   64    60hz
041B14             0242*   ; 20    512   384   64    60hz
041B14             0243*   ; 3     640   240   64    60hz
041B14             0244*   ; ---   ----  ----  ----  -------
041B14             0245*   vdu_set_screen_mode:
041B14 32 24 1B 04 0246*   	ld (@arg),a
041B18 21 23 1B 04 0247*   	ld hl,@cmd
041B1C 01 02 00 00 0248*   	ld bc,@end-@cmd
041B20 5B DF       0249*   	rst.lil $18
041B22 C9          0250*   	ret
041B23 16          0251*   @cmd: db 22 ; set screen mode
041B24 00          0252*   @arg: db 0  ; screen mode parameter
041B25             0253*   @end:
041B25             0254*   
041B25             0255*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041B25             0256*   ; inputs: a is scaling mode, 1=on, 0=off
041B25             0257*   ; note: default setting on boot is scaling ON
041B25             0258*   vdu_set_scaling:
041B25 32 37 1B 04 0259*   	ld (@arg),a
041B29 21 34 1B 04 0260*   	ld hl,@cmd
041B2D 01 04 00 00 0261*   	ld bc,@end-@cmd
041B31 5B DF       0262*   	rst.lil $18
041B33 C9          0263*   	ret
041B34 17 00 C0    0264*   @cmd: db 23,0,0xC0
041B37 00          0265*   @arg: db 0  ; scaling on/off
041B38             0266*   @end:
041B38             0267*   
041B38             0268*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041B38             0269*   ; inputs: hl=bufferId
041B38             0270*   vdu_buff_select:
041B38 22 4A 1B 04 0271*   	ld (@bufferId),hl
041B3C 21 47 1B 04 0272*   	ld hl,@cmd
041B40 01 05 00 00 0273*   	ld bc,@end-@cmd
041B44 5B DF       0274*   	rst.lil $18
041B46 C9          0275*   	ret
041B47 17 1B 20    0276*   @cmd: db 23,27,0x20
041B4A 00 00       0277*   @bufferId: dw 0x0000
041B4C 00          0278*   @end: db 0x00 ; padding
041B4D             0279*   
041B4D             0280*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041B4D             0281*   ; inputs: a=format; bc=width; de=height
041B4D             0282*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041B4D             0283*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041B4D             0284*   ; 0 	RGBA8888 (4-bytes per pixel)
041B4D             0285*   ; 1 	RGBA2222 (1-bytes per pixel)
041B4D             0286*   ; 2 	Mono/Mask (1-bit per pixel)
041B4D             0287*   ; 3 	Reserved for internal use by VDP (“native” format)
041B4D             0288*   vdu_bmp_create:
041B4D ED 43 69 1B 0289*       ld (@width),bc
       04          
041B52 ED 53 6B 1B 0290*       ld (@height),de
       04          
041B57 32 6D 1B 04 0291*       ld (@fmt),a
041B5B 21 66 1B 04 0292*   	ld hl,@cmd
041B5F 01 08 00 00 0293*   	ld bc,@end-@cmd
041B63 5B DF       0294*   	rst.lil $18
041B65 C9          0295*   	ret
041B66 17 1B 21    0296*   @cmd:       db 23,27,0x21
041B69 00 00       0297*   @width:     dw 0x0000
041B6B 00 00       0298*   @height:    dw 0x0000
041B6D 00          0299*   @fmt:       db 0x00
041B6E             0300*   @end:
041B6E             0301*   
041B6E             0302*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041B6E             0303*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041B6E             0304*   vdu_load_img_rgba2_to_8:
041B6E             0305*   ; backup the target buffer id and image dimensions
041B6E E5          0306*       push hl
041B6F D5          0307*       push de
041B70 C5          0308*       push bc
041B71             0309*   ; load the rgba2 image to working buffer 65534
041B71 21 FE FF 00 0310*       ld hl,65534 ; temporary working buffer id
041B75 CD 78 1C 04 0311*   	call vdu_load_buffer_from_file
041B79             0312*   ; restore the image dimensions and target buffer id
041B79 C1          0313*       pop bc
041B7A D1          0314*       pop de
041B7B E1          0315*       pop hl
041B7C             0316*   ; fall through to vdu_rgba2_to_8
041B7C             0317*   
041B7C             0318*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041B7C             0319*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041B7C             0320*   ; the "expand bitmap" command is:
041B7C             0321*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041B7C             0322*   ; and then to reverse the byte order to fix endian-ness:
041B7C             0323*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041B7C             0324*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041B7C             0325*   ; VDU 23,27,&20,targetBufferID%;
041B7C             0326*   ; VDU 23,27,&21,width%;height%;0
041B7C             0327*   ; -------------------------------------------------------------------
041B7C             0328*   ; inputs: bc,de image width,height ; hl = targetBufferId
041B7C             0329*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041B7C             0330*   vdu_rgba2_to_8:
041B7C             0331*   ; load the image dimensions and buffer id parameters
041B7C ED 43 D8 1B 0332*       ld (@width),bc
       04          
041B81 ED 53 DA 1B 0333*       ld (@height),de
       04          
041B86 22 BD 1B 04 0334*       ld (@bufferId0),hl
041B8A 22 CA 1B 04 0335*       ld (@bufferId2),hl
041B8E 22 D3 1B 04 0336*       ld (@bufferId1),hl
041B92             0337*   ; clean up bytes that got stomped on by the ID loads
041B92 3E 48       0338*       ld a,0x48
041B94 32 BF 1B 04 0339*       ld (@bufferId0+2),a
041B98 3E 17       0340*       ld a,23
041B9A 32 D5 1B 04 0341*       ld (@bufferId1+2),a
041B9E 3E 18       0342*       ld a,24
041BA0 32 CC 1B 04 0343*       ld (@bufferId2+2),a
041BA4 AF          0344*       xor a
041BA5 32 DC 1B 04 0345*       ld (@height+2),a
041BA9             0346*   ; send the vdu command strings
041BA9 21 B4 1B 04 0347*       ld hl,@beg
041BAD 01 29 00 00 0348*       ld bc,@end-@beg
041BB1 5B DF       0349*       rst.lil $18
041BB3 C9          0350*       ret
041BB4             0351*   @beg:
041BB4             0352*   ; Command 14: Consolidate blocks in a buffer
041BB4             0353*   ; VDU 23, 0, &A0, bufferId; 14
041BB4 17 00 A0    0354*       db 23,0,0xA0
041BB7 FE FF       0355*       dw 65534 ; workingBufferId
041BB9 0E          0356*       db 14 ; consolidate blocks
041BBA             0357*   ; the "expand bitmap" command is:
041BBA             0358*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041BBA 17 00 A0    0359*       db 23,0,0xA0
041BBD 00 00       0360*   @bufferId0: dw 0x0000 ; targetBufferId
041BBF 48          0361*       db 0x48 ; given as decimal command 72 in the docs
041BC0 02          0362*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041BC1 FE FF       0363*       dw 65534 ; sourceBufferId
041BC3 00 7F BF FF 0364*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041BC7             0365*   ; reverse the byte order to fix endian-ness:
041BC7             0366*   ; Command 24: Reverse the order of data of blocks within a buffer
041BC7             0367*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041BC7             0368*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041BC7 17 00 A0    0369*       db 23,0,0xA0
041BCA 00 00       0370*   @bufferId2:    dw 0x0000 ; targetBufferId
041BCC 18          0371*       db 24 ; reverse byte order
041BCD 04          0372*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041BCE 04 00       0373*       dw 4 ; size (4 bytes)
041BD0             0374*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041BD0             0375*   ; VDU 23,27,&20,targetBufferID%;
041BD0 17 1B 20    0376*       db 23,27,0x20 ; select bitmap
041BD3 00 00       0377*   @bufferId1: dw 0x0000 ; targetBufferId
041BD5             0378*   ; VDU 23,27,&21,width%;height%;0
041BD5 17 1B 21    0379*       db 23,27,0x21 ; create bitmap from buffer
041BD8 00 00       0380*   @width: dw 0x0000
041BDA 00 00       0381*   @height: dw 0x0000
041BDC 00          0382*       db 0x00 ; rgba8888 format
041BDD             0383*   @end:
041BDD             0384*   
041BDD             0385*   ; scratch variables
041BDD 00 00 00    0386*   bufferId0: dl 0x000000
041BE0 00 00 00    0387*   bufferId1: dl 0x000000
041BE3             0388*   
041BE3             0389*   ; load a vdu buffer from local memory
041BE3             0390*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041BE3             0391*   vdu_load_buffer:
041BE3 ED 43 0C 1C 0392*       ld (@length),bc
       04          
041BE8 D5          0393*       push de ; save data pointer
041BE9             0394*   ; send the vdu command string
041BE9 7D          0395*       ld a,l
041BEA 32 09 1C 04 0396*       ld (@bufferId),a
041BEE 7C          0397*       ld a,h
041BEF 32 0A 1C 04 0398*       ld (@bufferId+1),a
041BF3 21 06 1C 04 0399*       ld hl,@cmd
041BF7 01 08 00 00 0400*       ld bc,@end-@cmd
041BFB 5B DF       0401*       rst.lil $18
041BFD             0402*   ; send the buffer data
041BFD E1          0403*       pop hl ; pointer to data
041BFE ED 4B 0C 1C 0404*       ld bc,(@length)
       04          
041C03 5B DF       0405*       rst.lil $18 ; send it
041C05 C9          0406*       ret
041C06             0407*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041C06 17 00 A0    0408*   @cmd:       db 23,0,0xA0
041C09 00 00       0409*   @bufferId:	dw 0x0000
041C0B 00          0410*   		    db 0 ; load buffer
041C0C 00 00       0411*   @length:	dw 0x0000
041C0E 00          0412*   @end: db 0 ; padding
041C0F             0413*   
041C0F             0414*   ; clear a buffer
041C0F             0415*   ; inputs: hl = bufferId
041C0F             0416*   vdu_clear_buffer:
041C0F 7D          0417*       ld a,l
041C10 32 27 1C 04 0418*       ld (@bufferId),a
041C14 7C          0419*       ld a,h
041C15 32 28 1C 04 0420*       ld (@bufferId+1),a
041C19 21 24 1C 04 0421*       ld hl,@cmd
041C1D 01 06 00 00 0422*       ld bc,@end-@cmd
041C21 5B DF       0423*       rst.lil $18
041C23 C9          0424*       ret
041C24 17 00 A0    0425*   @cmd:       db 23,0,0xA0
041C27 00 00       0426*   @bufferId:	dw 0x0000
041C29 02          0427*   		    db 2 ; clear buffer
041C2A             0428*   @end:
041C2A             0429*   
041C2A             0430*   vdu_clear_all_buffers:
041C2A             0431*   ; clear all buffers
041C2A 21 35 1C 04 0432*       ld hl,@beg
041C2E 01 06 00 00 0433*       ld bc,@end-@beg
041C32 5B DF       0434*       rst.lil $18
041C34 C9          0435*       ret
041C35 17 00 A0    0436*   @beg: db 23,0,$A0
041C38 FF FF       0437*         dw -1 ; clear all buffers
041C3A 02          0438*         db 2  ; command 2: clear a buffer
041C3B             0439*   @end:
041C3B             0440*   
041C3B             0441*   ; Command 14: Consolidate blocks in a buffer
041C3B             0442*   vdu_consolidate_buffer:
041C3B             0443*   ; set parameters for vdu call
041C3B 7D          0444*       ld a,l
041C3C 32 53 1C 04 0445*       ld (@bufferId),a
041C40 7C          0446*       ld a,h
041C41 32 54 1C 04 0447*       ld (@bufferId+1),a
041C45 21 50 1C 04 0448*       ld hl,@beg
041C49 01 06 00 00 0449*       ld bc,@end-@beg
041C4D 5B DF       0450*       rst.lil $18
041C4F C9          0451*       ret
041C50             0452*   ; VDU 23, 0, &A0, bufferId; 14
041C50 17 00 A0    0453*   @beg: db 23,0,0xA0
041C53 00 00       0454*   @bufferId: dw 0x0000
041C55 0E          0455*              db 14
041C56             0456*   @end:
041C56             0457*   
041C56             0458*   ; load an image file to a buffer and make it a bitmap
041C56             0459*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041C56             0460*   vdu_load_img:
041C56             0461*   ; back up image type and dimension parameters
041C56 22 DD 1B 04 0462*       ld (bufferId0),hl
041C5A F5          0463*       push af
041C5B C5          0464*   	push bc
041C5C D5          0465*   	push de
041C5D             0466*   ; load the image
041C5D CD 78 1C 04 0467*   	call vdu_load_buffer_from_file
041C61             0468*   ; now make it a bitmap
041C61 2A DD 1B 04 0469*       ld hl,(bufferId0)
041C65 CD 3B 1C 04 0470*       call vdu_consolidate_buffer
041C69 2A DD 1B 04 0471*       ld hl,(bufferId0)
041C6D CD 38 1B 04 0472*       call vdu_buff_select
041C71 D1          0473*   	pop de ; image height
041C72 C1          0474*   	pop bc ; image width
041C73 F1          0475*   	pop af ; image type
041C74 C3 4D 1B 04 0476*   	jp vdu_bmp_create ; will return to caller from there
041C78             0477*   
041C78             0478*   ; inputs: hl = bufferId; iy = pointer to filename
041C78             0479*   vdu_load_buffer_from_file:
041C78 22 DD 1B 04 0480*       ld (bufferId0),hl
041C7C             0481*   
041C7C             0482*   ; clear target buffer
041C7C CD 0F 1C 04 0483*       call vdu_clear_buffer
041C80             0484*   
041C80             0485*   ; open the file in read mode
041C80             0486*   ; Open a file
041C80             0487*   ; HLU: Filename
041C80             0488*   ;   C: Mode
041C80             0489*   ; Returns:
041C80             0490*   ;   A: Filehandle, or 0 if couldn't open
041C80 FD E5       0491*   	push iy ; pointer to filename
041C82 E1          0492*   	pop hl
041C83 0E 01       0493*   	ld c,fa_read
041C85             0494*       MOSCALL mos_fopen
041C85 3E 0A       0001*M1 			LD	A, function
041C87 5B CF       0002*M1 			RST.LIL	08h
041C89 32 C4 1C 04 0495*       ld (@filehandle),a
041C8D             0496*   
041C8D             0497*   @read_file:
041C8D             0498*   ; Read a block of data from a file
041C8D             0499*   ;   C: Filehandle
041C8D             0500*   ; HLU: Pointer to where to write the data to
041C8D             0501*   ; DEU: Number of bytes to read
041C8D             0502*   ; Returns:
041C8D             0503*   ; DEU: Number of bytes read
041C8D 3A C4 1C 04 0504*       ld a,(@filehandle)
041C91 4F          0505*       ld c,a
041C92 21 00 E0 B7 0506*       ld hl,filedata
041C96 11 00 20 00 0507*       ld de,8192 ; max we can read into onboard sram at one time
041C9A             0508*       MOSCALL mos_fread
041C9A 3E 1A       0001*M1 			LD	A, function
041C9C 5B CF       0002*M1 			RST.LIL	08h
041C9E             0509*   
041C9E             0510*   ; test de for zero bytes read
041C9E 21 00 00 00 0511*       ld hl,0
041CA2 AF          0512*       xor a ; clear carry
041CA3 ED 52       0513*       sbc hl,de
041CA5 CA BB 1C 04 0514*       jp z,@close_file
041CA9             0515*   
041CA9             0516*   ; load a vdu buffer from local memory
041CA9             0517*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041CA9 2A DD 1B 04 0518*       ld hl,(bufferId0)
041CAD D5          0519*       push de ; chunksize
041CAE C1          0520*       pop bc
041CAF 11 00 E0 B7 0521*       ld de,filedata
041CB3 CD E3 1B 04 0522*       call vdu_load_buffer
041CB7             0523*   
041CB7             0524*   ; read the next block
041CB7 C3 8D 1C 04 0525*       jp @read_file
041CBB             0526*   
041CBB             0527*   ; close the file
041CBB             0528*   @close_file:
041CBB 3A C4 1C 04 0529*       ld a,(@filehandle)
041CBF             0530*       MOSCALL mos_fclose
041CBF 3E 0B       0001*M1 			LD	A, function
041CC1 5B CF       0002*M1 			RST.LIL	08h
041CC3 C9          0531*       ret ; vdu_load_buffer_from_file
041CC4             0532*   
041CC4 00          0533*   @filehandle: db 0 ; file handle
041CC5 00 00 00    0534*   @fil: dl 0 ; pointer to FIL struct
041CC8             0535*   
041CC8 00 00 00    0536*   @chunkpointer: dl 0 ; pointer to current chunk
041CCB             0537*   
041CCB             0538*   ; File information structure (FILINFO)
041CCB             0539*   @filinfo:
041CCB 00 00 00 00 0540*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041CCF 00 00       0541*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041CD1 00 00       0542*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041CD3 00          0543*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041CD4 00 00 00 00 0544*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041CE1 00 00 00 00 0545*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041DE1             0040        include "vdu_fonts.inc"
041DE1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041E00             0002*   ; select font
041E00             0003*   ; inputs: hl = bufferId, a = font flags
041E00             0004*   ; Flags:
041E00             0005*   ; Bit	Description
041E00             0006*   ; 0	Adjust cursor position to ensure text baseline is aligned
041E00             0007*   ;   0: Do not adjust cursor position (best for changing font on a new line)
041E00             0008*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
041E00             0009*   ; 1-7	Reserved for future use
041E00             0010*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041E00             0011*   vdu_font_select:
041E00 22 17 1E 04 0012*       ld (@bufferId),hl
041E04 32 19 1E 04 0013*       ld (@flags),a
041E08 21 13 1E 04 0014*       ld hl,@cmd
041E0C 01 07 00 00 0015*       ld bc,@end-@cmd
041E10 5B DF       0016*       rst.lil $18
041E12 C9          0017*       ret
041E13 17 00 95 00 0018*   @cmd: db 23, 0, 0x95, 0
041E17 00 00       0019*   @bufferId: dw 0x0000
041E19 00          0020*   @flags: db 0x00
041E1A             0021*   @end:
041E1A             0022*   
041E1A             0023*   ; create font from buffer
041E1A             0024*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041E1A             0025*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041E1A             0026*   vdu_font_create:
041E1A 22 3F 1E 04 0027*       ld (@bufferId),hl
041E1E ED 53 41 1E 0028*       ld (@width),de ; also loads height
       04          
041E23 32 44 1E 04 0029*       ld (@flags),a
041E27 7A          0030*       ld a,d ; height
041E28 32 43 1E 04 0031*       ld (@ascent),a ; ascent = height
041E2C             0032*   ; consolidate buffer
041E2C CD 3B 1C 04 0033*       call vdu_consolidate_buffer
041E30             0034*   ; create font
041E30 21 3B 1E 04 0035*       ld hl,@cmd
041E34 01 0A 00 00 0036*       ld bc,@end-@cmd
041E38 5B DF       0037*       rst.lil $18
041E3A C9          0038*       ret
041E3B 17 00 95 01 0039*   @cmd: db 23, 0, 0x95, 1
041E3F 00 00       0040*   @bufferId: dw 0x0000
041E41 00          0041*   @width: db 0x00
041E42 00          0042*   @height: db 0x00
041E43 00          0043*   @ascent: db 0x00
041E44 00          0044*   @flags: db 0x00
041E45             0045*   @end:
041E45             0046*   
041E45             0047*   ; set or adjust font property
041E45             0048*   ; inputs: hl = bufferId, a = field, de = value
041E45             0049*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041E45             0050*   vdu_font_property:
041E45 22 61 1E 04 0051*       ld (@bufferId),hl
041E49 32 63 1E 04 0052*       ld (@field),a
041E4D ED 53 64 1E 0053*       ld (@value),de
       04          
041E52 21 5D 1E 04 0054*       ld hl,@cmd
041E56 01 09 00 00 0055*       ld bc,@end-@cmd
041E5A 5B DF       0056*       rst.lil $18
041E5C C9          0057*       ret
041E5D 17 00 95 02 0058*   @cmd: db 23, 0, 0x95, 2
041E61 00 00       0059*   @bufferId: dw 0x0000
041E63 00          0060*   @field: db 0x00
041E64 00 00       0061*   @value: dw 0x0000
041E66 00          0062*   @end: db 0x00 ; padding
041E67             0063*   
041E67             0064*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041E67             0065*   
041E67             0066*   ; Clear/Delete font
041E67             0067*   ; inputs: hl = bufferId
041E67             0068*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041E67             0069*   vdu_font_clear:
041E67 22 7A 1E 04 0070*       ld (@bufferId),hl
041E6B 21 76 1E 04 0071*       ld hl,@cmd
041E6F 01 06 00 00 0072*       ld bc,@end-@cmd
041E73 5B DF       0073*       rst.lil $18
041E75 C9          0074*       ret
041E76 17 00 95 04 0075*   @cmd: db 23, 0, 0x95, 4
041E7A 00 00       0076*   @bufferId: dw 0x0000
041E7C 00          0077*   @end: db 0x00 ; padding
041E7D             0078*   
041E7D             0079*   ; Copy system font to buffer
041E7D             0080*   ; inputs: hl = bufferId
041E7D             0081*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041E7D             0082*   vdu_font_copy_system:
041E7D 22 90 1E 04 0083*       ld (@bufferId),hl
041E81 21 8C 1E 04 0084*       ld hl,@cmd
041E85 01 06 00 00 0085*       ld bc,@end-@cmd
041E89 5B DF       0086*       rst.lil $18
041E8B C9          0087*       ret
041E8C 17 00 95 05 0088*   @cmd: db 23, 0, 0x95, 5
041E90 00 00       0089*   @bufferId: dw 0x0000
041E92 00          0090*   @end: db 0x00 ; padding
041E93             0041        include "vdu_plot.inc"
041E93 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
041F00             0002*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F00             0003*   ; PLOT code 	(Decimal) 	Effect
041F00             0004*   ; &00-&07 	0-7 	Solid line, includes both ends
041F00             0005*   plot_sl_both: equ 0x00
041F00             0006*   
041F00             0007*   ; &08-&0F 	8-15 	Solid line, final point omitted
041F00             0008*   plot_sl_first: equ 0x08
041F00             0009*   
041F00             0010*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
041F00             0011*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
041F00             0012*   
041F00             0013*   ; &20-&27 	32-39 	Solid line, first point omitted
041F00             0014*   plot_sl_last: equ 0x20
041F00             0015*   
041F00             0016*   ; &28-&2F 	40-47 	Solid line, both points omitted
041F00             0017*   plot_sl_none: equ 0x28
041F00             0018*   
041F00             0019*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
041F00             0020*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
041F00             0021*   
041F00             0022*   ; &40-&47 	64-71 	Point plot
041F00             0023*   plot_pt: equ 0x40
041F00             0024*   
041F00             0025*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
041F00             0026*   plot_lf_lr_non_bg: equ 0x48
041F00             0027*   
041F00             0028*   ; &50-&57 	80-87 	Triangle fill
041F00             0029*   plot_tf: equ 0x50
041F00             0030*   
041F00             0031*   ; &58-&5F 	88-95 	Line fill right to background §§
041F00             0032*   plot_lf_r_bg: equ 0x58
041F00             0033*   
041F00             0034*   ; &60-&67 	96-103 	Rectangle fill
041F00             0035*   plot_rf: equ 0x60
041F00             0036*   
041F00             0037*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
041F00             0038*   plot_lf_lr_fg: equ 0x60
041F00             0039*   
041F00             0040*   ; &70-&77 	112-119 	Parallelogram fill
041F00             0041*   plot_pf: equ 0x70
041F00             0042*   
041F00             0043*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
041F00             0044*   plot_lf_r_non_fg: equ 0x78
041F00             0045*   
041F00             0046*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
041F00             0047*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
041F00             0048*   
041F00             0049*   ; &90-&97 	144-151 	Circle outline
041F00             0050*   plot_co: equ 0x90
041F00             0051*   
041F00             0052*   ; &98-&9F 	152-159 	Circle fill
041F00             0053*   plot_cf: equ 0x98
041F00             0054*   
041F00             0055*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
041F00             0056*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
041F00             0057*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
041F00             0058*   
041F00             0059*   ; &B8-&BF 	184-191 	Rectangle copy/move
041F00             0060*   plot_rcm: equ 0xB8
041F00             0061*   
041F00             0062*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
041F00             0063*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
041F00             0064*   ; &D0-&D7 	208-215 	Not defined
041F00             0065*   ; &D8-&DF 	216-223 	Not defined
041F00             0066*   ; &E0-&E7 	224-231 	Not defined
041F00             0067*   
041F00             0068*   ; &E8-&EF 	232-239 	Bitmap plot §
041F00             0069*   plot_bmp: equ 0xE8
041F00             0070*   
041F00             0071*   ; &F0-&F7 	240-247 	Not defined
041F00             0072*   ; &F8-&FF 	248-255 	Not defined
041F00             0073*   
041F00             0074*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
041F00             0075*   ; Agon Console8 VDP 2.2.0
041F00             0076*   
041F00             0077*   ; Within each group of eight plot codes, the effects are as follows:
041F00             0078*   ; Plot code 	Effect
041F00             0079*   ; 0 	Move relative
041F00             0080*   mv_rel: equ 0
041F00             0081*   
041F00             0082*   ; 1 	Plot relative in current foreground colour
041F00             0083*   dr_rel_fg: equ 1
041F00             0084*   
041F00             0085*   ; 2 	Not supported (Plot relative in logical inverse colour)
041F00             0086*   ; 3 	Plot relative in current background colour
041F00             0087*   dr_rel_bg: equ 3
041F00             0088*   
041F00             0089*   ; 4 	Move absolute
041F00             0090*   mv_abs: equ 4
041F00             0091*   
041F00             0092*   ; 5 	Plot absolute in current foreground colour
041F00             0093*   dr_abs_fg: equ 5
041F00             0094*   
041F00             0095*   ; 6 	Not supported (Plot absolute in logical inverse colour)
041F00             0096*   ; 7 	Plot absolute in current background colour
041F00             0097*   dr_abs_bg: equ 7
041F00             0098*   
041F00             0099*   ; Codes 0-3 use the position data provided as part of the command
041F00             0100*   ; as a relative position, adding the position given to the current
041F00             0101*   ; graphical cursor position. Codes 4-7 use the position data provided
041F00             0102*   ; as part of the command as an absolute position, setting the current
041F00             0103*   ; graphical cursor position to the position given.
041F00             0104*   
041F00             0105*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
041F00             0106*   ; current pixel colour. These operations cannot currently be supported
041F00             0107*   ; by the graphics system the Agon VDP uses, so these codes are not
041F00             0108*   ; supported. Support for these codes may be added in a future version
041F00             0109*   ; of the VDP firmware.
041F00             0110*   
041F00             0111*   ; 16 colour palette constants
041F00             0112*   c_black: equ 0
041F00             0113*   c_red_dk: equ 1
041F00             0114*   c_green_dk: equ 2
041F00             0115*   c_yellow_dk: equ 3
041F00             0116*   c_blue_dk: equ 4
041F00             0117*   c_magenta_dk: equ 5
041F00             0118*   c_cyan_dk: equ 6
041F00             0119*   c_grey: equ 7
041F00             0120*   c_grey_dk: equ 8
041F00             0121*   c_red: equ 9
041F00             0122*   c_green: equ 10
041F00             0123*   c_yellow: equ 11
041F00             0124*   c_blue: equ 12
041F00             0125*   c_magenta: equ 13
041F00             0126*   c_cyan: equ 14
041F00             0127*   c_white: equ 15
041F00             0128*   
041F00             0129*   ; VDU 25, mode, x; y;: PLOT command
041F00             0130*   ; inputs: a=mode, bc=x0, de=y0
041F00             0131*   vdu_plot:
041F00 32 1A 1F 04 0132*       ld (@mode),a
041F04 ED 43 1B 1F 0133*       ld (@x0),bc
       04          
041F09 ED 53 1D 1F 0134*       ld (@y0),de
       04          
041F0E 21 19 1F 04 0135*   	ld hl,@cmd
041F12 01 06 00 00 0136*   	ld bc,@end-@cmd
041F16 5B DF       0137*   	rst.lil $18
041F18 C9          0138*   	ret
041F19 19          0139*   @cmd:   db 25
041F1A 00          0140*   @mode:  db 0
041F1B 00 00       0141*   @x0: 	dw 0
041F1D 00 00       0142*   @y0: 	dw 0
041F1F 00          0143*   @end:   db 0 ; extra byte to soak up deu
041F20             0144*   
041F20             0145*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F20             0146*   ; &E8-&EF 	232-239 	Bitmap plot §
041F20             0147*   ; VDU 25, mode, x; y;: PLOT command
041F20             0148*   ; inputs: bc=x0, de=y0
041F20             0149*   ; prerequisites: vdu_buff_select
041F20             0150*   vdu_plot_bmp:
041F20 ED 43 37 1F 0151*       ld (@x0),bc
       04          
041F25 ED 53 39 1F 0152*       ld (@y0),de
       04          
041F2A 21 35 1F 04 0153*   	ld hl,@cmd
041F2E 01 06 00 00 0154*   	ld bc,@end-@cmd
041F32 5B DF       0155*   	rst.lil $18
041F34 C9          0156*   	ret
041F35 19          0157*   @cmd:   db 25
041F36 ED          0158*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041F37 00 00       0159*   @x0: 	dw 0x0000
041F39 00 00       0160*   @y0: 	dw 0x0000
041F3B 00          0161*   @end:   db 0x00 ; padding
041F3C             0162*   
041F3C             0163*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F3C             0164*   ; &E8-&EF 	232-239 	Bitmap plot §
041F3C             0165*   ; VDU 25, mode, x; y;: PLOT command
041F3C             0166*   ; inputs: bc=x0, de=y0
041F3C             0167*   ; USING 16.8 FIXED POINT COORDINATES
041F3C             0168*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041F3C             0169*   ;   the fractional portiion of the inputs are truncated
041F3C             0170*   ;   leaving only the 16-bit integer portion
041F3C             0171*   ; prerequisites: vdu_buff_select
041F3C             0172*   vdu_plot_bmp168:
041F3C             0173*   ; populate in the reverse of normal to keep the
041F3C             0174*   ; inputs from stomping on each other
041F3C ED 53 5A 1F 0175*       ld (@y0-1),de
       04          
041F41 ED 43 58 1F 0176*       ld (@x0-1),bc
       04          
041F46 3E ED       0177*       ld a,plot_bmp+dr_abs_fg ; 0xED
041F48 32 58 1F 04 0178*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
041F4C 21 57 1F 04 0179*   	ld hl,@cmd
041F50 01 06 00 00 0180*   	ld bc,@end-@cmd
041F54 5B DF       0181*   	rst.lil $18
041F56 C9          0182*   	ret
041F57 19          0183*   @cmd:   db 25
041F58 ED          0184*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041F59 00 00       0185*   @x0: 	dw 0x0000
041F5B 00 00       0186*   @y0: 	dw 0x0000
041F5D             0187*   @end:  ; no padding required b/c we shifted de right
041F5D             0188*   
041F5D             0189*   ; draw a filled rectangle
041F5D             0190*   vdu_plot_rf:
041F5D ED 43 84 1F 0191*       ld (@x0),bc
       04          
041F62 ED 53 86 1F 0192*       ld (@y0),de
       04          
041F67 DD 22 8A 1F 0193*       ld (@x1),ix
       04          
041F6C FD 22 8C 1F 0194*       ld (@y1),iy
       04          
041F71 3E 19       0195*       ld a,25 ; we have to reload the 2nd plot command
041F73 32 88 1F 04 0196*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041F77 21 82 1F 04 0197*   	ld hl,@cmd0
041F7B 01 0C 00 00 0198*   	ld bc,@end-@cmd0
041F7F 5B DF       0199*   	rst.lil $18
041F81 C9          0200*       ret
041F82 19          0201*   @cmd0:  db 25 ; plot
041F83 04          0202*   @arg0:  db plot_sl_both+mv_abs
041F84 00 00       0203*   @x0:    dw 0x0000
041F86 00 00       0204*   @y0:    dw 0x0000
041F88 19          0205*   @cmd1:  db 25 ; plot
041F89 65          0206*   @arg1:  db plot_rf+dr_abs_fg
041F8A 00 00       0207*   @x1:    dw 0x0000
041F8C 00 00       0208*   @y1:    dw 0x0000
041F8E 00          0209*   @end:   db 0x00 ; padding
041F8F             0210*   
041F8F             0211*   ; draw a filled circle
041F8F             0212*   vdu_plot_cf:
041F8F ED 43 B6 1F 0213*       ld (@x0),bc
       04          
041F94 ED 53 B8 1F 0214*       ld (@y0),de
       04          
041F99 DD 22 BC 1F 0215*       ld (@x1),ix
       04          
041F9E FD 22 BE 1F 0216*       ld (@y1),iy
       04          
041FA3 3E 19       0217*       ld a,25 ; we have to reload the 2nd plot command
041FA5 32 BA 1F 04 0218*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041FA9 21 B4 1F 04 0219*   	ld hl,@cmd0
041FAD 01 0C 00 00 0220*   	ld bc,@end-@cmd0
041FB1 5B DF       0221*   	rst.lil $18
041FB3 C9          0222*       ret
041FB4 19          0223*   @cmd0:  db 25 ; plot
041FB5 04          0224*   @arg0:  db plot_sl_both+mv_abs
041FB6 00 00       0225*   @x0:    dw 0x0000
041FB8 00 00       0226*   @y0:    dw 0x0000
041FBA 19          0227*   @cmd1:  db 25 ; plot
041FBB 9D          0228*   @arg1:  db plot_cf+dr_abs_fg
041FBC 00 00       0229*   @x1:    dw 0x0000
041FBE 00 00       0230*   @y1:    dw 0x0000
041FC0 00          0231*   @end:   db 0x00 ; padding
041FC1             0042        include "vdu_sprites.inc"
041FC1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042000             0002*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
042000             0003*   ; the VDP can support up to 256 sprites. They must be defined
042000             0004*   ; contiguously, and so the first sprite is sprite 0.
042000             0005*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
042000             0006*   ; Once a selection of sprites have been defined, you can activate
042000             0007*   ; them using the VDU 23, 27, 7, n command, where n is the number
042000             0008*   ; of sprites to activate. This will activate the first n sprites,
042000             0009*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
042000             0010*   
042000             0011*   ; A single sprite can have multiple "frames", referring to
042000             0012*   ; different bitmaps.
042000             0013*   ; (These bitmaps do not need to be the same size.)
042000             0014*   ; This allows a sprite to include an animation sequence,
042000             0015*   ; which can be stepped through one frame at a time, or picked
042000             0016*   ; in any order.
042000             0017*   
042000             0018*   ; Any format of bitmap can be used as a sprite frame. It should
042000             0019*   ; be noted however that "native" format bitmaps are not
042000             0020*   ; recommended for use as sprite frames, as they cannot get
042000             0021*   ; erased from the screen. (As noted above, the "native" bitmap
042000             0022*   ; format is not really intended for general use.) This is part
042000             0023*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
042000             0024*   ; screen are now stored in RGBA2222 format.
042000             0025*   
042000             0026*   ; An "active" sprite can be hidden, so it will stop being drawn,
042000             0027*   ; and then later shown again.
042000             0028*   
042000             0029*   ; Moving sprites around the screen is done by changing the
042000             0030*   ; position of the sprite. This can be done either by setting
042000             0031*   ; the absolute position of the sprite, or by moving the sprite
042000             0032*   ; by a given number of pixels. (Sprites are positioned using
042000             0033*   ; pixel coordinates, and not by the logical OS coordinate system.)
042000             0034*   ; In the current sprite system, sprites will not update their
042000             0035*   ; position on-screen until either another drawing operation is
042000             0036*   ; performed or an explicit VDU 23, 27, 15 command is performed.
042000             0037*   
042000             0038*   ; VDU 23, 27, 4, n: Select sprite n
042000             0039*   ; inputs: a is the 8-bit sprite id
042000             0040*   vdu_sprite_select:
042000 32 12 20 04 0041*       ld (@sprite),a
042004 21 0F 20 04 0042*       ld hl,@cmd
042008 01 04 00 00 0043*       ld bc,@end-@cmd
04200C 5B DF       0044*       rst.lil $18
04200E C9          0045*       ret
04200F 17 1B 04    0046*   @cmd:    db 23,27,4
042012 00          0047*   @sprite: db 0x00
042013             0048*   @end:
042013             0049*   
042013             0050*   ; VDU 23, 27, 5: Clear frames in current sprite
042013             0051*   ; inputs: none
042013             0052*   ; prerequisites: vdu_sprite_select
042013             0053*   vdu_sprite_clear_frames:
042013 21 1E 20 04 0054*       ld hl,@cmd
042017 01 03 00 00 0055*       ld bc,@end-@cmd
04201B 5B DF       0056*       rst.lil $18
04201D C9          0057*       ret
04201E 17 1B 05    0058*   @cmd: db 23,27,5
042021             0059*   @end:
042021             0060*   
042021             0061*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
042021             0062*   ; inputs: a is the 8-bit bitmap number
042021             0063*   ; prerequisites: vdu_sprite_select
042021             0064*   vdu_sprite_add_bmp:
042021 32 33 20 04 0065*       ld (@bmp),a
042025 21 30 20 04 0066*       ld hl,@cmd
042029 01 04 00 00 0067*       ld bc,@end-@cmd
04202D 5B DF       0068*       rst.lil $18
04202F C9          0069*       ret
042030 17 1B 06    0070*   @cmd: db 23,27,6
042033 00          0071*   @bmp: db 0x00
042034             0072*   @end:
042034             0073*   
042034             0074*   ; VDU 23, 27, 7, n: Activate n sprites
042034             0075*   ; inputs: a is the number of sprites to activate
042034             0076*   ; prerequisites: each sprite activated must have at least one frame attached to it
042034             0077*   vdu_sprite_activate:
042034 32 46 20 04 0078*       ld (@num),a
042038 21 43 20 04 0079*       ld hl,@cmd
04203C 01 04 00 00 0080*       ld bc,@end-@cmd
042040 5B DF       0081*       rst.lil $18
042042 C9          0082*       ret
042043 17 1B 07    0083*   @cmd: db 23,27,7
042046 00          0084*   @num: db 0x00
042047             0085*   @end:
042047             0086*   
042047             0087*   ; VDU 23, 27, 8: Select next frame of current sprite
042047             0088*   ; inputs: none
042047             0089*   ; prerequisites: vdu_sprite_select
042047             0090*   vdu_sprite_next_frame:
042047 21 52 20 04 0091*       ld hl,@cmd
04204B 01 03 00 00 0092*       ld bc,@end-@cmd
04204F 5B DF       0093*       rst.lil $18
042051 C9          0094*       ret
042052 17 1B 08    0095*   @cmd: db 23,27,8
042055             0096*   @end:
042055             0097*   
042055             0098*   ; VDU 23, 27, 9: Select previous frame of current sprite
042055             0099*   ; inputs: none
042055             0100*   ; prerequisites: vdu_sprite_select
042055             0101*   vdu_sprite_prev_frame:
042055 21 60 20 04 0102*       ld hl,@cmd
042059 01 03 00 00 0103*       ld bc,@end-@cmd
04205D 5B DF       0104*       rst.lil $18
04205F C9          0105*       ret
042060 17 1B 09    0106*   @cmd: db 23,27,9
042063             0107*   @end:
042063             0108*   
042063             0109*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
042063             0110*   ; inputs: a is frame number to select
042063             0111*   ; prerequisites: vdu_sprite_select
042063             0112*   vdu_sprite_select_frame:
042063 32 75 20 04 0113*       ld (@frame),a
042067 21 72 20 04 0114*       ld hl,@cmd
04206B 01 04 00 00 0115*       ld bc,@end-@cmd
04206F 5B DF       0116*       rst.lil $18
042071 C9          0117*       ret
042072 17 1B 0A    0118*   @cmd:    db 23,27,10
042075 00          0119*   @frame:  db 0x00
042076             0120*   @end:
042076             0121*   
042076             0122*   ; VDU 23, 27, 11: Show current sprite
042076             0123*   ; inputs: none
042076             0124*   ; prerequisites: vdu_sprite_select
042076             0125*   vdu_sprite_show:
042076 21 81 20 04 0126*       ld hl,@cmd
04207A 01 03 00 00 0127*       ld bc,@end-@cmd
04207E 5B DF       0128*       rst.lil $18
042080 C9          0129*       ret
042081 17 1B 0B    0130*   @cmd: db 23,27,11
042084             0131*   @end:
042084             0132*   
042084             0133*   ; VDU 23, 27, 12: Hide current sprite
042084             0134*   ; inputs: none
042084             0135*   ; prerequisites: vdu_sprite_select
042084             0136*   vdu_sprite_hide:
042084 21 8F 20 04 0137*       ld hl,@cmd
042088 01 03 00 00 0138*       ld bc,@end-@cmd
04208C 5B DF       0139*       rst.lil $18
04208E C9          0140*       ret
04208F 17 1B 0C    0141*   @cmd: db 23,27,12
042092             0142*   @end:
042092             0143*   
042092             0144*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042092             0145*   ; inputs: bc is x coordinate, de is y coordinate
042092             0146*   ; prerequisites: vdu_sprite_select
042092             0147*   vdu_sprite_move_abs:
042092 ED 43 AA 20 0148*       ld (@xpos),bc
       04          
042097 ED 53 AC 20 0149*       ld (@ypos),de
       04          
04209C 21 A7 20 04 0150*       ld hl,@cmd
0420A0 01 07 00 00 0151*       ld bc,@end-@cmd
0420A4 5B DF       0152*       rst.lil $18
0420A6 C9          0153*       ret
0420A7 17 1B 0D    0154*   @cmd:  db 23,27,13
0420AA 00 00       0155*   @xpos: dw 0x0000
0420AC 00 00       0156*   @ypos: dw 0x0000
0420AE 00          0157*   @end:  db 0x00 ; padding
0420AF             0158*   
0420AF             0159*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0420AF             0160*   ; inputs: bc is x coordinate, de is y coordinate
0420AF             0161*   ; prerequisites: vdu_sprite_select
0420AF             0162*   vdu_sprite_move_rel:
0420AF ED 43 C7 20 0163*       ld (@dx),bc
       04          
0420B4 ED 53 C9 20 0164*       ld (@dy),de
       04          
0420B9 21 C4 20 04 0165*       ld hl,@cmd
0420BD 01 07 00 00 0166*       ld bc,@end-@cmd
0420C1 5B DF       0167*       rst.lil $18
0420C3 C9          0168*       ret
0420C4 17 1B 0E    0169*   @cmd: db 23,27,14
0420C7 00 00       0170*   @dx:  dw 0x0000
0420C9 00 00       0171*   @dy:  dw 0x0000
0420CB 00          0172*   @end: db 0x00 ; padding
0420CC             0173*   
0420CC             0174*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
0420CC             0175*   ; USING 16.8 FIXED POINT COORDINATES
0420CC             0176*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
0420CC             0177*   ;   the fractional portiion of the inputs are truncated
0420CC             0178*   ;   leaving only the 16-bit integer portion
0420CC             0179*   ; prerequisites: vdu_sprite_select
0420CC             0180*   vdu_sprite_move_abs168:
0420CC             0181*   ; offset inputs by the gfx origin
0420CC             0182*   ; y coordinate
0420CC 21 00 00 00 0183*       ld hl,origin_top*256
0420D0 19          0184*       add hl,de
0420D1 22 F3 20 04 0185*       ld (@ypos-1),hl
0420D5             0186*   ; x coordinate
0420D5 21 00 80 00 0187*       ld hl,origin_left*256
0420D9 09          0188*       add hl,bc
0420DA 22 F1 20 04 0189*       ld (@xpos-1),hl
0420DE             0190*   ; prepare vdu command
0420DE 3E 0D       0191*       ld a,13       ; restore the final byte of the command
0420E0 32 F1 20 04 0192*       ld (@cmd+2),a ; string that got stomped on by bcu
0420E4 21 EF 20 04 0193*       ld hl,@cmd
0420E8 01 07 00 00 0194*       ld bc,@end-@cmd
0420EC 5B DF       0195*       rst.lil $18
0420EE C9          0196*       ret
0420EF 17 1B 0D    0197*   @cmd:  db 23,27,13
0420F2 00 00       0198*   @xpos: dw 0x0000
0420F4 00 00       0199*   @ypos: dw 0x0000
0420F6             0200*   @end:  ; no padding required b/c we shifted de right
0420F6             0201*   
0420F6             0202*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0420F6             0203*   ; USING 16.8 FIXED POINT COORDINATES
0420F6             0204*   ; inputs: ub.c is dx, ud.e is dy
0420F6             0205*   ;   the fractional portiion of the inputs are truncated
0420F6             0206*   ;   leaving only the 16-bit integer portion
0420F6             0207*   ; prerequisites: vdu_sprite_select
0420F6             0208*   vdu_sprite_move_rel168:
0420F6             0209*   ; populate in the reverse of normal to keep the
0420F6             0210*   ; inputs from stomping on each other
0420F6 ED 53 15 21 0211*       ld (@dy-1),de
       04          
0420FB ED 43 13 21 0212*       ld (@dx-1),bc
       04          
042100 3E 0E       0213*       ld a,14       ; restore the final byte of the command
042102 32 13 21 04 0214*       ld (@cmd+2),a ; string that got stomped on by bcu
042106 21 11 21 04 0215*       ld hl,@cmd
04210A 01 07 00 00 0216*       ld bc,@end-@cmd
04210E 5B DF       0217*       rst.lil $18
042110 C9          0218*       ret
042111 17 1B 0E    0219*   @cmd:  db 23,27,14
042114 00 00       0220*   @dx: dw 0x0000
042116 00 00       0221*   @dy: dw 0x0000
042118             0222*   @end:  ; no padding required b/c we shifted de right
042118             0223*   
042118             0224*   ; VDU 23, 27, 15: Update the sprites in the GPU
042118             0225*   ; inputs: none
042118             0226*   vdu_sprite_update:
042118 21 23 21 04 0227*       ld hl,@cmd
04211C 01 03 00 00 0228*       ld bc,@end-@cmd
042120 5B DF       0229*       rst.lil $18
042122 C9          0230*       ret
042123 17 1B 0F    0231*   @cmd: db 23,27,15
042126             0232*   @end:
042126             0233*   
042126             0234*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042126             0235*   ; inputs: none
042126             0236*   vdu_sprite_bmp_reset:
042126 21 31 21 04 0237*       ld hl,@cmd
04212A 01 03 00 00 0238*       ld bc,@end-@cmd
04212E 5B DF       0239*       rst.lil $18
042130 C9          0240*       ret
042131 17 1B 10    0241*   @cmd: db 23,27,16
042134             0242*   @end:
042134             0243*   
042134             0244*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042134             0245*   ; inputs: none
042134             0246*   vdu_sprite_reset:
042134 21 3F 21 04 0247*       ld hl,@cmd
042138 01 03 00 00 0248*       ld bc,@end-@cmd
04213C 5B DF       0249*       rst.lil $18
04213E C9          0250*       ret
04213F 17 1B 11    0251*   @cmd: db 23,27,17
042142             0252*   @end:
042142             0253*   
042142             0254*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042142             0255*   ; inputs: a is the GCOL paint mode
042142             0256*   ; prerequisites: vdu_sprite_select
042142             0257*   vdu_sprite_set_gcol:
042142 32 54 21 04 0258*       ld (@mode),a
042146 21 51 21 04 0259*       ld hl,@cmd
04214A 01 04 00 00 0260*       ld bc,@end-@cmd
04214E 5B DF       0261*       rst.lil $18
042150 C9          0262*       ret
042151 17 1B 12    0263*   @cmd:  db 23,27,18
042154 00          0264*   @mode: db 0x00
042155             0265*   @end:
042155             0266*   
042155             0267*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
042155             0268*   ; inputs: hl=bufferId
042155             0269*   ; prerequisites: vdu_sprite_select
042155             0270*   vdu_sprite_add_buff:
042155 22 67 21 04 0271*       ld (@bufferId),hl
042159 21 64 21 04 0272*       ld hl,@cmd
04215D 01 05 00 00 0273*       ld bc,@end-@cmd
042161 5B DF       0274*       rst.lil $18
042163 C9          0275*       ret
042164 17 1B 26    0276*   @cmd:      db 23,27,0x26
042167 00 00       0277*   @bufferId: dw 0x0000
042169 00          0278*   @end:      db 0x00 ; padding
04216A             0043    
04216A             0044    ; APPLICATION INCLUDES
04216A             0045        include "ascii.inc"
04216A             0001*   loading_ui:
04216A 57 45 4C 43 0002*       db "WELCOME TO ...",13,10
       4F 4D 45 20 
       54 4F 20 2E 
       2E 2E 0D 0A 
04217A 0D 0A       0003*       db 13,10
04217C 20 20 20 20 0004*       db 32,32,32,32,32,32,32,32,95,95,32,32,32,32,95,95,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,95,13,10
       20 20 20 20 
       5F 5F 20 20 
       20 20 5F 5F 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 5F 5F 0D 
       0A          
0421A1 5F 5F 5F 5F 0005*       db 95,95,95,95,95,32,95,47,32,32,124,95,95,47,32,32,124,95,95,95,95,95,95,32,32,32,32,95,95,95,95,32,124,32,32,124,32,95,95,13,10
       5F 20 5F 2F 
       20 20 7C 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 20 5F 
       5F 5F 5F 20 
       7C 20 20 7C 
       20 5F 5F 0D 
       0A          
0421CA 5C 5F 5F 20 0006*       db 92,95,95,32,32,92,32,32,32,95,95,92,32,32,32,95,95,92,95,95,32,32,92,32,95,47,32,95,95,95,92,124,32,32,124,47,32,47,13,10
       20 5C 20 20 
       20 5F 5F 5C 
       20 20 20 5F 
       5F 5C 5F 5F 
       20 20 5C 20 
       5F 2F 20 5F 
       5F 5F 5C 7C 
       20 20 7C 2F 
       20 2F 0D 0A 
0421F2 20 2F 20 5F 0007*       db 32,47,32,95,95,32,92,124,32,32,124,32,32,124,32,32,124,32,32,47,32,95,95,32,92,32,32,92,95,95,95,124,32,32,32,32,60,13,10
       5F 20 5C 7C 
       20 20 7C 20 
       20 7C 20 20 
       7C 20 20 2F 
       20 5F 5F 20 
       5C 20 20 5C 
       5F 5F 5F 7C 
       20 20 20 20 
       3C 0D 0A    
042219 28 5F 5F 5F 0008*       db 40,95,95,95,95,32,32,47,95,95,124,32,32,124,95,95,124,32,40,95,95,95,95,32,32,47,92,95,95,95,32,32,62,95,95,124,95,32,92,13,10
       5F 20 20 2F 
       5F 5F 7C 20 
       20 7C 5F 5F 
       7C 20 28 5F 
       5F 5F 5F 20 
       20 2F 5C 5F 
       5F 5F 20 20 
       3E 5F 5F 7C 
       5F 20 5C 0D 
       0A          
042242 20 20 20 20 0009*       db 32,32,32,32,32,92,47,32,95,95,95,95,95,32,32,32,32,95,95,32,32,46,95,95,47,32,32,32,32,32,92,47,32,32,32,32,32,92,47,13,10
       20 5C 2F 20 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 20 
       20 2E 5F 5F 
       2F 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 5C 2F 0D 
       0A          
04226B 20 20 5F 5F 0010*       db 32,32,95,95,95,95,95,47,32,95,95,95,95,92,32,95,47,32,32,124,95,124,32,32,124,95,95,32,32,32,95,95,95,95,13,10
       5F 5F 5F 2F 
       20 5F 5F 5F 
       5F 5C 20 5F 
       2F 20 20 7C 
       5F 7C 20 20 
       7C 5F 5F 20 
       20 20 5F 5F 
       5F 5F 0D 0A 
04228F 20 2F 20 20 0011*       db 32,47,32,32,95,32,92,32,32,32,95,95,92,32,32,92,32,32,32,95,95,92,32,32,124,32,32,92,95,47,32,95,95,32,92,13,10
       5F 20 5C 20 
       20 20 5F 5F 
       5C 20 20 5C 
       20 20 20 5F 
       5F 5C 20 20 
       7C 20 20 5C 
       5F 2F 20 5F 
       5F 20 5C 0D 
       0A          
0422B4 28 20 20 3C 0012*       db 40,32,32,60,95,62,32,41,32,32,124,32,32,32,32,32,124,32,32,124,32,124,32,32,32,89,32,32,92,32,32,95,95,95,47,13,10
       5F 3E 20 29 
       20 20 7C 20 
       20 20 20 20 
       7C 20 20 7C 
       20 7C 20 20 
       20 59 20 20 
       5C 20 20 5F 
       5F 5F 2F 0D 
       0A          
0422D9 20 5C 5F 5F 0013*       db 32,92,95,95,95,95,47,124,95,95,124,32,32,32,32,32,124,95,95,124,32,124,95,95,95,124,32,32,47,92,95,95,95,32,32,62,13,10
       5F 5F 2F 7C 
       5F 5F 7C 20 
       20 20 20 20 
       7C 5F 5F 7C 
       20 7C 5F 5F 
       5F 7C 20 20 
       2F 5C 5F 5F 
       5F 20 20 3E 
       0D 0A       
0422FF 5F 5F 5F 5F 0014*       db 95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,32,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
04233D 5C 5F 5F 5F 0015*       db 92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,13,10
       5F 5F 5F 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       0D 0A       
04237B 20 7C 20 20 0016*       db 32,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       20 20 20 5F 
       5F 5F 2F 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 0D 
       0A          
0423B8 20 7C 20 20 0017*       db 32,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       20 20 7C 20 
       20 20 7C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       0D 0A       
0423F6 20 7C 5F 5F 0018*       db 32,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 7C 20 
       20 20 7C 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       0D 0A       
042434 20 5F 5F 5F 0019*       db 32,95,95,95,95,95,95,95,32,32,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,92,47,95,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 0D 0A 
04247C 20 5C 20 20 0020*       db 32,92,32,32,32,32,32,32,92,32,124,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,47,32,32,32,95,95,95,95,95,47,13,10
       20 20 20 20 
       5C 20 7C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       2F 20 20 20 
       5F 5F 5F 5F 
       5F 2F 0D 0A 
0424C4 20 2F 20 20 0021*       db 32,47,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,32,92,95,95,95,95,95,32,32,92,13,10
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 20 
       5C 5F 5F 5F 
       5F 5F 20 20 
       5C 0D 0A    
04250B 2F 20 20 20 0022*       db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 0D 0A 
042553 5C 5F 5F 5F 0023*       db 92,95,95,95,95,124,95,95,32,32,47,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 0D 0A 
04259B 20 20 20 20 0024*       db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 5C 
       2F 0D 0A    
0425E2 4C 4F 41 44 0025*       db "LOADING UI ...",0
       49 4E 47 20 
       55 49 20 2E 
       2E 2E 00    
0425F1             0046        include "collisions.inc"
0425F1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042600             0002*   ; ====== COLLISION DETECTION ======
042600             0003*   ; --- constants ---
042600             0004*   ; sprite_collisions flags
042600             0005*   ; collides_with_player: equ %00000001
042600             0006*   ; collides_with_laser: equ %00000010
042600             0007*   sprite_alive: equ 6; set when sprite is alive
042600             0008*   sprite_just_died: equ 7; set when sprite just died
042600             0009*   collide_top: equ %00001000
042600             0010*   collide_bottom: equ %00000100
042600             0011*   collide_left: equ %00000010
042600             0012*   collide_right: equ %00000001
042600             0013*   
042600 00 00 00    0014*   collision_table_pointer: dl 0x000000 ; pointer to the sprite in the group being checked for collision
042603             0015*   
042603             0016*   ; check_collision:
042603             0017*   ; Detects collision using bounding box method.
042603             0018*   ; Inputs:
042603             0019*   ;   IX -> Sprite/Tile table for Collider A
042603             0020*   ;   IY -> Sprite/Tile table for Collider B
042603             0021*   ; Outputs:
042603             0022*   ;   a = 0, zero flag set, positive sign, carry reset -> Collision detected
042603             0023*   ;   a = -1, zero flag reset, negative sign, carry set -> No collision detected
042603             0024*   ; Destroys: HL, DE, AF
042603             0025*   ; check_collision:
042603             0026*   check_collision_box:
042603             0027*   ; Test 1: (ay + ah) - by < 0
042603 21 00 00 00 0028*       ld hl,0                     ; Clear hlu
042607 DD 6E 05    0029*       ld l,(ix+sprite_y+1)        ; Load ay integer part low byte
04260A DD 66 06    0030*       ld h,(ix+sprite_y+2)        ; Load ay integer part high byte
04260D 11 00 00 00 0031*       ld de,0                     ; Clear deu and d
042611 DD 5E 1F    0032*       ld e,(ix+sprite_dim_y)      ; Load ah
042614 19          0033*       add hl,de                   ; (ay + ah)
042615 FD 5E 05    0034*       ld e,(iy+sprite_y+1)        ; Load by integer part low byte
042618 FD 56 06    0035*       ld d,(iy+sprite_y+2)        ; Load by integer part high byte
04261B AF          0036*       xor a                       ; Clear carry
04261C ED 52       0037*       sbc hl,de                   ; (ay + ah) - by
04261E FA 81 26 04 0038*       jp m,@not_collision         ; No collision if negative
042622             0039*   
042622             0040*   ; Test 2: ay - (by + bh) < 0
042622 21 00 00 00 0041*       ld hl,0                     ; Clear hlu
042626 FD 6E 05    0042*       ld l,(iy+sprite_y+1)        ; Load by integer part low byte
042629 FD 66 06    0043*       ld h,(iy+sprite_y+2)        ; Load by integer part high byte
04262C 11 00 00 00 0044*       ld de,0                     ; Clear deu and d
042630 FD 5E 1F    0045*       ld e,(iy+sprite_dim_y)      ; Load bh
042633 19          0046*       add hl,de                   ; (by + bh)
042634 DD 5E 05    0047*       ld e,(ix+sprite_y+1)        ; Load ay integer part low byte
042637 DD 56 06    0048*       ld d,(ix+sprite_y+2)        ; Load ay integer part high byte
04263A AF          0049*       xor a                       ; Clear carry
04263B ED 52       0050*       sbc hl,de                   ; (by + bh) - ay
04263D FA 81 26 04 0051*       jp m,@not_collision         ; No collision if negative
042641             0052*   
042641             0053*   ; Test 3: (ax + aw) - bx < 0
042641 21 00 00 00 0054*       ld hl,0                     ; Clear hlu
042645 DD 6E 02    0055*       ld l,(ix+sprite_x+1)        ; Load ax integer part low byte
042648 DD 66 03    0056*       ld h,(ix+sprite_x+2)        ; Load ax integer part high byte
04264B 11 00 00 00 0057*       ld de,0                     ; Clear deu and d
04264F DD 5E 1E    0058*       ld e,(ix+sprite_dim_x)      ; Load aw
042652 19          0059*       add hl,de                   ; (ax + aw)
042653 FD 5E 02    0060*       ld e,(iy+sprite_x+1)        ; Load bx integer part low byte
042656 FD 56 03    0061*       ld d,(iy+sprite_x+2)        ; Load bx integer part high byte
042659 AF          0062*       xor a                       ; Clear carry
04265A ED 52       0063*       sbc hl,de                   ; (ax + aw) - bx
04265C FA 81 26 04 0064*       jp m,@not_collision         ; No collision if negative
042660             0065*   
042660             0066*   ; Test 4: ax - (bx + bw) < 0
042660 21 00 00 00 0067*       ld hl,0                     ; Clear hlu
042664 FD 6E 02    0068*       ld l,(iy+sprite_x+1)        ; Load bx integer part low byte
042667 FD 66 03    0069*       ld h,(iy+sprite_x+2)        ; Load bx integer part high byte
04266A 11 00 00 00 0070*       ld de,0                     ; Clear deu and d
04266E FD 5E 1E    0071*       ld e,(iy+sprite_dim_x)      ; Load bw
042671 19          0072*       add hl,de                   ; (bx + bw)
042672 DD 5E 02    0073*       ld e,(ix+sprite_x+1)        ; Load ax integer part low byte
042675 DD 56 03    0074*       ld d,(ix+sprite_x+2)        ; Load ax integer part high byte
042678 AF          0075*       xor a                       ; Clear carry
042679 ED 52       0076*       sbc hl,de                   ; (bx + bw) - ax
04267B FA 81 26 04 0077*       jp m,@not_collision         ; No collision if negative
04267F             0078*   
04267F             0079*   ; If all tests pass, collision is detected
04267F             0080*   @is_collision:
04267F AF          0081*       xor a                       ; Clear accumulator and flags (a = 0)
042680 C9          0082*       ret                         ; Return with zero flag set
042681             0083*   
042681             0084*   ; No collision detected
042681             0085*   @not_collision:
042681 3D          0086*       dec a                       ; Set a to -1
042682 C9          0087*       ret                         ; Return with carry set
042683             0088*   ; End check_collision_box
042683             0089*   
042683             0090*   
042683             0091*   ; this routine detects collisions between two collidable objects,
042683             0092*   ; which can include sprites, active tiles, or any screen coordinate
042683             0093*   ; which has been set up with a sprite table structure that includes dim_x
042683             0094*   ; representing the radius of the collidable object
042683             0095*   ; inputs: ix and iy point to the colliding objects' sprite/tile table records
042683             0096*   ; outputs: uh.l = distance - sum of radii
042683             0097*   ;          zero flag set if collision detected
042683             0098*   ;          dx168 and dy168 are also populated with the signed displacements
042683             0099*   ; destroys: everything except indexes
042683             0100*   check_collision:
042683             0101*   ; ; DEBUG
042683             0102*   ;     xor a
042683             0103*   ;     dec a
042683             0104*   ;     ret
042683             0105*   ; ; END DEBUG
042683             0106*   check_collision_cartesian:
042683             0107*   ; compute dx = x1-x0
042683 DD 27 01    0108*       ld hl,(ix+sprite_x)
042686 FD 17 01    0109*       ld de,(iy+sprite_x)
042689 AF          0110*       xor a ; clear carry
04268A ED 52       0111*       sbc hl,de
04268C 22 2E 0C 04 0112*       ld (dx168),hl ; dx to scratch
042690             0113*   ; compute dy = y1-y0
042690 DD 27 04    0114*       ld hl,(ix+sprite_y)
042693 FD 17 04    0115*       ld de,(iy+sprite_y)
042696 AF          0116*       xor a ; clear carry
042697 ED 52       0117*       sbc hl,de ; hl = dy
042699 22 34 0C 04 0118*       ld (dy168),hl ; dy to scratch
04269D             0119*   ; compute euclidean distance between centers
04269D CD 3A 0C 04 0120*       call distance168 ; uh.l = distance
0426A1             0121*   ; check for overlap by summing half the radii
0426A1 DD 7E 1E    0122*       ld a,(ix+sprite_dim_x)
0426A4 CB 3F       0123*       srl a ; divide by 2
0426A6 FD 5E 1E    0124*       ld e,(iy+sprite_dim_x)
0426A9 CB 3B       0125*       srl e ; divide by 2
0426AB 83          0126*       add a,e
0426AC 11 00 00 00 0127*       ld de,0 ; clear deu and e
0426B0 57          0128*       ld d,a ; ud.e = sum of radii
0426B1 B7          0129*       or a ; clear carry
0426B2 ED 52       0130*       sbc hl,de ; uh.l = distance - sum of radii
0426B4 C8          0131*       ret z ; return collision
0426B5 F0          0132*       ret p ; return no collision
0426B6 AF          0133*       xor a ; return collision
0426B7 C9          0134*       ret
0426B8             0135*   ; end check_collision_cartesian
0426B8             0136*   
0426B8             0137*   ; check collisions of a sprite or tile against a sprite group
0426B8             0138*   ; inputs: iy = pointer to sprite or tile record being checked
0426B8             0139*   ;         ix = pointer to sprite group, b = number of records in sprite group
0426B8             0140*   check_sprite_group_collisions:
0426B8             0141*   @collision_loop:
0426B8 DD 22 00 26 0142*       ld (collision_table_pointer),ix ; update table pointer
       04          
0426BD C5          0143*       push bc ; backup loop counter
0426BE             0144*   ; check sprite_collisions sprite_alive flag to see if sprite is active
0426BE DD CB 1D 76 0145*       bit sprite_alive,(ix+sprite_collisions)
0426C2 CA D8 26 04 0146*       jp z,@next_record ; not alive so skip to next record
0426C6             0147*   ; sprite alive so check for collision
0426C6 CD 83 26 04 0148*       call check_collision
0426CA C2 D8 26 04 0149*       jp nz,@next_record ; no collision
0426CE             0150*   ; set sprite_just_died flag for each entity and return to caller
0426CE C1          0151*       pop bc ; dummy pop to balance stack
0426CF DD CB 1D FE 0152*       set sprite_just_died,(ix+sprite_collisions)
0426D3 FD CB 1D FE 0153*       set sprite_just_died,(iy+sprite_collisions)
0426D7 C9          0154*       ret
0426D8             0155*   @next_record:
0426D8 C1          0156*       pop bc ; get back our loop counter
0426D9 ED 32 40    0157*       lea ix,ix+table_record_size
0426DC 10 DA       0158*       djnz @collision_loop ; loop until we've checked all the records
0426DE             0159*   ; return to caller
0426DE AF          0160*       xor a
0426DF 3C          0161*       inc a ; resets sign flag and a to non-zero indicating no collision
0426E0 C9          0162*       ret
0426E1             0163*   ; end check_sprite_group_collisions
0426E1             0164*   
0426E1             0165*   check_enemy_collision_laser: ; check for collisions with laser
0426E1 DD 21 00 80 0166*       ld ix,player_lasers_begin
       04          
0426E6 06 04       0167*       ld b,player_lasers_max
0426E8 CD B8 26 04 0168*       call check_sprite_group_collisions
0426EC C9          0169*       ret
0426ED             0170*   ; end check_enemy_collision_laser
0426ED             0171*   
0426ED             0172*   check_enemy_collision_player: ; check for collisions with player
0426ED DD 21 00 81 0173*       ld ix,player_begin
       04          
0426F2 CD 83 26 04 0174*       call check_collision
0426F6 C0          0175*       ret nz ; no collision so nothing to do
0426F7 DD CB 1D FE 0176*       set sprite_just_died,(ix+sprite_collisions)
0426FB FD CB 1D FE 0177*       set sprite_just_died,(iy+sprite_collisions)
0426FF AF          0178*       xor a ; signal collision detected
042700 C9          0179*       ret
042701             0180*   ; end check_enemy_collision_player
042701             0181*   
042701             0182*   ; this routine vanquishes the enemy sprite
042701             0183*   ; and replaces it with an animated explosion
042701             0184*   ; destroys: everything except index registers
042701             0185*   ; returns: a=-1 to indicate enemy died, and an incandescent ball of debris and gas
042701             0186*   enemy_kill:
042701 2A 00 60 04 0187*       ld hl,(player_score)
042705 01 00 00 00 0188*       ld bc,0 ; clear bcu
042709 FD 4E 26    0189*       ld c,(iy+sprite_points)
04270C 09          0190*       add hl,bc
04270D 22 00 60 04 0191*       ld (player_score),hl
042711 C3 13 2A 04 0192*       jp spawn_explosion
042715             0193*   ; end enemy_kill
042715             0047        include "enemies.inc"
042715             0001*   move_enemies:
042715             0002*   ; initialize pointers and loop counter
042715 FD 21 40 81 0003*       ld iy,enemy_sprites_begin ; set iy to first record in table
       04          
04271A 06 07       0004*       ld b,table_num_enemy_records ; loop counter
04271C CD 54 72 04 0005*       call move_sprite_group
042720 C9          0006*       ret
042721             0007*   ; end move_enemies
042721             0048        include "enemy_fireball.inc"
042721 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042800             0002*   speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
042800             0003*   fireballs_max: equ 4
042800             0004*   
042800             0005*   fireball_defaults:
042800 03          0006*       db enemy_projectile     ; type
042801 06 01 00    0007*       dl BUF_FIREBALL_A       ; base_bufferId
042804 58 28 04    0008*       dl move_enemy_fireball  ; move_program
042807 40          0009*       db %01000000            ; collisions bit 6 signals sprite alive
042808 07          0010*       db 7                    ; dim_x
042809 07          0011*       db 7                    ; dim_y
04280A 01          0012*       db 1                    ; num_orientations
04280B 01          0013*       db 1                    ; num_animations
04280C 00          0014*       db 0                    ; animation
04280D 00          0015*       db 0                    ; animation_timer
04280E 00          0016*       db 0                    ; move_timer
04280F 00          0017*       db 0                    ; move_step
042810 00          0018*       db 0                    ; points
042811 05          0019*       db 5                    ; shield_damage
042812 00          0020*       db 0                    ; frame
042813             0021*   
042813             0022*   enemy_spawn_fireball:
042813 21 00 28 04 0023*       ld hl,fireball_defaults
042817 DD 21 00 82 0024*       ld ix,fireballs_base
       04          
04281C 06 04       0025*       ld b,fireballs_max
04281E CD BF 6F 04 0026*       call spawn_sprite_from_tile
042822 D0          0027*       ret nc ; no carry means no free sprite slots, so we go home
042823             0028*   ; other specific initialization
042823             0029*   ; ------------------------------------------------
042823             0030*   ; center the fireball on the turret
042823 11 80 03 00 0031*       ld de,3*256+128 ; half the fireball size
042827 FD 27 01    0032*       ld hl,(iy+sprite_x)
04282A 19          0033*       add hl,de
04282B DD 2F 01    0034*       ld (ix+sprite_x),hl
04282E FD 27 04    0035*       ld hl,(iy+sprite_y)
042831 19          0036*       add hl,de
042832 DD 2F 04    0037*       ld (ix+sprite_y),hl
042835             0038*   ; copy component velocities from targeting_computer
042835 2A 5B 67 04 0039*       ld hl,(Vp_x)
042839 DD 2F 07    0040*       ld (ix+sprite_xvel),hl
04283C 2A 5E 67 04 0041*       ld hl,(Vp_y)
042840 DD 2F 0A    0042*       ld (ix+sprite_yvel),hl
042843             0043*   ; move projectile one frame's distance so it isn't drawn right over turret
042843 DD 27 01    0044*       ld hl,(ix+sprite_x)
042846 DD 17 07    0045*       ld de,(ix+sprite_xvel)
042849 19          0046*       add hl,de
04284A DD 2F 01    0047*       ld (ix+sprite_x),hl
04284D DD 27 04    0048*       ld hl,(ix+sprite_y)
042850 DD 17 0A    0049*       ld de,(ix+sprite_yvel)
042853 19          0050*       add hl,de
042854 DD 2F 04    0051*       ld (ix+sprite_y),hl
042857 C9          0052*       ret
042858             0053*   ; end enemy_spawn_fireball
042858             0054*   
042858             0055*   move_enemy_fireball:
042858             0056*   ; run the movement program for the fireball enemy
042858 CD D5 72 04 0057*       call move_sprite
04285C 3A 68 71 04 0058*       ld a,(sprite_screen_edge)
042860 B7          0059*       or a ; a will be non-zero if have scrolled off screen
042861 C2 AE 71 04 0060*       jp nz,table_deactivate_sprite
042865 CD ED 26 04 0061*       call check_enemy_collision_player
042869 C0          0062*       ret nz ; no collision so nothing to do
04286A C3 01 27 04 0063*       jp enemy_kill
04286E             0064*   ; end move_enemy_fireball
04286E             0065*   
04286E             0066*   init_enemy_fireballs:
04286E             0067*   ; set pointer to seeker sprite table
04286E FD 21 00 82 0068*       ld iy,fireballs_base
       04          
042873 FD 7E 00    0069*       ld a,(iy+sprite_id) ; sprite id
042876 1E 04       0070*       ld e,fireballs_max ; sprite loop counter
042878             0071*   ; define seeker sprites
042878             0072*   @sprites_loop:
042878 F5          0073*       push af
042879 D5          0074*       push de
04287A CD 00 20 04 0075*       call vdu_sprite_select
04287E CD 13 20 04 0076*       call vdu_sprite_clear_frames
042882 21 06 01 00 0077*       ld hl,BUF_FIREBALL_A
042886 06 02       0078*       ld b,2
042888             0079*   @frames_loop:
042888 C5          0080*       push bc
042889 E5          0081*       push hl
04288A CD 55 21 04 0082*       call vdu_sprite_add_buff
04288E E1          0083*       pop hl
04288F 23          0084*       inc hl
042890 C1          0085*       pop bc
042891 10 F5       0086*       djnz @frames_loop
042893 D1          0087*       pop de ; sprite loop counter
042894 F1          0088*       pop af ; sprite id
042895 3C          0089*       inc a
042896 1D          0090*       dec e
042897 C2 78 28 04 0091*       jp nz,@sprites_loop
04289B C9          0092*       ret
04289C             0093*   ; end init_enemy_fireballs
04289C             0049        include "enemy_seeker.inc"
04289C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
042900             0002*   
042900 00          0003*   seekers_count: db 0
042901             0004*   seekers_max: equ 3
042901             0005*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
042901             0006*   
042901             0007*   seeker_defaults:
042901 01          0008*       db enemy_air            ; type
042902 0B 01 00    0009*       dl BUF_SEEKER_000       ; base_bufferId
042905 2C 29 04    0010*       dl move_enemy_seeker    ; move_program
042908 40          0011*       db %01000000            ; collisions bit 6 signals sprite alive
042909 10          0012*       db 16                   ; dim_x
04290A 10          0013*       db 16                   ; dim_y
04290B 20          0014*       db 32                   ; num_orientations
04290C 01          0015*       db 1                    ; num_animations
04290D 00          0016*       db 0                    ; animation
04290E 00          0017*       db 0                    ; animation_timer
04290F 01          0018*       db 1                    ; move_timer
042910 00          0019*       db 0                    ; move_step
042911 0A          0020*       db 10                   ; points
042912 02          0021*       db 2                    ; shield_damage
042913 00          0022*       db 0                    ; frame
042914             0023*   
042914             0024*   enemy_spawn_seeker:
042914 21 01 29 04 0025*       ld hl,seeker_defaults
042918 DD 21 40 81 0026*       ld ix,seekers_base
       04          
04291D 06 03       0027*       ld b,seekers_max
04291F CD BF 6F 04 0028*       call spawn_sprite_from_tile
042923 D0          0029*       ret nc ; no carry means no free sprite slots, so we go home
042924             0030*   ; other specific initialization
042924 21 80 02 00 0031*       ld hl,speed_seeker
042928 DD 2F 0D    0032*       ld (ix+sprite_vel),hl
04292B C9          0033*       ret
04292C             0034*   ; end enemy_spawn_seeker
04292C             0035*   
04292C             0036*   move_enemy_seeker:
04292C             0037*   ; run the movement program for the seeker enemy
04292C CD 50 29 04 0038*       call en_nav_seek_zag
042930 CD ED 26 04 0039*       call check_enemy_collision_player
042934 CA 01 27 04 0040*       jp z,enemy_kill
042938 CD E1 26 04 0041*       call check_enemy_collision_laser
04293C CA 01 27 04 0042*       jp z,enemy_kill
042940             0043*   ; change the animation frame to match heading
042940 FD 7E 00    0044*       ld a,(iy+sprite_id)
042943 CD 00 20 04 0045*       call vdu_sprite_select
042947 CD A1 73 04 0046*       call sprite_frame_heading ; a, sprite_frame set to heading-based frame
04294B CD 63 20 04 0047*       call vdu_sprite_select_frame
04294F C9          0048*       ret
042950             0049*   ; end move_enemy_seeker
042950             0050*   
042950             0051*   ; contains the logic for how to move the enemy
042950             0052*   ; and then does the moving
042950             0053*   ; inputs: a fully-populated active sprite table
042950             0054*   ;         player position variables
042950             0055*   ; destroys: everything except index registers
042950             0056*   ; outputs: moving enemies
042950             0057*   en_nav_seek_zag:
042950             0058*   ; set velocity and orientation by player's relative location
042950             0059*   ; move enemies y-axis
042950             0060*   ; where is player relative to us?
042950 CD 00 67 04 0061*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
042954             0062*   ; is player above or below us?
042954 ED 53 48 06 0063*       ld (ude),de ; dy
       04          
042959 3A 4A 06 04 0064*       ld a,(ude+2) ; deu
04295D 17          0065*       rla ; shift sign bit into carry
04295E D2 83 29 04 0066*       jp nc,@zig_zag ; player is below,evade
042962             0067*   ; player is even or above,so home in on current heading
042962 FD 2F 10    0068*       ld (iy+sprite_heading),hl ; save sprite heading
042965             0069*   ; fall through to @compute_velocities
042965             0070*   @compute_velocities:
042965 CD 76 73 04 0071*       call sprite_compute_velocities
042969 CD D5 72 04 0072*       call move_sprite ; move the sprite
04296D B7          0073*       or a ; a will be non-zero if have collided with screen edge
04296E C2 8E 29 04 0074*       jp nz,@zag_switch ; switch direction
042972 C9          0075*       ret ; didn't hit edge, nothing else to do
042973             0076*   @zig_zag_start:
042973 FD 2A 65 71 0077*       ld iy,(table_pointer)
       04          
042978 CD AE 09 04 0078*       call rand_8
04297C E6 3F       0079*       and %00111111 ; limit it to 64
04297E CB DF       0080*       set 3,a ; make sure it's at least 8
042980 FD 77 24    0081*       ld (iy+sprite_move_timer),a ; store it
042983             0082*       ; fall through to @zig_zag
042983             0083*   @zig_zag:
042983 FD 7E 24    0084*       ld a,(iy+sprite_move_timer)
042986 3D          0085*       dec a
042987 FD 77 24    0086*       ld (iy+sprite_move_timer),a
04298A C2 B0 29 04 0087*       jp nz,@zig_zag_no_switch
04298E             0088*   @zag_switch:
04298E             0089*       ; otherwise flip direction and restart timer
04298E FD 7E 25    0090*       ld a,(iy+sprite_move_step)
042991 EE 01       0091*       xor %1 ; flips bit zero
042993 FD 77 25    0092*       ld (iy+sprite_move_step),a ; store it
042996 C2 A5 29 04 0093*       jp nz,@F ; zag right
04299A             0094*   ;otherwise zag left
04299A 21 00 A0 00 0095*       ld hl,160*256; southwest heading
04299E FD 2F 10    0096*       ld (iy+sprite_heading),hl ; save sprite heading
0429A1 C3 73 29 04 0097*       jp @zig_zag_start
0429A5             0098*   @@: ; zag right
0429A5 21 00 60 00 0099*       ld hl,96*256; southeast heading
0429A9 FD 2F 10    0100*       ld (iy+sprite_heading),hl ; save sprite heading
0429AC C3 73 29 04 0101*       jp @zig_zag_start
0429B0             0102*   @zig_zag_no_switch:
0429B0             0103*       ; ld a,(sprite_orientation)
0429B0 FD 27 10    0104*       ld hl,(iy+sprite_heading)
0429B3 C3 65 29 04 0105*       jp @compute_velocities
0429B7             0106*   ; end en_nav_seek_zag
0429B7             0107*   
0429B7             0108*   
0429B7             0109*   init_enemy_seekers:
0429B7             0110*   ; set pointer to seeker sprite table
0429B7 FD 21 40 81 0111*       ld iy,seekers_base
       04          
0429BC FD 7E 00    0112*       ld a,(iy+sprite_id) ; sprite id
0429BF 1E 03       0113*       ld e,seekers_max ; sprite loop counter
0429C1             0114*   ; define seeker sprites
0429C1             0115*   @sprites_loop:
0429C1 F5          0116*       push af
0429C2 D5          0117*       push de
0429C3 CD 00 20 04 0118*   	call vdu_sprite_select
0429C7 CD 13 20 04 0119*   	call vdu_sprite_clear_frames
0429CB 21 0B 01 00 0120*   	ld hl,BUF_SEEKER_000
0429CF 06 20       0121*   	ld b,32 ; 32 bitmaps for seeker
0429D1             0122*   @frames_loop:
0429D1 C5          0123*   	push bc
0429D2 E5          0124*   	push hl
0429D3 CD 55 21 04 0125*   	call vdu_sprite_add_buff
0429D7 E1          0126*   	pop hl
0429D8 23          0127*   	inc hl
0429D9 C1          0128*   	pop bc
0429DA 10 F5       0129*   	djnz @frames_loop
0429DC D1          0130*       pop de ; sprite loop counter
0429DD F1          0131*       pop af ; sprite id
0429DE 3C          0132*       inc a
0429DF 1D          0133*       dec e
0429E0 C2 C1 29 04 0134*       jp nz,@sprites_loop
0429E4 C9          0135*       ret
0429E5             0136*   ; end init_enemy_seekers
0429E5             0050        include "explosion.inc"
0429E5 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042A00             0002*   
042A00             0003*   explosions_max: equ 8
042A00             0004*   explosion_defaults:
042A00 04          0005*       db explosion            ; type
042A01 01 01 00    0006*       dl BUF_EXPLOSION_A	    ; base_bufferId
042A04 5D 2A 04    0007*       dl move_explosion	    ; move_program
042A07 40          0008*       db %01000000            ; collisions bit 6 signals sprite alive
042A08 07          0009*       db 7	                ; dim_x
042A09 07          0010*       db 7                    ; dim_y
042A0A 01          0011*       db 1                    ; num_orientations
042A0B 05          0012*       db 5                    ; num_animations
042A0C 05          0013*       db 5	                ; animation
042A0D 08          0014*       db 8	                ; animation_timer
042A0E 00          0015*       db 0	                ; move_timer
042A0F 00          0016*       db 0	                ; move_step
042A10 00          0017*       db 0	                ; points
042A11 05          0018*       db 5	                ; shield_damage
042A12 00          0019*       db 0                    ; frame
042A13             0020*   
042A13             0021*   spawn_explosion:
042A13 21 00 2A 04 0022*       ld hl,explosion_defaults
042A17 DD 21 00 83 0023*       ld ix,explosions_base
       04          
042A1C 06 08       0024*       ld b,explosions_max
042A1E CD 22 72 04 0025*       call spawn_sprite_from_sprite
042A22 D2 AE 71 04 0026*       jp nc,table_deactivate_sprite ; no carry means no free sprite slots, so we deactivate parent sprite and go home
042A26             0027*   ; other specific initialization
042A26 21 00 00 00 0028*       ld hl,0
042A2A DD 2F 07    0029*       ld (ix+sprite_xvel),hl
042A2D 21 00 01 00 0030*       ld hl,1*256
042A31 DD 2F 0A    0031*       ld (ix+sprite_yvel),hl
042A34             0032*   ; deactivate parent sprite
042A34 C3 AE 71 04 0033*       jp table_deactivate_sprite
042A38             0034*   ; end spawn_explosion
042A38             0035*   
042A38             0036*   tile_spawn_explosion:
042A38 21 00 2A 04 0037*       ld hl,explosion_defaults
042A3C DD 21 00 83 0038*       ld ix,explosions_base
       04          
042A41 06 08       0039*       ld b,explosions_max
042A43 CD BF 6F 04 0040*       call spawn_sprite_from_tile
042A47 D2 83 6B 04 0041*       jp nc,table_deactivate_tile ; no carry means no free sprite slots, so we deactivate parent tile and go home
042A4B             0042*   ; other specific initialization
042A4B 21 00 00 00 0043*       ld hl,0
042A4F DD 2F 07    0044*       ld (ix+sprite_xvel),hl
042A52 21 00 01 00 0045*       ld hl,1*256
042A56 DD 2F 0A    0046*       ld (ix+sprite_yvel),hl
042A59             0047*   ; deactivate parent sprite
042A59 C3 83 6B 04 0048*       jp table_deactivate_tile
042A5D             0049*   ; end tile_spawn_explosion
042A5D             0050*   
042A5D             0051*   move_explosion:
042A5D             0052*   ; run the movement program for the explosion
042A5D CD D5 72 04 0053*       call move_sprite
042A61 B7          0054*       or a ; a will be non-zero if have scrolled off screen
042A62 C2 7A 2A 04 0055*       jp nz,@make_crater
042A66             0056*   ; do the animations
042A66 FD 35 23    0057*       dec (iy+sprite_animation_timer)
042A69 C0          0058*       ret nz ; not time to bump animation frame
042A6A FD 34 28    0059*       inc (iy+sprite_frame)
042A6D FD 35 22    0060*       dec (iy+sprite_animation)
042A70 CA 7A 2A 04 0061*       jp z,@make_crater ; reached the end of the animations
042A74 3E 08       0062*       ld a,8 ; reset animation timer
042A76 FD 77 23    0063*       ld (iy+sprite_animation_timer),a
042A79 C9          0064*       ret
042A7A             0065*   @make_crater: ; deactivate sprite and draw a crater in its place
042A7A 21 00 01 00 0066*       ld hl,BUF_CRATER
042A7E CD 38 1B 04 0067*       call vdu_buff_select
042A82 FD 07 01    0068*       ld bc,(iy+sprite_x)
042A85 FD 17 04    0069*       ld de,(iy+sprite_y)
042A88 CD 3C 1F 04 0070*       call vdu_plot_bmp168
042A8C C3 AE 71 04 0071*       jp table_deactivate_sprite
042A90             0072*   ; end move_explosion
042A90             0073*   
042A90             0074*   move_explosions:
042A90             0075*   ; initialize pointers and loop counter
042A90 FD 21 00 83 0076*       ld iy,explosions_base ; set iy to first record in table
       04          
042A95 06 08       0077*       ld b,explosions_max ; loop counter
042A97 CD 54 72 04 0078*       call move_sprite_group
042A9B C9          0079*       ret
042A9C             0080*   ; end move_explosions
042A9C             0081*   
042A9C             0082*   init_explosions:
042A9C             0083*   ; set pointer to explosion sprite table
042A9C FD 21 00 83 0084*       ld iy,explosions_base
       04          
042AA1 FD 7E 00    0085*       ld a,(iy+sprite_id) ; sprite id
042AA4 1E 08       0086*       ld e,explosions_max ; sprite loop counter
042AA6             0087*   ; define explosion sprites
042AA6             0088*   @sprites_loop:
042AA6 F5          0089*       push af
042AA7 D5          0090*       push de
042AA8 CD 00 20 04 0091*   	call vdu_sprite_select
042AAC CD 13 20 04 0092*   	call vdu_sprite_clear_frames
042AB0 21 01 01 00 0093*   	ld hl,BUF_EXPLOSION_A
042AB4 06 05       0094*   	ld b,5 ; 5 bitmaps for explosion
042AB6             0095*   @frames_loop:
042AB6 C5          0096*   	push bc
042AB7 E5          0097*   	push hl
042AB8 CD 55 21 04 0098*   	call vdu_sprite_add_buff
042ABC E1          0099*   	pop hl
042ABD 23          0100*   	inc hl
042ABE C1          0101*   	pop bc
042ABF 10 F5       0102*   	djnz @frames_loop
042AC1 D1          0103*       pop de ; sprite loop counter
042AC2 F1          0104*       pop af ; sprite id
042AC3 3C          0105*       inc a
042AC4 1D          0106*       dec e
042AC5 C2 A6 2A 04 0107*       jp nz,@sprites_loop
042AC9 C9          0108*       ret
042ACA             0109*   ; end init_explosions
042ACA             0051        include "fonts_list.inc"
042ACA FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
042B00             0002*   
042B00             0003*   ; Generated by asm_config_editor.py
042B00             0004*   font_list_record_size: equ 12
042B00             0005*   font_list_width: equ 0
042B00             0006*   font_list_height: equ 3
042B00             0007*   font_list_bufferId: equ 6
042B00             0008*   font_list_filename: equ 9
042B00             0009*   
042B00             0010*   num_fonts: equ 18
042B00             0011*   
042B00             0012*   ; Index list:
042B00             0013*   amiga_forever_16x24: equ 64000
042B00             0014*   amiga_forever_8x16: equ 64001
042B00             0015*   amiga_forever_8x8: equ 64002
042B00             0016*   computer_pixel_7_10x15: equ 64003
042B00             0017*   computer_pixel_7_10x24: equ 64004
042B00             0018*   computer_pixel_7_8x16: equ 64005
042B00             0019*   Lat2_Terminus12x6_6x12: equ 64006
042B00             0020*   Lat2_TerminusBold14_8x14: equ 64007
042B00             0021*   Lat2_VGA14_8x14: equ 64008
042B00             0022*   Lat2_VGA16_8x16: equ 64009
042B00             0023*   Lat2_VGA8_8x8: equ 64010
042B00             0024*   Lat7_Fixed13_8x13: equ 64011
042B00             0025*   Lat7_Terminus12x6_6x12: equ 64012
042B00             0026*   Lat7_TerminusBold16_8x16: equ 64013
042B00             0027*   Lat7_VGA14_8x14: equ 64014
042B00             0028*   Lat7_VGA8x8: equ 64015
042B00             0029*   scriptorium_12x14: equ 64016
042B00             0030*   Squarewave_Bold_8x12: equ 64017
042B00             0031*   
042B00             0032*   font_list: ; width; height; bufferId; filename;:
042B00 10 00 00 18 0033*   	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 D8 2B 04 
042B0C 08 00 00 10 0034*   	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 F7 2B 04 
042B18 08 00 00 08 0035*   	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 15 2C 04 
042B24 0A 00 00 0F 0036*   	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 32 2C 04 
042B30 0A 00 00 18 0037*   	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 54 2C 04 
042B3C 08 00 00 10 0038*   	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 76 2C 04 
042B48 06 00 00 0C 0039*   	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 97 2C 04 
042B54 08 00 00 0E 0040*   	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 B9 2C 04 
042B60 08 00 00 0E 0041*   	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 DD 2C 04 
042B6C 08 00 00 10 0042*   	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 F8 2C 04 
042B78 08 00 00 08 0043*   	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 13 2D 04 
042B84 08 00 00 0D 0044*   	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 2C 2D 04 
042B90 06 00 00 0C 0045*   	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 49 2D 04 
042B9C 08 00 00 10 0046*   	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 6B 2D 04 
042BA8 08 00 00 0E 0047*   	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 8F 2D 04 
042BB4 08 00 00 08 0048*   	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 AA 2D 04 
042BC0 0C 00 00 0E 0049*   	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 C3 2D 04 
042BCC 08 00 00 0C 0050*   	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 E0 2D 04 
042BD8             0051*   
042BD8             0052*   ; files_list: ; filename:
042BD8 66 6F 6E 74 0053*   fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
042BF7 66 6F 6E 74 0054*   fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
042C15 66 6F 6E 74 0055*   fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042C32 66 6F 6E 74 0056*   fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
042C54 66 6F 6E 74 0057*   fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
042C76 66 6F 6E 74 0058*   fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
042C97 66 6F 6E 74 0059*   fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
042CB9 66 6F 6E 74 0060*   fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
042CDD 66 6F 6E 74 0061*   fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
042CF8 66 6F 6E 74 0062*   fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
042D13 66 6F 6E 74 0063*   fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042D2C 66 6F 6E 74 0064*   fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
042D49 66 6F 6E 74 0065*   fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
042D6B 66 6F 6E 74 0066*   fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
042D8F 66 6F 6E 74 0067*   fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
042DAA 66 6F 6E 74 0068*   fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042DC3 66 6F 6E 74 0069*   fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
042DE0 66 6F 6E 74 0070*   fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
042E00             0052        include "images_tiles_dg.inc"
042E00             0001*   ; Generated by tiles_dg.py
042E00             0002*   
042E00             0003*   tiles_dg_num_images: equ 184
042E00             0004*   
042E00             0005*   ; bufferIds:
042E00             0006*   
042E00             0007*   
042E00             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
042E00 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       F0 3A 04 00 
       02 00       
042E12 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       05 3B 04 01 
       02 00       
042E24 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       1A 3B 04 02 
       02 00       
042E36 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       2F 3B 04 03 
       02 00       
042E48 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       44 3B 04 04 
       02 00       
042E5A 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       59 3B 04 05 
       02 00       
042E6C 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       6E 3B 04 06 
       02 00       
042E7E 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       83 3B 04 07 
       02 00       
042E90 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       98 3B 04 08 
       02 00       
042EA2 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       AD 3B 04 09 
       02 00       
042EB4 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       C2 3B 04 0A 
       02 00       
042EC6 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       D7 3B 04 0B 
       02 00       
042ED8 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_012, 524
       00 00 10 00 
       00 00 01 00 
       EC 3B 04 0C 
       02 00       
042EEA 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_013, 525
       00 00 10 00 
       00 00 01 00 
       01 3C 04 0D 
       02 00       
042EFC 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_014, 526
       00 00 10 00 
       00 00 01 00 
       16 3C 04 0E 
       02 00       
042F0E 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_015, 527
       00 00 10 00 
       00 00 01 00 
       2B 3C 04 0F 
       02 00       
042F20 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       40 3C 04 10 
       02 00       
042F32 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_025, 537
       00 00 10 00 
       00 00 01 00 
       55 3C 04 19 
       02 00       
042F44 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_026, 538
       00 00 10 00 
       00 00 01 00 
       6A 3C 04 1A 
       02 00       
042F56 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_027, 539
       00 00 10 00 
       00 00 01 00 
       7F 3C 04 1B 
       02 00       
042F68 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_028, 540
       00 00 10 00 
       00 00 01 00 
       94 3C 04 1C 
       02 00       
042F7A 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_029, 541
       00 00 10 00 
       00 00 01 00 
       A9 3C 04 1D 
       02 00       
042F8C 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_030, 542
       00 00 10 00 
       00 00 01 00 
       BE 3C 04 1E 
       02 00       
042F9E 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_031, 543
       00 00 10 00 
       00 00 01 00 
       D3 3C 04 1F 
       02 00       
042FB0 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_032, 544
       00 00 10 00 
       00 00 01 00 
       E8 3C 04 20 
       02 00       
042FC2 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       FD 3C 04 21 
       02 00       
042FD4 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       12 3D 04 22 
       02 00       
042FE6 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       27 3D 04 23 
       02 00       
042FF8 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       3C 3D 04 24 
       02 00       
04300A 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       51 3D 04 25 
       02 00       
04301C 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       66 3D 04 26 
       02 00       
04302E 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       7B 3D 04 27 
       02 00       
043040 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       90 3D 04 28 
       02 00       
043052 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       A5 3D 04 31 
       02 00       
043064 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       BA 3D 04 32 
       02 00       
043076 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       CF 3D 04 33 
       02 00       
043088 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       E4 3D 04 34 
       02 00       
04309A 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       F9 3D 04 35 
       02 00       
0430AC 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       0E 3E 04 36 
       02 00       
0430BE 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       23 3E 04 37 
       02 00       
0430D0 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       38 3E 04 38 
       02 00       
0430E2 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       4D 3E 04 39 
       02 00       
0430F4 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       62 3E 04 3A 
       02 00       
043106 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       77 3E 04 3B 
       02 00       
043118 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       8C 3E 04 41 
       02 00       
04312A 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       A1 3E 04 42 
       02 00       
04313C 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       B6 3E 04 43 
       02 00       
04314E 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       CB 3E 04 44 
       02 00       
043160 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       E0 3E 04 45 
       02 00       
043172 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       F5 3E 04 46 
       02 00       
043184 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       0A 3F 04 47 
       02 00       
043196 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       1F 3F 04 48 
       02 00       
0431A8 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       34 3F 04 49 
       02 00       
0431BA 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       49 3F 04 4A 
       02 00       
0431CC 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       5E 3F 04 4B 
       02 00       
0431DE 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       73 3F 04 51 
       02 00       
0431F0 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       88 3F 04 52 
       02 00       
043202 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       9D 3F 04 53 
       02 00       
043214 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       B2 3F 04 54 
       02 00       
043226 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       C7 3F 04 55 
       02 00       
043238 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       DC 3F 04 56 
       02 00       
04324A 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       F1 3F 04 57 
       02 00       
04325C 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       06 40 04 58 
       02 00       
04326E 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       1B 40 04 59 
       02 00       
043280 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       30 40 04 5A 
       02 00       
043292 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       45 40 04 5B 
       02 00       
0432A4 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       5A 40 04 61 
       02 00       
0432B6 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       6F 40 04 62 
       02 00       
0432C8 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       84 40 04 63 
       02 00       
0432DA 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       99 40 04 64 
       02 00       
0432EC 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       AE 40 04 65 
       02 00       
0432FE 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       C3 40 04 66 
       02 00       
043310 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       D8 40 04 67 
       02 00       
043322 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       ED 40 04 68 
       02 00       
043334 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       02 41 04 69 
       02 00       
043346 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       17 41 04 6A 
       02 00       
043358 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       2C 41 04 6B 
       02 00       
04336A 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       41 41 04 6C 
       02 00       
04337C 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       56 41 04 71 
       02 00       
04338E 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       6B 41 04 72 
       02 00       
0433A0 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       80 41 04 73 
       02 00       
0433B2 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       95 41 04 74 
       02 00       
0433C4 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       AA 41 04 75 
       02 00       
0433D6 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       BF 41 04 76 
       02 00       
0433E8 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       D4 41 04 77 
       02 00       
0433FA 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       E9 41 04 78 
       02 00       
04340C 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       FE 41 04 79 
       02 00       
04341E 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       13 42 04 7A 
       02 00       
043430 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       28 42 04 7B 
       02 00       
043442 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       3D 42 04 81 
       02 00       
043454 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       52 42 04 82 
       02 00       
043466 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       67 42 04 83 
       02 00       
043478 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       7C 42 04 84 
       02 00       
04348A 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       91 42 04 85 
       02 00       
04349C 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       A6 42 04 86 
       02 00       
0434AE 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       BB 42 04 87 
       02 00       
0434C0 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       D0 42 04 88 
       02 00       
0434D2 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       E5 42 04 89 
       02 00       
0434E4 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       FA 42 04 8A 
       02 00       
0434F6 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       0F 43 04 8B 
       02 00       
043508 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       24 43 04 8C 
       02 00       
04351A 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_141, 653
       00 00 10 00 
       00 00 01 00 
       39 43 04 8D 
       02 00       
04352C 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_142, 654
       00 00 10 00 
       00 00 01 00 
       4E 43 04 8E 
       02 00       
04353E 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       63 43 04 91 
       02 00       
043550 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       78 43 04 92 
       02 00       
043562 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       8D 43 04 93 
       02 00       
043574 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       A2 43 04 94 
       02 00       
043586 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       B7 43 04 95 
       02 00       
043598 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       CC 43 04 96 
       02 00       
0435AA 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       E1 43 04 97 
       02 00       
0435BC 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       F6 43 04 98 
       02 00       
0435CE 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       0B 44 04 99 
       02 00       
0435E0 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       20 44 04 9A 
       02 00       
0435F2 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       35 44 04 9B 
       02 00       
043604 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       4A 44 04 9C 
       02 00       
043616 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_157, 669
       00 00 10 00 
       00 00 01 00 
       5F 44 04 9D 
       02 00       
043628 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_158, 670
       00 00 10 00 
       00 00 01 00 
       74 44 04 9E 
       02 00       
04363A 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       89 44 04 A1 
       02 00       
04364C 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       9E 44 04 A2 
       02 00       
04365E 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       B3 44 04 A3 
       02 00       
043670 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       C8 44 04 A4 
       02 00       
043682 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       DD 44 04 A5 
       02 00       
043694 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       F2 44 04 A6 
       02 00       
0436A6 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       07 45 04 A7 
       02 00       
0436B8 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       1C 45 04 A8 
       02 00       
0436CA 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       31 45 04 A9 
       02 00       
0436DC 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       46 45 04 AA 
       02 00       
0436EE 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       5B 45 04 AB 
       02 00       
043700 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       70 45 04 AC 
       02 00       
043712 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       85 45 04 B1 
       02 00       
043724 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       9A 45 04 B2 
       02 00       
043736 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       AF 45 04 B3 
       02 00       
043748 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       C4 45 04 B4 
       02 00       
04375A 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       D9 45 04 B5 
       02 00       
04376C 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       EE 45 04 B6 
       02 00       
04377E 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       03 46 04 B7 
       02 00       
043790 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       18 46 04 B8 
       02 00       
0437A2 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       2D 46 04 B9 
       02 00       
0437B4 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       42 46 04 BA 
       02 00       
0437C6 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       57 46 04 BB 
       02 00       
0437D8 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       6C 46 04 BC 
       02 00       
0437EA 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       81 46 04 C1 
       02 00       
0437FC 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       96 46 04 C2 
       02 00       
04380E 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       AB 46 04 C3 
       02 00       
043820 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       C0 46 04 C4 
       02 00       
043832 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       D5 46 04 C5 
       02 00       
043844 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       EA 46 04 C6 
       02 00       
043856 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       FF 46 04 C7 
       02 00       
043868 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       14 47 04 C8 
       02 00       
04387A 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       29 47 04 C9 
       02 00       
04388C 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       3E 47 04 CA 
       02 00       
04389E 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       53 47 04 CB 
       02 00       
0438B0 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       68 47 04 CC 
       02 00       
0438C2 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       7D 47 04 D1 
       02 00       
0438D4 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       92 47 04 D2 
       02 00       
0438E6 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       A7 47 04 D3 
       02 00       
0438F8 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       BC 47 04 D4 
       02 00       
04390A 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       D1 47 04 D5 
       02 00       
04391C 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       E6 47 04 D6 
       02 00       
04392E 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       FB 47 04 D7 
       02 00       
043940 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       10 48 04 D8 
       02 00       
043952 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       25 48 04 D9 
       02 00       
043964 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       3A 48 04 DA 
       02 00       
043976 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       4F 48 04 DB 
       02 00       
043988 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       64 48 04 DC 
       02 00       
04399A 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       79 48 04 E1 
       02 00       
0439AC 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       8E 48 04 E2 
       02 00       
0439BE 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       A3 48 04 E3 
       02 00       
0439D0 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       B8 48 04 E4 
       02 00       
0439E2 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       CD 48 04 E5 
       02 00       
0439F4 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       E2 48 04 E6 
       02 00       
043A06 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       F7 48 04 E7 
       02 00       
043A18 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       0C 49 04 E8 
       02 00       
043A2A 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       21 49 04 E9 
       02 00       
043A3C 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       36 49 04 EA 
       02 00       
043A4E 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       4B 49 04 EB 
       02 00       
043A60 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       60 49 04 EC 
       02 00       
043A72 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       75 49 04 F1 
       02 00       
043A84 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       8A 49 04 F2 
       02 00       
043A96 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_243, 755
       00 00 10 00 
       00 00 01 00 
       9F 49 04 F3 
       02 00       
043AA8 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       B4 49 04 F5 
       02 00       
043ABA 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       C9 49 04 F6 
       02 00       
043ACC 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_247, 759
       00 00 10 00 
       00 00 01 00 
       DE 49 04 F7 
       02 00       
043ADE 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       F3 49 04 F8 
       02 00       
043AF0             0193*   
043AF0             0194*   tiles_dg_files_list: ; filename:
043AF0 74 69 6C 65 0195*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
043B05 74 69 6C 65 0196*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
043B1A 74 69 6C 65 0197*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
043B2F 74 69 6C 65 0198*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
043B44 74 69 6C 65 0199*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
043B59 74 69 6C 65 0200*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
043B6E 74 69 6C 65 0201*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
043B83 74 69 6C 65 0202*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
043B98 74 69 6C 65 0203*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
043BAD 74 69 6C 65 0204*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
043BC2 74 69 6C 65 0205*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
043BD7 74 69 6C 65 0206*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
043BEC 74 69 6C 65 0207*   fn_dg_012: db "tiles/dg/0/012.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 32 2E 72 
       67 62 61 32 
       00          
043C01 74 69 6C 65 0208*   fn_dg_013: db "tiles/dg/0/013.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 33 2E 72 
       67 62 61 32 
       00          
043C16 74 69 6C 65 0209*   fn_dg_014: db "tiles/dg/0/014.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 34 2E 72 
       67 62 61 32 
       00          
043C2B 74 69 6C 65 0210*   fn_dg_015: db "tiles/dg/0/015.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 35 2E 72 
       67 62 61 32 
       00          
043C40 74 69 6C 65 0211*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
043C55 74 69 6C 65 0212*   fn_dg_025: db "tiles/dg/0/025.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 35 2E 72 
       67 62 61 32 
       00          
043C6A 74 69 6C 65 0213*   fn_dg_026: db "tiles/dg/0/026.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 36 2E 72 
       67 62 61 32 
       00          
043C7F 74 69 6C 65 0214*   fn_dg_027: db "tiles/dg/0/027.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 37 2E 72 
       67 62 61 32 
       00          
043C94 74 69 6C 65 0215*   fn_dg_028: db "tiles/dg/0/028.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 38 2E 72 
       67 62 61 32 
       00          
043CA9 74 69 6C 65 0216*   fn_dg_029: db "tiles/dg/0/029.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 39 2E 72 
       67 62 61 32 
       00          
043CBE 74 69 6C 65 0217*   fn_dg_030: db "tiles/dg/0/030.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 30 2E 72 
       67 62 61 32 
       00          
043CD3 74 69 6C 65 0218*   fn_dg_031: db "tiles/dg/0/031.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 31 2E 72 
       67 62 61 32 
       00          
043CE8 74 69 6C 65 0219*   fn_dg_032: db "tiles/dg/0/032.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
043CFD 74 69 6C 65 0220*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
043D12 74 69 6C 65 0221*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
043D27 74 69 6C 65 0222*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
043D3C 74 69 6C 65 0223*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
043D51 74 69 6C 65 0224*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
043D66 74 69 6C 65 0225*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
043D7B 74 69 6C 65 0226*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
043D90 74 69 6C 65 0227*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
043DA5 74 69 6C 65 0228*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
043DBA 74 69 6C 65 0229*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
043DCF 74 69 6C 65 0230*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
043DE4 74 69 6C 65 0231*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
043DF9 74 69 6C 65 0232*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
043E0E 74 69 6C 65 0233*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
043E23 74 69 6C 65 0234*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
043E38 74 69 6C 65 0235*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
043E4D 74 69 6C 65 0236*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
043E62 74 69 6C 65 0237*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043E77 74 69 6C 65 0238*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
043E8C 74 69 6C 65 0239*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
043EA1 74 69 6C 65 0240*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
043EB6 74 69 6C 65 0241*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
043ECB 74 69 6C 65 0242*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
043EE0 74 69 6C 65 0243*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
043EF5 74 69 6C 65 0244*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
043F0A 74 69 6C 65 0245*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
043F1F 74 69 6C 65 0246*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
043F34 74 69 6C 65 0247*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
043F49 74 69 6C 65 0248*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
043F5E 74 69 6C 65 0249*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
043F73 74 69 6C 65 0250*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
043F88 74 69 6C 65 0251*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
043F9D 74 69 6C 65 0252*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
043FB2 74 69 6C 65 0253*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
043FC7 74 69 6C 65 0254*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
043FDC 74 69 6C 65 0255*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
043FF1 74 69 6C 65 0256*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
044006 74 69 6C 65 0257*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
04401B 74 69 6C 65 0258*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
044030 74 69 6C 65 0259*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
044045 74 69 6C 65 0260*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
04405A 74 69 6C 65 0261*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
04406F 74 69 6C 65 0262*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
044084 74 69 6C 65 0263*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
044099 74 69 6C 65 0264*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
0440AE 74 69 6C 65 0265*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
0440C3 74 69 6C 65 0266*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
0440D8 74 69 6C 65 0267*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
0440ED 74 69 6C 65 0268*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044102 74 69 6C 65 0269*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
044117 74 69 6C 65 0270*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
04412C 74 69 6C 65 0271*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
044141 74 69 6C 65 0272*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
044156 74 69 6C 65 0273*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
04416B 74 69 6C 65 0274*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
044180 74 69 6C 65 0275*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
044195 74 69 6C 65 0276*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
0441AA 74 69 6C 65 0277*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
0441BF 74 69 6C 65 0278*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
0441D4 74 69 6C 65 0279*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
0441E9 74 69 6C 65 0280*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0441FE 74 69 6C 65 0281*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
044213 74 69 6C 65 0282*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
044228 74 69 6C 65 0283*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
04423D 74 69 6C 65 0284*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
044252 74 69 6C 65 0285*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
044267 74 69 6C 65 0286*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
04427C 74 69 6C 65 0287*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
044291 74 69 6C 65 0288*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
0442A6 74 69 6C 65 0289*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
0442BB 74 69 6C 65 0290*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
0442D0 74 69 6C 65 0291*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0442E5 74 69 6C 65 0292*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
0442FA 74 69 6C 65 0293*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
04430F 74 69 6C 65 0294*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
044324 74 69 6C 65 0295*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
044339 74 69 6C 65 0296*   fn_dg_141: db "tiles/dg/0/141.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 31 2E 72 
       67 62 61 32 
       00          
04434E 74 69 6C 65 0297*   fn_dg_142: db "tiles/dg/0/142.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 32 2E 72 
       67 62 61 32 
       00          
044363 74 69 6C 65 0298*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
044378 74 69 6C 65 0299*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
04438D 74 69 6C 65 0300*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
0443A2 74 69 6C 65 0301*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
0443B7 74 69 6C 65 0302*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
0443CC 74 69 6C 65 0303*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
0443E1 74 69 6C 65 0304*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
0443F6 74 69 6C 65 0305*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
04440B 74 69 6C 65 0306*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
044420 74 69 6C 65 0307*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
044435 74 69 6C 65 0308*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
04444A 74 69 6C 65 0309*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
04445F 74 69 6C 65 0310*   fn_dg_157: db "tiles/dg/0/157.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 37 2E 72 
       67 62 61 32 
       00          
044474 74 69 6C 65 0311*   fn_dg_158: db "tiles/dg/0/158.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 38 2E 72 
       67 62 61 32 
       00          
044489 74 69 6C 65 0312*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
04449E 74 69 6C 65 0313*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
0444B3 74 69 6C 65 0314*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
0444C8 74 69 6C 65 0315*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
0444DD 74 69 6C 65 0316*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
0444F2 74 69 6C 65 0317*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
044507 74 69 6C 65 0318*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
04451C 74 69 6C 65 0319*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044531 74 69 6C 65 0320*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
044546 74 69 6C 65 0321*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
04455B 74 69 6C 65 0322*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
044570 74 69 6C 65 0323*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
044585 74 69 6C 65 0324*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
04459A 74 69 6C 65 0325*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
0445AF 74 69 6C 65 0326*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
0445C4 74 69 6C 65 0327*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
0445D9 74 69 6C 65 0328*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
0445EE 74 69 6C 65 0329*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
044603 74 69 6C 65 0330*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
044618 74 69 6C 65 0331*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04462D 74 69 6C 65 0332*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
044642 74 69 6C 65 0333*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
044657 74 69 6C 65 0334*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
04466C 74 69 6C 65 0335*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
044681 74 69 6C 65 0336*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
044696 74 69 6C 65 0337*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
0446AB 74 69 6C 65 0338*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
0446C0 74 69 6C 65 0339*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
0446D5 74 69 6C 65 0340*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
0446EA 74 69 6C 65 0341*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
0446FF 74 69 6C 65 0342*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
044714 74 69 6C 65 0343*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044729 74 69 6C 65 0344*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
04473E 74 69 6C 65 0345*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
044753 74 69 6C 65 0346*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
044768 74 69 6C 65 0347*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
04477D 74 69 6C 65 0348*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
044792 74 69 6C 65 0349*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
0447A7 74 69 6C 65 0350*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
0447BC 74 69 6C 65 0351*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
0447D1 74 69 6C 65 0352*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
0447E6 74 69 6C 65 0353*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
0447FB 74 69 6C 65 0354*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
044810 74 69 6C 65 0355*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044825 74 69 6C 65 0356*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
04483A 74 69 6C 65 0357*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
04484F 74 69 6C 65 0358*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
044864 74 69 6C 65 0359*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
044879 74 69 6C 65 0360*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
04488E 74 69 6C 65 0361*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
0448A3 74 69 6C 65 0362*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
0448B8 74 69 6C 65 0363*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
0448CD 74 69 6C 65 0364*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
0448E2 74 69 6C 65 0365*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
0448F7 74 69 6C 65 0366*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
04490C 74 69 6C 65 0367*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044921 74 69 6C 65 0368*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
044936 74 69 6C 65 0369*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
04494B 74 69 6C 65 0370*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
044960 74 69 6C 65 0371*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
044975 74 69 6C 65 0372*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
04498A 74 69 6C 65 0373*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
04499F 74 69 6C 65 0374*   fn_dg_243: db "tiles/dg/0/243.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 33 2E 72 
       67 62 61 32 
       00          
0449B4 74 69 6C 65 0375*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
0449C9 74 69 6C 65 0376*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
0449DE 74 69 6C 65 0377*   fn_dg_247: db "tiles/dg/0/247.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 37 2E 72 
       67 62 61 32 
       00          
0449F3 74 69 6C 65 0378*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044A08             0053        ; include "images_tiles_xevious.inc"
044A08             0054        include "images_sprites.inc"
044A08             0001*   ; Generated by make_images.py
044A08             0002*   
044A08             0003*   sprites_num_images: equ 80
044A08             0004*   
044A08             0005*   ; buffer_ids:
044A08             0006*   BUF_CRATER: equ 256
044A08             0007*   BUF_EXPLOSION_A: equ 257
044A08             0008*   BUF_EXPLOSION_B: equ 258
044A08             0009*   BUF_EXPLOSION_C: equ 259
044A08             0010*   BUF_EXPLOSION_D: equ 260
044A08             0011*   BUF_EXPLOSION_E: equ 261
044A08             0012*   BUF_FIREBALL_A: equ 262
044A08             0013*   BUF_FIREBALL_B: equ 263
044A08             0014*   BUF_LASER_A: equ 264
044A08             0015*   BUF_LASER_B: equ 265
044A08             0016*   BUF_PAD: equ 266
044A08             0017*   BUF_SEEKER_000: equ 267
044A08             0018*   BUF_SEEKER_008: equ 268
044A08             0019*   BUF_SEEKER_016: equ 269
044A08             0020*   BUF_SEEKER_024: equ 270
044A08             0021*   BUF_SEEKER_032: equ 271
044A08             0022*   BUF_SEEKER_040: equ 272
044A08             0023*   BUF_SEEKER_048: equ 273
044A08             0024*   BUF_SEEKER_056: equ 274
044A08             0025*   BUF_SEEKER_064: equ 275
044A08             0026*   BUF_SEEKER_072: equ 276
044A08             0027*   BUF_SEEKER_080: equ 277
044A08             0028*   BUF_SEEKER_088: equ 278
044A08             0029*   BUF_SEEKER_096: equ 279
044A08             0030*   BUF_SEEKER_104: equ 280
044A08             0031*   BUF_SEEKER_112: equ 281
044A08             0032*   BUF_SEEKER_120: equ 282
044A08             0033*   BUF_SEEKER_128: equ 283
044A08             0034*   BUF_SEEKER_136: equ 284
044A08             0035*   BUF_SEEKER_144: equ 285
044A08             0036*   BUF_SEEKER_152: equ 286
044A08             0037*   BUF_SEEKER_160: equ 287
044A08             0038*   BUF_SEEKER_168: equ 288
044A08             0039*   BUF_SEEKER_176: equ 289
044A08             0040*   BUF_SEEKER_184: equ 290
044A08             0041*   BUF_SEEKER_192: equ 291
044A08             0042*   BUF_SEEKER_200: equ 292
044A08             0043*   BUF_SEEKER_208: equ 293
044A08             0044*   BUF_SEEKER_216: equ 294
044A08             0045*   BUF_SEEKER_224: equ 295
044A08             0046*   BUF_SEEKER_232: equ 296
044A08             0047*   BUF_SEEKER_240: equ 297
044A08             0048*   BUF_SEEKER_248: equ 298
044A08             0049*   BUF_SHIP_0L: equ 299
044A08             0050*   BUF_SHIP_1C: equ 300
044A08             0051*   BUF_SHIP_2R: equ 301
044A08             0052*   BUF_SHIP_SMALL: equ 302
044A08             0053*   BUF_TEST_STRIPES: equ 303
044A08             0054*   BUF_TURRET_000: equ 304
044A08             0055*   BUF_TURRET_008: equ 305
044A08             0056*   BUF_TURRET_016: equ 306
044A08             0057*   BUF_TURRET_024: equ 307
044A08             0058*   BUF_TURRET_032: equ 308
044A08             0059*   BUF_TURRET_040: equ 309
044A08             0060*   BUF_TURRET_048: equ 310
044A08             0061*   BUF_TURRET_056: equ 311
044A08             0062*   BUF_TURRET_064: equ 312
044A08             0063*   BUF_TURRET_072: equ 313
044A08             0064*   BUF_TURRET_080: equ 314
044A08             0065*   BUF_TURRET_088: equ 315
044A08             0066*   BUF_TURRET_096: equ 316
044A08             0067*   BUF_TURRET_104: equ 317
044A08             0068*   BUF_TURRET_112: equ 318
044A08             0069*   BUF_TURRET_120: equ 319
044A08             0070*   BUF_TURRET_128: equ 320
044A08             0071*   BUF_TURRET_136: equ 321
044A08             0072*   BUF_TURRET_144: equ 322
044A08             0073*   BUF_TURRET_152: equ 323
044A08             0074*   BUF_TURRET_160: equ 324
044A08             0075*   BUF_TURRET_168: equ 325
044A08             0076*   BUF_TURRET_176: equ 326
044A08             0077*   BUF_TURRET_184: equ 327
044A08             0078*   BUF_TURRET_192: equ 328
044A08             0079*   BUF_TURRET_200: equ 329
044A08             0080*   BUF_TURRET_208: equ 330
044A08             0081*   BUF_TURRET_216: equ 331
044A08             0082*   BUF_TURRET_224: equ 332
044A08             0083*   BUF_TURRET_232: equ 333
044A08             0084*   BUF_TURRET_240: equ 334
044A08             0085*   BUF_TURRET_248: equ 335
044A08             0086*   
044A08             0087*   sprites_image_list: ; type; width; height; size; filename; bufferId:
044A08 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       A8 4F 04 00 
       01 00       
044A1A 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_explosion_a, 257
       00 00 10 00 
       00 00 01 00 
       BD 4F 04 01 
       01 00       
044A2C 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_explosion_b, 258
       00 00 10 00 
       00 00 01 00 
       D7 4F 04 02 
       01 00       
044A3E 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_explosion_c, 259
       00 00 10 00 
       00 00 01 00 
       F1 4F 04 03 
       01 00       
044A50 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_explosion_d, 260
       00 00 10 00 
       00 00 01 00 
       0B 50 04 04 
       01 00       
044A62 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_explosion_e, 261
       00 00 10 00 
       00 00 01 00 
       25 50 04 05 
       01 00       
044A74 01 00 00 07 0094*   	dl 1, 7, 7, 49, fn_fireball_a, 262
       00 00 07 00 
       00 31 00 00 
       3F 50 04 06 
       01 00       
044A86 01 00 00 07 0095*   	dl 1, 7, 7, 49, fn_fireball_b, 263
       00 00 07 00 
       00 31 00 00 
       58 50 04 07 
       01 00       
044A98 01 00 00 05 0096*   	dl 1, 5, 13, 65, fn_laser_a, 264
       00 00 0D 00 
       00 41 00 00 
       71 50 04 08 
       01 00       
044AAA 01 00 00 05 0097*   	dl 1, 5, 13, 65, fn_laser_b, 265
       00 00 0D 00 
       00 41 00 00 
       87 50 04 09 
       01 00       
044ABC 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_pad, 266
       00 00 10 00 
       00 00 01 00 
       9D 50 04 0A 
       01 00       
044ACE 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_seeker_000, 267
       00 00 10 00 
       00 00 01 00 
       AF 50 04 0B 
       01 00       
044AE0 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_seeker_008, 268
       00 00 10 00 
       00 00 01 00 
       C8 50 04 0C 
       01 00       
044AF2 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_seeker_016, 269
       00 00 10 00 
       00 00 01 00 
       E1 50 04 0D 
       01 00       
044B04 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_seeker_024, 270
       00 00 10 00 
       00 00 01 00 
       FA 50 04 0E 
       01 00       
044B16 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_seeker_032, 271
       00 00 10 00 
       00 00 01 00 
       13 51 04 0F 
       01 00       
044B28 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_seeker_040, 272
       00 00 10 00 
       00 00 01 00 
       2C 51 04 10 
       01 00       
044B3A 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_seeker_048, 273
       00 00 10 00 
       00 00 01 00 
       45 51 04 11 
       01 00       
044B4C 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_seeker_056, 274
       00 00 10 00 
       00 00 01 00 
       5E 51 04 12 
       01 00       
044B5E 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_seeker_064, 275
       00 00 10 00 
       00 00 01 00 
       77 51 04 13 
       01 00       
044B70 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_seeker_072, 276
       00 00 10 00 
       00 00 01 00 
       90 51 04 14 
       01 00       
044B82 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_seeker_080, 277
       00 00 10 00 
       00 00 01 00 
       A9 51 04 15 
       01 00       
044B94 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_seeker_088, 278
       00 00 10 00 
       00 00 01 00 
       C2 51 04 16 
       01 00       
044BA6 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_seeker_096, 279
       00 00 10 00 
       00 00 01 00 
       DB 51 04 17 
       01 00       
044BB8 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_seeker_104, 280
       00 00 10 00 
       00 00 01 00 
       F4 51 04 18 
       01 00       
044BCA 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_seeker_112, 281
       00 00 10 00 
       00 00 01 00 
       0D 52 04 19 
       01 00       
044BDC 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_seeker_120, 282
       00 00 10 00 
       00 00 01 00 
       26 52 04 1A 
       01 00       
044BEE 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_seeker_128, 283
       00 00 10 00 
       00 00 01 00 
       3F 52 04 1B 
       01 00       
044C00 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_seeker_136, 284
       00 00 10 00 
       00 00 01 00 
       58 52 04 1C 
       01 00       
044C12 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_seeker_144, 285
       00 00 10 00 
       00 00 01 00 
       71 52 04 1D 
       01 00       
044C24 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_seeker_152, 286
       00 00 10 00 
       00 00 01 00 
       8A 52 04 1E 
       01 00       
044C36 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_seeker_160, 287
       00 00 10 00 
       00 00 01 00 
       A3 52 04 1F 
       01 00       
044C48 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_seeker_168, 288
       00 00 10 00 
       00 00 01 00 
       BC 52 04 20 
       01 00       
044C5A 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_seeker_176, 289
       00 00 10 00 
       00 00 01 00 
       D5 52 04 21 
       01 00       
044C6C 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_seeker_184, 290
       00 00 10 00 
       00 00 01 00 
       EE 52 04 22 
       01 00       
044C7E 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_seeker_192, 291
       00 00 10 00 
       00 00 01 00 
       07 53 04 23 
       01 00       
044C90 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_seeker_200, 292
       00 00 10 00 
       00 00 01 00 
       20 53 04 24 
       01 00       
044CA2 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_seeker_208, 293
       00 00 10 00 
       00 00 01 00 
       39 53 04 25 
       01 00       
044CB4 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_seeker_216, 294
       00 00 10 00 
       00 00 01 00 
       52 53 04 26 
       01 00       
044CC6 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_seeker_224, 295
       00 00 10 00 
       00 00 01 00 
       6B 53 04 27 
       01 00       
044CD8 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_seeker_232, 296
       00 00 10 00 
       00 00 01 00 
       84 53 04 28 
       01 00       
044CEA 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_seeker_240, 297
       00 00 10 00 
       00 00 01 00 
       9D 53 04 29 
       01 00       
044CFC 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_seeker_248, 298
       00 00 10 00 
       00 00 01 00 
       B6 53 04 2A 
       01 00       
044D0E 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_ship_0l, 299
       00 00 10 00 
       00 00 01 00 
       CF 53 04 2B 
       01 00       
044D20 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_ship_1c, 300
       00 00 10 00 
       00 00 01 00 
       E5 53 04 2C 
       01 00       
044D32 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_ship_2r, 301
       00 00 10 00 
       00 00 01 00 
       FB 53 04 2D 
       01 00       
044D44 01 00 00 08 0134*   	dl 1, 8, 8, 64, fn_ship_small, 302
       00 00 08 00 
       00 40 00 00 
       11 54 04 2E 
       01 00       
044D56 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_test_stripes, 303
       00 00 10 00 
       00 00 01 00 
       2A 54 04 2F 
       01 00       
044D68 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_turret_000, 304
       00 00 10 00 
       00 00 01 00 
       45 54 04 30 
       01 00       
044D7A 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_turret_008, 305
       00 00 10 00 
       00 00 01 00 
       5E 54 04 31 
       01 00       
044D8C 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_turret_016, 306
       00 00 10 00 
       00 00 01 00 
       77 54 04 32 
       01 00       
044D9E 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_turret_024, 307
       00 00 10 00 
       00 00 01 00 
       90 54 04 33 
       01 00       
044DB0 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_turret_032, 308
       00 00 10 00 
       00 00 01 00 
       A9 54 04 34 
       01 00       
044DC2 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_turret_040, 309
       00 00 10 00 
       00 00 01 00 
       C2 54 04 35 
       01 00       
044DD4 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_turret_048, 310
       00 00 10 00 
       00 00 01 00 
       DB 54 04 36 
       01 00       
044DE6 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_turret_056, 311
       00 00 10 00 
       00 00 01 00 
       F4 54 04 37 
       01 00       
044DF8 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_turret_064, 312
       00 00 10 00 
       00 00 01 00 
       0D 55 04 38 
       01 00       
044E0A 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_turret_072, 313
       00 00 10 00 
       00 00 01 00 
       26 55 04 39 
       01 00       
044E1C 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_turret_080, 314
       00 00 10 00 
       00 00 01 00 
       3F 55 04 3A 
       01 00       
044E2E 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_turret_088, 315
       00 00 10 00 
       00 00 01 00 
       58 55 04 3B 
       01 00       
044E40 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_turret_096, 316
       00 00 10 00 
       00 00 01 00 
       71 55 04 3C 
       01 00       
044E52 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_turret_104, 317
       00 00 10 00 
       00 00 01 00 
       8A 55 04 3D 
       01 00       
044E64 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_turret_112, 318
       00 00 10 00 
       00 00 01 00 
       A3 55 04 3E 
       01 00       
044E76 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_turret_120, 319
       00 00 10 00 
       00 00 01 00 
       BC 55 04 3F 
       01 00       
044E88 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_turret_128, 320
       00 00 10 00 
       00 00 01 00 
       D5 55 04 40 
       01 00       
044E9A 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_turret_136, 321
       00 00 10 00 
       00 00 01 00 
       EE 55 04 41 
       01 00       
044EAC 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_turret_144, 322
       00 00 10 00 
       00 00 01 00 
       07 56 04 42 
       01 00       
044EBE 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_turret_152, 323
       00 00 10 00 
       00 00 01 00 
       20 56 04 43 
       01 00       
044ED0 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_turret_160, 324
       00 00 10 00 
       00 00 01 00 
       39 56 04 44 
       01 00       
044EE2 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_turret_168, 325
       00 00 10 00 
       00 00 01 00 
       52 56 04 45 
       01 00       
044EF4 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_turret_176, 326
       00 00 10 00 
       00 00 01 00 
       6B 56 04 46 
       01 00       
044F06 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_turret_184, 327
       00 00 10 00 
       00 00 01 00 
       84 56 04 47 
       01 00       
044F18 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_turret_192, 328
       00 00 10 00 
       00 00 01 00 
       9D 56 04 48 
       01 00       
044F2A 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_turret_200, 329
       00 00 10 00 
       00 00 01 00 
       B6 56 04 49 
       01 00       
044F3C 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_turret_208, 330
       00 00 10 00 
       00 00 01 00 
       CF 56 04 4A 
       01 00       
044F4E 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_turret_216, 331
       00 00 10 00 
       00 00 01 00 
       E8 56 04 4B 
       01 00       
044F60 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_turret_224, 332
       00 00 10 00 
       00 00 01 00 
       01 57 04 4C 
       01 00       
044F72 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_turret_232, 333
       00 00 10 00 
       00 00 01 00 
       1A 57 04 4D 
       01 00       
044F84 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_turret_240, 334
       00 00 10 00 
       00 00 01 00 
       33 57 04 4E 
       01 00       
044F96 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_turret_248, 335
       00 00 10 00 
       00 00 01 00 
       4C 57 04 4F 
       01 00       
044FA8             0168*   
044FA8             0169*   ; files_list: ; filename:
044FA8 73 70 72 69 0170*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
044FBD 73 70 72 69 0171*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
044FD7 73 70 72 69 0172*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
044FF1 73 70 72 69 0173*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
04500B 73 70 72 69 0174*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
045025 73 70 72 69 0175*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
04503F 73 70 72 69 0176*   fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
045058 73 70 72 69 0177*   fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
045071 73 70 72 69 0178*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
045087 73 70 72 69 0179*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
04509D 73 70 72 69 0180*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
0450AF 73 70 72 69 0181*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0450C8 73 70 72 69 0182*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0450E1 73 70 72 69 0183*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0450FA 73 70 72 69 0184*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045113 73 70 72 69 0185*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
04512C 73 70 72 69 0186*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045145 73 70 72 69 0187*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
04515E 73 70 72 69 0188*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045177 73 70 72 69 0189*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
045190 73 70 72 69 0190*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0451A9 73 70 72 69 0191*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0451C2 73 70 72 69 0192*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0451DB 73 70 72 69 0193*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
0451F4 73 70 72 69 0194*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04520D 73 70 72 69 0195*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045226 73 70 72 69 0196*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04523F 73 70 72 69 0197*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045258 73 70 72 69 0198*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045271 73 70 72 69 0199*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
04528A 73 70 72 69 0200*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0452A3 73 70 72 69 0201*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0452BC 73 70 72 69 0202*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0452D5 73 70 72 69 0203*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0452EE 73 70 72 69 0204*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045307 73 70 72 69 0205*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045320 73 70 72 69 0206*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045339 73 70 72 69 0207*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045352 73 70 72 69 0208*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
04536B 73 70 72 69 0209*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045384 73 70 72 69 0210*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
04539D 73 70 72 69 0211*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0453B6 73 70 72 69 0212*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0453CF 73 70 72 69 0213*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
0453E5 73 70 72 69 0214*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
0453FB 73 70 72 69 0215*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
045411 73 70 72 69 0216*   fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
04542A 73 70 72 69 0217*   fn_test_stripes: db "sprites/test_stripes.rgba2",0
       74 65 73 2F 
       74 65 73 74 
       5F 73 74 72 
       69 70 65 73 
       2E 72 67 62 
       61 32 00    
045445 73 70 72 69 0218*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
04545E 73 70 72 69 0219*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045477 73 70 72 69 0220*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045490 73 70 72 69 0221*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0454A9 73 70 72 69 0222*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0454C2 73 70 72 69 0223*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0454DB 73 70 72 69 0224*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0454F4 73 70 72 69 0225*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04550D 73 70 72 69 0226*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
045526 73 70 72 69 0227*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
04553F 73 70 72 69 0228*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045558 73 70 72 69 0229*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045571 73 70 72 69 0230*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
04558A 73 70 72 69 0231*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0455A3 73 70 72 69 0232*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0455BC 73 70 72 69 0233*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0455D5 73 70 72 69 0234*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0455EE 73 70 72 69 0235*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045607 73 70 72 69 0236*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045620 73 70 72 69 0237*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045639 73 70 72 69 0238*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045652 73 70 72 69 0239*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
04566B 73 70 72 69 0240*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045684 73 70 72 69 0241*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04569D 73 70 72 69 0242*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0456B6 73 70 72 69 0243*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0456CF 73 70 72 69 0244*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0456E8 73 70 72 69 0245*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045701 73 70 72 69 0246*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
04571A 73 70 72 69 0247*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045733 73 70 72 69 0248*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
04574C 73 70 72 69 0249*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045765             0055        include "images_ui.inc"
045765             0001*   ; Generated by make_images.py
045765             0002*   
045765             0003*   ui_num_images: equ 32
045765             0004*   
045765             0005*   ; buffer_ids:
045765             0006*   BUF_BEZEL_L: equ 0
045765             0007*   BUF_BEZEL_R: equ 1
045765             0008*   BUF_CTL_PANEL_L: equ 2
045765             0009*   BUF_CTL_PANEL_R: equ 3
045765             0010*   BUF_MFD_ARMS: equ 4
045765             0011*   BUF_MFD_BEZEL: equ 5
045765             0012*   BUF_MFD_GUN_0: equ 6
045765             0013*   BUF_MFD_GUN_1: equ 7
045765             0014*   BUF_MFD_GUN_2: equ 8
045765             0015*   BUF_MFD_GUN_3: equ 9
045765             0016*   BUF_MFD_GUN_4: equ 10
045765             0017*   BUF_MFD_GUN_5: equ 11
045765             0018*   BUF_MFD_MAVERICK_0: equ 12
045765             0019*   BUF_MFD_MAVERICK_1: equ 13
045765             0020*   BUF_MFD_MAVERICK_2: equ 14
045765             0021*   BUF_MFD_MAVERICK_3: equ 15
045765             0022*   BUF_MFD_MAVERICK_4: equ 16
045765             0023*   BUF_MFD_MAVERICK_5: equ 17
045765             0024*   BUF_MFD_SIDEWINDER_0: equ 18
045765             0025*   BUF_MFD_SIDEWINDER_1: equ 19
045765             0026*   BUF_MFD_SIDEWINDER_2: equ 20
045765             0027*   BUF_MFD_SIDEWINDER_3: equ 21
045765             0028*   BUF_MFD_SIDEWINDER_4: equ 22
045765             0029*   BUF_MFD_SIDEWINDER_5: equ 23
045765             0030*   BUF_MFD_SPARROW_0: equ 24
045765             0031*   BUF_MFD_SPARROW_1: equ 25
045765             0032*   BUF_MFD_SPARROW_2: equ 26
045765             0033*   BUF_MFD_SPARROW_3: equ 27
045765             0034*   BUF_MFD_SPARROW_4: equ 28
045765             0035*   BUF_MFD_SPARROW_5: equ 29
045765             0036*   BUF_SPLASH_BG: equ 30
045765             0037*   BUF_SPLASH_LOGO: equ 31
045765             0038*   
045765             0039*   ui_image_list: ; type; width; height; size; filename; bufferId:
045765 01 00 00 80 0040*   	dl 1, 128, 384, 49152, fn_bezel_l, 0
       00 00 80 01 
       00 00 C0 00 
       A5 59 04 00 
       00 00       
045777 01 00 00 80 0041*   	dl 1, 128, 384, 49152, fn_bezel_r, 1
       00 00 80 01 
       00 00 C0 00 
       B6 59 04 01 
       00 00       
045789 01 00 00 80 0042*   	dl 1, 128, 64, 8192, fn_ctl_panel_l, 2
       00 00 40 00 
       00 00 20 00 
       C7 59 04 02 
       00 00       
04579B 01 00 00 80 0043*   	dl 1, 128, 64, 8192, fn_ctl_panel_r, 3
       00 00 40 00 
       00 00 20 00 
       DC 59 04 03 
       00 00       
0457AD 01 00 00 2B 0044*   	dl 1, 43, 38, 1634, fn_mfd_arms, 4
       00 00 26 00 
       00 62 06 00 
       F1 59 04 04 
       00 00       
0457BF 01 00 00 3B 0045*   	dl 1, 59, 52, 3068, fn_mfd_bezel, 5
       00 00 34 00 
       00 FC 0B 00 
       03 5A 04 05 
       00 00       
0457D1 01 00 00 01 0046*   	dl 1, 1, 6, 6, fn_mfd_gun_0, 6
       00 00 06 00 
       00 06 00 00 
       16 5A 04 06 
       00 00       
0457E3 01 00 00 01 0047*   	dl 1, 1, 6, 6, fn_mfd_gun_1, 7
       00 00 06 00 
       00 06 00 00 
       29 5A 04 07 
       00 00       
0457F5 01 00 00 01 0048*   	dl 1, 1, 6, 6, fn_mfd_gun_2, 8
       00 00 06 00 
       00 06 00 00 
       3C 5A 04 08 
       00 00       
045807 01 00 00 01 0049*   	dl 1, 1, 6, 6, fn_mfd_gun_3, 9
       00 00 06 00 
       00 06 00 00 
       4F 5A 04 09 
       00 00       
045819 01 00 00 01 0050*   	dl 1, 1, 6, 6, fn_mfd_gun_4, 10
       00 00 06 00 
       00 06 00 00 
       62 5A 04 0A 
       00 00       
04582B 01 00 00 01 0051*   	dl 1, 1, 6, 6, fn_mfd_gun_5, 11
       00 00 06 00 
       00 06 00 00 
       75 5A 04 0B 
       00 00       
04583D 01 00 00 04 0052*   	dl 1, 4, 6, 24, fn_mfd_maverick_0, 12
       00 00 06 00 
       00 18 00 00 
       88 5A 04 0C 
       00 00       
04584F 01 00 00 04 0053*   	dl 1, 4, 6, 24, fn_mfd_maverick_1, 13
       00 00 06 00 
       00 18 00 00 
       A0 5A 04 0D 
       00 00       
045861 01 00 00 04 0054*   	dl 1, 4, 6, 24, fn_mfd_maverick_2, 14
       00 00 06 00 
       00 18 00 00 
       B8 5A 04 0E 
       00 00       
045873 01 00 00 04 0055*   	dl 1, 4, 6, 24, fn_mfd_maverick_3, 15
       00 00 06 00 
       00 18 00 00 
       D0 5A 04 0F 
       00 00       
045885 01 00 00 04 0056*   	dl 1, 4, 6, 24, fn_mfd_maverick_4, 16
       00 00 06 00 
       00 18 00 00 
       E8 5A 04 10 
       00 00       
045897 01 00 00 04 0057*   	dl 1, 4, 6, 24, fn_mfd_maverick_5, 17
       00 00 06 00 
       00 18 00 00 
       00 5B 04 11 
       00 00       
0458A9 01 00 00 03 0058*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_0, 18
       00 00 06 00 
       00 12 00 00 
       18 5B 04 12 
       00 00       
0458BB 01 00 00 03 0059*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_1, 19
       00 00 06 00 
       00 12 00 00 
       32 5B 04 13 
       00 00       
0458CD 01 00 00 03 0060*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_2, 20
       00 00 06 00 
       00 12 00 00 
       4C 5B 04 14 
       00 00       
0458DF 01 00 00 03 0061*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_3, 21
       00 00 06 00 
       00 12 00 00 
       66 5B 04 15 
       00 00       
0458F1 01 00 00 03 0062*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_4, 22
       00 00 06 00 
       00 12 00 00 
       80 5B 04 16 
       00 00       
045903 01 00 00 03 0063*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_5, 23
       00 00 06 00 
       00 12 00 00 
       9A 5B 04 17 
       00 00       
045915 01 00 00 03 0064*   	dl 1, 3, 7, 21, fn_mfd_sparrow_0, 24
       00 00 07 00 
       00 15 00 00 
       B4 5B 04 18 
       00 00       
045927 01 00 00 03 0065*   	dl 1, 3, 7, 21, fn_mfd_sparrow_1, 25
       00 00 07 00 
       00 15 00 00 
       CB 5B 04 19 
       00 00       
045939 01 00 00 03 0066*   	dl 1, 3, 7, 21, fn_mfd_sparrow_2, 26
       00 00 07 00 
       00 15 00 00 
       E2 5B 04 1A 
       00 00       
04594B 01 00 00 03 0067*   	dl 1, 3, 7, 21, fn_mfd_sparrow_3, 27
       00 00 07 00 
       00 15 00 00 
       F9 5B 04 1B 
       00 00       
04595D 01 00 00 03 0068*   	dl 1, 3, 7, 21, fn_mfd_sparrow_4, 28
       00 00 07 00 
       00 15 00 00 
       10 5C 04 1C 
       00 00       
04596F 01 00 00 03 0069*   	dl 1, 3, 7, 21, fn_mfd_sparrow_5, 29
       00 00 07 00 
       00 15 00 00 
       27 5C 04 1D 
       00 00       
045981 01 00 00 40 0070*   	dl 1, 320, 240, 76800, fn_splash_bg, 30
       01 00 F0 00 
       00 00 2C 01 
       3E 5C 04 1E 
       00 00       
045993 01 00 00 A0 0071*   	dl 1, 160, 106, 16960, fn_splash_logo, 31
       00 00 6A 00 
       00 40 42 00 
       51 5C 04 1F 
       00 00       
0459A5             0072*   
0459A5             0073*   ; files_list: ; filename:
0459A5 75 69 2F 62 0074*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
0459B6 75 69 2F 62 0075*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
0459C7 75 69 2F 63 0076*   fn_ctl_panel_l: db "ui/ctl_panel_l.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
0459DC 75 69 2F 63 0077*   fn_ctl_panel_r: db "ui/ctl_panel_r.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
0459F1 75 69 2F 6D 0078*   fn_mfd_arms: db "ui/mfd_arms.rgba2",0
       66 64 5F 61 
       72 6D 73 2E 
       72 67 62 61 
       32 00       
045A03 75 69 2F 6D 0079*   fn_mfd_bezel: db "ui/mfd_bezel.rgba2",0
       66 64 5F 62 
       65 7A 65 6C 
       2E 72 67 62 
       61 32 00    
045A16 75 69 2F 6D 0080*   fn_mfd_gun_0: db "ui/mfd_gun_0.rgba2",0
       66 64 5F 67 
       75 6E 5F 30 
       2E 72 67 62 
       61 32 00    
045A29 75 69 2F 6D 0081*   fn_mfd_gun_1: db "ui/mfd_gun_1.rgba2",0
       66 64 5F 67 
       75 6E 5F 31 
       2E 72 67 62 
       61 32 00    
045A3C 75 69 2F 6D 0082*   fn_mfd_gun_2: db "ui/mfd_gun_2.rgba2",0
       66 64 5F 67 
       75 6E 5F 32 
       2E 72 67 62 
       61 32 00    
045A4F 75 69 2F 6D 0083*   fn_mfd_gun_3: db "ui/mfd_gun_3.rgba2",0
       66 64 5F 67 
       75 6E 5F 33 
       2E 72 67 62 
       61 32 00    
045A62 75 69 2F 6D 0084*   fn_mfd_gun_4: db "ui/mfd_gun_4.rgba2",0
       66 64 5F 67 
       75 6E 5F 34 
       2E 72 67 62 
       61 32 00    
045A75 75 69 2F 6D 0085*   fn_mfd_gun_5: db "ui/mfd_gun_5.rgba2",0
       66 64 5F 67 
       75 6E 5F 35 
       2E 72 67 62 
       61 32 00    
045A88 75 69 2F 6D 0086*   fn_mfd_maverick_0: db "ui/mfd_maverick_0.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       30 2E 72 67 
       62 61 32 00 
045AA0 75 69 2F 6D 0087*   fn_mfd_maverick_1: db "ui/mfd_maverick_1.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       31 2E 72 67 
       62 61 32 00 
045AB8 75 69 2F 6D 0088*   fn_mfd_maverick_2: db "ui/mfd_maverick_2.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       32 2E 72 67 
       62 61 32 00 
045AD0 75 69 2F 6D 0089*   fn_mfd_maverick_3: db "ui/mfd_maverick_3.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       33 2E 72 67 
       62 61 32 00 
045AE8 75 69 2F 6D 0090*   fn_mfd_maverick_4: db "ui/mfd_maverick_4.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       34 2E 72 67 
       62 61 32 00 
045B00 75 69 2F 6D 0091*   fn_mfd_maverick_5: db "ui/mfd_maverick_5.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       35 2E 72 67 
       62 61 32 00 
045B18 75 69 2F 6D 0092*   fn_mfd_sidewinder_0: db "ui/mfd_sidewinder_0.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 30 2E 
       72 67 62 61 
       32 00       
045B32 75 69 2F 6D 0093*   fn_mfd_sidewinder_1: db "ui/mfd_sidewinder_1.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 31 2E 
       72 67 62 61 
       32 00       
045B4C 75 69 2F 6D 0094*   fn_mfd_sidewinder_2: db "ui/mfd_sidewinder_2.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 32 2E 
       72 67 62 61 
       32 00       
045B66 75 69 2F 6D 0095*   fn_mfd_sidewinder_3: db "ui/mfd_sidewinder_3.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 33 2E 
       72 67 62 61 
       32 00       
045B80 75 69 2F 6D 0096*   fn_mfd_sidewinder_4: db "ui/mfd_sidewinder_4.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 34 2E 
       72 67 62 61 
       32 00       
045B9A 75 69 2F 6D 0097*   fn_mfd_sidewinder_5: db "ui/mfd_sidewinder_5.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 35 2E 
       72 67 62 61 
       32 00       
045BB4 75 69 2F 6D 0098*   fn_mfd_sparrow_0: db "ui/mfd_sparrow_0.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 30 
       2E 72 67 62 
       61 32 00    
045BCB 75 69 2F 6D 0099*   fn_mfd_sparrow_1: db "ui/mfd_sparrow_1.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 31 
       2E 72 67 62 
       61 32 00    
045BE2 75 69 2F 6D 0100*   fn_mfd_sparrow_2: db "ui/mfd_sparrow_2.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 32 
       2E 72 67 62 
       61 32 00    
045BF9 75 69 2F 6D 0101*   fn_mfd_sparrow_3: db "ui/mfd_sparrow_3.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 33 
       2E 72 67 62 
       61 32 00    
045C10 75 69 2F 6D 0102*   fn_mfd_sparrow_4: db "ui/mfd_sparrow_4.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 34 
       2E 72 67 62 
       61 32 00    
045C27 75 69 2F 6D 0103*   fn_mfd_sparrow_5: db "ui/mfd_sparrow_5.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 35 
       2E 72 67 62 
       61 32 00    
045C3E 75 69 2F 73 0104*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
045C51 75 69 2F 73 0105*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
045C66             0056        include "levels.inc"
045C66 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
045D00             0002*   
045D00             0003*   ; tileset indices
045D00             0004*   tiles_dg: equ 0
045D00             0005*   ; tiles_xevious: equ 1
045D00 00 00 00    0006*   tileset_ptr_idx: dl 0
045D03             0007*   tileset_ptrs:
045D03             0008*       ; dl tiles_xevious_levels
045D03 CB 5D 04    0009*       dl tileset_00_levels
045D06 00 00 00    0010*   tileset_ptrs_end: dl 0 ; list terminator
045D09             0011*   
045D09             0012*   ; get a pointer to the current tileset
045D09             0013*   ; inputs: tileset_ptr_idx
045D09             0014*   ; returns: ix = pointer to tileset levels lut
045D09             0015*   get_tileset_ptr:
045D09 3A 00 5D 04 0016*       ld a,(tileset_ptr_idx)
045D0D 57          0017*       ld d,a ; d = tileset index
045D0E 1E 03       0018*       ld e,3 ; three bytes per index record
045D10 ED 5C       0019*       mlt de ; offset into tileset_ptrs lut
045D12 DD 21 03 5D 0020*       ld ix,tileset_ptrs
       04          
045D17 DD 19       0021*       add ix,de ; ix = pointer to tileset_ptrs record
045D19 C9          0022*       ret
045D1A             0023*   ; end get_tileset_ptr
045D1A             0024*   
045D1A             0025*   ; intialize a tileset
045D1A             0026*   ; inputs: a = index into tileset_ptrs
045D1A             0027*   init_tileset:
045D1A 32 00 5D 04 0028*       ld (tileset_ptr_idx),a ; store new tileset index
045D1E CD 09 5D 04 0029*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
045D22 DD 37 00    0030*       ld ix,(ix) ; ix = pointer to tileset levels lut
045D25 DD 7E FF    0031*       ld a,(ix-1) ; number of levels in the tileset
045D28 32 58 5D 04 0032*       ld (num_levels),a
045D2C AF          0033*       xor a ; reset current level to zero
045D2D 32 57 5D 04 0034*       ld (cur_level),a
045D31 C3 89 5D 04 0035*       jp init_level
045D35             0036*   ; end init_tileset
045D35             0037*   
045D35             0038*   next_tileset:
045D35 21 00 5D 04 0039*       ld hl,tileset_ptr_idx
045D39 34          0040*       inc (hl) ; bump to next index
045D3A CD 09 5D 04 0041*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
045D3E DD 27 00    0042*       ld hl,(ix) ; ix = pointer to tileset levels lut
045D41             0043*       sign_hlu ; check for list terminator (0)
045D41 19          0001*M1     add hl,de ; 1 cycle
045D42 B7          0002*M1     or a ; clear flags ; 1 cycle
045D43 ED 52       0003*M1     sbc hl,de ; 2 cycles
045D45             0004*M1     ; 4 cycles total
045D45 C2 53 5D 04 0044*       jp nz,@F ; not end of list
045D49 3E FF       0045*       ld a,-1 ; will wrap around to zero on the next iteration
045D4B 32 00 5D 04 0046*       ld (tileset_ptr_idx),a
045D4F C3 35 5D 04 0047*       jp next_tileset ; try again
045D53             0048*   @@:
045D53 C3 1A 5D 04 0049*       jp init_tileset
045D57             0050*   ; end next_tileset
045D57             0051*   
045D57 00          0052*   cur_level: db 0
045D58 00          0053*   num_levels: db 0
045D59             0054*   
045D59             0055*   ; get a pointer to the current level lookup record
045D59             0056*   ; inputs: tileset_ptr_idx, cur_level
045D59             0057*   ; returns: ix = pointer to level definition
045D59             0058*   get_level_ptr:
045D59 CD 09 5D 04 0059*       call get_tileset_ptr
045D5D DD 37 00    0060*       ld ix,(ix) ; ix = pointer to tileset levels lut
045D60 3A 57 5D 04 0061*       ld a,(cur_level)
045D64 57          0062*       ld d,a ; d = level index
045D65 1E 03       0063*       ld e,3 ; three bytes per level record
045D67 ED 5C       0064*       mlt de ; offset into tileset levels lut
045D69 DD 19       0065*       add ix,de ; ix = pointer to level record
045D6B C9          0066*       ret
045D6C             0067*   ; end get_level_ptr
045D6C             0068*   
045D6C             0069*   ; advance to the next level in the current tileset
045D6C             0070*   ; inputs: tileset_ptr_idx, cur_level
045D6C             0071*   next_level:
045D6C 21 57 5D 04 0072*       ld hl,cur_level
045D70 34          0073*       inc (hl) ; bump to next level
045D71 CD 59 5D 04 0074*       call get_level_ptr ; ix points to current level lookup record
045D75 DD 27 00    0075*       ld hl,(ix) ; hl = pointer to next level lookup record
045D78             0076*       sign_hlu ; check for list terminator (0)
045D78 19          0001*M1     add hl,de ; 1 cycle
045D79 B7          0002*M1     or a ; clear flags ; 1 cycle
045D7A ED 52       0003*M1     sbc hl,de ; 2 cycles
045D7C             0004*M1     ; 4 cycles total
045D7C C2 89 5D 04 0077*       jp nz,@F ; not end of list
045D80 AF          0078*       xor a ; reset level to zero
045D81 32 57 5D 04 0079*       ld (cur_level),a
045D85 C3 35 5D 04 0080*       jp next_tileset ; try next tileset
045D89             0081*   @@: ; fall through to init_level
045D89             0082*   ; end next_level
045D89             0083*   
045D89             0084*   ; inputs: ix pointed to tileset level definition
045D89             0085*   init_level:
045D89 CD 59 5D 04 0086*       call get_level_ptr ; ix points to level lookup record
045D8D DD 37 00    0087*       ld ix,(ix) ; ix points to level definition
045D90             0088*   ; set tiles_cols
045D90 DD 7E 00    0089*       ld a,(ix+0)
045D93 32 06 6E 04 0090*       ld (tiles_cols),a
045D97             0091*   ; set tiles_row counter
045D97 DD 7E 01    0092*       ld a,(ix+1)
045D9A 32 03 6E 04 0093*       ld (tiles_row),a
045D9E             0094*   ; set cur_baseBufferId
045D9E DD 27 04    0095*       ld hl,(ix+4)
045DA1 22 07 6E 04 0096*       ld (cur_baseBufferId),hl
045DA5             0097*   ; set tiles_row_defs
045DA5 ED 32 07    0098*       lea ix,ix+7 ; ix points to definition of first tile of first row
045DA8 DD 22 00 6E 0099*       ld (tiles_row_defs),ix
       04          
045DAD             0100*   ; print_level:
045DAD             0101*   level_x: equ 48
045DAD             0102*   level_y: equ 0
045DAD 0E 30       0103*       ld c,level_x
045DAF 06 00       0104*       ld b,level_y
045DB1 CD 37 1A 04 0105*       call vdu_move_cursor
045DB5 CD 00 01 04 0106*       call printInline
045DB9 4C 65 76 65 0107*       asciz "Level: "
       6C 3A 20 00 
045DC1 3A 57 5D 04 0108*       ld a,(cur_level)
045DC5 CD 4A 01 04 0109*       call printHexA
045DC9             0110*       ; call printNewLine
045DC9             0111*       ; ld hl,(cur_baseBufferId)
045DC9             0112*       ; call printDec
045DC9             0113*   
045DC9             0114*   ; ; draw initial background tiles
045DC9             0115*   ; ; TODO: make this a stars background
045DC9             0116*   ;     ld hl,BUF_STATION_BG_00
045DC9             0117*   ;     call vdu_buff_select
045DC9             0118*   ;     ld bc,0
045DC9             0119*   ;     ld de,field_top
045DC9             0120*   ;     call vdu_plot_bmp
045DC9             0121*   
045DC9             0122*   ;     ld hl,BUF_STATION_BG_01
045DC9             0123*   ;     call vdu_buff_select
045DC9             0124*   ;     ld bc,0
045DC9             0125*   ;     ld de,field_top+256
045DC9             0126*   ;     call vdu_plot_bmp
045DC9             0127*   
045DC9 C9          0128*       ret
045DCA             0129*   ; end init_level
045DCA             0057        include "levels_tileset_0.inc"
045DCA             0001*   ; Generated from tiles/dg/dg0_00.tmx
045DCA             0002*   
045DCA 01          0003*   tileset_00_num_levels: db 1
045DCB             0004*   
045DCB             0005*   tileset_00_levels:
045DCB D1 5D 04    0006*   	dl tileset_00_level_00
045DCE 00 00 00    0007*   	dl 0 ; list terminator
045DD1             0008*   
045DD1             0009*   tileset_00_level_00: ; Level 0
045DD1 10          0010*   	db 16          ; num cols
045DD2 20 00 00    0011*   	dl 32          ; num rows
045DD5 00 02 00    0012*   	dl 512 ; base bufferId
045DD8 00 00 00 00 0013*   	db 000,000,000,000,000,101,116,115,100,115,104,000,000,000,000,000
       00 65 74 73 
       64 73 68 00 
       00 00 00 00 
045DE8 00 00 00 65 0014*   	db 000,000,000,101,098,116,113,098,114,115,116,097,104,000,000,000
       62 74 71 62 
       72 73 74 61 
       68 00 00 00 
045DF8 00 65 61 F5 0015*   	db 000,101,097,245,246,098,097,099,098,099,113,113,114,098,104,000
       F6 62 61 63 
       62 63 71 71 
       72 62 68 00 
045E08 00 74 71 88 0016*   	db 000,116,113,136,137,115,113,114,113,114,098,099,113,114,100,000
       89 73 71 72 
       71 72 62 63 
       71 72 64 00 
045E18 65 72 61 96 0017*   	db 101,114,097,150,151,099,097,105,098,098,081,082,074,083,084,104
       97 63 61 69 
       62 62 51 52 
       4A 53 54 68 
045E28 71 71 72 96 0018*   	db 113,113,114,150,151,167,216,216,182,113,065,066,248,067,068,116
       97 A7 D8 D8 
       B6 71 41 42 
       F8 43 44 74 
045E38 71 69 62 9A 0019*   	db 113,105,098,154,155,097,098,097,165,168,055,248,001,248,056,114
       9B 61 62 61 
       A5 A8 37 F8 
       01 F8 38 72 
045E48 71 72 64 72 0020*   	db 113,114,100,114,113,100,113,114,113,114,049,050,248,051,052,098
       71 64 71 72 
       71 72 31 32 
       F8 33 34 62 
045E58 61 62 61 64 0021*   	db 097,098,097,100,097,098,100,098,098,098,033,034,074,035,036,099
       61 62 64 62 
       62 62 21 22 
       4A 23 24 63 
045E68 71 64 71 72 0022*   	db 113,100,113,114,113,114,121,114,115,113,087,088,188,113,100,113
       71 72 79 72 
       73 71 57 58 
       BC 71 64 71 
045E78 61 62 59 5A 0023*   	db 097,098,089,090,091,098,114,098,136,137,071,072,219,097,098,097
       5B 62 72 62 
       88 89 47 48 
       DB 61 62 61 
045E88 64 71 49 05 0024*   	db 100,113,073,005,075,171,220,172,134,135,171,220,236,220,220,172
       4B AB DC AC 
       86 87 AB DC 
       EC DC DC AC 
045E98 62 64 39 3A 0025*   	db 098,100,057,058,059,097,098,100,134,135,099,100,097,098,100,098
       3B 61 62 64 
       86 87 63 64 
       61 62 64 62 
045EA8 72 62 72 73 0026*   	db 114,098,114,115,113,116,099,113,154,155,115,113,100,113,114,113
       71 74 63 71 
       9A 9B 73 71 
       64 71 72 71 
045EB8 62 72 62 63 0027*   	db 098,114,098,099,113,114,105,114,241,242,099,097,098,097,098,100
       71 72 69 72 
       F1 F2 63 61 
       62 61 62 64 
045EC8 73 79 71 72 0028*   	db 115,121,113,114,097,098,113,114,180,097,113,100,113,121,113,114
       61 62 71 72 
       B4 61 71 64 
       71 79 71 72 
045ED8 61 62 98 99 0029*   	db 097,098,152,153,098,152,153,098,211,100,097,098,100,243,098,098
       62 98 99 62 
       D3 64 61 62 
       64 F3 62 62 
045EE8 64 71 86 87 0030*   	db 100,113,134,135,114,134,135,115,195,212,212,212,212,243,114,113
       72 86 87 73 
       C3 D4 D4 D4 
       D4 F3 72 71 
045EF8 62 61 F5 F6 0031*   	db 098,097,245,246,098,245,246,099,211,114,099,097,098,243,098,100
       62 F5 F6 63 
       D3 72 63 61 
       62 F3 62 64 
045F08 71 72 F1 F2 0032*   	db 113,114,241,242,115,241,242,163,162,098,105,100,087,088,113,114
       73 F1 F2 A3 
       A2 62 69 64 
       57 58 71 72 
045F18 73 71 51 52 0033*   	db 115,113,081,082,074,083,084,098,114,115,113,116,071,072,098,098
       4A 53 54 62 
       72 73 71 74 
       47 48 62 62 
045F28 63 61 41 42 0034*   	db 099,097,065,066,248,067,068,113,089,090,090,090,090,091,114,113
       F8 43 44 71 
       59 5A 5A 5A 
       5A 5B 72 71 
045F38 71 64 37 F8 0035*   	db 113,100,055,248,001,248,056,114,073,148,098,040,105,075,098,100
       01 F8 38 72 
       49 94 62 28 
       69 4B 62 64 
045F48 61 62 31 32 0036*   	db 097,098,049,050,248,051,052,114,073,132,056,005,055,075,113,114
       F8 33 34 72 
       49 84 38 05 
       37 4B 71 72 
045F58 71 64 21 22 0037*   	db 113,100,033,034,074,035,036,114,073,247,116,040,123,075,098,121
       4A 23 24 72 
       49 F7 74 28 
       7B 4B 62 79 
045F68 61 62 F1 F2 0038*   	db 097,098,241,242,100,241,242,098,073,113,243,121,107,075,099,113
       64 F1 F2 62 
       49 71 F3 79 
       6B 4B 63 71 
045F78 67 71 86 87 0039*   	db 103,113,134,135,114,134,135,113,057,058,058,058,058,059,114,102
       72 86 87 71 
       39 3A 3A 3A 
       3A 3B 72 66 
045F88 00 64 9A 9B 0040*   	db 000,100,154,155,098,154,155,100,098,098,099,180,098,100,098,000
       62 9A 9B 64 
       62 62 63 B4 
       62 64 62 00 
045F98 00 67 72 63 0041*   	db 000,103,114,099,113,114,114,115,163,212,212,196,113,114,098,000
       71 72 72 73 
       A3 D4 D4 C4 
       71 72 62 00 
045FA8 00 00 62 71 0042*   	db 000,000,098,113,121,098,098,099,105,098,097,211,100,098,102,000
       79 62 62 63 
       69 62 61 D3 
       64 62 66 00 
045FB8 00 00 67 71 0043*   	db 000,000,103,113,114,100,114,098,100,113,114,179,097,102,000,000
       72 64 72 62 
       64 71 72 B3 
       61 66 00 00 
045FC8 00 00 00 00 0044*   	db 000,000,000,000,000,103,100,097,098,100,102,000,000,000,000,000
       00 67 64 61 
       62 64 66 00 
       00 00 00 00 
045FD8             0058        ; include "levels_xevious.inc"
045FD8             0059        include "player.inc"
045FD8 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
046000             0002*   
046000             0003*   ; ######## GAME STATE VARIABLES #######
046000             0004*   ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
046000 00 00 00    0005*   player_score: dl 0 ; integer
046003             0006*   ; player current shields,binary
046003             0007*   ; when < 0 player splodes
046003             0008*   ; restores to player_max_shields when new ship spawns
046003 10 00 00    0009*   player_shields: dl 16 ; integer
046006             0010*   ; max player shields,binary
046006             0011*   ; can increase with power-ups (todo)
046006 10 00 00    0012*   player_max_shields: dl 16 ; integer
046009             0013*   ; when reaches zero,game ends
046009             0014*   ; can increase based on TODO
046009 03          0015*   player_ships: db 3 ; integer
04600A             0016*   
04600A             0017*   speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
04600A             0018*   player_lasers_max: equ 4
04600A             0019*   
04600A             0020*   player_defaults:
04600A 05          0021*       db player               ; type
04600B 2B 01 00    0022*       dl BUF_SHIP_0L          ; base_bufferId
04600E F3 65 04    0023*       dl do_player            ; move_program
046011 40          0024*       db %01000000            ; collisions bit 6 signals sprite alive
046012 10          0025*       db 16                   ; dim_x
046013 10          0026*       db 16                   ; dim_y
046014 01          0027*       db 1                    ; num_orientations
046015 01          0028*       db 1                    ; num_animations
046016 00          0029*       db 0                    ; animation
046017 00          0030*       db 0                    ; animation_timer
046018 00          0031*       db 0                    ; move_timer
046019 00          0032*       db 0                    ; move_step
04601A 00          0033*       db 0                    ; points
04601B 00          0034*       db 0                    ; shield_damage
04601C 00          0035*       db 0                    ; frame
04601D             0036*   
04601D             0037*   
04601D             0038*   ; set initial player position
04601D             0039*   ; inputs: none,everything is hardcoded
04601D             0040*   ; outputs: player_x/y set to bottom-left corner of screen
04601D             0041*   ; destroys: a
04601D             0042*   player_init:
04601D FD 21 00 81 0043*       ld iy,player_begin
       04          
046022 FD 22 65 71 0044*       ld (table_pointer),iy
       04          
046027 FD 7E 00    0045*       ld a,(iy+sprite_id)
04602A CD 00 20 04 0046*       call vdu_sprite_select
04602E CD 13 20 04 0047*       call vdu_sprite_clear_frames
046032 21 2B 01 00 0048*       ld hl,BUF_SHIP_0L
046036 CD 55 21 04 0049*       call vdu_sprite_add_buff
04603A 21 2C 01 00 0050*       ld hl,BUF_SHIP_1C
04603E CD 55 21 04 0051*       call vdu_sprite_add_buff
046042 21 2D 01 00 0052*       ld hl,BUF_SHIP_2R
046046 CD 55 21 04 0053*       call vdu_sprite_add_buff
04604A 01 00 00 00 0054*       ld bc,0
04604E FD 0F 01    0055*       ld (iy+sprite_x),bc
046051 11 00 6F 01 0056*       ld de,sprite_bottom*256 ; max sprite y-coordinate
046055 FD 1F 04    0057*       ld (iy+sprite_y),de
046058 CD CC 20 04 0058*       call vdu_sprite_move_abs168
04605C CD 76 20 04 0059*       call vdu_sprite_show
046060 21 FE 65 04 0060*       ld hl,player_alive
046064 22 F0 65 04 0061*       ld (player_state),hl
046068 FD CB 1D F6 0062*       set sprite_alive,(iy+sprite_collisions)
04606C C9          0063*       ret
04606D             0064*   
04606D             0065*   ; UART ports for reading joystick input
04606D             0066*   portC: 	EQU 	$9E ; reads dpad input
04606D             0067*   joy_u: equ 1
04606D             0068*   joy_d: equ 3
04606D             0069*   joy_l: equ 5
04606D             0070*   joy_r: equ 7
04606D             0071*   portD: 	EQU 	$A2 ; reads buttons
04606D             0072*   btn_b: equ 5
04606D             0073*   btn_u: equ 7
04606D             0074*   
04606D             0075*   ; process player keyboard input, set player bitmap
04606D             0076*   ; velocities and draw player bitmap at updated coordinates
04606D             0077*   ; Inputs: player_x/y set at desired position
04606D             0078*   ; Returns: player bitmap drawn at updated position
04606D             0079*   ; Destroys: probably everything except maybe iy
04606D             0080*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
04606D             0081*   ; TODO: requires sprite implementation
04606D             0082*   player_input:
04606D             0083*   ; DEBUG
04606D CD 00 1A 04 0084*       call vdu_home_cursor
046071 CD 00 01 04 0085*       call printInline
046075 37 36 35 34 0086*       asciz "76543210\r\n"
       33 32 31 30 
       0D 0A 00    
046080 AF          0087*       xor a ; clear flags
046081 DB 9E       0088*       IN a,(portC) ; read dpad input
046083 CD A8 03 04 0089*       call printBin8
046087 CD 1C 01 04 0090*       call printNewLine
04608B AF          0091*       xor a ; clear flags
04608C DB A2       0092*       IN a,(portD) ; read fire button input
04608E CD A8 03 04 0093*       call printBin8
046092 CD 1C 01 04 0094*       call printNewLine
046096             0095*   ; END DEBUG
046096             0096*   
046096 FD 21 00 81 0097*       ld iy,player_begin
       04          
04609B FD 22 65 71 0098*       ld (table_pointer),iy
       04          
0460A0             0099*   ; ; did we die last frame?
0460A0             0100*   ;     ld a,(player_collisions)
0460A0             0101*   ;     and %00000010 ; zero flag will be set if not dead
0460A0             0102*   ;     jr z,player_not_dead
0460A0             0103*   ; ; yes we died
0460A0             0104*   ;     call kill_player
0460A0             0105*   ;     ret ; done
0460A0             0106*   player_not_dead: ; yay we didn't die
0460A0             0107*   ; reset player component velocities to zero as the default
0460A0 21 00 00 00 0108*       ld hl,0
0460A4 FD 2F 07    0109*       ld (iy+sprite_xvel),hl
0460A7 FD 2F 0A    0110*       ld (iy+sprite_yvel),hl
0460AA             0111*   ; make ship the active sprite
0460AA FD 7E 00    0112*       ld a,(iy+sprite_id)
0460AD CD 00 20 04 0113*       call vdu_sprite_select
0460B1             0114*   ; check for keypresses and branch accordingly
0460B1             0115*   ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
0460B1             0116*       MOSCALL    mos_getkbmap ;ix = pointer to MOS virtual keys table
0460B1 3E 1E       0001*M1 			LD	A, function
0460B3 5B CF       0002*M1 			RST.LIL	08h
0460B5             0117*   ; we test all four arrow keys and add/subract velocities accordingly
0460B5             0118*   ; this handles the case where two opposing movement keys
0460B5             0119*   ; are down simultaneously (velocities will net to zero)
0460B5             0120*   ; and allows diagonal movement when a vertical and horizontal key are down
0460B5             0121*   ; it also allows movement and action keys to be detected simultaneously
0460B5             0122*   ; so we can walk and chew gum at the same time
0460B5             0123*   ; do player directional input
0460B5 AF          0124*       xor a ; clear flags
0460B6 DB 9E       0125*       in a,(portC) ; read dpad input
0460B8 57          0126*       ld d,a ; save dpad input
0460B9 3E 01       0127*       ld a,1 ; set ship's default animation to center
0460BB             0128*           ; if left and right are both down a will net to 1
0460BB             0129*   ; 26 Left: move player left
0460BB DD CB 03 4E 0130*       bit 1,(ix+3)
0460BF C2 CD 60 04 0131*       jp nz,@F
0460C3 CB 6A       0132*       bit joy_l,d
0460C5 CA CD 60 04 0133*       jp z,@F
0460C9 C3 D9 60 04 0134*       jp @right
0460CD             0135*   @@:
0460CD FD 27 07    0136*       ld hl,(iy+sprite_xvel)
0460D0 01 00 FD FF 0137*       ld bc,-speed_player
0460D4 09          0138*       add hl,bc
0460D5 FD 2F 07    0139*       ld (iy+sprite_xvel),hl
0460D8 3D          0140*       dec a ; set ship's animation to left
0460D9             0141*   @right:
0460D9             0142*   ; 122 Right: move player right
0460D9 DD CB 0F 4E 0143*       bit 1,(ix+15)
0460DD C2 EB 60 04 0144*       jp nz,@F
0460E1 CB 7A       0145*       bit joy_r,d
0460E3 CA EB 60 04 0146*       jp z,@F
0460E7 C3 F7 60 04 0147*       jp @up
0460EB             0148*   @@:
0460EB FD 27 07    0149*       ld hl,(iy+sprite_xvel)
0460EE 01 00 03 00 0150*       ld bc,speed_player
0460F2 09          0151*       add hl,bc
0460F3 FD 2F 07    0152*       ld (iy+sprite_xvel),hl
0460F6 3C          0153*       inc a ; set ship's animation to right
0460F7             0154*   @up:
0460F7             0155*   ; 58 Up: move player up
0460F7 DD CB 07 4E 0156*       bit 1,(ix+7)
0460FB C2 09 61 04 0157*       jp nz,@F
0460FF CB 4A       0158*       bit joy_u,d
046101 CA 09 61 04 0159*       jp z,@F
046105 C3 14 61 04 0160*       jp @dn
046109             0161*   @@:
046109 FD 27 0A    0162*       ld hl,(iy+sprite_yvel)
04610C 01 00 FD FF 0163*       ld bc,-speed_player
046110 09          0164*       add hl,bc
046111 FD 2F 0A    0165*       ld (iy+sprite_yvel),hl
046114             0166*   @dn:
046114             0167*   ; 42 Down: move player down
046114 DD CB 05 4E 0168*       bit 1,(ix+5)
046118 C2 26 61 04 0169*       jp nz,@F
04611C CB 5A       0170*       bit joy_d,d
04611E CA 26 61 04 0171*       jp z,@F
046122 C3 31 61 04 0172*       jp @frame
046126             0173*   @@:
046126 FD 27 0A    0174*       ld hl,(iy+sprite_yvel)
046129 01 00 03 00 0175*       ld bc,speed_player
04612D 09          0176*       add hl,bc
04612E FD 2F 0A    0177*       ld (iy+sprite_yvel),hl
046131             0178*   @frame:
046131             0179*   ; a should land here loaded with the correct frame
046131 CD 63 20 04 0180*       call vdu_sprite_select_frame
046135             0181*   ; draw player at updated position
046135 FD 21 00 81 0182*       ld iy,player_begin
       04          
04613A FD 22 65 71 0183*       ld (table_pointer),iy
       04          
04613F CD D5 72 04 0184*       call move_sprite
046143 FD 07 01    0185*       ld bc,(iy+sprite_x)
046146 FD 17 04    0186*       ld de,(iy+sprite_y)
046149 CD CC 20 04 0187*       call vdu_sprite_move_abs168
04614D             0188*   
04614D             0189*   ; process player laser fire
04614D             0190*   ; do player fire button input
04614D             0191*   ; read joystick fire button
04614D AF          0192*       xor a ; clear flags
04614E DB A2       0193*       in a,(portD) ; read fire button input
046150 CB 6F       0194*       bit btn_b,a
046152 CA 1C 64 04 0195*       jp z,player_spawn_laser
046156             0196*   ; 99 Space: fire main weapon
046156 DD CB 0C 56 0197*       bit 2,(ix+12)
04615A C2 1C 64 04 0198*       jp nz,player_spawn_laser
04615E             0199*   ; end player_input
04615E             0200*   
04615E             0201*   score_x: equ 48
04615E             0202*   score_y: equ 1
04615E             0203*   ; prints the player's score
04615E             0204*   print_score:
04615E 0E 30       0205*       ld c,score_x
046160 06 01       0206*       ld b,score_y
046162 CD 37 1A 04 0207*       call vdu_move_cursor
046166             0208*   ; TODO: make this part of the UI setup and only print as needed
046166 CD 00 01 04 0209*       call printInline
04616A 53 63 6F 72 0210*       asciz "Score:"
       65 3A 00    
046171             0211*   ; END TODO
046171 2A 00 60 04 0212*       ld hl,(player_score)
046175 CD 06 02 04 0213*       call printDec
046179 C9          0214*       ret
04617A             0215*   ; end print_score
04617A             0216*   
04617A             0217*   player_move_weapons:
04617A             0218*   ; initialize pointers and loop counter
04617A FD 21 00 80 0219*       ld iy,player_weapons_begin ; set iy to first record in table
       04          
04617F 06 04       0220*       ld b,player_lasers_max ; loop counter
046181 CD 54 72 04 0221*       call move_sprite_group
046185 C9          0222*       ret
046186             0223*   ; end player_move_weapons
046186             0224*   
046186             0225*   ; ###################################################################
046186             0226*   ; TODO: the below is all stuff from the original code we need to port
046186             0227*   ; ###################################################################
046186             0228*   
046186             0229*   kill_player:
046186             0230*   ; ; set player status to dead
046186             0231*   ;     xor a; sets all player flags to zero
046186             0232*   ;     ld (player_collisions),a
046186             0233*   ; ; deduct a ship from the inventory
046186             0234*   ;     ld a,(player_ships)
046186             0235*   ;     dec a
046186             0236*   ;     ld (player_ships),a
046186             0237*   ; ; are we out of ships?
046186             0238*   ;     jp z,game_over
046186             0239*   ; ; wait a few ticks
046186             0240*   ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
046186             0241*   ;     ld (player_move_timer),a
046186             0242*   ; kill_player_loop:
046186             0243*   ;     call vdu_vblank
046186             0244*   ;     ld a,(player_move_timer)
046186             0245*   ;     dec a
046186             0246*   ;     ld (player_move_timer),a
046186             0247*   ;     jr nz,kill_player_loop
046186             0248*   ;     call player_init ; player respawn if timer zero
046186 C9          0249*       ret ; and out
046187             0250*   
046187             0251*   ; draws the player's shields level
046187             0252*   ; draw_shields:
046187             0253*   ; TODO: Agonize this routine
046187             0254*   ; ; prep the loop to draw the bars
046187             0255*   ;     ld a,(player_shields) ; snag shields
046187             0256*   ;     and a
046187             0257*   ;     ret z ; don't draw if zero shields
046187             0258*   ; ; set loop counter and drawing position
046187             0259*   ;     ld b,a ; loop counter
046187             0260*   ;     ld hl,#5300+48+12
046187             0261*   ; ; set color based on bars remaining
046187             0262*   ;     ld c,103 ; bright green 28fe0a
046187             0263*   ;     cp 9
046187             0264*   ;     jp p,draw_shields_loop
046187             0265*   ;     ld c,74 ; bright yellow eafe5b
046187             0266*   ;     cp 3
046187             0267*   ;     jp p,draw_shields_loop
046187             0268*   ;     ld c,28 ; bright red fe0a0a
046187             0269*   ; draw_shields_loop:
046187             0270*   ;     push bc ; yup,outta
046187             0271*   ;     push hl ; registers again
046187             0272*   ;     ; ld a,#A8 ; ▀,168
046187             0273*   ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
046187             0274*   ;     ; call draw_char
046187             0275*   ;     call draw_num ; we nuked draw_char for the time being
046187             0276*   ;     pop hl
046187             0277*   ;     ld a,8
046187             0278*   ;     add a,l
046187             0279*   ;     ld l,a
046187             0280*   ;     pop bc
046187             0281*   ;     djnz draw_shields_loop
046187             0282*       ; ret
046187             0283*   
046187             0284*   
046187             0285*   ; draw_lives:
046187             0286*   ;     ld hl,player_small ; make small yellow ship the active sprite
046187             0287*   ;     ld (sprite_base_bufferId),hl
046187             0288*   ;     ; ld a,#80 ; northern orientation
046187             0289*   ;     ; ld (sprite_orientation),a
046187             0290*   ;     ld hl,0 ; north
046187             0291*   ;     ld (sprite_heading),hl
046187             0292*   ;     xor a
046187             0293*   ;     ld (sprite_frame),a
046187             0294*   ;     ld a,#56 ; top of visible screen
046187             0295*   ;     ld (sprite_y+1),a
046187             0296*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
046187             0297*   ;     ld a,(player_ships)
046187             0298*   ;     dec a ; we draw one fewer ships than lives
046187             0299*   ;     ret z ; nothing to draw here, move along
046187             0300*   ;     ld b,a ; loop counter
046187             0301*   ;     ld a,256-16 ; initial x position
046187             0302*   ; draw_lives_loop:
046187             0303*   ;     ld (sprite_x+1),a
046187             0304*   ;     push af
046187             0305*   ;     push bc
046187             0306*   ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
046187             0307*   ;     pop bc
046187             0308*   ;     pop af
046187             0309*   ;     sub 10
046187             0310*   ;     djnz draw_lives_loop
046187             0311*   ;     ret
046187             0312*   
046187             0313*   
046187             0314*   dump_player_record:
046187 DD 21 00 81 0315*       ld ix,player_begin
       04          
04618C             0316*   
04618C CD 00 01 04 0317*       call printInline
046190 69 64 20 20 0318*       asciz "id  : "
       3A 20 00    
046197 DD 7E 00    0319*       ld a,(ix+sprite_id)
04619A CD 4A 01 04 0320*       call printHexA
04619E             0321*   
04619E CD 00 01 04 0322*       call printInline
0461A2 0D 0A 78 20 0323*       asciz "\r\nx   :"
       20 20 3A 00 
0461AA DD 27 01    0324*       ld hl,(ix+sprite_x)
0461AD CD 2B 03 04 0325*       call print_s168_hl
0461B1             0326*   
0461B1 CD 00 01 04 0327*       call printInline
0461B5 0D 0A 79 20 0328*       asciz "\r\ny   :"
       20 20 3A 00 
0461BD DD 27 04    0329*       ld hl,(ix+sprite_y)
0461C0 CD 2B 03 04 0330*       call print_s168_hl
0461C4             0331*   
0461C4 CD 00 01 04 0332*       call printInline
0461C8 0D 0A 78 76 0333*       asciz "\r\nxv  :"
       20 20 3A 00 
0461D0 DD 27 07    0334*       ld hl,(ix+sprite_xvel)
0461D3 CD 2B 03 04 0335*       call print_s168_hl
0461D7             0336*   
0461D7 CD 00 01 04 0337*       call printInline
0461DB 0D 0A 79 76 0338*       asciz "\r\nyv  :"
       20 20 3A 00 
0461E3 DD 27 0A    0339*       ld hl,(ix+sprite_yvel)
0461E6 CD 2B 03 04 0340*       call print_s168_hl
0461EA             0341*   
0461EA CD 00 01 04 0342*       call printInline
0461EE 0D 0A 76 20 0343*       asciz "\r\nv   :"
       20 20 3A 00 
0461F6 DD 27 0D    0344*       ld hl,(ix+sprite_vel)
0461F9 CD 2B 03 04 0345*       call print_s168_hl
0461FD             0346*   
0461FD CD 00 01 04 0347*       call printInline
046201 0D 0A 68 64 0348*       asciz "\r\nhdg :"
       67 20 3A 00 
046209 DD 27 10    0349*       ld hl,(ix+sprite_heading)
04620C CD 2B 03 04 0350*       call print_s168_hl
046210             0351*   
046210 CD 00 01 04 0352*       call printInline
046214 0D 0A 6F 72 0353*       asciz "\r\nori :"
       69 20 3A 00 
04621C DD 27 13    0354*       ld hl,(ix+sprite_orientation)
04621F CD 2B 03 04 0355*       call print_s168_hl
046223             0356*   
046223 CD 00 01 04 0357*       call printInline
046227 0D 0A 74 79 0358*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
046230 DD 7E 16    0359*       ld a,(ix+sprite_type)
046233 CD 4A 01 04 0360*       call printHexA
046237             0361*   
046237 CD 00 01 04 0362*       call printInline
04623B 0D 0A 42 49 0363*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
046244 DD 27 17    0364*       ld hl,(ix+sprite_base_bufferId)
046247 CD 27 01 04 0365*       call printHex24
04624B             0366*   
04624B CD 00 01 04 0367*       call printInline
04624F 0D 0A 6D 50 0368*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
046258 DD 27 1A    0369*       ld hl,(ix+sprite_move_program)
04625B CD 27 01 04 0370*       call printHex24
04625F             0371*   
04625F CD 00 01 04 0372*       call printInline
046263 0D 0A 63 6F 0373*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
04626C DD 7E 1D    0374*       ld a,(ix+sprite_collisions)
04626F CD A8 03 04 0375*       call printBin8
046273             0376*   
046273             0377*       ; call printInline
046273             0378*       ; asciz "\r\nszx : "
046273             0379*       ; ld a,(ix+sprite_dim_x)
046273             0380*       ; call printHexA
046273             0381*   
046273             0382*       ; call printInline
046273             0383*       ; asciz "\r\nszy : "
046273             0384*       ; ld a,(ix+sprite_dim_y)
046273             0385*       ; call printHexA
046273             0386*   
046273             0387*       ; call printInline
046273             0388*       ; asciz "\r\n#ori: "
046273             0389*       ; ld a,(ix+sprite_num_orientations)
046273             0390*       ; call printHexA
046273             0391*   
046273             0392*       ; call printInline
046273             0393*       ; asciz "\r\n#ani: "
046273             0394*       ; ld a,(ix+sprite_num_animations)
046273             0395*       ; call printHexA
046273             0396*   
046273             0397*       ; call printInline
046273             0398*       ; asciz "\r\nani : "
046273             0399*       ; ld a,(ix+sprite_animation)
046273             0400*       ; call printHexA
046273             0401*   
046273             0402*       ; call printInline
046273             0403*       ; asciz "\r\nanit: "
046273             0404*       ; ld a,(ix+sprite_animation_timer)
046273             0405*       ; call printHexA
046273             0406*   
046273             0407*       ; call printInline
046273             0408*       ; asciz "\r\nmvt : "
046273             0409*       ; ld a,(ix+sprite_move_timer)
046273             0410*       ; call printHexA
046273             0411*   
046273             0412*       ; call printInline
046273             0413*       ; asciz "\r\nmvs : "
046273             0414*       ; ld a,(ix+sprite_move_step)
046273             0415*       ; call printHexA
046273             0416*   
046273             0417*       ; call printInline
046273             0418*       ; asciz "\r\npts : "
046273             0419*       ; ld a,(ix+sprite_points)
046273             0420*       ; call printHexA
046273             0421*   
046273             0422*       ; call printInline
046273             0423*       ; asciz "\r\ndmg : "
046273             0424*       ; ld a,(ix+sprite_shield_damage)
046273             0425*       ; call printHexA
046273             0426*   
046273             0427*       ; call printInline
046273             0428*       ; asciz "\r\nfrm : "
046273             0429*       ; ld a,(ix+sprite_frame)
046273             0430*       ; call printHexA
046273             0431*   
046273             0432*       ; call printNewLine
046273             0433*       ; call printNewLine
046273             0434*   
046273             0435*       ; call waitKeypress
046273 C9          0436*       ret
046274             0060        include "player_cockpit.inc"
046274             0001*   panel_bufferId: equ 0
046274             0002*   panel_x0: equ 3
046274             0003*   panel_y0: equ 6
046274             0004*   panel_x1: equ 9
046274             0005*   panel_y1: equ 12
046274             0006*   
046274             0007*   ctl_panel_l:
046274 02 00 00    0008*       dl BUF_CTL_PANEL_L ; bufferId
046277 00 00 00    0009*       dl 0 ; x0
04627A 40 01 00    0010*       dl 320 ; y0
04627D 80 00 00    0011*       dl 0+128 ; x1
046280 80 01 00    0012*       dl 320+64 ; y1
046283             0013*   
046283             0014*   ctl_panel_r:
046283 03 00 00    0015*       dl BUF_CTL_PANEL_R ; bufferId
046286 80 01 00    0016*       dl 384 ; x0
046289 40 01 00    0017*       dl 320 ; y0
04628C 00 02 00    0018*       dl 384+128 ; x1
04628F 80 01 00    0019*       dl 320+64 ; y1
046292             0020*   
046292             0021*   mfd_bezel_l:
046292 05 00 00    0022*       dl BUF_MFD_BEZEL ; bufferId
046295 40 00 00    0023*       dl 64 ; x0
046298 46 01 00    0024*       dl 326 ; y0
04629B 7B 00 00    0025*       dl 64+59 ; x1
04629E 7A 01 00    0026*       dl 326+52 ; y1
0462A1             0027*   
0462A1             0028*   mfd_bezel_r:
0462A1 05 00 00    0029*       dl BUF_MFD_BEZEL ; bufferId
0462A4 85 01 00    0030*       dl 389 ; x0
0462A7 46 01 00    0031*       dl 326 ; y0
0462AA C0 01 00    0032*       dl 389+59 ; x1
0462AD 7A 01 00    0033*       dl 326+52 ; y1
0462B0             0034*   
0462B0             0035*   draw_player_cockpit:
0462B0 DD 21 74 62 0036*       ld ix,ctl_panel_l
       04          
0462B5 CD D5 62 04 0037*       call draw_player_ctl_panel
0462B9 DD 21 83 62 0038*       ld ix,ctl_panel_r
       04          
0462BE CD D5 62 04 0039*       call draw_player_ctl_panel
0462C2 DD 21 92 62 0040*       ld ix,mfd_bezel_l
       04          
0462C7 CD D5 62 04 0041*       call draw_player_ctl_panel
0462CB DD 21 A1 62 0042*       ld ix,mfd_bezel_r
       04          
0462D0 CD D5 62 04 0043*       call draw_player_ctl_panel
0462D4 C9          0044*       ret
0462D5             0045*   ; end draw_player_cockpit
0462D5             0046*   
0462D5             0047*   draw_player_ctl_panel:
0462D5 DD 27 00    0048*       ld hl,(ix+panel_bufferId)
0462D8 CD 38 1B 04 0049*       call vdu_buff_select
0462DC DD 07 03    0050*       ld bc,(ix+panel_x0)
0462DF DD 17 06    0051*       ld de,(ix+panel_y0)
0462E2 CD 20 1F 04 0052*       call vdu_plot_bmp
0462E6 C9          0053*       ret
0462E7             0054*   ; end draw_player_ctl_panel
0462E7             0055*   
0462E7             0056*   mfd_display_l:
0462E7 04 00 00    0057*       dl BUF_MFD_ARMS ; bufferId
0462EA 48 00 00    0058*       dl 72 ; x0
0462ED 4D 01 00    0059*       dl 333 ; y0
0462F0 73 00 00    0060*       dl 72+43 ; x1
0462F3 73 01 00    0061*       dl 333+38 ; y1
0462F6             0062*   
0462F6             0063*   mfd_activate:
0462F6 DD 07 03    0064*       ld bc,(ix+panel_x0)
0462F9 DD 17 06    0065*       ld de,(ix+panel_y0)
0462FC CD D0 1A 04 0066*       call vdu_set_gfx_origin
046300 C9          0067*       ret
046301             0068*   ; end mfd_activate
046301             0069*   
046301             0070*   mfd_init:
046301 DD 27 00    0071*       ld hl,(ix+panel_bufferId)
046304 CD 38 1B 04 0072*       call vdu_buff_select
046308 01 00 00 00 0073*       ld bc,0
04630C 11 00 00 00 0074*       ld de,0
046310 CD 20 1F 04 0075*       call vdu_plot_bmp
046314 C9          0076*       ret
046315             0077*   ; end mfd_init
046315             0061        include "player_laser.inc"
046315 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
046400             0002*   speed_laser: equ 4*256 ; 6 pixels per frame 16.8 fixed
046400             0003*   tmr_laser: ds 6 ; rate timer for firing laser
       FF FF FF FF 
       FF FF 
046406 28 00 00    0004*   tmr_laser_reset: dl 120/3
046409             0005*   laser_animation_timer_reset: equ 2 ; animate every two frames
046409             0006*   
046409             0007*   
046409             0008*   laser_defaults:
046409 06          0009*       db player_air        ; type
04640A 08 01 00    0010*       dl BUF_LASER_A	    ; base_bufferId
04640D 6B 64 04    0011*       dl move_player_laser	; move_program
046410 40          0012*       db %01000000            ; collisions bit 6 signals sprite alive
046411 05          0013*       db 5	                ; dim_x
046412 0D          0014*       db 13                   ; dim_y
046413 01          0015*       db 1                    ; num_orientations
046414 02          0016*       db 2                    ; num_animations
046415 00          0017*       db 0	                ; animation
046416 02          0018*       db laser_animation_timer_reset ; animation_timer
046417 00          0019*       db 0	                ; move_timer
046418 00          0020*       db 0	                ; move_step
046419 00          0021*       db 0	                ; points
04641A 00          0022*       db 0	                ; shield_damage
04641B 00          0023*       db 0                    ; frame
04641C             0024*   
04641C             0025*   player_spawn_laser:
04641C             0026*   ; check laser spawn timer
04641C FD 21 00 64 0027*       ld iy,tmr_laser
       04          
046421 CD 21 19 04 0028*       call timestamp_tmr_get
046425 F0          0029*       ret p ; not time to fire
046426             0030*   ; reset timer
046426 2A 06 64 04 0031*       ld hl,(tmr_laser_reset)
04642A CD 16 19 04 0032*       call timestamp_tmr_set
04642E             0033*   ; fire the laser
04642E DD 21 00 80 0034*       ld ix,player_weapons_begin
       04          
046433 06 04       0035*       ld b,player_lasers_max
046435 FD 21 00 81 0036*       ld iy,player_begin
       04          
04643A FD 22 65 71 0037*       ld (table_pointer),iy
       04          
04643F 21 09 64 04 0038*       ld hl,laser_defaults
046443 CD 22 72 04 0039*       call spawn_sprite_from_sprite
046447 D0          0040*       ret nc ; no carry means no free sprite slots, so we go home
046448             0041*   ; other specific initialization
046448             0042*   ; ------------------------------------------------
046448 FD 21 00 81 0043*       ld iy,player_begin
       04          
04644D             0044*   ; x-coordinate
04644D FD 27 01    0045*       ld hl,(iy+sprite_x)
046450 11 00 05 00 0046*       ld de,5*256 ; horizontal center with player sprite
046454 19          0047*       add hl,de
046455 DD 2F 01    0048*       ld (ix+sprite_x),hl
046458             0049*   ; y-coordinate
046458 FD 27 04    0050*       ld hl,(iy+sprite_y)
04645B 11 00 FA FF 0051*       ld de,-6*256 ; set laser y a few pixels above player
04645F 19          0052*       add hl,de
046460 DD 2F 04    0053*       ld (ix+sprite_y),hl
046463             0054*   ; set laser velocity
046463 21 00 FC FF 0055*       ld hl,-speed_laser
046467 DD 2F 0A    0056*       ld (ix+sprite_yvel),hl
04646A C9          0057*       ret
04646B             0058*   ; end player_spawn_laser
04646B             0059*   
04646B             0060*   move_player_laser:
04646B             0061*   ; run the movement program for the laser
04646B CD D5 72 04 0062*       call move_sprite
04646F 3A 68 71 04 0063*       ld a,(sprite_screen_edge)
046473 B7          0064*       or a ; a will be non-zero if have scrolled off screen
046474 CA 7C 64 04 0065*       jp z,@F ; still on screen
046478 C3 AE 71 04 0066*       jp table_deactivate_sprite
04647C             0067*   @@: ; check animation timer
04647C FD 35 23    0068*       dec (iy+sprite_animation_timer)
04647F C2 93 64 04 0069*       jp nz,@F
046483 3E 02       0070*       ld a,laser_animation_timer_reset
046485 FD 77 23    0071*       ld (iy+sprite_animation_timer),a
046488 FD 7E 00    0072*       ld a,(iy+sprite_id)
04648B CD 00 20 04 0073*       call vdu_sprite_select
04648F CD 47 20 04 0074*       call vdu_sprite_next_frame
046493             0075*   @@: ; all done
046493 C9          0076*       ret
046494             0077*   ; end move_player_laser
046494             0078*   
046494             0079*   init_player_laser:
046494             0080*   ; set pointer to laser sprite table
046494 FD 21 00 80 0081*       ld iy,player_weapons_begin
       04          
046499 FD 7E 00    0082*       ld a,(iy+sprite_id) ; sprite id
04649C 1E 04       0083*       ld e,player_lasers_max ; sprite loop counter
04649E             0084*   ; define laser sprites
04649E             0085*   @sprites_loop:
04649E F5          0086*       push af
04649F D5          0087*       push de
0464A0 CD 00 20 04 0088*   	call vdu_sprite_select
0464A4 CD 13 20 04 0089*   	call vdu_sprite_clear_frames
0464A8 21 08 01 00 0090*   	ld hl,BUF_LASER_A
0464AC 06 02       0091*   	ld b,2 ; two bitmaps for laser
0464AE             0092*   @frames_loop:
0464AE C5          0093*   	push bc
0464AF E5          0094*   	push hl
0464B0 CD 55 21 04 0095*   	call vdu_sprite_add_buff
0464B4 E1          0096*   	pop hl
0464B5 23          0097*   	inc hl
0464B6 C1          0098*   	pop bc
0464B7 10 F5       0099*   	djnz @frames_loop
0464B9 D1          0100*       pop de ; sprite loop counter
0464BA F1          0101*       pop af ; sprite id
0464BB 3C          0102*       inc a
0464BC 1D          0103*       dec e
0464BD C2 9E 64 04 0104*       jp nz,@sprites_loop
0464C1             0105*   ; set laser firing timer to zero
0464C1 FD 21 00 64 0106*       ld iy,tmr_laser
       04          
0464C6 21 00 00 00 0107*       ld hl,0
0464CA CD 16 19 04 0108*       call timestamp_tmr_set
0464CE C9          0109*       ret
0464CF             0062        include "state.inc"
0464CF FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
046500             0002*   
046500             0003*   ; Game state variables
046500 0E 65 04    0004*   game_state:  dl game_main_menu
046503             0005*   
046503             0006*   do_game:
046503 2A 00 65 04 0007*       ld hl,(game_state)   ; Load the current game state
046507             0008*       CALL_HL                ; Call the corresponding state handler
046507 01 0D 65 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
04650B C5          0002*M1     push bc ; which constitutes the return address
04650C E9          0003*M1     jp (hl) ; Jump to the address in HL
04650D C9          0009*       ret
04650E             0010*   
04650E             0011*   ; ========================
04650E             0012*   ; Main Game States
04650E             0013*   ; ========================
04650E             0014*   
04650E             0015*   game_main_menu:
04650E             0016*       ; Handle main menu options
04650E             0017*       ; Example: Check input for "Start Game"
04650E CD 22 66 04 0018*       call check_input_menu
046512 C2 17 65 04 0019*       jp nz, game_initialize ; Start game on selection
046516 C9          0020*       ret
046517             0021*   
046517             0022*   game_initialize:
046517             0023*   ; reset the sprite table
046517 CD 8A 71 04 0024*       call table_init
04651B 21 00 80 04 0025*       ld hl,table_base
04651F 22 65 71 04 0026*       ld (table_pointer),hl
046523             0027*   ; initialize sprites and active tiles table
046523 CD C2 71 04 0028*       call sprites_init
046527 CD 8A 71 04 0029*       call table_init
04652B CD 10 6B 04 0030*       call tile_table_init
04652F             0031*   ; initialize the first level
04652F 3E 00       0032*       ld a,tiles_dg
046531 CD 1A 5D 04 0033*       call init_tileset
046535             0034*   ; initialize player
046535 21 00 00 00 0035*       ld hl,0
046539 22 00 60 04 0036*       ld (player_score),hl
04653D 2A 06 60 04 0037*       ld hl,(player_max_shields)
046541 22 03 60 04 0038*       ld (player_shields),hl
046545 3E 03       0039*       ld a,3
046547 32 09 60 04 0040*       ld (player_ships),a
04654B CD 1D 60 04 0041*       call player_init
04654F             0042*   ; ; TODO: TEMPORARY UNTIL MAP LOGIC IMPLEMENTED
04654F             0043*   ;     ld hl,enemies_dead
04654F             0044*   ;     ld (enemies_state),hl
04654F             0045*   ; ; END TODO
04654F             0046*   ; set the game state to playing
04654F 21 58 65 04 0047*       ld hl,game_playing
046553 22 00 65 04 0048*       ld (game_state), hl
046557             0049*   ; done initializing
046557 C9          0050*       ret
046558             0051*   
046558             0052*   game_playing:
046558             0053*   ; Main gameplay loop
046558 CD 12 6E 04 0054*       call tiles_plot
04655C             0055*   
04655C             0056*   ; set gfx origin and viewport to playing field window
04655C 01 80 00 00 0057*       ld bc,origin_left
046560 11 00 00 00 0058*       ld de,origin_top
046564 CD D0 1A 04 0059*       call vdu_set_gfx_origin
046568 01 00 00 00 0060*       ld bc,field_left
04656C 11 00 00 00 0061*       ld de,field_top
046570 DD 21 FF 00 0062*       ld ix,field_right
       00          
046575 FD 21 7F 01 0063*       ld iy,field_bottom
       00          
04657A CD EB 1A 04 0064*       call vdu_set_gfx_viewport
04657E             0065*   
04657E CD F3 65 04 0066*       call do_player
046582 CD 0C 66 04 0067*       call do_enemies
046586 CD 90 2A 04 0068*       call move_explosions
04658A CD 4A 6F 04 0069*       call move_tiles
04658E             0070*   ; update UI: TODO make this a standalone function
04658E CD 5E 61 04 0071*       call print_score
046592 C9          0072*       ret
046593             0073*   
046593             0074*   game_paused:
046593             0075*       ; Pause menu logic
046593 CD 25 66 04 0076*       call check_input_pause
046597 C2 58 65 04 0077*       jp nz, game_playing ; Resume game
04659B CA 0E 65 04 0078*       jp z, game_main_menu ; Exit to main menu
04659F C9          0079*       ret
0465A0             0080*   
0465A0             0081*   game_level_transition:
0465A0             0082*       ; Handle level transitions
0465A0 CD 26 66 04 0083*       call load_next_level
0465A4 21 58 65 04 0084*       ld hl, game_playing
0465A8 22 00 65 04 0085*       ld (game_state), hl
0465AC C9          0086*       ret
0465AD             0087*   
0465AD             0088*   game_over:
0465AD             0089*       ; Display game over screen
0465AD CD 27 66 04 0090*       call display_game_over
0465B1 C2 0E 65 04 0091*       jp nz, game_main_menu ; Return to main menu on input
0465B5 C9          0092*       ret
0465B6             0093*   
0465B6             0094*   game_victory:
0465B6             0095*       ; Display victory screen
0465B6 CD 28 66 04 0096*       call display_victory
0465BA C2 0E 65 04 0097*       jp nz, game_main_menu ; Return to main menu on input
0465BE C9          0098*       ret
0465BF             0099*   
0465BF             0100*   ; ========================
0465BF             0101*   ; Supporting States
0465BF             0102*   ; ========================
0465BF             0103*   
0465BF             0104*   game_loading:
0465BF             0105*       ; Show loading screen while preparing assets
0465BF CD 29 66 04 0106*       call load_resources
0465C3 21 17 65 04 0107*       ld hl, game_initialize
0465C7 22 00 65 04 0108*       ld (game_state), hl
0465CB C9          0109*       ret
0465CC             0110*   
0465CC             0111*   game_cutscene:
0465CC             0112*       ; Play a non-interactive cutscene
0465CC CD 2A 66 04 0113*       call play_cutscene
0465D0 C2 58 65 04 0114*       jp nz, game_playing ; Return to gameplay after cutscene
0465D4 C9          0115*       ret
0465D5             0116*   
0465D5             0117*   game_inventory:
0465D5             0118*       ; Open inventory or shop
0465D5 CD 2B 66 04 0119*       call display_inventory
0465D9 C2 58 65 04 0120*       jp nz, game_playing ; Return to gameplay after inventory close
0465DD C9          0121*       ret
0465DE             0122*   
0465DE             0123*   game_map:
0465DE             0124*       ; Display map or quest
0465DE CD 2C 66 04 0125*       call display_map
0465E2 C2 58 65 04 0126*       jp nz, game_playing ; Return to gameplay after map close
0465E6 C9          0127*       ret
0465E7             0128*   
0465E7             0129*   game_exit:
0465E7             0130*       ; Handle exit logic
0465E7 CD 2D 66 04 0131*       call save_game
0465EB C3 2E 66 04 0132*       jp exit_game         ; Safely shut down
0465EF C9          0133*       ret
0465F0             0134*   
0465F0             0135*   ; ========================
0465F0             0136*   ; Sub-state branching (Example for player state)
0465F0             0137*   ; ========================
0465F0             0138*   
0465F0 FE 65 04    0139*   player_state:  dl player_alive ; Player state variable
0465F3             0140*   
0465F3             0141*   do_player:
0465F3 2A F0 65 04 0142*       ld hl,(player_state)
0465F7             0143*       CALL_HL                ; Call the corresponding player state
0465F7 01 FD 65 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
0465FB C5          0002*M1     push bc ; which constitutes the return address
0465FC E9          0003*M1     jp (hl) ; Jump to the address in HL
0465FD C9          0144*       ret
0465FE             0145*   
0465FE             0146*   player_alive:
0465FE CD 6D 60 04 0147*       call player_input     ; Handle player input
046602 CD 7A 61 04 0148*       call player_move_weapons    ; Handle laser movement and collision detection
046606 C9          0149*       ret
046607             0150*   
046607             0151*   player_dead:
046607 CD 7A 61 04 0152*       call player_move_weapons    ; Handle laser movement and collision detection
04660B C9          0153*       ret
04660C             0154*   
04660C             0155*   do_enemies:
04660C 2A 17 66 04 0156*       ld hl,(enemies_state)
046610             0157*       CALL_HL
046610 01 16 66 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
046614 C5          0002*M1     push bc ; which constitutes the return address
046615 E9          0003*M1     jp (hl) ; Jump to the address in HL
046616 C9          0158*       ret
046617 1D 66 04    0159*   enemies_state: dl enemies_alive
04661A             0160*   
04661A             0161*   enemies_dead:
04661A C9          0162*       ret
04661B             0163*   
04661B             0164*   enemies_respawning:
04661B C9          0165*       ret
04661C             0166*   
04661C             0167*   enemies_respawn:
04661C C9          0168*       ret
04661D             0169*   
04661D             0170*   enemies_alive:
04661D CD 15 27 04 0171*       call move_enemies
046621 C9          0172*       ret
046622             0173*   
046622             0174*   check_input_menu:
046622 C9          0175*       ret
046623             0176*   
046623             0177*   update_game_world:
046623 C9          0178*       ret
046624             0179*   
046624             0180*   check_game_events:
046624 C9          0181*       ret
046625             0182*   
046625             0183*   check_input_pause:
046625 C9          0184*       ret
046626             0185*   
046626             0186*   load_next_level:
046626 C9          0187*       ret
046627             0188*   
046627             0189*   display_game_over:
046627 C9          0190*       ret
046628             0191*   
046628             0192*   display_victory:
046628 C9          0193*       ret
046629             0194*   
046629             0195*   load_resources:
046629 C9          0196*       ret
04662A             0197*   
04662A             0198*   play_cutscene:
04662A C9          0199*       ret
04662B             0200*   
04662B             0201*   display_inventory:
04662B C9          0202*       ret
04662C             0203*   
04662C             0204*   display_map:
04662C C9          0205*       ret
04662D             0206*   
04662D             0207*   save_game:
04662D C9          0208*       ret
04662E             0209*   
04662E             0210*   exit_game:
04662E C9          0211*       ret
04662F             0212*   
04662F             0063        include "targeting.inc"
04662F FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
046700             0002*   
046700             0003*   ; compute orientation to player
046700             0004*   ; based on relative positions
046700             0005*   ; returns: uh.l 16.8 fixed angle256 to player
046700             0006*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
046700             0007*   ;    representing delta-x/y *to* target respectively
046700             0008*   ; inputs: iy pointed at sprite record
046700             0009*   ; destroys: everything except iy (sprite record pointer)
046700             0010*   orientation_to_player:
046700 DD 21 00 81 0011*       ld ix,player_begin
       04          
046705             0012*   ; compute dx
046705 DD 27 01    0013*       ld hl,(ix+sprite_x)
046708 FD 17 01    0014*       ld de,(iy+sprite_x)
04670B B7          0015*       or a ; clear carry
04670C ED 52       0016*       sbc hl,de ; dx
04670E E5          0017*       push hl ; save dx
04670F             0018*   ; compute dy
04670F DD 27 04    0019*       ld hl,(ix+sprite_y)
046712 FD 17 04    0020*       ld de,(iy+sprite_y)
046715 B7          0021*       or a ; clear carry
046716 ED 52       0022*       sbc hl,de ; dy
046718 EB          0023*       ex de,hl ; de = dy
046719             0024*   ; compute angle to player
046719 C1          0025*       pop bc ; dx (was hl)
04671A C5          0026*       push bc ; save dx
04671B D5          0027*       push de ; save dy
04671C CD 9A 0C 04 0028*       call atan2_168fast ; uh.l = angle to player
046720 3E E0       0029*       ld a,%11100000
046722 A5          0030*       and l ; round angle to nearest 32th of a circle
046723 6F          0031*       ld l,a
046724 22 52 67 04 0032*       ld (Bearing_t),hl ; return angle to player
046728 D1          0033*       pop de ; restore dy
046729 C1          0034*       pop bc ; restore dx
04672A C9          0035*       ret
04672B             0036*   ; end orientation_to_player
04672B             0037*   
04672B             0038*   ; compute orientation to player
04672B             0039*   ; based on relative positions
04672B             0040*   ; returns: uh.l 16.8 fixed angle256 to player
04672B             0041*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
04672B             0042*   ;    representing delta-x/y *to* target respectively
04672B             0043*   ; inputs: iy pointed at tile record
04672B             0044*   ; destroys: everything except iy (tile record pointer)
04672B             0045*   tile_orientation_to_player:
04672B DD 21 00 81 0046*       ld ix,player_begin
       04          
046730             0047*   ; compute dx
046730 DD 27 01    0048*       ld hl,(ix+sprite_x)
046733 FD 17 01    0049*       ld de,(iy+tile_x)
046736 B7          0050*       or a ; clear carry
046737 ED 52       0051*       sbc hl,de ; dx
046739 E5          0052*       push hl ; save dx
04673A             0053*   ; compute dy
04673A DD 27 04    0054*       ld hl,(ix+sprite_y)
04673D FD 17 04    0055*       ld de,(iy+tile_y)
046740 B7          0056*       or a ; clear carry
046741 ED 52       0057*       sbc hl,de ; dy
046743 EB          0058*       ex de,hl ; de = dy
046744             0059*   ; compute angle to player
046744 C1          0060*       pop bc ; dx (was hl)
046745 CD 9A 0C 04 0061*       call atan2_168fast ; uh.l = angle to player
046749 3E E0       0062*       ld a,%11100000
04674B A5          0063*       and l ; round angle to nearest 32th of a circle
04674C 6F          0064*       ld l,a
04674D 22 52 67 04 0065*       ld (Bearing_t),hl
046751 C9          0066*       ret
046752             0067*   ; end tile_orientation_to_player
046752             0068*   
046752             0069*   ; targeting_computer variables fixed 16.8 format
046752 00 00 00    0070*   Bearing_t: dl 0x000000 ; angle to target
046755 00 00 00    0071*   Heading_t: dl 0x000000 ; angle of target motion
046758 00 00 00    0072*   Vp: dl 0x000000 ; velocity of projectile
04675B 00 00 00    0073*   Vp_x: dl 0x000000 ; x component of projectile velocity
04675E 00 00 00    0074*   Vp_y: dl 0x000000 ; y component of projectile velocity
046761 00 00 00    0075*   Vt: dl 0x000000 ; velocity of target
046764 00 00 00    0076*   Vt_x: dl 0x000000 ; x component of target velocity
046767 00 00 00    0077*   Vt_y: dl 0x000000 ; y component of target velocity
04676A 00 00 00    0078*   Heading_p: dl 0x000000 ; angle of projectile motion
04676D 00 00 00    0079*   lead_angle: dl 0x000000 ; lead angle
046770             0080*   
046770             0081*   ; Inputs:   Vp velocity of projectile set,
046770             0082*   ;           iy pointed to sprite record,
046770             0083*   ;           player position and velocities correctly set
046770             0084*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
046770             0085*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
046770             0086*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
046770             0087*   targeting_computer:
046770 DD 21 00 81 0088*       ld ix,player_begin
       04          
046775             0089*   ; ; compute target velocity from x,y component velocities
046775             0090*   ;     ld bc,(ix+sprite_xvel)
046775             0091*   ;     ld de,(ix+sprite_yvel)
046775             0092*   ;     ld hl,-1*256 ; account for vertical ground movement
046775             0093*   ;     add hl,de
046775             0094*   ;     ex de,hl ; ud.e = player_yvel-1
046775             0095*   ;     call cartesian_to_polar_sm ; uh.l = Heading_t, ud.e = Vt
046775             0096*   ;     ld (Heading_t),hl ; PASSES
046775             0097*   ;     ld (Vt),de ; PASSES
046775             0098*   ; ; Bearing_t should have been set by prerequisite call to orientation_to_player
046775             0099*   ; ; compute Heading_t-Bearing_t PASSES
046775             0100*   ;     ld de,(Bearing_t)
046775             0101*   ;     and a ; clear carry
046775             0102*   ;     sbc hl,de ; Uh.l = Heading_t-Bearing_t
046775             0103*   ; ; compute sin(Heading_t-Bearing_t)
046775             0104*   ;     call sin168 ; uh.l = sin(Heading_t-Bearing_t)
046775             0105*   ; ; compute (Vt*sin(Heading_t-Bearing_t))
046775             0106*   ;     ld de,(Vt)
046775             0107*   ;     call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
046775             0108*   ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
046775             0109*   ;     ld de,(Vp)
046775             0110*   ;     call sdiv168 ; ud.e = (Vt*sin(Heading_t-Bearing_t)) / Vp
046775             0111*   ;     ex de,hl ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
046775             0112*   ; ; answer is in radians, convert to degrees256
046775             0113*   ;     ld de,0x0028BE ; 40.74 = 57.29578*256/360
046775             0114*   ;     call smul168 ; uh.l = angle in degrees256
046775             0115*   ;     ld (lead_angle),hl ; DEBUG
046775             0116*   ; ; add lead angle to target bearing
046775             0117*   ;     ld de,(Bearing_t)
046775             0118*   ;     add hl,de ; h.l = lead angle+target bearing
046775             0119*   
046775 2A 52 67 04 0120*       ld hl,(Bearing_t) ; DEBUG
046779             0121*   
046779 E5          0122*       push hl
04677A             0123*   
04677A             0124*   ; compute component projectile velocities
04677A ED 5B 58 67 0125*       ld de,(Vp) ; Vp should have been set by caller
       04          
04677F CD A0 0B 04 0126*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
046783 ED 43 5B 67 0127*       ld (Vp_x),bc
       04          
046788             0128*       ; inc d ; account for vertical ground movement
046788 ED 53 5E 67 0129*       ld (Vp_y),de
       04          
04678D E1          0130*       pop hl ; uh.l = lead angle+target bearing
04678E 22 6A 67 04 0131*       ld (Heading_p),hl
046792             0132*   
046792 C9          0133*       ret
046793             0134*   
046793             0135*   ; debug print the results
046793             0136*       PUSH_ALL
046793 08          0001*M1     ex af,af'
046794 D9          0002*M1     exx
046795 F5          0003*M1     push af
046796 E5          0004*M1     push hl
046797 C5          0005*M1     push bc
046798 D5          0006*M1     push de
046799             0007*M1 
046799 08          0008*M1     ex af,af'
04679A D9          0009*M1     exx
04679B F5          0010*M1     push af
04679C E5          0011*M1     push hl
04679D C5          0012*M1     push bc
04679E D5          0013*M1     push de
04679F DD E5       0014*M1     push ix
0467A1 FD E5       0015*M1     push iy
0467A3 CD 00 1A 04 0137*       call vdu_home_cursor
0467A7 CD 1C 01 04 0138*       call printNewLine
0467AB CD 00 01 04 0139*       call printInline
0467AF 42 74 20 00 0140*       asciz "Bt "
0467B3 2A 52 67 04 0141*       ld hl,(Bearing_t)
0467B7 CD 2B 03 04 0142*       call print_s168_hl
0467BB             0143*   
0467BB             0144*       ; call printInline
0467BB             0145*       ; asciz "\r\nHt "
0467BB             0146*       ; ld hl,(Heading_t)
0467BB             0147*       ; call print_s168_hl
0467BB             0148*   
0467BB             0149*       ; call printInline
0467BB             0150*       ; asciz "\r\nVt "
0467BB             0151*       ; ld hl,(Vt)
0467BB             0152*       ; call print_s168_hl
0467BB             0153*   
0467BB             0154*       ; call printInline
0467BB             0155*       ; asciz "\r\nVtx"
0467BB             0156*       ; ld hl,(ix+sprite_xvel)
0467BB             0157*       ; call print_s168_hl
0467BB             0158*   
0467BB             0159*       ; call printInline
0467BB             0160*       ; asciz "\r\nVty"
0467BB             0161*       ; ld hl,(ix+sprite_yvel)
0467BB             0162*       ; ld de,-1*256 ; account for vertical ground movement
0467BB             0163*       ; add hl,de
0467BB             0164*       ; call print_s168_hl
0467BB             0165*   
0467BB CD 00 01 04 0166*       call printInline
0467BF 0D 0A 4C 64 0167*       asciz "\r\nLda"
       61 00       
0467C5 2A 6D 67 04 0168*       ld hl,(lead_angle)
0467C9 CD 2B 03 04 0169*       call print_s168_hl
0467CD             0170*   
0467CD CD 00 01 04 0171*       call printInline
0467D1 0D 0A 48 70 0172*       asciz "\r\nHp "
       20 00       
0467D7 2A 6A 67 04 0173*       ld hl,(Heading_p)
0467DB CD 2B 03 04 0174*       call print_s168_hl
0467DF             0175*   
0467DF             0176*       ; call printInline
0467DF             0177*       ; asciz "\r\nVp "
0467DF             0178*       ; ld hl,(Vp)
0467DF             0179*       ; call print_s168_hl
0467DF             0180*   
0467DF             0181*       ; call printInline
0467DF             0182*       ; asciz "\r\nVpx"
0467DF             0183*       ; ld hl,(Vp_x)
0467DF             0184*       ; call print_s168_hl
0467DF             0185*   
0467DF             0186*       ; call printInline
0467DF             0187*       ; asciz "\r\nVpy"
0467DF             0188*       ; ld hl,(Vp_y)
0467DF             0189*       ; call print_s168_hl
0467DF             0190*   
0467DF             0191*       POP_ALL
0467DF FD E1       0001*M1     pop iy
0467E1 DD E1       0002*M1     pop ix
0467E3 D1          0003*M1     pop de
0467E4 C1          0004*M1     pop bc
0467E5 E1          0005*M1     pop hl
0467E6 F1          0006*M1     pop af
0467E7 08          0007*M1     ex af,af'
0467E8 D9          0008*M1     exx
0467E9             0009*M1 
0467E9 D1          0010*M1     pop de
0467EA C1          0011*M1     pop bc
0467EB E1          0012*M1     pop hl
0467EC F1          0013*M1     pop af
0467ED 08          0014*M1     ex af,af'
0467EE D9          0015*M1     exx
0467EF C9          0192*       ret
0467F0             0064        include "tile_table.inc"
0467F0             0001*   ; ###### tile TABLE FIELD INDICES ######
0467F0             0002*   tile_table_record_size:         equ  64; 41 bytes ;41 bytes per tile record
0467F0             0003*   tile_id:                 equ   0; 1 bytes ;unique tileId, zero-based
0467F0             0004*   ; tile state variables
0467F0             0005*   tile_state_variables:    equ   1; beginning of tile state variables
0467F0             0006*   tile_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
0467F0             0007*   tile_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
0467F0             0008*   tile_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
0467F0             0009*   tile_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
0467F0             0010*   tile_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
0467F0             0011*   tile_heading:            equ  16; 3 bytes ;tile movement direction deg256 16.8 fixed
0467F0             0012*   tile_orientation:        equ  19; 3 bytes ;orientation bits
0467F0             0013*   ; tile definition variables
0467F0             0014*   tile_definitions:        equ  22; beginnning of tile definition variables
0467F0             0015*   tile_type:               equ  22; 1 bytes ;type of tile as defined in enemies.inc
0467F0             0016*   tile_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
0467F0             0017*   tile_move_program:       equ  26; 3 bytes ;address of tile's behavior subroutine
0467F0             0018*   tile_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
0467F0             0019*   tile_dim_x:              equ  30; 1 bytes ;tile width in pixels
0467F0             0020*   tile_dim_y:              equ  31; 1 bytes ;tile height in pixels
0467F0             0021*   tile_num_orientations:   equ  32; 1 bytes ;number of orientations for this tile
0467F0             0022*   tile_num_animations:     equ  33; 1 bytes ;number of animations for this tile
0467F0             0023*   tile_animation:          equ  34; 1 bytes ;current animation index, zero-based
0467F0             0024*   tile_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
0467F0             0025*   tile_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
0467F0             0026*   tile_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
0467F0             0027*   tile_points:             equ  38; 1 bytes ;points awarded for killing this tile type
0467F0             0028*   tile_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
0467F0             0029*   tile_frame:              equ  40; 1 bytes ;current animation frame
0467F0             0030*   
0467F0             0031*   ; ###### tile TABLE VARIABLES ######
0467F0 FF FF FF FF 0032*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
046800 00 00 00 00 0033*   tile_stack: blkb 256*3,0 ; stack of pointers to tile records
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046B00 00 00 00    0034*       dl 0 ; list terminator
046B03             0035*   tile_stack_end:
046B03 00 68 04    0036*   tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
046B06 00 00 05    0037*   tile_table_pointer: dl tile_table_base ; pointer to top address of current record, initialized to tile_table_base
046B09 00 00 00    0038*   num_active_tiles: dl 0 ; how many active tiles
046B0C 00          0039*   next_tile_id: db 0 ; next available tile id
046B0D 00 00 00    0040*   new_tile_table_pointer: dl 0 ; pointer to new tile record
046B10             0041*   
046B10             0042*   tile_table_init:
046B10             0043*   ; clear the tile stack
046B10 AF          0044*       xor a ; write zeroes to tile stack
046B11 21 00 68 04 0045*       ld hl,tile_stack
046B15 01 03 03 00 0046*       ld bc,tile_stack_end-tile_stack
046B19 CD 31 07 04 0047*       call clear_mem
046B1D             0048*   ; clear the tile table
046B1D AF          0049*       xor a ; write zeroes to tile table
046B1E 21 00 00 05 0050*       ld hl,tile_table_base ; address to copy from
046B22 01 00 40 00 0051*       ld bc,tile_table_end-tile_table_base ; number of bytes to clear
046B26 CD 31 07 04 0052*       call clear_mem
046B2A             0053*   ; write tile ids
046B2A DD 21 00 00 0054*       ld ix,tile_table_base
       05          
046B2F AF          0055*       xor a ; tile id
046B30 06 00       0056*       ld b,0 ; loop counter
046B32             0057*   @loop:
046B32 DD 77 00    0058*       ld (ix+tile_id),a
046B35 ED 32 40    0059*       lea ix,ix+table_record_size
046B38 3C          0060*       inc a
046B39 10 F7       0061*       djnz @loop
046B3B             0062*   ; set pointers to top of tile stack and tile table
046B3B 21 0C 6B 04 0063*       ld hl,next_tile_id
046B3F 3E FF       0064*       ld a,255 ; will wrap around to 0 on first call to create active tile
046B41 77          0065*       ld (hl),a
046B42 21 00 00 05 0066*       ld hl,tile_table_base
046B46 22 06 6B 04 0067*       ld (tile_table_pointer),hl
046B4A 21 00 68 04 0068*       ld hl,tile_stack
046B4E 22 03 6B 04 0069*       ld (tile_stack_pointer),hl
046B52 C9          0070*       ret
046B53             0071*   ; end tile_table_init
046B53             0072*   
046B53             0073*   ; gets the next available tile id
046B53             0074*   ; inputs; none
046B53             0075*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
046B53             0076*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
046B53             0077*   ; destroys: a,hl,ix
046B53             0078*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
046B53             0079*   tile_table_get_next_id:
046B53 21 09 6B 04 0080*       ld hl,num_active_tiles
046B57 34          0081*       inc (hl)
046B58 C2 5F 6B 04 0082*       jp nz,@F ; check rollover to > 256 active tiles
046B5C 35          0083*       dec (hl) ; undo increment
046B5D AF          0084*       xor a ; reset carry flag indicating that we didn't find a free tile
046B5E C9          0085*       ret
046B5F             0086*   @@:
046B5F 7E          0087*       ld a,(hl) ; number of active tiles
046B60             0088*   ; point ix to next tile record
046B60 21 0C 6B 04 0089*       ld hl,next_tile_id
046B64 34          0090*       inc (hl)
046B65 56          0091*       ld d,(hl) ; index into tile table
046B66 1E 40       0092*       ld e,tile_table_record_size
046B68 ED 5C       0093*       mlt de ; de is now the offset to the table entry
046B6A DD 21 00 00 0094*       ld ix,tile_table_base ; point to base address of tile table
       05          
046B6F DD 19       0095*       add ix,de ; ix is now the address of the table entry
046B71             0096*   ; add tile pointer to tile stack
046B71 21 00 68 04 0097*       ld hl,tile_stack
046B75 57          0098*       ld d,a ; number of active tiles
046B76 15          0099*       dec d ; zero-based index
046B77 1E 03       0100*       ld e,3 ; three bytes per tile record
046B79 ED 5C       0101*       mlt de ; offset into tile stack
046B7B 19          0102*       add hl,de ; hl points to top of the active tiles
046B7C ED 3F       0103*       ld (hl),ix
046B7E             0104*   ; return tile id
046B7E DD 7E 00    0105*       ld a,(ix+tile_id)
046B81 37          0106*       scf ; sets carry flag indicating we found a free tile
046B82 C9          0107*       ret ; done
046B83             0108*   ; end tile_table_get_next_id
046B83             0109*   
046B83             0110*   ; deactivate the tile with the given id
046B83             0111*   ; inputs: tile_stack_pointer set to record to remove
046B83             0112*   ; outputs: decrements num_active_tiles by one, tile_stack_pointer set to record above removed record, removes tile pointer from the tile stack, shifts stack records above it down one position
046B83             0113*   ; destroys: a,hl,bc,de
046B83             0114*   table_deactivate_tile:
046B83             0115*   ; compute address to copy from
046B83 2A 03 6B 04 0116*       ld hl,(tile_stack_pointer)
046B87 23          0117*       inc hl
046B88 23          0118*       inc hl
046B89 23          0119*       inc hl
046B8A E5          0120*       push hl ; save copy from address
046B8B             0121*   ; compute bytes to copy
046B8B 3A 09 6B 04 0122*       ld a,(num_active_tiles)
046B8F 6F          0123*       ld l,a
046B90 26 03       0124*       ld h,3
046B92 ED 6C       0125*       mlt hl
046B94 11 00 68 04 0126*       ld de,tile_stack
046B98 19          0127*       add hl,de ; hl = bottom of stack address
046B99 ED 5B 03 6B 0128*       ld de,(tile_stack_pointer)
       04          
046B9E B7          0129*       or a ; clear carry
046B9F ED 52       0130*       sbc hl,de ; hl = bytes to copy
046BA1 E5          0131*       push hl
046BA2 C1          0132*       pop bc ; bytes to copy
046BA3             0133*   ; compute target address
046BA3 ED 5B 03 6B 0134*       ld de,(tile_stack_pointer)
       04          
046BA8             0135*   ; copy bytes
046BA8 E1          0136*       pop hl ; copy from address
046BA9 ED B0       0137*       ldir
046BAB             0138*   ; update stack pointer and active tile count
046BAB 21 09 6B 04 0139*       ld hl,num_active_tiles
046BAF 35          0140*       dec (hl)
046BB0 2A 03 6B 04 0141*       ld hl,(tile_stack_pointer)
046BB4 2B          0142*       dec hl
046BB5 2B          0143*       dec hl
046BB6 2B          0144*       dec hl
046BB7 22 03 6B 04 0145*       ld (tile_stack_pointer),hl
046BBB C9          0146*       ret
046BBC             0147*   ; end table_deactivate_tile
046BBC             0148*   
046BBC             0149*   ; spawn a new active tile at the prescribed location
046BBC             0150*   ; inputs: hl = pointer to new tile default settings, tiles_x_plot, tiles_y_plot = x,y position
046BBC             0151*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
046BBC             0152*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
046BBC             0153*   ; destroys: a,hl,ix
046BBC             0154*   ; preserves: bc,de (x,y position)
046BBC             0155*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
046BBC             0156*   spawn_active_tile:
046BBC E5          0157*       push hl ; back up pointer to new tile defaults
046BBD CD 53 6B 04 0158*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
046BC1 E1          0159*       pop hl ; restore pointer to new tile defaults
046BC2 D0          0160*       ret nc ; no carry means no free tile slots, so we go home
046BC3             0161*   ; copy default settings to new tile
046BC3 DD 22 0D 6B 0162*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
046BC8 ED 32 16    0163*       lea ix,ix+tile_definitions ; bump pointer to copy to
046BCB DD E5       0164*       push ix ; pointer to default tile settings
046BCD D1          0165*       pop de ; address to copy to
046BCE 01 2A 00 00 0166*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
046BD2 ED B0       0167*       ldir ; copies defaults to new tile record
046BD4             0168*   ; copy tile position from inputs
046BD4 DD 2A 0D 6B 0169*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
046BD9 2A 0A 6E 04 0170*       ld hl,(tiles_x_plot-1) ; shift up one byte to get 16.8 fixed point
046BDD DD 2F 01    0171*       ld (ix+tile_x),hl
046BE0 2A 0E 6E 04 0172*       ld hl,(tiles_y_plot-1) ; shift up one byte to get 16.8 fixed point
046BE4 DD 2F 04    0173*       ld (ix+tile_y),hl
046BE7             0174*   ; set default tile velocities
046BE7 21 00 00 00 0175*       ld hl,0
046BEB DD 2F 07    0176*       ld (ix+tile_xvel),hl
046BEE 21 00 01 00 0177*       ld hl,1*256 ; 1 pixel per frame
046BF2 DD 2F 0A    0178*       ld (ix+tile_yvel),hl
046BF5             0179*   ; return to caller
046BF5 DD CB 16 FE 0180*       set 7,(ix+sprite_type) ; set just spawned flag
046BF9 DD CB 1D F6 0181*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
046BFD 37          0182*       scf ; set carry flag to indicate success
046BFE C9          0183*       ret
046BFF             0184*   ; end spawn_active_tile
046BFF             0185*   
046BFF             0186*   ; compute animation frame based on tile_animation and tile_heading
046BFF             0187*   ; inputs: iy set to tile record
046BFF             0188*   ; outputs: a, tile_frame set to animation frame
046BFF             0189*   ; destroys: a,hl
046BFF             0190*   tile_frame_heading_animation:
046BFF FD 7E 11    0191*       ld a,(iy+tile_heading+1) ; we want the integer portion
046C02 CB 3F       0192*       srl a ; divide integer portion by 8
046C04 CB 3F       0193*       srl a
046C06 CB 3F       0194*       srl a
046C08 FD 66 22    0195*       ld h,(iy+tile_animation)
046C0B 2E 20       0196*       ld l,32 ; 32 orientation frames per animation
046C0D ED 6C       0197*       mlt hl ; hl = offset from base animation
046C0F 85          0198*       add a,l ; modulo256 since tile_frame is only 1 byte
046C10 FD 77 28    0199*       ld (iy+tile_frame),a
046C13 C9          0200*       ret
046C14             0201*   ; end tile_frame_heading_animation
046C14             0202*   
046C14             0203*   ; compute animation frame based on tile_heading
046C14             0204*   ; inputs: iy set to tile record
046C14             0205*   ; outputs: a, tile_frame set to animation frame
046C14             0206*   ; destroys: a,hl
046C14             0207*   tile_frame_heading:
046C14 FD 7E 11    0208*       ld a,(iy+tile_heading+1) ; we want the integer portion
046C17 CB 3F       0209*       srl a ; divide integer portion by 8
046C19 CB 3F       0210*       srl a
046C1B CB 3F       0211*       srl a
046C1D FD 77 28    0212*       ld (iy+tile_frame),a
046C20 C9          0213*       ret
046C21             0214*   ; end tile_frame_heading
046C21             0215*   
046C21             0216*   dump_tile_record:
046C21 CD 00 01 04 0217*       call printInline
046C25 69 64 20 20 0218*       asciz "id  : "
       3A 20 00    
046C2C DD 7E 00    0219*       ld a,(ix+tile_id)
046C2F CD 4A 01 04 0220*       call printHexA
046C33             0221*   
046C33 CD 00 01 04 0222*       call printInline
046C37 0D 0A 78 20 0223*       asciz "\r\nx   :"
       20 20 3A 00 
046C3F DD 27 01    0224*       ld hl,(ix+tile_x)
046C42 CD 2B 03 04 0225*       call print_s168_hl
046C46             0226*   
046C46 CD 00 01 04 0227*       call printInline
046C4A 0D 0A 79 20 0228*       asciz "\r\ny   :"
       20 20 3A 00 
046C52 DD 27 04    0229*       ld hl,(ix+tile_y)
046C55 CD 2B 03 04 0230*       call print_s168_hl
046C59             0231*   
046C59 CD 00 01 04 0232*       call printInline
046C5D 0D 0A 78 76 0233*       asciz "\r\nxv  :"
       20 20 3A 00 
046C65 DD 27 07    0234*       ld hl,(ix+tile_xvel)
046C68 CD 2B 03 04 0235*       call print_s168_hl
046C6C             0236*   
046C6C CD 00 01 04 0237*       call printInline
046C70 0D 0A 79 76 0238*       asciz "\r\nyv  :"
       20 20 3A 00 
046C78 DD 27 0A    0239*       ld hl,(ix+tile_yvel)
046C7B CD 2B 03 04 0240*       call print_s168_hl
046C7F             0241*   
046C7F CD 00 01 04 0242*       call printInline
046C83 0D 0A 76 20 0243*       asciz "\r\nv   :"
       20 20 3A 00 
046C8B DD 27 0D    0244*       ld hl,(ix+tile_vel)
046C8E CD 2B 03 04 0245*       call print_s168_hl
046C92             0246*   
046C92 CD 00 01 04 0247*       call printInline
046C96 0D 0A 68 64 0248*       asciz "\r\nhdg :"
       67 20 3A 00 
046C9E DD 27 10    0249*       ld hl,(ix+tile_heading)
046CA1 CD 2B 03 04 0250*       call print_s168_hl
046CA5             0251*   
046CA5 CD 00 01 04 0252*       call printInline
046CA9 0D 0A 6F 72 0253*       asciz "\r\nori :"
       69 20 3A 00 
046CB1 DD 27 13    0254*       ld hl,(ix+tile_orientation)
046CB4 CD 2B 03 04 0255*       call print_s168_hl
046CB8             0256*   
046CB8 CD 00 01 04 0257*       call printInline
046CBC 0D 0A 74 79 0258*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
046CC5 DD 7E 16    0259*       ld a,(ix+tile_type)
046CC8 CD 4A 01 04 0260*       call printHexA
046CCC             0261*   
046CCC CD 00 01 04 0262*       call printInline
046CD0 0D 0A 42 49 0263*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
046CD9 DD 27 17    0264*       ld hl,(ix+tile_base_bufferId)
046CDC CD 27 01 04 0265*       call printHex24
046CE0             0266*   
046CE0 CD 00 01 04 0267*       call printInline
046CE4 0D 0A 6D 50 0268*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
046CED DD 27 1A    0269*       ld hl,(ix+tile_move_program)
046CF0 CD 27 01 04 0270*       call printHex24
046CF4             0271*   
046CF4 CD 00 01 04 0272*       call printInline
046CF8 0D 0A 63 6F 0273*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
046D01 DD 7E 1D    0274*       ld a,(ix+tile_collisions)
046D04 CD A8 03 04 0275*       call printBin8
046D08             0276*   
046D08             0277*       ; call printInline
046D08             0278*       ; asciz "\r\nszx : "
046D08             0279*       ; ld a,(ix+tile_dim_x)
046D08             0280*       ; call printHexA
046D08             0281*   
046D08             0282*       ; call printInline
046D08             0283*       ; asciz "\r\nszy : "
046D08             0284*       ; ld a,(ix+tile_dim_y)
046D08             0285*       ; call printHexA
046D08             0286*   
046D08             0287*       ; call printInline
046D08             0288*       ; asciz "\r\n#ori: "
046D08             0289*       ; ld a,(ix+tile_num_orientations)
046D08             0290*       ; call printHexA
046D08             0291*   
046D08             0292*       ; call printInline
046D08             0293*       ; asciz "\r\n#ani: "
046D08             0294*       ; ld a,(ix+tile_num_animations)
046D08             0295*       ; call printHexA
046D08             0296*   
046D08             0297*       ; call printInline
046D08             0298*       ; asciz "\r\nani : "
046D08             0299*       ; ld a,(ix+tile_animation)
046D08             0300*       ; call printHexA
046D08             0301*   
046D08             0302*       ; call printInline
046D08             0303*       ; asciz "\r\nanit: "
046D08             0304*       ; ld a,(ix+tile_animation_timer)
046D08             0305*       ; call printHexA
046D08             0306*   
046D08             0307*       ; call printInline
046D08             0308*       ; asciz "\r\nmvt : "
046D08             0309*       ; ld a,(ix+tile_move_timer)
046D08             0310*       ; call printHexA
046D08             0311*   
046D08             0312*       ; call printInline
046D08             0313*       ; asciz "\r\nmvs : "
046D08             0314*       ; ld a,(ix+tile_move_step)
046D08             0315*       ; call printHexA
046D08             0316*   
046D08             0317*       ; call printInline
046D08             0318*       ; asciz "\r\npts : "
046D08             0319*       ; ld a,(ix+tile_points)
046D08             0320*       ; call printHexA
046D08             0321*   
046D08             0322*       ; call printInline
046D08             0323*       ; asciz "\r\ndmg : "
046D08             0324*       ; ld a,(ix+tile_shield_damage)
046D08             0325*       ; call printHexA
046D08             0326*   
046D08             0327*       ; call printInline
046D08             0328*       ; asciz "\r\nfrm : "
046D08             0329*       ; ld a,(ix+tile_frame)
046D08             0330*       ; call printHexA
046D08             0331*   
046D08             0332*       ; call printNewLine
046D08             0333*       ; call printNewLine
046D08             0334*   
046D08             0335*       ; call waitKeypress
046D08 C9          0336*       ret
046D09             0065        include "tiles.inc"
046D09 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
046E00 00 00 00    0002*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
046E03 00 00 00    0003*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
046E06             0004*       ; initialize to zero for a maximum of 256 rows in a level
046E06 00          0005*   tiles_cols: db 0 ; number of tile columns in the current level
046E07             0006*   
046E07 00 00 00    0007*   cur_baseBufferId: dl 0
046E0A 00          0008*       db 0 ; padding for byte-shifting
046E0B 00 00 00    0009*   tiles_x_plot: dl 0
046E0E 00          0010*       db 0 ; padding for byte-shifting
046E0F F1 FF FF    0011*   tiles_y_plot: dl -15
046E12             0012*   
046E12             0013*   tiles_plot:
046E12             0014*   ; set gfx viewport to playing field window
046E12 01 00 00 00 0015*       ld bc,field_left
046E16 11 00 00 00 0016*       ld de,field_top
046E1A DD 21 FF 00 0017*       ld ix,field_right
       00          
046E1F FD 21 7F 01 0018*       ld iy,field_bottom
       00          
046E24 CD EB 1A 04 0019*       call vdu_set_gfx_viewport
046E28             0020*   ; move the background down one pixel
046E28 3E 02       0021*       ld a,2 ; current gfx viewport
046E2A 2E 02       0022*       ld l,2 ; direction=down
046E2C 26 01       0023*       ld h,1 ; speed=1 px
046E2E CD 63 1A 04 0024*       call vdu_scroll_down
046E32             0025*   ; set gfx viewport to one scanline to optimise plotting tiles
046E32 01 00 00 00 0026*       ld bc,0 ; leftmost x-coord
046E36 11 00 00 00 0027*       ld de,0 ; topmost y-coord
046E3A DD 21 FF 00 0028*       ld ix,255 ; rightmost x-coord
       00          
046E3F FD 21 00 00 0029*       ld iy,0 ; bottommost y-coord
       00          
046E44 CD EB 1A 04 0030*       call vdu_set_gfx_viewport
046E48             0031*   ; ; plot the background
046E48             0032*   ;     call bg_plot
046E48             0033*   ; initialize tiles loop
046E48 21 00 00 00 0034*       ld hl,0 ; init plotting x-coordinate
046E4C 22 0B 6E 04 0035*       ld (tiles_x_plot),hl
046E50 2A 00 6E 04 0036*       ld hl,(tiles_row_defs)
046E54 3A 06 6E 04 0037*       ld a,(tiles_cols)
046E58 47          0038*       ld b,a ; column loop counter
046E59             0039*   @loop:
046E59 C5          0040*       push bc ; save the loop counter
046E5A             0041*   ; read the tile defintion for the current column
046E5A 7E          0042*       ld a,(hl) ; a has tile definition
046E5B E5          0043*       push hl ; save pointer to tile definition
046E5C 2A 07 6E 04 0044*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
046E60 6F          0045*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
046E61 CD 38 1B 04 0046*       call vdu_buff_select ; tile bitmap buffer is now active
046E65             0047*   ; plot the active bitmap
046E65 ED 4B 0B 6E 0048*       ld bc,(tiles_x_plot)
       04          
046E6A ED 5B 0F 6E 0049*       ld de,(tiles_y_plot)
       04          
046E6F CD 20 1F 04 0050*       call vdu_plot_bmp
046E73             0051*   ; bump x-coords the width of one tile and save it
046E73 2A 0B 6E 04 0052*       ld hl,(tiles_x_plot)
046E77 01 10 00 00 0053*       ld bc,16
046E7B 09          0054*       add hl,bc
046E7C 22 0B 6E 04 0055*       ld (tiles_x_plot),hl
046E80             0056*   ; prepare to loop to next column
046E80 E1          0057*       pop hl ; get back pointer to tile def
046E81 23          0058*       inc hl ; bump it to the next column
046E82 C1          0059*       pop bc ; snag our loop counter
046E83 10 D4       0060*       djnz @loop
046E85             0061*   ; increment tiles plotting y-coordinate
046E85             0062*   ; (we use ix b/c we want to preserve hl for the next step)
046E85 DD 2A 0F 6E 0063*       ld ix,(tiles_y_plot)
       04          
046E8A 11 01 00 00 0064*       ld de,1
046E8E DD 19       0065*       add ix,de
046E90 DD 22 0F 6E 0066*       ld (tiles_y_plot),ix
       04          
046E95 DD 7D       0067*       ld a,ixl
046E97 FE 01       0068*       cp 1
046E99 C0          0069*       ret nz
046E9A             0070*   ; do active tiles
046E9A E5          0071*       push hl ; save pointer to next row tile def
046E9B CD BE 6E 04 0072*       call do_active_tiles
046E9F E1          0073*       pop hl ; get back pointer to next row tile def
046EA0             0074*   ; time to bump tiles_row_defs to next row
046EA0             0075*   ; (hl was already there at the end of the loop)
046EA0 22 00 6E 04 0076*       ld (tiles_row_defs),hl
046EA4             0077*   ; reset coords to plot next row of tiles
046EA4 21 00 00 00 0078*       ld hl,0
046EA8 22 0B 6E 04 0079*       ld (tiles_x_plot),hl
046EAC 21 F1 FF FF 0080*       ld hl,-15
046EB0 22 0F 6E 04 0081*       ld (tiles_y_plot),hl
046EB4             0082*   ; decrement tiles row counter
046EB4 21 03 6E 04 0083*       ld hl,tiles_row
046EB8 35          0084*       dec (hl)
046EB9 C0          0085*       ret nz
046EBA             0086*   @inc_level:
046EBA C3 6C 5D 04 0087*       jp next_level
046EBE             0088*   ; end tiles_plot
046EBE             0089*   
046EBE             0090*   do_active_tiles:
046EBE             0091*   ; initialize tiles loop
046EBE 21 00 00 00 0092*       ld hl,0 ; init plotting x-coordinate
046EC2 22 0B 6E 04 0093*       ld (tiles_x_plot),hl
046EC6 2A 00 6E 04 0094*       ld hl,(tiles_row_defs)
046ECA 3A 06 6E 04 0095*       ld a,(tiles_cols)
046ECE 47          0096*       ld b,a ; column loop counter
046ECF             0097*   @loop:
046ECF C5          0098*       push bc ; save the loop counter
046ED0             0099*   ; read the tile defintion for the current column
046ED0 7E          0100*       ld a,(hl) ; a has tile definition
046ED1 E5          0101*       push hl ; save pointer to tile definition
046ED2 B7          0102*       or a ; check for null tile
046ED3 CA EF 6E 04 0103*       jp z,@next_tile ; skip to next tile if null
046ED7 FE 11       0104*       cp 17 ; carry reset if active tile
046ED9 D2 EF 6E 04 0105*       jp nc,@next_tile ; skip to next tile if not active
046EDD             0106*   ; call the tile activation routine
046EDD 21 03 6F 04 0107*       ld hl,tile_activation_routines
046EE1 16 03       0108*       ld d,3 ; three bytes per table entry
046EE3 5F          0109*       ld e,a ; a is the tile type
046EE4 ED 5C       0110*       mlt de ; de is now the offset to the table entry
046EE6 19          0111*       add hl,de ; hl is now the address of the table entry
046EE7 ED 27       0112*       ld hl,(hl) ; hl is now the activation routine address
046EE9             0113*       CALL_HL ; call the activation routine
046EE9 01 EF 6E 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
046EED C5          0002*M1     push bc ; which constitutes the return address
046EEE E9          0003*M1     jp (hl) ; Jump to the address in HL
046EEF             0114*   @next_tile:
046EEF             0115*   ; bump x-coords the width of one tile and save it
046EEF 2A 0B 6E 04 0116*       ld hl,(tiles_x_plot)
046EF3 01 10 00 00 0117*       ld bc,16
046EF7 09          0118*       add hl,bc
046EF8 22 0B 6E 04 0119*       ld (tiles_x_plot),hl
046EFC             0120*   ; prepare to loop to next column
046EFC E1          0121*       pop hl ; get back pointer to tile def
046EFD 23          0122*       inc hl ; bump it to the next column
046EFE C1          0123*       pop bc ; snag our loop counter
046EFF 10 CE       0124*       djnz @loop
046F01 C9          0125*       ret ; done
046F02             0126*   ; end do_active_tiles
046F02             0127*   
046F02             0128*   ; bg_y_plot: dl -1
046F02             0129*   ; bg_bufferId: dl BUF_STATION_BG_00 ; default bufferId for background tiles
046F02             0130*   
046F02             0131*   bg_plot: ; TODO: implement this
046F02             0132*   ; ; load current bg tile bufferId as default
046F02             0133*   ;     ld hl,(bg_bufferId)
046F02             0134*   ; ; check whether it is time for a new background tile
046F02             0135*   ;     ld a,(bg_y_plot)
046F02             0136*   ;     inc a
046F02             0137*   ;     ld (bg_y_plot),a
046F02             0138*   ;     jp nz,@F ; not time for a new tile so draw current one
046F02             0139*   ; ; load the next background tile
046F02             0140*   ;     ld hl,BUF_STATION_BG_00
046F02             0141*   ;     call rand_8
046F02             0142*   ;     and %0000011
046F02             0143*   ;     add a,l
046F02             0144*   ;     ld l,a
046F02             0145*   ;     ld a,0
046F02             0146*   ;     adc a,h
046F02             0147*   ;     ld h,a
046F02             0148*   ;     ld (bg_bufferId),hl
046F02             0149*   ; @@:
046F02             0150*   ;     call vdu_buff_select
046F02             0151*   ;     ld bc,0
046F02             0152*   ;     ld de,(bg_y_plot)
046F02             0153*   ;     inc de
046F02             0154*   ;     call vdu_plot_bmp
046F02             0155*   ; all done
046F02 C9          0156*       ret
046F03             0066        include "tiles_active.inc"
046F03             0001*   
046F03             0002*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
046F03             0003*   tile_pad_small: equ 1
046F03             0004*   tile_pad_med: equ 2
046F03             0005*   tile_pad_large: equ 3
046F03             0006*   tile_pad_huge: equ 4
046F03             0007*   tile_turret_fireball: equ 5
046F03             0008*   tile_laser_turret: equ 6
046F03             0009*   tile_twin_laser_turret: equ 7
046F03             0010*   tile_gatling_turret: equ 8
046F03             0011*   tile_electrode_r: equ 9
046F03             0012*   tile_electrode_u: equ 10
046F03             0013*   tile_piston_r: equ 11
046F03             0014*   tile_piston_u: equ 12
046F03             0015*   tile_spark_r: equ 13
046F03             0016*   tile_spark_u: equ 14
046F03             0017*   tile_flame_r: equ 15
046F03             0018*   tile_flame_u: equ 16
046F03             0019*   
046F03             0020*   active_tile_timer: equ 24 ; 2/10ths of a second
046F03             0021*   tile_activation_routines:
046F03 36 6F 04    0022*       dl activate_null_tile ; dummy spacer since tiled is 1-based
046F06 13 70 04    0023*       dl activate_pad_small
046F09 36 6F 04    0024*       dl activate_null_tile  ;  activate_pad_med
046F0C 36 6F 04    0025*       dl activate_null_tile  ;  activate_pad_large
046F0F 36 6F 04    0026*       dl activate_null_tile  ;  activate_pad_huge
046F12 13 71 04    0027*       dl activate_turret_fireball
046F15 36 6F 04    0028*       dl activate_null_tile  ;  activate_laser_turret
046F18 36 6F 04    0029*       dl activate_null_tile  ;  activate_twin_laser_turret
046F1B 36 6F 04    0030*       dl activate_null_tile  ;  activate_gatling_turret
046F1E 36 6F 04    0031*       dl activate_null_tile  ;  activate_electrode_r
046F21 36 6F 04    0032*       dl activate_null_tile  ;  activate_electrode_u
046F24 36 6F 04    0033*       dl activate_null_tile  ;  activate_piston_r
046F27 36 6F 04    0034*       dl activate_null_tile  ;  activate_piston_u
046F2A 36 6F 04    0035*       dl activate_null_tile  ;  activate_spark_r
046F2D 36 6F 04    0036*       dl activate_null_tile  ;  activate_spark_u
046F30 36 6F 04    0037*       dl activate_null_tile  ;  activate_flame_r
046F33 36 6F 04    0038*       dl activate_null_tile  ;  activate_flame_u
046F36             0039*   ; end tile_activation_routines
046F36             0040*   
046F36             0041*   activate_null_tile:
046F36 C9          0042*       ret ; dummy routine, do nothing
046F37             0043*   move_active_tile:
046F37             0044*   ; y-axis movement
046F37 FD 27 04    0045*       ld hl,(iy+tile_y)
046F3A FD 17 0A    0046*       ld de,(iy+tile_yvel)
046F3D 19          0047*       add hl,de
046F3E FD 2F 04    0048*       ld (iy+tile_y),hl
046F41             0049*   ; detect screen edge collisions
046F41             0050*   ; y-axis bottom is all we need to test
046F41 11 00 80 FE 0051*       ld de,-tile_bottom*256
046F45 ED 5A       0052*       adc hl,de
046F47 F8          0053*       ret m ; still on screen so do nothing further
046F48 AF          0054*       xor a ; signal caller that tile has scrolled off screen
046F49 C9          0055*       ret
046F4A             0056*   ; end move_active_tile
046F4A             0057*   
046F4A             0058*   move_tiles:
046F4A             0059*   ; initialize pointers and loop counter
046F4A FD 21 00 68 0060*       ld iy,tile_stack ; set iy to first record in table
       04          
046F4F             0061*   @move_loop:
046F4F FD 22 03 6B 0062*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
046F54 FD 7E 02    0063*       ld a,(iy+2)
046F57 B7          0064*       or a ; will be zero if at end of stack
046F58 C8          0065*       ret z ; end of stack so we're done
046F59             0066*   ; point iy to tile record
046F59 FD 37 00    0067*       ld iy,(iy) ; iy points to the current tile record
046F5C FD 22 06 6B 0068*       ld (tile_table_pointer),iy ; update table pointer
       04          
046F61             0069*   ; check top bit of tile_type to see if tile is just spawned
046F61 FD CB 16 7E 0070*       bit 7,(iy+tile_type)
046F65 C2 83 6F 04 0071*       jp nz,@just_spawned ; if just spawned, skip to next record
046F69             0072*   ; check sprite_alive bit to see if tile is active
046F69 FD CB 1D 76 0073*       bit sprite_alive,(iy+sprite_collisions)
046F6D C8          0074*       ret z ; end of stack so we're done
046F6E             0075*   ; otherwise we prepare to move the tile
046F6E FD 27 1A    0076*       ld hl,(iy+tile_move_program) ; load the behavior subroutine address
046F71             0077*       CALL_HL
046F71 01 77 6F 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
046F75 C5          0002*M1     push bc ; which constitutes the return address
046F76 E9          0003*M1     jp (hl) ; Jump to the address in HL
046F77             0078*    ; get back stack pointer and loop
046F77             0079*   @next_record:
046F77 FD 2A 03 6B 0080*       ld iy,(tile_stack_pointer)
       04          
046F7C ED 33 03    0081*       lea iy,iy+3 ; next tile stack record
046F7F C3 4F 6F 04 0082*       jp @move_loop ; loop until we've checked all the records
046F83             0083*   @just_spawned:
046F83 FD CB 16 BE 0084*       res 7,(iy+tile_type) ; clear just spawned flag
046F87 C3 77 6F 04 0085*       jp @next_record
046F8B             0086*   ; end move_tiles
046F8B             0087*   
046F8B             0088*   ; this routine vanquishes the tile tile
046F8B             0089*   ; and replaces it with an animated explosion
046F8B             0090*   ; destroys: everything except index registers
046F8B             0091*   ; returns: a=-1 to indicate tile died, and an incandescent ball of debris and gas
046F8B             0092*   tile_kill:
046F8B FD 2A 03 6B 0093*       ld iy,(tile_stack_pointer)
       04          
046F90 2A 00 60 04 0094*       ld hl,(player_score)
046F94 01 00 00 00 0095*       ld bc,0 ; clear bcu
046F98 FD 4E 26    0096*       ld c,(iy+tile_points)
046F9B 09          0097*       add hl,bc
046F9C 22 00 60 04 0098*       ld (player_score),hl
046FA0 C3 38 2A 04 0099*       jp tile_spawn_explosion
046FA4             0100*   ; end tile_kill
046FA4             0101*   
046FA4             0102*   draw_active_tile:
046FA4 FD 27 17    0103*       ld hl,(iy+tile_base_bufferId)
046FA7 FD 7E 28    0104*       ld a,(iy+tile_frame)
046FAA 85          0105*       add a,l ; TODO: with a little work we could make all tile base buffer ids align to 256
046FAB 6F          0106*       ld l,a
046FAC 3E 00       0107*       ld a,0 ; preserve carry
046FAE 8C          0108*       adc a,h
046FAF 67          0109*       ld h,a
046FB0 CD 38 1B 04 0110*       call vdu_buff_select ; buffer id of animation frame
046FB4 FD 07 01    0111*       ld bc,(iy+tile_x)
046FB7 FD 17 04    0112*       ld de,(iy+tile_y)
046FBA CD 3C 1F 04 0113*       call vdu_plot_bmp168
046FBE C9          0114*       ret
046FBF             0115*   ; end draw_active_tile
046FBF             0116*   
046FBF             0117*   ; create a new sprite at the same location as the current tile
046FBF             0118*   ; inputs: hl = pointer to new sprite default settings, tile_table_pointer = current tile
046FBF             0119*   ;         ix = pointer to sprite group, b = number of records in sprite group
046FBF             0120*   spawn_sprite_from_tile:
046FBF E5          0121*       push hl ; back up pointer to new sprite defaults
046FC0 CD 10 72 04 0122*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
046FC4 E1          0123*       pop hl ; restore pointer to new sprite defaults
046FC5 D0          0124*       ret nc ; no carry means no free sprite slots, so we go home
046FC6             0125*   ; copy default settings to new sprite
046FC6 DD E5       0126*       push ix ; back up pointer to new sprite record
046FC8 ED 32 16    0127*       lea ix,ix+sprite_definitions ; bump pointer to copy to
046FCB DD E5       0128*       push ix ; pointer to default sprite settings
046FCD D1          0129*       pop de ; address to copy to
046FCE 01 2A 00 00 0130*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
046FD2 ED B0       0131*       ldir ; copies defaults to new sprite record
046FD4 DD E1       0132*       pop ix ; restore pointer to new sprite record
046FD6             0133*   ; copy sprite position, velocity and orientation from existing tile
046FD6 FD 2A 06 6B 0134*       ld iy,(tile_table_pointer) ; get existing tile record
       04          
046FDB FD 27 01    0135*       ld hl,(iy+tile_x)
046FDE DD 2F 01    0136*       ld (ix+sprite_x),hl
046FE1 FD 27 04    0137*       ld hl,(iy+tile_y)
046FE4 DD 2F 04    0138*       ld (ix+sprite_y),hl
046FE7             0139*   ; return to caller
046FE7 DD CB 16 FE 0140*       set 7,(ix+sprite_type) ; set just spawned flag
046FEB DD CB 1D F6 0141*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
046FEF 37          0142*       scf ; set carry flag to indicate success
046FF0 C9          0143*       ret
046FF1             0144*   ; end spawn_sprite_from_tile
046FF1             0067        include "tile_pad_small.inc"
046FF1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
047000             0002*   pad_small_defaults:
047000 01          0003*       db tile_pad_small       ; type
047001 0A 01 00    0004*       dl BUF_PAD              ; base_bufferId
047004 22 70 04    0005*       dl move_pad_small       ; move_program
047007 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
047008 10          0007*       db 16                   ; dim_x
047009 10          0008*       db 16                   ; dim_y
04700A 01          0009*       db 1                    ; num_orientations
04700B 01          0010*       db 1                    ; num_animations
04700C 00          0011*       db 0                    ; animation
04700D 00          0012*       db 0                    ; animation_timer
04700E 18          0013*       db 24                   ; move_timer
04700F 00          0014*       db 0                    ; move_step
047010 05          0015*       db 5                    ; points
047011 00          0016*       db 0                    ; shield_damage
047012 00          0017*       db 0                    ; frame
047013             0018*   
047013             0019*   activate_pad_small:
047013 21 00 70 04 0020*       ld hl,pad_small_defaults
047017             0021*   ; get next available active tile id
047017 CD BC 6B 04 0022*       call spawn_active_tile
04701B D0          0023*       ret nc ; no carry means no free active tile slots, so we go home
04701C             0024*   ; other specific initialization
04701C 3E 40       0025*       ld a,64
04701E FD 77 24    0026*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
047021 C9          0027*       ret
047022             0028*   ; end activate_pad_small
047022             0029*   
047022             0030*   move_pad_small:
047022 CD 37 6F 04 0031*       call move_active_tile
047026 CA 83 6B 04 0032*       jp z,table_deactivate_tile
04702A CD E1 26 04 0033*       call check_enemy_collision_laser
04702E CA 46 70 04 0034*       jp z,kill_pad_small
047032             0035*   ; check whether it is time to spawn a seeker
047032 FD 35 24    0036*       dec (iy+tile_move_timer)
047035 C0          0037*       ret nz
047036             0038*   ; spwan a seeker
047036 CD 14 29 04 0039*       call enemy_spawn_seeker
04703A             0040*       ; fall through to reset move timer
04703A             0041*   pad_small_reset_move_timer:
04703A CD AE 09 04 0042*       call rand_8     ; snag a random number
04703E E6 1F       0043*       and %00011111   ; keep only 5 lowest bits (max 31)
047040 C6 40       0044*       add a,64 ; range is now 64-127
047042 FD 77 24    0045*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
047045 C9          0046*       ret
047046             0047*   
047046             0048*   kill_pad_small:
047046 C3 8B 6F 04 0049*       jp tile_kill
04704A             0050*   ; end move_pad_small
04704A             0068        include "tile_turret_fireball.inc"
04704A FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
047100             0002*   turret_fireball_defaults:
047100 02          0003*       db enemy_ground         ; type
047101 30 01 00    0004*       dl BUF_TURRET_000       ; base_bufferId
047104             0005*       ; dl BUF_CRATER       ; base_bufferId DEBUG
047104 22 71 04    0006*       dl move_turret_fireball ; move_program
047107 40          0007*       db %01000000            ; collisions bit 6 signals sprite alive
047108 10          0008*       db 16                   ; dim_x
047109 10          0009*       db 16                   ; dim_y
04710A 20          0010*       db 32                   ; num_orientations
04710B 01          0011*       db 1                    ; num_animations
04710C 00          0012*       db 0                    ; animation
04710D 00          0013*       db 0                    ; animation_timer
04710E 18          0014*       db 24                   ; move_timer
04710F 00          0015*       db 0                    ; move_step
047110 05          0016*       db 5                    ; points
047111 00          0017*       db 0                    ; shield_damage
047112 00          0018*       db 0                    ; frame
047113             0019*   
047113             0020*   activate_turret_fireball:
047113 21 00 71 04 0021*       ld hl,turret_fireball_defaults
047117             0022*   ; get next available active tile id
047117 CD BC 6B 04 0023*       call spawn_active_tile
04711B D0          0024*       ret nc ; no carry means no free active tile slots, so we go home
04711C             0025*   ; other specific initialization
04711C 3E 40       0026*       ld a,64
04711E FD 77 24    0027*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
047121 C9          0028*       ret
047122             0029*   ; end activate_turret_fireball
047122             0030*   
047122             0031*   move_turret_fireball:
047122 CD 37 6F 04 0032*       call move_active_tile
047126 CA 83 6B 04 0033*       jp z,table_deactivate_tile
04712A CD E1 26 04 0034*       call check_enemy_collision_laser
04712E CA 61 71 04 0035*       jp z,kill_turret_fireball
047132             0036*   ; target player
047132 CD 2B 67 04 0037*       call tile_orientation_to_player
047136 21 00 04 00 0038*       ld hl,speed_fireball
04713A 22 58 67 04 0039*       ld (Vp),hl ; param for targeting_computer
04713E CD 70 67 04 0040*       call targeting_computer
047142 FD 2F 10    0041*       ld (iy+tile_heading),hl ; save active tile heading
047145 CD 14 6C 04 0042*       call tile_frame_heading
047149 CD A4 6F 04 0043*       call draw_active_tile
04714D             0044*   ; check whether it is time to spawn a fireball
04714D FD 35 24    0045*       dec (iy+tile_move_timer)
047150 C0          0046*       ret nz
047151             0047*   ; spwan a fireball
047151 CD 13 28 04 0048*       call enemy_spawn_fireball
047155             0049*       ; fall through to reset move timer
047155             0050*   turret_fireball_reset_move_timer:
047155 CD AE 09 04 0051*       call rand_8     ; snag a random number
047159 E6 1F       0052*       and %00011111   ; keep only 5 lowest bits (max 31)
04715B C6 18       0053*       add a,24 ; range is now 24-55
04715D FD 77 24    0054*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
047160 C9          0055*       ret
047161             0056*   
047161             0057*   kill_turret_fireball:
047161 C3 8B 6F 04 0058*       jp tile_kill
047165             0059*   ; end move_turret_fireball
047165             0069        include "sprites.inc"
047165             0001*   ; sprite_type
047165             0002*   enemy_dead: equ 0
047165             0003*   enemy_air: equ 1
047165             0004*   enemy_ground: equ 2
047165             0005*   enemy_projectile: equ 3
047165             0006*   explosion: equ 4
047165             0007*   player: equ 5
047165             0008*   player_air: equ 6
047165             0009*   player_ground: equ 7
047165             0010*   
047165             0011*   ; ###### SPRITE TABLE FIELD INDICES ######
047165             0012*   table_record_size:         equ  64; 40 bytes ;40 bytes per sprite record
047165             0013*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
047165             0014*   ; sprite state variables
047165             0015*   sprite_state_variables:    equ   1; beginning of sprite state variables
047165             0016*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
047165             0017*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
047165             0018*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
047165             0019*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
047165             0020*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
047165             0021*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
047165             0022*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
047165             0023*   ; sprite definition variables
047165             0024*   sprite_definitions:        equ  22; beginnning of sprite definition variables
047165             0025*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
047165             0026*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
047165             0027*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
047165             0028*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
047165             0029*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
047165             0030*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
047165             0031*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
047165             0032*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
047165             0033*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
047165             0034*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
047165             0035*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
047165             0036*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
047165             0037*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
047165             0038*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
047165             0039*   sprite_frame:              equ  40; 1 bytes ;current animation frame
047165             0040*   
047165             0041*   ; ###### SPRITE TABLE VARIABLES ######
047165             0042*   ; maximum number of sprites
047165             0043*   table_max_records: equ 16 ; it can handle more but this is pushing it
047165             0044*   ; table_total_bytes: equ table_end-table_start_variables
047165             0045*   
047165             0046*   ; pointer to top address of current record, initialized to table_base
047165 00 80 04    0047*   table_pointer: dl table_base
047168             0048*   
047168             0049*   ; flag indicating collision with screen edge
047168             0050*   ; uses orientation codes to specify which edge(s)
047168 00          0051*   sprite_screen_edge: db #00
047169             0052*   
047169             0053*   ; origin_top: equ 48
047169             0054*   origin_top: equ 0
047169             0055*   origin_left: equ 128
047169             0056*   field_top: equ 0
047169             0057*   field_bottom: equ 383-origin_top
047169             0058*   field_left: equ 0
047169             0059*   field_right: equ 255
047169             0060*   sprite_top: equ field_top + 0
047169             0061*   sprite_bottom: equ field_bottom-16
047169             0062*   sprite_left: equ field_left
047169             0063*   sprite_right: equ field_right-16
047169             0064*   
047169             0065*   tile_bottom: equ 384
047169             0066*   
047169             0067*   ; ######### COLLISION SPRITE PARAMETERS ##########
047169             0068*   ; integer coordinates are all that are needed for collision calculations
047169 00          0069*   collision_x: db 0x00
04716A 00          0070*   collision_y: db 0x00
04716B 00          0071*   collision_dim_x: db 0x00
04716C 00          0072*   collision_dim_y: db 0x00
04716D             0073*   
04716D             0074*   ; scratch variables
04716D 00          0075*   x: db 0x00 ; 8-bit signed integer
04716E 00          0076*   y: db 0x00 ; 8-bit signed integer
04716F 00 00 00    0077*   x0: dl 0x000000 ; 16.8 signed fixed place
047172 00 00 00    0078*   y0: dl 0x000000 ; 16.8 signed fixed place
047175 00 00 00    0079*   incx1: dl 0x000000 ; 16.8 signed fixed place
047178 00 00 00    0080*   incy1: dl 0x000000 ; 16.8 signed fixed place
04717B 00 00 00    0081*   incx2: dl 0x000000 ; 16.8 signed fixed place
04717E 00 00 00    0082*   incy2: dl 0x000000 ; 16.8 signed fixed place
047181             0083*   
047181             0084*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
047181 00 00 00    0085*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
047184 00 00 00    0086*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
047187 00 00 00    0087*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
04718A             0088*   
04718A             0089*   table_init:
04718A             0090*   ; clear the sprite table
04718A AF          0091*       xor a ; write zeroes to sprite table
04718B 21 00 80 04 0092*       ld hl,table_base ; address to copy from
04718F 01 00 05 00 0093*       ld bc,table_end-table_base ; number of bytes to clear
047193 CD 31 07 04 0094*       call clear_mem
047197             0095*   ; write sprite ids
047197 DD 21 00 80 0096*       ld ix,table_base
       04          
04719C AF          0097*       xor a ; sprite id
04719D 0E 00       0098*       ld c,0 ; sprite type
04719F 06 14       0099*       ld b,table_num_records ; loop counter
0471A1             0100*   @loop:
0471A1 DD 77 00    0101*       ld (ix+sprite_id),a
0471A4 DD 71 16    0102*       ld (ix+sprite_type),c
0471A7 ED 32 40    0103*       lea ix,ix+table_record_size
0471AA 3C          0104*       inc a
0471AB 10 F4       0105*       djnz @loop
0471AD C9          0106*       ret
0471AE             0107*   ; end table_init
0471AE             0108*   
0471AE             0109*   ; deactivate the sprite with the given id
0471AE             0110*   ; inputs: iy set to sprite record
0471AE             0111*   ; outputs: nothing
0471AE             0112*   ; destroys: a,hl
0471AE             0113*   table_deactivate_sprite:
0471AE FD 7E 00    0114*       ld a,(iy+sprite_id) ; get spriteId
0471B1 CD 00 20 04 0115*       call vdu_sprite_select ; select sprite
0471B5 CD 84 20 04 0116*       call vdu_sprite_hide
0471B9 FD CB 1D B6 0117*       res sprite_alive,(iy+sprite_collisions)
0471BD FD CB 1D BE 0118*       res sprite_just_died,(iy+sprite_collisions)
0471C1 C9          0119*       ret
0471C2             0120*   ; end table_deactivate_sprite
0471C2             0121*   
0471C2             0122*   sprites_init:
0471C2             0123*   ; initialize sprites
0471C2 CD 34 21 04 0124*   	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
0471C6 AF          0125*   	xor a ; loop counter / sprite id
0471C7             0126*   @sprite_loop:
0471C7 F5          0127*   	push af ; save loop counter / sprite id
0471C8 CD 00 20 04 0128*   	call vdu_sprite_select
0471CC 21 00 01 00 0129*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
0471D0 CD 55 21 04 0130*   	call vdu_sprite_add_buff
0471D4 F1          0131*   	pop af ; restore loop counter / sprite id
0471D5 3C          0132*       inc a
0471D6 FE 14       0133*       cp table_num_records
0471D8 C2 C7 71 04 0134*       jp nz,@sprite_loop
0471DC CD 34 20 04 0135*   	call vdu_sprite_activate
0471E0             0136*   
0471E0             0137*   ; define player sprite
0471E0 3A 00 81 04 0138*   	ld a,(player_begin+sprite_id)
0471E4 CD 00 20 04 0139*   	call vdu_sprite_select
0471E8 CD 13 20 04 0140*   	call vdu_sprite_clear_frames
0471EC 21 2B 01 00 0141*   	ld hl,BUF_SHIP_0L
0471F0 01 03 00 00 0142*   	ld bc,3 ; three bitmaps for player ship
0471F4             0143*   @sprite_player_loop:
0471F4 C5          0144*   	push bc
0471F5 E5          0145*   	push hl
0471F6 CD 55 21 04 0146*   	call vdu_sprite_add_buff
0471FA E1          0147*   	pop hl
0471FB 23          0148*   	inc hl
0471FC C1          0149*   	pop bc
0471FD 10 F5       0150*   	djnz @sprite_player_loop
0471FF             0151*   
0471FF             0152*   ; define player weapon sprites
0471FF CD 94 64 04 0153*       call init_player_laser
047203             0154*   
047203             0155*   ; define enemy sprites
047203 CD B7 29 04 0156*       call init_enemy_seekers
047207 CD 6E 28 04 0157*       call init_enemy_fireballs
04720B             0158*   
04720B             0159*   ; define explosion sprites
04720B CD 9C 2A 04 0160*       call init_explosions
04720F C9          0161*       ret
047210             0162*   ; end sprites_init
047210             0163*   
047210             0164*   ; gets the next available sprite id for a particular sprite group
047210             0165*   ; inputs; ix = pointer to sprite group, b = number of records in sprite group
047210             0166*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
047210             0167*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047210             0168*   ; destroys: a,b,c,hl,ix
047210             0169*   table_get_next_id:
047210             0170*   @loop:
047210 DD CB 1D 76 0171*       bit sprite_alive,(ix+sprite_collisions)
047214 28 07       0172*       jr z,@found
047216 ED 32 40    0173*       lea ix,ix+table_record_size
047219 10 F5       0174*       djnz @loop
04721B             0175*   @notfound:
04721B AF          0176*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
04721C C9          0177*       ret
04721D             0178*   @found:
04721D             0179*   ; return sprite id
04721D DD 7E 00    0180*       ld a,(ix+sprite_id)
047220 37          0181*       scf ; sets carry flag indicating we found a free sprite
047221 C9          0182*       ret ; done
047222             0183*   ; end table_get_next_id
047222             0184*   
047222             0185*   ; create a new sprite at the same location as an existing sprite
047222             0186*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
047222             0187*   ;         ix = pointer to sprite group, b = number of records in sprite group
047222             0188*   spawn_sprite_from_sprite:
047222 E5          0189*       push hl ; back up pointer to new sprite defaults
047223 CD 10 72 04 0190*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
047227 E1          0191*       pop hl ; restore pointer to new sprite defaults
047228 D0          0192*       ret nc ; no carry means no free sprite slots, so we go home
047229             0193*   ; copy default settings to new sprite
047229 DD E5       0194*       push ix ; back up pointer to new sprite record
04722B ED 32 16    0195*       lea ix,ix+sprite_definitions ; bump pointer to copy to
04722E DD E5       0196*       push ix ; pointer to default sprite settings
047230 D1          0197*       pop de ; address to copy to
047231 01 2A 00 00 0198*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
047235 ED B0       0199*       ldir ; copies defaults to new sprite record
047237 DD E1       0200*       pop ix ; restore pointer to new sprite record
047239             0201*   ; copy sprite position from existing sprite
047239 FD 2A 65 71 0202*       ld iy,(table_pointer) ; get existing sprite record
       04          
04723E FD 27 01    0203*       ld hl,(iy+sprite_x)
047241 DD 2F 01    0204*       ld (ix+sprite_x),hl
047244 FD 27 04    0205*       ld hl,(iy+sprite_y)
047247 DD 2F 04    0206*       ld (ix+sprite_y),hl
04724A             0207*   ; return to caller
04724A DD CB 16 FE 0208*       set 7,(ix+sprite_type) ; set just spawned flag
04724E DD CB 1D F6 0209*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
047252 37          0210*       scf ; set carry flag to indicate success
047253 C9          0211*       ret
047254             0212*   ; end spawn_sprite_from_sprite
047254             0213*   
047254             0214*   ; call the behavior subroutines for a specified sprite group
047254             0215*   ; inputs: iy = pointer to sprite group, b = number of records in sprite group
047254             0216*   move_sprite_group:
047254 C5          0217*       push bc ; backup loop counter
047255 FD E5       0218*       push iy ; backup table pointer
047257             0219*   @move_loop:
047257 FD 22 65 71 0220*       ld (table_pointer),iy ; update table pointer
       04          
04725C C5          0221*       push bc ; backup loop counter
04725D             0222*   ; check top bit of sprite_type to see if sprite is just spawned
04725D FD CB 16 7E 0223*       bit 7,(iy+sprite_type)
047261 C2 96 72 04 0224*       jp nz,@next_record ; if just spawned, skip to next record
047265             0225*   ; check sprite_just_died bit
047265 FD CB 1D 7E 0226*       bit sprite_just_died,(iy+sprite_collisions)
047269 C2 CD 72 04 0227*       jp nz,@sprite_died ; if just died, deactivate sprite
04726D             0228*   ; check sprite_alive bit to see if sprite is active
04726D FD CB 1D 76 0229*       bit sprite_alive,(iy+sprite_collisions)
047271 CA 96 72 04 0230*       jp z,@next_record ; ... skip to next record
047275             0231*   ; otherwise move the sprite
047275 FD 27 1A    0232*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
047278             0233*       CALL_HL ; run the behavior subroutine
047278 01 7E 72 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
04727C C5          0002*M1     push bc ; which constitutes the return address
04727D E9          0003*M1     jp (hl) ; Jump to the address in HL
04727E FD 7E 00    0234*       ld a,(iy+sprite_id) ; get spriteId
047281 CD 00 20 04 0235*       call vdu_sprite_select ; select sprite
047285 FD 7E 28    0236*       ld a,(iy+sprite_frame)
047288 CD 63 20 04 0237*       call vdu_sprite_select_frame
04728C FD 07 01    0238*       ld bc,(iy+sprite_x)
04728F FD 17 04    0239*       ld de,(iy+sprite_y)
047292 CD CC 20 04 0240*       call vdu_sprite_move_abs168
047296             0241*   ; fall through to @next_record
047296             0242*   @next_record:
047296 ED 33 40    0243*       lea iy,iy+table_record_size
047299 AF          0244*       xor a ; clears carry flag
04729A 32 68 71 04 0245*       ld (sprite_screen_edge),a ; clear screen edge collision flag
04729E C1          0246*       pop bc ; get back our loop counter
04729F 10 B6       0247*       djnz @move_loop ; loop until we've checked all the records
0472A1             0248*   ; reset all just spawned flags
0472A1 FD E1       0249*       pop iy ; get back table pointer
0472A3 C1          0250*       pop bc ; get back loop counter
0472A4             0251*   @reset_just_spawned:
0472A4 C5          0252*       push bc ; back up loop counter
0472A5 FD CB 16 7E 0253*       bit 7,(iy+sprite_type) ; check if just spawned
0472A9 CA C6 72 04 0254*       jp z,@F
0472AD FD CB 16 BE 0255*       res 7,(iy+sprite_type) ; clear just spawned flag
0472B1 FD 7E 00    0256*       ld a,(iy+sprite_id)
0472B4 CD 00 20 04 0257*       call vdu_sprite_select
0472B8 FD 07 01    0258*       ld bc,(iy+sprite_x)
0472BB FD 17 04    0259*       ld de,(iy+sprite_y)
0472BE CD CC 20 04 0260*       call vdu_sprite_move_abs168
0472C2 CD 76 20 04 0261*       call vdu_sprite_show
0472C6             0262*   @@:
0472C6 ED 33 40    0263*       lea iy,iy+table_record_size
0472C9 C1          0264*       pop bc ; get back loop counter
0472CA 10 D8       0265*       djnz @reset_just_spawned
0472CC C9          0266*       ret
0472CD             0267*   @sprite_died:
0472CD CD AE 71 04 0268*       call table_deactivate_sprite
0472D1 C3 96 72 04 0269*       jp @next_record
0472D5             0270*   ; end move_sprite_group
0472D5             0271*   
0472D5             0272*   ; compute a sprite's new position based on its component x,y velocities
0472D5             0273*   ; with screen boundary checking and update its sprite table record accordingly
0472D5             0274*   ; inputs: table_pointer set to sprite record
0472D5             0275*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
0472D5             0276*   ; destroys: everything
0472D5             0277*   ; note: actual rendering of sprite must be handled by caller
0472D5             0278*   move_sprite:
0472D5 FD 2A 65 71 0279*       ld iy,(table_pointer)
       04          
0472DA             0280*   ; x-axis movement
0472DA FD 27 01    0281*       ld hl,(iy+sprite_x)
0472DD FD 17 07    0282*       ld de,(iy+sprite_xvel)
0472E0 19          0283*       add hl,de
0472E1 FD 2F 01    0284*       ld (iy+sprite_x),hl
0472E4             0285*   ; y-axis movement
0472E4 FD 27 04    0286*       ld hl,(iy+sprite_y)
0472E7 FD 17 0A    0287*       ld de,(iy+sprite_yvel)
0472EA 19          0288*       add hl,de
0472EB FD 2F 04    0289*       ld (iy+sprite_y),hl
0472EE             0290*   ; detect screen edge collisions
0472EE AF          0291*       xor a ; reset screen edge collision flag and clear carry
0472EF 32 68 71 04 0292*       ld (sprite_screen_edge),a
0472F3             0293*   ; y-axis first since we already have it in hl
0472F3 11 00 00 00 0294*       ld de,-sprite_top*256
0472F7 ED 5A       0295*       adc hl,de
0472F9 FA 23 73 04 0296*       jp m,@top
0472FD ED 52       0297*       sbc hl,de ; hl back to original value
0472FF 11 00 91 FE 0298*       ld de,-sprite_bottom*256
047303 ED 5A       0299*       adc hl,de
047305 F2 2D 73 04 0300*       jp p,@bottom
047309             0301*   @xaxis:
047309 FD 27 01    0302*       ld hl,(iy+sprite_x)
04730C 11 00 00 00 0303*       ld de,-sprite_left*256
047310 ED 5A       0304*       adc hl,de
047312 FA 48 73 04 0305*       jp m,@left
047316 ED 52       0306*       sbc hl,de ; hl back to original value
047318 11 00 11 FF 0307*       ld de,-sprite_right*256
04731C ED 5A       0308*       adc hl,de
04731E F2 56 73 04 0309*       jp p,@right
047322             0310*   ; no edge collisions so go home
047322 C9          0311*       ret
047323             0312*   @top:
047323 3E 08       0313*       ld a,collide_top
047325 21 00 00 00 0314*       ld hl,sprite_top*256
047329 C3 33 73 04 0315*       jp @collide_y
04732D             0316*   @bottom:
04732D 3E 04       0317*       ld a,collide_bottom
04732F 21 00 6F 01 0318*       ld hl,sprite_bottom*256
047333             0319*   @collide_y:
047333 32 68 71 04 0320*       ld (sprite_screen_edge),a
047337 FD 2F 04    0321*       ld (iy+sprite_y),hl
04733A             0322*   ; reverse y-axis velocity
04733A FD 27 0A    0323*       ld hl,(iy+sprite_yvel)
04733D CD 16 09 04 0324*       call neg_hlu
047341 FD 2F 0A    0325*       ld (iy+sprite_yvel),hl
047344             0326*   ; go check for x-axis collisions
047344 C3 09 73 04 0327*       jp @xaxis
047348             0328*   @left:
047348 3A 68 71 04 0329*       ld a,(sprite_screen_edge)
04734C F6 02       0330*       or a,collide_left
04734E 21 00 00 00 0331*       ld hl,sprite_left*256
047352 C3 60 73 04 0332*       jp @collide_x
047356             0333*   @right:
047356 3A 68 71 04 0334*       ld a,(sprite_screen_edge)
04735A F6 01       0335*       or a,collide_right
04735C 21 00 EF 00 0336*       ld hl,sprite_right*256
047360             0337*   @collide_x:
047360 32 68 71 04 0338*       ld (sprite_screen_edge),a
047364 FD 2F 01    0339*       ld (iy+sprite_x),hl
047367             0340*   ; reverse x-axis velocity
047367 FD 27 07    0341*       ld hl,(iy+sprite_xvel)
04736A CD 16 09 04 0342*       call neg_hlu
04736E FD 2F 07    0343*       ld (iy+sprite_xvel),hl
047371             0344*   ; final collision flag to a and return
047371 3A 68 71 04 0345*       ld a,(sprite_screen_edge)
047375 C9          0346*       ret
047376             0347*   ; end move_sprite
047376             0348*   
047376             0349*   sprite_compute_velocities:
047376 FD 27 10    0350*       ld hl,(iy+sprite_heading)
047379 FD 17 0D    0351*       ld de,(iy+sprite_vel)
04737C CD A0 0B 04 0352*       call polar_to_cartesian
047380 FD 2A 65 71 0353*       ld iy,(table_pointer)
       04          
047385 FD 0F 07    0354*       ld (iy+sprite_xvel),bc ; save x-velocity component
047388 FD 1F 0A    0355*       ld (iy+sprite_yvel),de ; save y-velocity component
04738B C9          0356*       ret
04738C             0357*   ; end sprite_compute_velocities
04738C             0358*   
04738C             0359*   ; compute animation frame based on sprite_animation and sprite_heading
04738C             0360*   ; inputs: table_pointer set to sprite record
04738C             0361*   ; outputs: a, sprite_frame set to animation frame
04738C             0362*   ; destroys: a,hl
04738C             0363*   sprite_frame_heading_animation:
04738C FD 7E 11    0364*       ld a,(iy+sprite_heading+1) ; we want the integer portion
04738F CB 3F       0365*       srl a ; divide integer portion by 8
047391 CB 3F       0366*       srl a
047393 CB 3F       0367*       srl a
047395 FD 66 22    0368*       ld h,(iy+sprite_animation)
047398 2E 20       0369*       ld l,32 ; 32 orientation frames per animation
04739A ED 6C       0370*       mlt hl ; hl = offset from base animation
04739C 85          0371*       add a,l ; modulo256 since sprite_frame is only 1 byte
04739D FD 77 28    0372*       ld (iy+sprite_frame),a
0473A0 C9          0373*       ret
0473A1             0374*   ; end sprite_frame_heading_animation
0473A1             0375*   
0473A1             0376*   ; compute animation frame based on sprite_heading
0473A1             0377*   ; inputs: table_pointer set to sprite record
0473A1             0378*   ; outputs: a, sprite_frame set to animation frame
0473A1             0379*   ; destroys: a,hl
0473A1             0380*   sprite_frame_heading:
0473A1 FD 7E 11    0381*       ld a,(iy+sprite_heading+1) ; we want the integer portion
0473A4 CB 3F       0382*       srl a ; divide integer portion by 8
0473A6 CB 3F       0383*       srl a
0473A8 CB 3F       0384*       srl a
0473AA FD 77 28    0385*       ld (iy+sprite_frame),a
0473AD C9          0386*       ret
0473AE             0387*   ; end sprite_frame_heading
0473AE             0388*   
0473AE             0389*   ; load a sprite with animation bitmaps
0473AE             0390*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
0473AE             0391*   sprite_load_frames:
0473AE             0392*   ; back up input parameters
0473AE E5          0393*       push hl ; base bufferId
0473AF C5          0394*       push bc ; bc = number of frames
0473B0 CD 13 20 04 0395*       call vdu_sprite_clear_frames
0473B4 C1          0396*       pop bc ; bc = number of frames
0473B5 E1          0397*       pop hl ; = base bufferId
0473B6             0398*   @load_frames:
0473B6 C5          0399*       push bc ; back up loop counter
0473B7 E5          0400*       push hl ; back up base bufferId
0473B8 CD 55 21 04 0401*       call vdu_sprite_add_buff
0473BC E1          0402*       pop hl ; restore base bufferId
0473BD 23          0403*       inc hl ; bump it to the next frame
0473BE             0404*   ; decrement loop counter
0473BE C1          0405*       pop bc
0473BF 0B          0406*       dec bc
0473C0 79          0407*       ld a,c
0473C1 B7          0408*       or a
0473C2 C2 B6 73 04 0409*       jp nz,@load_frames
0473C6 78          0410*       ld a,b
0473C7 B7          0411*       or a
0473C8 C2 B6 73 04 0412*       jp nz,@load_frames
0473CC C9          0413*       ret
0473CD             0414*   ; end sprite_load_frames
0473CD             0415*   
0473CD             0416*   
0473CD             0417*   
0473CD             0418*   
0473CD             0419*   dump_sprite_record:
0473CD             0420*       ; call vdu_home_cursor
0473CD CD 00 01 04 0421*       call printInline
0473D1 69 64 20 20 0422*       asciz "id  : "
       3A 20 00    
0473D8 DD 7E 00    0423*       ld a,(ix+sprite_id)
0473DB CD 4A 01 04 0424*       call printHexA
0473DF             0425*   
0473DF CD 00 01 04 0426*       call printInline
0473E3 0D 0A 78 20 0427*       asciz "\r\nx   :"
       20 20 3A 00 
0473EB DD 27 01    0428*       ld hl,(ix+sprite_x)
0473EE CD 2B 03 04 0429*       call print_s168_hl
0473F2             0430*   
0473F2 CD 00 01 04 0431*       call printInline
0473F6 0D 0A 79 20 0432*       asciz "\r\ny   :"
       20 20 3A 00 
0473FE DD 27 04    0433*       ld hl,(ix+sprite_y)
047401 CD 2B 03 04 0434*       call print_s168_hl
047405             0435*   
047405 CD 00 01 04 0436*       call printInline
047409 0D 0A 78 76 0437*       asciz "\r\nxv  :"
       20 20 3A 00 
047411 DD 27 07    0438*       ld hl,(ix+sprite_xvel)
047414 CD 2B 03 04 0439*       call print_s168_hl
047418             0440*   
047418 CD 00 01 04 0441*       call printInline
04741C 0D 0A 79 76 0442*       asciz "\r\nyv  :"
       20 20 3A 00 
047424 DD 27 0A    0443*       ld hl,(ix+sprite_yvel)
047427 CD 2B 03 04 0444*       call print_s168_hl
04742B             0445*   
04742B CD 00 01 04 0446*       call printInline
04742F 0D 0A 76 20 0447*       asciz "\r\nv   :"
       20 20 3A 00 
047437 DD 27 0D    0448*       ld hl,(ix+sprite_vel)
04743A CD 2B 03 04 0449*       call print_s168_hl
04743E             0450*   
04743E CD 00 01 04 0451*       call printInline
047442 0D 0A 68 64 0452*       asciz "\r\nhdg :"
       67 20 3A 00 
04744A DD 27 10    0453*       ld hl,(ix+sprite_heading)
04744D CD 2B 03 04 0454*       call print_s168_hl
047451             0455*   
047451 CD 00 01 04 0456*       call printInline
047455 0D 0A 6F 72 0457*       asciz "\r\nori :"
       69 20 3A 00 
04745D DD 27 13    0458*       ld hl,(ix+sprite_orientation)
047460 CD 2B 03 04 0459*       call print_s168_hl
047464             0460*   
047464 CD 00 01 04 0461*       call printInline
047468 0D 0A 74 79 0462*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
047471 DD 7E 16    0463*       ld a,(ix+sprite_type)
047474 CD 4A 01 04 0464*       call printHexA
047478             0465*   
047478 CD 00 01 04 0466*       call printInline
04747C 0D 0A 42 49 0467*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
047485 DD 27 17    0468*       ld hl,(ix+sprite_base_bufferId)
047488 CD 27 01 04 0469*       call printHex24
04748C             0470*   
04748C CD 00 01 04 0471*       call printInline
047490 0D 0A 6D 50 0472*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
047499 DD 27 1A    0473*       ld hl,(ix+sprite_move_program)
04749C CD 27 01 04 0474*       call printHex24
0474A0             0475*   
0474A0 CD 00 01 04 0476*       call printInline
0474A4 0D 0A 63 6F 0477*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
0474AD DD 7E 1D    0478*       ld a,(ix+sprite_collisions)
0474B0 CD A8 03 04 0479*       call printBin8
0474B4             0480*   
0474B4 CD 00 01 04 0481*       call printInline
0474B8 0D 0A 73 7A 0482*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
0474C1 DD 7E 1E    0483*       ld a,(ix+sprite_dim_x)
0474C4 CD 4A 01 04 0484*       call printHexA
0474C8             0485*   
0474C8 CD 00 01 04 0486*       call printInline
0474CC 0D 0A 73 7A 0487*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
0474D5 DD 7E 1F    0488*       ld a,(ix+sprite_dim_y)
0474D8 CD 4A 01 04 0489*       call printHexA
0474DC             0490*   
0474DC             0491*       ; call printInline
0474DC             0492*       ; asciz "\r\n#ori: "
0474DC             0493*       ; ld a,(ix+sprite_num_orientations)
0474DC             0494*       ; call printHexA
0474DC             0495*   
0474DC             0496*       ; call printInline
0474DC             0497*       ; asciz "\r\n#ani: "
0474DC             0498*       ; ld a,(ix+sprite_num_animations)
0474DC             0499*       ; call printHexA
0474DC             0500*   
0474DC             0501*       ; call printInline
0474DC             0502*       ; asciz "\r\nani : "
0474DC             0503*       ; ld a,(ix+sprite_animation)
0474DC             0504*       ; call printHexA
0474DC             0505*   
0474DC             0506*       ; call printInline
0474DC             0507*       ; asciz "\r\nanit: "
0474DC             0508*       ; ld a,(ix+sprite_animation_timer)
0474DC             0509*       ; call printHexA
0474DC             0510*   
0474DC             0511*       ; call printInline
0474DC             0512*       ; asciz "\r\nmvt : "
0474DC             0513*       ; ld a,(ix+sprite_move_timer)
0474DC             0514*       ; call printHexA
0474DC             0515*   
0474DC             0516*       ; call printInline
0474DC             0517*       ; asciz "\r\nmvs : "
0474DC             0518*       ; ld a,(ix+sprite_move_step)
0474DC             0519*       ; call printHexA
0474DC             0520*   
0474DC             0521*       ; call printInline
0474DC             0522*       ; asciz "\r\npts : "
0474DC             0523*       ; ld a,(ix+sprite_points)
0474DC             0524*       ; call printHexA
0474DC             0525*   
0474DC             0526*       ; call printInline
0474DC             0527*       ; asciz "\r\ndmg : "
0474DC             0528*       ; ld a,(ix+sprite_shield_damage)
0474DC             0529*       ; call printHexA
0474DC             0530*   
0474DC             0531*       ; call printInline
0474DC             0532*       ; asciz "\r\nfrm : "
0474DC             0533*       ; ld a,(ix+sprite_frame)
0474DC             0534*       ; call printHexA
0474DC             0535*   
0474DC             0536*       ; call printNewLine
0474DC             0537*   
0474DC             0538*       ; call waitKeypress
0474DC C9          0539*       ret
0474DD             0540*   
0474DD             0070    
0474DD FF FF FF FF 0071        align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
047500             0072    
047500             0073    ; --- MAIN PROGRAM FILE ---
047500 57 65 6C 63 0074    hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
04751B 4C 6F 61 64 0075    loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
047529 50 72 65 73 0076    loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
047544             0077    
047544             0078    init:
047544             0079    ; clear all buffers
047544 CD 2A 1C 04 0080        call vdu_clear_all_buffers
047548             0081    
047548             0082    ; print loading ui message
047548 CD 4B 1A 04 0083        call vdu_cls
04754C 21 6A 21 04 0084        ld hl,loading_ui
047550 CD 07 01 04 0085        call printString
047554 CD 50 1A 04 0086        call vdu_flip
047558             0087    ; load UI images
047558 CD CE 16 04 0088        call load_ui_images
04755C             0089    
04755C             0090    ; set up the display
04755C 3E 88       0091        ld a,8+128 ; 136   320   240   64    60hz double-buffered
04755E             0092        ; ld a,20 ;  512   384   64    60hz single-buffered
04755E CD 14 1B 04 0093        call vdu_set_screen_mode
047562 AF          0094        xor a
047563 CD 25 1B 04 0095        call vdu_set_scaling
047567             0096    
047567             0097    ; ; enable additional audio channels
047567             0098    ; 	call vdu_enable_channels
047567             0099    
047567             0100    ; set text background color
047567 3E 9A       0101        ld a,26+128 ; violet
047569 CD 7C 1A 04 0102        call vdu_colour_text
04756D             0103    
04756D             0104    ; set text foreground color
04756D 3E 2F       0105        ld a,47 ; aaaaff lavenderish
04756F CD 7C 1A 04 0106        call vdu_colour_text
047573             0107    
047573             0108    ; set gfx bg color
047573 AF          0109        xor a ; plotting mode 0
047574 3E 9A       0110        ld a,26+128 ; violet
047576 CD 8D 1A 04 0111        call vdu_gcol
04757A CD 4B 1A 04 0112        call vdu_cls
04757E             0113    
04757E             0114    ; set the cursor off
04757E CD 13 1A 04 0115        call vdu_cursor_off
047582             0116    
047582             0117    ; VDU 28, left, bottom, right, top: Set text viewport **
047582             0118    ; MIND THE LITTLE-ENDIANESS
047582             0119    ; inputs: c=left,b=bottom,e=right,d=top
047582 0E 00       0120        ld c,0 ; left
047584 16 00       0121        ld d,0 ; top
047586 1E 27       0122        ld e,39 ; right
047588 06 00       0123        ld b,0; bottom
04758A CD A4 1A 04 0124        call vdu_set_txt_viewport
04758E             0125    
04758E             0126    ; load sprites
04758E CD 09 16 04 0127        call img_load_init ; sets up the animated load screen
047592 CD E1 16 04 0128        call load_sprite_images
047596             0129    
047596             0130    ; load tileset_ptrs
047596 CD F2 16 04 0131        call load_tilesets
04759A             0132    
04759A             0133    ; ; load sound effects ; TODO
04759A             0134    ; 	ld bc,SFX_num_buffers
04759A             0135    ; 	ld hl,SFX_buffer_id_lut
04759A             0136    ; 	ld (cur_buffer_id_lut),hl
04759A             0137    ; 	ld hl,SFX_load_routines_table
04759A             0138    ; 	ld (cur_load_jump_table),hl
04759A             0139    ; 	call sfx_load_main
04759A             0140    
04759A             0141    ; print loading complete message and wait for user keypress
04759A CD 4B 1A 04 0142        call vdu_cls
04759E 21 29 75 04 0143        ld hl,loading_complete
0475A2 CD 07 01 04 0144        call printString
0475A6 CD 50 1A 04 0145        call vdu_flip
0475AA CD B8 06 04 0146        call waitKeypress
0475AE             0147    
0475AE             0148    ; set up display for gameplay
0475AE             0149        ; ld a,8
0475AE 3E 14       0150        ld a,20
0475B0 CD 14 1B 04 0151        call vdu_set_screen_mode
0475B4 AF          0152        xor a
0475B5 CD 25 1B 04 0153        call vdu_set_scaling
0475B9 CD 13 1A 04 0154        call vdu_cursor_off
0475BD             0155    ; load fonts
0475BD CD 00 15 04 0156    	call fonts_load
0475C1             0157    ; select font
0475C1             0158        ; ld hl,computer_pixel_7_8x16
0475C1 21 02 FA 00 0159        ld hl,amiga_forever_8x8 ; DEBUG
0475C5 3E 01       0160        ld a,1 ; flags
0475C7 CD 00 1E 04 0161        call vdu_font_select
0475CB             0162    ; plot bezel art
0475CB 21 00 00 00 0163        ld hl,BUF_BEZEL_L
0475CF CD 38 1B 04 0164        call vdu_buff_select
0475D3 01 00 00 00 0165        ld bc,0
0475D7 11 00 00 00 0166        ld de,0
0475DB CD 20 1F 04 0167        call vdu_plot_bmp
0475DF 21 01 00 00 0168        ld hl,BUF_BEZEL_R
0475E3 CD 38 1B 04 0169        call vdu_buff_select
0475E7 01 80 01 00 0170        ld bc,384
0475EB 11 00 00 00 0171        ld de,0
0475EF CD 20 1F 04 0172        call vdu_plot_bmp
0475F3             0173    ; draw player cockpit
0475F3 CD B0 62 04 0174        call draw_player_cockpit
0475F7 DD 21 E7 62 0175        ld ix,mfd_display_l
       04          
0475FC CD F6 62 04 0176        call mfd_activate
047600 CD 01 63 04 0177        call mfd_init
047604             0178    ; set gfx origin and viewport to playing field window
047604 01 80 00 00 0179        ld bc,origin_left
047608 11 00 00 00 0180        ld de,origin_top
04760C CD D0 1A 04 0181        call vdu_set_gfx_origin
047610 01 00 00 00 0182        ld bc,field_left
047614 11 00 00 00 0183        ld de,field_top
047618 DD 21 FF 00 0184        ld ix,field_right
       00          
04761D FD 21 7F 01 0185        ld iy,field_bottom
       00          
047622 CD EB 1A 04 0186        call vdu_set_gfx_viewport
047626             0187    ; set background color
047626 3E 9A       0188        ld a,26+128 ; violet
047628 CD 8D 1A 04 0189        call vdu_gcol
04762C CD 5E 1A 04 0190        call vdu_clg
047630             0191    ; VDU 28, left, bottom, right, top: Set text viewport **
047630 0E 00       0192        ld c,0 ; left
047632 16 00       0193        ld d,0 ; top
047634 1E 3E       0194        ld e,62 ; right
047636 06 30       0195        ld b,48; bottom
047638 CD A4 1A 04 0196        call vdu_set_txt_viewport
04763C             0197    
04763C             0198    ; initialize the global timestamp
04763C CD F9 18 04 0199        call timestamp_tick
047640             0200    
047640             0201    ; done with init
047640 C9          0202        ret
047641             0203    
047641             0204    main:
047641             0205    ; start a new game
047641 CD 17 65 04 0206        call game_initialize
047645             0207    
047645             0208        ; ld iy,tmr_test
047645             0209        ; ld hl,2400 ; 20 seconds
047645             0210        ; call tmr_set
047645             0211        ; ld hl,0 ; counter
047645             0212        ; call vdu_vblank
047645             0213    
047645             0214    main_loop:
047645             0215        ; inc hl ; increment counter
047645             0216        ; push hl ; save counter
047645             0217    
047645             0218    ; update the global timestamp
047645 CD F9 18 04 0219        call timestamp_tick
047649             0220    ; do gamestate logic
047649 CD 03 65 04 0221        call do_game
04764D             0222    
04764D             0223    ; ; DEBUG
04764D             0224    ;     CALL DEBUG_PRINT
04764D             0225    ;     ; CALL DEBUG_DUMP_PLAYER_RECORD
04764D             0226    ;     CALL DEBUG_PRINT_TILE_TABLE
04764D             0227    ;     CALL DEBUG_PRINT_TILE_STACK
04764D             0228    ;     ; CALL DEBUG_WAITKEYPRESS
04764D             0229    ; ; END DEBUG
04764D             0230    
04764D             0231    ; wait for the next vblank mitigate flicker and for loop timing
04764D CD BF 1A 04 0232        call vdu_vblank
047651             0233        ; call vdu_vblank ; DEBUG
047651             0234        ; call vdu_vblank ; DEBUG
047651             0235    
047651             0236    ; poll keyboard for escape keypress
047651 3E 08       0237        ld a, $08 ; code to send to MOS
047653 5B CF       0238        rst.lil $08 ; get IX pointer to System Variables
047655 DD 7E 05    0239        ld a, (ix + $05) ; get ASCII code of key pressed
047658 FE 1B       0240        cp 27 ; check if 27 (ascii code for ESC)
04765A CA 62 76 04 0241        jp z, main_end ; if pressed, jump to exit
04765E             0242    
04765E             0243    ; escape not pressed so loop
04765E             0244        ; ld iy,tmr_test
04765E             0245        ; call tmr_get
04765E             0246        ; pop hl ; restore counter
04765E             0247        ; jp m,main_end ; if timer expired, jump to exit
04765E C3 45 76 04 0248        jp main_loop
047662             0249    
047662             0250    main_end:
047662             0251        ; call printDec
047662 CD 05 1A 04 0252        call vdu_cursor_on
047666 C9          0253        ret
047667             0254    
047667             0255    DEBUG_PRINT:
047667             0256        PUSH_ALL
047667 08          0001M1      ex af,af'
047668 D9          0002M1      exx
047669 F5          0003M1      push af
04766A E5          0004M1      push hl
04766B C5          0005M1      push bc
04766C D5          0006M1      push de
04766D             0007M1  
04766D 08          0008M1      ex af,af'
04766E D9          0009M1      exx
04766F F5          0010M1      push af
047670 E5          0011M1      push hl
047671 C5          0012M1      push bc
047672 D5          0013M1      push de
047673 DD E5       0014M1      push ix
047675 FD E5       0015M1      push iy
047677 0E 00       0257        ld c,0 ; X
047679 06 00       0258        ld b,0 ; Y
04767B CD 37 1A 04 0259        call vdu_move_cursor
04767F             0260        POP_ALL
04767F FD E1       0001M1      pop iy
047681 DD E1       0002M1      pop ix
047683 D1          0003M1      pop de
047684 C1          0004M1      pop bc
047685 E1          0005M1      pop hl
047686 F1          0006M1      pop af
047687 08          0007M1      ex af,af'
047688 D9          0008M1      exx
047689             0009M1  
047689 D1          0010M1      pop de
04768A C1          0011M1      pop bc
04768B E1          0012M1      pop hl
04768C F1          0013M1      pop af
04768D 08          0014M1      ex af,af'
04768E D9          0015M1      exx
04768F             0261        PUSH_ALL
04768F 08          0001M1      ex af,af'
047690 D9          0002M1      exx
047691 F5          0003M1      push af
047692 E5          0004M1      push hl
047693 C5          0005M1      push bc
047694 D5          0006M1      push de
047695             0007M1  
047695 08          0008M1      ex af,af'
047696 D9          0009M1      exx
047697 F5          0010M1      push af
047698 E5          0011M1      push hl
047699 C5          0012M1      push bc
04769A D5          0013M1      push de
04769B DD E5       0014M1      push ix
04769D FD E5       0015M1      push iy
04769F CD 57 06 04 0262        call dumpFlags
0476A3             0263        POP_ALL
0476A3 FD E1       0001M1      pop iy
0476A5 DD E1       0002M1      pop ix
0476A7 D1          0003M1      pop de
0476A8 C1          0004M1      pop bc
0476A9 E1          0005M1      pop hl
0476AA F1          0006M1      pop af
0476AB 08          0007M1      ex af,af'
0476AC D9          0008M1      exx
0476AD             0009M1  
0476AD D1          0010M1      pop de
0476AE C1          0011M1      pop bc
0476AF E1          0012M1      pop hl
0476B0 F1          0013M1      pop af
0476B1 08          0014M1      ex af,af'
0476B2 D9          0015M1      exx
0476B3             0264        PUSH_ALL
0476B3 08          0001M1      ex af,af'
0476B4 D9          0002M1      exx
0476B5 F5          0003M1      push af
0476B6 E5          0004M1      push hl
0476B7 C5          0005M1      push bc
0476B8 D5          0006M1      push de
0476B9             0007M1  
0476B9 08          0008M1      ex af,af'
0476BA D9          0009M1      exx
0476BB F5          0010M1      push af
0476BC E5          0011M1      push hl
0476BD C5          0012M1      push bc
0476BE D5          0013M1      push de
0476BF DD E5       0014M1      push ix
0476C1 FD E5       0015M1      push iy
0476C3 CD B9 04 04 0265        call dumpRegistersHex
0476C7             0266        ; call waitKeypress
0476C7             0267        POP_ALL
0476C7 FD E1       0001M1      pop iy
0476C9 DD E1       0002M1      pop ix
0476CB D1          0003M1      pop de
0476CC C1          0004M1      pop bc
0476CD E1          0005M1      pop hl
0476CE F1          0006M1      pop af
0476CF 08          0007M1      ex af,af'
0476D0 D9          0008M1      exx
0476D1             0009M1  
0476D1 D1          0010M1      pop de
0476D2 C1          0011M1      pop bc
0476D3 E1          0012M1      pop hl
0476D4 F1          0013M1      pop af
0476D5 08          0014M1      ex af,af'
0476D6 D9          0015M1      exx
0476D7 C9          0268        ret
0476D8             0269    
0476D8             0270    DEBUG_PRINT_TILE_TABLE:
0476D8             0271        PUSH_ALL
0476D8 08          0001M1      ex af,af'
0476D9 D9          0002M1      exx
0476DA F5          0003M1      push af
0476DB E5          0004M1      push hl
0476DC C5          0005M1      push bc
0476DD D5          0006M1      push de
0476DE             0007M1  
0476DE 08          0008M1      ex af,af'
0476DF D9          0009M1      exx
0476E0 F5          0010M1      push af
0476E1 E5          0011M1      push hl
0476E2 C5          0012M1      push bc
0476E3 D5          0013M1      push de
0476E4 DD E5       0014M1      push ix
0476E6 FD E5       0015M1      push iy
0476E8 CD 1C 01 04 0272        call printNewLine
0476EC DD 21 00 68 0273        ld ix,tile_stack
       04          
0476F1 DD 37 00    0274        ld ix,(ix)
0476F4 CD 21 6C 04 0275        call dump_tile_record
0476F8 CD 1C 01 04 0276        call printNewLine
0476FC             0277        POP_ALL
0476FC FD E1       0001M1      pop iy
0476FE DD E1       0002M1      pop ix
047700 D1          0003M1      pop de
047701 C1          0004M1      pop bc
047702 E1          0005M1      pop hl
047703 F1          0006M1      pop af
047704 08          0007M1      ex af,af'
047705 D9          0008M1      exx
047706             0009M1  
047706 D1          0010M1      pop de
047707 C1          0011M1      pop bc
047708 E1          0012M1      pop hl
047709 F1          0013M1      pop af
04770A 08          0014M1      ex af,af'
04770B D9          0015M1      exx
04770C C9          0278        ret
04770D             0279    ; end DEBUG_PRINT_TILE_TABLE
04770D             0280    
04770D             0281    DEBUG_PRINT_TABLE:
04770D             0282        PUSH_ALL
04770D 08          0001M1      ex af,af'
04770E D9          0002M1      exx
04770F F5          0003M1      push af
047710 E5          0004M1      push hl
047711 C5          0005M1      push bc
047712 D5          0006M1      push de
047713             0007M1  
047713 08          0008M1      ex af,af'
047714 D9          0009M1      exx
047715 F5          0010M1      push af
047716 E5          0011M1      push hl
047717 C5          0012M1      push bc
047718 D5          0013M1      push de
047719 DD E5       0014M1      push ix
04771B FD E5       0015M1      push iy
04771D CD 1C 01 04 0283        call printNewLine
047721 CD CD 73 04 0284        call dump_sprite_record
047725 CD 1C 01 04 0285        call printNewLine
047729 CD 1C 01 04 0286        call printNewLine
04772D             0287    
04772D FD E5       0288        push iy
04772F DD E1       0289        pop ix
047731 CD CD 73 04 0290        call dump_sprite_record
047735 CD 1C 01 04 0291        call printNewLine
047739 CD 1C 01 04 0292        call printNewLine
04773D             0293        POP_ALL
04773D FD E1       0001M1      pop iy
04773F DD E1       0002M1      pop ix
047741 D1          0003M1      pop de
047742 C1          0004M1      pop bc
047743 E1          0005M1      pop hl
047744 F1          0006M1      pop af
047745 08          0007M1      ex af,af'
047746 D9          0008M1      exx
047747             0009M1  
047747 D1          0010M1      pop de
047748 C1          0011M1      pop bc
047749 E1          0012M1      pop hl
04774A F1          0013M1      pop af
04774B 08          0014M1      ex af,af'
04774C D9          0015M1      exx
04774D C9          0294        RET
04774E             0295    
04774E             0296    DEBUG_WAITKEYPRESS:
04774E             0297        PUSH_ALL
04774E 08          0001M1      ex af,af'
04774F D9          0002M1      exx
047750 F5          0003M1      push af
047751 E5          0004M1      push hl
047752 C5          0005M1      push bc
047753 D5          0006M1      push de
047754             0007M1  
047754 08          0008M1      ex af,af'
047755 D9          0009M1      exx
047756 F5          0010M1      push af
047757 E5          0011M1      push hl
047758 C5          0012M1      push bc
047759 D5          0013M1      push de
04775A DD E5       0014M1      push ix
04775C FD E5       0015M1      push iy
04775E CD B8 06 04 0298        call waitKeypress
047762             0299        POP_ALL
047762 FD E1       0001M1      pop iy
047764 DD E1       0002M1      pop ix
047766 D1          0003M1      pop de
047767 C1          0004M1      pop bc
047768 E1          0005M1      pop hl
047769 F1          0006M1      pop af
04776A 08          0007M1      ex af,af'
04776B D9          0008M1      exx
04776C             0009M1  
04776C D1          0010M1      pop de
04776D C1          0011M1      pop bc
04776E E1          0012M1      pop hl
04776F F1          0013M1      pop af
047770 08          0014M1      ex af,af'
047771 D9          0015M1      exx
047772 C9          0300        RET
047773             0301    
047773             0302    DEBUG_PRINT_FIELDS:
047773             0303        ; PUSH_ALL
047773 01 00 00 00 0304        ld bc,0
047777 4F          0305        ld c,a
047778 DD 21 00 80 0306        ld ix,table_base
       04          
04777D DD 09       0307        add ix,bc
04777F 06 14       0308        ld b,table_num_records
047781             0309    @@:
047781 DD E5       0310        push ix
047783 E1          0311        pop hl
047784 C5          0312        push bc ; save loop counter
047785 3E 01       0313        ld a,1 ; print one byte
047787 CD BD 06 04 0314        call dumpMemoryHex
04778B ED 32 40    0315        lea ix,ix+table_record_size
04778E C1          0316        pop bc ; restore loop counter
04778F 10 F0       0317        djnz @b
047791             0318        ; POP_ALL
047791 C9          0319        ret
047792             0320    
047792             0321    DEBUG_PRINT_TILE_STACK:
047792             0322        PUSH_ALL
047792 08          0001M1      ex af,af'
047793 D9          0002M1      exx
047794 F5          0003M1      push af
047795 E5          0004M1      push hl
047796 C5          0005M1      push bc
047797 D5          0006M1      push de
047798             0007M1  
047798 08          0008M1      ex af,af'
047799 D9          0009M1      exx
04779A F5          0010M1      push af
04779B E5          0011M1      push hl
04779C C5          0012M1      push bc
04779D D5          0013M1      push de
04779E DD E5       0014M1      push ix
0477A0 FD E5       0015M1      push iy
0477A2 CD 1C 01 04 0323        call printNewLine
0477A6 CD 1C 01 04 0324        call printNewLine
0477AA 2A 03 6B 04 0325        ld hl,(tile_stack_pointer)
0477AE CD 64 01 04 0326        call printHexUHL
0477B2 CD 1C 01 04 0327        call printNewLine
0477B6 3A 09 6B 04 0328        ld a,(num_active_tiles)
0477BA CD 4A 01 04 0329        call printHexA
0477BE CD 1C 01 04 0330        call printNewLine
0477C2 DD 21 00 68 0331        ld ix,tile_stack
       04          
0477C7 06 08       0332        ld b,8
0477C9             0333    @loop:
0477C9 C5          0334        push bc
0477CA DD 27 00    0335        ld hl,(ix)
0477CD CD 64 01 04 0336        call printHexUHL
0477D1 CD 1C 01 04 0337        call printNewLine
0477D5 ED 32 03    0338        lea ix,ix+3
0477D8 C1          0339        pop bc
0477D9 10 EE       0340        djnz @loop
0477DB             0341        POP_ALL
0477DB FD E1       0001M1      pop iy
0477DD DD E1       0002M1      pop ix
0477DF D1          0003M1      pop de
0477E0 C1          0004M1      pop bc
0477E1 E1          0005M1      pop hl
0477E2 F1          0006M1      pop af
0477E3 08          0007M1      ex af,af'
0477E4 D9          0008M1      exx
0477E5             0009M1  
0477E5 D1          0010M1      pop de
0477E6 C1          0011M1      pop bc
0477E7 E1          0012M1      pop hl
0477E8 F1          0013M1      pop af
0477E9 08          0014M1      ex af,af'
0477EA D9          0015M1      exx
0477EB C9          0342        ret
0477EC             0343    
0477EC             0344    DEBUG_DUMP_PLAYER_RECORD:
0477EC             0345        PUSH_ALL
0477EC 08          0001M1      ex af,af'
0477ED D9          0002M1      exx
0477EE F5          0003M1      push af
0477EF E5          0004M1      push hl
0477F0 C5          0005M1      push bc
0477F1 D5          0006M1      push de
0477F2             0007M1  
0477F2 08          0008M1      ex af,af'
0477F3 D9          0009M1      exx
0477F4 F5          0010M1      push af
0477F5 E5          0011M1      push hl
0477F6 C5          0012M1      push bc
0477F7 D5          0013M1      push de
0477F8 DD E5       0014M1      push ix
0477FA FD E5       0015M1      push iy
0477FC CD 1C 01 04 0346        call printNewLine
047800 CD 87 61 04 0347        CALL dump_player_record
047804 CD 1C 01 04 0348        call printNewLine
047808             0349        POP_ALL
047808 FD E1       0001M1      pop iy
04780A DD E1       0002M1      pop ix
04780C D1          0003M1      pop de
04780D C1          0004M1      pop bc
04780E E1          0005M1      pop hl
04780F F1          0006M1      pop af
047810 08          0007M1      ex af,af'
047811 D9          0008M1      exx
047812             0009M1  
047812 D1          0010M1      pop de
047813 C1          0011M1      pop bc
047814 E1          0012M1      pop hl
047815 F1          0013M1      pop af
047816 08          0014M1      ex af,af'
047817 D9          0015M1      exx
047818 C9          0350        RET
047819             0351    
047819             0352        include "tables.inc"
047819             0001*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
047819             0002*   ; table_base: equ $
047819             0003*   table_base: equ 0x048000 ; DEBUG
047819             0004*   player_weapons_begin: equ table_base
047819             0005*   player_lasers_begin: equ player_weapons_begin
047819             0006*   player_lasers_end: equ table_record_size*player_lasers_max+player_lasers_begin
047819             0007*   player_weapons_end: equ table_record_size*player_lasers_max+player_weapons_begin
047819             0008*   player_begin: equ player_weapons_end
047819             0009*   player_end: equ table_record_size+player_begin
047819             0010*   enemy_sprites_begin: equ player_end
047819             0011*   seekers_base: equ enemy_sprites_begin
047819             0012*   seekers_end: equ table_record_size*seekers_max+seekers_base
047819             0013*   fireballs_base: equ seekers_end
047819             0014*   fireballs_end: equ table_record_size*fireballs_max+fireballs_base
047819             0015*   enemy_sprites_end: equ fireballs_end
047819             0016*   explosions_base: equ enemy_sprites_end
047819             0017*   explosions_end: equ table_record_size*explosions_max+explosions_base
047819             0018*   table_end: equ explosions_end
047819             0019*   
047819             0020*   table_num_records: equ table_end-table_base/table_record_size
047819             0021*   table_num_enemy_records: equ enemy_sprites_end-enemy_sprites_begin/table_record_size
047819             0022*   ; ### THIS IS THE SPACE ALLOCATED TO THE ACTIVE TILES TABLE ###
047819             0023*   ; tile_table_base: equ table_end
047819             0024*   tile_table_base: equ 0x050000 ; DEBUG
047819             0025*   tile_table_end: equ 256*tile_table_record_size+tile_table_base

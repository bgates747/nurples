PC     Output      Line
040000             0001       assume adl=1
040000             0002       org 0x040000
040000 C3 45 00 04 0003       jp start
040004 FF FF FF FF 0004       align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005       db "MOS"
040043 00          0006       db 00h
040044 01          0007       db 01h
040045             0008   
040045             0009   start:
040045 F5          0010       push af
040046 C5          0011       push bc
040047 D5          0012       push de
040048 DD E5       0013       push ix
04004A FD E5       0014       push iy
04004C CD C8 56 04 0015       call init
040050 CD A4 57 04 0016       call main
040054             0017   
040054             0018   exit:
040054 FD E1       0019       pop iy
040056 DD E1       0020       pop ix
040058 D1          0021       pop de
040059 C1          0022       pop bc
04005A F1          0023       pop af
04005B 21 00 00 00 0024       ld hl,0
04005F             0025   
04005F C9          0026       ret
040060             0027   
040060             0028   ; API INCLUDES
040060             0029       include "mos_api.inc"
040060             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*  ; Title:	AGON MOS - API for user projects
040060             0003*  ; Author:	Dean Belfield
040060             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*  ;			Added MOS error codes for return in HL
040060             0006*  ; Created:	03/08/2022
040060             0007*  ; Last Updated:	10/08/2023
040060             0008*  ;
040060             0009*  ; Modinfo:
040060             0010*  ; 05/08/2022:	Added mos_feof
040060             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*  ; 13/10/2022:	Added mos_oscli
040060             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*  ; 19/05/2023:	Added sysvar_scrMode
040060             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*  ; 03/08/2023:	Added mos_setkbvector
040060             0028*  ; 10/08/2023:	Added mos_getkbmap
040060             0029*  
040060             0030*  ; VDP control (VDU 23, 0, n)
040060             0031*  ;
040060             0032*  vdp_gp:				EQU 80h
040060             0033*  vdp_keycode:		EQU 81h
040060             0034*  vdp_cursor:			EQU	82h
040060             0035*  vdp_scrchar:		EQU	83h
040060             0036*  vdp_scrpixel:		EQU	84h
040060             0037*  vdp_audio:			EQU	85h
040060             0038*  vdp_mode:			EQU	86h
040060             0039*  vdp_rtc:			EQU	87h
040060             0040*  vdp_keystate:		EQU	88h
040060             0041*  vdp_logicalcoords:	EQU	C0h
040060             0042*  vdp_terminalmode:	EQU	FFh
040060             0043*  
040060             0044*  ; MOS high level functions
040060             0045*  ;
040060             0046*  mos_getkey:			EQU	00h
040060             0047*  mos_load:			EQU	01h
040060             0048*  mos_save:			EQU	02h
040060             0049*  mos_cd:				EQU	03h
040060             0050*  mos_dir:			EQU	04h
040060             0051*  mos_del:			EQU	05h
040060             0052*  mos_ren:			EQU	06h
040060             0053*  mos_mkdir:			EQU	07h
040060             0054*  mos_sysvars:		EQU	08h
040060             0055*  mos_editline:		EQU	09h
040060             0056*  mos_fopen:			EQU	0Ah
040060             0057*  mos_fclose:			EQU	0Bh
040060             0058*  mos_fgetc:			EQU	0Ch
040060             0059*  mos_fputc:			EQU	0Dh
040060             0060*  mos_feof:			EQU	0Eh
040060             0061*  mos_getError:		EQU	0Fh
040060             0062*  mos_oscli:			EQU	10h
040060             0063*  mos_copy:			EQU	11h
040060             0064*  mos_getrtc:			EQU	12h
040060             0065*  mos_setrtc:			EQU	13h
040060             0066*  mos_setintvector:	EQU	14h
040060             0067*  mos_uopen:			EQU	15h
040060             0068*  mos_uclose:			EQU	16h
040060             0069*  mos_ugetc:			EQU	17h
040060             0070*  mos_uputc:			EQU	18h
040060             0071*  mos_getfil:			EQU	19h
040060             0072*  mos_fread:			EQU	1Ah
040060             0073*  mos_fwrite:			EQU	1Bh
040060             0074*  mos_flseek:			EQU	1Ch
040060             0075*  mos_setkbvector:	EQU	1Dh
040060             0076*  mos_getkbmap:		EQU	1Eh
040060             0077*  
040060             0078*  ; MOS program exit codes
040060             0079*  ;
040060             0080*  EXIT_OK:				EQU  0;	"OK",
040060             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*  ; FatFS file access functions
040060             0103*  ;
040060             0104*  ffs_fopen:			EQU	80h
040060             0105*  ffs_fclose:			EQU	81h
040060             0106*  ffs_fread:			EQU	82h
040060             0107*  ffs_fwrite:			EQU	83h
040060             0108*  ffs_flseek:			EQU	84h
040060             0109*  ffs_ftruncate:		EQU	85h
040060             0110*  ffs_fsync:			EQU	86h
040060             0111*  ffs_fforward:		EQU	87h
040060             0112*  ffs_fexpand:		EQU	88h
040060             0113*  ffs_fgets:			EQU	89h
040060             0114*  ffs_fputc:			EQU	8Ah
040060             0115*  ffs_fputs:			EQU	8Bh
040060             0116*  ffs_fprintf:		EQU	8Ch
040060             0117*  ffs_ftell:			EQU	8Dh
040060             0118*  ffs_feof:			EQU	8Eh
040060             0119*  ffs_fsize:			EQU	8Fh
040060             0120*  ffs_ferror:			EQU	90h
040060             0121*  
040060             0122*  ; FatFS directory access functions
040060             0123*  ;
040060             0124*  ffs_dopen:			EQU	91h
040060             0125*  ffs_dclose:			EQU	92h
040060             0126*  ffs_dread:			EQU	93h
040060             0127*  ffs_dfindfirst:		EQU	94h
040060             0128*  ffs_dfindnext:		EQU	95h
040060             0129*  
040060             0130*  ; FatFS file and directory management functions
040060             0131*  ;
040060             0132*  ffs_stat:			EQU	96h
040060             0133*  ffs_unlink:			EQU	97h
040060             0134*  ffs_rename:			EQU	98h
040060             0135*  ffs_chmod:			EQU	99h
040060             0136*  ffs_utime:			EQU	9Ah
040060             0137*  ffs_mkdir:			EQU	9Bh
040060             0138*  ffs_chdir:			EQU	9Ch
040060             0139*  ffs_chdrive:		EQU	9Dh
040060             0140*  ffs_getcwd:			EQU	9Eh
040060             0141*  
040060             0142*  ; FatFS volume management and system configuration functions
040060             0143*  ;
040060             0144*  ffs_mount:			EQU	9Fh
040060             0145*  ffs_mkfs:			EQU	A0h
040060             0146*  ffs_fdisk:			EQU	A1h
040060             0147*  ffs_getfree:		EQU	A2h
040060             0148*  ffs_getlabel:		EQU	A3h
040060             0149*  ffs_setlabel:		EQU	A4h
040060             0150*  ffs_setcp:			EQU	A5h
040060             0151*  
040060             0152*  ; File access modes
040060             0153*  ;
040060             0154*  fa_read:			EQU	01h
040060             0155*  fa_write:			EQU	02h
040060             0156*  fa_open_existing:	EQU	00h
040060             0157*  fa_create_new:		EQU	04h
040060             0158*  fa_create_always:	EQU	08h
040060             0159*  fa_open_always:		EQU	10h
040060             0160*  fa_open_append:		EQU	30h
040060             0161*  
040060             0162*  ; System variable indexes for api_sysvars
040060             0163*  ; Index into _sysvars in globals.inc
040060             0164*  ;
040060             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*  
040060             0192*  ; Flags for the VPD protocol
040060             0193*  ;
040060             0194*  vdp_pflag_cursor:		EQU	00000001b
040060             0195*  vdp_pflag_scrchar:		EQU	00000010b
040060             0196*  vdp_pflag_point:		EQU	00000100b
040060             0197*  vdp_pflag_audio:		EQU	00001000b
040060             0198*  vdp_pflag_mode:			EQU	00010000b
040060             0199*  vdp_pflag_rtc:			EQU	00100000b
040060             0200*  
040060             0201*  ;
040060             0202*  ; FatFS structures
040060             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*  ;
040060             0205*  ; Object ID and allocation information (FFOBJID)
040060             0206*  ;
040060             0207*  ; Indexes into FFOBJID structure
040060             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*  ;
040060             0215*  ; File object structure (FIL)
040060             0216*  ;
040060             0217*  ; Indexes into FIL structure
040060             0218*  fil_obj:		EQU 0	; 15: Object identifier
040060             0219*  fil_flag:		EQU	15 	;  1: File status flags
040060             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*  ;
040060             0227*  ; Directory object structure (DIR)
040060             0228*  ; Indexes into DIR structure
040060             0229*  dir_obj:		EQU  0	; 15: Object identifier
040060             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*  dir_clust:		EQU	19	;  4: Current cluster
040060             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*  ;
040060             0237*  ; File information structure (FILINFO)
040060             0238*  ;
040060             0239*  ; Indexes into FILINFO structure
040060             0240*  filinfo_fsize:		EQU 0	;   4: File size
040060             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*  ;
040060             0247*  ; Macro for calling the API
040060             0248*  ; Parameters:
040060             0249*  ; - function: One of the function numbers listed above
040060             0250*  ;
040060             0251*  	MACRO	MOSCALL	function
040060             0252*  			LD	A, function
040060             0253*  			RST.LIL	08h
040060             0254*  	ENDMACRO
040060             0030       include "functions.inc"
040060             0001*  
040060             0002*      MACRO printChar char
040060             0003*      LD A, char
040060             0004*      RST.LIL 10h
040060             0005*      ENDMACRO
040060             0006*  
040060             0007*  ; Simulated call to subroutine at HL
040060             0008*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0009*  ; outputs: whatever the subroutine does, including HL and BC
040060             0010*  ; destroys: only what the subroutine does, but always BC
040060             0011*      MACRO callHL
040060             0012*      ld bc,@F ; Address of first instruction after the jump
040060             0013*      push bc ; which constitutes the return address
040060             0014*      jp (hl) ; Jump to the address in HL
040060             0015*  @@:
040060             0016*      ENDMACRO
040060             0017*  
040060             0018*  ; Simulated call to subroutine at IX
040060             0019*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0020*  ; outputs: whatever the subroutine does, including IX and BC
040060             0021*  ; destroys: only what the subroutine does, but always BC
040060             0022*      MACRO callIX
040060             0023*      ld bc,@F ; Address of first instruction after the jump
040060             0024*      push bc ; which constitutes the return address
040060             0025*      jp (ix) ; Jump to the address in IX
040060             0026*  @@:
040060             0027*      ENDMACRO
040060             0028*  
040060             0029*  ; Simulated call to soubroutinte at IY
040060             0030*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0031*  ; outputs: whatever the subroutine does, including IY and BC
040060             0032*  ; destroys: only what the subroutine does, but always BC
040060             0033*      MACRO callIY
040060             0034*      ld bc,@F ; Address of first instruction after the jump
040060             0035*      push bc ; which constitutes the return address
040060             0036*      jp (iy) ; Jump to the address in IY
040060             0037*  @@:
040060             0038*      ENDMACRO
040060             0039*  
040060             0040*  ; put the value in HLU into the accumulator
040060             0041*  ; destroys: af
040060             0042*      MACRO HLU_TO_A
040060             0043*      push hl ; 4 cycles
040060             0044*      inc sp ; 1 cycle
040060             0045*      pop af ; 4 cycles
040060             0046*      dec sp ; 1 cycle
040060             0047*      ; 10 cycles total
040060             0048*      ENDMACRO
040060             0049*  
040060             0050*  A_TO_HLU:
040060             0051*      ; call is 7 cycles
040060 22 6D 00 04 0052*      ld (@scratch),hl ; 7 cycles
040064 32 6F 00 04 0053*      ld (@scratch+2),a ; 5 cycles
040068 2A 6D 00 04 0054*      ld hl,(@scratch) ; 7 cycles
04006C C9          0055*      ret ; 6 cycles
04006D             0056*      ; 25 cycles total
04006D 00 00 00    0057*  @scratch: dl 0
040070             0058*  
040070             0059*      ; TODO: implement this
040070             0060*      ; MACRO A_TO_HLU
040070             0061*      ;     push.s af
040070             0062*      ;     inc sp
040070             0063*      ;     push.s hl
040070             0064*      ;     pop hl
040070             0065*      ;     inc sp
040070             0066*      ;     inc sp
040070             0067*      ; ENDMACRO
040070             0068*  
040070             0069*      MACRO PUSH_ALL
040070             0070*      ex af,af'
040070             0071*      exx
040070             0072*      push af
040070             0073*      push hl
040070             0074*      push bc
040070             0075*      push de
040070             0076*  
040070             0077*      ex af,af'
040070             0078*      exx
040070             0079*      push af
040070             0080*      push hl
040070             0081*      push bc
040070             0082*      push de
040070             0083*      push ix
040070             0084*      push iy
040070             0085*      ENDMACRO
040070             0086*  
040070             0087*      MACRO POP_ALL
040070             0088*      pop iy
040070             0089*      pop ix
040070             0090*      pop de
040070             0091*      pop bc
040070             0092*      pop hl
040070             0093*      pop af
040070             0094*      ex af,af'
040070             0095*      exx
040070             0096*  
040070             0097*      pop de
040070             0098*      pop bc
040070             0099*      pop hl
040070             0100*      pop af
040070             0101*      ex af,af'
040070             0102*      exx
040070             0103*      ENDMACRO
040070             0104*  
040070             0105*  ; Print a zero-terminated string inline with code, e.g.:
040070             0106*  ;
040070             0107*  ;    call printInline
040070             0108*  ;    ASCIZ "Hello, world!\r\n"
040070             0109*  ;
040070             0110*  ; Destroys: HL,AF
040070             0111*  printInline:
040070 E1          0112*      pop hl ; get the return address = pointer to start of string
040071 CD 77 00 04 0113*      call printString ; HL advances to end of string
040075 E5          0114*      push hl ; restore the return address = pointer to end of string
040076 C9          0115*      ret
040077             0116*  
040077             0117*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040077             0118*  ; Print a zero-terminated string
040077             0119*  ; HL: Pointer to string
040077             0120*  printString:
040077 C5          0121*      PUSH BC
040078 01 00 00 00 0122*      LD BC,0
04007C 3E 00       0123*      LD A,0
04007E 5B DF       0124*      RST.LIL 18h
040080 C1          0125*      POP BC
040081 C9          0126*      RET
040082             0127*  ; print a VDU sequence
040082             0128*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
040082             0129*  sendVDUsequence:
040082 C5          0130*      PUSH BC
040083 01 00 00 00 0131*      LD BC, 0
040087 4E          0132*      LD C, (HL)
040088 5B DF       0133*      RST.LIL 18h
04008A C1          0134*      POP BC
04008B C9          0135*      RET
04008C             0136*  ; Print Newline sequence to VDP
04008C             0137*  printNewLine:
04008C F5          0138*      push af ; for some reason rst.lil 10h sets carry flag
04008D 3E 0D       0139*      LD A, '\r'
04008F 5B D7       0140*      RST.LIL 10h
040091 3E 0A       0141*      LD A, '\n'
040093 5B D7       0142*      RST.LIL 10h
040095 F1          0143*      pop af
040096 C9          0144*      RET
040097             0145*  
040097             0146*  ; Print a 24-bit HEX number
040097             0147*  ; HLU: Number to print
040097             0148*  printHex24:
040097             0149*      HLU_TO_A
040097 E5          0001*M     push hl ; 4 cycles
040098 33          0002*M     inc sp ; 1 cycle
040099 F1          0003*M     pop af ; 4 cycles
04009A 3B          0004*M     dec sp ; 1 cycle
04009B             0005*M     ; 10 cycles total
04009B CD A5 00 04 0150*      CALL printHex8
04009F             0151*  ; Print a 16-bit HEX number
04009F             0152*  ; HL: Number to print
04009F             0153*  printHex16:
04009F 7C          0154*      LD A,H
0400A0 CD A5 00 04 0155*      CALL printHex8
0400A4 7D          0156*      LD A,L
0400A5             0157*  ; Print an 8-bit HEX number
0400A5             0158*  ; A: Number to print
0400A5             0159*  printHex8:
0400A5 4F          0160*      LD C,A
0400A6 1F          0161*      RRA
0400A7 1F          0162*      RRA
0400A8 1F          0163*      RRA
0400A9 1F          0164*      RRA
0400AA CD AF 00 04 0165*      CALL @F
0400AE 79          0166*      LD A,C
0400AF             0167*  @@:
0400AF E6 0F       0168*      AND 0Fh
0400B1 C6 90       0169*      ADD A,90h
0400B3 27          0170*      DAA
0400B4 CE 40       0171*      ADC A,40h
0400B6 27          0172*      DAA
0400B7 5B D7       0173*      RST.LIL 10h
0400B9 C9          0174*      RET
0400BA             0175*  
0400BA             0176*  printHexA:
0400BA F5          0177*      push af
0400BB C5          0178*      push bc
0400BC CD A5 00 04 0179*      call printHex8
0400C0 3E 20       0180*      ld a,' '
0400C2 5B D7       0181*      rst.lil 10h
0400C4 C1          0182*      pop bc
0400C5 F1          0183*      pop af
0400C6 C9          0184*      ret
0400C7             0185*  
0400C7             0186*  printHexHL:
0400C7 F5          0187*      push af
0400C8 C5          0188*      push bc
0400C9 CD 9F 00 04 0189*      call printHex16
0400CD 3E 20       0190*      ld a,' '
0400CF 5B D7       0191*      rst.lil 10h
0400D1 C1          0192*      pop bc
0400D2 F1          0193*      pop af
0400D3 C9          0194*      ret
0400D4             0195*  
0400D4             0196*  printHexUHL:
0400D4 F5          0197*      push af
0400D5 C5          0198*      push bc
0400D6 CD 97 00 04 0199*      call printHex24
0400DA 3E 20       0200*      ld a,' '
0400DC 5B D7       0201*      rst.lil 10h
0400DE C1          0202*      pop bc
0400DF F1          0203*      pop af
0400E0 C9          0204*      ret
0400E1             0205*  
0400E1             0206*  printHexAUHL:
0400E1 F5          0207*      push af
0400E2 C5          0208*      push bc
0400E3 CD A5 00 04 0209*      call printHex8
0400E7 3E 2E       0210*      ld a,'.'
0400E9 5B D7       0211*      rst.lil 10h
0400EB CD 97 00 04 0212*      call printHex24
0400EF 3E 20       0213*      ld a,' '
0400F1 5B D7       0214*      rst.lil 10h
0400F3 C1          0215*      pop bc
0400F4 F1          0216*      pop af
0400F5 C9          0217*      ret
0400F6             0218*  
0400F6             0219*  printHexABHL:
0400F6             0220*  ; preserve registers
0400F6 C5          0221*      push bc ; b will be ok c will not
0400F7 F5          0222*      push af ; will get totally destroyed
0400F8             0223*  ; print a
0400F8 CD A5 00 04 0224*      call printHex8
0400FC             0225*  ; print b
0400FC 78          0226*      ld a,b
0400FD CD A5 00 04 0227*      call printHex8
040101             0228*  ; print hl
040101 CD 9F 00 04 0229*      call printHex16
040105             0230*  ; restore registers
040105 F1          0231*      pop af
040106 C1          0232*      pop bc
040107 C9          0233*      ret
040108             0234*  
040108             0235*  printHexBHL:
040108             0236*  ; preserve registers
040108 C5          0237*      push bc ; b will be ok c will not
040109 F5          0238*      push af ; will get totally destroyed
04010A             0239*  ; print b
04010A 78          0240*      ld a,b
04010B CD A5 00 04 0241*      call printHex8
04010F             0242*  ; print hl
04010F CD 9F 00 04 0243*      call printHex16
040113             0244*  ; restore registers
040113 F1          0245*      pop af
040114 C1          0246*      pop bc
040115 C9          0247*      ret
040116             0248*  
040116             0249*  printHexCDE:
040116             0250*  ; preserve registers
040116 C5          0251*      push bc ; b will be ok c will not
040117 F5          0252*      push af ; will get totally destroyed
040118             0253*  ; print c
040118 79          0254*      ld a,c
040119 CD A5 00 04 0255*      call printHex8
04011D             0256*  ; print de
04011D EB          0257*      ex de,hl
04011E CD 9F 00 04 0258*      call printHex16
040122 EB          0259*      ex de,hl
040123             0260*  ; restore registers
040123 F1          0261*      pop af
040124 C1          0262*      pop bc
040125 C9          0263*      ret
040126             0264*  
040126             0265*  printHexUIX:
040126             0266*  ; store everything in scratch
040126 22 9F 05 04 0267*      ld (uhl),hl
04012A ED 43 A2 05 0268*      ld (ubc),bc
       04          
04012F ED 53 A5 05 0269*      ld (ude),de
       04          
040134 DD 22 A8 05 0270*      ld (uix),ix
       04          
040139 FD 22 AB 05 0271*      ld (uiy),iy
       04          
04013E F5          0272*      push af ; fml
04013F             0273*  
04013F 21 36 05 04 0274*      ld hl,str_ixu
040143 CD 77 00 04 0275*      call printString
040147 2A A8 05 04 0276*      ld hl,(uix)
04014B CD 97 00 04 0277*      call printHex24
04014F CD 8C 00 04 0278*      call printNewLine
040153             0279*  
040153             0280*  ; restore everything
040153 2A 9F 05 04 0281*      ld hl, (uhl)
040157 ED 4B A2 05 0282*      ld bc, (ubc)
       04          
04015C ED 5B A5 05 0283*      ld de, (ude)
       04          
040161 DD 2A A8 05 0284*      ld ix, (uix)
       04          
040166 FD 2A AB 05 0285*      ld iy, (uiy)
       04          
04016B F1          0286*      pop af
04016C             0287*  ; all done
04016C C9          0288*      ret
04016D             0289*  
04016D             0290*  ; Print a 0x HEX prefix
04016D             0291*  DisplayHexPrefix:
04016D 3E 30       0292*      LD A, '0'
04016F 5B D7       0293*      RST.LIL 10h
040171 3E 78       0294*      LD A, 'x'
040173 5B D7       0295*      RST.LIL 10h
040175 C9          0296*      RET
040176             0297*  
040176             0298*      MACRO printDecBC
040176             0299*      push hl
040176             0300*      push bc
040176             0301*      pop hl
040176             0302*      call printDec
040176             0303*      pop hl
040176             0304*      ENDMACRO
040176             0305*  
040176             0306*      MACRO printDecDE
040176             0307*      push hl
040176             0308*      push de
040176             0309*      pop hl
040176             0310*      call printDec
040176             0311*      pop hl
040176             0312*      ENDMACRO
040176             0313*  
040176             0314*      MACRO printDecHL
040176             0315*      call printDec
040176             0316*      ENDMACRO
040176             0317*  
040176             0318*      MACRO printDecIX
040176             0319*      push hl
040176             0320*      push ix
040176             0321*      pop hl
040176             0322*      call printDec
040176             0323*      pop hl
040176             0324*      ENDMACRO
040176             0325*  
040176             0326*      MACRO printDecIY
040176             0327*      push hl
040176             0328*      push iy
040176             0329*      pop hl
040176             0330*      call printDec
040176             0331*      pop hl
040176             0332*      ENDMACRO
040176             0333*  
040176             0334*  
040176             0335*  ; Prints the right justified decimal value in HL without leading zeroes
040176             0336*  ; HL : Value to print
040176             0337*  ; preserves all registers and flags
040176             0338*  printDec:
040176             0339*  ; BEGIN MY CODE
040176             0340*  ; back up all the things
040176 F5          0341*      push af
040177 C5          0342*      push bc
040178 D5          0343*      push de
040179 E5          0344*      push hl
04017A             0345*  ; END MY CODE
04017A 11 A2 01 04 0346*      LD DE, _printDecBuffer
04017E CD B2 01 04 0347*      CALL u24_to_ascii
040182             0348*  ; BEGIN MY CODE
040182             0349*  ; replace leading zeroes with spaces
040182 21 A2 01 04 0350*      LD HL, _printDecBuffer
040186 06 07       0351*      ld B, 7 ; if HL was 0, we want to keep the final zero
040188             0352*  @loop:
040188 7E          0353*      LD A, (HL)
040189 FE 30       0354*      CP '0'
04018B C2 95 01 04 0355*      JP NZ, @done
04018F 3E 20       0356*      LD A, ' '
040191 77          0357*      LD (HL), A
040192 23          0358*      INC HL
040193             0359*      ; CALL vdu_cursor_forward
040193 10 F3       0360*      DJNZ @loop
040195             0361*  @done:
040195             0362*  ; END MY CODE
040195 21 A2 01 04 0363*      LD HL, _printDecBuffer
040199 CD 77 00 04 0364*      CALL printString
04019D             0365*  ; BEGIN MY CODE
04019D             0366*  ; restore all the things
04019D E1          0367*      pop hl
04019E D1          0368*      pop de
04019F C1          0369*      pop bc
0401A0 F1          0370*      pop af
0401A1             0371*  ; END MY CODE
0401A1 C9          0372*      RET
0401A2 00 00 00 00 0373*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0401B2             0374*  
0401B2             0375*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0401B2             0376*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0401B2             0377*  ; so it will allways be 8 characters length
0401B2             0378*  ; HL : Value to convert to string
0401B2             0379*  ; DE : pointer to buffer, at least 8 byte + 0
0401B2             0380*  u24_to_ascii:
0401B2 01 80 69 67 0381*      LD BC,-10000000
0401B6 CD E9 01 04 0382*      CALL @one_digit
0401BA 01 C0 BD F0 0383*      LD BC,-1000000
0401BE CD E9 01 04 0384*      CALL @one_digit
0401C2 01 60 79 FE 0385*      LD BC,-100000
0401C6 CD E9 01 04 0386*      CALL @one_digit
0401CA 01 F0 D8 FF 0387*      LD BC,-10000
0401CE CD E9 01 04 0388*      CALL @one_digit
0401D2 01 18 FC FF 0389*      LD BC,-1000
0401D6 CD E9 01 04 0390*      CALL @one_digit
0401DA 01 9C FF FF 0391*      LD BC,-100
0401DE CD E9 01 04 0392*      CALL @one_digit
0401E2 0E F6       0393*      LD C,-10
0401E4 CD E9 01 04 0394*      CALL @one_digit
0401E8 48          0395*      LD C,B
0401E9             0396*  @one_digit:
0401E9 3E 2F       0397*      LD A,'0'-1
0401EB             0398*  @divide_me:
0401EB 3C          0399*      INC A
0401EC 09          0400*      ADD HL,BC
0401ED 38 FC       0401*      JR C,@divide_me
0401EF ED 42       0402*      SBC HL,BC
0401F1 12          0403*      LD (DE),A
0401F2 13          0404*      INC DE
0401F3 C9          0405*      RET
0401F4             0406*  
0401F4             0407*  print_u24:
0401F4 D5          0408*      push de
0401F5 E5          0409*      push hl
0401F6 11 A2 01 04 0410*      ld de,_printDecBuffer
0401FA CD B2 01 04 0411*      call u24_to_ascii
0401FE 21 A2 01 04 0412*      ld hl,_printDecBuffer
040202 CD 77 00 04 0413*      call printString
040206 3E 20       0414*      ld a,' '
040208 5B D7       0415*      rst.lil 10h
04020A E1          0416*      pop hl
04020B D1          0417*      pop de
04020C C9          0418*      ret
04020D             0419*  
04020D             0420*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04020D             0421*  ; HL : Value to convert to string (integer part in H, fractional part in L)
04020D             0422*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04020D             0423*  u168_to_ascii:
04020D             0424*  ; add a leading space to make room for sign flag if needed
04020D 3E 20       0425*      ld a,' '
04020F 12          0426*      ld (de),a
040210 13          0427*      inc de
040211             0428*  ; Convert integer part
040211 E5          0429*      push hl ; Save HL (we’ll need the fractional part later)
040212 CD FB 06 04 0430*      call hlu_udiv256 ; Shift to get integer portion in HL
040216 01 F0 D8 FF 0431*      ld bc, -10000
04021A CD 3D 02 04 0432*      call @one_int
04021E 01 18 FC FF 0433*      ld bc, -1000
040222 CD 3D 02 04 0434*      call @one_int
040226 01 9C FF FF 0435*      ld bc, -100
04022A CD 3D 02 04 0436*      call @one_int
04022E 0E F6       0437*      ld c, -10
040230 CD 3D 02 04 0438*      call @one_int
040234 48          0439*      ld c, b
040235 CD 3D 02 04 0440*      call @one_int
040239 C3 48 02 04 0441*      jp @frac ; Jump to fractional part conversion
04023D             0442*  @one_int:
04023D 3E 2F       0443*      ld a, '0' - 1 ; Start ASCII character at '0'
04023F             0444*  @divide_me:
04023F 3C          0445*      inc a
040240 09          0446*      add hl, bc ; Accumulate until overflow
040241 38 FC       0447*      jr c, @divide_me
040243 ED 42       0448*      sbc hl, bc ; Remove excess after overflow
040245 12          0449*      ld (de), a ; Store ASCII digit
040246 13          0450*      inc de
040247 C9          0451*      ret
040248             0452*  ; Convert fractional part
040248             0453*  @frac:
040248 3E 2E       0454*      ld a, '.' ; Decimal point
04024A 12          0455*      ld (de), a
04024B 13          0456*      inc de
04024C E1          0457*      pop hl ; Restore HL with original fraction
04024D 06 03       0458*      ld b, 3 ; Loop counter for 3 fractional digits
04024F             0459*  @frac_loop:
04024F 26 0A       0460*      ld h, 10 ; Load multiplier for fractional part
040251 ED 6C       0461*      mlt hl ; Multiply by 10, result in HL (H holds the integer part)
040253 3E 30       0462*      ld a, '0'
040255 84          0463*      add a, h ; Convert integer part to ASCII
040256 12          0464*      ld (de), a
040257 13          0465*      inc de
040258 10 F5       0466*      djnz @frac_loop ; Repeat for each fractional digit
04025A             0467*  ; Add null terminator
04025A AF          0468*      xor a ; Null terminator
04025B 12          0469*      ld (de), a
04025C C9          0470*      ret
04025D             0471*  
04025D             0472*  print_u168:
04025D D5          0473*      push de
04025E E5          0474*      push hl
04025F 11 A2 01 04 0475*      ld de,_printDecBuffer
040263 CD 0D 02 04 0476*      call u168_to_ascii
040267 21 A2 01 04 0477*      ld hl,_printDecBuffer
04026B CD 77 00 04 0478*      call printString
04026F E1          0479*      pop hl
040270 D1          0480*      pop de
040271 C9          0481*      ret
040272             0482*  
040272             0483*  ; signed version of u168_to_ascii
040272             0484*  s168_to_ascii:
040272 D5          0485*      push de ; save starting address of buffer
040273 CD 94 06 04 0486*      call hlu_abs
040277 F5          0487*      push af ; save sign flag
040278 CD 0D 02 04 0488*      call u168_to_ascii
04027C F1          0489*      pop af ; restore sign flag
04027D D1          0490*      pop de ; restore starting address of buffer
04027E F0          0491*      ret p ; hlu was positive so nothing to do
04027F 3E 2D       0492*      ld a,'-'
040281 12          0493*      ld (de),a
040282 C9          0494*      ret
040283             0495*  
040283             0496*  print_s168:
040283 D5          0497*      push de
040284 E5          0498*      push hl
040285 11 A2 01 04 0499*      ld de,_printDecBuffer
040289 CD 72 02 04 0500*      call s168_to_ascii
04028D 21 A2 01 04 0501*      ld hl,_printDecBuffer
040291 CD 77 00 04 0502*      call printString
040295 E1          0503*      pop hl
040296 D1          0504*      pop de
040297 C9          0505*      ret
040298             0506*  
040298             0507*  print_s168_hl:
040298 F5          0508*      push af
040299 E5          0509*      push hl
04029A CD 83 02 04 0510*      call print_s168
04029E 3E 20       0511*      ld a,' '
0402A0 5B D7       0512*      rst.lil 10h
0402A2 E1          0513*      pop hl
0402A3 F1          0514*      pop af
0402A4 C9          0515*      ret
0402A5             0516*  
0402A5             0517*  print_s168_bc:
0402A5 F5          0518*      push af
0402A6 C5          0519*      push bc
0402A7 E5          0520*      push hl
0402A8 C5          0521*      push bc
0402A9 E1          0522*      pop hl
0402AA CD 83 02 04 0523*      call print_s168
0402AE 3E 20       0524*      ld a,' '
0402B0 5B D7       0525*      rst.lil 10h
0402B2 E1          0526*      pop hl
0402B3 C1          0527*      pop bc
0402B4 F1          0528*      pop af
0402B5 C9          0529*      ret
0402B6             0530*  
0402B6             0531*  print_s168_de:
0402B6 F5          0532*      push af
0402B7 D5          0533*      push de
0402B8 E5          0534*      push hl
0402B9 EB          0535*      ex de,hl
0402BA CD 83 02 04 0536*      call print_s168
0402BE 3E 20       0537*      ld a,' '
0402C0 5B D7       0538*      rst.lil 10h
0402C2 E1          0539*      pop hl
0402C3 D1          0540*      pop de
0402C4 F1          0541*      pop af
0402C5 C9          0542*      ret
0402C6             0543*  
0402C6             0544*  print_s168_hl_bc_de:
0402C6 F5          0545*      push af
0402C7 C5          0546*      push bc
0402C8 D5          0547*      push de
0402C9 E5          0548*      push hl
0402CA CD 83 02 04 0549*      call print_s168
0402CE 3E 20       0550*      ld a,' '
0402D0 5B D7       0551*      rst.lil 10h
0402D2 C5          0552*      push bc
0402D3 E1          0553*      pop hl
0402D4 CD 83 02 04 0554*      call print_s168
0402D8 3E 20       0555*      ld a,' '
0402DA 5B D7       0556*      rst.lil 10h
0402DC EB          0557*      ex de,hl
0402DD CD 83 02 04 0558*      call print_s168
0402E1 3E 20       0559*      ld a,' '
0402E3 5B D7       0560*      rst.lil 10h
0402E5 E1          0561*      pop hl
0402E6 D1          0562*      pop de
0402E7 C1          0563*      pop bc
0402E8 F1          0564*      pop af
0402E9 C9          0565*      ret
0402EA             0566*  
0402EA             0567*  print_s168_bc_de:
0402EA F5          0568*      push af
0402EB C5          0569*      push bc
0402EC D5          0570*      push de
0402ED C5          0571*      push bc
0402EE E1          0572*      pop hl
0402EF CD 83 02 04 0573*      call print_s168
0402F3 3E 20       0574*      ld a,' '
0402F5 5B D7       0575*      rst.lil 10h
0402F7 EB          0576*      ex de,hl
0402F8 CD 83 02 04 0577*      call print_s168
0402FC 3E 20       0578*      ld a,' '
0402FE 5B D7       0579*      rst.lil 10h
040300 E1          0580*      pop hl
040301 D1          0581*      pop de
040302 C1          0582*      pop bc
040303 F1          0583*      pop af
040304 C9          0584*      ret
040305             0585*  
040305             0586*  print_s168_a:
040305 F5          0587*      push af
040306 C5          0588*      push bc
040307 E5          0589*      push hl
040308 21 00 00 00 0590*      ld hl,0
04030C 6F          0591*      ld l,a
04030D CD 98 02 04 0592*      call print_s168_hl
040311 E1          0593*      pop hl
040312 C1          0594*      pop bc
040313 F1          0595*      pop af
040314 C9          0596*      ret
040315             0597*  
040315             0598*  ; #### new functions added by Brandon R. Gates ####
040315             0599*  
040315             0600*  ; print the binary representation of the 8-bit value in a
040315             0601*  ; destroys a, hl, bc
040315             0602*  printBin8:
040315 06 08       0603*      ld b,8 ; loop counter for 8 bits
040317 21 32 03 04 0604*      ld hl,@cmd ; set hl to the low byte of the output string
04031B             0605*      ; (which will be the high bit of the value in a)
04031B             0606*  @loop:
04031B 07          0607*      rlca ; put the next highest bit into carry
04031C 38 04       0608*      jr c,@one
04031E 36 30       0609*      ld (hl),'0'
040320 18 02       0610*      jr @next_bit
040322             0611*  @one:
040322 36 31       0612*      ld (hl),'1'
040324             0613*  @next_bit:
040324 23          0614*      inc hl
040325 10 F4       0615*      djnz @loop
040327             0616*  ; print it
040327 21 32 03 04 0617*      ld hl,@cmd
04032B 01 08 00 00 0618*      ld bc,@end-@cmd
04032F 5B DF       0619*      rst.lil $18
040331 C9          0620*      ret
040332             0621*  @cmd: ds 8 ; eight bytes for eight bits
04033A             0622*  @end:
04033A             0623*  
04033A             0624*  ; print the binary representation of the 8-bit value in a
04033A             0625*  ; in reverse order (lsb first)
04033A             0626*  ; destroys a, hl, bc
04033A             0627*  printBin8Rev:
04033A 06 08       0628*      ld b,8 ; loop counter for 8 bits
04033C 21 57 03 04 0629*      ld hl,@cmd ; set hl to the low byte of the output string
040340             0630*      ; (which will be the high bit of the value in a)
040340             0631*  @loop:
040340 0F          0632*      rrca ; put the next lowest bit into carry
040341 38 04       0633*      jr c,@one
040343 36 30       0634*      ld (hl),'0'
040345 18 02       0635*      jr @next_bit
040347             0636*  @one:
040347 36 31       0637*      ld (hl),'1'
040349             0638*  @next_bit:
040349 23          0639*      inc hl
04034A 10 F4       0640*      djnz @loop
04034C             0641*  ; print it
04034C 21 57 03 04 0642*      ld hl,@cmd
040350 01 08 00 00 0643*      ld bc,@end-@cmd
040354 5B DF       0644*      rst.lil $18
040356 C9          0645*      ret
040357             0646*  @cmd: ds 8 ; eight bytes for eight bits
04035F             0647*  @end:
04035F             0648*  
04035F             0649*  ; print registers to screen in hexidecimal format
04035F             0650*  ; inputs: none
04035F             0651*  ; outputs: values of every register printed to screen
04035F             0652*  ;    values of each register in global scratch memory
04035F             0653*  ; destroys: nothing
04035F             0654*  stepRegistersHex:
04035F             0655*  ; store everything in scratch
04035F 22 9F 05 04 0656*      ld (uhl),hl
040363 ED 43 A2 05 0657*      ld (ubc),bc
       04          
040368 ED 53 A5 05 0658*      ld (ude),de
       04          
04036D DD 22 A8 05 0659*      ld (uix),ix
       04          
040372 FD 22 AB 05 0660*      ld (uiy),iy
       04          
040377 F5          0661*      push af ; fml
040378 E1          0662*      pop hl ; thanks, zilog
040379 22 9C 05 04 0663*      ld (uaf),hl
04037D F5          0664*      push af ; dammit
04037E             0665*  
04037E             0666*  ; home the cursor
04037E             0667*      ; call vdu_home_cursor
04037E             0668*  
04037E             0669*  ; print each register
04037E 21 22 05 04 0670*      ld hl,str_afu
040382 CD 77 00 04 0671*      call printString
040386 2A 9C 05 04 0672*      ld hl,(uaf)
04038A CD 97 00 04 0673*      call printHex24
04038E CD 8C 00 04 0674*      call printNewLine
040392             0675*  
040392 21 27 05 04 0676*      ld hl,str_hlu
040396 CD 77 00 04 0677*      call printString
04039A 2A 9F 05 04 0678*      ld hl,(uhl)
04039E CD 97 00 04 0679*      call printHex24
0403A2 CD 8C 00 04 0680*      call printNewLine
0403A6             0681*  
0403A6 21 2C 05 04 0682*      ld hl,str_bcu
0403AA CD 77 00 04 0683*      call printString
0403AE 2A A2 05 04 0684*      ld hl,(ubc)
0403B2 CD 97 00 04 0685*      call printHex24
0403B6 CD 8C 00 04 0686*      call printNewLine
0403BA             0687*  
0403BA 21 31 05 04 0688*      ld hl,str_deu
0403BE CD 77 00 04 0689*      call printString
0403C2 2A A5 05 04 0690*      ld hl,(ude)
0403C6 CD 97 00 04 0691*      call printHex24
0403CA CD 8C 00 04 0692*      call printNewLine
0403CE             0693*  
0403CE 21 36 05 04 0694*      ld hl,str_ixu
0403D2 CD 77 00 04 0695*      call printString
0403D6 2A A8 05 04 0696*      ld hl,(uix)
0403DA CD 97 00 04 0697*      call printHex24
0403DE CD 8C 00 04 0698*      call printNewLine
0403E2             0699*  
0403E2 21 3B 05 04 0700*      ld hl,str_iyu
0403E6 CD 77 00 04 0701*      call printString
0403EA 2A AB 05 04 0702*      ld hl,(uiy)
0403EE CD 97 00 04 0703*      call printHex24
0403F2 CD 8C 00 04 0704*      call printNewLine
0403F6             0705*  
0403F6             0706*      ; call vsync
0403F6             0707*  
0403F6 CD 8C 00 04 0708*      call printNewLine
0403FA             0709*  
0403FA             0710*  ; check for right shift key and quit if pressed
0403FA             0711*      MOSCALL mos_getkbmap
0403FA 3E 1E       0001*M 			LD	A, function
0403FC 5B CF       0002*M 			RST.LIL	08h
0403FE             0712*  @stayhere:
0403FE             0713*  ; 7 RightShift
0403FE DD CB 00 76 0714*      bit 6,(ix+0)
040402 20 02       0715*      jr nz,@RightShift
040404 18 F8       0716*      jr @stayhere
040406             0717*  @RightShift:
040406 DD CB 0E 86 0718*      res 0,(ix+14) ; debounce the key (hopefully)
04040A 3E 80       0719*      ld a,%10000000
04040C             0720*      ; call multiPurposeDelay
04040C             0721*  
04040C             0722*  ; restore everything
04040C 2A 9F 05 04 0723*      ld hl, (uhl)
040410 ED 4B A2 05 0724*      ld bc, (ubc)
       04          
040415 ED 5B A5 05 0725*      ld de, (ude)
       04          
04041A DD 2A A8 05 0726*      ld ix, (uix)
       04          
04041F FD 2A AB 05 0727*      ld iy, (uiy)
       04          
040424 F1          0728*      pop af
040425             0729*  ; all done
040425 C9          0730*      ret
040426             0731*  
040426             0732*  ; print registers to screen in hexidecimal format
040426             0733*  ; inputs: none
040426             0734*  ; outputs: values of every register printed to screen
040426             0735*  ;    values of each register in global scratch memory
040426             0736*  ; destroys: nothing
040426             0737*  dumpRegistersHex:
040426             0738*  ; store everything in scratch
040426 22 9F 05 04 0739*      ld (uhl),hl
04042A ED 43 A2 05 0740*      ld (ubc),bc
       04          
04042F ED 53 A5 05 0741*      ld (ude),de
       04          
040434 DD 22 A8 05 0742*      ld (uix),ix
       04          
040439 FD 22 AB 05 0743*      ld (uiy),iy
       04          
04043E F5          0744*      push af ; fml
04043F E1          0745*      pop hl ; thanks, zilog
040440 22 9C 05 04 0746*      ld (uaf),hl
040444 F5          0747*      push af ; dammit
040445             0748*  
040445             0749*  ; home the cursor
040445             0750*      ; call vdu_home_cursor
040445             0751*      ; call printNewLine
040445             0752*  
040445             0753*  ; print each register
040445 21 22 05 04 0754*      ld hl,str_afu
040449 CD 77 00 04 0755*      call printString
04044D 2A 9C 05 04 0756*      ld hl,(uaf)
040451 CD 97 00 04 0757*      call printHex24
040455             0758*      ; call printNewLine
040455             0759*  
040455 21 27 05 04 0760*      ld hl,str_hlu
040459 CD 77 00 04 0761*      call printString
04045D 2A 9F 05 04 0762*      ld hl,(uhl)
040461 CD 97 00 04 0763*      call printHex24
040465             0764*      ; call printNewLine
040465             0765*  
040465 21 2C 05 04 0766*      ld hl,str_bcu
040469 CD 77 00 04 0767*      call printString
04046D 2A A2 05 04 0768*      ld hl,(ubc)
040471 CD 97 00 04 0769*      call printHex24
040475             0770*      ; call printNewLine
040475             0771*  
040475 21 31 05 04 0772*      ld hl,str_deu
040479 CD 77 00 04 0773*      call printString
04047D 2A A5 05 04 0774*      ld hl,(ude)
040481 CD 97 00 04 0775*      call printHex24
040485             0776*      ; call printNewLine
040485             0777*  
040485 21 36 05 04 0778*      ld hl,str_ixu
040489 CD 77 00 04 0779*      call printString
04048D 2A A8 05 04 0780*      ld hl,(uix)
040491 CD 97 00 04 0781*      call printHex24
040495             0782*      ; call printNewLine
040495             0783*  
040495 21 3B 05 04 0784*      ld hl,str_iyu
040499 CD 77 00 04 0785*      call printString
04049D 2A AB 05 04 0786*      ld hl,(uiy)
0404A1 CD 97 00 04 0787*      call printHex24
0404A5             0788*      ; call printNewLine
0404A5             0789*  
0404A5             0790*      ; call vdu_vblank
0404A5             0791*  
0404A5 CD 8C 00 04 0792*      call printNewLine
0404A9             0793*  ; restore everything
0404A9 2A 9F 05 04 0794*      ld hl, (uhl)
0404AD ED 4B A2 05 0795*      ld bc, (ubc)
       04          
0404B2 ED 5B A5 05 0796*      ld de, (ude)
       04          
0404B7 DD 2A A8 05 0797*      ld ix, (uix)
       04          
0404BC FD 2A AB 05 0798*      ld iy, (uiy)
       04          
0404C1 F1          0799*      pop af
0404C2             0800*  ; all done
0404C2 C9          0801*      ret
0404C3             0802*  
0404C3             0803*  dumpRegistersHexPrime:
0404C3 D9          0804*      exx
0404C4 08          0805*      ex af,af'
0404C5 CD 26 04 04 0806*      call dumpRegistersHex
0404C9 08          0807*      ex af,af'
0404CA D9          0808*      exx
0404CB C9          0809*      ret
0404CC             0810*  
0404CC             0811*  ; additionally dump prime registers
0404CC             0812*  ; inputs: none
0404CC             0813*  ; outputs: values of every register printed to screen
0404CC             0814*  ; destroys: nothing
0404CC             0815*  dumpRegistersHexAll:
0404CC CD 26 04 04 0816*      call dumpRegistersHex
0404D0 08          0817*      ex af,af'
0404D1 D9          0818*      exx
0404D2 CD 26 04 04 0819*      call dumpRegistersHex
0404D6 08          0820*      ex af,af'
0404D7 D9          0821*      exx
0404D8 C9          0822*      ret
0404D9             0823*  
0404D9             0824*  ; print hlu to screen in hexidecimal format
0404D9             0825*  ; inputs: none
0404D9             0826*  ; destroys: nothing
0404D9             0827*  print_hex_hl:
0404D9 F5          0828*      push af
0404DA E5          0829*      push hl
0404DB 21 27 05 04 0830*      ld hl,str_hlu
0404DF CD 77 00 04 0831*      call printString
0404E3 E1          0832*      pop hl
0404E4 E5          0833*      push hl
0404E5 CD 97 00 04 0834*      call printHex24
0404E9 3E 20       0835*      ld a,' '
0404EB 5B D7       0836*      rst.lil 10h
0404ED E1          0837*      pop hl
0404EE F1          0838*      pop af
0404EF C9          0839*      ret
0404F0             0840*  
0404F0             0841*  ; print bcu to screen in hexidecimal format
0404F0             0842*  ; inputs: none
0404F0             0843*  ; destroys: nothing
0404F0             0844*  print_hex_bc:
0404F0 F5          0845*      push af
0404F1 E5          0846*      push hl
0404F2 C5          0847*      push bc
0404F3 21 2C 05 04 0848*      ld hl,str_bcu
0404F7 CD 77 00 04 0849*      call printString
0404FB E1          0850*      pop hl
0404FC E5          0851*      push hl
0404FD CD 97 00 04 0852*      call printHex24
040501 3E 20       0853*      ld a,' '
040503 5B D7       0854*      rst.lil 10h
040505 C1          0855*      pop bc
040506 E1          0856*      pop hl
040507 F1          0857*      pop af
040508 C9          0858*      ret
040509             0859*  
040509             0860*  ; print deu to screen in hexidecimal format
040509             0861*  ; inputs: none
040509             0862*  ; destroys: nothing
040509             0863*  print_hex_de:
040509 F5          0864*      push af
04050A E5          0865*      push hl
04050B D5          0866*      push de
04050C 21 31 05 04 0867*      ld hl,str_deu
040510 CD 77 00 04 0868*      call printString
040514 E1          0869*      pop hl
040515 E5          0870*      push hl
040516 CD 97 00 04 0871*      call printHex24
04051A 3E 20       0872*      ld a,' '
04051C 5B D7       0873*      rst.lil 10h
04051E D1          0874*      pop de
04051F E1          0875*      pop hl
040520 F1          0876*      pop af
040521 C9          0877*      ret
040522             0878*  
040522 20 61 66 3D 0879*  str_afu: db " af=",0
       00          
040527 20 68 6C 3D 0880*  str_hlu: db " hl=",0
       00          
04052C 20 62 63 3D 0881*  str_bcu: db " bc=",0
       00          
040531 20 64 65 3D 0882*  str_deu: db " de=",0
       00          
040536 20 69 78 3D 0883*  str_ixu: db " ix=",0
       00          
04053B 20 69 79 3D 0884*  str_iyu: db " iy=",0
       00          
040540             0885*  
040540             0886*  ; print udeuhl to screen in hexidecimal format
040540             0887*  ; inputs: none
040540             0888*  ; outputs: concatenated hexidecimal udeuhl
040540             0889*  ; destroys: nothing
040540             0890*  dumpUDEUHLHex:
040540             0891*  ; store everything in scratch
040540 22 9F 05 04 0892*      ld (uhl),hl
040544 ED 43 A2 05 0893*      ld (ubc),bc
       04          
040549 ED 53 A5 05 0894*      ld (ude),de
       04          
04054E DD 22 A8 05 0895*      ld (uix),ix
       04          
040553 FD 22 AB 05 0896*      ld (uiy),iy
       04          
040558 F5          0897*      push af
040559             0898*  
040559             0899*  ; print each register
040559             0900*  
040559 21 93 05 04 0901*      ld hl,str_udeuhl
04055D CD 77 00 04 0902*      call printString
040561 2A A5 05 04 0903*      ld hl,(ude)
040565 CD 97 00 04 0904*      call printHex24
040569 3E 2E       0905*      ld a,'.' ; print a dot to separate the values
04056B 5B D7       0906*      rst.lil 10h
04056D 2A 9F 05 04 0907*      ld hl,(uhl)
040571 CD 97 00 04 0908*      call printHex24
040575 CD 8C 00 04 0909*      call printNewLine
040579             0910*  
040579             0911*  ; restore everything
040579 2A 9F 05 04 0912*      ld hl, (uhl)
04057D ED 4B A2 05 0913*      ld bc, (ubc)
       04          
040582 ED 5B A5 05 0914*      ld de, (ude)
       04          
040587 DD 2A A8 05 0915*      ld ix, (uix)
       04          
04058C FD 2A AB 05 0916*      ld iy, (uiy)
       04          
040591 F1          0917*      pop af
040592             0918*  ; all done
040592 C9          0919*      ret
040593             0920*  
040593 75 64 65 2E 0921*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04059C             0922*  
04059C             0923*  ; global scratch memory for registers
04059C 00 00 00    0924*  uaf: dl 0
04059F 00 00 00    0925*  uhl: dl 0
0405A2 00 00 00    0926*  ubc: dl 0
0405A5 00 00 00    0927*  ude: dl 0
0405A8 00 00 00    0928*  uix: dl 0
0405AB 00 00 00    0929*  uiy: dl 0
0405AE 00 00 00    0930*  usp: dl 0
0405B1 00 00 00    0931*  upc: dl 0
0405B4             0932*  
0405B4             0933*  ; inputs: whatever is in the flags register
0405B4             0934*  ; outputs: binary representation of flags
0405B4             0935*  ;          with a header so we know which is what
0405B4             0936*  ; destroys: nothing
0405B4             0937*  ; preserves: everything
0405B4             0938*  dumpFlags:
0405B4             0939*  ; first we curse zilog for not giving direct access to flags
0405B4 F5          0940*      push af ; this is so we can send it back unharmed
0405B5 F5          0941*      push af ; this is so we can pop it to hl
0405B6             0942*  ; store everything in scratch
0405B6 22 9F 05 04 0943*      ld (uhl),hl
0405BA ED 43 A2 05 0944*      ld (ubc),bc
       04          
0405BF ED 53 A5 05 0945*      ld (ude),de
       04          
0405C4 DD 22 A8 05 0946*      ld (uix),ix
       04          
0405C9 FD 22 AB 05 0947*      ld (uiy),iy
       04          
0405CE             0948*  ; next we print the header
0405CE 21 FA 05 04 0949*      ld hl,@header
0405D2 CD 77 00 04 0950*      call printString
0405D6 E1          0951*      pop hl ; flags are now in l
0405D7 7D          0952*      ld a,l ; flags are now in a
0405D8 CD 15 03 04 0953*      call printBin8
0405DC CD 8C 00 04 0954*      call printNewLine
0405E0             0955*  ; restore everything
0405E0 2A 9F 05 04 0956*      ld hl, (uhl)
0405E4 ED 4B A2 05 0957*      ld bc, (ubc)
       04          
0405E9 ED 5B A5 05 0958*      ld de, (ude)
       04          
0405EE DD 2A A8 05 0959*      ld ix, (uix)
       04          
0405F3 FD 2A AB 05 0960*      ld iy, (uiy)
       04          
0405F8 F1          0961*      pop af ; send her home the way she came
0405F9 C9          0962*      ret
0405FA             0963*  ; Bit 7 (S): Sign flag
0405FA             0964*  ; Bit 6 (Z): Zero flag
0405FA             0965*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0405FA             0966*  ; Bit 4 (H): Half Carry flag
0405FA             0967*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0405FA             0968*  ; Bit 2 (PV): Parity/Overflow flag
0405FA             0969*  ; Bit 1 (N): Subtract flag
0405FA             0970*  ; Bit 0 (C): Carry flag
0405FA 53 5A 78 48 0971*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
040605             0972*  
040605             0973*  ; set all the bits in the flag register
040605             0974*  ; more of an academic exercise than anything useful
040605             0975*  ; inputs; none
040605             0976*  ; outputs; a=0,f=255
040605             0977*  ; destroys: flags, hl
040605             0978*  ; preserves: a, because why not
040605             0979*  setAllFlags:
040605 21 FF 00 00 0980*      ld hl,255
040609 67          0981*      ld h,a ; four cycles to preserve a is cheap
04060A E5          0982*      push hl
04060B F1          0983*      pop af
04060C C9          0984*      ret
04060D             0985*  
04060D             0986*  ; reset all the bits in the flag register
04060D             0987*  ; unlike its inverse counterpart, this may actually be useful
04060D             0988*  ; inputs; none
04060D             0989*  ; outputs; a=0,f=0
04060D             0990*  ; destroys: flags, hl
04060D             0991*  ; preserves: a, because why not
04060D             0992*  resetAllFlags:
04060D 21 00 00 00 0993*      ld hl,0
040611 67          0994*      ld h,a ; four cycles to preserve a is cheap
040612 E5          0995*      push hl
040613 F1          0996*      pop af
040614 C9          0997*      ret
040615             0998*  
040615             0999*  ; wait until user presses a key
040615             1000*  ; inputs: none
040615             1001*  ; outputs: ascii code of key pressed in a
040615             1002*  ; destroys: af,ix
040615             1003*  waitKeypress:
040615             1004*      MOSCALL mos_getkey
040615 3E 00       0001*M 			LD	A, function
040617 5B CF       0002*M 			RST.LIL	08h
040619 C9          1005*      ret
04061A             1006*  
04061A             1007*  ; print bytes from an address to the screen in hexidecimal format
04061A             1008*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04061A             1009*  ; outputs: values of each byte printed to screen separated by spaces
04061A             1010*  ; destroys: nothing
04061A             1011*  dumpMemoryHex:
04061A             1012*  ; save registers to the stack
04061A C5          1013*      push bc
04061B E5          1014*      push hl
04061C F5          1015*      push af
04061D             1016*  
04061D             1017*  ; print the address and separator
04061D CD 97 00 04 1018*      call printHex24
040621 3E 3A       1019*      ld a,':'
040623 5B D7       1020*      rst.lil 10h
040625 3E 20       1021*      ld a,' '
040627 5B D7       1022*      rst.lil 10h
040629             1023*  
040629             1024*  ; set b to be our loop counter
040629 F1          1025*      pop af
04062A 47          1026*      ld b,a
04062B E1          1027*      pop hl
04062C E5          1028*      push hl
04062D F5          1029*      push af
04062E             1030*  @loop:
04062E             1031*  ; print the byte
04062E 7E          1032*      ld a,(hl)
04062F CD A5 00 04 1033*      call printHex8
040633             1034*  ; print a space
040633 3E 20       1035*      ld a,' '
040635 5B D7       1036*      rst.lil 10h
040637 23          1037*      inc hl
040638 10 F4       1038*      djnz @loop
04063A CD 8C 00 04 1039*      call printNewLine
04063E             1040*  
04063E             1041*  ; restore everything
04063E F1          1042*      pop af
04063F E1          1043*      pop hl
040640 C1          1044*      pop bc
040641             1045*  
040641             1046*  ; all done
040641 C9          1047*      ret
040642             1048*  
040642             1049*  
040642             1050*  ; print bytes from an address to the screen in binary format
040642             1051*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040642             1052*  ; outputs: values of each byte printed to screen separated by spaces
040642             1053*  ; destroys: nothing
040642             1054*  dumpMemoryBin:
040642             1055*  ; save all registers to the stack
040642 F5          1056*      push af
040643 C5          1057*      push bc
040644 D5          1058*      push de
040645 E5          1059*      push hl
040646 DD E5       1060*      push ix
040648 FD E5       1061*      push iy
04064A             1062*  
04064A             1063*  ; set b to be our loop counter
04064A 47          1064*      ld b,a
04064B             1065*  @loop:
04064B             1066*  ; print the byte
04064B 7E          1067*      ld a,(hl)
04064C E5          1068*      push hl
04064D C5          1069*      push bc
04064E CD 15 03 04 1070*      call printBin8
040652 C1          1071*      pop bc
040653             1072*  ; print a space
040653 3E 20       1073*      ld a,' '
040655 5B D7       1074*      rst.lil 10h
040657 E1          1075*      pop hl
040658 23          1076*      inc hl
040659 10 F0       1077*      djnz @loop
04065B CD 8C 00 04 1078*      call printNewLine
04065F             1079*  
04065F             1080*  ; restore everything
04065F FD E1       1081*      pop iy
040661 DD E1       1082*      pop ix
040663 E1          1083*      pop hl
040664 D1          1084*      pop de
040665 C1          1085*      pop bc
040666 F1          1086*      pop af
040667             1087*  ; all done
040667 C9          1088*      ret
040668             1089*  
040668             1090*  ; print bytes from an address to the screen in binary format
040668             1091*  ; with the bits of each byte in reverse order (lsb first)
040668             1092*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040668             1093*  ; outputs: values of each byte printed to screen separated by spaces
040668             1094*  ; destroys: nothing
040668             1095*  dumpMemoryBinRev:
040668             1096*  ; save all registers to the stack
040668 F5          1097*      push af
040669 C5          1098*      push bc
04066A D5          1099*      push de
04066B E5          1100*      push hl
04066C DD E5       1101*      push ix
04066E FD E5       1102*      push iy
040670             1103*  
040670             1104*  ; set b to be our loop counter
040670 47          1105*      ld b,a
040671             1106*  @loop:
040671             1107*  ; print the byte
040671 7E          1108*      ld a,(hl)
040672 E5          1109*      push hl
040673 C5          1110*      push bc
040674 CD 3A 03 04 1111*      call printBin8Rev
040678 C1          1112*      pop bc
040679             1113*  ; print a space
040679 3E 20       1114*      ld a,' '
04067B 5B D7       1115*      rst.lil 10h
04067D E1          1116*      pop hl
04067E 23          1117*      inc hl
04067F 10 F0       1118*      djnz @loop
040681 CD 8C 00 04 1119*      call printNewLine
040685             1120*  
040685             1121*  ; restore everything
040685 FD E1       1122*      pop iy
040687 DD E1       1123*      pop ix
040689 E1          1124*      pop hl
04068A D1          1125*      pop de
04068B C1          1126*      pop bc
04068C F1          1127*      pop af
04068D             1128*  ; all done
04068D C9          1129*      ret
04068E             0031       include "maths.inc"
04068E             0001*  ; test the sign of HL
04068E             0002*  ; inputs: HL obviously
04068E             0003*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
04068E             0004*  ; destroys: flags
04068E             0005*      MACRO sign_hlu
04068E             0006*      add hl,de
04068E             0007*      or a
04068E             0008*      sbc hl,de
04068E             0009*      ENDMACRO
04068E             0010*  
04068E             0011*  
04068E             0012*  ;------------------------------------------------------------------------
04068E             0013*  ; Scratch area for calculations
04068E             0014*  ;------------------------------------------------------------------------
04068E 00 00 00    0015*  scratch1: dw24 0 ;bit manipulation buffer 1
040691 00 00 00    0016*  scratch2: dw24 0 ;bit manipulation buffer 2
040694             0017*  
040694             0018*  ; absolute value of hlu
040694             0019*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040694             0020*  ;         s1,z0,pv0,n1,c0 if hlu was negative
040694             0021*  ;         s0,z1,pv0,n1,c0 if hlu was zero
040694             0022*  ;         s0,z0,pv0,n1,c0 if hlu was positive
040694             0023*  ; destroys: a
040694             0024*  hlu_abs:
040694 19          0025*      add hl,de
040695 B7          0026*      or a
040696 ED 52       0027*      sbc hl,de
040698 FA 9D 06 04 0028*      jp m,@is_neg
04069C C9          0029*      ret ; hlu is positive or zero so we're done
04069D             0030*  @is_neg:
04069D F5          0031*      push af ; otherwise, save current flags for return
04069E CD A4 06 04 0032*      call neg_hlu ; negate hlu
0406A2 F1          0033*      pop af ; get back flags
0406A3 C9          0034*      ret
0406A4             0035*  
0406A4             0036*  ; flip the sign of hlu
0406A4             0037*  ; inputs: hlu
0406A4             0038*  ; returns: 0-hlu, flags set appropriately for the result:
0406A4             0039*  ;         s1,z0,pv0,n1,c1 if result is negative
0406A4             0040*  ;         s0,z1,pv0,n1,c0 if result is zero
0406A4             0041*  ;         s0,z0,pv0,n1,c1 if result is positive
0406A4             0042*  ; destroys a
0406A4             0043*  neg_hlu:
0406A4 D5          0044*      push de ; save de
0406A5 EB          0045*      ex de,hl ; put hl into de
0406A6 21 00 00 00 0046*      ld hl,0 ; clear hl
0406AA AF          0047*      xor a ; clear carry
0406AB ED 52       0048*      sbc hl,de ; 0-hlu = -hlu
0406AD D1          0049*      pop de ; get de back
0406AE C9          0050*      ret ; easy peasy
0406AF             0051*  
0406AF             0052*  ;------------------------------------------------------------------------
0406AF             0053*  ; divide hlu by 2, inspired by above
0406AF             0054*  ;------------------------------------------------------------------------
0406AF             0055*  hlu_div2:
0406AF 22 8E 06 04 0056*      ld (scratch1),hl
0406B3 21 90 06 04 0057*      ld hl,scratch1+2
0406B7 CB 1E       0058*      rr (hl)
0406B9 2B          0059*      dec hl
0406BA CB 1E       0060*      rr (hl)
0406BC 2B          0061*      dec hl
0406BD CB 1E       0062*      rr (hl)
0406BF 23          0063*      inc hl
0406C0 23          0064*      inc hl
0406C1 2A 8E 06 04 0065*      ld hl,(scratch1)
0406C5 C9          0066*      ret
0406C6             0067*  
0406C6             0068*  ; this is my little hack to divide by 16
0406C6             0069*  hlu_div16:
0406C6 AF          0070*      xor a
0406C7 29          0071*      add hl,hl
0406C8 17          0072*      rla
0406C9 29          0073*      add hl,hl
0406CA 17          0074*      rla
0406CB 29          0075*      add hl,hl
0406CC 17          0076*      rla
0406CD 29          0077*      add hl,hl
0406CE 17          0078*      rla
0406CF 22 DC 06 04 0079*      ld (@scratch),hl
0406D3 32 DF 06 04 0080*      ld (@scratch+3),a
0406D7 2A DD 06 04 0081*      ld hl,(@scratch+1)
0406DB C9          0082*      ret
0406DC             0083*  @scratch: ds 4
0406E0             0084*  
0406E0             0085*  ; hlu signed division by 256
0406E0             0086*  ; returns: hlu / 256
0406E0             0087*  ; destroys: af
0406E0             0088*  hlu_sdiv256:
0406E0 AF          0089*      xor a ; assume hl is positive
0406E1 22 F7 06 04 0090*      ld (@buffer),hl
0406E5             0091*      sign_hlu
0406E5 19          0001*M     add hl,de
0406E6 B7          0002*M     or a
0406E7 ED 52       0003*M     sbc hl,de
0406E9 F2 EE 06 04 0092*      jp p,@hl_pos
0406ED 3D          0093*      dec a
0406EE             0094*  @hl_pos:
0406EE 32 FA 06 04 0095*      ld (@buffer+3),a
0406F2 2A F8 06 04 0096*      ld hl,(@buffer+1)
0406F6 C9          0097*      ret
0406F7             0098*  @buffer: ds 4
0406FB             0099*  
0406FB             0100*  ; hlu 1 byte right shift, unsigned
0406FB             0101*  ; returns: hlu / 256, fractional portion in a
0406FB             0102*  ; destroys: af
0406FB             0103*  hlu_udiv256:
0406FB AF          0104*      xor a
0406FC 32 0D 07 04 0105*      ld (@buffer+3),a
040700 7D          0106*      ld a,l ; save the fractional portion
040701 22 0A 07 04 0107*      ld (@buffer),hl
040705 2A 0B 07 04 0108*      ld hl,(@buffer+1)
040709 C9          0109*      ret
04070A             0110*  @buffer: ds 4
04070E             0111*  
04070E             0112*      MACRO hlu_mul256
04070E             0113*      add hl,hl ; * 2
04070E             0114*      add hl,hl ; * 4
04070E             0115*      add hl,hl ; * 8
04070E             0116*      add hl,hl ; * 16
04070E             0117*      add hl,hl ; * 32
04070E             0118*      add hl,hl ; * 64
04070E             0119*      add hl,hl ; * 128
04070E             0120*      add hl,hl ; * 256
04070E             0121*      ENDMACRO
04070E             0122*  
04070E             0123*  ; compute the modulo of hlu by deu
04070E             0124*  ; outputs: hlu = hlu % deu
04070E             0125*  ; destroys: f, hl
04070E             0126*  hlu_mod:
04070E B7          0127*      or a ; clear carry
04070F             0128*  @loop:
04070F ED 52       0129*      sbc hl,de
040711 DA 19 07 04 0130*      jp c, @end
040715 C3 0F 07 04 0131*      jp @loop
040719             0132*  @end:
040719 19          0133*      add hl,de
04071A C9          0134*      ret
04071B             0135*  
04071B             0136*  
04071B 00 00 00 00 0137*  add_bcd_arg1: db #00,#00,#00,#00
04071F 00 00 00 00 0138*  add_bcd_arg2: db #00,#00,#00,#00
040723             0139*  
040723             0140*  ; set bcd values in a scratch memory address from registers bcde
040723             0141*  ; input: hl; scratch address,bcde; 8-place bcd number
040723             0142*  ; destroys ; hl
040723             0143*  set_bcd:
040723 73          0144*      ld (hl),e
040724 23          0145*      inc hl
040725 72          0146*      ld (hl),d
040726 23          0147*      inc hl
040727 71          0148*      ld (hl),c
040728 23          0149*      inc hl
040729 70          0150*      ld (hl),b
04072A C9          0151*      ret
04072B             0152*  
04072B             0153*  ; load bcd values from a scratch memory address to bcde
04072B             0154*  ; input: hl; scratch address
04072B             0155*  ; output: bcde; 8-place bcd number
04072B             0156*  ; destroys: hl
04072B             0157*  get_bcd:
04072B 5E          0158*      ld e,(hl)
04072C 23          0159*      inc hl
04072D 56          0160*      ld d,(hl)
04072E 23          0161*      inc hl
04072F 4E          0162*      ld c,(hl)
040730 23          0163*      inc hl
040731 46          0164*      ld b,(hl)
040732 C9          0165*      ret
040733             0166*  
040733             0167*  ; BCD addition
040733             0168*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040733             0169*  ;       a is the number of bytes holding each number (number of places/2)
040733             0170*  ; outputs: (hl) + (de) --> (hl)
040733             0171*  ; destroys: a,b,de,hl
040733             0172*  add_bcd:
040733 47          0173*      ld b,a ; loop counter
040734 AF          0174*      xor a ; reset a, clear carry flag
040735             0175*  adcec:
040735 1A          0176*      ld a,(de) ; addend to acc
040736 8E          0177*      adc a,(hl) ; add (hl) to acc
040737 27          0178*      daa ; adjust result to bcd
040738 77          0179*      ld (hl),a ; store result
040739 23          0180*      inc hl ; advance memory pointers
04073A 13          0181*      inc de
04073B 10 F8       0182*      djnz adcec ; loop until b == 0
04073D C9          0183*      ret
04073E             0184*  
04073E             0185*  ; BCD subtraction
04073E             0186*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04073E             0187*  ;       a is the number of bytes holding each number (number of places/2)
04073E             0188*  ; outputs: (hl) - (de) --> (hl)
04073E             0189*  ; destroys: a,b,de,hl
04073E             0190*  sub_bcd:
04073E 47          0191*      ld b,a ; loop counter
04073F AF          0192*      xor a ; reset a,clear carry flag
040740             0193*  subdec:
040740 1A          0194*      ld a,(de) ; subtrahend to acc
040741 9E          0195*      sbc a,(hl) ; subtract (hl) from acc
040742 27          0196*      daa ; adjust result to bcd
040743 77          0197*      ld (hl),a ; store result
040744 23          0198*      inc hl ; advance memory pointers
040745 13          0199*      inc de
040746 10 F8       0200*      djnz subdec ; loop until b == 0
040748 C9          0201*      ret
040749             0202*  
040749             0203*  ; http://www.z80.info/pseudo-random.txt
040749             0204*  rand_8:
040749 C5          0205*      push bc
04074A 3A 5D 07 04 0206*      ld a,(r_seed)
04074E 4F          0207*      ld c,a
04074F             0208*  
04074F 0F          0209*      rrca ; multiply by 32
040750 0F          0210*      rrca
040751 0F          0211*      rrca
040752 EE 1F       0212*      xor 0x1f
040754             0213*  
040754 81          0214*      add a,c
040755 DE FF       0215*      sbc a,255 ; carry
040757             0216*  
040757 32 5D 07 04 0217*      ld (r_seed),a
04075B C1          0218*      pop bc
04075C C9          0219*      ret
04075D 50          0220*  r_seed: defb $50
04075E             0221*  
04075E             0222*  ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
04075E             0223*  prng24:
04075E             0224*  ;;Expects ADL mode.
04075E             0225*  ;;Output: HL
04075E             0226*  ;;50cc
04075E             0227*  ;;33 bytes
04075E             0228*  ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
04075E ED 5B 7F 07 0229*      ld de,(seed1)
       04          
040763 B7          0230*      or a
040764 ED 62       0231*      sbc hl,hl
040766 19          0232*      add hl,de
040767 29          0233*      add hl,hl
040768 29          0234*      add hl,hl
040769 2C          0235*      inc l
04076A 19          0236*      add hl,de
04076B 22 7F 07 04 0237*      ld (seed1),hl
04076F 2A 82 07 04 0238*      ld hl,(seed2)
040773 29          0239*      add hl,hl
040774 9F          0240*      sbc a,a
040775 E6 1B       0241*      and %00011011
040777 AD          0242*      xor l
040778 6F          0243*      ld l,a
040779 22 82 07 04 0244*      ld (seed2),hl
04077D 19          0245*      add hl,de
04077E C9          0246*      ret
04077F 00 00 00    0247*  seed1: dl 0
040782 00 00 00    0248*  seed2: dl 0
040785             0032       include "files.inc"
040785             0001*  ; load to onboard 8k sram
040785             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
040785             0033       include "fixed168.inc"
040785             0001*  ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040785             0002*  ; uses EZ80 MLT instruction for speed
040785             0003*  ; operation: UHL * A --> UHL
040785             0004*  ; destroys: AF, HL
040785             0005*  smul24x8:
040785             0006*  ; make hl positive and store sign flag
040785 CD 94 06 04 0007*      call hlu_abs
040789 F5          0008*      push af
04078A             0009*  ; do the division
04078A CD 95 07 04 0010*      call mul24x8 ; hl = product
04078E             0011*  ; adjust sign of result
04078E F1          0012*      pop af ; sign de
04078F F0          0013*      ret p ; hl was positive, nothing to do
040790 CD A4 06 04 0014*      call neg_hlu ; result is negative
040794 C9          0015*      ret
040795             0016*  
040795             0017*  ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040795             0018*  ; uses EZ80 MLT instruction for speed
040795             0019*  ; operation: UHL * A --> AUHL
040795             0020*  ; destroys: AF, HL
040795             0021*  mul24x8:
040795 D5          0022*      push de ; preserve de
040796             0023*  ; low byte
040796 5D          0024*      ld e,l
040797 57          0025*      ld d,a
040798 ED 5C       0026*      mlt de
04079A 6B          0027*      ld l,e ; product low byte
04079B 08          0028*      ex af,af' ; save multiplier
04079C 7A          0029*      ld a,d ; carry
04079D 08          0030*      ex af,af' ; save carry, restore multiplier
04079E             0031*  ; high byte
04079E 5C          0032*      ld e,h
04079F 57          0033*      ld d,a
0407A0 ED 5C       0034*      mlt de
0407A2 08          0035*      ex af,af' ; save multiplier, restore carry
0407A3 83          0036*      add a,e ; add carry
0407A4 67          0037*      ld h,a ; product middle byte
0407A5 7A          0038*      ld a,d ; carry
0407A6 08          0039*      ex af,af' ; save carry, restore multiplier
0407A7             0040*  ; upper byte
0407A7 22 C2 07 04 0041*      ld (@scratch),hl ; 7 cycles
0407AB 5F          0042*      ld e,a
0407AC 3A C4 07 04 0043*      ld a,(@scratch+2)
0407B0 57          0044*      ld d,a
0407B1 ED 5C       0045*      mlt de
0407B3 08          0046*      ex af,af' ; restore carry
0407B4 8B          0047*      adc a,e ; add carry
0407B5 32 C4 07 04 0048*      ld (@scratch+2),a ; 5 cycles
0407B9 2A C2 07 04 0049*      ld hl,(@scratch) ; 7 cycles
0407BD             0050*  ; highest byte
0407BD 3E 00       0051*      ld a,0 ; preserve carry flag
0407BF 8A          0052*      adc a,d ; product highest byte
0407C0 D1          0053*      pop de ; restore de
0407C1 C9          0054*      ret
0407C2             0055*  @scratch: ds 3
0407C5             0056*  
0407C5 00 00 00 00 0057*  mul24out: blkb 6,0
       00 00       
0407CB             0058*  
0407CB             0059*  ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
0407CB             0060*  ; operation: UHL * UDE --> mul24out
0407CB             0061*  mul24:
0407CB DD E5       0062*      push ix ; preserve
0407CD             0063*  ; point to output buffer and clear it
0407CD DD 21 C5 07 0064*      ld ix,mul24out
       04          
0407D2 C5          0065*      push bc
0407D3 01 00 00 00 0066*      ld bc,0
0407D7 DD 0F 00    0067*      ld (ix),bc
0407DA DD 0F 03    0068*      ld (ix+3),bc
0407DD C1          0069*      pop bc
0407DE             0070*  ; STEP 1: UHL * E
0407DE 7B          0071*      ld a,e
0407DF E5          0072*      push hl
0407E0 CD 95 07 04 0073*      call mul24x8
0407E4 DD 2F 00    0074*      ld (ix+0),hl
0407E7 DD 77 03    0075*      ld (ix+3),a
0407EA             0076*  ; STEP 2: UHL * D
0407EA E1          0077*      pop hl
0407EB E5          0078*      push hl
0407EC 7A          0079*      ld a,d
0407ED CD 95 07 04 0080*      call mul24x8
0407F1 CD 0A 08 04 0081*      call @accumulate
0407F5             0082*  ; STEP 3: UHL * DEU
0407F5 E1          0083*      pop hl
0407F6 ED 53 3A 08 0084*      ld (@de),de
       04          
0407FB 3A 3C 08 04 0085*      ld a,(@de+2)
0407FF CD 95 07 04 0086*      call mul24x8
040803 CD 0A 08 04 0087*      call @accumulate
040807             0088*  ; all done
040807 DD E1       0089*      pop ix ; restore
040809 C9          0090*      ret
04080A             0091*  @accumulate:
04080A DD 23       0092*      inc ix
04080C             0093*  ; highest byte of product to carry
04080C DD 77 03    0094*      ld (ix+3),a
04080F             0095*  ; low byte of product
04080F 7D          0096*      ld a,l
040810 DD 86 00    0097*      add a,(ix+0)
040813 DD 77 00    0098*      ld (ix+0),a
040816             0099*  ; high byte of product
040816 7C          0100*      ld a,h
040817 DD 8E 01    0101*      adc a,(ix+1)
04081A DD 77 01    0102*      ld (ix+1),a
04081D             0103*  ; uppper byte of product
04081D 22 37 08 04 0104*      ld (@hl),hl
040821 3A 39 08 04 0105*      ld a,(@hl+2)
040825 DD 8E 02    0106*      adc a,(ix+2)
040828 DD 77 02    0107*      ld (ix+2),a
04082B             0108*  ; carry
04082B 3E 00       0109*      ld a,0 ; preserve flags
04082D DD 8E 03    0110*      adc a,(ix+3)
040830 DD 77 03    0111*      ld (ix+3),a
040833 C9          0112*      ret
040834             0113*  
040834 00 00 00    0114*  @ix: dl 0
040837 00 00 00    0115*  @hl: dl 0
04083A 00 00 00    0116*  @de: dl 0
04083D             0117*  
04083D             0118*  ; UHL * UDE --> UHL (unsigned)
04083D             0119*  umul24:
04083D CD CB 07 04 0120*      call mul24
040841 2A C5 07 04 0121*      ld hl,(mul24out)
040845 C9          0122*      ret
040846             0123*  
040846             0124*  ; UH.L = UH.L*UD.E (unsigned)
040846             0125*  umul168:
040846 CD CB 07 04 0126*      call mul24
04084A 2A C6 07 04 0127*      ld hl,(mul24out+1)
04084E C9          0128*      ret
04084F             0129*  
04084F             0130*  ; UH.L * UD.E --> UH.L (signed)
04084F             0131*  smul168:
04084F             0132*  ; make everything positive and store sign flags
04084F CD 94 06 04 0133*      call hlu_abs
040853 F5          0134*      push af
040854 EB          0135*      ex de,hl
040855 CD 94 06 04 0136*      call hlu_abs
040859 EB          0137*      ex de,hl
04085A F5          0138*      push af
04085B             0139*  ; do the division
04085B CD 46 08 04 0140*      call umul168 ; hl = product
04085F             0141*  ; adjust sign of result
04085F F1          0142*      pop af ; sign de
040860 FA 6B 08 04 0143*      jp m,@de_neg
040864 F1          0144*      pop af ; sign hl
040865 F0          0145*      ret p ; both positive, nothing to do
040866             0146*  @hl_neg:
040866 CD A4 06 04 0147*      call neg_hlu ; de pos, hl neg, result is negative
04086A C9          0148*      ret
04086B             0149*  @de_neg:
04086B F1          0150*      pop af
04086C F8          0151*      ret m ; both negative, nothing to do
04086D CD A4 06 04 0152*      call neg_hlu ; result is negative
040871 C9          0153*      ret
040872             0154*  
040872             0155*  ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040872             0156*  ; perform unsigned division of 16.8 fixed place values
040872             0157*  ; with an unsigned 16.8 fixed place result and 24-bit remainder
040872             0158*  udiv168:
040872             0159*  ; back up divisor
040872 ED 53 A9 08 0160*      ld (@ude),de
       04          
040877             0161*  ; get the 16-bit integer part of the quotient
040877 CD DA 08 04 0162*      call udiv24 ; de = quotient, hl = remainder
04087B             0163*  ; load quotient to upper three bytes of output
04087B ED 53 B0 08 0164*      ld (div168_out+1),de
       04          
040880             0165*  @div256:
040880             0166*  ; multiply remainder by 256
040880             0167*      hlu_mul256
040880 29          0001*M     add hl,hl ; * 2
040881 29          0002*M     add hl,hl ; * 4
040882 29          0003*M     add hl,hl ; * 8
040883 29          0004*M     add hl,hl ; * 16
040884 29          0005*M     add hl,hl ; * 32
040885 29          0006*M     add hl,hl ; * 64
040886 29          0007*M     add hl,hl ; * 128
040887 29          0008*M     add hl,hl ; * 256
040888             0168*  ; skip fractional computation if remainder is zero
040888             0169*      sign_hlu
040888 19          0001*M     add hl,de
040889 B7          0002*M     or a
04088A ED 52       0003*M     sbc hl,de
04088C 20 03       0170*      jr nz,@div_frac
04088E AF          0171*      xor a
04088F 18 0A       0172*      jr @write_frac
040891             0173*  ; now divide the shifted remainder by the divisor
040891             0174*  @div_frac:
040891 ED 5B A9 08 0175*      ld de,(@ude) ; get back divisor
       04          
040896 CD DA 08 04 0176*      call udiv24 ; de = quotient, hl = remainder
04089A             0177*  ; load low byte of quotient to low byte of output
04089A 7B          0178*      ld a,e
04089B             0179*  @write_frac:
04089B 32 AF 08 04 0180*      ld (div168_out),a
04089F             0181*  ; load de with return value
04089F ED 5B AF 08 0182*      ld de,(div168_out)
       04          
0408A4             0183*  ; load a with any overflow
0408A4 3A B2 08 04 0184*      ld a,(div168_out+3)
0408A8 C9          0185*      ret ; ud.e is the 16.8 result
0408A9             0186*  @ude: ds 6
0408AF             0187*  div168_out: ds 4 ; the extra byte is for overflow
0408B3             0188*  
0408B3             0189*  ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
0408B3             0190*  ; perform signed division of 16.8 fixed place values
0408B3             0191*  ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
0408B3             0192*  sdiv168:
0408B3             0193*  ; make everything positive and store sign flags
0408B3 CD 94 06 04 0194*      call hlu_abs
0408B7 F5          0195*      push af
0408B8 EB          0196*      ex de,hl
0408B9 CD 94 06 04 0197*      call hlu_abs
0408BD EB          0198*      ex de,hl
0408BE F5          0199*      push af
0408BF             0200*  ; do the division
0408BF CD 72 08 04 0201*      call udiv168 ; de = quotient, hl = remainder
0408C3             0202*  ; adjust sign of result
0408C3 F1          0203*      pop af ; sign de
0408C4 FA D1 08 04 0204*      jp m,@de_neg
0408C8 F1          0205*      pop af ; sign hl
0408C9 F0          0206*      ret p ; both positive, nothing to do
0408CA             0207*  @hl_neg:
0408CA EB          0208*      ex de,hl ; hl = quotient, de = remainder
0408CB CD A4 06 04 0209*      call neg_hlu ; de pos, hl neg, result is negative
0408CF EB          0210*      ex de,hl ; de = negated quotient, hl = remainder
0408D0 C9          0211*      ret
0408D1             0212*  @de_neg:
0408D1 F1          0213*      pop af
0408D2 F8          0214*      ret m ; both negative, nothing to do
0408D3 EB          0215*      ex de,hl ; hl = quotient, de = remainder
0408D4 CD A4 06 04 0216*      call neg_hlu ; result is negative
0408D8 EB          0217*      ex de,hl ; de = negated quotient, hl = remainder
0408D9 C9          0218*      ret
0408DA             0219*  
0408DA             0220*  ;------------------------------------------------------------------------
0408DA             0221*  ;  arith24.asm
0408DA             0222*  ;  24-bit ez80 arithmetic routines
0408DA             0223*  ;  Copyright (c) Shawn Sijnstra 2024
0408DA             0224*  ;  MIT license
0408DA             0225*  ;
0408DA             0226*  ;  This library was created as a tool to help make ez80
0408DA             0227*  ;  24-bit native assembly routines for simple mathematical problems
0408DA             0228*  ;  more widely available.
0408DA             0229*  ;
0408DA             0230*  ;------------------------------------------------------------------------
0408DA             0231*  ;
0408DA             0232*  ;------------------------------------------------------------------------
0408DA             0233*  ; udiv24
0408DA             0234*  ; Unsigned 24-bit division
0408DA             0235*  ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
0408DA             0236*  ;
0408DA             0237*  ; Uses AF BC DE HL
0408DA             0238*  ; Uses Restoring Division algorithm
0408DA             0239*  ;------------------------------------------------------------------------
0408DA             0240*  
0408DA             0241*  udiv24:
0408DA E5          0242*      push hl
0408DB C1          0243*      pop bc ;move dividend to BCU
0408DC 21 00 00 00 0244*      ld hl,0 ;result
0408E0 A7          0245*      and a
0408E1 ED 52       0246*      sbc hl,de ;test for div by 0
0408E3 C8          0247*      ret z ;it's zero, carry flag is clear
0408E4 19          0248*      add hl,de ;HL is 0 again
0408E5 3E 18       0249*      ld a,24 ;number of loops through.
0408E7             0250*  udiv1:
0408E7 C5          0251*      push bc ;complicated way of doing this because of lack of access to top bits
0408E8 E3          0252*      ex (sp),hl
0408E9 37          0253*      scf
0408EA ED 6A       0254*      adc hl,hl
0408EC E3          0255*      ex (sp),hl
0408ED C1          0256*      pop bc ;we now have bc = (bc * 2) + 1
0408EE             0257*  
0408EE ED 6A       0258*      adc hl,hl
0408F0 A7          0259*      and a ;is this the bug
0408F1 ED 52       0260*      sbc hl,de
0408F3 30 02       0261*      jr nc,udiv2
0408F5 19          0262*      add hl,de
0408F6             0263*  ;	dec	c
0408F6 0B          0264*      dec bc
0408F7             0265*  udiv2:
0408F7 3D          0266*      dec a
0408F8 20 ED       0267*      jr nz,udiv1
0408FA 37          0268*      scf ;flag used for div0 error
0408FB C5          0269*      push bc
0408FC D1          0270*      pop de ;remainder
0408FD C9          0271*      ret
0408FE             0272*  
0408FE             0273*  ;------------------------------------------------------------------------
0408FE             0274*  ;  END 24-bit ez80 arithmetic routines by Shawn Sijnstra
0408FE             0275*  ;------------------------------------------------------------------------
0408FE             0276*  
0408FE             0277*  
0408FE             0278*      ; include "trig24fast.inc"
0408FE             0279*  
0408FE             0280*  
0408FE             0281*  ; convert signed angles from a 360 to 256 degree circle
0408FE             0282*  ; inputs: uh.l is the angle360 in 16.8 fixed format
0408FE             0283*  ; outputs: uh.l is the angle256 in 16.8 fixed format
0408FE             0284*  ; destroys: TODO
0408FE             0285*  deg_360_to_256:
0408FE D5          0286*      push de ; preserve de
0408FF             0287*  ; make angle positive and store sign flag
0408FF CD 94 06 04 0288*      call hlu_abs
040903 F5          0289*      push af
040904             0290*  ; multiply by coversion factor of 256/360
040904 11 B6 00 00 0291*      ld de,0x0000B6 ; 0.711
040908 CD 46 08 04 0292*      call umul168 ; uh.l = uh.l * 0.711
04090C             0293*  ; restore sign flag and adjust output accordingly
04090C F1          0294*      pop af
04090D F2 15 09 04 0295*      jp p,@pos ; positive number
040911 CD A4 06 04 0296*      call neg_hlu
040915             0297*  @pos:
040915             0298*  ; restore de and return uh.l as the result
040915 D1          0299*      pop de
040916 C9          0300*      ret
040917             0301*  
040917             0302*  ; convert signed angles from a 256 to 360 degree circle
040917             0303*  ; inputs: uh.l is the angle256 in 16.8 fixed format
040917             0304*  ; outputs: uh.l is the angle360 in 16.8 fixed format
040917             0305*  ; destroys: TODO
040917             0306*  deg_256_to_360:
040917 D5          0307*      push de ; preserve de
040918             0308*  ; make angle positive and store sign flag
040918 CD 94 06 04 0309*      call hlu_abs
04091C F5          0310*      push af
04091D             0311*  ; multiply by coversion factor of 360/256
04091D 11 68 01 00 0312*      ld de,0x000168 ; 1.406
040921 CD 46 08 04 0313*      call umul168 ; uh.l = uh.l * 1.406
040925             0314*  ; restore sign flag and adjust output accordingly
040925 F1          0315*      pop af
040926 F2 2E 09 04 0316*      jp p,@pos ; positive number
04092A CD A4 06 04 0317*      call neg_hlu
04092E             0318*  @pos:
04092E             0319*  ; restore de and return uh.l as the result
04092E D1          0320*      pop de
04092F C9          0321*      ret
040930             0322*  
040930             0323*  ; fixed 16.8 routine
040930             0324*  ; cos(uh.l) --> uh.l
040930             0325*  ; destroys: f, hl
040930             0326*  cos168:
040930 D5          0327*      push de ; preserve de
040931             0328*  ; for cos we simply increment the angle by 90 degrees
040931             0329*  ; or 0x004000 in 16.8 degrees256
040931             0330*  ; which makes it a sin problem
040931 11 00 40 00 0331*      ld de,0x004000
040935 19          0332*      add hl,de ; modulo 256 happens below
040936 D1          0333*      pop de ; restore de
040937             0334*  ; fall through to sin168
040937             0335*  
040937             0336*  ; ---------------------
040937             0337*  ; fixed 16.8 routine
040937             0338*  ; sin(uh.l) --> uh.l
040937             0339*  ; destroys: f, hl
040937             0340*  sin168:
040937 D5          0341*      push de
040938             0342*  ; handle negative angles appropriately
040938 CD 94 06 04 0343*      call hlu_abs
04093C F2 45 09 04 0344*      jp p,@F
040940 11 00 00 FF 0345*      ld de,-256*256
040944 19          0346*      add hl,de
040945             0347*  @@:
040945 2E 03       0348*      ld l,3 ; multiply by 3 to get our lookup index
040947 ED 6C       0349*      mlt hl
040949 11 94 0B 04 0350*      ld de,sin_lut_168 ; grab the lut address
04094D 19          0351*      add hl,de ; bump hl by the index
04094E ED 27       0352*      ld hl,(hl) ; don't try this on a z80!
040950 D1          0353*      pop de
040951 C9          0354*      ret
040952             0355*  
040952             0356*  ; 16.8 fixed inputs / outputs
040952             0357*  ; takes: uh.l as angle in degrees 256
040952             0358*  ;        ud.e as radius
040952             0359*  ; returns ub.c as dx, ud.e as dy, uh.l as radius
040952             0360*  ;        displacements from origin (0,0)
040952             0361*  ; destroys: everything except indexes
040952             0362*  polar_to_cartesian:
040952             0363*  ; back up input parameters
040952 22 81 09 04 0364*      ld (@angle), hl
040956 ED 53 84 09 0365*      ld (@radius), de
       04          
04095B             0366*  ; compute dx = sin(uh.l) * ud.e
04095B CD 37 09 04 0367*      call sin168 ; uh.l = sin(uh.l)
04095F ED 5B 84 09 0368*      ld de,(@radius)
       04          
040964 CD 4F 08 04 0369*      call smul168 ; uh.l = dx
040968 E5          0370*      push hl
040969             0371*  ; compute dy = -cos(uh.l) * ud.e
040969 2A 81 09 04 0372*      ld hl,(@angle)
04096D CD 30 09 04 0373*      call cos168 ; uh.l = cos(uh.l)
040971 ED 5B 84 09 0374*      ld de,(@radius)
       04          
040976 CD 4F 08 04 0375*      call smul168 ; uh.l = dy
04097A CD A4 06 04 0376*      call neg_hlu ; invert dy for screen coords convention
04097E EB          0377*      ex de,hl ; de = dy for output
04097F C1          0378*      pop bc ; bc = dx for output
040980             0379*  ; and out
040980 C9          0380*      ret
040981             0381*  @angle: ds 3
040984             0382*  @radius: ds 3
040987             0383*  
040987             0384*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040987             0385*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040987             0386*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040987             0387*  ;         also populates scratch locations dx168 and dy168
040987             0388*  ; destroys: a,hl,bc,de
040987             0389*  dxy168:
040987             0390*  ; compute dx = x1-x0
040987 AF          0391*      xor a ; clear carry
040988 DD E5       0392*      push ix ; move ix to hl via the stack
04098A E1          0393*      pop hl ; hl = x1
04098B ED 42       0394*      sbc hl,bc ; hl = dx
04098D 22 A2 09 04 0395*      ld (dx168),hl ; dx to scratch
040991             0396*  ; compute dy = y1-y0
040991 AF          0397*      xor a ; clear carry
040992 FD E5       0398*      push iy ; move iy to hl via the stack
040994 E1          0399*      pop hl ; hl = y1
040995 ED 52       0400*      sbc hl,de ; hl = dy
040997 22 A8 09 04 0401*      ld (dy168),hl ; dy to scratch
04099B             0402*  ; populate output registers and return
04099B EB          0403*      ex de,hl ; ud.e = dy
04099C ED 4B A2 09 0404*      ld bc,(dx168) ; ub.c = dx
       04          
0409A1 C9          0405*      ret
0409A2 00 00 00 00 0406*  dx168: blkb 6,0
       00 00       
0409A8 00 00 00 00 0407*  dy168: blkb 6,0
       00 00       
0409AE             0408*  
0409AE             0409*  ; compute the euclidian distance between two cartesian coordinates
0409AE             0410*  ; using the formula d = sqrt(dx^2+dy^2)
0409AE             0411*  ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
0409AE             0412*  ; output; uh.l is the 16.8 fixed format distance
0409AE             0413*  ;         also populates scratch locations dx168 and dy168
0409AE             0414*  ; destroys: a,hl,bc,de
0409AE             0415*  ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
0409AE             0416*  ;       thus the result will always be an integer, albeit in 16.8 format
0409AE             0417*  distance168:
0409AE             0418*  ; compute dy^2
0409AE 2A A8 09 04 0419*      ld hl,(dy168)
0409B2 CD 94 06 04 0420*      call hlu_abs
0409B6 CD FB 06 04 0421*      call hlu_udiv256 ; make integer to avoid overflow
0409BA E5          0422*      push hl
0409BB D1          0423*      pop de
0409BC CD 3D 08 04 0424*      call umul24 ; hl = dy^2
0409C0 E5          0425*      push hl ; save dy^2
0409C1             0426*  ; compute dx^2
0409C1 2A A2 09 04 0427*      ld hl,(dx168)
0409C5 CD 94 06 04 0428*      call hlu_abs
0409C9 CD FB 06 04 0429*      call hlu_udiv256 ; make integer to avoid overflow
0409CD E5          0430*      push hl
0409CE D1          0431*      pop de
0409CF CD 3D 08 04 0432*      call umul24 ; hl = dx^2
0409D3             0433*  ; add dx^2 and dy^2
0409D3 D1          0434*      pop de ; de = dy^2 (was hl)
0409D4 19          0435*      add hl,de ; hl = dx^2 + dy^2
0409D5             0436*  ; compute the square root
0409D5 CD AE 0A 04 0437*      call sqrt24 ; de = sqrt(dx^2 + dy^2)
0409D9 EB          0438*      ex de,hl ; hl = distance
0409DA             0439*      hlu_mul256 ; convert back to 16.8 fixed
0409DA 29          0001*M     add hl,hl ; * 2
0409DB 29          0002*M     add hl,hl ; * 4
0409DC 29          0003*M     add hl,hl ; * 8
0409DD 29          0004*M     add hl,hl ; * 16
0409DE 29          0005*M     add hl,hl ; * 32
0409DF 29          0006*M     add hl,hl ; * 64
0409E0 29          0007*M     add hl,hl ; * 128
0409E1 29          0008*M     add hl,hl ; * 256
0409E2 C9          0440*      ret
0409E3             0441*  
0409E3             0442*  ; atan2_(ub.c,ud.e) --> uh.l
0409E3             0443*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0409E3             0444*  ;   whether inputs are integers or fractional doesn't matter
0409E3             0445*  ;   so long as the sign bit of the upper byte is correct
0409E3             0446*  ; output: uh.l is the 16.8 fixed angle in degrees 256
0409E3             0447*  ; angles are COMPASS HEADINGS based on
0409E3             0448*  ; screen coordinate conventions,where the y axis is flipped
0409E3             0449*  ; #E0 224      0       32 #20
0409E3             0450*  ;        -x,-y | +x,-y
0409E3             0451*  ; #C0 192------+------ 64 #40
0409E3             0452*  ;        -x,+y | +x,+y
0409E3             0453*  ; #A0 160   128 #80   96 #60
0409E3             0454*  atan2_168fast:
0409E3             0455*  ; get signs and make everything positive
0409E3             0456*  ; get abs(x) and store its original sign
0409E3 C5          0457*      push bc
0409E4 E1          0458*      pop hl
0409E5 CD 94 06 04 0459*      call hlu_abs ; if x was negative this also sets the sign flag
0409E9 E5          0460*      push hl ; store abs(x)
0409EA C1          0461*      pop bc ; bc = abs(x)
0409EB F5          0462*      push af ; store sign of x
0409EC             0463*  ; get abs(y) and store its original sign
0409EC EB          0464*      ex de,hl ; hl = y
0409ED CD 94 06 04 0465*      call hlu_abs ; if y was negative this also sets the sign flag
0409F1 EB          0466*      ex de,hl ; de = abs(y)
0409F2 F5          0467*      push af ; store sign of y
0409F3             0468*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0409F3             0469*  ; this ensures that our lookup value is between 0 and 1 inclusive
0409F3 AF          0470*      xor a ; clear the carry flag
0409F4 D5          0471*      push de
0409F5 E1          0472*      pop hl
0409F6 ED 42       0473*      sbc hl,bc
0409F8 F5          0474*      push af ; save sign of de - bc
0409F9 F2 02 0A 04 0475*      jp p,@1 ; bc <= de, so we skip ahead
0409FD             0476*  ; otherwise we swap bc and de
0409FD C5          0477*      push bc
0409FE E1          0478*      pop hl
0409FF EB          0479*      ex de,hl
040A00 E5          0480*      push hl
040A01 C1          0481*      pop bc
040A02             0482*  @1:
040A02             0483*  ; now we're ready to snag our preliminary result
040A02 C5          0484*      push bc
040A03 E1          0485*      pop hl
040A04 CD 72 0A 04 0486*      call atan_168fast ; uh.l comes back with prelim result
040A08             0487*  ; now we adjust uh.l based on sign of de - bc
040A08 F1          0488*      pop af
040A09 F2 15 0A 04 0489*      jp p,@2 ; bc <= de,so we skip ahead
040A0D EB          0490*      ex de,hl
040A0E 21 00 40 00 0491*      ld hl,64*256 ; subtract from 64 (90) degrees
040A12 AF          0492*      xor a ; clear the carry flag
040A13 ED 52       0493*      sbc hl,de
040A15             0494*  @2:
040A15             0495*  ; adjust the result based on quadrant
040A15             0496*  ; #E0 224      0       32 #20
040A15             0497*  ;        -x,-y | +x,-y
040A15             0498*  ; #C0 192------+------ 64 #40
040A15             0499*  ;        -x,+y | +x,+y
040A15             0500*  ; #A0 160   128 #80   96 #60
040A15 F1          0501*      pop af ; sign of y
040A16 CA 53 0A 04 0502*      jp z,@y_zero
040A1A F2 33 0A 04 0503*      jp p,@y_pos
040A1E             0504*  ; y neg,check x
040A1E F1          0505*      pop af ; sign of x
040A1F CA 2D 0A 04 0506*      jp z,@y_neg_x_zero
040A23 F2 32 0A 04 0507*      jp p,@y_neg_x_pos
040A27             0508*  ; y neg,x neg
040A27             0509*  ; angle is 128 to 256 (270 to 360)
040A27             0510*  ; negating the intermediate does the trick
040A27 CD A4 06 04 0511*      call neg_hlu
040A2B 18 31       0512*      jr @zero_hlu
040A2D             0513*  
040A2D             0514*  @y_neg_x_zero:
040A2D             0515*  ; y neg,x zero
040A2D             0516*  ; angle is 0
040A2D 21 00 00 00 0517*      ld hl,0
040A31 C9          0518*      ret
040A32             0519*  @y_neg_x_pos:
040A32             0520*  ; y neg,x pos
040A32             0521*  ; angle is 0 to 64 (0 to 90)
040A32             0522*  ; so we're good
040A32 C9          0523*      ret
040A33             0524*  
040A33             0525*  @y_pos:
040A33 F1          0526*      pop af ; sign of x
040A34 CA 43 0A 04 0527*      jp z,@y_pos_x_zero
040A38 F2 48 0A 04 0528*      jp p,@y_pos_x_pos
040A3C             0529*  ; y pos,x neg
040A3C             0530*  ; angle is 128 to 192 (180-270)
040A3C             0531*  ; so we add 128 to intermediate
040A3C 11 00 80 00 0532*      ld de,128*256
040A40 19          0533*      add hl,de
040A41 18 1B       0534*      jr @zero_hlu
040A43             0535*  @y_pos_x_zero:
040A43             0536*  ; y pos,x zero
040A43             0537*  ; angle is 128 (180)
040A43 21 00 80 00 0538*      ld hl,128*256
040A47 C9          0539*      ret
040A48             0540*  @y_pos_x_pos:
040A48             0541*  ; y pos,x pos
040A48             0542*  ; angle is 64 to 128 (90 to 180)
040A48             0543*  ; neg the intermediate and add 180 degrees
040A48 CD A4 06 04 0544*      call neg_hlu
040A4C 11 00 80 00 0545*      ld de,128*256
040A50 19          0546*      add hl,de
040A51 18 0B       0547*      jr @zero_hlu
040A53             0548*  
040A53             0549*  @y_zero:
040A53 F1          0550*      pop af ; sign of x
040A54 FA 59 0A 04 0551*      jp m,@y_zero_x_neg
040A58             0552*  ; y zero,x pos
040A58             0553*  ; angle is 64 (90),nothing to do
040A58 C9          0554*      ret
040A59             0555*  @y_zero_x_neg:
040A59             0556*  ; y zero ,x neg
040A59             0557*  ; angle is 192 (270)
040A59 21 00 C0 00 0558*      ld hl,192*256
040A5D C9          0559*      ret
040A5E             0560*  @zero_hlu:
040A5E AF          0561*      xor a
040A5F 22 6C 0A 04 0562*      ld (@scratch),hl
040A63 32 6E 0A 04 0563*      ld (@scratch+2),a
040A67 2A 6C 0A 04 0564*      ld hl,(@scratch)
040A6B C9          0565*      ret
040A6C             0566*  @scratch: ds 6
040A72             0567*  
040A72             0568*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040A72             0569*  ; output: uh.l is the 16.8 fixed format angle in degrees 256
040A72             0570*  ; destroys: a,hl,bc,de
040A72             0571*  ; note: only works for angles from 0 to 32 (45) degrees
040A72             0572*  ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040A72             0573*  atan_168fast:
040A72             0574*  ; because we use compass headings instead of geometric angles
040A72             0575*  ; we compute dx/dy which is 1/tan(theta) in the maths world
040A72             0576*  ; we can do faster unsigned division here because we know dx and dy are positive
040A72 CD 72 08 04 0577*      call udiv168 ; ud.e = dx/dy
040A76 EB          0578*      ex de,hl ; uh.l = dx/dy
040A77             0579*  ; test uh.l for 0
040A77 19          0580*      add hl,de
040A78 B7          0581*      or a
040A79 ED 52       0582*      sbc hl,de
040A7B 28 22       0583*      jr z,@is_zero
040A7D             0584*  ; test uh.l for 1
040A7D AF          0585*      xor a ; clear carry
040A7E EB          0586*      ex de,hl
040A7F 21 00 01 00 0587*      ld hl,1*256 ; 1 in 16.8 fixed format
040A83 ED 52       0588*      sbc hl,de
040A85 28 13       0589*      jr z,@is_45
040A87 EB          0590*      ex de,hl
040A88             0591*  ; no special cases so we move on
040A88             0592*  ; l contains the fractional portion of tan(uh.l)
040A88             0593*  ; we multiply it by three to get our lookup table index
040A88 26 03       0594*      ld h,3
040A8A ED 6C       0595*      mlt hl ; index into lut
040A8C 11 00 00 00 0596*      ld de,0 ; clear deu
040A90 54          0597*      ld d,h ; copy hl to de
040A91 5D          0598*      ld e,l ; de contains our index
040A92 21 97 0E 04 0599*      ld hl,atan_lut_168 ; grab the lut address
040A96 19          0600*      add hl,de ; bump hl by the index
040A97 ED 27       0601*      ld hl,(hl) ; don't try this on a z80!
040A99 C9          0602*      ret ; and out
040A9A             0603*  @is_45:
040A9A 21 00 40 00 0604*      ld hl,64*256
040A9E C9          0605*      ret
040A9F             0606*  ; for the case tan(0)
040A9F             0607*  @is_zero:
040A9F 21 00 00 00 0608*      ld hl,0*256
040AA3 C9          0609*      ret
040AA4             0610*  
040AA4             0611*  ; Expects  ADL mode
040AA4             0612*  ; Inputs:  UH.L
040AA4             0613*  ; Outputs: UH.L is the 16.8 square root
040AA4             0614*  ;          UDE is the integer difference inputHL-DE^2
040AA4             0615*  sqrt168:
040AA4 CD AE 0A 04 0616*      call sqrt24
040AA8 EB          0617*      ex de,hl
040AA9 29          0618*      add hl,hl
040AAA 29          0619*      add hl,hl
040AAB 29          0620*      add hl,hl
040AAC 29          0621*      add hl,hl
040AAD C9          0622*      ret
040AAE             0623*  
040AAE             0624*  ; credit: xeda112358
040AAE             0625*  ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040AAE             0626*  sqrt24:
040AAE             0627*  ; Expects ADL mode
040AAE             0628*  ; Inputs: HL
040AAE             0629*  ; Outputs: DE is the integer square root
040AAE             0630*  ;  HL is the difference inputHL-DE^2
040AAE             0631*  ;  c flag reset
040AAE 01 00 00 00 0632*      ld bc,0 ; clear bcu
040AB2 11 00 00 00 0633*      ld de,0 ; clear deu
040AB6 AF          0634*      xor a
040AB7 45          0635*      ld b,l
040AB8 C5          0636*      push bc
040AB9 47          0637*      ld b,a
040ABA 6F          0638*      ld l,a
040ABB             0639*  ; Iteration 1
040ABB 29          0640*      add hl,hl
040ABC CB 11       0641*      rl c
040ABE 29          0642*      add hl,hl
040ABF CB 11       0643*      rl c
040AC1 91          0644*      sub c
040AC2 30 04       0645*      jr nc,$+6
040AC4 1C          0646*      inc e
040AC5 1C          0647*      inc e
040AC6 2F          0648*      cpl
040AC7 4F          0649*      ld c,a
040AC8             0650*  ; Iteration 2
040AC8 29          0651*      add hl,hl
040AC9 CB 11       0652*      rl c
040ACB 29          0653*      add hl,hl
040ACC CB 11       0654*      rl c
040ACE CB 13       0655*      rl e
040AD0 7B          0656*      ld a,e
040AD1 91          0657*      sub c
040AD2 30 04       0658*      jr nc,$+6
040AD4 1C          0659*      inc e
040AD5 1C          0660*      inc e
040AD6 2F          0661*      cpl
040AD7 4F          0662*      ld c,a
040AD8             0663*  ; Iteration 3
040AD8 29          0664*      add hl,hl
040AD9 CB 11       0665*      rl c
040ADB 29          0666*      add hl,hl
040ADC CB 11       0667*      rl c
040ADE CB 13       0668*      rl e
040AE0 7B          0669*      ld a,e
040AE1 91          0670*      sub c
040AE2 30 04       0671*      jr nc,$+6
040AE4 1C          0672*      inc e
040AE5 1C          0673*      inc e
040AE6 2F          0674*      cpl
040AE7 4F          0675*      ld c,a
040AE8             0676*  ; Iteration 4
040AE8 29          0677*      add hl,hl
040AE9 CB 11       0678*      rl c
040AEB 29          0679*      add hl,hl
040AEC CB 11       0680*      rl c
040AEE CB 13       0681*      rl e
040AF0 7B          0682*      ld a,e
040AF1 91          0683*      sub c
040AF2 30 04       0684*      jr nc,$+6
040AF4 1C          0685*      inc e
040AF5 1C          0686*      inc e
040AF6 2F          0687*      cpl
040AF7 4F          0688*      ld c,a
040AF8             0689*  ; Iteration 5
040AF8 29          0690*      add hl,hl
040AF9 CB 11       0691*      rl c
040AFB 29          0692*      add hl,hl
040AFC CB 11       0693*      rl c
040AFE CB 13       0694*      rl e
040B00 7B          0695*      ld a,e
040B01 91          0696*      sub c
040B02 30 04       0697*      jr nc,$+6
040B04 1C          0698*      inc e
040B05 1C          0699*      inc e
040B06 2F          0700*      cpl
040B07 4F          0701*      ld c,a
040B08             0702*  ; Iteration 6
040B08 29          0703*      add hl,hl
040B09 CB 11       0704*      rl c
040B0B 29          0705*      add hl,hl
040B0C CB 11       0706*      rl c
040B0E CB 13       0707*      rl e
040B10 7B          0708*      ld a,e
040B11 91          0709*      sub c
040B12 30 04       0710*      jr nc,$+6
040B14 1C          0711*      inc e
040B15 1C          0712*      inc e
040B16 2F          0713*      cpl
040B17 4F          0714*      ld c,a
040B18             0715*  ; Iteration 7
040B18 29          0716*      add hl,hl
040B19 CB 11       0717*      rl c
040B1B 29          0718*      add hl,hl
040B1C CB 11       0719*      rl c
040B1E CB 10       0720*      rl b
040B20 EB          0721*      ex de,hl
040B21 29          0722*      add hl,hl
040B22 E5          0723*      push hl
040B23 ED 42       0724*      sbc hl,bc
040B25 30 06       0725*      jr nc,$+8
040B27 7C          0726*      ld a,h
040B28 2F          0727*      cpl
040B29 47          0728*      ld b,a
040B2A 7D          0729*      ld a,l
040B2B 2F          0730*      cpl
040B2C 4F          0731*      ld c,a
040B2D E1          0732*      pop hl
040B2E 30 02       0733*      jr nc,$+4
040B30 23          0734*      inc hl
040B31 23          0735*      inc hl
040B32 EB          0736*      ex de,hl
040B33             0737*  ; Iteration 8
040B33 29          0738*      add hl,hl
040B34 69          0739*      ld l,c
040B35 60          0740*      ld h,b
040B36 ED 6A       0741*      adc hl,hl
040B38 ED 6A       0742*      adc hl,hl
040B3A EB          0743*      ex de,hl
040B3B 29          0744*      add hl,hl
040B3C ED 52       0745*      sbc hl,de
040B3E 19          0746*      add hl,de
040B3F EB          0747*      ex de,hl
040B40 30 04       0748*      jr nc,$+6
040B42 ED 52       0749*      sbc hl,de
040B44 13          0750*      inc de
040B45 13          0751*      inc de
040B46             0752*  ; Iteration 9
040B46 F1          0753*      pop af
040B47 17          0754*      rla
040B48 ED 6A       0755*      adc hl,hl
040B4A 17          0756*      rla
040B4B ED 6A       0757*      adc hl,hl
040B4D EB          0758*      ex de,hl
040B4E 29          0759*      add hl,hl
040B4F ED 52       0760*      sbc hl,de
040B51 19          0761*      add hl,de
040B52 EB          0762*      ex de,hl
040B53 30 04       0763*      jr nc,$+6
040B55 ED 52       0764*      sbc hl,de
040B57 13          0765*      inc de
040B58 13          0766*      inc de
040B59             0767*  ; Iteration 10
040B59 17          0768*      rla
040B5A ED 6A       0769*      adc hl,hl
040B5C 17          0770*      rla
040B5D ED 6A       0771*      adc hl,hl
040B5F EB          0772*      ex de,hl
040B60 29          0773*      add hl,hl
040B61 ED 52       0774*      sbc hl,de
040B63 19          0775*      add hl,de
040B64 EB          0776*      ex de,hl
040B65 30 04       0777*      jr nc,$+6
040B67 ED 52       0778*      sbc hl,de
040B69 13          0779*      inc de
040B6A 13          0780*      inc de
040B6B             0781*  ; Iteration 11
040B6B 17          0782*      rla
040B6C ED 6A       0783*      adc hl,hl
040B6E 17          0784*      rla
040B6F ED 6A       0785*      adc hl,hl
040B71 EB          0786*      ex de,hl
040B72 29          0787*      add hl,hl
040B73 ED 52       0788*      sbc hl,de
040B75 19          0789*      add hl,de
040B76 EB          0790*      ex de,hl
040B77 30 04       0791*      jr nc,$+6
040B79 ED 52       0792*      sbc hl,de
040B7B 13          0793*      inc de
040B7C 13          0794*      inc de
040B7D             0795*  ; Iteration 12
040B7D 17          0796*      rla
040B7E ED 6A       0797*      adc hl,hl
040B80 17          0798*      rla
040B81 ED 6A       0799*      adc hl,hl
040B83 EB          0800*      ex de,hl
040B84 29          0801*      add hl,hl
040B85 ED 52       0802*      sbc hl,de
040B87 19          0803*      add hl,de
040B88 EB          0804*      ex de,hl
040B89 30 04       0805*      jr nc,$+6
040B8B ED 52       0806*      sbc hl,de
040B8D 13          0807*      inc de
040B8E 13          0808*      inc de
040B8F CB 1A       0809*      rr d
040B91 CB 1B       0810*      rr e
040B93 C9          0811*      ret
040B94             0812*  
040B94             0813*  sin_lut_168:
040B94 00 00 00    0814*      dl 0x000000 ; 0.000 00, 0.000
040B97 06 00 00    0815*      dl 0x000006 ; 1.406 01, 0.025
040B9A 0C 00 00    0816*      dl 0x00000C ; 2.813 02, 0.049
040B9D 12 00 00    0817*      dl 0x000012 ; 4.219 03, 0.074
040BA0 19 00 00    0818*      dl 0x000019 ; 5.625 04, 0.098
040BA3 1F 00 00    0819*      dl 0x00001F ; 7.031 05, 0.122
040BA6 25 00 00    0820*      dl 0x000025 ; 8.438 06, 0.147
040BA9 2B 00 00    0821*      dl 0x00002B ; 9.844 07, 0.171
040BAC 31 00 00    0822*      dl 0x000031 ; 11.250 08, 0.195
040BAF 38 00 00    0823*      dl 0x000038 ; 12.656 09, 0.219
040BB2 3E 00 00    0824*      dl 0x00003E ; 14.063 0A, 0.243
040BB5 44 00 00    0825*      dl 0x000044 ; 15.469 0B, 0.267
040BB8 4A 00 00    0826*      dl 0x00004A ; 16.875 0C, 0.290
040BBB 50 00 00    0827*      dl 0x000050 ; 18.281 0D, 0.314
040BBE 56 00 00    0828*      dl 0x000056 ; 19.688 0E, 0.337
040BC1 5C 00 00    0829*      dl 0x00005C ; 21.094 0F, 0.360
040BC4 61 00 00    0830*      dl 0x000061 ; 22.500 10, 0.383
040BC7 67 00 00    0831*      dl 0x000067 ; 23.906 11, 0.405
040BCA 6D 00 00    0832*      dl 0x00006D ; 25.313 12, 0.428
040BCD 73 00 00    0833*      dl 0x000073 ; 26.719 13, 0.450
040BD0 78 00 00    0834*      dl 0x000078 ; 28.125 14, 0.471
040BD3 7E 00 00    0835*      dl 0x00007E ; 29.531 15, 0.493
040BD6 83 00 00    0836*      dl 0x000083 ; 30.938 16, 0.514
040BD9 88 00 00    0837*      dl 0x000088 ; 32.344 17, 0.535
040BDC 8E 00 00    0838*      dl 0x00008E ; 33.750 18, 0.556
040BDF 93 00 00    0839*      dl 0x000093 ; 35.156 19, 0.576
040BE2 98 00 00    0840*      dl 0x000098 ; 36.563 1A, 0.596
040BE5 9D 00 00    0841*      dl 0x00009D ; 37.969 1B, 0.615
040BE8 A2 00 00    0842*      dl 0x0000A2 ; 39.375 1C, 0.634
040BEB A7 00 00    0843*      dl 0x0000A7 ; 40.781 1D, 0.653
040BEE AB 00 00    0844*      dl 0x0000AB ; 42.188 1E, 0.672
040BF1 B0 00 00    0845*      dl 0x0000B0 ; 43.594 1F, 0.690
040BF4 B5 00 00    0846*      dl 0x0000B5 ; 45.000 20, 0.707
040BF7 B9 00 00    0847*      dl 0x0000B9 ; 46.406 21, 0.724
040BFA BD 00 00    0848*      dl 0x0000BD ; 47.813 22, 0.741
040BFD C1 00 00    0849*      dl 0x0000C1 ; 49.219 23, 0.757
040C00 C5 00 00    0850*      dl 0x0000C5 ; 50.625 24, 0.773
040C03 C9 00 00    0851*      dl 0x0000C9 ; 52.031 25, 0.788
040C06 CD 00 00    0852*      dl 0x0000CD ; 53.438 26, 0.803
040C09 D1 00 00    0853*      dl 0x0000D1 ; 54.844 27, 0.818
040C0C D4 00 00    0854*      dl 0x0000D4 ; 56.250 28, 0.831
040C0F D8 00 00    0855*      dl 0x0000D8 ; 57.656 29, 0.845
040C12 DB 00 00    0856*      dl 0x0000DB ; 59.063 2A, 0.858
040C15 DE 00 00    0857*      dl 0x0000DE ; 60.469 2B, 0.870
040C18 E1 00 00    0858*      dl 0x0000E1 ; 61.875 2C, 0.882
040C1B E4 00 00    0859*      dl 0x0000E4 ; 63.281 2D, 0.893
040C1E E7 00 00    0860*      dl 0x0000E7 ; 64.688 2E, 0.904
040C21 EA 00 00    0861*      dl 0x0000EA ; 66.094 2F, 0.914
040C24 EC 00 00    0862*      dl 0x0000EC ; 67.500 30, 0.924
040C27 EE 00 00    0863*      dl 0x0000EE ; 68.906 31, 0.933
040C2A F1 00 00    0864*      dl 0x0000F1 ; 70.313 32, 0.942
040C2D F3 00 00    0865*      dl 0x0000F3 ; 71.719 33, 0.950
040C30 F4 00 00    0866*      dl 0x0000F4 ; 73.125 34, 0.957
040C33 F6 00 00    0867*      dl 0x0000F6 ; 74.531 35, 0.964
040C36 F8 00 00    0868*      dl 0x0000F8 ; 75.938 36, 0.970
040C39 F9 00 00    0869*      dl 0x0000F9 ; 77.344 37, 0.976
040C3C FB 00 00    0870*      dl 0x0000FB ; 78.750 38, 0.981
040C3F FC 00 00    0871*      dl 0x0000FC ; 80.156 39, 0.985
040C42 FD 00 00    0872*      dl 0x0000FD ; 81.563 3A, 0.989
040C45 FE 00 00    0873*      dl 0x0000FE ; 82.969 3B, 0.992
040C48 FE 00 00    0874*      dl 0x0000FE ; 84.375 3C, 0.995
040C4B FF 00 00    0875*      dl 0x0000FF ; 85.781 3D, 0.997
040C4E FF 00 00    0876*      dl 0x0000FF ; 87.188 3E, 0.999
040C51 FF 00 00    0877*      dl 0x0000FF ; 88.594 3F, 1.000
040C54 00 01 00    0878*      dl 0x000100 ; 90.000 40, 1.000
040C57 FF 00 00    0879*      dl 0x0000FF ; 91.406 41, 1.000
040C5A FF 00 00    0880*      dl 0x0000FF ; 92.813 42, 0.999
040C5D FF 00 00    0881*      dl 0x0000FF ; 94.219 43, 0.997
040C60 FE 00 00    0882*      dl 0x0000FE ; 95.625 44, 0.995
040C63 FE 00 00    0883*      dl 0x0000FE ; 97.031 45, 0.992
040C66 FD 00 00    0884*      dl 0x0000FD ; 98.438 46, 0.989
040C69 FC 00 00    0885*      dl 0x0000FC ; 99.844 47, 0.985
040C6C FB 00 00    0886*      dl 0x0000FB ; 101.250 48, 0.981
040C6F F9 00 00    0887*      dl 0x0000F9 ; 102.656 49, 0.976
040C72 F8 00 00    0888*      dl 0x0000F8 ; 104.063 4A, 0.970
040C75 F6 00 00    0889*      dl 0x0000F6 ; 105.469 4B, 0.964
040C78 F4 00 00    0890*      dl 0x0000F4 ; 106.875 4C, 0.957
040C7B F3 00 00    0891*      dl 0x0000F3 ; 108.281 4D, 0.950
040C7E F1 00 00    0892*      dl 0x0000F1 ; 109.688 4E, 0.942
040C81 EE 00 00    0893*      dl 0x0000EE ; 111.094 4F, 0.933
040C84 EC 00 00    0894*      dl 0x0000EC ; 112.500 50, 0.924
040C87 EA 00 00    0895*      dl 0x0000EA ; 113.906 51, 0.914
040C8A E7 00 00    0896*      dl 0x0000E7 ; 115.313 52, 0.904
040C8D E4 00 00    0897*      dl 0x0000E4 ; 116.719 53, 0.893
040C90 E1 00 00    0898*      dl 0x0000E1 ; 118.125 54, 0.882
040C93 DE 00 00    0899*      dl 0x0000DE ; 119.531 55, 0.870
040C96 DB 00 00    0900*      dl 0x0000DB ; 120.938 56, 0.858
040C99 D8 00 00    0901*      dl 0x0000D8 ; 122.344 57, 0.845
040C9C D4 00 00    0902*      dl 0x0000D4 ; 123.750 58, 0.831
040C9F D1 00 00    0903*      dl 0x0000D1 ; 125.156 59, 0.818
040CA2 CD 00 00    0904*      dl 0x0000CD ; 126.563 5A, 0.803
040CA5 C9 00 00    0905*      dl 0x0000C9 ; 127.969 5B, 0.788
040CA8 C5 00 00    0906*      dl 0x0000C5 ; 129.375 5C, 0.773
040CAB C1 00 00    0907*      dl 0x0000C1 ; 130.781 5D, 0.757
040CAE BD 00 00    0908*      dl 0x0000BD ; 132.188 5E, 0.741
040CB1 B9 00 00    0909*      dl 0x0000B9 ; 133.594 5F, 0.724
040CB4 B5 00 00    0910*      dl 0x0000B5 ; 135.000 60, 0.707
040CB7 B0 00 00    0911*      dl 0x0000B0 ; 136.406 61, 0.690
040CBA AB 00 00    0912*      dl 0x0000AB ; 137.813 62, 0.672
040CBD A7 00 00    0913*      dl 0x0000A7 ; 139.219 63, 0.653
040CC0 A2 00 00    0914*      dl 0x0000A2 ; 140.625 64, 0.634
040CC3 9D 00 00    0915*      dl 0x00009D ; 142.031 65, 0.615
040CC6 98 00 00    0916*      dl 0x000098 ; 143.438 66, 0.596
040CC9 93 00 00    0917*      dl 0x000093 ; 144.844 67, 0.576
040CCC 8E 00 00    0918*      dl 0x00008E ; 146.250 68, 0.556
040CCF 88 00 00    0919*      dl 0x000088 ; 147.656 69, 0.535
040CD2 83 00 00    0920*      dl 0x000083 ; 149.063 6A, 0.514
040CD5 7E 00 00    0921*      dl 0x00007E ; 150.469 6B, 0.493
040CD8 78 00 00    0922*      dl 0x000078 ; 151.875 6C, 0.471
040CDB 73 00 00    0923*      dl 0x000073 ; 153.281 6D, 0.450
040CDE 6D 00 00    0924*      dl 0x00006D ; 154.688 6E, 0.428
040CE1 67 00 00    0925*      dl 0x000067 ; 156.094 6F, 0.405
040CE4 61 00 00    0926*      dl 0x000061 ; 157.500 70, 0.383
040CE7 5C 00 00    0927*      dl 0x00005C ; 158.906 71, 0.360
040CEA 56 00 00    0928*      dl 0x000056 ; 160.313 72, 0.337
040CED 50 00 00    0929*      dl 0x000050 ; 161.719 73, 0.314
040CF0 4A 00 00    0930*      dl 0x00004A ; 163.125 74, 0.290
040CF3 44 00 00    0931*      dl 0x000044 ; 164.531 75, 0.267
040CF6 3E 00 00    0932*      dl 0x00003E ; 165.938 76, 0.243
040CF9 38 00 00    0933*      dl 0x000038 ; 167.344 77, 0.219
040CFC 31 00 00    0934*      dl 0x000031 ; 168.750 78, 0.195
040CFF 2B 00 00    0935*      dl 0x00002B ; 170.156 79, 0.171
040D02 25 00 00    0936*      dl 0x000025 ; 171.563 7A, 0.147
040D05 1F 00 00    0937*      dl 0x00001F ; 172.969 7B, 0.122
040D08 19 00 00    0938*      dl 0x000019 ; 174.375 7C, 0.098
040D0B 12 00 00    0939*      dl 0x000012 ; 175.781 7D, 0.074
040D0E 0C 00 00    0940*      dl 0x00000C ; 177.188 7E, 0.049
040D11 06 00 00    0941*      dl 0x000006 ; 178.594 7F, 0.025
040D14 00 00 00    0942*      dl 0x000000 ; 180.000 80, 0.000
040D17 FA FF FF    0943*      dl 0xFFFFFA ; 181.406 81, -0.025
040D1A F4 FF FF    0944*      dl 0xFFFFF4 ; 182.813 82, -0.049
040D1D EE FF FF    0945*      dl 0xFFFFEE ; 184.219 83, -0.074
040D20 E7 FF FF    0946*      dl 0xFFFFE7 ; 185.625 84, -0.098
040D23 E1 FF FF    0947*      dl 0xFFFFE1 ; 187.031 85, -0.122
040D26 DB FF FF    0948*      dl 0xFFFFDB ; 188.438 86, -0.147
040D29 D5 FF FF    0949*      dl 0xFFFFD5 ; 189.844 87, -0.171
040D2C CF FF FF    0950*      dl 0xFFFFCF ; 191.250 88, -0.195
040D2F C8 FF FF    0951*      dl 0xFFFFC8 ; 192.656 89, -0.219
040D32 C2 FF FF    0952*      dl 0xFFFFC2 ; 194.063 8A, -0.243
040D35 BC FF FF    0953*      dl 0xFFFFBC ; 195.469 8B, -0.267
040D38 B6 FF FF    0954*      dl 0xFFFFB6 ; 196.875 8C, -0.290
040D3B B0 FF FF    0955*      dl 0xFFFFB0 ; 198.281 8D, -0.314
040D3E AA FF FF    0956*      dl 0xFFFFAA ; 199.688 8E, -0.337
040D41 A4 FF FF    0957*      dl 0xFFFFA4 ; 201.094 8F, -0.360
040D44 9F FF FF    0958*      dl 0xFFFF9F ; 202.500 90, -0.383
040D47 99 FF FF    0959*      dl 0xFFFF99 ; 203.906 91, -0.405
040D4A 93 FF FF    0960*      dl 0xFFFF93 ; 205.313 92, -0.428
040D4D 8D FF FF    0961*      dl 0xFFFF8D ; 206.719 93, -0.450
040D50 88 FF FF    0962*      dl 0xFFFF88 ; 208.125 94, -0.471
040D53 82 FF FF    0963*      dl 0xFFFF82 ; 209.531 95, -0.493
040D56 7D FF FF    0964*      dl 0xFFFF7D ; 210.938 96, -0.514
040D59 78 FF FF    0965*      dl 0xFFFF78 ; 212.344 97, -0.535
040D5C 72 FF FF    0966*      dl 0xFFFF72 ; 213.750 98, -0.556
040D5F 6D FF FF    0967*      dl 0xFFFF6D ; 215.156 99, -0.576
040D62 68 FF FF    0968*      dl 0xFFFF68 ; 216.563 9A, -0.596
040D65 63 FF FF    0969*      dl 0xFFFF63 ; 217.969 9B, -0.615
040D68 5E FF FF    0970*      dl 0xFFFF5E ; 219.375 9C, -0.634
040D6B 59 FF FF    0971*      dl 0xFFFF59 ; 220.781 9D, -0.653
040D6E 55 FF FF    0972*      dl 0xFFFF55 ; 222.188 9E, -0.672
040D71 50 FF FF    0973*      dl 0xFFFF50 ; 223.594 9F, -0.690
040D74 4B FF FF    0974*      dl 0xFFFF4B ; 225.000 A0, -0.707
040D77 47 FF FF    0975*      dl 0xFFFF47 ; 226.406 A1, -0.724
040D7A 43 FF FF    0976*      dl 0xFFFF43 ; 227.813 A2, -0.741
040D7D 3F FF FF    0977*      dl 0xFFFF3F ; 229.219 A3, -0.757
040D80 3B FF FF    0978*      dl 0xFFFF3B ; 230.625 A4, -0.773
040D83 37 FF FF    0979*      dl 0xFFFF37 ; 232.031 A5, -0.788
040D86 33 FF FF    0980*      dl 0xFFFF33 ; 233.438 A6, -0.803
040D89 2F FF FF    0981*      dl 0xFFFF2F ; 234.844 A7, -0.818
040D8C 2C FF FF    0982*      dl 0xFFFF2C ; 236.250 A8, -0.831
040D8F 28 FF FF    0983*      dl 0xFFFF28 ; 237.656 A9, -0.845
040D92 25 FF FF    0984*      dl 0xFFFF25 ; 239.063 AA, -0.858
040D95 22 FF FF    0985*      dl 0xFFFF22 ; 240.469 AB, -0.870
040D98 1F FF FF    0986*      dl 0xFFFF1F ; 241.875 AC, -0.882
040D9B 1C FF FF    0987*      dl 0xFFFF1C ; 243.281 AD, -0.893
040D9E 19 FF FF    0988*      dl 0xFFFF19 ; 244.688 AE, -0.904
040DA1 16 FF FF    0989*      dl 0xFFFF16 ; 246.094 AF, -0.914
040DA4 14 FF FF    0990*      dl 0xFFFF14 ; 247.500 B0, -0.924
040DA7 12 FF FF    0991*      dl 0xFFFF12 ; 248.906 B1, -0.933
040DAA 0F FF FF    0992*      dl 0xFFFF0F ; 250.313 B2, -0.942
040DAD 0D FF FF    0993*      dl 0xFFFF0D ; 251.719 B3, -0.950
040DB0 0C FF FF    0994*      dl 0xFFFF0C ; 253.125 B4, -0.957
040DB3 0A FF FF    0995*      dl 0xFFFF0A ; 254.531 B5, -0.964
040DB6 08 FF FF    0996*      dl 0xFFFF08 ; 255.938 B6, -0.970
040DB9 07 FF FF    0997*      dl 0xFFFF07 ; 257.344 B7, -0.976
040DBC 05 FF FF    0998*      dl 0xFFFF05 ; 258.750 B8, -0.981
040DBF 04 FF FF    0999*      dl 0xFFFF04 ; 260.156 B9, -0.985
040DC2 03 FF FF    1000*      dl 0xFFFF03 ; 261.563 BA, -0.989
040DC5 02 FF FF    1001*      dl 0xFFFF02 ; 262.969 BB, -0.992
040DC8 02 FF FF    1002*      dl 0xFFFF02 ; 264.375 BC, -0.995
040DCB 01 FF FF    1003*      dl 0xFFFF01 ; 265.781 BD, -0.997
040DCE 01 FF FF    1004*      dl 0xFFFF01 ; 267.188 BE, -0.999
040DD1 01 FF FF    1005*      dl 0xFFFF01 ; 268.594 BF, -1.000
040DD4 00 FF FF    1006*      dl 0xFFFF00 ; 270.000 C0, -1.000
040DD7 01 FF FF    1007*      dl 0xFFFF01 ; 271.406 C1, -1.000
040DDA 01 FF FF    1008*      dl 0xFFFF01 ; 272.813 C2, -0.999
040DDD 01 FF FF    1009*      dl 0xFFFF01 ; 274.219 C3, -0.997
040DE0 02 FF FF    1010*      dl 0xFFFF02 ; 275.625 C4, -0.995
040DE3 02 FF FF    1011*      dl 0xFFFF02 ; 277.031 C5, -0.992
040DE6 03 FF FF    1012*      dl 0xFFFF03 ; 278.438 C6, -0.989
040DE9 04 FF FF    1013*      dl 0xFFFF04 ; 279.844 C7, -0.985
040DEC 05 FF FF    1014*      dl 0xFFFF05 ; 281.250 C8, -0.981
040DEF 07 FF FF    1015*      dl 0xFFFF07 ; 282.656 C9, -0.976
040DF2 08 FF FF    1016*      dl 0xFFFF08 ; 284.063 CA, -0.970
040DF5 0A FF FF    1017*      dl 0xFFFF0A ; 285.469 CB, -0.964
040DF8 0C FF FF    1018*      dl 0xFFFF0C ; 286.875 CC, -0.957
040DFB 0D FF FF    1019*      dl 0xFFFF0D ; 288.281 CD, -0.950
040DFE 0F FF FF    1020*      dl 0xFFFF0F ; 289.688 CE, -0.942
040E01 12 FF FF    1021*      dl 0xFFFF12 ; 291.094 CF, -0.933
040E04 14 FF FF    1022*      dl 0xFFFF14 ; 292.500 D0, -0.924
040E07 16 FF FF    1023*      dl 0xFFFF16 ; 293.906 D1, -0.914
040E0A 19 FF FF    1024*      dl 0xFFFF19 ; 295.313 D2, -0.904
040E0D 1C FF FF    1025*      dl 0xFFFF1C ; 296.719 D3, -0.893
040E10 1F FF FF    1026*      dl 0xFFFF1F ; 298.125 D4, -0.882
040E13 22 FF FF    1027*      dl 0xFFFF22 ; 299.531 D5, -0.870
040E16 25 FF FF    1028*      dl 0xFFFF25 ; 300.938 D6, -0.858
040E19 28 FF FF    1029*      dl 0xFFFF28 ; 302.344 D7, -0.845
040E1C 2C FF FF    1030*      dl 0xFFFF2C ; 303.750 D8, -0.831
040E1F 2F FF FF    1031*      dl 0xFFFF2F ; 305.156 D9, -0.818
040E22 33 FF FF    1032*      dl 0xFFFF33 ; 306.563 DA, -0.803
040E25 37 FF FF    1033*      dl 0xFFFF37 ; 307.969 DB, -0.788
040E28 3B FF FF    1034*      dl 0xFFFF3B ; 309.375 DC, -0.773
040E2B 3F FF FF    1035*      dl 0xFFFF3F ; 310.781 DD, -0.757
040E2E 43 FF FF    1036*      dl 0xFFFF43 ; 312.188 DE, -0.741
040E31 47 FF FF    1037*      dl 0xFFFF47 ; 313.594 DF, -0.724
040E34 4B FF FF    1038*      dl 0xFFFF4B ; 315.000 E0, -0.707
040E37 50 FF FF    1039*      dl 0xFFFF50 ; 316.406 E1, -0.690
040E3A 55 FF FF    1040*      dl 0xFFFF55 ; 317.813 E2, -0.672
040E3D 59 FF FF    1041*      dl 0xFFFF59 ; 319.219 E3, -0.653
040E40 5E FF FF    1042*      dl 0xFFFF5E ; 320.625 E4, -0.634
040E43 63 FF FF    1043*      dl 0xFFFF63 ; 322.031 E5, -0.615
040E46 68 FF FF    1044*      dl 0xFFFF68 ; 323.438 E6, -0.596
040E49 6D FF FF    1045*      dl 0xFFFF6D ; 324.844 E7, -0.576
040E4C 72 FF FF    1046*      dl 0xFFFF72 ; 326.250 E8, -0.556
040E4F 78 FF FF    1047*      dl 0xFFFF78 ; 327.656 E9, -0.535
040E52 7D FF FF    1048*      dl 0xFFFF7D ; 329.063 EA, -0.514
040E55 82 FF FF    1049*      dl 0xFFFF82 ; 330.469 EB, -0.493
040E58 88 FF FF    1050*      dl 0xFFFF88 ; 331.875 EC, -0.471
040E5B 8D FF FF    1051*      dl 0xFFFF8D ; 333.281 ED, -0.450
040E5E 93 FF FF    1052*      dl 0xFFFF93 ; 334.688 EE, -0.428
040E61 99 FF FF    1053*      dl 0xFFFF99 ; 336.094 EF, -0.405
040E64 9F FF FF    1054*      dl 0xFFFF9F ; 337.500 F0, -0.383
040E67 A4 FF FF    1055*      dl 0xFFFFA4 ; 338.906 F1, -0.360
040E6A AA FF FF    1056*      dl 0xFFFFAA ; 340.313 F2, -0.337
040E6D B0 FF FF    1057*      dl 0xFFFFB0 ; 341.719 F3, -0.314
040E70 B6 FF FF    1058*      dl 0xFFFFB6 ; 343.125 F4, -0.290
040E73 BC FF FF    1059*      dl 0xFFFFBC ; 344.531 F5, -0.267
040E76 C2 FF FF    1060*      dl 0xFFFFC2 ; 345.938 F6, -0.243
040E79 C8 FF FF    1061*      dl 0xFFFFC8 ; 347.344 F7, -0.219
040E7C CF FF FF    1062*      dl 0xFFFFCF ; 348.750 F8, -0.195
040E7F D5 FF FF    1063*      dl 0xFFFFD5 ; 350.156 F9, -0.171
040E82 DB FF FF    1064*      dl 0xFFFFDB ; 351.563 FA, -0.147
040E85 E1 FF FF    1065*      dl 0xFFFFE1 ; 352.969 FB, -0.122
040E88 E7 FF FF    1066*      dl 0xFFFFE7 ; 354.375 FC, -0.098
040E8B EE FF FF    1067*      dl 0xFFFFEE ; 355.781 FD, -0.074
040E8E F4 FF FF    1068*      dl 0xFFFFF4 ; 357.188 FE, -0.049
040E91 FA FF FF    1069*      dl 0xFFFFFA ; 358.594 FF, -0.025
040E94 00 00 00    1070*      dl 0x000000 ; 0.000 00, 0.000 for interpolation
040E97             1071*  
040E97             1072*  atan_lut_168:
040E97 00 00 00    1073*      dl 0x000000 ; 000000, 0.000
040E9A 28 00 00    1074*      dl 0x000028 ; 000001, 0.224
040E9D 51 00 00    1075*      dl 0x000051 ; 000002, 0.448
040EA0 7A 00 00    1076*      dl 0x00007A ; 000003, 0.671
040EA3 A2 00 00    1077*      dl 0x0000A2 ; 000004, 0.895
040EA6 CB 00 00    1078*      dl 0x0000CB ; 000005, 1.119
040EA9 F4 00 00    1079*      dl 0x0000F4 ; 000006, 1.343
040EAC 1D 01 00    1080*      dl 0x00011D ; 000007, 1.566
040EAF 45 01 00    1081*      dl 0x000145 ; 000008, 1.790
040EB2 6E 01 00    1082*      dl 0x00016E ; 000009, 2.013
040EB5 97 01 00    1083*      dl 0x000197 ; 00000A, 2.237
040EB8 BF 01 00    1084*      dl 0x0001BF ; 00000B, 2.460
040EBB E8 01 00    1085*      dl 0x0001E8 ; 00000C, 2.684
040EBE 11 02 00    1086*      dl 0x000211 ; 00000D, 2.907
040EC1 39 02 00    1087*      dl 0x000239 ; 00000E, 3.130
040EC4 62 02 00    1088*      dl 0x000262 ; 00000F, 3.353
040EC7 8B 02 00    1089*      dl 0x00028B ; 000010, 3.576
040ECA B3 02 00    1090*      dl 0x0002B3 ; 000011, 3.799
040ECD DC 02 00    1091*      dl 0x0002DC ; 000012, 4.022
040ED0 04 03 00    1092*      dl 0x000304 ; 000013, 4.245
040ED3 2D 03 00    1093*      dl 0x00032D ; 000014, 4.467
040ED6 55 03 00    1094*      dl 0x000355 ; 000015, 4.690
040ED9 7E 03 00    1095*      dl 0x00037E ; 000016, 4.912
040EDC A6 03 00    1096*      dl 0x0003A6 ; 000017, 5.134
040EDF CE 03 00    1097*      dl 0x0003CE ; 000018, 5.356
040EE2 F7 03 00    1098*      dl 0x0003F7 ; 000019, 5.578
040EE5 1F 04 00    1099*      dl 0x00041F ; 00001A, 5.799
040EE8 48 04 00    1100*      dl 0x000448 ; 00001B, 6.021
040EEB 70 04 00    1101*      dl 0x000470 ; 00001C, 6.242
040EEE 98 04 00    1102*      dl 0x000498 ; 00001D, 6.463
040EF1 C0 04 00    1103*      dl 0x0004C0 ; 00001E, 6.684
040EF4 E8 04 00    1104*      dl 0x0004E8 ; 00001F, 6.905
040EF7 11 05 00    1105*      dl 0x000511 ; 000020, 7.125
040EFA 39 05 00    1106*      dl 0x000539 ; 000021, 7.345
040EFD 61 05 00    1107*      dl 0x000561 ; 000022, 7.565
040F00 89 05 00    1108*      dl 0x000589 ; 000023, 7.785
040F03 B1 05 00    1109*      dl 0x0005B1 ; 000024, 8.005
040F06 D9 05 00    1110*      dl 0x0005D9 ; 000025, 8.224
040F09 01 06 00    1111*      dl 0x000601 ; 000026, 8.443
040F0C 28 06 00    1112*      dl 0x000628 ; 000027, 8.662
040F0F 50 06 00    1113*      dl 0x000650 ; 000028, 8.881
040F12 78 06 00    1114*      dl 0x000678 ; 000029, 9.099
040F15 A0 06 00    1115*      dl 0x0006A0 ; 00002A, 9.317
040F18 C7 06 00    1116*      dl 0x0006C7 ; 00002B, 9.535
040F1B EF 06 00    1117*      dl 0x0006EF ; 00002C, 9.752
040F1E 16 07 00    1118*      dl 0x000716 ; 00002D, 9.970
040F21 3E 07 00    1119*      dl 0x00073E ; 00002E, 10.187
040F24 65 07 00    1120*      dl 0x000765 ; 00002F, 10.403
040F27 8D 07 00    1121*      dl 0x00078D ; 000030, 10.620
040F2A B4 07 00    1122*      dl 0x0007B4 ; 000031, 10.836
040F2D DB 07 00    1123*      dl 0x0007DB ; 000032, 11.051
040F30 03 08 00    1124*      dl 0x000803 ; 000033, 11.267
040F33 2A 08 00    1125*      dl 0x00082A ; 000034, 11.482
040F36 51 08 00    1126*      dl 0x000851 ; 000035, 11.697
040F39 78 08 00    1127*      dl 0x000878 ; 000036, 11.911
040F3C 9F 08 00    1128*      dl 0x00089F ; 000037, 12.125
040F3F C6 08 00    1129*      dl 0x0008C6 ; 000038, 12.339
040F42 ED 08 00    1130*      dl 0x0008ED ; 000039, 12.553
040F45 13 09 00    1131*      dl 0x000913 ; 00003A, 12.766
040F48 3A 09 00    1132*      dl 0x00093A ; 00003B, 12.978
040F4B 61 09 00    1133*      dl 0x000961 ; 00003C, 13.191
040F4E 87 09 00    1134*      dl 0x000987 ; 00003D, 13.403
040F51 AE 09 00    1135*      dl 0x0009AE ; 00003E, 13.614
040F54 D4 09 00    1136*      dl 0x0009D4 ; 00003F, 13.825
040F57 FB 09 00    1137*      dl 0x0009FB ; 000040, 14.036
040F5A 21 0A 00    1138*      dl 0x000A21 ; 000041, 14.247
040F5D 47 0A 00    1139*      dl 0x000A47 ; 000042, 14.457
040F60 6D 0A 00    1140*      dl 0x000A6D ; 000043, 14.666
040F63 94 0A 00    1141*      dl 0x000A94 ; 000044, 14.876
040F66 BA 0A 00    1142*      dl 0x000ABA ; 000045, 15.085
040F69 E0 0A 00    1143*      dl 0x000AE0 ; 000046, 15.293
040F6C 05 0B 00    1144*      dl 0x000B05 ; 000047, 15.501
040F6F 2B 0B 00    1145*      dl 0x000B2B ; 000048, 15.709
040F72 51 0B 00    1146*      dl 0x000B51 ; 000049, 15.916
040F75 77 0B 00    1147*      dl 0x000B77 ; 00004A, 16.123
040F78 9C 0B 00    1148*      dl 0x000B9C ; 00004B, 16.329
040F7B C2 0B 00    1149*      dl 0x000BC2 ; 00004C, 16.535
040F7E E7 0B 00    1150*      dl 0x000BE7 ; 00004D, 16.740
040F81 0C 0C 00    1151*      dl 0x000C0C ; 00004E, 16.945
040F84 32 0C 00    1152*      dl 0x000C32 ; 00004F, 17.150
040F87 57 0C 00    1153*      dl 0x000C57 ; 000050, 17.354
040F8A 7C 0C 00    1154*      dl 0x000C7C ; 000051, 17.558
040F8D A1 0C 00    1155*      dl 0x000CA1 ; 000052, 17.761
040F90 C6 0C 00    1156*      dl 0x000CC6 ; 000053, 17.964
040F93 EB 0C 00    1157*      dl 0x000CEB ; 000054, 18.166
040F96 0F 0D 00    1158*      dl 0x000D0F ; 000055, 18.368
040F99 34 0D 00    1159*      dl 0x000D34 ; 000056, 18.569
040F9C 58 0D 00    1160*      dl 0x000D58 ; 000057, 18.770
040F9F 7D 0D 00    1161*      dl 0x000D7D ; 000058, 18.970
040FA2 A1 0D 00    1162*      dl 0x000DA1 ; 000059, 19.170
040FA5 C6 0D 00    1163*      dl 0x000DC6 ; 00005A, 19.370
040FA8 EA 0D 00    1164*      dl 0x000DEA ; 00005B, 19.569
040FAB 0E 0E 00    1165*      dl 0x000E0E ; 00005C, 19.767
040FAE 32 0E 00    1166*      dl 0x000E32 ; 00005D, 19.965
040FB1 56 0E 00    1167*      dl 0x000E56 ; 00005E, 20.163
040FB4 7A 0E 00    1168*      dl 0x000E7A ; 00005F, 20.360
040FB7 9E 0E 00    1169*      dl 0x000E9E ; 000060, 20.556
040FBA C1 0E 00    1170*      dl 0x000EC1 ; 000061, 20.752
040FBD E5 0E 00    1171*      dl 0x000EE5 ; 000062, 20.947
040FC0 08 0F 00    1172*      dl 0x000F08 ; 000063, 21.142
040FC3 2C 0F 00    1173*      dl 0x000F2C ; 000064, 21.337
040FC6 4F 0F 00    1174*      dl 0x000F4F ; 000065, 21.531
040FC9 72 0F 00    1175*      dl 0x000F72 ; 000066, 21.724
040FCC 95 0F 00    1176*      dl 0x000F95 ; 000067, 21.917
040FCF B8 0F 00    1177*      dl 0x000FB8 ; 000068, 22.109
040FD2 DB 0F 00    1178*      dl 0x000FDB ; 000069, 22.301
040FD5 FE 0F 00    1179*      dl 0x000FFE ; 00006A, 22.493
040FD8 21 10 00    1180*      dl 0x001021 ; 00006B, 22.683
040FDB 44 10 00    1181*      dl 0x001044 ; 00006C, 22.874
040FDE 66 10 00    1182*      dl 0x001066 ; 00006D, 23.063
040FE1 89 10 00    1183*      dl 0x001089 ; 00006E, 23.253
040FE4 AB 10 00    1184*      dl 0x0010AB ; 00006F, 23.441
040FE7 CD 10 00    1185*      dl 0x0010CD ; 000070, 23.629
040FEA EF 10 00    1186*      dl 0x0010EF ; 000071, 23.817
040FED 11 11 00    1187*      dl 0x001111 ; 000072, 24.004
040FF0 33 11 00    1188*      dl 0x001133 ; 000073, 24.191
040FF3 55 11 00    1189*      dl 0x001155 ; 000074, 24.376
040FF6 77 11 00    1190*      dl 0x001177 ; 000075, 24.562
040FF9 99 11 00    1191*      dl 0x001199 ; 000076, 24.747
040FFC BA 11 00    1192*      dl 0x0011BA ; 000077, 24.931
040FFF DC 11 00    1193*      dl 0x0011DC ; 000078, 25.115
041002 FD 11 00    1194*      dl 0x0011FD ; 000079, 25.298
041005 1E 12 00    1195*      dl 0x00121E ; 00007A, 25.481
041008 3F 12 00    1196*      dl 0x00123F ; 00007B, 25.663
04100B 60 12 00    1197*      dl 0x001260 ; 00007C, 25.844
04100E 81 12 00    1198*      dl 0x001281 ; 00007D, 26.025
041011 A2 12 00    1199*      dl 0x0012A2 ; 00007E, 26.206
041014 C3 12 00    1200*      dl 0x0012C3 ; 00007F, 26.386
041017 E4 12 00    1201*      dl 0x0012E4 ; 000080, 26.565
04101A 04 13 00    1202*      dl 0x001304 ; 000081, 26.744
04101D 25 13 00    1203*      dl 0x001325 ; 000082, 26.922
041020 45 13 00    1204*      dl 0x001345 ; 000083, 27.100
041023 65 13 00    1205*      dl 0x001365 ; 000084, 27.277
041026 85 13 00    1206*      dl 0x001385 ; 000085, 27.453
041029 A5 13 00    1207*      dl 0x0013A5 ; 000086, 27.629
04102C C5 13 00    1208*      dl 0x0013C5 ; 000087, 27.805
04102F E5 13 00    1209*      dl 0x0013E5 ; 000088, 27.979
041032 05 14 00    1210*      dl 0x001405 ; 000089, 28.154
041035 24 14 00    1211*      dl 0x001424 ; 00008A, 28.327
041038 44 14 00    1212*      dl 0x001444 ; 00008B, 28.501
04103B 63 14 00    1213*      dl 0x001463 ; 00008C, 28.673
04103E 83 14 00    1214*      dl 0x001483 ; 00008D, 28.845
041041 A2 14 00    1215*      dl 0x0014A2 ; 00008E, 29.017
041044 C1 14 00    1216*      dl 0x0014C1 ; 00008F, 29.187
041047 E0 14 00    1217*      dl 0x0014E0 ; 000090, 29.358
04104A FF 14 00    1218*      dl 0x0014FF ; 000091, 29.527
04104D 1E 15 00    1219*      dl 0x00151E ; 000092, 29.697
041050 3C 15 00    1220*      dl 0x00153C ; 000093, 29.865
041053 5B 15 00    1221*      dl 0x00155B ; 000094, 30.033
041056 79 15 00    1222*      dl 0x001579 ; 000095, 30.201
041059 98 15 00    1223*      dl 0x001598 ; 000096, 30.368
04105C B6 15 00    1224*      dl 0x0015B6 ; 000097, 30.534
04105F D4 15 00    1225*      dl 0x0015D4 ; 000098, 30.700
041062 F2 15 00    1226*      dl 0x0015F2 ; 000099, 30.865
041065 10 16 00    1227*      dl 0x001610 ; 00009A, 31.030
041068 2E 16 00    1228*      dl 0x00162E ; 00009B, 31.194
04106B 4C 16 00    1229*      dl 0x00164C ; 00009C, 31.357
04106E 6A 16 00    1230*      dl 0x00166A ; 00009D, 31.520
041071 87 16 00    1231*      dl 0x001687 ; 00009E, 31.682
041074 A5 16 00    1232*      dl 0x0016A5 ; 00009F, 31.844
041077 C2 16 00    1233*      dl 0x0016C2 ; 0000A0, 32.005
04107A DF 16 00    1234*      dl 0x0016DF ; 0000A1, 32.166
04107D FC 16 00    1235*      dl 0x0016FC ; 0000A2, 32.326
041080 19 17 00    1236*      dl 0x001719 ; 0000A3, 32.486
041083 36 17 00    1237*      dl 0x001736 ; 0000A4, 32.645
041086 53 17 00    1238*      dl 0x001753 ; 0000A5, 32.803
041089 70 17 00    1239*      dl 0x001770 ; 0000A6, 32.961
04108C 8C 17 00    1240*      dl 0x00178C ; 0000A7, 33.118
04108F A9 17 00    1241*      dl 0x0017A9 ; 0000A8, 33.275
041092 C5 17 00    1242*      dl 0x0017C5 ; 0000A9, 33.431
041095 E2 17 00    1243*      dl 0x0017E2 ; 0000AA, 33.587
041098 FE 17 00    1244*      dl 0x0017FE ; 0000AB, 33.742
04109B 1A 18 00    1245*      dl 0x00181A ; 0000AC, 33.896
04109E 36 18 00    1246*      dl 0x001836 ; 0000AD, 34.050
0410A1 52 18 00    1247*      dl 0x001852 ; 0000AE, 34.203
0410A4 6E 18 00    1248*      dl 0x00186E ; 0000AF, 34.356
0410A7 8A 18 00    1249*      dl 0x00188A ; 0000B0, 34.509
0410AA A5 18 00    1250*      dl 0x0018A5 ; 0000B1, 34.660
0410AD C1 18 00    1251*      dl 0x0018C1 ; 0000B2, 34.811
0410B0 DC 18 00    1252*      dl 0x0018DC ; 0000B3, 34.962
0410B3 F7 18 00    1253*      dl 0x0018F7 ; 0000B4, 35.112
0410B6 13 19 00    1254*      dl 0x001913 ; 0000B5, 35.262
0410B9 2E 19 00    1255*      dl 0x00192E ; 0000B6, 35.410
0410BC 49 19 00    1256*      dl 0x001949 ; 0000B7, 35.559
0410BF 64 19 00    1257*      dl 0x001964 ; 0000B8, 35.707
0410C2 7F 19 00    1258*      dl 0x00197F ; 0000B9, 35.854
0410C5 99 19 00    1259*      dl 0x001999 ; 0000BA, 36.001
0410C8 B4 19 00    1260*      dl 0x0019B4 ; 0000BB, 36.147
0410CB CE 19 00    1261*      dl 0x0019CE ; 0000BC, 36.293
0410CE E9 19 00    1262*      dl 0x0019E9 ; 0000BD, 36.438
0410D1 03 1A 00    1263*      dl 0x001A03 ; 0000BE, 36.582
0410D4 1D 1A 00    1264*      dl 0x001A1D ; 0000BF, 36.726
0410D7 37 1A 00    1265*      dl 0x001A37 ; 0000C0, 36.870
0410DA 51 1A 00    1266*      dl 0x001A51 ; 0000C1, 37.013
0410DD 6B 1A 00    1267*      dl 0x001A6B ; 0000C2, 37.155
0410E0 85 1A 00    1268*      dl 0x001A85 ; 0000C3, 37.297
0410E3 9F 1A 00    1269*      dl 0x001A9F ; 0000C4, 37.439
0410E6 B9 1A 00    1270*      dl 0x001AB9 ; 0000C5, 37.579
0410E9 D2 1A 00    1271*      dl 0x001AD2 ; 0000C6, 37.720
0410EC EC 1A 00    1272*      dl 0x001AEC ; 0000C7, 37.859
0410EF 05 1B 00    1273*      dl 0x001B05 ; 0000C8, 37.999
0410F2 1E 1B 00    1274*      dl 0x001B1E ; 0000C9, 38.137
0410F5 37 1B 00    1275*      dl 0x001B37 ; 0000CA, 38.276
0410F8 50 1B 00    1276*      dl 0x001B50 ; 0000CB, 38.413
0410FB 69 1B 00    1277*      dl 0x001B69 ; 0000CC, 38.550
0410FE 82 1B 00    1278*      dl 0x001B82 ; 0000CD, 38.687
041101 9B 1B 00    1279*      dl 0x001B9B ; 0000CE, 38.823
041104 B4 1B 00    1280*      dl 0x001BB4 ; 0000CF, 38.959
041107 CC 1B 00    1281*      dl 0x001BCC ; 0000D0, 39.094
04110A E5 1B 00    1282*      dl 0x001BE5 ; 0000D1, 39.228
04110D FD 1B 00    1283*      dl 0x001BFD ; 0000D2, 39.362
041110 16 1C 00    1284*      dl 0x001C16 ; 0000D3, 39.496
041113 2E 1C 00    1285*      dl 0x001C2E ; 0000D4, 39.629
041116 46 1C 00    1286*      dl 0x001C46 ; 0000D5, 39.762
041119 5E 1C 00    1287*      dl 0x001C5E ; 0000D6, 39.894
04111C 76 1C 00    1288*      dl 0x001C76 ; 0000D7, 40.025
04111F 8E 1C 00    1289*      dl 0x001C8E ; 0000D8, 40.156
041122 A5 1C 00    1290*      dl 0x001CA5 ; 0000D9, 40.286
041125 BD 1C 00    1291*      dl 0x001CBD ; 0000DA, 40.416
041128 D5 1C 00    1292*      dl 0x001CD5 ; 0000DB, 40.546
04112B EC 1C 00    1293*      dl 0x001CEC ; 0000DC, 40.675
04112E 04 1D 00    1294*      dl 0x001D04 ; 0000DD, 40.803
041131 1B 1D 00    1295*      dl 0x001D1B ; 0000DE, 40.931
041134 32 1D 00    1296*      dl 0x001D32 ; 0000DF, 41.059
041137 49 1D 00    1297*      dl 0x001D49 ; 0000E0, 41.186
04113A 60 1D 00    1298*      dl 0x001D60 ; 0000E1, 41.312
04113D 77 1D 00    1299*      dl 0x001D77 ; 0000E2, 41.438
041140 8E 1D 00    1300*      dl 0x001D8E ; 0000E3, 41.564
041143 A5 1D 00    1301*      dl 0x001DA5 ; 0000E4, 41.689
041146 BB 1D 00    1302*      dl 0x001DBB ; 0000E5, 41.814
041149 D2 1D 00    1303*      dl 0x001DD2 ; 0000E6, 41.938
04114C E9 1D 00    1304*      dl 0x001DE9 ; 0000E7, 42.061
04114F FF 1D 00    1305*      dl 0x001DFF ; 0000E8, 42.184
041152 15 1E 00    1306*      dl 0x001E15 ; 0000E9, 42.307
041155 2C 1E 00    1307*      dl 0x001E2C ; 0000EA, 42.429
041158 42 1E 00    1308*      dl 0x001E42 ; 0000EB, 42.551
04115B 58 1E 00    1309*      dl 0x001E58 ; 0000EC, 42.672
04115E 6E 1E 00    1310*      dl 0x001E6E ; 0000ED, 42.793
041161 84 1E 00    1311*      dl 0x001E84 ; 0000EE, 42.913
041164 99 1E 00    1312*      dl 0x001E99 ; 0000EF, 43.033
041167 AF 1E 00    1313*      dl 0x001EAF ; 0000F0, 43.152
04116A C5 1E 00    1314*      dl 0x001EC5 ; 0000F1, 43.271
04116D DA 1E 00    1315*      dl 0x001EDA ; 0000F2, 43.390
041170 F0 1E 00    1316*      dl 0x001EF0 ; 0000F3, 43.508
041173 05 1F 00    1317*      dl 0x001F05 ; 0000F4, 43.625
041176 1B 1F 00    1318*      dl 0x001F1B ; 0000F5, 43.742
041179 30 1F 00    1319*      dl 0x001F30 ; 0000F6, 43.859
04117C 45 1F 00    1320*      dl 0x001F45 ; 0000F7, 43.975
04117F 5A 1F 00    1321*      dl 0x001F5A ; 0000F8, 44.091
041182 6F 1F 00    1322*      dl 0x001F6F ; 0000F9, 44.206
041185 84 1F 00    1323*      dl 0x001F84 ; 0000FA, 44.321
041188 99 1F 00    1324*      dl 0x001F99 ; 0000FB, 44.435
04118B AD 1F 00    1325*      dl 0x001FAD ; 0000FC, 44.549
04118E C2 1F 00    1326*      dl 0x001FC2 ; 0000FD, 44.662
041191 D7 1F 00    1327*      dl 0x001FD7 ; 0000FE, 44.775
041194 EB 1F 00    1328*      dl 0x001FEB ; 0000FF, 44.888
041197 00 20 00    1329*      dl 0x002000 ; 000100, 45.000 only needed for interpolation
04119A             0034       include "fonts.inc"
04119A             0001*  fonts_load:
04119A DD 21 AB 1C 0002*      ld ix,font_list ; pointer to font list lookup
       04          
04119F 06 12       0003*      ld b,num_fonts ; loop counter
0411A1             0004*  
0411A1             0005*  @load_loop:
0411A1 C5          0006*      push bc ; save loop counter
0411A2             0007*  
0411A2             0008*  ; load font into a buffer
0411A2 DD 27 06    0009*      ld hl,(ix+font_list_bufferId)
0411A5 DD 31 09    0010*      ld iy,(ix+font_list_filename)
0411A8 CD B5 16 04 0011*      call vdu_load_buffer_from_file
0411AC             0012*  
0411AC             0013*  ; create font from buffer
0411AC DD 27 06    0014*      ld hl,(ix+font_list_bufferId)
0411AF DD 5E 00    0015*      ld e,(ix+font_list_width)
0411B2 DD 56 03    0016*      ld d,(ix+font_list_height)
0411B5 3E 00       0017*      ld a,0 ; flags
0411B7 CD 38 18 04 0018*      call vdu_font_create
0411BB             0019*  
0411BB             0020*  ; select font
0411BB DD 27 06    0021*      ld hl,(ix+font_list_bufferId)
0411BE 3E 01       0022*      ld a,1 ; flags
0411C0 CD 1E 18 04 0023*      call vdu_font_select
0411C4             0024*  
0411C4             0025*  ; ; debug print filename
0411C4             0026*  ;     call printNewLine
0411C4             0027*  ;     ld hl,(ix+font_list_filename)
0411C4             0028*  ;     call printString
0411C4             0029*  
0411C4             0030*  ; advance font_list pointer to next record
0411C4 ED 32 0C    0031*      lea ix,ix+font_list_record_size
0411C7             0032*  
0411C7             0033*  ; restore loop counter
0411C7 C1          0034*      pop bc
0411C8 10 D7       0035*      djnz @load_loop
0411CA             0036*  
0411CA             0037*  ; all done
0411CA C9          0038*      ret
0411CB             0035       include "images.inc"
0411CB             0001*  image_type: equ 0
0411CB             0002*  image_width: equ image_type+3
0411CB             0003*  image_height: equ image_width+3
0411CB             0004*  image_filesize: equ image_height+3
0411CB             0005*  image_filename: equ image_filesize+3
0411CB             0006*  image_bufferId: equ image_filename+3
0411CB             0007*  image_record_size: equ image_bufferId+3
0411CB             0008*  
0411CB 00 00 00    0009*  cur_image_list: dl 0
0411CE 00 00 00    0010*  cur_filename: dl 0
0411D1 00 00 00    0011*  cur_buffer_id: dl 0
0411D4             0012*  
0411D4             0013*  img_load_init:
0411D4             0014*  ; initialize logo's position parameters
0411D4 21 00 00 00 0015*      ld hl,0
0411D8 22 8A 12 04 0016*      ld (logo_xvel),hl
0411DC 22 8D 12 04 0017*      ld (logo_xpos),hl
0411E0             0018*  ; begin 16.8 maths to determine logo's y position and velocity
0411E0 21 00 E0 00 0019*      ld hl,240-16*256 ; allow space for text at bottom of screen
0411E4 22 93 12 04 0020*      ld (logo_ypos),hl
0411E8 EB          0021*      ex de,hl
0411E9 21 00 F8 FF 0022*      ld hl,-8*256 ; 8 pixels from top of screen
0411ED 19          0023*      add hl,de ; distance for logo to travel
0411EE 11 00 B1 FF 0024*      ld de,-sprites_num_images*256
0411F2 CD B3 08 04 0025*      call sdiv168 ; ud.e = distance / num images = y velocity
0411F6 ED 53 90 12 0026*      ld (logo_yvel),de
       04          
0411FB             0027*  ; all done
0411FB C9          0028*      ret
0411FC             0029*  
0411FC             0030*  ; inputs: bc is the number of images to load, cur_image_list set
0411FC             0031*  img_load_main:
0411FC             0032*  ; back up loop counter
0411FC C5          0033*      push bc
0411FD             0034*  
0411FD             0035*  ; load the next image
0411FD CD 34 12 04 0036*      call load_next_image
041201             0037*  
041201             0038*  ; plot the background
041201 CD 88 14 04 0039*      call vdu_cls
041205 21 02 00 00 0040*      ld hl,BUF_SPLASH_BG
041209 CD 75 15 04 0041*      call vdu_buff_select
04120D 01 00 00 00 0042*      ld bc,0
041211 11 00 00 00 0043*      ld de,0
041215 CD D1 18 04 0044*      call vdu_plot_bmp
041219             0045*  
041219             0046*  ; ; draw the most recently loaded image
041219             0047*  ; 	ld hl,(cur_buffer_id)
041219             0048*  ; 	call vdu_buff_select
041219             0049*  ; 	ld bc,0
041219             0050*  ; 	ld de,0
041219             0051*  ; 	call vdu_plot_bmp
041219             0052*  
041219             0053*  ; move logo
041219 CD 65 12 04 0054*      call move_logo
04121D             0055*  
04121D             0056*  ; print current filename
04121D 2A CE 11 04 0057*      ld hl,(cur_filename)
041221 CD 77 00 04 0058*      call printString
041225             0059*  
041225             0060*  ; flip the framebuffer
041225             0061*      ; call vdu_flip
041225             0062*  
041225             0063*  ; decrement loop counter
041225 C1          0064*      pop bc
041226 0B          0065*      dec bc
041227 79          0066*      ld a,c
041228 B7          0067*      or a
041229 C2 FC 11 04 0068*      jp nz,img_load_main
04122D 78          0069*      ld a,b
04122E B7          0070*      or a
04122F C2 FC 11 04 0071*      jp nz,img_load_main
041233 C9          0072*      ret
041234             0073*  
041234             0074*  load_next_image:
041234 FD 2A CB 11 0075*      ld iy,(cur_image_list)
       04          
041239 FD E5       0076*      push iy
04123B FD 7E 00    0077*      ld a,(iy+image_type) ; get image type
04123E FD 07 03    0078*      ld bc,(iy+image_width) ; get image width
041241 FD 17 06    0079*      ld de,(iy+image_height) ; get image height
041244 FD 31 09    0080*      ld ix,(iy+image_filesize) ; get image file size
041247 FD 27 0F    0081*      ld hl,(iy+image_bufferId) ; get image bufferId
04124A 22 D1 11 04 0082*      ld (cur_buffer_id),hl
04124E FD 37 0C    0083*      ld iy,(iy+image_filename) ; get image filename
041251 FD 22 CE 11 0084*      ld (cur_filename),iy
       04          
041256 CD 93 16 04 0085*      call vdu_load_img
04125A FD E1       0086*      pop iy
04125C ED 33 12    0087*      lea iy,iy+image_record_size
04125F FD 22 CB 11 0088*      ld (cur_image_list),iy
       04          
041264 C9          0089*      ret
041265             0090*  
041265             0091*  move_logo:
041265             0092*  ; activate logo bitmap
041265 21 03 00 00 0093*      ld hl, BUF_SPLASH_LOGO
041269 CD 75 15 04 0094*      call vdu_buff_select
04126D             0095*  ; update position based on velocity parameters
04126D 2A 93 12 04 0096*      ld hl,(logo_ypos)
041271 ED 5B 90 12 0097*      ld de,(logo_yvel)
       04          
041276 19          0098*      add hl,de
041277 22 93 12 04 0099*      ld (logo_ypos),hl
04127B             0100*  ; draw logo
04127B ED 4B 8D 12 0101*      ld bc,(logo_xpos)
       04          
041280 ED 5B 93 12 0102*      ld de,(logo_ypos)
       04          
041285 CD ED 18 04 0103*      call vdu_plot_bmp168
041289 C9          0104*      ret
04128A             0105*  
04128A 00 00 00    0106*  logo_xvel: dl 0
04128D 00 00 00    0107*  logo_xpos: dl 0
041290             0108*  
041290 00 00 00    0109*  logo_yvel: dl 0
041293 00 00 00    0110*  logo_ypos: dl 0
041296             0111*  
041296             0112*  load_ui_images:
041296             0113*  ; initialize image loading variables
041296 21 E3 48 04 0114*      ld hl,ui_image_list
04129A 22 CB 11 04 0115*      ld (cur_image_list),hl
04129E             0116*  ; load images
04129E 06 04       0117*      ld b,ui_num_images
0412A0             0118*  @loop:
0412A0 C5          0119*      push bc
0412A1 CD 34 12 04 0120*      call load_next_image
0412A5 C1          0121*      pop bc
0412A6 10 F8       0122*      djnz @loop
0412A8 C9          0123*      ret
0412A9             0124*  
0412A9             0125*  load_sprite_images:
0412A9             0126*  ; initialize image loading variables
0412A9 21 B3 3B 04 0127*      ld hl,sprites_image_list
0412AD 22 CB 11 04 0128*      ld (cur_image_list),hl
0412B1 01 4F 00 00 0129*      ld bc,sprites_num_images
0412B5             0130*  ; load images
0412B5 CD FC 11 04 0131*      call img_load_main
0412B9 C9          0132*      ret
0412BA             0133*  
0412BA             0134*  load_tilesets:
0412BA             0135*  ; initialize image loading variables
0412BA 21 AB 1F 04 0136*      ld hl,tiles_dg_image_list
0412BE 22 CB 11 04 0137*      ld (cur_image_list),hl
0412C2 01 B8 00 00 0138*      ld bc,tiles_dg_num_images
0412C6             0139*  ; load images
0412C6 CD FC 11 04 0140*      call img_load_main
0412CA             0141*  
0412CA             0142*  ; ; initialize image loading variables
0412CA             0143*  ;     ld hl,tiles_xevious_image_list
0412CA             0144*  ;     ld (cur_image_list),hl
0412CA             0145*  ;     ld bc,tiles_xevious_num_images
0412CA             0146*  ; ; load images
0412CA             0147*  ;     call img_load_main
0412CA C9          0148*      ret
0412CB             0036       include "timer.inc"
0412CB             0001*  ; Table 32. Timer Control Registers
0412CB             0002*  ; this constant is the base address of the timer control registers
0412CB             0003*  ; each timer takes three bytes:
0412CB             0004*  ;   0: control register
0412CB             0005*  ;   1: low byte of timer reset value
0412CB             0006*  ;   2: high byte of timer reset value
0412CB             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0412CB             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0412CB             0009*  TMR_CTL:     equ 80h
0412CB             0010*  
0412CB             0011*  ; Timer Control Register Bit Definitions
0412CB             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0412CB             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0412CB             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0412CB             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0412CB             0016*                              ; the TMRx_CTL register is read.
0412CB             0017*  
0412CB             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0412CB             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0412CB             0020*  
0412CB             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0412CB             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0412CB             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0412CB             0024*                              ; written to the counter when the end-of-count value is reached.
0412CB             0025*  
0412CB             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0412CB             0027*  CLK_DIV_256:  equ %00001100 ;
0412CB             0028*  CLK_DIV_64:   equ %00001000 ;
0412CB             0029*  CLK_DIV_16:   equ %00000100 ;
0412CB             0030*  CLK_DIV_4:    equ %00000000 ;
0412CB             0031*  
0412CB             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0412CB             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0412CB             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0412CB             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0412CB             0036*                              ; programmer must ensure that this bit is set to 1 each time
0412CB             0037*                              ; SINGLE-PASS mode is used.
0412CB             0038*  
0412CB             0039*  ; disable/enable the programmable reload timer
0412CB             0040*  PRT_EN_0:     equ %00000000 ;
0412CB             0041*  PRT_EN_1:     equ %00000001 ;
0412CB             0042*  
0412CB             0043*  ; Table 37. Timer Input Source Select Register
0412CB             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0412CB             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0412CB             0046*  ;   00: System clock / CLK_DIV
0412CB             0047*  ;   01: RTC / CLK_DIV
0412CB             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0412CB             0049*  ;   10: GPIO port B pin 1.
0412CB             0050*  ;   11: GPIO port B pin 1.
0412CB             0051*  TMR_ISS:   equ 92h ; register address
0412CB             0052*  
0412CB             0053*  ; Table 51. Real-Time Clock Control Register
0412CB             0054*  RTC_CTRL: equ EDh ; register address
0412CB             0055*  
0412CB             0056*  ; alarm interrupt disable/enable
0412CB             0057*  RTC_ALARM_0:    equ %00000000
0412CB             0058*  RTC_ALARM_1:    equ %10000000
0412CB             0059*  
0412CB             0060*  ; interrupt on alarm disable/enable
0412CB             0061*  RTC_INT_ENT_0:  equ %00000000
0412CB             0062*  RTC_INT_ENT_1:  equ %01000000
0412CB             0063*  
0412CB             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0412CB             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0412CB             0066*  
0412CB             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0412CB             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0412CB             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0412CB             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0412CB             0071*  
0412CB             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0412CB             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0412CB             0074*  
0412CB             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0412CB             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0412CB             0077*  
0412CB             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0412CB             0079*                                  ; RTC counter is enabled.
0412CB             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0412CB             0081*                                  ; RTC counter is disabled.
0412CB             0082*  
0412CB             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0412CB             0084*  
0412CB             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0412CB             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0412CB 00 00 00    0087*  prt_reload: dl 0x000000
0412CE             0088*  
0412CE             0089*  ; set PRT timer
0412CE             0090*  prt_set:
0412CE 21 00 00 00 0091*      ld hl,0
0412D2 22 1C 13 04 0092*      ld (prt_irq_counter),hl
0412D6 2A CB 12 04 0093*      ld hl,(prt_reload)
0412DA ED 29 84    0094*      out0 ($84),l
0412DD ED 21 85    0095*  	out0 ($85),h
0412E0             0096*  ; disable timer
0412E0 3E 06       0097*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0412E2 ED 39 83    0098*  	out0 ($83),a
0412E5             0099*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0412E5 3E 57       0100*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0412E7 ED 39 83    0101*  	out0 ($83),a
0412EA C9          0102*      ret
0412EB             0103*  
0412EB             0104*  ; ===============================================
0412EB             0105*  ; PRT Timer Interrupt Handling
0412EB             0106*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0412EB             0107*  ; -----------------------------------------------
0412EB             0108*  prt_irq_init:
0412EB             0109*      ; set up interrupt vector table 2
0412EB 21 00 00 00 0110*  	ld hl,0
0412EF 3A 0C 01 00 0111*  	ld a,($10c)
0412F3 6F          0112*  	ld l,a
0412F4 3A 0D 01 00 0113*  	ld a,($10d)
0412F8 67          0114*  	ld h,a
0412F9             0115*  
0412F9             0116*  	; skip over CALL ($c3)
0412F9 23          0117*  	inc hl
0412FA             0118*  	; load address of jump into vector table 2 (in ram)
0412FA ED 27       0119*  	ld hl,(hl)
0412FC             0120*  
0412FC             0121*  	; write CALL prt_irq_handler to vector table 2
0412FC 3E C3       0122*  	ld a,$c3
0412FE 77          0123*  	ld (hl),a
0412FF 23          0124*  	inc hl
041300 11 07 13 04 0125*  	ld de,prt_irq_handler
041304 ED 1F       0126*  	ld (hl),de
041306             0127*  
041306 C9          0128*      ret
041307             0129*  
041307             0130*  prt_irq_handler:
041307 F3          0131*  	di
041308 F5          0132*  	push af
041309 E5          0133*      push hl
04130A ED 38 83    0134*  	in0 a,($83)
04130D 2A 1C 13 04 0135*  	ld hl,(prt_irq_counter)
041311 23          0136*  	inc hl
041312 22 1C 13 04 0137*  	ld (prt_irq_counter),hl
041316 E1          0138*      pop hl
041317 F1          0139*  	pop af
041318 FB          0140*  	ei
041319 5B ED 4D    0141*  	reti.l
04131C             0142*  
04131C             0143*  prt_irq_counter:
04131C 00 00 00    0144*  	.dl 0
04131F             0145*  prt_irq_counter_saved:
04131F 00 00 00    0146*      .dl 0
041322             0147*  
041322             0148*  prt_loop_reset:
041322 E5          0149*      push hl
041323 21 00 00 00 0150*  	ld hl,0
041327 22 1C 13 04 0151*  	ld (prt_irq_counter),hl
04132B 22 8D 13 04 0152*      ld (prt_loop_counter),hl
04132F 22 90 13 04 0153*      ld (prt_loops),hl
041333 CD CE 12 04 0154*      call prt_set
041337 E1          0155*      pop hl
041338 C9          0156*      ret
041339             0157*  
041339             0158*  prt_loop_start:
041339 E5          0159*      push hl
04133A 21 00 00 00 0160*  	ld hl,0
04133E 22 1C 13 04 0161*  	ld (prt_irq_counter),hl
041342 E1          0162*      pop hl
041343 C9          0163*      ret
041344             0164*  
041344             0165*  prt_loop_stop:
041344 E5          0166*      push hl
041345 D5          0167*      push de
041346 2A 1C 13 04 0168*      ld hl,(prt_irq_counter)
04134A ED 5B 8D 13 0169*      ld de,(prt_loop_counter)
       04          
04134F 19          0170*      add hl,de
041350 22 8D 13 04 0171*      ld (prt_loop_counter),hl
041354 21 00 00 00 0172*      ld hl,0
041358 22 1C 13 04 0173*      ld (prt_irq_counter),hl
04135C 2A 90 13 04 0174*      ld hl,(prt_loops)
041360 23          0175*      inc hl
041361 22 90 13 04 0176*      ld (prt_loops),hl
041365 D1          0177*      pop de
041366 E1          0178*      pop hl
041367 C9          0179*      ret
041368             0180*  
041368             0181*  ; inputs: bc = y,x text coordinates to print
041368             0182*  prt_loop_print:
041368 F5          0183*      push af
041369 E5          0184*      push hl
04136A C5          0185*      push bc
04136B D5          0186*      push de
04136C DD E5       0187*      push ix
04136E FD E5       0188*      push iy
041370 CD 74 14 04 0189*      call vdu_move_cursor
041374             0190*  
041374 2A 8D 13 04 0191*      ld hl,(prt_loop_counter)
041378 CD 76 01 04 0192*      call printDec
04137C             0193*  
04137C 2A 90 13 04 0194*      ld hl,(prt_loops)
041380 CD 76 01 04 0195*      call printDec
041384             0196*  
041384 FD E1       0197*      pop iy
041386 DD E1       0198*      pop ix
041388 D1          0199*      pop de
041389 C1          0200*      pop bc
04138A E1          0201*      pop hl
04138B F1          0202*      pop af
04138C C9          0203*      ret
04138D             0204*  
04138D             0205*  prt_loop_counter:
04138D 00 00 00    0206*      .dl 0
041390             0207*  prt_loops:
041390 00 00 00    0208*      .dl 0
041393             0209*  
041393             0210*  ; ===============================================
041393             0211*  ; Timer functions
041393             0212*  ; -----------------------------------------------
041393             0213*  ; set a countdown timer
041393             0214*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041393             0215*  ; returns: hl = current time
041393             0216*  tmr_set:
041393 FD 2F 03    0217*      ld (iy+3),hl            ; set time remaining
041396             0218*      MOSCALL mos_sysvars     ; ix points to syvars table
041396 3E 08       0001*M 			LD	A, function
041398 5B CF       0002*M 			RST.LIL	08h
04139A DD 27 00    0219*      ld hl,(ix+sysvar_time)  ; get current time
04139D FD 2F 00    0220*      ld (iy+0),hl            ; set start time
0413A0 C9          0221*      ret
0413A1             0222*  
0413A1             0223*  ; gets time remaining on a countdown timer
0413A1             0224*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413A1             0225*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0413A1             0226*  ;          sign flags: pos = time not expired,zero or neg = time expired
0413A1             0227*  tmr_get:
0413A1             0228*      MOSCALL mos_sysvars     ; ix points to syvars table
0413A1 3E 08       0001*M 			LD	A, function
0413A3 5B CF       0002*M 			RST.LIL	08h
0413A5 DD 17 00    0229*      ld de,(ix+sysvar_time)  ; get current time
0413A8 FD 27 00    0230*      ld hl,(iy+0)            ; get start time
0413AB AF          0231*      xor a                   ; clear carry
0413AC ED 52       0232*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0413AE FD 17 03    0233*      ld de,(iy+3)            ; get timer set value
0413B1 AF          0234*      xor a                   ; clear carry
0413B2 ED 5A       0235*      adc hl,de               ; hl = time remaining
0413B4             0236*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0413B4 C9          0237*      ret
0413B5             0238*  
0413B5             0239*  tmr_test: ds 6 ; example of a buffer to hold timer data
0413BB             0240*  
0413BB 00 00 00    0241*  timestamp_now: dl 0
0413BE 00 00 00    0242*  timestamp_old: dl 0
0413C1 00 00 00    0243*  timestamp_chg: dl 0
0413C4             0244*  
0413C4             0245*  ; update the global timestamp from the system clock
0413C4             0246*  ; inputs: none
0413C4             0247*  ; returns: hl = time elapsed in 1/120ths of a second
0413C4             0248*  ;          ix = pointer to syvars table
0413C4             0249*  ; destroys: af,hl,de,ix
0413C4             0250*  timestamp_tick:
0413C4 ED 5B BB 13 0251*      ld de,(timestamp_now)   ; get previous time
       04          
0413C9 ED 53 BE 13 0252*      ld (timestamp_old),de   ; save previous time
       04          
0413CE             0253*      MOSCALL mos_sysvars     ; ix points to syvars table
0413CE 3E 08       0001*M 			LD	A, function
0413D0 5B CF       0002*M 			RST.LIL	08h
0413D2 DD 27 00    0254*      ld hl,(ix+sysvar_time)  ; get current time
0413D5 22 BB 13 04 0255*      ld (timestamp_now),hl   ; save current time
0413D9 AF          0256*      xor a                   ; clear carry
0413DA ED 52       0257*      sbc hl,de               ; hl = time elapsed
0413DC 22 C1 13 04 0258*      ld (timestamp_chg),hl   ; save elapsed time
0413E0 C9          0259*      ret
0413E1             0260*  
0413E1             0261*  ; set a countdown timer
0413E1             0262*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413E1             0263*  ; requires: timestamp_tick to be called at least once before this function
0413E1             0264*  ; returns: hl = current time
0413E1             0265*  ; destroys: hl
0413E1             0266*  timestamp_tmr_set:
0413E1 FD 2F 03    0267*      ld (iy+3),hl            ; set time remaining
0413E4 2A BB 13 04 0268*      ld hl,(timestamp_now)   ; get current timestamp
0413E8 FD 2F 00    0269*      ld (iy+0),hl            ; set start time
0413EB C9          0270*      ret
0413EC             0271*  
0413EC             0272*  ; gets time remaining on a countdown timer following the global timestamp
0413EC             0273*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413EC             0274*  ; requires: timestamp_tick to be called at least once before this function
0413EC             0275*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0413EC             0276*  ;          sign flags: pos = time not expired,zero or neg = time expired
0413EC             0277*  ; destroys: af,hl,de
0413EC             0278*  timestamp_tmr_get:
0413EC ED 5B BB 13 0279*      ld de,(timestamp_now)   ; get current timestamp
       04          
0413F1 FD 27 00    0280*      ld hl,(iy+0)            ; get start time
0413F4 AF          0281*      xor a                   ; clear carry
0413F5 ED 52       0282*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0413F7 FD 17 03    0283*      ld de,(iy+3)            ; get timer set value
0413FA AF          0284*      xor a                   ; clear carry
0413FB ED 5A       0285*      adc hl,de               ; hl = time remaining
0413FD             0286*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0413FD C9          0287*      ret
0413FE             0288*  
0413FE             0289*  ; set a stopwatch
0413FE             0290*  ; returns: hl = start time
0413FE             0291*  ; destroys: hl,ix
0413FE             0292*  stopwatch_set:
0413FE             0293*      MOSCALL mos_sysvars     ; ix points to syvars table
0413FE 3E 08       0001*M 			LD	A, function
041400 5B CF       0002*M 			RST.LIL	08h
041402 DD 27 00    0294*      ld hl,(ix+sysvar_time)  ; get current time
041405 22 1A 14 04 0295*      ld (stopwatch_started),hl            ; set start time
041409 C9          0296*      ret
04140A             0297*  
04140A             0298*  ; gets time elapsed on a stopwatch
04140A             0299*  ; returns: hl = time elapsed in 1/120ths of a second
04140A             0300*  ; destroys: af,hl,de,ix
04140A             0301*  stopwatch_get:
04140A             0302*      MOSCALL mos_sysvars     ; ix points to syvars table
04140A 3E 08       0001*M 			LD	A, function
04140C 5B CF       0002*M 			RST.LIL	08h
04140E DD 27 00    0303*      ld hl,(ix+sysvar_time)  ; get current time
041411 ED 5B 1A 14 0304*      ld de,(stopwatch_started)            ; get start time
       04          
041416 AF          0305*      xor a                   ; clear carry
041417 ED 52       0306*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041419 C9          0307*      ret
04141A             0308*  
04141A             0309*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04141D             0310*  
04141D             0311*  ; ------------------
04141D             0312*  ; delay routine
04141D             0313*  ; Author: Richard Turrnidge
04141D             0314*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
04141D             0315*  ; routine waits a fixed time,then returns
04141D             0316*  ; arrive with A =  the delay byte. One bit to be set only.
04141D             0317*  ; eg. ld A,00000100b
04141D             0318*  
04141D             0319*  multiPurposeDelay:
04141D F5          0320*      push af
04141E C5          0321*      push bc
04141F DD E5       0322*      push ix
041421 47          0323*      ld b,a
041422 3E 08       0324*      ld a,$08
041424 5B CF       0325*      RST.LIL	08h                 ; get IX pointer to sysvars
041426             0326*  
041426             0327*  waitLoop:
041426             0328*  
041426 DD 7E 00    0329*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041429             0330*  
041429             0331*                                  ;   we check if bit set is same as last time we checked.
041429             0332*                                  ;   bit 0 - don't use
041429             0333*                                  ;   bit 1 - changes 64 times per second
041429             0334*                                  ;   bit 2 - changes 32 times per second
041429             0335*                                  ;   bit 3 - changes 16 times per second
041429             0336*  
041429             0337*                                  ;   bit 4 - changes 8 times per second
041429             0338*                                  ;   bit 5 - changes 4 times per second
041429             0339*                                  ;   bit 6 - changes 2 times per second
041429             0340*                                  ;   bit 7 - changes 1 times per second
041429 A0          0341*      and b
04142A 4F          0342*      ld c,a
04142B 3A 3C 14 04 0343*      ld a,(oldTimeStamp)
04142F B9          0344*      cp c                        ; is A same as last value?
041430 28 F4       0345*      jr z,waitLoop              ; loop here if it is
041432 79          0346*      ld a,c
041433 32 3C 14 04 0347*      ld (oldTimeStamp),a        ; set new value
041437             0348*  
041437 DD E1       0349*      pop ix
041439 C1          0350*      pop bc
04143A F1          0351*      pop af
04143B C9          0352*      ret
04143C             0353*  
04143C 00          0354*  oldTimeStamp:   .db 00h
04143D             0037       include "vdu.inc"
04143D             0001*  
04143D             0002*  ; VDU 30: Home cursor
04143D             0003*  vdu_home_cursor:
04143D 3E 1E       0004*      ld a,30
04143F 5B D7       0005*  	rst.lil $10
041441 C9          0006*  	ret
041442             0007*  
041442             0008*  vdu_cursor_on:
041442 21 4D 14 04 0009*  	ld hl,@cmd
041446 01 03 00 00 0010*  	ld bc,@end-@cmd
04144A 5B DF       0011*  	rst.lil $18
04144C C9          0012*  	ret
04144D             0013*  @cmd:
04144D 17 01 01    0014*  	db 23,1,1
041450             0015*  @end:
041450             0016*  
041450             0017*  vdu_cursor_off:
041450 21 5B 14 04 0018*  	ld hl,@cmd
041454 01 03 00 00 0019*  	ld bc,@end-@cmd
041458 5B DF       0020*  	rst.lil $18
04145A C9          0021*  	ret
04145B             0022*  @cmd:
04145B 17 01 00    0023*  	db 23,1,0
04145E             0024*  @end:
04145E             0025*  
04145E             0026*  ; VDU 5: Write text at graphics cursor
04145E             0027*  ; inputs: a is the character to write to the screen
04145E             0028*  ; prerequisites: the graphics cursor at the intended position on screen
04145E             0029*  ; outputs: see the name of the function
04145E             0030*  ; destroys: a, hl, bc
04145E             0031*  vdu_char_to_gfx_cursor:
04145E 32 6E 14 04 0032*  	ld (@arg),a
041462 21 6D 14 04 0033*  	ld hl,@cmd
041466 01 02 00 00 0034*  	ld bc,@end-@cmd
04146A 5B DF       0035*  	rst.lil $18
04146C C9          0036*  	ret
04146D 05          0037*  @cmd: db 5
04146E 00          0038*  @arg: db 0
04146F             0039*  @end:
04146F             0040*  ; VDU 9: Move cursor forward one character
04146F             0041*  vdu_cursor_forward:
04146F 3E 09       0042*      ld a,9
041471 5B D7       0043*  	rst.lil $10
041473 C9          0044*  	ret
041474             0045*  
041474             0046*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041474             0047*  ; inputs: c=x, b=y 8-bit unsigned integers
041474             0048*  vdu_move_cursor:
041474 ED 43 85 14 0049*      ld (@x0),bc
       04          
041479 21 84 14 04 0050*  	ld hl,@cmd
04147D 01 03 00 00 0051*  	ld bc,@end-@cmd
041481 5B DF       0052*  	rst.lil $18
041483 C9          0053*  	ret
041484 1F          0054*  @cmd: 	db 31
041485 00          0055*  @x0:	db 0
041486 00          0056*  @y0: 	db 0
041487 00          0057*  @end: 	db 0 ; padding
041488             0058*  
041488             0059*  ; VDU 12: Clear text area (CLS)
041488             0060*  vdu_cls:
041488 3E 0C       0061*      ld a,12
04148A 5B D7       0062*  	rst.lil $10
04148C C9          0063*  	ret
04148D             0064*  
04148D             0065*  vdu_flip:
04148D 21 98 14 04 0066*  	ld hl,@cmd
041491 01 03 00 00 0067*  	ld bc,@end-@cmd
041495 5B DF       0068*  	rst.lil $18
041497 C9          0069*  	ret
041498 17 00 C3    0070*  @cmd: db 23,0,0xC3
04149B             0071*  @end:
04149B             0072*  
04149B             0073*  ; VDU 16: Clear graphics area (CLG)
04149B             0074*  vdu_clg:
04149B 3E 10       0075*      ld a,16
04149D 5B D7       0076*  	rst.lil $10
04149F C9          0077*  	ret
0414A0             0078*  
0414A0             0079*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
0414A0             0080*  ; VDU 23, 7: Scrolling
0414A0             0081*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
0414A0             0082*  ; inputs: a, extent; l, direction; h; speed
0414A0             0083*  vdu_scroll_down:
0414A0 32 B5 14 04 0084*  	ld (@extent),a
0414A4 22 B6 14 04 0085*  	ld (@dir),hl ; implicitly populates @speed
0414A8 21 B3 14 04 0086*  	ld hl,@cmd
0414AC 01 05 00 00 0087*  	ld bc,@end-@cmd
0414B0 5B DF       0088*  	rst.lil $18     ;; Sending command to VDP
0414B2 C9          0089*  	ret
0414B3 17 07       0090*  @cmd:       db 23,7
0414B5 00          0091*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
0414B6 00          0092*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
0414B7 00          0093*  @speed:     db 0x00 ; pixels
0414B8 00          0094*  @end:		db 0x00 ; padding
0414B9             0095*  
0414B9             0096*  ; COLOUR MODES
0414B9             0097*  ; Mode	Effect
0414B9             0098*  ; 0	Set on-screen pixel to target colour value
0414B9             0099*  ; 1	OR value with the on-screen pixel
0414B9             0100*  ; 2	AND value with the on-screen pixel
0414B9             0101*  ; 3	XOR value with the on-screen pixel
0414B9             0102*  ; 4	Invert the on-screen pixel
0414B9             0103*  ; 5	No operation
0414B9             0104*  ; 6	AND the inverse of the specified colour with the on-screen pixel
0414B9             0105*  ; 7	OR the inverse of the specified colour with the on-screen pixel
0414B9             0106*  
0414B9             0107*  ; VDU 17, colour: Define text colour (COLOUR)
0414B9             0108*  vdu_colour_text:
0414B9 32 C9 14 04 0109*  	ld (@arg),a
0414BD 21 C8 14 04 0110*  	ld hl,@cmd
0414C1 01 02 00 00 0111*  	ld bc,@end-@cmd
0414C5 5B DF       0112*  	rst.lil $18
0414C7 C9          0113*  	ret
0414C8 11          0114*  @cmd: db 17
0414C9 00          0115*  @arg: db 0
0414CA             0116*  @end:
0414CA             0117*  
0414CA             0118*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0414CA             0119*  ; inputs: a=mode, c=colour (add 128 to set background colour)
0414CA             0120*  vdu_gcol:
0414CA 32 DF 14 04 0121*  	ld (@mode),a
0414CE 79          0122*      ld a,c
0414CF 32 E0 14 04 0123*      ld (@col),a
0414D3 21 DE 14 04 0124*  	ld hl,@cmd
0414D7 01 03 00 00 0125*  	ld bc,@end-@cmd
0414DB 5B DF       0126*  	rst.lil $18
0414DD C9          0127*  	ret
0414DE 12          0128*  @cmd:  db 18
0414DF 00          0129*  @mode: db 0
0414E0 00          0130*  @col:  db 0
0414E1             0131*  @end:
0414E1             0132*  
0414E1             0133*  
0414E1             0134*  ; VDU 28, left, bottom, right, top: Set text viewport **
0414E1             0135*  ; MIND THE LITTLE-ENDIANESS
0414E1             0136*  ; inputs: c=left,b=bottom,e=right,d=top
0414E1             0137*  ; outputs; nothing
0414E1             0138*  ; destroys: a might make it out alive
0414E1             0139*  vdu_set_txt_viewport:
0414E1 ED 43 F7 14 0140*      ld (@lb),bc
       04          
0414E6 ED 53 F9 14 0141*  	ld (@rt),de
       04          
0414EB 21 F6 14 04 0142*  	ld hl,@cmd
0414EF 01 05 00 00 0143*  	ld bc,@end-@cmd
0414F3 5B DF       0144*  	rst.lil $18
0414F5 C9          0145*  	ret
0414F6 1C          0146*  @cmd:   db 28 ; set text viewport command
0414F7 00 00       0147*  @lb: 	dw 0x0000 ; set by bc
0414F9 00 00       0148*  @rt: 	dw 0x0000 ; set by de
0414FB 00          0149*  @end:   db 0x00	  ; padding
0414FC             0150*  
0414FC             0151*  ; Wait for VBLANK interrupt
0414FC             0152*  vdu_vblank:
0414FC DD E5       0153*      PUSH 	IX
0414FE             0154*  	MOSCALL	mos_sysvars
0414FE 3E 08       0001*M 			LD	A, function
041500 5B CF       0002*M 			RST.LIL	08h
041502 DD 7E 00    0155*  	LD	A, (IX + sysvar_time + 0)
041505             0156*  @wait:
041505 DD BE 00    0157*      CP 	A, (IX + sysvar_time + 0)
041508 28 FB       0158*      JR	Z, @wait
04150A DD E1       0159*      POP	IX
04150C C9          0160*      RET
04150D             0161*  
04150D             0162*  ; VDU 29, x; y;: Set graphics origin
04150D             0163*  ; This command sets the graphics origin.
04150D             0164*  ; The origin is the point on the screen where the coordinates (0,0) are located.
04150D             0165*  ; inputs: bc=x0,de=y0
04150D             0166*  ; outputs; nothing
04150D             0167*  ; destroys: a might make it out alive
04150D             0168*  vdu_set_gfx_origin:
04150D ED 43 23 15 0169*      ld (@x0),bc
       04          
041512 ED 53 25 15 0170*      ld (@y0),de
       04          
041517 21 22 15 04 0171*      ld hl,@cmd
04151B 01 05 00 00 0172*      ld bc,@end-@cmd
04151F 5B DF       0173*      rst.lil $18
041521 C9          0174*      ret
041522 1D          0175*  @cmd:   db 29 ; set graphics origin command
041523 00 00       0176*  @x0: 	dw 0x0000 ; set by bc
041525 00 00       0177*  @y0: 	dw 0x0000 ; set by de
041527 00          0178*  @end:   db 0x00	  ; padding
041528             0179*  
041528             0180*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
041528             0181*  ; NOTE: the order of the y-coordinate parameters are inverted
041528             0182*  ; 	because we have turned off logical screen scaling
041528             0183*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041528             0184*  ; outputs; nothing
041528             0185*  ; destroys: a might make it out alive
041528             0186*  vdu_set_gfx_viewport:
041528 ED 43 48 15 0187*      ld (@x0),bc
       04          
04152D FD 22 4A 15 0188*      ld (@y1),iy
       04          
041532 DD 22 4C 15 0189*  	ld (@x1),ix
       04          
041537 ED 53 4E 15 0190*  	ld (@y0),de
       04          
04153C 21 47 15 04 0191*  	ld hl,@cmd
041540 01 09 00 00 0192*  	ld bc,@end-@cmd
041544 5B DF       0193*  	rst.lil $18
041546 C9          0194*  	ret
041547 18          0195*  @cmd:   db 24 ; set graphics viewport command
041548 00 00       0196*  @x0: 	dw 0x0000 ; set by bc
04154A 00 00       0197*  @y1: 	dw 0x0000 ; set by iy
04154C 00 00       0198*  @x1: 	dw 0x0000 ; set by ix
04154E 00 00       0199*  @y0: 	dw 0x0000 ; set by de
041550 00          0200*  @end:   db 0x00	  ; padding
041551             0201*  
041551             0202*  ; SCREEN MODES
041551             0203*  ; ===============================
041551             0204*  ; Mode  Horz  Vert  Cols  Refresh
041551             0205*  ; ---   ----  ----  ----  -------
041551             0206*  ; 11    320   240   2     60hz
041551             0207*  ; 139   320   240   2     60hz
041551             0208*  ; 23    512   384   2     60hz
041551             0209*  ; 151   512   384   2     60hz
041551             0210*  ; 6     640   240   2     60hz
041551             0211*  ; 134   640   240   2     60hz
041551             0212*  ; 2     640   480   2     60hz
041551             0213*  ; 130   640   480   2     60hz
041551             0214*  ; 17    800   600   2     60hz
041551             0215*  ; 145   800   600   2     60hz
041551             0216*  ; 18    1024  768   2     60hz
041551             0217*  ; 146   1024  768   2     60hz
041551             0218*  ; ---   ----  ----  ----  -------
041551             0219*  ; 10    320   240   4     60hz
041551             0220*  ; 138   320   240   4     60hz
041551             0221*  ; 22    512   384   4     60hz
041551             0222*  ; 150   512   384   4     60hz
041551             0223*  ; 5     640   240   4     60hz
041551             0224*  ; 133   640   240   4     60hz
041551             0225*  ; 1     640   480   4     60hz
041551             0226*  ; 129   640   480   4     60hz
041551             0227*  ; 16    800   600   4     60hz
041551             0228*  ; 19    1024  768   4     60hz
041551             0229*  ; ---   ----  ----  ----  -------
041551             0230*  ; 9     320   240   16    60hz
041551             0231*  ; 137   320   240   16    60hz
041551             0232*  ; 21    512   384   16    60hz
041551             0233*  ; 149   512   384   16    60hz
041551             0234*  ; 4     640   240   16    60hz
041551             0235*  ; 132   640   240   16    60hz
041551             0236*  ; 0     640   480   16    60hz
041551             0237*  ; 7     n/a   n/a   16    60hz
041551             0238*  ; ---   ----  ----  ----  -------
041551             0239*  ; 8     320   240   64    60hz
041551             0240*  ; 136   320   240   64    60hz
041551             0241*  ; 20    512   384   64    60hz
041551             0242*  ; 3     640   240   64    60hz
041551             0243*  ; ---   ----  ----  ----  -------
041551             0244*  vdu_set_screen_mode:
041551 32 61 15 04 0245*  	ld (@arg),a
041555 21 60 15 04 0246*  	ld hl,@cmd
041559 01 02 00 00 0247*  	ld bc,@end-@cmd
04155D 5B DF       0248*  	rst.lil $18
04155F C9          0249*  	ret
041560 16          0250*  @cmd: db 22 ; set screen mode
041561 00          0251*  @arg: db 0  ; screen mode parameter
041562             0252*  @end:
041562             0253*  
041562             0254*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041562             0255*  ; inputs: a is scaling mode, 1=on, 0=off
041562             0256*  ; note: default setting on boot is scaling ON
041562             0257*  vdu_set_scaling:
041562 32 74 15 04 0258*  	ld (@arg),a
041566 21 71 15 04 0259*  	ld hl,@cmd
04156A 01 04 00 00 0260*  	ld bc,@end-@cmd
04156E 5B DF       0261*  	rst.lil $18
041570 C9          0262*  	ret
041571 17 00 C0    0263*  @cmd: db 23,0,0xC0
041574 00          0264*  @arg: db 0  ; scaling on/off
041575             0265*  @end:
041575             0266*  
041575             0267*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041575             0268*  ; inputs: hl=bufferId
041575             0269*  vdu_buff_select:
041575 22 87 15 04 0270*  	ld (@bufferId),hl
041579 21 84 15 04 0271*  	ld hl,@cmd
04157D 01 05 00 00 0272*  	ld bc,@end-@cmd
041581 5B DF       0273*  	rst.lil $18
041583 C9          0274*  	ret
041584 17 1B 20    0275*  @cmd: db 23,27,0x20
041587 00 00       0276*  @bufferId: dw 0x0000
041589 00          0277*  @end: db 0x00 ; padding
04158A             0278*  
04158A             0279*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04158A             0280*  ; inputs: a=format; bc=width; de=height
04158A             0281*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04158A             0282*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04158A             0283*  ; 0 	RGBA8888 (4-bytes per pixel)
04158A             0284*  ; 1 	RGBA2222 (1-bytes per pixel)
04158A             0285*  ; 2 	Mono/Mask (1-bit per pixel)
04158A             0286*  ; 3 	Reserved for internal use by VDP (“native” format)
04158A             0287*  vdu_bmp_create:
04158A ED 43 A6 15 0288*      ld (@width),bc
       04          
04158F ED 53 A8 15 0289*      ld (@height),de
       04          
041594 32 AA 15 04 0290*      ld (@fmt),a
041598 21 A3 15 04 0291*  	ld hl,@cmd
04159C 01 08 00 00 0292*  	ld bc,@end-@cmd
0415A0 5B DF       0293*  	rst.lil $18
0415A2 C9          0294*  	ret
0415A3 17 1B 21    0295*  @cmd:       db 23,27,0x21
0415A6 00 00       0296*  @width:     dw 0x0000
0415A8 00 00       0297*  @height:    dw 0x0000
0415AA 00          0298*  @fmt:       db 0x00
0415AB             0299*  @end:
0415AB             0300*  
0415AB             0301*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0415AB             0302*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0415AB             0303*  vdu_load_img_rgba2_to_8:
0415AB             0304*  ; backup the target buffer id and image dimensions
0415AB E5          0305*      push hl
0415AC D5          0306*      push de
0415AD C5          0307*      push bc
0415AE             0308*  ; load the rgba2 image to working buffer 65534
0415AE 21 FE FF 00 0309*      ld hl,65534 ; temporary working buffer id
0415B2 CD B5 16 04 0310*  	call vdu_load_buffer_from_file
0415B6             0311*  ; restore the image dimensions and target buffer id
0415B6 C1          0312*      pop bc
0415B7 D1          0313*      pop de
0415B8 E1          0314*      pop hl
0415B9             0315*  ; fall through to vdu_rgba2_to_8
0415B9             0316*  
0415B9             0317*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0415B9             0318*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0415B9             0319*  ; the "expand bitmap" command is:
0415B9             0320*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0415B9             0321*  ; and then to reverse the byte order to fix endian-ness:
0415B9             0322*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0415B9             0323*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0415B9             0324*  ; VDU 23,27,&20,targetBufferID%;
0415B9             0325*  ; VDU 23,27,&21,width%;height%;0
0415B9             0326*  ; -------------------------------------------------------------------
0415B9             0327*  ; inputs: bc,de image width,height ; hl = targetBufferId
0415B9             0328*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0415B9             0329*  vdu_rgba2_to_8:
0415B9             0330*  ; load the image dimensions and buffer id parameters
0415B9 ED 43 15 16 0331*      ld (@width),bc
       04          
0415BE ED 53 17 16 0332*      ld (@height),de
       04          
0415C3 22 FA 15 04 0333*      ld (@bufferId0),hl
0415C7 22 07 16 04 0334*      ld (@bufferId2),hl
0415CB 22 10 16 04 0335*      ld (@bufferId1),hl
0415CF             0336*  ; clean up bytes that got stomped on by the ID loads
0415CF 3E 48       0337*      ld a,0x48
0415D1 32 FC 15 04 0338*      ld (@bufferId0+2),a
0415D5 3E 17       0339*      ld a,23
0415D7 32 12 16 04 0340*      ld (@bufferId1+2),a
0415DB 3E 18       0341*      ld a,24
0415DD 32 09 16 04 0342*      ld (@bufferId2+2),a
0415E1 AF          0343*      xor a
0415E2 32 19 16 04 0344*      ld (@height+2),a
0415E6             0345*  ; send the vdu command strings
0415E6 21 F1 15 04 0346*      ld hl,@beg
0415EA 01 29 00 00 0347*      ld bc,@end-@beg
0415EE 5B DF       0348*      rst.lil $18
0415F0 C9          0349*      ret
0415F1             0350*  @beg:
0415F1             0351*  ; Command 14: Consolidate blocks in a buffer
0415F1             0352*  ; VDU 23, 0, &A0, bufferId; 14
0415F1 17 00 A0    0353*      db 23,0,0xA0
0415F4 FE FF       0354*      dw 65534 ; workingBufferId
0415F6 0E          0355*      db 14 ; consolidate blocks
0415F7             0356*  ; the "expand bitmap" command is:
0415F7             0357*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0415F7 17 00 A0    0358*      db 23,0,0xA0
0415FA 00 00       0359*  @bufferId0: dw 0x0000 ; targetBufferId
0415FC 48          0360*      db 0x48 ; given as decimal command 72 in the docs
0415FD 02          0361*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0415FE FE FF       0362*      dw 65534 ; sourceBufferId
041600 00 7F BF FF 0363*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041604             0364*  ; reverse the byte order to fix endian-ness:
041604             0365*  ; Command 24: Reverse the order of data of blocks within a buffer
041604             0366*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041604             0367*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041604 17 00 A0    0368*      db 23,0,0xA0
041607 00 00       0369*  @bufferId2:    dw 0x0000 ; targetBufferId
041609 18          0370*      db 24 ; reverse byte order
04160A 04          0371*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
04160B 04 00       0372*      dw 4 ; size (4 bytes)
04160D             0373*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
04160D             0374*  ; VDU 23,27,&20,targetBufferID%;
04160D 17 1B 20    0375*      db 23,27,0x20 ; select bitmap
041610 00 00       0376*  @bufferId1: dw 0x0000 ; targetBufferId
041612             0377*  ; VDU 23,27,&21,width%;height%;0
041612 17 1B 21    0378*      db 23,27,0x21 ; create bitmap from buffer
041615 00 00       0379*  @width: dw 0x0000
041617 00 00       0380*  @height: dw 0x0000
041619 00          0381*      db 0x00 ; rgba8888 format
04161A             0382*  @end:
04161A             0383*  
04161A             0384*  ; scratch variables
04161A 00 00 00    0385*  bufferId0: dl 0x000000
04161D 00 00 00    0386*  bufferId1: dl 0x000000
041620             0387*  
041620             0388*  ; load a vdu buffer from local memory
041620             0389*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041620             0390*  vdu_load_buffer:
041620 ED 43 49 16 0391*      ld (@length),bc
       04          
041625 D5          0392*      push de ; save data pointer
041626             0393*  ; send the vdu command string
041626 7D          0394*      ld a,l
041627 32 46 16 04 0395*      ld (@bufferId),a
04162B 7C          0396*      ld a,h
04162C 32 47 16 04 0397*      ld (@bufferId+1),a
041630 21 43 16 04 0398*      ld hl,@cmd
041634 01 08 00 00 0399*      ld bc,@end-@cmd
041638 5B DF       0400*      rst.lil $18
04163A             0401*  ; send the buffer data
04163A E1          0402*      pop hl ; pointer to data
04163B ED 4B 49 16 0403*      ld bc,(@length)
       04          
041640 5B DF       0404*      rst.lil $18 ; send it
041642 C9          0405*      ret
041643             0406*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041643 17 00 A0    0407*  @cmd:       db 23,0,0xA0
041646 00 00       0408*  @bufferId:	dw 0x0000
041648 00          0409*  		    db 0 ; load buffer
041649 00 00       0410*  @length:	dw 0x0000
04164B 00          0411*  @end: db 0 ; padding
04164C             0412*  
04164C             0413*  ; clear a buffer
04164C             0414*  ; inputs: hl = bufferId
04164C             0415*  vdu_clear_buffer:
04164C 7D          0416*      ld a,l
04164D 32 64 16 04 0417*      ld (@bufferId),a
041651 7C          0418*      ld a,h
041652 32 65 16 04 0419*      ld (@bufferId+1),a
041656 21 61 16 04 0420*      ld hl,@cmd
04165A 01 06 00 00 0421*      ld bc,@end-@cmd
04165E 5B DF       0422*      rst.lil $18
041660 C9          0423*      ret
041661 17 00 A0    0424*  @cmd:       db 23,0,0xA0
041664 00 00       0425*  @bufferId:	dw 0x0000
041666 02          0426*  		    db 2 ; clear buffer
041667             0427*  @end:
041667             0428*  
041667             0429*  vdu_clear_all_buffers:
041667             0430*  ; clear all buffers
041667 21 72 16 04 0431*      ld hl,@beg
04166B 01 06 00 00 0432*      ld bc,@end-@beg
04166F 5B DF       0433*      rst.lil $18
041671 C9          0434*      ret
041672 17 00 A0    0435*  @beg: db 23,0,$A0
041675 FF FF       0436*        dw -1 ; clear all buffers
041677 02          0437*        db 2  ; command 2: clear a buffer
041678             0438*  @end:
041678             0439*  
041678             0440*  ; Command 14: Consolidate blocks in a buffer
041678             0441*  vdu_consolidate_buffer:
041678             0442*  ; set parameters for vdu call
041678 7D          0443*      ld a,l
041679 32 90 16 04 0444*      ld (@bufferId),a
04167D 7C          0445*      ld a,h
04167E 32 91 16 04 0446*      ld (@bufferId+1),a
041682 21 8D 16 04 0447*      ld hl,@beg
041686 01 06 00 00 0448*      ld bc,@end-@beg
04168A 5B DF       0449*      rst.lil $18
04168C C9          0450*      ret
04168D             0451*  ; VDU 23, 0, &A0, bufferId; 14
04168D 17 00 A0    0452*  @beg: db 23,0,0xA0
041690 00 00       0453*  @bufferId: dw 0x0000
041692 0E          0454*             db 14
041693             0455*  @end:
041693             0456*  
041693             0457*  ; load an image file to a buffer and make it a bitmap
041693             0458*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041693             0459*  vdu_load_img:
041693             0460*  ; back up image type and dimension parameters
041693 22 1A 16 04 0461*      ld (bufferId0),hl
041697 F5          0462*      push af
041698 C5          0463*  	push bc
041699 D5          0464*  	push de
04169A             0465*  ; load the image
04169A CD B5 16 04 0466*  	call vdu_load_buffer_from_file
04169E             0467*  ; now make it a bitmap
04169E 2A 1A 16 04 0468*      ld hl,(bufferId0)
0416A2 CD 78 16 04 0469*      call vdu_consolidate_buffer
0416A6 2A 1A 16 04 0470*      ld hl,(bufferId0)
0416AA CD 75 15 04 0471*      call vdu_buff_select
0416AE D1          0472*  	pop de ; image height
0416AF C1          0473*  	pop bc ; image width
0416B0 F1          0474*  	pop af ; image type
0416B1 C3 8A 15 04 0475*  	jp vdu_bmp_create ; will return to caller from there
0416B5             0476*  
0416B5             0477*  ; inputs: hl = bufferId; iy = pointer to filename
0416B5             0478*  vdu_load_buffer_from_file:
0416B5 22 1A 16 04 0479*      ld (bufferId0),hl
0416B9             0480*  
0416B9             0481*  ; clear target buffer
0416B9 CD 4C 16 04 0482*      call vdu_clear_buffer
0416BD             0483*  
0416BD             0484*  ; open the file in read mode
0416BD             0485*  ; Open a file
0416BD             0486*  ; HLU: Filename
0416BD             0487*  ;   C: Mode
0416BD             0488*  ; Returns:
0416BD             0489*  ;   A: Filehandle, or 0 if couldn't open
0416BD FD E5       0490*  	push iy ; pointer to filename
0416BF E1          0491*  	pop hl
0416C0 0E 01       0492*  	ld c,fa_read
0416C2             0493*      MOSCALL mos_fopen
0416C2 3E 0A       0001*M 			LD	A, function
0416C4 5B CF       0002*M 			RST.LIL	08h
0416C6 32 01 17 04 0494*      ld (@filehandle),a
0416CA             0495*  
0416CA             0496*  @read_file:
0416CA             0497*  ; Read a block of data from a file
0416CA             0498*  ;   C: Filehandle
0416CA             0499*  ; HLU: Pointer to where to write the data to
0416CA             0500*  ; DEU: Number of bytes to read
0416CA             0501*  ; Returns:
0416CA             0502*  ; DEU: Number of bytes read
0416CA 3A 01 17 04 0503*      ld a,(@filehandle)
0416CE 4F          0504*      ld c,a
0416CF 21 00 E0 B7 0505*      ld hl,filedata
0416D3 11 00 20 00 0506*      ld de,8192 ; max we can read into onboard sram at one time
0416D7             0507*      MOSCALL mos_fread
0416D7 3E 1A       0001*M 			LD	A, function
0416D9 5B CF       0002*M 			RST.LIL	08h
0416DB             0508*  
0416DB             0509*  ; test de for zero bytes read
0416DB 21 00 00 00 0510*      ld hl,0
0416DF AF          0511*      xor a ; clear carry
0416E0 ED 52       0512*      sbc hl,de
0416E2 CA F8 16 04 0513*      jp z,@close_file
0416E6             0514*  
0416E6             0515*  ; load a vdu buffer from local memory
0416E6             0516*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0416E6 2A 1A 16 04 0517*      ld hl,(bufferId0)
0416EA D5          0518*      push de ; chunksize
0416EB C1          0519*      pop bc
0416EC 11 00 E0 B7 0520*      ld de,filedata
0416F0 CD 20 16 04 0521*      call vdu_load_buffer
0416F4             0522*  
0416F4             0523*  ; read the next block
0416F4 C3 CA 16 04 0524*      jp @read_file
0416F8             0525*  
0416F8             0526*  ; close the file
0416F8             0527*  @close_file:
0416F8 3A 01 17 04 0528*      ld a,(@filehandle)
0416FC             0529*      MOSCALL mos_fclose
0416FC 3E 0B       0001*M 			LD	A, function
0416FE 5B CF       0002*M 			RST.LIL	08h
041700 C9          0530*      ret ; vdu_load_buffer_from_file
041701             0531*  
041701 00          0532*  @filehandle: db 0 ; file handle
041702 00 00 00    0533*  @fil: dl 0 ; pointer to FIL struct
041705             0534*  
041705 00 00 00    0535*  @chunkpointer: dl 0 ; pointer to current chunk
041708             0536*  
041708             0537*  ; File information structure (FILINFO)
041708             0538*  @filinfo:
041708 00 00 00 00 0539*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
04170C 00 00       0540*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
04170E 00 00       0541*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041710 00          0542*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041711 00 00 00 00 0543*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
04171E 00 00 00 00 0544*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04181E             0038       include "vdu_fonts.inc"
04181E             0001*  ; select font
04181E             0002*  ; inputs: hl = bufferId, a = font flags
04181E             0003*  ; Flags:
04181E             0004*  ; Bit	Description
04181E             0005*  ; 0	Adjust cursor position to ensure text baseline is aligned
04181E             0006*  ;   0: Do not adjust cursor position (best for changing font on a new line)
04181E             0007*  ;   1: Adjust cursor position (best for changing font in the middle of a line)
04181E             0008*  ; 1-7	Reserved for future use
04181E             0009*  ; VDU 23, 0, &95, 0, bufferId; flags: Select font
04181E             0010*  vdu_font_select:
04181E 22 35 18 04 0011*      ld (@bufferId),hl
041822 32 37 18 04 0012*      ld (@flags),a
041826 21 31 18 04 0013*      ld hl,@cmd
04182A 01 07 00 00 0014*      ld bc,@end-@cmd
04182E 5B DF       0015*      rst.lil $18
041830 C9          0016*      ret
041831 17 00 95 00 0017*  @cmd: db 23, 0, 0x95, 0
041835 00 00       0018*  @bufferId: dw 0x0000
041837 00          0019*  @flags: db 0x00
041838             0020*  @end:
041838             0021*  
041838             0022*  ; create font from buffer
041838             0023*  ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041838             0024*  ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041838             0025*  vdu_font_create:
041838 22 5D 18 04 0026*      ld (@bufferId),hl
04183C ED 53 5F 18 0027*      ld (@width),de ; also loads height
       04          
041841 32 62 18 04 0028*      ld (@flags),a
041845 7A          0029*      ld a,d ; height
041846 32 61 18 04 0030*      ld (@ascent),a ; ascent = height
04184A             0031*  ; consolidate buffer
04184A CD 78 16 04 0032*      call vdu_consolidate_buffer
04184E             0033*  ; create font
04184E 21 59 18 04 0034*      ld hl,@cmd
041852 01 0A 00 00 0035*      ld bc,@end-@cmd
041856 5B DF       0036*      rst.lil $18
041858 C9          0037*      ret
041859 17 00 95 01 0038*  @cmd: db 23, 0, 0x95, 1
04185D 00 00       0039*  @bufferId: dw 0x0000
04185F 00          0040*  @width: db 0x00
041860 00          0041*  @height: db 0x00
041861 00          0042*  @ascent: db 0x00
041862 00          0043*  @flags: db 0x00
041863             0044*  @end:
041863             0045*  
041863             0046*  ; set or adjust font property
041863             0047*  ; inputs: hl = bufferId, a = field, de = value
041863             0048*  ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041863             0049*  vdu_font_property:
041863 22 7F 18 04 0050*      ld (@bufferId),hl
041867 32 81 18 04 0051*      ld (@field),a
04186B ED 53 82 18 0052*      ld (@value),de
       04          
041870 21 7B 18 04 0053*      ld hl,@cmd
041874 01 09 00 00 0054*      ld bc,@end-@cmd
041878 5B DF       0055*      rst.lil $18
04187A C9          0056*      ret
04187B 17 00 95 02 0057*  @cmd: db 23, 0, 0x95, 2
04187F 00 00       0058*  @bufferId: dw 0x0000
041881 00          0059*  @field: db 0x00
041882 00 00       0060*  @value: dw 0x0000
041884 00          0061*  @end: db 0x00 ; padding
041885             0062*  
041885             0063*  ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041885             0064*  
041885             0065*  ; Clear/Delete font
041885             0066*  ; inputs: hl = bufferId
041885             0067*  ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041885             0068*  vdu_font_clear:
041885 22 98 18 04 0069*      ld (@bufferId),hl
041889 21 94 18 04 0070*      ld hl,@cmd
04188D 01 06 00 00 0071*      ld bc,@end-@cmd
041891 5B DF       0072*      rst.lil $18
041893 C9          0073*      ret
041894 17 00 95 04 0074*  @cmd: db 23, 0, 0x95, 4
041898 00 00       0075*  @bufferId: dw 0x0000
04189A 00          0076*  @end: db 0x00 ; padding
04189B             0077*  
04189B             0078*  ; Copy system font to buffer
04189B             0079*  ; inputs: hl = bufferId
04189B             0080*  ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
04189B             0081*  vdu_font_copy_system:
04189B 22 AE 18 04 0082*      ld (@bufferId),hl
04189F 21 AA 18 04 0083*      ld hl,@cmd
0418A3 01 06 00 00 0084*      ld bc,@end-@cmd
0418A7 5B DF       0085*      rst.lil $18
0418A9 C9          0086*      ret
0418AA 17 00 95 05 0087*  @cmd: db 23, 0, 0x95, 5
0418AE 00 00       0088*  @bufferId: dw 0x0000
0418B0 00          0089*  @end: db 0x00 ; padding
0418B1             0039       include "vdu_plot.inc"
0418B1             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418B1             0002*  ; PLOT code 	(Decimal) 	Effect
0418B1             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
0418B1             0004*  plot_sl_both: equ 0x00
0418B1             0005*  
0418B1             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
0418B1             0007*  plot_sl_first: equ 0x08
0418B1             0008*  
0418B1             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0418B1             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0418B1             0011*  
0418B1             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
0418B1             0013*  plot_sl_last: equ 0x20
0418B1             0014*  
0418B1             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
0418B1             0016*  plot_sl_none: equ 0x28
0418B1             0017*  
0418B1             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0418B1             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0418B1             0020*  
0418B1             0021*  ; &40-&47 	64-71 	Point plot
0418B1             0022*  plot_pt: equ 0x40
0418B1             0023*  
0418B1             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0418B1             0025*  plot_lf_lr_non_bg: equ 0x48
0418B1             0026*  
0418B1             0027*  ; &50-&57 	80-87 	Triangle fill
0418B1             0028*  plot_tf: equ 0x50
0418B1             0029*  
0418B1             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
0418B1             0031*  plot_lf_r_bg: equ 0x58
0418B1             0032*  
0418B1             0033*  ; &60-&67 	96-103 	Rectangle fill
0418B1             0034*  plot_rf: equ 0x60
0418B1             0035*  
0418B1             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0418B1             0037*  plot_lf_lr_fg: equ 0x60
0418B1             0038*  
0418B1             0039*  ; &70-&77 	112-119 	Parallelogram fill
0418B1             0040*  plot_pf: equ 0x70
0418B1             0041*  
0418B1             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0418B1             0043*  plot_lf_r_non_fg: equ 0x78
0418B1             0044*  
0418B1             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0418B1             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0418B1             0047*  
0418B1             0048*  ; &90-&97 	144-151 	Circle outline
0418B1             0049*  plot_co: equ 0x90
0418B1             0050*  
0418B1             0051*  ; &98-&9F 	152-159 	Circle fill
0418B1             0052*  plot_cf: equ 0x98
0418B1             0053*  
0418B1             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0418B1             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0418B1             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0418B1             0057*  
0418B1             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
0418B1             0059*  plot_rcm: equ 0xB8
0418B1             0060*  
0418B1             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0418B1             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0418B1             0063*  ; &D0-&D7 	208-215 	Not defined
0418B1             0064*  ; &D8-&DF 	216-223 	Not defined
0418B1             0065*  ; &E0-&E7 	224-231 	Not defined
0418B1             0066*  
0418B1             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
0418B1             0068*  plot_bmp: equ 0xE8
0418B1             0069*  
0418B1             0070*  ; &F0-&F7 	240-247 	Not defined
0418B1             0071*  ; &F8-&FF 	248-255 	Not defined
0418B1             0072*  
0418B1             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0418B1             0074*  ; Agon Console8 VDP 2.2.0
0418B1             0075*  
0418B1             0076*  ; Within each group of eight plot codes, the effects are as follows:
0418B1             0077*  ; Plot code 	Effect
0418B1             0078*  ; 0 	Move relative
0418B1             0079*  mv_rel: equ 0
0418B1             0080*  
0418B1             0081*  ; 1 	Plot relative in current foreground colour
0418B1             0082*  dr_rel_fg: equ 1
0418B1             0083*  
0418B1             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
0418B1             0085*  ; 3 	Plot relative in current background colour
0418B1             0086*  dr_rel_bg: equ 3
0418B1             0087*  
0418B1             0088*  ; 4 	Move absolute
0418B1             0089*  mv_abs: equ 4
0418B1             0090*  
0418B1             0091*  ; 5 	Plot absolute in current foreground colour
0418B1             0092*  dr_abs_fg: equ 5
0418B1             0093*  
0418B1             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0418B1             0095*  ; 7 	Plot absolute in current background colour
0418B1             0096*  dr_abs_bg: equ 7
0418B1             0097*  
0418B1             0098*  ; Codes 0-3 use the position data provided as part of the command
0418B1             0099*  ; as a relative position, adding the position given to the current
0418B1             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
0418B1             0101*  ; as part of the command as an absolute position, setting the current
0418B1             0102*  ; graphical cursor position to the position given.
0418B1             0103*  
0418B1             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0418B1             0105*  ; current pixel colour. These operations cannot currently be supported
0418B1             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
0418B1             0107*  ; supported. Support for these codes may be added in a future version
0418B1             0108*  ; of the VDP firmware.
0418B1             0109*  
0418B1             0110*  ; 16 colour palette constants
0418B1             0111*  c_black: equ 0
0418B1             0112*  c_red_dk: equ 1
0418B1             0113*  c_green_dk: equ 2
0418B1             0114*  c_yellow_dk: equ 3
0418B1             0115*  c_blue_dk: equ 4
0418B1             0116*  c_magenta_dk: equ 5
0418B1             0117*  c_cyan_dk: equ 6
0418B1             0118*  c_grey: equ 7
0418B1             0119*  c_grey_dk: equ 8
0418B1             0120*  c_red: equ 9
0418B1             0121*  c_green: equ 10
0418B1             0122*  c_yellow: equ 11
0418B1             0123*  c_blue: equ 12
0418B1             0124*  c_magenta: equ 13
0418B1             0125*  c_cyan: equ 14
0418B1             0126*  c_white: equ 15
0418B1             0127*  
0418B1             0128*  ; VDU 25, mode, x; y;: PLOT command
0418B1             0129*  ; inputs: a=mode, bc=x0, de=y0
0418B1             0130*  vdu_plot:
0418B1 32 CB 18 04 0131*      ld (@mode),a
0418B5 ED 43 CC 18 0132*      ld (@x0),bc
       04          
0418BA ED 53 CE 18 0133*      ld (@y0),de
       04          
0418BF 21 CA 18 04 0134*  	ld hl,@cmd
0418C3 01 06 00 00 0135*  	ld bc,@end-@cmd
0418C7 5B DF       0136*  	rst.lil $18
0418C9 C9          0137*  	ret
0418CA 19          0138*  @cmd:   db 25
0418CB 00          0139*  @mode:  db 0
0418CC 00 00       0140*  @x0: 	dw 0
0418CE 00 00       0141*  @y0: 	dw 0
0418D0 00          0142*  @end:   db 0 ; extra byte to soak up deu
0418D1             0143*  
0418D1             0144*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418D1             0145*  ; &E8-&EF 	232-239 	Bitmap plot §
0418D1             0146*  ; VDU 25, mode, x; y;: PLOT command
0418D1             0147*  ; inputs: bc=x0, de=y0
0418D1             0148*  ; prerequisites: vdu_buff_select
0418D1             0149*  vdu_plot_bmp:
0418D1 ED 43 E8 18 0150*      ld (@x0),bc
       04          
0418D6 ED 53 EA 18 0151*      ld (@y0),de
       04          
0418DB 21 E6 18 04 0152*  	ld hl,@cmd
0418DF 01 06 00 00 0153*  	ld bc,@end-@cmd
0418E3 5B DF       0154*  	rst.lil $18
0418E5 C9          0155*  	ret
0418E6 19          0156*  @cmd:   db 25
0418E7 ED          0157*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0418E8 00 00       0158*  @x0: 	dw 0x0000
0418EA 00 00       0159*  @y0: 	dw 0x0000
0418EC 00          0160*  @end:   db 0x00 ; padding
0418ED             0161*  
0418ED             0162*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418ED             0163*  ; &E8-&EF 	232-239 	Bitmap plot §
0418ED             0164*  ; VDU 25, mode, x; y;: PLOT command
0418ED             0165*  ; inputs: bc=x0, de=y0
0418ED             0166*  ; USING 16.8 FIXED POINT COORDINATES
0418ED             0167*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0418ED             0168*  ;   the fractional portiion of the inputs are truncated
0418ED             0169*  ;   leaving only the 16-bit integer portion
0418ED             0170*  ; prerequisites: vdu_buff_select
0418ED             0171*  vdu_plot_bmp168:
0418ED             0172*  ; populate in the reverse of normal to keep the
0418ED             0173*  ; inputs from stomping on each other
0418ED ED 53 0B 19 0174*      ld (@y0-1),de
       04          
0418F2 ED 43 09 19 0175*      ld (@x0-1),bc
       04          
0418F7 3E ED       0176*      ld a,plot_bmp+dr_abs_fg ; 0xED
0418F9 32 09 19 04 0177*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
0418FD 21 08 19 04 0178*  	ld hl,@cmd
041901 01 06 00 00 0179*  	ld bc,@end-@cmd
041905 5B DF       0180*  	rst.lil $18
041907 C9          0181*  	ret
041908 19          0182*  @cmd:   db 25
041909 ED          0183*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04190A 00 00       0184*  @x0: 	dw 0x0000
04190C 00 00       0185*  @y0: 	dw 0x0000
04190E             0186*  @end:  ; no padding required b/c we shifted de right
04190E             0187*  
04190E             0188*  ; draw a filled rectangle
04190E             0189*  vdu_plot_rf:
04190E ED 43 35 19 0190*      ld (@x0),bc
       04          
041913 ED 53 37 19 0191*      ld (@y0),de
       04          
041918 DD 22 3B 19 0192*      ld (@x1),ix
       04          
04191D FD 22 3D 19 0193*      ld (@y1),iy
       04          
041922 3E 19       0194*      ld a,25 ; we have to reload the 2nd plot command
041924 32 39 19 04 0195*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041928 21 33 19 04 0196*  	ld hl,@cmd0
04192C 01 0C 00 00 0197*  	ld bc,@end-@cmd0
041930 5B DF       0198*  	rst.lil $18
041932 C9          0199*      ret
041933 19          0200*  @cmd0:  db 25 ; plot
041934 04          0201*  @arg0:  db plot_sl_both+mv_abs
041935 00 00       0202*  @x0:    dw 0x0000
041937 00 00       0203*  @y0:    dw 0x0000
041939 19          0204*  @cmd1:  db 25 ; plot
04193A 65          0205*  @arg1:  db plot_rf+dr_abs_fg
04193B 00 00       0206*  @x1:    dw 0x0000
04193D 00 00       0207*  @y1:    dw 0x0000
04193F 00          0208*  @end:   db 0x00 ; padding
041940             0209*  
041940             0210*  ; draw a filled circle
041940             0211*  vdu_plot_cf:
041940 ED 43 67 19 0212*      ld (@x0),bc
       04          
041945 ED 53 69 19 0213*      ld (@y0),de
       04          
04194A DD 22 6D 19 0214*      ld (@x1),ix
       04          
04194F FD 22 6F 19 0215*      ld (@y1),iy
       04          
041954 3E 19       0216*      ld a,25 ; we have to reload the 2nd plot command
041956 32 6B 19 04 0217*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04195A 21 65 19 04 0218*  	ld hl,@cmd0
04195E 01 0C 00 00 0219*  	ld bc,@end-@cmd0
041962 5B DF       0220*  	rst.lil $18
041964 C9          0221*      ret
041965 19          0222*  @cmd0:  db 25 ; plot
041966 04          0223*  @arg0:  db plot_sl_both+mv_abs
041967 00 00       0224*  @x0:    dw 0x0000
041969 00 00       0225*  @y0:    dw 0x0000
04196B 19          0226*  @cmd1:  db 25 ; plot
04196C 9D          0227*  @arg1:  db plot_cf+dr_abs_fg
04196D 00 00       0228*  @x1:    dw 0x0000
04196F 00 00       0229*  @y1:    dw 0x0000
041971 00          0230*  @end:   db 0x00 ; padding
041972             0040       include "vdu_sprites.inc"
041972             0001*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041972             0002*  ; the VDP can support up to 256 sprites. They must be defined
041972             0003*  ; contiguously, and so the first sprite is sprite 0.
041972             0004*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041972             0005*  ; Once a selection of sprites have been defined, you can activate
041972             0006*  ; them using the VDU 23, 27, 7, n command, where n is the number
041972             0007*  ; of sprites to activate. This will activate the first n sprites,
041972             0008*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041972             0009*  
041972             0010*  ; A single sprite can have multiple "frames", referring to
041972             0011*  ; different bitmaps.
041972             0012*  ; (These bitmaps do not need to be the same size.)
041972             0013*  ; This allows a sprite to include an animation sequence,
041972             0014*  ; which can be stepped through one frame at a time, or picked
041972             0015*  ; in any order.
041972             0016*  
041972             0017*  ; Any format of bitmap can be used as a sprite frame. It should
041972             0018*  ; be noted however that "native" format bitmaps are not
041972             0019*  ; recommended for use as sprite frames, as they cannot get
041972             0020*  ; erased from the screen. (As noted above, the "native" bitmap
041972             0021*  ; format is not really intended for general use.) This is part
041972             0022*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041972             0023*  ; screen are now stored in RGBA2222 format.
041972             0024*  
041972             0025*  ; An "active" sprite can be hidden, so it will stop being drawn,
041972             0026*  ; and then later shown again.
041972             0027*  
041972             0028*  ; Moving sprites around the screen is done by changing the
041972             0029*  ; position of the sprite. This can be done either by setting
041972             0030*  ; the absolute position of the sprite, or by moving the sprite
041972             0031*  ; by a given number of pixels. (Sprites are positioned using
041972             0032*  ; pixel coordinates, and not by the logical OS coordinate system.)
041972             0033*  ; In the current sprite system, sprites will not update their
041972             0034*  ; position on-screen until either another drawing operation is
041972             0035*  ; performed or an explicit VDU 23, 27, 15 command is performed.
041972             0036*  
041972             0037*  ; VDU 23, 27, 4, n: Select sprite n
041972             0038*  ; inputs: a is the 8-bit sprite id
041972             0039*  vdu_sprite_select:
041972 32 84 19 04 0040*      ld (@sprite),a
041976 21 81 19 04 0041*      ld hl,@cmd
04197A 01 04 00 00 0042*      ld bc,@end-@cmd
04197E 5B DF       0043*      rst.lil $18
041980 C9          0044*      ret
041981 17 1B 04    0045*  @cmd:    db 23,27,4
041984 00          0046*  @sprite: db 0x00
041985             0047*  @end:
041985             0048*  
041985             0049*  ; VDU 23, 27, 5: Clear frames in current sprite
041985             0050*  ; inputs: none
041985             0051*  ; prerequisites: vdu_sprite_select
041985             0052*  vdu_sprite_clear_frames:
041985 21 90 19 04 0053*      ld hl,@cmd
041989 01 03 00 00 0054*      ld bc,@end-@cmd
04198D 5B DF       0055*      rst.lil $18
04198F C9          0056*      ret
041990 17 1B 05    0057*  @cmd: db 23,27,5
041993             0058*  @end:
041993             0059*  
041993             0060*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
041993             0061*  ; inputs: a is the 8-bit bitmap number
041993             0062*  ; prerequisites: vdu_sprite_select
041993             0063*  vdu_sprite_add_bmp:
041993 32 A5 19 04 0064*      ld (@bmp),a
041997 21 A2 19 04 0065*      ld hl,@cmd
04199B 01 04 00 00 0066*      ld bc,@end-@cmd
04199F 5B DF       0067*      rst.lil $18
0419A1 C9          0068*      ret
0419A2 17 1B 06    0069*  @cmd: db 23,27,6
0419A5 00          0070*  @bmp: db 0x00
0419A6             0071*  @end:
0419A6             0072*  
0419A6             0073*  ; VDU 23, 27, 7, n: Activate n sprites
0419A6             0074*  ; inputs: a is the number of sprites to activate
0419A6             0075*  ; prerequisites: each sprite activated must have at least one frame attached to it
0419A6             0076*  vdu_sprite_activate:
0419A6 32 B8 19 04 0077*      ld (@num),a
0419AA 21 B5 19 04 0078*      ld hl,@cmd
0419AE 01 04 00 00 0079*      ld bc,@end-@cmd
0419B2 5B DF       0080*      rst.lil $18
0419B4 C9          0081*      ret
0419B5 17 1B 07    0082*  @cmd: db 23,27,7
0419B8 00          0083*  @num: db 0x00
0419B9             0084*  @end:
0419B9             0085*  
0419B9             0086*  ; VDU 23, 27, 8: Select next frame of current sprite
0419B9             0087*  ; inputs: none
0419B9             0088*  ; prerequisites: vdu_sprite_select
0419B9             0089*  vdu_sprite_next_frame:
0419B9 21 C4 19 04 0090*      ld hl,@cmd
0419BD 01 03 00 00 0091*      ld bc,@end-@cmd
0419C1 5B DF       0092*      rst.lil $18
0419C3 C9          0093*      ret
0419C4 17 1B 08    0094*  @cmd: db 23,27,8
0419C7             0095*  @end:
0419C7             0096*  
0419C7             0097*  ; VDU 23, 27, 9: Select previous frame of current sprite
0419C7             0098*  ; inputs: none
0419C7             0099*  ; prerequisites: vdu_sprite_select
0419C7             0100*  vdu_sprite_prev_frame:
0419C7 21 D2 19 04 0101*      ld hl,@cmd
0419CB 01 03 00 00 0102*      ld bc,@end-@cmd
0419CF 5B DF       0103*      rst.lil $18
0419D1 C9          0104*      ret
0419D2 17 1B 09    0105*  @cmd: db 23,27,9
0419D5             0106*  @end:
0419D5             0107*  
0419D5             0108*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
0419D5             0109*  ; inputs: a is frame number to select
0419D5             0110*  ; prerequisites: vdu_sprite_select
0419D5             0111*  vdu_sprite_select_frame:
0419D5 32 E7 19 04 0112*      ld (@frame),a
0419D9 21 E4 19 04 0113*      ld hl,@cmd
0419DD 01 04 00 00 0114*      ld bc,@end-@cmd
0419E1 5B DF       0115*      rst.lil $18
0419E3 C9          0116*      ret
0419E4 17 1B 0A    0117*  @cmd:    db 23,27,10
0419E7 00          0118*  @frame:  db 0x00
0419E8             0119*  @end:
0419E8             0120*  
0419E8             0121*  ; VDU 23, 27, 11: Show current sprite
0419E8             0122*  ; inputs: none
0419E8             0123*  ; prerequisites: vdu_sprite_select
0419E8             0124*  vdu_sprite_show:
0419E8 21 F3 19 04 0125*      ld hl,@cmd
0419EC 01 03 00 00 0126*      ld bc,@end-@cmd
0419F0 5B DF       0127*      rst.lil $18
0419F2 C9          0128*      ret
0419F3 17 1B 0B    0129*  @cmd: db 23,27,11
0419F6             0130*  @end:
0419F6             0131*  
0419F6             0132*  ; VDU 23, 27, 12: Hide current sprite
0419F6             0133*  ; inputs: none
0419F6             0134*  ; prerequisites: vdu_sprite_select
0419F6             0135*  vdu_sprite_hide:
0419F6 21 01 1A 04 0136*      ld hl,@cmd
0419FA 01 03 00 00 0137*      ld bc,@end-@cmd
0419FE 5B DF       0138*      rst.lil $18
041A00 C9          0139*      ret
041A01 17 1B 0C    0140*  @cmd: db 23,27,12
041A04             0141*  @end:
041A04             0142*  
041A04             0143*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041A04             0144*  ; inputs: bc is x coordinate, de is y coordinate
041A04             0145*  ; prerequisites: vdu_sprite_select
041A04             0146*  vdu_sprite_move_abs:
041A04 ED 43 1C 1A 0147*      ld (@xpos),bc
       04          
041A09 ED 53 1E 1A 0148*      ld (@ypos),de
       04          
041A0E 21 19 1A 04 0149*      ld hl,@cmd
041A12 01 07 00 00 0150*      ld bc,@end-@cmd
041A16 5B DF       0151*      rst.lil $18
041A18 C9          0152*      ret
041A19 17 1B 0D    0153*  @cmd:  db 23,27,13
041A1C 00 00       0154*  @xpos: dw 0x0000
041A1E 00 00       0155*  @ypos: dw 0x0000
041A20 00          0156*  @end:  db 0x00 ; padding
041A21             0157*  
041A21             0158*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041A21             0159*  ; inputs: bc is x coordinate, de is y coordinate
041A21             0160*  ; prerequisites: vdu_sprite_select
041A21             0161*  vdu_sprite_move_rel:
041A21 ED 43 39 1A 0162*      ld (@dx),bc
       04          
041A26 ED 53 3B 1A 0163*      ld (@dy),de
       04          
041A2B 21 36 1A 04 0164*      ld hl,@cmd
041A2F 01 07 00 00 0165*      ld bc,@end-@cmd
041A33 5B DF       0166*      rst.lil $18
041A35 C9          0167*      ret
041A36 17 1B 0E    0168*  @cmd: db 23,27,14
041A39 00 00       0169*  @dx:  dw 0x0000
041A3B 00 00       0170*  @dy:  dw 0x0000
041A3D 00          0171*  @end: db 0x00 ; padding
041A3E             0172*  
041A3E             0173*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041A3E             0174*  ; USING 16.8 FIXED POINT COORDINATES
041A3E             0175*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
041A3E             0176*  ;   the fractional portiion of the inputs are truncated
041A3E             0177*  ;   leaving only the 16-bit integer portion
041A3E             0178*  ; prerequisites: vdu_sprite_select
041A3E             0179*  vdu_sprite_move_abs168:
041A3E             0180*  ; offset inputs by the gfx origin
041A3E             0181*  ; y coordinate
041A3E 21 00 00 00 0182*      ld hl,origin_top*256
041A42 19          0183*      add hl,de
041A43 22 65 1A 04 0184*      ld (@ypos-1),hl
041A47             0185*  ; x coordinate
041A47 21 00 80 00 0186*      ld hl,origin_left*256
041A4B 09          0187*      add hl,bc
041A4C 22 63 1A 04 0188*      ld (@xpos-1),hl
041A50             0189*  ; prepare vdu command
041A50 3E 0D       0190*      ld a,13       ; restore the final byte of the command
041A52 32 63 1A 04 0191*      ld (@cmd+2),a ; string that got stomped on by bcu
041A56 21 61 1A 04 0192*      ld hl,@cmd
041A5A 01 07 00 00 0193*      ld bc,@end-@cmd
041A5E 5B DF       0194*      rst.lil $18
041A60 C9          0195*      ret
041A61 17 1B 0D    0196*  @cmd:  db 23,27,13
041A64 00 00       0197*  @xpos: dw 0x0000
041A66 00 00       0198*  @ypos: dw 0x0000
041A68             0199*  @end:  ; no padding required b/c we shifted de right
041A68             0200*  
041A68             0201*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041A68             0202*  ; USING 16.8 FIXED POINT COORDINATES
041A68             0203*  ; inputs: ub.c is dx, ud.e is dy
041A68             0204*  ;   the fractional portiion of the inputs are truncated
041A68             0205*  ;   leaving only the 16-bit integer portion
041A68             0206*  ; prerequisites: vdu_sprite_select
041A68             0207*  vdu_sprite_move_rel168:
041A68             0208*  ; populate in the reverse of normal to keep the
041A68             0209*  ; inputs from stomping on each other
041A68 ED 53 87 1A 0210*      ld (@dy-1),de
       04          
041A6D ED 43 85 1A 0211*      ld (@dx-1),bc
       04          
041A72 3E 0E       0212*      ld a,14       ; restore the final byte of the command
041A74 32 85 1A 04 0213*      ld (@cmd+2),a ; string that got stomped on by bcu
041A78 21 83 1A 04 0214*      ld hl,@cmd
041A7C 01 07 00 00 0215*      ld bc,@end-@cmd
041A80 5B DF       0216*      rst.lil $18
041A82 C9          0217*      ret
041A83 17 1B 0E    0218*  @cmd:  db 23,27,14
041A86 00 00       0219*  @dx: dw 0x0000
041A88 00 00       0220*  @dy: dw 0x0000
041A8A             0221*  @end:  ; no padding required b/c we shifted de right
041A8A             0222*  
041A8A             0223*  ; VDU 23, 27, 15: Update the sprites in the GPU
041A8A             0224*  ; inputs: none
041A8A             0225*  vdu_sprite_update:
041A8A 21 95 1A 04 0226*      ld hl,@cmd
041A8E 01 03 00 00 0227*      ld bc,@end-@cmd
041A92 5B DF       0228*      rst.lil $18
041A94 C9          0229*      ret
041A95 17 1B 0F    0230*  @cmd: db 23,27,15
041A98             0231*  @end:
041A98             0232*  
041A98             0233*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
041A98             0234*  ; inputs: none
041A98             0235*  vdu_sprite_bmp_reset:
041A98 21 A3 1A 04 0236*      ld hl,@cmd
041A9C 01 03 00 00 0237*      ld bc,@end-@cmd
041AA0 5B DF       0238*      rst.lil $18
041AA2 C9          0239*      ret
041AA3 17 1B 10    0240*  @cmd: db 23,27,16
041AA6             0241*  @end:
041AA6             0242*  
041AA6             0243*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
041AA6             0244*  ; inputs: none
041AA6             0245*  vdu_sprite_reset:
041AA6 21 B1 1A 04 0246*      ld hl,@cmd
041AAA 01 03 00 00 0247*      ld bc,@end-@cmd
041AAE 5B DF       0248*      rst.lil $18
041AB0 C9          0249*      ret
041AB1 17 1B 11    0250*  @cmd: db 23,27,17
041AB4             0251*  @end:
041AB4             0252*  
041AB4             0253*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
041AB4             0254*  ; inputs: a is the GCOL paint mode
041AB4             0255*  ; prerequisites: vdu_sprite_select
041AB4             0256*  vdu_sprite_set_gcol:
041AB4 32 C6 1A 04 0257*      ld (@mode),a
041AB8 21 C3 1A 04 0258*      ld hl,@cmd
041ABC 01 04 00 00 0259*      ld bc,@end-@cmd
041AC0 5B DF       0260*      rst.lil $18
041AC2 C9          0261*      ret
041AC3 17 1B 12    0262*  @cmd:  db 23,27,18
041AC6 00          0263*  @mode: db 0x00
041AC7             0264*  @end:
041AC7             0265*  
041AC7             0266*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
041AC7             0267*  ; inputs: hl=bufferId
041AC7             0268*  ; prerequisites: vdu_sprite_select
041AC7             0269*  vdu_sprite_add_buff:
041AC7 22 D9 1A 04 0270*      ld (@bufferId),hl
041ACB 21 D6 1A 04 0271*      ld hl,@cmd
041ACF 01 05 00 00 0272*      ld bc,@end-@cmd
041AD3 5B DF       0273*      rst.lil $18
041AD5 C9          0274*      ret
041AD6 17 1B 26    0275*  @cmd:      db 23,27,0x26
041AD9 00 00       0276*  @bufferId: dw 0x0000
041ADB 00          0277*  @end:      db 0x00 ; padding
041ADC             0041   
041ADC             0042   ; APPLICATION INCLUDES
041ADC             0043       include "collisions.inc"
041ADC             0001*  ; ====== COLLISION DETECTION ======
041ADC             0002*  ; --- constants ---
041ADC             0003*  ; sprite_collisions flags
041ADC             0004*  collides_with_player: equ %00000001
041ADC             0005*  collides_with_laser: equ %00000010
041ADC             0006*  sprite_alive: equ 6 ; set when sprite is alive
041ADC             0007*  sprite_just_died: equ 7 ; set when sprite just died
041ADC             0008*  
041ADC             0009*  collide_top: equ %00001000
041ADC             0010*  collide_bottom: equ %00000100
041ADC             0011*  collide_left: equ %00000010
041ADC             0012*  collide_right: equ %00000001
041ADC             0013*  
041ADC             0014*  ; this routine detects collisions between two collidable objects,
041ADC             0015*  ; which can include sprites, active tiles, or any screen coordinate
041ADC             0016*  ; which has been set up with a sprite table structure that includes dim_x
041ADC             0017*  ; representing the radius of the collidable object
041ADC             0018*  ; inputs: ix and iy point to the colliding objects' sprite table records
041ADC             0019*  ; outputs: uh.l = distance - sum of radii
041ADC             0020*  ;          zero flag set or sign flag negative if collision detected
041ADC             0021*  ;          dx168 and dy168 are also populated with the signed displacements
041ADC             0022*  ; destroys: everything except indexes
041ADC             0023*  check_collision:
041ADC             0024*  ; compute dx = x1-x0
041ADC DD 27 0B    0025*      ld hl,(ix+sprite_x)
041ADF FD 17 0B    0026*      ld de,(iy+sprite_x)
041AE2 AF          0027*      xor a ; clear carry
041AE3 ED 52       0028*      sbc hl,de
041AE5 22 A2 09 04 0029*      ld (dx168),hl ; dx to scratch
041AE9             0030*  ; compute dy = y1-y0
041AE9 DD 27 0E    0031*      ld hl,(ix+sprite_y)
041AEC FD 17 0E    0032*      ld de,(iy+sprite_y)
041AEF AF          0033*      xor a ; clear carry
041AF0 ED 52       0034*      sbc hl,de ; hl = dy
041AF2 22 A8 09 04 0035*      ld (dy168),hl ; dy to scratch
041AF6             0036*  ; compute euclidean distance between centers
041AF6 CD AE 09 04 0037*      call distance168 ; uh.l = distance
041AFA             0038*  ; check for overlap by summing half the radii
041AFA DD 7E 09    0039*      ld a,(ix+sprite_dim_x)
041AFD CB 3F       0040*      srl a ; divide by 2
041AFF FD 5E 09    0041*      ld e,(iy+sprite_dim_x)
041B02 CB 3B       0042*      srl e ; divide by 2
041B04 83          0043*      add a,e
041B05 11 00 00 00 0044*      ld de,0 ; clear deu and e
041B09 57          0045*      ld d,a ; ud.e = sum of radii
041B0A B7          0046*      or a ; clear carry
041B0B ED 52       0047*      sbc hl,de ; uh.l = distance - sum of radii
041B0D C9          0048*      ret
041B0E             0049*  ; end check_collision
041B0E             0044       include "enemies.inc"
041B0E 04          0001*  max_enemy_sprites: db 4
041B0F             0002*  
041B0F             0003*  ; sprite_type
041B0F             0004*  enemy_dead: equ 0
041B0F             0005*  enemy_seeker: equ 1
041B0F             0006*  
041B0F             0007*  fireballs: equ 6
041B0F             0008*  explosion: equ 255
041B0F             0009*  
041B0F             0010*  move_enemies:
041B0F             0011*  ; are there any active enemies or explosions?
041B0F 3A C8 52 04 0012*      ld a,(table_active_sprites)
041B13 A7          0013*      and a ; will be zero if no alive enemies or explosions
041B14 C2 21 1B 04 0014*      jp nz,@they_live
041B18 21 60 55 04 0015*      ld hl,enemies_dead
041B1C 22 5D 55 04 0016*      ld (enemies_state),hl
041B20 C9          0017*      ret
041B21             0018*  @they_live:
041B21             0019*  ; initialize pointers and loop counter
041B21 FD 21 65 50 0020*      ld iy,table_base ; set iy to first record in table
       04          
041B26 06 10       0021*      ld b,table_max_records ; loop counter
041B28             0022*  @move_loop:
041B28 FD 22 C5 52 0023*      ld (table_pointer),iy ; update table pointer
       04          
041B2D C5          0024*      push bc ; backup loop counter
041B2E             0025*  ; check sprite_type to see if sprite is active
041B2E FD 7E 01    0026*      ld a,(iy+sprite_type)
041B31 A7          0027*      and a ; if zero, sprite is dead
041B32 CA 65 1B 04 0028*      jp z,@next_record ; ... and we skip to next record
041B36             0029*  ; otherwise we prepare to move the sprite
041B36 FD 7E 00    0030*      ld a,(iy+sprite_id) ; get spriteId
041B39 CD 72 19 04 0031*      call vdu_sprite_select ; select sprite
041B3D FD 27 05    0032*      ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
041B40             0033*      callHL
041B40 01 46 1B 04 0001*M     ld bc,@F ; Address of first instruction after the jump
041B44 C5          0002*M     push bc ; which constitutes the return address
041B45 E9          0003*M     jp (hl) ; Jump to the address in HL
041B46             0004*M @@:
041B46             0034*  ; move_enemies_loop_return: return from behavior subroutines
041B46 FD 2A C5 52 0035*      ld iy,(table_pointer) ; get back table pointer
       04          
041B4B             0036*  ; now we check results of all the moves
041B4B FD CB 08 7E 0037*      bit sprite_just_died,(iy+sprite_collisions)
041B4F CA 5B 1B 04 0038*      jp z,@draw_sprite ; if not dead, draw sprite
041B53 CD 11 53 04 0039*      call table_deactivate_sprite
041B57 C3 65 1B 04 0040*      jp @next_record ; and to the next record
041B5B             0041*  @draw_sprite:
041B5B FD 07 0B    0042*      ld bc,(iy+sprite_x)
041B5E FD 17 0E    0043*      ld de,(iy+sprite_y)
041B61 CD 3E 1A 04 0044*      call vdu_sprite_move_abs168
041B65             0045*  ; fall through to @next_record
041B65             0046*  @next_record:
041B65 ED 33 26    0047*      lea iy,iy+table_bytes_per_record
041B68 AF          0048*      xor a ; clears carry flag
041B69 32 C9 52 04 0049*      ld (sprite_screen_edge),a ; clear screen edge collision flag
041B6D C1          0050*      pop bc ; get back our loop counter
041B6E 10 B8       0051*      djnz @move_loop ; loop until we've checked all the records
041B70 C9          0052*      ret ; and we're out
041B71             0053*  
041B71             0054*  ; ; ######### SPRITE BEHAVIOR ROUTINES #########
041B71             0055*  ; ; each sprite in the table must have one of these defined
041B71             0056*  ; ; but they need not be unique to a particular sprite
041B71             0057*  ; ; these are jumped to from move_enemies_do_program,but could come from other places
041B71             0058*  ; ; and have the option but not obligation to go back to move_enemies_loop_return
041B71             0059*  ; ; but they can call anything they want between those two endpoints
041B71             0060*  ; move_programs: ; bookmark in case we want to know the first address of the first subroutine
041B71             0061*  
041B71             0062*  ; move_nop: ; does nothing but burn a few cycles changing the PC
041B71             0063*  ;     ret
041B71             0064*  
041B71             0065*  ; move_explosion:
041B71             0066*  ;     call animate_explosion
041B71             0067*  ;     ret
041B71             0068*  
041B71             0069*  check_enemy_player_collisions:
041B71             0070*  ; check for collisions with laser
041B71 DD 21 75 49 0071*      ld ix,laser_start_variables
       04          
041B76 DD CB 08 76 0072*      bit sprite_alive,(ix+sprite_collisions)
041B7A CA 97 1B 04 0073*      jp z,@player ; laser dead, check player
041B7E CD DC 1A 04 0074*      call check_collision
041B82 F2 97 1B 04 0075*      jp p,@player ; no collision
041B86 DD 21 75 49 0076*      ld ix,laser_start_variables
       04          
041B8B DD CB 08 FE 0077*      set sprite_just_died,(ix+sprite_collisions)
041B8F DD CB 08 F6 0078*      set sprite_alive,(ix+sprite_collisions)
041B93 C3 D1 1B 04 0079*      jp enemy_kill
041B97             0080*  @player: ; check for collisions with player
041B97 DD 21 32 4F 0081*      ld ix,player_start_variables
       04          
041B9C DD CB 08 76 0082*      bit sprite_alive,(ix+sprite_collisions)
041BA0 C8          0083*      ret z ; player dead, no collision
041BA1 CD DC 1A 04 0084*      call check_collision
041BA5 F0          0085*      ret p ; no collision
041BA6 C3 D1 1B 04 0086*      jp enemy_kill
041BAA             0087*  ; end move_enemy_seeker
041BAA             0088*  
041BAA             0089*  
041BAA             0090*  
041BAA             0091*  ; move_fireballs:
041BAA             0092*  ;     call move_sprite ; move sprite
041BAA             0093*  ;     ld a,(sprite_screen_edge) ; check for collision with screen edge
041BAA             0094*  ;     and a ; if zero we're still within screen bounds
041BAA             0095*  ;     jp z,move_fireballs_alive
041BAA             0096*  ; ; otherwise kill sprite
041BAA             0097*  ;     ld a,%10000000 ; any bit set in high nibble means sprite will die
041BAA             0098*  ;     ld (iy+sprite_collisions),a
041BAA             0099*  ;     ret
041BAA             0100*  ; move_fireballs_alive:
041BAA             0101*  ;     ld a,(sprite_animation_timer)
041BAA             0102*  ;     dec a
041BAA             0103*  ;     ld (sprite_animation_timer),a
041BAA             0104*  ;     jp nz,move_fireballs_draw
041BAA             0105*  ;     ld a,(sprite_animation)
041BAA             0106*  ;     xor %1
041BAA             0107*  ;     ld (sprite_animation),a
041BAA             0108*  ;     ld a,6 ; 1/10th of a second timer
041BAA             0109*  ;     ld (sprite_animation_timer),a
041BAA             0110*  ;     ; fall through
041BAA             0111*  
041BAA             0112*  ; move_fireballs_draw:
041BAA             0113*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
041BAA             0114*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
041BAA             0115*  ;     call check_collisions
041BAA             0116*  ;     ret
041BAA             0117*  
041BAA             0118*  ; compute orientation to player
041BAA             0119*  ; based on relative positions
041BAA             0120*  ; returns: h.l 16.8 fixed angle256 to player
041BAA             0121*  ;    ub.c and ud.e as 16.8 signed fixed point numbers
041BAA             0122*  ;    representing delta-x/y *to* target respectively
041BAA             0123*  orientation_to_player:
041BAA FD 2A C5 52 0124*      ld iy,(table_pointer)
       04          
041BAF FD 07 0B    0125*      ld bc,(iy+sprite_x)
041BB2 FD 17 0E    0126*      ld de,(iy+sprite_y)
041BB5 DD 2A 3D 4F 0127*      ld ix,(player_x)
       04          
041BBA FD 2A 40 4F 0128*      ld iy,(player_y)
       04          
041BBF CD 87 09 04 0129*      call dxy168
041BC3 C5          0130*      push bc
041BC4 D5          0131*      push de
041BC5 CD E3 09 04 0132*      call atan2_168fast
041BC9 D1          0133*      pop de
041BCA C1          0134*      pop bc
041BCB FD 2A C5 52 0135*      ld iy,(table_pointer)
       04          
041BD0 C9          0136*      ret
041BD1             0137*  
041BD1             0138*  ; this routine vanquishes the enemy sprite
041BD1             0139*  ; and replaces it with an animated explosion
041BD1             0140*  ; we jump here instead of call because
041BD1             0141*  ; we want to return to differing locations in the loop
041BD1             0142*  ; depending on whether we're still sploding
041BD1             0143*  ; destroys: everything except index registers
041BD1             0144*  ; returns: an incandescent ball of debris and gas
041BD1             0145*  enemy_kill:
041BD1 FD 2A C5 52 0146*      ld iy,(table_pointer)
       04          
041BD6             0147*  ; tally up points
041BD6 2A 28 4F 04 0148*      ld hl,(player_score)
041BDA 01 00 00 00 0149*      ld bc,0 ; clear bcu
041BDE FD 4E 24    0150*      ld c,(iy+sprite_points)
041BE1 09          0151*      add hl,bc
041BE2 22 28 4F 04 0152*      ld (player_score),hl
041BE6             0153*  ; ; initialize explosion
041BE6             0154*  ; init_explosion:
041BE6             0155*  ;     ld hl,explosion
041BE6             0156*  ;     ld (sprite_base_bufferId),hl
041BE6             0157*  ;     ld hl,move_explosion
041BE6             0158*  ;     ld (sprite_move_program),hl
041BE6             0159*  ;     ld a,%00000000 ; collides with nothing
041BE6             0160*  ;     ld (iy+sprite_collisions),a
041BE6             0161*  ;     ld hl,0 ; north
041BE6             0162*  ;     ld (sprite_heading),hl
041BE6             0163*  ;     ld a,0x04 ; will decrement to 03
041BE6             0164*  ;     ld (sprite_animation),a
041BE6             0165*  ;     ld a,0x07 ; 7/60th of a second timer
041BE6             0166*  ;     ld (sprite_animation_timer),a
041BE6             0167*  ;     xor a
041BE6             0168*  ;     ld (sprite_move_timer),a
041BE6             0169*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
041BE6             0170*  ; ; fall through to next_explosion
041BE6             0171*  ; next_explosion:
041BE6             0172*  ;     ld a,(sprite_animation)
041BE6             0173*  ;     dec a ; if rolled negative from zero,we're done sploding
041BE6             0174*  ;     jp m,done_explosion
041BE6             0175*  ;     ld (sprite_animation),a
041BE6             0176*  ;     ld a,0x7 ; 7/60th of a second timer
041BE6             0177*  ;     ld (sprite_animation_timer),a
041BE6             0178*  ; ; fall through to animate_explosion
041BE6             0179*  ; animate_explosion:
041BE6             0180*  ;     ld hl,sprite_y+1
041BE6             0181*  ;     inc (hl) ; move explosion down 1 pixel
041BE6             0182*  ;     jp z, done_explosion ; if wraparound to top of screen, kill explosion
041BE6             0183*  ;     ld hl,sprite_animation_timer
041BE6             0184*  ;     dec (hl) ; if timer is zero,we do next animation
041BE6             0185*  ;     jp z,next_explosion
041BE6             0186*  ;     ;otherwise we fall through to draw the current one
041BE6             0187*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
041BE6             0188*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
041BE6             0189*  ;     ret ; now we go back to caller
041BE6             0190*  ; done_explosion:
041BE6 FD CB 08 FE 0191*      set sprite_just_died,(iy+sprite_collisions)
041BEA C9          0192*      ret ; now we go back to caller
041BEB             0193*  ; end enemy_kill
041BEB             0045       include "enemy_seeker.inc"
041BEB             0001*  speed_seeker: equ 0x000280 ; 2.5 pixels per frame
041BEB             0002*  
041BEB             0003*  seeker_defaults:
041BEB 00          0004*      db 0x00	                ; id
041BEC 01          0005*      db enemy_seeker	        ; type
041BED 0B 01 00    0006*      dl BUF_SEEKER_000	    ; base_bufferId
041BF0 35 1C 04    0007*      dl move_enemy_seeker	; move_program
041BF3 03          0008*      db collides_with_laser | collides_with_player ; collisions
041BF4 10          0009*      db 16	                ; dim_x
041BF5 10          0010*      db 16                   ; dim_y
041BF6 00 00 00    0011*      dl 0x000000	            ; x
041BF9 00 00 00    0012*      dl 0x000000	            ; y
041BFC 00 00 00    0013*      dl 0x000000	            ; xvel
041BFF 00 00 00    0014*      dl 0x000000	            ; yvel
041C02 80 02 00    0015*      dl speed_seeker	        ; vel
041C05 00 80 00    0016*      dl 0x008000	            ; heading
041C08 00 80 00    0017*      dl 0x008000	            ; orientation
041C0B 00          0018*      db 0x00	                ; animation
041C0C 00          0019*      db 0x00	                ; animation_timer
041C0D 01          0020*      db 0x01	                ; move_timer
041C0E 00          0021*      db 0x00	                ; move_step
041C0F 0A          0022*      db 10	                ; points
041C10 02          0023*      db 0x02	                ; shield_damage
041C11             0024*  
041C11             0025*  enemy_spawn_seeker:
041C11 FD 21 EB 1B 0026*      ld iy,seeker_defaults
       04          
041C16 CD 32 54 04 0027*      call spawn_sprite_from_sprite
041C1A D0          0028*      ret nc ; no carry means no free sprite slots, so we go home
041C1B             0029*  ; ix comes back with the pointer to the new sprite variables
041C1B             0030*  ; a comes back with the spriteId of the new sprite
041C1B             0031*  ; initialize the new sprite
041C1B FD 77 00    0032*      ld (iy+sprite_id),a
041C1E CD 56 54 04 0033*      call sprite_load_frames
041C22             0034*  ; copy coordinates of active sprite to new sprite
041C22 FD 2A C5 52 0035*      ld iy,(table_pointer)
       04          
041C27 E6 01       0036*      and %00000001 ; 50/50 chance of moving left or right on spanw
041C29 FD 77 23    0037*      ld (iy+sprite_move_step),a
041C2C             0038*  ; update the new sprite's position and make it visible
041C2C CD 3E 1A 04 0039*      call vdu_sprite_move_abs168
041C30 CD E8 19 04 0040*      call vdu_sprite_show
041C34 C9          0041*      ret
041C35             0042*  ; end enemy_spawn_seeker
041C35             0043*  
041C35             0044*  move_enemy_seeker:
041C35             0045*  ; run the movement program for the seeker enemy
041C35 CD 3D 1C 04 0046*      call en_nav_seek_zag
041C39 C3 71 1B 04 0047*      jp check_enemy_player_collisions
041C3D             0048*  ; end move_enemy_seeker
041C3D             0049*  
041C3D             0050*  ; contains the logic for how to move the enemy
041C3D             0051*  ; and then does the moving
041C3D             0052*  ; inputs: a fully-populated active sprite table
041C3D             0053*  ;         player position variables
041C3D             0054*  ; destroys: everything except index registers
041C3D             0055*  ; outputs: moving enemies
041C3D             0056*  en_nav_seek_zag:
041C3D             0057*  ; set velocity and orientation by player's relative location
041C3D             0058*  ; move enemies y-axis
041C3D             0059*  ; where is player relative to us?
041C3D CD AA 1B 04 0060*      call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
041C41             0061*  ; is player above or below us?
041C41 ED 53 A5 05 0062*      ld (ude),de ; dy
       04          
041C46 3A A7 05 04 0063*      ld a,(ude+2) ; deu
041C4A 17          0064*      rla ; shift sign bit into carry
041C4B D2 77 1C 04 0065*      jp nc,@zig_zag ; player is below,evade
041C4F             0066*  ; player is even or above,so home in on current heading
041C4F FD 2F 1A    0067*      ld (iy+sprite_heading),hl ; save sprite heading
041C52             0068*  ; fall through to @compute_velocities
041C52             0069*  @compute_velocities:
041C52 CD 1A 54 04 0070*      call sprite_compute_velocities
041C56             0071*  ; change the animation frame to match heading
041C56 FD 7E 1B    0072*      ld a,(iy+sprite_heading+1) ; we want the integer portion
041C59 CB 3F       0073*      srl a ; divide integer portion by 8
041C5B CB 3F       0074*      srl a
041C5D CB 3F       0075*      srl a
041C5F CD D5 19 04 0076*      call vdu_sprite_select_frame
041C63 C3 79 53 04 0077*      jp move_sprite ; will return to caller from there
041C67             0078*  @zig_zag_start:
041C67 FD 2A C5 52 0079*      ld iy,(table_pointer)
       04          
041C6C CD 49 07 04 0080*      call rand_8
041C70 E6 3F       0081*      and %00111111 ; limit it to 64
041C72 CB DF       0082*      set 3,a ; make sure it's at least 8
041C74 FD 77 22    0083*      ld (iy+sprite_move_timer),a ; store it
041C77             0084*      ; fall through to @zig_zag
041C77             0085*  @zig_zag:
041C77 FD 7E 22    0086*      ld a,(iy+sprite_move_timer)
041C7A 3D          0087*      dec a
041C7B FD 77 22    0088*      ld (iy+sprite_move_timer),a
041C7E C2 A4 1C 04 0089*      jp nz,@zig_zag_no_switch
041C82             0090*      ; otherwise flip direction and restart timer
041C82 FD 7E 23    0091*      ld a,(iy+sprite_move_step)
041C85 EE 01       0092*      xor %1 ; flips bit one
041C87 FD 77 23    0093*      ld (iy+sprite_move_step),a ; store it
041C8A C2 99 1C 04 0094*      jp nz,@F ; zag right
041C8E             0095*  ;otherwise zag left
041C8E 21 00 A0 00 0096*      ld hl,160*256; southwest heading
041C92 FD 2F 1A    0097*      ld (iy+sprite_heading),hl ; save sprite heading
041C95 C3 67 1C 04 0098*      jp @zig_zag_start
041C99             0099*  @@: ; zag right
041C99 21 00 60 00 0100*      ld hl,96*256; southeast heading
041C9D FD 2F 1A    0101*      ld (iy+sprite_heading),hl ; save sprite heading
041CA0 C3 67 1C 04 0102*      jp @zig_zag_start
041CA4             0103*  @zig_zag_no_switch:
041CA4             0104*      ; ld a,(sprite_orientation)
041CA4 FD 27 1A    0105*      ld hl,(iy+sprite_heading)
041CA7 C3 52 1C 04 0106*      jp @compute_velocities
041CAB             0107*  ; end en_nav_seek_zag
041CAB             0046       include "fonts_list.inc"
041CAB             0001*  ; Generated by asm_config_editor.py
041CAB             0002*  font_list_record_size: equ 12
041CAB             0003*  font_list_width: equ 0
041CAB             0004*  font_list_height: equ 3
041CAB             0005*  font_list_bufferId: equ 6
041CAB             0006*  font_list_filename: equ 9
041CAB             0007*  
041CAB             0008*  num_fonts: equ 18
041CAB             0009*  
041CAB             0010*  ; Index list:
041CAB             0011*  amiga_forever_16x24: equ 64000
041CAB             0012*  amiga_forever_8x16: equ 64001
041CAB             0013*  amiga_forever_8x8: equ 64002
041CAB             0014*  computer_pixel_7_10x15: equ 64003
041CAB             0015*  computer_pixel_7_10x24: equ 64004
041CAB             0016*  computer_pixel_7_8x16: equ 64005
041CAB             0017*  Lat2_Terminus12x6_6x12: equ 64006
041CAB             0018*  Lat2_TerminusBold14_8x14: equ 64007
041CAB             0019*  Lat2_VGA14_8x14: equ 64008
041CAB             0020*  Lat2_VGA16_8x16: equ 64009
041CAB             0021*  Lat2_VGA8_8x8: equ 64010
041CAB             0022*  Lat7_Fixed13_8x13: equ 64011
041CAB             0023*  Lat7_Terminus12x6_6x12: equ 64012
041CAB             0024*  Lat7_TerminusBold16_8x16: equ 64013
041CAB             0025*  Lat7_VGA14_8x14: equ 64014
041CAB             0026*  Lat7_VGA8x8: equ 64015
041CAB             0027*  scriptorium_12x14: equ 64016
041CAB             0028*  Squarewave_Bold_8x12: equ 64017
041CAB             0029*  
041CAB             0030*  font_list: ; width; height; bufferId; filename;:
041CAB 10 00 00 18 0031*  	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 83 1D 04 
041CB7 08 00 00 10 0032*  	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 A2 1D 04 
041CC3 08 00 00 08 0033*  	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 C0 1D 04 
041CCF 0A 00 00 0F 0034*  	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 DD 1D 04 
041CDB 0A 00 00 18 0035*  	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 FF 1D 04 
041CE7 08 00 00 10 0036*  	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 21 1E 04 
041CF3 06 00 00 0C 0037*  	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 42 1E 04 
041CFF 08 00 00 0E 0038*  	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 64 1E 04 
041D0B 08 00 00 0E 0039*  	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 88 1E 04 
041D17 08 00 00 10 0040*  	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 A3 1E 04 
041D23 08 00 00 08 0041*  	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 BE 1E 04 
041D2F 08 00 00 0D 0042*  	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 D7 1E 04 
041D3B 06 00 00 0C 0043*  	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 F4 1E 04 
041D47 08 00 00 10 0044*  	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 16 1F 04 
041D53 08 00 00 0E 0045*  	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 3A 1F 04 
041D5F 08 00 00 08 0046*  	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 55 1F 04 
041D6B 0C 00 00 0E 0047*  	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 6E 1F 04 
041D77 08 00 00 0C 0048*  	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 8B 1F 04 
041D83             0049*  
041D83             0050*  ; files_list: ; filename:
041D83 66 6F 6E 74 0051*  fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
041DA2 66 6F 6E 74 0052*  fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
041DC0 66 6F 6E 74 0053*  fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041DDD 66 6F 6E 74 0054*  fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
041DFF 66 6F 6E 74 0055*  fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
041E21 66 6F 6E 74 0056*  fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
041E42 66 6F 6E 74 0057*  fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
041E64 66 6F 6E 74 0058*  fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
041E88 66 6F 6E 74 0059*  fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
041EA3 66 6F 6E 74 0060*  fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
041EBE 66 6F 6E 74 0061*  fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041ED7 66 6F 6E 74 0062*  fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
041EF4 66 6F 6E 74 0063*  fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
041F16 66 6F 6E 74 0064*  fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
041F3A 66 6F 6E 74 0065*  fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
041F55 66 6F 6E 74 0066*  fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041F6E 66 6F 6E 74 0067*  fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
041F8B 66 6F 6E 74 0068*  fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
041FAB             0047       include "images_tiles_dg.inc"
041FAB             0001*  ; Generated by tiles_dg.py
041FAB             0002*  
041FAB             0003*  tiles_dg_num_images: equ 184
041FAB             0004*  
041FAB             0005*  ; bufferIds:
041FAB             0006*  
041FAB             0007*  
041FAB             0008*  tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
041FAB 01 00 00 10 0009*  	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       9B 2C 04 00 
       02 00       
041FBD 01 00 00 10 0010*  	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       B0 2C 04 01 
       02 00       
041FCF 01 00 00 10 0011*  	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       C5 2C 04 02 
       02 00       
041FE1 01 00 00 10 0012*  	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       DA 2C 04 03 
       02 00       
041FF3 01 00 00 10 0013*  	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       EF 2C 04 04 
       02 00       
042005 01 00 00 10 0014*  	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       04 2D 04 05 
       02 00       
042017 01 00 00 10 0015*  	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       19 2D 04 06 
       02 00       
042029 01 00 00 10 0016*  	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       2E 2D 04 07 
       02 00       
04203B 01 00 00 10 0017*  	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       43 2D 04 08 
       02 00       
04204D 01 00 00 10 0018*  	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       58 2D 04 09 
       02 00       
04205F 01 00 00 10 0019*  	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       6D 2D 04 0A 
       02 00       
042071 01 00 00 10 0020*  	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       82 2D 04 0B 
       02 00       
042083 01 00 00 10 0021*  	dl 1, 16, 16, 256, fn_dg_012, 524
       00 00 10 00 
       00 00 01 00 
       97 2D 04 0C 
       02 00       
042095 01 00 00 10 0022*  	dl 1, 16, 16, 256, fn_dg_013, 525
       00 00 10 00 
       00 00 01 00 
       AC 2D 04 0D 
       02 00       
0420A7 01 00 00 10 0023*  	dl 1, 16, 16, 256, fn_dg_014, 526
       00 00 10 00 
       00 00 01 00 
       C1 2D 04 0E 
       02 00       
0420B9 01 00 00 10 0024*  	dl 1, 16, 16, 256, fn_dg_015, 527
       00 00 10 00 
       00 00 01 00 
       D6 2D 04 0F 
       02 00       
0420CB 01 00 00 10 0025*  	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       EB 2D 04 10 
       02 00       
0420DD 01 00 00 10 0026*  	dl 1, 16, 16, 256, fn_dg_025, 537
       00 00 10 00 
       00 00 01 00 
       00 2E 04 19 
       02 00       
0420EF 01 00 00 10 0027*  	dl 1, 16, 16, 256, fn_dg_026, 538
       00 00 10 00 
       00 00 01 00 
       15 2E 04 1A 
       02 00       
042101 01 00 00 10 0028*  	dl 1, 16, 16, 256, fn_dg_027, 539
       00 00 10 00 
       00 00 01 00 
       2A 2E 04 1B 
       02 00       
042113 01 00 00 10 0029*  	dl 1, 16, 16, 256, fn_dg_028, 540
       00 00 10 00 
       00 00 01 00 
       3F 2E 04 1C 
       02 00       
042125 01 00 00 10 0030*  	dl 1, 16, 16, 256, fn_dg_029, 541
       00 00 10 00 
       00 00 01 00 
       54 2E 04 1D 
       02 00       
042137 01 00 00 10 0031*  	dl 1, 16, 16, 256, fn_dg_030, 542
       00 00 10 00 
       00 00 01 00 
       69 2E 04 1E 
       02 00       
042149 01 00 00 10 0032*  	dl 1, 16, 16, 256, fn_dg_031, 543
       00 00 10 00 
       00 00 01 00 
       7E 2E 04 1F 
       02 00       
04215B 01 00 00 10 0033*  	dl 1, 16, 16, 256, fn_dg_032, 544
       00 00 10 00 
       00 00 01 00 
       93 2E 04 20 
       02 00       
04216D 01 00 00 10 0034*  	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       A8 2E 04 21 
       02 00       
04217F 01 00 00 10 0035*  	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       BD 2E 04 22 
       02 00       
042191 01 00 00 10 0036*  	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       D2 2E 04 23 
       02 00       
0421A3 01 00 00 10 0037*  	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       E7 2E 04 24 
       02 00       
0421B5 01 00 00 10 0038*  	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       FC 2E 04 25 
       02 00       
0421C7 01 00 00 10 0039*  	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       11 2F 04 26 
       02 00       
0421D9 01 00 00 10 0040*  	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       26 2F 04 27 
       02 00       
0421EB 01 00 00 10 0041*  	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       3B 2F 04 28 
       02 00       
0421FD 01 00 00 10 0042*  	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       50 2F 04 31 
       02 00       
04220F 01 00 00 10 0043*  	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       65 2F 04 32 
       02 00       
042221 01 00 00 10 0044*  	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       7A 2F 04 33 
       02 00       
042233 01 00 00 10 0045*  	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       8F 2F 04 34 
       02 00       
042245 01 00 00 10 0046*  	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       A4 2F 04 35 
       02 00       
042257 01 00 00 10 0047*  	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       B9 2F 04 36 
       02 00       
042269 01 00 00 10 0048*  	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       CE 2F 04 37 
       02 00       
04227B 01 00 00 10 0049*  	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       E3 2F 04 38 
       02 00       
04228D 01 00 00 10 0050*  	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       F8 2F 04 39 
       02 00       
04229F 01 00 00 10 0051*  	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       0D 30 04 3A 
       02 00       
0422B1 01 00 00 10 0052*  	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       22 30 04 3B 
       02 00       
0422C3 01 00 00 10 0053*  	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       37 30 04 41 
       02 00       
0422D5 01 00 00 10 0054*  	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       4C 30 04 42 
       02 00       
0422E7 01 00 00 10 0055*  	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       61 30 04 43 
       02 00       
0422F9 01 00 00 10 0056*  	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       76 30 04 44 
       02 00       
04230B 01 00 00 10 0057*  	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       8B 30 04 45 
       02 00       
04231D 01 00 00 10 0058*  	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       A0 30 04 46 
       02 00       
04232F 01 00 00 10 0059*  	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       B5 30 04 47 
       02 00       
042341 01 00 00 10 0060*  	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       CA 30 04 48 
       02 00       
042353 01 00 00 10 0061*  	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       DF 30 04 49 
       02 00       
042365 01 00 00 10 0062*  	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       F4 30 04 4A 
       02 00       
042377 01 00 00 10 0063*  	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       09 31 04 4B 
       02 00       
042389 01 00 00 10 0064*  	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       1E 31 04 51 
       02 00       
04239B 01 00 00 10 0065*  	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       33 31 04 52 
       02 00       
0423AD 01 00 00 10 0066*  	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       48 31 04 53 
       02 00       
0423BF 01 00 00 10 0067*  	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       5D 31 04 54 
       02 00       
0423D1 01 00 00 10 0068*  	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       72 31 04 55 
       02 00       
0423E3 01 00 00 10 0069*  	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       87 31 04 56 
       02 00       
0423F5 01 00 00 10 0070*  	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       9C 31 04 57 
       02 00       
042407 01 00 00 10 0071*  	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       B1 31 04 58 
       02 00       
042419 01 00 00 10 0072*  	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       C6 31 04 59 
       02 00       
04242B 01 00 00 10 0073*  	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       DB 31 04 5A 
       02 00       
04243D 01 00 00 10 0074*  	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       F0 31 04 5B 
       02 00       
04244F 01 00 00 10 0075*  	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       05 32 04 61 
       02 00       
042461 01 00 00 10 0076*  	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       1A 32 04 62 
       02 00       
042473 01 00 00 10 0077*  	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       2F 32 04 63 
       02 00       
042485 01 00 00 10 0078*  	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       44 32 04 64 
       02 00       
042497 01 00 00 10 0079*  	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       59 32 04 65 
       02 00       
0424A9 01 00 00 10 0080*  	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       6E 32 04 66 
       02 00       
0424BB 01 00 00 10 0081*  	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       83 32 04 67 
       02 00       
0424CD 01 00 00 10 0082*  	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       98 32 04 68 
       02 00       
0424DF 01 00 00 10 0083*  	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       AD 32 04 69 
       02 00       
0424F1 01 00 00 10 0084*  	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       C2 32 04 6A 
       02 00       
042503 01 00 00 10 0085*  	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       D7 32 04 6B 
       02 00       
042515 01 00 00 10 0086*  	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       EC 32 04 6C 
       02 00       
042527 01 00 00 10 0087*  	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       01 33 04 71 
       02 00       
042539 01 00 00 10 0088*  	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       16 33 04 72 
       02 00       
04254B 01 00 00 10 0089*  	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       2B 33 04 73 
       02 00       
04255D 01 00 00 10 0090*  	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       40 33 04 74 
       02 00       
04256F 01 00 00 10 0091*  	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       55 33 04 75 
       02 00       
042581 01 00 00 10 0092*  	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       6A 33 04 76 
       02 00       
042593 01 00 00 10 0093*  	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       7F 33 04 77 
       02 00       
0425A5 01 00 00 10 0094*  	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       94 33 04 78 
       02 00       
0425B7 01 00 00 10 0095*  	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       A9 33 04 79 
       02 00       
0425C9 01 00 00 10 0096*  	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       BE 33 04 7A 
       02 00       
0425DB 01 00 00 10 0097*  	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       D3 33 04 7B 
       02 00       
0425ED 01 00 00 10 0098*  	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       E8 33 04 81 
       02 00       
0425FF 01 00 00 10 0099*  	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       FD 33 04 82 
       02 00       
042611 01 00 00 10 0100*  	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       12 34 04 83 
       02 00       
042623 01 00 00 10 0101*  	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       27 34 04 84 
       02 00       
042635 01 00 00 10 0102*  	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       3C 34 04 85 
       02 00       
042647 01 00 00 10 0103*  	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       51 34 04 86 
       02 00       
042659 01 00 00 10 0104*  	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       66 34 04 87 
       02 00       
04266B 01 00 00 10 0105*  	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       7B 34 04 88 
       02 00       
04267D 01 00 00 10 0106*  	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       90 34 04 89 
       02 00       
04268F 01 00 00 10 0107*  	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       A5 34 04 8A 
       02 00       
0426A1 01 00 00 10 0108*  	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       BA 34 04 8B 
       02 00       
0426B3 01 00 00 10 0109*  	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       CF 34 04 8C 
       02 00       
0426C5 01 00 00 10 0110*  	dl 1, 16, 16, 256, fn_dg_141, 653
       00 00 10 00 
       00 00 01 00 
       E4 34 04 8D 
       02 00       
0426D7 01 00 00 10 0111*  	dl 1, 16, 16, 256, fn_dg_142, 654
       00 00 10 00 
       00 00 01 00 
       F9 34 04 8E 
       02 00       
0426E9 01 00 00 10 0112*  	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       0E 35 04 91 
       02 00       
0426FB 01 00 00 10 0113*  	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       23 35 04 92 
       02 00       
04270D 01 00 00 10 0114*  	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       38 35 04 93 
       02 00       
04271F 01 00 00 10 0115*  	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       4D 35 04 94 
       02 00       
042731 01 00 00 10 0116*  	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       62 35 04 95 
       02 00       
042743 01 00 00 10 0117*  	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       77 35 04 96 
       02 00       
042755 01 00 00 10 0118*  	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       8C 35 04 97 
       02 00       
042767 01 00 00 10 0119*  	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       A1 35 04 98 
       02 00       
042779 01 00 00 10 0120*  	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       B6 35 04 99 
       02 00       
04278B 01 00 00 10 0121*  	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       CB 35 04 9A 
       02 00       
04279D 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       E0 35 04 9B 
       02 00       
0427AF 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       F5 35 04 9C 
       02 00       
0427C1 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_dg_157, 669
       00 00 10 00 
       00 00 01 00 
       0A 36 04 9D 
       02 00       
0427D3 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_dg_158, 670
       00 00 10 00 
       00 00 01 00 
       1F 36 04 9E 
       02 00       
0427E5 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       34 36 04 A1 
       02 00       
0427F7 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       49 36 04 A2 
       02 00       
042809 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       5E 36 04 A3 
       02 00       
04281B 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       73 36 04 A4 
       02 00       
04282D 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       88 36 04 A5 
       02 00       
04283F 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       9D 36 04 A6 
       02 00       
042851 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       B2 36 04 A7 
       02 00       
042863 01 00 00 10 0133*  	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       C7 36 04 A8 
       02 00       
042875 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       DC 36 04 A9 
       02 00       
042887 01 00 00 10 0135*  	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       F1 36 04 AA 
       02 00       
042899 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       06 37 04 AB 
       02 00       
0428AB 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       1B 37 04 AC 
       02 00       
0428BD 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       30 37 04 B1 
       02 00       
0428CF 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       45 37 04 B2 
       02 00       
0428E1 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       5A 37 04 B3 
       02 00       
0428F3 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       6F 37 04 B4 
       02 00       
042905 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       84 37 04 B5 
       02 00       
042917 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       99 37 04 B6 
       02 00       
042929 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       AE 37 04 B7 
       02 00       
04293B 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       C3 37 04 B8 
       02 00       
04294D 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       D8 37 04 B9 
       02 00       
04295F 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       ED 37 04 BA 
       02 00       
042971 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       02 38 04 BB 
       02 00       
042983 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       17 38 04 BC 
       02 00       
042995 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       2C 38 04 C1 
       02 00       
0429A7 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       41 38 04 C2 
       02 00       
0429B9 01 00 00 10 0152*  	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       56 38 04 C3 
       02 00       
0429CB 01 00 00 10 0153*  	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       6B 38 04 C4 
       02 00       
0429DD 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       80 38 04 C5 
       02 00       
0429EF 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       95 38 04 C6 
       02 00       
042A01 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       AA 38 04 C7 
       02 00       
042A13 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       BF 38 04 C8 
       02 00       
042A25 01 00 00 10 0158*  	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       D4 38 04 C9 
       02 00       
042A37 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       E9 38 04 CA 
       02 00       
042A49 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       FE 38 04 CB 
       02 00       
042A5B 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       13 39 04 CC 
       02 00       
042A6D 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       28 39 04 D1 
       02 00       
042A7F 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       3D 39 04 D2 
       02 00       
042A91 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       52 39 04 D3 
       02 00       
042AA3 01 00 00 10 0165*  	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       67 39 04 D4 
       02 00       
042AB5 01 00 00 10 0166*  	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       7C 39 04 D5 
       02 00       
042AC7 01 00 00 10 0167*  	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       91 39 04 D6 
       02 00       
042AD9 01 00 00 10 0168*  	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       A6 39 04 D7 
       02 00       
042AEB 01 00 00 10 0169*  	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       BB 39 04 D8 
       02 00       
042AFD 01 00 00 10 0170*  	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       D0 39 04 D9 
       02 00       
042B0F 01 00 00 10 0171*  	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       E5 39 04 DA 
       02 00       
042B21 01 00 00 10 0172*  	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       FA 39 04 DB 
       02 00       
042B33 01 00 00 10 0173*  	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       0F 3A 04 DC 
       02 00       
042B45 01 00 00 10 0174*  	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       24 3A 04 E1 
       02 00       
042B57 01 00 00 10 0175*  	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       39 3A 04 E2 
       02 00       
042B69 01 00 00 10 0176*  	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       4E 3A 04 E3 
       02 00       
042B7B 01 00 00 10 0177*  	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       63 3A 04 E4 
       02 00       
042B8D 01 00 00 10 0178*  	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       78 3A 04 E5 
       02 00       
042B9F 01 00 00 10 0179*  	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       8D 3A 04 E6 
       02 00       
042BB1 01 00 00 10 0180*  	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       A2 3A 04 E7 
       02 00       
042BC3 01 00 00 10 0181*  	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       B7 3A 04 E8 
       02 00       
042BD5 01 00 00 10 0182*  	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       CC 3A 04 E9 
       02 00       
042BE7 01 00 00 10 0183*  	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       E1 3A 04 EA 
       02 00       
042BF9 01 00 00 10 0184*  	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       F6 3A 04 EB 
       02 00       
042C0B 01 00 00 10 0185*  	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       0B 3B 04 EC 
       02 00       
042C1D 01 00 00 10 0186*  	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       20 3B 04 F1 
       02 00       
042C2F 01 00 00 10 0187*  	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       35 3B 04 F2 
       02 00       
042C41 01 00 00 10 0188*  	dl 1, 16, 16, 256, fn_dg_243, 755
       00 00 10 00 
       00 00 01 00 
       4A 3B 04 F3 
       02 00       
042C53 01 00 00 10 0189*  	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       5F 3B 04 F5 
       02 00       
042C65 01 00 00 10 0190*  	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       74 3B 04 F6 
       02 00       
042C77 01 00 00 10 0191*  	dl 1, 16, 16, 256, fn_dg_247, 759
       00 00 10 00 
       00 00 01 00 
       89 3B 04 F7 
       02 00       
042C89 01 00 00 10 0192*  	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       9E 3B 04 F8 
       02 00       
042C9B             0193*  
042C9B             0194*  tiles_dg_files_list: ; filename:
042C9B 74 69 6C 65 0195*  fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
042CB0 74 69 6C 65 0196*  fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
042CC5 74 69 6C 65 0197*  fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
042CDA 74 69 6C 65 0198*  fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
042CEF 74 69 6C 65 0199*  fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
042D04 74 69 6C 65 0200*  fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
042D19 74 69 6C 65 0201*  fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
042D2E 74 69 6C 65 0202*  fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
042D43 74 69 6C 65 0203*  fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
042D58 74 69 6C 65 0204*  fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
042D6D 74 69 6C 65 0205*  fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
042D82 74 69 6C 65 0206*  fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
042D97 74 69 6C 65 0207*  fn_dg_012: db "tiles/dg/0/012.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 32 2E 72 
       67 62 61 32 
       00          
042DAC 74 69 6C 65 0208*  fn_dg_013: db "tiles/dg/0/013.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 33 2E 72 
       67 62 61 32 
       00          
042DC1 74 69 6C 65 0209*  fn_dg_014: db "tiles/dg/0/014.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 34 2E 72 
       67 62 61 32 
       00          
042DD6 74 69 6C 65 0210*  fn_dg_015: db "tiles/dg/0/015.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 35 2E 72 
       67 62 61 32 
       00          
042DEB 74 69 6C 65 0211*  fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
042E00 74 69 6C 65 0212*  fn_dg_025: db "tiles/dg/0/025.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 35 2E 72 
       67 62 61 32 
       00          
042E15 74 69 6C 65 0213*  fn_dg_026: db "tiles/dg/0/026.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 36 2E 72 
       67 62 61 32 
       00          
042E2A 74 69 6C 65 0214*  fn_dg_027: db "tiles/dg/0/027.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 37 2E 72 
       67 62 61 32 
       00          
042E3F 74 69 6C 65 0215*  fn_dg_028: db "tiles/dg/0/028.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 38 2E 72 
       67 62 61 32 
       00          
042E54 74 69 6C 65 0216*  fn_dg_029: db "tiles/dg/0/029.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 39 2E 72 
       67 62 61 32 
       00          
042E69 74 69 6C 65 0217*  fn_dg_030: db "tiles/dg/0/030.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 30 2E 72 
       67 62 61 32 
       00          
042E7E 74 69 6C 65 0218*  fn_dg_031: db "tiles/dg/0/031.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 31 2E 72 
       67 62 61 32 
       00          
042E93 74 69 6C 65 0219*  fn_dg_032: db "tiles/dg/0/032.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
042EA8 74 69 6C 65 0220*  fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
042EBD 74 69 6C 65 0221*  fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
042ED2 74 69 6C 65 0222*  fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
042EE7 74 69 6C 65 0223*  fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
042EFC 74 69 6C 65 0224*  fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
042F11 74 69 6C 65 0225*  fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
042F26 74 69 6C 65 0226*  fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
042F3B 74 69 6C 65 0227*  fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
042F50 74 69 6C 65 0228*  fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
042F65 74 69 6C 65 0229*  fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
042F7A 74 69 6C 65 0230*  fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
042F8F 74 69 6C 65 0231*  fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
042FA4 74 69 6C 65 0232*  fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
042FB9 74 69 6C 65 0233*  fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
042FCE 74 69 6C 65 0234*  fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
042FE3 74 69 6C 65 0235*  fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
042FF8 74 69 6C 65 0236*  fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
04300D 74 69 6C 65 0237*  fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043022 74 69 6C 65 0238*  fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
043037 74 69 6C 65 0239*  fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
04304C 74 69 6C 65 0240*  fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
043061 74 69 6C 65 0241*  fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
043076 74 69 6C 65 0242*  fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
04308B 74 69 6C 65 0243*  fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
0430A0 74 69 6C 65 0244*  fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
0430B5 74 69 6C 65 0245*  fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
0430CA 74 69 6C 65 0246*  fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0430DF 74 69 6C 65 0247*  fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
0430F4 74 69 6C 65 0248*  fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
043109 74 69 6C 65 0249*  fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
04311E 74 69 6C 65 0250*  fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
043133 74 69 6C 65 0251*  fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
043148 74 69 6C 65 0252*  fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
04315D 74 69 6C 65 0253*  fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
043172 74 69 6C 65 0254*  fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
043187 74 69 6C 65 0255*  fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
04319C 74 69 6C 65 0256*  fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
0431B1 74 69 6C 65 0257*  fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0431C6 74 69 6C 65 0258*  fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
0431DB 74 69 6C 65 0259*  fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
0431F0 74 69 6C 65 0260*  fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
043205 74 69 6C 65 0261*  fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
04321A 74 69 6C 65 0262*  fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
04322F 74 69 6C 65 0263*  fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
043244 74 69 6C 65 0264*  fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
043259 74 69 6C 65 0265*  fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
04326E 74 69 6C 65 0266*  fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
043283 74 69 6C 65 0267*  fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
043298 74 69 6C 65 0268*  fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0432AD 74 69 6C 65 0269*  fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
0432C2 74 69 6C 65 0270*  fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
0432D7 74 69 6C 65 0271*  fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
0432EC 74 69 6C 65 0272*  fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
043301 74 69 6C 65 0273*  fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
043316 74 69 6C 65 0274*  fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
04332B 74 69 6C 65 0275*  fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
043340 74 69 6C 65 0276*  fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
043355 74 69 6C 65 0277*  fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
04336A 74 69 6C 65 0278*  fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
04337F 74 69 6C 65 0279*  fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
043394 74 69 6C 65 0280*  fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0433A9 74 69 6C 65 0281*  fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
0433BE 74 69 6C 65 0282*  fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
0433D3 74 69 6C 65 0283*  fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
0433E8 74 69 6C 65 0284*  fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
0433FD 74 69 6C 65 0285*  fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
043412 74 69 6C 65 0286*  fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
043427 74 69 6C 65 0287*  fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
04343C 74 69 6C 65 0288*  fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
043451 74 69 6C 65 0289*  fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
043466 74 69 6C 65 0290*  fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
04347B 74 69 6C 65 0291*  fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
043490 74 69 6C 65 0292*  fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
0434A5 74 69 6C 65 0293*  fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
0434BA 74 69 6C 65 0294*  fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
0434CF 74 69 6C 65 0295*  fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
0434E4 74 69 6C 65 0296*  fn_dg_141: db "tiles/dg/0/141.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 31 2E 72 
       67 62 61 32 
       00          
0434F9 74 69 6C 65 0297*  fn_dg_142: db "tiles/dg/0/142.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 32 2E 72 
       67 62 61 32 
       00          
04350E 74 69 6C 65 0298*  fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
043523 74 69 6C 65 0299*  fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
043538 74 69 6C 65 0300*  fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
04354D 74 69 6C 65 0301*  fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
043562 74 69 6C 65 0302*  fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
043577 74 69 6C 65 0303*  fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
04358C 74 69 6C 65 0304*  fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
0435A1 74 69 6C 65 0305*  fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0435B6 74 69 6C 65 0306*  fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
0435CB 74 69 6C 65 0307*  fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
0435E0 74 69 6C 65 0308*  fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
0435F5 74 69 6C 65 0309*  fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
04360A 74 69 6C 65 0310*  fn_dg_157: db "tiles/dg/0/157.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 37 2E 72 
       67 62 61 32 
       00          
04361F 74 69 6C 65 0311*  fn_dg_158: db "tiles/dg/0/158.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 38 2E 72 
       67 62 61 32 
       00          
043634 74 69 6C 65 0312*  fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
043649 74 69 6C 65 0313*  fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
04365E 74 69 6C 65 0314*  fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
043673 74 69 6C 65 0315*  fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
043688 74 69 6C 65 0316*  fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
04369D 74 69 6C 65 0317*  fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
0436B2 74 69 6C 65 0318*  fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
0436C7 74 69 6C 65 0319*  fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0436DC 74 69 6C 65 0320*  fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
0436F1 74 69 6C 65 0321*  fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
043706 74 69 6C 65 0322*  fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
04371B 74 69 6C 65 0323*  fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
043730 74 69 6C 65 0324*  fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
043745 74 69 6C 65 0325*  fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
04375A 74 69 6C 65 0326*  fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
04376F 74 69 6C 65 0327*  fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
043784 74 69 6C 65 0328*  fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
043799 74 69 6C 65 0329*  fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
0437AE 74 69 6C 65 0330*  fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
0437C3 74 69 6C 65 0331*  fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
0437D8 74 69 6C 65 0332*  fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
0437ED 74 69 6C 65 0333*  fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
043802 74 69 6C 65 0334*  fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
043817 74 69 6C 65 0335*  fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
04382C 74 69 6C 65 0336*  fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
043841 74 69 6C 65 0337*  fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
043856 74 69 6C 65 0338*  fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
04386B 74 69 6C 65 0339*  fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
043880 74 69 6C 65 0340*  fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
043895 74 69 6C 65 0341*  fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
0438AA 74 69 6C 65 0342*  fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
0438BF 74 69 6C 65 0343*  fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0438D4 74 69 6C 65 0344*  fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
0438E9 74 69 6C 65 0345*  fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
0438FE 74 69 6C 65 0346*  fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
043913 74 69 6C 65 0347*  fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
043928 74 69 6C 65 0348*  fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
04393D 74 69 6C 65 0349*  fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
043952 74 69 6C 65 0350*  fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
043967 74 69 6C 65 0351*  fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
04397C 74 69 6C 65 0352*  fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
043991 74 69 6C 65 0353*  fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
0439A6 74 69 6C 65 0354*  fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
0439BB 74 69 6C 65 0355*  fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0439D0 74 69 6C 65 0356*  fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
0439E5 74 69 6C 65 0357*  fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
0439FA 74 69 6C 65 0358*  fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
043A0F 74 69 6C 65 0359*  fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
043A24 74 69 6C 65 0360*  fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
043A39 74 69 6C 65 0361*  fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
043A4E 74 69 6C 65 0362*  fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
043A63 74 69 6C 65 0363*  fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
043A78 74 69 6C 65 0364*  fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
043A8D 74 69 6C 65 0365*  fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
043AA2 74 69 6C 65 0366*  fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
043AB7 74 69 6C 65 0367*  fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
043ACC 74 69 6C 65 0368*  fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
043AE1 74 69 6C 65 0369*  fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
043AF6 74 69 6C 65 0370*  fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
043B0B 74 69 6C 65 0371*  fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
043B20 74 69 6C 65 0372*  fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
043B35 74 69 6C 65 0373*  fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
043B4A 74 69 6C 65 0374*  fn_dg_243: db "tiles/dg/0/243.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 33 2E 72 
       67 62 61 32 
       00          
043B5F 74 69 6C 65 0375*  fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
043B74 74 69 6C 65 0376*  fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
043B89 74 69 6C 65 0377*  fn_dg_247: db "tiles/dg/0/247.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 37 2E 72 
       67 62 61 32 
       00          
043B9E 74 69 6C 65 0378*  fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
043BB3             0048       ; include "images_tiles_xevious.inc"
043BB3             0049       include "images_sprites.inc"
043BB3             0001*  ; Generated by make_images.py
043BB3             0002*  
043BB3             0003*  sprites_num_images: equ 79
043BB3             0004*  
043BB3             0005*  ; buffer_ids:
043BB3             0006*  BUF_CRATER: equ 256
043BB3             0007*  BUF_EXPLOSION_A: equ 257
043BB3             0008*  BUF_EXPLOSION_B: equ 258
043BB3             0009*  BUF_EXPLOSION_C: equ 259
043BB3             0010*  BUF_EXPLOSION_D: equ 260
043BB3             0011*  BUF_EXPLOSION_E: equ 261
043BB3             0012*  BUF_FIREBALL_A: equ 262
043BB3             0013*  BUF_FIREBALL_B: equ 263
043BB3             0014*  BUF_LASER_A: equ 264
043BB3             0015*  BUF_LASER_B: equ 265
043BB3             0016*  BUF_PAD: equ 266
043BB3             0017*  BUF_SEEKER_000: equ 267
043BB3             0018*  BUF_SEEKER_008: equ 268
043BB3             0019*  BUF_SEEKER_016: equ 269
043BB3             0020*  BUF_SEEKER_024: equ 270
043BB3             0021*  BUF_SEEKER_032: equ 271
043BB3             0022*  BUF_SEEKER_040: equ 272
043BB3             0023*  BUF_SEEKER_048: equ 273
043BB3             0024*  BUF_SEEKER_056: equ 274
043BB3             0025*  BUF_SEEKER_064: equ 275
043BB3             0026*  BUF_SEEKER_072: equ 276
043BB3             0027*  BUF_SEEKER_080: equ 277
043BB3             0028*  BUF_SEEKER_088: equ 278
043BB3             0029*  BUF_SEEKER_096: equ 279
043BB3             0030*  BUF_SEEKER_104: equ 280
043BB3             0031*  BUF_SEEKER_112: equ 281
043BB3             0032*  BUF_SEEKER_120: equ 282
043BB3             0033*  BUF_SEEKER_128: equ 283
043BB3             0034*  BUF_SEEKER_136: equ 284
043BB3             0035*  BUF_SEEKER_144: equ 285
043BB3             0036*  BUF_SEEKER_152: equ 286
043BB3             0037*  BUF_SEEKER_160: equ 287
043BB3             0038*  BUF_SEEKER_168: equ 288
043BB3             0039*  BUF_SEEKER_176: equ 289
043BB3             0040*  BUF_SEEKER_184: equ 290
043BB3             0041*  BUF_SEEKER_192: equ 291
043BB3             0042*  BUF_SEEKER_200: equ 292
043BB3             0043*  BUF_SEEKER_208: equ 293
043BB3             0044*  BUF_SEEKER_216: equ 294
043BB3             0045*  BUF_SEEKER_224: equ 295
043BB3             0046*  BUF_SEEKER_232: equ 296
043BB3             0047*  BUF_SEEKER_240: equ 297
043BB3             0048*  BUF_SEEKER_248: equ 298
043BB3             0049*  BUF_SHIP_0L: equ 299
043BB3             0050*  BUF_SHIP_1C: equ 300
043BB3             0051*  BUF_SHIP_2R: equ 301
043BB3             0052*  BUF_SHIP_SMALL: equ 302
043BB3             0053*  BUF_TURRET_000: equ 303
043BB3             0054*  BUF_TURRET_008: equ 304
043BB3             0055*  BUF_TURRET_016: equ 305
043BB3             0056*  BUF_TURRET_024: equ 306
043BB3             0057*  BUF_TURRET_032: equ 307
043BB3             0058*  BUF_TURRET_040: equ 308
043BB3             0059*  BUF_TURRET_048: equ 309
043BB3             0060*  BUF_TURRET_056: equ 310
043BB3             0061*  BUF_TURRET_064: equ 311
043BB3             0062*  BUF_TURRET_072: equ 312
043BB3             0063*  BUF_TURRET_080: equ 313
043BB3             0064*  BUF_TURRET_088: equ 314
043BB3             0065*  BUF_TURRET_096: equ 315
043BB3             0066*  BUF_TURRET_104: equ 316
043BB3             0067*  BUF_TURRET_112: equ 317
043BB3             0068*  BUF_TURRET_120: equ 318
043BB3             0069*  BUF_TURRET_128: equ 319
043BB3             0070*  BUF_TURRET_136: equ 320
043BB3             0071*  BUF_TURRET_144: equ 321
043BB3             0072*  BUF_TURRET_152: equ 322
043BB3             0073*  BUF_TURRET_160: equ 323
043BB3             0074*  BUF_TURRET_168: equ 324
043BB3             0075*  BUF_TURRET_176: equ 325
043BB3             0076*  BUF_TURRET_184: equ 326
043BB3             0077*  BUF_TURRET_192: equ 327
043BB3             0078*  BUF_TURRET_200: equ 328
043BB3             0079*  BUF_TURRET_208: equ 329
043BB3             0080*  BUF_TURRET_216: equ 330
043BB3             0081*  BUF_TURRET_224: equ 331
043BB3             0082*  BUF_TURRET_232: equ 332
043BB3             0083*  BUF_TURRET_240: equ 333
043BB3             0084*  BUF_TURRET_248: equ 334
043BB3             0085*  
043BB3             0086*  sprites_image_list: ; type; width; height; size; filename; bufferId:
043BB3 01 00 00 10 0087*  	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       41 41 04 00 
       01 00       
043BC5 01 00 00 10 0088*  	dl 1, 16, 16, 256, fn_explosion_a, 257
       00 00 10 00 
       00 00 01 00 
       56 41 04 01 
       01 00       
043BD7 01 00 00 10 0089*  	dl 1, 16, 16, 256, fn_explosion_b, 258
       00 00 10 00 
       00 00 01 00 
       70 41 04 02 
       01 00       
043BE9 01 00 00 10 0090*  	dl 1, 16, 16, 256, fn_explosion_c, 259
       00 00 10 00 
       00 00 01 00 
       8A 41 04 03 
       01 00       
043BFB 01 00 00 10 0091*  	dl 1, 16, 16, 256, fn_explosion_d, 260
       00 00 10 00 
       00 00 01 00 
       A4 41 04 04 
       01 00       
043C0D 01 00 00 10 0092*  	dl 1, 16, 16, 256, fn_explosion_e, 261
       00 00 10 00 
       00 00 01 00 
       BE 41 04 05 
       01 00       
043C1F 01 00 00 07 0093*  	dl 1, 7, 7, 49, fn_fireball_a, 262
       00 00 07 00 
       00 31 00 00 
       D8 41 04 06 
       01 00       
043C31 01 00 00 07 0094*  	dl 1, 7, 7, 49, fn_fireball_b, 263
       00 00 07 00 
       00 31 00 00 
       F1 41 04 07 
       01 00       
043C43 01 00 00 05 0095*  	dl 1, 5, 13, 65, fn_laser_a, 264
       00 00 0D 00 
       00 41 00 00 
       0A 42 04 08 
       01 00       
043C55 01 00 00 05 0096*  	dl 1, 5, 13, 65, fn_laser_b, 265
       00 00 0D 00 
       00 41 00 00 
       20 42 04 09 
       01 00       
043C67 01 00 00 10 0097*  	dl 1, 16, 16, 256, fn_pad, 266
       00 00 10 00 
       00 00 01 00 
       36 42 04 0A 
       01 00       
043C79 01 00 00 10 0098*  	dl 1, 16, 16, 256, fn_seeker_000, 267
       00 00 10 00 
       00 00 01 00 
       48 42 04 0B 
       01 00       
043C8B 01 00 00 10 0099*  	dl 1, 16, 16, 256, fn_seeker_008, 268
       00 00 10 00 
       00 00 01 00 
       61 42 04 0C 
       01 00       
043C9D 01 00 00 10 0100*  	dl 1, 16, 16, 256, fn_seeker_016, 269
       00 00 10 00 
       00 00 01 00 
       7A 42 04 0D 
       01 00       
043CAF 01 00 00 10 0101*  	dl 1, 16, 16, 256, fn_seeker_024, 270
       00 00 10 00 
       00 00 01 00 
       93 42 04 0E 
       01 00       
043CC1 01 00 00 10 0102*  	dl 1, 16, 16, 256, fn_seeker_032, 271
       00 00 10 00 
       00 00 01 00 
       AC 42 04 0F 
       01 00       
043CD3 01 00 00 10 0103*  	dl 1, 16, 16, 256, fn_seeker_040, 272
       00 00 10 00 
       00 00 01 00 
       C5 42 04 10 
       01 00       
043CE5 01 00 00 10 0104*  	dl 1, 16, 16, 256, fn_seeker_048, 273
       00 00 10 00 
       00 00 01 00 
       DE 42 04 11 
       01 00       
043CF7 01 00 00 10 0105*  	dl 1, 16, 16, 256, fn_seeker_056, 274
       00 00 10 00 
       00 00 01 00 
       F7 42 04 12 
       01 00       
043D09 01 00 00 10 0106*  	dl 1, 16, 16, 256, fn_seeker_064, 275
       00 00 10 00 
       00 00 01 00 
       10 43 04 13 
       01 00       
043D1B 01 00 00 10 0107*  	dl 1, 16, 16, 256, fn_seeker_072, 276
       00 00 10 00 
       00 00 01 00 
       29 43 04 14 
       01 00       
043D2D 01 00 00 10 0108*  	dl 1, 16, 16, 256, fn_seeker_080, 277
       00 00 10 00 
       00 00 01 00 
       42 43 04 15 
       01 00       
043D3F 01 00 00 10 0109*  	dl 1, 16, 16, 256, fn_seeker_088, 278
       00 00 10 00 
       00 00 01 00 
       5B 43 04 16 
       01 00       
043D51 01 00 00 10 0110*  	dl 1, 16, 16, 256, fn_seeker_096, 279
       00 00 10 00 
       00 00 01 00 
       74 43 04 17 
       01 00       
043D63 01 00 00 10 0111*  	dl 1, 16, 16, 256, fn_seeker_104, 280
       00 00 10 00 
       00 00 01 00 
       8D 43 04 18 
       01 00       
043D75 01 00 00 10 0112*  	dl 1, 16, 16, 256, fn_seeker_112, 281
       00 00 10 00 
       00 00 01 00 
       A6 43 04 19 
       01 00       
043D87 01 00 00 10 0113*  	dl 1, 16, 16, 256, fn_seeker_120, 282
       00 00 10 00 
       00 00 01 00 
       BF 43 04 1A 
       01 00       
043D99 01 00 00 10 0114*  	dl 1, 16, 16, 256, fn_seeker_128, 283
       00 00 10 00 
       00 00 01 00 
       D8 43 04 1B 
       01 00       
043DAB 01 00 00 10 0115*  	dl 1, 16, 16, 256, fn_seeker_136, 284
       00 00 10 00 
       00 00 01 00 
       F1 43 04 1C 
       01 00       
043DBD 01 00 00 10 0116*  	dl 1, 16, 16, 256, fn_seeker_144, 285
       00 00 10 00 
       00 00 01 00 
       0A 44 04 1D 
       01 00       
043DCF 01 00 00 10 0117*  	dl 1, 16, 16, 256, fn_seeker_152, 286
       00 00 10 00 
       00 00 01 00 
       23 44 04 1E 
       01 00       
043DE1 01 00 00 10 0118*  	dl 1, 16, 16, 256, fn_seeker_160, 287
       00 00 10 00 
       00 00 01 00 
       3C 44 04 1F 
       01 00       
043DF3 01 00 00 10 0119*  	dl 1, 16, 16, 256, fn_seeker_168, 288
       00 00 10 00 
       00 00 01 00 
       55 44 04 20 
       01 00       
043E05 01 00 00 10 0120*  	dl 1, 16, 16, 256, fn_seeker_176, 289
       00 00 10 00 
       00 00 01 00 
       6E 44 04 21 
       01 00       
043E17 01 00 00 10 0121*  	dl 1, 16, 16, 256, fn_seeker_184, 290
       00 00 10 00 
       00 00 01 00 
       87 44 04 22 
       01 00       
043E29 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_seeker_192, 291
       00 00 10 00 
       00 00 01 00 
       A0 44 04 23 
       01 00       
043E3B 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_seeker_200, 292
       00 00 10 00 
       00 00 01 00 
       B9 44 04 24 
       01 00       
043E4D 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_seeker_208, 293
       00 00 10 00 
       00 00 01 00 
       D2 44 04 25 
       01 00       
043E5F 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_seeker_216, 294
       00 00 10 00 
       00 00 01 00 
       EB 44 04 26 
       01 00       
043E71 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_seeker_224, 295
       00 00 10 00 
       00 00 01 00 
       04 45 04 27 
       01 00       
043E83 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_seeker_232, 296
       00 00 10 00 
       00 00 01 00 
       1D 45 04 28 
       01 00       
043E95 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_seeker_240, 297
       00 00 10 00 
       00 00 01 00 
       36 45 04 29 
       01 00       
043EA7 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_seeker_248, 298
       00 00 10 00 
       00 00 01 00 
       4F 45 04 2A 
       01 00       
043EB9 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_ship_0l, 299
       00 00 10 00 
       00 00 01 00 
       68 45 04 2B 
       01 00       
043ECB 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_ship_1c, 300
       00 00 10 00 
       00 00 01 00 
       7E 45 04 2C 
       01 00       
043EDD 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_ship_2r, 301
       00 00 10 00 
       00 00 01 00 
       94 45 04 2D 
       01 00       
043EEF 01 00 00 08 0133*  	dl 1, 8, 8, 64, fn_ship_small, 302
       00 00 08 00 
       00 40 00 00 
       AA 45 04 2E 
       01 00       
043F01 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_turret_000, 303
       00 00 10 00 
       00 00 01 00 
       C3 45 04 2F 
       01 00       
043F13 01 00 00 10 0135*  	dl 1, 16, 16, 256, fn_turret_008, 304
       00 00 10 00 
       00 00 01 00 
       DC 45 04 30 
       01 00       
043F25 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_turret_016, 305
       00 00 10 00 
       00 00 01 00 
       F5 45 04 31 
       01 00       
043F37 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_turret_024, 306
       00 00 10 00 
       00 00 01 00 
       0E 46 04 32 
       01 00       
043F49 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_turret_032, 307
       00 00 10 00 
       00 00 01 00 
       27 46 04 33 
       01 00       
043F5B 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_turret_040, 308
       00 00 10 00 
       00 00 01 00 
       40 46 04 34 
       01 00       
043F6D 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_turret_048, 309
       00 00 10 00 
       00 00 01 00 
       59 46 04 35 
       01 00       
043F7F 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_turret_056, 310
       00 00 10 00 
       00 00 01 00 
       72 46 04 36 
       01 00       
043F91 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_turret_064, 311
       00 00 10 00 
       00 00 01 00 
       8B 46 04 37 
       01 00       
043FA3 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_turret_072, 312
       00 00 10 00 
       00 00 01 00 
       A4 46 04 38 
       01 00       
043FB5 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_turret_080, 313
       00 00 10 00 
       00 00 01 00 
       BD 46 04 39 
       01 00       
043FC7 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_turret_088, 314
       00 00 10 00 
       00 00 01 00 
       D6 46 04 3A 
       01 00       
043FD9 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_turret_096, 315
       00 00 10 00 
       00 00 01 00 
       EF 46 04 3B 
       01 00       
043FEB 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_turret_104, 316
       00 00 10 00 
       00 00 01 00 
       08 47 04 3C 
       01 00       
043FFD 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_turret_112, 317
       00 00 10 00 
       00 00 01 00 
       21 47 04 3D 
       01 00       
04400F 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_turret_120, 318
       00 00 10 00 
       00 00 01 00 
       3A 47 04 3E 
       01 00       
044021 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_turret_128, 319
       00 00 10 00 
       00 00 01 00 
       53 47 04 3F 
       01 00       
044033 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_turret_136, 320
       00 00 10 00 
       00 00 01 00 
       6C 47 04 40 
       01 00       
044045 01 00 00 10 0152*  	dl 1, 16, 16, 256, fn_turret_144, 321
       00 00 10 00 
       00 00 01 00 
       85 47 04 41 
       01 00       
044057 01 00 00 10 0153*  	dl 1, 16, 16, 256, fn_turret_152, 322
       00 00 10 00 
       00 00 01 00 
       9E 47 04 42 
       01 00       
044069 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_turret_160, 323
       00 00 10 00 
       00 00 01 00 
       B7 47 04 43 
       01 00       
04407B 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_turret_168, 324
       00 00 10 00 
       00 00 01 00 
       D0 47 04 44 
       01 00       
04408D 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_turret_176, 325
       00 00 10 00 
       00 00 01 00 
       E9 47 04 45 
       01 00       
04409F 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_turret_184, 326
       00 00 10 00 
       00 00 01 00 
       02 48 04 46 
       01 00       
0440B1 01 00 00 10 0158*  	dl 1, 16, 16, 256, fn_turret_192, 327
       00 00 10 00 
       00 00 01 00 
       1B 48 04 47 
       01 00       
0440C3 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_turret_200, 328
       00 00 10 00 
       00 00 01 00 
       34 48 04 48 
       01 00       
0440D5 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_turret_208, 329
       00 00 10 00 
       00 00 01 00 
       4D 48 04 49 
       01 00       
0440E7 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_turret_216, 330
       00 00 10 00 
       00 00 01 00 
       66 48 04 4A 
       01 00       
0440F9 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_turret_224, 331
       00 00 10 00 
       00 00 01 00 
       7F 48 04 4B 
       01 00       
04410B 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_turret_232, 332
       00 00 10 00 
       00 00 01 00 
       98 48 04 4C 
       01 00       
04411D 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_turret_240, 333
       00 00 10 00 
       00 00 01 00 
       B1 48 04 4D 
       01 00       
04412F 01 00 00 10 0165*  	dl 1, 16, 16, 256, fn_turret_248, 334
       00 00 10 00 
       00 00 01 00 
       CA 48 04 4E 
       01 00       
044141             0166*  
044141             0167*  ; files_list: ; filename:
044141 73 70 72 69 0168*  fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
044156 73 70 72 69 0169*  fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
044170 73 70 72 69 0170*  fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
04418A 73 70 72 69 0171*  fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
0441A4 73 70 72 69 0172*  fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
0441BE 73 70 72 69 0173*  fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
0441D8 73 70 72 69 0174*  fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
0441F1 73 70 72 69 0175*  fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
04420A 73 70 72 69 0176*  fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
044220 73 70 72 69 0177*  fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
044236 73 70 72 69 0178*  fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
044248 73 70 72 69 0179*  fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044261 73 70 72 69 0180*  fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
04427A 73 70 72 69 0181*  fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044293 73 70 72 69 0182*  fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0442AC 73 70 72 69 0183*  fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0442C5 73 70 72 69 0184*  fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0442DE 73 70 72 69 0185*  fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0442F7 73 70 72 69 0186*  fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044310 73 70 72 69 0187*  fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044329 73 70 72 69 0188*  fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044342 73 70 72 69 0189*  fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
04435B 73 70 72 69 0190*  fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044374 73 70 72 69 0191*  fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
04438D 73 70 72 69 0192*  fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0443A6 73 70 72 69 0193*  fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0443BF 73 70 72 69 0194*  fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0443D8 73 70 72 69 0195*  fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0443F1 73 70 72 69 0196*  fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
04440A 73 70 72 69 0197*  fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044423 73 70 72 69 0198*  fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
04443C 73 70 72 69 0199*  fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
044455 73 70 72 69 0200*  fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
04446E 73 70 72 69 0201*  fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044487 73 70 72 69 0202*  fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
0444A0 73 70 72 69 0203*  fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0444B9 73 70 72 69 0204*  fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0444D2 73 70 72 69 0205*  fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0444EB 73 70 72 69 0206*  fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044504 73 70 72 69 0207*  fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
04451D 73 70 72 69 0208*  fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044536 73 70 72 69 0209*  fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
04454F 73 70 72 69 0210*  fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044568 73 70 72 69 0211*  fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
04457E 73 70 72 69 0212*  fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
044594 73 70 72 69 0213*  fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
0445AA 73 70 72 69 0214*  fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
0445C3 73 70 72 69 0215*  fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0445DC 73 70 72 69 0216*  fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0445F5 73 70 72 69 0217*  fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
04460E 73 70 72 69 0218*  fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044627 73 70 72 69 0219*  fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044640 73 70 72 69 0220*  fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044659 73 70 72 69 0221*  fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044672 73 70 72 69 0222*  fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04468B 73 70 72 69 0223*  fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0446A4 73 70 72 69 0224*  fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0446BD 73 70 72 69 0225*  fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0446D6 73 70 72 69 0226*  fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0446EF 73 70 72 69 0227*  fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044708 73 70 72 69 0228*  fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044721 73 70 72 69 0229*  fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
04473A 73 70 72 69 0230*  fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044753 73 70 72 69 0231*  fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
04476C 73 70 72 69 0232*  fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
044785 73 70 72 69 0233*  fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
04479E 73 70 72 69 0234*  fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0447B7 73 70 72 69 0235*  fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0447D0 73 70 72 69 0236*  fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0447E9 73 70 72 69 0237*  fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044802 73 70 72 69 0238*  fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04481B 73 70 72 69 0239*  fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
044834 73 70 72 69 0240*  fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04484D 73 70 72 69 0241*  fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
044866 73 70 72 69 0242*  fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
04487F 73 70 72 69 0243*  fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
044898 73 70 72 69 0244*  fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0448B1 73 70 72 69 0245*  fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0448CA 73 70 72 69 0246*  fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0448E3             0050       include "images_ui.inc"
0448E3             0001*  ; Generated by make_images.py
0448E3             0002*  
0448E3             0003*  ui_num_images: equ 4
0448E3             0004*  
0448E3             0005*  ; buffer_ids:
0448E3             0006*  BUF_BEZEL_L: equ 0
0448E3             0007*  BUF_BEZEL_R: equ 1
0448E3             0008*  BUF_SPLASH_BG: equ 2
0448E3             0009*  BUF_SPLASH_LOGO: equ 3
0448E3             0010*  
0448E3             0011*  ui_image_list: ; type; width; height; size; filename; bufferId:
0448E3 01 00 00 80 0012*  	dl 1, 128, 384, 49152, fn_bezel_l, 0
       00 00 80 01 
       00 00 C0 00 
       2B 49 04 00 
       00 00       
0448F5 01 00 00 80 0013*  	dl 1, 128, 384, 49152, fn_bezel_r, 1
       00 00 80 01 
       00 00 C0 00 
       3C 49 04 01 
       00 00       
044907 01 00 00 40 0014*  	dl 1, 320, 240, 76800, fn_splash_bg, 2
       01 00 F0 00 
       00 00 2C 01 
       4D 49 04 02 
       00 00       
044919 01 00 00 40 0015*  	dl 1, 320, 240, 76800, fn_splash_logo, 3
       01 00 F0 00 
       00 00 2C 01 
       60 49 04 03 
       00 00       
04492B             0016*  
04492B             0017*  ; files_list: ; filename:
04492B 75 69 2F 62 0018*  fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
04493C 75 69 2F 62 0019*  fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
04494D 75 69 2F 73 0020*  fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
044960 75 69 2F 73 0021*  fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
044975             0051       include "laser.inc"
044975             0001*  ; ##### LASER SPRITE PARAMETERS #####
044975             0002*  ; uses the same offsets from its table base as the main sprite table:
044975             0003*  laser_start_variables: ; label marking beginning of table
044975 11          0004*  laser_id:               db table_max_records+1
044976 00          0005*  laser_type:             db 0x00 ; 1 bytes currently not used
044977 08 01 00    0006*  laser_base_bufferId:    dl BUF_LASER_A ; 3 bytes bitmap bufferId
04497A 00 00 00    0007*  laser_move_program:     dl 0x000000 ; 3 bytes not currently used
04497D 00          0008*  laser_collisions:       db 0x00 ; 1 bytes uses sprite_alive and sprite_just_died flags
04497E 00          0009*  laser_dim_x:            db 0x00 ; 1 bytes sprite width in pixels
04497F 00          0010*  laser_dim_y:            db 0x00 ; 1 bytes sprite height in pixels
044980 00 00 00    0011*  laser_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
044983 00 00 00    0012*  laser_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
044986 00 00 00    0013*  laser_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
044989 00 F8 FF    0014*  laser_yvel:             dl 0xFFF800 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04498C 00 00 00    0015*  laser_vel:              dl 0x000000 ; 3 bytes not currently used
04498F 00 00 00    0016*  laser_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
044992 00 00 00    0017*  laser_orientation:      dl 0x000000 ; 3 bytes not currently used
044995 00          0018*  laser_animation:        db 0x00 ; 1 bytes current sprite animation frame
044996 00          0019*  laser_animation_timer:  db 0x00 ; 1 bytes decremented every frame, when zero, advance animation
044997 00          0020*  laser_move_timer:       db 0x00 ; 1 bytes not currently used
044998 00          0021*  laser_move_step:        db 0x00 ; 1 bytes not currently used
044999 00          0022*  laser_points:           db 0x00 ; 1 bytes not currently used
04499A 00          0023*  laser_shield_damage:    db 0x00 ; 1 bytes not currently used
04499B             0024*  laser_end_variables: ; for when we want to traverse this table in reverse
04499B             0025*  laser_speed: equ -6*256 ; 6 pixels per frame 16.8 fixed
04499B             0026*  laser_animation_timer_reset: equ 2 ; animate every two frames
04499B             0027*  
04499B             0028*  laser_control:
04499B             0029*  ; point to laser sprite variables
04499B FD 21 75 49 0030*      ld iy,laser_start_variables
       04          
0449A0 FD 22 C5 52 0031*      ld (table_pointer),iy
       04          
0449A5             0032*  ; did laser just die?
0449A5 FD CB 08 7E 0033*      bit sprite_just_died,(iy+sprite_collisions)
0449A9 C2 32 4A 04 0034*      jp nz,kill_laser
0449AD             0035*  ; select laser sprite
0449AD 3A 75 49 04 0036*      ld a,(laser_id)
0449B1 CD 72 19 04 0037*      call vdu_sprite_select
0449B5             0038*  ; update laser position
0449B5 CD 79 53 04 0039*      call move_sprite
0449B9             0040*  ; are we at top of screen?
0449B9 3A C9 52 04 0041*      ld a,(sprite_screen_edge)
0449BD E6 08       0042*      and collide_top
0449BF C2 32 4A 04 0043*      jp nz,kill_laser
0449C3             0044*  ; check animation timer
0449C3 FD 35 21    0045*      dec (iy+sprite_animation_timer)
0449C6 C2 D3 49 04 0046*      jp nz,@F
0449CA 3E 02       0047*      ld a,laser_animation_timer_reset
0449CC FD 77 21    0048*      ld (iy+sprite_animation_timer),a
0449CF CD B9 19 04 0049*      call vdu_sprite_next_frame
0449D3             0050*  @@: ; draw the sprite
0449D3 FD 07 0B    0051*      ld bc,(iy+sprite_x)
0449D6 FD 17 0E    0052*      ld de,(iy+sprite_y)
0449D9 CD 3E 1A 04 0053*      call vdu_sprite_move_abs168
0449DD             0054*  ; return to caller
0449DD C9          0055*      ret
0449DE             0056*  ; end laser_control
0449DE             0057*  
0449DE             0058*  fire_laser:
0449DE             0059*  ; point to laser sprite variables
0449DE FD 21 75 49 0060*      ld iy,laser_start_variables
       04          
0449E3 FD 22 C5 52 0061*      ld (table_pointer),iy
       04          
0449E8             0062*  ; is laser already active?
0449E8 FD CB 08 76 0063*      bit sprite_alive,(iy+sprite_collisions)
0449EC C0          0064*      ret nz ; laser already active
0449ED             0065*  ; otherwise,FIRE ZEE LASER!!1111
0449ED             0066*  ; set laser status to active
0449ED FD CB 08 F6 0067*      set sprite_alive,(iy+sprite_collisions)
0449F1             0068*  ; initialize laser sprite parameters
0449F1             0069*  ; x-coordinate
0449F1 DD 21 32 4F 0070*      ld ix,player_start_variables
       04          
0449F6 DD 27 0B    0071*      ld hl,(ix+sprite_x)
0449F9 11 00 05 00 0072*      ld de,5*256 ; horizontal center with player sprite
0449FD 19          0073*      add hl,de
0449FE FD 2F 0B    0074*      ld (iy+sprite_x),hl
044A01             0075*  ; y-coordinate
044A01 DD 27 0E    0076*      ld hl,(ix+sprite_y)
044A04 11 00 FA FF 0077*      ld de,-6*256 ; set laser y a few pixels above player
044A08 FD 2F 0E    0078*      ld (iy+sprite_y),hl
044A0B             0079*  ; set laser velocity
044A0B 21 00 FA FF 0080*      ld hl,laser_speed
044A0F FD 2F 14    0081*      ld (iy+sprite_yvel),hl
044A12             0082*  ; set laser animation frame and timer
044A12 AF          0083*      xor a ; first frame
044A13 FD 77 20    0084*      ld (iy+sprite_animation),a
044A16 3E 02       0085*      ld a,laser_animation_timer_reset
044A18 FD 77 21    0086*      ld (iy+sprite_animation_timer),a
044A1B             0087*  ; plot the sprite and make it visible
044A1B 3A 75 49 04 0088*      ld a,(laser_id)
044A1F CD 72 19 04 0089*      call vdu_sprite_select
044A23 FD 07 0B    0090*      ld bc,(iy+sprite_x)
044A26 FD 17 0E    0091*      ld de,(iy+sprite_y)
044A29 CD 3E 1A 04 0092*      call vdu_sprite_move_abs168
044A2D CD E8 19 04 0093*      call vdu_sprite_show
044A31             0094*  ; return to caller
044A31 C9          0095*      ret
044A32             0096*  ; end fire_laser
044A32             0097*  
044A32             0098*  kill_laser:
044A32             0099*  ; update status to inactive
044A32 AF          0100*      xor a ; zero out a
044A33 32 7D 49 04 0101*      ld (laser_collisions),a
044A37             0102*  ; hide the sprite
044A37 3A 75 49 04 0103*      ld a,(laser_id)
044A3B CD 72 19 04 0104*      call vdu_sprite_select
044A3F CD F6 19 04 0105*      call vdu_sprite_hide
044A43 C9          0106*      ret
044A44             0107*  ; end kill_laser
044A44             0052       include "levels.inc"
044A44             0001*  ; tileset indices
044A44             0002*  tiles_dg: equ 0
044A44             0003*  ; tiles_xevious: equ 1
044A44 00 00 00    0004*  tileset_ptr_idx: dl 0
044A47             0005*  tileset_ptrs:
044A47             0006*      ; dl tiles_xevious_levels
044A47 1B 4B 04    0007*      dl tileset_00_levels
044A4A 00 00 00    0008*  tileset_ptrs_end: dl 0 ; list terminator
044A4D             0009*  
044A4D             0010*  ; get a pointer to the current tileset
044A4D             0011*  ; inputs: tileset_ptr_idx
044A4D             0012*  ; returns: ix = pointer to tileset levels lut
044A4D             0013*  get_tileset_ptr:
044A4D 3A 44 4A 04 0014*      ld a,(tileset_ptr_idx)
044A51 57          0015*      ld d,a ; d = tileset index
044A52 1E 03       0016*      ld e,3 ; three bytes per index record
044A54 ED 5C       0017*      mlt de ; offset into tileset_ptrs lut
044A56 DD 21 47 4A 0018*      ld ix,tileset_ptrs
       04          
044A5B DD 19       0019*      add ix,de ; ix = pointer to tileset_ptrs record
044A5D C9          0020*      ret
044A5E             0021*  ; end get_tileset_ptr
044A5E             0022*  
044A5E             0023*  ; intialize a tileset
044A5E             0024*  ; inputs: a = index into tileset_ptrs
044A5E             0025*  init_tileset:
044A5E 32 44 4A 04 0026*      ld (tileset_ptr_idx),a ; store new tileset index
044A62 CD 4D 4A 04 0027*      call get_tileset_ptr ; ix = pointer to tileset_ptrs record
044A66 DD 37 00    0028*      ld ix,(ix) ; ix = pointer to tileset levels lut
044A69 DD 7E FF    0029*      ld a,(ix-1) ; number of levels in the tileset
044A6C 32 9C 4A 04 0030*      ld (num_levels),a
044A70 AF          0031*      xor a ; reset current level to zero
044A71 32 9B 4A 04 0032*      ld (cur_level),a
044A75 C3 CD 4A 04 0033*      jp init_level
044A79             0034*  ; end init_tileset
044A79             0035*  
044A79             0036*  next_tileset:
044A79 21 44 4A 04 0037*      ld hl,tileset_ptr_idx
044A7D 34          0038*      inc (hl) ; bump to next index
044A7E CD 4D 4A 04 0039*      call get_tileset_ptr ; ix = pointer to tileset_ptrs record
044A82 DD 27 00    0040*      ld hl,(ix) ; ix = pointer to tileset levels lut
044A85             0041*      sign_hlu ; check for list terminator (0)
044A85 19          0001*M     add hl,de
044A86 B7          0002*M     or a
044A87 ED 52       0003*M     sbc hl,de
044A89 C2 97 4A 04 0042*      jp nz,@F ; not end of list
044A8D 3E FF       0043*      ld a,-1 ; will wrap around to zero on the next iteration
044A8F 32 44 4A 04 0044*      ld (tileset_ptr_idx),a
044A93 C3 79 4A 04 0045*      jp next_tileset ; try again
044A97             0046*  @@:
044A97 C3 5E 4A 04 0047*      jp init_tileset
044A9B             0048*  ; end next_tileset
044A9B             0049*  
044A9B 00          0050*  cur_level: db 0
044A9C 00          0051*  num_levels: db 0
044A9D             0052*  
044A9D             0053*  ; get a pointer to the current level lookup record
044A9D             0054*  ; inputs: tileset_ptr_idx, cur_level
044A9D             0055*  ; returns: ix = pointer to level definition
044A9D             0056*  get_level_ptr:
044A9D CD 4D 4A 04 0057*      call get_tileset_ptr
044AA1 DD 37 00    0058*      ld ix,(ix) ; ix = pointer to tileset levels lut
044AA4 3A 9B 4A 04 0059*      ld a,(cur_level)
044AA8 57          0060*      ld d,a ; d = level index
044AA9 1E 03       0061*      ld e,3 ; three bytes per level record
044AAB ED 5C       0062*      mlt de ; offset into tileset levels lut
044AAD DD 19       0063*      add ix,de ; ix = pointer to level record
044AAF C9          0064*      ret
044AB0             0065*  ; end get_level_ptr
044AB0             0066*  
044AB0             0067*  ; advance to the next level in the current tileset
044AB0             0068*  ; inputs: tileset_ptr_idx, cur_level
044AB0             0069*  next_level:
044AB0 21 9B 4A 04 0070*      ld hl,cur_level
044AB4 34          0071*      inc (hl) ; bump to next level
044AB5 CD 9D 4A 04 0072*      call get_level_ptr ; ix points to current level lookup record
044AB9 DD 27 00    0073*      ld hl,(ix) ; hl = pointer to next level lookup record
044ABC             0074*      sign_hlu ; check for list terminator (0)
044ABC 19          0001*M     add hl,de
044ABD B7          0002*M     or a
044ABE ED 52       0003*M     sbc hl,de
044AC0 C2 CD 4A 04 0075*      jp nz,@F ; not end of list
044AC4 AF          0076*      xor a ; reset level to zero
044AC5 32 9B 4A 04 0077*      ld (cur_level),a
044AC9 C3 79 4A 04 0078*      jp next_tileset ; try next tileset
044ACD             0079*  @@: ; fall through to init_level
044ACD             0080*  ; end next_level
044ACD             0081*  
044ACD             0082*  ; inputs: ix pointed to tileset level definition
044ACD             0083*  init_level:
044ACD CD 9D 4A 04 0084*      call get_level_ptr ; ix points to level lookup record
044AD1 DD 37 00    0085*      ld ix,(ix) ; ix points to level definition
044AD4             0086*  ; set tiles_cols
044AD4 DD 7E 00    0087*      ld a,(ix+0)
044AD7 32 B9 55 04 0088*      ld (tiles_cols),a
044ADB             0089*  ; set tiles_row counter
044ADB DD 7E 01    0090*      ld a,(ix+1)
044ADE 32 B6 55 04 0091*      ld (tiles_row),a
044AE2             0092*  ; set cur_baseBufferId
044AE2 DD 27 04    0093*      ld hl,(ix+4)
044AE5 22 BA 55 04 0094*      ld (cur_baseBufferId),hl
044AE9             0095*  ; set tiles_row_defs
044AE9 ED 32 07    0096*      lea ix,ix+7 ; ix points to definition of first tile of first row
044AEC DD 22 B3 55 0097*      ld (tiles_row_defs),ix
       04          
044AF1             0098*  
044AF1             0099*  ; print level
044AF1             0100*  level_x: equ 0
044AF1             0101*  level_y: equ 0
044AF1 0E 00       0102*      ld c,level_x
044AF3 06 00       0103*      ld b,level_y
044AF5 CD 74 14 04 0104*      call vdu_move_cursor
044AF9 CD 70 00 04 0105*      call printInline
044AFD 4C 65 76 65 0106*      asciz "Level: "
       6C 3A 20 00 
044B05 3A 9B 4A 04 0107*      ld a,(cur_level)
044B09 CD BA 00 04 0108*      call printHexA
044B0D CD 8C 00 04 0109*      call printNewLine
044B11 2A BA 55 04 0110*      ld hl,(cur_baseBufferId)
044B15 CD 76 01 04 0111*      call printDec
044B19             0112*  
044B19             0113*  ; ; DEBUG
044B19             0114*  ;     call dumpRegistersHex
044B19             0115*  ;     call waitKeypress
044B19             0116*  ; ; END DEBUG
044B19             0117*  
044B19             0118*  ; ; draw initial background tiles
044B19             0119*  ; ; TODO: make this a stars background
044B19             0120*  ;     ld hl,BUF_STATION_BG_00
044B19             0121*  ;     call vdu_buff_select
044B19             0122*  ;     ld bc,0
044B19             0123*  ;     ld de,field_top
044B19             0124*  ;     call vdu_plot_bmp
044B19             0125*  
044B19             0126*  ;     ld hl,BUF_STATION_BG_01
044B19             0127*  ;     call vdu_buff_select
044B19             0128*  ;     ld bc,0
044B19             0129*  ;     ld de,field_top+256
044B19             0130*  ;     call vdu_plot_bmp
044B19             0131*  
044B19 C9          0132*      ret
044B1A             0133*  ; end init_level
044B1A             0053       include "levels_tileset_0.inc"
044B1A             0001*  ; Generated from tiles/dg/dg0_00.tmx
044B1A             0002*  
044B1A 01          0003*  tileset_00_num_levels: db 1
044B1B             0004*  
044B1B             0005*  tileset_00_levels:
044B1B 21 4B 04    0006*  	dl tileset_00_level_00
044B1E 00 00 00    0007*  	dl 0 ; list terminator
044B21             0008*  
044B21             0009*  tileset_00_level_00: ; Level 0
044B21 10          0010*  	db 16          ; num cols
044B22 40 00 00    0011*  	dl 64          ; num rows
044B25 00 02 00    0012*  	dl 512 ; base bufferId
044B28 00 00 00 65 0013*  	db 000,000,000,101,104,000,000,000,000,000,000,000,000,000,000,000
       68 00 00 00 
       00 00 00 00 
       00 00 00 00 
044B38 00 00 75 73 0014*  	db 000,000,117,115,116,120,000,000,000,000,000,000,000,000,000,000
       74 78 00 00 
       00 00 00 00 
       00 00 00 00 
044B48 00 65 71 72 0015*  	db 000,101,113,114,113,114,104,000,000,000,000,000,000,000,000,000
       71 72 68 00 
       00 00 00 00 
       00 00 00 00 
044B58 75 73 61 73 0016*  	db 117,115,097,115,116,098,116,120,000,000,000,000,000,000,000,000
       74 62 74 78 
       00 00 00 00 
       00 00 00 00 
044B68 67 63 71 63 0017*  	db 103,099,113,099,100,114,100,102,000,000,000,001,000,000,000,000
       64 72 64 66 
       00 00 00 01 
       00 00 00 00 
044B78 00 77 61 62 0018*  	db 000,119,097,098,097,098,118,000,000,000,000,000,000,000,000,000
       61 62 76 00 
       00 00 00 00 
       00 00 00 00 
044B88 00 00 67 63 0019*  	db 000,000,103,099,100,102,000,000,000,000,000,000,000,000,000,000
       64 66 00 00 
       00 00 00 00 
       00 00 00 00 
044B98 00 05 00 77 0020*  	db 000,005,000,119,118,000,000,000,000,000,000,000,000,000,000,000
       76 00 00 00 
       00 00 00 00 
       00 00 00 00 
044BA8 00 00 00 00 0021*  	db 000,000,000,000,000,000,000,081,082,053,040,054,083,084,000,000
       00 00 00 51 
       52 35 28 36 
       53 54 00 00 
044BB8 51 52 35 36 0022*  	db 081,082,053,054,083,084,000,065,066,037,040,038,067,068,000,000
       53 54 00 41 
       42 25 28 26 
       43 44 00 00 
044BC8 41 42 25 26 0023*  	db 065,066,037,038,067,068,000,085,086,000,000,000,085,086,000,000
       43 44 00 55 
       56 00 00 00 
       55 56 00 00 
044BD8 55 56 00 00 0024*  	db 085,086,000,000,085,086,000,055,056,000,001,000,055,056,000,000
       55 56 00 37 
       38 00 01 00 
       37 38 00 00 
044BE8 45 46 00 00 0025*  	db 069,070,000,000,069,070,000,069,070,000,000,000,069,070,000,000
       45 46 00 45 
       46 00 00 00 
       45 46 00 00 
044BF8 31 32 35 36 0026*  	db 049,050,053,054,051,052,000,049,050,053,040,054,051,052,000,000
       33 34 00 31 
       32 35 28 36 
       33 34 00 00 
044C08 21 22 25 26 0027*  	db 033,034,037,038,035,036,000,033,034,037,040,038,035,036,000,000
       23 24 00 21 
       22 25 28 26 
       23 24 00 00 
044C18 00 00 00 00 0028*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C28 00 00 00 00 0029*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C38 00 00 00 00 0030*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C48 00 00 00 00 0031*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C58 00 00 00 00 0032*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C68 00 00 01 00 0033*  	db 000,000,001,000,000,000,000,000,000,000,000,000,005,000,000,000
       00 00 00 00 
       00 00 00 00 
       05 00 00 00 
044C78 00 00 00 00 0034*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C88 00 00 00 00 0035*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C98 00 00 00 00 0036*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CA8 00 00 00 00 0037*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CB8 00 00 00 00 0038*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CC8 00 00 00 00 0039*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CD8 00 00 00 00 0040*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CE8 00 00 00 00 0041*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CF8 00 00 00 00 0042*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D08 00 00 00 00 0043*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D18 00 00 05 00 0044*  	db 000,000,005,000,000,000,000,000,000,000,000,000,000,001,000,000
       00 00 00 00 
       00 00 00 00 
       00 01 00 00 
044D28 00 00 00 00 0045*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D38 00 00 00 00 0046*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D48 00 00 00 00 0047*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D58 00 00 00 00 0048*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D68 00 00 00 00 0049*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D78 00 00 00 00 0050*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D88 00 00 00 00 0051*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D98 00 00 00 00 0052*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044DA8 00 00 00 00 0053*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044DB8 00 00 00 00 0054*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044DC8 00 00 01 00 0055*  	db 000,000,001,000,000,000,000,000,000,000,000,000,005,000,000,000
       00 00 00 00 
       00 00 00 00 
       05 00 00 00 
044DD8 00 00 00 00 0056*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044DE8 00 00 00 00 0057*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044DF8 00 00 00 00 0058*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E08 00 00 00 00 0059*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E18 00 00 00 00 0060*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E28 00 00 00 00 0061*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E38 00 00 00 00 0062*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E48 00 00 00 00 0063*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E58 00 00 00 00 0064*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E68 00 05 00 00 0065*  	db 000,005,000,000,000,000,000,000,000,000,000,000,000,005,000,000
       00 00 00 00 
       00 00 00 00 
       00 05 00 00 
044E78 00 00 00 00 0066*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E88 00 00 00 00 0067*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E98 00 00 00 00 0068*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044EA8 00 00 00 00 0069*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044EB8 00 00 00 00 0070*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044EC8 00 00 00 00 0071*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044ED8 00 00 00 00 0072*  	db 000,000,000,000,001,000,000,000,000,000,000,001,000,000,000,000
       01 00 00 00 
       00 00 00 01 
       00 00 00 00 
044EE8 00 00 00 00 0073*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044EF8 00 00 00 00 0074*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044F08 00 00 00 00 0075*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044F18 00 00 05 00 0076*  	db 000,000,005,000,000,000,000,005,000,000,000,000,000,005,000,000
       00 00 00 05 
       00 00 00 00 
       00 05 00 00 
044F28             0054       ; include "levels_xevious.inc"
044F28             0055       include "player.inc"
044F28             0001*  ; ######## GAME STATE VARIABLES #######
044F28             0002*  ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
044F28 00 00 00    0003*  player_score: dl 0 ; integer
044F2B             0004*  ; player current shields,binary
044F2B             0005*  ; when < 0 player splodes
044F2B             0006*  ; restores to player_max_shields when new ship spawns
044F2B 10 00 00    0007*  player_shields: dl 16 ; integer
044F2E             0008*  ; max player shields,binary
044F2E             0009*  ; can increase with power-ups (todo)
044F2E 10 00 00    0010*  player_max_shields: dl 16 ; integer
044F31             0011*  ; when reaches zero,game ends
044F31             0012*  ; can increase based on TODO
044F31 03          0013*  player_ships: db 3 ; integer
044F32             0014*  
044F32             0015*  speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
044F32             0016*  
044F32             0017*  ; ######### PLAYER SPRITE PARAMETERS ##########
044F32             0018*  ; uses the same offsets from its table base as the main sprite table:
044F32             0019*  player_start_variables: ; label marking beginning of table
044F32 10          0020*  player_id:               db table_max_records
044F33 00          0021*  player_type:             db     0x00 ; 1 bytes currently not used
044F34 2B 01 00    0022*  player_base_bufferId:    dl BUF_SHIP_0L ; 3 bytes bitmap bufferId
044F37 00 00 00    0023*  player_move_program:     dl 0x000000 ; 3 bytes not currently used
044F3A 00          0024*  player_collisions:       db     0x00 ; 1 bytes uses sprite_alive and sprite_just_died flags
044F3B 00          0025*  player_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
044F3C 00          0026*  player_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
044F3D 00 00 00    0027*  player_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
044F40 00 00 00    0028*  player_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
044F43 00 00 00    0029*  player_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
044F46 00 00 00    0030*  player_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
044F49 00 00 00    0031*  player_vel:              dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
044F4C 00 00 00    0032*  player_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
044F4F 00 00 00    0033*  player_orientation:      dl 0x000000 ; 3 bytes not currently used
044F52 00          0034*  player_animation:        db     0x00 ; 1 bytes not currently used
044F53 00          0035*  player_animation_timer:  db     0x00 ; 1 bytes not currently used
044F54 00          0036*  player_move_timer:       db     0x00 ; 1 bytes not currently used
044F55 00          0037*  player_move_step:        db     0x00 ; 1 bytes not currently used
044F56 00          0038*  player_points:           db     0x00 ; 1 bytes not currently used
044F57 00          0039*  player_shield_damage:    db     0x00 ; 1 bytes not currently used
044F58             0040*  player_end_variables: ; for when we want to traverse this table in reverse
044F58             0041*  
044F58             0042*  ; set initial player position
044F58             0043*  ; inputs: none,everything is hardcoded
044F58             0044*  ; outputs: player_x/y set to bottom-left corner of screen
044F58             0045*  ; destroys: a
044F58             0046*  player_init:
044F58 3A 32 4F 04 0047*  	ld a,(player_id)
044F5C CD 72 19 04 0048*  	call vdu_sprite_select
044F60 CD 85 19 04 0049*      call vdu_sprite_clear_frames
044F64 21 2B 01 00 0050*      ld hl,BUF_SHIP_0L
044F68 CD C7 1A 04 0051*      call vdu_sprite_add_buff
044F6C 21 2C 01 00 0052*      ld hl,BUF_SHIP_1C
044F70 CD C7 1A 04 0053*      call vdu_sprite_add_buff
044F74 21 2D 01 00 0054*      ld hl,BUF_SHIP_2R
044F78 CD C7 1A 04 0055*      call vdu_sprite_add_buff
044F7C 01 00 00 00 0056*      ld bc,0
044F80 ED 43 3D 4F 0057*      ld (player_x),bc
       04          
044F85 11 00 6F 01 0058*      ld de,sprite_bottom*256 ; max sprite y-coordinate
044F89 ED 53 40 4F 0059*      ld (player_y),de
       04          
044F8E CD 3E 1A 04 0060*      call vdu_sprite_move_abs168
044F92 CD E8 19 04 0061*      call vdu_sprite_show
044F96 21 44 55 04 0062*      ld hl,player_alive
044F9A 22 36 55 04 0063*      ld (player_state),hl
044F9E 21 3A 4F 04 0064*      ld hl,player_collisions
044FA2 CB F6       0065*      set sprite_alive,(hl)
044FA4 C9          0066*      ret
044FA5             0067*  
044FA5             0068*  ; process player keyboard input, set player bitmap
044FA5             0069*  ; velocities and draw player bitmap at updated coordinates
044FA5             0070*  ; Inputs: player_x/y set at desired position
044FA5             0071*  ; Returns: player bitmap drawn at updated position
044FA5             0072*  ; Destroys: probably everything except maybe iy
044FA5             0073*  ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
044FA5             0074*  ; TODO: requires sprite implementation
044FA5             0075*  player_input:
044FA5             0076*  ; ; did we die last frame?
044FA5             0077*  ;     ld a,(player_collisions)
044FA5             0078*  ;     and %00000010 ; zero flag will be set if not dead
044FA5             0079*  ;     jr z,player_not_dead
044FA5             0080*  ; ; yes we died
044FA5             0081*  ;     call kill_player
044FA5             0082*  ;     ret ; done
044FA5             0083*  player_not_dead: ; yay we didn't die
044FA5             0084*  ; reset player component velocities to zero as the default
044FA5 21 00 00 00 0085*  	ld hl,0
044FA9 22 43 4F 04 0086*  	ld (player_xvel),hl
044FAD 22 46 4F 04 0087*  	ld (player_yvel),hl
044FB1             0088*  ; make ship the active sprite
044FB1 3A 32 4F 04 0089*      ld a,(player_id)
044FB5 CD 72 19 04 0090*      call vdu_sprite_select
044FB9             0091*  ; check for keypresses and branch accordingly
044FB9             0092*  ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
044FB9             0093*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
044FB9 3E 1E       0001*M 			LD	A, function
044FBB 5B CF       0002*M 			RST.LIL	08h
044FBD             0094*  ; we test all four arrow keys and add/subract velocities accordingly
044FBD             0095*  ; this handles the case where two opposing movement keys
044FBD             0096*  ; are down simultaneously (velocities will net to zero)
044FBD             0097*  ; and allows diagonal movement when a vertical and horizontal key are down
044FBD             0098*  ; it also allows movement and action keys to be detected simultaneously
044FBD             0099*  ; so we can walk and chew gum at the same time
044FBD 3E 01       0100*      ld a,1 ; set ship's default animation to center
044FBF             0101*          ; if left and right are both down a will net to
044FBF             0102*  
044FBF             0103*  ; 99 Space: fire main weapon
044FBF DD CB 0C 56 0104*      bit 2,(ix+12)
044FC3 F5          0105*      push af ; save flags for after player movement processed
044FC4             0106*  ; 26 Left: move player left
044FC4 DD CB 03 4E 0107*      bit 1,(ix+3)
044FC8 CA DA 4F 04 0108*      jp z,@F
044FCC 2A 43 4F 04 0109*      ld hl,(player_xvel)
044FD0 01 00 FD FF 0110*      ld bc,-speed_player
044FD4 09          0111*      add hl,bc
044FD5 22 43 4F 04 0112*      ld (player_xvel),hl
044FD9 3D          0113*      dec a ; set ship's animation to left
044FDA             0114*  @@:
044FDA             0115*  ; 122 Right: move player right
044FDA DD CB 0F 4E 0116*      bit 1,(ix+15)
044FDE CA F0 4F 04 0117*  	jp z,@F
044FE2 2A 43 4F 04 0118*      ld hl,(player_xvel)
044FE6 01 00 03 00 0119*      ld bc,speed_player
044FEA 09          0120*      add hl,bc
044FEB 22 43 4F 04 0121*      ld (player_xvel),hl
044FEF 3C          0122*      inc a ; set ship's animation to right
044FF0             0123*  @@:
044FF0             0124*  ; 58 Up: move player up
044FF0 DD CB 07 4E 0125*      bit 1,(ix+7)
044FF4 CA 05 50 04 0126*  	jp z,@F
044FF8 2A 46 4F 04 0127*      ld hl,(player_yvel)
044FFC 01 00 FD FF 0128*      ld bc,-speed_player
045000 09          0129*      add hl,bc
045001 22 46 4F 04 0130*      ld (player_yvel),hl
045005             0131*  @@:
045005             0132*  ; 42 Down: move player down
045005 DD CB 05 4E 0133*      bit 1,(ix+5)
045009 CA 1A 50 04 0134*  	jp z,@F
04500D 2A 46 4F 04 0135*      ld hl,(player_yvel)
045011 01 00 03 00 0136*      ld bc,speed_player
045015 09          0137*      add hl,bc
045016 22 46 4F 04 0138*      ld (player_yvel),hl
04501A             0139*  @@:
04501A             0140*  ; a should land here loaded with the correct frame
04501A CD D5 19 04 0141*      call vdu_sprite_select_frame
04501E             0142*  ; draw player at updated position
04501E FD 21 32 4F 0143*      ld iy,player_start_variables
       04          
045023 FD 22 C5 52 0144*      ld (table_pointer),iy
       04          
045028 CD 79 53 04 0145*      call move_sprite
04502C ED 4B 3D 4F 0146*      ld bc,(player_x)
       04          
045031 ED 5B 40 4F 0147*      ld de,(player_y)
       04          
045036 CD 3E 1A 04 0148*  	call vdu_sprite_move_abs168
04503A             0149*  ; process player laser fire
04503A F1          0150*      pop af ; restore flags from spacebar check
04503B C2 DE 49 04 0151*      jp nz,fire_laser ; will return to caller from there
04503F C9          0152*      ret
045040             0153*  ; end player_input
045040             0154*  
045040             0155*  ; ###################################################################
045040             0156*  ; TODO: the below is all stuff from the original code we need to port
045040             0157*  ; ###################################################################
045040             0158*  
045040             0159*  kill_player:
045040             0160*  ; ; set player status to dead
045040             0161*  ;     xor a; sets all player flags to zero
045040             0162*  ;     ld (player_collisions),a
045040             0163*  ; ; deduct a ship from the inventory
045040             0164*  ;     ld a,(player_ships)
045040             0165*  ;     dec a
045040             0166*  ;     ld (player_ships),a
045040             0167*  ; ; are we out of ships?
045040             0168*  ;     jp z,game_over
045040             0169*  ; ; wait a few ticks
045040             0170*  ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
045040             0171*  ;     ld (player_move_timer),a
045040             0172*  ; kill_player_loop:
045040             0173*  ;     call vdu_vblank
045040             0174*  ;     ld a,(player_move_timer)
045040             0175*  ;     dec a
045040             0176*  ;     ld (player_move_timer),a
045040             0177*  ;     jr nz,kill_player_loop
045040             0178*  ;     call player_init ; player respawn if timer zero
045040 C9          0179*      ret ; and out
045041             0180*  
045041             0181*  ; draws the player's shields level
045041             0182*  ; draw_shields:
045041             0183*  ; TODO: Agonize this routine
045041             0184*  ; ; prep the loop to draw the bars
045041             0185*  ;     ld a,(player_shields) ; snag shields
045041             0186*  ;     and a
045041             0187*  ;     ret z ; don't draw if zero shields
045041             0188*  ; ; set loop counter and drawing position
045041             0189*  ;     ld b,a ; loop counter
045041             0190*  ;     ld hl,#5300+48+12
045041             0191*  ; ; set color based on bars remaining
045041             0192*  ;     ld c,103 ; bright green 28fe0a
045041             0193*  ;     cp 9
045041             0194*  ;     jp p,draw_shields_loop
045041             0195*  ;     ld c,74 ; bright yellow eafe5b
045041             0196*  ;     cp 3
045041             0197*  ;     jp p,draw_shields_loop
045041             0198*  ;     ld c,28 ; bright red fe0a0a
045041             0199*  ; draw_shields_loop:
045041             0200*  ;     push bc ; yup,outta
045041             0201*  ;     push hl ; registers again
045041             0202*  ;     ; ld a,#A8 ; ▀,168
045041             0203*  ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
045041             0204*  ;     ; call draw_char
045041             0205*  ;     call draw_num ; we nuked draw_char for the time being
045041             0206*  ;     pop hl
045041             0207*  ;     ld a,8
045041             0208*  ;     add a,l
045041             0209*  ;     ld l,a
045041             0210*  ;     pop bc
045041             0211*  ;     djnz draw_shields_loop
045041             0212*      ; ret
045041             0213*  
045041             0214*  score_x: equ 0
045041             0215*  score_y: equ 3
045041             0216*  ; prints the player's score
045041             0217*  print_score:
045041             0218*  ; DEBUG
045041 0E 00       0219*      ld c,score_x
045043 06 02       0220*      ld b,score_y-1
045045 CD 74 14 04 0221*      call vdu_move_cursor
045049 CD 70 00 04 0222*      call printInline
04504D 53 63 6F 72 0223*      asciz "Score:"
       65 3A 00    
045054             0224*  ; END DEBUG
045054 0E 00       0225*      ld c,score_x
045056 06 03       0226*      ld b,score_y
045058 CD 74 14 04 0227*      call vdu_move_cursor
04505C 2A 28 4F 04 0228*      ld hl,(player_score)
045060 CD 76 01 04 0229*      call printDec
045064 C9          0230*      ret
045065             0231*  
045065             0232*  ; draw_lives:
045065             0233*  ;     ld hl,player_small ; make small yellow ship the active sprite
045065             0234*  ;     ld (sprite_base_bufferId),hl
045065             0235*  ;     ; ld a,#80 ; northern orientation
045065             0236*  ;     ; ld (sprite_orientation),a
045065             0237*  ;     ld hl,0 ; north
045065             0238*  ;     ld (sprite_heading),hl
045065             0239*  ;     xor a
045065             0240*  ;     ld (sprite_animation),a
045065             0241*  ;     ld a,#56 ; top of visible screen
045065             0242*  ;     ld (sprite_y+1),a
045065             0243*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
045065             0244*  ;     ld a,(player_ships)
045065             0245*  ;     dec a ; we draw one fewer ships than lives
045065             0246*  ;     ret z ; nothing to draw here, move along
045065             0247*  ;     ld b,a ; loop counter
045065             0248*  ;     ld a,256-16 ; initial x position
045065             0249*  ; draw_lives_loop:
045065             0250*  ;     ld (sprite_x+1),a
045065             0251*  ;     push af
045065             0252*  ;     push bc
045065             0253*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
045065             0254*  ;     pop bc
045065             0255*  ;     pop af
045065             0256*  ;     sub 10
045065             0257*  ;     djnz draw_lives_loop
045065             0258*  ;     ret
045065             0056       include "sprites.inc"
045065             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
045065             0002*  table_bytes_per_record: equ 38 ; 38 bytes per sprite record
045065             0003*  sprite_id:              equ 00 ; 1 bytes unique spriteId, zero-based
045065             0004*  sprite_type:            equ 01 ; 1 bytes type of sprite as defined in enemies.inc
045065             0005*  sprite_base_bufferId:   equ 02 ; 3 bytes bitmap bufferId
045065             0006*  sprite_move_program:    equ 05 ; 3 bytes address of sprite's behavior subroutine
045065             0007*  sprite_collisions:      equ 08 ; 1 bytes see collisions.inc constants for bit definitions
045065             0008*  sprite_dim_x:           equ 09 ; 1 bytes sprite width in pixels
045065             0009*  sprite_dim_y:           equ 10 ; 1 bytes sprite height in pixels
045065             0010*  sprite_x:               equ 11 ; 3 bytes 16.8 fractional x position in pixels
045065             0011*  sprite_y:               equ 14 ; 3 bytes 16.8 fractional y position in pixels
045065             0012*  sprite_xvel:            equ 17 ; 3 bytes x-component velocity, 16.8 fixed, pixels
045065             0013*  sprite_yvel:            equ 20 ; 3 bytes y-component velocity, 16.8 fixed, pixels
045065             0014*  sprite_vel:             equ 23 ; 3 bytes velocity px/frame (16.8 fixed)
045065             0015*  sprite_heading:         equ 26 ; 3 bytes sprite movement direction deg256 16.8 fixed
045065             0016*  sprite_orientation:     equ 29 ; 3 bytes orientation bits
045065             0017*  sprite_animation:       equ 32 ; 1 bytes current animation index, zero-based
045065             0018*  sprite_animation_timer: equ 33 ; 1 bytes when hits zero, draw next animation
045065             0019*  sprite_move_timer:      equ 34 ; 1 bytes when zero, go to next move program, or step
045065             0020*  sprite_move_step:       equ 35 ; 1 bytes stage in a move program sequence, varies
045065             0021*  sprite_points:          equ 36 ; 1 bytes points awarded for killing this sprite type
045065             0022*  sprite_shield_damage:   equ 37 ; 1 bytes shield points deducted for collision
045065             0023*  
045065             0024*  ; ###### SPRITE TABLE VARIABLES ######
045065             0025*  ; maximum number of sprites
045065             0026*  table_max_records: equ 16 ; it can handle more but this is pushing it
045065             0027*  table_total_bytes: equ table_max_records*table_bytes_per_record
045065             0028*  
045065             0029*  ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
045065             0030*  table_base:
045065 00 00 00 00 0031*  sprite_start_variables:  blkb table_total_bytes, 0 ; fill with zeroes
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0452C5             0032*  sprite_end_variables: ; in case we want to traverse the table in reverse
0452C5             0033*  
0452C5             0034*  ; pointer to top address of current record, initialized to table_base
0452C5 65 50 04    0035*  table_pointer: dl table_base
0452C8             0036*  ; how many active sprites
0452C8 00          0037*  table_active_sprites: db 0x00
0452C9             0038*  ; flag indicating collision with screen edge
0452C9             0039*  ; uses orientation codes to specify which edge(s)
0452C9 00          0040*  sprite_screen_edge: db #00
0452CA             0041*  ; next sprite id to use
0452CA 00          0042*  sprite_next_id: db 0
0452CB             0043*  
0452CB             0044*  ; origin_top: equ 48
0452CB             0045*  origin_top: equ 0 ; DEBUG
0452CB             0046*  origin_left: equ 128
0452CB             0047*  field_top: equ 0
0452CB             0048*  field_bottom: equ 383-origin_top
0452CB             0049*  field_left: equ 0
0452CB             0050*  field_right: equ 255
0452CB             0051*  sprite_top: equ 0
0452CB             0052*  sprite_bottom: equ field_bottom-16
0452CB             0053*  sprite_left: equ field_left
0452CB             0054*  sprite_right: equ field_right-16
0452CB             0055*  
0452CB             0056*  ; ######### COLLISION SPRITE PARAMETERS ##########
0452CB             0057*  ; integer coordinates are all that are needed for collision calculations
0452CB 00          0058*  collision_x: db 0x00
0452CC 00          0059*  collision_y: db 0x00
0452CD 00          0060*  collision_dim_x: db 0x00
0452CE 00          0061*  collision_dim_y: db 0x00
0452CF             0062*  
0452CF             0063*  ; scratch variables
0452CF 00          0064*  x: db 0x00 ; 8-bit signed integer
0452D0 00          0065*  y: db 0x00 ; 8-bit signed integer
0452D1 00 00 00    0066*  x0: dl 0x000000 ; 16.8 signed fixed place
0452D4 00 00 00    0067*  y0: dl 0x000000 ; 16.8 signed fixed place
0452D7 00 00 00    0068*  incx1: dl 0x000000 ; 16.8 signed fixed place
0452DA 00 00 00    0069*  incy1: dl 0x000000 ; 16.8 signed fixed place
0452DD 00 00 00    0070*  incx2: dl 0x000000 ; 16.8 signed fixed place
0452E0 00 00 00    0071*  incy2: dl 0x000000 ; 16.8 signed fixed place
0452E3             0072*  
0452E3             0073*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
0452E3 00 00 00    0074*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
0452E6 00 00 00    0075*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
0452E9 00 00 00    0076*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
0452EC             0077*  
0452EC             0078*  ; gets the next available sprite id
0452EC             0079*  ; inputs; none
0452EC             0080*  ; returns: if new sprite available, a = sprite id,
0452EC             0081*  ;           ix pointing to new sprite vars, carry set
0452EC             0082*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
0452EC             0083*  ; destroys: a,b,hl,ix
0452EC             0084*  ; affects: bumps table_active_sprites by one
0452EC             0085*  table_get_next_id:
0452EC DD 21 65 50 0086*      ld ix,table_base
       04          
0452F1 11 26 00 00 0087*      ld de,table_bytes_per_record
0452F5 06 10       0088*      ld b,table_max_records
0452F7             0089*  @loop:
0452F7 DD 7E 01    0090*      ld a,(ix+sprite_type)
0452FA A7          0091*      and a
0452FB 28 06       0092*      jr z,@found
0452FD DD 19       0093*      add ix,de
0452FF 10 F6       0094*      djnz @loop
045301             0095*  @notfound:
045301 AF          0096*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
045302 C9          0097*      ret
045303             0098*  @found:
045303             0099*  ; bump number of active sprites
045303 21 C8 52 04 0100*      ld hl,table_active_sprites
045307 34          0101*      inc (hl)
045308             0102*  ; return sprite id
045308 3E 10       0103*      ld a,table_max_records
04530A 90          0104*      sub b
04530B 32 CA 52 04 0105*      ld (sprite_next_id),a
04530F 37          0106*      scf ; sets carry flag indicating we found a free sprite
045310 C9          0107*      ret ; done
045311             0108*  ; end table_get_next_id
045311             0109*  
045311             0110*  ; deactivate the sprite with the given id
045311             0111*  ; inputs: iy set to sprite record, vdu_sprite_select called
045311             0112*  ; outputs: nothing
045311             0113*  ; destroys: a,hl
045311             0114*  ; affects: decrements table_active_sprites by one
045311             0115*  table_deactivate_sprite:
045311 CD F6 19 04 0116*      call vdu_sprite_hide
045315 AF          0117*      xor a
045316 FD 77 01    0118*      ld (iy+sprite_type),a
045319 21 C8 52 04 0119*      ld hl,table_active_sprites
04531D 35          0120*      dec (hl)
04531E C9          0121*      ret
04531F             0122*  ; end table_deactivate_sprite
04531F             0123*  
04531F             0124*  sprites_init:
04531F             0125*  ; initialize sprites
04531F CD A6 1A 04 0126*  	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
045323 AF          0127*  	xor a
045324             0128*  @sprite_loop:
045324 F5          0129*  	push af
045325 CD 72 19 04 0130*  	call vdu_sprite_select
045329 21 00 01 00 0131*  	ld hl,BUF_CRATER ; can be anything, but why not blank?
04532D CD C7 1A 04 0132*  	call vdu_sprite_add_buff
045331 F1          0133*  	pop af
045332 3C          0134*  	inc a
045333 FE 12       0135*  	cp table_max_records+2 ; tack on sprites for player and laser
045335 20 ED       0136*  	jr nz,@sprite_loop
045337 3C          0137*  	inc a
045338 CD A6 19 04 0138*  	call vdu_sprite_activate
04533C             0139*  
04533C             0140*  ; define player sprite
04533C 3A 32 4F 04 0141*  	ld a,(player_id)
045340 CD 72 19 04 0142*  	call vdu_sprite_select
045344 CD 85 19 04 0143*  	call vdu_sprite_clear_frames
045348 21 2B 01 00 0144*  	ld hl,BUF_SHIP_0L
04534C 01 03 00 00 0145*  	ld bc,3 ; three bitmaps for player ship
045350             0146*  @sprite_player_loop:
045350 C5          0147*  	push bc
045351 E5          0148*  	push hl
045352 CD C7 1A 04 0149*  	call vdu_sprite_add_buff
045356 E1          0150*  	pop hl
045357 23          0151*  	inc hl
045358 C1          0152*  	pop bc
045359 10 F5       0153*  	djnz @sprite_player_loop
04535B             0154*  
04535B             0155*  ; define laser sprite
04535B 3A 75 49 04 0156*  	ld a,(laser_id)
04535F CD 72 19 04 0157*  	call vdu_sprite_select
045363 CD 85 19 04 0158*  	call vdu_sprite_clear_frames
045367 21 08 01 00 0159*  	ld hl,BUF_LASER_A
04536B 06 02       0160*  	ld b,2 ; two bitmaps for laser
04536D             0161*  @sprite_laser_loop:
04536D C5          0162*  	push bc
04536E E5          0163*  	push hl
04536F CD C7 1A 04 0164*  	call vdu_sprite_add_buff
045373 E1          0165*  	pop hl
045374 23          0166*  	inc hl
045375 C1          0167*  	pop bc
045376 10 F5       0168*  	djnz @sprite_laser_loop
045378             0169*  ; all done
045378 C9          0170*      ret
045379             0171*  ; end sprites_init
045379             0172*  
045379             0173*  ; compute a sprite's new position based on its component x,y velocities
045379             0174*  ; with screen boundary checking and update its sprite table record accordingly
045379             0175*  ; inputs: table_pointer set to sprite record
045379             0176*  ; returns: updated x, y positions and edge collision flags in sprite table record
045379             0177*  ; destroys: everything
045379             0178*  ; note: actual rendering of sprite must be handled by caller
045379             0179*  move_sprite:
045379 FD 2A C5 52 0180*      ld iy,(table_pointer)
       04          
04537E             0181*  ; x-axis movement
04537E FD 27 0B    0182*      ld hl,(iy+sprite_x)
045381 FD 17 11    0183*      ld de,(iy+sprite_xvel)
045384 19          0184*      add hl,de
045385 FD 2F 0B    0185*      ld (iy+sprite_x),hl
045388             0186*  ; y-axis movement
045388 FD 27 0E    0187*      ld hl,(iy+sprite_y)
04538B FD 17 14    0188*      ld de,(iy+sprite_yvel)
04538E 19          0189*      add hl,de
04538F FD 2F 0E    0190*      ld (iy+sprite_y),hl
045392             0191*  ; detect screen edge collisions
045392 AF          0192*      xor a ; reset screen edge collision flag and clear carry
045393 32 C9 52 04 0193*      ld (sprite_screen_edge),a
045397             0194*  ; y-axis first since we already have it in hl
045397 11 00 00 00 0195*      ld de,-sprite_top*256
04539B ED 5A       0196*      adc hl,de
04539D FA C7 53 04 0197*      jp m,@top
0453A1 ED 52       0198*      sbc hl,de ; hl back to original value
0453A3 11 00 91 FE 0199*      ld de,-sprite_bottom*256
0453A7 ED 5A       0200*      adc hl,de
0453A9 F2 D1 53 04 0201*      jp p,@bottom
0453AD             0202*  @xaxis:
0453AD FD 27 0B    0203*      ld hl,(iy+sprite_x)
0453B0 11 00 00 00 0204*      ld de,-sprite_left*256
0453B4 ED 5A       0205*      adc hl,de
0453B6 FA EC 53 04 0206*      jp m,@left
0453BA ED 52       0207*      sbc hl,de ; hl back to original value
0453BC 11 00 11 FF 0208*      ld de,-sprite_right*256
0453C0 ED 5A       0209*      adc hl,de
0453C2 F2 FA 53 04 0210*      jp p,@right
0453C6             0211*  ; no edge collisions so go home
0453C6 C9          0212*      ret
0453C7             0213*  @top:
0453C7 3E 08       0214*      ld a,collide_top
0453C9 21 00 00 00 0215*      ld hl,sprite_top*256
0453CD C3 D7 53 04 0216*      jp @collide_y
0453D1             0217*  @bottom:
0453D1 3E 04       0218*      ld a,collide_bottom
0453D3 21 00 6F 01 0219*      ld hl,sprite_bottom*256
0453D7             0220*  @collide_y:
0453D7 32 C9 52 04 0221*      ld (sprite_screen_edge),a
0453DB FD 2F 0E    0222*      ld (iy+sprite_y),hl
0453DE             0223*  ; reverse y-axis velocity
0453DE FD 27 14    0224*      ld hl,(iy+sprite_yvel)
0453E1 CD A4 06 04 0225*      call neg_hlu
0453E5 FD 2F 14    0226*      ld (iy+sprite_yvel),hl
0453E8             0227*  ; go check for x-axis collisions
0453E8 C3 AD 53 04 0228*      jp @xaxis
0453EC             0229*  @left:
0453EC 3A C9 52 04 0230*      ld a,(sprite_screen_edge)
0453F0 F6 02       0231*      or a,collide_left
0453F2 21 00 00 00 0232*      ld hl,sprite_left*256
0453F6 C3 04 54 04 0233*      jp @collide_x
0453FA             0234*  @right:
0453FA 3A C9 52 04 0235*      ld a,(sprite_screen_edge)
0453FE F6 01       0236*      or a,collide_right
045400 21 00 EF 00 0237*      ld hl,sprite_right*256
045404             0238*  @collide_x:
045404 32 C9 52 04 0239*      ld (sprite_screen_edge),a
045408 FD 2F 0B    0240*      ld (iy+sprite_x),hl
04540B             0241*  ; reverse x-axis velocity
04540B FD 27 11    0242*      ld hl,(iy+sprite_xvel)
04540E CD A4 06 04 0243*      call neg_hlu
045412 FD 2F 11    0244*      ld (iy+sprite_xvel),hl
045415             0245*  ; final collision flag to a and return
045415 3A C9 52 04 0246*      ld a,(sprite_screen_edge)
045419 C9          0247*      ret
04541A             0248*  ; end move_sprite
04541A             0249*  
04541A             0250*  sprite_compute_velocities:
04541A FD 2A C5 52 0251*      ld iy,(table_pointer)
       04          
04541F FD 17 17    0252*      ld de,(iy+sprite_vel)
045422 CD 52 09 04 0253*      call polar_to_cartesian
045426 FD 2A C5 52 0254*      ld iy,(table_pointer)
       04          
04542B FD 0F 11    0255*      ld (iy+sprite_xvel),bc ; save x-velocity component
04542E FD 1F 14    0256*      ld (iy+sprite_yvel),de ; save y-velocity component
045431 C9          0257*      ret
045432             0258*  ; end sprite_compute_velocities
045432             0259*  
045432             0260*  ; create a new sprite at the same location as an existing sprite
045432             0261*  ; inputs: iy = pointer to new sprite default settings, table_pointer = existing sprite
045432             0262*  spawn_sprite_from_sprite:
045432 CD EC 52 04 0263*      call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
045436 D0          0264*      ret nc ; no carry means no free sprite slots, so we go home
045437             0265*  ; copy default settings to new sprite
045437 FD E5       0266*      push iy ; pointer to new sprite defaults
045439 E1          0267*      pop hl ; address to copy from
04543A DD E5       0268*      push ix ; pointer to new sprite table record
04543C D1          0269*      pop de ; address to copy to
04543D 01 26 00 00 0270*      ld bc,table_bytes_per_record ; number of bytes to copy
045441 ED B0       0271*      ldir ; copies defaults to new sprite record
045443             0272*  ; copy sprite position, velocity and orientation from existing sprite
045443 FD 2A C5 52 0273*      ld iy,(table_pointer) ; pointer to current sprite record
       04          
045448 ED 33 0B    0274*      lea iy,iy+sprite_x ; bump pointer to copy from position
04544B FD E5       0275*      push iy
04544D E1          0276*      pop hl ; address to copy from
04544E DD E5       0277*      push ix
045450 D1          0278*      pop de ; address to copy to
045451 01 13 00 00 0279*      ld bc, sprite_orientation-sprite_x+1 ; number of bytes to copy
045455 C9          0280*      ret
045456             0281*  
045456             0282*  ; load a sprite with animation bitmaps
045456             0283*  ; inputs: a = sprite id, hl = base bufferId, b = number of frames
045456             0284*  sprite_load_frames:
045456             0285*  ; back up input parameters
045456 E5          0286*      push hl
045457 C5          0287*      push bc
045458 CD 72 19 04 0288*      call vdu_sprite_select
04545C CD 85 19 04 0289*      call vdu_sprite_clear_frames
045460 C1          0290*      pop bc ; = number of frames
045461 E1          0291*      pop hl ; = base bufferId
045462             0292*  @load_frames:
045462 C5          0293*      push bc ; back up loop counter
045463 E5          0294*      push hl ; back up base bufferId
045464 CD C7 1A 04 0295*      call vdu_sprite_add_buff
045468 E1          0296*      pop hl ; restore base bufferId
045469 23          0297*      inc hl ; bump it to the next frame
04546A C1          0298*      pop bc ; restore loop counter
04546B 10 F5       0299*      djnz @load_frames ; loop until all frames loaded
04546D C9          0300*      ret
04546E             0301*  ; end sprite_load_frames
04546E             0057       include "state.inc"
04546E             0001*  ; Game state variables
04546E 7C 54 04    0002*  game_state:  dl game_main_menu
045471             0003*  
045471             0004*  do_game:
045471 2A 6E 54 04 0005*      ld hl,(game_state)   ; Load the current game state
045475             0006*      callHL                ; Call the corresponding state handler
045475 01 7B 54 04 0001*M     ld bc,@F ; Address of first instruction after the jump
045479 C5          0002*M     push bc ; which constitutes the return address
04547A E9          0003*M     jp (hl) ; Jump to the address in HL
04547B             0004*M @@:
04547B C9          0007*      ret
04547C             0008*  
04547C             0009*  ; ========================
04547C             0010*  ; Main Game States
04547C             0011*  ; ========================
04547C             0012*  
04547C             0013*  game_main_menu:
04547C             0014*      ; Handle main menu options
04547C             0015*      ; Example: Check input for "Start Game"
04547C CD A6 55 04 0016*      call check_input_menu
045480 C2 85 54 04 0017*      jp nz, game_initialize ; Start game on selection
045484 C9          0018*      ret
045485             0019*  
045485             0020*  game_initialize:
045485             0021*  ; reset the sprite table
045485 AF          0022*      xor a
045486 32 C8 52 04 0023*      ld (table_active_sprites),a
04548A 21 65 50 04 0024*      ld hl,table_base
04548E 22 C5 52 04 0025*      ld (table_pointer),hl
045492             0026*  ; initialize sprites
045492 CD 1F 53 04 0027*      call sprites_init
045496             0028*  ; initialize the first level
045496 3E 00       0029*      ld a,tiles_dg
045498 CD 5E 4A 04 0030*      call init_tileset
04549C             0031*  ; initialize player
04549C 21 00 00 00 0032*      ld hl,0
0454A0 22 28 4F 04 0033*      ld (player_score),hl
0454A4 2A 2E 4F 04 0034*      ld hl,(player_max_shields)
0454A8 22 2B 4F 04 0035*      ld (player_shields),hl
0454AC 3E 03       0036*      ld a,3
0454AE 32 31 4F 04 0037*      ld (player_ships),a
0454B2 CD 58 4F 04 0038*      call player_init
0454B6             0039*  ; TODO: TEMPORARY UNTIL MAP LOGIC IMPLEMENTED
0454B6 21 60 55 04 0040*      ld hl,enemies_dead
0454BA 22 5D 55 04 0041*      ld (enemies_state),hl
0454BE             0042*  ; END TODO
0454BE             0043*  ; set the game state to playing
0454BE 21 C8 54 04 0044*      ld hl,game_playing
0454C2 22 6E 54 04 0045*      ld (game_state), hl
0454C6 C9          0046*      ret
0454C7             0047*  ; done initializing
0454C7 C9          0048*      ret
0454C8             0049*  
0454C8             0050*  game_playing:
0454C8             0051*  ; Main gameplay loop
0454C8 CD C3 55 04 0052*      call tiles_plot
0454CC CD 39 55 04 0053*      call do_player
0454D0 CD 52 55 04 0054*      call do_enemies
0454D4             0055*  ; update UI: TODO make this a standalone function
0454D4 CD 41 50 04 0056*      call print_score
0454D8 C9          0057*      ret
0454D9             0058*  
0454D9             0059*  game_paused:
0454D9             0060*      ; Pause menu logic
0454D9 CD A9 55 04 0061*      call check_input_pause
0454DD C2 C8 54 04 0062*      jp nz, game_playing ; Resume game
0454E1 CA 7C 54 04 0063*      jp z, game_main_menu ; Exit to main menu
0454E5 C9          0064*      ret
0454E6             0065*  
0454E6             0066*  game_level_transition:
0454E6             0067*      ; Handle level transitions
0454E6 CD AA 55 04 0068*      call load_next_level
0454EA 21 C8 54 04 0069*      ld hl, game_playing
0454EE 22 6E 54 04 0070*      ld (game_state), hl
0454F2 C9          0071*      ret
0454F3             0072*  
0454F3             0073*  game_over:
0454F3             0074*      ; Display game over screen
0454F3 CD AB 55 04 0075*      call display_game_over
0454F7 C2 7C 54 04 0076*      jp nz, game_main_menu ; Return to main menu on input
0454FB C9          0077*      ret
0454FC             0078*  
0454FC             0079*  game_victory:
0454FC             0080*      ; Display victory screen
0454FC CD AC 55 04 0081*      call display_victory
045500 C2 7C 54 04 0082*      jp nz, game_main_menu ; Return to main menu on input
045504 C9          0083*      ret
045505             0084*  
045505             0085*  ; ========================
045505             0086*  ; Supporting States
045505             0087*  ; ========================
045505             0088*  
045505             0089*  game_loading:
045505             0090*      ; Show loading screen while preparing assets
045505 CD AD 55 04 0091*      call load_resources
045509 21 85 54 04 0092*      ld hl, game_initialize
04550D 22 6E 54 04 0093*      ld (game_state), hl
045511 C9          0094*      ret
045512             0095*  
045512             0096*  game_cutscene:
045512             0097*      ; Play a non-interactive cutscene
045512 CD AE 55 04 0098*      call play_cutscene
045516 C2 C8 54 04 0099*      jp nz, game_playing ; Return to gameplay after cutscene
04551A C9          0100*      ret
04551B             0101*  
04551B             0102*  game_inventory:
04551B             0103*      ; Open inventory or shop
04551B CD AF 55 04 0104*      call display_inventory
04551F C2 C8 54 04 0105*      jp nz, game_playing ; Return to gameplay after inventory close
045523 C9          0106*      ret
045524             0107*  
045524             0108*  game_map:
045524             0109*      ; Display map or quest
045524 CD B0 55 04 0110*      call display_map
045528 C2 C8 54 04 0111*      jp nz, game_playing ; Return to gameplay after map close
04552C C9          0112*      ret
04552D             0113*  
04552D             0114*  game_exit:
04552D             0115*      ; Handle exit logic
04552D CD B1 55 04 0116*      call save_game
045531 C3 B2 55 04 0117*      jp exit_game         ; Safely shut down
045535 C9          0118*      ret
045536             0119*  
045536             0120*  ; ========================
045536             0121*  ; Sub-state branching (Example for player state)
045536             0122*  ; ========================
045536             0123*  
045536 44 55 04    0124*  player_state:  dl player_alive ; Player state variable
045539             0125*  
045539             0126*  do_player:
045539 2A 36 55 04 0127*      ld hl,(player_state)
04553D             0128*      callHL                ; Call the corresponding player state
04553D 01 43 55 04 0001*M     ld bc,@F ; Address of first instruction after the jump
045541 C5          0002*M     push bc ; which constitutes the return address
045542 E9          0003*M     jp (hl) ; Jump to the address in HL
045543             0004*M @@:
045543 C9          0129*      ret
045544             0130*  
045544             0131*  player_alive:
045544 CD A5 4F 04 0132*      call player_input     ; Handle player input
045548 CD 9B 49 04 0133*      call laser_control    ; Handle laser movement and collision detection
04554C C9          0134*      ret
04554D             0135*  
04554D             0136*  player_dead:
04554D CD 9B 49 04 0137*      call laser_control    ; Handle laser movement and collision detection
045551 C9          0138*      ret
045552             0139*  
045552             0140*  do_enemies:
045552 2A 5D 55 04 0141*      ld hl, (enemies_state)
045556             0142*      callHL
045556 01 5C 55 04 0001*M     ld bc,@F ; Address of first instruction after the jump
04555A C5          0002*M     push bc ; which constitutes the return address
04555B E9          0003*M     jp (hl) ; Jump to the address in HL
04555C             0004*M @@:
04555C C9          0143*      ret
04555D 60 55 04    0144*  enemies_state: dl enemies_dead
045560             0145*  enemies_dead:
045560 FD 21 85 55 0146*      ld iy,enemies_respawn_tmr
       04          
045565 21 F0 00 00 0147*      ld hl,120*2 ; 120ths of a second
045569 CD E1 13 04 0148*      call timestamp_tmr_set
04556D 21 76 55 04 0149*      ld hl,enemies_respawning
045571 22 5D 55 04 0150*      ld (enemies_state),hl
045575 C9          0151*      ret
045576             0152*  
045576             0153*  ; DEBUG: FOR TESTING UNTIL WE PROPERLY IMPLEMENT MAP LOGIC
045576             0154*  enemies_respawning:
045576 FD 21 85 55 0155*      ld iy,enemies_respawn_tmr
       04          
04557B CD EC 13 04 0156*      call timestamp_tmr_get
04557F F0          0157*      ret p ; not time to respawn yet
045580 CD 8B 55 04 0158*      call enemies_respawn
045584 C9          0159*      ret
045585             0160*  enemies_respawn_tmr: ds 6
04558B             0161*  
04558B             0162*  enemies_respawn:
04558B             0163*  ; initialize enemy sprites
04558B 3A 0E 1B 04 0164*      ld a,(max_enemy_sprites)
04558F 47          0165*      ld b,a ; loop counter
045590             0166*  @respawn_loop:
045590 C5          0167*      push bc
045591 CD 11 1C 04 0168*      call enemy_spawn_seeker
045595 C1          0169*      pop bc
045596 10 F8       0170*      djnz @respawn_loop
045598 21 A1 55 04 0171*      ld hl,enemies_alive
04559C 22 5D 55 04 0172*      ld (enemies_state),hl
0455A0 C9          0173*      ret
0455A1             0174*  ; END DEBUG
0455A1             0175*  
0455A1             0176*  enemies_alive:
0455A1 CD 0F 1B 04 0177*      call move_enemies
0455A5 C9          0178*      ret
0455A6             0179*  
0455A6             0180*  check_input_menu:
0455A6 C9          0181*      ret
0455A7             0182*  
0455A7             0183*  update_game_world:
0455A7 C9          0184*      ret
0455A8             0185*  
0455A8             0186*  check_game_events:
0455A8 C9          0187*      ret
0455A9             0188*  
0455A9             0189*  check_input_pause:
0455A9 C9          0190*      ret
0455AA             0191*  
0455AA             0192*  load_next_level:
0455AA C9          0193*      ret
0455AB             0194*  
0455AB             0195*  display_game_over:
0455AB C9          0196*      ret
0455AC             0197*  
0455AC             0198*  display_victory:
0455AC C9          0199*      ret
0455AD             0200*  
0455AD             0201*  load_resources:
0455AD C9          0202*      ret
0455AE             0203*  
0455AE             0204*  play_cutscene:
0455AE C9          0205*      ret
0455AF             0206*  
0455AF             0207*  display_inventory:
0455AF C9          0208*      ret
0455B0             0209*  
0455B0             0210*  display_map:
0455B0 C9          0211*      ret
0455B1             0212*  
0455B1             0213*  save_game:
0455B1 C9          0214*      ret
0455B2             0215*  
0455B2             0216*  exit_game:
0455B2 C9          0217*      ret
0455B3             0218*  
0455B3             0058       include "tiles.inc"
0455B3             0001*  ; ######### TILES #########
0455B3             0002*  ; TODO: implement buffering of tiles here when there isn't other stuff to do
0455B3             0003*  ; tiles_defs: ds 256*16 ; 256 rows of 16 tiles, each tile is a byte
0455B3 00 00 00    0004*  tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
0455B6 00 00 00    0005*  tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
0455B9             0006*      ; initialize to zero for a maximum of 256 rows in a level
0455B9 00          0007*  tiles_cols: db 0 ; number of tile columns in the current level
0455BA             0008*  
0455BA 00 00 00    0009*  cur_baseBufferId: dl 0
0455BD 00 00 00    0010*  tiles_x_plot: dl 0
0455C0 F1 FF FF    0011*  tiles_y_plot: dl -15
0455C3             0012*  
0455C3             0013*  tiles_plot:
0455C3             0014*  ; set gfx viewport to playing field window
0455C3 01 00 00 00 0015*      ld bc,field_left
0455C7 11 00 00 00 0016*      ld de,field_top
0455CB DD 21 FF 00 0017*      ld ix,field_right
       00          
0455D0 FD 21 7F 01 0018*      ld iy,field_bottom
       00          
0455D5 CD 28 15 04 0019*      call vdu_set_gfx_viewport
0455D9             0020*  ; move the background down one pixel
0455D9 3E 02       0021*      ld a,2 ; current gfx viewport
0455DB 2E 02       0022*      ld l,2 ; direction=down
0455DD 26 01       0023*      ld h,1 ; speed=1 px
0455DF CD A0 14 04 0024*      call vdu_scroll_down
0455E3             0025*  ; set gfx viewport to one scanline to optimise plotting tiles
0455E3 01 00 00 00 0026*      ld bc,0 ; leftmost x-coord
0455E7 11 00 00 00 0027*      ld de,0 ; topmost y-coord
0455EB DD 21 FF 00 0028*      ld ix,255 ; rightmost x-coord
       00          
0455F0 FD 21 00 00 0029*      ld iy,0 ; bottommost y-coord
       00          
0455F5 CD 28 15 04 0030*      call vdu_set_gfx_viewport
0455F9             0031*  ; plot the background
0455F9             0032*      ; call bg_plot
0455F9             0033*      ; call xevious_plot
0455F9             0034*      ; ret ; DEBUG
0455F9             0035*  ; initialize tiles loop
0455F9 21 00 00 00 0036*      ld hl,0 ; init plotting x-coordinate
0455FD 22 BD 55 04 0037*      ld (tiles_x_plot),hl
045601 2A B3 55 04 0038*      ld hl,(tiles_row_defs)
045605 3A B9 55 04 0039*      ld a,(tiles_cols)
045609 47          0040*      ld b,a ; column loop counter
04560A             0041*  @loop:
04560A C5          0042*      push bc ; save the loop counter
04560B             0043*  ; read the tile defintion for the current column
04560B 7E          0044*      ld a,(hl) ; a has tile definition
04560C E5          0045*      push hl ; save pointer to tile definition
04560D FE 11       0046*      cp 17 ; carry set if active tile (or null tile which we will ignore when the time comes)
04560F F5          0047*      push af ; save active tile flag and type
045610 2A BA 55 04 0048*      ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
045614 6F          0049*      ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
045615 CD 75 15 04 0050*      call vdu_buff_select ; tile bitmap buffer is now active
045619             0051*  ; plot the active bitmap
045619 ED 4B BD 55 0052*      ld bc,(tiles_x_plot)
       04          
04561E ED 5B C0 55 0053*      ld de,(tiles_y_plot)
       04          
045623 CD D1 18 04 0054*      call vdu_plot_bmp
045627             0055*  ; bump x-coords the width of one tile and save it
045627 2A BD 55 04 0056*      ld hl,(tiles_x_plot)
04562B 01 10 00 00 0057*      ld bc,16
04562F 09          0058*      add hl,bc
045630 22 BD 55 04 0059*      ld (tiles_x_plot),hl
045634             0060*  ; process active tiles
045634 F1          0061*      pop af ; a = type, carry = active flag
045635 CA 3D 56 04 0062*      jp z,@F ; is null tile,skip ahead
045639 DC 78 56 04 0063*      call c,dt_is_active
04563D             0064*  @@:
04563D             0065*  ; prepare to loop to next column
04563D E1          0066*      pop hl ; get back pointer to tile def
04563E 23          0067*      inc hl ; bump it to the next column
04563F C1          0068*      pop bc ; snag our loop counter
045640 10 C8       0069*      djnz @loop
045642             0070*  ; increment tiles plotting y-coordinate
045642             0071*  ; when it hits zero, we go to next row of tiles in the map
045642             0072*  ; (we use ix b/c we want to preserve hl for the next step)
045642 DD 21 C0 55 0073*      ld ix,tiles_y_plot
       04          
045647 DD 34 00    0074*      inc (ix)
04564A C0          0075*      ret nz
04564B             0076*  ; time to bump tiles_row_defs to next row
04564B             0077*  ; (hl was already there at the end of the loop)
04564B 22 B3 55 04 0078*      ld (tiles_row_defs),hl
04564F             0079*  ; reset coords to plot next row of tiles
04564F 21 00 00 00 0080*      ld hl,0
045653 22 BD 55 04 0081*      ld (tiles_x_plot),hl
045657 21 F1 FF FF 0082*      ld hl,-15
04565B 22 C0 55 04 0083*      ld (tiles_y_plot),hl
04565F             0084*  ; decrement tiles row counter
04565F 21 B6 55 04 0085*      ld hl,tiles_row
045663 35          0086*      dec (hl)
045664 C0          0087*      ret nz
045665             0088*  @inc_level:
045665             0089*  ; increase the number of enemy sprites
045665 3A 0E 1B 04 0090*      ld a,(max_enemy_sprites)
045669 3C          0091*      inc a
04566A FE 10       0092*      cp table_max_records ; if we're at the global limit,skip ahead at max level
04566C CA B0 4A 04 0093*      jp z,next_level
045670 32 0E 1B 04 0094*      ld (max_enemy_sprites),a ; otherwise save the updated number
045674 C3 B0 4A 04 0095*      jp next_level
045678             0096*  ; end tiles_plot
045678             0097*  
045678             0098*  ; bg_y_plot: dl -1
045678             0099*  ; bg_bufferId: dl BUF_STATION_BG_00 ; default bufferId for background tiles
045678             0100*  
045678             0101*  ; bg_plot:
045678             0102*  ; ; load current bg tile bufferId as default
045678             0103*  ;     ld hl,(bg_bufferId)
045678             0104*  ; ; check whether it is time for a new background tile
045678             0105*  ;     ld a,(bg_y_plot)
045678             0106*  ;     inc a
045678             0107*  ;     ld (bg_y_plot),a
045678             0108*  ;     jp nz,@F ; not time for a new tile so draw current one
045678             0109*  ; ; load the next background tile
045678             0110*  ;     ld hl,BUF_STATION_BG_00
045678             0111*  ;     call rand_8
045678             0112*  ;     and %0000011
045678             0113*  ;     add a,l
045678             0114*  ;     ld l,a
045678             0115*  ;     ld a,0
045678             0116*  ;     adc a,h
045678             0117*  ;     ld h,a
045678             0118*  ;     ld (bg_bufferId),hl
045678             0119*  ; @@:
045678             0120*  ;     call vdu_buff_select
045678             0121*  ;     ld bc,0
045678             0122*  ;     ld de,(bg_y_plot)
045678             0123*  ;     inc de
045678             0124*  ;     call vdu_plot_bmp
045678             0125*  ; ; all done
045678             0126*  ;     ret
045678             0127*  
045678             0128*  ; ###### TODO: NEW CODE TO IMPLEMENT ######
045678             0129*  tile_pad_small: equ 1
045678             0130*  tile_pad_med: equ 2
045678             0131*  tile_pad_large: equ 3
045678             0132*  tile_pad_huge: equ 4
045678             0133*  tile_fireball_turret: equ 5
045678             0134*  tile_laser_turret: equ 6
045678             0135*  tile_twin_laser_turret: equ 7
045678             0136*  tile_gatling_turret: equ 8
045678             0137*  tile_electrode_r: equ 9
045678             0138*  tile_electrode_u: equ 10
045678             0139*  tile_piston_r: equ 11
045678             0140*  tile_piston_u: equ 12
045678             0141*  tile_spark_r: equ 13
045678             0142*  tile_spark_u: equ 14
045678             0143*  tile_flame_r: equ 15
045678             0144*  tile_flame_u: equ 16
045678             0145*  
045678             0146*  dt_is_active: ; TODO: implement this
045678             0147*  ; ; a lands here containing a tile index in the low nibble
045678             0148*  ; ; we test the values for the tiles which are active
045678             0149*  ;     cp #07
045678             0150*  ;     call z,ld_act_landing_pad
045678             0151*  ;     cp #08
045678             0152*  ;     call z,ld_act_laser_turret
045678             0153*  ;     ; fall through
045678             0154*  ;     ret
045678             0155*  
045678             0156*  ; ; some tiles become active sprites,so we load those here
045678             0157*  ; ; sprite_x/y have already been loaded
045678             0158*  ; ; sprite_dim_x/y are loaded by table_add_record
045678             0159*  ; ; we don't want sprite drawn to background like other tiles
045678             0160*  ; ; so this routine only adds them to the sprite table
045678             0161*  ; dt_ld_act:
045678             0162*  ;     ld a,#48 ; top of screen + 1/2 tile height
045678             0163*  ;     ld (sprite_y+1),a ; just the integer part
045678             0164*  ;     ld (sprite_base_bufferId),hl
045678             0165*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
045678             0166*  ;     call table_add_record
045678             0167*  ;     ; call sprite_variables_from_stack
045678             0168*  ;     ld a,#FF ; lets calling proc know we loaded an active tile
045678 C9          0169*      ret ; and back
045679             0170*  ; end dt_is_active
045679             0171*  
045679             0172*  ; ld_act_landing_pad:
045679             0173*  ;     ; call sprite_variables_to_stack
045679             0174*  
045679             0175*  ;     ld hl,move_landing_pad
045679             0176*  ;     ld (sprite_move_program),hl
045679             0177*  
045679             0178*  ;     xor a
045679             0179*  ;     ld (sprite_animation),a ; animation 0
045679             0180*  
045679             0181*  ;     call rand_8     ; snag a random number
045679             0182*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
045679             0183*  ;     add a,64 ; range is now 64-127
045679             0184*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn an enemy
045679             0185*  
045679             0186*  ;     ld a,%10 ; collides with laser but not player
045679             0187*  ;     ld (iy+sprite_collisions),a
045679             0188*  
045679             0189*  ;     ld a,#05 ; BCD
045679             0190*  ;     ld (sprite_points),a
045679             0191*  ;     ld a,0 ; binary
045679             0192*  ;     ld (sprite_shield_damage),a
045679             0193*  
045679             0194*  ;     ld hl,tile_pad_small ; dt_ld_act loads this to sprite_base_bufferId
045679             0195*  ;     jr dt_ld_act
045679             0196*  
045679             0197*  ; ld_act_laser_turret:
045679             0198*  ;     ; call sprite_variables_to_stack
045679             0199*  
045679             0200*  ;     ld hl,move_laser_turret
045679             0201*  ;     ld (sprite_move_program),hl
045679             0202*  
045679             0203*  ;     xor a
045679             0204*  ;     ld (sprite_animation),a
045679             0205*  ;     ld (sprite_move_step),a
045679             0206*  
045679             0207*  ;     call rand_8     ; snag a random number
045679             0208*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
045679             0209*  ;     add a,64 ; range is now 64-127
045679             0210*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
045679             0211*  
045679             0212*  ;     ld a,%10 ; collides with laser but not player
045679             0213*  ;     ld (iy+sprite_collisions),a
045679             0214*  
045679             0215*  ;     ld a,#10 ; BCD
045679             0216*  ;     ld (sprite_points),a
045679             0217*  ;     ld a,0 ; binary
045679             0218*  ;     ld (sprite_shield_damage),a
045679             0219*  
045679             0220*  ;     ld hl,tile_fireball_turret ; dt_ld_act loads this to sprite_base_bufferId
045679             0221*  ;     jp dt_ld_act
045679             0222*  
045679             0223*  
045679             0224*  ; ; moves active tile sprites down one pixel in sync with tiles movement
045679             0225*  ; ; deletes sprites from table when they wrap around to top of screen
045679             0226*  ; move_active_tiles:
045679             0227*  ; ; get current position
045679             0228*  ;     ld a,(sprite_y+1) ; we only need the integer part
045679             0229*  ;     inc a
045679             0230*  ; ; are we at the bottom of the screen?
045679             0231*  ;     jr nz,move_active_tiles_draw_sprite ; nope
045679             0232*  ; ; otherwise kill sprite
045679             0233*  ;     ld a,%10000000 ; any bit set in high nibble means sprite will die
045679             0234*  ;     ld (iy+sprite_collisions),a
045679             0235*  ;     ret ; debug
045679             0236*  ; move_active_tiles_draw_sprite:
045679             0237*  ;     ld (sprite_y+1),a ; update tile y position integer part
045679             0238*  ;     ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
045679             0239*  ;     ; call vdu_bmp_draw ; convert to vdu_bmp_plot ; draw it
045679             0240*  ;     ret ; and done
045679             0241*  
045679             0242*  
045679             0243*  ; move_landing_pad:
045679             0244*  ;     call move_active_tiles
045679             0245*  ;     call check_collisions
045679             0246*  ; ; is it time to launch an enemy?
045679             0247*  ;     ld hl,sprite_move_timer
045679             0248*  ;     dec (hl)
045679             0249*  ;     jp nz,move_enemies_loop_return
045679             0250*  ;     call enemy_spawn_seeker
045679             0251*  ;     ; reset move timer so can spawn again if player doesn't take us out
045679             0252*  ;     call rand_8     ; snag a random number
045679             0253*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
045679             0254*  ;     add a,64 ; range is now 64-127
045679             0255*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn an enemy
045679             0256*  ;     ret
045679             0257*  
045679             0258*  
045679             0259*  ; move_laser_turret:
045679             0260*  ; ; compute orientation to player
045679             0261*  ;     call orientation_to_player
045679             0262*  ; ; h.l 8.8 fixed angle256 to player
045679             0263*  ; ; bc and de as signed 16-bit integers
045679             0264*  ; ; representing delta-x/y *to* target respectively
045679             0265*  ;     ld (Bearing_t),hl
045679             0266*  ;     ld hl,0x0400
045679             0267*  ;     ld (Vp),hl
045679             0268*  ;     call targeting_computer
045679             0269*  ;     ld (sprite_heading),hl ; store bearing to player
045679             0270*  ; ; is it time to launch a fireball?
045679             0271*  ;     ld hl,sprite_move_timer
045679             0272*  ;     dec (hl)
045679             0273*  ;     jp nz,move_laser_turret_boilerplate
045679             0274*  ;     call fireballs_init
045679             0275*  ;     ; reset move timer so can fire again if player doesn't take us out
045679             0276*  ;     call rand_8     ; snag a random number
045679             0277*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
045679             0278*  ;     add a,64 ; range is now 64-127
045679             0279*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
045679             0280*  ; move_laser_turret_boilerplate:
045679             0281*  ;     call move_active_tiles
045679             0282*  ;     call check_collisions
045679             0283*  ;     ret
045679             0284*  
045679             0285*  
045679             0286*  ; fireballs_init:
045679             0287*  ;     ; call sprite_variables_to_stack
045679             0288*  
045679             0289*  ;     ld hl,fireballs
045679             0290*  ;     ld (sprite_base_bufferId),hl
045679             0291*  
045679             0292*  ;     ld hl,move_fireballs
045679             0293*  ;     ld (sprite_move_program),hl
045679             0294*  
045679             0295*  ;     ld a,%11 ; collides with laser and player
045679             0296*  ;     ; ld a,%10 ; collides with laser DEBUG
045679             0297*  ;     ld (iy+sprite_collisions),a
045679             0298*  
045679             0299*  ;     ld hl,(Vp)
045679             0300*  ;     ld (sprite_vel),hl
045679             0301*  ;     ld hl,(Vp_x)
045679             0302*  ;     ld (sprite_xvel),hl
045679             0303*  ;     ld hl,(Vp_y)
045679             0304*  ;     inc h ; account for ground movement
045679             0305*  ;     ld (sprite_yvel),hl
045679             0306*  
045679             0307*  ;     xor a ; zero a
045679             0308*  ;     ld (sprite_animation),a
045679             0309*  ;     ld (sprite_move_step),a
045679             0310*  ;     ld (sprite_move_timer),a
045679             0311*  
045679             0312*  ;     ld a,6 ; 1/10th of a second timer
045679             0313*  ;     ld (sprite_animation_timer),a
045679             0314*  
045679             0315*  ;     ld a,0x00 ; BCD
045679             0316*  ;     ld (sprite_points),a
045679             0317*  ;     ld a,1 ; binary
045679             0318*  ;     ld (sprite_shield_damage),a
045679             0319*  
045679             0320*  ;     call table_add_record ; plops that on the sprite stack for later
045679             0321*  ;     ; call sprite_variables_from_stack ; come back to where we started
045679             0322*  ;     ret
045679             0059   
045679             0060   ; --- MAIN PROGRAM FILE ---
045679 57 65 6C 63 0061   hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
045694 4C 6F 61 64 0062   loading_ui: asciz "Loading UI"
       69 6E 67 20 
       55 49 00    
04569F 4C 6F 61 64 0063   loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
0456AD 50 72 65 73 0064   loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
0456C8             0065   
0456C8             0066   init:
0456C8             0067   ; clear all buffers
0456C8 CD 67 16 04 0068       call vdu_clear_all_buffers
0456CC             0069   
0456CC             0070   ; set up the display
0456CC 3E 08       0071       ld a,8;+128 ; 136   320   240   64    60hz double-buffered
0456CE CD 51 15 04 0072       call vdu_set_screen_mode
0456D2 AF          0073       xor a
0456D3 CD 62 15 04 0074       call vdu_set_scaling
0456D7             0075   
0456D7             0076   ; ; enable additional audio channels
0456D7             0077   ; 	call vdu_enable_channels
0456D7             0078   
0456D7             0079   ; set text background color
0456D7 3E 9A       0080       ld a,26+128 ; violet
0456D9 CD B9 14 04 0081       call vdu_colour_text
0456DD             0082   
0456DD             0083   ; set text foreground color
0456DD 3E 2F       0084       ld a,47 ; aaaaff lavenderish
0456DF CD B9 14 04 0085       call vdu_colour_text
0456E3             0086   
0456E3             0087   ; set gfx bg color
0456E3 AF          0088       xor a ; plotting mode 0
0456E4 3E 9A       0089       ld a,26+128 ; violet
0456E6 CD CA 14 04 0090       call vdu_gcol
0456EA CD 88 14 04 0091       call vdu_cls
0456EE             0092   
0456EE             0093   ; set the cursor off
0456EE CD 50 14 04 0094       call vdu_cursor_off
0456F2             0095   
0456F2             0096   ; VDU 28, left, bottom, right, top: Set text viewport **
0456F2             0097   ; MIND THE LITTLE-ENDIANESS
0456F2             0098   ; inputs: c=left,b=bottom,e=right,d=top
0456F2 0E 00       0099       ld c,0 ; left
0456F4 16 1D       0100       ld d,29 ; top
0456F6 1E 27       0101       ld e,39 ; right
0456F8 06 1D       0102       ld b,29; bottom
0456FA CD E1 14 04 0103       call vdu_set_txt_viewport
0456FE             0104   
0456FE             0105   ; print loading ui message
0456FE 21 94 56 04 0106       ld hl,loading_ui
045702 CD 77 00 04 0107       call printString
045706 CD 8D 14 04 0108       call vdu_flip
04570A             0109   
04570A             0110   ; load UI images
04570A CD 96 12 04 0111       call load_ui_images
04570E             0112   
04570E             0113   ; load sprites
04570E CD D4 11 04 0114       call img_load_init ; sets up the animated load screen
045712 CD A9 12 04 0115       call load_sprite_images
045716             0116   
045716             0117   ; load tileset_ptrs
045716 CD BA 12 04 0118       call load_tilesets
04571A             0119   
04571A             0120   ; ; load sound effects ; TODO
04571A             0121   ; 	ld bc,SFX_num_buffers
04571A             0122   ; 	ld hl,SFX_buffer_id_lut
04571A             0123   ; 	ld (cur_buffer_id_lut),hl
04571A             0124   ; 	ld hl,SFX_load_routines_table
04571A             0125   ; 	ld (cur_load_jump_table),hl
04571A             0126   ; 	call sfx_load_main
04571A             0127   
04571A             0128   ; print loading complete message and wait for user keypress
04571A             0129       ; call vdu_cls
04571A             0130       ; ld hl,loading_complete
04571A             0131       ; call printString
04571A CD 8D 14 04 0132       call vdu_flip
04571E CD 15 06 04 0133       call waitKeypress
045722             0134   
045722             0135   ; set up display for gameplay
045722             0136       ; ld a,8
045722 3E 14       0137       ld a,20
045724 CD 51 15 04 0138       call vdu_set_screen_mode
045728 AF          0139       xor a
045729 CD 62 15 04 0140       call vdu_set_scaling
04572D CD 50 14 04 0141       call vdu_cursor_off
045731             0142   ; load fonts
045731 CD 9A 11 04 0143   	call fonts_load
045735             0144   ; select font
045735 21 05 FA 00 0145       ld hl,computer_pixel_7_8x16
045739 3E 01       0146       ld a,1 ; flags
04573B CD 1E 18 04 0147       call vdu_font_select
04573F             0148   ; plot bezel art
04573F 21 00 00 00 0149       ld hl,BUF_BEZEL_L
045743 CD 75 15 04 0150       call vdu_buff_select
045747 01 00 00 00 0151       ld bc,0
04574B 11 00 00 00 0152       ld de,0
04574F CD D1 18 04 0153       call vdu_plot_bmp
045753 21 01 00 00 0154       ld hl,BUF_BEZEL_R
045757 CD 75 15 04 0155       call vdu_buff_select
04575B 01 80 01 00 0156       ld bc,384
04575F 11 00 00 00 0157       ld de,0
045763 CD D1 18 04 0158       call vdu_plot_bmp
045767             0159   ; set gfx origin and viewport to playing field window
045767 01 80 00 00 0160       ld bc,origin_left
04576B 11 00 00 00 0161       ld de,origin_top
04576F CD 0D 15 04 0162       call vdu_set_gfx_origin
045773 01 00 00 00 0163       ld bc,field_left
045777 11 00 00 00 0164       ld de,field_top
04577B DD 21 FF 00 0165       ld ix,field_right
       00          
045780 FD 21 7F 01 0166       ld iy,field_bottom
       00          
045785 CD 28 15 04 0167       call vdu_set_gfx_viewport
045789             0168   ; set background color
045789 3E 9A       0169       ld a,26+128 ; violet
04578B CD CA 14 04 0170       call vdu_gcol
04578F CD 9B 14 04 0171       call vdu_clg
045793             0172   ; VDU 28, left, bottom, right, top: Set text viewport **
045793 0E 00       0173       ld c,0 ; left
045795 16 00       0174       ld d,0 ; top
045797 1E 3E       0175       ld e,62 ; right
045799 06 07       0176       ld b,7; bottom
04579B CD E1 14 04 0177       call vdu_set_txt_viewport
04579F             0178   
04579F             0179   ; initialize the global timestamp
04579F CD C4 13 04 0180       call timestamp_tick
0457A3             0181   
0457A3             0182   ; done with init
0457A3 C9          0183       ret
0457A4             0184   
0457A4             0185   main:
0457A4             0186   ; start a new game
0457A4 CD 85 54 04 0187       call game_initialize
0457A8             0188   
0457A8             0189   main_loop:
0457A8             0190   ; update the global timestamp
0457A8 CD C4 13 04 0191       call timestamp_tick
0457AC             0192   
0457AC             0193   ; do gamestate logic
0457AC CD 71 54 04 0194       call do_game
0457B0             0195   
0457B0             0196   ; wait for the next vblank mitigate flicker and for loop timing
0457B0 CD FC 14 04 0197       call vdu_vblank
0457B4             0198       ; call vdu_vblank ; DEBUG
0457B4             0199   
0457B4             0200   ; poll keyboard for escape keypress
0457B4 3E 08       0201       ld a, $08 ; code to send to MOS
0457B6 5B CF       0202       rst.lil $08 ; get IX pointer to System Variables
0457B8             0203   
0457B8 DD 7E 05    0204       ld a, (ix + $05) ; get ASCII code of key pressed
0457BB FE 1B       0205       cp 27 ; check if 27 (ascii code for ESC)
0457BD CA C5 57 04 0206       jp z, main_end ; if pressed, jump to exit
0457C1             0207   
0457C1 C3 A8 57 04 0208       jp main_loop
0457C5             0209   
0457C5             0210   main_end:
0457C5 CD 42 14 04 0211       call vdu_cursor_on
0457C9 C9          0212       ret

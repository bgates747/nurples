PC     Output      Line
040000             0001       assume adl=1
040000             0002       org 0x040000
040000 C3 45 00 04 0003       jp start
040004 FF FF FF FF 0004       align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005       db "MOS"
040043 00          0006       db 00h
040044 01          0007       db 01h
040045             0008   
040045             0009   start:
040045 F5          0010       push af
040046 C5          0011       push bc
040047 D5          0012       push de
040048 DD E5       0013       push ix
04004A FD E5       0014       push iy
04004C CD 0B 58 04 0015       call init
040050 CD E7 58 04 0016       call main
040054             0017   
040054             0018   exit:
040054 FD E1       0019       pop iy
040056 DD E1       0020       pop ix
040058 D1          0021       pop de
040059 C1          0022       pop bc
04005A F1          0023       pop af
04005B 21 00 00 00 0024       ld hl,0
04005F             0025   
04005F C9          0026       ret
040060             0027   
040060             0028   ; API INCLUDES
040060             0029       include "mos_api.inc"
040060             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*  ; Title:	AGON MOS - API for user projects
040060             0003*  ; Author:	Dean Belfield
040060             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*  ;			Added MOS error codes for return in HL
040060             0006*  ; Created:	03/08/2022
040060             0007*  ; Last Updated:	10/08/2023
040060             0008*  ;
040060             0009*  ; Modinfo:
040060             0010*  ; 05/08/2022:	Added mos_feof
040060             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*  ; 13/10/2022:	Added mos_oscli
040060             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*  ; 19/05/2023:	Added sysvar_scrMode
040060             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*  ; 03/08/2023:	Added mos_setkbvector
040060             0028*  ; 10/08/2023:	Added mos_getkbmap
040060             0029*  
040060             0030*  ; VDP control (VDU 23, 0, n)
040060             0031*  ;
040060             0032*  vdp_gp:				EQU 80h
040060             0033*  vdp_keycode:		EQU 81h
040060             0034*  vdp_cursor:			EQU	82h
040060             0035*  vdp_scrchar:		EQU	83h
040060             0036*  vdp_scrpixel:		EQU	84h
040060             0037*  vdp_audio:			EQU	85h
040060             0038*  vdp_mode:			EQU	86h
040060             0039*  vdp_rtc:			EQU	87h
040060             0040*  vdp_keystate:		EQU	88h
040060             0041*  vdp_logicalcoords:	EQU	C0h
040060             0042*  vdp_terminalmode:	EQU	FFh
040060             0043*  
040060             0044*  ; MOS high level functions
040060             0045*  ;
040060             0046*  mos_getkey:			EQU	00h
040060             0047*  mos_load:			EQU	01h
040060             0048*  mos_save:			EQU	02h
040060             0049*  mos_cd:				EQU	03h
040060             0050*  mos_dir:			EQU	04h
040060             0051*  mos_del:			EQU	05h
040060             0052*  mos_ren:			EQU	06h
040060             0053*  mos_mkdir:			EQU	07h
040060             0054*  mos_sysvars:		EQU	08h
040060             0055*  mos_editline:		EQU	09h
040060             0056*  mos_fopen:			EQU	0Ah
040060             0057*  mos_fclose:			EQU	0Bh
040060             0058*  mos_fgetc:			EQU	0Ch
040060             0059*  mos_fputc:			EQU	0Dh
040060             0060*  mos_feof:			EQU	0Eh
040060             0061*  mos_getError:		EQU	0Fh
040060             0062*  mos_oscli:			EQU	10h
040060             0063*  mos_copy:			EQU	11h
040060             0064*  mos_getrtc:			EQU	12h
040060             0065*  mos_setrtc:			EQU	13h
040060             0066*  mos_setintvector:	EQU	14h
040060             0067*  mos_uopen:			EQU	15h
040060             0068*  mos_uclose:			EQU	16h
040060             0069*  mos_ugetc:			EQU	17h
040060             0070*  mos_uputc:			EQU	18h
040060             0071*  mos_getfil:			EQU	19h
040060             0072*  mos_fread:			EQU	1Ah
040060             0073*  mos_fwrite:			EQU	1Bh
040060             0074*  mos_flseek:			EQU	1Ch
040060             0075*  mos_setkbvector:	EQU	1Dh
040060             0076*  mos_getkbmap:		EQU	1Eh
040060             0077*  
040060             0078*  ; MOS program exit codes
040060             0079*  ;
040060             0080*  EXIT_OK:				EQU  0;	"OK",
040060             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*  ; FatFS file access functions
040060             0103*  ;
040060             0104*  ffs_fopen:			EQU	80h
040060             0105*  ffs_fclose:			EQU	81h
040060             0106*  ffs_fread:			EQU	82h
040060             0107*  ffs_fwrite:			EQU	83h
040060             0108*  ffs_flseek:			EQU	84h
040060             0109*  ffs_ftruncate:		EQU	85h
040060             0110*  ffs_fsync:			EQU	86h
040060             0111*  ffs_fforward:		EQU	87h
040060             0112*  ffs_fexpand:		EQU	88h
040060             0113*  ffs_fgets:			EQU	89h
040060             0114*  ffs_fputc:			EQU	8Ah
040060             0115*  ffs_fputs:			EQU	8Bh
040060             0116*  ffs_fprintf:		EQU	8Ch
040060             0117*  ffs_ftell:			EQU	8Dh
040060             0118*  ffs_feof:			EQU	8Eh
040060             0119*  ffs_fsize:			EQU	8Fh
040060             0120*  ffs_ferror:			EQU	90h
040060             0121*  
040060             0122*  ; FatFS directory access functions
040060             0123*  ;
040060             0124*  ffs_dopen:			EQU	91h
040060             0125*  ffs_dclose:			EQU	92h
040060             0126*  ffs_dread:			EQU	93h
040060             0127*  ffs_dfindfirst:		EQU	94h
040060             0128*  ffs_dfindnext:		EQU	95h
040060             0129*  
040060             0130*  ; FatFS file and directory management functions
040060             0131*  ;
040060             0132*  ffs_stat:			EQU	96h
040060             0133*  ffs_unlink:			EQU	97h
040060             0134*  ffs_rename:			EQU	98h
040060             0135*  ffs_chmod:			EQU	99h
040060             0136*  ffs_utime:			EQU	9Ah
040060             0137*  ffs_mkdir:			EQU	9Bh
040060             0138*  ffs_chdir:			EQU	9Ch
040060             0139*  ffs_chdrive:		EQU	9Dh
040060             0140*  ffs_getcwd:			EQU	9Eh
040060             0141*  
040060             0142*  ; FatFS volume management and system configuration functions
040060             0143*  ;
040060             0144*  ffs_mount:			EQU	9Fh
040060             0145*  ffs_mkfs:			EQU	A0h
040060             0146*  ffs_fdisk:			EQU	A1h
040060             0147*  ffs_getfree:		EQU	A2h
040060             0148*  ffs_getlabel:		EQU	A3h
040060             0149*  ffs_setlabel:		EQU	A4h
040060             0150*  ffs_setcp:			EQU	A5h
040060             0151*  
040060             0152*  ; File access modes
040060             0153*  ;
040060             0154*  fa_read:			EQU	01h
040060             0155*  fa_write:			EQU	02h
040060             0156*  fa_open_existing:	EQU	00h
040060             0157*  fa_create_new:		EQU	04h
040060             0158*  fa_create_always:	EQU	08h
040060             0159*  fa_open_always:		EQU	10h
040060             0160*  fa_open_append:		EQU	30h
040060             0161*  
040060             0162*  ; System variable indexes for api_sysvars
040060             0163*  ; Index into _sysvars in globals.inc
040060             0164*  ;
040060             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*  
040060             0192*  ; Flags for the VPD protocol
040060             0193*  ;
040060             0194*  vdp_pflag_cursor:		EQU	00000001b
040060             0195*  vdp_pflag_scrchar:		EQU	00000010b
040060             0196*  vdp_pflag_point:		EQU	00000100b
040060             0197*  vdp_pflag_audio:		EQU	00001000b
040060             0198*  vdp_pflag_mode:			EQU	00010000b
040060             0199*  vdp_pflag_rtc:			EQU	00100000b
040060             0200*  
040060             0201*  ;
040060             0202*  ; FatFS structures
040060             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*  ;
040060             0205*  ; Object ID and allocation information (FFOBJID)
040060             0206*  ;
040060             0207*  ; Indexes into FFOBJID structure
040060             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*  ;
040060             0215*  ; File object structure (FIL)
040060             0216*  ;
040060             0217*  ; Indexes into FIL structure
040060             0218*  fil_obj:		EQU 0	; 15: Object identifier
040060             0219*  fil_flag:		EQU	15 	;  1: File status flags
040060             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*  ;
040060             0227*  ; Directory object structure (DIR)
040060             0228*  ; Indexes into DIR structure
040060             0229*  dir_obj:		EQU  0	; 15: Object identifier
040060             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*  dir_clust:		EQU	19	;  4: Current cluster
040060             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*  ;
040060             0237*  ; File information structure (FILINFO)
040060             0238*  ;
040060             0239*  ; Indexes into FILINFO structure
040060             0240*  filinfo_fsize:		EQU 0	;   4: File size
040060             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*  ;
040060             0247*  ; Macro for calling the API
040060             0248*  ; Parameters:
040060             0249*  ; - function: One of the function numbers listed above
040060             0250*  ;
040060             0251*  	MACRO	MOSCALL	function
040060             0252*  			LD	A, function
040060             0253*  			RST.LIL	08h
040060             0254*  	ENDMACRO
040060             0030       include "functions.inc"
040060             0001*  
040060             0002*      MACRO printChar char
040060             0003*      LD A, char
040060             0004*      RST.LIL 10h
040060             0005*      ENDMACRO
040060             0006*  
040060             0007*  ; Simulated call to subroutine at HL
040060             0008*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0009*  ; outputs: whatever the subroutine does, including HL and BC
040060             0010*  ; destroys: only what the subroutine does, but always BC
040060             0011*      MACRO callHL
040060             0012*      ld bc,@F ; Address of first instruction after the jump
040060             0013*      push bc ; which constitutes the return address
040060             0014*      jp (hl) ; Jump to the address in HL
040060             0015*  @@:
040060             0016*      ENDMACRO
040060             0017*  
040060             0018*  ; Simulated call to subroutine at IX
040060             0019*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0020*  ; outputs: whatever the subroutine does, including IX and BC
040060             0021*  ; destroys: only what the subroutine does, but always BC
040060             0022*      MACRO callIX
040060             0023*      ld bc,@F ; Address of first instruction after the jump
040060             0024*      push bc ; which constitutes the return address
040060             0025*      jp (ix) ; Jump to the address in IX
040060             0026*  @@:
040060             0027*      ENDMACRO
040060             0028*  
040060             0029*  ; Simulated call to soubroutinte at IY
040060             0030*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0031*  ; outputs: whatever the subroutine does, including IY and BC
040060             0032*  ; destroys: only what the subroutine does, but always BC
040060             0033*      MACRO callIY
040060             0034*      ld bc,@F ; Address of first instruction after the jump
040060             0035*      push bc ; which constitutes the return address
040060             0036*      jp (iy) ; Jump to the address in IY
040060             0037*  @@:
040060             0038*      ENDMACRO
040060             0039*  
040060             0040*  ; put the value in HLU into the accumulator
040060             0041*  ; destroys: af
040060             0042*      MACRO HLU_TO_A
040060             0043*      push hl ; 4 cycles
040060             0044*      inc sp ; 1 cycle
040060             0045*      pop af ; 4 cycles
040060             0046*      dec sp ; 1 cycle
040060             0047*      ; 10 cycles total
040060             0048*      ENDMACRO
040060             0049*  
040060             0050*  A_TO_HLU:
040060             0051*      ; call is 7 cycles
040060 22 6D 00 04 0052*      ld (@scratch),hl ; 7 cycles
040064 32 6F 00 04 0053*      ld (@scratch+2),a ; 5 cycles
040068 2A 6D 00 04 0054*      ld hl,(@scratch) ; 7 cycles
04006C C9          0055*      ret ; 6 cycles
04006D             0056*      ; 25 cycles total
04006D 00 00 00    0057*  @scratch: dl 0
040070             0058*  
040070             0059*      ; TODO: implement this
040070             0060*      ; MACRO A_TO_HLU
040070             0061*      ;     push.s af
040070             0062*      ;     inc sp
040070             0063*      ;     push.s hl
040070             0064*      ;     pop hl
040070             0065*      ;     inc sp
040070             0066*      ;     inc sp
040070             0067*      ; ENDMACRO
040070             0068*  
040070             0069*      MACRO PUSH_ALL
040070             0070*      ex af,af'
040070             0071*      exx
040070             0072*      push af
040070             0073*      push hl
040070             0074*      push bc
040070             0075*      push de
040070             0076*  
040070             0077*      ex af,af'
040070             0078*      exx
040070             0079*      push af
040070             0080*      push hl
040070             0081*      push bc
040070             0082*      push de
040070             0083*      push ix
040070             0084*      push iy
040070             0085*      ENDMACRO
040070             0086*  
040070             0087*      MACRO POP_ALL
040070             0088*      pop iy
040070             0089*      pop ix
040070             0090*      pop de
040070             0091*      pop bc
040070             0092*      pop hl
040070             0093*      pop af
040070             0094*      ex af,af'
040070             0095*      exx
040070             0096*  
040070             0097*      pop de
040070             0098*      pop bc
040070             0099*      pop hl
040070             0100*      pop af
040070             0101*      ex af,af'
040070             0102*      exx
040070             0103*      ENDMACRO
040070             0104*  
040070             0105*  ; Print a zero-terminated string inline with code, e.g.:
040070             0106*  ;
040070             0107*  ;    call printInline
040070             0108*  ;    ASCIZ "Hello, world!\r\n"
040070             0109*  ;
040070             0110*  ; Destroys: HL,AF
040070             0111*  printInline:
040070 E1          0112*      pop hl ; get the return address = pointer to start of string
040071 CD 77 00 04 0113*      call printString ; HL advances to end of string
040075 E5          0114*      push hl ; restore the return address = pointer to end of string
040076 C9          0115*      ret
040077             0116*  
040077             0117*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040077             0118*  ; Print a zero-terminated string
040077             0119*  ; HL: Pointer to string
040077             0120*  printString:
040077 C5          0121*      PUSH BC
040078 01 00 00 00 0122*      LD BC,0
04007C 3E 00       0123*      LD A,0
04007E 5B DF       0124*      RST.LIL 18h
040080 C1          0125*      POP BC
040081 C9          0126*      RET
040082             0127*  ; print a VDU sequence
040082             0128*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
040082             0129*  sendVDUsequence:
040082 C5          0130*      PUSH BC
040083 01 00 00 00 0131*      LD BC, 0
040087 4E          0132*      LD C, (HL)
040088 5B DF       0133*      RST.LIL 18h
04008A C1          0134*      POP BC
04008B C9          0135*      RET
04008C             0136*  ; Print Newline sequence to VDP
04008C             0137*  printNewLine:
04008C F5          0138*      push af ; for some reason rst.lil 10h sets carry flag
04008D 3E 0D       0139*      LD A, '\r'
04008F 5B D7       0140*      RST.LIL 10h
040091 3E 0A       0141*      LD A, '\n'
040093 5B D7       0142*      RST.LIL 10h
040095 F1          0143*      pop af
040096 C9          0144*      RET
040097             0145*  
040097             0146*  ; Print a 24-bit HEX number
040097             0147*  ; HLU: Number to print
040097             0148*  printHex24:
040097             0149*      HLU_TO_A
040097 E5          0001*M     push hl ; 4 cycles
040098 33          0002*M     inc sp ; 1 cycle
040099 F1          0003*M     pop af ; 4 cycles
04009A 3B          0004*M     dec sp ; 1 cycle
04009B             0005*M     ; 10 cycles total
04009B CD A5 00 04 0150*      CALL printHex8
04009F             0151*  ; Print a 16-bit HEX number
04009F             0152*  ; HL: Number to print
04009F             0153*  printHex16:
04009F 7C          0154*      LD A,H
0400A0 CD A5 00 04 0155*      CALL printHex8
0400A4 7D          0156*      LD A,L
0400A5             0157*  ; Print an 8-bit HEX number
0400A5             0158*  ; A: Number to print
0400A5             0159*  printHex8:
0400A5 4F          0160*      LD C,A
0400A6 1F          0161*      RRA
0400A7 1F          0162*      RRA
0400A8 1F          0163*      RRA
0400A9 1F          0164*      RRA
0400AA CD AF 00 04 0165*      CALL @F
0400AE 79          0166*      LD A,C
0400AF             0167*  @@:
0400AF E6 0F       0168*      AND 0Fh
0400B1 C6 90       0169*      ADD A,90h
0400B3 27          0170*      DAA
0400B4 CE 40       0171*      ADC A,40h
0400B6 27          0172*      DAA
0400B7 5B D7       0173*      RST.LIL 10h
0400B9 C9          0174*      RET
0400BA             0175*  
0400BA             0176*  printHexA:
0400BA F5          0177*      push af
0400BB C5          0178*      push bc
0400BC CD A5 00 04 0179*      call printHex8
0400C0 3E 20       0180*      ld a,' '
0400C2 5B D7       0181*      rst.lil 10h
0400C4 C1          0182*      pop bc
0400C5 F1          0183*      pop af
0400C6 C9          0184*      ret
0400C7             0185*  
0400C7             0186*  printHexHL:
0400C7 F5          0187*      push af
0400C8 C5          0188*      push bc
0400C9 CD 9F 00 04 0189*      call printHex16
0400CD 3E 20       0190*      ld a,' '
0400CF 5B D7       0191*      rst.lil 10h
0400D1 C1          0192*      pop bc
0400D2 F1          0193*      pop af
0400D3 C9          0194*      ret
0400D4             0195*  
0400D4             0196*  printHexUHL:
0400D4 F5          0197*      push af
0400D5 C5          0198*      push bc
0400D6 CD 97 00 04 0199*      call printHex24
0400DA 3E 20       0200*      ld a,' '
0400DC 5B D7       0201*      rst.lil 10h
0400DE C1          0202*      pop bc
0400DF F1          0203*      pop af
0400E0 C9          0204*      ret
0400E1             0205*  
0400E1             0206*  printHexAUHL:
0400E1 F5          0207*      push af
0400E2 C5          0208*      push bc
0400E3 CD A5 00 04 0209*      call printHex8
0400E7 3E 2E       0210*      ld a,'.'
0400E9 5B D7       0211*      rst.lil 10h
0400EB CD 97 00 04 0212*      call printHex24
0400EF 3E 20       0213*      ld a,' '
0400F1 5B D7       0214*      rst.lil 10h
0400F3 C1          0215*      pop bc
0400F4 F1          0216*      pop af
0400F5 C9          0217*      ret
0400F6             0218*  
0400F6             0219*  printHexABHL:
0400F6             0220*  ; preserve registers
0400F6 C5          0221*      push bc ; b will be ok c will not
0400F7 F5          0222*      push af ; will get totally destroyed
0400F8             0223*  ; print a
0400F8 CD A5 00 04 0224*      call printHex8
0400FC             0225*  ; print b
0400FC 78          0226*      ld a,b
0400FD CD A5 00 04 0227*      call printHex8
040101             0228*  ; print hl
040101 CD 9F 00 04 0229*      call printHex16
040105             0230*  ; restore registers
040105 F1          0231*      pop af
040106 C1          0232*      pop bc
040107 C9          0233*      ret
040108             0234*  
040108             0235*  printHexBHL:
040108             0236*  ; preserve registers
040108 C5          0237*      push bc ; b will be ok c will not
040109 F5          0238*      push af ; will get totally destroyed
04010A             0239*  ; print b
04010A 78          0240*      ld a,b
04010B CD A5 00 04 0241*      call printHex8
04010F             0242*  ; print hl
04010F CD 9F 00 04 0243*      call printHex16
040113             0244*  ; restore registers
040113 F1          0245*      pop af
040114 C1          0246*      pop bc
040115 C9          0247*      ret
040116             0248*  
040116             0249*  printHexCDE:
040116             0250*  ; preserve registers
040116 C5          0251*      push bc ; b will be ok c will not
040117 F5          0252*      push af ; will get totally destroyed
040118             0253*  ; print c
040118 79          0254*      ld a,c
040119 CD A5 00 04 0255*      call printHex8
04011D             0256*  ; print de
04011D EB          0257*      ex de,hl
04011E CD 9F 00 04 0258*      call printHex16
040122 EB          0259*      ex de,hl
040123             0260*  ; restore registers
040123 F1          0261*      pop af
040124 C1          0262*      pop bc
040125 C9          0263*      ret
040126             0264*  
040126             0265*  printHexUIX:
040126             0266*  ; store everything in scratch
040126 22 9B 05 04 0267*      ld (uhl),hl
04012A ED 43 9E 05 0268*      ld (ubc),bc
       04          
04012F ED 53 A1 05 0269*      ld (ude),de
       04          
040134 DD 22 A4 05 0270*      ld (uix),ix
       04          
040139 FD 22 A7 05 0271*      ld (uiy),iy
       04          
04013E F5          0272*      push af ; fml
04013F             0273*  
04013F 21 32 05 04 0274*      ld hl,str_ixu
040143 CD 77 00 04 0275*      call printString
040147 2A A4 05 04 0276*      ld hl,(uix)
04014B CD 97 00 04 0277*      call printHex24
04014F CD 8C 00 04 0278*      call printNewLine
040153             0279*  
040153             0280*  ; restore everything
040153 2A 9B 05 04 0281*      ld hl, (uhl)
040157 ED 4B 9E 05 0282*      ld bc, (ubc)
       04          
04015C ED 5B A1 05 0283*      ld de, (ude)
       04          
040161 DD 2A A4 05 0284*      ld ix, (uix)
       04          
040166 FD 2A A7 05 0285*      ld iy, (uiy)
       04          
04016B F1          0286*      pop af
04016C             0287*  ; all done
04016C C9          0288*      ret
04016D             0289*  
04016D             0290*  ; Print a 0x HEX prefix
04016D             0291*  DisplayHexPrefix:
04016D 3E 30       0292*      LD A, '0'
04016F 5B D7       0293*      RST.LIL 10h
040171 3E 78       0294*      LD A, 'x'
040173 5B D7       0295*      RST.LIL 10h
040175 C9          0296*      RET
040176             0297*  
040176             0298*      MACRO printDecBC
040176             0299*      push hl
040176             0300*      push bc
040176             0301*      pop hl
040176             0302*      call printDec
040176             0303*      pop hl
040176             0304*      ENDMACRO
040176             0305*  
040176             0306*      MACRO printDecDE
040176             0307*      push hl
040176             0308*      push de
040176             0309*      pop hl
040176             0310*      call printDec
040176             0311*      pop hl
040176             0312*      ENDMACRO
040176             0313*  
040176             0314*      MACRO printDecHL
040176             0315*      call printDec
040176             0316*      ENDMACRO
040176             0317*  
040176             0318*      MACRO printDecIX
040176             0319*      push hl
040176             0320*      push ix
040176             0321*      pop hl
040176             0322*      call printDec
040176             0323*      pop hl
040176             0324*      ENDMACRO
040176             0325*  
040176             0326*      MACRO printDecIY
040176             0327*      push hl
040176             0328*      push iy
040176             0329*      pop hl
040176             0330*      call printDec
040176             0331*      pop hl
040176             0332*      ENDMACRO
040176             0333*  
040176             0334*  
040176             0335*  ; Prints the right justified decimal value in HL without leading zeroes
040176             0336*  ; HL : Value to print
040176             0337*  ; preserves all registers and flags
040176             0338*  printDec:
040176             0339*  ; BEGIN MY CODE
040176             0340*  ; back up all the things
040176 F5          0341*      push af
040177 C5          0342*      push bc
040178 D5          0343*      push de
040179 E5          0344*      push hl
04017A             0345*  ; END MY CODE
04017A 11 A2 01 04 0346*      LD DE, _printDecBuffer
04017E CD B2 01 04 0347*      CALL u24_to_ascii
040182             0348*  ; BEGIN MY CODE
040182             0349*  ; replace leading zeroes with spaces
040182 21 A2 01 04 0350*      LD HL, _printDecBuffer
040186 06 07       0351*      ld B, 7 ; if HL was 0, we want to keep the final zero
040188             0352*  @loop:
040188 7E          0353*      LD A, (HL)
040189 FE 30       0354*      CP '0'
04018B C2 95 01 04 0355*      JP NZ, @done
04018F 3E 20       0356*      LD A, ' '
040191 77          0357*      LD (HL), A
040192 23          0358*      INC HL
040193             0359*      ; CALL vdu_cursor_forward
040193 10 F3       0360*      DJNZ @loop
040195             0361*  @done:
040195             0362*  ; END MY CODE
040195 21 A2 01 04 0363*      LD HL, _printDecBuffer
040199 CD 77 00 04 0364*      CALL printString
04019D             0365*  ; BEGIN MY CODE
04019D             0366*  ; restore all the things
04019D E1          0367*      pop hl
04019E D1          0368*      pop de
04019F C1          0369*      pop bc
0401A0 F1          0370*      pop af
0401A1             0371*  ; END MY CODE
0401A1 C9          0372*      RET
0401A2 00 00 00 00 0373*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0401B2             0374*  
0401B2             0375*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0401B2             0376*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0401B2             0377*  ; so it will allways be 8 characters length
0401B2             0378*  ; HL : Value to convert to string
0401B2             0379*  ; DE : pointer to buffer, at least 8 byte + 0
0401B2             0380*  u24_to_ascii:
0401B2 01 80 69 67 0381*      LD BC,-10000000
0401B6 CD E9 01 04 0382*      CALL @one_digit
0401BA 01 C0 BD F0 0383*      LD BC,-1000000
0401BE CD E9 01 04 0384*      CALL @one_digit
0401C2 01 60 79 FE 0385*      LD BC,-100000
0401C6 CD E9 01 04 0386*      CALL @one_digit
0401CA 01 F0 D8 FF 0387*      LD BC,-10000
0401CE CD E9 01 04 0388*      CALL @one_digit
0401D2 01 18 FC FF 0389*      LD BC,-1000
0401D6 CD E9 01 04 0390*      CALL @one_digit
0401DA 01 9C FF FF 0391*      LD BC,-100
0401DE CD E9 01 04 0392*      CALL @one_digit
0401E2 0E F6       0393*      LD C,-10
0401E4 CD E9 01 04 0394*      CALL @one_digit
0401E8 48          0395*      LD C,B
0401E9             0396*  @one_digit:
0401E9 3E 2F       0397*      LD A,'0'-1
0401EB             0398*  @divide_me:
0401EB 3C          0399*      INC A
0401EC 09          0400*      ADD HL,BC
0401ED 38 FC       0401*      JR C,@divide_me
0401EF ED 42       0402*      SBC HL,BC
0401F1 12          0403*      LD (DE),A
0401F2 13          0404*      INC DE
0401F3 C9          0405*      RET
0401F4             0406*  
0401F4             0407*  print_u24:
0401F4 D5          0408*      push de
0401F5 E5          0409*      push hl
0401F6 11 A2 01 04 0410*      ld de,_printDecBuffer
0401FA CD B2 01 04 0411*      call u24_to_ascii
0401FE 21 A2 01 04 0412*      ld hl,_printDecBuffer
040202 CD 77 00 04 0413*      call printString
040206 3E 20       0414*      ld a,' '
040208 5B D7       0415*      rst.lil 10h
04020A E1          0416*      pop hl
04020B D1          0417*      pop de
04020C C9          0418*      ret
04020D             0419*  
04020D             0420*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04020D             0421*  ; HL : Value to convert to string (integer part in H, fractional part in L)
04020D             0422*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04020D             0423*  u168_to_ascii:
04020D             0424*  ; add a leading space to make room for sign flag if needed
04020D 3E 20       0425*      ld a,' '
04020F 12          0426*      ld (de),a
040210 13          0427*      inc de
040211             0428*  ; Convert integer part
040211 E5          0429*      push hl ; Save HL (we’ll need the fractional part later)
040212 CD F7 06 04 0430*      call hlu_udiv256 ; Shift to get integer portion in HL
040216 01 F0 D8 FF 0431*      ld bc, -10000
04021A CD 3D 02 04 0432*      call @one_int
04021E 01 18 FC FF 0433*      ld bc, -1000
040222 CD 3D 02 04 0434*      call @one_int
040226 01 9C FF FF 0435*      ld bc, -100
04022A CD 3D 02 04 0436*      call @one_int
04022E 0E F6       0437*      ld c, -10
040230 CD 3D 02 04 0438*      call @one_int
040234 48          0439*      ld c, b
040235 CD 3D 02 04 0440*      call @one_int
040239 C3 48 02 04 0441*      jp @frac ; Jump to fractional part conversion
04023D             0442*  @one_int:
04023D 3E 2F       0443*      ld a, '0' - 1 ; Start ASCII character at '0'
04023F             0444*  @divide_me:
04023F 3C          0445*      inc a
040240 09          0446*      add hl, bc ; Accumulate until overflow
040241 38 FC       0447*      jr c, @divide_me
040243 ED 42       0448*      sbc hl, bc ; Remove excess after overflow
040245 12          0449*      ld (de), a ; Store ASCII digit
040246 13          0450*      inc de
040247 C9          0451*      ret
040248             0452*  ; Convert fractional part
040248             0453*  @frac:
040248 3E 2E       0454*      ld a, '.' ; Decimal point
04024A 12          0455*      ld (de), a
04024B 13          0456*      inc de
04024C E1          0457*      pop hl ; Restore HL with original fraction
04024D 06 03       0458*      ld b, 3 ; Loop counter for 3 fractional digits
04024F             0459*  @frac_loop:
04024F 26 0A       0460*      ld h, 10 ; Load multiplier for fractional part
040251 ED 6C       0461*      mlt hl ; Multiply by 10, result in HL (H holds the integer part)
040253 3E 30       0462*      ld a, '0'
040255 84          0463*      add a, h ; Convert integer part to ASCII
040256 12          0464*      ld (de), a
040257 13          0465*      inc de
040258 10 F5       0466*      djnz @frac_loop ; Repeat for each fractional digit
04025A             0467*  ; Add null terminator
04025A AF          0468*      xor a ; Null terminator
04025B 12          0469*      ld (de), a
04025C C9          0470*      ret
04025D             0471*  
04025D             0472*  print_u168:
04025D D5          0473*      push de
04025E E5          0474*      push hl
04025F 11 A2 01 04 0475*      ld de,_printDecBuffer
040263 CD 0D 02 04 0476*      call u168_to_ascii
040267 21 A2 01 04 0477*      ld hl,_printDecBuffer
04026B CD 77 00 04 0478*      call printString
04026F E1          0479*      pop hl
040270 D1          0480*      pop de
040271 C9          0481*      ret
040272             0482*  
040272             0483*  ; signed version of u168_to_ascii
040272             0484*  s168_to_ascii:
040272 D5          0485*      push de ; save starting address of buffer
040273 CD 90 06 04 0486*      call hlu_abs
040277 F5          0487*      push af ; save sign flag
040278 CD 0D 02 04 0488*      call u168_to_ascii
04027C F1          0489*      pop af ; restore sign flag
04027D D1          0490*      pop de ; restore starting address of buffer
04027E F0          0491*      ret p ; hlu was positive so nothing to do
04027F 3E 2D       0492*      ld a,'-'
040281 12          0493*      ld (de),a
040282 C9          0494*      ret
040283             0495*  
040283             0496*  print_s168:
040283 D5          0497*      push de
040284 E5          0498*      push hl
040285 11 A2 01 04 0499*      ld de,_printDecBuffer
040289 CD 72 02 04 0500*      call s168_to_ascii
04028D 21 A2 01 04 0501*      ld hl,_printDecBuffer
040291 CD 77 00 04 0502*      call printString
040295 E1          0503*      pop hl
040296 D1          0504*      pop de
040297 C9          0505*      ret
040298             0506*  
040298             0507*  print_s168_hl:
040298 F5          0508*      push af
040299 E5          0509*      push hl
04029A CD 83 02 04 0510*      call print_s168
04029E 3E 20       0511*      ld a,' '
0402A0 5B D7       0512*      rst.lil 10h
0402A2 E1          0513*      pop hl
0402A3 F1          0514*      pop af
0402A4 C9          0515*      ret
0402A5             0516*  
0402A5             0517*  print_s168_bc:
0402A5 F5          0518*      push af
0402A6 C5          0519*      push bc
0402A7 E5          0520*      push hl
0402A8 C5          0521*      push bc
0402A9 E1          0522*      pop hl
0402AA CD 83 02 04 0523*      call print_s168
0402AE 3E 20       0524*      ld a,' '
0402B0 5B D7       0525*      rst.lil 10h
0402B2 E1          0526*      pop hl
0402B3 C1          0527*      pop bc
0402B4 F1          0528*      pop af
0402B5 C9          0529*      ret
0402B6             0530*  
0402B6             0531*  print_s168_de:
0402B6 F5          0532*      push af
0402B7 D5          0533*      push de
0402B8 E5          0534*      push hl
0402B9 EB          0535*      ex de,hl
0402BA CD 83 02 04 0536*      call print_s168
0402BE 3E 20       0537*      ld a,' '
0402C0 5B D7       0538*      rst.lil 10h
0402C2 E1          0539*      pop hl
0402C3 D1          0540*      pop de
0402C4 F1          0541*      pop af
0402C5 C9          0542*      ret
0402C6             0543*  
0402C6             0544*  print_s168_hl_bc_de:
0402C6 F5          0545*      push af
0402C7 C5          0546*      push bc
0402C8 D5          0547*      push de
0402C9 E5          0548*      push hl
0402CA CD 83 02 04 0549*      call print_s168
0402CE 3E 20       0550*      ld a,' '
0402D0 5B D7       0551*      rst.lil 10h
0402D2 C5          0552*      push bc
0402D3 E1          0553*      pop hl
0402D4 CD 83 02 04 0554*      call print_s168
0402D8 3E 20       0555*      ld a,' '
0402DA 5B D7       0556*      rst.lil 10h
0402DC EB          0557*      ex de,hl
0402DD CD 83 02 04 0558*      call print_s168
0402E1 3E 20       0559*      ld a,' '
0402E3 5B D7       0560*      rst.lil 10h
0402E5 E1          0561*      pop hl
0402E6 D1          0562*      pop de
0402E7 C1          0563*      pop bc
0402E8 F1          0564*      pop af
0402E9 C9          0565*      ret
0402EA             0566*  
0402EA             0567*  print_s168_bc_de:
0402EA F5          0568*      push af
0402EB C5          0569*      push bc
0402EC D5          0570*      push de
0402ED C5          0571*      push bc
0402EE E1          0572*      pop hl
0402EF CD 83 02 04 0573*      call print_s168
0402F3 3E 20       0574*      ld a,' '
0402F5 5B D7       0575*      rst.lil 10h
0402F7 EB          0576*      ex de,hl
0402F8 CD 83 02 04 0577*      call print_s168
0402FC 3E 20       0578*      ld a,' '
0402FE 5B D7       0579*      rst.lil 10h
040300 E1          0580*      pop hl
040301 D1          0581*      pop de
040302 C1          0582*      pop bc
040303 F1          0583*      pop af
040304 C9          0584*      ret
040305             0585*  
040305             0586*  print_s168_a:
040305 F5          0587*      push af
040306 C5          0588*      push bc
040307 E5          0589*      push hl
040308 21 00 00 00 0590*      ld hl,0
04030C 6F          0591*      ld l,a
04030D CD 98 02 04 0592*      call print_s168_hl
040311 E1          0593*      pop hl
040312 C1          0594*      pop bc
040313 F1          0595*      pop af
040314 C9          0596*      ret
040315             0597*  
040315             0598*  ; #### new functions added by Brandon R. Gates ####
040315             0599*  
040315             0600*  ; print the binary representation of the 8-bit value in a
040315             0601*  ; destroys a, hl, bc
040315             0602*  printBin8:
040315 06 08       0603*      ld b,8 ; loop counter for 8 bits
040317 21 32 03 04 0604*      ld hl,@cmd ; set hl to the low byte of the output string
04031B             0605*      ; (which will be the high bit of the value in a)
04031B             0606*  @loop:
04031B 07          0607*      rlca ; put the next highest bit into carry
04031C 38 04       0608*      jr c,@one
04031E 36 30       0609*      ld (hl),'0'
040320 18 02       0610*      jr @next_bit
040322             0611*  @one:
040322 36 31       0612*      ld (hl),'1'
040324             0613*  @next_bit:
040324 23          0614*      inc hl
040325 10 F4       0615*      djnz @loop
040327             0616*  ; print it
040327 21 32 03 04 0617*      ld hl,@cmd
04032B 01 08 00 00 0618*      ld bc,@end-@cmd
04032F 5B DF       0619*      rst.lil $18
040331 C9          0620*      ret
040332             0621*  @cmd: ds 8 ; eight bytes for eight bits
04033A             0622*  @end:
04033A             0623*  
04033A             0624*  ; print the binary representation of the 8-bit value in a
04033A             0625*  ; in reverse order (lsb first)
04033A             0626*  ; destroys a, hl, bc
04033A             0627*  printBin8Rev:
04033A 06 08       0628*      ld b,8 ; loop counter for 8 bits
04033C 21 57 03 04 0629*      ld hl,@cmd ; set hl to the low byte of the output string
040340             0630*      ; (which will be the high bit of the value in a)
040340             0631*  @loop:
040340 0F          0632*      rrca ; put the next lowest bit into carry
040341 38 04       0633*      jr c,@one
040343 36 30       0634*      ld (hl),'0'
040345 18 02       0635*      jr @next_bit
040347             0636*  @one:
040347 36 31       0637*      ld (hl),'1'
040349             0638*  @next_bit:
040349 23          0639*      inc hl
04034A 10 F4       0640*      djnz @loop
04034C             0641*  ; print it
04034C 21 57 03 04 0642*      ld hl,@cmd
040350 01 08 00 00 0643*      ld bc,@end-@cmd
040354 5B DF       0644*      rst.lil $18
040356 C9          0645*      ret
040357             0646*  @cmd: ds 8 ; eight bytes for eight bits
04035F             0647*  @end:
04035F             0648*  
04035F             0649*  ; print registers to screen in hexidecimal format
04035F             0650*  ; inputs: none
04035F             0651*  ; outputs: values of every register printed to screen
04035F             0652*  ;    values of each register in global scratch memory
04035F             0653*  ; destroys: nothing
04035F             0654*  stepRegistersHex:
04035F             0655*  ; store everything in scratch
04035F 22 9B 05 04 0656*      ld (uhl),hl
040363 ED 43 9E 05 0657*      ld (ubc),bc
       04          
040368 ED 53 A1 05 0658*      ld (ude),de
       04          
04036D DD 22 A4 05 0659*      ld (uix),ix
       04          
040372 FD 22 A7 05 0660*      ld (uiy),iy
       04          
040377 F5          0661*      push af ; fml
040378 E1          0662*      pop hl ; thanks, zilog
040379 22 98 05 04 0663*      ld (uaf),hl
04037D F5          0664*      push af ; dammit
04037E             0665*  
04037E             0666*  ; home the cursor
04037E             0667*      ; call vdu_home_cursor
04037E             0668*  
04037E             0669*  ; print each register
04037E 21 1E 05 04 0670*      ld hl,str_afu
040382 CD 77 00 04 0671*      call printString
040386 2A 98 05 04 0672*      ld hl,(uaf)
04038A CD 97 00 04 0673*      call printHex24
04038E CD 8C 00 04 0674*      call printNewLine
040392             0675*  
040392 21 23 05 04 0676*      ld hl,str_hlu
040396 CD 77 00 04 0677*      call printString
04039A 2A 9B 05 04 0678*      ld hl,(uhl)
04039E CD 97 00 04 0679*      call printHex24
0403A2 CD 8C 00 04 0680*      call printNewLine
0403A6             0681*  
0403A6 21 28 05 04 0682*      ld hl,str_bcu
0403AA CD 77 00 04 0683*      call printString
0403AE 2A 9E 05 04 0684*      ld hl,(ubc)
0403B2 CD 97 00 04 0685*      call printHex24
0403B6 CD 8C 00 04 0686*      call printNewLine
0403BA             0687*  
0403BA 21 2D 05 04 0688*      ld hl,str_deu
0403BE CD 77 00 04 0689*      call printString
0403C2 2A A1 05 04 0690*      ld hl,(ude)
0403C6 CD 97 00 04 0691*      call printHex24
0403CA CD 8C 00 04 0692*      call printNewLine
0403CE             0693*  
0403CE 21 32 05 04 0694*      ld hl,str_ixu
0403D2 CD 77 00 04 0695*      call printString
0403D6 2A A4 05 04 0696*      ld hl,(uix)
0403DA CD 97 00 04 0697*      call printHex24
0403DE CD 8C 00 04 0698*      call printNewLine
0403E2             0699*  
0403E2 21 37 05 04 0700*      ld hl,str_iyu
0403E6 CD 77 00 04 0701*      call printString
0403EA 2A A7 05 04 0702*      ld hl,(uiy)
0403EE CD 97 00 04 0703*      call printHex24
0403F2 CD 8C 00 04 0704*      call printNewLine
0403F6             0705*  
0403F6             0706*      ; call vsync
0403F6             0707*  
0403F6 CD 8C 00 04 0708*      call printNewLine
0403FA             0709*  
0403FA             0710*  ; check for right shift key and quit if pressed
0403FA             0711*      MOSCALL mos_getkbmap
0403FA 3E 1E       0001*M 			LD	A, function
0403FC 5B CF       0002*M 			RST.LIL	08h
0403FE             0712*  @stayhere:
0403FE             0713*  ; 7 RightShift
0403FE DD CB 00 76 0714*      bit 6,(ix+0)
040402 20 02       0715*      jr nz,@RightShift
040404 18 F8       0716*      jr @stayhere
040406             0717*  @RightShift:
040406 DD CB 0E 86 0718*      res 0,(ix+14) ; debounce the key (hopefully)
04040A 3E 80       0719*      ld a,%10000000
04040C             0720*      ; call multiPurposeDelay
04040C             0721*  
04040C             0722*  ; restore everything
04040C 2A 9B 05 04 0723*      ld hl, (uhl)
040410 ED 4B 9E 05 0724*      ld bc, (ubc)
       04          
040415 ED 5B A1 05 0725*      ld de, (ude)
       04          
04041A DD 2A A4 05 0726*      ld ix, (uix)
       04          
04041F FD 2A A7 05 0727*      ld iy, (uiy)
       04          
040424 F1          0728*      pop af
040425             0729*  ; all done
040425 C9          0730*      ret
040426             0731*  
040426             0732*  ; print registers to screen in hexidecimal format
040426             0733*  ; inputs: none
040426             0734*  ; outputs: values of every register printed to screen
040426             0735*  ;    values of each register in global scratch memory
040426             0736*  ; destroys: nothing
040426             0737*  dumpRegistersHex:
040426             0738*  ; store everything in scratch
040426 22 9B 05 04 0739*      ld (uhl),hl
04042A ED 43 9E 05 0740*      ld (ubc),bc
       04          
04042F ED 53 A1 05 0741*      ld (ude),de
       04          
040434 DD 22 A4 05 0742*      ld (uix),ix
       04          
040439 FD 22 A7 05 0743*      ld (uiy),iy
       04          
04043E F5          0744*      push af ; fml
04043F E1          0745*      pop hl ; thanks, zilog
040440 22 98 05 04 0746*      ld (uaf),hl
040444 F5          0747*      push af ; dammit
040445             0748*  
040445             0749*  ; home the cursor
040445             0750*      ; call vdu_home_cursor
040445             0751*      ; call printNewLine
040445             0752*  
040445             0753*  ; print each register
040445 21 1E 05 04 0754*      ld hl,str_afu
040449 CD 77 00 04 0755*      call printString
04044D 2A 98 05 04 0756*      ld hl,(uaf)
040451 CD 97 00 04 0757*      call printHex24
040455             0758*      ; call printNewLine
040455             0759*  
040455 21 23 05 04 0760*      ld hl,str_hlu
040459 CD 77 00 04 0761*      call printString
04045D 2A 9B 05 04 0762*      ld hl,(uhl)
040461 CD 97 00 04 0763*      call printHex24
040465             0764*      ; call printNewLine
040465             0765*  
040465 21 28 05 04 0766*      ld hl,str_bcu
040469 CD 77 00 04 0767*      call printString
04046D 2A 9E 05 04 0768*      ld hl,(ubc)
040471 CD 97 00 04 0769*      call printHex24
040475             0770*      ; call printNewLine
040475             0771*  
040475 21 2D 05 04 0772*      ld hl,str_deu
040479 CD 77 00 04 0773*      call printString
04047D 2A A1 05 04 0774*      ld hl,(ude)
040481 CD 97 00 04 0775*      call printHex24
040485             0776*      ; call printNewLine
040485             0777*  
040485 21 32 05 04 0778*      ld hl,str_ixu
040489 CD 77 00 04 0779*      call printString
04048D 2A A4 05 04 0780*      ld hl,(uix)
040491 CD 97 00 04 0781*      call printHex24
040495             0782*      ; call printNewLine
040495             0783*  
040495 21 37 05 04 0784*      ld hl,str_iyu
040499 CD 77 00 04 0785*      call printString
04049D 2A A7 05 04 0786*      ld hl,(uiy)
0404A1 CD 97 00 04 0787*      call printHex24
0404A5             0788*      ; call printNewLine
0404A5             0789*  
0404A5             0790*      ; call vdu_vblank
0404A5             0791*  
0404A5             0792*      ; call printNewLine
0404A5             0793*  ; restore everything
0404A5 2A 9B 05 04 0794*      ld hl, (uhl)
0404A9 ED 4B 9E 05 0795*      ld bc, (ubc)
       04          
0404AE ED 5B A1 05 0796*      ld de, (ude)
       04          
0404B3 DD 2A A4 05 0797*      ld ix, (uix)
       04          
0404B8 FD 2A A7 05 0798*      ld iy, (uiy)
       04          
0404BD F1          0799*      pop af
0404BE             0800*  ; all done
0404BE C9          0801*      ret
0404BF             0802*  
0404BF             0803*  dumpRegistersHexPrime:
0404BF D9          0804*      exx
0404C0 08          0805*      ex af,af'
0404C1 CD 26 04 04 0806*      call dumpRegistersHex
0404C5 08          0807*      ex af,af'
0404C6 D9          0808*      exx
0404C7 C9          0809*      ret
0404C8             0810*  
0404C8             0811*  ; additionally dump prime registers
0404C8             0812*  ; inputs: none
0404C8             0813*  ; outputs: values of every register printed to screen
0404C8             0814*  ; destroys: nothing
0404C8             0815*  dumpRegistersHexAll:
0404C8 CD 26 04 04 0816*      call dumpRegistersHex
0404CC 08          0817*      ex af,af'
0404CD D9          0818*      exx
0404CE CD 26 04 04 0819*      call dumpRegistersHex
0404D2 08          0820*      ex af,af'
0404D3 D9          0821*      exx
0404D4 C9          0822*      ret
0404D5             0823*  
0404D5             0824*  ; print hlu to screen in hexidecimal format
0404D5             0825*  ; inputs: none
0404D5             0826*  ; destroys: nothing
0404D5             0827*  print_hex_hl:
0404D5 F5          0828*      push af
0404D6 E5          0829*      push hl
0404D7 21 23 05 04 0830*      ld hl,str_hlu
0404DB CD 77 00 04 0831*      call printString
0404DF E1          0832*      pop hl
0404E0 E5          0833*      push hl
0404E1 CD 97 00 04 0834*      call printHex24
0404E5 3E 20       0835*      ld a,' '
0404E7 5B D7       0836*      rst.lil 10h
0404E9 E1          0837*      pop hl
0404EA F1          0838*      pop af
0404EB C9          0839*      ret
0404EC             0840*  
0404EC             0841*  ; print bcu to screen in hexidecimal format
0404EC             0842*  ; inputs: none
0404EC             0843*  ; destroys: nothing
0404EC             0844*  print_hex_bc:
0404EC F5          0845*      push af
0404ED E5          0846*      push hl
0404EE C5          0847*      push bc
0404EF 21 28 05 04 0848*      ld hl,str_bcu
0404F3 CD 77 00 04 0849*      call printString
0404F7 E1          0850*      pop hl
0404F8 E5          0851*      push hl
0404F9 CD 97 00 04 0852*      call printHex24
0404FD 3E 20       0853*      ld a,' '
0404FF 5B D7       0854*      rst.lil 10h
040501 C1          0855*      pop bc
040502 E1          0856*      pop hl
040503 F1          0857*      pop af
040504 C9          0858*      ret
040505             0859*  
040505             0860*  ; print deu to screen in hexidecimal format
040505             0861*  ; inputs: none
040505             0862*  ; destroys: nothing
040505             0863*  print_hex_de:
040505 F5          0864*      push af
040506 E5          0865*      push hl
040507 D5          0866*      push de
040508 21 2D 05 04 0867*      ld hl,str_deu
04050C CD 77 00 04 0868*      call printString
040510 E1          0869*      pop hl
040511 E5          0870*      push hl
040512 CD 97 00 04 0871*      call printHex24
040516 3E 20       0872*      ld a,' '
040518 5B D7       0873*      rst.lil 10h
04051A D1          0874*      pop de
04051B E1          0875*      pop hl
04051C F1          0876*      pop af
04051D C9          0877*      ret
04051E             0878*  
04051E 20 61 66 3D 0879*  str_afu: db " af=",0
       00          
040523 20 68 6C 3D 0880*  str_hlu: db " hl=",0
       00          
040528 20 62 63 3D 0881*  str_bcu: db " bc=",0
       00          
04052D 20 64 65 3D 0882*  str_deu: db " de=",0
       00          
040532 20 69 78 3D 0883*  str_ixu: db " ix=",0
       00          
040537 20 69 79 3D 0884*  str_iyu: db " iy=",0
       00          
04053C             0885*  
04053C             0886*  ; print udeuhl to screen in hexidecimal format
04053C             0887*  ; inputs: none
04053C             0888*  ; outputs: concatenated hexidecimal udeuhl
04053C             0889*  ; destroys: nothing
04053C             0890*  dumpUDEUHLHex:
04053C             0891*  ; store everything in scratch
04053C 22 9B 05 04 0892*      ld (uhl),hl
040540 ED 43 9E 05 0893*      ld (ubc),bc
       04          
040545 ED 53 A1 05 0894*      ld (ude),de
       04          
04054A DD 22 A4 05 0895*      ld (uix),ix
       04          
04054F FD 22 A7 05 0896*      ld (uiy),iy
       04          
040554 F5          0897*      push af
040555             0898*  
040555             0899*  ; print each register
040555             0900*  
040555 21 8F 05 04 0901*      ld hl,str_udeuhl
040559 CD 77 00 04 0902*      call printString
04055D 2A A1 05 04 0903*      ld hl,(ude)
040561 CD 97 00 04 0904*      call printHex24
040565 3E 2E       0905*      ld a,'.' ; print a dot to separate the values
040567 5B D7       0906*      rst.lil 10h
040569 2A 9B 05 04 0907*      ld hl,(uhl)
04056D CD 97 00 04 0908*      call printHex24
040571 CD 8C 00 04 0909*      call printNewLine
040575             0910*  
040575             0911*  ; restore everything
040575 2A 9B 05 04 0912*      ld hl, (uhl)
040579 ED 4B 9E 05 0913*      ld bc, (ubc)
       04          
04057E ED 5B A1 05 0914*      ld de, (ude)
       04          
040583 DD 2A A4 05 0915*      ld ix, (uix)
       04          
040588 FD 2A A7 05 0916*      ld iy, (uiy)
       04          
04058D F1          0917*      pop af
04058E             0918*  ; all done
04058E C9          0919*      ret
04058F             0920*  
04058F 75 64 65 2E 0921*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
040598             0922*  
040598             0923*  ; global scratch memory for registers
040598 00 00 00    0924*  uaf: dl 0
04059B 00 00 00    0925*  uhl: dl 0
04059E 00 00 00    0926*  ubc: dl 0
0405A1 00 00 00    0927*  ude: dl 0
0405A4 00 00 00    0928*  uix: dl 0
0405A7 00 00 00    0929*  uiy: dl 0
0405AA 00 00 00    0930*  usp: dl 0
0405AD 00 00 00    0931*  upc: dl 0
0405B0             0932*  
0405B0             0933*  ; inputs: whatever is in the flags register
0405B0             0934*  ; outputs: binary representation of flags
0405B0             0935*  ;          with a header so we know which is what
0405B0             0936*  ; destroys: nothing
0405B0             0937*  ; preserves: everything
0405B0             0938*  dumpFlags:
0405B0             0939*  ; first we curse zilog for not giving direct access to flags
0405B0 F5          0940*      push af ; this is so we can send it back unharmed
0405B1 F5          0941*      push af ; this is so we can pop it to hl
0405B2             0942*  ; store everything in scratch
0405B2 22 9B 05 04 0943*      ld (uhl),hl
0405B6 ED 43 9E 05 0944*      ld (ubc),bc
       04          
0405BB ED 53 A1 05 0945*      ld (ude),de
       04          
0405C0 DD 22 A4 05 0946*      ld (uix),ix
       04          
0405C5 FD 22 A7 05 0947*      ld (uiy),iy
       04          
0405CA             0948*  ; next we print the header
0405CA 21 F6 05 04 0949*      ld hl,@header
0405CE CD 77 00 04 0950*      call printString
0405D2 E1          0951*      pop hl ; flags are now in l
0405D3 7D          0952*      ld a,l ; flags are now in a
0405D4 CD 15 03 04 0953*      call printBin8
0405D8 CD 8C 00 04 0954*      call printNewLine
0405DC             0955*  ; restore everything
0405DC 2A 9B 05 04 0956*      ld hl, (uhl)
0405E0 ED 4B 9E 05 0957*      ld bc, (ubc)
       04          
0405E5 ED 5B A1 05 0958*      ld de, (ude)
       04          
0405EA DD 2A A4 05 0959*      ld ix, (uix)
       04          
0405EF FD 2A A7 05 0960*      ld iy, (uiy)
       04          
0405F4 F1          0961*      pop af ; send her home the way she came
0405F5 C9          0962*      ret
0405F6             0963*  ; Bit 7 (S): Sign flag
0405F6             0964*  ; Bit 6 (Z): Zero flag
0405F6             0965*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0405F6             0966*  ; Bit 4 (H): Half Carry flag
0405F6             0967*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0405F6             0968*  ; Bit 2 (PV): Parity/Overflow flag
0405F6             0969*  ; Bit 1 (N): Subtract flag
0405F6             0970*  ; Bit 0 (C): Carry flag
0405F6 53 5A 78 48 0971*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
040601             0972*  
040601             0973*  ; set all the bits in the flag register
040601             0974*  ; more of an academic exercise than anything useful
040601             0975*  ; inputs; none
040601             0976*  ; outputs; a=0,f=255
040601             0977*  ; destroys: flags, hl
040601             0978*  ; preserves: a, because why not
040601             0979*  setAllFlags:
040601 21 FF 00 00 0980*      ld hl,255
040605 67          0981*      ld h,a ; four cycles to preserve a is cheap
040606 E5          0982*      push hl
040607 F1          0983*      pop af
040608 C9          0984*      ret
040609             0985*  
040609             0986*  ; reset all the bits in the flag register
040609             0987*  ; unlike its inverse counterpart, this may actually be useful
040609             0988*  ; inputs; none
040609             0989*  ; outputs; a=0,f=0
040609             0990*  ; destroys: flags, hl
040609             0991*  ; preserves: a, because why not
040609             0992*  resetAllFlags:
040609 21 00 00 00 0993*      ld hl,0
04060D 67          0994*      ld h,a ; four cycles to preserve a is cheap
04060E E5          0995*      push hl
04060F F1          0996*      pop af
040610 C9          0997*      ret
040611             0998*  
040611             0999*  ; wait until user presses a key
040611             1000*  ; inputs: none
040611             1001*  ; outputs: ascii code of key pressed in a
040611             1002*  ; destroys: af,ix
040611             1003*  waitKeypress:
040611             1004*      MOSCALL mos_getkey
040611 3E 00       0001*M 			LD	A, function
040613 5B CF       0002*M 			RST.LIL	08h
040615 C9          1005*      ret
040616             1006*  
040616             1007*  ; print bytes from an address to the screen in hexidecimal format
040616             1008*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040616             1009*  ; outputs: values of each byte printed to screen separated by spaces
040616             1010*  ; destroys: nothing
040616             1011*  dumpMemoryHex:
040616             1012*  ; save registers to the stack
040616 C5          1013*      push bc
040617 E5          1014*      push hl
040618 F5          1015*      push af
040619             1016*  
040619             1017*  ; print the address and separator
040619 CD 97 00 04 1018*      call printHex24
04061D 3E 3A       1019*      ld a,':'
04061F 5B D7       1020*      rst.lil 10h
040621 3E 20       1021*      ld a,' '
040623 5B D7       1022*      rst.lil 10h
040625             1023*  
040625             1024*  ; set b to be our loop counter
040625 F1          1025*      pop af
040626 47          1026*      ld b,a
040627 E1          1027*      pop hl
040628 E5          1028*      push hl
040629 F5          1029*      push af
04062A             1030*  @loop:
04062A             1031*  ; print the byte
04062A 7E          1032*      ld a,(hl)
04062B CD A5 00 04 1033*      call printHex8
04062F             1034*  ; print a space
04062F 3E 20       1035*      ld a,' '
040631 5B D7       1036*      rst.lil 10h
040633 23          1037*      inc hl
040634 10 F4       1038*      djnz @loop
040636 CD 8C 00 04 1039*      call printNewLine
04063A             1040*  
04063A             1041*  ; restore everything
04063A F1          1042*      pop af
04063B E1          1043*      pop hl
04063C C1          1044*      pop bc
04063D             1045*  
04063D             1046*  ; all done
04063D C9          1047*      ret
04063E             1048*  
04063E             1049*  
04063E             1050*  ; print bytes from an address to the screen in binary format
04063E             1051*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04063E             1052*  ; outputs: values of each byte printed to screen separated by spaces
04063E             1053*  ; destroys: nothing
04063E             1054*  dumpMemoryBin:
04063E             1055*  ; save all registers to the stack
04063E F5          1056*      push af
04063F C5          1057*      push bc
040640 D5          1058*      push de
040641 E5          1059*      push hl
040642 DD E5       1060*      push ix
040644 FD E5       1061*      push iy
040646             1062*  
040646             1063*  ; set b to be our loop counter
040646 47          1064*      ld b,a
040647             1065*  @loop:
040647             1066*  ; print the byte
040647 7E          1067*      ld a,(hl)
040648 E5          1068*      push hl
040649 C5          1069*      push bc
04064A CD 15 03 04 1070*      call printBin8
04064E C1          1071*      pop bc
04064F             1072*  ; print a space
04064F 3E 20       1073*      ld a,' '
040651 5B D7       1074*      rst.lil 10h
040653 E1          1075*      pop hl
040654 23          1076*      inc hl
040655 10 F0       1077*      djnz @loop
040657 CD 8C 00 04 1078*      call printNewLine
04065B             1079*  
04065B             1080*  ; restore everything
04065B FD E1       1081*      pop iy
04065D DD E1       1082*      pop ix
04065F E1          1083*      pop hl
040660 D1          1084*      pop de
040661 C1          1085*      pop bc
040662 F1          1086*      pop af
040663             1087*  ; all done
040663 C9          1088*      ret
040664             1089*  
040664             1090*  ; print bytes from an address to the screen in binary format
040664             1091*  ; with the bits of each byte in reverse order (lsb first)
040664             1092*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040664             1093*  ; outputs: values of each byte printed to screen separated by spaces
040664             1094*  ; destroys: nothing
040664             1095*  dumpMemoryBinRev:
040664             1096*  ; save all registers to the stack
040664 F5          1097*      push af
040665 C5          1098*      push bc
040666 D5          1099*      push de
040667 E5          1100*      push hl
040668 DD E5       1101*      push ix
04066A FD E5       1102*      push iy
04066C             1103*  
04066C             1104*  ; set b to be our loop counter
04066C 47          1105*      ld b,a
04066D             1106*  @loop:
04066D             1107*  ; print the byte
04066D 7E          1108*      ld a,(hl)
04066E E5          1109*      push hl
04066F C5          1110*      push bc
040670 CD 3A 03 04 1111*      call printBin8Rev
040674 C1          1112*      pop bc
040675             1113*  ; print a space
040675 3E 20       1114*      ld a,' '
040677 5B D7       1115*      rst.lil 10h
040679 E1          1116*      pop hl
04067A 23          1117*      inc hl
04067B 10 F0       1118*      djnz @loop
04067D CD 8C 00 04 1119*      call printNewLine
040681             1120*  
040681             1121*  ; restore everything
040681 FD E1       1122*      pop iy
040683 DD E1       1123*      pop ix
040685 E1          1124*      pop hl
040686 D1          1125*      pop de
040687 C1          1126*      pop bc
040688 F1          1127*      pop af
040689             1128*  ; all done
040689 C9          1129*      ret
04068A             0031       include "maths.inc"
04068A             0001*  ; test the sign of HL
04068A             0002*  ; inputs: HL obviously
04068A             0003*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
04068A             0004*  ; destroys: flags
04068A             0005*      MACRO sign_hlu
04068A             0006*      add hl,de
04068A             0007*      or a
04068A             0008*      sbc hl,de
04068A             0009*      ENDMACRO
04068A             0010*  
04068A             0011*  
04068A             0012*  ;------------------------------------------------------------------------
04068A             0013*  ; Scratch area for calculations
04068A             0014*  ;------------------------------------------------------------------------
04068A 00 00 00    0015*  scratch1: dw24 0 ;bit manipulation buffer 1
04068D 00 00 00    0016*  scratch2: dw24 0 ;bit manipulation buffer 2
040690             0017*  
040690             0018*  ; absolute value of hlu
040690             0019*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040690             0020*  ;         s1,z0,pv0,n1,c0 if hlu was negative
040690             0021*  ;         s0,z1,pv0,n1,c0 if hlu was zero
040690             0022*  ;         s0,z0,pv0,n1,c0 if hlu was positive
040690             0023*  ; destroys: a
040690             0024*  hlu_abs:
040690 19          0025*      add hl,de
040691 B7          0026*      or a
040692 ED 52       0027*      sbc hl,de
040694 FA 99 06 04 0028*      jp m,@is_neg
040698 C9          0029*      ret ; hlu is positive or zero so we're done
040699             0030*  @is_neg:
040699 F5          0031*      push af ; otherwise, save current flags for return
04069A CD A0 06 04 0032*      call neg_hlu ; negate hlu
04069E F1          0033*      pop af ; get back flags
04069F C9          0034*      ret
0406A0             0035*  
0406A0             0036*  ; flip the sign of hlu
0406A0             0037*  ; inputs: hlu
0406A0             0038*  ; returns: 0-hlu, flags set appropriately for the result:
0406A0             0039*  ;         s1,z0,pv0,n1,c1 if result is negative
0406A0             0040*  ;         s0,z1,pv0,n1,c0 if result is zero
0406A0             0041*  ;         s0,z0,pv0,n1,c1 if result is positive
0406A0             0042*  ; destroys a
0406A0             0043*  neg_hlu:
0406A0 D5          0044*      push de ; save de
0406A1 EB          0045*      ex de,hl ; put hl into de
0406A2 21 00 00 00 0046*      ld hl,0 ; clear hl
0406A6 AF          0047*      xor a ; clear carry
0406A7 ED 52       0048*      sbc hl,de ; 0-hlu = -hlu
0406A9 D1          0049*      pop de ; get de back
0406AA C9          0050*      ret ; easy peasy
0406AB             0051*  
0406AB             0052*  ;------------------------------------------------------------------------
0406AB             0053*  ; divide hlu by 2, inspired by above
0406AB             0054*  ;------------------------------------------------------------------------
0406AB             0055*  hlu_div2:
0406AB 22 8A 06 04 0056*      ld (scratch1),hl
0406AF 21 8C 06 04 0057*      ld hl,scratch1+2
0406B3 CB 1E       0058*      rr (hl)
0406B5 2B          0059*      dec hl
0406B6 CB 1E       0060*      rr (hl)
0406B8 2B          0061*      dec hl
0406B9 CB 1E       0062*      rr (hl)
0406BB 23          0063*      inc hl
0406BC 23          0064*      inc hl
0406BD 2A 8A 06 04 0065*      ld hl,(scratch1)
0406C1 C9          0066*      ret
0406C2             0067*  
0406C2             0068*  ; this is my little hack to divide by 16
0406C2             0069*  hlu_div16:
0406C2 AF          0070*      xor a
0406C3 29          0071*      add hl,hl
0406C4 17          0072*      rla
0406C5 29          0073*      add hl,hl
0406C6 17          0074*      rla
0406C7 29          0075*      add hl,hl
0406C8 17          0076*      rla
0406C9 29          0077*      add hl,hl
0406CA 17          0078*      rla
0406CB 22 D8 06 04 0079*      ld (@scratch),hl
0406CF 32 DB 06 04 0080*      ld (@scratch+3),a
0406D3 2A D9 06 04 0081*      ld hl,(@scratch+1)
0406D7 C9          0082*      ret
0406D8             0083*  @scratch: ds 4
0406DC             0084*  
0406DC             0085*  ; hlu signed division by 256
0406DC             0086*  ; returns: hlu / 256
0406DC             0087*  ; destroys: af
0406DC             0088*  hlu_sdiv256:
0406DC AF          0089*      xor a ; assume hl is positive
0406DD 22 F3 06 04 0090*      ld (@buffer),hl
0406E1             0091*      sign_hlu
0406E1 19          0001*M     add hl,de
0406E2 B7          0002*M     or a
0406E3 ED 52       0003*M     sbc hl,de
0406E5 F2 EA 06 04 0092*      jp p,@hl_pos
0406E9 3D          0093*      dec a
0406EA             0094*  @hl_pos:
0406EA 32 F6 06 04 0095*      ld (@buffer+3),a
0406EE 2A F4 06 04 0096*      ld hl,(@buffer+1)
0406F2 C9          0097*      ret
0406F3             0098*  @buffer: ds 4
0406F7             0099*  
0406F7             0100*  ; hlu 1 byte right shift, unsigned
0406F7             0101*  ; returns: hlu / 256, fractional portion in a
0406F7             0102*  ; destroys: af
0406F7             0103*  hlu_udiv256:
0406F7 AF          0104*      xor a
0406F8 32 09 07 04 0105*      ld (@buffer+3),a
0406FC 7D          0106*      ld a,l ; save the fractional portion
0406FD 22 06 07 04 0107*      ld (@buffer),hl
040701 2A 07 07 04 0108*      ld hl,(@buffer+1)
040705 C9          0109*      ret
040706             0110*  @buffer: ds 4
04070A             0111*  
04070A             0112*      MACRO hlu_mul256
04070A             0113*      add hl,hl ; * 2
04070A             0114*      add hl,hl ; * 4
04070A             0115*      add hl,hl ; * 8
04070A             0116*      add hl,hl ; * 16
04070A             0117*      add hl,hl ; * 32
04070A             0118*      add hl,hl ; * 64
04070A             0119*      add hl,hl ; * 128
04070A             0120*      add hl,hl ; * 256
04070A             0121*      ENDMACRO
04070A             0122*  
04070A             0123*  ; compute the modulo of hlu by deu
04070A             0124*  ; outputs: hlu = hlu % deu
04070A             0125*  ; destroys: f, hl
04070A             0126*  hlu_mod:
04070A B7          0127*      or a ; clear carry
04070B             0128*  @loop:
04070B ED 52       0129*      sbc hl,de
04070D DA 15 07 04 0130*      jp c, @end
040711 C3 0B 07 04 0131*      jp @loop
040715             0132*  @end:
040715 19          0133*      add hl,de
040716 C9          0134*      ret
040717             0135*  
040717             0136*  
040717 00 00 00 00 0137*  add_bcd_arg1: db #00,#00,#00,#00
04071B 00 00 00 00 0138*  add_bcd_arg2: db #00,#00,#00,#00
04071F             0139*  
04071F             0140*  ; set bcd values in a scratch memory address from registers bcde
04071F             0141*  ; input: hl; scratch address,bcde; 8-place bcd number
04071F             0142*  ; destroys ; hl
04071F             0143*  set_bcd:
04071F 73          0144*      ld (hl),e
040720 23          0145*      inc hl
040721 72          0146*      ld (hl),d
040722 23          0147*      inc hl
040723 71          0148*      ld (hl),c
040724 23          0149*      inc hl
040725 70          0150*      ld (hl),b
040726 C9          0151*      ret
040727             0152*  
040727             0153*  ; load bcd values from a scratch memory address to bcde
040727             0154*  ; input: hl; scratch address
040727             0155*  ; output: bcde; 8-place bcd number
040727             0156*  ; destroys: hl
040727             0157*  get_bcd:
040727 5E          0158*      ld e,(hl)
040728 23          0159*      inc hl
040729 56          0160*      ld d,(hl)
04072A 23          0161*      inc hl
04072B 4E          0162*      ld c,(hl)
04072C 23          0163*      inc hl
04072D 46          0164*      ld b,(hl)
04072E C9          0165*      ret
04072F             0166*  
04072F             0167*  ; BCD addition
04072F             0168*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04072F             0169*  ;       a is the number of bytes holding each number (number of places/2)
04072F             0170*  ; outputs: (hl) + (de) --> (hl)
04072F             0171*  ; destroys: a,b,de,hl
04072F             0172*  add_bcd:
04072F 47          0173*      ld b,a ; loop counter
040730 AF          0174*      xor a ; reset a, clear carry flag
040731             0175*  adcec:
040731 1A          0176*      ld a,(de) ; addend to acc
040732 8E          0177*      adc a,(hl) ; add (hl) to acc
040733 27          0178*      daa ; adjust result to bcd
040734 77          0179*      ld (hl),a ; store result
040735 23          0180*      inc hl ; advance memory pointers
040736 13          0181*      inc de
040737 10 F8       0182*      djnz adcec ; loop until b == 0
040739 C9          0183*      ret
04073A             0184*  
04073A             0185*  ; BCD subtraction
04073A             0186*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04073A             0187*  ;       a is the number of bytes holding each number (number of places/2)
04073A             0188*  ; outputs: (hl) - (de) --> (hl)
04073A             0189*  ; destroys: a,b,de,hl
04073A             0190*  sub_bcd:
04073A 47          0191*      ld b,a ; loop counter
04073B AF          0192*      xor a ; reset a,clear carry flag
04073C             0193*  subdec:
04073C 1A          0194*      ld a,(de) ; subtrahend to acc
04073D 9E          0195*      sbc a,(hl) ; subtract (hl) from acc
04073E 27          0196*      daa ; adjust result to bcd
04073F 77          0197*      ld (hl),a ; store result
040740 23          0198*      inc hl ; advance memory pointers
040741 13          0199*      inc de
040742 10 F8       0200*      djnz subdec ; loop until b == 0
040744 C9          0201*      ret
040745             0202*  
040745             0203*  ; http://www.z80.info/pseudo-random.txt
040745             0204*  rand_8:
040745 C5          0205*      push bc
040746 3A 59 07 04 0206*      ld a,(r_seed)
04074A 4F          0207*      ld c,a
04074B             0208*  
04074B 0F          0209*      rrca ; multiply by 32
04074C 0F          0210*      rrca
04074D 0F          0211*      rrca
04074E EE 1F       0212*      xor 0x1f
040750             0213*  
040750 81          0214*      add a,c
040751 DE FF       0215*      sbc a,255 ; carry
040753             0216*  
040753 32 59 07 04 0217*      ld (r_seed),a
040757 C1          0218*      pop bc
040758 C9          0219*      ret
040759 50          0220*  r_seed: defb $50
04075A             0221*  
04075A             0222*  ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
04075A             0223*  prng24:
04075A             0224*  ;;Expects ADL mode.
04075A             0225*  ;;Output: HL
04075A             0226*  ;;50cc
04075A             0227*  ;;33 bytes
04075A             0228*  ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
04075A ED 5B 7B 07 0229*      ld de,(seed1)
       04          
04075F B7          0230*      or a
040760 ED 62       0231*      sbc hl,hl
040762 19          0232*      add hl,de
040763 29          0233*      add hl,hl
040764 29          0234*      add hl,hl
040765 2C          0235*      inc l
040766 19          0236*      add hl,de
040767 22 7B 07 04 0237*      ld (seed1),hl
04076B 2A 7E 07 04 0238*      ld hl,(seed2)
04076F 29          0239*      add hl,hl
040770 9F          0240*      sbc a,a
040771 E6 1B       0241*      and %00011011
040773 AD          0242*      xor l
040774 6F          0243*      ld l,a
040775 22 7E 07 04 0244*      ld (seed2),hl
040779 19          0245*      add hl,de
04077A C9          0246*      ret
04077B 00 00 00    0247*  seed1: dl 0
04077E 00 00 00    0248*  seed2: dl 0
040781             0032       include "files.inc"
040781             0001*  ; load to onboard 8k sram
040781             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
040781             0033       include "fixed168.inc"
040781             0001*  ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040781             0002*  ; uses EZ80 MLT instruction for speed
040781             0003*  ; operation: UHL * A --> UHL
040781             0004*  ; destroys: AF, HL
040781             0005*  smul24x8:
040781             0006*  ; make hl positive and store sign flag
040781 CD 90 06 04 0007*      call hlu_abs
040785 F5          0008*      push af
040786             0009*  ; do the division
040786 CD 91 07 04 0010*      call mul24x8 ; hl = product
04078A             0011*  ; adjust sign of result
04078A F1          0012*      pop af ; sign de
04078B F0          0013*      ret p ; hl was positive, nothing to do
04078C CD A0 06 04 0014*      call neg_hlu ; result is negative
040790 C9          0015*      ret
040791             0016*  
040791             0017*  ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040791             0018*  ; uses EZ80 MLT instruction for speed
040791             0019*  ; operation: UHL * A --> AUHL
040791             0020*  ; destroys: AF, HL
040791             0021*  mul24x8:
040791 D5          0022*      push de ; preserve de
040792             0023*  ; low byte
040792 5D          0024*      ld e,l
040793 57          0025*      ld d,a
040794 ED 5C       0026*      mlt de
040796 6B          0027*      ld l,e ; product low byte
040797 08          0028*      ex af,af' ; save multiplier
040798 7A          0029*      ld a,d ; carry
040799 08          0030*      ex af,af' ; save carry, restore multiplier
04079A             0031*  ; high byte
04079A 5C          0032*      ld e,h
04079B 57          0033*      ld d,a
04079C ED 5C       0034*      mlt de
04079E 08          0035*      ex af,af' ; save multiplier, restore carry
04079F 83          0036*      add a,e ; add carry
0407A0 67          0037*      ld h,a ; product middle byte
0407A1 7A          0038*      ld a,d ; carry
0407A2 08          0039*      ex af,af' ; save carry, restore multiplier
0407A3             0040*  ; upper byte
0407A3 22 BE 07 04 0041*      ld (@scratch),hl ; 7 cycles
0407A7 5F          0042*      ld e,a
0407A8 3A C0 07 04 0043*      ld a,(@scratch+2)
0407AC 57          0044*      ld d,a
0407AD ED 5C       0045*      mlt de
0407AF 08          0046*      ex af,af' ; restore carry
0407B0 8B          0047*      adc a,e ; add carry
0407B1 32 C0 07 04 0048*      ld (@scratch+2),a ; 5 cycles
0407B5 2A BE 07 04 0049*      ld hl,(@scratch) ; 7 cycles
0407B9             0050*  ; highest byte
0407B9 3E 00       0051*      ld a,0 ; preserve carry flag
0407BB 8A          0052*      adc a,d ; product highest byte
0407BC D1          0053*      pop de ; restore de
0407BD C9          0054*      ret
0407BE             0055*  @scratch: ds 3
0407C1             0056*  
0407C1 00 00 00 00 0057*  mul24out: blkb 6,0
       00 00       
0407C7             0058*  
0407C7             0059*  ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
0407C7             0060*  ; operation: UHL * UDE --> mul24out
0407C7             0061*  mul24:
0407C7 DD E5       0062*      push ix ; preserve
0407C9             0063*  ; point to output buffer and clear it
0407C9 DD 21 C1 07 0064*      ld ix,mul24out
       04          
0407CE C5          0065*      push bc
0407CF 01 00 00 00 0066*      ld bc,0
0407D3 DD 0F 00    0067*      ld (ix),bc
0407D6 DD 0F 03    0068*      ld (ix+3),bc
0407D9 C1          0069*      pop bc
0407DA             0070*  ; STEP 1: UHL * E
0407DA 7B          0071*      ld a,e
0407DB E5          0072*      push hl
0407DC CD 91 07 04 0073*      call mul24x8
0407E0 DD 2F 00    0074*      ld (ix+0),hl
0407E3 DD 77 03    0075*      ld (ix+3),a
0407E6             0076*  ; STEP 2: UHL * D
0407E6 E1          0077*      pop hl
0407E7 E5          0078*      push hl
0407E8 7A          0079*      ld a,d
0407E9 CD 91 07 04 0080*      call mul24x8
0407ED CD 06 08 04 0081*      call @accumulate
0407F1             0082*  ; STEP 3: UHL * DEU
0407F1 E1          0083*      pop hl
0407F2 ED 53 36 08 0084*      ld (@de),de
       04          
0407F7 3A 38 08 04 0085*      ld a,(@de+2)
0407FB CD 91 07 04 0086*      call mul24x8
0407FF CD 06 08 04 0087*      call @accumulate
040803             0088*  ; all done
040803 DD E1       0089*      pop ix ; restore
040805 C9          0090*      ret
040806             0091*  @accumulate:
040806 DD 23       0092*      inc ix
040808             0093*  ; highest byte of product to carry
040808 DD 77 03    0094*      ld (ix+3),a
04080B             0095*  ; low byte of product
04080B 7D          0096*      ld a,l
04080C DD 86 00    0097*      add a,(ix+0)
04080F DD 77 00    0098*      ld (ix+0),a
040812             0099*  ; high byte of product
040812 7C          0100*      ld a,h
040813 DD 8E 01    0101*      adc a,(ix+1)
040816 DD 77 01    0102*      ld (ix+1),a
040819             0103*  ; uppper byte of product
040819 22 33 08 04 0104*      ld (@hl),hl
04081D 3A 35 08 04 0105*      ld a,(@hl+2)
040821 DD 8E 02    0106*      adc a,(ix+2)
040824 DD 77 02    0107*      ld (ix+2),a
040827             0108*  ; carry
040827 3E 00       0109*      ld a,0 ; preserve flags
040829 DD 8E 03    0110*      adc a,(ix+3)
04082C DD 77 03    0111*      ld (ix+3),a
04082F C9          0112*      ret
040830             0113*  
040830 00 00 00    0114*  @ix: dl 0
040833 00 00 00    0115*  @hl: dl 0
040836 00 00 00    0116*  @de: dl 0
040839             0117*  
040839             0118*  ; UHL * UDE --> UHL (unsigned)
040839             0119*  umul24:
040839 CD C7 07 04 0120*      call mul24
04083D 2A C1 07 04 0121*      ld hl,(mul24out)
040841 C9          0122*      ret
040842             0123*  
040842             0124*  ; UH.L = UH.L*UD.E (unsigned)
040842             0125*  umul168:
040842 CD C7 07 04 0126*      call mul24
040846 2A C2 07 04 0127*      ld hl,(mul24out+1)
04084A C9          0128*      ret
04084B             0129*  
04084B             0130*  ; UH.L * UD.E --> UH.L (signed)
04084B             0131*  smul168:
04084B             0132*  ; make everything positive and store sign flags
04084B CD 90 06 04 0133*      call hlu_abs
04084F F5          0134*      push af
040850 EB          0135*      ex de,hl
040851 CD 90 06 04 0136*      call hlu_abs
040855 EB          0137*      ex de,hl
040856 F5          0138*      push af
040857             0139*  ; do the division
040857 CD 42 08 04 0140*      call umul168 ; hl = product
04085B             0141*  ; adjust sign of result
04085B F1          0142*      pop af ; sign de
04085C FA 67 08 04 0143*      jp m,@de_neg
040860 F1          0144*      pop af ; sign hl
040861 F0          0145*      ret p ; both positive, nothing to do
040862             0146*  @hl_neg:
040862 CD A0 06 04 0147*      call neg_hlu ; de pos, hl neg, result is negative
040866 C9          0148*      ret
040867             0149*  @de_neg:
040867 F1          0150*      pop af
040868 F8          0151*      ret m ; both negative, nothing to do
040869 CD A0 06 04 0152*      call neg_hlu ; result is negative
04086D C9          0153*      ret
04086E             0154*  
04086E             0155*  ; UH.L / UD.E --> UD.E rem UHL (unsigned)
04086E             0156*  ; perform unsigned division of 16.8 fixed place values
04086E             0157*  ; with an unsigned 16.8 fixed place result and 24-bit remainder
04086E             0158*  udiv168:
04086E             0159*  ; back up divisor
04086E ED 53 A5 08 0160*      ld (@ude),de
       04          
040873             0161*  ; get the 16-bit integer part of the quotient
040873 CD D6 08 04 0162*      call udiv24 ; de = quotient, hl = remainder
040877             0163*  ; load quotient to upper three bytes of output
040877 ED 53 AC 08 0164*      ld (div168_out+1),de
       04          
04087C             0165*  @div256:
04087C             0166*  ; multiply remainder by 256
04087C             0167*      hlu_mul256
04087C 29          0001*M     add hl,hl ; * 2
04087D 29          0002*M     add hl,hl ; * 4
04087E 29          0003*M     add hl,hl ; * 8
04087F 29          0004*M     add hl,hl ; * 16
040880 29          0005*M     add hl,hl ; * 32
040881 29          0006*M     add hl,hl ; * 64
040882 29          0007*M     add hl,hl ; * 128
040883 29          0008*M     add hl,hl ; * 256
040884             0168*  ; skip fractional computation if remainder is zero
040884             0169*      sign_hlu
040884 19          0001*M     add hl,de
040885 B7          0002*M     or a
040886 ED 52       0003*M     sbc hl,de
040888 20 03       0170*      jr nz,@div_frac
04088A AF          0171*      xor a
04088B 18 0A       0172*      jr @write_frac
04088D             0173*  ; now divide the shifted remainder by the divisor
04088D             0174*  @div_frac:
04088D ED 5B A5 08 0175*      ld de,(@ude) ; get back divisor
       04          
040892 CD D6 08 04 0176*      call udiv24 ; de = quotient, hl = remainder
040896             0177*  ; load low byte of quotient to low byte of output
040896 7B          0178*      ld a,e
040897             0179*  @write_frac:
040897 32 AB 08 04 0180*      ld (div168_out),a
04089B             0181*  ; load de with return value
04089B ED 5B AB 08 0182*      ld de,(div168_out)
       04          
0408A0             0183*  ; load a with any overflow
0408A0 3A AE 08 04 0184*      ld a,(div168_out+3)
0408A4 C9          0185*      ret ; ud.e is the 16.8 result
0408A5             0186*  @ude: ds 6
0408AB             0187*  div168_out: ds 4 ; the extra byte is for overflow
0408AF             0188*  
0408AF             0189*  ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
0408AF             0190*  ; perform signed division of 16.8 fixed place values
0408AF             0191*  ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
0408AF             0192*  sdiv168:
0408AF             0193*  ; make everything positive and store sign flags
0408AF CD 90 06 04 0194*      call hlu_abs
0408B3 F5          0195*      push af
0408B4 EB          0196*      ex de,hl
0408B5 CD 90 06 04 0197*      call hlu_abs
0408B9 EB          0198*      ex de,hl
0408BA F5          0199*      push af
0408BB             0200*  ; do the division
0408BB CD 6E 08 04 0201*      call udiv168 ; de = quotient, hl = remainder
0408BF             0202*  ; adjust sign of result
0408BF F1          0203*      pop af ; sign de
0408C0 FA CD 08 04 0204*      jp m,@de_neg
0408C4 F1          0205*      pop af ; sign hl
0408C5 F0          0206*      ret p ; both positive, nothing to do
0408C6             0207*  @hl_neg:
0408C6 EB          0208*      ex de,hl ; hl = quotient, de = remainder
0408C7 CD A0 06 04 0209*      call neg_hlu ; de pos, hl neg, result is negative
0408CB EB          0210*      ex de,hl ; de = negated quotient, hl = remainder
0408CC C9          0211*      ret
0408CD             0212*  @de_neg:
0408CD F1          0213*      pop af
0408CE F8          0214*      ret m ; both negative, nothing to do
0408CF EB          0215*      ex de,hl ; hl = quotient, de = remainder
0408D0 CD A0 06 04 0216*      call neg_hlu ; result is negative
0408D4 EB          0217*      ex de,hl ; de = negated quotient, hl = remainder
0408D5 C9          0218*      ret
0408D6             0219*  
0408D6             0220*  ;------------------------------------------------------------------------
0408D6             0221*  ;  arith24.asm
0408D6             0222*  ;  24-bit ez80 arithmetic routines
0408D6             0223*  ;  Copyright (c) Shawn Sijnstra 2024
0408D6             0224*  ;  MIT license
0408D6             0225*  ;
0408D6             0226*  ;  This library was created as a tool to help make ez80
0408D6             0227*  ;  24-bit native assembly routines for simple mathematical problems
0408D6             0228*  ;  more widely available.
0408D6             0229*  ;
0408D6             0230*  ;------------------------------------------------------------------------
0408D6             0231*  ;
0408D6             0232*  ;------------------------------------------------------------------------
0408D6             0233*  ; udiv24
0408D6             0234*  ; Unsigned 24-bit division
0408D6             0235*  ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
0408D6             0236*  ;
0408D6             0237*  ; Uses AF BC DE HL
0408D6             0238*  ; Uses Restoring Division algorithm
0408D6             0239*  ;------------------------------------------------------------------------
0408D6             0240*  
0408D6             0241*  udiv24:
0408D6 E5          0242*      push hl
0408D7 C1          0243*      pop bc ;move dividend to BCU
0408D8 21 00 00 00 0244*      ld hl,0 ;result
0408DC A7          0245*      and a
0408DD ED 52       0246*      sbc hl,de ;test for div by 0
0408DF C8          0247*      ret z ;it's zero, carry flag is clear
0408E0 19          0248*      add hl,de ;HL is 0 again
0408E1 3E 18       0249*      ld a,24 ;number of loops through.
0408E3             0250*  udiv1:
0408E3 C5          0251*      push bc ;complicated way of doing this because of lack of access to top bits
0408E4 E3          0252*      ex (sp),hl
0408E5 37          0253*      scf
0408E6 ED 6A       0254*      adc hl,hl
0408E8 E3          0255*      ex (sp),hl
0408E9 C1          0256*      pop bc ;we now have bc = (bc * 2) + 1
0408EA             0257*  
0408EA ED 6A       0258*      adc hl,hl
0408EC A7          0259*      and a ;is this the bug
0408ED ED 52       0260*      sbc hl,de
0408EF 30 02       0261*      jr nc,udiv2
0408F1 19          0262*      add hl,de
0408F2             0263*  ;	dec	c
0408F2 0B          0264*      dec bc
0408F3             0265*  udiv2:
0408F3 3D          0266*      dec a
0408F4 20 ED       0267*      jr nz,udiv1
0408F6 37          0268*      scf ;flag used for div0 error
0408F7 C5          0269*      push bc
0408F8 D1          0270*      pop de ;remainder
0408F9 C9          0271*      ret
0408FA             0272*  
0408FA             0273*  ;------------------------------------------------------------------------
0408FA             0274*  ;  END 24-bit ez80 arithmetic routines by Shawn Sijnstra
0408FA             0275*  ;------------------------------------------------------------------------
0408FA             0276*  
0408FA             0277*  
0408FA             0278*      ; include "trig24fast.inc"
0408FA             0279*  
0408FA             0280*  
0408FA             0281*  ; convert signed angles from a 360 to 256 degree circle
0408FA             0282*  ; inputs: uh.l is the angle360 in 16.8 fixed format
0408FA             0283*  ; outputs: uh.l is the angle256 in 16.8 fixed format
0408FA             0284*  ; destroys: TODO
0408FA             0285*  deg_360_to_256:
0408FA D5          0286*      push de ; preserve de
0408FB             0287*  ; make angle positive and store sign flag
0408FB CD 90 06 04 0288*      call hlu_abs
0408FF F5          0289*      push af
040900             0290*  ; multiply by coversion factor of 256/360
040900 11 B6 00 00 0291*      ld de,0x0000B6 ; 0.711
040904 CD 42 08 04 0292*      call umul168 ; uh.l = uh.l * 0.711
040908             0293*  ; restore sign flag and adjust output accordingly
040908 F1          0294*      pop af
040909 F2 11 09 04 0295*      jp p,@pos ; positive number
04090D CD A0 06 04 0296*      call neg_hlu
040911             0297*  @pos:
040911             0298*  ; restore de and return uh.l as the result
040911 D1          0299*      pop de
040912 C9          0300*      ret
040913             0301*  
040913             0302*  ; convert signed angles from a 256 to 360 degree circle
040913             0303*  ; inputs: uh.l is the angle256 in 16.8 fixed format
040913             0304*  ; outputs: uh.l is the angle360 in 16.8 fixed format
040913             0305*  ; destroys: TODO
040913             0306*  deg_256_to_360:
040913 D5          0307*      push de ; preserve de
040914             0308*  ; make angle positive and store sign flag
040914 CD 90 06 04 0309*      call hlu_abs
040918 F5          0310*      push af
040919             0311*  ; multiply by coversion factor of 360/256
040919 11 68 01 00 0312*      ld de,0x000168 ; 1.406
04091D CD 42 08 04 0313*      call umul168 ; uh.l = uh.l * 1.406
040921             0314*  ; restore sign flag and adjust output accordingly
040921 F1          0315*      pop af
040922 F2 2A 09 04 0316*      jp p,@pos ; positive number
040926 CD A0 06 04 0317*      call neg_hlu
04092A             0318*  @pos:
04092A             0319*  ; restore de and return uh.l as the result
04092A D1          0320*      pop de
04092B C9          0321*      ret
04092C             0322*  
04092C             0323*  ; fixed 16.8 routine
04092C             0324*  ; cos(uh.l) --> uh.l
04092C             0325*  ; destroys: f, hl
04092C             0326*  cos168:
04092C D5          0327*      push de ; preserve de
04092D             0328*  ; for cos we simply increment the angle by 90 degrees
04092D             0329*  ; or 0x004000 in 16.8 degrees256
04092D             0330*  ; which makes it a sin problem
04092D 11 00 40 00 0331*      ld de,0x004000
040931 19          0332*      add hl,de ; modulo 256 happens below
040932 D1          0333*      pop de ; restore de
040933             0334*  ; fall through to sin168
040933             0335*  
040933             0336*  ; ---------------------
040933             0337*  ; fixed 16.8 routine
040933             0338*  ; sin(uh.l) --> uh.l
040933             0339*  ; destroys: f, hl
040933             0340*  sin168:
040933 D5          0341*      push de
040934             0342*  ; handle negative angles appropriately
040934 CD 90 06 04 0343*      call hlu_abs
040938 F2 41 09 04 0344*      jp p,@F
04093C 11 00 00 FF 0345*      ld de,-256*256
040940 19          0346*      add hl,de
040941             0347*  @@:
040941 2E 03       0348*      ld l,3 ; multiply by 3 to get our lookup index
040943 ED 6C       0349*      mlt hl
040945 11 90 0B 04 0350*      ld de,sin_lut_168 ; grab the lut address
040949 19          0351*      add hl,de ; bump hl by the index
04094A ED 27       0352*      ld hl,(hl) ; don't try this on a z80!
04094C D1          0353*      pop de
04094D C9          0354*      ret
04094E             0355*  
04094E             0356*  ; 16.8 fixed inputs / outputs
04094E             0357*  ; takes: uh.l as angle in degrees 256
04094E             0358*  ;        ud.e as radius
04094E             0359*  ; returns ub.c as dx, ud.e as dy, uh.l as radius
04094E             0360*  ;        displacements from origin (0,0)
04094E             0361*  ; destroys: everything except indexes
04094E             0362*  polar_to_cartesian:
04094E             0363*  ; back up input parameters
04094E 22 7D 09 04 0364*      ld (@angle), hl
040952 ED 53 80 09 0365*      ld (@radius), de
       04          
040957             0366*  ; compute dx = sin(uh.l) * ud.e
040957 CD 33 09 04 0367*      call sin168 ; uh.l = sin(uh.l)
04095B ED 5B 80 09 0368*      ld de,(@radius)
       04          
040960 CD 4B 08 04 0369*      call smul168 ; uh.l = dx
040964 E5          0370*      push hl
040965             0371*  ; compute dy = -cos(uh.l) * ud.e
040965 2A 7D 09 04 0372*      ld hl,(@angle)
040969 CD 2C 09 04 0373*      call cos168 ; uh.l = cos(uh.l)
04096D ED 5B 80 09 0374*      ld de,(@radius)
       04          
040972 CD 4B 08 04 0375*      call smul168 ; uh.l = dy
040976 CD A0 06 04 0376*      call neg_hlu ; invert dy for screen coords convention
04097A EB          0377*      ex de,hl ; de = dy for output
04097B C1          0378*      pop bc ; bc = dx for output
04097C             0379*  ; and out
04097C C9          0380*      ret
04097D             0381*  @angle: ds 3
040980             0382*  @radius: ds 3
040983             0383*  
040983             0384*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040983             0385*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040983             0386*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040983             0387*  ;         also populates scratch locations dx168 and dy168
040983             0388*  ; destroys: a,hl,bc,de
040983             0389*  dxy168:
040983             0390*  ; compute dx = x1-x0
040983 AF          0391*      xor a ; clear carry
040984 DD E5       0392*      push ix ; move ix to hl via the stack
040986 E1          0393*      pop hl ; hl = x1
040987 ED 42       0394*      sbc hl,bc ; hl = dx
040989 22 9E 09 04 0395*      ld (dx168),hl ; dx to scratch
04098D             0396*  ; compute dy = y1-y0
04098D AF          0397*      xor a ; clear carry
04098E FD E5       0398*      push iy ; move iy to hl via the stack
040990 E1          0399*      pop hl ; hl = y1
040991 ED 52       0400*      sbc hl,de ; hl = dy
040993 22 A4 09 04 0401*      ld (dy168),hl ; dy to scratch
040997             0402*  ; populate output registers and return
040997 EB          0403*      ex de,hl ; ud.e = dy
040998 ED 4B 9E 09 0404*      ld bc,(dx168) ; ub.c = dx
       04          
04099D C9          0405*      ret
04099E 00 00 00 00 0406*  dx168: blkb 6,0
       00 00       
0409A4 00 00 00 00 0407*  dy168: blkb 6,0
       00 00       
0409AA             0408*  
0409AA             0409*  ; compute the euclidian distance between two cartesian coordinates
0409AA             0410*  ; using the formula d = sqrt(dx^2+dy^2)
0409AA             0411*  ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
0409AA             0412*  ; output; uh.l is the 16.8 fixed format distance
0409AA             0413*  ;         also populates scratch locations dx168 and dy168
0409AA             0414*  ; destroys: a,hl,bc,de
0409AA             0415*  ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
0409AA             0416*  ;       thus the result will always be an integer, albeit in 16.8 format
0409AA             0417*  distance168:
0409AA             0418*  ; compute dy^2
0409AA 2A A4 09 04 0419*      ld hl,(dy168)
0409AE CD 90 06 04 0420*      call hlu_abs
0409B2 CD F7 06 04 0421*      call hlu_udiv256 ; make integer to avoid overflow
0409B6 E5          0422*      push hl
0409B7 D1          0423*      pop de
0409B8 CD 39 08 04 0424*      call umul24 ; hl = dy^2
0409BC E5          0425*      push hl ; save dy^2
0409BD             0426*  ; compute dx^2
0409BD 2A 9E 09 04 0427*      ld hl,(dx168)
0409C1 CD 90 06 04 0428*      call hlu_abs
0409C5 CD F7 06 04 0429*      call hlu_udiv256 ; make integer to avoid overflow
0409C9 E5          0430*      push hl
0409CA D1          0431*      pop de
0409CB CD 39 08 04 0432*      call umul24 ; hl = dx^2
0409CF             0433*  ; add dx^2 and dy^2
0409CF D1          0434*      pop de ; de = dy^2 (was hl)
0409D0 19          0435*      add hl,de ; hl = dx^2 + dy^2
0409D1             0436*  ; compute the square root
0409D1 CD AA 0A 04 0437*      call sqrt24 ; de = sqrt(dx^2 + dy^2)
0409D5 EB          0438*      ex de,hl ; hl = distance
0409D6             0439*      hlu_mul256 ; convert back to 16.8 fixed
0409D6 29          0001*M     add hl,hl ; * 2
0409D7 29          0002*M     add hl,hl ; * 4
0409D8 29          0003*M     add hl,hl ; * 8
0409D9 29          0004*M     add hl,hl ; * 16
0409DA 29          0005*M     add hl,hl ; * 32
0409DB 29          0006*M     add hl,hl ; * 64
0409DC 29          0007*M     add hl,hl ; * 128
0409DD 29          0008*M     add hl,hl ; * 256
0409DE C9          0440*      ret
0409DF             0441*  
0409DF             0442*  ; atan2_(ub.c,ud.e) --> uh.l
0409DF             0443*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0409DF             0444*  ;   whether inputs are integers or fractional doesn't matter
0409DF             0445*  ;   so long as the sign bit of the upper byte is correct
0409DF             0446*  ; output: uh.l is the 16.8 fixed angle in degrees 256
0409DF             0447*  ; angles are COMPASS HEADINGS based on
0409DF             0448*  ; screen coordinate conventions,where the y axis is flipped
0409DF             0449*  ; #E0 224      0       32 #20
0409DF             0450*  ;        -x,-y | +x,-y
0409DF             0451*  ; #C0 192------+------ 64 #40
0409DF             0452*  ;        -x,+y | +x,+y
0409DF             0453*  ; #A0 160   128 #80   96 #60
0409DF             0454*  atan2_168fast:
0409DF             0455*  ; get signs and make everything positive
0409DF             0456*  ; get abs(x) and store its original sign
0409DF C5          0457*      push bc
0409E0 E1          0458*      pop hl
0409E1 CD 90 06 04 0459*      call hlu_abs ; if x was negative this also sets the sign flag
0409E5 E5          0460*      push hl ; store abs(x)
0409E6 C1          0461*      pop bc ; bc = abs(x)
0409E7 F5          0462*      push af ; store sign of x
0409E8             0463*  ; get abs(y) and store its original sign
0409E8 EB          0464*      ex de,hl ; hl = y
0409E9 CD 90 06 04 0465*      call hlu_abs ; if y was negative this also sets the sign flag
0409ED EB          0466*      ex de,hl ; de = abs(y)
0409EE F5          0467*      push af ; store sign of y
0409EF             0468*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0409EF             0469*  ; this ensures that our lookup value is between 0 and 1 inclusive
0409EF AF          0470*      xor a ; clear the carry flag
0409F0 D5          0471*      push de
0409F1 E1          0472*      pop hl
0409F2 ED 42       0473*      sbc hl,bc
0409F4 F5          0474*      push af ; save sign of de - bc
0409F5 F2 FE 09 04 0475*      jp p,@1 ; bc <= de, so we skip ahead
0409F9             0476*  ; otherwise we swap bc and de
0409F9 C5          0477*      push bc
0409FA E1          0478*      pop hl
0409FB EB          0479*      ex de,hl
0409FC E5          0480*      push hl
0409FD C1          0481*      pop bc
0409FE             0482*  @1:
0409FE             0483*  ; now we're ready to snag our preliminary result
0409FE C5          0484*      push bc
0409FF E1          0485*      pop hl
040A00 CD 6E 0A 04 0486*      call atan_168fast ; uh.l comes back with prelim result
040A04             0487*  ; now we adjust uh.l based on sign of de - bc
040A04 F1          0488*      pop af
040A05 F2 11 0A 04 0489*      jp p,@2 ; bc <= de,so we skip ahead
040A09 EB          0490*      ex de,hl
040A0A 21 00 40 00 0491*      ld hl,64*256 ; subtract from 64 (90) degrees
040A0E AF          0492*      xor a ; clear the carry flag
040A0F ED 52       0493*      sbc hl,de
040A11             0494*  @2:
040A11             0495*  ; adjust the result based on quadrant
040A11             0496*  ; #E0 224      0       32 #20
040A11             0497*  ;        -x,-y | +x,-y
040A11             0498*  ; #C0 192------+------ 64 #40
040A11             0499*  ;        -x,+y | +x,+y
040A11             0500*  ; #A0 160   128 #80   96 #60
040A11 F1          0501*      pop af ; sign of y
040A12 CA 4F 0A 04 0502*      jp z,@y_zero
040A16 F2 2F 0A 04 0503*      jp p,@y_pos
040A1A             0504*  ; y neg,check x
040A1A F1          0505*      pop af ; sign of x
040A1B CA 29 0A 04 0506*      jp z,@y_neg_x_zero
040A1F F2 2E 0A 04 0507*      jp p,@y_neg_x_pos
040A23             0508*  ; y neg,x neg
040A23             0509*  ; angle is 128 to 256 (270 to 360)
040A23             0510*  ; negating the intermediate does the trick
040A23 CD A0 06 04 0511*      call neg_hlu
040A27 18 31       0512*      jr @zero_hlu
040A29             0513*  
040A29             0514*  @y_neg_x_zero:
040A29             0515*  ; y neg,x zero
040A29             0516*  ; angle is 0
040A29 21 00 00 00 0517*      ld hl,0
040A2D C9          0518*      ret
040A2E             0519*  @y_neg_x_pos:
040A2E             0520*  ; y neg,x pos
040A2E             0521*  ; angle is 0 to 64 (0 to 90)
040A2E             0522*  ; so we're good
040A2E C9          0523*      ret
040A2F             0524*  
040A2F             0525*  @y_pos:
040A2F F1          0526*      pop af ; sign of x
040A30 CA 3F 0A 04 0527*      jp z,@y_pos_x_zero
040A34 F2 44 0A 04 0528*      jp p,@y_pos_x_pos
040A38             0529*  ; y pos,x neg
040A38             0530*  ; angle is 128 to 192 (180-270)
040A38             0531*  ; so we add 128 to intermediate
040A38 11 00 80 00 0532*      ld de,128*256
040A3C 19          0533*      add hl,de
040A3D 18 1B       0534*      jr @zero_hlu
040A3F             0535*  @y_pos_x_zero:
040A3F             0536*  ; y pos,x zero
040A3F             0537*  ; angle is 128 (180)
040A3F 21 00 80 00 0538*      ld hl,128*256
040A43 C9          0539*      ret
040A44             0540*  @y_pos_x_pos:
040A44             0541*  ; y pos,x pos
040A44             0542*  ; angle is 64 to 128 (90 to 180)
040A44             0543*  ; neg the intermediate and add 180 degrees
040A44 CD A0 06 04 0544*      call neg_hlu
040A48 11 00 80 00 0545*      ld de,128*256
040A4C 19          0546*      add hl,de
040A4D 18 0B       0547*      jr @zero_hlu
040A4F             0548*  
040A4F             0549*  @y_zero:
040A4F F1          0550*      pop af ; sign of x
040A50 FA 55 0A 04 0551*      jp m,@y_zero_x_neg
040A54             0552*  ; y zero,x pos
040A54             0553*  ; angle is 64 (90),nothing to do
040A54 C9          0554*      ret
040A55             0555*  @y_zero_x_neg:
040A55             0556*  ; y zero ,x neg
040A55             0557*  ; angle is 192 (270)
040A55 21 00 C0 00 0558*      ld hl,192*256
040A59 C9          0559*      ret
040A5A             0560*  @zero_hlu:
040A5A AF          0561*      xor a
040A5B 22 68 0A 04 0562*      ld (@scratch),hl
040A5F 32 6A 0A 04 0563*      ld (@scratch+2),a
040A63 2A 68 0A 04 0564*      ld hl,(@scratch)
040A67 C9          0565*      ret
040A68             0566*  @scratch: ds 6
040A6E             0567*  
040A6E             0568*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040A6E             0569*  ; output: uh.l is the 16.8 fixed format angle in degrees 256
040A6E             0570*  ; destroys: a,hl,bc,de
040A6E             0571*  ; note: only works for angles from 0 to 32 (45) degrees
040A6E             0572*  ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040A6E             0573*  atan_168fast:
040A6E             0574*  ; because we use compass headings instead of geometric angles
040A6E             0575*  ; we compute dx/dy which is 1/tan(theta) in the maths world
040A6E             0576*  ; we can do faster unsigned division here because we know dx and dy are positive
040A6E CD 6E 08 04 0577*      call udiv168 ; ud.e = dx/dy
040A72 EB          0578*      ex de,hl ; uh.l = dx/dy
040A73             0579*  ; test uh.l for 0
040A73 19          0580*      add hl,de
040A74 B7          0581*      or a
040A75 ED 52       0582*      sbc hl,de
040A77 28 22       0583*      jr z,@is_zero
040A79             0584*  ; test uh.l for 1
040A79 AF          0585*      xor a ; clear carry
040A7A EB          0586*      ex de,hl
040A7B 21 00 01 00 0587*      ld hl,1*256 ; 1 in 16.8 fixed format
040A7F ED 52       0588*      sbc hl,de
040A81 28 13       0589*      jr z,@is_45
040A83 EB          0590*      ex de,hl
040A84             0591*  ; no special cases so we move on
040A84             0592*  ; l contains the fractional portion of tan(uh.l)
040A84             0593*  ; we multiply it by three to get our lookup table index
040A84 26 03       0594*      ld h,3
040A86 ED 6C       0595*      mlt hl ; index into lut
040A88 11 00 00 00 0596*      ld de,0 ; clear deu
040A8C 54          0597*      ld d,h ; copy hl to de
040A8D 5D          0598*      ld e,l ; de contains our index
040A8E 21 93 0E 04 0599*      ld hl,atan_lut_168 ; grab the lut address
040A92 19          0600*      add hl,de ; bump hl by the index
040A93 ED 27       0601*      ld hl,(hl) ; don't try this on a z80!
040A95 C9          0602*      ret ; and out
040A96             0603*  @is_45:
040A96 21 00 40 00 0604*      ld hl,64*256
040A9A C9          0605*      ret
040A9B             0606*  ; for the case tan(0)
040A9B             0607*  @is_zero:
040A9B 21 00 00 00 0608*      ld hl,0*256
040A9F C9          0609*      ret
040AA0             0610*  
040AA0             0611*  ; Expects  ADL mode
040AA0             0612*  ; Inputs:  UH.L
040AA0             0613*  ; Outputs: UH.L is the 16.8 square root
040AA0             0614*  ;          UDE is the integer difference inputHL-DE^2
040AA0             0615*  sqrt168:
040AA0 CD AA 0A 04 0616*      call sqrt24
040AA4 EB          0617*      ex de,hl
040AA5 29          0618*      add hl,hl
040AA6 29          0619*      add hl,hl
040AA7 29          0620*      add hl,hl
040AA8 29          0621*      add hl,hl
040AA9 C9          0622*      ret
040AAA             0623*  
040AAA             0624*  ; credit: xeda112358
040AAA             0625*  ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040AAA             0626*  sqrt24:
040AAA             0627*  ; Expects ADL mode
040AAA             0628*  ; Inputs: HL
040AAA             0629*  ; Outputs: DE is the integer square root
040AAA             0630*  ;  HL is the difference inputHL-DE^2
040AAA             0631*  ;  c flag reset
040AAA 01 00 00 00 0632*      ld bc,0 ; clear bcu
040AAE 11 00 00 00 0633*      ld de,0 ; clear deu
040AB2 AF          0634*      xor a
040AB3 45          0635*      ld b,l
040AB4 C5          0636*      push bc
040AB5 47          0637*      ld b,a
040AB6 6F          0638*      ld l,a
040AB7             0639*  ; Iteration 1
040AB7 29          0640*      add hl,hl
040AB8 CB 11       0641*      rl c
040ABA 29          0642*      add hl,hl
040ABB CB 11       0643*      rl c
040ABD 91          0644*      sub c
040ABE 30 04       0645*      jr nc,$+6
040AC0 1C          0646*      inc e
040AC1 1C          0647*      inc e
040AC2 2F          0648*      cpl
040AC3 4F          0649*      ld c,a
040AC4             0650*  ; Iteration 2
040AC4 29          0651*      add hl,hl
040AC5 CB 11       0652*      rl c
040AC7 29          0653*      add hl,hl
040AC8 CB 11       0654*      rl c
040ACA CB 13       0655*      rl e
040ACC 7B          0656*      ld a,e
040ACD 91          0657*      sub c
040ACE 30 04       0658*      jr nc,$+6
040AD0 1C          0659*      inc e
040AD1 1C          0660*      inc e
040AD2 2F          0661*      cpl
040AD3 4F          0662*      ld c,a
040AD4             0663*  ; Iteration 3
040AD4 29          0664*      add hl,hl
040AD5 CB 11       0665*      rl c
040AD7 29          0666*      add hl,hl
040AD8 CB 11       0667*      rl c
040ADA CB 13       0668*      rl e
040ADC 7B          0669*      ld a,e
040ADD 91          0670*      sub c
040ADE 30 04       0671*      jr nc,$+6
040AE0 1C          0672*      inc e
040AE1 1C          0673*      inc e
040AE2 2F          0674*      cpl
040AE3 4F          0675*      ld c,a
040AE4             0676*  ; Iteration 4
040AE4 29          0677*      add hl,hl
040AE5 CB 11       0678*      rl c
040AE7 29          0679*      add hl,hl
040AE8 CB 11       0680*      rl c
040AEA CB 13       0681*      rl e
040AEC 7B          0682*      ld a,e
040AED 91          0683*      sub c
040AEE 30 04       0684*      jr nc,$+6
040AF0 1C          0685*      inc e
040AF1 1C          0686*      inc e
040AF2 2F          0687*      cpl
040AF3 4F          0688*      ld c,a
040AF4             0689*  ; Iteration 5
040AF4 29          0690*      add hl,hl
040AF5 CB 11       0691*      rl c
040AF7 29          0692*      add hl,hl
040AF8 CB 11       0693*      rl c
040AFA CB 13       0694*      rl e
040AFC 7B          0695*      ld a,e
040AFD 91          0696*      sub c
040AFE 30 04       0697*      jr nc,$+6
040B00 1C          0698*      inc e
040B01 1C          0699*      inc e
040B02 2F          0700*      cpl
040B03 4F          0701*      ld c,a
040B04             0702*  ; Iteration 6
040B04 29          0703*      add hl,hl
040B05 CB 11       0704*      rl c
040B07 29          0705*      add hl,hl
040B08 CB 11       0706*      rl c
040B0A CB 13       0707*      rl e
040B0C 7B          0708*      ld a,e
040B0D 91          0709*      sub c
040B0E 30 04       0710*      jr nc,$+6
040B10 1C          0711*      inc e
040B11 1C          0712*      inc e
040B12 2F          0713*      cpl
040B13 4F          0714*      ld c,a
040B14             0715*  ; Iteration 7
040B14 29          0716*      add hl,hl
040B15 CB 11       0717*      rl c
040B17 29          0718*      add hl,hl
040B18 CB 11       0719*      rl c
040B1A CB 10       0720*      rl b
040B1C EB          0721*      ex de,hl
040B1D 29          0722*      add hl,hl
040B1E E5          0723*      push hl
040B1F ED 42       0724*      sbc hl,bc
040B21 30 06       0725*      jr nc,$+8
040B23 7C          0726*      ld a,h
040B24 2F          0727*      cpl
040B25 47          0728*      ld b,a
040B26 7D          0729*      ld a,l
040B27 2F          0730*      cpl
040B28 4F          0731*      ld c,a
040B29 E1          0732*      pop hl
040B2A 30 02       0733*      jr nc,$+4
040B2C 23          0734*      inc hl
040B2D 23          0735*      inc hl
040B2E EB          0736*      ex de,hl
040B2F             0737*  ; Iteration 8
040B2F 29          0738*      add hl,hl
040B30 69          0739*      ld l,c
040B31 60          0740*      ld h,b
040B32 ED 6A       0741*      adc hl,hl
040B34 ED 6A       0742*      adc hl,hl
040B36 EB          0743*      ex de,hl
040B37 29          0744*      add hl,hl
040B38 ED 52       0745*      sbc hl,de
040B3A 19          0746*      add hl,de
040B3B EB          0747*      ex de,hl
040B3C 30 04       0748*      jr nc,$+6
040B3E ED 52       0749*      sbc hl,de
040B40 13          0750*      inc de
040B41 13          0751*      inc de
040B42             0752*  ; Iteration 9
040B42 F1          0753*      pop af
040B43 17          0754*      rla
040B44 ED 6A       0755*      adc hl,hl
040B46 17          0756*      rla
040B47 ED 6A       0757*      adc hl,hl
040B49 EB          0758*      ex de,hl
040B4A 29          0759*      add hl,hl
040B4B ED 52       0760*      sbc hl,de
040B4D 19          0761*      add hl,de
040B4E EB          0762*      ex de,hl
040B4F 30 04       0763*      jr nc,$+6
040B51 ED 52       0764*      sbc hl,de
040B53 13          0765*      inc de
040B54 13          0766*      inc de
040B55             0767*  ; Iteration 10
040B55 17          0768*      rla
040B56 ED 6A       0769*      adc hl,hl
040B58 17          0770*      rla
040B59 ED 6A       0771*      adc hl,hl
040B5B EB          0772*      ex de,hl
040B5C 29          0773*      add hl,hl
040B5D ED 52       0774*      sbc hl,de
040B5F 19          0775*      add hl,de
040B60 EB          0776*      ex de,hl
040B61 30 04       0777*      jr nc,$+6
040B63 ED 52       0778*      sbc hl,de
040B65 13          0779*      inc de
040B66 13          0780*      inc de
040B67             0781*  ; Iteration 11
040B67 17          0782*      rla
040B68 ED 6A       0783*      adc hl,hl
040B6A 17          0784*      rla
040B6B ED 6A       0785*      adc hl,hl
040B6D EB          0786*      ex de,hl
040B6E 29          0787*      add hl,hl
040B6F ED 52       0788*      sbc hl,de
040B71 19          0789*      add hl,de
040B72 EB          0790*      ex de,hl
040B73 30 04       0791*      jr nc,$+6
040B75 ED 52       0792*      sbc hl,de
040B77 13          0793*      inc de
040B78 13          0794*      inc de
040B79             0795*  ; Iteration 12
040B79 17          0796*      rla
040B7A ED 6A       0797*      adc hl,hl
040B7C 17          0798*      rla
040B7D ED 6A       0799*      adc hl,hl
040B7F EB          0800*      ex de,hl
040B80 29          0801*      add hl,hl
040B81 ED 52       0802*      sbc hl,de
040B83 19          0803*      add hl,de
040B84 EB          0804*      ex de,hl
040B85 30 04       0805*      jr nc,$+6
040B87 ED 52       0806*      sbc hl,de
040B89 13          0807*      inc de
040B8A 13          0808*      inc de
040B8B CB 1A       0809*      rr d
040B8D CB 1B       0810*      rr e
040B8F C9          0811*      ret
040B90             0812*  
040B90             0813*  sin_lut_168:
040B90 00 00 00    0814*      dl 0x000000 ; 0.000 00, 0.000
040B93 06 00 00    0815*      dl 0x000006 ; 1.406 01, 0.025
040B96 0C 00 00    0816*      dl 0x00000C ; 2.813 02, 0.049
040B99 12 00 00    0817*      dl 0x000012 ; 4.219 03, 0.074
040B9C 19 00 00    0818*      dl 0x000019 ; 5.625 04, 0.098
040B9F 1F 00 00    0819*      dl 0x00001F ; 7.031 05, 0.122
040BA2 25 00 00    0820*      dl 0x000025 ; 8.438 06, 0.147
040BA5 2B 00 00    0821*      dl 0x00002B ; 9.844 07, 0.171
040BA8 31 00 00    0822*      dl 0x000031 ; 11.250 08, 0.195
040BAB 38 00 00    0823*      dl 0x000038 ; 12.656 09, 0.219
040BAE 3E 00 00    0824*      dl 0x00003E ; 14.063 0A, 0.243
040BB1 44 00 00    0825*      dl 0x000044 ; 15.469 0B, 0.267
040BB4 4A 00 00    0826*      dl 0x00004A ; 16.875 0C, 0.290
040BB7 50 00 00    0827*      dl 0x000050 ; 18.281 0D, 0.314
040BBA 56 00 00    0828*      dl 0x000056 ; 19.688 0E, 0.337
040BBD 5C 00 00    0829*      dl 0x00005C ; 21.094 0F, 0.360
040BC0 61 00 00    0830*      dl 0x000061 ; 22.500 10, 0.383
040BC3 67 00 00    0831*      dl 0x000067 ; 23.906 11, 0.405
040BC6 6D 00 00    0832*      dl 0x00006D ; 25.313 12, 0.428
040BC9 73 00 00    0833*      dl 0x000073 ; 26.719 13, 0.450
040BCC 78 00 00    0834*      dl 0x000078 ; 28.125 14, 0.471
040BCF 7E 00 00    0835*      dl 0x00007E ; 29.531 15, 0.493
040BD2 83 00 00    0836*      dl 0x000083 ; 30.938 16, 0.514
040BD5 88 00 00    0837*      dl 0x000088 ; 32.344 17, 0.535
040BD8 8E 00 00    0838*      dl 0x00008E ; 33.750 18, 0.556
040BDB 93 00 00    0839*      dl 0x000093 ; 35.156 19, 0.576
040BDE 98 00 00    0840*      dl 0x000098 ; 36.563 1A, 0.596
040BE1 9D 00 00    0841*      dl 0x00009D ; 37.969 1B, 0.615
040BE4 A2 00 00    0842*      dl 0x0000A2 ; 39.375 1C, 0.634
040BE7 A7 00 00    0843*      dl 0x0000A7 ; 40.781 1D, 0.653
040BEA AB 00 00    0844*      dl 0x0000AB ; 42.188 1E, 0.672
040BED B0 00 00    0845*      dl 0x0000B0 ; 43.594 1F, 0.690
040BF0 B5 00 00    0846*      dl 0x0000B5 ; 45.000 20, 0.707
040BF3 B9 00 00    0847*      dl 0x0000B9 ; 46.406 21, 0.724
040BF6 BD 00 00    0848*      dl 0x0000BD ; 47.813 22, 0.741
040BF9 C1 00 00    0849*      dl 0x0000C1 ; 49.219 23, 0.757
040BFC C5 00 00    0850*      dl 0x0000C5 ; 50.625 24, 0.773
040BFF C9 00 00    0851*      dl 0x0000C9 ; 52.031 25, 0.788
040C02 CD 00 00    0852*      dl 0x0000CD ; 53.438 26, 0.803
040C05 D1 00 00    0853*      dl 0x0000D1 ; 54.844 27, 0.818
040C08 D4 00 00    0854*      dl 0x0000D4 ; 56.250 28, 0.831
040C0B D8 00 00    0855*      dl 0x0000D8 ; 57.656 29, 0.845
040C0E DB 00 00    0856*      dl 0x0000DB ; 59.063 2A, 0.858
040C11 DE 00 00    0857*      dl 0x0000DE ; 60.469 2B, 0.870
040C14 E1 00 00    0858*      dl 0x0000E1 ; 61.875 2C, 0.882
040C17 E4 00 00    0859*      dl 0x0000E4 ; 63.281 2D, 0.893
040C1A E7 00 00    0860*      dl 0x0000E7 ; 64.688 2E, 0.904
040C1D EA 00 00    0861*      dl 0x0000EA ; 66.094 2F, 0.914
040C20 EC 00 00    0862*      dl 0x0000EC ; 67.500 30, 0.924
040C23 EE 00 00    0863*      dl 0x0000EE ; 68.906 31, 0.933
040C26 F1 00 00    0864*      dl 0x0000F1 ; 70.313 32, 0.942
040C29 F3 00 00    0865*      dl 0x0000F3 ; 71.719 33, 0.950
040C2C F4 00 00    0866*      dl 0x0000F4 ; 73.125 34, 0.957
040C2F F6 00 00    0867*      dl 0x0000F6 ; 74.531 35, 0.964
040C32 F8 00 00    0868*      dl 0x0000F8 ; 75.938 36, 0.970
040C35 F9 00 00    0869*      dl 0x0000F9 ; 77.344 37, 0.976
040C38 FB 00 00    0870*      dl 0x0000FB ; 78.750 38, 0.981
040C3B FC 00 00    0871*      dl 0x0000FC ; 80.156 39, 0.985
040C3E FD 00 00    0872*      dl 0x0000FD ; 81.563 3A, 0.989
040C41 FE 00 00    0873*      dl 0x0000FE ; 82.969 3B, 0.992
040C44 FE 00 00    0874*      dl 0x0000FE ; 84.375 3C, 0.995
040C47 FF 00 00    0875*      dl 0x0000FF ; 85.781 3D, 0.997
040C4A FF 00 00    0876*      dl 0x0000FF ; 87.188 3E, 0.999
040C4D FF 00 00    0877*      dl 0x0000FF ; 88.594 3F, 1.000
040C50 00 01 00    0878*      dl 0x000100 ; 90.000 40, 1.000
040C53 FF 00 00    0879*      dl 0x0000FF ; 91.406 41, 1.000
040C56 FF 00 00    0880*      dl 0x0000FF ; 92.813 42, 0.999
040C59 FF 00 00    0881*      dl 0x0000FF ; 94.219 43, 0.997
040C5C FE 00 00    0882*      dl 0x0000FE ; 95.625 44, 0.995
040C5F FE 00 00    0883*      dl 0x0000FE ; 97.031 45, 0.992
040C62 FD 00 00    0884*      dl 0x0000FD ; 98.438 46, 0.989
040C65 FC 00 00    0885*      dl 0x0000FC ; 99.844 47, 0.985
040C68 FB 00 00    0886*      dl 0x0000FB ; 101.250 48, 0.981
040C6B F9 00 00    0887*      dl 0x0000F9 ; 102.656 49, 0.976
040C6E F8 00 00    0888*      dl 0x0000F8 ; 104.063 4A, 0.970
040C71 F6 00 00    0889*      dl 0x0000F6 ; 105.469 4B, 0.964
040C74 F4 00 00    0890*      dl 0x0000F4 ; 106.875 4C, 0.957
040C77 F3 00 00    0891*      dl 0x0000F3 ; 108.281 4D, 0.950
040C7A F1 00 00    0892*      dl 0x0000F1 ; 109.688 4E, 0.942
040C7D EE 00 00    0893*      dl 0x0000EE ; 111.094 4F, 0.933
040C80 EC 00 00    0894*      dl 0x0000EC ; 112.500 50, 0.924
040C83 EA 00 00    0895*      dl 0x0000EA ; 113.906 51, 0.914
040C86 E7 00 00    0896*      dl 0x0000E7 ; 115.313 52, 0.904
040C89 E4 00 00    0897*      dl 0x0000E4 ; 116.719 53, 0.893
040C8C E1 00 00    0898*      dl 0x0000E1 ; 118.125 54, 0.882
040C8F DE 00 00    0899*      dl 0x0000DE ; 119.531 55, 0.870
040C92 DB 00 00    0900*      dl 0x0000DB ; 120.938 56, 0.858
040C95 D8 00 00    0901*      dl 0x0000D8 ; 122.344 57, 0.845
040C98 D4 00 00    0902*      dl 0x0000D4 ; 123.750 58, 0.831
040C9B D1 00 00    0903*      dl 0x0000D1 ; 125.156 59, 0.818
040C9E CD 00 00    0904*      dl 0x0000CD ; 126.563 5A, 0.803
040CA1 C9 00 00    0905*      dl 0x0000C9 ; 127.969 5B, 0.788
040CA4 C5 00 00    0906*      dl 0x0000C5 ; 129.375 5C, 0.773
040CA7 C1 00 00    0907*      dl 0x0000C1 ; 130.781 5D, 0.757
040CAA BD 00 00    0908*      dl 0x0000BD ; 132.188 5E, 0.741
040CAD B9 00 00    0909*      dl 0x0000B9 ; 133.594 5F, 0.724
040CB0 B5 00 00    0910*      dl 0x0000B5 ; 135.000 60, 0.707
040CB3 B0 00 00    0911*      dl 0x0000B0 ; 136.406 61, 0.690
040CB6 AB 00 00    0912*      dl 0x0000AB ; 137.813 62, 0.672
040CB9 A7 00 00    0913*      dl 0x0000A7 ; 139.219 63, 0.653
040CBC A2 00 00    0914*      dl 0x0000A2 ; 140.625 64, 0.634
040CBF 9D 00 00    0915*      dl 0x00009D ; 142.031 65, 0.615
040CC2 98 00 00    0916*      dl 0x000098 ; 143.438 66, 0.596
040CC5 93 00 00    0917*      dl 0x000093 ; 144.844 67, 0.576
040CC8 8E 00 00    0918*      dl 0x00008E ; 146.250 68, 0.556
040CCB 88 00 00    0919*      dl 0x000088 ; 147.656 69, 0.535
040CCE 83 00 00    0920*      dl 0x000083 ; 149.063 6A, 0.514
040CD1 7E 00 00    0921*      dl 0x00007E ; 150.469 6B, 0.493
040CD4 78 00 00    0922*      dl 0x000078 ; 151.875 6C, 0.471
040CD7 73 00 00    0923*      dl 0x000073 ; 153.281 6D, 0.450
040CDA 6D 00 00    0924*      dl 0x00006D ; 154.688 6E, 0.428
040CDD 67 00 00    0925*      dl 0x000067 ; 156.094 6F, 0.405
040CE0 61 00 00    0926*      dl 0x000061 ; 157.500 70, 0.383
040CE3 5C 00 00    0927*      dl 0x00005C ; 158.906 71, 0.360
040CE6 56 00 00    0928*      dl 0x000056 ; 160.313 72, 0.337
040CE9 50 00 00    0929*      dl 0x000050 ; 161.719 73, 0.314
040CEC 4A 00 00    0930*      dl 0x00004A ; 163.125 74, 0.290
040CEF 44 00 00    0931*      dl 0x000044 ; 164.531 75, 0.267
040CF2 3E 00 00    0932*      dl 0x00003E ; 165.938 76, 0.243
040CF5 38 00 00    0933*      dl 0x000038 ; 167.344 77, 0.219
040CF8 31 00 00    0934*      dl 0x000031 ; 168.750 78, 0.195
040CFB 2B 00 00    0935*      dl 0x00002B ; 170.156 79, 0.171
040CFE 25 00 00    0936*      dl 0x000025 ; 171.563 7A, 0.147
040D01 1F 00 00    0937*      dl 0x00001F ; 172.969 7B, 0.122
040D04 19 00 00    0938*      dl 0x000019 ; 174.375 7C, 0.098
040D07 12 00 00    0939*      dl 0x000012 ; 175.781 7D, 0.074
040D0A 0C 00 00    0940*      dl 0x00000C ; 177.188 7E, 0.049
040D0D 06 00 00    0941*      dl 0x000006 ; 178.594 7F, 0.025
040D10 00 00 00    0942*      dl 0x000000 ; 180.000 80, 0.000
040D13 FA FF FF    0943*      dl 0xFFFFFA ; 181.406 81, -0.025
040D16 F4 FF FF    0944*      dl 0xFFFFF4 ; 182.813 82, -0.049
040D19 EE FF FF    0945*      dl 0xFFFFEE ; 184.219 83, -0.074
040D1C E7 FF FF    0946*      dl 0xFFFFE7 ; 185.625 84, -0.098
040D1F E1 FF FF    0947*      dl 0xFFFFE1 ; 187.031 85, -0.122
040D22 DB FF FF    0948*      dl 0xFFFFDB ; 188.438 86, -0.147
040D25 D5 FF FF    0949*      dl 0xFFFFD5 ; 189.844 87, -0.171
040D28 CF FF FF    0950*      dl 0xFFFFCF ; 191.250 88, -0.195
040D2B C8 FF FF    0951*      dl 0xFFFFC8 ; 192.656 89, -0.219
040D2E C2 FF FF    0952*      dl 0xFFFFC2 ; 194.063 8A, -0.243
040D31 BC FF FF    0953*      dl 0xFFFFBC ; 195.469 8B, -0.267
040D34 B6 FF FF    0954*      dl 0xFFFFB6 ; 196.875 8C, -0.290
040D37 B0 FF FF    0955*      dl 0xFFFFB0 ; 198.281 8D, -0.314
040D3A AA FF FF    0956*      dl 0xFFFFAA ; 199.688 8E, -0.337
040D3D A4 FF FF    0957*      dl 0xFFFFA4 ; 201.094 8F, -0.360
040D40 9F FF FF    0958*      dl 0xFFFF9F ; 202.500 90, -0.383
040D43 99 FF FF    0959*      dl 0xFFFF99 ; 203.906 91, -0.405
040D46 93 FF FF    0960*      dl 0xFFFF93 ; 205.313 92, -0.428
040D49 8D FF FF    0961*      dl 0xFFFF8D ; 206.719 93, -0.450
040D4C 88 FF FF    0962*      dl 0xFFFF88 ; 208.125 94, -0.471
040D4F 82 FF FF    0963*      dl 0xFFFF82 ; 209.531 95, -0.493
040D52 7D FF FF    0964*      dl 0xFFFF7D ; 210.938 96, -0.514
040D55 78 FF FF    0965*      dl 0xFFFF78 ; 212.344 97, -0.535
040D58 72 FF FF    0966*      dl 0xFFFF72 ; 213.750 98, -0.556
040D5B 6D FF FF    0967*      dl 0xFFFF6D ; 215.156 99, -0.576
040D5E 68 FF FF    0968*      dl 0xFFFF68 ; 216.563 9A, -0.596
040D61 63 FF FF    0969*      dl 0xFFFF63 ; 217.969 9B, -0.615
040D64 5E FF FF    0970*      dl 0xFFFF5E ; 219.375 9C, -0.634
040D67 59 FF FF    0971*      dl 0xFFFF59 ; 220.781 9D, -0.653
040D6A 55 FF FF    0972*      dl 0xFFFF55 ; 222.188 9E, -0.672
040D6D 50 FF FF    0973*      dl 0xFFFF50 ; 223.594 9F, -0.690
040D70 4B FF FF    0974*      dl 0xFFFF4B ; 225.000 A0, -0.707
040D73 47 FF FF    0975*      dl 0xFFFF47 ; 226.406 A1, -0.724
040D76 43 FF FF    0976*      dl 0xFFFF43 ; 227.813 A2, -0.741
040D79 3F FF FF    0977*      dl 0xFFFF3F ; 229.219 A3, -0.757
040D7C 3B FF FF    0978*      dl 0xFFFF3B ; 230.625 A4, -0.773
040D7F 37 FF FF    0979*      dl 0xFFFF37 ; 232.031 A5, -0.788
040D82 33 FF FF    0980*      dl 0xFFFF33 ; 233.438 A6, -0.803
040D85 2F FF FF    0981*      dl 0xFFFF2F ; 234.844 A7, -0.818
040D88 2C FF FF    0982*      dl 0xFFFF2C ; 236.250 A8, -0.831
040D8B 28 FF FF    0983*      dl 0xFFFF28 ; 237.656 A9, -0.845
040D8E 25 FF FF    0984*      dl 0xFFFF25 ; 239.063 AA, -0.858
040D91 22 FF FF    0985*      dl 0xFFFF22 ; 240.469 AB, -0.870
040D94 1F FF FF    0986*      dl 0xFFFF1F ; 241.875 AC, -0.882
040D97 1C FF FF    0987*      dl 0xFFFF1C ; 243.281 AD, -0.893
040D9A 19 FF FF    0988*      dl 0xFFFF19 ; 244.688 AE, -0.904
040D9D 16 FF FF    0989*      dl 0xFFFF16 ; 246.094 AF, -0.914
040DA0 14 FF FF    0990*      dl 0xFFFF14 ; 247.500 B0, -0.924
040DA3 12 FF FF    0991*      dl 0xFFFF12 ; 248.906 B1, -0.933
040DA6 0F FF FF    0992*      dl 0xFFFF0F ; 250.313 B2, -0.942
040DA9 0D FF FF    0993*      dl 0xFFFF0D ; 251.719 B3, -0.950
040DAC 0C FF FF    0994*      dl 0xFFFF0C ; 253.125 B4, -0.957
040DAF 0A FF FF    0995*      dl 0xFFFF0A ; 254.531 B5, -0.964
040DB2 08 FF FF    0996*      dl 0xFFFF08 ; 255.938 B6, -0.970
040DB5 07 FF FF    0997*      dl 0xFFFF07 ; 257.344 B7, -0.976
040DB8 05 FF FF    0998*      dl 0xFFFF05 ; 258.750 B8, -0.981
040DBB 04 FF FF    0999*      dl 0xFFFF04 ; 260.156 B9, -0.985
040DBE 03 FF FF    1000*      dl 0xFFFF03 ; 261.563 BA, -0.989
040DC1 02 FF FF    1001*      dl 0xFFFF02 ; 262.969 BB, -0.992
040DC4 02 FF FF    1002*      dl 0xFFFF02 ; 264.375 BC, -0.995
040DC7 01 FF FF    1003*      dl 0xFFFF01 ; 265.781 BD, -0.997
040DCA 01 FF FF    1004*      dl 0xFFFF01 ; 267.188 BE, -0.999
040DCD 01 FF FF    1005*      dl 0xFFFF01 ; 268.594 BF, -1.000
040DD0 00 FF FF    1006*      dl 0xFFFF00 ; 270.000 C0, -1.000
040DD3 01 FF FF    1007*      dl 0xFFFF01 ; 271.406 C1, -1.000
040DD6 01 FF FF    1008*      dl 0xFFFF01 ; 272.813 C2, -0.999
040DD9 01 FF FF    1009*      dl 0xFFFF01 ; 274.219 C3, -0.997
040DDC 02 FF FF    1010*      dl 0xFFFF02 ; 275.625 C4, -0.995
040DDF 02 FF FF    1011*      dl 0xFFFF02 ; 277.031 C5, -0.992
040DE2 03 FF FF    1012*      dl 0xFFFF03 ; 278.438 C6, -0.989
040DE5 04 FF FF    1013*      dl 0xFFFF04 ; 279.844 C7, -0.985
040DE8 05 FF FF    1014*      dl 0xFFFF05 ; 281.250 C8, -0.981
040DEB 07 FF FF    1015*      dl 0xFFFF07 ; 282.656 C9, -0.976
040DEE 08 FF FF    1016*      dl 0xFFFF08 ; 284.063 CA, -0.970
040DF1 0A FF FF    1017*      dl 0xFFFF0A ; 285.469 CB, -0.964
040DF4 0C FF FF    1018*      dl 0xFFFF0C ; 286.875 CC, -0.957
040DF7 0D FF FF    1019*      dl 0xFFFF0D ; 288.281 CD, -0.950
040DFA 0F FF FF    1020*      dl 0xFFFF0F ; 289.688 CE, -0.942
040DFD 12 FF FF    1021*      dl 0xFFFF12 ; 291.094 CF, -0.933
040E00 14 FF FF    1022*      dl 0xFFFF14 ; 292.500 D0, -0.924
040E03 16 FF FF    1023*      dl 0xFFFF16 ; 293.906 D1, -0.914
040E06 19 FF FF    1024*      dl 0xFFFF19 ; 295.313 D2, -0.904
040E09 1C FF FF    1025*      dl 0xFFFF1C ; 296.719 D3, -0.893
040E0C 1F FF FF    1026*      dl 0xFFFF1F ; 298.125 D4, -0.882
040E0F 22 FF FF    1027*      dl 0xFFFF22 ; 299.531 D5, -0.870
040E12 25 FF FF    1028*      dl 0xFFFF25 ; 300.938 D6, -0.858
040E15 28 FF FF    1029*      dl 0xFFFF28 ; 302.344 D7, -0.845
040E18 2C FF FF    1030*      dl 0xFFFF2C ; 303.750 D8, -0.831
040E1B 2F FF FF    1031*      dl 0xFFFF2F ; 305.156 D9, -0.818
040E1E 33 FF FF    1032*      dl 0xFFFF33 ; 306.563 DA, -0.803
040E21 37 FF FF    1033*      dl 0xFFFF37 ; 307.969 DB, -0.788
040E24 3B FF FF    1034*      dl 0xFFFF3B ; 309.375 DC, -0.773
040E27 3F FF FF    1035*      dl 0xFFFF3F ; 310.781 DD, -0.757
040E2A 43 FF FF    1036*      dl 0xFFFF43 ; 312.188 DE, -0.741
040E2D 47 FF FF    1037*      dl 0xFFFF47 ; 313.594 DF, -0.724
040E30 4B FF FF    1038*      dl 0xFFFF4B ; 315.000 E0, -0.707
040E33 50 FF FF    1039*      dl 0xFFFF50 ; 316.406 E1, -0.690
040E36 55 FF FF    1040*      dl 0xFFFF55 ; 317.813 E2, -0.672
040E39 59 FF FF    1041*      dl 0xFFFF59 ; 319.219 E3, -0.653
040E3C 5E FF FF    1042*      dl 0xFFFF5E ; 320.625 E4, -0.634
040E3F 63 FF FF    1043*      dl 0xFFFF63 ; 322.031 E5, -0.615
040E42 68 FF FF    1044*      dl 0xFFFF68 ; 323.438 E6, -0.596
040E45 6D FF FF    1045*      dl 0xFFFF6D ; 324.844 E7, -0.576
040E48 72 FF FF    1046*      dl 0xFFFF72 ; 326.250 E8, -0.556
040E4B 78 FF FF    1047*      dl 0xFFFF78 ; 327.656 E9, -0.535
040E4E 7D FF FF    1048*      dl 0xFFFF7D ; 329.063 EA, -0.514
040E51 82 FF FF    1049*      dl 0xFFFF82 ; 330.469 EB, -0.493
040E54 88 FF FF    1050*      dl 0xFFFF88 ; 331.875 EC, -0.471
040E57 8D FF FF    1051*      dl 0xFFFF8D ; 333.281 ED, -0.450
040E5A 93 FF FF    1052*      dl 0xFFFF93 ; 334.688 EE, -0.428
040E5D 99 FF FF    1053*      dl 0xFFFF99 ; 336.094 EF, -0.405
040E60 9F FF FF    1054*      dl 0xFFFF9F ; 337.500 F0, -0.383
040E63 A4 FF FF    1055*      dl 0xFFFFA4 ; 338.906 F1, -0.360
040E66 AA FF FF    1056*      dl 0xFFFFAA ; 340.313 F2, -0.337
040E69 B0 FF FF    1057*      dl 0xFFFFB0 ; 341.719 F3, -0.314
040E6C B6 FF FF    1058*      dl 0xFFFFB6 ; 343.125 F4, -0.290
040E6F BC FF FF    1059*      dl 0xFFFFBC ; 344.531 F5, -0.267
040E72 C2 FF FF    1060*      dl 0xFFFFC2 ; 345.938 F6, -0.243
040E75 C8 FF FF    1061*      dl 0xFFFFC8 ; 347.344 F7, -0.219
040E78 CF FF FF    1062*      dl 0xFFFFCF ; 348.750 F8, -0.195
040E7B D5 FF FF    1063*      dl 0xFFFFD5 ; 350.156 F9, -0.171
040E7E DB FF FF    1064*      dl 0xFFFFDB ; 351.563 FA, -0.147
040E81 E1 FF FF    1065*      dl 0xFFFFE1 ; 352.969 FB, -0.122
040E84 E7 FF FF    1066*      dl 0xFFFFE7 ; 354.375 FC, -0.098
040E87 EE FF FF    1067*      dl 0xFFFFEE ; 355.781 FD, -0.074
040E8A F4 FF FF    1068*      dl 0xFFFFF4 ; 357.188 FE, -0.049
040E8D FA FF FF    1069*      dl 0xFFFFFA ; 358.594 FF, -0.025
040E90 00 00 00    1070*      dl 0x000000 ; 0.000 00, 0.000 for interpolation
040E93             1071*  
040E93             1072*  atan_lut_168:
040E93 00 00 00    1073*      dl 0x000000 ; 000000, 0.000
040E96 28 00 00    1074*      dl 0x000028 ; 000001, 0.224
040E99 51 00 00    1075*      dl 0x000051 ; 000002, 0.448
040E9C 7A 00 00    1076*      dl 0x00007A ; 000003, 0.671
040E9F A2 00 00    1077*      dl 0x0000A2 ; 000004, 0.895
040EA2 CB 00 00    1078*      dl 0x0000CB ; 000005, 1.119
040EA5 F4 00 00    1079*      dl 0x0000F4 ; 000006, 1.343
040EA8 1D 01 00    1080*      dl 0x00011D ; 000007, 1.566
040EAB 45 01 00    1081*      dl 0x000145 ; 000008, 1.790
040EAE 6E 01 00    1082*      dl 0x00016E ; 000009, 2.013
040EB1 97 01 00    1083*      dl 0x000197 ; 00000A, 2.237
040EB4 BF 01 00    1084*      dl 0x0001BF ; 00000B, 2.460
040EB7 E8 01 00    1085*      dl 0x0001E8 ; 00000C, 2.684
040EBA 11 02 00    1086*      dl 0x000211 ; 00000D, 2.907
040EBD 39 02 00    1087*      dl 0x000239 ; 00000E, 3.130
040EC0 62 02 00    1088*      dl 0x000262 ; 00000F, 3.353
040EC3 8B 02 00    1089*      dl 0x00028B ; 000010, 3.576
040EC6 B3 02 00    1090*      dl 0x0002B3 ; 000011, 3.799
040EC9 DC 02 00    1091*      dl 0x0002DC ; 000012, 4.022
040ECC 04 03 00    1092*      dl 0x000304 ; 000013, 4.245
040ECF 2D 03 00    1093*      dl 0x00032D ; 000014, 4.467
040ED2 55 03 00    1094*      dl 0x000355 ; 000015, 4.690
040ED5 7E 03 00    1095*      dl 0x00037E ; 000016, 4.912
040ED8 A6 03 00    1096*      dl 0x0003A6 ; 000017, 5.134
040EDB CE 03 00    1097*      dl 0x0003CE ; 000018, 5.356
040EDE F7 03 00    1098*      dl 0x0003F7 ; 000019, 5.578
040EE1 1F 04 00    1099*      dl 0x00041F ; 00001A, 5.799
040EE4 48 04 00    1100*      dl 0x000448 ; 00001B, 6.021
040EE7 70 04 00    1101*      dl 0x000470 ; 00001C, 6.242
040EEA 98 04 00    1102*      dl 0x000498 ; 00001D, 6.463
040EED C0 04 00    1103*      dl 0x0004C0 ; 00001E, 6.684
040EF0 E8 04 00    1104*      dl 0x0004E8 ; 00001F, 6.905
040EF3 11 05 00    1105*      dl 0x000511 ; 000020, 7.125
040EF6 39 05 00    1106*      dl 0x000539 ; 000021, 7.345
040EF9 61 05 00    1107*      dl 0x000561 ; 000022, 7.565
040EFC 89 05 00    1108*      dl 0x000589 ; 000023, 7.785
040EFF B1 05 00    1109*      dl 0x0005B1 ; 000024, 8.005
040F02 D9 05 00    1110*      dl 0x0005D9 ; 000025, 8.224
040F05 01 06 00    1111*      dl 0x000601 ; 000026, 8.443
040F08 28 06 00    1112*      dl 0x000628 ; 000027, 8.662
040F0B 50 06 00    1113*      dl 0x000650 ; 000028, 8.881
040F0E 78 06 00    1114*      dl 0x000678 ; 000029, 9.099
040F11 A0 06 00    1115*      dl 0x0006A0 ; 00002A, 9.317
040F14 C7 06 00    1116*      dl 0x0006C7 ; 00002B, 9.535
040F17 EF 06 00    1117*      dl 0x0006EF ; 00002C, 9.752
040F1A 16 07 00    1118*      dl 0x000716 ; 00002D, 9.970
040F1D 3E 07 00    1119*      dl 0x00073E ; 00002E, 10.187
040F20 65 07 00    1120*      dl 0x000765 ; 00002F, 10.403
040F23 8D 07 00    1121*      dl 0x00078D ; 000030, 10.620
040F26 B4 07 00    1122*      dl 0x0007B4 ; 000031, 10.836
040F29 DB 07 00    1123*      dl 0x0007DB ; 000032, 11.051
040F2C 03 08 00    1124*      dl 0x000803 ; 000033, 11.267
040F2F 2A 08 00    1125*      dl 0x00082A ; 000034, 11.482
040F32 51 08 00    1126*      dl 0x000851 ; 000035, 11.697
040F35 78 08 00    1127*      dl 0x000878 ; 000036, 11.911
040F38 9F 08 00    1128*      dl 0x00089F ; 000037, 12.125
040F3B C6 08 00    1129*      dl 0x0008C6 ; 000038, 12.339
040F3E ED 08 00    1130*      dl 0x0008ED ; 000039, 12.553
040F41 13 09 00    1131*      dl 0x000913 ; 00003A, 12.766
040F44 3A 09 00    1132*      dl 0x00093A ; 00003B, 12.978
040F47 61 09 00    1133*      dl 0x000961 ; 00003C, 13.191
040F4A 87 09 00    1134*      dl 0x000987 ; 00003D, 13.403
040F4D AE 09 00    1135*      dl 0x0009AE ; 00003E, 13.614
040F50 D4 09 00    1136*      dl 0x0009D4 ; 00003F, 13.825
040F53 FB 09 00    1137*      dl 0x0009FB ; 000040, 14.036
040F56 21 0A 00    1138*      dl 0x000A21 ; 000041, 14.247
040F59 47 0A 00    1139*      dl 0x000A47 ; 000042, 14.457
040F5C 6D 0A 00    1140*      dl 0x000A6D ; 000043, 14.666
040F5F 94 0A 00    1141*      dl 0x000A94 ; 000044, 14.876
040F62 BA 0A 00    1142*      dl 0x000ABA ; 000045, 15.085
040F65 E0 0A 00    1143*      dl 0x000AE0 ; 000046, 15.293
040F68 05 0B 00    1144*      dl 0x000B05 ; 000047, 15.501
040F6B 2B 0B 00    1145*      dl 0x000B2B ; 000048, 15.709
040F6E 51 0B 00    1146*      dl 0x000B51 ; 000049, 15.916
040F71 77 0B 00    1147*      dl 0x000B77 ; 00004A, 16.123
040F74 9C 0B 00    1148*      dl 0x000B9C ; 00004B, 16.329
040F77 C2 0B 00    1149*      dl 0x000BC2 ; 00004C, 16.535
040F7A E7 0B 00    1150*      dl 0x000BE7 ; 00004D, 16.740
040F7D 0C 0C 00    1151*      dl 0x000C0C ; 00004E, 16.945
040F80 32 0C 00    1152*      dl 0x000C32 ; 00004F, 17.150
040F83 57 0C 00    1153*      dl 0x000C57 ; 000050, 17.354
040F86 7C 0C 00    1154*      dl 0x000C7C ; 000051, 17.558
040F89 A1 0C 00    1155*      dl 0x000CA1 ; 000052, 17.761
040F8C C6 0C 00    1156*      dl 0x000CC6 ; 000053, 17.964
040F8F EB 0C 00    1157*      dl 0x000CEB ; 000054, 18.166
040F92 0F 0D 00    1158*      dl 0x000D0F ; 000055, 18.368
040F95 34 0D 00    1159*      dl 0x000D34 ; 000056, 18.569
040F98 58 0D 00    1160*      dl 0x000D58 ; 000057, 18.770
040F9B 7D 0D 00    1161*      dl 0x000D7D ; 000058, 18.970
040F9E A1 0D 00    1162*      dl 0x000DA1 ; 000059, 19.170
040FA1 C6 0D 00    1163*      dl 0x000DC6 ; 00005A, 19.370
040FA4 EA 0D 00    1164*      dl 0x000DEA ; 00005B, 19.569
040FA7 0E 0E 00    1165*      dl 0x000E0E ; 00005C, 19.767
040FAA 32 0E 00    1166*      dl 0x000E32 ; 00005D, 19.965
040FAD 56 0E 00    1167*      dl 0x000E56 ; 00005E, 20.163
040FB0 7A 0E 00    1168*      dl 0x000E7A ; 00005F, 20.360
040FB3 9E 0E 00    1169*      dl 0x000E9E ; 000060, 20.556
040FB6 C1 0E 00    1170*      dl 0x000EC1 ; 000061, 20.752
040FB9 E5 0E 00    1171*      dl 0x000EE5 ; 000062, 20.947
040FBC 08 0F 00    1172*      dl 0x000F08 ; 000063, 21.142
040FBF 2C 0F 00    1173*      dl 0x000F2C ; 000064, 21.337
040FC2 4F 0F 00    1174*      dl 0x000F4F ; 000065, 21.531
040FC5 72 0F 00    1175*      dl 0x000F72 ; 000066, 21.724
040FC8 95 0F 00    1176*      dl 0x000F95 ; 000067, 21.917
040FCB B8 0F 00    1177*      dl 0x000FB8 ; 000068, 22.109
040FCE DB 0F 00    1178*      dl 0x000FDB ; 000069, 22.301
040FD1 FE 0F 00    1179*      dl 0x000FFE ; 00006A, 22.493
040FD4 21 10 00    1180*      dl 0x001021 ; 00006B, 22.683
040FD7 44 10 00    1181*      dl 0x001044 ; 00006C, 22.874
040FDA 66 10 00    1182*      dl 0x001066 ; 00006D, 23.063
040FDD 89 10 00    1183*      dl 0x001089 ; 00006E, 23.253
040FE0 AB 10 00    1184*      dl 0x0010AB ; 00006F, 23.441
040FE3 CD 10 00    1185*      dl 0x0010CD ; 000070, 23.629
040FE6 EF 10 00    1186*      dl 0x0010EF ; 000071, 23.817
040FE9 11 11 00    1187*      dl 0x001111 ; 000072, 24.004
040FEC 33 11 00    1188*      dl 0x001133 ; 000073, 24.191
040FEF 55 11 00    1189*      dl 0x001155 ; 000074, 24.376
040FF2 77 11 00    1190*      dl 0x001177 ; 000075, 24.562
040FF5 99 11 00    1191*      dl 0x001199 ; 000076, 24.747
040FF8 BA 11 00    1192*      dl 0x0011BA ; 000077, 24.931
040FFB DC 11 00    1193*      dl 0x0011DC ; 000078, 25.115
040FFE FD 11 00    1194*      dl 0x0011FD ; 000079, 25.298
041001 1E 12 00    1195*      dl 0x00121E ; 00007A, 25.481
041004 3F 12 00    1196*      dl 0x00123F ; 00007B, 25.663
041007 60 12 00    1197*      dl 0x001260 ; 00007C, 25.844
04100A 81 12 00    1198*      dl 0x001281 ; 00007D, 26.025
04100D A2 12 00    1199*      dl 0x0012A2 ; 00007E, 26.206
041010 C3 12 00    1200*      dl 0x0012C3 ; 00007F, 26.386
041013 E4 12 00    1201*      dl 0x0012E4 ; 000080, 26.565
041016 04 13 00    1202*      dl 0x001304 ; 000081, 26.744
041019 25 13 00    1203*      dl 0x001325 ; 000082, 26.922
04101C 45 13 00    1204*      dl 0x001345 ; 000083, 27.100
04101F 65 13 00    1205*      dl 0x001365 ; 000084, 27.277
041022 85 13 00    1206*      dl 0x001385 ; 000085, 27.453
041025 A5 13 00    1207*      dl 0x0013A5 ; 000086, 27.629
041028 C5 13 00    1208*      dl 0x0013C5 ; 000087, 27.805
04102B E5 13 00    1209*      dl 0x0013E5 ; 000088, 27.979
04102E 05 14 00    1210*      dl 0x001405 ; 000089, 28.154
041031 24 14 00    1211*      dl 0x001424 ; 00008A, 28.327
041034 44 14 00    1212*      dl 0x001444 ; 00008B, 28.501
041037 63 14 00    1213*      dl 0x001463 ; 00008C, 28.673
04103A 83 14 00    1214*      dl 0x001483 ; 00008D, 28.845
04103D A2 14 00    1215*      dl 0x0014A2 ; 00008E, 29.017
041040 C1 14 00    1216*      dl 0x0014C1 ; 00008F, 29.187
041043 E0 14 00    1217*      dl 0x0014E0 ; 000090, 29.358
041046 FF 14 00    1218*      dl 0x0014FF ; 000091, 29.527
041049 1E 15 00    1219*      dl 0x00151E ; 000092, 29.697
04104C 3C 15 00    1220*      dl 0x00153C ; 000093, 29.865
04104F 5B 15 00    1221*      dl 0x00155B ; 000094, 30.033
041052 79 15 00    1222*      dl 0x001579 ; 000095, 30.201
041055 98 15 00    1223*      dl 0x001598 ; 000096, 30.368
041058 B6 15 00    1224*      dl 0x0015B6 ; 000097, 30.534
04105B D4 15 00    1225*      dl 0x0015D4 ; 000098, 30.700
04105E F2 15 00    1226*      dl 0x0015F2 ; 000099, 30.865
041061 10 16 00    1227*      dl 0x001610 ; 00009A, 31.030
041064 2E 16 00    1228*      dl 0x00162E ; 00009B, 31.194
041067 4C 16 00    1229*      dl 0x00164C ; 00009C, 31.357
04106A 6A 16 00    1230*      dl 0x00166A ; 00009D, 31.520
04106D 87 16 00    1231*      dl 0x001687 ; 00009E, 31.682
041070 A5 16 00    1232*      dl 0x0016A5 ; 00009F, 31.844
041073 C2 16 00    1233*      dl 0x0016C2 ; 0000A0, 32.005
041076 DF 16 00    1234*      dl 0x0016DF ; 0000A1, 32.166
041079 FC 16 00    1235*      dl 0x0016FC ; 0000A2, 32.326
04107C 19 17 00    1236*      dl 0x001719 ; 0000A3, 32.486
04107F 36 17 00    1237*      dl 0x001736 ; 0000A4, 32.645
041082 53 17 00    1238*      dl 0x001753 ; 0000A5, 32.803
041085 70 17 00    1239*      dl 0x001770 ; 0000A6, 32.961
041088 8C 17 00    1240*      dl 0x00178C ; 0000A7, 33.118
04108B A9 17 00    1241*      dl 0x0017A9 ; 0000A8, 33.275
04108E C5 17 00    1242*      dl 0x0017C5 ; 0000A9, 33.431
041091 E2 17 00    1243*      dl 0x0017E2 ; 0000AA, 33.587
041094 FE 17 00    1244*      dl 0x0017FE ; 0000AB, 33.742
041097 1A 18 00    1245*      dl 0x00181A ; 0000AC, 33.896
04109A 36 18 00    1246*      dl 0x001836 ; 0000AD, 34.050
04109D 52 18 00    1247*      dl 0x001852 ; 0000AE, 34.203
0410A0 6E 18 00    1248*      dl 0x00186E ; 0000AF, 34.356
0410A3 8A 18 00    1249*      dl 0x00188A ; 0000B0, 34.509
0410A6 A5 18 00    1250*      dl 0x0018A5 ; 0000B1, 34.660
0410A9 C1 18 00    1251*      dl 0x0018C1 ; 0000B2, 34.811
0410AC DC 18 00    1252*      dl 0x0018DC ; 0000B3, 34.962
0410AF F7 18 00    1253*      dl 0x0018F7 ; 0000B4, 35.112
0410B2 13 19 00    1254*      dl 0x001913 ; 0000B5, 35.262
0410B5 2E 19 00    1255*      dl 0x00192E ; 0000B6, 35.410
0410B8 49 19 00    1256*      dl 0x001949 ; 0000B7, 35.559
0410BB 64 19 00    1257*      dl 0x001964 ; 0000B8, 35.707
0410BE 7F 19 00    1258*      dl 0x00197F ; 0000B9, 35.854
0410C1 99 19 00    1259*      dl 0x001999 ; 0000BA, 36.001
0410C4 B4 19 00    1260*      dl 0x0019B4 ; 0000BB, 36.147
0410C7 CE 19 00    1261*      dl 0x0019CE ; 0000BC, 36.293
0410CA E9 19 00    1262*      dl 0x0019E9 ; 0000BD, 36.438
0410CD 03 1A 00    1263*      dl 0x001A03 ; 0000BE, 36.582
0410D0 1D 1A 00    1264*      dl 0x001A1D ; 0000BF, 36.726
0410D3 37 1A 00    1265*      dl 0x001A37 ; 0000C0, 36.870
0410D6 51 1A 00    1266*      dl 0x001A51 ; 0000C1, 37.013
0410D9 6B 1A 00    1267*      dl 0x001A6B ; 0000C2, 37.155
0410DC 85 1A 00    1268*      dl 0x001A85 ; 0000C3, 37.297
0410DF 9F 1A 00    1269*      dl 0x001A9F ; 0000C4, 37.439
0410E2 B9 1A 00    1270*      dl 0x001AB9 ; 0000C5, 37.579
0410E5 D2 1A 00    1271*      dl 0x001AD2 ; 0000C6, 37.720
0410E8 EC 1A 00    1272*      dl 0x001AEC ; 0000C7, 37.859
0410EB 05 1B 00    1273*      dl 0x001B05 ; 0000C8, 37.999
0410EE 1E 1B 00    1274*      dl 0x001B1E ; 0000C9, 38.137
0410F1 37 1B 00    1275*      dl 0x001B37 ; 0000CA, 38.276
0410F4 50 1B 00    1276*      dl 0x001B50 ; 0000CB, 38.413
0410F7 69 1B 00    1277*      dl 0x001B69 ; 0000CC, 38.550
0410FA 82 1B 00    1278*      dl 0x001B82 ; 0000CD, 38.687
0410FD 9B 1B 00    1279*      dl 0x001B9B ; 0000CE, 38.823
041100 B4 1B 00    1280*      dl 0x001BB4 ; 0000CF, 38.959
041103 CC 1B 00    1281*      dl 0x001BCC ; 0000D0, 39.094
041106 E5 1B 00    1282*      dl 0x001BE5 ; 0000D1, 39.228
041109 FD 1B 00    1283*      dl 0x001BFD ; 0000D2, 39.362
04110C 16 1C 00    1284*      dl 0x001C16 ; 0000D3, 39.496
04110F 2E 1C 00    1285*      dl 0x001C2E ; 0000D4, 39.629
041112 46 1C 00    1286*      dl 0x001C46 ; 0000D5, 39.762
041115 5E 1C 00    1287*      dl 0x001C5E ; 0000D6, 39.894
041118 76 1C 00    1288*      dl 0x001C76 ; 0000D7, 40.025
04111B 8E 1C 00    1289*      dl 0x001C8E ; 0000D8, 40.156
04111E A5 1C 00    1290*      dl 0x001CA5 ; 0000D9, 40.286
041121 BD 1C 00    1291*      dl 0x001CBD ; 0000DA, 40.416
041124 D5 1C 00    1292*      dl 0x001CD5 ; 0000DB, 40.546
041127 EC 1C 00    1293*      dl 0x001CEC ; 0000DC, 40.675
04112A 04 1D 00    1294*      dl 0x001D04 ; 0000DD, 40.803
04112D 1B 1D 00    1295*      dl 0x001D1B ; 0000DE, 40.931
041130 32 1D 00    1296*      dl 0x001D32 ; 0000DF, 41.059
041133 49 1D 00    1297*      dl 0x001D49 ; 0000E0, 41.186
041136 60 1D 00    1298*      dl 0x001D60 ; 0000E1, 41.312
041139 77 1D 00    1299*      dl 0x001D77 ; 0000E2, 41.438
04113C 8E 1D 00    1300*      dl 0x001D8E ; 0000E3, 41.564
04113F A5 1D 00    1301*      dl 0x001DA5 ; 0000E4, 41.689
041142 BB 1D 00    1302*      dl 0x001DBB ; 0000E5, 41.814
041145 D2 1D 00    1303*      dl 0x001DD2 ; 0000E6, 41.938
041148 E9 1D 00    1304*      dl 0x001DE9 ; 0000E7, 42.061
04114B FF 1D 00    1305*      dl 0x001DFF ; 0000E8, 42.184
04114E 15 1E 00    1306*      dl 0x001E15 ; 0000E9, 42.307
041151 2C 1E 00    1307*      dl 0x001E2C ; 0000EA, 42.429
041154 42 1E 00    1308*      dl 0x001E42 ; 0000EB, 42.551
041157 58 1E 00    1309*      dl 0x001E58 ; 0000EC, 42.672
04115A 6E 1E 00    1310*      dl 0x001E6E ; 0000ED, 42.793
04115D 84 1E 00    1311*      dl 0x001E84 ; 0000EE, 42.913
041160 99 1E 00    1312*      dl 0x001E99 ; 0000EF, 43.033
041163 AF 1E 00    1313*      dl 0x001EAF ; 0000F0, 43.152
041166 C5 1E 00    1314*      dl 0x001EC5 ; 0000F1, 43.271
041169 DA 1E 00    1315*      dl 0x001EDA ; 0000F2, 43.390
04116C F0 1E 00    1316*      dl 0x001EF0 ; 0000F3, 43.508
04116F 05 1F 00    1317*      dl 0x001F05 ; 0000F4, 43.625
041172 1B 1F 00    1318*      dl 0x001F1B ; 0000F5, 43.742
041175 30 1F 00    1319*      dl 0x001F30 ; 0000F6, 43.859
041178 45 1F 00    1320*      dl 0x001F45 ; 0000F7, 43.975
04117B 5A 1F 00    1321*      dl 0x001F5A ; 0000F8, 44.091
04117E 6F 1F 00    1322*      dl 0x001F6F ; 0000F9, 44.206
041181 84 1F 00    1323*      dl 0x001F84 ; 0000FA, 44.321
041184 99 1F 00    1324*      dl 0x001F99 ; 0000FB, 44.435
041187 AD 1F 00    1325*      dl 0x001FAD ; 0000FC, 44.549
04118A C2 1F 00    1326*      dl 0x001FC2 ; 0000FD, 44.662
04118D D7 1F 00    1327*      dl 0x001FD7 ; 0000FE, 44.775
041190 EB 1F 00    1328*      dl 0x001FEB ; 0000FF, 44.888
041193 00 20 00    1329*      dl 0x002000 ; 000100, 45.000 only needed for interpolation
041196             0034       include "fonts.inc"
041196             0001*  fonts_load:
041196 DD 21 90 1C 0002*      ld ix,font_list ; pointer to font list lookup
       04          
04119B 06 12       0003*      ld b,num_fonts ; loop counter
04119D             0004*  
04119D             0005*  @load_loop:
04119D C5          0006*      push bc ; save loop counter
04119E             0007*  
04119E             0008*  ; load font into a buffer
04119E DD 27 06    0009*      ld hl,(ix+font_list_bufferId)
0411A1 DD 31 09    0010*      ld iy,(ix+font_list_filename)
0411A4 CD B1 16 04 0011*      call vdu_load_buffer_from_file
0411A8             0012*  
0411A8             0013*  ; create font from buffer
0411A8 DD 27 06    0014*      ld hl,(ix+font_list_bufferId)
0411AB DD 5E 00    0015*      ld e,(ix+font_list_width)
0411AE DD 56 03    0016*      ld d,(ix+font_list_height)
0411B1 3E 00       0017*      ld a,0 ; flags
0411B3 CD 34 18 04 0018*      call vdu_font_create
0411B7             0019*  
0411B7             0020*  ; select font
0411B7 DD 27 06    0021*      ld hl,(ix+font_list_bufferId)
0411BA 3E 01       0022*      ld a,1 ; flags
0411BC CD 1A 18 04 0023*      call vdu_font_select
0411C0             0024*  
0411C0             0025*  ; ; debug print filename
0411C0             0026*  ;     call printNewLine
0411C0             0027*  ;     ld hl,(ix+font_list_filename)
0411C0             0028*  ;     call printString
0411C0             0029*  
0411C0             0030*  ; advance font_list pointer to next record
0411C0 ED 32 0C    0031*      lea ix,ix+font_list_record_size
0411C3             0032*  
0411C3             0033*  ; restore loop counter
0411C3 C1          0034*      pop bc
0411C4 10 D7       0035*      djnz @load_loop
0411C6             0036*  
0411C6             0037*  ; all done
0411C6 C9          0038*      ret
0411C7             0035       include "images.inc"
0411C7             0001*  image_type: equ 0
0411C7             0002*  image_width: equ image_type+3
0411C7             0003*  image_height: equ image_width+3
0411C7             0004*  image_filesize: equ image_height+3
0411C7             0005*  image_filename: equ image_filesize+3
0411C7             0006*  image_bufferId: equ image_filename+3
0411C7             0007*  image_record_size: equ image_bufferId+3
0411C7             0008*  
0411C7 00 00 00    0009*  cur_image_list: dl 0
0411CA 00 00 00    0010*  cur_filename: dl 0
0411CD 00 00 00    0011*  cur_buffer_id: dl 0
0411D0             0012*  
0411D0             0013*  img_load_init:
0411D0             0014*  ; initialize logo's position parameters
0411D0 21 00 00 00 0015*      ld hl,0
0411D4 22 86 12 04 0016*      ld (logo_xvel),hl
0411D8 22 89 12 04 0017*      ld (logo_xpos),hl
0411DC             0018*  ; begin 16.8 maths to determine logo's y position and velocity
0411DC 21 00 E0 00 0019*      ld hl,240-16*256 ; allow space for text at bottom of screen
0411E0 22 8F 12 04 0020*      ld (logo_ypos),hl
0411E4 EB          0021*      ex de,hl
0411E5 21 00 F8 FF 0022*      ld hl,-8*256 ; 8 pixels from top of screen
0411E9 19          0023*      add hl,de ; distance for logo to travel
0411EA 11 00 B1 FF 0024*      ld de,-sprites_num_images*256
0411EE CD AF 08 04 0025*      call sdiv168 ; ud.e = distance / num images = y velocity
0411F2 ED 53 8C 12 0026*      ld (logo_yvel),de
       04          
0411F7             0027*  ; all done
0411F7 C9          0028*      ret
0411F8             0029*  
0411F8             0030*  ; inputs: bc is the number of images to load, cur_image_list set
0411F8             0031*  img_load_main:
0411F8             0032*  ; back up loop counter
0411F8 C5          0033*      push bc
0411F9             0034*  
0411F9             0035*  ; load the next image
0411F9 CD 30 12 04 0036*      call load_next_image
0411FD             0037*  
0411FD             0038*  ; plot the background
0411FD CD 84 14 04 0039*      call vdu_cls
041201 21 02 00 00 0040*      ld hl,BUF_SPLASH_BG
041205 CD 71 15 04 0041*      call vdu_buff_select
041209 01 00 00 00 0042*      ld bc,0
04120D 11 00 00 00 0043*      ld de,0
041211 CD CD 18 04 0044*      call vdu_plot_bmp
041215             0045*  
041215             0046*  ; ; draw the most recently loaded image
041215             0047*  ; 	ld hl,(cur_buffer_id)
041215             0048*  ; 	call vdu_buff_select
041215             0049*  ; 	ld bc,0
041215             0050*  ; 	ld de,0
041215             0051*  ; 	call vdu_plot_bmp
041215             0052*  
041215             0053*  ; move logo
041215 CD 61 12 04 0054*      call move_logo
041219             0055*  
041219             0056*  ; print current filename
041219 2A CA 11 04 0057*      ld hl,(cur_filename)
04121D CD 77 00 04 0058*      call printString
041221             0059*  
041221             0060*  ; flip the framebuffer
041221             0061*      ; call vdu_flip
041221             0062*  
041221             0063*  ; decrement loop counter
041221 C1          0064*      pop bc
041222 0B          0065*      dec bc
041223 79          0066*      ld a,c
041224 B7          0067*      or a
041225 C2 F8 11 04 0068*      jp nz,img_load_main
041229 78          0069*      ld a,b
04122A B7          0070*      or a
04122B C2 F8 11 04 0071*      jp nz,img_load_main
04122F C9          0072*      ret
041230             0073*  
041230             0074*  load_next_image:
041230 FD 2A C7 11 0075*      ld iy,(cur_image_list)
       04          
041235 FD E5       0076*      push iy
041237 FD 7E 00    0077*      ld a,(iy+image_type) ; get image type
04123A FD 07 03    0078*      ld bc,(iy+image_width) ; get image width
04123D FD 17 06    0079*      ld de,(iy+image_height) ; get image height
041240 FD 31 09    0080*      ld ix,(iy+image_filesize) ; get image file size
041243 FD 27 0F    0081*      ld hl,(iy+image_bufferId) ; get image bufferId
041246 22 CD 11 04 0082*      ld (cur_buffer_id),hl
04124A FD 37 0C    0083*      ld iy,(iy+image_filename) ; get image filename
04124D FD 22 CA 11 0084*      ld (cur_filename),iy
       04          
041252 CD 8F 16 04 0085*      call vdu_load_img
041256 FD E1       0086*      pop iy
041258 ED 33 12    0087*      lea iy,iy+image_record_size
04125B FD 22 C7 11 0088*      ld (cur_image_list),iy
       04          
041260 C9          0089*      ret
041261             0090*  
041261             0091*  move_logo:
041261             0092*  ; activate logo bitmap
041261 21 03 00 00 0093*      ld hl, BUF_SPLASH_LOGO
041265 CD 71 15 04 0094*      call vdu_buff_select
041269             0095*  ; update position based on velocity parameters
041269 2A 8F 12 04 0096*      ld hl,(logo_ypos)
04126D ED 5B 8C 12 0097*      ld de,(logo_yvel)
       04          
041272 19          0098*      add hl,de
041273 22 8F 12 04 0099*      ld (logo_ypos),hl
041277             0100*  ; draw logo
041277 ED 4B 89 12 0101*      ld bc,(logo_xpos)
       04          
04127C ED 5B 8F 12 0102*      ld de,(logo_ypos)
       04          
041281 CD E9 18 04 0103*      call vdu_plot_bmp168
041285 C9          0104*      ret
041286             0105*  
041286 00 00 00    0106*  logo_xvel: dl 0
041289 00 00 00    0107*  logo_xpos: dl 0
04128C             0108*  
04128C 00 00 00    0109*  logo_yvel: dl 0
04128F 00 00 00    0110*  logo_ypos: dl 0
041292             0111*  
041292             0112*  load_ui_images:
041292             0113*  ; initialize image loading variables
041292 21 C8 48 04 0114*      ld hl,ui_image_list
041296 22 C7 11 04 0115*      ld (cur_image_list),hl
04129A             0116*  ; load images
04129A 06 04       0117*      ld b,ui_num_images
04129C             0118*  @loop:
04129C C5          0119*      push bc
04129D CD 30 12 04 0120*      call load_next_image
0412A1 C1          0121*      pop bc
0412A2 10 F8       0122*      djnz @loop
0412A4 C9          0123*      ret
0412A5             0124*  
0412A5             0125*  load_sprite_images:
0412A5             0126*  ; initialize image loading variables
0412A5 21 98 3B 04 0127*      ld hl,sprites_image_list
0412A9 22 C7 11 04 0128*      ld (cur_image_list),hl
0412AD 01 4F 00 00 0129*      ld bc,sprites_num_images
0412B1             0130*  ; load images
0412B1 CD F8 11 04 0131*      call img_load_main
0412B5 C9          0132*      ret
0412B6             0133*  
0412B6             0134*  load_tilesets:
0412B6             0135*  ; initialize image loading variables
0412B6 21 90 1F 04 0136*      ld hl,tiles_dg_image_list
0412BA 22 C7 11 04 0137*      ld (cur_image_list),hl
0412BE 01 B8 00 00 0138*      ld bc,tiles_dg_num_images
0412C2             0139*  ; load images
0412C2 CD F8 11 04 0140*      call img_load_main
0412C6             0141*  
0412C6             0142*  ; ; initialize image loading variables
0412C6             0143*  ;     ld hl,tiles_xevious_image_list
0412C6             0144*  ;     ld (cur_image_list),hl
0412C6             0145*  ;     ld bc,tiles_xevious_num_images
0412C6             0146*  ; ; load images
0412C6             0147*  ;     call img_load_main
0412C6 C9          0148*      ret
0412C7             0036       include "timer.inc"
0412C7             0001*  ; Table 32. Timer Control Registers
0412C7             0002*  ; this constant is the base address of the timer control registers
0412C7             0003*  ; each timer takes three bytes:
0412C7             0004*  ;   0: control register
0412C7             0005*  ;   1: low byte of timer reset value
0412C7             0006*  ;   2: high byte of timer reset value
0412C7             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0412C7             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0412C7             0009*  TMR_CTL:     equ 80h
0412C7             0010*  
0412C7             0011*  ; Timer Control Register Bit Definitions
0412C7             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0412C7             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0412C7             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0412C7             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0412C7             0016*                              ; the TMRx_CTL register is read.
0412C7             0017*  
0412C7             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0412C7             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0412C7             0020*  
0412C7             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0412C7             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0412C7             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0412C7             0024*                              ; written to the counter when the end-of-count value is reached.
0412C7             0025*  
0412C7             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0412C7             0027*  CLK_DIV_256:  equ %00001100 ;
0412C7             0028*  CLK_DIV_64:   equ %00001000 ;
0412C7             0029*  CLK_DIV_16:   equ %00000100 ;
0412C7             0030*  CLK_DIV_4:    equ %00000000 ;
0412C7             0031*  
0412C7             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0412C7             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0412C7             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0412C7             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0412C7             0036*                              ; programmer must ensure that this bit is set to 1 each time
0412C7             0037*                              ; SINGLE-PASS mode is used.
0412C7             0038*  
0412C7             0039*  ; disable/enable the programmable reload timer
0412C7             0040*  PRT_EN_0:     equ %00000000 ;
0412C7             0041*  PRT_EN_1:     equ %00000001 ;
0412C7             0042*  
0412C7             0043*  ; Table 37. Timer Input Source Select Register
0412C7             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0412C7             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0412C7             0046*  ;   00: System clock / CLK_DIV
0412C7             0047*  ;   01: RTC / CLK_DIV
0412C7             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0412C7             0049*  ;   10: GPIO port B pin 1.
0412C7             0050*  ;   11: GPIO port B pin 1.
0412C7             0051*  TMR_ISS:   equ 92h ; register address
0412C7             0052*  
0412C7             0053*  ; Table 51. Real-Time Clock Control Register
0412C7             0054*  RTC_CTRL: equ EDh ; register address
0412C7             0055*  
0412C7             0056*  ; alarm interrupt disable/enable
0412C7             0057*  RTC_ALARM_0:    equ %00000000
0412C7             0058*  RTC_ALARM_1:    equ %10000000
0412C7             0059*  
0412C7             0060*  ; interrupt on alarm disable/enable
0412C7             0061*  RTC_INT_ENT_0:  equ %00000000
0412C7             0062*  RTC_INT_ENT_1:  equ %01000000
0412C7             0063*  
0412C7             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0412C7             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0412C7             0066*  
0412C7             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0412C7             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0412C7             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0412C7             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0412C7             0071*  
0412C7             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0412C7             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0412C7             0074*  
0412C7             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0412C7             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0412C7             0077*  
0412C7             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0412C7             0079*                                  ; RTC counter is enabled.
0412C7             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0412C7             0081*                                  ; RTC counter is disabled.
0412C7             0082*  
0412C7             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0412C7             0084*  
0412C7             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0412C7             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0412C7 00 00 00    0087*  prt_reload: dl 0x000000
0412CA             0088*  
0412CA             0089*  ; set PRT timer
0412CA             0090*  prt_set:
0412CA 21 00 00 00 0091*      ld hl,0
0412CE 22 18 13 04 0092*      ld (prt_irq_counter),hl
0412D2 2A C7 12 04 0093*      ld hl,(prt_reload)
0412D6 ED 29 84    0094*      out0 ($84),l
0412D9 ED 21 85    0095*  	out0 ($85),h
0412DC             0096*  ; disable timer
0412DC 3E 06       0097*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0412DE ED 39 83    0098*  	out0 ($83),a
0412E1             0099*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0412E1 3E 57       0100*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0412E3 ED 39 83    0101*  	out0 ($83),a
0412E6 C9          0102*      ret
0412E7             0103*  
0412E7             0104*  ; ===============================================
0412E7             0105*  ; PRT Timer Interrupt Handling
0412E7             0106*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0412E7             0107*  ; -----------------------------------------------
0412E7             0108*  prt_irq_init:
0412E7             0109*      ; set up interrupt vector table 2
0412E7 21 00 00 00 0110*  	ld hl,0
0412EB 3A 0C 01 00 0111*  	ld a,($10c)
0412EF 6F          0112*  	ld l,a
0412F0 3A 0D 01 00 0113*  	ld a,($10d)
0412F4 67          0114*  	ld h,a
0412F5             0115*  
0412F5             0116*  	; skip over CALL ($c3)
0412F5 23          0117*  	inc hl
0412F6             0118*  	; load address of jump into vector table 2 (in ram)
0412F6 ED 27       0119*  	ld hl,(hl)
0412F8             0120*  
0412F8             0121*  	; write CALL prt_irq_handler to vector table 2
0412F8 3E C3       0122*  	ld a,$c3
0412FA 77          0123*  	ld (hl),a
0412FB 23          0124*  	inc hl
0412FC 11 03 13 04 0125*  	ld de,prt_irq_handler
041300 ED 1F       0126*  	ld (hl),de
041302             0127*  
041302 C9          0128*      ret
041303             0129*  
041303             0130*  prt_irq_handler:
041303 F3          0131*  	di
041304 F5          0132*  	push af
041305 E5          0133*      push hl
041306 ED 38 83    0134*  	in0 a,($83)
041309 2A 18 13 04 0135*  	ld hl,(prt_irq_counter)
04130D 23          0136*  	inc hl
04130E 22 18 13 04 0137*  	ld (prt_irq_counter),hl
041312 E1          0138*      pop hl
041313 F1          0139*  	pop af
041314 FB          0140*  	ei
041315 5B ED 4D    0141*  	reti.l
041318             0142*  
041318             0143*  prt_irq_counter:
041318 00 00 00    0144*  	.dl 0
04131B             0145*  prt_irq_counter_saved:
04131B 00 00 00    0146*      .dl 0
04131E             0147*  
04131E             0148*  prt_loop_reset:
04131E E5          0149*      push hl
04131F 21 00 00 00 0150*  	ld hl,0
041323 22 18 13 04 0151*  	ld (prt_irq_counter),hl
041327 22 89 13 04 0152*      ld (prt_loop_counter),hl
04132B 22 8C 13 04 0153*      ld (prt_loops),hl
04132F CD CA 12 04 0154*      call prt_set
041333 E1          0155*      pop hl
041334 C9          0156*      ret
041335             0157*  
041335             0158*  prt_loop_start:
041335 E5          0159*      push hl
041336 21 00 00 00 0160*  	ld hl,0
04133A 22 18 13 04 0161*  	ld (prt_irq_counter),hl
04133E E1          0162*      pop hl
04133F C9          0163*      ret
041340             0164*  
041340             0165*  prt_loop_stop:
041340 E5          0166*      push hl
041341 D5          0167*      push de
041342 2A 18 13 04 0168*      ld hl,(prt_irq_counter)
041346 ED 5B 89 13 0169*      ld de,(prt_loop_counter)
       04          
04134B 19          0170*      add hl,de
04134C 22 89 13 04 0171*      ld (prt_loop_counter),hl
041350 21 00 00 00 0172*      ld hl,0
041354 22 18 13 04 0173*      ld (prt_irq_counter),hl
041358 2A 8C 13 04 0174*      ld hl,(prt_loops)
04135C 23          0175*      inc hl
04135D 22 8C 13 04 0176*      ld (prt_loops),hl
041361 D1          0177*      pop de
041362 E1          0178*      pop hl
041363 C9          0179*      ret
041364             0180*  
041364             0181*  ; inputs: bc = y,x text coordinates to print
041364             0182*  prt_loop_print:
041364 F5          0183*      push af
041365 E5          0184*      push hl
041366 C5          0185*      push bc
041367 D5          0186*      push de
041368 DD E5       0187*      push ix
04136A FD E5       0188*      push iy
04136C CD 70 14 04 0189*      call vdu_move_cursor
041370             0190*  
041370 2A 89 13 04 0191*      ld hl,(prt_loop_counter)
041374 CD 76 01 04 0192*      call printDec
041378             0193*  
041378 2A 8C 13 04 0194*      ld hl,(prt_loops)
04137C CD 76 01 04 0195*      call printDec
041380             0196*  
041380 FD E1       0197*      pop iy
041382 DD E1       0198*      pop ix
041384 D1          0199*      pop de
041385 C1          0200*      pop bc
041386 E1          0201*      pop hl
041387 F1          0202*      pop af
041388 C9          0203*      ret
041389             0204*  
041389             0205*  prt_loop_counter:
041389 00 00 00    0206*      .dl 0
04138C             0207*  prt_loops:
04138C 00 00 00    0208*      .dl 0
04138F             0209*  
04138F             0210*  ; ===============================================
04138F             0211*  ; Timer functions
04138F             0212*  ; -----------------------------------------------
04138F             0213*  ; set a countdown timer
04138F             0214*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04138F             0215*  ; returns: hl = current time
04138F             0216*  tmr_set:
04138F FD 2F 03    0217*      ld (iy+3),hl            ; set time remaining
041392             0218*      MOSCALL mos_sysvars     ; ix points to syvars table
041392 3E 08       0001*M 			LD	A, function
041394 5B CF       0002*M 			RST.LIL	08h
041396 DD 27 00    0219*      ld hl,(ix+sysvar_time)  ; get current time
041399 FD 2F 00    0220*      ld (iy+0),hl            ; set start time
04139C C9          0221*      ret
04139D             0222*  
04139D             0223*  ; gets time remaining on a countdown timer
04139D             0224*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04139D             0225*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04139D             0226*  ;          sign flags: pos = time not expired,zero or neg = time expired
04139D             0227*  tmr_get:
04139D             0228*      MOSCALL mos_sysvars     ; ix points to syvars table
04139D 3E 08       0001*M 			LD	A, function
04139F 5B CF       0002*M 			RST.LIL	08h
0413A1 DD 17 00    0229*      ld de,(ix+sysvar_time)  ; get current time
0413A4 FD 27 00    0230*      ld hl,(iy+0)            ; get start time
0413A7 AF          0231*      xor a                   ; clear carry
0413A8 ED 52       0232*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0413AA FD 17 03    0233*      ld de,(iy+3)            ; get timer set value
0413AD AF          0234*      xor a                   ; clear carry
0413AE ED 5A       0235*      adc hl,de               ; hl = time remaining
0413B0             0236*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0413B0 C9          0237*      ret
0413B1             0238*  
0413B1             0239*  tmr_test: ds 6 ; example of a buffer to hold timer data
0413B7             0240*  
0413B7 00 00 00    0241*  timestamp_now: dl 0
0413BA 00 00 00    0242*  timestamp_old: dl 0
0413BD 00 00 00    0243*  timestamp_chg: dl 0
0413C0             0244*  
0413C0             0245*  ; update the global timestamp from the system clock
0413C0             0246*  ; inputs: none
0413C0             0247*  ; returns: hl = time elapsed in 1/120ths of a second
0413C0             0248*  ;          ix = pointer to syvars table
0413C0             0249*  ; destroys: af,hl,de,ix
0413C0             0250*  timestamp_tick:
0413C0 ED 5B B7 13 0251*      ld de,(timestamp_now)   ; get previous time
       04          
0413C5 ED 53 BA 13 0252*      ld (timestamp_old),de   ; save previous time
       04          
0413CA             0253*      MOSCALL mos_sysvars     ; ix points to syvars table
0413CA 3E 08       0001*M 			LD	A, function
0413CC 5B CF       0002*M 			RST.LIL	08h
0413CE DD 27 00    0254*      ld hl,(ix+sysvar_time)  ; get current time
0413D1 22 B7 13 04 0255*      ld (timestamp_now),hl   ; save current time
0413D5 AF          0256*      xor a                   ; clear carry
0413D6 ED 52       0257*      sbc hl,de               ; hl = time elapsed
0413D8 22 BD 13 04 0258*      ld (timestamp_chg),hl   ; save elapsed time
0413DC C9          0259*      ret
0413DD             0260*  
0413DD             0261*  ; set a countdown timer
0413DD             0262*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413DD             0263*  ; requires: timestamp_tick to be called at least once before this function
0413DD             0264*  ; returns: hl = current time
0413DD             0265*  ; destroys: hl
0413DD             0266*  timestamp_tmr_set:
0413DD FD 2F 03    0267*      ld (iy+3),hl            ; set time remaining
0413E0 2A B7 13 04 0268*      ld hl,(timestamp_now)   ; get current timestamp
0413E4 FD 2F 00    0269*      ld (iy+0),hl            ; set start time
0413E7 C9          0270*      ret
0413E8             0271*  
0413E8             0272*  ; gets time remaining on a countdown timer following the global timestamp
0413E8             0273*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413E8             0274*  ; requires: timestamp_tick to be called at least once before this function
0413E8             0275*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0413E8             0276*  ;          sign flags: pos = time not expired,zero or neg = time expired
0413E8             0277*  ; destroys: af,hl,de
0413E8             0278*  timestamp_tmr_get:
0413E8 ED 5B B7 13 0279*      ld de,(timestamp_now)   ; get current timestamp
       04          
0413ED FD 27 00    0280*      ld hl,(iy+0)            ; get start time
0413F0 AF          0281*      xor a                   ; clear carry
0413F1 ED 52       0282*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0413F3 FD 17 03    0283*      ld de,(iy+3)            ; get timer set value
0413F6 AF          0284*      xor a                   ; clear carry
0413F7 ED 5A       0285*      adc hl,de               ; hl = time remaining
0413F9             0286*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0413F9 C9          0287*      ret
0413FA             0288*  
0413FA             0289*  ; set a stopwatch
0413FA             0290*  ; returns: hl = start time
0413FA             0291*  ; destroys: hl,ix
0413FA             0292*  stopwatch_set:
0413FA             0293*      MOSCALL mos_sysvars     ; ix points to syvars table
0413FA 3E 08       0001*M 			LD	A, function
0413FC 5B CF       0002*M 			RST.LIL	08h
0413FE DD 27 00    0294*      ld hl,(ix+sysvar_time)  ; get current time
041401 22 16 14 04 0295*      ld (stopwatch_started),hl            ; set start time
041405 C9          0296*      ret
041406             0297*  
041406             0298*  ; gets time elapsed on a stopwatch
041406             0299*  ; returns: hl = time elapsed in 1/120ths of a second
041406             0300*  ; destroys: af,hl,de,ix
041406             0301*  stopwatch_get:
041406             0302*      MOSCALL mos_sysvars     ; ix points to syvars table
041406 3E 08       0001*M 			LD	A, function
041408 5B CF       0002*M 			RST.LIL	08h
04140A DD 27 00    0303*      ld hl,(ix+sysvar_time)  ; get current time
04140D ED 5B 16 14 0304*      ld de,(stopwatch_started)            ; get start time
       04          
041412 AF          0305*      xor a                   ; clear carry
041413 ED 52       0306*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041415 C9          0307*      ret
041416             0308*  
041416             0309*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041419             0310*  
041419             0311*  ; ------------------
041419             0312*  ; delay routine
041419             0313*  ; Author: Richard Turrnidge
041419             0314*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041419             0315*  ; routine waits a fixed time,then returns
041419             0316*  ; arrive with A =  the delay byte. One bit to be set only.
041419             0317*  ; eg. ld A,00000100b
041419             0318*  
041419             0319*  multiPurposeDelay:
041419 F5          0320*      push af
04141A C5          0321*      push bc
04141B DD E5       0322*      push ix
04141D 47          0323*      ld b,a
04141E 3E 08       0324*      ld a,$08
041420 5B CF       0325*      RST.LIL	08h                 ; get IX pointer to sysvars
041422             0326*  
041422             0327*  waitLoop:
041422             0328*  
041422 DD 7E 00    0329*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041425             0330*  
041425             0331*                                  ;   we check if bit set is same as last time we checked.
041425             0332*                                  ;   bit 0 - don't use
041425             0333*                                  ;   bit 1 - changes 64 times per second
041425             0334*                                  ;   bit 2 - changes 32 times per second
041425             0335*                                  ;   bit 3 - changes 16 times per second
041425             0336*  
041425             0337*                                  ;   bit 4 - changes 8 times per second
041425             0338*                                  ;   bit 5 - changes 4 times per second
041425             0339*                                  ;   bit 6 - changes 2 times per second
041425             0340*                                  ;   bit 7 - changes 1 times per second
041425 A0          0341*      and b
041426 4F          0342*      ld c,a
041427 3A 38 14 04 0343*      ld a,(oldTimeStamp)
04142B B9          0344*      cp c                        ; is A same as last value?
04142C 28 F4       0345*      jr z,waitLoop              ; loop here if it is
04142E 79          0346*      ld a,c
04142F 32 38 14 04 0347*      ld (oldTimeStamp),a        ; set new value
041433             0348*  
041433 DD E1       0349*      pop ix
041435 C1          0350*      pop bc
041436 F1          0351*      pop af
041437 C9          0352*      ret
041438             0353*  
041438 00          0354*  oldTimeStamp:   .db 00h
041439             0037       include "vdu.inc"
041439             0001*  
041439             0002*  ; VDU 30: Home cursor
041439             0003*  vdu_home_cursor:
041439 3E 1E       0004*      ld a,30
04143B 5B D7       0005*  	rst.lil $10
04143D C9          0006*  	ret
04143E             0007*  
04143E             0008*  vdu_cursor_on:
04143E 21 49 14 04 0009*  	ld hl,@cmd
041442 01 03 00 00 0010*  	ld bc,@end-@cmd
041446 5B DF       0011*  	rst.lil $18
041448 C9          0012*  	ret
041449             0013*  @cmd:
041449 17 01 01    0014*  	db 23,1,1
04144C             0015*  @end:
04144C             0016*  
04144C             0017*  vdu_cursor_off:
04144C 21 57 14 04 0018*  	ld hl,@cmd
041450 01 03 00 00 0019*  	ld bc,@end-@cmd
041454 5B DF       0020*  	rst.lil $18
041456 C9          0021*  	ret
041457             0022*  @cmd:
041457 17 01 00    0023*  	db 23,1,0
04145A             0024*  @end:
04145A             0025*  
04145A             0026*  ; VDU 5: Write text at graphics cursor
04145A             0027*  ; inputs: a is the character to write to the screen
04145A             0028*  ; prerequisites: the graphics cursor at the intended position on screen
04145A             0029*  ; outputs: see the name of the function
04145A             0030*  ; destroys: a, hl, bc
04145A             0031*  vdu_char_to_gfx_cursor:
04145A 32 6A 14 04 0032*  	ld (@arg),a
04145E 21 69 14 04 0033*  	ld hl,@cmd
041462 01 02 00 00 0034*  	ld bc,@end-@cmd
041466 5B DF       0035*  	rst.lil $18
041468 C9          0036*  	ret
041469 05          0037*  @cmd: db 5
04146A 00          0038*  @arg: db 0
04146B             0039*  @end:
04146B             0040*  ; VDU 9: Move cursor forward one character
04146B             0041*  vdu_cursor_forward:
04146B 3E 09       0042*      ld a,9
04146D 5B D7       0043*  	rst.lil $10
04146F C9          0044*  	ret
041470             0045*  
041470             0046*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041470             0047*  ; inputs: c=x, b=y 8-bit unsigned integers
041470             0048*  vdu_move_cursor:
041470 ED 43 81 14 0049*      ld (@x0),bc
       04          
041475 21 80 14 04 0050*  	ld hl,@cmd
041479 01 03 00 00 0051*  	ld bc,@end-@cmd
04147D 5B DF       0052*  	rst.lil $18
04147F C9          0053*  	ret
041480 1F          0054*  @cmd: 	db 31
041481 00          0055*  @x0:	db 0
041482 00          0056*  @y0: 	db 0
041483 00          0057*  @end: 	db 0 ; padding
041484             0058*  
041484             0059*  ; VDU 12: Clear text area (CLS)
041484             0060*  vdu_cls:
041484 3E 0C       0061*      ld a,12
041486 5B D7       0062*  	rst.lil $10
041488 C9          0063*  	ret
041489             0064*  
041489             0065*  vdu_flip:
041489 21 94 14 04 0066*  	ld hl,@cmd
04148D 01 03 00 00 0067*  	ld bc,@end-@cmd
041491 5B DF       0068*  	rst.lil $18
041493 C9          0069*  	ret
041494 17 00 C3    0070*  @cmd: db 23,0,0xC3
041497             0071*  @end:
041497             0072*  
041497             0073*  ; VDU 16: Clear graphics area (CLG)
041497             0074*  vdu_clg:
041497 3E 10       0075*      ld a,16
041499 5B D7       0076*  	rst.lil $10
04149B C9          0077*  	ret
04149C             0078*  
04149C             0079*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04149C             0080*  ; VDU 23, 7: Scrolling
04149C             0081*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04149C             0082*  ; inputs: a, extent; l, direction; h; speed
04149C             0083*  vdu_scroll_down:
04149C 32 B1 14 04 0084*  	ld (@extent),a
0414A0 22 B2 14 04 0085*  	ld (@dir),hl ; implicitly populates @speed
0414A4 21 AF 14 04 0086*  	ld hl,@cmd
0414A8 01 05 00 00 0087*  	ld bc,@end-@cmd
0414AC 5B DF       0088*  	rst.lil $18     ;; Sending command to VDP
0414AE C9          0089*  	ret
0414AF 17 07       0090*  @cmd:       db 23,7
0414B1 00          0091*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
0414B2 00          0092*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
0414B3 00          0093*  @speed:     db 0x00 ; pixels
0414B4 00          0094*  @end:		db 0x00 ; padding
0414B5             0095*  
0414B5             0096*  ; COLOUR MODES
0414B5             0097*  ; Mode	Effect
0414B5             0098*  ; 0	Set on-screen pixel to target colour value
0414B5             0099*  ; 1	OR value with the on-screen pixel
0414B5             0100*  ; 2	AND value with the on-screen pixel
0414B5             0101*  ; 3	XOR value with the on-screen pixel
0414B5             0102*  ; 4	Invert the on-screen pixel
0414B5             0103*  ; 5	No operation
0414B5             0104*  ; 6	AND the inverse of the specified colour with the on-screen pixel
0414B5             0105*  ; 7	OR the inverse of the specified colour with the on-screen pixel
0414B5             0106*  
0414B5             0107*  ; VDU 17, colour: Define text colour (COLOUR)
0414B5             0108*  vdu_colour_text:
0414B5 32 C5 14 04 0109*  	ld (@arg),a
0414B9 21 C4 14 04 0110*  	ld hl,@cmd
0414BD 01 02 00 00 0111*  	ld bc,@end-@cmd
0414C1 5B DF       0112*  	rst.lil $18
0414C3 C9          0113*  	ret
0414C4 11          0114*  @cmd: db 17
0414C5 00          0115*  @arg: db 0
0414C6             0116*  @end:
0414C6             0117*  
0414C6             0118*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0414C6             0119*  ; inputs: a=mode, c=colour (add 128 to set background colour)
0414C6             0120*  vdu_gcol:
0414C6 32 DB 14 04 0121*  	ld (@mode),a
0414CA 79          0122*      ld a,c
0414CB 32 DC 14 04 0123*      ld (@col),a
0414CF 21 DA 14 04 0124*  	ld hl,@cmd
0414D3 01 03 00 00 0125*  	ld bc,@end-@cmd
0414D7 5B DF       0126*  	rst.lil $18
0414D9 C9          0127*  	ret
0414DA 12          0128*  @cmd:  db 18
0414DB 00          0129*  @mode: db 0
0414DC 00          0130*  @col:  db 0
0414DD             0131*  @end:
0414DD             0132*  
0414DD             0133*  
0414DD             0134*  ; VDU 28, left, bottom, right, top: Set text viewport **
0414DD             0135*  ; MIND THE LITTLE-ENDIANESS
0414DD             0136*  ; inputs: c=left,b=bottom,e=right,d=top
0414DD             0137*  ; outputs; nothing
0414DD             0138*  ; destroys: a might make it out alive
0414DD             0139*  vdu_set_txt_viewport:
0414DD ED 43 F3 14 0140*      ld (@lb),bc
       04          
0414E2 ED 53 F5 14 0141*  	ld (@rt),de
       04          
0414E7 21 F2 14 04 0142*  	ld hl,@cmd
0414EB 01 05 00 00 0143*  	ld bc,@end-@cmd
0414EF 5B DF       0144*  	rst.lil $18
0414F1 C9          0145*  	ret
0414F2 1C          0146*  @cmd:   db 28 ; set text viewport command
0414F3 00 00       0147*  @lb: 	dw 0x0000 ; set by bc
0414F5 00 00       0148*  @rt: 	dw 0x0000 ; set by de
0414F7 00          0149*  @end:   db 0x00	  ; padding
0414F8             0150*  
0414F8             0151*  ; Wait for VBLANK interrupt
0414F8             0152*  vdu_vblank:
0414F8 DD E5       0153*      PUSH 	IX
0414FA             0154*  	MOSCALL	mos_sysvars
0414FA 3E 08       0001*M 			LD	A, function
0414FC 5B CF       0002*M 			RST.LIL	08h
0414FE DD 7E 00    0155*  	LD	A, (IX + sysvar_time + 0)
041501             0156*  @wait:
041501 DD BE 00    0157*      CP 	A, (IX + sysvar_time + 0)
041504 28 FB       0158*      JR	Z, @wait
041506 DD E1       0159*      POP	IX
041508 C9          0160*      RET
041509             0161*  
041509             0162*  ; VDU 29, x; y;: Set graphics origin
041509             0163*  ; This command sets the graphics origin.
041509             0164*  ; The origin is the point on the screen where the coordinates (0,0) are located.
041509             0165*  ; inputs: bc=x0,de=y0
041509             0166*  ; outputs; nothing
041509             0167*  ; destroys: a might make it out alive
041509             0168*  vdu_set_gfx_origin:
041509 ED 43 1F 15 0169*      ld (@x0),bc
       04          
04150E ED 53 21 15 0170*      ld (@y0),de
       04          
041513 21 1E 15 04 0171*      ld hl,@cmd
041517 01 05 00 00 0172*      ld bc,@end-@cmd
04151B 5B DF       0173*      rst.lil $18
04151D C9          0174*      ret
04151E 1D          0175*  @cmd:   db 29 ; set graphics origin command
04151F 00 00       0176*  @x0: 	dw 0x0000 ; set by bc
041521 00 00       0177*  @y0: 	dw 0x0000 ; set by de
041523 00          0178*  @end:   db 0x00	  ; padding
041524             0179*  
041524             0180*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
041524             0181*  ; NOTE: the order of the y-coordinate parameters are inverted
041524             0182*  ; 	because we have turned off logical screen scaling
041524             0183*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041524             0184*  ; outputs; nothing
041524             0185*  ; destroys: a might make it out alive
041524             0186*  vdu_set_gfx_viewport:
041524 ED 43 44 15 0187*      ld (@x0),bc
       04          
041529 FD 22 46 15 0188*      ld (@y1),iy
       04          
04152E DD 22 48 15 0189*  	ld (@x1),ix
       04          
041533 ED 53 4A 15 0190*  	ld (@y0),de
       04          
041538 21 43 15 04 0191*  	ld hl,@cmd
04153C 01 09 00 00 0192*  	ld bc,@end-@cmd
041540 5B DF       0193*  	rst.lil $18
041542 C9          0194*  	ret
041543 18          0195*  @cmd:   db 24 ; set graphics viewport command
041544 00 00       0196*  @x0: 	dw 0x0000 ; set by bc
041546 00 00       0197*  @y1: 	dw 0x0000 ; set by iy
041548 00 00       0198*  @x1: 	dw 0x0000 ; set by ix
04154A 00 00       0199*  @y0: 	dw 0x0000 ; set by de
04154C 00          0200*  @end:   db 0x00	  ; padding
04154D             0201*  
04154D             0202*  ; SCREEN MODES
04154D             0203*  ; ===============================
04154D             0204*  ; Mode  Horz  Vert  Cols  Refresh
04154D             0205*  ; ---   ----  ----  ----  -------
04154D             0206*  ; 11    320   240   2     60hz
04154D             0207*  ; 139   320   240   2     60hz
04154D             0208*  ; 23    512   384   2     60hz
04154D             0209*  ; 151   512   384   2     60hz
04154D             0210*  ; 6     640   240   2     60hz
04154D             0211*  ; 134   640   240   2     60hz
04154D             0212*  ; 2     640   480   2     60hz
04154D             0213*  ; 130   640   480   2     60hz
04154D             0214*  ; 17    800   600   2     60hz
04154D             0215*  ; 145   800   600   2     60hz
04154D             0216*  ; 18    1024  768   2     60hz
04154D             0217*  ; 146   1024  768   2     60hz
04154D             0218*  ; ---   ----  ----  ----  -------
04154D             0219*  ; 10    320   240   4     60hz
04154D             0220*  ; 138   320   240   4     60hz
04154D             0221*  ; 22    512   384   4     60hz
04154D             0222*  ; 150   512   384   4     60hz
04154D             0223*  ; 5     640   240   4     60hz
04154D             0224*  ; 133   640   240   4     60hz
04154D             0225*  ; 1     640   480   4     60hz
04154D             0226*  ; 129   640   480   4     60hz
04154D             0227*  ; 16    800   600   4     60hz
04154D             0228*  ; 19    1024  768   4     60hz
04154D             0229*  ; ---   ----  ----  ----  -------
04154D             0230*  ; 9     320   240   16    60hz
04154D             0231*  ; 137   320   240   16    60hz
04154D             0232*  ; 21    512   384   16    60hz
04154D             0233*  ; 149   512   384   16    60hz
04154D             0234*  ; 4     640   240   16    60hz
04154D             0235*  ; 132   640   240   16    60hz
04154D             0236*  ; 0     640   480   16    60hz
04154D             0237*  ; 7     n/a   n/a   16    60hz
04154D             0238*  ; ---   ----  ----  ----  -------
04154D             0239*  ; 8     320   240   64    60hz
04154D             0240*  ; 136   320   240   64    60hz
04154D             0241*  ; 20    512   384   64    60hz
04154D             0242*  ; 3     640   240   64    60hz
04154D             0243*  ; ---   ----  ----  ----  -------
04154D             0244*  vdu_set_screen_mode:
04154D 32 5D 15 04 0245*  	ld (@arg),a
041551 21 5C 15 04 0246*  	ld hl,@cmd
041555 01 02 00 00 0247*  	ld bc,@end-@cmd
041559 5B DF       0248*  	rst.lil $18
04155B C9          0249*  	ret
04155C 16          0250*  @cmd: db 22 ; set screen mode
04155D 00          0251*  @arg: db 0  ; screen mode parameter
04155E             0252*  @end:
04155E             0253*  
04155E             0254*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
04155E             0255*  ; inputs: a is scaling mode, 1=on, 0=off
04155E             0256*  ; note: default setting on boot is scaling ON
04155E             0257*  vdu_set_scaling:
04155E 32 70 15 04 0258*  	ld (@arg),a
041562 21 6D 15 04 0259*  	ld hl,@cmd
041566 01 04 00 00 0260*  	ld bc,@end-@cmd
04156A 5B DF       0261*  	rst.lil $18
04156C C9          0262*  	ret
04156D 17 00 C0    0263*  @cmd: db 23,0,0xC0
041570 00          0264*  @arg: db 0  ; scaling on/off
041571             0265*  @end:
041571             0266*  
041571             0267*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041571             0268*  ; inputs: hl=bufferId
041571             0269*  vdu_buff_select:
041571 22 83 15 04 0270*  	ld (@bufferId),hl
041575 21 80 15 04 0271*  	ld hl,@cmd
041579 01 05 00 00 0272*  	ld bc,@end-@cmd
04157D 5B DF       0273*  	rst.lil $18
04157F C9          0274*  	ret
041580 17 1B 20    0275*  @cmd: db 23,27,0x20
041583 00 00       0276*  @bufferId: dw 0x0000
041585 00          0277*  @end: db 0x00 ; padding
041586             0278*  
041586             0279*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041586             0280*  ; inputs: a=format; bc=width; de=height
041586             0281*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041586             0282*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041586             0283*  ; 0 	RGBA8888 (4-bytes per pixel)
041586             0284*  ; 1 	RGBA2222 (1-bytes per pixel)
041586             0285*  ; 2 	Mono/Mask (1-bit per pixel)
041586             0286*  ; 3 	Reserved for internal use by VDP (“native” format)
041586             0287*  vdu_bmp_create:
041586 ED 43 A2 15 0288*      ld (@width),bc
       04          
04158B ED 53 A4 15 0289*      ld (@height),de
       04          
041590 32 A6 15 04 0290*      ld (@fmt),a
041594 21 9F 15 04 0291*  	ld hl,@cmd
041598 01 08 00 00 0292*  	ld bc,@end-@cmd
04159C 5B DF       0293*  	rst.lil $18
04159E C9          0294*  	ret
04159F 17 1B 21    0295*  @cmd:       db 23,27,0x21
0415A2 00 00       0296*  @width:     dw 0x0000
0415A4 00 00       0297*  @height:    dw 0x0000
0415A6 00          0298*  @fmt:       db 0x00
0415A7             0299*  @end:
0415A7             0300*  
0415A7             0301*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0415A7             0302*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0415A7             0303*  vdu_load_img_rgba2_to_8:
0415A7             0304*  ; backup the target buffer id and image dimensions
0415A7 E5          0305*      push hl
0415A8 D5          0306*      push de
0415A9 C5          0307*      push bc
0415AA             0308*  ; load the rgba2 image to working buffer 65534
0415AA 21 FE FF 00 0309*      ld hl,65534 ; temporary working buffer id
0415AE CD B1 16 04 0310*  	call vdu_load_buffer_from_file
0415B2             0311*  ; restore the image dimensions and target buffer id
0415B2 C1          0312*      pop bc
0415B3 D1          0313*      pop de
0415B4 E1          0314*      pop hl
0415B5             0315*  ; fall through to vdu_rgba2_to_8
0415B5             0316*  
0415B5             0317*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0415B5             0318*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0415B5             0319*  ; the "expand bitmap" command is:
0415B5             0320*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0415B5             0321*  ; and then to reverse the byte order to fix endian-ness:
0415B5             0322*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0415B5             0323*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0415B5             0324*  ; VDU 23,27,&20,targetBufferID%;
0415B5             0325*  ; VDU 23,27,&21,width%;height%;0
0415B5             0326*  ; -------------------------------------------------------------------
0415B5             0327*  ; inputs: bc,de image width,height ; hl = targetBufferId
0415B5             0328*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0415B5             0329*  vdu_rgba2_to_8:
0415B5             0330*  ; load the image dimensions and buffer id parameters
0415B5 ED 43 11 16 0331*      ld (@width),bc
       04          
0415BA ED 53 13 16 0332*      ld (@height),de
       04          
0415BF 22 F6 15 04 0333*      ld (@bufferId0),hl
0415C3 22 03 16 04 0334*      ld (@bufferId2),hl
0415C7 22 0C 16 04 0335*      ld (@bufferId1),hl
0415CB             0336*  ; clean up bytes that got stomped on by the ID loads
0415CB 3E 48       0337*      ld a,0x48
0415CD 32 F8 15 04 0338*      ld (@bufferId0+2),a
0415D1 3E 17       0339*      ld a,23
0415D3 32 0E 16 04 0340*      ld (@bufferId1+2),a
0415D7 3E 18       0341*      ld a,24
0415D9 32 05 16 04 0342*      ld (@bufferId2+2),a
0415DD AF          0343*      xor a
0415DE 32 15 16 04 0344*      ld (@height+2),a
0415E2             0345*  ; send the vdu command strings
0415E2 21 ED 15 04 0346*      ld hl,@beg
0415E6 01 29 00 00 0347*      ld bc,@end-@beg
0415EA 5B DF       0348*      rst.lil $18
0415EC C9          0349*      ret
0415ED             0350*  @beg:
0415ED             0351*  ; Command 14: Consolidate blocks in a buffer
0415ED             0352*  ; VDU 23, 0, &A0, bufferId; 14
0415ED 17 00 A0    0353*      db 23,0,0xA0
0415F0 FE FF       0354*      dw 65534 ; workingBufferId
0415F2 0E          0355*      db 14 ; consolidate blocks
0415F3             0356*  ; the "expand bitmap" command is:
0415F3             0357*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0415F3 17 00 A0    0358*      db 23,0,0xA0
0415F6 00 00       0359*  @bufferId0: dw 0x0000 ; targetBufferId
0415F8 48          0360*      db 0x48 ; given as decimal command 72 in the docs
0415F9 02          0361*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0415FA FE FF       0362*      dw 65534 ; sourceBufferId
0415FC 00 7F BF FF 0363*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041600             0364*  ; reverse the byte order to fix endian-ness:
041600             0365*  ; Command 24: Reverse the order of data of blocks within a buffer
041600             0366*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041600             0367*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041600 17 00 A0    0368*      db 23,0,0xA0
041603 00 00       0369*  @bufferId2:    dw 0x0000 ; targetBufferId
041605 18          0370*      db 24 ; reverse byte order
041606 04          0371*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041607 04 00       0372*      dw 4 ; size (4 bytes)
041609             0373*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041609             0374*  ; VDU 23,27,&20,targetBufferID%;
041609 17 1B 20    0375*      db 23,27,0x20 ; select bitmap
04160C 00 00       0376*  @bufferId1: dw 0x0000 ; targetBufferId
04160E             0377*  ; VDU 23,27,&21,width%;height%;0
04160E 17 1B 21    0378*      db 23,27,0x21 ; create bitmap from buffer
041611 00 00       0379*  @width: dw 0x0000
041613 00 00       0380*  @height: dw 0x0000
041615 00          0381*      db 0x00 ; rgba8888 format
041616             0382*  @end:
041616             0383*  
041616             0384*  ; scratch variables
041616 00 00 00    0385*  bufferId0: dl 0x000000
041619 00 00 00    0386*  bufferId1: dl 0x000000
04161C             0387*  
04161C             0388*  ; load a vdu buffer from local memory
04161C             0389*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
04161C             0390*  vdu_load_buffer:
04161C ED 43 45 16 0391*      ld (@length),bc
       04          
041621 D5          0392*      push de ; save data pointer
041622             0393*  ; send the vdu command string
041622 7D          0394*      ld a,l
041623 32 42 16 04 0395*      ld (@bufferId),a
041627 7C          0396*      ld a,h
041628 32 43 16 04 0397*      ld (@bufferId+1),a
04162C 21 3F 16 04 0398*      ld hl,@cmd
041630 01 08 00 00 0399*      ld bc,@end-@cmd
041634 5B DF       0400*      rst.lil $18
041636             0401*  ; send the buffer data
041636 E1          0402*      pop hl ; pointer to data
041637 ED 4B 45 16 0403*      ld bc,(@length)
       04          
04163C 5B DF       0404*      rst.lil $18 ; send it
04163E C9          0405*      ret
04163F             0406*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04163F 17 00 A0    0407*  @cmd:       db 23,0,0xA0
041642 00 00       0408*  @bufferId:	dw 0x0000
041644 00          0409*  		    db 0 ; load buffer
041645 00 00       0410*  @length:	dw 0x0000
041647 00          0411*  @end: db 0 ; padding
041648             0412*  
041648             0413*  ; clear a buffer
041648             0414*  ; inputs: hl = bufferId
041648             0415*  vdu_clear_buffer:
041648 7D          0416*      ld a,l
041649 32 60 16 04 0417*      ld (@bufferId),a
04164D 7C          0418*      ld a,h
04164E 32 61 16 04 0419*      ld (@bufferId+1),a
041652 21 5D 16 04 0420*      ld hl,@cmd
041656 01 06 00 00 0421*      ld bc,@end-@cmd
04165A 5B DF       0422*      rst.lil $18
04165C C9          0423*      ret
04165D 17 00 A0    0424*  @cmd:       db 23,0,0xA0
041660 00 00       0425*  @bufferId:	dw 0x0000
041662 02          0426*  		    db 2 ; clear buffer
041663             0427*  @end:
041663             0428*  
041663             0429*  vdu_clear_all_buffers:
041663             0430*  ; clear all buffers
041663 21 6E 16 04 0431*      ld hl,@beg
041667 01 06 00 00 0432*      ld bc,@end-@beg
04166B 5B DF       0433*      rst.lil $18
04166D C9          0434*      ret
04166E 17 00 A0    0435*  @beg: db 23,0,$A0
041671 FF FF       0436*        dw -1 ; clear all buffers
041673 02          0437*        db 2  ; command 2: clear a buffer
041674             0438*  @end:
041674             0439*  
041674             0440*  ; Command 14: Consolidate blocks in a buffer
041674             0441*  vdu_consolidate_buffer:
041674             0442*  ; set parameters for vdu call
041674 7D          0443*      ld a,l
041675 32 8C 16 04 0444*      ld (@bufferId),a
041679 7C          0445*      ld a,h
04167A 32 8D 16 04 0446*      ld (@bufferId+1),a
04167E 21 89 16 04 0447*      ld hl,@beg
041682 01 06 00 00 0448*      ld bc,@end-@beg
041686 5B DF       0449*      rst.lil $18
041688 C9          0450*      ret
041689             0451*  ; VDU 23, 0, &A0, bufferId; 14
041689 17 00 A0    0452*  @beg: db 23,0,0xA0
04168C 00 00       0453*  @bufferId: dw 0x0000
04168E 0E          0454*             db 14
04168F             0455*  @end:
04168F             0456*  
04168F             0457*  ; load an image file to a buffer and make it a bitmap
04168F             0458*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
04168F             0459*  vdu_load_img:
04168F             0460*  ; back up image type and dimension parameters
04168F 22 16 16 04 0461*      ld (bufferId0),hl
041693 F5          0462*      push af
041694 C5          0463*  	push bc
041695 D5          0464*  	push de
041696             0465*  ; load the image
041696 CD B1 16 04 0466*  	call vdu_load_buffer_from_file
04169A             0467*  ; now make it a bitmap
04169A 2A 16 16 04 0468*      ld hl,(bufferId0)
04169E CD 74 16 04 0469*      call vdu_consolidate_buffer
0416A2 2A 16 16 04 0470*      ld hl,(bufferId0)
0416A6 CD 71 15 04 0471*      call vdu_buff_select
0416AA D1          0472*  	pop de ; image height
0416AB C1          0473*  	pop bc ; image width
0416AC F1          0474*  	pop af ; image type
0416AD C3 86 15 04 0475*  	jp vdu_bmp_create ; will return to caller from there
0416B1             0476*  
0416B1             0477*  ; inputs: hl = bufferId; iy = pointer to filename
0416B1             0478*  vdu_load_buffer_from_file:
0416B1 22 16 16 04 0479*      ld (bufferId0),hl
0416B5             0480*  
0416B5             0481*  ; clear target buffer
0416B5 CD 48 16 04 0482*      call vdu_clear_buffer
0416B9             0483*  
0416B9             0484*  ; open the file in read mode
0416B9             0485*  ; Open a file
0416B9             0486*  ; HLU: Filename
0416B9             0487*  ;   C: Mode
0416B9             0488*  ; Returns:
0416B9             0489*  ;   A: Filehandle, or 0 if couldn't open
0416B9 FD E5       0490*  	push iy ; pointer to filename
0416BB E1          0491*  	pop hl
0416BC 0E 01       0492*  	ld c,fa_read
0416BE             0493*      MOSCALL mos_fopen
0416BE 3E 0A       0001*M 			LD	A, function
0416C0 5B CF       0002*M 			RST.LIL	08h
0416C2 32 FD 16 04 0494*      ld (@filehandle),a
0416C6             0495*  
0416C6             0496*  @read_file:
0416C6             0497*  ; Read a block of data from a file
0416C6             0498*  ;   C: Filehandle
0416C6             0499*  ; HLU: Pointer to where to write the data to
0416C6             0500*  ; DEU: Number of bytes to read
0416C6             0501*  ; Returns:
0416C6             0502*  ; DEU: Number of bytes read
0416C6 3A FD 16 04 0503*      ld a,(@filehandle)
0416CA 4F          0504*      ld c,a
0416CB 21 00 E0 B7 0505*      ld hl,filedata
0416CF 11 00 20 00 0506*      ld de,8192 ; max we can read into onboard sram at one time
0416D3             0507*      MOSCALL mos_fread
0416D3 3E 1A       0001*M 			LD	A, function
0416D5 5B CF       0002*M 			RST.LIL	08h
0416D7             0508*  
0416D7             0509*  ; test de for zero bytes read
0416D7 21 00 00 00 0510*      ld hl,0
0416DB AF          0511*      xor a ; clear carry
0416DC ED 52       0512*      sbc hl,de
0416DE CA F4 16 04 0513*      jp z,@close_file
0416E2             0514*  
0416E2             0515*  ; load a vdu buffer from local memory
0416E2             0516*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0416E2 2A 16 16 04 0517*      ld hl,(bufferId0)
0416E6 D5          0518*      push de ; chunksize
0416E7 C1          0519*      pop bc
0416E8 11 00 E0 B7 0520*      ld de,filedata
0416EC CD 1C 16 04 0521*      call vdu_load_buffer
0416F0             0522*  
0416F0             0523*  ; read the next block
0416F0 C3 C6 16 04 0524*      jp @read_file
0416F4             0525*  
0416F4             0526*  ; close the file
0416F4             0527*  @close_file:
0416F4 3A FD 16 04 0528*      ld a,(@filehandle)
0416F8             0529*      MOSCALL mos_fclose
0416F8 3E 0B       0001*M 			LD	A, function
0416FA 5B CF       0002*M 			RST.LIL	08h
0416FC C9          0530*      ret ; vdu_load_buffer_from_file
0416FD             0531*  
0416FD 00          0532*  @filehandle: db 0 ; file handle
0416FE 00 00 00    0533*  @fil: dl 0 ; pointer to FIL struct
041701             0534*  
041701 00 00 00    0535*  @chunkpointer: dl 0 ; pointer to current chunk
041704             0536*  
041704             0537*  ; File information structure (FILINFO)
041704             0538*  @filinfo:
041704 00 00 00 00 0539*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041708 00 00       0540*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
04170A 00 00       0541*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
04170C 00          0542*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
04170D 00 00 00 00 0543*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
04171A 00 00 00 00 0544*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04181A             0038       include "vdu_fonts.inc"
04181A             0001*  ; select font
04181A             0002*  ; inputs: hl = bufferId, a = font flags
04181A             0003*  ; Flags:
04181A             0004*  ; Bit	Description
04181A             0005*  ; 0	Adjust cursor position to ensure text baseline is aligned
04181A             0006*  ;   0: Do not adjust cursor position (best for changing font on a new line)
04181A             0007*  ;   1: Adjust cursor position (best for changing font in the middle of a line)
04181A             0008*  ; 1-7	Reserved for future use
04181A             0009*  ; VDU 23, 0, &95, 0, bufferId; flags: Select font
04181A             0010*  vdu_font_select:
04181A 22 31 18 04 0011*      ld (@bufferId),hl
04181E 32 33 18 04 0012*      ld (@flags),a
041822 21 2D 18 04 0013*      ld hl,@cmd
041826 01 07 00 00 0014*      ld bc,@end-@cmd
04182A 5B DF       0015*      rst.lil $18
04182C C9          0016*      ret
04182D 17 00 95 00 0017*  @cmd: db 23, 0, 0x95, 0
041831 00 00       0018*  @bufferId: dw 0x0000
041833 00          0019*  @flags: db 0x00
041834             0020*  @end:
041834             0021*  
041834             0022*  ; create font from buffer
041834             0023*  ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041834             0024*  ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041834             0025*  vdu_font_create:
041834 22 59 18 04 0026*      ld (@bufferId),hl
041838 ED 53 5B 18 0027*      ld (@width),de ; also loads height
       04          
04183D 32 5E 18 04 0028*      ld (@flags),a
041841 7A          0029*      ld a,d ; height
041842 32 5D 18 04 0030*      ld (@ascent),a ; ascent = height
041846             0031*  ; consolidate buffer
041846 CD 74 16 04 0032*      call vdu_consolidate_buffer
04184A             0033*  ; create font
04184A 21 55 18 04 0034*      ld hl,@cmd
04184E 01 0A 00 00 0035*      ld bc,@end-@cmd
041852 5B DF       0036*      rst.lil $18
041854 C9          0037*      ret
041855 17 00 95 01 0038*  @cmd: db 23, 0, 0x95, 1
041859 00 00       0039*  @bufferId: dw 0x0000
04185B 00          0040*  @width: db 0x00
04185C 00          0041*  @height: db 0x00
04185D 00          0042*  @ascent: db 0x00
04185E 00          0043*  @flags: db 0x00
04185F             0044*  @end:
04185F             0045*  
04185F             0046*  ; set or adjust font property
04185F             0047*  ; inputs: hl = bufferId, a = field, de = value
04185F             0048*  ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
04185F             0049*  vdu_font_property:
04185F 22 7B 18 04 0050*      ld (@bufferId),hl
041863 32 7D 18 04 0051*      ld (@field),a
041867 ED 53 7E 18 0052*      ld (@value),de
       04          
04186C 21 77 18 04 0053*      ld hl,@cmd
041870 01 09 00 00 0054*      ld bc,@end-@cmd
041874 5B DF       0055*      rst.lil $18
041876 C9          0056*      ret
041877 17 00 95 02 0057*  @cmd: db 23, 0, 0x95, 2
04187B 00 00       0058*  @bufferId: dw 0x0000
04187D 00          0059*  @field: db 0x00
04187E 00 00       0060*  @value: dw 0x0000
041880 00          0061*  @end: db 0x00 ; padding
041881             0062*  
041881             0063*  ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041881             0064*  
041881             0065*  ; Clear/Delete font
041881             0066*  ; inputs: hl = bufferId
041881             0067*  ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041881             0068*  vdu_font_clear:
041881 22 94 18 04 0069*      ld (@bufferId),hl
041885 21 90 18 04 0070*      ld hl,@cmd
041889 01 06 00 00 0071*      ld bc,@end-@cmd
04188D 5B DF       0072*      rst.lil $18
04188F C9          0073*      ret
041890 17 00 95 04 0074*  @cmd: db 23, 0, 0x95, 4
041894 00 00       0075*  @bufferId: dw 0x0000
041896 00          0076*  @end: db 0x00 ; padding
041897             0077*  
041897             0078*  ; Copy system font to buffer
041897             0079*  ; inputs: hl = bufferId
041897             0080*  ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041897             0081*  vdu_font_copy_system:
041897 22 AA 18 04 0082*      ld (@bufferId),hl
04189B 21 A6 18 04 0083*      ld hl,@cmd
04189F 01 06 00 00 0084*      ld bc,@end-@cmd
0418A3 5B DF       0085*      rst.lil $18
0418A5 C9          0086*      ret
0418A6 17 00 95 05 0087*  @cmd: db 23, 0, 0x95, 5
0418AA 00 00       0088*  @bufferId: dw 0x0000
0418AC 00          0089*  @end: db 0x00 ; padding
0418AD             0039       include "vdu_plot.inc"
0418AD             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418AD             0002*  ; PLOT code 	(Decimal) 	Effect
0418AD             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
0418AD             0004*  plot_sl_both: equ 0x00
0418AD             0005*  
0418AD             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
0418AD             0007*  plot_sl_first: equ 0x08
0418AD             0008*  
0418AD             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0418AD             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0418AD             0011*  
0418AD             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
0418AD             0013*  plot_sl_last: equ 0x20
0418AD             0014*  
0418AD             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
0418AD             0016*  plot_sl_none: equ 0x28
0418AD             0017*  
0418AD             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0418AD             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0418AD             0020*  
0418AD             0021*  ; &40-&47 	64-71 	Point plot
0418AD             0022*  plot_pt: equ 0x40
0418AD             0023*  
0418AD             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0418AD             0025*  plot_lf_lr_non_bg: equ 0x48
0418AD             0026*  
0418AD             0027*  ; &50-&57 	80-87 	Triangle fill
0418AD             0028*  plot_tf: equ 0x50
0418AD             0029*  
0418AD             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
0418AD             0031*  plot_lf_r_bg: equ 0x58
0418AD             0032*  
0418AD             0033*  ; &60-&67 	96-103 	Rectangle fill
0418AD             0034*  plot_rf: equ 0x60
0418AD             0035*  
0418AD             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0418AD             0037*  plot_lf_lr_fg: equ 0x60
0418AD             0038*  
0418AD             0039*  ; &70-&77 	112-119 	Parallelogram fill
0418AD             0040*  plot_pf: equ 0x70
0418AD             0041*  
0418AD             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0418AD             0043*  plot_lf_r_non_fg: equ 0x78
0418AD             0044*  
0418AD             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0418AD             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0418AD             0047*  
0418AD             0048*  ; &90-&97 	144-151 	Circle outline
0418AD             0049*  plot_co: equ 0x90
0418AD             0050*  
0418AD             0051*  ; &98-&9F 	152-159 	Circle fill
0418AD             0052*  plot_cf: equ 0x98
0418AD             0053*  
0418AD             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0418AD             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0418AD             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0418AD             0057*  
0418AD             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
0418AD             0059*  plot_rcm: equ 0xB8
0418AD             0060*  
0418AD             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0418AD             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0418AD             0063*  ; &D0-&D7 	208-215 	Not defined
0418AD             0064*  ; &D8-&DF 	216-223 	Not defined
0418AD             0065*  ; &E0-&E7 	224-231 	Not defined
0418AD             0066*  
0418AD             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
0418AD             0068*  plot_bmp: equ 0xE8
0418AD             0069*  
0418AD             0070*  ; &F0-&F7 	240-247 	Not defined
0418AD             0071*  ; &F8-&FF 	248-255 	Not defined
0418AD             0072*  
0418AD             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0418AD             0074*  ; Agon Console8 VDP 2.2.0
0418AD             0075*  
0418AD             0076*  ; Within each group of eight plot codes, the effects are as follows:
0418AD             0077*  ; Plot code 	Effect
0418AD             0078*  ; 0 	Move relative
0418AD             0079*  mv_rel: equ 0
0418AD             0080*  
0418AD             0081*  ; 1 	Plot relative in current foreground colour
0418AD             0082*  dr_rel_fg: equ 1
0418AD             0083*  
0418AD             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
0418AD             0085*  ; 3 	Plot relative in current background colour
0418AD             0086*  dr_rel_bg: equ 3
0418AD             0087*  
0418AD             0088*  ; 4 	Move absolute
0418AD             0089*  mv_abs: equ 4
0418AD             0090*  
0418AD             0091*  ; 5 	Plot absolute in current foreground colour
0418AD             0092*  dr_abs_fg: equ 5
0418AD             0093*  
0418AD             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0418AD             0095*  ; 7 	Plot absolute in current background colour
0418AD             0096*  dr_abs_bg: equ 7
0418AD             0097*  
0418AD             0098*  ; Codes 0-3 use the position data provided as part of the command
0418AD             0099*  ; as a relative position, adding the position given to the current
0418AD             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
0418AD             0101*  ; as part of the command as an absolute position, setting the current
0418AD             0102*  ; graphical cursor position to the position given.
0418AD             0103*  
0418AD             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0418AD             0105*  ; current pixel colour. These operations cannot currently be supported
0418AD             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
0418AD             0107*  ; supported. Support for these codes may be added in a future version
0418AD             0108*  ; of the VDP firmware.
0418AD             0109*  
0418AD             0110*  ; 16 colour palette constants
0418AD             0111*  c_black: equ 0
0418AD             0112*  c_red_dk: equ 1
0418AD             0113*  c_green_dk: equ 2
0418AD             0114*  c_yellow_dk: equ 3
0418AD             0115*  c_blue_dk: equ 4
0418AD             0116*  c_magenta_dk: equ 5
0418AD             0117*  c_cyan_dk: equ 6
0418AD             0118*  c_grey: equ 7
0418AD             0119*  c_grey_dk: equ 8
0418AD             0120*  c_red: equ 9
0418AD             0121*  c_green: equ 10
0418AD             0122*  c_yellow: equ 11
0418AD             0123*  c_blue: equ 12
0418AD             0124*  c_magenta: equ 13
0418AD             0125*  c_cyan: equ 14
0418AD             0126*  c_white: equ 15
0418AD             0127*  
0418AD             0128*  ; VDU 25, mode, x; y;: PLOT command
0418AD             0129*  ; inputs: a=mode, bc=x0, de=y0
0418AD             0130*  vdu_plot:
0418AD 32 C7 18 04 0131*      ld (@mode),a
0418B1 ED 43 C8 18 0132*      ld (@x0),bc
       04          
0418B6 ED 53 CA 18 0133*      ld (@y0),de
       04          
0418BB 21 C6 18 04 0134*  	ld hl,@cmd
0418BF 01 06 00 00 0135*  	ld bc,@end-@cmd
0418C3 5B DF       0136*  	rst.lil $18
0418C5 C9          0137*  	ret
0418C6 19          0138*  @cmd:   db 25
0418C7 00          0139*  @mode:  db 0
0418C8 00 00       0140*  @x0: 	dw 0
0418CA 00 00       0141*  @y0: 	dw 0
0418CC 00          0142*  @end:   db 0 ; extra byte to soak up deu
0418CD             0143*  
0418CD             0144*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418CD             0145*  ; &E8-&EF 	232-239 	Bitmap plot §
0418CD             0146*  ; VDU 25, mode, x; y;: PLOT command
0418CD             0147*  ; inputs: bc=x0, de=y0
0418CD             0148*  ; prerequisites: vdu_buff_select
0418CD             0149*  vdu_plot_bmp:
0418CD ED 43 E4 18 0150*      ld (@x0),bc
       04          
0418D2 ED 53 E6 18 0151*      ld (@y0),de
       04          
0418D7 21 E2 18 04 0152*  	ld hl,@cmd
0418DB 01 06 00 00 0153*  	ld bc,@end-@cmd
0418DF 5B DF       0154*  	rst.lil $18
0418E1 C9          0155*  	ret
0418E2 19          0156*  @cmd:   db 25
0418E3 ED          0157*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0418E4 00 00       0158*  @x0: 	dw 0x0000
0418E6 00 00       0159*  @y0: 	dw 0x0000
0418E8 00          0160*  @end:   db 0x00 ; padding
0418E9             0161*  
0418E9             0162*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418E9             0163*  ; &E8-&EF 	232-239 	Bitmap plot §
0418E9             0164*  ; VDU 25, mode, x; y;: PLOT command
0418E9             0165*  ; inputs: bc=x0, de=y0
0418E9             0166*  ; USING 16.8 FIXED POINT COORDINATES
0418E9             0167*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0418E9             0168*  ;   the fractional portiion of the inputs are truncated
0418E9             0169*  ;   leaving only the 16-bit integer portion
0418E9             0170*  ; prerequisites: vdu_buff_select
0418E9             0171*  vdu_plot_bmp168:
0418E9             0172*  ; populate in the reverse of normal to keep the
0418E9             0173*  ; inputs from stomping on each other
0418E9 ED 53 07 19 0174*      ld (@y0-1),de
       04          
0418EE ED 43 05 19 0175*      ld (@x0-1),bc
       04          
0418F3 3E ED       0176*      ld a,plot_bmp+dr_abs_fg ; 0xED
0418F5 32 05 19 04 0177*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
0418F9 21 04 19 04 0178*  	ld hl,@cmd
0418FD 01 06 00 00 0179*  	ld bc,@end-@cmd
041901 5B DF       0180*  	rst.lil $18
041903 C9          0181*  	ret
041904 19          0182*  @cmd:   db 25
041905 ED          0183*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
041906 00 00       0184*  @x0: 	dw 0x0000
041908 00 00       0185*  @y0: 	dw 0x0000
04190A             0186*  @end:  ; no padding required b/c we shifted de right
04190A             0187*  
04190A             0188*  ; draw a filled rectangle
04190A             0189*  vdu_plot_rf:
04190A ED 43 31 19 0190*      ld (@x0),bc
       04          
04190F ED 53 33 19 0191*      ld (@y0),de
       04          
041914 DD 22 37 19 0192*      ld (@x1),ix
       04          
041919 FD 22 39 19 0193*      ld (@y1),iy
       04          
04191E 3E 19       0194*      ld a,25 ; we have to reload the 2nd plot command
041920 32 35 19 04 0195*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041924 21 2F 19 04 0196*  	ld hl,@cmd0
041928 01 0C 00 00 0197*  	ld bc,@end-@cmd0
04192C 5B DF       0198*  	rst.lil $18
04192E C9          0199*      ret
04192F 19          0200*  @cmd0:  db 25 ; plot
041930 04          0201*  @arg0:  db plot_sl_both+mv_abs
041931 00 00       0202*  @x0:    dw 0x0000
041933 00 00       0203*  @y0:    dw 0x0000
041935 19          0204*  @cmd1:  db 25 ; plot
041936 65          0205*  @arg1:  db plot_rf+dr_abs_fg
041937 00 00       0206*  @x1:    dw 0x0000
041939 00 00       0207*  @y1:    dw 0x0000
04193B 00          0208*  @end:   db 0x00 ; padding
04193C             0209*  
04193C             0210*  ; draw a filled circle
04193C             0211*  vdu_plot_cf:
04193C ED 43 63 19 0212*      ld (@x0),bc
       04          
041941 ED 53 65 19 0213*      ld (@y0),de
       04          
041946 DD 22 69 19 0214*      ld (@x1),ix
       04          
04194B FD 22 6B 19 0215*      ld (@y1),iy
       04          
041950 3E 19       0216*      ld a,25 ; we have to reload the 2nd plot command
041952 32 67 19 04 0217*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041956 21 61 19 04 0218*  	ld hl,@cmd0
04195A 01 0C 00 00 0219*  	ld bc,@end-@cmd0
04195E 5B DF       0220*  	rst.lil $18
041960 C9          0221*      ret
041961 19          0222*  @cmd0:  db 25 ; plot
041962 04          0223*  @arg0:  db plot_sl_both+mv_abs
041963 00 00       0224*  @x0:    dw 0x0000
041965 00 00       0225*  @y0:    dw 0x0000
041967 19          0226*  @cmd1:  db 25 ; plot
041968 9D          0227*  @arg1:  db plot_cf+dr_abs_fg
041969 00 00       0228*  @x1:    dw 0x0000
04196B 00 00       0229*  @y1:    dw 0x0000
04196D 00          0230*  @end:   db 0x00 ; padding
04196E             0040       include "vdu_sprites.inc"
04196E             0001*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
04196E             0002*  ; the VDP can support up to 256 sprites. They must be defined
04196E             0003*  ; contiguously, and so the first sprite is sprite 0.
04196E             0004*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
04196E             0005*  ; Once a selection of sprites have been defined, you can activate
04196E             0006*  ; them using the VDU 23, 27, 7, n command, where n is the number
04196E             0007*  ; of sprites to activate. This will activate the first n sprites,
04196E             0008*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
04196E             0009*  
04196E             0010*  ; A single sprite can have multiple "frames", referring to
04196E             0011*  ; different bitmaps.
04196E             0012*  ; (These bitmaps do not need to be the same size.)
04196E             0013*  ; This allows a sprite to include an animation sequence,
04196E             0014*  ; which can be stepped through one frame at a time, or picked
04196E             0015*  ; in any order.
04196E             0016*  
04196E             0017*  ; Any format of bitmap can be used as a sprite frame. It should
04196E             0018*  ; be noted however that "native" format bitmaps are not
04196E             0019*  ; recommended for use as sprite frames, as they cannot get
04196E             0020*  ; erased from the screen. (As noted above, the "native" bitmap
04196E             0021*  ; format is not really intended for general use.) This is part
04196E             0022*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
04196E             0023*  ; screen are now stored in RGBA2222 format.
04196E             0024*  
04196E             0025*  ; An "active" sprite can be hidden, so it will stop being drawn,
04196E             0026*  ; and then later shown again.
04196E             0027*  
04196E             0028*  ; Moving sprites around the screen is done by changing the
04196E             0029*  ; position of the sprite. This can be done either by setting
04196E             0030*  ; the absolute position of the sprite, or by moving the sprite
04196E             0031*  ; by a given number of pixels. (Sprites are positioned using
04196E             0032*  ; pixel coordinates, and not by the logical OS coordinate system.)
04196E             0033*  ; In the current sprite system, sprites will not update their
04196E             0034*  ; position on-screen until either another drawing operation is
04196E             0035*  ; performed or an explicit VDU 23, 27, 15 command is performed.
04196E             0036*  
04196E             0037*  ; VDU 23, 27, 4, n: Select sprite n
04196E             0038*  ; inputs: a is the 8-bit sprite id
04196E             0039*  vdu_sprite_select:
04196E 32 80 19 04 0040*      ld (@sprite),a
041972 21 7D 19 04 0041*      ld hl,@cmd
041976 01 04 00 00 0042*      ld bc,@end-@cmd
04197A 5B DF       0043*      rst.lil $18
04197C C9          0044*      ret
04197D 17 1B 04    0045*  @cmd:    db 23,27,4
041980 00          0046*  @sprite: db 0x00
041981             0047*  @end:
041981             0048*  
041981             0049*  ; VDU 23, 27, 5: Clear frames in current sprite
041981             0050*  ; inputs: none
041981             0051*  ; prerequisites: vdu_sprite_select
041981             0052*  vdu_sprite_clear_frames:
041981 21 8C 19 04 0053*      ld hl,@cmd
041985 01 03 00 00 0054*      ld bc,@end-@cmd
041989 5B DF       0055*      rst.lil $18
04198B C9          0056*      ret
04198C 17 1B 05    0057*  @cmd: db 23,27,5
04198F             0058*  @end:
04198F             0059*  
04198F             0060*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04198F             0061*  ; inputs: a is the 8-bit bitmap number
04198F             0062*  ; prerequisites: vdu_sprite_select
04198F             0063*  vdu_sprite_add_bmp:
04198F 32 A1 19 04 0064*      ld (@bmp),a
041993 21 9E 19 04 0065*      ld hl,@cmd
041997 01 04 00 00 0066*      ld bc,@end-@cmd
04199B 5B DF       0067*      rst.lil $18
04199D C9          0068*      ret
04199E 17 1B 06    0069*  @cmd: db 23,27,6
0419A1 00          0070*  @bmp: db 0x00
0419A2             0071*  @end:
0419A2             0072*  
0419A2             0073*  ; VDU 23, 27, 7, n: Activate n sprites
0419A2             0074*  ; inputs: a is the number of sprites to activate
0419A2             0075*  ; prerequisites: each sprite activated must have at least one frame attached to it
0419A2             0076*  vdu_sprite_activate:
0419A2 32 B4 19 04 0077*      ld (@num),a
0419A6 21 B1 19 04 0078*      ld hl,@cmd
0419AA 01 04 00 00 0079*      ld bc,@end-@cmd
0419AE 5B DF       0080*      rst.lil $18
0419B0 C9          0081*      ret
0419B1 17 1B 07    0082*  @cmd: db 23,27,7
0419B4 00          0083*  @num: db 0x00
0419B5             0084*  @end:
0419B5             0085*  
0419B5             0086*  ; VDU 23, 27, 8: Select next frame of current sprite
0419B5             0087*  ; inputs: none
0419B5             0088*  ; prerequisites: vdu_sprite_select
0419B5             0089*  vdu_sprite_next_frame:
0419B5 21 C0 19 04 0090*      ld hl,@cmd
0419B9 01 03 00 00 0091*      ld bc,@end-@cmd
0419BD 5B DF       0092*      rst.lil $18
0419BF C9          0093*      ret
0419C0 17 1B 08    0094*  @cmd: db 23,27,8
0419C3             0095*  @end:
0419C3             0096*  
0419C3             0097*  ; VDU 23, 27, 9: Select previous frame of current sprite
0419C3             0098*  ; inputs: none
0419C3             0099*  ; prerequisites: vdu_sprite_select
0419C3             0100*  vdu_sprite_prev_frame:
0419C3 21 CE 19 04 0101*      ld hl,@cmd
0419C7 01 03 00 00 0102*      ld bc,@end-@cmd
0419CB 5B DF       0103*      rst.lil $18
0419CD C9          0104*      ret
0419CE 17 1B 09    0105*  @cmd: db 23,27,9
0419D1             0106*  @end:
0419D1             0107*  
0419D1             0108*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
0419D1             0109*  ; inputs: a is frame number to select
0419D1             0110*  ; prerequisites: vdu_sprite_select
0419D1             0111*  vdu_sprite_select_frame:
0419D1 32 E3 19 04 0112*      ld (@frame),a
0419D5 21 E0 19 04 0113*      ld hl,@cmd
0419D9 01 04 00 00 0114*      ld bc,@end-@cmd
0419DD 5B DF       0115*      rst.lil $18
0419DF C9          0116*      ret
0419E0 17 1B 0A    0117*  @cmd:    db 23,27,10
0419E3 00          0118*  @frame:  db 0x00
0419E4             0119*  @end:
0419E4             0120*  
0419E4             0121*  ; VDU 23, 27, 11: Show current sprite
0419E4             0122*  ; inputs: none
0419E4             0123*  ; prerequisites: vdu_sprite_select
0419E4             0124*  vdu_sprite_show:
0419E4 21 EF 19 04 0125*      ld hl,@cmd
0419E8 01 03 00 00 0126*      ld bc,@end-@cmd
0419EC 5B DF       0127*      rst.lil $18
0419EE C9          0128*      ret
0419EF 17 1B 0B    0129*  @cmd: db 23,27,11
0419F2             0130*  @end:
0419F2             0131*  
0419F2             0132*  ; VDU 23, 27, 12: Hide current sprite
0419F2             0133*  ; inputs: none
0419F2             0134*  ; prerequisites: vdu_sprite_select
0419F2             0135*  vdu_sprite_hide:
0419F2 21 FD 19 04 0136*      ld hl,@cmd
0419F6 01 03 00 00 0137*      ld bc,@end-@cmd
0419FA 5B DF       0138*      rst.lil $18
0419FC C9          0139*      ret
0419FD 17 1B 0C    0140*  @cmd: db 23,27,12
041A00             0141*  @end:
041A00             0142*  
041A00             0143*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041A00             0144*  ; inputs: bc is x coordinate, de is y coordinate
041A00             0145*  ; prerequisites: vdu_sprite_select
041A00             0146*  vdu_sprite_move_abs:
041A00 ED 43 18 1A 0147*      ld (@xpos),bc
       04          
041A05 ED 53 1A 1A 0148*      ld (@ypos),de
       04          
041A0A 21 15 1A 04 0149*      ld hl,@cmd
041A0E 01 07 00 00 0150*      ld bc,@end-@cmd
041A12 5B DF       0151*      rst.lil $18
041A14 C9          0152*      ret
041A15 17 1B 0D    0153*  @cmd:  db 23,27,13
041A18 00 00       0154*  @xpos: dw 0x0000
041A1A 00 00       0155*  @ypos: dw 0x0000
041A1C 00          0156*  @end:  db 0x00 ; padding
041A1D             0157*  
041A1D             0158*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041A1D             0159*  ; inputs: bc is x coordinate, de is y coordinate
041A1D             0160*  ; prerequisites: vdu_sprite_select
041A1D             0161*  vdu_sprite_move_rel:
041A1D ED 43 35 1A 0162*      ld (@dx),bc
       04          
041A22 ED 53 37 1A 0163*      ld (@dy),de
       04          
041A27 21 32 1A 04 0164*      ld hl,@cmd
041A2B 01 07 00 00 0165*      ld bc,@end-@cmd
041A2F 5B DF       0166*      rst.lil $18
041A31 C9          0167*      ret
041A32 17 1B 0E    0168*  @cmd: db 23,27,14
041A35 00 00       0169*  @dx:  dw 0x0000
041A37 00 00       0170*  @dy:  dw 0x0000
041A39 00          0171*  @end: db 0x00 ; padding
041A3A             0172*  
041A3A             0173*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041A3A             0174*  ; USING 16.8 FIXED POINT COORDINATES
041A3A             0175*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
041A3A             0176*  ;   the fractional portiion of the inputs are truncated
041A3A             0177*  ;   leaving only the 16-bit integer portion
041A3A             0178*  ; prerequisites: vdu_sprite_select
041A3A             0179*  vdu_sprite_move_abs168:
041A3A             0180*  ; offset inputs by the gfx origin
041A3A             0181*  ; y coordinate
041A3A 21 00 00 00 0182*      ld hl,origin_top*256
041A3E 19          0183*      add hl,de
041A3F 22 61 1A 04 0184*      ld (@ypos-1),hl
041A43             0185*  ; x coordinate
041A43 21 00 80 00 0186*      ld hl,origin_left*256
041A47 09          0187*      add hl,bc
041A48 22 5F 1A 04 0188*      ld (@xpos-1),hl
041A4C             0189*  ; prepare vdu command
041A4C 3E 0D       0190*      ld a,13       ; restore the final byte of the command
041A4E 32 5F 1A 04 0191*      ld (@cmd+2),a ; string that got stomped on by bcu
041A52 21 5D 1A 04 0192*      ld hl,@cmd
041A56 01 07 00 00 0193*      ld bc,@end-@cmd
041A5A 5B DF       0194*      rst.lil $18
041A5C C9          0195*      ret
041A5D 17 1B 0D    0196*  @cmd:  db 23,27,13
041A60 00 00       0197*  @xpos: dw 0x0000
041A62 00 00       0198*  @ypos: dw 0x0000
041A64             0199*  @end:  ; no padding required b/c we shifted de right
041A64             0200*  
041A64             0201*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041A64             0202*  ; USING 16.8 FIXED POINT COORDINATES
041A64             0203*  ; inputs: ub.c is dx, ud.e is dy
041A64             0204*  ;   the fractional portiion of the inputs are truncated
041A64             0205*  ;   leaving only the 16-bit integer portion
041A64             0206*  ; prerequisites: vdu_sprite_select
041A64             0207*  vdu_sprite_move_rel168:
041A64             0208*  ; populate in the reverse of normal to keep the
041A64             0209*  ; inputs from stomping on each other
041A64 ED 53 83 1A 0210*      ld (@dy-1),de
       04          
041A69 ED 43 81 1A 0211*      ld (@dx-1),bc
       04          
041A6E 3E 0E       0212*      ld a,14       ; restore the final byte of the command
041A70 32 81 1A 04 0213*      ld (@cmd+2),a ; string that got stomped on by bcu
041A74 21 7F 1A 04 0214*      ld hl,@cmd
041A78 01 07 00 00 0215*      ld bc,@end-@cmd
041A7C 5B DF       0216*      rst.lil $18
041A7E C9          0217*      ret
041A7F 17 1B 0E    0218*  @cmd:  db 23,27,14
041A82 00 00       0219*  @dx: dw 0x0000
041A84 00 00       0220*  @dy: dw 0x0000
041A86             0221*  @end:  ; no padding required b/c we shifted de right
041A86             0222*  
041A86             0223*  ; VDU 23, 27, 15: Update the sprites in the GPU
041A86             0224*  ; inputs: none
041A86             0225*  vdu_sprite_update:
041A86 21 91 1A 04 0226*      ld hl,@cmd
041A8A 01 03 00 00 0227*      ld bc,@end-@cmd
041A8E 5B DF       0228*      rst.lil $18
041A90 C9          0229*      ret
041A91 17 1B 0F    0230*  @cmd: db 23,27,15
041A94             0231*  @end:
041A94             0232*  
041A94             0233*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
041A94             0234*  ; inputs: none
041A94             0235*  vdu_sprite_bmp_reset:
041A94 21 9F 1A 04 0236*      ld hl,@cmd
041A98 01 03 00 00 0237*      ld bc,@end-@cmd
041A9C 5B DF       0238*      rst.lil $18
041A9E C9          0239*      ret
041A9F 17 1B 10    0240*  @cmd: db 23,27,16
041AA2             0241*  @end:
041AA2             0242*  
041AA2             0243*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
041AA2             0244*  ; inputs: none
041AA2             0245*  vdu_sprite_reset:
041AA2 21 AD 1A 04 0246*      ld hl,@cmd
041AA6 01 03 00 00 0247*      ld bc,@end-@cmd
041AAA 5B DF       0248*      rst.lil $18
041AAC C9          0249*      ret
041AAD 17 1B 11    0250*  @cmd: db 23,27,17
041AB0             0251*  @end:
041AB0             0252*  
041AB0             0253*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
041AB0             0254*  ; inputs: a is the GCOL paint mode
041AB0             0255*  ; prerequisites: vdu_sprite_select
041AB0             0256*  vdu_sprite_set_gcol:
041AB0 32 C2 1A 04 0257*      ld (@mode),a
041AB4 21 BF 1A 04 0258*      ld hl,@cmd
041AB8 01 04 00 00 0259*      ld bc,@end-@cmd
041ABC 5B DF       0260*      rst.lil $18
041ABE C9          0261*      ret
041ABF 17 1B 12    0262*  @cmd:  db 23,27,18
041AC2 00          0263*  @mode: db 0x00
041AC3             0264*  @end:
041AC3             0265*  
041AC3             0266*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
041AC3             0267*  ; inputs: hl=bufferId
041AC3             0268*  ; prerequisites: vdu_sprite_select
041AC3             0269*  vdu_sprite_add_buff:
041AC3 22 D5 1A 04 0270*      ld (@bufferId),hl
041AC7 21 D2 1A 04 0271*      ld hl,@cmd
041ACB 01 05 00 00 0272*      ld bc,@end-@cmd
041ACF 5B DF       0273*      rst.lil $18
041AD1 C9          0274*      ret
041AD2 17 1B 26    0275*  @cmd:      db 23,27,0x26
041AD5 00 00       0276*  @bufferId: dw 0x0000
041AD7 00          0277*  @end:      db 0x00 ; padding
041AD8             0041   
041AD8             0042   ; APPLICATION INCLUDES
041AD8             0043       include "collisions.inc"
041AD8             0001*  ; ====== COLLISION DETECTION ======
041AD8             0002*  ; --- constants ---
041AD8             0003*  ; sprite_collisions flags
041AD8             0004*  collides_with_player: equ %00000001
041AD8             0005*  collides_with_laser: equ %00000010
041AD8             0006*  sprite_alive: equ 6 ; set when sprite is alive
041AD8             0007*  sprite_just_died: equ 7 ; set when sprite just died
041AD8             0008*  
041AD8             0009*  collide_top: equ %00001000
041AD8             0010*  collide_bottom: equ %00000100
041AD8             0011*  collide_left: equ %00000010
041AD8             0012*  collide_right: equ %00000001
041AD8             0013*  
041AD8             0014*  ; this routine detects collisions between two collidable objects,
041AD8             0015*  ; which can include sprites, active tiles, or any screen coordinate
041AD8             0016*  ; which has been set up with a sprite table structure that includes dim_x
041AD8             0017*  ; representing the radius of the collidable object
041AD8             0018*  ; inputs: ix and iy point to the colliding objects' sprite table records
041AD8             0019*  ; outputs: uh.l = distance - sum of radii
041AD8             0020*  ;          zero flag set or sign flag negative if collision detected
041AD8             0021*  ;          dx168 and dy168 are also populated with the signed displacements
041AD8             0022*  ; destroys: everything except indexes
041AD8             0023*  check_collision:
041AD8             0024*  ; compute dx = x1-x0
041AD8 DD 27 01    0025*      ld hl,(ix+sprite_x)
041ADB FD 17 01    0026*      ld de,(iy+sprite_x)
041ADE AF          0027*      xor a ; clear carry
041ADF ED 52       0028*      sbc hl,de
041AE1 22 9E 09 04 0029*      ld (dx168),hl ; dx to scratch
041AE5             0030*  ; compute dy = y1-y0
041AE5 DD 27 04    0031*      ld hl,(ix+sprite_y)
041AE8 FD 17 04    0032*      ld de,(iy+sprite_y)
041AEB AF          0033*      xor a ; clear carry
041AEC ED 52       0034*      sbc hl,de ; hl = dy
041AEE 22 A4 09 04 0035*      ld (dy168),hl ; dy to scratch
041AF2             0036*  ; compute euclidean distance between centers
041AF2 CD AA 09 04 0037*      call distance168 ; uh.l = distance
041AF6             0038*  ; check for overlap by summing half the radii
041AF6 DD 7E 1E    0039*      ld a,(ix+sprite_dim_x)
041AF9 CB 3F       0040*      srl a ; divide by 2
041AFB FD 5E 1E    0041*      ld e,(iy+sprite_dim_x)
041AFE CB 3B       0042*      srl e ; divide by 2
041B00 83          0043*      add a,e
041B01 11 00 00 00 0044*      ld de,0 ; clear deu and e
041B05 57          0045*      ld d,a ; ud.e = sum of radii
041B06 B7          0046*      or a ; clear carry
041B07 ED 52       0047*      sbc hl,de ; uh.l = distance - sum of radii
041B09 C9          0048*      ret
041B0A             0049*  ; end check_collision
041B0A             0044       include "enemies.inc"
041B0A 04          0001*  max_enemy_sprites: db 4
041B0B             0002*  
041B0B             0003*  ; sprite_type
041B0B             0004*  enemy_dead: equ 0
041B0B             0005*  enemy_seeker: equ 1
041B0B             0006*  
041B0B             0007*  fireballs: equ 6
041B0B             0008*  explosion: equ 255
041B0B             0009*  
041B0B             0010*  move_enemies:
041B0B             0011*  ; are there any active enemies or explosions?
041B0B 3A 08 53 04 0012*      ld a,(table_active_sprites)
041B0F A7          0013*      and a ; will be zero if no alive enemies or explosions
041B10 C2 15 1B 04 0014*      jp nz,@they_live
041B14             0015*      ; DEPRECATED: though may be used in the future
041B14             0016*      ; ld hl,enemies_dead
041B14             0017*      ; ld (enemies_state),hl
041B14             0018*      ; END DEPRECATED
041B14 C9          0019*      ret
041B15             0020*  @they_live:
041B15             0021*  ; initialize pointers and loop counter
041B15 FD 21 85 50 0022*      ld iy,table_base ; set iy to first record in table
       04          
041B1A 06 10       0023*      ld b,table_max_records ; loop counter
041B1C             0024*  @move_loop:
041B1C FD 22 05 53 0025*      ld (table_pointer),iy ; update table pointer
       04          
041B21 C5          0026*      push bc ; backup loop counter
041B22             0027*  ; check sprite_type to see if sprite is active
041B22 FD 7E 16    0028*      ld a,(iy+sprite_type)
041B25 A7          0029*      and a ; if zero, sprite is dead
041B26 CA 59 1B 04 0030*      jp z,@next_record ; ... and we skip to next record
041B2A             0031*  ; otherwise we prepare to move the sprite
041B2A FD 7E 00    0032*      ld a,(iy+sprite_id) ; get spriteId
041B2D CD 6E 19 04 0033*      call vdu_sprite_select ; select sprite
041B31 FD 27 1A    0034*      ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
041B34             0035*      callHL
041B34 01 3A 1B 04 0001*M     ld bc,@F ; Address of first instruction after the jump
041B38 C5          0002*M     push bc ; which constitutes the return address
041B39 E9          0003*M     jp (hl) ; Jump to the address in HL
041B3A             0004*M @@:
041B3A             0036*  ; move_enemies_loop_return: return from behavior subroutines
041B3A FD 2A 05 53 0037*      ld iy,(table_pointer) ; get back table pointer
       04          
041B3F             0038*  ; now we check results of all the moves
041B3F FD CB 1D 7E 0039*      bit sprite_just_died,(iy+sprite_collisions)
041B43 CA 4F 1B 04 0040*      jp z,@draw_sprite ; if not dead, draw sprite
041B47 CD 5C 53 04 0041*      call table_deactivate_sprite
041B4B C3 59 1B 04 0042*      jp @next_record ; and to the next record
041B4F             0043*  @draw_sprite:
041B4F FD 07 01    0044*      ld bc,(iy+sprite_x)
041B52 FD 17 04    0045*      ld de,(iy+sprite_y)
041B55 CD 3A 1A 04 0046*      call vdu_sprite_move_abs168
041B59             0047*  ; fall through to @next_record
041B59             0048*  @next_record:
041B59 ED 33 28    0049*      lea iy,iy+table_bytes_per_record
041B5C AF          0050*      xor a ; clears carry flag
041B5D 32 09 53 04 0051*      ld (sprite_screen_edge),a ; clear screen edge collision flag
041B61 C1          0052*      pop bc ; get back our loop counter
041B62 10 B8       0053*      djnz @move_loop ; loop until we've checked all the records
041B64 C9          0054*      ret ; and we're out
041B65             0055*  
041B65             0056*  ; ; ######### SPRITE BEHAVIOR ROUTINES #########
041B65             0057*  ; ; each sprite in the table must have one of these defined
041B65             0058*  ; ; but they need not be unique to a particular sprite
041B65             0059*  ; ; these are jumped to from move_enemies_do_program,but could come from other places
041B65             0060*  ; ; and have the option but not obligation to go back to move_enemies_loop_return
041B65             0061*  ; ; but they can call anything they want between those two endpoints
041B65             0062*  ; move_programs: ; bookmark in case we want to know the first address of the first subroutine
041B65             0063*  
041B65             0064*  ; move_nop: ; does nothing but burn a few cycles changing the PC
041B65             0065*  ;     ret
041B65             0066*  
041B65             0067*  ; move_explosion:
041B65             0068*  ;     call animate_explosion
041B65             0069*  ;     ret
041B65             0070*  
041B65             0071*  check_enemy_player_collisions:
041B65             0072*  ; check for collisions with laser
041B65 DD 21 5A 49 0073*      ld ix,laser_start_variables
       04          
041B6A DD CB 1D 76 0074*      bit sprite_alive,(ix+sprite_collisions)
041B6E CA 8B 1B 04 0075*      jp z,@player ; laser dead, check player
041B72 CD D8 1A 04 0076*      call check_collision
041B76 F2 8B 1B 04 0077*      jp p,@player ; no collision
041B7A DD 21 5A 49 0078*      ld ix,laser_start_variables
       04          
041B7F DD CB 1D FE 0079*      set sprite_just_died,(ix+sprite_collisions)
041B83 DD CB 1D F6 0080*      set sprite_alive,(ix+sprite_collisions)
041B87 C3 C5 1B 04 0081*      jp enemy_kill
041B8B             0082*  @player: ; check for collisions with player
041B8B DD 21 17 4F 0083*      ld ix,player_start_variables
       04          
041B90 DD CB 1D 76 0084*      bit sprite_alive,(ix+sprite_collisions)
041B94 C8          0085*      ret z ; player dead, no collision
041B95 CD D8 1A 04 0086*      call check_collision
041B99 F0          0087*      ret p ; no collision
041B9A C3 C5 1B 04 0088*      jp enemy_kill
041B9E             0089*  ; end move_enemy_seeker
041B9E             0090*  
041B9E             0091*  
041B9E             0092*  
041B9E             0093*  ; move_fireballs:
041B9E             0094*  ;     call move_sprite ; move sprite
041B9E             0095*  ;     ld a,(sprite_screen_edge) ; check for collision with screen edge
041B9E             0096*  ;     and a ; if zero we're still within screen bounds
041B9E             0097*  ;     jp z,move_fireballs_alive
041B9E             0098*  ; ; otherwise kill sprite
041B9E             0099*  ;     ld a,%10000000 ; any bit set in high nibble means sprite will die
041B9E             0100*  ;     ld (iy+sprite_collisions),a
041B9E             0101*  ;     ret
041B9E             0102*  ; move_fireballs_alive:
041B9E             0103*  ;     ld a,(sprite_animation_timer)
041B9E             0104*  ;     dec a
041B9E             0105*  ;     ld (sprite_animation_timer),a
041B9E             0106*  ;     jp nz,move_fireballs_draw
041B9E             0107*  ;     ld a,(sprite_animation)
041B9E             0108*  ;     xor %1
041B9E             0109*  ;     ld (sprite_animation),a
041B9E             0110*  ;     ld a,6 ; 1/10th of a second timer
041B9E             0111*  ;     ld (sprite_animation_timer),a
041B9E             0112*  ;     ; fall through
041B9E             0113*  
041B9E             0114*  ; move_fireballs_draw:
041B9E             0115*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
041B9E             0116*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
041B9E             0117*  ;     call check_collisions
041B9E             0118*  ;     ret
041B9E             0119*  
041B9E             0120*  ; compute orientation to player
041B9E             0121*  ; based on relative positions
041B9E             0122*  ; returns: h.l 16.8 fixed angle256 to player
041B9E             0123*  ;    ub.c and ud.e as 16.8 signed fixed point numbers
041B9E             0124*  ;    representing delta-x/y *to* target respectively
041B9E             0125*  orientation_to_player:
041B9E FD 2A 05 53 0126*      ld iy,(table_pointer)
       04          
041BA3 FD 07 01    0127*      ld bc,(iy+sprite_x)
041BA6 FD 17 04    0128*      ld de,(iy+sprite_y)
041BA9 DD 2A 22 4F 0129*      ld ix,(player_x)
       04          
041BAE FD 2A 25 4F 0130*      ld iy,(player_y)
       04          
041BB3 CD 83 09 04 0131*      call dxy168
041BB7 C5          0132*      push bc
041BB8 D5          0133*      push de
041BB9 CD DF 09 04 0134*      call atan2_168fast
041BBD D1          0135*      pop de
041BBE C1          0136*      pop bc
041BBF FD 2A 05 53 0137*      ld iy,(table_pointer)
       04          
041BC4 C9          0138*      ret
041BC5             0139*  
041BC5             0140*  ; this routine vanquishes the enemy sprite
041BC5             0141*  ; and replaces it with an animated explosion
041BC5             0142*  ; we jump here instead of call because
041BC5             0143*  ; we want to return to differing locations in the loop
041BC5             0144*  ; depending on whether we're still sploding
041BC5             0145*  ; destroys: everything except index registers
041BC5             0146*  ; returns: an incandescent ball of debris and gas
041BC5             0147*  enemy_kill:
041BC5 FD 2A 05 53 0148*      ld iy,(table_pointer)
       04          
041BCA             0149*  ; tally up points
041BCA 2A 0D 4F 04 0150*      ld hl,(player_score)
041BCE 01 00 00 00 0151*      ld bc,0 ; clear bcu
041BD2 FD 4E 26    0152*      ld c,(iy+sprite_points)
041BD5 09          0153*      add hl,bc
041BD6 22 0D 4F 04 0154*      ld (player_score),hl
041BDA             0155*  ; ; initialize explosion
041BDA             0156*  ; init_explosion:
041BDA             0157*  ;     ld hl,explosion
041BDA             0158*  ;     ld (sprite_base_bufferId),hl
041BDA             0159*  ;     ld hl,move_explosion
041BDA             0160*  ;     ld (sprite_move_program),hl
041BDA             0161*  ;     ld a,%00000000 ; collides with nothing
041BDA             0162*  ;     ld (iy+sprite_collisions),a
041BDA             0163*  ;     ld hl,0 ; north
041BDA             0164*  ;     ld (sprite_heading),hl
041BDA             0165*  ;     ld a,0x04 ; will decrement to 03
041BDA             0166*  ;     ld (sprite_animation),a
041BDA             0167*  ;     ld a,0x07 ; 7/60th of a second timer
041BDA             0168*  ;     ld (sprite_animation_timer),a
041BDA             0169*  ;     xor a
041BDA             0170*  ;     ld (sprite_move_timer),a
041BDA             0171*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
041BDA             0172*  ; ; fall through to next_explosion
041BDA             0173*  ; next_explosion:
041BDA             0174*  ;     ld a,(sprite_animation)
041BDA             0175*  ;     dec a ; if rolled negative from zero,we're done sploding
041BDA             0176*  ;     jp m,done_explosion
041BDA             0177*  ;     ld (sprite_animation),a
041BDA             0178*  ;     ld a,0x7 ; 7/60th of a second timer
041BDA             0179*  ;     ld (sprite_animation_timer),a
041BDA             0180*  ; ; fall through to animate_explosion
041BDA             0181*  ; animate_explosion:
041BDA             0182*  ;     ld hl,sprite_y+1
041BDA             0183*  ;     inc (hl) ; move explosion down 1 pixel
041BDA             0184*  ;     jp z, done_explosion ; if wraparound to top of screen, kill explosion
041BDA             0185*  ;     ld hl,sprite_animation_timer
041BDA             0186*  ;     dec (hl) ; if timer is zero,we do next animation
041BDA             0187*  ;     jp z,next_explosion
041BDA             0188*  ;     ;otherwise we fall through to draw the current one
041BDA             0189*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
041BDA             0190*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
041BDA             0191*  ;     ret ; now we go back to caller
041BDA             0192*  ; done_explosion:
041BDA FD CB 1D FE 0193*      set sprite_just_died,(iy+sprite_collisions)
041BDE C9          0194*      ret ; now we go back to caller
041BDF             0195*  ; end enemy_kill
041BDF             0045       include "enemy_seeker.inc"
041BDF             0001*  speed_seeker: equ 0x000280 ; 2.5 pixels per frame
041BDF             0002*  
041BDF             0003*  seeker_defaults:
041BDF 01          0004*      db enemy_seeker	        ; type
041BE0 0B 01 00    0005*      dl BUF_SEEKER_000	    ; base_bufferId
041BE3 1A 1C 04    0006*      dl move_enemy_seeker	; move_program
041BE6 03          0007*      db collides_with_laser | collides_with_player ; collisions
041BE7 10          0008*      db 16	                ; dim_x
041BE8 10          0009*      db 16                   ; dim_y
041BE9 20          0010*      db 32                   ; num_orientations
041BEA 01          0011*      db 1                    ; num_animations
041BEB 00          0012*      db 0	                ; animation
041BEC 00          0013*      db 0	                ; animation_timer
041BED 01          0014*      db 1	                ; move_timer
041BEE 00          0015*      db 0	                ; move_step
041BEF 0A          0016*      db 10	                ; points
041BF0 02          0017*      db 2	                ; shield_damage
041BF1             0018*  
041BF1             0019*  enemy_spawn_seeker:
041BF1 FD 21 DF 1B 0020*      ld iy,seeker_defaults
       04          
041BF6 CD A1 54 04 0021*      call spawn_sprite_from_sprite
041BFA D0          0022*      ret nc ; no carry means no free sprite slots, so we go home
041BFB             0023*  ; ix comes back with the pointer to the new sprite variables
041BFB             0024*  ; a comes back with the spriteId of the new sprite
041BFB             0025*  ; initialize the new sprite
041BFB DD 77 00    0026*      ld (ix+sprite_id),a
041BFE 06 20       0027*      ld b,32 ; number of frames
041C00 DD 27 17    0028*      ld hl,(ix+sprite_base_bufferId)
041C03 CD ED 54 04 0029*      call sprite_load_frames
041C07             0030*  ; copy coordinates of active sprite to new sprite
041C07 FD 2A 05 53 0031*      ld iy,(table_pointer)
       04          
041C0C E6 01       0032*      and %00000001 ; 50/50 chance of moving left or right on spanw
041C0E FD 77 25    0033*      ld (iy+sprite_move_step),a
041C11             0034*  ; update the new sprite's position and make it visible
041C11 CD 3A 1A 04 0035*      call vdu_sprite_move_abs168
041C15 CD E4 19 04 0036*      call vdu_sprite_show
041C19 C9          0037*      ret
041C1A             0038*  ; end enemy_spawn_seeker
041C1A             0039*  
041C1A             0040*  move_enemy_seeker:
041C1A             0041*  ; run the movement program for the seeker enemy
041C1A CD 22 1C 04 0042*      call en_nav_seek_zag
041C1E C3 65 1B 04 0043*      jp check_enemy_player_collisions
041C22             0044*  ; end move_enemy_seeker
041C22             0045*  
041C22             0046*  ; contains the logic for how to move the enemy
041C22             0047*  ; and then does the moving
041C22             0048*  ; inputs: a fully-populated active sprite table
041C22             0049*  ;         player position variables
041C22             0050*  ; destroys: everything except index registers
041C22             0051*  ; outputs: moving enemies
041C22             0052*  en_nav_seek_zag:
041C22             0053*  ; set velocity and orientation by player's relative location
041C22             0054*  ; move enemies y-axis
041C22             0055*  ; where is player relative to us?
041C22 CD 9E 1B 04 0056*      call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
041C26             0057*  ; is player above or below us?
041C26 ED 53 A1 05 0058*      ld (ude),de ; dy
       04          
041C2B 3A A3 05 04 0059*      ld a,(ude+2) ; deu
041C2F 17          0060*      rla ; shift sign bit into carry
041C30 D2 5C 1C 04 0061*      jp nc,@zig_zag ; player is below,evade
041C34             0062*  ; player is even or above,so home in on current heading
041C34 FD 2F 10    0063*      ld (iy+sprite_heading),hl ; save sprite heading
041C37             0064*  ; fall through to @compute_velocities
041C37             0065*  @compute_velocities:
041C37 CD 89 54 04 0066*      call sprite_compute_velocities
041C3B             0067*  ; change the animation frame to match heading
041C3B FD 7E 11    0068*      ld a,(iy+sprite_heading+1) ; we want the integer portion
041C3E CB 3F       0069*      srl a ; divide integer portion by 8
041C40 CB 3F       0070*      srl a
041C42 CB 3F       0071*      srl a
041C44 CD D1 19 04 0072*      call vdu_sprite_select_frame
041C48 C3 C4 53 04 0073*      jp move_sprite ; will return to caller from there
041C4C             0074*  @zig_zag_start:
041C4C FD 2A 05 53 0075*      ld iy,(table_pointer)
       04          
041C51 CD 45 07 04 0076*      call rand_8
041C55 E6 3F       0077*      and %00111111 ; limit it to 64
041C57 CB DF       0078*      set 3,a ; make sure it's at least 8
041C59 FD 77 24    0079*      ld (iy+sprite_move_timer),a ; store it
041C5C             0080*      ; fall through to @zig_zag
041C5C             0081*  @zig_zag:
041C5C FD 7E 24    0082*      ld a,(iy+sprite_move_timer)
041C5F 3D          0083*      dec a
041C60 FD 77 24    0084*      ld (iy+sprite_move_timer),a
041C63 C2 89 1C 04 0085*      jp nz,@zig_zag_no_switch
041C67             0086*      ; otherwise flip direction and restart timer
041C67 FD 7E 25    0087*      ld a,(iy+sprite_move_step)
041C6A EE 01       0088*      xor %1 ; flips bit one
041C6C FD 77 25    0089*      ld (iy+sprite_move_step),a ; store it
041C6F C2 7E 1C 04 0090*      jp nz,@F ; zag right
041C73             0091*  ;otherwise zag left
041C73 21 00 A0 00 0092*      ld hl,160*256; southwest heading
041C77 FD 2F 10    0093*      ld (iy+sprite_heading),hl ; save sprite heading
041C7A C3 4C 1C 04 0094*      jp @zig_zag_start
041C7E             0095*  @@: ; zag right
041C7E 21 00 60 00 0096*      ld hl,96*256; southeast heading
041C82 FD 2F 10    0097*      ld (iy+sprite_heading),hl ; save sprite heading
041C85 C3 4C 1C 04 0098*      jp @zig_zag_start
041C89             0099*  @zig_zag_no_switch:
041C89             0100*      ; ld a,(sprite_orientation)
041C89 FD 27 10    0101*      ld hl,(iy+sprite_heading)
041C8C C3 37 1C 04 0102*      jp @compute_velocities
041C90             0103*  ; end en_nav_seek_zag
041C90             0046       include "fonts_list.inc"
041C90             0001*  ; Generated by asm_config_editor.py
041C90             0002*  font_list_record_size: equ 12
041C90             0003*  font_list_width: equ 0
041C90             0004*  font_list_height: equ 3
041C90             0005*  font_list_bufferId: equ 6
041C90             0006*  font_list_filename: equ 9
041C90             0007*  
041C90             0008*  num_fonts: equ 18
041C90             0009*  
041C90             0010*  ; Index list:
041C90             0011*  amiga_forever_16x24: equ 64000
041C90             0012*  amiga_forever_8x16: equ 64001
041C90             0013*  amiga_forever_8x8: equ 64002
041C90             0014*  computer_pixel_7_10x15: equ 64003
041C90             0015*  computer_pixel_7_10x24: equ 64004
041C90             0016*  computer_pixel_7_8x16: equ 64005
041C90             0017*  Lat2_Terminus12x6_6x12: equ 64006
041C90             0018*  Lat2_TerminusBold14_8x14: equ 64007
041C90             0019*  Lat2_VGA14_8x14: equ 64008
041C90             0020*  Lat2_VGA16_8x16: equ 64009
041C90             0021*  Lat2_VGA8_8x8: equ 64010
041C90             0022*  Lat7_Fixed13_8x13: equ 64011
041C90             0023*  Lat7_Terminus12x6_6x12: equ 64012
041C90             0024*  Lat7_TerminusBold16_8x16: equ 64013
041C90             0025*  Lat7_VGA14_8x14: equ 64014
041C90             0026*  Lat7_VGA8x8: equ 64015
041C90             0027*  scriptorium_12x14: equ 64016
041C90             0028*  Squarewave_Bold_8x12: equ 64017
041C90             0029*  
041C90             0030*  font_list: ; width; height; bufferId; filename;:
041C90 10 00 00 18 0031*  	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 68 1D 04 
041C9C 08 00 00 10 0032*  	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 87 1D 04 
041CA8 08 00 00 08 0033*  	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 A5 1D 04 
041CB4 0A 00 00 0F 0034*  	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 C2 1D 04 
041CC0 0A 00 00 18 0035*  	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 E4 1D 04 
041CCC 08 00 00 10 0036*  	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 06 1E 04 
041CD8 06 00 00 0C 0037*  	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 27 1E 04 
041CE4 08 00 00 0E 0038*  	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 49 1E 04 
041CF0 08 00 00 0E 0039*  	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 6D 1E 04 
041CFC 08 00 00 10 0040*  	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 88 1E 04 
041D08 08 00 00 08 0041*  	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 A3 1E 04 
041D14 08 00 00 0D 0042*  	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 BC 1E 04 
041D20 06 00 00 0C 0043*  	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 D9 1E 04 
041D2C 08 00 00 10 0044*  	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 FB 1E 04 
041D38 08 00 00 0E 0045*  	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 1F 1F 04 
041D44 08 00 00 08 0046*  	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 3A 1F 04 
041D50 0C 00 00 0E 0047*  	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 53 1F 04 
041D5C 08 00 00 0C 0048*  	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 70 1F 04 
041D68             0049*  
041D68             0050*  ; files_list: ; filename:
041D68 66 6F 6E 74 0051*  fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
041D87 66 6F 6E 74 0052*  fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
041DA5 66 6F 6E 74 0053*  fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041DC2 66 6F 6E 74 0054*  fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
041DE4 66 6F 6E 74 0055*  fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
041E06 66 6F 6E 74 0056*  fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
041E27 66 6F 6E 74 0057*  fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
041E49 66 6F 6E 74 0058*  fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
041E6D 66 6F 6E 74 0059*  fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
041E88 66 6F 6E 74 0060*  fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
041EA3 66 6F 6E 74 0061*  fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041EBC 66 6F 6E 74 0062*  fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
041ED9 66 6F 6E 74 0063*  fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
041EFB 66 6F 6E 74 0064*  fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
041F1F 66 6F 6E 74 0065*  fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
041F3A 66 6F 6E 74 0066*  fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041F53 66 6F 6E 74 0067*  fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
041F70 66 6F 6E 74 0068*  fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
041F90             0047       include "images_tiles_dg.inc"
041F90             0001*  ; Generated by tiles_dg.py
041F90             0002*  
041F90             0003*  tiles_dg_num_images: equ 184
041F90             0004*  
041F90             0005*  ; bufferIds:
041F90             0006*  
041F90             0007*  
041F90             0008*  tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
041F90 01 00 00 10 0009*  	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       80 2C 04 00 
       02 00       
041FA2 01 00 00 10 0010*  	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       95 2C 04 01 
       02 00       
041FB4 01 00 00 10 0011*  	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       AA 2C 04 02 
       02 00       
041FC6 01 00 00 10 0012*  	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       BF 2C 04 03 
       02 00       
041FD8 01 00 00 10 0013*  	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       D4 2C 04 04 
       02 00       
041FEA 01 00 00 10 0014*  	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       E9 2C 04 05 
       02 00       
041FFC 01 00 00 10 0015*  	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       FE 2C 04 06 
       02 00       
04200E 01 00 00 10 0016*  	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       13 2D 04 07 
       02 00       
042020 01 00 00 10 0017*  	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       28 2D 04 08 
       02 00       
042032 01 00 00 10 0018*  	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       3D 2D 04 09 
       02 00       
042044 01 00 00 10 0019*  	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       52 2D 04 0A 
       02 00       
042056 01 00 00 10 0020*  	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       67 2D 04 0B 
       02 00       
042068 01 00 00 10 0021*  	dl 1, 16, 16, 256, fn_dg_012, 524
       00 00 10 00 
       00 00 01 00 
       7C 2D 04 0C 
       02 00       
04207A 01 00 00 10 0022*  	dl 1, 16, 16, 256, fn_dg_013, 525
       00 00 10 00 
       00 00 01 00 
       91 2D 04 0D 
       02 00       
04208C 01 00 00 10 0023*  	dl 1, 16, 16, 256, fn_dg_014, 526
       00 00 10 00 
       00 00 01 00 
       A6 2D 04 0E 
       02 00       
04209E 01 00 00 10 0024*  	dl 1, 16, 16, 256, fn_dg_015, 527
       00 00 10 00 
       00 00 01 00 
       BB 2D 04 0F 
       02 00       
0420B0 01 00 00 10 0025*  	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       D0 2D 04 10 
       02 00       
0420C2 01 00 00 10 0026*  	dl 1, 16, 16, 256, fn_dg_025, 537
       00 00 10 00 
       00 00 01 00 
       E5 2D 04 19 
       02 00       
0420D4 01 00 00 10 0027*  	dl 1, 16, 16, 256, fn_dg_026, 538
       00 00 10 00 
       00 00 01 00 
       FA 2D 04 1A 
       02 00       
0420E6 01 00 00 10 0028*  	dl 1, 16, 16, 256, fn_dg_027, 539
       00 00 10 00 
       00 00 01 00 
       0F 2E 04 1B 
       02 00       
0420F8 01 00 00 10 0029*  	dl 1, 16, 16, 256, fn_dg_028, 540
       00 00 10 00 
       00 00 01 00 
       24 2E 04 1C 
       02 00       
04210A 01 00 00 10 0030*  	dl 1, 16, 16, 256, fn_dg_029, 541
       00 00 10 00 
       00 00 01 00 
       39 2E 04 1D 
       02 00       
04211C 01 00 00 10 0031*  	dl 1, 16, 16, 256, fn_dg_030, 542
       00 00 10 00 
       00 00 01 00 
       4E 2E 04 1E 
       02 00       
04212E 01 00 00 10 0032*  	dl 1, 16, 16, 256, fn_dg_031, 543
       00 00 10 00 
       00 00 01 00 
       63 2E 04 1F 
       02 00       
042140 01 00 00 10 0033*  	dl 1, 16, 16, 256, fn_dg_032, 544
       00 00 10 00 
       00 00 01 00 
       78 2E 04 20 
       02 00       
042152 01 00 00 10 0034*  	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       8D 2E 04 21 
       02 00       
042164 01 00 00 10 0035*  	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       A2 2E 04 22 
       02 00       
042176 01 00 00 10 0036*  	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       B7 2E 04 23 
       02 00       
042188 01 00 00 10 0037*  	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       CC 2E 04 24 
       02 00       
04219A 01 00 00 10 0038*  	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       E1 2E 04 25 
       02 00       
0421AC 01 00 00 10 0039*  	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       F6 2E 04 26 
       02 00       
0421BE 01 00 00 10 0040*  	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       0B 2F 04 27 
       02 00       
0421D0 01 00 00 10 0041*  	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       20 2F 04 28 
       02 00       
0421E2 01 00 00 10 0042*  	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       35 2F 04 31 
       02 00       
0421F4 01 00 00 10 0043*  	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       4A 2F 04 32 
       02 00       
042206 01 00 00 10 0044*  	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       5F 2F 04 33 
       02 00       
042218 01 00 00 10 0045*  	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       74 2F 04 34 
       02 00       
04222A 01 00 00 10 0046*  	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       89 2F 04 35 
       02 00       
04223C 01 00 00 10 0047*  	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       9E 2F 04 36 
       02 00       
04224E 01 00 00 10 0048*  	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       B3 2F 04 37 
       02 00       
042260 01 00 00 10 0049*  	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       C8 2F 04 38 
       02 00       
042272 01 00 00 10 0050*  	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       DD 2F 04 39 
       02 00       
042284 01 00 00 10 0051*  	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       F2 2F 04 3A 
       02 00       
042296 01 00 00 10 0052*  	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       07 30 04 3B 
       02 00       
0422A8 01 00 00 10 0053*  	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       1C 30 04 41 
       02 00       
0422BA 01 00 00 10 0054*  	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       31 30 04 42 
       02 00       
0422CC 01 00 00 10 0055*  	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       46 30 04 43 
       02 00       
0422DE 01 00 00 10 0056*  	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       5B 30 04 44 
       02 00       
0422F0 01 00 00 10 0057*  	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       70 30 04 45 
       02 00       
042302 01 00 00 10 0058*  	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       85 30 04 46 
       02 00       
042314 01 00 00 10 0059*  	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       9A 30 04 47 
       02 00       
042326 01 00 00 10 0060*  	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       AF 30 04 48 
       02 00       
042338 01 00 00 10 0061*  	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       C4 30 04 49 
       02 00       
04234A 01 00 00 10 0062*  	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       D9 30 04 4A 
       02 00       
04235C 01 00 00 10 0063*  	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       EE 30 04 4B 
       02 00       
04236E 01 00 00 10 0064*  	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       03 31 04 51 
       02 00       
042380 01 00 00 10 0065*  	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       18 31 04 52 
       02 00       
042392 01 00 00 10 0066*  	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       2D 31 04 53 
       02 00       
0423A4 01 00 00 10 0067*  	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       42 31 04 54 
       02 00       
0423B6 01 00 00 10 0068*  	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       57 31 04 55 
       02 00       
0423C8 01 00 00 10 0069*  	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       6C 31 04 56 
       02 00       
0423DA 01 00 00 10 0070*  	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       81 31 04 57 
       02 00       
0423EC 01 00 00 10 0071*  	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       96 31 04 58 
       02 00       
0423FE 01 00 00 10 0072*  	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       AB 31 04 59 
       02 00       
042410 01 00 00 10 0073*  	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       C0 31 04 5A 
       02 00       
042422 01 00 00 10 0074*  	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       D5 31 04 5B 
       02 00       
042434 01 00 00 10 0075*  	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       EA 31 04 61 
       02 00       
042446 01 00 00 10 0076*  	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       FF 31 04 62 
       02 00       
042458 01 00 00 10 0077*  	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       14 32 04 63 
       02 00       
04246A 01 00 00 10 0078*  	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       29 32 04 64 
       02 00       
04247C 01 00 00 10 0079*  	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       3E 32 04 65 
       02 00       
04248E 01 00 00 10 0080*  	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       53 32 04 66 
       02 00       
0424A0 01 00 00 10 0081*  	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       68 32 04 67 
       02 00       
0424B2 01 00 00 10 0082*  	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       7D 32 04 68 
       02 00       
0424C4 01 00 00 10 0083*  	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       92 32 04 69 
       02 00       
0424D6 01 00 00 10 0084*  	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       A7 32 04 6A 
       02 00       
0424E8 01 00 00 10 0085*  	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       BC 32 04 6B 
       02 00       
0424FA 01 00 00 10 0086*  	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       D1 32 04 6C 
       02 00       
04250C 01 00 00 10 0087*  	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       E6 32 04 71 
       02 00       
04251E 01 00 00 10 0088*  	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       FB 32 04 72 
       02 00       
042530 01 00 00 10 0089*  	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       10 33 04 73 
       02 00       
042542 01 00 00 10 0090*  	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       25 33 04 74 
       02 00       
042554 01 00 00 10 0091*  	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       3A 33 04 75 
       02 00       
042566 01 00 00 10 0092*  	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       4F 33 04 76 
       02 00       
042578 01 00 00 10 0093*  	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       64 33 04 77 
       02 00       
04258A 01 00 00 10 0094*  	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       79 33 04 78 
       02 00       
04259C 01 00 00 10 0095*  	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       8E 33 04 79 
       02 00       
0425AE 01 00 00 10 0096*  	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       A3 33 04 7A 
       02 00       
0425C0 01 00 00 10 0097*  	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       B8 33 04 7B 
       02 00       
0425D2 01 00 00 10 0098*  	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       CD 33 04 81 
       02 00       
0425E4 01 00 00 10 0099*  	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       E2 33 04 82 
       02 00       
0425F6 01 00 00 10 0100*  	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       F7 33 04 83 
       02 00       
042608 01 00 00 10 0101*  	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       0C 34 04 84 
       02 00       
04261A 01 00 00 10 0102*  	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       21 34 04 85 
       02 00       
04262C 01 00 00 10 0103*  	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       36 34 04 86 
       02 00       
04263E 01 00 00 10 0104*  	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       4B 34 04 87 
       02 00       
042650 01 00 00 10 0105*  	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       60 34 04 88 
       02 00       
042662 01 00 00 10 0106*  	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       75 34 04 89 
       02 00       
042674 01 00 00 10 0107*  	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       8A 34 04 8A 
       02 00       
042686 01 00 00 10 0108*  	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       9F 34 04 8B 
       02 00       
042698 01 00 00 10 0109*  	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       B4 34 04 8C 
       02 00       
0426AA 01 00 00 10 0110*  	dl 1, 16, 16, 256, fn_dg_141, 653
       00 00 10 00 
       00 00 01 00 
       C9 34 04 8D 
       02 00       
0426BC 01 00 00 10 0111*  	dl 1, 16, 16, 256, fn_dg_142, 654
       00 00 10 00 
       00 00 01 00 
       DE 34 04 8E 
       02 00       
0426CE 01 00 00 10 0112*  	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       F3 34 04 91 
       02 00       
0426E0 01 00 00 10 0113*  	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       08 35 04 92 
       02 00       
0426F2 01 00 00 10 0114*  	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       1D 35 04 93 
       02 00       
042704 01 00 00 10 0115*  	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       32 35 04 94 
       02 00       
042716 01 00 00 10 0116*  	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       47 35 04 95 
       02 00       
042728 01 00 00 10 0117*  	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       5C 35 04 96 
       02 00       
04273A 01 00 00 10 0118*  	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       71 35 04 97 
       02 00       
04274C 01 00 00 10 0119*  	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       86 35 04 98 
       02 00       
04275E 01 00 00 10 0120*  	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       9B 35 04 99 
       02 00       
042770 01 00 00 10 0121*  	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       B0 35 04 9A 
       02 00       
042782 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       C5 35 04 9B 
       02 00       
042794 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       DA 35 04 9C 
       02 00       
0427A6 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_dg_157, 669
       00 00 10 00 
       00 00 01 00 
       EF 35 04 9D 
       02 00       
0427B8 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_dg_158, 670
       00 00 10 00 
       00 00 01 00 
       04 36 04 9E 
       02 00       
0427CA 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       19 36 04 A1 
       02 00       
0427DC 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       2E 36 04 A2 
       02 00       
0427EE 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       43 36 04 A3 
       02 00       
042800 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       58 36 04 A4 
       02 00       
042812 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       6D 36 04 A5 
       02 00       
042824 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       82 36 04 A6 
       02 00       
042836 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       97 36 04 A7 
       02 00       
042848 01 00 00 10 0133*  	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       AC 36 04 A8 
       02 00       
04285A 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       C1 36 04 A9 
       02 00       
04286C 01 00 00 10 0135*  	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       D6 36 04 AA 
       02 00       
04287E 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       EB 36 04 AB 
       02 00       
042890 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       00 37 04 AC 
       02 00       
0428A2 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       15 37 04 B1 
       02 00       
0428B4 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       2A 37 04 B2 
       02 00       
0428C6 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       3F 37 04 B3 
       02 00       
0428D8 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       54 37 04 B4 
       02 00       
0428EA 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       69 37 04 B5 
       02 00       
0428FC 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       7E 37 04 B6 
       02 00       
04290E 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       93 37 04 B7 
       02 00       
042920 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       A8 37 04 B8 
       02 00       
042932 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       BD 37 04 B9 
       02 00       
042944 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       D2 37 04 BA 
       02 00       
042956 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       E7 37 04 BB 
       02 00       
042968 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       FC 37 04 BC 
       02 00       
04297A 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       11 38 04 C1 
       02 00       
04298C 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       26 38 04 C2 
       02 00       
04299E 01 00 00 10 0152*  	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       3B 38 04 C3 
       02 00       
0429B0 01 00 00 10 0153*  	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       50 38 04 C4 
       02 00       
0429C2 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       65 38 04 C5 
       02 00       
0429D4 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       7A 38 04 C6 
       02 00       
0429E6 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       8F 38 04 C7 
       02 00       
0429F8 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       A4 38 04 C8 
       02 00       
042A0A 01 00 00 10 0158*  	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       B9 38 04 C9 
       02 00       
042A1C 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       CE 38 04 CA 
       02 00       
042A2E 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       E3 38 04 CB 
       02 00       
042A40 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       F8 38 04 CC 
       02 00       
042A52 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       0D 39 04 D1 
       02 00       
042A64 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       22 39 04 D2 
       02 00       
042A76 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       37 39 04 D3 
       02 00       
042A88 01 00 00 10 0165*  	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       4C 39 04 D4 
       02 00       
042A9A 01 00 00 10 0166*  	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       61 39 04 D5 
       02 00       
042AAC 01 00 00 10 0167*  	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       76 39 04 D6 
       02 00       
042ABE 01 00 00 10 0168*  	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       8B 39 04 D7 
       02 00       
042AD0 01 00 00 10 0169*  	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       A0 39 04 D8 
       02 00       
042AE2 01 00 00 10 0170*  	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       B5 39 04 D9 
       02 00       
042AF4 01 00 00 10 0171*  	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       CA 39 04 DA 
       02 00       
042B06 01 00 00 10 0172*  	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       DF 39 04 DB 
       02 00       
042B18 01 00 00 10 0173*  	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       F4 39 04 DC 
       02 00       
042B2A 01 00 00 10 0174*  	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       09 3A 04 E1 
       02 00       
042B3C 01 00 00 10 0175*  	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       1E 3A 04 E2 
       02 00       
042B4E 01 00 00 10 0176*  	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       33 3A 04 E3 
       02 00       
042B60 01 00 00 10 0177*  	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       48 3A 04 E4 
       02 00       
042B72 01 00 00 10 0178*  	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       5D 3A 04 E5 
       02 00       
042B84 01 00 00 10 0179*  	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       72 3A 04 E6 
       02 00       
042B96 01 00 00 10 0180*  	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       87 3A 04 E7 
       02 00       
042BA8 01 00 00 10 0181*  	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       9C 3A 04 E8 
       02 00       
042BBA 01 00 00 10 0182*  	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       B1 3A 04 E9 
       02 00       
042BCC 01 00 00 10 0183*  	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       C6 3A 04 EA 
       02 00       
042BDE 01 00 00 10 0184*  	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       DB 3A 04 EB 
       02 00       
042BF0 01 00 00 10 0185*  	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       F0 3A 04 EC 
       02 00       
042C02 01 00 00 10 0186*  	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       05 3B 04 F1 
       02 00       
042C14 01 00 00 10 0187*  	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       1A 3B 04 F2 
       02 00       
042C26 01 00 00 10 0188*  	dl 1, 16, 16, 256, fn_dg_243, 755
       00 00 10 00 
       00 00 01 00 
       2F 3B 04 F3 
       02 00       
042C38 01 00 00 10 0189*  	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       44 3B 04 F5 
       02 00       
042C4A 01 00 00 10 0190*  	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       59 3B 04 F6 
       02 00       
042C5C 01 00 00 10 0191*  	dl 1, 16, 16, 256, fn_dg_247, 759
       00 00 10 00 
       00 00 01 00 
       6E 3B 04 F7 
       02 00       
042C6E 01 00 00 10 0192*  	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       83 3B 04 F8 
       02 00       
042C80             0193*  
042C80             0194*  tiles_dg_files_list: ; filename:
042C80 74 69 6C 65 0195*  fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
042C95 74 69 6C 65 0196*  fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
042CAA 74 69 6C 65 0197*  fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
042CBF 74 69 6C 65 0198*  fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
042CD4 74 69 6C 65 0199*  fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
042CE9 74 69 6C 65 0200*  fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
042CFE 74 69 6C 65 0201*  fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
042D13 74 69 6C 65 0202*  fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
042D28 74 69 6C 65 0203*  fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
042D3D 74 69 6C 65 0204*  fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
042D52 74 69 6C 65 0205*  fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
042D67 74 69 6C 65 0206*  fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
042D7C 74 69 6C 65 0207*  fn_dg_012: db "tiles/dg/0/012.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 32 2E 72 
       67 62 61 32 
       00          
042D91 74 69 6C 65 0208*  fn_dg_013: db "tiles/dg/0/013.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 33 2E 72 
       67 62 61 32 
       00          
042DA6 74 69 6C 65 0209*  fn_dg_014: db "tiles/dg/0/014.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 34 2E 72 
       67 62 61 32 
       00          
042DBB 74 69 6C 65 0210*  fn_dg_015: db "tiles/dg/0/015.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 35 2E 72 
       67 62 61 32 
       00          
042DD0 74 69 6C 65 0211*  fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
042DE5 74 69 6C 65 0212*  fn_dg_025: db "tiles/dg/0/025.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 35 2E 72 
       67 62 61 32 
       00          
042DFA 74 69 6C 65 0213*  fn_dg_026: db "tiles/dg/0/026.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 36 2E 72 
       67 62 61 32 
       00          
042E0F 74 69 6C 65 0214*  fn_dg_027: db "tiles/dg/0/027.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 37 2E 72 
       67 62 61 32 
       00          
042E24 74 69 6C 65 0215*  fn_dg_028: db "tiles/dg/0/028.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 38 2E 72 
       67 62 61 32 
       00          
042E39 74 69 6C 65 0216*  fn_dg_029: db "tiles/dg/0/029.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 39 2E 72 
       67 62 61 32 
       00          
042E4E 74 69 6C 65 0217*  fn_dg_030: db "tiles/dg/0/030.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 30 2E 72 
       67 62 61 32 
       00          
042E63 74 69 6C 65 0218*  fn_dg_031: db "tiles/dg/0/031.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 31 2E 72 
       67 62 61 32 
       00          
042E78 74 69 6C 65 0219*  fn_dg_032: db "tiles/dg/0/032.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
042E8D 74 69 6C 65 0220*  fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
042EA2 74 69 6C 65 0221*  fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
042EB7 74 69 6C 65 0222*  fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
042ECC 74 69 6C 65 0223*  fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
042EE1 74 69 6C 65 0224*  fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
042EF6 74 69 6C 65 0225*  fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
042F0B 74 69 6C 65 0226*  fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
042F20 74 69 6C 65 0227*  fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
042F35 74 69 6C 65 0228*  fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
042F4A 74 69 6C 65 0229*  fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
042F5F 74 69 6C 65 0230*  fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
042F74 74 69 6C 65 0231*  fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
042F89 74 69 6C 65 0232*  fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
042F9E 74 69 6C 65 0233*  fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
042FB3 74 69 6C 65 0234*  fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
042FC8 74 69 6C 65 0235*  fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
042FDD 74 69 6C 65 0236*  fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
042FF2 74 69 6C 65 0237*  fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043007 74 69 6C 65 0238*  fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
04301C 74 69 6C 65 0239*  fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
043031 74 69 6C 65 0240*  fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
043046 74 69 6C 65 0241*  fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
04305B 74 69 6C 65 0242*  fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
043070 74 69 6C 65 0243*  fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
043085 74 69 6C 65 0244*  fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
04309A 74 69 6C 65 0245*  fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
0430AF 74 69 6C 65 0246*  fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0430C4 74 69 6C 65 0247*  fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
0430D9 74 69 6C 65 0248*  fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
0430EE 74 69 6C 65 0249*  fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
043103 74 69 6C 65 0250*  fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
043118 74 69 6C 65 0251*  fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
04312D 74 69 6C 65 0252*  fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
043142 74 69 6C 65 0253*  fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
043157 74 69 6C 65 0254*  fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
04316C 74 69 6C 65 0255*  fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
043181 74 69 6C 65 0256*  fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
043196 74 69 6C 65 0257*  fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0431AB 74 69 6C 65 0258*  fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
0431C0 74 69 6C 65 0259*  fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
0431D5 74 69 6C 65 0260*  fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
0431EA 74 69 6C 65 0261*  fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
0431FF 74 69 6C 65 0262*  fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
043214 74 69 6C 65 0263*  fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
043229 74 69 6C 65 0264*  fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
04323E 74 69 6C 65 0265*  fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
043253 74 69 6C 65 0266*  fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
043268 74 69 6C 65 0267*  fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
04327D 74 69 6C 65 0268*  fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
043292 74 69 6C 65 0269*  fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
0432A7 74 69 6C 65 0270*  fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
0432BC 74 69 6C 65 0271*  fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
0432D1 74 69 6C 65 0272*  fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
0432E6 74 69 6C 65 0273*  fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
0432FB 74 69 6C 65 0274*  fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
043310 74 69 6C 65 0275*  fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
043325 74 69 6C 65 0276*  fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
04333A 74 69 6C 65 0277*  fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
04334F 74 69 6C 65 0278*  fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
043364 74 69 6C 65 0279*  fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
043379 74 69 6C 65 0280*  fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04338E 74 69 6C 65 0281*  fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
0433A3 74 69 6C 65 0282*  fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
0433B8 74 69 6C 65 0283*  fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
0433CD 74 69 6C 65 0284*  fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
0433E2 74 69 6C 65 0285*  fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
0433F7 74 69 6C 65 0286*  fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
04340C 74 69 6C 65 0287*  fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
043421 74 69 6C 65 0288*  fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
043436 74 69 6C 65 0289*  fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
04344B 74 69 6C 65 0290*  fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
043460 74 69 6C 65 0291*  fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
043475 74 69 6C 65 0292*  fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
04348A 74 69 6C 65 0293*  fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
04349F 74 69 6C 65 0294*  fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
0434B4 74 69 6C 65 0295*  fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
0434C9 74 69 6C 65 0296*  fn_dg_141: db "tiles/dg/0/141.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 31 2E 72 
       67 62 61 32 
       00          
0434DE 74 69 6C 65 0297*  fn_dg_142: db "tiles/dg/0/142.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 32 2E 72 
       67 62 61 32 
       00          
0434F3 74 69 6C 65 0298*  fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
043508 74 69 6C 65 0299*  fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
04351D 74 69 6C 65 0300*  fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
043532 74 69 6C 65 0301*  fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
043547 74 69 6C 65 0302*  fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
04355C 74 69 6C 65 0303*  fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
043571 74 69 6C 65 0304*  fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
043586 74 69 6C 65 0305*  fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
04359B 74 69 6C 65 0306*  fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
0435B0 74 69 6C 65 0307*  fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
0435C5 74 69 6C 65 0308*  fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
0435DA 74 69 6C 65 0309*  fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
0435EF 74 69 6C 65 0310*  fn_dg_157: db "tiles/dg/0/157.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 37 2E 72 
       67 62 61 32 
       00          
043604 74 69 6C 65 0311*  fn_dg_158: db "tiles/dg/0/158.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 38 2E 72 
       67 62 61 32 
       00          
043619 74 69 6C 65 0312*  fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
04362E 74 69 6C 65 0313*  fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
043643 74 69 6C 65 0314*  fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
043658 74 69 6C 65 0315*  fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
04366D 74 69 6C 65 0316*  fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
043682 74 69 6C 65 0317*  fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
043697 74 69 6C 65 0318*  fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
0436AC 74 69 6C 65 0319*  fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0436C1 74 69 6C 65 0320*  fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
0436D6 74 69 6C 65 0321*  fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
0436EB 74 69 6C 65 0322*  fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
043700 74 69 6C 65 0323*  fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
043715 74 69 6C 65 0324*  fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
04372A 74 69 6C 65 0325*  fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
04373F 74 69 6C 65 0326*  fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
043754 74 69 6C 65 0327*  fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
043769 74 69 6C 65 0328*  fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
04377E 74 69 6C 65 0329*  fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
043793 74 69 6C 65 0330*  fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
0437A8 74 69 6C 65 0331*  fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
0437BD 74 69 6C 65 0332*  fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
0437D2 74 69 6C 65 0333*  fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
0437E7 74 69 6C 65 0334*  fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
0437FC 74 69 6C 65 0335*  fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
043811 74 69 6C 65 0336*  fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
043826 74 69 6C 65 0337*  fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
04383B 74 69 6C 65 0338*  fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
043850 74 69 6C 65 0339*  fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
043865 74 69 6C 65 0340*  fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
04387A 74 69 6C 65 0341*  fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
04388F 74 69 6C 65 0342*  fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
0438A4 74 69 6C 65 0343*  fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0438B9 74 69 6C 65 0344*  fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
0438CE 74 69 6C 65 0345*  fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
0438E3 74 69 6C 65 0346*  fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
0438F8 74 69 6C 65 0347*  fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
04390D 74 69 6C 65 0348*  fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
043922 74 69 6C 65 0349*  fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
043937 74 69 6C 65 0350*  fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
04394C 74 69 6C 65 0351*  fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
043961 74 69 6C 65 0352*  fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
043976 74 69 6C 65 0353*  fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
04398B 74 69 6C 65 0354*  fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
0439A0 74 69 6C 65 0355*  fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0439B5 74 69 6C 65 0356*  fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
0439CA 74 69 6C 65 0357*  fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
0439DF 74 69 6C 65 0358*  fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
0439F4 74 69 6C 65 0359*  fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
043A09 74 69 6C 65 0360*  fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
043A1E 74 69 6C 65 0361*  fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
043A33 74 69 6C 65 0362*  fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
043A48 74 69 6C 65 0363*  fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
043A5D 74 69 6C 65 0364*  fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
043A72 74 69 6C 65 0365*  fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
043A87 74 69 6C 65 0366*  fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
043A9C 74 69 6C 65 0367*  fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
043AB1 74 69 6C 65 0368*  fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
043AC6 74 69 6C 65 0369*  fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
043ADB 74 69 6C 65 0370*  fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
043AF0 74 69 6C 65 0371*  fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
043B05 74 69 6C 65 0372*  fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
043B1A 74 69 6C 65 0373*  fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
043B2F 74 69 6C 65 0374*  fn_dg_243: db "tiles/dg/0/243.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 33 2E 72 
       67 62 61 32 
       00          
043B44 74 69 6C 65 0375*  fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
043B59 74 69 6C 65 0376*  fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
043B6E 74 69 6C 65 0377*  fn_dg_247: db "tiles/dg/0/247.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 37 2E 72 
       67 62 61 32 
       00          
043B83 74 69 6C 65 0378*  fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
043B98             0048       ; include "images_tiles_xevious.inc"
043B98             0049       include "images_sprites.inc"
043B98             0001*  ; Generated by make_images.py
043B98             0002*  
043B98             0003*  sprites_num_images: equ 79
043B98             0004*  
043B98             0005*  ; buffer_ids:
043B98             0006*  BUF_CRATER: equ 256
043B98             0007*  BUF_EXPLOSION_A: equ 257
043B98             0008*  BUF_EXPLOSION_B: equ 258
043B98             0009*  BUF_EXPLOSION_C: equ 259
043B98             0010*  BUF_EXPLOSION_D: equ 260
043B98             0011*  BUF_EXPLOSION_E: equ 261
043B98             0012*  BUF_FIREBALL_A: equ 262
043B98             0013*  BUF_FIREBALL_B: equ 263
043B98             0014*  BUF_LASER_A: equ 264
043B98             0015*  BUF_LASER_B: equ 265
043B98             0016*  BUF_PAD: equ 266
043B98             0017*  BUF_SEEKER_000: equ 267
043B98             0018*  BUF_SEEKER_008: equ 268
043B98             0019*  BUF_SEEKER_016: equ 269
043B98             0020*  BUF_SEEKER_024: equ 270
043B98             0021*  BUF_SEEKER_032: equ 271
043B98             0022*  BUF_SEEKER_040: equ 272
043B98             0023*  BUF_SEEKER_048: equ 273
043B98             0024*  BUF_SEEKER_056: equ 274
043B98             0025*  BUF_SEEKER_064: equ 275
043B98             0026*  BUF_SEEKER_072: equ 276
043B98             0027*  BUF_SEEKER_080: equ 277
043B98             0028*  BUF_SEEKER_088: equ 278
043B98             0029*  BUF_SEEKER_096: equ 279
043B98             0030*  BUF_SEEKER_104: equ 280
043B98             0031*  BUF_SEEKER_112: equ 281
043B98             0032*  BUF_SEEKER_120: equ 282
043B98             0033*  BUF_SEEKER_128: equ 283
043B98             0034*  BUF_SEEKER_136: equ 284
043B98             0035*  BUF_SEEKER_144: equ 285
043B98             0036*  BUF_SEEKER_152: equ 286
043B98             0037*  BUF_SEEKER_160: equ 287
043B98             0038*  BUF_SEEKER_168: equ 288
043B98             0039*  BUF_SEEKER_176: equ 289
043B98             0040*  BUF_SEEKER_184: equ 290
043B98             0041*  BUF_SEEKER_192: equ 291
043B98             0042*  BUF_SEEKER_200: equ 292
043B98             0043*  BUF_SEEKER_208: equ 293
043B98             0044*  BUF_SEEKER_216: equ 294
043B98             0045*  BUF_SEEKER_224: equ 295
043B98             0046*  BUF_SEEKER_232: equ 296
043B98             0047*  BUF_SEEKER_240: equ 297
043B98             0048*  BUF_SEEKER_248: equ 298
043B98             0049*  BUF_SHIP_0L: equ 299
043B98             0050*  BUF_SHIP_1C: equ 300
043B98             0051*  BUF_SHIP_2R: equ 301
043B98             0052*  BUF_SHIP_SMALL: equ 302
043B98             0053*  BUF_TURRET_000: equ 303
043B98             0054*  BUF_TURRET_008: equ 304
043B98             0055*  BUF_TURRET_016: equ 305
043B98             0056*  BUF_TURRET_024: equ 306
043B98             0057*  BUF_TURRET_032: equ 307
043B98             0058*  BUF_TURRET_040: equ 308
043B98             0059*  BUF_TURRET_048: equ 309
043B98             0060*  BUF_TURRET_056: equ 310
043B98             0061*  BUF_TURRET_064: equ 311
043B98             0062*  BUF_TURRET_072: equ 312
043B98             0063*  BUF_TURRET_080: equ 313
043B98             0064*  BUF_TURRET_088: equ 314
043B98             0065*  BUF_TURRET_096: equ 315
043B98             0066*  BUF_TURRET_104: equ 316
043B98             0067*  BUF_TURRET_112: equ 317
043B98             0068*  BUF_TURRET_120: equ 318
043B98             0069*  BUF_TURRET_128: equ 319
043B98             0070*  BUF_TURRET_136: equ 320
043B98             0071*  BUF_TURRET_144: equ 321
043B98             0072*  BUF_TURRET_152: equ 322
043B98             0073*  BUF_TURRET_160: equ 323
043B98             0074*  BUF_TURRET_168: equ 324
043B98             0075*  BUF_TURRET_176: equ 325
043B98             0076*  BUF_TURRET_184: equ 326
043B98             0077*  BUF_TURRET_192: equ 327
043B98             0078*  BUF_TURRET_200: equ 328
043B98             0079*  BUF_TURRET_208: equ 329
043B98             0080*  BUF_TURRET_216: equ 330
043B98             0081*  BUF_TURRET_224: equ 331
043B98             0082*  BUF_TURRET_232: equ 332
043B98             0083*  BUF_TURRET_240: equ 333
043B98             0084*  BUF_TURRET_248: equ 334
043B98             0085*  
043B98             0086*  sprites_image_list: ; type; width; height; size; filename; bufferId:
043B98 01 00 00 10 0087*  	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       26 41 04 00 
       01 00       
043BAA 01 00 00 10 0088*  	dl 1, 16, 16, 256, fn_explosion_a, 257
       00 00 10 00 
       00 00 01 00 
       3B 41 04 01 
       01 00       
043BBC 01 00 00 10 0089*  	dl 1, 16, 16, 256, fn_explosion_b, 258
       00 00 10 00 
       00 00 01 00 
       55 41 04 02 
       01 00       
043BCE 01 00 00 10 0090*  	dl 1, 16, 16, 256, fn_explosion_c, 259
       00 00 10 00 
       00 00 01 00 
       6F 41 04 03 
       01 00       
043BE0 01 00 00 10 0091*  	dl 1, 16, 16, 256, fn_explosion_d, 260
       00 00 10 00 
       00 00 01 00 
       89 41 04 04 
       01 00       
043BF2 01 00 00 10 0092*  	dl 1, 16, 16, 256, fn_explosion_e, 261
       00 00 10 00 
       00 00 01 00 
       A3 41 04 05 
       01 00       
043C04 01 00 00 07 0093*  	dl 1, 7, 7, 49, fn_fireball_a, 262
       00 00 07 00 
       00 31 00 00 
       BD 41 04 06 
       01 00       
043C16 01 00 00 07 0094*  	dl 1, 7, 7, 49, fn_fireball_b, 263
       00 00 07 00 
       00 31 00 00 
       D6 41 04 07 
       01 00       
043C28 01 00 00 05 0095*  	dl 1, 5, 13, 65, fn_laser_a, 264
       00 00 0D 00 
       00 41 00 00 
       EF 41 04 08 
       01 00       
043C3A 01 00 00 05 0096*  	dl 1, 5, 13, 65, fn_laser_b, 265
       00 00 0D 00 
       00 41 00 00 
       05 42 04 09 
       01 00       
043C4C 01 00 00 10 0097*  	dl 1, 16, 16, 256, fn_pad, 266
       00 00 10 00 
       00 00 01 00 
       1B 42 04 0A 
       01 00       
043C5E 01 00 00 10 0098*  	dl 1, 16, 16, 256, fn_seeker_000, 267
       00 00 10 00 
       00 00 01 00 
       2D 42 04 0B 
       01 00       
043C70 01 00 00 10 0099*  	dl 1, 16, 16, 256, fn_seeker_008, 268
       00 00 10 00 
       00 00 01 00 
       46 42 04 0C 
       01 00       
043C82 01 00 00 10 0100*  	dl 1, 16, 16, 256, fn_seeker_016, 269
       00 00 10 00 
       00 00 01 00 
       5F 42 04 0D 
       01 00       
043C94 01 00 00 10 0101*  	dl 1, 16, 16, 256, fn_seeker_024, 270
       00 00 10 00 
       00 00 01 00 
       78 42 04 0E 
       01 00       
043CA6 01 00 00 10 0102*  	dl 1, 16, 16, 256, fn_seeker_032, 271
       00 00 10 00 
       00 00 01 00 
       91 42 04 0F 
       01 00       
043CB8 01 00 00 10 0103*  	dl 1, 16, 16, 256, fn_seeker_040, 272
       00 00 10 00 
       00 00 01 00 
       AA 42 04 10 
       01 00       
043CCA 01 00 00 10 0104*  	dl 1, 16, 16, 256, fn_seeker_048, 273
       00 00 10 00 
       00 00 01 00 
       C3 42 04 11 
       01 00       
043CDC 01 00 00 10 0105*  	dl 1, 16, 16, 256, fn_seeker_056, 274
       00 00 10 00 
       00 00 01 00 
       DC 42 04 12 
       01 00       
043CEE 01 00 00 10 0106*  	dl 1, 16, 16, 256, fn_seeker_064, 275
       00 00 10 00 
       00 00 01 00 
       F5 42 04 13 
       01 00       
043D00 01 00 00 10 0107*  	dl 1, 16, 16, 256, fn_seeker_072, 276
       00 00 10 00 
       00 00 01 00 
       0E 43 04 14 
       01 00       
043D12 01 00 00 10 0108*  	dl 1, 16, 16, 256, fn_seeker_080, 277
       00 00 10 00 
       00 00 01 00 
       27 43 04 15 
       01 00       
043D24 01 00 00 10 0109*  	dl 1, 16, 16, 256, fn_seeker_088, 278
       00 00 10 00 
       00 00 01 00 
       40 43 04 16 
       01 00       
043D36 01 00 00 10 0110*  	dl 1, 16, 16, 256, fn_seeker_096, 279
       00 00 10 00 
       00 00 01 00 
       59 43 04 17 
       01 00       
043D48 01 00 00 10 0111*  	dl 1, 16, 16, 256, fn_seeker_104, 280
       00 00 10 00 
       00 00 01 00 
       72 43 04 18 
       01 00       
043D5A 01 00 00 10 0112*  	dl 1, 16, 16, 256, fn_seeker_112, 281
       00 00 10 00 
       00 00 01 00 
       8B 43 04 19 
       01 00       
043D6C 01 00 00 10 0113*  	dl 1, 16, 16, 256, fn_seeker_120, 282
       00 00 10 00 
       00 00 01 00 
       A4 43 04 1A 
       01 00       
043D7E 01 00 00 10 0114*  	dl 1, 16, 16, 256, fn_seeker_128, 283
       00 00 10 00 
       00 00 01 00 
       BD 43 04 1B 
       01 00       
043D90 01 00 00 10 0115*  	dl 1, 16, 16, 256, fn_seeker_136, 284
       00 00 10 00 
       00 00 01 00 
       D6 43 04 1C 
       01 00       
043DA2 01 00 00 10 0116*  	dl 1, 16, 16, 256, fn_seeker_144, 285
       00 00 10 00 
       00 00 01 00 
       EF 43 04 1D 
       01 00       
043DB4 01 00 00 10 0117*  	dl 1, 16, 16, 256, fn_seeker_152, 286
       00 00 10 00 
       00 00 01 00 
       08 44 04 1E 
       01 00       
043DC6 01 00 00 10 0118*  	dl 1, 16, 16, 256, fn_seeker_160, 287
       00 00 10 00 
       00 00 01 00 
       21 44 04 1F 
       01 00       
043DD8 01 00 00 10 0119*  	dl 1, 16, 16, 256, fn_seeker_168, 288
       00 00 10 00 
       00 00 01 00 
       3A 44 04 20 
       01 00       
043DEA 01 00 00 10 0120*  	dl 1, 16, 16, 256, fn_seeker_176, 289
       00 00 10 00 
       00 00 01 00 
       53 44 04 21 
       01 00       
043DFC 01 00 00 10 0121*  	dl 1, 16, 16, 256, fn_seeker_184, 290
       00 00 10 00 
       00 00 01 00 
       6C 44 04 22 
       01 00       
043E0E 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_seeker_192, 291
       00 00 10 00 
       00 00 01 00 
       85 44 04 23 
       01 00       
043E20 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_seeker_200, 292
       00 00 10 00 
       00 00 01 00 
       9E 44 04 24 
       01 00       
043E32 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_seeker_208, 293
       00 00 10 00 
       00 00 01 00 
       B7 44 04 25 
       01 00       
043E44 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_seeker_216, 294
       00 00 10 00 
       00 00 01 00 
       D0 44 04 26 
       01 00       
043E56 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_seeker_224, 295
       00 00 10 00 
       00 00 01 00 
       E9 44 04 27 
       01 00       
043E68 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_seeker_232, 296
       00 00 10 00 
       00 00 01 00 
       02 45 04 28 
       01 00       
043E7A 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_seeker_240, 297
       00 00 10 00 
       00 00 01 00 
       1B 45 04 29 
       01 00       
043E8C 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_seeker_248, 298
       00 00 10 00 
       00 00 01 00 
       34 45 04 2A 
       01 00       
043E9E 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_ship_0l, 299
       00 00 10 00 
       00 00 01 00 
       4D 45 04 2B 
       01 00       
043EB0 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_ship_1c, 300
       00 00 10 00 
       00 00 01 00 
       63 45 04 2C 
       01 00       
043EC2 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_ship_2r, 301
       00 00 10 00 
       00 00 01 00 
       79 45 04 2D 
       01 00       
043ED4 01 00 00 08 0133*  	dl 1, 8, 8, 64, fn_ship_small, 302
       00 00 08 00 
       00 40 00 00 
       8F 45 04 2E 
       01 00       
043EE6 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_turret_000, 303
       00 00 10 00 
       00 00 01 00 
       A8 45 04 2F 
       01 00       
043EF8 01 00 00 10 0135*  	dl 1, 16, 16, 256, fn_turret_008, 304
       00 00 10 00 
       00 00 01 00 
       C1 45 04 30 
       01 00       
043F0A 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_turret_016, 305
       00 00 10 00 
       00 00 01 00 
       DA 45 04 31 
       01 00       
043F1C 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_turret_024, 306
       00 00 10 00 
       00 00 01 00 
       F3 45 04 32 
       01 00       
043F2E 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_turret_032, 307
       00 00 10 00 
       00 00 01 00 
       0C 46 04 33 
       01 00       
043F40 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_turret_040, 308
       00 00 10 00 
       00 00 01 00 
       25 46 04 34 
       01 00       
043F52 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_turret_048, 309
       00 00 10 00 
       00 00 01 00 
       3E 46 04 35 
       01 00       
043F64 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_turret_056, 310
       00 00 10 00 
       00 00 01 00 
       57 46 04 36 
       01 00       
043F76 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_turret_064, 311
       00 00 10 00 
       00 00 01 00 
       70 46 04 37 
       01 00       
043F88 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_turret_072, 312
       00 00 10 00 
       00 00 01 00 
       89 46 04 38 
       01 00       
043F9A 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_turret_080, 313
       00 00 10 00 
       00 00 01 00 
       A2 46 04 39 
       01 00       
043FAC 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_turret_088, 314
       00 00 10 00 
       00 00 01 00 
       BB 46 04 3A 
       01 00       
043FBE 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_turret_096, 315
       00 00 10 00 
       00 00 01 00 
       D4 46 04 3B 
       01 00       
043FD0 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_turret_104, 316
       00 00 10 00 
       00 00 01 00 
       ED 46 04 3C 
       01 00       
043FE2 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_turret_112, 317
       00 00 10 00 
       00 00 01 00 
       06 47 04 3D 
       01 00       
043FF4 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_turret_120, 318
       00 00 10 00 
       00 00 01 00 
       1F 47 04 3E 
       01 00       
044006 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_turret_128, 319
       00 00 10 00 
       00 00 01 00 
       38 47 04 3F 
       01 00       
044018 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_turret_136, 320
       00 00 10 00 
       00 00 01 00 
       51 47 04 40 
       01 00       
04402A 01 00 00 10 0152*  	dl 1, 16, 16, 256, fn_turret_144, 321
       00 00 10 00 
       00 00 01 00 
       6A 47 04 41 
       01 00       
04403C 01 00 00 10 0153*  	dl 1, 16, 16, 256, fn_turret_152, 322
       00 00 10 00 
       00 00 01 00 
       83 47 04 42 
       01 00       
04404E 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_turret_160, 323
       00 00 10 00 
       00 00 01 00 
       9C 47 04 43 
       01 00       
044060 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_turret_168, 324
       00 00 10 00 
       00 00 01 00 
       B5 47 04 44 
       01 00       
044072 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_turret_176, 325
       00 00 10 00 
       00 00 01 00 
       CE 47 04 45 
       01 00       
044084 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_turret_184, 326
       00 00 10 00 
       00 00 01 00 
       E7 47 04 46 
       01 00       
044096 01 00 00 10 0158*  	dl 1, 16, 16, 256, fn_turret_192, 327
       00 00 10 00 
       00 00 01 00 
       00 48 04 47 
       01 00       
0440A8 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_turret_200, 328
       00 00 10 00 
       00 00 01 00 
       19 48 04 48 
       01 00       
0440BA 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_turret_208, 329
       00 00 10 00 
       00 00 01 00 
       32 48 04 49 
       01 00       
0440CC 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_turret_216, 330
       00 00 10 00 
       00 00 01 00 
       4B 48 04 4A 
       01 00       
0440DE 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_turret_224, 331
       00 00 10 00 
       00 00 01 00 
       64 48 04 4B 
       01 00       
0440F0 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_turret_232, 332
       00 00 10 00 
       00 00 01 00 
       7D 48 04 4C 
       01 00       
044102 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_turret_240, 333
       00 00 10 00 
       00 00 01 00 
       96 48 04 4D 
       01 00       
044114 01 00 00 10 0165*  	dl 1, 16, 16, 256, fn_turret_248, 334
       00 00 10 00 
       00 00 01 00 
       AF 48 04 4E 
       01 00       
044126             0166*  
044126             0167*  ; files_list: ; filename:
044126 73 70 72 69 0168*  fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
04413B 73 70 72 69 0169*  fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
044155 73 70 72 69 0170*  fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
04416F 73 70 72 69 0171*  fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
044189 73 70 72 69 0172*  fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
0441A3 73 70 72 69 0173*  fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
0441BD 73 70 72 69 0174*  fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
0441D6 73 70 72 69 0175*  fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
0441EF 73 70 72 69 0176*  fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
044205 73 70 72 69 0177*  fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
04421B 73 70 72 69 0178*  fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
04422D 73 70 72 69 0179*  fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044246 73 70 72 69 0180*  fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
04425F 73 70 72 69 0181*  fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044278 73 70 72 69 0182*  fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044291 73 70 72 69 0183*  fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0442AA 73 70 72 69 0184*  fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0442C3 73 70 72 69 0185*  fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0442DC 73 70 72 69 0186*  fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0442F5 73 70 72 69 0187*  fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
04430E 73 70 72 69 0188*  fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044327 73 70 72 69 0189*  fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044340 73 70 72 69 0190*  fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044359 73 70 72 69 0191*  fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044372 73 70 72 69 0192*  fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04438B 73 70 72 69 0193*  fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0443A4 73 70 72 69 0194*  fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0443BD 73 70 72 69 0195*  fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0443D6 73 70 72 69 0196*  fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0443EF 73 70 72 69 0197*  fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044408 73 70 72 69 0198*  fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
044421 73 70 72 69 0199*  fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04443A 73 70 72 69 0200*  fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044453 73 70 72 69 0201*  fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
04446C 73 70 72 69 0202*  fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
044485 73 70 72 69 0203*  fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
04449E 73 70 72 69 0204*  fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0444B7 73 70 72 69 0205*  fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0444D0 73 70 72 69 0206*  fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0444E9 73 70 72 69 0207*  fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
044502 73 70 72 69 0208*  fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
04451B 73 70 72 69 0209*  fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
044534 73 70 72 69 0210*  fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
04454D 73 70 72 69 0211*  fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
044563 73 70 72 69 0212*  fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
044579 73 70 72 69 0213*  fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
04458F 73 70 72 69 0214*  fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
0445A8 73 70 72 69 0215*  fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0445C1 73 70 72 69 0216*  fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0445DA 73 70 72 69 0217*  fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0445F3 73 70 72 69 0218*  fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
04460C 73 70 72 69 0219*  fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044625 73 70 72 69 0220*  fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
04463E 73 70 72 69 0221*  fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044657 73 70 72 69 0222*  fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044670 73 70 72 69 0223*  fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044689 73 70 72 69 0224*  fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0446A2 73 70 72 69 0225*  fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0446BB 73 70 72 69 0226*  fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0446D4 73 70 72 69 0227*  fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
0446ED 73 70 72 69 0228*  fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044706 73 70 72 69 0229*  fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
04471F 73 70 72 69 0230*  fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044738 73 70 72 69 0231*  fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
044751 73 70 72 69 0232*  fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
04476A 73 70 72 69 0233*  fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044783 73 70 72 69 0234*  fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
04479C 73 70 72 69 0235*  fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0447B5 73 70 72 69 0236*  fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0447CE 73 70 72 69 0237*  fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0447E7 73 70 72 69 0238*  fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
044800 73 70 72 69 0239*  fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
044819 73 70 72 69 0240*  fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044832 73 70 72 69 0241*  fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
04484B 73 70 72 69 0242*  fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044864 73 70 72 69 0243*  fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
04487D 73 70 72 69 0244*  fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044896 73 70 72 69 0245*  fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0448AF 73 70 72 69 0246*  fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0448C8             0050       include "images_ui.inc"
0448C8             0001*  ; Generated by make_images.py
0448C8             0002*  
0448C8             0003*  ui_num_images: equ 4
0448C8             0004*  
0448C8             0005*  ; buffer_ids:
0448C8             0006*  BUF_BEZEL_L: equ 0
0448C8             0007*  BUF_BEZEL_R: equ 1
0448C8             0008*  BUF_SPLASH_BG: equ 2
0448C8             0009*  BUF_SPLASH_LOGO: equ 3
0448C8             0010*  
0448C8             0011*  ui_image_list: ; type; width; height; size; filename; bufferId:
0448C8 01 00 00 80 0012*  	dl 1, 128, 384, 49152, fn_bezel_l, 0
       00 00 80 01 
       00 00 C0 00 
       10 49 04 00 
       00 00       
0448DA 01 00 00 80 0013*  	dl 1, 128, 384, 49152, fn_bezel_r, 1
       00 00 80 01 
       00 00 C0 00 
       21 49 04 01 
       00 00       
0448EC 01 00 00 40 0014*  	dl 1, 320, 240, 76800, fn_splash_bg, 2
       01 00 F0 00 
       00 00 2C 01 
       32 49 04 02 
       00 00       
0448FE 01 00 00 40 0015*  	dl 1, 320, 240, 76800, fn_splash_logo, 3
       01 00 F0 00 
       00 00 2C 01 
       45 49 04 03 
       00 00       
044910             0016*  
044910             0017*  ; files_list: ; filename:
044910 75 69 2F 62 0018*  fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
044921 75 69 2F 62 0019*  fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
044932 75 69 2F 73 0020*  fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
044945 75 69 2F 73 0021*  fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
04495A             0051       include "laser.inc"
04495A             0001*  ; ##### LASER SPRITE PARAMETERS #####
04495A             0002*  ; uses the same offsets from its table base as the main sprite table:
04495A             0003*  laser_start_variables: ; label marking beginning of table
04495A 11          0004*  laser_id:               db table_max_records+1
04495B 00          0005*  laser_type:             db 0x00 ; 1 bytes currently not used
04495C 08 01 00    0006*  laser_base_bufferId:    dl BUF_LASER_A ; 3 bytes bitmap bufferId
04495F 00 00 00    0007*  laser_move_program:     dl 0x000000 ; 3 bytes not currently used
044962 00          0008*  laser_collisions:       db 0x00 ; 1 bytes uses sprite_alive and sprite_just_died flags
044963 00          0009*  laser_dim_x:            db 0x00 ; 1 bytes sprite width in pixels
044964 00          0010*  laser_dim_y:            db 0x00 ; 1 bytes sprite height in pixels
044965 00 00 00    0011*  laser_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
044968 00 00 00    0012*  laser_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
04496B 00 00 00    0013*  laser_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04496E 00 F8 FF    0014*  laser_yvel:             dl 0xFFF800 ; 3 bytes y-component velocity, 16.8 fixed, pixels
044971 00 00 00    0015*  laser_vel:              dl 0x000000 ; 3 bytes not currently used
044974 00 00 00    0016*  laser_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
044977 00 00 00    0017*  laser_orientation:      dl 0x000000 ; 3 bytes not currently used
04497A 00          0018*  laser_animation:        db 0x00 ; 1 bytes current sprite animation frame
04497B 00          0019*  laser_animation_timer:  db 0x00 ; 1 bytes decremented every frame, when zero, advance animation
04497C 00          0020*  laser_move_timer:       db 0x00 ; 1 bytes not currently used
04497D 00          0021*  laser_move_step:        db 0x00 ; 1 bytes not currently used
04497E 00          0022*  laser_points:           db 0x00 ; 1 bytes not currently used
04497F 00          0023*  laser_shield_damage:    db 0x00 ; 1 bytes not currently used
044980             0024*  laser_end_variables: ; for when we want to traverse this table in reverse
044980             0025*  laser_speed: equ -6*256 ; 6 pixels per frame 16.8 fixed
044980             0026*  laser_animation_timer_reset: equ 2 ; animate every two frames
044980             0027*  
044980             0028*  laser_control:
044980             0029*  ; point to laser sprite variables
044980 FD 21 5A 49 0030*      ld iy,laser_start_variables
       04          
044985 FD 22 05 53 0031*      ld (table_pointer),iy
       04          
04498A             0032*  ; did laser just die?
04498A FD CB 1D 7E 0033*      bit sprite_just_died,(iy+sprite_collisions)
04498E C2 17 4A 04 0034*      jp nz,kill_laser
044992             0035*  ; select laser sprite
044992 3A 5A 49 04 0036*      ld a,(laser_id)
044996 CD 6E 19 04 0037*      call vdu_sprite_select
04499A             0038*  ; update laser position
04499A CD C4 53 04 0039*      call move_sprite
04499E             0040*  ; are we at top of screen?
04499E 3A 09 53 04 0041*      ld a,(sprite_screen_edge)
0449A2 E6 08       0042*      and collide_top
0449A4 C2 17 4A 04 0043*      jp nz,kill_laser
0449A8             0044*  ; check animation timer
0449A8 FD 35 23    0045*      dec (iy+sprite_animation_timer)
0449AB C2 B8 49 04 0046*      jp nz,@F
0449AF 3E 02       0047*      ld a,laser_animation_timer_reset
0449B1 FD 77 23    0048*      ld (iy+sprite_animation_timer),a
0449B4 CD B5 19 04 0049*      call vdu_sprite_next_frame
0449B8             0050*  @@: ; draw the sprite
0449B8 FD 07 01    0051*      ld bc,(iy+sprite_x)
0449BB FD 17 04    0052*      ld de,(iy+sprite_y)
0449BE CD 3A 1A 04 0053*      call vdu_sprite_move_abs168
0449C2             0054*  ; return to caller
0449C2 C9          0055*      ret
0449C3             0056*  ; end laser_control
0449C3             0057*  
0449C3             0058*  fire_laser:
0449C3             0059*  ; point to laser sprite variables
0449C3 FD 21 5A 49 0060*      ld iy,laser_start_variables
       04          
0449C8 FD 22 05 53 0061*      ld (table_pointer),iy
       04          
0449CD             0062*  ; is laser already active?
0449CD FD CB 1D 76 0063*      bit sprite_alive,(iy+sprite_collisions)
0449D1 C0          0064*      ret nz ; laser already active
0449D2             0065*  ; otherwise,FIRE ZEE LASER!!1111
0449D2             0066*  ; set laser status to active
0449D2 FD CB 1D F6 0067*      set sprite_alive,(iy+sprite_collisions)
0449D6             0068*  ; initialize laser sprite parameters
0449D6             0069*  ; x-coordinate
0449D6 DD 21 17 4F 0070*      ld ix,player_start_variables
       04          
0449DB DD 27 01    0071*      ld hl,(ix+sprite_x)
0449DE 11 00 05 00 0072*      ld de,5*256 ; horizontal center with player sprite
0449E2 19          0073*      add hl,de
0449E3 FD 2F 01    0074*      ld (iy+sprite_x),hl
0449E6             0075*  ; y-coordinate
0449E6 DD 27 04    0076*      ld hl,(ix+sprite_y)
0449E9 11 00 FA FF 0077*      ld de,-6*256 ; set laser y a few pixels above player
0449ED FD 2F 04    0078*      ld (iy+sprite_y),hl
0449F0             0079*  ; set laser velocity
0449F0 21 00 FA FF 0080*      ld hl,laser_speed
0449F4 FD 2F 0A    0081*      ld (iy+sprite_yvel),hl
0449F7             0082*  ; set laser animation frame and timer
0449F7 AF          0083*      xor a ; first frame
0449F8 FD 77 22    0084*      ld (iy+sprite_animation),a
0449FB 3E 02       0085*      ld a,laser_animation_timer_reset
0449FD FD 77 23    0086*      ld (iy+sprite_animation_timer),a
044A00             0087*  ; plot the sprite and make it visible
044A00 3A 5A 49 04 0088*      ld a,(laser_id)
044A04 CD 6E 19 04 0089*      call vdu_sprite_select
044A08 FD 07 01    0090*      ld bc,(iy+sprite_x)
044A0B FD 17 04    0091*      ld de,(iy+sprite_y)
044A0E CD 3A 1A 04 0092*      call vdu_sprite_move_abs168
044A12 CD E4 19 04 0093*      call vdu_sprite_show
044A16             0094*  ; return to caller
044A16 C9          0095*      ret
044A17             0096*  ; end fire_laser
044A17             0097*  
044A17             0098*  kill_laser:
044A17             0099*  ; update status to inactive
044A17 AF          0100*      xor a ; zero out a
044A18 32 62 49 04 0101*      ld (laser_collisions),a
044A1C             0102*  ; hide the sprite
044A1C 3A 5A 49 04 0103*      ld a,(laser_id)
044A20 CD 6E 19 04 0104*      call vdu_sprite_select
044A24 CD F2 19 04 0105*      call vdu_sprite_hide
044A28 C9          0106*      ret
044A29             0107*  ; end kill_laser
044A29             0052       include "levels.inc"
044A29             0001*  ; tileset indices
044A29             0002*  tiles_dg: equ 0
044A29             0003*  ; tiles_xevious: equ 1
044A29 00 00 00    0004*  tileset_ptr_idx: dl 0
044A2C             0005*  tileset_ptrs:
044A2C             0006*      ; dl tiles_xevious_levels
044A2C 00 4B 04    0007*      dl tileset_00_levels
044A2F 00 00 00    0008*  tileset_ptrs_end: dl 0 ; list terminator
044A32             0009*  
044A32             0010*  ; get a pointer to the current tileset
044A32             0011*  ; inputs: tileset_ptr_idx
044A32             0012*  ; returns: ix = pointer to tileset levels lut
044A32             0013*  get_tileset_ptr:
044A32 3A 29 4A 04 0014*      ld a,(tileset_ptr_idx)
044A36 57          0015*      ld d,a ; d = tileset index
044A37 1E 03       0016*      ld e,3 ; three bytes per index record
044A39 ED 5C       0017*      mlt de ; offset into tileset_ptrs lut
044A3B DD 21 2C 4A 0018*      ld ix,tileset_ptrs
       04          
044A40 DD 19       0019*      add ix,de ; ix = pointer to tileset_ptrs record
044A42 C9          0020*      ret
044A43             0021*  ; end get_tileset_ptr
044A43             0022*  
044A43             0023*  ; intialize a tileset
044A43             0024*  ; inputs: a = index into tileset_ptrs
044A43             0025*  init_tileset:
044A43 32 29 4A 04 0026*      ld (tileset_ptr_idx),a ; store new tileset index
044A47 CD 32 4A 04 0027*      call get_tileset_ptr ; ix = pointer to tileset_ptrs record
044A4B DD 37 00    0028*      ld ix,(ix) ; ix = pointer to tileset levels lut
044A4E DD 7E FF    0029*      ld a,(ix-1) ; number of levels in the tileset
044A51 32 81 4A 04 0030*      ld (num_levels),a
044A55 AF          0031*      xor a ; reset current level to zero
044A56 32 80 4A 04 0032*      ld (cur_level),a
044A5A C3 B2 4A 04 0033*      jp init_level
044A5E             0034*  ; end init_tileset
044A5E             0035*  
044A5E             0036*  next_tileset:
044A5E 21 29 4A 04 0037*      ld hl,tileset_ptr_idx
044A62 34          0038*      inc (hl) ; bump to next index
044A63 CD 32 4A 04 0039*      call get_tileset_ptr ; ix = pointer to tileset_ptrs record
044A67 DD 27 00    0040*      ld hl,(ix) ; ix = pointer to tileset levels lut
044A6A             0041*      sign_hlu ; check for list terminator (0)
044A6A 19          0001*M     add hl,de
044A6B B7          0002*M     or a
044A6C ED 52       0003*M     sbc hl,de
044A6E C2 7C 4A 04 0042*      jp nz,@F ; not end of list
044A72 3E FF       0043*      ld a,-1 ; will wrap around to zero on the next iteration
044A74 32 29 4A 04 0044*      ld (tileset_ptr_idx),a
044A78 C3 5E 4A 04 0045*      jp next_tileset ; try again
044A7C             0046*  @@:
044A7C C3 43 4A 04 0047*      jp init_tileset
044A80             0048*  ; end next_tileset
044A80             0049*  
044A80 00          0050*  cur_level: db 0
044A81 00          0051*  num_levels: db 0
044A82             0052*  
044A82             0053*  ; get a pointer to the current level lookup record
044A82             0054*  ; inputs: tileset_ptr_idx, cur_level
044A82             0055*  ; returns: ix = pointer to level definition
044A82             0056*  get_level_ptr:
044A82 CD 32 4A 04 0057*      call get_tileset_ptr
044A86 DD 37 00    0058*      ld ix,(ix) ; ix = pointer to tileset levels lut
044A89 3A 80 4A 04 0059*      ld a,(cur_level)
044A8D 57          0060*      ld d,a ; d = level index
044A8E 1E 03       0061*      ld e,3 ; three bytes per level record
044A90 ED 5C       0062*      mlt de ; offset into tileset levels lut
044A92 DD 19       0063*      add ix,de ; ix = pointer to level record
044A94 C9          0064*      ret
044A95             0065*  ; end get_level_ptr
044A95             0066*  
044A95             0067*  ; advance to the next level in the current tileset
044A95             0068*  ; inputs: tileset_ptr_idx, cur_level
044A95             0069*  next_level:
044A95 21 80 4A 04 0070*      ld hl,cur_level
044A99 34          0071*      inc (hl) ; bump to next level
044A9A CD 82 4A 04 0072*      call get_level_ptr ; ix points to current level lookup record
044A9E DD 27 00    0073*      ld hl,(ix) ; hl = pointer to next level lookup record
044AA1             0074*      sign_hlu ; check for list terminator (0)
044AA1 19          0001*M     add hl,de
044AA2 B7          0002*M     or a
044AA3 ED 52       0003*M     sbc hl,de
044AA5 C2 B2 4A 04 0075*      jp nz,@F ; not end of list
044AA9 AF          0076*      xor a ; reset level to zero
044AAA 32 80 4A 04 0077*      ld (cur_level),a
044AAE C3 5E 4A 04 0078*      jp next_tileset ; try next tileset
044AB2             0079*  @@: ; fall through to init_level
044AB2             0080*  ; end next_level
044AB2             0081*  
044AB2             0082*  ; inputs: ix pointed to tileset level definition
044AB2             0083*  init_level:
044AB2 CD 82 4A 04 0084*      call get_level_ptr ; ix points to level lookup record
044AB6 DD 37 00    0085*      ld ix,(ix) ; ix points to level definition
044AB9             0086*  ; set tiles_cols
044AB9 DD 7E 00    0087*      ld a,(ix+0)
044ABC 32 0B 56 04 0088*      ld (tiles_cols),a
044AC0             0089*  ; set tiles_row counter
044AC0 DD 7E 01    0090*      ld a,(ix+1)
044AC3 32 08 56 04 0091*      ld (tiles_row),a
044AC7             0092*  ; set cur_baseBufferId
044AC7 DD 27 04    0093*      ld hl,(ix+4)
044ACA 22 0C 56 04 0094*      ld (cur_baseBufferId),hl
044ACE             0095*  ; set tiles_row_defs
044ACE ED 32 07    0096*      lea ix,ix+7 ; ix points to definition of first tile of first row
044AD1 DD 22 05 56 0097*      ld (tiles_row_defs),ix
       04          
044AD6             0098*  
044AD6             0099*  ; print level
044AD6             0100*  level_x: equ 0
044AD6             0101*  level_y: equ 0
044AD6 0E 00       0102*      ld c,level_x
044AD8 06 00       0103*      ld b,level_y
044ADA CD 70 14 04 0104*      call vdu_move_cursor
044ADE CD 70 00 04 0105*      call printInline
044AE2 4C 65 76 65 0106*      asciz "Level: "
       6C 3A 20 00 
044AEA 3A 80 4A 04 0107*      ld a,(cur_level)
044AEE CD BA 00 04 0108*      call printHexA
044AF2 CD 8C 00 04 0109*      call printNewLine
044AF6 2A 0C 56 04 0110*      ld hl,(cur_baseBufferId)
044AFA CD 76 01 04 0111*      call printDec
044AFE             0112*  
044AFE             0113*  ; ; DEBUG
044AFE             0114*  ;     call dumpRegistersHex
044AFE             0115*  ;     call waitKeypress
044AFE             0116*  ; ; END DEBUG
044AFE             0117*  
044AFE             0118*  ; ; draw initial background tiles
044AFE             0119*  ; ; TODO: make this a stars background
044AFE             0120*  ;     ld hl,BUF_STATION_BG_00
044AFE             0121*  ;     call vdu_buff_select
044AFE             0122*  ;     ld bc,0
044AFE             0123*  ;     ld de,field_top
044AFE             0124*  ;     call vdu_plot_bmp
044AFE             0125*  
044AFE             0126*  ;     ld hl,BUF_STATION_BG_01
044AFE             0127*  ;     call vdu_buff_select
044AFE             0128*  ;     ld bc,0
044AFE             0129*  ;     ld de,field_top+256
044AFE             0130*  ;     call vdu_plot_bmp
044AFE             0131*  
044AFE C9          0132*      ret
044AFF             0133*  ; end init_level
044AFF             0053       include "levels_tileset_0.inc"
044AFF             0001*  ; Generated from tiles/dg/dg0_00.tmx
044AFF             0002*  
044AFF 01          0003*  tileset_00_num_levels: db 1
044B00             0004*  
044B00             0005*  tileset_00_levels:
044B00 06 4B 04    0006*  	dl tileset_00_level_00
044B03 00 00 00    0007*  	dl 0 ; list terminator
044B06             0008*  
044B06             0009*  tileset_00_level_00: ; Level 0
044B06 10          0010*  	db 16          ; num cols
044B07 40 00 00    0011*  	dl 64          ; num rows
044B0A 00 02 00    0012*  	dl 512 ; base bufferId
044B0D 6C 6C 6C 6C 0013*  	db 108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108
       6C 6C 6C 6C 
       6C 6C 6C 6C 
       6C 6C 6C 6C 
044B1D 00 00 00 00 0014*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044B2D 00 00 00 00 0015*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044B3D 00 00 00 00 0016*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044B4D 00 00 00 00 0017*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044B5D 00 00 00 00 0018*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044B6D 00 00 00 00 0019*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044B7D 00 00 00 00 0020*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044B8D 00 00 00 00 0021*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044B9D 00 00 00 00 0022*  	db 000,000,000,000,000,000,000,001,000,000,000,000,000,000,000,000
       00 00 00 01 
       00 00 00 00 
       00 00 00 00 
044BAD 00 00 00 00 0023*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044BBD 00 00 00 00 0024*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044BCD 00 00 00 00 0025*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044BDD 00 00 00 00 0026*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044BED 00 00 00 00 0027*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044BFD 00 00 00 00 0028*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C0D 00 00 00 00 0029*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C1D 00 00 00 00 0030*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C2D 00 00 00 00 0031*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C3D 00 00 00 00 0032*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C4D 00 00 00 00 0033*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C5D 00 00 00 00 0034*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C6D 00 00 00 00 0035*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C7D 00 00 00 00 0036*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C8D 00 00 00 00 0037*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044C9D 00 00 00 00 0038*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CAD 00 00 00 00 0039*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CBD 00 00 00 00 0040*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CCD 00 00 00 00 0041*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CDD 00 00 00 00 0042*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CED 00 00 00 00 0043*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044CFD 00 00 00 00 0044*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D0D 00 00 00 00 0045*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D1D 00 00 00 00 0046*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D2D 00 00 00 00 0047*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D3D 00 00 00 00 0048*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D4D 00 00 00 00 0049*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D5D 00 00 00 00 0050*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D6D 00 00 00 00 0051*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D7D 00 00 00 00 0052*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D8D 00 00 00 00 0053*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044D9D 00 00 00 00 0054*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044DAD 00 00 00 00 0055*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044DBD 00 00 00 00 0056*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044DCD 00 00 00 00 0057*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044DDD 00 00 00 00 0058*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044DED 00 00 00 00 0059*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044DFD 00 00 00 00 0060*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E0D 00 00 00 00 0061*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E1D 00 00 00 00 0062*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E2D 00 00 00 00 0063*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E3D 00 00 00 00 0064*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E4D 00 00 00 00 0065*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E5D 00 00 00 00 0066*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E6D 00 00 00 00 0067*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E7D 00 00 00 00 0068*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E8D 00 00 00 00 0069*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044E9D 00 00 00 00 0070*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044EAD 00 00 00 00 0071*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044EBD 00 00 00 00 0072*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044ECD 00 00 00 00 0073*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044EDD 00 00 00 00 0074*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044EED 00 00 00 00 0075*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044EFD 00 00 00 00 0076*  	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044F0D             0054       ; include "levels_xevious.inc"
044F0D             0055       include "player.inc"
044F0D             0001*  ; ######## GAME STATE VARIABLES #######
044F0D             0002*  ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
044F0D 00 00 00    0003*  player_score: dl 0 ; integer
044F10             0004*  ; player current shields,binary
044F10             0005*  ; when < 0 player splodes
044F10             0006*  ; restores to player_max_shields when new ship spawns
044F10 10 00 00    0007*  player_shields: dl 16 ; integer
044F13             0008*  ; max player shields,binary
044F13             0009*  ; can increase with power-ups (todo)
044F13 10 00 00    0010*  player_max_shields: dl 16 ; integer
044F16             0011*  ; when reaches zero,game ends
044F16             0012*  ; can increase based on TODO
044F16 03          0013*  player_ships: db 3 ; integer
044F17             0014*  
044F17             0015*  speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
044F17             0016*  
044F17             0017*  ; ######### PLAYER SPRITE PARAMETERS ##########
044F17             0018*  ; uses the same offsets from its table base as the main sprite table:
044F17             0019*  player_start_variables: ; label marking beginning of table
044F17 10          0020*  player_id:               db table_max_records
044F18 00          0021*  player_type:             db     0x00 ; 1 bytes currently not used
044F19 2B 01 00    0022*  player_base_bufferId:    dl BUF_SHIP_0L ; 3 bytes bitmap bufferId
044F1C 00 00 00    0023*  player_move_program:     dl 0x000000 ; 3 bytes not currently used
044F1F 00          0024*  player_collisions:       db     0x00 ; 1 bytes uses sprite_alive and sprite_just_died flags
044F20 00          0025*  player_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
044F21 00          0026*  player_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
044F22 00 00 00    0027*  player_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
044F25 00 00 00    0028*  player_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
044F28 00 00 00    0029*  player_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
044F2B 00 00 00    0030*  player_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
044F2E 00 00 00    0031*  player_vel:              dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
044F31 00 00 00    0032*  player_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
044F34 00 00 00    0033*  player_orientation:      dl 0x000000 ; 3 bytes not currently used
044F37 00          0034*  player_animation:        db     0x00 ; 1 bytes not currently used
044F38 00          0035*  player_animation_timer:  db     0x00 ; 1 bytes not currently used
044F39 00          0036*  player_move_timer:       db     0x00 ; 1 bytes not currently used
044F3A 00          0037*  player_move_step:        db     0x00 ; 1 bytes not currently used
044F3B 00          0038*  player_points:           db     0x00 ; 1 bytes not currently used
044F3C 00          0039*  player_shield_damage:    db     0x00 ; 1 bytes not currently used
044F3D             0040*  player_end_variables: ; for when we want to traverse this table in reverse
044F3D             0041*  
044F3D             0042*  ; set initial player position
044F3D             0043*  ; inputs: none,everything is hardcoded
044F3D             0044*  ; outputs: player_x/y set to bottom-left corner of screen
044F3D             0045*  ; destroys: a
044F3D             0046*  player_init:
044F3D 3A 17 4F 04 0047*  	ld a,(player_id)
044F41 CD 6E 19 04 0048*  	call vdu_sprite_select
044F45 CD 81 19 04 0049*      call vdu_sprite_clear_frames
044F49 21 2B 01 00 0050*      ld hl,BUF_SHIP_0L
044F4D CD C3 1A 04 0051*      call vdu_sprite_add_buff
044F51 21 2C 01 00 0052*      ld hl,BUF_SHIP_1C
044F55 CD C3 1A 04 0053*      call vdu_sprite_add_buff
044F59 21 2D 01 00 0054*      ld hl,BUF_SHIP_2R
044F5D CD C3 1A 04 0055*      call vdu_sprite_add_buff
044F61 01 00 00 00 0056*      ld bc,0
044F65 ED 43 22 4F 0057*      ld (player_x),bc
       04          
044F6A 11 00 6F 01 0058*      ld de,sprite_bottom*256 ; max sprite y-coordinate
044F6E ED 53 25 4F 0059*      ld (player_y),de
       04          
044F73 CD 3A 1A 04 0060*      call vdu_sprite_move_abs168
044F77 CD E4 19 04 0061*      call vdu_sprite_show
044F7B 21 D7 55 04 0062*      ld hl,player_alive
044F7F 22 C9 55 04 0063*      ld (player_state),hl
044F83 21 1F 4F 04 0064*      ld hl,player_collisions
044F87 CB F6       0065*      set sprite_alive,(hl)
044F89 C9          0066*      ret
044F8A             0067*  
044F8A             0068*  ; process player keyboard input, set player bitmap
044F8A             0069*  ; velocities and draw player bitmap at updated coordinates
044F8A             0070*  ; Inputs: player_x/y set at desired position
044F8A             0071*  ; Returns: player bitmap drawn at updated position
044F8A             0072*  ; Destroys: probably everything except maybe iy
044F8A             0073*  ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
044F8A             0074*  ; TODO: requires sprite implementation
044F8A             0075*  player_input:
044F8A             0076*  ; ; did we die last frame?
044F8A             0077*  ;     ld a,(player_collisions)
044F8A             0078*  ;     and %00000010 ; zero flag will be set if not dead
044F8A             0079*  ;     jr z,player_not_dead
044F8A             0080*  ; ; yes we died
044F8A             0081*  ;     call kill_player
044F8A             0082*  ;     ret ; done
044F8A             0083*  player_not_dead: ; yay we didn't die
044F8A             0084*  ; reset player component velocities to zero as the default
044F8A 21 00 00 00 0085*  	ld hl,0
044F8E 22 28 4F 04 0086*  	ld (player_xvel),hl
044F92 22 2B 4F 04 0087*  	ld (player_yvel),hl
044F96             0088*  ; make ship the active sprite
044F96 3A 17 4F 04 0089*      ld a,(player_id)
044F9A CD 6E 19 04 0090*      call vdu_sprite_select
044F9E             0091*  ; check for keypresses and branch accordingly
044F9E             0092*  ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
044F9E             0093*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
044F9E 3E 1E       0001*M 			LD	A, function
044FA0 5B CF       0002*M 			RST.LIL	08h
044FA2             0094*  ; we test all four arrow keys and add/subract velocities accordingly
044FA2             0095*  ; this handles the case where two opposing movement keys
044FA2             0096*  ; are down simultaneously (velocities will net to zero)
044FA2             0097*  ; and allows diagonal movement when a vertical and horizontal key are down
044FA2             0098*  ; it also allows movement and action keys to be detected simultaneously
044FA2             0099*  ; so we can walk and chew gum at the same time
044FA2 3E 01       0100*      ld a,1 ; set ship's default animation to center
044FA4             0101*          ; if left and right are both down a will net to
044FA4             0102*  
044FA4             0103*  ; 99 Space: fire main weapon
044FA4 DD CB 0C 56 0104*      bit 2,(ix+12)
044FA8 F5          0105*      push af ; save flags for after player movement processed
044FA9             0106*  ; 26 Left: move player left
044FA9 DD CB 03 4E 0107*      bit 1,(ix+3)
044FAD CA BF 4F 04 0108*      jp z,@F
044FB1 2A 28 4F 04 0109*      ld hl,(player_xvel)
044FB5 01 00 FD FF 0110*      ld bc,-speed_player
044FB9 09          0111*      add hl,bc
044FBA 22 28 4F 04 0112*      ld (player_xvel),hl
044FBE 3D          0113*      dec a ; set ship's animation to left
044FBF             0114*  @@:
044FBF             0115*  ; 122 Right: move player right
044FBF DD CB 0F 4E 0116*      bit 1,(ix+15)
044FC3 CA D5 4F 04 0117*  	jp z,@F
044FC7 2A 28 4F 04 0118*      ld hl,(player_xvel)
044FCB 01 00 03 00 0119*      ld bc,speed_player
044FCF 09          0120*      add hl,bc
044FD0 22 28 4F 04 0121*      ld (player_xvel),hl
044FD4 3C          0122*      inc a ; set ship's animation to right
044FD5             0123*  @@:
044FD5             0124*  ; 58 Up: move player up
044FD5 DD CB 07 4E 0125*      bit 1,(ix+7)
044FD9 CA EA 4F 04 0126*  	jp z,@F
044FDD 2A 2B 4F 04 0127*      ld hl,(player_yvel)
044FE1 01 00 FD FF 0128*      ld bc,-speed_player
044FE5 09          0129*      add hl,bc
044FE6 22 2B 4F 04 0130*      ld (player_yvel),hl
044FEA             0131*  @@:
044FEA             0132*  ; 42 Down: move player down
044FEA DD CB 05 4E 0133*      bit 1,(ix+5)
044FEE CA FF 4F 04 0134*  	jp z,@F
044FF2 2A 2B 4F 04 0135*      ld hl,(player_yvel)
044FF6 01 00 03 00 0136*      ld bc,speed_player
044FFA 09          0137*      add hl,bc
044FFB 22 2B 4F 04 0138*      ld (player_yvel),hl
044FFF             0139*  @@:
044FFF             0140*  ; a should land here loaded with the correct frame
044FFF CD D1 19 04 0141*      call vdu_sprite_select_frame
045003             0142*  ; draw player at updated position
045003 FD 21 17 4F 0143*      ld iy,player_start_variables
       04          
045008             0144*      ; ld (table_pointer),iy
045008 CD C4 53 04 0145*      call move_sprite
04500C ED 4B 22 4F 0146*      ld bc,(player_x)
       04          
045011 ED 5B 25 4F 0147*      ld de,(player_y)
       04          
045016 CD 3A 1A 04 0148*  	call vdu_sprite_move_abs168
04501A             0149*  ; process player laser fire
04501A F1          0150*      pop af ; restore flags from spacebar check
04501B C2 C3 49 04 0151*      jp nz,fire_laser ; will return to caller from there
04501F C9          0152*      ret
045020             0153*  ; end player_input
045020             0154*  
045020             0155*  ; ###################################################################
045020             0156*  ; TODO: the below is all stuff from the original code we need to port
045020             0157*  ; ###################################################################
045020             0158*  
045020             0159*  kill_player:
045020             0160*  ; ; set player status to dead
045020             0161*  ;     xor a; sets all player flags to zero
045020             0162*  ;     ld (player_collisions),a
045020             0163*  ; ; deduct a ship from the inventory
045020             0164*  ;     ld a,(player_ships)
045020             0165*  ;     dec a
045020             0166*  ;     ld (player_ships),a
045020             0167*  ; ; are we out of ships?
045020             0168*  ;     jp z,game_over
045020             0169*  ; ; wait a few ticks
045020             0170*  ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
045020             0171*  ;     ld (player_move_timer),a
045020             0172*  ; kill_player_loop:
045020             0173*  ;     call vdu_vblank
045020             0174*  ;     ld a,(player_move_timer)
045020             0175*  ;     dec a
045020             0176*  ;     ld (player_move_timer),a
045020             0177*  ;     jr nz,kill_player_loop
045020             0178*  ;     call player_init ; player respawn if timer zero
045020 C9          0179*      ret ; and out
045021             0180*  
045021             0181*  ; draws the player's shields level
045021             0182*  ; draw_shields:
045021             0183*  ; TODO: Agonize this routine
045021             0184*  ; ; prep the loop to draw the bars
045021             0185*  ;     ld a,(player_shields) ; snag shields
045021             0186*  ;     and a
045021             0187*  ;     ret z ; don't draw if zero shields
045021             0188*  ; ; set loop counter and drawing position
045021             0189*  ;     ld b,a ; loop counter
045021             0190*  ;     ld hl,#5300+48+12
045021             0191*  ; ; set color based on bars remaining
045021             0192*  ;     ld c,103 ; bright green 28fe0a
045021             0193*  ;     cp 9
045021             0194*  ;     jp p,draw_shields_loop
045021             0195*  ;     ld c,74 ; bright yellow eafe5b
045021             0196*  ;     cp 3
045021             0197*  ;     jp p,draw_shields_loop
045021             0198*  ;     ld c,28 ; bright red fe0a0a
045021             0199*  ; draw_shields_loop:
045021             0200*  ;     push bc ; yup,outta
045021             0201*  ;     push hl ; registers again
045021             0202*  ;     ; ld a,#A8 ; ▀,168
045021             0203*  ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
045021             0204*  ;     ; call draw_char
045021             0205*  ;     call draw_num ; we nuked draw_char for the time being
045021             0206*  ;     pop hl
045021             0207*  ;     ld a,8
045021             0208*  ;     add a,l
045021             0209*  ;     ld l,a
045021             0210*  ;     pop bc
045021             0211*  ;     djnz draw_shields_loop
045021             0212*      ; ret
045021             0213*  
045021             0214*  score_x: equ 0
045021             0215*  score_y: equ 3
045021             0216*  ; prints the player's score
045021             0217*  print_score:
045021             0218*  ; DEBUG
045021 0E 00       0219*      ld c,score_x
045023 06 02       0220*      ld b,score_y-1
045025 CD 70 14 04 0221*      call vdu_move_cursor
045029 CD 70 00 04 0222*      call printInline
04502D 53 63 6F 72 0223*      asciz "Score:"
       65 3A 00    
045034             0224*  ; END DEBUG
045034 0E 00       0225*      ld c,score_x
045036 06 03       0226*      ld b,score_y
045038 CD 70 14 04 0227*      call vdu_move_cursor
04503C 2A 0D 4F 04 0228*      ld hl,(player_score)
045040 CD 76 01 04 0229*      call printDec
045044             0230*  ; DEBUG
045044 0E 00       0231*      ld c,score_x
045046 06 07       0232*      ld b,score_y+4
045048 CD 70 14 04 0233*      call vdu_move_cursor
04504C 2A 22 4F 04 0234*      ld hl,(player_x)
045050 CD 98 02 04 0235*      call print_s168_hl
045054             0236*  
045054 0E 00       0237*      ld c,score_x
045056 06 08       0238*      ld b,score_y+5
045058 CD 70 14 04 0239*      call vdu_move_cursor
04505C 2A 25 4F 04 0240*      ld hl,(player_y)
045060 CD 98 02 04 0241*      call print_s168_hl
045064             0242*  
045064 0E 00       0243*      ld c,score_x
045066 06 09       0244*      ld b,score_y+6
045068 CD 70 14 04 0245*      call vdu_move_cursor
04506C 2A 28 4F 04 0246*      ld hl,(player_xvel)
045070 CD 98 02 04 0247*      call print_s168_hl
045074             0248*  
045074 0E 00       0249*      ld c,score_x
045076 06 0A       0250*      ld b,score_y+7
045078 CD 70 14 04 0251*      call vdu_move_cursor
04507C 2A 2B 4F 04 0252*      ld hl,(player_yvel)
045080 CD 98 02 04 0253*      call print_s168_hl
045084             0254*  ; END DEBUG
045084 C9          0255*      ret
045085             0256*  
045085             0257*  ; draw_lives:
045085             0258*  ;     ld hl,player_small ; make small yellow ship the active sprite
045085             0259*  ;     ld (sprite_base_bufferId),hl
045085             0260*  ;     ; ld a,#80 ; northern orientation
045085             0261*  ;     ; ld (sprite_orientation),a
045085             0262*  ;     ld hl,0 ; north
045085             0263*  ;     ld (sprite_heading),hl
045085             0264*  ;     xor a
045085             0265*  ;     ld (sprite_animation),a
045085             0266*  ;     ld a,#56 ; top of visible screen
045085             0267*  ;     ld (sprite_y+1),a
045085             0268*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
045085             0269*  ;     ld a,(player_ships)
045085             0270*  ;     dec a ; we draw one fewer ships than lives
045085             0271*  ;     ret z ; nothing to draw here, move along
045085             0272*  ;     ld b,a ; loop counter
045085             0273*  ;     ld a,256-16 ; initial x position
045085             0274*  ; draw_lives_loop:
045085             0275*  ;     ld (sprite_x+1),a
045085             0276*  ;     push af
045085             0277*  ;     push bc
045085             0278*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
045085             0279*  ;     pop bc
045085             0280*  ;     pop af
045085             0281*  ;     sub 10
045085             0282*  ;     djnz draw_lives_loop
045085             0283*  ;     ret
045085             0056       include "sprites.inc"
045085             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
045085             0002*  table_bytes_per_record:    equ  40; 40 bytes ;40 bytes per sprite record
045085             0003*  sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
045085             0004*  ; sprite state variables
045085             0005*  sprite_state_variables:    equ   1; beginning of sprite state variables
045085             0006*  sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
045085             0007*  sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
045085             0008*  sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
045085             0009*  sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
045085             0010*  sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
045085             0011*  sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
045085             0012*  sprite_orientation:        equ  19; 3 bytes ;orientation bits
045085             0013*  ; sprite definition variables
045085             0014*  sprite_definitions:        equ  22; beginnning of sprite definition variables
045085             0015*  sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
045085             0016*  sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
045085             0017*  sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
045085             0018*  sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
045085             0019*  sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
045085             0020*  sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
045085             0021*  sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
045085             0022*  sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
045085             0023*  sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
045085             0024*  sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
045085             0025*  sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
045085             0026*  sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
045085             0027*  sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
045085             0028*  sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
045085             0029*  
045085             0030*  ; ###### SPRITE TABLE VARIABLES ######
045085             0031*  ; maximum number of sprites
045085             0032*  table_max_records: equ 16 ; it can handle more but this is pushing it
045085             0033*  table_total_bytes: equ table_max_records*table_bytes_per_record
045085             0034*  
045085             0035*  ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
045085             0036*  table_base:
045085 00 00 00 00 0037*  sprite_start_variables:  blkb table_total_bytes, 0 ; fill with zeroes
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
045305             0038*  sprite_end_variables: ; in case we want to traverse the table in reverse
045305             0039*  
045305             0040*  ; pointer to top address of current record, initialized to table_base
045305 85 50 04    0041*  table_pointer: dl table_base
045308             0042*  ; how many active sprites
045308 00          0043*  table_active_sprites: db 0x00
045309             0044*  ; flag indicating collision with screen edge
045309             0045*  ; uses orientation codes to specify which edge(s)
045309 00          0046*  sprite_screen_edge: db #00
04530A             0047*  
04530A             0048*  ; origin_top: equ 48
04530A             0049*  origin_top: equ 0
04530A             0050*  origin_left: equ 128
04530A             0051*  field_top: equ 64
04530A             0052*  field_bottom: equ 383-origin_top
04530A             0053*  field_left: equ 0
04530A             0054*  field_right: equ 255
04530A             0055*  sprite_top: equ field_top + 0
04530A             0056*  sprite_bottom: equ field_bottom-16
04530A             0057*  sprite_left: equ field_left
04530A             0058*  sprite_right: equ field_right-16
04530A             0059*  
04530A             0060*  ; ######### COLLISION SPRITE PARAMETERS ##########
04530A             0061*  ; integer coordinates are all that are needed for collision calculations
04530A 00          0062*  collision_x: db 0x00
04530B 00          0063*  collision_y: db 0x00
04530C 00          0064*  collision_dim_x: db 0x00
04530D 00          0065*  collision_dim_y: db 0x00
04530E             0066*  
04530E             0067*  ; scratch variables
04530E 00          0068*  x: db 0x00 ; 8-bit signed integer
04530F 00          0069*  y: db 0x00 ; 8-bit signed integer
045310 00 00 00    0070*  x0: dl 0x000000 ; 16.8 signed fixed place
045313 00 00 00    0071*  y0: dl 0x000000 ; 16.8 signed fixed place
045316 00 00 00    0072*  incx1: dl 0x000000 ; 16.8 signed fixed place
045319 00 00 00    0073*  incy1: dl 0x000000 ; 16.8 signed fixed place
04531C 00 00 00    0074*  incx2: dl 0x000000 ; 16.8 signed fixed place
04531F 00 00 00    0075*  incy2: dl 0x000000 ; 16.8 signed fixed place
045322             0076*  
045322             0077*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
045322 00 00 00    0078*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
045325 00 00 00    0079*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
045328 00 00 00    0080*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
04532B             0081*  
04532B             0082*  table_init:
04532B DD 21 85 50 0083*      ld ix,table_base
       04          
045330 AF          0084*      xor a ; sprite id
045331 06 10       0085*      ld b,table_max_records ; loop counter
045333             0086*  @loop:
045333 DD 77 00    0087*      ld (ix+sprite_id),a
045336 ED 32 28    0088*      lea ix,ix+table_bytes_per_record
045339 3C          0089*      inc a
04533A 10 F7       0090*      djnz @loop
04533C C9          0091*      ret
04533D             0092*  
04533D             0093*  ; gets the next available sprite id
04533D             0094*  ; inputs; none
04533D             0095*  ; returns: if new sprite available, a = sprite id,
04533D             0096*  ;           ix pointing to new sprite vars, carry set
04533D             0097*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
04533D             0098*  ; destroys: a,b,c,hl,ix
04533D             0099*  ; affects: bumps table_active_sprites by one
04533D             0100*  table_get_next_id:
04533D DD 21 85 50 0101*      ld ix,table_base
       04          
045342 06 10       0102*      ld b,table_max_records
045344 0E 00       0103*      ld c,0 ; sprite id counter
045346             0104*  @loop:
045346 DD 7E 16    0105*      ld a,(ix+sprite_type)
045349 A7          0106*      and a
04534A 28 08       0107*      jr z,@found
04534C ED 32 28    0108*      lea ix,ix+table_bytes_per_record
04534F 0C          0109*      inc c
045350 10 F4       0110*      djnz @loop
045352             0111*  @notfound:
045352 AF          0112*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
045353 C9          0113*      ret
045354             0114*  @found:
045354             0115*  ; bump number of active sprites
045354 21 08 53 04 0116*      ld hl,table_active_sprites
045358 34          0117*      inc (hl)
045359             0118*  ; return sprite id
045359 79          0119*      ld a,c
04535A 37          0120*      scf ; sets carry flag indicating we found a free sprite
04535B C9          0121*      ret ; done
04535C             0122*  ; end table_get_next_id
04535C             0123*  
04535C             0124*  ; deactivate the sprite with the given id
04535C             0125*  ; inputs: iy set to sprite record, vdu_sprite_select called
04535C             0126*  ; outputs: nothing
04535C             0127*  ; destroys: a,hl
04535C             0128*  ; affects: decrements table_active_sprites by one
04535C             0129*  table_deactivate_sprite:
04535C CD F2 19 04 0130*      call vdu_sprite_hide
045360 AF          0131*      xor a
045361 FD 77 16    0132*      ld (iy+sprite_type),a
045364 21 08 53 04 0133*      ld hl,table_active_sprites
045368 35          0134*      dec (hl)
045369 C9          0135*      ret
04536A             0136*  ; end table_deactivate_sprite
04536A             0137*  
04536A             0138*  sprites_init:
04536A             0139*  ; initialize sprites
04536A CD A2 1A 04 0140*  	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
04536E AF          0141*  	xor a
04536F             0142*  @sprite_loop:
04536F F5          0143*  	push af
045370 CD 6E 19 04 0144*  	call vdu_sprite_select
045374 21 00 01 00 0145*  	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
045378 CD C3 1A 04 0146*  	call vdu_sprite_add_buff
04537C F1          0147*  	pop af
04537D 3C          0148*  	inc a
04537E FE 12       0149*  	cp table_max_records+2 ; tack on sprites for player and laser
045380 20 ED       0150*  	jr nz,@sprite_loop
045382 3C          0151*  	inc a
045383 CD A2 19 04 0152*  	call vdu_sprite_activate
045387             0153*  
045387             0154*  ; define player sprite
045387 3A 17 4F 04 0155*  	ld a,(player_id)
04538B CD 6E 19 04 0156*  	call vdu_sprite_select
04538F CD 81 19 04 0157*  	call vdu_sprite_clear_frames
045393 21 2B 01 00 0158*  	ld hl,BUF_SHIP_0L
045397 01 03 00 00 0159*  	ld bc,3 ; three bitmaps for player ship
04539B             0160*  @sprite_player_loop:
04539B C5          0161*  	push bc
04539C E5          0162*  	push hl
04539D CD C3 1A 04 0163*  	call vdu_sprite_add_buff
0453A1 E1          0164*  	pop hl
0453A2 23          0165*  	inc hl
0453A3 C1          0166*  	pop bc
0453A4 10 F5       0167*  	djnz @sprite_player_loop
0453A6             0168*  
0453A6             0169*  ; define laser sprite
0453A6 3A 5A 49 04 0170*  	ld a,(laser_id)
0453AA CD 6E 19 04 0171*  	call vdu_sprite_select
0453AE CD 81 19 04 0172*  	call vdu_sprite_clear_frames
0453B2 21 08 01 00 0173*  	ld hl,BUF_LASER_A
0453B6 06 02       0174*  	ld b,2 ; two bitmaps for laser
0453B8             0175*  @sprite_laser_loop:
0453B8 C5          0176*  	push bc
0453B9 E5          0177*  	push hl
0453BA CD C3 1A 04 0178*  	call vdu_sprite_add_buff
0453BE E1          0179*  	pop hl
0453BF 23          0180*  	inc hl
0453C0 C1          0181*  	pop bc
0453C1 10 F5       0182*  	djnz @sprite_laser_loop
0453C3             0183*  ; all done
0453C3 C9          0184*      ret
0453C4             0185*  ; end sprites_init
0453C4             0186*  
0453C4             0187*  ; compute a sprite's new position based on its component x,y velocities
0453C4             0188*  ; with screen boundary checking and update its sprite table record accordingly
0453C4             0189*  ; inputs: table_pointer set to sprite record
0453C4             0190*  ; returns: updated x, y positions and edge collision flags in sprite table record
0453C4             0191*  ; destroys: everything
0453C4             0192*  ; note: actual rendering of sprite must be handled by caller
0453C4             0193*  move_sprite:
0453C4             0194*      ; ld iy,(table_pointer)
0453C4             0195*  ; x-axis movement
0453C4 FD 27 01    0196*      ld hl,(iy+sprite_x)
0453C7 FD 17 07    0197*      ld de,(iy+sprite_xvel)
0453CA 19          0198*      add hl,de
0453CB             0199*  
0453CB             0200*  ; DEBUG
0453CB             0201*      PUSH_ALL
0453CB 08          0001*M     ex af,af'
0453CC D9          0002*M     exx
0453CD F5          0003*M     push af
0453CE E5          0004*M     push hl
0453CF C5          0005*M     push bc
0453D0 D5          0006*M     push de
0453D1             0007*M 
0453D1 08          0008*M     ex af,af'
0453D2 D9          0009*M     exx
0453D3 F5          0010*M     push af
0453D4 E5          0011*M     push hl
0453D5 C5          0012*M     push bc
0453D6 D5          0013*M     push de
0453D7 DD E5       0014*M     push ix
0453D9 FD E5       0015*M     push iy
0453DB CD 39 14 04 0202*      call vdu_home_cursor
0453DF CD 26 04 04 0203*      call dumpRegistersHex
0453E3             0204*      ; CALL waitKeypress ; DEBUG
0453E3             0205*      POP_ALL
0453E3 FD E1       0001*M     pop iy
0453E5 DD E1       0002*M     pop ix
0453E7 D1          0003*M     pop de
0453E8 C1          0004*M     pop bc
0453E9 E1          0005*M     pop hl
0453EA F1          0006*M     pop af
0453EB 08          0007*M     ex af,af'
0453EC D9          0008*M     exx
0453ED             0009*M 
0453ED D1          0010*M     pop de
0453EE C1          0011*M     pop bc
0453EF E1          0012*M     pop hl
0453F0 F1          0013*M     pop af
0453F1 08          0014*M     ex af,af'
0453F2 D9          0015*M     exx
0453F3 C9          0206*      ret
0453F4             0207*  ; END DEBUG
0453F4             0208*  
0453F4 FD 2F 01    0209*      ld (iy+sprite_x),hl
0453F7             0210*  ; y-axis movement
0453F7 FD 27 04    0211*      ld hl,(iy+sprite_y)
0453FA FD 17 0A    0212*      ld de,(iy+sprite_yvel)
0453FD 19          0213*      add hl,de
0453FE FD 2F 04    0214*      ld (iy+sprite_y),hl
045401             0215*  
045401             0216*  ; detect screen edge collisions
045401 AF          0217*      xor a ; reset screen edge collision flag and clear carry
045402 32 09 53 04 0218*      ld (sprite_screen_edge),a
045406             0219*  ; y-axis first since we already have it in hl
045406 11 00 C0 FF 0220*      ld de,-sprite_top*256
04540A ED 5A       0221*      adc hl,de
04540C FA 36 54 04 0222*      jp m,@top
045410 ED 52       0223*      sbc hl,de ; hl back to original value
045412 11 00 91 FE 0224*      ld de,-sprite_bottom*256
045416 ED 5A       0225*      adc hl,de
045418 F2 40 54 04 0226*      jp p,@bottom
04541C             0227*  @xaxis:
04541C FD 27 01    0228*      ld hl,(iy+sprite_x)
04541F 11 00 00 00 0229*      ld de,-sprite_left*256
045423 ED 5A       0230*      adc hl,de
045425 FA 5B 54 04 0231*      jp m,@left
045429 ED 52       0232*      sbc hl,de ; hl back to original value
04542B 11 00 11 FF 0233*      ld de,-sprite_right*256
04542F ED 5A       0234*      adc hl,de
045431 F2 69 54 04 0235*      jp p,@right
045435             0236*  ; no edge collisions so go home
045435 C9          0237*      ret
045436             0238*  @top:
045436 3E 08       0239*      ld a,collide_top
045438 21 00 40 00 0240*      ld hl,sprite_top*256
04543C C3 46 54 04 0241*      jp @collide_y
045440             0242*  @bottom:
045440 3E 04       0243*      ld a,collide_bottom
045442 21 00 6F 01 0244*      ld hl,sprite_bottom*256
045446             0245*  @collide_y:
045446 32 09 53 04 0246*      ld (sprite_screen_edge),a
04544A FD 2F 04    0247*      ld (iy+sprite_y),hl
04544D             0248*  ; reverse y-axis velocity
04544D FD 27 0A    0249*      ld hl,(iy+sprite_yvel)
045450 CD A0 06 04 0250*      call neg_hlu
045454 FD 2F 0A    0251*      ld (iy+sprite_yvel),hl
045457             0252*  ; go check for x-axis collisions
045457 C3 1C 54 04 0253*      jp @xaxis
04545B             0254*  @left:
04545B 3A 09 53 04 0255*      ld a,(sprite_screen_edge)
04545F F6 02       0256*      or a,collide_left
045461 21 00 00 00 0257*      ld hl,sprite_left*256
045465 C3 73 54 04 0258*      jp @collide_x
045469             0259*  @right:
045469 3A 09 53 04 0260*      ld a,(sprite_screen_edge)
04546D F6 01       0261*      or a,collide_right
04546F 21 00 EF 00 0262*      ld hl,sprite_right*256
045473             0263*  @collide_x:
045473 32 09 53 04 0264*      ld (sprite_screen_edge),a
045477 FD 2F 01    0265*      ld (iy+sprite_x),hl
04547A             0266*  ; reverse x-axis velocity
04547A FD 27 07    0267*      ld hl,(iy+sprite_xvel)
04547D CD A0 06 04 0268*      call neg_hlu
045481 FD 2F 07    0269*      ld (iy+sprite_xvel),hl
045484             0270*  ; final collision flag to a and return
045484 3A 09 53 04 0271*      ld a,(sprite_screen_edge)
045488 C9          0272*      ret
045489             0273*  ; end move_sprite
045489             0274*  
045489             0275*  sprite_compute_velocities:
045489 FD 2A 05 53 0276*      ld iy,(table_pointer)
       04          
04548E FD 17 0D    0277*      ld de,(iy+sprite_vel)
045491 CD 4E 09 04 0278*      call polar_to_cartesian
045495 FD 2A 05 53 0279*      ld iy,(table_pointer)
       04          
04549A FD 0F 07    0280*      ld (iy+sprite_xvel),bc ; save x-velocity component
04549D FD 1F 0A    0281*      ld (iy+sprite_yvel),de ; save y-velocity component
0454A0 C9          0282*      ret
0454A1             0283*  ; end sprite_compute_velocities
0454A1             0284*  
0454A1             0285*  ; create a new sprite at the same location as an existing sprite
0454A1             0286*  ; inputs: iy = pointer to new sprite default settings, table_pointer = existing sprite
0454A1             0287*  spawn_sprite_from_sprite:
0454A1 CD 3D 53 04 0288*      call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
0454A5 D0          0289*      ret nc ; no carry means no free sprite slots, so we go home
0454A6             0290*  ; copy default settings to new sprite
0454A6 FD E5       0291*      push iy ; pointer to new sprite defaults
0454A8 E1          0292*      pop hl ; address to copy from
0454A9 DD E5       0293*      push ix ; back up pointer to new sprite table record
0454AB ED 32 16    0294*      lea ix,ix+sprite_definitions ; bump pointer to copy to
0454AE DD E5       0295*      push ix ; pointer to default sprite settings
0454B0 D1          0296*      pop de ; address to copy to
0454B1 01 28 00 00 0297*      ld bc,table_bytes_per_record ; number of bytes to copy
0454B5 ED B0       0298*      ldir ; copies defaults to new sprite record
0454B7 DD E1       0299*      pop ix ; restore pointer to top of new sprite table record
0454B9             0300*  ; copy sprite position, velocity and orientation from existing sprite
0454B9 FD 2A 05 53 0301*      ld iy,(table_pointer) ; pointer to current sprite record
       04          
0454BE ED 33 01    0302*      lea iy,iy+sprite_state_variables ; bump pointer to copy from position
0454C1 FD E5       0303*      push iy
0454C3 E1          0304*      pop hl ; address to copy from
0454C4 DD E5       0305*      push ix
0454C6 D1          0306*      pop de ; address to copy to
0454C7 01 16 00 00 0307*      ld bc, sprite_definitions-sprite_state_variables+1 ; number of bytes to copy
0454CB ED B0       0308*      ldir ; copies position, velocity and orientation
0454CD             0309*  ; initialize the new sprite
0454CD DD 7E 00    0310*      ld a,(ix+sprite_id)
0454D0 CD 6E 19 04 0311*      call vdu_sprite_select ; select sprite
0454D4 DD 27 17    0312*      ld hl,(ix+sprite_base_bufferId)
0454D7 DD 46 21    0313*      ld b,(ix+sprite_num_animations)
0454DA CD ED 54 04 0314*      call sprite_load_frames
0454DE             0315*  ; update the new sprite's position and make it visible
0454DE DD 07 01    0316*      ld bc,(ix+sprite_x)
0454E1 DD 17 04    0317*      ld de,(ix+sprite_y)
0454E4 CD 3A 1A 04 0318*      call vdu_sprite_move_abs168
0454E8 CD E4 19 04 0319*      call vdu_sprite_show
0454EC C9          0320*      ret
0454ED             0321*  
0454ED             0322*  ; load a sprite with animation bitmaps
0454ED             0323*  ; inputs: a = sprite id, hl = base bufferId, b = number of frames
0454ED             0324*  sprite_load_frames:
0454ED             0325*  ; back up input parameters
0454ED E5          0326*      push hl ; base bufferId
0454EE C5          0327*      push bc ; b = number of frames
0454EF CD 6E 19 04 0328*      call vdu_sprite_select
0454F3 CD 81 19 04 0329*      call vdu_sprite_clear_frames
0454F7 C1          0330*      pop bc ; b = number of frames
0454F8 E1          0331*      pop hl ; = base bufferId
0454F9             0332*  @load_frames:
0454F9 C5          0333*      push bc ; back up loop counter
0454FA E5          0334*      push hl ; back up base bufferId
0454FB CD C3 1A 04 0335*      call vdu_sprite_add_buff
0454FF E1          0336*      pop hl ; restore base bufferId
045500 23          0337*      inc hl ; bump it to the next frame
045501 C1          0338*      pop bc ; restore loop counter
045502 10 F5       0339*      djnz @load_frames ; loop until all frames loaded
045504 C9          0340*      ret
045505             0341*  ; end sprite_load_frames
045505             0057       include "state.inc"
045505             0001*  ; Game state variables
045505 13 55 04    0002*  game_state:  dl game_main_menu
045508             0003*  
045508             0004*  do_game:
045508 2A 05 55 04 0005*      ld hl,(game_state)   ; Load the current game state
04550C             0006*      callHL                ; Call the corresponding state handler
04550C 01 12 55 04 0001*M     ld bc,@F ; Address of first instruction after the jump
045510 C5          0002*M     push bc ; which constitutes the return address
045511 E9          0003*M     jp (hl) ; Jump to the address in HL
045512             0004*M @@:
045512 C9          0007*      ret
045513             0008*  
045513             0009*  ; ========================
045513             0010*  ; Main Game States
045513             0011*  ; ========================
045513             0012*  
045513             0013*  game_main_menu:
045513             0014*      ; Handle main menu options
045513             0015*      ; Example: Check input for "Start Game"
045513 CD F8 55 04 0016*      call check_input_menu
045517 C2 1C 55 04 0017*      jp nz, game_initialize ; Start game on selection
04551B C9          0018*      ret
04551C             0019*  
04551C             0020*  game_initialize:
04551C             0021*  ; reset the sprite table
04551C CD 2B 53 04 0022*      call table_init
045520 AF          0023*      xor a
045521 32 08 53 04 0024*      ld (table_active_sprites),a
045525 21 85 50 04 0025*      ld hl,table_base
045529 22 05 53 04 0026*      ld (table_pointer),hl
04552D             0027*  ; initialize sprites
04552D CD 6A 53 04 0028*      call sprites_init
045531             0029*  ; initialize the first level
045531 3E 00       0030*      ld a,tiles_dg
045533 CD 43 4A 04 0031*      call init_tileset
045537             0032*  ; initialize player
045537 21 00 00 00 0033*      ld hl,0
04553B 22 0D 4F 04 0034*      ld (player_score),hl
04553F 2A 13 4F 04 0035*      ld hl,(player_max_shields)
045543 22 10 4F 04 0036*      ld (player_shields),hl
045547 3E 03       0037*      ld a,3
045549 32 16 4F 04 0038*      ld (player_ships),a
04554D CD 3D 4F 04 0039*      call player_init
045551             0040*  ; ; TODO: TEMPORARY UNTIL MAP LOGIC IMPLEMENTED
045551             0041*  ;     ld hl,enemies_dead
045551             0042*  ;     ld (enemies_state),hl
045551             0043*  ; ; END TODO
045551             0044*  ; set the game state to playing
045551 21 5B 55 04 0045*      ld hl,game_playing
045555 22 05 55 04 0046*      ld (game_state), hl
045559 C9          0047*      ret
04555A             0048*  ; done initializing
04555A C9          0049*      ret
04555B             0050*  
04555B             0051*  game_playing:
04555B             0052*  ; Main gameplay loop
04555B CD 15 56 04 0053*      call tiles_plot
04555F CD CC 55 04 0054*      call do_player
045563 CD E5 55 04 0055*      call do_enemies
045567             0056*  ; update UI: TODO make this a standalone function
045567 CD 21 50 04 0057*      call print_score
04556B C9          0058*      ret
04556C             0059*  
04556C             0060*  game_paused:
04556C             0061*      ; Pause menu logic
04556C CD FB 55 04 0062*      call check_input_pause
045570 C2 5B 55 04 0063*      jp nz, game_playing ; Resume game
045574 CA 13 55 04 0064*      jp z, game_main_menu ; Exit to main menu
045578 C9          0065*      ret
045579             0066*  
045579             0067*  game_level_transition:
045579             0068*      ; Handle level transitions
045579 CD FC 55 04 0069*      call load_next_level
04557D 21 5B 55 04 0070*      ld hl, game_playing
045581 22 05 55 04 0071*      ld (game_state), hl
045585 C9          0072*      ret
045586             0073*  
045586             0074*  game_over:
045586             0075*      ; Display game over screen
045586 CD FD 55 04 0076*      call display_game_over
04558A C2 13 55 04 0077*      jp nz, game_main_menu ; Return to main menu on input
04558E C9          0078*      ret
04558F             0079*  
04558F             0080*  game_victory:
04558F             0081*      ; Display victory screen
04558F CD FE 55 04 0082*      call display_victory
045593 C2 13 55 04 0083*      jp nz, game_main_menu ; Return to main menu on input
045597 C9          0084*      ret
045598             0085*  
045598             0086*  ; ========================
045598             0087*  ; Supporting States
045598             0088*  ; ========================
045598             0089*  
045598             0090*  game_loading:
045598             0091*      ; Show loading screen while preparing assets
045598 CD FF 55 04 0092*      call load_resources
04559C 21 1C 55 04 0093*      ld hl, game_initialize
0455A0 22 05 55 04 0094*      ld (game_state), hl
0455A4 C9          0095*      ret
0455A5             0096*  
0455A5             0097*  game_cutscene:
0455A5             0098*      ; Play a non-interactive cutscene
0455A5 CD 00 56 04 0099*      call play_cutscene
0455A9 C2 5B 55 04 0100*      jp nz, game_playing ; Return to gameplay after cutscene
0455AD C9          0101*      ret
0455AE             0102*  
0455AE             0103*  game_inventory:
0455AE             0104*      ; Open inventory or shop
0455AE CD 01 56 04 0105*      call display_inventory
0455B2 C2 5B 55 04 0106*      jp nz, game_playing ; Return to gameplay after inventory close
0455B6 C9          0107*      ret
0455B7             0108*  
0455B7             0109*  game_map:
0455B7             0110*      ; Display map or quest
0455B7 CD 02 56 04 0111*      call display_map
0455BB C2 5B 55 04 0112*      jp nz, game_playing ; Return to gameplay after map close
0455BF C9          0113*      ret
0455C0             0114*  
0455C0             0115*  game_exit:
0455C0             0116*      ; Handle exit logic
0455C0 CD 03 56 04 0117*      call save_game
0455C4 C3 04 56 04 0118*      jp exit_game         ; Safely shut down
0455C8 C9          0119*      ret
0455C9             0120*  
0455C9             0121*  ; ========================
0455C9             0122*  ; Sub-state branching (Example for player state)
0455C9             0123*  ; ========================
0455C9             0124*  
0455C9 D7 55 04    0125*  player_state:  dl player_alive ; Player state variable
0455CC             0126*  
0455CC             0127*  do_player:
0455CC 2A C9 55 04 0128*      ld hl,(player_state)
0455D0             0129*      callHL                ; Call the corresponding player state
0455D0 01 D6 55 04 0001*M     ld bc,@F ; Address of first instruction after the jump
0455D4 C5          0002*M     push bc ; which constitutes the return address
0455D5 E9          0003*M     jp (hl) ; Jump to the address in HL
0455D6             0004*M @@:
0455D6 C9          0130*      ret
0455D7             0131*  
0455D7             0132*  player_alive:
0455D7 CD 8A 4F 04 0133*      call player_input     ; Handle player input
0455DB CD 80 49 04 0134*      call laser_control    ; Handle laser movement and collision detection
0455DF C9          0135*      ret
0455E0             0136*  
0455E0             0137*  player_dead:
0455E0 CD 80 49 04 0138*      call laser_control    ; Handle laser movement and collision detection
0455E4 C9          0139*      ret
0455E5             0140*  
0455E5             0141*  do_enemies:
0455E5 2A F0 55 04 0142*      ld hl,(enemies_state)
0455E9             0143*      callHL
0455E9 01 EF 55 04 0001*M     ld bc,@F ; Address of first instruction after the jump
0455ED C5          0002*M     push bc ; which constitutes the return address
0455EE E9          0003*M     jp (hl) ; Jump to the address in HL
0455EF             0004*M @@:
0455EF C9          0144*      ret
0455F0 F3 55 04    0145*  enemies_state: dl enemies_alive
0455F3             0146*  ; enemies_dead:
0455F3             0147*  ;     ld iy,enemies_respawn_tmr
0455F3             0148*  ;     ld hl,120*2 ; 120ths of a second
0455F3             0149*  ;     call timestamp_tmr_set
0455F3             0150*  ;     ld hl,enemies_respawning
0455F3             0151*  ;     ld (enemies_state),hl
0455F3             0152*  ;     ret
0455F3             0153*  
0455F3             0154*  ; ; DEBUG: FOR TESTING UNTIL WE PROPERLY IMPLEMENT MAP LOGIC
0455F3             0155*  ; enemies_respawning:
0455F3             0156*  ;     ld iy,enemies_respawn_tmr
0455F3             0157*  ;     call timestamp_tmr_get
0455F3             0158*  ;     ret p ; not time to respawn yet
0455F3             0159*  ;     call enemies_respawn
0455F3             0160*  ;     ret
0455F3             0161*  ; enemies_respawn_tmr: ds 6
0455F3             0162*  
0455F3             0163*  ; enemies_respawn:
0455F3             0164*  ; ; initialize enemy sprites
0455F3             0165*  ;     ld a,(max_enemy_sprites)
0455F3             0166*  ;     ld b,a ; loop counter
0455F3             0167*  ; @respawn_loop:
0455F3             0168*  ;     push bc
0455F3             0169*  ;     call enemy_spawn_seeker
0455F3             0170*  ;     pop bc
0455F3             0171*  ;     djnz @respawn_loop
0455F3             0172*  ;     ld hl,enemies_alive
0455F3             0173*  ;     ld (enemies_state),hl
0455F3             0174*  ;     ret
0455F3             0175*  ; ; END DEBUG
0455F3             0176*  
0455F3             0177*  enemies_alive:
0455F3 CD 0B 1B 04 0178*      call move_enemies
0455F7 C9          0179*      ret
0455F8             0180*  
0455F8             0181*  check_input_menu:
0455F8 C9          0182*      ret
0455F9             0183*  
0455F9             0184*  update_game_world:
0455F9 C9          0185*      ret
0455FA             0186*  
0455FA             0187*  check_game_events:
0455FA C9          0188*      ret
0455FB             0189*  
0455FB             0190*  check_input_pause:
0455FB C9          0191*      ret
0455FC             0192*  
0455FC             0193*  load_next_level:
0455FC C9          0194*      ret
0455FD             0195*  
0455FD             0196*  display_game_over:
0455FD C9          0197*      ret
0455FE             0198*  
0455FE             0199*  display_victory:
0455FE C9          0200*      ret
0455FF             0201*  
0455FF             0202*  load_resources:
0455FF C9          0203*      ret
045600             0204*  
045600             0205*  play_cutscene:
045600 C9          0206*      ret
045601             0207*  
045601             0208*  display_inventory:
045601 C9          0209*      ret
045602             0210*  
045602             0211*  display_map:
045602 C9          0212*      ret
045603             0213*  
045603             0214*  save_game:
045603 C9          0215*      ret
045604             0216*  
045604             0217*  exit_game:
045604 C9          0218*      ret
045605             0219*  
045605             0058       include "tiles.inc"
045605             0001*  ; ######### TILES #########
045605             0002*  ; TODO: implement buffering of tiles here when there isn't other stuff to do
045605             0003*  ; tiles_defs: ds 256*16 ; 256 rows of 16 tiles, each tile is a byte
045605 00 00 00    0004*  tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
045608 00 00 00    0005*  tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
04560B             0006*      ; initialize to zero for a maximum of 256 rows in a level
04560B 00          0007*  tiles_cols: db 0 ; number of tile columns in the current level
04560C             0008*  
04560C 00 00 00    0009*  cur_baseBufferId: dl 0
04560F 00 00 00    0010*  tiles_x_plot: dl 0
045612 F1 FF FF    0011*  tiles_y_plot: dl -15
045615             0012*  
045615             0013*  tiles_plot:
045615             0014*  ; set gfx viewport to playing field window
045615 01 00 00 00 0015*      ld bc,field_left
045619 11 40 00 00 0016*      ld de,field_top
04561D DD 21 FF 00 0017*      ld ix,field_right
       00          
045622 FD 21 7F 01 0018*      ld iy,field_bottom
       00          
045627 CD 24 15 04 0019*      call vdu_set_gfx_viewport
04562B             0020*  ; move the background down one pixel
04562B 3E 02       0021*      ld a,2 ; current gfx viewport
04562D 2E 02       0022*      ld l,2 ; direction=down
04562F 26 01       0023*      ld h,1 ; speed=1 px
045631 CD 9C 14 04 0024*      call vdu_scroll_down
045635             0025*  ; set gfx viewport to one scanline to optimise plotting tiles
045635 01 00 00 00 0026*      ld bc,0 ; leftmost x-coord
045639 11 00 00 00 0027*      ld de,0 ; topmost y-coord
04563D DD 21 FF 00 0028*      ld ix,255 ; rightmost x-coord
       00          
045642 FD 21 00 00 0029*      ld iy,0 ; bottommost y-coord
       00          
045647 CD 24 15 04 0030*      call vdu_set_gfx_viewport
04564B             0031*  ; plot the background
04564B             0032*      ; call bg_plot
04564B             0033*      ; call xevious_plot
04564B             0034*      ; ret ; DEBUG
04564B             0035*  ; initialize tiles loop
04564B 21 00 00 00 0036*      ld hl,0 ; init plotting x-coordinate
04564F 22 0F 56 04 0037*      ld (tiles_x_plot),hl
045653 2A 05 56 04 0038*      ld hl,(tiles_row_defs)
045657 3A 0B 56 04 0039*      ld a,(tiles_cols)
04565B 47          0040*      ld b,a ; column loop counter
04565C             0041*  @loop:
04565C C5          0042*      push bc ; save the loop counter
04565D             0043*  ; read the tile defintion for the current column
04565D 7E          0044*      ld a,(hl) ; a has tile definition
04565E E5          0045*      push hl ; save pointer to tile definition
04565F 2A 0C 56 04 0046*      ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
045663 6F          0047*      ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
045664 CD 71 15 04 0048*      call vdu_buff_select ; tile bitmap buffer is now active
045668             0049*  ; plot the active bitmap
045668 ED 4B 0F 56 0050*      ld bc,(tiles_x_plot)
       04          
04566D ED 5B 12 56 0051*      ld de,(tiles_y_plot)
       04          
045672 CD CD 18 04 0052*      call vdu_plot_bmp
045676             0053*  ; bump x-coords the width of one tile and save it
045676 2A 0F 56 04 0054*      ld hl,(tiles_x_plot)
04567A 01 10 00 00 0055*      ld bc,16
04567E 09          0056*      add hl,bc
04567F 22 0F 56 04 0057*      ld (tiles_x_plot),hl
045683             0058*  ; prepare to loop to next column
045683 E1          0059*      pop hl ; get back pointer to tile def
045684 23          0060*      inc hl ; bump it to the next column
045685 C1          0061*      pop bc ; snag our loop counter
045686 10 D4       0062*      djnz @loop
045688             0063*  ; increment tiles plotting y-coordinate
045688             0064*  ; when it hits zero, we go to next row of tiles in the map
045688             0065*  ; (we use ix b/c we want to preserve hl for the next step)
045688 DD 21 12 56 0066*      ld ix,tiles_y_plot
       04          
04568D DD 34 00    0067*      inc (ix)
045690 C0          0068*      ret nz
045691             0069*  ; do active tiles
045691 E5          0070*      push hl ; save pointer to next row tile def
045692 CD C4 56 04 0071*      call do_active_tiles
045696 E1          0072*      pop hl ; get back pointer to next row tile def
045697             0073*  ; time to bump tiles_row_defs to next row
045697             0074*  ; (hl was already there at the end of the loop)
045697 22 05 56 04 0075*      ld (tiles_row_defs),hl
04569B             0076*  ; reset coords to plot next row of tiles
04569B 21 00 00 00 0077*      ld hl,0
04569F 22 0F 56 04 0078*      ld (tiles_x_plot),hl
0456A3 21 F1 FF FF 0079*      ld hl,-15
0456A7 22 12 56 04 0080*      ld (tiles_y_plot),hl
0456AB             0081*  ; decrement tiles row counter
0456AB 21 08 56 04 0082*      ld hl,tiles_row
0456AF 35          0083*      dec (hl)
0456B0 C0          0084*      ret nz
0456B1             0085*  @inc_level:
0456B1             0086*  ; increase the number of enemy sprites
0456B1 3A 0A 1B 04 0087*      ld a,(max_enemy_sprites)
0456B5 3C          0088*      inc a
0456B6 FE 10       0089*      cp table_max_records ; if we're at the global limit,skip ahead at max level
0456B8 CA 95 4A 04 0090*      jp z,next_level
0456BC 32 0A 1B 04 0091*      ld (max_enemy_sprites),a ; otherwise save the updated number
0456C0 C3 95 4A 04 0092*      jp next_level
0456C4             0093*  ; end tiles_plot
0456C4             0094*  
0456C4             0095*  do_active_tiles:
0456C4 C9          0096*      ret ; DEBUG
0456C5             0097*  
0456C5             0098*  ; initialize tiles loop
0456C5 21 00 00 00 0099*      ld hl,0 ; init plotting x-coordinate
0456C9 22 0F 56 04 0100*      ld (tiles_x_plot),hl
0456CD 2A 05 56 04 0101*      ld hl,(tiles_row_defs)
0456D1 3A 0B 56 04 0102*      ld a,(tiles_cols)
0456D5 47          0103*      ld b,a ; column loop counter
0456D6             0104*  @loop:
0456D6 C5          0105*      push bc ; save the loop counter
0456D7             0106*  ; read the tile defintion for the current column
0456D7 7E          0107*      ld a,(hl) ; a has tile definition
0456D8 E5          0108*      push hl ; save pointer to tile definition
0456D9 B7          0109*      or a ; check for null tile
0456DA CA F6 56 04 0110*      jp z,@next_tile ; skip to next tile if null
0456DE FE 11       0111*      cp 17 ; carry reset if active tile
0456E0 D2 F6 56 04 0112*      jp nc,@next_tile ; skip to next tile if not active
0456E4             0113*  ; call the tile activation routine
0456E4 21 5B 57 04 0114*      ld hl,tile_activation_routines
0456E8 16 03       0115*      ld d,3 ; three bytes per table entry
0456EA 5F          0116*      ld e,a ; a is the tile type
0456EB ED 5C       0117*      mlt de ; de is now the offset to the table entry
0456ED 19          0118*      add hl,de ; hl is now the address of the table entry
0456EE ED 27       0119*      ld hl,(hl) ; hl is now the activation routine address
0456F0             0120*  
0456F0             0121*  ; ; DEBUG
0456F0             0122*  ;     push af
0456F0             0123*  ;     push hl
0456F0             0124*  ;     call vdu_home_cursor
0456F0             0125*  ;     call dumpRegistersHex
0456F0             0126*  ;     call waitKeypress
0456F0             0127*  ;     pop hl
0456F0             0128*  ;     pop af
0456F0             0129*  ; ; END DEBUG
0456F0             0130*  
0456F0             0131*      callHL ; call the activation routine
0456F0 01 F6 56 04 0001*M     ld bc,@F ; Address of first instruction after the jump
0456F4 C5          0002*M     push bc ; which constitutes the return address
0456F5 E9          0003*M     jp (hl) ; Jump to the address in HL
0456F6             0004*M @@:
0456F6             0132*  @next_tile:
0456F6             0133*  ; bump x-coords the width of one tile and save it
0456F6 2A 0F 56 04 0134*      ld hl,(tiles_x_plot)
0456FA 01 10 00 00 0135*      ld bc,16
0456FE 09          0136*      add hl,bc
0456FF 22 0F 56 04 0137*      ld (tiles_x_plot),hl
045703             0138*  ; prepare to loop to next column
045703 E1          0139*      pop hl ; get back pointer to tile def
045704 23          0140*      inc hl ; bump it to the next column
045705 C1          0141*      pop bc ; snag our loop counter
045706 10 CE       0142*      djnz @loop
045708 C9          0143*      ret ; done
045709             0144*  ; end do_active_tiles
045709             0145*  
045709             0146*  ; create a new sprite at the same location as an active tile
045709             0147*  ; inputs: iy = pointer to new sprite default settings, tiles_x_plot, tiles_y_plot set
045709             0148*  spawn_sprite_from_tile:
045709 CD 3D 53 04 0149*      call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
04570D D0          0150*      ret nc ; no carry means no free sprite slots, so we go home
04570E             0151*  ; copy default settings to new sprite
04570E FD E5       0152*      push iy ; pointer to new sprite defaults
045710 E1          0153*      pop hl ; address to copy from
045711 DD E5       0154*      push ix ; back up pointer to new sprite table record
045713 ED 32 16    0155*      lea ix,ix+sprite_definitions ; bump pointer to copy to
045716 DD E5       0156*      push ix ; pointer to default sprite settings
045718 D1          0157*      pop de ; address to copy to
045719 01 28 00 00 0158*      ld bc,table_bytes_per_record ; number of bytes to copy
04571D ED B0       0159*      ldir ; copies defaults to new sprite record
04571F DD E1       0160*      pop ix ; restore pointer to top of new sprite table record
045721             0161*  ; initialize the new sprite
045721 DD 7E 00    0162*      ld a,(ix+sprite_id)
045724 CD 6E 19 04 0163*      call vdu_sprite_select ; select sprite
045728 DD 27 17    0164*      ld hl,(ix+sprite_base_bufferId)
04572B DD 46 21    0165*      ld b,(ix+sprite_num_animations)
04572E CD ED 54 04 0166*      call sprite_load_frames
045732             0167*  ; update the new sprite's position and make it visible
045732 ED 4B 0F 56 0168*      ld bc,(tiles_x_plot)
       04          
045737 DD 0F 01    0169*      ld (ix+sprite_x),bc
04573A ED 5B 12 56 0170*      ld de,(tiles_y_plot)
       04          
04573F DD 1F 04    0171*      ld (ix+sprite_y),de
045742 CD 3A 1A 04 0172*      call vdu_sprite_move_abs168
045746 CD E4 19 04 0173*      call vdu_sprite_show
04574A C9          0174*      ret
04574B             0175*  ; end spawn_sprite_from_tile
04574B             0176*  
04574B             0177*  ; DEBUG
04574B F5          0178*      push af
04574C E5          0179*      push hl
04574D CD 39 14 04 0180*      call vdu_home_cursor
045751 CD 26 04 04 0181*      call dumpRegistersHex
045755 CD 11 06 04 0182*      call waitKeypress
045759 E1          0183*      pop hl
04575A F1          0184*      pop af
04575B             0185*  ; END DEBUG
04575B             0186*  
04575B             0187*  
04575B             0188*  ; bg_y_plot: dl -1
04575B             0189*  ; bg_bufferId: dl BUF_STATION_BG_00 ; default bufferId for background tiles
04575B             0190*  
04575B             0191*  ; bg_plot:
04575B             0192*  ; ; load current bg tile bufferId as default
04575B             0193*  ;     ld hl,(bg_bufferId)
04575B             0194*  ; ; check whether it is time for a new background tile
04575B             0195*  ;     ld a,(bg_y_plot)
04575B             0196*  ;     inc a
04575B             0197*  ;     ld (bg_y_plot),a
04575B             0198*  ;     jp nz,@F ; not time for a new tile so draw current one
04575B             0199*  ; ; load the next background tile
04575B             0200*  ;     ld hl,BUF_STATION_BG_00
04575B             0201*  ;     call rand_8
04575B             0202*  ;     and %0000011
04575B             0203*  ;     add a,l
04575B             0204*  ;     ld l,a
04575B             0205*  ;     ld a,0
04575B             0206*  ;     adc a,h
04575B             0207*  ;     ld h,a
04575B             0208*  ;     ld (bg_bufferId),hl
04575B             0209*  ; @@:
04575B             0210*  ;     call vdu_buff_select
04575B             0211*  ;     ld bc,0
04575B             0212*  ;     ld de,(bg_y_plot)
04575B             0213*  ;     inc de
04575B             0214*  ;     call vdu_plot_bmp
04575B             0215*  ; ; all done
04575B             0216*  ;     ret
04575B             0217*  
04575B             0218*  ; ###### TODO: NEW CODE TO IMPLEMENT ######
04575B             0219*  tile_pad_small: equ 1
04575B             0220*  tile_pad_med: equ 2
04575B             0221*  tile_pad_large: equ 3
04575B             0222*  tile_pad_huge: equ 4
04575B             0223*  tile_fireball_turret: equ 5
04575B             0224*  tile_laser_turret: equ 6
04575B             0225*  tile_twin_laser_turret: equ 7
04575B             0226*  tile_gatling_turret: equ 8
04575B             0227*  tile_electrode_r: equ 9
04575B             0228*  tile_electrode_u: equ 10
04575B             0229*  tile_piston_r: equ 11
04575B             0230*  tile_piston_u: equ 12
04575B             0231*  tile_spark_r: equ 13
04575B             0232*  tile_spark_u: equ 14
04575B             0233*  tile_flame_r: equ 15
04575B             0234*  tile_flame_u: equ 16
04575B             0235*  
04575B             0236*  active_tile_timer: equ 24 ; 2/10ths of a second
04575B             0237*  tile_activation_routines:
04575B 8E 57 04    0238*      dl activate_null_tile ; dummy spacer since tiled is 1-based
04575E A1 57 04    0239*      dl activate_pad_small
045761 8E 57 04    0240*      dl activate_null_tile  ;  activate_pad_med
045764 8E 57 04    0241*      dl activate_null_tile  ;  activate_pad_large
045767 8E 57 04    0242*      dl activate_null_tile  ;  activate_pad_huge
04576A 8E 57 04    0243*      dl activate_null_tile  ;  activate_fireball_turret
04576D 8E 57 04    0244*      dl activate_null_tile  ;  activate_laser_turret
045770 8E 57 04    0245*      dl activate_null_tile  ;  activate_twin_laser_turret
045773 8E 57 04    0246*      dl activate_null_tile  ;  activate_gatling_turret
045776 8E 57 04    0247*      dl activate_null_tile  ;  activate_electrode_r
045779 8E 57 04    0248*      dl activate_null_tile  ;  activate_electrode_u
04577C 8E 57 04    0249*      dl activate_null_tile  ;  activate_piston_r
04577F 8E 57 04    0250*      dl activate_null_tile  ;  activate_piston_u
045782 8E 57 04    0251*      dl activate_null_tile  ;  activate_spark_r
045785 8E 57 04    0252*      dl activate_null_tile  ;  activate_spark_u
045788 8E 57 04    0253*      dl activate_null_tile  ;  activate_flame_r
04578B 8E 57 04    0254*      dl activate_null_tile  ;  activate_flame_u
04578E             0255*  ; end tile_activation_routines
04578E             0256*  
04578E             0257*  activate_null_tile:
04578E C9          0258*      ret ; dummy routine, do nothing
04578F             0259*  
04578F             0260*  ; ld_act_laser_turret:
04578F             0261*  ;     ; call sprite_variables_to_stack
04578F             0262*  
04578F             0263*  ;     ld hl,move_laser_turret
04578F             0264*  ;     ld (sprite_move_program),hl
04578F             0265*  
04578F             0266*  ;     xor a
04578F             0267*  ;     ld (sprite_animation),a
04578F             0268*  ;     ld (sprite_move_step),a
04578F             0269*  
04578F             0270*  ;     call rand_8     ; snag a random number
04578F             0271*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
04578F             0272*  ;     add a,64 ; range is now 64-127
04578F             0273*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
04578F             0274*  
04578F             0275*  ;     ld a,%10 ; collides with laser but not player
04578F             0276*  ;     ld (iy+sprite_collisions),a
04578F             0277*  
04578F             0278*  ;     ld a,#10 ; BCD
04578F             0279*  ;     ld (sprite_points),a
04578F             0280*  ;     ld a,0 ; binary
04578F             0281*  ;     ld (sprite_shield_damage),a
04578F             0282*  
04578F             0283*  ;     ld hl,tile_fireball_turret ; dt_ld_act loads this to sprite_base_bufferId
04578F             0284*  ;     jp dt_ld_act
04578F             0285*  
04578F             0286*  
04578F             0287*  ; ; moves active tile sprites down one pixel in sync with tiles movement
04578F             0288*  ; ; deletes sprites from table when they wrap around to top of screen
04578F             0289*  ; move_active_tiles:
04578F             0290*  ; ; get current position
04578F             0291*  ;     ld a,(sprite_y+1) ; we only need the integer part
04578F             0292*  ;     inc a
04578F             0293*  ; ; are we at the bottom of the screen?
04578F             0294*  ;     jr nz,move_active_tiles_draw_sprite ; nope
04578F             0295*  ; ; otherwise kill sprite
04578F             0296*  ;     ld a,%10000000 ; any bit set in high nibble means sprite will die
04578F             0297*  ;     ld (iy+sprite_collisions),a
04578F             0298*  ;     ret ; debug
04578F             0299*  ; move_active_tiles_draw_sprite:
04578F             0300*  ;     ld (sprite_y+1),a ; update tile y position integer part
04578F             0301*  ;     ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
04578F             0302*  ;     ; call vdu_bmp_draw ; convert to vdu_bmp_plot ; draw it
04578F             0303*  ;     ret ; and done
04578F             0304*  
04578F             0305*  
04578F             0306*  ; move_landing_pad:
04578F             0307*  ;     call move_active_tiles
04578F             0308*  ;     call check_collisions
04578F             0309*  ; ; is it time to launch an enemy?
04578F             0310*  ;     ld hl,sprite_move_timer
04578F             0311*  ;     dec (hl)
04578F             0312*  ;     jp nz,move_enemies_loop_return
04578F             0313*  ;     call enemy_spawn_seeker
04578F             0314*  ;     ; reset move timer so can spawn again if player doesn't take us out
04578F             0315*  ;     call rand_8     ; snag a random number
04578F             0316*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
04578F             0317*  ;     add a,64 ; range is now 64-127
04578F             0318*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn an enemy
04578F             0319*  ;     ret
04578F             0320*  
04578F             0321*  
04578F             0322*  ; move_laser_turret:
04578F             0323*  ; ; compute orientation to player
04578F             0324*  ;     call orientation_to_player
04578F             0325*  ; ; h.l 8.8 fixed angle256 to player
04578F             0326*  ; ; bc and de as signed 16-bit integers
04578F             0327*  ; ; representing delta-x/y *to* target respectively
04578F             0328*  ;     ld (Bearing_t),hl
04578F             0329*  ;     ld hl,0x0400
04578F             0330*  ;     ld (Vp),hl
04578F             0331*  ;     call targeting_computer
04578F             0332*  ;     ld (sprite_heading),hl ; store bearing to player
04578F             0333*  ; ; is it time to launch a fireball?
04578F             0334*  ;     ld hl,sprite_move_timer
04578F             0335*  ;     dec (hl)
04578F             0336*  ;     jp nz,move_laser_turret_boilerplate
04578F             0337*  ;     call fireballs_init
04578F             0338*  ;     ; reset move timer so can fire again if player doesn't take us out
04578F             0339*  ;     call rand_8     ; snag a random number
04578F             0340*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
04578F             0341*  ;     add a,64 ; range is now 64-127
04578F             0342*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
04578F             0343*  ; move_laser_turret_boilerplate:
04578F             0344*  ;     call move_active_tiles
04578F             0345*  ;     call check_collisions
04578F             0346*  ;     ret
04578F             0347*  
04578F             0348*  
04578F             0349*  ; fireballs_init:
04578F             0350*  ;     ; call sprite_variables_to_stack
04578F             0351*  
04578F             0352*  ;     ld hl,fireballs
04578F             0353*  ;     ld (sprite_base_bufferId),hl
04578F             0354*  
04578F             0355*  ;     ld hl,move_fireballs
04578F             0356*  ;     ld (sprite_move_program),hl
04578F             0357*  
04578F             0358*  ;     ld a,%11 ; collides with laser and player
04578F             0359*  ;     ; ld a,%10 ; collides with laser DEBUG
04578F             0360*  ;     ld (iy+sprite_collisions),a
04578F             0361*  
04578F             0362*  ;     ld hl,(Vp)
04578F             0363*  ;     ld (sprite_vel),hl
04578F             0364*  ;     ld hl,(Vp_x)
04578F             0365*  ;     ld (sprite_xvel),hl
04578F             0366*  ;     ld hl,(Vp_y)
04578F             0367*  ;     inc h ; account for ground movement
04578F             0368*  ;     ld (sprite_yvel),hl
04578F             0369*  
04578F             0370*  ;     xor a ; zero a
04578F             0371*  ;     ld (sprite_animation),a
04578F             0372*  ;     ld (sprite_move_step),a
04578F             0373*  ;     ld (sprite_move_timer),a
04578F             0374*  
04578F             0375*  ;     ld a,6 ; 1/10th of a second timer
04578F             0376*  ;     ld (sprite_animation_timer),a
04578F             0377*  
04578F             0378*  ;     ld a,0x00 ; BCD
04578F             0379*  ;     ld (sprite_points),a
04578F             0380*  ;     ld a,1 ; binary
04578F             0381*  ;     ld (sprite_shield_damage),a
04578F             0382*  
04578F             0383*  ;     call table_add_record ; plops that on the sprite stack for later
04578F             0384*  ;     ; call sprite_variables_from_stack ; come back to where we started
04578F             0385*  ;     ret
04578F             0059       include "tile_pad_small.inc"
04578F             0001*  pad_small_defaults:
04578F 01          0002*      db tile_pad_small	    ; type
045790 0A 01 00    0003*      dl BUF_PAD      	    ; base_bufferId
045793 1A 1C 04    0004*      dl move_enemy_seeker	; move_program
045796 02          0005*      db collides_with_laser  ; collisions
045797 10          0006*      db 16	                ; dim_x
045798 10          0007*      db 16                   ; dim_y
045799 01          0008*      db 1                    ; num_orientations
04579A 01          0009*      db 1                    ; num_animations
04579B 00          0010*      db 0	                ; animation
04579C 00          0011*      db 0	                ; animation_timer
04579D 01          0012*      db 1	                ; move_timer
04579E 00          0013*      db 0	                ; move_step
04579F 05          0014*      db 5	                ; points
0457A0 00          0015*      db 0	                ; shield_damage
0457A1             0016*  
0457A1             0017*  activate_pad_small:
0457A1 FD 21 8F 57 0018*      ld iy,pad_small_defaults
       04          
0457A6 06 01       0019*      ld b,1 ; number of frames
0457A8             0020*  ; get next available sprite id
0457A8 CD 09 57 04 0021*      call spawn_sprite_from_tile
0457AC D0          0022*      ret nc ; no carry means no free sprite slots, so we go home
0457AD             0023*  ; TODO: other specific initialization
0457AD C9          0024*      ret
0457AE             0025*  ; end activate_pad_small
0457AE             0026*  
0457AE             0027*  move_pad_small:
0457AE FD 35 24    0028*      dec (iy+sprite_move_timer)
0457B1 C0          0029*      ret nz
0457B2 3E 18       0030*      ld a,24
0457B4 FD 77 24    0031*      ld (iy+sprite_move_timer),a
0457B7 CD F1 1B 04 0032*      call enemy_spawn_seeker
0457BB C9          0033*      ret
0457BC             0060   
0457BC             0061   ; --- MAIN PROGRAM FILE ---
0457BC 57 65 6C 63 0062   hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
0457D7 4C 6F 61 64 0063   loading_ui: asciz "Loading UI"
       69 6E 67 20 
       55 49 00    
0457E2 4C 6F 61 64 0064   loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
0457F0 50 72 65 73 0065   loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
04580B             0066   
04580B             0067   init:
04580B             0068   ; clear all buffers
04580B CD 63 16 04 0069       call vdu_clear_all_buffers
04580F             0070   
04580F             0071   ; set up the display
04580F 3E 08       0072       ld a,8;+128 ; 136   320   240   64    60hz double-buffered
045811 CD 4D 15 04 0073       call vdu_set_screen_mode
045815 AF          0074       xor a
045816 CD 5E 15 04 0075       call vdu_set_scaling
04581A             0076   
04581A             0077   ; ; enable additional audio channels
04581A             0078   ; 	call vdu_enable_channels
04581A             0079   
04581A             0080   ; set text background color
04581A 3E 9A       0081       ld a,26+128 ; violet
04581C CD B5 14 04 0082       call vdu_colour_text
045820             0083   
045820             0084   ; set text foreground color
045820 3E 2F       0085       ld a,47 ; aaaaff lavenderish
045822 CD B5 14 04 0086       call vdu_colour_text
045826             0087   
045826             0088   ; set gfx bg color
045826 AF          0089       xor a ; plotting mode 0
045827 3E 9A       0090       ld a,26+128 ; violet
045829 CD C6 14 04 0091       call vdu_gcol
04582D CD 84 14 04 0092       call vdu_cls
045831             0093   
045831             0094   ; set the cursor off
045831 CD 4C 14 04 0095       call vdu_cursor_off
045835             0096   
045835             0097   ; VDU 28, left, bottom, right, top: Set text viewport **
045835             0098   ; MIND THE LITTLE-ENDIANESS
045835             0099   ; inputs: c=left,b=bottom,e=right,d=top
045835 0E 00       0100       ld c,0 ; left
045837 16 1D       0101       ld d,29 ; top
045839 1E 27       0102       ld e,39 ; right
04583B 06 1D       0103       ld b,29; bottom
04583D CD DD 14 04 0104       call vdu_set_txt_viewport
045841             0105   
045841             0106   ; print loading ui message
045841 21 D7 57 04 0107       ld hl,loading_ui
045845 CD 77 00 04 0108       call printString
045849 CD 89 14 04 0109       call vdu_flip
04584D             0110   
04584D             0111   ; load UI images
04584D CD 92 12 04 0112       call load_ui_images
045851             0113   
045851             0114   ; load sprites
045851 CD D0 11 04 0115       call img_load_init ; sets up the animated load screen
045855 CD A5 12 04 0116       call load_sprite_images
045859             0117   
045859             0118   ; load tileset_ptrs
045859 CD B6 12 04 0119       call load_tilesets
04585D             0120   
04585D             0121   ; ; load sound effects ; TODO
04585D             0122   ; 	ld bc,SFX_num_buffers
04585D             0123   ; 	ld hl,SFX_buffer_id_lut
04585D             0124   ; 	ld (cur_buffer_id_lut),hl
04585D             0125   ; 	ld hl,SFX_load_routines_table
04585D             0126   ; 	ld (cur_load_jump_table),hl
04585D             0127   ; 	call sfx_load_main
04585D             0128   
04585D             0129   ; print loading complete message and wait for user keypress
04585D             0130       ; call vdu_cls
04585D             0131       ; ld hl,loading_complete
04585D             0132       ; call printString
04585D CD 89 14 04 0133       call vdu_flip
045861 CD 11 06 04 0134       call waitKeypress
045865             0135   
045865             0136   ; set up display for gameplay
045865             0137       ; ld a,8
045865 3E 14       0138       ld a,20
045867 CD 4D 15 04 0139       call vdu_set_screen_mode
04586B AF          0140       xor a
04586C CD 5E 15 04 0141       call vdu_set_scaling
045870 CD 4C 14 04 0142       call vdu_cursor_off
045874             0143   ; load fonts
045874 CD 96 11 04 0144   	call fonts_load
045878             0145   ; select font
045878 21 05 FA 00 0146       ld hl,computer_pixel_7_8x16
04587C 3E 01       0147       ld a,1 ; flags
04587E CD 1A 18 04 0148       call vdu_font_select
045882             0149   ; plot bezel art
045882 21 00 00 00 0150       ld hl,BUF_BEZEL_L
045886 CD 71 15 04 0151       call vdu_buff_select
04588A 01 00 00 00 0152       ld bc,0
04588E 11 00 00 00 0153       ld de,0
045892 CD CD 18 04 0154       call vdu_plot_bmp
045896 21 01 00 00 0155       ld hl,BUF_BEZEL_R
04589A CD 71 15 04 0156       call vdu_buff_select
04589E 01 80 01 00 0157       ld bc,384
0458A2 11 00 00 00 0158       ld de,0
0458A6 CD CD 18 04 0159       call vdu_plot_bmp
0458AA             0160   ; set gfx origin and viewport to playing field window
0458AA 01 80 00 00 0161       ld bc,origin_left
0458AE 11 00 00 00 0162       ld de,origin_top
0458B2 CD 09 15 04 0163       call vdu_set_gfx_origin
0458B6 01 00 00 00 0164       ld bc,field_left
0458BA 11 40 00 00 0165       ld de,field_top
0458BE DD 21 FF 00 0166       ld ix,field_right
       00          
0458C3 FD 21 7F 01 0167       ld iy,field_bottom
       00          
0458C8 CD 24 15 04 0168       call vdu_set_gfx_viewport
0458CC             0169   ; set background color
0458CC 3E 9A       0170       ld a,26+128 ; violet
0458CE CD C6 14 04 0171       call vdu_gcol
0458D2 CD 97 14 04 0172       call vdu_clg
0458D6             0173   ; VDU 28, left, bottom, right, top: Set text viewport **
0458D6 0E 00       0174       ld c,0 ; left
0458D8 16 02       0175       ld d,2 ; top
0458DA 1E 3E       0176       ld e,62 ; right
0458DC 06 28       0177       ld b,40; bottom
0458DE CD DD 14 04 0178       call vdu_set_txt_viewport
0458E2             0179   
0458E2             0180   ; initialize the global timestamp
0458E2 CD C0 13 04 0181       call timestamp_tick
0458E6             0182   
0458E6             0183   ; done with init
0458E6 C9          0184       ret
0458E7             0185   
0458E7             0186   main:
0458E7             0187   ; start a new game
0458E7 CD 1C 55 04 0188       call game_initialize
0458EB             0189   
0458EB             0190   main_loop:
0458EB             0191   ; update the global timestamp
0458EB CD C0 13 04 0192       call timestamp_tick
0458EF             0193   
0458EF             0194   ; do gamestate logic
0458EF CD 08 55 04 0195       call do_game
0458F3             0196   
0458F3             0197   ; wait for the next vblank mitigate flicker and for loop timing
0458F3 CD F8 14 04 0198       call vdu_vblank
0458F7             0199       ; call vdu_vblank ; DEBUG
0458F7             0200   
0458F7             0201   ; poll keyboard for escape keypress
0458F7 3E 08       0202       ld a, $08 ; code to send to MOS
0458F9 5B CF       0203       rst.lil $08 ; get IX pointer to System Variables
0458FB             0204   
0458FB DD 7E 05    0205       ld a, (ix + $05) ; get ASCII code of key pressed
0458FE FE 1B       0206       cp 27 ; check if 27 (ascii code for ESC)
045900 CA 08 59 04 0207       jp z, main_end ; if pressed, jump to exit
045904             0208   
045904 C3 EB 58 04 0209       jp main_loop
045908             0210   
045908             0211   main_end:
045908 CD 3E 14 04 0212       call vdu_cursor_on
04590C C9          0213       ret

PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C CD 44 6D 04 0015        call init
040050 CD 30 6E 04 0016        call main
040054             0017    
040054             0018    exit:
040054 FD E1       0019        pop iy
040056 DD E1       0020        pop ix
040058 D1          0021        pop de
040059 C1          0022        pop bc
04005A F1          0023        pop af
04005B 21 00 00 00 0024        ld hl,0
04005F             0025    
04005F C9          0026        ret
040060             0027    
040060             0028    ; API INCLUDES
040060             0029        include "mos_api.inc"
040060             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*   ; Title:	AGON MOS - API for user projects
040060             0003*   ; Author:	Dean Belfield
040060             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*   ;			Added MOS error codes for return in HL
040060             0006*   ; Created:	03/08/2022
040060             0007*   ; Last Updated:	10/08/2023
040060             0008*   ;
040060             0009*   ; Modinfo:
040060             0010*   ; 05/08/2022:	Added mos_feof
040060             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*   ; 13/10/2022:	Added mos_oscli
040060             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*   ; 19/05/2023:	Added sysvar_scrMode
040060             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*   ; 03/08/2023:	Added mos_setkbvector
040060             0028*   ; 10/08/2023:	Added mos_getkbmap
040060             0029*   
040060             0030*   ; VDP control (VDU 23, 0, n)
040060             0031*   ;
040060             0032*   vdp_gp:				EQU 80h
040060             0033*   vdp_keycode:		EQU 81h
040060             0034*   vdp_cursor:			EQU	82h
040060             0035*   vdp_scrchar:		EQU	83h
040060             0036*   vdp_scrpixel:		EQU	84h
040060             0037*   vdp_audio:			EQU	85h
040060             0038*   vdp_mode:			EQU	86h
040060             0039*   vdp_rtc:			EQU	87h
040060             0040*   vdp_keystate:		EQU	88h
040060             0041*   vdp_logicalcoords:	EQU	C0h
040060             0042*   vdp_terminalmode:	EQU	FFh
040060             0043*   
040060             0044*   ; MOS high level functions
040060             0045*   ;
040060             0046*   mos_getkey:			EQU	00h
040060             0047*   mos_load:			EQU	01h
040060             0048*   mos_save:			EQU	02h
040060             0049*   mos_cd:				EQU	03h
040060             0050*   mos_dir:			EQU	04h
040060             0051*   mos_del:			EQU	05h
040060             0052*   mos_ren:			EQU	06h
040060             0053*   mos_mkdir:			EQU	07h
040060             0054*   mos_sysvars:		EQU	08h
040060             0055*   mos_editline:		EQU	09h
040060             0056*   mos_fopen:			EQU	0Ah
040060             0057*   mos_fclose:			EQU	0Bh
040060             0058*   mos_fgetc:			EQU	0Ch
040060             0059*   mos_fputc:			EQU	0Dh
040060             0060*   mos_feof:			EQU	0Eh
040060             0061*   mos_getError:		EQU	0Fh
040060             0062*   mos_oscli:			EQU	10h
040060             0063*   mos_copy:			EQU	11h
040060             0064*   mos_getrtc:			EQU	12h
040060             0065*   mos_setrtc:			EQU	13h
040060             0066*   mos_setintvector:	EQU	14h
040060             0067*   mos_uopen:			EQU	15h
040060             0068*   mos_uclose:			EQU	16h
040060             0069*   mos_ugetc:			EQU	17h
040060             0070*   mos_uputc:			EQU	18h
040060             0071*   mos_getfil:			EQU	19h
040060             0072*   mos_fread:			EQU	1Ah
040060             0073*   mos_fwrite:			EQU	1Bh
040060             0074*   mos_flseek:			EQU	1Ch
040060             0075*   mos_setkbvector:	EQU	1Dh
040060             0076*   mos_getkbmap:		EQU	1Eh
040060             0077*   
040060             0078*   ; MOS program exit codes
040060             0079*   ;
040060             0080*   EXIT_OK:				EQU  0;	"OK",
040060             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*   ; FatFS file access functions
040060             0103*   ;
040060             0104*   ffs_fopen:			EQU	80h
040060             0105*   ffs_fclose:			EQU	81h
040060             0106*   ffs_fread:			EQU	82h
040060             0107*   ffs_fwrite:			EQU	83h
040060             0108*   ffs_flseek:			EQU	84h
040060             0109*   ffs_ftruncate:		EQU	85h
040060             0110*   ffs_fsync:			EQU	86h
040060             0111*   ffs_fforward:		EQU	87h
040060             0112*   ffs_fexpand:		EQU	88h
040060             0113*   ffs_fgets:			EQU	89h
040060             0114*   ffs_fputc:			EQU	8Ah
040060             0115*   ffs_fputs:			EQU	8Bh
040060             0116*   ffs_fprintf:		EQU	8Ch
040060             0117*   ffs_ftell:			EQU	8Dh
040060             0118*   ffs_feof:			EQU	8Eh
040060             0119*   ffs_fsize:			EQU	8Fh
040060             0120*   ffs_ferror:			EQU	90h
040060             0121*   
040060             0122*   ; FatFS directory access functions
040060             0123*   ;
040060             0124*   ffs_dopen:			EQU	91h
040060             0125*   ffs_dclose:			EQU	92h
040060             0126*   ffs_dread:			EQU	93h
040060             0127*   ffs_dfindfirst:		EQU	94h
040060             0128*   ffs_dfindnext:		EQU	95h
040060             0129*   
040060             0130*   ; FatFS file and directory management functions
040060             0131*   ;
040060             0132*   ffs_stat:			EQU	96h
040060             0133*   ffs_unlink:			EQU	97h
040060             0134*   ffs_rename:			EQU	98h
040060             0135*   ffs_chmod:			EQU	99h
040060             0136*   ffs_utime:			EQU	9Ah
040060             0137*   ffs_mkdir:			EQU	9Bh
040060             0138*   ffs_chdir:			EQU	9Ch
040060             0139*   ffs_chdrive:		EQU	9Dh
040060             0140*   ffs_getcwd:			EQU	9Eh
040060             0141*   
040060             0142*   ; FatFS volume management and system configuration functions
040060             0143*   ;
040060             0144*   ffs_mount:			EQU	9Fh
040060             0145*   ffs_mkfs:			EQU	A0h
040060             0146*   ffs_fdisk:			EQU	A1h
040060             0147*   ffs_getfree:		EQU	A2h
040060             0148*   ffs_getlabel:		EQU	A3h
040060             0149*   ffs_setlabel:		EQU	A4h
040060             0150*   ffs_setcp:			EQU	A5h
040060             0151*   
040060             0152*   ; File access modes
040060             0153*   ;
040060             0154*   fa_read:			EQU	01h
040060             0155*   fa_write:			EQU	02h
040060             0156*   fa_open_existing:	EQU	00h
040060             0157*   fa_create_new:		EQU	04h
040060             0158*   fa_create_always:	EQU	08h
040060             0159*   fa_open_always:		EQU	10h
040060             0160*   fa_open_append:		EQU	30h
040060             0161*   
040060             0162*   ; System variable indexes for api_sysvars
040060             0163*   ; Index into _sysvars in globals.inc
040060             0164*   ;
040060             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*   
040060             0192*   ; Flags for the VPD protocol
040060             0193*   ;
040060             0194*   vdp_pflag_cursor:		EQU	00000001b
040060             0195*   vdp_pflag_scrchar:		EQU	00000010b
040060             0196*   vdp_pflag_point:		EQU	00000100b
040060             0197*   vdp_pflag_audio:		EQU	00001000b
040060             0198*   vdp_pflag_mode:			EQU	00010000b
040060             0199*   vdp_pflag_rtc:			EQU	00100000b
040060             0200*   
040060             0201*   ;
040060             0202*   ; FatFS structures
040060             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*   ;
040060             0205*   ; Object ID and allocation information (FFOBJID)
040060             0206*   ;
040060             0207*   ; Indexes into FFOBJID structure
040060             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*   ;
040060             0215*   ; File object structure (FIL)
040060             0216*   ;
040060             0217*   ; Indexes into FIL structure
040060             0218*   fil_obj:		EQU 0	; 15: Object identifier
040060             0219*   fil_flag:		EQU	15 	;  1: File status flags
040060             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*   ;
040060             0227*   ; Directory object structure (DIR)
040060             0228*   ; Indexes into DIR structure
040060             0229*   dir_obj:		EQU  0	; 15: Object identifier
040060             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*   dir_clust:		EQU	19	;  4: Current cluster
040060             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*   ;
040060             0237*   ; File information structure (FILINFO)
040060             0238*   ;
040060             0239*   ; Indexes into FILINFO structure
040060             0240*   filinfo_fsize:		EQU 0	;   4: File size
040060             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*   ;
040060             0247*   ; Macro for calling the API
040060             0248*   ; Parameters:
040060             0249*   ; - function: One of the function numbers listed above
040060             0250*   ;
040060             0251*   	MACRO	MOSCALL	function
040060             0252*   			LD	A, function
040060             0253*   			RST.LIL	08h
040060             0254*   	ENDMACRO
040060             0030        include "functions.inc"
040060 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040100             0002*   
040100             0003*       MACRO printChar char
040100             0004*       LD A, char
040100             0005*       RST.LIL 10h
040100             0006*       ENDMACRO
040100             0007*   
040100             0008*   ; Simulated call to subroutine at HL
040100             0009*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040100             0010*   ; outputs: whatever the subroutine does, including HL and BC
040100             0011*   ; destroys: only what the subroutine does, but always BC
040100             0012*       MACRO callHL
040100             0013*       ld bc,@F ; Address of first instruction after the jump
040100             0014*       push bc ; which constitutes the return address
040100             0015*       jp (hl) ; Jump to the address in HL
040100             0016*   @@:
040100             0017*       ENDMACRO
040100             0018*   
040100             0019*   ; Simulated call to subroutine at IX
040100             0020*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040100             0021*   ; outputs: whatever the subroutine does, including IX and BC
040100             0022*   ; destroys: only what the subroutine does, but always BC
040100             0023*       MACRO callIX
040100             0024*       ld bc,@F ; Address of first instruction after the jump
040100             0025*       push bc ; which constitutes the return address
040100             0026*       jp (ix) ; Jump to the address in IX
040100             0027*   @@:
040100             0028*       ENDMACRO
040100             0029*   
040100             0030*   ; Simulated call to soubroutinte at IY
040100             0031*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040100             0032*   ; outputs: whatever the subroutine does, including IY and BC
040100             0033*   ; destroys: only what the subroutine does, but always BC
040100             0034*       MACRO callIY
040100             0035*       ld bc,@F ; Address of first instruction after the jump
040100             0036*       push bc ; which constitutes the return address
040100             0037*       jp (iy) ; Jump to the address in IY
040100             0038*   @@:
040100             0039*       ENDMACRO
040100             0040*   
040100             0041*   ; put the value in HLU into the accumulator
040100             0042*   ; destroys: af
040100             0043*       MACRO HLU_TO_A
040100             0044*       push hl ; 4 cycles
040100             0045*       inc sp ; 1 cycle
040100             0046*       pop af ; 4 cycles
040100             0047*       dec sp ; 1 cycle
040100             0048*       ; 10 cycles total
040100             0049*       ENDMACRO
040100             0050*   
040100             0051*   A_TO_HLU:
040100             0052*       ; call is 7 cycles
040100 22 0D 01 04 0053*       ld (@scratch),hl ; 7 cycles
040104 32 0F 01 04 0054*       ld (@scratch+2),a ; 5 cycles
040108 2A 0D 01 04 0055*       ld hl,(@scratch) ; 7 cycles
04010C C9          0056*       ret ; 6 cycles
04010D             0057*       ; 25 cycles total
04010D 00 00 00    0058*   @scratch: dl 0
040110             0059*   
040110             0060*       ; TODO: implement this
040110             0061*       ; MACRO A_TO_HLU
040110             0062*       ;     push.s af
040110             0063*       ;     inc sp
040110             0064*       ;     push.s hl
040110             0065*       ;     pop hl
040110             0066*       ;     inc sp
040110             0067*       ;     inc sp
040110             0068*       ; ENDMACRO
040110             0069*   
040110             0070*       MACRO PUSH_ALL
040110             0071*       ex af,af'
040110             0072*       exx
040110             0073*       push af
040110             0074*       push hl
040110             0075*       push bc
040110             0076*       push de
040110             0077*   
040110             0078*       ex af,af'
040110             0079*       exx
040110             0080*       push af
040110             0081*       push hl
040110             0082*       push bc
040110             0083*       push de
040110             0084*       push ix
040110             0085*       push iy
040110             0086*       ENDMACRO
040110             0087*   
040110             0088*       MACRO POP_ALL
040110             0089*       pop iy
040110             0090*       pop ix
040110             0091*       pop de
040110             0092*       pop bc
040110             0093*       pop hl
040110             0094*       pop af
040110             0095*       ex af,af'
040110             0096*       exx
040110             0097*   
040110             0098*       pop de
040110             0099*       pop bc
040110             0100*       pop hl
040110             0101*       pop af
040110             0102*       ex af,af'
040110             0103*       exx
040110             0104*       ENDMACRO
040110             0105*   
040110             0106*   ; Print a zero-terminated string inline with code, e.g.:
040110             0107*   ;
040110             0108*   ;    call printInline
040110             0109*   ;    ASCIZ "Hello, world!\r\n"
040110             0110*   ;
040110             0111*   ; Destroys: HL,AF
040110             0112*   printInline:
040110 E1          0113*       pop hl ; get the return address = pointer to start of string
040111 CD 17 01 04 0114*       call printString ; HL advances to end of string
040115 E5          0115*       push hl ; restore the return address = pointer to end of string
040116 C9          0116*       ret
040117             0117*   
040117             0118*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040117             0119*   ; Print a zero-terminated string
040117             0120*   ; HL: Pointer to string
040117             0121*   printString:
040117 C5          0122*       PUSH BC
040118 01 00 00 00 0123*       LD BC,0
04011C 3E 00       0124*       LD A,0
04011E 5B DF       0125*       RST.LIL 18h
040120 C1          0126*       POP BC
040121 C9          0127*       RET
040122             0128*   ; print a VDU sequence
040122             0129*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
040122             0130*   sendVDUsequence:
040122 C5          0131*       PUSH BC
040123 01 00 00 00 0132*       LD BC, 0
040127 4E          0133*       LD C, (HL)
040128 5B DF       0134*       RST.LIL 18h
04012A C1          0135*       POP BC
04012B C9          0136*       RET
04012C             0137*   ; Print Newline sequence to VDP
04012C             0138*   ; destroys bc
04012C             0139*   printNewLine:
04012C F5          0140*       push af ; for some reason rst.lil 10h sets carry flag
04012D 3E 0D       0141*       LD A, '\r'
04012F 5B D7       0142*       RST.LIL 10h
040131 3E 0A       0143*       LD A, '\n'
040133 5B D7       0144*       RST.LIL 10h
040135 F1          0145*       pop af
040136 C9          0146*       RET
040137             0147*   
040137             0148*   ; Print a 24-bit HEX number
040137             0149*   ; HLU: Number to print
040137             0150*   printHex24:
040137             0151*       HLU_TO_A
040137 E5          0001*M1     push hl ; 4 cycles
040138 33          0002*M1     inc sp ; 1 cycle
040139 F1          0003*M1     pop af ; 4 cycles
04013A 3B          0004*M1     dec sp ; 1 cycle
04013B             0005*M1     ; 10 cycles total
04013B CD 45 01 04 0152*       CALL printHex8
04013F             0153*   ; Print a 16-bit HEX number
04013F             0154*   ; HL: Number to print
04013F             0155*   printHex16:
04013F 7C          0156*       LD A,H
040140 CD 45 01 04 0157*       CALL printHex8
040144 7D          0158*       LD A,L
040145             0159*   ; Print an 8-bit HEX number
040145             0160*   ; A: Number to print
040145             0161*   printHex8:
040145 4F          0162*       LD C,A
040146 1F          0163*       RRA
040147 1F          0164*       RRA
040148 1F          0165*       RRA
040149 1F          0166*       RRA
04014A CD 4F 01 04 0167*       CALL @F
04014E 79          0168*       LD A,C
04014F             0169*   @@:
04014F E6 0F       0170*       AND 0Fh
040151 C6 90       0171*       ADD A,90h
040153 27          0172*       DAA
040154 CE 40       0173*       ADC A,40h
040156 27          0174*       DAA
040157 5B D7       0175*       RST.LIL 10h
040159 C9          0176*       RET
04015A             0177*   
04015A             0178*   printHexA:
04015A F5          0179*       push af
04015B C5          0180*       push bc
04015C CD 45 01 04 0181*       call printHex8
040160 3E 20       0182*       ld a,' '
040162 5B D7       0183*       rst.lil 10h
040164 C1          0184*       pop bc
040165 F1          0185*       pop af
040166 C9          0186*       ret
040167             0187*   
040167             0188*   printHexHL:
040167 F5          0189*       push af
040168 C5          0190*       push bc
040169 CD 3F 01 04 0191*       call printHex16
04016D 3E 20       0192*       ld a,' '
04016F 5B D7       0193*       rst.lil 10h
040171 C1          0194*       pop bc
040172 F1          0195*       pop af
040173 C9          0196*       ret
040174             0197*   
040174             0198*   printHexUHL:
040174 F5          0199*       push af
040175 C5          0200*       push bc
040176 CD 37 01 04 0201*       call printHex24
04017A 3E 20       0202*       ld a,' '
04017C 5B D7       0203*       rst.lil 10h
04017E C1          0204*       pop bc
04017F F1          0205*       pop af
040180 C9          0206*       ret
040181             0207*   
040181             0208*   printHexAUHL:
040181 F5          0209*       push af
040182 C5          0210*       push bc
040183 CD 45 01 04 0211*       call printHex8
040187 3E 2E       0212*       ld a,'.'
040189 5B D7       0213*       rst.lil 10h
04018B CD 37 01 04 0214*       call printHex24
04018F 3E 20       0215*       ld a,' '
040191 5B D7       0216*       rst.lil 10h
040193 C1          0217*       pop bc
040194 F1          0218*       pop af
040195 C9          0219*       ret
040196             0220*   
040196             0221*   printHexABHL:
040196             0222*   ; preserve registers
040196 C5          0223*       push bc ; b will be ok c will not
040197 F5          0224*       push af ; will get totally destroyed
040198             0225*   ; print a
040198 CD 45 01 04 0226*       call printHex8
04019C             0227*   ; print b
04019C 78          0228*       ld a,b
04019D CD 45 01 04 0229*       call printHex8
0401A1             0230*   ; print hl
0401A1 CD 3F 01 04 0231*       call printHex16
0401A5             0232*   ; restore registers
0401A5 F1          0233*       pop af
0401A6 C1          0234*       pop bc
0401A7 C9          0235*       ret
0401A8             0236*   
0401A8             0237*   printHexBHL:
0401A8             0238*   ; preserve registers
0401A8 C5          0239*       push bc ; b will be ok c will not
0401A9 F5          0240*       push af ; will get totally destroyed
0401AA             0241*   ; print b
0401AA 78          0242*       ld a,b
0401AB CD 45 01 04 0243*       call printHex8
0401AF             0244*   ; print hl
0401AF CD 3F 01 04 0245*       call printHex16
0401B3             0246*   ; restore registers
0401B3 F1          0247*       pop af
0401B4 C1          0248*       pop bc
0401B5 C9          0249*       ret
0401B6             0250*   
0401B6             0251*   printHexCDE:
0401B6             0252*   ; preserve registers
0401B6 C5          0253*       push bc ; b will be ok c will not
0401B7 F5          0254*       push af ; will get totally destroyed
0401B8             0255*   ; print c
0401B8 79          0256*       ld a,c
0401B9 CD 45 01 04 0257*       call printHex8
0401BD             0258*   ; print de
0401BD EB          0259*       ex de,hl
0401BE CD 3F 01 04 0260*       call printHex16
0401C2 EB          0261*       ex de,hl
0401C3             0262*   ; restore registers
0401C3 F1          0263*       pop af
0401C4 C1          0264*       pop bc
0401C5 C9          0265*       ret
0401C6             0266*   
0401C6             0267*   printHexUIX:
0401C6             0268*   ; store everything in scratch
0401C6 22 4F 06 04 0269*       ld (uhl),hl
0401CA ED 43 52 06 0270*       ld (ubc),bc
       04          
0401CF ED 53 55 06 0271*       ld (ude),de
       04          
0401D4 DD 22 58 06 0272*       ld (uix),ix
       04          
0401D9 FD 22 5B 06 0273*       ld (uiy),iy
       04          
0401DE F5          0274*       push af ; fml
0401DF             0275*   
0401DF 21 E6 05 04 0276*       ld hl,str_ixu
0401E3 CD 17 01 04 0277*       call printString
0401E7 2A 58 06 04 0278*       ld hl,(uix)
0401EB CD 37 01 04 0279*       call printHex24
0401EF CD 2C 01 04 0280*       call printNewLine
0401F3             0281*   
0401F3             0282*   ; restore everything
0401F3 2A 4F 06 04 0283*       ld hl, (uhl)
0401F7 ED 4B 52 06 0284*       ld bc, (ubc)
       04          
0401FC ED 5B 55 06 0285*       ld de, (ude)
       04          
040201 DD 2A 58 06 0286*       ld ix, (uix)
       04          
040206 FD 2A 5B 06 0287*       ld iy, (uiy)
       04          
04020B F1          0288*       pop af
04020C             0289*   ; all done
04020C C9          0290*       ret
04020D             0291*   
04020D             0292*   ; Print a 0x HEX prefix
04020D             0293*   DisplayHexPrefix:
04020D 3E 30       0294*       LD A, '0'
04020F 5B D7       0295*       RST.LIL 10h
040211 3E 78       0296*       LD A, 'x'
040213 5B D7       0297*       RST.LIL 10h
040215 C9          0298*       RET
040216             0299*   
040216             0300*       MACRO printDecBC
040216             0301*       push hl
040216             0302*       push bc
040216             0303*       pop hl
040216             0304*       call printDec
040216             0305*       pop hl
040216             0306*       ENDMACRO
040216             0307*   
040216             0308*       MACRO printDecDE
040216             0309*       push hl
040216             0310*       push de
040216             0311*       pop hl
040216             0312*       call printDec
040216             0313*       pop hl
040216             0314*       ENDMACRO
040216             0315*   
040216             0316*       MACRO printDecHL
040216             0317*       call printDec
040216             0318*       ENDMACRO
040216             0319*   
040216             0320*       MACRO printDecIX
040216             0321*       push hl
040216             0322*       push ix
040216             0323*       pop hl
040216             0324*       call printDec
040216             0325*       pop hl
040216             0326*       ENDMACRO
040216             0327*   
040216             0328*       MACRO printDecIY
040216             0329*       push hl
040216             0330*       push iy
040216             0331*       pop hl
040216             0332*       call printDec
040216             0333*       pop hl
040216             0334*       ENDMACRO
040216             0335*   
040216             0336*   
040216             0337*   ; Prints the right justified decimal value in HL without leading zeroes
040216             0338*   ; HL : Value to print
040216             0339*   ; preserves all registers and flags
040216             0340*   printDec:
040216             0341*   ; BEGIN MY CODE
040216             0342*   ; back up all the things
040216 F5          0343*       push af
040217 C5          0344*       push bc
040218 D5          0345*       push de
040219 E5          0346*       push hl
04021A             0347*   ; END MY CODE
04021A 11 42 02 04 0348*       LD DE, _printDecBuffer
04021E CD 52 02 04 0349*       CALL u24_to_ascii
040222             0350*   ; BEGIN MY CODE
040222             0351*   ; replace leading zeroes with spaces
040222 21 42 02 04 0352*       LD HL, _printDecBuffer
040226 06 07       0353*       ld B, 7 ; if HL was 0, we want to keep the final zero
040228             0354*   @loop:
040228 7E          0355*       LD A, (HL)
040229 FE 30       0356*       CP '0'
04022B C2 35 02 04 0357*       JP NZ, @done
04022F 3E 20       0358*       LD A, ' '
040231 77          0359*       LD (HL), A
040232 23          0360*       INC HL
040233             0361*       ; CALL vdu_cursor_forward
040233 10 F3       0362*       DJNZ @loop
040235             0363*   @done:
040235             0364*   ; END MY CODE
040235 21 42 02 04 0365*       LD HL, _printDecBuffer
040239 CD 17 01 04 0366*       CALL printString
04023D             0367*   ; BEGIN MY CODE
04023D             0368*   ; restore all the things
04023D E1          0369*       pop hl
04023E D1          0370*       pop de
04023F C1          0371*       pop bc
040240 F1          0372*       pop af
040241             0373*   ; END MY CODE
040241 C9          0374*       RET
040242 00 00 00 00 0375*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040252             0376*   
040252             0377*   ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
040252             0378*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040252             0379*   ; so it will allways be 8 characters length
040252             0380*   ; HL : Value to convert to string
040252             0381*   ; DE : pointer to buffer, at least 8 byte + 0
040252             0382*   u24_to_ascii:
040252 01 80 69 67 0383*       LD BC,-10000000
040256 CD 89 02 04 0384*       CALL @one_digit
04025A 01 C0 BD F0 0385*       LD BC,-1000000
04025E CD 89 02 04 0386*       CALL @one_digit
040262 01 60 79 FE 0387*       LD BC,-100000
040266 CD 89 02 04 0388*       CALL @one_digit
04026A 01 F0 D8 FF 0389*       LD BC,-10000
04026E CD 89 02 04 0390*       CALL @one_digit
040272 01 18 FC FF 0391*       LD BC,-1000
040276 CD 89 02 04 0392*       CALL @one_digit
04027A 01 9C FF FF 0393*       LD BC,-100
04027E CD 89 02 04 0394*       CALL @one_digit
040282 0E F6       0395*       LD C,-10
040284 CD 89 02 04 0396*       CALL @one_digit
040288 48          0397*       LD C,B
040289             0398*   @one_digit:
040289 3E 2F       0399*       LD A,'0'-1
04028B             0400*   @divide_me:
04028B 3C          0401*       INC A
04028C 09          0402*       ADD HL,BC
04028D 38 FC       0403*       JR C,@divide_me
04028F ED 42       0404*       SBC HL,BC
040291 12          0405*       LD (DE),A
040292 13          0406*       INC DE
040293 C9          0407*       RET
040294             0408*   
040294             0409*   print_u24:
040294 D5          0410*       push de
040295 E5          0411*       push hl
040296 11 42 02 04 0412*       ld de,_printDecBuffer
04029A CD 52 02 04 0413*       call u24_to_ascii
04029E 21 42 02 04 0414*       ld hl,_printDecBuffer
0402A2 CD 17 01 04 0415*       call printString
0402A6 3E 20       0416*       ld a,' '
0402A8 5B D7       0417*       rst.lil 10h
0402AA E1          0418*       pop hl
0402AB D1          0419*       pop de
0402AC C9          0420*       ret
0402AD             0421*   
0402AD             0422*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
0402AD             0423*   ; HL : Value to convert to string (integer part in H, fractional part in L)
0402AD             0424*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
0402AD             0425*   u168_to_ascii:
0402AD             0426*   ; add a leading space to make room for sign flag if needed
0402AD 3E 20       0427*       ld a,' '
0402AF 12          0428*       ld (de),a
0402B0 13          0429*       inc de
0402B1             0430*   ; Convert integer part
0402B1 E5          0431*       push hl ; Save HL (we’ll need the fractional part later)
0402B2 CD 6D 09 04 0432*       call hlu_udiv256 ; Shift to get integer portion in HL
0402B6 01 F0 D8 FF 0433*       ld bc, -10000
0402BA CD DD 02 04 0434*       call @one_int
0402BE 01 18 FC FF 0435*       ld bc, -1000
0402C2 CD DD 02 04 0436*       call @one_int
0402C6 01 9C FF FF 0437*       ld bc, -100
0402CA CD DD 02 04 0438*       call @one_int
0402CE 0E F6       0439*       ld c, -10
0402D0 CD DD 02 04 0440*       call @one_int
0402D4 48          0441*       ld c, b
0402D5 CD DD 02 04 0442*       call @one_int
0402D9 C3 E8 02 04 0443*       jp @frac ; Jump to fractional part conversion
0402DD             0444*   @one_int:
0402DD 3E 2F       0445*       ld a, '0' - 1 ; Start ASCII character at '0'
0402DF             0446*   @divide_me:
0402DF 3C          0447*       inc a
0402E0 09          0448*       add hl, bc ; Accumulate until overflow
0402E1 38 FC       0449*       jr c, @divide_me
0402E3 ED 42       0450*       sbc hl, bc ; Remove excess after overflow
0402E5 12          0451*       ld (de), a ; Store ASCII digit
0402E6 13          0452*       inc de
0402E7 C9          0453*       ret
0402E8             0454*   ; Convert fractional part
0402E8             0455*   @frac:
0402E8 3E 2E       0456*       ld a, '.' ; Decimal point
0402EA 12          0457*       ld (de), a
0402EB 13          0458*       inc de
0402EC E1          0459*       pop hl ; Restore HL with original fraction
0402ED 06 03       0460*       ld b, 3 ; Loop counter for 3 fractional digits
0402EF             0461*   @frac_loop:
0402EF 26 0A       0462*       ld h, 10 ; Load multiplier for fractional part
0402F1 ED 6C       0463*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0402F3 3E 30       0464*       ld a, '0'
0402F5 84          0465*       add a, h ; Convert integer part to ASCII
0402F6 12          0466*       ld (de), a
0402F7 13          0467*       inc de
0402F8 10 F5       0468*       djnz @frac_loop ; Repeat for each fractional digit
0402FA             0469*   ; Add null terminator
0402FA AF          0470*       xor a ; Null terminator
0402FB 12          0471*       ld (de), a
0402FC C9          0472*       ret
0402FD             0473*   
0402FD             0474*   print_u168:
0402FD D5          0475*       push de
0402FE E5          0476*       push hl
0402FF 11 42 02 04 0477*       ld de,_printDecBuffer
040303 CD AD 02 04 0478*       call u168_to_ascii
040307 21 42 02 04 0479*       ld hl,_printDecBuffer
04030B CD 17 01 04 0480*       call printString
04030F E1          0481*       pop hl
040310 D1          0482*       pop de
040311 C9          0483*       ret
040312             0484*   
040312             0485*   ; signed version of u168_to_ascii
040312             0486*   s168_to_ascii:
040312 D5          0487*       push de ; save starting address of buffer
040313 CD 06 09 04 0488*       call hlu_abs
040317 F5          0489*       push af ; save sign flag
040318 CD AD 02 04 0490*       call u168_to_ascii
04031C F1          0491*       pop af ; restore sign flag
04031D D1          0492*       pop de ; restore starting address of buffer
04031E F0          0493*       ret p ; hlu was positive so nothing to do
04031F 3E 2D       0494*       ld a,'-'
040321 12          0495*       ld (de),a
040322 C9          0496*       ret
040323             0497*   
040323             0498*   print_s168:
040323 D5          0499*       push de
040324 E5          0500*       push hl
040325 11 42 02 04 0501*       ld de,_printDecBuffer
040329 CD 12 03 04 0502*       call s168_to_ascii
04032D 21 42 02 04 0503*       ld hl,_printDecBuffer
040331 CD 17 01 04 0504*       call printString
040335 E1          0505*       pop hl
040336 D1          0506*       pop de
040337 C9          0507*       ret
040338             0508*   
040338             0509*   print_s168_hl:
040338 F5          0510*       push af
040339 E5          0511*       push hl
04033A CD 23 03 04 0512*       call print_s168
04033E 3E 20       0513*       ld a,' '
040340 5B D7       0514*       rst.lil 10h
040342 E1          0515*       pop hl
040343 F1          0516*       pop af
040344 C9          0517*       ret
040345             0518*   
040345             0519*   print_s168_bc:
040345 F5          0520*       push af
040346 C5          0521*       push bc
040347 E5          0522*       push hl
040348 C5          0523*       push bc
040349 E1          0524*       pop hl
04034A CD 23 03 04 0525*       call print_s168
04034E 3E 20       0526*       ld a,' '
040350 5B D7       0527*       rst.lil 10h
040352 E1          0528*       pop hl
040353 C1          0529*       pop bc
040354 F1          0530*       pop af
040355 C9          0531*       ret
040356             0532*   
040356             0533*   print_s168_de:
040356 F5          0534*       push af
040357 D5          0535*       push de
040358 E5          0536*       push hl
040359 EB          0537*       ex de,hl
04035A CD 23 03 04 0538*       call print_s168
04035E 3E 20       0539*       ld a,' '
040360 5B D7       0540*       rst.lil 10h
040362 E1          0541*       pop hl
040363 D1          0542*       pop de
040364 F1          0543*       pop af
040365 C9          0544*       ret
040366             0545*   
040366             0546*   print_s168_hl_bc_de:
040366 F5          0547*       push af
040367 C5          0548*       push bc
040368 D5          0549*       push de
040369 E5          0550*       push hl
04036A CD 23 03 04 0551*       call print_s168
04036E 3E 20       0552*       ld a,' '
040370 5B D7       0553*       rst.lil 10h
040372 C5          0554*       push bc
040373 E1          0555*       pop hl
040374 CD 23 03 04 0556*       call print_s168
040378 3E 20       0557*       ld a,' '
04037A 5B D7       0558*       rst.lil 10h
04037C EB          0559*       ex de,hl
04037D CD 23 03 04 0560*       call print_s168
040381 3E 20       0561*       ld a,' '
040383 5B D7       0562*       rst.lil 10h
040385 E1          0563*       pop hl
040386 D1          0564*       pop de
040387 C1          0565*       pop bc
040388 F1          0566*       pop af
040389 C9          0567*       ret
04038A             0568*   
04038A             0569*   print_s168_bc_de:
04038A F5          0570*       push af
04038B C5          0571*       push bc
04038C D5          0572*       push de
04038D C5          0573*       push bc
04038E E1          0574*       pop hl
04038F CD 23 03 04 0575*       call print_s168
040393 3E 20       0576*       ld a,' '
040395 5B D7       0577*       rst.lil 10h
040397 EB          0578*       ex de,hl
040398 CD 23 03 04 0579*       call print_s168
04039C 3E 20       0580*       ld a,' '
04039E 5B D7       0581*       rst.lil 10h
0403A0 E1          0582*       pop hl
0403A1 D1          0583*       pop de
0403A2 C1          0584*       pop bc
0403A3 F1          0585*       pop af
0403A4 C9          0586*       ret
0403A5             0587*   
0403A5             0588*   print_s168_a:
0403A5 F5          0589*       push af
0403A6 C5          0590*       push bc
0403A7 E5          0591*       push hl
0403A8 21 00 00 00 0592*       ld hl,0
0403AC 6F          0593*       ld l,a
0403AD CD 38 03 04 0594*       call print_s168_hl
0403B1 E1          0595*       pop hl
0403B2 C1          0596*       pop bc
0403B3 F1          0597*       pop af
0403B4 C9          0598*       ret
0403B5             0599*   
0403B5             0600*   ; #### new functions added by Brandon R. Gates ####
0403B5             0601*   
0403B5             0602*   ; print the binary representation of the 8-bit value in a
0403B5             0603*   ; destroys a, hl, bc
0403B5             0604*   printBin8:
0403B5 06 08       0605*       ld b,8 ; loop counter for 8 bits
0403B7 21 D2 03 04 0606*       ld hl,@cmd ; set hl to the low byte of the output string
0403BB             0607*       ; (which will be the high bit of the value in a)
0403BB             0608*   @loop:
0403BB 07          0609*       rlca ; put the next highest bit into carry
0403BC 38 04       0610*       jr c,@one
0403BE 36 30       0611*       ld (hl),'0'
0403C0 18 02       0612*       jr @next_bit
0403C2             0613*   @one:
0403C2 36 31       0614*       ld (hl),'1'
0403C4             0615*   @next_bit:
0403C4 23          0616*       inc hl
0403C5 10 F4       0617*       djnz @loop
0403C7             0618*   ; print it
0403C7 21 D2 03 04 0619*       ld hl,@cmd
0403CB 01 08 00 00 0620*       ld bc,@end-@cmd
0403CF 5B DF       0621*       rst.lil $18
0403D1 C9          0622*       ret
0403D2             0623*   @cmd: ds 8 ; eight bytes for eight bits
0403DA             0624*   @end:
0403DA             0625*   
0403DA             0626*   ; print the binary representation of the 8-bit value in a
0403DA             0627*   ; in reverse order (lsb first)
0403DA             0628*   ; destroys a, hl, bc
0403DA             0629*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
0403DA 06 08       0630*       ld b,8 ; loop counter for 8 bits
0403DC 21 F7 03 04 0631*       ld hl,@cmd ; set hl to the low byte of the output string
0403E0             0632*       ; (which will be the high bit of the value in a)
0403E0             0633*   @loop:
0403E0 0F          0634*       rrca ; put the next lowest bit into carry
0403E1 38 04       0635*       jr c,@one
0403E3 36 30       0636*       ld (hl),'0'
0403E5 18 02       0637*       jr @next_bit
0403E7             0638*   @one:
0403E7 36 31       0639*       ld (hl),'1'
0403E9             0640*   @next_bit:
0403E9 23          0641*       inc hl
0403EA 10 F4       0642*       djnz @loop
0403EC             0643*   ; print it
0403EC 21 F7 03 04 0644*       ld hl,@cmd
0403F0 01 08 00 00 0645*       ld bc,@end-@cmd
0403F4 5B DF       0646*       rst.lil $18
0403F6 C9          0647*       ret
0403F7             0648*   @cmd: ds 8 ; eight bytes for eight bits
0403FF             0649*   @end:
0403FF             0650*   
0403FF             0651*   ; print registers to screen in hexidecimal format
0403FF             0652*   ; inputs: none
0403FF             0653*   ; outputs: values of every register printed to screen
0403FF             0654*   ;    values of each register in global scratch memory
0403FF             0655*   ; destroys: nothing
0403FF             0656*   stepRegistersHex:
0403FF             0657*   ; store everything in scratch
       FF FF FF FF 
       FF FF FF FF 
0403FF 22 4F 06 04 0658*       ld (uhl),hl
040403 ED 43 52 06 0659*       ld (ubc),bc
       04          
040408 ED 53 55 06 0660*       ld (ude),de
       04          
04040D DD 22 58 06 0661*       ld (uix),ix
       04          
040412 FD 22 5B 06 0662*       ld (uiy),iy
       04          
040417 F5          0663*       push af ; fml
040418 E1          0664*       pop hl ; thanks, zilog
040419 22 4C 06 04 0665*       ld (uaf),hl
04041D F5          0666*       push af ; dammit
04041E             0667*   
04041E             0668*   ; home the cursor
04041E             0669*       ; call vdu_home_cursor
04041E             0670*   
04041E             0671*   ; print each register
04041E 21 D2 05 04 0672*       ld hl,str_afu
040422 CD 17 01 04 0673*       call printString
040426 2A 4C 06 04 0674*       ld hl,(uaf)
04042A CD 37 01 04 0675*       call printHex24
04042E CD 2C 01 04 0676*       call printNewLine
040432             0677*   
040432 21 D7 05 04 0678*       ld hl,str_hlu
040436 CD 17 01 04 0679*       call printString
04043A 2A 4F 06 04 0680*       ld hl,(uhl)
04043E CD 37 01 04 0681*       call printHex24
040442 CD 2C 01 04 0682*       call printNewLine
040446             0683*   
040446 21 DC 05 04 0684*       ld hl,str_bcu
04044A CD 17 01 04 0685*       call printString
04044E 2A 52 06 04 0686*       ld hl,(ubc)
040452 CD 37 01 04 0687*       call printHex24
040456 CD 2C 01 04 0688*       call printNewLine
04045A             0689*   
04045A 21 E1 05 04 0690*       ld hl,str_deu
04045E CD 17 01 04 0691*       call printString
040462 2A 55 06 04 0692*       ld hl,(ude)
040466 CD 37 01 04 0693*       call printHex24
04046A CD 2C 01 04 0694*       call printNewLine
04046E             0695*   
04046E 21 E6 05 04 0696*       ld hl,str_ixu
040472 CD 17 01 04 0697*       call printString
040476 2A 58 06 04 0698*       ld hl,(uix)
04047A CD 37 01 04 0699*       call printHex24
04047E CD 2C 01 04 0700*       call printNewLine
040482             0701*   
040482 21 EB 05 04 0702*       ld hl,str_iyu
040486 CD 17 01 04 0703*       call printString
04048A 2A 5B 06 04 0704*       ld hl,(uiy)
04048E CD 37 01 04 0705*       call printHex24
040492 CD 2C 01 04 0706*       call printNewLine
040496             0707*   
040496             0708*       ; call vsync
040496             0709*   
040496 CD 2C 01 04 0710*       call printNewLine
04049A             0711*   
04049A             0712*   ; check for right shift key and quit if pressed
04049A             0713*       MOSCALL mos_getkbmap
04049A 3E 1E       0001*M1 			LD	A, function
04049C 5B CF       0002*M1 			RST.LIL	08h
04049E             0714*   @stayhere:
04049E             0715*   ; 7 RightShift
04049E DD CB 00 76 0716*       bit 6,(ix+0)
0404A2 20 02       0717*       jr nz,@RightShift
0404A4 18 F8       0718*       jr @stayhere
0404A6             0719*   @RightShift:
0404A6 DD CB 0E 86 0720*       res 0,(ix+14) ; debounce the key (hopefully)
0404AA 3E 80       0721*       ld a,%10000000
0404AC             0722*       ; call multiPurposeDelay
0404AC             0723*   
0404AC             0724*   ; restore everything
0404AC 2A 4F 06 04 0725*       ld hl, (uhl)
0404B0 ED 4B 52 06 0726*       ld bc, (ubc)
       04          
0404B5 ED 5B 55 06 0727*       ld de, (ude)
       04          
0404BA DD 2A 58 06 0728*       ld ix, (uix)
       04          
0404BF FD 2A 5B 06 0729*       ld iy, (uiy)
       04          
0404C4 F1          0730*       pop af
0404C5             0731*   ; all done
0404C5 C9          0732*       ret
0404C6             0733*   
0404C6             0734*   ; print registers to screen in hexidecimal format
0404C6             0735*   ; inputs: none
0404C6             0736*   ; outputs: values of every register printed to screen
0404C6             0737*   ;    values of each register in global scratch memory
0404C6             0738*   ; destroys: nothing
0404C6             0739*   dumpRegistersHex:
0404C6             0740*   ; store everything in scratch
0404C6 22 4F 06 04 0741*       ld (uhl),hl
0404CA ED 43 52 06 0742*       ld (ubc),bc
       04          
0404CF ED 53 55 06 0743*       ld (ude),de
       04          
0404D4 DD 22 58 06 0744*       ld (uix),ix
       04          
0404D9 FD 22 5B 06 0745*       ld (uiy),iy
       04          
0404DE F5          0746*       push af ; fml
0404DF E1          0747*       pop hl ; thanks, zilog
0404E0 22 4C 06 04 0748*       ld (uaf),hl
0404E4 F5          0749*       push af ; dammit
0404E5             0750*   
0404E5             0751*   ; home the cursor
0404E5             0752*       ; call vdu_home_cursor
0404E5             0753*       ; call printNewLine
0404E5             0754*   
0404E5             0755*   ; print each register
0404E5 21 D2 05 04 0756*       ld hl,str_afu
0404E9 CD 17 01 04 0757*       call printString
0404ED 2A 4C 06 04 0758*       ld hl,(uaf)
0404F1 CD 37 01 04 0759*       call printHex24
0404F5 CD 2C 01 04 0760*       call printNewLine
0404F9             0761*   
0404F9 21 D7 05 04 0762*       ld hl,str_hlu
0404FD CD 17 01 04 0763*       call printString
040501 2A 4F 06 04 0764*       ld hl,(uhl)
040505 CD 37 01 04 0765*       call printHex24
040509 CD 2C 01 04 0766*       call printNewLine
04050D             0767*   
04050D 21 DC 05 04 0768*       ld hl,str_bcu
040511 CD 17 01 04 0769*       call printString
040515 2A 52 06 04 0770*       ld hl,(ubc)
040519 CD 37 01 04 0771*       call printHex24
04051D CD 2C 01 04 0772*       call printNewLine
040521             0773*   
040521 21 E1 05 04 0774*       ld hl,str_deu
040525 CD 17 01 04 0775*       call printString
040529 2A 55 06 04 0776*       ld hl,(ude)
04052D CD 37 01 04 0777*       call printHex24
040531 CD 2C 01 04 0778*       call printNewLine
040535             0779*   
040535 21 E6 05 04 0780*       ld hl,str_ixu
040539 CD 17 01 04 0781*       call printString
04053D 2A 58 06 04 0782*       ld hl,(uix)
040541 CD 37 01 04 0783*       call printHex24
040545 CD 2C 01 04 0784*       call printNewLine
040549             0785*   
040549 21 EB 05 04 0786*       ld hl,str_iyu
04054D CD 17 01 04 0787*       call printString
040551 2A 5B 06 04 0788*       ld hl,(uiy)
040555 CD 37 01 04 0789*       call printHex24
040559             0790*       ; call printNewLine
040559             0791*   
040559             0792*       ; call vdu_vblank
040559             0793*   
040559             0794*       ; call printNewLine
040559             0795*   ; restore everything
040559 2A 4F 06 04 0796*       ld hl, (uhl)
04055D ED 4B 52 06 0797*       ld bc, (ubc)
       04          
040562 ED 5B 55 06 0798*       ld de, (ude)
       04          
040567 DD 2A 58 06 0799*       ld ix, (uix)
       04          
04056C FD 2A 5B 06 0800*       ld iy, (uiy)
       04          
040571 F1          0801*       pop af
040572             0802*   ; all done
040572 C9          0803*       ret
040573             0804*   
040573             0805*   dumpRegistersHexPrime:
040573 D9          0806*       exx
040574 08          0807*       ex af,af'
040575 CD C6 04 04 0808*       call dumpRegistersHex
040579 08          0809*       ex af,af'
04057A D9          0810*       exx
04057B C9          0811*       ret
04057C             0812*   
04057C             0813*   ; additionally dump prime registers
04057C             0814*   ; inputs: none
04057C             0815*   ; outputs: values of every register printed to screen
04057C             0816*   ; destroys: nothing
04057C             0817*   dumpRegistersHexAll:
04057C CD C6 04 04 0818*       call dumpRegistersHex
040580 08          0819*       ex af,af'
040581 D9          0820*       exx
040582 CD C6 04 04 0821*       call dumpRegistersHex
040586 08          0822*       ex af,af'
040587 D9          0823*       exx
040588 C9          0824*       ret
040589             0825*   
040589             0826*   ; print hlu to screen in hexidecimal format
040589             0827*   ; inputs: none
040589             0828*   ; destroys: nothing
040589             0829*   print_hex_hl:
040589 F5          0830*       push af
04058A E5          0831*       push hl
04058B 21 D7 05 04 0832*       ld hl,str_hlu
04058F CD 17 01 04 0833*       call printString
040593 E1          0834*       pop hl
040594 E5          0835*       push hl
040595 CD 37 01 04 0836*       call printHex24
040599 3E 20       0837*       ld a,' '
04059B 5B D7       0838*       rst.lil 10h
04059D E1          0839*       pop hl
04059E F1          0840*       pop af
04059F C9          0841*       ret
0405A0             0842*   
0405A0             0843*   ; print bcu to screen in hexidecimal format
0405A0             0844*   ; inputs: none
0405A0             0845*   ; destroys: nothing
0405A0             0846*   print_hex_bc:
0405A0 F5          0847*       push af
0405A1 E5          0848*       push hl
0405A2 C5          0849*       push bc
0405A3 21 DC 05 04 0850*       ld hl,str_bcu
0405A7 CD 17 01 04 0851*       call printString
0405AB E1          0852*       pop hl
0405AC E5          0853*       push hl
0405AD CD 37 01 04 0854*       call printHex24
0405B1 3E 20       0855*       ld a,' '
0405B3 5B D7       0856*       rst.lil 10h
0405B5 C1          0857*       pop bc
0405B6 E1          0858*       pop hl
0405B7 F1          0859*       pop af
0405B8 C9          0860*       ret
0405B9             0861*   
0405B9             0862*   ; print deu to screen in hexidecimal format
0405B9             0863*   ; inputs: none
0405B9             0864*   ; destroys: nothing
0405B9             0865*   print_hex_de:
0405B9 F5          0866*       push af
0405BA E5          0867*       push hl
0405BB D5          0868*       push de
0405BC 21 E1 05 04 0869*       ld hl,str_deu
0405C0 CD 17 01 04 0870*       call printString
0405C4 E1          0871*       pop hl
0405C5 E5          0872*       push hl
0405C6 CD 37 01 04 0873*       call printHex24
0405CA 3E 20       0874*       ld a,' '
0405CC 5B D7       0875*       rst.lil 10h
0405CE D1          0876*       pop de
0405CF E1          0877*       pop hl
0405D0 F1          0878*       pop af
0405D1 C9          0879*       ret
0405D2             0880*   
0405D2 20 61 66 3D 0881*   str_afu: db " af=",0
       00          
0405D7 20 68 6C 3D 0882*   str_hlu: db " hl=",0
       00          
0405DC 20 62 63 3D 0883*   str_bcu: db " bc=",0
       00          
0405E1 20 64 65 3D 0884*   str_deu: db " de=",0
       00          
0405E6 20 69 78 3D 0885*   str_ixu: db " ix=",0
       00          
0405EB 20 69 79 3D 0886*   str_iyu: db " iy=",0
       00          
0405F0             0887*   
0405F0             0888*   ; print udeuhl to screen in hexidecimal format
0405F0             0889*   ; inputs: none
0405F0             0890*   ; outputs: concatenated hexidecimal udeuhl
0405F0             0891*   ; destroys: nothing
0405F0             0892*   dumpUDEUHLHex:
0405F0             0893*   ; store everything in scratch
0405F0 22 4F 06 04 0894*       ld (uhl),hl
0405F4 ED 43 52 06 0895*       ld (ubc),bc
       04          
0405F9 ED 53 55 06 0896*       ld (ude),de
       04          
0405FE DD 22 58 06 0897*       ld (uix),ix
       04          
040603 FD 22 5B 06 0898*       ld (uiy),iy
       04          
040608 F5          0899*       push af
040609             0900*   
040609             0901*   ; print each register
040609             0902*   
040609 21 43 06 04 0903*       ld hl,str_udeuhl
04060D CD 17 01 04 0904*       call printString
040611 2A 55 06 04 0905*       ld hl,(ude)
040615 CD 37 01 04 0906*       call printHex24
040619 3E 2E       0907*       ld a,'.' ; print a dot to separate the values
04061B 5B D7       0908*       rst.lil 10h
04061D 2A 4F 06 04 0909*       ld hl,(uhl)
040621 CD 37 01 04 0910*       call printHex24
040625 CD 2C 01 04 0911*       call printNewLine
040629             0912*   
040629             0913*   ; restore everything
040629 2A 4F 06 04 0914*       ld hl, (uhl)
04062D ED 4B 52 06 0915*       ld bc, (ubc)
       04          
040632 ED 5B 55 06 0916*       ld de, (ude)
       04          
040637 DD 2A 58 06 0917*       ld ix, (uix)
       04          
04063C FD 2A 5B 06 0918*       ld iy, (uiy)
       04          
040641 F1          0919*       pop af
040642             0920*   ; all done
040642 C9          0921*       ret
040643             0922*   
040643 75 64 65 2E 0923*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04064C             0924*   
04064C             0925*   ; global scratch memory for registers
04064C 00 00 00    0926*   uaf: dl 0
04064F 00 00 00    0927*   uhl: dl 0
040652 00 00 00    0928*   ubc: dl 0
040655 00 00 00    0929*   ude: dl 0
040658 00 00 00    0930*   uix: dl 0
04065B 00 00 00    0931*   uiy: dl 0
04065E 00 00 00    0932*   usp: dl 0
040661 00 00 00    0933*   upc: dl 0
040664             0934*   
040664             0935*   ; inputs: whatever is in the flags register
040664             0936*   ; outputs: binary representation of flags
040664             0937*   ;          with a header so we know which is what
040664             0938*   ; destroys: nothing
040664             0939*   ; preserves: everything
040664             0940*   dumpFlags:
040664             0941*   ; first we curse zilog for not giving direct access to flags
040664 F5          0942*       push af ; this is so we can send it back unharmed
040665 F5          0943*       push af ; this is so we can pop it to hl
040666             0944*   ; store everything in scratch
040666 22 4F 06 04 0945*       ld (uhl),hl
04066A ED 43 52 06 0946*       ld (ubc),bc
       04          
04066F ED 53 55 06 0947*       ld (ude),de
       04          
040674 DD 22 58 06 0948*       ld (uix),ix
       04          
040679 FD 22 5B 06 0949*       ld (uiy),iy
       04          
04067E             0950*   ; next we print the header
04067E 21 AA 06 04 0951*       ld hl,@header
040682 CD 17 01 04 0952*       call printString
040686 E1          0953*       pop hl ; flags are now in l
040687 7D          0954*       ld a,l ; flags are now in a
040688 CD B5 03 04 0955*       call printBin8
04068C CD 2C 01 04 0956*       call printNewLine
040690             0957*   ; restore everything
040690 2A 4F 06 04 0958*       ld hl, (uhl)
040694 ED 4B 52 06 0959*       ld bc, (ubc)
       04          
040699 ED 5B 55 06 0960*       ld de, (ude)
       04          
04069E DD 2A 58 06 0961*       ld ix, (uix)
       04          
0406A3 FD 2A 5B 06 0962*       ld iy, (uiy)
       04          
0406A8 F1          0963*       pop af ; send her home the way she came
0406A9 C9          0964*       ret
0406AA             0965*   ; Bit 7 (S): Sign flag
0406AA             0966*   ; Bit 6 (Z): Zero flag
0406AA             0967*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0406AA             0968*   ; Bit 4 (H): Half Carry flag
0406AA             0969*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0406AA             0970*   ; Bit 2 (PV): Parity/Overflow flag
0406AA             0971*   ; Bit 1 (N): Subtract flag
0406AA             0972*   ; Bit 0 (C): Carry flag
0406AA 53 5A 78 48 0973*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0406B5             0974*   
0406B5             0975*   ; set all the bits in the flag register
0406B5             0976*   ; more of an academic exercise than anything useful
0406B5             0977*   ; inputs; none
0406B5             0978*   ; outputs; a=0,f=255
0406B5             0979*   ; destroys: flags, hl
0406B5             0980*   ; preserves: a, because why not
0406B5             0981*   setAllFlags:
0406B5 21 FF 00 00 0982*       ld hl,255
0406B9 67          0983*       ld h,a ; four cycles to preserve a is cheap
0406BA E5          0984*       push hl
0406BB F1          0985*       pop af
0406BC C9          0986*       ret
0406BD             0987*   
0406BD             0988*   ; reset all the bits in the flag register
0406BD             0989*   ; unlike its inverse counterpart, this may actually be useful
0406BD             0990*   ; inputs; none
0406BD             0991*   ; outputs; a=0,f=0
0406BD             0992*   ; destroys: flags, hl
0406BD             0993*   ; preserves: a, because why not
0406BD             0994*   resetAllFlags:
0406BD 21 00 00 00 0995*       ld hl,0
0406C1 67          0996*       ld h,a ; four cycles to preserve a is cheap
0406C2 E5          0997*       push hl
0406C3 F1          0998*       pop af
0406C4 C9          0999*       ret
0406C5             1000*   
0406C5             1001*   ; wait until user presses a key
0406C5             1002*   ; inputs: none
0406C5             1003*   ; outputs: ascii code of key pressed in a
0406C5             1004*   ; destroys: af,ix
0406C5             1005*   waitKeypress:
0406C5             1006*       MOSCALL mos_getkey
0406C5 3E 00       0001*M1 			LD	A, function
0406C7 5B CF       0002*M1 			RST.LIL	08h
0406C9 C9          1007*       ret
0406CA             1008*   
0406CA             1009*   ; print bytes from an address to the screen in hexidecimal format
0406CA             1010*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406CA             1011*   ; outputs: values of each byte printed to screen separated by spaces
0406CA             1012*   ; destroys: nothing
0406CA             1013*   dumpMemoryHex:
0406CA             1014*   ; save registers to the stack
0406CA C5          1015*       push bc
0406CB E5          1016*       push hl
0406CC F5          1017*       push af
0406CD             1018*   
0406CD             1019*   ; print the address and separator
0406CD CD 37 01 04 1020*       call printHex24
0406D1 3E 3A       1021*       ld a,':'
0406D3 5B D7       1022*       rst.lil 10h
0406D5 3E 20       1023*       ld a,' '
0406D7 5B D7       1024*       rst.lil 10h
0406D9             1025*   
0406D9             1026*   ; set b to be our loop counter
0406D9 F1          1027*       pop af
0406DA 47          1028*       ld b,a
0406DB E1          1029*       pop hl
0406DC E5          1030*       push hl
0406DD F5          1031*       push af
0406DE             1032*   @loop:
0406DE             1033*   ; print the byte
0406DE 7E          1034*       ld a,(hl)
0406DF CD 45 01 04 1035*       call printHex8
0406E3             1036*   ; print a space
0406E3 3E 20       1037*       ld a,' '
0406E5 5B D7       1038*       rst.lil 10h
0406E7 23          1039*       inc hl
0406E8 10 F4       1040*       djnz @loop
0406EA CD 2C 01 04 1041*       call printNewLine
0406EE             1042*   
0406EE             1043*   ; restore everything
0406EE F1          1044*       pop af
0406EF E1          1045*       pop hl
0406F0 C1          1046*       pop bc
0406F1             1047*   
0406F1             1048*   ; all done
0406F1 C9          1049*       ret
0406F2             1050*   
0406F2             1051*   
0406F2             1052*   ; print bytes from an address to the screen in binary format
0406F2             1053*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406F2             1054*   ; outputs: values of each byte printed to screen separated by spaces
0406F2             1055*   ; destroys: nothing
0406F2             1056*   dumpMemoryBin:
0406F2             1057*   ; save all registers to the stack
0406F2 F5          1058*       push af
0406F3 C5          1059*       push bc
0406F4 D5          1060*       push de
0406F5 E5          1061*       push hl
0406F6 DD E5       1062*       push ix
0406F8 FD E5       1063*       push iy
0406FA             1064*   
0406FA             1065*   ; set b to be our loop counter
0406FA 47          1066*       ld b,a
0406FB             1067*   @loop:
0406FB             1068*   ; print the byte
0406FB 7E          1069*       ld a,(hl)
0406FC E5          1070*       push hl
0406FD C5          1071*       push bc
0406FE CD B5 03 04 1072*       call printBin8
040702 C1          1073*       pop bc
040703             1074*   ; print a space
040703 3E 20       1075*       ld a,' '
040705 5B D7       1076*       rst.lil 10h
040707 E1          1077*       pop hl
040708 23          1078*       inc hl
040709 10 F0       1079*       djnz @loop
04070B CD 2C 01 04 1080*       call printNewLine
04070F             1081*   
04070F             1082*   ; restore everything
04070F FD E1       1083*       pop iy
040711 DD E1       1084*       pop ix
040713 E1          1085*       pop hl
040714 D1          1086*       pop de
040715 C1          1087*       pop bc
040716 F1          1088*       pop af
040717             1089*   ; all done
040717 C9          1090*       ret
040718             1091*   
040718             1092*   ; print bytes from an address to the screen in binary format
040718             1093*   ; with the bits of each byte in reverse order (lsb first)
040718             1094*   ; inputs: hl = address of first byte to print, a = number of bytes to print
040718             1095*   ; outputs: values of each byte printed to screen separated by spaces
040718             1096*   ; destroys: nothing
040718             1097*   dumpMemoryBinRev:
040718             1098*   ; save all registers to the stack
040718 F5          1099*       push af
040719 C5          1100*       push bc
04071A D5          1101*       push de
04071B E5          1102*       push hl
04071C DD E5       1103*       push ix
04071E FD E5       1104*       push iy
040720             1105*   
040720             1106*   ; set b to be our loop counter
040720 47          1107*       ld b,a
040721             1108*   @loop:
040721             1109*   ; print the byte
040721 7E          1110*       ld a,(hl)
040722 E5          1111*       push hl
040723 C5          1112*       push bc
040724 CD DA 03 04 1113*       call printBin8Rev
040728 C1          1114*       pop bc
040729             1115*   ; print a space
040729 3E 20       1116*       ld a,' '
04072B 5B D7       1117*       rst.lil 10h
04072D E1          1118*       pop hl
04072E 23          1119*       inc hl
04072F 10 F0       1120*       djnz @loop
040731 CD 2C 01 04 1121*       call printNewLine
040735             1122*   
040735             1123*   ; restore everything
040735 FD E1       1124*       pop iy
040737 DD E1       1125*       pop ix
040739 E1          1126*       pop hl
04073A D1          1127*       pop de
04073B C1          1128*       pop bc
04073C F1          1129*       pop af
04073D             1130*   ; all done
04073D C9          1131*       ret
04073E             1132*   
04073E             1133*   ; clear a block of memory by writing a prescribed value to each byte in the range
04073E             1134*   ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
04073E             1135*   ; outputs: memory block is cleared
04073E             1136*   ; destroys: hl, de
04073E             1137*   clear_mem:
04073E 0B          1138*       dec bc ; we do this because we will increment de before writing the first byte
04073F 77          1139*       ld (hl),a
040740 E5          1140*       push hl
040741 D1          1141*       pop de
040742 13          1142*       inc de ; target address
040743 ED B0       1143*       ldir
040745 C9          1144*       ret
040746             0031        include "arith24.inc"
040746             0001*   ;------------------------------------------------------------------------
040746             0002*   ;  arith24.asm
040746             0003*   ;  24-bit ez80 arithmetic routines
040746             0004*   ;  Copyright (c) Shawn Sijnstra 2024
040746             0005*   ;  MIT license
040746             0006*   ;
040746             0007*   ;  This library was created as a tool to help make ez80
040746             0008*   ;  24-bit native assembly routines for simple mathematical problems
040746             0009*   ;  more widely available.
040746             0010*   ;
040746             0011*   ;------------------------------------------------------------------------
040746             0012*   
040746             0013*   ; ;------------------------------------------------------------------------
040746             0014*   ; ; DEPRECATED BY umul24 in fixed168.inc
040746             0015*   ; ;------------------------------------------------------------------------
040746             0016*   ; ; umul24:	HL = HL*DE (unsigned)
040746             0017*   ; ; Preserves AF, BC, DE
040746             0018*   ; ; Uses a fast multiply routine.
040746             0019*   ; ;------------------------------------------------------------------------
040746             0020*   ; umul24:
040746             0021*   ; 	push	DE
040746             0022*   ; 	push	BC
040746             0023*   ; 	push	AF
040746             0024*   ; 	push	HL
040746             0025*   ; 	pop		BC
040746             0026*   ;     ld	 	a, 24 ; No. of bits to process
040746             0027*   ;     ld	 	hl, 0 ; Result
040746             0028*   ; umul24_lp:
040746             0029*   ; 	add	hl,hl
040746             0030*   ; 	ex	de,hl
040746             0031*   ; 	add	hl,hl
040746             0032*   ; 	ex	de,hl
040746             0033*   ; 	jr	nc,umul24_nc
040746             0034*   ; 	add	hl,bc
040746             0035*   ; umul24_nc:
040746             0036*   ; 	dec	a
040746             0037*   ; 	jr	nz,umul24_lp
040746             0038*   ; 	pop	af
040746             0039*   ; 	pop	bc
040746             0040*   ; 	pop	de
040746             0041*   ; 	ret
040746             0042*   
040746             0043*   
040746             0044*   ;------------------------------------------------------------------------
040746             0045*   ; udiv24
040746             0046*   ; Unsigned 24-bit division
040746             0047*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
040746             0048*   ;
040746             0049*   ; Uses AF BC DE HL
040746             0050*   ; Uses Restoring Division algorithm
040746             0051*   ;------------------------------------------------------------------------
040746             0052*   
040746             0053*   udiv24:
040746 E5          0054*   	push	hl
040747 C1          0055*   	pop		bc	;move dividend to BCU
040748 21 00 00 00 0056*   	ld		hl,0	;result
04074C A7          0057*   	and		a
04074D ED 52       0058*   	sbc		hl,de	;test for div by 0
04074F C8          0059*   	ret		z		;it's zero, carry flag is clear
040750 19          0060*   	add		hl,de	;HL is 0 again
040751 3E 18       0061*   	ld		a,24	;number of loops through.
040753             0062*   udiv1:
040753 C5          0063*   	push	bc	;complicated way of doing this because of lack of access to top bits
040754 E3          0064*   	ex		(sp),hl
040755 37          0065*   	scf
040756 ED 6A       0066*   	adc	hl,hl
040758 E3          0067*   	ex	(sp),hl
040759 C1          0068*   	pop	bc		;we now have bc = (bc * 2) + 1
04075A             0069*   
04075A ED 6A       0070*   	adc	hl,hl
04075C A7          0071*   	and	a		;is this the bug
04075D ED 52       0072*   	sbc	hl,de
04075F 30 02       0073*   	jr	nc,udiv2
040761 19          0074*   	add	hl,de
040762             0075*   ;	dec	c
040762 0B          0076*   	dec	bc
040763             0077*   udiv2:
040763 3D          0078*   	dec	a
040764 20 ED       0079*   	jr	nz,udiv1
040766 37          0080*   	scf		;flag used for div0 error
040767 C5          0081*   	push	bc
040768 D1          0082*   	pop		de	;remainder
040769 C9          0083*   	ret
04076A             0084*   
04076A             0085*   
04076A             0086*   
04076A             0087*   ;------------------------------------------------------------------------
04076A             0088*   ; neg24
04076A             0089*   ; Returns: HLU = 0-HLU
04076A             0090*   ; preserves all other registers
04076A             0091*   ;------------------------------------------------------------------------
04076A             0092*   neg24:
04076A D5          0093*   	push	de
04076B EB          0094*   	ex		de,hl
04076C 21 00 00 00 0095*   	ld		hl,0
040770 B7          0096*   	or		a
040771 ED 52       0097*   	sbc		hl,de
040773 D1          0098*   	pop		de
040774 C9          0099*   	ret
040775             0100*   
040775             0101*   ;------------------------------------------------------------------------
040775             0102*   ; or_hlu_deu: 24 bit bitwise OR
040775             0103*   ; Returns: hlu = hlu OR deu
040775             0104*   ; preserves all other registers
040775             0105*   ;------------------------------------------------------------------------
040775             0106*   or_hlu_deu:
040775 22 FE 07 04 0107*   	ld	(bitbuf1),hl
040779 ED 53 01 08 0108*   	ld	(bitbuf2),de
       04          
04077E D5          0109*   	push	de	;preserve DEU
04077F C5          0110*   	push	bc	;preserve BCU
040780 06 03       0111*   	ld		b,3
040782 21 FE 07 04 0112*   	ld	hl,bitbuf1
040786 11 FE 07 04 0113*   	ld	de,bitbuf1
04078A             0114*   orloop_24:
04078A 1A          0115*   	ld	a,(de)
04078B B6          0116*   	or	(hl)
04078C 12          0117*   	ld	(de),a
04078D 13          0118*   	inc	de
04078E 23          0119*   	inc	hl
04078F 10 F9       0120*   	djnz	orloop_24
040791 2A 01 08 04 0121*   	ld	hl,(bitbuf2)
040795 C1          0122*   	pop		bc	;restore BC
040796 D1          0123*   	pop		de	;restore DE
040797             0124*   
040797             0125*   ;------------------------------------------------------------------------
040797             0126*   ; and_hlu_deu: 24 bit bitwise AND
040797             0127*   ; Returns: hlu = hlu AND deu
040797             0128*   ; preserves all other registers
040797             0129*   ;------------------------------------------------------------------------
040797             0130*   and_hlu_deu:
040797 22 FE 07 04 0131*   	ld	(bitbuf1),hl
04079B ED 53 01 08 0132*   	ld	(bitbuf2),de
       04          
0407A0 D5          0133*   	push	de	;preserve DEU
0407A1 C5          0134*   	push	bc	;preserve BCU
0407A2 06 03       0135*   	ld		b,3
0407A4 21 FE 07 04 0136*   	ld	hl,bitbuf1
0407A8 11 FE 07 04 0137*   	ld	de,bitbuf1
0407AC             0138*   andloop_24:
0407AC 1A          0139*   	ld	a,(de)
0407AD A6          0140*   	and	(hl)
0407AE 12          0141*   	ld	(de),a
0407AF 13          0142*   	inc	de
0407B0 23          0143*   	inc	hl
0407B1 10 F9       0144*   	djnz	andloop_24
0407B3 2A 01 08 04 0145*   	ld	hl,(bitbuf2)
0407B7 C1          0146*   	pop		bc	;restore BC
0407B8 D1          0147*   	pop		de	;restore DE
0407B9             0148*   
0407B9             0149*   ;------------------------------------------------------------------------
0407B9             0150*   ; xor_hlu_deu: 24 bit bitwise XOR
0407B9             0151*   ; Returns: hlu = hlu XOR deu
0407B9             0152*   ; preserves all other registers
0407B9             0153*   ;------------------------------------------------------------------------
0407B9             0154*   xor_hlu_deu:
0407B9 22 FE 07 04 0155*   	ld	(bitbuf1),hl
0407BD ED 53 01 08 0156*   	ld	(bitbuf2),de
       04          
0407C2 D5          0157*   	push	de	;preserve DEU
0407C3 C5          0158*   	push	bc	;preserve BCU
0407C4 06 03       0159*   	ld		b,3
0407C6 21 FE 07 04 0160*   	ld	hl,bitbuf1
0407CA 11 FE 07 04 0161*   	ld	de,bitbuf1
0407CE             0162*   xorloop_24:
0407CE 1A          0163*   	ld	a,(de)
0407CF AE          0164*   	xor	(hl)
0407D0 12          0165*   	ld	(de),a
0407D1 13          0166*   	inc	de
0407D2 23          0167*   	inc	hl
0407D3 10 F9       0168*   	djnz	xorloop_24
0407D5 2A 01 08 04 0169*   	ld	hl,(bitbuf2)
0407D9 C1          0170*   	pop		bc	;restore BC
0407DA D1          0171*   	pop		de	;restore DE
0407DB             0172*   
0407DB             0173*   ;------------------------------------------------------------------------
0407DB             0174*   ; shl_hlu: 24 bit shift left hlu by a positions
0407DB             0175*   ; Returns: hlu = hlu << a
0407DB             0176*   ;		   a = 0
0407DB             0177*   ; NOTE: only considers a up to 16 bits.
0407DB             0178*   ; preserves all other registers
0407DB             0179*   ; modified by Brandon R. Gates to use a instead of de
0407DB             0180*   ;------------------------------------------------------------------------
0407DB             0181*   shl_hlu:
0407DB B7          0182*   	or a
0407DC C8          0183*   	ret		z		;we're done
0407DD 29          0184*   	add		hl,hl	;shift HLU left
0407DE 3D          0185*   	dec a
0407DF 18 FA       0186*   	jr		shl_hlu
0407E1             0187*   
0407E1             0188*   ;------------------------------------------------------------------------
0407E1             0189*   ; shr_hlu: 24 bit shift right hlu by a positions
0407E1             0190*   ; Returns: hlu = hlu >> a
0407E1             0191*   ;		   a = 0
0407E1             0192*   ; NOTE: only considers a up to 16 bits.
0407E1             0193*   ; preserves all other registers
0407E1             0194*   ; modified by Brandon R. Gates to use a instead of de
0407E1             0195*   ;------------------------------------------------------------------------
0407E1             0196*   shr_hlu:
0407E1 22 FE 07 04 0197*   	ld		(bitbuf1),hl
0407E5 21 00 08 04 0198*   	ld		hl,bitbuf1+2
0407E9             0199*   @shr_loop:
0407E9 B7          0200*   	or a
0407EA 28 0D       0201*   	jr		z,@shr_done		;we're done
0407EC             0202*   ;carry is clear from or instruction
0407EC CB 1E       0203*   	rr		(hl)
0407EE 2B          0204*   	dec		hl
0407EF CB 1E       0205*   	rr		(hl)
0407F1 2B          0206*   	dec		hl
0407F2 CB 1E       0207*   	rr		(hl)
0407F4 23          0208*   	inc		hl
0407F5 23          0209*   	inc		hl
0407F6 3D          0210*   	dec a
0407F7 18 F0       0211*   	jr		@shr_loop
0407F9             0212*   @shr_done:
0407F9 2A FE 07 04 0213*   	ld		hl,(bitbuf1)	;collect result
0407FD C9          0214*   	ret
0407FE             0215*   
0407FE             0216*   ;------------------------------------------------------------------------
0407FE             0217*   ; Scratch area for calculations
0407FE             0218*   ;------------------------------------------------------------------------
0407FE 00 00 00    0219*   bitbuf1:	dw24	0	;bit manipulation buffer 1
040801 00 00 00    0220*   bitbuf2:	dw24	0	;bit manipulation buffer 2
040804             0221*   
040804             0222*   ; -----------------------------------------------------------------------
040804             0223*   ; Functions added by Brandon R. Gates
040804             0224*   ; -----------------------------------------------------------------------
040804             0225*   
040804             0226*   ;------------------------------------------------------------------------
040804             0227*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
040804             0228*   ;              Determines the LSB of A and shifts HLU accordingly.
040804             0229*   ;              HLU = HLU >> LSB(A)
040804             0230*   ; Returns: HLU = HLU >> LSB(A)
040804             0231*   ; Destroys: af
040804             0232*   ;------------------------------------------------------------------------
040804             0233*   shr_hlu_log2a:
040804 B7          0234*   	or a    ; check for zero
040805 C8          0235*   	ret z   ; nothing to shift so we're done
040806 C5          0236*   	push 	bc ; preserve
040807 06 00       0237*   	ld		b,0 ; clear b
040809             0238*   @find_bit:
040809 0F          0239*   	rrca ; bit 0 to carry
04080A DA 13 08 04 0240*   	jp c,@found_bit
04080E 04          0241*   	inc b ; next bit
04080F C3 09 08 04 0242*   	jp @find_bit
040813             0243*   @found_bit:
040813 78          0244*   	ld a,b
040814 CD E1 07 04 0245*   	call shr_hlu
040818 C1          0246*   	pop 	bc ; restore
040819 C9          0247*   	ret
04081A             0248*   ; end shr_hlu_log2a
04081A             0249*   
04081A             0250*   ;------------------------------------------------------------------------
04081A             0251*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
04081A             0252*   ;                Determines the LSB of A and shifts HLU accordingly.
04081A             0253*   ;                HLU = HLU << LSB(A)
04081A             0254*   ; Returns: HLU = HLU << LSB(A)
04081A             0255*   ; Destroys: af
04081A             0256*   ;------------------------------------------------------------------------
04081A             0257*   shl_hlu_log2a:
04081A B7          0258*   	or a    ; check for zero
04081B C8          0259*   	ret z   ; nothing to shift so we're done
04081C C5          0260*   	push 	bc ; preserve
04081D 06 00       0261*   	ld		b,0 ; clear b
04081F             0262*   @find_bit:
04081F 0F          0263*   	rrca ; bit 0 to carry
040820 DA 29 08 04 0264*   	jp c,@found_bit
040824 04          0265*   	inc b ; next bit
040825 C3 1F 08 04 0266*   	jp @find_bit
040829             0267*   @found_bit:
040829 78          0268*   	ld a,b
04082A CD DB 07 04 0269*   	call shl_hlu
04082E C1          0270*   	pop 	bc ; restore
04082F C9          0271*   	ret
040830             0272*   ; end shl_hlu_log2a
040830             0032        include "maths.inc"
040830 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040900             0002*   ; test the sign of HL
040900             0003*   ; inputs: HL obviously
040900             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040900             0005*   ; destroys: flags
040900             0006*       MACRO sign_hlu
040900             0007*       add hl,de
040900             0008*       or a ; clear flags
040900             0009*       sbc hl,de
040900             0010*       ENDMACRO
040900             0011*   
040900             0012*   
040900             0013*   ;------------------------------------------------------------------------
040900             0014*   ; Scratch area for calculations
040900             0015*   ;------------------------------------------------------------------------
040900 00 00 00    0016*   scratch1: dw24 0 ;bit manipulation buffer 1
040903 00 00 00    0017*   scratch2: dw24 0 ;bit manipulation buffer 2
040906             0018*   
040906             0019*   ; absolute value of hlu
040906             0020*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040906             0021*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040906             0022*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040906             0023*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040906             0024*   ; destroys: a
040906             0025*   hlu_abs:
040906 19          0026*       add hl,de
040907 B7          0027*       or a
040908 ED 52       0028*       sbc hl,de
04090A FA 0F 09 04 0029*       jp m,@is_neg
04090E C9          0030*       ret ; hlu is positive or zero so we're done
04090F             0031*   @is_neg:
04090F F5          0032*       push af ; otherwise, save current flags for return
040910 CD 16 09 04 0033*       call neg_hlu ; negate hlu
040914 F1          0034*       pop af ; get back flags
040915 C9          0035*       ret
040916             0036*   
040916             0037*   ; flip the sign of hlu
040916             0038*   ; inputs: hlu
040916             0039*   ; returns: 0-hlu, flags set appropriately for the result:
040916             0040*   ;         s1,z0,pv0,n1,c1 if result is negative
040916             0041*   ;         s0,z1,pv0,n1,c0 if result is zero
040916             0042*   ;         s0,z0,pv0,n1,c1 if result is positive
040916             0043*   ; destroys a
040916             0044*   neg_hlu:
040916 D5          0045*       push de ; save de
040917 EB          0046*       ex de,hl ; put hl into de
040918 21 00 00 00 0047*       ld hl,0 ; clear hl
04091C AF          0048*       xor a ; clear carry
04091D ED 52       0049*       sbc hl,de ; 0-hlu = -hlu
04091F D1          0050*       pop de ; get de back
040920 C9          0051*       ret ; easy peasy
040921             0052*   
040921             0053*   ;------------------------------------------------------------------------
040921             0054*   ; divide hlu by 2, inspired by above
040921             0055*   ;------------------------------------------------------------------------
040921             0056*   hlu_div2:
040921 22 00 09 04 0057*       ld (scratch1),hl
040925 21 02 09 04 0058*       ld hl,scratch1+2
040929 CB 1E       0059*       rr (hl)
04092B 2B          0060*       dec hl
04092C CB 1E       0061*       rr (hl)
04092E 2B          0062*       dec hl
04092F CB 1E       0063*       rr (hl)
040931 23          0064*       inc hl
040932 23          0065*       inc hl
040933 2A 00 09 04 0066*       ld hl,(scratch1)
040937 C9          0067*       ret
040938             0068*   
040938             0069*   ; this is my little hack to divide by 16
040938             0070*   hlu_div16:
040938 AF          0071*       xor a
040939 29          0072*       add hl,hl
04093A 17          0073*       rla
04093B 29          0074*       add hl,hl
04093C 17          0075*       rla
04093D 29          0076*       add hl,hl
04093E 17          0077*       rla
04093F 29          0078*       add hl,hl
040940 17          0079*       rla
040941 22 4E 09 04 0080*       ld (@scratch),hl
040945 32 51 09 04 0081*       ld (@scratch+3),a
040949 2A 4F 09 04 0082*       ld hl,(@scratch+1)
04094D C9          0083*       ret
04094E             0084*   @scratch: ds 4
040952             0085*   
040952             0086*   ; hlu signed division by 256
040952             0087*   ; returns: hlu / 256
040952             0088*   ; destroys: af
040952             0089*   hlu_sdiv256:
       FF FF FF FF 
040952 AF          0090*       xor a ; assume hl is positive
040953 22 69 09 04 0091*       ld (@buffer),hl
040957             0092*       sign_hlu
040957 19          0001*M1     add hl,de
040958 B7          0002*M1     or a ; clear flags
040959 ED 52       0003*M1     sbc hl,de
04095B F2 60 09 04 0093*       jp p,@hl_pos
04095F 3D          0094*       dec a
040960             0095*   @hl_pos:
040960 32 6C 09 04 0096*       ld (@buffer+3),a
040964 2A 6A 09 04 0097*       ld hl,(@buffer+1)
040968 C9          0098*       ret
040969             0099*   @buffer: ds 4
04096D             0100*   
04096D             0101*   ; hlu 1 byte right shift, unsigned
04096D             0102*   ; returns: hlu / 256, fractional portion in a
04096D             0103*   ; destroys: af
04096D             0104*   hlu_udiv256:
       FF FF FF FF 
04096D AF          0105*       xor a
04096E 32 7F 09 04 0106*       ld (@buffer+3),a
040972 7D          0107*       ld a,l ; save the fractional portion
040973 22 7C 09 04 0108*       ld (@buffer),hl
040977 2A 7D 09 04 0109*       ld hl,(@buffer+1)
04097B C9          0110*       ret
04097C             0111*   @buffer: ds 4
040980             0112*   
040980             0113*       MACRO hlu_mul256
040980             0114*       add hl,hl ; * 2
040980             0115*       add hl,hl ; * 4
040980             0116*       add hl,hl ; * 8
040980             0117*       add hl,hl ; * 16
040980             0118*       add hl,hl ; * 32
040980             0119*       add hl,hl ; * 64
040980             0120*       add hl,hl ; * 128
040980             0121*       add hl,hl ; * 256
040980             0122*       ENDMACRO
040980             0123*   
       FF FF FF FF 
040980 00 00 00 00 0124*   add_bcd_arg1: db #00,#00,#00,#00
040984 00 00 00 00 0125*   add_bcd_arg2: db #00,#00,#00,#00
040988             0126*   
040988             0127*   ; set bcd values in a scratch memory address from registers bcde
040988             0128*   ; input: hl; scratch address,bcde; 8-place bcd number
040988             0129*   ; destroys ; hl
040988             0130*   set_bcd:
040988 73          0131*       ld (hl),e
040989 23          0132*       inc hl
04098A 72          0133*       ld (hl),d
04098B 23          0134*       inc hl
04098C 71          0135*       ld (hl),c
04098D 23          0136*       inc hl
04098E 70          0137*       ld (hl),b
04098F C9          0138*       ret
040990             0139*   
040990             0140*   ; load bcd values from a scratch memory address to bcde
040990             0141*   ; input: hl; scratch address
040990             0142*   ; output: bcde; 8-place bcd number
040990             0143*   ; destroys: hl
040990             0144*   get_bcd:
040990 5E          0145*       ld e,(hl)
040991 23          0146*       inc hl
040992 56          0147*       ld d,(hl)
040993 23          0148*       inc hl
040994 4E          0149*       ld c,(hl)
040995 23          0150*       inc hl
040996 46          0151*       ld b,(hl)
040997 C9          0152*       ret
040998             0153*   
040998             0154*   ; BCD addition
040998             0155*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040998             0156*   ;       a is the number of bytes holding each number (number of places/2)
040998             0157*   ; outputs: (hl) + (de) --> (hl)
040998             0158*   ; destroys: a,b,de,hl
040998             0159*   add_bcd:
040998 47          0160*       ld b,a ; loop counter
040999 AF          0161*       xor a ; reset a, clear carry flag
04099A             0162*   adcec:
04099A 1A          0163*       ld a,(de) ; addend to acc
04099B 8E          0164*       adc a,(hl) ; add (hl) to acc
04099C 27          0165*       daa ; adjust result to bcd
04099D 77          0166*       ld (hl),a ; store result
04099E 23          0167*       inc hl ; advance memory pointers
04099F 13          0168*       inc de
0409A0 10 F8       0169*       djnz adcec ; loop until b == 0
0409A2 C9          0170*       ret
0409A3             0171*   
0409A3             0172*   ; BCD subtraction
0409A3             0173*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0409A3             0174*   ;       a is the number of bytes holding each number (number of places/2)
0409A3             0175*   ; outputs: (hl) - (de) --> (hl)
0409A3             0176*   ; destroys: a,b,de,hl
0409A3             0177*   sub_bcd:
0409A3 47          0178*       ld b,a ; loop counter
0409A4 AF          0179*       xor a ; reset a,clear carry flag
0409A5             0180*   subdec:
0409A5 1A          0181*       ld a,(de) ; subtrahend to acc
0409A6 9E          0182*       sbc a,(hl) ; subtract (hl) from acc
0409A7 27          0183*       daa ; adjust result to bcd
0409A8 77          0184*       ld (hl),a ; store result
0409A9 23          0185*       inc hl ; advance memory pointers
0409AA 13          0186*       inc de
0409AB 10 F8       0187*       djnz subdec ; loop until b == 0
0409AD C9          0188*       ret
0409AE             0189*   
0409AE             0190*   ; http://www.z80.info/pseudo-random.txt
0409AE             0191*   rand_8:
0409AE C5          0192*       push bc
0409AF 3A C2 09 04 0193*       ld a,(r_seed)
0409B3 4F          0194*       ld c,a
0409B4             0195*   
0409B4 0F          0196*       rrca ; multiply by 32
0409B5 0F          0197*       rrca
0409B6 0F          0198*       rrca
0409B7 EE 1F       0199*       xor 0x1f
0409B9             0200*   
0409B9 81          0201*       add a,c
0409BA DE FF       0202*       sbc a,255 ; carry
0409BC             0203*   
0409BC 32 C2 09 04 0204*       ld (r_seed),a
0409C0 C1          0205*       pop bc
0409C1 C9          0206*       ret
0409C2 50          0207*   r_seed: defb $50
0409C3             0208*   
0409C3             0209*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
0409C3             0210*   prng24:
0409C3             0211*   ;;Expects ADL mode.
0409C3             0212*   ;;Output: HL
0409C3             0213*   ;;50cc
0409C3             0214*   ;;33 bytes
0409C3             0215*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
0409C3 ED 5B E4 09 0216*       ld de,(seed1)
       04          
0409C8 B7          0217*       or a
0409C9 ED 62       0218*       sbc hl,hl
0409CB 19          0219*       add hl,de
0409CC 29          0220*       add hl,hl
0409CD 29          0221*       add hl,hl
0409CE 2C          0222*       inc l
0409CF 19          0223*       add hl,de
0409D0 22 E4 09 04 0224*       ld (seed1),hl
0409D4 2A E7 09 04 0225*       ld hl,(seed2)
0409D8 29          0226*       add hl,hl
0409D9 9F          0227*       sbc a,a
0409DA E6 1B       0228*       and %00011011
0409DC AD          0229*       xor l
0409DD 6F          0230*       ld l,a
0409DE 22 E7 09 04 0231*       ld (seed2),hl
0409E2 19          0232*       add hl,de
0409E3 C9          0233*       ret
0409E4 00 00 00    0234*   seed1: dl 0
0409E7 00 00 00    0235*   seed2: dl 0
0409EA             0033        include "files.inc"
0409EA             0001*   ; load to onboard 8k sram
0409EA             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
0409EA             0034        include "fixed168.inc"
0409EA FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
040A00             0002*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040A00             0003*   ; uses EZ80 MLT instruction for speed
040A00             0004*   ; operation: UHL * A --> UHL
040A00             0005*   ; destroys: AF, HL
040A00             0006*   smul24x8:
040A00             0007*   ; make hl positive and store sign flag
040A00 CD 06 09 04 0008*       call hlu_abs
040A04 F5          0009*       push af
040A05             0010*   ; do the division
040A05 CD 10 0A 04 0011*       call mul24x8 ; hl = product
040A09             0012*   ; adjust sign of result
040A09 F1          0013*       pop af ; sign de
040A0A F0          0014*       ret p ; hl was positive, nothing to do
040A0B CD 16 09 04 0015*       call neg_hlu ; result is negative
040A0F C9          0016*       ret
040A10             0017*   
040A10             0018*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040A10             0019*   ; uses EZ80 MLT instruction for speed
040A10             0020*   ; operation: UHL * A --> AUHL
040A10             0021*   ; destroys: AF, HL
040A10             0022*   mul24x8:
040A10 D5          0023*       push de ; preserve de
040A11             0024*   ; low byte
040A11 5D          0025*       ld e,l
040A12 57          0026*       ld d,a
040A13 ED 5C       0027*       mlt de
040A15 6B          0028*       ld l,e ; product low byte
040A16 08          0029*       ex af,af' ; save multiplier
040A17 7A          0030*       ld a,d ; carry
040A18 08          0031*       ex af,af' ; save carry, restore multiplier
040A19             0032*   ; high byte
040A19 5C          0033*       ld e,h
040A1A 57          0034*       ld d,a
040A1B ED 5C       0035*       mlt de
040A1D 08          0036*       ex af,af' ; save multiplier, restore carry
040A1E 83          0037*       add a,e ; add carry
040A1F 67          0038*       ld h,a ; product middle byte
040A20 7A          0039*       ld a,d ; carry
040A21 08          0040*       ex af,af' ; save carry, restore multiplier
040A22             0041*   ; upper byte
040A22 22 3D 0A 04 0042*       ld (@scratch),hl ; 7 cycles
040A26 5F          0043*       ld e,a
040A27 3A 3F 0A 04 0044*       ld a,(@scratch+2)
040A2B 57          0045*       ld d,a
040A2C ED 5C       0046*       mlt de
040A2E 08          0047*       ex af,af' ; restore carry
040A2F 8B          0048*       adc a,e ; add carry
040A30 32 3F 0A 04 0049*       ld (@scratch+2),a ; 5 cycles
040A34 2A 3D 0A 04 0050*       ld hl,(@scratch) ; 7 cycles
040A38             0051*   ; highest byte
040A38 3E 00       0052*       ld a,0 ; preserve carry flag
040A3A 8A          0053*       adc a,d ; product highest byte
040A3B D1          0054*       pop de ; restore de
040A3C C9          0055*       ret
040A3D             0056*   @scratch: ds 3
040A40             0057*   
       FF FF FF 
040A40 00 00 00 00 0058*   mul24out: blkb 6,0
       00 00       
040A46             0059*   
040A46             0060*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040A46             0061*   ; operation: UHL * UDE --> mul24out
040A46             0062*   mul24:
040A46 DD E5       0063*       push ix ; preserve
040A48             0064*   ; point to output buffer and clear it
040A48 DD 21 40 0A 0065*       ld ix,mul24out
       04          
040A4D C5          0066*       push bc
040A4E 01 00 00 00 0067*       ld bc,0
040A52 DD 0F 00    0068*       ld (ix),bc
040A55 DD 0F 03    0069*       ld (ix+3),bc
040A58 C1          0070*       pop bc
040A59             0071*   ; STEP 1: UHL * E
040A59 7B          0072*       ld a,e
040A5A E5          0073*       push hl
040A5B CD 10 0A 04 0074*       call mul24x8
040A5F DD 2F 00    0075*       ld (ix+0),hl
040A62 DD 77 03    0076*       ld (ix+3),a
040A65             0077*   ; STEP 2: UHL * D
040A65 E1          0078*       pop hl
040A66 E5          0079*       push hl
040A67 7A          0080*       ld a,d
040A68 CD 10 0A 04 0081*       call mul24x8
040A6C CD 85 0A 04 0082*       call @accumulate
040A70             0083*   ; STEP 3: UHL * DEU
040A70 E1          0084*       pop hl
040A71 ED 53 B5 0A 0085*       ld (@de),de
       04          
040A76 3A B7 0A 04 0086*       ld a,(@de+2)
040A7A CD 10 0A 04 0087*       call mul24x8
040A7E CD 85 0A 04 0088*       call @accumulate
040A82             0089*   ; all done
040A82 DD E1       0090*       pop ix ; restore
040A84 C9          0091*       ret
040A85             0092*   @accumulate:
040A85 DD 23       0093*       inc ix
040A87             0094*   ; highest byte of product to carry
040A87 DD 77 03    0095*       ld (ix+3),a
040A8A             0096*   ; low byte of product
040A8A 7D          0097*       ld a,l
040A8B DD 86 00    0098*       add a,(ix+0)
040A8E DD 77 00    0099*       ld (ix+0),a
040A91             0100*   ; high byte of product
040A91 7C          0101*       ld a,h
040A92 DD 8E 01    0102*       adc a,(ix+1)
040A95 DD 77 01    0103*       ld (ix+1),a
040A98             0104*   ; uppper byte of product
040A98 22 B2 0A 04 0105*       ld (@hl),hl
040A9C 3A B4 0A 04 0106*       ld a,(@hl+2)
040AA0 DD 8E 02    0107*       adc a,(ix+2)
040AA3 DD 77 02    0108*       ld (ix+2),a
040AA6             0109*   ; carry
040AA6 3E 00       0110*       ld a,0 ; preserve flags
040AA8 DD 8E 03    0111*       adc a,(ix+3)
040AAB DD 77 03    0112*       ld (ix+3),a
040AAE C9          0113*       ret
040AAF             0114*   
040AAF 00 00 00    0115*   @ix: dl 0
040AB2 00 00 00    0116*   @hl: dl 0
040AB5 00 00 00    0117*   @de: dl 0
040AB8             0118*   
040AB8             0119*   ; UHL * UDE --> UHL (unsigned)
040AB8             0120*   umul24:
040AB8 CD 46 0A 04 0121*       call mul24
040ABC 2A 40 0A 04 0122*       ld hl,(mul24out)
040AC0 C9          0123*       ret
040AC1             0124*   
040AC1             0125*   ; UH.L = UH.L*UD.E (unsigned)
040AC1             0126*   umul168:
040AC1 CD 46 0A 04 0127*       call mul24
040AC5 2A 41 0A 04 0128*       ld hl,(mul24out+1)
040AC9 C9          0129*       ret
040ACA             0130*   
040ACA             0131*   ; UH.L * UD.E --> UH.L (signed)
040ACA             0132*   smul168:
040ACA             0133*   ; make everything positive and store sign flags
040ACA CD 06 09 04 0134*       call hlu_abs
040ACE F5          0135*       push af
040ACF EB          0136*       ex de,hl
040AD0 CD 06 09 04 0137*       call hlu_abs
040AD4 EB          0138*       ex de,hl
040AD5 F5          0139*       push af
040AD6             0140*   ; do the division
040AD6 CD C1 0A 04 0141*       call umul168 ; hl = product
040ADA             0142*   ; adjust sign of result
040ADA F1          0143*       pop af ; sign de
040ADB FA E6 0A 04 0144*       jp m,@de_neg
040ADF F1          0145*       pop af ; sign hl
040AE0 F0          0146*       ret p ; both positive, nothing to do
040AE1             0147*   @hl_neg:
040AE1 CD 16 09 04 0148*       call neg_hlu ; de pos, hl neg, result is negative
040AE5 C9          0149*       ret
040AE6             0150*   @de_neg:
040AE6 F1          0151*       pop af
040AE7 F8          0152*       ret m ; both negative, nothing to do
040AE8 CD 16 09 04 0153*       call neg_hlu ; result is negative
040AEC C9          0154*       ret
040AED             0155*   
040AED             0156*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040AED             0157*   ; perform unsigned division of 16.8 fixed place values
040AED             0158*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
040AED             0159*   udiv168:
040AED             0160*   ; back up divisor
040AED ED 53 24 0B 0161*       ld (@ude),de
       04          
040AF2             0162*   ; get the 16-bit integer part of the quotient
040AF2 CD 46 07 04 0163*       call udiv24 ; de = quotient, hl = remainder
040AF6             0164*   ; load quotient to upper three bytes of output
040AF6 ED 53 2B 0B 0165*       ld (div168_out+1),de
       04          
040AFB             0166*   @div256:
040AFB             0167*   ; multiply remainder by 256
040AFB             0168*       hlu_mul256
040AFB 29          0001*M1     add hl,hl ; * 2
040AFC 29          0002*M1     add hl,hl ; * 4
040AFD 29          0003*M1     add hl,hl ; * 8
040AFE 29          0004*M1     add hl,hl ; * 16
040AFF 29          0005*M1     add hl,hl ; * 32
040B00 29          0006*M1     add hl,hl ; * 64
040B01 29          0007*M1     add hl,hl ; * 128
040B02 29          0008*M1     add hl,hl ; * 256
040B03             0169*   ; skip fractional computation if remainder is zero
040B03             0170*       sign_hlu
040B03 19          0001*M1     add hl,de
040B04 B7          0002*M1     or a ; clear flags
040B05 ED 52       0003*M1     sbc hl,de
040B07 20 03       0171*       jr nz,@div_frac
040B09 AF          0172*       xor a
040B0A 18 0A       0173*       jr @write_frac
040B0C             0174*   ; now divide the shifted remainder by the divisor
040B0C             0175*   @div_frac:
040B0C ED 5B 24 0B 0176*       ld de,(@ude) ; get back divisor
       04          
040B11 CD 46 07 04 0177*       call udiv24 ; de = quotient, hl = remainder
040B15             0178*   ; load low byte of quotient to low byte of output
040B15 7B          0179*       ld a,e
040B16             0180*   @write_frac:
040B16 32 2A 0B 04 0181*       ld (div168_out),a
040B1A             0182*   ; load de with return value
040B1A ED 5B 2A 0B 0183*       ld de,(div168_out)
       04          
040B1F             0184*   ; load a with any overflow
040B1F 3A 2D 0B 04 0185*       ld a,(div168_out+3)
040B23 C9          0186*       ret ; ud.e is the 16.8 result
040B24             0187*   @ude: ds 6
040B2A             0188*   div168_out: ds 4 ; the extra byte is for overflow
040B2E             0189*   
040B2E             0190*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040B2E             0191*   ; perform signed division of 16.8 fixed place values
040B2E             0192*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040B2E             0193*   sdiv168:
040B2E             0194*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040B2E CD 06 09 04 0195*       call hlu_abs
040B32 F5          0196*       push af
040B33 EB          0197*       ex de,hl
040B34 CD 06 09 04 0198*       call hlu_abs
040B38 EB          0199*       ex de,hl
040B39 F5          0200*       push af
040B3A             0201*   ; do the division
040B3A CD ED 0A 04 0202*       call udiv168 ; de = quotient, hl = remainder
040B3E             0203*   ; adjust sign of result
040B3E F1          0204*       pop af ; sign de
040B3F FA 4C 0B 04 0205*       jp m,@de_neg
040B43 F1          0206*       pop af ; sign hl
040B44 F0          0207*       ret p ; both positive, nothing to do
040B45             0208*   @hl_neg:
040B45 EB          0209*       ex de,hl ; hl = quotient, de = remainder
040B46 CD 16 09 04 0210*       call neg_hlu ; de pos, hl neg, result is negative
040B4A EB          0211*       ex de,hl ; de = negated quotient, hl = remainder
040B4B C9          0212*       ret
040B4C             0213*   @de_neg:
040B4C F1          0214*       pop af
040B4D F8          0215*       ret m ; both negative, nothing to do
040B4E EB          0216*       ex de,hl ; hl = quotient, de = remainder
040B4F CD 16 09 04 0217*       call neg_hlu ; result is negative
040B53 EB          0218*       ex de,hl ; de = negated quotient, hl = remainder
040B54 C9          0219*       ret
040B55             0220*   
040B55             0221*   ; convert signed angles from a 360 to 256 degree circle
040B55             0222*   ; inputs: uh.l is the angle360 in 16.8 fixed format
040B55             0223*   ; outputs: uh.l is the angle256 in 16.8 fixed format
040B55             0224*   ; destroys: TODO
040B55             0225*   deg_360_to_256:
040B55 D5          0226*       push de ; preserve de
040B56             0227*   ; make angle positive and store sign flag
040B56 CD 06 09 04 0228*       call hlu_abs
040B5A F5          0229*       push af
040B5B             0230*   ; multiply by coversion factor of 256/360
040B5B 11 B6 00 00 0231*       ld de,0x0000B6 ; 0.711
040B5F CD C1 0A 04 0232*       call umul168 ; uh.l = uh.l * 0.711
040B63             0233*   ; restore sign flag and adjust output accordingly
040B63 F1          0234*       pop af
040B64 F2 6C 0B 04 0235*       jp p,@pos ; positive number
040B68 CD 16 09 04 0236*       call neg_hlu
040B6C             0237*   @pos:
040B6C             0238*   ; restore de and return uh.l as the result
040B6C D1          0239*       pop de
040B6D C9          0240*       ret
040B6E             0241*   
040B6E             0242*   ; convert signed angles from a 256 to 360 degree circle
040B6E             0243*   ; inputs: uh.l is the angle256 in 16.8 fixed format
040B6E             0244*   ; outputs: uh.l is the angle360 in 16.8 fixed format
040B6E             0245*   ; destroys: TODO
040B6E             0246*   deg_256_to_360:
040B6E D5          0247*       push de ; preserve de
040B6F             0248*   ; make angle positive and store sign flag
040B6F CD 06 09 04 0249*       call hlu_abs
040B73 F5          0250*       push af
040B74             0251*   ; multiply by coversion factor of 360/256
040B74 11 68 01 00 0252*       ld de,0x000168 ; 1.406
040B78 CD C1 0A 04 0253*       call umul168 ; uh.l = uh.l * 1.406
040B7C             0254*   ; restore sign flag and adjust output accordingly
040B7C F1          0255*       pop af
040B7D F2 85 0B 04 0256*       jp p,@pos ; positive number
040B81 CD 16 09 04 0257*       call neg_hlu
040B85             0258*   @pos:
040B85             0259*   ; restore de and return uh.l as the result
040B85 D1          0260*       pop de
040B86 C9          0261*       ret
040B87             0262*   
040B87             0263*   ; fixed 16.8 routine
040B87             0264*   ; cos(uh.l) --> uh.l
040B87             0265*   ; destroys: f, hl
040B87             0266*   cos168:
040B87 D5          0267*       push de ; preserve de
040B88             0268*   ; for cos we simply increment the angle by 90 degrees
040B88             0269*   ; or 0x004000 in 16.8 degrees256
040B88             0270*   ; which makes it a sin problem
040B88 11 00 40 00 0271*       ld de,0x004000
040B8C 19          0272*       add hl,de ; modulo 256 happens below
040B8D D1          0273*       pop de ; restore de
040B8E             0274*   ; fall through to sin168
040B8E             0275*   
040B8E             0276*   ; ---------------------
040B8E             0277*   ; fixed 16.8 routine
040B8E             0278*   ; sin(uh.l) --> uh.l
040B8E             0279*   ; destroys: f, hl
040B8E             0280*   sin168:
040B8E D5          0281*       push de
040B8F             0282*   ; handle negative angles appropriately
040B8F CD 06 09 04 0283*       call hlu_abs
040B93 F2 9C 0B 04 0284*       jp p,@F
040B97 11 00 00 FF 0285*       ld de,-256*256
040B9B 19          0286*       add hl,de
040B9C             0287*   @@:
040B9C 2E 03       0288*       ld l,3 ; multiply by 3 to get our lookup index
040B9E ED 6C       0289*       mlt hl
040BA0 11 4E 0E 04 0290*       ld de,sin_lut_168 ; grab the lut address
040BA4 19          0291*       add hl,de ; bump hl by the index
040BA5 ED 27       0292*       ld hl,(hl) ; don't try this on a z80!
040BA7 D1          0293*       pop de
040BA8 C9          0294*       ret
040BA9             0295*   
040BA9             0296*   ; 16.8 fixed inputs / outputs
040BA9             0297*   ; takes: uh.l as angle in degrees 256
040BA9             0298*   ;        ud.e as radius
040BA9             0299*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
040BA9             0300*   ;        displacements from origin (0,0)
040BA9             0301*   ; destroys: everything except indexes
040BA9             0302*   polar_to_cartesian:
040BA9             0303*   ; back up input parameters
040BA9 22 D8 0B 04 0304*       ld (@angle), hl
040BAD ED 53 DB 0B 0305*       ld (@radius), de
       04          
040BB2             0306*   ; compute dx = sin(uh.l) * ud.e
040BB2 CD 8E 0B 04 0307*       call sin168 ; uh.l = sin(uh.l)
040BB6 ED 5B DB 0B 0308*       ld de,(@radius)
       04          
040BBB CD CA 0A 04 0309*       call smul168 ; uh.l = dx
040BBF E5          0310*       push hl
040BC0             0311*   ; compute dy = -cos(uh.l) * ud.e
040BC0 2A D8 0B 04 0312*       ld hl,(@angle)
040BC4 CD 87 0B 04 0313*       call cos168 ; uh.l = cos(uh.l)
040BC8 ED 5B DB 0B 0314*       ld de,(@radius)
       04          
040BCD CD CA 0A 04 0315*       call smul168 ; uh.l = dy
040BD1 CD 16 09 04 0316*       call neg_hlu ; invert dy for screen coords convention
040BD5 EB          0317*       ex de,hl ; de = dy for output
040BD6 C1          0318*       pop bc ; bc = dx for output
040BD7             0319*   ; and out
040BD7 C9          0320*       ret
040BD8             0321*   @angle: ds 3
040BDB             0322*   @radius: ds 3
040BDE             0323*   
040BDE             0324*   ; 16.8 fixed inputs / outputs
040BDE             0325*   ; inputs: ub.c as dx, ud.e as dy
040BDE             0326*   ;        displacements from origin (0,0)
040BDE             0327*   ; returns: uh.l as angle in degrees 256
040BDE             0328*   ;        ud.e as radius
040BDE             0329*   ; destroys: everything except indexes
040BDE             0330*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040BDE ED 43 37 0C 0331*       ld (dx168),bc ; dx argument for distance168
       04          
040BE3 ED 53 3D 0C 0332*       ld (dy168),de ; dy argument for distance168
       04          
040BE8             0333*   ; compute radius
040BE8 CD 43 0C 04 0334*       call distance168 ; uh.l = radius
040BEC E5          0335*       push hl ; save radius
040BED             0336*   ; compute angle
040BED ED 4B 37 0C 0337*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040BF2 ED 5B 3D 0C 0338*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040BF7 CD 9D 0C 04 0339*       call atan2_168fast ; uh.l = angle
040BFB             0340*   ; return result
040BFB D1          0341*       pop de ; de = radius (was hl)
040BFC C9          0342*       ret
040BFD             0343*   ; end cartesian_to_polar
040BFD             0344*   
040BFD             0345*   ; 16.8 fixed inputs / outputs
040BFD             0346*   ; inputs: ub.c as dx, ud.e as dy
040BFD             0347*   ;        displacements from origin (0,0)
040BFD             0348*   ; returns: uh.l as angle in degrees 256
040BFD             0349*   ;        ud.e as radius
040BFD             0350*   ; destroys: everything except indexes
040BFD             0351*   ; note: uses distance168sm which is more accurate for small deltas
040BFD             0352*   cartesian_to_polar_sm:
040BFD ED 43 37 0C 0353*       ld (dx168),bc ; dx argument for distance168
       04          
040C02 ED 53 3D 0C 0354*       ld (dy168),de ; dy argument for distance168
       04          
040C07             0355*   ; compute radius
040C07 CD 78 0C 04 0356*       call distance168sm ; uh.l = radius
040C0B E5          0357*       push hl ; save radius
040C0C             0358*   ; compute angle
040C0C ED 4B 37 0C 0359*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040C11 ED 5B 3D 0C 0360*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040C16 CD 9D 0C 04 0361*       call atan2_168fast ; uh.l = angle
040C1A             0362*   ; return result
040C1A D1          0363*       pop de ; de = radius (was hl)
040C1B C9          0364*       ret
040C1C             0365*   ; end cartesian_to_polar
040C1C             0366*   
040C1C             0367*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040C1C             0368*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040C1C             0369*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040C1C             0370*   ;         also populates scratch locations dx168 and dy168
040C1C             0371*   ; destroys: a,hl,bc,de
040C1C             0372*   dxy168:
040C1C             0373*   ; compute dx = x1-x0
040C1C AF          0374*       xor a ; clear carry
040C1D DD E5       0375*       push ix ; move ix to hl via the stack
040C1F E1          0376*       pop hl ; hl = x1
040C20 ED 42       0377*       sbc hl,bc ; hl = dx
040C22 22 37 0C 04 0378*       ld (dx168),hl ; dx to scratch
040C26             0379*   ; compute dy = y1-y0
040C26 AF          0380*       xor a ; clear carry
040C27 FD E5       0381*       push iy ; move iy to hl via the stack
040C29 E1          0382*       pop hl ; hl = y1
040C2A ED 52       0383*       sbc hl,de ; hl = dy
040C2C 22 3D 0C 04 0384*       ld (dy168),hl ; dy to scratch
040C30             0385*   ; populate output registers and return
040C30 EB          0386*       ex de,hl ; ud.e = dy
040C31 ED 4B 37 0C 0387*       ld bc,(dx168) ; ub.c = dx
       04          
040C36 C9          0388*       ret
040C37 00 00 00 00 0389*   dx168: blkb 6,0
       00 00       
040C3D 00 00 00 00 0390*   dy168: blkb 6,0
       00 00       
040C43             0391*   
040C43             0392*   ; compute the euclidian distance between two cartesian coordinates
040C43             0393*   ; using the formula d = sqrt(dx^2+dy^2)
040C43             0394*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C43             0395*   ; output; uh.l is the 16.8 fixed format distance
040C43             0396*   ;         also populates scratch locations dx168 and dy168
040C43             0397*   ; destroys: a,hl,bc,de
040C43             0398*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
040C43             0399*   ;       thus the result will always be an integer, albeit in 16.8 format
040C43             0400*   distance168:
040C43             0401*   ; compute dy^2
040C43 2A 3D 0C 04 0402*       ld hl,(dy168)
040C47 CD 06 09 04 0403*       call hlu_abs
040C4B CD 6D 09 04 0404*       call hlu_udiv256 ; make integer to avoid overflow
040C4F E5          0405*       push hl
040C50 D1          0406*       pop de
040C51 CD B8 0A 04 0407*       call umul24 ; hl = dy^2
040C55 E5          0408*       push hl ; save dy^2
040C56             0409*   ; compute dx^2
040C56 2A 37 0C 04 0410*       ld hl,(dx168)
040C5A CD 06 09 04 0411*       call hlu_abs
040C5E CD 6D 09 04 0412*       call hlu_udiv256 ; make integer to avoid overflow
040C62 E5          0413*       push hl
040C63 D1          0414*       pop de
040C64 CD B8 0A 04 0415*       call umul24 ; hl = dx^2
040C68             0416*   ; add dx^2 and dy^2
040C68 D1          0417*       pop de ; de = dy^2 (was hl)
040C69 19          0418*       add hl,de ; hl = dx^2 + dy^2
040C6A             0419*   ; compute the square root
040C6A CD 68 0D 04 0420*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C6E EB          0421*       ex de,hl ; hl = distance
040C6F             0422*       hlu_mul256 ; convert back to 16.8 fixed
040C6F 29          0001*M1     add hl,hl ; * 2
040C70 29          0002*M1     add hl,hl ; * 4
040C71 29          0003*M1     add hl,hl ; * 8
040C72 29          0004*M1     add hl,hl ; * 16
040C73 29          0005*M1     add hl,hl ; * 32
040C74 29          0006*M1     add hl,hl ; * 64
040C75 29          0007*M1     add hl,hl ; * 128
040C76 29          0008*M1     add hl,hl ; * 256
040C77 C9          0423*       ret
040C78             0424*   
040C78             0425*   ; compute the euclidian distance between two cartesian coordinates
040C78             0426*   ; using the formula d = sqrt(dx^2+dy^2)
040C78             0427*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C78             0428*   ; output; uh.l is the 16.8 fixed format distance
040C78             0429*   ;         also populates scratch locations dx168 and dy168
040C78             0430*   ; destroys: a,hl,bc,de
040C78             0431*   ; NOTE: sm means 'small' because it doesn't round down the deltas
040C78             0432*   ;       making it more accurate for small deltas,
040C78             0433*   ;       but will overflow if used for screen-sized deltas
040C78             0434*   distance168sm:
040C78             0435*   ; compute dy^2
040C78 2A 3D 0C 04 0436*       ld hl,(dy168)
040C7C CD 06 09 04 0437*       call hlu_abs
040C80 E5          0438*       push hl
040C81 D1          0439*       pop de
040C82 CD B8 0A 04 0440*       call umul24 ; hl = dy^2
040C86 E5          0441*       push hl ; save dy^2
040C87             0442*   ; compute dx^2
040C87 2A 37 0C 04 0443*       ld hl,(dx168)
040C8B CD 06 09 04 0444*       call hlu_abs
040C8F E5          0445*       push hl
040C90 D1          0446*       pop de
040C91 CD B8 0A 04 0447*       call umul24 ; hl = dx^2
040C95             0448*   ; add dx^2 and dy^2
040C95 D1          0449*       pop de ; de = dy^2 (was hl)
040C96 19          0450*       add hl,de ; hl = dx^2 + dy^2
040C97             0451*   ; compute the square root
040C97 CD 68 0D 04 0452*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C9B EB          0453*       ex de,hl ; hl = distance
040C9C C9          0454*       ret
040C9D             0455*   
040C9D             0456*   ; atan2_(ub.c,ud.e) --> uh.l
040C9D             0457*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040C9D             0458*   ;   whether inputs are integers or fractional doesn't matter
040C9D             0459*   ;   so long as the sign bit of the upper byte is correct
040C9D             0460*   ; output: uh.l is the 16.8 fixed angle in degrees 256
040C9D             0461*   ; angles are COMPASS HEADINGS based on
040C9D             0462*   ; screen coordinate conventions,where the y axis is flipped
040C9D             0463*   ; #E0 224      0       32 #20
040C9D             0464*   ;        -x,-y | +x,-y
040C9D             0465*   ; #C0 192------+------ 64 #40
040C9D             0466*   ;        -x,+y | +x,+y
040C9D             0467*   ; #A0 160   128 #80   96 #60
040C9D             0468*   atan2_168fast:
040C9D             0469*   ; get signs and make everything positive
040C9D             0470*   ; get abs(x) and store its original sign
040C9D C5          0471*       push bc
040C9E E1          0472*       pop hl
040C9F CD 06 09 04 0473*       call hlu_abs ; if x was negative this also sets the sign flag
040CA3 E5          0474*       push hl ; store abs(x)
040CA4 C1          0475*       pop bc ; bc = abs(x)
040CA5 F5          0476*       push af ; store sign of x
040CA6             0477*   ; get abs(y) and store its original sign
040CA6 EB          0478*       ex de,hl ; hl = y
040CA7 CD 06 09 04 0479*       call hlu_abs ; if y was negative this also sets the sign flag
040CAB EB          0480*       ex de,hl ; de = abs(y)
040CAC F5          0481*       push af ; store sign of y
040CAD             0482*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
040CAD             0483*   ; this ensures that our lookup value is between 0 and 1 inclusive
040CAD AF          0484*       xor a ; clear the carry flag
040CAE D5          0485*       push de
040CAF E1          0486*       pop hl
040CB0 ED 42       0487*       sbc hl,bc
040CB2 F5          0488*       push af ; save sign of de - bc
040CB3 F2 BC 0C 04 0489*       jp p,@1 ; bc <= de, so we skip ahead
040CB7             0490*   ; otherwise we swap bc and de
040CB7 C5          0491*       push bc
040CB8 E1          0492*       pop hl
040CB9 EB          0493*       ex de,hl
040CBA E5          0494*       push hl
040CBB C1          0495*       pop bc
040CBC             0496*   @1:
040CBC             0497*   ; now we're ready to snag our preliminary result
040CBC C5          0498*       push bc
040CBD E1          0499*       pop hl
040CBE CD 2C 0D 04 0500*       call atan_168fast ; uh.l comes back with prelim result
040CC2             0501*   ; now we adjust uh.l based on sign of de - bc
040CC2 F1          0502*       pop af
040CC3 F2 CF 0C 04 0503*       jp p,@2 ; bc <= de,so we skip ahead
040CC7 EB          0504*       ex de,hl
040CC8 21 00 40 00 0505*       ld hl,64*256 ; subtract from 64 (90) degrees
040CCC AF          0506*       xor a ; clear the carry flag
040CCD ED 52       0507*       sbc hl,de
040CCF             0508*   @2:
040CCF             0509*   ; adjust the result based on quadrant
040CCF             0510*   ; #E0 224      0       32 #20
040CCF             0511*   ;        -x,-y | +x,-y
040CCF             0512*   ; #C0 192------+------ 64 #40
040CCF             0513*   ;        -x,+y | +x,+y
040CCF             0514*   ; #A0 160   128 #80   96 #60
040CCF F1          0515*       pop af ; sign of y
040CD0 CA 0D 0D 04 0516*       jp z,@y_zero
040CD4 F2 ED 0C 04 0517*       jp p,@y_pos
040CD8             0518*   ; y neg,check x
040CD8 F1          0519*       pop af ; sign of x
040CD9 CA E7 0C 04 0520*       jp z,@y_neg_x_zero
040CDD F2 EC 0C 04 0521*       jp p,@y_neg_x_pos
040CE1             0522*   ; y neg,x neg
040CE1             0523*   ; angle is 128 to 256 (270 to 360)
040CE1             0524*   ; negating the intermediate does the trick
040CE1 CD 16 09 04 0525*       call neg_hlu
040CE5 18 31       0526*       jr @zero_hlu
040CE7             0527*   
040CE7             0528*   @y_neg_x_zero:
040CE7             0529*   ; y neg,x zero
040CE7             0530*   ; angle is 0
040CE7 21 00 00 00 0531*       ld hl,0
040CEB C9          0532*       ret
040CEC             0533*   @y_neg_x_pos:
040CEC             0534*   ; y neg,x pos
040CEC             0535*   ; angle is 0 to 64 (0 to 90)
040CEC             0536*   ; so we're good
040CEC C9          0537*       ret
040CED             0538*   
040CED             0539*   @y_pos:
040CED F1          0540*       pop af ; sign of x
040CEE CA FD 0C 04 0541*       jp z,@y_pos_x_zero
040CF2 F2 02 0D 04 0542*       jp p,@y_pos_x_pos
040CF6             0543*   ; y pos,x neg
040CF6             0544*   ; angle is 128 to 192 (180-270)
040CF6             0545*   ; so we add 128 to intermediate
040CF6 11 00 80 00 0546*       ld de,128*256
040CFA 19          0547*       add hl,de
040CFB 18 1B       0548*       jr @zero_hlu
040CFD             0549*   @y_pos_x_zero:
040CFD             0550*   ; y pos,x zero
040CFD             0551*   ; angle is 128 (180)
040CFD 21 00 80 00 0552*       ld hl,128*256
040D01 C9          0553*       ret
040D02             0554*   @y_pos_x_pos:
040D02             0555*   ; y pos,x pos
040D02             0556*   ; angle is 64 to 128 (90 to 180)
040D02             0557*   ; neg the intermediate and add 180 degrees
040D02 CD 16 09 04 0558*       call neg_hlu
040D06 11 00 80 00 0559*       ld de,128*256
040D0A 19          0560*       add hl,de
040D0B 18 0B       0561*       jr @zero_hlu
040D0D             0562*   
040D0D             0563*   @y_zero:
040D0D F1          0564*       pop af ; sign of x
040D0E FA 13 0D 04 0565*       jp m,@y_zero_x_neg
040D12             0566*   ; y zero,x pos
040D12             0567*   ; angle is 64 (90),nothing to do
040D12 C9          0568*       ret
040D13             0569*   @y_zero_x_neg:
040D13             0570*   ; y zero ,x neg
040D13             0571*   ; angle is 192 (270)
040D13 21 00 C0 00 0572*       ld hl,192*256
040D17 C9          0573*       ret
040D18             0574*   @zero_hlu:
040D18 AF          0575*       xor a
040D19 22 26 0D 04 0576*       ld (@scratch),hl
040D1D 32 28 0D 04 0577*       ld (@scratch+2),a
040D21 2A 26 0D 04 0578*       ld hl,(@scratch)
040D25 C9          0579*       ret
040D26             0580*   @scratch: ds 6
040D2C             0581*   
040D2C             0582*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040D2C             0583*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
040D2C             0584*   ; destroys: a,hl,bc,de
040D2C             0585*   ; note: only works for angles from 0 to 32 (45) degrees
040D2C             0586*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040D2C             0587*   atan_168fast:
040D2C             0588*   ; because we use compass headings instead of geometric angles
040D2C             0589*   ; we compute dx/dy which is 1/tan(theta) in the maths world
040D2C             0590*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
040D2C CD ED 0A 04 0591*       call udiv168 ; ud.e = dx/dy
040D30 EB          0592*       ex de,hl ; uh.l = dx/dy
040D31             0593*   ; test uh.l for 0
040D31 19          0594*       add hl,de
040D32 B7          0595*       or a
040D33 ED 52       0596*       sbc hl,de
040D35 28 22       0597*       jr z,@is_zero
040D37             0598*   ; test uh.l for 1
040D37 AF          0599*       xor a ; clear carry
040D38 EB          0600*       ex de,hl
040D39 21 00 01 00 0601*       ld hl,1*256 ; 1 in 16.8 fixed format
040D3D ED 52       0602*       sbc hl,de
040D3F 28 13       0603*       jr z,@is_45
040D41 EB          0604*       ex de,hl
040D42             0605*   ; no special cases so we move on
040D42             0606*   ; l contains the fractional portion of tan(uh.l)
040D42             0607*   ; we multiply it by three to get our lookup table index
040D42 26 03       0608*       ld h,3
040D44 ED 6C       0609*       mlt hl ; index into lut
040D46 11 00 00 00 0610*       ld de,0 ; clear deu
040D4A 54          0611*       ld d,h ; copy hl to de
040D4B 5D          0612*       ld e,l ; de contains our index
040D4C 21 51 11 04 0613*       ld hl,atan_lut_168 ; grab the lut address
040D50 19          0614*       add hl,de ; bump hl by the index
040D51 ED 27       0615*       ld hl,(hl) ; don't try this on a z80!
040D53 C9          0616*       ret ; and out
040D54             0617*   @is_45:
040D54 21 00 20 00 0618*       ld hl,32*256
040D58 C9          0619*       ret
040D59             0620*   ; for the case tan(0)
040D59             0621*   @is_zero:
040D59 21 00 00 00 0622*       ld hl,0*256
040D5D C9          0623*       ret
040D5E             0624*   
040D5E             0625*   ; Expects  ADL mode
040D5E             0626*   ; Inputs:  UH.L
040D5E             0627*   ; Outputs: UH.L is the 16.8 square root
040D5E             0628*   ;          UDE is the integer difference inputHL-DE^2
040D5E             0629*   sqrt168:
040D5E CD 68 0D 04 0630*       call sqrt24
040D62 EB          0631*       ex de,hl
040D63 29          0632*       add hl,hl
040D64 29          0633*       add hl,hl
040D65 29          0634*       add hl,hl
040D66 29          0635*       add hl,hl
040D67 C9          0636*       ret
040D68             0637*   
040D68             0638*   ; credit: xeda112358
040D68             0639*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040D68             0640*   sqrt24:
040D68             0641*   ; Expects ADL mode
040D68             0642*   ; Inputs: HL
040D68             0643*   ; Outputs: DE is the integer square root
040D68             0644*   ;  HL is the difference inputHL-DE^2
040D68             0645*   ;  c flag reset
040D68 01 00 00 00 0646*       ld bc,0 ; clear bcu
040D6C 11 00 00 00 0647*       ld de,0 ; clear deu
040D70 AF          0648*       xor a
040D71 45          0649*       ld b,l
040D72 C5          0650*       push bc
040D73 47          0651*       ld b,a
040D74 6F          0652*       ld l,a
040D75             0653*   ; Iteration 1
040D75 29          0654*       add hl,hl
040D76 CB 11       0655*       rl c
040D78 29          0656*       add hl,hl
040D79 CB 11       0657*       rl c
040D7B 91          0658*       sub c
040D7C 30 04       0659*       jr nc,$+6
040D7E 1C          0660*       inc e
040D7F 1C          0661*       inc e
040D80 2F          0662*       cpl
040D81 4F          0663*       ld c,a
040D82             0664*   ; Iteration 2
040D82 29          0665*       add hl,hl
040D83 CB 11       0666*       rl c
040D85 29          0667*       add hl,hl
040D86 CB 11       0668*       rl c
040D88 CB 13       0669*       rl e
040D8A 7B          0670*       ld a,e
040D8B 91          0671*       sub c
040D8C 30 04       0672*       jr nc,$+6
040D8E 1C          0673*       inc e
040D8F 1C          0674*       inc e
040D90 2F          0675*       cpl
040D91 4F          0676*       ld c,a
040D92             0677*   ; Iteration 3
040D92 29          0678*       add hl,hl
040D93 CB 11       0679*       rl c
040D95 29          0680*       add hl,hl
040D96 CB 11       0681*       rl c
040D98 CB 13       0682*       rl e
040D9A 7B          0683*       ld a,e
040D9B 91          0684*       sub c
040D9C 30 04       0685*       jr nc,$+6
040D9E 1C          0686*       inc e
040D9F 1C          0687*       inc e
040DA0 2F          0688*       cpl
040DA1 4F          0689*       ld c,a
040DA2             0690*   ; Iteration 4
040DA2 29          0691*       add hl,hl
040DA3 CB 11       0692*       rl c
040DA5 29          0693*       add hl,hl
040DA6 CB 11       0694*       rl c
040DA8 CB 13       0695*       rl e
040DAA 7B          0696*       ld a,e
040DAB 91          0697*       sub c
040DAC 30 04       0698*       jr nc,$+6
040DAE 1C          0699*       inc e
040DAF 1C          0700*       inc e
040DB0 2F          0701*       cpl
040DB1 4F          0702*       ld c,a
040DB2             0703*   ; Iteration 5
040DB2 29          0704*       add hl,hl
040DB3 CB 11       0705*       rl c
040DB5 29          0706*       add hl,hl
040DB6 CB 11       0707*       rl c
040DB8 CB 13       0708*       rl e
040DBA 7B          0709*       ld a,e
040DBB 91          0710*       sub c
040DBC 30 04       0711*       jr nc,$+6
040DBE 1C          0712*       inc e
040DBF 1C          0713*       inc e
040DC0 2F          0714*       cpl
040DC1 4F          0715*       ld c,a
040DC2             0716*   ; Iteration 6
040DC2 29          0717*       add hl,hl
040DC3 CB 11       0718*       rl c
040DC5 29          0719*       add hl,hl
040DC6 CB 11       0720*       rl c
040DC8 CB 13       0721*       rl e
040DCA 7B          0722*       ld a,e
040DCB 91          0723*       sub c
040DCC 30 04       0724*       jr nc,$+6
040DCE 1C          0725*       inc e
040DCF 1C          0726*       inc e
040DD0 2F          0727*       cpl
040DD1 4F          0728*       ld c,a
040DD2             0729*   ; Iteration 7
040DD2 29          0730*       add hl,hl
040DD3 CB 11       0731*       rl c
040DD5 29          0732*       add hl,hl
040DD6 CB 11       0733*       rl c
040DD8 CB 10       0734*       rl b
040DDA EB          0735*       ex de,hl
040DDB 29          0736*       add hl,hl
040DDC E5          0737*       push hl
040DDD ED 42       0738*       sbc hl,bc
040DDF 30 06       0739*       jr nc,$+8
040DE1 7C          0740*       ld a,h
040DE2 2F          0741*       cpl
040DE3 47          0742*       ld b,a
040DE4 7D          0743*       ld a,l
040DE5 2F          0744*       cpl
040DE6 4F          0745*       ld c,a
040DE7 E1          0746*       pop hl
040DE8 30 02       0747*       jr nc,$+4
040DEA 23          0748*       inc hl
040DEB 23          0749*       inc hl
040DEC EB          0750*       ex de,hl
040DED             0751*   ; Iteration 8
040DED 29          0752*       add hl,hl
040DEE 69          0753*       ld l,c
040DEF 60          0754*       ld h,b
040DF0 ED 6A       0755*       adc hl,hl
040DF2 ED 6A       0756*       adc hl,hl
040DF4 EB          0757*       ex de,hl
040DF5 29          0758*       add hl,hl
040DF6 ED 52       0759*       sbc hl,de
040DF8 19          0760*       add hl,de
040DF9 EB          0761*       ex de,hl
040DFA 30 04       0762*       jr nc,$+6
040DFC ED 52       0763*       sbc hl,de
040DFE 13          0764*       inc de
040DFF 13          0765*       inc de
040E00             0766*   ; Iteration 9
040E00 F1          0767*       pop af
040E01 17          0768*       rla
040E02 ED 6A       0769*       adc hl,hl
040E04 17          0770*       rla
040E05 ED 6A       0771*       adc hl,hl
040E07 EB          0772*       ex de,hl
040E08 29          0773*       add hl,hl
040E09 ED 52       0774*       sbc hl,de
040E0B 19          0775*       add hl,de
040E0C EB          0776*       ex de,hl
040E0D 30 04       0777*       jr nc,$+6
040E0F ED 52       0778*       sbc hl,de
040E11 13          0779*       inc de
040E12 13          0780*       inc de
040E13             0781*   ; Iteration 10
040E13 17          0782*       rla
040E14 ED 6A       0783*       adc hl,hl
040E16 17          0784*       rla
040E17 ED 6A       0785*       adc hl,hl
040E19 EB          0786*       ex de,hl
040E1A 29          0787*       add hl,hl
040E1B ED 52       0788*       sbc hl,de
040E1D 19          0789*       add hl,de
040E1E EB          0790*       ex de,hl
040E1F 30 04       0791*       jr nc,$+6
040E21 ED 52       0792*       sbc hl,de
040E23 13          0793*       inc de
040E24 13          0794*       inc de
040E25             0795*   ; Iteration 11
040E25 17          0796*       rla
040E26 ED 6A       0797*       adc hl,hl
040E28 17          0798*       rla
040E29 ED 6A       0799*       adc hl,hl
040E2B EB          0800*       ex de,hl
040E2C 29          0801*       add hl,hl
040E2D ED 52       0802*       sbc hl,de
040E2F 19          0803*       add hl,de
040E30 EB          0804*       ex de,hl
040E31 30 04       0805*       jr nc,$+6
040E33 ED 52       0806*       sbc hl,de
040E35 13          0807*       inc de
040E36 13          0808*       inc de
040E37             0809*   ; Iteration 12
040E37 17          0810*       rla
040E38 ED 6A       0811*       adc hl,hl
040E3A 17          0812*       rla
040E3B ED 6A       0813*       adc hl,hl
040E3D EB          0814*       ex de,hl
040E3E 29          0815*       add hl,hl
040E3F ED 52       0816*       sbc hl,de
040E41 19          0817*       add hl,de
040E42 EB          0818*       ex de,hl
040E43 30 04       0819*       jr nc,$+6
040E45 ED 52       0820*       sbc hl,de
040E47 13          0821*       inc de
040E48 13          0822*       inc de
040E49 CB 1A       0823*       rr d
040E4B CB 1B       0824*       rr e
040E4D C9          0825*       ret
040E4E             0826*   
040E4E             0827*   sin_lut_168:
040E4E 00 00 00    0828*       dl 0x000000 ; 0.000 00, 0.000
040E51 06 00 00    0829*       dl 0x000006 ; 1.406 01, 0.025
040E54 0C 00 00    0830*       dl 0x00000C ; 2.813 02, 0.049
040E57 12 00 00    0831*       dl 0x000012 ; 4.219 03, 0.074
040E5A 19 00 00    0832*       dl 0x000019 ; 5.625 04, 0.098
040E5D 1F 00 00    0833*       dl 0x00001F ; 7.031 05, 0.122
040E60 25 00 00    0834*       dl 0x000025 ; 8.438 06, 0.147
040E63 2B 00 00    0835*       dl 0x00002B ; 9.844 07, 0.171
040E66 31 00 00    0836*       dl 0x000031 ; 11.250 08, 0.195
040E69 38 00 00    0837*       dl 0x000038 ; 12.656 09, 0.219
040E6C 3E 00 00    0838*       dl 0x00003E ; 14.063 0A, 0.243
040E6F 44 00 00    0839*       dl 0x000044 ; 15.469 0B, 0.267
040E72 4A 00 00    0840*       dl 0x00004A ; 16.875 0C, 0.290
040E75 50 00 00    0841*       dl 0x000050 ; 18.281 0D, 0.314
040E78 56 00 00    0842*       dl 0x000056 ; 19.688 0E, 0.337
040E7B 5C 00 00    0843*       dl 0x00005C ; 21.094 0F, 0.360
040E7E 61 00 00    0844*       dl 0x000061 ; 22.500 10, 0.383
040E81 67 00 00    0845*       dl 0x000067 ; 23.906 11, 0.405
040E84 6D 00 00    0846*       dl 0x00006D ; 25.313 12, 0.428
040E87 73 00 00    0847*       dl 0x000073 ; 26.719 13, 0.450
040E8A 78 00 00    0848*       dl 0x000078 ; 28.125 14, 0.471
040E8D 7E 00 00    0849*       dl 0x00007E ; 29.531 15, 0.493
040E90 83 00 00    0850*       dl 0x000083 ; 30.938 16, 0.514
040E93 88 00 00    0851*       dl 0x000088 ; 32.344 17, 0.535
040E96 8E 00 00    0852*       dl 0x00008E ; 33.750 18, 0.556
040E99 93 00 00    0853*       dl 0x000093 ; 35.156 19, 0.576
040E9C 98 00 00    0854*       dl 0x000098 ; 36.563 1A, 0.596
040E9F 9D 00 00    0855*       dl 0x00009D ; 37.969 1B, 0.615
040EA2 A2 00 00    0856*       dl 0x0000A2 ; 39.375 1C, 0.634
040EA5 A7 00 00    0857*       dl 0x0000A7 ; 40.781 1D, 0.653
040EA8 AB 00 00    0858*       dl 0x0000AB ; 42.188 1E, 0.672
040EAB B0 00 00    0859*       dl 0x0000B0 ; 43.594 1F, 0.690
040EAE B5 00 00    0860*       dl 0x0000B5 ; 45.000 20, 0.707
040EB1 B9 00 00    0861*       dl 0x0000B9 ; 46.406 21, 0.724
040EB4 BD 00 00    0862*       dl 0x0000BD ; 47.813 22, 0.741
040EB7 C1 00 00    0863*       dl 0x0000C1 ; 49.219 23, 0.757
040EBA C5 00 00    0864*       dl 0x0000C5 ; 50.625 24, 0.773
040EBD C9 00 00    0865*       dl 0x0000C9 ; 52.031 25, 0.788
040EC0 CD 00 00    0866*       dl 0x0000CD ; 53.438 26, 0.803
040EC3 D1 00 00    0867*       dl 0x0000D1 ; 54.844 27, 0.818
040EC6 D4 00 00    0868*       dl 0x0000D4 ; 56.250 28, 0.831
040EC9 D8 00 00    0869*       dl 0x0000D8 ; 57.656 29, 0.845
040ECC DB 00 00    0870*       dl 0x0000DB ; 59.063 2A, 0.858
040ECF DE 00 00    0871*       dl 0x0000DE ; 60.469 2B, 0.870
040ED2 E1 00 00    0872*       dl 0x0000E1 ; 61.875 2C, 0.882
040ED5 E4 00 00    0873*       dl 0x0000E4 ; 63.281 2D, 0.893
040ED8 E7 00 00    0874*       dl 0x0000E7 ; 64.688 2E, 0.904
040EDB EA 00 00    0875*       dl 0x0000EA ; 66.094 2F, 0.914
040EDE EC 00 00    0876*       dl 0x0000EC ; 67.500 30, 0.924
040EE1 EE 00 00    0877*       dl 0x0000EE ; 68.906 31, 0.933
040EE4 F1 00 00    0878*       dl 0x0000F1 ; 70.313 32, 0.942
040EE7 F3 00 00    0879*       dl 0x0000F3 ; 71.719 33, 0.950
040EEA F4 00 00    0880*       dl 0x0000F4 ; 73.125 34, 0.957
040EED F6 00 00    0881*       dl 0x0000F6 ; 74.531 35, 0.964
040EF0 F8 00 00    0882*       dl 0x0000F8 ; 75.938 36, 0.970
040EF3 F9 00 00    0883*       dl 0x0000F9 ; 77.344 37, 0.976
040EF6 FB 00 00    0884*       dl 0x0000FB ; 78.750 38, 0.981
040EF9 FC 00 00    0885*       dl 0x0000FC ; 80.156 39, 0.985
040EFC FD 00 00    0886*       dl 0x0000FD ; 81.563 3A, 0.989
040EFF FE 00 00    0887*       dl 0x0000FE ; 82.969 3B, 0.992
040F02 FE 00 00    0888*       dl 0x0000FE ; 84.375 3C, 0.995
040F05 FF 00 00    0889*       dl 0x0000FF ; 85.781 3D, 0.997
040F08 FF 00 00    0890*       dl 0x0000FF ; 87.188 3E, 0.999
040F0B FF 00 00    0891*       dl 0x0000FF ; 88.594 3F, 1.000
040F0E 00 01 00    0892*       dl 0x000100 ; 90.000 40, 1.000
040F11 FF 00 00    0893*       dl 0x0000FF ; 91.406 41, 1.000
040F14 FF 00 00    0894*       dl 0x0000FF ; 92.813 42, 0.999
040F17 FF 00 00    0895*       dl 0x0000FF ; 94.219 43, 0.997
040F1A FE 00 00    0896*       dl 0x0000FE ; 95.625 44, 0.995
040F1D FE 00 00    0897*       dl 0x0000FE ; 97.031 45, 0.992
040F20 FD 00 00    0898*       dl 0x0000FD ; 98.438 46, 0.989
040F23 FC 00 00    0899*       dl 0x0000FC ; 99.844 47, 0.985
040F26 FB 00 00    0900*       dl 0x0000FB ; 101.250 48, 0.981
040F29 F9 00 00    0901*       dl 0x0000F9 ; 102.656 49, 0.976
040F2C F8 00 00    0902*       dl 0x0000F8 ; 104.063 4A, 0.970
040F2F F6 00 00    0903*       dl 0x0000F6 ; 105.469 4B, 0.964
040F32 F4 00 00    0904*       dl 0x0000F4 ; 106.875 4C, 0.957
040F35 F3 00 00    0905*       dl 0x0000F3 ; 108.281 4D, 0.950
040F38 F1 00 00    0906*       dl 0x0000F1 ; 109.688 4E, 0.942
040F3B EE 00 00    0907*       dl 0x0000EE ; 111.094 4F, 0.933
040F3E EC 00 00    0908*       dl 0x0000EC ; 112.500 50, 0.924
040F41 EA 00 00    0909*       dl 0x0000EA ; 113.906 51, 0.914
040F44 E7 00 00    0910*       dl 0x0000E7 ; 115.313 52, 0.904
040F47 E4 00 00    0911*       dl 0x0000E4 ; 116.719 53, 0.893
040F4A E1 00 00    0912*       dl 0x0000E1 ; 118.125 54, 0.882
040F4D DE 00 00    0913*       dl 0x0000DE ; 119.531 55, 0.870
040F50 DB 00 00    0914*       dl 0x0000DB ; 120.938 56, 0.858
040F53 D8 00 00    0915*       dl 0x0000D8 ; 122.344 57, 0.845
040F56 D4 00 00    0916*       dl 0x0000D4 ; 123.750 58, 0.831
040F59 D1 00 00    0917*       dl 0x0000D1 ; 125.156 59, 0.818
040F5C CD 00 00    0918*       dl 0x0000CD ; 126.563 5A, 0.803
040F5F C9 00 00    0919*       dl 0x0000C9 ; 127.969 5B, 0.788
040F62 C5 00 00    0920*       dl 0x0000C5 ; 129.375 5C, 0.773
040F65 C1 00 00    0921*       dl 0x0000C1 ; 130.781 5D, 0.757
040F68 BD 00 00    0922*       dl 0x0000BD ; 132.188 5E, 0.741
040F6B B9 00 00    0923*       dl 0x0000B9 ; 133.594 5F, 0.724
040F6E B5 00 00    0924*       dl 0x0000B5 ; 135.000 60, 0.707
040F71 B0 00 00    0925*       dl 0x0000B0 ; 136.406 61, 0.690
040F74 AB 00 00    0926*       dl 0x0000AB ; 137.813 62, 0.672
040F77 A7 00 00    0927*       dl 0x0000A7 ; 139.219 63, 0.653
040F7A A2 00 00    0928*       dl 0x0000A2 ; 140.625 64, 0.634
040F7D 9D 00 00    0929*       dl 0x00009D ; 142.031 65, 0.615
040F80 98 00 00    0930*       dl 0x000098 ; 143.438 66, 0.596
040F83 93 00 00    0931*       dl 0x000093 ; 144.844 67, 0.576
040F86 8E 00 00    0932*       dl 0x00008E ; 146.250 68, 0.556
040F89 88 00 00    0933*       dl 0x000088 ; 147.656 69, 0.535
040F8C 83 00 00    0934*       dl 0x000083 ; 149.063 6A, 0.514
040F8F 7E 00 00    0935*       dl 0x00007E ; 150.469 6B, 0.493
040F92 78 00 00    0936*       dl 0x000078 ; 151.875 6C, 0.471
040F95 73 00 00    0937*       dl 0x000073 ; 153.281 6D, 0.450
040F98 6D 00 00    0938*       dl 0x00006D ; 154.688 6E, 0.428
040F9B 67 00 00    0939*       dl 0x000067 ; 156.094 6F, 0.405
040F9E 61 00 00    0940*       dl 0x000061 ; 157.500 70, 0.383
040FA1 5C 00 00    0941*       dl 0x00005C ; 158.906 71, 0.360
040FA4 56 00 00    0942*       dl 0x000056 ; 160.313 72, 0.337
040FA7 50 00 00    0943*       dl 0x000050 ; 161.719 73, 0.314
040FAA 4A 00 00    0944*       dl 0x00004A ; 163.125 74, 0.290
040FAD 44 00 00    0945*       dl 0x000044 ; 164.531 75, 0.267
040FB0 3E 00 00    0946*       dl 0x00003E ; 165.938 76, 0.243
040FB3 38 00 00    0947*       dl 0x000038 ; 167.344 77, 0.219
040FB6 31 00 00    0948*       dl 0x000031 ; 168.750 78, 0.195
040FB9 2B 00 00    0949*       dl 0x00002B ; 170.156 79, 0.171
040FBC 25 00 00    0950*       dl 0x000025 ; 171.563 7A, 0.147
040FBF 1F 00 00    0951*       dl 0x00001F ; 172.969 7B, 0.122
040FC2 19 00 00    0952*       dl 0x000019 ; 174.375 7C, 0.098
040FC5 12 00 00    0953*       dl 0x000012 ; 175.781 7D, 0.074
040FC8 0C 00 00    0954*       dl 0x00000C ; 177.188 7E, 0.049
040FCB 06 00 00    0955*       dl 0x000006 ; 178.594 7F, 0.025
040FCE 00 00 00    0956*       dl 0x000000 ; 180.000 80, 0.000
040FD1 FA FF FF    0957*       dl 0xFFFFFA ; 181.406 81, -0.025
040FD4 F4 FF FF    0958*       dl 0xFFFFF4 ; 182.813 82, -0.049
040FD7 EE FF FF    0959*       dl 0xFFFFEE ; 184.219 83, -0.074
040FDA E7 FF FF    0960*       dl 0xFFFFE7 ; 185.625 84, -0.098
040FDD E1 FF FF    0961*       dl 0xFFFFE1 ; 187.031 85, -0.122
040FE0 DB FF FF    0962*       dl 0xFFFFDB ; 188.438 86, -0.147
040FE3 D5 FF FF    0963*       dl 0xFFFFD5 ; 189.844 87, -0.171
040FE6 CF FF FF    0964*       dl 0xFFFFCF ; 191.250 88, -0.195
040FE9 C8 FF FF    0965*       dl 0xFFFFC8 ; 192.656 89, -0.219
040FEC C2 FF FF    0966*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040FEF BC FF FF    0967*       dl 0xFFFFBC ; 195.469 8B, -0.267
040FF2 B6 FF FF    0968*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040FF5 B0 FF FF    0969*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040FF8 AA FF FF    0970*       dl 0xFFFFAA ; 199.688 8E, -0.337
040FFB A4 FF FF    0971*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040FFE 9F FF FF    0972*       dl 0xFFFF9F ; 202.500 90, -0.383
041001 99 FF FF    0973*       dl 0xFFFF99 ; 203.906 91, -0.405
041004 93 FF FF    0974*       dl 0xFFFF93 ; 205.313 92, -0.428
041007 8D FF FF    0975*       dl 0xFFFF8D ; 206.719 93, -0.450
04100A 88 FF FF    0976*       dl 0xFFFF88 ; 208.125 94, -0.471
04100D 82 FF FF    0977*       dl 0xFFFF82 ; 209.531 95, -0.493
041010 7D FF FF    0978*       dl 0xFFFF7D ; 210.938 96, -0.514
041013 78 FF FF    0979*       dl 0xFFFF78 ; 212.344 97, -0.535
041016 72 FF FF    0980*       dl 0xFFFF72 ; 213.750 98, -0.556
041019 6D FF FF    0981*       dl 0xFFFF6D ; 215.156 99, -0.576
04101C 68 FF FF    0982*       dl 0xFFFF68 ; 216.563 9A, -0.596
04101F 63 FF FF    0983*       dl 0xFFFF63 ; 217.969 9B, -0.615
041022 5E FF FF    0984*       dl 0xFFFF5E ; 219.375 9C, -0.634
041025 59 FF FF    0985*       dl 0xFFFF59 ; 220.781 9D, -0.653
041028 55 FF FF    0986*       dl 0xFFFF55 ; 222.188 9E, -0.672
04102B 50 FF FF    0987*       dl 0xFFFF50 ; 223.594 9F, -0.690
04102E 4B FF FF    0988*       dl 0xFFFF4B ; 225.000 A0, -0.707
041031 47 FF FF    0989*       dl 0xFFFF47 ; 226.406 A1, -0.724
041034 43 FF FF    0990*       dl 0xFFFF43 ; 227.813 A2, -0.741
041037 3F FF FF    0991*       dl 0xFFFF3F ; 229.219 A3, -0.757
04103A 3B FF FF    0992*       dl 0xFFFF3B ; 230.625 A4, -0.773
04103D 37 FF FF    0993*       dl 0xFFFF37 ; 232.031 A5, -0.788
041040 33 FF FF    0994*       dl 0xFFFF33 ; 233.438 A6, -0.803
041043 2F FF FF    0995*       dl 0xFFFF2F ; 234.844 A7, -0.818
041046 2C FF FF    0996*       dl 0xFFFF2C ; 236.250 A8, -0.831
041049 28 FF FF    0997*       dl 0xFFFF28 ; 237.656 A9, -0.845
04104C 25 FF FF    0998*       dl 0xFFFF25 ; 239.063 AA, -0.858
04104F 22 FF FF    0999*       dl 0xFFFF22 ; 240.469 AB, -0.870
041052 1F FF FF    1000*       dl 0xFFFF1F ; 241.875 AC, -0.882
041055 1C FF FF    1001*       dl 0xFFFF1C ; 243.281 AD, -0.893
041058 19 FF FF    1002*       dl 0xFFFF19 ; 244.688 AE, -0.904
04105B 16 FF FF    1003*       dl 0xFFFF16 ; 246.094 AF, -0.914
04105E 14 FF FF    1004*       dl 0xFFFF14 ; 247.500 B0, -0.924
041061 12 FF FF    1005*       dl 0xFFFF12 ; 248.906 B1, -0.933
041064 0F FF FF    1006*       dl 0xFFFF0F ; 250.313 B2, -0.942
041067 0D FF FF    1007*       dl 0xFFFF0D ; 251.719 B3, -0.950
04106A 0C FF FF    1008*       dl 0xFFFF0C ; 253.125 B4, -0.957
04106D 0A FF FF    1009*       dl 0xFFFF0A ; 254.531 B5, -0.964
041070 08 FF FF    1010*       dl 0xFFFF08 ; 255.938 B6, -0.970
041073 07 FF FF    1011*       dl 0xFFFF07 ; 257.344 B7, -0.976
041076 05 FF FF    1012*       dl 0xFFFF05 ; 258.750 B8, -0.981
041079 04 FF FF    1013*       dl 0xFFFF04 ; 260.156 B9, -0.985
04107C 03 FF FF    1014*       dl 0xFFFF03 ; 261.563 BA, -0.989
04107F 02 FF FF    1015*       dl 0xFFFF02 ; 262.969 BB, -0.992
041082 02 FF FF    1016*       dl 0xFFFF02 ; 264.375 BC, -0.995
041085 01 FF FF    1017*       dl 0xFFFF01 ; 265.781 BD, -0.997
041088 01 FF FF    1018*       dl 0xFFFF01 ; 267.188 BE, -0.999
04108B 01 FF FF    1019*       dl 0xFFFF01 ; 268.594 BF, -1.000
04108E 00 FF FF    1020*       dl 0xFFFF00 ; 270.000 C0, -1.000
041091 01 FF FF    1021*       dl 0xFFFF01 ; 271.406 C1, -1.000
041094 01 FF FF    1022*       dl 0xFFFF01 ; 272.813 C2, -0.999
041097 01 FF FF    1023*       dl 0xFFFF01 ; 274.219 C3, -0.997
04109A 02 FF FF    1024*       dl 0xFFFF02 ; 275.625 C4, -0.995
04109D 02 FF FF    1025*       dl 0xFFFF02 ; 277.031 C5, -0.992
0410A0 03 FF FF    1026*       dl 0xFFFF03 ; 278.438 C6, -0.989
0410A3 04 FF FF    1027*       dl 0xFFFF04 ; 279.844 C7, -0.985
0410A6 05 FF FF    1028*       dl 0xFFFF05 ; 281.250 C8, -0.981
0410A9 07 FF FF    1029*       dl 0xFFFF07 ; 282.656 C9, -0.976
0410AC 08 FF FF    1030*       dl 0xFFFF08 ; 284.063 CA, -0.970
0410AF 0A FF FF    1031*       dl 0xFFFF0A ; 285.469 CB, -0.964
0410B2 0C FF FF    1032*       dl 0xFFFF0C ; 286.875 CC, -0.957
0410B5 0D FF FF    1033*       dl 0xFFFF0D ; 288.281 CD, -0.950
0410B8 0F FF FF    1034*       dl 0xFFFF0F ; 289.688 CE, -0.942
0410BB 12 FF FF    1035*       dl 0xFFFF12 ; 291.094 CF, -0.933
0410BE 14 FF FF    1036*       dl 0xFFFF14 ; 292.500 D0, -0.924
0410C1 16 FF FF    1037*       dl 0xFFFF16 ; 293.906 D1, -0.914
0410C4 19 FF FF    1038*       dl 0xFFFF19 ; 295.313 D2, -0.904
0410C7 1C FF FF    1039*       dl 0xFFFF1C ; 296.719 D3, -0.893
0410CA 1F FF FF    1040*       dl 0xFFFF1F ; 298.125 D4, -0.882
0410CD 22 FF FF    1041*       dl 0xFFFF22 ; 299.531 D5, -0.870
0410D0 25 FF FF    1042*       dl 0xFFFF25 ; 300.938 D6, -0.858
0410D3 28 FF FF    1043*       dl 0xFFFF28 ; 302.344 D7, -0.845
0410D6 2C FF FF    1044*       dl 0xFFFF2C ; 303.750 D8, -0.831
0410D9 2F FF FF    1045*       dl 0xFFFF2F ; 305.156 D9, -0.818
0410DC 33 FF FF    1046*       dl 0xFFFF33 ; 306.563 DA, -0.803
0410DF 37 FF FF    1047*       dl 0xFFFF37 ; 307.969 DB, -0.788
0410E2 3B FF FF    1048*       dl 0xFFFF3B ; 309.375 DC, -0.773
0410E5 3F FF FF    1049*       dl 0xFFFF3F ; 310.781 DD, -0.757
0410E8 43 FF FF    1050*       dl 0xFFFF43 ; 312.188 DE, -0.741
0410EB 47 FF FF    1051*       dl 0xFFFF47 ; 313.594 DF, -0.724
0410EE 4B FF FF    1052*       dl 0xFFFF4B ; 315.000 E0, -0.707
0410F1 50 FF FF    1053*       dl 0xFFFF50 ; 316.406 E1, -0.690
0410F4 55 FF FF    1054*       dl 0xFFFF55 ; 317.813 E2, -0.672
0410F7 59 FF FF    1055*       dl 0xFFFF59 ; 319.219 E3, -0.653
0410FA 5E FF FF    1056*       dl 0xFFFF5E ; 320.625 E4, -0.634
0410FD 63 FF FF    1057*       dl 0xFFFF63 ; 322.031 E5, -0.615
041100 68 FF FF    1058*       dl 0xFFFF68 ; 323.438 E6, -0.596
041103 6D FF FF    1059*       dl 0xFFFF6D ; 324.844 E7, -0.576
041106 72 FF FF    1060*       dl 0xFFFF72 ; 326.250 E8, -0.556
041109 78 FF FF    1061*       dl 0xFFFF78 ; 327.656 E9, -0.535
04110C 7D FF FF    1062*       dl 0xFFFF7D ; 329.063 EA, -0.514
04110F 82 FF FF    1063*       dl 0xFFFF82 ; 330.469 EB, -0.493
041112 88 FF FF    1064*       dl 0xFFFF88 ; 331.875 EC, -0.471
041115 8D FF FF    1065*       dl 0xFFFF8D ; 333.281 ED, -0.450
041118 93 FF FF    1066*       dl 0xFFFF93 ; 334.688 EE, -0.428
04111B 99 FF FF    1067*       dl 0xFFFF99 ; 336.094 EF, -0.405
04111E 9F FF FF    1068*       dl 0xFFFF9F ; 337.500 F0, -0.383
041121 A4 FF FF    1069*       dl 0xFFFFA4 ; 338.906 F1, -0.360
041124 AA FF FF    1070*       dl 0xFFFFAA ; 340.313 F2, -0.337
041127 B0 FF FF    1071*       dl 0xFFFFB0 ; 341.719 F3, -0.314
04112A B6 FF FF    1072*       dl 0xFFFFB6 ; 343.125 F4, -0.290
04112D BC FF FF    1073*       dl 0xFFFFBC ; 344.531 F5, -0.267
041130 C2 FF FF    1074*       dl 0xFFFFC2 ; 345.938 F6, -0.243
041133 C8 FF FF    1075*       dl 0xFFFFC8 ; 347.344 F7, -0.219
041136 CF FF FF    1076*       dl 0xFFFFCF ; 348.750 F8, -0.195
041139 D5 FF FF    1077*       dl 0xFFFFD5 ; 350.156 F9, -0.171
04113C DB FF FF    1078*       dl 0xFFFFDB ; 351.563 FA, -0.147
04113F E1 FF FF    1079*       dl 0xFFFFE1 ; 352.969 FB, -0.122
041142 E7 FF FF    1080*       dl 0xFFFFE7 ; 354.375 FC, -0.098
041145 EE FF FF    1081*       dl 0xFFFFEE ; 355.781 FD, -0.074
041148 F4 FF FF    1082*       dl 0xFFFFF4 ; 357.188 FE, -0.049
04114B FA FF FF    1083*       dl 0xFFFFFA ; 358.594 FF, -0.025
04114E 00 00 00    1084*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
041151             1085*   
041151             1086*   atan_lut_168:
041151 00 00 00    1087*       dl 0x000000 ; 000000, 0.000
041154 28 00 00    1088*       dl 0x000028 ; 000001, 0.224
041157 51 00 00    1089*       dl 0x000051 ; 000002, 0.448
04115A 7A 00 00    1090*       dl 0x00007A ; 000003, 0.671
04115D A2 00 00    1091*       dl 0x0000A2 ; 000004, 0.895
041160 CB 00 00    1092*       dl 0x0000CB ; 000005, 1.119
041163 F4 00 00    1093*       dl 0x0000F4 ; 000006, 1.343
041166 1D 01 00    1094*       dl 0x00011D ; 000007, 1.566
041169 45 01 00    1095*       dl 0x000145 ; 000008, 1.790
04116C 6E 01 00    1096*       dl 0x00016E ; 000009, 2.013
04116F 97 01 00    1097*       dl 0x000197 ; 00000A, 2.237
041172 BF 01 00    1098*       dl 0x0001BF ; 00000B, 2.460
041175 E8 01 00    1099*       dl 0x0001E8 ; 00000C, 2.684
041178 11 02 00    1100*       dl 0x000211 ; 00000D, 2.907
04117B 39 02 00    1101*       dl 0x000239 ; 00000E, 3.130
04117E 62 02 00    1102*       dl 0x000262 ; 00000F, 3.353
041181 8B 02 00    1103*       dl 0x00028B ; 000010, 3.576
041184 B3 02 00    1104*       dl 0x0002B3 ; 000011, 3.799
041187 DC 02 00    1105*       dl 0x0002DC ; 000012, 4.022
04118A 04 03 00    1106*       dl 0x000304 ; 000013, 4.245
04118D 2D 03 00    1107*       dl 0x00032D ; 000014, 4.467
041190 55 03 00    1108*       dl 0x000355 ; 000015, 4.690
041193 7E 03 00    1109*       dl 0x00037E ; 000016, 4.912
041196 A6 03 00    1110*       dl 0x0003A6 ; 000017, 5.134
041199 CE 03 00    1111*       dl 0x0003CE ; 000018, 5.356
04119C F7 03 00    1112*       dl 0x0003F7 ; 000019, 5.578
04119F 1F 04 00    1113*       dl 0x00041F ; 00001A, 5.799
0411A2 48 04 00    1114*       dl 0x000448 ; 00001B, 6.021
0411A5 70 04 00    1115*       dl 0x000470 ; 00001C, 6.242
0411A8 98 04 00    1116*       dl 0x000498 ; 00001D, 6.463
0411AB C0 04 00    1117*       dl 0x0004C0 ; 00001E, 6.684
0411AE E8 04 00    1118*       dl 0x0004E8 ; 00001F, 6.905
0411B1 11 05 00    1119*       dl 0x000511 ; 000020, 7.125
0411B4 39 05 00    1120*       dl 0x000539 ; 000021, 7.345
0411B7 61 05 00    1121*       dl 0x000561 ; 000022, 7.565
0411BA 89 05 00    1122*       dl 0x000589 ; 000023, 7.785
0411BD B1 05 00    1123*       dl 0x0005B1 ; 000024, 8.005
0411C0 D9 05 00    1124*       dl 0x0005D9 ; 000025, 8.224
0411C3 01 06 00    1125*       dl 0x000601 ; 000026, 8.443
0411C6 28 06 00    1126*       dl 0x000628 ; 000027, 8.662
0411C9 50 06 00    1127*       dl 0x000650 ; 000028, 8.881
0411CC 78 06 00    1128*       dl 0x000678 ; 000029, 9.099
0411CF A0 06 00    1129*       dl 0x0006A0 ; 00002A, 9.317
0411D2 C7 06 00    1130*       dl 0x0006C7 ; 00002B, 9.535
0411D5 EF 06 00    1131*       dl 0x0006EF ; 00002C, 9.752
0411D8 16 07 00    1132*       dl 0x000716 ; 00002D, 9.970
0411DB 3E 07 00    1133*       dl 0x00073E ; 00002E, 10.187
0411DE 65 07 00    1134*       dl 0x000765 ; 00002F, 10.403
0411E1 8D 07 00    1135*       dl 0x00078D ; 000030, 10.620
0411E4 B4 07 00    1136*       dl 0x0007B4 ; 000031, 10.836
0411E7 DB 07 00    1137*       dl 0x0007DB ; 000032, 11.051
0411EA 03 08 00    1138*       dl 0x000803 ; 000033, 11.267
0411ED 2A 08 00    1139*       dl 0x00082A ; 000034, 11.482
0411F0 51 08 00    1140*       dl 0x000851 ; 000035, 11.697
0411F3 78 08 00    1141*       dl 0x000878 ; 000036, 11.911
0411F6 9F 08 00    1142*       dl 0x00089F ; 000037, 12.125
0411F9 C6 08 00    1143*       dl 0x0008C6 ; 000038, 12.339
0411FC ED 08 00    1144*       dl 0x0008ED ; 000039, 12.553
0411FF 13 09 00    1145*       dl 0x000913 ; 00003A, 12.766
041202 3A 09 00    1146*       dl 0x00093A ; 00003B, 12.978
041205 61 09 00    1147*       dl 0x000961 ; 00003C, 13.191
041208 87 09 00    1148*       dl 0x000987 ; 00003D, 13.403
04120B AE 09 00    1149*       dl 0x0009AE ; 00003E, 13.614
04120E D4 09 00    1150*       dl 0x0009D4 ; 00003F, 13.825
041211 FB 09 00    1151*       dl 0x0009FB ; 000040, 14.036
041214 21 0A 00    1152*       dl 0x000A21 ; 000041, 14.247
041217 47 0A 00    1153*       dl 0x000A47 ; 000042, 14.457
04121A 6D 0A 00    1154*       dl 0x000A6D ; 000043, 14.666
04121D 94 0A 00    1155*       dl 0x000A94 ; 000044, 14.876
041220 BA 0A 00    1156*       dl 0x000ABA ; 000045, 15.085
041223 E0 0A 00    1157*       dl 0x000AE0 ; 000046, 15.293
041226 05 0B 00    1158*       dl 0x000B05 ; 000047, 15.501
041229 2B 0B 00    1159*       dl 0x000B2B ; 000048, 15.709
04122C 51 0B 00    1160*       dl 0x000B51 ; 000049, 15.916
04122F 77 0B 00    1161*       dl 0x000B77 ; 00004A, 16.123
041232 9C 0B 00    1162*       dl 0x000B9C ; 00004B, 16.329
041235 C2 0B 00    1163*       dl 0x000BC2 ; 00004C, 16.535
041238 E7 0B 00    1164*       dl 0x000BE7 ; 00004D, 16.740
04123B 0C 0C 00    1165*       dl 0x000C0C ; 00004E, 16.945
04123E 32 0C 00    1166*       dl 0x000C32 ; 00004F, 17.150
041241 57 0C 00    1167*       dl 0x000C57 ; 000050, 17.354
041244 7C 0C 00    1168*       dl 0x000C7C ; 000051, 17.558
041247 A1 0C 00    1169*       dl 0x000CA1 ; 000052, 17.761
04124A C6 0C 00    1170*       dl 0x000CC6 ; 000053, 17.964
04124D EB 0C 00    1171*       dl 0x000CEB ; 000054, 18.166
041250 0F 0D 00    1172*       dl 0x000D0F ; 000055, 18.368
041253 34 0D 00    1173*       dl 0x000D34 ; 000056, 18.569
041256 58 0D 00    1174*       dl 0x000D58 ; 000057, 18.770
041259 7D 0D 00    1175*       dl 0x000D7D ; 000058, 18.970
04125C A1 0D 00    1176*       dl 0x000DA1 ; 000059, 19.170
04125F C6 0D 00    1177*       dl 0x000DC6 ; 00005A, 19.370
041262 EA 0D 00    1178*       dl 0x000DEA ; 00005B, 19.569
041265 0E 0E 00    1179*       dl 0x000E0E ; 00005C, 19.767
041268 32 0E 00    1180*       dl 0x000E32 ; 00005D, 19.965
04126B 56 0E 00    1181*       dl 0x000E56 ; 00005E, 20.163
04126E 7A 0E 00    1182*       dl 0x000E7A ; 00005F, 20.360
041271 9E 0E 00    1183*       dl 0x000E9E ; 000060, 20.556
041274 C1 0E 00    1184*       dl 0x000EC1 ; 000061, 20.752
041277 E5 0E 00    1185*       dl 0x000EE5 ; 000062, 20.947
04127A 08 0F 00    1186*       dl 0x000F08 ; 000063, 21.142
04127D 2C 0F 00    1187*       dl 0x000F2C ; 000064, 21.337
041280 4F 0F 00    1188*       dl 0x000F4F ; 000065, 21.531
041283 72 0F 00    1189*       dl 0x000F72 ; 000066, 21.724
041286 95 0F 00    1190*       dl 0x000F95 ; 000067, 21.917
041289 B8 0F 00    1191*       dl 0x000FB8 ; 000068, 22.109
04128C DB 0F 00    1192*       dl 0x000FDB ; 000069, 22.301
04128F FE 0F 00    1193*       dl 0x000FFE ; 00006A, 22.493
041292 21 10 00    1194*       dl 0x001021 ; 00006B, 22.683
041295 44 10 00    1195*       dl 0x001044 ; 00006C, 22.874
041298 66 10 00    1196*       dl 0x001066 ; 00006D, 23.063
04129B 89 10 00    1197*       dl 0x001089 ; 00006E, 23.253
04129E AB 10 00    1198*       dl 0x0010AB ; 00006F, 23.441
0412A1 CD 10 00    1199*       dl 0x0010CD ; 000070, 23.629
0412A4 EF 10 00    1200*       dl 0x0010EF ; 000071, 23.817
0412A7 11 11 00    1201*       dl 0x001111 ; 000072, 24.004
0412AA 33 11 00    1202*       dl 0x001133 ; 000073, 24.191
0412AD 55 11 00    1203*       dl 0x001155 ; 000074, 24.376
0412B0 77 11 00    1204*       dl 0x001177 ; 000075, 24.562
0412B3 99 11 00    1205*       dl 0x001199 ; 000076, 24.747
0412B6 BA 11 00    1206*       dl 0x0011BA ; 000077, 24.931
0412B9 DC 11 00    1207*       dl 0x0011DC ; 000078, 25.115
0412BC FD 11 00    1208*       dl 0x0011FD ; 000079, 25.298
0412BF 1E 12 00    1209*       dl 0x00121E ; 00007A, 25.481
0412C2 3F 12 00    1210*       dl 0x00123F ; 00007B, 25.663
0412C5 60 12 00    1211*       dl 0x001260 ; 00007C, 25.844
0412C8 81 12 00    1212*       dl 0x001281 ; 00007D, 26.025
0412CB A2 12 00    1213*       dl 0x0012A2 ; 00007E, 26.206
0412CE C3 12 00    1214*       dl 0x0012C3 ; 00007F, 26.386
0412D1 E4 12 00    1215*       dl 0x0012E4 ; 000080, 26.565
0412D4 04 13 00    1216*       dl 0x001304 ; 000081, 26.744
0412D7 25 13 00    1217*       dl 0x001325 ; 000082, 26.922
0412DA 45 13 00    1218*       dl 0x001345 ; 000083, 27.100
0412DD 65 13 00    1219*       dl 0x001365 ; 000084, 27.277
0412E0 85 13 00    1220*       dl 0x001385 ; 000085, 27.453
0412E3 A5 13 00    1221*       dl 0x0013A5 ; 000086, 27.629
0412E6 C5 13 00    1222*       dl 0x0013C5 ; 000087, 27.805
0412E9 E5 13 00    1223*       dl 0x0013E5 ; 000088, 27.979
0412EC 05 14 00    1224*       dl 0x001405 ; 000089, 28.154
0412EF 24 14 00    1225*       dl 0x001424 ; 00008A, 28.327
0412F2 44 14 00    1226*       dl 0x001444 ; 00008B, 28.501
0412F5 63 14 00    1227*       dl 0x001463 ; 00008C, 28.673
0412F8 83 14 00    1228*       dl 0x001483 ; 00008D, 28.845
0412FB A2 14 00    1229*       dl 0x0014A2 ; 00008E, 29.017
0412FE C1 14 00    1230*       dl 0x0014C1 ; 00008F, 29.187
041301 E0 14 00    1231*       dl 0x0014E0 ; 000090, 29.358
041304 FF 14 00    1232*       dl 0x0014FF ; 000091, 29.527
041307 1E 15 00    1233*       dl 0x00151E ; 000092, 29.697
04130A 3C 15 00    1234*       dl 0x00153C ; 000093, 29.865
04130D 5B 15 00    1235*       dl 0x00155B ; 000094, 30.033
041310 79 15 00    1236*       dl 0x001579 ; 000095, 30.201
041313 98 15 00    1237*       dl 0x001598 ; 000096, 30.368
041316 B6 15 00    1238*       dl 0x0015B6 ; 000097, 30.534
041319 D4 15 00    1239*       dl 0x0015D4 ; 000098, 30.700
04131C F2 15 00    1240*       dl 0x0015F2 ; 000099, 30.865
04131F 10 16 00    1241*       dl 0x001610 ; 00009A, 31.030
041322 2E 16 00    1242*       dl 0x00162E ; 00009B, 31.194
041325 4C 16 00    1243*       dl 0x00164C ; 00009C, 31.357
041328 6A 16 00    1244*       dl 0x00166A ; 00009D, 31.520
04132B 87 16 00    1245*       dl 0x001687 ; 00009E, 31.682
04132E A5 16 00    1246*       dl 0x0016A5 ; 00009F, 31.844
041331 C2 16 00    1247*       dl 0x0016C2 ; 0000A0, 32.005
041334 DF 16 00    1248*       dl 0x0016DF ; 0000A1, 32.166
041337 FC 16 00    1249*       dl 0x0016FC ; 0000A2, 32.326
04133A 19 17 00    1250*       dl 0x001719 ; 0000A3, 32.486
04133D 36 17 00    1251*       dl 0x001736 ; 0000A4, 32.645
041340 53 17 00    1252*       dl 0x001753 ; 0000A5, 32.803
041343 70 17 00    1253*       dl 0x001770 ; 0000A6, 32.961
041346 8C 17 00    1254*       dl 0x00178C ; 0000A7, 33.118
041349 A9 17 00    1255*       dl 0x0017A9 ; 0000A8, 33.275
04134C C5 17 00    1256*       dl 0x0017C5 ; 0000A9, 33.431
04134F E2 17 00    1257*       dl 0x0017E2 ; 0000AA, 33.587
041352 FE 17 00    1258*       dl 0x0017FE ; 0000AB, 33.742
041355 1A 18 00    1259*       dl 0x00181A ; 0000AC, 33.896
041358 36 18 00    1260*       dl 0x001836 ; 0000AD, 34.050
04135B 52 18 00    1261*       dl 0x001852 ; 0000AE, 34.203
04135E 6E 18 00    1262*       dl 0x00186E ; 0000AF, 34.356
041361 8A 18 00    1263*       dl 0x00188A ; 0000B0, 34.509
041364 A5 18 00    1264*       dl 0x0018A5 ; 0000B1, 34.660
041367 C1 18 00    1265*       dl 0x0018C1 ; 0000B2, 34.811
04136A DC 18 00    1266*       dl 0x0018DC ; 0000B3, 34.962
04136D F7 18 00    1267*       dl 0x0018F7 ; 0000B4, 35.112
041370 13 19 00    1268*       dl 0x001913 ; 0000B5, 35.262
041373 2E 19 00    1269*       dl 0x00192E ; 0000B6, 35.410
041376 49 19 00    1270*       dl 0x001949 ; 0000B7, 35.559
041379 64 19 00    1271*       dl 0x001964 ; 0000B8, 35.707
04137C 7F 19 00    1272*       dl 0x00197F ; 0000B9, 35.854
04137F 99 19 00    1273*       dl 0x001999 ; 0000BA, 36.001
041382 B4 19 00    1274*       dl 0x0019B4 ; 0000BB, 36.147
041385 CE 19 00    1275*       dl 0x0019CE ; 0000BC, 36.293
041388 E9 19 00    1276*       dl 0x0019E9 ; 0000BD, 36.438
04138B 03 1A 00    1277*       dl 0x001A03 ; 0000BE, 36.582
04138E 1D 1A 00    1278*       dl 0x001A1D ; 0000BF, 36.726
041391 37 1A 00    1279*       dl 0x001A37 ; 0000C0, 36.870
041394 51 1A 00    1280*       dl 0x001A51 ; 0000C1, 37.013
041397 6B 1A 00    1281*       dl 0x001A6B ; 0000C2, 37.155
04139A 85 1A 00    1282*       dl 0x001A85 ; 0000C3, 37.297
04139D 9F 1A 00    1283*       dl 0x001A9F ; 0000C4, 37.439
0413A0 B9 1A 00    1284*       dl 0x001AB9 ; 0000C5, 37.579
0413A3 D2 1A 00    1285*       dl 0x001AD2 ; 0000C6, 37.720
0413A6 EC 1A 00    1286*       dl 0x001AEC ; 0000C7, 37.859
0413A9 05 1B 00    1287*       dl 0x001B05 ; 0000C8, 37.999
0413AC 1E 1B 00    1288*       dl 0x001B1E ; 0000C9, 38.137
0413AF 37 1B 00    1289*       dl 0x001B37 ; 0000CA, 38.276
0413B2 50 1B 00    1290*       dl 0x001B50 ; 0000CB, 38.413
0413B5 69 1B 00    1291*       dl 0x001B69 ; 0000CC, 38.550
0413B8 82 1B 00    1292*       dl 0x001B82 ; 0000CD, 38.687
0413BB 9B 1B 00    1293*       dl 0x001B9B ; 0000CE, 38.823
0413BE B4 1B 00    1294*       dl 0x001BB4 ; 0000CF, 38.959
0413C1 CC 1B 00    1295*       dl 0x001BCC ; 0000D0, 39.094
0413C4 E5 1B 00    1296*       dl 0x001BE5 ; 0000D1, 39.228
0413C7 FD 1B 00    1297*       dl 0x001BFD ; 0000D2, 39.362
0413CA 16 1C 00    1298*       dl 0x001C16 ; 0000D3, 39.496
0413CD 2E 1C 00    1299*       dl 0x001C2E ; 0000D4, 39.629
0413D0 46 1C 00    1300*       dl 0x001C46 ; 0000D5, 39.762
0413D3 5E 1C 00    1301*       dl 0x001C5E ; 0000D6, 39.894
0413D6 76 1C 00    1302*       dl 0x001C76 ; 0000D7, 40.025
0413D9 8E 1C 00    1303*       dl 0x001C8E ; 0000D8, 40.156
0413DC A5 1C 00    1304*       dl 0x001CA5 ; 0000D9, 40.286
0413DF BD 1C 00    1305*       dl 0x001CBD ; 0000DA, 40.416
0413E2 D5 1C 00    1306*       dl 0x001CD5 ; 0000DB, 40.546
0413E5 EC 1C 00    1307*       dl 0x001CEC ; 0000DC, 40.675
0413E8 04 1D 00    1308*       dl 0x001D04 ; 0000DD, 40.803
0413EB 1B 1D 00    1309*       dl 0x001D1B ; 0000DE, 40.931
0413EE 32 1D 00    1310*       dl 0x001D32 ; 0000DF, 41.059
0413F1 49 1D 00    1311*       dl 0x001D49 ; 0000E0, 41.186
0413F4 60 1D 00    1312*       dl 0x001D60 ; 0000E1, 41.312
0413F7 77 1D 00    1313*       dl 0x001D77 ; 0000E2, 41.438
0413FA 8E 1D 00    1314*       dl 0x001D8E ; 0000E3, 41.564
0413FD A5 1D 00    1315*       dl 0x001DA5 ; 0000E4, 41.689
041400 BB 1D 00    1316*       dl 0x001DBB ; 0000E5, 41.814
041403 D2 1D 00    1317*       dl 0x001DD2 ; 0000E6, 41.938
041406 E9 1D 00    1318*       dl 0x001DE9 ; 0000E7, 42.061
041409 FF 1D 00    1319*       dl 0x001DFF ; 0000E8, 42.184
04140C 15 1E 00    1320*       dl 0x001E15 ; 0000E9, 42.307
04140F 2C 1E 00    1321*       dl 0x001E2C ; 0000EA, 42.429
041412 42 1E 00    1322*       dl 0x001E42 ; 0000EB, 42.551
041415 58 1E 00    1323*       dl 0x001E58 ; 0000EC, 42.672
041418 6E 1E 00    1324*       dl 0x001E6E ; 0000ED, 42.793
04141B 84 1E 00    1325*       dl 0x001E84 ; 0000EE, 42.913
04141E 99 1E 00    1326*       dl 0x001E99 ; 0000EF, 43.033
041421 AF 1E 00    1327*       dl 0x001EAF ; 0000F0, 43.152
041424 C5 1E 00    1328*       dl 0x001EC5 ; 0000F1, 43.271
041427 DA 1E 00    1329*       dl 0x001EDA ; 0000F2, 43.390
04142A F0 1E 00    1330*       dl 0x001EF0 ; 0000F3, 43.508
04142D 05 1F 00    1331*       dl 0x001F05 ; 0000F4, 43.625
041430 1B 1F 00    1332*       dl 0x001F1B ; 0000F5, 43.742
041433 30 1F 00    1333*       dl 0x001F30 ; 0000F6, 43.859
041436 45 1F 00    1334*       dl 0x001F45 ; 0000F7, 43.975
041439 5A 1F 00    1335*       dl 0x001F5A ; 0000F8, 44.091
04143C 6F 1F 00    1336*       dl 0x001F6F ; 0000F9, 44.206
04143F 84 1F 00    1337*       dl 0x001F84 ; 0000FA, 44.321
041442 99 1F 00    1338*       dl 0x001F99 ; 0000FB, 44.435
041445 AD 1F 00    1339*       dl 0x001FAD ; 0000FC, 44.549
041448 C2 1F 00    1340*       dl 0x001FC2 ; 0000FD, 44.662
04144B D7 1F 00    1341*       dl 0x001FD7 ; 0000FE, 44.775
04144E EB 1F 00    1342*       dl 0x001FEB ; 0000FF, 44.888
041451 00 20 00    1343*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
041454             0035        include "fonts.inc"
041454 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
041500             0002*   
041500             0003*   fonts_load:
041500 DD 21 00 2A 0004*       ld ix,font_list ; pointer to font list lookup
       04          
041505 06 12       0005*       ld b,num_fonts ; loop counter
041507             0006*   
041507             0007*   @load_loop:
041507 C5          0008*       push bc ; save loop counter
041508             0009*   
041508             0010*   ; load font into a buffer
041508 DD 27 06    0011*       ld hl,(ix+font_list_bufferId)
04150B DD 31 09    0012*       ld iy,(ix+font_list_filename)
04150E CD 78 1C 04 0013*       call vdu_load_buffer_from_file
041512             0014*   
041512             0015*   ; create font from buffer
041512 DD 27 06    0016*       ld hl,(ix+font_list_bufferId)
041515 DD 5E 00    0017*       ld e,(ix+font_list_width)
041518 DD 56 03    0018*       ld d,(ix+font_list_height)
04151B 3E 00       0019*       ld a,0 ; flags
04151D CD 1A 1E 04 0020*       call vdu_font_create
041521             0021*   
041521             0022*   ; select font
041521 DD 27 06    0023*       ld hl,(ix+font_list_bufferId)
041524 3E 01       0024*       ld a,1 ; flags
041526 CD 00 1E 04 0025*       call vdu_font_select
04152A             0026*   
04152A             0027*   ; ; debug print filename
04152A             0028*   ;     call printNewLine
04152A             0029*   ;     ld hl,(ix+font_list_filename)
04152A             0030*   ;     call printString
04152A             0031*   
04152A             0032*   ; advance font_list pointer to next record
04152A ED 32 0C    0033*       lea ix,ix+font_list_record_size
04152D             0034*   
04152D             0035*   ; restore loop counter
04152D C1          0036*       pop bc
04152E 10 D7       0037*       djnz @load_loop
041530             0038*   
041530             0039*   ; all done
041530 C9          0040*       ret
041531             0036        include "images.inc"
041531 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041600             0002*   
041600             0003*   image_type: equ 0
041600             0004*   image_width: equ image_type+3
041600             0005*   image_height: equ image_width+3
041600             0006*   image_filesize: equ image_height+3
041600             0007*   image_filename: equ image_filesize+3
041600             0008*   image_bufferId: equ image_filename+3
041600             0009*   image_record_size: equ image_bufferId+3
041600             0010*   
041600 00 00 00    0011*   cur_image_list: dl 0
041603 00 00 00    0012*   cur_filename: dl 0
041606 00 00 00    0013*   cur_buffer_id: dl 0
041609             0014*   
041609             0015*   img_load_init:
041609             0016*   ; initialize logo's position parameters
041609 21 00 00 00 0017*       ld hl,0
04160D 22 C2 16 04 0018*       ld (logo_xvel),hl
041611 22 C5 16 04 0019*       ld (logo_xpos),hl
041615             0020*   ; begin 16.8 maths to determine logo's y position and velocity
041615 21 00 E0 00 0021*       ld hl,224*256
041619 22 CB 16 04 0022*       ld (logo_ypos),hl
04161D EB          0023*       ex de,hl
04161E 21 00 28 FF 0024*       ld hl,-240+24*256
041622             0025*       ; ld de,-256*[sprites_num_images+tiles_dg_num_images+ui_num_images]
041622 11 00 0C 01 0026*       ld de,sprites_num_images+tiles_dg_num_images+ui_num_images*256
041626 CD 2E 0B 04 0027*       call sdiv168 ; ud.e = distance / num images = y velocity
04162A ED 53 C8 16 0028*       ld (logo_yvel),de
       04          
04162F             0029*   ; all done
04162F C9          0030*       ret
041630             0031*   
041630             0032*   ; inputs: bc is the number of images to load, cur_image_list set
041630             0033*   img_load_main:
041630             0034*   ; back up loop counter
041630 C5          0035*       push bc
041631             0036*   
041631             0037*   ; load the next image
041631 CD 6C 16 04 0038*       call load_next_image
041635             0039*   
041635             0040*   ; plot the background
041635 CD 4B 1A 04 0041*       call vdu_cls
041639 21 02 00 00 0042*       ld hl,BUF_SPLASH_BG
04163D CD 38 1B 04 0043*       call vdu_buff_select
041641 01 00 00 00 0044*       ld bc,0
041645 11 00 00 00 0045*       ld de,0
041649 CD 20 1F 04 0046*       call vdu_plot_bmp
04164D             0047*   
04164D             0048*   ; ; draw the most recently loaded image
04164D             0049*   ; 	ld hl,(cur_buffer_id)
04164D             0050*   ; 	call vdu_buff_select
04164D             0051*   ; 	ld bc,0
04164D             0052*   ; 	ld de,0
04164D             0053*   ; 	call vdu_plot_bmp
04164D             0054*   
04164D             0055*   ; move logo
04164D CD 9D 16 04 0056*       call move_logo
041651             0057*   
041651             0058*   ; print current filename
041651 2A 03 16 04 0059*       ld hl,(cur_filename)
041655 CD 17 01 04 0060*       call printString
041659             0061*   
041659             0062*   ; flip the framebuffer
041659 CD 50 1A 04 0063*       call vdu_flip
04165D             0064*   
04165D             0065*   ; decrement loop counter
04165D C1          0066*       pop bc
04165E 0B          0067*       dec bc
04165F 79          0068*       ld a,c
041660 B7          0069*       or a
041661 C2 30 16 04 0070*       jp nz,img_load_main
041665 78          0071*       ld a,b
041666 B7          0072*       or a
041667 C2 30 16 04 0073*       jp nz,img_load_main
04166B C9          0074*       ret
04166C             0075*   
04166C             0076*   load_next_image:
04166C FD 2A 00 16 0077*       ld iy,(cur_image_list)
       04          
041671 FD E5       0078*       push iy
041673 FD 7E 00    0079*       ld a,(iy+image_type) ; get image type
041676 FD 07 03    0080*       ld bc,(iy+image_width) ; get image width
041679 FD 17 06    0081*       ld de,(iy+image_height) ; get image height
04167C FD 31 09    0082*       ld ix,(iy+image_filesize) ; get image file size
04167F FD 27 0F    0083*       ld hl,(iy+image_bufferId) ; get image bufferId
041682 22 06 16 04 0084*       ld (cur_buffer_id),hl
041686 FD 37 0C    0085*       ld iy,(iy+image_filename) ; get image filename
041689 FD 22 03 16 0086*       ld (cur_filename),iy
       04          
04168E CD 56 1C 04 0087*       call vdu_load_img
041692 FD E1       0088*       pop iy
041694 ED 33 12    0089*       lea iy,iy+image_record_size
041697 FD 22 00 16 0090*       ld (cur_image_list),iy
       04          
04169C C9          0091*       ret
04169D             0092*   
04169D             0093*   move_logo:
04169D             0094*   ; activate logo bitmap
04169D 21 03 00 00 0095*       ld hl, BUF_SPLASH_LOGO
0416A1 CD 38 1B 04 0096*       call vdu_buff_select
0416A5             0097*   ; update position based on velocity parameters
0416A5 2A CB 16 04 0098*       ld hl,(logo_ypos)
0416A9 ED 5B C8 16 0099*       ld de,(logo_yvel)
       04          
0416AE 19          0100*       add hl,de
0416AF 22 CB 16 04 0101*       ld (logo_ypos),hl
0416B3             0102*   ; draw logo
0416B3 ED 4B C5 16 0103*       ld bc,(logo_xpos)
       04          
0416B8 ED 5B CB 16 0104*       ld de,(logo_ypos)
       04          
0416BD CD 3C 1F 04 0105*       call vdu_plot_bmp168
0416C1 C9          0106*       ret
0416C2             0107*   
0416C2 00 00 00    0108*   logo_xvel: dl 0
0416C5 00 00 00    0109*   logo_xpos: dl 0
0416C8             0110*   
0416C8 00 00 00    0111*   logo_yvel: dl 0
0416CB 00 00 00    0112*   logo_ypos: dl 0
0416CE             0113*   
0416CE             0114*   load_ui_images:
0416CE             0115*   ; initialize image loading variables
0416CE 21 65 56 04 0116*       ld hl,ui_image_list
0416D2 22 00 16 04 0117*       ld (cur_image_list),hl
0416D6             0118*   ; load images
0416D6 06 04       0119*       ld b,ui_num_images
0416D8             0120*   @loop:
0416D8 C5          0121*       push bc
0416D9 CD 6C 16 04 0122*       call load_next_image
0416DD C1          0123*       pop bc
0416DE 10 F8       0124*       djnz @loop
0416E0 C9          0125*       ret
0416E1             0126*   
0416E1             0127*   load_sprite_images:
0416E1             0128*   ; initialize image loading variables
0416E1 21 08 49 04 0129*       ld hl,sprites_image_list
0416E5 22 00 16 04 0130*       ld (cur_image_list),hl
0416E9 01 50 00 00 0131*       ld bc,sprites_num_images
0416ED             0132*   ; load images
0416ED CD 30 16 04 0133*       call img_load_main
0416F1 C9          0134*       ret
0416F2             0135*   
0416F2             0136*   load_tilesets:
0416F2             0137*   ; initialize image loading variables
0416F2 21 00 2D 04 0138*       ld hl,tiles_dg_image_list
0416F6 22 00 16 04 0139*       ld (cur_image_list),hl
0416FA 01 B8 00 00 0140*       ld bc,tiles_dg_num_images
0416FE             0141*   ; load images
0416FE CD 30 16 04 0142*       call img_load_main
041702             0143*   
041702             0144*   ; ; initialize image loading variables
041702             0145*   ;     ld hl,tiles_xevious_image_list
041702             0146*   ;     ld (cur_image_list),hl
041702             0147*   ;     ld bc,tiles_xevious_num_images
041702             0148*   ; ; load images
041702             0149*   ;     call img_load_main
041702 C9          0150*       ret
041703             0037        include "timer.inc"
041703 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
041800             0002*   
041800             0003*   ; Table 32. Timer Control Registers
041800             0004*   ; this constant is the base address of the timer control registers
041800             0005*   ; each timer takes three bytes:
041800             0006*   ;   0: control register
041800             0007*   ;   1: low byte of timer reset value
041800             0008*   ;   2: high byte of timer reset value
041800             0009*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
041800             0010*   ; which correctly force the high and upper bytes of the address bus to zero
041800             0011*   TMR_CTL:     equ 80h
041800             0012*   
041800             0013*   ; Timer Control Register Bit Definitions
041800             0014*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
041800             0015*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
041800             0016*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
041800             0017*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
041800             0018*                               ; the TMRx_CTL register is read.
041800             0019*   
041800             0020*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
041800             0021*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
041800             0022*   
041800             0023*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
041800             0024*                               ;  0,and counting stops when the end-of-count value is reached.
041800             0025*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
041800             0026*                               ; written to the counter when the end-of-count value is reached.
041800             0027*   
041800             0028*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
041800             0029*   CLK_DIV_256:  equ %00001100 ;
041800             0030*   CLK_DIV_64:   equ %00001000 ;
041800             0031*   CLK_DIV_16:   equ %00000100 ;
041800             0032*   CLK_DIV_4:    equ %00000000 ;
041800             0033*   
041800             0034*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
041800             0035*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
041800             0036*                               ; When a 1 is written to this bit,the values in the reload registers
041800             0037*                               ;  are loaded into the downcounter when the timer restarts. The
041800             0038*                               ; programmer must ensure that this bit is set to 1 each time
041800             0039*                               ; SINGLE-PASS mode is used.
041800             0040*   
041800             0041*   ; disable/enable the programmable reload timer
041800             0042*   PRT_EN_0:     equ %00000000 ;
041800             0043*   PRT_EN_1:     equ %00000001 ;
041800             0044*   
041800             0045*   ; Table 37. Timer Input Source Select Register
041800             0046*   ; Each of the 4 timers are allocated two bits of the 8-bit register
041800             0047*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
041800             0048*   ;   00: System clock / CLK_DIV
041800             0049*   ;   01: RTC / CLK_DIV
041800             0050*   ;   NOTE: these are the values given in the manual,but it may be a typo
041800             0051*   ;   10: GPIO port B pin 1.
041800             0052*   ;   11: GPIO port B pin 1.
041800             0053*   TMR_ISS:   equ 92h ; register address
041800             0054*   
041800             0055*   ; Table 51. Real-Time Clock Control Register
041800             0056*   RTC_CTRL: equ EDh ; register address
041800             0057*   
041800             0058*   ; alarm interrupt disable/enable
041800             0059*   RTC_ALARM_0:    equ %00000000
041800             0060*   RTC_ALARM_1:    equ %10000000
041800             0061*   
041800             0062*   ; interrupt on alarm disable/enable
041800             0063*   RTC_INT_ENT_0:  equ %00000000
041800             0064*   RTC_INT_ENT_1:  equ %01000000
041800             0065*   
041800             0066*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
041800             0067*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
041800             0068*   
041800             0069*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
041800             0070*                                   ; On-chip 32768 Hz oscillator is enabled.
041800             0071*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
041800             0072*                                   ; On-chip 32768 Hz oscillator is disabled.
041800             0073*   
041800             0074*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
041800             0075*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
041800             0076*   
041800             0077*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
041800             0078*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
041800             0079*   
041800             0080*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
041800             0081*                                   ; RTC counter is enabled.
041800             0082*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
041800             0083*                                   ; RTC counter is disabled.
041800             0084*   
041800             0085*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
041800             0086*   
041800             0087*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
041800             0088*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
041800 00 00 00    0089*   prt_reload: dl 0x000000
041803             0090*   
041803             0091*   ; set PRT timer
041803             0092*   prt_set:
041803 21 00 00 00 0093*       ld hl,0
041807 22 51 18 04 0094*       ld (prt_irq_counter),hl
04180B 2A 00 18 04 0095*       ld hl,(prt_reload)
04180F ED 29 84    0096*       out0 ($84),l
041812 ED 21 85    0097*   	out0 ($85),h
041815             0098*   ; disable timer
041815 3E 06       0099*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041817 ED 39 83    0100*   	out0 ($83),a
04181A             0101*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04181A 3E 57       0102*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04181C ED 39 83    0103*   	out0 ($83),a
04181F C9          0104*       ret
041820             0105*   
041820             0106*   ; ===============================================
041820             0107*   ; PRT Timer Interrupt Handling
041820             0108*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
041820             0109*   ; -----------------------------------------------
041820             0110*   prt_irq_init:
041820             0111*       ; set up interrupt vector table 2
041820 21 00 00 00 0112*   	ld hl,0
041824 3A 0C 01 00 0113*   	ld a,($10c)
041828 6F          0114*   	ld l,a
041829 3A 0D 01 00 0115*   	ld a,($10d)
04182D 67          0116*   	ld h,a
04182E             0117*   
04182E             0118*   	; skip over CALL ($c3)
04182E 23          0119*   	inc hl
04182F             0120*   	; load address of jump into vector table 2 (in ram)
04182F ED 27       0121*   	ld hl,(hl)
041831             0122*   
041831             0123*   	; write CALL prt_irq_handler to vector table 2
041831 3E C3       0124*   	ld a,$c3
041833 77          0125*   	ld (hl),a
041834 23          0126*   	inc hl
041835 11 3C 18 04 0127*   	ld de,prt_irq_handler
041839 ED 1F       0128*   	ld (hl),de
04183B             0129*   
04183B C9          0130*       ret
04183C             0131*   
04183C             0132*   prt_irq_handler:
04183C F3          0133*   	di
04183D F5          0134*   	push af
04183E E5          0135*       push hl
04183F ED 38 83    0136*   	in0 a,($83)
041842 2A 51 18 04 0137*   	ld hl,(prt_irq_counter)
041846 23          0138*   	inc hl
041847 22 51 18 04 0139*   	ld (prt_irq_counter),hl
04184B E1          0140*       pop hl
04184C F1          0141*   	pop af
04184D FB          0142*   	ei
04184E 5B ED 4D    0143*   	reti.l
041851             0144*   
041851             0145*   prt_irq_counter:
041851 00 00 00    0146*   	.dl 0
041854             0147*   prt_irq_counter_saved:
041854 00 00 00    0148*       .dl 0
041857             0149*   
041857             0150*   prt_loop_reset:
041857 E5          0151*       push hl
041858 21 00 00 00 0152*   	ld hl,0
04185C 22 51 18 04 0153*   	ld (prt_irq_counter),hl
041860 22 C2 18 04 0154*       ld (prt_loop_counter),hl
041864 22 C5 18 04 0155*       ld (prt_loops),hl
041868 CD 03 18 04 0156*       call prt_set
04186C E1          0157*       pop hl
04186D C9          0158*       ret
04186E             0159*   
04186E             0160*   prt_loop_start:
04186E E5          0161*       push hl
04186F 21 00 00 00 0162*   	ld hl,0
041873 22 51 18 04 0163*   	ld (prt_irq_counter),hl
041877 E1          0164*       pop hl
041878 C9          0165*       ret
041879             0166*   
041879             0167*   prt_loop_stop:
041879 E5          0168*       push hl
04187A D5          0169*       push de
04187B 2A 51 18 04 0170*       ld hl,(prt_irq_counter)
04187F ED 5B C2 18 0171*       ld de,(prt_loop_counter)
       04          
041884 19          0172*       add hl,de
041885 22 C2 18 04 0173*       ld (prt_loop_counter),hl
041889 21 00 00 00 0174*       ld hl,0
04188D 22 51 18 04 0175*       ld (prt_irq_counter),hl
041891 2A C5 18 04 0176*       ld hl,(prt_loops)
041895 23          0177*       inc hl
041896 22 C5 18 04 0178*       ld (prt_loops),hl
04189A D1          0179*       pop de
04189B E1          0180*       pop hl
04189C C9          0181*       ret
04189D             0182*   
04189D             0183*   ; inputs: bc = y,x text coordinates to print
04189D             0184*   prt_loop_print:
04189D F5          0185*       push af
04189E E5          0186*       push hl
04189F C5          0187*       push bc
0418A0 D5          0188*       push de
0418A1 DD E5       0189*       push ix
0418A3 FD E5       0190*       push iy
0418A5 CD 37 1A 04 0191*       call vdu_move_cursor
0418A9             0192*   
0418A9 2A C2 18 04 0193*       ld hl,(prt_loop_counter)
0418AD CD 16 02 04 0194*       call printDec
0418B1             0195*   
0418B1 2A C5 18 04 0196*       ld hl,(prt_loops)
0418B5 CD 16 02 04 0197*       call printDec
0418B9             0198*   
0418B9 FD E1       0199*       pop iy
0418BB DD E1       0200*       pop ix
0418BD D1          0201*       pop de
0418BE C1          0202*       pop bc
0418BF E1          0203*       pop hl
0418C0 F1          0204*       pop af
0418C1 C9          0205*       ret
0418C2             0206*   
0418C2             0207*   prt_loop_counter:
0418C2 00 00 00    0208*       .dl 0
0418C5             0209*   prt_loops:
0418C5 00 00 00    0210*       .dl 0
0418C8             0211*   
0418C8             0212*   ; ===============================================
0418C8             0213*   ; Timer functions
0418C8             0214*   ; -----------------------------------------------
0418C8             0215*   ; set a countdown timer
0418C8             0216*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0418C8             0217*   ; returns: hl = current time
0418C8             0218*   tmr_set:
0418C8 FD 2F 03    0219*       ld (iy+3),hl            ; set time remaining
0418CB             0220*       MOSCALL mos_sysvars     ; ix points to syvars table
0418CB 3E 08       0001*M1 			LD	A, function
0418CD 5B CF       0002*M1 			RST.LIL	08h
0418CF DD 27 00    0221*       ld hl,(ix+sysvar_time)  ; get current time
0418D2 FD 2F 00    0222*       ld (iy+0),hl            ; set start time
0418D5 C9          0223*       ret
0418D6             0224*   
0418D6             0225*   ; gets time remaining on a countdown timer
0418D6             0226*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0418D6             0227*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0418D6             0228*   ;          sign flags: pos = time not expired,zero or neg = time expired
0418D6             0229*   tmr_get:
0418D6             0230*       MOSCALL mos_sysvars     ; ix points to syvars table
0418D6 3E 08       0001*M1 			LD	A, function
0418D8 5B CF       0002*M1 			RST.LIL	08h
0418DA DD 17 00    0231*       ld de,(ix+sysvar_time)  ; get current time
0418DD FD 27 00    0232*       ld hl,(iy+0)            ; get start time
0418E0 AF          0233*       xor a                   ; clear carry
0418E1 ED 52       0234*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0418E3 FD 17 03    0235*       ld de,(iy+3)            ; get timer set value
0418E6 AF          0236*       xor a                   ; clear carry
0418E7 ED 5A       0237*       adc hl,de               ; hl = time remaining
0418E9             0238*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0418E9 C9          0239*       ret
0418EA             0240*   
0418EA             0241*   tmr_test: ds 6 ; example of a buffer to hold timer data
0418F0             0242*   
       FF FF FF FF 
       FF FF 
0418F0 00 00 00    0243*   timestamp_now: dl 0
0418F3 00 00 00    0244*   timestamp_old: dl 0
0418F6 00 00 00    0245*   timestamp_chg: dl 0
0418F9             0246*   
0418F9             0247*   ; update the global timestamp from the system clock
0418F9             0248*   ; inputs: none
0418F9             0249*   ; returns: hl = time elapsed in 1/120ths of a second
0418F9             0250*   ;          ix = pointer to syvars table
0418F9             0251*   ; destroys: af,hl,de,ix
0418F9             0252*   timestamp_tick:
0418F9 ED 5B F0 18 0253*       ld de,(timestamp_now)   ; get previous time
       04          
0418FE ED 53 F3 18 0254*       ld (timestamp_old),de   ; save previous time
       04          
041903             0255*       MOSCALL mos_sysvars     ; ix points to syvars table
041903 3E 08       0001*M1 			LD	A, function
041905 5B CF       0002*M1 			RST.LIL	08h
041907 DD 27 00    0256*       ld hl,(ix+sysvar_time)  ; get current time
04190A 22 F0 18 04 0257*       ld (timestamp_now),hl   ; save current time
04190E AF          0258*       xor a                   ; clear carry
04190F ED 52       0259*       sbc hl,de               ; hl = time elapsed
041911 22 F6 18 04 0260*       ld (timestamp_chg),hl   ; save elapsed time
041915 C9          0261*       ret
041916             0262*   
041916             0263*   ; set a countdown timer
041916             0264*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041916             0265*   ; requires: timestamp_tick to be called at least once before this function
041916             0266*   ; returns: hl = current time
041916             0267*   ; destroys: hl
041916             0268*   timestamp_tmr_set:
041916 FD 2F 03    0269*       ld (iy+3),hl            ; set time remaining
041919 2A F0 18 04 0270*       ld hl,(timestamp_now)   ; get current timestamp
04191D FD 2F 00    0271*       ld (iy+0),hl            ; set start time
041920 C9          0272*       ret
041921             0273*   
041921             0274*   ; gets time remaining on a countdown timer following the global timestamp
041921             0275*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041921             0276*   ; requires: timestamp_tick to be called at least once before this function
041921             0277*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041921             0278*   ;          sign flags: pos = time not expired,zero or neg = time expired
041921             0279*   ; destroys: af,hl,de
041921             0280*   timestamp_tmr_get:
041921 ED 5B F0 18 0281*       ld de,(timestamp_now)   ; get current timestamp
       04          
041926 FD 27 00    0282*       ld hl,(iy+0)            ; get start time
041929 AF          0283*       xor a                   ; clear carry
04192A ED 52       0284*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04192C FD 17 03    0285*       ld de,(iy+3)            ; get timer set value
04192F AF          0286*       xor a                   ; clear carry
041930 ED 5A       0287*       adc hl,de               ; hl = time remaining
041932             0288*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041932 C9          0289*       ret
041933             0290*   
041933             0291*   ; set a stopwatch
041933             0292*   ; returns: hl = start time
041933             0293*   ; destroys: hl,ix
041933             0294*   stopwatch_set:
041933             0295*       MOSCALL mos_sysvars     ; ix points to syvars table
041933 3E 08       0001*M1 			LD	A, function
041935 5B CF       0002*M1 			RST.LIL	08h
041937 DD 27 00    0296*       ld hl,(ix+sysvar_time)  ; get current time
04193A 22 4F 19 04 0297*       ld (stopwatch_started),hl            ; set start time
04193E C9          0298*       ret
04193F             0299*   
04193F             0300*   ; gets time elapsed on a stopwatch
04193F             0301*   ; returns: hl = time elapsed in 1/120ths of a second
04193F             0302*   ; destroys: af,hl,de,ix
04193F             0303*   stopwatch_get:
04193F             0304*       MOSCALL mos_sysvars     ; ix points to syvars table
04193F 3E 08       0001*M1 			LD	A, function
041941 5B CF       0002*M1 			RST.LIL	08h
041943 DD 27 00    0305*       ld hl,(ix+sysvar_time)  ; get current time
041946 ED 5B 4F 19 0306*       ld de,(stopwatch_started)            ; get start time
       04          
04194B AF          0307*       xor a                   ; clear carry
04194C ED 52       0308*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04194E C9          0309*       ret
04194F             0310*   
04194F             0311*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041952             0312*   
041952             0313*   ; ------------------
041952             0314*   ; delay routine
041952             0315*   ; Author: Richard Turrnidge
041952             0316*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041952             0317*   ; routine waits a fixed time,then returns
041952             0318*   ; arrive with A =  the delay byte. One bit to be set only.
041952             0319*   ; eg. ld A,00000100b
041952             0320*   
041952             0321*   multiPurposeDelay:
       FF FF FF 
041952 F5          0322*       push af
041953 C5          0323*       push bc
041954 DD E5       0324*       push ix
041956 47          0325*       ld b,a
041957 3E 08       0326*       ld a,$08
041959 5B CF       0327*       RST.LIL	08h                 ; get IX pointer to sysvars
04195B             0328*   
04195B             0329*   waitLoop:
04195B             0330*   
04195B DD 7E 00    0331*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04195E             0332*   
04195E             0333*                                   ;   we check if bit set is same as last time we checked.
04195E             0334*                                   ;   bit 0 - don't use
04195E             0335*                                   ;   bit 1 - changes 64 times per second
04195E             0336*                                   ;   bit 2 - changes 32 times per second
04195E             0337*                                   ;   bit 3 - changes 16 times per second
04195E             0338*   
04195E             0339*                                   ;   bit 4 - changes 8 times per second
04195E             0340*                                   ;   bit 5 - changes 4 times per second
04195E             0341*                                   ;   bit 6 - changes 2 times per second
04195E             0342*                                   ;   bit 7 - changes 1 times per second
04195E A0          0343*       and b
04195F 4F          0344*       ld c,a
041960 3A 71 19 04 0345*       ld a,(oldTimeStamp)
041964 B9          0346*       cp c                        ; is A same as last value?
041965 28 F4       0347*       jr z,waitLoop              ; loop here if it is
041967 79          0348*       ld a,c
041968 32 71 19 04 0349*       ld (oldTimeStamp),a        ; set new value
04196C             0350*   
04196C DD E1       0351*       pop ix
04196E C1          0352*       pop bc
04196F F1          0353*       pop af
041970 C9          0354*       ret
041971             0355*   
041971 00          0356*   oldTimeStamp:   .db 00h
041972             0038        include "vdu.inc"
041972 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
041A00             0002*   
041A00             0003*   ; VDU 30: Home cursor
041A00             0004*   vdu_home_cursor:
041A00 3E 1E       0005*       ld a,30
041A02 5B D7       0006*   	rst.lil $10
041A04 C9          0007*   	ret
041A05             0008*   
041A05             0009*   vdu_cursor_on:
041A05 21 10 1A 04 0010*   	ld hl,@cmd
041A09 01 03 00 00 0011*   	ld bc,@end-@cmd
041A0D 5B DF       0012*   	rst.lil $18
041A0F C9          0013*   	ret
041A10             0014*   @cmd:
041A10 17 01 01    0015*   	db 23,1,1
041A13             0016*   @end:
041A13             0017*   
041A13             0018*   vdu_cursor_off:
041A13 21 1E 1A 04 0019*   	ld hl,@cmd
041A17 01 03 00 00 0020*   	ld bc,@end-@cmd
041A1B 5B DF       0021*   	rst.lil $18
041A1D C9          0022*   	ret
041A1E             0023*   @cmd:
041A1E 17 01 00    0024*   	db 23,1,0
041A21             0025*   @end:
041A21             0026*   
041A21             0027*   ; VDU 5: Write text at graphics cursor
041A21             0028*   ; inputs: a is the character to write to the screen
041A21             0029*   ; prerequisites: the graphics cursor at the intended position on screen
041A21             0030*   ; outputs: see the name of the function
041A21             0031*   ; destroys: a, hl, bc
041A21             0032*   vdu_char_to_gfx_cursor:
041A21 32 31 1A 04 0033*   	ld (@arg),a
041A25 21 30 1A 04 0034*   	ld hl,@cmd
041A29 01 02 00 00 0035*   	ld bc,@end-@cmd
041A2D 5B DF       0036*   	rst.lil $18
041A2F C9          0037*   	ret
041A30 05          0038*   @cmd: db 5
041A31 00          0039*   @arg: db 0
041A32             0040*   @end:
041A32             0041*   ; VDU 9: Move cursor forward one character
041A32             0042*   vdu_cursor_forward:
041A32 3E 09       0043*       ld a,9
041A34 5B D7       0044*   	rst.lil $10
041A36 C9          0045*   	ret
041A37             0046*   
041A37             0047*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041A37             0048*   ; inputs: c=x, b=y 8-bit unsigned integers
041A37             0049*   vdu_move_cursor:
041A37 ED 43 48 1A 0050*       ld (@x0),bc
       04          
041A3C 21 47 1A 04 0051*   	ld hl,@cmd
041A40 01 03 00 00 0052*   	ld bc,@end-@cmd
041A44 5B DF       0053*   	rst.lil $18
041A46 C9          0054*   	ret
041A47 1F          0055*   @cmd: 	db 31
041A48 00          0056*   @x0:	db 0
041A49 00          0057*   @y0: 	db 0
041A4A 00          0058*   @end: 	db 0 ; padding
041A4B             0059*   
041A4B             0060*   ; VDU 12: Clear text area (CLS)
041A4B             0061*   vdu_cls:
041A4B 3E 0C       0062*       ld a,12
041A4D 5B D7       0063*   	rst.lil $10
041A4F C9          0064*   	ret
041A50             0065*   
041A50             0066*   vdu_flip:
041A50 21 5B 1A 04 0067*   	ld hl,@cmd
041A54 01 03 00 00 0068*   	ld bc,@end-@cmd
041A58 5B DF       0069*   	rst.lil $18
041A5A C9          0070*   	ret
041A5B 17 00 C3    0071*   @cmd: db 23,0,0xC3
041A5E             0072*   @end:
041A5E             0073*   
041A5E             0074*   ; VDU 16: Clear graphics area (CLG)
041A5E             0075*   vdu_clg:
041A5E 3E 10       0076*       ld a,16
041A60 5B D7       0077*   	rst.lil $10
041A62 C9          0078*   	ret
041A63             0079*   
041A63             0080*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041A63             0081*   ; VDU 23, 7: Scrolling
041A63             0082*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041A63             0083*   ; inputs: a, extent; l, direction; h; speed
041A63             0084*   vdu_scroll_down:
041A63 32 78 1A 04 0085*   	ld (@extent),a
041A67 22 79 1A 04 0086*   	ld (@dir),hl ; implicitly populates @speed
041A6B 21 76 1A 04 0087*   	ld hl,@cmd
041A6F 01 05 00 00 0088*   	ld bc,@end-@cmd
041A73 5B DF       0089*   	rst.lil $18     ;; Sending command to VDP
041A75 C9          0090*   	ret
041A76 17 07       0091*   @cmd:       db 23,7
041A78 00          0092*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041A79 00          0093*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
041A7A 00          0094*   @speed:     db 0x00 ; pixels
041A7B 00          0095*   @end:		db 0x00 ; padding
041A7C             0096*   
041A7C             0097*   ; COLOUR MODES
041A7C             0098*   ; Mode	Effect
041A7C             0099*   ; 0	Set on-screen pixel to target colour value
041A7C             0100*   ; 1	OR value with the on-screen pixel
041A7C             0101*   ; 2	AND value with the on-screen pixel
041A7C             0102*   ; 3	XOR value with the on-screen pixel
041A7C             0103*   ; 4	Invert the on-screen pixel
041A7C             0104*   ; 5	No operation
041A7C             0105*   ; 6	AND the inverse of the specified colour with the on-screen pixel
041A7C             0106*   ; 7	OR the inverse of the specified colour with the on-screen pixel
041A7C             0107*   
041A7C             0108*   ; VDU 17, colour: Define text colour (COLOUR)
041A7C             0109*   vdu_colour_text:
041A7C 32 8C 1A 04 0110*   	ld (@arg),a
041A80 21 8B 1A 04 0111*   	ld hl,@cmd
041A84 01 02 00 00 0112*   	ld bc,@end-@cmd
041A88 5B DF       0113*   	rst.lil $18
041A8A C9          0114*   	ret
041A8B 11          0115*   @cmd: db 17
041A8C 00          0116*   @arg: db 0
041A8D             0117*   @end:
041A8D             0118*   
041A8D             0119*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
041A8D             0120*   ; inputs: a=mode, c=colour (add 128 to set background colour)
041A8D             0121*   vdu_gcol:
041A8D 32 A2 1A 04 0122*   	ld (@mode),a
041A91 79          0123*       ld a,c
041A92 32 A3 1A 04 0124*       ld (@col),a
041A96 21 A1 1A 04 0125*   	ld hl,@cmd
041A9A 01 03 00 00 0126*   	ld bc,@end-@cmd
041A9E 5B DF       0127*   	rst.lil $18
041AA0 C9          0128*   	ret
041AA1 12          0129*   @cmd:  db 18
041AA2 00          0130*   @mode: db 0
041AA3 00          0131*   @col:  db 0
041AA4             0132*   @end:
041AA4             0133*   
041AA4             0134*   
041AA4             0135*   ; VDU 28, left, bottom, right, top: Set text viewport **
041AA4             0136*   ; MIND THE LITTLE-ENDIANESS
041AA4             0137*   ; inputs: c=left,b=bottom,e=right,d=top
041AA4             0138*   ; outputs; nothing
041AA4             0139*   ; destroys: a might make it out alive
041AA4             0140*   vdu_set_txt_viewport:
041AA4 ED 43 BA 1A 0141*       ld (@lb),bc
       04          
041AA9 ED 53 BC 1A 0142*   	ld (@rt),de
       04          
041AAE 21 B9 1A 04 0143*   	ld hl,@cmd
041AB2 01 05 00 00 0144*   	ld bc,@end-@cmd
041AB6 5B DF       0145*   	rst.lil $18
041AB8 C9          0146*   	ret
041AB9 1C          0147*   @cmd:   db 28 ; set text viewport command
041ABA 00 00       0148*   @lb: 	dw 0x0000 ; set by bc
041ABC 00 00       0149*   @rt: 	dw 0x0000 ; set by de
041ABE 00          0150*   @end:   db 0x00	  ; padding
041ABF             0151*   
041ABF             0152*   ; Wait for VBLANK interrupt
041ABF             0153*   vdu_vblank:
041ABF DD E5       0154*       PUSH 	IX
041AC1             0155*   	MOSCALL	mos_sysvars
041AC1 3E 08       0001*M1 			LD	A, function
041AC3 5B CF       0002*M1 			RST.LIL	08h
041AC5 DD 7E 00    0156*   	LD	A, (IX + sysvar_time + 0)
041AC8             0157*   @wait:
041AC8 DD BE 00    0158*       CP 	A, (IX + sysvar_time + 0)
041ACB 28 FB       0159*       JR	Z, @wait
041ACD DD E1       0160*       POP	IX
041ACF C9          0161*       RET
041AD0             0162*   
041AD0             0163*   ; VDU 29, x; y;: Set graphics origin
041AD0             0164*   ; This command sets the graphics origin.
041AD0             0165*   ; The origin is the point on the screen where the coordinates (0,0) are located.
041AD0             0166*   ; inputs: bc=x0,de=y0
041AD0             0167*   ; outputs; nothing
041AD0             0168*   ; destroys: a might make it out alive
041AD0             0169*   vdu_set_gfx_origin:
041AD0 ED 43 E6 1A 0170*       ld (@x0),bc
       04          
041AD5 ED 53 E8 1A 0171*       ld (@y0),de
       04          
041ADA 21 E5 1A 04 0172*       ld hl,@cmd
041ADE 01 05 00 00 0173*       ld bc,@end-@cmd
041AE2 5B DF       0174*       rst.lil $18
041AE4 C9          0175*       ret
041AE5 1D          0176*   @cmd:   db 29 ; set graphics origin command
041AE6 00 00       0177*   @x0: 	dw 0x0000 ; set by bc
041AE8 00 00       0178*   @y0: 	dw 0x0000 ; set by de
041AEA 00          0179*   @end:   db 0x00	  ; padding
041AEB             0180*   
041AEB             0181*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
041AEB             0182*   ; NOTE: the order of the y-coordinate parameters are inverted
041AEB             0183*   ; 	because we have turned off logical screen scaling
041AEB             0184*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041AEB             0185*   ; outputs; nothing
041AEB             0186*   ; destroys: a might make it out alive
041AEB             0187*   vdu_set_gfx_viewport:
041AEB ED 43 0B 1B 0188*       ld (@x0),bc
       04          
041AF0 FD 22 0D 1B 0189*       ld (@y1),iy
       04          
041AF5 DD 22 0F 1B 0190*   	ld (@x1),ix
       04          
041AFA ED 53 11 1B 0191*   	ld (@y0),de
       04          
041AFF 21 0A 1B 04 0192*   	ld hl,@cmd
041B03 01 09 00 00 0193*   	ld bc,@end-@cmd
041B07 5B DF       0194*   	rst.lil $18
041B09 C9          0195*   	ret
041B0A 18          0196*   @cmd:   db 24 ; set graphics viewport command
041B0B 00 00       0197*   @x0: 	dw 0x0000 ; set by bc
041B0D 00 00       0198*   @y1: 	dw 0x0000 ; set by iy
041B0F 00 00       0199*   @x1: 	dw 0x0000 ; set by ix
041B11 00 00       0200*   @y0: 	dw 0x0000 ; set by de
041B13 00          0201*   @end:   db 0x00	  ; padding
041B14             0202*   
041B14             0203*   ; SCREEN MODES
041B14             0204*   ; ===============================
041B14             0205*   ; Mode  Horz  Vert  Cols  Refresh
041B14             0206*   ; ---   ----  ----  ----  -------
041B14             0207*   ; 11    320   240   2     60hz
041B14             0208*   ; 139   320   240   2     60hz
041B14             0209*   ; 23    512   384   2     60hz
041B14             0210*   ; 151   512   384   2     60hz
041B14             0211*   ; 6     640   240   2     60hz
041B14             0212*   ; 134   640   240   2     60hz
041B14             0213*   ; 2     640   480   2     60hz
041B14             0214*   ; 130   640   480   2     60hz
041B14             0215*   ; 17    800   600   2     60hz
041B14             0216*   ; 145   800   600   2     60hz
041B14             0217*   ; 18    1024  768   2     60hz
041B14             0218*   ; 146   1024  768   2     60hz
041B14             0219*   ; ---   ----  ----  ----  -------
041B14             0220*   ; 10    320   240   4     60hz
041B14             0221*   ; 138   320   240   4     60hz
041B14             0222*   ; 22    512   384   4     60hz
041B14             0223*   ; 150   512   384   4     60hz
041B14             0224*   ; 5     640   240   4     60hz
041B14             0225*   ; 133   640   240   4     60hz
041B14             0226*   ; 1     640   480   4     60hz
041B14             0227*   ; 129   640   480   4     60hz
041B14             0228*   ; 16    800   600   4     60hz
041B14             0229*   ; 19    1024  768   4     60hz
041B14             0230*   ; ---   ----  ----  ----  -------
041B14             0231*   ; 9     320   240   16    60hz
041B14             0232*   ; 137   320   240   16    60hz
041B14             0233*   ; 21    512   384   16    60hz
041B14             0234*   ; 149   512   384   16    60hz
041B14             0235*   ; 4     640   240   16    60hz
041B14             0236*   ; 132   640   240   16    60hz
041B14             0237*   ; 0     640   480   16    60hz
041B14             0238*   ; 7     n/a   n/a   16    60hz
041B14             0239*   ; ---   ----  ----  ----  -------
041B14             0240*   ; 8     320   240   64    60hz
041B14             0241*   ; 136   320   240   64    60hz
041B14             0242*   ; 20    512   384   64    60hz
041B14             0243*   ; 3     640   240   64    60hz
041B14             0244*   ; ---   ----  ----  ----  -------
041B14             0245*   vdu_set_screen_mode:
041B14 32 24 1B 04 0246*   	ld (@arg),a
041B18 21 23 1B 04 0247*   	ld hl,@cmd
041B1C 01 02 00 00 0248*   	ld bc,@end-@cmd
041B20 5B DF       0249*   	rst.lil $18
041B22 C9          0250*   	ret
041B23 16          0251*   @cmd: db 22 ; set screen mode
041B24 00          0252*   @arg: db 0  ; screen mode parameter
041B25             0253*   @end:
041B25             0254*   
041B25             0255*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041B25             0256*   ; inputs: a is scaling mode, 1=on, 0=off
041B25             0257*   ; note: default setting on boot is scaling ON
041B25             0258*   vdu_set_scaling:
041B25 32 37 1B 04 0259*   	ld (@arg),a
041B29 21 34 1B 04 0260*   	ld hl,@cmd
041B2D 01 04 00 00 0261*   	ld bc,@end-@cmd
041B31 5B DF       0262*   	rst.lil $18
041B33 C9          0263*   	ret
041B34 17 00 C0    0264*   @cmd: db 23,0,0xC0
041B37 00          0265*   @arg: db 0  ; scaling on/off
041B38             0266*   @end:
041B38             0267*   
041B38             0268*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041B38             0269*   ; inputs: hl=bufferId
041B38             0270*   vdu_buff_select:
041B38 22 4A 1B 04 0271*   	ld (@bufferId),hl
041B3C 21 47 1B 04 0272*   	ld hl,@cmd
041B40 01 05 00 00 0273*   	ld bc,@end-@cmd
041B44 5B DF       0274*   	rst.lil $18
041B46 C9          0275*   	ret
041B47 17 1B 20    0276*   @cmd: db 23,27,0x20
041B4A 00 00       0277*   @bufferId: dw 0x0000
041B4C 00          0278*   @end: db 0x00 ; padding
041B4D             0279*   
041B4D             0280*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041B4D             0281*   ; inputs: a=format; bc=width; de=height
041B4D             0282*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041B4D             0283*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041B4D             0284*   ; 0 	RGBA8888 (4-bytes per pixel)
041B4D             0285*   ; 1 	RGBA2222 (1-bytes per pixel)
041B4D             0286*   ; 2 	Mono/Mask (1-bit per pixel)
041B4D             0287*   ; 3 	Reserved for internal use by VDP (“native” format)
041B4D             0288*   vdu_bmp_create:
041B4D ED 43 69 1B 0289*       ld (@width),bc
       04          
041B52 ED 53 6B 1B 0290*       ld (@height),de
       04          
041B57 32 6D 1B 04 0291*       ld (@fmt),a
041B5B 21 66 1B 04 0292*   	ld hl,@cmd
041B5F 01 08 00 00 0293*   	ld bc,@end-@cmd
041B63 5B DF       0294*   	rst.lil $18
041B65 C9          0295*   	ret
041B66 17 1B 21    0296*   @cmd:       db 23,27,0x21
041B69 00 00       0297*   @width:     dw 0x0000
041B6B 00 00       0298*   @height:    dw 0x0000
041B6D 00          0299*   @fmt:       db 0x00
041B6E             0300*   @end:
041B6E             0301*   
041B6E             0302*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041B6E             0303*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041B6E             0304*   vdu_load_img_rgba2_to_8:
041B6E             0305*   ; backup the target buffer id and image dimensions
041B6E E5          0306*       push hl
041B6F D5          0307*       push de
041B70 C5          0308*       push bc
041B71             0309*   ; load the rgba2 image to working buffer 65534
041B71 21 FE FF 00 0310*       ld hl,65534 ; temporary working buffer id
041B75 CD 78 1C 04 0311*   	call vdu_load_buffer_from_file
041B79             0312*   ; restore the image dimensions and target buffer id
041B79 C1          0313*       pop bc
041B7A D1          0314*       pop de
041B7B E1          0315*       pop hl
041B7C             0316*   ; fall through to vdu_rgba2_to_8
041B7C             0317*   
041B7C             0318*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041B7C             0319*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041B7C             0320*   ; the "expand bitmap" command is:
041B7C             0321*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041B7C             0322*   ; and then to reverse the byte order to fix endian-ness:
041B7C             0323*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041B7C             0324*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041B7C             0325*   ; VDU 23,27,&20,targetBufferID%;
041B7C             0326*   ; VDU 23,27,&21,width%;height%;0
041B7C             0327*   ; -------------------------------------------------------------------
041B7C             0328*   ; inputs: bc,de image width,height ; hl = targetBufferId
041B7C             0329*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041B7C             0330*   vdu_rgba2_to_8:
041B7C             0331*   ; load the image dimensions and buffer id parameters
041B7C ED 43 D8 1B 0332*       ld (@width),bc
       04          
041B81 ED 53 DA 1B 0333*       ld (@height),de
       04          
041B86 22 BD 1B 04 0334*       ld (@bufferId0),hl
041B8A 22 CA 1B 04 0335*       ld (@bufferId2),hl
041B8E 22 D3 1B 04 0336*       ld (@bufferId1),hl
041B92             0337*   ; clean up bytes that got stomped on by the ID loads
041B92 3E 48       0338*       ld a,0x48
041B94 32 BF 1B 04 0339*       ld (@bufferId0+2),a
041B98 3E 17       0340*       ld a,23
041B9A 32 D5 1B 04 0341*       ld (@bufferId1+2),a
041B9E 3E 18       0342*       ld a,24
041BA0 32 CC 1B 04 0343*       ld (@bufferId2+2),a
041BA4 AF          0344*       xor a
041BA5 32 DC 1B 04 0345*       ld (@height+2),a
041BA9             0346*   ; send the vdu command strings
041BA9 21 B4 1B 04 0347*       ld hl,@beg
041BAD 01 29 00 00 0348*       ld bc,@end-@beg
041BB1 5B DF       0349*       rst.lil $18
041BB3 C9          0350*       ret
041BB4             0351*   @beg:
041BB4             0352*   ; Command 14: Consolidate blocks in a buffer
041BB4             0353*   ; VDU 23, 0, &A0, bufferId; 14
041BB4 17 00 A0    0354*       db 23,0,0xA0
041BB7 FE FF       0355*       dw 65534 ; workingBufferId
041BB9 0E          0356*       db 14 ; consolidate blocks
041BBA             0357*   ; the "expand bitmap" command is:
041BBA             0358*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041BBA 17 00 A0    0359*       db 23,0,0xA0
041BBD 00 00       0360*   @bufferId0: dw 0x0000 ; targetBufferId
041BBF 48          0361*       db 0x48 ; given as decimal command 72 in the docs
041BC0 02          0362*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041BC1 FE FF       0363*       dw 65534 ; sourceBufferId
041BC3 00 7F BF FF 0364*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041BC7             0365*   ; reverse the byte order to fix endian-ness:
041BC7             0366*   ; Command 24: Reverse the order of data of blocks within a buffer
041BC7             0367*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041BC7             0368*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041BC7 17 00 A0    0369*       db 23,0,0xA0
041BCA 00 00       0370*   @bufferId2:    dw 0x0000 ; targetBufferId
041BCC 18          0371*       db 24 ; reverse byte order
041BCD 04          0372*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041BCE 04 00       0373*       dw 4 ; size (4 bytes)
041BD0             0374*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041BD0             0375*   ; VDU 23,27,&20,targetBufferID%;
041BD0 17 1B 20    0376*       db 23,27,0x20 ; select bitmap
041BD3 00 00       0377*   @bufferId1: dw 0x0000 ; targetBufferId
041BD5             0378*   ; VDU 23,27,&21,width%;height%;0
041BD5 17 1B 21    0379*       db 23,27,0x21 ; create bitmap from buffer
041BD8 00 00       0380*   @width: dw 0x0000
041BDA 00 00       0381*   @height: dw 0x0000
041BDC 00          0382*       db 0x00 ; rgba8888 format
041BDD             0383*   @end:
041BDD             0384*   
041BDD             0385*   ; scratch variables
041BDD 00 00 00    0386*   bufferId0: dl 0x000000
041BE0 00 00 00    0387*   bufferId1: dl 0x000000
041BE3             0388*   
041BE3             0389*   ; load a vdu buffer from local memory
041BE3             0390*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041BE3             0391*   vdu_load_buffer:
041BE3 ED 43 0C 1C 0392*       ld (@length),bc
       04          
041BE8 D5          0393*       push de ; save data pointer
041BE9             0394*   ; send the vdu command string
041BE9 7D          0395*       ld a,l
041BEA 32 09 1C 04 0396*       ld (@bufferId),a
041BEE 7C          0397*       ld a,h
041BEF 32 0A 1C 04 0398*       ld (@bufferId+1),a
041BF3 21 06 1C 04 0399*       ld hl,@cmd
041BF7 01 08 00 00 0400*       ld bc,@end-@cmd
041BFB 5B DF       0401*       rst.lil $18
041BFD             0402*   ; send the buffer data
041BFD E1          0403*       pop hl ; pointer to data
041BFE ED 4B 0C 1C 0404*       ld bc,(@length)
       04          
041C03 5B DF       0405*       rst.lil $18 ; send it
041C05 C9          0406*       ret
041C06             0407*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041C06 17 00 A0    0408*   @cmd:       db 23,0,0xA0
041C09 00 00       0409*   @bufferId:	dw 0x0000
041C0B 00          0410*   		    db 0 ; load buffer
041C0C 00 00       0411*   @length:	dw 0x0000
041C0E 00          0412*   @end: db 0 ; padding
041C0F             0413*   
041C0F             0414*   ; clear a buffer
041C0F             0415*   ; inputs: hl = bufferId
041C0F             0416*   vdu_clear_buffer:
041C0F 7D          0417*       ld a,l
041C10 32 27 1C 04 0418*       ld (@bufferId),a
041C14 7C          0419*       ld a,h
041C15 32 28 1C 04 0420*       ld (@bufferId+1),a
041C19 21 24 1C 04 0421*       ld hl,@cmd
041C1D 01 06 00 00 0422*       ld bc,@end-@cmd
041C21 5B DF       0423*       rst.lil $18
041C23 C9          0424*       ret
041C24 17 00 A0    0425*   @cmd:       db 23,0,0xA0
041C27 00 00       0426*   @bufferId:	dw 0x0000
041C29 02          0427*   		    db 2 ; clear buffer
041C2A             0428*   @end:
041C2A             0429*   
041C2A             0430*   vdu_clear_all_buffers:
041C2A             0431*   ; clear all buffers
041C2A 21 35 1C 04 0432*       ld hl,@beg
041C2E 01 06 00 00 0433*       ld bc,@end-@beg
041C32 5B DF       0434*       rst.lil $18
041C34 C9          0435*       ret
041C35 17 00 A0    0436*   @beg: db 23,0,$A0
041C38 FF FF       0437*         dw -1 ; clear all buffers
041C3A 02          0438*         db 2  ; command 2: clear a buffer
041C3B             0439*   @end:
041C3B             0440*   
041C3B             0441*   ; Command 14: Consolidate blocks in a buffer
041C3B             0442*   vdu_consolidate_buffer:
041C3B             0443*   ; set parameters for vdu call
041C3B 7D          0444*       ld a,l
041C3C 32 53 1C 04 0445*       ld (@bufferId),a
041C40 7C          0446*       ld a,h
041C41 32 54 1C 04 0447*       ld (@bufferId+1),a
041C45 21 50 1C 04 0448*       ld hl,@beg
041C49 01 06 00 00 0449*       ld bc,@end-@beg
041C4D 5B DF       0450*       rst.lil $18
041C4F C9          0451*       ret
041C50             0452*   ; VDU 23, 0, &A0, bufferId; 14
041C50 17 00 A0    0453*   @beg: db 23,0,0xA0
041C53 00 00       0454*   @bufferId: dw 0x0000
041C55 0E          0455*              db 14
041C56             0456*   @end:
041C56             0457*   
041C56             0458*   ; load an image file to a buffer and make it a bitmap
041C56             0459*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041C56             0460*   vdu_load_img:
041C56             0461*   ; back up image type and dimension parameters
041C56 22 DD 1B 04 0462*       ld (bufferId0),hl
041C5A F5          0463*       push af
041C5B C5          0464*   	push bc
041C5C D5          0465*   	push de
041C5D             0466*   ; load the image
041C5D CD 78 1C 04 0467*   	call vdu_load_buffer_from_file
041C61             0468*   ; now make it a bitmap
041C61 2A DD 1B 04 0469*       ld hl,(bufferId0)
041C65 CD 3B 1C 04 0470*       call vdu_consolidate_buffer
041C69 2A DD 1B 04 0471*       ld hl,(bufferId0)
041C6D CD 38 1B 04 0472*       call vdu_buff_select
041C71 D1          0473*   	pop de ; image height
041C72 C1          0474*   	pop bc ; image width
041C73 F1          0475*   	pop af ; image type
041C74 C3 4D 1B 04 0476*   	jp vdu_bmp_create ; will return to caller from there
041C78             0477*   
041C78             0478*   ; inputs: hl = bufferId; iy = pointer to filename
041C78             0479*   vdu_load_buffer_from_file:
041C78 22 DD 1B 04 0480*       ld (bufferId0),hl
041C7C             0481*   
041C7C             0482*   ; clear target buffer
041C7C CD 0F 1C 04 0483*       call vdu_clear_buffer
041C80             0484*   
041C80             0485*   ; open the file in read mode
041C80             0486*   ; Open a file
041C80             0487*   ; HLU: Filename
041C80             0488*   ;   C: Mode
041C80             0489*   ; Returns:
041C80             0490*   ;   A: Filehandle, or 0 if couldn't open
041C80 FD E5       0491*   	push iy ; pointer to filename
041C82 E1          0492*   	pop hl
041C83 0E 01       0493*   	ld c,fa_read
041C85             0494*       MOSCALL mos_fopen
041C85 3E 0A       0001*M1 			LD	A, function
041C87 5B CF       0002*M1 			RST.LIL	08h
041C89 32 C4 1C 04 0495*       ld (@filehandle),a
041C8D             0496*   
041C8D             0497*   @read_file:
041C8D             0498*   ; Read a block of data from a file
041C8D             0499*   ;   C: Filehandle
041C8D             0500*   ; HLU: Pointer to where to write the data to
041C8D             0501*   ; DEU: Number of bytes to read
041C8D             0502*   ; Returns:
041C8D             0503*   ; DEU: Number of bytes read
041C8D 3A C4 1C 04 0504*       ld a,(@filehandle)
041C91 4F          0505*       ld c,a
041C92 21 00 E0 B7 0506*       ld hl,filedata
041C96 11 00 20 00 0507*       ld de,8192 ; max we can read into onboard sram at one time
041C9A             0508*       MOSCALL mos_fread
041C9A 3E 1A       0001*M1 			LD	A, function
041C9C 5B CF       0002*M1 			RST.LIL	08h
041C9E             0509*   
041C9E             0510*   ; test de for zero bytes read
041C9E 21 00 00 00 0511*       ld hl,0
041CA2 AF          0512*       xor a ; clear carry
041CA3 ED 52       0513*       sbc hl,de
041CA5 CA BB 1C 04 0514*       jp z,@close_file
041CA9             0515*   
041CA9             0516*   ; load a vdu buffer from local memory
041CA9             0517*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041CA9 2A DD 1B 04 0518*       ld hl,(bufferId0)
041CAD D5          0519*       push de ; chunksize
041CAE C1          0520*       pop bc
041CAF 11 00 E0 B7 0521*       ld de,filedata
041CB3 CD E3 1B 04 0522*       call vdu_load_buffer
041CB7             0523*   
041CB7             0524*   ; read the next block
041CB7 C3 8D 1C 04 0525*       jp @read_file
041CBB             0526*   
041CBB             0527*   ; close the file
041CBB             0528*   @close_file:
041CBB 3A C4 1C 04 0529*       ld a,(@filehandle)
041CBF             0530*       MOSCALL mos_fclose
041CBF 3E 0B       0001*M1 			LD	A, function
041CC1 5B CF       0002*M1 			RST.LIL	08h
041CC3 C9          0531*       ret ; vdu_load_buffer_from_file
041CC4             0532*   
041CC4 00          0533*   @filehandle: db 0 ; file handle
041CC5 00 00 00    0534*   @fil: dl 0 ; pointer to FIL struct
041CC8             0535*   
041CC8 00 00 00    0536*   @chunkpointer: dl 0 ; pointer to current chunk
041CCB             0537*   
041CCB             0538*   ; File information structure (FILINFO)
041CCB             0539*   @filinfo:
041CCB 00 00 00 00 0540*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041CCF 00 00       0541*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041CD1 00 00       0542*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041CD3 00          0543*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041CD4 00 00 00 00 0544*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041CE1 00 00 00 00 0545*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041DE1             0039        include "vdu_fonts.inc"
041DE1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041E00             0002*   ; select font
041E00             0003*   ; inputs: hl = bufferId, a = font flags
041E00             0004*   ; Flags:
041E00             0005*   ; Bit	Description
041E00             0006*   ; 0	Adjust cursor position to ensure text baseline is aligned
041E00             0007*   ;   0: Do not adjust cursor position (best for changing font on a new line)
041E00             0008*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
041E00             0009*   ; 1-7	Reserved for future use
041E00             0010*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041E00             0011*   vdu_font_select:
041E00 22 17 1E 04 0012*       ld (@bufferId),hl
041E04 32 19 1E 04 0013*       ld (@flags),a
041E08 21 13 1E 04 0014*       ld hl,@cmd
041E0C 01 07 00 00 0015*       ld bc,@end-@cmd
041E10 5B DF       0016*       rst.lil $18
041E12 C9          0017*       ret
041E13 17 00 95 00 0018*   @cmd: db 23, 0, 0x95, 0
041E17 00 00       0019*   @bufferId: dw 0x0000
041E19 00          0020*   @flags: db 0x00
041E1A             0021*   @end:
041E1A             0022*   
041E1A             0023*   ; create font from buffer
041E1A             0024*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041E1A             0025*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041E1A             0026*   vdu_font_create:
041E1A 22 3F 1E 04 0027*       ld (@bufferId),hl
041E1E ED 53 41 1E 0028*       ld (@width),de ; also loads height
       04          
041E23 32 44 1E 04 0029*       ld (@flags),a
041E27 7A          0030*       ld a,d ; height
041E28 32 43 1E 04 0031*       ld (@ascent),a ; ascent = height
041E2C             0032*   ; consolidate buffer
041E2C CD 3B 1C 04 0033*       call vdu_consolidate_buffer
041E30             0034*   ; create font
041E30 21 3B 1E 04 0035*       ld hl,@cmd
041E34 01 0A 00 00 0036*       ld bc,@end-@cmd
041E38 5B DF       0037*       rst.lil $18
041E3A C9          0038*       ret
041E3B 17 00 95 01 0039*   @cmd: db 23, 0, 0x95, 1
041E3F 00 00       0040*   @bufferId: dw 0x0000
041E41 00          0041*   @width: db 0x00
041E42 00          0042*   @height: db 0x00
041E43 00          0043*   @ascent: db 0x00
041E44 00          0044*   @flags: db 0x00
041E45             0045*   @end:
041E45             0046*   
041E45             0047*   ; set or adjust font property
041E45             0048*   ; inputs: hl = bufferId, a = field, de = value
041E45             0049*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041E45             0050*   vdu_font_property:
041E45 22 61 1E 04 0051*       ld (@bufferId),hl
041E49 32 63 1E 04 0052*       ld (@field),a
041E4D ED 53 64 1E 0053*       ld (@value),de
       04          
041E52 21 5D 1E 04 0054*       ld hl,@cmd
041E56 01 09 00 00 0055*       ld bc,@end-@cmd
041E5A 5B DF       0056*       rst.lil $18
041E5C C9          0057*       ret
041E5D 17 00 95 02 0058*   @cmd: db 23, 0, 0x95, 2
041E61 00 00       0059*   @bufferId: dw 0x0000
041E63 00          0060*   @field: db 0x00
041E64 00 00       0061*   @value: dw 0x0000
041E66 00          0062*   @end: db 0x00 ; padding
041E67             0063*   
041E67             0064*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041E67             0065*   
041E67             0066*   ; Clear/Delete font
041E67             0067*   ; inputs: hl = bufferId
041E67             0068*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041E67             0069*   vdu_font_clear:
041E67 22 7A 1E 04 0070*       ld (@bufferId),hl
041E6B 21 76 1E 04 0071*       ld hl,@cmd
041E6F 01 06 00 00 0072*       ld bc,@end-@cmd
041E73 5B DF       0073*       rst.lil $18
041E75 C9          0074*       ret
041E76 17 00 95 04 0075*   @cmd: db 23, 0, 0x95, 4
041E7A 00 00       0076*   @bufferId: dw 0x0000
041E7C 00          0077*   @end: db 0x00 ; padding
041E7D             0078*   
041E7D             0079*   ; Copy system font to buffer
041E7D             0080*   ; inputs: hl = bufferId
041E7D             0081*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041E7D             0082*   vdu_font_copy_system:
041E7D 22 90 1E 04 0083*       ld (@bufferId),hl
041E81 21 8C 1E 04 0084*       ld hl,@cmd
041E85 01 06 00 00 0085*       ld bc,@end-@cmd
041E89 5B DF       0086*       rst.lil $18
041E8B C9          0087*       ret
041E8C 17 00 95 05 0088*   @cmd: db 23, 0, 0x95, 5
041E90 00 00       0089*   @bufferId: dw 0x0000
041E92 00          0090*   @end: db 0x00 ; padding
041E93             0040        include "vdu_plot.inc"
041E93 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
041F00             0002*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F00             0003*   ; PLOT code 	(Decimal) 	Effect
041F00             0004*   ; &00-&07 	0-7 	Solid line, includes both ends
041F00             0005*   plot_sl_both: equ 0x00
041F00             0006*   
041F00             0007*   ; &08-&0F 	8-15 	Solid line, final point omitted
041F00             0008*   plot_sl_first: equ 0x08
041F00             0009*   
041F00             0010*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
041F00             0011*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
041F00             0012*   
041F00             0013*   ; &20-&27 	32-39 	Solid line, first point omitted
041F00             0014*   plot_sl_last: equ 0x20
041F00             0015*   
041F00             0016*   ; &28-&2F 	40-47 	Solid line, both points omitted
041F00             0017*   plot_sl_none: equ 0x28
041F00             0018*   
041F00             0019*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
041F00             0020*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
041F00             0021*   
041F00             0022*   ; &40-&47 	64-71 	Point plot
041F00             0023*   plot_pt: equ 0x40
041F00             0024*   
041F00             0025*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
041F00             0026*   plot_lf_lr_non_bg: equ 0x48
041F00             0027*   
041F00             0028*   ; &50-&57 	80-87 	Triangle fill
041F00             0029*   plot_tf: equ 0x50
041F00             0030*   
041F00             0031*   ; &58-&5F 	88-95 	Line fill right to background §§
041F00             0032*   plot_lf_r_bg: equ 0x58
041F00             0033*   
041F00             0034*   ; &60-&67 	96-103 	Rectangle fill
041F00             0035*   plot_rf: equ 0x60
041F00             0036*   
041F00             0037*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
041F00             0038*   plot_lf_lr_fg: equ 0x60
041F00             0039*   
041F00             0040*   ; &70-&77 	112-119 	Parallelogram fill
041F00             0041*   plot_pf: equ 0x70
041F00             0042*   
041F00             0043*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
041F00             0044*   plot_lf_r_non_fg: equ 0x78
041F00             0045*   
041F00             0046*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
041F00             0047*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
041F00             0048*   
041F00             0049*   ; &90-&97 	144-151 	Circle outline
041F00             0050*   plot_co: equ 0x90
041F00             0051*   
041F00             0052*   ; &98-&9F 	152-159 	Circle fill
041F00             0053*   plot_cf: equ 0x98
041F00             0054*   
041F00             0055*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
041F00             0056*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
041F00             0057*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
041F00             0058*   
041F00             0059*   ; &B8-&BF 	184-191 	Rectangle copy/move
041F00             0060*   plot_rcm: equ 0xB8
041F00             0061*   
041F00             0062*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
041F00             0063*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
041F00             0064*   ; &D0-&D7 	208-215 	Not defined
041F00             0065*   ; &D8-&DF 	216-223 	Not defined
041F00             0066*   ; &E0-&E7 	224-231 	Not defined
041F00             0067*   
041F00             0068*   ; &E8-&EF 	232-239 	Bitmap plot §
041F00             0069*   plot_bmp: equ 0xE8
041F00             0070*   
041F00             0071*   ; &F0-&F7 	240-247 	Not defined
041F00             0072*   ; &F8-&FF 	248-255 	Not defined
041F00             0073*   
041F00             0074*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
041F00             0075*   ; Agon Console8 VDP 2.2.0
041F00             0076*   
041F00             0077*   ; Within each group of eight plot codes, the effects are as follows:
041F00             0078*   ; Plot code 	Effect
041F00             0079*   ; 0 	Move relative
041F00             0080*   mv_rel: equ 0
041F00             0081*   
041F00             0082*   ; 1 	Plot relative in current foreground colour
041F00             0083*   dr_rel_fg: equ 1
041F00             0084*   
041F00             0085*   ; 2 	Not supported (Plot relative in logical inverse colour)
041F00             0086*   ; 3 	Plot relative in current background colour
041F00             0087*   dr_rel_bg: equ 3
041F00             0088*   
041F00             0089*   ; 4 	Move absolute
041F00             0090*   mv_abs: equ 4
041F00             0091*   
041F00             0092*   ; 5 	Plot absolute in current foreground colour
041F00             0093*   dr_abs_fg: equ 5
041F00             0094*   
041F00             0095*   ; 6 	Not supported (Plot absolute in logical inverse colour)
041F00             0096*   ; 7 	Plot absolute in current background colour
041F00             0097*   dr_abs_bg: equ 7
041F00             0098*   
041F00             0099*   ; Codes 0-3 use the position data provided as part of the command
041F00             0100*   ; as a relative position, adding the position given to the current
041F00             0101*   ; graphical cursor position. Codes 4-7 use the position data provided
041F00             0102*   ; as part of the command as an absolute position, setting the current
041F00             0103*   ; graphical cursor position to the position given.
041F00             0104*   
041F00             0105*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
041F00             0106*   ; current pixel colour. These operations cannot currently be supported
041F00             0107*   ; by the graphics system the Agon VDP uses, so these codes are not
041F00             0108*   ; supported. Support for these codes may be added in a future version
041F00             0109*   ; of the VDP firmware.
041F00             0110*   
041F00             0111*   ; 16 colour palette constants
041F00             0112*   c_black: equ 0
041F00             0113*   c_red_dk: equ 1
041F00             0114*   c_green_dk: equ 2
041F00             0115*   c_yellow_dk: equ 3
041F00             0116*   c_blue_dk: equ 4
041F00             0117*   c_magenta_dk: equ 5
041F00             0118*   c_cyan_dk: equ 6
041F00             0119*   c_grey: equ 7
041F00             0120*   c_grey_dk: equ 8
041F00             0121*   c_red: equ 9
041F00             0122*   c_green: equ 10
041F00             0123*   c_yellow: equ 11
041F00             0124*   c_blue: equ 12
041F00             0125*   c_magenta: equ 13
041F00             0126*   c_cyan: equ 14
041F00             0127*   c_white: equ 15
041F00             0128*   
041F00             0129*   ; VDU 25, mode, x; y;: PLOT command
041F00             0130*   ; inputs: a=mode, bc=x0, de=y0
041F00             0131*   vdu_plot:
041F00 32 1A 1F 04 0132*       ld (@mode),a
041F04 ED 43 1B 1F 0133*       ld (@x0),bc
       04          
041F09 ED 53 1D 1F 0134*       ld (@y0),de
       04          
041F0E 21 19 1F 04 0135*   	ld hl,@cmd
041F12 01 06 00 00 0136*   	ld bc,@end-@cmd
041F16 5B DF       0137*   	rst.lil $18
041F18 C9          0138*   	ret
041F19 19          0139*   @cmd:   db 25
041F1A 00          0140*   @mode:  db 0
041F1B 00 00       0141*   @x0: 	dw 0
041F1D 00 00       0142*   @y0: 	dw 0
041F1F 00          0143*   @end:   db 0 ; extra byte to soak up deu
041F20             0144*   
041F20             0145*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F20             0146*   ; &E8-&EF 	232-239 	Bitmap plot §
041F20             0147*   ; VDU 25, mode, x; y;: PLOT command
041F20             0148*   ; inputs: bc=x0, de=y0
041F20             0149*   ; prerequisites: vdu_buff_select
041F20             0150*   vdu_plot_bmp:
041F20 ED 43 37 1F 0151*       ld (@x0),bc
       04          
041F25 ED 53 39 1F 0152*       ld (@y0),de
       04          
041F2A 21 35 1F 04 0153*   	ld hl,@cmd
041F2E 01 06 00 00 0154*   	ld bc,@end-@cmd
041F32 5B DF       0155*   	rst.lil $18
041F34 C9          0156*   	ret
041F35 19          0157*   @cmd:   db 25
041F36 ED          0158*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041F37 00 00       0159*   @x0: 	dw 0x0000
041F39 00 00       0160*   @y0: 	dw 0x0000
041F3B 00          0161*   @end:   db 0x00 ; padding
041F3C             0162*   
041F3C             0163*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F3C             0164*   ; &E8-&EF 	232-239 	Bitmap plot §
041F3C             0165*   ; VDU 25, mode, x; y;: PLOT command
041F3C             0166*   ; inputs: bc=x0, de=y0
041F3C             0167*   ; USING 16.8 FIXED POINT COORDINATES
041F3C             0168*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041F3C             0169*   ;   the fractional portiion of the inputs are truncated
041F3C             0170*   ;   leaving only the 16-bit integer portion
041F3C             0171*   ; prerequisites: vdu_buff_select
041F3C             0172*   vdu_plot_bmp168:
041F3C             0173*   ; populate in the reverse of normal to keep the
041F3C             0174*   ; inputs from stomping on each other
041F3C ED 53 5A 1F 0175*       ld (@y0-1),de
       04          
041F41 ED 43 58 1F 0176*       ld (@x0-1),bc
       04          
041F46 3E ED       0177*       ld a,plot_bmp+dr_abs_fg ; 0xED
041F48 32 58 1F 04 0178*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
041F4C 21 57 1F 04 0179*   	ld hl,@cmd
041F50 01 06 00 00 0180*   	ld bc,@end-@cmd
041F54 5B DF       0181*   	rst.lil $18
041F56 C9          0182*   	ret
041F57 19          0183*   @cmd:   db 25
041F58 ED          0184*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041F59 00 00       0185*   @x0: 	dw 0x0000
041F5B 00 00       0186*   @y0: 	dw 0x0000
041F5D             0187*   @end:  ; no padding required b/c we shifted de right
041F5D             0188*   
041F5D             0189*   ; draw a filled rectangle
041F5D             0190*   vdu_plot_rf:
041F5D ED 43 84 1F 0191*       ld (@x0),bc
       04          
041F62 ED 53 86 1F 0192*       ld (@y0),de
       04          
041F67 DD 22 8A 1F 0193*       ld (@x1),ix
       04          
041F6C FD 22 8C 1F 0194*       ld (@y1),iy
       04          
041F71 3E 19       0195*       ld a,25 ; we have to reload the 2nd plot command
041F73 32 88 1F 04 0196*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041F77 21 82 1F 04 0197*   	ld hl,@cmd0
041F7B 01 0C 00 00 0198*   	ld bc,@end-@cmd0
041F7F 5B DF       0199*   	rst.lil $18
041F81 C9          0200*       ret
041F82 19          0201*   @cmd0:  db 25 ; plot
041F83 04          0202*   @arg0:  db plot_sl_both+mv_abs
041F84 00 00       0203*   @x0:    dw 0x0000
041F86 00 00       0204*   @y0:    dw 0x0000
041F88 19          0205*   @cmd1:  db 25 ; plot
041F89 65          0206*   @arg1:  db plot_rf+dr_abs_fg
041F8A 00 00       0207*   @x1:    dw 0x0000
041F8C 00 00       0208*   @y1:    dw 0x0000
041F8E 00          0209*   @end:   db 0x00 ; padding
041F8F             0210*   
041F8F             0211*   ; draw a filled circle
041F8F             0212*   vdu_plot_cf:
041F8F ED 43 B6 1F 0213*       ld (@x0),bc
       04          
041F94 ED 53 B8 1F 0214*       ld (@y0),de
       04          
041F99 DD 22 BC 1F 0215*       ld (@x1),ix
       04          
041F9E FD 22 BE 1F 0216*       ld (@y1),iy
       04          
041FA3 3E 19       0217*       ld a,25 ; we have to reload the 2nd plot command
041FA5 32 BA 1F 04 0218*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041FA9 21 B4 1F 04 0219*   	ld hl,@cmd0
041FAD 01 0C 00 00 0220*   	ld bc,@end-@cmd0
041FB1 5B DF       0221*   	rst.lil $18
041FB3 C9          0222*       ret
041FB4 19          0223*   @cmd0:  db 25 ; plot
041FB5 04          0224*   @arg0:  db plot_sl_both+mv_abs
041FB6 00 00       0225*   @x0:    dw 0x0000
041FB8 00 00       0226*   @y0:    dw 0x0000
041FBA 19          0227*   @cmd1:  db 25 ; plot
041FBB 9D          0228*   @arg1:  db plot_cf+dr_abs_fg
041FBC 00 00       0229*   @x1:    dw 0x0000
041FBE 00 00       0230*   @y1:    dw 0x0000
041FC0 00          0231*   @end:   db 0x00 ; padding
041FC1             0041        include "vdu_sprites.inc"
041FC1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042000             0002*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
042000             0003*   ; the VDP can support up to 256 sprites. They must be defined
042000             0004*   ; contiguously, and so the first sprite is sprite 0.
042000             0005*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
042000             0006*   ; Once a selection of sprites have been defined, you can activate
042000             0007*   ; them using the VDU 23, 27, 7, n command, where n is the number
042000             0008*   ; of sprites to activate. This will activate the first n sprites,
042000             0009*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
042000             0010*   
042000             0011*   ; A single sprite can have multiple "frames", referring to
042000             0012*   ; different bitmaps.
042000             0013*   ; (These bitmaps do not need to be the same size.)
042000             0014*   ; This allows a sprite to include an animation sequence,
042000             0015*   ; which can be stepped through one frame at a time, or picked
042000             0016*   ; in any order.
042000             0017*   
042000             0018*   ; Any format of bitmap can be used as a sprite frame. It should
042000             0019*   ; be noted however that "native" format bitmaps are not
042000             0020*   ; recommended for use as sprite frames, as they cannot get
042000             0021*   ; erased from the screen. (As noted above, the "native" bitmap
042000             0022*   ; format is not really intended for general use.) This is part
042000             0023*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
042000             0024*   ; screen are now stored in RGBA2222 format.
042000             0025*   
042000             0026*   ; An "active" sprite can be hidden, so it will stop being drawn,
042000             0027*   ; and then later shown again.
042000             0028*   
042000             0029*   ; Moving sprites around the screen is done by changing the
042000             0030*   ; position of the sprite. This can be done either by setting
042000             0031*   ; the absolute position of the sprite, or by moving the sprite
042000             0032*   ; by a given number of pixels. (Sprites are positioned using
042000             0033*   ; pixel coordinates, and not by the logical OS coordinate system.)
042000             0034*   ; In the current sprite system, sprites will not update their
042000             0035*   ; position on-screen until either another drawing operation is
042000             0036*   ; performed or an explicit VDU 23, 27, 15 command is performed.
042000             0037*   
042000             0038*   ; VDU 23, 27, 4, n: Select sprite n
042000             0039*   ; inputs: a is the 8-bit sprite id
042000             0040*   vdu_sprite_select:
042000 32 12 20 04 0041*       ld (@sprite),a
042004 21 0F 20 04 0042*       ld hl,@cmd
042008 01 04 00 00 0043*       ld bc,@end-@cmd
04200C 5B DF       0044*       rst.lil $18
04200E C9          0045*       ret
04200F 17 1B 04    0046*   @cmd:    db 23,27,4
042012 00          0047*   @sprite: db 0x00
042013             0048*   @end:
042013             0049*   
042013             0050*   ; VDU 23, 27, 5: Clear frames in current sprite
042013             0051*   ; inputs: none
042013             0052*   ; prerequisites: vdu_sprite_select
042013             0053*   vdu_sprite_clear_frames:
042013 21 1E 20 04 0054*       ld hl,@cmd
042017 01 03 00 00 0055*       ld bc,@end-@cmd
04201B 5B DF       0056*       rst.lil $18
04201D C9          0057*       ret
04201E 17 1B 05    0058*   @cmd: db 23,27,5
042021             0059*   @end:
042021             0060*   
042021             0061*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
042021             0062*   ; inputs: a is the 8-bit bitmap number
042021             0063*   ; prerequisites: vdu_sprite_select
042021             0064*   vdu_sprite_add_bmp:
042021 32 33 20 04 0065*       ld (@bmp),a
042025 21 30 20 04 0066*       ld hl,@cmd
042029 01 04 00 00 0067*       ld bc,@end-@cmd
04202D 5B DF       0068*       rst.lil $18
04202F C9          0069*       ret
042030 17 1B 06    0070*   @cmd: db 23,27,6
042033 00          0071*   @bmp: db 0x00
042034             0072*   @end:
042034             0073*   
042034             0074*   ; VDU 23, 27, 7, n: Activate n sprites
042034             0075*   ; inputs: a is the number of sprites to activate
042034             0076*   ; prerequisites: each sprite activated must have at least one frame attached to it
042034             0077*   vdu_sprite_activate:
042034 32 46 20 04 0078*       ld (@num),a
042038 21 43 20 04 0079*       ld hl,@cmd
04203C 01 04 00 00 0080*       ld bc,@end-@cmd
042040 5B DF       0081*       rst.lil $18
042042 C9          0082*       ret
042043 17 1B 07    0083*   @cmd: db 23,27,7
042046 00          0084*   @num: db 0x00
042047             0085*   @end:
042047             0086*   
042047             0087*   ; VDU 23, 27, 8: Select next frame of current sprite
042047             0088*   ; inputs: none
042047             0089*   ; prerequisites: vdu_sprite_select
042047             0090*   vdu_sprite_next_frame:
042047 21 52 20 04 0091*       ld hl,@cmd
04204B 01 03 00 00 0092*       ld bc,@end-@cmd
04204F 5B DF       0093*       rst.lil $18
042051 C9          0094*       ret
042052 17 1B 08    0095*   @cmd: db 23,27,8
042055             0096*   @end:
042055             0097*   
042055             0098*   ; VDU 23, 27, 9: Select previous frame of current sprite
042055             0099*   ; inputs: none
042055             0100*   ; prerequisites: vdu_sprite_select
042055             0101*   vdu_sprite_prev_frame:
042055 21 60 20 04 0102*       ld hl,@cmd
042059 01 03 00 00 0103*       ld bc,@end-@cmd
04205D 5B DF       0104*       rst.lil $18
04205F C9          0105*       ret
042060 17 1B 09    0106*   @cmd: db 23,27,9
042063             0107*   @end:
042063             0108*   
042063             0109*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
042063             0110*   ; inputs: a is frame number to select
042063             0111*   ; prerequisites: vdu_sprite_select
042063             0112*   vdu_sprite_select_frame:
042063 32 75 20 04 0113*       ld (@frame),a
042067 21 72 20 04 0114*       ld hl,@cmd
04206B 01 04 00 00 0115*       ld bc,@end-@cmd
04206F 5B DF       0116*       rst.lil $18
042071 C9          0117*       ret
042072 17 1B 0A    0118*   @cmd:    db 23,27,10
042075 00          0119*   @frame:  db 0x00
042076             0120*   @end:
042076             0121*   
042076             0122*   ; VDU 23, 27, 11: Show current sprite
042076             0123*   ; inputs: none
042076             0124*   ; prerequisites: vdu_sprite_select
042076             0125*   vdu_sprite_show:
042076 21 81 20 04 0126*       ld hl,@cmd
04207A 01 03 00 00 0127*       ld bc,@end-@cmd
04207E 5B DF       0128*       rst.lil $18
042080 C9          0129*       ret
042081 17 1B 0B    0130*   @cmd: db 23,27,11
042084             0131*   @end:
042084             0132*   
042084             0133*   ; VDU 23, 27, 12: Hide current sprite
042084             0134*   ; inputs: none
042084             0135*   ; prerequisites: vdu_sprite_select
042084             0136*   vdu_sprite_hide:
042084 21 8F 20 04 0137*       ld hl,@cmd
042088 01 03 00 00 0138*       ld bc,@end-@cmd
04208C 5B DF       0139*       rst.lil $18
04208E C9          0140*       ret
04208F 17 1B 0C    0141*   @cmd: db 23,27,12
042092             0142*   @end:
042092             0143*   
042092             0144*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042092             0145*   ; inputs: bc is x coordinate, de is y coordinate
042092             0146*   ; prerequisites: vdu_sprite_select
042092             0147*   vdu_sprite_move_abs:
042092 ED 43 AA 20 0148*       ld (@xpos),bc
       04          
042097 ED 53 AC 20 0149*       ld (@ypos),de
       04          
04209C 21 A7 20 04 0150*       ld hl,@cmd
0420A0 01 07 00 00 0151*       ld bc,@end-@cmd
0420A4 5B DF       0152*       rst.lil $18
0420A6 C9          0153*       ret
0420A7 17 1B 0D    0154*   @cmd:  db 23,27,13
0420AA 00 00       0155*   @xpos: dw 0x0000
0420AC 00 00       0156*   @ypos: dw 0x0000
0420AE 00          0157*   @end:  db 0x00 ; padding
0420AF             0158*   
0420AF             0159*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0420AF             0160*   ; inputs: bc is x coordinate, de is y coordinate
0420AF             0161*   ; prerequisites: vdu_sprite_select
0420AF             0162*   vdu_sprite_move_rel:
0420AF ED 43 C7 20 0163*       ld (@dx),bc
       04          
0420B4 ED 53 C9 20 0164*       ld (@dy),de
       04          
0420B9 21 C4 20 04 0165*       ld hl,@cmd
0420BD 01 07 00 00 0166*       ld bc,@end-@cmd
0420C1 5B DF       0167*       rst.lil $18
0420C3 C9          0168*       ret
0420C4 17 1B 0E    0169*   @cmd: db 23,27,14
0420C7 00 00       0170*   @dx:  dw 0x0000
0420C9 00 00       0171*   @dy:  dw 0x0000
0420CB 00          0172*   @end: db 0x00 ; padding
0420CC             0173*   
0420CC             0174*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
0420CC             0175*   ; USING 16.8 FIXED POINT COORDINATES
0420CC             0176*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
0420CC             0177*   ;   the fractional portiion of the inputs are truncated
0420CC             0178*   ;   leaving only the 16-bit integer portion
0420CC             0179*   ; prerequisites: vdu_sprite_select
0420CC             0180*   vdu_sprite_move_abs168:
0420CC             0181*   ; offset inputs by the gfx origin
0420CC             0182*   ; y coordinate
0420CC 21 00 00 00 0183*       ld hl,origin_top*256
0420D0 19          0184*       add hl,de
0420D1 22 F3 20 04 0185*       ld (@ypos-1),hl
0420D5             0186*   ; x coordinate
0420D5 21 00 80 00 0187*       ld hl,origin_left*256
0420D9 09          0188*       add hl,bc
0420DA 22 F1 20 04 0189*       ld (@xpos-1),hl
0420DE             0190*   ; prepare vdu command
0420DE 3E 0D       0191*       ld a,13       ; restore the final byte of the command
0420E0 32 F1 20 04 0192*       ld (@cmd+2),a ; string that got stomped on by bcu
0420E4 21 EF 20 04 0193*       ld hl,@cmd
0420E8 01 07 00 00 0194*       ld bc,@end-@cmd
0420EC 5B DF       0195*       rst.lil $18
0420EE C9          0196*       ret
0420EF 17 1B 0D    0197*   @cmd:  db 23,27,13
0420F2 00 00       0198*   @xpos: dw 0x0000
0420F4 00 00       0199*   @ypos: dw 0x0000
0420F6             0200*   @end:  ; no padding required b/c we shifted de right
0420F6             0201*   
0420F6             0202*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0420F6             0203*   ; USING 16.8 FIXED POINT COORDINATES
0420F6             0204*   ; inputs: ub.c is dx, ud.e is dy
0420F6             0205*   ;   the fractional portiion of the inputs are truncated
0420F6             0206*   ;   leaving only the 16-bit integer portion
0420F6             0207*   ; prerequisites: vdu_sprite_select
0420F6             0208*   vdu_sprite_move_rel168:
0420F6             0209*   ; populate in the reverse of normal to keep the
0420F6             0210*   ; inputs from stomping on each other
0420F6 ED 53 15 21 0211*       ld (@dy-1),de
       04          
0420FB ED 43 13 21 0212*       ld (@dx-1),bc
       04          
042100 3E 0E       0213*       ld a,14       ; restore the final byte of the command
042102 32 13 21 04 0214*       ld (@cmd+2),a ; string that got stomped on by bcu
042106 21 11 21 04 0215*       ld hl,@cmd
04210A 01 07 00 00 0216*       ld bc,@end-@cmd
04210E 5B DF       0217*       rst.lil $18
042110 C9          0218*       ret
042111 17 1B 0E    0219*   @cmd:  db 23,27,14
042114 00 00       0220*   @dx: dw 0x0000
042116 00 00       0221*   @dy: dw 0x0000
042118             0222*   @end:  ; no padding required b/c we shifted de right
042118             0223*   
042118             0224*   ; VDU 23, 27, 15: Update the sprites in the GPU
042118             0225*   ; inputs: none
042118             0226*   vdu_sprite_update:
042118 21 23 21 04 0227*       ld hl,@cmd
04211C 01 03 00 00 0228*       ld bc,@end-@cmd
042120 5B DF       0229*       rst.lil $18
042122 C9          0230*       ret
042123 17 1B 0F    0231*   @cmd: db 23,27,15
042126             0232*   @end:
042126             0233*   
042126             0234*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042126             0235*   ; inputs: none
042126             0236*   vdu_sprite_bmp_reset:
042126 21 31 21 04 0237*       ld hl,@cmd
04212A 01 03 00 00 0238*       ld bc,@end-@cmd
04212E 5B DF       0239*       rst.lil $18
042130 C9          0240*       ret
042131 17 1B 10    0241*   @cmd: db 23,27,16
042134             0242*   @end:
042134             0243*   
042134             0244*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042134             0245*   ; inputs: none
042134             0246*   vdu_sprite_reset:
042134 21 3F 21 04 0247*       ld hl,@cmd
042138 01 03 00 00 0248*       ld bc,@end-@cmd
04213C 5B DF       0249*       rst.lil $18
04213E C9          0250*       ret
04213F 17 1B 11    0251*   @cmd: db 23,27,17
042142             0252*   @end:
042142             0253*   
042142             0254*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042142             0255*   ; inputs: a is the GCOL paint mode
042142             0256*   ; prerequisites: vdu_sprite_select
042142             0257*   vdu_sprite_set_gcol:
042142 32 54 21 04 0258*       ld (@mode),a
042146 21 51 21 04 0259*       ld hl,@cmd
04214A 01 04 00 00 0260*       ld bc,@end-@cmd
04214E 5B DF       0261*       rst.lil $18
042150 C9          0262*       ret
042151 17 1B 12    0263*   @cmd:  db 23,27,18
042154 00          0264*   @mode: db 0x00
042155             0265*   @end:
042155             0266*   
042155             0267*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
042155             0268*   ; inputs: hl=bufferId
042155             0269*   ; prerequisites: vdu_sprite_select
042155             0270*   vdu_sprite_add_buff:
042155 22 67 21 04 0271*       ld (@bufferId),hl
042159 21 64 21 04 0272*       ld hl,@cmd
04215D 01 05 00 00 0273*       ld bc,@end-@cmd
042161 5B DF       0274*       rst.lil $18
042163 C9          0275*       ret
042164 17 1B 26    0276*   @cmd:      db 23,27,0x26
042167 00 00       0277*   @bufferId: dw 0x0000
042169 00          0278*   @end:      db 0x00 ; padding
04216A             0042    
04216A             0043    ; APPLICATION INCLUDES
04216A             0044        include "ascii.inc"
04216A             0001*   loading_ui:
04216A 57 45 4C 43 0002*       db "WELCOME TO ...",13,10
       4F 4D 45 20 
       54 4F 20 2E 
       2E 2E 0D 0A 
04217A 0D 0A       0003*       db 13,10
04217C 20 20 20 20 0004*       db 32,32,32,32,32,32,32,32,95,95,32,32,32,32,95,95,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,95,13,10
       20 20 20 20 
       5F 5F 20 20 
       20 20 5F 5F 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 5F 5F 0D 
       0A          
0421A1 5F 5F 5F 5F 0005*       db 95,95,95,95,95,32,95,47,32,32,124,95,95,47,32,32,124,95,95,95,95,95,95,32,32,32,32,95,95,95,95,32,124,32,32,124,32,95,95,13,10
       5F 20 5F 2F 
       20 20 7C 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 20 5F 
       5F 5F 5F 20 
       7C 20 20 7C 
       20 5F 5F 0D 
       0A          
0421CA 5C 5F 5F 20 0006*       db 92,95,95,32,32,92,32,32,32,95,95,92,32,32,32,95,95,92,95,95,32,32,92,32,95,47,32,95,95,95,92,124,32,32,124,47,32,47,13,10
       20 5C 20 20 
       20 5F 5F 5C 
       20 20 20 5F 
       5F 5C 5F 5F 
       20 20 5C 20 
       5F 2F 20 5F 
       5F 5F 5C 7C 
       20 20 7C 2F 
       20 2F 0D 0A 
0421F2 20 2F 20 5F 0007*       db 32,47,32,95,95,32,92,124,32,32,124,32,32,124,32,32,124,32,32,47,32,95,95,32,92,32,32,92,95,95,95,124,32,32,32,32,60,13,10
       5F 20 5C 7C 
       20 20 7C 20 
       20 7C 20 20 
       7C 20 20 2F 
       20 5F 5F 20 
       5C 20 20 5C 
       5F 5F 5F 7C 
       20 20 20 20 
       3C 0D 0A    
042219 28 5F 5F 5F 0008*       db 40,95,95,95,95,32,32,47,95,95,124,32,32,124,95,95,124,32,40,95,95,95,95,32,32,47,92,95,95,95,32,32,62,95,95,124,95,32,92,13,10
       5F 20 20 2F 
       5F 5F 7C 20 
       20 7C 5F 5F 
       7C 20 28 5F 
       5F 5F 5F 20 
       20 2F 5C 5F 
       5F 5F 20 20 
       3E 5F 5F 7C 
       5F 20 5C 0D 
       0A          
042242 20 20 20 20 0009*       db 32,32,32,32,32,92,47,32,95,95,95,95,95,32,32,32,32,95,95,32,32,46,95,95,47,32,32,32,32,32,92,47,32,32,32,32,32,92,47,13,10
       20 5C 2F 20 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 20 
       20 2E 5F 5F 
       2F 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 5C 2F 0D 
       0A          
04226B 20 20 5F 5F 0010*       db 32,32,95,95,95,95,95,47,32,95,95,95,95,92,32,95,47,32,32,124,95,124,32,32,124,95,95,32,32,32,95,95,95,95,13,10
       5F 5F 5F 2F 
       20 5F 5F 5F 
       5F 5C 20 5F 
       2F 20 20 7C 
       5F 7C 20 20 
       7C 5F 5F 20 
       20 20 5F 5F 
       5F 5F 0D 0A 
04228F 20 2F 20 20 0011*       db 32,47,32,32,95,32,92,32,32,32,95,95,92,32,32,92,32,32,32,95,95,92,32,32,124,32,32,92,95,47,32,95,95,32,92,13,10
       5F 20 5C 20 
       20 20 5F 5F 
       5C 20 20 5C 
       20 20 20 5F 
       5F 5C 20 20 
       7C 20 20 5C 
       5F 2F 20 5F 
       5F 20 5C 0D 
       0A          
0422B4 28 20 20 3C 0012*       db 40,32,32,60,95,62,32,41,32,32,124,32,32,32,32,32,124,32,32,124,32,124,32,32,32,89,32,32,92,32,32,95,95,95,47,13,10
       5F 3E 20 29 
       20 20 7C 20 
       20 20 20 20 
       7C 20 20 7C 
       20 7C 20 20 
       20 59 20 20 
       5C 20 20 5F 
       5F 5F 2F 0D 
       0A          
0422D9 20 5C 5F 5F 0013*       db 32,92,95,95,95,95,47,124,95,95,124,32,32,32,32,32,124,95,95,124,32,124,95,95,95,124,32,32,47,92,95,95,95,32,32,62,13,10
       5F 5F 2F 7C 
       5F 5F 7C 20 
       20 20 20 20 
       7C 5F 5F 7C 
       20 7C 5F 5F 
       5F 7C 20 20 
       2F 5C 5F 5F 
       5F 20 20 3E 
       0D 0A       
0422FF 5F 5F 5F 5F 0014*       db 95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,32,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
04233D 5C 5F 5F 5F 0015*       db 92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,13,10
       5F 5F 5F 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       0D 0A       
04237B 20 7C 20 20 0016*       db 32,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       20 20 20 5F 
       5F 5F 2F 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 0D 
       0A          
0423B8 20 7C 20 20 0017*       db 32,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       20 20 7C 20 
       20 20 7C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       0D 0A       
0423F6 20 7C 5F 5F 0018*       db 32,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 7C 20 
       20 20 7C 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       0D 0A       
042434 20 5F 5F 5F 0019*       db 32,95,95,95,95,95,95,95,32,32,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,92,47,95,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 0D 0A 
04247C 20 5C 20 20 0020*       db 32,92,32,32,32,32,32,32,92,32,124,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,47,32,32,32,95,95,95,95,95,47,13,10
       20 20 20 20 
       5C 20 7C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       2F 20 20 20 
       5F 5F 5F 5F 
       5F 2F 0D 0A 
0424C4 20 2F 20 20 0021*       db 32,47,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,32,92,95,95,95,95,95,32,32,92,13,10
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 20 
       5C 5F 5F 5F 
       5F 5F 20 20 
       5C 0D 0A    
04250B 2F 20 20 20 0022*       db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 0D 0A 
042553 5C 5F 5F 5F 0023*       db 92,95,95,95,95,124,95,95,32,32,47,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 0D 0A 
04259B 20 20 20 20 0024*       db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 5C 
       2F 0D 0A    
0425E2 4C 4F 41 44 0025*       db "LOADING UI ...",0
       49 4E 47 20 
       55 49 20 2E 
       2E 2E 00    
0425F1             0045        include "collisions.inc"
0425F1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042600             0002*   ; ====== COLLISION DETECTION ======
042600             0003*   ; --- constants ---
042600             0004*   ; sprite_collisions flags
042600             0005*   collides_with_player: equ %00000001
042600             0006*   collides_with_laser: equ %00000010
042600             0007*   sprite_alive: equ 6 ; set when sprite is alive
042600             0008*   sprite_just_died: equ 7 ; set when sprite just died
042600             0009*   tile_just_died: equ 7 ; set when tile just died
042600             0010*   
042600             0011*   collide_top: equ %00001000
042600             0012*   collide_bottom: equ %00000100
042600             0013*   collide_left: equ %00000010
042600             0014*   collide_right: equ %00000001
042600             0015*   
042600             0016*   ; this routine detects collisions between two collidable objects,
042600             0017*   ; which can include sprites, active tiles, or any screen coordinate
042600             0018*   ; which has been set up with a sprite table structure that includes dim_x
042600             0019*   ; representing the radius of the collidable object
042600             0020*   ; inputs: ix and iy point to the colliding objects' sprite table records
042600             0021*   ; outputs: uh.l = distance - sum of radii
042600             0022*   ;          zero flag set or sign flag negative if collision detected
042600             0023*   ;          dx168 and dy168 are also populated with the signed displacements
042600             0024*   ; destroys: everything except indexes
042600             0025*   check_collision:
042600             0026*   ; compute dx = x1-x0
042600 DD 27 01    0027*       ld hl,(ix+sprite_x)
042603 FD 17 01    0028*       ld de,(iy+sprite_x)
042606 AF          0029*       xor a ; clear carry
042607 ED 52       0030*       sbc hl,de
042609 22 37 0C 04 0031*       ld (dx168),hl ; dx to scratch
04260D             0032*   ; compute dy = y1-y0
04260D DD 27 04    0033*       ld hl,(ix+sprite_y)
042610 FD 17 04    0034*       ld de,(iy+sprite_y)
042613 AF          0035*       xor a ; clear carry
042614 ED 52       0036*       sbc hl,de ; hl = dy
042616 22 3D 0C 04 0037*       ld (dy168),hl ; dy to scratch
04261A             0038*   ; compute euclidean distance between centers
04261A CD 43 0C 04 0039*       call distance168 ; uh.l = distance
04261E             0040*   ; check for overlap by summing half the radii
04261E DD 7E 1E    0041*       ld a,(ix+sprite_dim_x)
042621 CB 3F       0042*       srl a ; divide by 2
042623 FD 5E 1E    0043*       ld e,(iy+sprite_dim_x)
042626 CB 3B       0044*       srl e ; divide by 2
042628 83          0045*       add a,e
042629 11 00 00 00 0046*       ld de,0 ; clear deu and e
04262D 57          0047*       ld d,a ; ud.e = sum of radii
04262E B7          0048*       or a ; clear carry
04262F ED 52       0049*       sbc hl,de ; uh.l = distance - sum of radii
042631 C9          0050*       ret
042632             0051*   ; end check_collision
042632             0046        include "enemies.inc"
042632 04          0001*   max_enemy_sprites: db 4
042633             0002*   
042633             0003*   move_enemies:
042633             0004*   ; are there any active enemies or explosions?
042633 3A 42 69 04 0005*       ld a,(table_active_sprites)
042637 A7          0006*       and a ; will be zero if no alive enemies or explosions
042638 C2 3D 26 04 0007*       jp nz,@they_live
04263C             0008*       ; DEPRECATED: though may be used in the future
04263C             0009*       ; ld hl,enemies_dead
04263C             0010*       ; ld (enemies_state),hl
04263C             0011*       ; END DEPRECATED
04263C C9          0012*       ret
04263D             0013*   @they_live:
04263D             0014*   ; initialize pointers and loop counter
04263D FD 21 72 6F 0015*       ld iy,table_base ; set iy to first record in table
       04          
042642 06 08       0016*       ld b,table_num_records ; loop counter
042644             0017*   @move_loop:
042644 FD 22 3F 69 0018*       ld (table_pointer),iy ; update table pointer
       04          
042649 C5          0019*       push bc ; backup loop counter
04264A             0020*   ; check top bit of sprite_type to see if sprite is just spawned
04264A FD 7E 16    0021*       ld a,(iy+sprite_type)
04264D CB 7F       0022*       bit 7,a
04264F C2 8E 26 04 0023*       jp nz,@next_record ; if just spawned, skip to next record
042653             0024*   ; check sprite_type to see if sprite is active
042653 A7          0025*       and a ; if zero, sprite is dead
042654 CA 8E 26 04 0026*       jp z,@next_record ; ... and we skip to next record
042658             0027*   ; otherwise we prepare to move the sprite
042658 FD 27 1A    0028*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
04265B             0029*       callHL
04265B 01 61 26 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
04265F C5          0002*M1     push bc ; which constitutes the return address
042660 E9          0003*M1     jp (hl) ; Jump to the address in HL
042661             0004*M1 @@:
042661             0030*   ; move_enemies_loop_return: return from behavior subroutines
042661 FD 2A 3F 69 0031*       ld iy,(table_pointer) ; get back table pointer
       04          
042666             0032*   ; now we check results of all the moves
042666 FD CB 1D 7E 0033*       bit sprite_just_died,(iy+sprite_collisions)
04266A CA 76 26 04 0034*       jp z,@draw_sprite ; if not dead, draw sprite
04266E CD A8 69 04 0035*       call table_deactivate_sprite
042672 C3 8E 26 04 0036*       jp @next_record ; and to the next record
042676             0037*   @draw_sprite:
042676 FD 7E 00    0038*       ld a,(iy+sprite_id) ; get spriteId
042679 CD 00 20 04 0039*       call vdu_sprite_select ; select sprite
04267D FD 7E 28    0040*       ld a,(iy+sprite_frame)
042680 CD 63 20 04 0041*       call vdu_sprite_select_frame
042684 FD 07 01    0042*       ld bc,(iy+sprite_x)
042687 FD 17 04    0043*       ld de,(iy+sprite_y)
04268A CD CC 20 04 0044*       call vdu_sprite_move_abs168
04268E             0045*   ; fall through to @next_record
04268E             0046*   @next_record:
04268E ED 33 40    0047*       lea iy,iy+table_record_size
042691 AF          0048*       xor a ; clears carry flag
042692 32 43 69 04 0049*       ld (sprite_screen_edge),a ; clear screen edge collision flag
042696 C1          0050*       pop bc ; get back our loop counter
042697 10 AB       0051*       djnz @move_loop ; loop until we've checked all the records
042699             0052*   ; reset all just spawned flags
042699 FD 21 72 6F 0053*       ld iy,table_base
       04          
04269E 06 08       0054*       ld b,table_num_records ; loop counter
0426A0             0055*   @reset_just_spawned:
0426A0 C5          0056*       push bc ; back up loop counter
0426A1 FD CB 16 7E 0057*       bit 7,(iy+sprite_type) ; check if just spawned
0426A5 CA D8 26 04 0058*       jp z,@F
0426A9 FD CB 16 BE 0059*       res 7,(iy+sprite_type) ; clear just spawned flag
0426AD FD 7E 00    0060*       ld a,(iy+sprite_id)
0426B0 CD 00 20 04 0061*       call vdu_sprite_select
0426B4 FD 27 17    0062*       ld hl,(iy+sprite_base_bufferId)
0426B7 FD 46 21    0063*       ld b,(iy+sprite_num_animations)
0426BA FD 4E 20    0064*       ld c,(iy+sprite_num_orientations)
0426BD ED 4C       0065*       mlt bc ; bc total frames
0426BF CD 2E 6B 04 0066*       call sprite_load_frames
0426C3 FD 7E 28    0067*       ld a,(iy+sprite_frame)
0426C6 CD 63 20 04 0068*       call vdu_sprite_select_frame
0426CA FD 07 01    0069*       ld bc,(iy+sprite_x)
0426CD FD 17 04    0070*       ld de,(iy+sprite_y)
0426D0 CD CC 20 04 0071*       call vdu_sprite_move_abs168
0426D4 CD 76 20 04 0072*       call vdu_sprite_show
0426D8             0073*   @@:
0426D8 ED 33 40    0074*       lea iy,iy+table_record_size
0426DB C1          0075*       pop bc ; get back loop counter
0426DC 10 C2       0076*       djnz @reset_just_spawned
0426DE             0077*   ; and done
0426DE C9          0078*       ret
0426DF             0079*   
0426DF             0080*   ; TODO: much if this is deprecated by new sprite table system and needs to be rewritten
0426DF             0081*   check_enemy_collisions:
0426DF             0082*   ; ; check what we collide with
0426DF             0083*   ;     ld a,(iy+sprite_collisions)
0426DF             0084*   ;     push af ; save collision flags
0426DF             0085*   ;     and collides_with_player ; check for collisions with player
0426DF             0086*   ;     call nz,check_enemy_collision_player
0426DF             0087*   ;     pop af ; restore collision flags
0426DF             0088*   ;     and collides_with_laser ; check for collisions with laser
0426DF             0089*   ;     call nz,check_enemy_collision_laser
0426DF C9          0090*       ret
0426E0             0091*   check_enemy_collision_laser: ; check for collisions with laser
0426E0             0092*       ; ld ix,laser_start_variables
0426E0             0093*       ; bit sprite_alive,(ix+sprite_collisions)
0426E0             0094*       ; ret z ; laser dead, nothing to do
0426E0             0095*       ; call check_collision
0426E0             0096*       ; ret p ; no collision
0426E0             0097*       ; ld ix,laser_start_variables
0426E0             0098*       ; set sprite_just_died,(ix+sprite_collisions)
0426E0             0099*       ; set sprite_alive,(ix+sprite_collisions)
0426E0             0100*       ; call enemy_kill
0426E0 C9          0101*       ret
0426E1             0102*   check_enemy_collision_player: ; check for collisions with player
0426E1             0103*       ; ld ix,player_begin
0426E1             0104*       ; bit sprite_alive,(ix+sprite_collisions)
0426E1             0105*       ; ret z ; player dead, no collision
0426E1             0106*       ; call check_collision
0426E1             0107*       ; ret p ; no collision
0426E1             0108*       ; call enemy_kill
0426E1 C9          0109*       ret
0426E2             0110*   ; end check_enemy_collisions
0426E2             0111*   ; END TODO
0426E2             0112*   
0426E2             0113*   ; this routine vanquishes the enemy sprite
0426E2             0114*   ; and replaces it with an animated explosion
0426E2             0115*   ; destroys: everything except index registers
0426E2             0116*   ; returns: a=-1 to indicate enemy died, and an incandescent ball of debris and gas
0426E2             0117*   enemy_kill:
0426E2 FD 2A 3F 69 0118*       ld iy,(table_pointer)
       04          
0426E7 2A 00 5A 04 0119*       ld hl,(player_score)
0426EB 01 00 00 00 0120*       ld bc,0 ; clear bcu
0426EF FD 4E 26    0121*       ld c,(iy+sprite_points)
0426F2 09          0122*       add hl,bc
0426F3 22 00 5A 04 0123*       ld (player_score),hl
0426F7 C3 13 29 04 0124*       jp spawn_explosion
0426FB             0125*   ; end enemy_kill
0426FB             0047        include "enemy_fireball.inc"
0426FB FF FF FF FF 0001*       align 256
       FF          
042700             0002*   speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
042700             0003*   
042700             0004*   fireball_defaults:
042700 03          0005*       db enemy_projectile        ; type
042701 06 01 00    0006*       dl BUF_FIREBALL_A	    ; base_bufferId
042704 51 27 04    0007*       dl move_enemy_fireball	; move_program
042707 01          0008*       db collides_with_player ; collisions
042708 07          0009*       db 7	                ; dim_x
042709 07          0010*       db 7                    ; dim_y
04270A 01          0011*       db 1                    ; num_orientations
04270B 01          0012*       db 1                    ; num_animations
04270C 00          0013*       db 0	                ; animation
04270D 00          0014*       db 0	                ; animation_timer
04270E 00          0015*       db 0	                ; move_timer
04270F 00          0016*       db 0	                ; move_step
042710 14          0017*       db 20	                ; points
042711 05          0018*       db 5	                ; shield_damage
042712 00          0019*       db 0                    ; frame
042713             0020*   
042713             0021*   enemy_spawn_fireball:
042713 21 00 27 04 0022*       ld hl,fireball_defaults
042717 CD F0 6A 04 0023*       call spawn_sprite_from_sprite
04271B D0          0024*       ret nc ; no carry means no free sprite slots, so we go home
04271C             0025*   ; other specific initialization
04271C             0026*   ; ------------------------------------------------
04271C             0027*   ; center the fireball on the turret
04271C 11 80 03 00 0028*       ld de,3*256+128 ; half the fireball size
042720 FD 27 01    0029*       ld hl,(iy+sprite_x)
042723 19          0030*       add hl,de
042724 DD 2F 01    0031*       ld (ix+sprite_x),hl
042727 FD 27 04    0032*       ld hl,(iy+sprite_y)
04272A 19          0033*       add hl,de
04272B DD 2F 04    0034*       ld (ix+sprite_y),hl
04272E             0035*   ; copy component velocities from targeting_computer
04272E 2A 35 60 04 0036*       ld hl,(Vp_x)
042732 DD 2F 07    0037*       ld (ix+sprite_xvel),hl
042735 2A 38 60 04 0038*       ld hl,(Vp_y)
042739 DD 2F 0A    0039*       ld (ix+sprite_yvel),hl
04273C             0040*   ; move projectile one frame's distance so it isn't drawn right over turret
04273C DD 27 01    0041*       ld hl,(ix+sprite_x)
04273F DD 17 07    0042*       ld de,(ix+sprite_xvel)
042742 19          0043*       add hl,de
042743 DD 2F 01    0044*       ld (ix+sprite_x),hl
042746 DD 27 04    0045*       ld hl,(ix+sprite_y)
042749 DD 17 0A    0046*       ld de,(ix+sprite_yvel)
04274C 19          0047*       add hl,de
04274D DD 2F 04    0048*       ld (ix+sprite_y),hl
042750 C9          0049*       ret
042751             0050*   ; end enemy_spawn_fireball
042751             0051*   
042751             0052*   move_enemy_fireball:
042751             0053*   ; run the movement program for the fireball enemy
042751 CD 03 6A 04 0054*       call move_sprite
042755 3A 43 69 04 0055*       ld a,(sprite_screen_edge)
042759 B7          0056*       or a ; a will be non-zero if have scrolled off screen
04275A C2 A8 69 04 0057*       jp nz,table_deactivate_sprite
04275E C3 DF 26 04 0058*       jp check_enemy_collisions
042762             0059*   ; end move_enemy_fireball
042762             0048        include "enemy_seeker.inc"
042762 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
042800             0002*   
042800 00          0003*   seekers_count: db 0
042801             0004*   seekers_max: equ 3
042801             0005*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
042801             0006*   
042801             0007*   seeker_defaults:
042801 01          0008*       db enemy_air         ; type
042802 0B 01 00    0009*       dl BUF_SEEKER_000        ; base_bufferId
042805 25 28 04    0010*       dl move_enemy_seeker    ; move_program
042808 03          0011*       db collides_with_laser | collides_with_player ; collisions
042809 10          0012*       db 16                    ; dim_x
04280A 10          0013*       db 16                   ; dim_y
04280B 20          0014*       db 32                   ; num_orientations
04280C 01          0015*       db 1                    ; num_animations
04280D 00          0016*       db 0                    ; animation
04280E 00          0017*       db 0                    ; animation_timer
04280F 01          0018*       db 1                    ; move_timer
042810 00          0019*       db 0                    ; move_step
042811 0A          0020*       db 10                    ; points
042812 02          0021*       db 2                    ; shield_damage
042813 00          0022*       db 0                    ; frame
042814             0023*   
042814             0024*   enemy_spawn_seeker:
042814 21 01 28 04 0025*       ld hl,seeker_defaults
042818 CD F0 6A 04 0026*       call spawn_sprite_from_sprite
04281C D0          0027*       ret nc ; no carry means no free sprite slots, so we go home
04281D             0028*   ; other specific initialization
04281D 21 80 02 00 0029*       ld hl,speed_seeker
042821 DD 2F 0D    0030*       ld (ix+sprite_vel),hl
042824 C9          0031*       ret
042825             0032*   ; end enemy_spawn_seeker
042825             0033*   
042825             0034*   move_enemy_seeker:
042825             0035*   ; run the movement program for the seeker enemy
042825 CD 2E 28 04 0036*       call en_nav_seek_zag
042829 C3 DF 26 04 0037*       jp check_enemy_collisions
04282D C9          0038*       ret
04282E             0039*   ; end move_enemy_seeker
04282E             0040*   
04282E             0041*   ; contains the logic for how to move the enemy
04282E             0042*   ; and then does the moving
04282E             0043*   ; inputs: a fully-populated active sprite table
04282E             0044*   ;         player position variables
04282E             0045*   ; destroys: everything except index registers
04282E             0046*   ; outputs: moving enemies
04282E             0047*   en_nav_seek_zag:
04282E             0048*   ; set velocity and orientation by player's relative location
04282E             0049*   ; move enemies y-axis
04282E             0050*   ; where is player relative to us?
04282E CD 00 60 04 0051*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
042832             0052*   ; is player above or below us?
042832 ED 53 55 06 0053*       ld (ude),de ; dy
       04          
042837 3A 57 06 04 0054*       ld a,(ude+2) ; deu
04283B 17          0055*       rla ; shift sign bit into carry
04283C D2 65 28 04 0056*       jp nc,@zig_zag ; player is below,evade
042840             0057*   ; player is even or above,so home in on current heading
042840 FD 2F 10    0058*       ld (iy+sprite_heading),hl ; save sprite heading
042843             0059*   ; fall through to @compute_velocities
042843             0060*   @compute_velocities:
042843 CD A4 6A 04 0061*       call sprite_compute_velocities
042847             0062*   ; change the animation frame to match heading
042847 CD 21 6B 04 0063*       call sprite_frame_heading ; a, sprite_frame set to heading-based frame
04284B CD 03 6A 04 0064*       call move_sprite ; move the sprite
04284F B7          0065*       or a ; a will be non-zero if have collided with screen edge
042850 C2 70 28 04 0066*       jp nz,@zag_switch ; switch direction
042854 C9          0067*       ret ; didn't hit edge, nothing else to do
042855             0068*   @zig_zag_start:
042855 FD 2A 3F 69 0069*       ld iy,(table_pointer)
       04          
04285A CD AE 09 04 0070*       call rand_8
04285E E6 3F       0071*       and %00111111 ; limit it to 64
042860 CB DF       0072*       set 3,a ; make sure it's at least 8
042862 FD 77 24    0073*       ld (iy+sprite_move_timer),a ; store it
042865             0074*       ; fall through to @zig_zag
042865             0075*   @zig_zag:
042865 FD 7E 24    0076*       ld a,(iy+sprite_move_timer)
042868 3D          0077*       dec a
042869 FD 77 24    0078*       ld (iy+sprite_move_timer),a
04286C C2 92 28 04 0079*       jp nz,@zig_zag_no_switch
042870             0080*   @zag_switch:
042870             0081*       ; otherwise flip direction and restart timer
042870 FD 7E 25    0082*       ld a,(iy+sprite_move_step)
042873 EE 01       0083*       xor %1 ; flips bit zero
042875 FD 77 25    0084*       ld (iy+sprite_move_step),a ; store it
042878 C2 87 28 04 0085*       jp nz,@F ; zag right
04287C             0086*   ;otherwise zag left
04287C 21 00 A0 00 0087*       ld hl,160*256; southwest heading
042880 FD 2F 10    0088*       ld (iy+sprite_heading),hl ; save sprite heading
042883 C3 55 28 04 0089*       jp @zig_zag_start
042887             0090*   @@: ; zag right
042887 21 00 60 00 0091*       ld hl,96*256; southeast heading
04288B FD 2F 10    0092*       ld (iy+sprite_heading),hl ; save sprite heading
04288E C3 55 28 04 0093*       jp @zig_zag_start
042892             0094*   @zig_zag_no_switch:
042892             0095*       ; ld a,(sprite_orientation)
042892 FD 27 10    0096*       ld hl,(iy+sprite_heading)
042895 C3 43 28 04 0097*       jp @compute_velocities
042899             0098*   ; end en_nav_seek_zag
042899             0099*   
042899             0100*   
042899             0101*   init_enemy_seekers:
042899             0102*   ; set pointer to seeker sprite table
042899 FD 21 B2 70 0103*       ld iy,seekers_base
       04          
04289E FD 7E 00    0104*       ld a,(iy+sprite_id) ; sprite id
0428A1 1E 03       0105*       ld e,seekers_max ; sprite loop counter
0428A3             0106*   ; define seeker sprites
0428A3             0107*   @sprites_loop:
0428A3 F5          0108*       push af
0428A4 D5          0109*       push de
0428A5 CD 00 20 04 0110*   	call vdu_sprite_select
0428A9 CD 13 20 04 0111*   	call vdu_sprite_clear_frames
0428AD 21 0B 01 00 0112*   	ld hl,BUF_SEEKER_000
0428B1 06 20       0113*   	ld b,32 ; 32 bitmaps for seeker
0428B3             0114*   @frames_loop:
0428B3 C5          0115*   	push bc
0428B4 E5          0116*   	push hl
0428B5 CD 55 21 04 0117*   	call vdu_sprite_add_buff
0428B9 E1          0118*   	pop hl
0428BA 23          0119*   	inc hl
0428BB C1          0120*   	pop bc
0428BC 10 F5       0121*   	djnz @frames_loop
0428BE D1          0122*       pop de ; sprite loop counter
0428BF F1          0123*       pop af ; sprite id
0428C0 3C          0124*       inc a
0428C1 1D          0125*       dec e
0428C2 C2 A3 28 04 0126*       jp nz,@sprites_loop
0428C6 C9          0127*       ret
0428C7             0128*   ; end init_enemy_seekers
0428C7             0049        include "explosion.inc"
0428C7 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
042900             0002*   explosion_defaults:
042900 04          0003*       db explosion            ; type
042901 01 01 00    0004*       dl BUF_EXPLOSION_A	    ; base_bufferId
042904 2A 29 04    0005*       dl move_explosion	    ; move_program
042907 00          0006*       db 0                    ; collisions
042908 07          0007*       db 7	                ; dim_x
042909 07          0008*       db 7                    ; dim_y
04290A 01          0009*       db 1                    ; num_orientations
04290B 05          0010*       db 5                    ; num_animations
04290C 05          0011*       db 5	                ; animation
04290D 08          0012*       db 8	                ; animation_timer
04290E 00          0013*       db 0	                ; move_timer
04290F 00          0014*       db 0	                ; move_step
042910 00          0015*       db 0	                ; points
042911 05          0016*       db 5	                ; shield_damage
042912 00          0017*       db 0                    ; frame
042913             0018*   
042913             0019*   spawn_explosion:
042913 21 00 29 04 0020*       ld hl,explosion_defaults
042917 CD BC 6A 04 0021*       call alter_sprite
04291B             0022*   ; other specific initialization
04291B 21 00 00 00 0023*       ld hl,0
04291F FD 2F 07    0024*       ld (iy+sprite_xvel),hl
042922 21 00 01 00 0025*       ld hl,1*256
042926 FD 2F 0A    0026*       ld (iy+sprite_yvel),hl
042929 C9          0027*       ret
04292A             0028*   ; end spawn_explosion
04292A             0029*   
04292A             0030*   move_explosion:
04292A             0031*   ; run the movement program for the explosion
04292A CD 03 6A 04 0032*       call move_sprite
04292E B7          0033*       or a ; a will be non-zero if have scrolled off screen
04292F C2 47 29 04 0034*       jp nz,@make_crater
042933             0035*   ; do the animations
042933 FD 35 23    0036*       dec (iy+sprite_animation_timer)
042936 C0          0037*       ret nz ; not time to bump animation frame
042937 FD 34 28    0038*       inc (iy+sprite_frame)
04293A FD 35 22    0039*       dec (iy+sprite_animation)
04293D CA 47 29 04 0040*       jp z,@make_crater ; reached the end of the animations
042941 3E 08       0041*       ld a,8 ; reset animation timer
042943 FD 77 23    0042*       ld (iy+sprite_animation_timer),a
042946 C9          0043*       ret
042947             0044*   @make_crater: ; deactivate sprite and draw a crater in its place
042947 21 00 01 00 0045*       ld hl,BUF_CRATER
04294B CD 38 1B 04 0046*       call vdu_buff_select
04294F FD 07 01    0047*       ld bc,(iy+sprite_x)
042952 FD 17 04    0048*       ld de,(iy+sprite_y)
042955 CD 3C 1F 04 0049*       call vdu_plot_bmp168
042959 C3 A8 69 04 0050*       jp table_deactivate_sprite
04295D             0051*   ; end move_explosion
04295D             0050        include "fonts_list.inc"
04295D FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042A00             0002*   
042A00             0003*   ; Generated by asm_config_editor.py
042A00             0004*   font_list_record_size: equ 12
042A00             0005*   font_list_width: equ 0
042A00             0006*   font_list_height: equ 3
042A00             0007*   font_list_bufferId: equ 6
042A00             0008*   font_list_filename: equ 9
042A00             0009*   
042A00             0010*   num_fonts: equ 18
042A00             0011*   
042A00             0012*   ; Index list:
042A00             0013*   amiga_forever_16x24: equ 64000
042A00             0014*   amiga_forever_8x16: equ 64001
042A00             0015*   amiga_forever_8x8: equ 64002
042A00             0016*   computer_pixel_7_10x15: equ 64003
042A00             0017*   computer_pixel_7_10x24: equ 64004
042A00             0018*   computer_pixel_7_8x16: equ 64005
042A00             0019*   Lat2_Terminus12x6_6x12: equ 64006
042A00             0020*   Lat2_TerminusBold14_8x14: equ 64007
042A00             0021*   Lat2_VGA14_8x14: equ 64008
042A00             0022*   Lat2_VGA16_8x16: equ 64009
042A00             0023*   Lat2_VGA8_8x8: equ 64010
042A00             0024*   Lat7_Fixed13_8x13: equ 64011
042A00             0025*   Lat7_Terminus12x6_6x12: equ 64012
042A00             0026*   Lat7_TerminusBold16_8x16: equ 64013
042A00             0027*   Lat7_VGA14_8x14: equ 64014
042A00             0028*   Lat7_VGA8x8: equ 64015
042A00             0029*   scriptorium_12x14: equ 64016
042A00             0030*   Squarewave_Bold_8x12: equ 64017
042A00             0031*   
042A00             0032*   font_list: ; width; height; bufferId; filename;:
042A00 10 00 00 18 0033*   	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 D8 2A 04 
042A0C 08 00 00 10 0034*   	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 F7 2A 04 
042A18 08 00 00 08 0035*   	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 15 2B 04 
042A24 0A 00 00 0F 0036*   	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 32 2B 04 
042A30 0A 00 00 18 0037*   	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 54 2B 04 
042A3C 08 00 00 10 0038*   	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 76 2B 04 
042A48 06 00 00 0C 0039*   	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 97 2B 04 
042A54 08 00 00 0E 0040*   	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 B9 2B 04 
042A60 08 00 00 0E 0041*   	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 DD 2B 04 
042A6C 08 00 00 10 0042*   	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 F8 2B 04 
042A78 08 00 00 08 0043*   	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 13 2C 04 
042A84 08 00 00 0D 0044*   	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 2C 2C 04 
042A90 06 00 00 0C 0045*   	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 49 2C 04 
042A9C 08 00 00 10 0046*   	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 6B 2C 04 
042AA8 08 00 00 0E 0047*   	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 8F 2C 04 
042AB4 08 00 00 08 0048*   	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 AA 2C 04 
042AC0 0C 00 00 0E 0049*   	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 C3 2C 04 
042ACC 08 00 00 0C 0050*   	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 E0 2C 04 
042AD8             0051*   
042AD8             0052*   ; files_list: ; filename:
042AD8 66 6F 6E 74 0053*   fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
042AF7 66 6F 6E 74 0054*   fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
042B15 66 6F 6E 74 0055*   fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042B32 66 6F 6E 74 0056*   fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
042B54 66 6F 6E 74 0057*   fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
042B76 66 6F 6E 74 0058*   fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
042B97 66 6F 6E 74 0059*   fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
042BB9 66 6F 6E 74 0060*   fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
042BDD 66 6F 6E 74 0061*   fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
042BF8 66 6F 6E 74 0062*   fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
042C13 66 6F 6E 74 0063*   fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042C2C 66 6F 6E 74 0064*   fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
042C49 66 6F 6E 74 0065*   fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
042C6B 66 6F 6E 74 0066*   fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
042C8F 66 6F 6E 74 0067*   fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
042CAA 66 6F 6E 74 0068*   fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042CC3 66 6F 6E 74 0069*   fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
042CE0 66 6F 6E 74 0070*   fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
042D00             0051        include "images_tiles_dg.inc"
042D00             0001*   ; Generated by tiles_dg.py
042D00             0002*   
042D00             0003*   tiles_dg_num_images: equ 184
042D00             0004*   
042D00             0005*   ; bufferIds:
042D00             0006*   
042D00             0007*   
042D00             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
042D00 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       F0 39 04 00 
       02 00       
042D12 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       05 3A 04 01 
       02 00       
042D24 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       1A 3A 04 02 
       02 00       
042D36 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       2F 3A 04 03 
       02 00       
042D48 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       44 3A 04 04 
       02 00       
042D5A 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       59 3A 04 05 
       02 00       
042D6C 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       6E 3A 04 06 
       02 00       
042D7E 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       83 3A 04 07 
       02 00       
042D90 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       98 3A 04 08 
       02 00       
042DA2 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       AD 3A 04 09 
       02 00       
042DB4 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       C2 3A 04 0A 
       02 00       
042DC6 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       D7 3A 04 0B 
       02 00       
042DD8 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_012, 524
       00 00 10 00 
       00 00 01 00 
       EC 3A 04 0C 
       02 00       
042DEA 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_013, 525
       00 00 10 00 
       00 00 01 00 
       01 3B 04 0D 
       02 00       
042DFC 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_014, 526
       00 00 10 00 
       00 00 01 00 
       16 3B 04 0E 
       02 00       
042E0E 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_015, 527
       00 00 10 00 
       00 00 01 00 
       2B 3B 04 0F 
       02 00       
042E20 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       40 3B 04 10 
       02 00       
042E32 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_025, 537
       00 00 10 00 
       00 00 01 00 
       55 3B 04 19 
       02 00       
042E44 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_026, 538
       00 00 10 00 
       00 00 01 00 
       6A 3B 04 1A 
       02 00       
042E56 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_027, 539
       00 00 10 00 
       00 00 01 00 
       7F 3B 04 1B 
       02 00       
042E68 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_028, 540
       00 00 10 00 
       00 00 01 00 
       94 3B 04 1C 
       02 00       
042E7A 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_029, 541
       00 00 10 00 
       00 00 01 00 
       A9 3B 04 1D 
       02 00       
042E8C 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_030, 542
       00 00 10 00 
       00 00 01 00 
       BE 3B 04 1E 
       02 00       
042E9E 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_031, 543
       00 00 10 00 
       00 00 01 00 
       D3 3B 04 1F 
       02 00       
042EB0 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_032, 544
       00 00 10 00 
       00 00 01 00 
       E8 3B 04 20 
       02 00       
042EC2 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       FD 3B 04 21 
       02 00       
042ED4 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       12 3C 04 22 
       02 00       
042EE6 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       27 3C 04 23 
       02 00       
042EF8 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       3C 3C 04 24 
       02 00       
042F0A 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       51 3C 04 25 
       02 00       
042F1C 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       66 3C 04 26 
       02 00       
042F2E 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       7B 3C 04 27 
       02 00       
042F40 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       90 3C 04 28 
       02 00       
042F52 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       A5 3C 04 31 
       02 00       
042F64 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       BA 3C 04 32 
       02 00       
042F76 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       CF 3C 04 33 
       02 00       
042F88 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       E4 3C 04 34 
       02 00       
042F9A 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       F9 3C 04 35 
       02 00       
042FAC 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       0E 3D 04 36 
       02 00       
042FBE 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       23 3D 04 37 
       02 00       
042FD0 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       38 3D 04 38 
       02 00       
042FE2 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       4D 3D 04 39 
       02 00       
042FF4 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       62 3D 04 3A 
       02 00       
043006 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       77 3D 04 3B 
       02 00       
043018 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       8C 3D 04 41 
       02 00       
04302A 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       A1 3D 04 42 
       02 00       
04303C 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       B6 3D 04 43 
       02 00       
04304E 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       CB 3D 04 44 
       02 00       
043060 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       E0 3D 04 45 
       02 00       
043072 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       F5 3D 04 46 
       02 00       
043084 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       0A 3E 04 47 
       02 00       
043096 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       1F 3E 04 48 
       02 00       
0430A8 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       34 3E 04 49 
       02 00       
0430BA 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       49 3E 04 4A 
       02 00       
0430CC 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       5E 3E 04 4B 
       02 00       
0430DE 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       73 3E 04 51 
       02 00       
0430F0 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       88 3E 04 52 
       02 00       
043102 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       9D 3E 04 53 
       02 00       
043114 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       B2 3E 04 54 
       02 00       
043126 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       C7 3E 04 55 
       02 00       
043138 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       DC 3E 04 56 
       02 00       
04314A 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       F1 3E 04 57 
       02 00       
04315C 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       06 3F 04 58 
       02 00       
04316E 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       1B 3F 04 59 
       02 00       
043180 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       30 3F 04 5A 
       02 00       
043192 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       45 3F 04 5B 
       02 00       
0431A4 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       5A 3F 04 61 
       02 00       
0431B6 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       6F 3F 04 62 
       02 00       
0431C8 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       84 3F 04 63 
       02 00       
0431DA 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       99 3F 04 64 
       02 00       
0431EC 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       AE 3F 04 65 
       02 00       
0431FE 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       C3 3F 04 66 
       02 00       
043210 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       D8 3F 04 67 
       02 00       
043222 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       ED 3F 04 68 
       02 00       
043234 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       02 40 04 69 
       02 00       
043246 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       17 40 04 6A 
       02 00       
043258 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       2C 40 04 6B 
       02 00       
04326A 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       41 40 04 6C 
       02 00       
04327C 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       56 40 04 71 
       02 00       
04328E 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       6B 40 04 72 
       02 00       
0432A0 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       80 40 04 73 
       02 00       
0432B2 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       95 40 04 74 
       02 00       
0432C4 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       AA 40 04 75 
       02 00       
0432D6 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       BF 40 04 76 
       02 00       
0432E8 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       D4 40 04 77 
       02 00       
0432FA 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       E9 40 04 78 
       02 00       
04330C 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       FE 40 04 79 
       02 00       
04331E 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       13 41 04 7A 
       02 00       
043330 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       28 41 04 7B 
       02 00       
043342 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       3D 41 04 81 
       02 00       
043354 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       52 41 04 82 
       02 00       
043366 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       67 41 04 83 
       02 00       
043378 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       7C 41 04 84 
       02 00       
04338A 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       91 41 04 85 
       02 00       
04339C 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       A6 41 04 86 
       02 00       
0433AE 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       BB 41 04 87 
       02 00       
0433C0 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       D0 41 04 88 
       02 00       
0433D2 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       E5 41 04 89 
       02 00       
0433E4 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       FA 41 04 8A 
       02 00       
0433F6 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       0F 42 04 8B 
       02 00       
043408 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       24 42 04 8C 
       02 00       
04341A 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_141, 653
       00 00 10 00 
       00 00 01 00 
       39 42 04 8D 
       02 00       
04342C 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_142, 654
       00 00 10 00 
       00 00 01 00 
       4E 42 04 8E 
       02 00       
04343E 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       63 42 04 91 
       02 00       
043450 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       78 42 04 92 
       02 00       
043462 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       8D 42 04 93 
       02 00       
043474 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       A2 42 04 94 
       02 00       
043486 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       B7 42 04 95 
       02 00       
043498 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       CC 42 04 96 
       02 00       
0434AA 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       E1 42 04 97 
       02 00       
0434BC 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       F6 42 04 98 
       02 00       
0434CE 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       0B 43 04 99 
       02 00       
0434E0 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       20 43 04 9A 
       02 00       
0434F2 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       35 43 04 9B 
       02 00       
043504 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       4A 43 04 9C 
       02 00       
043516 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_157, 669
       00 00 10 00 
       00 00 01 00 
       5F 43 04 9D 
       02 00       
043528 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_158, 670
       00 00 10 00 
       00 00 01 00 
       74 43 04 9E 
       02 00       
04353A 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       89 43 04 A1 
       02 00       
04354C 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       9E 43 04 A2 
       02 00       
04355E 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       B3 43 04 A3 
       02 00       
043570 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       C8 43 04 A4 
       02 00       
043582 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       DD 43 04 A5 
       02 00       
043594 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       F2 43 04 A6 
       02 00       
0435A6 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       07 44 04 A7 
       02 00       
0435B8 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       1C 44 04 A8 
       02 00       
0435CA 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       31 44 04 A9 
       02 00       
0435DC 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       46 44 04 AA 
       02 00       
0435EE 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       5B 44 04 AB 
       02 00       
043600 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       70 44 04 AC 
       02 00       
043612 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       85 44 04 B1 
       02 00       
043624 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       9A 44 04 B2 
       02 00       
043636 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       AF 44 04 B3 
       02 00       
043648 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       C4 44 04 B4 
       02 00       
04365A 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       D9 44 04 B5 
       02 00       
04366C 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       EE 44 04 B6 
       02 00       
04367E 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       03 45 04 B7 
       02 00       
043690 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       18 45 04 B8 
       02 00       
0436A2 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       2D 45 04 B9 
       02 00       
0436B4 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       42 45 04 BA 
       02 00       
0436C6 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       57 45 04 BB 
       02 00       
0436D8 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       6C 45 04 BC 
       02 00       
0436EA 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       81 45 04 C1 
       02 00       
0436FC 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       96 45 04 C2 
       02 00       
04370E 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       AB 45 04 C3 
       02 00       
043720 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       C0 45 04 C4 
       02 00       
043732 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       D5 45 04 C5 
       02 00       
043744 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       EA 45 04 C6 
       02 00       
043756 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       FF 45 04 C7 
       02 00       
043768 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       14 46 04 C8 
       02 00       
04377A 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       29 46 04 C9 
       02 00       
04378C 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       3E 46 04 CA 
       02 00       
04379E 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       53 46 04 CB 
       02 00       
0437B0 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       68 46 04 CC 
       02 00       
0437C2 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       7D 46 04 D1 
       02 00       
0437D4 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       92 46 04 D2 
       02 00       
0437E6 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       A7 46 04 D3 
       02 00       
0437F8 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       BC 46 04 D4 
       02 00       
04380A 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       D1 46 04 D5 
       02 00       
04381C 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       E6 46 04 D6 
       02 00       
04382E 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       FB 46 04 D7 
       02 00       
043840 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       10 47 04 D8 
       02 00       
043852 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       25 47 04 D9 
       02 00       
043864 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       3A 47 04 DA 
       02 00       
043876 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       4F 47 04 DB 
       02 00       
043888 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       64 47 04 DC 
       02 00       
04389A 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       79 47 04 E1 
       02 00       
0438AC 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       8E 47 04 E2 
       02 00       
0438BE 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       A3 47 04 E3 
       02 00       
0438D0 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       B8 47 04 E4 
       02 00       
0438E2 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       CD 47 04 E5 
       02 00       
0438F4 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       E2 47 04 E6 
       02 00       
043906 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       F7 47 04 E7 
       02 00       
043918 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       0C 48 04 E8 
       02 00       
04392A 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       21 48 04 E9 
       02 00       
04393C 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       36 48 04 EA 
       02 00       
04394E 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       4B 48 04 EB 
       02 00       
043960 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       60 48 04 EC 
       02 00       
043972 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       75 48 04 F1 
       02 00       
043984 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       8A 48 04 F2 
       02 00       
043996 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_243, 755
       00 00 10 00 
       00 00 01 00 
       9F 48 04 F3 
       02 00       
0439A8 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       B4 48 04 F5 
       02 00       
0439BA 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       C9 48 04 F6 
       02 00       
0439CC 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_247, 759
       00 00 10 00 
       00 00 01 00 
       DE 48 04 F7 
       02 00       
0439DE 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       F3 48 04 F8 
       02 00       
0439F0             0193*   
0439F0             0194*   tiles_dg_files_list: ; filename:
0439F0 74 69 6C 65 0195*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
043A05 74 69 6C 65 0196*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
043A1A 74 69 6C 65 0197*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
043A2F 74 69 6C 65 0198*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
043A44 74 69 6C 65 0199*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
043A59 74 69 6C 65 0200*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
043A6E 74 69 6C 65 0201*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
043A83 74 69 6C 65 0202*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
043A98 74 69 6C 65 0203*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
043AAD 74 69 6C 65 0204*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
043AC2 74 69 6C 65 0205*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
043AD7 74 69 6C 65 0206*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
043AEC 74 69 6C 65 0207*   fn_dg_012: db "tiles/dg/0/012.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 32 2E 72 
       67 62 61 32 
       00          
043B01 74 69 6C 65 0208*   fn_dg_013: db "tiles/dg/0/013.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 33 2E 72 
       67 62 61 32 
       00          
043B16 74 69 6C 65 0209*   fn_dg_014: db "tiles/dg/0/014.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 34 2E 72 
       67 62 61 32 
       00          
043B2B 74 69 6C 65 0210*   fn_dg_015: db "tiles/dg/0/015.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 35 2E 72 
       67 62 61 32 
       00          
043B40 74 69 6C 65 0211*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
043B55 74 69 6C 65 0212*   fn_dg_025: db "tiles/dg/0/025.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 35 2E 72 
       67 62 61 32 
       00          
043B6A 74 69 6C 65 0213*   fn_dg_026: db "tiles/dg/0/026.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 36 2E 72 
       67 62 61 32 
       00          
043B7F 74 69 6C 65 0214*   fn_dg_027: db "tiles/dg/0/027.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 37 2E 72 
       67 62 61 32 
       00          
043B94 74 69 6C 65 0215*   fn_dg_028: db "tiles/dg/0/028.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 38 2E 72 
       67 62 61 32 
       00          
043BA9 74 69 6C 65 0216*   fn_dg_029: db "tiles/dg/0/029.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 39 2E 72 
       67 62 61 32 
       00          
043BBE 74 69 6C 65 0217*   fn_dg_030: db "tiles/dg/0/030.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 30 2E 72 
       67 62 61 32 
       00          
043BD3 74 69 6C 65 0218*   fn_dg_031: db "tiles/dg/0/031.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 31 2E 72 
       67 62 61 32 
       00          
043BE8 74 69 6C 65 0219*   fn_dg_032: db "tiles/dg/0/032.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
043BFD 74 69 6C 65 0220*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
043C12 74 69 6C 65 0221*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
043C27 74 69 6C 65 0222*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
043C3C 74 69 6C 65 0223*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
043C51 74 69 6C 65 0224*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
043C66 74 69 6C 65 0225*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
043C7B 74 69 6C 65 0226*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
043C90 74 69 6C 65 0227*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
043CA5 74 69 6C 65 0228*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
043CBA 74 69 6C 65 0229*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
043CCF 74 69 6C 65 0230*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
043CE4 74 69 6C 65 0231*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
043CF9 74 69 6C 65 0232*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
043D0E 74 69 6C 65 0233*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
043D23 74 69 6C 65 0234*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
043D38 74 69 6C 65 0235*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
043D4D 74 69 6C 65 0236*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
043D62 74 69 6C 65 0237*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043D77 74 69 6C 65 0238*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
043D8C 74 69 6C 65 0239*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
043DA1 74 69 6C 65 0240*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
043DB6 74 69 6C 65 0241*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
043DCB 74 69 6C 65 0242*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
043DE0 74 69 6C 65 0243*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
043DF5 74 69 6C 65 0244*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
043E0A 74 69 6C 65 0245*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
043E1F 74 69 6C 65 0246*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
043E34 74 69 6C 65 0247*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
043E49 74 69 6C 65 0248*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
043E5E 74 69 6C 65 0249*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
043E73 74 69 6C 65 0250*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
043E88 74 69 6C 65 0251*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
043E9D 74 69 6C 65 0252*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
043EB2 74 69 6C 65 0253*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
043EC7 74 69 6C 65 0254*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
043EDC 74 69 6C 65 0255*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
043EF1 74 69 6C 65 0256*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
043F06 74 69 6C 65 0257*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
043F1B 74 69 6C 65 0258*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
043F30 74 69 6C 65 0259*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
043F45 74 69 6C 65 0260*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
043F5A 74 69 6C 65 0261*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
043F6F 74 69 6C 65 0262*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
043F84 74 69 6C 65 0263*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
043F99 74 69 6C 65 0264*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
043FAE 74 69 6C 65 0265*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
043FC3 74 69 6C 65 0266*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
043FD8 74 69 6C 65 0267*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
043FED 74 69 6C 65 0268*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044002 74 69 6C 65 0269*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
044017 74 69 6C 65 0270*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
04402C 74 69 6C 65 0271*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
044041 74 69 6C 65 0272*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
044056 74 69 6C 65 0273*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
04406B 74 69 6C 65 0274*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
044080 74 69 6C 65 0275*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
044095 74 69 6C 65 0276*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
0440AA 74 69 6C 65 0277*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
0440BF 74 69 6C 65 0278*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
0440D4 74 69 6C 65 0279*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
0440E9 74 69 6C 65 0280*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0440FE 74 69 6C 65 0281*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
044113 74 69 6C 65 0282*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
044128 74 69 6C 65 0283*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
04413D 74 69 6C 65 0284*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
044152 74 69 6C 65 0285*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
044167 74 69 6C 65 0286*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
04417C 74 69 6C 65 0287*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
044191 74 69 6C 65 0288*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
0441A6 74 69 6C 65 0289*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
0441BB 74 69 6C 65 0290*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
0441D0 74 69 6C 65 0291*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0441E5 74 69 6C 65 0292*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
0441FA 74 69 6C 65 0293*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
04420F 74 69 6C 65 0294*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
044224 74 69 6C 65 0295*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
044239 74 69 6C 65 0296*   fn_dg_141: db "tiles/dg/0/141.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 31 2E 72 
       67 62 61 32 
       00          
04424E 74 69 6C 65 0297*   fn_dg_142: db "tiles/dg/0/142.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 32 2E 72 
       67 62 61 32 
       00          
044263 74 69 6C 65 0298*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
044278 74 69 6C 65 0299*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
04428D 74 69 6C 65 0300*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
0442A2 74 69 6C 65 0301*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
0442B7 74 69 6C 65 0302*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
0442CC 74 69 6C 65 0303*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
0442E1 74 69 6C 65 0304*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
0442F6 74 69 6C 65 0305*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
04430B 74 69 6C 65 0306*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
044320 74 69 6C 65 0307*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
044335 74 69 6C 65 0308*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
04434A 74 69 6C 65 0309*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
04435F 74 69 6C 65 0310*   fn_dg_157: db "tiles/dg/0/157.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 37 2E 72 
       67 62 61 32 
       00          
044374 74 69 6C 65 0311*   fn_dg_158: db "tiles/dg/0/158.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 38 2E 72 
       67 62 61 32 
       00          
044389 74 69 6C 65 0312*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
04439E 74 69 6C 65 0313*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
0443B3 74 69 6C 65 0314*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
0443C8 74 69 6C 65 0315*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
0443DD 74 69 6C 65 0316*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
0443F2 74 69 6C 65 0317*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
044407 74 69 6C 65 0318*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
04441C 74 69 6C 65 0319*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044431 74 69 6C 65 0320*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
044446 74 69 6C 65 0321*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
04445B 74 69 6C 65 0322*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
044470 74 69 6C 65 0323*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
044485 74 69 6C 65 0324*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
04449A 74 69 6C 65 0325*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
0444AF 74 69 6C 65 0326*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
0444C4 74 69 6C 65 0327*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
0444D9 74 69 6C 65 0328*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
0444EE 74 69 6C 65 0329*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
044503 74 69 6C 65 0330*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
044518 74 69 6C 65 0331*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04452D 74 69 6C 65 0332*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
044542 74 69 6C 65 0333*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
044557 74 69 6C 65 0334*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
04456C 74 69 6C 65 0335*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
044581 74 69 6C 65 0336*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
044596 74 69 6C 65 0337*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
0445AB 74 69 6C 65 0338*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
0445C0 74 69 6C 65 0339*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
0445D5 74 69 6C 65 0340*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
0445EA 74 69 6C 65 0341*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
0445FF 74 69 6C 65 0342*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
044614 74 69 6C 65 0343*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044629 74 69 6C 65 0344*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
04463E 74 69 6C 65 0345*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
044653 74 69 6C 65 0346*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
044668 74 69 6C 65 0347*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
04467D 74 69 6C 65 0348*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
044692 74 69 6C 65 0349*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
0446A7 74 69 6C 65 0350*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
0446BC 74 69 6C 65 0351*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
0446D1 74 69 6C 65 0352*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
0446E6 74 69 6C 65 0353*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
0446FB 74 69 6C 65 0354*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
044710 74 69 6C 65 0355*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044725 74 69 6C 65 0356*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
04473A 74 69 6C 65 0357*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
04474F 74 69 6C 65 0358*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
044764 74 69 6C 65 0359*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
044779 74 69 6C 65 0360*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
04478E 74 69 6C 65 0361*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
0447A3 74 69 6C 65 0362*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
0447B8 74 69 6C 65 0363*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
0447CD 74 69 6C 65 0364*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
0447E2 74 69 6C 65 0365*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
0447F7 74 69 6C 65 0366*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
04480C 74 69 6C 65 0367*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044821 74 69 6C 65 0368*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
044836 74 69 6C 65 0369*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
04484B 74 69 6C 65 0370*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
044860 74 69 6C 65 0371*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
044875 74 69 6C 65 0372*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
04488A 74 69 6C 65 0373*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
04489F 74 69 6C 65 0374*   fn_dg_243: db "tiles/dg/0/243.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 33 2E 72 
       67 62 61 32 
       00          
0448B4 74 69 6C 65 0375*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
0448C9 74 69 6C 65 0376*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
0448DE 74 69 6C 65 0377*   fn_dg_247: db "tiles/dg/0/247.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 37 2E 72 
       67 62 61 32 
       00          
0448F3 74 69 6C 65 0378*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044908             0052        ; include "images_tiles_xevious.inc"
044908             0053        include "images_sprites.inc"
044908             0001*   ; Generated by make_images.py
044908             0002*   
044908             0003*   sprites_num_images: equ 80
044908             0004*   
044908             0005*   ; buffer_ids:
044908             0006*   BUF_CRATER: equ 256
044908             0007*   BUF_EXPLOSION_A: equ 257
044908             0008*   BUF_EXPLOSION_B: equ 258
044908             0009*   BUF_EXPLOSION_C: equ 259
044908             0010*   BUF_EXPLOSION_D: equ 260
044908             0011*   BUF_EXPLOSION_E: equ 261
044908             0012*   BUF_FIREBALL_A: equ 262
044908             0013*   BUF_FIREBALL_B: equ 263
044908             0014*   BUF_LASER_A: equ 264
044908             0015*   BUF_LASER_B: equ 265
044908             0016*   BUF_PAD: equ 266
044908             0017*   BUF_SEEKER_000: equ 267
044908             0018*   BUF_SEEKER_008: equ 268
044908             0019*   BUF_SEEKER_016: equ 269
044908             0020*   BUF_SEEKER_024: equ 270
044908             0021*   BUF_SEEKER_032: equ 271
044908             0022*   BUF_SEEKER_040: equ 272
044908             0023*   BUF_SEEKER_048: equ 273
044908             0024*   BUF_SEEKER_056: equ 274
044908             0025*   BUF_SEEKER_064: equ 275
044908             0026*   BUF_SEEKER_072: equ 276
044908             0027*   BUF_SEEKER_080: equ 277
044908             0028*   BUF_SEEKER_088: equ 278
044908             0029*   BUF_SEEKER_096: equ 279
044908             0030*   BUF_SEEKER_104: equ 280
044908             0031*   BUF_SEEKER_112: equ 281
044908             0032*   BUF_SEEKER_120: equ 282
044908             0033*   BUF_SEEKER_128: equ 283
044908             0034*   BUF_SEEKER_136: equ 284
044908             0035*   BUF_SEEKER_144: equ 285
044908             0036*   BUF_SEEKER_152: equ 286
044908             0037*   BUF_SEEKER_160: equ 287
044908             0038*   BUF_SEEKER_168: equ 288
044908             0039*   BUF_SEEKER_176: equ 289
044908             0040*   BUF_SEEKER_184: equ 290
044908             0041*   BUF_SEEKER_192: equ 291
044908             0042*   BUF_SEEKER_200: equ 292
044908             0043*   BUF_SEEKER_208: equ 293
044908             0044*   BUF_SEEKER_216: equ 294
044908             0045*   BUF_SEEKER_224: equ 295
044908             0046*   BUF_SEEKER_232: equ 296
044908             0047*   BUF_SEEKER_240: equ 297
044908             0048*   BUF_SEEKER_248: equ 298
044908             0049*   BUF_SHIP_0L: equ 299
044908             0050*   BUF_SHIP_1C: equ 300
044908             0051*   BUF_SHIP_2R: equ 301
044908             0052*   BUF_SHIP_SMALL: equ 302
044908             0053*   BUF_TEST_STRIPES: equ 303
044908             0054*   BUF_TURRET_000: equ 304
044908             0055*   BUF_TURRET_008: equ 305
044908             0056*   BUF_TURRET_016: equ 306
044908             0057*   BUF_TURRET_024: equ 307
044908             0058*   BUF_TURRET_032: equ 308
044908             0059*   BUF_TURRET_040: equ 309
044908             0060*   BUF_TURRET_048: equ 310
044908             0061*   BUF_TURRET_056: equ 311
044908             0062*   BUF_TURRET_064: equ 312
044908             0063*   BUF_TURRET_072: equ 313
044908             0064*   BUF_TURRET_080: equ 314
044908             0065*   BUF_TURRET_088: equ 315
044908             0066*   BUF_TURRET_096: equ 316
044908             0067*   BUF_TURRET_104: equ 317
044908             0068*   BUF_TURRET_112: equ 318
044908             0069*   BUF_TURRET_120: equ 319
044908             0070*   BUF_TURRET_128: equ 320
044908             0071*   BUF_TURRET_136: equ 321
044908             0072*   BUF_TURRET_144: equ 322
044908             0073*   BUF_TURRET_152: equ 323
044908             0074*   BUF_TURRET_160: equ 324
044908             0075*   BUF_TURRET_168: equ 325
044908             0076*   BUF_TURRET_176: equ 326
044908             0077*   BUF_TURRET_184: equ 327
044908             0078*   BUF_TURRET_192: equ 328
044908             0079*   BUF_TURRET_200: equ 329
044908             0080*   BUF_TURRET_208: equ 330
044908             0081*   BUF_TURRET_216: equ 331
044908             0082*   BUF_TURRET_224: equ 332
044908             0083*   BUF_TURRET_232: equ 333
044908             0084*   BUF_TURRET_240: equ 334
044908             0085*   BUF_TURRET_248: equ 335
044908             0086*   
044908             0087*   sprites_image_list: ; type; width; height; size; filename; bufferId:
044908 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       A8 4E 04 00 
       01 00       
04491A 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_explosion_a, 257
       00 00 10 00 
       00 00 01 00 
       BD 4E 04 01 
       01 00       
04492C 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_explosion_b, 258
       00 00 10 00 
       00 00 01 00 
       D7 4E 04 02 
       01 00       
04493E 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_explosion_c, 259
       00 00 10 00 
       00 00 01 00 
       F1 4E 04 03 
       01 00       
044950 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_explosion_d, 260
       00 00 10 00 
       00 00 01 00 
       0B 4F 04 04 
       01 00       
044962 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_explosion_e, 261
       00 00 10 00 
       00 00 01 00 
       25 4F 04 05 
       01 00       
044974 01 00 00 07 0094*   	dl 1, 7, 7, 49, fn_fireball_a, 262
       00 00 07 00 
       00 31 00 00 
       3F 4F 04 06 
       01 00       
044986 01 00 00 07 0095*   	dl 1, 7, 7, 49, fn_fireball_b, 263
       00 00 07 00 
       00 31 00 00 
       58 4F 04 07 
       01 00       
044998 01 00 00 05 0096*   	dl 1, 5, 13, 65, fn_laser_a, 264
       00 00 0D 00 
       00 41 00 00 
       71 4F 04 08 
       01 00       
0449AA 01 00 00 05 0097*   	dl 1, 5, 13, 65, fn_laser_b, 265
       00 00 0D 00 
       00 41 00 00 
       87 4F 04 09 
       01 00       
0449BC 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_pad, 266
       00 00 10 00 
       00 00 01 00 
       9D 4F 04 0A 
       01 00       
0449CE 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_seeker_000, 267
       00 00 10 00 
       00 00 01 00 
       AF 4F 04 0B 
       01 00       
0449E0 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_seeker_008, 268
       00 00 10 00 
       00 00 01 00 
       C8 4F 04 0C 
       01 00       
0449F2 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_seeker_016, 269
       00 00 10 00 
       00 00 01 00 
       E1 4F 04 0D 
       01 00       
044A04 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_seeker_024, 270
       00 00 10 00 
       00 00 01 00 
       FA 4F 04 0E 
       01 00       
044A16 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_seeker_032, 271
       00 00 10 00 
       00 00 01 00 
       13 50 04 0F 
       01 00       
044A28 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_seeker_040, 272
       00 00 10 00 
       00 00 01 00 
       2C 50 04 10 
       01 00       
044A3A 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_seeker_048, 273
       00 00 10 00 
       00 00 01 00 
       45 50 04 11 
       01 00       
044A4C 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_seeker_056, 274
       00 00 10 00 
       00 00 01 00 
       5E 50 04 12 
       01 00       
044A5E 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_seeker_064, 275
       00 00 10 00 
       00 00 01 00 
       77 50 04 13 
       01 00       
044A70 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_seeker_072, 276
       00 00 10 00 
       00 00 01 00 
       90 50 04 14 
       01 00       
044A82 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_seeker_080, 277
       00 00 10 00 
       00 00 01 00 
       A9 50 04 15 
       01 00       
044A94 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_seeker_088, 278
       00 00 10 00 
       00 00 01 00 
       C2 50 04 16 
       01 00       
044AA6 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_seeker_096, 279
       00 00 10 00 
       00 00 01 00 
       DB 50 04 17 
       01 00       
044AB8 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_seeker_104, 280
       00 00 10 00 
       00 00 01 00 
       F4 50 04 18 
       01 00       
044ACA 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_seeker_112, 281
       00 00 10 00 
       00 00 01 00 
       0D 51 04 19 
       01 00       
044ADC 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_seeker_120, 282
       00 00 10 00 
       00 00 01 00 
       26 51 04 1A 
       01 00       
044AEE 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_seeker_128, 283
       00 00 10 00 
       00 00 01 00 
       3F 51 04 1B 
       01 00       
044B00 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_seeker_136, 284
       00 00 10 00 
       00 00 01 00 
       58 51 04 1C 
       01 00       
044B12 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_seeker_144, 285
       00 00 10 00 
       00 00 01 00 
       71 51 04 1D 
       01 00       
044B24 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_seeker_152, 286
       00 00 10 00 
       00 00 01 00 
       8A 51 04 1E 
       01 00       
044B36 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_seeker_160, 287
       00 00 10 00 
       00 00 01 00 
       A3 51 04 1F 
       01 00       
044B48 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_seeker_168, 288
       00 00 10 00 
       00 00 01 00 
       BC 51 04 20 
       01 00       
044B5A 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_seeker_176, 289
       00 00 10 00 
       00 00 01 00 
       D5 51 04 21 
       01 00       
044B6C 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_seeker_184, 290
       00 00 10 00 
       00 00 01 00 
       EE 51 04 22 
       01 00       
044B7E 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_seeker_192, 291
       00 00 10 00 
       00 00 01 00 
       07 52 04 23 
       01 00       
044B90 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_seeker_200, 292
       00 00 10 00 
       00 00 01 00 
       20 52 04 24 
       01 00       
044BA2 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_seeker_208, 293
       00 00 10 00 
       00 00 01 00 
       39 52 04 25 
       01 00       
044BB4 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_seeker_216, 294
       00 00 10 00 
       00 00 01 00 
       52 52 04 26 
       01 00       
044BC6 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_seeker_224, 295
       00 00 10 00 
       00 00 01 00 
       6B 52 04 27 
       01 00       
044BD8 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_seeker_232, 296
       00 00 10 00 
       00 00 01 00 
       84 52 04 28 
       01 00       
044BEA 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_seeker_240, 297
       00 00 10 00 
       00 00 01 00 
       9D 52 04 29 
       01 00       
044BFC 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_seeker_248, 298
       00 00 10 00 
       00 00 01 00 
       B6 52 04 2A 
       01 00       
044C0E 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_ship_0l, 299
       00 00 10 00 
       00 00 01 00 
       CF 52 04 2B 
       01 00       
044C20 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_ship_1c, 300
       00 00 10 00 
       00 00 01 00 
       E5 52 04 2C 
       01 00       
044C32 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_ship_2r, 301
       00 00 10 00 
       00 00 01 00 
       FB 52 04 2D 
       01 00       
044C44 01 00 00 08 0134*   	dl 1, 8, 8, 64, fn_ship_small, 302
       00 00 08 00 
       00 40 00 00 
       11 53 04 2E 
       01 00       
044C56 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_test_stripes, 303
       00 00 10 00 
       00 00 01 00 
       2A 53 04 2F 
       01 00       
044C68 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_turret_000, 304
       00 00 10 00 
       00 00 01 00 
       45 53 04 30 
       01 00       
044C7A 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_turret_008, 305
       00 00 10 00 
       00 00 01 00 
       5E 53 04 31 
       01 00       
044C8C 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_turret_016, 306
       00 00 10 00 
       00 00 01 00 
       77 53 04 32 
       01 00       
044C9E 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_turret_024, 307
       00 00 10 00 
       00 00 01 00 
       90 53 04 33 
       01 00       
044CB0 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_turret_032, 308
       00 00 10 00 
       00 00 01 00 
       A9 53 04 34 
       01 00       
044CC2 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_turret_040, 309
       00 00 10 00 
       00 00 01 00 
       C2 53 04 35 
       01 00       
044CD4 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_turret_048, 310
       00 00 10 00 
       00 00 01 00 
       DB 53 04 36 
       01 00       
044CE6 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_turret_056, 311
       00 00 10 00 
       00 00 01 00 
       F4 53 04 37 
       01 00       
044CF8 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_turret_064, 312
       00 00 10 00 
       00 00 01 00 
       0D 54 04 38 
       01 00       
044D0A 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_turret_072, 313
       00 00 10 00 
       00 00 01 00 
       26 54 04 39 
       01 00       
044D1C 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_turret_080, 314
       00 00 10 00 
       00 00 01 00 
       3F 54 04 3A 
       01 00       
044D2E 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_turret_088, 315
       00 00 10 00 
       00 00 01 00 
       58 54 04 3B 
       01 00       
044D40 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_turret_096, 316
       00 00 10 00 
       00 00 01 00 
       71 54 04 3C 
       01 00       
044D52 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_turret_104, 317
       00 00 10 00 
       00 00 01 00 
       8A 54 04 3D 
       01 00       
044D64 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_turret_112, 318
       00 00 10 00 
       00 00 01 00 
       A3 54 04 3E 
       01 00       
044D76 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_turret_120, 319
       00 00 10 00 
       00 00 01 00 
       BC 54 04 3F 
       01 00       
044D88 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_turret_128, 320
       00 00 10 00 
       00 00 01 00 
       D5 54 04 40 
       01 00       
044D9A 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_turret_136, 321
       00 00 10 00 
       00 00 01 00 
       EE 54 04 41 
       01 00       
044DAC 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_turret_144, 322
       00 00 10 00 
       00 00 01 00 
       07 55 04 42 
       01 00       
044DBE 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_turret_152, 323
       00 00 10 00 
       00 00 01 00 
       20 55 04 43 
       01 00       
044DD0 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_turret_160, 324
       00 00 10 00 
       00 00 01 00 
       39 55 04 44 
       01 00       
044DE2 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_turret_168, 325
       00 00 10 00 
       00 00 01 00 
       52 55 04 45 
       01 00       
044DF4 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_turret_176, 326
       00 00 10 00 
       00 00 01 00 
       6B 55 04 46 
       01 00       
044E06 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_turret_184, 327
       00 00 10 00 
       00 00 01 00 
       84 55 04 47 
       01 00       
044E18 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_turret_192, 328
       00 00 10 00 
       00 00 01 00 
       9D 55 04 48 
       01 00       
044E2A 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_turret_200, 329
       00 00 10 00 
       00 00 01 00 
       B6 55 04 49 
       01 00       
044E3C 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_turret_208, 330
       00 00 10 00 
       00 00 01 00 
       CF 55 04 4A 
       01 00       
044E4E 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_turret_216, 331
       00 00 10 00 
       00 00 01 00 
       E8 55 04 4B 
       01 00       
044E60 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_turret_224, 332
       00 00 10 00 
       00 00 01 00 
       01 56 04 4C 
       01 00       
044E72 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_turret_232, 333
       00 00 10 00 
       00 00 01 00 
       1A 56 04 4D 
       01 00       
044E84 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_turret_240, 334
       00 00 10 00 
       00 00 01 00 
       33 56 04 4E 
       01 00       
044E96 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_turret_248, 335
       00 00 10 00 
       00 00 01 00 
       4C 56 04 4F 
       01 00       
044EA8             0168*   
044EA8             0169*   ; files_list: ; filename:
044EA8 73 70 72 69 0170*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
044EBD 73 70 72 69 0171*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
044ED7 73 70 72 69 0172*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
044EF1 73 70 72 69 0173*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
044F0B 73 70 72 69 0174*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
044F25 73 70 72 69 0175*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
044F3F 73 70 72 69 0176*   fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
044F58 73 70 72 69 0177*   fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
044F71 73 70 72 69 0178*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
044F87 73 70 72 69 0179*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
044F9D 73 70 72 69 0180*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
044FAF 73 70 72 69 0181*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044FC8 73 70 72 69 0182*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044FE1 73 70 72 69 0183*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044FFA 73 70 72 69 0184*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045013 73 70 72 69 0185*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
04502C 73 70 72 69 0186*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045045 73 70 72 69 0187*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
04505E 73 70 72 69 0188*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045077 73 70 72 69 0189*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
045090 73 70 72 69 0190*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0450A9 73 70 72 69 0191*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0450C2 73 70 72 69 0192*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0450DB 73 70 72 69 0193*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
0450F4 73 70 72 69 0194*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04510D 73 70 72 69 0195*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045126 73 70 72 69 0196*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04513F 73 70 72 69 0197*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045158 73 70 72 69 0198*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045171 73 70 72 69 0199*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
04518A 73 70 72 69 0200*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0451A3 73 70 72 69 0201*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0451BC 73 70 72 69 0202*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0451D5 73 70 72 69 0203*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0451EE 73 70 72 69 0204*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045207 73 70 72 69 0205*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045220 73 70 72 69 0206*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045239 73 70 72 69 0207*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045252 73 70 72 69 0208*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
04526B 73 70 72 69 0209*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045284 73 70 72 69 0210*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
04529D 73 70 72 69 0211*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0452B6 73 70 72 69 0212*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0452CF 73 70 72 69 0213*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
0452E5 73 70 72 69 0214*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
0452FB 73 70 72 69 0215*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
045311 73 70 72 69 0216*   fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
04532A 73 70 72 69 0217*   fn_test_stripes: db "sprites/test_stripes.rgba2",0
       74 65 73 2F 
       74 65 73 74 
       5F 73 74 72 
       69 70 65 73 
       2E 72 67 62 
       61 32 00    
045345 73 70 72 69 0218*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
04535E 73 70 72 69 0219*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045377 73 70 72 69 0220*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045390 73 70 72 69 0221*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0453A9 73 70 72 69 0222*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0453C2 73 70 72 69 0223*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0453DB 73 70 72 69 0224*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0453F4 73 70 72 69 0225*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04540D 73 70 72 69 0226*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
045426 73 70 72 69 0227*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
04543F 73 70 72 69 0228*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045458 73 70 72 69 0229*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045471 73 70 72 69 0230*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
04548A 73 70 72 69 0231*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0454A3 73 70 72 69 0232*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0454BC 73 70 72 69 0233*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0454D5 73 70 72 69 0234*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0454EE 73 70 72 69 0235*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045507 73 70 72 69 0236*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045520 73 70 72 69 0237*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045539 73 70 72 69 0238*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045552 73 70 72 69 0239*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
04556B 73 70 72 69 0240*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045584 73 70 72 69 0241*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04559D 73 70 72 69 0242*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0455B6 73 70 72 69 0243*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0455CF 73 70 72 69 0244*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0455E8 73 70 72 69 0245*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045601 73 70 72 69 0246*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
04561A 73 70 72 69 0247*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045633 73 70 72 69 0248*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
04564C 73 70 72 69 0249*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045665             0054        include "images_ui.inc"
045665             0001*   ; Generated by make_images.py
045665             0002*   
045665             0003*   ui_num_images: equ 4
045665             0004*   
045665             0005*   ; buffer_ids:
045665             0006*   BUF_BEZEL_L: equ 0
045665             0007*   BUF_BEZEL_R: equ 1
045665             0008*   BUF_SPLASH_BG: equ 2
045665             0009*   BUF_SPLASH_LOGO: equ 3
045665             0010*   
045665             0011*   ui_image_list: ; type; width; height; size; filename; bufferId:
045665 01 00 00 80 0012*   	dl 1, 128, 384, 49152, fn_bezel_l, 0
       00 00 80 01 
       00 00 C0 00 
       AD 56 04 00 
       00 00       
045677 01 00 00 80 0013*   	dl 1, 128, 384, 49152, fn_bezel_r, 1
       00 00 80 01 
       00 00 C0 00 
       BE 56 04 01 
       00 00       
045689 01 00 00 40 0014*   	dl 1, 320, 240, 76800, fn_splash_bg, 2
       01 00 F0 00 
       00 00 2C 01 
       CF 56 04 02 
       00 00       
04569B 01 00 00 A0 0015*   	dl 1, 160, 106, 16960, fn_splash_logo, 3
       00 00 6A 00 
       00 40 42 00 
       E2 56 04 03 
       00 00       
0456AD             0016*   
0456AD             0017*   ; files_list: ; filename:
0456AD 75 69 2F 62 0018*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
0456BE 75 69 2F 62 0019*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
0456CF 75 69 2F 73 0020*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
0456E2 75 69 2F 73 0021*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
0456F7             0055        ; include "laser.inc"
0456F7             0056        include "levels.inc"
0456F7 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF          
045700             0002*   
045700             0003*   ; tileset indices
045700             0004*   tiles_dg: equ 0
045700             0005*   ; tiles_xevious: equ 1
045700 00 00 00    0006*   tileset_ptr_idx: dl 0
045703             0007*   tileset_ptrs:
045703             0008*       ; dl tiles_xevious_levels
045703 CB 57 04    0009*       dl tileset_00_levels
045706 00 00 00    0010*   tileset_ptrs_end: dl 0 ; list terminator
045709             0011*   
045709             0012*   ; get a pointer to the current tileset
045709             0013*   ; inputs: tileset_ptr_idx
045709             0014*   ; returns: ix = pointer to tileset levels lut
045709             0015*   get_tileset_ptr:
045709 3A 00 57 04 0016*       ld a,(tileset_ptr_idx)
04570D 57          0017*       ld d,a ; d = tileset index
04570E 1E 03       0018*       ld e,3 ; three bytes per index record
045710 ED 5C       0019*       mlt de ; offset into tileset_ptrs lut
045712 DD 21 03 57 0020*       ld ix,tileset_ptrs
       04          
045717 DD 19       0021*       add ix,de ; ix = pointer to tileset_ptrs record
045719 C9          0022*       ret
04571A             0023*   ; end get_tileset_ptr
04571A             0024*   
04571A             0025*   ; intialize a tileset
04571A             0026*   ; inputs: a = index into tileset_ptrs
04571A             0027*   init_tileset:
04571A 32 00 57 04 0028*       ld (tileset_ptr_idx),a ; store new tileset index
04571E CD 09 57 04 0029*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
045722 DD 37 00    0030*       ld ix,(ix) ; ix = pointer to tileset levels lut
045725 DD 7E FF    0031*       ld a,(ix-1) ; number of levels in the tileset
045728 32 58 57 04 0032*       ld (num_levels),a
04572C AF          0033*       xor a ; reset current level to zero
04572D 32 57 57 04 0034*       ld (cur_level),a
045731 C3 89 57 04 0035*       jp init_level
045735             0036*   ; end init_tileset
045735             0037*   
045735             0038*   next_tileset:
045735 21 00 57 04 0039*       ld hl,tileset_ptr_idx
045739 34          0040*       inc (hl) ; bump to next index
04573A CD 09 57 04 0041*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
04573E DD 27 00    0042*       ld hl,(ix) ; ix = pointer to tileset levels lut
045741             0043*       sign_hlu ; check for list terminator (0)
045741 19          0001*M1     add hl,de
045742 B7          0002*M1     or a ; clear flags
045743 ED 52       0003*M1     sbc hl,de
045745 C2 53 57 04 0044*       jp nz,@F ; not end of list
045749 3E FF       0045*       ld a,-1 ; will wrap around to zero on the next iteration
04574B 32 00 57 04 0046*       ld (tileset_ptr_idx),a
04574F C3 35 57 04 0047*       jp next_tileset ; try again
045753             0048*   @@:
045753 C3 1A 57 04 0049*       jp init_tileset
045757             0050*   ; end next_tileset
045757             0051*   
045757 00          0052*   cur_level: db 0
045758 00          0053*   num_levels: db 0
045759             0054*   
045759             0055*   ; get a pointer to the current level lookup record
045759             0056*   ; inputs: tileset_ptr_idx, cur_level
045759             0057*   ; returns: ix = pointer to level definition
045759             0058*   get_level_ptr:
045759 CD 09 57 04 0059*       call get_tileset_ptr
04575D DD 37 00    0060*       ld ix,(ix) ; ix = pointer to tileset levels lut
045760 3A 57 57 04 0061*       ld a,(cur_level)
045764 57          0062*       ld d,a ; d = level index
045765 1E 03       0063*       ld e,3 ; three bytes per level record
045767 ED 5C       0064*       mlt de ; offset into tileset levels lut
045769 DD 19       0065*       add ix,de ; ix = pointer to level record
04576B C9          0066*       ret
04576C             0067*   ; end get_level_ptr
04576C             0068*   
04576C             0069*   ; advance to the next level in the current tileset
04576C             0070*   ; inputs: tileset_ptr_idx, cur_level
04576C             0071*   next_level:
04576C 21 57 57 04 0072*       ld hl,cur_level
045770 34          0073*       inc (hl) ; bump to next level
045771 CD 59 57 04 0074*       call get_level_ptr ; ix points to current level lookup record
045775 DD 27 00    0075*       ld hl,(ix) ; hl = pointer to next level lookup record
045778             0076*       sign_hlu ; check for list terminator (0)
045778 19          0001*M1     add hl,de
045779 B7          0002*M1     or a ; clear flags
04577A ED 52       0003*M1     sbc hl,de
04577C C2 89 57 04 0077*       jp nz,@F ; not end of list
045780 AF          0078*       xor a ; reset level to zero
045781 32 57 57 04 0079*       ld (cur_level),a
045785 C3 35 57 04 0080*       jp next_tileset ; try next tileset
045789             0081*   @@: ; fall through to init_level
045789             0082*   ; end next_level
045789             0083*   
045789             0084*   ; inputs: ix pointed to tileset level definition
045789             0085*   init_level:
045789 CD 59 57 04 0086*       call get_level_ptr ; ix points to level lookup record
04578D DD 37 00    0087*       ld ix,(ix) ; ix points to level definition
045790             0088*   ; set tiles_cols
045790 DD 7E 00    0089*       ld a,(ix+0)
045793 32 06 66 04 0090*       ld (tiles_cols),a
045797             0091*   ; set tiles_row counter
045797 DD 7E 01    0092*       ld a,(ix+1)
04579A 32 03 66 04 0093*       ld (tiles_row),a
04579E             0094*   ; set cur_baseBufferId
04579E DD 27 04    0095*       ld hl,(ix+4)
0457A1 22 07 66 04 0096*       ld (cur_baseBufferId),hl
0457A5             0097*   ; set tiles_row_defs
0457A5 ED 32 07    0098*       lea ix,ix+7 ; ix points to definition of first tile of first row
0457A8 DD 22 00 66 0099*       ld (tiles_row_defs),ix
       04          
0457AD             0100*   ; print_level:
0457AD             0101*   level_x: equ 48
0457AD             0102*   level_y: equ 0
0457AD 0E 30       0103*       ld c,level_x
0457AF 06 00       0104*       ld b,level_y
0457B1 CD 37 1A 04 0105*       call vdu_move_cursor
0457B5 CD 10 01 04 0106*       call printInline
0457B9 4C 65 76 65 0107*       asciz "Level: "
       6C 3A 20 00 
0457C1 3A 57 57 04 0108*       ld a,(cur_level)
0457C5 CD 5A 01 04 0109*       call printHexA
0457C9             0110*       ; call printNewLine
0457C9             0111*       ; ld hl,(cur_baseBufferId)
0457C9             0112*       ; call printDec
0457C9             0113*   
0457C9             0114*   ; ; draw initial background tiles
0457C9             0115*   ; ; TODO: make this a stars background
0457C9             0116*   ;     ld hl,BUF_STATION_BG_00
0457C9             0117*   ;     call vdu_buff_select
0457C9             0118*   ;     ld bc,0
0457C9             0119*   ;     ld de,field_top
0457C9             0120*   ;     call vdu_plot_bmp
0457C9             0121*   
0457C9             0122*   ;     ld hl,BUF_STATION_BG_01
0457C9             0123*   ;     call vdu_buff_select
0457C9             0124*   ;     ld bc,0
0457C9             0125*   ;     ld de,field_top+256
0457C9             0126*   ;     call vdu_plot_bmp
0457C9             0127*   
0457C9 C9          0128*       ret
0457CA             0129*   ; end init_level
0457CA             0057        include "levels_tileset_0.inc"
0457CA             0001*   ; Generated from tiles/dg/dg0_00.tmx
0457CA             0002*   
0457CA 01          0003*   tileset_00_num_levels: db 1
0457CB             0004*   
0457CB             0005*   tileset_00_levels:
0457CB D1 57 04    0006*   	dl tileset_00_level_00
0457CE 00 00 00    0007*   	dl 0 ; list terminator
0457D1             0008*   
0457D1             0009*   tileset_00_level_00: ; Level 0
0457D1 10          0010*   	db 16          ; num cols
0457D2 20 00 00    0011*   	dl 32          ; num rows
0457D5 00 02 00    0012*   	dl 512 ; base bufferId
0457D8 00 00 00 00 0013*   	db 000,000,000,000,000,101,116,115,100,115,104,000,000,000,000,000
       00 65 74 73 
       64 73 68 00 
       00 00 00 00 
0457E8 00 00 00 65 0014*   	db 000,000,000,101,098,116,113,114,114,115,116,097,104,000,000,000
       62 74 71 72 
       72 73 74 61 
       68 00 00 00 
0457F8 00 65 61 F5 0015*   	db 000,101,097,245,246,098,097,098,098,099,113,113,114,098,104,000
       F6 62 61 62 
       62 63 71 71 
       72 62 68 00 
045808 00 74 71 88 0016*   	db 000,116,113,136,137,115,113,114,113,114,098,099,113,114,100,000
       89 73 71 72 
       71 72 62 63 
       71 72 64 00 
045818 65 72 61 96 0017*   	db 101,114,097,150,151,099,097,105,098,098,081,082,074,083,084,104
       97 63 61 69 
       62 62 51 52 
       4A 53 54 68 
045828 63 71 72 96 0018*   	db 099,113,114,150,151,167,216,216,182,113,065,066,248,067,068,116
       97 A7 D8 D8 
       B6 71 41 42 
       F8 43 44 74 
045838 71 69 62 9A 0019*   	db 113,105,098,154,155,097,098,097,165,168,055,248,000,248,056,114
       9B 61 62 61 
       A5 A8 37 F8 
       00 F8 38 72 
045848 71 72 64 72 0020*   	db 113,114,100,114,113,100,113,114,113,114,049,050,248,051,052,098
       71 64 71 72 
       71 72 31 32 
       F8 33 34 62 
045858 61 62 61 64 0021*   	db 097,098,097,100,097,098,100,098,098,098,033,034,074,035,036,099
       61 62 64 62 
       62 62 21 22 
       4A 23 24 63 
045868 71 64 71 72 0022*   	db 113,100,113,114,113,114,121,114,115,113,087,088,188,113,100,113
       71 72 79 72 
       73 71 57 58 
       BC 71 64 71 
045878 61 62 59 5A 0023*   	db 097,098,089,090,091,098,114,098,136,137,071,072,219,097,098,097
       5B 62 72 62 
       88 89 47 48 
       DB 61 62 61 
045888 64 71 49 05 0024*   	db 100,113,073,005,075,171,220,172,134,135,171,220,236,220,220,172
       4B AB DC AC 
       86 87 AB DC 
       EC DC DC AC 
045898 62 64 39 3A 0025*   	db 098,100,057,058,059,097,098,100,134,135,099,100,097,098,100,098
       3B 61 62 64 
       86 87 63 64 
       61 62 64 62 
0458A8 72 62 72 73 0026*   	db 114,098,114,115,113,116,099,113,154,155,115,113,100,113,114,113
       71 74 63 71 
       9A 9B 73 71 
       64 71 72 71 
0458B8 62 72 62 63 0027*   	db 098,114,098,099,113,114,105,114,241,242,099,097,098,097,098,100
       71 72 69 72 
       F1 F2 63 61 
       62 61 62 64 
0458C8 73 79 71 72 0028*   	db 115,121,113,114,097,098,113,114,180,114,113,100,113,121,113,114
       61 62 71 72 
       B4 72 71 64 
       71 79 71 72 
0458D8 61 62 98 99 0029*   	db 097,098,152,153,098,152,153,098,211,100,097,098,100,243,098,098
       62 98 99 62 
       D3 64 61 62 
       64 F3 62 62 
0458E8 64 71 86 87 0030*   	db 100,113,134,135,114,134,135,115,195,212,212,212,212,243,114,113
       72 86 87 73 
       C3 D4 D4 D4 
       D4 F3 72 71 
0458F8 62 61 F5 F6 0031*   	db 098,097,245,246,098,245,246,099,211,114,099,097,098,243,098,100
       62 F5 F6 63 
       D3 72 63 61 
       62 F3 62 64 
045908 71 72 F1 F2 0032*   	db 113,114,241,242,115,241,242,163,162,098,105,100,087,088,113,114
       73 F1 F2 A3 
       A2 62 69 64 
       57 58 71 72 
045918 73 71 51 52 0033*   	db 115,113,081,082,074,083,084,098,114,115,113,116,071,072,098,098
       4A 53 54 62 
       72 73 71 74 
       47 48 62 62 
045928 63 61 41 42 0034*   	db 099,097,065,066,248,067,068,113,089,090,090,090,090,091,114,113
       F8 43 44 71 
       59 5A 5A 5A 
       5A 5B 72 71 
045938 71 64 37 F8 0035*   	db 113,100,055,248,000,248,056,114,073,148,098,040,105,075,098,100
       00 F8 38 72 
       49 94 62 28 
       69 4B 62 64 
045948 61 62 31 32 0036*   	db 097,098,049,050,248,051,052,114,073,132,056,000,055,075,113,114
       F8 33 34 72 
       49 84 38 00 
       37 4B 71 72 
045958 71 64 21 22 0037*   	db 113,100,033,034,074,035,036,114,073,247,116,040,123,075,098,121
       4A 23 24 72 
       49 F7 74 28 
       7B 4B 62 79 
045968 61 62 F1 F2 0038*   	db 097,098,241,242,100,241,242,098,073,113,243,121,107,075,099,113
       64 F1 F2 62 
       49 71 F3 79 
       6B 4B 63 71 
045978 67 71 86 87 0039*   	db 103,113,134,135,114,134,135,113,057,058,058,058,058,059,114,102
       72 86 87 71 
       39 3A 3A 3A 
       3A 3B 72 66 
045988 00 64 9A 9B 0040*   	db 000,100,154,155,098,154,155,100,098,098,099,180,098,100,098,000
       62 9A 9B 64 
       62 62 63 B4 
       62 64 62 00 
045998 00 67 72 63 0041*   	db 000,103,114,099,113,114,114,115,163,212,212,196,113,114,098,000
       71 72 72 73 
       A3 D4 D4 C4 
       71 72 62 00 
0459A8 00 00 62 71 0042*   	db 000,000,098,113,121,098,098,099,105,098,097,211,100,098,102,000
       79 62 62 63 
       69 62 61 D3 
       64 62 66 00 
0459B8 00 00 67 71 0043*   	db 000,000,103,113,114,100,114,113,100,113,114,179,114,102,000,000
       72 64 72 71 
       64 71 72 B3 
       72 66 00 00 
0459C8 00 00 00 00 0044*   	db 000,000,000,000,000,103,100,097,098,100,102,000,000,000,000,000
       00 67 64 61 
       62 64 66 00 
       00 00 00 00 
0459D8             0058        ; include "levels_xevious.inc"
0459D8             0059        include "player.inc"
0459D8 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
045A00             0002*   
045A00             0003*   ; ######## GAME STATE VARIABLES #######
045A00             0004*   ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
045A00 00 00 00    0005*   player_score: dl 0 ; integer
045A03             0006*   ; player current shields,binary
045A03             0007*   ; when < 0 player splodes
045A03             0008*   ; restores to player_max_shields when new ship spawns
045A03 10 00 00    0009*   player_shields: dl 16 ; integer
045A06             0010*   ; max player shields,binary
045A06             0011*   ; can increase with power-ups (todo)
045A06 10 00 00    0012*   player_max_shields: dl 16 ; integer
045A09             0013*   ; when reaches zero,game ends
045A09             0014*   ; can increase based on TODO
045A09 03          0015*   player_ships: db 3 ; integer
045A0A             0016*   
045A0A             0017*   speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
045A0A             0018*   
045A0A 00          0019*   player_weapons_count: db 0
045A0B             0020*   player_weapons_max: equ 4
045A0B             0021*   
045A0B             0022*   player_defaults:
045A0B 05          0023*       db player               ; type
045A0C 2B 01 00    0024*       dl BUF_SHIP_0L          ; base_bufferId
045A0F F0 5E 04    0025*       dl do_player            ; move_program
045A12 00          0026*       db 0                    ; collisions
045A13 10          0027*       db 16                   ; dim_x
045A14 10          0028*       db 16                   ; dim_y
045A15 01          0029*       db 1                    ; num_orientations
045A16 01          0030*       db 1                    ; num_animations
045A17 00          0031*       db 0                    ; animation
045A18 00          0032*       db 0                    ; animation_timer
045A19 00          0033*       db 0                    ; move_timer
045A1A 00          0034*       db 0                    ; move_step
045A1B 00          0035*       db 0                    ; points
045A1C 00          0036*       db 0                    ; shield_damage
045A1D 00          0037*       db 0                    ; frame
045A1E             0038*   
045A1E             0039*   
045A1E             0040*   ; set initial player position
045A1E             0041*   ; inputs: none,everything is hardcoded
045A1E             0042*   ; outputs: player_x/y set to bottom-left corner of screen
045A1E             0043*   ; destroys: a
045A1E             0044*   player_init:
045A1E FD 21 72 70 0045*       ld iy,player_begin
       04          
045A23 FD 22 3F 69 0046*       ld (table_pointer),iy
       04          
045A28 FD 7E 00    0047*       ld a,(iy+sprite_id)
045A2B CD 00 20 04 0048*       call vdu_sprite_select
045A2F CD 13 20 04 0049*       call vdu_sprite_clear_frames
045A33 21 2B 01 00 0050*       ld hl,BUF_SHIP_0L
045A37 CD 55 21 04 0051*       call vdu_sprite_add_buff
045A3B 21 2C 01 00 0052*       ld hl,BUF_SHIP_1C
045A3F CD 55 21 04 0053*       call vdu_sprite_add_buff
045A43 21 2D 01 00 0054*       ld hl,BUF_SHIP_2R
045A47 CD 55 21 04 0055*       call vdu_sprite_add_buff
045A4B 01 00 00 00 0056*       ld bc,0
045A4F FD 0F 01    0057*       ld (iy+sprite_x),bc
045A52 11 00 6F 01 0058*       ld de,sprite_bottom*256 ; max sprite y-coordinate
045A56 FD 1F 04    0059*       ld (iy+sprite_y),de
045A59 CD CC 20 04 0060*       call vdu_sprite_move_abs168
045A5D CD 76 20 04 0061*       call vdu_sprite_show
045A61 21 FB 5E 04 0062*       ld hl,player_alive
045A65 22 ED 5E 04 0063*       ld (player_state),hl
045A69 FD CB 1D F6 0064*       set sprite_alive,(iy+sprite_collisions)
045A6D C9          0065*       ret
045A6E             0066*   
045A6E             0067*   ; process player keyboard input, set player bitmap
045A6E             0068*   ; velocities and draw player bitmap at updated coordinates
045A6E             0069*   ; Inputs: player_x/y set at desired position
045A6E             0070*   ; Returns: player bitmap drawn at updated position
045A6E             0071*   ; Destroys: probably everything except maybe iy
045A6E             0072*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
045A6E             0073*   ; TODO: requires sprite implementation
045A6E             0074*   player_input:
045A6E FD 21 72 70 0075*       ld iy,player_begin
       04          
045A73 FD 22 3F 69 0076*       ld (table_pointer),iy
       04          
045A78             0077*   ; ; did we die last frame?
045A78             0078*   ;     ld a,(player_collisions)
045A78             0079*   ;     and %00000010 ; zero flag will be set if not dead
045A78             0080*   ;     jr z,player_not_dead
045A78             0081*   ; ; yes we died
045A78             0082*   ;     call kill_player
045A78             0083*   ;     ret ; done
045A78             0084*   player_not_dead: ; yay we didn't die
045A78             0085*   ; reset player component velocities to zero as the default
045A78 21 00 00 00 0086*       ld hl,0
045A7C FD 2F 07    0087*       ld (iy+sprite_xvel),hl
045A7F FD 2F 0A    0088*       ld (iy+sprite_yvel),hl
045A82             0089*   ; make ship the active sprite
045A82 FD 7E 00    0090*       ld a,(iy+sprite_id)
045A85 CD 00 20 04 0091*       call vdu_sprite_select
045A89             0092*   ; check for keypresses and branch accordingly
045A89             0093*   ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
045A89             0094*       MOSCALL    mos_getkbmap ;ix = pointer to MOS virtual keys table
045A89 3E 1E       0001*M1 			LD	A, function
045A8B 5B CF       0002*M1 			RST.LIL	08h
045A8D             0095*   ; we test all four arrow keys and add/subract velocities accordingly
045A8D             0096*   ; this handles the case where two opposing movement keys
045A8D             0097*   ; are down simultaneously (velocities will net to zero)
045A8D             0098*   ; and allows diagonal movement when a vertical and horizontal key are down
045A8D             0099*   ; it also allows movement and action keys to be detected simultaneously
045A8D             0100*   ; so we can walk and chew gum at the same time
045A8D 3E 01       0101*       ld a,1 ; set ship's default animation to center
045A8F             0102*           ; if left and right are both down a will net to
045A8F             0103*   
045A8F             0104*   ; 99 Space: fire main weapon
045A8F DD CB 0C 56 0105*       bit 2,(ix+12)
045A93 F5          0106*       push af ; save flags for after player movement processed
045A94             0107*   ; 26 Left: move player left
045A94 DD CB 03 4E 0108*       bit 1,(ix+3)
045A98 CA A8 5A 04 0109*       jp z,@F
045A9C FD 27 07    0110*       ld hl,(iy+sprite_xvel)
045A9F 01 00 FD FF 0111*       ld bc,-speed_player
045AA3 09          0112*       add hl,bc
045AA4 FD 2F 07    0113*       ld (iy+sprite_xvel),hl
045AA7 3D          0114*       dec a ; set ship's animation to left
045AA8             0115*   @@:
045AA8             0116*   ; 122 Right: move player right
045AA8 DD CB 0F 4E 0117*       bit 1,(ix+15)
045AAC CA BC 5A 04 0118*       jp z,@F
045AB0 FD 27 07    0119*       ld hl,(iy+sprite_xvel)
045AB3 01 00 03 00 0120*       ld bc,speed_player
045AB7 09          0121*       add hl,bc
045AB8 FD 2F 07    0122*       ld (iy+sprite_xvel),hl
045ABB 3C          0123*       inc a ; set ship's animation to right
045ABC             0124*   @@:
045ABC             0125*   ; 58 Up: move player up
045ABC DD CB 07 4E 0126*       bit 1,(ix+7)
045AC0 CA CF 5A 04 0127*       jp z,@F
045AC4 FD 27 0A    0128*       ld hl,(iy+sprite_yvel)
045AC7 01 00 FD FF 0129*       ld bc,-speed_player
045ACB 09          0130*       add hl,bc
045ACC FD 2F 0A    0131*       ld (iy+sprite_yvel),hl
045ACF             0132*   @@:
045ACF             0133*   ; 42 Down: move player down
045ACF DD CB 05 4E 0134*       bit 1,(ix+5)
045AD3 CA E2 5A 04 0135*       jp z,@F
045AD7 FD 27 0A    0136*       ld hl,(iy+sprite_yvel)
045ADA 01 00 03 00 0137*       ld bc,speed_player
045ADE 09          0138*       add hl,bc
045ADF FD 2F 0A    0139*       ld (iy+sprite_yvel),hl
045AE2             0140*   @@:
045AE2             0141*   ; a should land here loaded with the correct frame
045AE2 CD 63 20 04 0142*       call vdu_sprite_select_frame
045AE6             0143*   ; draw player at updated position
045AE6 FD 21 72 70 0144*       ld iy,player_begin
       04          
045AEB FD 22 3F 69 0145*       ld (table_pointer),iy
       04          
045AF0 CD 03 6A 04 0146*       call move_sprite
045AF4 FD 07 01    0147*       ld bc,(iy+sprite_x)
045AF7 FD 17 04    0148*       ld de,(iy+sprite_y)
045AFA CD CC 20 04 0149*       call vdu_sprite_move_abs168
045AFE             0150*   ; process player laser fire
045AFE F1          0151*       pop af ; restore flags from spacebar check
045AFF C2 1C 5C 04 0152*       jp nz,player_spawn_laser ; will return to caller from there
045B03 C9          0153*       ret
045B04             0154*   ; end player_input
045B04             0155*   
045B04             0156*   score_x: equ 48
045B04             0157*   score_y: equ 1
045B04             0158*   ; prints the player's score
045B04             0159*   print_score:
045B04 0E 30       0160*       ld c,score_x
045B06 06 01       0161*       ld b,score_y
045B08 CD 37 1A 04 0162*       call vdu_move_cursor
045B0C             0163*   ; TODO: make this part of the UI setup and only print as needed
045B0C CD 10 01 04 0164*       call printInline
045B10 53 63 6F 72 0165*       asciz "Score:"
       65 3A 00    
045B17             0166*   ; END TODO
045B17 2A 00 5A 04 0167*       ld hl,(player_score)
045B1B CD 16 02 04 0168*       call printDec
045B1F C9          0169*       ret
045B20             0170*   ; end print_score
045B20             0171*   
045B20             0172*   ; ###################################################################
045B20             0173*   ; TODO: the below is all stuff from the original code we need to port
045B20             0174*   ; ###################################################################
045B20             0175*   
045B20             0176*   kill_player:
045B20             0177*   ; ; set player status to dead
045B20             0178*   ;     xor a; sets all player flags to zero
045B20             0179*   ;     ld (player_collisions),a
045B20             0180*   ; ; deduct a ship from the inventory
045B20             0181*   ;     ld a,(player_ships)
045B20             0182*   ;     dec a
045B20             0183*   ;     ld (player_ships),a
045B20             0184*   ; ; are we out of ships?
045B20             0185*   ;     jp z,game_over
045B20             0186*   ; ; wait a few ticks
045B20             0187*   ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
045B20             0188*   ;     ld (player_move_timer),a
045B20             0189*   ; kill_player_loop:
045B20             0190*   ;     call vdu_vblank
045B20             0191*   ;     ld a,(player_move_timer)
045B20             0192*   ;     dec a
045B20             0193*   ;     ld (player_move_timer),a
045B20             0194*   ;     jr nz,kill_player_loop
045B20             0195*   ;     call player_init ; player respawn if timer zero
045B20 C9          0196*       ret ; and out
045B21             0197*   
045B21             0198*   ; draws the player's shields level
045B21             0199*   ; draw_shields:
045B21             0200*   ; TODO: Agonize this routine
045B21             0201*   ; ; prep the loop to draw the bars
045B21             0202*   ;     ld a,(player_shields) ; snag shields
045B21             0203*   ;     and a
045B21             0204*   ;     ret z ; don't draw if zero shields
045B21             0205*   ; ; set loop counter and drawing position
045B21             0206*   ;     ld b,a ; loop counter
045B21             0207*   ;     ld hl,#5300+48+12
045B21             0208*   ; ; set color based on bars remaining
045B21             0209*   ;     ld c,103 ; bright green 28fe0a
045B21             0210*   ;     cp 9
045B21             0211*   ;     jp p,draw_shields_loop
045B21             0212*   ;     ld c,74 ; bright yellow eafe5b
045B21             0213*   ;     cp 3
045B21             0214*   ;     jp p,draw_shields_loop
045B21             0215*   ;     ld c,28 ; bright red fe0a0a
045B21             0216*   ; draw_shields_loop:
045B21             0217*   ;     push bc ; yup,outta
045B21             0218*   ;     push hl ; registers again
045B21             0219*   ;     ; ld a,#A8 ; ▀,168
045B21             0220*   ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
045B21             0221*   ;     ; call draw_char
045B21             0222*   ;     call draw_num ; we nuked draw_char for the time being
045B21             0223*   ;     pop hl
045B21             0224*   ;     ld a,8
045B21             0225*   ;     add a,l
045B21             0226*   ;     ld l,a
045B21             0227*   ;     pop bc
045B21             0228*   ;     djnz draw_shields_loop
045B21             0229*       ; ret
045B21             0230*   
045B21             0231*   
045B21             0232*   ; draw_lives:
045B21             0233*   ;     ld hl,player_small ; make small yellow ship the active sprite
045B21             0234*   ;     ld (sprite_base_bufferId),hl
045B21             0235*   ;     ; ld a,#80 ; northern orientation
045B21             0236*   ;     ; ld (sprite_orientation),a
045B21             0237*   ;     ld hl,0 ; north
045B21             0238*   ;     ld (sprite_heading),hl
045B21             0239*   ;     xor a
045B21             0240*   ;     ld (sprite_frame),a
045B21             0241*   ;     ld a,#56 ; top of visible screen
045B21             0242*   ;     ld (sprite_y+1),a
045B21             0243*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
045B21             0244*   ;     ld a,(player_ships)
045B21             0245*   ;     dec a ; we draw one fewer ships than lives
045B21             0246*   ;     ret z ; nothing to draw here, move along
045B21             0247*   ;     ld b,a ; loop counter
045B21             0248*   ;     ld a,256-16 ; initial x position
045B21             0249*   ; draw_lives_loop:
045B21             0250*   ;     ld (sprite_x+1),a
045B21             0251*   ;     push af
045B21             0252*   ;     push bc
045B21             0253*   ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
045B21             0254*   ;     pop bc
045B21             0255*   ;     pop af
045B21             0256*   ;     sub 10
045B21             0257*   ;     djnz draw_lives_loop
045B21             0258*   ;     ret
045B21             0060        include "player_laser.inc"
045B21 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
045C00             0002*   speed_laser: equ 4*256 ; 6 pixels per frame 16.8 fixed
045C00             0003*   tmr_laser: ds 6 ; rate timer for firing laser
       FF FF FF FF 
       FF FF 
045C06 28 00 00    0004*   tmr_laser_reset: dl 120/3
045C09             0005*   laser_animation_timer_reset: equ 2 ; animate every two frames
045C09             0006*   
045C09             0007*   
045C09             0008*   laser_defaults:
045C09 06          0009*       db player_air        ; type
045C0A 08 01 00    0010*       dl BUF_LASER_A	    ; base_bufferId
045C0D 77 5C 04    0011*       dl move_player_laser	; move_program
045C10 00          0012*       db 0 ; collisions
045C11 05          0013*       db 5	                ; dim_x
045C12 0D          0014*       db 13                   ; dim_y
045C13 01          0015*       db 1                    ; num_orientations
045C14 02          0016*       db 2                    ; num_animations
045C15 00          0017*       db 0	                ; animation
045C16 02          0018*       db laser_animation_timer_reset ; animation_timer
045C17 00          0019*       db 0	                ; move_timer
045C18 00          0020*       db 0	                ; move_step
045C19 00          0021*       db 0	                ; points
045C1A 00          0022*       db 0	                ; shield_damage
045C1B 00          0023*       db 0                    ; frame
045C1C             0024*   
045C1C             0025*   player_spawn_laser:
045C1C             0026*   ; check laser spawn timer
045C1C FD 21 00 5C 0027*       ld iy,tmr_laser
       04          
045C21 CD 21 19 04 0028*       call timestamp_tmr_get
045C25 F0          0029*       ret p ; not time to fire
045C26             0030*   ; check if at max weapons active
045C26 3A 0A 5A 04 0031*       ld a,(player_weapons_count)
045C2A FE 04       0032*       cp player_weapons_max
045C2C C8          0033*       ret z ; at max weapons active
045C2D 3C          0034*       inc a
045C2E 32 0A 5A 04 0035*       ld (player_weapons_count),a
045C32             0036*   ; reset timer
045C32 2A 06 5C 04 0037*       ld hl,(tmr_laser_reset)
045C36 CD 16 19 04 0038*       call timestamp_tmr_set
045C3A             0039*   ; fire the laser
045C3A DD 21 72 6F 0040*       ld ix,player_weapons_begin
       04          
045C3F 06 04       0041*       ld b,player_weapons_max
045C41 FD 21 72 70 0042*       ld iy,player_begin
       04          
045C46 FD 22 3F 69 0043*       ld (table_pointer),iy
       04          
045C4B 21 09 5C 04 0044*       ld hl,laser_defaults
045C4F CD 11 6C 04 0045*       call spawn_sprite_from_sprite_new
045C53 D0          0046*       ret nc ; no carry means no free sprite slots, so we go home
045C54             0047*   ; other specific initialization
045C54             0048*   ; ------------------------------------------------
045C54 FD 21 72 70 0049*       ld iy,player_begin
       04          
045C59             0050*   ; x-coordinate
045C59 FD 27 01    0051*       ld hl,(iy+sprite_x)
045C5C 11 00 05 00 0052*       ld de,5*256 ; horizontal center with player sprite
045C60 19          0053*       add hl,de
045C61 DD 2F 01    0054*       ld (ix+sprite_x),hl
045C64             0055*   ; y-coordinate
045C64 FD 27 04    0056*       ld hl,(iy+sprite_y)
045C67 11 00 FA FF 0057*       ld de,-6*256 ; set laser y a few pixels above player
045C6B 19          0058*       add hl,de
045C6C DD 2F 04    0059*       ld (ix+sprite_y),hl
045C6F             0060*   ; set laser velocity
045C6F 21 00 FC FF 0061*       ld hl,-speed_laser
045C73 DD 2F 0A    0062*       ld (ix+sprite_yvel),hl
045C76 C9          0063*       ret
045C77             0064*   ; end player_spawn_laser
045C77             0065*   
045C77             0066*   move_player_laser:
045C77             0067*   ; run the movement program for the laser player
045C77 CD 03 6A 04 0068*       call move_sprite
045C7B 3A 43 69 04 0069*       ld a,(sprite_screen_edge)
045C7F B7          0070*       or a ; a will be non-zero if have scrolled off screen
045C80 CA 8D 5C 04 0071*       jp z,@F ; still on screen
045C84 21 0A 5A 04 0072*       ld hl,player_weapons_count
045C88 35          0073*       dec (hl)
045C89 C3 A8 69 04 0074*       jp table_deactivate_sprite
045C8D             0075*   @@: ; check animation timer
045C8D FD 35 23    0076*       dec (iy+sprite_animation_timer)
045C90 C2 A4 5C 04 0077*       jp nz,@F
045C94 3E 02       0078*       ld a,laser_animation_timer_reset
045C96 FD 77 23    0079*       ld (iy+sprite_animation_timer),a
045C99 FD 7E 00    0080*       ld a,(iy+sprite_id)
045C9C CD 00 20 04 0081*       call vdu_sprite_select
045CA0 CD 47 20 04 0082*       call vdu_sprite_next_frame
045CA4             0083*   @@: ; all done
045CA4 C9          0084*       ret
045CA5             0085*   ; end move_player_laser
045CA5             0086*   
045CA5             0087*   init_player_laser:
045CA5             0088*   ; set pointer to laser sprite table
045CA5 FD 21 72 6F 0089*       ld iy,player_weapons_begin
       04          
045CAA FD 7E 00    0090*       ld a,(iy+sprite_id) ; sprite id
045CAD 1E 04       0091*       ld e,player_weapons_max ; sprite loop counter
045CAF             0092*   ; define laser sprites
045CAF             0093*   @sprites_loop:
045CAF F5          0094*       push af
045CB0 D5          0095*       push de
045CB1 CD 00 20 04 0096*   	call vdu_sprite_select
045CB5 CD 13 20 04 0097*   	call vdu_sprite_clear_frames
045CB9 21 08 01 00 0098*   	ld hl,BUF_LASER_A
045CBD 06 02       0099*   	ld b,2 ; two bitmaps for laser
045CBF             0100*   @frames_loop:
045CBF C5          0101*   	push bc
045CC0 E5          0102*   	push hl
045CC1 CD 55 21 04 0103*   	call vdu_sprite_add_buff
045CC5 E1          0104*   	pop hl
045CC6 23          0105*   	inc hl
045CC7 C1          0106*   	pop bc
045CC8 10 F5       0107*   	djnz @frames_loop
045CCA D1          0108*       pop de ; sprite loop counter
045CCB F1          0109*       pop af ; sprite id
045CCC 3C          0110*       inc a
045CCD 1D          0111*       dec e
045CCE C2 AF 5C 04 0112*       jp nz,@sprites_loop
045CD2             0113*   ; set laser firing timer to zero
045CD2 FD 21 00 5C 0114*       ld iy,tmr_laser
       04          
045CD7 21 00 00 00 0115*       ld hl,0
045CDB CD 16 19 04 0116*       call timestamp_tmr_set
045CDF C9          0117*       ret
045CE0             0061        include "player_weapons.inc"
045CE0             0001*   move_weapons:
045CE0             0002*   ; initialize pointers and loop counter
045CE0 FD 21 72 6F 0003*       ld iy,player_weapons_begin ; set iy to first record in table
       04          
045CE5             0004*       ; PUSH_ALL
045CE5             0005*       ; ; call vdu_home_cursor
045CE5             0006*       ; ; call dumpRegistersHex
045CE5             0007*       ; CALL DEBUG_PRINT_TABLE
045CE5             0008*       ; ; CALL DEBUG_WAITKEYPRESS
045CE5             0009*       ; POP_ALL
045CE5             0010*   
045CE5 06 04       0011*       ld b,player_weapons_max ; loop counter
045CE7             0012*   @move_loop:
045CE7 FD 22 3F 69 0013*       ld (table_pointer),iy ; update table pointer
       04          
045CEC C5          0014*       push bc ; backup loop counter
045CED             0015*   ; check top bit of sprite_type to see if sprite is just spawned
045CED FD 7E 16    0016*       ld a,(iy+sprite_type)
045CF0 CB 7F       0017*       bit 7,a
045CF2 C2 1A 5D 04 0018*       jp nz,@next_record ; if just spawned, skip to next record
045CF6             0019*   ; check sprite_type to see if sprite is active
045CF6 A7          0020*       and a ; if zero, sprite is dead
045CF7 CA 1A 5D 04 0021*       jp z,@next_record ; ... and we skip to next record
045CFB             0022*   ; otherwise we prepare to move the sprite
045CFB FD 27 1A    0023*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
045CFE             0024*       callHL
045CFE 01 04 5D 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
045D02 C5          0002*M1     push bc ; which constitutes the return address
045D03 E9          0003*M1     jp (hl) ; Jump to the address in HL
045D04             0004*M1 @@:
045D04             0025*   ; move_weapons_loop_return: return from behavior subroutines
045D04 FD 2A 3F 69 0026*       ld iy,(table_pointer) ; get back table pointer
       04          
045D09             0027*   ; ; now we check results of all the moves
045D09             0028*   ;     bit sprite_just_died,(iy+sprite_collisions)
045D09             0029*   ;     jp z,@draw_sprite ; if not dead, draw sprite
045D09             0030*   ;     call table_deactivate_sprite
045D09             0031*   ;     jp @next_record ; and to the next record
045D09             0032*   @draw_sprite:
045D09 FD 7E 00    0033*       ld a,(iy+sprite_id) ; get spriteId
045D0C CD 00 20 04 0034*       call vdu_sprite_select ; select sprite
045D10 FD 07 01    0035*       ld bc,(iy+sprite_x)
045D13 FD 17 04    0036*       ld de,(iy+sprite_y)
045D16 CD CC 20 04 0037*       call vdu_sprite_move_abs168
045D1A             0038*   ; fall through to @next_record
045D1A             0039*   @next_record:
045D1A ED 33 40    0040*       lea iy,iy+table_record_size
045D1D AF          0041*       xor a ; clears carry flag
045D1E 32 43 69 04 0042*       ld (sprite_screen_edge),a ; clear screen edge collision flag
045D22 C1          0043*       pop bc ; get back our loop counter
045D23 10 C2       0044*       djnz @move_loop ; loop until we've checked all the records
045D25             0045*   ; reset all just spawned flags
045D25 FD 21 72 6F 0046*       ld iy,player_weapons_begin
       04          
045D2A 06 04       0047*       ld b,player_weapons_max ; loop counter
045D2C             0048*   @reset_just_spawned:
045D2C C5          0049*       push bc ; back up loop counter
045D2D FD CB 16 7E 0050*       bit 7,(iy+sprite_type) ; check if just spawned
045D31 CA 4E 5D 04 0051*       jp z,@F
045D35 FD CB 16 BE 0052*       res 7,(iy+sprite_type) ; clear just spawned flag
045D39 FD 7E 00    0053*       ld a,(iy+sprite_id)
045D3C CD 00 20 04 0054*       call vdu_sprite_select
045D40 FD 07 01    0055*       ld bc,(iy+sprite_x)
045D43 FD 17 04    0056*       ld de,(iy+sprite_y)
045D46 CD CC 20 04 0057*       call vdu_sprite_move_abs168
045D4A CD 76 20 04 0058*       call vdu_sprite_show
045D4E             0059*   @@:
045D4E ED 33 40    0060*       lea iy,iy+table_record_size
045D51 C1          0061*       pop bc ; get back loop counter
045D52 10 D8       0062*       djnz @reset_just_spawned
045D54 C9          0063*       ret
045D55             0064*   ; end move_weapons
045D55             0062        include "state.inc"
045D55 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
045E00             0002*   
045E00             0003*   ; Game state variables
045E00 0E 5E 04    0004*   game_state:  dl game_main_menu
045E03             0005*   
045E03             0006*   do_game:
045E03 2A 00 5E 04 0007*       ld hl,(game_state)   ; Load the current game state
045E07             0008*       callHL                ; Call the corresponding state handler
045E07 01 0D 5E 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
045E0B C5          0002*M1     push bc ; which constitutes the return address
045E0C E9          0003*M1     jp (hl) ; Jump to the address in HL
045E0D             0004*M1 @@:
045E0D C9          0009*       ret
045E0E             0010*   
045E0E             0011*   ; ========================
045E0E             0012*   ; Main Game States
045E0E             0013*   ; ========================
045E0E             0014*   
045E0E             0015*   game_main_menu:
045E0E             0016*       ; Handle main menu options
045E0E             0017*       ; Example: Check input for "Start Game"
045E0E CD 1F 5F 04 0018*       call check_input_menu
045E12 C2 17 5E 04 0019*       jp nz, game_initialize ; Start game on selection
045E16 C9          0020*       ret
045E17             0021*   
045E17             0022*   game_initialize:
045E17             0023*   ; reset the sprite table
045E17 CD 65 69 04 0024*       call table_init
045E1B AF          0025*       xor a
045E1C 32 42 69 04 0026*       ld (table_active_sprites),a
045E20 21 72 6F 04 0027*       ld hl,table_base
045E24 22 3F 69 04 0028*       ld (table_pointer),hl
045E28             0029*   ; initialize sprites and active tiles table
045E28 CD BD 69 04 0030*       call sprites_init
045E2C CD 65 69 04 0031*       call table_init
045E30 CD D4 63 04 0032*       call tile_table_init
045E34             0033*   ; initialize the first level
045E34 3E 00       0034*       ld a,tiles_dg
045E36 CD 1A 57 04 0035*       call init_tileset
045E3A             0036*   ; initialize player
045E3A 21 00 00 00 0037*       ld hl,0
045E3E 22 00 5A 04 0038*       ld (player_score),hl
045E42 2A 06 5A 04 0039*       ld hl,(player_max_shields)
045E46 22 03 5A 04 0040*       ld (player_shields),hl
045E4A 3E 03       0041*       ld a,3
045E4C 32 09 5A 04 0042*       ld (player_ships),a
045E50 CD 1E 5A 04 0043*       call player_init
045E54             0044*   ; ; TODO: TEMPORARY UNTIL MAP LOGIC IMPLEMENTED
045E54             0045*   ;     ld hl,enemies_dead
045E54             0046*   ;     ld (enemies_state),hl
045E54             0047*   ; ; END TODO
045E54             0048*   ; set the game state to playing
045E54 21 5D 5E 04 0049*       ld hl,game_playing
045E58 22 00 5E 04 0050*       ld (game_state), hl
045E5C             0051*   ; done initializing
045E5C C9          0052*       ret
045E5D             0053*   
045E5D             0054*   game_playing:
045E5D             0055*   ; Main gameplay loop
045E5D CD 12 66 04 0056*       call tiles_plot
045E61             0057*   
045E61             0058*   ; set gfx origin and viewport to playing field window
045E61 01 80 00 00 0059*       ld bc,origin_left
045E65 11 00 00 00 0060*       ld de,origin_top
045E69 CD D0 1A 04 0061*       call vdu_set_gfx_origin
045E6D 01 00 00 00 0062*       ld bc,field_left
045E71 11 00 00 00 0063*       ld de,field_top
045E75 DD 21 FF 00 0064*       ld ix,field_right
       00          
045E7A FD 21 7F 01 0065*       ld iy,field_bottom
       00          
045E7F CD EB 1A 04 0066*       call vdu_set_gfx_viewport
045E83             0067*   
045E83 CD F0 5E 04 0068*       call do_player
045E87             0069*       ; call do_enemies
045E87 CD 5C 67 04 0070*       call move_tiles
045E8B             0071*   ; update UI: TODO make this a standalone function
045E8B CD 04 5B 04 0072*       call print_score
045E8F C9          0073*       ret
045E90             0074*   
045E90             0075*   game_paused:
045E90             0076*       ; Pause menu logic
045E90 CD 22 5F 04 0077*       call check_input_pause
045E94 C2 5D 5E 04 0078*       jp nz, game_playing ; Resume game
045E98 CA 0E 5E 04 0079*       jp z, game_main_menu ; Exit to main menu
045E9C C9          0080*       ret
045E9D             0081*   
045E9D             0082*   game_level_transition:
045E9D             0083*       ; Handle level transitions
045E9D CD 23 5F 04 0084*       call load_next_level
045EA1 21 5D 5E 04 0085*       ld hl, game_playing
045EA5 22 00 5E 04 0086*       ld (game_state), hl
045EA9 C9          0087*       ret
045EAA             0088*   
045EAA             0089*   game_over:
045EAA             0090*       ; Display game over screen
045EAA CD 24 5F 04 0091*       call display_game_over
045EAE C2 0E 5E 04 0092*       jp nz, game_main_menu ; Return to main menu on input
045EB2 C9          0093*       ret
045EB3             0094*   
045EB3             0095*   game_victory:
045EB3             0096*       ; Display victory screen
045EB3 CD 25 5F 04 0097*       call display_victory
045EB7 C2 0E 5E 04 0098*       jp nz, game_main_menu ; Return to main menu on input
045EBB C9          0099*       ret
045EBC             0100*   
045EBC             0101*   ; ========================
045EBC             0102*   ; Supporting States
045EBC             0103*   ; ========================
045EBC             0104*   
045EBC             0105*   game_loading:
045EBC             0106*       ; Show loading screen while preparing assets
045EBC CD 26 5F 04 0107*       call load_resources
045EC0 21 17 5E 04 0108*       ld hl, game_initialize
045EC4 22 00 5E 04 0109*       ld (game_state), hl
045EC8 C9          0110*       ret
045EC9             0111*   
045EC9             0112*   game_cutscene:
045EC9             0113*       ; Play a non-interactive cutscene
045EC9 CD 27 5F 04 0114*       call play_cutscene
045ECD C2 5D 5E 04 0115*       jp nz, game_playing ; Return to gameplay after cutscene
045ED1 C9          0116*       ret
045ED2             0117*   
045ED2             0118*   game_inventory:
045ED2             0119*       ; Open inventory or shop
045ED2 CD 28 5F 04 0120*       call display_inventory
045ED6 C2 5D 5E 04 0121*       jp nz, game_playing ; Return to gameplay after inventory close
045EDA C9          0122*       ret
045EDB             0123*   
045EDB             0124*   game_map:
045EDB             0125*       ; Display map or quest
045EDB CD 29 5F 04 0126*       call display_map
045EDF C2 5D 5E 04 0127*       jp nz, game_playing ; Return to gameplay after map close
045EE3 C9          0128*       ret
045EE4             0129*   
045EE4             0130*   game_exit:
045EE4             0131*       ; Handle exit logic
045EE4 CD 2A 5F 04 0132*       call save_game
045EE8 C3 2B 5F 04 0133*       jp exit_game         ; Safely shut down
045EEC C9          0134*       ret
045EED             0135*   
045EED             0136*   ; ========================
045EED             0137*   ; Sub-state branching (Example for player state)
045EED             0138*   ; ========================
045EED             0139*   
045EED FB 5E 04    0140*   player_state:  dl player_alive ; Player state variable
045EF0             0141*   
045EF0             0142*   do_player:
045EF0 2A ED 5E 04 0143*       ld hl,(player_state)
045EF4             0144*       callHL                ; Call the corresponding player state
045EF4 01 FA 5E 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
045EF8 C5          0002*M1     push bc ; which constitutes the return address
045EF9 E9          0003*M1     jp (hl) ; Jump to the address in HL
045EFA             0004*M1 @@:
045EFA C9          0145*       ret
045EFB             0146*   
045EFB             0147*   player_alive:
045EFB CD 6E 5A 04 0148*       call player_input     ; Handle player input
045EFF CD E0 5C 04 0149*       call move_weapons    ; Handle laser movement and collision detection
045F03 C9          0150*       ret
045F04             0151*   
045F04             0152*   player_dead:
045F04 CD E0 5C 04 0153*       call move_weapons    ; Handle laser movement and collision detection
045F08 C9          0154*       ret
045F09             0155*   
045F09             0156*   do_enemies:
045F09 2A 14 5F 04 0157*       ld hl,(enemies_state)
045F0D             0158*       callHL
045F0D 01 13 5F 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
045F11 C5          0002*M1     push bc ; which constitutes the return address
045F12 E9          0003*M1     jp (hl) ; Jump to the address in HL
045F13             0004*M1 @@:
045F13 C9          0159*       ret
045F14 1A 5F 04    0160*   enemies_state: dl enemies_alive
045F17             0161*   
045F17             0162*   enemies_dead:
045F17 C9          0163*       ret
045F18             0164*   
045F18             0165*   enemies_respawning:
045F18 C9          0166*       ret
045F19             0167*   
045F19             0168*   enemies_respawn:
045F19 C9          0169*       ret
045F1A             0170*   
045F1A             0171*   enemies_alive:
045F1A CD 33 26 04 0172*       call move_enemies
045F1E C9          0173*       ret
045F1F             0174*   
045F1F             0175*   check_input_menu:
045F1F C9          0176*       ret
045F20             0177*   
045F20             0178*   update_game_world:
045F20 C9          0179*       ret
045F21             0180*   
045F21             0181*   check_game_events:
045F21 C9          0182*       ret
045F22             0183*   
045F22             0184*   check_input_pause:
045F22 C9          0185*       ret
045F23             0186*   
045F23             0187*   load_next_level:
045F23 C9          0188*       ret
045F24             0189*   
045F24             0190*   display_game_over:
045F24 C9          0191*       ret
045F25             0192*   
045F25             0193*   display_victory:
045F25 C9          0194*       ret
045F26             0195*   
045F26             0196*   load_resources:
045F26 C9          0197*       ret
045F27             0198*   
045F27             0199*   play_cutscene:
045F27 C9          0200*       ret
045F28             0201*   
045F28             0202*   display_inventory:
045F28 C9          0203*       ret
045F29             0204*   
045F29             0205*   display_map:
045F29 C9          0206*       ret
045F2A             0207*   
045F2A             0208*   save_game:
045F2A C9          0209*       ret
045F2B             0210*   
045F2B             0211*   exit_game:
045F2B C9          0212*       ret
045F2C             0213*   
045F2C             0063        include "targeting.inc"
045F2C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
046000             0002*   
046000             0003*   ; compute orientation to player
046000             0004*   ; based on relative positions
046000             0005*   ; returns: h.l 16.8 fixed angle256 to player
046000             0006*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
046000             0007*   ;    representing delta-x/y *to* target respectively
046000             0008*   orientation_to_player:
046000 DD 21 72 70 0009*       ld ix,player_begin
       04          
046005 FD 2A 3F 69 0010*       ld iy,(table_pointer)
       04          
04600A FD 07 01    0011*       ld bc,(iy+sprite_x)
04600D FD 17 04    0012*       ld de,(iy+sprite_y)
046010 DD 37 01    0013*       ld ix,(ix+sprite_x)
046013 DD 31 04    0014*       ld iy,(ix+sprite_y)
046016 CD 1C 0C 04 0015*       call dxy168
04601A C5          0016*       push bc ; dx
04601B D5          0017*       push de ; dy
04601C CD 9D 0C 04 0018*       call atan2_168fast ; uh.l = angle to player
046020 22 2C 60 04 0019*       ld (Bearing_t),hl
046024 D1          0020*       pop de ; dy
046025 C1          0021*       pop bc ; dx
046026 FD 2A 3F 69 0022*       ld iy,(table_pointer)
       04          
04602B C9          0023*       ret
04602C             0024*   ; end orientation_to_player
04602C             0025*   
04602C             0026*   ; targeting_computer variables fixed 16.8 format
04602C 00 00 00    0027*   Bearing_t: dl 0x000000 ; angle to target
04602F 00 00 00    0028*   Heading_t: dl 0x000000 ; angle of target motion
046032 00 00 00    0029*   Vp: dl 0x000000 ; velocity of projectile
046035 00 00 00    0030*   Vp_x: dl 0x000000 ; x component of projectile velocity
046038 00 00 00    0031*   Vp_y: dl 0x000000 ; y component of projectile velocity
04603B 00 00 00    0032*   Vt: dl 0x000000 ; velocity of target
04603E 00 00 00    0033*   Vt_x: dl 0x000000 ; x component of target velocity
046041 00 00 00    0034*   Vt_y: dl 0x000000 ; y component of target velocity
046044 00 00 00    0035*   Heading_p: dl 0x000000 ; angle of projectile motion
046047 00 00 00    0036*   lead_angle: dl 0x000000 ; lead angle
04604A             0037*   
04604A             0038*   ; Inputs:   Vp velocity of projectile set,
04604A             0039*   ;           IY pointed to sprite record,
04604A             0040*   ;           player position and velocities correctly set
04604A             0041*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
04604A             0042*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
04604A             0043*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
04604A             0044*   targeting_computer:
04604A DD 21 72 70 0045*       ld ix,player_begin
       04          
04604F             0046*   ; ; compute target velocity from x,y component velocities
04604F             0047*   ;     ld bc,(ix+sprite_xvel)
04604F             0048*   ;     ld de,(ix+sprite_yvel)
04604F             0049*   ;     ld hl,-1*256 ; account for vertical ground movement
04604F             0050*   ;     add hl,de
04604F             0051*   ;     ex de,hl ; ud.e = player_yvel-1
04604F             0052*   ;     call cartesian_to_polar_sm ; uh.l = Heading_t, ud.e = Vt
04604F             0053*   ;     ld (Heading_t),hl ; PASSES
04604F             0054*   ;     ld (Vt),de ; PASSES
04604F             0055*   ; ; Bearing_t should have been set by prerequisite call to orientation_to_player
04604F             0056*   ; ; compute Heading_t-Bearing_t PASSES
04604F             0057*   ;     ld de,(Bearing_t)
04604F             0058*   ;     and a ; clear carry
04604F             0059*   ;     sbc hl,de ; Uh.l = Heading_t-Bearing_t
04604F             0060*   ; ; compute sin(Heading_t-Bearing_t)
04604F             0061*   ;     call sin168 ; uh.l = sin(Heading_t-Bearing_t)
04604F             0062*   ; ; compute (Vt*sin(Heading_t-Bearing_t))
04604F             0063*   ;     ld de,(Vt)
04604F             0064*   ;     call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
04604F             0065*   ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
04604F             0066*   ;     ld de,(Vp)
04604F             0067*   ;     call sdiv168 ; ud.e = (Vt*sin(Heading_t-Bearing_t)) / Vp
04604F             0068*   ;     ex de,hl ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
04604F             0069*   ; ; answer is in radians, convert to degrees256
04604F             0070*   ;     ld de,0x0028BE ; 40.74 = 57.29578*256/360
04604F             0071*   ;     call smul168 ; uh.l = angle in degrees256
04604F             0072*   ;     ld (lead_angle),hl ; DEBUG
04604F             0073*   ; ; add lead angle to target bearing
04604F             0074*   ;     ld de,(Bearing_t)
04604F             0075*   ;     add hl,de ; h.l = lead angle+target bearing
04604F E5          0076*       push hl
046050             0077*   
046050             0078*   ; compute component projectile velocities
046050 ED 5B 32 60 0079*       ld de,(Vp) ; Vp should have been set by caller
       04          
046055 CD A9 0B 04 0080*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
046059 ED 43 35 60 0081*       ld (Vp_x),bc
       04          
04605E ED 53 38 60 0082*       ld (Vp_y),de
       04          
046063 E1          0083*       pop hl ; uh.l = lead angle+target bearing
046064 22 44 60 04 0084*       ld (Heading_p),hl
046068             0085*   
046068 C9          0086*       ret
046069             0087*   
046069             0088*   ; debug print the results
046069             0089*       PUSH_ALL
046069 08          0001*M1     ex af,af'
04606A D9          0002*M1     exx
04606B F5          0003*M1     push af
04606C E5          0004*M1     push hl
04606D C5          0005*M1     push bc
04606E D5          0006*M1     push de
04606F             0007*M1 
04606F 08          0008*M1     ex af,af'
046070 D9          0009*M1     exx
046071 F5          0010*M1     push af
046072 E5          0011*M1     push hl
046073 C5          0012*M1     push bc
046074 D5          0013*M1     push de
046075 DD E5       0014*M1     push ix
046077 FD E5       0015*M1     push iy
046079 CD 00 1A 04 0090*       call vdu_home_cursor
04607D CD 2C 01 04 0091*       call printNewLine
046081 CD 10 01 04 0092*       call printInline
046085 42 74 20 00 0093*       asciz "Bt "
046089 2A 2C 60 04 0094*       ld hl,(Bearing_t)
04608D CD 38 03 04 0095*       call print_s168_hl
046091             0096*   
046091             0097*       ; call printInline
046091             0098*       ; asciz "\r\nHt "
046091             0099*       ; ld hl,(Heading_t)
046091             0100*       ; call print_s168_hl
046091             0101*   
046091             0102*       ; call printInline
046091             0103*       ; asciz "\r\nVt "
046091             0104*       ; ld hl,(Vt)
046091             0105*       ; call print_s168_hl
046091             0106*   
046091             0107*       ; call printInline
046091             0108*       ; asciz "\r\nVtx"
046091             0109*       ; ld hl,(ix+sprite_xvel)
046091             0110*       ; call print_s168_hl
046091             0111*   
046091             0112*       ; call printInline
046091             0113*       ; asciz "\r\nVty"
046091             0114*       ; ld hl,(ix+sprite_yvel)
046091             0115*       ; ld de,-1*256 ; account for vertical ground movement
046091             0116*       ; add hl,de
046091             0117*       ; call print_s168_hl
046091             0118*   
046091 CD 10 01 04 0119*       call printInline
046095 0D 0A 4C 64 0120*       asciz "\r\nLda"
       61 00       
04609B 2A 47 60 04 0121*       ld hl,(lead_angle)
04609F CD 38 03 04 0122*       call print_s168_hl
0460A3             0123*   
0460A3 CD 10 01 04 0124*       call printInline
0460A7 0D 0A 48 70 0125*       asciz "\r\nHp "
       20 00       
0460AD 2A 44 60 04 0126*       ld hl,(Heading_p)
0460B1 CD 38 03 04 0127*       call print_s168_hl
0460B5             0128*   
0460B5             0129*       ; call printInline
0460B5             0130*       ; asciz "\r\nVp "
0460B5             0131*       ; ld hl,(Vp)
0460B5             0132*       ; call print_s168_hl
0460B5             0133*   
0460B5             0134*       ; call printInline
0460B5             0135*       ; asciz "\r\nVpx"
0460B5             0136*       ; ld hl,(Vp_x)
0460B5             0137*       ; call print_s168_hl
0460B5             0138*   
0460B5             0139*       ; call printInline
0460B5             0140*       ; asciz "\r\nVpy"
0460B5             0141*       ; ld hl,(Vp_y)
0460B5             0142*       ; call print_s168_hl
0460B5             0143*   
0460B5             0144*       POP_ALL
0460B5 FD E1       0001*M1     pop iy
0460B7 DD E1       0002*M1     pop ix
0460B9 D1          0003*M1     pop de
0460BA C1          0004*M1     pop bc
0460BB E1          0005*M1     pop hl
0460BC F1          0006*M1     pop af
0460BD 08          0007*M1     ex af,af'
0460BE D9          0008*M1     exx
0460BF             0009*M1 
0460BF D1          0010*M1     pop de
0460C0 C1          0011*M1     pop bc
0460C1 E1          0012*M1     pop hl
0460C2 F1          0013*M1     pop af
0460C3 08          0014*M1     ex af,af'
0460C4 D9          0015*M1     exx
0460C5 C9          0145*       ret
0460C6             0064        include "tile_table.inc"
0460C6             0001*   ; ###### tile TABLE FIELD INDICES ######
0460C6             0002*   tile_table_record_size:         equ  64; 40 bytes ;40 bytes per tile record
0460C6             0003*   tile_id:                 equ   0; 1 bytes ;unique tileId, zero-based
0460C6             0004*   ; tile state variables
0460C6             0005*   tile_state_variables:    equ   1; beginning of tile state variables
0460C6             0006*   tile_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
0460C6             0007*   tile_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
0460C6             0008*   tile_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
0460C6             0009*   tile_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
0460C6             0010*   tile_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
0460C6             0011*   tile_heading:            equ  16; 3 bytes ;tile movement direction deg256 16.8 fixed
0460C6             0012*   tile_orientation:        equ  19; 3 bytes ;orientation bits
0460C6             0013*   ; tile definition variables
0460C6             0014*   tile_definitions:        equ  22; beginnning of tile definition variables
0460C6             0015*   tile_type:               equ  22; 1 bytes ;type of tile as defined in enemies.inc
0460C6             0016*   tile_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
0460C6             0017*   tile_move_program:       equ  26; 3 bytes ;address of tile's behavior subroutine
0460C6             0018*   tile_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
0460C6             0019*   tile_dim_x:              equ  30; 1 bytes ;tile width in pixels
0460C6             0020*   tile_dim_y:              equ  31; 1 bytes ;tile height in pixels
0460C6             0021*   tile_num_orientations:   equ  32; 1 bytes ;number of orientations for this tile
0460C6             0022*   tile_num_animations:     equ  33; 1 bytes ;number of animations for this tile
0460C6             0023*   tile_animation:          equ  34; 1 bytes ;current animation index, zero-based
0460C6             0024*   tile_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
0460C6             0025*   tile_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
0460C6             0026*   tile_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
0460C6             0027*   tile_points:             equ  38; 1 bytes ;points awarded for killing this tile type
0460C6             0028*   tile_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
0460C6             0029*   tile_frame:              equ  40; 1 bytes ;current animation frame
0460C6             0030*   
0460C6             0031*   ; ###### tile TABLE VARIABLES ######
0460C6 00 00 00 00 0032*   tile_stack: blkb 256*3,0 ; stack of pointers to tile records
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0463C6 00          0033*       db 0 ; list terminator
0463C7             0034*   tile_stack_end:
0463C7 C6 60 04    0035*   tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
0463CA 72 71 04    0036*   tile_table_pointer: dl tile_table_base ; pointer to top address of current record, initialized to tile_table_base
0463CD 00 00 00    0037*   num_active_tiles: dl 0 ; how many active tiles
0463D0 00          0038*   next_tile_id: db 0 ; next available tile id
0463D1 00 00 00    0039*   new_tile_table_pointer: dl 0 ; pointer to new tile record
0463D4             0040*   
0463D4             0041*   tile_table_init:
0463D4             0042*   ; clear the tile stack
0463D4 AF          0043*       xor a ; write zeroes to tile stack
0463D5 21 C6 60 04 0044*       ld hl,tile_stack
0463D9 01 01 03 00 0045*       ld bc,tile_stack_end-tile_stack
0463DD CD 3E 07 04 0046*       call clear_mem
0463E1             0047*   ; clear the tile table
0463E1 AF          0048*       xor a ; write zeroes to tile table
0463E2 21 72 71 04 0049*       ld hl,tile_table_base ; address to copy from
0463E6 01 00 40 00 0050*       ld bc,tile_table_end-tile_table_base ; number of bytes to clear
0463EA CD 3E 07 04 0051*       call clear_mem
0463EE             0052*   ; write tile ids
0463EE DD 21 72 71 0053*       ld ix,tile_table_base
       04          
0463F3 AF          0054*       xor a ; tile id
0463F4 06 00       0055*       ld b,0 ; loop counter
0463F6             0056*   @loop:
0463F6 DD 77 00    0057*       ld (ix+tile_id),a
0463F9 ED 32 40    0058*       lea ix,ix+table_record_size
0463FC 3C          0059*       inc a
0463FD 10 F7       0060*       djnz @loop
0463FF             0061*   ; set pointers to top of tile stack and tile table
0463FF 21 D0 63 04 0062*       ld hl,next_tile_id
046403 3E FF       0063*       ld a,255 ; will wrap around to 0 on first call to create active tile
046405 77          0064*       ld (hl),a
046406 21 72 71 04 0065*       ld hl,tile_table_base
04640A 22 CA 63 04 0066*       ld (tile_table_pointer),hl
04640E 21 C6 60 04 0067*       ld hl,tile_stack
046412 22 C7 63 04 0068*       ld (tile_stack_pointer),hl
046416 C9          0069*       ret
046417             0070*   ; end tile_table_init
046417             0071*   
046417             0072*   ; gets the next available tile id
046417             0073*   ; inputs; none
046417             0074*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
046417             0075*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
046417             0076*   ; destroys: a,hl,ix
046417             0077*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
046417             0078*   tile_table_get_next_id:
046417 21 CD 63 04 0079*       ld hl,num_active_tiles
04641B 34          0080*       inc (hl)
04641C C2 23 64 04 0081*       jp nz,@F ; check rollover to > 256 active tiles
046420 35          0082*       dec (hl) ; undo increment
046421 AF          0083*       xor a ; reset carry flag indicating that we didn't find a free tile
046422 C9          0084*       ret
046423             0085*   @@: ; point ix to next tile record
046423 21 D0 63 04 0086*       ld hl,next_tile_id
046427 34          0087*       inc (hl)
046428 56          0088*       ld d,(hl) ; index into tile table
046429 1E 40       0089*       ld e,tile_table_record_size
04642B ED 5C       0090*       mlt de ; de is now the offset to the table entry
04642D DD 21 72 71 0091*       ld ix,tile_table_base ; point to base address of tile table
       04          
046432 DD 19       0092*       add ix,de ; ix is now the address of the table entry
046434             0093*   ; add tile pointer to tile stack
046434 21 C6 60 04 0094*       ld hl,tile_stack
046438 19          0095*       add hl,de ; de was already set to the correct offset
046439 ED 3F       0096*       ld (hl),ix
04643B             0097*   ; return tile id
04643B 7E          0098*       ld a,(hl)
04643C 37          0099*       scf ; sets carry flag indicating we found a free tile
04643D C9          0100*       ret ; done
04643E             0101*   ; end tile_table_get_next_id
04643E             0102*   
04643E             0103*   ; deactivate the tile with the given id
04643E             0104*   ; inputs: iy pointing to tile stack record
04643E             0105*   ; outputs: tile stack pointer unchanged, effectively pointing to next record
04643E             0106*   ; destroys: a,hl
04643E             0107*   ; affects: decrements num_active_tiles by one, removes tile pointer from the tile stack, shifts stack records above it down one position
04643E             0108*   table_deactivate_tile: ; TODO: implement
04643E 21 CD 63 04 0109*       ld hl,num_active_tiles
046442 35          0110*       dec (hl) ; decrement number of active tiles
046443             0111*   ; remove tile pointer from tile stack
046443 FD E5       0112*       push iy ; pointer to tile stack record
046445 D1          0113*       pop de ; address to copy to
046446 66          0114*       ld h,(hl) ; number of active tiles
046447 25          0115*       dec h ; zero-based index
046448 2E 03       0116*       ld l,3 ; number of bytes per tile stack record
04644A ED 6C       0117*       mlt hl ; hl = offset from base stack record
04644C 23          0118*       inc hl ; to pick up zero terminator
04644D B7          0119*       or a ; clear carry
04644E ED 52       0120*       sbc hl,de ; number of bytes to copy
046450 E5          0121*       push hl
046451 C1          0122*       pop bc ; number of bytes to copy
046452 ED B8       0123*       lddr ; shift stack records down
046454 C9          0124*       ret
046455             0125*   ; end table_deactivate_tile
046455             0126*   
046455             0127*   ; change an existing tile to a new type, keeping its position and velocity the same
046455             0128*   ; inputs: hl = pointer to new tile default settings, tile_table_pointer = existing tile
046455             0129*   alter_tile:
046455             0130*   ; copy default settings to new tile
046455 ED 33 16    0131*       lea iy,iy+tile_definitions ; bump pointer to copy to
046458 FD E5       0132*       push iy ; pointer to default tile settings
04645A D1          0133*       pop de ; address to copy to
04645B 01 2A 00 00 0134*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
04645F ED B0       0135*       ldir ; copies new defaults existing tile record
046461             0136*   ; return to caller
046461 FD 2A CA 63 0137*       ld iy,(tile_table_pointer) ; reset tile_table_pointer
       04          
046466 FD CB 16 FE 0138*       set 7,(iy+tile_type) ; set just spawned flag
04646A 37          0139*       scf ; set carry flag to indicate success
04646B C9          0140*       ret
04646C             0141*   ; end alter_tile
04646C             0142*   
04646C             0143*   ; spawn a new active tile at the prescribed location
04646C             0144*   ; inputs: hl = pointer to new tile default settings, tiles_x_plot, tiles_y_plot = x,y position
04646C             0145*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
04646C             0146*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
04646C             0147*   ; destroys: a,hl,ix
04646C             0148*   ; preserves: bc,de (x,y position)
04646C             0149*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
04646C             0150*   spawn_active_tile:
04646C E5          0151*       push hl ; back up pointer to new tile defaults
04646D CD 17 64 04 0152*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
046471 E1          0153*       pop hl ; restore pointer to new tile defaults
046472 D0          0154*       ret nc ; no carry means no free tile slots, so we go home
046473             0155*   ; copy default settings to new tile
046473 DD 22 D1 63 0156*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
046478 ED 32 16    0157*       lea ix,ix+tile_definitions ; bump pointer to copy to
04647B DD E5       0158*       push ix ; pointer to default tile settings
04647D D1          0159*       pop de ; address to copy to
04647E 01 2A 00 00 0160*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
046482 ED B0       0161*       ldir ; copies defaults to new tile record
046484             0162*   ; copy tile position from inputs
046484 DD 2A D1 63 0163*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
046489 2A 0A 66 04 0164*       ld hl,(tiles_x_plot-1) ; shift up one byte to get 16.8 fixed point
04648D DD 2F 01    0165*       ld (ix+tile_x),hl
046490 2A 0E 66 04 0166*       ld hl,(tiles_y_plot-1) ; shift up one byte to get 16.8 fixed point
046494 DD 2F 04    0167*       ld (ix+tile_y),hl
046497             0168*   ; set default tile velocities
046497 21 00 00 00 0169*       ld hl,0
04649B DD 2F 07    0170*       ld (ix+tile_xvel),hl
04649E 21 00 01 00 0171*       ld hl,1*256 ; 1 pixel per frame
0464A2 DD 2F 0A    0172*       ld (ix+tile_yvel),hl
0464A5             0173*   ; return to caller
0464A5 DD CB 16 FE 0174*       set 7,(ix+tile_type) ; set just spawned flag
0464A9 37          0175*       scf ; set carry flag to indicate success
0464AA C9          0176*       ret
0464AB             0177*   ; end spawn_active_tile
0464AB             0178*   
0464AB             0179*   ; compute animation frame based on tile_animation and tile_heading
0464AB             0180*   ; inputs: iy set to tile record
0464AB             0181*   ; outputs: a, tile_frame set to animation frame
0464AB             0182*   ; destroys: a,hl
0464AB             0183*   tile_frame_heading_animation:
0464AB FD 7E 11    0184*       ld a,(iy+tile_heading+1) ; we want the integer portion
0464AE CB 3F       0185*       srl a ; divide integer portion by 8
0464B0 CB 3F       0186*       srl a
0464B2 CB 3F       0187*       srl a
0464B4 FD 66 22    0188*       ld h,(iy+tile_animation)
0464B7 2E 20       0189*       ld l,32 ; 32 orientation frames per animation
0464B9 ED 6C       0190*       mlt hl ; hl = offset from base animation
0464BB 85          0191*       add a,l ; modulo256 since tile_frame is only 1 byte
0464BC FD 77 28    0192*       ld (iy+tile_frame),a
0464BF C9          0193*       ret
0464C0             0194*   ; end tile_frame_heading_animation
0464C0             0195*   
0464C0             0196*   ; compute animation frame based on tile_heading
0464C0             0197*   ; inputs: iy set to tile record
0464C0             0198*   ; outputs: a, tile_frame set to animation frame
0464C0             0199*   ; destroys: a,hl
0464C0             0200*   tile_frame_heading:
0464C0 FD 7E 11    0201*       ld a,(iy+tile_heading+1) ; we want the integer portion
0464C3 CB 3F       0202*       srl a ; divide integer portion by 8
0464C5 CB 3F       0203*       srl a
0464C7 CB 3F       0204*       srl a
0464C9 FD 77 28    0205*       ld (iy+tile_frame),a
0464CC C9          0206*       ret
0464CD             0207*   ; end tile_frame_heading
0464CD             0208*   dump_tile_record:
0464CD             0209*       ; call vdu_home_cursor
0464CD CD 10 01 04 0210*       call printInline
0464D1 69 64 3A 20 0211*       asciz "id:   "
       20 20 00    
0464D8 DD 7E 00    0212*       ld a,(ix+tile_id)
0464DB CD 5A 01 04 0213*       call printHexA
0464DF             0214*   
0464DF CD 10 01 04 0215*       call printInline
0464E3 0D 0A 78 3A 0216*       asciz "\r\nx:   "
       20 20 20 00 
0464EB DD 27 01    0217*       ld hl,(ix+tile_x)
0464EE CD 38 03 04 0218*       call print_s168_hl
0464F2             0219*   
0464F2 CD 10 01 04 0220*       call printInline
0464F6 0D 0A 79 3A 0221*       asciz "\r\ny:   "
       20 20 20 00 
0464FE DD 27 04    0222*       ld hl,(ix+tile_y)
046501 CD 38 03 04 0223*       call print_s168_hl
046505             0224*   
046505 CD 10 01 04 0225*       call printInline
046509 0D 0A 74 79 0226*       asciz "\r\ntyp: "
       70 3A 20 00 
046511 DD 7E 16    0227*       ld a,(ix+tile_type)
046514 CD 5A 01 04 0228*       call printHexA
046518             0229*   
046518 CD 10 01 04 0230*       call printInline
04651C 0D 0A 42 49 0231*       asciz "\r\nBId: "
       64 3A 20 00 
046524 DD 27 17    0232*       ld hl,(ix+tile_base_bufferId)
046527 CD 37 01 04 0233*       call printHex24
04652B             0234*   
04652B CD 10 01 04 0235*       call printInline
04652F 0D 0A 6D 50 0236*       asciz "\r\nmPg: "
       67 3A 20 00 
046537 DD 27 1A    0237*       ld hl,(ix+tile_move_program)
04653A CD 37 01 04 0238*       call printHex24
04653E             0239*   
04653E CD 10 01 04 0240*       call printInline
046542 0D 0A 63 6F 0241*       asciz "\r\ncol: "
       6C 3A 20 00 
04654A DD 7E 1D    0242*       ld a,(ix+tile_collisions)
04654D CD B5 03 04 0243*       call printBin8
046551             0244*   
046551             0245*       ; call printInline
046551             0246*       ; asciz "\r\nszx: "
046551             0247*       ; ld a,(ix+tile_dim_x)
046551             0248*       ; call printHexA
046551             0249*   
046551             0250*       ; call printInline
046551             0251*       ; asciz "\r\nszy: "
046551             0252*       ; ld a,(ix+tile_dim_y)
046551             0253*       ; call printHexA
046551             0254*   
046551             0255*       ; call printInline
046551             0256*       ; asciz "\r\n#ori:"
046551             0257*       ; ld a,(ix+tile_num_orientations)
046551             0258*       ; call printHexA
046551             0259*   
046551             0260*       ; call printInline
046551             0261*       ; asciz "\r\n#ani:"
046551             0262*       ; ld a,(ix+tile_num_animations)
046551             0263*       ; call printHexA
046551             0264*   
046551             0265*       ; call printInline
046551             0266*       ; asciz "\r\nani: "
046551             0267*       ; ld a,(ix+tile_animation)
046551             0268*       ; call printHexA
046551             0269*   
046551             0270*       ; call printInline
046551             0271*       ; asciz "\r\nanit:"
046551             0272*       ; ld a,(ix+tile_animation_timer)
046551             0273*       ; call printHexA
046551             0274*   
046551             0275*       ; call printInline
046551             0276*       ; asciz "\r\nmvt: "
046551             0277*       ; ld a,(ix+tile_move_timer)
046551             0278*       ; call printHexA
046551             0279*   
046551             0280*       ; call printInline
046551             0281*       ; asciz "\r\nmvs: "
046551             0282*       ; ld a,(ix+tile_move_step)
046551             0283*       ; call printHexA
046551             0284*   
046551             0285*       ; call printInline
046551             0286*       ; asciz "\r\npts: "
046551             0287*       ; ld a,(ix+tile_points)
046551             0288*       ; call printHexA
046551             0289*   
046551             0290*       ; call printInline
046551             0291*       ; asciz "\r\ndmg: "
046551             0292*       ; ld a,(ix+tile_shield_damage)
046551             0293*       ; call printHexA
046551             0294*   
046551             0295*       ; call printInline
046551             0296*       ; asciz "\r\nfrm: "
046551             0297*       ; ld a,(ix+tile_frame)
046551             0298*       ; call printHexA
046551             0299*   
046551 CD 2C 01 04 0300*       call printNewLine
046555 CD 2C 01 04 0301*       call printNewLine
046559             0302*   
046559             0303*       ; call waitKeypress
046559 C9          0304*       ret
04655A             0065        include "tiles.inc"
04655A FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
046600 00 00 00    0002*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
046603 00 00 00    0003*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
046606             0004*       ; initialize to zero for a maximum of 256 rows in a level
046606 00          0005*   tiles_cols: db 0 ; number of tile columns in the current level
046607             0006*   
046607 00 00 00    0007*   cur_baseBufferId: dl 0
04660A 00          0008*       db 0 ; padding for byte-shifting
04660B 00 00 00    0009*   tiles_x_plot: dl 0
04660E 00          0010*       db 0 ; padding for byte-shifting
04660F F1 FF FF    0011*   tiles_y_plot: dl -15
046612             0012*   
046612             0013*   tiles_plot:
046612             0014*   ; set gfx viewport to playing field window
046612 01 00 00 00 0015*       ld bc,field_left
046616 11 00 00 00 0016*       ld de,field_top
04661A DD 21 FF 00 0017*       ld ix,field_right
       00          
04661F FD 21 7F 01 0018*       ld iy,field_bottom
       00          
046624 CD EB 1A 04 0019*       call vdu_set_gfx_viewport
046628             0020*   ; move the background down one pixel
046628 3E 02       0021*       ld a,2 ; current gfx viewport
04662A 2E 02       0022*       ld l,2 ; direction=down
04662C 26 01       0023*       ld h,1 ; speed=1 px
04662E CD 63 1A 04 0024*       call vdu_scroll_down
046632             0025*   ; set gfx viewport to one scanline to optimise plotting tiles
046632 01 00 00 00 0026*       ld bc,0 ; leftmost x-coord
046636 11 00 00 00 0027*       ld de,0 ; topmost y-coord
04663A DD 21 FF 00 0028*       ld ix,255 ; rightmost x-coord
       00          
04663F FD 21 00 00 0029*       ld iy,0 ; bottommost y-coord
       00          
046644 CD EB 1A 04 0030*       call vdu_set_gfx_viewport
046648             0031*   ; ; plot the background
046648             0032*   ;     call bg_plot
046648             0033*   ; initialize tiles loop
046648 21 00 00 00 0034*       ld hl,0 ; init plotting x-coordinate
04664C 22 0B 66 04 0035*       ld (tiles_x_plot),hl
046650 2A 00 66 04 0036*       ld hl,(tiles_row_defs)
046654 3A 06 66 04 0037*       ld a,(tiles_cols)
046658 47          0038*       ld b,a ; column loop counter
046659             0039*   @loop:
046659 C5          0040*       push bc ; save the loop counter
04665A             0041*   ; read the tile defintion for the current column
04665A 7E          0042*       ld a,(hl) ; a has tile definition
04665B E5          0043*       push hl ; save pointer to tile definition
04665C 2A 07 66 04 0044*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
046660 6F          0045*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
046661 CD 38 1B 04 0046*       call vdu_buff_select ; tile bitmap buffer is now active
046665             0047*   ; plot the active bitmap
046665 ED 4B 0B 66 0048*       ld bc,(tiles_x_plot)
       04          
04666A ED 5B 0F 66 0049*       ld de,(tiles_y_plot)
       04          
04666F CD 20 1F 04 0050*       call vdu_plot_bmp
046673             0051*   ; bump x-coords the width of one tile and save it
046673 2A 0B 66 04 0052*       ld hl,(tiles_x_plot)
046677 01 10 00 00 0053*       ld bc,16
04667B 09          0054*       add hl,bc
04667C 22 0B 66 04 0055*       ld (tiles_x_plot),hl
046680             0056*   ; prepare to loop to next column
046680 E1          0057*       pop hl ; get back pointer to tile def
046681 23          0058*       inc hl ; bump it to the next column
046682 C1          0059*       pop bc ; snag our loop counter
046683 10 D4       0060*       djnz @loop
046685             0061*   ; increment tiles plotting y-coordinate
046685             0062*   ; (we use ix b/c we want to preserve hl for the next step)
046685 DD 2A 0F 66 0063*       ld ix,(tiles_y_plot)
       04          
04668A 11 01 00 00 0064*       ld de,1
04668E DD 19       0065*       add ix,de
046690 DD 22 0F 66 0066*       ld (tiles_y_plot),ix
       04          
046695 DD 7D       0067*       ld a,ixl
046697 FE 01       0068*       cp 1
046699 C0          0069*       ret nz
04669A             0070*   ; do active tiles
04669A E5          0071*       push hl ; save pointer to next row tile def
04669B CD CD 66 04 0072*       call do_active_tiles
04669F E1          0073*       pop hl ; get back pointer to next row tile def
0466A0             0074*   ; time to bump tiles_row_defs to next row
0466A0             0075*   ; (hl was already there at the end of the loop)
0466A0 22 00 66 04 0076*       ld (tiles_row_defs),hl
0466A4             0077*   ; reset coords to plot next row of tiles
0466A4 21 00 00 00 0078*       ld hl,0
0466A8 22 0B 66 04 0079*       ld (tiles_x_plot),hl
0466AC 21 F1 FF FF 0080*       ld hl,-15
0466B0 22 0F 66 04 0081*       ld (tiles_y_plot),hl
0466B4             0082*   ; decrement tiles row counter
0466B4 21 03 66 04 0083*       ld hl,tiles_row
0466B8 35          0084*       dec (hl)
0466B9 C0          0085*       ret nz
0466BA             0086*   @inc_level:
0466BA             0087*   ; increase the number of enemy sprites
0466BA 3A 32 26 04 0088*       ld a,(max_enemy_sprites)
0466BE 3C          0089*       inc a
0466BF FE 10       0090*       cp table_max_records ; if we're at the global limit,skip ahead at max level
0466C1 CA 6C 57 04 0091*       jp z,next_level
0466C5 32 32 26 04 0092*       ld (max_enemy_sprites),a ; otherwise save the updated number
0466C9 C3 6C 57 04 0093*       jp next_level
0466CD             0094*   ; end tiles_plot
0466CD             0095*   
0466CD             0096*   do_active_tiles:
0466CD             0097*   ; initialize tiles loop
0466CD 21 00 00 00 0098*       ld hl,0 ; init plotting x-coordinate
0466D1 22 0B 66 04 0099*       ld (tiles_x_plot),hl
0466D5 2A 00 66 04 0100*       ld hl,(tiles_row_defs)
0466D9 3A 06 66 04 0101*       ld a,(tiles_cols)
0466DD 47          0102*       ld b,a ; column loop counter
0466DE             0103*   @loop:
0466DE C5          0104*       push bc ; save the loop counter
0466DF             0105*   ; read the tile defintion for the current column
0466DF 7E          0106*       ld a,(hl) ; a has tile definition
0466E0 E5          0107*       push hl ; save pointer to tile definition
0466E1 B7          0108*       or a ; check for null tile
0466E2 CA FE 66 04 0109*       jp z,@next_tile ; skip to next tile if null
0466E6 FE 11       0110*       cp 17 ; carry reset if active tile
0466E8 D2 FE 66 04 0111*       jp nc,@next_tile ; skip to next tile if not active
0466EC             0112*   ; call the tile activation routine
0466EC 21 12 67 04 0113*       ld hl,tile_activation_routines
0466F0 16 03       0114*       ld d,3 ; three bytes per table entry
0466F2 5F          0115*       ld e,a ; a is the tile type
0466F3 ED 5C       0116*       mlt de ; de is now the offset to the table entry
0466F5 19          0117*       add hl,de ; hl is now the address of the table entry
0466F6 ED 27       0118*       ld hl,(hl) ; hl is now the activation routine address
0466F8             0119*       callHL ; call the activation routine
0466F8 01 FE 66 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
0466FC C5          0002*M1     push bc ; which constitutes the return address
0466FD E9          0003*M1     jp (hl) ; Jump to the address in HL
0466FE             0004*M1 @@:
0466FE             0120*   @next_tile:
0466FE             0121*   ; bump x-coords the width of one tile and save it
0466FE 2A 0B 66 04 0122*       ld hl,(tiles_x_plot)
046702 01 10 00 00 0123*       ld bc,16
046706 09          0124*       add hl,bc
046707 22 0B 66 04 0125*       ld (tiles_x_plot),hl
04670B             0126*   ; prepare to loop to next column
04670B E1          0127*       pop hl ; get back pointer to tile def
04670C 23          0128*       inc hl ; bump it to the next column
04670D C1          0129*       pop bc ; snag our loop counter
04670E 10 CE       0130*       djnz @loop
046710 C9          0131*       ret ; done
046711             0132*   ; end do_active_tiles
046711             0133*   
046711             0134*   ; bg_y_plot: dl -1
046711             0135*   ; bg_bufferId: dl BUF_STATION_BG_00 ; default bufferId for background tiles
046711             0136*   
046711             0137*   bg_plot: ; TODO: implement this
046711             0138*   ; ; load current bg tile bufferId as default
046711             0139*   ;     ld hl,(bg_bufferId)
046711             0140*   ; ; check whether it is time for a new background tile
046711             0141*   ;     ld a,(bg_y_plot)
046711             0142*   ;     inc a
046711             0143*   ;     ld (bg_y_plot),a
046711             0144*   ;     jp nz,@F ; not time for a new tile so draw current one
046711             0145*   ; ; load the next background tile
046711             0146*   ;     ld hl,BUF_STATION_BG_00
046711             0147*   ;     call rand_8
046711             0148*   ;     and %0000011
046711             0149*   ;     add a,l
046711             0150*   ;     ld l,a
046711             0151*   ;     ld a,0
046711             0152*   ;     adc a,h
046711             0153*   ;     ld h,a
046711             0154*   ;     ld (bg_bufferId),hl
046711             0155*   ; @@:
046711             0156*   ;     call vdu_buff_select
046711             0157*   ;     ld bc,0
046711             0158*   ;     ld de,(bg_y_plot)
046711             0159*   ;     inc de
046711             0160*   ;     call vdu_plot_bmp
046711             0161*   ; all done
046711 C9          0162*       ret
046712             0066        include "tiles_active.inc"
046712             0001*   
046712             0002*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
046712             0003*   tile_pad_small: equ 1
046712             0004*   tile_pad_med: equ 2
046712             0005*   tile_pad_large: equ 3
046712             0006*   tile_pad_huge: equ 4
046712             0007*   tile_turret_fireball: equ 5
046712             0008*   tile_laser_turret: equ 6
046712             0009*   tile_twin_laser_turret: equ 7
046712             0010*   tile_gatling_turret: equ 8
046712             0011*   tile_electrode_r: equ 9
046712             0012*   tile_electrode_u: equ 10
046712             0013*   tile_piston_r: equ 11
046712             0014*   tile_piston_u: equ 12
046712             0015*   tile_spark_r: equ 13
046712             0016*   tile_spark_u: equ 14
046712             0017*   tile_flame_r: equ 15
046712             0018*   tile_flame_u: equ 16
046712             0019*   
046712             0020*   active_tile_timer: equ 24 ; 2/10ths of a second
046712             0021*   tile_activation_routines:
046712 45 67 04    0022*       dl activate_null_tile ; dummy spacer since tiled is 1-based
046715 13 68 04    0023*       dl activate_pad_small
046718 45 67 04    0024*       dl activate_null_tile  ;  activate_pad_med
04671B 45 67 04    0025*       dl activate_null_tile  ;  activate_pad_large
04671E 45 67 04    0026*       dl activate_null_tile  ;  activate_pad_huge
046721 13 69 04    0027*       dl activate_turret_fireball
046724 45 67 04    0028*       dl activate_null_tile  ;  activate_laser_turret
046727 45 67 04    0029*       dl activate_null_tile  ;  activate_twin_laser_turret
04672A 45 67 04    0030*       dl activate_null_tile  ;  activate_gatling_turret
04672D 45 67 04    0031*       dl activate_null_tile  ;  activate_electrode_r
046730 45 67 04    0032*       dl activate_null_tile  ;  activate_electrode_u
046733 45 67 04    0033*       dl activate_null_tile  ;  activate_piston_r
046736 45 67 04    0034*       dl activate_null_tile  ;  activate_piston_u
046739 45 67 04    0035*       dl activate_null_tile  ;  activate_spark_r
04673C 45 67 04    0036*       dl activate_null_tile  ;  activate_spark_u
04673F 45 67 04    0037*       dl activate_null_tile  ;  activate_flame_r
046742 45 67 04    0038*       dl activate_null_tile  ;  activate_flame_u
046745             0039*   ; end tile_activation_routines
046745             0040*   
046745             0041*   activate_null_tile:
046745 C9          0042*       ret ; dummy routine, do nothing
046746             0043*   move_active_tile:
046746             0044*   ; y-axis movement
046746 FD 27 04    0045*       ld hl,(iy+tile_y)
046749 FD 17 0A    0046*       ld de,(iy+tile_yvel)
04674C 19          0047*       add hl,de
04674D FD 2F 04    0048*       ld (iy+tile_y),hl
046750             0049*   ; detect screen edge collisions
046750             0050*   ; y-axis bottom is all we need to test
046750 11 00 80 FE 0051*       ld de,-tile_bottom*256
046754 ED 5A       0052*       adc hl,de
046756 F8          0053*       ret m ; still on screen so do nothing further
046757 FD CB 1D FE 0054*       set tile_just_died,(iy+tile_collisions) ; scrolled off screen so deactivate
04675B C9          0055*       ret
04675C             0056*   ; end move_active_tile
04675C             0057*   
04675C             0058*   move_tiles:
04675C             0059*   ; are there any active tiles?
04675C 3A CD 63 04 0060*       ld a,(num_active_tiles)
046760 A7          0061*       and a ; will be zero if no alive tiles
046761 C8          0062*       ret z ; if no active tiles, we're done
046762             0063*   ; initialize pointers and loop counter
046762 FD 21 C6 60 0064*       ld iy,tile_stack ; set iy to first record in table
       04          
046767             0065*       ; ld b,table_num_records ; loop counter
046767             0066*   @move_loop:
046767 FD 22 C7 63 0067*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
04676C FD 7E 00    0068*       ld a,(iy)
04676F B7          0069*       or a ; will be zero if at end of stack
046770 C8          0070*       ret z ; end of stack so we're done
046771             0071*   ; point iy to tile record
046771 FD 37 00    0072*       ld iy,(iy) ; iy points to the current tile record
046774 FD 22 CA 63 0073*       ld (tile_table_pointer),iy ; update table pointer
       04          
046779             0074*       ; push bc ; backup loop counter
046779             0075*   ; check top bit of tile_type to see if tile is just spawned
046779 FD 7E 16    0076*       ld a,(iy+tile_type)
04677C CB 7F       0077*       bit 7,a
04677E C2 AA 67 04 0078*       jp nz,@just_spawned ; if just spawned, skip to next record
046782             0079*   ; check tile_type to see if tile is active
046782 A7          0080*       and a ; if zero, tile is dead
046783 CA AE 67 04 0081*       jp z,@next_record ; ... and we skip to next record
046787             0082*   ; otherwise we prepare to move the tile
046787 FD 27 1A    0083*       ld hl,(iy+tile_move_program) ; load the behavior subroutine address
04678A             0084*       callHL
04678A 01 90 67 04 0001*M1     ld bc,@F ; Address of first instruction after the jump
04678E C5          0002*M1     push bc ; which constitutes the return address
04678F E9          0003*M1     jp (hl) ; Jump to the address in HL
046790             0004*M1 @@:
046790             0085*   ; move_tiles_loop_return: return from behavior subroutines
046790 FD 2A CA 63 0086*       ld iy,(tile_table_pointer) ; get back table pointer
       04          
046795             0087*   ; now we check results of all the moves
046795 FD CB 1D 7E 0088*       bit tile_just_died,(iy+tile_collisions)
046799 CA AE 67 04 0089*       jp z,@next_record ; if not dead, go to next record
04679D CD 3E 64 04 0090*       call table_deactivate_tile ; otherwise, deactivate tile
0467A1 FD 2A C7 63 0091*       ld iy,(tile_stack_pointer) ; get back stack pointer
       04          
0467A6 C3 67 67 04 0092*       jp @move_loop
0467AA             0093*   @just_spawned:
0467AA FD CB 16 BE 0094*       res 7,(iy+tile_type) ; clear just spawned flag
0467AE             0095*       ; fall through to @next_record
0467AE             0096*   @next_record:
0467AE FD 2A C7 63 0097*       ld iy,(tile_stack_pointer)
       04          
0467B3 ED 33 03    0098*       lea iy,iy+3 ; next tile stack record
0467B6 C3 67 67 04 0099*       jp @move_loop ; loop until we've checked all the records
0467BA             0100*   ; end move_tiles
0467BA             0101*   
0467BA             0102*   ; TODO: much if this is deprecated by new tile table system and needs to be rewritten
0467BA             0103*   check_tile_collisions:
0467BA             0104*   ; ; check what we collide with
0467BA             0105*   ;     ld a,(iy+tile_collisions)
0467BA             0106*   ;     push af ; save collision flags
0467BA             0107*   ;     and collides_with_player ; check for collisions with player
0467BA             0108*   ;     call nz,check_tile_collision_player
0467BA             0109*   ;     pop af ; restore collision flags
0467BA             0110*   ;     and collides_with_laser ; check for collisions with laser
0467BA             0111*   ;     call nz,check_tile_collision_laser
0467BA C9          0112*       ret
0467BB             0113*   check_tile_collision_laser: ; check for collisions with laser
0467BB             0114*       ; ld ix,laser_start_variables
0467BB             0115*       ; bit tile_alive,(ix+tile_collisions)
0467BB             0116*       ; ret z ; laser dead, nothing to do
0467BB             0117*       ; call check_collision
0467BB             0118*       ; ret p ; no collision
0467BB             0119*       ; ld ix,laser_start_variables
0467BB             0120*       ; set tile_just_died,(ix+tile_collisions)
0467BB             0121*       ; set tile_alive,(ix+tile_collisions)
0467BB             0122*       ; call tile_kill
0467BB C9          0123*       ret
0467BC             0124*   check_tile_collision_player: ; check for collisions with player
0467BC             0125*       ; ld ix,player_begin
0467BC             0126*       ; bit tile_alive,(ix+tile_collisions)
0467BC             0127*       ; ret z ; player dead, no collision
0467BC             0128*       ; call check_collision
0467BC             0129*       ; ret p ; no collision
0467BC             0130*       ; call tile_kill
0467BC C9          0131*       ret
0467BD             0132*   ; end check_tile_collisions
0467BD             0133*   ; END TODO
0467BD             0134*   
0467BD             0135*   ; this routine vanquishes the tile tile
0467BD             0136*   ; and replaces it with an animated explosion
0467BD             0137*   ; destroys: everything except index registers
0467BD             0138*   ; returns: a=-1 to indicate tile died, and an incandescent ball of debris and gas
0467BD             0139*   tile_kill:
0467BD FD 2A C7 63 0140*       ld iy,(tile_stack_pointer)
       04          
0467C2 2A 00 5A 04 0141*       ld hl,(player_score)
0467C6 01 00 00 00 0142*       ld bc,0 ; clear bcu
0467CA FD 4E 26    0143*       ld c,(iy+tile_points)
0467CD 09          0144*       add hl,bc
0467CE 22 00 5A 04 0145*       ld (player_score),hl
0467D2 C3 13 29 04 0146*       jp spawn_explosion
0467D6             0147*   ; end tile_kill
0467D6             0148*   
0467D6             0149*   draw_active_tile:
0467D6 FD 27 17    0150*       ld hl,(iy+tile_base_bufferId)
0467D9 FD 7E 28    0151*       ld a,(iy+tile_frame)
0467DC 85          0152*       add a,l ; TODO: with a little work we could make all tile base buffer ids align to 256
0467DD 6F          0153*       ld l,a
0467DE 3E 00       0154*       ld a,0 ; preserve carry
0467E0 8C          0155*       adc a,h
0467E1 67          0156*       ld h,a
0467E2 CD 38 1B 04 0157*       call vdu_buff_select ; buffer id of animation frame
0467E6 FD 07 01    0158*       ld bc,(iy+tile_x)
0467E9 FD 17 04    0159*       ld de,(iy+tile_y)
0467EC CD 3C 1F 04 0160*       call vdu_plot_bmp168
0467F0 C9          0161*       ret
0467F1             0162*   ; end draw_active_tile
0467F1             0067        include "tile_pad_small.inc"
0467F1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
046800             0002*   pad_small_defaults:
046800 01          0003*       db tile_pad_small       ; type
046801 0A 01 00    0004*       dl BUF_PAD              ; base_bufferId
046804 22 68 04    0005*       dl move_pad_small       ; move_program
046807 02          0006*       db collides_with_laser  ; collisions
046808 10          0007*       db 16                   ; dim_x
046809 10          0008*       db 16                   ; dim_y
04680A 01          0009*       db 1                    ; num_orientations
04680B 01          0010*       db 1                    ; num_animations
04680C 00          0011*       db 0                    ; animation
04680D 00          0012*       db 0                    ; animation_timer
04680E 18          0013*       db 24                   ; move_timer
04680F 00          0014*       db 0                    ; move_step
046810 05          0015*       db 5                    ; points
046811 00          0016*       db 0                    ; shield_damage
046812 00          0017*       db 0                    ; frame
046813             0018*   
046813             0019*   activate_pad_small:
046813 21 00 68 04 0020*       ld hl,pad_small_defaults
046817             0021*   ; get next available tile id
046817 CD 6C 64 04 0022*       call spawn_active_tile
04681B D0          0023*       ret nc ; no carry means no free tile slots, so we go home
04681C             0024*   ; other specific initialization
04681C 3E 40       0025*       ld a,64
04681E FD 77 24    0026*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
046821 C9          0027*       ret
046822             0028*   ; end activate_pad_small
046822             0029*   
046822             0030*   move_pad_small:
046822 CD 46 67 04 0031*       call move_active_tile
046826 B7          0032*       or a ; a will be non-zero if have scrolled off screen
046827 C2 3E 64 04 0033*       jp nz,table_deactivate_tile
04682B CD DF 26 04 0034*       call check_enemy_collisions
04682F F8          0035*       ret m ; was collision so nothing more to do
046830             0036*   ; check whether it is time to spawn a seeker
046830 FD 35 24    0037*       dec (iy+tile_move_timer)
046833 C0          0038*       ret nz
046834             0039*   pad_small_reset_move_timer:
046834 CD AE 09 04 0040*       call rand_8     ; snag a random number
046838 E6 1F       0041*       and %00011111   ; keep only 5 lowest bits (max 31)
04683A C6 40       0042*       add a,64 ; range is now 64-127
04683C FD 77 24    0043*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
04683F CD 14 28 04 0044*       call enemy_spawn_seeker
046843 C9          0045*       ret
046844             0068        include "tile_turret_fireball.inc"
046844 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
046900             0002*   turret_fireball_defaults:
046900 02          0003*       db enemy_ground         ; type
046901             0004*       ; dl BUF_TURRET_000       ; base_bufferId
046901 00 01 00    0005*       dl BUF_CRATER       ; base_bufferId DEBUG
046904 22 69 04    0006*       dl move_turret_fireball ; move_program
046907 02          0007*       db collides_with_laser  ; collisions
046908 10          0008*       db 16                   ; dim_x
046909 10          0009*       db 16                   ; dim_y
04690A 20          0010*       db 32                   ; num_orientations
04690B 01          0011*       db 1                    ; num_animations
04690C 00          0012*       db 0                    ; animation
04690D 00          0013*       db 0                    ; animation_timer
04690E 18          0014*       db 24                   ; move_timer
04690F 00          0015*       db 0                    ; move_step
046910 05          0016*       db 5                    ; points
046911 00          0017*       db 0                    ; shield_damage
046912 00          0018*       db 0                    ; frame
046913             0019*   
046913             0020*   activate_turret_fireball:
046913 21 00 69 04 0021*       ld hl,turret_fireball_defaults
046917             0022*   ; get next available active tile id
046917 CD 6C 64 04 0023*       call spawn_active_tile
04691B D0          0024*       ret nc ; no carry means no free active tile slots, so we go home
04691C             0025*   ; other specific initialization
04691C 3E 40       0026*       ld a,64
04691E FD 77 24    0027*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
046921 C9          0028*       ret
046922             0029*   ; end activate_turret_fireball
046922             0030*   
046922             0031*   move_turret_fireball:
046922 CD 46 67 04 0032*       call move_active_tile
046926             0033*       ; call check_enemy_collisions
046926             0034*       ; ret m ; was collision so nothing more to do
046926             0035*   ; ; target player
046926             0036*   ;     ld hl,speed_fireball
046926             0037*   ;     ld (Vp),hl ; param for targeting_computer
046926             0038*   ;     call orientation_to_player
046926             0039*   ;     call targeting_computer
046926             0040*   ;     ld (iy+tile_heading),hl ; save active tile heading
046926             0041*   ;     call tile_frame_heading
046926 CD D6 67 04 0042*       call draw_active_tile
04692A C9          0043*       RET ; DEBUG
04692B             0044*   ; check whether it is time to spawn a fireball
04692B FD 35 24    0045*       dec (iy+tile_move_timer)
04692E C0          0046*       ret nz
04692F             0047*   ; spwan a fireball
04692F CD 13 27 04 0048*       call enemy_spawn_fireball
046933             0049*       ; fall through to reset move timer
046933             0050*   turret_fireball_reset_move_timer:
046933 CD AE 09 04 0051*       call rand_8     ; snag a random number
046937 E6 1F       0052*       and %00011111   ; keep only 5 lowest bits (max 31)
046939 C6 18       0053*       add a,24 ; range is now 24-55
04693B FD 77 24    0054*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
04693E C9          0055*       ret
04693F             0069        include "sprites.inc"
04693F             0001*   ; sprite_type
04693F             0002*   enemy_dead: equ 0
04693F             0003*   enemy_air: equ 1
04693F             0004*   enemy_ground: equ 2
04693F             0005*   enemy_projectile: equ 3
04693F             0006*   explosion: equ 4
04693F             0007*   player: equ 5
04693F             0008*   player_air: equ 6
04693F             0009*   player_ground: equ 7
04693F             0010*   
04693F             0011*   ; ###### SPRITE TABLE FIELD INDICES ######
04693F             0012*   table_record_size:         equ  64; 40 bytes ;40 bytes per sprite record
04693F             0013*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
04693F             0014*   ; sprite state variables
04693F             0015*   sprite_state_variables:    equ   1; beginning of sprite state variables
04693F             0016*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
04693F             0017*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
04693F             0018*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
04693F             0019*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
04693F             0020*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
04693F             0021*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
04693F             0022*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
04693F             0023*   ; sprite definition variables
04693F             0024*   sprite_definitions:        equ  22; beginnning of sprite definition variables
04693F             0025*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
04693F             0026*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
04693F             0027*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
04693F             0028*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
04693F             0029*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
04693F             0030*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
04693F             0031*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
04693F             0032*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
04693F             0033*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
04693F             0034*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
04693F             0035*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
04693F             0036*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
04693F             0037*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
04693F             0038*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
04693F             0039*   sprite_frame:              equ  40; 1 bytes ;current animation frame
04693F             0040*   
04693F             0041*   ; ###### SPRITE TABLE VARIABLES ######
04693F             0042*   ; maximum number of sprites
04693F             0043*   table_max_records: equ 16 ; it can handle more but this is pushing it
04693F             0044*   ; table_total_bytes: equ table_end-table_start_variables
04693F             0045*   
04693F             0046*   ; pointer to top address of current record, initialized to table_base
04693F 72 6F 04    0047*   table_pointer: dl table_base
046942             0048*   ; how many active sprites
046942 00          0049*   table_active_sprites: db 0x00
046943             0050*   ; flag indicating collision with screen edge
046943             0051*   ; uses orientation codes to specify which edge(s)
046943 00          0052*   sprite_screen_edge: db #00
046944             0053*   
046944             0054*   ; origin_top: equ 48
046944             0055*   origin_top: equ 0
046944             0056*   origin_left: equ 128
046944             0057*   field_top: equ 0
046944             0058*   field_bottom: equ 383-origin_top
046944             0059*   field_left: equ 0
046944             0060*   field_right: equ 255
046944             0061*   sprite_top: equ field_top + 0
046944             0062*   sprite_bottom: equ field_bottom-16
046944             0063*   sprite_left: equ field_left
046944             0064*   sprite_right: equ field_right-16
046944             0065*   
046944             0066*   tile_bottom: equ 384
046944             0067*   
046944             0068*   ; ######### COLLISION SPRITE PARAMETERS ##########
046944             0069*   ; integer coordinates are all that are needed for collision calculations
046944 00          0070*   collision_x: db 0x00
046945 00          0071*   collision_y: db 0x00
046946 00          0072*   collision_dim_x: db 0x00
046947 00          0073*   collision_dim_y: db 0x00
046948             0074*   
046948             0075*   ; scratch variables
046948 00          0076*   x: db 0x00 ; 8-bit signed integer
046949 00          0077*   y: db 0x00 ; 8-bit signed integer
04694A 00 00 00    0078*   x0: dl 0x000000 ; 16.8 signed fixed place
04694D 00 00 00    0079*   y0: dl 0x000000 ; 16.8 signed fixed place
046950 00 00 00    0080*   incx1: dl 0x000000 ; 16.8 signed fixed place
046953 00 00 00    0081*   incy1: dl 0x000000 ; 16.8 signed fixed place
046956 00 00 00    0082*   incx2: dl 0x000000 ; 16.8 signed fixed place
046959 00 00 00    0083*   incy2: dl 0x000000 ; 16.8 signed fixed place
04695C             0084*   
04695C             0085*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
04695C 00 00 00    0086*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
04695F 00 00 00    0087*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
046962 00 00 00    0088*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
046965             0089*   
046965             0090*   table_init:
046965             0091*   ; clear the sprite table
046965 AF          0092*       xor a ; write zeroes to sprite table
046966 21 72 6F 04 0093*       ld hl,table_base ; address to copy from
04696A 01 00 02 00 0094*       ld bc,table_end-table_base ; number of bytes to clear
04696E CD 3E 07 04 0095*       call clear_mem
046972             0096*   ; write sprite ids
046972 DD 21 72 6F 0097*       ld ix,table_base
       04          
046977 AF          0098*       xor a ; sprite id
046978 0E 00       0099*       ld c,0 ; sprite type
04697A 06 08       0100*       ld b,table_num_records ; loop counter
04697C             0101*   @loop:
04697C DD 77 00    0102*       ld (ix+sprite_id),a
04697F DD 71 16    0103*       ld (ix+sprite_type),c
046982 ED 32 40    0104*       lea ix,ix+table_record_size
046985 3C          0105*       inc a
046986 10 F4       0106*       djnz @loop
046988             0107*   
046988             0108*   ; ; DEBUG
046988             0109*   ;     ld a,sprite_type
046988             0110*   ;     call DEBUG_PRINT_FIELDS
046988             0111*   ;     CALL DEBUG_WAITKEYPRESS
046988             0112*   ; ; END DEBUG
046988 C9          0113*       ret
046989             0114*   
046989             0115*   ; gets the next available sprite id
046989             0116*   ; inputs; none
046989             0117*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
046989             0118*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
046989             0119*   ; destroys: a,b,c,hl,ix
046989             0120*   ; affects: bumps table_active_sprites by one
046989             0121*   table_get_next_id:
046989 DD 21 72 6F 0122*       ld ix,table_base
       04          
04698E 06 08       0123*       ld b,table_num_records ; loop counter
046990 0E 00       0124*       ld c,0 ; sprite id counter
046992             0125*   @loop:
046992 DD 7E 16    0126*       ld a,(ix+sprite_type)
046995 A7          0127*       and a
046996 28 08       0128*       jr z,@found
046998 ED 32 40    0129*       lea ix,ix+table_record_size
04699B 0C          0130*       inc c
04699C 10 F4       0131*       djnz @loop
04699E             0132*   @notfound:
04699E AF          0133*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
04699F C9          0134*       ret
0469A0             0135*   @found:
0469A0             0136*   ; bump number of active sprites
0469A0 21 42 69 04 0137*       ld hl,table_active_sprites
0469A4 34          0138*       inc (hl)
0469A5             0139*   ; return sprite id
0469A5 79          0140*       ld a,c
0469A6 37          0141*       scf ; sets carry flag indicating we found a free sprite
0469A7 C9          0142*       ret ; done
0469A8             0143*   ; end table_get_next_id
0469A8             0144*   
0469A8             0145*   ; deactivate the sprite with the given id
0469A8             0146*   ; inputs: iy set to sprite record
0469A8             0147*   ; outputs: nothingblkw
0469A8             0148*   ; destroys: a,hl
0469A8             0149*   ; affects: decrements table_active_sprites by one
0469A8             0150*   table_deactivate_sprite:
0469A8 FD 7E 00    0151*       ld a,(iy+sprite_id) ; get spriteId
0469AB CD 00 20 04 0152*       call vdu_sprite_select ; select sprite
0469AF CD 84 20 04 0153*       call vdu_sprite_hide
0469B3 AF          0154*       xor a
0469B4 FD 77 16    0155*       ld (iy+sprite_type),a
0469B7 21 42 69 04 0156*       ld hl,table_active_sprites
0469BB 35          0157*       dec (hl)
0469BC C9          0158*       ret
0469BD             0159*   ; end table_deactivate_sprite
0469BD             0160*   
0469BD             0161*   sprites_init:
0469BD             0162*   ; initialize sprites
0469BD CD 34 21 04 0163*   	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
0469C1 AF          0164*   	xor a ; loop counter / sprite id
0469C2             0165*   @sprite_loop:
0469C2 F5          0166*   	push af ; save loop counter / sprite id
0469C3 CD 00 20 04 0167*   	call vdu_sprite_select
0469C7 21 00 01 00 0168*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
0469CB CD 55 21 04 0169*   	call vdu_sprite_add_buff
0469CF F1          0170*   	pop af ; restore loop counter / sprite id
0469D0 3C          0171*       inc a
0469D1 FE 08       0172*       cp table_num_records
0469D3 C2 C2 69 04 0173*       jp nz,@sprite_loop
0469D7 CD 34 20 04 0174*   	call vdu_sprite_activate
0469DB             0175*   
0469DB             0176*   ; define player sprite
0469DB 3A 72 70 04 0177*   	ld a,(player_begin+sprite_id)
0469DF CD 00 20 04 0178*   	call vdu_sprite_select
0469E3 CD 13 20 04 0179*   	call vdu_sprite_clear_frames
0469E7 21 2B 01 00 0180*   	ld hl,BUF_SHIP_0L
0469EB 01 03 00 00 0181*   	ld bc,3 ; three bitmaps for player ship
0469EF             0182*   @sprite_player_loop:
0469EF C5          0183*   	push bc
0469F0 E5          0184*   	push hl
0469F1 CD 55 21 04 0185*   	call vdu_sprite_add_buff
0469F5 E1          0186*   	pop hl
0469F6 23          0187*   	inc hl
0469F7 C1          0188*   	pop bc
0469F8 10 F5       0189*   	djnz @sprite_player_loop
0469FA             0190*   
0469FA             0191*   ; define player weapon sprites
0469FA CD A5 5C 04 0192*       call init_player_laser
0469FE             0193*   
0469FE             0194*   ; define enemy sprites
0469FE CD 99 28 04 0195*       call init_enemy_seekers
046A02 C9          0196*       ret
046A03             0197*   ; end sprites_init
046A03             0198*   
046A03             0199*   ; compute a sprite's new position based on its component x,y velocities
046A03             0200*   ; with screen boundary checking and update its sprite table record accordingly
046A03             0201*   ; inputs: table_pointer set to sprite record
046A03             0202*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
046A03             0203*   ; destroys: everything
046A03             0204*   ; note: actual rendering of sprite must be handled by caller
046A03             0205*   move_sprite:
046A03 FD 2A 3F 69 0206*       ld iy,(table_pointer)
       04          
046A08             0207*   ; x-axis movement
046A08 FD 27 01    0208*       ld hl,(iy+sprite_x)
046A0B FD 17 07    0209*       ld de,(iy+sprite_xvel)
046A0E 19          0210*       add hl,de
046A0F FD 2F 01    0211*       ld (iy+sprite_x),hl
046A12             0212*   ; y-axis movement
046A12 FD 27 04    0213*       ld hl,(iy+sprite_y)
046A15 FD 17 0A    0214*       ld de,(iy+sprite_yvel)
046A18 19          0215*       add hl,de
046A19 FD 2F 04    0216*       ld (iy+sprite_y),hl
046A1C             0217*   ; detect screen edge collisions
046A1C AF          0218*       xor a ; reset screen edge collision flag and clear carry
046A1D 32 43 69 04 0219*       ld (sprite_screen_edge),a
046A21             0220*   ; y-axis first since we already have it in hl
046A21 11 00 00 00 0221*       ld de,-sprite_top*256
046A25 ED 5A       0222*       adc hl,de
046A27 FA 51 6A 04 0223*       jp m,@top
046A2B ED 52       0224*       sbc hl,de ; hl back to original value
046A2D 11 00 91 FE 0225*       ld de,-sprite_bottom*256
046A31 ED 5A       0226*       adc hl,de
046A33 F2 5B 6A 04 0227*       jp p,@bottom
046A37             0228*   @xaxis:
046A37 FD 27 01    0229*       ld hl,(iy+sprite_x)
046A3A 11 00 00 00 0230*       ld de,-sprite_left*256
046A3E ED 5A       0231*       adc hl,de
046A40 FA 76 6A 04 0232*       jp m,@left
046A44 ED 52       0233*       sbc hl,de ; hl back to original value
046A46 11 00 11 FF 0234*       ld de,-sprite_right*256
046A4A ED 5A       0235*       adc hl,de
046A4C F2 84 6A 04 0236*       jp p,@right
046A50             0237*   ; no edge collisions so go home
046A50 C9          0238*       ret
046A51             0239*   @top:
046A51 3E 08       0240*       ld a,collide_top
046A53 21 00 00 00 0241*       ld hl,sprite_top*256
046A57 C3 61 6A 04 0242*       jp @collide_y
046A5B             0243*   @bottom:
046A5B 3E 04       0244*       ld a,collide_bottom
046A5D 21 00 6F 01 0245*       ld hl,sprite_bottom*256
046A61             0246*   @collide_y:
046A61 32 43 69 04 0247*       ld (sprite_screen_edge),a
046A65 FD 2F 04    0248*       ld (iy+sprite_y),hl
046A68             0249*   ; reverse y-axis velocity
046A68 FD 27 0A    0250*       ld hl,(iy+sprite_yvel)
046A6B CD 16 09 04 0251*       call neg_hlu
046A6F FD 2F 0A    0252*       ld (iy+sprite_yvel),hl
046A72             0253*   ; go check for x-axis collisions
046A72 C3 37 6A 04 0254*       jp @xaxis
046A76             0255*   @left:
046A76 3A 43 69 04 0256*       ld a,(sprite_screen_edge)
046A7A F6 02       0257*       or a,collide_left
046A7C 21 00 00 00 0258*       ld hl,sprite_left*256
046A80 C3 8E 6A 04 0259*       jp @collide_x
046A84             0260*   @right:
046A84 3A 43 69 04 0261*       ld a,(sprite_screen_edge)
046A88 F6 01       0262*       or a,collide_right
046A8A 21 00 EF 00 0263*       ld hl,sprite_right*256
046A8E             0264*   @collide_x:
046A8E 32 43 69 04 0265*       ld (sprite_screen_edge),a
046A92 FD 2F 01    0266*       ld (iy+sprite_x),hl
046A95             0267*   ; reverse x-axis velocity
046A95 FD 27 07    0268*       ld hl,(iy+sprite_xvel)
046A98 CD 16 09 04 0269*       call neg_hlu
046A9C FD 2F 07    0270*       ld (iy+sprite_xvel),hl
046A9F             0271*   ; final collision flag to a and return
046A9F 3A 43 69 04 0272*       ld a,(sprite_screen_edge)
046AA3 C9          0273*       ret
046AA4             0274*   ; end move_sprite
046AA4             0275*   
046AA4             0276*   sprite_compute_velocities:
046AA4 FD 2A 3F 69 0277*       ld iy,(table_pointer)
       04          
046AA9 FD 17 0D    0278*       ld de,(iy+sprite_vel)
046AAC CD A9 0B 04 0279*       call polar_to_cartesian
046AB0 FD 2A 3F 69 0280*       ld iy,(table_pointer)
       04          
046AB5 FD 0F 07    0281*       ld (iy+sprite_xvel),bc ; save x-velocity component
046AB8 FD 1F 0A    0282*       ld (iy+sprite_yvel),de ; save y-velocity component
046ABB C9          0283*       ret
046ABC             0284*   ; end sprite_compute_velocities
046ABC             0285*   
046ABC             0286*   ; change an existing sprite to a new type, keeping its position and velocity the same
046ABC             0287*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
046ABC             0288*   alter_sprite:
046ABC             0289*   ; copy default settings to new sprite
046ABC ED 33 16    0290*       lea iy,iy+sprite_definitions ; bump pointer to copy to
046ABF FD E5       0291*       push iy ; pointer to default sprite settings
046AC1 D1          0292*       pop de ; address to copy to
046AC2 01 2A 00 00 0293*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
046AC6 ED B0       0294*       ldir ; copies new defaults existing sprite record
046AC8             0295*   ; return to caller
046AC8 FD 2A 3F 69 0296*       ld iy,(table_pointer) ; reset table_pointer
       04          
046ACD FD CB 16 FE 0297*       set 7,(iy+sprite_type) ; set just spawned flag
046AD1 37          0298*       scf ; set carry flag to indicate success
046AD2 C9          0299*       ret
046AD3             0300*   ; end alter_sprite
046AD3             0301*   
046AD3             0302*   ; create a new sprite at the same location as an existing sprite
046AD3             0303*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
046AD3             0304*   spawn_sprite:
046AD3 E5          0305*       push hl ; back up pointer to new sprite defaults
046AD4 CD 89 69 04 0306*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
046AD8 E1          0307*       pop hl ; restore pointer to new sprite defaults
046AD9 D0          0308*       ret nc ; no carry means no free sprite slots, so we go home
046ADA             0309*   ; copy default settings to new sprite
046ADA DD E5       0310*       push ix ; back up pointer to new sprite record
046ADC ED 32 16    0311*       lea ix,ix+sprite_definitions ; bump pointer to copy to
046ADF DD E5       0312*       push ix ; pointer to default sprite settings
046AE1 D1          0313*       pop de ; address to copy to
046AE2 01 2A 00 00 0314*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
046AE6 ED B0       0315*       ldir ; copies defaults to new sprite record
046AE8             0316*   ; return to caller
046AE8 DD E1       0317*       pop ix ; restore pointer to new sprite record
046AEA DD CB 16 FE 0318*       set 7,(ix+sprite_type) ; set just spawned flag
046AEE 37          0319*       scf ; set carry flag to indicate success
046AEF C9          0320*       ret
046AF0             0321*   
046AF0             0322*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
046AF0             0323*   spawn_sprite_from_sprite:
046AF0 CD D3 6A 04 0324*       call spawn_sprite
046AF4 D0          0325*       ret nc ; no carry means no free sprite slots, so we go home
046AF5             0326*   ; copy sprite position, velocity and orientation from existing sprite
046AF5 FD 2A 3F 69 0327*       ld iy,(table_pointer) ; get existing sprite record
       04          
046AFA FD 27 01    0328*       ld hl,(iy+sprite_x)
046AFD DD 2F 01    0329*       ld (ix+sprite_x),hl
046B00 FD 27 04    0330*       ld hl,(iy+sprite_y)
046B03 DD 2F 04    0331*       ld (ix+sprite_y),hl
046B06             0332*   ; return to caller
046B06 DD CB 16 FE 0333*       set 7,(ix+sprite_type) ; set just spawned flag
046B0A 37          0334*       scf ; set carry flag to indicate success
046B0B C9          0335*       ret
046B0C             0336*   
046B0C             0337*   ; compute animation frame based on sprite_animation and sprite_heading
046B0C             0338*   ; inputs: table_pointer set to sprite record
046B0C             0339*   ; outputs: a, sprite_frame set to animation frame
046B0C             0340*   ; destroys: a,hl
046B0C             0341*   sprite_frame_heading_animation:
046B0C FD 7E 11    0342*       ld a,(iy+sprite_heading+1) ; we want the integer portion
046B0F CB 3F       0343*       srl a ; divide integer portion by 8
046B11 CB 3F       0344*       srl a
046B13 CB 3F       0345*       srl a
046B15 FD 66 22    0346*       ld h,(iy+sprite_animation)
046B18 2E 20       0347*       ld l,32 ; 32 orientation frames per animation
046B1A ED 6C       0348*       mlt hl ; hl = offset from base animation
046B1C 85          0349*       add a,l ; modulo256 since sprite_frame is only 1 byte
046B1D FD 77 28    0350*       ld (iy+sprite_frame),a
046B20 C9          0351*       ret
046B21             0352*   ; end sprite_frame_heading_animation
046B21             0353*   
046B21             0354*   ; compute animation frame based on sprite_heading
046B21             0355*   ; inputs: table_pointer set to sprite record
046B21             0356*   ; outputs: a, sprite_frame set to animation frame
046B21             0357*   ; destroys: a,hl
046B21             0358*   sprite_frame_heading:
046B21 FD 7E 11    0359*       ld a,(iy+sprite_heading+1) ; we want the integer portion
046B24 CB 3F       0360*       srl a ; divide integer portion by 8
046B26 CB 3F       0361*       srl a
046B28 CB 3F       0362*       srl a
046B2A FD 77 28    0363*       ld (iy+sprite_frame),a
046B2D C9          0364*       ret
046B2E             0365*   ; end sprite_frame_heading
046B2E             0366*   
046B2E             0367*   ; load a sprite with animation bitmaps
046B2E             0368*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
046B2E             0369*   sprite_load_frames:
046B2E             0370*   ; back up input parameters
046B2E E5          0371*       push hl ; base bufferId
046B2F C5          0372*       push bc ; bc = number of frames
046B30 CD 13 20 04 0373*       call vdu_sprite_clear_frames
046B34 C1          0374*       pop bc ; bc = number of frames
046B35 E1          0375*       pop hl ; = base bufferId
046B36             0376*   @load_frames:
046B36 C5          0377*       push bc ; back up loop counter
046B37 E5          0378*       push hl ; back up base bufferId
046B38 CD 55 21 04 0379*       call vdu_sprite_add_buff
046B3C E1          0380*       pop hl ; restore base bufferId
046B3D 23          0381*       inc hl ; bump it to the next frame
046B3E             0382*   ; decrement loop counter
046B3E C1          0383*       pop bc
046B3F 0B          0384*       dec bc
046B40 79          0385*       ld a,c
046B41 B7          0386*       or a
046B42 C2 36 6B 04 0387*       jp nz,@load_frames
046B46 78          0388*       ld a,b
046B47 B7          0389*       or a
046B48 C2 36 6B 04 0390*       jp nz,@load_frames
046B4C C9          0391*       ret
046B4D             0392*   ; end sprite_load_frames
046B4D             0393*   
046B4D             0394*   dump_sprite_record:
046B4D             0395*       ; call vdu_home_cursor
046B4D CD 10 01 04 0396*       call printInline
046B51 69 64 3A 20 0397*       asciz "id:   "
       20 20 00    
046B58 DD 7E 00    0398*       ld a,(ix+sprite_id)
046B5B CD 5A 01 04 0399*       call printHexA
046B5F             0400*   
046B5F CD 10 01 04 0401*       call printInline
046B63 0D 0A 78 3A 0402*       asciz "\r\nx:   "
       20 20 20 00 
046B6B DD 27 01    0403*       ld hl,(ix+sprite_x)
046B6E CD 38 03 04 0404*       call print_s168_hl
046B72             0405*   
046B72 CD 10 01 04 0406*       call printInline
046B76 0D 0A 79 3A 0407*       asciz "\r\ny:   "
       20 20 20 00 
046B7E DD 27 04    0408*       ld hl,(ix+sprite_y)
046B81 CD 38 03 04 0409*       call print_s168_hl
046B85             0410*   
046B85 CD 10 01 04 0411*       call printInline
046B89 0D 0A 78 76 0412*       asciz "\r\nxv:  "
       3A 20 20 00 
046B91 DD 27 07    0413*       ld hl,(ix+sprite_xvel)
046B94 CD 38 03 04 0414*       call print_s168_hl
046B98             0415*   
046B98 CD 10 01 04 0416*       call printInline
046B9C 0D 0A 79 76 0417*       asciz "\r\nyv:  "
       3A 20 20 00 
046BA4 DD 27 0A    0418*       ld hl,(ix+sprite_yvel)
046BA7 CD 38 03 04 0419*       call print_s168_hl
046BAB             0420*   
046BAB             0421*       ; call printInline
046BAB             0422*       ; asciz "\r\nv:   "
046BAB             0423*       ; ld hl,(ix+sprite_vel)
046BAB             0424*       ; call print_s168_hl
046BAB             0425*   
046BAB             0426*       ; call printInline
046BAB             0427*       ; asciz "\r\nhdg  "
046BAB             0428*       ; ld hl,(ix+sprite_heading)
046BAB             0429*       ; call print_s168_hl
046BAB             0430*   
046BAB             0431*       ; call printInline
046BAB             0432*       ; asciz "\r\nori: "
046BAB             0433*       ; ld hl,(ix+sprite_orientation)
046BAB             0434*       ; call print_s168_hl
046BAB             0435*   
046BAB CD 10 01 04 0436*       call printInline
046BAF 0D 0A 74 79 0437*       asciz "\r\ntyp: "
       70 3A 20 00 
046BB7 DD 7E 16    0438*       ld a,(ix+sprite_type)
046BBA CD 5A 01 04 0439*       call printHexA
046BBE             0440*   
046BBE CD 10 01 04 0441*       call printInline
046BC2 0D 0A 42 49 0442*       asciz "\r\nBId: "
       64 3A 20 00 
046BCA DD 27 17    0443*       ld hl,(ix+sprite_base_bufferId)
046BCD CD 37 01 04 0444*       call printHex24
046BD1             0445*   
046BD1 CD 10 01 04 0446*       call printInline
046BD5 0D 0A 6D 50 0447*       asciz "\r\nmPg: "
       67 3A 20 00 
046BDD DD 27 1A    0448*       ld hl,(ix+sprite_move_program)
046BE0 CD 37 01 04 0449*       call printHex24
046BE4             0450*   
046BE4 CD 10 01 04 0451*       call printInline
046BE8 0D 0A 63 6F 0452*       asciz "\r\ncol: "
       6C 3A 20 00 
046BF0 DD 7E 1D    0453*       ld a,(ix+sprite_collisions)
046BF3 CD B5 03 04 0454*       call printBin8
046BF7             0455*   
046BF7             0456*       ; call printInline
046BF7             0457*       ; asciz "\r\nszx: "
046BF7             0458*       ; ld a,(ix+sprite_dim_x)
046BF7             0459*       ; call printHexA
046BF7             0460*   
046BF7             0461*       ; call printInline
046BF7             0462*       ; asciz "\r\nszy: "
046BF7             0463*       ; ld a,(ix+sprite_dim_y)
046BF7             0464*       ; call printHexA
046BF7             0465*   
046BF7             0466*       ; call printInline
046BF7             0467*       ; asciz "\r\n#ori:"
046BF7             0468*       ; ld a,(ix+sprite_num_orientations)
046BF7             0469*       ; call printHexA
046BF7             0470*   
046BF7             0471*       ; call printInline
046BF7             0472*       ; asciz "\r\n#ani:"
046BF7             0473*       ; ld a,(ix+sprite_num_animations)
046BF7             0474*       ; call printHexA
046BF7             0475*   
046BF7             0476*       ; call printInline
046BF7             0477*       ; asciz "\r\nani: "
046BF7             0478*       ; ld a,(ix+sprite_animation)
046BF7             0479*       ; call printHexA
046BF7             0480*   
046BF7             0481*       ; call printInline
046BF7             0482*       ; asciz "\r\nanit:"
046BF7             0483*       ; ld a,(ix+sprite_animation_timer)
046BF7             0484*       ; call printHexA
046BF7             0485*   
046BF7             0486*       ; call printInline
046BF7             0487*       ; asciz "\r\nmvt: "
046BF7             0488*       ; ld a,(ix+sprite_move_timer)
046BF7             0489*       ; call printHexA
046BF7             0490*   
046BF7             0491*       ; call printInline
046BF7             0492*       ; asciz "\r\nmvs: "
046BF7             0493*       ; ld a,(ix+sprite_move_step)
046BF7             0494*       ; call printHexA
046BF7             0495*   
046BF7             0496*       ; call printInline
046BF7             0497*       ; asciz "\r\npts: "
046BF7             0498*       ; ld a,(ix+sprite_points)
046BF7             0499*       ; call printHexA
046BF7             0500*   
046BF7             0501*       ; call printInline
046BF7             0502*       ; asciz "\r\ndmg: "
046BF7             0503*       ; ld a,(ix+sprite_shield_damage)
046BF7             0504*       ; call printHexA
046BF7             0505*   
046BF7             0506*       ; call printInline
046BF7             0507*       ; asciz "\r\nfrm: "
046BF7             0508*       ; ld a,(ix+sprite_frame)
046BF7             0509*       ; call printHexA
046BF7             0510*   
046BF7             0511*       ; call printNewLine
046BF7             0512*   
046BF7             0513*       ; call waitKeypress
046BF7 C9          0514*       ret
046BF8             0070        include "sprites_new.inc"
046BF8             0001*   ; gets the next available sprite id for a particular sprite group
046BF8             0002*   ; inputs; ix = pointer to sprite group, b = number of records in sprite group
046BF8             0003*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
046BF8             0004*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
046BF8             0005*   ; destroys: a,b,c,hl,ix
046BF8             0006*   ; affects: bumps table_active_sprites by one
046BF8             0007*   table_get_next_id_new:
046BF8 DD 4E 00    0008*       ld c,(ix+sprite_id) ; sprite id counter
046BFB             0009*   @loop:
046BFB DD 7E 16    0010*       ld a,(ix+sprite_type)
046BFE A7          0011*       and a
046BFF 28 08       0012*       jr z,@found
046C01 ED 32 40    0013*       lea ix,ix+table_record_size
046C04 0C          0014*       inc c
046C05 10 F4       0015*       djnz @loop
046C07             0016*   @notfound:
046C07 AF          0017*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
046C08 C9          0018*       ret
046C09             0019*   @found:
046C09             0020*   ; bump number of active sprites
046C09 21 42 69 04 0021*       ld hl,table_active_sprites
046C0D 34          0022*       inc (hl)
046C0E             0023*   ; return sprite id
046C0E 79          0024*       ld a,c
046C0F 37          0025*       scf ; sets carry flag indicating we found a free sprite
046C10 C9          0026*       ret ; done
046C11             0027*   ; end table_get_next_id_new
046C11             0028*   
046C11             0029*   ; create a new sprite at the same location as an existing sprite
046C11             0030*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
046C11             0031*   ;         ix = pointer to sprite group, b = number of records in sprite group
046C11             0032*   ; affects: bumps table_active_sprites by one
046C11             0033*   spawn_sprite_from_sprite_new:
046C11 E5          0034*       push hl ; back up pointer to new sprite defaults
046C12 CD F8 6B 04 0035*       call table_get_next_id_new ; if available: a = new sprite id, ix = pointer to new sprite vars
046C16 E1          0036*       pop hl ; restore pointer to new sprite defaults
046C17 D0          0037*       ret nc ; no carry means no free sprite slots, so we go home
046C18             0038*   ; copy default settings to new sprite
046C18 DD E5       0039*       push ix ; back up pointer to new sprite record
046C1A ED 32 16    0040*       lea ix,ix+sprite_definitions ; bump pointer to copy to
046C1D DD E5       0041*       push ix ; pointer to default sprite settings
046C1F D1          0042*       pop de ; address to copy to
046C20 01 2A 00 00 0043*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
046C24 ED B0       0044*       ldir ; copies defaults to new sprite record
046C26 DD E1       0045*       pop ix ; restore pointer to new sprite record
046C28             0046*   ; copy sprite position, velocity and orientation from existing sprite
046C28 FD 2A 3F 69 0047*       ld iy,(table_pointer) ; get existing sprite record
       04          
046C2D FD 27 01    0048*       ld hl,(iy+sprite_x)
046C30 DD 2F 01    0049*       ld (ix+sprite_x),hl
046C33 FD 27 04    0050*       ld hl,(iy+sprite_y)
046C36 DD 2F 04    0051*       ld (ix+sprite_y),hl
046C39             0052*   ; return to caller
046C39 DD CB 16 FE 0053*       set 7,(ix+sprite_type) ; set just spawned flag
046C3D 37          0054*       scf ; set carry flag to indicate success
046C3E C9          0055*       ret
046C3F             0056*   ; end spawn_sprite_from_sprite_new
046C3F             0057*   
046C3F             0058*   ; change an existing sprite to a new type, keeping its position and velocity the same
046C3F             0059*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
046C3F             0060*   ;         ix = pointer to sprite group, b = number of records in sprite group
046C3F             0061*   alter_sprite_new:
046C3F E5          0062*       push hl ; back up pointer to new sprite defaults
046C40 CD F8 6B 04 0063*       call table_get_next_id_new ; if available: a = new sprite id, ix = pointer to new sprite vars
046C44 35          0064*       dec (hl) ; decrement table_active_sprites by one since we're not actually creating a new sprite
046C45 E1          0065*       pop hl ; restore pointer to new sprite defaults
046C46 D0          0066*       ret nc ; no carry means no free sprite slots, so we go home
046C47             0067*   ; copy default settings to new sprite
046C47 DD E5       0068*       push ix ; back up pointer to new sprite record
046C49 ED 32 16    0069*       lea ix,ix+sprite_definitions ; bump pointer to copy to
046C4C DD E5       0070*       push ix ; pointer to default sprite settings
046C4E D1          0071*       pop de ; address to copy to
046C4F 01 2A 00 00 0072*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
046C53 ED B0       0073*       ldir ; copies defaults to new sprite record
046C55 DD E1       0074*       pop ix ; restore pointer to new sprite record
046C57             0075*   ; copy sprite position, velocity and orientation from existing sprite
046C57 FD 2A 3F 69 0076*       ld iy,(table_pointer) ; get existing sprite record
       04          
046C5C FD 27 01    0077*       ld hl,(iy+sprite_x)
046C5F DD 2F 01    0078*       ld (ix+sprite_x),hl
046C62 FD 27 04    0079*       ld hl,(iy+sprite_y)
046C65 DD 2F 04    0080*       ld (ix+sprite_y),hl
046C68             0081*   ; return to caller
046C68 37          0082*       scf ; set carry flag to indicate success
046C69             0083*   ; end alter_sprite_new
046C69             0071    
046C69 FF FF FF FF 0072        align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
046D00             0073    
046D00             0074    ; --- MAIN PROGRAM FILE ---
046D00 57 65 6C 63 0075    hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
046D1B 4C 6F 61 64 0076    loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
046D29 50 72 65 73 0077    loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
046D44             0078    
046D44             0079    init:
046D44             0080    ; clear all buffers
046D44 CD 2A 1C 04 0081        call vdu_clear_all_buffers
046D48             0082    
046D48             0083    ; print loading ui message
046D48 CD 4B 1A 04 0084        call vdu_cls
046D4C 21 6A 21 04 0085        ld hl,loading_ui
046D50 CD 17 01 04 0086        call printString
046D54 CD 50 1A 04 0087        call vdu_flip
046D58             0088    ; load UI images
046D58 CD CE 16 04 0089        call load_ui_images
046D5C             0090    
046D5C             0091    ; set up the display
046D5C 3E 88       0092        ld a,8+128 ; 136   320   240   64    60hz double-buffered
046D5E             0093        ; ld a,20 ;  512   384   64    60hz single-buffered
046D5E CD 14 1B 04 0094        call vdu_set_screen_mode
046D62 AF          0095        xor a
046D63 CD 25 1B 04 0096        call vdu_set_scaling
046D67             0097    
046D67             0098    ; ; enable additional audio channels
046D67             0099    ; 	call vdu_enable_channels
046D67             0100    
046D67             0101    ; set text background color
046D67 3E 9A       0102        ld a,26+128 ; violet
046D69 CD 7C 1A 04 0103        call vdu_colour_text
046D6D             0104    
046D6D             0105    ; set text foreground color
046D6D 3E 2F       0106        ld a,47 ; aaaaff lavenderish
046D6F CD 7C 1A 04 0107        call vdu_colour_text
046D73             0108    
046D73             0109    ; set gfx bg color
046D73 AF          0110        xor a ; plotting mode 0
046D74 3E 9A       0111        ld a,26+128 ; violet
046D76 CD 8D 1A 04 0112        call vdu_gcol
046D7A CD 4B 1A 04 0113        call vdu_cls
046D7E             0114    
046D7E             0115    ; set the cursor off
046D7E CD 13 1A 04 0116        call vdu_cursor_off
046D82             0117    
046D82             0118    ; VDU 28, left, bottom, right, top: Set text viewport **
046D82             0119    ; MIND THE LITTLE-ENDIANESS
046D82             0120    ; inputs: c=left,b=bottom,e=right,d=top
046D82 0E 00       0121        ld c,0 ; left
046D84 16 00       0122        ld d,0 ; top
046D86 1E 27       0123        ld e,39 ; right
046D88 06 00       0124        ld b,0; bottom
046D8A CD A4 1A 04 0125        call vdu_set_txt_viewport
046D8E             0126    
046D8E             0127    ; load sprites
046D8E CD 09 16 04 0128        call img_load_init ; sets up the animated load screen
046D92 CD E1 16 04 0129        call load_sprite_images
046D96             0130    
046D96             0131    ; load tileset_ptrs
046D96 CD F2 16 04 0132        call load_tilesets
046D9A             0133    
046D9A             0134    ; ; load sound effects ; TODO
046D9A             0135    ; 	ld bc,SFX_num_buffers
046D9A             0136    ; 	ld hl,SFX_buffer_id_lut
046D9A             0137    ; 	ld (cur_buffer_id_lut),hl
046D9A             0138    ; 	ld hl,SFX_load_routines_table
046D9A             0139    ; 	ld (cur_load_jump_table),hl
046D9A             0140    ; 	call sfx_load_main
046D9A             0141    
046D9A             0142    ; print loading complete message and wait for user keypress
046D9A CD 4B 1A 04 0143        call vdu_cls
046D9E 21 29 6D 04 0144        ld hl,loading_complete
046DA2 CD 17 01 04 0145        call printString
046DA6 CD 50 1A 04 0146        call vdu_flip
046DAA CD C5 06 04 0147        call waitKeypress
046DAE             0148    
046DAE             0149    ; set up display for gameplay
046DAE             0150        ; ld a,8
046DAE 3E 14       0151        ld a,20
046DB0 CD 14 1B 04 0152        call vdu_set_screen_mode
046DB4 AF          0153        xor a
046DB5 CD 25 1B 04 0154        call vdu_set_scaling
046DB9 CD 13 1A 04 0155        call vdu_cursor_off
046DBD             0156    ; load fonts
046DBD CD 00 15 04 0157    	call fonts_load
046DC1             0158    ; select font
046DC1             0159        ; ld hl,computer_pixel_7_8x16
046DC1 21 02 FA 00 0160        ld hl,amiga_forever_8x8 ; DEBUG
046DC5 3E 01       0161        ld a,1 ; flags
046DC7 CD 00 1E 04 0162        call vdu_font_select
046DCB             0163    ; plot bezel art
046DCB 21 00 00 00 0164        ld hl,BUF_BEZEL_L
046DCF CD 38 1B 04 0165        call vdu_buff_select
046DD3 01 00 00 00 0166        ld bc,0
046DD7 11 00 00 00 0167        ld de,0
046DDB CD 20 1F 04 0168        call vdu_plot_bmp
046DDF 21 01 00 00 0169        ld hl,BUF_BEZEL_R
046DE3 CD 38 1B 04 0170        call vdu_buff_select
046DE7 01 80 01 00 0171        ld bc,384
046DEB 11 00 00 00 0172        ld de,0
046DEF CD 20 1F 04 0173        call vdu_plot_bmp
046DF3             0174    ; set gfx origin and viewport to playing field window
046DF3 01 80 00 00 0175        ld bc,origin_left
046DF7 11 00 00 00 0176        ld de,origin_top
046DFB CD D0 1A 04 0177        call vdu_set_gfx_origin
046DFF 01 00 00 00 0178        ld bc,field_left
046E03 11 00 00 00 0179        ld de,field_top
046E07 DD 21 FF 00 0180        ld ix,field_right
       00          
046E0C FD 21 7F 01 0181        ld iy,field_bottom
       00          
046E11 CD EB 1A 04 0182        call vdu_set_gfx_viewport
046E15             0183    ; set background color
046E15 3E 9A       0184        ld a,26+128 ; violet
046E17 CD 8D 1A 04 0185        call vdu_gcol
046E1B CD 5E 1A 04 0186        call vdu_clg
046E1F             0187    ; VDU 28, left, bottom, right, top: Set text viewport **
046E1F 0E 00       0188        ld c,0 ; left
046E21 16 00       0189        ld d,0 ; top
046E23 1E 3E       0190        ld e,62 ; right
046E25 06 30       0191        ld b,48; bottom
046E27 CD A4 1A 04 0192        call vdu_set_txt_viewport
046E2B             0193    
046E2B             0194    ; initialize the global timestamp
046E2B CD F9 18 04 0195        call timestamp_tick
046E2F             0196    
046E2F             0197    ; done with init
046E2F C9          0198        ret
046E30             0199    
046E30             0200    main:
046E30             0201    ; start a new game
046E30 CD 17 5E 04 0202        call game_initialize
046E34             0203    
046E34             0204        ; CALL DEBUG_PRINT_TABLE
046E34             0205        ; CALL DEBUG_WAITKEYPRESS
046E34             0206    main_loop:
046E34             0207    ; update the global timestamp
046E34 CD F9 18 04 0208        call timestamp_tick
046E38             0209    ; do gamestate logic
046E38 CD 03 5E 04 0210        call do_game
046E3C             0211    
046E3C             0212    ; DEBUG
046E3C             0213        ; CALL DEBUG_PRINT_TABLE
046E3C             0214        ; CALL DEBUG_WAITKEYPRESS
046E3C             0215    ; END DEBUG
046E3C             0216    
046E3C             0217    ; wait for the next vblank mitigate flicker and for loop timing
046E3C CD BF 1A 04 0218        call vdu_vblank
046E40             0219        ; call vdu_vblank ; DEBUG
046E40             0220        ; call vdu_vblank ; DEBUG
046E40             0221    
046E40             0222    ; poll keyboard for escape keypress
046E40 3E 08       0223        ld a, $08 ; code to send to MOS
046E42 5B CF       0224        rst.lil $08 ; get IX pointer to System Variables
046E44 DD 7E 05    0225        ld a, (ix + $05) ; get ASCII code of key pressed
046E47 FE 1B       0226        cp 27 ; check if 27 (ascii code for ESC)
046E49 CA 51 6E 04 0227        jp z, main_end ; if pressed, jump to exit
046E4D             0228    
046E4D             0229    ; escape not pressed so loop
046E4D C3 34 6E 04 0230        jp main_loop
046E51             0231    
046E51             0232    main_end:
046E51 CD 05 1A 04 0233        call vdu_cursor_on
046E55 C9          0234        ret
046E56             0235    
046E56             0236    DEBUG_PRINT:
046E56             0237        PUSH_ALL
046E56 08          0001M1      ex af,af'
046E57 D9          0002M1      exx
046E58 F5          0003M1      push af
046E59 E5          0004M1      push hl
046E5A C5          0005M1      push bc
046E5B D5          0006M1      push de
046E5C             0007M1  
046E5C 08          0008M1      ex af,af'
046E5D D9          0009M1      exx
046E5E F5          0010M1      push af
046E5F E5          0011M1      push hl
046E60 C5          0012M1      push bc
046E61 D5          0013M1      push de
046E62 DD E5       0014M1      push ix
046E64 FD E5       0015M1      push iy
046E66 0E 00       0238        ld c,0
046E68 06 00       0239        ld b,0
046E6A CD 37 1A 04 0240        call vdu_move_cursor
046E6E             0241        POP_ALL
046E6E FD E1       0001M1      pop iy
046E70 DD E1       0002M1      pop ix
046E72 D1          0003M1      pop de
046E73 C1          0004M1      pop bc
046E74 E1          0005M1      pop hl
046E75 F1          0006M1      pop af
046E76 08          0007M1      ex af,af'
046E77 D9          0008M1      exx
046E78             0009M1  
046E78 D1          0010M1      pop de
046E79 C1          0011M1      pop bc
046E7A E1          0012M1      pop hl
046E7B F1          0013M1      pop af
046E7C 08          0014M1      ex af,af'
046E7D D9          0015M1      exx
046E7E             0242        PUSH_ALL
046E7E 08          0001M1      ex af,af'
046E7F D9          0002M1      exx
046E80 F5          0003M1      push af
046E81 E5          0004M1      push hl
046E82 C5          0005M1      push bc
046E83 D5          0006M1      push de
046E84             0007M1  
046E84 08          0008M1      ex af,af'
046E85 D9          0009M1      exx
046E86 F5          0010M1      push af
046E87 E5          0011M1      push hl
046E88 C5          0012M1      push bc
046E89 D5          0013M1      push de
046E8A DD E5       0014M1      push ix
046E8C FD E5       0015M1      push iy
046E8E CD 64 06 04 0243        call dumpFlags
046E92             0244        POP_ALL
046E92 FD E1       0001M1      pop iy
046E94 DD E1       0002M1      pop ix
046E96 D1          0003M1      pop de
046E97 C1          0004M1      pop bc
046E98 E1          0005M1      pop hl
046E99 F1          0006M1      pop af
046E9A 08          0007M1      ex af,af'
046E9B D9          0008M1      exx
046E9C             0009M1  
046E9C D1          0010M1      pop de
046E9D C1          0011M1      pop bc
046E9E E1          0012M1      pop hl
046E9F F1          0013M1      pop af
046EA0 08          0014M1      ex af,af'
046EA1 D9          0015M1      exx
046EA2             0245        PUSH_ALL
046EA2 08          0001M1      ex af,af'
046EA3 D9          0002M1      exx
046EA4 F5          0003M1      push af
046EA5 E5          0004M1      push hl
046EA6 C5          0005M1      push bc
046EA7 D5          0006M1      push de
046EA8             0007M1  
046EA8 08          0008M1      ex af,af'
046EA9 D9          0009M1      exx
046EAA F5          0010M1      push af
046EAB E5          0011M1      push hl
046EAC C5          0012M1      push bc
046EAD D5          0013M1      push de
046EAE DD E5       0014M1      push ix
046EB0 FD E5       0015M1      push iy
046EB2 CD C6 04 04 0246        call dumpRegistersHex
046EB6             0247        ; call waitKeypress
046EB6             0248        POP_ALL
046EB6 FD E1       0001M1      pop iy
046EB8 DD E1       0002M1      pop ix
046EBA D1          0003M1      pop de
046EBB C1          0004M1      pop bc
046EBC E1          0005M1      pop hl
046EBD F1          0006M1      pop af
046EBE 08          0007M1      ex af,af'
046EBF D9          0008M1      exx
046EC0             0009M1  
046EC0 D1          0010M1      pop de
046EC1 C1          0011M1      pop bc
046EC2 E1          0012M1      pop hl
046EC3 F1          0013M1      pop af
046EC4 08          0014M1      ex af,af'
046EC5 D9          0015M1      exx
046EC6 C9          0249        ret
046EC7             0250    
046EC7             0251    DEBUG_PRINT_TABLE:
046EC7             0252        PUSH_ALL
046EC7 08          0001M1      ex af,af'
046EC8 D9          0002M1      exx
046EC9 F5          0003M1      push af
046ECA E5          0004M1      push hl
046ECB C5          0005M1      push bc
046ECC D5          0006M1      push de
046ECD             0007M1  
046ECD 08          0008M1      ex af,af'
046ECE D9          0009M1      exx
046ECF F5          0010M1      push af
046ED0 E5          0011M1      push hl
046ED1 C5          0012M1      push bc
046ED2 D5          0013M1      push de
046ED3 DD E5       0014M1      push ix
046ED5 FD E5       0015M1      push iy
046ED7             0253        ; call vdu_home_cursor
046ED7 0E 00       0254        ld c,0
046ED9 06 00       0255        ld b,0
046EDB CD 37 1A 04 0256        call vdu_move_cursor
046EDF             0257    
046EDF             0258        ; ld a,(player_weapons_count)
046EDF             0259        ; call printHexA
046EDF             0260        ; call printNewLine
046EDF             0261    
046EDF             0262        ; LIST_FIELD sprite_move_program,3 ; DEBUG
046EDF             0263        ; LIST_FIELD sprite_type,1 ; DEBUG
046EDF             0264    
046EDF DD 21 72 6F 0265        ld ix,player_weapons_begin
       04          
046EE4 CD 4D 6B 04 0266        call dump_sprite_record
046EE8 CD 2C 01 04 0267        call printNewLine
046EEC CD 2C 01 04 0268        call printNewLine
046EF0             0269    
046EF0 ED 32 40    0270        lea ix,ix+table_record_size
046EF3 CD 4D 6B 04 0271        call dump_sprite_record
046EF7 CD 2C 01 04 0272        call printNewLine
046EFB CD 2C 01 04 0273        call printNewLine
046EFF             0274    
046EFF ED 32 40    0275        lea ix,ix+table_record_size
046F02 CD 4D 6B 04 0276        call dump_sprite_record
046F06 CD 2C 01 04 0277        call printNewLine
046F0A CD 2C 01 04 0278        call printNewLine
046F0E             0279    
046F0E ED 32 40    0280        lea ix,ix+table_record_size
046F11 CD 4D 6B 04 0281        call dump_sprite_record
046F15 CD 2C 01 04 0282        call printNewLine
046F19 CD 2C 01 04 0283        call printNewLine
046F1D             0284    
046F1D             0285        ; ld ix,player_begin
046F1D             0286        ; call dump_sprite_record
046F1D             0287    
046F1D             0288        ; call waitKeypress
046F1D             0289        POP_ALL
046F1D FD E1       0001M1      pop iy
046F1F DD E1       0002M1      pop ix
046F21 D1          0003M1      pop de
046F22 C1          0004M1      pop bc
046F23 E1          0005M1      pop hl
046F24 F1          0006M1      pop af
046F25 08          0007M1      ex af,af'
046F26 D9          0008M1      exx
046F27             0009M1  
046F27 D1          0010M1      pop de
046F28 C1          0011M1      pop bc
046F29 E1          0012M1      pop hl
046F2A F1          0013M1      pop af
046F2B 08          0014M1      ex af,af'
046F2C D9          0015M1      exx
046F2D C9          0290        RET
046F2E             0291    
046F2E             0292    DEBUG_WAITKEYPRESS:
046F2E             0293        PUSH_ALL
046F2E 08          0001M1      ex af,af'
046F2F D9          0002M1      exx
046F30 F5          0003M1      push af
046F31 E5          0004M1      push hl
046F32 C5          0005M1      push bc
046F33 D5          0006M1      push de
046F34             0007M1  
046F34 08          0008M1      ex af,af'
046F35 D9          0009M1      exx
046F36 F5          0010M1      push af
046F37 E5          0011M1      push hl
046F38 C5          0012M1      push bc
046F39 D5          0013M1      push de
046F3A DD E5       0014M1      push ix
046F3C FD E5       0015M1      push iy
046F3E CD C5 06 04 0294        call waitKeypress
046F42             0295        POP_ALL
046F42 FD E1       0001M1      pop iy
046F44 DD E1       0002M1      pop ix
046F46 D1          0003M1      pop de
046F47 C1          0004M1      pop bc
046F48 E1          0005M1      pop hl
046F49 F1          0006M1      pop af
046F4A 08          0007M1      ex af,af'
046F4B D9          0008M1      exx
046F4C             0009M1  
046F4C D1          0010M1      pop de
046F4D C1          0011M1      pop bc
046F4E E1          0012M1      pop hl
046F4F F1          0013M1      pop af
046F50 08          0014M1      ex af,af'
046F51 D9          0015M1      exx
046F52 C9          0296        RET
046F53             0297    
046F53             0298    DEBUG_PRINT_FIELDS:
046F53             0299        ; PUSH_ALL
046F53 01 00 00 00 0300        ld bc,0
046F57 4F          0301        ld c,a
046F58 DD 21 72 6F 0302        ld ix,table_base
       04          
046F5D DD 09       0303        add ix,bc
046F5F 06 08       0304        ld b,table_num_records
046F61             0305    @@:
046F61 DD E5       0306        push ix
046F63 E1          0307        pop hl
046F64 C5          0308        push bc ; save loop counter
046F65 3E 01       0309        ld a,1 ; print one byte
046F67 CD CA 06 04 0310        call dumpMemoryHex
046F6B ED 32 40    0311        lea ix,ix+table_record_size
046F6E C1          0312        pop bc ; restore loop counter
046F6F 10 F0       0313        djnz @b
046F71             0314        ; POP_ALL
046F71 C9          0315        ret
046F72             0316    
046F72             0317        include "tables.inc"
046F72             0001*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
046F72             0002*   table_base: equ $
046F72             0003*   player_weapons_begin: equ table_base ; blkb table_record_size*player_weapons_max,0
046F72             0004*   player_weapons_end: equ table_record_size*player_weapons_max+player_weapons_begin
046F72             0005*   player_begin: equ player_weapons_end
046F72             0006*   player_end: equ table_record_size+player_begin
046F72             0007*   enemy_sprites_begin: equ player_end
046F72             0008*   seekers_base: equ enemy_sprites_begin ; blkb table_record_size*seekers_max,0
046F72             0009*   enemy_sprites_end: equ table_record_size*seekers_max+seekers_base
046F72             0010*   table_end: equ enemy_sprites_end
046F72             0011*   
046F72             0012*   table_num_records: equ table_end-table_base/table_record_size
046F72             0013*   
046F72             0014*   ; ### THIS IS THE SPACE ALLOCATED TO THE ACTIVE TILES TABLE ###
046F72             0015*   tile_table_base: equ table_end
046F72             0016*   tile_table_end: equ 256*tile_table_record_size+tile_table_base

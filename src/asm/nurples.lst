PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C             0015    
04004C CD DB 93 04 0016        call main
040050             0017    
040050             0018    exit:
040050 FD E1       0019        pop iy
040052 DD E1       0020        pop ix
040054 D1          0021        pop de
040055 C1          0022        pop bc
040056 F1          0023        pop af
040057 21 00 00 00 0024        ld hl,0
04005B             0025    
04005B C9          0026        ret
04005C             0027    
04005C             0028    ; API INCLUDES
04005C             0029        include "mos_api.inc"
04005C             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
04005C             0002*   ; Title:	AGON MOS - API for user projects
04005C             0003*   ; Author:	Dean Belfield
04005C             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
04005C             0005*   ;			Added MOS error codes for return in HL
04005C             0006*   ; Created:	03/08/2022
04005C             0007*   ; Last Updated:	10/08/2023
04005C             0008*   ;
04005C             0009*   ; Modinfo:
04005C             0010*   ; 05/08/2022:	Added mos_feof
04005C             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
04005C             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
04005C             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
04005C             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
04005C             0015*   ; 13/10/2022:	Added mos_oscli
04005C             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
04005C             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
04005C             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
04005C             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
04005C             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
04005C             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
04005C             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
04005C             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
04005C             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
04005C             0025*   ; 19/05/2023:	Added sysvar_scrMode
04005C             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
04005C             0027*   ; 03/08/2023:	Added mos_setkbvector
04005C             0028*   ; 10/08/2023:	Added mos_getkbmap
04005C             0029*   
04005C             0030*   ; VDP control (VDU 23, 0, n)
04005C             0031*   ;
04005C             0032*   vdp_gp:				EQU 80h
04005C             0033*   vdp_keycode:		EQU 81h
04005C             0034*   vdp_cursor:			EQU	82h
04005C             0035*   vdp_scrchar:		EQU	83h
04005C             0036*   vdp_scrpixel:		EQU	84h
04005C             0037*   vdp_audio:			EQU	85h
04005C             0038*   vdp_mode:			EQU	86h
04005C             0039*   vdp_rtc:			EQU	87h
04005C             0040*   vdp_keystate:		EQU	88h
04005C             0041*   vdp_logicalcoords:	EQU	C0h
04005C             0042*   vdp_terminalmode:	EQU	FFh
04005C             0043*   
04005C             0044*   ; MOS high level functions
04005C             0045*   ;
04005C             0046*   mos_getkey:			EQU	00h
04005C             0047*   mos_load:			EQU	01h
04005C             0048*   mos_save:			EQU	02h
04005C             0049*   mos_cd:				EQU	03h
04005C             0050*   mos_dir:			EQU	04h
04005C             0051*   mos_del:			EQU	05h
04005C             0052*   mos_ren:			EQU	06h
04005C             0053*   mos_mkdir:			EQU	07h
04005C             0054*   mos_sysvars:		EQU	08h
04005C             0055*   mos_editline:		EQU	09h
04005C             0056*   mos_fopen:			EQU	0Ah
04005C             0057*   mos_fclose:			EQU	0Bh
04005C             0058*   mos_fgetc:			EQU	0Ch
04005C             0059*   mos_fputc:			EQU	0Dh
04005C             0060*   mos_feof:			EQU	0Eh
04005C             0061*   mos_getError:		EQU	0Fh
04005C             0062*   mos_oscli:			EQU	10h
04005C             0063*   mos_copy:			EQU	11h
04005C             0064*   mos_getrtc:			EQU	12h
04005C             0065*   mos_setrtc:			EQU	13h
04005C             0066*   mos_setintvector:	EQU	14h
04005C             0067*   mos_uopen:			EQU	15h
04005C             0068*   mos_uclose:			EQU	16h
04005C             0069*   mos_ugetc:			EQU	17h
04005C             0070*   mos_uputc:			EQU	18h
04005C             0071*   mos_getfil:			EQU	19h
04005C             0072*   mos_fread:			EQU	1Ah
04005C             0073*   mos_fwrite:			EQU	1Bh
04005C             0074*   mos_flseek:			EQU	1Ch
04005C             0075*   mos_setkbvector:	EQU	1Dh
04005C             0076*   mos_getkbmap:		EQU	1Eh
04005C             0077*   
04005C             0078*   ; MOS program exit codes
04005C             0079*   ;
04005C             0080*   EXIT_OK:				EQU  0;	"OK",
04005C             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
04005C             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
04005C             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
04005C             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
04005C             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
04005C             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
04005C             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
04005C             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
04005C             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
04005C             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
04005C             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
04005C             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
04005C             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
04005C             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
04005C             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
04005C             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
04005C             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
04005C             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
04005C             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
04005C             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
04005C             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
04005C             0102*   ; FatFS file access functions
04005C             0103*   ;
04005C             0104*   ffs_fopen:			EQU	80h
04005C             0105*   ffs_fclose:			EQU	81h
04005C             0106*   ffs_fread:			EQU	82h
04005C             0107*   ffs_fwrite:			EQU	83h
04005C             0108*   ffs_flseek:			EQU	84h
04005C             0109*   ffs_ftruncate:		EQU	85h
04005C             0110*   ffs_fsync:			EQU	86h
04005C             0111*   ffs_fforward:		EQU	87h
04005C             0112*   ffs_fexpand:		EQU	88h
04005C             0113*   ffs_fgets:			EQU	89h
04005C             0114*   ffs_fputc:			EQU	8Ah
04005C             0115*   ffs_fputs:			EQU	8Bh
04005C             0116*   ffs_fprintf:		EQU	8Ch
04005C             0117*   ffs_ftell:			EQU	8Dh
04005C             0118*   ffs_feof:			EQU	8Eh
04005C             0119*   ffs_fsize:			EQU	8Fh
04005C             0120*   ffs_ferror:			EQU	90h
04005C             0121*   
04005C             0122*   ; FatFS directory access functions
04005C             0123*   ;
04005C             0124*   ffs_dopen:			EQU	91h
04005C             0125*   ffs_dclose:			EQU	92h
04005C             0126*   ffs_dread:			EQU	93h
04005C             0127*   ffs_dfindfirst:		EQU	94h
04005C             0128*   ffs_dfindnext:		EQU	95h
04005C             0129*   
04005C             0130*   ; FatFS file and directory management functions
04005C             0131*   ;
04005C             0132*   ffs_stat:			EQU	96h
04005C             0133*   ffs_unlink:			EQU	97h
04005C             0134*   ffs_rename:			EQU	98h
04005C             0135*   ffs_chmod:			EQU	99h
04005C             0136*   ffs_utime:			EQU	9Ah
04005C             0137*   ffs_mkdir:			EQU	9Bh
04005C             0138*   ffs_chdir:			EQU	9Ch
04005C             0139*   ffs_chdrive:		EQU	9Dh
04005C             0140*   ffs_getcwd:			EQU	9Eh
04005C             0141*   
04005C             0142*   ; FatFS volume management and system configuration functions
04005C             0143*   ;
04005C             0144*   ffs_mount:			EQU	9Fh
04005C             0145*   ffs_mkfs:			EQU	A0h
04005C             0146*   ffs_fdisk:			EQU	A1h
04005C             0147*   ffs_getfree:		EQU	A2h
04005C             0148*   ffs_getlabel:		EQU	A3h
04005C             0149*   ffs_setlabel:		EQU	A4h
04005C             0150*   ffs_setcp:			EQU	A5h
04005C             0151*   
04005C             0152*   ; File access modes
04005C             0153*   ;
04005C             0154*   fa_read:			EQU	01h
04005C             0155*   fa_write:			EQU	02h
04005C             0156*   fa_open_existing:	EQU	00h
04005C             0157*   fa_create_new:		EQU	04h
04005C             0158*   fa_create_always:	EQU	08h
04005C             0159*   fa_open_always:		EQU	10h
04005C             0160*   fa_open_append:		EQU	30h
04005C             0161*   
04005C             0162*   ; System variable indexes for api_sysvars
04005C             0163*   ; Index into _sysvars in globals.inc
04005C             0164*   ;
04005C             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
04005C             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
04005C             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
04005C             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
04005C             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
04005C             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
04005C             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
04005C             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
04005C             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
04005C             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
04005C             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
04005C             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
04005C             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
04005C             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
04005C             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
04005C             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
04005C             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
04005C             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
04005C             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
04005C             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
04005C             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
04005C             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
04005C             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
04005C             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
04005C             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
04005C             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
04005C             0191*   
04005C             0192*   ; Flags for the VPD protocol
04005C             0193*   ;
04005C             0194*   vdp_pflag_cursor:		EQU	00000001b
04005C             0195*   vdp_pflag_scrchar:		EQU	00000010b
04005C             0196*   vdp_pflag_point:		EQU	00000100b
04005C             0197*   vdp_pflag_audio:		EQU	00001000b
04005C             0198*   vdp_pflag_mode:			EQU	00010000b
04005C             0199*   vdp_pflag_rtc:			EQU	00100000b
04005C             0200*   
04005C             0201*   ;
04005C             0202*   ; FatFS structures
04005C             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
04005C             0204*   ;
04005C             0205*   ; Object ID and allocation information (FFOBJID)
04005C             0206*   ;
04005C             0207*   ; Indexes into FFOBJID structure
04005C             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
04005C             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
04005C             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
04005C             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
04005C             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
04005C             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
04005C             0214*   ;
04005C             0215*   ; File object structure (FIL)
04005C             0216*   ;
04005C             0217*   ; Indexes into FIL structure
04005C             0218*   fil_obj:		EQU 0	; 15: Object identifier
04005C             0219*   fil_flag:		EQU	15 	;  1: File status flags
04005C             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
04005C             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
04005C             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
04005C             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
04005C             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
04005C             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
04005C             0226*   ;
04005C             0227*   ; Directory object structure (DIR)
04005C             0228*   ; Indexes into DIR structure
04005C             0229*   dir_obj:		EQU  0	; 15: Object identifier
04005C             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
04005C             0231*   dir_clust:		EQU	19	;  4: Current cluster
04005C             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
04005C             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
04005C             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
04005C             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
04005C             0236*   ;
04005C             0237*   ; File information structure (FILINFO)
04005C             0238*   ;
04005C             0239*   ; Indexes into FILINFO structure
04005C             0240*   filinfo_fsize:		EQU 0	;   4: File size
04005C             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
04005C             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
04005C             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
04005C             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
04005C             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
04005C             0246*   ;
04005C             0247*   ; Macro for calling the API
04005C             0248*   ; Parameters:
04005C             0249*   ; - function: One of the function numbers listed above
04005C             0250*   ;
04005C             0251*   	MACRO	MOSCALL	function
04005C             0252*   			LD	A, function
04005C             0253*   			RST.LIL	08h
04005C             0254*   	ENDMACRO
04005C             0030        include "macros.inc"
04005C             0001*   
04005C             0002*   ; test the sign of HL
04005C             0003*   ; inputs: HL obviously
04005C             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
04005C             0005*   ; destroys: flags
04005C             0006*       MACRO SIGN_HLU
04005C             0007*       add hl,de ; 1 cycle
04005C             0008*       or a ; clear flags ; 1 cycle
04005C             0009*       sbc hl,de ; 2 cycles
04005C             0010*       ; 4 cycles total
04005C             0011*       ENDMACRO
04005C             0012*   
04005C             0013*   ; put the value in A into HLU
04005C             0014*   ; affects: HLU
04005C             0015*   ; destroys: nothing
04005C             0016*   ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
04005C             0017*       MACRO A_TO_HLU
04005C             0018*       xor a ; 1 cycle
04005C             0019*       ld ($+8+1),hl ; 7 cycles
04005C             0020*       ld ($+4+3),a ; 5 cycles
04005C             0021*       ld hl,0x000000 ; 4 cycles
04005C             0022*       ; 17 cycles total
04005C             0023*       ENDMACRO
04005C             0024*   
04005C             0025*   ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
04005C             0026*   ; one cycle less but burns flags
04005C             0027*       MACRO A_TO_HLU_ALT
04005C             0028*       push hl ; 4 cycles
04005C             0029*       ld hl,2 ; 4 cycles
04005C             0030*       add hl,sp ; 1 cycle
04005C             0031*       ld (hl),a ; 2 cycles
04005C             0032*       pop hl ; 4 cycles
04005C             0033*       ; 15 cycles total
04005C             0034*       ENDMACRO
04005C             0035*   
04005C             0036*       MACRO hlu_mul256
04005C             0037*       add hl,hl ; * 2
04005C             0038*       add hl,hl ; * 4
04005C             0039*       add hl,hl ; * 8
04005C             0040*       add hl,hl ; * 16
04005C             0041*       add hl,hl ; * 32
04005C             0042*       add hl,hl ; * 64
04005C             0043*       add hl,hl ; * 128
04005C             0044*       add hl,hl ; * 256
04005C             0045*       ENDMACRO
04005C             0046*   
04005C             0047*   ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
04005C             0048*       MACRO SRL_UHL
04005C             0049*       dec sp ; 1 cycle
04005C             0050*       push hl ; 4 cycles
04005C             0051*       inc sp ; 1 cycle
04005C             0052*       pop hl ; 4 cycles
04005C             0053*       inc hl ; 1 cycle
04005C             0054*       dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04005C             0055*       ; 13 cycles total
04005C             0056*       ENDMACRO
04005C             0057*   
04005C             0058*       MACRO printChar char
04005C             0059*       LD A, char
04005C             0060*       RST.LIL 10h
04005C             0061*       ENDMACRO
04005C             0062*   
04005C             0063*   ; Simulated call to subroutine at HL
04005C             0064*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
04005C             0065*   ; outputs: whatever the subroutine does, including HL and BC
04005C             0066*   ; destroys: only what the subroutine does, but always BC
04005C             0067*       MACRO CALL_HL
04005C             0068*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0069*       push bc ; which constitutes the return address
04005C             0070*       jp (hl) ; Jump to the address in HL
04005C             0071*       ENDMACRO
04005C             0072*   
04005C             0073*   ; Simulated call to subroutine at IX
04005C             0074*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
04005C             0075*   ; outputs: whatever the subroutine does, including IX and BC
04005C             0076*   ; destroys: only what the subroutine does, but always BC
04005C             0077*       MACRO CALL_IX
04005C             0078*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0079*       push bc ; which constitutes the return address
04005C             0080*       jp (ix) ; Jump to the address in IX
04005C             0081*       ENDMACRO
04005C             0082*   
04005C             0083*   ; Simulated call to soubroutinte at IY
04005C             0084*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
04005C             0085*   ; outputs: whatever the subroutine does, including IY and BC
04005C             0086*   ; destroys: only what the subroutine does, but always BC
04005C             0087*       MACRO CALL_IY
04005C             0088*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0089*       push bc ; which constitutes the return address
04005C             0090*       jp (iy) ; Jump to the address in IY
04005C             0091*       ENDMACRO
04005C             0092*   
04005C             0093*   ; put the value in HLU into A
04005C             0094*   ; destroys: af
04005C             0095*       MACRO HLU_TO_A
04005C             0096*       dec sp ; 1 cycle
04005C             0097*       push hl ; 4 cycles
04005C             0098*       inc sp ; 1 cycle
04005C             0099*       pop af ; 4 cycles
04005C             0100*       ; 10 cycles total
04005C             0101*       ENDMACRO
04005C             0102*   
04005C             0103*       MACRO PUSH_ALL
04005C             0104*       ex af,af'
04005C             0105*       exx
04005C             0106*       push af
04005C             0107*       push hl
04005C             0108*       push bc
04005C             0109*       push de
04005C             0110*   
04005C             0111*       ex af,af'
04005C             0112*       exx
04005C             0113*       push af
04005C             0114*       push hl
04005C             0115*       push bc
04005C             0116*       push de
04005C             0117*       push ix
04005C             0118*       push iy
04005C             0119*       ENDMACRO
04005C             0120*   
04005C             0121*       MACRO POP_ALL
04005C             0122*       pop iy
04005C             0123*       pop ix
04005C             0124*       pop de
04005C             0125*       pop bc
04005C             0126*       pop hl
04005C             0127*       pop af
04005C             0128*       ex af,af'
04005C             0129*       exx
04005C             0130*   
04005C             0131*       pop de
04005C             0132*       pop bc
04005C             0133*       pop hl
04005C             0134*       pop af
04005C             0135*       ex af,af'
04005C             0136*       exx
04005C             0137*       ENDMACRO
04005C             0031        include "functions.inc"
04005C             0001*   ; Print a zero-terminated string inline with code, e.g.:
04005C             0002*   ;
04005C             0003*   ;    call printInline
04005C             0004*   ;    ASCIZ "Hello, world!\r\n"
04005C             0005*   ;
04005C             0006*   ; Destroys: HL,AF
04005C             0007*   printInline:
04005C E1          0008*       pop hl ; get the return address = pointer to start of string
04005D CD 63 00 04 0009*       call printString ; HL advances to end of string
040061 E5          0010*       push hl ; restore the return address = pointer to end of string
040062 C9          0011*       ret
040063             0012*   
040063             0013*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040063             0014*   ; Print a zero-terminated string
040063             0015*   ; HL: Pointer to string
040063             0016*   printString:
040063 C5          0017*       PUSH BC
040064 01 00 00 00 0018*       LD BC,0
040068 3E 00       0019*       LD A,0
04006A 5B DF       0020*       RST.LIL 18h
04006C C1          0021*       POP BC
04006D C9          0022*       RET
04006E             0023*   ; print a VDU sequence
04006E             0024*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
04006E             0025*   sendVDUsequence:
04006E C5          0026*       PUSH BC
04006F 01 00 00 00 0027*       LD BC, 0
040073 4E          0028*       LD C, (HL)
040074 5B DF       0029*       RST.LIL 18h
040076 C1          0030*       POP BC
040077 C9          0031*       RET
040078             0032*   ; Print Newline sequence to VDP
040078             0033*   ; destroys bc
040078             0034*   printNewLine:
040078 F5          0035*       push af ; for some reason rst.lil 10h sets carry flag
040079 3E 0D       0036*       LD A, '\r'
04007B 5B D7       0037*       RST.LIL 10h
04007D 3E 0A       0038*       LD A, '\n'
04007F 5B D7       0039*       RST.LIL 10h
040081 F1          0040*       pop af
040082 C9          0041*       RET
040083             0042*   
040083             0043*   ; Print a 24-bit HEX number
040083             0044*   ; HLU: Number to print
040083             0045*   printHex24:
040083             0046*       HLU_TO_A
040083 3B          0001*M1     dec sp ; 1 cycle
040084 E5          0002*M1     push hl ; 4 cycles
040085 33          0003*M1     inc sp ; 1 cycle
040086 F1          0004*M1     pop af ; 4 cycles
040087             0005*M1     ; 10 cycles total
040087 CD 91 00 04 0047*       CALL printHex8
04008B             0048*   ; Print a 16-bit HEX number
04008B             0049*   ; HL: Number to print
04008B             0050*   printHex16:
04008B 7C          0051*       LD A,H
04008C CD 91 00 04 0052*       CALL printHex8
040090 7D          0053*       LD A,L
040091             0054*   ; Print an 8-bit HEX number
040091             0055*   ; A: Number to print
040091             0056*   printHex8:
040091 4F          0057*       LD C,A
040092 1F          0058*       RRA
040093 1F          0059*       RRA
040094 1F          0060*       RRA
040095 1F          0061*       RRA
040096 CD 9B 00 04 0062*       CALL @F
04009A 79          0063*       LD A,C
04009B             0064*   @@:
04009B E6 0F       0065*       AND 0Fh
04009D C6 90       0066*       ADD A,90h
04009F 27          0067*       DAA
0400A0 CE 40       0068*       ADC A,40h
0400A2 27          0069*       DAA
0400A3 5B D7       0070*       RST.LIL 10h
0400A5 C9          0071*       RET
0400A6             0072*   
0400A6             0073*   ; Print a 0x HEX prefix
0400A6             0074*   DisplayHexPrefix:
0400A6 3E 30       0075*       LD A, '0'
0400A8 5B D7       0076*       RST.LIL 10h
0400AA 3E 78       0077*       LD A, 'x'
0400AC 5B D7       0078*       RST.LIL 10h
0400AE C9          0079*       RET
0400AF             0080*   
0400AF             0081*       MACRO printDecBC
0400AF             0082*       push hl
0400AF             0083*       push bc
0400AF             0084*       pop hl
0400AF             0085*       call printDec
0400AF             0086*       pop hl
0400AF             0087*       ENDMACRO
0400AF             0088*   
0400AF             0089*       MACRO printDecDE
0400AF             0090*       push hl
0400AF             0091*       push de
0400AF             0092*       pop hl
0400AF             0093*       call printDec
0400AF             0094*       pop hl
0400AF             0095*       ENDMACRO
0400AF             0096*   
0400AF             0097*       MACRO printDecHL
0400AF             0098*       call printDec
0400AF             0099*       ENDMACRO
0400AF             0100*   
0400AF             0101*       MACRO printDecIX
0400AF             0102*       push hl
0400AF             0103*       push ix
0400AF             0104*       pop hl
0400AF             0105*       call printDec
0400AF             0106*       pop hl
0400AF             0107*       ENDMACRO
0400AF             0108*   
0400AF             0109*       MACRO printDecIY
0400AF             0110*       push hl
0400AF             0111*       push iy
0400AF             0112*       pop hl
0400AF             0113*       call printDec
0400AF             0114*       pop hl
0400AF             0115*       ENDMACRO
0400AF             0116*   
0400AF             0117*   
0400AF             0118*   ; Prints the right justified decimal value in HL without leading zeroes
0400AF             0119*   ; HL : Value to print
0400AF             0120*   ; preserves all registers and flags
0400AF             0121*   printDec:
0400AF             0122*   ; BEGIN MY CODE
0400AF             0123*   ; back up all the things
0400AF F5          0124*       push af
0400B0 C5          0125*       push bc
0400B1 D5          0126*       push de
0400B2 E5          0127*       push hl
0400B3             0128*   ; END MY CODE
0400B3 11 DB 00 04 0129*       LD DE, _printDecBuffer
0400B7 CD EB 00 04 0130*       CALL u24_to_ascii
0400BB             0131*   ; BEGIN MY CODE
0400BB             0132*   ; replace leading zeroes with spaces
0400BB 21 DB 00 04 0133*       LD HL, _printDecBuffer
0400BF 06 07       0134*       ld B, 7 ; if HL was 0, we want to keep the final zero
0400C1             0135*   @loop:
0400C1 7E          0136*       LD A, (HL)
0400C2 FE 30       0137*       CP '0'
0400C4 C2 CE 00 04 0138*       JP NZ, @done
0400C8 3E 20       0139*       LD A, ' '
0400CA 77          0140*       LD (HL), A
0400CB 23          0141*       INC HL
0400CC             0142*       ; CALL vdu_cursor_forward
0400CC 10 F3       0143*       DJNZ @loop
0400CE             0144*   @done:
0400CE             0145*   ; END MY CODE
0400CE 21 DB 00 04 0146*       LD HL, _printDecBuffer
0400D2 CD 63 00 04 0147*       CALL printString
0400D6             0148*   ; BEGIN MY CODE
0400D6             0149*   ; restore all the things
0400D6 E1          0150*       pop hl
0400D7 D1          0151*       pop de
0400D8 C1          0152*       pop bc
0400D9 F1          0153*       pop af
0400DA             0154*   ; END MY CODE
0400DA C9          0155*       RET
0400DB 00 00 00 00 0156*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0400EB             0157*   
0400EB             0158*   ; This routine converts the unsigned 24-bit value in HLU into its ASCII representation,
0400EB             0159*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0400EB             0160*   ; so it will allways be 8 characters length
0400EB             0161*   ; HL : Value to convert to string
0400EB             0162*   ; DE : pointer to buffer, at least 8 byte + 0
0400EB             0163*   u24_to_ascii:
0400EB 01 80 69 67 0164*       LD BC,-10000000
0400EF CD 22 01 04 0165*       CALL @one_digit
0400F3 01 C0 BD F0 0166*       LD BC,-1000000
0400F7 CD 22 01 04 0167*       CALL @one_digit
0400FB 01 60 79 FE 0168*       LD BC,-100000
0400FF CD 22 01 04 0169*       CALL @one_digit
040103 01 F0 D8 FF 0170*       LD BC,-10000
040107 CD 22 01 04 0171*       CALL @one_digit
04010B 01 18 FC FF 0172*       LD BC,-1000
04010F CD 22 01 04 0173*       CALL @one_digit
040113 01 9C FF FF 0174*       LD BC,-100
040117 CD 22 01 04 0175*       CALL @one_digit
04011B 0E F6       0176*       LD C,-10
04011D CD 22 01 04 0177*       CALL @one_digit
040121 48          0178*       LD C,B
040122             0179*   @one_digit:
040122 3E 2F       0180*       LD A,'0'-1
040124             0181*   @divide_me:
040124 3C          0182*       INC A
040125 09          0183*       ADD HL,BC
040126 38 FC       0184*       JR C,@divide_me
040128 ED 42       0185*       SBC HL,BC
04012A 12          0186*       LD (DE),A
04012B 13          0187*       INC DE
04012C C9          0188*       RET
04012D             0189*   
04012D             0190*   print_u24:
04012D D5          0191*       push de
04012E E5          0192*       push hl
04012F 11 DB 00 04 0193*       ld de,_printDecBuffer
040133 CD EB 00 04 0194*       call u24_to_ascii
040137 21 DB 00 04 0195*       ld hl,_printDecBuffer
04013B CD 63 00 04 0196*       call printString
04013F 3E 20       0197*       ld a,' '
040141 5B D7       0198*       rst.lil 10h
040143 E1          0199*       pop hl
040144 D1          0200*       pop de
040145 C9          0201*       ret
040146             0202*   
040146             0203*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
040146             0204*   ; HL : Value to convert to string (integer part in H, fractional part in L)
040146             0205*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
040146             0206*   u168_to_ascii:
040146             0207*   ; add a leading space to make room for sign flag if needed
040146 3E 20       0208*       ld a,' '
040148 12          0209*       ld (de),a
040149 13          0210*       inc de
04014A             0211*   ; Convert integer part
04014A E5          0212*       push hl ; Save HL (we’ll need the fractional part later)
04014B             0213*       ; call hlu_udiv256 ; Shift to get integer portion in HL
04014B             0214*       SRL_UHL ; Shift to get integer portion in HL
04014B 3B          0001*M1     dec sp ; 1 cycle
04014C E5          0002*M1     push hl ; 4 cycles
04014D 33          0003*M1     inc sp ; 1 cycle
04014E E1          0004*M1     pop hl ; 4 cycles
04014F 23          0005*M1     inc hl ; 1 cycle
040150 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040152             0007*M1     ; 13 cycles total
040152 01 F0 D8 FF 0215*       ld bc, -10000
040156 CD 79 01 04 0216*       call @one_int
04015A 01 18 FC FF 0217*       ld bc, -1000
04015E CD 79 01 04 0218*       call @one_int
040162 01 9C FF FF 0219*       ld bc, -100
040166 CD 79 01 04 0220*       call @one_int
04016A 0E F6       0221*       ld c, -10
04016C CD 79 01 04 0222*       call @one_int
040170 48          0223*       ld c, b
040171 CD 79 01 04 0224*       call @one_int
040175 C3 84 01 04 0225*       jp @frac ; Jump to fractional part conversion
040179             0226*   @one_int:
040179 3E 2F       0227*       ld a, '0' - 1 ; Start ASCII character at '0'
04017B             0228*   @divide_me:
04017B 3C          0229*       inc a
04017C 09          0230*       add hl, bc ; Accumulate until overflow
04017D 38 FC       0231*       jr c, @divide_me
04017F ED 42       0232*       sbc hl, bc ; Remove excess after overflow
040181 12          0233*       ld (de), a ; Store ASCII digit
040182 13          0234*       inc de
040183 C9          0235*       ret
040184             0236*   ; Convert fractional part
040184             0237*   @frac:
040184 3E 2E       0238*       ld a, '.' ; Decimal point
040186 12          0239*       ld (de), a
040187 13          0240*       inc de
040188 E1          0241*       pop hl ; Restore HL with original fraction
040189 06 03       0242*       ld b, 3 ; Loop counter for 3 fractional digits
04018B             0243*   @frac_loop:
04018B 26 0A       0244*       ld h, 10 ; Load multiplier for fractional part
04018D ED 6C       0245*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
04018F 3E 30       0246*       ld a, '0'
040191 84          0247*       add a, h ; Convert integer part to ASCII
040192 12          0248*       ld (de), a
040193 13          0249*       inc de
040194 10 F5       0250*       djnz @frac_loop ; Repeat for each fractional digit
040196             0251*   ; Add null terminator
040196 AF          0252*       xor a ; Null terminator
040197 12          0253*       ld (de), a
040198 C9          0254*       ret
040199             0255*   
040199             0256*   print_u168:
040199 D5          0257*       push de
04019A E5          0258*       push hl
04019B 11 DB 00 04 0259*       ld de,_printDecBuffer
04019F CD 46 01 04 0260*       call u168_to_ascii
0401A3 21 DB 00 04 0261*       ld hl,_printDecBuffer
0401A7 CD 63 00 04 0262*       call printString
0401AB E1          0263*       pop hl
0401AC D1          0264*       pop de
0401AD C9          0265*       ret
0401AE             0266*   
0401AE             0267*   ; signed version of u168_to_ascii
0401AE             0268*   s168_to_ascii:
0401AE D5          0269*       push de ; save starting address of buffer
0401AF CD 53 04 04 0270*       call hlu_abs
0401B3 F5          0271*       push af ; save sign flag
0401B4 CD 46 01 04 0272*       call u168_to_ascii
0401B8 F1          0273*       pop af ; restore sign flag
0401B9 D1          0274*       pop de ; restore starting address of buffer
0401BA F0          0275*       ret p ; hlu was positive so nothing to do
0401BB 3E 2D       0276*       ld a,'-'
0401BD 12          0277*       ld (de),a
0401BE C9          0278*       ret
0401BF             0279*   
0401BF             0280*   print_s168:
0401BF D5          0281*       push de
0401C0 E5          0282*       push hl
0401C1 11 DB 00 04 0283*       ld de,_printDecBuffer
0401C5 CD AE 01 04 0284*       call s168_to_ascii
0401C9 21 DB 00 04 0285*       ld hl,_printDecBuffer
0401CD CD 63 00 04 0286*       call printString
0401D1 E1          0287*       pop hl
0401D2 D1          0288*       pop de
0401D3 C9          0289*       ret
0401D4             0290*   
0401D4             0291*   print_s168_hl:
0401D4 F5          0292*       push af
0401D5 E5          0293*       push hl
0401D6 CD BF 01 04 0294*       call print_s168
0401DA 3E 20       0295*       ld a,' '
0401DC 5B D7       0296*       rst.lil 10h
0401DE E1          0297*       pop hl
0401DF F1          0298*       pop af
0401E0 C9          0299*       ret
0401E1             0300*   
0401E1             0301*   print_s168_bc:
0401E1 F5          0302*       push af
0401E2 C5          0303*       push bc
0401E3 E5          0304*       push hl
0401E4 C5          0305*       push bc
0401E5 E1          0306*       pop hl
0401E6 CD BF 01 04 0307*       call print_s168
0401EA 3E 20       0308*       ld a,' '
0401EC 5B D7       0309*       rst.lil 10h
0401EE E1          0310*       pop hl
0401EF C1          0311*       pop bc
0401F0 F1          0312*       pop af
0401F1 C9          0313*       ret
0401F2             0314*   
0401F2             0315*   print_s168_de:
0401F2 F5          0316*       push af
0401F3 D5          0317*       push de
0401F4 E5          0318*       push hl
0401F5 EB          0319*       ex de,hl
0401F6 CD BF 01 04 0320*       call print_s168
0401FA 3E 20       0321*       ld a,' '
0401FC 5B D7       0322*       rst.lil 10h
0401FE E1          0323*       pop hl
0401FF D1          0324*       pop de
040200 F1          0325*       pop af
040201 C9          0326*       ret
040202             0327*   
040202             0328*   print_s168_hl_bc_de:
040202 F5          0329*       push af
040203 C5          0330*       push bc
040204 D5          0331*       push de
040205 E5          0332*       push hl
040206 CD BF 01 04 0333*       call print_s168
04020A 3E 20       0334*       ld a,' '
04020C 5B D7       0335*       rst.lil 10h
04020E C5          0336*       push bc
04020F E1          0337*       pop hl
040210 CD BF 01 04 0338*       call print_s168
040214 3E 20       0339*       ld a,' '
040216 5B D7       0340*       rst.lil 10h
040218 EB          0341*       ex de,hl
040219 CD BF 01 04 0342*       call print_s168
04021D 3E 20       0343*       ld a,' '
04021F 5B D7       0344*       rst.lil 10h
040221 E1          0345*       pop hl
040222 D1          0346*       pop de
040223 C1          0347*       pop bc
040224 F1          0348*       pop af
040225 C9          0349*       ret
040226             0350*   
040226             0351*   print_s168_bc_de:
040226 F5          0352*       push af
040227 C5          0353*       push bc
040228 D5          0354*       push de
040229 C5          0355*       push bc
04022A E1          0356*       pop hl
04022B CD BF 01 04 0357*       call print_s168
04022F 3E 20       0358*       ld a,' '
040231 5B D7       0359*       rst.lil 10h
040233 EB          0360*       ex de,hl
040234 CD BF 01 04 0361*       call print_s168
040238 3E 20       0362*       ld a,' '
04023A 5B D7       0363*       rst.lil 10h
04023C E1          0364*       pop hl
04023D D1          0365*       pop de
04023E C1          0366*       pop bc
04023F F1          0367*       pop af
040240 C9          0368*       ret
040241             0369*   
040241             0370*   print_s168_a:
040241 F5          0371*       push af
040242 C5          0372*       push bc
040243 E5          0373*       push hl
040244 21 00 00 00 0374*       ld hl,0
040248 6F          0375*       ld l,a
040249 CD D4 01 04 0376*       call print_s168_hl
04024D E1          0377*       pop hl
04024E C1          0378*       pop bc
04024F F1          0379*       pop af
040250 C9          0380*       ret
040251             0381*   
040251             0382*   ; #### new functions added by Brandon R. Gates ####
040251             0383*   
040251             0384*   ; print the binary representation of the 8-bit value in a
040251             0385*   ; destroys a, hl, bc
040251             0386*   printBin8:
040251 06 08       0387*       ld b,8 ; loop counter for 8 bits
040253 21 6E 02 04 0388*       ld hl,@cmd ; set hl to the low byte of the output string
040257             0389*       ; (which will be the high bit of the value in a)
040257             0390*   @loop:
040257 07          0391*       rlca ; put the next highest bit into carry
040258 38 04       0392*       jr c,@one
04025A 36 30       0393*       ld (hl),'0'
04025C 18 02       0394*       jr @next_bit
04025E             0395*   @one:
04025E 36 31       0396*       ld (hl),'1'
040260             0397*   @next_bit:
040260 23          0398*       inc hl
040261 10 F4       0399*       djnz @loop
040263             0400*   ; print it
040263 21 6E 02 04 0401*       ld hl,@cmd
040267 01 08 00 00 0402*       ld bc,@end-@cmd
04026B 5B DF       0403*       rst.lil $18
04026D C9          0404*       ret
04026E             0405*   @cmd: ds 8 ; eight bytes for eight bits
040276             0406*   @end:
040276             0407*   
040276             0408*   ; print the binary representation of the 8-bit value in a
040276             0409*   ; in reverse order (lsb first)
040276             0410*   ; destroys a, hl, bc
040276             0411*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
040276 06 08       0412*       ld b,8 ; loop counter for 8 bits
040278 21 93 02 04 0413*       ld hl,@cmd ; set hl to the low byte of the output string
04027C             0414*       ; (which will be the high bit of the value in a)
04027C             0415*   @loop:
04027C 0F          0416*       rrca ; put the next lowest bit into carry
04027D 38 04       0417*       jr c,@one
04027F 36 30       0418*       ld (hl),'0'
040281 18 02       0419*       jr @next_bit
040283             0420*   @one:
040283 36 31       0421*       ld (hl),'1'
040285             0422*   @next_bit:
040285 23          0423*       inc hl
040286 10 F4       0424*       djnz @loop
040288             0425*   ; print it
040288 21 93 02 04 0426*       ld hl,@cmd
04028C 01 08 00 00 0427*       ld bc,@end-@cmd
040290 5B DF       0428*       rst.lil $18
040292 C9          0429*       ret
040293             0430*   @cmd: ds 8 ; eight bytes for eight bits
04029B             0431*   @end:
04029B             0432*   
       FF FF FF FF 
       FF FF FF FF 
04029B 20 61 66 3D 0433*   str_afu: db " af=",0
       00          
0402A0 20 68 6C 3D 0434*   str_hlu: db " hl=",0
       00          
0402A5 20 62 63 3D 0435*   str_bcu: db " bc=",0
       00          
0402AA 20 64 65 3D 0436*   str_deu: db " de=",0
       00          
0402AF 20 69 78 3D 0437*   str_ixu: db " ix=",0
       00          
0402B4 20 69 79 3D 0438*   str_iyu: db " iy=",0
       00          
0402B9             0439*   
0402B9             0440*   ; print udeuhl to screen in hexidecimal format
0402B9             0441*   ; inputs: none
0402B9             0442*   ; outputs: concatenated hexidecimal udeuhl
0402B9             0443*   ; destroys: nothing
0402B9             0444*   dumpUDEUHLHex:
0402B9             0445*   ; store everything in scratch
0402B9 22 18 03 04 0446*       ld (uhl),hl
0402BD ED 43 1B 03 0447*       ld (ubc),bc
       04          
0402C2 ED 53 1E 03 0448*       ld (ude),de
       04          
0402C7 DD 22 21 03 0449*       ld (uix),ix
       04          
0402CC FD 22 24 03 0450*       ld (uiy),iy
       04          
0402D1 F5          0451*       push af
0402D2             0452*   
0402D2             0453*   ; print each register
0402D2             0454*   
0402D2 21 0C 03 04 0455*       ld hl,str_udeuhl
0402D6 CD 63 00 04 0456*       call printString
0402DA 2A 1E 03 04 0457*       ld hl,(ude)
0402DE CD 83 00 04 0458*       call printHex24
0402E2 3E 2E       0459*       ld a,'.' ; print a dot to separate the values
0402E4 5B D7       0460*       rst.lil 10h
0402E6 2A 18 03 04 0461*       ld hl,(uhl)
0402EA CD 83 00 04 0462*       call printHex24
0402EE CD 78 00 04 0463*       call printNewLine
0402F2             0464*   
0402F2             0465*   ; restore everything
0402F2 2A 18 03 04 0466*       ld hl, (uhl)
0402F6 ED 4B 1B 03 0467*       ld bc, (ubc)
       04          
0402FB ED 5B 1E 03 0468*       ld de, (ude)
       04          
040300 DD 2A 21 03 0469*       ld ix, (uix)
       04          
040305 FD 2A 24 03 0470*       ld iy, (uiy)
       04          
04030A F1          0471*       pop af
04030B             0472*   ; all done
04030B C9          0473*       ret
04030C             0474*   
04030C 75 64 65 2E 0475*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
040315             0476*   
040315             0477*   ; global scratch memory for registers
040315 00 00 00    0478*   uaf: dl 0
040318 00 00 00    0479*   uhl: dl 0
04031B 00 00 00    0480*   ubc: dl 0
04031E 00 00 00    0481*   ude: dl 0
040321 00 00 00    0482*   uix: dl 0
040324 00 00 00    0483*   uiy: dl 0
040327 00 00 00    0484*   usp: dl 0
04032A 00 00 00    0485*   upc: dl 0
04032D             0486*   
04032D             0487*   
04032D             0488*   ; set all the bits in the flag register
04032D             0489*   ; more of an academic exercise than anything useful
04032D             0490*   ; inputs; none
04032D             0491*   ; outputs; a=0,f=255
04032D             0492*   ; destroys: flags, hl
04032D             0493*   ; preserves: a, because why not
04032D             0494*   setAllFlags:
04032D 21 FF 00 00 0495*       ld hl,255
040331 67          0496*       ld h,a ; four cycles to preserve a is cheap
040332 E5          0497*       push hl
040333 F1          0498*       pop af
040334 C9          0499*       ret
040335             0500*   
040335             0501*   ; reset all the bits in the flag register
040335             0502*   ; unlike its inverse counterpart, this may actually be useful
040335             0503*   ; inputs; none
040335             0504*   ; outputs; a=0,f=0
040335             0505*   ; destroys: flags, hl
040335             0506*   ; preserves: a, because why not
040335             0507*   resetAllFlags:
040335 21 00 00 00 0508*       ld hl,0
040339 67          0509*       ld h,a ; four cycles to preserve a is cheap
04033A E5          0510*       push hl
04033B F1          0511*       pop af
04033C C9          0512*       ret
04033D             0513*   
04033D             0514*   ; wait until user presses a key
04033D             0515*   ; inputs: none
04033D             0516*   ; outputs: ascii code of key pressed in a
04033D             0517*   ; destroys: af,ix
04033D             0518*   waitKeypress:
04033D             0519*       MOSCALL mos_getkey
04033D 3E 00       0001*M1 			LD	A, function
04033F 5B CF       0002*M1 			RST.LIL	08h
040341 C9          0520*       ret
040342             0521*   
040342             0522*   ; clear a block of memory by writing a prescribed value to each byte in the range
040342             0523*   ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
040342             0524*   ; outputs: memory block is cleared
040342             0525*   ; destroys: hl, de
040342             0526*   clear_mem:
040342 0B          0527*       dec bc ; we do this because we will increment de before writing the first byte
040343 77          0528*       ld (hl),a
040344 E5          0529*       push hl
040345 D1          0530*       pop de
040346 13          0531*       inc de ; target address
040347 ED B0       0532*       ldir
040349 C9          0533*       ret
04034A             0032        include "arith24.inc"
04034A             0001*   ;------------------------------------------------------------------------
04034A             0002*   ;  arith24.asm
04034A             0003*   ;  24-bit ez80 arithmetic routines
04034A             0004*   ;  Copyright (c) Shawn Sijnstra 2024
04034A             0005*   ;  MIT license
04034A             0006*   ;
04034A             0007*   ;  This library was created as a tool to help make ez80
04034A             0008*   ;  24-bit native assembly routines for simple mathematical problems
04034A             0009*   ;  more widely available.
04034A             0010*   ;
04034A             0011*   ;------------------------------------------------------------------------
04034A             0012*   
04034A             0013*   ;------------------------------------------------------------------------
04034A             0014*   ; umul24:	HL = HL*DE (unsigned)
04034A             0015*   ; Preserves AF, BC, DE
04034A             0016*   ; Uses a fast multiply routine.
04034A             0017*   ;------------------------------------------------------------------------
04034A             0018*   umul24:
04034A D5          0019*   	push	DE
04034B C5          0020*   	push	BC
04034C F5          0021*   	push	AF
04034D E5          0022*   	push	HL
04034E C1          0023*   	pop		BC
04034F 3E 18       0024*       ld	 	a, 24 ; No. of bits to process
040351 21 00 00 00 0025*       ld	 	hl, 0 ; Result
040355             0026*   umul24_lp:
040355 29          0027*   	add	hl,hl
040356 EB          0028*   	ex	de,hl
040357 29          0029*   	add	hl,hl
040358 EB          0030*   	ex	de,hl
040359 30 01       0031*   	jr	nc,umul24_nc
04035B 09          0032*   	add	hl,bc
04035C             0033*   umul24_nc:
04035C 3D          0034*   	dec	a
04035D 20 F6       0035*   	jr	nz,umul24_lp
04035F F1          0036*   	pop	af
040360 C1          0037*   	pop	bc
040361 D1          0038*   	pop	de
040362 C9          0039*   	ret
040363             0040*   
040363             0041*   
040363             0042*   ;------------------------------------------------------------------------
040363             0043*   ; udiv24
040363             0044*   ; Unsigned 24-bit division
040363             0045*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
040363             0046*   ;
040363             0047*   ; Uses AF BC DE HL
040363             0048*   ; Uses Restoring Division algorithm
040363             0049*   ;------------------------------------------------------------------------
040363             0050*   
040363             0051*   udiv24:
040363 E5          0052*   	push	hl
040364 C1          0053*   	pop		bc	;move dividend to BCU
040365 21 00 00 00 0054*   	ld		hl,0	;result
040369 A7          0055*   	and		a
04036A ED 52       0056*   	sbc		hl,de	;test for div by 0
04036C C8          0057*   	ret		z		;it's zero, carry flag is clear
04036D 19          0058*   	add		hl,de	;HL is 0 again
04036E 3E 18       0059*   	ld		a,24	;number of loops through.
040370             0060*   udiv1:
040370 C5          0061*   	push	bc	;complicated way of doing this because of lack of access to top bits
040371 E3          0062*   	ex		(sp),hl
040372 37          0063*   	scf
040373 ED 6A       0064*   	adc	hl,hl
040375 E3          0065*   	ex	(sp),hl
040376 C1          0066*   	pop	bc		;we now have bc = (bc * 2) + 1
040377             0067*   
040377 ED 6A       0068*   	adc	hl,hl
040379 A7          0069*   	and	a		;is this the bug
04037A ED 52       0070*   	sbc	hl,de
04037C 30 02       0071*   	jr	nc,udiv2
04037E 19          0072*   	add	hl,de
04037F             0073*   ;	dec	c
04037F 0B          0074*   	dec	bc
040380             0075*   udiv2:
040380 3D          0076*   	dec	a
040381 20 ED       0077*   	jr	nz,udiv1
040383 37          0078*   	scf		;flag used for div0 error
040384 C5          0079*   	push	bc
040385 D1          0080*   	pop		de	;remainder
040386 C9          0081*   	ret
040387             0082*   
040387             0083*   
040387             0084*   
040387             0085*   ;------------------------------------------------------------------------
040387             0086*   ; neg24
040387             0087*   ; Returns: HLU = 0-HLU
040387             0088*   ; preserves all other registers
040387             0089*   ;------------------------------------------------------------------------
040387             0090*   neg24:
040387 D5          0091*   	push	de
040388 EB          0092*   	ex		de,hl
040389 21 00 00 00 0093*   	ld		hl,0
04038D B7          0094*   	or		a
04038E ED 52       0095*   	sbc		hl,de
040390 D1          0096*   	pop		de
040391 C9          0097*   	ret
040392             0098*   
040392             0099*   ;------------------------------------------------------------------------
040392             0100*   ; or_hlu_deu: 24 bit bitwise OR
040392             0101*   ; Returns: hlu = hlu OR deu
040392             0102*   ; preserves all other registers
040392             0103*   ;------------------------------------------------------------------------
040392             0104*   or_hlu_deu:
040392 22 1B 04 04 0105*   	ld	(bitbuf1),hl
040396 ED 53 1E 04 0106*   	ld	(bitbuf2),de
       04          
04039B D5          0107*   	push	de	;preserve DEU
04039C C5          0108*   	push	bc	;preserve BCU
04039D 06 03       0109*   	ld		b,3
04039F 21 1B 04 04 0110*   	ld	hl,bitbuf1
0403A3 11 1B 04 04 0111*   	ld	de,bitbuf1
0403A7             0112*   orloop_24:
0403A7 1A          0113*   	ld	a,(de)
0403A8 B6          0114*   	or	(hl)
0403A9 12          0115*   	ld	(de),a
0403AA 13          0116*   	inc	de
0403AB 23          0117*   	inc	hl
0403AC 10 F9       0118*   	djnz	orloop_24
0403AE 2A 1E 04 04 0119*   	ld	hl,(bitbuf2)
0403B2 C1          0120*   	pop		bc	;restore BC
0403B3 D1          0121*   	pop		de	;restore DE
0403B4             0122*   
0403B4             0123*   ;------------------------------------------------------------------------
0403B4             0124*   ; and_hlu_deu: 24 bit bitwise AND
0403B4             0125*   ; Returns: hlu = hlu AND deu
0403B4             0126*   ; preserves all other registers
0403B4             0127*   ;------------------------------------------------------------------------
0403B4             0128*   and_hlu_deu:
0403B4 22 1B 04 04 0129*   	ld	(bitbuf1),hl
0403B8 ED 53 1E 04 0130*   	ld	(bitbuf2),de
       04          
0403BD D5          0131*   	push	de	;preserve DEU
0403BE C5          0132*   	push	bc	;preserve BCU
0403BF 06 03       0133*   	ld		b,3
0403C1 21 1B 04 04 0134*   	ld	hl,bitbuf1
0403C5 11 1B 04 04 0135*   	ld	de,bitbuf1
0403C9             0136*   andloop_24:
0403C9 1A          0137*   	ld	a,(de)
0403CA A6          0138*   	and	(hl)
0403CB 12          0139*   	ld	(de),a
0403CC 13          0140*   	inc	de
0403CD 23          0141*   	inc	hl
0403CE 10 F9       0142*   	djnz	andloop_24
0403D0 2A 1E 04 04 0143*   	ld	hl,(bitbuf2)
0403D4 C1          0144*   	pop		bc	;restore BC
0403D5 D1          0145*   	pop		de	;restore DE
0403D6             0146*   
0403D6             0147*   ;------------------------------------------------------------------------
0403D6             0148*   ; xor_hlu_deu: 24 bit bitwise XOR
0403D6             0149*   ; Returns: hlu = hlu XOR deu
0403D6             0150*   ; preserves all other registers
0403D6             0151*   ;------------------------------------------------------------------------
0403D6             0152*   xor_hlu_deu:
0403D6 22 1B 04 04 0153*   	ld	(bitbuf1),hl
0403DA ED 53 1E 04 0154*   	ld	(bitbuf2),de
       04          
0403DF D5          0155*   	push	de	;preserve DEU
0403E0 C5          0156*   	push	bc	;preserve BCU
0403E1 06 03       0157*   	ld		b,3
0403E3 21 1B 04 04 0158*   	ld	hl,bitbuf1
0403E7 11 1B 04 04 0159*   	ld	de,bitbuf1
0403EB             0160*   xorloop_24:
0403EB 1A          0161*   	ld	a,(de)
0403EC AE          0162*   	xor	(hl)
0403ED 12          0163*   	ld	(de),a
0403EE 13          0164*   	inc	de
0403EF 23          0165*   	inc	hl
0403F0 10 F9       0166*   	djnz	xorloop_24
0403F2 2A 1E 04 04 0167*   	ld	hl,(bitbuf2)
0403F6 C1          0168*   	pop		bc	;restore BC
0403F7 D1          0169*   	pop		de	;restore DE
0403F8             0170*   
0403F8             0171*   ;------------------------------------------------------------------------
0403F8             0172*   ; shl_hlu: 24 bit shift left hlu by a positions
0403F8             0173*   ; Returns: hlu = hlu << a
0403F8             0174*   ;		   a = 0
0403F8             0175*   ; NOTE: only considers a up to 16 bits.
0403F8             0176*   ; preserves all other registers
0403F8             0177*   ; modified by Brandon R. Gates to use a instead of de
0403F8             0178*   ;------------------------------------------------------------------------
0403F8             0179*   shl_hlu:
0403F8 B7          0180*   	or a
0403F9 C8          0181*   	ret		z		;we're done
0403FA 29          0182*   	add		hl,hl	;shift HLU left
0403FB 3D          0183*   	dec a
0403FC 18 FA       0184*   	jr		shl_hlu
0403FE             0185*   
0403FE             0186*   ;------------------------------------------------------------------------
0403FE             0187*   ; shr_hlu: 24 bit shift right hlu by a positions
0403FE             0188*   ; Returns: hlu = hlu >> a
0403FE             0189*   ;		   a = 0
0403FE             0190*   ; NOTE: only considers a up to 16 bits.
0403FE             0191*   ; preserves all other registers
0403FE             0192*   ; modified by Brandon R. Gates to use a instead of de
0403FE             0193*   ;------------------------------------------------------------------------
0403FE             0194*   shr_hlu:
0403FE 22 1B 04 04 0195*   	ld		(bitbuf1),hl
040402 21 1D 04 04 0196*   	ld		hl,bitbuf1+2
040406             0197*   @shr_loop:
040406 B7          0198*   	or a
040407 28 0D       0199*   	jr		z,@shr_done		;we're done
040409             0200*   ;carry is clear from or instruction
040409 CB 1E       0201*   	rr		(hl)
04040B 2B          0202*   	dec		hl
04040C CB 1E       0203*   	rr		(hl)
04040E 2B          0204*   	dec		hl
04040F CB 1E       0205*   	rr		(hl)
040411 23          0206*   	inc		hl
040412 23          0207*   	inc		hl
040413 3D          0208*   	dec a
040414 18 F0       0209*   	jr		@shr_loop
040416             0210*   @shr_done:
040416 2A 1B 04 04 0211*   	ld		hl,(bitbuf1)	;collect result
04041A C9          0212*   	ret
04041B             0213*   
04041B             0214*   ;------------------------------------------------------------------------
04041B             0215*   ; Scratch area for calculations
04041B             0216*   ;------------------------------------------------------------------------
04041B 00 00 00    0217*   bitbuf1:	dw24	0	;bit manipulation buffer 1
04041E 00 00 00    0218*   bitbuf2:	dw24	0	;bit manipulation buffer 2
040421             0219*   
040421             0220*   ; -----------------------------------------------------------------------
040421             0221*   ; Functions added by Brandon R. Gates
040421             0222*   ; -----------------------------------------------------------------------
040421             0223*   
040421             0224*   ;------------------------------------------------------------------------
040421             0225*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
040421             0226*   ;              Determines the LSB of A and shifts HLU accordingly.
040421             0227*   ;              HLU = HLU >> LSB(A)
040421             0228*   ; Returns: HLU = HLU >> LSB(A)
040421             0229*   ; Destroys: af
040421             0230*   ;------------------------------------------------------------------------
040421             0231*   shr_hlu_log2a:
040421 B7          0232*   	or a    ; check for zero
040422 C8          0233*   	ret z   ; nothing to shift so we're done
040423 C5          0234*   	push 	bc ; preserve
040424 06 00       0235*   	ld		b,0 ; clear b
040426             0236*   @find_bit:
040426 0F          0237*   	rrca ; bit 0 to carry
040427 DA 30 04 04 0238*   	jp c,@found_bit
04042B 04          0239*   	inc b ; next bit
04042C C3 26 04 04 0240*   	jp @find_bit
040430             0241*   @found_bit:
040430 78          0242*   	ld a,b
040431 CD FE 03 04 0243*   	call shr_hlu
040435 C1          0244*   	pop 	bc ; restore
040436 C9          0245*   	ret
040437             0246*   ; end shr_hlu_log2a
040437             0247*   
040437             0248*   ;------------------------------------------------------------------------
040437             0249*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040437             0250*   ;                Determines the LSB of A and shifts HLU accordingly.
040437             0251*   ;                HLU = HLU << LSB(A)
040437             0252*   ; Returns: HLU = HLU << LSB(A)
040437             0253*   ; Destroys: af
040437             0254*   ;------------------------------------------------------------------------
040437             0255*   shl_hlu_log2a:
040437 B7          0256*   	or a    ; check for zero
040438 C8          0257*   	ret z   ; nothing to shift so we're done
040439 C5          0258*   	push 	bc ; preserve
04043A 06 00       0259*   	ld		b,0 ; clear b
04043C             0260*   @find_bit:
04043C 0F          0261*   	rrca ; bit 0 to carry
04043D DA 46 04 04 0262*   	jp c,@found_bit
040441 04          0263*   	inc b ; next bit
040442 C3 3C 04 04 0264*   	jp @find_bit
040446             0265*   @found_bit:
040446 78          0266*   	ld a,b
040447 CD F8 03 04 0267*   	call shl_hlu
04044B C1          0268*   	pop 	bc ; restore
04044C C9          0269*   	ret
04044D             0270*   ; end shl_hlu_log2a
04044D             0033        include "maths.inc"
04044D             0001*   ;------------------------------------------------------------------------
04044D             0002*   ; Scratch area for calculations
04044D             0003*   ;------------------------------------------------------------------------
04044D 00 00 00    0004*   scratch1: dw24 0 ;bit manipulation buffer 1
040450 00 00 00    0005*   scratch2: dw24 0 ;bit manipulation buffer 2
040453             0006*   
040453             0007*   ; absolute value of hlu
040453             0008*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040453             0009*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040453             0010*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040453             0011*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040453             0012*   ; destroys: a
040453             0013*   hlu_abs:
040453 19          0014*       add hl,de
040454 B7          0015*       or a
040455 ED 52       0016*       sbc hl,de
040457 FA 5C 04 04 0017*       jp m,@is_neg
04045B C9          0018*       ret ; hlu is positive or zero so we're done
04045C             0019*   @is_neg:
04045C F5          0020*       push af ; otherwise, save current flags for return
04045D CD 63 04 04 0021*       call neg_hlu ; negate hlu
040461 F1          0022*       pop af ; get back flags
040462 C9          0023*       ret
040463             0024*   
040463             0025*   ; flip the sign of hlu
040463             0026*   ; inputs: hlu
040463             0027*   ; returns: 0-hlu, flags set appropriately for the result:
040463             0028*   ;         s1,z0,pv0,n1,c1 if result is negative
040463             0029*   ;         s0,z1,pv0,n1,c0 if result is zero
040463             0030*   ;         s0,z0,pv0,n1,c1 if result is positive
040463             0031*   ; destroys a
040463             0032*   neg_hlu:
040463 D5          0033*       push de ; save de
040464 EB          0034*       ex de,hl ; put hl into de
040465 21 00 00 00 0035*       ld hl,0 ; clear hl
040469 AF          0036*       xor a ; clear carry
04046A ED 52       0037*       sbc hl,de ; 0-hlu = -hlu
04046C D1          0038*       pop de ; get de back
04046D C9          0039*       ret ; easy peasy
04046E             0040*   
04046E             0041*   ;------------------------------------------------------------------------
04046E             0042*   ; divide hlu by 2, inspired by above
04046E             0043*   ;------------------------------------------------------------------------
04046E             0044*   hlu_div2:
04046E 22 4D 04 04 0045*       ld (scratch1),hl
040472 21 4F 04 04 0046*       ld hl,scratch1+2
040476 CB 1E       0047*       rr (hl)
040478 2B          0048*       dec hl
040479 CB 1E       0049*       rr (hl)
04047B 2B          0050*       dec hl
04047C CB 1E       0051*       rr (hl)
04047E 23          0052*       inc hl
04047F 23          0053*       inc hl
040480 2A 4D 04 04 0054*       ld hl,(scratch1)
040484 C9          0055*       ret
040485             0056*   
040485             0057*   ; this is my little hack to divide by 16
040485             0058*   hlu_div16:
040485 AF          0059*       xor a
040486 29          0060*       add hl,hl
040487 17          0061*       rla
040488 29          0062*       add hl,hl
040489 17          0063*       rla
04048A 29          0064*       add hl,hl
04048B 17          0065*       rla
04048C 29          0066*       add hl,hl
04048D 17          0067*       rla
04048E 22 9B 04 04 0068*       ld (@scratch),hl
040492 32 9E 04 04 0069*       ld (@scratch+3),a
040496 2A 9C 04 04 0070*       ld hl,(@scratch+1)
04049A C9          0071*       ret
04049B             0072*   @scratch: ds 4
04049F             0073*   
04049F             0074*   ; hlu signed division by 256
04049F             0075*   ; returns: hlu / 256
04049F             0076*   ; destroys: af
04049F             0077*   hlu_sdiv256:
       FF FF FF FF 
04049F AF          0078*       xor a ; assume hl is positive
0404A0 22 B6 04 04 0079*       ld (@buffer),hl
0404A4             0080*       SIGN_HLU
0404A4 19          0001*M1     add hl,de ; 1 cycle
0404A5 B7          0002*M1     or a ; clear flags ; 1 cycle
0404A6 ED 52       0003*M1     sbc hl,de ; 2 cycles
0404A8             0004*M1     ; 4 cycles total
0404A8 F2 AD 04 04 0081*       jp p,@hl_pos
0404AC 3D          0082*       dec a
0404AD             0083*   @hl_pos:
0404AD 32 B9 04 04 0084*       ld (@buffer+3),a
0404B1 2A B7 04 04 0085*       ld hl,(@buffer+1)
0404B5 C9          0086*       ret
0404B6             0087*   @buffer: ds 4
0404BA             0088*   
0404BA             0089*   ; hlu 1 byte right shift, unsigned
0404BA             0090*   ; returns: hlu / 256, fractional portion in a
0404BA             0091*   ; destroys: af
0404BA             0092*   hlu_udiv256:
       FF FF FF FF 
0404BA AF          0093*       xor a
0404BB 32 CC 04 04 0094*       ld (@buffer+3),a
0404BF 7D          0095*       ld a,l ; save the fractional portion
0404C0 22 C9 04 04 0096*       ld (@buffer),hl
0404C4 2A CA 04 04 0097*       ld hl,(@buffer+1)
0404C8 C9          0098*       ret
0404C9             0099*   @buffer: ds 4
0404CD             0100*   
       FF FF FF FF 
0404CD 00 00 00 00 0101*   add_bcd_arg1: db #00,#00,#00,#00
0404D1 00 00 00 00 0102*   add_bcd_arg2: db #00,#00,#00,#00
0404D5             0103*   
0404D5             0104*   ; set bcd values in a scratch memory address from registers bcde
0404D5             0105*   ; input: hl; scratch address,bcde; 8-place bcd number
0404D5             0106*   ; destroys ; hl
0404D5             0107*   set_bcd:
0404D5 73          0108*       ld (hl),e
0404D6 23          0109*       inc hl
0404D7 72          0110*       ld (hl),d
0404D8 23          0111*       inc hl
0404D9 71          0112*       ld (hl),c
0404DA 23          0113*       inc hl
0404DB 70          0114*       ld (hl),b
0404DC C9          0115*       ret
0404DD             0116*   
0404DD             0117*   ; load bcd values from a scratch memory address to bcde
0404DD             0118*   ; input: hl; scratch address
0404DD             0119*   ; output: bcde; 8-place bcd number
0404DD             0120*   ; destroys: hl
0404DD             0121*   get_bcd:
0404DD 5E          0122*       ld e,(hl)
0404DE 23          0123*       inc hl
0404DF 56          0124*       ld d,(hl)
0404E0 23          0125*       inc hl
0404E1 4E          0126*       ld c,(hl)
0404E2 23          0127*       inc hl
0404E3 46          0128*       ld b,(hl)
0404E4 C9          0129*       ret
0404E5             0130*   
0404E5             0131*   ; BCD addition
0404E5             0132*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0404E5             0133*   ;       a is the number of bytes holding each number (number of places/2)
0404E5             0134*   ; outputs: (hl) + (de) --> (hl)
0404E5             0135*   ; destroys: a,b,de,hl
0404E5             0136*   add_bcd:
0404E5 47          0137*       ld b,a ; loop counter
0404E6 AF          0138*       xor a ; reset a, clear carry flag
0404E7             0139*   adcec:
0404E7 1A          0140*       ld a,(de) ; addend to acc
0404E8 8E          0141*       adc a,(hl) ; add (hl) to acc
0404E9 27          0142*       daa ; adjust result to bcd
0404EA 77          0143*       ld (hl),a ; store result
0404EB 23          0144*       inc hl ; advance memory pointers
0404EC 13          0145*       inc de
0404ED 10 F8       0146*       djnz adcec ; loop until b == 0
0404EF C9          0147*       ret
0404F0             0148*   
0404F0             0149*   ; BCD subtraction
0404F0             0150*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0404F0             0151*   ;       a is the number of bytes holding each number (number of places/2)
0404F0             0152*   ; outputs: (hl) - (de) --> (hl)
0404F0             0153*   ; destroys: a,b,de,hl
0404F0             0154*   sub_bcd:
0404F0 47          0155*       ld b,a ; loop counter
0404F1 AF          0156*       xor a ; reset a,clear carry flag
0404F2             0157*   subdec:
0404F2 1A          0158*       ld a,(de) ; subtrahend to acc
0404F3 9E          0159*       sbc a,(hl) ; subtract (hl) from acc
0404F4 27          0160*       daa ; adjust result to bcd
0404F5 77          0161*       ld (hl),a ; store result
0404F6 23          0162*       inc hl ; advance memory pointers
0404F7 13          0163*       inc de
0404F8 10 F8       0164*       djnz subdec ; loop until b == 0
0404FA C9          0165*       ret
0404FB             0166*   
0404FB             0167*   ; http://www.z80.info/pseudo-random.txt
0404FB             0168*   rand_8:
0404FB C5          0169*       push bc
0404FC 3A 0F 05 04 0170*       ld a,(r_seed)
040500 4F          0171*       ld c,a
040501             0172*   
040501 0F          0173*       rrca ; multiply by 32
040502 0F          0174*       rrca
040503 0F          0175*       rrca
040504 EE 1F       0176*       xor 0x1f
040506             0177*   
040506 81          0178*       add a,c
040507 DE FF       0179*       sbc a,255 ; carry
040509             0180*   
040509 32 0F 05 04 0181*       ld (r_seed),a
04050D C1          0182*       pop bc
04050E C9          0183*       ret
04050F 50          0184*   r_seed: defb $50
040510             0185*   
040510             0186*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
040510             0187*   prng24:
040510             0188*   ;;Expects ADL mode.
040510             0189*   ;;Output: HL
040510             0190*   ;;50cc
040510             0191*   ;;33 bytes
040510             0192*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
040510 ED 5B 31 05 0193*       ld de,(seed1)
       04          
040515 B7          0194*       or a
040516 ED 62       0195*       sbc hl,hl
040518 19          0196*       add hl,de
040519 29          0197*       add hl,hl
04051A 29          0198*       add hl,hl
04051B 2C          0199*       inc l
04051C 19          0200*       add hl,de
04051D 22 31 05 04 0201*       ld (seed1),hl
040521 2A 34 05 04 0202*       ld hl,(seed2)
040525 29          0203*       add hl,hl
040526 9F          0204*       sbc a,a
040527 E6 1B       0205*       and %00011011
040529 AD          0206*       xor l
04052A 6F          0207*       ld l,a
04052B 22 34 05 04 0208*       ld (seed2),hl
04052F 19          0209*       add hl,de
040530 C9          0210*       ret
040531 00 00 00    0211*   seed1: dl 0
040534 00 00 00    0212*   seed2: dl 0
040537             0034        include "files.inc"
040537             0001*   ; load to onboard 8k sram
040537             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
040537             0035        include "fixed168.inc"
040537             0001*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040537             0002*   ; uses EZ80 MLT instruction for speed
040537             0003*   ; operation: UHL * A --> UHL
040537             0004*   ; destroys: AF, HL
040537             0005*   smul24x8:
040537             0006*   ; make hl positive and store sign flag
040537 CD 53 04 04 0007*       call hlu_abs
04053B F5          0008*       push af
04053C             0009*   ; do the division
04053C CD 47 05 04 0010*       call mul24x8 ; hl = product
040540             0011*   ; adjust sign of result
040540 F1          0012*       pop af ; sign de
040541 F0          0013*       ret p ; hl was positive, nothing to do
040542 CD 63 04 04 0014*       call neg_hlu ; result is negative
040546 C9          0015*       ret
040547             0016*   
040547             0017*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040547             0018*   ; uses EZ80 MLT instruction for speed
040547             0019*   ; operation: UHL * A --> AUHL
040547             0020*   ; destroys: AF, HL
040547             0021*   mul24x8:
040547 D5          0022*       push de ; preserve de
040548             0023*   ; low byte
040548 5D          0024*       ld e,l
040549 57          0025*       ld d,a
04054A ED 5C       0026*       mlt de
04054C 6B          0027*       ld l,e ; product low byte
04054D 08          0028*       ex af,af' ; save multiplier
04054E 7A          0029*       ld a,d ; carry
04054F 08          0030*       ex af,af' ; save carry, restore multiplier
040550             0031*   ; high byte
040550 5C          0032*       ld e,h
040551 57          0033*       ld d,a
040552 ED 5C       0034*       mlt de
040554 08          0035*       ex af,af' ; save multiplier, restore carry
040555 83          0036*       add a,e ; add carry
040556 67          0037*       ld h,a ; product middle byte
040557 7A          0038*       ld a,d ; carry
040558 08          0039*       ex af,af' ; save carry, restore multiplier
040559             0040*   ; upper byte
040559 22 74 05 04 0041*       ld (@scratch),hl ; 7 cycles
04055D 5F          0042*       ld e,a
04055E 3A 76 05 04 0043*       ld a,(@scratch+2)
040562 57          0044*       ld d,a
040563 ED 5C       0045*       mlt de
040565 08          0046*       ex af,af' ; restore carry
040566 8B          0047*       adc a,e ; add carry
040567 32 76 05 04 0048*       ld (@scratch+2),a ; 5 cycles
04056B 2A 74 05 04 0049*       ld hl,(@scratch) ; 7 cycles
04056F             0050*   ; highest byte
04056F 3E 00       0051*       ld a,0 ; preserve carry flag
040571 8A          0052*       adc a,d ; product highest byte
040572 D1          0053*       pop de ; restore de
040573 C9          0054*       ret
040574             0055*   @scratch: ds 3
040577             0056*   
       FF FF FF 
040577 00 00 00 00 0057*   mul24out: blkb 6,0
       00 00       
04057D             0058*   
04057D             0059*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
04057D             0060*   ; operation: UHL * UDE --> mul24out
04057D             0061*   mul24:
04057D DD E5       0062*       push ix ; preserve
04057F             0063*   ; point to output buffer and clear it
04057F DD 21 77 05 0064*       ld ix,mul24out
       04          
040584 C5          0065*       push bc
040585 01 00 00 00 0066*       ld bc,0
040589 DD 0F 00    0067*       ld (ix),bc
04058C DD 0F 03    0068*       ld (ix+3),bc
04058F C1          0069*       pop bc
040590             0070*   ; STEP 1: UHL * E
040590 7B          0071*       ld a,e
040591 E5          0072*       push hl
040592 CD 47 05 04 0073*       call mul24x8
040596 DD 2F 00    0074*       ld (ix+0),hl
040599 DD 77 03    0075*       ld (ix+3),a
04059C             0076*   ; STEP 2: UHL * D
04059C E1          0077*       pop hl
04059D E5          0078*       push hl
04059E 7A          0079*       ld a,d
04059F CD 47 05 04 0080*       call mul24x8
0405A3 CD BC 05 04 0081*       call @accumulate
0405A7             0082*   ; STEP 3: UHL * DEU
0405A7 E1          0083*       pop hl
0405A8 ED 53 EC 05 0084*       ld (@de),de
       04          
0405AD 3A EE 05 04 0085*       ld a,(@de+2)
0405B1 CD 47 05 04 0086*       call mul24x8
0405B5 CD BC 05 04 0087*       call @accumulate
0405B9             0088*   ; all done
0405B9 DD E1       0089*       pop ix ; restore
0405BB C9          0090*       ret
0405BC             0091*   @accumulate:
0405BC DD 23       0092*       inc ix
0405BE             0093*   ; highest byte of product to carry
0405BE DD 77 03    0094*       ld (ix+3),a
0405C1             0095*   ; low byte of product
0405C1 7D          0096*       ld a,l
0405C2 DD 86 00    0097*       add a,(ix+0)
0405C5 DD 77 00    0098*       ld (ix+0),a
0405C8             0099*   ; high byte of product
0405C8 7C          0100*       ld a,h
0405C9 DD 8E 01    0101*       adc a,(ix+1)
0405CC DD 77 01    0102*       ld (ix+1),a
0405CF             0103*   ; uppper byte of product
0405CF 22 E9 05 04 0104*       ld (@hl),hl
0405D3 3A EB 05 04 0105*       ld a,(@hl+2)
0405D7 DD 8E 02    0106*       adc a,(ix+2)
0405DA DD 77 02    0107*       ld (ix+2),a
0405DD             0108*   ; carry
0405DD 3E 00       0109*       ld a,0 ; preserve flags
0405DF DD 8E 03    0110*       adc a,(ix+3)
0405E2 DD 77 03    0111*       ld (ix+3),a
0405E5 C9          0112*       ret
0405E6             0113*   
0405E6 00 00 00    0114*   @ix: dl 0
0405E9 00 00 00    0115*   @hl: dl 0
0405EC 00 00 00    0116*   @de: dl 0
0405EF             0117*   
0405EF             0118*   ; ; UHL * UDE --> UHL (unsigned)
0405EF             0119*   ; umul24:
0405EF             0120*   ;     call mul24
0405EF             0121*   ;     ld hl,(mul24out)
0405EF             0122*   ;     ret
0405EF             0123*   
0405EF             0124*   ; UH.L = UH.L*UD.E (unsigned)
0405EF             0125*   umul168:
0405EF CD 7D 05 04 0126*       call mul24
0405F3 2A 78 05 04 0127*       ld hl,(mul24out+1)
0405F7 C9          0128*       ret
0405F8             0129*   
0405F8             0130*   ; UH.L * UD.E --> UH.L (signed)
0405F8             0131*   smul168:
0405F8             0132*   ; make everything positive and store sign flags
0405F8 CD 53 04 04 0133*       call hlu_abs
0405FC F5          0134*       push af
0405FD EB          0135*       ex de,hl
0405FE CD 53 04 04 0136*       call hlu_abs
040602 EB          0137*       ex de,hl
040603 F5          0138*       push af
040604             0139*   ; do the division
040604 CD EF 05 04 0140*       call umul168 ; hl = product
040608             0141*   ; adjust sign of result
040608 F1          0142*       pop af ; sign de
040609 FA 14 06 04 0143*       jp m,@de_neg
04060D F1          0144*       pop af ; sign hl
04060E F0          0145*       ret p ; both positive, nothing to do
04060F             0146*   @hl_neg:
04060F CD 63 04 04 0147*       call neg_hlu ; de pos, hl neg, result is negative
040613 C9          0148*       ret
040614             0149*   @de_neg:
040614 F1          0150*       pop af
040615 F8          0151*       ret m ; both negative, nothing to do
040616 CD 63 04 04 0152*       call neg_hlu ; result is negative
04061A C9          0153*       ret
04061B             0154*   
04061B             0155*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
04061B             0156*   ; perform unsigned division of 16.8 fixed place values
04061B             0157*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
04061B             0158*   udiv168:
04061B             0159*   ; back up divisor
04061B ED 53 52 06 0160*       ld (@ude),de
       04          
040620             0161*   ; get the 16-bit integer part of the quotient
040620 CD 63 03 04 0162*       call udiv24 ; de = quotient, hl = remainder
040624             0163*   ; load quotient to upper three bytes of output
040624 ED 53 59 06 0164*       ld (div168_out+1),de
       04          
040629             0165*   @div256:
040629             0166*   ; multiply remainder by 256
040629             0167*       hlu_mul256
040629 29          0001*M1     add hl,hl ; * 2
04062A 29          0002*M1     add hl,hl ; * 4
04062B 29          0003*M1     add hl,hl ; * 8
04062C 29          0004*M1     add hl,hl ; * 16
04062D 29          0005*M1     add hl,hl ; * 32
04062E 29          0006*M1     add hl,hl ; * 64
04062F 29          0007*M1     add hl,hl ; * 128
040630 29          0008*M1     add hl,hl ; * 256
040631             0168*   ; skip fractional computation if remainder is zero
040631             0169*       SIGN_HLU
040631 19          0001*M1     add hl,de ; 1 cycle
040632 B7          0002*M1     or a ; clear flags ; 1 cycle
040633 ED 52       0003*M1     sbc hl,de ; 2 cycles
040635             0004*M1     ; 4 cycles total
040635 20 03       0170*       jr nz,@div_frac
040637 AF          0171*       xor a
040638 18 0A       0172*       jr @write_frac
04063A             0173*   ; now divide the shifted remainder by the divisor
04063A             0174*   @div_frac:
04063A ED 5B 52 06 0175*       ld de,(@ude) ; get back divisor
       04          
04063F CD 63 03 04 0176*       call udiv24 ; de = quotient, hl = remainder
040643             0177*   ; load low byte of quotient to low byte of output
040643 7B          0178*       ld a,e
040644             0179*   @write_frac:
040644 32 58 06 04 0180*       ld (div168_out),a
040648             0181*   ; load de with return value
040648 ED 5B 58 06 0182*       ld de,(div168_out)
       04          
04064D             0183*   ; load a with any overflow
04064D 3A 5B 06 04 0184*       ld a,(div168_out+3)
040651 C9          0185*       ret ; ud.e is the 16.8 result
040652             0186*   @ude: ds 6
040658             0187*   div168_out: ds 4 ; the extra byte is for overflow
04065C             0188*   
04065C             0189*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
04065C             0190*   ; perform signed division of 16.8 fixed place values
04065C             0191*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
04065C             0192*   sdiv168:
04065C             0193*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
04065C CD 53 04 04 0194*       call hlu_abs
040660 F5          0195*       push af
040661 EB          0196*       ex de,hl
040662 CD 53 04 04 0197*       call hlu_abs
040666 EB          0198*       ex de,hl
040667 F5          0199*       push af
040668             0200*   ; do the division
040668 CD 1B 06 04 0201*       call udiv168 ; de = quotient, hl = remainder
04066C             0202*   ; adjust sign of result
04066C F1          0203*       pop af ; sign de
04066D FA 7A 06 04 0204*       jp m,@de_neg
040671 F1          0205*       pop af ; sign hl
040672 F0          0206*       ret p ; both positive, nothing to do
040673             0207*   @hl_neg:
040673 EB          0208*       ex de,hl ; hl = quotient, de = remainder
040674 CD 63 04 04 0209*       call neg_hlu ; de pos, hl neg, result is negative
040678 EB          0210*       ex de,hl ; de = negated quotient, hl = remainder
040679 C9          0211*       ret
04067A             0212*   @de_neg:
04067A F1          0213*       pop af
04067B F8          0214*       ret m ; both negative, nothing to do
04067C EB          0215*       ex de,hl ; hl = quotient, de = remainder
04067D CD 63 04 04 0216*       call neg_hlu ; result is negative
040681 EB          0217*       ex de,hl ; de = negated quotient, hl = remainder
040682 C9          0218*       ret
040683             0219*   
040683             0220*   ; convert signed angles from a 360 to 256 degree circle
040683             0221*   ; inputs: uh.l is the angle360 in 16.8 fixed format
040683             0222*   ; outputs: uh.l is the angle256 in 16.8 fixed format
040683             0223*   ; destroys: TODO
040683             0224*   deg_360_to_256:
040683 D5          0225*       push de ; preserve de
040684             0226*   ; make angle positive and store sign flag
040684 CD 53 04 04 0227*       call hlu_abs
040688 F5          0228*       push af
040689             0229*   ; multiply by coversion factor of 256/360
040689 11 B6 00 00 0230*       ld de,0x0000B6 ; 0.711
04068D CD EF 05 04 0231*       call umul168 ; uh.l = uh.l * 0.711
040691             0232*   ; restore sign flag and adjust output accordingly
040691 F1          0233*       pop af
040692 F2 9A 06 04 0234*       jp p,@pos ; positive number
040696 CD 63 04 04 0235*       call neg_hlu
04069A             0236*   @pos:
04069A             0237*   ; restore de and return uh.l as the result
04069A D1          0238*       pop de
04069B C9          0239*       ret
04069C             0240*   
04069C             0241*   ; convert signed angles from a 256 to 360 degree circle
04069C             0242*   ; inputs: uh.l is the angle256 in 16.8 fixed format
04069C             0243*   ; outputs: uh.l is the angle360 in 16.8 fixed format
04069C             0244*   ; destroys: TODO
04069C             0245*   deg_256_to_360:
04069C D5          0246*       push de ; preserve de
04069D             0247*   ; make angle positive and store sign flag
04069D CD 53 04 04 0248*       call hlu_abs
0406A1 F5          0249*       push af
0406A2             0250*   ; multiply by coversion factor of 360/256
0406A2 11 68 01 00 0251*       ld de,0x000168 ; 1.406
0406A6 CD EF 05 04 0252*       call umul168 ; uh.l = uh.l * 1.406
0406AA             0253*   ; restore sign flag and adjust output accordingly
0406AA F1          0254*       pop af
0406AB F2 B3 06 04 0255*       jp p,@pos ; positive number
0406AF CD 63 04 04 0256*       call neg_hlu
0406B3             0257*   @pos:
0406B3             0258*   ; restore de and return uh.l as the result
0406B3 D1          0259*       pop de
0406B4 C9          0260*       ret
0406B5             0261*   
0406B5             0262*   ; fixed 16.8 routine
0406B5             0263*   ; cos(uh.l) --> uh.l
0406B5             0264*   ; destroys: f, hl
0406B5             0265*   cos168:
0406B5 D5          0266*       push de ; preserve de
0406B6             0267*   ; for cos we simply increment the angle by 90 degrees
0406B6             0268*   ; or 0x004000 in 16.8 degrees256
0406B6             0269*   ; which makes it a sin problem
0406B6 11 00 40 00 0270*       ld de,0x004000
0406BA 19          0271*       add hl,de ; modulo 256 happens below
0406BB D1          0272*       pop de ; restore de
0406BC             0273*   ; fall through to sin168
0406BC             0274*   
0406BC             0275*   ; ---------------------
0406BC             0276*   ; fixed 16.8 routine
0406BC             0277*   ; sin(uh.l) --> uh.l
0406BC             0278*   ; destroys: f, hl
0406BC             0279*   sin168:
0406BC D5          0280*       push de
0406BD             0281*   ; handle negative angles appropriately
0406BD CD 53 04 04 0282*       call hlu_abs
0406C1 F2 CA 06 04 0283*       jp p,@F
0406C5 11 00 00 FF 0284*       ld de,-256*256
0406C9 19          0285*       add hl,de
0406CA             0286*   @@:
0406CA 2E 03       0287*       ld l,3 ; multiply by 3 to get our lookup index
0406CC ED 6C       0288*       mlt hl
0406CE 11 82 09 04 0289*       ld de,sin_lut_168 ; grab the lut address
0406D2 19          0290*       add hl,de ; bump hl by the index
0406D3 ED 27       0291*       ld hl,(hl) ; don't try this on a z80!
0406D5 D1          0292*       pop de
0406D6 C9          0293*       ret
0406D7             0294*   
0406D7             0295*   ; 16.8 fixed inputs / outputs
0406D7             0296*   ; takes: uh.l as angle in degrees 256
0406D7             0297*   ;        ud.e as radius
0406D7             0298*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
0406D7             0299*   ;        displacements from origin (0,0)
0406D7             0300*   ; destroys: everything except indexes
0406D7             0301*   polar_to_cartesian:
0406D7             0302*   ; back up input parameters
0406D7 22 06 07 04 0303*       ld (@angle), hl
0406DB ED 53 09 07 0304*       ld (@radius), de
       04          
0406E0             0305*   ; compute dx = sin(uh.l) * ud.e
0406E0 CD BC 06 04 0306*       call sin168 ; uh.l = sin(uh.l)
0406E4 ED 5B 09 07 0307*       ld de,(@radius)
       04          
0406E9 CD F8 05 04 0308*       call smul168 ; uh.l = dx
0406ED E5          0309*       push hl
0406EE             0310*   ; compute dy = -cos(uh.l) * ud.e
0406EE 2A 06 07 04 0311*       ld hl,(@angle)
0406F2 CD B5 06 04 0312*       call cos168 ; uh.l = cos(uh.l)
0406F6 ED 5B 09 07 0313*       ld de,(@radius)
       04          
0406FB CD F8 05 04 0314*       call smul168 ; uh.l = dy
0406FF CD 63 04 04 0315*       call neg_hlu ; invert dy for screen coords convention
040703 EB          0316*       ex de,hl ; de = dy for output
040704 C1          0317*       pop bc ; bc = dx for output
040705             0318*   ; and out
040705 C9          0319*       ret
040706             0320*   @angle: ds 3
040709             0321*   @radius: ds 3
04070C             0322*   
04070C             0323*   ; 16.8 fixed inputs / outputs
04070C             0324*   ; inputs: ub.c as dx, ud.e as dy
04070C             0325*   ;        displacements from origin (0,0)
04070C             0326*   ; returns: uh.l as angle in degrees 256
04070C             0327*   ;        ud.e as radius
04070C             0328*   ; destroys: everything except indexes
04070C             0329*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
04070C ED 43 65 07 0330*       ld (dx168),bc ; dx argument for distance168
       04          
040711 ED 53 6B 07 0331*       ld (dy168),de ; dy argument for distance168
       04          
040716             0332*   ; compute radius
040716 CD 71 07 04 0333*       call distance168 ; uh.l = radius
04071A E5          0334*       push hl ; save radius
04071B             0335*   ; compute angle
04071B ED 4B 65 07 0336*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040720 ED 5B 6B 07 0337*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040725 CD D1 07 04 0338*       call atan2_168fast ; uh.l = angle
040729             0339*   ; return result
040729 D1          0340*       pop de ; de = radius (was hl)
04072A C9          0341*       ret
04072B             0342*   ; end cartesian_to_polar
04072B             0343*   
04072B             0344*   ; 16.8 fixed inputs / outputs
04072B             0345*   ; inputs: ub.c as dx, ud.e as dy
04072B             0346*   ;        displacements from origin (0,0)
04072B             0347*   ; returns: uh.l as angle in degrees 256
04072B             0348*   ;        ud.e as radius
04072B             0349*   ; destroys: everything except indexes
04072B             0350*   ; note: uses distance168sm which is more accurate for small deltas
04072B             0351*   cartesian_to_polar_sm:
04072B ED 43 65 07 0352*       ld (dx168),bc ; dx argument for distance168
       04          
040730 ED 53 6B 07 0353*       ld (dy168),de ; dy argument for distance168
       04          
040735             0354*   ; compute radius
040735 CD AC 07 04 0355*       call distance168sm ; uh.l = radius
040739 E5          0356*       push hl ; save radius
04073A             0357*   ; compute angle
04073A ED 4B 65 07 0358*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
04073F ED 5B 6B 07 0359*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040744 CD D1 07 04 0360*       call atan2_168fast ; uh.l = angle
040748             0361*   ; return result
040748 D1          0362*       pop de ; de = radius (was hl)
040749 C9          0363*       ret
04074A             0364*   ; end cartesian_to_polar
04074A             0365*   
04074A             0366*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
04074A             0367*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
04074A             0368*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
04074A             0369*   ;         also populates scratch locations dx168 and dy168
04074A             0370*   ; destroys: a,hl,bc,de
04074A             0371*   dxy168:
04074A             0372*   ; compute dx = x1-x0
04074A AF          0373*       xor a ; clear carry
04074B DD E5       0374*       push ix ; move ix to hl via the stack
04074D E1          0375*       pop hl ; hl = x1
04074E ED 42       0376*       sbc hl,bc ; hl = dx
040750 22 65 07 04 0377*       ld (dx168),hl ; dx to scratch
040754             0378*   ; compute dy = y1-y0
040754 AF          0379*       xor a ; clear carry
040755 FD E5       0380*       push iy ; move iy to hl via the stack
040757 E1          0381*       pop hl ; hl = y1
040758 ED 52       0382*       sbc hl,de ; hl = dy
04075A 22 6B 07 04 0383*       ld (dy168),hl ; dy to scratch
04075E             0384*   ; populate output registers and return
04075E EB          0385*       ex de,hl ; ud.e = dy
04075F ED 4B 65 07 0386*       ld bc,(dx168) ; ub.c = dx
       04          
040764 C9          0387*       ret
040765 00 00 00 00 0388*   dx168: blkb 6,0
       00 00       
04076B 00 00 00 00 0389*   dy168: blkb 6,0
       00 00       
040771             0390*   
040771             0391*   ; compute the euclidian distance between two cartesian coordinates
040771             0392*   ; using the formula d = sqrt(dx^2+dy^2)
040771             0393*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040771             0394*   ; output; uh.l is the 16.8 fixed format distance
040771             0395*   ;         also populates scratch locations dx168 and dy168
040771             0396*   ; destroys: a,hl,bc,de
040771             0397*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
040771             0398*   ;       thus the result will always be an integer, albeit in 16.8 format
040771             0399*   distance168:
040771             0400*   ; compute dy^2
040771 2A 6B 07 04 0401*       ld hl,(dy168)
040775 CD 53 04 04 0402*       call hlu_abs
040779             0403*       ; call hlu_udiv256 ; make integer to avoid overflow
040779             0404*       SRL_UHL ; make integer to avoid overflow
040779 3B          0001*M1     dec sp ; 1 cycle
04077A E5          0002*M1     push hl ; 4 cycles
04077B 33          0003*M1     inc sp ; 1 cycle
04077C E1          0004*M1     pop hl ; 4 cycles
04077D 23          0005*M1     inc hl ; 1 cycle
04077E 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040780             0007*M1     ; 13 cycles total
040780 E5          0405*       push hl
040781 D1          0406*       pop de
040782 CD 4A 03 04 0407*       call umul24 ; hl = dy^2
040786 E5          0408*       push hl ; save dy^2
040787             0409*   ; compute dx^2
040787 2A 65 07 04 0410*       ld hl,(dx168)
04078B CD 53 04 04 0411*       call hlu_abs
04078F             0412*       ; call hlu_udiv256 ; make integer to avoid overflow
04078F             0413*       SRL_UHL ; make integer to avoid overflow
04078F 3B          0001*M1     dec sp ; 1 cycle
040790 E5          0002*M1     push hl ; 4 cycles
040791 33          0003*M1     inc sp ; 1 cycle
040792 E1          0004*M1     pop hl ; 4 cycles
040793 23          0005*M1     inc hl ; 1 cycle
040794 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040796             0007*M1     ; 13 cycles total
040796 E5          0414*       push hl
040797 D1          0415*       pop de
040798 CD 4A 03 04 0416*       call umul24 ; hl = dx^2
04079C             0417*   ; add dx^2 and dy^2
04079C D1          0418*       pop de ; de = dy^2 (was hl)
04079D 19          0419*       add hl,de ; hl = dx^2 + dy^2
04079E             0420*   ; compute the square root
04079E CD 9C 08 04 0421*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
0407A2 EB          0422*       ex de,hl ; hl = distance
0407A3             0423*       hlu_mul256 ; convert back to 16.8 fixed
0407A3 29          0001*M1     add hl,hl ; * 2
0407A4 29          0002*M1     add hl,hl ; * 4
0407A5 29          0003*M1     add hl,hl ; * 8
0407A6 29          0004*M1     add hl,hl ; * 16
0407A7 29          0005*M1     add hl,hl ; * 32
0407A8 29          0006*M1     add hl,hl ; * 64
0407A9 29          0007*M1     add hl,hl ; * 128
0407AA 29          0008*M1     add hl,hl ; * 256
0407AB C9          0424*       ret
0407AC             0425*   
0407AC             0426*   ; compute the euclidian distance between two cartesian coordinates
0407AC             0427*   ; using the formula d = sqrt(dx^2+dy^2)
0407AC             0428*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
0407AC             0429*   ; output; uh.l is the 16.8 fixed format distance
0407AC             0430*   ;         also populates scratch locations dx168 and dy168
0407AC             0431*   ; destroys: a,hl,bc,de
0407AC             0432*   ; NOTE: sm means 'small' because it doesn't round down the deltas
0407AC             0433*   ;       making it more accurate for small deltas,
0407AC             0434*   ;       but will overflow if used for screen-sized deltas
0407AC             0435*   distance168sm:
0407AC             0436*   ; compute dy^2
0407AC 2A 6B 07 04 0437*       ld hl,(dy168)
0407B0 CD 53 04 04 0438*       call hlu_abs
0407B4 E5          0439*       push hl
0407B5 D1          0440*       pop de
0407B6 CD 4A 03 04 0441*       call umul24 ; hl = dy^2
0407BA E5          0442*       push hl ; save dy^2
0407BB             0443*   ; compute dx^2
0407BB 2A 65 07 04 0444*       ld hl,(dx168)
0407BF CD 53 04 04 0445*       call hlu_abs
0407C3 E5          0446*       push hl
0407C4 D1          0447*       pop de
0407C5 CD 4A 03 04 0448*       call umul24 ; hl = dx^2
0407C9             0449*   ; add dx^2 and dy^2
0407C9 D1          0450*       pop de ; de = dy^2 (was hl)
0407CA 19          0451*       add hl,de ; hl = dx^2 + dy^2
0407CB             0452*   ; compute the square root
0407CB CD 9C 08 04 0453*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
0407CF EB          0454*       ex de,hl ; hl = distance
0407D0 C9          0455*       ret
0407D1             0456*   
0407D1             0457*   ; atan2_(ub.c,ud.e) --> uh.l
0407D1             0458*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0407D1             0459*   ;   whether inputs are integers or fractional doesn't matter
0407D1             0460*   ;   so long as the sign bit of the upper byte is correct
0407D1             0461*   ; output: uh.l is the 16.8 fixed angle in degrees 256
0407D1             0462*   ; angles are COMPASS HEADINGS based on
0407D1             0463*   ; screen coordinate conventions,where the y axis is flipped
0407D1             0464*   ; #E0 224      0       32 #20
0407D1             0465*   ;        -x,-y | +x,-y
0407D1             0466*   ; #C0 192------+------ 64 #40
0407D1             0467*   ;        -x,+y | +x,+y
0407D1             0468*   ; #A0 160   128 #80   96 #60
0407D1             0469*   atan2_168fast:
0407D1             0470*   ; get signs and make everything positive
0407D1             0471*   ; get abs(x) and store its original sign
0407D1 C5          0472*       push bc
0407D2 E1          0473*       pop hl
0407D3 CD 53 04 04 0474*       call hlu_abs ; if x was negative this also sets the sign flag
0407D7 E5          0475*       push hl ; store abs(x)
0407D8 C1          0476*       pop bc ; bc = abs(x)
0407D9 F5          0477*       push af ; store sign of x
0407DA             0478*   ; get abs(y) and store its original sign
0407DA EB          0479*       ex de,hl ; hl = y
0407DB CD 53 04 04 0480*       call hlu_abs ; if y was negative this also sets the sign flag
0407DF EB          0481*       ex de,hl ; de = abs(y)
0407E0 F5          0482*       push af ; store sign of y
0407E1             0483*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0407E1             0484*   ; this ensures that our lookup value is between 0 and 1 inclusive
0407E1 AF          0485*       xor a ; clear the carry flag
0407E2 D5          0486*       push de
0407E3 E1          0487*       pop hl
0407E4 ED 42       0488*       sbc hl,bc
0407E6 F5          0489*       push af ; save sign of de - bc
0407E7 F2 F0 07 04 0490*       jp p,@1 ; bc <= de, so we skip ahead
0407EB             0491*   ; otherwise we swap bc and de
0407EB C5          0492*       push bc
0407EC E1          0493*       pop hl
0407ED EB          0494*       ex de,hl
0407EE E5          0495*       push hl
0407EF C1          0496*       pop bc
0407F0             0497*   @1:
0407F0             0498*   ; now we're ready to snag our preliminary result
0407F0 C5          0499*       push bc
0407F1 E1          0500*       pop hl
0407F2 CD 60 08 04 0501*       call atan_168fast ; uh.l comes back with prelim result
0407F6             0502*   ; now we adjust uh.l based on sign of de - bc
0407F6 F1          0503*       pop af
0407F7 F2 03 08 04 0504*       jp p,@2 ; bc <= de,so we skip ahead
0407FB EB          0505*       ex de,hl
0407FC 21 00 40 00 0506*       ld hl,64*256 ; subtract from 64 (90) degrees
040800 AF          0507*       xor a ; clear the carry flag
040801 ED 52       0508*       sbc hl,de
040803             0509*   @2:
040803             0510*   ; adjust the result based on quadrant
040803             0511*   ; #E0 224      0       32 #20
040803             0512*   ;        -x,-y | +x,-y
040803             0513*   ; #C0 192------+------ 64 #40
040803             0514*   ;        -x,+y | +x,+y
040803             0515*   ; #A0 160   128 #80   96 #60
040803 F1          0516*       pop af ; sign of y
040804 CA 41 08 04 0517*       jp z,@y_zero
040808 F2 21 08 04 0518*       jp p,@y_pos
04080C             0519*   ; y neg,check x
04080C F1          0520*       pop af ; sign of x
04080D CA 1B 08 04 0521*       jp z,@y_neg_x_zero
040811 F2 20 08 04 0522*       jp p,@y_neg_x_pos
040815             0523*   ; y neg,x neg
040815             0524*   ; angle is 128 to 256 (270 to 360)
040815             0525*   ; negating the intermediate does the trick
040815 CD 63 04 04 0526*       call neg_hlu
040819 18 31       0527*       jr @zero_hlu
04081B             0528*   
04081B             0529*   @y_neg_x_zero:
04081B             0530*   ; y neg,x zero
04081B             0531*   ; angle is 0
04081B 21 00 00 00 0532*       ld hl,0
04081F C9          0533*       ret
040820             0534*   @y_neg_x_pos:
040820             0535*   ; y neg,x pos
040820             0536*   ; angle is 0 to 64 (0 to 90)
040820             0537*   ; so we're good
040820 C9          0538*       ret
040821             0539*   
040821             0540*   @y_pos:
040821 F1          0541*       pop af ; sign of x
040822 CA 31 08 04 0542*       jp z,@y_pos_x_zero
040826 F2 36 08 04 0543*       jp p,@y_pos_x_pos
04082A             0544*   ; y pos,x neg
04082A             0545*   ; angle is 128 to 192 (180-270)
04082A             0546*   ; so we add 128 to intermediate
04082A 11 00 80 00 0547*       ld de,128*256
04082E 19          0548*       add hl,de
04082F 18 1B       0549*       jr @zero_hlu
040831             0550*   @y_pos_x_zero:
040831             0551*   ; y pos,x zero
040831             0552*   ; angle is 128 (180)
040831 21 00 80 00 0553*       ld hl,128*256
040835 C9          0554*       ret
040836             0555*   @y_pos_x_pos:
040836             0556*   ; y pos,x pos
040836             0557*   ; angle is 64 to 128 (90 to 180)
040836             0558*   ; neg the intermediate and add 180 degrees
040836 CD 63 04 04 0559*       call neg_hlu
04083A 11 00 80 00 0560*       ld de,128*256
04083E 19          0561*       add hl,de
04083F 18 0B       0562*       jr @zero_hlu
040841             0563*   
040841             0564*   @y_zero:
040841 F1          0565*       pop af ; sign of x
040842 FA 47 08 04 0566*       jp m,@y_zero_x_neg
040846             0567*   ; y zero,x pos
040846             0568*   ; angle is 64 (90),nothing to do
040846 C9          0569*       ret
040847             0570*   @y_zero_x_neg:
040847             0571*   ; y zero ,x neg
040847             0572*   ; angle is 192 (270)
040847 21 00 C0 00 0573*       ld hl,192*256
04084B C9          0574*       ret
04084C             0575*   @zero_hlu:
04084C AF          0576*       xor a
04084D 22 5A 08 04 0577*       ld (@scratch),hl
040851 32 5C 08 04 0578*       ld (@scratch+2),a
040855 2A 5A 08 04 0579*       ld hl,(@scratch)
040859 C9          0580*       ret
04085A             0581*   @scratch: ds 6
040860             0582*   
040860             0583*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040860             0584*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
040860             0585*   ; destroys: a,hl,bc,de
040860             0586*   ; note: only works for angles from 0 to 32 (45) degrees
040860             0587*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040860             0588*   atan_168fast:
040860             0589*   ; because we use compass headings instead of geometric angles
040860             0590*   ; we compute dx/dy which is 1/tan(theta) in the maths world
040860             0591*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
040860 CD 1B 06 04 0592*       call udiv168 ; ud.e = dx/dy
040864 EB          0593*       ex de,hl ; uh.l = dx/dy
040865             0594*   ; test uh.l for 0
040865 19          0595*       add hl,de
040866 B7          0596*       or a
040867 ED 52       0597*       sbc hl,de
040869 28 22       0598*       jr z,@is_zero
04086B             0599*   ; test uh.l for 1
04086B AF          0600*       xor a ; clear carry
04086C EB          0601*       ex de,hl
04086D 21 00 01 00 0602*       ld hl,1*256 ; 1 in 16.8 fixed format
040871 ED 52       0603*       sbc hl,de
040873 28 13       0604*       jr z,@is_45
040875 EB          0605*       ex de,hl
040876             0606*   ; no special cases so we move on
040876             0607*   ; l contains the fractional portion of tan(uh.l)
040876             0608*   ; we multiply it by three to get our lookup table index
040876 26 03       0609*       ld h,3
040878 ED 6C       0610*       mlt hl ; index into lut
04087A 11 00 00 00 0611*       ld de,0 ; clear deu
04087E 54          0612*       ld d,h ; copy hl to de
04087F 5D          0613*       ld e,l ; de contains our index
040880 21 85 0C 04 0614*       ld hl,atan_lut_168 ; grab the lut address
040884 19          0615*       add hl,de ; bump hl by the index
040885 ED 27       0616*       ld hl,(hl) ; don't try this on a z80!
040887 C9          0617*       ret ; and out
040888             0618*   @is_45:
040888 21 00 20 00 0619*       ld hl,32*256
04088C C9          0620*       ret
04088D             0621*   ; for the case tan(0)
04088D             0622*   @is_zero:
04088D 21 00 00 00 0623*       ld hl,0*256
040891 C9          0624*       ret
040892             0625*   
040892             0626*   ; Expects  ADL mode
040892             0627*   ; Inputs:  UH.L
040892             0628*   ; Outputs: UH.L is the 16.8 square root
040892             0629*   ;          UDE is the integer difference inputHL-DE^2
040892             0630*   sqrt168:
040892 CD 9C 08 04 0631*       call sqrt24
040896 EB          0632*       ex de,hl
040897 29          0633*       add hl,hl
040898 29          0634*       add hl,hl
040899 29          0635*       add hl,hl
04089A 29          0636*       add hl,hl
04089B C9          0637*       ret
04089C             0638*   
04089C             0639*   ; credit: xeda112358
04089C             0640*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
04089C             0641*   sqrt24:
04089C             0642*   ; Expects ADL mode
04089C             0643*   ; Inputs: HL
04089C             0644*   ; Outputs: DE is the integer square root
04089C             0645*   ;  HL is the difference inputHL-DE^2
04089C             0646*   ;  c flag reset
04089C 01 00 00 00 0647*       ld bc,0 ; clear bcu
0408A0 11 00 00 00 0648*       ld de,0 ; clear deu
0408A4 AF          0649*       xor a
0408A5 45          0650*       ld b,l
0408A6 C5          0651*       push bc
0408A7 47          0652*       ld b,a
0408A8 6F          0653*       ld l,a
0408A9             0654*   ; Iteration 1
0408A9 29          0655*       add hl,hl
0408AA CB 11       0656*       rl c
0408AC 29          0657*       add hl,hl
0408AD CB 11       0658*       rl c
0408AF 91          0659*       sub c
0408B0 30 04       0660*       jr nc,$+6
0408B2 1C          0661*       inc e
0408B3 1C          0662*       inc e
0408B4 2F          0663*       cpl
0408B5 4F          0664*       ld c,a
0408B6             0665*   ; Iteration 2
0408B6 29          0666*       add hl,hl
0408B7 CB 11       0667*       rl c
0408B9 29          0668*       add hl,hl
0408BA CB 11       0669*       rl c
0408BC CB 13       0670*       rl e
0408BE 7B          0671*       ld a,e
0408BF 91          0672*       sub c
0408C0 30 04       0673*       jr nc,$+6
0408C2 1C          0674*       inc e
0408C3 1C          0675*       inc e
0408C4 2F          0676*       cpl
0408C5 4F          0677*       ld c,a
0408C6             0678*   ; Iteration 3
0408C6 29          0679*       add hl,hl
0408C7 CB 11       0680*       rl c
0408C9 29          0681*       add hl,hl
0408CA CB 11       0682*       rl c
0408CC CB 13       0683*       rl e
0408CE 7B          0684*       ld a,e
0408CF 91          0685*       sub c
0408D0 30 04       0686*       jr nc,$+6
0408D2 1C          0687*       inc e
0408D3 1C          0688*       inc e
0408D4 2F          0689*       cpl
0408D5 4F          0690*       ld c,a
0408D6             0691*   ; Iteration 4
0408D6 29          0692*       add hl,hl
0408D7 CB 11       0693*       rl c
0408D9 29          0694*       add hl,hl
0408DA CB 11       0695*       rl c
0408DC CB 13       0696*       rl e
0408DE 7B          0697*       ld a,e
0408DF 91          0698*       sub c
0408E0 30 04       0699*       jr nc,$+6
0408E2 1C          0700*       inc e
0408E3 1C          0701*       inc e
0408E4 2F          0702*       cpl
0408E5 4F          0703*       ld c,a
0408E6             0704*   ; Iteration 5
0408E6 29          0705*       add hl,hl
0408E7 CB 11       0706*       rl c
0408E9 29          0707*       add hl,hl
0408EA CB 11       0708*       rl c
0408EC CB 13       0709*       rl e
0408EE 7B          0710*       ld a,e
0408EF 91          0711*       sub c
0408F0 30 04       0712*       jr nc,$+6
0408F2 1C          0713*       inc e
0408F3 1C          0714*       inc e
0408F4 2F          0715*       cpl
0408F5 4F          0716*       ld c,a
0408F6             0717*   ; Iteration 6
0408F6 29          0718*       add hl,hl
0408F7 CB 11       0719*       rl c
0408F9 29          0720*       add hl,hl
0408FA CB 11       0721*       rl c
0408FC CB 13       0722*       rl e
0408FE 7B          0723*       ld a,e
0408FF 91          0724*       sub c
040900 30 04       0725*       jr nc,$+6
040902 1C          0726*       inc e
040903 1C          0727*       inc e
040904 2F          0728*       cpl
040905 4F          0729*       ld c,a
040906             0730*   ; Iteration 7
040906 29          0731*       add hl,hl
040907 CB 11       0732*       rl c
040909 29          0733*       add hl,hl
04090A CB 11       0734*       rl c
04090C CB 10       0735*       rl b
04090E EB          0736*       ex de,hl
04090F 29          0737*       add hl,hl
040910 E5          0738*       push hl
040911 ED 42       0739*       sbc hl,bc
040913 30 06       0740*       jr nc,$+8
040915 7C          0741*       ld a,h
040916 2F          0742*       cpl
040917 47          0743*       ld b,a
040918 7D          0744*       ld a,l
040919 2F          0745*       cpl
04091A 4F          0746*       ld c,a
04091B E1          0747*       pop hl
04091C 30 02       0748*       jr nc,$+4
04091E 23          0749*       inc hl
04091F 23          0750*       inc hl
040920 EB          0751*       ex de,hl
040921             0752*   ; Iteration 8
040921 29          0753*       add hl,hl
040922 69          0754*       ld l,c
040923 60          0755*       ld h,b
040924 ED 6A       0756*       adc hl,hl
040926 ED 6A       0757*       adc hl,hl
040928 EB          0758*       ex de,hl
040929 29          0759*       add hl,hl
04092A ED 52       0760*       sbc hl,de
04092C 19          0761*       add hl,de
04092D EB          0762*       ex de,hl
04092E 30 04       0763*       jr nc,$+6
040930 ED 52       0764*       sbc hl,de
040932 13          0765*       inc de
040933 13          0766*       inc de
040934             0767*   ; Iteration 9
040934 F1          0768*       pop af
040935 17          0769*       rla
040936 ED 6A       0770*       adc hl,hl
040938 17          0771*       rla
040939 ED 6A       0772*       adc hl,hl
04093B EB          0773*       ex de,hl
04093C 29          0774*       add hl,hl
04093D ED 52       0775*       sbc hl,de
04093F 19          0776*       add hl,de
040940 EB          0777*       ex de,hl
040941 30 04       0778*       jr nc,$+6
040943 ED 52       0779*       sbc hl,de
040945 13          0780*       inc de
040946 13          0781*       inc de
040947             0782*   ; Iteration 10
040947 17          0783*       rla
040948 ED 6A       0784*       adc hl,hl
04094A 17          0785*       rla
04094B ED 6A       0786*       adc hl,hl
04094D EB          0787*       ex de,hl
04094E 29          0788*       add hl,hl
04094F ED 52       0789*       sbc hl,de
040951 19          0790*       add hl,de
040952 EB          0791*       ex de,hl
040953 30 04       0792*       jr nc,$+6
040955 ED 52       0793*       sbc hl,de
040957 13          0794*       inc de
040958 13          0795*       inc de
040959             0796*   ; Iteration 11
040959 17          0797*       rla
04095A ED 6A       0798*       adc hl,hl
04095C 17          0799*       rla
04095D ED 6A       0800*       adc hl,hl
04095F EB          0801*       ex de,hl
040960 29          0802*       add hl,hl
040961 ED 52       0803*       sbc hl,de
040963 19          0804*       add hl,de
040964 EB          0805*       ex de,hl
040965 30 04       0806*       jr nc,$+6
040967 ED 52       0807*       sbc hl,de
040969 13          0808*       inc de
04096A 13          0809*       inc de
04096B             0810*   ; Iteration 12
04096B 17          0811*       rla
04096C ED 6A       0812*       adc hl,hl
04096E 17          0813*       rla
04096F ED 6A       0814*       adc hl,hl
040971 EB          0815*       ex de,hl
040972 29          0816*       add hl,hl
040973 ED 52       0817*       sbc hl,de
040975 19          0818*       add hl,de
040976 EB          0819*       ex de,hl
040977 30 04       0820*       jr nc,$+6
040979 ED 52       0821*       sbc hl,de
04097B 13          0822*       inc de
04097C 13          0823*       inc de
04097D CB 1A       0824*       rr d
04097F CB 1B       0825*       rr e
040981 C9          0826*       ret
040982             0827*   
040982             0828*   sin_lut_168:
040982 00 00 00    0829*       dl 0x000000 ; 0.000 00, 0.000
040985 06 00 00    0830*       dl 0x000006 ; 1.406 01, 0.025
040988 0C 00 00    0831*       dl 0x00000C ; 2.813 02, 0.049
04098B 12 00 00    0832*       dl 0x000012 ; 4.219 03, 0.074
04098E 19 00 00    0833*       dl 0x000019 ; 5.625 04, 0.098
040991 1F 00 00    0834*       dl 0x00001F ; 7.031 05, 0.122
040994 25 00 00    0835*       dl 0x000025 ; 8.438 06, 0.147
040997 2B 00 00    0836*       dl 0x00002B ; 9.844 07, 0.171
04099A 31 00 00    0837*       dl 0x000031 ; 11.250 08, 0.195
04099D 38 00 00    0838*       dl 0x000038 ; 12.656 09, 0.219
0409A0 3E 00 00    0839*       dl 0x00003E ; 14.063 0A, 0.243
0409A3 44 00 00    0840*       dl 0x000044 ; 15.469 0B, 0.267
0409A6 4A 00 00    0841*       dl 0x00004A ; 16.875 0C, 0.290
0409A9 50 00 00    0842*       dl 0x000050 ; 18.281 0D, 0.314
0409AC 56 00 00    0843*       dl 0x000056 ; 19.688 0E, 0.337
0409AF 5C 00 00    0844*       dl 0x00005C ; 21.094 0F, 0.360
0409B2 61 00 00    0845*       dl 0x000061 ; 22.500 10, 0.383
0409B5 67 00 00    0846*       dl 0x000067 ; 23.906 11, 0.405
0409B8 6D 00 00    0847*       dl 0x00006D ; 25.313 12, 0.428
0409BB 73 00 00    0848*       dl 0x000073 ; 26.719 13, 0.450
0409BE 78 00 00    0849*       dl 0x000078 ; 28.125 14, 0.471
0409C1 7E 00 00    0850*       dl 0x00007E ; 29.531 15, 0.493
0409C4 83 00 00    0851*       dl 0x000083 ; 30.938 16, 0.514
0409C7 88 00 00    0852*       dl 0x000088 ; 32.344 17, 0.535
0409CA 8E 00 00    0853*       dl 0x00008E ; 33.750 18, 0.556
0409CD 93 00 00    0854*       dl 0x000093 ; 35.156 19, 0.576
0409D0 98 00 00    0855*       dl 0x000098 ; 36.563 1A, 0.596
0409D3 9D 00 00    0856*       dl 0x00009D ; 37.969 1B, 0.615
0409D6 A2 00 00    0857*       dl 0x0000A2 ; 39.375 1C, 0.634
0409D9 A7 00 00    0858*       dl 0x0000A7 ; 40.781 1D, 0.653
0409DC AB 00 00    0859*       dl 0x0000AB ; 42.188 1E, 0.672
0409DF B0 00 00    0860*       dl 0x0000B0 ; 43.594 1F, 0.690
0409E2 B5 00 00    0861*       dl 0x0000B5 ; 45.000 20, 0.707
0409E5 B9 00 00    0862*       dl 0x0000B9 ; 46.406 21, 0.724
0409E8 BD 00 00    0863*       dl 0x0000BD ; 47.813 22, 0.741
0409EB C1 00 00    0864*       dl 0x0000C1 ; 49.219 23, 0.757
0409EE C5 00 00    0865*       dl 0x0000C5 ; 50.625 24, 0.773
0409F1 C9 00 00    0866*       dl 0x0000C9 ; 52.031 25, 0.788
0409F4 CD 00 00    0867*       dl 0x0000CD ; 53.438 26, 0.803
0409F7 D1 00 00    0868*       dl 0x0000D1 ; 54.844 27, 0.818
0409FA D4 00 00    0869*       dl 0x0000D4 ; 56.250 28, 0.831
0409FD D8 00 00    0870*       dl 0x0000D8 ; 57.656 29, 0.845
040A00 DB 00 00    0871*       dl 0x0000DB ; 59.063 2A, 0.858
040A03 DE 00 00    0872*       dl 0x0000DE ; 60.469 2B, 0.870
040A06 E1 00 00    0873*       dl 0x0000E1 ; 61.875 2C, 0.882
040A09 E4 00 00    0874*       dl 0x0000E4 ; 63.281 2D, 0.893
040A0C E7 00 00    0875*       dl 0x0000E7 ; 64.688 2E, 0.904
040A0F EA 00 00    0876*       dl 0x0000EA ; 66.094 2F, 0.914
040A12 EC 00 00    0877*       dl 0x0000EC ; 67.500 30, 0.924
040A15 EE 00 00    0878*       dl 0x0000EE ; 68.906 31, 0.933
040A18 F1 00 00    0879*       dl 0x0000F1 ; 70.313 32, 0.942
040A1B F3 00 00    0880*       dl 0x0000F3 ; 71.719 33, 0.950
040A1E F4 00 00    0881*       dl 0x0000F4 ; 73.125 34, 0.957
040A21 F6 00 00    0882*       dl 0x0000F6 ; 74.531 35, 0.964
040A24 F8 00 00    0883*       dl 0x0000F8 ; 75.938 36, 0.970
040A27 F9 00 00    0884*       dl 0x0000F9 ; 77.344 37, 0.976
040A2A FB 00 00    0885*       dl 0x0000FB ; 78.750 38, 0.981
040A2D FC 00 00    0886*       dl 0x0000FC ; 80.156 39, 0.985
040A30 FD 00 00    0887*       dl 0x0000FD ; 81.563 3A, 0.989
040A33 FE 00 00    0888*       dl 0x0000FE ; 82.969 3B, 0.992
040A36 FE 00 00    0889*       dl 0x0000FE ; 84.375 3C, 0.995
040A39 FF 00 00    0890*       dl 0x0000FF ; 85.781 3D, 0.997
040A3C FF 00 00    0891*       dl 0x0000FF ; 87.188 3E, 0.999
040A3F FF 00 00    0892*       dl 0x0000FF ; 88.594 3F, 1.000
040A42 00 01 00    0893*       dl 0x000100 ; 90.000 40, 1.000
040A45 FF 00 00    0894*       dl 0x0000FF ; 91.406 41, 1.000
040A48 FF 00 00    0895*       dl 0x0000FF ; 92.813 42, 0.999
040A4B FF 00 00    0896*       dl 0x0000FF ; 94.219 43, 0.997
040A4E FE 00 00    0897*       dl 0x0000FE ; 95.625 44, 0.995
040A51 FE 00 00    0898*       dl 0x0000FE ; 97.031 45, 0.992
040A54 FD 00 00    0899*       dl 0x0000FD ; 98.438 46, 0.989
040A57 FC 00 00    0900*       dl 0x0000FC ; 99.844 47, 0.985
040A5A FB 00 00    0901*       dl 0x0000FB ; 101.250 48, 0.981
040A5D F9 00 00    0902*       dl 0x0000F9 ; 102.656 49, 0.976
040A60 F8 00 00    0903*       dl 0x0000F8 ; 104.063 4A, 0.970
040A63 F6 00 00    0904*       dl 0x0000F6 ; 105.469 4B, 0.964
040A66 F4 00 00    0905*       dl 0x0000F4 ; 106.875 4C, 0.957
040A69 F3 00 00    0906*       dl 0x0000F3 ; 108.281 4D, 0.950
040A6C F1 00 00    0907*       dl 0x0000F1 ; 109.688 4E, 0.942
040A6F EE 00 00    0908*       dl 0x0000EE ; 111.094 4F, 0.933
040A72 EC 00 00    0909*       dl 0x0000EC ; 112.500 50, 0.924
040A75 EA 00 00    0910*       dl 0x0000EA ; 113.906 51, 0.914
040A78 E7 00 00    0911*       dl 0x0000E7 ; 115.313 52, 0.904
040A7B E4 00 00    0912*       dl 0x0000E4 ; 116.719 53, 0.893
040A7E E1 00 00    0913*       dl 0x0000E1 ; 118.125 54, 0.882
040A81 DE 00 00    0914*       dl 0x0000DE ; 119.531 55, 0.870
040A84 DB 00 00    0915*       dl 0x0000DB ; 120.938 56, 0.858
040A87 D8 00 00    0916*       dl 0x0000D8 ; 122.344 57, 0.845
040A8A D4 00 00    0917*       dl 0x0000D4 ; 123.750 58, 0.831
040A8D D1 00 00    0918*       dl 0x0000D1 ; 125.156 59, 0.818
040A90 CD 00 00    0919*       dl 0x0000CD ; 126.563 5A, 0.803
040A93 C9 00 00    0920*       dl 0x0000C9 ; 127.969 5B, 0.788
040A96 C5 00 00    0921*       dl 0x0000C5 ; 129.375 5C, 0.773
040A99 C1 00 00    0922*       dl 0x0000C1 ; 130.781 5D, 0.757
040A9C BD 00 00    0923*       dl 0x0000BD ; 132.188 5E, 0.741
040A9F B9 00 00    0924*       dl 0x0000B9 ; 133.594 5F, 0.724
040AA2 B5 00 00    0925*       dl 0x0000B5 ; 135.000 60, 0.707
040AA5 B0 00 00    0926*       dl 0x0000B0 ; 136.406 61, 0.690
040AA8 AB 00 00    0927*       dl 0x0000AB ; 137.813 62, 0.672
040AAB A7 00 00    0928*       dl 0x0000A7 ; 139.219 63, 0.653
040AAE A2 00 00    0929*       dl 0x0000A2 ; 140.625 64, 0.634
040AB1 9D 00 00    0930*       dl 0x00009D ; 142.031 65, 0.615
040AB4 98 00 00    0931*       dl 0x000098 ; 143.438 66, 0.596
040AB7 93 00 00    0932*       dl 0x000093 ; 144.844 67, 0.576
040ABA 8E 00 00    0933*       dl 0x00008E ; 146.250 68, 0.556
040ABD 88 00 00    0934*       dl 0x000088 ; 147.656 69, 0.535
040AC0 83 00 00    0935*       dl 0x000083 ; 149.063 6A, 0.514
040AC3 7E 00 00    0936*       dl 0x00007E ; 150.469 6B, 0.493
040AC6 78 00 00    0937*       dl 0x000078 ; 151.875 6C, 0.471
040AC9 73 00 00    0938*       dl 0x000073 ; 153.281 6D, 0.450
040ACC 6D 00 00    0939*       dl 0x00006D ; 154.688 6E, 0.428
040ACF 67 00 00    0940*       dl 0x000067 ; 156.094 6F, 0.405
040AD2 61 00 00    0941*       dl 0x000061 ; 157.500 70, 0.383
040AD5 5C 00 00    0942*       dl 0x00005C ; 158.906 71, 0.360
040AD8 56 00 00    0943*       dl 0x000056 ; 160.313 72, 0.337
040ADB 50 00 00    0944*       dl 0x000050 ; 161.719 73, 0.314
040ADE 4A 00 00    0945*       dl 0x00004A ; 163.125 74, 0.290
040AE1 44 00 00    0946*       dl 0x000044 ; 164.531 75, 0.267
040AE4 3E 00 00    0947*       dl 0x00003E ; 165.938 76, 0.243
040AE7 38 00 00    0948*       dl 0x000038 ; 167.344 77, 0.219
040AEA 31 00 00    0949*       dl 0x000031 ; 168.750 78, 0.195
040AED 2B 00 00    0950*       dl 0x00002B ; 170.156 79, 0.171
040AF0 25 00 00    0951*       dl 0x000025 ; 171.563 7A, 0.147
040AF3 1F 00 00    0952*       dl 0x00001F ; 172.969 7B, 0.122
040AF6 19 00 00    0953*       dl 0x000019 ; 174.375 7C, 0.098
040AF9 12 00 00    0954*       dl 0x000012 ; 175.781 7D, 0.074
040AFC 0C 00 00    0955*       dl 0x00000C ; 177.188 7E, 0.049
040AFF 06 00 00    0956*       dl 0x000006 ; 178.594 7F, 0.025
040B02 00 00 00    0957*       dl 0x000000 ; 180.000 80, 0.000
040B05 FA FF FF    0958*       dl 0xFFFFFA ; 181.406 81, -0.025
040B08 F4 FF FF    0959*       dl 0xFFFFF4 ; 182.813 82, -0.049
040B0B EE FF FF    0960*       dl 0xFFFFEE ; 184.219 83, -0.074
040B0E E7 FF FF    0961*       dl 0xFFFFE7 ; 185.625 84, -0.098
040B11 E1 FF FF    0962*       dl 0xFFFFE1 ; 187.031 85, -0.122
040B14 DB FF FF    0963*       dl 0xFFFFDB ; 188.438 86, -0.147
040B17 D5 FF FF    0964*       dl 0xFFFFD5 ; 189.844 87, -0.171
040B1A CF FF FF    0965*       dl 0xFFFFCF ; 191.250 88, -0.195
040B1D C8 FF FF    0966*       dl 0xFFFFC8 ; 192.656 89, -0.219
040B20 C2 FF FF    0967*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040B23 BC FF FF    0968*       dl 0xFFFFBC ; 195.469 8B, -0.267
040B26 B6 FF FF    0969*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040B29 B0 FF FF    0970*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040B2C AA FF FF    0971*       dl 0xFFFFAA ; 199.688 8E, -0.337
040B2F A4 FF FF    0972*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040B32 9F FF FF    0973*       dl 0xFFFF9F ; 202.500 90, -0.383
040B35 99 FF FF    0974*       dl 0xFFFF99 ; 203.906 91, -0.405
040B38 93 FF FF    0975*       dl 0xFFFF93 ; 205.313 92, -0.428
040B3B 8D FF FF    0976*       dl 0xFFFF8D ; 206.719 93, -0.450
040B3E 88 FF FF    0977*       dl 0xFFFF88 ; 208.125 94, -0.471
040B41 82 FF FF    0978*       dl 0xFFFF82 ; 209.531 95, -0.493
040B44 7D FF FF    0979*       dl 0xFFFF7D ; 210.938 96, -0.514
040B47 78 FF FF    0980*       dl 0xFFFF78 ; 212.344 97, -0.535
040B4A 72 FF FF    0981*       dl 0xFFFF72 ; 213.750 98, -0.556
040B4D 6D FF FF    0982*       dl 0xFFFF6D ; 215.156 99, -0.576
040B50 68 FF FF    0983*       dl 0xFFFF68 ; 216.563 9A, -0.596
040B53 63 FF FF    0984*       dl 0xFFFF63 ; 217.969 9B, -0.615
040B56 5E FF FF    0985*       dl 0xFFFF5E ; 219.375 9C, -0.634
040B59 59 FF FF    0986*       dl 0xFFFF59 ; 220.781 9D, -0.653
040B5C 55 FF FF    0987*       dl 0xFFFF55 ; 222.188 9E, -0.672
040B5F 50 FF FF    0988*       dl 0xFFFF50 ; 223.594 9F, -0.690
040B62 4B FF FF    0989*       dl 0xFFFF4B ; 225.000 A0, -0.707
040B65 47 FF FF    0990*       dl 0xFFFF47 ; 226.406 A1, -0.724
040B68 43 FF FF    0991*       dl 0xFFFF43 ; 227.813 A2, -0.741
040B6B 3F FF FF    0992*       dl 0xFFFF3F ; 229.219 A3, -0.757
040B6E 3B FF FF    0993*       dl 0xFFFF3B ; 230.625 A4, -0.773
040B71 37 FF FF    0994*       dl 0xFFFF37 ; 232.031 A5, -0.788
040B74 33 FF FF    0995*       dl 0xFFFF33 ; 233.438 A6, -0.803
040B77 2F FF FF    0996*       dl 0xFFFF2F ; 234.844 A7, -0.818
040B7A 2C FF FF    0997*       dl 0xFFFF2C ; 236.250 A8, -0.831
040B7D 28 FF FF    0998*       dl 0xFFFF28 ; 237.656 A9, -0.845
040B80 25 FF FF    0999*       dl 0xFFFF25 ; 239.063 AA, -0.858
040B83 22 FF FF    1000*       dl 0xFFFF22 ; 240.469 AB, -0.870
040B86 1F FF FF    1001*       dl 0xFFFF1F ; 241.875 AC, -0.882
040B89 1C FF FF    1002*       dl 0xFFFF1C ; 243.281 AD, -0.893
040B8C 19 FF FF    1003*       dl 0xFFFF19 ; 244.688 AE, -0.904
040B8F 16 FF FF    1004*       dl 0xFFFF16 ; 246.094 AF, -0.914
040B92 14 FF FF    1005*       dl 0xFFFF14 ; 247.500 B0, -0.924
040B95 12 FF FF    1006*       dl 0xFFFF12 ; 248.906 B1, -0.933
040B98 0F FF FF    1007*       dl 0xFFFF0F ; 250.313 B2, -0.942
040B9B 0D FF FF    1008*       dl 0xFFFF0D ; 251.719 B3, -0.950
040B9E 0C FF FF    1009*       dl 0xFFFF0C ; 253.125 B4, -0.957
040BA1 0A FF FF    1010*       dl 0xFFFF0A ; 254.531 B5, -0.964
040BA4 08 FF FF    1011*       dl 0xFFFF08 ; 255.938 B6, -0.970
040BA7 07 FF FF    1012*       dl 0xFFFF07 ; 257.344 B7, -0.976
040BAA 05 FF FF    1013*       dl 0xFFFF05 ; 258.750 B8, -0.981
040BAD 04 FF FF    1014*       dl 0xFFFF04 ; 260.156 B9, -0.985
040BB0 03 FF FF    1015*       dl 0xFFFF03 ; 261.563 BA, -0.989
040BB3 02 FF FF    1016*       dl 0xFFFF02 ; 262.969 BB, -0.992
040BB6 02 FF FF    1017*       dl 0xFFFF02 ; 264.375 BC, -0.995
040BB9 01 FF FF    1018*       dl 0xFFFF01 ; 265.781 BD, -0.997
040BBC 01 FF FF    1019*       dl 0xFFFF01 ; 267.188 BE, -0.999
040BBF 01 FF FF    1020*       dl 0xFFFF01 ; 268.594 BF, -1.000
040BC2 00 FF FF    1021*       dl 0xFFFF00 ; 270.000 C0, -1.000
040BC5 01 FF FF    1022*       dl 0xFFFF01 ; 271.406 C1, -1.000
040BC8 01 FF FF    1023*       dl 0xFFFF01 ; 272.813 C2, -0.999
040BCB 01 FF FF    1024*       dl 0xFFFF01 ; 274.219 C3, -0.997
040BCE 02 FF FF    1025*       dl 0xFFFF02 ; 275.625 C4, -0.995
040BD1 02 FF FF    1026*       dl 0xFFFF02 ; 277.031 C5, -0.992
040BD4 03 FF FF    1027*       dl 0xFFFF03 ; 278.438 C6, -0.989
040BD7 04 FF FF    1028*       dl 0xFFFF04 ; 279.844 C7, -0.985
040BDA 05 FF FF    1029*       dl 0xFFFF05 ; 281.250 C8, -0.981
040BDD 07 FF FF    1030*       dl 0xFFFF07 ; 282.656 C9, -0.976
040BE0 08 FF FF    1031*       dl 0xFFFF08 ; 284.063 CA, -0.970
040BE3 0A FF FF    1032*       dl 0xFFFF0A ; 285.469 CB, -0.964
040BE6 0C FF FF    1033*       dl 0xFFFF0C ; 286.875 CC, -0.957
040BE9 0D FF FF    1034*       dl 0xFFFF0D ; 288.281 CD, -0.950
040BEC 0F FF FF    1035*       dl 0xFFFF0F ; 289.688 CE, -0.942
040BEF 12 FF FF    1036*       dl 0xFFFF12 ; 291.094 CF, -0.933
040BF2 14 FF FF    1037*       dl 0xFFFF14 ; 292.500 D0, -0.924
040BF5 16 FF FF    1038*       dl 0xFFFF16 ; 293.906 D1, -0.914
040BF8 19 FF FF    1039*       dl 0xFFFF19 ; 295.313 D2, -0.904
040BFB 1C FF FF    1040*       dl 0xFFFF1C ; 296.719 D3, -0.893
040BFE 1F FF FF    1041*       dl 0xFFFF1F ; 298.125 D4, -0.882
040C01 22 FF FF    1042*       dl 0xFFFF22 ; 299.531 D5, -0.870
040C04 25 FF FF    1043*       dl 0xFFFF25 ; 300.938 D6, -0.858
040C07 28 FF FF    1044*       dl 0xFFFF28 ; 302.344 D7, -0.845
040C0A 2C FF FF    1045*       dl 0xFFFF2C ; 303.750 D8, -0.831
040C0D 2F FF FF    1046*       dl 0xFFFF2F ; 305.156 D9, -0.818
040C10 33 FF FF    1047*       dl 0xFFFF33 ; 306.563 DA, -0.803
040C13 37 FF FF    1048*       dl 0xFFFF37 ; 307.969 DB, -0.788
040C16 3B FF FF    1049*       dl 0xFFFF3B ; 309.375 DC, -0.773
040C19 3F FF FF    1050*       dl 0xFFFF3F ; 310.781 DD, -0.757
040C1C 43 FF FF    1051*       dl 0xFFFF43 ; 312.188 DE, -0.741
040C1F 47 FF FF    1052*       dl 0xFFFF47 ; 313.594 DF, -0.724
040C22 4B FF FF    1053*       dl 0xFFFF4B ; 315.000 E0, -0.707
040C25 50 FF FF    1054*       dl 0xFFFF50 ; 316.406 E1, -0.690
040C28 55 FF FF    1055*       dl 0xFFFF55 ; 317.813 E2, -0.672
040C2B 59 FF FF    1056*       dl 0xFFFF59 ; 319.219 E3, -0.653
040C2E 5E FF FF    1057*       dl 0xFFFF5E ; 320.625 E4, -0.634
040C31 63 FF FF    1058*       dl 0xFFFF63 ; 322.031 E5, -0.615
040C34 68 FF FF    1059*       dl 0xFFFF68 ; 323.438 E6, -0.596
040C37 6D FF FF    1060*       dl 0xFFFF6D ; 324.844 E7, -0.576
040C3A 72 FF FF    1061*       dl 0xFFFF72 ; 326.250 E8, -0.556
040C3D 78 FF FF    1062*       dl 0xFFFF78 ; 327.656 E9, -0.535
040C40 7D FF FF    1063*       dl 0xFFFF7D ; 329.063 EA, -0.514
040C43 82 FF FF    1064*       dl 0xFFFF82 ; 330.469 EB, -0.493
040C46 88 FF FF    1065*       dl 0xFFFF88 ; 331.875 EC, -0.471
040C49 8D FF FF    1066*       dl 0xFFFF8D ; 333.281 ED, -0.450
040C4C 93 FF FF    1067*       dl 0xFFFF93 ; 334.688 EE, -0.428
040C4F 99 FF FF    1068*       dl 0xFFFF99 ; 336.094 EF, -0.405
040C52 9F FF FF    1069*       dl 0xFFFF9F ; 337.500 F0, -0.383
040C55 A4 FF FF    1070*       dl 0xFFFFA4 ; 338.906 F1, -0.360
040C58 AA FF FF    1071*       dl 0xFFFFAA ; 340.313 F2, -0.337
040C5B B0 FF FF    1072*       dl 0xFFFFB0 ; 341.719 F3, -0.314
040C5E B6 FF FF    1073*       dl 0xFFFFB6 ; 343.125 F4, -0.290
040C61 BC FF FF    1074*       dl 0xFFFFBC ; 344.531 F5, -0.267
040C64 C2 FF FF    1075*       dl 0xFFFFC2 ; 345.938 F6, -0.243
040C67 C8 FF FF    1076*       dl 0xFFFFC8 ; 347.344 F7, -0.219
040C6A CF FF FF    1077*       dl 0xFFFFCF ; 348.750 F8, -0.195
040C6D D5 FF FF    1078*       dl 0xFFFFD5 ; 350.156 F9, -0.171
040C70 DB FF FF    1079*       dl 0xFFFFDB ; 351.563 FA, -0.147
040C73 E1 FF FF    1080*       dl 0xFFFFE1 ; 352.969 FB, -0.122
040C76 E7 FF FF    1081*       dl 0xFFFFE7 ; 354.375 FC, -0.098
040C79 EE FF FF    1082*       dl 0xFFFFEE ; 355.781 FD, -0.074
040C7C F4 FF FF    1083*       dl 0xFFFFF4 ; 357.188 FE, -0.049
040C7F FA FF FF    1084*       dl 0xFFFFFA ; 358.594 FF, -0.025
040C82 00 00 00    1085*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
040C85             1086*   
040C85             1087*   atan_lut_168:
040C85 00 00 00    1088*       dl 0x000000 ; 000000, 0.000
040C88 28 00 00    1089*       dl 0x000028 ; 000001, 0.224
040C8B 51 00 00    1090*       dl 0x000051 ; 000002, 0.448
040C8E 7A 00 00    1091*       dl 0x00007A ; 000003, 0.671
040C91 A2 00 00    1092*       dl 0x0000A2 ; 000004, 0.895
040C94 CB 00 00    1093*       dl 0x0000CB ; 000005, 1.119
040C97 F4 00 00    1094*       dl 0x0000F4 ; 000006, 1.343
040C9A 1D 01 00    1095*       dl 0x00011D ; 000007, 1.566
040C9D 45 01 00    1096*       dl 0x000145 ; 000008, 1.790
040CA0 6E 01 00    1097*       dl 0x00016E ; 000009, 2.013
040CA3 97 01 00    1098*       dl 0x000197 ; 00000A, 2.237
040CA6 BF 01 00    1099*       dl 0x0001BF ; 00000B, 2.460
040CA9 E8 01 00    1100*       dl 0x0001E8 ; 00000C, 2.684
040CAC 11 02 00    1101*       dl 0x000211 ; 00000D, 2.907
040CAF 39 02 00    1102*       dl 0x000239 ; 00000E, 3.130
040CB2 62 02 00    1103*       dl 0x000262 ; 00000F, 3.353
040CB5 8B 02 00    1104*       dl 0x00028B ; 000010, 3.576
040CB8 B3 02 00    1105*       dl 0x0002B3 ; 000011, 3.799
040CBB DC 02 00    1106*       dl 0x0002DC ; 000012, 4.022
040CBE 04 03 00    1107*       dl 0x000304 ; 000013, 4.245
040CC1 2D 03 00    1108*       dl 0x00032D ; 000014, 4.467
040CC4 55 03 00    1109*       dl 0x000355 ; 000015, 4.690
040CC7 7E 03 00    1110*       dl 0x00037E ; 000016, 4.912
040CCA A6 03 00    1111*       dl 0x0003A6 ; 000017, 5.134
040CCD CE 03 00    1112*       dl 0x0003CE ; 000018, 5.356
040CD0 F7 03 00    1113*       dl 0x0003F7 ; 000019, 5.578
040CD3 1F 04 00    1114*       dl 0x00041F ; 00001A, 5.799
040CD6 48 04 00    1115*       dl 0x000448 ; 00001B, 6.021
040CD9 70 04 00    1116*       dl 0x000470 ; 00001C, 6.242
040CDC 98 04 00    1117*       dl 0x000498 ; 00001D, 6.463
040CDF C0 04 00    1118*       dl 0x0004C0 ; 00001E, 6.684
040CE2 E8 04 00    1119*       dl 0x0004E8 ; 00001F, 6.905
040CE5 11 05 00    1120*       dl 0x000511 ; 000020, 7.125
040CE8 39 05 00    1121*       dl 0x000539 ; 000021, 7.345
040CEB 61 05 00    1122*       dl 0x000561 ; 000022, 7.565
040CEE 89 05 00    1123*       dl 0x000589 ; 000023, 7.785
040CF1 B1 05 00    1124*       dl 0x0005B1 ; 000024, 8.005
040CF4 D9 05 00    1125*       dl 0x0005D9 ; 000025, 8.224
040CF7 01 06 00    1126*       dl 0x000601 ; 000026, 8.443
040CFA 28 06 00    1127*       dl 0x000628 ; 000027, 8.662
040CFD 50 06 00    1128*       dl 0x000650 ; 000028, 8.881
040D00 78 06 00    1129*       dl 0x000678 ; 000029, 9.099
040D03 A0 06 00    1130*       dl 0x0006A0 ; 00002A, 9.317
040D06 C7 06 00    1131*       dl 0x0006C7 ; 00002B, 9.535
040D09 EF 06 00    1132*       dl 0x0006EF ; 00002C, 9.752
040D0C 16 07 00    1133*       dl 0x000716 ; 00002D, 9.970
040D0F 3E 07 00    1134*       dl 0x00073E ; 00002E, 10.187
040D12 65 07 00    1135*       dl 0x000765 ; 00002F, 10.403
040D15 8D 07 00    1136*       dl 0x00078D ; 000030, 10.620
040D18 B4 07 00    1137*       dl 0x0007B4 ; 000031, 10.836
040D1B DB 07 00    1138*       dl 0x0007DB ; 000032, 11.051
040D1E 03 08 00    1139*       dl 0x000803 ; 000033, 11.267
040D21 2A 08 00    1140*       dl 0x00082A ; 000034, 11.482
040D24 51 08 00    1141*       dl 0x000851 ; 000035, 11.697
040D27 78 08 00    1142*       dl 0x000878 ; 000036, 11.911
040D2A 9F 08 00    1143*       dl 0x00089F ; 000037, 12.125
040D2D C6 08 00    1144*       dl 0x0008C6 ; 000038, 12.339
040D30 ED 08 00    1145*       dl 0x0008ED ; 000039, 12.553
040D33 13 09 00    1146*       dl 0x000913 ; 00003A, 12.766
040D36 3A 09 00    1147*       dl 0x00093A ; 00003B, 12.978
040D39 61 09 00    1148*       dl 0x000961 ; 00003C, 13.191
040D3C 87 09 00    1149*       dl 0x000987 ; 00003D, 13.403
040D3F AE 09 00    1150*       dl 0x0009AE ; 00003E, 13.614
040D42 D4 09 00    1151*       dl 0x0009D4 ; 00003F, 13.825
040D45 FB 09 00    1152*       dl 0x0009FB ; 000040, 14.036
040D48 21 0A 00    1153*       dl 0x000A21 ; 000041, 14.247
040D4B 47 0A 00    1154*       dl 0x000A47 ; 000042, 14.457
040D4E 6D 0A 00    1155*       dl 0x000A6D ; 000043, 14.666
040D51 94 0A 00    1156*       dl 0x000A94 ; 000044, 14.876
040D54 BA 0A 00    1157*       dl 0x000ABA ; 000045, 15.085
040D57 E0 0A 00    1158*       dl 0x000AE0 ; 000046, 15.293
040D5A 05 0B 00    1159*       dl 0x000B05 ; 000047, 15.501
040D5D 2B 0B 00    1160*       dl 0x000B2B ; 000048, 15.709
040D60 51 0B 00    1161*       dl 0x000B51 ; 000049, 15.916
040D63 77 0B 00    1162*       dl 0x000B77 ; 00004A, 16.123
040D66 9C 0B 00    1163*       dl 0x000B9C ; 00004B, 16.329
040D69 C2 0B 00    1164*       dl 0x000BC2 ; 00004C, 16.535
040D6C E7 0B 00    1165*       dl 0x000BE7 ; 00004D, 16.740
040D6F 0C 0C 00    1166*       dl 0x000C0C ; 00004E, 16.945
040D72 32 0C 00    1167*       dl 0x000C32 ; 00004F, 17.150
040D75 57 0C 00    1168*       dl 0x000C57 ; 000050, 17.354
040D78 7C 0C 00    1169*       dl 0x000C7C ; 000051, 17.558
040D7B A1 0C 00    1170*       dl 0x000CA1 ; 000052, 17.761
040D7E C6 0C 00    1171*       dl 0x000CC6 ; 000053, 17.964
040D81 EB 0C 00    1172*       dl 0x000CEB ; 000054, 18.166
040D84 0F 0D 00    1173*       dl 0x000D0F ; 000055, 18.368
040D87 34 0D 00    1174*       dl 0x000D34 ; 000056, 18.569
040D8A 58 0D 00    1175*       dl 0x000D58 ; 000057, 18.770
040D8D 7D 0D 00    1176*       dl 0x000D7D ; 000058, 18.970
040D90 A1 0D 00    1177*       dl 0x000DA1 ; 000059, 19.170
040D93 C6 0D 00    1178*       dl 0x000DC6 ; 00005A, 19.370
040D96 EA 0D 00    1179*       dl 0x000DEA ; 00005B, 19.569
040D99 0E 0E 00    1180*       dl 0x000E0E ; 00005C, 19.767
040D9C 32 0E 00    1181*       dl 0x000E32 ; 00005D, 19.965
040D9F 56 0E 00    1182*       dl 0x000E56 ; 00005E, 20.163
040DA2 7A 0E 00    1183*       dl 0x000E7A ; 00005F, 20.360
040DA5 9E 0E 00    1184*       dl 0x000E9E ; 000060, 20.556
040DA8 C1 0E 00    1185*       dl 0x000EC1 ; 000061, 20.752
040DAB E5 0E 00    1186*       dl 0x000EE5 ; 000062, 20.947
040DAE 08 0F 00    1187*       dl 0x000F08 ; 000063, 21.142
040DB1 2C 0F 00    1188*       dl 0x000F2C ; 000064, 21.337
040DB4 4F 0F 00    1189*       dl 0x000F4F ; 000065, 21.531
040DB7 72 0F 00    1190*       dl 0x000F72 ; 000066, 21.724
040DBA 95 0F 00    1191*       dl 0x000F95 ; 000067, 21.917
040DBD B8 0F 00    1192*       dl 0x000FB8 ; 000068, 22.109
040DC0 DB 0F 00    1193*       dl 0x000FDB ; 000069, 22.301
040DC3 FE 0F 00    1194*       dl 0x000FFE ; 00006A, 22.493
040DC6 21 10 00    1195*       dl 0x001021 ; 00006B, 22.683
040DC9 44 10 00    1196*       dl 0x001044 ; 00006C, 22.874
040DCC 66 10 00    1197*       dl 0x001066 ; 00006D, 23.063
040DCF 89 10 00    1198*       dl 0x001089 ; 00006E, 23.253
040DD2 AB 10 00    1199*       dl 0x0010AB ; 00006F, 23.441
040DD5 CD 10 00    1200*       dl 0x0010CD ; 000070, 23.629
040DD8 EF 10 00    1201*       dl 0x0010EF ; 000071, 23.817
040DDB 11 11 00    1202*       dl 0x001111 ; 000072, 24.004
040DDE 33 11 00    1203*       dl 0x001133 ; 000073, 24.191
040DE1 55 11 00    1204*       dl 0x001155 ; 000074, 24.376
040DE4 77 11 00    1205*       dl 0x001177 ; 000075, 24.562
040DE7 99 11 00    1206*       dl 0x001199 ; 000076, 24.747
040DEA BA 11 00    1207*       dl 0x0011BA ; 000077, 24.931
040DED DC 11 00    1208*       dl 0x0011DC ; 000078, 25.115
040DF0 FD 11 00    1209*       dl 0x0011FD ; 000079, 25.298
040DF3 1E 12 00    1210*       dl 0x00121E ; 00007A, 25.481
040DF6 3F 12 00    1211*       dl 0x00123F ; 00007B, 25.663
040DF9 60 12 00    1212*       dl 0x001260 ; 00007C, 25.844
040DFC 81 12 00    1213*       dl 0x001281 ; 00007D, 26.025
040DFF A2 12 00    1214*       dl 0x0012A2 ; 00007E, 26.206
040E02 C3 12 00    1215*       dl 0x0012C3 ; 00007F, 26.386
040E05 E4 12 00    1216*       dl 0x0012E4 ; 000080, 26.565
040E08 04 13 00    1217*       dl 0x001304 ; 000081, 26.744
040E0B 25 13 00    1218*       dl 0x001325 ; 000082, 26.922
040E0E 45 13 00    1219*       dl 0x001345 ; 000083, 27.100
040E11 65 13 00    1220*       dl 0x001365 ; 000084, 27.277
040E14 85 13 00    1221*       dl 0x001385 ; 000085, 27.453
040E17 A5 13 00    1222*       dl 0x0013A5 ; 000086, 27.629
040E1A C5 13 00    1223*       dl 0x0013C5 ; 000087, 27.805
040E1D E5 13 00    1224*       dl 0x0013E5 ; 000088, 27.979
040E20 05 14 00    1225*       dl 0x001405 ; 000089, 28.154
040E23 24 14 00    1226*       dl 0x001424 ; 00008A, 28.327
040E26 44 14 00    1227*       dl 0x001444 ; 00008B, 28.501
040E29 63 14 00    1228*       dl 0x001463 ; 00008C, 28.673
040E2C 83 14 00    1229*       dl 0x001483 ; 00008D, 28.845
040E2F A2 14 00    1230*       dl 0x0014A2 ; 00008E, 29.017
040E32 C1 14 00    1231*       dl 0x0014C1 ; 00008F, 29.187
040E35 E0 14 00    1232*       dl 0x0014E0 ; 000090, 29.358
040E38 FF 14 00    1233*       dl 0x0014FF ; 000091, 29.527
040E3B 1E 15 00    1234*       dl 0x00151E ; 000092, 29.697
040E3E 3C 15 00    1235*       dl 0x00153C ; 000093, 29.865
040E41 5B 15 00    1236*       dl 0x00155B ; 000094, 30.033
040E44 79 15 00    1237*       dl 0x001579 ; 000095, 30.201
040E47 98 15 00    1238*       dl 0x001598 ; 000096, 30.368
040E4A B6 15 00    1239*       dl 0x0015B6 ; 000097, 30.534
040E4D D4 15 00    1240*       dl 0x0015D4 ; 000098, 30.700
040E50 F2 15 00    1241*       dl 0x0015F2 ; 000099, 30.865
040E53 10 16 00    1242*       dl 0x001610 ; 00009A, 31.030
040E56 2E 16 00    1243*       dl 0x00162E ; 00009B, 31.194
040E59 4C 16 00    1244*       dl 0x00164C ; 00009C, 31.357
040E5C 6A 16 00    1245*       dl 0x00166A ; 00009D, 31.520
040E5F 87 16 00    1246*       dl 0x001687 ; 00009E, 31.682
040E62 A5 16 00    1247*       dl 0x0016A5 ; 00009F, 31.844
040E65 C2 16 00    1248*       dl 0x0016C2 ; 0000A0, 32.005
040E68 DF 16 00    1249*       dl 0x0016DF ; 0000A1, 32.166
040E6B FC 16 00    1250*       dl 0x0016FC ; 0000A2, 32.326
040E6E 19 17 00    1251*       dl 0x001719 ; 0000A3, 32.486
040E71 36 17 00    1252*       dl 0x001736 ; 0000A4, 32.645
040E74 53 17 00    1253*       dl 0x001753 ; 0000A5, 32.803
040E77 70 17 00    1254*       dl 0x001770 ; 0000A6, 32.961
040E7A 8C 17 00    1255*       dl 0x00178C ; 0000A7, 33.118
040E7D A9 17 00    1256*       dl 0x0017A9 ; 0000A8, 33.275
040E80 C5 17 00    1257*       dl 0x0017C5 ; 0000A9, 33.431
040E83 E2 17 00    1258*       dl 0x0017E2 ; 0000AA, 33.587
040E86 FE 17 00    1259*       dl 0x0017FE ; 0000AB, 33.742
040E89 1A 18 00    1260*       dl 0x00181A ; 0000AC, 33.896
040E8C 36 18 00    1261*       dl 0x001836 ; 0000AD, 34.050
040E8F 52 18 00    1262*       dl 0x001852 ; 0000AE, 34.203
040E92 6E 18 00    1263*       dl 0x00186E ; 0000AF, 34.356
040E95 8A 18 00    1264*       dl 0x00188A ; 0000B0, 34.509
040E98 A5 18 00    1265*       dl 0x0018A5 ; 0000B1, 34.660
040E9B C1 18 00    1266*       dl 0x0018C1 ; 0000B2, 34.811
040E9E DC 18 00    1267*       dl 0x0018DC ; 0000B3, 34.962
040EA1 F7 18 00    1268*       dl 0x0018F7 ; 0000B4, 35.112
040EA4 13 19 00    1269*       dl 0x001913 ; 0000B5, 35.262
040EA7 2E 19 00    1270*       dl 0x00192E ; 0000B6, 35.410
040EAA 49 19 00    1271*       dl 0x001949 ; 0000B7, 35.559
040EAD 64 19 00    1272*       dl 0x001964 ; 0000B8, 35.707
040EB0 7F 19 00    1273*       dl 0x00197F ; 0000B9, 35.854
040EB3 99 19 00    1274*       dl 0x001999 ; 0000BA, 36.001
040EB6 B4 19 00    1275*       dl 0x0019B4 ; 0000BB, 36.147
040EB9 CE 19 00    1276*       dl 0x0019CE ; 0000BC, 36.293
040EBC E9 19 00    1277*       dl 0x0019E9 ; 0000BD, 36.438
040EBF 03 1A 00    1278*       dl 0x001A03 ; 0000BE, 36.582
040EC2 1D 1A 00    1279*       dl 0x001A1D ; 0000BF, 36.726
040EC5 37 1A 00    1280*       dl 0x001A37 ; 0000C0, 36.870
040EC8 51 1A 00    1281*       dl 0x001A51 ; 0000C1, 37.013
040ECB 6B 1A 00    1282*       dl 0x001A6B ; 0000C2, 37.155
040ECE 85 1A 00    1283*       dl 0x001A85 ; 0000C3, 37.297
040ED1 9F 1A 00    1284*       dl 0x001A9F ; 0000C4, 37.439
040ED4 B9 1A 00    1285*       dl 0x001AB9 ; 0000C5, 37.579
040ED7 D2 1A 00    1286*       dl 0x001AD2 ; 0000C6, 37.720
040EDA EC 1A 00    1287*       dl 0x001AEC ; 0000C7, 37.859
040EDD 05 1B 00    1288*       dl 0x001B05 ; 0000C8, 37.999
040EE0 1E 1B 00    1289*       dl 0x001B1E ; 0000C9, 38.137
040EE3 37 1B 00    1290*       dl 0x001B37 ; 0000CA, 38.276
040EE6 50 1B 00    1291*       dl 0x001B50 ; 0000CB, 38.413
040EE9 69 1B 00    1292*       dl 0x001B69 ; 0000CC, 38.550
040EEC 82 1B 00    1293*       dl 0x001B82 ; 0000CD, 38.687
040EEF 9B 1B 00    1294*       dl 0x001B9B ; 0000CE, 38.823
040EF2 B4 1B 00    1295*       dl 0x001BB4 ; 0000CF, 38.959
040EF5 CC 1B 00    1296*       dl 0x001BCC ; 0000D0, 39.094
040EF8 E5 1B 00    1297*       dl 0x001BE5 ; 0000D1, 39.228
040EFB FD 1B 00    1298*       dl 0x001BFD ; 0000D2, 39.362
040EFE 16 1C 00    1299*       dl 0x001C16 ; 0000D3, 39.496
040F01 2E 1C 00    1300*       dl 0x001C2E ; 0000D4, 39.629
040F04 46 1C 00    1301*       dl 0x001C46 ; 0000D5, 39.762
040F07 5E 1C 00    1302*       dl 0x001C5E ; 0000D6, 39.894
040F0A 76 1C 00    1303*       dl 0x001C76 ; 0000D7, 40.025
040F0D 8E 1C 00    1304*       dl 0x001C8E ; 0000D8, 40.156
040F10 A5 1C 00    1305*       dl 0x001CA5 ; 0000D9, 40.286
040F13 BD 1C 00    1306*       dl 0x001CBD ; 0000DA, 40.416
040F16 D5 1C 00    1307*       dl 0x001CD5 ; 0000DB, 40.546
040F19 EC 1C 00    1308*       dl 0x001CEC ; 0000DC, 40.675
040F1C 04 1D 00    1309*       dl 0x001D04 ; 0000DD, 40.803
040F1F 1B 1D 00    1310*       dl 0x001D1B ; 0000DE, 40.931
040F22 32 1D 00    1311*       dl 0x001D32 ; 0000DF, 41.059
040F25 49 1D 00    1312*       dl 0x001D49 ; 0000E0, 41.186
040F28 60 1D 00    1313*       dl 0x001D60 ; 0000E1, 41.312
040F2B 77 1D 00    1314*       dl 0x001D77 ; 0000E2, 41.438
040F2E 8E 1D 00    1315*       dl 0x001D8E ; 0000E3, 41.564
040F31 A5 1D 00    1316*       dl 0x001DA5 ; 0000E4, 41.689
040F34 BB 1D 00    1317*       dl 0x001DBB ; 0000E5, 41.814
040F37 D2 1D 00    1318*       dl 0x001DD2 ; 0000E6, 41.938
040F3A E9 1D 00    1319*       dl 0x001DE9 ; 0000E7, 42.061
040F3D FF 1D 00    1320*       dl 0x001DFF ; 0000E8, 42.184
040F40 15 1E 00    1321*       dl 0x001E15 ; 0000E9, 42.307
040F43 2C 1E 00    1322*       dl 0x001E2C ; 0000EA, 42.429
040F46 42 1E 00    1323*       dl 0x001E42 ; 0000EB, 42.551
040F49 58 1E 00    1324*       dl 0x001E58 ; 0000EC, 42.672
040F4C 6E 1E 00    1325*       dl 0x001E6E ; 0000ED, 42.793
040F4F 84 1E 00    1326*       dl 0x001E84 ; 0000EE, 42.913
040F52 99 1E 00    1327*       dl 0x001E99 ; 0000EF, 43.033
040F55 AF 1E 00    1328*       dl 0x001EAF ; 0000F0, 43.152
040F58 C5 1E 00    1329*       dl 0x001EC5 ; 0000F1, 43.271
040F5B DA 1E 00    1330*       dl 0x001EDA ; 0000F2, 43.390
040F5E F0 1E 00    1331*       dl 0x001EF0 ; 0000F3, 43.508
040F61 05 1F 00    1332*       dl 0x001F05 ; 0000F4, 43.625
040F64 1B 1F 00    1333*       dl 0x001F1B ; 0000F5, 43.742
040F67 30 1F 00    1334*       dl 0x001F30 ; 0000F6, 43.859
040F6A 45 1F 00    1335*       dl 0x001F45 ; 0000F7, 43.975
040F6D 5A 1F 00    1336*       dl 0x001F5A ; 0000F8, 44.091
040F70 6F 1F 00    1337*       dl 0x001F6F ; 0000F9, 44.206
040F73 84 1F 00    1338*       dl 0x001F84 ; 0000FA, 44.321
040F76 99 1F 00    1339*       dl 0x001F99 ; 0000FB, 44.435
040F79 AD 1F 00    1340*       dl 0x001FAD ; 0000FC, 44.549
040F7C C2 1F 00    1341*       dl 0x001FC2 ; 0000FD, 44.662
040F7F D7 1F 00    1342*       dl 0x001FD7 ; 0000FE, 44.775
040F82 EB 1F 00    1343*       dl 0x001FEB ; 0000FF, 44.888
040F85 00 20 00    1344*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
040F88             0036        include "fonts.inc"
040F88             0001*   fonts_load:
040F88 DD 21 5C 21 0002*       ld ix,font_list ; pointer to font list lookup
       04          
040F8D 06 07       0003*       ld b,num_fonts ; loop counter
040F8F             0004*   
040F8F             0005*   @load_loop:
040F8F C5          0006*       push bc ; save loop counter
040F90             0007*   
040F90             0008*   ; load font into a buffer
040F90 DD 27 06    0009*       ld hl,(ix+font_list_bufferId)
040F93 DD 31 09    0010*       ld iy,(ix+font_list_filename)
040F96 CD B4 14 04 0011*       call vdu_load_buffer_from_file
040F9A             0012*   
040F9A             0013*   ; create font from buffer
040F9A DD 27 06    0014*       ld hl,(ix+font_list_bufferId)
040F9D DD 5E 00    0015*       ld e,(ix+font_list_width)
040FA0 DD 56 03    0016*       ld d,(ix+font_list_height)
040FA3 3E 00       0017*       ld a,0 ; flags
040FA5 CD 37 16 04 0018*       call vdu_font_create
040FA9             0019*   
040FA9             0020*   ; select font
040FA9 DD 27 06    0021*       ld hl,(ix+font_list_bufferId)
040FAC 3E 01       0022*       ld a,1 ; flags
040FAE CD 1D 16 04 0023*       call vdu_font_select
040FB2             0024*   
040FB2             0025*   ; ; debug print filename
040FB2             0026*   ;     call printNewLine
040FB2             0027*   ;     ld hl,(ix+font_list_filename)
040FB2             0028*   ;     call printString
040FB2             0029*   
040FB2             0030*   ; advance font_list pointer to next record
040FB2 ED 32 0C    0031*       lea ix,ix+font_list_record_size
040FB5             0032*   
040FB5             0033*   ; restore loop counter
040FB5 C1          0034*       pop bc
040FB6 10 D7       0035*       djnz @load_loop
040FB8             0036*   
040FB8             0037*   ; all done
040FB8 C9          0038*       ret
040FB9             0037        include "images.inc"
040FB9             0001*   image_type: equ 0
040FB9             0002*   image_width: equ image_type+3
040FB9             0003*   image_height: equ image_width+3
040FB9             0004*   image_filesize: equ image_height+3
040FB9             0005*   image_filename: equ image_filesize+3
040FB9             0006*   image_bufferId: equ image_filename+3
040FB9             0007*   image_record_size: equ image_bufferId+3
040FB9             0008*   
040FB9 00 00 00    0009*   cur_image_list: dl 0
040FBC 00 00 00    0010*   cur_filename: dl 0
040FBF 00 00 00    0011*   cur_buffer_id: dl 0
040FC2             0012*   
040FC2             0013*   img_load_init:
040FC2             0014*   ; initialize logo's position parameters
040FC2 21 00 00 00 0015*       ld hl,0
040FC6 22 77 10 04 0016*       ld (logo_xvel),hl
040FCA 22 7A 10 04 0017*       ld (logo_xpos),hl
040FCE             0018*   ; begin 16.8 maths to determine logo's y position and velocity
040FCE 21 00 E0 00 0019*       ld hl,224*256
040FD2 22 80 10 04 0020*       ld (logo_ypos),hl
040FD6 EB          0021*       ex de,hl
040FD7 21 00 28 FF 0022*       ld hl,-240+24*256
040FDB             0023*       ; ld de,-256*[sprites_num_images+tiles_dg_num_images+ui_num_images]
040FDB 11 00 83 01 0024*       ld de,[sprites_num_images+tiles_dg_num_images+ui_num_images]*256
040FDF CD 5C 06 04 0025*       call sdiv168 ; ud.e = distance / num images = y velocity
040FE3 ED 53 7D 10 0026*       ld (logo_yvel),de
       04          
040FE8             0027*   ; all done
040FE8 C9          0028*       ret
040FE9             0029*   
040FE9             0030*   ; inputs: bc is the number of images to load, cur_image_list set
040FE9             0031*   img_load_main:
040FE9             0032*   ; back up loop counter
040FE9 C5          0033*       push bc
040FEA             0034*   
040FEA             0035*   ; load the next image
040FEA CD 21 10 04 0036*       call load_next_image
040FEE             0037*   
040FEE             0038*   ; plot the background
040FEE CD 87 12 04 0039*       call vdu_cls
040FF2 21 29 00 00 0040*       ld hl,BUF_SPLASH_BG
040FF6 CD 74 13 04 0041*       call vdu_buff_select
040FFA 01 00 00 00 0042*       ld bc,0
040FFE 11 00 00 00 0043*       ld de,0
041002 CD D0 16 04 0044*       call vdu_plot_bmp
041006             0045*   
041006             0046*   ; ; draw the most recently loaded image
041006             0047*   ; 	ld hl,(cur_buffer_id)
041006             0048*   ; 	call vdu_buff_select
041006             0049*   ; 	ld bc,0
041006             0050*   ; 	ld de,0
041006             0051*   ; 	call vdu_plot_bmp
041006             0052*   
041006             0053*   ; move logo
041006 CD 52 10 04 0054*       call move_logo
04100A             0055*   
04100A             0056*   ; print current filename
04100A 2A BC 0F 04 0057*       ld hl,(cur_filename)
04100E CD 63 00 04 0058*       call printString
041012             0059*   
041012             0060*   ; flip the framebuffer
041012             0061*       ; call vdu_flip
041012             0062*   
041012             0063*   ; decrement loop counter
041012 C1          0064*       pop bc
041013 0B          0065*       dec bc
041014 79          0066*       ld a,c
041015 B7          0067*       or a
041016 C2 E9 0F 04 0068*       jp nz,img_load_main
04101A 78          0069*       ld a,b
04101B B7          0070*       or a
04101C C2 E9 0F 04 0071*       jp nz,img_load_main
041020 C9          0072*       ret
041021             0073*   
041021             0074*   load_next_image:
041021 FD 2A B9 0F 0075*       ld iy,(cur_image_list)
       04          
041026 FD E5       0076*       push iy
041028 FD 7E 00    0077*       ld a,(iy+image_type) ; get image type
04102B FD 07 03    0078*       ld bc,(iy+image_width) ; get image width
04102E FD 17 06    0079*       ld de,(iy+image_height) ; get image height
041031 FD 31 09    0080*       ld ix,(iy+image_filesize) ; get image file size
041034 FD 27 0F    0081*       ld hl,(iy+image_bufferId) ; get image bufferId
041037 22 BF 0F 04 0082*       ld (cur_buffer_id),hl
04103B FD 37 0C    0083*       ld iy,(iy+image_filename) ; get image filename
04103E FD 22 BC 0F 0084*       ld (cur_filename),iy
       04          
041043 CD 92 14 04 0085*       call vdu_load_img
041047 FD E1       0086*       pop iy
041049 ED 33 12    0087*       lea iy,iy+image_record_size
04104C FD 22 B9 0F 0088*       ld (cur_image_list),iy
       04          
041051 C9          0089*       ret
041052             0090*   
041052             0091*   move_logo:
041052             0092*   ; activate logo bitmap
041052 21 2A 00 00 0093*       ld hl, BUF_SPLASH_LOGO
041056 CD 74 13 04 0094*       call vdu_buff_select
04105A             0095*   ; update position based on velocity parameters
04105A 2A 80 10 04 0096*       ld hl,(logo_ypos)
04105E ED 5B 7D 10 0097*       ld de,(logo_yvel)
       04          
041063 19          0098*       add hl,de
041064 22 80 10 04 0099*       ld (logo_ypos),hl
041068             0100*   ; draw logo
041068 ED 4B 7A 10 0101*       ld bc,(logo_xpos)
       04          
04106D ED 5B 80 10 0102*       ld de,(logo_ypos)
       04          
041072 CD EC 16 04 0103*       call vdu_plot_bmp168
041076 C9          0104*       ret
041077             0105*   
041077 00 00 00    0106*   logo_xvel: dl 0
04107A 00 00 00    0107*   logo_xpos: dl 0
04107D             0108*   
04107D 00 00 00    0109*   logo_yvel: dl 0
041080 00 00 00    0110*   logo_ypos: dl 0
041083             0111*   
041083             0112*   load_ui_images:
041083             0113*   ; initialize image loading variables
041083 21 72 5B 04 0114*       ld hl,ui_image_list
041087 22 B9 0F 04 0115*       ld (cur_image_list),hl
04108B             0116*   ; load images
04108B 06 2B       0117*       ld b,ui_num_images
04108D             0118*   @loop:
04108D C5          0119*       push bc
04108E CD 21 10 04 0120*       call load_next_image
041092 C1          0121*       pop bc
041093 10 F8       0122*       djnz @loop
041095 C9          0123*       ret
041096             0124*   ; end load_ui_images
041096             0125*   
041096             0126*   load_sprite_images:
041096             0127*   ; initialize image loading variables
041096 21 28 40 04 0128*       ld hl,sprites_image_list
04109A 22 B9 0F 04 0129*       ld (cur_image_list),hl
04109E 01 9D 00 00 0130*       ld bc,sprites_num_images
0410A2             0131*   ; load images
0410A2 CD E9 0F 04 0132*       call img_load_main
0410A6 C9          0133*       ret
0410A7             0134*   ; end load_sprite_images
0410A7             0135*   
0410A7             0136*   load_tilesets:
0410A7             0137*   ; initialize image loading variables
0410A7 21 AB 23 04 0138*       ld hl,tiles_dg_image_list
0410AB 22 B9 0F 04 0139*       ld (cur_image_list),hl
0410AF 01 BB 00 00 0140*       ld bc,tiles_dg_num_images
0410B3             0141*   ; load images
0410B3 CD E9 0F 04 0142*       call img_load_main
0410B7 C9          0143*       ret
0410B8             0144*   ; end load_tilesets
0410B8             0145*   
0410B8             0146*   load_backgrounds:
0410B8             0147*   ; initialize image loading variables
0410B8 21 7B 22 04 0148*       ld hl,bg_image_list
0410BC 22 B9 0F 04 0149*       ld (cur_image_list),hl
0410C0 01 08 00 00 0150*       ld bc,bg_num_images
0410C4             0151*   ; load images
0410C4 CD E9 0F 04 0152*       call img_load_main
0410C8 C9          0153*       ret
0410C9             0154*   ; end load_backgrounds
0410C9             0155*   
0410C9             0156*   ; ; initialize image loading variables
0410C9             0157*   ;     ld hl,tiles_xevious_image_list
0410C9             0158*   ;     ld (cur_image_list),hl
0410C9             0159*   ;     ld bc,tiles_xevious_num_images
0410C9             0160*   ; ; load images
0410C9             0161*   ;     call img_load_main
0410C9 C9          0162*       ret
0410CA             0038        include "timer.inc"
0410CA             0001*   ; Table 32. Timer Control Registers
0410CA             0002*   ; this constant is the base address of the timer control registers
0410CA             0003*   ; each timer takes three bytes:
0410CA             0004*   ;   0: control register
0410CA             0005*   ;   1: low byte of timer reset value
0410CA             0006*   ;   2: high byte of timer reset value
0410CA             0007*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0410CA             0008*   ; which correctly force the high and upper bytes of the address bus to zero
0410CA             0009*   TMR_CTL:     equ 80h
0410CA             0010*   
0410CA             0011*   ; Timer Control Register Bit Definitions
0410CA             0012*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0410CA             0013*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
0410CA             0014*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0410CA             0015*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
0410CA             0016*                               ; the TMRx_CTL register is read.
0410CA             0017*   
0410CA             0018*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0410CA             0019*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0410CA             0020*   
0410CA             0021*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0410CA             0022*                               ;  0,and counting stops when the end-of-count value is reached.
0410CA             0023*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0410CA             0024*                               ; written to the counter when the end-of-count value is reached.
0410CA             0025*   
0410CA             0026*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0410CA             0027*   CLK_DIV_256:  equ %00001100 ;
0410CA             0028*   CLK_DIV_64:   equ %00001000 ;
0410CA             0029*   CLK_DIV_16:   equ %00000100 ;
0410CA             0030*   CLK_DIV_4:    equ %00000000 ;
0410CA             0031*   
0410CA             0032*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0410CA             0033*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0410CA             0034*                               ; When a 1 is written to this bit,the values in the reload registers
0410CA             0035*                               ;  are loaded into the downcounter when the timer restarts. The
0410CA             0036*                               ; programmer must ensure that this bit is set to 1 each time
0410CA             0037*                               ; SINGLE-PASS mode is used.
0410CA             0038*   
0410CA             0039*   ; disable/enable the programmable reload timer
0410CA             0040*   PRT_EN_0:     equ %00000000 ;
0410CA             0041*   PRT_EN_1:     equ %00000001 ;
0410CA             0042*   
0410CA             0043*   ; Table 37. Timer Input Source Select Register
0410CA             0044*   ; Each of the 4 timers are allocated two bits of the 8-bit register
0410CA             0045*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0410CA             0046*   ;   00: System clock / CLK_DIV
0410CA             0047*   ;   01: RTC / CLK_DIV
0410CA             0048*   ;   NOTE: these are the values given in the manual,but it may be a typo
0410CA             0049*   ;   10: GPIO port B pin 1.
0410CA             0050*   ;   11: GPIO port B pin 1.
0410CA             0051*   TMR_ISS:   equ 92h ; register address
0410CA             0052*   
0410CA             0053*   ; Table 51. Real-Time Clock Control Register
0410CA             0054*   RTC_CTRL: equ EDh ; register address
0410CA             0055*   
0410CA             0056*   ; alarm interrupt disable/enable
0410CA             0057*   RTC_ALARM_0:    equ %00000000
0410CA             0058*   RTC_ALARM_1:    equ %10000000
0410CA             0059*   
0410CA             0060*   ; interrupt on alarm disable/enable
0410CA             0061*   RTC_INT_ENT_0:  equ %00000000
0410CA             0062*   RTC_INT_ENT_1:  equ %01000000
0410CA             0063*   
0410CA             0064*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0410CA             0065*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0410CA             0066*   
0410CA             0067*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0410CA             0068*                                   ; On-chip 32768 Hz oscillator is enabled.
0410CA             0069*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0410CA             0070*                                   ; On-chip 32768 Hz oscillator is disabled.
0410CA             0071*   
0410CA             0072*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0410CA             0073*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0410CA             0074*   
0410CA             0075*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0410CA             0076*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0410CA             0077*   
0410CA             0078*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0410CA             0079*                                   ; RTC counter is enabled.
0410CA             0080*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0410CA             0081*                                   ; RTC counter is disabled.
0410CA             0082*   
0410CA             0083*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0410CA             0084*   
0410CA             0085*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0410CA             0086*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0410CA 00 00 00    0087*   prt_reload: dl 0x000000
0410CD             0088*   
0410CD             0089*   ; set PRT timer
0410CD             0090*   prt_set:
0410CD 21 00 00 00 0091*       ld hl,0
0410D1 22 1B 11 04 0092*       ld (prt_irq_counter),hl
0410D5 2A CA 10 04 0093*       ld hl,(prt_reload)
0410D9 ED 29 84    0094*       out0 ($84),l
0410DC ED 21 85    0095*   	out0 ($85),h
0410DF             0096*   ; disable timer
0410DF 3E 06       0097*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0410E1 ED 39 83    0098*   	out0 ($83),a
0410E4             0099*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0410E4 3E 57       0100*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0410E6 ED 39 83    0101*   	out0 ($83),a
0410E9 C9          0102*       ret
0410EA             0103*   
0410EA             0104*   ; ===============================================
0410EA             0105*   ; PRT Timer Interrupt Handling
0410EA             0106*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0410EA             0107*   ; -----------------------------------------------
0410EA             0108*   prt_irq_init:
0410EA             0109*       ; set up interrupt vector table 2
0410EA 21 00 00 00 0110*   	ld hl,0
0410EE 3A 0C 01 00 0111*   	ld a,($10c)
0410F2 6F          0112*   	ld l,a
0410F3 3A 0D 01 00 0113*   	ld a,($10d)
0410F7 67          0114*   	ld h,a
0410F8             0115*   
0410F8             0116*   	; skip over CALL ($c3)
0410F8 23          0117*   	inc hl
0410F9             0118*   	; load address of jump into vector table 2 (in ram)
0410F9 ED 27       0119*   	ld hl,(hl)
0410FB             0120*   
0410FB             0121*   	; write CALL prt_irq_handler to vector table 2
0410FB 3E C3       0122*   	ld a,$c3
0410FD 77          0123*   	ld (hl),a
0410FE 23          0124*   	inc hl
0410FF 11 06 11 04 0125*   	ld de,prt_irq_handler
041103 ED 1F       0126*   	ld (hl),de
041105             0127*   
041105 C9          0128*       ret
041106             0129*   
041106             0130*   prt_irq_handler:
041106 F3          0131*   	di
041107 F5          0132*   	push af
041108 E5          0133*       push hl
041109 ED 38 83    0134*   	in0 a,($83)
04110C 2A 1B 11 04 0135*   	ld hl,(prt_irq_counter)
041110 23          0136*   	inc hl
041111 22 1B 11 04 0137*   	ld (prt_irq_counter),hl
041115 E1          0138*       pop hl
041116 F1          0139*   	pop af
041117 FB          0140*   	ei
041118 5B ED 4D    0141*   	reti.l
04111B             0142*   
04111B             0143*   prt_irq_counter:
04111B 00 00 00    0144*   	.dl 0
04111E             0145*   prt_irq_counter_saved:
04111E 00 00 00    0146*       .dl 0
041121             0147*   
041121             0148*   prt_loop_reset:
041121 E5          0149*       push hl
041122 21 00 00 00 0150*   	ld hl,0
041126 22 1B 11 04 0151*   	ld (prt_irq_counter),hl
04112A 22 8C 11 04 0152*       ld (prt_loop_counter),hl
04112E 22 8F 11 04 0153*       ld (prt_loops),hl
041132 CD CD 10 04 0154*       call prt_set
041136 E1          0155*       pop hl
041137 C9          0156*       ret
041138             0157*   
041138             0158*   prt_loop_start:
041138 E5          0159*       push hl
041139 21 00 00 00 0160*   	ld hl,0
04113D 22 1B 11 04 0161*   	ld (prt_irq_counter),hl
041141 E1          0162*       pop hl
041142 C9          0163*       ret
041143             0164*   
041143             0165*   prt_loop_stop:
041143 E5          0166*       push hl
041144 D5          0167*       push de
041145 2A 1B 11 04 0168*       ld hl,(prt_irq_counter)
041149 ED 5B 8C 11 0169*       ld de,(prt_loop_counter)
       04          
04114E 19          0170*       add hl,de
04114F 22 8C 11 04 0171*       ld (prt_loop_counter),hl
041153 21 00 00 00 0172*       ld hl,0
041157 22 1B 11 04 0173*       ld (prt_irq_counter),hl
04115B 2A 8F 11 04 0174*       ld hl,(prt_loops)
04115F 23          0175*       inc hl
041160 22 8F 11 04 0176*       ld (prt_loops),hl
041164 D1          0177*       pop de
041165 E1          0178*       pop hl
041166 C9          0179*       ret
041167             0180*   
041167             0181*   ; inputs: bc = y,x text coordinates to print
041167             0182*   prt_loop_print:
041167 F5          0183*       push af
041168 E5          0184*       push hl
041169 C5          0185*       push bc
04116A D5          0186*       push de
04116B DD E5       0187*       push ix
04116D FD E5       0188*       push iy
04116F CD 73 12 04 0189*       call vdu_move_cursor
041173             0190*   
041173 2A 8C 11 04 0191*       ld hl,(prt_loop_counter)
041177 CD AF 00 04 0192*       call printDec
04117B             0193*   
04117B 2A 8F 11 04 0194*       ld hl,(prt_loops)
04117F CD AF 00 04 0195*       call printDec
041183             0196*   
041183 FD E1       0197*       pop iy
041185 DD E1       0198*       pop ix
041187 D1          0199*       pop de
041188 C1          0200*       pop bc
041189 E1          0201*       pop hl
04118A F1          0202*       pop af
04118B C9          0203*       ret
04118C             0204*   
04118C             0205*   prt_loop_counter:
04118C 00 00 00    0206*       .dl 0
04118F             0207*   prt_loops:
04118F 00 00 00    0208*       .dl 0
041192             0209*   
041192             0210*   ; ===============================================
041192             0211*   ; Timer functions
041192             0212*   ; -----------------------------------------------
041192             0213*   ; set a countdown timer
041192             0214*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041192             0215*   ; returns: hl = current time
041192             0216*   tmr_set:
041192 FD 2F 03    0217*       ld (iy+3),hl            ; set time remaining
041195             0218*       MOSCALL mos_sysvars     ; ix points to syvars table
041195 3E 08       0001*M1 			LD	A, function
041197 5B CF       0002*M1 			RST.LIL	08h
041199 DD 27 00    0219*       ld hl,(ix+sysvar_time)  ; get current time
04119C FD 2F 00    0220*       ld (iy+0),hl            ; set start time
04119F C9          0221*       ret
0411A0             0222*   
0411A0             0223*   ; gets time remaining on a countdown timer
0411A0             0224*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0411A0             0225*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0411A0             0226*   ;          sign flags: pos = time not expired,zero or neg = time expired
0411A0             0227*   tmr_get:
0411A0             0228*       MOSCALL mos_sysvars     ; ix points to syvars table
0411A0 3E 08       0001*M1 			LD	A, function
0411A2 5B CF       0002*M1 			RST.LIL	08h
0411A4 DD 17 00    0229*       ld de,(ix+sysvar_time)  ; get current time
0411A7 FD 27 00    0230*       ld hl,(iy+0)            ; get start time
0411AA AF          0231*       xor a                   ; clear carry
0411AB ED 52       0232*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0411AD FD 17 03    0233*       ld de,(iy+3)            ; get timer set value
0411B0 AF          0234*       xor a                   ; clear carry
0411B1 ED 5A       0235*       adc hl,de               ; hl = time remaining
0411B3             0236*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0411B3 C9          0237*       ret
0411B4             0238*   
0411B4             0239*   tmr_test: ds 6 ; example of a buffer to hold timer data
0411BA             0240*   
       FF FF FF FF 
       FF FF 
0411BA 00 00 00    0241*   timestamp_now: dl 0
0411BD 00 00 00    0242*   timestamp_old: dl 0
0411C0 00 00 00    0243*   timestamp_chg: dl 0
0411C3             0244*   
0411C3             0245*   ; update the global timestamp from the system clock
0411C3             0246*   ; inputs: none
0411C3             0247*   ; returns: hl = time elapsed in 1/120ths of a second
0411C3             0248*   ;          ix = pointer to syvars table
0411C3             0249*   ; destroys: af,hl,de,ix
0411C3             0250*   timestamp_tick:
0411C3 ED 5B BA 11 0251*       ld de,(timestamp_now)   ; get previous time
       04          
0411C8 ED 53 BD 11 0252*       ld (timestamp_old),de   ; save previous time
       04          
0411CD             0253*       MOSCALL mos_sysvars     ; ix points to syvars table
0411CD 3E 08       0001*M1 			LD	A, function
0411CF 5B CF       0002*M1 			RST.LIL	08h
0411D1 DD 27 00    0254*       ld hl,(ix+sysvar_time)  ; get current time
0411D4 22 BA 11 04 0255*       ld (timestamp_now),hl   ; save current time
0411D8 AF          0256*       xor a                   ; clear carry
0411D9 ED 52       0257*       sbc hl,de               ; hl = time elapsed
0411DB 22 C0 11 04 0258*       ld (timestamp_chg),hl   ; save elapsed time
0411DF C9          0259*       ret
0411E0             0260*   
0411E0             0261*   ; set a countdown timer
0411E0             0262*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0411E0             0263*   ; requires: timestamp_tick to be called at least once before this function
0411E0             0264*   ; returns: hl = current time
0411E0             0265*   ; destroys: hl
0411E0             0266*   timestamp_tmr_set:
0411E0 FD 2F 03    0267*       ld (iy+3),hl            ; set time remaining
0411E3 2A BA 11 04 0268*       ld hl,(timestamp_now)   ; get current timestamp
0411E7 FD 2F 00    0269*       ld (iy+0),hl            ; set start time
0411EA C9          0270*       ret
0411EB             0271*   
0411EB             0272*   ; gets time remaining on a countdown timer following the global timestamp
0411EB             0273*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0411EB             0274*   ; requires: timestamp_tick to be called at least once before this function
0411EB             0275*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0411EB             0276*   ;          sign flags: pos = time not expired,zero or neg = time expired
0411EB             0277*   ; destroys: af,hl,de
0411EB             0278*   timestamp_tmr_get:
0411EB ED 5B BA 11 0279*       ld de,(timestamp_now)   ; get current timestamp
       04          
0411F0 FD 27 00    0280*       ld hl,(iy+0)            ; get start time
0411F3 AF          0281*       xor a                   ; clear carry
0411F4 ED 52       0282*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0411F6 FD 17 03    0283*       ld de,(iy+3)            ; get timer set value
0411F9 AF          0284*       xor a                   ; clear carry
0411FA ED 5A       0285*       adc hl,de               ; hl = time remaining
0411FC             0286*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0411FC C9          0287*       ret
0411FD             0288*   
0411FD             0289*   ; set a stopwatch
0411FD             0290*   ; returns: hl = start time
0411FD             0291*   ; destroys: hl,ix
0411FD             0292*   stopwatch_set:
0411FD             0293*       MOSCALL mos_sysvars     ; ix points to syvars table
0411FD 3E 08       0001*M1 			LD	A, function
0411FF 5B CF       0002*M1 			RST.LIL	08h
041201 DD 27 00    0294*       ld hl,(ix+sysvar_time)  ; get current time
041204 22 19 12 04 0295*       ld (stopwatch_started),hl            ; set start time
041208 C9          0296*       ret
041209             0297*   
041209             0298*   ; gets time elapsed on a stopwatch
041209             0299*   ; returns: hl = time elapsed in 1/120ths of a second
041209             0300*   ; destroys: af,hl,de,ix
041209             0301*   stopwatch_get:
041209             0302*       MOSCALL mos_sysvars     ; ix points to syvars table
041209 3E 08       0001*M1 			LD	A, function
04120B 5B CF       0002*M1 			RST.LIL	08h
04120D DD 27 00    0303*       ld hl,(ix+sysvar_time)  ; get current time
041210 ED 5B 19 12 0304*       ld de,(stopwatch_started)            ; get start time
       04          
041215 AF          0305*       xor a                   ; clear carry
041216 ED 52       0306*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041218 C9          0307*       ret
041219             0308*   
041219             0309*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04121C             0310*   
04121C             0311*   ; ------------------
04121C             0312*   ; delay routine
04121C             0313*   ; Author: Richard Turrnidge
04121C             0314*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
04121C             0315*   ; routine waits a fixed time,then returns
04121C             0316*   ; arrive with A =  the delay byte. One bit to be set only.
04121C             0317*   ; eg. ld A,00000100b
04121C             0318*   
04121C             0319*   multiPurposeDelay:
       FF FF FF 
04121C F5          0320*       push af
04121D C5          0321*       push bc
04121E DD E5       0322*       push ix
041220 47          0323*       ld b,a
041221 3E 08       0324*       ld a,$08
041223 5B CF       0325*       RST.LIL	08h                 ; get IX pointer to sysvars
041225             0326*   
041225             0327*   waitLoop:
041225             0328*   
041225 DD 7E 00    0329*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041228             0330*   
041228             0331*                                   ;   we check if bit set is same as last time we checked.
041228             0332*                                   ;   bit 0 - don't use
041228             0333*                                   ;   bit 1 - changes 64 times per second
041228             0334*                                   ;   bit 2 - changes 32 times per second
041228             0335*                                   ;   bit 3 - changes 16 times per second
041228             0336*   
041228             0337*                                   ;   bit 4 - changes 8 times per second
041228             0338*                                   ;   bit 5 - changes 4 times per second
041228             0339*                                   ;   bit 6 - changes 2 times per second
041228             0340*                                   ;   bit 7 - changes 1 times per second
041228 A0          0341*       and b
041229 4F          0342*       ld c,a
04122A 3A 3B 12 04 0343*       ld a,(oldTimeStamp)
04122E B9          0344*       cp c                        ; is A same as last value?
04122F 28 F4       0345*       jr z,waitLoop              ; loop here if it is
041231 79          0346*       ld a,c
041232 32 3B 12 04 0347*       ld (oldTimeStamp),a        ; set new value
041236             0348*   
041236 DD E1       0349*       pop ix
041238 C1          0350*       pop bc
041239 F1          0351*       pop af
04123A C9          0352*       ret
04123B             0353*   
04123B 00          0354*   oldTimeStamp:   .db 00h
04123C             0039        include "vdu.inc"
04123C             0001*   ; VDU 30: Home cursor
04123C             0002*   vdu_home_cursor:
04123C 3E 1E       0003*       ld a,30
04123E 5B D7       0004*   	rst.lil $10
041240 C9          0005*   	ret
041241             0006*   
041241             0007*   vdu_cursor_on:
041241 21 4C 12 04 0008*   	ld hl,@cmd
041245 01 03 00 00 0009*   	ld bc,@end-@cmd
041249 5B DF       0010*   	rst.lil $18
04124B C9          0011*   	ret
04124C             0012*   @cmd:
04124C 17 01 01    0013*   	db 23,1,1
04124F             0014*   @end:
04124F             0015*   
04124F             0016*   vdu_cursor_off:
04124F 21 5A 12 04 0017*   	ld hl,@cmd
041253 01 03 00 00 0018*   	ld bc,@end-@cmd
041257 5B DF       0019*   	rst.lil $18
041259 C9          0020*   	ret
04125A             0021*   @cmd:
04125A 17 01 00    0022*   	db 23,1,0
04125D             0023*   @end:
04125D             0024*   
04125D             0025*   ; VDU 5: Write text at graphics cursor
04125D             0026*   ; inputs: a is the character to write to the screen
04125D             0027*   ; prerequisites: the graphics cursor at the intended position on screen
04125D             0028*   ; outputs: see the name of the function
04125D             0029*   ; destroys: a, hl, bc
04125D             0030*   vdu_char_to_gfx_cursor:
04125D 32 6D 12 04 0031*   	ld (@arg),a
041261 21 6C 12 04 0032*   	ld hl,@cmd
041265 01 02 00 00 0033*   	ld bc,@end-@cmd
041269 5B DF       0034*   	rst.lil $18
04126B C9          0035*   	ret
04126C 05          0036*   @cmd: db 5
04126D 00          0037*   @arg: db 0
04126E             0038*   @end:
04126E             0039*   ; VDU 9: Move cursor forward one character
04126E             0040*   vdu_cursor_forward:
04126E 3E 09       0041*       ld a,9
041270 5B D7       0042*   	rst.lil $10
041272 C9          0043*   	ret
041273             0044*   
041273             0045*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041273             0046*   ; inputs: c=x, b=y 8-bit unsigned integers
041273             0047*   vdu_move_cursor:
041273 ED 43 84 12 0048*       ld (@x0),bc
       04          
041278 21 83 12 04 0049*   	ld hl,@cmd
04127C 01 03 00 00 0050*   	ld bc,@end-@cmd
041280 5B DF       0051*   	rst.lil $18
041282 C9          0052*   	ret
041283 1F          0053*   @cmd: 	db 31
041284 00          0054*   @x0:	db 0
041285 00          0055*   @y0: 	db 0
041286 00          0056*   @end: 	db 0 ; padding
041287             0057*   
041287             0058*   ; VDU 12: Clear text area (CLS)
041287             0059*   vdu_cls:
041287 3E 0C       0060*       ld a,12
041289 5B D7       0061*   	rst.lil $10
04128B C9          0062*   	ret
04128C             0063*   
04128C             0064*   vdu_flip:
04128C 21 97 12 04 0065*   	ld hl,@cmd
041290 01 03 00 00 0066*   	ld bc,@end-@cmd
041294 5B DF       0067*   	rst.lil $18
041296 C9          0068*   	ret
041297 17 00 C3    0069*   @cmd: db 23,0,0xC3
04129A             0070*   @end:
04129A             0071*   
04129A             0072*   ; VDU 16: Clear graphics area (CLG)
04129A             0073*   vdu_clg:
04129A 3E 10       0074*       ld a,16
04129C 5B D7       0075*   	rst.lil $10
04129E C9          0076*   	ret
04129F             0077*   
04129F             0078*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04129F             0079*   ; VDU 23, 7: Scrolling
04129F             0080*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04129F             0081*   ; inputs: a, extent; l, direction; h; speed
04129F             0082*   vdu_scroll_down:
04129F 32 B4 12 04 0083*   	ld (@extent),a
0412A3 22 B5 12 04 0084*   	ld (@dir),hl ; implicitly populates @speed
0412A7 21 B2 12 04 0085*   	ld hl,@cmd
0412AB 01 05 00 00 0086*   	ld bc,@end-@cmd
0412AF 5B DF       0087*   	rst.lil $18     ;; Sending command to VDP
0412B1 C9          0088*   	ret
0412B2 17 07       0089*   @cmd:       db 23,7
0412B4 00          0090*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
0412B5 00          0091*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
0412B6 00          0092*   @speed:     db 0x00 ; pixels
0412B7 00          0093*   @end:		db 0x00 ; padding
0412B8             0094*   
0412B8             0095*   ; COLOUR MODES
0412B8             0096*   ; Mode	Effect
0412B8             0097*   ; 0	Set on-screen pixel to target colour value
0412B8             0098*   ; 1	OR value with the on-screen pixel
0412B8             0099*   ; 2	AND value with the on-screen pixel
0412B8             0100*   ; 3	XOR value with the on-screen pixel
0412B8             0101*   ; 4	Invert the on-screen pixel
0412B8             0102*   ; 5	No operation
0412B8             0103*   ; 6	AND the inverse of the specified colour with the on-screen pixel
0412B8             0104*   ; 7	OR the inverse of the specified colour with the on-screen pixel
0412B8             0105*   
0412B8             0106*   ; VDU 17, colour: Define text colour (COLOUR)
0412B8             0107*   vdu_colour_text:
0412B8 32 C8 12 04 0108*   	ld (@arg),a
0412BC 21 C7 12 04 0109*   	ld hl,@cmd
0412C0 01 02 00 00 0110*   	ld bc,@end-@cmd
0412C4 5B DF       0111*   	rst.lil $18
0412C6 C9          0112*   	ret
0412C7 11          0113*   @cmd: db 17
0412C8 00          0114*   @arg: db 0
0412C9             0115*   @end:
0412C9             0116*   
0412C9             0117*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0412C9             0118*   ; inputs: a=mode, c=colour (add 128 to set background colour)
0412C9             0119*   vdu_gcol:
0412C9 32 DE 12 04 0120*   	ld (@mode),a
0412CD 79          0121*       ld a,c
0412CE 32 DF 12 04 0122*       ld (@col),a
0412D2 21 DD 12 04 0123*   	ld hl,@cmd
0412D6 01 03 00 00 0124*   	ld bc,@end-@cmd
0412DA 5B DF       0125*   	rst.lil $18
0412DC C9          0126*   	ret
0412DD 12          0127*   @cmd:  db 18
0412DE 00          0128*   @mode: db 0
0412DF 00          0129*   @col:  db 0
0412E0             0130*   @end:
0412E0             0131*   
0412E0             0132*   
0412E0             0133*   ; VDU 28, left, bottom, right, top: Set text viewport **
0412E0             0134*   ; MIND THE LITTLE-ENDIANESS
0412E0             0135*   ; inputs: c=left,b=bottom,e=right,d=top
0412E0             0136*   ; outputs; nothing
0412E0             0137*   ; destroys: a might make it out alive
0412E0             0138*   vdu_set_txt_viewport:
0412E0 ED 43 F6 12 0139*       ld (@lb),bc
       04          
0412E5 ED 53 F8 12 0140*   	ld (@rt),de
       04          
0412EA 21 F5 12 04 0141*   	ld hl,@cmd
0412EE 01 05 00 00 0142*   	ld bc,@end-@cmd
0412F2 5B DF       0143*   	rst.lil $18
0412F4 C9          0144*   	ret
0412F5 1C          0145*   @cmd:   db 28 ; set text viewport command
0412F6 00 00       0146*   @lb: 	dw 0x0000 ; set by bc
0412F8 00 00       0147*   @rt: 	dw 0x0000 ; set by de
0412FA 00          0148*   @end:   db 0x00	  ; padding
0412FB             0149*   
0412FB             0150*   ; Wait for VBLANK interrupt
0412FB             0151*   vdu_vblank:
0412FB DD E5       0152*       PUSH 	IX
0412FD             0153*   	MOSCALL	mos_sysvars
0412FD 3E 08       0001*M1 			LD	A, function
0412FF 5B CF       0002*M1 			RST.LIL	08h
041301 DD 7E 00    0154*   	LD	A, (IX + sysvar_time + 0)
041304             0155*   @wait:
041304 DD BE 00    0156*       CP 	A, (IX + sysvar_time + 0)
041307 28 FB       0157*       JR	Z, @wait
041309 DD E1       0158*       POP	IX
04130B C9          0159*       RET
04130C             0160*   
04130C             0161*   ; VDU 29, x; y;: Set graphics origin
04130C             0162*   ; This command sets the graphics origin.
04130C             0163*   ; The origin is the point on the screen where the coordinates (0,0) are located.
04130C             0164*   ; inputs: bc=x0,de=y0
04130C             0165*   ; outputs; nothing
04130C             0166*   ; destroys: a might make it out alive
04130C             0167*   vdu_set_gfx_origin:
04130C ED 43 22 13 0168*       ld (@x0),bc
       04          
041311 ED 53 24 13 0169*       ld (@y0),de
       04          
041316 21 21 13 04 0170*       ld hl,@cmd
04131A 01 05 00 00 0171*       ld bc,@end-@cmd
04131E 5B DF       0172*       rst.lil $18
041320 C9          0173*       ret
041321 1D          0174*   @cmd:   db 29 ; set graphics origin command
041322 00 00       0175*   @x0: 	dw 0x0000 ; set by bc
041324 00 00       0176*   @y0: 	dw 0x0000 ; set by de
041326 00          0177*   @end:   db 0x00	  ; padding
041327             0178*   
041327             0179*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
041327             0180*   ; NOTE: the order of the y-coordinate parameters are inverted
041327             0181*   ; 	because we have turned off logical screen scaling
041327             0182*   ; NOTE: coordinates are relative to current gfx origin
041327             0183*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041327             0184*   ; outputs; nothing
041327             0185*   ; destroys: a might make it out alive
041327             0186*   vdu_set_gfx_viewport:
041327 ED 43 47 13 0187*       ld (@x0),bc
       04          
04132C FD 22 49 13 0188*       ld (@y1),iy
       04          
041331 DD 22 4B 13 0189*   	ld (@x1),ix
       04          
041336 ED 53 4D 13 0190*   	ld (@y0),de
       04          
04133B 21 46 13 04 0191*   	ld hl,@cmd
04133F 01 09 00 00 0192*   	ld bc,@end-@cmd
041343 5B DF       0193*   	rst.lil $18
041345 C9          0194*   	ret
041346 18          0195*   @cmd:   db 24 ; set graphics viewport command
041347 00 00       0196*   @x0: 	dw 0x0000 ; set by bc
041349 00 00       0197*   @y1: 	dw 0x0000 ; set by iy
04134B 00 00       0198*   @x1: 	dw 0x0000 ; set by ix
04134D 00 00       0199*   @y0: 	dw 0x0000 ; set by de
04134F 00          0200*   @end:   db 0x00	  ; padding
041350             0201*   
041350             0202*   ; SCREEN MODES
041350             0203*   ; ===============================
041350             0204*   ; Mode  Horz  Vert  Cols  Refresh
041350             0205*   ; ---   ----  ----  ----  -------
041350             0206*   ; 11    320   240   2     60hz
041350             0207*   ; 139   320   240   2     60hz
041350             0208*   ; 23    512   384   2     60hz
041350             0209*   ; 151   512   384   2     60hz
041350             0210*   ; 6     640   240   2     60hz
041350             0211*   ; 134   640   240   2     60hz
041350             0212*   ; 2     640   480   2     60hz
041350             0213*   ; 130   640   480   2     60hz
041350             0214*   ; 17    800   600   2     60hz
041350             0215*   ; 145   800   600   2     60hz
041350             0216*   ; 18    1024  768   2     60hz
041350             0217*   ; 146   1024  768   2     60hz
041350             0218*   ; ---   ----  ----  ----  -------
041350             0219*   ; 10    320   240   4     60hz
041350             0220*   ; 138   320   240   4     60hz
041350             0221*   ; 22    512   384   4     60hz
041350             0222*   ; 150   512   384   4     60hz
041350             0223*   ; 5     640   240   4     60hz
041350             0224*   ; 133   640   240   4     60hz
041350             0225*   ; 1     640   480   4     60hz
041350             0226*   ; 129   640   480   4     60hz
041350             0227*   ; 16    800   600   4     60hz
041350             0228*   ; 19    1024  768   4     60hz
041350             0229*   ; ---   ----  ----  ----  -------
041350             0230*   ; 9     320   240   16    60hz
041350             0231*   ; 137   320   240   16    60hz
041350             0232*   ; 21    512   384   16    60hz
041350             0233*   ; 149   512   384   16    60hz
041350             0234*   ; 4     640   240   16    60hz
041350             0235*   ; 132   640   240   16    60hz
041350             0236*   ; 0     640   480   16    60hz
041350             0237*   ; 7     n/a   n/a   16    60hz
041350             0238*   ; ---   ----  ----  ----  -------
041350             0239*   ; 8     320   240   64    60hz
041350             0240*   ; 136   320   240   64    60hz
041350             0241*   ; 20    512   384   64    60hz
041350             0242*   ; 3     640   240   64    60hz
041350             0243*   ; ---   ----  ----  ----  -------
041350             0244*   vdu_set_screen_mode:
041350 32 60 13 04 0245*   	ld (@arg),a
041354 21 5F 13 04 0246*   	ld hl,@cmd
041358 01 02 00 00 0247*   	ld bc,@end-@cmd
04135C 5B DF       0248*   	rst.lil $18
04135E C9          0249*   	ret
04135F 16          0250*   @cmd: db 22 ; set screen mode
041360 00          0251*   @arg: db 0  ; screen mode parameter
041361             0252*   @end:
041361             0253*   
041361             0254*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041361             0255*   ; inputs: a is scaling mode, 1=on, 0=off
041361             0256*   ; note: default setting on boot is scaling ON
041361             0257*   vdu_set_scaling:
041361 32 73 13 04 0258*   	ld (@arg),a
041365 21 70 13 04 0259*   	ld hl,@cmd
041369 01 04 00 00 0260*   	ld bc,@end-@cmd
04136D 5B DF       0261*   	rst.lil $18
04136F C9          0262*   	ret
041370 17 00 C0    0263*   @cmd: db 23,0,0xC0
041373 00          0264*   @arg: db 0  ; scaling on/off
041374             0265*   @end:
041374             0266*   
041374             0267*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041374             0268*   ; inputs: hl=bufferId
041374             0269*   vdu_buff_select:
041374 22 86 13 04 0270*   	ld (@bufferId),hl
041378 21 83 13 04 0271*   	ld hl,@cmd
04137C 01 05 00 00 0272*   	ld bc,@end-@cmd
041380 5B DF       0273*   	rst.lil $18
041382 C9          0274*   	ret
041383 17 1B 20    0275*   @cmd: db 23,27,0x20
041386 00 00       0276*   @bufferId: dw 0x0000
041388 00          0277*   @end: db 0x00 ; padding
041389             0278*   
041389             0279*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041389             0280*   ; inputs: a=format; bc=width; de=height
041389             0281*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041389             0282*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041389             0283*   ; 0 	RGBA8888 (4-bytes per pixel)
041389             0284*   ; 1 	RGBA2222 (1-bytes per pixel)
041389             0285*   ; 2 	Mono/Mask (1-bit per pixel)
041389             0286*   ; 3 	Reserved for internal use by VDP (“native” format)
041389             0287*   vdu_bmp_create:
041389 ED 43 A5 13 0288*       ld (@width),bc
       04          
04138E ED 53 A7 13 0289*       ld (@height),de
       04          
041393 32 A9 13 04 0290*       ld (@fmt),a
041397 21 A2 13 04 0291*   	ld hl,@cmd
04139B 01 08 00 00 0292*   	ld bc,@end-@cmd
04139F 5B DF       0293*   	rst.lil $18
0413A1 C9          0294*   	ret
0413A2 17 1B 21    0295*   @cmd:       db 23,27,0x21
0413A5 00 00       0296*   @width:     dw 0x0000
0413A7 00 00       0297*   @height:    dw 0x0000
0413A9 00          0298*   @fmt:       db 0x00
0413AA             0299*   @end:
0413AA             0300*   
0413AA             0301*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0413AA             0302*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0413AA             0303*   vdu_load_img_rgba2_to_8:
0413AA             0304*   ; backup the target buffer id and image dimensions
0413AA E5          0305*       push hl
0413AB D5          0306*       push de
0413AC C5          0307*       push bc
0413AD             0308*   ; load the rgba2 image to working buffer 65534
0413AD 21 FE FF 00 0309*       ld hl,65534 ; temporary working buffer id
0413B1 CD B4 14 04 0310*   	call vdu_load_buffer_from_file
0413B5             0311*   ; restore the image dimensions and target buffer id
0413B5 C1          0312*       pop bc
0413B6 D1          0313*       pop de
0413B7 E1          0314*       pop hl
0413B8             0315*   ; fall through to vdu_rgba2_to_8
0413B8             0316*   
0413B8             0317*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0413B8             0318*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0413B8             0319*   ; the "expand bitmap" command is:
0413B8             0320*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0413B8             0321*   ; and then to reverse the byte order to fix endian-ness:
0413B8             0322*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0413B8             0323*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0413B8             0324*   ; VDU 23,27,&20,targetBufferID%;
0413B8             0325*   ; VDU 23,27,&21,width%;height%;0
0413B8             0326*   ; -------------------------------------------------------------------
0413B8             0327*   ; inputs: bc,de image width,height ; hl = targetBufferId
0413B8             0328*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0413B8             0329*   vdu_rgba2_to_8:
0413B8             0330*   ; load the image dimensions and buffer id parameters
0413B8 ED 43 14 14 0331*       ld (@width),bc
       04          
0413BD ED 53 16 14 0332*       ld (@height),de
       04          
0413C2 22 F9 13 04 0333*       ld (@bufferId0),hl
0413C6 22 06 14 04 0334*       ld (@bufferId2),hl
0413CA 22 0F 14 04 0335*       ld (@bufferId1),hl
0413CE             0336*   ; clean up bytes that got stomped on by the ID loads
0413CE 3E 48       0337*       ld a,0x48
0413D0 32 FB 13 04 0338*       ld (@bufferId0+2),a
0413D4 3E 17       0339*       ld a,23
0413D6 32 11 14 04 0340*       ld (@bufferId1+2),a
0413DA 3E 18       0341*       ld a,24
0413DC 32 08 14 04 0342*       ld (@bufferId2+2),a
0413E0 AF          0343*       xor a
0413E1 32 18 14 04 0344*       ld (@height+2),a
0413E5             0345*   ; send the vdu command strings
0413E5 21 F0 13 04 0346*       ld hl,@beg
0413E9 01 29 00 00 0347*       ld bc,@end-@beg
0413ED 5B DF       0348*       rst.lil $18
0413EF C9          0349*       ret
0413F0             0350*   @beg:
0413F0             0351*   ; Command 14: Consolidate blocks in a buffer
0413F0             0352*   ; VDU 23, 0, &A0, bufferId; 14
0413F0 17 00 A0    0353*       db 23,0,0xA0
0413F3 FE FF       0354*       dw 65534 ; workingBufferId
0413F5 0E          0355*       db 14 ; consolidate blocks
0413F6             0356*   ; the "expand bitmap" command is:
0413F6             0357*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0413F6 17 00 A0    0358*       db 23,0,0xA0
0413F9 00 00       0359*   @bufferId0: dw 0x0000 ; targetBufferId
0413FB 48          0360*       db 0x48 ; given as decimal command 72 in the docs
0413FC 02          0361*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0413FD FE FF       0362*       dw 65534 ; sourceBufferId
0413FF 00 7F BF FF 0363*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041403             0364*   ; reverse the byte order to fix endian-ness:
041403             0365*   ; Command 24: Reverse the order of data of blocks within a buffer
041403             0366*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041403             0367*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041403 17 00 A0    0368*       db 23,0,0xA0
041406 00 00       0369*   @bufferId2:    dw 0x0000 ; targetBufferId
041408 18          0370*       db 24 ; reverse byte order
041409 04          0371*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
04140A 04 00       0372*       dw 4 ; size (4 bytes)
04140C             0373*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
04140C             0374*   ; VDU 23,27,&20,targetBufferID%;
04140C 17 1B 20    0375*       db 23,27,0x20 ; select bitmap
04140F 00 00       0376*   @bufferId1: dw 0x0000 ; targetBufferId
041411             0377*   ; VDU 23,27,&21,width%;height%;0
041411 17 1B 21    0378*       db 23,27,0x21 ; create bitmap from buffer
041414 00 00       0379*   @width: dw 0x0000
041416 00 00       0380*   @height: dw 0x0000
041418 00          0381*       db 0x00 ; rgba8888 format
041419             0382*   @end:
041419             0383*   
041419             0384*   ; scratch variables
041419 00 00 00    0385*   bufferId0: dl 0x000000
04141C 00 00 00    0386*   bufferId1: dl 0x000000
04141F             0387*   
04141F             0388*   ; load a vdu buffer from local memory
04141F             0389*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
04141F             0390*   vdu_load_buffer:
04141F ED 43 48 14 0391*       ld (@length),bc
       04          
041424 D5          0392*       push de ; save data pointer
041425             0393*   ; send the vdu command string
041425 7D          0394*       ld a,l
041426 32 45 14 04 0395*       ld (@bufferId),a
04142A 7C          0396*       ld a,h
04142B 32 46 14 04 0397*       ld (@bufferId+1),a
04142F 21 42 14 04 0398*       ld hl,@cmd
041433 01 08 00 00 0399*       ld bc,@end-@cmd
041437 5B DF       0400*       rst.lil $18
041439             0401*   ; send the buffer data
041439 E1          0402*       pop hl ; pointer to data
04143A ED 4B 48 14 0403*       ld bc,(@length)
       04          
04143F 5B DF       0404*       rst.lil $18 ; send it
041441 C9          0405*       ret
041442             0406*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041442 17 00 A0    0407*   @cmd:       db 23,0,0xA0
041445 00 00       0408*   @bufferId:	dw 0x0000
041447 00          0409*   		    db 0 ; load buffer
041448 00 00       0410*   @length:	dw 0x0000
04144A 00          0411*   @end: db 0 ; padding
04144B             0412*   
04144B             0413*   ; clear a buffer
04144B             0414*   ; inputs: hl = bufferId
04144B             0415*   vdu_clear_buffer:
04144B 7D          0416*       ld a,l
04144C 32 63 14 04 0417*       ld (@bufferId),a
041450 7C          0418*       ld a,h
041451 32 64 14 04 0419*       ld (@bufferId+1),a
041455 21 60 14 04 0420*       ld hl,@cmd
041459 01 06 00 00 0421*       ld bc,@end-@cmd
04145D 5B DF       0422*       rst.lil $18
04145F C9          0423*       ret
041460 17 00 A0    0424*   @cmd:       db 23,0,0xA0
041463 00 00       0425*   @bufferId:	dw 0x0000
041465 02          0426*   		    db 2 ; clear buffer
041466             0427*   @end:
041466             0428*   
041466             0429*   vdu_clear_all_buffers:
041466             0430*   ; clear all buffers
041466 21 71 14 04 0431*       ld hl,@beg
04146A 01 06 00 00 0432*       ld bc,@end-@beg
04146E 5B DF       0433*       rst.lil $18
041470 C9          0434*       ret
041471 17 00 A0    0435*   @beg: db 23,0,$A0
041474 FF FF       0436*         dw -1 ; clear all buffers
041476 02          0437*         db 2  ; command 2: clear a buffer
041477             0438*   @end:
041477             0439*   
041477             0440*   ; Command 14: Consolidate blocks in a buffer
041477             0441*   vdu_consolidate_buffer:
041477             0442*   ; set parameters for vdu call
041477 7D          0443*       ld a,l
041478 32 8F 14 04 0444*       ld (@bufferId),a
04147C 7C          0445*       ld a,h
04147D 32 90 14 04 0446*       ld (@bufferId+1),a
041481 21 8C 14 04 0447*       ld hl,@beg
041485 01 06 00 00 0448*       ld bc,@end-@beg
041489 5B DF       0449*       rst.lil $18
04148B C9          0450*       ret
04148C             0451*   ; VDU 23, 0, &A0, bufferId; 14
04148C 17 00 A0    0452*   @beg: db 23,0,0xA0
04148F 00 00       0453*   @bufferId: dw 0x0000
041491 0E          0454*              db 14
041492             0455*   @end:
041492             0456*   
041492             0457*   ; load an image file to a buffer and make it a bitmap
041492             0458*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041492             0459*   vdu_load_img:
041492             0460*   ; back up image type and dimension parameters
041492 22 19 14 04 0461*       ld (bufferId0),hl
041496 F5          0462*       push af
041497 C5          0463*   	push bc
041498 D5          0464*   	push de
041499             0465*   ; load the image
041499 CD B4 14 04 0466*   	call vdu_load_buffer_from_file
04149D             0467*   ; now make it a bitmap
04149D 2A 19 14 04 0468*       ld hl,(bufferId0)
0414A1 CD 77 14 04 0469*       call vdu_consolidate_buffer
0414A5 2A 19 14 04 0470*       ld hl,(bufferId0)
0414A9 CD 74 13 04 0471*       call vdu_buff_select
0414AD D1          0472*   	pop de ; image height
0414AE C1          0473*   	pop bc ; image width
0414AF F1          0474*   	pop af ; image type
0414B0 C3 89 13 04 0475*   	jp vdu_bmp_create ; will return to caller from there
0414B4             0476*   
0414B4             0477*   ; inputs: hl = bufferId; iy = pointer to filename
0414B4             0478*   vdu_load_buffer_from_file:
0414B4 22 19 14 04 0479*       ld (bufferId0),hl
0414B8             0480*   
0414B8             0481*   ; clear target buffer
0414B8 CD 4B 14 04 0482*       call vdu_clear_buffer
0414BC             0483*   
0414BC             0484*   ; open the file in read mode
0414BC             0485*   ; Open a file
0414BC             0486*   ; HLU: Filename
0414BC             0487*   ;   C: Mode
0414BC             0488*   ; Returns:
0414BC             0489*   ;   A: Filehandle, or 0 if couldn't open
0414BC FD E5       0490*   	push iy ; pointer to filename
0414BE E1          0491*   	pop hl
0414BF 0E 01       0492*   	ld c,fa_read
0414C1             0493*       MOSCALL mos_fopen
0414C1 3E 0A       0001*M1 			LD	A, function
0414C3 5B CF       0002*M1 			RST.LIL	08h
0414C5 32 00 15 04 0494*       ld (@filehandle),a
0414C9             0495*   
0414C9             0496*   @read_file:
0414C9             0497*   ; Read a block of data from a file
0414C9             0498*   ;   C: Filehandle
0414C9             0499*   ; HLU: Pointer to where to write the data to
0414C9             0500*   ; DEU: Number of bytes to read
0414C9             0501*   ; Returns:
0414C9             0502*   ; DEU: Number of bytes read
0414C9 3A 00 15 04 0503*       ld a,(@filehandle)
0414CD 4F          0504*       ld c,a
0414CE 21 00 E0 B7 0505*       ld hl,filedata
0414D2 11 00 20 00 0506*       ld de,8192 ; max we can read into onboard sram at one time
0414D6             0507*       MOSCALL mos_fread
0414D6 3E 1A       0001*M1 			LD	A, function
0414D8 5B CF       0002*M1 			RST.LIL	08h
0414DA             0508*   
0414DA             0509*   ; test de for zero bytes read
0414DA 21 00 00 00 0510*       ld hl,0
0414DE AF          0511*       xor a ; clear carry
0414DF ED 52       0512*       sbc hl,de
0414E1 CA F7 14 04 0513*       jp z,@close_file
0414E5             0514*   
0414E5             0515*   ; load a vdu buffer from local memory
0414E5             0516*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0414E5 2A 19 14 04 0517*       ld hl,(bufferId0)
0414E9 D5          0518*       push de ; chunksize
0414EA C1          0519*       pop bc
0414EB 11 00 E0 B7 0520*       ld de,filedata
0414EF CD 1F 14 04 0521*       call vdu_load_buffer
0414F3             0522*   
0414F3             0523*   ; read the next block
0414F3 C3 C9 14 04 0524*       jp @read_file
0414F7             0525*   
0414F7             0526*   ; close the file
0414F7             0527*   @close_file:
0414F7 3A 00 15 04 0528*       ld a,(@filehandle)
0414FB             0529*       MOSCALL mos_fclose
0414FB 3E 0B       0001*M1 			LD	A, function
0414FD 5B CF       0002*M1 			RST.LIL	08h
0414FF C9          0530*       ret ; vdu_load_buffer_from_file
041500             0531*   
041500 00          0532*   @filehandle: db 0 ; file handle
041501 00 00 00    0533*   @fil: dl 0 ; pointer to FIL struct
041504             0534*   
041504 00 00 00    0535*   @chunkpointer: dl 0 ; pointer to current chunk
041507             0536*   
041507             0537*   ; File information structure (FILINFO)
041507             0538*   @filinfo:
041507 00 00 00 00 0539*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
04150B 00 00       0540*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
04150D 00 00       0541*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
04150F 00          0542*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041510 00 00 00 00 0543*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
04151D 00 00 00 00 0544*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04161D             0040        include "vdu_fonts.inc"
04161D             0001*   ; select font
04161D             0002*   ; inputs: hl = bufferId, a = font flags
04161D             0003*   ; Flags:
04161D             0004*   ; Bit	Description
04161D             0005*   ; 0	Adjust cursor position to ensure text baseline is aligned
04161D             0006*   ;   0: Do not adjust cursor position (best for changing font on a new line)
04161D             0007*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
04161D             0008*   ; 1-7	Reserved for future use
04161D             0009*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
04161D             0010*   vdu_font_select:
04161D 22 34 16 04 0011*       ld (@bufferId),hl
041621 32 36 16 04 0012*       ld (@flags),a
041625 21 30 16 04 0013*       ld hl,@cmd
041629 01 07 00 00 0014*       ld bc,@end-@cmd
04162D 5B DF       0015*       rst.lil $18
04162F C9          0016*       ret
041630 17 00 95 00 0017*   @cmd: db 23, 0, 0x95, 0
041634 00 00       0018*   @bufferId: dw 0x0000
041636 00          0019*   @flags: db 0x00
041637             0020*   @end:
041637             0021*   
041637             0022*   ; create font from buffer
041637             0023*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041637             0024*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041637             0025*   vdu_font_create:
041637 22 5C 16 04 0026*       ld (@bufferId),hl
04163B ED 53 5E 16 0027*       ld (@width),de ; also loads height
       04          
041640 32 61 16 04 0028*       ld (@flags),a
041644 7A          0029*       ld a,d ; height
041645 32 60 16 04 0030*       ld (@ascent),a ; ascent = height
041649             0031*   ; consolidate buffer
041649 CD 77 14 04 0032*       call vdu_consolidate_buffer
04164D             0033*   ; create font
04164D 21 58 16 04 0034*       ld hl,@cmd
041651 01 0A 00 00 0035*       ld bc,@end-@cmd
041655 5B DF       0036*       rst.lil $18
041657 C9          0037*       ret
041658 17 00 95 01 0038*   @cmd: db 23, 0, 0x95, 1
04165C 00 00       0039*   @bufferId: dw 0x0000
04165E 00          0040*   @width: db 0x00
04165F 00          0041*   @height: db 0x00
041660 00          0042*   @ascent: db 0x00
041661 00          0043*   @flags: db 0x00
041662             0044*   @end:
041662             0045*   
041662             0046*   ; set or adjust font property
041662             0047*   ; inputs: hl = bufferId, a = field, de = value
041662             0048*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041662             0049*   vdu_font_property:
041662 22 7E 16 04 0050*       ld (@bufferId),hl
041666 32 80 16 04 0051*       ld (@field),a
04166A ED 53 81 16 0052*       ld (@value),de
       04          
04166F 21 7A 16 04 0053*       ld hl,@cmd
041673 01 09 00 00 0054*       ld bc,@end-@cmd
041677 5B DF       0055*       rst.lil $18
041679 C9          0056*       ret
04167A 17 00 95 02 0057*   @cmd: db 23, 0, 0x95, 2
04167E 00 00       0058*   @bufferId: dw 0x0000
041680 00          0059*   @field: db 0x00
041681 00 00       0060*   @value: dw 0x0000
041683 00          0061*   @end: db 0x00 ; padding
041684             0062*   
041684             0063*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041684             0064*   
041684             0065*   ; Clear/Delete font
041684             0066*   ; inputs: hl = bufferId
041684             0067*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041684             0068*   vdu_font_clear:
041684 22 97 16 04 0069*       ld (@bufferId),hl
041688 21 93 16 04 0070*       ld hl,@cmd
04168C 01 06 00 00 0071*       ld bc,@end-@cmd
041690 5B DF       0072*       rst.lil $18
041692 C9          0073*       ret
041693 17 00 95 04 0074*   @cmd: db 23, 0, 0x95, 4
041697 00 00       0075*   @bufferId: dw 0x0000
041699 00          0076*   @end: db 0x00 ; padding
04169A             0077*   
04169A             0078*   ; Copy system font to buffer
04169A             0079*   ; inputs: hl = bufferId
04169A             0080*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
04169A             0081*   vdu_font_copy_system:
04169A 22 AD 16 04 0082*       ld (@bufferId),hl
04169E 21 A9 16 04 0083*       ld hl,@cmd
0416A2 01 06 00 00 0084*       ld bc,@end-@cmd
0416A6 5B DF       0085*       rst.lil $18
0416A8 C9          0086*       ret
0416A9 17 00 95 05 0087*   @cmd: db 23, 0, 0x95, 5
0416AD 00 00       0088*   @bufferId: dw 0x0000
0416AF 00          0089*   @end: db 0x00 ; padding
0416B0             0041        include "vdu_plot.inc"
0416B0             0001*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0416B0             0002*   ; PLOT code 	(Decimal) 	Effect
0416B0             0003*   ; &00-&07 	0-7 	Solid line, includes both ends
0416B0             0004*   plot_sl_both: equ 0x00
0416B0             0005*   
0416B0             0006*   ; &08-&0F 	8-15 	Solid line, final point omitted
0416B0             0007*   plot_sl_first: equ 0x08
0416B0             0008*   
0416B0             0009*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0416B0             0010*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0416B0             0011*   
0416B0             0012*   ; &20-&27 	32-39 	Solid line, first point omitted
0416B0             0013*   plot_sl_last: equ 0x20
0416B0             0014*   
0416B0             0015*   ; &28-&2F 	40-47 	Solid line, both points omitted
0416B0             0016*   plot_sl_none: equ 0x28
0416B0             0017*   
0416B0             0018*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0416B0             0019*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0416B0             0020*   
0416B0             0021*   ; &40-&47 	64-71 	Point plot
0416B0             0022*   plot_pt: equ 0x40
0416B0             0023*   
0416B0             0024*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0416B0             0025*   plot_lf_lr_non_bg: equ 0x48
0416B0             0026*   
0416B0             0027*   ; &50-&57 	80-87 	Triangle fill
0416B0             0028*   plot_tf: equ 0x50
0416B0             0029*   
0416B0             0030*   ; &58-&5F 	88-95 	Line fill right to background §§
0416B0             0031*   plot_lf_r_bg: equ 0x58
0416B0             0032*   
0416B0             0033*   ; &60-&67 	96-103 	Rectangle fill
0416B0             0034*   plot_rf: equ 0x60
0416B0             0035*   
0416B0             0036*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0416B0             0037*   plot_lf_lr_fg: equ 0x60
0416B0             0038*   
0416B0             0039*   ; &70-&77 	112-119 	Parallelogram fill
0416B0             0040*   plot_pf: equ 0x70
0416B0             0041*   
0416B0             0042*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0416B0             0043*   plot_lf_r_non_fg: equ 0x78
0416B0             0044*   
0416B0             0045*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
0416B0             0046*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0416B0             0047*   
0416B0             0048*   ; &90-&97 	144-151 	Circle outline
0416B0             0049*   plot_co: equ 0x90
0416B0             0050*   
0416B0             0051*   ; &98-&9F 	152-159 	Circle fill
0416B0             0052*   plot_cf: equ 0x98
0416B0             0053*   
0416B0             0054*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
0416B0             0055*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
0416B0             0056*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
0416B0             0057*   
0416B0             0058*   ; &B8-&BF 	184-191 	Rectangle copy/move
0416B0             0059*   plot_rcm: equ 0xB8
0416B0             0060*   
0416B0             0061*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0416B0             0062*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0416B0             0063*   ; &D0-&D7 	208-215 	Not defined
0416B0             0064*   ; &D8-&DF 	216-223 	Not defined
0416B0             0065*   ; &E0-&E7 	224-231 	Not defined
0416B0             0066*   
0416B0             0067*   ; &E8-&EF 	232-239 	Bitmap plot §
0416B0             0068*   plot_bmp: equ 0xE8
0416B0             0069*   
0416B0             0070*   ; &F0-&F7 	240-247 	Not defined
0416B0             0071*   ; &F8-&FF 	248-255 	Not defined
0416B0             0072*   
0416B0             0073*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0416B0             0074*   ; Agon Console8 VDP 2.2.0
0416B0             0075*   
0416B0             0076*   ; Within each group of eight plot codes, the effects are as follows:
0416B0             0077*   ; Plot code 	Effect
0416B0             0078*   ; 0 	Move relative
0416B0             0079*   mv_rel: equ 0
0416B0             0080*   
0416B0             0081*   ; 1 	Plot relative in current foreground colour
0416B0             0082*   dr_rel_fg: equ 1
0416B0             0083*   
0416B0             0084*   ; 2 	Not supported (Plot relative in logical inverse colour)
0416B0             0085*   ; 3 	Plot relative in current background colour
0416B0             0086*   dr_rel_bg: equ 3
0416B0             0087*   
0416B0             0088*   ; 4 	Move absolute
0416B0             0089*   mv_abs: equ 4
0416B0             0090*   
0416B0             0091*   ; 5 	Plot absolute in current foreground colour
0416B0             0092*   dr_abs_fg: equ 5
0416B0             0093*   
0416B0             0094*   ; 6 	Not supported (Plot absolute in logical inverse colour)
0416B0             0095*   ; 7 	Plot absolute in current background colour
0416B0             0096*   dr_abs_bg: equ 7
0416B0             0097*   
0416B0             0098*   ; Codes 0-3 use the position data provided as part of the command
0416B0             0099*   ; as a relative position, adding the position given to the current
0416B0             0100*   ; graphical cursor position. Codes 4-7 use the position data provided
0416B0             0101*   ; as part of the command as an absolute position, setting the current
0416B0             0102*   ; graphical cursor position to the position given.
0416B0             0103*   
0416B0             0104*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0416B0             0105*   ; current pixel colour. These operations cannot currently be supported
0416B0             0106*   ; by the graphics system the Agon VDP uses, so these codes are not
0416B0             0107*   ; supported. Support for these codes may be added in a future version
0416B0             0108*   ; of the VDP firmware.
0416B0             0109*   
0416B0             0110*   ; 16 colour palette constants
0416B0             0111*   c_black: equ 0
0416B0             0112*   c_red_dk: equ 1
0416B0             0113*   c_green_dk: equ 2
0416B0             0114*   c_yellow_dk: equ 3
0416B0             0115*   c_blue_dk: equ 4
0416B0             0116*   c_magenta_dk: equ 5
0416B0             0117*   c_cyan_dk: equ 6
0416B0             0118*   c_grey: equ 7
0416B0             0119*   c_grey_dk: equ 8
0416B0             0120*   c_red: equ 9
0416B0             0121*   c_green: equ 10
0416B0             0122*   c_yellow: equ 11
0416B0             0123*   c_blue: equ 12
0416B0             0124*   c_magenta: equ 13
0416B0             0125*   c_cyan: equ 14
0416B0             0126*   c_white: equ 15
0416B0             0127*   
0416B0             0128*   ; VDU 25, mode, x; y;: PLOT command
0416B0             0129*   ; inputs: a=mode, bc=x0, de=y0
0416B0             0130*   vdu_plot:
0416B0 32 CA 16 04 0131*       ld (@mode),a
0416B4 ED 43 CB 16 0132*       ld (@x0),bc
       04          
0416B9 ED 53 CD 16 0133*       ld (@y0),de
       04          
0416BE 21 C9 16 04 0134*   	ld hl,@cmd
0416C2 01 06 00 00 0135*   	ld bc,@end-@cmd
0416C6 5B DF       0136*   	rst.lil $18
0416C8 C9          0137*   	ret
0416C9 19          0138*   @cmd:   db 25
0416CA 00          0139*   @mode:  db 0
0416CB 00 00       0140*   @x0: 	dw 0
0416CD 00 00       0141*   @y0: 	dw 0
0416CF 00          0142*   @end:   db 0 ; extra byte to soak up deu
0416D0             0143*   
0416D0             0144*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0416D0             0145*   ; &E8-&EF 	232-239 	Bitmap plot §
0416D0             0146*   ; VDU 25, mode, x; y;: PLOT command
0416D0             0147*   ; inputs: bc=x0, de=y0
0416D0             0148*   ; prerequisites: vdu_buff_select
0416D0             0149*   vdu_plot_bmp:
0416D0 ED 43 E7 16 0150*       ld (@x0),bc
       04          
0416D5 ED 53 E9 16 0151*       ld (@y0),de
       04          
0416DA 21 E5 16 04 0152*   	ld hl,@cmd
0416DE 01 06 00 00 0153*   	ld bc,@end-@cmd
0416E2 5B DF       0154*   	rst.lil $18
0416E4 C9          0155*   	ret
0416E5 19          0156*   @cmd:   db 25
0416E6 ED          0157*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
0416E7 00 00       0158*   @x0: 	dw 0x0000
0416E9 00 00       0159*   @y0: 	dw 0x0000
0416EB 00          0160*   @end:   db 0x00 ; padding
0416EC             0161*   
0416EC             0162*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0416EC             0163*   ; &E8-&EF 	232-239 	Bitmap plot §
0416EC             0164*   ; VDU 25, mode, x; y;: PLOT command
0416EC             0165*   ; inputs: bc=x0, de=y0
0416EC             0166*   ; USING 16.8 FIXED POINT COORDINATES
0416EC             0167*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
0416EC             0168*   ;   the fractional portiion of the inputs are truncated
0416EC             0169*   ;   leaving only the 16-bit integer portion
0416EC             0170*   ; prerequisites: vdu_buff_select
0416EC             0171*   vdu_plot_bmp168:
0416EC             0172*   ; populate in the reverse of normal to keep the
0416EC             0173*   ; inputs from stomping on each other
0416EC ED 53 0A 17 0174*       ld (@y0-1),de
       04          
0416F1 ED 43 08 17 0175*       ld (@x0-1),bc
       04          
0416F6 3E ED       0176*       ld a,plot_bmp+dr_abs_fg ; 0xED
0416F8 32 08 17 04 0177*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
0416FC 21 07 17 04 0178*   	ld hl,@cmd
041700 01 06 00 00 0179*   	ld bc,@end-@cmd
041704 5B DF       0180*   	rst.lil $18
041706 C9          0181*   	ret
041707 19          0182*   @cmd:   db 25
041708 ED          0183*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041709 00 00       0184*   @x0: 	dw 0x0000
04170B 00 00       0185*   @y0: 	dw 0x0000
04170D             0186*   @end:  ; no padding required b/c we shifted de right
04170D             0187*   
04170D             0188*   ; draw a filled rectangle
04170D             0189*   vdu_plot_rf:
04170D ED 43 34 17 0190*       ld (@x0),bc
       04          
041712 ED 53 36 17 0191*       ld (@y0),de
       04          
041717 DD 22 3A 17 0192*       ld (@x1),ix
       04          
04171C FD 22 3C 17 0193*       ld (@y1),iy
       04          
041721 3E 19       0194*       ld a,25 ; we have to reload the 2nd plot command
041723 32 38 17 04 0195*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041727 21 32 17 04 0196*   	ld hl,@cmd0
04172B 01 0C 00 00 0197*   	ld bc,@end-@cmd0
04172F 5B DF       0198*   	rst.lil $18
041731 C9          0199*       ret
041732 19          0200*   @cmd0:  db 25 ; plot
041733 04          0201*   @arg0:  db plot_sl_both+mv_abs
041734 00 00       0202*   @x0:    dw 0x0000
041736 00 00       0203*   @y0:    dw 0x0000
041738 19          0204*   @cmd1:  db 25 ; plot
041739 65          0205*   @arg1:  db plot_rf+dr_abs_fg
04173A 00 00       0206*   @x1:    dw 0x0000
04173C 00 00       0207*   @y1:    dw 0x0000
04173E 00          0208*   @end:   db 0x00 ; padding
04173F             0209*   
04173F             0210*   ; draw a filled circle
04173F             0211*   vdu_plot_cf:
04173F ED 43 66 17 0212*       ld (@x0),bc
       04          
041744 ED 53 68 17 0213*       ld (@y0),de
       04          
041749 DD 22 6C 17 0214*       ld (@x1),ix
       04          
04174E FD 22 6E 17 0215*       ld (@y1),iy
       04          
041753 3E 19       0216*       ld a,25 ; we have to reload the 2nd plot command
041755 32 6A 17 04 0217*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041759 21 64 17 04 0218*   	ld hl,@cmd0
04175D 01 0C 00 00 0219*   	ld bc,@end-@cmd0
041761 5B DF       0220*   	rst.lil $18
041763 C9          0221*       ret
041764 19          0222*   @cmd0:  db 25 ; plot
041765 04          0223*   @arg0:  db plot_sl_both+mv_abs
041766 00 00       0224*   @x0:    dw 0x0000
041768 00 00       0225*   @y0:    dw 0x0000
04176A 19          0226*   @cmd1:  db 25 ; plot
04176B 9D          0227*   @arg1:  db plot_cf+dr_abs_fg
04176C 00 00       0228*   @x1:    dw 0x0000
04176E 00 00       0229*   @y1:    dw 0x0000
041770 00          0230*   @end:   db 0x00 ; padding
041771             0042        include "vdu_sprites.inc"
041771             0001*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041771             0002*   ; the VDP can support up to 256 sprites. They must be defined
041771             0003*   ; contiguously, and so the first sprite is sprite 0.
041771             0004*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041771             0005*   ; Once a selection of sprites have been defined, you can activate
041771             0006*   ; them using the VDU 23, 27, 7, n command, where n is the number
041771             0007*   ; of sprites to activate. This will activate the first n sprites,
041771             0008*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041771             0009*   
041771             0010*   ; A single sprite can have multiple "frames", referring to
041771             0011*   ; different bitmaps.
041771             0012*   ; (These bitmaps do not need to be the same size.)
041771             0013*   ; This allows a sprite to include an animation sequence,
041771             0014*   ; which can be stepped through one frame at a time, or picked
041771             0015*   ; in any order.
041771             0016*   
041771             0017*   ; Any format of bitmap can be used as a sprite frame. It should
041771             0018*   ; be noted however that "native" format bitmaps are not
041771             0019*   ; recommended for use as sprite frames, as they cannot get
041771             0020*   ; erased from the screen. (As noted above, the "native" bitmap
041771             0021*   ; format is not really intended for general use.) This is part
041771             0022*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041771             0023*   ; screen are now stored in RGBA2222 format.
041771             0024*   
041771             0025*   ; An "active" sprite can be hidden, so it will stop being drawn,
041771             0026*   ; and then later shown again.
041771             0027*   
041771             0028*   ; Moving sprites around the screen is done by changing the
041771             0029*   ; position of the sprite. This can be done either by setting
041771             0030*   ; the absolute position of the sprite, or by moving the sprite
041771             0031*   ; by a given number of pixels. (Sprites are positioned using
041771             0032*   ; pixel coordinates, and not by the logical OS coordinate system.)
041771             0033*   ; In the current sprite system, sprites will not update their
041771             0034*   ; position on-screen until either another drawing operation is
041771             0035*   ; performed or an explicit VDU 23, 27, 15 command is performed.
041771             0036*   
041771             0037*   ; VDU 23, 27, 4, n: Select sprite n
041771             0038*   ; inputs: a is the 8-bit sprite id
041771             0039*   vdu_sprite_select:
041771 32 83 17 04 0040*       ld (@sprite),a
041775 21 80 17 04 0041*       ld hl,@cmd
041779 01 04 00 00 0042*       ld bc,@end-@cmd
04177D 5B DF       0043*       rst.lil $18
04177F C9          0044*       ret
041780 17 1B 04    0045*   @cmd:    db 23,27,4
041783 00          0046*   @sprite: db 0x00
041784             0047*   @end:
041784             0048*   
041784             0049*   ; VDU 23, 27, 5: Clear frames in current sprite
041784             0050*   ; inputs: none
041784             0051*   ; prerequisites: vdu_sprite_select
041784             0052*   vdu_sprite_clear_frames:
041784 21 8F 17 04 0053*       ld hl,@cmd
041788 01 03 00 00 0054*       ld bc,@end-@cmd
04178C 5B DF       0055*       rst.lil $18
04178E C9          0056*       ret
04178F 17 1B 05    0057*   @cmd: db 23,27,5
041792             0058*   @end:
041792             0059*   
041792             0060*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
041792             0061*   ; inputs: a is the 8-bit bitmap number
041792             0062*   ; prerequisites: vdu_sprite_select
041792             0063*   vdu_sprite_add_bmp:
041792 32 A4 17 04 0064*       ld (@bmp),a
041796 21 A1 17 04 0065*       ld hl,@cmd
04179A 01 04 00 00 0066*       ld bc,@end-@cmd
04179E 5B DF       0067*       rst.lil $18
0417A0 C9          0068*       ret
0417A1 17 1B 06    0069*   @cmd: db 23,27,6
0417A4 00          0070*   @bmp: db 0x00
0417A5             0071*   @end:
0417A5             0072*   
0417A5             0073*   ; VDU 23, 27, 7, n: Activate n sprites
0417A5             0074*   ; inputs: a is the number of sprites to activate
0417A5             0075*   ; prerequisites: each sprite activated must have at least one frame attached to it
0417A5             0076*   vdu_sprite_activate:
0417A5 32 B7 17 04 0077*       ld (@num),a
0417A9 21 B4 17 04 0078*       ld hl,@cmd
0417AD 01 04 00 00 0079*       ld bc,@end-@cmd
0417B1 5B DF       0080*       rst.lil $18
0417B3 C9          0081*       ret
0417B4 17 1B 07    0082*   @cmd: db 23,27,7
0417B7 00          0083*   @num: db 0x00
0417B8             0084*   @end:
0417B8             0085*   
0417B8             0086*   ; VDU 23, 27, 8: Select next frame of current sprite
0417B8             0087*   ; inputs: none
0417B8             0088*   ; prerequisites: vdu_sprite_select
0417B8             0089*   vdu_sprite_next_frame:
0417B8 21 C3 17 04 0090*       ld hl,@cmd
0417BC 01 03 00 00 0091*       ld bc,@end-@cmd
0417C0 5B DF       0092*       rst.lil $18
0417C2 C9          0093*       ret
0417C3 17 1B 08    0094*   @cmd: db 23,27,8
0417C6             0095*   @end:
0417C6             0096*   
0417C6             0097*   ; VDU 23, 27, 9: Select previous frame of current sprite
0417C6             0098*   ; inputs: none
0417C6             0099*   ; prerequisites: vdu_sprite_select
0417C6             0100*   vdu_sprite_prev_frame:
0417C6 21 D1 17 04 0101*       ld hl,@cmd
0417CA 01 03 00 00 0102*       ld bc,@end-@cmd
0417CE 5B DF       0103*       rst.lil $18
0417D0 C9          0104*       ret
0417D1 17 1B 09    0105*   @cmd: db 23,27,9
0417D4             0106*   @end:
0417D4             0107*   
0417D4             0108*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
0417D4             0109*   ; inputs: a is frame number to select
0417D4             0110*   ; prerequisites: vdu_sprite_select
0417D4             0111*   vdu_sprite_select_frame:
0417D4 32 E6 17 04 0112*       ld (@frame),a
0417D8 21 E3 17 04 0113*       ld hl,@cmd
0417DC 01 04 00 00 0114*       ld bc,@end-@cmd
0417E0 5B DF       0115*       rst.lil $18
0417E2 C9          0116*       ret
0417E3 17 1B 0A    0117*   @cmd:    db 23,27,10
0417E6 00          0118*   @frame:  db 0x00
0417E7             0119*   @end:
0417E7             0120*   
0417E7             0121*   ; VDU 23, 27, 11: Show current sprite
0417E7             0122*   ; inputs: none
0417E7             0123*   ; prerequisites: vdu_sprite_select
0417E7             0124*   vdu_sprite_show:
0417E7 21 F2 17 04 0125*       ld hl,@cmd
0417EB 01 03 00 00 0126*       ld bc,@end-@cmd
0417EF 5B DF       0127*       rst.lil $18
0417F1 C9          0128*       ret
0417F2 17 1B 0B    0129*   @cmd: db 23,27,11
0417F5             0130*   @end:
0417F5             0131*   
0417F5             0132*   ; VDU 23, 27, 12: Hide current sprite
0417F5             0133*   ; inputs: none
0417F5             0134*   ; prerequisites: vdu_sprite_select
0417F5             0135*   vdu_sprite_hide:
0417F5 21 00 18 04 0136*       ld hl,@cmd
0417F9 01 03 00 00 0137*       ld bc,@end-@cmd
0417FD 5B DF       0138*       rst.lil $18
0417FF C9          0139*       ret
041800 17 1B 0C    0140*   @cmd: db 23,27,12
041803             0141*   @end:
041803             0142*   
041803             0143*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041803             0144*   ; inputs: bc is x coordinate, de is y coordinate
041803             0145*   ; prerequisites: vdu_sprite_select
041803             0146*   vdu_sprite_move_abs:
041803 ED 43 1B 18 0147*       ld (@xpos),bc
       04          
041808 ED 53 1D 18 0148*       ld (@ypos),de
       04          
04180D 21 18 18 04 0149*       ld hl,@cmd
041811 01 07 00 00 0150*       ld bc,@end-@cmd
041815 5B DF       0151*       rst.lil $18
041817 C9          0152*       ret
041818 17 1B 0D    0153*   @cmd:  db 23,27,13
04181B 00 00       0154*   @xpos: dw 0x0000
04181D 00 00       0155*   @ypos: dw 0x0000
04181F 00          0156*   @end:  db 0x00 ; padding
041820             0157*   
041820             0158*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041820             0159*   ; inputs: bc is x coordinate, de is y coordinate
041820             0160*   ; prerequisites: vdu_sprite_select
041820             0161*   vdu_sprite_move_rel:
041820 ED 43 38 18 0162*       ld (@dx),bc
       04          
041825 ED 53 3A 18 0163*       ld (@dy),de
       04          
04182A 21 35 18 04 0164*       ld hl,@cmd
04182E 01 07 00 00 0165*       ld bc,@end-@cmd
041832 5B DF       0166*       rst.lil $18
041834 C9          0167*       ret
041835 17 1B 0E    0168*   @cmd: db 23,27,14
041838 00 00       0169*   @dx:  dw 0x0000
04183A 00 00       0170*   @dy:  dw 0x0000
04183C 00          0171*   @end: db 0x00 ; padding
04183D             0172*   
04183D             0173*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04183D             0174*   ; USING 16.8 FIXED POINT COORDINATES
04183D             0175*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
04183D             0176*   ;   the fractional portiion of the inputs are truncated
04183D             0177*   ;   leaving only the 16-bit integer portion
04183D             0178*   ; prerequisites: vdu_sprite_select
04183D             0179*   vdu_sprite_move_abs168:
04183D             0180*   ; offset inputs by the gfx origin
04183D             0181*   ; y coordinate
04183D 21 00 40 00 0182*       ld hl,origin_top*256
041841 19          0183*       add hl,de
041842 22 64 18 04 0184*       ld (@ypos-1),hl
041846             0185*   ; x coordinate
041846 21 00 80 00 0186*       ld hl,origin_left*256
04184A 09          0187*       add hl,bc
04184B 22 62 18 04 0188*       ld (@xpos-1),hl
04184F             0189*   ; prepare vdu command
04184F 3E 0D       0190*       ld a,13       ; restore the final byte of the command
041851 32 62 18 04 0191*       ld (@cmd+2),a ; string that got stomped on by bcu
041855 21 60 18 04 0192*       ld hl,@cmd
041859 01 07 00 00 0193*       ld bc,@end-@cmd
04185D 5B DF       0194*       rst.lil $18
04185F C9          0195*       ret
041860 17 1B 0D    0196*   @cmd:  db 23,27,13
041863 00 00       0197*   @xpos: dw 0x0000
041865 00 00       0198*   @ypos: dw 0x0000
041867             0199*   @end:  ; no padding required b/c we shifted de right
041867             0200*   
041867             0201*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041867             0202*   ; USING 16.8 FIXED POINT COORDINATES
041867             0203*   ; inputs: ub.c is dx, ud.e is dy
041867             0204*   ;   the fractional portiion of the inputs are truncated
041867             0205*   ;   leaving only the 16-bit integer portion
041867             0206*   ; prerequisites: vdu_sprite_select
041867             0207*   vdu_sprite_move_rel168:
041867             0208*   ; populate in the reverse of normal to keep the
041867             0209*   ; inputs from stomping on each other
041867 ED 53 86 18 0210*       ld (@dy-1),de
       04          
04186C ED 43 84 18 0211*       ld (@dx-1),bc
       04          
041871 3E 0E       0212*       ld a,14       ; restore the final byte of the command
041873 32 84 18 04 0213*       ld (@cmd+2),a ; string that got stomped on by bcu
041877 21 82 18 04 0214*       ld hl,@cmd
04187B 01 07 00 00 0215*       ld bc,@end-@cmd
04187F 5B DF       0216*       rst.lil $18
041881 C9          0217*       ret
041882 17 1B 0E    0218*   @cmd:  db 23,27,14
041885 00 00       0219*   @dx: dw 0x0000
041887 00 00       0220*   @dy: dw 0x0000
041889             0221*   @end:  ; no padding required b/c we shifted de right
041889             0222*   
041889             0223*   ; VDU 23, 27, 15: Update the sprites in the GPU
041889             0224*   ; inputs: none
041889             0225*   vdu_sprite_update:
041889 21 94 18 04 0226*       ld hl,@cmd
04188D 01 03 00 00 0227*       ld bc,@end-@cmd
041891 5B DF       0228*       rst.lil $18
041893 C9          0229*       ret
041894 17 1B 0F    0230*   @cmd: db 23,27,15
041897             0231*   @end:
041897             0232*   
041897             0233*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
041897             0234*   ; inputs: none
041897             0235*   vdu_sprite_bmp_reset:
041897 21 A2 18 04 0236*       ld hl,@cmd
04189B 01 03 00 00 0237*       ld bc,@end-@cmd
04189F 5B DF       0238*       rst.lil $18
0418A1 C9          0239*       ret
0418A2 17 1B 10    0240*   @cmd: db 23,27,16
0418A5             0241*   @end:
0418A5             0242*   
0418A5             0243*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
0418A5             0244*   ; inputs: none
0418A5             0245*   vdu_sprite_reset:
0418A5 21 B0 18 04 0246*       ld hl,@cmd
0418A9 01 03 00 00 0247*       ld bc,@end-@cmd
0418AD 5B DF       0248*       rst.lil $18
0418AF C9          0249*       ret
0418B0 17 1B 11    0250*   @cmd: db 23,27,17
0418B3             0251*   @end:
0418B3             0252*   
0418B3             0253*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
0418B3             0254*   ; inputs: a is the GCOL paint mode
0418B3             0255*   ; prerequisites: vdu_sprite_select
0418B3             0256*   vdu_sprite_set_gcol:
0418B3 32 C5 18 04 0257*       ld (@mode),a
0418B7 21 C2 18 04 0258*       ld hl,@cmd
0418BB 01 04 00 00 0259*       ld bc,@end-@cmd
0418BF 5B DF       0260*       rst.lil $18
0418C1 C9          0261*       ret
0418C2 17 1B 12    0262*   @cmd:  db 23,27,18
0418C5 00          0263*   @mode: db 0x00
0418C6             0264*   @end:
0418C6             0265*   
0418C6             0266*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
0418C6             0267*   ; inputs: hl=bufferId
0418C6             0268*   ; prerequisites: vdu_sprite_select
0418C6             0269*   vdu_sprite_add_buff:
0418C6 22 D8 18 04 0270*       ld (@bufferId),hl
0418CA 21 D5 18 04 0271*       ld hl,@cmd
0418CE 01 05 00 00 0272*       ld bc,@end-@cmd
0418D2 5B DF       0273*       rst.lil $18
0418D4 C9          0274*       ret
0418D5 17 1B 26    0275*   @cmd:      db 23,27,0x26
0418D8 00 00       0276*   @bufferId: dw 0x0000
0418DA 00          0277*   @end:      db 0x00 ; padding
0418DB             0043    
0418DB             0044    ; APPLICATION INCLUDES
0418DB             0045        include "ascii.inc"
0418DB             0001*   loading_ui:
0418DB 57 45 4C 43 0002*       db "WELCOME TO ...",13,10
       4F 4D 45 20 
       54 4F 20 2E 
       2E 2E 0D 0A 
0418EB 0D 0A       0003*       db 13,10
0418ED 20 20 20 20 0004*       db 32,32,32,32,32,32,32,32,95,95,32,32,32,32,95,95,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,95,13,10
       20 20 20 20 
       5F 5F 20 20 
       20 20 5F 5F 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 5F 5F 0D 
       0A          
041912 5F 5F 5F 5F 0005*       db 95,95,95,95,95,32,95,47,32,32,124,95,95,47,32,32,124,95,95,95,95,95,95,32,32,32,32,95,95,95,95,32,124,32,32,124,32,95,95,13,10
       5F 20 5F 2F 
       20 20 7C 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 20 5F 
       5F 5F 5F 20 
       7C 20 20 7C 
       20 5F 5F 0D 
       0A          
04193B 5C 5F 5F 20 0006*       db 92,95,95,32,32,92,32,32,32,95,95,92,32,32,32,95,95,92,95,95,32,32,92,32,95,47,32,95,95,95,92,124,32,32,124,47,32,47,13,10
       20 5C 20 20 
       20 5F 5F 5C 
       20 20 20 5F 
       5F 5C 5F 5F 
       20 20 5C 20 
       5F 2F 20 5F 
       5F 5F 5C 7C 
       20 20 7C 2F 
       20 2F 0D 0A 
041963 20 2F 20 5F 0007*       db 32,47,32,95,95,32,92,124,32,32,124,32,32,124,32,32,124,32,32,47,32,95,95,32,92,32,32,92,95,95,95,124,32,32,32,32,60,13,10
       5F 20 5C 7C 
       20 20 7C 20 
       20 7C 20 20 
       7C 20 20 2F 
       20 5F 5F 20 
       5C 20 20 5C 
       5F 5F 5F 7C 
       20 20 20 20 
       3C 0D 0A    
04198A 28 5F 5F 5F 0008*       db 40,95,95,95,95,32,32,47,95,95,124,32,32,124,95,95,124,32,40,95,95,95,95,32,32,47,92,95,95,95,32,32,62,95,95,124,95,32,92,13,10
       5F 20 20 2F 
       5F 5F 7C 20 
       20 7C 5F 5F 
       7C 20 28 5F 
       5F 5F 5F 20 
       20 2F 5C 5F 
       5F 5F 20 20 
       3E 5F 5F 7C 
       5F 20 5C 0D 
       0A          
0419B3 20 20 20 20 0009*       db 32,32,32,32,32,92,47,32,95,95,95,95,95,32,32,32,32,95,95,32,32,46,95,95,47,32,32,32,32,32,92,47,32,32,32,32,32,92,47,13,10
       20 5C 2F 20 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 20 
       20 2E 5F 5F 
       2F 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 5C 2F 0D 
       0A          
0419DC 20 20 5F 5F 0010*       db 32,32,95,95,95,95,95,47,32,95,95,95,95,92,32,95,47,32,32,124,95,124,32,32,124,95,95,32,32,32,95,95,95,95,13,10
       5F 5F 5F 2F 
       20 5F 5F 5F 
       5F 5C 20 5F 
       2F 20 20 7C 
       5F 7C 20 20 
       7C 5F 5F 20 
       20 20 5F 5F 
       5F 5F 0D 0A 
041A00 20 2F 20 20 0011*       db 32,47,32,32,95,32,92,32,32,32,95,95,92,32,32,92,32,32,32,95,95,92,32,32,124,32,32,92,95,47,32,95,95,32,92,13,10
       5F 20 5C 20 
       20 20 5F 5F 
       5C 20 20 5C 
       20 20 20 5F 
       5F 5C 20 20 
       7C 20 20 5C 
       5F 2F 20 5F 
       5F 20 5C 0D 
       0A          
041A25 28 20 20 3C 0012*       db 40,32,32,60,95,62,32,41,32,32,124,32,32,32,32,32,124,32,32,124,32,124,32,32,32,89,32,32,92,32,32,95,95,95,47,13,10
       5F 3E 20 29 
       20 20 7C 20 
       20 20 20 20 
       7C 20 20 7C 
       20 7C 20 20 
       20 59 20 20 
       5C 20 20 5F 
       5F 5F 2F 0D 
       0A          
041A4A 20 5C 5F 5F 0013*       db 32,92,95,95,95,95,47,124,95,95,124,32,32,32,32,32,124,95,95,124,32,124,95,95,95,124,32,32,47,92,95,95,95,32,32,62,13,10
       5F 5F 2F 7C 
       5F 5F 7C 20 
       20 20 20 20 
       7C 5F 5F 7C 
       20 7C 5F 5F 
       5F 7C 20 20 
       2F 5C 5F 5F 
       5F 20 20 3E 
       0D 0A       
041A70 5F 5F 5F 5F 0014*       db 95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,32,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
041AAE 5C 5F 5F 5F 0015*       db 92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,13,10
       5F 5F 5F 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       0D 0A       
041AEC 20 7C 20 20 0016*       db 32,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       20 20 20 5F 
       5F 5F 2F 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 0D 
       0A          
041B29 20 7C 20 20 0017*       db 32,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       20 20 7C 20 
       20 20 7C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       0D 0A       
041B67 20 7C 5F 5F 0018*       db 32,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 7C 20 
       20 20 7C 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       0D 0A       
041BA5 20 5F 5F 5F 0019*       db 32,95,95,95,95,95,95,95,32,32,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,92,47,95,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 0D 0A 
041BED 20 5C 20 20 0020*       db 32,92,32,32,32,32,32,32,92,32,124,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,47,32,32,32,95,95,95,95,95,47,13,10
       20 20 20 20 
       5C 20 7C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       2F 20 20 20 
       5F 5F 5F 5F 
       5F 2F 0D 0A 
041C35 20 2F 20 20 0021*       db 32,47,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,32,92,95,95,95,95,95,32,32,92,13,10
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 20 
       5C 5F 5F 5F 
       5F 5F 20 20 
       5C 0D 0A    
041C7C 2F 20 20 20 0022*       db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 0D 0A 
041CC4 5C 5F 5F 5F 0023*       db 92,95,95,95,95,124,95,95,32,32,47,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 0D 0A 
041D0C 20 20 20 20 0024*       db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 5C 
       2F 0D 0A    
041D53 4C 4F 41 44 0025*       db "LOADING UI ...",0
       49 4E 47 20 
       55 49 20 2E 
       2E 2E 00    
041D62             0046        include "collisions.inc"
041D62             0001*   ; ====== COLLISION DETECTION ======
041D62             0002*   ; --- constants ---
041D62             0003*   ; sprite_collisions flags
041D62             0004*   ; collides_with_player: equ %00000001
041D62             0005*   ; collides_with_laser: equ %00000010
041D62             0006*   sprite_alive: equ 6; set when sprite is alive
041D62             0007*   sprite_just_died: equ 7; set when sprite just died
041D62             0008*   collide_top: equ %00001000
041D62             0009*   collide_bottom: equ %00000100
041D62             0010*   collide_left: equ %00000010
041D62             0011*   collide_right: equ %00000001
041D62             0012*   
041D62 00 00 00    0013*   collision_table_pointer: dl 0x000000 ; pointer to the sprite in the group being checked for collision
041D65             0014*   
041D65             0015*   collision_draw_hitboxes:
041D65             0016*   ; draw hitbox for ix collider
041D65 DD E5       0017*       push ix
041D67 FD E5       0018*       push iy
041D69 AF          0019*       xor a ; color mode 0
041D6A 0E 09       0020*       ld c,c_red
041D6C CD C9 12 04 0021*       call vdu_gcol
041D70 01 00 00 00 0022*       ld bc,0
041D74 DD 4E 02    0023*       ld c,(ix+sprite_x+1)
041D77 DD 46 03    0024*       ld b,(ix+sprite_x+2)
041D7A 11 00 00 00 0025*       ld de,0
041D7E DD 5E 05    0026*       ld e,(ix+sprite_y+1)
041D81 DD 56 06    0027*       ld d,(ix+sprite_y+2)
041D84 21 00 00 00 0028*       ld hl,0 ; clear hlu and h
041D88 DD 6E 1E    0029*       ld l,(ix+sprite_dim_x)
041D8B 09          0030*       add hl,bc ; hl = x1
041D8C E5          0031*       push hl ; save x1
041D8D 21 00 00 00 0032*       ld hl,0 ; clear hlu and h
041D91 DD 6E 1F    0033*       ld l,(ix+sprite_dim_y)
041D94 19          0034*       add hl,de ; hl = y1
041D95 DD E1       0035*       pop ix ; ix = x1 (was hl)
041D97 E5          0036*       push hl
041D98 FD E1       0037*       pop iy ; iy = y1
041D9A CD 0D 17 04 0038*       call vdu_plot_rf
041D9E FD E1       0039*       pop iy
041DA0 DD E1       0040*       pop ix
041DA2             0041*   
041DA2             0042*   ; draw hitbox for iy collider
041DA2 DD E5       0043*       push ix
041DA4 FD E5       0044*       push iy
041DA6 AF          0045*       xor a ; color mode 0
041DA7 0E 0A       0046*       ld c,c_green
041DA9 CD C9 12 04 0047*       call vdu_gcol
041DAD 01 00 00 00 0048*       ld bc,0
041DB1 FD 4E 02    0049*       ld c,(iy+sprite_x+1)
041DB4 FD 46 03    0050*       ld b,(iy+sprite_x+2)
041DB7 11 00 00 00 0051*       ld de,0
041DBB FD 5E 05    0052*       ld e,(iy+sprite_y+1)
041DBE FD 56 06    0053*       ld d,(iy+sprite_y+2)
041DC1 21 00 00 00 0054*       ld hl,0 ; clear hlu and h
041DC5 FD 6E 1E    0055*       ld l,(iy+sprite_dim_x)
041DC8 09          0056*       add hl,bc ; hl = x1
041DC9 E5          0057*       push hl ; save x1
041DCA 21 00 00 00 0058*       ld hl,0 ; clear hlu and h
041DCE FD 6E 1F    0059*       ld l,(iy+sprite_dim_y)
041DD1 19          0060*       add hl,de ; hl = y1
041DD2 DD E1       0061*       pop ix ; ix = x1 (was hl)
041DD4 E5          0062*       push hl
041DD5 FD E1       0063*       pop iy ; iy = y1
041DD7 CD 0D 17 04 0064*       call vdu_plot_rf
041DDB FD E1       0065*       pop iy
041DDD DD E1       0066*       pop ix
041DDF C9          0067*       ret
041DE0             0068*   ; end collision_draw_hitboxes
041DE0             0069*   
041DE0             0070*   ; check_collision:
041DE0             0071*   ; Detects collision using bounding box method.
041DE0             0072*   ; Inputs:
041DE0             0073*   ;   IX -> Sprite/Tile table for Collider A
041DE0             0074*   ;   IY -> Sprite/Tile table for Collider B
041DE0             0075*   ; Outputs:
041DE0             0076*   ;   a = 0, zero flag set, positive sign, carry reset -> Collision detected
041DE0             0077*   ;   a = -1, zero flag reset, negative sign, carry set -> No collision detected
041DE0             0078*   ; Destroys: HL, DE, AF
041DE0             0079*   check_collision:
041DE0             0080*   check_collision_box:
041DE0             0081*   ; Test 1: (ay + ah) - by < 0
041DE0 21 00 00 00 0082*       ld hl,0                     ; Clear hlu
041DE4 DD 6E 05    0083*       ld l,(ix+sprite_y+1)        ; Load ay integer part low byte
041DE7 DD 66 06    0084*       ld h,(ix+sprite_y+2)        ; Load ay integer part high byte
041DEA 11 00 00 00 0085*       ld de,0                     ; Clear deu and d
041DEE DD 5E 1F    0086*       ld e,(ix+sprite_dim_y)      ; Load ah
041DF1 19          0087*       add hl,de                   ; (ay + ah)
041DF2 FD 5E 05    0088*       ld e,(iy+sprite_y+1)        ; Load by integer part low byte
041DF5 FD 56 06    0089*       ld d,(iy+sprite_y+2)        ; Load by integer part high byte
041DF8 AF          0090*       xor a                       ; Clear carry
041DF9 ED 52       0091*       sbc hl,de                   ; (ay + ah) - by
041DFB FA 5E 1E 04 0092*       jp m,@not_collision         ; No collision if negative
041DFF             0093*   
041DFF             0094*   ; Test 2: ay - (by + bh) < 0
041DFF 21 00 00 00 0095*       ld hl,0                     ; Clear hlu
041E03 FD 6E 05    0096*       ld l,(iy+sprite_y+1)        ; Load by integer part low byte
041E06 FD 66 06    0097*       ld h,(iy+sprite_y+2)        ; Load by integer part high byte
041E09 11 00 00 00 0098*       ld de,0                     ; Clear deu and d
041E0D FD 5E 1F    0099*       ld e,(iy+sprite_dim_y)      ; Load bh
041E10 19          0100*       add hl,de                   ; (by + bh)
041E11 DD 5E 05    0101*       ld e,(ix+sprite_y+1)        ; Load ay integer part low byte
041E14 DD 56 06    0102*       ld d,(ix+sprite_y+2)        ; Load ay integer part high byte
041E17 AF          0103*       xor a                       ; Clear carry
041E18 ED 52       0104*       sbc hl,de                   ; (by + bh) - ay
041E1A FA 5E 1E 04 0105*       jp m,@not_collision         ; No collision if negative
041E1E             0106*   
041E1E             0107*   ; Test 3: (ax + aw) - bx < 0
041E1E 21 00 00 00 0108*       ld hl,0                     ; Clear hlu
041E22 DD 6E 02    0109*       ld l,(ix+sprite_x+1)        ; Load ax integer part low byte
041E25 DD 66 03    0110*       ld h,(ix+sprite_x+2)        ; Load ax integer part high byte
041E28 11 00 00 00 0111*       ld de,0                     ; Clear deu and d
041E2C DD 5E 1E    0112*       ld e,(ix+sprite_dim_x)      ; Load aw
041E2F 19          0113*       add hl,de                   ; (ax + aw)
041E30 FD 5E 02    0114*       ld e,(iy+sprite_x+1)        ; Load bx integer part low byte
041E33 FD 56 03    0115*       ld d,(iy+sprite_x+2)        ; Load bx integer part high byte
041E36 AF          0116*       xor a                       ; Clear carry
041E37 ED 52       0117*       sbc hl,de                   ; (ax + aw) - bx
041E39 FA 5E 1E 04 0118*       jp m,@not_collision         ; No collision if negative
041E3D             0119*   
041E3D             0120*   ; Test 4: ax - (bx + bw) < 0
041E3D 21 00 00 00 0121*       ld hl,0                     ; Clear hlu
041E41 FD 6E 02    0122*       ld l,(iy+sprite_x+1)        ; Load bx integer part low byte
041E44 FD 66 03    0123*       ld h,(iy+sprite_x+2)        ; Load bx integer part high byte
041E47 11 00 00 00 0124*       ld de,0                     ; Clear deu and d
041E4B FD 5E 1E    0125*       ld e,(iy+sprite_dim_x)      ; Load bw
041E4E 19          0126*       add hl,de                   ; (bx + bw)
041E4F DD 5E 02    0127*       ld e,(ix+sprite_x+1)        ; Load ax integer part low byte
041E52 DD 56 03    0128*       ld d,(ix+sprite_x+2)        ; Load ax integer part high byte
041E55 AF          0129*       xor a                       ; Clear carry
041E56 ED 52       0130*       sbc hl,de                   ; (bx + bw) - ax
041E58 FA 5E 1E 04 0131*       jp m,@not_collision         ; No collision if negative
041E5C             0132*   
041E5C             0133*   ; If all tests pass, collision is detected
041E5C             0134*   @is_collision:
041E5C AF          0135*       xor a                       ; Clear accumulator and flags (a = 0)
041E5D C9          0136*       ret                         ; Return with zero flag set
041E5E             0137*   
041E5E             0138*   ; No collision detected
041E5E             0139*   @not_collision:
041E5E 3D          0140*       dec a                       ; Set a to -1
041E5F C9          0141*       ret                         ; Return with carry set
041E60             0142*   ; End check_collision_box
041E60             0143*   
041E60             0144*   
041E60             0145*   ; this routine detects collisions between two collidable objects,
041E60             0146*   ; which can include sprites, active tiles, or any screen coordinate
041E60             0147*   ; which has been set up with a sprite table structure that includes dim_x
041E60             0148*   ; representing the radius of the collidable object
041E60             0149*   ; inputs: ix and iy point to the colliding objects' sprite/tile table records
041E60             0150*   ; outputs: uh.l = distance - sum of radii
041E60             0151*   ;          zero flag set if collision detected
041E60             0152*   ;          dx168 and dy168 are also populated with the signed displacements
041E60             0153*   ; destroys: everything except indexes
041E60             0154*   ; check_collision:
041E60             0155*   check_collision_cartesian:
041E60             0156*   ; compute dx = x1-x0
041E60 DD 27 01    0157*       ld hl,(ix+sprite_x)
041E63 FD 17 01    0158*       ld de,(iy+sprite_x)
041E66 AF          0159*       xor a ; clear carry
041E67 ED 52       0160*       sbc hl,de
041E69 22 65 07 04 0161*       ld (dx168),hl ; dx to scratch
041E6D             0162*   ; compute dy = y1-y0
041E6D DD 27 04    0163*       ld hl,(ix+sprite_y)
041E70 FD 17 04    0164*       ld de,(iy+sprite_y)
041E73 AF          0165*       xor a ; clear carry
041E74 ED 52       0166*       sbc hl,de ; hl = dy
041E76 22 6B 07 04 0167*       ld (dy168),hl ; dy to scratch
041E7A             0168*   ; compute euclidean distance between centers
041E7A CD 71 07 04 0169*       call distance168 ; uh.l = distance
041E7E             0170*   ; check for overlap by summing half the radii
041E7E DD 7E 1E    0171*       ld a,(ix+sprite_dim_x)
041E81 CB 3F       0172*       srl a ; divide by 2
041E83 FD 5E 1E    0173*       ld e,(iy+sprite_dim_x)
041E86 CB 3B       0174*       srl e ; divide by 2
041E88 83          0175*       add a,e
041E89 11 00 00 00 0176*       ld de,0 ; clear deu and e
041E8D 57          0177*       ld d,a ; ud.e = sum of radii
041E8E B7          0178*       or a ; clear carry
041E8F ED 52       0179*       sbc hl,de ; uh.l = distance - sum of radii
041E91 C8          0180*       ret z ; return collision
041E92 F0          0181*       ret p ; return no collision
041E93 AF          0182*       xor a ; return collision
041E94 C9          0183*       ret
041E95             0184*   ; end check_collision_cartesian
041E95             0185*   
041E95             0186*   ; check collisions of a sprite or tile against a sprite group
041E95             0187*   ; inputs: iy = pointer to sprite or tile record being checked
041E95             0188*   ;         ix = pointer to sprite group, b = number of records in sprite group
041E95             0189*   check_sprite_group_collisions:
041E95             0190*   @collision_loop:
041E95 DD 22 62 1D 0191*       ld (collision_table_pointer),ix ; update table pointer
       04          
041E9A C5          0192*       push bc ; backup loop counter
041E9B             0193*   ; check sprite_collisions sprite_alive flag to see if sprite is active
041E9B DD CB 1D 76 0194*       bit sprite_alive,(ix+sprite_collisions)
041E9F CA B5 1E 04 0195*       jp z,@next_record ; not alive so skip to next record
041EA3             0196*   ; sprite alive so check for collision
041EA3 CD E0 1D 04 0197*       call check_collision
041EA7 C2 B5 1E 04 0198*       jp nz,@next_record ; no collision
041EAB             0199*   ; set sprite_just_died flag for each entity and return to caller
041EAB C1          0200*       pop bc ; dummy pop to balance stack
041EAC DD CB 1D FE 0201*       set sprite_just_died,(ix+sprite_collisions)
041EB0 FD CB 1D FE 0202*       set sprite_just_died,(iy+sprite_collisions)
041EB4 C9          0203*       ret
041EB5             0204*   @next_record:
041EB5 C1          0205*       pop bc ; get back our loop counter
041EB6 ED 32 40    0206*       lea ix,ix+table_record_size
041EB9 10 DA       0207*       djnz @collision_loop ; loop until we've checked all the records
041EBB             0208*   ; return to caller
041EBB AF          0209*       xor a
041EBC 3C          0210*       inc a ; resets sign flag and a to non-zero indicating no collision
041EBD C9          0211*       ret
041EBE             0212*   ; end check_sprite_group_collisions
041EBE             0213*   
041EBE             0214*   check_enemy_collision_laser: ; check for collisions with laser
041EBE DD 21 05 94 0215*       ld ix,player_lasers_begin
       04          
041EC3 06 04       0216*       ld b,player_lasers_max
041EC5 CD 95 1E 04 0217*       call check_sprite_group_collisions
041EC9 C9          0218*       ret
041ECA             0219*   ; end check_enemy_collision_laser
041ECA             0220*   
041ECA             0221*   check_enemy_collision_player: ; check for collisions with player
041ECA DD 21 05 95 0222*       ld ix,player_begin
       04          
041ECF CD E0 1D 04 0223*       call check_collision
041ED3 C0          0224*       ret nz ; no collision so nothing to do
041ED4 DD CB 1D FE 0225*       set sprite_just_died,(ix+sprite_collisions)
041ED8 FD CB 1D FE 0226*       set sprite_just_died,(iy+sprite_collisions)
041EDC AF          0227*       xor a ; signal collision detected
041EDD C9          0228*       ret
041EDE             0229*   ; end check_enemy_collision_player
041EDE             0047        include "enemies.inc"
041EDE EC 1E 04    0001*   enemies_state: dl enemies_alive
041EE1             0002*   
041EE1             0003*   do_enemies:
041EE1 2A DE 1E 04 0004*       ld hl,(enemies_state)
041EE5             0005*       CALL_HL
041EE5 01 EB 1E 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
041EE9 C5          0002*M1     push bc ; which constitutes the return address
041EEA E9          0003*M1     jp (hl) ; Jump to the address in HL
041EEB C9          0006*       ret
041EEC             0007*   
041EEC             0008*   enemies_alive:
041EEC FD 21 45 95 0009*       ld iy,enemy_sprites_begin
       04          
041EF1 06 07       0010*       ld b,table_num_enemy_records
041EF3 CD E6 7A 04 0011*       call move_sprite_group
041EF7 C9          0012*       ret
041EF8             0013*   
041EF8             0014*   enemies_despawning:
041EF8 C9          0015*       ret
041EF9             0016*   
041EF9             0017*   enemies_dead:
041EF9 C9          0018*       ret
041EFA             0019*   
041EFA             0020*   enemies_respawning:
041EFA C9          0021*       ret
041EFB             0048        include "enemy_fireball.inc"
041EFB             0001*   speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
041EFB             0002*   fireballs_max: equ 4
041EFB             0003*   
041EFB             0004*   fireball_defaults:
041EFB 03          0005*       db enemy_projectile     ; type
041EFC 0A 01 00    0006*       dl BUF_FIREBALL_2_000   ; base_bufferId
041EFF 4D 1F 04    0007*       dl move_enemy_fireball  ; move_program
041F02 40          0008*       db %01000000            ; collisions bit 6 signals sprite alive
041F03 10          0009*       db 16                   ; dim_x
041F04 10          0010*       db 16                   ; dim_y
041F05 20          0011*       db 32                   ; num_orientations
041F06 02          0012*       db 2                    ; num_animations
041F07 00          0013*       db 0                    ; animation
041F08 08          0014*       db 8                    ; animation_timer
041F09 00          0015*       db 0                    ; move_timer
041F0A 00          0016*       db 0                    ; move_step
041F0B 00          0017*       db 0                    ; points
041F0C FE          0018*       db -2                   ; shield_damage
041F0D 00          0019*       db 0                    ; frame
041F0E             0020*   
041F0E             0021*   enemy_spawn_fireball:
041F0E 21 FB 1E 04 0022*       ld hl,fireball_defaults
041F12 DD 21 05 96 0023*       ld ix,fireballs_base
       04          
041F17 06 04       0024*       ld b,fireballs_max
041F19 CD 4F 86 04 0025*       call spawn_sprite_from_tile
041F1D D0          0026*       ret nc ; no carry means no free sprite slots, so we go home
041F1E             0027*   ; other specific initialization
041F1E             0028*   ; ------------------------------------------------
041F1E             0029*   ; copy sprite heading and component velocities from targeting_computer
041F1E 2A 4D 7F 04 0030*       ld hl,(Bearing_t)
041F22 11 00 80 00 0031*       ld de,128*256 ; rotate 128 degrees
041F26 19          0032*       add hl,de
041F27 DD 2F 10    0033*       ld (ix+sprite_heading),hl
041F2A 2A 56 7F 04 0034*       ld hl,(Vp_x)
041F2E DD 2F 07    0035*       ld (ix+sprite_xvel),hl
041F31 2A 59 7F 04 0036*       ld hl,(Vp_y)
041F35 DD 2F 0A    0037*       ld (ix+sprite_yvel),hl
041F38             0038*   ; move projectile one frame's distance so it isn't drawn right over turret
041F38 DD 27 01    0039*       ld hl,(ix+sprite_x)
041F3B DD 17 07    0040*       ld de,(ix+sprite_xvel)
041F3E 19          0041*       add hl,de
041F3F DD 2F 01    0042*       ld (ix+sprite_x),hl
041F42 DD 27 04    0043*       ld hl,(ix+sprite_y)
041F45 DD 17 0A    0044*       ld de,(ix+sprite_yvel)
041F48 19          0045*       add hl,de
041F49 DD 2F 04    0046*       ld (ix+sprite_y),hl
041F4C C9          0047*       ret
041F4D             0048*   ; end enemy_spawn_fireball
041F4D             0049*   
041F4D             0050*   move_enemy_fireball:
041F4D             0051*   ; run the movement program for the fireball enemy
041F4D CD 67 7B 04 0052*       call move_sprite
041F51 3A BA 79 04 0053*       ld a,(sprite_screen_edge)
041F55 B7          0054*       or a ; a will be non-zero if have scrolled off screen
041F56 C2 00 7A 04 0055*       jp nz,table_deactivate_sprite
041F5A CD CA 1E 04 0056*       call check_enemy_collision_player
041F5E C2 6A 1F 04 0057*       jp nz,@animate ; no collision so do animation
041F62 CD 88 79 04 0058*       call update_shields
041F66 C3 BB 20 04 0059*       jp spawn_explosion
041F6A             0060*   @animate:
041F6A             0061*   ; check the animation timer
041F6A FD 35 23    0062*       dec (iy+sprite_animation_timer)
041F6D C0          0063*       ret nz ; not time to animate
041F6E             0064*   ; reset the animation timer and bump animation
041F6E 3E 08       0065*       ld a,8
041F70 FD 77 23    0066*       ld (iy+sprite_animation_timer),a
041F73 FD 7E 22    0067*       ld a,(iy+sprite_animation)
041F76 3C          0068*       inc a
041F77 E6 01       0069*       and %00000001 ; modulo 2
041F79 FD 77 22    0070*       ld (iy+sprite_animation),a
041F7C CD 1E 7C 04 0071*       call sprite_frame_heading_animation ; a, sprite_frame set to heading-based frame
041F80 CD D4 17 04 0072*       call vdu_sprite_select_frame
041F84 C9          0073*       ret
041F85             0074*   ; end move_enemy_fireball
041F85             0075*   
041F85             0076*   init_enemy_fireballs:
041F85             0077*   ; set pointer to seeker sprite table
041F85 FD 21 05 96 0078*       ld iy,fireballs_base
       04          
041F8A FD 7E 00    0079*       ld a,(iy+sprite_id) ; sprite id
041F8D 1E 04       0080*       ld e,fireballs_max ; sprite loop counter
041F8F             0081*   ; define seeker sprites
041F8F             0082*   @sprites_loop:
041F8F F5          0083*       push af
041F90 D5          0084*       push de
041F91 CD 71 17 04 0085*       call vdu_sprite_select
041F95 CD 84 17 04 0086*       call vdu_sprite_clear_frames
041F99 21 0A 01 00 0087*       ld hl,BUF_FIREBALL_2_000
041F9D 06 80       0088*       ld b,4*32 ; 4 animations * 32 orientations
041F9F             0089*   @frames_loop:
041F9F C5          0090*       push bc
041FA0 E5          0091*       push hl
041FA1 CD C6 18 04 0092*       call vdu_sprite_add_buff
041FA5 E1          0093*       pop hl
041FA6 23          0094*       inc hl
041FA7 C1          0095*       pop bc
041FA8 10 F5       0096*       djnz @frames_loop
041FAA D1          0097*       pop de ; sprite loop counter
041FAB F1          0098*       pop af ; sprite id
041FAC 3C          0099*       inc a
041FAD 1D          0100*       dec e
041FAE C2 8F 1F 04 0101*       jp nz,@sprites_loop
041FB2 C9          0102*       ret
041FB3             0103*   ; end init_enemy_fireballs
041FB3             0049        include "enemy_seeker.inc"
041FB3 00          0001*   seekers_count: db 0
041FB4             0002*   seekers_max: equ 3
041FB4             0003*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
041FB4             0004*   
041FB4             0005*   seeker_defaults:
041FB4 01          0006*       db enemy_air            ; type
041FB5 4F 01 00    0007*       dl BUF_SEEKER_000       ; base_bufferId
041FB8 DF 1F 04    0008*       dl move_enemy_seeker    ; move_program
041FBB 40          0009*       db %01000000            ; collisions bit 6 signals sprite alive
041FBC 10          0010*       db 16                   ; dim_x
041FBD 10          0011*       db 16                   ; dim_y
041FBE 20          0012*       db 32                   ; num_orientations
041FBF 01          0013*       db 1                    ; num_animations
041FC0 00          0014*       db 0                    ; animation
041FC1 00          0015*       db 0                    ; animation_timer
041FC2 01          0016*       db 1                    ; move_timer
041FC3 00          0017*       db 0                    ; move_step
041FC4 0A          0018*       db 10                   ; points
041FC5 FC          0019*       db -4                   ; shield_damage
041FC6 00          0020*       db 0                    ; frame
041FC7             0021*   
041FC7             0022*   enemy_spawn_seeker:
041FC7 21 B4 1F 04 0023*       ld hl,seeker_defaults
041FCB DD 21 45 95 0024*       ld ix,seekers_base
       04          
041FD0 06 03       0025*       ld b,seekers_max
041FD2 CD 4F 86 04 0026*       call spawn_sprite_from_tile
041FD6 D0          0027*       ret nc ; no carry means no free sprite slots, so we go home
041FD7             0028*   ; other specific initialization
041FD7 21 80 02 00 0029*       ld hl,speed_seeker
041FDB DD 2F 0D    0030*       ld (ix+sprite_vel),hl
041FDE C9          0031*       ret
041FDF             0032*   ; end enemy_spawn_seeker
041FDF             0033*   
041FDF             0034*   move_enemy_seeker:
041FDF             0035*   ; run the movement program for the seeker enemy
041FDF CD 13 20 04 0036*       call en_nav_seek_zag
041FE3 CD CA 1E 04 0037*       call check_enemy_collision_player
041FE7 CA 0B 20 04 0038*       jp z,@player
041FEB CD BE 1E 04 0039*       call check_enemy_collision_laser
041FEF CA 03 20 04 0040*       jp z,@laser
041FF3             0041*   ; change the animation frame to match heading
041FF3 FD 7E 00    0042*       ld a,(iy+sprite_id)
041FF6 CD 71 17 04 0043*       call vdu_sprite_select
041FFA CD 33 7C 04 0044*       call sprite_frame_heading ; a, sprite_frame set to heading-based frame
041FFE CD D4 17 04 0045*       call vdu_sprite_select_frame
042002 C9          0046*       ret
042003             0047*   @laser:
042003 CD 2E 79 04 0048*       call update_score
042007 C3 BB 20 04 0049*       jp spawn_explosion
04200B             0050*   @player:
04200B CD 88 79 04 0051*       call update_shields
04200F C3 BB 20 04 0052*       jp spawn_explosion
042013             0053*   ; end move_enemy_seeker
042013             0054*   
042013             0055*   ; contains the logic for how to move the enemy
042013             0056*   ; and then does the moving
042013             0057*   ; inputs: a fully-populated active sprite table
042013             0058*   ;         player position variables
042013             0059*   ; destroys: everything except index registers
042013             0060*   ; outputs: moving enemies
042013             0061*   en_nav_seek_zag:
042013             0062*   ; set velocity and orientation by player's relative location
042013             0063*   ; move enemies y-axis
042013             0064*   ; where is player relative to us?
042013 CD FB 7E 04 0065*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
042017             0066*   ; is player above or below us?
042017 ED 53 1E 03 0067*       ld (ude),de ; dy
       04          
04201C 3A 20 03 04 0068*       ld a,(ude+2) ; deu
042020 17          0069*       rla ; shift sign bit into carry
042021 D2 46 20 04 0070*       jp nc,@zig_zag ; player is below,evade
042025             0071*   ; player is even or above,so home in on current heading
042025 FD 2F 10    0072*       ld (iy+sprite_heading),hl ; save sprite heading
042028             0073*   ; fall through to @compute_velocities
042028             0074*   @compute_velocities:
042028 CD 08 7C 04 0075*       call sprite_compute_velocities
04202C CD 67 7B 04 0076*       call move_sprite ; move the sprite
042030 B7          0077*       or a ; a will be non-zero if have collided with screen edge
042031 C2 51 20 04 0078*       jp nz,@zag_switch ; switch direction
042035 C9          0079*       ret ; didn't hit edge, nothing else to do
042036             0080*   @zig_zag_start:
042036 FD 2A B7 79 0081*       ld iy,(table_pointer)
       04          
04203B CD FB 04 04 0082*       call rand_8
04203F E6 3F       0083*       and %00111111 ; limit it to 64
042041 CB DF       0084*       set 3,a ; make sure it's at least 8
042043 FD 77 24    0085*       ld (iy+sprite_move_timer),a ; store it
042046             0086*       ; fall through to @zig_zag
042046             0087*   @zig_zag:
042046 FD 7E 24    0088*       ld a,(iy+sprite_move_timer)
042049 3D          0089*       dec a
04204A FD 77 24    0090*       ld (iy+sprite_move_timer),a
04204D C2 73 20 04 0091*       jp nz,@zig_zag_no_switch
042051             0092*   @zag_switch:
042051             0093*       ; otherwise flip direction and restart timer
042051 FD 7E 25    0094*       ld a,(iy+sprite_move_step)
042054 EE 01       0095*       xor %1 ; flips bit zero
042056 FD 77 25    0096*       ld (iy+sprite_move_step),a ; store it
042059 C2 68 20 04 0097*       jp nz,@F ; zag right
04205D             0098*   ;otherwise zag left
04205D 21 00 A0 00 0099*       ld hl,160*256; southwest heading
042061 FD 2F 10    0100*       ld (iy+sprite_heading),hl ; save sprite heading
042064 C3 36 20 04 0101*       jp @zig_zag_start
042068             0102*   @@: ; zag right
042068 21 00 60 00 0103*       ld hl,96*256; southeast heading
04206C FD 2F 10    0104*       ld (iy+sprite_heading),hl ; save sprite heading
04206F C3 36 20 04 0105*       jp @zig_zag_start
042073             0106*   @zig_zag_no_switch:
042073             0107*       ; ld a,(sprite_orientation)
042073 FD 27 10    0108*       ld hl,(iy+sprite_heading)
042076 C3 28 20 04 0109*       jp @compute_velocities
04207A             0110*   ; end en_nav_seek_zag
04207A             0111*   
04207A             0112*   
04207A             0113*   init_enemy_seekers:
04207A             0114*   ; set pointer to seeker sprite table
04207A FD 21 45 95 0115*       ld iy,seekers_base
       04          
04207F FD 7E 00    0116*       ld a,(iy+sprite_id) ; sprite id
042082 1E 03       0117*       ld e,seekers_max ; sprite loop counter
042084             0118*   ; define seeker sprites
042084             0119*   @sprites_loop:
042084 F5          0120*       push af
042085 D5          0121*       push de
042086 CD 71 17 04 0122*   	call vdu_sprite_select
04208A CD 84 17 04 0123*   	call vdu_sprite_clear_frames
04208E 21 4F 01 00 0124*   	ld hl,BUF_SEEKER_000
042092 06 20       0125*   	ld b,32 ; 32 bitmaps for seeker
042094             0126*   @frames_loop:
042094 C5          0127*   	push bc
042095 E5          0128*   	push hl
042096 CD C6 18 04 0129*   	call vdu_sprite_add_buff
04209A E1          0130*   	pop hl
04209B 23          0131*   	inc hl
04209C C1          0132*   	pop bc
04209D 10 F5       0133*   	djnz @frames_loop
04209F D1          0134*       pop de ; sprite loop counter
0420A0 F1          0135*       pop af ; sprite id
0420A1 3C          0136*       inc a
0420A2 1D          0137*       dec e
0420A3 C2 84 20 04 0138*       jp nz,@sprites_loop
0420A7 C9          0139*       ret
0420A8             0140*   ; end init_enemy_seekers
0420A8             0050        include "explosion.inc"
0420A8             0001*   explosions_max: equ 8
0420A8             0002*   explosion_defaults:
0420A8 04          0003*       db explosion            ; type
0420A9 05 01 00    0004*       dl BUF_EXPLOSION_A	    ; base_bufferId
0420AC 05 21 04    0005*       dl move_explosion	    ; move_program
0420AF 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
0420B0 07          0007*       db 7	                ; dim_x
0420B1 07          0008*       db 7                    ; dim_y
0420B2 01          0009*       db 1                    ; num_orientations
0420B3 05          0010*       db 5                    ; num_animations
0420B4 05          0011*       db 5	                ; animation
0420B5 08          0012*       db 8	                ; animation_timer
0420B6 00          0013*       db 0	                ; move_timer
0420B7 00          0014*       db 0	                ; move_step
0420B8 00          0015*       db 0	                ; points
0420B9 00          0016*       db 0	                ; shield_damage
0420BA 00          0017*       db 0                    ; frame
0420BB             0018*   
0420BB             0019*   spawn_explosion:
0420BB 21 A8 20 04 0020*       ld hl,explosion_defaults
0420BF DD 21 05 97 0021*       ld ix,explosions_base
       04          
0420C4 06 08       0022*       ld b,explosions_max
0420C6 CD B4 7A 04 0023*       call spawn_sprite_from_sprite
0420CA D2 00 7A 04 0024*       jp nc,table_deactivate_sprite ; no carry means no free sprite slots, so we deactivate parent sprite and go home
0420CE             0025*   ; other specific initialization
0420CE 21 00 00 00 0026*       ld hl,0
0420D2 DD 2F 07    0027*       ld (ix+sprite_xvel),hl
0420D5 21 00 01 00 0028*       ld hl,1*256
0420D9 DD 2F 0A    0029*       ld (ix+sprite_yvel),hl
0420DC             0030*   ; deactivate parent sprite
0420DC C3 00 7A 04 0031*       jp table_deactivate_sprite
0420E0             0032*   ; end spawn_explosion
0420E0             0033*   
0420E0             0034*   tile_spawn_explosion:
0420E0 21 A8 20 04 0035*       ld hl,explosion_defaults
0420E4 DD 21 05 97 0036*       ld ix,explosions_base
       04          
0420E9 06 08       0037*       ld b,explosions_max
0420EB CD 4F 86 04 0038*       call spawn_sprite_from_tile
0420EF D2 7B 83 04 0039*       jp nc,table_deactivate_tile ; no carry means no free sprite slots, so we deactivate parent tile and go home
0420F3             0040*   ; other specific initialization
0420F3 21 00 00 00 0041*       ld hl,0
0420F7 DD 2F 07    0042*       ld (ix+sprite_xvel),hl
0420FA 21 00 01 00 0043*       ld hl,1*256
0420FE DD 2F 0A    0044*       ld (ix+sprite_yvel),hl
042101             0045*   ; deactivate parent sprite
042101 C3 7B 83 04 0046*       jp table_deactivate_tile
042105             0047*   ; end tile_spawn_explosion
042105             0048*   
042105             0049*   move_explosion:
042105             0050*   ; run the movement program for the explosion
042105 CD 67 7B 04 0051*       call move_sprite
042109 B7          0052*       or a ; a will be non-zero if have scrolled off screen
04210A C2 00 7A 04 0053*       jp nz,table_deactivate_sprite
04210E             0054*   ; do the animations
04210E FD 35 23    0055*       dec (iy+sprite_animation_timer)
042111 C0          0056*       ret nz ; not time to bump animation frame
042112 FD 34 28    0057*       inc (iy+sprite_frame)
042115 FD 35 22    0058*       dec (iy+sprite_animation)
042118 CA 00 7A 04 0059*       jp z,table_deactivate_sprite ; reached the end of the animations
04211C 3E 08       0060*       ld a,8 ; reset animation timer
04211E FD 77 23    0061*       ld (iy+sprite_animation_timer),a
042121 C9          0062*       ret
042122             0063*   ; end move_explosion
042122             0064*   
042122             0065*   move_explosions:
042122             0066*   ; initialize pointers and loop counter
042122 FD 21 05 97 0067*       ld iy,explosions_base ; set iy to first record in table
       04          
042127 06 08       0068*       ld b,explosions_max ; loop counter
042129 CD E6 7A 04 0069*       call move_sprite_group
04212D C9          0070*       ret
04212E             0071*   ; end move_explosions
04212E             0072*   
04212E             0073*   init_explosions:
04212E             0074*   ; set pointer to explosion sprite table
04212E FD 21 05 97 0075*       ld iy,explosions_base
       04          
042133 FD 7E 00    0076*       ld a,(iy+sprite_id) ; sprite id
042136 1E 08       0077*       ld e,explosions_max ; sprite loop counter
042138             0078*   ; define explosion sprites
042138             0079*   @sprites_loop:
042138 F5          0080*       push af
042139 D5          0081*       push de
04213A CD 71 17 04 0082*   	call vdu_sprite_select
04213E CD 84 17 04 0083*   	call vdu_sprite_clear_frames
042142 21 05 01 00 0084*   	ld hl,BUF_EXPLOSION_A
042146 06 05       0085*   	ld b,5 ; 5 bitmaps for explosion
042148             0086*   @frames_loop:
042148 C5          0087*   	push bc
042149 E5          0088*   	push hl
04214A CD C6 18 04 0089*   	call vdu_sprite_add_buff
04214E E1          0090*   	pop hl
04214F 23          0091*   	inc hl
042150 C1          0092*   	pop bc
042151 10 F5       0093*   	djnz @frames_loop
042153 D1          0094*       pop de ; sprite loop counter
042154 F1          0095*       pop af ; sprite id
042155 3C          0096*       inc a
042156 1D          0097*       dec e
042157 C2 38 21 04 0098*       jp nz,@sprites_loop
04215B C9          0099*       ret
04215C             0100*   ; end init_explosions
04215C             0051        include "fonts_list.inc"
04215C             0001*   ; Generated by asm_config_editor.py
04215C             0002*   font_list_record_size: equ 12
04215C             0003*   font_list_width: equ 0
04215C             0004*   font_list_height: equ 3
04215C             0005*   font_list_bufferId: equ 6
04215C             0006*   font_list_filename: equ 9
04215C             0007*   
04215C             0008*   num_fonts: equ 7
04215C             0009*   
04215C             0010*   ; Index list:
04215C             0011*   amiga_forever_8x8: equ 64000
04215C             0012*   computer_pixel_7_8x12: equ 64001
04215C             0013*   computer_pixel_7_8x16: equ 64002
04215C             0014*   Lat2_VGA8_8x8: equ 64003
04215C             0015*   Lat7_VGA8_8x8: equ 64004
04215C             0016*   Squarewave_Bold_8x12: equ 64005
04215C             0017*   wendy_neue_6x6: equ 64006
04215C             0018*   
04215C             0019*   font_list: ; width; height; bufferId; filename;:
04215C 08 00 00 08 0020*   	dl 8, 8, 64000, fn_amiga_forever_8x8
       00 00 00 FA 
       00 B0 21 04 
042168 08 00 00 0C 0021*   	dl 8, 12, 64001, fn_computer_pixel_7_8x12
       00 00 01 FA 
       00 CD 21 04 
042174 08 00 00 10 0022*   	dl 8, 16, 64002, fn_computer_pixel_7_8x16
       00 00 02 FA 
       00 EE 21 04 
042180 08 00 00 08 0023*   	dl 8, 8, 64003, fn_Lat2_VGA8_8x8
       00 00 03 FA 
       00 0F 22 04 
04218C 08 00 00 08 0024*   	dl 8, 8, 64004, fn_Lat7_VGA8_8x8
       00 00 04 FA 
       00 28 22 04 
042198 08 00 00 0C 0025*   	dl 8, 12, 64005, fn_Squarewave_Bold_8x12
       00 00 05 FA 
       00 41 22 04 
0421A4 06 00 00 06 0026*   	dl 6, 6, 64006, fn_wendy_neue_6x6
       00 00 06 FA 
       00 61 22 04 
0421B0             0027*   
0421B0             0028*   ; files_list: ; filename:
0421B0 66 6F 6E 74 0029*   fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
0421CD 66 6F 6E 74 0030*   fn_computer_pixel_7_8x12: db "fonts/computer_pixel_7_8x12.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 32 2E 
       66 6F 6E 74 
       00          
0421EE 66 6F 6E 74 0031*   fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
04220F 66 6F 6E 74 0032*   fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042228 66 6F 6E 74 0033*   fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042241 66 6F 6E 74 0034*   fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
042261 66 6F 6E 74 0035*   fn_wendy_neue_6x6: db "fonts/wendy_neue_6x6.font",0
       73 2F 77 65 
       6E 64 79 5F 
       6E 65 75 65 
       5F 36 78 36 
       2E 66 6F 6E 
       74 00       
04227B             0052        include "images_bg.inc"
04227B             0001*   ; Generated by make_images.py
04227B             0002*   
04227B             0003*   bg_num_images: equ 8
04227B             0004*   
04227B             0005*   ; buffer_ids:
04227B             0006*   BUF_BG_STARS_0: equ 1024
04227B             0007*   BUF_BG_STARS_1: equ 1025
04227B             0008*   BUF_BG_STARS_2: equ 1026
04227B             0009*   BUF_BG_STARS_3: equ 1027
04227B             0010*   BUF_BG_STARS_4: equ 1028
04227B             0011*   BUF_BG_STARS_5: equ 1029
04227B             0012*   BUF_BG_STARS_6: equ 1030
04227B             0013*   BUF_BG_STARS_7: equ 1031
04227B             0014*   
04227B             0015*   bg_image_list: ; type; width; height; size; filename; bufferId:
04227B 01 00 00 00 0016*   	dl 1, 256, 256, 65536, fn_bg_stars_0, 1024
       01 00 00 01 
       00 00 00 01 
       0B 23 04 00 
       04 00       
04228D 01 00 00 00 0017*   	dl 1, 256, 256, 65536, fn_bg_stars_1, 1025
       01 00 00 01 
       00 00 00 01 
       1F 23 04 01 
       04 00       
04229F 01 00 00 00 0018*   	dl 1, 256, 256, 65536, fn_bg_stars_2, 1026
       01 00 00 01 
       00 00 00 01 
       33 23 04 02 
       04 00       
0422B1 01 00 00 00 0019*   	dl 1, 256, 256, 65536, fn_bg_stars_3, 1027
       01 00 00 01 
       00 00 00 01 
       47 23 04 03 
       04 00       
0422C3 01 00 00 00 0020*   	dl 1, 256, 256, 65536, fn_bg_stars_4, 1028
       01 00 00 01 
       00 00 00 01 
       5B 23 04 04 
       04 00       
0422D5 01 00 00 00 0021*   	dl 1, 256, 256, 65536, fn_bg_stars_5, 1029
       01 00 00 01 
       00 00 00 01 
       6F 23 04 05 
       04 00       
0422E7 01 00 00 00 0022*   	dl 1, 256, 256, 65536, fn_bg_stars_6, 1030
       01 00 00 01 
       00 00 00 01 
       83 23 04 06 
       04 00       
0422F9 01 00 00 00 0023*   	dl 1, 256, 256, 65536, fn_bg_stars_7, 1031
       01 00 00 01 
       00 00 00 01 
       97 23 04 07 
       04 00       
04230B             0024*   
04230B             0025*   ; files_list: ; filename:
04230B 62 67 2F 62 0026*   fn_bg_stars_0: db "bg/bg_stars_0.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       30 2E 72 67 
       62 61 32 00 
04231F 62 67 2F 62 0027*   fn_bg_stars_1: db "bg/bg_stars_1.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       31 2E 72 67 
       62 61 32 00 
042333 62 67 2F 62 0028*   fn_bg_stars_2: db "bg/bg_stars_2.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       32 2E 72 67 
       62 61 32 00 
042347 62 67 2F 62 0029*   fn_bg_stars_3: db "bg/bg_stars_3.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       33 2E 72 67 
       62 61 32 00 
04235B 62 67 2F 62 0030*   fn_bg_stars_4: db "bg/bg_stars_4.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       34 2E 72 67 
       62 61 32 00 
04236F 62 67 2F 62 0031*   fn_bg_stars_5: db "bg/bg_stars_5.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       35 2E 72 67 
       62 61 32 00 
042383 62 67 2F 62 0032*   fn_bg_stars_6: db "bg/bg_stars_6.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       36 2E 72 67 
       62 61 32 00 
042397 62 67 2F 62 0033*   fn_bg_stars_7: db "bg/bg_stars_7.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       37 2E 72 67 
       62 61 32 00 
0423AB             0053        include "images_tiles_dg.inc"
0423AB             0001*   ; Generated by tiles_dg.py
0423AB             0002*   
0423AB             0003*   tiles_dg_num_images: equ 187
0423AB             0004*   
0423AB             0005*   ; bufferIds:
0423AB             0006*   
0423AB             0007*   
0423AB             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
0423AB 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       D1 30 04 00 
       02 00       
0423BD 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       E6 30 04 01 
       02 00       
0423CF 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       FB 30 04 02 
       02 00       
0423E1 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       10 31 04 03 
       02 00       
0423F3 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       25 31 04 04 
       02 00       
042405 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       3A 31 04 05 
       02 00       
042417 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       4F 31 04 06 
       02 00       
042429 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       64 31 04 07 
       02 00       
04243B 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       79 31 04 08 
       02 00       
04244D 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       8E 31 04 09 
       02 00       
04245F 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       A3 31 04 0A 
       02 00       
042471 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       B8 31 04 0B 
       02 00       
042483 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       CD 31 04 10 
       02 00       
042495 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       E2 31 04 21 
       02 00       
0424A7 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       F7 31 04 22 
       02 00       
0424B9 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       0C 32 04 23 
       02 00       
0424CB 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       21 32 04 24 
       02 00       
0424DD 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       36 32 04 25 
       02 00       
0424EF 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       4B 32 04 26 
       02 00       
042501 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       60 32 04 27 
       02 00       
042513 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       75 32 04 28 
       02 00       
042525 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_045, 557
       00 00 10 00 
       00 00 01 00 
       8A 32 04 2D 
       02 00       
042537 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_046, 558
       00 00 10 00 
       00 00 01 00 
       9F 32 04 2E 
       02 00       
042549 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_047, 559
       00 00 10 00 
       00 00 01 00 
       B4 32 04 2F 
       02 00       
04255B 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_048, 560
       00 00 10 00 
       00 00 01 00 
       C9 32 04 30 
       02 00       
04256D 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       DE 32 04 31 
       02 00       
04257F 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       F3 32 04 32 
       02 00       
042591 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       08 33 04 33 
       02 00       
0425A3 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       1D 33 04 34 
       02 00       
0425B5 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       32 33 04 35 
       02 00       
0425C7 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       47 33 04 36 
       02 00       
0425D9 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       5C 33 04 37 
       02 00       
0425EB 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       71 33 04 38 
       02 00       
0425FD 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       86 33 04 39 
       02 00       
04260F 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       9B 33 04 3A 
       02 00       
042621 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       B0 33 04 3B 
       02 00       
042633 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_061, 573
       00 00 10 00 
       00 00 01 00 
       C5 33 04 3D 
       02 00       
042645 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_062, 574
       00 00 10 00 
       00 00 01 00 
       DA 33 04 3E 
       02 00       
042657 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_063, 575
       00 00 10 00 
       00 00 01 00 
       EF 33 04 3F 
       02 00       
042669 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_064, 576
       00 00 10 00 
       00 00 01 00 
       04 34 04 40 
       02 00       
04267B 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       19 34 04 41 
       02 00       
04268D 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       2E 34 04 42 
       02 00       
04269F 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       43 34 04 43 
       02 00       
0426B1 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       58 34 04 44 
       02 00       
0426C3 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       6D 34 04 45 
       02 00       
0426D5 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       82 34 04 46 
       02 00       
0426E7 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       97 34 04 47 
       02 00       
0426F9 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       AC 34 04 48 
       02 00       
04270B 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       C1 34 04 49 
       02 00       
04271D 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       D6 34 04 4A 
       02 00       
04272F 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       EB 34 04 4B 
       02 00       
042741 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_076, 588
       00 00 10 00 
       00 00 01 00 
       00 35 04 4C 
       02 00       
042753 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_077, 589
       00 00 10 00 
       00 00 01 00 
       15 35 04 4D 
       02 00       
042765 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       2A 35 04 51 
       02 00       
042777 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       3F 35 04 52 
       02 00       
042789 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       54 35 04 53 
       02 00       
04279B 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       69 35 04 54 
       02 00       
0427AD 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       7E 35 04 55 
       02 00       
0427BF 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       93 35 04 56 
       02 00       
0427D1 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       A8 35 04 57 
       02 00       
0427E3 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       BD 35 04 58 
       02 00       
0427F5 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       D2 35 04 59 
       02 00       
042807 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       E7 35 04 5A 
       02 00       
042819 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       FC 35 04 5B 
       02 00       
04282B 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_092, 604
       00 00 10 00 
       00 00 01 00 
       11 36 04 5C 
       02 00       
04283D 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_093, 605
       00 00 10 00 
       00 00 01 00 
       26 36 04 5D 
       02 00       
04284F 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       3B 36 04 61 
       02 00       
042861 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       50 36 04 62 
       02 00       
042873 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       65 36 04 63 
       02 00       
042885 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       7A 36 04 64 
       02 00       
042897 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       8F 36 04 65 
       02 00       
0428A9 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       A4 36 04 66 
       02 00       
0428BB 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       B9 36 04 67 
       02 00       
0428CD 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       CE 36 04 68 
       02 00       
0428DF 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       E3 36 04 69 
       02 00       
0428F1 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       F8 36 04 6A 
       02 00       
042903 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       0D 37 04 6B 
       02 00       
042915 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       22 37 04 6C 
       02 00       
042927 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       37 37 04 71 
       02 00       
042939 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       4C 37 04 72 
       02 00       
04294B 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       61 37 04 73 
       02 00       
04295D 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       76 37 04 74 
       02 00       
04296F 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       8B 37 04 75 
       02 00       
042981 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       A0 37 04 76 
       02 00       
042993 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       B5 37 04 77 
       02 00       
0429A5 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       CA 37 04 78 
       02 00       
0429B7 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       DF 37 04 79 
       02 00       
0429C9 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       F4 37 04 7A 
       02 00       
0429DB 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       09 38 04 7B 
       02 00       
0429ED 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       1E 38 04 81 
       02 00       
0429FF 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       33 38 04 82 
       02 00       
042A11 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       48 38 04 83 
       02 00       
042A23 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       5D 38 04 84 
       02 00       
042A35 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       72 38 04 85 
       02 00       
042A47 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       87 38 04 86 
       02 00       
042A59 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       9C 38 04 87 
       02 00       
042A6B 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       B1 38 04 88 
       02 00       
042A7D 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       C6 38 04 89 
       02 00       
042A8F 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       DB 38 04 8A 
       02 00       
042AA1 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       F0 38 04 8B 
       02 00       
042AB3 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       05 39 04 8C 
       02 00       
042AC5 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       1A 39 04 91 
       02 00       
042AD7 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       2F 39 04 92 
       02 00       
042AE9 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       44 39 04 93 
       02 00       
042AFB 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       59 39 04 94 
       02 00       
042B0D 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       6E 39 04 95 
       02 00       
042B1F 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       83 39 04 96 
       02 00       
042B31 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       98 39 04 97 
       02 00       
042B43 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       AD 39 04 98 
       02 00       
042B55 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       C2 39 04 99 
       02 00       
042B67 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       D7 39 04 9A 
       02 00       
042B79 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       EC 39 04 9B 
       02 00       
042B8B 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       01 3A 04 9C 
       02 00       
042B9D 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       16 3A 04 A1 
       02 00       
042BAF 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       2B 3A 04 A2 
       02 00       
042BC1 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       40 3A 04 A3 
       02 00       
042BD3 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       55 3A 04 A4 
       02 00       
042BE5 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       6A 3A 04 A5 
       02 00       
042BF7 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       7F 3A 04 A6 
       02 00       
042C09 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       94 3A 04 A7 
       02 00       
042C1B 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       A9 3A 04 A8 
       02 00       
042C2D 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       BE 3A 04 A9 
       02 00       
042C3F 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       D3 3A 04 AA 
       02 00       
042C51 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       E8 3A 04 AB 
       02 00       
042C63 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       FD 3A 04 AC 
       02 00       
042C75 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_174, 686
       00 00 10 00 
       00 00 01 00 
       12 3B 04 AE 
       02 00       
042C87 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_175, 687
       00 00 10 00 
       00 00 01 00 
       27 3B 04 AF 
       02 00       
042C99 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_176, 688
       00 00 10 00 
       00 00 01 00 
       3C 3B 04 B0 
       02 00       
042CAB 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       51 3B 04 B1 
       02 00       
042CBD 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       66 3B 04 B2 
       02 00       
042CCF 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       7B 3B 04 B3 
       02 00       
042CE1 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       90 3B 04 B4 
       02 00       
042CF3 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       A5 3B 04 B5 
       02 00       
042D05 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       BA 3B 04 B6 
       02 00       
042D17 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       CF 3B 04 B7 
       02 00       
042D29 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       E4 3B 04 B8 
       02 00       
042D3B 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       F9 3B 04 B9 
       02 00       
042D4D 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       0E 3C 04 BA 
       02 00       
042D5F 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       23 3C 04 BB 
       02 00       
042D71 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       38 3C 04 BC 
       02 00       
042D83 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_190, 702
       00 00 10 00 
       00 00 01 00 
       4D 3C 04 BE 
       02 00       
042D95 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_191, 703
       00 00 10 00 
       00 00 01 00 
       62 3C 04 BF 
       02 00       
042DA7 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_192, 704
       00 00 10 00 
       00 00 01 00 
       77 3C 04 C0 
       02 00       
042DB9 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       8C 3C 04 C1 
       02 00       
042DCB 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       A1 3C 04 C2 
       02 00       
042DDD 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       B6 3C 04 C3 
       02 00       
042DEF 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       CB 3C 04 C4 
       02 00       
042E01 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       E0 3C 04 C5 
       02 00       
042E13 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       F5 3C 04 C6 
       02 00       
042E25 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       0A 3D 04 C7 
       02 00       
042E37 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       1F 3D 04 C8 
       02 00       
042E49 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       34 3D 04 C9 
       02 00       
042E5B 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       49 3D 04 CA 
       02 00       
042E6D 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       5E 3D 04 CB 
       02 00       
042E7F 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       73 3D 04 CC 
       02 00       
042E91 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_206, 718
       00 00 10 00 
       00 00 01 00 
       88 3D 04 CE 
       02 00       
042EA3 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_207, 719
       00 00 10 00 
       00 00 01 00 
       9D 3D 04 CF 
       02 00       
042EB5 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_208, 720
       00 00 10 00 
       00 00 01 00 
       B2 3D 04 D0 
       02 00       
042EC7 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       C7 3D 04 D1 
       02 00       
042ED9 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       DC 3D 04 D2 
       02 00       
042EEB 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       F1 3D 04 D3 
       02 00       
042EFD 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       06 3E 04 D4 
       02 00       
042F0F 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       1B 3E 04 D5 
       02 00       
042F21 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       30 3E 04 D6 
       02 00       
042F33 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       45 3E 04 D7 
       02 00       
042F45 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       5A 3E 04 D8 
       02 00       
042F57 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       6F 3E 04 D9 
       02 00       
042F69 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       84 3E 04 DA 
       02 00       
042F7B 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       99 3E 04 DB 
       02 00       
042F8D 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       AE 3E 04 DC 
       02 00       
042F9F 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       C3 3E 04 E1 
       02 00       
042FB1 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       D8 3E 04 E2 
       02 00       
042FC3 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       ED 3E 04 E3 
       02 00       
042FD5 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       02 3F 04 E4 
       02 00       
042FE7 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       17 3F 04 E5 
       02 00       
042FF9 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       2C 3F 04 E6 
       02 00       
04300B 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       41 3F 04 E7 
       02 00       
04301D 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       56 3F 04 E8 
       02 00       
04302F 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       6B 3F 04 E9 
       02 00       
043041 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       80 3F 04 EA 
       02 00       
043053 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       95 3F 04 EB 
       02 00       
043065 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       AA 3F 04 EC 
       02 00       
043077 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       BF 3F 04 F1 
       02 00       
043089 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       D4 3F 04 F2 
       02 00       
04309B 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       E9 3F 04 F5 
       02 00       
0430AD 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       FE 3F 04 F6 
       02 00       
0430BF 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       13 40 04 F8 
       02 00       
0430D1             0196*   
0430D1             0197*   tiles_dg_files_list: ; filename:
0430D1 74 69 6C 65 0198*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0430E6 74 69 6C 65 0199*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
0430FB 74 69 6C 65 0200*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
043110 74 69 6C 65 0201*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
043125 74 69 6C 65 0202*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
04313A 74 69 6C 65 0203*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
04314F 74 69 6C 65 0204*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
043164 74 69 6C 65 0205*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
043179 74 69 6C 65 0206*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
04318E 74 69 6C 65 0207*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
0431A3 74 69 6C 65 0208*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
0431B8 74 69 6C 65 0209*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
0431CD 74 69 6C 65 0210*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0431E2 74 69 6C 65 0211*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
0431F7 74 69 6C 65 0212*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
04320C 74 69 6C 65 0213*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
043221 74 69 6C 65 0214*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
043236 74 69 6C 65 0215*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
04324B 74 69 6C 65 0216*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
043260 74 69 6C 65 0217*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
043275 74 69 6C 65 0218*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
04328A 74 69 6C 65 0219*   fn_dg_045: db "tiles/dg/0/045.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 35 2E 72 
       67 62 61 32 
       00          
04329F 74 69 6C 65 0220*   fn_dg_046: db "tiles/dg/0/046.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 36 2E 72 
       67 62 61 32 
       00          
0432B4 74 69 6C 65 0221*   fn_dg_047: db "tiles/dg/0/047.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 37 2E 72 
       67 62 61 32 
       00          
0432C9 74 69 6C 65 0222*   fn_dg_048: db "tiles/dg/0/048.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0432DE 74 69 6C 65 0223*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
0432F3 74 69 6C 65 0224*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
043308 74 69 6C 65 0225*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
04331D 74 69 6C 65 0226*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
043332 74 69 6C 65 0227*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
043347 74 69 6C 65 0228*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
04335C 74 69 6C 65 0229*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
043371 74 69 6C 65 0230*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
043386 74 69 6C 65 0231*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
04339B 74 69 6C 65 0232*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
0433B0 74 69 6C 65 0233*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
0433C5 74 69 6C 65 0234*   fn_dg_061: db "tiles/dg/0/061.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 31 2E 72 
       67 62 61 32 
       00          
0433DA 74 69 6C 65 0235*   fn_dg_062: db "tiles/dg/0/062.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 32 2E 72 
       67 62 61 32 
       00          
0433EF 74 69 6C 65 0236*   fn_dg_063: db "tiles/dg/0/063.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 33 2E 72 
       67 62 61 32 
       00          
043404 74 69 6C 65 0237*   fn_dg_064: db "tiles/dg/0/064.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
043419 74 69 6C 65 0238*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
04342E 74 69 6C 65 0239*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
043443 74 69 6C 65 0240*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
043458 74 69 6C 65 0241*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
04346D 74 69 6C 65 0242*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
043482 74 69 6C 65 0243*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
043497 74 69 6C 65 0244*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
0434AC 74 69 6C 65 0245*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0434C1 74 69 6C 65 0246*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
0434D6 74 69 6C 65 0247*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
0434EB 74 69 6C 65 0248*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
043500 74 69 6C 65 0249*   fn_dg_076: db "tiles/dg/0/076.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 36 2E 72 
       67 62 61 32 
       00          
043515 74 69 6C 65 0250*   fn_dg_077: db "tiles/dg/0/077.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 37 2E 72 
       67 62 61 32 
       00          
04352A 74 69 6C 65 0251*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
04353F 74 69 6C 65 0252*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
043554 74 69 6C 65 0253*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
043569 74 69 6C 65 0254*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
04357E 74 69 6C 65 0255*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
043593 74 69 6C 65 0256*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
0435A8 74 69 6C 65 0257*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
0435BD 74 69 6C 65 0258*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0435D2 74 69 6C 65 0259*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
0435E7 74 69 6C 65 0260*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
0435FC 74 69 6C 65 0261*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
043611 74 69 6C 65 0262*   fn_dg_092: db "tiles/dg/0/092.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 32 2E 72 
       67 62 61 32 
       00          
043626 74 69 6C 65 0263*   fn_dg_093: db "tiles/dg/0/093.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 33 2E 72 
       67 62 61 32 
       00          
04363B 74 69 6C 65 0264*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
043650 74 69 6C 65 0265*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
043665 74 69 6C 65 0266*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
04367A 74 69 6C 65 0267*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
04368F 74 69 6C 65 0268*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
0436A4 74 69 6C 65 0269*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
0436B9 74 69 6C 65 0270*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
0436CE 74 69 6C 65 0271*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0436E3 74 69 6C 65 0272*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
0436F8 74 69 6C 65 0273*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
04370D 74 69 6C 65 0274*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
043722 74 69 6C 65 0275*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
043737 74 69 6C 65 0276*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
04374C 74 69 6C 65 0277*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
043761 74 69 6C 65 0278*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
043776 74 69 6C 65 0279*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
04378B 74 69 6C 65 0280*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
0437A0 74 69 6C 65 0281*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
0437B5 74 69 6C 65 0282*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
0437CA 74 69 6C 65 0283*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0437DF 74 69 6C 65 0284*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
0437F4 74 69 6C 65 0285*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
043809 74 69 6C 65 0286*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
04381E 74 69 6C 65 0287*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
043833 74 69 6C 65 0288*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
043848 74 69 6C 65 0289*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
04385D 74 69 6C 65 0290*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
043872 74 69 6C 65 0291*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
043887 74 69 6C 65 0292*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
04389C 74 69 6C 65 0293*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
0438B1 74 69 6C 65 0294*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0438C6 74 69 6C 65 0295*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
0438DB 74 69 6C 65 0296*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
0438F0 74 69 6C 65 0297*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
043905 74 69 6C 65 0298*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
04391A 74 69 6C 65 0299*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
04392F 74 69 6C 65 0300*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
043944 74 69 6C 65 0301*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
043959 74 69 6C 65 0302*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
04396E 74 69 6C 65 0303*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
043983 74 69 6C 65 0304*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
043998 74 69 6C 65 0305*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
0439AD 74 69 6C 65 0306*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0439C2 74 69 6C 65 0307*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
0439D7 74 69 6C 65 0308*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
0439EC 74 69 6C 65 0309*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
043A01 74 69 6C 65 0310*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
043A16 74 69 6C 65 0311*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
043A2B 74 69 6C 65 0312*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
043A40 74 69 6C 65 0313*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
043A55 74 69 6C 65 0314*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
043A6A 74 69 6C 65 0315*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
043A7F 74 69 6C 65 0316*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
043A94 74 69 6C 65 0317*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
043AA9 74 69 6C 65 0318*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
043ABE 74 69 6C 65 0319*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
043AD3 74 69 6C 65 0320*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
043AE8 74 69 6C 65 0321*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
043AFD 74 69 6C 65 0322*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
043B12 74 69 6C 65 0323*   fn_dg_174: db "tiles/dg/0/174.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 34 2E 72 
       67 62 61 32 
       00          
043B27 74 69 6C 65 0324*   fn_dg_175: db "tiles/dg/0/175.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 35 2E 72 
       67 62 61 32 
       00          
043B3C 74 69 6C 65 0325*   fn_dg_176: db "tiles/dg/0/176.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
043B51 74 69 6C 65 0326*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
043B66 74 69 6C 65 0327*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
043B7B 74 69 6C 65 0328*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
043B90 74 69 6C 65 0329*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
043BA5 74 69 6C 65 0330*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
043BBA 74 69 6C 65 0331*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
043BCF 74 69 6C 65 0332*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
043BE4 74 69 6C 65 0333*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
043BF9 74 69 6C 65 0334*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
043C0E 74 69 6C 65 0335*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
043C23 74 69 6C 65 0336*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
043C38 74 69 6C 65 0337*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
043C4D 74 69 6C 65 0338*   fn_dg_190: db "tiles/dg/0/190.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 30 2E 72 
       67 62 61 32 
       00          
043C62 74 69 6C 65 0339*   fn_dg_191: db "tiles/dg/0/191.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 31 2E 72 
       67 62 61 32 
       00          
043C77 74 69 6C 65 0340*   fn_dg_192: db "tiles/dg/0/192.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
043C8C 74 69 6C 65 0341*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
043CA1 74 69 6C 65 0342*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
043CB6 74 69 6C 65 0343*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
043CCB 74 69 6C 65 0344*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
043CE0 74 69 6C 65 0345*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
043CF5 74 69 6C 65 0346*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
043D0A 74 69 6C 65 0347*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
043D1F 74 69 6C 65 0348*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
043D34 74 69 6C 65 0349*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
043D49 74 69 6C 65 0350*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
043D5E 74 69 6C 65 0351*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
043D73 74 69 6C 65 0352*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
043D88 74 69 6C 65 0353*   fn_dg_206: db "tiles/dg/0/206.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 36 2E 72 
       67 62 61 32 
       00          
043D9D 74 69 6C 65 0354*   fn_dg_207: db "tiles/dg/0/207.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 37 2E 72 
       67 62 61 32 
       00          
043DB2 74 69 6C 65 0355*   fn_dg_208: db "tiles/dg/0/208.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
043DC7 74 69 6C 65 0356*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
043DDC 74 69 6C 65 0357*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
043DF1 74 69 6C 65 0358*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
043E06 74 69 6C 65 0359*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
043E1B 74 69 6C 65 0360*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
043E30 74 69 6C 65 0361*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
043E45 74 69 6C 65 0362*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
043E5A 74 69 6C 65 0363*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
043E6F 74 69 6C 65 0364*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
043E84 74 69 6C 65 0365*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
043E99 74 69 6C 65 0366*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
043EAE 74 69 6C 65 0367*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
043EC3 74 69 6C 65 0368*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
043ED8 74 69 6C 65 0369*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
043EED 74 69 6C 65 0370*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
043F02 74 69 6C 65 0371*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
043F17 74 69 6C 65 0372*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
043F2C 74 69 6C 65 0373*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
043F41 74 69 6C 65 0374*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
043F56 74 69 6C 65 0375*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
043F6B 74 69 6C 65 0376*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
043F80 74 69 6C 65 0377*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
043F95 74 69 6C 65 0378*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
043FAA 74 69 6C 65 0379*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
043FBF 74 69 6C 65 0380*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
043FD4 74 69 6C 65 0381*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
043FE9 74 69 6C 65 0382*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
043FFE 74 69 6C 65 0383*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
044013 74 69 6C 65 0384*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044028             0054        include "images_sprites.inc"
044028             0001*   ; Generated by make_images.py
044028             0002*   
044028             0003*   sprites_num_images: equ 157
044028             0004*   
044028             0005*   ; buffer_ids:
044028             0006*   BUF_CRATER: equ 256
044028             0007*   BUF_CRATER_0: equ 257
044028             0008*   BUF_CRATER_1: equ 258
044028             0009*   BUF_CRATER_2: equ 259
044028             0010*   BUF_CRATER_3: equ 260
044028             0011*   BUF_EXPLOSION_A: equ 261
044028             0012*   BUF_EXPLOSION_B: equ 262
044028             0013*   BUF_EXPLOSION_C: equ 263
044028             0014*   BUF_EXPLOSION_D: equ 264
044028             0015*   BUF_EXPLOSION_E: equ 265
044028             0016*   BUF_FIREBALL_2_000: equ 266
044028             0017*   BUF_FIREBALL_2_008: equ 267
044028             0018*   BUF_FIREBALL_2_016: equ 268
044028             0019*   BUF_FIREBALL_2_024: equ 269
044028             0020*   BUF_FIREBALL_2_032: equ 270
044028             0021*   BUF_FIREBALL_2_040: equ 271
044028             0022*   BUF_FIREBALL_2_048: equ 272
044028             0023*   BUF_FIREBALL_2_056: equ 273
044028             0024*   BUF_FIREBALL_2_064: equ 274
044028             0025*   BUF_FIREBALL_2_072: equ 275
044028             0026*   BUF_FIREBALL_2_080: equ 276
044028             0027*   BUF_FIREBALL_2_088: equ 277
044028             0028*   BUF_FIREBALL_2_096: equ 278
044028             0029*   BUF_FIREBALL_2_104: equ 279
044028             0030*   BUF_FIREBALL_2_112: equ 280
044028             0031*   BUF_FIREBALL_2_120: equ 281
044028             0032*   BUF_FIREBALL_2_128: equ 282
044028             0033*   BUF_FIREBALL_2_136: equ 283
044028             0034*   BUF_FIREBALL_2_144: equ 284
044028             0035*   BUF_FIREBALL_2_152: equ 285
044028             0036*   BUF_FIREBALL_2_160: equ 286
044028             0037*   BUF_FIREBALL_2_168: equ 287
044028             0038*   BUF_FIREBALL_2_176: equ 288
044028             0039*   BUF_FIREBALL_2_184: equ 289
044028             0040*   BUF_FIREBALL_2_192: equ 290
044028             0041*   BUF_FIREBALL_2_200: equ 291
044028             0042*   BUF_FIREBALL_2_208: equ 292
044028             0043*   BUF_FIREBALL_2_216: equ 293
044028             0044*   BUF_FIREBALL_2_224: equ 294
044028             0045*   BUF_FIREBALL_2_232: equ 295
044028             0046*   BUF_FIREBALL_2_240: equ 296
044028             0047*   BUF_FIREBALL_2_248: equ 297
044028             0048*   BUF_FIREBALL_3_000: equ 298
044028             0049*   BUF_FIREBALL_3_008: equ 299
044028             0050*   BUF_FIREBALL_3_016: equ 300
044028             0051*   BUF_FIREBALL_3_024: equ 301
044028             0052*   BUF_FIREBALL_3_032: equ 302
044028             0053*   BUF_FIREBALL_3_040: equ 303
044028             0054*   BUF_FIREBALL_3_048: equ 304
044028             0055*   BUF_FIREBALL_3_056: equ 305
044028             0056*   BUF_FIREBALL_3_064: equ 306
044028             0057*   BUF_FIREBALL_3_072: equ 307
044028             0058*   BUF_FIREBALL_3_080: equ 308
044028             0059*   BUF_FIREBALL_3_088: equ 309
044028             0060*   BUF_FIREBALL_3_096: equ 310
044028             0061*   BUF_FIREBALL_3_104: equ 311
044028             0062*   BUF_FIREBALL_3_112: equ 312
044028             0063*   BUF_FIREBALL_3_120: equ 313
044028             0064*   BUF_FIREBALL_3_128: equ 314
044028             0065*   BUF_FIREBALL_3_136: equ 315
044028             0066*   BUF_FIREBALL_3_144: equ 316
044028             0067*   BUF_FIREBALL_3_152: equ 317
044028             0068*   BUF_FIREBALL_3_160: equ 318
044028             0069*   BUF_FIREBALL_3_168: equ 319
044028             0070*   BUF_FIREBALL_3_176: equ 320
044028             0071*   BUF_FIREBALL_3_184: equ 321
044028             0072*   BUF_FIREBALL_3_192: equ 322
044028             0073*   BUF_FIREBALL_3_200: equ 323
044028             0074*   BUF_FIREBALL_3_208: equ 324
044028             0075*   BUF_FIREBALL_3_216: equ 325
044028             0076*   BUF_FIREBALL_3_224: equ 326
044028             0077*   BUF_FIREBALL_3_232: equ 327
044028             0078*   BUF_FIREBALL_3_240: equ 328
044028             0079*   BUF_FIREBALL_3_248: equ 329
044028             0080*   BUF_LASER_A: equ 330
044028             0081*   BUF_LASER_B: equ 331
044028             0082*   BUF_LIGHTNING_H_0: equ 332
044028             0083*   BUF_LIGHTNING_H_1: equ 333
044028             0084*   BUF_PAD: equ 334
044028             0085*   BUF_SEEKER_000: equ 335
044028             0086*   BUF_SEEKER_008: equ 336
044028             0087*   BUF_SEEKER_016: equ 337
044028             0088*   BUF_SEEKER_024: equ 338
044028             0089*   BUF_SEEKER_032: equ 339
044028             0090*   BUF_SEEKER_040: equ 340
044028             0091*   BUF_SEEKER_048: equ 341
044028             0092*   BUF_SEEKER_056: equ 342
044028             0093*   BUF_SEEKER_064: equ 343
044028             0094*   BUF_SEEKER_072: equ 344
044028             0095*   BUF_SEEKER_080: equ 345
044028             0096*   BUF_SEEKER_088: equ 346
044028             0097*   BUF_SEEKER_096: equ 347
044028             0098*   BUF_SEEKER_104: equ 348
044028             0099*   BUF_SEEKER_112: equ 349
044028             0100*   BUF_SEEKER_120: equ 350
044028             0101*   BUF_SEEKER_128: equ 351
044028             0102*   BUF_SEEKER_136: equ 352
044028             0103*   BUF_SEEKER_144: equ 353
044028             0104*   BUF_SEEKER_152: equ 354
044028             0105*   BUF_SEEKER_160: equ 355
044028             0106*   BUF_SEEKER_168: equ 356
044028             0107*   BUF_SEEKER_176: equ 357
044028             0108*   BUF_SEEKER_184: equ 358
044028             0109*   BUF_SEEKER_192: equ 359
044028             0110*   BUF_SEEKER_200: equ 360
044028             0111*   BUF_SEEKER_208: equ 361
044028             0112*   BUF_SEEKER_216: equ 362
044028             0113*   BUF_SEEKER_224: equ 363
044028             0114*   BUF_SEEKER_232: equ 364
044028             0115*   BUF_SEEKER_240: equ 365
044028             0116*   BUF_SEEKER_248: equ 366
044028             0117*   BUF_SHIP_0L: equ 367
044028             0118*   BUF_SHIP_1C: equ 368
044028             0119*   BUF_SHIP_2R: equ 369
044028             0120*   BUF_SHIP_SMALL: equ 370
044028             0121*   BUF_TEST_STRIPES: equ 371
044028             0122*   BUF_TILE_BLANK: equ 372
044028             0123*   BUF_TILE_PAD_0: equ 373
044028             0124*   BUF_TILE_PAD_1: equ 374
044028             0125*   BUF_TILE_PAD_2: equ 375
044028             0126*   BUF_TILE_PAD_3: equ 376
044028             0127*   BUF_TILE_PAD_4: equ 377
044028             0128*   BUF_TILE_PAD_5: equ 378
044028             0129*   BUF_TILE_PAD_6: equ 379
044028             0130*   BUF_TILE_PAD_7: equ 380
044028             0131*   BUF_TURRET_000: equ 381
044028             0132*   BUF_TURRET_008: equ 382
044028             0133*   BUF_TURRET_016: equ 383
044028             0134*   BUF_TURRET_024: equ 384
044028             0135*   BUF_TURRET_032: equ 385
044028             0136*   BUF_TURRET_040: equ 386
044028             0137*   BUF_TURRET_048: equ 387
044028             0138*   BUF_TURRET_056: equ 388
044028             0139*   BUF_TURRET_064: equ 389
044028             0140*   BUF_TURRET_072: equ 390
044028             0141*   BUF_TURRET_080: equ 391
044028             0142*   BUF_TURRET_088: equ 392
044028             0143*   BUF_TURRET_096: equ 393
044028             0144*   BUF_TURRET_104: equ 394
044028             0145*   BUF_TURRET_112: equ 395
044028             0146*   BUF_TURRET_120: equ 396
044028             0147*   BUF_TURRET_128: equ 397
044028             0148*   BUF_TURRET_136: equ 398
044028             0149*   BUF_TURRET_144: equ 399
044028             0150*   BUF_TURRET_152: equ 400
044028             0151*   BUF_TURRET_160: equ 401
044028             0152*   BUF_TURRET_168: equ 402
044028             0153*   BUF_TURRET_176: equ 403
044028             0154*   BUF_TURRET_184: equ 404
044028             0155*   BUF_TURRET_192: equ 405
044028             0156*   BUF_TURRET_200: equ 406
044028             0157*   BUF_TURRET_208: equ 407
044028             0158*   BUF_TURRET_216: equ 408
044028             0159*   BUF_TURRET_224: equ 409
044028             0160*   BUF_TURRET_232: equ 410
044028             0161*   BUF_TURRET_240: equ 411
044028             0162*   BUF_TURRET_248: equ 412
044028             0163*   
044028             0164*   sprites_image_list: ; type; width; height; size; filename; bufferId:
044028 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       32 4B 04 00 
       01 00       
04403A 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_crater_0, 257
       00 00 10 00 
       00 00 01 00 
       47 4B 04 01 
       01 00       
04404C 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_crater_1, 258
       00 00 10 00 
       00 00 01 00 
       5E 4B 04 02 
       01 00       
04405E 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_crater_2, 259
       00 00 10 00 
       00 00 01 00 
       75 4B 04 03 
       01 00       
044070 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_crater_3, 260
       00 00 10 00 
       00 00 01 00 
       8C 4B 04 04 
       01 00       
044082 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_explosion_a, 261
       00 00 10 00 
       00 00 01 00 
       A3 4B 04 05 
       01 00       
044094 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_explosion_b, 262
       00 00 10 00 
       00 00 01 00 
       BD 4B 04 06 
       01 00       
0440A6 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_explosion_c, 263
       00 00 10 00 
       00 00 01 00 
       D7 4B 04 07 
       01 00       
0440B8 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_explosion_d, 264
       00 00 10 00 
       00 00 01 00 
       F1 4B 04 08 
       01 00       
0440CA 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_explosion_e, 265
       00 00 10 00 
       00 00 01 00 
       0B 4C 04 09 
       01 00       
0440DC 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_fireball_2_000, 266
       00 00 10 00 
       00 00 01 00 
       25 4C 04 0A 
       01 00       
0440EE 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_fireball_2_008, 267
       00 00 10 00 
       00 00 01 00 
       42 4C 04 0B 
       01 00       
044100 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_fireball_2_016, 268
       00 00 10 00 
       00 00 01 00 
       5F 4C 04 0C 
       01 00       
044112 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_fireball_2_024, 269
       00 00 10 00 
       00 00 01 00 
       7C 4C 04 0D 
       01 00       
044124 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_fireball_2_032, 270
       00 00 10 00 
       00 00 01 00 
       99 4C 04 0E 
       01 00       
044136 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_fireball_2_040, 271
       00 00 10 00 
       00 00 01 00 
       B6 4C 04 0F 
       01 00       
044148 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_fireball_2_048, 272
       00 00 10 00 
       00 00 01 00 
       D3 4C 04 10 
       01 00       
04415A 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_fireball_2_056, 273
       00 00 10 00 
       00 00 01 00 
       F0 4C 04 11 
       01 00       
04416C 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_fireball_2_064, 274
       00 00 10 00 
       00 00 01 00 
       0D 4D 04 12 
       01 00       
04417E 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_fireball_2_072, 275
       00 00 10 00 
       00 00 01 00 
       2A 4D 04 13 
       01 00       
044190 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_fireball_2_080, 276
       00 00 10 00 
       00 00 01 00 
       47 4D 04 14 
       01 00       
0441A2 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_fireball_2_088, 277
       00 00 10 00 
       00 00 01 00 
       64 4D 04 15 
       01 00       
0441B4 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_fireball_2_096, 278
       00 00 10 00 
       00 00 01 00 
       81 4D 04 16 
       01 00       
0441C6 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_fireball_2_104, 279
       00 00 10 00 
       00 00 01 00 
       9E 4D 04 17 
       01 00       
0441D8 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_fireball_2_112, 280
       00 00 10 00 
       00 00 01 00 
       BB 4D 04 18 
       01 00       
0441EA 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_fireball_2_120, 281
       00 00 10 00 
       00 00 01 00 
       D8 4D 04 19 
       01 00       
0441FC 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_fireball_2_128, 282
       00 00 10 00 
       00 00 01 00 
       F5 4D 04 1A 
       01 00       
04420E 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_fireball_2_136, 283
       00 00 10 00 
       00 00 01 00 
       12 4E 04 1B 
       01 00       
044220 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_fireball_2_144, 284
       00 00 10 00 
       00 00 01 00 
       2F 4E 04 1C 
       01 00       
044232 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_fireball_2_152, 285
       00 00 10 00 
       00 00 01 00 
       4C 4E 04 1D 
       01 00       
044244 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_fireball_2_160, 286
       00 00 10 00 
       00 00 01 00 
       69 4E 04 1E 
       01 00       
044256 01 00 00 10 0196*   	dl 1, 16, 16, 256, fn_fireball_2_168, 287
       00 00 10 00 
       00 00 01 00 
       86 4E 04 1F 
       01 00       
044268 01 00 00 10 0197*   	dl 1, 16, 16, 256, fn_fireball_2_176, 288
       00 00 10 00 
       00 00 01 00 
       A3 4E 04 20 
       01 00       
04427A 01 00 00 10 0198*   	dl 1, 16, 16, 256, fn_fireball_2_184, 289
       00 00 10 00 
       00 00 01 00 
       C0 4E 04 21 
       01 00       
04428C 01 00 00 10 0199*   	dl 1, 16, 16, 256, fn_fireball_2_192, 290
       00 00 10 00 
       00 00 01 00 
       DD 4E 04 22 
       01 00       
04429E 01 00 00 10 0200*   	dl 1, 16, 16, 256, fn_fireball_2_200, 291
       00 00 10 00 
       00 00 01 00 
       FA 4E 04 23 
       01 00       
0442B0 01 00 00 10 0201*   	dl 1, 16, 16, 256, fn_fireball_2_208, 292
       00 00 10 00 
       00 00 01 00 
       17 4F 04 24 
       01 00       
0442C2 01 00 00 10 0202*   	dl 1, 16, 16, 256, fn_fireball_2_216, 293
       00 00 10 00 
       00 00 01 00 
       34 4F 04 25 
       01 00       
0442D4 01 00 00 10 0203*   	dl 1, 16, 16, 256, fn_fireball_2_224, 294
       00 00 10 00 
       00 00 01 00 
       51 4F 04 26 
       01 00       
0442E6 01 00 00 10 0204*   	dl 1, 16, 16, 256, fn_fireball_2_232, 295
       00 00 10 00 
       00 00 01 00 
       6E 4F 04 27 
       01 00       
0442F8 01 00 00 10 0205*   	dl 1, 16, 16, 256, fn_fireball_2_240, 296
       00 00 10 00 
       00 00 01 00 
       8B 4F 04 28 
       01 00       
04430A 01 00 00 10 0206*   	dl 1, 16, 16, 256, fn_fireball_2_248, 297
       00 00 10 00 
       00 00 01 00 
       A8 4F 04 29 
       01 00       
04431C 01 00 00 10 0207*   	dl 1, 16, 16, 256, fn_fireball_3_000, 298
       00 00 10 00 
       00 00 01 00 
       C5 4F 04 2A 
       01 00       
04432E 01 00 00 10 0208*   	dl 1, 16, 16, 256, fn_fireball_3_008, 299
       00 00 10 00 
       00 00 01 00 
       E2 4F 04 2B 
       01 00       
044340 01 00 00 10 0209*   	dl 1, 16, 16, 256, fn_fireball_3_016, 300
       00 00 10 00 
       00 00 01 00 
       FF 4F 04 2C 
       01 00       
044352 01 00 00 10 0210*   	dl 1, 16, 16, 256, fn_fireball_3_024, 301
       00 00 10 00 
       00 00 01 00 
       1C 50 04 2D 
       01 00       
044364 01 00 00 10 0211*   	dl 1, 16, 16, 256, fn_fireball_3_032, 302
       00 00 10 00 
       00 00 01 00 
       39 50 04 2E 
       01 00       
044376 01 00 00 10 0212*   	dl 1, 16, 16, 256, fn_fireball_3_040, 303
       00 00 10 00 
       00 00 01 00 
       56 50 04 2F 
       01 00       
044388 01 00 00 10 0213*   	dl 1, 16, 16, 256, fn_fireball_3_048, 304
       00 00 10 00 
       00 00 01 00 
       73 50 04 30 
       01 00       
04439A 01 00 00 10 0214*   	dl 1, 16, 16, 256, fn_fireball_3_056, 305
       00 00 10 00 
       00 00 01 00 
       90 50 04 31 
       01 00       
0443AC 01 00 00 10 0215*   	dl 1, 16, 16, 256, fn_fireball_3_064, 306
       00 00 10 00 
       00 00 01 00 
       AD 50 04 32 
       01 00       
0443BE 01 00 00 10 0216*   	dl 1, 16, 16, 256, fn_fireball_3_072, 307
       00 00 10 00 
       00 00 01 00 
       CA 50 04 33 
       01 00       
0443D0 01 00 00 10 0217*   	dl 1, 16, 16, 256, fn_fireball_3_080, 308
       00 00 10 00 
       00 00 01 00 
       E7 50 04 34 
       01 00       
0443E2 01 00 00 10 0218*   	dl 1, 16, 16, 256, fn_fireball_3_088, 309
       00 00 10 00 
       00 00 01 00 
       04 51 04 35 
       01 00       
0443F4 01 00 00 10 0219*   	dl 1, 16, 16, 256, fn_fireball_3_096, 310
       00 00 10 00 
       00 00 01 00 
       21 51 04 36 
       01 00       
044406 01 00 00 10 0220*   	dl 1, 16, 16, 256, fn_fireball_3_104, 311
       00 00 10 00 
       00 00 01 00 
       3E 51 04 37 
       01 00       
044418 01 00 00 10 0221*   	dl 1, 16, 16, 256, fn_fireball_3_112, 312
       00 00 10 00 
       00 00 01 00 
       5B 51 04 38 
       01 00       
04442A 01 00 00 10 0222*   	dl 1, 16, 16, 256, fn_fireball_3_120, 313
       00 00 10 00 
       00 00 01 00 
       78 51 04 39 
       01 00       
04443C 01 00 00 10 0223*   	dl 1, 16, 16, 256, fn_fireball_3_128, 314
       00 00 10 00 
       00 00 01 00 
       95 51 04 3A 
       01 00       
04444E 01 00 00 10 0224*   	dl 1, 16, 16, 256, fn_fireball_3_136, 315
       00 00 10 00 
       00 00 01 00 
       B2 51 04 3B 
       01 00       
044460 01 00 00 10 0225*   	dl 1, 16, 16, 256, fn_fireball_3_144, 316
       00 00 10 00 
       00 00 01 00 
       CF 51 04 3C 
       01 00       
044472 01 00 00 10 0226*   	dl 1, 16, 16, 256, fn_fireball_3_152, 317
       00 00 10 00 
       00 00 01 00 
       EC 51 04 3D 
       01 00       
044484 01 00 00 10 0227*   	dl 1, 16, 16, 256, fn_fireball_3_160, 318
       00 00 10 00 
       00 00 01 00 
       09 52 04 3E 
       01 00       
044496 01 00 00 10 0228*   	dl 1, 16, 16, 256, fn_fireball_3_168, 319
       00 00 10 00 
       00 00 01 00 
       26 52 04 3F 
       01 00       
0444A8 01 00 00 10 0229*   	dl 1, 16, 16, 256, fn_fireball_3_176, 320
       00 00 10 00 
       00 00 01 00 
       43 52 04 40 
       01 00       
0444BA 01 00 00 10 0230*   	dl 1, 16, 16, 256, fn_fireball_3_184, 321
       00 00 10 00 
       00 00 01 00 
       60 52 04 41 
       01 00       
0444CC 01 00 00 10 0231*   	dl 1, 16, 16, 256, fn_fireball_3_192, 322
       00 00 10 00 
       00 00 01 00 
       7D 52 04 42 
       01 00       
0444DE 01 00 00 10 0232*   	dl 1, 16, 16, 256, fn_fireball_3_200, 323
       00 00 10 00 
       00 00 01 00 
       9A 52 04 43 
       01 00       
0444F0 01 00 00 10 0233*   	dl 1, 16, 16, 256, fn_fireball_3_208, 324
       00 00 10 00 
       00 00 01 00 
       B7 52 04 44 
       01 00       
044502 01 00 00 10 0234*   	dl 1, 16, 16, 256, fn_fireball_3_216, 325
       00 00 10 00 
       00 00 01 00 
       D4 52 04 45 
       01 00       
044514 01 00 00 10 0235*   	dl 1, 16, 16, 256, fn_fireball_3_224, 326
       00 00 10 00 
       00 00 01 00 
       F1 52 04 46 
       01 00       
044526 01 00 00 10 0236*   	dl 1, 16, 16, 256, fn_fireball_3_232, 327
       00 00 10 00 
       00 00 01 00 
       0E 53 04 47 
       01 00       
044538 01 00 00 10 0237*   	dl 1, 16, 16, 256, fn_fireball_3_240, 328
       00 00 10 00 
       00 00 01 00 
       2B 53 04 48 
       01 00       
04454A 01 00 00 10 0238*   	dl 1, 16, 16, 256, fn_fireball_3_248, 329
       00 00 10 00 
       00 00 01 00 
       48 53 04 49 
       01 00       
04455C 01 00 00 05 0239*   	dl 1, 5, 13, 65, fn_laser_a, 330
       00 00 0D 00 
       00 41 00 00 
       65 53 04 4A 
       01 00       
04456E 01 00 00 05 0240*   	dl 1, 5, 13, 65, fn_laser_b, 331
       00 00 0D 00 
       00 41 00 00 
       7B 53 04 4B 
       01 00       
044580 01 00 00 10 0241*   	dl 1, 16, 16, 256, fn_lightning_h_0, 332
       00 00 10 00 
       00 00 01 00 
       91 53 04 4C 
       01 00       
044592 01 00 00 10 0242*   	dl 1, 16, 16, 256, fn_lightning_h_1, 333
       00 00 10 00 
       00 00 01 00 
       AD 53 04 4D 
       01 00       
0445A4 01 00 00 10 0243*   	dl 1, 16, 16, 256, fn_pad, 334
       00 00 10 00 
       00 00 01 00 
       C9 53 04 4E 
       01 00       
0445B6 01 00 00 10 0244*   	dl 1, 16, 16, 256, fn_seeker_000, 335
       00 00 10 00 
       00 00 01 00 
       DB 53 04 4F 
       01 00       
0445C8 01 00 00 10 0245*   	dl 1, 16, 16, 256, fn_seeker_008, 336
       00 00 10 00 
       00 00 01 00 
       F4 53 04 50 
       01 00       
0445DA 01 00 00 10 0246*   	dl 1, 16, 16, 256, fn_seeker_016, 337
       00 00 10 00 
       00 00 01 00 
       0D 54 04 51 
       01 00       
0445EC 01 00 00 10 0247*   	dl 1, 16, 16, 256, fn_seeker_024, 338
       00 00 10 00 
       00 00 01 00 
       26 54 04 52 
       01 00       
0445FE 01 00 00 10 0248*   	dl 1, 16, 16, 256, fn_seeker_032, 339
       00 00 10 00 
       00 00 01 00 
       3F 54 04 53 
       01 00       
044610 01 00 00 10 0249*   	dl 1, 16, 16, 256, fn_seeker_040, 340
       00 00 10 00 
       00 00 01 00 
       58 54 04 54 
       01 00       
044622 01 00 00 10 0250*   	dl 1, 16, 16, 256, fn_seeker_048, 341
       00 00 10 00 
       00 00 01 00 
       71 54 04 55 
       01 00       
044634 01 00 00 10 0251*   	dl 1, 16, 16, 256, fn_seeker_056, 342
       00 00 10 00 
       00 00 01 00 
       8A 54 04 56 
       01 00       
044646 01 00 00 10 0252*   	dl 1, 16, 16, 256, fn_seeker_064, 343
       00 00 10 00 
       00 00 01 00 
       A3 54 04 57 
       01 00       
044658 01 00 00 10 0253*   	dl 1, 16, 16, 256, fn_seeker_072, 344
       00 00 10 00 
       00 00 01 00 
       BC 54 04 58 
       01 00       
04466A 01 00 00 10 0254*   	dl 1, 16, 16, 256, fn_seeker_080, 345
       00 00 10 00 
       00 00 01 00 
       D5 54 04 59 
       01 00       
04467C 01 00 00 10 0255*   	dl 1, 16, 16, 256, fn_seeker_088, 346
       00 00 10 00 
       00 00 01 00 
       EE 54 04 5A 
       01 00       
04468E 01 00 00 10 0256*   	dl 1, 16, 16, 256, fn_seeker_096, 347
       00 00 10 00 
       00 00 01 00 
       07 55 04 5B 
       01 00       
0446A0 01 00 00 10 0257*   	dl 1, 16, 16, 256, fn_seeker_104, 348
       00 00 10 00 
       00 00 01 00 
       20 55 04 5C 
       01 00       
0446B2 01 00 00 10 0258*   	dl 1, 16, 16, 256, fn_seeker_112, 349
       00 00 10 00 
       00 00 01 00 
       39 55 04 5D 
       01 00       
0446C4 01 00 00 10 0259*   	dl 1, 16, 16, 256, fn_seeker_120, 350
       00 00 10 00 
       00 00 01 00 
       52 55 04 5E 
       01 00       
0446D6 01 00 00 10 0260*   	dl 1, 16, 16, 256, fn_seeker_128, 351
       00 00 10 00 
       00 00 01 00 
       6B 55 04 5F 
       01 00       
0446E8 01 00 00 10 0261*   	dl 1, 16, 16, 256, fn_seeker_136, 352
       00 00 10 00 
       00 00 01 00 
       84 55 04 60 
       01 00       
0446FA 01 00 00 10 0262*   	dl 1, 16, 16, 256, fn_seeker_144, 353
       00 00 10 00 
       00 00 01 00 
       9D 55 04 61 
       01 00       
04470C 01 00 00 10 0263*   	dl 1, 16, 16, 256, fn_seeker_152, 354
       00 00 10 00 
       00 00 01 00 
       B6 55 04 62 
       01 00       
04471E 01 00 00 10 0264*   	dl 1, 16, 16, 256, fn_seeker_160, 355
       00 00 10 00 
       00 00 01 00 
       CF 55 04 63 
       01 00       
044730 01 00 00 10 0265*   	dl 1, 16, 16, 256, fn_seeker_168, 356
       00 00 10 00 
       00 00 01 00 
       E8 55 04 64 
       01 00       
044742 01 00 00 10 0266*   	dl 1, 16, 16, 256, fn_seeker_176, 357
       00 00 10 00 
       00 00 01 00 
       01 56 04 65 
       01 00       
044754 01 00 00 10 0267*   	dl 1, 16, 16, 256, fn_seeker_184, 358
       00 00 10 00 
       00 00 01 00 
       1A 56 04 66 
       01 00       
044766 01 00 00 10 0268*   	dl 1, 16, 16, 256, fn_seeker_192, 359
       00 00 10 00 
       00 00 01 00 
       33 56 04 67 
       01 00       
044778 01 00 00 10 0269*   	dl 1, 16, 16, 256, fn_seeker_200, 360
       00 00 10 00 
       00 00 01 00 
       4C 56 04 68 
       01 00       
04478A 01 00 00 10 0270*   	dl 1, 16, 16, 256, fn_seeker_208, 361
       00 00 10 00 
       00 00 01 00 
       65 56 04 69 
       01 00       
04479C 01 00 00 10 0271*   	dl 1, 16, 16, 256, fn_seeker_216, 362
       00 00 10 00 
       00 00 01 00 
       7E 56 04 6A 
       01 00       
0447AE 01 00 00 10 0272*   	dl 1, 16, 16, 256, fn_seeker_224, 363
       00 00 10 00 
       00 00 01 00 
       97 56 04 6B 
       01 00       
0447C0 01 00 00 10 0273*   	dl 1, 16, 16, 256, fn_seeker_232, 364
       00 00 10 00 
       00 00 01 00 
       B0 56 04 6C 
       01 00       
0447D2 01 00 00 10 0274*   	dl 1, 16, 16, 256, fn_seeker_240, 365
       00 00 10 00 
       00 00 01 00 
       C9 56 04 6D 
       01 00       
0447E4 01 00 00 10 0275*   	dl 1, 16, 16, 256, fn_seeker_248, 366
       00 00 10 00 
       00 00 01 00 
       E2 56 04 6E 
       01 00       
0447F6 01 00 00 10 0276*   	dl 1, 16, 16, 256, fn_ship_0l, 367
       00 00 10 00 
       00 00 01 00 
       FB 56 04 6F 
       01 00       
044808 01 00 00 10 0277*   	dl 1, 16, 16, 256, fn_ship_1c, 368
       00 00 10 00 
       00 00 01 00 
       11 57 04 70 
       01 00       
04481A 01 00 00 10 0278*   	dl 1, 16, 16, 256, fn_ship_2r, 369
       00 00 10 00 
       00 00 01 00 
       27 57 04 71 
       01 00       
04482C 01 00 00 08 0279*   	dl 1, 8, 8, 64, fn_ship_small, 370
       00 00 08 00 
       00 40 00 00 
       3D 57 04 72 
       01 00       
04483E 01 00 00 10 0280*   	dl 1, 16, 16, 256, fn_test_stripes, 371
       00 00 10 00 
       00 00 01 00 
       56 57 04 73 
       01 00       
044850 01 00 00 10 0281*   	dl 1, 16, 16, 256, fn_tile_blank, 372
       00 00 10 00 
       00 00 01 00 
       71 57 04 74 
       01 00       
044862 01 00 00 10 0282*   	dl 1, 16, 16, 256, fn_tile_pad_0, 373
       00 00 10 00 
       00 00 01 00 
       8A 57 04 75 
       01 00       
044874 01 00 00 10 0283*   	dl 1, 16, 16, 256, fn_tile_pad_1, 374
       00 00 10 00 
       00 00 01 00 
       A3 57 04 76 
       01 00       
044886 01 00 00 10 0284*   	dl 1, 16, 16, 256, fn_tile_pad_2, 375
       00 00 10 00 
       00 00 01 00 
       BC 57 04 77 
       01 00       
044898 01 00 00 10 0285*   	dl 1, 16, 16, 256, fn_tile_pad_3, 376
       00 00 10 00 
       00 00 01 00 
       D5 57 04 78 
       01 00       
0448AA 01 00 00 10 0286*   	dl 1, 16, 16, 256, fn_tile_pad_4, 377
       00 00 10 00 
       00 00 01 00 
       EE 57 04 79 
       01 00       
0448BC 01 00 00 10 0287*   	dl 1, 16, 16, 256, fn_tile_pad_5, 378
       00 00 10 00 
       00 00 01 00 
       07 58 04 7A 
       01 00       
0448CE 01 00 00 10 0288*   	dl 1, 16, 16, 256, fn_tile_pad_6, 379
       00 00 10 00 
       00 00 01 00 
       20 58 04 7B 
       01 00       
0448E0 01 00 00 10 0289*   	dl 1, 16, 16, 256, fn_tile_pad_7, 380
       00 00 10 00 
       00 00 01 00 
       39 58 04 7C 
       01 00       
0448F2 01 00 00 10 0290*   	dl 1, 16, 16, 256, fn_turret_000, 381
       00 00 10 00 
       00 00 01 00 
       52 58 04 7D 
       01 00       
044904 01 00 00 10 0291*   	dl 1, 16, 16, 256, fn_turret_008, 382
       00 00 10 00 
       00 00 01 00 
       6B 58 04 7E 
       01 00       
044916 01 00 00 10 0292*   	dl 1, 16, 16, 256, fn_turret_016, 383
       00 00 10 00 
       00 00 01 00 
       84 58 04 7F 
       01 00       
044928 01 00 00 10 0293*   	dl 1, 16, 16, 256, fn_turret_024, 384
       00 00 10 00 
       00 00 01 00 
       9D 58 04 80 
       01 00       
04493A 01 00 00 10 0294*   	dl 1, 16, 16, 256, fn_turret_032, 385
       00 00 10 00 
       00 00 01 00 
       B6 58 04 81 
       01 00       
04494C 01 00 00 10 0295*   	dl 1, 16, 16, 256, fn_turret_040, 386
       00 00 10 00 
       00 00 01 00 
       CF 58 04 82 
       01 00       
04495E 01 00 00 10 0296*   	dl 1, 16, 16, 256, fn_turret_048, 387
       00 00 10 00 
       00 00 01 00 
       E8 58 04 83 
       01 00       
044970 01 00 00 10 0297*   	dl 1, 16, 16, 256, fn_turret_056, 388
       00 00 10 00 
       00 00 01 00 
       01 59 04 84 
       01 00       
044982 01 00 00 10 0298*   	dl 1, 16, 16, 256, fn_turret_064, 389
       00 00 10 00 
       00 00 01 00 
       1A 59 04 85 
       01 00       
044994 01 00 00 10 0299*   	dl 1, 16, 16, 256, fn_turret_072, 390
       00 00 10 00 
       00 00 01 00 
       33 59 04 86 
       01 00       
0449A6 01 00 00 10 0300*   	dl 1, 16, 16, 256, fn_turret_080, 391
       00 00 10 00 
       00 00 01 00 
       4C 59 04 87 
       01 00       
0449B8 01 00 00 10 0301*   	dl 1, 16, 16, 256, fn_turret_088, 392
       00 00 10 00 
       00 00 01 00 
       65 59 04 88 
       01 00       
0449CA 01 00 00 10 0302*   	dl 1, 16, 16, 256, fn_turret_096, 393
       00 00 10 00 
       00 00 01 00 
       7E 59 04 89 
       01 00       
0449DC 01 00 00 10 0303*   	dl 1, 16, 16, 256, fn_turret_104, 394
       00 00 10 00 
       00 00 01 00 
       97 59 04 8A 
       01 00       
0449EE 01 00 00 10 0304*   	dl 1, 16, 16, 256, fn_turret_112, 395
       00 00 10 00 
       00 00 01 00 
       B0 59 04 8B 
       01 00       
044A00 01 00 00 10 0305*   	dl 1, 16, 16, 256, fn_turret_120, 396
       00 00 10 00 
       00 00 01 00 
       C9 59 04 8C 
       01 00       
044A12 01 00 00 10 0306*   	dl 1, 16, 16, 256, fn_turret_128, 397
       00 00 10 00 
       00 00 01 00 
       E2 59 04 8D 
       01 00       
044A24 01 00 00 10 0307*   	dl 1, 16, 16, 256, fn_turret_136, 398
       00 00 10 00 
       00 00 01 00 
       FB 59 04 8E 
       01 00       
044A36 01 00 00 10 0308*   	dl 1, 16, 16, 256, fn_turret_144, 399
       00 00 10 00 
       00 00 01 00 
       14 5A 04 8F 
       01 00       
044A48 01 00 00 10 0309*   	dl 1, 16, 16, 256, fn_turret_152, 400
       00 00 10 00 
       00 00 01 00 
       2D 5A 04 90 
       01 00       
044A5A 01 00 00 10 0310*   	dl 1, 16, 16, 256, fn_turret_160, 401
       00 00 10 00 
       00 00 01 00 
       46 5A 04 91 
       01 00       
044A6C 01 00 00 10 0311*   	dl 1, 16, 16, 256, fn_turret_168, 402
       00 00 10 00 
       00 00 01 00 
       5F 5A 04 92 
       01 00       
044A7E 01 00 00 10 0312*   	dl 1, 16, 16, 256, fn_turret_176, 403
       00 00 10 00 
       00 00 01 00 
       78 5A 04 93 
       01 00       
044A90 01 00 00 10 0313*   	dl 1, 16, 16, 256, fn_turret_184, 404
       00 00 10 00 
       00 00 01 00 
       91 5A 04 94 
       01 00       
044AA2 01 00 00 10 0314*   	dl 1, 16, 16, 256, fn_turret_192, 405
       00 00 10 00 
       00 00 01 00 
       AA 5A 04 95 
       01 00       
044AB4 01 00 00 10 0315*   	dl 1, 16, 16, 256, fn_turret_200, 406
       00 00 10 00 
       00 00 01 00 
       C3 5A 04 96 
       01 00       
044AC6 01 00 00 10 0316*   	dl 1, 16, 16, 256, fn_turret_208, 407
       00 00 10 00 
       00 00 01 00 
       DC 5A 04 97 
       01 00       
044AD8 01 00 00 10 0317*   	dl 1, 16, 16, 256, fn_turret_216, 408
       00 00 10 00 
       00 00 01 00 
       F5 5A 04 98 
       01 00       
044AEA 01 00 00 10 0318*   	dl 1, 16, 16, 256, fn_turret_224, 409
       00 00 10 00 
       00 00 01 00 
       0E 5B 04 99 
       01 00       
044AFC 01 00 00 10 0319*   	dl 1, 16, 16, 256, fn_turret_232, 410
       00 00 10 00 
       00 00 01 00 
       27 5B 04 9A 
       01 00       
044B0E 01 00 00 10 0320*   	dl 1, 16, 16, 256, fn_turret_240, 411
       00 00 10 00 
       00 00 01 00 
       40 5B 04 9B 
       01 00       
044B20 01 00 00 10 0321*   	dl 1, 16, 16, 256, fn_turret_248, 412
       00 00 10 00 
       00 00 01 00 
       59 5B 04 9C 
       01 00       
044B32             0322*   
044B32             0323*   ; files_list: ; filename:
044B32 73 70 72 69 0324*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
044B47 73 70 72 69 0325*   fn_crater_0: db "sprites/crater_0.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 30 
       2E 72 67 62 
       61 32 00    
044B5E 73 70 72 69 0326*   fn_crater_1: db "sprites/crater_1.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 31 
       2E 72 67 62 
       61 32 00    
044B75 73 70 72 69 0327*   fn_crater_2: db "sprites/crater_2.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 32 
       2E 72 67 62 
       61 32 00    
044B8C 73 70 72 69 0328*   fn_crater_3: db "sprites/crater_3.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 33 
       2E 72 67 62 
       61 32 00    
044BA3 73 70 72 69 0329*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
044BBD 73 70 72 69 0330*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
044BD7 73 70 72 69 0331*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
044BF1 73 70 72 69 0332*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
044C0B 73 70 72 69 0333*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
044C25 73 70 72 69 0334*   fn_fireball_2_000: db "sprites/fireball_2_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044C42 73 70 72 69 0335*   fn_fireball_2_008: db "sprites/fireball_2_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044C5F 73 70 72 69 0336*   fn_fireball_2_016: db "sprites/fireball_2_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044C7C 73 70 72 69 0337*   fn_fireball_2_024: db "sprites/fireball_2_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044C99 73 70 72 69 0338*   fn_fireball_2_032: db "sprites/fireball_2_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044CB6 73 70 72 69 0339*   fn_fireball_2_040: db "sprites/fireball_2_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044CD3 73 70 72 69 0340*   fn_fireball_2_048: db "sprites/fireball_2_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044CF0 73 70 72 69 0341*   fn_fireball_2_056: db "sprites/fireball_2_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044D0D 73 70 72 69 0342*   fn_fireball_2_064: db "sprites/fireball_2_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044D2A 73 70 72 69 0343*   fn_fireball_2_072: db "sprites/fireball_2_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044D47 73 70 72 69 0344*   fn_fireball_2_080: db "sprites/fireball_2_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044D64 73 70 72 69 0345*   fn_fireball_2_088: db "sprites/fireball_2_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044D81 73 70 72 69 0346*   fn_fireball_2_096: db "sprites/fireball_2_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044D9E 73 70 72 69 0347*   fn_fireball_2_104: db "sprites/fireball_2_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044DBB 73 70 72 69 0348*   fn_fireball_2_112: db "sprites/fireball_2_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
044DD8 73 70 72 69 0349*   fn_fireball_2_120: db "sprites/fireball_2_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044DF5 73 70 72 69 0350*   fn_fireball_2_128: db "sprites/fireball_2_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
044E12 73 70 72 69 0351*   fn_fireball_2_136: db "sprites/fireball_2_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
044E2F 73 70 72 69 0352*   fn_fireball_2_144: db "sprites/fireball_2_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044E4C 73 70 72 69 0353*   fn_fireball_2_152: db "sprites/fireball_2_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
044E69 73 70 72 69 0354*   fn_fireball_2_160: db "sprites/fireball_2_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
044E86 73 70 72 69 0355*   fn_fireball_2_168: db "sprites/fireball_2_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044EA3 73 70 72 69 0356*   fn_fireball_2_176: db "sprites/fireball_2_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044EC0 73 70 72 69 0357*   fn_fireball_2_184: db "sprites/fireball_2_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
044EDD 73 70 72 69 0358*   fn_fireball_2_192: db "sprites/fireball_2_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
044EFA 73 70 72 69 0359*   fn_fireball_2_200: db "sprites/fireball_2_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044F17 73 70 72 69 0360*   fn_fireball_2_208: db "sprites/fireball_2_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
044F34 73 70 72 69 0361*   fn_fireball_2_216: db "sprites/fireball_2_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044F51 73 70 72 69 0362*   fn_fireball_2_224: db "sprites/fireball_2_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
044F6E 73 70 72 69 0363*   fn_fireball_2_232: db "sprites/fireball_2_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044F8B 73 70 72 69 0364*   fn_fireball_2_240: db "sprites/fireball_2_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
044FA8 73 70 72 69 0365*   fn_fireball_2_248: db "sprites/fireball_2_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044FC5 73 70 72 69 0366*   fn_fireball_3_000: db "sprites/fireball_3_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044FE2 73 70 72 69 0367*   fn_fireball_3_008: db "sprites/fireball_3_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044FFF 73 70 72 69 0368*   fn_fireball_3_016: db "sprites/fireball_3_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
04501C 73 70 72 69 0369*   fn_fireball_3_024: db "sprites/fireball_3_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045039 73 70 72 69 0370*   fn_fireball_3_032: db "sprites/fireball_3_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
045056 73 70 72 69 0371*   fn_fireball_3_040: db "sprites/fireball_3_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045073 73 70 72 69 0372*   fn_fireball_3_048: db "sprites/fireball_3_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045090 73 70 72 69 0373*   fn_fireball_3_056: db "sprites/fireball_3_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0450AD 73 70 72 69 0374*   fn_fireball_3_064: db "sprites/fireball_3_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0450CA 73 70 72 69 0375*   fn_fireball_3_072: db "sprites/fireball_3_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0450E7 73 70 72 69 0376*   fn_fireball_3_080: db "sprites/fireball_3_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045104 73 70 72 69 0377*   fn_fireball_3_088: db "sprites/fireball_3_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045121 73 70 72 69 0378*   fn_fireball_3_096: db "sprites/fireball_3_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
04513E 73 70 72 69 0379*   fn_fireball_3_104: db "sprites/fireball_3_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04515B 73 70 72 69 0380*   fn_fireball_3_112: db "sprites/fireball_3_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045178 73 70 72 69 0381*   fn_fireball_3_120: db "sprites/fireball_3_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045195 73 70 72 69 0382*   fn_fireball_3_128: db "sprites/fireball_3_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0451B2 73 70 72 69 0383*   fn_fireball_3_136: db "sprites/fireball_3_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0451CF 73 70 72 69 0384*   fn_fireball_3_144: db "sprites/fireball_3_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0451EC 73 70 72 69 0385*   fn_fireball_3_152: db "sprites/fireball_3_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045209 73 70 72 69 0386*   fn_fireball_3_160: db "sprites/fireball_3_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045226 73 70 72 69 0387*   fn_fireball_3_168: db "sprites/fireball_3_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045243 73 70 72 69 0388*   fn_fireball_3_176: db "sprites/fireball_3_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045260 73 70 72 69 0389*   fn_fireball_3_184: db "sprites/fireball_3_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04527D 73 70 72 69 0390*   fn_fireball_3_192: db "sprites/fireball_3_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
04529A 73 70 72 69 0391*   fn_fireball_3_200: db "sprites/fireball_3_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0452B7 73 70 72 69 0392*   fn_fireball_3_208: db "sprites/fireball_3_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0452D4 73 70 72 69 0393*   fn_fireball_3_216: db "sprites/fireball_3_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0452F1 73 70 72 69 0394*   fn_fireball_3_224: db "sprites/fireball_3_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
04530E 73 70 72 69 0395*   fn_fireball_3_232: db "sprites/fireball_3_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
04532B 73 70 72 69 0396*   fn_fireball_3_240: db "sprites/fireball_3_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045348 73 70 72 69 0397*   fn_fireball_3_248: db "sprites/fireball_3_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045365 73 70 72 69 0398*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
04537B 73 70 72 69 0399*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
045391 73 70 72 69 0400*   fn_lightning_h_0: db "sprites/lightning_h_0.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       30 2E 72 67 
       62 61 32 00 
0453AD 73 70 72 69 0401*   fn_lightning_h_1: db "sprites/lightning_h_1.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       31 2E 72 67 
       62 61 32 00 
0453C9 73 70 72 69 0402*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
0453DB 73 70 72 69 0403*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0453F4 73 70 72 69 0404*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
04540D 73 70 72 69 0405*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045426 73 70 72 69 0406*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
04543F 73 70 72 69 0407*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
045458 73 70 72 69 0408*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045471 73 70 72 69 0409*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
04548A 73 70 72 69 0410*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0454A3 73 70 72 69 0411*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0454BC 73 70 72 69 0412*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0454D5 73 70 72 69 0413*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0454EE 73 70 72 69 0414*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045507 73 70 72 69 0415*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045520 73 70 72 69 0416*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045539 73 70 72 69 0417*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045552 73 70 72 69 0418*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04556B 73 70 72 69 0419*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045584 73 70 72 69 0420*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
04559D 73 70 72 69 0421*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0455B6 73 70 72 69 0422*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0455CF 73 70 72 69 0423*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0455E8 73 70 72 69 0424*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045601 73 70 72 69 0425*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
04561A 73 70 72 69 0426*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045633 73 70 72 69 0427*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
04564C 73 70 72 69 0428*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045665 73 70 72 69 0429*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
04567E 73 70 72 69 0430*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045697 73 70 72 69 0431*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0456B0 73 70 72 69 0432*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0456C9 73 70 72 69 0433*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0456E2 73 70 72 69 0434*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0456FB 73 70 72 69 0435*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
045711 73 70 72 69 0436*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
045727 73 70 72 69 0437*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
04573D 73 70 72 69 0438*   fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
045756 73 70 72 69 0439*   fn_test_stripes: db "sprites/test_stripes.rgba2",0
       74 65 73 2F 
       74 65 73 74 
       5F 73 74 72 
       69 70 65 73 
       2E 72 67 62 
       61 32 00    
045771 73 70 72 69 0440*   fn_tile_blank: db "sprites/tile_blank.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 62 6C 61 
       6E 6B 2E 72 
       67 62 61 32 
       00          
04578A 73 70 72 69 0441*   fn_tile_pad_0: db "sprites/tile_pad_0.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 30 2E 72 
       67 62 61 32 
       00          
0457A3 73 70 72 69 0442*   fn_tile_pad_1: db "sprites/tile_pad_1.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 31 2E 72 
       67 62 61 32 
       00          
0457BC 73 70 72 69 0443*   fn_tile_pad_2: db "sprites/tile_pad_2.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 32 2E 72 
       67 62 61 32 
       00          
0457D5 73 70 72 69 0444*   fn_tile_pad_3: db "sprites/tile_pad_3.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 33 2E 72 
       67 62 61 32 
       00          
0457EE 73 70 72 69 0445*   fn_tile_pad_4: db "sprites/tile_pad_4.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 34 2E 72 
       67 62 61 32 
       00          
045807 73 70 72 69 0446*   fn_tile_pad_5: db "sprites/tile_pad_5.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 35 2E 72 
       67 62 61 32 
       00          
045820 73 70 72 69 0447*   fn_tile_pad_6: db "sprites/tile_pad_6.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 36 2E 72 
       67 62 61 32 
       00          
045839 73 70 72 69 0448*   fn_tile_pad_7: db "sprites/tile_pad_7.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 37 2E 72 
       67 62 61 32 
       00          
045852 73 70 72 69 0449*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
04586B 73 70 72 69 0450*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045884 73 70 72 69 0451*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
04589D 73 70 72 69 0452*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0458B6 73 70 72 69 0453*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0458CF 73 70 72 69 0454*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0458E8 73 70 72 69 0455*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045901 73 70 72 69 0456*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04591A 73 70 72 69 0457*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
045933 73 70 72 69 0458*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
04594C 73 70 72 69 0459*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045965 73 70 72 69 0460*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
04597E 73 70 72 69 0461*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045997 73 70 72 69 0462*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0459B0 73 70 72 69 0463*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0459C9 73 70 72 69 0464*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0459E2 73 70 72 69 0465*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0459FB 73 70 72 69 0466*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045A14 73 70 72 69 0467*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045A2D 73 70 72 69 0468*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045A46 73 70 72 69 0469*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045A5F 73 70 72 69 0470*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045A78 73 70 72 69 0471*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045A91 73 70 72 69 0472*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045AAA 73 70 72 69 0473*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045AC3 73 70 72 69 0474*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045ADC 73 70 72 69 0475*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045AF5 73 70 72 69 0476*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045B0E 73 70 72 69 0477*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045B27 73 70 72 69 0478*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045B40 73 70 72 69 0479*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045B59 73 70 72 69 0480*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045B72             0055        include "images_ui.inc"
045B72             0001*   ; Generated by make_images.py
045B72             0002*   
045B72             0003*   ui_num_images: equ 43
045B72             0004*   
045B72             0005*   ; buffer_ids:
045B72             0006*   BUF_BAR_H_0: equ 0
045B72             0007*   BUF_BAR_H_1: equ 1
045B72             0008*   BUF_BAR_H_2: equ 2
045B72             0009*   BUF_BAR_V_0: equ 3
045B72             0010*   BUF_BAR_V_1: equ 4
045B72             0011*   BUF_BAR_V_2: equ 5
045B72             0012*   BUF_BEZEL_L: equ 6
045B72             0013*   BUF_BEZEL_R: equ 7
045B72             0014*   BUF_CREDITS: equ 8
045B72             0015*   BUF_CTL_PANEL_L: equ 9
045B72             0016*   BUF_CTL_PANEL_R: equ 10
045B72             0017*   BUF_JERRY_CAN: equ 11
045B72             0018*   BUF_MFD_ARMS: equ 12
045B72             0019*   BUF_MFD_BEZEL: equ 13
045B72             0020*   BUF_MFD_BG: equ 14
045B72             0021*   BUF_MFD_GUN_0: equ 15
045B72             0022*   BUF_MFD_GUN_1: equ 16
045B72             0023*   BUF_MFD_GUN_2: equ 17
045B72             0024*   BUF_MFD_GUN_3: equ 18
045B72             0025*   BUF_MFD_GUN_4: equ 19
045B72             0026*   BUF_MFD_GUN_5: equ 20
045B72             0027*   BUF_MFD_MAVERICK_0: equ 21
045B72             0028*   BUF_MFD_MAVERICK_1: equ 22
045B72             0029*   BUF_MFD_MAVERICK_2: equ 23
045B72             0030*   BUF_MFD_MAVERICK_3: equ 24
045B72             0031*   BUF_MFD_MAVERICK_4: equ 25
045B72             0032*   BUF_MFD_MAVERICK_5: equ 26
045B72             0033*   BUF_MFD_SIDEWINDER_0: equ 27
045B72             0034*   BUF_MFD_SIDEWINDER_1: equ 28
045B72             0035*   BUF_MFD_SIDEWINDER_2: equ 29
045B72             0036*   BUF_MFD_SIDEWINDER_3: equ 30
045B72             0037*   BUF_MFD_SIDEWINDER_4: equ 31
045B72             0038*   BUF_MFD_SIDEWINDER_5: equ 32
045B72             0039*   BUF_MFD_SPARROW_0: equ 33
045B72             0040*   BUF_MFD_SPARROW_1: equ 34
045B72             0041*   BUF_MFD_SPARROW_2: equ 35
045B72             0042*   BUF_MFD_SPARROW_3: equ 36
045B72             0043*   BUF_MFD_SPARROW_4: equ 37
045B72             0044*   BUF_MFD_SPARROW_5: equ 38
045B72             0045*   BUF_POWER: equ 39
045B72             0046*   BUF_SHIELD: equ 40
045B72             0047*   BUF_SPLASH_BG: equ 41
045B72             0048*   BUF_SPLASH_LOGO: equ 42
045B72             0049*   
045B72             0050*   ui_image_list: ; type; width; height; size; filename; bufferId:
045B72 01 00 00 80 0051*   	dl 1, 128, 8, 1024, fn_bar_h_0, 0
       00 00 08 00 
       00 00 04 00 
       78 5E 04 00 
       00 00       
045B84 01 00 00 80 0052*   	dl 1, 128, 8, 1024, fn_bar_h_1, 1
       00 00 08 00 
       00 00 04 00 
       89 5E 04 01 
       00 00       
045B96 01 00 00 80 0053*   	dl 1, 128, 8, 1024, fn_bar_h_2, 2
       00 00 08 00 
       00 00 04 00 
       9A 5E 04 02 
       00 00       
045BA8 01 00 00 08 0054*   	dl 1, 8, 128, 1024, fn_bar_v_0, 3
       00 00 80 00 
       00 00 04 00 
       AB 5E 04 03 
       00 00       
045BBA 01 00 00 08 0055*   	dl 1, 8, 128, 1024, fn_bar_v_1, 4
       00 00 80 00 
       00 00 04 00 
       BC 5E 04 04 
       00 00       
045BCC 01 00 00 08 0056*   	dl 1, 8, 128, 1024, fn_bar_v_2, 5
       00 00 80 00 
       00 00 04 00 
       CD 5E 04 05 
       00 00       
045BDE 01 00 00 80 0057*   	dl 1, 128, 304, 38912, fn_bezel_l, 6
       00 00 30 01 
       00 00 98 00 
       DE 5E 04 06 
       00 00       
045BF0 01 00 00 80 0058*   	dl 1, 128, 304, 38912, fn_bezel_r, 7
       00 00 30 01 
       00 00 98 00 
       EF 5E 04 07 
       00 00       
045C02 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_credits, 8
       00 00 10 00 
       00 00 01 00 
       00 5F 04 08 
       00 00       
045C14 01 00 00 80 0060*   	dl 1, 128, 128, 16384, fn_ctl_panel_l, 9
       00 00 80 00 
       00 00 40 00 
       11 5F 04 09 
       00 00       
045C26 01 00 00 80 0061*   	dl 1, 128, 128, 16384, fn_ctl_panel_r, 10
       00 00 80 00 
       00 00 40 00 
       26 5F 04 0A 
       00 00       
045C38 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_jerry_can, 11
       00 00 10 00 
       00 00 01 00 
       3B 5F 04 0B 
       00 00       
045C4A 01 00 00 24 0063*   	dl 1, 36, 18, 648, fn_mfd_arms, 12
       00 00 12 00 
       00 88 02 00 
       4E 5F 04 0C 
       00 00       
045C5C 01 00 00 60 0064*   	dl 1, 96, 96, 9216, fn_mfd_bezel, 13
       00 00 60 00 
       00 00 24 00 
       60 5F 04 0D 
       00 00       
045C6E 01 00 00 40 0065*   	dl 1, 64, 64, 4096, fn_mfd_bg, 14
       00 00 40 00 
       00 00 10 00 
       73 5F 04 0E 
       00 00       
045C80 01 00 00 01 0066*   	dl 1, 1, 6, 6, fn_mfd_gun_0, 15
       00 00 06 00 
       00 06 00 00 
       83 5F 04 0F 
       00 00       
045C92 01 00 00 01 0067*   	dl 1, 1, 6, 6, fn_mfd_gun_1, 16
       00 00 06 00 
       00 06 00 00 
       96 5F 04 10 
       00 00       
045CA4 01 00 00 01 0068*   	dl 1, 1, 6, 6, fn_mfd_gun_2, 17
       00 00 06 00 
       00 06 00 00 
       A9 5F 04 11 
       00 00       
045CB6 01 00 00 01 0069*   	dl 1, 1, 6, 6, fn_mfd_gun_3, 18
       00 00 06 00 
       00 06 00 00 
       BC 5F 04 12 
       00 00       
045CC8 01 00 00 01 0070*   	dl 1, 1, 6, 6, fn_mfd_gun_4, 19
       00 00 06 00 
       00 06 00 00 
       CF 5F 04 13 
       00 00       
045CDA 01 00 00 01 0071*   	dl 1, 1, 6, 6, fn_mfd_gun_5, 20
       00 00 06 00 
       00 06 00 00 
       E2 5F 04 14 
       00 00       
045CEC 01 00 00 04 0072*   	dl 1, 4, 6, 24, fn_mfd_maverick_0, 21
       00 00 06 00 
       00 18 00 00 
       F5 5F 04 15 
       00 00       
045CFE 01 00 00 04 0073*   	dl 1, 4, 6, 24, fn_mfd_maverick_1, 22
       00 00 06 00 
       00 18 00 00 
       0D 60 04 16 
       00 00       
045D10 01 00 00 04 0074*   	dl 1, 4, 6, 24, fn_mfd_maverick_2, 23
       00 00 06 00 
       00 18 00 00 
       25 60 04 17 
       00 00       
045D22 01 00 00 04 0075*   	dl 1, 4, 6, 24, fn_mfd_maverick_3, 24
       00 00 06 00 
       00 18 00 00 
       3D 60 04 18 
       00 00       
045D34 01 00 00 04 0076*   	dl 1, 4, 6, 24, fn_mfd_maverick_4, 25
       00 00 06 00 
       00 18 00 00 
       55 60 04 19 
       00 00       
045D46 01 00 00 04 0077*   	dl 1, 4, 6, 24, fn_mfd_maverick_5, 26
       00 00 06 00 
       00 18 00 00 
       6D 60 04 1A 
       00 00       
045D58 01 00 00 03 0078*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_0, 27
       00 00 06 00 
       00 12 00 00 
       85 60 04 1B 
       00 00       
045D6A 01 00 00 03 0079*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_1, 28
       00 00 06 00 
       00 12 00 00 
       9F 60 04 1C 
       00 00       
045D7C 01 00 00 03 0080*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_2, 29
       00 00 06 00 
       00 12 00 00 
       B9 60 04 1D 
       00 00       
045D8E 01 00 00 03 0081*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_3, 30
       00 00 06 00 
       00 12 00 00 
       D3 60 04 1E 
       00 00       
045DA0 01 00 00 03 0082*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_4, 31
       00 00 06 00 
       00 12 00 00 
       ED 60 04 1F 
       00 00       
045DB2 01 00 00 03 0083*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_5, 32
       00 00 06 00 
       00 12 00 00 
       07 61 04 20 
       00 00       
045DC4 01 00 00 03 0084*   	dl 1, 3, 7, 21, fn_mfd_sparrow_0, 33
       00 00 07 00 
       00 15 00 00 
       21 61 04 21 
       00 00       
045DD6 01 00 00 03 0085*   	dl 1, 3, 7, 21, fn_mfd_sparrow_1, 34
       00 00 07 00 
       00 15 00 00 
       38 61 04 22 
       00 00       
045DE8 01 00 00 03 0086*   	dl 1, 3, 7, 21, fn_mfd_sparrow_2, 35
       00 00 07 00 
       00 15 00 00 
       4F 61 04 23 
       00 00       
045DFA 01 00 00 03 0087*   	dl 1, 3, 7, 21, fn_mfd_sparrow_3, 36
       00 00 07 00 
       00 15 00 00 
       66 61 04 24 
       00 00       
045E0C 01 00 00 03 0088*   	dl 1, 3, 7, 21, fn_mfd_sparrow_4, 37
       00 00 07 00 
       00 15 00 00 
       7D 61 04 25 
       00 00       
045E1E 01 00 00 03 0089*   	dl 1, 3, 7, 21, fn_mfd_sparrow_5, 38
       00 00 07 00 
       00 15 00 00 
       94 61 04 26 
       00 00       
045E30 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_power, 39
       00 00 10 00 
       00 00 01 00 
       AB 61 04 27 
       00 00       
045E42 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_shield, 40
       00 00 10 00 
       00 00 01 00 
       BA 61 04 28 
       00 00       
045E54 01 00 00 40 0092*   	dl 1, 320, 240, 76800, fn_splash_bg, 41
       01 00 F0 00 
       00 00 2C 01 
       CA 61 04 29 
       00 00       
045E66 01 00 00 A0 0093*   	dl 1, 160, 106, 16960, fn_splash_logo, 42
       00 00 6A 00 
       00 40 42 00 
       DD 61 04 2A 
       00 00       
045E78             0094*   
045E78             0095*   ; files_list: ; filename:
045E78 75 69 2F 62 0096*   fn_bar_h_0: db "ui/bar_h_0.rgba2",0
       61 72 5F 68 
       5F 30 2E 72 
       67 62 61 32 
       00          
045E89 75 69 2F 62 0097*   fn_bar_h_1: db "ui/bar_h_1.rgba2",0
       61 72 5F 68 
       5F 31 2E 72 
       67 62 61 32 
       00          
045E9A 75 69 2F 62 0098*   fn_bar_h_2: db "ui/bar_h_2.rgba2",0
       61 72 5F 68 
       5F 32 2E 72 
       67 62 61 32 
       00          
045EAB 75 69 2F 62 0099*   fn_bar_v_0: db "ui/bar_v_0.rgba2",0
       61 72 5F 76 
       5F 30 2E 72 
       67 62 61 32 
       00          
045EBC 75 69 2F 62 0100*   fn_bar_v_1: db "ui/bar_v_1.rgba2",0
       61 72 5F 76 
       5F 31 2E 72 
       67 62 61 32 
       00          
045ECD 75 69 2F 62 0101*   fn_bar_v_2: db "ui/bar_v_2.rgba2",0
       61 72 5F 76 
       5F 32 2E 72 
       67 62 61 32 
       00          
045EDE 75 69 2F 62 0102*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
045EEF 75 69 2F 62 0103*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
045F00 75 69 2F 63 0104*   fn_credits: db "ui/credits.rgba2",0
       72 65 64 69 
       74 73 2E 72 
       67 62 61 32 
       00          
045F11 75 69 2F 63 0105*   fn_ctl_panel_l: db "ui/ctl_panel_l.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
045F26 75 69 2F 63 0106*   fn_ctl_panel_r: db "ui/ctl_panel_r.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
045F3B 75 69 2F 6A 0107*   fn_jerry_can: db "ui/jerry_can.rgba2",0
       65 72 72 79 
       5F 63 61 6E 
       2E 72 67 62 
       61 32 00    
045F4E 75 69 2F 6D 0108*   fn_mfd_arms: db "ui/mfd_arms.rgba2",0
       66 64 5F 61 
       72 6D 73 2E 
       72 67 62 61 
       32 00       
045F60 75 69 2F 6D 0109*   fn_mfd_bezel: db "ui/mfd_bezel.rgba2",0
       66 64 5F 62 
       65 7A 65 6C 
       2E 72 67 62 
       61 32 00    
045F73 75 69 2F 6D 0110*   fn_mfd_bg: db "ui/mfd_bg.rgba2",0
       66 64 5F 62 
       67 2E 72 67 
       62 61 32 00 
045F83 75 69 2F 6D 0111*   fn_mfd_gun_0: db "ui/mfd_gun_0.rgba2",0
       66 64 5F 67 
       75 6E 5F 30 
       2E 72 67 62 
       61 32 00    
045F96 75 69 2F 6D 0112*   fn_mfd_gun_1: db "ui/mfd_gun_1.rgba2",0
       66 64 5F 67 
       75 6E 5F 31 
       2E 72 67 62 
       61 32 00    
045FA9 75 69 2F 6D 0113*   fn_mfd_gun_2: db "ui/mfd_gun_2.rgba2",0
       66 64 5F 67 
       75 6E 5F 32 
       2E 72 67 62 
       61 32 00    
045FBC 75 69 2F 6D 0114*   fn_mfd_gun_3: db "ui/mfd_gun_3.rgba2",0
       66 64 5F 67 
       75 6E 5F 33 
       2E 72 67 62 
       61 32 00    
045FCF 75 69 2F 6D 0115*   fn_mfd_gun_4: db "ui/mfd_gun_4.rgba2",0
       66 64 5F 67 
       75 6E 5F 34 
       2E 72 67 62 
       61 32 00    
045FE2 75 69 2F 6D 0116*   fn_mfd_gun_5: db "ui/mfd_gun_5.rgba2",0
       66 64 5F 67 
       75 6E 5F 35 
       2E 72 67 62 
       61 32 00    
045FF5 75 69 2F 6D 0117*   fn_mfd_maverick_0: db "ui/mfd_maverick_0.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       30 2E 72 67 
       62 61 32 00 
04600D 75 69 2F 6D 0118*   fn_mfd_maverick_1: db "ui/mfd_maverick_1.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       31 2E 72 67 
       62 61 32 00 
046025 75 69 2F 6D 0119*   fn_mfd_maverick_2: db "ui/mfd_maverick_2.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       32 2E 72 67 
       62 61 32 00 
04603D 75 69 2F 6D 0120*   fn_mfd_maverick_3: db "ui/mfd_maverick_3.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       33 2E 72 67 
       62 61 32 00 
046055 75 69 2F 6D 0121*   fn_mfd_maverick_4: db "ui/mfd_maverick_4.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       34 2E 72 67 
       62 61 32 00 
04606D 75 69 2F 6D 0122*   fn_mfd_maverick_5: db "ui/mfd_maverick_5.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       35 2E 72 67 
       62 61 32 00 
046085 75 69 2F 6D 0123*   fn_mfd_sidewinder_0: db "ui/mfd_sidewinder_0.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 30 2E 
       72 67 62 61 
       32 00       
04609F 75 69 2F 6D 0124*   fn_mfd_sidewinder_1: db "ui/mfd_sidewinder_1.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 31 2E 
       72 67 62 61 
       32 00       
0460B9 75 69 2F 6D 0125*   fn_mfd_sidewinder_2: db "ui/mfd_sidewinder_2.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 32 2E 
       72 67 62 61 
       32 00       
0460D3 75 69 2F 6D 0126*   fn_mfd_sidewinder_3: db "ui/mfd_sidewinder_3.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 33 2E 
       72 67 62 61 
       32 00       
0460ED 75 69 2F 6D 0127*   fn_mfd_sidewinder_4: db "ui/mfd_sidewinder_4.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 34 2E 
       72 67 62 61 
       32 00       
046107 75 69 2F 6D 0128*   fn_mfd_sidewinder_5: db "ui/mfd_sidewinder_5.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 35 2E 
       72 67 62 61 
       32 00       
046121 75 69 2F 6D 0129*   fn_mfd_sparrow_0: db "ui/mfd_sparrow_0.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 30 
       2E 72 67 62 
       61 32 00    
046138 75 69 2F 6D 0130*   fn_mfd_sparrow_1: db "ui/mfd_sparrow_1.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 31 
       2E 72 67 62 
       61 32 00    
04614F 75 69 2F 6D 0131*   fn_mfd_sparrow_2: db "ui/mfd_sparrow_2.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 32 
       2E 72 67 62 
       61 32 00    
046166 75 69 2F 6D 0132*   fn_mfd_sparrow_3: db "ui/mfd_sparrow_3.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 33 
       2E 72 67 62 
       61 32 00    
04617D 75 69 2F 6D 0133*   fn_mfd_sparrow_4: db "ui/mfd_sparrow_4.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 34 
       2E 72 67 62 
       61 32 00    
046194 75 69 2F 6D 0134*   fn_mfd_sparrow_5: db "ui/mfd_sparrow_5.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 35 
       2E 72 67 62 
       61 32 00    
0461AB 75 69 2F 70 0135*   fn_power: db "ui/power.rgba2",0
       6F 77 65 72 
       2E 72 67 62 
       61 32 00    
0461BA 75 69 2F 73 0136*   fn_shield: db "ui/shield.rgba2",0
       68 69 65 6C 
       64 2E 72 67 
       62 61 32 00 
0461CA 75 69 2F 73 0137*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
0461DD 75 69 2F 73 0138*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
0461F2             0056        include "levels.inc"
0461F2             0001*   ; tileset indices
0461F2             0002*   tiles_dg: equ 0
0461F2             0003*   ; tiles_xevious: equ 1
0461F2 00 00 00    0004*   tileset_ptr_idx: dl 0
0461F5             0005*   tileset_ptrs:
0461F5             0006*       ; dl tiles_xevious_levels
0461F5 06 63 04    0007*       dl tileset_00_levels
0461F8 00 00 00    0008*   tileset_ptrs_end: dl 0 ; list terminator
0461FB             0009*   
0461FB             0010*   ; get a pointer to the current tileset
0461FB             0011*   ; inputs: tileset_ptr_idx
0461FB             0012*   ; returns: ix = pointer to tileset levels lut
0461FB             0013*   get_tileset_ptr:
0461FB 3A F2 61 04 0014*       ld a,(tileset_ptr_idx)
0461FF 57          0015*       ld d,a ; d = tileset index
046200 1E 03       0016*       ld e,3 ; three bytes per index record
046202 ED 5C       0017*       mlt de ; offset into tileset_ptrs lut
046204 DD 21 F5 61 0018*       ld ix,tileset_ptrs
       04          
046209 DD 19       0019*       add ix,de ; ix = pointer to tileset_ptrs record
04620B C9          0020*       ret
04620C             0021*   ; end get_tileset_ptr
04620C             0022*   
04620C             0023*   ; intialize a tileset
04620C             0024*   ; inputs: a = index into tileset_ptrs
04620C             0025*   init_tileset:
04620C 32 F2 61 04 0026*       ld (tileset_ptr_idx),a ; store new tileset index
046210 CD FB 61 04 0027*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
046214 DD 37 00    0028*       ld ix,(ix) ; ix = pointer to tileset levels lut
046217 DD 7E FF    0029*       ld a,(ix-1) ; number of levels in the tileset
04621A 32 4A 62 04 0030*       ld (num_levels),a
04621E AF          0031*       xor a ; reset current level to zero
04621F 32 49 62 04 0032*       ld (cur_level),a
046223 C3 83 62 04 0033*       jp init_level
046227             0034*   ; end init_tileset
046227             0035*   
046227             0036*   next_tileset:
046227 21 F2 61 04 0037*       ld hl,tileset_ptr_idx
04622B 34          0038*       inc (hl) ; bump to next index
04622C CD FB 61 04 0039*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
046230 DD 27 00    0040*       ld hl,(ix) ; ix = pointer to tileset levels lut
046233             0041*       sign_hlu ; check for list terminator (0)
046233 19          0001*M1     add hl,de ; 1 cycle
046234 B7          0002*M1     or a ; clear flags ; 1 cycle
046235 ED 52       0003*M1     sbc hl,de ; 2 cycles
046237             0004*M1     ; 4 cycles total
046237 C2 45 62 04 0042*       jp nz,@F ; not end of list
04623B 3E FF       0043*       ld a,-1 ; will wrap around to zero on the next iteration
04623D 32 F2 61 04 0044*       ld (tileset_ptr_idx),a
046241 C3 27 62 04 0045*       jp next_tileset ; try again
046245             0046*   @@:
046245 C3 0C 62 04 0047*       jp init_tileset
046249             0048*   ; end next_tileset
046249             0049*   
046249 00          0050*   cur_level: db 0
04624A 00          0051*   num_levels: db 0
04624B             0052*   
04624B             0053*   ; get a pointer to the current level lookup record
04624B             0054*   ; inputs: tileset_ptr_idx, cur_level
04624B             0055*   ; returns: ix = pointer to level definition
04624B             0056*   get_level_ptr:
04624B CD FB 61 04 0057*       call get_tileset_ptr
04624F DD 37 00    0058*       ld ix,(ix) ; ix = pointer to tileset levels lut
046252 3A 49 62 04 0059*       ld a,(cur_level)
046256 57          0060*       ld d,a ; d = level index
046257 1E 03       0061*       ld e,3 ; three bytes per level record
046259 ED 5C       0062*       mlt de ; offset into tileset levels lut
04625B DD 19       0063*       add ix,de ; ix = pointer to level record
04625D C9          0064*       ret
04625E             0065*   ; end get_level_ptr
04625E             0066*   
04625E             0067*   ; advance to the next level in the current tileset
04625E             0068*   ; inputs: tileset_ptr_idx, cur_level
04625E             0069*   next_level:
04625E             0070*   ; update starting score
04625E 2A 25 79 04 0071*       ld hl,(player_score)
046262 22 2B 79 04 0072*       ld (player_starting_score),hl
046266             0073*   ; set up pointers to next map definition
046266 21 49 62 04 0074*       ld hl,cur_level
04626A 34          0075*       inc (hl) ; bump to next level
04626B CD 4B 62 04 0076*       call get_level_ptr ; ix points to current level lookup record
04626F DD 27 00    0077*       ld hl,(ix) ; hl = pointer to next level lookup record
046272             0078*       sign_hlu ; check for list terminator (0)
046272 19          0001*M1     add hl,de ; 1 cycle
046273 B7          0002*M1     or a ; clear flags ; 1 cycle
046274 ED 52       0003*M1     sbc hl,de ; 2 cycles
046276             0004*M1     ; 4 cycles total
046276 C2 83 62 04 0079*       jp nz,@F ; not end of list
04627A AF          0080*       xor a ; reset level to zero
04627B 32 49 62 04 0081*       ld (cur_level),a
04627F C3 27 62 04 0082*       jp next_tileset ; try next tileset
046283             0083*   @@: ; fall through to init_level
046283             0084*   ; end next_level
046283             0085*   
046283             0086*   ; inputs: ix pointed to tileset level definition
046283             0087*   init_level:
046283             0088*   ; set pointers
046283 CD 4B 62 04 0089*       call get_level_ptr ; ix points to level lookup record
046287 DD 37 00    0090*       ld ix,(ix) ; ix points to level definition
04628A             0091*   ; set tiles_cols
04628A DD 7E 00    0092*       ld a,(ix+0)
04628D 32 65 84 04 0093*       ld (tiles_cols),a
046291             0094*   ; set tiles_row counter
046291 DD 7E 01    0095*       ld a,(ix+1)
046294 32 62 84 04 0096*       ld (tiles_row),a
046298             0097*   ; set cur_baseBufferId
046298 DD 27 04    0098*       ld hl,(ix+4)
04629B 22 66 84 04 0099*       ld (cur_baseBufferId),hl
04629F             0100*   ; set tiles_row_defs
04629F ED 32 07    0101*       lea ix,ix+7 ; ix points to definition of first tile of first row
0462A2 DD 22 5F 84 0102*       ld (tiles_row_defs),ix
       04          
0462A7             0103*   ; reset tile rows and plot coordinates
0462A7 21 FF FF FF 0104*       ld hl,-1
0462AB 22 71 85 04 0105*       ld (bg_y_plot),hl
0462AF 23          0106*       inc hl
0462B0 22 62 84 04 0107*       ld (tiles_row),hl
0462B4 22 6A 84 04 0108*       ld (tiles_x_plot),hl
0462B8 21 F1 FF FF 0109*       ld hl,-15
0462BC 22 6E 84 04 0110*       ld (tiles_y_plot),hl
0462C0             0111*   ; print_level:
0462C0             0112*   level_x: equ 48
0462C0             0113*   level_y: equ 0
0462C0 0E 30       0114*       ld c,level_x
0462C2 06 00       0115*       ld b,level_y
0462C4 CD 73 12 04 0116*       call vdu_move_cursor
0462C8 CD 5C 00 04 0117*       call printInline
0462CC 4C 65 76 65 0118*       asciz "Level: "
       6C 3A 20 00 
0462D4 3A 49 62 04 0119*       ld a,(cur_level)
0462D8 CD 08 89 04 0120*       call printHexA
0462DC             0121*   ; draw initial background tiles
0462DC 21 00 04 00 0122*       ld hl,BUF_BG_STARS_0
0462E0 CD 74 13 04 0123*       call vdu_buff_select
0462E4 01 00 00 00 0124*       ld bc,0
0462E8 11 00 00 00 0125*       ld de,field_top
0462EC CD D0 16 04 0126*       call vdu_plot_bmp
0462F0 21 04 04 00 0127*       ld hl,BUF_BG_STARS_4
0462F4 CD 74 13 04 0128*       call vdu_buff_select
0462F8 01 00 00 00 0129*       ld bc,0
0462FC 11 00 01 00 0130*       ld de,field_top+256
046300 CD D0 16 04 0131*       call vdu_plot_bmp
046304 C9          0132*       ret
046305             0133*   ; end init_level
046305             0057        include "levels_tileset_0.inc"
046305             0001*   ; Generated from tiles/dg/dg0_03.tmx
046305             0002*   
046305 01          0003*   tileset_00_num_levels: db 1
046306             0004*   
046306             0005*   tileset_00_levels:
046306 0C 63 04    0006*   	dl tileset_00_level_00
046309 00 00 00    0007*   	dl 0 ; list terminator
04630C             0008*   
04630C             0009*   tileset_00_level_00: ; Level 0
04630C 10          0010*   	db 16          ; num cols
04630D 00 01 00    0011*   	dl 256          ; num rows
046310 00 02 00    0012*   	dl 512 ; base bufferId
046313 F8 F8 F8 F8 0013*   	db 248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248
       F8 F8 F8 F8 
       F8 F8 F8 F8 
       F8 F8 F8 F8 
046323 00 00 00 00 0014*   	db 000,000,000,000,000,000,147,000,089,090,091,000,147,000,000,000
       00 00 93 00 
       59 5A 5B 00 
       93 00 00 00 
046333 00 CE CF D0 0015*   	db 000,206,207,208,000,000,147,000,073,005,075,000,147,000,000,000
       00 00 93 00 
       49 05 4B 00 
       93 00 00 00 
046343 81 BE 79 A7 0016*   	db 129,190,121,167,216,216,182,145,057,058,059,145,147,000,000,000
       D8 D8 B6 91 
       39 3A 3B 91 
       93 00 00 00 
046353 00 AE AF B0 0017*   	db 000,174,175,176,000,206,183,208,000,000,000,206,207,207,208,000
       00 CE B7 D0 
       00 00 00 CE 
       CF CF D0 00 
046363 00 00 83 00 0018*   	db 000,000,131,000,000,190,156,171,220,220,220,220,186,192,192,129
       00 BE 9C AB 
       DC DC DC DC 
       BA C0 C0 81 
046373 00 00 83 00 0019*   	db 000,000,131,000,000,174,184,176,000,000,000,131,219,191,131,000
       00 AE B8 B0 
       00 00 00 83 
       DB BF 83 00 
046383 00 CE CF D0 0020*   	db 000,206,207,208,000,000,215,000,000,000,000,131,187,191,131,000
       00 00 D7 00 
       00 00 00 83 
       BB BF 83 00 
046393 81 BE 69 A7 0021*   	db 129,190,105,167,216,216,166,129,129,129,129,131,136,137,131,000
       D8 D8 A6 81 
       81 81 81 83 
       88 89 83 00 
0463A3 00 AE AF B0 0022*   	db 000,174,175,176,000,000,131,000,000,000,000,131,134,135,131,000
       00 00 83 00 
       00 00 00 83 
       86 87 83 00 
0463B3 00 00 83 00 0023*   	db 000,000,131,000,000,000,131,000,000,000,000,131,134,135,131,000
       00 00 83 00 
       00 00 00 83 
       86 87 83 00 
0463C3 00 00 83 00 0024*   	db 000,000,131,000,000,000,131,000,000,000,000,131,150,151,131,000
       00 00 83 00 
       00 00 00 83 
       96 97 83 00 
0463D3 00 CE CF D0 0025*   	db 000,206,207,208,000,000,131,000,000,000,000,131,150,151,131,000
       00 00 83 00 
       00 00 00 83 
       96 97 83 00 
0463E3 81 BE 79 A7 0026*   	db 129,190,121,167,216,216,231,216,216,216,216,168,154,155,131,000
       D8 D8 E7 D8 
       D8 D8 D8 A8 
       9A 9B 83 00 
0463F3 00 AE AF B0 0027*   	db 000,174,175,176,000,206,183,208,000,000,000,174,175,175,176,000
       00 CE B7 D0 
       00 00 00 AE 
       AF AF B0 00 
046403 00 00 83 00 0028*   	db 000,000,131,000,000,190,156,192,000,000,000,000,131,000,000,000
       00 BE 9C C0 
       00 00 00 00 
       83 00 00 00 
046413 00 00 83 00 0029*   	db 000,000,131,000,000,174,184,176,000,000,000,000,131,000,000,000
       00 AE B8 B0 
       00 00 00 00 
       83 00 00 00 
046423 00 CE CF D0 0030*   	db 000,206,207,208,000,000,215,000,000,206,140,140,140,140,208,000
       00 00 D7 00 
       00 CE 8C 8C 
       8C 8C D0 00 
046433 81 BE 79 A7 0031*   	db 129,190,121,167,216,216,166,000,000,140,081,082,083,084,140,129
       D8 D8 A6 00 
       00 8C 51 52 
       53 54 8C 81 
046443 00 AE AF B0 0032*   	db 000,174,175,176,000,000,131,000,000,140,065,092,093,068,140,000
       00 00 83 00 
       00 8C 41 5C 
       5D 44 8C 00 
046453 00 00 83 00 0033*   	db 000,000,131,000,000,000,131,129,129,140,049,076,077,052,140,000
       00 00 83 81 
       81 8C 31 4C 
       4D 34 8C 00 
046463 00 00 83 00 0034*   	db 000,000,131,000,000,000,131,000,000,140,033,034,035,036,140,129
       00 00 83 00 
       00 8C 21 22 
       23 24 8C 81 
046473 00 CE CF D0 0035*   	db 000,206,207,208,000,000,131,000,000,174,140,140,140,140,176,000
       00 00 83 00 
       00 AE 8C 8C 
       8C 8C B0 00 
046483 81 BE 69 A7 0036*   	db 129,190,105,167,216,216,182,000,000,000,000,000,000,000,000,000
       D8 D8 B6 00 
       00 00 00 00 
       00 00 00 00 
046493 00 AE AF B0 0037*   	db 000,174,175,176,000,206,183,208,000,000,000,000,000,000,000,000
       00 CE B7 D0 
       00 00 00 00 
       00 00 00 00 
0464A3 00 00 83 00 0038*   	db 000,000,131,000,000,190,156,192,009,010,010,010,010,010,010,011
       00 BE 9C C0 
       09 0A 0A 0A 
       0A 0A 0A 0B 
0464B3 00 00 83 00 0039*   	db 000,000,131,000,000,174,184,176,000,000,000,000,000,000,000,000
       00 AE B8 B0 
       00 00 00 00 
       00 00 00 00 
0464C3 00 CE CF D0 0040*   	db 000,206,207,208,000,000,215,145,145,081,082,088,083,084,145,145
       00 00 D7 91 
       91 51 52 58 
       53 54 91 91 
0464D3 81 BE 79 A7 0041*   	db 129,190,121,167,216,216,166,000,000,065,156,248,156,068,000,000
       D8 D8 A6 00 
       00 41 9C F8 
       9C 44 00 00 
0464E3 00 AE AF B4 0042*   	db 000,174,175,180,000,000,147,000,000,071,248,001,248,087,000,000
       00 00 93 00 
       00 47 F8 01 
       F8 57 00 00 
0464F3 00 00 00 D3 0043*   	db 000,000,000,211,000,000,147,000,000,049,156,248,156,052,000,000
       00 00 93 00 
       00 31 9C F8 
       9C 34 00 00 
046503 91 91 91 D3 0044*   	db 145,145,145,211,145,145,145,145,145,033,034,072,035,036,145,145
       91 91 91 91 
       91 21 22 48 
       23 24 91 91 
046513 BF 93 98 D3 0045*   	db 191,147,152,211,153,147,191,191,191,147,191,191,191,147,191,191
       99 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046523 BF 93 96 D3 0046*   	db 191,147,150,211,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046533 BF 93 96 04 0047*   	db 191,147,150,004,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046543 BF 93 96 04 0048*   	db 191,147,150,004,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046553 BF 93 86 DB 0049*   	db 191,147,134,219,135,147,191,191,191,147,191,191,191,147,191,191
       87 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046563 BF 93 8A DB 0050*   	db 191,147,138,219,139,147,191,191,191,147,191,191,191,147,191,191
       8B 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
046573 91 91 91 DB 0051*   	db 145,145,145,219,145,145,145,145,145,145,145,145,145,145,145,145
       91 91 91 91 
       91 91 91 91 
       91 91 91 91 
046583 00 83 00 DB 0052*   	db 000,131,000,219,000,131,000,000,000,131,000,000,000,131,000,000
       00 83 00 00 
       00 83 00 00 
       00 83 00 00 
046593 00 83 00 DB 0053*   	db 000,131,000,219,000,131,000,000,000,131,000,000,000,131,000,000
       00 83 00 00 
       00 83 00 00 
       00 83 00 00 
0465A3 DC DC DC EC 0054*   	db 220,220,220,236,220,220,220,220,220,220,220,235,220,220,220,220
       DC DC DC DC 
       DC DC DC EB 
       DC DC DC DC 
0465B3 00 83 00 00 0055*   	db 000,131,000,000,000,131,000,136,137,131,000,219,000,131,000,000
       00 83 00 88 
       89 83 00 DB 
       00 83 00 00 
0465C3 00 83 00 00 0056*   	db 000,131,000,000,000,131,000,134,135,131,000,219,000,131,000,000
       00 83 00 86 
       87 83 00 DB 
       00 83 00 00 
0465D3 00 83 00 00 0057*   	db 000,131,000,000,000,131,000,150,151,131,000,219,000,131,000,000
       00 83 00 96 
       97 83 00 DB 
       00 83 00 00 
0465E3 00 83 00 00 0058*   	db 000,131,000,000,000,131,000,154,155,131,000,187,000,131,000,000
       00 83 00 9A 
       9B 83 00 BB 
       00 83 00 00 
0465F3 81 81 81 81 0059*   	db 129,129,129,129,129,129,129,184,129,129,136,137,129,129,129,129
       81 81 81 B8 
       81 81 88 89 
       81 81 81 81 
046603 BF BF D0 00 0060*   	db 191,191,208,000,000,206,191,215,191,191,134,135,009,010,010,011
       00 CE BF D7 
       BF BF 86 87 
       09 0A 0A 0B 
046613 BF BF BF D0 0061*   	db 191,191,191,208,206,191,191,215,191,191,134,135,191,191,191,191
       CE BF BF D7 
       BF BF 86 87 
       BF BF BF BF 
046623 59 5A 5B BF 0062*   	db 089,090,091,191,191,004,191,215,191,191,150,151,191,191,248,191
       BF 04 BF D7 
       BF BF 96 97 
       BF BF F8 BF 
046633 49 05 4B BF 0063*   	db 073,005,075,191,191,004,167,200,191,191,150,151,191,248,001,248
       BF 04 A7 C8 
       BF BF 96 97 
       BF F8 01 F8 
046643 39 3A 3B BF 0064*   	db 057,058,059,191,191,004,191,215,191,191,154,155,191,191,248,191
       BF 04 BF D7 
       BF BF 9A 9B 
       BF BF F8 BF 
046653 BF BF BF B0 0065*   	db 191,191,191,176,174,191,191,215,191,191,184,191,191,191,191,191
       AE BF BF D7 
       BF BF B8 BF 
       BF BF BF BF 
046663 BF BF B0 00 0066*   	db 191,191,176,000,000,174,191,165,216,216,232,216,216,216,216,216
       00 AE BF A5 
       D8 D8 E8 D8 
       D8 D8 D8 D8 
046673 00 00 00 00 0067*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
046683 81 81 81 81 0068*   	db 129,129,129,129,129,129,131,000,131,000,000,000,000,000,000,000
       81 81 83 00 
       83 00 00 00 
       00 00 00 00 
046693 00 00 00 00 0069*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
0466A3 00 00 00 00 0070*   	db 000,000,000,000,000,000,131,000,131,129,129,129,129,129,129,129
       00 00 83 00 
       83 81 81 81 
       81 81 81 81 
0466B3 00 00 00 00 0071*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
0466C3 00 00 00 00 0072*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
0466D3 95 95 95 95 0073*   	db 149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149
       95 95 95 95 
       95 95 95 95 
       95 95 95 95 
0466E3 00 00 00 00 0074*   	db 000,000,000,000,000,206,191,191,191,208,000,000,000,000,000,000
       00 CE BF BF 
       BF D0 00 00 
       00 00 00 00 
0466F3 BF BF BF BF 0075*   	db 191,191,191,191,191,191,089,090,091,191,191,191,191,191,191,191
       BF BF 59 5A 
       5B BF BF BF 
       BF BF BF BF 
046703 BF BF BF BF 0076*   	db 191,191,191,191,191,191,073,005,075,191,191,191,191,191,191,191
       BF BF 49 05 
       4B BF BF BF 
       BF BF BF BF 
046713 BF BF BF BF 0077*   	db 191,191,191,191,191,191,057,058,059,191,191,191,191,191,191,191
       BF BF 39 3A 
       3B BF BF BF 
       BF BF BF BF 
046723 00 00 00 00 0078*   	db 000,000,000,000,000,174,191,191,191,176,000,000,000,000,000,000
       00 AE BF BF 
       BF B0 00 00 
       00 00 00 00 
046733 85 85 85 85 0079*   	db 133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133
       85 85 85 85 
       85 85 85 85 
       85 85 85 85 
046743 00 00 83 00 0080*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,000,147,000
       83 00 00 00 
       83 00 00 00 
       00 00 93 00 
046753 00 00 83 00 0081*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,000,147,000
       83 00 00 00 
       83 00 00 00 
       00 00 93 00 
046763 00 00 83 00 0082*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,206,207,208
       83 00 00 00 
       83 00 00 00 
       00 CE CF D0 
046773 00 00 83 00 0083*   	db 000,000,131,000,131,000,000,000,131,000,000,000,206,191,248,191
       83 00 00 00 
       83 00 00 00 
       CE BF F8 BF 
046783 81 81 81 81 0084*   	db 129,129,129,129,129,129,129,129,129,129,129,129,190,248,001,248
       81 81 81 81 
       81 81 81 81 
       BE F8 01 F8 
046793 00 00 83 00 0085*   	db 000,000,131,000,131,000,000,000,131,000,000,000,174,191,248,191
       83 00 00 00 
       83 00 00 00 
       AE BF F8 BF 
0467A3 00 00 83 00 0086*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,190,191,191
       83 00 00 00 
       83 00 00 00 
       00 BE BF BF 
0467B3 00 00 83 00 0087*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,190,191,191
       83 00 00 00 
       83 00 00 00 
       00 BE BF BF 
0467C3 00 00 83 00 0088*   	db 000,000,131,000,131,000,000,000,131,000,000,000,206,191,191,191
       83 00 00 00 
       83 00 00 00 
       CE BF BF BF 
0467D3 00 CE 09 0A 0089*   	db 000,206,009,010,011,208,000,000,131,000,000,206,191,191,191,191
       0B D0 00 00 
       83 00 00 CE 
       BF BF BF BF 
0467E3 BF BF 59 5A 0090*   	db 191,191,089,090,091,191,191,191,191,191,191,191,191,191,092,093
       5B BF BF BF 
       BF BF BF BF 
       BF BF 5C 5D 
0467F3 BF BF 49 05 0091*   	db 191,191,073,005,075,191,191,191,191,191,191,191,191,191,076,077
       4B BF BF BF 
       BF BF BF BF 
       BF BF 4C 4D 
046803 BF BF 39 3A 0092*   	db 191,191,057,058,059,191,191,191,191,191,191,191,191,191,191,191
       3B BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
046813 00 AE BF BF 0093*   	db 000,174,191,191,191,191,191,191,191,191,176,000,174,175,175,175
       BF BF BF BF 
       BF BF B0 00 
       AE AF AF AF 
046823 00 00 83 00 0094*   	db 000,000,131,000,131,000,174,191,191,191,000,000,000,000,131,000
       83 00 AE BF 
       BF BF 00 00 
       00 00 83 00 
046833 00 00 83 00 0095*   	db 000,000,131,000,131,000,000,191,191,191,000,000,000,000,131,000
       83 00 00 BF 
       BF BF 00 00 
       00 00 83 00 
046843 00 00 83 00 0096*   	db 000,000,131,000,131,000,000,191,191,191,000,000,000,000,131,000
       83 00 00 BF 
       BF BF 00 00 
       00 00 83 00 
046853 84 84 84 84 0097*   	db 132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132
       84 84 84 84 
       84 84 84 84 
       84 84 84 84 
046863 00 00 00 00 0098*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046873 00 00 00 00 0099*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046883 00 00 00 00 0100*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
046893 00 CE CF CF 0101*   	db 000,206,207,207,208,000,000,009,010,011,000,000,000,000,000,000
       D0 00 00 09 
       0A 0B 00 00 
       00 00 00 00 
0468A3 00 BE 98 99 0102*   	db 000,190,152,153,192,000,000,191,248,191,000,000,000,000,000,000
       C0 00 00 BF 
       F8 BF 00 00 
       00 00 00 00 
0468B3 00 BE 96 97 0103*   	db 000,190,150,151,192,145,145,248,001,248,000,000,000,000,000,000
       C0 91 91 F8 
       01 F8 00 00 
       00 00 00 00 
0468C3 00 BE 96 97 0104*   	db 000,190,150,151,192,000,000,191,248,191,000,000,000,000,000,000
       C0 00 00 BF 
       F8 BF 00 00 
       00 00 00 00 
0468D3 00 BE 96 97 0105*   	db 000,190,150,151,192,000,000,191,191,191,000,000,000,000,000,000
       C0 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
0468E3 00 BE 8A 8B 0106*   	db 000,190,138,139,192,145,145,191,191,191,000,000,000,000,000,000
       C0 91 91 BF 
       BF BF 00 00 
       00 00 00 00 
0468F3 00 AE BF BC 0107*   	db 000,174,191,188,176,000,000,191,191,191,000,206,207,207,208,000
       B0 00 00 BF 
       BF BF 00 CE 
       CF CF D0 00 
046903 00 00 BE DB 0108*   	db 000,000,190,219,000,000,000,191,191,191,145,190,152,153,192,000
       00 00 00 BF 
       BF BF 91 BE 
       98 99 C0 00 
046913 BF BF BF DB 0109*   	db 191,191,191,219,208,000,206,191,191,191,000,190,150,151,192,000
       D0 00 CE BF 
       BF BF 00 BE 
       96 97 C0 00 
046923 59 5A 5B DB 0110*   	db 089,090,091,219,191,191,191,191,167,216,216,168,150,151,192,000
       BF BF BF BF 
       A7 D8 D8 A8 
       96 97 C0 00 
046933 49 05 4B AA 0111*   	db 073,005,075,170,191,191,191,191,191,191,000,190,150,151,192,000
       BF BF BF BF 
       BF BF 00 BE 
       96 97 C0 00 
046943 39 3A 3B BF 0112*   	db 057,058,059,191,191,191,191,191,191,191,145,190,138,139,192,000
       BF BF BF BF 
       BF BF 91 BE 
       8A 8B C0 00 
046953 BF BF B0 93 0113*   	db 191,191,176,147,000,000,174,191,191,191,000,174,188,175,176,000
       00 00 AE BF 
       BF BF 00 AE 
       BC AF B0 00 
046963 00 00 00 93 0114*   	db 000,000,000,147,000,000,000,191,008,191,000,000,219,192,000,000
       00 00 00 BF 
       08 BF 00 00 
       DB C0 00 00 
046973 00 00 00 93 0115*   	db 000,000,000,147,000,000,000,191,008,220,220,220,170,192,000,000
       00 00 00 BF 
       08 DC DC DC 
       AA C0 00 00 
046983 00 00 00 93 0116*   	db 000,000,000,147,000,000,000,191,008,191,175,175,175,176,000,000
       00 00 00 BF 
       08 BF AF AF 
       AF B0 00 00 
046993 00 00 00 93 0117*   	db 000,000,000,147,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
0469A3 00 00 CE CF 0118*   	db 000,000,206,207,208,000,000,191,191,191,000,000,000,000,000,000
       D0 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
0469B3 00 CE BF F8 0119*   	db 000,206,191,248,191,208,000,191,191,191,208,000,206,191,191,191
       BF D0 00 BF 
       BF BF D0 00 
       CE BF BF BF 
0469C3 81 BE F8 01 0120*   	db 129,190,248,001,248,191,191,191,191,191,191,191,191,089,090,091
       F8 BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
0469D3 00 AE AF F8 0121*   	db 000,174,175,248,191,191,191,191,191,191,191,191,191,073,005,075
       BF BF BF BF 
       BF BF BF BF 
       BF 49 05 4B 
0469E3 00 00 AE BF 0122*   	db 000,000,174,191,176,000,174,191,191,191,191,191,191,057,058,059
       B0 00 AE BF 
       BF BF BF BF 
       BF 39 3A 3B 
0469F3 00 00 00 83 0123*   	db 000,000,000,131,000,000,000,000,131,000,000,000,174,191,191,191
       00 00 00 00 
       83 00 00 00 
       AE BF BF BF 
046A03 7A 7B 7A 7B 0124*   	db 122,123,122,123,122,123,122,123,122,123,122,123,122,123,122,123
       7A 7B 7A 7B 
       7A 7B 7A 7B 
       7A 7B 7A 7B 
046A13 6A 6B 6A 6B 0125*   	db 106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107
       6A 6B 6A 6B 
       6A 6B 6A 6B 
       6A 6B 6A 6B 
046A23 00 93 00 93 0126*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046A33 00 93 00 93 0127*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046A43 00 93 00 93 0128*   	db 000,147,000,147,108,108,108,108,108,108,147,000,147,000,000,147
       6C 6C 6C 6C 
       6C 6C 93 00 
       93 00 00 93 
046A53 00 93 00 93 0129*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,108,108,108
       00 00 00 00 
       00 00 93 00 
       93 6C 6C 6C 
046A63 00 93 00 93 0130*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046A73 00 93 00 93 0131*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
046A83 CE BF BF BF 0132*   	db 206,191,191,191,208,000,000,000,000,206,191,191,191,208,206,191
       D0 00 00 00 
       00 CE BF BF 
       BF D0 CE BF 
046A93 BF 59 5A 5B 0133*   	db 191,089,090,091,191,191,191,191,191,191,089,090,091,191,191,191
       BF BF BF BF 
       BF BF 59 5A 
       5B BF BF BF 
046AA3 BF 49 05 4B 0134*   	db 191,073,005,075,191,191,191,191,191,191,073,005,075,191,191,191
       BF BF BF BF 
       BF BF 49 05 
       4B BF BF BF 
046AB3 BF 39 3A 3B 0135*   	db 191,057,058,059,191,191,191,191,191,191,057,058,059,191,191,191
       BF BF BF BF 
       BF BF 39 3A 
       3B BF BF BF 
046AC3 AE BF BF BF 0136*   	db 174,191,191,191,176,000,000,000,000,174,191,191,191,176,174,191
       B0 00 00 00 
       00 AE BF BF 
       BF B0 AE BF 
046AD3 00 00 00 00 0137*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
046AE3 00 00 00 00 0138*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
046AF3 00 00 00 00 0139*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
046B03 00 00 00 00 0140*   	db 000,000,000,000,000,000,000,000,000,206,248,208,000,000,000,000
       00 00 00 00 
       00 CE F8 D0 
       00 00 00 00 
046B13 09 0A 0A 0A 0141*   	db 009,010,010,010,010,010,010,010,011,248,001,248,145,145,145,145
       0A 0A 0A 0A 
       0B F8 01 F8 
       91 91 91 91 
046B23 00 00 00 00 0142*   	db 000,000,000,000,000,000,000,000,000,174,248,176,000,000,000,000
       00 00 00 00 
       00 AE F8 B0 
       00 00 00 00 
046B33 00 00 00 00 0143*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046B43 00 00 00 00 0144*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046B53 00 00 00 00 0145*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046B63 00 00 CE CF 0146*   	db 000,000,206,207,207,207,208,000,000,000,000,000,000,000,000,000
       CF CF D0 00 
       00 00 00 00 
       00 00 00 00 
046B73 81 81 BE 59 0147*   	db 129,129,190,089,090,091,192,207,207,207,207,208,000,000,000,000
       5A 5B C0 CF 
       CF CF CF D0 
       00 00 00 00 
046B83 00 00 BE 49 0148*   	db 000,000,190,073,005,075,167,216,216,216,216,182,208,000,000,000
       05 4B A7 D8 
       D8 D8 D8 B6 
       D0 00 00 00 
046B93 81 81 BE 39 0149*   	db 129,129,190,057,058,059,192,176,000,000,000,215,192,000,000,000
       3A 3B C0 B0 
       00 00 00 D7 
       C0 00 00 00 
046BA3 00 00 AE AF 0150*   	db 000,000,174,175,175,175,176,000,000,000,000,215,192,000,000,000
       AF AF B0 00 
       00 00 00 D7 
       C0 00 00 00 
046BB3 00 00 00 83 0151*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
046BC3 00 00 00 83 0152*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
046BD3 00 00 00 83 0153*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
046BE3 00 00 00 83 0154*   	db 000,000,000,131,000,131,000,000,000,206,207,207,207,208,000,000
       00 83 00 00 
       00 CE CF CF 
       CF D0 00 00 
046BF3 81 81 81 81 0155*   	db 129,129,129,129,129,129,129,129,129,190,089,090,091,192,129,129
       81 81 81 81 
       81 BE 59 5A 
       5B C0 81 81 
046C03 00 00 00 00 0156*   	db 000,000,000,000,000,000,000,000,000,190,073,005,075,192,000,000
       00 00 00 00 
       00 BE 49 05 
       4B C0 00 00 
046C13 81 81 81 81 0157*   	db 129,129,129,129,129,129,129,129,129,190,057,058,059,192,129,129
       81 81 81 81 
       81 BE 39 3A 
       3B C0 81 81 
046C23 00 00 00 83 0158*   	db 000,000,000,131,000,131,000,000,000,174,175,180,175,176,000,000
       00 83 00 00 
       00 AE AF B4 
       AF B0 00 00 
046C33 00 00 00 83 0159*   	db 000,000,000,131,000,131,000,000,000,000,191,179,000,000,000,000
       00 83 00 00 
       00 00 BF B3 
       00 00 00 00 
046C43 09 0A 0A 0A 0160*   	db 009,010,010,010,010,010,010,010,010,010,010,010,010,010,010,011
       0A 0A 0A 0A 
       0A 0A 0A 0A 
       0A 0A 0A 0B 
046C53 00 00 00 83 0161*   	db 000,000,000,131,000,131,000,000,000,000,191,180,000,000,000,000
       00 83 00 00 
       00 00 BF B4 
       00 00 00 00 
046C63 00 00 CE CF 0162*   	db 000,000,206,207,207,207,208,000,000,000,191,211,000,000,000,000
       CF CF D0 00 
       00 00 BF D3 
       00 00 00 00 
046C73 00 00 BE 59 0163*   	db 000,000,190,089,090,091,192,000,000,000,191,211,000,000,000,000
       5A 5B C0 00 
       00 00 BF D3 
       00 00 00 00 
046C83 00 00 BE 49 0164*   	db 000,000,190,073,005,075,192,000,000,206,191,248,208,000,000,000
       05 4B C0 00 
       00 CE BF F8 
       D0 00 00 00 
046C93 81 81 BE 39 0165*   	db 129,129,190,057,058,059,171,220,220,220,248,001,248,145,145,145
       3A 3B AB DC 
       DC DC F8 01 
       F8 91 91 91 
046CA3 00 83 AE AF 0166*   	db 000,131,174,175,175,175,176,000,000,000,174,248,176,000,000,000
       AF AF B0 00 
       00 00 AE F8 
       B0 00 00 00 
046CB3 00 83 00 83 0167*   	db 000,131,000,131,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
046CC3 CE CF CF CF 0168*   	db 206,207,207,207,208,000,000,000,000,000,000,000,000,000,000,000
       D0 00 00 00 
       00 00 00 00 
       00 00 00 00 
046CD3 09 0A 0A 0A 0169*   	db 009,010,010,010,011,000,000,000,000,000,000,000,000,000,000,000
       0B 00 00 00 
       00 00 00 00 
       00 00 00 00 
046CE3 BE CF CF CF 0170*   	db 190,207,207,207,192,000,000,000,000,000,000,000,000,000,000,000
       C0 00 00 00 
       00 00 00 00 
       00 00 00 00 
046CF3 BE BF 04 BF 0171*   	db 190,191,004,191,192,000,000,000,000,000,000,000,000,000,000,000
       C0 00 00 00 
       00 00 00 00 
       00 00 00 00 
046D03 BE BF 04 BF 0172*   	db 190,191,004,191,191,000,000,206,207,207,207,208,000,000,000,000
       BF 00 00 CE 
       CF CF CF D0 
       00 00 00 00 
046D13 BE BF 04 BF 0173*   	db 190,191,004,191,192,129,129,190,089,090,091,192,000,000,000,000
       C0 81 81 BE 
       59 5A 5B C0 
       00 00 00 00 
046D23 AE AF AF AF 0174*   	db 174,175,175,175,176,000,000,190,073,005,075,167,216,216,182,000
       B0 00 00 BE 
       49 05 4B A7 
       D8 D8 B6 00 
046D33 00 00 00 00 0175*   	db 000,000,000,000,000,000,000,190,057,058,059,192,000,000,215,000
       00 00 00 BE 
       39 3A 3B C0 
       00 00 D7 00 
046D43 00 00 00 00 0176*   	db 000,000,000,000,000,000,000,174,175,175,175,176,000,000,215,000
       00 00 00 AE 
       AF AF AF B0 
       00 00 D7 00 
046D53 00 00 00 00 0177*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
046D63 00 00 00 00 0178*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
046D73 00 00 00 00 0179*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
046D83 00 00 00 00 0180*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
046D93 00 00 00 00 0181*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
046DA3 CF CF CF D0 0182*   	db 207,207,207,208,000,000,000,000,147,000,147,000,206,207,183,207
       00 00 00 00 
       93 00 93 00 
       CE CF B7 CF 
046DB3 59 5A 5B C0 0183*   	db 089,090,091,192,145,145,145,145,145,145,145,145,190,089,090,091
       91 91 91 91 
       91 91 91 91 
       BE 59 5A 5B 
046DC3 49 05 4B C0 0184*   	db 073,005,075,192,000,000,000,000,147,000,147,000,190,073,005,075
       00 00 00 00 
       93 00 93 00 
       BE 49 05 4B 
046DD3 39 3A 3B C0 0185*   	db 057,058,059,192,145,145,145,145,145,145,145,145,190,057,058,059
       91 91 91 91 
       91 91 91 91 
       BE 39 3A 3B 
046DE3 BF B4 AF B0 0186*   	db 191,180,175,176,206,207,207,207,208,000,147,000,174,175,175,175
       CE CF CF CF 
       D0 00 93 00 
       AE AF AF AF 
046DF3 BF D3 00 00 0187*   	db 191,211,000,000,009,010,010,010,011,000,147,000,000,000,000,000
       09 0A 0A 0A 
       0B 00 93 00 
       00 00 00 00 
046E03 BF D3 00 00 0188*   	db 191,211,000,000,190,207,207,207,192,000,147,000,000,000,000,000
       BE CF CF CF 
       C0 00 93 00 
       00 00 00 00 
046E13 BF D3 00 00 0189*   	db 191,211,000,000,190,191,008,191,192,000,152,153,145,145,145,145
       BE BF 08 BF 
       C0 00 98 99 
       91 91 91 91 
046E23 BF D3 00 00 0190*   	db 191,211,000,000,190,191,008,191,191,000,150,151,000,000,000,000
       BE BF 08 BF 
       BF 00 96 97 
       00 00 00 00 
046E33 BF D3 00 00 0191*   	db 191,211,000,000,190,191,008,191,192,000,150,151,000,000,000,000
       BE BF 08 BF 
       C0 00 96 97 
       00 00 00 00 
046E43 BF D3 00 00 0192*   	db 191,211,000,000,174,175,175,175,176,000,134,135,000,000,000,000
       AE AF AF AF 
       B0 00 86 87 
       00 00 00 00 
046E53 BF D3 00 00 0193*   	db 191,211,000,000,000,000,000,000,000,000,134,135,000,000,000,000
       00 00 00 00 
       00 00 86 87 
       00 00 00 00 
046E63 BF D3 00 CE 0194*   	db 191,211,000,206,207,207,207,208,000,000,138,139,129,129,129,129
       CF CF CF D0 
       00 00 8A 8B 
       81 81 81 81 
046E73 BF A1 A4 BE 0195*   	db 191,161,164,190,089,090,091,192,000,000,188,147,000,000,000,000
       59 5A 5B C0 
       00 00 BC 93 
       00 00 00 00 
046E83 AE AF BF BE 0196*   	db 174,175,191,190,073,005,075,171,220,220,170,147,000,000,000,000
       49 05 4B AB 
       DC DC AA 93 
       00 00 00 00 
046E93 00 00 AE BE 0197*   	db 000,000,174,190,057,058,059,192,000,000,000,147,000,000,000,000
       39 3A 3B C0 
       00 00 00 93 
       00 00 00 00 
046EA3 00 00 00 AE 0198*   	db 000,000,000,174,175,175,175,191,129,129,129,129,129,129,129,129
       AF AF AF BF 
       81 81 81 81 
       81 81 81 81 
046EB3 00 00 00 00 0199*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
046EC3 00 00 00 00 0200*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
046ED3 09 0A 0A 0A 0201*   	db 009,010,010,010,010,010,010,010,010,010,010,010,010,010,010,011
       0A 0A 0A 0A 
       0A 0A 0A 0A 
       0A 0A 0A 0B 
046EE3 00 00 00 00 0202*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
046EF3 00 CE CF CF 0203*   	db 000,206,207,207,207,208,000,000,000,000,000,147,000,147,000,000
       CF D0 00 00 
       00 00 00 93 
       00 93 00 00 
046F03 00 BE BF F8 0204*   	db 000,190,191,248,191,192,000,000,000,000,000,147,000,147,000,000
       BF C0 00 00 
       00 00 00 93 
       00 93 00 00 
046F13 00 BE F8 01 0205*   	db 000,190,248,001,248,192,000,000,000,000,206,207,207,207,208,000
       F8 C0 00 00 
       00 00 CE CF 
       CF CF D0 00 
046F23 00 AE BF F8 0206*   	db 000,174,191,248,191,176,000,000,000,000,190,089,090,091,192,000
       BF B0 00 00 
       00 00 BE 59 
       5A 5B C0 00 
046F33 00 00 AE BC 0207*   	db 000,000,174,188,176,000,000,000,000,185,172,073,005,075,192,000
       B0 00 00 00 
       00 B9 AC 49 
       05 4B C0 00 
046F43 00 00 00 DB 0208*   	db 000,000,000,219,000,000,000,000,000,219,190,057,058,059,192,000
       00 00 00 00 
       00 DB BE 39 
       3A 3B C0 00 
046F53 00 00 00 DB 0209*   	db 000,000,000,219,000,000,000,000,000,219,174,175,175,175,176,000
       00 00 00 00 
       00 DB AE AF 
       AF AF B0 00 
046F63 00 00 00 DB 0210*   	db 000,000,000,219,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046F73 00 B9 DC EC 0211*   	db 000,185,220,236,220,220,220,220,220,204,000,000,000,000,000,000
       DC DC DC DC 
       DC CC 00 00 
       00 00 00 00 
046F83 00 DB 00 00 0212*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046F93 00 DB 00 00 0213*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046FA3 00 DB 00 00 0214*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046FB3 00 DB 00 00 0215*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046FC3 DC AA 00 00 0216*   	db 220,170,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046FD3 00 00 00 00 0217*   	db 000,000,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
046FE3 00 00 00 00 0218*   	db 000,000,000,000,000,000,000,206,207,187,207,208,000,000,000,000
       00 00 00 CE 
       CF BB CF D0 
       00 00 00 00 
046FF3 81 81 81 81 0219*   	db 129,129,129,129,129,129,129,190,089,090,091,192,129,129,129,129
       81 81 81 BE 
       59 5A 5B C0 
       81 81 81 81 
047003 00 00 00 00 0220*   	db 000,000,000,000,000,000,000,190,073,005,075,192,000,000,000,000
       00 00 00 BE 
       49 05 4B C0 
       00 00 00 00 
047013 00 00 00 00 0221*   	db 000,000,000,000,000,000,000,190,057,058,059,192,000,000,000,000
       00 00 00 BE 
       39 3A 3B C0 
       00 00 00 00 
047023 00 00 00 00 0222*   	db 000,000,000,000,000,000,000,174,175,175,175,176,000,000,000,000
       00 00 00 AE 
       AF AF AF B0 
       00 00 00 00 
047033 00 00 00 00 0223*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047043 00 00 00 00 0224*   	db 000,000,000,000,000,000,000,000,131,129,129,129,129,129,129,129
       00 00 00 00 
       83 81 81 81 
       81 81 81 81 
047053 00 00 00 00 0225*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047063 00 00 00 00 0226*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047073 81 81 81 81 0227*   	db 129,129,129,129,129,129,129,129,131,000,000,000,000,000,000,000
       81 81 81 81 
       83 00 00 00 
       00 00 00 00 
047083 00 00 00 00 0228*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047093 00 00 00 00 0229*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
0470A3 00 00 00 00 0230*   	db 000,000,000,000,000,000,000,000,131,129,129,129,129,129,129,129
       00 00 00 00 
       83 81 81 81 
       81 81 81 81 
0470B3 BF BF BF D0 0231*   	db 191,191,191,208,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
0470C3 59 5A 5B BF 0232*   	db 089,090,091,191,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
0470D3 49 05 4B BF 0233*   	db 073,005,075,191,000,000,000,000,131,000,000,152,153,145,145,145
       00 00 00 00 
       83 00 00 98 
       99 91 91 91 
0470E3 39 3A 3B BF 0234*   	db 057,058,059,191,000,000,000,000,131,000,000,150,151,000,000,000
       00 00 00 00 
       83 00 00 96 
       97 00 00 00 
0470F3 BF BF BF BF 0235*   	db 191,191,191,191,000,000,206,207,207,207,208,150,151,000,000,000
       00 00 CE CF 
       CF CF D0 96 
       97 00 00 00 
047103 00 00 BF BF 0236*   	db 000,000,191,191,191,191,191,191,248,191,192,150,151,145,145,145
       BF BF BF BF 
       F8 BF C0 96 
       97 91 91 91 
047113 00 00 BF BF 0237*   	db 000,000,191,191,191,191,191,248,001,248,192,134,135,000,000,000
       BF BF BF F8 
       01 F8 C0 86 
       87 00 00 00 
047123 00 00 AE BF 0238*   	db 000,000,174,191,191,191,191,191,248,191,192,134,135,000,000,000
       BF BF BF BF 
       F8 BF C0 86 
       87 00 00 00 
047133 00 00 00 83 0239*   	db 000,000,000,131,000,000,174,175,175,175,176,134,135,000,000,000
       00 00 AE AF 
       AF AF B0 86 
       87 00 00 00 
047143 00 00 00 83 0240*   	db 000,000,000,131,000,000,000,000,131,000,000,134,135,000,000,000
       00 00 00 00 
       83 00 00 86 
       87 00 00 00 
047153 6A 6B 6C 6B 0241*   	db 106,107,108,107,108,106,107,108,131,000,000,138,139,145,145,145
       6C 6A 6B 6C 
       83 00 00 8A 
       8B 91 91 91 
047163 00 00 00 83 0242*   	db 000,000,000,131,000,000,000,000,131,000,000,191,191,000,000,000
       00 00 00 00 
       83 00 00 BF 
       BF 00 00 00 
047173 00 00 00 83 0243*   	db 000,000,000,131,000,000,000,000,131,000,000,191,191,000,000,000
       00 00 00 00 
       83 00 00 BF 
       BF 00 00 00 
047183 00 00 00 83 0244*   	db 000,000,000,131,000,000,000,000,131,206,207,207,207,208,000,000
       00 00 00 00 
       83 CE CF CF 
       CF D0 00 00 
047193 00 00 00 83 0245*   	db 000,000,000,131,000,000,000,000,131,190,089,090,091,192,145,145
       00 00 00 00 
       83 BE 59 5A 
       5B C0 91 91 
0471A3 00 00 00 83 0246*   	db 000,000,000,131,000,000,000,000,131,190,073,005,075,192,000,000
       00 00 00 00 
       83 BE 49 05 
       4B C0 00 00 
0471B3 81 81 81 83 0247*   	db 129,129,129,131,129,129,129,129,131,190,057,058,059,192,145,145
       81 81 81 81 
       83 BE 39 3A 
       3B C0 91 91 
0471C3 00 00 00 83 0248*   	db 000,000,000,131,000,000,000,000,131,174,175,175,175,176,000,000
       00 00 00 00 
       83 AE AF AF 
       AF B0 00 00 
0471D3 00 00 00 83 0249*   	db 000,000,000,131,000,000,000,000,131,000,000,000,131,000,000,000
       00 00 00 00 
       83 00 00 00 
       83 00 00 00 
0471E3 09 0A 0A 0A 0250*   	db 009,010,010,010,010,010,010,010,010,010,010,010,010,010,010,011
       0A 0A 0A 0A 
       0A 0A 0A 0A 
       0A 0A 0A 0B 
0471F3 85 85 85 85 0251*   	db 133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133
       85 85 85 85 
       85 85 85 85 
       85 85 85 85 
047203 00 00 93 00 0252*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
047213 7A 7B 93 7A 0253*   	db 122,123,147,122,123,122,147,122,123,122,147,122,123,147,122,123
       7B 7A 93 7A 
       7B 7A 93 7A 
       7B 93 7A 7B 
047223 6A 6B 93 6A 0254*   	db 106,107,147,106,107,106,147,106,107,106,147,106,107,147,106,107
       6B 6A 93 6A 
       6B 6A 93 6A 
       6B 93 6A 6B 
047233 00 00 93 00 0255*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
047243 00 00 93 00 0256*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
047253 94 94 94 94 0257*   	db 148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148
       94 94 94 94 
       94 94 94 94 
       94 94 94 94 
047263 59 5A 5B BF 0258*   	db 089,090,091,191,191,191,191,191,191,191,191,191,191,089,090,091
       BF BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
047273 49 05 4B BF 0259*   	db 073,005,075,191,008,191,191,191,191,191,004,191,191,073,005,075
       08 BF BF BF 
       BF BF 04 BF 
       BF 49 05 4B 
047283 39 3A 3B BF 0260*   	db 057,058,059,191,008,191,191,191,191,191,004,191,191,057,058,059
       08 BF BF BF 
       BF BF 04 BF 
       BF 39 3A 3B 
047293 BF BF BF BF 0261*   	db 191,191,191,191,008,191,191,191,191,191,004,191,191,191,191,191
       08 BF BF BF 
       BF BF 04 BF 
       BF BF BF BF 
0472A3 BF BF BF BF 0262*   	db 191,191,191,191,191,248,191,191,191,191,191,248,191,191,191,191
       BF F8 BF BF 
       BF BF BF F8 
       BF BF BF BF 
0472B3 BF BF BF BF 0263*   	db 191,191,191,191,248,001,248,191,191,191,248,001,248,191,191,191
       F8 01 F8 BF 
       BF BF F8 01 
       F8 BF BF BF 
0472C3 BF BF BF BF 0264*   	db 191,191,191,191,191,248,191,191,191,191,191,248,191,191,191,191
       BF F8 BF BF 
       BF BF BF F8 
       BF BF BF BF 
0472D3 59 5A 5B BF 0265*   	db 089,090,091,191,191,191,191,191,191,191,191,191,191,089,090,091
       BF BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
0472E3 49 05 4B BF 0266*   	db 073,005,075,191,191,191,191,191,191,191,191,191,191,073,005,075
       BF BF BF BF 
       BF BF BF BF 
       BF 49 05 4B 
0472F3 39 3A 3B BF 0267*   	db 057,058,059,191,191,191,191,191,191,191,191,191,191,057,058,059
       BF BF BF BF 
       BF BF BF BF 
       BF 39 3A 3B 
047303 84 84 84 84 0268*   	db 132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132
       84 84 84 84 
       84 84 84 84 
       84 84 84 84 
047313             0058        include "player_state.inc"
047313             0001*   player_defaults:
047313 05          0002*       db player               ; type
047314 6F 01 00    0003*       dl BUF_SHIP_0L          ; base_bufferId
047317 79 73 04    0004*       dl do_player            ; move_program
04731A 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
04731B 10          0006*       db 16                   ; dim_x
04731C 10          0007*       db 16                   ; dim_y
04731D 01          0008*       db 1                    ; num_orientations
04731E 01          0009*       db 1                    ; num_animations
04731F 00          0010*       db 0                    ; animation
047320 00          0011*       db 0                    ; animation_timer
047321 00          0012*       db 0                    ; move_timer
047322 00          0013*       db 0                    ; move_step
047323 00          0014*       db 0                    ; points
047324 00          0015*       db 0                    ; shield_damage
047325 00          0016*       db 0                    ; frame
047326             0017*   
047326 08 74 04    0018*   player_state:  dl player_alive
047329 03          0019*   player_ships: db 3 ; integer
04732A             0020*   player_speed: equ 3*256 ; pixels per frame 16.8 fixed
04732A             0021*   
04732A             0022*   draw_player_ships:
04732A             0023*   ; activate mfd
04732A DD 21 AD 75 0024*       ld ix,mfd_bg_r
       04          
04732F CD BC 75 04 0025*       call mfd_activate
047333             0026*   ; blank out previously drawn ships
047333 AF          0027*       xor a ; color mode 0
047334 0E 00       0028*       ld c,c_black
047336 CD C9 12 04 0029*       call vdu_gcol
04733A 01 00 00 00 0030*       ld bc,0
04733E 11 00 00 00 0031*       ld de,0
047342 DD 21 3F 00 0032*       ld ix,63
       00          
047347 FD 21 0F 00 0033*       ld iy,15
       00          
04734C CD 0D 17 04 0034*       call vdu_plot_rf
047350             0035*   ; draw the ships remaining
047350 21 72 01 00 0036*       ld hl,BUF_SHIP_SMALL
047354 CD 74 13 04 0037*       call vdu_buff_select
047358 3A 29 73 04 0038*       ld a,(player_ships) ; loop counter
04735C 01 04 00 00 0039*       ld bc,4 ; starting x-coordinate
047360             0040*   @loop:
047360 F5          0041*       push af ; back up loop counter
047361 C5          0042*       push bc ; save x-coordinate
047362 11 04 00 00 0043*       ld de,4 ; y-coordinate
047366 CD D0 16 04 0044*       call vdu_plot_bmp
04736A C1          0045*       pop bc ; restore x-coordinate
04736B 21 0C 00 00 0046*       ld hl,12 ; bump x-coords
04736F 09          0047*       add hl,bc
047370 E5          0048*       push hl
047371 C1          0049*       pop bc ; bc = new x-coordinate
047372 F1          0050*       pop af
047373 3D          0051*       dec a
047374 C2 60 73 04 0052*       jp nz,@loop
047378 C9          0053*       ret
047379             0054*   ; end draw_player_ships
047379             0055*   
047379             0056*   do_player:
047379 2A 26 73 04 0057*       ld hl,(player_state)
04737D             0058*       CALL_HL
04737D 01 83 73 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
047381 C5          0002*M1     push bc ; which constitutes the return address
047382 E9          0003*M1     jp (hl) ; Jump to the address in HL
047383 C9          0059*       ret
047384             0060*   ; end do_player
047384             0061*   
047384             0062*   ; set initial player position
047384             0063*   ; inputs: none,everything is hardcoded
047384             0064*   ; outputs: player_x/y set to bottom-left corner of screen
047384             0065*   ; destroys: pretty much everything
047384             0066*   player_init:
047384 3A 63 79 04 0067*       ld a,(player_shields_max)
047388 32 62 79 04 0068*       ld (player_shields),a
04738C 3A F6 77 04 0069*       ld a,(laser_power_max)
047390 32 F4 77 04 0070*       ld (laser_power),a
047394 3A D4 76 04 0071*       ld a,(player_fuel_max)
047398 32 D2 76 04 0072*       ld (player_fuel),a
04739C             0073*   ; set all to zero so they will update
04739C AF          0074*       xor a
04739D 32 F5 77 04 0075*       ld (laser_power_last),a
0473A1 32 64 79 04 0076*       ld (player_shields_last),a
0473A5 32 D3 76 04 0077*       ld (player_fuel_last),a
0473A9             0078*   ; set player sprite record with defaults
0473A9 DD 21 05 95 0079*       ld ix,player_begin
       04          
0473AE 21 13 73 04 0080*       ld hl,player_defaults
0473B2 01 00 00 00 0081*       ld bc,0*256
0473B6 11 00 30 01 0082*       ld de,sprite_bottom*256
0473BA 3E 01       0083*       ld a,1
0473BC CD 74 7A 04 0084*       call spawn_sprite_from_coords
0473C0 D2 EB 73 04 0085*       jp nc,@draw
0473C4 DD CB 16 BE 0086*       res 7,(ix+sprite_type)
0473C8             0087*   ; load sprite frames
0473C8 DD 7E 00    0088*       ld a,(ix+sprite_id)
0473CB CD 71 17 04 0089*       call vdu_sprite_select
0473CF CD 84 17 04 0090*       call vdu_sprite_clear_frames
0473D3 21 6F 01 00 0091*       ld hl,BUF_SHIP_0L
0473D7 CD C6 18 04 0092*       call vdu_sprite_add_buff
0473DB 21 70 01 00 0093*       ld hl,BUF_SHIP_1C
0473DF CD C6 18 04 0094*       call vdu_sprite_add_buff
0473E3 21 71 01 00 0095*       ld hl,BUF_SHIP_2R
0473E7 CD C6 18 04 0096*       call vdu_sprite_add_buff
0473EB             0097*   @draw:
0473EB 01 00 00 00 0098*       ld bc,0*256
0473EF 11 00 30 01 0099*       ld de,sprite_bottom*256
0473F3 CD 3D 18 04 0100*       call vdu_sprite_move_abs168
0473F7 CD E7 17 04 0101*       call vdu_sprite_show
0473FB 21 08 74 04 0102*       ld hl,player_alive
0473FF 22 26 73 04 0103*       ld (player_state),hl
047403 DD CB 1D F6 0104*       set sprite_alive,(ix+sprite_collisions)
047407 C9          0105*       ret
047408             0106*   ; end player_init
047408             0107*   
047408             0108*   player_alive:
047408 CD 0F 77 04 0109*       call player_input
04740C CD 60 78 04 0110*       call player_move_weapons
047410 C9          0111*       ret
047411             0112*   ; end player_alive
047411             0113*   
047411             0114*   player_dying:
047411             0115*   ; DEBUG
047411             0116*   ; decrement lives
047411 3A 29 73 04 0117*       ld a,(player_ships)
047415 3D          0118*       dec a
047416 CA 90 7C 04 0119*       jp z,game_over
04741A 32 29 73 04 0120*       ld (player_ships),a
04741E CD 2A 73 04 0121*       call draw_player_ships
047422             0122*   ; reset the sprite table
047422 CD DC 79 04 0123*       call table_init
047426 21 05 94 04 0124*       ld hl,table_base
04742A 22 B7 79 04 0125*       ld (table_pointer),hl
04742E             0126*   ; initialize sprites and active tiles table
04742E CD 14 7A 04 0127*       call sprites_init
047432 CD DC 79 04 0128*       call table_init
047436 CD FB 82 04 0129*       call tile_table_init
04743A             0130*   ; reset player score to what it was at the start of the level
04743A 2A 2B 79 04 0131*       ld hl,(player_starting_score)
04743E 22 25 79 04 0132*       ld (player_score),hl
047442             0133*   ; set gfx origin and viewport to playing field window
047442 01 80 00 00 0134*       ld bc,origin_left
047446 11 40 00 00 0135*       ld de,origin_top
04744A CD 0C 13 04 0136*       call vdu_set_gfx_origin
04744E 01 00 00 00 0137*       ld bc,field_left
047452 11 00 00 00 0138*       ld de,field_top
047456 DD 21 FF 00 0139*       ld ix,field_right
       00          
04745B FD 21 3F 01 0140*       ld iy,field_bottom
       00          
047460 CD 27 13 04 0141*       call vdu_set_gfx_viewport
047464 CD 9A 12 04 0142*       call vdu_clg
047468             0143*   ; restart the level
047468 21 49 62 04 0144*       ld hl,cur_level
04746C 35          0145*       dec (hl) ; decrement level so it will be incremented back to the same level
04746D CD 5E 62 04 0146*       call next_level
047471             0147*   ; spawn player sprite at starting position
047471 CD 84 73 04 0148*       call player_init
047475             0149*   ; set the game state to playing
047475 21 B4 7E 04 0150*       ld hl,game_playing
047479 22 5F 7C 04 0151*       ld (game_state), hl
04747D             0152*   ; set game playing substates
04747D 21 08 74 04 0153*       ld hl,player_alive
047481 22 26 73 04 0154*       ld (player_state), hl
047485 21 EC 1E 04 0155*       ld hl,enemies_alive
047489 22 DE 1E 04 0156*       ld (enemies_state), hl
04748D C9          0157*       ret
04748E             0158*   ; END DEBUG
04748E             0159*   
04748E 21 F8 1E 04 0160*       ld hl,enemies_despawning
047492 22 DE 1E 04 0161*       ld (enemies_state),hl
047496 C9          0162*       ret
047497             0163*   ; end player_dying
047497             0164*   
047497             0165*   player_dead:
047497 CD 60 78 04 0166*       call player_move_weapons
04749B C9          0167*       ret
04749C             0168*   ; end player_dead
04749C             0169*   
04749C             0170*   
04749C             0171*   kill_player:
04749C 21 11 74 04 0172*       ld hl,player_dying
0474A0 22 26 73 04 0173*       ld (player_state),hl
0474A4 C9          0174*       ret
0474A5             0175*   ; end kill_player
0474A5             0176*   
0474A5             0059        include "player_cockpit.inc"
0474A5             0001*   ; offsets into control panel element definitions
0474A5             0002*   panel_bufferId: equ 0
0474A5             0003*   panel_x0: equ 3
0474A5             0004*   panel_y0: equ 6
0474A5             0005*   panel_x1: equ 9
0474A5             0006*   panel_y1: equ 12
0474A5             0007*   
0474A5             0008*   ctl_panel_l:
0474A5 09 00 00    0009*       dl BUF_CTL_PANEL_L ; bufferId
0474A8 00 00 00    0010*       dl 0 ; x0
0474AB 00 01 00    0011*       dl 256 ; y0
0474AE 80 00 00    0012*       dl 0+128 ; x1
0474B1 80 01 00    0013*       dl 256+128 ; y1
0474B4             0014*   
0474B4             0015*   ctl_panel_r:
0474B4 0A 00 00    0016*       dl BUF_CTL_PANEL_R ; bufferId
0474B7 80 01 00    0017*       dl 384 ; x0
0474BA 00 01 00    0018*       dl 256 ; y0
0474BD 00 02 00    0019*       dl 384+128 ; x1
0474C0 80 01 00    0020*       dl 256+128 ; y1
0474C3             0021*   
0474C3             0022*   mfd_bezel_l:
0474C3 0D 00 00    0023*       dl BUF_MFD_BEZEL ; bufferId
0474C6 18 00 00    0024*       dl 24 ; x0
0474C9 18 01 00    0025*       dl 280 ; y0
0474CC 78 00 00    0026*       dl 24+96 ; x1
0474CF 78 01 00    0027*       dl 280+96 ; y1
0474D2             0028*   
0474D2             0029*   mfd_bezel_r:
0474D2 0D 00 00    0030*       dl BUF_MFD_BEZEL ; bufferId
0474D5 88 01 00    0031*       dl 392 ; x0
0474D8 18 01 00    0032*       dl 280 ; y0
0474DB E8 01 00    0033*       dl 392+96 ; x1
0474DE 78 01 00    0034*       dl 280+96 ; y1
0474E1             0035*   
0474E1             0036*   draw_player_cockpit:
0474E1 DD 21 A5 74 0037*       ld ix,ctl_panel_l
       04          
0474E6 CD 7D 75 04 0038*       call draw_player_ctl_panel
0474EA DD 21 B4 74 0039*       ld ix,ctl_panel_r
       04          
0474EF CD 7D 75 04 0040*       call draw_player_ctl_panel
0474F3 DD 21 C3 74 0041*       ld ix,mfd_bezel_l
       04          
0474F8 CD 7D 75 04 0042*       call draw_player_ctl_panel
0474FC DD 21 8F 75 0043*       ld ix,mfd_bg_l
       04          
047501 CD 7D 75 04 0044*       call draw_player_ctl_panel
047505 DD 21 9E 75 0045*       ld ix,mfd_arms_l
       04          
04750A CD 7D 75 04 0046*       call draw_player_ctl_panel
04750E DD 21 D2 74 0047*       ld ix,mfd_bezel_r
       04          
047513 CD 7D 75 04 0048*       call draw_player_ctl_panel
047517 DD 21 AD 75 0049*       ld ix,mfd_bg_r
       04          
04751C CD 7D 75 04 0050*       call draw_player_ctl_panel
047520             0051*   
047520 21 28 00 00 0052*       ld hl,BUF_SHIELD
047524 CD 74 13 04 0053*       call vdu_buff_select
047528 01 EC 01 00 0054*       ld bc,492
04752C 11 70 01 00 0055*       ld de,368
047530 CD D0 16 04 0056*       call vdu_plot_bmp
047534 21 27 00 00 0057*       ld hl,BUF_POWER
047538 CD 74 13 04 0058*       call vdu_buff_select
04753C 01 04 00 00 0059*       ld bc,4
047540 11 70 01 00 0060*       ld de,368
047544 CD D0 16 04 0061*       call vdu_plot_bmp
047548 21 08 00 00 0062*       ld hl,BUF_CREDITS
04754C CD 74 13 04 0063*       call vdu_buff_select
047550 01 80 01 00 0064*       ld bc,384
047554 11 05 01 00 0065*       ld de,261
047558 CD D0 16 04 0066*       call vdu_plot_bmp
04755C 21 0B 00 00 0067*       ld hl,BUF_JERRY_CAN
047560 CD 74 13 04 0068*       call vdu_buff_select
047564 01 6E 00 00 0069*       ld bc,110
047568 11 02 01 00 0070*       ld de,258
04756C CD D0 16 04 0071*       call vdu_plot_bmp
047570             0072*   
047570 CD 77 79 04 0073*       call init_bar_shields
047574 CD 0C 78 04 0074*       call init_bar_laser
047578 CD B9 76 04 0075*       call init_bar_fuel
04757C             0076*   
04757C C9          0077*       ret
04757D             0078*   ; end draw_player_cockpit
04757D             0079*   
04757D             0080*   draw_player_ctl_panel:
04757D DD 27 00    0081*       ld hl,(ix+panel_bufferId)
047580 CD 74 13 04 0082*       call vdu_buff_select
047584 DD 07 03    0083*       ld bc,(ix+panel_x0)
047587 DD 17 06    0084*       ld de,(ix+panel_y0)
04758A CD D0 16 04 0085*       call vdu_plot_bmp
04758E C9          0086*       ret
04758F             0087*   ; end draw_player_ctl_panel
04758F             0088*   
04758F             0089*   mfd_bg_l:
04758F 0E 00 00    0090*       dl BUF_MFD_BG ; bufferId
047592 28 00 00    0091*       dl 40 ; x0
047595 28 01 00    0092*       dl 296 ; y0
047598 67 00 00    0093*       dl 40+63 ; x1
04759B 67 01 00    0094*       dl 296+63 ; y1
04759E             0095*   
04759E             0096*   mfd_arms_l:
04759E 0C 00 00    0097*       dl BUF_MFD_ARMS ; bufferId
0475A1 36 00 00    0098*       dl 54 ; x0
0475A4 40 01 00    0099*       dl 320 ; y0
0475A7 59 00 00    0100*       dl 54+35 ; x1
0475AA 51 01 00    0101*       dl 320+17 ; y1
0475AD             0102*   
0475AD             0103*   mfd_bg_r:
0475AD 0E 00 00    0104*       dl BUF_MFD_BG ; bufferId
0475B0 98 01 00    0105*       dl 408 ; x0
0475B3 28 01 00    0106*       dl 296 ; y0
0475B6 D7 01 00    0107*       dl 408+63 ; x1
0475B9 67 01 00    0108*       dl 296+63 ; y1
0475BC             0109*   
0475BC             0110*   mfd_activate:
0475BC DD E5       0111*       push ix ; preserve pointer
0475BE DD 07 03    0112*       ld bc,(ix+panel_x0)
0475C1 DD 17 06    0113*       ld de,(ix+panel_y0)
0475C4 CD 0C 13 04 0114*       call vdu_set_gfx_origin
0475C8 01 00 00 00 0115*       ld bc,0
0475CC 11 00 00 00 0116*       ld de,0
0475D0 DD 21 3F 00 0117*       ld ix,63
       00          
0475D5 FD 21 3F 00 0118*       ld iy,63
       00          
0475DA CD 27 13 04 0119*       call vdu_set_gfx_viewport
0475DE DD E1       0120*       pop ix ; restore pointer
0475E0 C9          0121*       ret
0475E1             0122*   ; end mfd_activate
0475E1             0123*   
0475E1             0124*   mfd_init:
0475E1 DD 27 00    0125*       ld hl,(ix+panel_bufferId)
0475E4 CD 74 13 04 0126*       call vdu_buff_select
0475E8 01 00 00 00 0127*       ld bc,0
0475EC 11 00 00 00 0128*       ld de,0
0475F0 CD D0 16 04 0129*       call vdu_plot_bmp
0475F4 C9          0130*       ret
0475F5             0131*   ; end mfd_init
0475F5             0132*   
0475F5             0133*   bar_val: equ 0 ; current value
0475F5             0134*   bar_x0: equ panel_x0
0475F5             0135*   bar_y0: equ panel_y0
0475F5             0136*   bar_x1: equ panel_x1
0475F5             0137*   bar_y1: equ panel_y1
0475F5             0138*   bar_y: equ 15 ; y-plot coordinate
0475F5             0139*   bar_x: equ 15 ; x-plot coordinate
0475F5             0140*   
0475F5             0141*   bar_yellow: equ 33
0475F5             0142*   bar_red: equ 17
0475F5             0143*   
0475F5             0144*   ; update a vertical bar display
0475F5             0145*   ; inputs: ix points to bar structure
0475F5             0146*   ;         bar_val set by caller
0475F5             0147*   ; prerequisite: bar_init called before first use
0475F5             0148*   bar_update_v:
0475F5             0149*   ; set gfx viewport
0475F5 DD E5       0150*       push ix ; preserve pointer
0475F7 DD 07 03    0151*       ld bc,(ix+bar_x0)
0475FA DD 17 06    0152*       ld de,(ix+bar_y0)
0475FD DD 31 0C    0153*       ld iy,(ix+bar_y1)
047600 DD 37 09    0154*       ld ix,(ix+bar_x1)
047603 CD 27 13 04 0155*       call vdu_set_gfx_viewport
047607 DD E1       0156*       pop ix ; restore pointer
047609             0157*   ; select the color based on the value thresholds
047609 DD 17 00    0158*       ld de,(ix+bar_val)
04760C 21 EF FF FF 0159*       ld hl,-bar_red
047610 19          0160*       add hl,de
047611 D2 2E 76 04 0161*       jp nc,@red
047615 21 DF FF FF 0162*       ld hl,-bar_yellow
047619 19          0163*       add hl,de
04761A D2 26 76 04 0164*       jp nc,@yellow
04761E 21 05 00 00 0165*       ld hl,BUF_BAR_V_2 ; green
047622 C3 32 76 04 0166*       jp @select
047626             0167*   @yellow:
047626 21 04 00 00 0168*       ld hl,BUF_BAR_V_1 ; yellow
04762A C3 32 76 04 0169*       jp @select
04762E             0170*   @red:
04762E 21 03 00 00 0171*       ld hl,BUF_BAR_V_0 ; red
047632             0172*   @select:
047632 CD 74 13 04 0173*       call vdu_buff_select
047636             0174*   ; get x-plot position
047636 DD 07 03    0175*       ld bc,(ix+bar_x0)
047639             0176*   ; compute y-plot position
047639 DD 17 00    0177*       ld de,(ix+bar_val)
04763C 21 40 00 00 0178*       ld hl,64
047640 AF          0179*       xor a ; clear carry
047641 ED 52       0180*       sbc hl,de
047643 DD 17 0F    0181*       ld de,(ix+bar_y)
047646 19          0182*       add hl,de
047647 7D          0183*       ld a,l
047648 E6 FC       0184*       and %11111100 ; round to nearest 4 pixels
04764A 6F          0185*       ld l,a
04764B EB          0186*       ex de,hl
04764C CD D0 16 04 0187*       call vdu_plot_bmp
047650 C9          0188*       ret
047651             0189*   ; end bar_update_v
047651             0190*   
047651             0191*   ; update a horizontal bar display
047651             0192*   ; inputs: ix points to bar structure
047651             0193*   ;         bar_val set by caller
047651             0194*   ; prerequisite: bar_init called before first use
047651             0195*   bar_update_h:
047651             0196*   ; set gfx viewport
047651 DD E5       0197*       push ix ; preserve pointer
047653 DD 07 03    0198*       ld bc,(ix+bar_x0)
047656 DD 17 06    0199*       ld de,(ix+bar_y0)
047659 DD 31 0C    0200*       ld iy,(ix+bar_y1)
04765C DD 37 09    0201*       ld ix,(ix+bar_x1)
04765F CD 27 13 04 0202*       call vdu_set_gfx_viewport
047663 DD E1       0203*       pop ix ; restore pointer
047665             0204*   ; select the color based on the value thresholds
047665 DD 17 00    0205*       ld de,(ix+bar_val)
047668 21 EF FF FF 0206*       ld hl,-bar_red
04766C 19          0207*       add hl,de
04766D D2 8A 76 04 0208*       jp nc,@red
047671 21 DF FF FF 0209*       ld hl,-bar_yellow
047675 19          0210*       add hl,de
047676 D2 82 76 04 0211*       jp nc,@yellow
04767A 21 02 00 00 0212*       ld hl,BUF_BAR_H_2 ; green
04767E C3 8E 76 04 0213*       jp @select
047682             0214*   @yellow:
047682 21 01 00 00 0215*       ld hl,BUF_BAR_H_1 ; yellow
047686 C3 8E 76 04 0216*       jp @select
04768A             0217*   @red:
04768A 21 00 00 00 0218*       ld hl,BUF_BAR_H_0 ; red
04768E             0219*   @select:
04768E CD 74 13 04 0220*       call vdu_buff_select
047692             0221*   ; compute x-plot position
047692 DD 27 00    0222*       ld hl,(ix+bar_val)
047695 DD 07 0F    0223*       ld bc,(ix+bar_x)
047698 09          0224*       add hl,bc
047699 7D          0225*       ld a,l
04769A E6 FC       0226*       and %11111100 ; round to nearest 4 pixels
04769C 6F          0227*       ld l,a
04769D E5          0228*       push hl
04769E C1          0229*       pop bc
04769F             0230*   ; get y-plot position
04769F DD 17 06    0231*       ld de,(ix+bar_y0)
0476A2 CD D0 16 04 0232*       call vdu_plot_bmp
0476A6 C9          0233*       ret
0476A7             0234*   ; end bar_update_h
0476A7             0060        include "player_fuel.inc"
0476A7             0001*   
0476A7             0002*   bar_fuel:
0476A7 00 00 00    0003*       dl 0 ; value
0476AA 30 00 00    0004*       dl 48 ; x0
0476AD 08 01 00    0005*       dl 264 ; y0
0476B0 6F 00 00    0006*       dl 48+63 ; x1
0476B3 0F 01 00    0007*       dl 264+7 ; y1
0476B6 F0 FF FF    0008*       dl 48-64 ; x-plot coordinate
0476B9             0009*   
0476B9             0010*   init_bar_fuel:
0476B9 3A D6 76 04 0011*       ld a,(discharge_fuel_timer_max)
0476BD 32 D5 76 04 0012*       ld (discharge_fuel_timer),a
0476C1 DD 21 A7 76 0013*       ld ix,bar_fuel
       04          
0476C6 3A D4 76 04 0014*       ld a,(player_fuel_max)
0476CA DD 77 00    0015*       ld (ix+bar_val),a
0476CD CD 51 76 04 0016*       call bar_update_h
0476D1 C9          0017*       ret
0476D2             0018*   ; end init_bar_fuel
0476D2             0019*   
0476D2 40          0020*   player_fuel: db 64 ; integer
0476D3 00          0021*   player_fuel_last: db 0 ; integer
0476D4 40          0022*   player_fuel_max: db 64 ; integer
0476D5 00          0023*   discharge_fuel_timer: db 0
0476D6 40          0024*   discharge_fuel_timer_max: db 64 ;
0476D7             0025*   discharge_fuel:
0476D7             0026*   ; check fuel timer
0476D7 21 D5 76 04 0027*       ld hl,discharge_fuel_timer
0476DB 35          0028*       dec (hl)
0476DC C0          0029*       ret nz ; not time to discharge fuel so return
0476DD             0030*   ; reset fuel discharge timer
0476DD 3A D6 76 04 0031*       ld a,(discharge_fuel_timer_max)
0476E1 77          0032*       ld (hl),a
0476E2             0033*   ; discharge fuel
0476E2 21 D2 76 04 0034*       ld hl,player_fuel
0476E6 35          0035*       dec (hl)
0476E7 CA F0 76 04 0036*       jp z,@no_fuel
0476EB FA F0 76 04 0037*       jp m,@no_fuel
0476EF C9          0038*       ret ; fuel not zero so return
0476F0             0039*   @no_fuel:
0476F0 36 00       0040*       ld (hl),0 ; TODO: implement out-of-fuel handler
0476F2 C9          0041*       ret
0476F3             0042*   ; end discharge_fuel
0476F3             0043*   
0476F3             0044*   draw_fuel:
0476F3 CD D7 76 04 0045*       call discharge_fuel
0476F7 21 D3 76 04 0046*       ld hl,player_fuel_last
0476FB 3A D2 76 04 0047*       ld a,(player_fuel)
0476FF BE          0048*       cp (hl)
047700 C8          0049*       ret z ; no change to update
047701 77          0050*       ld (hl),a
047702 DD 21 A7 76 0051*       ld ix,bar_fuel
       04          
047707 DD 77 00    0052*       ld (ix+bar_val),a ; TODO: this is redundant
04770A CD 51 76 04 0053*       call bar_update_h
04770E C9          0054*       ret
04770F             0055*   ; end draw_fuel
04770F             0061        include "player_input.inc"
04770F             0001*   ; UART ports for reading joystick input
04770F             0002*   ; bit tests: 0 means actuated, 1 means not actuated
04770F             0003*   portC: 	EQU 	$9E ; reads dpad input
04770F             0004*   joy1_u: equ 1
04770F             0005*   joy1_d: equ 3
04770F             0006*   joy1_l: equ 5
04770F             0007*   joy1_r: equ 7
04770F             0008*   portD: 	EQU 	$A2 ; reads buttons
04770F             0009*   btn1_a: equ 5
04770F             0010*   
04770F             0011*   ; process player keyboard input, set player bitmap
04770F             0012*   ; velocities and draw player bitmap at updated coordinates
04770F             0013*   ; Inputs: player_x/y set at desired position
04770F             0014*   ; Returns: player bitmap drawn at updated position
04770F             0015*   ; Destroys: probably everything except maybe iy
04770F             0016*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
04770F             0017*   ; TODO: requires sprite implementation
04770F             0018*   player_input:
04770F             0019*   ; point to player sprite record
04770F FD 21 05 95 0020*       ld iy,player_begin
       04          
047714 FD 22 B7 79 0021*       ld (table_pointer),iy
       04          
047719             0022*   ; reset player component velocities to zero as the default
047719 21 00 00 00 0023*       ld hl,0
04771D FD 2F 07    0024*       ld (iy+sprite_xvel),hl
047720 FD 2F 0A    0025*       ld (iy+sprite_yvel),hl
047723             0026*   ; make ship the active sprite
047723 FD 7E 00    0027*       ld a,(iy+sprite_id)
047726 CD 71 17 04 0028*       call vdu_sprite_select
04772A             0029*   ; check for keypresses and branch accordingly
04772A             0030*       MOSCALL    mos_getkbmap ;ix = pointer to MOS virtual keys table
04772A 3E 1E       0001*M1 			LD	A, function
04772C 5B CF       0002*M1 			RST.LIL	08h
04772E             0031*   ; do player directional input
04772E AF          0032*       xor a ; clear flags
04772F DB 9E       0033*       in a,(portC) ; read dpad input
047731 57          0034*       ld d,a ; save dpad input
047732 3E 01       0035*       ld a,1 ; set ship's default animation to center
047734             0036*   ; 26 Left: move player left
047734 DD CB 03 4E 0037*       bit 1,(ix+3)
047738 C2 46 77 04 0038*       jp nz,@F
04773C             0039*   ; test dpad left
04773C CB 6A       0040*       bit joy1_l,d
04773E CA 46 77 04 0041*       jp z,@F
047742 C3 52 77 04 0042*       jp @right
047746             0043*   @@:
047746 FD 27 07    0044*       ld hl,(iy+sprite_xvel)
047749 01 00 FD FF 0045*       ld bc,-player_speed
04774D 09          0046*       add hl,bc
04774E FD 2F 07    0047*       ld (iy+sprite_xvel),hl
047751 3D          0048*       dec a ; set ship's animation to left
047752             0049*   @right:
047752             0050*   ; 122 Right: move player right
047752 DD CB 0F 4E 0051*       bit 1,(ix+15)
047756 C2 64 77 04 0052*       jp nz,@F
04775A             0053*   ; test dpad right
04775A CB 7A       0054*       bit joy1_r,d
04775C CA 64 77 04 0055*       jp z,@F
047760 C3 70 77 04 0056*       jp @up
047764             0057*   @@:
047764 FD 27 07    0058*       ld hl,(iy+sprite_xvel)
047767 01 00 03 00 0059*       ld bc,player_speed
04776B 09          0060*       add hl,bc
04776C FD 2F 07    0061*       ld (iy+sprite_xvel),hl
04776F 3C          0062*       inc a ; set ship's animation to right
047770             0063*   @up:
047770             0064*   ; 58 Up: move player up
047770 DD CB 07 4E 0065*       bit 1,(ix+7)
047774 C2 82 77 04 0066*       jp nz,@F
047778             0067*   ; test dpad up
047778 CB 4A       0068*       bit joy1_u,d
04777A CA 82 77 04 0069*       jp z,@F
04777E C3 8D 77 04 0070*       jp @dn
047782             0071*   @@:
047782 FD 27 0A    0072*       ld hl,(iy+sprite_yvel)
047785 01 00 FD FF 0073*       ld bc,-player_speed
047789 09          0074*       add hl,bc
04778A FD 2F 0A    0075*       ld (iy+sprite_yvel),hl
04778D             0076*   @dn:
04778D             0077*   ; 42 Down: move player down
04778D DD CB 05 4E 0078*       bit 1,(ix+5)
047791 C2 9F 77 04 0079*       jp nz,@F
047795             0080*   ; test dpad down
047795 CB 5A       0081*       bit joy1_d,d
047797 CA 9F 77 04 0082*       jp z,@F
04779B C3 AA 77 04 0083*       jp @frame
04779F             0084*   @@:
04779F FD 27 0A    0085*       ld hl,(iy+sprite_yvel)
0477A2 01 00 03 00 0086*       ld bc,player_speed
0477A6 09          0087*       add hl,bc
0477A7 FD 2F 0A    0088*       ld (iy+sprite_yvel),hl
0477AA             0089*   @frame:
0477AA             0090*   ; a should land here loaded with the correct frame
0477AA CD D4 17 04 0091*       call vdu_sprite_select_frame
0477AE             0092*   ; draw player at updated position
0477AE FD 21 05 95 0093*       ld iy,player_begin
       04          
0477B3 FD 22 B7 79 0094*       ld (table_pointer),iy
       04          
0477B8 CD 67 7B 04 0095*       call move_sprite
0477BC FD 07 01    0096*       ld bc,(iy+sprite_x)
0477BF FD 17 04    0097*       ld de,(iy+sprite_y)
0477C2 CD 3D 18 04 0098*       call vdu_sprite_move_abs168
0477C6             0099*   
0477C6             0100*   ; process player laser fire
0477C6             0101*   ; do player fire button input
0477C6             0102*   ; read joystick fire button
0477C6 AF          0103*       xor a ; clear flags
0477C7 DB A2       0104*       in a,(portD) ; read joypad fire button input
0477C9 CB 6F       0105*       bit btn1_a,a
0477CB CA 6C 78 04 0106*       jp z,player_spawn_laser
0477CF             0107*   ; 99 Space: fire main weapon
0477CF DD CB 0C 56 0108*       bit 2,(ix+12)
0477D3 C2 6C 78 04 0109*       jp nz,player_spawn_laser
0477D7             0110*   ; no fire button pressed so go home
0477D7 C9          0111*       ret
0477D8             0112*   ; end player_input
0477D8             0062        include "player_laser.inc"
0477D8             0001*   laser_defaults:
0477D8 06          0002*       db player_air        ; type
0477D9 4A 01 00    0003*       dl BUF_LASER_A	    ; base_bufferId
0477DC C9 78 04    0004*       dl move_player_laser	; move_program
0477DF 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
0477E0 05          0006*       db 5	                ; dim_x
0477E1 0D          0007*       db 13                   ; dim_y
0477E2 01          0008*       db 1                    ; num_orientations
0477E3 02          0009*       db 2                    ; num_animations
0477E4 00          0010*       db 0	                ; animation
0477E5 02          0011*       db laser_animation_timer_reset ; animation_timer
0477E6 00          0012*       db 0	                ; move_timer
0477E7 00          0013*       db 0	                ; move_step
0477E8 00          0014*       db 0	                ; points
0477E9 00          0015*       db 0	                ; shield_damage
0477EA 00          0016*       db 0                    ; frame
0477EB             0017*   
0477EB             0018*   
0477EB             0019*   player_lasers_max: equ 4
0477EB             0020*   laser_speed: equ 4*256 ; 6 pixels per frame 16.8 fixed
0477EB             0021*   tmr_laser: ds 6 ; rate timer for firing laser
       FF FF FF FF 
       FF FF 
0477F1 0C 00 00    0022*   tmr_laser_reset: dl 120/10
0477F4             0023*   laser_animation_timer_reset: equ 2 ; animate every two frames
0477F4             0024*   
0477F4 40          0025*   laser_power: db 64 ; integer
0477F5 00          0026*   laser_power_last: db 0 ; integer
0477F6 40          0027*   laser_power_max: db 64 ; integer
0477F7 04          0028*   laser_power_per_shot: db 4 ; integer
0477F8 00          0029*   charge_laser_timer: db 0
0477F9 06          0030*   charge_laser_timer_max: db 6
0477FA             0031*   bar_laser:
0477FA 00 00 00    0032*       dl 0 ; value
0477FD 08 00 00    0033*       dl 8 ; x0
047800 30 01 00    0034*       dl 304 ; y0
047803 0F 00 00    0035*       dl 8+7 ; x1
047806 6F 01 00    0036*       dl 304+63 ; y1
047809 F0 00 00    0037*       dl 304-64 ; y-plot coordinate
04780C             0038*   
04780C             0039*   init_bar_laser:
04780C 3A F9 77 04 0040*       ld a,(charge_laser_timer_max)
047810 32 F8 77 04 0041*       ld (charge_laser_timer),a
047814 DD 21 FA 77 0042*       ld ix,bar_laser
       04          
047819 3A F6 77 04 0043*       ld a,(laser_power_max)
04781D DD 77 00    0044*       ld (ix+bar_val),a
047820 CD F5 75 04 0045*       call bar_update_v
047824 C9          0046*       ret
047825             0047*   ; end init_bar_laser
047825             0048*   
047825             0049*   init_player_laser:
047825             0050*   ; set pointer to laser sprite table
047825 FD 21 05 94 0051*       ld iy,player_weapons_begin
       04          
04782A FD 7E 00    0052*       ld a,(iy+sprite_id) ; sprite id
04782D 1E 04       0053*       ld e,player_lasers_max ; sprite loop counter
04782F             0054*   ; define laser sprites
04782F             0055*   @sprites_loop:
04782F F5          0056*       push af
047830 D5          0057*       push de
047831 CD 71 17 04 0058*   	call vdu_sprite_select
047835 CD 84 17 04 0059*   	call vdu_sprite_clear_frames
047839 21 4A 01 00 0060*   	ld hl,BUF_LASER_A
04783D 06 02       0061*   	ld b,2 ; two bitmaps for laser
04783F             0062*   @frames_loop:
04783F C5          0063*   	push bc
047840 E5          0064*   	push hl
047841 CD C6 18 04 0065*   	call vdu_sprite_add_buff
047845 E1          0066*   	pop hl
047846 23          0067*   	inc hl
047847 C1          0068*   	pop bc
047848 10 F5       0069*   	djnz @frames_loop
04784A D1          0070*       pop de ; sprite loop counter
04784B F1          0071*       pop af ; sprite id
04784C 3C          0072*       inc a
04784D 1D          0073*       dec e
04784E C2 2F 78 04 0074*       jp nz,@sprites_loop
047852             0075*   ; set laser firing timer to zero
047852 FD 21 EB 77 0076*       ld iy,tmr_laser
       04          
047857 21 00 00 00 0077*       ld hl,0
04785B CD E0 11 04 0078*       call timestamp_tmr_set
04785F C9          0079*       ret
047860             0080*   ; end init_player_laser
047860             0081*   
047860             0082*   player_move_weapons:
047860             0083*   ; initialize pointers and loop counter
047860 FD 21 05 94 0084*       ld iy,player_weapons_begin ; set iy to first record in table
       04          
047865 06 04       0085*       ld b,player_lasers_max ; loop counter
047867 CD E6 7A 04 0086*       call move_sprite_group
04786B C9          0087*       ret
04786C             0088*   ; end player_move_weapons
04786C             0089*   
04786C             0090*   player_spawn_laser:
04786C             0091*    ; check laser spawn timer
04786C FD 21 EB 77 0092*       ld iy,tmr_laser
       04          
047871 CD EB 11 04 0093*       call timestamp_tmr_get
047875 F0          0094*       ret p ; not time to fire
047876             0095*   ; check laser power
047876 3A F4 77 04 0096*       ld a,(laser_power)
04787A 21 F7 77 04 0097*       ld hl,laser_power_per_shot
04787E 96          0098*       sub (hl) ; units of power per laser shot
04787F D8          0099*       ret c ; not enough power to fire
047880             0100*   ; update power to reflect firing
047880 32 F4 77 04 0101*       ld (laser_power),a
047884             0102*   ; reset timer
047884 2A F1 77 04 0103*       ld hl,(tmr_laser_reset)
047888 CD E0 11 04 0104*       call timestamp_tmr_set
04788C             0105*   ; fire the laser
04788C DD 21 05 94 0106*       ld ix,player_weapons_begin
       04          
047891 06 04       0107*       ld b,player_lasers_max
047893 FD 21 05 95 0108*       ld iy,player_begin
       04          
047898 FD 22 B7 79 0109*       ld (table_pointer),iy
       04          
04789D 21 D8 77 04 0110*       ld hl,laser_defaults
0478A1 CD B4 7A 04 0111*       call spawn_sprite_from_sprite
0478A5 D0          0112*       ret nc ; no carry means no free sprite slots, so we go home
0478A6             0113*   ; other specific initialization
0478A6             0114*   ; ------------------------------------------------
0478A6 FD 21 05 95 0115*       ld iy,player_begin
       04          
0478AB             0116*   ; x-coordinate
0478AB FD 27 01    0117*       ld hl,(iy+sprite_x)
0478AE 11 00 05 00 0118*       ld de,5*256 ; horizontal center with player sprite
0478B2 19          0119*       add hl,de
0478B3 DD 2F 01    0120*       ld (ix+sprite_x),hl
0478B6             0121*   ; y-coordinate
0478B6 FD 27 04    0122*       ld hl,(iy+sprite_y)
0478B9 11 00 FA FF 0123*       ld de,-6*256 ; set laser y a few pixels above player
0478BD 19          0124*       add hl,de
0478BE DD 2F 04    0125*       ld (ix+sprite_y),hl
0478C1             0126*   ; set laser velocity
0478C1 21 00 FC FF 0127*       ld hl,-laser_speed
0478C5 DD 2F 0A    0128*       ld (ix+sprite_yvel),hl
0478C8 C9          0129*       ret
0478C9             0130*   ; end player_spawn_laser
0478C9             0131*   
0478C9             0132*   move_player_laser:
0478C9             0133*   ; run the movement program for the laser
0478C9 CD 67 7B 04 0134*       call move_sprite
0478CD 3A BA 79 04 0135*       ld a,(sprite_screen_edge)
0478D1 E6 08       0136*       and a,collide_top ; check collision with top of screen
0478D3 CA DB 78 04 0137*       jp z,@F ; still on screen
0478D7 C3 00 7A 04 0138*       jp table_deactivate_sprite
0478DB             0139*   @@: ; check animation timer
0478DB FD 35 23    0140*       dec (iy+sprite_animation_timer)
0478DE C2 F2 78 04 0141*       jp nz,@F
0478E2 3E 02       0142*       ld a,laser_animation_timer_reset
0478E4 FD 77 23    0143*       ld (iy+sprite_animation_timer),a
0478E7 FD 7E 00    0144*       ld a,(iy+sprite_id)
0478EA CD 71 17 04 0145*       call vdu_sprite_select
0478EE CD B8 17 04 0146*       call vdu_sprite_next_frame
0478F2             0147*   @@: ; all done
0478F2 C9          0148*       ret
0478F3             0149*   ; end move_player_laser
0478F3             0150*   
0478F3             0151*   charge_laser:
0478F3             0152*   ; check laser timer
0478F3 21 F8 77 04 0153*       ld hl,charge_laser_timer
0478F7 35          0154*       dec (hl)
0478F8 C0          0155*       ret nz
0478F9 3A F9 77 04 0156*       ld a,(charge_laser_timer_max)
0478FD 77          0157*       ld (hl),a
0478FE 21 F4 77 04 0158*       ld hl,laser_power
047902 34          0159*       inc (hl)
047903 3E 40       0160*       ld a,64
047905 BE          0161*       cp (hl)
047906 D0          0162*       ret nc
047907 77          0163*       ld (hl),a
047908 C9          0164*       ret
047909             0165*   ; end charge_laser
047909             0166*   draw_laser:
047909 CD F3 78 04 0167*       call charge_laser
04790D 21 F5 77 04 0168*       ld hl,laser_power_last
047911 3A F4 77 04 0169*       ld a,(laser_power)
047915 BE          0170*       cp (hl)
047916 C8          0171*       ret z ; no change to update
047917 77          0172*       ld (hl),a
047918 DD 21 FA 77 0173*       ld ix,bar_laser
       04          
04791D DD 77 00    0174*       ld (ix+bar_val),a ; TODO: this is redundant
047920 CD F5 75 04 0175*       call bar_update_v
047924 C9          0176*       ret
047925             0063        include "player_score.inc"
047925             0001*   ; scores are unsigned integers
047925 00 00 00    0002*   player_score: dl 0
047928 00 00 00    0003*   player_score_last: dl 0 ; if equal to player_score, no need to update
04792B 00 00 00    0004*   player_starting_score: dl 0 ; to reset after restarting a map
04792E             0005*   
04792E             0006*   ; inputs: iy set to sprite/tile record being tallied
04792E             0007*   ; outputs: hl,player_score = updated score
04792E             0008*   ; destroys: hl,de
04792E             0009*   update_score:
04792E 11 00 00 00 0010*       ld de,0 ; clear deu and d
047932 FD 5E 26    0011*       ld e,(iy+sprite_points)
047935 2A 25 79 04 0012*       ld hl,(player_score)
047939 19          0013*       add hl,de
04793A 22 25 79 04 0014*       ld (player_score),hl
04793E C9          0015*       ret
04793F             0016*   ; end update_score
04793F             0017*   
04793F             0018*   ; text coordinates for score display
04793F             0019*   score_x: equ 50
04793F             0020*   score_y: equ 33
04793F             0021*   ; inputs: none
04793F             0022*   print_score:
04793F 2A 28 79 04 0023*       ld hl,(player_score_last)
047943 ED 5B 25 79 0024*       ld de,(player_score)
       04          
047948 ED 53 28 79 0025*       ld (player_score_last),de
       04          
04794D AF          0026*       xor a ; clear carry
04794E ED 52       0027*       sbc hl,de
047950 C8          0028*       ret z ; no change to update
047951 0E 32       0029*       ld c,score_x
047953 06 21       0030*       ld b,score_y
047955 CD 73 12 04 0031*       call vdu_move_cursor
047959 2A 25 79 04 0032*       ld hl,(player_score)
04795D CD AF 00 04 0033*       call printDec
047961 C9          0034*       ret
047962             0035*   ; end print_score
047962             0064        include "player_shields.inc"
047962             0001*   
047962 40          0002*   player_shields: db 64 ; integer
047963             0003*   ; max player shields,binary
047963             0004*   ; can increase with power-ups (todo)
047963 40          0005*   player_shields_max: db 64 ; integer
047964 00          0006*   player_shields_last: db 0 ; integer
047965             0007*   bar_shields:
047965 00 00 00    0008*       dl 0 ; value
047968 F0 01 00    0009*       dl 496 ; x0
04796B 30 01 00    0010*       dl 304 ; y0
04796E F7 01 00    0011*       dl 496+7 ; x1
047971 6F 01 00    0012*       dl 304+63 ; y1
047974 F0 00 00    0013*       dl 304-64 ; y-plot coordinate
047977             0014*   
047977             0015*   init_bar_shields:
047977 DD 21 65 79 0016*       ld ix,bar_shields
       04          
04797C 2A 63 79 04 0017*       ld hl,(player_shields_max)
047980 DD 2F 00    0018*       ld (ix+bar_val),hl
047983 CD F5 75 04 0019*       call bar_update_v
047987 C9          0020*       ret
047988             0021*   ; end init_bar_shields
047988             0022*   
047988             0023*   ; inputs: iy set to sprite/tile record being tallied
047988             0024*   ; outputs: hl,player_shields = updated shields
047988             0025*   ; destroys: hl,de
047988             0026*   update_shields:
047988 FD 6E 27    0027*       ld l,(iy+sprite_shield_damage)
04798B 3A 62 79 04 0028*       ld a,(player_shields)
04798F 85          0029*       add a,l
047990 F2 95 79 04 0030*       jp p,@have_shields
047994 AF          0031*       xor a ; set to zero
047995             0032*   @have_shields:
047995 32 62 79 04 0033*       ld (player_shields),a
047999 B7          0034*       or a ; check for zero
04799A CA 9C 74 04 0035*       jp z,kill_player
04799E C9          0036*       ret
04799F             0037*   ; end update_shields
04799F             0038*   
04799F             0039*   draw_shields:
04799F 21 64 79 04 0040*       ld hl,player_shields_last
0479A3 3A 62 79 04 0041*       ld a,(player_shields)
0479A7 BE          0042*       cp (hl)
0479A8 C8          0043*       ret z ; no change to update
0479A9 77          0044*       ld (hl),a
0479AA DD 21 65 79 0045*       ld ix,bar_shields
       04          
0479AF DD 77 00    0046*       ld (ix+bar_val),a ; TODO: this is redundant
0479B2 CD F5 75 04 0047*       call bar_update_v
0479B6 C9          0048*       ret
0479B7             0065        include "screen.inc"
0479B7             0001*   
0479B7             0002*   screen_right: equ 511
0479B7             0003*   screen_bottom: equ 383
0479B7             0004*   origin_top: equ 64
0479B7             0005*   origin_left: equ 128
0479B7             0006*   field_top: equ 0
0479B7             0007*   field_bottom: equ screen_bottom-origin_top
0479B7             0008*   field_left: equ 0
0479B7             0009*   field_right: equ 255
0479B7             0010*   sprite_top: equ field_top
0479B7             0011*   sprite_bottom: equ field_bottom-15
0479B7             0012*   sprite_left: equ field_left
0479B7             0013*   sprite_right: equ field_right-15
0479B7             0014*   tile_bottom: equ screen_bottom+1
0479B7             0066        include "sprites.inc"
0479B7             0001*   ; sprite_type
0479B7             0002*   enemy_dead: equ 0
0479B7             0003*   enemy_air: equ 1
0479B7             0004*   enemy_ground: equ 2
0479B7             0005*   enemy_projectile: equ 3
0479B7             0006*   explosion: equ 4
0479B7             0007*   player: equ 5
0479B7             0008*   player_air: equ 6
0479B7             0009*   player_ground: equ 7
0479B7             0010*   
0479B7             0011*   ; ###### SPRITE TABLE FIELD INDICES ######
0479B7             0012*   table_record_size:         equ  64; bytes per sprite record
0479B7             0013*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
0479B7             0014*   ; sprite state variables
0479B7             0015*   sprite_state_variables:    equ   1; beginning of sprite state variables
0479B7             0016*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
0479B7             0017*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
0479B7             0018*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
0479B7             0019*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
0479B7             0020*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
0479B7             0021*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
0479B7             0022*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
0479B7             0023*   ; sprite definition variables
0479B7             0024*   sprite_definitions:        equ  22; beginnning of sprite definition variables
0479B7             0025*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
0479B7             0026*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
0479B7             0027*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
0479B7             0028*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
0479B7             0029*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
0479B7             0030*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
0479B7             0031*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
0479B7             0032*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
0479B7             0033*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
0479B7             0034*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
0479B7             0035*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
0479B7             0036*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
0479B7             0037*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
0479B7             0038*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
0479B7             0039*   sprite_frame:              equ  40; 1 bytes ;current animation frame
0479B7             0040*   
0479B7             0041*   ; ###### SPRITE TABLE VARIABLES ######
0479B7             0042*   ; pointer to top address of current record, initialized to table_base
0479B7 05 94 04    0043*   table_pointer: dl table_base
0479BA             0044*   
0479BA             0045*   ; flag indicating collision with screen edge
0479BA 00          0046*   sprite_screen_edge: db #00
0479BB             0047*   
0479BB             0048*   ; ######### COLLISION SPRITE PARAMETERS ##########
0479BB             0049*   ; integer coordinates are all that are needed for collision calculations
0479BB 00          0050*   collision_x: db 0x00
0479BC 00          0051*   collision_y: db 0x00
0479BD 00          0052*   collision_dim_x: db 0x00
0479BE 00          0053*   collision_dim_y: db 0x00
0479BF             0054*   
0479BF             0055*   ; scratch variables
0479BF 00          0056*   x: db 0x00 ; 8-bit signed integer
0479C0 00          0057*   y: db 0x00 ; 8-bit signed integer
0479C1 00 00 00    0058*   x0: dl 0x000000 ; 16.8 signed fixed place
0479C4 00 00 00    0059*   y0: dl 0x000000 ; 16.8 signed fixed place
0479C7 00 00 00    0060*   incx1: dl 0x000000 ; 16.8 signed fixed place
0479CA 00 00 00    0061*   incy1: dl 0x000000 ; 16.8 signed fixed place
0479CD 00 00 00    0062*   incx2: dl 0x000000 ; 16.8 signed fixed place
0479D0 00 00 00    0063*   incy2: dl 0x000000 ; 16.8 signed fixed place
0479D3             0064*   
0479D3             0065*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
0479D3 00 00 00    0066*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
0479D6 00 00 00    0067*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
0479D9 00 00 00    0068*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
0479DC             0069*   
0479DC             0070*   table_init:
0479DC             0071*   ; clear the sprite table
0479DC AF          0072*       xor a ; write zeroes to sprite table
0479DD 21 05 94 04 0073*       ld hl,table_base ; address to copy from
0479E1 01 00 05 00 0074*       ld bc,table_end-table_base ; number of bytes to clear
0479E5 CD 42 03 04 0075*       call clear_mem
0479E9             0076*   ; write sprite ids
0479E9 DD 21 05 94 0077*       ld ix,table_base
       04          
0479EE AF          0078*       xor a ; sprite id
0479EF 0E 00       0079*       ld c,0 ; sprite type
0479F1 06 14       0080*       ld b,table_num_records ; loop counter
0479F3             0081*   @loop:
0479F3 DD 77 00    0082*       ld (ix+sprite_id),a
0479F6 DD 71 16    0083*       ld (ix+sprite_type),c
0479F9 ED 32 40    0084*       lea ix,ix+table_record_size
0479FC 3C          0085*       inc a
0479FD 10 F4       0086*       djnz @loop
0479FF C9          0087*       ret
047A00             0088*   ; end table_init
047A00             0089*   
047A00             0090*   ; deactivate the sprite with the given id
047A00             0091*   ; inputs: iy set to sprite record
047A00             0092*   ; outputs: nothing
047A00             0093*   ; destroys: a,hl
047A00             0094*   table_deactivate_sprite:
047A00 FD 7E 00    0095*       ld a,(iy+sprite_id) ; get spriteId
047A03 CD 71 17 04 0096*       call vdu_sprite_select ; select sprite
047A07 CD F5 17 04 0097*       call vdu_sprite_hide
047A0B FD CB 1D B6 0098*       res sprite_alive,(iy+sprite_collisions)
047A0F FD CB 1D BE 0099*       res sprite_just_died,(iy+sprite_collisions)
047A13 C9          0100*       ret
047A14             0101*   ; end table_deactivate_sprite
047A14             0102*   
047A14             0103*   sprites_init:
047A14             0104*   ; initialize sprites
047A14 CD A5 18 04 0105*   	call vdu_sprite_reset ; clear sprite data in vdp
047A18 AF          0106*   	xor a ; loop counter / sprite id
047A19             0107*   @sprite_loop:
047A19 F5          0108*   	push af ; save loop counter / sprite id
047A1A CD 71 17 04 0109*   	call vdu_sprite_select
047A1E 21 00 01 00 0110*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
047A22 CD C6 18 04 0111*   	call vdu_sprite_add_buff
047A26 F1          0112*   	pop af ; restore loop counter / sprite id
047A27 3C          0113*       inc a
047A28 FE 14       0114*       cp table_num_records
047A2A C2 19 7A 04 0115*       jp nz,@sprite_loop
047A2E CD A5 17 04 0116*   	call vdu_sprite_activate
047A32             0117*   
047A32             0118*   ; define player sprite
047A32 3A 05 95 04 0119*   	ld a,(player_begin+sprite_id)
047A36 CD 71 17 04 0120*   	call vdu_sprite_select
047A3A CD 84 17 04 0121*   	call vdu_sprite_clear_frames
047A3E 21 6F 01 00 0122*   	ld hl,BUF_SHIP_0L
047A42 01 03 00 00 0123*   	ld bc,3 ; three bitmaps for player ship
047A46             0124*   @sprite_player_loop:
047A46 C5          0125*   	push bc
047A47 E5          0126*   	push hl
047A48 CD C6 18 04 0127*   	call vdu_sprite_add_buff
047A4C E1          0128*   	pop hl
047A4D 23          0129*   	inc hl
047A4E C1          0130*   	pop bc
047A4F 10 F5       0131*   	djnz @sprite_player_loop
047A51             0132*   
047A51             0133*   ; define player weapon sprites
047A51 CD 25 78 04 0134*       call init_player_laser
047A55             0135*   
047A55             0136*   ; define enemy sprites
047A55 CD 7A 20 04 0137*       call init_enemy_seekers
047A59 CD 85 1F 04 0138*       call init_enemy_fireballs
047A5D             0139*   
047A5D             0140*   ; define explosion sprites
047A5D CD 2E 21 04 0141*       call init_explosions
047A61 C9          0142*       ret
047A62             0143*   ; end sprites_init
047A62             0144*   
047A62             0145*   ; gets the next available sprite id for a particular sprite group
047A62             0146*   ; inputs; ix = pointer to sprite group, b = number of records in sprite group
047A62             0147*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
047A62             0148*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047A62             0149*   ; destroys: a,b,c,hl,ix
047A62             0150*   table_get_next_id:
047A62             0151*   @loop:
047A62 DD CB 1D 76 0152*       bit sprite_alive,(ix+sprite_collisions)
047A66 28 07       0153*       jr z,@found
047A68 ED 32 40    0154*       lea ix,ix+table_record_size
047A6B 10 F5       0155*       djnz @loop
047A6D             0156*   @notfound:
047A6D AF          0157*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
047A6E C9          0158*       ret
047A6F             0159*   @found:
047A6F             0160*   ; return sprite id
047A6F DD 7E 00    0161*       ld a,(ix+sprite_id)
047A72 37          0162*       scf ; sets carry flag indicating we found a free sprite
047A73 C9          0163*       ret ; done
047A74             0164*   ; end table_get_next_id
047A74             0165*   
047A74             0166*   ; create a new sprite at the prescribed coordinates
047A74             0167*   ; inputs: hl = pointer to new sprite default settings, ub.c, ud.e = x,y position
047A74             0168*   ;         ix = pointer to sprite group, a = number of records in sprite group
047A74             0169*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
047A74             0170*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047A74             0171*   spawn_sprite_from_coords:
047A74 ED 43 AE 7A 0172*       ld (@sprite_x),bc ; store x-coordinate
       04          
047A79 ED 53 B1 7A 0173*       ld (@sprite_y),de ; store y-coordinate
       04          
047A7E 47          0174*       ld b,a ; number of records in sprite group
047A7F E5          0175*       push hl ; back up pointer to new sprite defaults
047A80 CD 62 7A 04 0176*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
047A84 E1          0177*       pop hl ; restore pointer to new sprite defaults
047A85 D0          0178*       ret nc ; no carry means no free sprite slots, so we go home
047A86             0179*   ; copy default settings to new sprite
047A86 DD E5       0180*       push ix ; back up pointer to new sprite record
047A88 ED 32 16    0181*       lea ix,ix+sprite_definitions ; bump pointer to copy to
047A8B DD E5       0182*       push ix ; pointer to default sprite settings
047A8D D1          0183*       pop de ; address to copy to
047A8E 01 2A 00 00 0184*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
047A92 ED B0       0185*       ldir ; copies defaults to new sprite record
047A94 DD E1       0186*       pop ix ; restore pointer to new sprite record
047A96             0187*   ; copy sprite position from existing sprite
047A96 2A AE 7A 04 0188*       ld hl,(@sprite_x)
047A9A DD 2F 01    0189*       ld (ix+sprite_x),hl
047A9D 2A B1 7A 04 0190*       ld hl,(@sprite_y)
047AA1 DD 2F 04    0191*       ld (ix+sprite_y),hl
047AA4             0192*   ; return to caller
047AA4 DD CB 16 FE 0193*       set 7,(ix+sprite_type) ; set just spawned flag
047AA8 DD CB 1D F6 0194*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
047AAC 37          0195*       scf ; set carry flag to indicate success
047AAD C9          0196*       ret
047AAE 00 00 00    0197*   @sprite_x: dl 0 ; new sprite x-coordinate
047AB1 00 00 00    0198*   @sprite_y: dl 0 ; new sprite y-coordinate
047AB4             0199*   ; end spawn_sprite_from_coords
047AB4             0200*   
047AB4             0201*   ; create a new sprite at the same location as an existing sprite
047AB4             0202*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
047AB4             0203*   ;         ix = pointer to sprite group, b = number of records in sprite group
047AB4             0204*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
047AB4             0205*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047AB4             0206*   spawn_sprite_from_sprite:
047AB4 E5          0207*       push hl ; back up pointer to new sprite defaults
047AB5 CD 62 7A 04 0208*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
047AB9 E1          0209*       pop hl ; restore pointer to new sprite defaults
047ABA D0          0210*       ret nc ; no carry means no free sprite slots, so we go home
047ABB             0211*   ; copy default settings to new sprite
047ABB DD E5       0212*       push ix ; back up pointer to new sprite record
047ABD ED 32 16    0213*       lea ix,ix+sprite_definitions ; bump pointer to copy to
047AC0 DD E5       0214*       push ix ; pointer to default sprite settings
047AC2 D1          0215*       pop de ; address to copy to
047AC3 01 2A 00 00 0216*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
047AC7 ED B0       0217*       ldir ; copies defaults to new sprite record
047AC9 DD E1       0218*       pop ix ; restore pointer to new sprite record
047ACB             0219*   ; copy sprite position from existing sprite
047ACB FD 2A B7 79 0220*       ld iy,(table_pointer) ; get existing sprite record
       04          
047AD0 FD 27 01    0221*       ld hl,(iy+sprite_x)
047AD3 DD 2F 01    0222*       ld (ix+sprite_x),hl
047AD6 FD 27 04    0223*       ld hl,(iy+sprite_y)
047AD9 DD 2F 04    0224*       ld (ix+sprite_y),hl
047ADC             0225*   ; return to caller
047ADC DD CB 16 FE 0226*       set 7,(ix+sprite_type) ; set just spawned flag
047AE0 DD CB 1D F6 0227*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
047AE4 37          0228*       scf ; set carry flag to indicate success
047AE5 C9          0229*       ret
047AE6             0230*   ; end spawn_sprite_from_sprite
047AE6             0231*   
047AE6             0232*   ; call the behavior subroutines for a specified sprite group
047AE6             0233*   ; inputs: iy = pointer to sprite group, b = number of records in sprite group
047AE6             0234*   move_sprite_group:
047AE6 C5          0235*       push bc ; backup loop counter
047AE7 FD E5       0236*       push iy ; backup table pointer
047AE9             0237*   @move_loop:
047AE9 FD 22 B7 79 0238*       ld (table_pointer),iy ; update table pointer
       04          
047AEE C5          0239*       push bc ; backup loop counter
047AEF             0240*   ; check top bit of sprite_type to see if sprite is just spawned
047AEF FD CB 16 7E 0241*       bit 7,(iy+sprite_type)
047AF3 C2 28 7B 04 0242*       jp nz,@next_record ; if just spawned, skip to next record
047AF7             0243*   ; check sprite_just_died bit
047AF7 FD CB 1D 7E 0244*       bit sprite_just_died,(iy+sprite_collisions)
047AFB C2 5F 7B 04 0245*       jp nz,@sprite_died ; if just died, deactivate sprite
047AFF             0246*   ; check sprite_alive bit to see if sprite is active
047AFF FD CB 1D 76 0247*       bit sprite_alive,(iy+sprite_collisions)
047B03 CA 28 7B 04 0248*       jp z,@next_record ; ... skip to next record
047B07             0249*   ; otherwise move the sprite
047B07 FD 27 1A    0250*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
047B0A             0251*       CALL_HL ; run the behavior subroutine
047B0A 01 10 7B 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
047B0E C5          0002*M1     push bc ; which constitutes the return address
047B0F E9          0003*M1     jp (hl) ; Jump to the address in HL
047B10 FD 7E 00    0252*       ld a,(iy+sprite_id) ; get spriteId
047B13 CD 71 17 04 0253*       call vdu_sprite_select ; select sprite
047B17 FD 7E 28    0254*       ld a,(iy+sprite_frame)
047B1A CD D4 17 04 0255*       call vdu_sprite_select_frame
047B1E FD 07 01    0256*       ld bc,(iy+sprite_x)
047B21 FD 17 04    0257*       ld de,(iy+sprite_y)
047B24 CD 3D 18 04 0258*       call vdu_sprite_move_abs168
047B28             0259*   ; fall through to @next_record
047B28             0260*   @next_record:
047B28 ED 33 40    0261*       lea iy,iy+table_record_size
047B2B AF          0262*       xor a ; clears carry flag
047B2C 32 BA 79 04 0263*       ld (sprite_screen_edge),a ; clear screen edge collision flag
047B30 C1          0264*       pop bc ; get back our loop counter
047B31 10 B6       0265*       djnz @move_loop ; loop until we've checked all the records
047B33             0266*   ; reset all just spawned flags
047B33 FD E1       0267*       pop iy ; get back table pointer
047B35 C1          0268*       pop bc ; get back loop counter
047B36             0269*   @reset_just_spawned:
047B36 C5          0270*       push bc ; back up loop counter
047B37 FD CB 16 7E 0271*       bit 7,(iy+sprite_type) ; check if just spawned
047B3B CA 58 7B 04 0272*       jp z,@F
047B3F FD CB 16 BE 0273*       res 7,(iy+sprite_type) ; clear just spawned flag
047B43 FD 7E 00    0274*       ld a,(iy+sprite_id)
047B46 CD 71 17 04 0275*       call vdu_sprite_select
047B4A FD 07 01    0276*       ld bc,(iy+sprite_x)
047B4D FD 17 04    0277*       ld de,(iy+sprite_y)
047B50 CD 3D 18 04 0278*       call vdu_sprite_move_abs168
047B54 CD E7 17 04 0279*       call vdu_sprite_show
047B58             0280*   @@:
047B58 ED 33 40    0281*       lea iy,iy+table_record_size
047B5B C1          0282*       pop bc ; get back loop counter
047B5C 10 D8       0283*       djnz @reset_just_spawned
047B5E C9          0284*       ret
047B5F             0285*   @sprite_died:
047B5F CD 00 7A 04 0286*       call table_deactivate_sprite
047B63 C3 28 7B 04 0287*       jp @next_record
047B67             0288*   ; end move_sprite_group
047B67             0289*   
047B67             0290*   ; compute a sprite's new position based on its component x,y velocities
047B67             0291*   ; with screen boundary checking and update its sprite table record accordingly
047B67             0292*   ; inputs: table_pointer set to sprite record
047B67             0293*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
047B67             0294*   ; destroys: everything
047B67             0295*   ; note: actual rendering of sprite must be handled by caller
047B67             0296*   move_sprite:
047B67 FD 2A B7 79 0297*       ld iy,(table_pointer)
       04          
047B6C             0298*   ; x-axis movement
047B6C FD 27 01    0299*       ld hl,(iy+sprite_x)
047B6F FD 17 07    0300*       ld de,(iy+sprite_xvel)
047B72 19          0301*       add hl,de
047B73 FD 2F 01    0302*       ld (iy+sprite_x),hl
047B76             0303*   ; y-axis movement
047B76 FD 27 04    0304*       ld hl,(iy+sprite_y)
047B79 FD 17 0A    0305*       ld de,(iy+sprite_yvel)
047B7C 19          0306*       add hl,de
047B7D FD 2F 04    0307*       ld (iy+sprite_y),hl
047B80             0308*   ; detect screen edge collisions
047B80 AF          0309*       xor a ; reset screen edge collision flag and clear carry
047B81 32 BA 79 04 0310*       ld (sprite_screen_edge),a
047B85             0311*   ; y-axis first since we already have it in hl
047B85 11 00 00 00 0312*       ld de,-sprite_top*256
047B89 ED 5A       0313*       adc hl,de
047B8B FA B5 7B 04 0314*       jp m,@top
047B8F ED 52       0315*       sbc hl,de ; hl back to original value
047B91 11 00 D0 FE 0316*       ld de,-sprite_bottom*256
047B95 ED 5A       0317*       adc hl,de
047B97 F2 BF 7B 04 0318*       jp p,@bottom
047B9B             0319*   @xaxis:
047B9B FD 27 01    0320*       ld hl,(iy+sprite_x)
047B9E 11 00 00 00 0321*       ld de,-sprite_left*256
047BA2 ED 5A       0322*       adc hl,de
047BA4 FA DA 7B 04 0323*       jp m,@left
047BA8 ED 52       0324*       sbc hl,de ; hl back to original value
047BAA 11 00 10 FF 0325*       ld de,-sprite_right*256
047BAE ED 5A       0326*       adc hl,de
047BB0 F2 E8 7B 04 0327*       jp p,@right
047BB4             0328*   ; no edge collisions so go home
047BB4 C9          0329*       ret
047BB5             0330*   @top:
047BB5 3E 08       0331*       ld a,collide_top
047BB7 21 00 00 00 0332*       ld hl,sprite_top*256
047BBB C3 C5 7B 04 0333*       jp @collide_y
047BBF             0334*   @bottom:
047BBF 3E 04       0335*       ld a,collide_bottom
047BC1 21 00 30 01 0336*       ld hl,sprite_bottom*256
047BC5             0337*   @collide_y:
047BC5 32 BA 79 04 0338*       ld (sprite_screen_edge),a
047BC9 FD 2F 04    0339*       ld (iy+sprite_y),hl
047BCC             0340*   ; reverse y-axis velocity
047BCC FD 27 0A    0341*       ld hl,(iy+sprite_yvel)
047BCF CD 63 04 04 0342*       call neg_hlu
047BD3 FD 2F 0A    0343*       ld (iy+sprite_yvel),hl
047BD6             0344*   ; go check for x-axis collisions
047BD6 C3 9B 7B 04 0345*       jp @xaxis
047BDA             0346*   @left:
047BDA 3A BA 79 04 0347*       ld a,(sprite_screen_edge)
047BDE F6 02       0348*       or a,collide_left
047BE0 21 00 00 00 0349*       ld hl,sprite_left*256
047BE4 C3 F2 7B 04 0350*       jp @collide_x
047BE8             0351*   @right:
047BE8 3A BA 79 04 0352*       ld a,(sprite_screen_edge)
047BEC F6 01       0353*       or a,collide_right
047BEE 21 00 F0 00 0354*       ld hl,sprite_right*256
047BF2             0355*   @collide_x:
047BF2 32 BA 79 04 0356*       ld (sprite_screen_edge),a
047BF6 FD 2F 01    0357*       ld (iy+sprite_x),hl
047BF9             0358*   ; reverse x-axis velocity
047BF9 FD 27 07    0359*       ld hl,(iy+sprite_xvel)
047BFC CD 63 04 04 0360*       call neg_hlu
047C00 FD 2F 07    0361*       ld (iy+sprite_xvel),hl
047C03             0362*   ; final collision flag to a and return
047C03 3A BA 79 04 0363*       ld a,(sprite_screen_edge)
047C07 C9          0364*       ret
047C08             0365*   ; end move_sprite
047C08             0366*   
047C08             0367*   sprite_compute_velocities:
047C08 FD 27 10    0368*       ld hl,(iy+sprite_heading)
047C0B FD 17 0D    0369*       ld de,(iy+sprite_vel)
047C0E CD D7 06 04 0370*       call polar_to_cartesian
047C12 FD 2A B7 79 0371*       ld iy,(table_pointer)
       04          
047C17 FD 0F 07    0372*       ld (iy+sprite_xvel),bc ; save x-velocity component
047C1A FD 1F 0A    0373*       ld (iy+sprite_yvel),de ; save y-velocity component
047C1D C9          0374*       ret
047C1E             0375*   ; end sprite_compute_velocities
047C1E             0376*   
047C1E             0377*   ; compute animation frame based on sprite_animation and sprite_heading
047C1E             0378*   ; inputs: table_pointer set to sprite record
047C1E             0379*   ; outputs: a, sprite_frame set to animation frame
047C1E             0380*   ; destroys: a,hl
047C1E             0381*   sprite_frame_heading_animation:
047C1E FD 7E 11    0382*       ld a,(iy+sprite_heading+1) ; we want the integer portion
047C21 CB 3F       0383*       srl a ; divide integer portion by 8
047C23 CB 3F       0384*       srl a
047C25 CB 3F       0385*       srl a
047C27 FD 66 22    0386*       ld h,(iy+sprite_animation)
047C2A 2E 20       0387*       ld l,32 ; 32 orientation frames per animation
047C2C ED 6C       0388*       mlt hl ; hl = offset from base animation
047C2E 85          0389*       add a,l ; modulo256 since sprite_frame is only 1 byte
047C2F FD 77 28    0390*       ld (iy+sprite_frame),a
047C32 C9          0391*       ret
047C33             0392*   ; end sprite_frame_heading_animation
047C33             0393*   
047C33             0394*   ; compute animation frame based on sprite_heading
047C33             0395*   ; inputs: table_pointer set to sprite record
047C33             0396*   ; outputs: a, sprite_frame set to animation frame
047C33             0397*   ; destroys: a,hl
047C33             0398*   sprite_frame_heading:
047C33 FD 7E 11    0399*       ld a,(iy+sprite_heading+1) ; we want the integer portion
047C36 CB 3F       0400*       srl a ; divide integer portion by 8
047C38 CB 3F       0401*       srl a
047C3A CB 3F       0402*       srl a
047C3C FD 77 28    0403*       ld (iy+sprite_frame),a
047C3F C9          0404*       ret
047C40             0405*   ; end sprite_frame_heading
047C40             0406*   
047C40             0407*   ; load a sprite with animation bitmaps
047C40             0408*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
047C40             0409*   sprite_load_frames:
047C40             0410*   ; back up input parameters
047C40 E5          0411*       push hl ; base bufferId
047C41 C5          0412*       push bc ; bc = number of frames
047C42 CD 84 17 04 0413*       call vdu_sprite_clear_frames
047C46 C1          0414*       pop bc ; bc = number of frames
047C47 E1          0415*       pop hl ; = base bufferId
047C48             0416*   @load_frames:
047C48 C5          0417*       push bc ; back up loop counter
047C49 E5          0418*       push hl ; back up base bufferId
047C4A CD C6 18 04 0419*       call vdu_sprite_add_buff
047C4E E1          0420*       pop hl ; restore base bufferId
047C4F 23          0421*       inc hl ; bump it to the next frame
047C50             0422*   ; decrement loop counter
047C50 C1          0423*       pop bc
047C51 0B          0424*       dec bc
047C52 79          0425*       ld a,c
047C53 B7          0426*       or a
047C54 C2 48 7C 04 0427*       jp nz,@load_frames
047C58 78          0428*       ld a,b
047C59 B7          0429*       or a
047C5A C2 48 7C 04 0430*       jp nz,@load_frames
047C5E C9          0431*       ret
047C5F             0432*   ; end sprite_load_frames
047C5F             0067        include "state.inc"
047C5F             0001*   ; Game state variables
047C5F 6D 7C 04    0002*   game_state:  dl game_main_menu
047C62             0003*   
047C62             0004*   do_game:
047C62 2A 5F 7C 04 0005*       ld hl,(game_state)   ; Load the current game state
047C66             0006*       CALL_HL                ; Call the corresponding state handler
047C66 01 6C 7C 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
047C6A C5          0002*M1     push bc ; which constitutes the return address
047C6B E9          0003*M1     jp (hl) ; Jump to the address in HL
047C6C C9          0007*       ret
047C6D             0008*   
047C6D             0009*   ; ========================
047C6D             0010*   ; Main Game States
047C6D             0011*   ; ========================
047C6D             0012*   
047C6D             0013*   game_main_menu:
047C6D             0014*       ; Handle main menu options
047C6D             0015*       ; Example: Check input for "Start Game"
047C6D CD 04 7D 04 0016*       call check_input_menu
047C71 C2 56 7D 04 0017*       jp nz, game_init ; Start game on selection
047C75 C9          0018*       ret
047C76             0019*   
047C76             0020*   
047C76             0021*   
047C76             0022*   game_paused:
047C76             0023*       ; Pause menu logic
047C76 CD 07 7D 04 0024*       call check_input_pause
047C7A C2 B4 7E 04 0025*       jp nz, game_playing ; Resume game
047C7E CA 6D 7C 04 0026*       jp z, game_main_menu ; Exit to main menu
047C82 C9          0027*       ret
047C83             0028*   
047C83             0029*   game_level_transition:
047C83             0030*       ; Handle level transitions
047C83 CD 08 7D 04 0031*       call load_next_level
047C87 21 B4 7E 04 0032*       ld hl, game_playing
047C8B 22 5F 7C 04 0033*       ld (game_state), hl
047C8F C9          0034*       ret
047C90             0035*   
047C90             0036*   game_over:
047C90 CD 3C 12 04 0037*       call vdu_home_cursor
047C94 CD 5C 00 04 0038*       call printInline
047C98 47 61 6D 65 0039*       asciz "Game Over!\r\nPress any key to continue..."
       20 4F 76 65 
       72 21 0D 0A 
       50 72 65 73 
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 2E 2E 
       00          
047CC1 21 56 7D 04 0040*       ld hl,game_init
047CC5 22 5F 7C 04 0041*       ld (game_state),hl
047CC9 C9          0042*       ret
047CCA             0043*   
047CCA             0044*   game_victory:
047CCA             0045*       ; Display victory screen
047CCA CD 0A 7D 04 0046*       call display_victory
047CCE C2 6D 7C 04 0047*       jp nz, game_main_menu ; Return to main menu on input
047CD2 C9          0048*       ret
047CD3             0049*   
047CD3             0050*   ; ========================
047CD3             0051*   ; Supporting States
047CD3             0052*   ; ========================
047CD3             0053*   
047CD3             0054*   game_loading:
047CD3             0055*       ; Show loading screen while preparing assets
047CD3 CD 0B 7D 04 0056*       call load_resources
047CD7 21 56 7D 04 0057*       ld hl, game_init
047CDB 22 5F 7C 04 0058*       ld (game_state), hl
047CDF C9          0059*       ret
047CE0             0060*   
047CE0             0061*   game_cutscene:
047CE0             0062*       ; Play a non-interactive cutscene
047CE0 CD 0C 7D 04 0063*       call play_cutscene
047CE4 C2 B4 7E 04 0064*       jp nz, game_playing ; Return to gameplay after cutscene
047CE8 C9          0065*       ret
047CE9             0066*   
047CE9             0067*   game_inventory:
047CE9             0068*       ; Open inventory or shop
047CE9 CD 0D 7D 04 0069*       call display_inventory
047CED C2 B4 7E 04 0070*       jp nz, game_playing ; Return to gameplay after inventory close
047CF1 C9          0071*       ret
047CF2             0072*   
047CF2             0073*   game_map:
047CF2             0074*       ; Display map or quest
047CF2 CD 0E 7D 04 0075*       call display_map
047CF6 C2 B4 7E 04 0076*       jp nz, game_playing ; Return to gameplay after map close
047CFA C9          0077*       ret
047CFB             0078*   
047CFB             0079*   game_exit:
047CFB             0080*       ; Handle exit logic
047CFB CD 0F 7D 04 0081*       call save_game
047CFF C3 10 7D 04 0082*       jp exit_game         ; Safely shut down
047D03 C9          0083*       ret
047D04             0084*   
047D04             0085*   ; ========================
047D04             0086*   ; Sub-state branching (Example for player state)
047D04             0087*   ; ========================
047D04             0088*   
047D04             0089*   
047D04             0090*   
047D04             0091*   
047D04             0092*   check_input_menu:
047D04 C9          0093*       ret
047D05             0094*   
047D05             0095*   update_game_world:
047D05 C9          0096*       ret
047D06             0097*   
047D06             0098*   check_game_events:
047D06 C9          0099*       ret
047D07             0100*   
047D07             0101*   check_input_pause:
047D07 C9          0102*       ret
047D08             0103*   
047D08             0104*   load_next_level:
047D08 C9          0105*       ret
047D09             0106*   
047D09             0107*   display_game_over:
047D09 C9          0108*       ret
047D0A             0109*   
047D0A             0110*   display_victory:
047D0A C9          0111*       ret
047D0B             0112*   
047D0B             0113*   load_resources:
047D0B C9          0114*       ret
047D0C             0115*   
047D0C             0116*   play_cutscene:
047D0C C9          0117*       ret
047D0D             0118*   
047D0D             0119*   display_inventory:
047D0D C9          0120*       ret
047D0E             0121*   
047D0E             0122*   display_map:
047D0E C9          0123*       ret
047D0F             0124*   
047D0F             0125*   save_game:
047D0F C9          0126*       ret
047D10             0127*   
047D10             0128*   exit_game:
047D10 C9          0129*       ret
047D11             0130*   
047D11             0068        include "state_game_init.inc"
047D11 57 65 6C 63 0001*   hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
047D2C 4C 6F 61 64 0002*   loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
047D3A 50 72 65 73 0003*   loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
047D55 00          0004*   game_assets_loaded: db 0 ; non-zero when assets are loaded
047D56             0005*   
047D56             0006*   game_init:
047D56             0007*   ; check whether assets are loaded
047D56 3A 55 7D 04 0008*       ld a,(game_assets_loaded)
047D5A B7          0009*       or a
047D5B C2 E1 7D 04 0010*       jp nz,@assets_loaded
047D5F             0011*   ; clear all buffers
047D5F CD 66 14 04 0012*       call vdu_clear_all_buffers
047D63             0013*   ; load fonts
047D63 CD 88 0F 04 0014*   	call fonts_load
047D67             0015*   ; select font
047D67 21 02 FA 00 0016*       ld hl,computer_pixel_7_8x16
047D6B 3E 01       0017*       ld a,1 ; flags
047D6D CD 1D 16 04 0018*       call vdu_font_select
047D71             0019*   ; print loading ui message
047D71 CD 87 12 04 0020*       call vdu_cls
047D75 21 DB 18 04 0021*       ld hl,loading_ui
047D79 CD 63 00 04 0022*       call printString
047D7D CD 8C 12 04 0023*       call vdu_flip
047D81             0024*   ; load UI images
047D81 CD 83 10 04 0025*       call load_ui_images
047D85             0026*   ; set up the display
047D85 3E 08       0027*       ld a,8;+128 ; 136   320   240   64    60hz double-buffered
047D87             0028*       ; ld a,20 ;  512   384   64    60hz single-buffered
047D87 CD 50 13 04 0029*       call vdu_set_screen_mode
047D8B AF          0030*       xor a
047D8C CD 61 13 04 0031*       call vdu_set_scaling
047D90             0032*   ; ; enable additional audio channels
047D90             0033*   ; 	call vdu_enable_channels
047D90             0034*   ; set text background color
047D90 3E 9A       0035*       ld a,26+128 ; violet
047D92 CD B8 12 04 0036*       call vdu_colour_text
047D96             0037*   ; set text foreground color
047D96 3E 2F       0038*       ld a,47 ; aaaaff lavenderish
047D98 CD B8 12 04 0039*       call vdu_colour_text
047D9C             0040*   ; set gfx bg color
047D9C AF          0041*       xor a ; plotting mode 0
047D9D 3E 9A       0042*       ld a,26+128 ; violet
047D9F CD C9 12 04 0043*       call vdu_gcol
047DA3 CD 87 12 04 0044*       call vdu_cls
047DA7             0045*   ; set the cursor off
047DA7 CD 4F 12 04 0046*       call vdu_cursor_off
047DAB             0047*   ; VDU 28, left, bottom, right, top: Set text viewport **
047DAB             0048*   ; MIND THE LITTLE-ENDIANESS
047DAB             0049*   ; inputs: c=left,b=bottom,e=right,d=top
047DAB 0E 00       0050*       ld c,0 ; left
047DAD 16 00       0051*       ld d,0 ; top
047DAF 1E 27       0052*       ld e,39 ; right
047DB1 06 00       0053*       ld b,0; bottom
047DB3 CD E0 12 04 0054*       call vdu_set_txt_viewport
047DB7             0055*   ; load background and sprite images
047DB7 CD C2 0F 04 0056*       call img_load_init
047DBB CD B8 10 04 0057*       call load_backgrounds
047DBF CD 96 10 04 0058*       call load_sprite_images
047DC3             0059*   ; load tileset_ptrs
047DC3 CD A7 10 04 0060*       call load_tilesets
047DC7             0061*   ; ; load sound effects ; TODO
047DC7             0062*   ; 	ld bc,SFX_num_buffers
047DC7             0063*   ; 	ld hl,SFX_buffer_id_lut
047DC7             0064*   ; 	ld (cur_buffer_id_lut),hl
047DC7             0065*   ; 	ld hl,SFX_load_routines_table
047DC7             0066*   ; 	ld (cur_load_jump_table),hl
047DC7             0067*   ; 	call sfx_load_main
047DC7             0068*   ; print loading complete message and wait for user keypress
047DC7 3E 01       0069*       ld a,1
047DC9 32 55 7D 04 0070*       ld (game_assets_loaded),a
047DCD CD 87 12 04 0071*       call vdu_cls
047DD1 21 3A 7D 04 0072*       ld hl,loading_complete
047DD5 CD 63 00 04 0073*       call printString
047DD9 CD 8C 12 04 0074*       call vdu_flip
047DDD CD 3D 03 04 0075*       call waitKeypress
047DE1             0076*   @assets_loaded:
047DE1             0077*   ; set up display for gameplay
047DE1 3E 14       0078*       ld a,20
047DE3 CD 50 13 04 0079*       call vdu_set_screen_mode
047DE7 AF          0080*       xor a
047DE8 CD 61 13 04 0081*       call vdu_set_scaling
047DEC CD 4F 12 04 0082*       call vdu_cursor_off
047DF0             0083*   ; select font
047DF0 21 03 FA 00 0084*       ld hl,Lat2_VGA8_8x8
047DF4 3E 01       0085*       ld a,1 ; flags
047DF6 CD 1D 16 04 0086*       call vdu_font_select
047DFA             0087*   ; plot bezel art
047DFA 21 06 00 00 0088*       ld hl,BUF_BEZEL_L
047DFE CD 74 13 04 0089*       call vdu_buff_select
047E02 01 00 00 00 0090*       ld bc,0
047E06 11 00 00 00 0091*       ld de,0
047E0A CD D0 16 04 0092*       call vdu_plot_bmp
047E0E 21 07 00 00 0093*       ld hl,BUF_BEZEL_R
047E12 CD 74 13 04 0094*       call vdu_buff_select
047E16 01 80 01 00 0095*       ld bc,384
047E1A 11 00 00 00 0096*       ld de,0
047E1E CD D0 16 04 0097*       call vdu_plot_bmp
047E22             0098*   ; draw player cockpit
047E22 CD E1 74 04 0099*       call draw_player_cockpit
047E26             0100*   ; set gfx origin and viewport to playing field window
047E26 01 80 00 00 0101*       ld bc,origin_left
047E2A 11 40 00 00 0102*       ld de,origin_top
047E2E CD 0C 13 04 0103*       call vdu_set_gfx_origin
047E32 01 00 00 00 0104*       ld bc,field_left
047E36 11 00 00 00 0105*       ld de,field_top
047E3A DD 21 FF 00 0106*       ld ix,field_right
       00          
047E3F FD 21 3F 01 0107*       ld iy,field_bottom
       00          
047E44 CD 27 13 04 0108*       call vdu_set_gfx_viewport
047E48             0109*   ; set background color
047E48 3E 9A       0110*       ld a,26+128 ; violet
047E4A CD C9 12 04 0111*       call vdu_gcol
047E4E CD 9A 12 04 0112*       call vdu_clg
047E52             0113*   ; VDU 28, left, bottom, right, top: Set text viewport **
047E52 0E 00       0114*       ld c,0 ; left
047E54 16 00       0115*       ld d,0 ; top
047E56 1E 3E       0116*       ld e,62 ; right
047E58 06 30       0117*       ld b,48; bottom
047E5A CD E0 12 04 0118*       call vdu_set_txt_viewport
047E5E             0119*   ; initialize the global timestamp
047E5E CD C3 11 04 0120*       call timestamp_tick
047E62             0121*   ; reset the sprite table
047E62 CD DC 79 04 0122*       call table_init
047E66 21 05 94 04 0123*       ld hl,table_base
047E6A 22 B7 79 04 0124*       ld (table_pointer),hl
047E6E             0125*   ; initialize sprites and active tiles table
047E6E CD 14 7A 04 0126*       call sprites_init
047E72 CD DC 79 04 0127*       call table_init
047E76 CD FB 82 04 0128*       call tile_table_init
047E7A             0129*   ; initialize the first level
047E7A 3E 00       0130*       ld a,tiles_dg
047E7C CD 0C 62 04 0131*       call init_tileset
047E80             0132*   ; initialize player
047E80 21 00 00 00 0133*       ld hl,0
047E84 22 25 79 04 0134*       ld (player_score),hl
047E88 2B          0135*       dec hl ; anything but zero so print_score will update
047E89 22 28 79 04 0136*       ld (player_score_last),hl
047E8D 3E 03       0137*       ld a,3
047E8F 32 29 73 04 0138*       ld (player_ships),a
047E93 CD 84 73 04 0139*       call player_init
047E97 CD 2A 73 04 0140*       call draw_player_ships
047E9B             0141*   ; set the game state to playing
047E9B 21 B4 7E 04 0142*       ld hl,game_playing
047E9F 22 5F 7C 04 0143*       ld (game_state), hl
047EA3             0144*   ; set game playing substates
047EA3 21 08 74 04 0145*       ld hl,player_alive
047EA7 22 26 73 04 0146*       ld (player_state), hl
047EAB 21 EC 1E 04 0147*       ld hl,enemies_alive
047EAF 22 DE 1E 04 0148*       ld (enemies_state), hl
047EB3             0149*   ; done initializing
047EB3 C9          0150*       ret
047EB4             0151*   ; end game_init
047EB4             0069        include "state_game_playing.inc"
047EB4             0001*   ; main game state
047EB4             0002*   game_playing:
047EB4             0003*   ; Main gameplay loop
047EB4             0004*   
047EB4             0005*   ; plot tiles
047EB4 CD 71 84 04 0006*       call tiles_plot
047EB8             0007*   
047EB8             0008*   ; set gfx viewport to playing field window
047EB8 01 00 00 00 0009*       ld bc,field_left
047EBC 11 00 00 00 0010*       ld de,field_top
047EC0 DD 21 FF 00 0011*       ld ix,field_right
       00          
047EC5 FD 21 3F 01 0012*       ld iy,field_bottom
       00          
047ECA CD 27 13 04 0013*       call vdu_set_gfx_viewport
047ECE             0014*   
047ECE             0015*   ; process movement and collisions
047ECE CD 79 73 04 0016*       call do_player
047ED2 CD E1 1E 04 0017*       call do_enemies
047ED6 CD 22 21 04 0018*       call move_explosions
047EDA CD F3 85 04 0019*       call move_tiles
047EDE             0020*   
047EDE             0021*   ; update UI
047EDE 01 00 00 00 0022*       ld bc,0
047EE2 11 00 00 00 0023*       ld de,0
047EE6 CD 0C 13 04 0024*       call vdu_set_gfx_origin
047EEA CD 3F 79 04 0025*       call print_score
047EEE CD 9F 79 04 0026*       call draw_shields
047EF2 CD 09 79 04 0027*       call draw_laser
047EF6 CD F3 76 04 0028*       call draw_fuel
047EFA C9          0029*       ret
047EFB             0030*   
047EFB             0070        include "targeting.inc"
047EFB             0001*   ; compute orientation to player
047EFB             0002*   ; based on relative positions
047EFB             0003*   ; returns: uh.l 16.8 fixed angle256 to player
047EFB             0004*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
047EFB             0005*   ;    representing delta-x/y *to* target respectively
047EFB             0006*   ; inputs: iy pointed at sprite record
047EFB             0007*   ; destroys: everything except iy (sprite record pointer)
047EFB             0008*   orientation_to_player:
047EFB DD 21 05 95 0009*       ld ix,player_begin
       04          
047F00             0010*   ; compute dx
047F00 DD 27 01    0011*       ld hl,(ix+sprite_x)
047F03 FD 17 01    0012*       ld de,(iy+sprite_x)
047F06 B7          0013*       or a ; clear carry
047F07 ED 52       0014*       sbc hl,de ; dx
047F09 E5          0015*       push hl ; save dx
047F0A             0016*   ; compute dy
047F0A DD 27 04    0017*       ld hl,(ix+sprite_y)
047F0D FD 17 04    0018*       ld de,(iy+sprite_y)
047F10 B7          0019*       or a ; clear carry
047F11 ED 52       0020*       sbc hl,de ; dy
047F13 EB          0021*       ex de,hl ; de = dy
047F14             0022*   ; compute angle to player
047F14 C1          0023*       pop bc ; dx (was hl)
047F15 C5          0024*       push bc ; save dx
047F16 D5          0025*       push de ; save dy
047F17 CD D1 07 04 0026*       call atan2_168fast ; uh.l = angle to player
047F1B 3E E0       0027*       ld a,%11100000
047F1D A5          0028*       and l ; round angle to nearest 32th of a circle
047F1E 6F          0029*       ld l,a
047F1F 22 4D 7F 04 0030*       ld (Bearing_t),hl ; return angle to player
047F23 D1          0031*       pop de ; restore dy
047F24 C1          0032*       pop bc ; restore dx
047F25 C9          0033*       ret
047F26             0034*   ; end orientation_to_player
047F26             0035*   
047F26             0036*   ; compute orientation to player
047F26             0037*   ; based on relative positions
047F26             0038*   ; returns: uh.l 16.8 fixed angle256 to player
047F26             0039*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
047F26             0040*   ;    representing delta-x/y *to* target respectively
047F26             0041*   ; inputs: iy pointed at tile record
047F26             0042*   ; destroys: everything except iy (tile record pointer)
047F26             0043*   tile_orientation_to_player:
047F26 DD 21 05 95 0044*       ld ix,player_begin
       04          
047F2B             0045*   ; compute dx
047F2B DD 27 01    0046*       ld hl,(ix+sprite_x)
047F2E FD 17 01    0047*       ld de,(iy+tile_x)
047F31 B7          0048*       or a ; clear carry
047F32 ED 52       0049*       sbc hl,de ; dx
047F34 E5          0050*       push hl ; save dx
047F35             0051*   ; compute dy
047F35 DD 27 04    0052*       ld hl,(ix+sprite_y)
047F38 FD 17 04    0053*       ld de,(iy+tile_y)
047F3B B7          0054*       or a ; clear carry
047F3C ED 52       0055*       sbc hl,de ; dy
047F3E EB          0056*       ex de,hl ; de = dy
047F3F             0057*   ; compute angle to player
047F3F C1          0058*       pop bc ; dx (was hl)
047F40 CD D1 07 04 0059*       call atan2_168fast ; uh.l = angle to player
047F44 3E E0       0060*       ld a,%11100000
047F46 A5          0061*       and l ; round angle to nearest 32th of a circle
047F47 6F          0062*       ld l,a
047F48 22 4D 7F 04 0063*       ld (Bearing_t),hl
047F4C C9          0064*       ret
047F4D             0065*   ; end tile_orientation_to_player
047F4D             0066*   
047F4D             0067*   ; targeting_computer variables fixed 16.8 format
047F4D 00 00 00    0068*   Bearing_t: dl 0x000000 ; angle to target
047F50 00 00 00    0069*   Heading_t: dl 0x000000 ; angle of target motion
047F53 00 00 00    0070*   Vp: dl 0x000000 ; velocity of projectile
047F56 00 00 00    0071*   Vp_x: dl 0x000000 ; x component of projectile velocity
047F59 00 00 00    0072*   Vp_y: dl 0x000000 ; y component of projectile velocity
047F5C 00 00 00    0073*   Vt: dl 0x000000 ; velocity of target
047F5F 00 00 00    0074*   Vt_x: dl 0x000000 ; x component of target velocity
047F62 00 00 00    0075*   Vt_y: dl 0x000000 ; y component of target velocity
047F65 00 00 00    0076*   Heading_p: dl 0x000000 ; angle of projectile motion
047F68 00 00 00    0077*   lead_angle: dl 0x000000 ; lead angle
047F6B             0078*   
047F6B             0079*   ; Inputs:   Vp velocity of projectile set,
047F6B             0080*   ;           iy pointed to sprite record,
047F6B             0081*   ;           player position and velocities correctly set
047F6B             0082*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
047F6B             0083*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
047F6B             0084*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
047F6B             0085*   targeting_computer:
047F6B DD 21 05 95 0086*       ld ix,player_begin
       04          
047F70             0087*   ; ; compute target velocity from x,y component velocities
047F70             0088*   ;     ld bc,(ix+sprite_xvel)
047F70             0089*   ;     ld de,(ix+sprite_yvel)
047F70             0090*   ;     ld hl,-1*256 ; account for vertical ground movement
047F70             0091*   ;     add hl,de
047F70             0092*   ;     ex de,hl ; ud.e = player_yvel-1
047F70             0093*   ;     call cartesian_to_polar_sm ; uh.l = Heading_t, ud.e = Vt
047F70             0094*   ;     ld (Heading_t),hl ; PASSES
047F70             0095*   ;     ld (Vt),de ; PASSES
047F70             0096*   ; ; Bearing_t should have been set by prerequisite call to orientation_to_player
047F70             0097*   ; ; compute Heading_t-Bearing_t PASSES
047F70             0098*   ;     ld de,(Bearing_t)
047F70             0099*   ;     and a ; clear carry
047F70             0100*   ;     sbc hl,de ; Uh.l = Heading_t-Bearing_t
047F70             0101*   ; ; compute sin(Heading_t-Bearing_t)
047F70             0102*   ;     call sin168 ; uh.l = sin(Heading_t-Bearing_t)
047F70             0103*   ; ; compute (Vt*sin(Heading_t-Bearing_t))
047F70             0104*   ;     ld de,(Vt)
047F70             0105*   ;     call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
047F70             0106*   ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
047F70             0107*   ;     ld de,(Vp)
047F70             0108*   ;     call sdiv168 ; ud.e = (Vt*sin(Heading_t-Bearing_t)) / Vp
047F70             0109*   ;     ex de,hl ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
047F70             0110*   ; ; answer is in radians, convert to degrees256
047F70             0111*   ;     ld de,0x0028BE ; 40.74 = 57.29578*256/360
047F70             0112*   ;     call smul168 ; uh.l = angle in degrees256
047F70             0113*   ;     ld (lead_angle),hl ; TODO: fix this
047F70             0114*   ; ; add lead angle to target bearing
047F70             0115*   ;     ld de,(Bearing_t)
047F70             0116*   ;     add hl,de ; h.l = lead angle+target bearing
047F70             0117*   
047F70 2A 4D 7F 04 0118*       ld hl,(Bearing_t) ; TODO: fix this
047F74             0119*   
047F74 E5          0120*       push hl
047F75             0121*   
047F75             0122*   ; compute component projectile velocities
047F75 ED 5B 53 7F 0123*       ld de,(Vp) ; Vp should have been set by caller
       04          
047F7A CD D7 06 04 0124*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
047F7E ED 43 56 7F 0125*       ld (Vp_x),bc
       04          
047F83             0126*       ; inc d ; account for vertical ground movement
047F83 ED 53 59 7F 0127*       ld (Vp_y),de
       04          
047F88 E1          0128*       pop hl ; uh.l = lead angle+target bearing
047F89 22 65 7F 04 0129*       ld (Heading_p),hl
047F8D             0130*   
047F8D C9          0131*       ret
047F8E             0132*   
047F8E             0133*   ; debug print the results
047F8E             0134*       PUSH_ALL
047F8E 08          0001*M1     ex af,af'
047F8F D9          0002*M1     exx
047F90 F5          0003*M1     push af
047F91 E5          0004*M1     push hl
047F92 C5          0005*M1     push bc
047F93 D5          0006*M1     push de
047F94             0007*M1 
047F94 08          0008*M1     ex af,af'
047F95 D9          0009*M1     exx
047F96 F5          0010*M1     push af
047F97 E5          0011*M1     push hl
047F98 C5          0012*M1     push bc
047F99 D5          0013*M1     push de
047F9A DD E5       0014*M1     push ix
047F9C FD E5       0015*M1     push iy
047F9E CD 3C 12 04 0135*       call vdu_home_cursor
047FA2 CD 78 00 04 0136*       call printNewLine
047FA6 CD 5C 00 04 0137*       call printInline
047FAA 42 74 20 00 0138*       asciz "Bt "
047FAE 2A 4D 7F 04 0139*       ld hl,(Bearing_t)
047FB2 CD D4 01 04 0140*       call print_s168_hl
047FB6             0141*   
047FB6             0142*       ; call printInline
047FB6             0143*       ; asciz "\r\nHt "
047FB6             0144*       ; ld hl,(Heading_t)
047FB6             0145*       ; call print_s168_hl
047FB6             0146*   
047FB6             0147*       ; call printInline
047FB6             0148*       ; asciz "\r\nVt "
047FB6             0149*       ; ld hl,(Vt)
047FB6             0150*       ; call print_s168_hl
047FB6             0151*   
047FB6             0152*       ; call printInline
047FB6             0153*       ; asciz "\r\nVtx"
047FB6             0154*       ; ld hl,(ix+sprite_xvel)
047FB6             0155*       ; call print_s168_hl
047FB6             0156*   
047FB6             0157*       ; call printInline
047FB6             0158*       ; asciz "\r\nVty"
047FB6             0159*       ; ld hl,(ix+sprite_yvel)
047FB6             0160*       ; ld de,-1*256 ; account for vertical ground movement
047FB6             0161*       ; add hl,de
047FB6             0162*       ; call print_s168_hl
047FB6             0163*   
047FB6 CD 5C 00 04 0164*       call printInline
047FBA 0D 0A 4C 64 0165*       asciz "\r\nLda"
       61 00       
047FC0 2A 68 7F 04 0166*       ld hl,(lead_angle)
047FC4 CD D4 01 04 0167*       call print_s168_hl
047FC8             0168*   
047FC8 CD 5C 00 04 0169*       call printInline
047FCC 0D 0A 48 70 0170*       asciz "\r\nHp "
       20 00       
047FD2 2A 65 7F 04 0171*       ld hl,(Heading_p)
047FD6 CD D4 01 04 0172*       call print_s168_hl
047FDA             0173*   
047FDA             0174*       ; call printInline
047FDA             0175*       ; asciz "\r\nVp "
047FDA             0176*       ; ld hl,(Vp)
047FDA             0177*       ; call print_s168_hl
047FDA             0178*   
047FDA             0179*       ; call printInline
047FDA             0180*       ; asciz "\r\nVpx"
047FDA             0181*       ; ld hl,(Vp_x)
047FDA             0182*       ; call print_s168_hl
047FDA             0183*   
047FDA             0184*       ; call printInline
047FDA             0185*       ; asciz "\r\nVpy"
047FDA             0186*       ; ld hl,(Vp_y)
047FDA             0187*       ; call print_s168_hl
047FDA             0188*   
047FDA             0189*       POP_ALL
047FDA FD E1       0001*M1     pop iy
047FDC DD E1       0002*M1     pop ix
047FDE D1          0003*M1     pop de
047FDF C1          0004*M1     pop bc
047FE0 E1          0005*M1     pop hl
047FE1 F1          0006*M1     pop af
047FE2 08          0007*M1     ex af,af'
047FE3 D9          0008*M1     exx
047FE4             0009*M1 
047FE4 D1          0010*M1     pop de
047FE5 C1          0011*M1     pop bc
047FE6 E1          0012*M1     pop hl
047FE7 F1          0013*M1     pop af
047FE8 08          0014*M1     ex af,af'
047FE9 D9          0015*M1     exx
047FEA C9          0190*       ret
047FEB             0071        include "tile_table.inc"
047FEB             0001*   ; ###### tile TABLE FIELD INDICES ######
047FEB             0002*   tile_table_record_size:         equ  64; bytes per tile record
047FEB             0003*   tile_id:                 equ   0; 1 bytes ;unique tileId, zero-based
047FEB             0004*   ; tile state variables
047FEB             0005*   tile_state_variables:    equ   1; beginning of tile state variables
047FEB             0006*   tile_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
047FEB             0007*   tile_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
047FEB             0008*   tile_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
047FEB             0009*   tile_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
047FEB             0010*   tile_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
047FEB             0011*   tile_heading:            equ  16; 3 bytes ;tile movement direction deg256 16.8 fixed
047FEB             0012*   tile_orientation:        equ  19; 3 bytes ;orientation bits
047FEB             0013*   ; tile definition variables
047FEB             0014*   tile_definitions:        equ  22; beginnning of tile definition variables
047FEB             0015*   tile_type:               equ  22; 1 bytes ;type of tile as defined in enemies.inc
047FEB             0016*   tile_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
047FEB             0017*   tile_move_program:       equ  26; 3 bytes ;address of tile's behavior subroutine
047FEB             0018*   tile_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
047FEB             0019*   tile_dim_x:              equ  30; 1 bytes ;tile width in pixels
047FEB             0020*   tile_dim_y:              equ  31; 1 bytes ;tile height in pixels
047FEB             0021*   tile_num_orientations:   equ  32; 1 bytes ;number of orientations for this tile
047FEB             0022*   tile_num_animations:     equ  33; 1 bytes ;number of animations for this tile
047FEB             0023*   tile_animation:          equ  34; 1 bytes ;current animation index, zero-based
047FEB             0024*   tile_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
047FEB             0025*   tile_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
047FEB             0026*   tile_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
047FEB             0027*   tile_points:             equ  38; 1 bytes ;points awarded for killing this tile type
047FEB             0028*   tile_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
047FEB             0029*   tile_frame:              equ  40; 1 bytes ;current animation frame
047FEB             0030*   
047FEB             0031*   ; ###### tile TABLE VARIABLES ######
047FEB 00 00 00 00 0032*   tile_stack: blkb 256*3,0 ; stack of pointers to tile records
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0482EB 00 00 00    0033*       dl 0 ; list terminator
0482EE             0034*   tile_stack_end:
0482EE EB 7F 04    0035*   tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
0482F1 05 99 04    0036*   tile_table_pointer: dl tile_table_base ; pointer to top address of current record, initialized to tile_table_base
0482F4 00 00 00    0037*   num_active_tiles: dl 0 ; how many active tiles
0482F7 00          0038*   next_tile_id: db 0 ; next available tile id
0482F8 00 00 00    0039*   new_tile_table_pointer: dl 0 ; pointer to new tile record
0482FB             0040*   
0482FB             0041*   tile_table_init:
0482FB             0042*   ; reset num active tiles
0482FB 21 00 00 00 0043*       ld hl,0
0482FF 22 F4 82 04 0044*       ld (num_active_tiles),hl
048303             0045*   ; reset next tile id
048303 AF          0046*       xor a
048304 32 F7 82 04 0047*       ld (next_tile_id),a
048308             0048*   ; clear the tile stack
048308 AF          0049*       xor a ; write zeroes to tile stack
048309 21 EB 7F 04 0050*       ld hl,tile_stack
04830D 01 03 03 00 0051*       ld bc,tile_stack_end-tile_stack
048311 CD 42 03 04 0052*       call clear_mem
048315             0053*   ; clear the tile table
048315 AF          0054*       xor a ; write zeroes to tile table
048316 21 05 99 04 0055*       ld hl,tile_table_base ; address to copy from
04831A 01 00 40 00 0056*       ld bc,tile_table_end-tile_table_base ; number of bytes to clear
04831E CD 42 03 04 0057*       call clear_mem
048322             0058*   ; write tile ids
048322 DD 21 05 99 0059*       ld ix,tile_table_base
       04          
048327 AF          0060*       xor a ; tile id
048328 06 00       0061*       ld b,0 ; loop counter
04832A             0062*   @loop:
04832A DD 77 00    0063*       ld (ix+tile_id),a
04832D ED 32 40    0064*       lea ix,ix+table_record_size
048330 3C          0065*       inc a
048331 10 F7       0066*       djnz @loop
048333             0067*   ; set pointers to top of tile stack and tile table
048333 21 F7 82 04 0068*       ld hl,next_tile_id
048337 3E FF       0069*       ld a,255 ; will wrap around to 0 on first call to create active tile
048339 77          0070*       ld (hl),a
04833A 21 05 99 04 0071*       ld hl,tile_table_base
04833E 22 F1 82 04 0072*       ld (tile_table_pointer),hl
048342 21 EB 7F 04 0073*       ld hl,tile_stack
048346 22 EE 82 04 0074*       ld (tile_stack_pointer),hl
04834A C9          0075*       ret
04834B             0076*   ; end tile_table_init
04834B             0077*   
04834B             0078*   ; gets the next available tile id
04834B             0079*   ; inputs; none
04834B             0080*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
04834B             0081*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
04834B             0082*   ; destroys: a,hl,ix
04834B             0083*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
04834B             0084*   tile_table_get_next_id:
04834B 21 F4 82 04 0085*       ld hl,num_active_tiles
04834F 34          0086*       inc (hl)
048350 C2 57 83 04 0087*       jp nz,@F ; check rollover to > 256 active tiles
048354 35          0088*       dec (hl) ; undo increment
048355 AF          0089*       xor a ; reset carry flag indicating that we didn't find a free tile
048356 C9          0090*       ret
048357             0091*   @@:
048357 7E          0092*       ld a,(hl) ; number of active tiles
048358             0093*   ; point ix to next tile record
048358 21 F7 82 04 0094*       ld hl,next_tile_id
04835C 34          0095*       inc (hl)
04835D 56          0096*       ld d,(hl) ; index into tile table
04835E 1E 40       0097*       ld e,tile_table_record_size
048360 ED 5C       0098*       mlt de ; de is now the offset to the table entry
048362 DD 21 05 99 0099*       ld ix,tile_table_base ; point to base address of tile table
       04          
048367 DD 19       0100*       add ix,de ; ix is now the address of the table entry
048369             0101*   ; add tile pointer to tile stack
048369 21 EB 7F 04 0102*       ld hl,tile_stack
04836D 57          0103*       ld d,a ; number of active tiles
04836E 15          0104*       dec d ; zero-based index
04836F 1E 03       0105*       ld e,3 ; three bytes per tile record
048371 ED 5C       0106*       mlt de ; offset into tile stack
048373 19          0107*       add hl,de ; hl points to top of the active tiles
048374 ED 3F       0108*       ld (hl),ix
048376             0109*   ; return tile id
048376 DD 7E 00    0110*       ld a,(ix+tile_id)
048379 37          0111*       scf ; sets carry flag indicating we found a free tile
04837A C9          0112*       ret ; done
04837B             0113*   ; end tile_table_get_next_id
04837B             0114*   
04837B             0115*   ; deactivate the tile with the given id
04837B             0116*   ; inputs: tile_stack_pointer set to record to remove
04837B             0117*   ; outputs: decrements num_active_tiles by one, tile_stack_pointer set to record above removed record, removes tile pointer from the tile stack, shifts stack records above it down one position
04837B             0118*   ; destroys: a,hl,bc,de
04837B             0119*   table_deactivate_tile:
04837B             0120*   ; compute address to copy from
04837B 2A EE 82 04 0121*       ld hl,(tile_stack_pointer)
04837F 23          0122*       inc hl
048380 23          0123*       inc hl
048381 23          0124*       inc hl
048382 E5          0125*       push hl ; save copy from address
048383             0126*   ; compute bytes to copy
048383 3A F4 82 04 0127*       ld a,(num_active_tiles)
048387 6F          0128*       ld l,a
048388 26 03       0129*       ld h,3
04838A ED 6C       0130*       mlt hl
04838C 11 EB 7F 04 0131*       ld de,tile_stack
048390 19          0132*       add hl,de ; hl = bottom of stack address
048391 ED 5B EE 82 0133*       ld de,(tile_stack_pointer)
       04          
048396 B7          0134*       or a ; clear carry
048397 ED 52       0135*       sbc hl,de ; hl = bytes to copy
048399 E5          0136*       push hl
04839A C1          0137*       pop bc ; bytes to copy
04839B             0138*   ; compute target address
04839B ED 5B EE 82 0139*       ld de,(tile_stack_pointer)
       04          
0483A0             0140*   ; copy bytes
0483A0 E1          0141*       pop hl ; copy from address
0483A1 ED B0       0142*       ldir
0483A3             0143*   ; update stack pointer and active tile count
0483A3 21 F4 82 04 0144*       ld hl,num_active_tiles
0483A7 35          0145*       dec (hl)
0483A8 2A EE 82 04 0146*       ld hl,(tile_stack_pointer)
0483AC 2B          0147*       dec hl
0483AD 2B          0148*       dec hl
0483AE 2B          0149*       dec hl
0483AF 22 EE 82 04 0150*       ld (tile_stack_pointer),hl
0483B3 C9          0151*       ret
0483B4             0152*   ; end table_deactivate_tile
0483B4             0153*   
0483B4             0154*   ; spawn a new active tile at the prescribed location
0483B4             0155*   ; inputs: hl = pointer to new tile default settings, tiles_x_plot, tiles_y_plot = x,y position
0483B4             0156*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
0483B4             0157*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
0483B4             0158*   ; destroys: a,hl,bc,de,ix
0483B4             0159*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
0483B4             0160*   spawn_active_tile:
0483B4 E5          0161*       push hl ; back up pointer to new tile defaults
0483B5 CD 4B 83 04 0162*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
0483B9 E1          0163*       pop hl ; restore pointer to new tile defaults
0483BA D0          0164*       ret nc ; no carry means no free tile slots, so we go home
0483BB             0165*   ; copy default settings to new tile
0483BB DD 22 F8 82 0166*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
0483C0 ED 32 16    0167*       lea ix,ix+tile_definitions ; bump pointer to copy to
0483C3 DD E5       0168*       push ix ; pointer to default tile settings
0483C5 D1          0169*       pop de ; address to copy to
0483C6 01 2A 00 00 0170*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
0483CA ED B0       0171*       ldir ; copies defaults to new tile record
0483CC             0172*   ; copy tile position from inputs
0483CC DD 2A F8 82 0173*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
0483D1 2A 69 84 04 0174*       ld hl,(tiles_x_plot-1) ; shift up one byte to get 16.8 fixed point
0483D5 DD 2F 01    0175*       ld (ix+tile_x),hl
0483D8 2A 6D 84 04 0176*       ld hl,(tiles_y_plot-1) ; shift up one byte to get 16.8 fixed point
0483DC DD 2F 04    0177*       ld (ix+tile_y),hl
0483DF             0178*   ; set default tile velocities
0483DF 21 00 00 00 0179*       ld hl,0
0483E3 DD 2F 07    0180*       ld (ix+tile_xvel),hl
0483E6 21 00 01 00 0181*       ld hl,1*256 ; 1 pixel per frame
0483EA DD 2F 0A    0182*       ld (ix+tile_yvel),hl
0483ED             0183*   ; return to caller
0483ED DD CB 16 FE 0184*       set 7,(ix+sprite_type) ; set just spawned flag
0483F1 DD CB 1D F6 0185*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
0483F5 37          0186*       scf ; set carry flag to indicate success
0483F6 C9          0187*       ret
0483F7             0188*   ; end spawn_active_tile
0483F7             0189*   
0483F7             0190*   ; spawn a new active tile at the prescribed location
0483F7             0191*   ; inputs: iy pointer to current hl = pointer to new tile default settings
0483F7             0192*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
0483F7             0193*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
0483F7             0194*   ; destroys: a,hl,bc,de,ix
0483F7             0195*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
0483F7             0196*   spawn_active_tile_from_sprite:
0483F7 E5          0197*       push hl ; back up pointer to new tile defaults
0483F8 CD 4B 83 04 0198*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
0483FC E1          0199*       pop hl ; restore pointer to new tile defaults
0483FD D0          0200*       ret nc ; no carry means no free tile slots, so we go home
0483FE             0201*   ; copy default settings to new tile
0483FE DD 22 F8 82 0202*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
048403 ED 32 16    0203*       lea ix,ix+tile_definitions ; bump pointer to copy to
048406 DD E5       0204*       push ix ; pointer to default tile settings
048408 D1          0205*       pop de ; address to copy to
048409 01 2A 00 00 0206*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
04840D ED B0       0207*       ldir ; copies defaults to new tile record
04840F             0208*   ; copy tile position from existing sprite
04840F DD 2A F8 82 0209*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
048414 FD 2A B7 79 0210*       ld iy,(table_pointer) ; get existing sprite record
       04          
048419 FD 27 01    0211*       ld hl,(iy+sprite_x)
04841C DD 2F 01    0212*       ld (ix+tile_x),hl
04841F FD 27 04    0213*       ld hl,(iy+sprite_y)
048422 DD 2F 04    0214*       ld (ix+tile_y),hl
048425             0215*   ; set default tile velocities
048425 21 00 00 00 0216*       ld hl,0
048429 DD 2F 07    0217*       ld (ix+tile_xvel),hl
04842C 21 00 01 00 0218*       ld hl,1*256 ; 1 pixel per frame
048430 DD 2F 0A    0219*       ld (ix+tile_yvel),hl
048433             0220*   ; return to caller
048433 DD CB 16 FE 0221*       set 7,(ix+sprite_type) ; set just spawned flag
048437 DD CB 1D F6 0222*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
04843B 37          0223*       scf ; set carry flag to indicate success
04843C C9          0224*       ret
04843D             0225*   ; end spawn_active_tile_from_sprite
04843D             0226*   
04843D             0227*   ; compute animation frame based on tile_animation and tile_heading
04843D             0228*   ; inputs: iy set to tile record
04843D             0229*   ; outputs: a, tile_frame set to animation frame
04843D             0230*   ; destroys: a,hl
04843D             0231*   tile_frame_heading_animation:
04843D FD 7E 11    0232*       ld a,(iy+tile_heading+1) ; we want the integer portion
048440 CB 3F       0233*       srl a ; divide integer portion by 8
048442 CB 3F       0234*       srl a
048444 CB 3F       0235*       srl a
048446 FD 66 22    0236*       ld h,(iy+tile_animation)
048449 2E 20       0237*       ld l,32 ; 32 orientation frames per animation
04844B ED 6C       0238*       mlt hl ; hl = offset from base animation
04844D 85          0239*       add a,l ; modulo256 since tile_frame is only 1 byte
04844E FD 77 28    0240*       ld (iy+tile_frame),a
048451 C9          0241*       ret
048452             0242*   ; end tile_frame_heading_animation
048452             0243*   
048452             0244*   ; compute animation frame based on tile_heading
048452             0245*   ; inputs: iy set to tile record
048452             0246*   ; outputs: a, tile_frame set to animation frame
048452             0247*   ; destroys: a,hl
048452             0248*   tile_frame_heading:
048452 FD 7E 11    0249*       ld a,(iy+tile_heading+1) ; we want the integer portion
048455 CB 3F       0250*       srl a ; divide integer portion by 8
048457 CB 3F       0251*       srl a
048459 CB 3F       0252*       srl a
04845B FD 77 28    0253*       ld (iy+tile_frame),a
04845E C9          0254*       ret
04845F             0255*   ; end tile_frame_heading
04845F             0072        include "tiles.inc"
04845F 00 00 00    0001*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
048462 00 00 00    0002*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
048465             0003*       ; initialize to zero for a maximum of 256 rows in a level
048465 00          0004*   tiles_cols: db 0 ; number of tile columns in the current level
048466             0005*   
048466 00 00 00    0006*   cur_baseBufferId: dl 0
048469 00          0007*       db 0 ; padding for byte-shifting
04846A 00 00 00    0008*   tiles_x_plot: dl 0
04846D 00          0009*       db 0 ; padding for byte-shifting
04846E F1 FF FF    0010*   tiles_y_plot: dl -15
048471             0011*   
048471             0012*   tiles_plot:
048471             0013*   ; set gfx origin to playing field window
048471 01 80 00 00 0014*       ld bc,origin_left
048475 11 40 00 00 0015*       ld de,origin_top
048479 CD 0C 13 04 0016*       call vdu_set_gfx_origin
04847D             0017*   ; set gfx viewport to playing field window
04847D 01 00 00 00 0018*       ld bc,field_left
048481 11 00 00 00 0019*       ld de,field_top
048485 DD 21 FF 00 0020*       ld ix,field_right
       00          
04848A FD 21 3F 01 0021*       ld iy,field_bottom
       00          
04848F CD 27 13 04 0022*       call vdu_set_gfx_viewport
048493             0023*   ; move the background down one pixel
048493 3E 02       0024*       ld a,2 ; current gfx viewport
048495 2E 02       0025*       ld l,2 ; direction=down
048497 26 01       0026*       ld h,1 ; speed=1 px
048499 CD 9F 12 04 0027*       call vdu_scroll_down
04849D             0028*   ; set gfx viewport to one scanline to optimise plotting tiles
04849D 01 00 00 00 0029*       ld bc,0 ; leftmost x-coord
0484A1 11 00 00 00 0030*       ld de,0 ; topmost y-coord
0484A5 DD 21 FF 00 0031*       ld ix,255 ; rightmost x-coord
       00          
0484AA FD 21 00 00 0032*       ld iy,0 ; bottommost y-coord
       00          
0484AF CD 27 13 04 0033*       call vdu_set_gfx_viewport
0484B3             0034*   ; plot the background
0484B3 CD 77 85 04 0035*       call bg_plot
0484B7             0036*   ; initialize tiles loop
0484B7 21 00 00 00 0037*       ld hl,0 ; init plotting x-coordinate
0484BB 22 6A 84 04 0038*       ld (tiles_x_plot),hl
0484BF 2A 5F 84 04 0039*       ld hl,(tiles_row_defs)
0484C3 3A 65 84 04 0040*       ld a,(tiles_cols)
0484C7 47          0041*       ld b,a ; column loop counter
0484C8             0042*   @loop:
0484C8 C5          0043*       push bc ; save the loop counter
0484C9             0044*   ; read the tile defintion for the current column
0484C9 7E          0045*       ld a,(hl) ; a has tile definition
0484CA E5          0046*       push hl ; save pointer to tile definition
0484CB 2A 66 84 04 0047*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
0484CF 6F          0048*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
0484D0 CD 74 13 04 0049*       call vdu_buff_select ; tile bitmap buffer is now active
0484D4             0050*   ; plot the active bitmap
0484D4 ED 4B 6A 84 0051*       ld bc,(tiles_x_plot)
       04          
0484D9 ED 5B 6E 84 0052*       ld de,(tiles_y_plot)
       04          
0484DE CD D0 16 04 0053*       call vdu_plot_bmp
0484E2             0054*   ; bump x-coords the width of one tile and save it
0484E2 2A 6A 84 04 0055*       ld hl,(tiles_x_plot)
0484E6 01 10 00 00 0056*       ld bc,16
0484EA 09          0057*       add hl,bc
0484EB 22 6A 84 04 0058*       ld (tiles_x_plot),hl
0484EF             0059*   ; prepare to loop to next column
0484EF E1          0060*       pop hl ; get back pointer to tile def
0484F0 23          0061*       inc hl ; bump it to the next column
0484F1 C1          0062*       pop bc ; snag our loop counter
0484F2 10 D4       0063*       djnz @loop
0484F4             0064*   ; increment tiles plotting y-coordinate
0484F4             0065*   ; (we use ix b/c we want to preserve hl for the next step)
0484F4 DD 2A 6E 84 0066*       ld ix,(tiles_y_plot)
       04          
0484F9 11 01 00 00 0067*       ld de,1
0484FD DD 19       0068*       add ix,de
0484FF DD 22 6E 84 0069*       ld (tiles_y_plot),ix
       04          
048504 DD 7D       0070*       ld a,ixl
048506 FE 01       0071*       cp 1
048508 C0          0072*       ret nz
048509             0073*   ; do active tiles
048509 E5          0074*       push hl ; save pointer to next row tile def
04850A CD 2D 85 04 0075*       call do_active_tiles
04850E E1          0076*       pop hl ; get back pointer to next row tile def
04850F             0077*   ; time to bump tiles_row_defs to next row
04850F             0078*   ; (hl was already there at the end of the loop)
04850F 22 5F 84 04 0079*       ld (tiles_row_defs),hl
048513             0080*   ; reset coords to plot next row of tiles
048513 21 00 00 00 0081*       ld hl,0
048517 22 6A 84 04 0082*       ld (tiles_x_plot),hl
04851B 21 F1 FF FF 0083*       ld hl,-15
04851F 22 6E 84 04 0084*       ld (tiles_y_plot),hl
048523             0085*   ; decrement tiles row counter
048523 21 62 84 04 0086*       ld hl,tiles_row
048527 35          0087*       dec (hl)
048528 C0          0088*       ret nz
048529             0089*   @inc_level:
048529 C3 5E 62 04 0090*       jp next_level
04852D             0091*   ; end tiles_plot
04852D             0092*   
04852D             0093*   do_active_tiles:
04852D             0094*   ; initialize tiles loop
04852D 21 00 00 00 0095*       ld hl,0 ; init plotting x-coordinate
048531 22 6A 84 04 0096*       ld (tiles_x_plot),hl
048535 2A 5F 84 04 0097*       ld hl,(tiles_row_defs)
048539 3A 65 84 04 0098*       ld a,(tiles_cols)
04853D 47          0099*       ld b,a ; column loop counter
04853E             0100*   @loop:
04853E C5          0101*       push bc ; save the loop counter
04853F             0102*   ; read the tile defintion for the current column
04853F 7E          0103*       ld a,(hl) ; a has tile definition
048540 E5          0104*       push hl ; save pointer to tile definition
048541 B7          0105*       or a ; check for null tile
048542 CA 5E 85 04 0106*       jp z,@next_tile ; skip to next tile if null
048546 FE 11       0107*       cp 17 ; carry reset if active tile
048548 D2 5E 85 04 0108*       jp nc,@next_tile ; skip to next tile if not active
04854C             0109*   ; call the tile activation routine
04854C 21 AF 85 04 0110*       ld hl,tile_activation_routines
048550 16 03       0111*       ld d,3 ; three bytes per table entry
048552 5F          0112*       ld e,a ; a is the tile type
048553 ED 5C       0113*       mlt de ; de is now the offset to the table entry
048555 19          0114*       add hl,de ; hl is now the address of the table entry
048556 ED 27       0115*       ld hl,(hl) ; hl is now the activation routine address
048558             0116*       CALL_HL ; call the activation routine
048558 01 5E 85 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
04855C C5          0002*M1     push bc ; which constitutes the return address
04855D E9          0003*M1     jp (hl) ; Jump to the address in HL
04855E             0117*   @next_tile:
04855E             0118*   ; bump x-coords the width of one tile and save it
04855E 2A 6A 84 04 0119*       ld hl,(tiles_x_plot)
048562 01 10 00 00 0120*       ld bc,16
048566 09          0121*       add hl,bc
048567 22 6A 84 04 0122*       ld (tiles_x_plot),hl
04856B             0123*   ; prepare to loop to next column
04856B E1          0124*       pop hl ; get back pointer to tile def
04856C 23          0125*       inc hl ; bump it to the next column
04856D C1          0126*       pop bc ; snag our loop counter
04856E 10 CE       0127*       djnz @loop
048570 C9          0128*       ret ; done
048571             0129*   ; end do_active_tiles
048571             0130*   
048571 FF FF FF    0131*   bg_y_plot: dl -1
048574 00 04 00    0132*   bg_bufferId: dl BUF_BG_STARS_0 ; default bufferId for background tiles
048577             0133*   
048577             0134*   bg_plot:
048577             0135*   ; load current bg tile bufferId as default
048577 2A 74 85 04 0136*       ld hl,(bg_bufferId)
04857B             0137*   ; check whether it is time for a new background tile
04857B 3A 71 85 04 0138*       ld a,(bg_y_plot)
04857F 3C          0139*       inc a
048580 32 71 85 04 0140*       ld (bg_y_plot),a
048584 C2 9C 85 04 0141*       jp nz,@F ; not time for a new tile so draw current one
048588             0142*   ; load the next background tile
048588 21 00 04 00 0143*       ld hl,BUF_BG_STARS_0
04858C CD FB 04 04 0144*       call rand_8
048590 E6 07       0145*       and %0000111
048592 85          0146*       add a,l
048593 6F          0147*       ld l,a
048594 3E 00       0148*       ld a,0
048596 8C          0149*       adc a,h
048597 67          0150*       ld h,a
048598 22 74 85 04 0151*       ld (bg_bufferId),hl
04859C             0152*   @@:
04859C CD 74 13 04 0153*       call vdu_buff_select
0485A0 01 00 00 00 0154*       ld bc,0
0485A4 ED 5B 71 85 0155*       ld de,(bg_y_plot)
       04          
0485A9 13          0156*       inc de
0485AA CD D0 16 04 0157*       call vdu_plot_bmp
0485AE C9          0158*       ret
0485AF             0159*   ; end bg_plot
0485AF             0073        include "tiles_active.inc"
0485AF             0001*   
0485AF             0002*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
0485AF             0003*   tile_pad_small: equ 1
0485AF             0004*   tile_pad_med: equ 2
0485AF             0005*   tile_pad_large: equ 3
0485AF             0006*   tile_charge_shields: equ 4
0485AF             0007*   tile_turret_fireball: equ 5
0485AF             0008*   tile_laser_turret: equ 6
0485AF             0009*   tile_twin_laser_turret: equ 7
0485AF             0010*   tile_charge_fuel: equ 8
0485AF             0011*   tile_electrode: equ 9
0485AF             0012*   tile_lightning: equ 10
0485AF             0013*   ; tile_electrode_r: equ 11 ; same as tile_electrode
0485AF             0014*   tile_12: equ 12
0485AF             0015*   tile_13: equ 13
0485AF             0016*   tile_14: equ 14
0485AF             0017*   tile_15: equ 15
0485AF             0018*   tile_crater: equ 16
0485AF             0019*   
0485AF             0020*   tile_activation_routines:
0485AF DF 85 04    0021*       dl activate_null_tile ; dummy spacer since tiled is 1-based
0485B2 43 88 04    0022*       dl activate_pad_small
0485B5 DF 85 04    0023*       dl activate_null_tile
0485B8 DF 85 04    0024*       dl activate_null_tile
0485BB DF 85 04    0025*       dl activate_null_tile
0485BE AE 88 04    0026*       dl activate_turret_fireball
0485C1 DF 85 04    0027*       dl activate_null_tile
0485C4 DF 85 04    0028*       dl activate_null_tile
0485C7 DF 85 04    0029*       dl activate_null_tile
0485CA F9 86 04    0030*       dl activate_electrode
0485CD F7 87 04    0031*       dl activate_lightning
0485D0 F9 86 04    0032*       dl activate_electrode
0485D3 DF 85 04    0033*       dl activate_null_tile
0485D6 DF 85 04    0034*       dl activate_null_tile
0485D9 DF 85 04    0035*       dl activate_null_tile
0485DC AB 86 04    0036*       dl activate_crater
0485DF             0037*   ; end tile_activation_routines
0485DF             0038*   
0485DF             0039*   activate_null_tile:
0485DF C9          0040*       ret ; dummy routine, do nothing
0485E0             0041*   move_active_tile:
0485E0             0042*   ; y-axis movement
0485E0 FD 27 04    0043*       ld hl,(iy+tile_y)
0485E3 FD 17 0A    0044*       ld de,(iy+tile_yvel)
0485E6 19          0045*       add hl,de
0485E7 FD 2F 04    0046*       ld (iy+tile_y),hl
0485EA             0047*   ; detect screen edge collisions
0485EA             0048*   ; y-axis bottom is all we need to test
0485EA 11 00 80 FE 0049*       ld de,-tile_bottom*256
0485EE ED 5A       0050*       adc hl,de
0485F0 F8          0051*       ret m ; still on screen so do nothing further
0485F1 AF          0052*       xor a ; signal caller that tile has scrolled off screen
0485F2 C9          0053*       ret
0485F3             0054*   ; end move_active_tile
0485F3             0055*   
0485F3             0056*   move_tiles:
0485F3             0057*   ; initialize pointers and loop counter
0485F3 FD 21 EB 7F 0058*       ld iy,tile_stack ; set iy to first record in table
       04          
0485F8             0059*   @move_loop:
0485F8 FD 22 EE 82 0060*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
0485FD FD 7E 02    0061*       ld a,(iy+2)
048600 B7          0062*       or a ; will be zero if at end of stack
048601 C8          0063*       ret z ; end of stack so we're done
048602             0064*   ; point iy to tile record
048602 FD 37 00    0065*       ld iy,(iy) ; iy points to the current tile record
048605 FD 22 F1 82 0066*       ld (tile_table_pointer),iy ; update table pointer
       04          
04860A             0067*   ; check top bit of tile_type to see if tile is just spawned
04860A FD CB 16 7E 0068*       bit 7,(iy+tile_type)
04860E C2 2C 86 04 0069*       jp nz,@just_spawned ; if just spawned, skip to next record
048612             0070*   ; check sprite_alive bit to see if tile is active
048612 FD CB 1D 76 0071*       bit sprite_alive,(iy+sprite_collisions)
048616 C8          0072*       ret z ; end of stack so we're done
048617             0073*   ; otherwise we prepare to move the tile
048617 FD 27 1A    0074*       ld hl,(iy+tile_move_program) ; load the behavior subroutine address
04861A             0075*       CALL_HL
04861A 01 20 86 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
04861E C5          0002*M1     push bc ; which constitutes the return address
04861F E9          0003*M1     jp (hl) ; Jump to the address in HL
048620             0076*    ; get back stack pointer and loop
048620             0077*   @next_record:
048620 FD 2A EE 82 0078*       ld iy,(tile_stack_pointer)
       04          
048625 ED 33 03    0079*       lea iy,iy+3 ; next tile stack record
048628 C3 F8 85 04 0080*       jp @move_loop ; loop until we've checked all the records
04862C             0081*   @just_spawned:
04862C FD CB 16 BE 0082*       res 7,(iy+tile_type) ; clear just spawned flag
048630 C3 20 86 04 0083*       jp @next_record
048634             0084*   ; end move_tiles
048634             0085*   
048634             0086*   draw_active_tile:
048634 FD 27 17    0087*       ld hl,(iy+tile_base_bufferId)
048637 FD 7E 28    0088*       ld a,(iy+tile_frame)
04863A 85          0089*       add a,l ; TODO: with a little work we could make all tile base buffer ids align to 256
04863B 6F          0090*       ld l,a
04863C 3E 00       0091*       ld a,0 ; preserve carry
04863E 8C          0092*       adc a,h
04863F 67          0093*       ld h,a
048640 CD 74 13 04 0094*       call vdu_buff_select ; buffer id of animation frame
048644 FD 07 01    0095*       ld bc,(iy+tile_x)
048647 FD 17 04    0096*       ld de,(iy+tile_y)
04864A CD EC 16 04 0097*       call vdu_plot_bmp168
04864E C9          0098*       ret
04864F             0099*   ; end draw_active_tile
04864F             0100*   
04864F             0101*   ; create a new sprite at the same location as the current tile
04864F             0102*   ; inputs: hl = pointer to new sprite default settings, tile_table_pointer = current tile
04864F             0103*   ;         ix = pointer to sprite group, b = number of records in sprite group
04864F             0104*   spawn_sprite_from_tile:
04864F E5          0105*       push hl ; back up pointer to new sprite defaults
048650 CD 62 7A 04 0106*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
048654 E1          0107*       pop hl ; restore pointer to new sprite defaults
048655 D0          0108*       ret nc ; no carry means no free sprite slots, so we go home
048656             0109*   ; copy default settings to new sprite
048656 DD E5       0110*       push ix ; back up pointer to new sprite record
048658 ED 32 16    0111*       lea ix,ix+sprite_definitions ; bump pointer to copy to
04865B DD E5       0112*       push ix ; pointer to default sprite settings
04865D D1          0113*       pop de ; address to copy to
04865E 01 2A 00 00 0114*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
048662 ED B0       0115*       ldir ; copies defaults to new sprite record
048664 DD E1       0116*       pop ix ; restore pointer to new sprite record
048666             0117*   ; copy sprite position from existing tile
048666 FD 2A F1 82 0118*       ld iy,(tile_table_pointer) ; get existing tile record
       04          
04866B FD 27 01    0119*       ld hl,(iy+tile_x)
04866E DD 2F 01    0120*       ld (ix+sprite_x),hl
048671 FD 27 04    0121*       ld hl,(iy+tile_y)
048674 DD 2F 04    0122*       ld (ix+sprite_y),hl
048677             0123*   ; return to caller
048677 DD CB 16 FE 0124*       set 7,(ix+sprite_type) ; set just spawned flag
04867B DD CB 1D F6 0125*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
04867F 37          0126*       scf ; set carry flag to indicate success
048680 C9          0127*       ret
048681             0128*   ; end spawn_sprite_from_tile
048681             0129*   
048681             0130*   ; create a new tile at the same location as the current tile
048681             0131*   ; inputs: tile_table_pointer = current tile
048681             0132*   spawn_active_tile_from_tile:
048681             0133*   ; copy default settings to new tile
048681 DD 2A F1 82 0134*       ld ix,(tile_table_pointer) ; get existing tile record
       04          
048686 ED 32 16    0135*       lea ix,ix+tile_definitions ; bump pointer to copy to
048689 DD E5       0136*       push ix ; pointer to default tile settings
04868B D1          0137*       pop de ; address to copy to
04868C 01 2A 00 00 0138*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
048690 ED B0       0139*       ldir ; copies defaults to new tile record
048692 DD 2A F1 82 0140*       ld ix,(tile_table_pointer) ; restore pointer to new tile record
       04          
048697 C9          0141*       ret
048698             0142*   ; end spawn_active_tile_from_tile
048698             0074        include "tile_crater.inc"
048698             0001*   crater_defaults:
048698 10          0002*       db tile_crater          ; type
048699 05 01 00    0003*       dl BUF_EXPLOSION_A      ; base_bufferId
04869C B4 86 04    0004*       dl move_crater          ; move_program
04869F 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
0486A0 10          0006*       db 16                   ; dim_x
0486A1 10          0007*       db 16                   ; dim_y
0486A2 01          0008*       db 1                    ; num_orientations
0486A3 04          0009*       db 4                    ; num_animations
0486A4 05          0010*       db 5	                ; animation
0486A5 08          0011*       db 8                    ; animation_timer
0486A6 00          0012*       db 0                    ; move_timer
0486A7 00          0013*       db 0                    ; move_step
0486A8 00          0014*       db 0                    ; points
0486A9 00          0015*       db 0                    ; shield_damage
0486AA 00          0016*       db 0                    ; frame
0486AB             0017*   
0486AB             0018*   activate_crater:
0486AB 21 98 86 04 0019*       ld hl,crater_defaults
0486AF CD 81 86 04 0020*       call spawn_active_tile_from_tile
0486B3             0021*   ; other specific initialization
0486B3 C9          0022*       ret
0486B4             0023*   ; end activate_crater
0486B4             0024*   
0486B4             0025*   move_crater:
0486B4 CD E0 85 04 0026*       call move_active_tile
0486B8 CA 7B 83 04 0027*       jp z,table_deactivate_tile
0486BC             0028*   ; do animation
0486BC FD 35 23    0029*       dec (iy+tile_animation_timer)
0486BF C0          0030*       ret nz ; not time to animate
0486C0 FD 35 22    0031*       dec (iy+sprite_animation) ; check whether time to transition to crater
0486C3 CC D9 86 04 0032*       call z,@make_crater
0486C7 3E 08       0033*       ld a,8
0486C9 FD 77 23    0034*       ld (iy+tile_animation_timer),a
0486CC FD 7E 28    0035*       ld a,(iy+tile_frame)
0486CF 3C          0036*       inc a
0486D0 E6 03       0037*       and %00000011 ; modulo 4
0486D2 FD 77 28    0038*       ld (iy+tile_frame),a
0486D5 C3 34 86 04 0039*       jp draw_active_tile
0486D9             0040*   @make_crater:
0486D9 21 01 01 00 0041*       ld hl,BUF_CRATER_0
0486DD FD 2F 17    0042*       ld (iy+tile_base_bufferId),hl
0486E0 3E FF       0043*       ld a,-1 ; will wrap to zero on return
0486E2 FD 77 28    0044*       ld (iy+tile_frame),a
0486E5 C9          0045*       ret
0486E6             0046*   ; end move_crater
0486E6             0075        include "tile_electrode.inc"
0486E6             0001*   electrode_defaults:
0486E6 09          0002*       db 9                    ; type
0486E7 74 01 00    0003*       dl BUF_TILE_BLANK       ; base_bufferId
0486EA 02 87 04    0004*       dl move_electrode       ; move_program
0486ED 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
0486EE 10          0006*       db 16                   ; dim_x
0486EF 10          0007*       db 16                   ; dim_y
0486F0 01          0008*       db 1                    ; num_orientations
0486F1 01          0009*       db 1                    ; num_animations
0486F2 00          0010*       db 0                    ; animation
0486F3 00          0011*       db 0                    ; animation_timer
0486F4 00          0012*       db 0                    ; move_timer
0486F5 00          0013*       db 0                    ; move_step
0486F6 05          0014*       db 5                    ; points
0486F7 FC          0015*       db -4                   ; shield_damage
0486F8 00          0016*       db 0                    ; frame
0486F9             0017*   
0486F9             0018*   activate_electrode:
0486F9 21 E6 86 04 0019*       ld hl,electrode_defaults
0486FD             0020*   ; get next available active tile id
0486FD CD B4 83 04 0021*       call spawn_active_tile
048701             0022*       ; ret nc ; no carry means no free active tile slots, so we go home
048701             0023*   ; other specific initialization
048701 C9          0024*       ret
048702             0025*   ; end activate_electrode
048702             0026*   
048702             0027*   move_electrode:
048702 CD E0 85 04 0028*       call move_active_tile
048706 CA 7B 83 04 0029*       jp z,table_deactivate_tile
04870A CD CA 1E 04 0030*       call check_enemy_collision_player
04870E C2 1A 87 04 0031*       jp nz,@laser ; no collision so check laser collision
048712 CD 88 79 04 0032*       call update_shields
048716 C3 27 87 04 0033*       jp kill_electrode
04871A             0034*   @laser:
04871A CD BE 1E 04 0035*       call check_enemy_collision_laser
04871E C0          0036*       ret nz ; no collision so we're done
04871F CD 2E 79 04 0037*       call update_score
048723 C3 27 87 04 0038*       jp kill_electrode
048727             0039*   ; end move_electrode
048727             0040*   
048727             0041*   kill_electrode:
048727             0042*   ; activate blank tile bitmap
048727 21 74 01 00 0043*       ld hl,BUF_TILE_BLANK
04872B CD 74 13 04 0044*       call vdu_buff_select
04872F             0045*   ; save y-coordinate of collision tile
04872F FD 27 04    0046*       ld hl,(iy+tile_y)
048732 22 E1 87 04 0047*       ld (@tile_y),hl
048736             0048*   ; initialize pointers
048736 2A EE 82 04 0049*       ld hl,(tile_stack_pointer)
04873A ED 27       0050*       ld hl,(hl) ; pointer to this tile table record
04873C E5          0051*       push hl ; save pointer to this tile table record
04873D DD 21 EB 7F 0052*       ld ix,tile_stack ; set ix to first record in table
       04          
048742             0053*   @check_loop:
048742 DD 22 DE 87 0054*       ld (@tile_stack_pointer),ix ; update stack pointer
       04          
048747 DD 7E 02    0055*       ld a,(ix+2)
04874A B7          0056*       or a ; will be zero if at end of stack
04874B CA B7 87 04 0057*       jp z,@done ; end of stack so we're done
04874F             0058*   ; point ix to tile record
04874F DD 37 00    0059*       ld ix,(ix) ; ix points to the tile record being checked
048752             0060*   ; check top bit of tile_type to see if tile is just spawned
048752 DD CB 16 7E 0061*       bit 7,(ix+tile_type)
048756 C2 AB 87 04 0062*       jp nz,@next_record ; if just spawned, skip to next record
04875A             0063*   ; check sprite_alive bit to see if tile is active
04875A DD CB 1D 76 0064*       bit sprite_alive,(ix+sprite_collisions)
04875E C8          0065*       ret z ; end of stack so we're done
04875F             0066*   ; check tile type
04875F DD 7E 16    0067*       ld a,(ix+tile_type)
048762 FE 0A       0068*       cp tile_lightning ; check if tile is lightning
048764 C2 AB 87 04 0069*       jp nz,@next_record ; if not an electrode, skip to next record
048768             0070*   ; check tile position
048768 FD 2A DE 87 0071*       ld iy,(@tile_stack_pointer)
       04          
04876D FD 22 EE 82 0072*       ld (tile_stack_pointer),iy
       04          
048772 FD 37 00    0073*       ld iy,(iy) ; pointer to tile record to kill
048775 FD 22 F1 82 0074*       ld (tile_table_pointer),iy
       04          
04877A DD 27 04    0075*       ld hl,(ix+tile_y)
04877D ED 5B E1 87 0076*       ld de,(@tile_y)
       04          
048782 B7          0077*       or a ; clear carry
048783 E5          0078*       push hl
048784 ED 52       0079*       sbc hl,de
048786 E1          0080*       pop hl
048787 CA 97 87 04 0081*       jp z,@kill_it
04878B 01 00 01 00 0082*       ld bc,1*256
04878F 09          0083*       add hl,bc
048790 B7          0084*       or a
048791 ED 52       0085*       sbc hl,de
048793 C2 AB 87 04 0086*       jp nz,@next_record
048797             0087*   @kill_it: ; deactivate tile and replace with inactive blank tile
048797 FD 07 01    0088*       ld bc,(iy+tile_x) ; get x position (ud.e already has y-position)
04879A CD EC 16 04 0089*       call vdu_plot_bmp168 ; plot blank tile (bitmap was activated at beginning of proc)
04879E CD 7B 83 04 0090*       call table_deactivate_tile
0487A2 DD 2A DE 87 0091*       ld ix,(@tile_stack_pointer) ; get back stack pointer
       04          
0487A7 C3 42 87 04 0092*       jp @check_loop ; deactivate tile naturally advances to next record
0487AB             0093*    ; get back stack pointer and loop
0487AB             0094*   @next_record:
0487AB DD 2A DE 87 0095*       ld ix,(@tile_stack_pointer)
       04          
0487B0 ED 32 03    0096*       lea ix,ix+3 ; next tile stack record
0487B3 C3 42 87 04 0097*       jp @check_loop ; loop until we've checked all the records
0487B7             0098*   @done:
0487B7             0099*   ; find this tile record in the tile stack
0487B7 D1          0100*       pop de ; restore pointer to this tile table record (was hl)
0487B8 FD 21 EB 7F 0101*       ld iy,tile_stack ; set ix to first record in table
       04          
0487BD             0102*   @find_loop:
0487BD FD 27 00    0103*       ld hl,(iy)
0487C0 ED 33 03    0104*       lea iy,iy+3 ; next tile stack record
0487C3 B7          0105*       or a ; clear carry
0487C4 ED 52       0106*       sbc hl,de ; if not the same address, loop
0487C6 C2 BD 87 04 0107*       jp nz,@find_loop
0487CA ED 33 FD    0108*       lea iy,iy-3 ; back up to the record we want
0487CD FD 22 EE 82 0109*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
0487D2 FD 37 00    0110*       ld iy,(iy) ; iy points to the tile stack record
0487D5 FD 22 F1 82 0111*       ld (tile_table_pointer),iy ; set pointer to this tile record
       04          
0487DA C3 AB 86 04 0112*       jp activate_crater
0487DE EB 7F 04    0113*   @tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
0487E1 00 00 00    0114*   @tile_y: dl 0 ; y position of tiles to kill
0487E4             0115*   ; end move_electrode
0487E4             0076        include "tile_lightning.inc"
0487E4             0001*   lightning_defaults:
0487E4 0A          0002*       db tile_lightning       ; type
0487E5 4C 01 00    0003*       dl BUF_LIGHTNING_H_0    ; base_bufferId
0487E8 01 88 04    0004*       dl move_lightning       ; move_program
0487EB 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
0487EC 10          0006*       db 16                   ; dim_x
0487ED 10          0007*       db 16                   ; dim_y
0487EE 01          0008*       db 1                    ; num_orientations
0487EF 02          0009*       db 2                    ; num_animations
0487F0 00          0010*       db 0                    ; animation
0487F1 08          0011*       db 8                    ; animation_timer
0487F2 00          0012*       db 0                    ; move_timer
0487F3 00          0013*       db 0                    ; move_step
0487F4 00          0014*       db 0                    ; points
0487F5 FF          0015*       db -1                    ; shield_damage
0487F6 00          0016*       db 0                    ; frame
0487F7             0017*   
0487F7             0018*   activate_lightning:
0487F7 21 E4 87 04 0019*       ld hl,lightning_defaults
0487FB             0020*   ; get next available active tile id
0487FB CD B4 83 04 0021*       call spawn_active_tile
0487FF D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
048800             0023*   ; other specific initialization
048800 C9          0024*       ret
048801             0025*   ; end activate_lightning
048801             0026*   
048801             0027*   move_lightning:
048801 CD E0 85 04 0028*       call move_active_tile
048805 CA 7B 83 04 0029*       jp z,table_deactivate_tile
048809 CD BE 1E 04 0030*       call check_enemy_collision_laser ; kills laser on collision but does not die
04880D CD CA 1E 04 0031*       call check_enemy_collision_player
048811 C2 19 88 04 0032*       jp nz,@animate ; no collision so do animation
048815 CD 88 79 04 0033*       call update_shields
048819             0034*   @animate:
048819 FD 35 23    0035*       dec (iy+tile_animation_timer)
04881C C0          0036*       ret nz ; not time to animate
04881D             0037*   ; reset the animation timer and bump animation
04881D 3E 08       0038*       ld a,8
04881F FD 77 23    0039*       ld (iy+tile_animation_timer),a
048822 FD 7E 28    0040*       ld a,(iy+tile_frame)
048825 3C          0041*       inc a
048826 E6 01       0042*       and %00000001 ; modulo 1
048828 FD 77 28    0043*       ld (iy+tile_frame),a
04882B C3 34 86 04 0044*       jp draw_active_tile
04882F C9          0045*       ret
048830             0077        include "tile_pad_small.inc"
048830             0001*   pad_small_defaults:
048830 01          0002*       db tile_pad_small       ; type
048831 75 01 00    0003*       dl BUF_TILE_PAD_0       ; base_bufferId
048834 56 88 04    0004*       dl move_pad_small       ; move_program
048837 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
048838 10          0006*       db 16                   ; dim_x
048839 10          0007*       db 16                   ; dim_y
04883A 01          0008*       db 1                    ; num_orientations
04883B 01          0009*       db 1                    ; num_animations
04883C 00          0010*       db 0                    ; animation
04883D 10          0011*       db 16                   ; animation_timer
04883E 00          0012*       db 0                    ; move_timer
04883F 00          0013*       db 0                    ; move_step
048840 05          0014*       db 5                    ; points
048841 00          0015*       db 0                    ; shield_damage
048842 00          0016*       db 0                    ; frame
048843             0017*   
048843             0018*   activate_pad_small:
048843 21 30 88 04 0019*       ld hl,pad_small_defaults
048847             0020*   ; get next available active tile id
048847 CD B4 83 04 0021*       call spawn_active_tile
04884B D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
04884C             0023*   ; other specific initialization
04884C CD FB 04 04 0024*       call rand_8     ; snag a random number
048850 E6 1F       0025*       and %00011111 ; keep only 5 lowest bits (max 31)
048852 DD 77 24    0026*       ld (ix+tile_move_timer),a ; when this hits zero,will spawn a seeker
048855 C9          0027*       ret
048856             0028*   ; end activate_pad_small
048856             0029*   
048856             0030*   move_pad_small:
048856 CD E0 85 04 0031*       call move_active_tile
04885A CA 7B 83 04 0032*       jp z,table_deactivate_tile
04885E CD BE 1E 04 0033*       call check_enemy_collision_laser
048862 CA 93 88 04 0034*       jp z,kill_pad_small
048866             0035*   ; do animation
048866 FD 35 23    0036*       dec (iy+tile_animation_timer)
048869 C2 7F 88 04 0037*       jp nz,@F
04886D 3E 10       0038*       ld a,16
04886F FD 77 23    0039*       ld (iy+tile_animation_timer),a
048872 FD 7E 28    0040*       ld a,(iy+tile_frame)
048875 3C          0041*       inc a
048876 E6 07       0042*       and %00000111 ; modulo 8
048878 FD 77 28    0043*       ld (iy+tile_frame),a
04887B CD 34 86 04 0044*       call draw_active_tile
04887F             0045*   @@: ; check whether it is time to spawn a seeker
04887F FD 35 24    0046*       dec (iy+tile_move_timer)
048882 C0          0047*       ret nz
048883             0048*   ; spwan a seeker
048883 CD C7 1F 04 0049*       call enemy_spawn_seeker
048887             0050*       ; fall through to reset move timer
048887             0051*   pad_small_reset_move_timer:
048887 CD FB 04 04 0052*       call rand_8     ; snag a random number
04888B E6 1F       0053*       and %00011111   ; keep only 5 lowest bits (max 31)
04888D C6 40       0054*       add a,64 ; range is now 64-127
04888F FD 77 24    0055*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
048892 C9          0056*       ret
048893             0057*   
048893             0058*   kill_pad_small:
048893 CD 2E 79 04 0059*       call update_score
048897 C3 AB 86 04 0060*       jp activate_crater
04889B             0061*   ; end move_pad_small
04889B             0078        include "tile_turret_fireball.inc"
04889B             0001*   turret_fireball_defaults:
04889B 02          0002*       db enemy_ground         ; type
04889C 7D 01 00    0003*       dl BUF_TURRET_000       ; base_bufferId
04889F C1 88 04    0004*       dl move_turret_fireball ; move_program
0488A2 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
0488A3 10          0006*       db 16                   ; dim_x
0488A4 10          0007*       db 16                   ; dim_y
0488A5 20          0008*       db 32                   ; num_orientations
0488A6 01          0009*       db 1                    ; num_animations
0488A7 00          0010*       db 0                    ; animation
0488A8 00          0011*       db 0                    ; animation_timer
0488A9 00          0012*       db 0                    ; move_timer
0488AA 00          0013*       db 0                    ; move_step
0488AB 05          0014*       db 5                    ; points
0488AC 00          0015*       db 0                    ; shield_damage
0488AD 00          0016*       db 0                    ; frame
0488AE             0017*   
0488AE             0018*   activate_turret_fireball:
0488AE 21 9B 88 04 0019*       ld hl,turret_fireball_defaults
0488B2             0020*   ; get next available active tile id
0488B2 CD B4 83 04 0021*       call spawn_active_tile
0488B6 D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
0488B7             0023*   ; other specific initialization
0488B7 CD FB 04 04 0024*       call rand_8     ; snag a random number
0488BB E6 1F       0025*       and %00011111 ; keep only 5 lowest bits (max 31)
0488BD DD 77 24    0026*       ld (ix+tile_move_timer),a ; when this hits zero,will spawn a fireball
0488C0 C9          0027*       ret
0488C1             0028*   ; end activate_turret_fireball
0488C1             0029*   
0488C1             0030*   move_turret_fireball:
0488C1 CD E0 85 04 0031*       call move_active_tile
0488C5 CA 7B 83 04 0032*       jp z,table_deactivate_tile
0488C9 CD BE 1E 04 0033*       call check_enemy_collision_laser
0488CD CA 00 89 04 0034*       jp z,kill_turret_fireball
0488D1             0035*   ; target player
0488D1 CD 26 7F 04 0036*       call tile_orientation_to_player
0488D5 21 00 04 00 0037*       ld hl,speed_fireball
0488D9 22 53 7F 04 0038*       ld (Vp),hl ; param for targeting_computer
0488DD CD 6B 7F 04 0039*       call targeting_computer
0488E1 FD 2F 10    0040*       ld (iy+tile_heading),hl ; save active tile heading
0488E4 CD 52 84 04 0041*       call tile_frame_heading
0488E8 CD 34 86 04 0042*       call draw_active_tile
0488EC             0043*   ; check whether it is time to spawn a fireball
0488EC FD 35 24    0044*       dec (iy+tile_move_timer)
0488EF C0          0045*       ret nz
0488F0             0046*   ; spwan a fireball
0488F0 CD 0E 1F 04 0047*       call enemy_spawn_fireball
0488F4             0048*       ; fall through to reset move timer
0488F4             0049*   turret_fireball_reset_move_timer:
0488F4 CD FB 04 04 0050*       call rand_8     ; snag a random number
0488F8 E6 1F       0051*       and %00011111   ; keep only 5 lowest bits (max 31)
0488FA C6 18       0052*       add a,24 ; range is now 24-55
0488FC FD 77 24    0053*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
0488FF C9          0054*       ret
048900             0055*   
048900             0056*   kill_turret_fireball:
048900 CD 2E 79 04 0057*       call update_score
048904 C3 AB 86 04 0058*       jp activate_crater
048908             0059*   ; end move_turret_fireball
048908             0079        include "debug.inc"
048908             0001*   printHexA:
048908 F5          0002*       push af
048909 C5          0003*       push bc
04890A CD 91 00 04 0004*       call printHex8
04890E 3E 20       0005*       ld a,' '
048910 5B D7       0006*       rst.lil 10h
048912 C1          0007*       pop bc
048913 F1          0008*       pop af
048914 C9          0009*       ret
048915             0010*   
048915             0011*   printHexHL:
048915 F5          0012*       push af
048916 C5          0013*       push bc
048917 CD 8B 00 04 0014*       call printHex16
04891B 3E 20       0015*       ld a,' '
04891D 5B D7       0016*       rst.lil 10h
04891F C1          0017*       pop bc
048920 F1          0018*       pop af
048921 C9          0019*       ret
048922             0020*   
048922             0021*   printHexUHL:
048922 F5          0022*       push af
048923 C5          0023*       push bc
048924 CD 83 00 04 0024*       call printHex24
048928 3E 20       0025*       ld a,' '
04892A 5B D7       0026*       rst.lil 10h
04892C C1          0027*       pop bc
04892D F1          0028*       pop af
04892E C9          0029*       ret
04892F             0030*   
04892F             0031*   printHexAUHL:
04892F F5          0032*       push af
048930 C5          0033*       push bc
048931 CD 91 00 04 0034*       call printHex8
048935 3E 2E       0035*       ld a,'.'
048937 5B D7       0036*       rst.lil 10h
048939 CD 83 00 04 0037*       call printHex24
04893D 3E 20       0038*       ld a,' '
04893F 5B D7       0039*       rst.lil 10h
048941 C1          0040*       pop bc
048942 F1          0041*       pop af
048943 C9          0042*       ret
048944             0043*   
048944             0044*   printHexABHL:
048944             0045*   ; preserve registers
048944 C5          0046*       push bc ; b will be ok c will not
048945 F5          0047*       push af ; will get totally destroyed
048946             0048*   ; print a
048946 CD 91 00 04 0049*       call printHex8
04894A             0050*   ; print b
04894A 78          0051*       ld a,b
04894B CD 91 00 04 0052*       call printHex8
04894F             0053*   ; print hl
04894F CD 8B 00 04 0054*       call printHex16
048953             0055*   ; restore registers
048953 F1          0056*       pop af
048954 C1          0057*       pop bc
048955 C9          0058*       ret
048956             0059*   
048956             0060*   printHexBHL:
048956             0061*   ; preserve registers
048956 C5          0062*       push bc ; b will be ok c will not
048957 F5          0063*       push af ; will get totally destroyed
048958             0064*   ; print b
048958 78          0065*       ld a,b
048959 CD 91 00 04 0066*       call printHex8
04895D             0067*   ; print hl
04895D CD 8B 00 04 0068*       call printHex16
048961             0069*   ; restore registers
048961 F1          0070*       pop af
048962 C1          0071*       pop bc
048963 C9          0072*       ret
048964             0073*   
048964             0074*   printHexCDE:
048964             0075*   ; preserve registers
048964 C5          0076*       push bc ; b will be ok c will not
048965 F5          0077*       push af ; will get totally destroyed
048966             0078*   ; print c
048966 79          0079*       ld a,c
048967 CD 91 00 04 0080*       call printHex8
04896B             0081*   ; print de
04896B EB          0082*       ex de,hl
04896C CD 8B 00 04 0083*       call printHex16
048970 EB          0084*       ex de,hl
048971             0085*   ; restore registers
048971 F1          0086*       pop af
048972 C1          0087*       pop bc
048973 C9          0088*       ret
048974             0089*   
048974             0090*   printHexUIX:
048974             0091*   ; store everything in scratch
048974 22 18 03 04 0092*       ld (uhl),hl
048978 ED 43 1B 03 0093*       ld (ubc),bc
       04          
04897D ED 53 1E 03 0094*       ld (ude),de
       04          
048982 DD 22 21 03 0095*       ld (uix),ix
       04          
048987 FD 22 24 03 0096*       ld (uiy),iy
       04          
04898C F5          0097*       push af ; fml
04898D             0098*   
04898D 21 AF 02 04 0099*       ld hl,str_ixu
048991 CD 63 00 04 0100*       call printString
048995 2A 21 03 04 0101*       ld hl,(uix)
048999 CD 83 00 04 0102*       call printHex24
04899D CD 78 00 04 0103*       call printNewLine
0489A1             0104*   
0489A1             0105*   ; restore everything
0489A1 2A 18 03 04 0106*       ld hl, (uhl)
0489A5 ED 4B 1B 03 0107*       ld bc, (ubc)
       04          
0489AA ED 5B 1E 03 0108*       ld de, (ude)
       04          
0489AF DD 2A 21 03 0109*       ld ix, (uix)
       04          
0489B4 FD 2A 24 03 0110*       ld iy, (uiy)
       04          
0489B9 F1          0111*       pop af
0489BA             0112*   ; all done
0489BA C9          0113*       ret
0489BB             0114*   
0489BB             0115*   
0489BB             0116*   ; print registers to screen in hexidecimal format
0489BB             0117*   ; inputs: none
0489BB             0118*   ; outputs: values of every register printed to screen
0489BB             0119*   ;    values of each register in global scratch memory
0489BB             0120*   ; destroys: nothing
0489BB             0121*   stepRegistersHex:
0489BB             0122*   ; store everything in scratch
0489BB 22 18 03 04 0123*       ld (uhl),hl
0489BF ED 43 1B 03 0124*       ld (ubc),bc
       04          
0489C4 ED 53 1E 03 0125*       ld (ude),de
       04          
0489C9 DD 22 21 03 0126*       ld (uix),ix
       04          
0489CE FD 22 24 03 0127*       ld (uiy),iy
       04          
0489D3 F5          0128*       push af ; fml
0489D4 E1          0129*       pop hl ; thanks, zilog
0489D5 22 15 03 04 0130*       ld (uaf),hl
0489D9 F5          0131*       push af ; dammit
0489DA             0132*   
0489DA             0133*   ; home the cursor
0489DA             0134*       ; call vdu_home_cursor
0489DA             0135*   
0489DA             0136*   ; print each register
0489DA 21 9B 02 04 0137*       ld hl,str_afu
0489DE CD 63 00 04 0138*       call printString
0489E2 2A 15 03 04 0139*       ld hl,(uaf)
0489E6 CD 83 00 04 0140*       call printHex24
0489EA CD 78 00 04 0141*       call printNewLine
0489EE             0142*   
0489EE 21 A0 02 04 0143*       ld hl,str_hlu
0489F2 CD 63 00 04 0144*       call printString
0489F6 2A 18 03 04 0145*       ld hl,(uhl)
0489FA CD 83 00 04 0146*       call printHex24
0489FE CD 78 00 04 0147*       call printNewLine
048A02             0148*   
048A02 21 A5 02 04 0149*       ld hl,str_bcu
048A06 CD 63 00 04 0150*       call printString
048A0A 2A 1B 03 04 0151*       ld hl,(ubc)
048A0E CD 83 00 04 0152*       call printHex24
048A12 CD 78 00 04 0153*       call printNewLine
048A16             0154*   
048A16 21 AA 02 04 0155*       ld hl,str_deu
048A1A CD 63 00 04 0156*       call printString
048A1E 2A 1E 03 04 0157*       ld hl,(ude)
048A22 CD 83 00 04 0158*       call printHex24
048A26 CD 78 00 04 0159*       call printNewLine
048A2A             0160*   
048A2A 21 AF 02 04 0161*       ld hl,str_ixu
048A2E CD 63 00 04 0162*       call printString
048A32 2A 21 03 04 0163*       ld hl,(uix)
048A36 CD 83 00 04 0164*       call printHex24
048A3A CD 78 00 04 0165*       call printNewLine
048A3E             0166*   
048A3E 21 B4 02 04 0167*       ld hl,str_iyu
048A42 CD 63 00 04 0168*       call printString
048A46 2A 24 03 04 0169*       ld hl,(uiy)
048A4A CD 83 00 04 0170*       call printHex24
048A4E CD 78 00 04 0171*       call printNewLine
048A52             0172*   
048A52             0173*       ; call vsync
048A52             0174*   
048A52 CD 78 00 04 0175*       call printNewLine
048A56             0176*   
048A56             0177*   ; check for right shift key and quit if pressed
048A56             0178*       MOSCALL mos_getkbmap
048A56 3E 1E       0001*M1 			LD	A, function
048A58 5B CF       0002*M1 			RST.LIL	08h
048A5A             0179*   @stayhere:
048A5A             0180*   ; 7 RightShift
048A5A DD CB 00 76 0181*       bit 6,(ix+0)
048A5E 20 02       0182*       jr nz,@RightShift
048A60 18 F8       0183*       jr @stayhere
048A62             0184*   @RightShift:
048A62 DD CB 0E 86 0185*       res 0,(ix+14) ; debounce the key (hopefully)
048A66 3E 80       0186*       ld a,%10000000
048A68             0187*       ; call multiPurposeDelay
048A68             0188*   
048A68             0189*   ; restore everything
048A68 2A 18 03 04 0190*       ld hl, (uhl)
048A6C ED 4B 1B 03 0191*       ld bc, (ubc)
       04          
048A71 ED 5B 1E 03 0192*       ld de, (ude)
       04          
048A76 DD 2A 21 03 0193*       ld ix, (uix)
       04          
048A7B FD 2A 24 03 0194*       ld iy, (uiy)
       04          
048A80 F1          0195*       pop af
048A81             0196*   ; all done
048A81 C9          0197*       ret
048A82             0198*   
048A82             0199*   ; print registers to screen in hexidecimal format
048A82             0200*   ; inputs: none
048A82             0201*   ; outputs: values of every register printed to screen
048A82             0202*   ;    values of each register in global scratch memory
048A82             0203*   ; destroys: nothing
048A82             0204*   dumpRegistersHex:
048A82             0205*   ; store everything in scratch
048A82 22 18 03 04 0206*       ld (uhl),hl
048A86 ED 43 1B 03 0207*       ld (ubc),bc
       04          
048A8B ED 53 1E 03 0208*       ld (ude),de
       04          
048A90 DD 22 21 03 0209*       ld (uix),ix
       04          
048A95 FD 22 24 03 0210*       ld (uiy),iy
       04          
048A9A F5          0211*       push af ; fml
048A9B E1          0212*       pop hl ; thanks, zilog
048A9C 22 15 03 04 0213*       ld (uaf),hl
048AA0 F5          0214*       push af ; dammit
048AA1             0215*   
048AA1             0216*   ; home the cursor
048AA1             0217*       ; call vdu_home_cursor
048AA1             0218*       ; call printNewLine
048AA1             0219*   
048AA1             0220*   ; print each register
048AA1 21 9B 02 04 0221*       ld hl,str_afu
048AA5 CD 63 00 04 0222*       call printString
048AA9 2A 15 03 04 0223*       ld hl,(uaf)
048AAD CD 83 00 04 0224*       call printHex24
048AB1 CD 78 00 04 0225*       call printNewLine
048AB5             0226*   
048AB5 21 A0 02 04 0227*       ld hl,str_hlu
048AB9 CD 63 00 04 0228*       call printString
048ABD 2A 18 03 04 0229*       ld hl,(uhl)
048AC1 CD 83 00 04 0230*       call printHex24
048AC5 CD 78 00 04 0231*       call printNewLine
048AC9             0232*   
048AC9 21 A5 02 04 0233*       ld hl,str_bcu
048ACD CD 63 00 04 0234*       call printString
048AD1 2A 1B 03 04 0235*       ld hl,(ubc)
048AD5 CD 83 00 04 0236*       call printHex24
048AD9 CD 78 00 04 0237*       call printNewLine
048ADD             0238*   
048ADD 21 AA 02 04 0239*       ld hl,str_deu
048AE1 CD 63 00 04 0240*       call printString
048AE5 2A 1E 03 04 0241*       ld hl,(ude)
048AE9 CD 83 00 04 0242*       call printHex24
048AED CD 78 00 04 0243*       call printNewLine
048AF1             0244*   
048AF1 21 AF 02 04 0245*       ld hl,str_ixu
048AF5 CD 63 00 04 0246*       call printString
048AF9 2A 21 03 04 0247*       ld hl,(uix)
048AFD CD 83 00 04 0248*       call printHex24
048B01 CD 78 00 04 0249*       call printNewLine
048B05             0250*   
048B05 21 B4 02 04 0251*       ld hl,str_iyu
048B09 CD 63 00 04 0252*       call printString
048B0D 2A 24 03 04 0253*       ld hl,(uiy)
048B11 CD 83 00 04 0254*       call printHex24
048B15             0255*   
048B15 CD 78 00 04 0256*       call printNewLine
048B19 CD 78 00 04 0257*       call printNewLine
048B1D             0258*   ; restore everything
048B1D 2A 18 03 04 0259*       ld hl, (uhl)
048B21 ED 4B 1B 03 0260*       ld bc, (ubc)
       04          
048B26 ED 5B 1E 03 0261*       ld de, (ude)
       04          
048B2B DD 2A 21 03 0262*       ld ix, (uix)
       04          
048B30 FD 2A 24 03 0263*       ld iy, (uiy)
       04          
048B35 F1          0264*       pop af
048B36             0265*   ; all done
048B36 C9          0266*       ret
048B37             0267*   
048B37             0268*   dumpRegistersHexPrime:
048B37 D9          0269*       exx
048B38 08          0270*       ex af,af'
048B39 CD 82 8A 04 0271*       call dumpRegistersHex
048B3D 08          0272*       ex af,af'
048B3E D9          0273*       exx
048B3F C9          0274*       ret
048B40             0275*   
048B40             0276*   ; additionally dump prime registers
048B40             0277*   ; inputs: none
048B40             0278*   ; outputs: values of every register printed to screen
048B40             0279*   ; destroys: nothing
048B40             0280*   dumpRegistersHexAll:
048B40 CD 82 8A 04 0281*       call dumpRegistersHex
048B44 08          0282*       ex af,af'
048B45 D9          0283*       exx
048B46 CD 82 8A 04 0284*       call dumpRegistersHex
048B4A 08          0285*       ex af,af'
048B4B D9          0286*       exx
048B4C C9          0287*       ret
048B4D             0288*   
048B4D             0289*   ; print hlu to screen in hexidecimal format
048B4D             0290*   ; inputs: none
048B4D             0291*   ; destroys: nothing
048B4D             0292*   print_hex_hl:
048B4D F5          0293*       push af
048B4E E5          0294*       push hl
048B4F 21 A0 02 04 0295*       ld hl,str_hlu
048B53 CD 63 00 04 0296*       call printString
048B57 E1          0297*       pop hl
048B58 E5          0298*       push hl
048B59 CD 83 00 04 0299*       call printHex24
048B5D 3E 20       0300*       ld a,' '
048B5F 5B D7       0301*       rst.lil 10h
048B61 E1          0302*       pop hl
048B62 F1          0303*       pop af
048B63 C9          0304*       ret
048B64             0305*   
048B64             0306*   ; print bcu to screen in hexidecimal format
048B64             0307*   ; inputs: none
048B64             0308*   ; destroys: nothing
048B64             0309*   print_hex_bc:
048B64 F5          0310*       push af
048B65 E5          0311*       push hl
048B66 C5          0312*       push bc
048B67 21 A5 02 04 0313*       ld hl,str_bcu
048B6B CD 63 00 04 0314*       call printString
048B6F E1          0315*       pop hl
048B70 E5          0316*       push hl
048B71 CD 83 00 04 0317*       call printHex24
048B75 3E 20       0318*       ld a,' '
048B77 5B D7       0319*       rst.lil 10h
048B79 C1          0320*       pop bc
048B7A E1          0321*       pop hl
048B7B F1          0322*       pop af
048B7C C9          0323*       ret
048B7D             0324*   
048B7D             0325*   ; print deu to screen in hexidecimal format
048B7D             0326*   ; inputs: none
048B7D             0327*   ; destroys: nothing
048B7D             0328*   print_hex_de:
048B7D F5          0329*       push af
048B7E E5          0330*       push hl
048B7F D5          0331*       push de
048B80 21 AA 02 04 0332*       ld hl,str_deu
048B84 CD 63 00 04 0333*       call printString
048B88 E1          0334*       pop hl
048B89 E5          0335*       push hl
048B8A CD 83 00 04 0336*       call printHex24
048B8E 3E 20       0337*       ld a,' '
048B90 5B D7       0338*       rst.lil 10h
048B92 D1          0339*       pop de
048B93 E1          0340*       pop hl
048B94 F1          0341*       pop af
048B95 C9          0342*       ret
048B96             0343*   
048B96             0344*   
048B96             0345*   ; inputs: whatever is in the flags register
048B96             0346*   ; outputs: binary representation of flags
048B96             0347*   ;          with a header so we know which is what
048B96             0348*   ; destroys: nothing
048B96             0349*   ; preserves: everything
048B96             0350*   dumpFlags:
048B96             0351*   ; first we curse zilog for not giving direct access to flags
048B96 F5          0352*       push af ; this is so we can send it back unharmed
048B97 F5          0353*       push af ; this is so we can pop it to hl
048B98             0354*   ; store everything in scratch
048B98 22 18 03 04 0355*       ld (uhl),hl
048B9C ED 43 1B 03 0356*       ld (ubc),bc
       04          
048BA1 ED 53 1E 03 0357*       ld (ude),de
       04          
048BA6 DD 22 21 03 0358*       ld (uix),ix
       04          
048BAB FD 22 24 03 0359*       ld (uiy),iy
       04          
048BB0             0360*   ; next we print the header
048BB0 21 DC 8B 04 0361*       ld hl,@header
048BB4 CD 63 00 04 0362*       call printString
048BB8 E1          0363*       pop hl ; flags are now in l
048BB9 7D          0364*       ld a,l ; flags are now in a
048BBA CD 51 02 04 0365*       call printBin8
048BBE CD 78 00 04 0366*       call printNewLine
048BC2             0367*   ; restore everything
048BC2 2A 18 03 04 0368*       ld hl, (uhl)
048BC6 ED 4B 1B 03 0369*       ld bc, (ubc)
       04          
048BCB ED 5B 1E 03 0370*       ld de, (ude)
       04          
048BD0 DD 2A 21 03 0371*       ld ix, (uix)
       04          
048BD5 FD 2A 24 03 0372*       ld iy, (uiy)
       04          
048BDA F1          0373*       pop af ; send her home the way she came
048BDB C9          0374*       ret
048BDC             0375*   ; Bit 7 (S): Sign flag
048BDC             0376*   ; Bit 6 (Z): Zero flag
048BDC             0377*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
048BDC             0378*   ; Bit 4 (H): Half Carry flag
048BDC             0379*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
048BDC             0380*   ; Bit 2 (PV): Parity/Overflow flag
048BDC             0381*   ; Bit 1 (N): Subtract flag
048BDC             0382*   ; Bit 0 (C): Carry flag
048BDC 53 5A 78 48 0383*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
048BE7             0384*   
048BE7             0385*   
048BE7             0386*   ; print bytes from an address to the screen in hexidecimal format
048BE7             0387*   ; inputs: hl = address of first byte to print, a = number of bytes to print
048BE7             0388*   ; outputs: values of each byte printed to screen separated by spaces
048BE7             0389*   ; destroys: nothing
048BE7             0390*   dumpMemoryHex:
048BE7             0391*   ; save registers to the stack
048BE7 C5          0392*       push bc
048BE8 E5          0393*       push hl
048BE9 F5          0394*       push af
048BEA             0395*   
048BEA             0396*   ; print the address and separator
048BEA CD 83 00 04 0397*       call printHex24
048BEE 3E 3A       0398*       ld a,':'
048BF0 5B D7       0399*       rst.lil 10h
048BF2 3E 20       0400*       ld a,' '
048BF4 5B D7       0401*       rst.lil 10h
048BF6             0402*   
048BF6             0403*   ; set b to be our loop counter
048BF6 F1          0404*       pop af
048BF7 47          0405*       ld b,a
048BF8 E1          0406*       pop hl
048BF9 E5          0407*       push hl
048BFA F5          0408*       push af
048BFB             0409*   @loop:
048BFB             0410*   ; print the byte
048BFB 7E          0411*       ld a,(hl)
048BFC CD 91 00 04 0412*       call printHex8
048C00             0413*   ; print a space
048C00 3E 20       0414*       ld a,' '
048C02 5B D7       0415*       rst.lil 10h
048C04 23          0416*       inc hl
048C05 10 F4       0417*       djnz @loop
048C07 CD 78 00 04 0418*       call printNewLine
048C0B             0419*   
048C0B             0420*   ; restore everything
048C0B F1          0421*       pop af
048C0C E1          0422*       pop hl
048C0D C1          0423*       pop bc
048C0E             0424*   
048C0E             0425*   ; all done
048C0E C9          0426*       ret
048C0F             0427*   
048C0F             0428*   
048C0F             0429*   ; print bytes from an address to the screen in binary format
048C0F             0430*   ; inputs: hl = address of first byte to print, a = number of bytes to print
048C0F             0431*   ; outputs: values of each byte printed to screen separated by spaces
048C0F             0432*   ; destroys: nothing
048C0F             0433*   dumpMemoryBin:
048C0F             0434*   ; save all registers to the stack
048C0F F5          0435*       push af
048C10 C5          0436*       push bc
048C11 D5          0437*       push de
048C12 E5          0438*       push hl
048C13 DD E5       0439*       push ix
048C15 FD E5       0440*       push iy
048C17             0441*   
048C17             0442*   ; set b to be our loop counter
048C17 47          0443*       ld b,a
048C18             0444*   @loop:
048C18             0445*   ; print the byte
048C18 7E          0446*       ld a,(hl)
048C19 E5          0447*       push hl
048C1A C5          0448*       push bc
048C1B CD 51 02 04 0449*       call printBin8
048C1F C1          0450*       pop bc
048C20             0451*   ; print a space
048C20 3E 20       0452*       ld a,' '
048C22 5B D7       0453*       rst.lil 10h
048C24 E1          0454*       pop hl
048C25 23          0455*       inc hl
048C26 10 F0       0456*       djnz @loop
048C28 CD 78 00 04 0457*       call printNewLine
048C2C             0458*   
048C2C             0459*   ; restore everything
048C2C FD E1       0460*       pop iy
048C2E DD E1       0461*       pop ix
048C30 E1          0462*       pop hl
048C31 D1          0463*       pop de
048C32 C1          0464*       pop bc
048C33 F1          0465*       pop af
048C34             0466*   ; all done
048C34 C9          0467*       ret
048C35             0468*   
048C35             0469*   ; print bytes from an address to the screen in binary format
048C35             0470*   ; with the bits of each byte in reverse order (lsb first)
048C35             0471*   ; inputs: hl = address of first byte to print, a = number of bytes to print
048C35             0472*   ; outputs: values of each byte printed to screen separated by spaces
048C35             0473*   ; destroys: nothing
048C35             0474*   dumpMemoryBinRev:
048C35             0475*   ; save all registers to the stack
048C35 F5          0476*       push af
048C36 C5          0477*       push bc
048C37 D5          0478*       push de
048C38 E5          0479*       push hl
048C39 DD E5       0480*       push ix
048C3B FD E5       0481*       push iy
048C3D             0482*   
048C3D             0483*   ; set b to be our loop counter
048C3D 47          0484*       ld b,a
048C3E             0485*   @loop:
048C3E             0486*   ; print the byte
048C3E 7E          0487*       ld a,(hl)
048C3F E5          0488*       push hl
048C40 C5          0489*       push bc
048C41 CD 76 02 04 0490*       call printBin8Rev
048C45 C1          0491*       pop bc
048C46             0492*   ; print a space
048C46 3E 20       0493*       ld a,' '
048C48 5B D7       0494*       rst.lil 10h
048C4A E1          0495*       pop hl
048C4B 23          0496*       inc hl
048C4C 10 F0       0497*       djnz @loop
048C4E CD 78 00 04 0498*       call printNewLine
048C52             0499*   
048C52             0500*   ; restore everything
048C52 FD E1       0501*       pop iy
048C54 DD E1       0502*       pop ix
048C56 E1          0503*       pop hl
048C57 D1          0504*       pop de
048C58 C1          0505*       pop bc
048C59 F1          0506*       pop af
048C5A             0507*   ; all done
048C5A C9          0508*       ret
048C5B             0509*   
048C5B             0510*   DEBUG_PRINT:
048C5B             0511*       PUSH_ALL
048C5B 08          0001*M1     ex af,af'
048C5C D9          0002*M1     exx
048C5D F5          0003*M1     push af
048C5E E5          0004*M1     push hl
048C5F C5          0005*M1     push bc
048C60 D5          0006*M1     push de
048C61             0007*M1 
048C61 08          0008*M1     ex af,af'
048C62 D9          0009*M1     exx
048C63 F5          0010*M1     push af
048C64 E5          0011*M1     push hl
048C65 C5          0012*M1     push bc
048C66 D5          0013*M1     push de
048C67 DD E5       0014*M1     push ix
048C69 FD E5       0015*M1     push iy
048C6B 0E 00       0512*       ld c,0 ; X
048C6D 06 00       0513*       ld b,0 ; Y
048C6F CD 73 12 04 0514*       call vdu_move_cursor
048C73             0515*       POP_ALL
048C73 FD E1       0001*M1     pop iy
048C75 DD E1       0002*M1     pop ix
048C77 D1          0003*M1     pop de
048C78 C1          0004*M1     pop bc
048C79 E1          0005*M1     pop hl
048C7A F1          0006*M1     pop af
048C7B 08          0007*M1     ex af,af'
048C7C D9          0008*M1     exx
048C7D             0009*M1 
048C7D D1          0010*M1     pop de
048C7E C1          0011*M1     pop bc
048C7F E1          0012*M1     pop hl
048C80 F1          0013*M1     pop af
048C81 08          0014*M1     ex af,af'
048C82 D9          0015*M1     exx
048C83             0516*       PUSH_ALL
048C83 08          0001*M1     ex af,af'
048C84 D9          0002*M1     exx
048C85 F5          0003*M1     push af
048C86 E5          0004*M1     push hl
048C87 C5          0005*M1     push bc
048C88 D5          0006*M1     push de
048C89             0007*M1 
048C89 08          0008*M1     ex af,af'
048C8A D9          0009*M1     exx
048C8B F5          0010*M1     push af
048C8C E5          0011*M1     push hl
048C8D C5          0012*M1     push bc
048C8E D5          0013*M1     push de
048C8F DD E5       0014*M1     push ix
048C91 FD E5       0015*M1     push iy
048C93 CD 96 8B 04 0517*       call dumpFlags
048C97             0518*       POP_ALL
048C97 FD E1       0001*M1     pop iy
048C99 DD E1       0002*M1     pop ix
048C9B D1          0003*M1     pop de
048C9C C1          0004*M1     pop bc
048C9D E1          0005*M1     pop hl
048C9E F1          0006*M1     pop af
048C9F 08          0007*M1     ex af,af'
048CA0 D9          0008*M1     exx
048CA1             0009*M1 
048CA1 D1          0010*M1     pop de
048CA2 C1          0011*M1     pop bc
048CA3 E1          0012*M1     pop hl
048CA4 F1          0013*M1     pop af
048CA5 08          0014*M1     ex af,af'
048CA6 D9          0015*M1     exx
048CA7             0519*       PUSH_ALL
048CA7 08          0001*M1     ex af,af'
048CA8 D9          0002*M1     exx
048CA9 F5          0003*M1     push af
048CAA E5          0004*M1     push hl
048CAB C5          0005*M1     push bc
048CAC D5          0006*M1     push de
048CAD             0007*M1 
048CAD 08          0008*M1     ex af,af'
048CAE D9          0009*M1     exx
048CAF F5          0010*M1     push af
048CB0 E5          0011*M1     push hl
048CB1 C5          0012*M1     push bc
048CB2 D5          0013*M1     push de
048CB3 DD E5       0014*M1     push ix
048CB5 FD E5       0015*M1     push iy
048CB7 CD 82 8A 04 0520*       call dumpRegistersHex
048CBB             0521*       ; call waitKeypress
048CBB             0522*       POP_ALL
048CBB FD E1       0001*M1     pop iy
048CBD DD E1       0002*M1     pop ix
048CBF D1          0003*M1     pop de
048CC0 C1          0004*M1     pop bc
048CC1 E1          0005*M1     pop hl
048CC2 F1          0006*M1     pop af
048CC3 08          0007*M1     ex af,af'
048CC4 D9          0008*M1     exx
048CC5             0009*M1 
048CC5 D1          0010*M1     pop de
048CC6 C1          0011*M1     pop bc
048CC7 E1          0012*M1     pop hl
048CC8 F1          0013*M1     pop af
048CC9 08          0014*M1     ex af,af'
048CCA D9          0015*M1     exx
048CCB C9          0523*       ret
048CCC             0524*   
048CCC             0525*   DEBUG_PRINT_TILE_TABLE:
048CCC             0526*       PUSH_ALL
048CCC 08          0001*M1     ex af,af'
048CCD D9          0002*M1     exx
048CCE F5          0003*M1     push af
048CCF E5          0004*M1     push hl
048CD0 C5          0005*M1     push bc
048CD1 D5          0006*M1     push de
048CD2             0007*M1 
048CD2 08          0008*M1     ex af,af'
048CD3 D9          0009*M1     exx
048CD4 F5          0010*M1     push af
048CD5 E5          0011*M1     push hl
048CD6 C5          0012*M1     push bc
048CD7 D5          0013*M1     push de
048CD8 DD E5       0014*M1     push ix
048CDA FD E5       0015*M1     push iy
048CDC CD 78 00 04 0527*       call printNewLine
048CE0 DD 21 EB 7F 0528*       ld ix,tile_stack
       04          
048CE5 DD 37 00    0529*       ld ix,(ix)
048CE8 CD 81 91 04 0530*       call dump_tile_record
048CEC CD 78 00 04 0531*       call printNewLine
048CF0             0532*       POP_ALL
048CF0 FD E1       0001*M1     pop iy
048CF2 DD E1       0002*M1     pop ix
048CF4 D1          0003*M1     pop de
048CF5 C1          0004*M1     pop bc
048CF6 E1          0005*M1     pop hl
048CF7 F1          0006*M1     pop af
048CF8 08          0007*M1     ex af,af'
048CF9 D9          0008*M1     exx
048CFA             0009*M1 
048CFA D1          0010*M1     pop de
048CFB C1          0011*M1     pop bc
048CFC E1          0012*M1     pop hl
048CFD F1          0013*M1     pop af
048CFE 08          0014*M1     ex af,af'
048CFF D9          0015*M1     exx
048D00 C9          0533*       ret
048D01             0534*   ; end DEBUG_PRINT_TILE_TABLE
048D01             0535*   
048D01             0536*   DEBUG_PRINT_TABLE:
048D01             0537*       PUSH_ALL
048D01 08          0001*M1     ex af,af'
048D02 D9          0002*M1     exx
048D03 F5          0003*M1     push af
048D04 E5          0004*M1     push hl
048D05 C5          0005*M1     push bc
048D06 D5          0006*M1     push de
048D07             0007*M1 
048D07 08          0008*M1     ex af,af'
048D08 D9          0009*M1     exx
048D09 F5          0010*M1     push af
048D0A E5          0011*M1     push hl
048D0B C5          0012*M1     push bc
048D0C D5          0013*M1     push de
048D0D DD E5       0014*M1     push ix
048D0F FD E5       0015*M1     push iy
048D11 CD 78 00 04 0538*       call printNewLine
048D15 CD B9 8F 04 0539*       call dump_sprite_record
048D19 CD 78 00 04 0540*       call printNewLine
048D1D CD 78 00 04 0541*       call printNewLine
048D21             0542*   
048D21 FD E5       0543*       push iy
048D23 DD E1       0544*       pop ix
048D25 CD B9 8F 04 0545*       call dump_sprite_record
048D29 CD 78 00 04 0546*       call printNewLine
048D2D CD 78 00 04 0547*       call printNewLine
048D31             0548*       POP_ALL
048D31 FD E1       0001*M1     pop iy
048D33 DD E1       0002*M1     pop ix
048D35 D1          0003*M1     pop de
048D36 C1          0004*M1     pop bc
048D37 E1          0005*M1     pop hl
048D38 F1          0006*M1     pop af
048D39 08          0007*M1     ex af,af'
048D3A D9          0008*M1     exx
048D3B             0009*M1 
048D3B D1          0010*M1     pop de
048D3C C1          0011*M1     pop bc
048D3D E1          0012*M1     pop hl
048D3E F1          0013*M1     pop af
048D3F 08          0014*M1     ex af,af'
048D40 D9          0015*M1     exx
048D41 C9          0549*       RET
048D42             0550*   
048D42             0551*   DEBUG_WAITKEYPRESS:
048D42             0552*       PUSH_ALL
048D42 08          0001*M1     ex af,af'
048D43 D9          0002*M1     exx
048D44 F5          0003*M1     push af
048D45 E5          0004*M1     push hl
048D46 C5          0005*M1     push bc
048D47 D5          0006*M1     push de
048D48             0007*M1 
048D48 08          0008*M1     ex af,af'
048D49 D9          0009*M1     exx
048D4A F5          0010*M1     push af
048D4B E5          0011*M1     push hl
048D4C C5          0012*M1     push bc
048D4D D5          0013*M1     push de
048D4E DD E5       0014*M1     push ix
048D50 FD E5       0015*M1     push iy
048D52 CD 3D 03 04 0553*       call waitKeypress
048D56             0554*       POP_ALL
048D56 FD E1       0001*M1     pop iy
048D58 DD E1       0002*M1     pop ix
048D5A D1          0003*M1     pop de
048D5B C1          0004*M1     pop bc
048D5C E1          0005*M1     pop hl
048D5D F1          0006*M1     pop af
048D5E 08          0007*M1     ex af,af'
048D5F D9          0008*M1     exx
048D60             0009*M1 
048D60 D1          0010*M1     pop de
048D61 C1          0011*M1     pop bc
048D62 E1          0012*M1     pop hl
048D63 F1          0013*M1     pop af
048D64 08          0014*M1     ex af,af'
048D65 D9          0015*M1     exx
048D66 C9          0555*       RET
048D67             0556*   
048D67             0557*   DEBUG_PRINT_FIELDS:
048D67             0558*       ; PUSH_ALL
048D67 01 00 00 00 0559*       ld bc,0
048D6B 4F          0560*       ld c,a
048D6C DD 21 05 94 0561*       ld ix,table_base
       04          
048D71 DD 09       0562*       add ix,bc
048D73 06 14       0563*       ld b,table_num_records
048D75             0564*   @@:
048D75 DD E5       0565*       push ix
048D77 E1          0566*       pop hl
048D78 C5          0567*       push bc ; save loop counter
048D79 3E 01       0568*       ld a,1 ; print one byte
048D7B CD E7 8B 04 0569*       call dumpMemoryHex
048D7F ED 32 40    0570*       lea ix,ix+table_record_size
048D82 C1          0571*       pop bc ; restore loop counter
048D83 10 F0       0572*       djnz @b
048D85             0573*       ; POP_ALL
048D85 C9          0574*       ret
048D86             0575*   
048D86             0576*   DEBUG_PRINT_TILE_STACK:
048D86             0577*       PUSH_ALL
048D86 08          0001*M1     ex af,af'
048D87 D9          0002*M1     exx
048D88 F5          0003*M1     push af
048D89 E5          0004*M1     push hl
048D8A C5          0005*M1     push bc
048D8B D5          0006*M1     push de
048D8C             0007*M1 
048D8C 08          0008*M1     ex af,af'
048D8D D9          0009*M1     exx
048D8E F5          0010*M1     push af
048D8F E5          0011*M1     push hl
048D90 C5          0012*M1     push bc
048D91 D5          0013*M1     push de
048D92 DD E5       0014*M1     push ix
048D94 FD E5       0015*M1     push iy
048D96 01 00 00 00 0578*       ld bc,0
048D9A 11 00 00 00 0579*       ld de,0
048D9E CD 0C 13 04 0580*       call vdu_set_gfx_origin
048DA2 01 00 00 00 0581*       ld bc,0
048DA6 11 00 00 00 0582*       ld de,0
048DAA DD 21 7F 00 0583*       ld ix,127
       00          
048DAF FD 21 F0 00 0584*       ld iy,240
       00          
048DB4 CD 27 13 04 0585*       call vdu_set_gfx_viewport
048DB8 CD 9A 12 04 0586*       call vdu_clg
048DBC CD 3C 12 04 0587*       call vdu_home_cursor
048DC0 CD 78 00 04 0588*       call printNewLine
048DC4 CD 78 00 04 0589*       call printNewLine
048DC8 2A EE 82 04 0590*       ld hl,(tile_stack_pointer)
048DCC CD 22 89 04 0591*       call printHexUHL
048DD0 CD 78 00 04 0592*       call printNewLine
048DD4 3A F4 82 04 0593*       ld a,(num_active_tiles)
048DD8 CD 08 89 04 0594*       call printHexA
048DDC CD 78 00 04 0595*       call printNewLine
048DE0 A7          0596*       and a
048DE1 CA 0F 8E 04 0597*       jp z,@done
048DE5 DD 21 EB 7F 0598*       ld ix,tile_stack
       04          
048DEA 3A F4 82 04 0599*       ld a,(num_active_tiles)
048DEE 47          0600*       ld b,a
048DEF             0601*   @loop:
048DEF C5          0602*       push bc
048DF0 DD E5       0603*       push ix
048DF2 DD 37 00    0604*       ld ix,(ix)
048DF5 DD 7E 00    0605*       ld a,(ix+tile_id)
048DF8 CD 08 89 04 0606*       call printHexA
048DFC DD 7E 16    0607*       ld a,(ix+tile_type)
048DFF CD 08 89 04 0608*       call printHexA
048E03 CD 78 00 04 0609*       call printNewLine
048E07 DD E1       0610*       pop ix
048E09 ED 32 03    0611*       lea ix,ix+3
048E0C C1          0612*       pop bc
048E0D 10 E0       0613*       djnz @loop
048E0F             0614*   @done:
048E0F             0615*       POP_ALL
048E0F FD E1       0001*M1     pop iy
048E11 DD E1       0002*M1     pop ix
048E13 D1          0003*M1     pop de
048E14 C1          0004*M1     pop bc
048E15 E1          0005*M1     pop hl
048E16 F1          0006*M1     pop af
048E17 08          0007*M1     ex af,af'
048E18 D9          0008*M1     exx
048E19             0009*M1 
048E19 D1          0010*M1     pop de
048E1A C1          0011*M1     pop bc
048E1B E1          0012*M1     pop hl
048E1C F1          0013*M1     pop af
048E1D 08          0014*M1     ex af,af'
048E1E D9          0015*M1     exx
048E1F C9          0616*       ret
048E20             0617*   
048E20             0618*   DEBUG_DUMP_PLAYER_RECORD:
048E20             0619*       PUSH_ALL
048E20 08          0001*M1     ex af,af'
048E21 D9          0002*M1     exx
048E22 F5          0003*M1     push af
048E23 E5          0004*M1     push hl
048E24 C5          0005*M1     push bc
048E25 D5          0006*M1     push de
048E26             0007*M1 
048E26 08          0008*M1     ex af,af'
048E27 D9          0009*M1     exx
048E28 F5          0010*M1     push af
048E29 E5          0011*M1     push hl
048E2A C5          0012*M1     push bc
048E2B D5          0013*M1     push de
048E2C DD E5       0014*M1     push ix
048E2E FD E5       0015*M1     push iy
048E30 CD 78 00 04 0620*       call printNewLine
048E34 CD EE 92 04 0621*       CALL dump_player_record
048E38 CD 78 00 04 0622*       call printNewLine
048E3C             0623*       POP_ALL
048E3C FD E1       0001*M1     pop iy
048E3E DD E1       0002*M1     pop ix
048E40 D1          0003*M1     pop de
048E41 C1          0004*M1     pop bc
048E42 E1          0005*M1     pop hl
048E43 F1          0006*M1     pop af
048E44 08          0007*M1     ex af,af'
048E45 D9          0008*M1     exx
048E46             0009*M1 
048E46 D1          0010*M1     pop de
048E47 C1          0011*M1     pop bc
048E48 E1          0012*M1     pop hl
048E49 F1          0013*M1     pop af
048E4A 08          0014*M1     ex af,af'
048E4B D9          0015*M1     exx
048E4C C9          0624*       RET
048E4D             0625*   
048E4D             0626*   DEBUG_PRINT_SHIELDS:
048E4D             0627*       PUSH_ALL
048E4D 08          0001*M1     ex af,af'
048E4E D9          0002*M1     exx
048E4F F5          0003*M1     push af
048E50 E5          0004*M1     push hl
048E51 C5          0005*M1     push bc
048E52 D5          0006*M1     push de
048E53             0007*M1 
048E53 08          0008*M1     ex af,af'
048E54 D9          0009*M1     exx
048E55 F5          0010*M1     push af
048E56 E5          0011*M1     push hl
048E57 C5          0012*M1     push bc
048E58 D5          0013*M1     push de
048E59 DD E5       0014*M1     push ix
048E5B FD E5       0015*M1     push iy
048E5D 0E 00       0628*       ld c,0 ; X
048E5F 06 00       0629*       ld b,0 ; Y
048E61 CD 73 12 04 0630*       call vdu_move_cursor
048E65             0631*   
048E65 CD 96 8B 04 0632*       call dumpFlags
048E69 CD 82 8A 04 0633*       call dumpRegistersHex
048E6D             0634*   
048E6D DD 21 65 79 0635*       ld ix,bar_shields
       04          
048E72             0636*   
048E72 CD 5C 00 04 0637*       call printInline
048E76 76 61 6C 3A 0638*       asciz "val:"
       00          
048E7B DD 27 00    0639*       ld hl,(ix+bar_val)
048E7E CD AF 00 04 0640*       call printDec
048E82 CD 78 00 04 0641*       call printNewLine
048E86             0642*   
048E86 CD 5C 00 04 0643*       call printInline
048E8A 78 30 20 3A 0644*       asciz "x0 :"
       00          
048E8F DD 27 03    0645*       ld hl,(ix+bar_x0)
048E92 CD AF 00 04 0646*       call printDec
048E96 CD 78 00 04 0647*       call printNewLine
048E9A             0648*   
048E9A CD 5C 00 04 0649*       call printInline
048E9E 79 30 20 3A 0650*       asciz "y0 :"
       00          
048EA3 DD 27 06    0651*       ld hl,(ix+bar_y0)
048EA6 CD AF 00 04 0652*       call printDec
048EAA CD 78 00 04 0653*       call printNewLine
048EAE             0654*   
048EAE CD 5C 00 04 0655*       call printInline
048EB2 78 31 20 3A 0656*       asciz "x1 :"
       00          
048EB7 DD 27 09    0657*       ld hl,(ix+bar_x1)
048EBA CD AF 00 04 0658*       call printDec
048EBE CD 78 00 04 0659*       call printNewLine
048EC2             0660*   
048EC2 CD 5C 00 04 0661*       call printInline
048EC6 79 31 20 3A 0662*       asciz "y1 :"
       00          
048ECB DD 27 0C    0663*       ld hl,(ix+bar_y1)
048ECE CD AF 00 04 0664*       call printDec
048ED2 CD 78 00 04 0665*       call printNewLine
048ED6             0666*   
048ED6 CD 5C 00 04 0667*       call printInline
048EDA 79 20 20 3A 0668*       asciz "y  :"
       00          
048EDF DD 27 0F    0669*       ld hl,(ix+bar_y)
048EE2 CD AF 00 04 0670*       call printDec
048EE6 CD 78 00 04 0671*       call printNewLine
048EEA             0672*   
048EEA             0673*       POP_ALL
048EEA FD E1       0001*M1     pop iy
048EEC DD E1       0002*M1     pop ix
048EEE D1          0003*M1     pop de
048EEF C1          0004*M1     pop bc
048EF0 E1          0005*M1     pop hl
048EF1 F1          0006*M1     pop af
048EF2 08          0007*M1     ex af,af'
048EF3 D9          0008*M1     exx
048EF4             0009*M1 
048EF4 D1          0010*M1     pop de
048EF5 C1          0011*M1     pop bc
048EF6 E1          0012*M1     pop hl
048EF7 F1          0013*M1     pop af
048EF8 08          0014*M1     ex af,af'
048EF9 D9          0015*M1     exx
048EFA             0674*       ; call waitKeypress
048EFA C9          0675*       ret
048EFB             0676*   ; end DEBUG_PRINT_SHIELDS
048EFB             0677*   
048EFB             0678*   DEBUG_PRINT_BAR_UPDATE:
048EFB 0E 00       0679*       ld c,0 ; X
048EFD 06 00       0680*       ld b,0 ; Y
048EFF CD 73 12 04 0681*       call vdu_move_cursor
048F03             0682*   
048F03 CD 5C 00 04 0683*       call printInline
048F07 78 30 20 20 0684*       asciz "x0  :"
       3A 00       
048F0D 21 00 00 00 0685*       ld hl,0 ; clear hlu
048F11 DD 6E 01    0686*       ld l,(ix+@x0-@cmd0+0)
048F14 DD 66 02    0687*       ld h,(ix+@x0-@cmd0+1)
048F17 CD AF 00 04 0688*       call printDec
048F1B CD 78 00 04 0689*       call printNewLine
048F1F             0690*   
048F1F CD 5C 00 04 0691*       call printInline
048F23 79 30 20 20 0692*       asciz "y0  :"
       3A 00       
048F29 21 00 00 00 0693*       ld hl,0 ; clear hlu
048F2D DD 6E 07    0694*       ld l,(ix+@y0-@cmd0+0)
048F30 DD 66 08    0695*       ld h,(ix+@y0-@cmd0+1)
048F33 CD AF 00 04 0696*       call printDec
048F37 CD 78 00 04 0697*       call printNewLine
048F3B             0698*   
048F3B CD 5C 00 04 0699*       call printInline
048F3F 78 31 20 20 0700*       asciz "x1  :"
       3A 00       
048F45 21 00 00 00 0701*       ld hl,0 ; clear hlu
048F49 DD 6E 05    0702*       ld l,(ix+@x1-@cmd0+0)
048F4C DD 66 06    0703*       ld h,(ix+@x1-@cmd0+1)
048F4F CD AF 00 04 0704*       call printDec
048F53 CD 78 00 04 0705*       call printNewLine
048F57             0706*   
048F57 CD 5C 00 04 0707*       call printInline
048F5B 79 31 20 20 0708*       asciz "y1  :"
       3A 00       
048F61 21 00 00 00 0709*       ld hl,0 ; clear hlu
048F65 DD 6E 03    0710*       ld l,(ix+@y1-@cmd0+0)
048F68 DD 66 04    0711*       ld h,(ix+@y1-@cmd0+1)
048F6B CD AF 00 04 0712*       call printDec
048F6F CD 78 00 04 0713*       call printNewLine
048F73             0714*   
048F73 CD 5C 00 04 0715*       call printInline
048F77 78 32 20 20 0716*       asciz "x2  :"
       3A 00       
048F7D 21 00 00 00 0717*       ld hl,0 ; clear hlu
048F81 DD 6E 0B    0718*       ld l,(ix+@x2-@cmd0+0)
048F84 DD 66 0C    0719*       ld h,(ix+@x2-@cmd0+1)
048F87 CD AF 00 04 0720*       call printDec
048F8B CD 78 00 04 0721*       call printNewLine
048F8F             0722*   
048F8F CD 5C 00 04 0723*       call printInline
048F93 58 32 20 79 0724*       asciz "X2 y2:"
       32 3A 00    
048F9A 21 00 00 00 0725*       ld hl,0 ; clear hlu
048F9E DD 6E 0D    0726*       ld l,(ix+@y2-@cmd0+0)
048FA1 DD 66 0E    0727*       ld h,(ix+@y2-@cmd0+1)
048FA4 CD AF 00 04 0728*       call printDec
048FA8 C9          0729*       ret
048FA9 18          0730*   @cmd0:   db 24
048FAA 00 00       0731*   @x0: 	dw 0x0000
048FAC 00 00       0732*   @y1: 	dw 0x0000
048FAE 00 00       0733*   @x1: 	dw 0x0000
048FB0 00 00       0734*   @y0: 	dw 0x0000
048FB2             0735*   ; plot bitmap command
048FB2 19          0736*   @cmd1:   db 25 ; stomped on by @y0 load
048FB3 ED          0737*   @mode:  db plot_bmp+dr_abs_fg ; 0xED stomped on by @x2 load
048FB4 00 00       0738*   @x2: 	dw 0x0000
048FB6 00 00       0739*   @y2: 	dw 0x0000
048FB8 00          0740*   @end:  db 0x00 ; padding
048FB9             0741*   ; end DEBUG_PRINT_BAR_UPDATE
048FB9             0742*   
048FB9             0743*   
048FB9             0744*   dump_sprite_record:
048FB9             0745*       ; call vdu_home_cursor
048FB9 CD 5C 00 04 0746*       call printInline
048FBD 69 64 20 20 0747*       asciz "id  : "
       3A 20 00    
048FC4 DD 7E 00    0748*       ld a,(ix+sprite_id)
048FC7 CD 08 89 04 0749*       call printHexA
048FCB             0750*   
048FCB CD 5C 00 04 0751*       call printInline
048FCF 0D 0A 78 20 0752*       asciz "\r\nx   :"
       20 20 3A 00 
048FD7 DD 27 01    0753*       ld hl,(ix+sprite_x)
048FDA CD D4 01 04 0754*       call print_s168_hl
048FDE             0755*   
048FDE CD 5C 00 04 0756*       call printInline
048FE2 0D 0A 79 20 0757*       asciz "\r\ny   :"
       20 20 3A 00 
048FEA DD 27 04    0758*       ld hl,(ix+sprite_y)
048FED CD D4 01 04 0759*       call print_s168_hl
048FF1             0760*   
048FF1 CD 5C 00 04 0761*       call printInline
048FF5 0D 0A 78 76 0762*       asciz "\r\nxv  :"
       20 20 3A 00 
048FFD DD 27 07    0763*       ld hl,(ix+sprite_xvel)
049000 CD D4 01 04 0764*       call print_s168_hl
049004             0765*   
049004 CD 5C 00 04 0766*       call printInline
049008 0D 0A 79 76 0767*       asciz "\r\nyv  :"
       20 20 3A 00 
049010 DD 27 0A    0768*       ld hl,(ix+sprite_yvel)
049013 CD D4 01 04 0769*       call print_s168_hl
049017             0770*   
049017 CD 5C 00 04 0771*       call printInline
04901B 0D 0A 76 20 0772*       asciz "\r\nv   :"
       20 20 3A 00 
049023 DD 27 0D    0773*       ld hl,(ix+sprite_vel)
049026 CD D4 01 04 0774*       call print_s168_hl
04902A             0775*   
04902A CD 5C 00 04 0776*       call printInline
04902E 0D 0A 68 64 0777*       asciz "\r\nhdg :"
       67 20 3A 00 
049036 DD 27 10    0778*       ld hl,(ix+sprite_heading)
049039 CD D4 01 04 0779*       call print_s168_hl
04903D             0780*   
04903D CD 5C 00 04 0781*       call printInline
049041 0D 0A 6F 72 0782*       asciz "\r\nori :"
       69 20 3A 00 
049049 DD 27 13    0783*       ld hl,(ix+sprite_orientation)
04904C CD D4 01 04 0784*       call print_s168_hl
049050             0785*   
049050 CD 5C 00 04 0786*       call printInline
049054 0D 0A 74 79 0787*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
04905D DD 7E 16    0788*       ld a,(ix+sprite_type)
049060 CD 08 89 04 0789*       call printHexA
049064             0790*   
049064 CD 5C 00 04 0791*       call printInline
049068 0D 0A 42 49 0792*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
049071 DD 27 17    0793*       ld hl,(ix+sprite_base_bufferId)
049074 CD 83 00 04 0794*       call printHex24
049078             0795*   
049078 CD 5C 00 04 0796*       call printInline
04907C 0D 0A 6D 50 0797*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
049085 DD 27 1A    0798*       ld hl,(ix+sprite_move_program)
049088 CD 83 00 04 0799*       call printHex24
04908C             0800*   
04908C CD 5C 00 04 0801*       call printInline
049090 0D 0A 63 6F 0802*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
049099 DD 7E 1D    0803*       ld a,(ix+sprite_collisions)
04909C CD 51 02 04 0804*       call printBin8
0490A0             0805*   
0490A0 CD 5C 00 04 0806*       call printInline
0490A4 0D 0A 73 7A 0807*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
0490AD DD 7E 1E    0808*       ld a,(ix+sprite_dim_x)
0490B0 CD 08 89 04 0809*       call printHexA
0490B4             0810*   
0490B4 CD 5C 00 04 0811*       call printInline
0490B8 0D 0A 73 7A 0812*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
0490C1 DD 7E 1F    0813*       ld a,(ix+sprite_dim_y)
0490C4 CD 08 89 04 0814*       call printHexA
0490C8             0815*   
0490C8 CD 5C 00 04 0816*       call printInline
0490CC 0D 0A 23 6F 0817*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
0490D5 DD 7E 20    0818*       ld a,(ix+sprite_num_orientations)
0490D8 CD 08 89 04 0819*       call printHexA
0490DC             0820*   
0490DC CD 5C 00 04 0821*       call printInline
0490E0 0D 0A 23 61 0822*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
0490E9 DD 7E 21    0823*       ld a,(ix+sprite_num_animations)
0490EC CD 08 89 04 0824*       call printHexA
0490F0             0825*   
0490F0 CD 5C 00 04 0826*       call printInline
0490F4 0D 0A 61 6E 0827*       asciz "\r\nani : "
       69 20 3A 20 
       00          
0490FD DD 7E 22    0828*       ld a,(ix+sprite_animation)
049100 CD 08 89 04 0829*       call printHexA
049104             0830*   
049104 CD 5C 00 04 0831*       call printInline
049108 0D 0A 61 6E 0832*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
049111 DD 7E 23    0833*       ld a,(ix+sprite_animation_timer)
049114 CD 08 89 04 0834*       call printHexA
049118             0835*   
049118 CD 5C 00 04 0836*       call printInline
04911C 0D 0A 6D 76 0837*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
049125 DD 7E 24    0838*       ld a,(ix+sprite_move_timer)
049128 CD 08 89 04 0839*       call printHexA
04912C             0840*   
04912C CD 5C 00 04 0841*       call printInline
049130 0D 0A 6D 76 0842*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
049139 DD 7E 25    0843*       ld a,(ix+sprite_move_step)
04913C CD 08 89 04 0844*       call printHexA
049140             0845*   
049140 CD 5C 00 04 0846*       call printInline
049144 0D 0A 70 74 0847*       asciz "\r\npts : "
       73 20 3A 20 
       00          
04914D DD 7E 26    0848*       ld a,(ix+sprite_points)
049150 CD 08 89 04 0849*       call printHexA
049154             0850*   
049154 CD 5C 00 04 0851*       call printInline
049158 0D 0A 64 6D 0852*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
049161 DD 7E 27    0853*       ld a,(ix+sprite_shield_damage)
049164 CD 08 89 04 0854*       call printHexA
049168             0855*   
049168 CD 5C 00 04 0856*       call printInline
04916C 0D 0A 66 72 0857*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
049175 DD 7E 28    0858*       ld a,(ix+sprite_frame)
049178 CD 08 89 04 0859*       call printHexA
04917C             0860*   
04917C CD 78 00 04 0861*       call printNewLine
049180             0862*   
049180             0863*       ; call waitKeypress
049180 C9          0864*       ret
049181             0865*   
049181             0866*   dump_tile_record:
049181 CD 5C 00 04 0867*       call printInline
049185 69 64 20 20 0868*       asciz "id  : "
       3A 20 00    
04918C DD 7E 00    0869*       ld a,(ix+tile_id)
04918F CD 08 89 04 0870*       call printHexA
049193             0871*   
049193 CD 5C 00 04 0872*       call printInline
049197 0D 0A 78 20 0873*       asciz "\r\nx   :"
       20 20 3A 00 
04919F DD 27 01    0874*       ld hl,(ix+tile_x)
0491A2 CD D4 01 04 0875*       call print_s168_hl
0491A6             0876*   
0491A6 CD 5C 00 04 0877*       call printInline
0491AA 0D 0A 79 20 0878*       asciz "\r\ny   :"
       20 20 3A 00 
0491B2 DD 27 04    0879*       ld hl,(ix+tile_y)
0491B5 CD D4 01 04 0880*       call print_s168_hl
0491B9             0881*   
0491B9             0882*       ; call printInline
0491B9             0883*       ; asciz "\r\nxv  :"
0491B9             0884*       ; ld hl,(ix+tile_xvel)
0491B9             0885*       ; call print_s168_hl
0491B9             0886*   
0491B9             0887*       ; call printInline
0491B9             0888*       ; asciz "\r\nyv  :"
0491B9             0889*       ; ld hl,(ix+tile_yvel)
0491B9             0890*       ; call print_s168_hl
0491B9             0891*   
0491B9             0892*       ; call printInline
0491B9             0893*       ; asciz "\r\nv   :"
0491B9             0894*       ; ld hl,(ix+tile_vel)
0491B9             0895*       ; call print_s168_hl
0491B9             0896*   
0491B9             0897*       ; call printInline
0491B9             0898*       ; asciz "\r\nhdg :"
0491B9             0899*       ; ld hl,(ix+tile_heading)
0491B9             0900*       ; call print_s168_hl
0491B9             0901*   
0491B9             0902*       ; call printInline
0491B9             0903*       ; asciz "\r\nori :"
0491B9             0904*       ; ld hl,(ix+tile_orientation)
0491B9             0905*       ; call print_s168_hl
0491B9             0906*   
0491B9 CD 5C 00 04 0907*       call printInline
0491BD 0D 0A 74 79 0908*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
0491C6 DD 7E 16    0909*       ld a,(ix+tile_type)
0491C9 CD 08 89 04 0910*       call printHexA
0491CD             0911*   
0491CD CD 5C 00 04 0912*       call printInline
0491D1 0D 0A 42 49 0913*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
0491DA DD 27 17    0914*       ld hl,(ix+tile_base_bufferId)
0491DD CD 83 00 04 0915*       call printHex24
0491E1             0916*   
0491E1 CD 5C 00 04 0917*       call printInline
0491E5 0D 0A 6D 50 0918*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
0491EE DD 27 1A    0919*       ld hl,(ix+tile_move_program)
0491F1 CD 83 00 04 0920*       call printHex24
0491F5             0921*   
0491F5 CD 5C 00 04 0922*       call printInline
0491F9 0D 0A 63 6F 0923*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
049202 DD 7E 1D    0924*       ld a,(ix+tile_collisions)
049205 CD 51 02 04 0925*       call printBin8
049209             0926*   
049209 CD 5C 00 04 0927*       call printInline
04920D 0D 0A 73 7A 0928*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
049216 DD 7E 1E    0929*       ld a,(ix+tile_dim_x)
049219 CD 08 89 04 0930*       call printHexA
04921D             0931*   
04921D CD 5C 00 04 0932*       call printInline
049221 0D 0A 73 7A 0933*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
04922A DD 7E 1F    0934*       ld a,(ix+tile_dim_y)
04922D CD 08 89 04 0935*       call printHexA
049231             0936*   
049231 CD 5C 00 04 0937*       call printInline
049235 0D 0A 23 6F 0938*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
04923E DD 7E 20    0939*       ld a,(ix+tile_num_orientations)
049241 CD 08 89 04 0940*       call printHexA
049245             0941*   
049245 CD 5C 00 04 0942*       call printInline
049249 0D 0A 23 61 0943*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
049252 DD 7E 21    0944*       ld a,(ix+tile_num_animations)
049255 CD 08 89 04 0945*       call printHexA
049259             0946*   
049259 CD 5C 00 04 0947*       call printInline
04925D 0D 0A 61 6E 0948*       asciz "\r\nani : "
       69 20 3A 20 
       00          
049266 DD 7E 22    0949*       ld a,(ix+tile_animation)
049269 CD 08 89 04 0950*       call printHexA
04926D             0951*   
04926D CD 5C 00 04 0952*       call printInline
049271 0D 0A 61 6E 0953*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
04927A DD 7E 23    0954*       ld a,(ix+tile_animation_timer)
04927D CD 08 89 04 0955*       call printHexA
049281             0956*   
049281 CD 5C 00 04 0957*       call printInline
049285 0D 0A 6D 76 0958*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
04928E DD 7E 24    0959*       ld a,(ix+tile_move_timer)
049291 CD 08 89 04 0960*       call printHexA
049295             0961*   
049295 CD 5C 00 04 0962*       call printInline
049299 0D 0A 6D 76 0963*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
0492A2 DD 7E 25    0964*       ld a,(ix+tile_move_step)
0492A5 CD 08 89 04 0965*       call printHexA
0492A9             0966*   
0492A9 CD 5C 00 04 0967*       call printInline
0492AD 0D 0A 70 74 0968*       asciz "\r\npts : "
       73 20 3A 20 
       00          
0492B6 DD 7E 26    0969*       ld a,(ix+tile_points)
0492B9 CD 08 89 04 0970*       call printHexA
0492BD             0971*   
0492BD CD 5C 00 04 0972*       call printInline
0492C1 0D 0A 64 6D 0973*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
0492CA DD 7E 27    0974*       ld a,(ix+tile_shield_damage)
0492CD CD 08 89 04 0975*       call printHexA
0492D1             0976*   
0492D1 CD 5C 00 04 0977*       call printInline
0492D5 0D 0A 66 72 0978*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
0492DE DD 7E 28    0979*       ld a,(ix+tile_frame)
0492E1 CD 08 89 04 0980*       call printHexA
0492E5             0981*   
0492E5 CD 78 00 04 0982*       call printNewLine
0492E9 CD 78 00 04 0983*       call printNewLine
0492ED             0984*   
0492ED             0985*       ; call waitKeypress
0492ED C9          0986*       ret
0492EE             0987*   
0492EE             0988*   dump_player_record:
0492EE DD 21 05 95 0989*       ld ix,player_begin
       04          
0492F3             0990*   
0492F3 CD 5C 00 04 0991*       call printInline
0492F7 69 64 20 20 0992*       asciz "id  : "
       3A 20 00    
0492FE DD 7E 00    0993*       ld a,(ix+sprite_id)
049301 CD 08 89 04 0994*       call printHexA
049305             0995*   
049305 CD 5C 00 04 0996*       call printInline
049309 0D 0A 78 20 0997*       asciz "\r\nx   :"
       20 20 3A 00 
049311 DD 27 01    0998*       ld hl,(ix+sprite_x)
049314 CD D4 01 04 0999*       call print_s168_hl
049318             1000*   
049318 CD 5C 00 04 1001*       call printInline
04931C 0D 0A 79 20 1002*       asciz "\r\ny   :"
       20 20 3A 00 
049324 DD 27 04    1003*       ld hl,(ix+sprite_y)
049327 CD D4 01 04 1004*       call print_s168_hl
04932B             1005*   
04932B CD 5C 00 04 1006*       call printInline
04932F 0D 0A 78 76 1007*       asciz "\r\nxv  :"
       20 20 3A 00 
049337 DD 27 07    1008*       ld hl,(ix+sprite_xvel)
04933A CD D4 01 04 1009*       call print_s168_hl
04933E             1010*   
04933E CD 5C 00 04 1011*       call printInline
049342 0D 0A 79 76 1012*       asciz "\r\nyv  :"
       20 20 3A 00 
04934A DD 27 0A    1013*       ld hl,(ix+sprite_yvel)
04934D CD D4 01 04 1014*       call print_s168_hl
049351             1015*   
049351 CD 5C 00 04 1016*       call printInline
049355 0D 0A 76 20 1017*       asciz "\r\nv   :"
       20 20 3A 00 
04935D DD 27 0D    1018*       ld hl,(ix+sprite_vel)
049360 CD D4 01 04 1019*       call print_s168_hl
049364             1020*   
049364 CD 5C 00 04 1021*       call printInline
049368 0D 0A 68 64 1022*       asciz "\r\nhdg :"
       67 20 3A 00 
049370 DD 27 10    1023*       ld hl,(ix+sprite_heading)
049373 CD D4 01 04 1024*       call print_s168_hl
049377             1025*   
049377 CD 5C 00 04 1026*       call printInline
04937B 0D 0A 6F 72 1027*       asciz "\r\nori :"
       69 20 3A 00 
049383 DD 27 13    1028*       ld hl,(ix+sprite_orientation)
049386 CD D4 01 04 1029*       call print_s168_hl
04938A             1030*   
04938A CD 5C 00 04 1031*       call printInline
04938E 0D 0A 74 79 1032*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
049397 DD 7E 16    1033*       ld a,(ix+sprite_type)
04939A CD 08 89 04 1034*       call printHexA
04939E             1035*   
04939E CD 5C 00 04 1036*       call printInline
0493A2 0D 0A 42 49 1037*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
0493AB DD 27 17    1038*       ld hl,(ix+sprite_base_bufferId)
0493AE CD 83 00 04 1039*       call printHex24
0493B2             1040*   
0493B2 CD 5C 00 04 1041*       call printInline
0493B6 0D 0A 6D 50 1042*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
0493BF DD 27 1A    1043*       ld hl,(ix+sprite_move_program)
0493C2 CD 83 00 04 1044*       call printHex24
0493C6             1045*   
0493C6 CD 5C 00 04 1046*       call printInline
0493CA 0D 0A 63 6F 1047*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
0493D3 DD 7E 1D    1048*       ld a,(ix+sprite_collisions)
0493D6 CD 51 02 04 1049*       call printBin8
0493DA             1050*   
0493DA             1051*       ; call printInline
0493DA             1052*       ; asciz "\r\nszx : "
0493DA             1053*       ; ld a,(ix+sprite_dim_x)
0493DA             1054*       ; call printHexA
0493DA             1055*   
0493DA             1056*       ; call printInline
0493DA             1057*       ; asciz "\r\nszy : "
0493DA             1058*       ; ld a,(ix+sprite_dim_y)
0493DA             1059*       ; call printHexA
0493DA             1060*   
0493DA             1061*       ; call printInline
0493DA             1062*       ; asciz "\r\n#ori: "
0493DA             1063*       ; ld a,(ix+sprite_num_orientations)
0493DA             1064*       ; call printHexA
0493DA             1065*   
0493DA             1066*       ; call printInline
0493DA             1067*       ; asciz "\r\n#ani: "
0493DA             1068*       ; ld a,(ix+sprite_num_animations)
0493DA             1069*       ; call printHexA
0493DA             1070*   
0493DA             1071*       ; call printInline
0493DA             1072*       ; asciz "\r\nani : "
0493DA             1073*       ; ld a,(ix+sprite_animation)
0493DA             1074*       ; call printHexA
0493DA             1075*   
0493DA             1076*       ; call printInline
0493DA             1077*       ; asciz "\r\nanit: "
0493DA             1078*       ; ld a,(ix+sprite_animation_timer)
0493DA             1079*       ; call printHexA
0493DA             1080*   
0493DA             1081*       ; call printInline
0493DA             1082*       ; asciz "\r\nmvt : "
0493DA             1083*       ; ld a,(ix+sprite_move_timer)
0493DA             1084*       ; call printHexA
0493DA             1085*   
0493DA             1086*       ; call printInline
0493DA             1087*       ; asciz "\r\nmvs : "
0493DA             1088*       ; ld a,(ix+sprite_move_step)
0493DA             1089*       ; call printHexA
0493DA             1090*   
0493DA             1091*       ; call printInline
0493DA             1092*       ; asciz "\r\npts : "
0493DA             1093*       ; ld a,(ix+sprite_points)
0493DA             1094*       ; call printHexA
0493DA             1095*   
0493DA             1096*       ; call printInline
0493DA             1097*       ; asciz "\r\ndmg : "
0493DA             1098*       ; ld a,(ix+sprite_shield_damage)
0493DA             1099*       ; call printHexA
0493DA             1100*   
0493DA             1101*       ; call printInline
0493DA             1102*       ; asciz "\r\nfrm : "
0493DA             1103*       ; ld a,(ix+sprite_frame)
0493DA             1104*       ; call printHexA
0493DA             1105*   
0493DA             1106*       ; call printNewLine
0493DA             1107*       ; call printNewLine
0493DA             1108*   
0493DA             1109*       ; call waitKeypress
0493DA C9          1110*       ret
0493DB             0080    
0493DB             0081    ; --- MAIN PROGRAM FILE ---
0493DB             0082    main:
0493DB             0083    ; start a new game
0493DB 21 56 7D 04 0084        ld hl,game_init
0493DF 22 5F 7C 04 0085        ld (game_state),hl
0493E3             0086    main_loop:
0493E3             0087    ; update the global timestamp
0493E3 CD C3 11 04 0088        call timestamp_tick
0493E7             0089    ; do gamestate logic
0493E7 CD 62 7C 04 0090        call do_game
0493EB             0091    ; wait for the next vblank mitigate flicker and for loop timing
0493EB CD FB 12 04 0092        call vdu_vblank
0493EF             0093    ; poll keyboard for escape keypress
0493EF 3E 08       0094        ld a, $08 ; code to send to MOS
0493F1 5B CF       0095        rst.lil $08 ; get IX pointer to System Variables
0493F3 DD 7E 05    0096        ld a, (ix + $05) ; get ASCII code of key pressed
0493F6 FE 1B       0097        cp 27 ; check if 27 (ascii code for ESC)
0493F8 CA 00 94 04 0098        jp z, main_end ; if pressed, jump to exit
0493FC             0099    ; escape not pressed so loop
0493FC C3 E3 93 04 0100        jp main_loop
049400             0101    
049400             0102    main_end:
049400 CD 41 12 04 0103        call vdu_cursor_on
049404 C9          0104        ret
049405             0105    ; end main
049405             0106    
049405             0107        include "tables.inc"
049405             0001*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
049405             0002*   table_base: equ $
049405             0003*   player_weapons_begin: equ table_base
049405             0004*   player_lasers_begin: equ player_weapons_begin
049405             0005*   player_lasers_end: equ table_record_size*player_lasers_max+player_lasers_begin
049405             0006*   player_weapons_end: equ table_record_size*player_lasers_max+player_weapons_begin
049405             0007*   player_begin: equ player_weapons_end
049405             0008*   player_end: equ table_record_size+player_begin
049405             0009*   enemy_sprites_begin: equ player_end
049405             0010*   seekers_base: equ enemy_sprites_begin
049405             0011*   seekers_end: equ table_record_size*seekers_max+seekers_base
049405             0012*   fireballs_base: equ seekers_end
049405             0013*   fireballs_end: equ table_record_size*fireballs_max+fireballs_base
049405             0014*   enemy_sprites_end: equ fireballs_end
049405             0015*   explosions_base: equ enemy_sprites_end
049405             0016*   explosions_end: equ table_record_size*explosions_max+explosions_base
049405             0017*   table_end: equ explosions_end
049405             0018*   
049405             0019*   table_num_records: equ table_end-table_base/table_record_size
049405             0020*   table_num_enemy_records: equ enemy_sprites_end-enemy_sprites_begin/table_record_size
049405             0021*   
049405             0022*   ; ### THIS IS THE SPACE ALLOCATED TO THE ACTIVE TILES TABLE ###
049405             0023*   tile_table_base: equ table_end
049405             0024*   tile_table_end: equ 256*tile_table_record_size+tile_table_base

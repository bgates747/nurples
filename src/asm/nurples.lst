PC     Output      Line
040000             0001       assume adl=1
040000             0002       org 0x040000
040000 C3 45 00 04 0003       jp start
040004 FF FF FF FF 0004       align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005       db "MOS"
040043 00          0006       db 00h
040044 01          0007       db 01h
040045             0008   
040045             0009   start:
040045 F5          0010       push af
040046 C5          0011       push bc
040047 D5          0012       push de
040048 DD E5       0013       push ix
04004A FD E5       0014       push iy
04004C CD 66 83 04 0015       call init
040050 CD 4E 84 04 0016       call main
040054             0017   
040054             0018   exit:
040054 FD E1       0019       pop iy
040056 DD E1       0020       pop ix
040058 D1          0021       pop de
040059 C1          0022       pop bc
04005A F1          0023       pop af
04005B 21 00 00 00 0024       ld hl,0
04005F             0025   
04005F C9          0026       ret
040060             0027   
040060             0028   ; API INCLUDES
040060             0029       include "mos_api.inc"
040060             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*  ; Title:	AGON MOS - API for user projects
040060             0003*  ; Author:	Dean Belfield
040060             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*  ;			Added MOS error codes for return in HL
040060             0006*  ; Created:	03/08/2022
040060             0007*  ; Last Updated:	10/08/2023
040060             0008*  ;
040060             0009*  ; Modinfo:
040060             0010*  ; 05/08/2022:	Added mos_feof
040060             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*  ; 13/10/2022:	Added mos_oscli
040060             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*  ; 19/05/2023:	Added sysvar_scrMode
040060             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*  ; 03/08/2023:	Added mos_setkbvector
040060             0028*  ; 10/08/2023:	Added mos_getkbmap
040060             0029*  
040060             0030*  ; VDP control (VDU 23, 0, n)
040060             0031*  ;
040060             0032*  vdp_gp:				EQU 80h
040060             0033*  vdp_keycode:		EQU 81h
040060             0034*  vdp_cursor:			EQU	82h
040060             0035*  vdp_scrchar:		EQU	83h
040060             0036*  vdp_scrpixel:		EQU	84h
040060             0037*  vdp_audio:			EQU	85h
040060             0038*  vdp_mode:			EQU	86h
040060             0039*  vdp_rtc:			EQU	87h
040060             0040*  vdp_keystate:		EQU	88h
040060             0041*  vdp_logicalcoords:	EQU	C0h
040060             0042*  vdp_terminalmode:	EQU	FFh
040060             0043*  
040060             0044*  ; MOS high level functions
040060             0045*  ;
040060             0046*  mos_getkey:			EQU	00h
040060             0047*  mos_load:			EQU	01h
040060             0048*  mos_save:			EQU	02h
040060             0049*  mos_cd:				EQU	03h
040060             0050*  mos_dir:			EQU	04h
040060             0051*  mos_del:			EQU	05h
040060             0052*  mos_ren:			EQU	06h
040060             0053*  mos_mkdir:			EQU	07h
040060             0054*  mos_sysvars:		EQU	08h
040060             0055*  mos_editline:		EQU	09h
040060             0056*  mos_fopen:			EQU	0Ah
040060             0057*  mos_fclose:			EQU	0Bh
040060             0058*  mos_fgetc:			EQU	0Ch
040060             0059*  mos_fputc:			EQU	0Dh
040060             0060*  mos_feof:			EQU	0Eh
040060             0061*  mos_getError:		EQU	0Fh
040060             0062*  mos_oscli:			EQU	10h
040060             0063*  mos_copy:			EQU	11h
040060             0064*  mos_getrtc:			EQU	12h
040060             0065*  mos_setrtc:			EQU	13h
040060             0066*  mos_setintvector:	EQU	14h
040060             0067*  mos_uopen:			EQU	15h
040060             0068*  mos_uclose:			EQU	16h
040060             0069*  mos_ugetc:			EQU	17h
040060             0070*  mos_uputc:			EQU	18h
040060             0071*  mos_getfil:			EQU	19h
040060             0072*  mos_fread:			EQU	1Ah
040060             0073*  mos_fwrite:			EQU	1Bh
040060             0074*  mos_flseek:			EQU	1Ch
040060             0075*  mos_setkbvector:	EQU	1Dh
040060             0076*  mos_getkbmap:		EQU	1Eh
040060             0077*  
040060             0078*  ; MOS program exit codes
040060             0079*  ;
040060             0080*  EXIT_OK:				EQU  0;	"OK",
040060             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*  ; FatFS file access functions
040060             0103*  ;
040060             0104*  ffs_fopen:			EQU	80h
040060             0105*  ffs_fclose:			EQU	81h
040060             0106*  ffs_fread:			EQU	82h
040060             0107*  ffs_fwrite:			EQU	83h
040060             0108*  ffs_flseek:			EQU	84h
040060             0109*  ffs_ftruncate:		EQU	85h
040060             0110*  ffs_fsync:			EQU	86h
040060             0111*  ffs_fforward:		EQU	87h
040060             0112*  ffs_fexpand:		EQU	88h
040060             0113*  ffs_fgets:			EQU	89h
040060             0114*  ffs_fputc:			EQU	8Ah
040060             0115*  ffs_fputs:			EQU	8Bh
040060             0116*  ffs_fprintf:		EQU	8Ch
040060             0117*  ffs_ftell:			EQU	8Dh
040060             0118*  ffs_feof:			EQU	8Eh
040060             0119*  ffs_fsize:			EQU	8Fh
040060             0120*  ffs_ferror:			EQU	90h
040060             0121*  
040060             0122*  ; FatFS directory access functions
040060             0123*  ;
040060             0124*  ffs_dopen:			EQU	91h
040060             0125*  ffs_dclose:			EQU	92h
040060             0126*  ffs_dread:			EQU	93h
040060             0127*  ffs_dfindfirst:		EQU	94h
040060             0128*  ffs_dfindnext:		EQU	95h
040060             0129*  
040060             0130*  ; FatFS file and directory management functions
040060             0131*  ;
040060             0132*  ffs_stat:			EQU	96h
040060             0133*  ffs_unlink:			EQU	97h
040060             0134*  ffs_rename:			EQU	98h
040060             0135*  ffs_chmod:			EQU	99h
040060             0136*  ffs_utime:			EQU	9Ah
040060             0137*  ffs_mkdir:			EQU	9Bh
040060             0138*  ffs_chdir:			EQU	9Ch
040060             0139*  ffs_chdrive:		EQU	9Dh
040060             0140*  ffs_getcwd:			EQU	9Eh
040060             0141*  
040060             0142*  ; FatFS volume management and system configuration functions
040060             0143*  ;
040060             0144*  ffs_mount:			EQU	9Fh
040060             0145*  ffs_mkfs:			EQU	A0h
040060             0146*  ffs_fdisk:			EQU	A1h
040060             0147*  ffs_getfree:		EQU	A2h
040060             0148*  ffs_getlabel:		EQU	A3h
040060             0149*  ffs_setlabel:		EQU	A4h
040060             0150*  ffs_setcp:			EQU	A5h
040060             0151*  
040060             0152*  ; File access modes
040060             0153*  ;
040060             0154*  fa_read:			EQU	01h
040060             0155*  fa_write:			EQU	02h
040060             0156*  fa_open_existing:	EQU	00h
040060             0157*  fa_create_new:		EQU	04h
040060             0158*  fa_create_always:	EQU	08h
040060             0159*  fa_open_always:		EQU	10h
040060             0160*  fa_open_append:		EQU	30h
040060             0161*  
040060             0162*  ; System variable indexes for api_sysvars
040060             0163*  ; Index into _sysvars in globals.inc
040060             0164*  ;
040060             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*  
040060             0192*  ; Flags for the VPD protocol
040060             0193*  ;
040060             0194*  vdp_pflag_cursor:		EQU	00000001b
040060             0195*  vdp_pflag_scrchar:		EQU	00000010b
040060             0196*  vdp_pflag_point:		EQU	00000100b
040060             0197*  vdp_pflag_audio:		EQU	00001000b
040060             0198*  vdp_pflag_mode:			EQU	00010000b
040060             0199*  vdp_pflag_rtc:			EQU	00100000b
040060             0200*  
040060             0201*  ;
040060             0202*  ; FatFS structures
040060             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*  ;
040060             0205*  ; Object ID and allocation information (FFOBJID)
040060             0206*  ;
040060             0207*  ; Indexes into FFOBJID structure
040060             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*  ;
040060             0215*  ; File object structure (FIL)
040060             0216*  ;
040060             0217*  ; Indexes into FIL structure
040060             0218*  fil_obj:		EQU 0	; 15: Object identifier
040060             0219*  fil_flag:		EQU	15 	;  1: File status flags
040060             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*  ;
040060             0227*  ; Directory object structure (DIR)
040060             0228*  ; Indexes into DIR structure
040060             0229*  dir_obj:		EQU  0	; 15: Object identifier
040060             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*  dir_clust:		EQU	19	;  4: Current cluster
040060             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*  ;
040060             0237*  ; File information structure (FILINFO)
040060             0238*  ;
040060             0239*  ; Indexes into FILINFO structure
040060             0240*  filinfo_fsize:		EQU 0	;   4: File size
040060             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*  ;
040060             0247*  ; Macro for calling the API
040060             0248*  ; Parameters:
040060             0249*  ; - function: One of the function numbers listed above
040060             0250*  ;
040060             0251*  	MACRO	MOSCALL	function
040060             0252*  			LD	A, function
040060             0253*  			RST.LIL	08h
040060             0254*  	ENDMACRO
040060             0030       include "functions.inc"
040060             0001*  
040060             0002*      MACRO printChar char
040060             0003*      LD A, char
040060             0004*      RST.LIL 10h
040060             0005*      ENDMACRO
040060             0006*  
040060             0007*  ; Simulated call to subroutine at HL
040060             0008*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0009*  ; outputs: whatever the subroutine does, including HL and BC
040060             0010*  ; destroys: only what the subroutine does, but always BC
040060             0011*      MACRO callHL
040060             0012*      ld bc,@F ; Address of first instruction after the jump
040060             0013*      push bc ; which constitutes the return address
040060             0014*      jp (hl) ; Jump to the address in HL
040060             0015*  @@:
040060             0016*      ENDMACRO
040060             0017*  
040060             0018*  ; Simulated call to subroutine at IX
040060             0019*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0020*  ; outputs: whatever the subroutine does, including IX and BC
040060             0021*  ; destroys: only what the subroutine does, but always BC
040060             0022*      MACRO callIX
040060             0023*      ld bc,@F ; Address of first instruction after the jump
040060             0024*      push bc ; which constitutes the return address
040060             0025*      jp (ix) ; Jump to the address in IX
040060             0026*  @@:
040060             0027*      ENDMACRO
040060             0028*  
040060             0029*  ; Simulated call to soubroutinte at IY
040060             0030*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0031*  ; outputs: whatever the subroutine does, including IY and BC
040060             0032*  ; destroys: only what the subroutine does, but always BC
040060             0033*      MACRO callIY
040060             0034*      ld bc,@F ; Address of first instruction after the jump
040060             0035*      push bc ; which constitutes the return address
040060             0036*      jp (iy) ; Jump to the address in IY
040060             0037*  @@:
040060             0038*      ENDMACRO
040060             0039*  
040060             0040*  ; put the value in HLU into the accumulator
040060             0041*  ; destroys: af
040060             0042*      MACRO HLU_TO_A
040060             0043*      push hl ; 4 cycles
040060             0044*      inc sp ; 1 cycle
040060             0045*      pop af ; 4 cycles
040060             0046*      dec sp ; 1 cycle
040060             0047*      ; 10 cycles total
040060             0048*      ENDMACRO
040060             0049*  
040060             0050*  A_TO_HLU:
040060             0051*      ; call is 7 cycles
040060 22 6D 00 04 0052*      ld (@scratch),hl ; 7 cycles
040064 32 6F 00 04 0053*      ld (@scratch+2),a ; 5 cycles
040068 2A 6D 00 04 0054*      ld hl,(@scratch) ; 7 cycles
04006C C9          0055*      ret ; 6 cycles
04006D             0056*      ; 25 cycles total
04006D 00 00 00    0057*  @scratch: dl 0
040070             0058*  
040070             0059*      ; TODO: implement this
040070             0060*      ; MACRO A_TO_HLU
040070             0061*      ;     push.s af
040070             0062*      ;     inc sp
040070             0063*      ;     push.s hl
040070             0064*      ;     pop hl
040070             0065*      ;     inc sp
040070             0066*      ;     inc sp
040070             0067*      ; ENDMACRO
040070             0068*  
040070             0069*      MACRO PUSH_ALL
040070             0070*      ex af,af'
040070             0071*      exx
040070             0072*      push af
040070             0073*      push hl
040070             0074*      push bc
040070             0075*      push de
040070             0076*  
040070             0077*      ex af,af'
040070             0078*      exx
040070             0079*      push af
040070             0080*      push hl
040070             0081*      push bc
040070             0082*      push de
040070             0083*      push ix
040070             0084*      push iy
040070             0085*      ENDMACRO
040070             0086*  
040070             0087*      MACRO POP_ALL
040070             0088*      pop iy
040070             0089*      pop ix
040070             0090*      pop de
040070             0091*      pop bc
040070             0092*      pop hl
040070             0093*      pop af
040070             0094*      ex af,af'
040070             0095*      exx
040070             0096*  
040070             0097*      pop de
040070             0098*      pop bc
040070             0099*      pop hl
040070             0100*      pop af
040070             0101*      ex af,af'
040070             0102*      exx
040070             0103*      ENDMACRO
040070             0104*  
040070             0105*  ; Print a zero-terminated string inline with code, e.g.:
040070             0106*  ;
040070             0107*  ;    call printInline
040070             0108*  ;    ASCIZ "Hello, world!\r\n"
040070             0109*  ;
040070             0110*  ; Destroys: HL,AF
040070             0111*  printInline:
040070 E1          0112*      pop hl ; get the return address = pointer to start of string
040071 CD 77 00 04 0113*      call printString ; HL advances to end of string
040075 E5          0114*      push hl ; restore the return address = pointer to end of string
040076 C9          0115*      ret
040077             0116*  
040077             0117*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040077             0118*  ; Print a zero-terminated string
040077             0119*  ; HL: Pointer to string
040077             0120*  printString:
040077 C5          0121*      PUSH BC
040078 01 00 00 00 0122*      LD BC,0
04007C 3E 00       0123*      LD A,0
04007E 5B DF       0124*      RST.LIL 18h
040080 C1          0125*      POP BC
040081 C9          0126*      RET
040082             0127*  ; print a VDU sequence
040082             0128*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
040082             0129*  sendVDUsequence:
040082 C5          0130*      PUSH BC
040083 01 00 00 00 0131*      LD BC, 0
040087 4E          0132*      LD C, (HL)
040088 5B DF       0133*      RST.LIL 18h
04008A C1          0134*      POP BC
04008B C9          0135*      RET
04008C             0136*  ; Print Newline sequence to VDP
04008C             0137*  printNewLine:
04008C F5          0138*      push af ; for some reason rst.lil 10h sets carry flag
04008D 3E 0D       0139*      LD A, '\r'
04008F 5B D7       0140*      RST.LIL 10h
040091 3E 0A       0141*      LD A, '\n'
040093 5B D7       0142*      RST.LIL 10h
040095 F1          0143*      pop af
040096 C9          0144*      RET
040097             0145*  
040097             0146*  ; Print a 24-bit HEX number
040097             0147*  ; HLU: Number to print
040097             0148*  printHex24:
040097             0149*      HLU_TO_A
040097 E5          0001*M     push hl ; 4 cycles
040098 33          0002*M     inc sp ; 1 cycle
040099 F1          0003*M     pop af ; 4 cycles
04009A 3B          0004*M     dec sp ; 1 cycle
04009B             0005*M     ; 10 cycles total
04009B CD A5 00 04 0150*      CALL printHex8
04009F             0151*  ; Print a 16-bit HEX number
04009F             0152*  ; HL: Number to print
04009F             0153*  printHex16:
04009F 7C          0154*      LD A,H
0400A0 CD A5 00 04 0155*      CALL printHex8
0400A4 7D          0156*      LD A,L
0400A5             0157*  ; Print an 8-bit HEX number
0400A5             0158*  ; A: Number to print
0400A5             0159*  printHex8:
0400A5 4F          0160*      LD C,A
0400A6 1F          0161*      RRA
0400A7 1F          0162*      RRA
0400A8 1F          0163*      RRA
0400A9 1F          0164*      RRA
0400AA CD AF 00 04 0165*      CALL @F
0400AE 79          0166*      LD A,C
0400AF             0167*  @@:
0400AF E6 0F       0168*      AND 0Fh
0400B1 C6 90       0169*      ADD A,90h
0400B3 27          0170*      DAA
0400B4 CE 40       0171*      ADC A,40h
0400B6 27          0172*      DAA
0400B7 5B D7       0173*      RST.LIL 10h
0400B9 C9          0174*      RET
0400BA             0175*  
0400BA             0176*  printHexA:
0400BA F5          0177*      push af
0400BB C5          0178*      push bc
0400BC CD A5 00 04 0179*      call printHex8
0400C0 3E 20       0180*      ld a,' '
0400C2 5B D7       0181*      rst.lil 10h
0400C4 C1          0182*      pop bc
0400C5 F1          0183*      pop af
0400C6 C9          0184*      ret
0400C7             0185*  
0400C7             0186*  printHexHL:
0400C7 F5          0187*      push af
0400C8 C5          0188*      push bc
0400C9 CD 9F 00 04 0189*      call printHex16
0400CD 3E 20       0190*      ld a,' '
0400CF 5B D7       0191*      rst.lil 10h
0400D1 C1          0192*      pop bc
0400D2 F1          0193*      pop af
0400D3 C9          0194*      ret
0400D4             0195*  
0400D4             0196*  printHexUHL:
0400D4 F5          0197*      push af
0400D5 C5          0198*      push bc
0400D6 CD 97 00 04 0199*      call printHex24
0400DA 3E 20       0200*      ld a,' '
0400DC 5B D7       0201*      rst.lil 10h
0400DE C1          0202*      pop bc
0400DF F1          0203*      pop af
0400E0 C9          0204*      ret
0400E1             0205*  
0400E1             0206*  printHexAUHL:
0400E1 F5          0207*      push af
0400E2 C5          0208*      push bc
0400E3 CD A5 00 04 0209*      call printHex8
0400E7 3E 2E       0210*      ld a,'.'
0400E9 5B D7       0211*      rst.lil 10h
0400EB CD 97 00 04 0212*      call printHex24
0400EF 3E 20       0213*      ld a,' '
0400F1 5B D7       0214*      rst.lil 10h
0400F3 C1          0215*      pop bc
0400F4 F1          0216*      pop af
0400F5 C9          0217*      ret
0400F6             0218*  
0400F6             0219*  printHexABHL:
0400F6             0220*  ; preserve registers
0400F6 C5          0221*      push bc ; b will be ok c will not
0400F7 F5          0222*      push af ; will get totally destroyed
0400F8             0223*  ; print a
0400F8 CD A5 00 04 0224*      call printHex8
0400FC             0225*  ; print b
0400FC 78          0226*      ld a,b
0400FD CD A5 00 04 0227*      call printHex8
040101             0228*  ; print hl
040101 CD 9F 00 04 0229*      call printHex16
040105             0230*  ; restore registers
040105 F1          0231*      pop af
040106 C1          0232*      pop bc
040107 C9          0233*      ret
040108             0234*  
040108             0235*  printHexBHL:
040108             0236*  ; preserve registers
040108 C5          0237*      push bc ; b will be ok c will not
040109 F5          0238*      push af ; will get totally destroyed
04010A             0239*  ; print b
04010A 78          0240*      ld a,b
04010B CD A5 00 04 0241*      call printHex8
04010F             0242*  ; print hl
04010F CD 9F 00 04 0243*      call printHex16
040113             0244*  ; restore registers
040113 F1          0245*      pop af
040114 C1          0246*      pop bc
040115 C9          0247*      ret
040116             0248*  
040116             0249*  printHexCDE:
040116             0250*  ; preserve registers
040116 C5          0251*      push bc ; b will be ok c will not
040117 F5          0252*      push af ; will get totally destroyed
040118             0253*  ; print c
040118 79          0254*      ld a,c
040119 CD A5 00 04 0255*      call printHex8
04011D             0256*  ; print de
04011D EB          0257*      ex de,hl
04011E CD 9F 00 04 0258*      call printHex16
040122 EB          0259*      ex de,hl
040123             0260*  ; restore registers
040123 F1          0261*      pop af
040124 C1          0262*      pop bc
040125 C9          0263*      ret
040126             0264*  
040126             0265*  printHexUIX:
040126             0266*  ; store everything in scratch
040126 22 9F 05 04 0267*      ld (uhl),hl
04012A ED 43 A2 05 0268*      ld (ubc),bc
       04          
04012F ED 53 A5 05 0269*      ld (ude),de
       04          
040134 DD 22 A8 05 0270*      ld (uix),ix
       04          
040139 FD 22 AB 05 0271*      ld (uiy),iy
       04          
04013E F5          0272*      push af ; fml
04013F             0273*  
04013F 21 36 05 04 0274*      ld hl,str_ixu
040143 CD 77 00 04 0275*      call printString
040147 2A A8 05 04 0276*      ld hl,(uix)
04014B CD 97 00 04 0277*      call printHex24
04014F CD 8C 00 04 0278*      call printNewLine
040153             0279*  
040153             0280*  ; restore everything
040153 2A 9F 05 04 0281*      ld hl, (uhl)
040157 ED 4B A2 05 0282*      ld bc, (ubc)
       04          
04015C ED 5B A5 05 0283*      ld de, (ude)
       04          
040161 DD 2A A8 05 0284*      ld ix, (uix)
       04          
040166 FD 2A AB 05 0285*      ld iy, (uiy)
       04          
04016B F1          0286*      pop af
04016C             0287*  ; all done
04016C C9          0288*      ret
04016D             0289*  
04016D             0290*  ; Print a 0x HEX prefix
04016D             0291*  DisplayHexPrefix:
04016D 3E 30       0292*      LD A, '0'
04016F 5B D7       0293*      RST.LIL 10h
040171 3E 78       0294*      LD A, 'x'
040173 5B D7       0295*      RST.LIL 10h
040175 C9          0296*      RET
040176             0297*  
040176             0298*      MACRO printDecBC
040176             0299*      push hl
040176             0300*      push bc
040176             0301*      pop hl
040176             0302*      call printDec
040176             0303*      pop hl
040176             0304*      ENDMACRO
040176             0305*  
040176             0306*      MACRO printDecDE
040176             0307*      push hl
040176             0308*      push de
040176             0309*      pop hl
040176             0310*      call printDec
040176             0311*      pop hl
040176             0312*      ENDMACRO
040176             0313*  
040176             0314*      MACRO printDecHL
040176             0315*      call printDec
040176             0316*      ENDMACRO
040176             0317*  
040176             0318*      MACRO printDecIX
040176             0319*      push hl
040176             0320*      push ix
040176             0321*      pop hl
040176             0322*      call printDec
040176             0323*      pop hl
040176             0324*      ENDMACRO
040176             0325*  
040176             0326*      MACRO printDecIY
040176             0327*      push hl
040176             0328*      push iy
040176             0329*      pop hl
040176             0330*      call printDec
040176             0331*      pop hl
040176             0332*      ENDMACRO
040176             0333*  
040176             0334*  
040176             0335*  ; Prints the right justified decimal value in HL without leading zeroes
040176             0336*  ; HL : Value to print
040176             0337*  ; preserves all registers and flags
040176             0338*  printDec:
040176             0339*  ; BEGIN MY CODE
040176             0340*  ; back up all the things
040176 F5          0341*      push af
040177 C5          0342*      push bc
040178 D5          0343*      push de
040179 E5          0344*      push hl
04017A             0345*  ; END MY CODE
04017A 11 A2 01 04 0346*      LD DE, _printDecBuffer
04017E CD B2 01 04 0347*      CALL u24_to_ascii
040182             0348*  ; BEGIN MY CODE
040182             0349*  ; replace leading zeroes with spaces
040182 21 A2 01 04 0350*      LD HL, _printDecBuffer
040186 06 07       0351*      ld B, 7 ; if HL was 0, we want to keep the final zero
040188             0352*  @loop:
040188 7E          0353*      LD A, (HL)
040189 FE 30       0354*      CP '0'
04018B C2 95 01 04 0355*      JP NZ, @done
04018F 3E 20       0356*      LD A, ' '
040191 77          0357*      LD (HL), A
040192 23          0358*      INC HL
040193             0359*      ; CALL vdu_cursor_forward
040193 10 F3       0360*      DJNZ @loop
040195             0361*  @done:
040195             0362*  ; END MY CODE
040195 21 A2 01 04 0363*      LD HL, _printDecBuffer
040199 CD 77 00 04 0364*      CALL printString
04019D             0365*  ; BEGIN MY CODE
04019D             0366*  ; restore all the things
04019D E1          0367*      pop hl
04019E D1          0368*      pop de
04019F C1          0369*      pop bc
0401A0 F1          0370*      pop af
0401A1             0371*  ; END MY CODE
0401A1 C9          0372*      RET
0401A2 00 00 00 00 0373*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0401B2             0374*  
0401B2             0375*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0401B2             0376*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0401B2             0377*  ; so it will allways be 8 characters length
0401B2             0378*  ; HL : Value to convert to string
0401B2             0379*  ; DE : pointer to buffer, at least 8 byte + 0
0401B2             0380*  u24_to_ascii:
0401B2 01 80 69 67 0381*      LD BC,-10000000
0401B6 CD E9 01 04 0382*      CALL @one_digit
0401BA 01 C0 BD F0 0383*      LD BC,-1000000
0401BE CD E9 01 04 0384*      CALL @one_digit
0401C2 01 60 79 FE 0385*      LD BC,-100000
0401C6 CD E9 01 04 0386*      CALL @one_digit
0401CA 01 F0 D8 FF 0387*      LD BC,-10000
0401CE CD E9 01 04 0388*      CALL @one_digit
0401D2 01 18 FC FF 0389*      LD BC,-1000
0401D6 CD E9 01 04 0390*      CALL @one_digit
0401DA 01 9C FF FF 0391*      LD BC,-100
0401DE CD E9 01 04 0392*      CALL @one_digit
0401E2 0E F6       0393*      LD C,-10
0401E4 CD E9 01 04 0394*      CALL @one_digit
0401E8 48          0395*      LD C,B
0401E9             0396*  @one_digit:
0401E9 3E 2F       0397*      LD A,'0'-1
0401EB             0398*  @divide_me:
0401EB 3C          0399*      INC A
0401EC 09          0400*      ADD HL,BC
0401ED 38 FC       0401*      JR C,@divide_me
0401EF ED 42       0402*      SBC HL,BC
0401F1 12          0403*      LD (DE),A
0401F2 13          0404*      INC DE
0401F3 C9          0405*      RET
0401F4             0406*  
0401F4             0407*  print_u24:
0401F4 D5          0408*      push de
0401F5 E5          0409*      push hl
0401F6 11 A2 01 04 0410*      ld de,_printDecBuffer
0401FA CD B2 01 04 0411*      call u24_to_ascii
0401FE 21 A2 01 04 0412*      ld hl,_printDecBuffer
040202 CD 77 00 04 0413*      call printString
040206 3E 20       0414*      ld a,' '
040208 5B D7       0415*      rst.lil 10h
04020A E1          0416*      pop hl
04020B D1          0417*      pop de
04020C C9          0418*      ret
04020D             0419*  
04020D             0420*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04020D             0421*  ; HL : Value to convert to string (integer part in H, fractional part in L)
04020D             0422*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04020D             0423*  u168_to_ascii:
04020D             0424*  ; add a leading space to make room for sign flag if needed
04020D 3E 20       0425*      ld a,' '
04020F 12          0426*      ld (de),a
040210 13          0427*      inc de
040211             0428*  ; Convert integer part
040211 E5          0429*      push hl ; Save HL (we’ll need the fractional part later)
040212 CD FB 06 04 0430*      call hlu_udiv256 ; Shift to get integer portion in HL
040216 01 F0 D8 FF 0431*      ld bc, -10000
04021A CD 3D 02 04 0432*      call @one_int
04021E 01 18 FC FF 0433*      ld bc, -1000
040222 CD 3D 02 04 0434*      call @one_int
040226 01 9C FF FF 0435*      ld bc, -100
04022A CD 3D 02 04 0436*      call @one_int
04022E 0E F6       0437*      ld c, -10
040230 CD 3D 02 04 0438*      call @one_int
040234 48          0439*      ld c, b
040235 CD 3D 02 04 0440*      call @one_int
040239 C3 48 02 04 0441*      jp @frac ; Jump to fractional part conversion
04023D             0442*  @one_int:
04023D 3E 2F       0443*      ld a, '0' - 1 ; Start ASCII character at '0'
04023F             0444*  @divide_me:
04023F 3C          0445*      inc a
040240 09          0446*      add hl, bc ; Accumulate until overflow
040241 38 FC       0447*      jr c, @divide_me
040243 ED 42       0448*      sbc hl, bc ; Remove excess after overflow
040245 12          0449*      ld (de), a ; Store ASCII digit
040246 13          0450*      inc de
040247 C9          0451*      ret
040248             0452*  ; Convert fractional part
040248             0453*  @frac:
040248 3E 2E       0454*      ld a, '.' ; Decimal point
04024A 12          0455*      ld (de), a
04024B 13          0456*      inc de
04024C E1          0457*      pop hl ; Restore HL with original fraction
04024D 06 03       0458*      ld b, 3 ; Loop counter for 3 fractional digits
04024F             0459*  @frac_loop:
04024F 26 0A       0460*      ld h, 10 ; Load multiplier for fractional part
040251 ED 6C       0461*      mlt hl ; Multiply by 10, result in HL (H holds the integer part)
040253 3E 30       0462*      ld a, '0'
040255 84          0463*      add a, h ; Convert integer part to ASCII
040256 12          0464*      ld (de), a
040257 13          0465*      inc de
040258 10 F5       0466*      djnz @frac_loop ; Repeat for each fractional digit
04025A             0467*  ; Add null terminator
04025A AF          0468*      xor a ; Null terminator
04025B 12          0469*      ld (de), a
04025C C9          0470*      ret
04025D             0471*  
04025D             0472*  print_u168:
04025D D5          0473*      push de
04025E E5          0474*      push hl
04025F 11 A2 01 04 0475*      ld de,_printDecBuffer
040263 CD 0D 02 04 0476*      call u168_to_ascii
040267 21 A2 01 04 0477*      ld hl,_printDecBuffer
04026B CD 77 00 04 0478*      call printString
04026F E1          0479*      pop hl
040270 D1          0480*      pop de
040271 C9          0481*      ret
040272             0482*  
040272             0483*  ; signed version of u168_to_ascii
040272             0484*  s168_to_ascii:
040272 D5          0485*      push de ; save starting address of buffer
040273 CD 94 06 04 0486*      call hlu_abs
040277 F5          0487*      push af ; save sign flag
040278 CD 0D 02 04 0488*      call u168_to_ascii
04027C F1          0489*      pop af ; restore sign flag
04027D D1          0490*      pop de ; restore starting address of buffer
04027E F0          0491*      ret p ; hlu was positive so nothing to do
04027F 3E 2D       0492*      ld a,'-'
040281 12          0493*      ld (de),a
040282 C9          0494*      ret
040283             0495*  
040283             0496*  print_s168:
040283 D5          0497*      push de
040284 E5          0498*      push hl
040285 11 A2 01 04 0499*      ld de,_printDecBuffer
040289 CD 72 02 04 0500*      call s168_to_ascii
04028D 21 A2 01 04 0501*      ld hl,_printDecBuffer
040291 CD 77 00 04 0502*      call printString
040295 E1          0503*      pop hl
040296 D1          0504*      pop de
040297 C9          0505*      ret
040298             0506*  
040298             0507*  print_s168_hl:
040298 F5          0508*      push af
040299 E5          0509*      push hl
04029A CD 83 02 04 0510*      call print_s168
04029E 3E 20       0511*      ld a,' '
0402A0 5B D7       0512*      rst.lil 10h
0402A2 E1          0513*      pop hl
0402A3 F1          0514*      pop af
0402A4 C9          0515*      ret
0402A5             0516*  
0402A5             0517*  print_s168_bc:
0402A5 F5          0518*      push af
0402A6 C5          0519*      push bc
0402A7 E5          0520*      push hl
0402A8 C5          0521*      push bc
0402A9 E1          0522*      pop hl
0402AA CD 83 02 04 0523*      call print_s168
0402AE 3E 20       0524*      ld a,' '
0402B0 5B D7       0525*      rst.lil 10h
0402B2 E1          0526*      pop hl
0402B3 C1          0527*      pop bc
0402B4 F1          0528*      pop af
0402B5 C9          0529*      ret
0402B6             0530*  
0402B6             0531*  print_s168_de:
0402B6 F5          0532*      push af
0402B7 D5          0533*      push de
0402B8 E5          0534*      push hl
0402B9 EB          0535*      ex de,hl
0402BA CD 83 02 04 0536*      call print_s168
0402BE 3E 20       0537*      ld a,' '
0402C0 5B D7       0538*      rst.lil 10h
0402C2 E1          0539*      pop hl
0402C3 D1          0540*      pop de
0402C4 F1          0541*      pop af
0402C5 C9          0542*      ret
0402C6             0543*  
0402C6             0544*  print_s168_hl_bc_de:
0402C6 F5          0545*      push af
0402C7 C5          0546*      push bc
0402C8 D5          0547*      push de
0402C9 E5          0548*      push hl
0402CA CD 83 02 04 0549*      call print_s168
0402CE 3E 20       0550*      ld a,' '
0402D0 5B D7       0551*      rst.lil 10h
0402D2 C5          0552*      push bc
0402D3 E1          0553*      pop hl
0402D4 CD 83 02 04 0554*      call print_s168
0402D8 3E 20       0555*      ld a,' '
0402DA 5B D7       0556*      rst.lil 10h
0402DC EB          0557*      ex de,hl
0402DD CD 83 02 04 0558*      call print_s168
0402E1 3E 20       0559*      ld a,' '
0402E3 5B D7       0560*      rst.lil 10h
0402E5 E1          0561*      pop hl
0402E6 D1          0562*      pop de
0402E7 C1          0563*      pop bc
0402E8 F1          0564*      pop af
0402E9 C9          0565*      ret
0402EA             0566*  
0402EA             0567*  print_s168_bc_de:
0402EA F5          0568*      push af
0402EB C5          0569*      push bc
0402EC D5          0570*      push de
0402ED C5          0571*      push bc
0402EE E1          0572*      pop hl
0402EF CD 83 02 04 0573*      call print_s168
0402F3 3E 20       0574*      ld a,' '
0402F5 5B D7       0575*      rst.lil 10h
0402F7 EB          0576*      ex de,hl
0402F8 CD 83 02 04 0577*      call print_s168
0402FC 3E 20       0578*      ld a,' '
0402FE 5B D7       0579*      rst.lil 10h
040300 E1          0580*      pop hl
040301 D1          0581*      pop de
040302 C1          0582*      pop bc
040303 F1          0583*      pop af
040304 C9          0584*      ret
040305             0585*  
040305             0586*  print_s168_a:
040305 F5          0587*      push af
040306 C5          0588*      push bc
040307 E5          0589*      push hl
040308 21 00 00 00 0590*      ld hl,0
04030C 6F          0591*      ld l,a
04030D CD 98 02 04 0592*      call print_s168_hl
040311 E1          0593*      pop hl
040312 C1          0594*      pop bc
040313 F1          0595*      pop af
040314 C9          0596*      ret
040315             0597*  
040315             0598*  ; #### new functions added by Brandon R. Gates ####
040315             0599*  
040315             0600*  ; print the binary representation of the 8-bit value in a
040315             0601*  ; destroys a, hl, bc
040315             0602*  printBin8:
040315 06 08       0603*      ld b,8 ; loop counter for 8 bits
040317 21 32 03 04 0604*      ld hl,@cmd ; set hl to the low byte of the output string
04031B             0605*      ; (which will be the high bit of the value in a)
04031B             0606*  @loop:
04031B 07          0607*      rlca ; put the next highest bit into carry
04031C 38 04       0608*      jr c,@one
04031E 36 30       0609*      ld (hl),'0'
040320 18 02       0610*      jr @next_bit
040322             0611*  @one:
040322 36 31       0612*      ld (hl),'1'
040324             0613*  @next_bit:
040324 23          0614*      inc hl
040325 10 F4       0615*      djnz @loop
040327             0616*  ; print it
040327 21 32 03 04 0617*      ld hl,@cmd
04032B 01 08 00 00 0618*      ld bc,@end-@cmd
04032F 5B DF       0619*      rst.lil $18
040331 C9          0620*      ret
040332             0621*  @cmd: ds 8 ; eight bytes for eight bits
04033A             0622*  @end:
04033A             0623*  
04033A             0624*  ; print the binary representation of the 8-bit value in a
04033A             0625*  ; in reverse order (lsb first)
04033A             0626*  ; destroys a, hl, bc
04033A             0627*  printBin8Rev:
04033A 06 08       0628*      ld b,8 ; loop counter for 8 bits
04033C 21 57 03 04 0629*      ld hl,@cmd ; set hl to the low byte of the output string
040340             0630*      ; (which will be the high bit of the value in a)
040340             0631*  @loop:
040340 0F          0632*      rrca ; put the next lowest bit into carry
040341 38 04       0633*      jr c,@one
040343 36 30       0634*      ld (hl),'0'
040345 18 02       0635*      jr @next_bit
040347             0636*  @one:
040347 36 31       0637*      ld (hl),'1'
040349             0638*  @next_bit:
040349 23          0639*      inc hl
04034A 10 F4       0640*      djnz @loop
04034C             0641*  ; print it
04034C 21 57 03 04 0642*      ld hl,@cmd
040350 01 08 00 00 0643*      ld bc,@end-@cmd
040354 5B DF       0644*      rst.lil $18
040356 C9          0645*      ret
040357             0646*  @cmd: ds 8 ; eight bytes for eight bits
04035F             0647*  @end:
04035F             0648*  
04035F             0649*  ; print registers to screen in hexidecimal format
04035F             0650*  ; inputs: none
04035F             0651*  ; outputs: values of every register printed to screen
04035F             0652*  ;    values of each register in global scratch memory
04035F             0653*  ; destroys: nothing
04035F             0654*  stepRegistersHex:
04035F             0655*  ; store everything in scratch
04035F 22 9F 05 04 0656*      ld (uhl),hl
040363 ED 43 A2 05 0657*      ld (ubc),bc
       04          
040368 ED 53 A5 05 0658*      ld (ude),de
       04          
04036D DD 22 A8 05 0659*      ld (uix),ix
       04          
040372 FD 22 AB 05 0660*      ld (uiy),iy
       04          
040377 F5          0661*      push af ; fml
040378 E1          0662*      pop hl ; thanks, zilog
040379 22 9C 05 04 0663*      ld (uaf),hl
04037D F5          0664*      push af ; dammit
04037E             0665*  
04037E             0666*  ; home the cursor
04037E             0667*      ; call vdu_home_cursor
04037E             0668*  
04037E             0669*  ; print each register
04037E 21 22 05 04 0670*      ld hl,str_afu
040382 CD 77 00 04 0671*      call printString
040386 2A 9C 05 04 0672*      ld hl,(uaf)
04038A CD 97 00 04 0673*      call printHex24
04038E CD 8C 00 04 0674*      call printNewLine
040392             0675*  
040392 21 27 05 04 0676*      ld hl,str_hlu
040396 CD 77 00 04 0677*      call printString
04039A 2A 9F 05 04 0678*      ld hl,(uhl)
04039E CD 97 00 04 0679*      call printHex24
0403A2 CD 8C 00 04 0680*      call printNewLine
0403A6             0681*  
0403A6 21 2C 05 04 0682*      ld hl,str_bcu
0403AA CD 77 00 04 0683*      call printString
0403AE 2A A2 05 04 0684*      ld hl,(ubc)
0403B2 CD 97 00 04 0685*      call printHex24
0403B6 CD 8C 00 04 0686*      call printNewLine
0403BA             0687*  
0403BA 21 31 05 04 0688*      ld hl,str_deu
0403BE CD 77 00 04 0689*      call printString
0403C2 2A A5 05 04 0690*      ld hl,(ude)
0403C6 CD 97 00 04 0691*      call printHex24
0403CA CD 8C 00 04 0692*      call printNewLine
0403CE             0693*  
0403CE 21 36 05 04 0694*      ld hl,str_ixu
0403D2 CD 77 00 04 0695*      call printString
0403D6 2A A8 05 04 0696*      ld hl,(uix)
0403DA CD 97 00 04 0697*      call printHex24
0403DE CD 8C 00 04 0698*      call printNewLine
0403E2             0699*  
0403E2 21 3B 05 04 0700*      ld hl,str_iyu
0403E6 CD 77 00 04 0701*      call printString
0403EA 2A AB 05 04 0702*      ld hl,(uiy)
0403EE CD 97 00 04 0703*      call printHex24
0403F2 CD 8C 00 04 0704*      call printNewLine
0403F6             0705*  
0403F6             0706*      ; call vsync
0403F6             0707*  
0403F6 CD 8C 00 04 0708*      call printNewLine
0403FA             0709*  
0403FA             0710*  ; check for right shift key and quit if pressed
0403FA             0711*      MOSCALL mos_getkbmap
0403FA 3E 1E       0001*M 			LD	A, function
0403FC 5B CF       0002*M 			RST.LIL	08h
0403FE             0712*  @stayhere:
0403FE             0713*  ; 7 RightShift
0403FE DD CB 00 76 0714*      bit 6,(ix+0)
040402 20 02       0715*      jr nz,@RightShift
040404 18 F8       0716*      jr @stayhere
040406             0717*  @RightShift:
040406 DD CB 0E 86 0718*      res 0,(ix+14) ; debounce the key (hopefully)
04040A 3E 80       0719*      ld a,%10000000
04040C             0720*      ; call multiPurposeDelay
04040C             0721*  
04040C             0722*  ; restore everything
04040C 2A 9F 05 04 0723*      ld hl, (uhl)
040410 ED 4B A2 05 0724*      ld bc, (ubc)
       04          
040415 ED 5B A5 05 0725*      ld de, (ude)
       04          
04041A DD 2A A8 05 0726*      ld ix, (uix)
       04          
04041F FD 2A AB 05 0727*      ld iy, (uiy)
       04          
040424 F1          0728*      pop af
040425             0729*  ; all done
040425 C9          0730*      ret
040426             0731*  
040426             0732*  ; print registers to screen in hexidecimal format
040426             0733*  ; inputs: none
040426             0734*  ; outputs: values of every register printed to screen
040426             0735*  ;    values of each register in global scratch memory
040426             0736*  ; destroys: nothing
040426             0737*  dumpRegistersHex:
040426             0738*  ; store everything in scratch
040426 22 9F 05 04 0739*      ld (uhl),hl
04042A ED 43 A2 05 0740*      ld (ubc),bc
       04          
04042F ED 53 A5 05 0741*      ld (ude),de
       04          
040434 DD 22 A8 05 0742*      ld (uix),ix
       04          
040439 FD 22 AB 05 0743*      ld (uiy),iy
       04          
04043E F5          0744*      push af ; fml
04043F E1          0745*      pop hl ; thanks, zilog
040440 22 9C 05 04 0746*      ld (uaf),hl
040444 F5          0747*      push af ; dammit
040445             0748*  
040445             0749*  ; home the cursor
040445             0750*      ; call vdu_home_cursor
040445             0751*      ; call printNewLine
040445             0752*  
040445             0753*  ; print each register
040445 21 22 05 04 0754*      ld hl,str_afu
040449 CD 77 00 04 0755*      call printString
04044D 2A 9C 05 04 0756*      ld hl,(uaf)
040451 CD 97 00 04 0757*      call printHex24
040455             0758*      ; call printNewLine
040455             0759*  
040455 21 27 05 04 0760*      ld hl,str_hlu
040459 CD 77 00 04 0761*      call printString
04045D 2A 9F 05 04 0762*      ld hl,(uhl)
040461 CD 97 00 04 0763*      call printHex24
040465             0764*      ; call printNewLine
040465             0765*  
040465 21 2C 05 04 0766*      ld hl,str_bcu
040469 CD 77 00 04 0767*      call printString
04046D 2A A2 05 04 0768*      ld hl,(ubc)
040471 CD 97 00 04 0769*      call printHex24
040475             0770*      ; call printNewLine
040475             0771*  
040475 21 31 05 04 0772*      ld hl,str_deu
040479 CD 77 00 04 0773*      call printString
04047D 2A A5 05 04 0774*      ld hl,(ude)
040481 CD 97 00 04 0775*      call printHex24
040485             0776*      ; call printNewLine
040485             0777*  
040485 21 36 05 04 0778*      ld hl,str_ixu
040489 CD 77 00 04 0779*      call printString
04048D 2A A8 05 04 0780*      ld hl,(uix)
040491 CD 97 00 04 0781*      call printHex24
040495             0782*      ; call printNewLine
040495             0783*  
040495 21 3B 05 04 0784*      ld hl,str_iyu
040499 CD 77 00 04 0785*      call printString
04049D 2A AB 05 04 0786*      ld hl,(uiy)
0404A1 CD 97 00 04 0787*      call printHex24
0404A5             0788*      ; call printNewLine
0404A5             0789*  
0404A5             0790*      ; call vdu_vblank
0404A5             0791*  
0404A5 CD 8C 00 04 0792*      call printNewLine
0404A9             0793*  ; restore everything
0404A9 2A 9F 05 04 0794*      ld hl, (uhl)
0404AD ED 4B A2 05 0795*      ld bc, (ubc)
       04          
0404B2 ED 5B A5 05 0796*      ld de, (ude)
       04          
0404B7 DD 2A A8 05 0797*      ld ix, (uix)
       04          
0404BC FD 2A AB 05 0798*      ld iy, (uiy)
       04          
0404C1 F1          0799*      pop af
0404C2             0800*  ; all done
0404C2 C9          0801*      ret
0404C3             0802*  
0404C3             0803*  dumpRegistersHexPrime:
0404C3 D9          0804*      exx
0404C4 08          0805*      ex af,af'
0404C5 CD 26 04 04 0806*      call dumpRegistersHex
0404C9 08          0807*      ex af,af'
0404CA D9          0808*      exx
0404CB C9          0809*      ret
0404CC             0810*  
0404CC             0811*  ; additionally dump prime registers
0404CC             0812*  ; inputs: none
0404CC             0813*  ; outputs: values of every register printed to screen
0404CC             0814*  ; destroys: nothing
0404CC             0815*  dumpRegistersHexAll:
0404CC CD 26 04 04 0816*      call dumpRegistersHex
0404D0 08          0817*      ex af,af'
0404D1 D9          0818*      exx
0404D2 CD 26 04 04 0819*      call dumpRegistersHex
0404D6 08          0820*      ex af,af'
0404D7 D9          0821*      exx
0404D8 C9          0822*      ret
0404D9             0823*  
0404D9             0824*  ; print hlu to screen in hexidecimal format
0404D9             0825*  ; inputs: none
0404D9             0826*  ; destroys: nothing
0404D9             0827*  print_hex_hl:
0404D9 F5          0828*      push af
0404DA E5          0829*      push hl
0404DB 21 27 05 04 0830*      ld hl,str_hlu
0404DF CD 77 00 04 0831*      call printString
0404E3 E1          0832*      pop hl
0404E4 E5          0833*      push hl
0404E5 CD 97 00 04 0834*      call printHex24
0404E9 3E 20       0835*      ld a,' '
0404EB 5B D7       0836*      rst.lil 10h
0404ED E1          0837*      pop hl
0404EE F1          0838*      pop af
0404EF C9          0839*      ret
0404F0             0840*  
0404F0             0841*  ; print bcu to screen in hexidecimal format
0404F0             0842*  ; inputs: none
0404F0             0843*  ; destroys: nothing
0404F0             0844*  print_hex_bc:
0404F0 F5          0845*      push af
0404F1 E5          0846*      push hl
0404F2 C5          0847*      push bc
0404F3 21 2C 05 04 0848*      ld hl,str_bcu
0404F7 CD 77 00 04 0849*      call printString
0404FB E1          0850*      pop hl
0404FC E5          0851*      push hl
0404FD CD 97 00 04 0852*      call printHex24
040501 3E 20       0853*      ld a,' '
040503 5B D7       0854*      rst.lil 10h
040505 C1          0855*      pop bc
040506 E1          0856*      pop hl
040507 F1          0857*      pop af
040508 C9          0858*      ret
040509             0859*  
040509             0860*  ; print deu to screen in hexidecimal format
040509             0861*  ; inputs: none
040509             0862*  ; destroys: nothing
040509             0863*  print_hex_de:
040509 F5          0864*      push af
04050A E5          0865*      push hl
04050B D5          0866*      push de
04050C 21 31 05 04 0867*      ld hl,str_deu
040510 CD 77 00 04 0868*      call printString
040514 E1          0869*      pop hl
040515 E5          0870*      push hl
040516 CD 97 00 04 0871*      call printHex24
04051A 3E 20       0872*      ld a,' '
04051C 5B D7       0873*      rst.lil 10h
04051E D1          0874*      pop de
04051F E1          0875*      pop hl
040520 F1          0876*      pop af
040521 C9          0877*      ret
040522             0878*  
040522 20 61 66 3D 0879*  str_afu: db " af=",0
       00          
040527 20 68 6C 3D 0880*  str_hlu: db " hl=",0
       00          
04052C 20 62 63 3D 0881*  str_bcu: db " bc=",0
       00          
040531 20 64 65 3D 0882*  str_deu: db " de=",0
       00          
040536 20 69 78 3D 0883*  str_ixu: db " ix=",0
       00          
04053B 20 69 79 3D 0884*  str_iyu: db " iy=",0
       00          
040540             0885*  
040540             0886*  ; print udeuhl to screen in hexidecimal format
040540             0887*  ; inputs: none
040540             0888*  ; outputs: concatenated hexidecimal udeuhl
040540             0889*  ; destroys: nothing
040540             0890*  dumpUDEUHLHex:
040540             0891*  ; store everything in scratch
040540 22 9F 05 04 0892*      ld (uhl),hl
040544 ED 43 A2 05 0893*      ld (ubc),bc
       04          
040549 ED 53 A5 05 0894*      ld (ude),de
       04          
04054E DD 22 A8 05 0895*      ld (uix),ix
       04          
040553 FD 22 AB 05 0896*      ld (uiy),iy
       04          
040558 F5          0897*      push af
040559             0898*  
040559             0899*  ; print each register
040559             0900*  
040559 21 93 05 04 0901*      ld hl,str_udeuhl
04055D CD 77 00 04 0902*      call printString
040561 2A A5 05 04 0903*      ld hl,(ude)
040565 CD 97 00 04 0904*      call printHex24
040569 3E 2E       0905*      ld a,'.' ; print a dot to separate the values
04056B 5B D7       0906*      rst.lil 10h
04056D 2A 9F 05 04 0907*      ld hl,(uhl)
040571 CD 97 00 04 0908*      call printHex24
040575 CD 8C 00 04 0909*      call printNewLine
040579             0910*  
040579             0911*  ; restore everything
040579 2A 9F 05 04 0912*      ld hl, (uhl)
04057D ED 4B A2 05 0913*      ld bc, (ubc)
       04          
040582 ED 5B A5 05 0914*      ld de, (ude)
       04          
040587 DD 2A A8 05 0915*      ld ix, (uix)
       04          
04058C FD 2A AB 05 0916*      ld iy, (uiy)
       04          
040591 F1          0917*      pop af
040592             0918*  ; all done
040592 C9          0919*      ret
040593             0920*  
040593 75 64 65 2E 0921*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04059C             0922*  
04059C             0923*  ; global scratch memory for registers
04059C 00 00 00    0924*  uaf: dl 0
04059F 00 00 00    0925*  uhl: dl 0
0405A2 00 00 00    0926*  ubc: dl 0
0405A5 00 00 00    0927*  ude: dl 0
0405A8 00 00 00    0928*  uix: dl 0
0405AB 00 00 00    0929*  uiy: dl 0
0405AE 00 00 00    0930*  usp: dl 0
0405B1 00 00 00    0931*  upc: dl 0
0405B4             0932*  
0405B4             0933*  ; inputs: whatever is in the flags register
0405B4             0934*  ; outputs: binary representation of flags
0405B4             0935*  ;          with a header so we know which is what
0405B4             0936*  ; destroys: nothing
0405B4             0937*  ; preserves: everything
0405B4             0938*  dumpFlags:
0405B4             0939*  ; first we curse zilog for not giving direct access to flags
0405B4 F5          0940*      push af ; this is so we can send it back unharmed
0405B5 F5          0941*      push af ; this is so we can pop it to hl
0405B6             0942*  ; store everything in scratch
0405B6 22 9F 05 04 0943*      ld (uhl),hl
0405BA ED 43 A2 05 0944*      ld (ubc),bc
       04          
0405BF ED 53 A5 05 0945*      ld (ude),de
       04          
0405C4 DD 22 A8 05 0946*      ld (uix),ix
       04          
0405C9 FD 22 AB 05 0947*      ld (uiy),iy
       04          
0405CE             0948*  ; next we print the header
0405CE 21 FA 05 04 0949*      ld hl,@header
0405D2 CD 77 00 04 0950*      call printString
0405D6 E1          0951*      pop hl ; flags are now in l
0405D7 7D          0952*      ld a,l ; flags are now in a
0405D8 CD 15 03 04 0953*      call printBin8
0405DC CD 8C 00 04 0954*      call printNewLine
0405E0             0955*  ; restore everything
0405E0 2A 9F 05 04 0956*      ld hl, (uhl)
0405E4 ED 4B A2 05 0957*      ld bc, (ubc)
       04          
0405E9 ED 5B A5 05 0958*      ld de, (ude)
       04          
0405EE DD 2A A8 05 0959*      ld ix, (uix)
       04          
0405F3 FD 2A AB 05 0960*      ld iy, (uiy)
       04          
0405F8 F1          0961*      pop af ; send her home the way she came
0405F9 C9          0962*      ret
0405FA             0963*  ; Bit 7 (S): Sign flag
0405FA             0964*  ; Bit 6 (Z): Zero flag
0405FA             0965*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0405FA             0966*  ; Bit 4 (H): Half Carry flag
0405FA             0967*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0405FA             0968*  ; Bit 2 (PV): Parity/Overflow flag
0405FA             0969*  ; Bit 1 (N): Subtract flag
0405FA             0970*  ; Bit 0 (C): Carry flag
0405FA 53 5A 78 48 0971*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
040605             0972*  
040605             0973*  ; set all the bits in the flag register
040605             0974*  ; more of an academic exercise than anything useful
040605             0975*  ; inputs; none
040605             0976*  ; outputs; a=0,f=255
040605             0977*  ; destroys: flags, hl
040605             0978*  ; preserves: a, because why not
040605             0979*  setAllFlags:
040605 21 FF 00 00 0980*      ld hl,255
040609 67          0981*      ld h,a ; four cycles to preserve a is cheap
04060A E5          0982*      push hl
04060B F1          0983*      pop af
04060C C9          0984*      ret
04060D             0985*  
04060D             0986*  ; reset all the bits in the flag register
04060D             0987*  ; unlike its inverse counterpart, this may actually be useful
04060D             0988*  ; inputs; none
04060D             0989*  ; outputs; a=0,f=0
04060D             0990*  ; destroys: flags, hl
04060D             0991*  ; preserves: a, because why not
04060D             0992*  resetAllFlags:
04060D 21 00 00 00 0993*      ld hl,0
040611 67          0994*      ld h,a ; four cycles to preserve a is cheap
040612 E5          0995*      push hl
040613 F1          0996*      pop af
040614 C9          0997*      ret
040615             0998*  
040615             0999*  ; wait until user presses a key
040615             1000*  ; inputs: none
040615             1001*  ; outputs: ascii code of key pressed in a
040615             1002*  ; destroys: af,ix
040615             1003*  waitKeypress:
040615             1004*      MOSCALL mos_getkey
040615 3E 00       0001*M 			LD	A, function
040617 5B CF       0002*M 			RST.LIL	08h
040619 C9          1005*      ret
04061A             1006*  
04061A             1007*  ; print bytes from an address to the screen in hexidecimal format
04061A             1008*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04061A             1009*  ; outputs: values of each byte printed to screen separated by spaces
04061A             1010*  ; destroys: nothing
04061A             1011*  dumpMemoryHex:
04061A             1012*  ; save registers to the stack
04061A C5          1013*      push bc
04061B E5          1014*      push hl
04061C F5          1015*      push af
04061D             1016*  
04061D             1017*  ; print the address and separator
04061D CD 97 00 04 1018*      call printHex24
040621 3E 3A       1019*      ld a,':'
040623 5B D7       1020*      rst.lil 10h
040625 3E 20       1021*      ld a,' '
040627 5B D7       1022*      rst.lil 10h
040629             1023*  
040629             1024*  ; set b to be our loop counter
040629 F1          1025*      pop af
04062A 47          1026*      ld b,a
04062B E1          1027*      pop hl
04062C E5          1028*      push hl
04062D F5          1029*      push af
04062E             1030*  @loop:
04062E             1031*  ; print the byte
04062E 7E          1032*      ld a,(hl)
04062F CD A5 00 04 1033*      call printHex8
040633             1034*  ; print a space
040633 3E 20       1035*      ld a,' '
040635 5B D7       1036*      rst.lil 10h
040637 23          1037*      inc hl
040638 10 F4       1038*      djnz @loop
04063A CD 8C 00 04 1039*      call printNewLine
04063E             1040*  
04063E             1041*  ; restore everything
04063E F1          1042*      pop af
04063F E1          1043*      pop hl
040640 C1          1044*      pop bc
040641             1045*  
040641             1046*  ; all done
040641 C9          1047*      ret
040642             1048*  
040642             1049*  
040642             1050*  ; print bytes from an address to the screen in binary format
040642             1051*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040642             1052*  ; outputs: values of each byte printed to screen separated by spaces
040642             1053*  ; destroys: nothing
040642             1054*  dumpMemoryBin:
040642             1055*  ; save all registers to the stack
040642 F5          1056*      push af
040643 C5          1057*      push bc
040644 D5          1058*      push de
040645 E5          1059*      push hl
040646 DD E5       1060*      push ix
040648 FD E5       1061*      push iy
04064A             1062*  
04064A             1063*  ; set b to be our loop counter
04064A 47          1064*      ld b,a
04064B             1065*  @loop:
04064B             1066*  ; print the byte
04064B 7E          1067*      ld a,(hl)
04064C E5          1068*      push hl
04064D C5          1069*      push bc
04064E CD 15 03 04 1070*      call printBin8
040652 C1          1071*      pop bc
040653             1072*  ; print a space
040653 3E 20       1073*      ld a,' '
040655 5B D7       1074*      rst.lil 10h
040657 E1          1075*      pop hl
040658 23          1076*      inc hl
040659 10 F0       1077*      djnz @loop
04065B CD 8C 00 04 1078*      call printNewLine
04065F             1079*  
04065F             1080*  ; restore everything
04065F FD E1       1081*      pop iy
040661 DD E1       1082*      pop ix
040663 E1          1083*      pop hl
040664 D1          1084*      pop de
040665 C1          1085*      pop bc
040666 F1          1086*      pop af
040667             1087*  ; all done
040667 C9          1088*      ret
040668             1089*  
040668             1090*  ; print bytes from an address to the screen in binary format
040668             1091*  ; with the bits of each byte in reverse order (lsb first)
040668             1092*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040668             1093*  ; outputs: values of each byte printed to screen separated by spaces
040668             1094*  ; destroys: nothing
040668             1095*  dumpMemoryBinRev:
040668             1096*  ; save all registers to the stack
040668 F5          1097*      push af
040669 C5          1098*      push bc
04066A D5          1099*      push de
04066B E5          1100*      push hl
04066C DD E5       1101*      push ix
04066E FD E5       1102*      push iy
040670             1103*  
040670             1104*  ; set b to be our loop counter
040670 47          1105*      ld b,a
040671             1106*  @loop:
040671             1107*  ; print the byte
040671 7E          1108*      ld a,(hl)
040672 E5          1109*      push hl
040673 C5          1110*      push bc
040674 CD 3A 03 04 1111*      call printBin8Rev
040678 C1          1112*      pop bc
040679             1113*  ; print a space
040679 3E 20       1114*      ld a,' '
04067B 5B D7       1115*      rst.lil 10h
04067D E1          1116*      pop hl
04067E 23          1117*      inc hl
04067F 10 F0       1118*      djnz @loop
040681 CD 8C 00 04 1119*      call printNewLine
040685             1120*  
040685             1121*  ; restore everything
040685 FD E1       1122*      pop iy
040687 DD E1       1123*      pop ix
040689 E1          1124*      pop hl
04068A D1          1125*      pop de
04068B C1          1126*      pop bc
04068C F1          1127*      pop af
04068D             1128*  ; all done
04068D C9          1129*      ret
04068E             0031       include "maths.inc"
04068E             0001*  ; test the sign of HL
04068E             0002*  ; inputs: HL obviously
04068E             0003*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
04068E             0004*  ; destroys: flags
04068E             0005*      MACRO sign_hlu
04068E             0006*      add hl,de
04068E             0007*      or a
04068E             0008*      sbc hl,de
04068E             0009*      ENDMACRO
04068E             0010*  
04068E             0011*  
04068E             0012*  ;------------------------------------------------------------------------
04068E             0013*  ; Scratch area for calculations
04068E             0014*  ;------------------------------------------------------------------------
04068E 00 00 00    0015*  scratch1: dw24 0 ;bit manipulation buffer 1
040691 00 00 00    0016*  scratch2: dw24 0 ;bit manipulation buffer 2
040694             0017*  
040694             0018*  ; absolute value of hlu
040694             0019*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040694             0020*  ;         s1,z0,pv0,n1,c0 if hlu was negative
040694             0021*  ;         s0,z1,pv0,n1,c0 if hlu was zero
040694             0022*  ;         s0,z0,pv0,n1,c0 if hlu was positive
040694             0023*  ; destroys: a
040694             0024*  hlu_abs:
040694 19          0025*      add hl,de
040695 B7          0026*      or a
040696 ED 52       0027*      sbc hl,de
040698 FA 9D 06 04 0028*      jp m,@is_neg
04069C C9          0029*      ret ; hlu is positive or zero so we're done
04069D             0030*  @is_neg:
04069D F5          0031*      push af ; otherwise, save current flags for return
04069E CD A4 06 04 0032*      call neg_hlu ; negate hlu
0406A2 F1          0033*      pop af ; get back flags
0406A3 C9          0034*      ret
0406A4             0035*  
0406A4             0036*  ; flip the sign of hlu
0406A4             0037*  ; inputs: hlu
0406A4             0038*  ; returns: 0-hlu, flags set appropriately for the result:
0406A4             0039*  ;         s1,z0,pv0,n1,c1 if result is negative
0406A4             0040*  ;         s0,z1,pv0,n1,c0 if result is zero
0406A4             0041*  ;         s0,z0,pv0,n1,c1 if result is positive
0406A4             0042*  ; destroys a
0406A4             0043*  neg_hlu:
0406A4 D5          0044*      push de ; save de
0406A5 EB          0045*      ex de,hl ; put hl into de
0406A6 21 00 00 00 0046*      ld hl,0 ; clear hl
0406AA AF          0047*      xor a ; clear carry
0406AB ED 52       0048*      sbc hl,de ; 0-hlu = -hlu
0406AD D1          0049*      pop de ; get de back
0406AE C9          0050*      ret ; easy peasy
0406AF             0051*  
0406AF             0052*  ;------------------------------------------------------------------------
0406AF             0053*  ; divide hlu by 2, inspired by above
0406AF             0054*  ;------------------------------------------------------------------------
0406AF             0055*  hlu_div2:
0406AF 22 8E 06 04 0056*      ld (scratch1),hl
0406B3 21 90 06 04 0057*      ld hl,scratch1+2
0406B7 CB 1E       0058*      rr (hl)
0406B9 2B          0059*      dec hl
0406BA CB 1E       0060*      rr (hl)
0406BC 2B          0061*      dec hl
0406BD CB 1E       0062*      rr (hl)
0406BF 23          0063*      inc hl
0406C0 23          0064*      inc hl
0406C1 2A 8E 06 04 0065*      ld hl,(scratch1)
0406C5 C9          0066*      ret
0406C6             0067*  
0406C6             0068*  ; this is my little hack to divide by 16
0406C6             0069*  hlu_div16:
0406C6 AF          0070*      xor a
0406C7 29          0071*      add hl,hl
0406C8 17          0072*      rla
0406C9 29          0073*      add hl,hl
0406CA 17          0074*      rla
0406CB 29          0075*      add hl,hl
0406CC 17          0076*      rla
0406CD 29          0077*      add hl,hl
0406CE 17          0078*      rla
0406CF 22 DC 06 04 0079*      ld (@scratch),hl
0406D3 32 DF 06 04 0080*      ld (@scratch+3),a
0406D7 2A DD 06 04 0081*      ld hl,(@scratch+1)
0406DB C9          0082*      ret
0406DC             0083*  @scratch: ds 4
0406E0             0084*  
0406E0             0085*  ; hlu signed division by 256
0406E0             0086*  ; returns: hlu / 256
0406E0             0087*  ; destroys: af
0406E0             0088*  hlu_sdiv256:
0406E0 AF          0089*      xor a ; assume hl is positive
0406E1 22 F7 06 04 0090*      ld (@buffer),hl
0406E5             0091*      sign_hlu
0406E5 19          0001*M     add hl,de
0406E6 B7          0002*M     or a
0406E7 ED 52       0003*M     sbc hl,de
0406E9 F2 EE 06 04 0092*      jp p,@hl_pos
0406ED 3D          0093*      dec a
0406EE             0094*  @hl_pos:
0406EE 32 FA 06 04 0095*      ld (@buffer+3),a
0406F2 2A F8 06 04 0096*      ld hl,(@buffer+1)
0406F6 C9          0097*      ret
0406F7             0098*  @buffer: ds 4
0406FB             0099*  
0406FB             0100*  ; hlu 1 byte right shift, unsigned
0406FB             0101*  ; returns: hlu / 256, fractional portion in a
0406FB             0102*  ; destroys: af
0406FB             0103*  hlu_udiv256:
0406FB AF          0104*      xor a
0406FC 32 0D 07 04 0105*      ld (@buffer+3),a
040700 7D          0106*      ld a,l ; save the fractional portion
040701 22 0A 07 04 0107*      ld (@buffer),hl
040705 2A 0B 07 04 0108*      ld hl,(@buffer+1)
040709 C9          0109*      ret
04070A             0110*  @buffer: ds 4
04070E             0111*  
04070E             0112*      MACRO hlu_mul256
04070E             0113*      add hl,hl ; * 2
04070E             0114*      add hl,hl ; * 4
04070E             0115*      add hl,hl ; * 8
04070E             0116*      add hl,hl ; * 16
04070E             0117*      add hl,hl ; * 32
04070E             0118*      add hl,hl ; * 64
04070E             0119*      add hl,hl ; * 128
04070E             0120*      add hl,hl ; * 256
04070E             0121*      ENDMACRO
04070E             0122*  
04070E             0123*  ; compute the modulo of hlu by deu
04070E             0124*  ; outputs: hlu = hlu % deu
04070E             0125*  ; destroys: f, hl
04070E             0126*  hlu_mod:
04070E B7          0127*      or a ; clear carry
04070F             0128*  @loop:
04070F ED 52       0129*      sbc hl,de
040711 DA 19 07 04 0130*      jp c, @end
040715 C3 0F 07 04 0131*      jp @loop
040719             0132*  @end:
040719 19          0133*      add hl,de
04071A C9          0134*      ret
04071B             0135*  
04071B             0136*  
04071B 00 00 00 00 0137*  add_bcd_arg1: db #00,#00,#00,#00
04071F 00 00 00 00 0138*  add_bcd_arg2: db #00,#00,#00,#00
040723             0139*  
040723             0140*  ; set bcd values in a scratch memory address from registers bcde
040723             0141*  ; input: hl; scratch address,bcde; 8-place bcd number
040723             0142*  ; destroys ; hl
040723             0143*  set_bcd:
040723 73          0144*      ld (hl),e
040724 23          0145*      inc hl
040725 72          0146*      ld (hl),d
040726 23          0147*      inc hl
040727 71          0148*      ld (hl),c
040728 23          0149*      inc hl
040729 70          0150*      ld (hl),b
04072A C9          0151*      ret
04072B             0152*  
04072B             0153*  ; load bcd values from a scratch memory address to bcde
04072B             0154*  ; input: hl; scratch address
04072B             0155*  ; output: bcde; 8-place bcd number
04072B             0156*  ; destroys: hl
04072B             0157*  get_bcd:
04072B 5E          0158*      ld e,(hl)
04072C 23          0159*      inc hl
04072D 56          0160*      ld d,(hl)
04072E 23          0161*      inc hl
04072F 4E          0162*      ld c,(hl)
040730 23          0163*      inc hl
040731 46          0164*      ld b,(hl)
040732 C9          0165*      ret
040733             0166*  
040733             0167*  ; BCD addition
040733             0168*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040733             0169*  ;       a is the number of bytes holding each number (number of places/2)
040733             0170*  ; outputs: (hl) + (de) --> (hl)
040733             0171*  ; destroys: a,b,de,hl
040733             0172*  add_bcd:
040733 47          0173*      ld b,a ; loop counter
040734 AF          0174*      xor a ; reset a, clear carry flag
040735             0175*  adcec:
040735 1A          0176*      ld a,(de) ; addend to acc
040736 8E          0177*      adc a,(hl) ; add (hl) to acc
040737 27          0178*      daa ; adjust result to bcd
040738 77          0179*      ld (hl),a ; store result
040739 23          0180*      inc hl ; advance memory pointers
04073A 13          0181*      inc de
04073B 10 F8       0182*      djnz adcec ; loop until b == 0
04073D C9          0183*      ret
04073E             0184*  
04073E             0185*  ; BCD subtraction
04073E             0186*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04073E             0187*  ;       a is the number of bytes holding each number (number of places/2)
04073E             0188*  ; outputs: (hl) - (de) --> (hl)
04073E             0189*  ; destroys: a,b,de,hl
04073E             0190*  sub_bcd:
04073E 47          0191*      ld b,a ; loop counter
04073F AF          0192*      xor a ; reset a,clear carry flag
040740             0193*  subdec:
040740 1A          0194*      ld a,(de) ; subtrahend to acc
040741 9E          0195*      sbc a,(hl) ; subtract (hl) from acc
040742 27          0196*      daa ; adjust result to bcd
040743 77          0197*      ld (hl),a ; store result
040744 23          0198*      inc hl ; advance memory pointers
040745 13          0199*      inc de
040746 10 F8       0200*      djnz subdec ; loop until b == 0
040748 C9          0201*      ret
040749             0202*  
040749             0203*  ; http://www.z80.info/pseudo-random.txt
040749             0204*  rand_8:
040749 C5          0205*      push bc
04074A 3A 5D 07 04 0206*      ld a,(r_seed)
04074E 4F          0207*      ld c,a
04074F             0208*  
04074F 0F          0209*      rrca ; multiply by 32
040750 0F          0210*      rrca
040751 0F          0211*      rrca
040752 EE 1F       0212*      xor 0x1f
040754             0213*  
040754 81          0214*      add a,c
040755 DE FF       0215*      sbc a,255 ; carry
040757             0216*  
040757 32 5D 07 04 0217*      ld (r_seed),a
04075B C1          0218*      pop bc
04075C C9          0219*      ret
04075D 50          0220*  r_seed: defb $50
04075E             0221*  
04075E             0222*  ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
04075E             0223*  prng24:
04075E             0224*  ;;Expects ADL mode.
04075E             0225*  ;;Output: HL
04075E             0226*  ;;50cc
04075E             0227*  ;;33 bytes
04075E             0228*  ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
04075E ED 5B 7F 07 0229*      ld de,(seed1)
       04          
040763 B7          0230*      or a
040764 ED 62       0231*      sbc hl,hl
040766 19          0232*      add hl,de
040767 29          0233*      add hl,hl
040768 29          0234*      add hl,hl
040769 2C          0235*      inc l
04076A 19          0236*      add hl,de
04076B 22 7F 07 04 0237*      ld (seed1),hl
04076F 2A 82 07 04 0238*      ld hl,(seed2)
040773 29          0239*      add hl,hl
040774 9F          0240*      sbc a,a
040775 E6 1B       0241*      and %00011011
040777 AD          0242*      xor l
040778 6F          0243*      ld l,a
040779 22 82 07 04 0244*      ld (seed2),hl
04077D 19          0245*      add hl,de
04077E C9          0246*      ret
04077F 00 00 00    0247*  seed1: dl 0
040782 00 00 00    0248*  seed2: dl 0
040785             0032       include "files.inc"
040785             0001*  ; load to onboard 8k sram
040785             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
040785             0033       include "fixed168.inc"
040785             0001*  ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040785             0002*  ; uses EZ80 MLT instruction for speed
040785             0003*  ; operation: UHL * A --> UHL
040785             0004*  ; destroys: AF, HL
040785             0005*  smul24x8:
040785             0006*  ; make hl positive and store sign flag
040785 CD 94 06 04 0007*      call hlu_abs
040789 F5          0008*      push af
04078A             0009*  ; do the division
04078A CD 95 07 04 0010*      call mul24x8 ; hl = product
04078E             0011*  ; adjust sign of result
04078E F1          0012*      pop af ; sign de
04078F F0          0013*      ret p ; hl was positive, nothing to do
040790 CD A4 06 04 0014*      call neg_hlu ; result is negative
040794 C9          0015*      ret
040795             0016*  
040795             0017*  ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040795             0018*  ; uses EZ80 MLT instruction for speed
040795             0019*  ; operation: UHL * A --> AUHL
040795             0020*  ; destroys: AF, HL
040795             0021*  mul24x8:
040795 D5          0022*      push de ; preserve de
040796             0023*  ; low byte
040796 5D          0024*      ld e,l
040797 57          0025*      ld d,a
040798 ED 5C       0026*      mlt de
04079A 6B          0027*      ld l,e ; product low byte
04079B 08          0028*      ex af,af' ; save multiplier
04079C 7A          0029*      ld a,d ; carry
04079D 08          0030*      ex af,af' ; save carry, restore multiplier
04079E             0031*  ; high byte
04079E 5C          0032*      ld e,h
04079F 57          0033*      ld d,a
0407A0 ED 5C       0034*      mlt de
0407A2 08          0035*      ex af,af' ; save multiplier, restore carry
0407A3 83          0036*      add a,e ; add carry
0407A4 67          0037*      ld h,a ; product middle byte
0407A5 7A          0038*      ld a,d ; carry
0407A6 08          0039*      ex af,af' ; save carry, restore multiplier
0407A7             0040*  ; upper byte
0407A7 22 C2 07 04 0041*      ld (@scratch),hl ; 7 cycles
0407AB 5F          0042*      ld e,a
0407AC 3A C4 07 04 0043*      ld a,(@scratch+2)
0407B0 57          0044*      ld d,a
0407B1 ED 5C       0045*      mlt de
0407B3 08          0046*      ex af,af' ; restore carry
0407B4 8B          0047*      adc a,e ; add carry
0407B5 32 C4 07 04 0048*      ld (@scratch+2),a ; 5 cycles
0407B9 2A C2 07 04 0049*      ld hl,(@scratch) ; 7 cycles
0407BD             0050*  ; highest byte
0407BD 3E 00       0051*      ld a,0 ; preserve carry flag
0407BF 8A          0052*      adc a,d ; product highest byte
0407C0 D1          0053*      pop de ; restore de
0407C1 C9          0054*      ret
0407C2             0055*  @scratch: ds 3
0407C5             0056*  
0407C5 00 00 00 00 0057*  mul24out: blkb 6,0
       00 00       
0407CB             0058*  
0407CB             0059*  ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
0407CB             0060*  ; operation: UHL * UDE --> mul24out
0407CB             0061*  mul24:
0407CB DD E5       0062*      push ix ; preserve
0407CD             0063*  ; point to output buffer and clear it
0407CD DD 21 C5 07 0064*      ld ix,mul24out
       04          
0407D2 C5          0065*      push bc
0407D3 01 00 00 00 0066*      ld bc,0
0407D7 DD 0F 00    0067*      ld (ix),bc
0407DA DD 0F 03    0068*      ld (ix+3),bc
0407DD C1          0069*      pop bc
0407DE             0070*  ; STEP 1: UHL * E
0407DE 7B          0071*      ld a,e
0407DF E5          0072*      push hl
0407E0 CD 95 07 04 0073*      call mul24x8
0407E4 DD 2F 00    0074*      ld (ix+0),hl
0407E7 DD 77 03    0075*      ld (ix+3),a
0407EA             0076*  ; STEP 2: UHL * D
0407EA E1          0077*      pop hl
0407EB E5          0078*      push hl
0407EC 7A          0079*      ld a,d
0407ED CD 95 07 04 0080*      call mul24x8
0407F1 CD 0A 08 04 0081*      call @accumulate
0407F5             0082*  ; STEP 3: UHL * DEU
0407F5 E1          0083*      pop hl
0407F6 ED 53 3A 08 0084*      ld (@de),de
       04          
0407FB 3A 3C 08 04 0085*      ld a,(@de+2)
0407FF CD 95 07 04 0086*      call mul24x8
040803 CD 0A 08 04 0087*      call @accumulate
040807             0088*  ; all done
040807 DD E1       0089*      pop ix ; restore
040809 C9          0090*      ret
04080A             0091*  @accumulate:
04080A DD 23       0092*      inc ix
04080C             0093*  ; highest byte of product to carry
04080C DD 77 03    0094*      ld (ix+3),a
04080F             0095*  ; low byte of product
04080F 7D          0096*      ld a,l
040810 DD 86 00    0097*      add a,(ix+0)
040813 DD 77 00    0098*      ld (ix+0),a
040816             0099*  ; high byte of product
040816 7C          0100*      ld a,h
040817 DD 8E 01    0101*      adc a,(ix+1)
04081A DD 77 01    0102*      ld (ix+1),a
04081D             0103*  ; uppper byte of product
04081D 22 37 08 04 0104*      ld (@hl),hl
040821 3A 39 08 04 0105*      ld a,(@hl+2)
040825 DD 8E 02    0106*      adc a,(ix+2)
040828 DD 77 02    0107*      ld (ix+2),a
04082B             0108*  ; carry
04082B 3E 00       0109*      ld a,0 ; preserve flags
04082D DD 8E 03    0110*      adc a,(ix+3)
040830 DD 77 03    0111*      ld (ix+3),a
040833 C9          0112*      ret
040834             0113*  
040834 00 00 00    0114*  @ix: dl 0
040837 00 00 00    0115*  @hl: dl 0
04083A 00 00 00    0116*  @de: dl 0
04083D             0117*  
04083D             0118*  ; UHL * UDE --> UHL (unsigned)
04083D             0119*  umul24:
04083D CD CB 07 04 0120*      call mul24
040841 2A C5 07 04 0121*      ld hl,(mul24out)
040845 C9          0122*      ret
040846             0123*  
040846             0124*  ; UH.L = UH.L*UD.E (unsigned)
040846             0125*  umul168:
040846 CD CB 07 04 0126*      call mul24
04084A 2A C6 07 04 0127*      ld hl,(mul24out+1)
04084E C9          0128*      ret
04084F             0129*  
04084F             0130*  ; UH.L * UD.E --> UH.L (signed)
04084F             0131*  smul168:
04084F             0132*  ; make everything positive and store sign flags
04084F CD 94 06 04 0133*      call hlu_abs
040853 F5          0134*      push af
040854 EB          0135*      ex de,hl
040855 CD 94 06 04 0136*      call hlu_abs
040859 EB          0137*      ex de,hl
04085A F5          0138*      push af
04085B             0139*  ; do the division
04085B CD 46 08 04 0140*      call umul168 ; hl = product
04085F             0141*  ; adjust sign of result
04085F F1          0142*      pop af ; sign de
040860 FA 6B 08 04 0143*      jp m,@de_neg
040864 F1          0144*      pop af ; sign hl
040865 F0          0145*      ret p ; both positive, nothing to do
040866             0146*  @hl_neg:
040866 CD A4 06 04 0147*      call neg_hlu ; de pos, hl neg, result is negative
04086A C9          0148*      ret
04086B             0149*  @de_neg:
04086B F1          0150*      pop af
04086C F8          0151*      ret m ; both negative, nothing to do
04086D CD A4 06 04 0152*      call neg_hlu ; result is negative
040871 C9          0153*      ret
040872             0154*  
040872             0155*  ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040872             0156*  ; perform unsigned division of 16.8 fixed place values
040872             0157*  ; with an unsigned 16.8 fixed place result and 24-bit remainder
040872             0158*  udiv168:
040872             0159*  ; back up divisor
040872 ED 53 A9 08 0160*      ld (@ude),de
       04          
040877             0161*  ; get the 16-bit integer part of the quotient
040877 CD DA 08 04 0162*      call udiv24 ; de = quotient, hl = remainder
04087B             0163*  ; load quotient to upper three bytes of output
04087B ED 53 B0 08 0164*      ld (div168_out+1),de
       04          
040880             0165*  @div256:
040880             0166*  ; multiply remainder by 256
040880             0167*      hlu_mul256
040880 29          0001*M     add hl,hl ; * 2
040881 29          0002*M     add hl,hl ; * 4
040882 29          0003*M     add hl,hl ; * 8
040883 29          0004*M     add hl,hl ; * 16
040884 29          0005*M     add hl,hl ; * 32
040885 29          0006*M     add hl,hl ; * 64
040886 29          0007*M     add hl,hl ; * 128
040887 29          0008*M     add hl,hl ; * 256
040888             0168*  ; skip fractional computation if remainder is zero
040888             0169*      sign_hlu
040888 19          0001*M     add hl,de
040889 B7          0002*M     or a
04088A ED 52       0003*M     sbc hl,de
04088C 20 03       0170*      jr nz,@div_frac
04088E AF          0171*      xor a
04088F 18 0A       0172*      jr @write_frac
040891             0173*  ; now divide the shifted remainder by the divisor
040891             0174*  @div_frac:
040891 ED 5B A9 08 0175*      ld de,(@ude) ; get back divisor
       04          
040896 CD DA 08 04 0176*      call udiv24 ; de = quotient, hl = remainder
04089A             0177*  ; load low byte of quotient to low byte of output
04089A 7B          0178*      ld a,e
04089B             0179*  @write_frac:
04089B 32 AF 08 04 0180*      ld (div168_out),a
04089F             0181*  ; load de with return value
04089F ED 5B AF 08 0182*      ld de,(div168_out)
       04          
0408A4             0183*  ; load a with any overflow
0408A4 3A B2 08 04 0184*      ld a,(div168_out+3)
0408A8 C9          0185*      ret ; ud.e is the 16.8 result
0408A9             0186*  @ude: ds 6
0408AF             0187*  div168_out: ds 4 ; the extra byte is for overflow
0408B3             0188*  
0408B3             0189*  ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
0408B3             0190*  ; perform signed division of 16.8 fixed place values
0408B3             0191*  ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
0408B3             0192*  sdiv168:
0408B3             0193*  ; make everything positive and store sign flags
0408B3 CD 94 06 04 0194*      call hlu_abs
0408B7 F5          0195*      push af
0408B8 EB          0196*      ex de,hl
0408B9 CD 94 06 04 0197*      call hlu_abs
0408BD EB          0198*      ex de,hl
0408BE F5          0199*      push af
0408BF             0200*  ; do the division
0408BF CD 72 08 04 0201*      call udiv168 ; de = quotient, hl = remainder
0408C3             0202*  ; adjust sign of result
0408C3 F1          0203*      pop af ; sign de
0408C4 FA D1 08 04 0204*      jp m,@de_neg
0408C8 F1          0205*      pop af ; sign hl
0408C9 F0          0206*      ret p ; both positive, nothing to do
0408CA             0207*  @hl_neg:
0408CA EB          0208*      ex de,hl ; hl = quotient, de = remainder
0408CB CD A4 06 04 0209*      call neg_hlu ; de pos, hl neg, result is negative
0408CF EB          0210*      ex de,hl ; de = negated quotient, hl = remainder
0408D0 C9          0211*      ret
0408D1             0212*  @de_neg:
0408D1 F1          0213*      pop af
0408D2 F8          0214*      ret m ; both negative, nothing to do
0408D3 EB          0215*      ex de,hl ; hl = quotient, de = remainder
0408D4 CD A4 06 04 0216*      call neg_hlu ; result is negative
0408D8 EB          0217*      ex de,hl ; de = negated quotient, hl = remainder
0408D9 C9          0218*      ret
0408DA             0219*  
0408DA             0220*  ;------------------------------------------------------------------------
0408DA             0221*  ;  arith24.asm
0408DA             0222*  ;  24-bit ez80 arithmetic routines
0408DA             0223*  ;  Copyright (c) Shawn Sijnstra 2024
0408DA             0224*  ;  MIT license
0408DA             0225*  ;
0408DA             0226*  ;  This library was created as a tool to help make ez80
0408DA             0227*  ;  24-bit native assembly routines for simple mathematical problems
0408DA             0228*  ;  more widely available.
0408DA             0229*  ;
0408DA             0230*  ;------------------------------------------------------------------------
0408DA             0231*  ;
0408DA             0232*  ;------------------------------------------------------------------------
0408DA             0233*  ; udiv24
0408DA             0234*  ; Unsigned 24-bit division
0408DA             0235*  ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
0408DA             0236*  ;
0408DA             0237*  ; Uses AF BC DE HL
0408DA             0238*  ; Uses Restoring Division algorithm
0408DA             0239*  ;------------------------------------------------------------------------
0408DA             0240*  
0408DA             0241*  udiv24:
0408DA E5          0242*      push hl
0408DB C1          0243*      pop bc ;move dividend to BCU
0408DC 21 00 00 00 0244*      ld hl,0 ;result
0408E0 A7          0245*      and a
0408E1 ED 52       0246*      sbc hl,de ;test for div by 0
0408E3 C8          0247*      ret z ;it's zero, carry flag is clear
0408E4 19          0248*      add hl,de ;HL is 0 again
0408E5 3E 18       0249*      ld a,24 ;number of loops through.
0408E7             0250*  udiv1:
0408E7 C5          0251*      push bc ;complicated way of doing this because of lack of access to top bits
0408E8 E3          0252*      ex (sp),hl
0408E9 37          0253*      scf
0408EA ED 6A       0254*      adc hl,hl
0408EC E3          0255*      ex (sp),hl
0408ED C1          0256*      pop bc ;we now have bc = (bc * 2) + 1
0408EE             0257*  
0408EE ED 6A       0258*      adc hl,hl
0408F0 A7          0259*      and a ;is this the bug
0408F1 ED 52       0260*      sbc hl,de
0408F3 30 02       0261*      jr nc,udiv2
0408F5 19          0262*      add hl,de
0408F6             0263*  ;	dec	c
0408F6 0B          0264*      dec bc
0408F7             0265*  udiv2:
0408F7 3D          0266*      dec a
0408F8 20 ED       0267*      jr nz,udiv1
0408FA 37          0268*      scf ;flag used for div0 error
0408FB C5          0269*      push bc
0408FC D1          0270*      pop de ;remainder
0408FD C9          0271*      ret
0408FE             0272*  
0408FE             0273*  ;------------------------------------------------------------------------
0408FE             0274*  ;  END 24-bit ez80 arithmetic routines by Shawn Sijnstra
0408FE             0275*  ;------------------------------------------------------------------------
0408FE             0276*  
0408FE             0277*  
0408FE             0278*      ; include "trig24fast.inc"
0408FE             0279*  
0408FE             0280*  
0408FE             0281*  ; convert signed angles from a 360 to 256 degree circle
0408FE             0282*  ; inputs: uh.l is the angle360 in 16.8 fixed format
0408FE             0283*  ; outputs: uh.l is the angle256 in 16.8 fixed format
0408FE             0284*  ; destroys: TODO
0408FE             0285*  deg_360_to_256:
0408FE D5          0286*      push de ; preserve de
0408FF             0287*  ; make angle positive and store sign flag
0408FF CD 94 06 04 0288*      call hlu_abs
040903 F5          0289*      push af
040904             0290*  ; multiply by coversion factor of 256/360
040904 11 B6 00 00 0291*      ld de,0x0000B6 ; 0.711
040908 CD 46 08 04 0292*      call umul168 ; uh.l = uh.l * 0.711
04090C             0293*  ; restore sign flag and adjust output accordingly
04090C F1          0294*      pop af
04090D F2 15 09 04 0295*      jp p,@pos ; positive number
040911 CD A4 06 04 0296*      call neg_hlu
040915             0297*  @pos:
040915             0298*  ; restore de and return uh.l as the result
040915 D1          0299*      pop de
040916 C9          0300*      ret
040917             0301*  
040917             0302*  ; convert signed angles from a 256 to 360 degree circle
040917             0303*  ; inputs: uh.l is the angle256 in 16.8 fixed format
040917             0304*  ; outputs: uh.l is the angle360 in 16.8 fixed format
040917             0305*  ; destroys: TODO
040917             0306*  deg_256_to_360:
040917 D5          0307*      push de ; preserve de
040918             0308*  ; make angle positive and store sign flag
040918 CD 94 06 04 0309*      call hlu_abs
04091C F5          0310*      push af
04091D             0311*  ; multiply by coversion factor of 360/256
04091D 11 68 01 00 0312*      ld de,0x000168 ; 1.406
040921 CD 46 08 04 0313*      call umul168 ; uh.l = uh.l * 1.406
040925             0314*  ; restore sign flag and adjust output accordingly
040925 F1          0315*      pop af
040926 F2 2E 09 04 0316*      jp p,@pos ; positive number
04092A CD A4 06 04 0317*      call neg_hlu
04092E             0318*  @pos:
04092E             0319*  ; restore de and return uh.l as the result
04092E D1          0320*      pop de
04092F C9          0321*      ret
040930             0322*  
040930             0323*  ; fixed 16.8 routine
040930             0324*  ; cos(uh.l) --> uh.l
040930             0325*  ; destroys: f, hl
040930             0326*  cos168:
040930 D5          0327*      push de ; preserve de
040931             0328*  ; for cos we simply increment the angle by 90 degrees
040931             0329*  ; or 0x004000 in 16.8 degrees256
040931             0330*  ; which makes it a sin problem
040931 11 00 40 00 0331*      ld de,0x004000
040935 19          0332*      add hl,de ; modulo 256 happens below
040936 D1          0333*      pop de ; restore de
040937             0334*  ; fall through to sin168
040937             0335*  
040937             0336*  ; ---------------------
040937             0337*  ; fixed 16.8 routine
040937             0338*  ; sin(uh.l) --> uh.l
040937             0339*  ; destroys: f, hl
040937             0340*  sin168:
040937 D5          0341*      push de
040938             0342*  ; handle negative angles appropriately
040938 CD 94 06 04 0343*      call hlu_abs
04093C F2 45 09 04 0344*      jp p,@F
040940 11 00 00 FF 0345*      ld de,-256*256
040944 19          0346*      add hl,de
040945             0347*  @@:
040945 2E 03       0348*      ld l,3 ; multiply by 3 to get our lookup index
040947 ED 6C       0349*      mlt hl
040949 11 94 0B 04 0350*      ld de,sin_lut_168 ; grab the lut address
04094D 19          0351*      add hl,de ; bump hl by the index
04094E ED 27       0352*      ld hl,(hl) ; don't try this on a z80!
040950 D1          0353*      pop de
040951 C9          0354*      ret
040952             0355*  
040952             0356*  ; 16.8 fixed inputs / outputs
040952             0357*  ; takes: uh.l as angle in degrees 256
040952             0358*  ;        ud.e as radius
040952             0359*  ; returns ub.c as dx, ud.e as dy, uh.l as radius
040952             0360*  ;        displacements from origin (0,0)
040952             0361*  ; destroys: everything except indexes
040952             0362*  polar_to_cartesian:
040952             0363*  ; back up input parameters
040952 22 81 09 04 0364*      ld (@angle), hl
040956 ED 53 84 09 0365*      ld (@radius), de
       04          
04095B             0366*  ; compute dx = sin(uh.l) * ud.e
04095B CD 37 09 04 0367*      call sin168 ; uh.l = sin(uh.l)
04095F ED 5B 84 09 0368*      ld de,(@radius)
       04          
040964 CD 4F 08 04 0369*      call smul168 ; uh.l = dx
040968 E5          0370*      push hl
040969             0371*  ; compute dy = -cos(uh.l) * ud.e
040969 2A 81 09 04 0372*      ld hl,(@angle)
04096D CD 30 09 04 0373*      call cos168 ; uh.l = cos(uh.l)
040971 ED 5B 84 09 0374*      ld de,(@radius)
       04          
040976 CD 4F 08 04 0375*      call smul168 ; uh.l = dy
04097A CD A4 06 04 0376*      call neg_hlu ; invert dy for screen coords convention
04097E EB          0377*      ex de,hl ; de = dy for output
04097F C1          0378*      pop bc ; bc = dx for output
040980             0379*  ; and out
040980 C9          0380*      ret
040981             0381*  @angle: ds 3
040984             0382*  @radius: ds 3
040987             0383*  
040987             0384*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040987             0385*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040987             0386*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040987             0387*  ;         also populates scratch locations dx168 and dy168
040987             0388*  ; destroys: a,hl,bc,de
040987             0389*  dxy168:
040987             0390*  ; compute dx = x1-x0
040987 AF          0391*      xor a ; clear carry
040988 DD E5       0392*      push ix ; move ix to hl via the stack
04098A E1          0393*      pop hl ; hl = x1
04098B ED 42       0394*      sbc hl,bc ; hl = dx
04098D 22 A2 09 04 0395*      ld (dx168),hl ; dx to scratch
040991             0396*  ; compute dy = y1-y0
040991 AF          0397*      xor a ; clear carry
040992 FD E5       0398*      push iy ; move iy to hl via the stack
040994 E1          0399*      pop hl ; hl = y1
040995 ED 52       0400*      sbc hl,de ; hl = dy
040997 22 A8 09 04 0401*      ld (dy168),hl ; dy to scratch
04099B             0402*  ; populate output registers and return
04099B EB          0403*      ex de,hl ; ud.e = dy
04099C ED 4B A2 09 0404*      ld bc,(dx168) ; ub.c = dx
       04          
0409A1 C9          0405*      ret
0409A2 00 00 00 00 0406*  dx168: blkb 6,0
       00 00       
0409A8 00 00 00 00 0407*  dy168: blkb 6,0
       00 00       
0409AE             0408*  
0409AE             0409*  ; compute the euclidian distance between two cartesian coordinates
0409AE             0410*  ; using the formula d = sqrt(dx^2+dy^2)
0409AE             0411*  ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
0409AE             0412*  ; output; uh.l is the 16.8 fixed format distance
0409AE             0413*  ;         also populates scratch locations dx168 and dy168
0409AE             0414*  ; destroys: a,hl,bc,de
0409AE             0415*  ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
0409AE             0416*  ;       thus the result will always be an integer, albeit in 16.8 format
0409AE             0417*  distance168:
0409AE             0418*  ; compute dy^2
0409AE 2A A8 09 04 0419*      ld hl,(dy168)
0409B2 CD 94 06 04 0420*      call hlu_abs
0409B6 CD FB 06 04 0421*      call hlu_udiv256 ; make integer to avoid overflow
0409BA E5          0422*      push hl
0409BB D1          0423*      pop de
0409BC CD 3D 08 04 0424*      call umul24 ; hl = dy^2
0409C0 E5          0425*      push hl ; save dy^2
0409C1             0426*  ; compute dx^2
0409C1 2A A2 09 04 0427*      ld hl,(dx168)
0409C5 CD 94 06 04 0428*      call hlu_abs
0409C9 CD FB 06 04 0429*      call hlu_udiv256 ; make integer to avoid overflow
0409CD E5          0430*      push hl
0409CE D1          0431*      pop de
0409CF CD 3D 08 04 0432*      call umul24 ; hl = dx^2
0409D3             0433*  ; add dx^2 and dy^2
0409D3 D1          0434*      pop de ; de = dy^2 (was hl)
0409D4 19          0435*      add hl,de ; hl = dx^2 + dy^2
0409D5             0436*  ; compute the square root
0409D5 CD AE 0A 04 0437*      call sqrt24 ; de = sqrt(dx^2 + dy^2)
0409D9 EB          0438*      ex de,hl ; hl = distance
0409DA             0439*      hlu_mul256 ; convert back to 16.8 fixed
0409DA 29          0001*M     add hl,hl ; * 2
0409DB 29          0002*M     add hl,hl ; * 4
0409DC 29          0003*M     add hl,hl ; * 8
0409DD 29          0004*M     add hl,hl ; * 16
0409DE 29          0005*M     add hl,hl ; * 32
0409DF 29          0006*M     add hl,hl ; * 64
0409E0 29          0007*M     add hl,hl ; * 128
0409E1 29          0008*M     add hl,hl ; * 256
0409E2 C9          0440*      ret
0409E3             0441*  
0409E3             0442*  ; atan2_(ub.c,ud.e) --> uh.l
0409E3             0443*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0409E3             0444*  ;   whether inputs are integers or fractional doesn't matter
0409E3             0445*  ;   so long as the sign bit of the upper byte is correct
0409E3             0446*  ; output: uh.l is the 16.8 fixed angle in degrees 256
0409E3             0447*  ; angles are COMPASS HEADINGS based on
0409E3             0448*  ; screen coordinate conventions,where the y axis is flipped
0409E3             0449*  ; #E0 224      0       32 #20
0409E3             0450*  ;        -x,-y | +x,-y
0409E3             0451*  ; #C0 192------+------ 64 #40
0409E3             0452*  ;        -x,+y | +x,+y
0409E3             0453*  ; #A0 160   128 #80   96 #60
0409E3             0454*  atan2_168fast:
0409E3             0455*  ; get signs and make everything positive
0409E3             0456*  ; get abs(x) and store its original sign
0409E3 C5          0457*      push bc
0409E4 E1          0458*      pop hl
0409E5 CD 94 06 04 0459*      call hlu_abs ; if x was negative this also sets the sign flag
0409E9 E5          0460*      push hl ; store abs(x)
0409EA C1          0461*      pop bc ; bc = abs(x)
0409EB F5          0462*      push af ; store sign of x
0409EC             0463*  ; get abs(y) and store its original sign
0409EC EB          0464*      ex de,hl ; hl = y
0409ED CD 94 06 04 0465*      call hlu_abs ; if y was negative this also sets the sign flag
0409F1 EB          0466*      ex de,hl ; de = abs(y)
0409F2 F5          0467*      push af ; store sign of y
0409F3             0468*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0409F3             0469*  ; this ensures that our lookup value is between 0 and 1 inclusive
0409F3 AF          0470*      xor a ; clear the carry flag
0409F4 D5          0471*      push de
0409F5 E1          0472*      pop hl
0409F6 ED 42       0473*      sbc hl,bc
0409F8 F5          0474*      push af ; save sign of de - bc
0409F9 F2 02 0A 04 0475*      jp p,@1 ; bc <= de, so we skip ahead
0409FD             0476*  ; otherwise we swap bc and de
0409FD C5          0477*      push bc
0409FE E1          0478*      pop hl
0409FF EB          0479*      ex de,hl
040A00 E5          0480*      push hl
040A01 C1          0481*      pop bc
040A02             0482*  @1:
040A02             0483*  ; now we're ready to snag our preliminary result
040A02 C5          0484*      push bc
040A03 E1          0485*      pop hl
040A04 CD 72 0A 04 0486*      call atan_168fast ; uh.l comes back with prelim result
040A08             0487*  ; now we adjust uh.l based on sign of de - bc
040A08 F1          0488*      pop af
040A09 F2 15 0A 04 0489*      jp p,@2 ; bc <= de,so we skip ahead
040A0D EB          0490*      ex de,hl
040A0E 21 00 40 00 0491*      ld hl,64*256 ; subtract from 64 (90) degrees
040A12 AF          0492*      xor a ; clear the carry flag
040A13 ED 52       0493*      sbc hl,de
040A15             0494*  @2:
040A15             0495*  ; adjust the result based on quadrant
040A15             0496*  ; #E0 224      0       32 #20
040A15             0497*  ;        -x,-y | +x,-y
040A15             0498*  ; #C0 192------+------ 64 #40
040A15             0499*  ;        -x,+y | +x,+y
040A15             0500*  ; #A0 160   128 #80   96 #60
040A15 F1          0501*      pop af ; sign of y
040A16 CA 53 0A 04 0502*      jp z,@y_zero
040A1A F2 33 0A 04 0503*      jp p,@y_pos
040A1E             0504*  ; y neg,check x
040A1E F1          0505*      pop af ; sign of x
040A1F CA 2D 0A 04 0506*      jp z,@y_neg_x_zero
040A23 F2 32 0A 04 0507*      jp p,@y_neg_x_pos
040A27             0508*  ; y neg,x neg
040A27             0509*  ; angle is 128 to 256 (270 to 360)
040A27             0510*  ; negating the intermediate does the trick
040A27 CD A4 06 04 0511*      call neg_hlu
040A2B 18 31       0512*      jr @zero_hlu
040A2D             0513*  
040A2D             0514*  @y_neg_x_zero:
040A2D             0515*  ; y neg,x zero
040A2D             0516*  ; angle is 0
040A2D 21 00 00 00 0517*      ld hl,0
040A31 C9          0518*      ret
040A32             0519*  @y_neg_x_pos:
040A32             0520*  ; y neg,x pos
040A32             0521*  ; angle is 0 to 64 (0 to 90)
040A32             0522*  ; so we're good
040A32 C9          0523*      ret
040A33             0524*  
040A33             0525*  @y_pos:
040A33 F1          0526*      pop af ; sign of x
040A34 CA 43 0A 04 0527*      jp z,@y_pos_x_zero
040A38 F2 48 0A 04 0528*      jp p,@y_pos_x_pos
040A3C             0529*  ; y pos,x neg
040A3C             0530*  ; angle is 128 to 192 (180-270)
040A3C             0531*  ; so we add 128 to intermediate
040A3C 11 00 80 00 0532*      ld de,128*256
040A40 19          0533*      add hl,de
040A41 18 1B       0534*      jr @zero_hlu
040A43             0535*  @y_pos_x_zero:
040A43             0536*  ; y pos,x zero
040A43             0537*  ; angle is 128 (180)
040A43 21 00 80 00 0538*      ld hl,128*256
040A47 C9          0539*      ret
040A48             0540*  @y_pos_x_pos:
040A48             0541*  ; y pos,x pos
040A48             0542*  ; angle is 64 to 128 (90 to 180)
040A48             0543*  ; neg the intermediate and add 180 degrees
040A48 CD A4 06 04 0544*      call neg_hlu
040A4C 11 00 80 00 0545*      ld de,128*256
040A50 19          0546*      add hl,de
040A51 18 0B       0547*      jr @zero_hlu
040A53             0548*  
040A53             0549*  @y_zero:
040A53 F1          0550*      pop af ; sign of x
040A54 FA 59 0A 04 0551*      jp m,@y_zero_x_neg
040A58             0552*  ; y zero,x pos
040A58             0553*  ; angle is 64 (90),nothing to do
040A58 C9          0554*      ret
040A59             0555*  @y_zero_x_neg:
040A59             0556*  ; y zero ,x neg
040A59             0557*  ; angle is 192 (270)
040A59 21 00 C0 00 0558*      ld hl,192*256
040A5D C9          0559*      ret
040A5E             0560*  @zero_hlu:
040A5E AF          0561*      xor a
040A5F 22 6C 0A 04 0562*      ld (@scratch),hl
040A63 32 6E 0A 04 0563*      ld (@scratch+2),a
040A67 2A 6C 0A 04 0564*      ld hl,(@scratch)
040A6B C9          0565*      ret
040A6C             0566*  @scratch: ds 6
040A72             0567*  
040A72             0568*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040A72             0569*  ; output: uh.l is the 16.8 fixed format angle in degrees 256
040A72             0570*  ; destroys: a,hl,bc,de
040A72             0571*  ; note: only works for angles from 0 to 32 (45) degrees
040A72             0572*  ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040A72             0573*  atan_168fast:
040A72             0574*  ; because we use compass headings instead of geometric angles
040A72             0575*  ; we compute dx/dy which is 1/tan(theta) in the maths world
040A72             0576*  ; we can do faster unsigned division here because we know dx and dy are positive
040A72 CD 72 08 04 0577*      call udiv168 ; ud.e = dx/dy
040A76 EB          0578*      ex de,hl ; uh.l = dx/dy
040A77             0579*  ; test uh.l for 0
040A77 19          0580*      add hl,de
040A78 B7          0581*      or a
040A79 ED 52       0582*      sbc hl,de
040A7B 28 22       0583*      jr z,@is_zero
040A7D             0584*  ; test uh.l for 1
040A7D AF          0585*      xor a ; clear carry
040A7E EB          0586*      ex de,hl
040A7F 21 00 01 00 0587*      ld hl,1*256 ; 1 in 16.8 fixed format
040A83 ED 52       0588*      sbc hl,de
040A85 28 13       0589*      jr z,@is_45
040A87 EB          0590*      ex de,hl
040A88             0591*  ; no special cases so we move on
040A88             0592*  ; l contains the fractional portion of tan(uh.l)
040A88             0593*  ; we multiply it by three to get our lookup table index
040A88 26 03       0594*      ld h,3
040A8A ED 6C       0595*      mlt hl ; index into lut
040A8C 11 00 00 00 0596*      ld de,0 ; clear deu
040A90 54          0597*      ld d,h ; copy hl to de
040A91 5D          0598*      ld e,l ; de contains our index
040A92 21 97 0E 04 0599*      ld hl,atan_lut_168 ; grab the lut address
040A96 19          0600*      add hl,de ; bump hl by the index
040A97 ED 27       0601*      ld hl,(hl) ; don't try this on a z80!
040A99 C9          0602*      ret ; and out
040A9A             0603*  @is_45:
040A9A 21 00 40 00 0604*      ld hl,64*256
040A9E C9          0605*      ret
040A9F             0606*  ; for the case tan(0)
040A9F             0607*  @is_zero:
040A9F 21 00 00 00 0608*      ld hl,0*256
040AA3 C9          0609*      ret
040AA4             0610*  
040AA4             0611*  ; Expects  ADL mode
040AA4             0612*  ; Inputs:  UH.L
040AA4             0613*  ; Outputs: UH.L is the 16.8 square root
040AA4             0614*  ;          UDE is the integer difference inputHL-DE^2
040AA4             0615*  sqrt168:
040AA4 CD AE 0A 04 0616*      call sqrt24
040AA8 EB          0617*      ex de,hl
040AA9 29          0618*      add hl,hl
040AAA 29          0619*      add hl,hl
040AAB 29          0620*      add hl,hl
040AAC 29          0621*      add hl,hl
040AAD C9          0622*      ret
040AAE             0623*  
040AAE             0624*  ; credit: xeda112358
040AAE             0625*  ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040AAE             0626*  sqrt24:
040AAE             0627*  ; Expects ADL mode
040AAE             0628*  ; Inputs: HL
040AAE             0629*  ; Outputs: DE is the integer square root
040AAE             0630*  ;  HL is the difference inputHL-DE^2
040AAE             0631*  ;  c flag reset
040AAE 01 00 00 00 0632*      ld bc,0 ; clear bcu
040AB2 11 00 00 00 0633*      ld de,0 ; clear deu
040AB6 AF          0634*      xor a
040AB7 45          0635*      ld b,l
040AB8 C5          0636*      push bc
040AB9 47          0637*      ld b,a
040ABA 6F          0638*      ld l,a
040ABB             0639*  ; Iteration 1
040ABB 29          0640*      add hl,hl
040ABC CB 11       0641*      rl c
040ABE 29          0642*      add hl,hl
040ABF CB 11       0643*      rl c
040AC1 91          0644*      sub c
040AC2 30 04       0645*      jr nc,$+6
040AC4 1C          0646*      inc e
040AC5 1C          0647*      inc e
040AC6 2F          0648*      cpl
040AC7 4F          0649*      ld c,a
040AC8             0650*  ; Iteration 2
040AC8 29          0651*      add hl,hl
040AC9 CB 11       0652*      rl c
040ACB 29          0653*      add hl,hl
040ACC CB 11       0654*      rl c
040ACE CB 13       0655*      rl e
040AD0 7B          0656*      ld a,e
040AD1 91          0657*      sub c
040AD2 30 04       0658*      jr nc,$+6
040AD4 1C          0659*      inc e
040AD5 1C          0660*      inc e
040AD6 2F          0661*      cpl
040AD7 4F          0662*      ld c,a
040AD8             0663*  ; Iteration 3
040AD8 29          0664*      add hl,hl
040AD9 CB 11       0665*      rl c
040ADB 29          0666*      add hl,hl
040ADC CB 11       0667*      rl c
040ADE CB 13       0668*      rl e
040AE0 7B          0669*      ld a,e
040AE1 91          0670*      sub c
040AE2 30 04       0671*      jr nc,$+6
040AE4 1C          0672*      inc e
040AE5 1C          0673*      inc e
040AE6 2F          0674*      cpl
040AE7 4F          0675*      ld c,a
040AE8             0676*  ; Iteration 4
040AE8 29          0677*      add hl,hl
040AE9 CB 11       0678*      rl c
040AEB 29          0679*      add hl,hl
040AEC CB 11       0680*      rl c
040AEE CB 13       0681*      rl e
040AF0 7B          0682*      ld a,e
040AF1 91          0683*      sub c
040AF2 30 04       0684*      jr nc,$+6
040AF4 1C          0685*      inc e
040AF5 1C          0686*      inc e
040AF6 2F          0687*      cpl
040AF7 4F          0688*      ld c,a
040AF8             0689*  ; Iteration 5
040AF8 29          0690*      add hl,hl
040AF9 CB 11       0691*      rl c
040AFB 29          0692*      add hl,hl
040AFC CB 11       0693*      rl c
040AFE CB 13       0694*      rl e
040B00 7B          0695*      ld a,e
040B01 91          0696*      sub c
040B02 30 04       0697*      jr nc,$+6
040B04 1C          0698*      inc e
040B05 1C          0699*      inc e
040B06 2F          0700*      cpl
040B07 4F          0701*      ld c,a
040B08             0702*  ; Iteration 6
040B08 29          0703*      add hl,hl
040B09 CB 11       0704*      rl c
040B0B 29          0705*      add hl,hl
040B0C CB 11       0706*      rl c
040B0E CB 13       0707*      rl e
040B10 7B          0708*      ld a,e
040B11 91          0709*      sub c
040B12 30 04       0710*      jr nc,$+6
040B14 1C          0711*      inc e
040B15 1C          0712*      inc e
040B16 2F          0713*      cpl
040B17 4F          0714*      ld c,a
040B18             0715*  ; Iteration 7
040B18 29          0716*      add hl,hl
040B19 CB 11       0717*      rl c
040B1B 29          0718*      add hl,hl
040B1C CB 11       0719*      rl c
040B1E CB 10       0720*      rl b
040B20 EB          0721*      ex de,hl
040B21 29          0722*      add hl,hl
040B22 E5          0723*      push hl
040B23 ED 42       0724*      sbc hl,bc
040B25 30 06       0725*      jr nc,$+8
040B27 7C          0726*      ld a,h
040B28 2F          0727*      cpl
040B29 47          0728*      ld b,a
040B2A 7D          0729*      ld a,l
040B2B 2F          0730*      cpl
040B2C 4F          0731*      ld c,a
040B2D E1          0732*      pop hl
040B2E 30 02       0733*      jr nc,$+4
040B30 23          0734*      inc hl
040B31 23          0735*      inc hl
040B32 EB          0736*      ex de,hl
040B33             0737*  ; Iteration 8
040B33 29          0738*      add hl,hl
040B34 69          0739*      ld l,c
040B35 60          0740*      ld h,b
040B36 ED 6A       0741*      adc hl,hl
040B38 ED 6A       0742*      adc hl,hl
040B3A EB          0743*      ex de,hl
040B3B 29          0744*      add hl,hl
040B3C ED 52       0745*      sbc hl,de
040B3E 19          0746*      add hl,de
040B3F EB          0747*      ex de,hl
040B40 30 04       0748*      jr nc,$+6
040B42 ED 52       0749*      sbc hl,de
040B44 13          0750*      inc de
040B45 13          0751*      inc de
040B46             0752*  ; Iteration 9
040B46 F1          0753*      pop af
040B47 17          0754*      rla
040B48 ED 6A       0755*      adc hl,hl
040B4A 17          0756*      rla
040B4B ED 6A       0757*      adc hl,hl
040B4D EB          0758*      ex de,hl
040B4E 29          0759*      add hl,hl
040B4F ED 52       0760*      sbc hl,de
040B51 19          0761*      add hl,de
040B52 EB          0762*      ex de,hl
040B53 30 04       0763*      jr nc,$+6
040B55 ED 52       0764*      sbc hl,de
040B57 13          0765*      inc de
040B58 13          0766*      inc de
040B59             0767*  ; Iteration 10
040B59 17          0768*      rla
040B5A ED 6A       0769*      adc hl,hl
040B5C 17          0770*      rla
040B5D ED 6A       0771*      adc hl,hl
040B5F EB          0772*      ex de,hl
040B60 29          0773*      add hl,hl
040B61 ED 52       0774*      sbc hl,de
040B63 19          0775*      add hl,de
040B64 EB          0776*      ex de,hl
040B65 30 04       0777*      jr nc,$+6
040B67 ED 52       0778*      sbc hl,de
040B69 13          0779*      inc de
040B6A 13          0780*      inc de
040B6B             0781*  ; Iteration 11
040B6B 17          0782*      rla
040B6C ED 6A       0783*      adc hl,hl
040B6E 17          0784*      rla
040B6F ED 6A       0785*      adc hl,hl
040B71 EB          0786*      ex de,hl
040B72 29          0787*      add hl,hl
040B73 ED 52       0788*      sbc hl,de
040B75 19          0789*      add hl,de
040B76 EB          0790*      ex de,hl
040B77 30 04       0791*      jr nc,$+6
040B79 ED 52       0792*      sbc hl,de
040B7B 13          0793*      inc de
040B7C 13          0794*      inc de
040B7D             0795*  ; Iteration 12
040B7D 17          0796*      rla
040B7E ED 6A       0797*      adc hl,hl
040B80 17          0798*      rla
040B81 ED 6A       0799*      adc hl,hl
040B83 EB          0800*      ex de,hl
040B84 29          0801*      add hl,hl
040B85 ED 52       0802*      sbc hl,de
040B87 19          0803*      add hl,de
040B88 EB          0804*      ex de,hl
040B89 30 04       0805*      jr nc,$+6
040B8B ED 52       0806*      sbc hl,de
040B8D 13          0807*      inc de
040B8E 13          0808*      inc de
040B8F CB 1A       0809*      rr d
040B91 CB 1B       0810*      rr e
040B93 C9          0811*      ret
040B94             0812*  
040B94             0813*  sin_lut_168:
040B94 00 00 00    0814*      dl 0x000000 ; 0.000 00, 0.000
040B97 06 00 00    0815*      dl 0x000006 ; 1.406 01, 0.025
040B9A 0C 00 00    0816*      dl 0x00000C ; 2.813 02, 0.049
040B9D 12 00 00    0817*      dl 0x000012 ; 4.219 03, 0.074
040BA0 19 00 00    0818*      dl 0x000019 ; 5.625 04, 0.098
040BA3 1F 00 00    0819*      dl 0x00001F ; 7.031 05, 0.122
040BA6 25 00 00    0820*      dl 0x000025 ; 8.438 06, 0.147
040BA9 2B 00 00    0821*      dl 0x00002B ; 9.844 07, 0.171
040BAC 31 00 00    0822*      dl 0x000031 ; 11.250 08, 0.195
040BAF 38 00 00    0823*      dl 0x000038 ; 12.656 09, 0.219
040BB2 3E 00 00    0824*      dl 0x00003E ; 14.063 0A, 0.243
040BB5 44 00 00    0825*      dl 0x000044 ; 15.469 0B, 0.267
040BB8 4A 00 00    0826*      dl 0x00004A ; 16.875 0C, 0.290
040BBB 50 00 00    0827*      dl 0x000050 ; 18.281 0D, 0.314
040BBE 56 00 00    0828*      dl 0x000056 ; 19.688 0E, 0.337
040BC1 5C 00 00    0829*      dl 0x00005C ; 21.094 0F, 0.360
040BC4 61 00 00    0830*      dl 0x000061 ; 22.500 10, 0.383
040BC7 67 00 00    0831*      dl 0x000067 ; 23.906 11, 0.405
040BCA 6D 00 00    0832*      dl 0x00006D ; 25.313 12, 0.428
040BCD 73 00 00    0833*      dl 0x000073 ; 26.719 13, 0.450
040BD0 78 00 00    0834*      dl 0x000078 ; 28.125 14, 0.471
040BD3 7E 00 00    0835*      dl 0x00007E ; 29.531 15, 0.493
040BD6 83 00 00    0836*      dl 0x000083 ; 30.938 16, 0.514
040BD9 88 00 00    0837*      dl 0x000088 ; 32.344 17, 0.535
040BDC 8E 00 00    0838*      dl 0x00008E ; 33.750 18, 0.556
040BDF 93 00 00    0839*      dl 0x000093 ; 35.156 19, 0.576
040BE2 98 00 00    0840*      dl 0x000098 ; 36.563 1A, 0.596
040BE5 9D 00 00    0841*      dl 0x00009D ; 37.969 1B, 0.615
040BE8 A2 00 00    0842*      dl 0x0000A2 ; 39.375 1C, 0.634
040BEB A7 00 00    0843*      dl 0x0000A7 ; 40.781 1D, 0.653
040BEE AB 00 00    0844*      dl 0x0000AB ; 42.188 1E, 0.672
040BF1 B0 00 00    0845*      dl 0x0000B0 ; 43.594 1F, 0.690
040BF4 B5 00 00    0846*      dl 0x0000B5 ; 45.000 20, 0.707
040BF7 B9 00 00    0847*      dl 0x0000B9 ; 46.406 21, 0.724
040BFA BD 00 00    0848*      dl 0x0000BD ; 47.813 22, 0.741
040BFD C1 00 00    0849*      dl 0x0000C1 ; 49.219 23, 0.757
040C00 C5 00 00    0850*      dl 0x0000C5 ; 50.625 24, 0.773
040C03 C9 00 00    0851*      dl 0x0000C9 ; 52.031 25, 0.788
040C06 CD 00 00    0852*      dl 0x0000CD ; 53.438 26, 0.803
040C09 D1 00 00    0853*      dl 0x0000D1 ; 54.844 27, 0.818
040C0C D4 00 00    0854*      dl 0x0000D4 ; 56.250 28, 0.831
040C0F D8 00 00    0855*      dl 0x0000D8 ; 57.656 29, 0.845
040C12 DB 00 00    0856*      dl 0x0000DB ; 59.063 2A, 0.858
040C15 DE 00 00    0857*      dl 0x0000DE ; 60.469 2B, 0.870
040C18 E1 00 00    0858*      dl 0x0000E1 ; 61.875 2C, 0.882
040C1B E4 00 00    0859*      dl 0x0000E4 ; 63.281 2D, 0.893
040C1E E7 00 00    0860*      dl 0x0000E7 ; 64.688 2E, 0.904
040C21 EA 00 00    0861*      dl 0x0000EA ; 66.094 2F, 0.914
040C24 EC 00 00    0862*      dl 0x0000EC ; 67.500 30, 0.924
040C27 EE 00 00    0863*      dl 0x0000EE ; 68.906 31, 0.933
040C2A F1 00 00    0864*      dl 0x0000F1 ; 70.313 32, 0.942
040C2D F3 00 00    0865*      dl 0x0000F3 ; 71.719 33, 0.950
040C30 F4 00 00    0866*      dl 0x0000F4 ; 73.125 34, 0.957
040C33 F6 00 00    0867*      dl 0x0000F6 ; 74.531 35, 0.964
040C36 F8 00 00    0868*      dl 0x0000F8 ; 75.938 36, 0.970
040C39 F9 00 00    0869*      dl 0x0000F9 ; 77.344 37, 0.976
040C3C FB 00 00    0870*      dl 0x0000FB ; 78.750 38, 0.981
040C3F FC 00 00    0871*      dl 0x0000FC ; 80.156 39, 0.985
040C42 FD 00 00    0872*      dl 0x0000FD ; 81.563 3A, 0.989
040C45 FE 00 00    0873*      dl 0x0000FE ; 82.969 3B, 0.992
040C48 FE 00 00    0874*      dl 0x0000FE ; 84.375 3C, 0.995
040C4B FF 00 00    0875*      dl 0x0000FF ; 85.781 3D, 0.997
040C4E FF 00 00    0876*      dl 0x0000FF ; 87.188 3E, 0.999
040C51 FF 00 00    0877*      dl 0x0000FF ; 88.594 3F, 1.000
040C54 00 01 00    0878*      dl 0x000100 ; 90.000 40, 1.000
040C57 FF 00 00    0879*      dl 0x0000FF ; 91.406 41, 1.000
040C5A FF 00 00    0880*      dl 0x0000FF ; 92.813 42, 0.999
040C5D FF 00 00    0881*      dl 0x0000FF ; 94.219 43, 0.997
040C60 FE 00 00    0882*      dl 0x0000FE ; 95.625 44, 0.995
040C63 FE 00 00    0883*      dl 0x0000FE ; 97.031 45, 0.992
040C66 FD 00 00    0884*      dl 0x0000FD ; 98.438 46, 0.989
040C69 FC 00 00    0885*      dl 0x0000FC ; 99.844 47, 0.985
040C6C FB 00 00    0886*      dl 0x0000FB ; 101.250 48, 0.981
040C6F F9 00 00    0887*      dl 0x0000F9 ; 102.656 49, 0.976
040C72 F8 00 00    0888*      dl 0x0000F8 ; 104.063 4A, 0.970
040C75 F6 00 00    0889*      dl 0x0000F6 ; 105.469 4B, 0.964
040C78 F4 00 00    0890*      dl 0x0000F4 ; 106.875 4C, 0.957
040C7B F3 00 00    0891*      dl 0x0000F3 ; 108.281 4D, 0.950
040C7E F1 00 00    0892*      dl 0x0000F1 ; 109.688 4E, 0.942
040C81 EE 00 00    0893*      dl 0x0000EE ; 111.094 4F, 0.933
040C84 EC 00 00    0894*      dl 0x0000EC ; 112.500 50, 0.924
040C87 EA 00 00    0895*      dl 0x0000EA ; 113.906 51, 0.914
040C8A E7 00 00    0896*      dl 0x0000E7 ; 115.313 52, 0.904
040C8D E4 00 00    0897*      dl 0x0000E4 ; 116.719 53, 0.893
040C90 E1 00 00    0898*      dl 0x0000E1 ; 118.125 54, 0.882
040C93 DE 00 00    0899*      dl 0x0000DE ; 119.531 55, 0.870
040C96 DB 00 00    0900*      dl 0x0000DB ; 120.938 56, 0.858
040C99 D8 00 00    0901*      dl 0x0000D8 ; 122.344 57, 0.845
040C9C D4 00 00    0902*      dl 0x0000D4 ; 123.750 58, 0.831
040C9F D1 00 00    0903*      dl 0x0000D1 ; 125.156 59, 0.818
040CA2 CD 00 00    0904*      dl 0x0000CD ; 126.563 5A, 0.803
040CA5 C9 00 00    0905*      dl 0x0000C9 ; 127.969 5B, 0.788
040CA8 C5 00 00    0906*      dl 0x0000C5 ; 129.375 5C, 0.773
040CAB C1 00 00    0907*      dl 0x0000C1 ; 130.781 5D, 0.757
040CAE BD 00 00    0908*      dl 0x0000BD ; 132.188 5E, 0.741
040CB1 B9 00 00    0909*      dl 0x0000B9 ; 133.594 5F, 0.724
040CB4 B5 00 00    0910*      dl 0x0000B5 ; 135.000 60, 0.707
040CB7 B0 00 00    0911*      dl 0x0000B0 ; 136.406 61, 0.690
040CBA AB 00 00    0912*      dl 0x0000AB ; 137.813 62, 0.672
040CBD A7 00 00    0913*      dl 0x0000A7 ; 139.219 63, 0.653
040CC0 A2 00 00    0914*      dl 0x0000A2 ; 140.625 64, 0.634
040CC3 9D 00 00    0915*      dl 0x00009D ; 142.031 65, 0.615
040CC6 98 00 00    0916*      dl 0x000098 ; 143.438 66, 0.596
040CC9 93 00 00    0917*      dl 0x000093 ; 144.844 67, 0.576
040CCC 8E 00 00    0918*      dl 0x00008E ; 146.250 68, 0.556
040CCF 88 00 00    0919*      dl 0x000088 ; 147.656 69, 0.535
040CD2 83 00 00    0920*      dl 0x000083 ; 149.063 6A, 0.514
040CD5 7E 00 00    0921*      dl 0x00007E ; 150.469 6B, 0.493
040CD8 78 00 00    0922*      dl 0x000078 ; 151.875 6C, 0.471
040CDB 73 00 00    0923*      dl 0x000073 ; 153.281 6D, 0.450
040CDE 6D 00 00    0924*      dl 0x00006D ; 154.688 6E, 0.428
040CE1 67 00 00    0925*      dl 0x000067 ; 156.094 6F, 0.405
040CE4 61 00 00    0926*      dl 0x000061 ; 157.500 70, 0.383
040CE7 5C 00 00    0927*      dl 0x00005C ; 158.906 71, 0.360
040CEA 56 00 00    0928*      dl 0x000056 ; 160.313 72, 0.337
040CED 50 00 00    0929*      dl 0x000050 ; 161.719 73, 0.314
040CF0 4A 00 00    0930*      dl 0x00004A ; 163.125 74, 0.290
040CF3 44 00 00    0931*      dl 0x000044 ; 164.531 75, 0.267
040CF6 3E 00 00    0932*      dl 0x00003E ; 165.938 76, 0.243
040CF9 38 00 00    0933*      dl 0x000038 ; 167.344 77, 0.219
040CFC 31 00 00    0934*      dl 0x000031 ; 168.750 78, 0.195
040CFF 2B 00 00    0935*      dl 0x00002B ; 170.156 79, 0.171
040D02 25 00 00    0936*      dl 0x000025 ; 171.563 7A, 0.147
040D05 1F 00 00    0937*      dl 0x00001F ; 172.969 7B, 0.122
040D08 19 00 00    0938*      dl 0x000019 ; 174.375 7C, 0.098
040D0B 12 00 00    0939*      dl 0x000012 ; 175.781 7D, 0.074
040D0E 0C 00 00    0940*      dl 0x00000C ; 177.188 7E, 0.049
040D11 06 00 00    0941*      dl 0x000006 ; 178.594 7F, 0.025
040D14 00 00 00    0942*      dl 0x000000 ; 180.000 80, 0.000
040D17 FA FF FF    0943*      dl 0xFFFFFA ; 181.406 81, -0.025
040D1A F4 FF FF    0944*      dl 0xFFFFF4 ; 182.813 82, -0.049
040D1D EE FF FF    0945*      dl 0xFFFFEE ; 184.219 83, -0.074
040D20 E7 FF FF    0946*      dl 0xFFFFE7 ; 185.625 84, -0.098
040D23 E1 FF FF    0947*      dl 0xFFFFE1 ; 187.031 85, -0.122
040D26 DB FF FF    0948*      dl 0xFFFFDB ; 188.438 86, -0.147
040D29 D5 FF FF    0949*      dl 0xFFFFD5 ; 189.844 87, -0.171
040D2C CF FF FF    0950*      dl 0xFFFFCF ; 191.250 88, -0.195
040D2F C8 FF FF    0951*      dl 0xFFFFC8 ; 192.656 89, -0.219
040D32 C2 FF FF    0952*      dl 0xFFFFC2 ; 194.063 8A, -0.243
040D35 BC FF FF    0953*      dl 0xFFFFBC ; 195.469 8B, -0.267
040D38 B6 FF FF    0954*      dl 0xFFFFB6 ; 196.875 8C, -0.290
040D3B B0 FF FF    0955*      dl 0xFFFFB0 ; 198.281 8D, -0.314
040D3E AA FF FF    0956*      dl 0xFFFFAA ; 199.688 8E, -0.337
040D41 A4 FF FF    0957*      dl 0xFFFFA4 ; 201.094 8F, -0.360
040D44 9F FF FF    0958*      dl 0xFFFF9F ; 202.500 90, -0.383
040D47 99 FF FF    0959*      dl 0xFFFF99 ; 203.906 91, -0.405
040D4A 93 FF FF    0960*      dl 0xFFFF93 ; 205.313 92, -0.428
040D4D 8D FF FF    0961*      dl 0xFFFF8D ; 206.719 93, -0.450
040D50 88 FF FF    0962*      dl 0xFFFF88 ; 208.125 94, -0.471
040D53 82 FF FF    0963*      dl 0xFFFF82 ; 209.531 95, -0.493
040D56 7D FF FF    0964*      dl 0xFFFF7D ; 210.938 96, -0.514
040D59 78 FF FF    0965*      dl 0xFFFF78 ; 212.344 97, -0.535
040D5C 72 FF FF    0966*      dl 0xFFFF72 ; 213.750 98, -0.556
040D5F 6D FF FF    0967*      dl 0xFFFF6D ; 215.156 99, -0.576
040D62 68 FF FF    0968*      dl 0xFFFF68 ; 216.563 9A, -0.596
040D65 63 FF FF    0969*      dl 0xFFFF63 ; 217.969 9B, -0.615
040D68 5E FF FF    0970*      dl 0xFFFF5E ; 219.375 9C, -0.634
040D6B 59 FF FF    0971*      dl 0xFFFF59 ; 220.781 9D, -0.653
040D6E 55 FF FF    0972*      dl 0xFFFF55 ; 222.188 9E, -0.672
040D71 50 FF FF    0973*      dl 0xFFFF50 ; 223.594 9F, -0.690
040D74 4B FF FF    0974*      dl 0xFFFF4B ; 225.000 A0, -0.707
040D77 47 FF FF    0975*      dl 0xFFFF47 ; 226.406 A1, -0.724
040D7A 43 FF FF    0976*      dl 0xFFFF43 ; 227.813 A2, -0.741
040D7D 3F FF FF    0977*      dl 0xFFFF3F ; 229.219 A3, -0.757
040D80 3B FF FF    0978*      dl 0xFFFF3B ; 230.625 A4, -0.773
040D83 37 FF FF    0979*      dl 0xFFFF37 ; 232.031 A5, -0.788
040D86 33 FF FF    0980*      dl 0xFFFF33 ; 233.438 A6, -0.803
040D89 2F FF FF    0981*      dl 0xFFFF2F ; 234.844 A7, -0.818
040D8C 2C FF FF    0982*      dl 0xFFFF2C ; 236.250 A8, -0.831
040D8F 28 FF FF    0983*      dl 0xFFFF28 ; 237.656 A9, -0.845
040D92 25 FF FF    0984*      dl 0xFFFF25 ; 239.063 AA, -0.858
040D95 22 FF FF    0985*      dl 0xFFFF22 ; 240.469 AB, -0.870
040D98 1F FF FF    0986*      dl 0xFFFF1F ; 241.875 AC, -0.882
040D9B 1C FF FF    0987*      dl 0xFFFF1C ; 243.281 AD, -0.893
040D9E 19 FF FF    0988*      dl 0xFFFF19 ; 244.688 AE, -0.904
040DA1 16 FF FF    0989*      dl 0xFFFF16 ; 246.094 AF, -0.914
040DA4 14 FF FF    0990*      dl 0xFFFF14 ; 247.500 B0, -0.924
040DA7 12 FF FF    0991*      dl 0xFFFF12 ; 248.906 B1, -0.933
040DAA 0F FF FF    0992*      dl 0xFFFF0F ; 250.313 B2, -0.942
040DAD 0D FF FF    0993*      dl 0xFFFF0D ; 251.719 B3, -0.950
040DB0 0C FF FF    0994*      dl 0xFFFF0C ; 253.125 B4, -0.957
040DB3 0A FF FF    0995*      dl 0xFFFF0A ; 254.531 B5, -0.964
040DB6 08 FF FF    0996*      dl 0xFFFF08 ; 255.938 B6, -0.970
040DB9 07 FF FF    0997*      dl 0xFFFF07 ; 257.344 B7, -0.976
040DBC 05 FF FF    0998*      dl 0xFFFF05 ; 258.750 B8, -0.981
040DBF 04 FF FF    0999*      dl 0xFFFF04 ; 260.156 B9, -0.985
040DC2 03 FF FF    1000*      dl 0xFFFF03 ; 261.563 BA, -0.989
040DC5 02 FF FF    1001*      dl 0xFFFF02 ; 262.969 BB, -0.992
040DC8 02 FF FF    1002*      dl 0xFFFF02 ; 264.375 BC, -0.995
040DCB 01 FF FF    1003*      dl 0xFFFF01 ; 265.781 BD, -0.997
040DCE 01 FF FF    1004*      dl 0xFFFF01 ; 267.188 BE, -0.999
040DD1 01 FF FF    1005*      dl 0xFFFF01 ; 268.594 BF, -1.000
040DD4 00 FF FF    1006*      dl 0xFFFF00 ; 270.000 C0, -1.000
040DD7 01 FF FF    1007*      dl 0xFFFF01 ; 271.406 C1, -1.000
040DDA 01 FF FF    1008*      dl 0xFFFF01 ; 272.813 C2, -0.999
040DDD 01 FF FF    1009*      dl 0xFFFF01 ; 274.219 C3, -0.997
040DE0 02 FF FF    1010*      dl 0xFFFF02 ; 275.625 C4, -0.995
040DE3 02 FF FF    1011*      dl 0xFFFF02 ; 277.031 C5, -0.992
040DE6 03 FF FF    1012*      dl 0xFFFF03 ; 278.438 C6, -0.989
040DE9 04 FF FF    1013*      dl 0xFFFF04 ; 279.844 C7, -0.985
040DEC 05 FF FF    1014*      dl 0xFFFF05 ; 281.250 C8, -0.981
040DEF 07 FF FF    1015*      dl 0xFFFF07 ; 282.656 C9, -0.976
040DF2 08 FF FF    1016*      dl 0xFFFF08 ; 284.063 CA, -0.970
040DF5 0A FF FF    1017*      dl 0xFFFF0A ; 285.469 CB, -0.964
040DF8 0C FF FF    1018*      dl 0xFFFF0C ; 286.875 CC, -0.957
040DFB 0D FF FF    1019*      dl 0xFFFF0D ; 288.281 CD, -0.950
040DFE 0F FF FF    1020*      dl 0xFFFF0F ; 289.688 CE, -0.942
040E01 12 FF FF    1021*      dl 0xFFFF12 ; 291.094 CF, -0.933
040E04 14 FF FF    1022*      dl 0xFFFF14 ; 292.500 D0, -0.924
040E07 16 FF FF    1023*      dl 0xFFFF16 ; 293.906 D1, -0.914
040E0A 19 FF FF    1024*      dl 0xFFFF19 ; 295.313 D2, -0.904
040E0D 1C FF FF    1025*      dl 0xFFFF1C ; 296.719 D3, -0.893
040E10 1F FF FF    1026*      dl 0xFFFF1F ; 298.125 D4, -0.882
040E13 22 FF FF    1027*      dl 0xFFFF22 ; 299.531 D5, -0.870
040E16 25 FF FF    1028*      dl 0xFFFF25 ; 300.938 D6, -0.858
040E19 28 FF FF    1029*      dl 0xFFFF28 ; 302.344 D7, -0.845
040E1C 2C FF FF    1030*      dl 0xFFFF2C ; 303.750 D8, -0.831
040E1F 2F FF FF    1031*      dl 0xFFFF2F ; 305.156 D9, -0.818
040E22 33 FF FF    1032*      dl 0xFFFF33 ; 306.563 DA, -0.803
040E25 37 FF FF    1033*      dl 0xFFFF37 ; 307.969 DB, -0.788
040E28 3B FF FF    1034*      dl 0xFFFF3B ; 309.375 DC, -0.773
040E2B 3F FF FF    1035*      dl 0xFFFF3F ; 310.781 DD, -0.757
040E2E 43 FF FF    1036*      dl 0xFFFF43 ; 312.188 DE, -0.741
040E31 47 FF FF    1037*      dl 0xFFFF47 ; 313.594 DF, -0.724
040E34 4B FF FF    1038*      dl 0xFFFF4B ; 315.000 E0, -0.707
040E37 50 FF FF    1039*      dl 0xFFFF50 ; 316.406 E1, -0.690
040E3A 55 FF FF    1040*      dl 0xFFFF55 ; 317.813 E2, -0.672
040E3D 59 FF FF    1041*      dl 0xFFFF59 ; 319.219 E3, -0.653
040E40 5E FF FF    1042*      dl 0xFFFF5E ; 320.625 E4, -0.634
040E43 63 FF FF    1043*      dl 0xFFFF63 ; 322.031 E5, -0.615
040E46 68 FF FF    1044*      dl 0xFFFF68 ; 323.438 E6, -0.596
040E49 6D FF FF    1045*      dl 0xFFFF6D ; 324.844 E7, -0.576
040E4C 72 FF FF    1046*      dl 0xFFFF72 ; 326.250 E8, -0.556
040E4F 78 FF FF    1047*      dl 0xFFFF78 ; 327.656 E9, -0.535
040E52 7D FF FF    1048*      dl 0xFFFF7D ; 329.063 EA, -0.514
040E55 82 FF FF    1049*      dl 0xFFFF82 ; 330.469 EB, -0.493
040E58 88 FF FF    1050*      dl 0xFFFF88 ; 331.875 EC, -0.471
040E5B 8D FF FF    1051*      dl 0xFFFF8D ; 333.281 ED, -0.450
040E5E 93 FF FF    1052*      dl 0xFFFF93 ; 334.688 EE, -0.428
040E61 99 FF FF    1053*      dl 0xFFFF99 ; 336.094 EF, -0.405
040E64 9F FF FF    1054*      dl 0xFFFF9F ; 337.500 F0, -0.383
040E67 A4 FF FF    1055*      dl 0xFFFFA4 ; 338.906 F1, -0.360
040E6A AA FF FF    1056*      dl 0xFFFFAA ; 340.313 F2, -0.337
040E6D B0 FF FF    1057*      dl 0xFFFFB0 ; 341.719 F3, -0.314
040E70 B6 FF FF    1058*      dl 0xFFFFB6 ; 343.125 F4, -0.290
040E73 BC FF FF    1059*      dl 0xFFFFBC ; 344.531 F5, -0.267
040E76 C2 FF FF    1060*      dl 0xFFFFC2 ; 345.938 F6, -0.243
040E79 C8 FF FF    1061*      dl 0xFFFFC8 ; 347.344 F7, -0.219
040E7C CF FF FF    1062*      dl 0xFFFFCF ; 348.750 F8, -0.195
040E7F D5 FF FF    1063*      dl 0xFFFFD5 ; 350.156 F9, -0.171
040E82 DB FF FF    1064*      dl 0xFFFFDB ; 351.563 FA, -0.147
040E85 E1 FF FF    1065*      dl 0xFFFFE1 ; 352.969 FB, -0.122
040E88 E7 FF FF    1066*      dl 0xFFFFE7 ; 354.375 FC, -0.098
040E8B EE FF FF    1067*      dl 0xFFFFEE ; 355.781 FD, -0.074
040E8E F4 FF FF    1068*      dl 0xFFFFF4 ; 357.188 FE, -0.049
040E91 FA FF FF    1069*      dl 0xFFFFFA ; 358.594 FF, -0.025
040E94 00 00 00    1070*      dl 0x000000 ; 0.000 00, 0.000 for interpolation
040E97             1071*  
040E97             1072*  atan_lut_168:
040E97 00 00 00    1073*      dl 0x000000 ; 000000, 0.000
040E9A 28 00 00    1074*      dl 0x000028 ; 000001, 0.224
040E9D 51 00 00    1075*      dl 0x000051 ; 000002, 0.448
040EA0 7A 00 00    1076*      dl 0x00007A ; 000003, 0.671
040EA3 A2 00 00    1077*      dl 0x0000A2 ; 000004, 0.895
040EA6 CB 00 00    1078*      dl 0x0000CB ; 000005, 1.119
040EA9 F4 00 00    1079*      dl 0x0000F4 ; 000006, 1.343
040EAC 1D 01 00    1080*      dl 0x00011D ; 000007, 1.566
040EAF 45 01 00    1081*      dl 0x000145 ; 000008, 1.790
040EB2 6E 01 00    1082*      dl 0x00016E ; 000009, 2.013
040EB5 97 01 00    1083*      dl 0x000197 ; 00000A, 2.237
040EB8 BF 01 00    1084*      dl 0x0001BF ; 00000B, 2.460
040EBB E8 01 00    1085*      dl 0x0001E8 ; 00000C, 2.684
040EBE 11 02 00    1086*      dl 0x000211 ; 00000D, 2.907
040EC1 39 02 00    1087*      dl 0x000239 ; 00000E, 3.130
040EC4 62 02 00    1088*      dl 0x000262 ; 00000F, 3.353
040EC7 8B 02 00    1089*      dl 0x00028B ; 000010, 3.576
040ECA B3 02 00    1090*      dl 0x0002B3 ; 000011, 3.799
040ECD DC 02 00    1091*      dl 0x0002DC ; 000012, 4.022
040ED0 04 03 00    1092*      dl 0x000304 ; 000013, 4.245
040ED3 2D 03 00    1093*      dl 0x00032D ; 000014, 4.467
040ED6 55 03 00    1094*      dl 0x000355 ; 000015, 4.690
040ED9 7E 03 00    1095*      dl 0x00037E ; 000016, 4.912
040EDC A6 03 00    1096*      dl 0x0003A6 ; 000017, 5.134
040EDF CE 03 00    1097*      dl 0x0003CE ; 000018, 5.356
040EE2 F7 03 00    1098*      dl 0x0003F7 ; 000019, 5.578
040EE5 1F 04 00    1099*      dl 0x00041F ; 00001A, 5.799
040EE8 48 04 00    1100*      dl 0x000448 ; 00001B, 6.021
040EEB 70 04 00    1101*      dl 0x000470 ; 00001C, 6.242
040EEE 98 04 00    1102*      dl 0x000498 ; 00001D, 6.463
040EF1 C0 04 00    1103*      dl 0x0004C0 ; 00001E, 6.684
040EF4 E8 04 00    1104*      dl 0x0004E8 ; 00001F, 6.905
040EF7 11 05 00    1105*      dl 0x000511 ; 000020, 7.125
040EFA 39 05 00    1106*      dl 0x000539 ; 000021, 7.345
040EFD 61 05 00    1107*      dl 0x000561 ; 000022, 7.565
040F00 89 05 00    1108*      dl 0x000589 ; 000023, 7.785
040F03 B1 05 00    1109*      dl 0x0005B1 ; 000024, 8.005
040F06 D9 05 00    1110*      dl 0x0005D9 ; 000025, 8.224
040F09 01 06 00    1111*      dl 0x000601 ; 000026, 8.443
040F0C 28 06 00    1112*      dl 0x000628 ; 000027, 8.662
040F0F 50 06 00    1113*      dl 0x000650 ; 000028, 8.881
040F12 78 06 00    1114*      dl 0x000678 ; 000029, 9.099
040F15 A0 06 00    1115*      dl 0x0006A0 ; 00002A, 9.317
040F18 C7 06 00    1116*      dl 0x0006C7 ; 00002B, 9.535
040F1B EF 06 00    1117*      dl 0x0006EF ; 00002C, 9.752
040F1E 16 07 00    1118*      dl 0x000716 ; 00002D, 9.970
040F21 3E 07 00    1119*      dl 0x00073E ; 00002E, 10.187
040F24 65 07 00    1120*      dl 0x000765 ; 00002F, 10.403
040F27 8D 07 00    1121*      dl 0x00078D ; 000030, 10.620
040F2A B4 07 00    1122*      dl 0x0007B4 ; 000031, 10.836
040F2D DB 07 00    1123*      dl 0x0007DB ; 000032, 11.051
040F30 03 08 00    1124*      dl 0x000803 ; 000033, 11.267
040F33 2A 08 00    1125*      dl 0x00082A ; 000034, 11.482
040F36 51 08 00    1126*      dl 0x000851 ; 000035, 11.697
040F39 78 08 00    1127*      dl 0x000878 ; 000036, 11.911
040F3C 9F 08 00    1128*      dl 0x00089F ; 000037, 12.125
040F3F C6 08 00    1129*      dl 0x0008C6 ; 000038, 12.339
040F42 ED 08 00    1130*      dl 0x0008ED ; 000039, 12.553
040F45 13 09 00    1131*      dl 0x000913 ; 00003A, 12.766
040F48 3A 09 00    1132*      dl 0x00093A ; 00003B, 12.978
040F4B 61 09 00    1133*      dl 0x000961 ; 00003C, 13.191
040F4E 87 09 00    1134*      dl 0x000987 ; 00003D, 13.403
040F51 AE 09 00    1135*      dl 0x0009AE ; 00003E, 13.614
040F54 D4 09 00    1136*      dl 0x0009D4 ; 00003F, 13.825
040F57 FB 09 00    1137*      dl 0x0009FB ; 000040, 14.036
040F5A 21 0A 00    1138*      dl 0x000A21 ; 000041, 14.247
040F5D 47 0A 00    1139*      dl 0x000A47 ; 000042, 14.457
040F60 6D 0A 00    1140*      dl 0x000A6D ; 000043, 14.666
040F63 94 0A 00    1141*      dl 0x000A94 ; 000044, 14.876
040F66 BA 0A 00    1142*      dl 0x000ABA ; 000045, 15.085
040F69 E0 0A 00    1143*      dl 0x000AE0 ; 000046, 15.293
040F6C 05 0B 00    1144*      dl 0x000B05 ; 000047, 15.501
040F6F 2B 0B 00    1145*      dl 0x000B2B ; 000048, 15.709
040F72 51 0B 00    1146*      dl 0x000B51 ; 000049, 15.916
040F75 77 0B 00    1147*      dl 0x000B77 ; 00004A, 16.123
040F78 9C 0B 00    1148*      dl 0x000B9C ; 00004B, 16.329
040F7B C2 0B 00    1149*      dl 0x000BC2 ; 00004C, 16.535
040F7E E7 0B 00    1150*      dl 0x000BE7 ; 00004D, 16.740
040F81 0C 0C 00    1151*      dl 0x000C0C ; 00004E, 16.945
040F84 32 0C 00    1152*      dl 0x000C32 ; 00004F, 17.150
040F87 57 0C 00    1153*      dl 0x000C57 ; 000050, 17.354
040F8A 7C 0C 00    1154*      dl 0x000C7C ; 000051, 17.558
040F8D A1 0C 00    1155*      dl 0x000CA1 ; 000052, 17.761
040F90 C6 0C 00    1156*      dl 0x000CC6 ; 000053, 17.964
040F93 EB 0C 00    1157*      dl 0x000CEB ; 000054, 18.166
040F96 0F 0D 00    1158*      dl 0x000D0F ; 000055, 18.368
040F99 34 0D 00    1159*      dl 0x000D34 ; 000056, 18.569
040F9C 58 0D 00    1160*      dl 0x000D58 ; 000057, 18.770
040F9F 7D 0D 00    1161*      dl 0x000D7D ; 000058, 18.970
040FA2 A1 0D 00    1162*      dl 0x000DA1 ; 000059, 19.170
040FA5 C6 0D 00    1163*      dl 0x000DC6 ; 00005A, 19.370
040FA8 EA 0D 00    1164*      dl 0x000DEA ; 00005B, 19.569
040FAB 0E 0E 00    1165*      dl 0x000E0E ; 00005C, 19.767
040FAE 32 0E 00    1166*      dl 0x000E32 ; 00005D, 19.965
040FB1 56 0E 00    1167*      dl 0x000E56 ; 00005E, 20.163
040FB4 7A 0E 00    1168*      dl 0x000E7A ; 00005F, 20.360
040FB7 9E 0E 00    1169*      dl 0x000E9E ; 000060, 20.556
040FBA C1 0E 00    1170*      dl 0x000EC1 ; 000061, 20.752
040FBD E5 0E 00    1171*      dl 0x000EE5 ; 000062, 20.947
040FC0 08 0F 00    1172*      dl 0x000F08 ; 000063, 21.142
040FC3 2C 0F 00    1173*      dl 0x000F2C ; 000064, 21.337
040FC6 4F 0F 00    1174*      dl 0x000F4F ; 000065, 21.531
040FC9 72 0F 00    1175*      dl 0x000F72 ; 000066, 21.724
040FCC 95 0F 00    1176*      dl 0x000F95 ; 000067, 21.917
040FCF B8 0F 00    1177*      dl 0x000FB8 ; 000068, 22.109
040FD2 DB 0F 00    1178*      dl 0x000FDB ; 000069, 22.301
040FD5 FE 0F 00    1179*      dl 0x000FFE ; 00006A, 22.493
040FD8 21 10 00    1180*      dl 0x001021 ; 00006B, 22.683
040FDB 44 10 00    1181*      dl 0x001044 ; 00006C, 22.874
040FDE 66 10 00    1182*      dl 0x001066 ; 00006D, 23.063
040FE1 89 10 00    1183*      dl 0x001089 ; 00006E, 23.253
040FE4 AB 10 00    1184*      dl 0x0010AB ; 00006F, 23.441
040FE7 CD 10 00    1185*      dl 0x0010CD ; 000070, 23.629
040FEA EF 10 00    1186*      dl 0x0010EF ; 000071, 23.817
040FED 11 11 00    1187*      dl 0x001111 ; 000072, 24.004
040FF0 33 11 00    1188*      dl 0x001133 ; 000073, 24.191
040FF3 55 11 00    1189*      dl 0x001155 ; 000074, 24.376
040FF6 77 11 00    1190*      dl 0x001177 ; 000075, 24.562
040FF9 99 11 00    1191*      dl 0x001199 ; 000076, 24.747
040FFC BA 11 00    1192*      dl 0x0011BA ; 000077, 24.931
040FFF DC 11 00    1193*      dl 0x0011DC ; 000078, 25.115
041002 FD 11 00    1194*      dl 0x0011FD ; 000079, 25.298
041005 1E 12 00    1195*      dl 0x00121E ; 00007A, 25.481
041008 3F 12 00    1196*      dl 0x00123F ; 00007B, 25.663
04100B 60 12 00    1197*      dl 0x001260 ; 00007C, 25.844
04100E 81 12 00    1198*      dl 0x001281 ; 00007D, 26.025
041011 A2 12 00    1199*      dl 0x0012A2 ; 00007E, 26.206
041014 C3 12 00    1200*      dl 0x0012C3 ; 00007F, 26.386
041017 E4 12 00    1201*      dl 0x0012E4 ; 000080, 26.565
04101A 04 13 00    1202*      dl 0x001304 ; 000081, 26.744
04101D 25 13 00    1203*      dl 0x001325 ; 000082, 26.922
041020 45 13 00    1204*      dl 0x001345 ; 000083, 27.100
041023 65 13 00    1205*      dl 0x001365 ; 000084, 27.277
041026 85 13 00    1206*      dl 0x001385 ; 000085, 27.453
041029 A5 13 00    1207*      dl 0x0013A5 ; 000086, 27.629
04102C C5 13 00    1208*      dl 0x0013C5 ; 000087, 27.805
04102F E5 13 00    1209*      dl 0x0013E5 ; 000088, 27.979
041032 05 14 00    1210*      dl 0x001405 ; 000089, 28.154
041035 24 14 00    1211*      dl 0x001424 ; 00008A, 28.327
041038 44 14 00    1212*      dl 0x001444 ; 00008B, 28.501
04103B 63 14 00    1213*      dl 0x001463 ; 00008C, 28.673
04103E 83 14 00    1214*      dl 0x001483 ; 00008D, 28.845
041041 A2 14 00    1215*      dl 0x0014A2 ; 00008E, 29.017
041044 C1 14 00    1216*      dl 0x0014C1 ; 00008F, 29.187
041047 E0 14 00    1217*      dl 0x0014E0 ; 000090, 29.358
04104A FF 14 00    1218*      dl 0x0014FF ; 000091, 29.527
04104D 1E 15 00    1219*      dl 0x00151E ; 000092, 29.697
041050 3C 15 00    1220*      dl 0x00153C ; 000093, 29.865
041053 5B 15 00    1221*      dl 0x00155B ; 000094, 30.033
041056 79 15 00    1222*      dl 0x001579 ; 000095, 30.201
041059 98 15 00    1223*      dl 0x001598 ; 000096, 30.368
04105C B6 15 00    1224*      dl 0x0015B6 ; 000097, 30.534
04105F D4 15 00    1225*      dl 0x0015D4 ; 000098, 30.700
041062 F2 15 00    1226*      dl 0x0015F2 ; 000099, 30.865
041065 10 16 00    1227*      dl 0x001610 ; 00009A, 31.030
041068 2E 16 00    1228*      dl 0x00162E ; 00009B, 31.194
04106B 4C 16 00    1229*      dl 0x00164C ; 00009C, 31.357
04106E 6A 16 00    1230*      dl 0x00166A ; 00009D, 31.520
041071 87 16 00    1231*      dl 0x001687 ; 00009E, 31.682
041074 A5 16 00    1232*      dl 0x0016A5 ; 00009F, 31.844
041077 C2 16 00    1233*      dl 0x0016C2 ; 0000A0, 32.005
04107A DF 16 00    1234*      dl 0x0016DF ; 0000A1, 32.166
04107D FC 16 00    1235*      dl 0x0016FC ; 0000A2, 32.326
041080 19 17 00    1236*      dl 0x001719 ; 0000A3, 32.486
041083 36 17 00    1237*      dl 0x001736 ; 0000A4, 32.645
041086 53 17 00    1238*      dl 0x001753 ; 0000A5, 32.803
041089 70 17 00    1239*      dl 0x001770 ; 0000A6, 32.961
04108C 8C 17 00    1240*      dl 0x00178C ; 0000A7, 33.118
04108F A9 17 00    1241*      dl 0x0017A9 ; 0000A8, 33.275
041092 C5 17 00    1242*      dl 0x0017C5 ; 0000A9, 33.431
041095 E2 17 00    1243*      dl 0x0017E2 ; 0000AA, 33.587
041098 FE 17 00    1244*      dl 0x0017FE ; 0000AB, 33.742
04109B 1A 18 00    1245*      dl 0x00181A ; 0000AC, 33.896
04109E 36 18 00    1246*      dl 0x001836 ; 0000AD, 34.050
0410A1 52 18 00    1247*      dl 0x001852 ; 0000AE, 34.203
0410A4 6E 18 00    1248*      dl 0x00186E ; 0000AF, 34.356
0410A7 8A 18 00    1249*      dl 0x00188A ; 0000B0, 34.509
0410AA A5 18 00    1250*      dl 0x0018A5 ; 0000B1, 34.660
0410AD C1 18 00    1251*      dl 0x0018C1 ; 0000B2, 34.811
0410B0 DC 18 00    1252*      dl 0x0018DC ; 0000B3, 34.962
0410B3 F7 18 00    1253*      dl 0x0018F7 ; 0000B4, 35.112
0410B6 13 19 00    1254*      dl 0x001913 ; 0000B5, 35.262
0410B9 2E 19 00    1255*      dl 0x00192E ; 0000B6, 35.410
0410BC 49 19 00    1256*      dl 0x001949 ; 0000B7, 35.559
0410BF 64 19 00    1257*      dl 0x001964 ; 0000B8, 35.707
0410C2 7F 19 00    1258*      dl 0x00197F ; 0000B9, 35.854
0410C5 99 19 00    1259*      dl 0x001999 ; 0000BA, 36.001
0410C8 B4 19 00    1260*      dl 0x0019B4 ; 0000BB, 36.147
0410CB CE 19 00    1261*      dl 0x0019CE ; 0000BC, 36.293
0410CE E9 19 00    1262*      dl 0x0019E9 ; 0000BD, 36.438
0410D1 03 1A 00    1263*      dl 0x001A03 ; 0000BE, 36.582
0410D4 1D 1A 00    1264*      dl 0x001A1D ; 0000BF, 36.726
0410D7 37 1A 00    1265*      dl 0x001A37 ; 0000C0, 36.870
0410DA 51 1A 00    1266*      dl 0x001A51 ; 0000C1, 37.013
0410DD 6B 1A 00    1267*      dl 0x001A6B ; 0000C2, 37.155
0410E0 85 1A 00    1268*      dl 0x001A85 ; 0000C3, 37.297
0410E3 9F 1A 00    1269*      dl 0x001A9F ; 0000C4, 37.439
0410E6 B9 1A 00    1270*      dl 0x001AB9 ; 0000C5, 37.579
0410E9 D2 1A 00    1271*      dl 0x001AD2 ; 0000C6, 37.720
0410EC EC 1A 00    1272*      dl 0x001AEC ; 0000C7, 37.859
0410EF 05 1B 00    1273*      dl 0x001B05 ; 0000C8, 37.999
0410F2 1E 1B 00    1274*      dl 0x001B1E ; 0000C9, 38.137
0410F5 37 1B 00    1275*      dl 0x001B37 ; 0000CA, 38.276
0410F8 50 1B 00    1276*      dl 0x001B50 ; 0000CB, 38.413
0410FB 69 1B 00    1277*      dl 0x001B69 ; 0000CC, 38.550
0410FE 82 1B 00    1278*      dl 0x001B82 ; 0000CD, 38.687
041101 9B 1B 00    1279*      dl 0x001B9B ; 0000CE, 38.823
041104 B4 1B 00    1280*      dl 0x001BB4 ; 0000CF, 38.959
041107 CC 1B 00    1281*      dl 0x001BCC ; 0000D0, 39.094
04110A E5 1B 00    1282*      dl 0x001BE5 ; 0000D1, 39.228
04110D FD 1B 00    1283*      dl 0x001BFD ; 0000D2, 39.362
041110 16 1C 00    1284*      dl 0x001C16 ; 0000D3, 39.496
041113 2E 1C 00    1285*      dl 0x001C2E ; 0000D4, 39.629
041116 46 1C 00    1286*      dl 0x001C46 ; 0000D5, 39.762
041119 5E 1C 00    1287*      dl 0x001C5E ; 0000D6, 39.894
04111C 76 1C 00    1288*      dl 0x001C76 ; 0000D7, 40.025
04111F 8E 1C 00    1289*      dl 0x001C8E ; 0000D8, 40.156
041122 A5 1C 00    1290*      dl 0x001CA5 ; 0000D9, 40.286
041125 BD 1C 00    1291*      dl 0x001CBD ; 0000DA, 40.416
041128 D5 1C 00    1292*      dl 0x001CD5 ; 0000DB, 40.546
04112B EC 1C 00    1293*      dl 0x001CEC ; 0000DC, 40.675
04112E 04 1D 00    1294*      dl 0x001D04 ; 0000DD, 40.803
041131 1B 1D 00    1295*      dl 0x001D1B ; 0000DE, 40.931
041134 32 1D 00    1296*      dl 0x001D32 ; 0000DF, 41.059
041137 49 1D 00    1297*      dl 0x001D49 ; 0000E0, 41.186
04113A 60 1D 00    1298*      dl 0x001D60 ; 0000E1, 41.312
04113D 77 1D 00    1299*      dl 0x001D77 ; 0000E2, 41.438
041140 8E 1D 00    1300*      dl 0x001D8E ; 0000E3, 41.564
041143 A5 1D 00    1301*      dl 0x001DA5 ; 0000E4, 41.689
041146 BB 1D 00    1302*      dl 0x001DBB ; 0000E5, 41.814
041149 D2 1D 00    1303*      dl 0x001DD2 ; 0000E6, 41.938
04114C E9 1D 00    1304*      dl 0x001DE9 ; 0000E7, 42.061
04114F FF 1D 00    1305*      dl 0x001DFF ; 0000E8, 42.184
041152 15 1E 00    1306*      dl 0x001E15 ; 0000E9, 42.307
041155 2C 1E 00    1307*      dl 0x001E2C ; 0000EA, 42.429
041158 42 1E 00    1308*      dl 0x001E42 ; 0000EB, 42.551
04115B 58 1E 00    1309*      dl 0x001E58 ; 0000EC, 42.672
04115E 6E 1E 00    1310*      dl 0x001E6E ; 0000ED, 42.793
041161 84 1E 00    1311*      dl 0x001E84 ; 0000EE, 42.913
041164 99 1E 00    1312*      dl 0x001E99 ; 0000EF, 43.033
041167 AF 1E 00    1313*      dl 0x001EAF ; 0000F0, 43.152
04116A C5 1E 00    1314*      dl 0x001EC5 ; 0000F1, 43.271
04116D DA 1E 00    1315*      dl 0x001EDA ; 0000F2, 43.390
041170 F0 1E 00    1316*      dl 0x001EF0 ; 0000F3, 43.508
041173 05 1F 00    1317*      dl 0x001F05 ; 0000F4, 43.625
041176 1B 1F 00    1318*      dl 0x001F1B ; 0000F5, 43.742
041179 30 1F 00    1319*      dl 0x001F30 ; 0000F6, 43.859
04117C 45 1F 00    1320*      dl 0x001F45 ; 0000F7, 43.975
04117F 5A 1F 00    1321*      dl 0x001F5A ; 0000F8, 44.091
041182 6F 1F 00    1322*      dl 0x001F6F ; 0000F9, 44.206
041185 84 1F 00    1323*      dl 0x001F84 ; 0000FA, 44.321
041188 99 1F 00    1324*      dl 0x001F99 ; 0000FB, 44.435
04118B AD 1F 00    1325*      dl 0x001FAD ; 0000FC, 44.549
04118E C2 1F 00    1326*      dl 0x001FC2 ; 0000FD, 44.662
041191 D7 1F 00    1327*      dl 0x001FD7 ; 0000FE, 44.775
041194 EB 1F 00    1328*      dl 0x001FEB ; 0000FF, 44.888
041197 00 20 00    1329*      dl 0x002000 ; 000100, 45.000 only needed for interpolation
04119A             0034       include "fonts.inc"
04119A             0001*  fonts_load:
04119A DD 21 1D 1D 0002*      ld ix,font_list ; pointer to font list lookup
       04          
04119F 06 12       0003*      ld b,num_fonts ; loop counter
0411A1             0004*  
0411A1             0005*  @load_loop:
0411A1 C5          0006*      push bc ; save loop counter
0411A2             0007*  
0411A2             0008*  ; load font into a buffer
0411A2 DD 27 06    0009*      ld hl,(ix+font_list_bufferId)
0411A5 DD 31 09    0010*      ld iy,(ix+font_list_filename)
0411A8 CD DC 16 04 0011*      call vdu_load_buffer_from_file
0411AC             0012*  
0411AC             0013*  ; create font from buffer
0411AC DD 27 06    0014*      ld hl,(ix+font_list_bufferId)
0411AF DD 5E 00    0015*      ld e,(ix+font_list_width)
0411B2 DD 56 03    0016*      ld d,(ix+font_list_height)
0411B5 3E 00       0017*      ld a,0 ; flags
0411B7 CD 5F 18 04 0018*      call vdu_font_create
0411BB             0019*  
0411BB             0020*  ; select font
0411BB DD 27 06    0021*      ld hl,(ix+font_list_bufferId)
0411BE 3E 01       0022*      ld a,1 ; flags
0411C0 CD 45 18 04 0023*      call vdu_font_select
0411C4             0024*  
0411C4             0025*  ; ; debug print filename
0411C4             0026*  ;     call printNewLine
0411C4             0027*  ;     ld hl,(ix+font_list_filename)
0411C4             0028*  ;     call printString
0411C4             0029*  
0411C4             0030*  ; advance font_list pointer to next record
0411C4 ED 32 0C    0031*      lea ix,ix+font_list_record_size
0411C7             0032*  
0411C7             0033*  ; restore loop counter
0411C7 C1          0034*      pop bc
0411C8 10 D7       0035*      djnz @load_loop
0411CA             0036*  
0411CA             0037*  ; all done
0411CA C9          0038*      ret
0411CB             0035       include "images.inc"
0411CB             0001*  image_type: equ 0
0411CB             0002*  image_width: equ image_type+3
0411CB             0003*  image_height: equ image_width+3
0411CB             0004*  image_filesize: equ image_height+3
0411CB             0005*  image_filename: equ image_filesize+3
0411CB             0006*  image_bufferId: equ image_filename+3
0411CB             0007*  image_record_size: equ image_bufferId+3
0411CB             0008*  
0411CB 00 00 00    0009*  cur_image_list: dl 0
0411CE 00 00 00    0010*  cur_file_idx: dl 0
0411D1 00 00 00    0011*  cur_filename: dl 0
0411D4 00 00 00    0012*  cur_buffer_id: dl 0
0411D7             0013*  
0411D7             0014*  img_load_init:
0411D7             0015*  ; initialize logo's position parameters
0411D7 21 00 00 00 0016*      ld hl,0
0411DB 22 E6 12 04 0017*      ld (logo_xvel),hl
0411DF 22 E9 12 04 0018*      ld (logo_xpos),hl
0411E3             0019*  ; begin 16.8 maths to determine logo's y position and velocity
0411E3 21 00 E0 00 0020*      ld hl,240-16*256 ; allow space for text at bottom of screen
0411E7 22 EF 12 04 0021*      ld (logo_ypos),hl
0411EB EB          0022*      ex de,hl
0411EC 21 00 F8 FF 0023*      ld hl,-8*256 ; 8 pixels from top of screen
0411F0 19          0024*      add hl,de ; distance for logo to travel
0411F1 11 00 25 FE 0025*      ld de,-sprites_num_images-tiles_dg_num_images*256
0411F5 CD B3 08 04 0026*      call sdiv168 ; ud.e = distance / num images = y velocity
0411F9 ED 53 EC 12 0027*      ld (logo_yvel),de
       04          
0411FE             0028*  ; all done
0411FE C9          0029*      ret
0411FF             0030*  
0411FF             0031*  load_ui_images:
0411FF             0032*  ; initialize image loading variables
0411FF 21 00 00 00 0033*      ld hl,0
041203 22 CE 11 04 0034*      ld (cur_file_idx),hl
041207 21 45 6E 04 0035*      ld hl,ui_image_list
04120B 22 CB 11 04 0036*      ld (cur_image_list),hl
04120F             0037*  ; load images
04120F 06 04       0038*      ld b,ui_num_images
041211             0039*  @loop:
041211 C5          0040*      push bc
041212 CD 89 12 04 0041*      call load_next_image
041216 C1          0042*      pop bc
041217 10 F8       0043*      djnz @loop
041219 C9          0044*      ret
04121A             0045*  
04121A             0046*  load_sprite_images:
04121A             0047*  ; initialize image loading variables
04121A 21 00 00 00 0048*      ld hl,0
04121E 22 CE 11 04 0049*      ld (cur_file_idx),hl
041222 21 15 61 04 0050*      ld hl,sprites_image_list
041226 22 CB 11 04 0051*      ld (cur_image_list),hl
04122A 01 4F 00 00 0052*      ld bc,sprites_num_images
04122E             0053*  ; load images
04122E CD 4C 12 04 0054*      call img_load_main
041232 C9          0055*      ret
041233             0056*  
041233             0057*  load_tilesets:
041233             0058*  ; initialize image loading variables
041233 21 00 00 00 0059*      ld hl,0
041237 22 CE 11 04 0060*      ld (cur_file_idx),hl
04123B 21 1D 20 04 0061*      ld hl,tiles_dg_image_list
04123F 22 CB 11 04 0062*      ld (cur_image_list),hl
041243 01 8C 01 00 0063*      ld bc,tiles_dg_num_images
041247             0064*  ; load images
041247 CD 4C 12 04 0065*      call img_load_main
04124B C9          0066*      ret
04124C             0067*  
04124C             0068*  ; inputs: bc is the number of images to load, cur_image_list set
04124C             0069*  img_load_main:
04124C AF          0070*      xor a
04124D 32 CE 11 04 0071*      ld (cur_file_idx),a
041251             0072*  
041251             0073*  img_load_main_loop:
041251             0074*  ; back up loop counter
041251 C5          0075*      push bc
041252             0076*  
041252             0077*  ; load the next image
041252 CD 89 12 04 0078*      call load_next_image
041256             0079*  
041256             0080*  ; plot the background
041256 CD AF 14 04 0081*      call vdu_cls
04125A 21 02 00 00 0082*      ld hl,BUF_SPLASH_BG
04125E CD 9C 15 04 0083*      call vdu_buff_select
041262 01 00 00 00 0084*      ld bc,0
041266 11 00 00 00 0085*      ld de,0
04126A CD F8 18 04 0086*      call vdu_plot_bmp
04126E             0087*  
04126E             0088*  ; ; draw the most recently loaded image
04126E             0089*  ; 	ld hl,(cur_buffer_id)
04126E             0090*  ; 	call vdu_buff_select
04126E             0091*  ; 	ld bc,0
04126E             0092*  ; 	ld de,0
04126E             0093*  ; 	call vdu_plot_bmp
04126E             0094*  
04126E             0095*  ; move logo
04126E CD C1 12 04 0096*      call move_logo
041272             0097*  
041272             0098*  ; print current filename
041272 2A D1 11 04 0099*      ld hl,(cur_filename)
041276 CD 77 00 04 0100*      call printString
04127A             0101*  
04127A             0102*  ; flip the framebuffer
04127A             0103*      ; call vdu_flip
04127A             0104*  
04127A             0105*  ; decrement loop counter
04127A C1          0106*      pop bc
04127B 0B          0107*      dec bc
04127C 79          0108*      ld a,c
04127D B7          0109*      or a
04127E C2 51 12 04 0110*      jp nz,img_load_main_loop
041282 78          0111*      ld a,b
041283 B7          0112*      or a
041284 C2 51 12 04 0113*      jp nz,img_load_main_loop
041288 C9          0114*      ret
041289             0115*  
041289             0116*  load_next_image:
041289 16 12       0117*      ld d,image_record_size
04128B 3A CE 11 04 0118*      ld a,(cur_file_idx)
04128F 5F          0119*      ld e,a
041290 ED 5C       0120*      mlt de
041292 FD 2A CB 11 0121*      ld iy,(cur_image_list)
       04          
041297 FD 19       0122*      add iy,de
041299             0123*  
041299 FD 7E 00    0124*      ld a,(iy+image_type) ; get image type
04129C FD 07 03    0125*      ld bc,(iy+image_width) ; get image width
04129F FD 17 06    0126*      ld de,(iy+image_height) ; get image height
0412A2 FD 31 09    0127*      ld ix,(iy+image_filesize) ; get image file size
0412A5 FD 27 0F    0128*      ld hl,(iy+image_bufferId) ; get image bufferId
0412A8 22 D4 11 04 0129*      ld (cur_buffer_id),hl
0412AC FD 37 0C    0130*      ld iy,(iy+image_filename) ; get image filename
0412AF FD 22 D1 11 0131*      ld (cur_filename),iy
       04          
0412B4 CD BA 16 04 0132*      call vdu_load_img
0412B8 FD 21 CE 11 0133*      ld iy,cur_file_idx
       04          
0412BD FD 34 00    0134*      inc (iy)
0412C0 C9          0135*      ret
0412C1             0136*  
0412C1             0137*  move_logo:
0412C1             0138*  ; activate logo bitmap
0412C1 21 03 00 00 0139*      ld hl, BUF_SPLASH_LOGO
0412C5 CD 9C 15 04 0140*      call vdu_buff_select
0412C9             0141*  ; update position based on velocity parameters
0412C9 2A EF 12 04 0142*      ld hl,(logo_ypos)
0412CD ED 5B EC 12 0143*      ld de,(logo_yvel)
       04          
0412D2 19          0144*      add hl,de
0412D3 22 EF 12 04 0145*      ld (logo_ypos),hl
0412D7             0146*  ; draw logo
0412D7 ED 4B E9 12 0147*      ld bc,(logo_xpos)
       04          
0412DC ED 5B EF 12 0148*      ld de,(logo_ypos)
       04          
0412E1 CD 14 19 04 0149*      call vdu_plot_bmp168
0412E5 C9          0150*      ret
0412E6             0151*  
0412E6 00 00 00    0152*  logo_xvel: dl 0
0412E9 00 00 00    0153*  logo_xpos: dl 0
0412EC             0154*  
0412EC 00 00 00    0155*  logo_yvel: dl 0
0412EF 00 00 00    0156*  logo_ypos: dl 0
0412F2             0036       include "timer.inc"
0412F2             0001*  ; Table 32. Timer Control Registers
0412F2             0002*  ; this constant is the base address of the timer control registers
0412F2             0003*  ; each timer takes three bytes:
0412F2             0004*  ;   0: control register
0412F2             0005*  ;   1: low byte of timer reset value
0412F2             0006*  ;   2: high byte of timer reset value
0412F2             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0412F2             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0412F2             0009*  TMR_CTL:     equ 80h
0412F2             0010*  
0412F2             0011*  ; Timer Control Register Bit Definitions
0412F2             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0412F2             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0412F2             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0412F2             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0412F2             0016*                              ; the TMRx_CTL register is read.
0412F2             0017*  
0412F2             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0412F2             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0412F2             0020*  
0412F2             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0412F2             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0412F2             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0412F2             0024*                              ; written to the counter when the end-of-count value is reached.
0412F2             0025*  
0412F2             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0412F2             0027*  CLK_DIV_256:  equ %00001100 ;
0412F2             0028*  CLK_DIV_64:   equ %00001000 ;
0412F2             0029*  CLK_DIV_16:   equ %00000100 ;
0412F2             0030*  CLK_DIV_4:    equ %00000000 ;
0412F2             0031*  
0412F2             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0412F2             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0412F2             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0412F2             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0412F2             0036*                              ; programmer must ensure that this bit is set to 1 each time
0412F2             0037*                              ; SINGLE-PASS mode is used.
0412F2             0038*  
0412F2             0039*  ; disable/enable the programmable reload timer
0412F2             0040*  PRT_EN_0:     equ %00000000 ;
0412F2             0041*  PRT_EN_1:     equ %00000001 ;
0412F2             0042*  
0412F2             0043*  ; Table 37. Timer Input Source Select Register
0412F2             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0412F2             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0412F2             0046*  ;   00: System clock / CLK_DIV
0412F2             0047*  ;   01: RTC / CLK_DIV
0412F2             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0412F2             0049*  ;   10: GPIO port B pin 1.
0412F2             0050*  ;   11: GPIO port B pin 1.
0412F2             0051*  TMR_ISS:   equ 92h ; register address
0412F2             0052*  
0412F2             0053*  ; Table 51. Real-Time Clock Control Register
0412F2             0054*  RTC_CTRL: equ EDh ; register address
0412F2             0055*  
0412F2             0056*  ; alarm interrupt disable/enable
0412F2             0057*  RTC_ALARM_0:    equ %00000000
0412F2             0058*  RTC_ALARM_1:    equ %10000000
0412F2             0059*  
0412F2             0060*  ; interrupt on alarm disable/enable
0412F2             0061*  RTC_INT_ENT_0:  equ %00000000
0412F2             0062*  RTC_INT_ENT_1:  equ %01000000
0412F2             0063*  
0412F2             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0412F2             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0412F2             0066*  
0412F2             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0412F2             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0412F2             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0412F2             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0412F2             0071*  
0412F2             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0412F2             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0412F2             0074*  
0412F2             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0412F2             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0412F2             0077*  
0412F2             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0412F2             0079*                                  ; RTC counter is enabled.
0412F2             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0412F2             0081*                                  ; RTC counter is disabled.
0412F2             0082*  
0412F2             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0412F2             0084*  
0412F2             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0412F2             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0412F2 00 00 00    0087*  prt_reload: dl 0x000000
0412F5             0088*  
0412F5             0089*  ; set PRT timer
0412F5             0090*  prt_set:
0412F5 21 00 00 00 0091*      ld hl,0
0412F9 22 43 13 04 0092*      ld (prt_irq_counter),hl
0412FD 2A F2 12 04 0093*      ld hl,(prt_reload)
041301 ED 29 84    0094*      out0 ($84),l
041304 ED 21 85    0095*  	out0 ($85),h
041307             0096*  ; disable timer
041307 3E 06       0097*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041309 ED 39 83    0098*  	out0 ($83),a
04130C             0099*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04130C 3E 57       0100*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04130E ED 39 83    0101*  	out0 ($83),a
041311 C9          0102*      ret
041312             0103*  
041312             0104*  ; ===============================================
041312             0105*  ; PRT Timer Interrupt Handling
041312             0106*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
041312             0107*  ; -----------------------------------------------
041312             0108*  prt_irq_init:
041312             0109*      ; set up interrupt vector table 2
041312 21 00 00 00 0110*  	ld hl,0
041316 3A 0C 01 00 0111*  	ld a,($10c)
04131A 6F          0112*  	ld l,a
04131B 3A 0D 01 00 0113*  	ld a,($10d)
04131F 67          0114*  	ld h,a
041320             0115*  
041320             0116*  	; skip over CALL ($c3)
041320 23          0117*  	inc hl
041321             0118*  	; load address of jump into vector table 2 (in ram)
041321 ED 27       0119*  	ld hl,(hl)
041323             0120*  
041323             0121*  	; write CALL prt_irq_handler to vector table 2
041323 3E C3       0122*  	ld a,$c3
041325 77          0123*  	ld (hl),a
041326 23          0124*  	inc hl
041327 11 2E 13 04 0125*  	ld de,prt_irq_handler
04132B ED 1F       0126*  	ld (hl),de
04132D             0127*  
04132D C9          0128*      ret
04132E             0129*  
04132E             0130*  prt_irq_handler:
04132E F3          0131*  	di
04132F F5          0132*  	push af
041330 E5          0133*      push hl
041331 ED 38 83    0134*  	in0 a,($83)
041334 2A 43 13 04 0135*  	ld hl,(prt_irq_counter)
041338 23          0136*  	inc hl
041339 22 43 13 04 0137*  	ld (prt_irq_counter),hl
04133D E1          0138*      pop hl
04133E F1          0139*  	pop af
04133F FB          0140*  	ei
041340 5B ED 4D    0141*  	reti.l
041343             0142*  
041343             0143*  prt_irq_counter:
041343 00 00 00    0144*  	.dl 0
041346             0145*  prt_irq_counter_saved:
041346 00 00 00    0146*      .dl 0
041349             0147*  
041349             0148*  prt_loop_reset:
041349 E5          0149*      push hl
04134A 21 00 00 00 0150*  	ld hl,0
04134E 22 43 13 04 0151*  	ld (prt_irq_counter),hl
041352 22 B4 13 04 0152*      ld (prt_loop_counter),hl
041356 22 B7 13 04 0153*      ld (prt_loops),hl
04135A CD F5 12 04 0154*      call prt_set
04135E E1          0155*      pop hl
04135F C9          0156*      ret
041360             0157*  
041360             0158*  prt_loop_start:
041360 E5          0159*      push hl
041361 21 00 00 00 0160*  	ld hl,0
041365 22 43 13 04 0161*  	ld (prt_irq_counter),hl
041369 E1          0162*      pop hl
04136A C9          0163*      ret
04136B             0164*  
04136B             0165*  prt_loop_stop:
04136B E5          0166*      push hl
04136C D5          0167*      push de
04136D 2A 43 13 04 0168*      ld hl,(prt_irq_counter)
041371 ED 5B B4 13 0169*      ld de,(prt_loop_counter)
       04          
041376 19          0170*      add hl,de
041377 22 B4 13 04 0171*      ld (prt_loop_counter),hl
04137B 21 00 00 00 0172*      ld hl,0
04137F 22 43 13 04 0173*      ld (prt_irq_counter),hl
041383 2A B7 13 04 0174*      ld hl,(prt_loops)
041387 23          0175*      inc hl
041388 22 B7 13 04 0176*      ld (prt_loops),hl
04138C D1          0177*      pop de
04138D E1          0178*      pop hl
04138E C9          0179*      ret
04138F             0180*  
04138F             0181*  ; inputs: bc = y,x text coordinates to print
04138F             0182*  prt_loop_print:
04138F F5          0183*      push af
041390 E5          0184*      push hl
041391 C5          0185*      push bc
041392 D5          0186*      push de
041393 DD E5       0187*      push ix
041395 FD E5       0188*      push iy
041397 CD 9B 14 04 0189*      call vdu_move_cursor
04139B             0190*  
04139B 2A B4 13 04 0191*      ld hl,(prt_loop_counter)
04139F CD 76 01 04 0192*      call printDec
0413A3             0193*  
0413A3 2A B7 13 04 0194*      ld hl,(prt_loops)
0413A7 CD 76 01 04 0195*      call printDec
0413AB             0196*  
0413AB FD E1       0197*      pop iy
0413AD DD E1       0198*      pop ix
0413AF D1          0199*      pop de
0413B0 C1          0200*      pop bc
0413B1 E1          0201*      pop hl
0413B2 F1          0202*      pop af
0413B3 C9          0203*      ret
0413B4             0204*  
0413B4             0205*  prt_loop_counter:
0413B4 00 00 00    0206*      .dl 0
0413B7             0207*  prt_loops:
0413B7 00 00 00    0208*      .dl 0
0413BA             0209*  
0413BA             0210*  ; ===============================================
0413BA             0211*  ; Timer functions
0413BA             0212*  ; -----------------------------------------------
0413BA             0213*  ; set a countdown timer
0413BA             0214*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413BA             0215*  ; returns: hl = current time
0413BA             0216*  tmr_set:
0413BA FD 2F 03    0217*      ld (iy+3),hl            ; set time remaining
0413BD             0218*      MOSCALL mos_sysvars     ; ix points to syvars table
0413BD 3E 08       0001*M 			LD	A, function
0413BF 5B CF       0002*M 			RST.LIL	08h
0413C1 DD 27 00    0219*      ld hl,(ix+sysvar_time)  ; get current time
0413C4 FD 2F 00    0220*      ld (iy+0),hl            ; set start time
0413C7 C9          0221*      ret
0413C8             0222*  
0413C8             0223*  ; gets time remaining on a countdown timer
0413C8             0224*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413C8             0225*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0413C8             0226*  ;          sign flags: pos = time not expired,zero or neg = time expired
0413C8             0227*  tmr_get:
0413C8             0228*      MOSCALL mos_sysvars     ; ix points to syvars table
0413C8 3E 08       0001*M 			LD	A, function
0413CA 5B CF       0002*M 			RST.LIL	08h
0413CC DD 17 00    0229*      ld de,(ix+sysvar_time)  ; get current time
0413CF FD 27 00    0230*      ld hl,(iy+0)            ; get start time
0413D2 AF          0231*      xor a                   ; clear carry
0413D3 ED 52       0232*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0413D5 FD 17 03    0233*      ld de,(iy+3)            ; get timer set value
0413D8 AF          0234*      xor a                   ; clear carry
0413D9 ED 5A       0235*      adc hl,de               ; hl = time remaining
0413DB             0236*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0413DB C9          0237*      ret
0413DC             0238*  
0413DC             0239*  tmr_test: ds 6 ; example of a buffer to hold timer data
0413E2             0240*  
0413E2 00 00 00    0241*  timestamp_now: dl 0
0413E5 00 00 00    0242*  timestamp_old: dl 0
0413E8 00 00 00    0243*  timestamp_chg: dl 0
0413EB             0244*  
0413EB             0245*  ; update the global timestamp from the system clock
0413EB             0246*  ; inputs: none
0413EB             0247*  ; returns: hl = time elapsed in 1/120ths of a second
0413EB             0248*  ;          ix = pointer to syvars table
0413EB             0249*  ; destroys: af,hl,de,ix
0413EB             0250*  timestamp_tick:
0413EB ED 5B E2 13 0251*      ld de,(timestamp_now)   ; get previous time
       04          
0413F0 ED 53 E5 13 0252*      ld (timestamp_old),de   ; save previous time
       04          
0413F5             0253*      MOSCALL mos_sysvars     ; ix points to syvars table
0413F5 3E 08       0001*M 			LD	A, function
0413F7 5B CF       0002*M 			RST.LIL	08h
0413F9 DD 27 00    0254*      ld hl,(ix+sysvar_time)  ; get current time
0413FC 22 E2 13 04 0255*      ld (timestamp_now),hl   ; save current time
041400 AF          0256*      xor a                   ; clear carry
041401 ED 52       0257*      sbc hl,de               ; hl = time elapsed
041403 22 E8 13 04 0258*      ld (timestamp_chg),hl   ; save elapsed time
041407 C9          0259*      ret
041408             0260*  
041408             0261*  ; set a countdown timer
041408             0262*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041408             0263*  ; requires: timestamp_tick to be called at least once before this function
041408             0264*  ; returns: hl = current time
041408             0265*  ; destroys: hl
041408             0266*  timestamp_tmr_set:
041408 FD 2F 03    0267*      ld (iy+3),hl            ; set time remaining
04140B 2A E2 13 04 0268*      ld hl,(timestamp_now)   ; get current timestamp
04140F FD 2F 00    0269*      ld (iy+0),hl            ; set start time
041412 C9          0270*      ret
041413             0271*  
041413             0272*  ; gets time remaining on a countdown timer following the global timestamp
041413             0273*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041413             0274*  ; requires: timestamp_tick to be called at least once before this function
041413             0275*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041413             0276*  ;          sign flags: pos = time not expired,zero or neg = time expired
041413             0277*  ; destroys: af,hl,de
041413             0278*  timestamp_tmr_get:
041413 ED 5B E2 13 0279*      ld de,(timestamp_now)   ; get current timestamp
       04          
041418 FD 27 00    0280*      ld hl,(iy+0)            ; get start time
04141B AF          0281*      xor a                   ; clear carry
04141C ED 52       0282*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04141E FD 17 03    0283*      ld de,(iy+3)            ; get timer set value
041421 AF          0284*      xor a                   ; clear carry
041422 ED 5A       0285*      adc hl,de               ; hl = time remaining
041424             0286*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
041424 C9          0287*      ret
041425             0288*  
041425             0289*  ; set a stopwatch
041425             0290*  ; returns: hl = start time
041425             0291*  ; destroys: hl,ix
041425             0292*  stopwatch_set:
041425             0293*      MOSCALL mos_sysvars     ; ix points to syvars table
041425 3E 08       0001*M 			LD	A, function
041427 5B CF       0002*M 			RST.LIL	08h
041429 DD 27 00    0294*      ld hl,(ix+sysvar_time)  ; get current time
04142C 22 41 14 04 0295*      ld (stopwatch_started),hl            ; set start time
041430 C9          0296*      ret
041431             0297*  
041431             0298*  ; gets time elapsed on a stopwatch
041431             0299*  ; returns: hl = time elapsed in 1/120ths of a second
041431             0300*  ; destroys: af,hl,de,ix
041431             0301*  stopwatch_get:
041431             0302*      MOSCALL mos_sysvars     ; ix points to syvars table
041431 3E 08       0001*M 			LD	A, function
041433 5B CF       0002*M 			RST.LIL	08h
041435 DD 27 00    0303*      ld hl,(ix+sysvar_time)  ; get current time
041438 ED 5B 41 14 0304*      ld de,(stopwatch_started)            ; get start time
       04          
04143D AF          0305*      xor a                   ; clear carry
04143E ED 52       0306*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041440 C9          0307*      ret
041441             0308*  
041441             0309*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041444             0310*  
041444             0311*  ; ------------------
041444             0312*  ; delay routine
041444             0313*  ; Author: Richard Turrnidge
041444             0314*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041444             0315*  ; routine waits a fixed time,then returns
041444             0316*  ; arrive with A =  the delay byte. One bit to be set only.
041444             0317*  ; eg. ld A,00000100b
041444             0318*  
041444             0319*  multiPurposeDelay:
041444 F5          0320*      push af
041445 C5          0321*      push bc
041446 DD E5       0322*      push ix
041448 47          0323*      ld b,a
041449 3E 08       0324*      ld a,$08
04144B 5B CF       0325*      RST.LIL	08h                 ; get IX pointer to sysvars
04144D             0326*  
04144D             0327*  waitLoop:
04144D             0328*  
04144D DD 7E 00    0329*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041450             0330*  
041450             0331*                                  ;   we check if bit set is same as last time we checked.
041450             0332*                                  ;   bit 0 - don't use
041450             0333*                                  ;   bit 1 - changes 64 times per second
041450             0334*                                  ;   bit 2 - changes 32 times per second
041450             0335*                                  ;   bit 3 - changes 16 times per second
041450             0336*  
041450             0337*                                  ;   bit 4 - changes 8 times per second
041450             0338*                                  ;   bit 5 - changes 4 times per second
041450             0339*                                  ;   bit 6 - changes 2 times per second
041450             0340*                                  ;   bit 7 - changes 1 times per second
041450 A0          0341*      and b
041451 4F          0342*      ld c,a
041452 3A 63 14 04 0343*      ld a,(oldTimeStamp)
041456 B9          0344*      cp c                        ; is A same as last value?
041457 28 F4       0345*      jr z,waitLoop              ; loop here if it is
041459 79          0346*      ld a,c
04145A 32 63 14 04 0347*      ld (oldTimeStamp),a        ; set new value
04145E             0348*  
04145E DD E1       0349*      pop ix
041460 C1          0350*      pop bc
041461 F1          0351*      pop af
041462 C9          0352*      ret
041463             0353*  
041463 00          0354*  oldTimeStamp:   .db 00h
041464             0037       include "vdu.inc"
041464             0001*  
041464             0002*  ; VDU 30: Home cursor
041464             0003*  vdu_home_cursor:
041464 3E 1E       0004*      ld a,30
041466 5B D7       0005*  	rst.lil $10
041468 C9          0006*  	ret
041469             0007*  
041469             0008*  vdu_cursor_on:
041469 21 74 14 04 0009*  	ld hl,@cmd
04146D 01 03 00 00 0010*  	ld bc,@end-@cmd
041471 5B DF       0011*  	rst.lil $18
041473 C9          0012*  	ret
041474             0013*  @cmd:
041474 17 01 01    0014*  	db 23,1,1
041477             0015*  @end:
041477             0016*  
041477             0017*  vdu_cursor_off:
041477 21 82 14 04 0018*  	ld hl,@cmd
04147B 01 03 00 00 0019*  	ld bc,@end-@cmd
04147F 5B DF       0020*  	rst.lil $18
041481 C9          0021*  	ret
041482             0022*  @cmd:
041482 17 01 00    0023*  	db 23,1,0
041485             0024*  @end:
041485             0025*  
041485             0026*  ; VDU 5: Write text at graphics cursor
041485             0027*  ; inputs: a is the character to write to the screen
041485             0028*  ; prerequisites: the graphics cursor at the intended position on screen
041485             0029*  ; outputs: see the name of the function
041485             0030*  ; destroys: a, hl, bc
041485             0031*  vdu_char_to_gfx_cursor:
041485 32 95 14 04 0032*  	ld (@arg),a
041489 21 94 14 04 0033*  	ld hl,@cmd
04148D 01 02 00 00 0034*  	ld bc,@end-@cmd
041491 5B DF       0035*  	rst.lil $18
041493 C9          0036*  	ret
041494 05          0037*  @cmd: db 5
041495 00          0038*  @arg: db 0
041496             0039*  @end:
041496             0040*  ; VDU 9: Move cursor forward one character
041496             0041*  vdu_cursor_forward:
041496 3E 09       0042*      ld a,9
041498 5B D7       0043*  	rst.lil $10
04149A C9          0044*  	ret
04149B             0045*  
04149B             0046*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04149B             0047*  ; inputs: c=x, b=y 8-bit unsigned integers
04149B             0048*  vdu_move_cursor:
04149B ED 43 AC 14 0049*      ld (@x0),bc
       04          
0414A0 21 AB 14 04 0050*  	ld hl,@cmd
0414A4 01 03 00 00 0051*  	ld bc,@end-@cmd
0414A8 5B DF       0052*  	rst.lil $18
0414AA C9          0053*  	ret
0414AB 1F          0054*  @cmd: 	db 31
0414AC 00          0055*  @x0:	db 0
0414AD 00          0056*  @y0: 	db 0
0414AE 00          0057*  @end: 	db 0 ; padding
0414AF             0058*  
0414AF             0059*  ; VDU 12: Clear text area (CLS)
0414AF             0060*  vdu_cls:
0414AF 3E 0C       0061*      ld a,12
0414B1 5B D7       0062*  	rst.lil $10
0414B3 C9          0063*  	ret
0414B4             0064*  
0414B4             0065*  vdu_flip:
0414B4 21 BF 14 04 0066*  	ld hl,@cmd
0414B8 01 03 00 00 0067*  	ld bc,@end-@cmd
0414BC 5B DF       0068*  	rst.lil $18
0414BE C9          0069*  	ret
0414BF 17 00 C3    0070*  @cmd: db 23,0,0xC3
0414C2             0071*  @end:
0414C2             0072*  
0414C2             0073*  ; VDU 16: Clear graphics area (CLG)
0414C2             0074*  vdu_clg:
0414C2 3E 10       0075*      ld a,16
0414C4 5B D7       0076*  	rst.lil $10
0414C6 C9          0077*  	ret
0414C7             0078*  
0414C7             0079*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
0414C7             0080*  ; VDU 23, 7: Scrolling
0414C7             0081*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
0414C7             0082*  ; inputs: a, extent; l, direction; h; speed
0414C7             0083*  vdu_scroll_down:
0414C7 32 DC 14 04 0084*  	ld (@extent),a
0414CB 22 DD 14 04 0085*  	ld (@dir),hl ; implicitly populates @speed
0414CF 21 DA 14 04 0086*  	ld hl,@cmd
0414D3 01 05 00 00 0087*  	ld bc,@end-@cmd
0414D7 5B DF       0088*  	rst.lil $18     ;; Sending command to VDP
0414D9 C9          0089*  	ret
0414DA 17 07       0090*  @cmd:       db 23,7
0414DC 00          0091*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
0414DD 00          0092*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
0414DE 00          0093*  @speed:     db 0x00 ; pixels
0414DF 00          0094*  @end:		db 0x00 ; padding
0414E0             0095*  
0414E0             0096*  ; COLOUR MODES
0414E0             0097*  ; Mode	Effect
0414E0             0098*  ; 0	Set on-screen pixel to target colour value
0414E0             0099*  ; 1	OR value with the on-screen pixel
0414E0             0100*  ; 2	AND value with the on-screen pixel
0414E0             0101*  ; 3	XOR value with the on-screen pixel
0414E0             0102*  ; 4	Invert the on-screen pixel
0414E0             0103*  ; 5	No operation
0414E0             0104*  ; 6	AND the inverse of the specified colour with the on-screen pixel
0414E0             0105*  ; 7	OR the inverse of the specified colour with the on-screen pixel
0414E0             0106*  
0414E0             0107*  ; VDU 17, colour: Define text colour (COLOUR)
0414E0             0108*  vdu_colour_text:
0414E0 32 F0 14 04 0109*  	ld (@arg),a
0414E4 21 EF 14 04 0110*  	ld hl,@cmd
0414E8 01 02 00 00 0111*  	ld bc,@end-@cmd
0414EC 5B DF       0112*  	rst.lil $18
0414EE C9          0113*  	ret
0414EF 11          0114*  @cmd: db 17
0414F0 00          0115*  @arg: db 0
0414F1             0116*  @end:
0414F1             0117*  
0414F1             0118*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0414F1             0119*  ; inputs: a=mode, c=colour (add 128 to set background colour)
0414F1             0120*  vdu_gcol:
0414F1 32 06 15 04 0121*  	ld (@mode),a
0414F5 79          0122*      ld a,c
0414F6 32 07 15 04 0123*      ld (@col),a
0414FA 21 05 15 04 0124*  	ld hl,@cmd
0414FE 01 03 00 00 0125*  	ld bc,@end-@cmd
041502 5B DF       0126*  	rst.lil $18
041504 C9          0127*  	ret
041505 12          0128*  @cmd:  db 18
041506 00          0129*  @mode: db 0
041507 00          0130*  @col:  db 0
041508             0131*  @end:
041508             0132*  
041508             0133*  
041508             0134*  ; VDU 28, left, bottom, right, top: Set text viewport **
041508             0135*  ; MIND THE LITTLE-ENDIANESS
041508             0136*  ; inputs: c=left,b=bottom,e=right,d=top
041508             0137*  ; outputs; nothing
041508             0138*  ; destroys: a might make it out alive
041508             0139*  vdu_set_txt_viewport:
041508 ED 43 1E 15 0140*      ld (@lb),bc
       04          
04150D ED 53 20 15 0141*  	ld (@rt),de
       04          
041512 21 1D 15 04 0142*  	ld hl,@cmd
041516 01 05 00 00 0143*  	ld bc,@end-@cmd
04151A 5B DF       0144*  	rst.lil $18
04151C C9          0145*  	ret
04151D 1C          0146*  @cmd:   db 28 ; set text viewport command
04151E 00 00       0147*  @lb: 	dw 0x0000 ; set by bc
041520 00 00       0148*  @rt: 	dw 0x0000 ; set by de
041522 00          0149*  @end:   db 0x00	  ; padding
041523             0150*  
041523             0151*  ; Wait for VBLANK interrupt
041523             0152*  vdu_vblank:
041523 DD E5       0153*      PUSH 	IX
041525             0154*  	MOSCALL	mos_sysvars
041525 3E 08       0001*M 			LD	A, function
041527 5B CF       0002*M 			RST.LIL	08h
041529 DD 7E 00    0155*  	LD	A, (IX + sysvar_time + 0)
04152C             0156*  @wait:
04152C DD BE 00    0157*      CP 	A, (IX + sysvar_time + 0)
04152F 28 FB       0158*      JR	Z, @wait
041531 DD E1       0159*      POP	IX
041533 C9          0160*      RET
041534             0161*  
041534             0162*  ; VDU 29, x; y;: Set graphics origin
041534             0163*  ; This command sets the graphics origin.
041534             0164*  ; The origin is the point on the screen where the coordinates (0,0) are located.
041534             0165*  ; inputs: bc=x0,de=y0
041534             0166*  ; outputs; nothing
041534             0167*  ; destroys: a might make it out alive
041534             0168*  vdu_set_gfx_origin:
041534 ED 43 4A 15 0169*      ld (@x0),bc
       04          
041539 ED 53 4C 15 0170*      ld (@y0),de
       04          
04153E 21 49 15 04 0171*      ld hl,@cmd
041542 01 05 00 00 0172*      ld bc,@end-@cmd
041546 5B DF       0173*      rst.lil $18
041548 C9          0174*      ret
041549 1D          0175*  @cmd:   db 29 ; set graphics origin command
04154A 00 00       0176*  @x0: 	dw 0x0000 ; set by bc
04154C 00 00       0177*  @y0: 	dw 0x0000 ; set by de
04154E 00          0178*  @end:   db 0x00	  ; padding
04154F             0179*  
04154F             0180*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
04154F             0181*  ; NOTE: the order of the y-coordinate parameters are inverted
04154F             0182*  ; 	because we have turned off logical screen scaling
04154F             0183*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
04154F             0184*  ; outputs; nothing
04154F             0185*  ; destroys: a might make it out alive
04154F             0186*  vdu_set_gfx_viewport:
04154F ED 43 6F 15 0187*      ld (@x0),bc
       04          
041554 FD 22 71 15 0188*      ld (@y1),iy
       04          
041559 DD 22 73 15 0189*  	ld (@x1),ix
       04          
04155E ED 53 75 15 0190*  	ld (@y0),de
       04          
041563 21 6E 15 04 0191*  	ld hl,@cmd
041567 01 09 00 00 0192*  	ld bc,@end-@cmd
04156B 5B DF       0193*  	rst.lil $18
04156D C9          0194*  	ret
04156E 18          0195*  @cmd:   db 24 ; set graphics viewport command
04156F 00 00       0196*  @x0: 	dw 0x0000 ; set by bc
041571 00 00       0197*  @y1: 	dw 0x0000 ; set by iy
041573 00 00       0198*  @x1: 	dw 0x0000 ; set by ix
041575 00 00       0199*  @y0: 	dw 0x0000 ; set by de
041577 00          0200*  @end:   db 0x00	  ; padding
041578             0201*  
041578             0202*  ; SCREEN MODES
041578             0203*  ; ===============================
041578             0204*  ; Mode  Horz  Vert  Cols  Refresh
041578             0205*  ; ---   ----  ----  ----  -------
041578             0206*  ; 11    320   240   2     60hz
041578             0207*  ; 139   320   240   2     60hz
041578             0208*  ; 23    512   384   2     60hz
041578             0209*  ; 151   512   384   2     60hz
041578             0210*  ; 6     640   240   2     60hz
041578             0211*  ; 134   640   240   2     60hz
041578             0212*  ; 2     640   480   2     60hz
041578             0213*  ; 130   640   480   2     60hz
041578             0214*  ; 17    800   600   2     60hz
041578             0215*  ; 145   800   600   2     60hz
041578             0216*  ; 18    1024  768   2     60hz
041578             0217*  ; 146   1024  768   2     60hz
041578             0218*  ; ---   ----  ----  ----  -------
041578             0219*  ; 10    320   240   4     60hz
041578             0220*  ; 138   320   240   4     60hz
041578             0221*  ; 22    512   384   4     60hz
041578             0222*  ; 150   512   384   4     60hz
041578             0223*  ; 5     640   240   4     60hz
041578             0224*  ; 133   640   240   4     60hz
041578             0225*  ; 1     640   480   4     60hz
041578             0226*  ; 129   640   480   4     60hz
041578             0227*  ; 16    800   600   4     60hz
041578             0228*  ; 19    1024  768   4     60hz
041578             0229*  ; ---   ----  ----  ----  -------
041578             0230*  ; 9     320   240   16    60hz
041578             0231*  ; 137   320   240   16    60hz
041578             0232*  ; 21    512   384   16    60hz
041578             0233*  ; 149   512   384   16    60hz
041578             0234*  ; 4     640   240   16    60hz
041578             0235*  ; 132   640   240   16    60hz
041578             0236*  ; 0     640   480   16    60hz
041578             0237*  ; 7     n/a   n/a   16    60hz
041578             0238*  ; ---   ----  ----  ----  -------
041578             0239*  ; 8     320   240   64    60hz
041578             0240*  ; 136   320   240   64    60hz
041578             0241*  ; 20    512   384   64    60hz
041578             0242*  ; 3     640   240   64    60hz
041578             0243*  ; ---   ----  ----  ----  -------
041578             0244*  vdu_set_screen_mode:
041578 32 88 15 04 0245*  	ld (@arg),a
04157C 21 87 15 04 0246*  	ld hl,@cmd
041580 01 02 00 00 0247*  	ld bc,@end-@cmd
041584 5B DF       0248*  	rst.lil $18
041586 C9          0249*  	ret
041587 16          0250*  @cmd: db 22 ; set screen mode
041588 00          0251*  @arg: db 0  ; screen mode parameter
041589             0252*  @end:
041589             0253*  
041589             0254*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041589             0255*  ; inputs: a is scaling mode, 1=on, 0=off
041589             0256*  ; note: default setting on boot is scaling ON
041589             0257*  vdu_set_scaling:
041589 32 9B 15 04 0258*  	ld (@arg),a
04158D 21 98 15 04 0259*  	ld hl,@cmd
041591 01 04 00 00 0260*  	ld bc,@end-@cmd
041595 5B DF       0261*  	rst.lil $18
041597 C9          0262*  	ret
041598 17 00 C0    0263*  @cmd: db 23,0,0xC0
04159B 00          0264*  @arg: db 0  ; scaling on/off
04159C             0265*  @end:
04159C             0266*  
04159C             0267*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04159C             0268*  ; inputs: hl=bufferId
04159C             0269*  vdu_buff_select:
04159C 22 AE 15 04 0270*  	ld (@bufferId),hl
0415A0 21 AB 15 04 0271*  	ld hl,@cmd
0415A4 01 05 00 00 0272*  	ld bc,@end-@cmd
0415A8 5B DF       0273*  	rst.lil $18
0415AA C9          0274*  	ret
0415AB 17 1B 20    0275*  @cmd: db 23,27,0x20
0415AE 00 00       0276*  @bufferId: dw 0x0000
0415B0 00          0277*  @end: db 0x00 ; padding
0415B1             0278*  
0415B1             0279*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
0415B1             0280*  ; inputs: a=format; bc=width; de=height
0415B1             0281*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
0415B1             0282*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
0415B1             0283*  ; 0 	RGBA8888 (4-bytes per pixel)
0415B1             0284*  ; 1 	RGBA2222 (1-bytes per pixel)
0415B1             0285*  ; 2 	Mono/Mask (1-bit per pixel)
0415B1             0286*  ; 3 	Reserved for internal use by VDP (“native” format)
0415B1             0287*  vdu_bmp_create:
0415B1 ED 43 CD 15 0288*      ld (@width),bc
       04          
0415B6 ED 53 CF 15 0289*      ld (@height),de
       04          
0415BB 32 D1 15 04 0290*      ld (@fmt),a
0415BF 21 CA 15 04 0291*  	ld hl,@cmd
0415C3 01 08 00 00 0292*  	ld bc,@end-@cmd
0415C7 5B DF       0293*  	rst.lil $18
0415C9 C9          0294*  	ret
0415CA 17 1B 21    0295*  @cmd:       db 23,27,0x21
0415CD 00 00       0296*  @width:     dw 0x0000
0415CF 00 00       0297*  @height:    dw 0x0000
0415D1 00          0298*  @fmt:       db 0x00
0415D2             0299*  @end:
0415D2             0300*  
0415D2             0301*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0415D2             0302*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0415D2             0303*  vdu_load_img_rgba2_to_8:
0415D2             0304*  ; backup the target buffer id and image dimensions
0415D2 E5          0305*      push hl
0415D3 D5          0306*      push de
0415D4 C5          0307*      push bc
0415D5             0308*  ; load the rgba2 image to working buffer 65534
0415D5 21 FE FF 00 0309*      ld hl,65534 ; temporary working buffer id
0415D9 CD DC 16 04 0310*  	call vdu_load_buffer_from_file
0415DD             0311*  ; restore the image dimensions and target buffer id
0415DD C1          0312*      pop bc
0415DE D1          0313*      pop de
0415DF E1          0314*      pop hl
0415E0             0315*  ; fall through to vdu_rgba2_to_8
0415E0             0316*  
0415E0             0317*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0415E0             0318*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0415E0             0319*  ; the "expand bitmap" command is:
0415E0             0320*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0415E0             0321*  ; and then to reverse the byte order to fix endian-ness:
0415E0             0322*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0415E0             0323*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0415E0             0324*  ; VDU 23,27,&20,targetBufferID%;
0415E0             0325*  ; VDU 23,27,&21,width%;height%;0
0415E0             0326*  ; -------------------------------------------------------------------
0415E0             0327*  ; inputs: bc,de image width,height ; hl = targetBufferId
0415E0             0328*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0415E0             0329*  vdu_rgba2_to_8:
0415E0             0330*  ; load the image dimensions and buffer id parameters
0415E0 ED 43 3C 16 0331*      ld (@width),bc
       04          
0415E5 ED 53 3E 16 0332*      ld (@height),de
       04          
0415EA 22 21 16 04 0333*      ld (@bufferId0),hl
0415EE 22 2E 16 04 0334*      ld (@bufferId2),hl
0415F2 22 37 16 04 0335*      ld (@bufferId1),hl
0415F6             0336*  ; clean up bytes that got stomped on by the ID loads
0415F6 3E 48       0337*      ld a,0x48
0415F8 32 23 16 04 0338*      ld (@bufferId0+2),a
0415FC 3E 17       0339*      ld a,23
0415FE 32 39 16 04 0340*      ld (@bufferId1+2),a
041602 3E 18       0341*      ld a,24
041604 32 30 16 04 0342*      ld (@bufferId2+2),a
041608 AF          0343*      xor a
041609 32 40 16 04 0344*      ld (@height+2),a
04160D             0345*  ; send the vdu command strings
04160D 21 18 16 04 0346*      ld hl,@beg
041611 01 29 00 00 0347*      ld bc,@end-@beg
041615 5B DF       0348*      rst.lil $18
041617 C9          0349*      ret
041618             0350*  @beg:
041618             0351*  ; Command 14: Consolidate blocks in a buffer
041618             0352*  ; VDU 23, 0, &A0, bufferId; 14
041618 17 00 A0    0353*      db 23,0,0xA0
04161B FE FF       0354*      dw 65534 ; workingBufferId
04161D 0E          0355*      db 14 ; consolidate blocks
04161E             0356*  ; the "expand bitmap" command is:
04161E             0357*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
04161E 17 00 A0    0358*      db 23,0,0xA0
041621 00 00       0359*  @bufferId0: dw 0x0000 ; targetBufferId
041623 48          0360*      db 0x48 ; given as decimal command 72 in the docs
041624 02          0361*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041625 FE FF       0362*      dw 65534 ; sourceBufferId
041627 00 7F BF FF 0363*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
04162B             0364*  ; reverse the byte order to fix endian-ness:
04162B             0365*  ; Command 24: Reverse the order of data of blocks within a buffer
04162B             0366*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
04162B             0367*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
04162B 17 00 A0    0368*      db 23,0,0xA0
04162E 00 00       0369*  @bufferId2:    dw 0x0000 ; targetBufferId
041630 18          0370*      db 24 ; reverse byte order
041631 04          0371*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041632 04 00       0372*      dw 4 ; size (4 bytes)
041634             0373*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041634             0374*  ; VDU 23,27,&20,targetBufferID%;
041634 17 1B 20    0375*      db 23,27,0x20 ; select bitmap
041637 00 00       0376*  @bufferId1: dw 0x0000 ; targetBufferId
041639             0377*  ; VDU 23,27,&21,width%;height%;0
041639 17 1B 21    0378*      db 23,27,0x21 ; create bitmap from buffer
04163C 00 00       0379*  @width: dw 0x0000
04163E 00 00       0380*  @height: dw 0x0000
041640 00          0381*      db 0x00 ; rgba8888 format
041641             0382*  @end:
041641             0383*  
041641             0384*  ; scratch variables
041641 00 00 00    0385*  bufferId0: dl 0x000000
041644 00 00 00    0386*  bufferId1: dl 0x000000
041647             0387*  
041647             0388*  ; load a vdu buffer from local memory
041647             0389*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041647             0390*  vdu_load_buffer:
041647 ED 43 70 16 0391*      ld (@length),bc
       04          
04164C D5          0392*      push de ; save data pointer
04164D             0393*  ; send the vdu command string
04164D 7D          0394*      ld a,l
04164E 32 6D 16 04 0395*      ld (@bufferId),a
041652 7C          0396*      ld a,h
041653 32 6E 16 04 0397*      ld (@bufferId+1),a
041657 21 6A 16 04 0398*      ld hl,@cmd
04165B 01 08 00 00 0399*      ld bc,@end-@cmd
04165F 5B DF       0400*      rst.lil $18
041661             0401*  ; send the buffer data
041661 E1          0402*      pop hl ; pointer to data
041662 ED 4B 70 16 0403*      ld bc,(@length)
       04          
041667 5B DF       0404*      rst.lil $18 ; send it
041669 C9          0405*      ret
04166A             0406*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04166A 17 00 A0    0407*  @cmd:       db 23,0,0xA0
04166D 00 00       0408*  @bufferId:	dw 0x0000
04166F 00          0409*  		    db 0 ; load buffer
041670 00 00       0410*  @length:	dw 0x0000
041672 00          0411*  @end: db 0 ; padding
041673             0412*  
041673             0413*  ; clear a buffer
041673             0414*  ; inputs: hl = bufferId
041673             0415*  vdu_clear_buffer:
041673 7D          0416*      ld a,l
041674 32 8B 16 04 0417*      ld (@bufferId),a
041678 7C          0418*      ld a,h
041679 32 8C 16 04 0419*      ld (@bufferId+1),a
04167D 21 88 16 04 0420*      ld hl,@cmd
041681 01 06 00 00 0421*      ld bc,@end-@cmd
041685 5B DF       0422*      rst.lil $18
041687 C9          0423*      ret
041688 17 00 A0    0424*  @cmd:       db 23,0,0xA0
04168B 00 00       0425*  @bufferId:	dw 0x0000
04168D 02          0426*  		    db 2 ; clear buffer
04168E             0427*  @end:
04168E             0428*  
04168E             0429*  vdu_clear_all_buffers:
04168E             0430*  ; clear all buffers
04168E 21 99 16 04 0431*      ld hl,@beg
041692 01 06 00 00 0432*      ld bc,@end-@beg
041696 5B DF       0433*      rst.lil $18
041698 C9          0434*      ret
041699 17 00 A0    0435*  @beg: db 23,0,$A0
04169C FF FF       0436*        dw -1 ; clear all buffers
04169E 02          0437*        db 2  ; command 2: clear a buffer
04169F             0438*  @end:
04169F             0439*  
04169F             0440*  ; Command 14: Consolidate blocks in a buffer
04169F             0441*  vdu_consolidate_buffer:
04169F             0442*  ; set parameters for vdu call
04169F 7D          0443*      ld a,l
0416A0 32 B7 16 04 0444*      ld (@bufferId),a
0416A4 7C          0445*      ld a,h
0416A5 32 B8 16 04 0446*      ld (@bufferId+1),a
0416A9 21 B4 16 04 0447*      ld hl,@beg
0416AD 01 06 00 00 0448*      ld bc,@end-@beg
0416B1 5B DF       0449*      rst.lil $18
0416B3 C9          0450*      ret
0416B4             0451*  ; VDU 23, 0, &A0, bufferId; 14
0416B4 17 00 A0    0452*  @beg: db 23,0,0xA0
0416B7 00 00       0453*  @bufferId: dw 0x0000
0416B9 0E          0454*             db 14
0416BA             0455*  @end:
0416BA             0456*  
0416BA             0457*  ; load an image file to a buffer and make it a bitmap
0416BA             0458*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0416BA             0459*  vdu_load_img:
0416BA             0460*  ; back up image type and dimension parameters
0416BA 22 41 16 04 0461*      ld (bufferId0),hl
0416BE F5          0462*      push af
0416BF C5          0463*  	push bc
0416C0 D5          0464*  	push de
0416C1             0465*  ; load the image
0416C1 CD DC 16 04 0466*  	call vdu_load_buffer_from_file
0416C5             0467*  ; now make it a bitmap
0416C5 2A 41 16 04 0468*      ld hl,(bufferId0)
0416C9 CD 9F 16 04 0469*      call vdu_consolidate_buffer
0416CD 2A 41 16 04 0470*      ld hl,(bufferId0)
0416D1 CD 9C 15 04 0471*      call vdu_buff_select
0416D5 D1          0472*  	pop de ; image height
0416D6 C1          0473*  	pop bc ; image width
0416D7 F1          0474*  	pop af ; image type
0416D8 C3 B1 15 04 0475*  	jp vdu_bmp_create ; will return to caller from there
0416DC             0476*  
0416DC             0477*  ; inputs: hl = bufferId; iy = pointer to filename
0416DC             0478*  vdu_load_buffer_from_file:
0416DC 22 41 16 04 0479*      ld (bufferId0),hl
0416E0             0480*  
0416E0             0481*  ; clear target buffer
0416E0 CD 73 16 04 0482*      call vdu_clear_buffer
0416E4             0483*  
0416E4             0484*  ; open the file in read mode
0416E4             0485*  ; Open a file
0416E4             0486*  ; HLU: Filename
0416E4             0487*  ;   C: Mode
0416E4             0488*  ; Returns:
0416E4             0489*  ;   A: Filehandle, or 0 if couldn't open
0416E4 FD E5       0490*  	push iy ; pointer to filename
0416E6 E1          0491*  	pop hl
0416E7 0E 01       0492*  	ld c,fa_read
0416E9             0493*      MOSCALL mos_fopen
0416E9 3E 0A       0001*M 			LD	A, function
0416EB 5B CF       0002*M 			RST.LIL	08h
0416ED 32 28 17 04 0494*      ld (@filehandle),a
0416F1             0495*  
0416F1             0496*  @read_file:
0416F1             0497*  ; Read a block of data from a file
0416F1             0498*  ;   C: Filehandle
0416F1             0499*  ; HLU: Pointer to where to write the data to
0416F1             0500*  ; DEU: Number of bytes to read
0416F1             0501*  ; Returns:
0416F1             0502*  ; DEU: Number of bytes read
0416F1 3A 28 17 04 0503*      ld a,(@filehandle)
0416F5 4F          0504*      ld c,a
0416F6 21 00 E0 B7 0505*      ld hl,filedata
0416FA 11 00 20 00 0506*      ld de,8192 ; max we can read into onboard sram at one time
0416FE             0507*      MOSCALL mos_fread
0416FE 3E 1A       0001*M 			LD	A, function
041700 5B CF       0002*M 			RST.LIL	08h
041702             0508*  
041702             0509*  ; test de for zero bytes read
041702 21 00 00 00 0510*      ld hl,0
041706 AF          0511*      xor a ; clear carry
041707 ED 52       0512*      sbc hl,de
041709 CA 1F 17 04 0513*      jp z,@close_file
04170D             0514*  
04170D             0515*  ; load a vdu buffer from local memory
04170D             0516*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
04170D 2A 41 16 04 0517*      ld hl,(bufferId0)
041711 D5          0518*      push de ; chunksize
041712 C1          0519*      pop bc
041713 11 00 E0 B7 0520*      ld de,filedata
041717 CD 47 16 04 0521*      call vdu_load_buffer
04171B             0522*  
04171B             0523*  ; read the next block
04171B C3 F1 16 04 0524*      jp @read_file
04171F             0525*  
04171F             0526*  ; close the file
04171F             0527*  @close_file:
04171F 3A 28 17 04 0528*      ld a,(@filehandle)
041723             0529*      MOSCALL mos_fclose
041723 3E 0B       0001*M 			LD	A, function
041725 5B CF       0002*M 			RST.LIL	08h
041727 C9          0530*      ret ; vdu_load_buffer_from_file
041728             0531*  
041728 00          0532*  @filehandle: db 0 ; file handle
041729 00 00 00    0533*  @fil: dl 0 ; pointer to FIL struct
04172C             0534*  
04172C 00 00 00    0535*  @chunkpointer: dl 0 ; pointer to current chunk
04172F             0536*  
04172F             0537*  ; File information structure (FILINFO)
04172F             0538*  @filinfo:
04172F 00 00 00 00 0539*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041733 00 00       0540*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041735 00 00       0541*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041737 00          0542*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041738 00 00 00 00 0543*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041745 00 00 00 00 0544*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041845             0038       include "vdu_fonts.inc"
041845             0001*  ; select font
041845             0002*  ; inputs: hl = bufferId, a = font flags
041845             0003*  ; Flags:
041845             0004*  ; Bit	Description
041845             0005*  ; 0	Adjust cursor position to ensure text baseline is aligned
041845             0006*  ;   0: Do not adjust cursor position (best for changing font on a new line)
041845             0007*  ;   1: Adjust cursor position (best for changing font in the middle of a line)
041845             0008*  ; 1-7	Reserved for future use
041845             0009*  ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041845             0010*  vdu_font_select:
041845 22 5C 18 04 0011*      ld (@bufferId),hl
041849 32 5E 18 04 0012*      ld (@flags),a
04184D 21 58 18 04 0013*      ld hl,@cmd
041851 01 07 00 00 0014*      ld bc,@end-@cmd
041855 5B DF       0015*      rst.lil $18
041857 C9          0016*      ret
041858 17 00 95 00 0017*  @cmd: db 23, 0, 0x95, 0
04185C 00 00       0018*  @bufferId: dw 0x0000
04185E 00          0019*  @flags: db 0x00
04185F             0020*  @end:
04185F             0021*  
04185F             0022*  ; create font from buffer
04185F             0023*  ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
04185F             0024*  ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
04185F             0025*  vdu_font_create:
04185F 22 84 18 04 0026*      ld (@bufferId),hl
041863 ED 53 86 18 0027*      ld (@width),de ; also loads height
       04          
041868 32 89 18 04 0028*      ld (@flags),a
04186C 7A          0029*      ld a,d ; height
04186D 32 88 18 04 0030*      ld (@ascent),a ; ascent = height
041871             0031*  ; consolidate buffer
041871 CD 9F 16 04 0032*      call vdu_consolidate_buffer
041875             0033*  ; create font
041875 21 80 18 04 0034*      ld hl,@cmd
041879 01 0A 00 00 0035*      ld bc,@end-@cmd
04187D 5B DF       0036*      rst.lil $18
04187F C9          0037*      ret
041880 17 00 95 01 0038*  @cmd: db 23, 0, 0x95, 1
041884 00 00       0039*  @bufferId: dw 0x0000
041886 00          0040*  @width: db 0x00
041887 00          0041*  @height: db 0x00
041888 00          0042*  @ascent: db 0x00
041889 00          0043*  @flags: db 0x00
04188A             0044*  @end:
04188A             0045*  
04188A             0046*  ; set or adjust font property
04188A             0047*  ; inputs: hl = bufferId, a = field, de = value
04188A             0048*  ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
04188A             0049*  vdu_font_property:
04188A 22 A6 18 04 0050*      ld (@bufferId),hl
04188E 32 A8 18 04 0051*      ld (@field),a
041892 ED 53 A9 18 0052*      ld (@value),de
       04          
041897 21 A2 18 04 0053*      ld hl,@cmd
04189B 01 09 00 00 0054*      ld bc,@end-@cmd
04189F 5B DF       0055*      rst.lil $18
0418A1 C9          0056*      ret
0418A2 17 00 95 02 0057*  @cmd: db 23, 0, 0x95, 2
0418A6 00 00       0058*  @bufferId: dw 0x0000
0418A8 00          0059*  @field: db 0x00
0418A9 00 00       0060*  @value: dw 0x0000
0418AB 00          0061*  @end: db 0x00 ; padding
0418AC             0062*  
0418AC             0063*  ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
0418AC             0064*  
0418AC             0065*  ; Clear/Delete font
0418AC             0066*  ; inputs: hl = bufferId
0418AC             0067*  ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
0418AC             0068*  vdu_font_clear:
0418AC 22 BF 18 04 0069*      ld (@bufferId),hl
0418B0 21 BB 18 04 0070*      ld hl,@cmd
0418B4 01 06 00 00 0071*      ld bc,@end-@cmd
0418B8 5B DF       0072*      rst.lil $18
0418BA C9          0073*      ret
0418BB 17 00 95 04 0074*  @cmd: db 23, 0, 0x95, 4
0418BF 00 00       0075*  @bufferId: dw 0x0000
0418C1 00          0076*  @end: db 0x00 ; padding
0418C2             0077*  
0418C2             0078*  ; Copy system font to buffer
0418C2             0079*  ; inputs: hl = bufferId
0418C2             0080*  ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
0418C2             0081*  vdu_font_copy_system:
0418C2 22 D5 18 04 0082*      ld (@bufferId),hl
0418C6 21 D1 18 04 0083*      ld hl,@cmd
0418CA 01 06 00 00 0084*      ld bc,@end-@cmd
0418CE 5B DF       0085*      rst.lil $18
0418D0 C9          0086*      ret
0418D1 17 00 95 05 0087*  @cmd: db 23, 0, 0x95, 5
0418D5 00 00       0088*  @bufferId: dw 0x0000
0418D7 00          0089*  @end: db 0x00 ; padding
0418D8             0039       include "vdu_plot.inc"
0418D8             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418D8             0002*  ; PLOT code 	(Decimal) 	Effect
0418D8             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
0418D8             0004*  plot_sl_both: equ 0x00
0418D8             0005*  
0418D8             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
0418D8             0007*  plot_sl_first: equ 0x08
0418D8             0008*  
0418D8             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0418D8             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0418D8             0011*  
0418D8             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
0418D8             0013*  plot_sl_last: equ 0x20
0418D8             0014*  
0418D8             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
0418D8             0016*  plot_sl_none: equ 0x28
0418D8             0017*  
0418D8             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0418D8             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0418D8             0020*  
0418D8             0021*  ; &40-&47 	64-71 	Point plot
0418D8             0022*  plot_pt: equ 0x40
0418D8             0023*  
0418D8             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0418D8             0025*  plot_lf_lr_non_bg: equ 0x48
0418D8             0026*  
0418D8             0027*  ; &50-&57 	80-87 	Triangle fill
0418D8             0028*  plot_tf: equ 0x50
0418D8             0029*  
0418D8             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
0418D8             0031*  plot_lf_r_bg: equ 0x58
0418D8             0032*  
0418D8             0033*  ; &60-&67 	96-103 	Rectangle fill
0418D8             0034*  plot_rf: equ 0x60
0418D8             0035*  
0418D8             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0418D8             0037*  plot_lf_lr_fg: equ 0x60
0418D8             0038*  
0418D8             0039*  ; &70-&77 	112-119 	Parallelogram fill
0418D8             0040*  plot_pf: equ 0x70
0418D8             0041*  
0418D8             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0418D8             0043*  plot_lf_r_non_fg: equ 0x78
0418D8             0044*  
0418D8             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0418D8             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0418D8             0047*  
0418D8             0048*  ; &90-&97 	144-151 	Circle outline
0418D8             0049*  plot_co: equ 0x90
0418D8             0050*  
0418D8             0051*  ; &98-&9F 	152-159 	Circle fill
0418D8             0052*  plot_cf: equ 0x98
0418D8             0053*  
0418D8             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0418D8             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0418D8             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0418D8             0057*  
0418D8             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
0418D8             0059*  plot_rcm: equ 0xB8
0418D8             0060*  
0418D8             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0418D8             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0418D8             0063*  ; &D0-&D7 	208-215 	Not defined
0418D8             0064*  ; &D8-&DF 	216-223 	Not defined
0418D8             0065*  ; &E0-&E7 	224-231 	Not defined
0418D8             0066*  
0418D8             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
0418D8             0068*  plot_bmp: equ 0xE8
0418D8             0069*  
0418D8             0070*  ; &F0-&F7 	240-247 	Not defined
0418D8             0071*  ; &F8-&FF 	248-255 	Not defined
0418D8             0072*  
0418D8             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0418D8             0074*  ; Agon Console8 VDP 2.2.0
0418D8             0075*  
0418D8             0076*  ; Within each group of eight plot codes, the effects are as follows:
0418D8             0077*  ; Plot code 	Effect
0418D8             0078*  ; 0 	Move relative
0418D8             0079*  mv_rel: equ 0
0418D8             0080*  
0418D8             0081*  ; 1 	Plot relative in current foreground colour
0418D8             0082*  dr_rel_fg: equ 1
0418D8             0083*  
0418D8             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
0418D8             0085*  ; 3 	Plot relative in current background colour
0418D8             0086*  dr_rel_bg: equ 3
0418D8             0087*  
0418D8             0088*  ; 4 	Move absolute
0418D8             0089*  mv_abs: equ 4
0418D8             0090*  
0418D8             0091*  ; 5 	Plot absolute in current foreground colour
0418D8             0092*  dr_abs_fg: equ 5
0418D8             0093*  
0418D8             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0418D8             0095*  ; 7 	Plot absolute in current background colour
0418D8             0096*  dr_abs_bg: equ 7
0418D8             0097*  
0418D8             0098*  ; Codes 0-3 use the position data provided as part of the command
0418D8             0099*  ; as a relative position, adding the position given to the current
0418D8             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
0418D8             0101*  ; as part of the command as an absolute position, setting the current
0418D8             0102*  ; graphical cursor position to the position given.
0418D8             0103*  
0418D8             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0418D8             0105*  ; current pixel colour. These operations cannot currently be supported
0418D8             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
0418D8             0107*  ; supported. Support for these codes may be added in a future version
0418D8             0108*  ; of the VDP firmware.
0418D8             0109*  
0418D8             0110*  ; 16 colour palette constants
0418D8             0111*  c_black: equ 0
0418D8             0112*  c_red_dk: equ 1
0418D8             0113*  c_green_dk: equ 2
0418D8             0114*  c_yellow_dk: equ 3
0418D8             0115*  c_blue_dk: equ 4
0418D8             0116*  c_magenta_dk: equ 5
0418D8             0117*  c_cyan_dk: equ 6
0418D8             0118*  c_grey: equ 7
0418D8             0119*  c_grey_dk: equ 8
0418D8             0120*  c_red: equ 9
0418D8             0121*  c_green: equ 10
0418D8             0122*  c_yellow: equ 11
0418D8             0123*  c_blue: equ 12
0418D8             0124*  c_magenta: equ 13
0418D8             0125*  c_cyan: equ 14
0418D8             0126*  c_white: equ 15
0418D8             0127*  
0418D8             0128*  ; VDU 25, mode, x; y;: PLOT command
0418D8             0129*  ; inputs: a=mode, bc=x0, de=y0
0418D8             0130*  vdu_plot:
0418D8 32 F2 18 04 0131*      ld (@mode),a
0418DC ED 43 F3 18 0132*      ld (@x0),bc
       04          
0418E1 ED 53 F5 18 0133*      ld (@y0),de
       04          
0418E6 21 F1 18 04 0134*  	ld hl,@cmd
0418EA 01 06 00 00 0135*  	ld bc,@end-@cmd
0418EE 5B DF       0136*  	rst.lil $18
0418F0 C9          0137*  	ret
0418F1 19          0138*  @cmd:   db 25
0418F2 00          0139*  @mode:  db 0
0418F3 00 00       0140*  @x0: 	dw 0
0418F5 00 00       0141*  @y0: 	dw 0
0418F7 00          0142*  @end:   db 0 ; extra byte to soak up deu
0418F8             0143*  
0418F8             0144*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418F8             0145*  ; &E8-&EF 	232-239 	Bitmap plot §
0418F8             0146*  ; VDU 25, mode, x; y;: PLOT command
0418F8             0147*  ; inputs: bc=x0, de=y0
0418F8             0148*  ; prerequisites: vdu_buff_select
0418F8             0149*  vdu_plot_bmp:
0418F8 ED 43 0F 19 0150*      ld (@x0),bc
       04          
0418FD ED 53 11 19 0151*      ld (@y0),de
       04          
041902 21 0D 19 04 0152*  	ld hl,@cmd
041906 01 06 00 00 0153*  	ld bc,@end-@cmd
04190A 5B DF       0154*  	rst.lil $18
04190C C9          0155*  	ret
04190D 19          0156*  @cmd:   db 25
04190E ED          0157*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04190F 00 00       0158*  @x0: 	dw 0x0000
041911 00 00       0159*  @y0: 	dw 0x0000
041913 00          0160*  @end:   db 0x00 ; padding
041914             0161*  
041914             0162*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041914             0163*  ; &E8-&EF 	232-239 	Bitmap plot §
041914             0164*  ; VDU 25, mode, x; y;: PLOT command
041914             0165*  ; inputs: bc=x0, de=y0
041914             0166*  ; USING 16.8 FIXED POINT COORDINATES
041914             0167*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
041914             0168*  ;   the fractional portiion of the inputs are truncated
041914             0169*  ;   leaving only the 16-bit integer portion
041914             0170*  ; prerequisites: vdu_buff_select
041914             0171*  vdu_plot_bmp168:
041914             0172*  ; populate in the reverse of normal to keep the
041914             0173*  ; inputs from stomping on each other
041914 ED 53 32 19 0174*      ld (@y0-1),de
       04          
041919 ED 43 30 19 0175*      ld (@x0-1),bc
       04          
04191E 3E ED       0176*      ld a,plot_bmp+dr_abs_fg ; 0xED
041920 32 30 19 04 0177*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
041924 21 2F 19 04 0178*  	ld hl,@cmd
041928 01 06 00 00 0179*  	ld bc,@end-@cmd
04192C 5B DF       0180*  	rst.lil $18
04192E C9          0181*  	ret
04192F 19          0182*  @cmd:   db 25
041930 ED          0183*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
041931 00 00       0184*  @x0: 	dw 0x0000
041933 00 00       0185*  @y0: 	dw 0x0000
041935             0186*  @end:  ; no padding required b/c we shifted de right
041935             0187*  
041935             0188*  ; draw a filled rectangle
041935             0189*  vdu_plot_rf:
041935 ED 43 5C 19 0190*      ld (@x0),bc
       04          
04193A ED 53 5E 19 0191*      ld (@y0),de
       04          
04193F DD 22 62 19 0192*      ld (@x1),ix
       04          
041944 FD 22 64 19 0193*      ld (@y1),iy
       04          
041949 3E 19       0194*      ld a,25 ; we have to reload the 2nd plot command
04194B 32 60 19 04 0195*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04194F 21 5A 19 04 0196*  	ld hl,@cmd0
041953 01 0C 00 00 0197*  	ld bc,@end-@cmd0
041957 5B DF       0198*  	rst.lil $18
041959 C9          0199*      ret
04195A 19          0200*  @cmd0:  db 25 ; plot
04195B 04          0201*  @arg0:  db plot_sl_both+mv_abs
04195C 00 00       0202*  @x0:    dw 0x0000
04195E 00 00       0203*  @y0:    dw 0x0000
041960 19          0204*  @cmd1:  db 25 ; plot
041961 65          0205*  @arg1:  db plot_rf+dr_abs_fg
041962 00 00       0206*  @x1:    dw 0x0000
041964 00 00       0207*  @y1:    dw 0x0000
041966 00          0208*  @end:   db 0x00 ; padding
041967             0209*  
041967             0210*  ; draw a filled circle
041967             0211*  vdu_plot_cf:
041967 ED 43 8E 19 0212*      ld (@x0),bc
       04          
04196C ED 53 90 19 0213*      ld (@y0),de
       04          
041971 DD 22 94 19 0214*      ld (@x1),ix
       04          
041976 FD 22 96 19 0215*      ld (@y1),iy
       04          
04197B 3E 19       0216*      ld a,25 ; we have to reload the 2nd plot command
04197D 32 92 19 04 0217*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041981 21 8C 19 04 0218*  	ld hl,@cmd0
041985 01 0C 00 00 0219*  	ld bc,@end-@cmd0
041989 5B DF       0220*  	rst.lil $18
04198B C9          0221*      ret
04198C 19          0222*  @cmd0:  db 25 ; plot
04198D 04          0223*  @arg0:  db plot_sl_both+mv_abs
04198E 00 00       0224*  @x0:    dw 0x0000
041990 00 00       0225*  @y0:    dw 0x0000
041992 19          0226*  @cmd1:  db 25 ; plot
041993 9D          0227*  @arg1:  db plot_cf+dr_abs_fg
041994 00 00       0228*  @x1:    dw 0x0000
041996 00 00       0229*  @y1:    dw 0x0000
041998 00          0230*  @end:   db 0x00 ; padding
041999             0040       include "vdu_sprites.inc"
041999             0001*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041999             0002*  ; the VDP can support up to 256 sprites. They must be defined
041999             0003*  ; contiguously, and so the first sprite is sprite 0.
041999             0004*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041999             0005*  ; Once a selection of sprites have been defined, you can activate
041999             0006*  ; them using the VDU 23, 27, 7, n command, where n is the number
041999             0007*  ; of sprites to activate. This will activate the first n sprites,
041999             0008*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041999             0009*  
041999             0010*  ; A single sprite can have multiple "frames", referring to
041999             0011*  ; different bitmaps.
041999             0012*  ; (These bitmaps do not need to be the same size.)
041999             0013*  ; This allows a sprite to include an animation sequence,
041999             0014*  ; which can be stepped through one frame at a time, or picked
041999             0015*  ; in any order.
041999             0016*  
041999             0017*  ; Any format of bitmap can be used as a sprite frame. It should
041999             0018*  ; be noted however that "native" format bitmaps are not
041999             0019*  ; recommended for use as sprite frames, as they cannot get
041999             0020*  ; erased from the screen. (As noted above, the "native" bitmap
041999             0021*  ; format is not really intended for general use.) This is part
041999             0022*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041999             0023*  ; screen are now stored in RGBA2222 format.
041999             0024*  
041999             0025*  ; An "active" sprite can be hidden, so it will stop being drawn,
041999             0026*  ; and then later shown again.
041999             0027*  
041999             0028*  ; Moving sprites around the screen is done by changing the
041999             0029*  ; position of the sprite. This can be done either by setting
041999             0030*  ; the absolute position of the sprite, or by moving the sprite
041999             0031*  ; by a given number of pixels. (Sprites are positioned using
041999             0032*  ; pixel coordinates, and not by the logical OS coordinate system.)
041999             0033*  ; In the current sprite system, sprites will not update their
041999             0034*  ; position on-screen until either another drawing operation is
041999             0035*  ; performed or an explicit VDU 23, 27, 15 command is performed.
041999             0036*  
041999             0037*  ; VDU 23, 27, 4, n: Select sprite n
041999             0038*  ; inputs: a is the 8-bit sprite id
041999             0039*  vdu_sprite_select:
041999 32 AB 19 04 0040*      ld (@sprite),a
04199D 21 A8 19 04 0041*      ld hl,@cmd
0419A1 01 04 00 00 0042*      ld bc,@end-@cmd
0419A5 5B DF       0043*      rst.lil $18
0419A7 C9          0044*      ret
0419A8 17 1B 04    0045*  @cmd:    db 23,27,4
0419AB 00          0046*  @sprite: db 0x00
0419AC             0047*  @end:
0419AC             0048*  
0419AC             0049*  ; VDU 23, 27, 5: Clear frames in current sprite
0419AC             0050*  ; inputs: none
0419AC             0051*  ; prerequisites: vdu_sprite_select
0419AC             0052*  vdu_sprite_clear_frames:
0419AC 21 B7 19 04 0053*      ld hl,@cmd
0419B0 01 03 00 00 0054*      ld bc,@end-@cmd
0419B4 5B DF       0055*      rst.lil $18
0419B6 C9          0056*      ret
0419B7 17 1B 05    0057*  @cmd: db 23,27,5
0419BA             0058*  @end:
0419BA             0059*  
0419BA             0060*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
0419BA             0061*  ; inputs: a is the 8-bit bitmap number
0419BA             0062*  ; prerequisites: vdu_sprite_select
0419BA             0063*  vdu_sprite_add_bmp:
0419BA 32 CC 19 04 0064*      ld (@bmp),a
0419BE 21 C9 19 04 0065*      ld hl,@cmd
0419C2 01 04 00 00 0066*      ld bc,@end-@cmd
0419C6 5B DF       0067*      rst.lil $18
0419C8 C9          0068*      ret
0419C9 17 1B 06    0069*  @cmd: db 23,27,6
0419CC 00          0070*  @bmp: db 0x00
0419CD             0071*  @end:
0419CD             0072*  
0419CD             0073*  ; VDU 23, 27, 7, n: Activate n sprites
0419CD             0074*  ; inputs: a is the number of sprites to activate
0419CD             0075*  ; prerequisites: each sprite activated must have at least one frame attached to it
0419CD             0076*  vdu_sprite_activate:
0419CD 32 DF 19 04 0077*      ld (@num),a
0419D1 21 DC 19 04 0078*      ld hl,@cmd
0419D5 01 04 00 00 0079*      ld bc,@end-@cmd
0419D9 5B DF       0080*      rst.lil $18
0419DB C9          0081*      ret
0419DC 17 1B 07    0082*  @cmd: db 23,27,7
0419DF 00          0083*  @num: db 0x00
0419E0             0084*  @end:
0419E0             0085*  
0419E0             0086*  ; VDU 23, 27, 8: Select next frame of current sprite
0419E0             0087*  ; inputs: none
0419E0             0088*  ; prerequisites: vdu_sprite_select
0419E0             0089*  vdu_sprite_next_frame:
0419E0 21 EB 19 04 0090*      ld hl,@cmd
0419E4 01 03 00 00 0091*      ld bc,@end-@cmd
0419E8 5B DF       0092*      rst.lil $18
0419EA C9          0093*      ret
0419EB 17 1B 08    0094*  @cmd: db 23,27,8
0419EE             0095*  @end:
0419EE             0096*  
0419EE             0097*  ; VDU 23, 27, 9: Select previous frame of current sprite
0419EE             0098*  ; inputs: none
0419EE             0099*  ; prerequisites: vdu_sprite_select
0419EE             0100*  vdu_sprite_prev_frame:
0419EE 21 F9 19 04 0101*      ld hl,@cmd
0419F2 01 03 00 00 0102*      ld bc,@end-@cmd
0419F6 5B DF       0103*      rst.lil $18
0419F8 C9          0104*      ret
0419F9 17 1B 09    0105*  @cmd: db 23,27,9
0419FC             0106*  @end:
0419FC             0107*  
0419FC             0108*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
0419FC             0109*  ; inputs: a is frame number to select
0419FC             0110*  ; prerequisites: vdu_sprite_select
0419FC             0111*  vdu_sprite_select_frame:
0419FC 32 0E 1A 04 0112*      ld (@frame),a
041A00 21 0B 1A 04 0113*      ld hl,@cmd
041A04 01 04 00 00 0114*      ld bc,@end-@cmd
041A08 5B DF       0115*      rst.lil $18
041A0A C9          0116*      ret
041A0B 17 1B 0A    0117*  @cmd:    db 23,27,10
041A0E 00          0118*  @frame:  db 0x00
041A0F             0119*  @end:
041A0F             0120*  
041A0F             0121*  ; VDU 23, 27, 11: Show current sprite
041A0F             0122*  ; inputs: none
041A0F             0123*  ; prerequisites: vdu_sprite_select
041A0F             0124*  vdu_sprite_show:
041A0F 21 1A 1A 04 0125*      ld hl,@cmd
041A13 01 03 00 00 0126*      ld bc,@end-@cmd
041A17 5B DF       0127*      rst.lil $18
041A19 C9          0128*      ret
041A1A 17 1B 0B    0129*  @cmd: db 23,27,11
041A1D             0130*  @end:
041A1D             0131*  
041A1D             0132*  ; VDU 23, 27, 12: Hide current sprite
041A1D             0133*  ; inputs: none
041A1D             0134*  ; prerequisites: vdu_sprite_select
041A1D             0135*  vdu_sprite_hide:
041A1D 21 28 1A 04 0136*      ld hl,@cmd
041A21 01 03 00 00 0137*      ld bc,@end-@cmd
041A25 5B DF       0138*      rst.lil $18
041A27 C9          0139*      ret
041A28 17 1B 0C    0140*  @cmd: db 23,27,12
041A2B             0141*  @end:
041A2B             0142*  
041A2B             0143*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041A2B             0144*  ; inputs: bc is x coordinate, de is y coordinate
041A2B             0145*  ; prerequisites: vdu_sprite_select
041A2B             0146*  vdu_sprite_move_abs:
041A2B ED 43 43 1A 0147*      ld (@xpos),bc
       04          
041A30 ED 53 45 1A 0148*      ld (@ypos),de
       04          
041A35 21 40 1A 04 0149*      ld hl,@cmd
041A39 01 07 00 00 0150*      ld bc,@end-@cmd
041A3D 5B DF       0151*      rst.lil $18
041A3F C9          0152*      ret
041A40 17 1B 0D    0153*  @cmd:  db 23,27,13
041A43 00 00       0154*  @xpos: dw 0x0000
041A45 00 00       0155*  @ypos: dw 0x0000
041A47 00          0156*  @end:  db 0x00 ; padding
041A48             0157*  
041A48             0158*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041A48             0159*  ; inputs: bc is x coordinate, de is y coordinate
041A48             0160*  ; prerequisites: vdu_sprite_select
041A48             0161*  vdu_sprite_move_rel:
041A48 ED 43 60 1A 0162*      ld (@dx),bc
       04          
041A4D ED 53 62 1A 0163*      ld (@dy),de
       04          
041A52 21 5D 1A 04 0164*      ld hl,@cmd
041A56 01 07 00 00 0165*      ld bc,@end-@cmd
041A5A 5B DF       0166*      rst.lil $18
041A5C C9          0167*      ret
041A5D 17 1B 0E    0168*  @cmd: db 23,27,14
041A60 00 00       0169*  @dx:  dw 0x0000
041A62 00 00       0170*  @dy:  dw 0x0000
041A64 00          0171*  @end: db 0x00 ; padding
041A65             0172*  
041A65             0173*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041A65             0174*  ; USING 16.8 FIXED POINT COORDINATES
041A65             0175*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
041A65             0176*  ;   the fractional portiion of the inputs are truncated
041A65             0177*  ;   leaving only the 16-bit integer portion
041A65             0178*  ; prerequisites: vdu_sprite_select
041A65             0179*  vdu_sprite_move_abs168:
041A65             0180*  ; offset inputs by the gfx origin
041A65             0181*  ; y coordinate
041A65 21 00 00 00 0182*      ld hl,origin_top*256
041A69 19          0183*      add hl,de
041A6A 22 8C 1A 04 0184*      ld (@ypos-1),hl
041A6E             0185*  ; x coordinate
041A6E 21 00 80 00 0186*      ld hl,origin_left*256
041A72 09          0187*      add hl,bc
041A73 22 8A 1A 04 0188*      ld (@xpos-1),hl
041A77             0189*  ; prepare vdu command
041A77 3E 0D       0190*      ld a,13       ; restore the final byte of the command
041A79 32 8A 1A 04 0191*      ld (@cmd+2),a ; string that got stomped on by bcu
041A7D 21 88 1A 04 0192*      ld hl,@cmd
041A81 01 07 00 00 0193*      ld bc,@end-@cmd
041A85 5B DF       0194*      rst.lil $18
041A87 C9          0195*      ret
041A88 17 1B 0D    0196*  @cmd:  db 23,27,13
041A8B 00 00       0197*  @xpos: dw 0x0000
041A8D 00 00       0198*  @ypos: dw 0x0000
041A8F             0199*  @end:  ; no padding required b/c we shifted de right
041A8F             0200*  
041A8F             0201*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041A8F             0202*  ; USING 16.8 FIXED POINT COORDINATES
041A8F             0203*  ; inputs: ub.c is dx, ud.e is dy
041A8F             0204*  ;   the fractional portiion of the inputs are truncated
041A8F             0205*  ;   leaving only the 16-bit integer portion
041A8F             0206*  ; prerequisites: vdu_sprite_select
041A8F             0207*  vdu_sprite_move_rel168:
041A8F             0208*  ; populate in the reverse of normal to keep the
041A8F             0209*  ; inputs from stomping on each other
041A8F ED 53 AE 1A 0210*      ld (@dy-1),de
       04          
041A94 ED 43 AC 1A 0211*      ld (@dx-1),bc
       04          
041A99 3E 0E       0212*      ld a,14       ; restore the final byte of the command
041A9B 32 AC 1A 04 0213*      ld (@cmd+2),a ; string that got stomped on by bcu
041A9F 21 AA 1A 04 0214*      ld hl,@cmd
041AA3 01 07 00 00 0215*      ld bc,@end-@cmd
041AA7 5B DF       0216*      rst.lil $18
041AA9 C9          0217*      ret
041AAA 17 1B 0E    0218*  @cmd:  db 23,27,14
041AAD 00 00       0219*  @dx: dw 0x0000
041AAF 00 00       0220*  @dy: dw 0x0000
041AB1             0221*  @end:  ; no padding required b/c we shifted de right
041AB1             0222*  
041AB1             0223*  ; VDU 23, 27, 15: Update the sprites in the GPU
041AB1             0224*  ; inputs: none
041AB1             0225*  vdu_sprite_update:
041AB1 21 BC 1A 04 0226*      ld hl,@cmd
041AB5 01 03 00 00 0227*      ld bc,@end-@cmd
041AB9 5B DF       0228*      rst.lil $18
041ABB C9          0229*      ret
041ABC 17 1B 0F    0230*  @cmd: db 23,27,15
041ABF             0231*  @end:
041ABF             0232*  
041ABF             0233*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
041ABF             0234*  ; inputs: none
041ABF             0235*  vdu_sprite_bmp_reset:
041ABF 21 CA 1A 04 0236*      ld hl,@cmd
041AC3 01 03 00 00 0237*      ld bc,@end-@cmd
041AC7 5B DF       0238*      rst.lil $18
041AC9 C9          0239*      ret
041ACA 17 1B 10    0240*  @cmd: db 23,27,16
041ACD             0241*  @end:
041ACD             0242*  
041ACD             0243*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
041ACD             0244*  ; inputs: none
041ACD             0245*  vdu_sprite_reset:
041ACD 21 D8 1A 04 0246*      ld hl,@cmd
041AD1 01 03 00 00 0247*      ld bc,@end-@cmd
041AD5 5B DF       0248*      rst.lil $18
041AD7 C9          0249*      ret
041AD8 17 1B 11    0250*  @cmd: db 23,27,17
041ADB             0251*  @end:
041ADB             0252*  
041ADB             0253*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
041ADB             0254*  ; inputs: a is the GCOL paint mode
041ADB             0255*  ; prerequisites: vdu_sprite_select
041ADB             0256*  vdu_sprite_set_gcol:
041ADB 32 ED 1A 04 0257*      ld (@mode),a
041ADF 21 EA 1A 04 0258*      ld hl,@cmd
041AE3 01 04 00 00 0259*      ld bc,@end-@cmd
041AE7 5B DF       0260*      rst.lil $18
041AE9 C9          0261*      ret
041AEA 17 1B 12    0262*  @cmd:  db 23,27,18
041AED 00          0263*  @mode: db 0x00
041AEE             0264*  @end:
041AEE             0265*  
041AEE             0266*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
041AEE             0267*  ; inputs: hl=bufferId
041AEE             0268*  ; prerequisites: vdu_sprite_select
041AEE             0269*  vdu_sprite_add_buff:
041AEE 22 00 1B 04 0270*      ld (@bufferId),hl
041AF2 21 FD 1A 04 0271*      ld hl,@cmd
041AF6 01 05 00 00 0272*      ld bc,@end-@cmd
041AFA 5B DF       0273*      rst.lil $18
041AFC C9          0274*      ret
041AFD 17 1B 26    0275*  @cmd:      db 23,27,0x26
041B00 00 00       0276*  @bufferId: dw 0x0000
041B02 00          0277*  @end:      db 0x00 ; padding
041B03             0041   
041B03             0042   ; APPLICATION INCLUDES
041B03             0043       include "collisions.inc"
041B03             0001*  ; ====== COLLISION DETECTION ======
041B03             0002*  ; --- constants ---
041B03             0003*  ; sprite_collisions flags
041B03             0004*  collides_with_player: equ 0
041B03             0005*  collides_with_laser: equ 1
041B03             0006*  sprite_alive: equ 6 ; set when sprite is alive
041B03             0007*  sprite_just_died: equ 7 ; set when sprite just died
041B03             0008*  
041B03             0009*  ; TODO: make these bit numbers instead of masks
041B03             0010*  collide_top: equ %00001000
041B03             0011*  collide_bottom: equ %00000100
041B03             0012*  collide_left: equ %00000010
041B03             0013*  collide_right: equ %00000001
041B03             0014*  ; END TODO
041B03             0015*  
041B03             0016*  ; this routine detects collisions between two collidable objects,
041B03             0017*  ; which can include sprites, active tiles, or any screen coordinate
041B03             0018*  ; which has been set up with a sprite table structure that includes dim_x
041B03             0019*  ; representing the radius of the collidable object
041B03             0020*  ; inputs: ix and iy point to the colliding objects' sprite table records
041B03             0021*  ; outputs: uh.l = distance - sum of radii
041B03             0022*  ;          zero flag set or sign flag negative if collision detected
041B03             0023*  ;          dx168 and dy168 are also populated with the signed displacements
041B03             0024*  ; destroys: everything except indexes
041B03             0025*  check_collision:
041B03             0026*  ; compute dx = x1-x0
041B03 DD 27 0B    0027*      ld hl,(ix+sprite_x)
041B06 FD 17 0B    0028*      ld de,(iy+sprite_x)
041B09 AF          0029*      xor a ; clear carry
041B0A ED 52       0030*      sbc hl,de
041B0C 22 A2 09 04 0031*      ld (dx168),hl ; dx to scratch
041B10             0032*  ; compute dy = y1-y0
041B10 DD 27 0E    0033*      ld hl,(ix+sprite_y)
041B13 FD 17 0E    0034*      ld de,(iy+sprite_y)
041B16 AF          0035*      xor a ; clear carry
041B17 ED 52       0036*      sbc hl,de ; hl = dy
041B19 22 A8 09 04 0037*      ld (dy168),hl ; dy to scratch
041B1D             0038*  ; compute euclidean distance between centers
041B1D CD AE 09 04 0039*      call distance168 ; uh.l = distance
041B21             0040*  ; check for overlap by summing half the radii
041B21 DD 7E 09    0041*      ld a,(ix+sprite_dim_x)
041B24 CB 3F       0042*      srl a ; divide by 2
041B26 FD 5E 09    0043*      ld e,(iy+sprite_dim_x)
041B29 CB 3B       0044*      srl e ; divide by 2
041B2B 83          0045*      add a,e
041B2C 11 00 00 00 0046*      ld de,0 ; clear deu and e
041B30 57          0047*      ld d,a ; ud.e = sum of radii
041B31 B7          0048*      or a ; clear carry
041B32 ED 52       0049*      sbc hl,de ; uh.l = distance - sum of radii
041B34 C9          0050*      ret
041B35             0051*  ; end check_collision
041B35             0044       include "enemies.inc"
041B35 04          0001*  max_enemy_sprites: db 4
041B36             0002*  
041B36             0003*  ; sprite_type
041B36             0004*  enemy_dead: equ 0
041B36             0005*  enemy_seeker: equ 1
041B36             0006*  enemy_medium: equ 2
041B36             0007*  enemy_large: equ 3
041B36             0008*  landing_pad: equ 4
041B36             0009*  laser_turret: equ 5
041B36             0010*  fireballs: equ 6
041B36             0011*  explosion: equ 7
041B36             0012*  
041B36             0013*  move_enemies:
041B36             0014*  ; are there any active enemies or explosions?
041B36 3A 6A 7F 04 0015*      ld a,(table_active_sprites)
041B3A A7          0016*      and a ; will be zero if no alive enemies or explosions
041B3B C2 48 1B 04 0017*      jp nz,@they_live
041B3F 21 C9 81 04 0018*      ld hl,enemies_dead
041B43 22 C6 81 04 0019*      ld (enemies_state),hl
041B47 C9          0020*      ret
041B48             0021*  @they_live:
041B48             0022*  ; initialize pointers and loop counter
041B48 FD 21 07 7D 0023*      ld iy,table_base ; set iy to first record in table
       04          
041B4D 06 10       0024*      ld b,table_max_records ; loop counter
041B4F             0025*  @move_loop:
041B4F FD 22 67 7F 0026*      ld (table_pointer),iy ; update table pointer
       04          
041B54 C5          0027*      push bc ; backup loop counter
041B55             0028*  ; check sprite_type to see if sprite is active
041B55 FD 7E 01    0029*      ld a,(iy+sprite_type)
041B58 A7          0030*      and a ; if zero, sprite is dead
041B59 CA 8C 1B 04 0031*      jp z,@next_record ; ... and we skip to next record
041B5D             0032*  ; otherwise we prepare to move the sprite
041B5D FD 7E 00    0033*      ld a,(iy+sprite_id) ; get spriteId
041B60 CD 99 19 04 0034*      call vdu_sprite_select ; select sprite
041B64 FD 27 05    0035*      ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
041B67             0036*      callHL
041B67 01 6D 1B 04 0001*M     ld bc,@F ; Address of first instruction after the jump
041B6B C5          0002*M     push bc ; which constitutes the return address
041B6C E9          0003*M     jp (hl) ; Jump to the address in HL
041B6D             0004*M @@:
041B6D             0037*  ; move_enemies_loop_return: return from behavior subroutines
041B6D FD 2A 67 7F 0038*      ld iy,(table_pointer) ; get back table pointer
       04          
041B72             0039*  ; now we check results of all the moves
041B72 FD CB 08 7E 0040*      bit sprite_just_died,(iy+sprite_collisions)
041B76 CA 82 1B 04 0041*      jp z,@draw_sprite ; if not dead, draw sprite
041B7A CD B3 7F 04 0042*      call table_deactivate_sprite
041B7E C3 8C 1B 04 0043*      jp @next_record ; and to the next record
041B82             0044*  @draw_sprite:
041B82 FD 07 0B    0045*      ld bc,(iy+sprite_x)
041B85 FD 17 0E    0046*      ld de,(iy+sprite_y)
041B88 CD 65 1A 04 0047*      call vdu_sprite_move_abs168
041B8C             0048*  ; fall through to @next_record
041B8C             0049*  @next_record:
041B8C ED 33 26    0050*      lea iy,iy+table_bytes_per_record
041B8F AF          0051*      xor a ; clears carry flag
041B90 32 6B 7F 04 0052*      ld (sprite_screen_edge),a ; clear screen edge collision flag
041B94 C1          0053*      pop bc ; get back our loop counter
041B95 10 B8       0054*      djnz @move_loop ; loop until we've checked all the records
041B97 C9          0055*      ret ; and we're out
041B98             0056*  
041B98             0057*  ; ; ######### SPRITE BEHAVIOR ROUTINES #########
041B98             0058*  ; ; each sprite in the table must have one of these defined
041B98             0059*  ; ; but they need not be unique to a particular sprite
041B98             0060*  ; ; these are jumped to from move_enemies_do_program,but could come from other places
041B98             0061*  ; ; and have the option but not obligation to go back to move_enemies_loop_return
041B98             0062*  ; ; but they can call anything they want between those two endpoints
041B98             0063*  ; move_programs: ; bookmark in case we want to know the first address of the first subroutine
041B98             0064*  
041B98             0065*  ; move_nop: ; does nothing but burn a few cycles changing the PC
041B98             0066*  ;     ret
041B98             0067*  
041B98             0068*  ; move_explosion:
041B98             0069*  ;     call animate_explosion
041B98             0070*  ;     ret
041B98             0071*  
041B98             0072*  speed_seeker: equ 0x000280 ; 2.5 pixels per frame
041B98             0073*  move_enemy_seeker:
041B98             0074*  ; run the movement program for the seeker enemy
041B98 CD D9 1B 04 0075*      call en_nav_seek_zag
041B9C C3 A0 1B 04 0076*      jp check_enemy_player_collisions
041BA0             0077*  ; end move_enemy_seeker
041BA0             0078*  
041BA0             0079*  check_enemy_player_collisions:
041BA0             0080*  ; check for collisions with laser
041BA0 DD 21 D7 6E 0081*      ld ix,laser_start_variables
       04          
041BA5 DD CB 08 76 0082*      bit sprite_alive,(ix+sprite_collisions)
041BA9 CA C6 1B 04 0083*      jp z,@player ; laser dead, check player
041BAD CD 03 1B 04 0084*      call check_collision
041BB1 F2 C6 1B 04 0085*      jp p,@player ; no collision
041BB5 DD 21 D7 6E 0086*      ld ix,laser_start_variables
       04          
041BBA DD CB 08 FE 0087*      set sprite_just_died,(ix+sprite_collisions)
041BBE DD CB 08 F6 0088*      set sprite_alive,(ix+sprite_collisions)
041BC2 C3 03 1D 04 0089*      jp enemy_kill
041BC6             0090*  @player: ; check for collisions with player
041BC6 DD 21 D4 7B 0091*      ld ix,player_start_variables
       04          
041BCB DD CB 08 76 0092*      bit sprite_alive,(ix+sprite_collisions)
041BCF C8          0093*      ret z ; player dead, no collision
041BD0 CD 03 1B 04 0094*      call check_collision
041BD4 F0          0095*      ret p ; no collision
041BD5 C3 03 1D 04 0096*      jp enemy_kill
041BD9             0097*  ; end move_enemy_seeker
041BD9             0098*  
041BD9             0099*  ; contains the logic for how to move the enemy
041BD9             0100*  ; and then does the moving
041BD9             0101*  ; inputs: a fully-populated active sprite table
041BD9             0102*  ;         player position variables
041BD9             0103*  ; destroys: everything except index registers
041BD9             0104*  ; outputs: moving enemies
041BD9             0105*  en_nav_seek_zag:
041BD9             0106*  ; set velocity and orientation by player's relative location
041BD9             0107*  ; move enemies y-axis
041BD9             0108*  ; where is player relative to us?
041BD9 CD DC 1C 04 0109*      call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
041BDD             0110*  ; is player above or below us?
041BDD ED 53 A5 05 0111*      ld (ude),de ; dy
       04          
041BE2 3A A7 05 04 0112*      ld a,(ude+2) ; deu
041BE6 17          0113*      rla ; shift sign bit into carry
041BE7 D2 13 1C 04 0114*      jp nc,@zig_zag ; player is below,evade
041BEB             0115*  ; player is even or above,so home in on current heading
041BEB FD 2F 1A    0116*      ld (iy+sprite_heading),hl ; save sprite heading
041BEE             0117*  ; fall through to @compute_velocities
041BEE             0118*  @compute_velocities:
041BEE CD BC 80 04 0119*      call sprite_compute_velocities
041BF2             0120*  ; change the animation frame to match heading
041BF2 FD 7E 1B    0121*      ld a,(iy+sprite_heading+1) ; we want the integer portion
041BF5 CB 3F       0122*      srl a ; divide integer portion by 8
041BF7 CB 3F       0123*      srl a
041BF9 CB 3F       0124*      srl a
041BFB CD FC 19 04 0125*      call vdu_sprite_select_frame
041BFF C3 1B 80 04 0126*      jp move_sprite ; will return to caller from there
041C03             0127*  @zig_zag_start:
041C03 FD 2A 67 7F 0128*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
041C08 CD 49 07 04 0129*      call rand_8
041C0C E6 3F       0130*      and %00111111 ; limit it to 64
041C0E CB DF       0131*      set 3,a ; make sure it's at least 8
041C10 FD 77 22    0132*      ld (iy+sprite_move_timer),a ; store it
041C13             0133*      ; fall through to @zig_zag
041C13             0134*  @zig_zag:
041C13 FD 7E 22    0135*      ld a,(iy+sprite_move_timer)
041C16 3D          0136*      dec a
041C17 FD 77 22    0137*      ld (iy+sprite_move_timer),a
041C1A C2 40 1C 04 0138*      jp nz,@zig_zag_no_switch
041C1E             0139*      ; otherwise flip direction and restart timer
041C1E FD 7E 23    0140*      ld a,(iy+sprite_move_step)
041C21 EE 01       0141*      xor %1 ; flips bit one
041C23 FD 77 23    0142*      ld (iy+sprite_move_step),a ; store it
041C26 C2 35 1C 04 0143*      jp nz,@F ; zag right
041C2A             0144*  ;otherwise zag left
041C2A 21 00 A0 00 0145*      ld hl,160*256; southwest heading
041C2E FD 2F 1A    0146*      ld (iy+sprite_heading),hl ; save sprite heading
041C31 C3 03 1C 04 0147*      jp @zig_zag_start
041C35             0148*  @@: ; zag right
041C35 21 00 60 00 0149*      ld hl,96*256; southeast heading
041C39 FD 2F 1A    0150*      ld (iy+sprite_heading),hl ; save sprite heading
041C3C C3 03 1C 04 0151*      jp @zig_zag_start
041C40             0152*  @zig_zag_no_switch:
041C40             0153*      ; ld a,(sprite_orientation)
041C40 FD 27 1A    0154*      ld hl,(iy+sprite_heading)
041C43 C3 EE 1B 04 0155*      jp @compute_velocities
041C47             0156*  ; end en_nav_seek_zag
041C47             0157*  
041C47             0158*  enemy_init_from_landing_pad:
041C47             0159*  ; get next available spriteId
041C47 CD 8E 7F 04 0160*      call table_get_next_id
041C4B D0          0161*      ret nc ; no carry means no free sprite slots, so we go home
041C4C             0162*  ; ix comes back with the pointer to the new sprite variables
041C4C DD E5       0163*      push ix ; de picks it up when we're ready for the copy to the table
041C4E             0164*  ; a comes back with the spriteId of the new sprite
041C4E 32 B6 1C 04 0165*      ld (@id),a
041C52             0166*  ; initialize the new sprite
041C52 CD 99 19 04 0167*      call vdu_sprite_select
041C56 CD AC 19 04 0168*      call vdu_sprite_clear_frames
041C5A 21 0B 01 00 0169*      ld hl,BUF_SEEKER_000
041C5E 06 20       0170*      ld b,32
041C60             0171*  @load_frames:
041C60 C5          0172*      push bc
041C61 E5          0173*      push hl
041C62 CD EE 1A 04 0174*      call vdu_sprite_add_buff
041C66 E1          0175*      pop hl
041C67 23          0176*      inc hl
041C68 C1          0177*      pop bc
041C69 10 F5       0178*      djnz @load_frames
041C6B             0179*  ; copy coordinates of active sprite to new sprite
041C6B FD 2A 67 7F 0180*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
041C70             0181*      ; ld hl,(iy+sprite_x)
041C70             0182*      ; ld hl,0x008000 ; debug
041C70             0183*  
041C70 CD 49 07 04 0184*      call rand_8
041C74 21 00 00 00 0185*      ld hl,0
041C78 67          0186*      ld h,a
041C79             0187*  
041C79 22 C1 1C 04 0188*      ld (@x),hl
041C7D             0189*      ; ld hl,(iy+sprite_y)
041C7D             0190*      ; ld hl,0x002000 ; debug
041C7D             0191*  
041C7D CD 49 07 04 0192*      call rand_8
041C81 21 00 00 00 0193*      ld hl,0
041C85 67          0194*      ld h,a
041C86             0195*  
041C86 22 C4 1C 04 0196*      ld (@y),hl
041C8A CD 49 07 04 0197*      call rand_8
041C8E E6 01       0198*      and %00000001 ; 50/50 chance of moving left or right on spanw
041C90 32 D9 1C 04 0199*      ld (@move_step),a
041C94             0200*  ; now copy to the table
041C94 21 B6 1C 04 0201*      ld hl,@id ; address to copy from
041C98 D1          0202*      pop de ; address to copy to (was ix)
041C99 01 26 00 00 0203*      ld bc,table_bytes_per_record ; number of bytes to copy
041C9D ED B0       0204*      ldir ; copy the records from local scratch to sprite table
041C9F             0205*  ; set collision flags
041C9F FD CB 08 CE 0206*      set collides_with_laser,(iy+sprite_collisions)
041CA3 FD CB 08 C6 0207*      set collides_with_player,(iy+sprite_collisions)
041CA7             0208*  ; update the new sprite's position and make it visible
041CA7 FD 07 0B    0209*      ld bc,(iy+sprite_x)
041CAA FD 17 0E    0210*      ld de,(iy+sprite_y)
041CAD CD 65 1A 04 0211*      call vdu_sprite_move_abs168
041CB1 CD 0F 1A 04 0212*      call vdu_sprite_show
041CB5 C9          0213*      ret
041CB6 00          0214*  @id:                    db 0x00 ; 1 bytes unique spriteId, zero-based
041CB7 01          0215*  @type:                  db enemy_seeker ; 1 bytes type of sprite as defined in enemies.inc
041CB8 0B 01 00    0216*  @base_bufferId:         dl BUF_SEEKER_000 ; 3 bytes bitmap bufferId
041CBB 98 1B 04    0217*  @move_program:          dl move_enemy_seeker ; 3 bytes address of sprite's behavior subroutine
041CBE 00          0218*  @collisions:            db 0 ; 3 bytes, set by spawing routine
041CBF 10          0219*  @dim_x:                 db 16 ; 1 bytes sprite width in pixels
041CC0 10          0220*  @dim_y:                 db 16 ; 1 bytes sprite height in pixels
041CC1 00 00 00    0221*  @x:                     dl 0x000000 ; 1 bytes 16.8 fractional x position in pixels
041CC4 00 00 00    0222*  @y:                     dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
041CC7 00 00 00    0223*  @xvel:                  dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
041CCA 00 00 00    0224*  @yvel:                  dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
041CCD 80 02 00    0225*  @vel:                   dl speed_seeker ; 3 bytes velocity, 16.8 fixed, pixels
041CD0 00 80 00    0226*  @heading:               dl 0x008000 ; 3 bytes sprite movement direction deg256 16.8 fixed
041CD3 00 80 00    0227*  @orientation:           dl 0x008000 ; 3 bytes orientation bits
041CD6 00          0228*  @animation:             db 0x00 ; 1 bytes current animation index, zero-based
041CD7 00          0229*  @animation_timer:       db 0x00 ; 1 bytes when hits zero, draw next animation
041CD8 01          0230*  @move_timer:            db 0x01 ; 1 bytes when zero, go to next move program, or step
041CD9 00          0231*  @move_step:             db 0x00 ; 1 bytes stage in a move program sequence, varies
041CDA 0A          0232*  @points:                db 10 ; 1 bytes points awarded for killing this sprite type
041CDB 02          0233*  @shield_damage:         db 0x02 ; 1 bytes shield points deducted for collision
041CDC             0234*  
041CDC             0235*  
041CDC             0236*  ; move_fireballs:
041CDC             0237*  ;     call move_sprite ; move sprite
041CDC             0238*  ;     ld a,(sprite_screen_edge) ; check for collision with screen edge
041CDC             0239*  ;     and a ; if zero we're still within screen bounds
041CDC             0240*  ;     jp z,move_fireballs_alive
041CDC             0241*  ; ; otherwise kill sprite
041CDC             0242*  ;     ld a,%10000000 ; any bit set in high nibble means sprite will die
041CDC             0243*  ;     ld (iy+sprite_collisions),a
041CDC             0244*  ;     ret
041CDC             0245*  ; move_fireballs_alive:
041CDC             0246*  ;     ld a,(sprite_animation_timer)
041CDC             0247*  ;     dec a
041CDC             0248*  ;     ld (sprite_animation_timer),a
041CDC             0249*  ;     jp nz,move_fireballs_draw
041CDC             0250*  ;     ld a,(sprite_animation)
041CDC             0251*  ;     xor %1
041CDC             0252*  ;     ld (sprite_animation),a
041CDC             0253*  ;     ld a,6 ; 1/10th of a second timer
041CDC             0254*  ;     ld (sprite_animation_timer),a
041CDC             0255*  ;     ; fall through
041CDC             0256*  
041CDC             0257*  ; move_fireballs_draw:
041CDC             0258*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
041CDC             0259*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
041CDC             0260*  ;     call check_collisions
041CDC             0261*  ;     ret
041CDC             0262*  
041CDC             0263*  ; compute orientation to player
041CDC             0264*  ; based on relative positions
041CDC             0265*  ; returns: h.l 16.8 fixed angle256 to player
041CDC             0266*  ;    ub.c and ud.e as 16.8 signed fixed point numbers
041CDC             0267*  ;    representing delta-x/y *to* target respectively
041CDC             0268*  orientation_to_player:
041CDC FD 2A 67 7F 0269*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
041CE1 FD 07 0B    0270*      ld bc,(iy+sprite_x)
041CE4 FD 17 0E    0271*      ld de,(iy+sprite_y)
041CE7 DD 2A DF 7B 0272*      ld ix,(player_x)
       04          
041CEC FD 2A E2 7B 0273*      ld iy,(player_y)
       04          
041CF1 CD 87 09 04 0274*      call dxy168
041CF5 C5          0275*      push bc
041CF6 D5          0276*      push de
041CF7 CD E3 09 04 0277*      call atan2_168fast
041CFB D1          0278*      pop de
041CFC C1          0279*      pop bc
041CFD FD 2A 67 7F 0280*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
041D02 C9          0281*      ret
041D03             0282*  
041D03             0283*  ; this routine vanquishes the enemy sprite
041D03             0284*  ; and replaces it with an animated explosion
041D03             0285*  ; we jump here instead of call because
041D03             0286*  ; we want to return to differing locations in the loop
041D03             0287*  ; depending on whether we're still sploding
041D03             0288*  ; destroys: everything except index registers
041D03             0289*  ; returns: an incandescent ball of debris and gas
041D03             0290*  enemy_kill:
041D03 FD 2A 67 7F 0291*      ld iy,(table_pointer); TODO: see if we can get IY to land here with the proper value
       04          
041D08             0292*  ; tally up points
041D08 2A CA 7B 04 0293*      ld hl,(player_score)
041D0C 01 00 00 00 0294*      ld bc,0 ; clear bcu
041D10 FD 4E 24    0295*      ld c,(iy+sprite_points)
041D13 09          0296*      add hl,bc
041D14 22 CA 7B 04 0297*      ld (player_score),hl
041D18             0298*  ; ; initialize explosion
041D18             0299*  ; init_explosion:
041D18             0300*  ;     ld hl,explosion
041D18             0301*  ;     ld (sprite_base_bufferId),hl
041D18             0302*  ;     ld hl,move_explosion
041D18             0303*  ;     ld (sprite_move_program),hl
041D18             0304*  ;     ld a,%00000000 ; collides with nothing
041D18             0305*  ;     ld (iy+sprite_collisions),a
041D18             0306*  ;     ld hl,0 ; north
041D18             0307*  ;     ld (sprite_heading),hl
041D18             0308*  ;     ld a,0x04 ; will decrement to 03
041D18             0309*  ;     ld (sprite_animation),a
041D18             0310*  ;     ld a,0x07 ; 7/60th of a second timer
041D18             0311*  ;     ld (sprite_animation_timer),a
041D18             0312*  ;     xor a
041D18             0313*  ;     ld (sprite_move_timer),a
041D18             0314*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
041D18             0315*  ; ; fall through to next_explosion
041D18             0316*  ; next_explosion:
041D18             0317*  ;     ld a,(sprite_animation)
041D18             0318*  ;     dec a ; if rolled negative from zero,we're done sploding
041D18             0319*  ;     jp m,done_explosion
041D18             0320*  ;     ld (sprite_animation),a
041D18             0321*  ;     ld a,0x7 ; 7/60th of a second timer
041D18             0322*  ;     ld (sprite_animation_timer),a
041D18             0323*  ; ; fall through to animate_explosion
041D18             0324*  ; animate_explosion:
041D18             0325*  ;     ld hl,sprite_y+1
041D18             0326*  ;     inc (hl) ; move explosion down 1 pixel
041D18             0327*  ;     jp z, done_explosion ; if wraparound to top of screen, kill explosion
041D18             0328*  ;     ld hl,sprite_animation_timer
041D18             0329*  ;     dec (hl) ; if timer is zero,we do next animation
041D18             0330*  ;     jp z,next_explosion
041D18             0331*  ;     ;otherwise we fall through to draw the current one
041D18             0332*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
041D18             0333*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
041D18             0334*  ;     ret ; now we go back to caller
041D18             0335*  ; done_explosion:
041D18 FD CB 08 FE 0336*      set sprite_just_died,(iy+sprite_collisions)
041D1C C9          0337*      ret ; now we go back to caller
041D1D             0338*  ; end enemy_kill
041D1D             0045       include "fonts_list.inc"
041D1D             0001*  ; Generated by asm_config_editor.py
041D1D             0002*  font_list_record_size: equ 12
041D1D             0003*  font_list_width: equ 0
041D1D             0004*  font_list_height: equ 3
041D1D             0005*  font_list_bufferId: equ 6
041D1D             0006*  font_list_filename: equ 9
041D1D             0007*  
041D1D             0008*  num_fonts: equ 18
041D1D             0009*  
041D1D             0010*  ; Index list:
041D1D             0011*  amiga_forever_16x24: equ 64000
041D1D             0012*  amiga_forever_8x16: equ 64001
041D1D             0013*  amiga_forever_8x8: equ 64002
041D1D             0014*  computer_pixel_7_10x15: equ 64003
041D1D             0015*  computer_pixel_7_10x24: equ 64004
041D1D             0016*  computer_pixel_7_8x16: equ 64005
041D1D             0017*  Lat2_Terminus12x6_6x12: equ 64006
041D1D             0018*  Lat2_TerminusBold14_8x14: equ 64007
041D1D             0019*  Lat2_VGA14_8x14: equ 64008
041D1D             0020*  Lat2_VGA16_8x16: equ 64009
041D1D             0021*  Lat2_VGA8_8x8: equ 64010
041D1D             0022*  Lat7_Fixed13_8x13: equ 64011
041D1D             0023*  Lat7_Terminus12x6_6x12: equ 64012
041D1D             0024*  Lat7_TerminusBold16_8x16: equ 64013
041D1D             0025*  Lat7_VGA14_8x14: equ 64014
041D1D             0026*  Lat7_VGA8x8: equ 64015
041D1D             0027*  scriptorium_12x14: equ 64016
041D1D             0028*  Squarewave_Bold_8x12: equ 64017
041D1D             0029*  
041D1D             0030*  font_list: ; width; height; bufferId; filename;:
041D1D 10 00 00 18 0031*  	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 F5 1D 04 
041D29 08 00 00 10 0032*  	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 14 1E 04 
041D35 08 00 00 08 0033*  	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 32 1E 04 
041D41 0A 00 00 0F 0034*  	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 4F 1E 04 
041D4D 0A 00 00 18 0035*  	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 71 1E 04 
041D59 08 00 00 10 0036*  	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 93 1E 04 
041D65 06 00 00 0C 0037*  	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 B4 1E 04 
041D71 08 00 00 0E 0038*  	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 D6 1E 04 
041D7D 08 00 00 0E 0039*  	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 FA 1E 04 
041D89 08 00 00 10 0040*  	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 15 1F 04 
041D95 08 00 00 08 0041*  	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 30 1F 04 
041DA1 08 00 00 0D 0042*  	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 49 1F 04 
041DAD 06 00 00 0C 0043*  	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 66 1F 04 
041DB9 08 00 00 10 0044*  	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 88 1F 04 
041DC5 08 00 00 0E 0045*  	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 AC 1F 04 
041DD1 08 00 00 08 0046*  	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 C7 1F 04 
041DDD 0C 00 00 0E 0047*  	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 E0 1F 04 
041DE9 08 00 00 0C 0048*  	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 FD 1F 04 
041DF5             0049*  
041DF5             0050*  ; files_list: ; filename:
041DF5 66 6F 6E 74 0051*  fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
041E14 66 6F 6E 74 0052*  fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
041E32 66 6F 6E 74 0053*  fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041E4F 66 6F 6E 74 0054*  fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
041E71 66 6F 6E 74 0055*  fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
041E93 66 6F 6E 74 0056*  fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
041EB4 66 6F 6E 74 0057*  fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
041ED6 66 6F 6E 74 0058*  fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
041EFA 66 6F 6E 74 0059*  fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
041F15 66 6F 6E 74 0060*  fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
041F30 66 6F 6E 74 0061*  fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041F49 66 6F 6E 74 0062*  fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
041F66 66 6F 6E 74 0063*  fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
041F88 66 6F 6E 74 0064*  fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
041FAC 66 6F 6E 74 0065*  fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
041FC7 66 6F 6E 74 0066*  fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
041FE0 66 6F 6E 74 0067*  fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
041FFD 66 6F 6E 74 0068*  fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
04201D             0046       include "images_tiles_dg.inc"
04201D             0001*  ; Generated by tiles_dg.py
04201D             0002*  
04201D             0003*  tiles_dg_num_images: equ 396
04201D             0004*  
04201D             0005*  ; buffer_ids:
04201D             0006*  BUF_DG_0_00: equ 512
04201D             0007*  BUF_DG_0_01: equ 513
04201D             0008*  BUF_DG_0_02: equ 514
04201D             0009*  BUF_DG_0_03: equ 515
04201D             0010*  BUF_DG_0_04: equ 516
04201D             0011*  BUF_DG_0_05: equ 517
04201D             0012*  BUF_DG_0_06: equ 518
04201D             0013*  BUF_DG_0_07: equ 519
04201D             0014*  BUF_DG_0_08: equ 520
04201D             0015*  BUF_DG_0_09: equ 521
04201D             0016*  BUF_DG_0_0A: equ 522
04201D             0017*  BUF_DG_0_0B: equ 523
04201D             0018*  BUF_DG_0_0C: equ 524
04201D             0019*  BUF_DG_0_0D: equ 525
04201D             0020*  BUF_DG_0_0E: equ 526
04201D             0021*  BUF_DG_0_0F: equ 527
04201D             0022*  BUF_DG_0_10: equ 528
04201D             0023*  BUF_DG_0_11: equ 529
04201D             0024*  BUF_DG_0_12: equ 530
04201D             0025*  BUF_DG_0_13: equ 531
04201D             0026*  BUF_DG_0_14: equ 532
04201D             0027*  BUF_DG_0_15: equ 533
04201D             0028*  BUF_DG_0_16: equ 534
04201D             0029*  BUF_DG_0_17: equ 535
04201D             0030*  BUF_DG_0_18: equ 536
04201D             0031*  BUF_DG_0_19: equ 537
04201D             0032*  BUF_DG_0_1A: equ 538
04201D             0033*  BUF_DG_0_1B: equ 539
04201D             0034*  BUF_DG_0_1C: equ 540
04201D             0035*  BUF_DG_0_1D: equ 541
04201D             0036*  BUF_DG_0_1E: equ 542
04201D             0037*  BUF_DG_0_1F: equ 543
04201D             0038*  BUF_DG_0_20: equ 544
04201D             0039*  BUF_DG_0_21: equ 545
04201D             0040*  BUF_DG_0_22: equ 546
04201D             0041*  BUF_DG_0_23: equ 547
04201D             0042*  BUF_DG_0_24: equ 548
04201D             0043*  BUF_DG_0_25: equ 549
04201D             0044*  BUF_DG_0_26: equ 550
04201D             0045*  BUF_DG_0_27: equ 551
04201D             0046*  BUF_DG_0_28: equ 552
04201D             0047*  BUF_DG_0_29: equ 553
04201D             0048*  BUF_DG_0_2A: equ 554
04201D             0049*  BUF_DG_0_2B: equ 555
04201D             0050*  BUF_DG_0_2C: equ 556
04201D             0051*  BUF_DG_0_2D: equ 557
04201D             0052*  BUF_DG_0_2E: equ 558
04201D             0053*  BUF_DG_0_2F: equ 559
04201D             0054*  BUF_DG_0_30: equ 560
04201D             0055*  BUF_DG_0_31: equ 561
04201D             0056*  BUF_DG_0_32: equ 562
04201D             0057*  BUF_DG_0_33: equ 563
04201D             0058*  BUF_DG_0_34: equ 564
04201D             0059*  BUF_DG_0_35: equ 565
04201D             0060*  BUF_DG_0_36: equ 566
04201D             0061*  BUF_DG_0_37: equ 567
04201D             0062*  BUF_DG_0_38: equ 568
04201D             0063*  BUF_DG_0_39: equ 569
04201D             0064*  BUF_DG_0_3A: equ 570
04201D             0065*  BUF_DG_0_3B: equ 571
04201D             0066*  BUF_DG_0_3C: equ 572
04201D             0067*  BUF_DG_0_3D: equ 573
04201D             0068*  BUF_DG_0_3E: equ 574
04201D             0069*  BUF_DG_0_3F: equ 575
04201D             0070*  BUF_DG_0_40: equ 576
04201D             0071*  BUF_DG_0_41: equ 577
04201D             0072*  BUF_DG_1_00: equ 768
04201D             0073*  BUF_DG_1_01: equ 769
04201D             0074*  BUF_DG_1_02: equ 770
04201D             0075*  BUF_DG_1_03: equ 771
04201D             0076*  BUF_DG_1_04: equ 772
04201D             0077*  BUF_DG_1_05: equ 773
04201D             0078*  BUF_DG_1_06: equ 774
04201D             0079*  BUF_DG_1_07: equ 775
04201D             0080*  BUF_DG_1_08: equ 776
04201D             0081*  BUF_DG_1_09: equ 777
04201D             0082*  BUF_DG_1_0A: equ 778
04201D             0083*  BUF_DG_1_0B: equ 779
04201D             0084*  BUF_DG_1_0C: equ 780
04201D             0085*  BUF_DG_1_0D: equ 781
04201D             0086*  BUF_DG_1_0E: equ 782
04201D             0087*  BUF_DG_1_0F: equ 783
04201D             0088*  BUF_DG_1_10: equ 784
04201D             0089*  BUF_DG_1_11: equ 785
04201D             0090*  BUF_DG_1_12: equ 786
04201D             0091*  BUF_DG_1_13: equ 787
04201D             0092*  BUF_DG_1_14: equ 788
04201D             0093*  BUF_DG_1_15: equ 789
04201D             0094*  BUF_DG_1_16: equ 790
04201D             0095*  BUF_DG_1_17: equ 791
04201D             0096*  BUF_DG_1_18: equ 792
04201D             0097*  BUF_DG_1_19: equ 793
04201D             0098*  BUF_DG_1_1A: equ 794
04201D             0099*  BUF_DG_1_1B: equ 795
04201D             0100*  BUF_DG_1_1C: equ 796
04201D             0101*  BUF_DG_1_1D: equ 797
04201D             0102*  BUF_DG_1_1E: equ 798
04201D             0103*  BUF_DG_1_1F: equ 799
04201D             0104*  BUF_DG_1_20: equ 800
04201D             0105*  BUF_DG_1_21: equ 801
04201D             0106*  BUF_DG_1_22: equ 802
04201D             0107*  BUF_DG_1_23: equ 803
04201D             0108*  BUF_DG_1_24: equ 804
04201D             0109*  BUF_DG_1_25: equ 805
04201D             0110*  BUF_DG_1_26: equ 806
04201D             0111*  BUF_DG_1_27: equ 807
04201D             0112*  BUF_DG_1_28: equ 808
04201D             0113*  BUF_DG_1_29: equ 809
04201D             0114*  BUF_DG_1_2A: equ 810
04201D             0115*  BUF_DG_1_2B: equ 811
04201D             0116*  BUF_DG_1_2C: equ 812
04201D             0117*  BUF_DG_1_2D: equ 813
04201D             0118*  BUF_DG_1_2E: equ 814
04201D             0119*  BUF_DG_1_2F: equ 815
04201D             0120*  BUF_DG_1_30: equ 816
04201D             0121*  BUF_DG_1_31: equ 817
04201D             0122*  BUF_DG_1_32: equ 818
04201D             0123*  BUF_DG_1_33: equ 819
04201D             0124*  BUF_DG_1_34: equ 820
04201D             0125*  BUF_DG_1_35: equ 821
04201D             0126*  BUF_DG_1_36: equ 822
04201D             0127*  BUF_DG_1_37: equ 823
04201D             0128*  BUF_DG_1_38: equ 824
04201D             0129*  BUF_DG_1_39: equ 825
04201D             0130*  BUF_DG_1_3A: equ 826
04201D             0131*  BUF_DG_1_3B: equ 827
04201D             0132*  BUF_DG_1_3C: equ 828
04201D             0133*  BUF_DG_1_3D: equ 829
04201D             0134*  BUF_DG_2_00: equ 1024
04201D             0135*  BUF_DG_2_01: equ 1025
04201D             0136*  BUF_DG_2_02: equ 1026
04201D             0137*  BUF_DG_2_03: equ 1027
04201D             0138*  BUF_DG_2_04: equ 1028
04201D             0139*  BUF_DG_2_05: equ 1029
04201D             0140*  BUF_DG_2_06: equ 1030
04201D             0141*  BUF_DG_2_07: equ 1031
04201D             0142*  BUF_DG_2_08: equ 1032
04201D             0143*  BUF_DG_2_09: equ 1033
04201D             0144*  BUF_DG_2_0A: equ 1034
04201D             0145*  BUF_DG_2_0B: equ 1035
04201D             0146*  BUF_DG_2_0C: equ 1036
04201D             0147*  BUF_DG_2_0D: equ 1037
04201D             0148*  BUF_DG_2_0E: equ 1038
04201D             0149*  BUF_DG_2_0F: equ 1039
04201D             0150*  BUF_DG_2_10: equ 1040
04201D             0151*  BUF_DG_2_11: equ 1041
04201D             0152*  BUF_DG_2_12: equ 1042
04201D             0153*  BUF_DG_2_13: equ 1043
04201D             0154*  BUF_DG_2_14: equ 1044
04201D             0155*  BUF_DG_2_15: equ 1045
04201D             0156*  BUF_DG_2_16: equ 1046
04201D             0157*  BUF_DG_2_17: equ 1047
04201D             0158*  BUF_DG_2_18: equ 1048
04201D             0159*  BUF_DG_2_19: equ 1049
04201D             0160*  BUF_DG_2_1A: equ 1050
04201D             0161*  BUF_DG_2_1B: equ 1051
04201D             0162*  BUF_DG_2_1C: equ 1052
04201D             0163*  BUF_DG_2_1D: equ 1053
04201D             0164*  BUF_DG_2_1E: equ 1054
04201D             0165*  BUF_DG_2_1F: equ 1055
04201D             0166*  BUF_DG_2_20: equ 1056
04201D             0167*  BUF_DG_2_21: equ 1057
04201D             0168*  BUF_DG_2_22: equ 1058
04201D             0169*  BUF_DG_2_23: equ 1059
04201D             0170*  BUF_DG_2_24: equ 1060
04201D             0171*  BUF_DG_2_25: equ 1061
04201D             0172*  BUF_DG_2_26: equ 1062
04201D             0173*  BUF_DG_2_27: equ 1063
04201D             0174*  BUF_DG_2_28: equ 1064
04201D             0175*  BUF_DG_2_29: equ 1065
04201D             0176*  BUF_DG_2_2A: equ 1066
04201D             0177*  BUF_DG_2_2B: equ 1067
04201D             0178*  BUF_DG_2_2C: equ 1068
04201D             0179*  BUF_DG_2_2D: equ 1069
04201D             0180*  BUF_DG_2_2E: equ 1070
04201D             0181*  BUF_DG_2_2F: equ 1071
04201D             0182*  BUF_DG_2_30: equ 1072
04201D             0183*  BUF_DG_2_31: equ 1073
04201D             0184*  BUF_DG_2_32: equ 1074
04201D             0185*  BUF_DG_2_33: equ 1075
04201D             0186*  BUF_DG_2_34: equ 1076
04201D             0187*  BUF_DG_2_35: equ 1077
04201D             0188*  BUF_DG_2_36: equ 1078
04201D             0189*  BUF_DG_2_37: equ 1079
04201D             0190*  BUF_DG_2_38: equ 1080
04201D             0191*  BUF_DG_2_39: equ 1081
04201D             0192*  BUF_DG_2_3A: equ 1082
04201D             0193*  BUF_DG_2_3B: equ 1083
04201D             0194*  BUF_DG_2_3C: equ 1084
04201D             0195*  BUF_DG_2_3D: equ 1085
04201D             0196*  BUF_DG_2_3E: equ 1086
04201D             0197*  BUF_DG_2_3F: equ 1087
04201D             0198*  BUF_DG_2_40: equ 1088
04201D             0199*  BUF_DG_2_41: equ 1089
04201D             0200*  BUF_DG_2_42: equ 1090
04201D             0201*  BUF_DG_2_43: equ 1091
04201D             0202*  BUF_DG_2_44: equ 1092
04201D             0203*  BUF_DG_2_45: equ 1093
04201D             0204*  BUF_DG_2_46: equ 1094
04201D             0205*  BUF_DG_2_47: equ 1095
04201D             0206*  BUF_DG_2_48: equ 1096
04201D             0207*  BUF_DG_2_49: equ 1097
04201D             0208*  BUF_DG_2_4A: equ 1098
04201D             0209*  BUF_DG_2_4B: equ 1099
04201D             0210*  BUF_DG_2_4C: equ 1100
04201D             0211*  BUF_DG_2_4D: equ 1101
04201D             0212*  BUF_DG_2_4E: equ 1102
04201D             0213*  BUF_DG_2_4F: equ 1103
04201D             0214*  BUF_DG_2_50: equ 1104
04201D             0215*  BUF_DG_2_51: equ 1105
04201D             0216*  BUF_DG_2_52: equ 1106
04201D             0217*  BUF_DG_2_53: equ 1107
04201D             0218*  BUF_DG_2_54: equ 1108
04201D             0219*  BUF_DG_2_55: equ 1109
04201D             0220*  BUF_DG_2_56: equ 1110
04201D             0221*  BUF_DG_2_57: equ 1111
04201D             0222*  BUF_DG_3_00: equ 1280
04201D             0223*  BUF_DG_3_01: equ 1281
04201D             0224*  BUF_DG_3_02: equ 1282
04201D             0225*  BUF_DG_3_03: equ 1283
04201D             0226*  BUF_DG_3_04: equ 1284
04201D             0227*  BUF_DG_3_05: equ 1285
04201D             0228*  BUF_DG_3_06: equ 1286
04201D             0229*  BUF_DG_3_07: equ 1287
04201D             0230*  BUF_DG_3_08: equ 1288
04201D             0231*  BUF_DG_3_09: equ 1289
04201D             0232*  BUF_DG_3_0A: equ 1290
04201D             0233*  BUF_DG_3_0B: equ 1291
04201D             0234*  BUF_DG_3_0C: equ 1292
04201D             0235*  BUF_DG_3_0D: equ 1293
04201D             0236*  BUF_DG_3_0E: equ 1294
04201D             0237*  BUF_DG_3_0F: equ 1295
04201D             0238*  BUF_DG_3_10: equ 1296
04201D             0239*  BUF_DG_3_11: equ 1297
04201D             0240*  BUF_DG_3_12: equ 1298
04201D             0241*  BUF_DG_3_13: equ 1299
04201D             0242*  BUF_DG_3_14: equ 1300
04201D             0243*  BUF_DG_3_15: equ 1301
04201D             0244*  BUF_DG_3_16: equ 1302
04201D             0245*  BUF_DG_3_17: equ 1303
04201D             0246*  BUF_DG_3_18: equ 1304
04201D             0247*  BUF_DG_3_19: equ 1305
04201D             0248*  BUF_DG_3_1A: equ 1306
04201D             0249*  BUF_DG_3_1B: equ 1307
04201D             0250*  BUF_DG_3_1C: equ 1308
04201D             0251*  BUF_DG_3_1D: equ 1309
04201D             0252*  BUF_DG_3_1E: equ 1310
04201D             0253*  BUF_DG_3_1F: equ 1311
04201D             0254*  BUF_DG_3_20: equ 1312
04201D             0255*  BUF_DG_3_21: equ 1313
04201D             0256*  BUF_DG_3_22: equ 1314
04201D             0257*  BUF_DG_3_23: equ 1315
04201D             0258*  BUF_DG_3_24: equ 1316
04201D             0259*  BUF_DG_3_25: equ 1317
04201D             0260*  BUF_DG_3_26: equ 1318
04201D             0261*  BUF_DG_3_27: equ 1319
04201D             0262*  BUF_DG_3_28: equ 1320
04201D             0263*  BUF_DG_3_29: equ 1321
04201D             0264*  BUF_DG_3_2A: equ 1322
04201D             0265*  BUF_DG_3_2B: equ 1323
04201D             0266*  BUF_DG_3_2C: equ 1324
04201D             0267*  BUF_DG_3_2D: equ 1325
04201D             0268*  BUF_DG_3_2E: equ 1326
04201D             0269*  BUF_DG_3_2F: equ 1327
04201D             0270*  BUF_DG_3_30: equ 1328
04201D             0271*  BUF_DG_3_31: equ 1329
04201D             0272*  BUF_DG_3_32: equ 1330
04201D             0273*  BUF_DG_3_33: equ 1331
04201D             0274*  BUF_DG_3_34: equ 1332
04201D             0275*  BUF_DG_3_35: equ 1333
04201D             0276*  BUF_DG_3_36: equ 1334
04201D             0277*  BUF_DG_3_37: equ 1335
04201D             0278*  BUF_DG_3_38: equ 1336
04201D             0279*  BUF_DG_3_39: equ 1337
04201D             0280*  BUF_DG_3_3A: equ 1338
04201D             0281*  BUF_DG_3_3B: equ 1339
04201D             0282*  BUF_DG_3_3C: equ 1340
04201D             0283*  BUF_DG_3_3D: equ 1341
04201D             0284*  BUF_DG_3_3E: equ 1342
04201D             0285*  BUF_DG_3_3F: equ 1343
04201D             0286*  BUF_DG_3_40: equ 1344
04201D             0287*  BUF_DG_3_41: equ 1345
04201D             0288*  BUF_DG_3_42: equ 1346
04201D             0289*  BUF_DG_3_43: equ 1347
04201D             0290*  BUF_DG_4_00: equ 1536
04201D             0291*  BUF_DG_4_01: equ 1537
04201D             0292*  BUF_DG_4_02: equ 1538
04201D             0293*  BUF_DG_4_03: equ 1539
04201D             0294*  BUF_DG_4_04: equ 1540
04201D             0295*  BUF_DG_4_05: equ 1541
04201D             0296*  BUF_DG_4_06: equ 1542
04201D             0297*  BUF_DG_4_07: equ 1543
04201D             0298*  BUF_DG_4_08: equ 1544
04201D             0299*  BUF_DG_4_09: equ 1545
04201D             0300*  BUF_DG_4_0A: equ 1546
04201D             0301*  BUF_DG_4_0B: equ 1547
04201D             0302*  BUF_DG_4_0C: equ 1548
04201D             0303*  BUF_DG_4_0D: equ 1549
04201D             0304*  BUF_DG_4_0E: equ 1550
04201D             0305*  BUF_DG_4_0F: equ 1551
04201D             0306*  BUF_DG_4_10: equ 1552
04201D             0307*  BUF_DG_4_11: equ 1553
04201D             0308*  BUF_DG_4_12: equ 1554
04201D             0309*  BUF_DG_4_13: equ 1555
04201D             0310*  BUF_DG_4_14: equ 1556
04201D             0311*  BUF_DG_4_15: equ 1557
04201D             0312*  BUF_DG_4_16: equ 1558
04201D             0313*  BUF_DG_4_17: equ 1559
04201D             0314*  BUF_DG_4_18: equ 1560
04201D             0315*  BUF_DG_4_19: equ 1561
04201D             0316*  BUF_DG_4_1A: equ 1562
04201D             0317*  BUF_DG_4_1B: equ 1563
04201D             0318*  BUF_DG_4_1C: equ 1564
04201D             0319*  BUF_DG_4_1D: equ 1565
04201D             0320*  BUF_DG_4_1E: equ 1566
04201D             0321*  BUF_DG_4_1F: equ 1567
04201D             0322*  BUF_DG_4_20: equ 1568
04201D             0323*  BUF_DG_4_21: equ 1569
04201D             0324*  BUF_DG_4_22: equ 1570
04201D             0325*  BUF_DG_4_23: equ 1571
04201D             0326*  BUF_DG_4_24: equ 1572
04201D             0327*  BUF_DG_4_25: equ 1573
04201D             0328*  BUF_DG_4_26: equ 1574
04201D             0329*  BUF_DG_4_27: equ 1575
04201D             0330*  BUF_DG_4_28: equ 1576
04201D             0331*  BUF_DG_4_29: equ 1577
04201D             0332*  BUF_DG_4_2A: equ 1578
04201D             0333*  BUF_DG_4_2B: equ 1579
04201D             0334*  BUF_DG_4_2C: equ 1580
04201D             0335*  BUF_DG_4_2D: equ 1581
04201D             0336*  BUF_DG_4_2E: equ 1582
04201D             0337*  BUF_DG_5_00: equ 1792
04201D             0338*  BUF_DG_5_01: equ 1793
04201D             0339*  BUF_DG_5_02: equ 1794
04201D             0340*  BUF_DG_5_03: equ 1795
04201D             0341*  BUF_DG_5_04: equ 1796
04201D             0342*  BUF_DG_5_05: equ 1797
04201D             0343*  BUF_DG_5_06: equ 1798
04201D             0344*  BUF_DG_5_07: equ 1799
04201D             0345*  BUF_DG_5_08: equ 1800
04201D             0346*  BUF_DG_5_09: equ 1801
04201D             0347*  BUF_DG_5_0A: equ 1802
04201D             0348*  BUF_DG_5_0B: equ 1803
04201D             0349*  BUF_DG_5_0C: equ 1804
04201D             0350*  BUF_DG_5_0D: equ 1805
04201D             0351*  BUF_DG_5_0E: equ 1806
04201D             0352*  BUF_DG_5_0F: equ 1807
04201D             0353*  BUF_DG_5_10: equ 1808
04201D             0354*  BUF_DG_5_11: equ 1809
04201D             0355*  BUF_DG_5_12: equ 1810
04201D             0356*  BUF_DG_5_13: equ 1811
04201D             0357*  BUF_DG_5_14: equ 1812
04201D             0358*  BUF_DG_5_15: equ 1813
04201D             0359*  BUF_DG_5_16: equ 1814
04201D             0360*  BUF_DG_5_17: equ 1815
04201D             0361*  BUF_DG_5_18: equ 1816
04201D             0362*  BUF_DG_5_19: equ 1817
04201D             0363*  BUF_DG_5_1A: equ 1818
04201D             0364*  BUF_DG_5_1B: equ 1819
04201D             0365*  BUF_DG_5_1C: equ 1820
04201D             0366*  BUF_DG_5_1D: equ 1821
04201D             0367*  BUF_DG_5_1E: equ 1822
04201D             0368*  BUF_DG_5_1F: equ 1823
04201D             0369*  BUF_DG_5_20: equ 1824
04201D             0370*  BUF_DG_5_21: equ 1825
04201D             0371*  BUF_DG_5_22: equ 1826
04201D             0372*  BUF_DG_5_23: equ 1827
04201D             0373*  BUF_DG_5_24: equ 1828
04201D             0374*  BUF_DG_5_25: equ 1829
04201D             0375*  BUF_DG_5_26: equ 1830
04201D             0376*  BUF_DG_5_27: equ 1831
04201D             0377*  BUF_DG_5_28: equ 1832
04201D             0378*  BUF_DG_5_29: equ 1833
04201D             0379*  BUF_DG_5_2A: equ 1834
04201D             0380*  BUF_DG_5_2B: equ 1835
04201D             0381*  BUF_DG_5_2C: equ 1836
04201D             0382*  BUF_DG_5_2D: equ 1837
04201D             0383*  BUF_DG_5_2E: equ 1838
04201D             0384*  BUF_DG_5_2F: equ 1839
04201D             0385*  BUF_DG_5_30: equ 1840
04201D             0386*  BUF_DG_5_31: equ 1841
04201D             0387*  BUF_DG_5_32: equ 1842
04201D             0388*  BUF_DG_5_33: equ 1843
04201D             0389*  BUF_DG_5_34: equ 1844
04201D             0390*  BUF_DG_5_35: equ 1845
04201D             0391*  BUF_DG_5_36: equ 1846
04201D             0392*  BUF_DG_5_37: equ 1847
04201D             0393*  BUF_DG_5_38: equ 1848
04201D             0394*  BUF_DG_5_39: equ 1849
04201D             0395*  BUF_DG_5_3A: equ 1850
04201D             0396*  BUF_DG_5_3B: equ 1851
04201D             0397*  BUF_DG_5_3C: equ 1852
04201D             0398*  BUF_DG_5_3D: equ 1853
04201D             0399*  BUF_DG_5_3E: equ 1854
04201D             0400*  BUF_DG_5_3F: equ 1855
04201D             0401*  BUF_DG_5_40: equ 1856
04201D             0402*  
04201D             0403*  tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
04201D 01 00 00 10 0404*  	dl 1, 16, 16, 256, fn_dg_0_00, 512
       00 00 10 00 
       00 00 01 00 
       F5 3B 04 00 
       02 00       
04202F 01 00 00 10 0405*  	dl 1, 16, 16, 256, fn_dg_0_01, 513
       00 00 10 00 
       00 00 01 00 
       0D 3C 04 01 
       02 00       
042041 01 00 00 10 0406*  	dl 1, 16, 16, 256, fn_dg_0_02, 514
       00 00 10 00 
       00 00 01 00 
       25 3C 04 02 
       02 00       
042053 01 00 00 10 0407*  	dl 1, 16, 16, 256, fn_dg_0_03, 515
       00 00 10 00 
       00 00 01 00 
       3D 3C 04 03 
       02 00       
042065 01 00 00 10 0408*  	dl 1, 16, 16, 256, fn_dg_0_04, 516
       00 00 10 00 
       00 00 01 00 
       55 3C 04 04 
       02 00       
042077 01 00 00 10 0409*  	dl 1, 16, 16, 256, fn_dg_0_05, 517
       00 00 10 00 
       00 00 01 00 
       6D 3C 04 05 
       02 00       
042089 01 00 00 10 0410*  	dl 1, 16, 16, 256, fn_dg_0_06, 518
       00 00 10 00 
       00 00 01 00 
       85 3C 04 06 
       02 00       
04209B 01 00 00 10 0411*  	dl 1, 16, 16, 256, fn_dg_0_07, 519
       00 00 10 00 
       00 00 01 00 
       9D 3C 04 07 
       02 00       
0420AD 01 00 00 10 0412*  	dl 1, 16, 16, 256, fn_dg_0_08, 520
       00 00 10 00 
       00 00 01 00 
       B5 3C 04 08 
       02 00       
0420BF 01 00 00 10 0413*  	dl 1, 16, 16, 256, fn_dg_0_09, 521
       00 00 10 00 
       00 00 01 00 
       CD 3C 04 09 
       02 00       
0420D1 01 00 00 10 0414*  	dl 1, 16, 16, 256, fn_dg_0_0A, 522
       00 00 10 00 
       00 00 01 00 
       E5 3C 04 0A 
       02 00       
0420E3 01 00 00 10 0415*  	dl 1, 16, 16, 256, fn_dg_0_0B, 523
       00 00 10 00 
       00 00 01 00 
       FD 3C 04 0B 
       02 00       
0420F5 01 00 00 10 0416*  	dl 1, 16, 16, 256, fn_dg_0_0C, 524
       00 00 10 00 
       00 00 01 00 
       15 3D 04 0C 
       02 00       
042107 01 00 00 10 0417*  	dl 1, 16, 16, 256, fn_dg_0_0D, 525
       00 00 10 00 
       00 00 01 00 
       2D 3D 04 0D 
       02 00       
042119 01 00 00 10 0418*  	dl 1, 16, 16, 256, fn_dg_0_0E, 526
       00 00 10 00 
       00 00 01 00 
       45 3D 04 0E 
       02 00       
04212B 01 00 00 10 0419*  	dl 1, 16, 16, 256, fn_dg_0_0F, 527
       00 00 10 00 
       00 00 01 00 
       5D 3D 04 0F 
       02 00       
04213D 01 00 00 10 0420*  	dl 1, 16, 16, 256, fn_dg_0_10, 528
       00 00 10 00 
       00 00 01 00 
       75 3D 04 10 
       02 00       
04214F 01 00 00 10 0421*  	dl 1, 16, 16, 256, fn_dg_0_11, 529
       00 00 10 00 
       00 00 01 00 
       8D 3D 04 11 
       02 00       
042161 01 00 00 10 0422*  	dl 1, 16, 16, 256, fn_dg_0_12, 530
       00 00 10 00 
       00 00 01 00 
       A5 3D 04 12 
       02 00       
042173 01 00 00 10 0423*  	dl 1, 16, 16, 256, fn_dg_0_13, 531
       00 00 10 00 
       00 00 01 00 
       BD 3D 04 13 
       02 00       
042185 01 00 00 10 0424*  	dl 1, 16, 16, 256, fn_dg_0_14, 532
       00 00 10 00 
       00 00 01 00 
       D5 3D 04 14 
       02 00       
042197 01 00 00 10 0425*  	dl 1, 16, 16, 256, fn_dg_0_15, 533
       00 00 10 00 
       00 00 01 00 
       ED 3D 04 15 
       02 00       
0421A9 01 00 00 10 0426*  	dl 1, 16, 16, 256, fn_dg_0_16, 534
       00 00 10 00 
       00 00 01 00 
       05 3E 04 16 
       02 00       
0421BB 01 00 00 10 0427*  	dl 1, 16, 16, 256, fn_dg_0_17, 535
       00 00 10 00 
       00 00 01 00 
       1D 3E 04 17 
       02 00       
0421CD 01 00 00 10 0428*  	dl 1, 16, 16, 256, fn_dg_0_18, 536
       00 00 10 00 
       00 00 01 00 
       35 3E 04 18 
       02 00       
0421DF 01 00 00 10 0429*  	dl 1, 16, 16, 256, fn_dg_0_19, 537
       00 00 10 00 
       00 00 01 00 
       4D 3E 04 19 
       02 00       
0421F1 01 00 00 10 0430*  	dl 1, 16, 16, 256, fn_dg_0_1A, 538
       00 00 10 00 
       00 00 01 00 
       65 3E 04 1A 
       02 00       
042203 01 00 00 10 0431*  	dl 1, 16, 16, 256, fn_dg_0_1B, 539
       00 00 10 00 
       00 00 01 00 
       7D 3E 04 1B 
       02 00       
042215 01 00 00 10 0432*  	dl 1, 16, 16, 256, fn_dg_0_1C, 540
       00 00 10 00 
       00 00 01 00 
       95 3E 04 1C 
       02 00       
042227 01 00 00 10 0433*  	dl 1, 16, 16, 256, fn_dg_0_1D, 541
       00 00 10 00 
       00 00 01 00 
       AD 3E 04 1D 
       02 00       
042239 01 00 00 10 0434*  	dl 1, 16, 16, 256, fn_dg_0_1E, 542
       00 00 10 00 
       00 00 01 00 
       C5 3E 04 1E 
       02 00       
04224B 01 00 00 10 0435*  	dl 1, 16, 16, 256, fn_dg_0_1F, 543
       00 00 10 00 
       00 00 01 00 
       DD 3E 04 1F 
       02 00       
04225D 01 00 00 10 0436*  	dl 1, 16, 16, 256, fn_dg_0_20, 544
       00 00 10 00 
       00 00 01 00 
       F5 3E 04 20 
       02 00       
04226F 01 00 00 10 0437*  	dl 1, 16, 16, 256, fn_dg_0_21, 545
       00 00 10 00 
       00 00 01 00 
       0D 3F 04 21 
       02 00       
042281 01 00 00 10 0438*  	dl 1, 16, 16, 256, fn_dg_0_22, 546
       00 00 10 00 
       00 00 01 00 
       25 3F 04 22 
       02 00       
042293 01 00 00 10 0439*  	dl 1, 16, 16, 256, fn_dg_0_23, 547
       00 00 10 00 
       00 00 01 00 
       3D 3F 04 23 
       02 00       
0422A5 01 00 00 10 0440*  	dl 1, 16, 16, 256, fn_dg_0_24, 548
       00 00 10 00 
       00 00 01 00 
       55 3F 04 24 
       02 00       
0422B7 01 00 00 10 0441*  	dl 1, 16, 16, 256, fn_dg_0_25, 549
       00 00 10 00 
       00 00 01 00 
       6D 3F 04 25 
       02 00       
0422C9 01 00 00 10 0442*  	dl 1, 16, 16, 256, fn_dg_0_26, 550
       00 00 10 00 
       00 00 01 00 
       85 3F 04 26 
       02 00       
0422DB 01 00 00 10 0443*  	dl 1, 16, 16, 256, fn_dg_0_27, 551
       00 00 10 00 
       00 00 01 00 
       9D 3F 04 27 
       02 00       
0422ED 01 00 00 10 0444*  	dl 1, 16, 16, 256, fn_dg_0_28, 552
       00 00 10 00 
       00 00 01 00 
       B5 3F 04 28 
       02 00       
0422FF 01 00 00 10 0445*  	dl 1, 16, 16, 256, fn_dg_0_29, 553
       00 00 10 00 
       00 00 01 00 
       CD 3F 04 29 
       02 00       
042311 01 00 00 10 0446*  	dl 1, 16, 16, 256, fn_dg_0_2A, 554
       00 00 10 00 
       00 00 01 00 
       E5 3F 04 2A 
       02 00       
042323 01 00 00 10 0447*  	dl 1, 16, 16, 256, fn_dg_0_2B, 555
       00 00 10 00 
       00 00 01 00 
       FD 3F 04 2B 
       02 00       
042335 01 00 00 10 0448*  	dl 1, 16, 16, 256, fn_dg_0_2C, 556
       00 00 10 00 
       00 00 01 00 
       15 40 04 2C 
       02 00       
042347 01 00 00 10 0449*  	dl 1, 16, 16, 256, fn_dg_0_2D, 557
       00 00 10 00 
       00 00 01 00 
       2D 40 04 2D 
       02 00       
042359 01 00 00 10 0450*  	dl 1, 16, 16, 256, fn_dg_0_2E, 558
       00 00 10 00 
       00 00 01 00 
       45 40 04 2E 
       02 00       
04236B 01 00 00 10 0451*  	dl 1, 16, 16, 256, fn_dg_0_2F, 559
       00 00 10 00 
       00 00 01 00 
       5D 40 04 2F 
       02 00       
04237D 01 00 00 10 0452*  	dl 1, 16, 16, 256, fn_dg_0_30, 560
       00 00 10 00 
       00 00 01 00 
       75 40 04 30 
       02 00       
04238F 01 00 00 10 0453*  	dl 1, 16, 16, 256, fn_dg_0_31, 561
       00 00 10 00 
       00 00 01 00 
       8D 40 04 31 
       02 00       
0423A1 01 00 00 10 0454*  	dl 1, 16, 16, 256, fn_dg_0_32, 562
       00 00 10 00 
       00 00 01 00 
       A5 40 04 32 
       02 00       
0423B3 01 00 00 10 0455*  	dl 1, 16, 16, 256, fn_dg_0_33, 563
       00 00 10 00 
       00 00 01 00 
       BD 40 04 33 
       02 00       
0423C5 01 00 00 10 0456*  	dl 1, 16, 16, 256, fn_dg_0_34, 564
       00 00 10 00 
       00 00 01 00 
       D5 40 04 34 
       02 00       
0423D7 01 00 00 10 0457*  	dl 1, 16, 16, 256, fn_dg_0_35, 565
       00 00 10 00 
       00 00 01 00 
       ED 40 04 35 
       02 00       
0423E9 01 00 00 10 0458*  	dl 1, 16, 16, 256, fn_dg_0_36, 566
       00 00 10 00 
       00 00 01 00 
       05 41 04 36 
       02 00       
0423FB 01 00 00 10 0459*  	dl 1, 16, 16, 256, fn_dg_0_37, 567
       00 00 10 00 
       00 00 01 00 
       1D 41 04 37 
       02 00       
04240D 01 00 00 10 0460*  	dl 1, 16, 16, 256, fn_dg_0_38, 568
       00 00 10 00 
       00 00 01 00 
       35 41 04 38 
       02 00       
04241F 01 00 00 10 0461*  	dl 1, 16, 16, 256, fn_dg_0_39, 569
       00 00 10 00 
       00 00 01 00 
       4D 41 04 39 
       02 00       
042431 01 00 00 10 0462*  	dl 1, 16, 16, 256, fn_dg_0_3A, 570
       00 00 10 00 
       00 00 01 00 
       65 41 04 3A 
       02 00       
042443 01 00 00 10 0463*  	dl 1, 16, 16, 256, fn_dg_0_3B, 571
       00 00 10 00 
       00 00 01 00 
       7D 41 04 3B 
       02 00       
042455 01 00 00 10 0464*  	dl 1, 16, 16, 256, fn_dg_0_3C, 572
       00 00 10 00 
       00 00 01 00 
       95 41 04 3C 
       02 00       
042467 01 00 00 10 0465*  	dl 1, 16, 16, 256, fn_dg_0_3D, 573
       00 00 10 00 
       00 00 01 00 
       AD 41 04 3D 
       02 00       
042479 01 00 00 10 0466*  	dl 1, 16, 16, 256, fn_dg_0_3E, 574
       00 00 10 00 
       00 00 01 00 
       C5 41 04 3E 
       02 00       
04248B 01 00 00 10 0467*  	dl 1, 16, 16, 256, fn_dg_0_3F, 575
       00 00 10 00 
       00 00 01 00 
       DD 41 04 3F 
       02 00       
04249D 01 00 00 10 0468*  	dl 1, 16, 16, 256, fn_dg_0_40, 576
       00 00 10 00 
       00 00 01 00 
       F5 41 04 40 
       02 00       
0424AF 01 00 00 10 0469*  	dl 1, 16, 16, 256, fn_dg_0_41, 577
       00 00 10 00 
       00 00 01 00 
       0D 42 04 41 
       02 00       
0424C1 01 00 00 10 0470*  	dl 1, 16, 16, 256, fn_dg_1_00, 768
       00 00 10 00 
       00 00 01 00 
       25 42 04 00 
       03 00       
0424D3 01 00 00 10 0471*  	dl 1, 16, 16, 256, fn_dg_1_01, 769
       00 00 10 00 
       00 00 01 00 
       3D 42 04 01 
       03 00       
0424E5 01 00 00 10 0472*  	dl 1, 16, 16, 256, fn_dg_1_02, 770
       00 00 10 00 
       00 00 01 00 
       55 42 04 02 
       03 00       
0424F7 01 00 00 10 0473*  	dl 1, 16, 16, 256, fn_dg_1_03, 771
       00 00 10 00 
       00 00 01 00 
       6D 42 04 03 
       03 00       
042509 01 00 00 10 0474*  	dl 1, 16, 16, 256, fn_dg_1_04, 772
       00 00 10 00 
       00 00 01 00 
       85 42 04 04 
       03 00       
04251B 01 00 00 10 0475*  	dl 1, 16, 16, 256, fn_dg_1_05, 773
       00 00 10 00 
       00 00 01 00 
       9D 42 04 05 
       03 00       
04252D 01 00 00 10 0476*  	dl 1, 16, 16, 256, fn_dg_1_06, 774
       00 00 10 00 
       00 00 01 00 
       B5 42 04 06 
       03 00       
04253F 01 00 00 10 0477*  	dl 1, 16, 16, 256, fn_dg_1_07, 775
       00 00 10 00 
       00 00 01 00 
       CD 42 04 07 
       03 00       
042551 01 00 00 10 0478*  	dl 1, 16, 16, 256, fn_dg_1_08, 776
       00 00 10 00 
       00 00 01 00 
       E5 42 04 08 
       03 00       
042563 01 00 00 10 0479*  	dl 1, 16, 16, 256, fn_dg_1_09, 777
       00 00 10 00 
       00 00 01 00 
       FD 42 04 09 
       03 00       
042575 01 00 00 10 0480*  	dl 1, 16, 16, 256, fn_dg_1_0A, 778
       00 00 10 00 
       00 00 01 00 
       15 43 04 0A 
       03 00       
042587 01 00 00 10 0481*  	dl 1, 16, 16, 256, fn_dg_1_0B, 779
       00 00 10 00 
       00 00 01 00 
       2D 43 04 0B 
       03 00       
042599 01 00 00 10 0482*  	dl 1, 16, 16, 256, fn_dg_1_0C, 780
       00 00 10 00 
       00 00 01 00 
       45 43 04 0C 
       03 00       
0425AB 01 00 00 10 0483*  	dl 1, 16, 16, 256, fn_dg_1_0D, 781
       00 00 10 00 
       00 00 01 00 
       5D 43 04 0D 
       03 00       
0425BD 01 00 00 10 0484*  	dl 1, 16, 16, 256, fn_dg_1_0E, 782
       00 00 10 00 
       00 00 01 00 
       75 43 04 0E 
       03 00       
0425CF 01 00 00 10 0485*  	dl 1, 16, 16, 256, fn_dg_1_0F, 783
       00 00 10 00 
       00 00 01 00 
       8D 43 04 0F 
       03 00       
0425E1 01 00 00 10 0486*  	dl 1, 16, 16, 256, fn_dg_1_10, 784
       00 00 10 00 
       00 00 01 00 
       A5 43 04 10 
       03 00       
0425F3 01 00 00 10 0487*  	dl 1, 16, 16, 256, fn_dg_1_11, 785
       00 00 10 00 
       00 00 01 00 
       BD 43 04 11 
       03 00       
042605 01 00 00 10 0488*  	dl 1, 16, 16, 256, fn_dg_1_12, 786
       00 00 10 00 
       00 00 01 00 
       D5 43 04 12 
       03 00       
042617 01 00 00 10 0489*  	dl 1, 16, 16, 256, fn_dg_1_13, 787
       00 00 10 00 
       00 00 01 00 
       ED 43 04 13 
       03 00       
042629 01 00 00 10 0490*  	dl 1, 16, 16, 256, fn_dg_1_14, 788
       00 00 10 00 
       00 00 01 00 
       05 44 04 14 
       03 00       
04263B 01 00 00 10 0491*  	dl 1, 16, 16, 256, fn_dg_1_15, 789
       00 00 10 00 
       00 00 01 00 
       1D 44 04 15 
       03 00       
04264D 01 00 00 10 0492*  	dl 1, 16, 16, 256, fn_dg_1_16, 790
       00 00 10 00 
       00 00 01 00 
       35 44 04 16 
       03 00       
04265F 01 00 00 10 0493*  	dl 1, 16, 16, 256, fn_dg_1_17, 791
       00 00 10 00 
       00 00 01 00 
       4D 44 04 17 
       03 00       
042671 01 00 00 10 0494*  	dl 1, 16, 16, 256, fn_dg_1_18, 792
       00 00 10 00 
       00 00 01 00 
       65 44 04 18 
       03 00       
042683 01 00 00 10 0495*  	dl 1, 16, 16, 256, fn_dg_1_19, 793
       00 00 10 00 
       00 00 01 00 
       7D 44 04 19 
       03 00       
042695 01 00 00 10 0496*  	dl 1, 16, 16, 256, fn_dg_1_1A, 794
       00 00 10 00 
       00 00 01 00 
       95 44 04 1A 
       03 00       
0426A7 01 00 00 10 0497*  	dl 1, 16, 16, 256, fn_dg_1_1B, 795
       00 00 10 00 
       00 00 01 00 
       AD 44 04 1B 
       03 00       
0426B9 01 00 00 10 0498*  	dl 1, 16, 16, 256, fn_dg_1_1C, 796
       00 00 10 00 
       00 00 01 00 
       C5 44 04 1C 
       03 00       
0426CB 01 00 00 10 0499*  	dl 1, 16, 16, 256, fn_dg_1_1D, 797
       00 00 10 00 
       00 00 01 00 
       DD 44 04 1D 
       03 00       
0426DD 01 00 00 10 0500*  	dl 1, 16, 16, 256, fn_dg_1_1E, 798
       00 00 10 00 
       00 00 01 00 
       F5 44 04 1E 
       03 00       
0426EF 01 00 00 10 0501*  	dl 1, 16, 16, 256, fn_dg_1_1F, 799
       00 00 10 00 
       00 00 01 00 
       0D 45 04 1F 
       03 00       
042701 01 00 00 10 0502*  	dl 1, 16, 16, 256, fn_dg_1_20, 800
       00 00 10 00 
       00 00 01 00 
       25 45 04 20 
       03 00       
042713 01 00 00 10 0503*  	dl 1, 16, 16, 256, fn_dg_1_21, 801
       00 00 10 00 
       00 00 01 00 
       3D 45 04 21 
       03 00       
042725 01 00 00 10 0504*  	dl 1, 16, 16, 256, fn_dg_1_22, 802
       00 00 10 00 
       00 00 01 00 
       55 45 04 22 
       03 00       
042737 01 00 00 10 0505*  	dl 1, 16, 16, 256, fn_dg_1_23, 803
       00 00 10 00 
       00 00 01 00 
       6D 45 04 23 
       03 00       
042749 01 00 00 10 0506*  	dl 1, 16, 16, 256, fn_dg_1_24, 804
       00 00 10 00 
       00 00 01 00 
       85 45 04 24 
       03 00       
04275B 01 00 00 10 0507*  	dl 1, 16, 16, 256, fn_dg_1_25, 805
       00 00 10 00 
       00 00 01 00 
       9D 45 04 25 
       03 00       
04276D 01 00 00 10 0508*  	dl 1, 16, 16, 256, fn_dg_1_26, 806
       00 00 10 00 
       00 00 01 00 
       B5 45 04 26 
       03 00       
04277F 01 00 00 10 0509*  	dl 1, 16, 16, 256, fn_dg_1_27, 807
       00 00 10 00 
       00 00 01 00 
       CD 45 04 27 
       03 00       
042791 01 00 00 10 0510*  	dl 1, 16, 16, 256, fn_dg_1_28, 808
       00 00 10 00 
       00 00 01 00 
       E5 45 04 28 
       03 00       
0427A3 01 00 00 10 0511*  	dl 1, 16, 16, 256, fn_dg_1_29, 809
       00 00 10 00 
       00 00 01 00 
       FD 45 04 29 
       03 00       
0427B5 01 00 00 10 0512*  	dl 1, 16, 16, 256, fn_dg_1_2A, 810
       00 00 10 00 
       00 00 01 00 
       15 46 04 2A 
       03 00       
0427C7 01 00 00 10 0513*  	dl 1, 16, 16, 256, fn_dg_1_2B, 811
       00 00 10 00 
       00 00 01 00 
       2D 46 04 2B 
       03 00       
0427D9 01 00 00 10 0514*  	dl 1, 16, 16, 256, fn_dg_1_2C, 812
       00 00 10 00 
       00 00 01 00 
       45 46 04 2C 
       03 00       
0427EB 01 00 00 10 0515*  	dl 1, 16, 16, 256, fn_dg_1_2D, 813
       00 00 10 00 
       00 00 01 00 
       5D 46 04 2D 
       03 00       
0427FD 01 00 00 10 0516*  	dl 1, 16, 16, 256, fn_dg_1_2E, 814
       00 00 10 00 
       00 00 01 00 
       75 46 04 2E 
       03 00       
04280F 01 00 00 10 0517*  	dl 1, 16, 16, 256, fn_dg_1_2F, 815
       00 00 10 00 
       00 00 01 00 
       8D 46 04 2F 
       03 00       
042821 01 00 00 10 0518*  	dl 1, 16, 16, 256, fn_dg_1_30, 816
       00 00 10 00 
       00 00 01 00 
       A5 46 04 30 
       03 00       
042833 01 00 00 10 0519*  	dl 1, 16, 16, 256, fn_dg_1_31, 817
       00 00 10 00 
       00 00 01 00 
       BD 46 04 31 
       03 00       
042845 01 00 00 10 0520*  	dl 1, 16, 16, 256, fn_dg_1_32, 818
       00 00 10 00 
       00 00 01 00 
       D5 46 04 32 
       03 00       
042857 01 00 00 10 0521*  	dl 1, 16, 16, 256, fn_dg_1_33, 819
       00 00 10 00 
       00 00 01 00 
       ED 46 04 33 
       03 00       
042869 01 00 00 10 0522*  	dl 1, 16, 16, 256, fn_dg_1_34, 820
       00 00 10 00 
       00 00 01 00 
       05 47 04 34 
       03 00       
04287B 01 00 00 10 0523*  	dl 1, 16, 16, 256, fn_dg_1_35, 821
       00 00 10 00 
       00 00 01 00 
       1D 47 04 35 
       03 00       
04288D 01 00 00 10 0524*  	dl 1, 16, 16, 256, fn_dg_1_36, 822
       00 00 10 00 
       00 00 01 00 
       35 47 04 36 
       03 00       
04289F 01 00 00 10 0525*  	dl 1, 16, 16, 256, fn_dg_1_37, 823
       00 00 10 00 
       00 00 01 00 
       4D 47 04 37 
       03 00       
0428B1 01 00 00 10 0526*  	dl 1, 16, 16, 256, fn_dg_1_38, 824
       00 00 10 00 
       00 00 01 00 
       65 47 04 38 
       03 00       
0428C3 01 00 00 10 0527*  	dl 1, 16, 16, 256, fn_dg_1_39, 825
       00 00 10 00 
       00 00 01 00 
       7D 47 04 39 
       03 00       
0428D5 01 00 00 10 0528*  	dl 1, 16, 16, 256, fn_dg_1_3A, 826
       00 00 10 00 
       00 00 01 00 
       95 47 04 3A 
       03 00       
0428E7 01 00 00 10 0529*  	dl 1, 16, 16, 256, fn_dg_1_3B, 827
       00 00 10 00 
       00 00 01 00 
       AD 47 04 3B 
       03 00       
0428F9 01 00 00 10 0530*  	dl 1, 16, 16, 256, fn_dg_1_3C, 828
       00 00 10 00 
       00 00 01 00 
       C5 47 04 3C 
       03 00       
04290B 01 00 00 10 0531*  	dl 1, 16, 16, 256, fn_dg_1_3D, 829
       00 00 10 00 
       00 00 01 00 
       DD 47 04 3D 
       03 00       
04291D 01 00 00 10 0532*  	dl 1, 16, 16, 256, fn_dg_2_00, 1024
       00 00 10 00 
       00 00 01 00 
       F5 47 04 00 
       04 00       
04292F 01 00 00 10 0533*  	dl 1, 16, 16, 256, fn_dg_2_01, 1025
       00 00 10 00 
       00 00 01 00 
       0D 48 04 01 
       04 00       
042941 01 00 00 10 0534*  	dl 1, 16, 16, 256, fn_dg_2_02, 1026
       00 00 10 00 
       00 00 01 00 
       25 48 04 02 
       04 00       
042953 01 00 00 10 0535*  	dl 1, 16, 16, 256, fn_dg_2_03, 1027
       00 00 10 00 
       00 00 01 00 
       3D 48 04 03 
       04 00       
042965 01 00 00 10 0536*  	dl 1, 16, 16, 256, fn_dg_2_04, 1028
       00 00 10 00 
       00 00 01 00 
       55 48 04 04 
       04 00       
042977 01 00 00 10 0537*  	dl 1, 16, 16, 256, fn_dg_2_05, 1029
       00 00 10 00 
       00 00 01 00 
       6D 48 04 05 
       04 00       
042989 01 00 00 10 0538*  	dl 1, 16, 16, 256, fn_dg_2_06, 1030
       00 00 10 00 
       00 00 01 00 
       85 48 04 06 
       04 00       
04299B 01 00 00 10 0539*  	dl 1, 16, 16, 256, fn_dg_2_07, 1031
       00 00 10 00 
       00 00 01 00 
       9D 48 04 07 
       04 00       
0429AD 01 00 00 10 0540*  	dl 1, 16, 16, 256, fn_dg_2_08, 1032
       00 00 10 00 
       00 00 01 00 
       B5 48 04 08 
       04 00       
0429BF 01 00 00 10 0541*  	dl 1, 16, 16, 256, fn_dg_2_09, 1033
       00 00 10 00 
       00 00 01 00 
       CD 48 04 09 
       04 00       
0429D1 01 00 00 10 0542*  	dl 1, 16, 16, 256, fn_dg_2_0A, 1034
       00 00 10 00 
       00 00 01 00 
       E5 48 04 0A 
       04 00       
0429E3 01 00 00 10 0543*  	dl 1, 16, 16, 256, fn_dg_2_0B, 1035
       00 00 10 00 
       00 00 01 00 
       FD 48 04 0B 
       04 00       
0429F5 01 00 00 10 0544*  	dl 1, 16, 16, 256, fn_dg_2_0C, 1036
       00 00 10 00 
       00 00 01 00 
       15 49 04 0C 
       04 00       
042A07 01 00 00 10 0545*  	dl 1, 16, 16, 256, fn_dg_2_0D, 1037
       00 00 10 00 
       00 00 01 00 
       2D 49 04 0D 
       04 00       
042A19 01 00 00 10 0546*  	dl 1, 16, 16, 256, fn_dg_2_0E, 1038
       00 00 10 00 
       00 00 01 00 
       45 49 04 0E 
       04 00       
042A2B 01 00 00 10 0547*  	dl 1, 16, 16, 256, fn_dg_2_0F, 1039
       00 00 10 00 
       00 00 01 00 
       5D 49 04 0F 
       04 00       
042A3D 01 00 00 10 0548*  	dl 1, 16, 16, 256, fn_dg_2_10, 1040
       00 00 10 00 
       00 00 01 00 
       75 49 04 10 
       04 00       
042A4F 01 00 00 10 0549*  	dl 1, 16, 16, 256, fn_dg_2_11, 1041
       00 00 10 00 
       00 00 01 00 
       8D 49 04 11 
       04 00       
042A61 01 00 00 10 0550*  	dl 1, 16, 16, 256, fn_dg_2_12, 1042
       00 00 10 00 
       00 00 01 00 
       A5 49 04 12 
       04 00       
042A73 01 00 00 10 0551*  	dl 1, 16, 16, 256, fn_dg_2_13, 1043
       00 00 10 00 
       00 00 01 00 
       BD 49 04 13 
       04 00       
042A85 01 00 00 10 0552*  	dl 1, 16, 16, 256, fn_dg_2_14, 1044
       00 00 10 00 
       00 00 01 00 
       D5 49 04 14 
       04 00       
042A97 01 00 00 10 0553*  	dl 1, 16, 16, 256, fn_dg_2_15, 1045
       00 00 10 00 
       00 00 01 00 
       ED 49 04 15 
       04 00       
042AA9 01 00 00 10 0554*  	dl 1, 16, 16, 256, fn_dg_2_16, 1046
       00 00 10 00 
       00 00 01 00 
       05 4A 04 16 
       04 00       
042ABB 01 00 00 10 0555*  	dl 1, 16, 16, 256, fn_dg_2_17, 1047
       00 00 10 00 
       00 00 01 00 
       1D 4A 04 17 
       04 00       
042ACD 01 00 00 10 0556*  	dl 1, 16, 16, 256, fn_dg_2_18, 1048
       00 00 10 00 
       00 00 01 00 
       35 4A 04 18 
       04 00       
042ADF 01 00 00 10 0557*  	dl 1, 16, 16, 256, fn_dg_2_19, 1049
       00 00 10 00 
       00 00 01 00 
       4D 4A 04 19 
       04 00       
042AF1 01 00 00 10 0558*  	dl 1, 16, 16, 256, fn_dg_2_1A, 1050
       00 00 10 00 
       00 00 01 00 
       65 4A 04 1A 
       04 00       
042B03 01 00 00 10 0559*  	dl 1, 16, 16, 256, fn_dg_2_1B, 1051
       00 00 10 00 
       00 00 01 00 
       7D 4A 04 1B 
       04 00       
042B15 01 00 00 10 0560*  	dl 1, 16, 16, 256, fn_dg_2_1C, 1052
       00 00 10 00 
       00 00 01 00 
       95 4A 04 1C 
       04 00       
042B27 01 00 00 10 0561*  	dl 1, 16, 16, 256, fn_dg_2_1D, 1053
       00 00 10 00 
       00 00 01 00 
       AD 4A 04 1D 
       04 00       
042B39 01 00 00 10 0562*  	dl 1, 16, 16, 256, fn_dg_2_1E, 1054
       00 00 10 00 
       00 00 01 00 
       C5 4A 04 1E 
       04 00       
042B4B 01 00 00 10 0563*  	dl 1, 16, 16, 256, fn_dg_2_1F, 1055
       00 00 10 00 
       00 00 01 00 
       DD 4A 04 1F 
       04 00       
042B5D 01 00 00 10 0564*  	dl 1, 16, 16, 256, fn_dg_2_20, 1056
       00 00 10 00 
       00 00 01 00 
       F5 4A 04 20 
       04 00       
042B6F 01 00 00 10 0565*  	dl 1, 16, 16, 256, fn_dg_2_21, 1057
       00 00 10 00 
       00 00 01 00 
       0D 4B 04 21 
       04 00       
042B81 01 00 00 10 0566*  	dl 1, 16, 16, 256, fn_dg_2_22, 1058
       00 00 10 00 
       00 00 01 00 
       25 4B 04 22 
       04 00       
042B93 01 00 00 10 0567*  	dl 1, 16, 16, 256, fn_dg_2_23, 1059
       00 00 10 00 
       00 00 01 00 
       3D 4B 04 23 
       04 00       
042BA5 01 00 00 10 0568*  	dl 1, 16, 16, 256, fn_dg_2_24, 1060
       00 00 10 00 
       00 00 01 00 
       55 4B 04 24 
       04 00       
042BB7 01 00 00 10 0569*  	dl 1, 16, 16, 256, fn_dg_2_25, 1061
       00 00 10 00 
       00 00 01 00 
       6D 4B 04 25 
       04 00       
042BC9 01 00 00 10 0570*  	dl 1, 16, 16, 256, fn_dg_2_26, 1062
       00 00 10 00 
       00 00 01 00 
       85 4B 04 26 
       04 00       
042BDB 01 00 00 10 0571*  	dl 1, 16, 16, 256, fn_dg_2_27, 1063
       00 00 10 00 
       00 00 01 00 
       9D 4B 04 27 
       04 00       
042BED 01 00 00 10 0572*  	dl 1, 16, 16, 256, fn_dg_2_28, 1064
       00 00 10 00 
       00 00 01 00 
       B5 4B 04 28 
       04 00       
042BFF 01 00 00 10 0573*  	dl 1, 16, 16, 256, fn_dg_2_29, 1065
       00 00 10 00 
       00 00 01 00 
       CD 4B 04 29 
       04 00       
042C11 01 00 00 10 0574*  	dl 1, 16, 16, 256, fn_dg_2_2A, 1066
       00 00 10 00 
       00 00 01 00 
       E5 4B 04 2A 
       04 00       
042C23 01 00 00 10 0575*  	dl 1, 16, 16, 256, fn_dg_2_2B, 1067
       00 00 10 00 
       00 00 01 00 
       FD 4B 04 2B 
       04 00       
042C35 01 00 00 10 0576*  	dl 1, 16, 16, 256, fn_dg_2_2C, 1068
       00 00 10 00 
       00 00 01 00 
       15 4C 04 2C 
       04 00       
042C47 01 00 00 10 0577*  	dl 1, 16, 16, 256, fn_dg_2_2D, 1069
       00 00 10 00 
       00 00 01 00 
       2D 4C 04 2D 
       04 00       
042C59 01 00 00 10 0578*  	dl 1, 16, 16, 256, fn_dg_2_2E, 1070
       00 00 10 00 
       00 00 01 00 
       45 4C 04 2E 
       04 00       
042C6B 01 00 00 10 0579*  	dl 1, 16, 16, 256, fn_dg_2_2F, 1071
       00 00 10 00 
       00 00 01 00 
       5D 4C 04 2F 
       04 00       
042C7D 01 00 00 10 0580*  	dl 1, 16, 16, 256, fn_dg_2_30, 1072
       00 00 10 00 
       00 00 01 00 
       75 4C 04 30 
       04 00       
042C8F 01 00 00 10 0581*  	dl 1, 16, 16, 256, fn_dg_2_31, 1073
       00 00 10 00 
       00 00 01 00 
       8D 4C 04 31 
       04 00       
042CA1 01 00 00 10 0582*  	dl 1, 16, 16, 256, fn_dg_2_32, 1074
       00 00 10 00 
       00 00 01 00 
       A5 4C 04 32 
       04 00       
042CB3 01 00 00 10 0583*  	dl 1, 16, 16, 256, fn_dg_2_33, 1075
       00 00 10 00 
       00 00 01 00 
       BD 4C 04 33 
       04 00       
042CC5 01 00 00 10 0584*  	dl 1, 16, 16, 256, fn_dg_2_34, 1076
       00 00 10 00 
       00 00 01 00 
       D5 4C 04 34 
       04 00       
042CD7 01 00 00 10 0585*  	dl 1, 16, 16, 256, fn_dg_2_35, 1077
       00 00 10 00 
       00 00 01 00 
       ED 4C 04 35 
       04 00       
042CE9 01 00 00 10 0586*  	dl 1, 16, 16, 256, fn_dg_2_36, 1078
       00 00 10 00 
       00 00 01 00 
       05 4D 04 36 
       04 00       
042CFB 01 00 00 10 0587*  	dl 1, 16, 16, 256, fn_dg_2_37, 1079
       00 00 10 00 
       00 00 01 00 
       1D 4D 04 37 
       04 00       
042D0D 01 00 00 10 0588*  	dl 1, 16, 16, 256, fn_dg_2_38, 1080
       00 00 10 00 
       00 00 01 00 
       35 4D 04 38 
       04 00       
042D1F 01 00 00 10 0589*  	dl 1, 16, 16, 256, fn_dg_2_39, 1081
       00 00 10 00 
       00 00 01 00 
       4D 4D 04 39 
       04 00       
042D31 01 00 00 10 0590*  	dl 1, 16, 16, 256, fn_dg_2_3A, 1082
       00 00 10 00 
       00 00 01 00 
       65 4D 04 3A 
       04 00       
042D43 01 00 00 10 0591*  	dl 1, 16, 16, 256, fn_dg_2_3B, 1083
       00 00 10 00 
       00 00 01 00 
       7D 4D 04 3B 
       04 00       
042D55 01 00 00 10 0592*  	dl 1, 16, 16, 256, fn_dg_2_3C, 1084
       00 00 10 00 
       00 00 01 00 
       95 4D 04 3C 
       04 00       
042D67 01 00 00 10 0593*  	dl 1, 16, 16, 256, fn_dg_2_3D, 1085
       00 00 10 00 
       00 00 01 00 
       AD 4D 04 3D 
       04 00       
042D79 01 00 00 10 0594*  	dl 1, 16, 16, 256, fn_dg_2_3E, 1086
       00 00 10 00 
       00 00 01 00 
       C5 4D 04 3E 
       04 00       
042D8B 01 00 00 10 0595*  	dl 1, 16, 16, 256, fn_dg_2_3F, 1087
       00 00 10 00 
       00 00 01 00 
       DD 4D 04 3F 
       04 00       
042D9D 01 00 00 10 0596*  	dl 1, 16, 16, 256, fn_dg_2_40, 1088
       00 00 10 00 
       00 00 01 00 
       F5 4D 04 40 
       04 00       
042DAF 01 00 00 10 0597*  	dl 1, 16, 16, 256, fn_dg_2_41, 1089
       00 00 10 00 
       00 00 01 00 
       0D 4E 04 41 
       04 00       
042DC1 01 00 00 10 0598*  	dl 1, 16, 16, 256, fn_dg_2_42, 1090
       00 00 10 00 
       00 00 01 00 
       25 4E 04 42 
       04 00       
042DD3 01 00 00 10 0599*  	dl 1, 16, 16, 256, fn_dg_2_43, 1091
       00 00 10 00 
       00 00 01 00 
       3D 4E 04 43 
       04 00       
042DE5 01 00 00 10 0600*  	dl 1, 16, 16, 256, fn_dg_2_44, 1092
       00 00 10 00 
       00 00 01 00 
       55 4E 04 44 
       04 00       
042DF7 01 00 00 10 0601*  	dl 1, 16, 16, 256, fn_dg_2_45, 1093
       00 00 10 00 
       00 00 01 00 
       6D 4E 04 45 
       04 00       
042E09 01 00 00 10 0602*  	dl 1, 16, 16, 256, fn_dg_2_46, 1094
       00 00 10 00 
       00 00 01 00 
       85 4E 04 46 
       04 00       
042E1B 01 00 00 10 0603*  	dl 1, 16, 16, 256, fn_dg_2_47, 1095
       00 00 10 00 
       00 00 01 00 
       9D 4E 04 47 
       04 00       
042E2D 01 00 00 10 0604*  	dl 1, 16, 16, 256, fn_dg_2_48, 1096
       00 00 10 00 
       00 00 01 00 
       B5 4E 04 48 
       04 00       
042E3F 01 00 00 10 0605*  	dl 1, 16, 16, 256, fn_dg_2_49, 1097
       00 00 10 00 
       00 00 01 00 
       CD 4E 04 49 
       04 00       
042E51 01 00 00 10 0606*  	dl 1, 16, 16, 256, fn_dg_2_4A, 1098
       00 00 10 00 
       00 00 01 00 
       E5 4E 04 4A 
       04 00       
042E63 01 00 00 10 0607*  	dl 1, 16, 16, 256, fn_dg_2_4B, 1099
       00 00 10 00 
       00 00 01 00 
       FD 4E 04 4B 
       04 00       
042E75 01 00 00 10 0608*  	dl 1, 16, 16, 256, fn_dg_2_4C, 1100
       00 00 10 00 
       00 00 01 00 
       15 4F 04 4C 
       04 00       
042E87 01 00 00 10 0609*  	dl 1, 16, 16, 256, fn_dg_2_4D, 1101
       00 00 10 00 
       00 00 01 00 
       2D 4F 04 4D 
       04 00       
042E99 01 00 00 10 0610*  	dl 1, 16, 16, 256, fn_dg_2_4E, 1102
       00 00 10 00 
       00 00 01 00 
       45 4F 04 4E 
       04 00       
042EAB 01 00 00 10 0611*  	dl 1, 16, 16, 256, fn_dg_2_4F, 1103
       00 00 10 00 
       00 00 01 00 
       5D 4F 04 4F 
       04 00       
042EBD 01 00 00 10 0612*  	dl 1, 16, 16, 256, fn_dg_2_50, 1104
       00 00 10 00 
       00 00 01 00 
       75 4F 04 50 
       04 00       
042ECF 01 00 00 10 0613*  	dl 1, 16, 16, 256, fn_dg_2_51, 1105
       00 00 10 00 
       00 00 01 00 
       8D 4F 04 51 
       04 00       
042EE1 01 00 00 10 0614*  	dl 1, 16, 16, 256, fn_dg_2_52, 1106
       00 00 10 00 
       00 00 01 00 
       A5 4F 04 52 
       04 00       
042EF3 01 00 00 10 0615*  	dl 1, 16, 16, 256, fn_dg_2_53, 1107
       00 00 10 00 
       00 00 01 00 
       BD 4F 04 53 
       04 00       
042F05 01 00 00 10 0616*  	dl 1, 16, 16, 256, fn_dg_2_54, 1108
       00 00 10 00 
       00 00 01 00 
       D5 4F 04 54 
       04 00       
042F17 01 00 00 10 0617*  	dl 1, 16, 16, 256, fn_dg_2_55, 1109
       00 00 10 00 
       00 00 01 00 
       ED 4F 04 55 
       04 00       
042F29 01 00 00 10 0618*  	dl 1, 16, 16, 256, fn_dg_2_56, 1110
       00 00 10 00 
       00 00 01 00 
       05 50 04 56 
       04 00       
042F3B 01 00 00 10 0619*  	dl 1, 16, 16, 256, fn_dg_2_57, 1111
       00 00 10 00 
       00 00 01 00 
       1D 50 04 57 
       04 00       
042F4D 01 00 00 10 0620*  	dl 1, 16, 16, 256, fn_dg_3_00, 1280
       00 00 10 00 
       00 00 01 00 
       35 50 04 00 
       05 00       
042F5F 01 00 00 10 0621*  	dl 1, 16, 16, 256, fn_dg_3_01, 1281
       00 00 10 00 
       00 00 01 00 
       4D 50 04 01 
       05 00       
042F71 01 00 00 10 0622*  	dl 1, 16, 16, 256, fn_dg_3_02, 1282
       00 00 10 00 
       00 00 01 00 
       65 50 04 02 
       05 00       
042F83 01 00 00 10 0623*  	dl 1, 16, 16, 256, fn_dg_3_03, 1283
       00 00 10 00 
       00 00 01 00 
       7D 50 04 03 
       05 00       
042F95 01 00 00 10 0624*  	dl 1, 16, 16, 256, fn_dg_3_04, 1284
       00 00 10 00 
       00 00 01 00 
       95 50 04 04 
       05 00       
042FA7 01 00 00 10 0625*  	dl 1, 16, 16, 256, fn_dg_3_05, 1285
       00 00 10 00 
       00 00 01 00 
       AD 50 04 05 
       05 00       
042FB9 01 00 00 10 0626*  	dl 1, 16, 16, 256, fn_dg_3_06, 1286
       00 00 10 00 
       00 00 01 00 
       C5 50 04 06 
       05 00       
042FCB 01 00 00 10 0627*  	dl 1, 16, 16, 256, fn_dg_3_07, 1287
       00 00 10 00 
       00 00 01 00 
       DD 50 04 07 
       05 00       
042FDD 01 00 00 10 0628*  	dl 1, 16, 16, 256, fn_dg_3_08, 1288
       00 00 10 00 
       00 00 01 00 
       F5 50 04 08 
       05 00       
042FEF 01 00 00 10 0629*  	dl 1, 16, 16, 256, fn_dg_3_09, 1289
       00 00 10 00 
       00 00 01 00 
       0D 51 04 09 
       05 00       
043001 01 00 00 10 0630*  	dl 1, 16, 16, 256, fn_dg_3_0A, 1290
       00 00 10 00 
       00 00 01 00 
       25 51 04 0A 
       05 00       
043013 01 00 00 10 0631*  	dl 1, 16, 16, 256, fn_dg_3_0B, 1291
       00 00 10 00 
       00 00 01 00 
       3D 51 04 0B 
       05 00       
043025 01 00 00 10 0632*  	dl 1, 16, 16, 256, fn_dg_3_0C, 1292
       00 00 10 00 
       00 00 01 00 
       55 51 04 0C 
       05 00       
043037 01 00 00 10 0633*  	dl 1, 16, 16, 256, fn_dg_3_0D, 1293
       00 00 10 00 
       00 00 01 00 
       6D 51 04 0D 
       05 00       
043049 01 00 00 10 0634*  	dl 1, 16, 16, 256, fn_dg_3_0E, 1294
       00 00 10 00 
       00 00 01 00 
       85 51 04 0E 
       05 00       
04305B 01 00 00 10 0635*  	dl 1, 16, 16, 256, fn_dg_3_0F, 1295
       00 00 10 00 
       00 00 01 00 
       9D 51 04 0F 
       05 00       
04306D 01 00 00 10 0636*  	dl 1, 16, 16, 256, fn_dg_3_10, 1296
       00 00 10 00 
       00 00 01 00 
       B5 51 04 10 
       05 00       
04307F 01 00 00 10 0637*  	dl 1, 16, 16, 256, fn_dg_3_11, 1297
       00 00 10 00 
       00 00 01 00 
       CD 51 04 11 
       05 00       
043091 01 00 00 10 0638*  	dl 1, 16, 16, 256, fn_dg_3_12, 1298
       00 00 10 00 
       00 00 01 00 
       E5 51 04 12 
       05 00       
0430A3 01 00 00 10 0639*  	dl 1, 16, 16, 256, fn_dg_3_13, 1299
       00 00 10 00 
       00 00 01 00 
       FD 51 04 13 
       05 00       
0430B5 01 00 00 10 0640*  	dl 1, 16, 16, 256, fn_dg_3_14, 1300
       00 00 10 00 
       00 00 01 00 
       15 52 04 14 
       05 00       
0430C7 01 00 00 10 0641*  	dl 1, 16, 16, 256, fn_dg_3_15, 1301
       00 00 10 00 
       00 00 01 00 
       2D 52 04 15 
       05 00       
0430D9 01 00 00 10 0642*  	dl 1, 16, 16, 256, fn_dg_3_16, 1302
       00 00 10 00 
       00 00 01 00 
       45 52 04 16 
       05 00       
0430EB 01 00 00 10 0643*  	dl 1, 16, 16, 256, fn_dg_3_17, 1303
       00 00 10 00 
       00 00 01 00 
       5D 52 04 17 
       05 00       
0430FD 01 00 00 10 0644*  	dl 1, 16, 16, 256, fn_dg_3_18, 1304
       00 00 10 00 
       00 00 01 00 
       75 52 04 18 
       05 00       
04310F 01 00 00 10 0645*  	dl 1, 16, 16, 256, fn_dg_3_19, 1305
       00 00 10 00 
       00 00 01 00 
       8D 52 04 19 
       05 00       
043121 01 00 00 10 0646*  	dl 1, 16, 16, 256, fn_dg_3_1A, 1306
       00 00 10 00 
       00 00 01 00 
       A5 52 04 1A 
       05 00       
043133 01 00 00 10 0647*  	dl 1, 16, 16, 256, fn_dg_3_1B, 1307
       00 00 10 00 
       00 00 01 00 
       BD 52 04 1B 
       05 00       
043145 01 00 00 10 0648*  	dl 1, 16, 16, 256, fn_dg_3_1C, 1308
       00 00 10 00 
       00 00 01 00 
       D5 52 04 1C 
       05 00       
043157 01 00 00 10 0649*  	dl 1, 16, 16, 256, fn_dg_3_1D, 1309
       00 00 10 00 
       00 00 01 00 
       ED 52 04 1D 
       05 00       
043169 01 00 00 10 0650*  	dl 1, 16, 16, 256, fn_dg_3_1E, 1310
       00 00 10 00 
       00 00 01 00 
       05 53 04 1E 
       05 00       
04317B 01 00 00 10 0651*  	dl 1, 16, 16, 256, fn_dg_3_1F, 1311
       00 00 10 00 
       00 00 01 00 
       1D 53 04 1F 
       05 00       
04318D 01 00 00 10 0652*  	dl 1, 16, 16, 256, fn_dg_3_20, 1312
       00 00 10 00 
       00 00 01 00 
       35 53 04 20 
       05 00       
04319F 01 00 00 10 0653*  	dl 1, 16, 16, 256, fn_dg_3_21, 1313
       00 00 10 00 
       00 00 01 00 
       4D 53 04 21 
       05 00       
0431B1 01 00 00 10 0654*  	dl 1, 16, 16, 256, fn_dg_3_22, 1314
       00 00 10 00 
       00 00 01 00 
       65 53 04 22 
       05 00       
0431C3 01 00 00 10 0655*  	dl 1, 16, 16, 256, fn_dg_3_23, 1315
       00 00 10 00 
       00 00 01 00 
       7D 53 04 23 
       05 00       
0431D5 01 00 00 10 0656*  	dl 1, 16, 16, 256, fn_dg_3_24, 1316
       00 00 10 00 
       00 00 01 00 
       95 53 04 24 
       05 00       
0431E7 01 00 00 10 0657*  	dl 1, 16, 16, 256, fn_dg_3_25, 1317
       00 00 10 00 
       00 00 01 00 
       AD 53 04 25 
       05 00       
0431F9 01 00 00 10 0658*  	dl 1, 16, 16, 256, fn_dg_3_26, 1318
       00 00 10 00 
       00 00 01 00 
       C5 53 04 26 
       05 00       
04320B 01 00 00 10 0659*  	dl 1, 16, 16, 256, fn_dg_3_27, 1319
       00 00 10 00 
       00 00 01 00 
       DD 53 04 27 
       05 00       
04321D 01 00 00 10 0660*  	dl 1, 16, 16, 256, fn_dg_3_28, 1320
       00 00 10 00 
       00 00 01 00 
       F5 53 04 28 
       05 00       
04322F 01 00 00 10 0661*  	dl 1, 16, 16, 256, fn_dg_3_29, 1321
       00 00 10 00 
       00 00 01 00 
       0D 54 04 29 
       05 00       
043241 01 00 00 10 0662*  	dl 1, 16, 16, 256, fn_dg_3_2A, 1322
       00 00 10 00 
       00 00 01 00 
       25 54 04 2A 
       05 00       
043253 01 00 00 10 0663*  	dl 1, 16, 16, 256, fn_dg_3_2B, 1323
       00 00 10 00 
       00 00 01 00 
       3D 54 04 2B 
       05 00       
043265 01 00 00 10 0664*  	dl 1, 16, 16, 256, fn_dg_3_2C, 1324
       00 00 10 00 
       00 00 01 00 
       55 54 04 2C 
       05 00       
043277 01 00 00 10 0665*  	dl 1, 16, 16, 256, fn_dg_3_2D, 1325
       00 00 10 00 
       00 00 01 00 
       6D 54 04 2D 
       05 00       
043289 01 00 00 10 0666*  	dl 1, 16, 16, 256, fn_dg_3_2E, 1326
       00 00 10 00 
       00 00 01 00 
       85 54 04 2E 
       05 00       
04329B 01 00 00 10 0667*  	dl 1, 16, 16, 256, fn_dg_3_2F, 1327
       00 00 10 00 
       00 00 01 00 
       9D 54 04 2F 
       05 00       
0432AD 01 00 00 10 0668*  	dl 1, 16, 16, 256, fn_dg_3_30, 1328
       00 00 10 00 
       00 00 01 00 
       B5 54 04 30 
       05 00       
0432BF 01 00 00 10 0669*  	dl 1, 16, 16, 256, fn_dg_3_31, 1329
       00 00 10 00 
       00 00 01 00 
       CD 54 04 31 
       05 00       
0432D1 01 00 00 10 0670*  	dl 1, 16, 16, 256, fn_dg_3_32, 1330
       00 00 10 00 
       00 00 01 00 
       E5 54 04 32 
       05 00       
0432E3 01 00 00 10 0671*  	dl 1, 16, 16, 256, fn_dg_3_33, 1331
       00 00 10 00 
       00 00 01 00 
       FD 54 04 33 
       05 00       
0432F5 01 00 00 10 0672*  	dl 1, 16, 16, 256, fn_dg_3_34, 1332
       00 00 10 00 
       00 00 01 00 
       15 55 04 34 
       05 00       
043307 01 00 00 10 0673*  	dl 1, 16, 16, 256, fn_dg_3_35, 1333
       00 00 10 00 
       00 00 01 00 
       2D 55 04 35 
       05 00       
043319 01 00 00 10 0674*  	dl 1, 16, 16, 256, fn_dg_3_36, 1334
       00 00 10 00 
       00 00 01 00 
       45 55 04 36 
       05 00       
04332B 01 00 00 10 0675*  	dl 1, 16, 16, 256, fn_dg_3_37, 1335
       00 00 10 00 
       00 00 01 00 
       5D 55 04 37 
       05 00       
04333D 01 00 00 10 0676*  	dl 1, 16, 16, 256, fn_dg_3_38, 1336
       00 00 10 00 
       00 00 01 00 
       75 55 04 38 
       05 00       
04334F 01 00 00 10 0677*  	dl 1, 16, 16, 256, fn_dg_3_39, 1337
       00 00 10 00 
       00 00 01 00 
       8D 55 04 39 
       05 00       
043361 01 00 00 10 0678*  	dl 1, 16, 16, 256, fn_dg_3_3A, 1338
       00 00 10 00 
       00 00 01 00 
       A5 55 04 3A 
       05 00       
043373 01 00 00 10 0679*  	dl 1, 16, 16, 256, fn_dg_3_3B, 1339
       00 00 10 00 
       00 00 01 00 
       BD 55 04 3B 
       05 00       
043385 01 00 00 10 0680*  	dl 1, 16, 16, 256, fn_dg_3_3C, 1340
       00 00 10 00 
       00 00 01 00 
       D5 55 04 3C 
       05 00       
043397 01 00 00 10 0681*  	dl 1, 16, 16, 256, fn_dg_3_3D, 1341
       00 00 10 00 
       00 00 01 00 
       ED 55 04 3D 
       05 00       
0433A9 01 00 00 10 0682*  	dl 1, 16, 16, 256, fn_dg_3_3E, 1342
       00 00 10 00 
       00 00 01 00 
       05 56 04 3E 
       05 00       
0433BB 01 00 00 10 0683*  	dl 1, 16, 16, 256, fn_dg_3_3F, 1343
       00 00 10 00 
       00 00 01 00 
       1D 56 04 3F 
       05 00       
0433CD 01 00 00 10 0684*  	dl 1, 16, 16, 256, fn_dg_3_40, 1344
       00 00 10 00 
       00 00 01 00 
       35 56 04 40 
       05 00       
0433DF 01 00 00 10 0685*  	dl 1, 16, 16, 256, fn_dg_3_41, 1345
       00 00 10 00 
       00 00 01 00 
       4D 56 04 41 
       05 00       
0433F1 01 00 00 10 0686*  	dl 1, 16, 16, 256, fn_dg_3_42, 1346
       00 00 10 00 
       00 00 01 00 
       65 56 04 42 
       05 00       
043403 01 00 00 10 0687*  	dl 1, 16, 16, 256, fn_dg_3_43, 1347
       00 00 10 00 
       00 00 01 00 
       7D 56 04 43 
       05 00       
043415 01 00 00 10 0688*  	dl 1, 16, 16, 256, fn_dg_4_00, 1536
       00 00 10 00 
       00 00 01 00 
       95 56 04 00 
       06 00       
043427 01 00 00 10 0689*  	dl 1, 16, 16, 256, fn_dg_4_01, 1537
       00 00 10 00 
       00 00 01 00 
       AD 56 04 01 
       06 00       
043439 01 00 00 10 0690*  	dl 1, 16, 16, 256, fn_dg_4_02, 1538
       00 00 10 00 
       00 00 01 00 
       C5 56 04 02 
       06 00       
04344B 01 00 00 10 0691*  	dl 1, 16, 16, 256, fn_dg_4_03, 1539
       00 00 10 00 
       00 00 01 00 
       DD 56 04 03 
       06 00       
04345D 01 00 00 10 0692*  	dl 1, 16, 16, 256, fn_dg_4_04, 1540
       00 00 10 00 
       00 00 01 00 
       F5 56 04 04 
       06 00       
04346F 01 00 00 10 0693*  	dl 1, 16, 16, 256, fn_dg_4_05, 1541
       00 00 10 00 
       00 00 01 00 
       0D 57 04 05 
       06 00       
043481 01 00 00 10 0694*  	dl 1, 16, 16, 256, fn_dg_4_06, 1542
       00 00 10 00 
       00 00 01 00 
       25 57 04 06 
       06 00       
043493 01 00 00 10 0695*  	dl 1, 16, 16, 256, fn_dg_4_07, 1543
       00 00 10 00 
       00 00 01 00 
       3D 57 04 07 
       06 00       
0434A5 01 00 00 10 0696*  	dl 1, 16, 16, 256, fn_dg_4_08, 1544
       00 00 10 00 
       00 00 01 00 
       55 57 04 08 
       06 00       
0434B7 01 00 00 10 0697*  	dl 1, 16, 16, 256, fn_dg_4_09, 1545
       00 00 10 00 
       00 00 01 00 
       6D 57 04 09 
       06 00       
0434C9 01 00 00 10 0698*  	dl 1, 16, 16, 256, fn_dg_4_0A, 1546
       00 00 10 00 
       00 00 01 00 
       85 57 04 0A 
       06 00       
0434DB 01 00 00 10 0699*  	dl 1, 16, 16, 256, fn_dg_4_0B, 1547
       00 00 10 00 
       00 00 01 00 
       9D 57 04 0B 
       06 00       
0434ED 01 00 00 10 0700*  	dl 1, 16, 16, 256, fn_dg_4_0C, 1548
       00 00 10 00 
       00 00 01 00 
       B5 57 04 0C 
       06 00       
0434FF 01 00 00 10 0701*  	dl 1, 16, 16, 256, fn_dg_4_0D, 1549
       00 00 10 00 
       00 00 01 00 
       CD 57 04 0D 
       06 00       
043511 01 00 00 10 0702*  	dl 1, 16, 16, 256, fn_dg_4_0E, 1550
       00 00 10 00 
       00 00 01 00 
       E5 57 04 0E 
       06 00       
043523 01 00 00 10 0703*  	dl 1, 16, 16, 256, fn_dg_4_0F, 1551
       00 00 10 00 
       00 00 01 00 
       FD 57 04 0F 
       06 00       
043535 01 00 00 10 0704*  	dl 1, 16, 16, 256, fn_dg_4_10, 1552
       00 00 10 00 
       00 00 01 00 
       15 58 04 10 
       06 00       
043547 01 00 00 10 0705*  	dl 1, 16, 16, 256, fn_dg_4_11, 1553
       00 00 10 00 
       00 00 01 00 
       2D 58 04 11 
       06 00       
043559 01 00 00 10 0706*  	dl 1, 16, 16, 256, fn_dg_4_12, 1554
       00 00 10 00 
       00 00 01 00 
       45 58 04 12 
       06 00       
04356B 01 00 00 10 0707*  	dl 1, 16, 16, 256, fn_dg_4_13, 1555
       00 00 10 00 
       00 00 01 00 
       5D 58 04 13 
       06 00       
04357D 01 00 00 10 0708*  	dl 1, 16, 16, 256, fn_dg_4_14, 1556
       00 00 10 00 
       00 00 01 00 
       75 58 04 14 
       06 00       
04358F 01 00 00 10 0709*  	dl 1, 16, 16, 256, fn_dg_4_15, 1557
       00 00 10 00 
       00 00 01 00 
       8D 58 04 15 
       06 00       
0435A1 01 00 00 10 0710*  	dl 1, 16, 16, 256, fn_dg_4_16, 1558
       00 00 10 00 
       00 00 01 00 
       A5 58 04 16 
       06 00       
0435B3 01 00 00 10 0711*  	dl 1, 16, 16, 256, fn_dg_4_17, 1559
       00 00 10 00 
       00 00 01 00 
       BD 58 04 17 
       06 00       
0435C5 01 00 00 10 0712*  	dl 1, 16, 16, 256, fn_dg_4_18, 1560
       00 00 10 00 
       00 00 01 00 
       D5 58 04 18 
       06 00       
0435D7 01 00 00 10 0713*  	dl 1, 16, 16, 256, fn_dg_4_19, 1561
       00 00 10 00 
       00 00 01 00 
       ED 58 04 19 
       06 00       
0435E9 01 00 00 10 0714*  	dl 1, 16, 16, 256, fn_dg_4_1A, 1562
       00 00 10 00 
       00 00 01 00 
       05 59 04 1A 
       06 00       
0435FB 01 00 00 10 0715*  	dl 1, 16, 16, 256, fn_dg_4_1B, 1563
       00 00 10 00 
       00 00 01 00 
       1D 59 04 1B 
       06 00       
04360D 01 00 00 10 0716*  	dl 1, 16, 16, 256, fn_dg_4_1C, 1564
       00 00 10 00 
       00 00 01 00 
       35 59 04 1C 
       06 00       
04361F 01 00 00 10 0717*  	dl 1, 16, 16, 256, fn_dg_4_1D, 1565
       00 00 10 00 
       00 00 01 00 
       4D 59 04 1D 
       06 00       
043631 01 00 00 10 0718*  	dl 1, 16, 16, 256, fn_dg_4_1E, 1566
       00 00 10 00 
       00 00 01 00 
       65 59 04 1E 
       06 00       
043643 01 00 00 10 0719*  	dl 1, 16, 16, 256, fn_dg_4_1F, 1567
       00 00 10 00 
       00 00 01 00 
       7D 59 04 1F 
       06 00       
043655 01 00 00 10 0720*  	dl 1, 16, 16, 256, fn_dg_4_20, 1568
       00 00 10 00 
       00 00 01 00 
       95 59 04 20 
       06 00       
043667 01 00 00 10 0721*  	dl 1, 16, 16, 256, fn_dg_4_21, 1569
       00 00 10 00 
       00 00 01 00 
       AD 59 04 21 
       06 00       
043679 01 00 00 10 0722*  	dl 1, 16, 16, 256, fn_dg_4_22, 1570
       00 00 10 00 
       00 00 01 00 
       C5 59 04 22 
       06 00       
04368B 01 00 00 10 0723*  	dl 1, 16, 16, 256, fn_dg_4_23, 1571
       00 00 10 00 
       00 00 01 00 
       DD 59 04 23 
       06 00       
04369D 01 00 00 10 0724*  	dl 1, 16, 16, 256, fn_dg_4_24, 1572
       00 00 10 00 
       00 00 01 00 
       F5 59 04 24 
       06 00       
0436AF 01 00 00 10 0725*  	dl 1, 16, 16, 256, fn_dg_4_25, 1573
       00 00 10 00 
       00 00 01 00 
       0D 5A 04 25 
       06 00       
0436C1 01 00 00 10 0726*  	dl 1, 16, 16, 256, fn_dg_4_26, 1574
       00 00 10 00 
       00 00 01 00 
       25 5A 04 26 
       06 00       
0436D3 01 00 00 10 0727*  	dl 1, 16, 16, 256, fn_dg_4_27, 1575
       00 00 10 00 
       00 00 01 00 
       3D 5A 04 27 
       06 00       
0436E5 01 00 00 10 0728*  	dl 1, 16, 16, 256, fn_dg_4_28, 1576
       00 00 10 00 
       00 00 01 00 
       55 5A 04 28 
       06 00       
0436F7 01 00 00 10 0729*  	dl 1, 16, 16, 256, fn_dg_4_29, 1577
       00 00 10 00 
       00 00 01 00 
       6D 5A 04 29 
       06 00       
043709 01 00 00 10 0730*  	dl 1, 16, 16, 256, fn_dg_4_2A, 1578
       00 00 10 00 
       00 00 01 00 
       85 5A 04 2A 
       06 00       
04371B 01 00 00 10 0731*  	dl 1, 16, 16, 256, fn_dg_4_2B, 1579
       00 00 10 00 
       00 00 01 00 
       9D 5A 04 2B 
       06 00       
04372D 01 00 00 10 0732*  	dl 1, 16, 16, 256, fn_dg_4_2C, 1580
       00 00 10 00 
       00 00 01 00 
       B5 5A 04 2C 
       06 00       
04373F 01 00 00 10 0733*  	dl 1, 16, 16, 256, fn_dg_4_2D, 1581
       00 00 10 00 
       00 00 01 00 
       CD 5A 04 2D 
       06 00       
043751 01 00 00 10 0734*  	dl 1, 16, 16, 256, fn_dg_4_2E, 1582
       00 00 10 00 
       00 00 01 00 
       E5 5A 04 2E 
       06 00       
043763 01 00 00 10 0735*  	dl 1, 16, 16, 256, fn_dg_5_00, 1792
       00 00 10 00 
       00 00 01 00 
       FD 5A 04 00 
       07 00       
043775 01 00 00 10 0736*  	dl 1, 16, 16, 256, fn_dg_5_01, 1793
       00 00 10 00 
       00 00 01 00 
       15 5B 04 01 
       07 00       
043787 01 00 00 10 0737*  	dl 1, 16, 16, 256, fn_dg_5_02, 1794
       00 00 10 00 
       00 00 01 00 
       2D 5B 04 02 
       07 00       
043799 01 00 00 10 0738*  	dl 1, 16, 16, 256, fn_dg_5_03, 1795
       00 00 10 00 
       00 00 01 00 
       45 5B 04 03 
       07 00       
0437AB 01 00 00 10 0739*  	dl 1, 16, 16, 256, fn_dg_5_04, 1796
       00 00 10 00 
       00 00 01 00 
       5D 5B 04 04 
       07 00       
0437BD 01 00 00 10 0740*  	dl 1, 16, 16, 256, fn_dg_5_05, 1797
       00 00 10 00 
       00 00 01 00 
       75 5B 04 05 
       07 00       
0437CF 01 00 00 10 0741*  	dl 1, 16, 16, 256, fn_dg_5_06, 1798
       00 00 10 00 
       00 00 01 00 
       8D 5B 04 06 
       07 00       
0437E1 01 00 00 10 0742*  	dl 1, 16, 16, 256, fn_dg_5_07, 1799
       00 00 10 00 
       00 00 01 00 
       A5 5B 04 07 
       07 00       
0437F3 01 00 00 10 0743*  	dl 1, 16, 16, 256, fn_dg_5_08, 1800
       00 00 10 00 
       00 00 01 00 
       BD 5B 04 08 
       07 00       
043805 01 00 00 10 0744*  	dl 1, 16, 16, 256, fn_dg_5_09, 1801
       00 00 10 00 
       00 00 01 00 
       D5 5B 04 09 
       07 00       
043817 01 00 00 10 0745*  	dl 1, 16, 16, 256, fn_dg_5_0A, 1802
       00 00 10 00 
       00 00 01 00 
       ED 5B 04 0A 
       07 00       
043829 01 00 00 10 0746*  	dl 1, 16, 16, 256, fn_dg_5_0B, 1803
       00 00 10 00 
       00 00 01 00 
       05 5C 04 0B 
       07 00       
04383B 01 00 00 10 0747*  	dl 1, 16, 16, 256, fn_dg_5_0C, 1804
       00 00 10 00 
       00 00 01 00 
       1D 5C 04 0C 
       07 00       
04384D 01 00 00 10 0748*  	dl 1, 16, 16, 256, fn_dg_5_0D, 1805
       00 00 10 00 
       00 00 01 00 
       35 5C 04 0D 
       07 00       
04385F 01 00 00 10 0749*  	dl 1, 16, 16, 256, fn_dg_5_0E, 1806
       00 00 10 00 
       00 00 01 00 
       4D 5C 04 0E 
       07 00       
043871 01 00 00 10 0750*  	dl 1, 16, 16, 256, fn_dg_5_0F, 1807
       00 00 10 00 
       00 00 01 00 
       65 5C 04 0F 
       07 00       
043883 01 00 00 10 0751*  	dl 1, 16, 16, 256, fn_dg_5_10, 1808
       00 00 10 00 
       00 00 01 00 
       7D 5C 04 10 
       07 00       
043895 01 00 00 10 0752*  	dl 1, 16, 16, 256, fn_dg_5_11, 1809
       00 00 10 00 
       00 00 01 00 
       95 5C 04 11 
       07 00       
0438A7 01 00 00 10 0753*  	dl 1, 16, 16, 256, fn_dg_5_12, 1810
       00 00 10 00 
       00 00 01 00 
       AD 5C 04 12 
       07 00       
0438B9 01 00 00 10 0754*  	dl 1, 16, 16, 256, fn_dg_5_13, 1811
       00 00 10 00 
       00 00 01 00 
       C5 5C 04 13 
       07 00       
0438CB 01 00 00 10 0755*  	dl 1, 16, 16, 256, fn_dg_5_14, 1812
       00 00 10 00 
       00 00 01 00 
       DD 5C 04 14 
       07 00       
0438DD 01 00 00 10 0756*  	dl 1, 16, 16, 256, fn_dg_5_15, 1813
       00 00 10 00 
       00 00 01 00 
       F5 5C 04 15 
       07 00       
0438EF 01 00 00 10 0757*  	dl 1, 16, 16, 256, fn_dg_5_16, 1814
       00 00 10 00 
       00 00 01 00 
       0D 5D 04 16 
       07 00       
043901 01 00 00 10 0758*  	dl 1, 16, 16, 256, fn_dg_5_17, 1815
       00 00 10 00 
       00 00 01 00 
       25 5D 04 17 
       07 00       
043913 01 00 00 10 0759*  	dl 1, 16, 16, 256, fn_dg_5_18, 1816
       00 00 10 00 
       00 00 01 00 
       3D 5D 04 18 
       07 00       
043925 01 00 00 10 0760*  	dl 1, 16, 16, 256, fn_dg_5_19, 1817
       00 00 10 00 
       00 00 01 00 
       55 5D 04 19 
       07 00       
043937 01 00 00 10 0761*  	dl 1, 16, 16, 256, fn_dg_5_1A, 1818
       00 00 10 00 
       00 00 01 00 
       6D 5D 04 1A 
       07 00       
043949 01 00 00 10 0762*  	dl 1, 16, 16, 256, fn_dg_5_1B, 1819
       00 00 10 00 
       00 00 01 00 
       85 5D 04 1B 
       07 00       
04395B 01 00 00 10 0763*  	dl 1, 16, 16, 256, fn_dg_5_1C, 1820
       00 00 10 00 
       00 00 01 00 
       9D 5D 04 1C 
       07 00       
04396D 01 00 00 10 0764*  	dl 1, 16, 16, 256, fn_dg_5_1D, 1821
       00 00 10 00 
       00 00 01 00 
       B5 5D 04 1D 
       07 00       
04397F 01 00 00 10 0765*  	dl 1, 16, 16, 256, fn_dg_5_1E, 1822
       00 00 10 00 
       00 00 01 00 
       CD 5D 04 1E 
       07 00       
043991 01 00 00 10 0766*  	dl 1, 16, 16, 256, fn_dg_5_1F, 1823
       00 00 10 00 
       00 00 01 00 
       E5 5D 04 1F 
       07 00       
0439A3 01 00 00 10 0767*  	dl 1, 16, 16, 256, fn_dg_5_20, 1824
       00 00 10 00 
       00 00 01 00 
       FD 5D 04 20 
       07 00       
0439B5 01 00 00 10 0768*  	dl 1, 16, 16, 256, fn_dg_5_21, 1825
       00 00 10 00 
       00 00 01 00 
       15 5E 04 21 
       07 00       
0439C7 01 00 00 10 0769*  	dl 1, 16, 16, 256, fn_dg_5_22, 1826
       00 00 10 00 
       00 00 01 00 
       2D 5E 04 22 
       07 00       
0439D9 01 00 00 10 0770*  	dl 1, 16, 16, 256, fn_dg_5_23, 1827
       00 00 10 00 
       00 00 01 00 
       45 5E 04 23 
       07 00       
0439EB 01 00 00 10 0771*  	dl 1, 16, 16, 256, fn_dg_5_24, 1828
       00 00 10 00 
       00 00 01 00 
       5D 5E 04 24 
       07 00       
0439FD 01 00 00 10 0772*  	dl 1, 16, 16, 256, fn_dg_5_25, 1829
       00 00 10 00 
       00 00 01 00 
       75 5E 04 25 
       07 00       
043A0F 01 00 00 10 0773*  	dl 1, 16, 16, 256, fn_dg_5_26, 1830
       00 00 10 00 
       00 00 01 00 
       8D 5E 04 26 
       07 00       
043A21 01 00 00 10 0774*  	dl 1, 16, 16, 256, fn_dg_5_27, 1831
       00 00 10 00 
       00 00 01 00 
       A5 5E 04 27 
       07 00       
043A33 01 00 00 10 0775*  	dl 1, 16, 16, 256, fn_dg_5_28, 1832
       00 00 10 00 
       00 00 01 00 
       BD 5E 04 28 
       07 00       
043A45 01 00 00 10 0776*  	dl 1, 16, 16, 256, fn_dg_5_29, 1833
       00 00 10 00 
       00 00 01 00 
       D5 5E 04 29 
       07 00       
043A57 01 00 00 10 0777*  	dl 1, 16, 16, 256, fn_dg_5_2A, 1834
       00 00 10 00 
       00 00 01 00 
       ED 5E 04 2A 
       07 00       
043A69 01 00 00 10 0778*  	dl 1, 16, 16, 256, fn_dg_5_2B, 1835
       00 00 10 00 
       00 00 01 00 
       05 5F 04 2B 
       07 00       
043A7B 01 00 00 10 0779*  	dl 1, 16, 16, 256, fn_dg_5_2C, 1836
       00 00 10 00 
       00 00 01 00 
       1D 5F 04 2C 
       07 00       
043A8D 01 00 00 10 0780*  	dl 1, 16, 16, 256, fn_dg_5_2D, 1837
       00 00 10 00 
       00 00 01 00 
       35 5F 04 2D 
       07 00       
043A9F 01 00 00 10 0781*  	dl 1, 16, 16, 256, fn_dg_5_2E, 1838
       00 00 10 00 
       00 00 01 00 
       4D 5F 04 2E 
       07 00       
043AB1 01 00 00 10 0782*  	dl 1, 16, 16, 256, fn_dg_5_2F, 1839
       00 00 10 00 
       00 00 01 00 
       65 5F 04 2F 
       07 00       
043AC3 01 00 00 10 0783*  	dl 1, 16, 16, 256, fn_dg_5_30, 1840
       00 00 10 00 
       00 00 01 00 
       7D 5F 04 30 
       07 00       
043AD5 01 00 00 10 0784*  	dl 1, 16, 16, 256, fn_dg_5_31, 1841
       00 00 10 00 
       00 00 01 00 
       95 5F 04 31 
       07 00       
043AE7 01 00 00 10 0785*  	dl 1, 16, 16, 256, fn_dg_5_32, 1842
       00 00 10 00 
       00 00 01 00 
       AD 5F 04 32 
       07 00       
043AF9 01 00 00 10 0786*  	dl 1, 16, 16, 256, fn_dg_5_33, 1843
       00 00 10 00 
       00 00 01 00 
       C5 5F 04 33 
       07 00       
043B0B 01 00 00 10 0787*  	dl 1, 16, 16, 256, fn_dg_5_34, 1844
       00 00 10 00 
       00 00 01 00 
       DD 5F 04 34 
       07 00       
043B1D 01 00 00 10 0788*  	dl 1, 16, 16, 256, fn_dg_5_35, 1845
       00 00 10 00 
       00 00 01 00 
       F5 5F 04 35 
       07 00       
043B2F 01 00 00 10 0789*  	dl 1, 16, 16, 256, fn_dg_5_36, 1846
       00 00 10 00 
       00 00 01 00 
       0D 60 04 36 
       07 00       
043B41 01 00 00 10 0790*  	dl 1, 16, 16, 256, fn_dg_5_37, 1847
       00 00 10 00 
       00 00 01 00 
       25 60 04 37 
       07 00       
043B53 01 00 00 10 0791*  	dl 1, 16, 16, 256, fn_dg_5_38, 1848
       00 00 10 00 
       00 00 01 00 
       3D 60 04 38 
       07 00       
043B65 01 00 00 10 0792*  	dl 1, 16, 16, 256, fn_dg_5_39, 1849
       00 00 10 00 
       00 00 01 00 
       55 60 04 39 
       07 00       
043B77 01 00 00 10 0793*  	dl 1, 16, 16, 256, fn_dg_5_3A, 1850
       00 00 10 00 
       00 00 01 00 
       6D 60 04 3A 
       07 00       
043B89 01 00 00 10 0794*  	dl 1, 16, 16, 256, fn_dg_5_3B, 1851
       00 00 10 00 
       00 00 01 00 
       85 60 04 3B 
       07 00       
043B9B 01 00 00 10 0795*  	dl 1, 16, 16, 256, fn_dg_5_3C, 1852
       00 00 10 00 
       00 00 01 00 
       9D 60 04 3C 
       07 00       
043BAD 01 00 00 10 0796*  	dl 1, 16, 16, 256, fn_dg_5_3D, 1853
       00 00 10 00 
       00 00 01 00 
       B5 60 04 3D 
       07 00       
043BBF 01 00 00 10 0797*  	dl 1, 16, 16, 256, fn_dg_5_3E, 1854
       00 00 10 00 
       00 00 01 00 
       CD 60 04 3E 
       07 00       
043BD1 01 00 00 10 0798*  	dl 1, 16, 16, 256, fn_dg_5_3F, 1855
       00 00 10 00 
       00 00 01 00 
       E5 60 04 3F 
       07 00       
043BE3 01 00 00 10 0799*  	dl 1, 16, 16, 256, fn_dg_5_40, 1856
       00 00 10 00 
       00 00 01 00 
       FD 60 04 40 
       07 00       
043BF5             0800*  
043BF5             0801*  tiles_dg_files_list: ; filename:
043BF5 74 67 74 2F 0802*  fn_dg_0_00: db "tgt/tiles/dg_0_00.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       30 2E 72 67 
       62 61 32 00 
043C0D 74 67 74 2F 0803*  fn_dg_0_01: db "tgt/tiles/dg_0_01.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       31 2E 72 67 
       62 61 32 00 
043C25 74 67 74 2F 0804*  fn_dg_0_02: db "tgt/tiles/dg_0_02.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       32 2E 72 67 
       62 61 32 00 
043C3D 74 67 74 2F 0805*  fn_dg_0_03: db "tgt/tiles/dg_0_03.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       33 2E 72 67 
       62 61 32 00 
043C55 74 67 74 2F 0806*  fn_dg_0_04: db "tgt/tiles/dg_0_04.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       34 2E 72 67 
       62 61 32 00 
043C6D 74 67 74 2F 0807*  fn_dg_0_05: db "tgt/tiles/dg_0_05.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       35 2E 72 67 
       62 61 32 00 
043C85 74 67 74 2F 0808*  fn_dg_0_06: db "tgt/tiles/dg_0_06.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       36 2E 72 67 
       62 61 32 00 
043C9D 74 67 74 2F 0809*  fn_dg_0_07: db "tgt/tiles/dg_0_07.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       37 2E 72 67 
       62 61 32 00 
043CB5 74 67 74 2F 0810*  fn_dg_0_08: db "tgt/tiles/dg_0_08.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       38 2E 72 67 
       62 61 32 00 
043CCD 74 67 74 2F 0811*  fn_dg_0_09: db "tgt/tiles/dg_0_09.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       39 2E 72 67 
       62 61 32 00 
043CE5 74 67 74 2F 0812*  fn_dg_0_0A: db "tgt/tiles/dg_0_0A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       41 2E 72 67 
       62 61 32 00 
043CFD 74 67 74 2F 0813*  fn_dg_0_0B: db "tgt/tiles/dg_0_0B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       42 2E 72 67 
       62 61 32 00 
043D15 74 67 74 2F 0814*  fn_dg_0_0C: db "tgt/tiles/dg_0_0C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       43 2E 72 67 
       62 61 32 00 
043D2D 74 67 74 2F 0815*  fn_dg_0_0D: db "tgt/tiles/dg_0_0D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       44 2E 72 67 
       62 61 32 00 
043D45 74 67 74 2F 0816*  fn_dg_0_0E: db "tgt/tiles/dg_0_0E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       45 2E 72 67 
       62 61 32 00 
043D5D 74 67 74 2F 0817*  fn_dg_0_0F: db "tgt/tiles/dg_0_0F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 30 
       46 2E 72 67 
       62 61 32 00 
043D75 74 67 74 2F 0818*  fn_dg_0_10: db "tgt/tiles/dg_0_10.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       30 2E 72 67 
       62 61 32 00 
043D8D 74 67 74 2F 0819*  fn_dg_0_11: db "tgt/tiles/dg_0_11.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       31 2E 72 67 
       62 61 32 00 
043DA5 74 67 74 2F 0820*  fn_dg_0_12: db "tgt/tiles/dg_0_12.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       32 2E 72 67 
       62 61 32 00 
043DBD 74 67 74 2F 0821*  fn_dg_0_13: db "tgt/tiles/dg_0_13.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       33 2E 72 67 
       62 61 32 00 
043DD5 74 67 74 2F 0822*  fn_dg_0_14: db "tgt/tiles/dg_0_14.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       34 2E 72 67 
       62 61 32 00 
043DED 74 67 74 2F 0823*  fn_dg_0_15: db "tgt/tiles/dg_0_15.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       35 2E 72 67 
       62 61 32 00 
043E05 74 67 74 2F 0824*  fn_dg_0_16: db "tgt/tiles/dg_0_16.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       36 2E 72 67 
       62 61 32 00 
043E1D 74 67 74 2F 0825*  fn_dg_0_17: db "tgt/tiles/dg_0_17.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       37 2E 72 67 
       62 61 32 00 
043E35 74 67 74 2F 0826*  fn_dg_0_18: db "tgt/tiles/dg_0_18.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       38 2E 72 67 
       62 61 32 00 
043E4D 74 67 74 2F 0827*  fn_dg_0_19: db "tgt/tiles/dg_0_19.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       39 2E 72 67 
       62 61 32 00 
043E65 74 67 74 2F 0828*  fn_dg_0_1A: db "tgt/tiles/dg_0_1A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       41 2E 72 67 
       62 61 32 00 
043E7D 74 67 74 2F 0829*  fn_dg_0_1B: db "tgt/tiles/dg_0_1B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       42 2E 72 67 
       62 61 32 00 
043E95 74 67 74 2F 0830*  fn_dg_0_1C: db "tgt/tiles/dg_0_1C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       43 2E 72 67 
       62 61 32 00 
043EAD 74 67 74 2F 0831*  fn_dg_0_1D: db "tgt/tiles/dg_0_1D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       44 2E 72 67 
       62 61 32 00 
043EC5 74 67 74 2F 0832*  fn_dg_0_1E: db "tgt/tiles/dg_0_1E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       45 2E 72 67 
       62 61 32 00 
043EDD 74 67 74 2F 0833*  fn_dg_0_1F: db "tgt/tiles/dg_0_1F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 31 
       46 2E 72 67 
       62 61 32 00 
043EF5 74 67 74 2F 0834*  fn_dg_0_20: db "tgt/tiles/dg_0_20.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       30 2E 72 67 
       62 61 32 00 
043F0D 74 67 74 2F 0835*  fn_dg_0_21: db "tgt/tiles/dg_0_21.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       31 2E 72 67 
       62 61 32 00 
043F25 74 67 74 2F 0836*  fn_dg_0_22: db "tgt/tiles/dg_0_22.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       32 2E 72 67 
       62 61 32 00 
043F3D 74 67 74 2F 0837*  fn_dg_0_23: db "tgt/tiles/dg_0_23.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       33 2E 72 67 
       62 61 32 00 
043F55 74 67 74 2F 0838*  fn_dg_0_24: db "tgt/tiles/dg_0_24.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       34 2E 72 67 
       62 61 32 00 
043F6D 74 67 74 2F 0839*  fn_dg_0_25: db "tgt/tiles/dg_0_25.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       35 2E 72 67 
       62 61 32 00 
043F85 74 67 74 2F 0840*  fn_dg_0_26: db "tgt/tiles/dg_0_26.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       36 2E 72 67 
       62 61 32 00 
043F9D 74 67 74 2F 0841*  fn_dg_0_27: db "tgt/tiles/dg_0_27.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       37 2E 72 67 
       62 61 32 00 
043FB5 74 67 74 2F 0842*  fn_dg_0_28: db "tgt/tiles/dg_0_28.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       38 2E 72 67 
       62 61 32 00 
043FCD 74 67 74 2F 0843*  fn_dg_0_29: db "tgt/tiles/dg_0_29.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       39 2E 72 67 
       62 61 32 00 
043FE5 74 67 74 2F 0844*  fn_dg_0_2A: db "tgt/tiles/dg_0_2A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       41 2E 72 67 
       62 61 32 00 
043FFD 74 67 74 2F 0845*  fn_dg_0_2B: db "tgt/tiles/dg_0_2B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       42 2E 72 67 
       62 61 32 00 
044015 74 67 74 2F 0846*  fn_dg_0_2C: db "tgt/tiles/dg_0_2C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       43 2E 72 67 
       62 61 32 00 
04402D 74 67 74 2F 0847*  fn_dg_0_2D: db "tgt/tiles/dg_0_2D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       44 2E 72 67 
       62 61 32 00 
044045 74 67 74 2F 0848*  fn_dg_0_2E: db "tgt/tiles/dg_0_2E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       45 2E 72 67 
       62 61 32 00 
04405D 74 67 74 2F 0849*  fn_dg_0_2F: db "tgt/tiles/dg_0_2F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 32 
       46 2E 72 67 
       62 61 32 00 
044075 74 67 74 2F 0850*  fn_dg_0_30: db "tgt/tiles/dg_0_30.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       30 2E 72 67 
       62 61 32 00 
04408D 74 67 74 2F 0851*  fn_dg_0_31: db "tgt/tiles/dg_0_31.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       31 2E 72 67 
       62 61 32 00 
0440A5 74 67 74 2F 0852*  fn_dg_0_32: db "tgt/tiles/dg_0_32.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       32 2E 72 67 
       62 61 32 00 
0440BD 74 67 74 2F 0853*  fn_dg_0_33: db "tgt/tiles/dg_0_33.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       33 2E 72 67 
       62 61 32 00 
0440D5 74 67 74 2F 0854*  fn_dg_0_34: db "tgt/tiles/dg_0_34.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       34 2E 72 67 
       62 61 32 00 
0440ED 74 67 74 2F 0855*  fn_dg_0_35: db "tgt/tiles/dg_0_35.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       35 2E 72 67 
       62 61 32 00 
044105 74 67 74 2F 0856*  fn_dg_0_36: db "tgt/tiles/dg_0_36.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       36 2E 72 67 
       62 61 32 00 
04411D 74 67 74 2F 0857*  fn_dg_0_37: db "tgt/tiles/dg_0_37.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       37 2E 72 67 
       62 61 32 00 
044135 74 67 74 2F 0858*  fn_dg_0_38: db "tgt/tiles/dg_0_38.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       38 2E 72 67 
       62 61 32 00 
04414D 74 67 74 2F 0859*  fn_dg_0_39: db "tgt/tiles/dg_0_39.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       39 2E 72 67 
       62 61 32 00 
044165 74 67 74 2F 0860*  fn_dg_0_3A: db "tgt/tiles/dg_0_3A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       41 2E 72 67 
       62 61 32 00 
04417D 74 67 74 2F 0861*  fn_dg_0_3B: db "tgt/tiles/dg_0_3B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       42 2E 72 67 
       62 61 32 00 
044195 74 67 74 2F 0862*  fn_dg_0_3C: db "tgt/tiles/dg_0_3C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       43 2E 72 67 
       62 61 32 00 
0441AD 74 67 74 2F 0863*  fn_dg_0_3D: db "tgt/tiles/dg_0_3D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       44 2E 72 67 
       62 61 32 00 
0441C5 74 67 74 2F 0864*  fn_dg_0_3E: db "tgt/tiles/dg_0_3E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       45 2E 72 67 
       62 61 32 00 
0441DD 74 67 74 2F 0865*  fn_dg_0_3F: db "tgt/tiles/dg_0_3F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 33 
       46 2E 72 67 
       62 61 32 00 
0441F5 74 67 74 2F 0866*  fn_dg_0_40: db "tgt/tiles/dg_0_40.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 34 
       30 2E 72 67 
       62 61 32 00 
04420D 74 67 74 2F 0867*  fn_dg_0_41: db "tgt/tiles/dg_0_41.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 30 5F 34 
       31 2E 72 67 
       62 61 32 00 
044225 74 67 74 2F 0868*  fn_dg_1_00: db "tgt/tiles/dg_1_00.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       30 2E 72 67 
       62 61 32 00 
04423D 74 67 74 2F 0869*  fn_dg_1_01: db "tgt/tiles/dg_1_01.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       31 2E 72 67 
       62 61 32 00 
044255 74 67 74 2F 0870*  fn_dg_1_02: db "tgt/tiles/dg_1_02.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       32 2E 72 67 
       62 61 32 00 
04426D 74 67 74 2F 0871*  fn_dg_1_03: db "tgt/tiles/dg_1_03.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       33 2E 72 67 
       62 61 32 00 
044285 74 67 74 2F 0872*  fn_dg_1_04: db "tgt/tiles/dg_1_04.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       34 2E 72 67 
       62 61 32 00 
04429D 74 67 74 2F 0873*  fn_dg_1_05: db "tgt/tiles/dg_1_05.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       35 2E 72 67 
       62 61 32 00 
0442B5 74 67 74 2F 0874*  fn_dg_1_06: db "tgt/tiles/dg_1_06.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       36 2E 72 67 
       62 61 32 00 
0442CD 74 67 74 2F 0875*  fn_dg_1_07: db "tgt/tiles/dg_1_07.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       37 2E 72 67 
       62 61 32 00 
0442E5 74 67 74 2F 0876*  fn_dg_1_08: db "tgt/tiles/dg_1_08.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       38 2E 72 67 
       62 61 32 00 
0442FD 74 67 74 2F 0877*  fn_dg_1_09: db "tgt/tiles/dg_1_09.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       39 2E 72 67 
       62 61 32 00 
044315 74 67 74 2F 0878*  fn_dg_1_0A: db "tgt/tiles/dg_1_0A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       41 2E 72 67 
       62 61 32 00 
04432D 74 67 74 2F 0879*  fn_dg_1_0B: db "tgt/tiles/dg_1_0B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       42 2E 72 67 
       62 61 32 00 
044345 74 67 74 2F 0880*  fn_dg_1_0C: db "tgt/tiles/dg_1_0C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       43 2E 72 67 
       62 61 32 00 
04435D 74 67 74 2F 0881*  fn_dg_1_0D: db "tgt/tiles/dg_1_0D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       44 2E 72 67 
       62 61 32 00 
044375 74 67 74 2F 0882*  fn_dg_1_0E: db "tgt/tiles/dg_1_0E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       45 2E 72 67 
       62 61 32 00 
04438D 74 67 74 2F 0883*  fn_dg_1_0F: db "tgt/tiles/dg_1_0F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 30 
       46 2E 72 67 
       62 61 32 00 
0443A5 74 67 74 2F 0884*  fn_dg_1_10: db "tgt/tiles/dg_1_10.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       30 2E 72 67 
       62 61 32 00 
0443BD 74 67 74 2F 0885*  fn_dg_1_11: db "tgt/tiles/dg_1_11.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       31 2E 72 67 
       62 61 32 00 
0443D5 74 67 74 2F 0886*  fn_dg_1_12: db "tgt/tiles/dg_1_12.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       32 2E 72 67 
       62 61 32 00 
0443ED 74 67 74 2F 0887*  fn_dg_1_13: db "tgt/tiles/dg_1_13.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       33 2E 72 67 
       62 61 32 00 
044405 74 67 74 2F 0888*  fn_dg_1_14: db "tgt/tiles/dg_1_14.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       34 2E 72 67 
       62 61 32 00 
04441D 74 67 74 2F 0889*  fn_dg_1_15: db "tgt/tiles/dg_1_15.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       35 2E 72 67 
       62 61 32 00 
044435 74 67 74 2F 0890*  fn_dg_1_16: db "tgt/tiles/dg_1_16.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       36 2E 72 67 
       62 61 32 00 
04444D 74 67 74 2F 0891*  fn_dg_1_17: db "tgt/tiles/dg_1_17.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       37 2E 72 67 
       62 61 32 00 
044465 74 67 74 2F 0892*  fn_dg_1_18: db "tgt/tiles/dg_1_18.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       38 2E 72 67 
       62 61 32 00 
04447D 74 67 74 2F 0893*  fn_dg_1_19: db "tgt/tiles/dg_1_19.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       39 2E 72 67 
       62 61 32 00 
044495 74 67 74 2F 0894*  fn_dg_1_1A: db "tgt/tiles/dg_1_1A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       41 2E 72 67 
       62 61 32 00 
0444AD 74 67 74 2F 0895*  fn_dg_1_1B: db "tgt/tiles/dg_1_1B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       42 2E 72 67 
       62 61 32 00 
0444C5 74 67 74 2F 0896*  fn_dg_1_1C: db "tgt/tiles/dg_1_1C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       43 2E 72 67 
       62 61 32 00 
0444DD 74 67 74 2F 0897*  fn_dg_1_1D: db "tgt/tiles/dg_1_1D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       44 2E 72 67 
       62 61 32 00 
0444F5 74 67 74 2F 0898*  fn_dg_1_1E: db "tgt/tiles/dg_1_1E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       45 2E 72 67 
       62 61 32 00 
04450D 74 67 74 2F 0899*  fn_dg_1_1F: db "tgt/tiles/dg_1_1F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 31 
       46 2E 72 67 
       62 61 32 00 
044525 74 67 74 2F 0900*  fn_dg_1_20: db "tgt/tiles/dg_1_20.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       30 2E 72 67 
       62 61 32 00 
04453D 74 67 74 2F 0901*  fn_dg_1_21: db "tgt/tiles/dg_1_21.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       31 2E 72 67 
       62 61 32 00 
044555 74 67 74 2F 0902*  fn_dg_1_22: db "tgt/tiles/dg_1_22.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       32 2E 72 67 
       62 61 32 00 
04456D 74 67 74 2F 0903*  fn_dg_1_23: db "tgt/tiles/dg_1_23.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       33 2E 72 67 
       62 61 32 00 
044585 74 67 74 2F 0904*  fn_dg_1_24: db "tgt/tiles/dg_1_24.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       34 2E 72 67 
       62 61 32 00 
04459D 74 67 74 2F 0905*  fn_dg_1_25: db "tgt/tiles/dg_1_25.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       35 2E 72 67 
       62 61 32 00 
0445B5 74 67 74 2F 0906*  fn_dg_1_26: db "tgt/tiles/dg_1_26.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       36 2E 72 67 
       62 61 32 00 
0445CD 74 67 74 2F 0907*  fn_dg_1_27: db "tgt/tiles/dg_1_27.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       37 2E 72 67 
       62 61 32 00 
0445E5 74 67 74 2F 0908*  fn_dg_1_28: db "tgt/tiles/dg_1_28.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       38 2E 72 67 
       62 61 32 00 
0445FD 74 67 74 2F 0909*  fn_dg_1_29: db "tgt/tiles/dg_1_29.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       39 2E 72 67 
       62 61 32 00 
044615 74 67 74 2F 0910*  fn_dg_1_2A: db "tgt/tiles/dg_1_2A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       41 2E 72 67 
       62 61 32 00 
04462D 74 67 74 2F 0911*  fn_dg_1_2B: db "tgt/tiles/dg_1_2B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       42 2E 72 67 
       62 61 32 00 
044645 74 67 74 2F 0912*  fn_dg_1_2C: db "tgt/tiles/dg_1_2C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       43 2E 72 67 
       62 61 32 00 
04465D 74 67 74 2F 0913*  fn_dg_1_2D: db "tgt/tiles/dg_1_2D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       44 2E 72 67 
       62 61 32 00 
044675 74 67 74 2F 0914*  fn_dg_1_2E: db "tgt/tiles/dg_1_2E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       45 2E 72 67 
       62 61 32 00 
04468D 74 67 74 2F 0915*  fn_dg_1_2F: db "tgt/tiles/dg_1_2F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 32 
       46 2E 72 67 
       62 61 32 00 
0446A5 74 67 74 2F 0916*  fn_dg_1_30: db "tgt/tiles/dg_1_30.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       30 2E 72 67 
       62 61 32 00 
0446BD 74 67 74 2F 0917*  fn_dg_1_31: db "tgt/tiles/dg_1_31.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       31 2E 72 67 
       62 61 32 00 
0446D5 74 67 74 2F 0918*  fn_dg_1_32: db "tgt/tiles/dg_1_32.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       32 2E 72 67 
       62 61 32 00 
0446ED 74 67 74 2F 0919*  fn_dg_1_33: db "tgt/tiles/dg_1_33.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       33 2E 72 67 
       62 61 32 00 
044705 74 67 74 2F 0920*  fn_dg_1_34: db "tgt/tiles/dg_1_34.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       34 2E 72 67 
       62 61 32 00 
04471D 74 67 74 2F 0921*  fn_dg_1_35: db "tgt/tiles/dg_1_35.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       35 2E 72 67 
       62 61 32 00 
044735 74 67 74 2F 0922*  fn_dg_1_36: db "tgt/tiles/dg_1_36.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       36 2E 72 67 
       62 61 32 00 
04474D 74 67 74 2F 0923*  fn_dg_1_37: db "tgt/tiles/dg_1_37.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       37 2E 72 67 
       62 61 32 00 
044765 74 67 74 2F 0924*  fn_dg_1_38: db "tgt/tiles/dg_1_38.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       38 2E 72 67 
       62 61 32 00 
04477D 74 67 74 2F 0925*  fn_dg_1_39: db "tgt/tiles/dg_1_39.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       39 2E 72 67 
       62 61 32 00 
044795 74 67 74 2F 0926*  fn_dg_1_3A: db "tgt/tiles/dg_1_3A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       41 2E 72 67 
       62 61 32 00 
0447AD 74 67 74 2F 0927*  fn_dg_1_3B: db "tgt/tiles/dg_1_3B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       42 2E 72 67 
       62 61 32 00 
0447C5 74 67 74 2F 0928*  fn_dg_1_3C: db "tgt/tiles/dg_1_3C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       43 2E 72 67 
       62 61 32 00 
0447DD 74 67 74 2F 0929*  fn_dg_1_3D: db "tgt/tiles/dg_1_3D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 31 5F 33 
       44 2E 72 67 
       62 61 32 00 
0447F5 74 67 74 2F 0930*  fn_dg_2_00: db "tgt/tiles/dg_2_00.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       30 2E 72 67 
       62 61 32 00 
04480D 74 67 74 2F 0931*  fn_dg_2_01: db "tgt/tiles/dg_2_01.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       31 2E 72 67 
       62 61 32 00 
044825 74 67 74 2F 0932*  fn_dg_2_02: db "tgt/tiles/dg_2_02.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       32 2E 72 67 
       62 61 32 00 
04483D 74 67 74 2F 0933*  fn_dg_2_03: db "tgt/tiles/dg_2_03.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       33 2E 72 67 
       62 61 32 00 
044855 74 67 74 2F 0934*  fn_dg_2_04: db "tgt/tiles/dg_2_04.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       34 2E 72 67 
       62 61 32 00 
04486D 74 67 74 2F 0935*  fn_dg_2_05: db "tgt/tiles/dg_2_05.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       35 2E 72 67 
       62 61 32 00 
044885 74 67 74 2F 0936*  fn_dg_2_06: db "tgt/tiles/dg_2_06.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       36 2E 72 67 
       62 61 32 00 
04489D 74 67 74 2F 0937*  fn_dg_2_07: db "tgt/tiles/dg_2_07.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       37 2E 72 67 
       62 61 32 00 
0448B5 74 67 74 2F 0938*  fn_dg_2_08: db "tgt/tiles/dg_2_08.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       38 2E 72 67 
       62 61 32 00 
0448CD 74 67 74 2F 0939*  fn_dg_2_09: db "tgt/tiles/dg_2_09.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       39 2E 72 67 
       62 61 32 00 
0448E5 74 67 74 2F 0940*  fn_dg_2_0A: db "tgt/tiles/dg_2_0A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       41 2E 72 67 
       62 61 32 00 
0448FD 74 67 74 2F 0941*  fn_dg_2_0B: db "tgt/tiles/dg_2_0B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       42 2E 72 67 
       62 61 32 00 
044915 74 67 74 2F 0942*  fn_dg_2_0C: db "tgt/tiles/dg_2_0C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       43 2E 72 67 
       62 61 32 00 
04492D 74 67 74 2F 0943*  fn_dg_2_0D: db "tgt/tiles/dg_2_0D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       44 2E 72 67 
       62 61 32 00 
044945 74 67 74 2F 0944*  fn_dg_2_0E: db "tgt/tiles/dg_2_0E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       45 2E 72 67 
       62 61 32 00 
04495D 74 67 74 2F 0945*  fn_dg_2_0F: db "tgt/tiles/dg_2_0F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 30 
       46 2E 72 67 
       62 61 32 00 
044975 74 67 74 2F 0946*  fn_dg_2_10: db "tgt/tiles/dg_2_10.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       30 2E 72 67 
       62 61 32 00 
04498D 74 67 74 2F 0947*  fn_dg_2_11: db "tgt/tiles/dg_2_11.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       31 2E 72 67 
       62 61 32 00 
0449A5 74 67 74 2F 0948*  fn_dg_2_12: db "tgt/tiles/dg_2_12.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       32 2E 72 67 
       62 61 32 00 
0449BD 74 67 74 2F 0949*  fn_dg_2_13: db "tgt/tiles/dg_2_13.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       33 2E 72 67 
       62 61 32 00 
0449D5 74 67 74 2F 0950*  fn_dg_2_14: db "tgt/tiles/dg_2_14.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       34 2E 72 67 
       62 61 32 00 
0449ED 74 67 74 2F 0951*  fn_dg_2_15: db "tgt/tiles/dg_2_15.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       35 2E 72 67 
       62 61 32 00 
044A05 74 67 74 2F 0952*  fn_dg_2_16: db "tgt/tiles/dg_2_16.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       36 2E 72 67 
       62 61 32 00 
044A1D 74 67 74 2F 0953*  fn_dg_2_17: db "tgt/tiles/dg_2_17.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       37 2E 72 67 
       62 61 32 00 
044A35 74 67 74 2F 0954*  fn_dg_2_18: db "tgt/tiles/dg_2_18.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       38 2E 72 67 
       62 61 32 00 
044A4D 74 67 74 2F 0955*  fn_dg_2_19: db "tgt/tiles/dg_2_19.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       39 2E 72 67 
       62 61 32 00 
044A65 74 67 74 2F 0956*  fn_dg_2_1A: db "tgt/tiles/dg_2_1A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       41 2E 72 67 
       62 61 32 00 
044A7D 74 67 74 2F 0957*  fn_dg_2_1B: db "tgt/tiles/dg_2_1B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       42 2E 72 67 
       62 61 32 00 
044A95 74 67 74 2F 0958*  fn_dg_2_1C: db "tgt/tiles/dg_2_1C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       43 2E 72 67 
       62 61 32 00 
044AAD 74 67 74 2F 0959*  fn_dg_2_1D: db "tgt/tiles/dg_2_1D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       44 2E 72 67 
       62 61 32 00 
044AC5 74 67 74 2F 0960*  fn_dg_2_1E: db "tgt/tiles/dg_2_1E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       45 2E 72 67 
       62 61 32 00 
044ADD 74 67 74 2F 0961*  fn_dg_2_1F: db "tgt/tiles/dg_2_1F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 31 
       46 2E 72 67 
       62 61 32 00 
044AF5 74 67 74 2F 0962*  fn_dg_2_20: db "tgt/tiles/dg_2_20.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       30 2E 72 67 
       62 61 32 00 
044B0D 74 67 74 2F 0963*  fn_dg_2_21: db "tgt/tiles/dg_2_21.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       31 2E 72 67 
       62 61 32 00 
044B25 74 67 74 2F 0964*  fn_dg_2_22: db "tgt/tiles/dg_2_22.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       32 2E 72 67 
       62 61 32 00 
044B3D 74 67 74 2F 0965*  fn_dg_2_23: db "tgt/tiles/dg_2_23.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       33 2E 72 67 
       62 61 32 00 
044B55 74 67 74 2F 0966*  fn_dg_2_24: db "tgt/tiles/dg_2_24.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       34 2E 72 67 
       62 61 32 00 
044B6D 74 67 74 2F 0967*  fn_dg_2_25: db "tgt/tiles/dg_2_25.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       35 2E 72 67 
       62 61 32 00 
044B85 74 67 74 2F 0968*  fn_dg_2_26: db "tgt/tiles/dg_2_26.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       36 2E 72 67 
       62 61 32 00 
044B9D 74 67 74 2F 0969*  fn_dg_2_27: db "tgt/tiles/dg_2_27.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       37 2E 72 67 
       62 61 32 00 
044BB5 74 67 74 2F 0970*  fn_dg_2_28: db "tgt/tiles/dg_2_28.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       38 2E 72 67 
       62 61 32 00 
044BCD 74 67 74 2F 0971*  fn_dg_2_29: db "tgt/tiles/dg_2_29.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       39 2E 72 67 
       62 61 32 00 
044BE5 74 67 74 2F 0972*  fn_dg_2_2A: db "tgt/tiles/dg_2_2A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       41 2E 72 67 
       62 61 32 00 
044BFD 74 67 74 2F 0973*  fn_dg_2_2B: db "tgt/tiles/dg_2_2B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       42 2E 72 67 
       62 61 32 00 
044C15 74 67 74 2F 0974*  fn_dg_2_2C: db "tgt/tiles/dg_2_2C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       43 2E 72 67 
       62 61 32 00 
044C2D 74 67 74 2F 0975*  fn_dg_2_2D: db "tgt/tiles/dg_2_2D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       44 2E 72 67 
       62 61 32 00 
044C45 74 67 74 2F 0976*  fn_dg_2_2E: db "tgt/tiles/dg_2_2E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       45 2E 72 67 
       62 61 32 00 
044C5D 74 67 74 2F 0977*  fn_dg_2_2F: db "tgt/tiles/dg_2_2F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 32 
       46 2E 72 67 
       62 61 32 00 
044C75 74 67 74 2F 0978*  fn_dg_2_30: db "tgt/tiles/dg_2_30.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       30 2E 72 67 
       62 61 32 00 
044C8D 74 67 74 2F 0979*  fn_dg_2_31: db "tgt/tiles/dg_2_31.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       31 2E 72 67 
       62 61 32 00 
044CA5 74 67 74 2F 0980*  fn_dg_2_32: db "tgt/tiles/dg_2_32.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       32 2E 72 67 
       62 61 32 00 
044CBD 74 67 74 2F 0981*  fn_dg_2_33: db "tgt/tiles/dg_2_33.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       33 2E 72 67 
       62 61 32 00 
044CD5 74 67 74 2F 0982*  fn_dg_2_34: db "tgt/tiles/dg_2_34.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       34 2E 72 67 
       62 61 32 00 
044CED 74 67 74 2F 0983*  fn_dg_2_35: db "tgt/tiles/dg_2_35.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       35 2E 72 67 
       62 61 32 00 
044D05 74 67 74 2F 0984*  fn_dg_2_36: db "tgt/tiles/dg_2_36.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       36 2E 72 67 
       62 61 32 00 
044D1D 74 67 74 2F 0985*  fn_dg_2_37: db "tgt/tiles/dg_2_37.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       37 2E 72 67 
       62 61 32 00 
044D35 74 67 74 2F 0986*  fn_dg_2_38: db "tgt/tiles/dg_2_38.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       38 2E 72 67 
       62 61 32 00 
044D4D 74 67 74 2F 0987*  fn_dg_2_39: db "tgt/tiles/dg_2_39.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       39 2E 72 67 
       62 61 32 00 
044D65 74 67 74 2F 0988*  fn_dg_2_3A: db "tgt/tiles/dg_2_3A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       41 2E 72 67 
       62 61 32 00 
044D7D 74 67 74 2F 0989*  fn_dg_2_3B: db "tgt/tiles/dg_2_3B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       42 2E 72 67 
       62 61 32 00 
044D95 74 67 74 2F 0990*  fn_dg_2_3C: db "tgt/tiles/dg_2_3C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       43 2E 72 67 
       62 61 32 00 
044DAD 74 67 74 2F 0991*  fn_dg_2_3D: db "tgt/tiles/dg_2_3D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       44 2E 72 67 
       62 61 32 00 
044DC5 74 67 74 2F 0992*  fn_dg_2_3E: db "tgt/tiles/dg_2_3E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       45 2E 72 67 
       62 61 32 00 
044DDD 74 67 74 2F 0993*  fn_dg_2_3F: db "tgt/tiles/dg_2_3F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 33 
       46 2E 72 67 
       62 61 32 00 
044DF5 74 67 74 2F 0994*  fn_dg_2_40: db "tgt/tiles/dg_2_40.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       30 2E 72 67 
       62 61 32 00 
044E0D 74 67 74 2F 0995*  fn_dg_2_41: db "tgt/tiles/dg_2_41.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       31 2E 72 67 
       62 61 32 00 
044E25 74 67 74 2F 0996*  fn_dg_2_42: db "tgt/tiles/dg_2_42.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       32 2E 72 67 
       62 61 32 00 
044E3D 74 67 74 2F 0997*  fn_dg_2_43: db "tgt/tiles/dg_2_43.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       33 2E 72 67 
       62 61 32 00 
044E55 74 67 74 2F 0998*  fn_dg_2_44: db "tgt/tiles/dg_2_44.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       34 2E 72 67 
       62 61 32 00 
044E6D 74 67 74 2F 0999*  fn_dg_2_45: db "tgt/tiles/dg_2_45.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       35 2E 72 67 
       62 61 32 00 
044E85 74 67 74 2F 1000*  fn_dg_2_46: db "tgt/tiles/dg_2_46.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       36 2E 72 67 
       62 61 32 00 
044E9D 74 67 74 2F 1001*  fn_dg_2_47: db "tgt/tiles/dg_2_47.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       37 2E 72 67 
       62 61 32 00 
044EB5 74 67 74 2F 1002*  fn_dg_2_48: db "tgt/tiles/dg_2_48.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       38 2E 72 67 
       62 61 32 00 
044ECD 74 67 74 2F 1003*  fn_dg_2_49: db "tgt/tiles/dg_2_49.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       39 2E 72 67 
       62 61 32 00 
044EE5 74 67 74 2F 1004*  fn_dg_2_4A: db "tgt/tiles/dg_2_4A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       41 2E 72 67 
       62 61 32 00 
044EFD 74 67 74 2F 1005*  fn_dg_2_4B: db "tgt/tiles/dg_2_4B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       42 2E 72 67 
       62 61 32 00 
044F15 74 67 74 2F 1006*  fn_dg_2_4C: db "tgt/tiles/dg_2_4C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       43 2E 72 67 
       62 61 32 00 
044F2D 74 67 74 2F 1007*  fn_dg_2_4D: db "tgt/tiles/dg_2_4D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       44 2E 72 67 
       62 61 32 00 
044F45 74 67 74 2F 1008*  fn_dg_2_4E: db "tgt/tiles/dg_2_4E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       45 2E 72 67 
       62 61 32 00 
044F5D 74 67 74 2F 1009*  fn_dg_2_4F: db "tgt/tiles/dg_2_4F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 34 
       46 2E 72 67 
       62 61 32 00 
044F75 74 67 74 2F 1010*  fn_dg_2_50: db "tgt/tiles/dg_2_50.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 35 
       30 2E 72 67 
       62 61 32 00 
044F8D 74 67 74 2F 1011*  fn_dg_2_51: db "tgt/tiles/dg_2_51.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 35 
       31 2E 72 67 
       62 61 32 00 
044FA5 74 67 74 2F 1012*  fn_dg_2_52: db "tgt/tiles/dg_2_52.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 35 
       32 2E 72 67 
       62 61 32 00 
044FBD 74 67 74 2F 1013*  fn_dg_2_53: db "tgt/tiles/dg_2_53.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 35 
       33 2E 72 67 
       62 61 32 00 
044FD5 74 67 74 2F 1014*  fn_dg_2_54: db "tgt/tiles/dg_2_54.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 35 
       34 2E 72 67 
       62 61 32 00 
044FED 74 67 74 2F 1015*  fn_dg_2_55: db "tgt/tiles/dg_2_55.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 35 
       35 2E 72 67 
       62 61 32 00 
045005 74 67 74 2F 1016*  fn_dg_2_56: db "tgt/tiles/dg_2_56.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 35 
       36 2E 72 67 
       62 61 32 00 
04501D 74 67 74 2F 1017*  fn_dg_2_57: db "tgt/tiles/dg_2_57.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 32 5F 35 
       37 2E 72 67 
       62 61 32 00 
045035 74 67 74 2F 1018*  fn_dg_3_00: db "tgt/tiles/dg_3_00.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       30 2E 72 67 
       62 61 32 00 
04504D 74 67 74 2F 1019*  fn_dg_3_01: db "tgt/tiles/dg_3_01.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       31 2E 72 67 
       62 61 32 00 
045065 74 67 74 2F 1020*  fn_dg_3_02: db "tgt/tiles/dg_3_02.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       32 2E 72 67 
       62 61 32 00 
04507D 74 67 74 2F 1021*  fn_dg_3_03: db "tgt/tiles/dg_3_03.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       33 2E 72 67 
       62 61 32 00 
045095 74 67 74 2F 1022*  fn_dg_3_04: db "tgt/tiles/dg_3_04.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       34 2E 72 67 
       62 61 32 00 
0450AD 74 67 74 2F 1023*  fn_dg_3_05: db "tgt/tiles/dg_3_05.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       35 2E 72 67 
       62 61 32 00 
0450C5 74 67 74 2F 1024*  fn_dg_3_06: db "tgt/tiles/dg_3_06.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       36 2E 72 67 
       62 61 32 00 
0450DD 74 67 74 2F 1025*  fn_dg_3_07: db "tgt/tiles/dg_3_07.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       37 2E 72 67 
       62 61 32 00 
0450F5 74 67 74 2F 1026*  fn_dg_3_08: db "tgt/tiles/dg_3_08.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       38 2E 72 67 
       62 61 32 00 
04510D 74 67 74 2F 1027*  fn_dg_3_09: db "tgt/tiles/dg_3_09.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       39 2E 72 67 
       62 61 32 00 
045125 74 67 74 2F 1028*  fn_dg_3_0A: db "tgt/tiles/dg_3_0A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       41 2E 72 67 
       62 61 32 00 
04513D 74 67 74 2F 1029*  fn_dg_3_0B: db "tgt/tiles/dg_3_0B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       42 2E 72 67 
       62 61 32 00 
045155 74 67 74 2F 1030*  fn_dg_3_0C: db "tgt/tiles/dg_3_0C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       43 2E 72 67 
       62 61 32 00 
04516D 74 67 74 2F 1031*  fn_dg_3_0D: db "tgt/tiles/dg_3_0D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       44 2E 72 67 
       62 61 32 00 
045185 74 67 74 2F 1032*  fn_dg_3_0E: db "tgt/tiles/dg_3_0E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       45 2E 72 67 
       62 61 32 00 
04519D 74 67 74 2F 1033*  fn_dg_3_0F: db "tgt/tiles/dg_3_0F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 30 
       46 2E 72 67 
       62 61 32 00 
0451B5 74 67 74 2F 1034*  fn_dg_3_10: db "tgt/tiles/dg_3_10.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       30 2E 72 67 
       62 61 32 00 
0451CD 74 67 74 2F 1035*  fn_dg_3_11: db "tgt/tiles/dg_3_11.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       31 2E 72 67 
       62 61 32 00 
0451E5 74 67 74 2F 1036*  fn_dg_3_12: db "tgt/tiles/dg_3_12.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       32 2E 72 67 
       62 61 32 00 
0451FD 74 67 74 2F 1037*  fn_dg_3_13: db "tgt/tiles/dg_3_13.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       33 2E 72 67 
       62 61 32 00 
045215 74 67 74 2F 1038*  fn_dg_3_14: db "tgt/tiles/dg_3_14.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       34 2E 72 67 
       62 61 32 00 
04522D 74 67 74 2F 1039*  fn_dg_3_15: db "tgt/tiles/dg_3_15.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       35 2E 72 67 
       62 61 32 00 
045245 74 67 74 2F 1040*  fn_dg_3_16: db "tgt/tiles/dg_3_16.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       36 2E 72 67 
       62 61 32 00 
04525D 74 67 74 2F 1041*  fn_dg_3_17: db "tgt/tiles/dg_3_17.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       37 2E 72 67 
       62 61 32 00 
045275 74 67 74 2F 1042*  fn_dg_3_18: db "tgt/tiles/dg_3_18.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       38 2E 72 67 
       62 61 32 00 
04528D 74 67 74 2F 1043*  fn_dg_3_19: db "tgt/tiles/dg_3_19.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       39 2E 72 67 
       62 61 32 00 
0452A5 74 67 74 2F 1044*  fn_dg_3_1A: db "tgt/tiles/dg_3_1A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       41 2E 72 67 
       62 61 32 00 
0452BD 74 67 74 2F 1045*  fn_dg_3_1B: db "tgt/tiles/dg_3_1B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       42 2E 72 67 
       62 61 32 00 
0452D5 74 67 74 2F 1046*  fn_dg_3_1C: db "tgt/tiles/dg_3_1C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       43 2E 72 67 
       62 61 32 00 
0452ED 74 67 74 2F 1047*  fn_dg_3_1D: db "tgt/tiles/dg_3_1D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       44 2E 72 67 
       62 61 32 00 
045305 74 67 74 2F 1048*  fn_dg_3_1E: db "tgt/tiles/dg_3_1E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       45 2E 72 67 
       62 61 32 00 
04531D 74 67 74 2F 1049*  fn_dg_3_1F: db "tgt/tiles/dg_3_1F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 31 
       46 2E 72 67 
       62 61 32 00 
045335 74 67 74 2F 1050*  fn_dg_3_20: db "tgt/tiles/dg_3_20.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       30 2E 72 67 
       62 61 32 00 
04534D 74 67 74 2F 1051*  fn_dg_3_21: db "tgt/tiles/dg_3_21.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       31 2E 72 67 
       62 61 32 00 
045365 74 67 74 2F 1052*  fn_dg_3_22: db "tgt/tiles/dg_3_22.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       32 2E 72 67 
       62 61 32 00 
04537D 74 67 74 2F 1053*  fn_dg_3_23: db "tgt/tiles/dg_3_23.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       33 2E 72 67 
       62 61 32 00 
045395 74 67 74 2F 1054*  fn_dg_3_24: db "tgt/tiles/dg_3_24.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       34 2E 72 67 
       62 61 32 00 
0453AD 74 67 74 2F 1055*  fn_dg_3_25: db "tgt/tiles/dg_3_25.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       35 2E 72 67 
       62 61 32 00 
0453C5 74 67 74 2F 1056*  fn_dg_3_26: db "tgt/tiles/dg_3_26.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       36 2E 72 67 
       62 61 32 00 
0453DD 74 67 74 2F 1057*  fn_dg_3_27: db "tgt/tiles/dg_3_27.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       37 2E 72 67 
       62 61 32 00 
0453F5 74 67 74 2F 1058*  fn_dg_3_28: db "tgt/tiles/dg_3_28.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       38 2E 72 67 
       62 61 32 00 
04540D 74 67 74 2F 1059*  fn_dg_3_29: db "tgt/tiles/dg_3_29.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       39 2E 72 67 
       62 61 32 00 
045425 74 67 74 2F 1060*  fn_dg_3_2A: db "tgt/tiles/dg_3_2A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       41 2E 72 67 
       62 61 32 00 
04543D 74 67 74 2F 1061*  fn_dg_3_2B: db "tgt/tiles/dg_3_2B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       42 2E 72 67 
       62 61 32 00 
045455 74 67 74 2F 1062*  fn_dg_3_2C: db "tgt/tiles/dg_3_2C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       43 2E 72 67 
       62 61 32 00 
04546D 74 67 74 2F 1063*  fn_dg_3_2D: db "tgt/tiles/dg_3_2D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       44 2E 72 67 
       62 61 32 00 
045485 74 67 74 2F 1064*  fn_dg_3_2E: db "tgt/tiles/dg_3_2E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       45 2E 72 67 
       62 61 32 00 
04549D 74 67 74 2F 1065*  fn_dg_3_2F: db "tgt/tiles/dg_3_2F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 32 
       46 2E 72 67 
       62 61 32 00 
0454B5 74 67 74 2F 1066*  fn_dg_3_30: db "tgt/tiles/dg_3_30.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       30 2E 72 67 
       62 61 32 00 
0454CD 74 67 74 2F 1067*  fn_dg_3_31: db "tgt/tiles/dg_3_31.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       31 2E 72 67 
       62 61 32 00 
0454E5 74 67 74 2F 1068*  fn_dg_3_32: db "tgt/tiles/dg_3_32.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       32 2E 72 67 
       62 61 32 00 
0454FD 74 67 74 2F 1069*  fn_dg_3_33: db "tgt/tiles/dg_3_33.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       33 2E 72 67 
       62 61 32 00 
045515 74 67 74 2F 1070*  fn_dg_3_34: db "tgt/tiles/dg_3_34.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       34 2E 72 67 
       62 61 32 00 
04552D 74 67 74 2F 1071*  fn_dg_3_35: db "tgt/tiles/dg_3_35.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       35 2E 72 67 
       62 61 32 00 
045545 74 67 74 2F 1072*  fn_dg_3_36: db "tgt/tiles/dg_3_36.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       36 2E 72 67 
       62 61 32 00 
04555D 74 67 74 2F 1073*  fn_dg_3_37: db "tgt/tiles/dg_3_37.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       37 2E 72 67 
       62 61 32 00 
045575 74 67 74 2F 1074*  fn_dg_3_38: db "tgt/tiles/dg_3_38.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       38 2E 72 67 
       62 61 32 00 
04558D 74 67 74 2F 1075*  fn_dg_3_39: db "tgt/tiles/dg_3_39.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       39 2E 72 67 
       62 61 32 00 
0455A5 74 67 74 2F 1076*  fn_dg_3_3A: db "tgt/tiles/dg_3_3A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       41 2E 72 67 
       62 61 32 00 
0455BD 74 67 74 2F 1077*  fn_dg_3_3B: db "tgt/tiles/dg_3_3B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       42 2E 72 67 
       62 61 32 00 
0455D5 74 67 74 2F 1078*  fn_dg_3_3C: db "tgt/tiles/dg_3_3C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       43 2E 72 67 
       62 61 32 00 
0455ED 74 67 74 2F 1079*  fn_dg_3_3D: db "tgt/tiles/dg_3_3D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       44 2E 72 67 
       62 61 32 00 
045605 74 67 74 2F 1080*  fn_dg_3_3E: db "tgt/tiles/dg_3_3E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       45 2E 72 67 
       62 61 32 00 
04561D 74 67 74 2F 1081*  fn_dg_3_3F: db "tgt/tiles/dg_3_3F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 33 
       46 2E 72 67 
       62 61 32 00 
045635 74 67 74 2F 1082*  fn_dg_3_40: db "tgt/tiles/dg_3_40.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 34 
       30 2E 72 67 
       62 61 32 00 
04564D 74 67 74 2F 1083*  fn_dg_3_41: db "tgt/tiles/dg_3_41.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 34 
       31 2E 72 67 
       62 61 32 00 
045665 74 67 74 2F 1084*  fn_dg_3_42: db "tgt/tiles/dg_3_42.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 34 
       32 2E 72 67 
       62 61 32 00 
04567D 74 67 74 2F 1085*  fn_dg_3_43: db "tgt/tiles/dg_3_43.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 33 5F 34 
       33 2E 72 67 
       62 61 32 00 
045695 74 67 74 2F 1086*  fn_dg_4_00: db "tgt/tiles/dg_4_00.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       30 2E 72 67 
       62 61 32 00 
0456AD 74 67 74 2F 1087*  fn_dg_4_01: db "tgt/tiles/dg_4_01.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       31 2E 72 67 
       62 61 32 00 
0456C5 74 67 74 2F 1088*  fn_dg_4_02: db "tgt/tiles/dg_4_02.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       32 2E 72 67 
       62 61 32 00 
0456DD 74 67 74 2F 1089*  fn_dg_4_03: db "tgt/tiles/dg_4_03.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       33 2E 72 67 
       62 61 32 00 
0456F5 74 67 74 2F 1090*  fn_dg_4_04: db "tgt/tiles/dg_4_04.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       34 2E 72 67 
       62 61 32 00 
04570D 74 67 74 2F 1091*  fn_dg_4_05: db "tgt/tiles/dg_4_05.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       35 2E 72 67 
       62 61 32 00 
045725 74 67 74 2F 1092*  fn_dg_4_06: db "tgt/tiles/dg_4_06.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       36 2E 72 67 
       62 61 32 00 
04573D 74 67 74 2F 1093*  fn_dg_4_07: db "tgt/tiles/dg_4_07.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       37 2E 72 67 
       62 61 32 00 
045755 74 67 74 2F 1094*  fn_dg_4_08: db "tgt/tiles/dg_4_08.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       38 2E 72 67 
       62 61 32 00 
04576D 74 67 74 2F 1095*  fn_dg_4_09: db "tgt/tiles/dg_4_09.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       39 2E 72 67 
       62 61 32 00 
045785 74 67 74 2F 1096*  fn_dg_4_0A: db "tgt/tiles/dg_4_0A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       41 2E 72 67 
       62 61 32 00 
04579D 74 67 74 2F 1097*  fn_dg_4_0B: db "tgt/tiles/dg_4_0B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       42 2E 72 67 
       62 61 32 00 
0457B5 74 67 74 2F 1098*  fn_dg_4_0C: db "tgt/tiles/dg_4_0C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       43 2E 72 67 
       62 61 32 00 
0457CD 74 67 74 2F 1099*  fn_dg_4_0D: db "tgt/tiles/dg_4_0D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       44 2E 72 67 
       62 61 32 00 
0457E5 74 67 74 2F 1100*  fn_dg_4_0E: db "tgt/tiles/dg_4_0E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       45 2E 72 67 
       62 61 32 00 
0457FD 74 67 74 2F 1101*  fn_dg_4_0F: db "tgt/tiles/dg_4_0F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 30 
       46 2E 72 67 
       62 61 32 00 
045815 74 67 74 2F 1102*  fn_dg_4_10: db "tgt/tiles/dg_4_10.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       30 2E 72 67 
       62 61 32 00 
04582D 74 67 74 2F 1103*  fn_dg_4_11: db "tgt/tiles/dg_4_11.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       31 2E 72 67 
       62 61 32 00 
045845 74 67 74 2F 1104*  fn_dg_4_12: db "tgt/tiles/dg_4_12.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       32 2E 72 67 
       62 61 32 00 
04585D 74 67 74 2F 1105*  fn_dg_4_13: db "tgt/tiles/dg_4_13.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       33 2E 72 67 
       62 61 32 00 
045875 74 67 74 2F 1106*  fn_dg_4_14: db "tgt/tiles/dg_4_14.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       34 2E 72 67 
       62 61 32 00 
04588D 74 67 74 2F 1107*  fn_dg_4_15: db "tgt/tiles/dg_4_15.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       35 2E 72 67 
       62 61 32 00 
0458A5 74 67 74 2F 1108*  fn_dg_4_16: db "tgt/tiles/dg_4_16.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       36 2E 72 67 
       62 61 32 00 
0458BD 74 67 74 2F 1109*  fn_dg_4_17: db "tgt/tiles/dg_4_17.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       37 2E 72 67 
       62 61 32 00 
0458D5 74 67 74 2F 1110*  fn_dg_4_18: db "tgt/tiles/dg_4_18.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       38 2E 72 67 
       62 61 32 00 
0458ED 74 67 74 2F 1111*  fn_dg_4_19: db "tgt/tiles/dg_4_19.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       39 2E 72 67 
       62 61 32 00 
045905 74 67 74 2F 1112*  fn_dg_4_1A: db "tgt/tiles/dg_4_1A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       41 2E 72 67 
       62 61 32 00 
04591D 74 67 74 2F 1113*  fn_dg_4_1B: db "tgt/tiles/dg_4_1B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       42 2E 72 67 
       62 61 32 00 
045935 74 67 74 2F 1114*  fn_dg_4_1C: db "tgt/tiles/dg_4_1C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       43 2E 72 67 
       62 61 32 00 
04594D 74 67 74 2F 1115*  fn_dg_4_1D: db "tgt/tiles/dg_4_1D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       44 2E 72 67 
       62 61 32 00 
045965 74 67 74 2F 1116*  fn_dg_4_1E: db "tgt/tiles/dg_4_1E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       45 2E 72 67 
       62 61 32 00 
04597D 74 67 74 2F 1117*  fn_dg_4_1F: db "tgt/tiles/dg_4_1F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 31 
       46 2E 72 67 
       62 61 32 00 
045995 74 67 74 2F 1118*  fn_dg_4_20: db "tgt/tiles/dg_4_20.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       30 2E 72 67 
       62 61 32 00 
0459AD 74 67 74 2F 1119*  fn_dg_4_21: db "tgt/tiles/dg_4_21.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       31 2E 72 67 
       62 61 32 00 
0459C5 74 67 74 2F 1120*  fn_dg_4_22: db "tgt/tiles/dg_4_22.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       32 2E 72 67 
       62 61 32 00 
0459DD 74 67 74 2F 1121*  fn_dg_4_23: db "tgt/tiles/dg_4_23.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       33 2E 72 67 
       62 61 32 00 
0459F5 74 67 74 2F 1122*  fn_dg_4_24: db "tgt/tiles/dg_4_24.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       34 2E 72 67 
       62 61 32 00 
045A0D 74 67 74 2F 1123*  fn_dg_4_25: db "tgt/tiles/dg_4_25.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       35 2E 72 67 
       62 61 32 00 
045A25 74 67 74 2F 1124*  fn_dg_4_26: db "tgt/tiles/dg_4_26.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       36 2E 72 67 
       62 61 32 00 
045A3D 74 67 74 2F 1125*  fn_dg_4_27: db "tgt/tiles/dg_4_27.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       37 2E 72 67 
       62 61 32 00 
045A55 74 67 74 2F 1126*  fn_dg_4_28: db "tgt/tiles/dg_4_28.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       38 2E 72 67 
       62 61 32 00 
045A6D 74 67 74 2F 1127*  fn_dg_4_29: db "tgt/tiles/dg_4_29.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       39 2E 72 67 
       62 61 32 00 
045A85 74 67 74 2F 1128*  fn_dg_4_2A: db "tgt/tiles/dg_4_2A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       41 2E 72 67 
       62 61 32 00 
045A9D 74 67 74 2F 1129*  fn_dg_4_2B: db "tgt/tiles/dg_4_2B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       42 2E 72 67 
       62 61 32 00 
045AB5 74 67 74 2F 1130*  fn_dg_4_2C: db "tgt/tiles/dg_4_2C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       43 2E 72 67 
       62 61 32 00 
045ACD 74 67 74 2F 1131*  fn_dg_4_2D: db "tgt/tiles/dg_4_2D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       44 2E 72 67 
       62 61 32 00 
045AE5 74 67 74 2F 1132*  fn_dg_4_2E: db "tgt/tiles/dg_4_2E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 34 5F 32 
       45 2E 72 67 
       62 61 32 00 
045AFD 74 67 74 2F 1133*  fn_dg_5_00: db "tgt/tiles/dg_5_00.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       30 2E 72 67 
       62 61 32 00 
045B15 74 67 74 2F 1134*  fn_dg_5_01: db "tgt/tiles/dg_5_01.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       31 2E 72 67 
       62 61 32 00 
045B2D 74 67 74 2F 1135*  fn_dg_5_02: db "tgt/tiles/dg_5_02.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       32 2E 72 67 
       62 61 32 00 
045B45 74 67 74 2F 1136*  fn_dg_5_03: db "tgt/tiles/dg_5_03.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       33 2E 72 67 
       62 61 32 00 
045B5D 74 67 74 2F 1137*  fn_dg_5_04: db "tgt/tiles/dg_5_04.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       34 2E 72 67 
       62 61 32 00 
045B75 74 67 74 2F 1138*  fn_dg_5_05: db "tgt/tiles/dg_5_05.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       35 2E 72 67 
       62 61 32 00 
045B8D 74 67 74 2F 1139*  fn_dg_5_06: db "tgt/tiles/dg_5_06.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       36 2E 72 67 
       62 61 32 00 
045BA5 74 67 74 2F 1140*  fn_dg_5_07: db "tgt/tiles/dg_5_07.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       37 2E 72 67 
       62 61 32 00 
045BBD 74 67 74 2F 1141*  fn_dg_5_08: db "tgt/tiles/dg_5_08.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       38 2E 72 67 
       62 61 32 00 
045BD5 74 67 74 2F 1142*  fn_dg_5_09: db "tgt/tiles/dg_5_09.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       39 2E 72 67 
       62 61 32 00 
045BED 74 67 74 2F 1143*  fn_dg_5_0A: db "tgt/tiles/dg_5_0A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       41 2E 72 67 
       62 61 32 00 
045C05 74 67 74 2F 1144*  fn_dg_5_0B: db "tgt/tiles/dg_5_0B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       42 2E 72 67 
       62 61 32 00 
045C1D 74 67 74 2F 1145*  fn_dg_5_0C: db "tgt/tiles/dg_5_0C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       43 2E 72 67 
       62 61 32 00 
045C35 74 67 74 2F 1146*  fn_dg_5_0D: db "tgt/tiles/dg_5_0D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       44 2E 72 67 
       62 61 32 00 
045C4D 74 67 74 2F 1147*  fn_dg_5_0E: db "tgt/tiles/dg_5_0E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       45 2E 72 67 
       62 61 32 00 
045C65 74 67 74 2F 1148*  fn_dg_5_0F: db "tgt/tiles/dg_5_0F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 30 
       46 2E 72 67 
       62 61 32 00 
045C7D 74 67 74 2F 1149*  fn_dg_5_10: db "tgt/tiles/dg_5_10.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       30 2E 72 67 
       62 61 32 00 
045C95 74 67 74 2F 1150*  fn_dg_5_11: db "tgt/tiles/dg_5_11.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       31 2E 72 67 
       62 61 32 00 
045CAD 74 67 74 2F 1151*  fn_dg_5_12: db "tgt/tiles/dg_5_12.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       32 2E 72 67 
       62 61 32 00 
045CC5 74 67 74 2F 1152*  fn_dg_5_13: db "tgt/tiles/dg_5_13.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       33 2E 72 67 
       62 61 32 00 
045CDD 74 67 74 2F 1153*  fn_dg_5_14: db "tgt/tiles/dg_5_14.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       34 2E 72 67 
       62 61 32 00 
045CF5 74 67 74 2F 1154*  fn_dg_5_15: db "tgt/tiles/dg_5_15.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       35 2E 72 67 
       62 61 32 00 
045D0D 74 67 74 2F 1155*  fn_dg_5_16: db "tgt/tiles/dg_5_16.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       36 2E 72 67 
       62 61 32 00 
045D25 74 67 74 2F 1156*  fn_dg_5_17: db "tgt/tiles/dg_5_17.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       37 2E 72 67 
       62 61 32 00 
045D3D 74 67 74 2F 1157*  fn_dg_5_18: db "tgt/tiles/dg_5_18.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       38 2E 72 67 
       62 61 32 00 
045D55 74 67 74 2F 1158*  fn_dg_5_19: db "tgt/tiles/dg_5_19.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       39 2E 72 67 
       62 61 32 00 
045D6D 74 67 74 2F 1159*  fn_dg_5_1A: db "tgt/tiles/dg_5_1A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       41 2E 72 67 
       62 61 32 00 
045D85 74 67 74 2F 1160*  fn_dg_5_1B: db "tgt/tiles/dg_5_1B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       42 2E 72 67 
       62 61 32 00 
045D9D 74 67 74 2F 1161*  fn_dg_5_1C: db "tgt/tiles/dg_5_1C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       43 2E 72 67 
       62 61 32 00 
045DB5 74 67 74 2F 1162*  fn_dg_5_1D: db "tgt/tiles/dg_5_1D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       44 2E 72 67 
       62 61 32 00 
045DCD 74 67 74 2F 1163*  fn_dg_5_1E: db "tgt/tiles/dg_5_1E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       45 2E 72 67 
       62 61 32 00 
045DE5 74 67 74 2F 1164*  fn_dg_5_1F: db "tgt/tiles/dg_5_1F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 31 
       46 2E 72 67 
       62 61 32 00 
045DFD 74 67 74 2F 1165*  fn_dg_5_20: db "tgt/tiles/dg_5_20.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       30 2E 72 67 
       62 61 32 00 
045E15 74 67 74 2F 1166*  fn_dg_5_21: db "tgt/tiles/dg_5_21.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       31 2E 72 67 
       62 61 32 00 
045E2D 74 67 74 2F 1167*  fn_dg_5_22: db "tgt/tiles/dg_5_22.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       32 2E 72 67 
       62 61 32 00 
045E45 74 67 74 2F 1168*  fn_dg_5_23: db "tgt/tiles/dg_5_23.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       33 2E 72 67 
       62 61 32 00 
045E5D 74 67 74 2F 1169*  fn_dg_5_24: db "tgt/tiles/dg_5_24.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       34 2E 72 67 
       62 61 32 00 
045E75 74 67 74 2F 1170*  fn_dg_5_25: db "tgt/tiles/dg_5_25.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       35 2E 72 67 
       62 61 32 00 
045E8D 74 67 74 2F 1171*  fn_dg_5_26: db "tgt/tiles/dg_5_26.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       36 2E 72 67 
       62 61 32 00 
045EA5 74 67 74 2F 1172*  fn_dg_5_27: db "tgt/tiles/dg_5_27.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       37 2E 72 67 
       62 61 32 00 
045EBD 74 67 74 2F 1173*  fn_dg_5_28: db "tgt/tiles/dg_5_28.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       38 2E 72 67 
       62 61 32 00 
045ED5 74 67 74 2F 1174*  fn_dg_5_29: db "tgt/tiles/dg_5_29.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       39 2E 72 67 
       62 61 32 00 
045EED 74 67 74 2F 1175*  fn_dg_5_2A: db "tgt/tiles/dg_5_2A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       41 2E 72 67 
       62 61 32 00 
045F05 74 67 74 2F 1176*  fn_dg_5_2B: db "tgt/tiles/dg_5_2B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       42 2E 72 67 
       62 61 32 00 
045F1D 74 67 74 2F 1177*  fn_dg_5_2C: db "tgt/tiles/dg_5_2C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       43 2E 72 67 
       62 61 32 00 
045F35 74 67 74 2F 1178*  fn_dg_5_2D: db "tgt/tiles/dg_5_2D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       44 2E 72 67 
       62 61 32 00 
045F4D 74 67 74 2F 1179*  fn_dg_5_2E: db "tgt/tiles/dg_5_2E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       45 2E 72 67 
       62 61 32 00 
045F65 74 67 74 2F 1180*  fn_dg_5_2F: db "tgt/tiles/dg_5_2F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 32 
       46 2E 72 67 
       62 61 32 00 
045F7D 74 67 74 2F 1181*  fn_dg_5_30: db "tgt/tiles/dg_5_30.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       30 2E 72 67 
       62 61 32 00 
045F95 74 67 74 2F 1182*  fn_dg_5_31: db "tgt/tiles/dg_5_31.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       31 2E 72 67 
       62 61 32 00 
045FAD 74 67 74 2F 1183*  fn_dg_5_32: db "tgt/tiles/dg_5_32.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       32 2E 72 67 
       62 61 32 00 
045FC5 74 67 74 2F 1184*  fn_dg_5_33: db "tgt/tiles/dg_5_33.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       33 2E 72 67 
       62 61 32 00 
045FDD 74 67 74 2F 1185*  fn_dg_5_34: db "tgt/tiles/dg_5_34.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       34 2E 72 67 
       62 61 32 00 
045FF5 74 67 74 2F 1186*  fn_dg_5_35: db "tgt/tiles/dg_5_35.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       35 2E 72 67 
       62 61 32 00 
04600D 74 67 74 2F 1187*  fn_dg_5_36: db "tgt/tiles/dg_5_36.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       36 2E 72 67 
       62 61 32 00 
046025 74 67 74 2F 1188*  fn_dg_5_37: db "tgt/tiles/dg_5_37.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       37 2E 72 67 
       62 61 32 00 
04603D 74 67 74 2F 1189*  fn_dg_5_38: db "tgt/tiles/dg_5_38.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       38 2E 72 67 
       62 61 32 00 
046055 74 67 74 2F 1190*  fn_dg_5_39: db "tgt/tiles/dg_5_39.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       39 2E 72 67 
       62 61 32 00 
04606D 74 67 74 2F 1191*  fn_dg_5_3A: db "tgt/tiles/dg_5_3A.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       41 2E 72 67 
       62 61 32 00 
046085 74 67 74 2F 1192*  fn_dg_5_3B: db "tgt/tiles/dg_5_3B.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       42 2E 72 67 
       62 61 32 00 
04609D 74 67 74 2F 1193*  fn_dg_5_3C: db "tgt/tiles/dg_5_3C.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       43 2E 72 67 
       62 61 32 00 
0460B5 74 67 74 2F 1194*  fn_dg_5_3D: db "tgt/tiles/dg_5_3D.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       44 2E 72 67 
       62 61 32 00 
0460CD 74 67 74 2F 1195*  fn_dg_5_3E: db "tgt/tiles/dg_5_3E.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       45 2E 72 67 
       62 61 32 00 
0460E5 74 67 74 2F 1196*  fn_dg_5_3F: db "tgt/tiles/dg_5_3F.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 33 
       46 2E 72 67 
       62 61 32 00 
0460FD 74 67 74 2F 1197*  fn_dg_5_40: db "tgt/tiles/dg_5_40.rgba2",0
       74 69 6C 65 
       73 2F 64 67 
       5F 35 5F 34 
       30 2E 72 67 
       62 61 32 00 
046115             0047       include "images_sprites.inc"
046115             0001*  ; Generated by make_images.py
046115             0002*  
046115             0003*  sprites_num_images: equ 79
046115             0004*  
046115             0005*  ; buffer_ids:
046115             0006*  BUF_CRATER: equ 256
046115             0007*  BUF_EXPLOSION_A: equ 257
046115             0008*  BUF_EXPLOSION_B: equ 258
046115             0009*  BUF_EXPLOSION_C: equ 259
046115             0010*  BUF_EXPLOSION_D: equ 260
046115             0011*  BUF_EXPLOSION_E: equ 261
046115             0012*  BUF_FIREBALL_A: equ 262
046115             0013*  BUF_FIREBALL_B: equ 263
046115             0014*  BUF_LASER_A: equ 264
046115             0015*  BUF_LASER_B: equ 265
046115             0016*  BUF_PAD: equ 266
046115             0017*  BUF_SEEKER_000: equ 267
046115             0018*  BUF_SEEKER_008: equ 268
046115             0019*  BUF_SEEKER_016: equ 269
046115             0020*  BUF_SEEKER_024: equ 270
046115             0021*  BUF_SEEKER_032: equ 271
046115             0022*  BUF_SEEKER_040: equ 272
046115             0023*  BUF_SEEKER_048: equ 273
046115             0024*  BUF_SEEKER_056: equ 274
046115             0025*  BUF_SEEKER_064: equ 275
046115             0026*  BUF_SEEKER_072: equ 276
046115             0027*  BUF_SEEKER_080: equ 277
046115             0028*  BUF_SEEKER_088: equ 278
046115             0029*  BUF_SEEKER_096: equ 279
046115             0030*  BUF_SEEKER_104: equ 280
046115             0031*  BUF_SEEKER_112: equ 281
046115             0032*  BUF_SEEKER_120: equ 282
046115             0033*  BUF_SEEKER_128: equ 283
046115             0034*  BUF_SEEKER_136: equ 284
046115             0035*  BUF_SEEKER_144: equ 285
046115             0036*  BUF_SEEKER_152: equ 286
046115             0037*  BUF_SEEKER_160: equ 287
046115             0038*  BUF_SEEKER_168: equ 288
046115             0039*  BUF_SEEKER_176: equ 289
046115             0040*  BUF_SEEKER_184: equ 290
046115             0041*  BUF_SEEKER_192: equ 291
046115             0042*  BUF_SEEKER_200: equ 292
046115             0043*  BUF_SEEKER_208: equ 293
046115             0044*  BUF_SEEKER_216: equ 294
046115             0045*  BUF_SEEKER_224: equ 295
046115             0046*  BUF_SEEKER_232: equ 296
046115             0047*  BUF_SEEKER_240: equ 297
046115             0048*  BUF_SEEKER_248: equ 298
046115             0049*  BUF_SHIP_0L: equ 299
046115             0050*  BUF_SHIP_1C: equ 300
046115             0051*  BUF_SHIP_2R: equ 301
046115             0052*  BUF_SHIP_SMALL: equ 302
046115             0053*  BUF_TURRET_000: equ 303
046115             0054*  BUF_TURRET_008: equ 304
046115             0055*  BUF_TURRET_016: equ 305
046115             0056*  BUF_TURRET_024: equ 306
046115             0057*  BUF_TURRET_032: equ 307
046115             0058*  BUF_TURRET_040: equ 308
046115             0059*  BUF_TURRET_048: equ 309
046115             0060*  BUF_TURRET_056: equ 310
046115             0061*  BUF_TURRET_064: equ 311
046115             0062*  BUF_TURRET_072: equ 312
046115             0063*  BUF_TURRET_080: equ 313
046115             0064*  BUF_TURRET_088: equ 314
046115             0065*  BUF_TURRET_096: equ 315
046115             0066*  BUF_TURRET_104: equ 316
046115             0067*  BUF_TURRET_112: equ 317
046115             0068*  BUF_TURRET_120: equ 318
046115             0069*  BUF_TURRET_128: equ 319
046115             0070*  BUF_TURRET_136: equ 320
046115             0071*  BUF_TURRET_144: equ 321
046115             0072*  BUF_TURRET_152: equ 322
046115             0073*  BUF_TURRET_160: equ 323
046115             0074*  BUF_TURRET_168: equ 324
046115             0075*  BUF_TURRET_176: equ 325
046115             0076*  BUF_TURRET_184: equ 326
046115             0077*  BUF_TURRET_192: equ 327
046115             0078*  BUF_TURRET_200: equ 328
046115             0079*  BUF_TURRET_208: equ 329
046115             0080*  BUF_TURRET_216: equ 330
046115             0081*  BUF_TURRET_224: equ 331
046115             0082*  BUF_TURRET_232: equ 332
046115             0083*  BUF_TURRET_240: equ 333
046115             0084*  BUF_TURRET_248: equ 334
046115             0085*  
046115             0086*  sprites_image_list: ; type; width; height; size; filename; bufferId:
046115 01 00 00 10 0087*  	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       A3 66 04 00 
       01 00       
046127 01 00 00 10 0088*  	dl 1, 16, 16, 256, fn_explosion_a, 257
       00 00 10 00 
       00 00 01 00 
       B8 66 04 01 
       01 00       
046139 01 00 00 10 0089*  	dl 1, 16, 16, 256, fn_explosion_b, 258
       00 00 10 00 
       00 00 01 00 
       D2 66 04 02 
       01 00       
04614B 01 00 00 10 0090*  	dl 1, 16, 16, 256, fn_explosion_c, 259
       00 00 10 00 
       00 00 01 00 
       EC 66 04 03 
       01 00       
04615D 01 00 00 10 0091*  	dl 1, 16, 16, 256, fn_explosion_d, 260
       00 00 10 00 
       00 00 01 00 
       06 67 04 04 
       01 00       
04616F 01 00 00 10 0092*  	dl 1, 16, 16, 256, fn_explosion_e, 261
       00 00 10 00 
       00 00 01 00 
       20 67 04 05 
       01 00       
046181 01 00 00 07 0093*  	dl 1, 7, 7, 49, fn_fireball_a, 262
       00 00 07 00 
       00 31 00 00 
       3A 67 04 06 
       01 00       
046193 01 00 00 07 0094*  	dl 1, 7, 7, 49, fn_fireball_b, 263
       00 00 07 00 
       00 31 00 00 
       53 67 04 07 
       01 00       
0461A5 01 00 00 05 0095*  	dl 1, 5, 13, 65, fn_laser_a, 264
       00 00 0D 00 
       00 41 00 00 
       6C 67 04 08 
       01 00       
0461B7 01 00 00 05 0096*  	dl 1, 5, 13, 65, fn_laser_b, 265
       00 00 0D 00 
       00 41 00 00 
       82 67 04 09 
       01 00       
0461C9 01 00 00 10 0097*  	dl 1, 16, 16, 256, fn_pad, 266
       00 00 10 00 
       00 00 01 00 
       98 67 04 0A 
       01 00       
0461DB 01 00 00 10 0098*  	dl 1, 16, 16, 256, fn_seeker_000, 267
       00 00 10 00 
       00 00 01 00 
       AA 67 04 0B 
       01 00       
0461ED 01 00 00 10 0099*  	dl 1, 16, 16, 256, fn_seeker_008, 268
       00 00 10 00 
       00 00 01 00 
       C3 67 04 0C 
       01 00       
0461FF 01 00 00 10 0100*  	dl 1, 16, 16, 256, fn_seeker_016, 269
       00 00 10 00 
       00 00 01 00 
       DC 67 04 0D 
       01 00       
046211 01 00 00 10 0101*  	dl 1, 16, 16, 256, fn_seeker_024, 270
       00 00 10 00 
       00 00 01 00 
       F5 67 04 0E 
       01 00       
046223 01 00 00 10 0102*  	dl 1, 16, 16, 256, fn_seeker_032, 271
       00 00 10 00 
       00 00 01 00 
       0E 68 04 0F 
       01 00       
046235 01 00 00 10 0103*  	dl 1, 16, 16, 256, fn_seeker_040, 272
       00 00 10 00 
       00 00 01 00 
       27 68 04 10 
       01 00       
046247 01 00 00 10 0104*  	dl 1, 16, 16, 256, fn_seeker_048, 273
       00 00 10 00 
       00 00 01 00 
       40 68 04 11 
       01 00       
046259 01 00 00 10 0105*  	dl 1, 16, 16, 256, fn_seeker_056, 274
       00 00 10 00 
       00 00 01 00 
       59 68 04 12 
       01 00       
04626B 01 00 00 10 0106*  	dl 1, 16, 16, 256, fn_seeker_064, 275
       00 00 10 00 
       00 00 01 00 
       72 68 04 13 
       01 00       
04627D 01 00 00 10 0107*  	dl 1, 16, 16, 256, fn_seeker_072, 276
       00 00 10 00 
       00 00 01 00 
       8B 68 04 14 
       01 00       
04628F 01 00 00 10 0108*  	dl 1, 16, 16, 256, fn_seeker_080, 277
       00 00 10 00 
       00 00 01 00 
       A4 68 04 15 
       01 00       
0462A1 01 00 00 10 0109*  	dl 1, 16, 16, 256, fn_seeker_088, 278
       00 00 10 00 
       00 00 01 00 
       BD 68 04 16 
       01 00       
0462B3 01 00 00 10 0110*  	dl 1, 16, 16, 256, fn_seeker_096, 279
       00 00 10 00 
       00 00 01 00 
       D6 68 04 17 
       01 00       
0462C5 01 00 00 10 0111*  	dl 1, 16, 16, 256, fn_seeker_104, 280
       00 00 10 00 
       00 00 01 00 
       EF 68 04 18 
       01 00       
0462D7 01 00 00 10 0112*  	dl 1, 16, 16, 256, fn_seeker_112, 281
       00 00 10 00 
       00 00 01 00 
       08 69 04 19 
       01 00       
0462E9 01 00 00 10 0113*  	dl 1, 16, 16, 256, fn_seeker_120, 282
       00 00 10 00 
       00 00 01 00 
       21 69 04 1A 
       01 00       
0462FB 01 00 00 10 0114*  	dl 1, 16, 16, 256, fn_seeker_128, 283
       00 00 10 00 
       00 00 01 00 
       3A 69 04 1B 
       01 00       
04630D 01 00 00 10 0115*  	dl 1, 16, 16, 256, fn_seeker_136, 284
       00 00 10 00 
       00 00 01 00 
       53 69 04 1C 
       01 00       
04631F 01 00 00 10 0116*  	dl 1, 16, 16, 256, fn_seeker_144, 285
       00 00 10 00 
       00 00 01 00 
       6C 69 04 1D 
       01 00       
046331 01 00 00 10 0117*  	dl 1, 16, 16, 256, fn_seeker_152, 286
       00 00 10 00 
       00 00 01 00 
       85 69 04 1E 
       01 00       
046343 01 00 00 10 0118*  	dl 1, 16, 16, 256, fn_seeker_160, 287
       00 00 10 00 
       00 00 01 00 
       9E 69 04 1F 
       01 00       
046355 01 00 00 10 0119*  	dl 1, 16, 16, 256, fn_seeker_168, 288
       00 00 10 00 
       00 00 01 00 
       B7 69 04 20 
       01 00       
046367 01 00 00 10 0120*  	dl 1, 16, 16, 256, fn_seeker_176, 289
       00 00 10 00 
       00 00 01 00 
       D0 69 04 21 
       01 00       
046379 01 00 00 10 0121*  	dl 1, 16, 16, 256, fn_seeker_184, 290
       00 00 10 00 
       00 00 01 00 
       E9 69 04 22 
       01 00       
04638B 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_seeker_192, 291
       00 00 10 00 
       00 00 01 00 
       02 6A 04 23 
       01 00       
04639D 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_seeker_200, 292
       00 00 10 00 
       00 00 01 00 
       1B 6A 04 24 
       01 00       
0463AF 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_seeker_208, 293
       00 00 10 00 
       00 00 01 00 
       34 6A 04 25 
       01 00       
0463C1 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_seeker_216, 294
       00 00 10 00 
       00 00 01 00 
       4D 6A 04 26 
       01 00       
0463D3 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_seeker_224, 295
       00 00 10 00 
       00 00 01 00 
       66 6A 04 27 
       01 00       
0463E5 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_seeker_232, 296
       00 00 10 00 
       00 00 01 00 
       7F 6A 04 28 
       01 00       
0463F7 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_seeker_240, 297
       00 00 10 00 
       00 00 01 00 
       98 6A 04 29 
       01 00       
046409 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_seeker_248, 298
       00 00 10 00 
       00 00 01 00 
       B1 6A 04 2A 
       01 00       
04641B 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_ship_0l, 299
       00 00 10 00 
       00 00 01 00 
       CA 6A 04 2B 
       01 00       
04642D 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_ship_1c, 300
       00 00 10 00 
       00 00 01 00 
       E0 6A 04 2C 
       01 00       
04643F 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_ship_2r, 301
       00 00 10 00 
       00 00 01 00 
       F6 6A 04 2D 
       01 00       
046451 01 00 00 08 0133*  	dl 1, 8, 8, 64, fn_ship_small, 302
       00 00 08 00 
       00 40 00 00 
       0C 6B 04 2E 
       01 00       
046463 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_turret_000, 303
       00 00 10 00 
       00 00 01 00 
       25 6B 04 2F 
       01 00       
046475 01 00 00 10 0135*  	dl 1, 16, 16, 256, fn_turret_008, 304
       00 00 10 00 
       00 00 01 00 
       3E 6B 04 30 
       01 00       
046487 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_turret_016, 305
       00 00 10 00 
       00 00 01 00 
       57 6B 04 31 
       01 00       
046499 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_turret_024, 306
       00 00 10 00 
       00 00 01 00 
       70 6B 04 32 
       01 00       
0464AB 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_turret_032, 307
       00 00 10 00 
       00 00 01 00 
       89 6B 04 33 
       01 00       
0464BD 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_turret_040, 308
       00 00 10 00 
       00 00 01 00 
       A2 6B 04 34 
       01 00       
0464CF 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_turret_048, 309
       00 00 10 00 
       00 00 01 00 
       BB 6B 04 35 
       01 00       
0464E1 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_turret_056, 310
       00 00 10 00 
       00 00 01 00 
       D4 6B 04 36 
       01 00       
0464F3 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_turret_064, 311
       00 00 10 00 
       00 00 01 00 
       ED 6B 04 37 
       01 00       
046505 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_turret_072, 312
       00 00 10 00 
       00 00 01 00 
       06 6C 04 38 
       01 00       
046517 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_turret_080, 313
       00 00 10 00 
       00 00 01 00 
       1F 6C 04 39 
       01 00       
046529 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_turret_088, 314
       00 00 10 00 
       00 00 01 00 
       38 6C 04 3A 
       01 00       
04653B 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_turret_096, 315
       00 00 10 00 
       00 00 01 00 
       51 6C 04 3B 
       01 00       
04654D 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_turret_104, 316
       00 00 10 00 
       00 00 01 00 
       6A 6C 04 3C 
       01 00       
04655F 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_turret_112, 317
       00 00 10 00 
       00 00 01 00 
       83 6C 04 3D 
       01 00       
046571 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_turret_120, 318
       00 00 10 00 
       00 00 01 00 
       9C 6C 04 3E 
       01 00       
046583 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_turret_128, 319
       00 00 10 00 
       00 00 01 00 
       B5 6C 04 3F 
       01 00       
046595 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_turret_136, 320
       00 00 10 00 
       00 00 01 00 
       CE 6C 04 40 
       01 00       
0465A7 01 00 00 10 0152*  	dl 1, 16, 16, 256, fn_turret_144, 321
       00 00 10 00 
       00 00 01 00 
       E7 6C 04 41 
       01 00       
0465B9 01 00 00 10 0153*  	dl 1, 16, 16, 256, fn_turret_152, 322
       00 00 10 00 
       00 00 01 00 
       00 6D 04 42 
       01 00       
0465CB 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_turret_160, 323
       00 00 10 00 
       00 00 01 00 
       19 6D 04 43 
       01 00       
0465DD 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_turret_168, 324
       00 00 10 00 
       00 00 01 00 
       32 6D 04 44 
       01 00       
0465EF 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_turret_176, 325
       00 00 10 00 
       00 00 01 00 
       4B 6D 04 45 
       01 00       
046601 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_turret_184, 326
       00 00 10 00 
       00 00 01 00 
       64 6D 04 46 
       01 00       
046613 01 00 00 10 0158*  	dl 1, 16, 16, 256, fn_turret_192, 327
       00 00 10 00 
       00 00 01 00 
       7D 6D 04 47 
       01 00       
046625 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_turret_200, 328
       00 00 10 00 
       00 00 01 00 
       96 6D 04 48 
       01 00       
046637 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_turret_208, 329
       00 00 10 00 
       00 00 01 00 
       AF 6D 04 49 
       01 00       
046649 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_turret_216, 330
       00 00 10 00 
       00 00 01 00 
       C8 6D 04 4A 
       01 00       
04665B 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_turret_224, 331
       00 00 10 00 
       00 00 01 00 
       E1 6D 04 4B 
       01 00       
04666D 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_turret_232, 332
       00 00 10 00 
       00 00 01 00 
       FA 6D 04 4C 
       01 00       
04667F 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_turret_240, 333
       00 00 10 00 
       00 00 01 00 
       13 6E 04 4D 
       01 00       
046691 01 00 00 10 0165*  	dl 1, 16, 16, 256, fn_turret_248, 334
       00 00 10 00 
       00 00 01 00 
       2C 6E 04 4E 
       01 00       
0466A3             0166*  
0466A3             0167*  ; files_list: ; filename:
0466A3 73 70 72 69 0168*  fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
0466B8 73 70 72 69 0169*  fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
0466D2 73 70 72 69 0170*  fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
0466EC 73 70 72 69 0171*  fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
046706 73 70 72 69 0172*  fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
046720 73 70 72 69 0173*  fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
04673A 73 70 72 69 0174*  fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
046753 73 70 72 69 0175*  fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
04676C 73 70 72 69 0176*  fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
046782 73 70 72 69 0177*  fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
046798 73 70 72 69 0178*  fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
0467AA 73 70 72 69 0179*  fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0467C3 73 70 72 69 0180*  fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0467DC 73 70 72 69 0181*  fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0467F5 73 70 72 69 0182*  fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
04680E 73 70 72 69 0183*  fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
046827 73 70 72 69 0184*  fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
046840 73 70 72 69 0185*  fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
046859 73 70 72 69 0186*  fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
046872 73 70 72 69 0187*  fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
04688B 73 70 72 69 0188*  fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0468A4 73 70 72 69 0189*  fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0468BD 73 70 72 69 0190*  fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0468D6 73 70 72 69 0191*  fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
0468EF 73 70 72 69 0192*  fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
046908 73 70 72 69 0193*  fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
046921 73 70 72 69 0194*  fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04693A 73 70 72 69 0195*  fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
046953 73 70 72 69 0196*  fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
04696C 73 70 72 69 0197*  fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
046985 73 70 72 69 0198*  fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
04699E 73 70 72 69 0199*  fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0469B7 73 70 72 69 0200*  fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0469D0 73 70 72 69 0201*  fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0469E9 73 70 72 69 0202*  fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
046A02 73 70 72 69 0203*  fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
046A1B 73 70 72 69 0204*  fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
046A34 73 70 72 69 0205*  fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
046A4D 73 70 72 69 0206*  fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
046A66 73 70 72 69 0207*  fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
046A7F 73 70 72 69 0208*  fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
046A98 73 70 72 69 0209*  fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
046AB1 73 70 72 69 0210*  fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
046ACA 73 70 72 69 0211*  fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
046AE0 73 70 72 69 0212*  fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
046AF6 73 70 72 69 0213*  fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
046B0C 73 70 72 69 0214*  fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
046B25 73 70 72 69 0215*  fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
046B3E 73 70 72 69 0216*  fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
046B57 73 70 72 69 0217*  fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
046B70 73 70 72 69 0218*  fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
046B89 73 70 72 69 0219*  fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
046BA2 73 70 72 69 0220*  fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
046BBB 73 70 72 69 0221*  fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
046BD4 73 70 72 69 0222*  fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
046BED 73 70 72 69 0223*  fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
046C06 73 70 72 69 0224*  fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
046C1F 73 70 72 69 0225*  fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
046C38 73 70 72 69 0226*  fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
046C51 73 70 72 69 0227*  fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
046C6A 73 70 72 69 0228*  fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
046C83 73 70 72 69 0229*  fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
046C9C 73 70 72 69 0230*  fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
046CB5 73 70 72 69 0231*  fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
046CCE 73 70 72 69 0232*  fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
046CE7 73 70 72 69 0233*  fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
046D00 73 70 72 69 0234*  fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
046D19 73 70 72 69 0235*  fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
046D32 73 70 72 69 0236*  fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
046D4B 73 70 72 69 0237*  fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
046D64 73 70 72 69 0238*  fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
046D7D 73 70 72 69 0239*  fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
046D96 73 70 72 69 0240*  fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
046DAF 73 70 72 69 0241*  fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
046DC8 73 70 72 69 0242*  fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
046DE1 73 70 72 69 0243*  fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
046DFA 73 70 72 69 0244*  fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
046E13 73 70 72 69 0245*  fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
046E2C 73 70 72 69 0246*  fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
046E45             0048       include "images_ui.inc"
046E45             0001*  ; Generated by make_images.py
046E45             0002*  
046E45             0003*  ui_num_images: equ 4
046E45             0004*  
046E45             0005*  ; buffer_ids:
046E45             0006*  BUF_BEZEL_L: equ 0
046E45             0007*  BUF_BEZEL_R: equ 1
046E45             0008*  BUF_SPLASH_BG: equ 2
046E45             0009*  BUF_SPLASH_LOGO: equ 3
046E45             0010*  
046E45             0011*  ui_image_list: ; type; width; height; size; filename; bufferId:
046E45 01 00 00 80 0012*  	dl 1, 128, 384, 49152, fn_bezel_l, 0
       00 00 80 01 
       00 00 C0 00 
       8D 6E 04 00 
       00 00       
046E57 01 00 00 80 0013*  	dl 1, 128, 384, 49152, fn_bezel_r, 1
       00 00 80 01 
       00 00 C0 00 
       9E 6E 04 01 
       00 00       
046E69 01 00 00 40 0014*  	dl 1, 320, 240, 76800, fn_splash_bg, 2
       01 00 F0 00 
       00 00 2C 01 
       AF 6E 04 02 
       00 00       
046E7B 01 00 00 40 0015*  	dl 1, 320, 240, 76800, fn_splash_logo, 3
       01 00 F0 00 
       00 00 2C 01 
       C2 6E 04 03 
       00 00       
046E8D             0016*  
046E8D             0017*  ; files_list: ; filename:
046E8D 75 69 2F 62 0018*  fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
046E9E 75 69 2F 62 0019*  fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
046EAF 75 69 2F 73 0020*  fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
046EC2 75 69 2F 73 0021*  fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
046ED7             0049       include "laser.inc"
046ED7             0001*  ; ##### LASER SPRITE PARAMETERS #####
046ED7             0002*  ; uses the same offsets from its table base as the main sprite table:
046ED7             0003*  laser_start_variables: ; label marking beginning of table
046ED7 11          0004*  laser_id:               db table_max_records+1
046ED8 00          0005*  laser_type:             db 0x00 ; 1 bytes currently not used
046ED9 08 01 00    0006*  laser_base_bufferId:    dl BUF_LASER_A ; 3 bytes bitmap bufferId
046EDC 00 00 00    0007*  laser_move_program:     dl 0x000000 ; 3 bytes not currently used
046EDF 00          0008*  laser_collisions:       db 0x00 ; 1 bytes uses sprite_alive and sprite_just_died flags
046EE0 00          0009*  laser_dim_x:            db 0x00 ; 1 bytes sprite width in pixels
046EE1 00          0010*  laser_dim_y:            db 0x00 ; 1 bytes sprite height in pixels
046EE2 00 00 00    0011*  laser_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
046EE5 00 00 00    0012*  laser_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
046EE8 00 00 00    0013*  laser_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
046EEB 00 F8 FF    0014*  laser_yvel:             dl 0xFFF800 ; 3 bytes y-component velocity, 16.8 fixed, pixels
046EEE 00 00 00    0015*  laser_vel:              dl 0x000000 ; 3 bytes not currently used
046EF1 00 00 00    0016*  laser_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
046EF4 00 00 00    0017*  laser_orientation:      dl 0x000000 ; 3 bytes not currently used
046EF7 00          0018*  laser_animation:        db 0x00 ; 1 bytes current sprite animation frame
046EF8 00          0019*  laser_animation_timer:  db 0x00 ; 1 bytes decremented every frame, when zero, advance animation
046EF9 00          0020*  laser_move_timer:       db 0x00 ; 1 bytes not currently used
046EFA 00          0021*  laser_move_step:        db 0x00 ; 1 bytes not currently used
046EFB 00          0022*  laser_points:           db 0x00 ; 1 bytes not currently used
046EFC 00          0023*  laser_shield_damage:    db 0x00 ; 1 bytes not currently used
046EFD             0024*  laser_end_variables: ; for when we want to traverse this table in reverse
046EFD             0025*  laser_speed: equ -6*256 ; 6 pixels per frame 16.8 fixed
046EFD             0026*  laser_animation_timer_reset: equ 2 ; animate every two frames
046EFD             0027*  
046EFD             0028*  laser_control:
046EFD             0029*  ; point to laser sprite variables
046EFD FD 21 D7 6E 0030*      ld iy,laser_start_variables
       04          
046F02 FD 22 67 7F 0031*      ld (table_pointer),iy
       04          
046F07             0032*  ; did laser just die?
046F07 FD CB 08 7E 0033*      bit sprite_just_died,(iy+sprite_collisions)
046F0B C2 94 6F 04 0034*      jp nz,kill_laser
046F0F             0035*  ; select laser sprite
046F0F 3A D7 6E 04 0036*      ld a,(laser_id)
046F13 CD 99 19 04 0037*      call vdu_sprite_select
046F17             0038*  ; update laser position
046F17 CD 1B 80 04 0039*      call move_sprite
046F1B             0040*  ; are we at top of screen?
046F1B 3A 6B 7F 04 0041*      ld a,(sprite_screen_edge)
046F1F E6 08       0042*      and collide_top
046F21 C2 94 6F 04 0043*      jp nz,kill_laser
046F25             0044*  ; check animation timer
046F25 FD 35 21    0045*      dec (iy+sprite_animation_timer)
046F28 C2 35 6F 04 0046*      jp nz,@F
046F2C 3E 02       0047*      ld a,laser_animation_timer_reset
046F2E FD 77 21    0048*      ld (iy+sprite_animation_timer),a
046F31 CD E0 19 04 0049*      call vdu_sprite_next_frame
046F35             0050*  @@: ; draw the sprite
046F35 FD 07 0B    0051*      ld bc,(iy+sprite_x)
046F38 FD 17 0E    0052*      ld de,(iy+sprite_y)
046F3B CD 65 1A 04 0053*      call vdu_sprite_move_abs168
046F3F             0054*  ; return to caller
046F3F C9          0055*      ret
046F40             0056*  ; end laser_control
046F40             0057*  
046F40             0058*  fire_laser:
046F40             0059*  ; point to laser sprite variables
046F40 FD 21 D7 6E 0060*      ld iy,laser_start_variables
       04          
046F45 FD 22 67 7F 0061*      ld (table_pointer),iy
       04          
046F4A             0062*  ; is laser already active?
046F4A FD CB 08 76 0063*      bit sprite_alive,(iy+sprite_collisions)
046F4E C0          0064*      ret nz ; laser already active
046F4F             0065*  ; otherwise,FIRE ZEE LASER!!1111
046F4F             0066*  ; set laser status to active
046F4F FD CB 08 F6 0067*      set sprite_alive,(iy+sprite_collisions)
046F53             0068*  ; initialize laser sprite parameters
046F53             0069*  ; x-coordinate
046F53 DD 21 D4 7B 0070*      ld ix,player_start_variables
       04          
046F58 DD 27 0B    0071*      ld hl,(ix+sprite_x)
046F5B 11 06 00 00 0072*      ld de,6 ; horizontal center with player sprite
046F5F 19          0073*      add hl,de
046F60 FD 2F 0B    0074*      ld (iy+sprite_x),hl
046F63             0075*  ; y-coordinate
046F63 DD 27 0E    0076*      ld hl,(ix+sprite_y)
046F66 11 FA FF FF 0077*      ld de,-6 ; set laser y a few pixels above player
046F6A FD 2F 0E    0078*      ld (iy+sprite_y),hl
046F6D             0079*  ; set laser velocity
046F6D 21 00 FA FF 0080*      ld hl,laser_speed
046F71 FD 2F 14    0081*      ld (iy+sprite_yvel),hl
046F74             0082*  ; set laser animation frame and timer
046F74 AF          0083*      xor a ; first frame
046F75 FD 77 20    0084*      ld (iy+sprite_animation),a
046F78 3E 02       0085*      ld a,laser_animation_timer_reset
046F7A FD 77 21    0086*      ld (iy+sprite_animation_timer),a
046F7D             0087*  ; plot the sprite and make it visible
046F7D 3A D7 6E 04 0088*      ld a,(laser_id)
046F81 CD 99 19 04 0089*      call vdu_sprite_select
046F85 FD 07 0B    0090*      ld bc,(iy+sprite_x)
046F88 FD 17 0E    0091*      ld de,(iy+sprite_y)
046F8B CD 65 1A 04 0092*      call vdu_sprite_move_abs168
046F8F CD 0F 1A 04 0093*      call vdu_sprite_show
046F93             0094*  ; return to caller
046F93 C9          0095*      ret
046F94             0096*  ; end fire_laser
046F94             0097*  
046F94             0098*  kill_laser:
046F94             0099*  ; update status to inactive
046F94 AF          0100*      xor a ; zero out a
046F95 32 DF 6E 04 0101*      ld (laser_collisions),a
046F99             0102*  ; hide the sprite
046F99 3A D7 6E 04 0103*      ld a,(laser_id)
046F9D CD 99 19 04 0104*      call vdu_sprite_select
046FA1 CD 1D 1A 04 0105*      call vdu_sprite_hide
046FA5 C9          0106*      ret
046FA6             0107*  ; end kill_laser
046FA6             0050       ; include "levels.inc"
046FA6             0051       include "levels_dg.inc"
046FA6             0001*  ; Generated by tiles_dg_levels.py
046FA6             0002*  
046FA6             0003*  tiles_dg_num_levels: equ 6
046FA6             0004*  
046FA6             0005*  tiles_dg_levels:
046FA6 CA 6F 04    0006*  	dl tiles_dg_level_0
046FA9 CA 71 04    0007*  	dl tiles_dg_level_1
046FAC CA 73 04    0008*  	dl tiles_dg_level_2
046FAF CA 75 04    0009*  	dl tiles_dg_level_3
046FB2 CA 77 04    0010*  	dl tiles_dg_level_4
046FB5 CA 79 04    0011*  	dl tiles_dg_level_5
046FB8             0012*  
046FB8             0013*  tiles_dg_base_bufferIds:
046FB8 00 02 00    0014*  	dl BUF_DG_0_00
046FBB 00 03 00    0015*  	dl BUF_DG_1_00
046FBE 00 04 00    0016*  	dl BUF_DG_2_00
046FC1 00 05 00    0017*  	dl BUF_DG_3_00
046FC4 00 06 00    0018*  	dl BUF_DG_4_00
046FC7 00 07 00    0019*  	dl BUF_DG_5_00
046FCA             0020*  
046FCA             0021*  tiles_dg_level_0: ; Level 0
046FCA 00 05 09 18 0022*  	db 0x00,0x05,0x09,0x18,0x18,0x18,0x15,0x1B,0x21,0x28,0x28,0x28,0x16,0x1B,0x18,0x18 ; row 0
       18 18 15 1B 
       21 28 28 28 
       16 1B 18 18 
046FDA 00 06 0A 19 0023*  	db 0x00,0x06,0x0A,0x19,0x1E,0x22,0x15,0x1B,0x18,0x18,0x18,0x18,0x17,0x1B,0x18,0x18 ; row 1
       1E 22 15 1B 
       18 18 18 18 
       17 1B 18 18 
046FEA 01 04 0B 09 0024*  	db 0x01,0x04,0x0B,0x09,0x19,0x1E,0x14,0x1C,0x21,0x28,0x28,0x28,0x15,0x1B,0x18,0x35 ; row 2
       19 1E 14 1C 
       21 28 28 28 
       15 1B 18 35 
046FFA 02 02 0C 18 0025*  	db 0x02,0x02,0x0C,0x18,0x18,0x18,0x14,0x1B,0x18,0x18,0x2F,0x2D,0x15,0x1B,0x18,0x36 ; row 3
       18 18 14 1B 
       18 18 2F 2D 
       15 1B 18 36 
04700A 00 00 0D 18 0026*  	db 0x00,0x00,0x0D,0x18,0x19,0x1E,0x12,0x18,0x18,0x18,0x15,0x1B,0x15,0x1B,0x18,0x37 ; row 4
       19 1E 12 18 
       18 18 15 1B 
       15 1B 18 37 
04701A 03 00 05 09 0027*  	db 0x03,0x00,0x05,0x09,0x18,0x18,0x12,0x18,0x18,0x18,0x15,0x1B,0x2C,0x1C,0x18,0x37 ; row 5
       18 18 12 18 
       18 18 15 1B 
       2C 1C 18 37 
04702A 04 00 06 0A 0028*  	db 0x04,0x00,0x06,0x0A,0x18,0x18,0x18,0x18,0x0E,0x18,0x18,0x18,0x17,0x1B,0x18,0x18 ; row 6
       18 18 18 18 
       0E 18 18 18 
       17 1B 18 18 
04703A 02 00 00 00 0029*  	db 0x02,0x00,0x00,0x00,0x0D,0x0A,0x18,0x18,0x0E,0x2D,0x18,0x18,0x17,0x1B,0x18,0x38 ; row 7
       0D 0A 18 18 
       0E 2D 18 18 
       17 1B 18 38 
04704A 00 00 00 00 0030*  	db 0x00,0x00,0x00,0x00,0x03,0x0B,0x09,0x0F,0x15,0x1B,0x21,0x28,0x28,0x28,0x18,0x39 ; row 8
       03 0B 09 0F 
       15 1B 21 28 
       28 28 18 39 
04705A 01 00 0E 00 0031*  	db 0x01,0x00,0x0E,0x00,0x04,0x0D,0x18,0x10,0x15,0x1B,0x18,0x18,0x18,0x18,0x18,0x3A ; row 9
       04 0D 18 10 
       15 1B 18 18 
       18 18 18 3A 
04706A 02 00 0F 0F 0032*  	db 0x02,0x00,0x0F,0x0F,0x1F,0x23,0x28,0x28,0x2C,0x1C,0x21,0x28,0x28,0x28,0x18,0x3B ; row 10
       1F 23 28 28 
       2C 1C 21 28 
       28 28 18 3B 
04707A 00 00 10 10 0033*  	db 0x00,0x00,0x10,0x10,0x05,0x24,0x09,0x18,0x15,0x1B,0x18,0x18,0x2F,0x2D,0x18,0x3C ; row 11
       05 24 09 18 
       15 1B 18 18 
       2F 2D 18 3C 
04708A 00 00 0E 00 0034*  	db 0x00,0x00,0x0E,0x00,0x06,0x25,0x18,0x18,0x13,0x13,0x13,0x13,0x16,0x1B,0x18,0x3D ; row 12
       06 25 18 18 
       13 13 13 13 
       16 1B 18 3D 
04709A 00 00 00 0B 0035*  	db 0x00,0x00,0x00,0x0B,0x20,0x26,0x09,0x29,0x12,0x18,0x18,0x18,0x17,0x1B,0x18,0x3E ; row 13
       20 26 09 29 
       12 18 18 18 
       17 1B 18 3E 
0470AA 00 00 01 0D 0036*  	db 0x00,0x00,0x01,0x0D,0x18,0x27,0x18,0x08,0x12,0x18,0x0E,0x31,0x12,0x18,0x18,0x3D ; row 14
       18 27 18 08 
       12 18 0E 31 
       12 18 18 3D 
0470BA 00 00 02 00 0037*  	db 0x00,0x00,0x02,0x00,0x00,0x0D,0x18,0x18,0x12,0x18,0x18,0x18,0x12,0x2D,0x18,0x3E ; row 15
       00 0D 18 18 
       12 18 18 18 
       12 2D 18 3E 
0470CA 00 00 00 01 0038*  	db 0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0D,0x12,0x21,0x28,0x28,0x16,0x1B,0x18,0x3D ; row 16
       00 00 00 0D 
       12 21 28 28 
       16 1B 18 3D 
0470DA 00 00 11 02 0039*  	db 0x00,0x00,0x11,0x02,0x00,0x03,0x00,0x00,0x12,0x0B,0x09,0x18,0x16,0x1B,0x18,0x3E ; row 17
       00 03 00 00 
       12 0B 09 18 
       16 1B 18 3E 
0470EA 00 00 12 00 0040*  	db 0x00,0x00,0x12,0x00,0x00,0x04,0x01,0x00,0x02,0x0D,0x18,0x18,0x16,0x1B,0x18,0x3F ; row 18
       00 04 01 00 
       02 0D 18 18 
       16 1B 18 3F 
0470FA 00 07 13 1A 0041*  	db 0x00,0x07,0x13,0x1A,0x1A,0x1A,0x02,0x00,0x05,0x24,0x30,0x0E,0x2C,0x1C,0x18,0x3F ; row 19
       1A 1A 02 00 
       05 24 30 0E 
       2C 1C 18 3F 
04710A 00 08 14 1B 0042*  	db 0x00,0x08,0x14,0x1B,0x00,0x00,0x0B,0x2A,0x09,0x2E,0x14,0x32,0x15,0x1B,0x18,0x3D ; row 20
       00 00 0B 2A 
       09 2E 14 32 
       15 1B 18 3D 
04711A 00 07 14 1C 0043*  	db 0x00,0x07,0x14,0x1C,0x1F,0x23,0x28,0x28,0x28,0x28,0x14,0x1B,0x15,0x1B,0x18,0x3E ; row 21
       1F 23 28 28 
       28 28 14 1B 
       15 1B 18 3E 
04712A 00 08 15 1B 0044*  	db 0x00,0x08,0x15,0x1B,0x00,0x00,0x0D,0x18,0x18,0x18,0x18,0x29,0x12,0x18,0x18,0x3D ; row 22
       00 00 0D 18 
       18 18 18 29 
       12 18 18 3D 
04713A 00 08 15 1B 0045*  	db 0x00,0x08,0x15,0x1B,0x03,0x00,0x00,0x00,0x06,0x25,0x2F,0x08,0x12,0x2D,0x18,0x3E ; row 23
       03 00 00 00 
       06 25 2F 08 
       12 2D 18 3E 
04714A 00 00 12 00 0046*  	db 0x00,0x00,0x12,0x00,0x04,0x00,0x00,0x03,0x05,0x24,0x16,0x1B,0x16,0x1B,0x18,0x3D ; row 24
       04 00 00 03 
       05 24 16 1B 
       16 1B 18 3D 
04715A 00 00 12 00 0047*  	db 0x00,0x00,0x12,0x00,0x02,0x00,0x01,0x04,0x06,0x25,0x17,0x1B,0x15,0x1B,0x18,0x3E ; row 25
       02 00 01 04 
       06 25 17 1B 
       15 1B 18 3E 
04716A 00 00 12 00 0048*  	db 0x00,0x00,0x12,0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x2C,0x1C,0x15,0x1B,0x18,0x40 ; row 26
       00 00 02 02 
       00 00 2C 1C 
       15 1B 18 40 
04717A 00 00 12 1D 0049*  	db 0x00,0x00,0x12,0x1D,0x00,0x00,0x05,0x2B,0x20,0x2B,0x15,0x1B,0x16,0x1B,0x18,0x41 ; row 27
       00 00 05 2B 
       20 2B 15 1B 
       16 1B 18 41 
04718A 00 00 16 1B 0050*  	db 0x00,0x00,0x16,0x1B,0x00,0x03,0x09,0x27,0x18,0x27,0x18,0x33,0x2C,0x1C,0x18,0x18 ; row 28
       00 03 09 27 
       18 27 18 33 
       2C 1C 18 18 
04719A 00 00 17 1B 0051*  	db 0x00,0x00,0x17,0x1B,0x21,0x28,0x28,0x28,0x28,0x28,0x28,0x34,0x15,0x1B,0x18,0x18 ; row 29
       21 28 28 28 
       28 28 28 34 
       15 1B 18 18 
0471AA 00 00 14 1B 0052*  	db 0x00,0x00,0x14,0x1B,0x06,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x2C,0x1C,0x18,0x18 ; row 30
       06 18 18 18 
       18 18 18 18 
       2C 1C 18 18 
0471BA 00 00 14 1B 0053*  	db 0x00,0x00,0x14,0x1B,0x00,0x00,0x09,0x18,0x18,0x18,0x18,0x18,0x15,0x1B,0x18,0x18 ; row 31
       00 00 09 18 
       18 18 18 18 
       15 1B 18 18 
0471CA             0054*  tiles_dg_level_1: ; Level 1
0471CA 00 02 02 02 0055*  	db 0x00,0x02,0x02,0x02,0x02,0x03,0x13,0x17,0x0C,0x0E,0x0C,0x1B,0x20,0x28,0x0C,0x32 ; row 0
       02 03 13 17 
       0C 0E 0C 1B 
       20 28 0C 32 
0471DA 01 02 04 02 0056*  	db 0x01,0x02,0x04,0x02,0x03,0x10,0x0A,0x0E,0x0C,0x0C,0x0F,0x1C,0x21,0x2F,0x0C,0x33 ; row 1
       03 10 0A 0E 
       0C 0C 0F 1C 
       21 2F 0C 33 
0471EA 02 02 05 02 0057*  	db 0x02,0x02,0x05,0x02,0x02,0x0D,0x0C,0x0C,0x0F,0x11,0x19,0x2B,0x20,0x28,0x0C,0x34 ; row 2
       02 0D 0C 0C 
       0F 11 19 2B 
       20 28 0C 34 
0471FA 02 02 01 03 0058*  	db 0x02,0x02,0x01,0x03,0x10,0x0A,0x0E,0x17,0x0C,0x0F,0x11,0x2C,0x21,0x2B,0x0C,0x35 ; row 3
       10 0A 0E 17 
       0C 0F 11 2C 
       21 2B 0C 35 
04720A 00 02 02 02 0059*  	db 0x00,0x02,0x02,0x02,0x0D,0x0E,0x0C,0x0F,0x11,0x19,0x20,0x28,0x2D,0x2C,0x0C,0x32 ; row 4
       0D 0E 0C 0F 
       11 19 20 28 
       2D 2C 0C 32 
04721A 01 02 02 02 0060*  	db 0x01,0x02,0x02,0x02,0x09,0x0B,0x0F,0x11,0x11,0x16,0x26,0x29,0x2F,0x29,0x0C,0x33 ; row 5
       09 0B 0F 11 
       11 16 26 29 
       2F 29 0C 33 
04722A 02 02 02 02 0061*  	db 0x02,0x02,0x02,0x02,0x04,0x09,0x0B,0x18,0x18,0x18,0x27,0x1B,0x22,0x28,0x0C,0x32 ; row 6
       04 09 0B 18 
       18 18 27 1B 
       22 28 0C 32 
04723A 02 02 02 02 0062*  	db 0x02,0x02,0x02,0x02,0x05,0x02,0x0D,0x14,0x0C,0x0C,0x27,0x2A,0x23,0x29,0x0C,0x33 ; row 7
       05 02 0D 14 
       0C 0C 27 2A 
       23 29 0C 33 
04724A 02 02 02 00 0063*  	db 0x02,0x02,0x02,0x00,0x01,0x06,0x0A,0x15,0x0C,0x0C,0x27,0x0C,0x20,0x28,0x0C,0x32 ; row 8
       01 06 0A 15 
       0C 0C 27 0C 
       20 28 0C 32 
04725A 02 02 02 01 0064*  	db 0x02,0x02,0x02,0x01,0x06,0x0A,0x0C,0x0C,0x0C,0x0C,0x27,0x1B,0x21,0x2B,0x0C,0x33 ; row 9
       06 0A 0C 0C 
       0C 0C 27 1B 
       21 2B 0C 33 
04726A 02 02 02 06 0065*  	db 0x02,0x02,0x02,0x06,0x0A,0x0E,0x0C,0x0F,0x11,0x19,0x26,0x2F,0x2D,0x2C,0x0C,0x36 ; row 10
       0A 0E 0C 0F 
       11 19 26 2F 
       2D 2C 0C 36 
04727A 02 02 06 0A 0066*  	db 0x02,0x02,0x06,0x0A,0x0E,0x0C,0x0E,0x0C,0x1F,0x1B,0x21,0x29,0x2E,0x29,0x0C,0x36 ; row 11
       0E 0C 0E 0C 
       1F 1B 21 29 
       2E 29 0C 36 
04728A 02 03 08 0C 0067*  	db 0x02,0x03,0x08,0x0C,0x0F,0x11,0x11,0x19,0x20,0x28,0x2D,0x2B,0x2D,0x28,0x0C,0x37 ; row 12
       0F 11 11 19 
       20 28 2D 2B 
       2D 28 0C 37 
04729A 02 04 09 0B 0068*  	db 0x02,0x04,0x09,0x0B,0x0C,0x0F,0x11,0x1A,0x21,0x29,0x2E,0x2C,0x2B,0x29,0x0C,0x37 ; row 13
       0C 0F 11 1A 
       21 29 2E 2C 
       2B 29 0C 37 
0472AA 02 05 03 08 0069*  	db 0x02,0x05,0x03,0x08,0x0E,0x0C,0x0C,0x1B,0x22,0x28,0x2D,0x28,0x2C,0x28,0x0C,0x0C ; row 14
       0E 0C 0C 1B 
       22 28 2D 28 
       2C 28 0C 0C 
0472BA 02 01 02 09 0070*  	db 0x02,0x01,0x02,0x09,0x0B,0x0C,0x0F,0x1C,0x23,0x29,0x2E,0x2F,0x2E,0x29,0x0C,0x0C ; row 15
       0B 0C 0F 1C 
       23 29 2E 2F 
       2E 29 0C 0C 
0472CA 02 02 02 04 0071*  	db 0x02,0x02,0x02,0x04,0x09,0x0B,0x0C,0x0C,0x0C,0x0C,0x12,0x1D,0x22,0x28,0x0C,0x38 ; row 16
       09 0B 0C 0C 
       0C 0C 12 1D 
       22 28 0C 38 
0472DA 00 02 02 05 0072*  	db 0x00,0x02,0x02,0x05,0x02,0x0D,0x0E,0x0C,0x0C,0x0C,0x25,0x31,0x23,0x29,0x0C,0x39 ; row 17
       02 0D 0E 0C 
       0C 0C 25 31 
       23 29 0C 39 
0472EA 01 02 00 01 0073*  	db 0x01,0x02,0x00,0x01,0x02,0x0D,0x0C,0x0E,0x0C,0x0C,0x22,0x28,0x2D,0x28,0x0C,0x3A ; row 18
       02 0D 0C 0E 
       0C 0C 22 28 
       2D 28 0C 3A 
0472FA 02 04 01 02 0074*  	db 0x02,0x04,0x01,0x02,0x06,0x0A,0x0C,0x0C,0x0C,0x1B,0x23,0x2B,0x2E,0x29,0x0C,0x0C ; row 19
       06 0A 0C 0C 
       0C 1B 23 2B 
       2E 29 0C 0C 
04730A 02 05 02 03 0075*  	db 0x02,0x05,0x02,0x03,0x0A,0x0C,0x12,0x1D,0x24,0x1D,0x20,0x2C,0x2D,0x28,0x0C,0x0C ; row 20
       0A 0C 12 1D 
       24 1D 20 2C 
       2D 28 0C 0C 
04731A 02 01 02 03 0076*  	db 0x02,0x01,0x02,0x03,0x0B,0x0C,0x0C,0x0C,0x25,0x1B,0x21,0x29,0x2F,0x29,0x0C,0x0C ; row 21
       0B 0C 0C 0C 
       25 1B 21 29 
       2F 29 0C 0C 
04732A 02 02 02 06 0077*  	db 0x02,0x02,0x02,0x06,0x0A,0x0C,0x0C,0x1B,0x22,0x28,0x2D,0x28,0x2D,0x28,0x0C,0x0C ; row 22
       0A 0C 0C 1B 
       22 28 2D 28 
       2D 28 0C 0C 
04733A 00 02 03 08 0078*  	db 0x00,0x02,0x03,0x08,0x0C,0x0E,0x0C,0x0C,0x26,0x29,0x2F,0x29,0x2E,0x29,0x0C,0x3B ; row 23
       0C 0E 0C 0C 
       26 29 2F 29 
       2E 29 0C 3B 
04734A 01 02 02 0D 0079*  	db 0x01,0x02,0x02,0x0D,0x0E,0x0C,0x0C,0x0C,0x27,0x0C,0x0C,0x1B,0x22,0x28,0x0C,0x3C ; row 24
       0E 0C 0C 0C 
       27 0C 0C 1B 
       22 28 0C 3C 
04735A 02 02 03 08 0080*  	db 0x02,0x02,0x03,0x08,0x0C,0x0C,0x0C,0x0C,0x27,0x2A,0x30,0x30,0x23,0x29,0x0C,0x3D ; row 25
       0C 0C 0C 0C 
       27 2A 30 30 
       23 29 0C 3D 
04736A 02 04 02 0D 0081*  	db 0x02,0x04,0x02,0x0D,0x0C,0x0E,0x0C,0x0C,0x27,0x0C,0x0C,0x12,0x20,0x2F,0x0C,0x36 ; row 26
       0C 0E 0C 0C 
       27 0C 0C 12 
       20 2F 0C 36 
04737A 02 05 02 0D 0082*  	db 0x02,0x05,0x02,0x0D,0x0C,0x0C,0x0C,0x0C,0x18,0x18,0x18,0x18,0x21,0x29,0x0C,0x36 ; row 27
       0C 0C 0C 0C 
       18 18 18 18 
       21 29 0C 36 
04738A 02 01 06 0A 0083*  	db 0x02,0x01,0x06,0x0A,0x0E,0x12,0x14,0x14,0x26,0x28,0x2D,0x2B,0x2D,0x28,0x0C,0x32 ; row 28
       0E 12 14 14 
       26 28 2D 2B 
       2D 28 0C 32 
04739A 02 06 0A 0E 0084*  	db 0x02,0x06,0x0A,0x0E,0x0C,0x0C,0x15,0x15,0x23,0x2B,0x2E,0x2C,0x2E,0x29,0x0C,0x33 ; row 29
       0C 0C 15 15 
       23 2B 2E 2C 
       2E 29 0C 33 
0473AA 03 07 0B 0F 0085*  	db 0x03,0x07,0x0B,0x0F,0x11,0x11,0x16,0x1E,0x20,0x2C,0x2D,0x28,0x2F,0x28,0x0C,0x34 ; row 30
       11 11 16 1E 
       20 2C 2D 28 
       2F 28 0C 34 
0473BA 02 06 0A 0E 0086*  	db 0x02,0x06,0x0A,0x0E,0x0F,0x11,0x11,0x19,0x21,0x29,0x2E,0x29,0x2E,0x29,0x0C,0x35 ; row 31
       0F 11 11 19 
       21 29 2E 29 
       2E 29 0C 35 
0473CA             0087*  tiles_dg_level_2: ; Level 2
0473CA 00 00 00 07 0088*  	db 0x00,0x00,0x00,0x07,0x0E,0x10,0x0E,0x10,0x0E,0x3F,0x49,0x4E,0x52,0x4E,0x52,0x55 ; row 0
       0E 10 0E 10 
       0E 3F 49 4E 
       52 4E 52 55 
0473DA 00 00 01 08 0089*  	db 0x00,0x00,0x01,0x08,0x0F,0x11,0x0F,0x11,0x0F,0x40,0x4A,0x4F,0x53,0x4F,0x53,0x55 ; row 1
       0F 11 0F 11 
       0F 40 4A 4F 
       53 4F 53 55 
0473EA 01 00 00 02 0090*  	db 0x01,0x00,0x00,0x02,0x12,0x1E,0x1C,0x2C,0x32,0x41,0x09,0x01,0x49,0x4E,0x52,0x55 ; row 2
       12 1E 1C 2C 
       32 41 09 01 
       49 4E 52 55 
0473FA 00 00 01 03 0091*  	db 0x00,0x00,0x01,0x03,0x13,0x17,0x24,0x17,0x14,0x42,0x44,0x45,0x4A,0x4F,0x53,0x55 ; row 3
       13 17 24 17 
       14 42 44 45 
       4A 4F 53 55 
04740A 00 00 07 0E 0092*  	db 0x00,0x00,0x07,0x0E,0x0E,0x18,0x21,0x18,0x21,0x10,0x0E,0x10,0x49,0x4E,0x52,0x55 ; row 4
       0E 18 21 18 
       21 10 0E 10 
       49 4E 52 55 
04741A 00 01 08 0F 0093*  	db 0x00,0x01,0x08,0x0F,0x0F,0x11,0x1B,0x22,0x0F,0x11,0x0F,0x40,0x4A,0x4F,0x53,0x55 ; row 5
       0F 11 1B 22 
       0F 11 0F 40 
       4A 4F 53 55 
04742A 00 00 01 02 0094*  	db 0x00,0x00,0x01,0x02,0x04,0x13,0x1C,0x2C,0x33,0x42,0x09,0x48,0x49,0x4E,0x52,0x55 ; row 6
       04 13 1C 2C 
       33 42 09 48 
       49 4E 52 55 
04743A 00 03 09 03 0095*  	db 0x00,0x03,0x09,0x03,0x04,0x1D,0x23,0x23,0x34,0x43,0x4B,0x50,0x4A,0x4F,0x53,0x55 ; row 7
       04 1D 23 23 
       34 43 4B 50 
       4A 4F 53 55 
04744A 02 04 0A 04 0096*  	db 0x02,0x04,0x0A,0x04,0x04,0x12,0x25,0x2D,0x35,0x42,0x49,0x4E,0x52,0x4E,0x52,0x55 ; row 8
       04 12 25 2D 
       35 42 49 4E 
       52 4E 52 55 
04745A 00 05 0B 04 0097*  	db 0x00,0x05,0x0B,0x04,0x04,0x1F,0x26,0x2E,0x36,0x24,0x4A,0x4F,0x53,0x4F,0x53,0x55 ; row 9
       04 1F 26 2E 
       36 24 4A 4F 
       53 4F 53 55 
04746A 00 00 0C 05 0098*  	db 0x00,0x00,0x0C,0x05,0x04,0x1D,0x23,0x23,0x34,0x44,0x49,0x4E,0x52,0x4E,0x52,0x55 ; row 10
       04 1D 23 23 
       34 44 49 4E 
       52 4E 52 55 
04747A 00 00 01 02 0099*  	db 0x00,0x00,0x01,0x02,0x04,0x19,0x24,0x17,0x37,0x45,0x4A,0x4F,0x53,0x4F,0x53,0x56 ; row 11
       04 19 24 17 
       37 45 4A 4F 
       53 4F 53 56 
04748A 00 00 00 07 0100*  	db 0x00,0x00,0x00,0x07,0x0E,0x10,0x0E,0x18,0x21,0x10,0x49,0x4E,0x52,0x4E,0x52,0x57 ; row 12
       0E 10 0E 18 
       21 10 49 4E 
       52 4E 52 57 
04749A 01 00 01 08 0101*  	db 0x01,0x00,0x01,0x08,0x0F,0x1B,0x22,0x11,0x0F,0x40,0x4A,0x4F,0x53,0x4F,0x53,0x55 ; row 13
       0F 1B 22 11 
       0F 40 4A 4F 
       53 4F 53 55 
0474AA 00 00 00 03 0102*  	db 0x00,0x00,0x00,0x03,0x12,0x1C,0x27,0x2E,0x38,0x42,0x09,0x48,0x49,0x4E,0x52,0x55 ; row 14
       12 1C 27 2E 
       38 42 09 48 
       49 4E 52 55 
0474BA 00 01 00 05 0103*  	db 0x00,0x01,0x00,0x05,0x14,0x19,0x24,0x17,0x24,0x43,0x44,0x45,0x4A,0x4F,0x53,0x55 ; row 15
       14 19 24 17 
       24 43 44 45 
       4A 4F 53 55 
0474CA 00 00 00 07 0104*  	db 0x00,0x00,0x00,0x07,0x0E,0x10,0x0E,0x18,0x21,0x10,0x0E,0x3F,0x49,0x4E,0x52,0x55 ; row 16
       0E 10 0E 18 
       21 10 0E 3F 
       49 4E 52 55 
0474DA 00 00 01 08 0105*  	db 0x00,0x00,0x01,0x08,0x0F,0x11,0x1B,0x22,0x0F,0x11,0x0F,0x40,0x4A,0x4F,0x53,0x55 ; row 17
       0F 11 1B 22 
       0F 11 0F 40 
       4A 4F 53 55 
0474EA 00 00 01 02 0106*  	db 0x00,0x00,0x01,0x02,0x15,0x1E,0x1C,0x24,0x24,0x46,0x04,0x09,0x01,0x00,0x54,0x55 ; row 18
       15 1E 1C 24 
       24 46 04 09 
       01 00 54 55 
0474FA 00 00 0D 03 0107*  	db 0x00,0x00,0x0D,0x03,0x04,0x13,0x25,0x2D,0x39,0x24,0x4C,0x04,0x09,0x00,0x54,0x55 ; row 19
       04 13 25 2D 
       39 24 4C 04 
       09 00 54 55 
04750A 00 03 0A 04 0108*  	db 0x00,0x03,0x0A,0x04,0x04,0x1D,0x23,0x23,0x34,0x24,0x42,0x04,0x44,0x01,0x54,0x55 ; row 20
       04 1D 23 23 
       34 24 42 04 
       44 01 54 55 
04751A 02 04 0B 04 0109*  	db 0x02,0x04,0x0B,0x04,0x04,0x12,0x25,0x2D,0x3A,0x24,0x4D,0x51,0x50,0x50,0x54,0x55 ; row 21
       04 12 25 2D 
       3A 24 4D 51 
       50 50 54 55 
04752A 00 06 05 04 0110*  	db 0x00,0x06,0x05,0x04,0x16,0x20,0x28,0x2E,0x3B,0x47,0x49,0x4E,0x52,0x4E,0x52,0x55 ; row 22
       16 20 28 2E 
       3B 47 49 4E 
       52 4E 52 55 
04753A 00 01 02 04 0111*  	db 0x00,0x01,0x02,0x04,0x17,0x14,0x29,0x2F,0x37,0x45,0x4A,0x4F,0x53,0x4F,0x53,0x55 ; row 23
       17 14 29 2F 
       37 45 4A 4F 
       53 4F 53 55 
04754A 00 07 0E 10 0112*  	db 0x00,0x07,0x0E,0x10,0x18,0x21,0x0E,0x10,0x0E,0x3F,0x49,0x4E,0x52,0x4E,0x52,0x55 ; row 24
       18 21 0E 10 
       0E 3F 49 4E 
       52 4E 52 55 
04755A 01 08 0F 11 0113*  	db 0x01,0x08,0x0F,0x11,0x0F,0x11,0x0F,0x11,0x3C,0x0F,0x4A,0x4F,0x53,0x4F,0x53,0x55 ; row 25
       0F 11 0F 11 
       3C 0F 4A 4F 
       53 4F 53 55 
04756A 00 01 02 04 0114*  	db 0x00,0x01,0x02,0x04,0x16,0x1E,0x1C,0x30,0x3D,0x48,0x49,0x4E,0x52,0x4E,0x52,0x55 ; row 26
       16 1E 1C 30 
       3D 48 49 4E 
       52 4E 52 55 
04757A 01 00 02 04 0115*  	db 0x01,0x00,0x02,0x04,0x19,0x17,0x25,0x31,0x37,0x45,0x4A,0x4F,0x53,0x4F,0x53,0x55 ; row 27
       19 17 25 31 
       37 45 4A 4F 
       53 4F 53 55 
04758A 00 00 07 0E 0116*  	db 0x00,0x00,0x07,0x0E,0x1A,0x18,0x21,0x10,0x0E,0x10,0x49,0x4E,0x52,0x4E,0x52,0x55 ; row 28
       1A 18 21 10 
       0E 10 49 4E 
       52 4E 52 55 
04759A 00 01 08 0F 0117*  	db 0x00,0x01,0x08,0x0F,0x1B,0x22,0x2A,0x11,0x0F,0x40,0x4A,0x4F,0x53,0x4F,0x53,0x55 ; row 29
       1B 22 2A 11 
       0F 40 4A 4F 
       53 4F 53 55 
0475AA 00 00 02 04 0118*  	db 0x00,0x00,0x02,0x04,0x1C,0x14,0x2B,0x2C,0x3E,0x42,0x09,0x48,0x49,0x4E,0x52,0x55 ; row 30
       1C 14 2B 2C 
       3E 42 09 48 
       49 4E 52 55 
0475BA 00 01 03 04 0119*  	db 0x00,0x01,0x03,0x04,0x1D,0x23,0x23,0x23,0x34,0x43,0x4B,0x45,0x4A,0x4F,0x53,0x55 ; row 31
       1D 23 23 23 
       34 43 4B 45 
       4A 4F 53 55 
0475CA             0120*  tiles_dg_level_3: ; Level 3
0475CA 00 00 00 00 0121*  	db 0x00,0x00,0x00,0x00,0x26,0x2E,0x38,0x00,0x0E,0x17,0x0C,0x15,0x09,0x0B,0x0B,0x00 ; row 0
       26 2E 38 00 
       0E 17 0C 15 
       09 0B 0B 00 
0475DA 00 0E 00 20 0122*  	db 0x00,0x0E,0x00,0x20,0x27,0x2F,0x00,0x3B,0x0E,0x1A,0x0D,0x16,0x0A,0x0B,0x0B,0x00 ; row 1
       27 2F 00 3B 
       0E 1A 0D 16 
       0A 0B 0B 00 
0475EA 01 0F 01 0F 0123*  	db 0x01,0x0F,0x01,0x0F,0x01,0x30,0x00,0x00,0x00,0x17,0x0C,0x15,0x09,0x15,0x09,0x00 ; row 2
       01 30 00 00 
       00 17 0C 15 
       09 15 09 00 
0475FA 02 10 02 10 0124*  	db 0x02,0x10,0x02,0x10,0x02,0x31,0x39,0x00,0x3E,0x18,0x1E,0x16,0x0A,0x16,0x0A,0x00 ; row 3
       02 31 39 00 
       3E 18 1E 16 
       0A 16 0A 00 
04760A 03 00 00 03 0125*  	db 0x03,0x00,0x00,0x03,0x28,0x32,0x03,0x0F,0x01,0x19,0x40,0x13,0x07,0x13,0x0C,0x00 ; row 4
       28 32 03 0F 
       01 19 40 13 
       07 13 0C 00 
04761A 03 00 00 03 0126*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x10,0x02,0x1A,0x08,0x14,0x08,0x14,0x0D,0x00 ; row 5
       00 00 03 10 
       02 1A 08 14 
       08 14 0D 00 
04762A 00 00 00 00 0127*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x26,0x2E,0x38,0x03,0x00,0x1B,0x00,0x28,0x00,0x00 ; row 6
       00 00 26 2E 
       38 03 00 1B 
       00 28 00 00 
04763A 04 00 00 00 0128*  	db 0x04,0x00,0x00,0x00,0x00,0x20,0x27,0x2F,0x00,0x03,0x00,0x03,0x00,0x00,0x00,0x00 ; row 7
       00 20 27 2F 
       00 03 00 03 
       00 00 00 00 
04764A 05 11 00 21 0129*  	db 0x05,0x11,0x00,0x21,0x00,0x0F,0x01,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00 ; row 8
       00 0F 01 00 
       00 00 00 03 
       00 00 00 00 
04765A 06 12 04 0E 0130*  	db 0x06,0x12,0x04,0x0E,0x0E,0x10,0x02,0x28,0x00,0x00,0x00,0x1B,0x00,0x00,0x00,0x00 ; row 9
       0E 10 02 28 
       00 00 00 1B 
       00 00 00 00 
04766A 07 13 07 13 0131*  	db 0x07,0x13,0x07,0x13,0x0C,0x1B,0x1F,0x25,0x2D,0x25,0x2D,0x43,0x1B,0x17,0x07,0x00 ; row 10
       0C 1B 1F 25 
       2D 25 2D 43 
       1B 17 07 00 
04767A 08 14 08 14 0132*  	db 0x08,0x14,0x08,0x14,0x0D,0x1B,0x1F,0x25,0x2D,0x25,0x2D,0x43,0x1B,0x1A,0x08,0x00 ; row 11
       0D 1B 1F 25 
       2D 25 2D 43 
       1B 1A 08 00 
04768A 09 15 09 15 0133*  	db 0x09,0x15,0x09,0x15,0x09,0x17,0x0C,0x3C,0x01,0x30,0x00,0x17,0x0C,0x15,0x09,0x00 ; row 12
       09 17 0C 3C 
       01 30 00 17 
       0C 15 09 00 
04769A 0A 16 0A 16 0134*  	db 0x0A,0x16,0x0A,0x16,0x0A,0x1A,0x0D,0x3D,0x02,0x31,0x39,0x1A,0x0D,0x16,0x0A,0x00 ; row 13
       0A 1A 0D 3D 
       02 31 39 1A 
       0D 16 0A 00 
0476AA 09 15 09 0B 0135*  	db 0x09,0x15,0x09,0x0B,0x0B,0x17,0x0C,0x00,0x00,0x32,0x41,0x17,0x0C,0x15,0x09,0x00 ; row 14
       0B 17 0C 00 
       00 32 41 17 
       0C 15 09 00 
0476BA 0A 16 0A 0B 0136*  	db 0x0A,0x16,0x0A,0x0B,0x0B,0x18,0x1E,0x0E,0x29,0x00,0x42,0x18,0x1E,0x16,0x0A,0x00 ; row 15
       0B 18 1E 0E 
       29 00 42 18 
       1E 16 0A 00 
0476CA 09 17 07 13 0137*  	db 0x09,0x17,0x07,0x13,0x07,0x33,0x1D,0x0E,0x00,0x00,0x00,0x19,0x1D,0x15,0x09,0x00 ; row 16
       07 33 1D 0E 
       00 00 00 19 
       1D 15 09 00 
0476DA 0A 18 1C 14 0138*  	db 0x0A,0x18,0x1C,0x14,0x08,0x14,0x0D,0x00,0x00,0x3E,0x0E,0x18,0x1E,0x16,0x0A,0x00 ; row 17
       08 14 0D 00 
       00 3E 0E 18 
       1E 16 0A 00 
0476EA 0B 19 1D 00 0139*  	db 0x0B,0x19,0x1D,0x00,0x00,0x34,0x05,0x11,0x00,0x00,0x00,0x19,0x1D,0x15,0x09,0x00 ; row 18
       00 34 05 11 
       00 00 00 19 
       1D 15 09 00 
0476FA 0B 18 1E 00 0140*  	db 0x0B,0x18,0x1E,0x00,0x00,0x00,0x06,0x12,0x04,0x28,0x00,0x1A,0x0D,0x16,0x0A,0x00 ; row 19
       00 00 06 12 
       04 28 00 1A 
       0D 16 0A 00 
04770A 09 19 1D 00 0141*  	db 0x09,0x19,0x1D,0x00,0x00,0x00,0x2A,0x0F,0x01,0x0F,0x01,0x17,0x0C,0x0B,0x0B,0x00 ; row 20
       00 00 2A 0F 
       01 0F 01 17 
       0C 0B 0B 00 
04771A 0A 1A 0D 0E 0142*  	db 0x0A,0x1A,0x0D,0x0E,0x29,0x35,0x2B,0x10,0x02,0x10,0x02,0x18,0x1E,0x0B,0x0B,0x00 ; row 21
       29 35 2B 10 
       02 10 02 18 
       1E 0B 0B 00 
04772A 09 17 0C 0E 0143*  	db 0x09,0x17,0x0C,0x0E,0x2A,0x36,0x2C,0x03,0x00,0x03,0x00,0x19,0x1D,0x15,0x09,0x00 ; row 22
       2A 36 2C 03 
       00 03 00 19 
       1D 15 09 00 
04773A 0A 1A 0D 22 0144*  	db 0x0A,0x1A,0x0D,0x22,0x2B,0x37,0x00,0x03,0x00,0x03,0x0E,0x18,0x1E,0x16,0x0A,0x00 ; row 23
       2B 37 00 03 
       00 03 0E 18 
       1E 16 0A 00 
04774A 09 17 0C 23 0145*  	db 0x09,0x17,0x0C,0x23,0x2C,0x00,0x00,0x00,0x00,0x00,0x2A,0x19,0x1D,0x15,0x09,0x00 ; row 24
       2C 00 00 00 
       00 00 2A 19 
       1D 15 09 00 
04775A 0A 18 1E 24 0146*  	db 0x0A,0x18,0x1E,0x24,0x00,0x00,0x00,0x28,0x00,0x35,0x2B,0x1A,0x0D,0x16,0x0A,0x00 ; row 25
       00 00 00 28 
       00 35 2B 1A 
       0D 16 0A 00 
04776A 0C 19 1D 00 0147*  	db 0x0C,0x19,0x1D,0x00,0x2A,0x0F,0x01,0x0F,0x01,0x36,0x2C,0x17,0x0C,0x17,0x07,0x00 ; row 26
       2A 0F 01 0F 
       01 36 2C 17 
       0C 17 07 00 
04777A 0D 18 1E 22 0148*  	db 0x0D,0x18,0x1E,0x22,0x2B,0x10,0x02,0x10,0x02,0x37,0x00,0x18,0x1E,0x1A,0x08,0x00 ; row 27
       2B 10 02 10 
       02 37 00 18 
       1E 1A 08 00 
04778A 00 19 1D 23 0149*  	db 0x00,0x19,0x1D,0x23,0x2C,0x0E,0x0E,0x00,0x00,0x3F,0x00,0x19,0x1D,0x34,0x05,0x00 ; row 28
       2C 0E 0E 00 
       00 3F 00 19 
       1D 34 05 00 
04779A 00 1A 0D 24 0150*  	db 0x00,0x1A,0x0D,0x24,0x00,0x00,0x3A,0x00,0x00,0x00,0x00,0x1A,0x0D,0x00,0x06,0x00 ; row 29
       00 00 3A 00 
       00 00 00 1A 
       0D 00 06 00 
0477AA 00 1B 1F 25 0151*  	db 0x00,0x1B,0x1F,0x25,0x2D,0x25,0x2D,0x25,0x2D,0x25,0x2D,0x43,0x1B,0x00,0x00,0x00 ; row 30
       2D 25 2D 25 
       2D 25 2D 43 
       1B 00 00 00 
0477BA 00 1B 1F 25 0152*  	db 0x00,0x1B,0x1F,0x25,0x2D,0x25,0x2D,0x25,0x2D,0x25,0x2D,0x43,0x1B,0x00,0x00,0x00 ; row 31
       2D 25 2D 25 
       2D 25 2D 43 
       1B 00 00 00 
0477CA             0153*  tiles_dg_level_4: ; Level 4
0477CA 00 0D 04 19 0154*  	db 0x00,0x0D,0x04,0x19,0x1D,0x1D,0x1D,0x1D,0x1D,0x22,0x0B,0x0D,0x04,0x0E,0x00,0x06 ; row 0
       1D 1D 1D 1D 
       1D 22 0B 0D 
       04 0E 00 06 
0477DA 01 0D 04 00 0155*  	db 0x01,0x0D,0x04,0x00,0x18,0x00,0x06,0x06,0x06,0x0F,0x06,0x0D,0x04,0x02,0x01,0x06 ; row 1
       18 00 06 06 
       06 0F 06 0D 
       04 02 01 06 
0477EA 02 0D 04 13 0156*  	db 0x02,0x0D,0x04,0x13,0x18,0x0B,0x0B,0x07,0x11,0x29,0x14,0x0D,0x04,0x0E,0x00,0x06 ; row 2
       18 0B 0B 07 
       11 29 14 0D 
       04 0E 00 06 
0477FA 03 0D 04 01 0157*  	db 0x03,0x0D,0x04,0x01,0x0C,0x13,0x06,0x08,0x12,0x2A,0x15,0x0D,0x04,0x02,0x01,0x06 ; row 3
       0C 13 06 08 
       12 2A 15 0D 
       04 02 01 06 
04780A 00 0D 04 0D 0158*  	db 0x00,0x0D,0x04,0x0D,0x04,0x21,0x1E,0x23,0x09,0x07,0x16,0x0D,0x04,0x0F,0x02,0x06 ; row 4
       04 21 1E 23 
       09 07 16 0D 
       04 0F 02 06 
04781A 01 0D 04 0D 0159*  	db 0x01,0x0D,0x04,0x0D,0x04,0x0F,0x06,0x06,0x06,0x08,0x17,0x0D,0x04,0x10,0x03,0x06 ; row 5
       04 0F 06 06 
       06 08 17 0D 
       04 10 03 06 
04782A 00 0E 00 0D 0160*  	db 0x00,0x0E,0x00,0x0D,0x04,0x13,0x06,0x07,0x27,0x11,0x14,0x0D,0x04,0x0E,0x00,0x06 ; row 6
       04 13 06 07 
       27 11 14 0D 
       04 0E 00 06 
04783A 01 02 01 0D 0161*  	db 0x01,0x02,0x01,0x0D,0x04,0x13,0x06,0x08,0x28,0x12,0x15,0x0D,0x04,0x02,0x01,0x06 ; row 7
       04 13 06 08 
       28 12 15 0D 
       04 02 01 06 
04784A 00 0F 02 0D 0162*  	db 0x00,0x0F,0x02,0x0D,0x04,0x0E,0x00,0x18,0x0B,0x1F,0x0B,0x0D,0x04,0x0E,0x00,0x06 ; row 8
       04 0E 00 18 
       0B 1F 0B 0D 
       04 0E 00 06 
04785A 01 10 03 0D 0163*  	db 0x01,0x10,0x03,0x0D,0x04,0x22,0x24,0x06,0x06,0x0E,0x0A,0x0D,0x04,0x02,0x01,0x06 ; row 9
       04 22 24 06 
       06 0E 0A 0D 
       04 02 01 06 
04786A 04 0D 04 0D 0164*  	db 0x04,0x0D,0x04,0x0D,0x04,0x03,0x13,0x19,0x1D,0x1D,0x1D,0x0D,0x04,0x0D,0x04,0x06 ; row 10
       04 03 13 19 
       1D 1D 1D 0D 
       04 0D 04 06 
04787A 04 0D 04 0D 0165*  	db 0x04,0x0D,0x04,0x0D,0x04,0x0A,0x03,0x02,0x06,0x06,0x06,0x0D,0x04,0x0D,0x04,0x06 ; row 11
       04 0A 03 02 
       06 06 06 0D 
       04 0D 04 06 
04788A 05 06 06 05 0166*  	db 0x05,0x06,0x06,0x05,0x06,0x02,0x06,0x0E,0x0A,0x1E,0x23,0x09,0x2D,0x2E,0x2E,0x06 ; row 12
       06 02 06 0E 
       0A 1E 23 09 
       2D 2E 2E 06 
04789A 05 06 06 05 0167*  	db 0x05,0x06,0x06,0x05,0x06,0x0E,0x0B,0x1E,0x23,0x09,0x09,0x09,0x2D,0x2E,0x2E,0x06 ; row 13
       06 0E 0B 1E 
       23 09 09 09 
       2D 2E 2E 06 
0478AA 06 06 06 1A 0168*  	db 0x06,0x06,0x06,0x1A,0x1A,0x06,0x06,0x06,0x22,0x1E,0x23,0x09,0x2D,0x2E,0x2E,0x06 ; row 14
       1A 06 06 06 
       22 1E 23 09 
       2D 2E 2E 06 
0478BA 06 06 06 1B 0169*  	db 0x06,0x06,0x06,0x1B,0x0C,0x06,0x06,0x06,0x01,0x26,0x06,0x06,0x2D,0x2E,0x2E,0x06 ; row 15
       0C 06 06 06 
       01 26 06 06 
       2D 2E 2E 06 
0478CA 07 11 14 0D 0170*  	db 0x07,0x11,0x14,0x0D,0x04,0x19,0x1D,0x1D,0x1D,0x05,0x19,0x1D,0x2D,0x2E,0x2E,0x06 ; row 16
       04 19 1D 1D 
       1D 05 19 1D 
       2D 2E 2E 06 
0478DA 08 12 15 0D 0171*  	db 0x08,0x12,0x15,0x0D,0x04,0x18,0x25,0x26,0x06,0x05,0x06,0x06,0x2D,0x2E,0x2E,0x06 ; row 17
       04 18 25 26 
       06 05 06 06 
       2D 2E 2E 06 
0478EA 09 07 16 0D 0172*  	db 0x09,0x07,0x16,0x0D,0x04,0x19,0x1D,0x05,0x19,0x1D,0x1D,0x1D,0x2D,0x2E,0x2E,0x06 ; row 18
       04 19 1D 05 
       19 1D 1D 1D 
       2D 2E 2E 06 
0478FA 06 08 17 0D 0173*  	db 0x06,0x08,0x17,0x0D,0x04,0x02,0x06,0x05,0x06,0x06,0x06,0x1B,0x2D,0x2E,0x2E,0x06 ; row 19
       04 02 06 05 
       06 06 06 1B 
       2D 2E 2E 06 
04790A 06 06 06 06 0174*  	db 0x06,0x06,0x06,0x06,0x0E,0x03,0x06,0x1A,0x1A,0x1A,0x1A,0x0D,0x04,0x0D,0x04,0x06 ; row 20
       0E 03 06 1A 
       1A 1A 1A 0D 
       04 0D 04 06 
04791A 06 06 06 06 0175*  	db 0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x0D,0x04,0x0D,0x04,0x06 ; row 21
       06 06 06 06 
       06 06 06 0D 
       04 0D 04 06 
04792A 06 06 06 06 0176*  	db 0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x07,0x27,0x16,0x0D,0x04,0x0F,0x02,0x06 ; row 22
       06 06 06 06 
       07 27 16 0D 
       04 0F 02 06 
04793A 0A 00 06 06 0177*  	db 0x0A,0x00,0x06,0x06,0x06,0x22,0x1E,0x06,0x08,0x28,0x17,0x0D,0x04,0x10,0x03,0x06 ; row 23
       06 22 1E 06 
       08 28 17 0D 
       04 10 03 06 
04794A 0B 13 18 00 0178*  	db 0x0B,0x13,0x18,0x00,0x06,0x0E,0x0A,0x07,0x11,0x29,0x14,0x0D,0x04,0x0E,0x00,0x06 ; row 24
       06 0E 0A 07 
       11 29 14 0D 
       04 0E 00 06 
04795A 0C 01 0C 0E 0179*  	db 0x0C,0x01,0x0C,0x0E,0x1E,0x23,0x09,0x08,0x12,0x2A,0x15,0x0D,0x04,0x02,0x01,0x06 ; row 25
       1E 23 09 08 
       12 2A 15 0D 
       04 02 01 06 
04796A 04 0D 04 18 0180*  	db 0x04,0x0D,0x04,0x18,0x1F,0x0B,0x0B,0x00,0x02,0x0E,0x0A,0x0D,0x04,0x0D,0x04,0x06 ; row 26
       1F 0B 0B 00 
       02 0E 0A 0D 
       04 0D 04 06 
04797A 04 0D 04 06 0181*  	db 0x04,0x0D,0x04,0x06,0x0F,0x06,0x26,0x0F,0x01,0x06,0x06,0x0D,0x04,0x0D,0x04,0x06 ; row 27
       0F 06 26 0F 
       01 06 06 0D 
       04 0D 04 06 
04798A 00 0D 04 19 0182*  	db 0x00,0x0D,0x04,0x19,0x13,0x19,0x05,0x10,0x0B,0x0A,0x0B,0x05,0x19,0x1D,0x1D,0x06 ; row 28
       13 19 05 10 
       0B 0A 0B 05 
       19 1D 1D 06 
04799A 01 0D 04 06 0183*  	db 0x01,0x0D,0x04,0x06,0x13,0x06,0x05,0x0E,0x0B,0x0B,0x1F,0x05,0x18,0x03,0x06,0x06 ; row 29
       13 06 05 0E 
       0B 0B 1F 05 
       18 03 06 06 
0479AA 02 0D 04 19 0184*  	db 0x02,0x0D,0x04,0x19,0x13,0x19,0x05,0x06,0x06,0x07,0x2B,0x05,0x19,0x1D,0x1D,0x06 ; row 30
       13 19 05 06 
       06 07 2B 05 
       19 1D 1D 06 
0479BA 03 0D 04 1C 0185*  	db 0x03,0x0D,0x04,0x1C,0x20,0x06,0x05,0x06,0x06,0x08,0x2C,0x05,0x06,0x06,0x06,0x06 ; row 31
       20 06 05 06 
       06 08 2C 05 
       06 06 06 06 
0479CA             0186*  tiles_dg_level_5: ; Level 5
0479CA 00 00 00 00 0187*  	db 0x00,0x00,0x00,0x00,0x11,0x15,0x1A,0x1F,0x22,0x22,0x22,0x15,0x1A,0x27,0x27,0x27 ; row 0
       11 15 1A 1F 
       22 22 22 15 
       1A 27 27 27 
0479DA 00 00 00 01 0188*  	db 0x00,0x00,0x00,0x01,0x12,0x16,0x1B,0x00,0x00,0x00,0x30,0x16,0x1B,0x27,0x27,0x27 ; row 1
       12 16 1B 00 
       00 00 30 16 
       1B 27 27 27 
0479EA 00 00 00 0B 0189*  	db 0x00,0x00,0x00,0x0B,0x0C,0x15,0x1A,0x00,0x06,0x00,0x31,0x15,0x1A,0x27,0x27,0x27 ; row 2
       0C 15 1A 00 
       06 00 31 15 
       1A 27 27 27 
0479FA 00 00 00 0C 0190*  	db 0x00,0x00,0x00,0x0C,0x0C,0x16,0x1B,0x00,0x07,0x19,0x32,0x16,0x1B,0x3D,0x3F,0x27 ; row 3
       0C 16 1B 00 
       07 19 32 16 
       1B 3D 3F 27 
047A0A 00 00 01 00 0191*  	db 0x00,0x00,0x01,0x00,0x00,0x15,0x1A,0x1F,0x22,0x15,0x1A,0x15,0x1A,0x15,0x1A,0x27 ; row 4
       00 15 1A 1F 
       22 15 1A 15 
       1A 15 1A 27 
047A1A 00 00 02 00 0192*  	db 0x00,0x00,0x02,0x00,0x00,0x16,0x1B,0x00,0x23,0x16,0x1B,0x16,0x1B,0x16,0x1B,0x27 ; row 5
       00 16 1B 00 
       23 16 1B 16 
       1B 16 1B 27 
047A2A 00 00 00 0D 0193*  	db 0x00,0x00,0x00,0x0D,0x11,0x15,0x1A,0x00,0x24,0x28,0x33,0x15,0x1A,0x3E,0x40,0x27 ; row 6
       11 15 1A 00 
       24 28 33 15 
       1A 3E 40 27 
047A3A 00 00 00 0E 0194*  	db 0x00,0x00,0x00,0x0E,0x11,0x16,0x1B,0x00,0x25,0x29,0x28,0x16,0x1B,0x27,0x27,0x27 ; row 7
       11 16 1B 00 
       25 29 28 16 
       1B 27 27 27 
047A4A 00 00 06 00 0195*  	db 0x00,0x00,0x06,0x00,0x00,0x0F,0x13,0x20,0x26,0x2A,0x28,0x15,0x1A,0x3E,0x40,0x27 ; row 8
       00 0F 13 20 
       26 2A 28 15 
       1A 3E 40 27 
047A5A 00 00 07 00 0196*  	db 0x00,0x00,0x07,0x00,0x08,0x10,0x14,0x21,0x27,0x2B,0x34,0x16,0x1B,0x3D,0x3F,0x27 ; row 9
       08 10 14 21 
       27 2B 34 16 
       1B 3D 3F 27 
047A6A 00 00 02 03 0197*  	db 0x00,0x00,0x02,0x03,0x09,0x0F,0x13,0x17,0x1C,0x20,0x26,0x15,0x1A,0x15,0x1A,0x27 ; row 10
       09 0F 13 17 
       1C 20 26 15 
       1A 15 1A 27 
047A7A 01 00 00 04 0198*  	db 0x01,0x00,0x00,0x04,0x0A,0x10,0x14,0x18,0x1D,0x2C,0x35,0x16,0x1B,0x16,0x1B,0x27 ; row 11
       0A 10 14 18 
       1D 2C 35 16 
       1B 16 1B 27 
047A8A 02 00 00 05 0199*  	db 0x02,0x00,0x00,0x05,0x00,0x01,0x00,0x0F,0x13,0x2D,0x36,0x15,0x1A,0x15,0x1A,0x27 ; row 12
       00 01 00 0F 
       13 2D 36 15 
       1A 15 1A 27 
047A9A 00 00 00 00 0200*  	db 0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x10,0x14,0x21,0x0C,0x16,0x1B,0x16,0x1B,0x27 ; row 13
       00 02 00 10 
       14 21 0C 16 
       1B 16 1B 27 
047AAA 00 00 00 0F 0201*  	db 0x00,0x00,0x00,0x0F,0x13,0x17,0x1C,0x20,0x26,0x2A,0x28,0x15,0x1A,0x15,0x1A,0x27 ; row 14
       13 17 1C 20 
       26 2A 28 15 
       1A 15 1A 27 
047ABA 00 00 08 10 0202*  	db 0x00,0x00,0x08,0x10,0x14,0x18,0x1D,0x21,0x27,0x2B,0x34,0x16,0x1B,0x16,0x1B,0x27 ; row 15
       14 18 1D 21 
       27 2B 34 16 
       1B 16 1B 27 
047ACA 00 03 09 01 0203*  	db 0x00,0x03,0x09,0x01,0x00,0x00,0x00,0x00,0x00,0x24,0x37,0x15,0x1A,0x15,0x1A,0x27 ; row 16
       00 00 00 00 
       00 24 37 15 
       1A 15 1A 27 
047ADA 00 04 0A 02 0204*  	db 0x00,0x04,0x0A,0x02,0x00,0x0F,0x13,0x17,0x1C,0x20,0x26,0x16,0x1B,0x16,0x1B,0x27 ; row 17
       00 0F 13 17 
       1C 20 26 16 
       1B 16 1B 27 
047AEA 00 05 00 00 0205*  	db 0x00,0x05,0x00,0x00,0x08,0x10,0x14,0x18,0x1D,0x21,0x38,0x15,0x1A,0x15,0x1A,0x27 ; row 18
       08 10 14 18 
       1D 21 38 15 
       1A 15 1A 27 
047AFA 00 00 00 03 0206*  	db 0x00,0x00,0x00,0x03,0x09,0x01,0x00,0x06,0x00,0x00,0x39,0x16,0x1B,0x16,0x1B,0x27 ; row 19
       09 01 00 06 
       00 00 39 16 
       1B 16 1B 27 
047B0A 00 00 00 04 0207*  	db 0x00,0x00,0x00,0x04,0x0A,0x02,0x00,0x07,0x00,0x2E,0x0C,0x15,0x1A,0x3E,0x40,0x27 ; row 20
       0A 02 00 07 
       00 2E 0C 15 
       1A 3E 40 27 
047B1A 00 00 00 05 0208*  	db 0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x02,0x00,0x28,0x3A,0x16,0x1B,0x27,0x27,0x27 ; row 21
       00 00 00 02 
       00 28 3A 16 
       1B 27 27 27 
047B2A 00 00 00 00 0209*  	db 0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x29,0x27,0x15,0x1A,0x3E,0x40,0x27 ; row 22
       06 00 00 00 
       00 29 27 15 
       1A 3E 40 27 
047B3A 00 00 00 00 0210*  	db 0x00,0x00,0x00,0x00,0x07,0x19,0x1E,0x19,0x1E,0x2F,0x3B,0x16,0x1B,0x3D,0x3F,0x27 ; row 23
       07 19 1E 19 
       1E 2F 3B 16 
       1B 3D 3F 27 
047B4A 00 00 00 00 0211*  	db 0x00,0x00,0x00,0x00,0x02,0x15,0x1A,0x15,0x1A,0x15,0x1A,0x15,0x1A,0x15,0x1A,0x27 ; row 24
       02 15 1A 15 
       1A 15 1A 15 
       1A 15 1A 27 
047B5A 00 00 00 01 0212*  	db 0x00,0x00,0x00,0x01,0x00,0x16,0x1B,0x16,0x1B,0x16,0x1B,0x16,0x1B,0x16,0x1B,0x27 ; row 25
       00 16 1B 16 
       1B 16 1B 16 
       1B 16 1B 27 
047B6A 00 00 00 02 0213*  	db 0x00,0x00,0x00,0x02,0x00,0x15,0x1A,0x1F,0x22,0x22,0x22,0x15,0x1A,0x27,0x27,0x27 ; row 26
       00 15 1A 1F 
       22 22 22 15 
       1A 27 27 27 
047B7A 00 00 00 00 0214*  	db 0x00,0x00,0x00,0x00,0x11,0x16,0x1B,0x01,0x00,0x00,0x30,0x16,0x1B,0x27,0x27,0x27 ; row 27
       11 16 1B 01 
       00 00 30 16 
       1B 27 27 27 
047B8A 00 00 00 00 0215*  	db 0x00,0x00,0x00,0x00,0x11,0x15,0x1A,0x02,0x00,0x00,0x31,0x15,0x1A,0x27,0x27,0x27 ; row 28
       11 15 1A 02 
       00 00 31 15 
       1A 27 27 27 
047B9A 00 00 01 00 0216*  	db 0x00,0x00,0x01,0x00,0x00,0x16,0x1B,0x00,0x06,0x00,0x3C,0x16,0x1B,0x27,0x27,0x27 ; row 29
       00 16 1B 00 
       06 00 3C 16 
       1B 27 27 27 
047BAA 00 00 02 0D 0217*  	db 0x00,0x00,0x02,0x0D,0x11,0x15,0x1A,0x1F,0x22,0x22,0x22,0x15,0x1A,0x27,0x27,0x27 ; row 30
       11 15 1A 1F 
       22 22 22 15 
       1A 27 27 27 
047BBA 00 00 00 0E 0218*  	db 0x00,0x00,0x00,0x0E,0x11,0x16,0x1B,0x00,0x02,0x00,0x3C,0x16,0x1B,0x27,0x27,0x27 ; row 31
       11 16 1B 00 
       02 00 3C 16 
       1B 27 27 27 
047BCA             0052       include "player.inc"
047BCA             0001*  ; ######## GAME STATE VARIABLES #######
047BCA             0002*  ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
047BCA 00 00 00    0003*  player_score: dl 0 ; integer
047BCD             0004*  ; player current shields,binary
047BCD             0005*  ; when < 0 player splodes
047BCD             0006*  ; restores to player_max_shields when new ship spawns
047BCD 10 00 00    0007*  player_shields: dl 16 ; integer
047BD0             0008*  ; max player shields,binary
047BD0             0009*  ; can increase with power-ups (todo)
047BD0 10 00 00    0010*  player_max_shields: dl 16 ; integer
047BD3             0011*  ; when reaches zero,game ends
047BD3             0012*  ; can increase based on TODO
047BD3 03          0013*  player_ships: db 3 ; integer
047BD4             0014*  
047BD4             0015*  speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
047BD4             0016*  
047BD4             0017*  ; ######### PLAYER SPRITE PARAMETERS ##########
047BD4             0018*  ; uses the same offsets from its table base as the main sprite table:
047BD4             0019*  player_start_variables: ; label marking beginning of table
047BD4 10          0020*  player_id:               db table_max_records
047BD5 00          0021*  player_type:             db     0x00 ; 1 bytes currently not used
047BD6 2B 01 00    0022*  player_base_bufferId:    dl BUF_SHIP_0L ; 3 bytes bitmap bufferId
047BD9 00 00 00    0023*  player_move_program:     dl 0x000000 ; 3 bytes not currently used
047BDC 00          0024*  player_collisions:       db     0x00 ; 1 bytes uses sprite_alive and sprite_just_died flags
047BDD 00          0025*  player_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
047BDE 00          0026*  player_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
047BDF 00 00 00    0027*  player_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
047BE2 00 00 00    0028*  player_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
047BE5 00 00 00    0029*  player_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
047BE8 00 00 00    0030*  player_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
047BEB 00 00 00    0031*  player_vel:              dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
047BEE 00 00 00    0032*  player_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
047BF1 00 00 00    0033*  player_orientation:      dl 0x000000 ; 3 bytes not currently used
047BF4 00          0034*  player_animation:        db     0x00 ; 1 bytes not currently used
047BF5 00          0035*  player_animation_timer:  db     0x00 ; 1 bytes not currently used
047BF6 00          0036*  player_move_timer:       db     0x00 ; 1 bytes not currently used
047BF7 00          0037*  player_move_step:        db     0x00 ; 1 bytes not currently used
047BF8 00          0038*  player_points:           db     0x00 ; 1 bytes not currently used
047BF9 00          0039*  player_shield_damage:    db     0x00 ; 1 bytes not currently used
047BFA             0040*  player_end_variables: ; for when we want to traverse this table in reverse
047BFA             0041*  
047BFA             0042*  ; set initial player position
047BFA             0043*  ; inputs: none,everything is hardcoded
047BFA             0044*  ; outputs: player_x/y set to bottom-left corner of screen
047BFA             0045*  ; destroys: a
047BFA             0046*  player_init:
047BFA 3A D4 7B 04 0047*  	ld a,(player_id)
047BFE CD 99 19 04 0048*  	call vdu_sprite_select
047C02 CD AC 19 04 0049*      call vdu_sprite_clear_frames
047C06 21 2B 01 00 0050*      ld hl,BUF_SHIP_0L
047C0A CD EE 1A 04 0051*      call vdu_sprite_add_buff
047C0E 21 2C 01 00 0052*      ld hl,BUF_SHIP_1C
047C12 CD EE 1A 04 0053*      call vdu_sprite_add_buff
047C16 21 2D 01 00 0054*      ld hl,BUF_SHIP_2R
047C1A CD EE 1A 04 0055*      call vdu_sprite_add_buff
047C1E 01 00 00 00 0056*      ld bc,0
047C22 ED 43 DF 7B 0057*      ld (player_x),bc
       04          
047C27 11 00 6F 01 0058*      ld de,sprite_bottom*256 ; max sprite y-coordinate
047C2B ED 53 E2 7B 0059*      ld (player_y),de
       04          
047C30 CD 65 1A 04 0060*      call vdu_sprite_move_abs168
047C34 CD 0F 1A 04 0061*      call vdu_sprite_show
047C38 21 AD 81 04 0062*      ld hl,player_alive
047C3C 22 9F 81 04 0063*      ld (player_state),hl
047C40 21 DC 7B 04 0064*      ld hl,player_collisions
047C44 CB F6       0065*      set sprite_alive,(hl)
047C46 C9          0066*      ret
047C47             0067*  
047C47             0068*  ; process player keyboard input, set player bitmap
047C47             0069*  ; velocities and draw player bitmap at updated coordinates
047C47             0070*  ; Inputs: player_x/y set at desired position
047C47             0071*  ; Returns: player bitmap drawn at updated position
047C47             0072*  ; Destroys: probably everything except maybe iy
047C47             0073*  ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
047C47             0074*  ; TODO: requires sprite implementation
047C47             0075*  player_input:
047C47             0076*  ; ; did we die last frame?
047C47             0077*  ;     ld a,(player_collisions)
047C47             0078*  ;     and %00000010 ; zero flag will be set if not dead
047C47             0079*  ;     jr z,player_not_dead
047C47             0080*  ; ; yes we died
047C47             0081*  ;     call kill_player
047C47             0082*  ;     ret ; done
047C47             0083*  player_not_dead: ; yay we didn't die
047C47             0084*  ; reset player component velocities to zero as the default
047C47 21 00 00 00 0085*  	ld hl,0
047C4B 22 E5 7B 04 0086*  	ld (player_xvel),hl
047C4F 22 E8 7B 04 0087*  	ld (player_yvel),hl
047C53             0088*  ; make ship the active sprite
047C53 3A D4 7B 04 0089*      ld a,(player_id)
047C57 CD 99 19 04 0090*      call vdu_sprite_select
047C5B             0091*  ; check for keypresses and branch accordingly
047C5B             0092*  ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
047C5B             0093*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
047C5B 3E 1E       0001*M 			LD	A, function
047C5D 5B CF       0002*M 			RST.LIL	08h
047C5F             0094*  ; we test all four arrow keys and add/subract velocities accordingly
047C5F             0095*  ; this handles the case where two opposing movement keys
047C5F             0096*  ; are down simultaneously (velocities will net to zero)
047C5F             0097*  ; and allows diagonal movement when a vertical and horizontal key are down
047C5F             0098*  ; it also allows movement and action keys to be detected simultaneously
047C5F             0099*  ; so we can walk and chew gum at the same time
047C5F 3E 01       0100*      ld a,1 ; set ship's default animation to center
047C61             0101*          ; if left and right are both down a will net to
047C61             0102*  
047C61             0103*  ; 99 Space: fire main weapon
047C61 DD CB 0C 56 0104*      bit 2,(ix+12)
047C65 F5          0105*      push af ; save flags for after player movement processed
047C66             0106*  ; 26 Left: move player left
047C66 DD CB 03 4E 0107*      bit 1,(ix+3)
047C6A CA 7C 7C 04 0108*      jp z,@F
047C6E 2A E5 7B 04 0109*      ld hl,(player_xvel)
047C72 01 00 FD FF 0110*      ld bc,-speed_player
047C76 09          0111*      add hl,bc
047C77 22 E5 7B 04 0112*      ld (player_xvel),hl
047C7B 3D          0113*      dec a ; set ship's animation to left
047C7C             0114*  @@:
047C7C             0115*  ; 122 Right: move player right
047C7C DD CB 0F 4E 0116*      bit 1,(ix+15)
047C80 CA 92 7C 04 0117*  	jp z,@F
047C84 2A E5 7B 04 0118*      ld hl,(player_xvel)
047C88 01 00 03 00 0119*      ld bc,speed_player
047C8C 09          0120*      add hl,bc
047C8D 22 E5 7B 04 0121*      ld (player_xvel),hl
047C91 3C          0122*      inc a ; set ship's animation to right
047C92             0123*  @@:
047C92             0124*  ; 58 Up: move player up
047C92 DD CB 07 4E 0125*      bit 1,(ix+7)
047C96 CA A7 7C 04 0126*  	jp z,@F
047C9A 2A E8 7B 04 0127*      ld hl,(player_yvel)
047C9E 01 00 FD FF 0128*      ld bc,-speed_player
047CA2 09          0129*      add hl,bc
047CA3 22 E8 7B 04 0130*      ld (player_yvel),hl
047CA7             0131*  @@:
047CA7             0132*  ; 42 Down: move player down
047CA7 DD CB 05 4E 0133*      bit 1,(ix+5)
047CAB CA BC 7C 04 0134*  	jp z,@F
047CAF 2A E8 7B 04 0135*      ld hl,(player_yvel)
047CB3 01 00 03 00 0136*      ld bc,speed_player
047CB7 09          0137*      add hl,bc
047CB8 22 E8 7B 04 0138*      ld (player_yvel),hl
047CBC             0139*  @@:
047CBC             0140*  ; a should land here loaded with the correct frame
047CBC CD FC 19 04 0141*      call vdu_sprite_select_frame
047CC0             0142*  ; draw player at updated position
047CC0 FD 21 D4 7B 0143*      ld iy,player_start_variables
       04          
047CC5 FD 22 67 7F 0144*      ld (table_pointer),iy
       04          
047CCA CD 1B 80 04 0145*      call move_sprite
047CCE ED 4B DF 7B 0146*      ld bc,(player_x)
       04          
047CD3 ED 5B E2 7B 0147*      ld de,(player_y)
       04          
047CD8 CD 65 1A 04 0148*  	call vdu_sprite_move_abs168
047CDC             0149*  ; process player laser fire
047CDC F1          0150*      pop af ; restore flags from spacebar check
047CDD C2 40 6F 04 0151*      jp nz,fire_laser ; will return to caller from there
047CE1 C9          0152*      ret
047CE2             0153*  ; end player_input
047CE2             0154*  
047CE2             0155*  ; ###################################################################
047CE2             0156*  ; TODO: the below is all stuff from the original code we need to port
047CE2             0157*  ; ###################################################################
047CE2             0158*  
047CE2             0159*  kill_player:
047CE2             0160*  ; ; set player status to dead
047CE2             0161*  ;     xor a; sets all player flags to zero
047CE2             0162*  ;     ld (player_collisions),a
047CE2             0163*  ; ; deduct a ship from the inventory
047CE2             0164*  ;     ld a,(player_ships)
047CE2             0165*  ;     dec a
047CE2             0166*  ;     ld (player_ships),a
047CE2             0167*  ; ; are we out of ships?
047CE2             0168*  ;     jp z,game_over
047CE2             0169*  ; ; wait a few ticks
047CE2             0170*  ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
047CE2             0171*  ;     ld (player_move_timer),a
047CE2             0172*  ; kill_player_loop:
047CE2             0173*  ;     call vdu_vblank
047CE2             0174*  ;     ld a,(player_move_timer)
047CE2             0175*  ;     dec a
047CE2             0176*  ;     ld (player_move_timer),a
047CE2             0177*  ;     jr nz,kill_player_loop
047CE2             0178*  ;     call player_init ; player respawn if timer zero
047CE2 C9          0179*      ret ; and out
047CE3             0180*  
047CE3             0181*  ; draws the player's shields level
047CE3             0182*  ; draw_shields:
047CE3             0183*  ; TODO: Agonize this routine
047CE3             0184*  ; ; prep the loop to draw the bars
047CE3             0185*  ;     ld a,(player_shields) ; snag shields
047CE3             0186*  ;     and a
047CE3             0187*  ;     ret z ; don't draw if zero shields
047CE3             0188*  ; ; set loop counter and drawing position
047CE3             0189*  ;     ld b,a ; loop counter
047CE3             0190*  ;     ld hl,#5300+48+12
047CE3             0191*  ; ; set color based on bars remaining
047CE3             0192*  ;     ld c,103 ; bright green 28fe0a
047CE3             0193*  ;     cp 9
047CE3             0194*  ;     jp p,draw_shields_loop
047CE3             0195*  ;     ld c,74 ; bright yellow eafe5b
047CE3             0196*  ;     cp 3
047CE3             0197*  ;     jp p,draw_shields_loop
047CE3             0198*  ;     ld c,28 ; bright red fe0a0a
047CE3             0199*  ; draw_shields_loop:
047CE3             0200*  ;     push bc ; yup,outta
047CE3             0201*  ;     push hl ; registers again
047CE3             0202*  ;     ; ld a,#A8 ; ▀,168
047CE3             0203*  ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
047CE3             0204*  ;     ; call draw_char
047CE3             0205*  ;     call draw_num ; we nuked draw_char for the time being
047CE3             0206*  ;     pop hl
047CE3             0207*  ;     ld a,8
047CE3             0208*  ;     add a,l
047CE3             0209*  ;     ld l,a
047CE3             0210*  ;     pop bc
047CE3             0211*  ;     djnz draw_shields_loop
047CE3             0212*      ; ret
047CE3             0213*  
047CE3             0214*  score_x: equ 0
047CE3             0215*  score_y: equ 1
047CE3             0216*  ; prints the player's score
047CE3             0217*  print_score:
047CE3             0218*  ; DEBUG
047CE3 0E 00       0219*      ld c,score_x
047CE5 06 00       0220*      ld b,score_y-1
047CE7 CD 9B 14 04 0221*      call vdu_move_cursor
047CEB CD 70 00 04 0222*      call printInline
047CEF 53 63 6F 72 0223*      asciz "Score:"
       65 3A 00    
047CF6             0224*  ; END DEBUG
047CF6 0E 00       0225*      ld c,score_x
047CF8 06 01       0226*      ld b,score_y
047CFA CD 9B 14 04 0227*      call vdu_move_cursor
047CFE 2A CA 7B 04 0228*      ld hl,(player_score)
047D02 CD 76 01 04 0229*      call printDec
047D06 C9          0230*      ret
047D07             0231*  
047D07             0232*  ; draw_lives:
047D07             0233*  ;     ld hl,player_small ; make small yellow ship the active sprite
047D07             0234*  ;     ld (sprite_base_bufferId),hl
047D07             0235*  ;     ; ld a,#80 ; northern orientation
047D07             0236*  ;     ; ld (sprite_orientation),a
047D07             0237*  ;     ld hl,0 ; north
047D07             0238*  ;     ld (sprite_heading),hl
047D07             0239*  ;     xor a
047D07             0240*  ;     ld (sprite_animation),a
047D07             0241*  ;     ld a,#56 ; top of visible screen
047D07             0242*  ;     ld (sprite_y+1),a
047D07             0243*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
047D07             0244*  ;     ld a,(player_ships)
047D07             0245*  ;     dec a ; we draw one fewer ships than lives
047D07             0246*  ;     ret z ; nothing to draw here, move along
047D07             0247*  ;     ld b,a ; loop counter
047D07             0248*  ;     ld a,256-16 ; initial x position
047D07             0249*  ; draw_lives_loop:
047D07             0250*  ;     ld (sprite_x+1),a
047D07             0251*  ;     push af
047D07             0252*  ;     push bc
047D07             0253*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
047D07             0254*  ;     pop bc
047D07             0255*  ;     pop af
047D07             0256*  ;     sub 10
047D07             0257*  ;     djnz draw_lives_loop
047D07             0258*  ;     ret
047D07             0053       include "sprites.inc"
047D07             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
047D07             0002*  table_bytes_per_record: equ 38 ; 38 bytes per sprite record
047D07             0003*  sprite_id:              equ 00 ; 1 bytes unique spriteId, zero-based
047D07             0004*  sprite_type:            equ 01 ; 1 bytes type of sprite as defined in enemies.inc
047D07             0005*  sprite_base_bufferId:   equ 02 ; 3 bytes bitmap bufferId
047D07             0006*  sprite_move_program:    equ 05 ; 3 bytes address of sprite's behavior subroutine
047D07             0007*  sprite_collisions:      equ 08 ; 1 bytes see collisions.inc constants for bit definitions
047D07             0008*  sprite_dim_x:           equ 09 ; 1 bytes sprite width in pixels
047D07             0009*  sprite_dim_y:           equ 10 ; 1 bytes sprite height in pixels
047D07             0010*  sprite_x:               equ 11 ; 3 bytes 16.8 fractional x position in pixels
047D07             0011*  sprite_y:               equ 14 ; 3 bytes 16.8 fractional y position in pixels
047D07             0012*  sprite_xvel:            equ 17 ; 3 bytes x-component velocity, 16.8 fixed, pixels
047D07             0013*  sprite_yvel:            equ 20 ; 3 bytes y-component velocity, 16.8 fixed, pixels
047D07             0014*  sprite_vel:             equ 23 ; 3 bytes velocity px/frame (16.8 fixed)
047D07             0015*  sprite_heading:         equ 26 ; 3 bytes sprite movement direction deg256 16.8 fixed
047D07             0016*  sprite_orientation:     equ 29 ; 3 bytes orientation bits
047D07             0017*  sprite_animation:       equ 32 ; 1 bytes current animation index, zero-based
047D07             0018*  sprite_animation_timer: equ 33 ; 1 bytes when hits zero, draw next animation
047D07             0019*  sprite_move_timer:      equ 34 ; 1 bytes when zero, go to next move program, or step
047D07             0020*  sprite_move_step:       equ 35 ; 1 bytes stage in a move program sequence, varies
047D07             0021*  sprite_points:          equ 36 ; 1 bytes points awarded for killing this sprite type
047D07             0022*  sprite_shield_damage:   equ 37 ; 1 bytes shield points deducted for collision
047D07             0023*  
047D07             0024*  ; ###### SPRITE TABLE VARIABLES ######
047D07             0025*  ; maximum number of sprites
047D07             0026*  table_max_records: equ 16 ; it can handle more but this is pushing it
047D07             0027*  table_total_bytes: equ table_max_records*table_bytes_per_record
047D07             0028*  
047D07             0029*  ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
047D07             0030*  table_base:
047D07 00 00 00 00 0031*  sprite_start_variables:  blkb table_total_bytes, 0 ; fill with zeroes
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047F67             0032*  sprite_end_variables: ; in case we want to traverse the table in reverse
047F67             0033*  
047F67             0034*  ; pointer to top address of current record, initialized to table_base
047F67 07 7D 04    0035*  table_pointer: dl table_base
047F6A             0036*  ; how many active sprites
047F6A 00          0037*  table_active_sprites: db 0x00
047F6B             0038*  ; flag indicating collision with screen edge
047F6B             0039*  ; uses orientation codes to specify which edge(s)
047F6B 00          0040*  sprite_screen_edge: db #00
047F6C             0041*  ; next sprite id to use
047F6C 00          0042*  sprite_next_id: db 0
047F6D             0043*  
047F6D             0044*  ; origin_top: equ 48
047F6D             0045*  origin_top: equ 0 ; DEBUG
047F6D             0046*  origin_left: equ 128
047F6D             0047*  field_top: equ 0
047F6D             0048*  field_bottom: equ 383-origin_top
047F6D             0049*  field_left: equ 0
047F6D             0050*  field_right: equ 255
047F6D             0051*  sprite_top: equ 0
047F6D             0052*  sprite_bottom: equ field_bottom-16
047F6D             0053*  sprite_left: equ field_left
047F6D             0054*  sprite_right: equ field_right-16
047F6D             0055*  
047F6D             0056*  ; ######### COLLISION SPRITE PARAMETERS ##########
047F6D             0057*  ; integer coordinates are all that are needed for collision calculations
047F6D 00          0058*  collision_x: db 0x00
047F6E 00          0059*  collision_y: db 0x00
047F6F 00          0060*  collision_dim_x: db 0x00
047F70 00          0061*  collision_dim_y: db 0x00
047F71             0062*  
047F71             0063*  ; scratch variables
047F71 00          0064*  x: db 0x00 ; 8-bit signed integer
047F72 00          0065*  y: db 0x00 ; 8-bit signed integer
047F73 00 00 00    0066*  x0: dl 0x000000 ; 16.8 signed fixed place
047F76 00 00 00    0067*  y0: dl 0x000000 ; 16.8 signed fixed place
047F79 00 00 00    0068*  incx1: dl 0x000000 ; 16.8 signed fixed place
047F7C 00 00 00    0069*  incy1: dl 0x000000 ; 16.8 signed fixed place
047F7F 00 00 00    0070*  incx2: dl 0x000000 ; 16.8 signed fixed place
047F82 00 00 00    0071*  incy2: dl 0x000000 ; 16.8 signed fixed place
047F85             0072*  
047F85             0073*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
047F85 00 00 00    0074*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
047F88 00 00 00    0075*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
047F8B 00 00 00    0076*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
047F8E             0077*  
047F8E             0078*  ; gets the next available sprite id
047F8E             0079*  ; inputs; none
047F8E             0080*  ; returns: if new sprite available, a = sprite id,
047F8E             0081*  ;           ix pointing to new sprite vars, carry set
047F8E             0082*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
047F8E             0083*  ; destroys: a,b,hl,ix
047F8E             0084*  ; affects: bumps table_active_sprites by one
047F8E             0085*  table_get_next_id:
047F8E DD 21 07 7D 0086*      ld ix,table_base
       04          
047F93 11 26 00 00 0087*      ld de,table_bytes_per_record
047F97 06 10       0088*      ld b,table_max_records
047F99             0089*  @loop:
047F99 DD 7E 01    0090*      ld a,(ix+sprite_type)
047F9C A7          0091*      and a
047F9D 28 06       0092*      jr z,@found
047F9F DD 19       0093*      add ix,de
047FA1 10 F6       0094*      djnz @loop
047FA3             0095*  @notfound:
047FA3 AF          0096*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
047FA4 C9          0097*      ret
047FA5             0098*  @found:
047FA5             0099*  ; bump number of active sprites
047FA5 21 6A 7F 04 0100*      ld hl,table_active_sprites
047FA9 34          0101*      inc (hl)
047FAA             0102*  ; return sprite id
047FAA 3E 10       0103*      ld a,table_max_records
047FAC 90          0104*      sub b
047FAD 32 6C 7F 04 0105*      ld (sprite_next_id),a
047FB1 37          0106*      scf ; sets carry flag indicating we found a free sprite
047FB2 C9          0107*      ret ; done
047FB3             0108*  ; end table_get_next_id
047FB3             0109*  
047FB3             0110*  ; deactivate the sprite with the given id
047FB3             0111*  ; inputs: iy set to sprite record, vdu_sprite_select called
047FB3             0112*  ; outputs: nothing
047FB3             0113*  ; destroys: a,hl
047FB3             0114*  ; affects: decrements table_active_sprites by one
047FB3             0115*  table_deactivate_sprite:
047FB3 CD 1D 1A 04 0116*      call vdu_sprite_hide
047FB7 AF          0117*      xor a
047FB8 FD 77 01    0118*      ld (iy+sprite_type),a
047FBB 21 6A 7F 04 0119*      ld hl,table_active_sprites
047FBF 35          0120*      dec (hl)
047FC0 C9          0121*      ret
047FC1             0122*  ; end table_deactivate_sprite
047FC1             0123*  
047FC1             0124*  sprites_init:
047FC1             0125*  ; initialize sprites
047FC1 CD CD 1A 04 0126*  	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
047FC5 AF          0127*  	xor a
047FC6             0128*  @sprite_loop:
047FC6 F5          0129*  	push af
047FC7 CD 99 19 04 0130*  	call vdu_sprite_select
047FCB 21 00 01 00 0131*  	ld hl,BUF_CRATER ; can be anything, but why not blank?
047FCF CD EE 1A 04 0132*  	call vdu_sprite_add_buff
047FD3 F1          0133*  	pop af
047FD4 3C          0134*  	inc a
047FD5 FE 12       0135*  	cp table_max_records+2 ; tack on sprites for player and laser
047FD7 20 ED       0136*  	jr nz,@sprite_loop
047FD9 3C          0137*  	inc a
047FDA CD CD 19 04 0138*  	call vdu_sprite_activate
047FDE             0139*  
047FDE             0140*  ; define player sprite
047FDE 3A D4 7B 04 0141*  	ld a,(player_id)
047FE2 CD 99 19 04 0142*  	call vdu_sprite_select
047FE6 CD AC 19 04 0143*  	call vdu_sprite_clear_frames
047FEA 21 2B 01 00 0144*  	ld hl,BUF_SHIP_0L
047FEE 01 03 00 00 0145*  	ld bc,3 ; three bitmaps for player ship
047FF2             0146*  @sprite_player_loop:
047FF2 C5          0147*  	push bc
047FF3 E5          0148*  	push hl
047FF4 CD EE 1A 04 0149*  	call vdu_sprite_add_buff
047FF8 E1          0150*  	pop hl
047FF9 23          0151*  	inc hl
047FFA C1          0152*  	pop bc
047FFB 10 F5       0153*  	djnz @sprite_player_loop
047FFD             0154*  
047FFD             0155*  ; define laser sprite
047FFD 3A D7 6E 04 0156*  	ld a,(laser_id)
048001 CD 99 19 04 0157*  	call vdu_sprite_select
048005 CD AC 19 04 0158*  	call vdu_sprite_clear_frames
048009 21 08 01 00 0159*  	ld hl,BUF_LASER_A
04800D 06 02       0160*  	ld b,2 ; two bitmaps for laser
04800F             0161*  @sprite_laser_loop:
04800F C5          0162*  	push bc
048010 E5          0163*  	push hl
048011 CD EE 1A 04 0164*  	call vdu_sprite_add_buff
048015 E1          0165*  	pop hl
048016 23          0166*  	inc hl
048017 C1          0167*  	pop bc
048018 10 F5       0168*  	djnz @sprite_laser_loop
04801A             0169*  ; all done
04801A C9          0170*      ret
04801B             0171*  ; end sprites_init
04801B             0172*  
04801B             0173*  ; compute a sprite's new position based on its component x,y velocities
04801B             0174*  ; with screen boundary checking and update its sprite table record accordingly
04801B             0175*  ; inputs: table_pointer set to sprite record
04801B             0176*  ; returns: updated x, y positions and edge collision flags in sprite table record
04801B             0177*  ; destroys: everything
04801B             0178*  ; note: actual rendering of sprite must be handled by caller
04801B             0179*  move_sprite:
04801B FD 2A 67 7F 0180*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
048020             0181*  ; x-axis movement
048020 FD 27 0B    0182*      ld hl,(iy+sprite_x)
048023 FD 17 11    0183*      ld de,(iy+sprite_xvel)
048026 19          0184*      add hl,de
048027 FD 2F 0B    0185*      ld (iy+sprite_x),hl
04802A             0186*  ; y-axis movement
04802A FD 27 0E    0187*      ld hl,(iy+sprite_y)
04802D FD 17 14    0188*      ld de,(iy+sprite_yvel)
048030 19          0189*      add hl,de
048031 FD 2F 0E    0190*      ld (iy+sprite_y),hl
048034             0191*  ; detect screen edge collisions
048034 AF          0192*      xor a ; reset screen edge collision flag and clear carry
048035 32 6B 7F 04 0193*      ld (sprite_screen_edge),a
048039             0194*  ; y-axis first since we already have it in hl
048039 11 00 00 00 0195*      ld de,-sprite_top*256
04803D ED 5A       0196*      adc hl,de
04803F FA 69 80 04 0197*      jp m,@top
048043 ED 52       0198*      sbc hl,de ; hl back to original value
048045 11 00 91 FE 0199*      ld de,-sprite_bottom*256
048049 ED 5A       0200*      adc hl,de
04804B F2 73 80 04 0201*      jp p,@bottom
04804F             0202*  @xaxis:
04804F FD 27 0B    0203*      ld hl,(iy+sprite_x)
048052 11 00 00 00 0204*      ld de,-sprite_left*256
048056 ED 5A       0205*      adc hl,de
048058 FA 8E 80 04 0206*      jp m,@left
04805C ED 52       0207*      sbc hl,de ; hl back to original value
04805E 11 00 11 FF 0208*      ld de,-sprite_right*256
048062 ED 5A       0209*      adc hl,de
048064 F2 9C 80 04 0210*      jp p,@right
048068             0211*  ; no edge collisions so go home
048068 C9          0212*      ret
048069             0213*  @top:
048069 3E 08       0214*      ld a,collide_top
04806B 21 00 00 00 0215*      ld hl,sprite_top*256
04806F C3 79 80 04 0216*      jp @collide_y
048073             0217*  @bottom:
048073 3E 04       0218*      ld a,collide_bottom
048075 21 00 6F 01 0219*      ld hl,sprite_bottom*256
048079             0220*  @collide_y:
048079 32 6B 7F 04 0221*      ld (sprite_screen_edge),a
04807D FD 2F 0E    0222*      ld (iy+sprite_y),hl
048080             0223*  ; reverse y-axis velocity
048080 FD 27 14    0224*      ld hl,(iy+sprite_yvel)
048083 CD A4 06 04 0225*      call neg_hlu
048087 FD 2F 14    0226*      ld (iy+sprite_yvel),hl
04808A             0227*  ; go check for x-axis collisions
04808A C3 4F 80 04 0228*      jp @xaxis
04808E             0229*  @left:
04808E 3A 6B 7F 04 0230*      ld a,(sprite_screen_edge)
048092 F6 02       0231*      or a,collide_left
048094 21 00 00 00 0232*      ld hl,sprite_left*256
048098 C3 A6 80 04 0233*      jp @collide_x
04809C             0234*  @right:
04809C 3A 6B 7F 04 0235*      ld a,(sprite_screen_edge)
0480A0 F6 01       0236*      or a,collide_right
0480A2 21 00 EF 00 0237*      ld hl,sprite_right*256
0480A6             0238*  @collide_x:
0480A6 32 6B 7F 04 0239*      ld (sprite_screen_edge),a
0480AA FD 2F 0B    0240*      ld (iy+sprite_x),hl
0480AD             0241*  ; reverse x-axis velocity
0480AD FD 27 11    0242*      ld hl,(iy+sprite_xvel)
0480B0 CD A4 06 04 0243*      call neg_hlu
0480B4 FD 2F 11    0244*      ld (iy+sprite_xvel),hl
0480B7             0245*  ; final collision flag to a and return
0480B7 3A 6B 7F 04 0246*      ld a,(sprite_screen_edge)
0480BB C9          0247*      ret
0480BC             0248*  ; end move_sprite
0480BC             0249*  
0480BC             0250*  sprite_compute_velocities:
0480BC FD 2A 67 7F 0251*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
0480C1 FD 17 17    0252*      ld de,(iy+sprite_vel)
0480C4 CD 52 09 04 0253*      call polar_to_cartesian
0480C8 FD 2A 67 7F 0254*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
0480CD FD 0F 11    0255*      ld (iy+sprite_xvel),bc ; save x-velocity component
0480D0 FD 1F 14    0256*      ld (iy+sprite_yvel),de ; save y-velocity component
0480D3 C9          0257*      ret
0480D4             0258*  ; end sprite_compute_velocities
0480D4             0054       include "state.inc"
0480D4             0001*  ; Game state variables
0480D4 E2 80 04    0002*  game_state:  dl game_main_menu
0480D7             0003*  
0480D7             0004*  do_game:
0480D7 2A D4 80 04 0005*      ld hl,(game_state)   ; Load the current game state
0480DB             0006*      callHL                ; Call the corresponding state handler
0480DB 01 E1 80 04 0001*M     ld bc,@F ; Address of first instruction after the jump
0480DF C5          0002*M     push bc ; which constitutes the return address
0480E0 E9          0003*M     jp (hl) ; Jump to the address in HL
0480E1             0004*M @@:
0480E1 C9          0007*      ret
0480E2             0008*  
0480E2             0009*  ; ========================
0480E2             0010*  ; Main Game States
0480E2             0011*  ; ========================
0480E2             0012*  
0480E2             0013*  game_main_menu:
0480E2             0014*      ; Handle main menu options
0480E2             0015*      ; Example: Check input for "Start Game"
0480E2 CD 0F 82 04 0016*      call check_input_menu
0480E6 C2 EB 80 04 0017*      jp nz, game_initialize ; Start game on selection
0480EA C9          0018*      ret
0480EB             0019*  
0480EB             0020*  game_initialize:
0480EB             0021*  ; reset the sprite table
0480EB AF          0022*      xor a
0480EC 32 6A 7F 04 0023*      ld (table_active_sprites),a
0480F0 21 07 7D 04 0024*      ld hl,table_base
0480F4 22 67 7F 04 0025*      ld (table_pointer),hl
0480F8             0026*  ; initialize sprites
0480F8 CD C1 7F 04 0027*      call sprites_init
0480FC             0028*  ; initialize the first level
0480FC AF          0029*      xor a
0480FD 32 20 82 04 0030*      ld (cur_level),a
048101 CD E1 82 04 0031*      call init_level
048105             0032*  ; initialize player
048105 21 00 00 00 0033*      ld hl,0
048109 22 CA 7B 04 0034*      ld (player_score),hl
04810D 2A D0 7B 04 0035*      ld hl,(player_max_shields)
048111 22 CD 7B 04 0036*      ld (player_shields),hl
048115 3E 03       0037*      ld a,3
048117 32 D3 7B 04 0038*      ld (player_ships),a
04811B CD FA 7B 04 0039*      call player_init
04811F             0040*  ; TODO: TEMPORARY UNTIL MAP LOGIC IMPLEMENTED
04811F 21 C9 81 04 0041*      ld hl,enemies_dead
048123 22 C6 81 04 0042*      ld (enemies_state),hl
048127             0043*  ; END TODO
048127             0044*  ; set the game state to playing
048127 21 31 81 04 0045*      ld hl,game_playing
04812B 22 D4 80 04 0046*      ld (game_state), hl
04812F C9          0047*      ret
048130             0048*  ; done initializing
048130 C9          0049*      ret
048131             0050*  
048131             0051*  game_playing:
048131             0052*  ; Main gameplay loop
048131 CD 30 82 04 0053*      call tiles_plot
048135 CD A2 81 04 0054*      call do_player
048139 CD BB 81 04 0055*      call do_enemies
04813D             0056*  ; update UI: TODO make this a standalone function
04813D CD E3 7C 04 0057*      call print_score
048141 C9          0058*      ret
048142             0059*  
048142             0060*  game_paused:
048142             0061*      ; Pause menu logic
048142 CD 12 82 04 0062*      call check_input_pause
048146 C2 31 81 04 0063*      jp nz, game_playing ; Resume game
04814A CA E2 80 04 0064*      jp z, game_main_menu ; Exit to main menu
04814E C9          0065*      ret
04814F             0066*  
04814F             0067*  game_level_transition:
04814F             0068*      ; Handle level transitions
04814F CD 13 82 04 0069*      call load_next_level
048153 21 31 81 04 0070*      ld hl, game_playing
048157 22 D4 80 04 0071*      ld (game_state), hl
04815B C9          0072*      ret
04815C             0073*  
04815C             0074*  game_over:
04815C             0075*      ; Display game over screen
04815C CD 14 82 04 0076*      call display_game_over
048160 C2 E2 80 04 0077*      jp nz, game_main_menu ; Return to main menu on input
048164 C9          0078*      ret
048165             0079*  
048165             0080*  game_victory:
048165             0081*      ; Display victory screen
048165 CD 15 82 04 0082*      call display_victory
048169 C2 E2 80 04 0083*      jp nz, game_main_menu ; Return to main menu on input
04816D C9          0084*      ret
04816E             0085*  
04816E             0086*  ; ========================
04816E             0087*  ; Supporting States
04816E             0088*  ; ========================
04816E             0089*  
04816E             0090*  game_loading:
04816E             0091*      ; Show loading screen while preparing assets
04816E CD 16 82 04 0092*      call load_resources
048172 21 EB 80 04 0093*      ld hl, game_initialize
048176 22 D4 80 04 0094*      ld (game_state), hl
04817A C9          0095*      ret
04817B             0096*  
04817B             0097*  game_cutscene:
04817B             0098*      ; Play a non-interactive cutscene
04817B CD 17 82 04 0099*      call play_cutscene
04817F C2 31 81 04 0100*      jp nz, game_playing ; Return to gameplay after cutscene
048183 C9          0101*      ret
048184             0102*  
048184             0103*  game_inventory:
048184             0104*      ; Open inventory or shop
048184 CD 18 82 04 0105*      call display_inventory
048188 C2 31 81 04 0106*      jp nz, game_playing ; Return to gameplay after inventory close
04818C C9          0107*      ret
04818D             0108*  
04818D             0109*  game_map:
04818D             0110*      ; Display map or quest
04818D CD 19 82 04 0111*      call display_map
048191 C2 31 81 04 0112*      jp nz, game_playing ; Return to gameplay after map close
048195 C9          0113*      ret
048196             0114*  
048196             0115*  game_exit:
048196             0116*      ; Handle exit logic
048196 CD 1A 82 04 0117*      call save_game
04819A C3 1B 82 04 0118*      jp exit_game         ; Safely shut down
04819E C9          0119*      ret
04819F             0120*  
04819F             0121*  ; ========================
04819F             0122*  ; Sub-state branching (Example for player state)
04819F             0123*  ; ========================
04819F             0124*  
04819F AD 81 04    0125*  player_state:  dl player_alive ; Player state variable
0481A2             0126*  
0481A2             0127*  do_player:
0481A2 2A 9F 81 04 0128*      ld hl,(player_state)
0481A6             0129*      callHL                ; Call the corresponding player state
0481A6 01 AC 81 04 0001*M     ld bc,@F ; Address of first instruction after the jump
0481AA C5          0002*M     push bc ; which constitutes the return address
0481AB E9          0003*M     jp (hl) ; Jump to the address in HL
0481AC             0004*M @@:
0481AC C9          0130*      ret
0481AD             0131*  
0481AD             0132*  player_alive:
0481AD CD 47 7C 04 0133*      call player_input     ; Handle player input
0481B1 CD FD 6E 04 0134*      call laser_control    ; Handle laser movement and collision detection
0481B5 C9          0135*      ret
0481B6             0136*  
0481B6             0137*  player_dead:
0481B6 CD FD 6E 04 0138*      call laser_control    ; Handle laser movement and collision detection
0481BA C9          0139*      ret
0481BB             0140*  
0481BB             0141*  do_enemies:
0481BB 2A C6 81 04 0142*      ld hl, (enemies_state)
0481BF             0143*      callHL
0481BF 01 C5 81 04 0001*M     ld bc,@F ; Address of first instruction after the jump
0481C3 C5          0002*M     push bc ; which constitutes the return address
0481C4 E9          0003*M     jp (hl) ; Jump to the address in HL
0481C5             0004*M @@:
0481C5 C9          0144*      ret
0481C6 C9 81 04    0145*  enemies_state: dl enemies_dead
0481C9             0146*  enemies_dead:
0481C9 FD 21 EE 81 0147*      ld iy,enemies_respawn_tmr
       04          
0481CE 21 F0 00 00 0148*      ld hl,120*2 ; 120ths of a second
0481D2 CD 08 14 04 0149*      call timestamp_tmr_set
0481D6 21 DF 81 04 0150*      ld hl,enemies_respawning
0481DA 22 C6 81 04 0151*      ld (enemies_state),hl
0481DE C9          0152*      ret
0481DF             0153*  
0481DF             0154*  ; DEBUG: FOR TESTING UNTIL WE PROPERLY IMPLEMENT MAP LOGIC
0481DF             0155*  enemies_respawning:
0481DF FD 21 EE 81 0156*      ld iy,enemies_respawn_tmr
       04          
0481E4 CD 13 14 04 0157*      call timestamp_tmr_get
0481E8 F0          0158*      ret p ; not time to respawn yet
0481E9 CD F4 81 04 0159*      call enemies_respawn
0481ED C9          0160*      ret
0481EE             0161*  enemies_respawn_tmr: ds 6
0481F4             0162*  
0481F4             0163*  enemies_respawn:
0481F4             0164*  ; initialize enemy sprites
0481F4 3A 35 1B 04 0165*      ld a,(max_enemy_sprites)
0481F8 47          0166*      ld b,a ; loop counter
0481F9             0167*  @respawn_loop:
0481F9 C5          0168*      push bc
0481FA CD 47 1C 04 0169*      call enemy_init_from_landing_pad
0481FE C1          0170*      pop bc
0481FF 10 F8       0171*      djnz @respawn_loop
048201 21 0A 82 04 0172*      ld hl,enemies_alive
048205 22 C6 81 04 0173*      ld (enemies_state),hl
048209 C9          0174*      ret
04820A             0175*  ; END DEBUG
04820A             0176*  
04820A             0177*  enemies_alive:
04820A CD 36 1B 04 0178*      call move_enemies
04820E C9          0179*      ret
04820F             0180*  
04820F             0181*  check_input_menu:
04820F C9          0182*      ret
048210             0183*  
048210             0184*  update_game_world:
048210 C9          0185*      ret
048211             0186*  
048211             0187*  check_game_events:
048211 C9          0188*      ret
048212             0189*  
048212             0190*  check_input_pause:
048212 C9          0191*      ret
048213             0192*  
048213             0193*  load_next_level:
048213 C9          0194*      ret
048214             0195*  
048214             0196*  display_game_over:
048214 C9          0197*      ret
048215             0198*  
048215             0199*  display_victory:
048215 C9          0200*      ret
048216             0201*  
048216             0202*  load_resources:
048216 C9          0203*      ret
048217             0204*  
048217             0205*  play_cutscene:
048217 C9          0206*      ret
048218             0207*  
048218             0208*  display_inventory:
048218 C9          0209*      ret
048219             0210*  
048219             0211*  display_map:
048219 C9          0212*      ret
04821A             0213*  
04821A             0214*  save_game:
04821A C9          0215*      ret
04821B             0216*  
04821B             0217*  exit_game:
04821B C9          0218*      ret
04821C             0219*  
04821C             0055       include "tiles.inc"
04821C             0001*  ; ######### TILES #########
04821C             0002*  ; TODO: implement buffering of tiles here when there isn't other stuff to do
04821C             0003*  ; tiles_defs: ds 256*16 ; 256 rows of 16 tiles, each tile is a byte
04821C 00 00 00    0004*  tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
04821F 00          0005*  tiles_row: db 0 ; decrements each time a row is drawn. level is over when hits zero
048220             0006*      ; initialize to zero for a maximum of 256 rows in a level
048220 00          0007*  cur_level: db 0
048221 00 00 00    0008*  cur_baseBufferId: dl 0
048224 00 00 00    0009*  tiles_x_plot: dl 0
048227 F1 FF FF    0010*  tiles_y_plot: dl -15
04822A             0011*  
04822A             0012*  tilesets_num: equ 1
04822A A6 6F 04    0013*  tileset: dl tiles_dg_levels
04822D             0014*  tilesets:
04822D A6 6F 04    0015*      dl tiles_dg_levels
048230             0016*  
048230             0017*  ; bg_y_plot: dl -1
048230             0018*  ; bg_bufferId: dl BUF_STATION_BG_00 ; default bufferId for background tiles
048230             0019*  
048230             0020*  ; bg_plot:
048230             0021*  ; ; load current bg tile bufferId as default
048230             0022*  ;     ld hl,(bg_bufferId)
048230             0023*  ; ; check whether it is time for a new background tile
048230             0024*  ;     ld a,(bg_y_plot)
048230             0025*  ;     inc a
048230             0026*  ;     ld (bg_y_plot),a
048230             0027*  ;     jp nz,@F ; not time for a new tile so draw current one
048230             0028*  ; ; load the next background tile
048230             0029*  ;     ld hl,BUF_STATION_BG_00
048230             0030*  ;     call rand_8
048230             0031*  ;     and %0000011
048230             0032*  ;     add a,l
048230             0033*  ;     ld l,a
048230             0034*  ;     ld a,0
048230             0035*  ;     adc a,h
048230             0036*  ;     ld h,a
048230             0037*  ;     ld (bg_bufferId),hl
048230             0038*  ; @@:
048230             0039*  ;     call vdu_buff_select
048230             0040*  ;     ld bc,0
048230             0041*  ;     ld de,(bg_y_plot)
048230             0042*  ;     inc de
048230             0043*  ;     call vdu_plot_bmp
048230             0044*  ; ; all done
048230             0045*  ;     ret
048230             0046*  
048230             0047*  ; xevious_plot:
048230             0048*  ; ; load current bg tile bufferId as default
048230             0049*  ;     ld hl,(bg_bufferId)
048230             0050*  ; ; check whether it is time for a new background tile
048230             0051*  ;     ld a,(bg_y_plot)
048230             0052*  ;     inc a
048230             0053*  ;     ld (bg_y_plot),a
048230             0054*  ;     jp nz,@F ; not time for a new tile so draw current one
048230             0055*  ; ; load the next background tile
048230             0056*  ;     ld hl,Xevious_tile
048230             0057*  ;     inc (hl)
048230             0058*  ;     ld a,%00011111 ; 31
048230             0059*  ;     and (hl)
048230             0060*  ;     ld hl,BUF_XEVIOUS_00
048230             0061*  ;     add a,l
048230             0062*  ;     ld l,a
048230             0063*  ;     ld a,0
048230             0064*  ;     adc a,h
048230             0065*  ;     ld h,a
048230             0066*  ;     ld (bg_bufferId),hl
048230             0067*  ; @@:
048230             0068*  ;     call vdu_buff_select
048230             0069*  ;     ld bc,0
048230             0070*  ;     ld de,(bg_y_plot)
048230             0071*  ;     inc de
048230             0072*  ;     call vdu_plot_bmp
048230             0073*  ; ; all done
048230             0074*  ;     ret
048230             0075*  ; Xevious_tile: db 0
048230             0076*  
048230             0077*  tiles_plot:
048230             0078*  ; set gfx viewport to playing field window
048230 01 00 00 00 0079*      ld bc,field_left
048234 11 00 00 00 0080*      ld de,field_top
048238 DD 21 FF 00 0081*      ld ix,field_right
       00          
04823D FD 21 7F 01 0082*      ld iy,field_bottom
       00          
048242 CD 4F 15 04 0083*      call vdu_set_gfx_viewport
048246             0084*  ; move the background down one pixel
048246 3E 02       0085*      ld a,2 ; current gfx viewport
048248 2E 02       0086*      ld l,2 ; direction=down
04824A 26 01       0087*      ld h,1 ; speed=1 px
04824C CD C7 14 04 0088*      call vdu_scroll_down
048250             0089*  ; set gfx viewport to one scanline to optimise plotting tiles
048250 01 00 00 00 0090*      ld bc,0 ; leftmost x-coord
048254 11 00 00 00 0091*      ld de,0 ; topmost y-coord
048258 DD 21 FF 00 0092*      ld ix,255 ; rightmost x-coord
       00          
04825D FD 21 00 00 0093*      ld iy,0 ; bottommost y-coord
       00          
048262 CD 4F 15 04 0094*      call vdu_set_gfx_viewport
048266             0095*  ; plot the background
048266             0096*      ; call bg_plot
048266             0097*      ; call xevious_plot
048266             0098*      ; ret ; DEBUG
048266             0099*  ; initialize tiles loop
048266 21 00 00 00 0100*      ld hl,0 ; init plotting x-coordinate
04826A 22 24 82 04 0101*      ld (tiles_x_plot),hl
04826E 2A 1C 82 04 0102*      ld hl,(tiles_row_defs)
048272 06 10       0103*      ld b,16 ; loop counter
048274             0104*  @loop:
048274 C5          0105*      push bc ; save the loop counter
048275             0106*  ; read the tile defintion for the current column
048275 7E          0107*      ld a,(hl) ; a has tile definition
048276 E5          0108*      push hl ; save pointer to tile definition
048277 21 00 00 00 0109*      ld hl,0 ; hlu is non-zero
04827B 6F          0110*      ld l,a ; l is tile defintion
04827C 26 01       0111*      ld h,0x01 ; hl = 256 + tile index = the tile's bitmapId
04827E CD 9C 15 04 0112*      call vdu_buff_select ; tile bitmap buffer is now active
048282             0113*  ; plot the active bitmap
048282 ED 4B 24 82 0114*      ld bc,(tiles_x_plot)
       04          
048287 ED 5B 27 82 0115*      ld de,(tiles_y_plot)
       04          
04828C CD F8 18 04 0116*      call vdu_plot_bmp
048290             0117*  ; bump x-coords the width of one tile and save it
048290 2A 24 82 04 0118*      ld hl,(tiles_x_plot)
048294 01 10 00 00 0119*      ld bc,16
048298 09          0120*      add hl,bc
048299 22 24 82 04 0121*      ld (tiles_x_plot),hl
04829D             0122*  ; prepare to loop to next column
04829D E1          0123*      pop hl ; get back pointer to tile def
04829E 23          0124*      inc hl ; bump it to the next column
04829F C1          0125*      pop bc ; snag our loop counter
0482A0 10 D2       0126*      djnz @loop
0482A2             0127*  ; increment tiles plotting y-coordinate
0482A2             0128*  ; when it hits zero, we go to next row of tiles in the map
0482A2             0129*  ; (we use ix b/c we want to preserve hl for the next step)
0482A2 DD 21 27 82 0130*      ld ix,tiles_y_plot
       04          
0482A7 DD 34 00    0131*      inc (ix)
0482AA C0          0132*      ret nz
0482AB             0133*  ; time to bump tiles_row_defs to next row
0482AB             0134*  ; (hl was already there at the end of the loop)
0482AB 22 1C 82 04 0135*      ld (tiles_row_defs),hl
0482AF             0136*  ; reset coords to plot next row of tiles
0482AF 21 00 00 00 0137*      ld hl,0
0482B3 22 24 82 04 0138*      ld (tiles_x_plot),hl
0482B7 21 F1 FF FF 0139*      ld hl,-15
0482BB 22 27 82 04 0140*      ld (tiles_y_plot),hl
0482BF             0141*  ; decrement tiles row counter
0482BF 21 1F 82 04 0142*      ld hl,tiles_row
0482C3 35          0143*      dec (hl)
0482C4 C0          0144*      ret nz
0482C5             0145*  ; queue up next level
0482C5 3A 20 82 04 0146*      ld a,(cur_level)
0482C9 FE 00       0147*      cp num_levels-1

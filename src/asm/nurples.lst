PC     Output      Line
040000             0001       assume adl=1
040000             0002       org 0x040000
040000             0003       include "mos_api.inc"
040000             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040000             0002*  ; Title:	AGON MOS - API for user projects
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040000             0005*  ;			Added MOS error codes for return in HL
040000             0006*  ; Created:	03/08/2022
040000             0007*  ; Last Updated:	10/08/2023
040000             0008*  ;
040000             0009*  ; Modinfo:
040000             0010*  ; 05/08/2022:	Added mos_feof
040000             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0015*  ; 13/10/2022:	Added mos_oscli
040000             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0025*  ; 19/05/2023:	Added sysvar_scrMode
040000             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040000             0027*  ; 03/08/2023:	Added mos_setkbvector
040000             0028*  ; 10/08/2023:	Added mos_getkbmap
040000             0029*  
040000             0030*  ; VDP control (VDU 23, 0, n)
040000             0031*  ;
040000             0032*  vdp_gp:				EQU 80h
040000             0033*  vdp_keycode:		EQU 81h
040000             0034*  vdp_cursor:			EQU	82h
040000             0035*  vdp_scrchar:		EQU	83h
040000             0036*  vdp_scrpixel:		EQU	84h
040000             0037*  vdp_audio:			EQU	85h
040000             0038*  vdp_mode:			EQU	86h
040000             0039*  vdp_rtc:			EQU	87h
040000             0040*  vdp_keystate:		EQU	88h
040000             0041*  vdp_logicalcoords:	EQU	C0h
040000             0042*  vdp_terminalmode:	EQU	FFh
040000             0043*  
040000             0044*  ; MOS high level functions
040000             0045*  ;
040000             0046*  mos_getkey:			EQU	00h
040000             0047*  mos_load:			EQU	01h
040000             0048*  mos_save:			EQU	02h
040000             0049*  mos_cd:				EQU	03h
040000             0050*  mos_dir:			EQU	04h
040000             0051*  mos_del:			EQU	05h
040000             0052*  mos_ren:			EQU	06h
040000             0053*  mos_mkdir:			EQU	07h
040000             0054*  mos_sysvars:		EQU	08h
040000             0055*  mos_editline:		EQU	09h
040000             0056*  mos_fopen:			EQU	0Ah
040000             0057*  mos_fclose:			EQU	0Bh
040000             0058*  mos_fgetc:			EQU	0Ch
040000             0059*  mos_fputc:			EQU	0Dh
040000             0060*  mos_feof:			EQU	0Eh
040000             0061*  mos_getError:		EQU	0Fh
040000             0062*  mos_oscli:			EQU	10h
040000             0063*  mos_copy:			EQU	11h
040000             0064*  mos_getrtc:			EQU	12h
040000             0065*  mos_setrtc:			EQU	13h
040000             0066*  mos_setintvector:	EQU	14h
040000             0067*  mos_uopen:			EQU	15h
040000             0068*  mos_uclose:			EQU	16h
040000             0069*  mos_ugetc:			EQU	17h
040000             0070*  mos_uputc:			EQU	18h
040000             0071*  mos_getfil:			EQU	19h
040000             0072*  mos_fread:			EQU	1Ah
040000             0073*  mos_fwrite:			EQU	1Bh
040000             0074*  mos_flseek:			EQU	1Ch
040000             0075*  mos_setkbvector:	EQU	1Dh
040000             0076*  mos_getkbmap:		EQU	1Eh
040000             0077*  
040000             0078*  ; MOS program exit codes
040000             0079*  ;
040000             0080*  EXIT_OK:				EQU  0;	"OK",
040000             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040000             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040000             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040000             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040000             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040000             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040000             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040000             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040000             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040000             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040000             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040000             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040000             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040000             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040000             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040000             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040000             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040000             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040000             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040000             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040000             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040000             0102*  ; FatFS file access functions
040000             0103*  ;
040000             0104*  ffs_fopen:			EQU	80h
040000             0105*  ffs_fclose:			EQU	81h
040000             0106*  ffs_fread:			EQU	82h
040000             0107*  ffs_fwrite:			EQU	83h
040000             0108*  ffs_flseek:			EQU	84h
040000             0109*  ffs_ftruncate:		EQU	85h
040000             0110*  ffs_fsync:			EQU	86h
040000             0111*  ffs_fforward:		EQU	87h
040000             0112*  ffs_fexpand:		EQU	88h
040000             0113*  ffs_fgets:			EQU	89h
040000             0114*  ffs_fputc:			EQU	8Ah
040000             0115*  ffs_fputs:			EQU	8Bh
040000             0116*  ffs_fprintf:		EQU	8Ch
040000             0117*  ffs_ftell:			EQU	8Dh
040000             0118*  ffs_feof:			EQU	8Eh
040000             0119*  ffs_fsize:			EQU	8Fh
040000             0120*  ffs_ferror:			EQU	90h
040000             0121*  
040000             0122*  ; FatFS directory access functions
040000             0123*  ;
040000             0124*  ffs_dopen:			EQU	91h
040000             0125*  ffs_dclose:			EQU	92h
040000             0126*  ffs_dread:			EQU	93h
040000             0127*  ffs_dfindfirst:		EQU	94h
040000             0128*  ffs_dfindnext:		EQU	95h
040000             0129*  
040000             0130*  ; FatFS file and directory management functions
040000             0131*  ;
040000             0132*  ffs_stat:			EQU	96h
040000             0133*  ffs_unlink:			EQU	97h
040000             0134*  ffs_rename:			EQU	98h
040000             0135*  ffs_chmod:			EQU	99h
040000             0136*  ffs_utime:			EQU	9Ah
040000             0137*  ffs_mkdir:			EQU	9Bh
040000             0138*  ffs_chdir:			EQU	9Ch
040000             0139*  ffs_chdrive:		EQU	9Dh
040000             0140*  ffs_getcwd:			EQU	9Eh
040000             0141*  
040000             0142*  ; FatFS volume management and system configuration functions
040000             0143*  ;
040000             0144*  ffs_mount:			EQU	9Fh
040000             0145*  ffs_mkfs:			EQU	A0h
040000             0146*  ffs_fdisk:			EQU	A1h
040000             0147*  ffs_getfree:		EQU	A2h
040000             0148*  ffs_getlabel:		EQU	A3h
040000             0149*  ffs_setlabel:		EQU	A4h
040000             0150*  ffs_setcp:			EQU	A5h
040000             0151*  
040000             0152*  ; File access modes
040000             0153*  ;
040000             0154*  fa_read:			EQU	01h
040000             0155*  fa_write:			EQU	02h
040000             0156*  fa_open_existing:	EQU	00h
040000             0157*  fa_create_new:		EQU	04h
040000             0158*  fa_create_always:	EQU	08h
040000             0159*  fa_open_always:		EQU	10h
040000             0160*  fa_open_append:		EQU	30h
040000             0161*  
040000             0162*  ; System variable indexes for api_sysvars
040000             0163*  ; Index into _sysvars in globals.inc
040000             0164*  ;
040000             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040000             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040000             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040000             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040000             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040000             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040000             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040000             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040000             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040000             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040000             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040000             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040000             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040000             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040000             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040000             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040000             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040000             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0191*  
040000             0192*  ; Flags for the VPD protocol
040000             0193*  ;
040000             0194*  vdp_pflag_cursor:		EQU	00000001b
040000             0195*  vdp_pflag_scrchar:		EQU	00000010b
040000             0196*  vdp_pflag_point:		EQU	00000100b
040000             0197*  vdp_pflag_audio:		EQU	00001000b
040000             0198*  vdp_pflag_mode:			EQU	00010000b
040000             0199*  vdp_pflag_rtc:			EQU	00100000b
040000             0200*  
040000             0201*  ;
040000             0202*  ; FatFS structures
040000             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0204*  ;
040000             0205*  ; Object ID and allocation information (FFOBJID)
040000             0206*  ;
040000             0207*  ; Indexes into FFOBJID structure
040000             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040000             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040000             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040000             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040000             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040000             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040000             0214*  ;
040000             0215*  ; File object structure (FIL)
040000             0216*  ;
040000             0217*  ; Indexes into FIL structure
040000             0218*  fil_obj:		EQU 0	; 15: Object identifier
040000             0219*  fil_flag:		EQU	15 	;  1: File status flags
040000             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040000             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040000             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040000             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040000             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040000             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040000             0226*  ;
040000             0227*  ; Directory object structure (DIR)
040000             0228*  ; Indexes into DIR structure
040000             0229*  dir_obj:		EQU  0	; 15: Object identifier
040000             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040000             0231*  dir_clust:		EQU	19	;  4: Current cluster
040000             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040000             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040000             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040000             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040000             0236*  ;
040000             0237*  ; File information structure (FILINFO)
040000             0238*  ;
040000             0239*  ; Indexes into FILINFO structure
040000             0240*  filinfo_fsize:		EQU 0	;   4: File size
040000             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040000             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040000             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040000             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040000             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040000             0246*  ;
040000             0247*  ; Macro for calling the API
040000             0248*  ; Parameters:
040000             0249*  ; - function: One of the function numbers listed above
040000             0250*  ;
040000             0251*  	MACRO	MOSCALL	function
040000             0252*  			LD	A, function
040000             0253*  			RST.LIL	08h
040000             0254*  	ENDMACRO
040000 C3 45 00 04 0004       jp start
040004 FF FF FF FF 0005       align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0006       db "MOS"
040043 00          0007       db 00h
040044 01          0008       db 01h
040045             0009   
040045             0010   start:
040045 F5          0011       push af
040046 C5          0012       push bc
040047 D5          0013       push de
040048 DD E5       0014       push ix
04004A FD E5       0015       push iy
04004C CD FA 4C 04 0016   	call	init
040050 CD CC 4D 04 0017   	call 	main
040054             0018   
040054             0019   exit:
040054 FD E1       0020       pop iy
040056 DD E1       0021       pop ix
040058 D1          0022       pop de
040059 C1          0023       pop bc
04005A F1          0024       pop af
04005B 21 00 00 00 0025       ld hl,0
04005F             0026   
04005F C9          0027       ret
040060             0028   
040060             0029   	include "levels.inc"
040060 00          0001*  tiles_level_00: db  0 ; number of rows, 0 is max of 256
040061 00 00 00 00 0002*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 0
       00 00 00 00 
       00 01 02 02 
       01 02 02 01 
040071 00 00 00 00 0003*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x05,0x00,0x03 ; row 1
       00 00 00 00 
       00 03 00 05 
       03 05 00 03 
040081 00 00 00 00 0004*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 2
       00 00 00 00 
       00 03 00 00 
       03 00 00 03 
040091 00 00 00 07 0005*  	db 0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 3
       02 02 01 02 
       02 01 02 02 
       01 02 02 01 
0400A1 00 00 00 03 0006*  	db 0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x05,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x03 ; row 4
       00 05 03 05 
       00 03 05 00 
       03 00 00 03 
0400B1 00 00 00 03 0007*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 5
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
0400C1 00 00 00 01 0008*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 6
       02 02 01 02 
       02 01 02 02 
       01 02 02 01 
0400D1 00 00 00 03 0009*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 7
       00 00 03 05 
       04 03 00 00 
       03 00 00 03 
0400E1 00 00 00 03 0010*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 8
       00 00 03 04 
       05 03 00 00 
       03 00 00 03 
0400F1 01 02 02 01 0011*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 9
       02 02 01 02 
       02 01 02 02 
       01 02 02 01 
040101 03 04 05 03 0012*  	db 0x03,0x04,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03 ; row 10
       00 00 03 00 
       00 03 00 00 
       03 05 05 03 
040111 03 05 04 03 0013*  	db 0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03 ; row 11
       00 00 03 00 
       00 03 00 00 
       03 04 04 03 
040121 01 02 02 01 0014*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x02,0x02,0x01 ; row 12
       02 02 01 02 
       02 06 02 02 
       01 02 02 01 
040131 00 00 00 00 0015*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x03 ; row 13
       00 00 03 04 
       00 03 05 00 
       03 00 00 03 
040141 00 00 00 00 0016*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 14
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
040151 00 00 00 00 0017*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x02,0x02,0x01 ; row 15
       00 00 01 02 
       02 07 02 02 
       01 02 02 01 
040161 00 00 00 00 0018*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x05,0x03,0x00,0x00,0x00 ; row 16
       00 00 03 05 
       05 03 00 05 
       03 00 00 00 
040171 00 00 00 00 0019*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 17
       00 00 03 05 
       04 03 00 00 
       03 00 00 00 
040181 00 00 00 00 0020*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 18
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
040191 00 00 00 00 0021*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x00,0x03,0x00,0x00,0x00 ; row 19
       00 00 03 00 
       00 03 04 00 
       03 00 00 00 
0401A1 00 00 00 00 0022*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 20
       00 00 03 00 
       05 03 00 00 
       03 00 00 00 
0401B1 00 00 00 00 0023*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00 ; row 21
       00 00 03 00 
       00 03 05 00 
       03 00 00 00 
0401C1 00 00 00 00 0024*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 22
       00 00 03 04 
       00 03 00 00 
       03 00 00 00 
0401D1 00 00 00 00 0025*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 23
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
0401E1 00 00 00 00 0026*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 24
       00 00 03 00 
       04 03 00 00 
       00 00 00 00 
0401F1 00 00 00 00 0027*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 25
       00 00 03 05 
       00 03 00 00 
       00 00 00 00 
040201 00 00 00 01 0028*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00,0x00,0x00,0x00 ; row 26
       02 02 01 02 
       02 07 00 00 
       00 00 00 00 
040211 00 00 00 03 0029*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 27
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040221 00 00 00 03 0030*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 28
       00 00 03 04 
       05 03 00 00 
       00 00 00 00 
040231 00 00 00 01 0031*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 29
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
040241 00 00 00 03 0032*  	db 0x00,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 30
       04 05 03 00 
       00 03 00 00 
       00 00 00 00 
040251 00 00 00 03 0033*  	db 0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 31
       05 05 03 00 
       00 03 00 00 
       00 00 00 00 
040261 00 00 00 01 0034*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 32
       02 02 06 02 
       02 01 00 00 
       00 00 00 00 
040271 00 00 00 00 0035*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 33
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040281 00 00 00 00 0036*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 34
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040291 00 00 00 00 0037*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 35
       00 00 01 02 
       02 01 02 02 
       07 00 00 00 
0402A1 00 00 00 00 0038*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 36
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
0402B1 00 00 00 00 0039*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 37
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
0402C1 00 00 00 00 0040*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 38
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
0402D1 00 00 00 00 0041*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 39
       00 00 03 04 
       04 03 00 00 
       00 00 00 00 
0402E1 00 00 00 00 0042*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 40
       00 00 03 04 
       05 03 00 00 
       00 00 00 00 
0402F1 00 00 00 01 0043*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 41
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
040301 00 00 00 03 0044*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 42
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040311 00 00 00 03 0045*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 43
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040321 07 02 02 01 0046*  	db 0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 44
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
040331 03 00 00 03 0047*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 45
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040341 03 00 00 03 0048*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 46
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040351 01 02 02 01 0049*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 47
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
040361 00 00 00 03 0050*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 48
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040371 00 00 00 03 0051*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 49
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040381 00 00 00 06 0052*  	db 0x00,0x00,0x00,0x06,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00,0x00,0x00,0x00 ; row 50
       02 02 01 02 
       02 07 00 00 
       00 00 00 00 
040391 00 00 00 00 0053*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 51
       00 00 03 05 
       04 03 00 00 
       00 00 00 00 
0403A1 00 00 00 00 0054*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 52
       00 00 03 04 
       05 03 00 00 
       00 00 00 00 
0403B1 00 00 00 00 0055*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 53
       00 00 01 02 
       02 01 00 00 
       00 00 00 00 
0403C1 00 00 00 00 0056*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 54
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
0403D1 00 00 00 00 0057*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 55
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
0403E1 00 00 00 01 0058*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 56
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
0403F1 00 00 00 03 0059*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 57
       00 00 03 05 
       05 03 00 00 
       00 00 00 00 
040401 00 00 00 03 0060*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 58
       00 00 03 04 
       04 03 00 00 
       00 00 00 00 
040411 00 00 00 01 0061*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 59
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
040421 00 00 00 03 0062*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 60
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040431 00 00 00 03 0063*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 61
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040441 00 00 00 07 0064*  	db 0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00,0x00,0x00,0x00 ; row 62
       02 02 01 02 
       02 06 00 00 
       00 00 00 00 
040451 00 00 00 00 0065*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 63
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040461 00 00 00 00 0066*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 64
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040471 00 00 00 00 0067*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 65
       00 00 01 02 
       02 01 00 00 
       00 00 00 00 
040481 00 00 00 00 0068*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 66
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040491 00 00 00 00 0069*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 67
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
0404A1 00 00 00 00 0070*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 68
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
0404B1 00 00 00 00 0071*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00 ; row 69
       00 00 00 00 
       00 03 04 04 
       03 00 00 00 
0404C1 00 00 00 00 0072*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00 ; row 70
       00 00 00 00 
       00 03 05 04 
       03 00 00 00 
0404D1 00 00 00 00 0073*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 71
       00 00 00 00 
       00 01 02 02 
       01 00 00 00 
0404E1 00 00 00 00 0074*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 72
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
0404F1 00 00 00 00 0075*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 73
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
040501 00 00 00 00 0076*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 74
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
040511 00 00 00 00 0077*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 75
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040521 00 00 00 00 0078*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 76
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040531 00 00 00 07 0079*  	db 0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 77
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
040541 00 00 00 03 0080*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 78
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040551 00 00 00 03 0081*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 79
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040561 00 00 00 01 0082*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00,0x00,0x00,0x00 ; row 80
       02 02 01 02 
       02 06 00 00 
       00 00 00 00 
040571 00 00 00 03 0083*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 81
       00 00 03 05 
       04 03 00 00 
       00 00 00 00 
040581 00 00 00 03 0084*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 82
       00 00 03 05 
       05 03 00 00 
       00 00 00 00 
040591 00 00 00 01 0085*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 83
       02 02 01 02 
       02 01 02 02 
       07 00 00 00 
0405A1 00 00 00 00 0086*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 84
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
0405B1 00 00 00 00 0087*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 85
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
0405C1 00 00 00 00 0088*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 86
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
0405D1 00 00 00 00 0089*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 87
       00 00 03 05 
       05 03 00 00 
       03 00 00 00 
0405E1 00 00 00 00 0090*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 88
       00 00 03 04 
       04 03 00 00 
       03 00 00 00 
0405F1 00 00 00 00 0091*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 89
       00 00 01 02 
       02 01 02 02 
       01 02 02 01 
040601 00 00 00 00 0092*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 90
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
040611 00 00 00 00 0093*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 91
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
040621 00 00 00 00 0094*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 92
       00 00 06 02 
       02 01 02 02 
       01 02 02 01 
040631 00 00 00 00 0095*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x04,0x03 ; row 93
       00 00 00 00 
       00 03 00 00 
       03 05 04 03 
040641 00 00 00 00 0096*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x05,0x03 ; row 94
       00 00 00 00 
       00 03 00 00 
       03 04 05 03 
040651 00 00 00 01 0097*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x01,0x02,0x02,0x01 ; row 95
       02 02 02 02 
       02 07 02 02 
       01 02 02 01 
040661 00 00 00 03 0098*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 96
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
040671 00 00 00 03 0099*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 97
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
040681 00 00 00 01 0100*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x01,0x02,0x02,0x01 ; row 98
       02 02 02 02 
       02 02 02 02 
       01 02 02 01 
040691 01 02 02 01 0101*  	db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 99
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0406A1 03 00 00 03 0102*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 100
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0406B1 03 00 00 03 0103*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 101
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0406C1 01 02 02 07 0104*  	db 0x01,0x02,0x02,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 102
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0406D1 03 00 00 03 0105*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 103
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0406E1 03 00 00 03 0106*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 104
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0406F1 01 02 02 01 0107*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 105
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
040701 03 00 04 03 0108*  	db 0x03,0x00,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 106
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040711 03 04 00 03 0109*  	db 0x03,0x04,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 107
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040721 01 02 02 01 0110*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 108
       02 02 06 02 
       02 01 00 00 
       00 00 00 00 
040731 03 00 00 03 0111*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 109
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040741 03 00 04 03 0112*  	db 0x03,0x00,0x04,0x03,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 110
       00 00 03 04 
       04 03 00 00 
       00 00 00 00 
040751 01 02 02 01 0113*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 111
       02 02 07 02 
       02 01 00 00 
       00 00 00 00 
040761 00 00 00 03 0114*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 112
       00 00 03 05 
       00 03 00 00 
       00 00 00 00 
040771 00 00 00 03 0115*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 113
       00 00 03 05 
       00 03 00 00 
       00 00 00 00 
040781 00 00 00 01 0116*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 114
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
040791 00 00 00 00 0117*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00 ; row 115
       00 00 03 00 
       00 03 04 04 
       03 00 00 00 
0407A1 00 00 00 00 0118*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00 ; row 116
       00 00 03 00 
       00 03 05 05 
       03 00 00 00 
0407B1 00 00 00 00 0119*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 117
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
0407C1 00 00 00 00 0120*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 118
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
0407D1 00 00 00 00 0121*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 119
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
0407E1 00 00 00 00 0122*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x01,0x02,0x02,0x01 ; row 120
       00 00 00 00 
       00 06 02 02 
       01 02 02 01 
0407F1 00 00 00 00 0123*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x00,0x05,0x03 ; row 121
       00 00 00 00 
       00 03 00 05 
       03 00 05 03 
040801 00 00 00 00 0124*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x04,0x03,0x05,0x00,0x03 ; row 122
       00 00 00 00 
       00 03 00 04 
       03 05 00 03 
040811 00 00 00 00 0125*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01 ; row 123
       00 00 00 00 
       00 07 02 02 
       01 02 02 01 
040821 00 00 00 00 0126*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 124
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
040831 00 00 00 00 0127*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 125
       00 00 00 00 
       00 03 00 00 
       03 00 00 00 
040841 00 00 00 00 0128*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 126
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
040851 00 00 00 00 0129*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 127
       00 00 03 05 
       04 03 00 00 
       00 00 00 00 
040861 00 00 00 00 0130*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 128
       00 00 03 04 
       05 03 00 00 
       00 00 00 00 
040871 00 00 00 01 0131*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00,0x00,0x00,0x00 ; row 129
       02 02 01 02 
       02 06 00 00 
       00 00 00 00 
040881 00 00 00 03 0132*  	db 0x00,0x00,0x00,0x03,0x05,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 130
       05 00 03 00 
       00 00 00 00 
       00 00 00 00 
040891 00 00 00 03 0133*  	db 0x00,0x00,0x00,0x03,0x00,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 131
       00 05 03 00 
       00 00 00 00 
       00 00 00 00 
0408A1 01 02 02 07 0134*  	db 0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 132
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
0408B1 03 04 00 03 0135*  	db 0x03,0x04,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 133
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0408C1 03 05 04 03 0136*  	db 0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 134
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0408D1 01 02 02 01 0137*  	db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 135
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0408E1 03 00 00 03 0138*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 136
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0408F1 03 00 00 03 0139*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 137
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040901 01 02 02 01 0140*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 138
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
040911 03 00 00 03 0141*  	db 0x03,0x00,0x00,0x03,0x04,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 139
       04 05 03 00 
       00 00 00 00 
       00 00 00 00 
040921 03 00 00 03 0142*  	db 0x03,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 140
       05 04 03 00 
       00 00 00 00 
       00 00 00 00 
040931 01 02 02 01 0143*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 141
       02 02 01 02 
       02 01 02 02 
       07 00 00 00 
040941 00 00 00 03 0144*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 142
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040951 00 00 00 03 0145*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 143
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040961 00 00 00 06 0146*  	db 0x00,0x00,0x00,0x06,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 144
       02 02 01 02 
       02 01 02 02 
       01 02 02 01 
040971 00 00 00 00 0147*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x03 ; row 145
       00 00 03 00 
       00 03 04 04 
       03 00 00 03 
040981 00 00 00 00 0148*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03 ; row 146
       00 00 03 00 
       00 03 05 05 
       03 00 00 03 
040991 00 00 00 00 0149*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x02,0x02,0x01 ; row 147
       00 00 01 02 
       02 01 02 02 
       06 02 02 01 
0409A1 00 00 00 00 0150*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 148
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
0409B1 00 00 00 00 0151*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 149
       00 00 03 00 
       00 03 00 00 
       03 00 00 03 
0409C1 00 00 00 00 0152*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 150
       00 00 01 02 
       02 01 02 02 
       01 02 02 01 
0409D1 00 00 00 00 0153*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x03 ; row 151
       00 00 00 00 
       00 03 04 04 
       03 00 00 03 
0409E1 00 00 00 00 0154*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03 ; row 152
       00 00 00 00 
       00 03 05 04 
       03 00 00 03 
0409F1 00 00 00 00 0155*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 153
       00 00 00 00 
       00 01 02 02 
       01 02 02 01 
040A01 00 00 00 00 0156*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 154
       00 00 00 00 
       00 03 00 00 
       03 00 00 03 
040A11 00 00 00 00 0157*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03 ; row 155
       00 00 00 00 
       00 03 00 00 
       03 00 00 03 
040A21 00 00 00 00 0158*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01 ; row 156
       00 00 00 00 
       00 07 02 02 
       01 02 02 01 
040A31 00 00 00 00 0159*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 157
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
040A41 00 00 00 00 0160*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 158
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
040A51 00 00 00 00 0161*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01 ; row 159
       00 00 00 00 
       00 00 00 00 
       01 02 02 01 
040A61 00 00 00 00 0162*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03 ; row 160
       00 00 00 00 
       00 00 00 00 
       03 05 05 03 
040A71 00 00 00 00 0163*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03 ; row 161
       00 00 00 00 
       00 00 00 00 
       03 05 04 03 
040A81 00 00 00 00 0164*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x01 ; row 162
       00 00 00 00 
       00 00 00 00 
       06 02 02 01 
040A91 00 00 00 00 0165*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 163
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
040AA1 00 00 00 00 0166*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03 ; row 164
       00 00 00 00 
       00 00 00 00 
       03 00 00 03 
040AB1 00 00 00 01 0167*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x01 ; row 165
       02 02 02 02 
       02 02 02 02 
       07 02 02 01 
040AC1 00 00 00 03 0168*  	db 0x00,0x00,0x00,0x03,0x04,0x04,0x05,0x04,0x05,0x05,0x05,0x04,0x04,0x04,0x05,0x03 ; row 166
       04 04 05 04 
       05 05 05 04 
       04 04 05 03 
040AD1 00 00 00 03 0169*  	db 0x00,0x00,0x00,0x03,0x05,0x05,0x04,0x04,0x04,0x04,0x05,0x05,0x04,0x05,0x05,0x03 ; row 167
       05 05 04 04 
       04 04 05 05 
       04 05 05 03 
040AE1 00 00 00 01 0170*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x01 ; row 168
       02 02 02 02 
       02 02 02 02 
       02 02 02 01 
040AF1 01 02 02 07 0171*  	db 0x01,0x02,0x02,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 169
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040B01 03 00 00 03 0172*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 170
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040B11 03 00 00 03 0173*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 171
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040B21 01 02 02 01 0174*  	db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 172
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040B31 03 04 04 03 0175*  	db 0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 173
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040B41 03 04 04 03 0176*  	db 0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 174
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040B51 01 02 02 01 0177*  	db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 175
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040B61 03 00 00 03 0178*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 176
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040B71 03 00 00 03 0179*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 177
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040B81 01 02 02 01 0180*  	db 0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 178
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040B91 03 00 00 03 0181*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 179
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040BA1 03 00 00 03 0182*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 180
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040BB1 01 02 02 07 0183*  	db 0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 181
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
040BC1 03 00 00 03 0184*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 182
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040BD1 03 00 00 03 0185*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 183
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040BE1 01 02 02 01 0186*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 184
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
040BF1 00 00 00 03 0187*  	db 0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 185
       05 05 03 00 
       00 03 00 00 
       00 00 00 00 
040C01 00 00 00 03 0188*  	db 0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 186
       05 05 03 00 
       00 03 00 00 
       00 00 00 00 
040C11 00 00 00 01 0189*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 187
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
040C21 00 00 00 03 0190*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 188
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040C31 00 00 00 03 0191*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 189
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040C41 00 00 00 01 0192*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 190
       02 02 06 02 
       02 01 00 00 
       00 00 00 00 
040C51 00 00 00 03 0193*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 191
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040C61 00 00 00 03 0194*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 192
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040C71 00 00 00 01 0195*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 193
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
040C81 00 00 00 03 0196*  	db 0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 194
       04 04 03 00 
       00 00 00 00 
       00 00 00 00 
040C91 00 00 00 03 0197*  	db 0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 195
       04 04 03 00 
       00 00 00 00 
       00 00 00 00 
040CA1 00 00 00 01 0198*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 196
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
040CB1 00 00 00 03 0199*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 197
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040CC1 00 00 00 03 0200*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 198
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040CD1 00 00 00 07 0201*  	db 0x00,0x00,0x00,0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 199
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
040CE1 00 00 00 03 0202*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 200
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040CF1 00 00 00 03 0203*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 201
       00 00 03 00 
       00 03 00 00 
       00 00 00 00 
040D01 00 00 00 01 0204*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 202
       02 02 01 02 
       02 01 00 00 
       00 00 00 00 
040D11 00 00 00 00 0205*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 203
       00 00 03 05 
       05 03 00 00 
       00 00 00 00 
040D21 00 00 00 00 0206*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00 ; row 204
       00 00 03 05 
       05 03 00 00 
       00 00 00 00 
040D31 00 00 00 00 0207*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 205
       00 00 01 02 
       02 01 02 02 
       07 00 00 00 
040D41 00 00 00 00 0208*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 206
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040D51 00 00 00 00 0209*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 207
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040D61 00 00 00 00 0210*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01 ; row 208
       00 00 01 02 
       02 01 02 02 
       01 02 02 01 
040D71 00 00 00 00 0211*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03 ; row 209
       00 00 00 00 
       00 03 00 00 
       03 04 04 03 
040D81 00 00 00 00 0212*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x04,0x04,0x03 ; row 210
       00 00 00 00 
       00 03 00 00 
       03 04 04 03 
040D91 00 00 00 00 0213*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x02,0x02,0x01,0x02,0x02,0x01 ; row 211
       00 00 00 00 
       01 06 02 02 
       01 02 02 01 
040DA1 00 00 00 00 0214*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x05,0x04,0x01,0x00,0x00,0x00,0x00,0x00 ; row 212
       00 00 00 01 
       05 04 01 00 
       00 00 00 00 
040DB1 00 00 00 00 0215*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00 ; row 213
       00 00 01 05 
       04 05 01 00 
       00 00 00 00 
040DC1 00 00 00 00 0216*  	db 0x00,0x00,0x00,0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00 ; row 214
       00 01 05 04 
       05 01 00 00 
       00 00 00 00 
040DD1 00 00 00 00 0217*  	db 0x00,0x00,0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 215
       01 05 04 05 
       01 00 00 00 
       00 00 00 00 
040DE1 00 00 00 01 0218*  	db 0x00,0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 216
       05 04 05 01 
       00 00 00 00 
       00 00 00 00 
040DF1 00 00 01 05 0219*  	db 0x00,0x00,0x01,0x05,0x04,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 217
       04 05 01 00 
       00 00 00 00 
       00 00 00 00 
040E01 01 02 02 07 0220*  	db 0x01,0x02,0x02,0x07,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 218
       05 01 00 00 
       00 00 00 00 
       00 00 00 00 
040E11 03 00 00 03 0221*  	db 0x03,0x00,0x00,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 219
       01 00 00 00 
       00 00 00 00 
       00 00 00 00 
040E21 03 00 00 03 0222*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 220
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040E31 01 02 02 01 0223*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 221
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
040E41 03 00 00 03 0224*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 222
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040E51 03 00 00 03 0225*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 223
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040E61 01 02 02 01 0226*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 224
       02 02 06 00 
       00 00 00 00 
       00 00 00 00 
040E71 00 00 00 03 0227*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 225
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040E81 00 00 00 03 0228*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 226
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040E91 00 00 00 01 0229*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x00,0x00,0x00 ; row 227
       02 02 01 02 
       02 01 02 02 
       07 00 00 00 
040EA1 00 00 00 03 0230*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 228
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040EB1 00 00 00 03 0231*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 229
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040EC1 00 00 00 01 0232*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 230
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
040ED1 00 00 00 03 0233*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 231
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040EE1 00 00 00 03 0234*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 232
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040EF1 01 02 02 01 0235*  	db 0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x06,0x00,0x00,0x00 ; row 233
       02 02 01 02 
       02 01 02 02 
       06 00 00 00 
040F01 03 00 00 03 0236*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 234
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040F11 03 00 00 03 0237*  	db 0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 235
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040F21 07 02 02 01 0238*  	db 0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 236
       02 02 01 00 
       00 00 00 00 
       00 00 00 00 
040F31 00 00 00 03 0239*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 237
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040F41 00 00 00 03 0240*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 238
       00 00 03 00 
       00 00 00 00 
       00 00 00 00 
040F51 00 00 00 01 0241*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 239
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
040F61 00 00 00 03 0242*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 240
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040F71 00 00 00 03 0243*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 241
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040F81 00 00 00 01 0244*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 242
       02 02 06 02 
       02 01 02 02 
       01 00 00 00 
040F91 00 00 00 00 0245*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 243
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040FA1 00 00 00 00 0246*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 244
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
040FB1 00 00 00 00 0247*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 245
       00 00 01 02 
       02 01 02 02 
       01 00 00 00 
040FC1 00 00 00 00 0248*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 246
       00 00 03 05 
       04 03 00 00 
       03 00 00 00 
040FD1 00 00 00 00 0249*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x05,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 247
       00 00 03 05 
       04 03 00 00 
       03 00 00 00 
040FE1 00 00 00 01 0250*  	db 0x00,0x00,0x00,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x01,0x00,0x00,0x00 ; row 248
       02 02 01 02 
       02 01 02 02 
       01 00 00 00 
040FF1 00 00 00 03 0251*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 249
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
041001 00 00 00 03 0252*  	db 0x00,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x03,0x00,0x00,0x00 ; row 250
       00 00 03 00 
       00 03 00 00 
       03 00 00 00 
041011 01 02 02 07 0253*  	db 0x01,0x02,0x02,0x07,0x02,0x02,0x01,0x02,0x02,0x01,0x02,0x02,0x07,0x02,0x02,0x01 ; row 251
       02 02 01 02 
       02 01 02 02 
       07 02 02 01 
041021 03 05 05 03 0254*  	db 0x03,0x05,0x05,0x03,0x04,0x05,0x03,0x05,0x05,0x03,0x00,0x05,0x03,0x05,0x04,0x03 ; row 252
       04 05 03 05 
       05 03 00 05 
       03 05 04 03 
041031 03 04 04 03 0255*  	db 0x03,0x04,0x04,0x03,0x05,0x05,0x03,0x04,0x04,0x03,0x05,0x00,0x03,0x04,0x04,0x03 ; row 253
       05 05 03 04 
       04 03 05 00 
       03 04 04 03 
041041 01 02 02 06 0256*  	db 0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x02,0x02,0x06,0x02,0x02,0x01,0x02,0x02,0x06 ; row 254
       02 02 01 02 
       02 06 02 02 
       01 02 02 06 
041051 00 00 00 00 0257*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041061             0258*  
041061             0259*  
041061 10          0260*  tiles_level_01: db 16  ; number of rows, 0 is max of 256
041062 00 00 00 00 0261*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041072 00 00 00 00 0262*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041082 00 00 00 00 0263*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041092 00 00 00 00 0264*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0410A2 00 00 00 00 0265*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0410B2 00 00 00 00 0266*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0410C2 00 00 00 00 0267*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0410D2 00 00 00 00 0268*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0410E2 00 00 00 00 0269*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0410F2 00 00 00 00 0270*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041102 00 00 00 00 0271*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041112 00 00 00 00 0272*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041122 00 00 00 00 0273*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041132 00 00 00 00 0274*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041142 00 00 00 00 0275*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041152 00 00 00 00 0276*  	db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; row 255
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041162             0277*  
041162             0030   	include "sprites.inc"
041162             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
041162             0002*  table_bytes_per_record: equ 38 ; 38 bytes per sprite record
041162             0003*  sprite_id:              equ 00 ; 1 bytes unique spriteId, zero-based
041162             0004*  sprite_type:            equ 01 ; 1 bytes type of sprite as defined in enemies.inc
041162             0005*  sprite_base_bufferId:   equ 02 ; 3 bytes bitmap bufferId
041162             0006*  sprite_move_program:    equ 05 ; 3 bytes address of sprite's behavior subroutine
041162             0007*  sprite_collisions:      equ 08 ; 1 bytes low/high nibble: collision details
041162             0008*  sprite_dim_x:           equ 09 ; 1 bytes sprite width in pixels
041162             0009*  sprite_dim_y:           equ 10 ; 1 bytes sprite height in pixels
041162             0010*  sprite_x:               equ 11 ; 3 bytes 16.8 fractional x position in pixels
041162             0011*  sprite_y:               equ 14 ; 3 bytes 16.8 fractional y position in pixels
041162             0012*  sprite_xvel:            equ 17 ; 3 bytes x-component velocity, 16.8 fixed, pixels
041162             0013*  sprite_yvel:            equ 20 ; 3 bytes y-component velocity, 16.8 fixed, pixels
041162             0014*  sprite_vel:             equ 23 ; 3 bytes velocity px/frame (16.8 fixed)
041162             0015*  sprite_heading:         equ 26 ; 3 bytes sprite movement direction deg256 16.8 fixed
041162             0016*  sprite_orientation:     equ 29 ; 3 bytes orientation bits
041162             0017*  sprite_animation:       equ 32 ; 1 bytes current animation index, zero-based
041162             0018*  sprite_animation_timer: equ 33 ; 1 bytes when hits zero, draw next animation
041162             0019*  sprite_move_timer:      equ 34 ; 1 bytes when zero, go to next move program, or step
041162             0020*  sprite_move_step:       equ 35 ; 1 bytes stage in a move program sequence, varies
041162             0021*  sprite_points:          equ 36 ; 1 bytes points awarded for killing this sprite type, BCD
041162             0022*  sprite_shield_damage:   equ 37 ; 1 bytes shield points deducted for collision, binary
041162             0023*  
041162             0024*  ; ###### SPRITE TABLE VARIABLES ######
041162             0025*  ; maximum number of sprites
041162             0026*  table_max_records: equ 16 ; it can handle more but this is pushing it
041162             0027*  table_total_bytes: equ table_max_records*table_bytes_per_record
041162             0028*  
041162             0029*  ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
041162             0030*  table_base:
041162 00 00 00 00 0031*  sprite_start_variables:  blkb table_total_bytes, 0 ; fill with zeroes
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0413C2             0032*  sprite_end_variables: ; in case we want to traverse the table in reverse
0413C2             0033*  
0413C2             0034*  ; pointer to top address of current record, initialized to table_base
0413C2 62 11 04    0035*  table_pointer: dl table_base
0413C5             0036*  ; how many active sprites
0413C5 00          0037*  table_active_sprites: db 0x00
0413C6             0038*  ; flag indicating collision with screen edge
0413C6             0039*  ; uses orientation codes to specify which edge(s)
0413C6 00          0040*  sprite_screen_edge: db #00
0413C7             0041*  ; next sprite id to use
0413C7 00          0042*  sprite_next_id: db 0
0413C8             0043*  
0413C8             0044*  ; ######### COLLISION SPRITE PARAMETERS ##########
0413C8             0045*  ; integer coordinates are all that are needed for collision calculations
0413C8 00          0046*  collision_x: db 0x00
0413C9 00          0047*  collision_y: db 0x00
0413CA 00          0048*  collision_dim_x: db 0x00
0413CB 00          0049*  collision_dim_y: db 0x00
0413CC             0050*  
0413CC             0051*  ; scratch variables
0413CC 00          0052*  x: db 0x00 ; 8-bit signed integer
0413CD 00          0053*  y: db 0x00 ; 8-bit signed integer
0413CE 00 00 00    0054*  x0: dl 0x000000 ; 16.8 signed fixed place
0413D1 00 00 00    0055*  y0: dl 0x000000 ; 16.8 signed fixed place
0413D4 00 00 00    0056*  incx1: dl 0x000000 ; 16.8 signed fixed place
0413D7 00 00 00    0057*  incy1: dl 0x000000 ; 16.8 signed fixed place
0413DA 00 00 00    0058*  incx2: dl 0x000000 ; 16.8 signed fixed place
0413DD 00 00 00    0059*  incy2: dl 0x000000 ; 16.8 signed fixed place
0413E0             0060*  
0413E0             0061*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
0413E0 00 00 00    0062*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
0413E3 00 00 00    0063*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
0413E6 00 00 00    0064*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
0413E9             0065*  
0413E9             0066*  ; gets the next available sprite id
0413E9             0067*  ; inputs; none
0413E9             0068*  ; returns: if new sprite available, a = sprite id,
0413E9             0069*  ;           ix pointing to new sprite vars, carry set
0413E9             0070*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
0413E9             0071*  ; destroys: a,b,hl,ix
0413E9             0072*  ; affects: bumps table_active_sprites by one
0413E9             0073*  table_get_next_id:
0413E9 DD 21 62 11 0074*      ld ix,table_base
       04          
0413EE 11 26 00 00 0075*      ld de,table_bytes_per_record
0413F2 06 10       0076*      ld b,table_max_records
0413F4             0077*  @loop:
0413F4 DD 7E 01    0078*      ld a,(ix+sprite_type)
0413F7 A7          0079*      and a
0413F8 28 06       0080*      jr z,@found
0413FA DD 19       0081*      add ix,de
0413FC 10 F6       0082*      djnz @loop
0413FE             0083*  @notfound:
0413FE AF          0084*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
0413FF C9          0085*      ret
041400             0086*  @found:
041400             0087*  ; bump number of active sprites
041400 21 C5 13 04 0088*      ld hl,table_active_sprites
041404 34          0089*      inc (hl)
041405             0090*  ; return sprite id
041405 3E 10       0091*      ld a,table_max_records
041407 90          0092*      sub b
041408 32 C7 13 04 0093*      ld (sprite_next_id),a
04140C 37          0094*      scf ; sets carry flag indicating we found a free sprite
04140D C9          0095*      ret ; done
04140E             0096*  
04140E             0097*  ; deactivate the sprite with the given id
04140E             0098*  ; inputs: a = sprite id
04140E             0099*  ; outputs: nothing
04140E             0100*  ; destroys: a,ix,de
04140E             0101*  ; affects: decrements table_active_sprites by one
04140E             0102*  table_deactivate_sprite:
04140E F5          0103*      push af ; save sprite id bc we need it later
04140F CD 46 1F 04 0104*      call vdu_sprite_select
041413 CD CA 1F 04 0105*      call vdu_sprite_hide
041417 F1          0106*      pop af ; restore sprite id
041418 11 00 00 00 0107*      ld de,0 ; clear deu
04141C 57          0108*      ld d,a
04141D 1E 26       0109*      ld e,table_bytes_per_record
04141F ED 5C       0110*      mlt de
041421 DD 21 62 11 0111*      ld ix,table_base
       04          
041426 DD 19       0112*      add ix,de
041428 AF          0113*      xor a
041429 DD 77 01    0114*      ld (ix+sprite_type),a
04142C DD 21 C5 13 0115*      ld ix,table_active_sprites
       04          
041431 DD 35 00    0116*      dec (ix)
041434 C9          0117*      ret
041435             0118*  
041435             0119*  sprites_init:
041435             0120*  ; initialize sprites
041435 CD 7A 20 04 0121*  	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
041439 AF          0122*  	xor a
04143A             0123*  @sprite_loop:
04143A F5          0124*  	push af
04143B CD 46 1F 04 0125*  	call vdu_sprite_select
04143F 21 00 01 00 0126*  	ld hl,BUF_0TILE_EMPTY ; can be anything, but why not blank?
041443 CD 9B 20 04 0127*  	call vdu_sprite_add_buff
041447 F1          0128*  	pop af
041448 3C          0129*  	inc a
041449 FE 12       0130*  	cp table_max_records+2 ; tack on sprites for player and laser
04144B 20 ED       0131*  	jr nz,@sprite_loop
04144D 3C          0132*  	inc a
04144E CD 7A 1F 04 0133*  	call vdu_sprite_activate
041452             0134*  
041452             0135*  ; define player sprite
041452 3A C3 2B 04 0136*  	ld a,(player_id)
041456 CD 46 1F 04 0137*  	call vdu_sprite_select
04145A CD 59 1F 04 0138*  	call vdu_sprite_clear_frames
04145E 21 34 01 00 0139*  	ld hl,BUF_SHIP_0L
041462 01 03 00 00 0140*  	ld bc,3 ; three bitmaps for player ship
041466             0141*  @sprite_player_loop:
041466 C5          0142*  	push bc
041467 E5          0143*  	push hl
041468 CD 9B 20 04 0144*  	call vdu_sprite_add_buff
04146C E1          0145*  	pop hl
04146D 23          0146*  	inc hl
04146E C1          0147*  	pop bc
04146F 10 F5       0148*  	djnz @sprite_player_loop
041471 CD BC 1F 04 0149*  	call vdu_sprite_show
041475             0150*  
041475             0151*  ; all done
041475 C9          0152*      ret
041476             0031       include "functions.inc"
041476             0001*  
041476             0002*      MACRO printChar char
041476             0003*          LD A, char
041476             0004*          RST.LIL 10h
041476             0005*      ENDMACRO
041476             0006*  
041476             0007*  ; Simulated call to subroutine at HL
041476             0008*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
041476             0009*  ; outputs: whatever the subroutine does, including HL and BC
041476             0010*  ; destroys: only what the subroutine does, but always BC
041476             0011*      MACRO callHL
041476             0012*          ld bc,$+7     ; Address of first instruction after the jump
041476             0013*          push bc       ; which constitutes the return address
041476             0014*          jp   (hl)     ; Jump to the address in HL
041476             0015*      ENDMACRO
041476             0016*  
041476             0017*  ; Simulated call to subroutine at IX
041476             0018*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
041476             0019*  ; outputs: whatever the subroutine does, including IX and BC
041476             0020*  ; destroys: only what the subroutine does, but always BC
041476             0021*      MACRO callIX
041476             0022*          ld bc,$+7     ; Address of first instruction after the jump
041476             0023*          push bc       ; which constitutes the return address
041476             0024*          jp   (ix)     ; Jump to the address in IX
041476             0025*      ENDMACRO
041476             0026*  
041476             0027*  ; Simulated call to soubroutinte at IY
041476             0028*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
041476             0029*  ; outputs: whatever the subroutine does, including IY and BC
041476             0030*  ; destroys: only what the subroutine does, but always BC
041476             0031*      MACRO callIY
041476             0032*          ld bc,$+7     ; Address of first instruction after the jump
041476             0033*          push bc       ; which constitutes the return address
041476             0034*          jp   (iy)     ; Jump to the address in IY
041476             0035*      ENDMACRO
041476             0036*  
041476             0037*  ; put the value in HLU into the accumulator
041476             0038*  ; destroys: af
041476             0039*      MACRO HLU_TO_A
041476             0040*          push hl ; 4 cycles
041476             0041*          inc sp ; 1 cycle
041476             0042*          pop af  ; 4 cycles
041476             0043*          dec sp ; 1 cycle
041476             0044*                 ; 10 cycles total
041476             0045*      ENDMACRO
041476             0046*  
041476             0047*  A_TO_HLU:
041476             0048*      ; call is 7 cycles
041476 22 83 14 04 0049*      ld (@scratch),hl ; 7 cycles
04147A 32 85 14 04 0050*      ld (@scratch+2),a ; 5 cycles
04147E 2A 83 14 04 0051*      ld hl,(@scratch) ; 7 cycles
041482 C9          0052*      ret ; 6 cycles
041483             0053*          ; 25 cycles total
041483 00 00 00    0054*  @scratch: dl 0
041486             0055*  
041486             0056*      ; TODO: implement this
041486             0057*      ; MACRO A_TO_HLU
041486             0058*      ;     push.s af
041486             0059*      ;     inc sp
041486             0060*      ;     push.s hl
041486             0061*      ;     pop hl
041486             0062*      ;     inc sp
041486             0063*      ;     inc sp
041486             0064*      ; ENDMACRO
041486             0065*  
041486             0066*      MACRO PUSH_ALL
041486             0067*          ex af,af'
041486             0068*          exx
041486             0069*          push af
041486             0070*          push hl
041486             0071*          push bc
041486             0072*          push de
041486             0073*  
041486             0074*          ex af,af'
041486             0075*          exx
041486             0076*          push af
041486             0077*          push hl
041486             0078*          push bc
041486             0079*          push de
041486             0080*          push ix
041486             0081*          push iy
041486             0082*      ENDMACRO
041486             0083*  
041486             0084*      MACRO POP_ALL
041486             0085*          pop iy
041486             0086*          pop ix
041486             0087*          pop de
041486             0088*          pop bc
041486             0089*          pop hl
041486             0090*          pop af
041486             0091*          ex af,af'
041486             0092*          exx
041486             0093*  
041486             0094*          pop de
041486             0095*          pop bc
041486             0096*          pop hl
041486             0097*          pop af
041486             0098*          ex af,af'
041486             0099*          exx
041486             0100*      ENDMACRO
041486             0101*  
041486             0102*  ; Print a zero-terminated string inline with code, e.g.:
041486             0103*  ;
041486             0104*  ;    call printInline
041486             0105*  ;    ASCIZ "Hello, world!\r\n"
041486             0106*  ;
041486             0107*  ; Destroys: HL,AF
041486             0108*  printInline:
041486 E1          0109*      pop hl ; get the return address = pointer to start of string
041487 CD 8D 14 04 0110*      call printString ; HL advances to end of string
04148B E5          0111*      push hl ; restore the return address = pointer to end of string
04148C C9          0112*      ret
04148D             0113*  
04148D             0114*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
04148D             0115*  ; Print a zero-terminated string
04148D             0116*  ; HL: Pointer to string
04148D             0117*  printString:
04148D C5          0118*  	PUSH	BC
04148E 01 00 00 00 0119*  	LD		BC,0
041492 3E 00       0120*  	LD 	 	A,0
041494 5B DF       0121*  	RST.LIL 18h
041496 C1          0122*  	POP		BC
041497 C9          0123*  	RET
041498             0124*  ; print a VDU sequence
041498             0125*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
041498             0126*  sendVDUsequence:
041498 C5          0127*  	PUSH	BC
041499 01 00 00 00 0128*  	LD		BC, 0
04149D 4E          0129*  	LD		C, (HL)
04149E 5B DF       0130*  	RST.LIL	18h
0414A0 C1          0131*  	POP		BC
0414A1 C9          0132*  	RET
0414A2             0133*  ; Print Newline sequence to VDP
0414A2             0134*  printNewLine:
0414A2 F5          0135*      push af ; for some reason rst.lil 10h sets carry flag
0414A3 3E 0D       0136*  	LD	A, '\r'
0414A5 5B D7       0137*  	RST.LIL 10h
0414A7 3E 0A       0138*  	LD	A, '\n'
0414A9 5B D7       0139*  	RST.LIL 10h
0414AB F1          0140*      pop af
0414AC C9          0141*  	RET
0414AD             0142*  
0414AD             0143*  ; Print a 24-bit HEX number
0414AD             0144*  ; HLU: Number to print
0414AD             0145*  printHex24:
0414AD             0146*      HLU_TO_A
0414AD E5          0001*M         push hl ; 4 cycles
0414AE 33          0002*M         inc sp ; 1 cycle
0414AF F1          0003*M         pop af  ; 4 cycles
0414B0 3B          0004*M         dec sp ; 1 cycle
0414B1             0005*M                ; 10 cycles total
0414B1 CD BB 14 04 0147*  	CALL	printHex8
0414B5             0148*  ; Print a 16-bit HEX number
0414B5             0149*  ; HL: Number to print
0414B5             0150*  printHex16:
0414B5 7C          0151*  	LD		A,H
0414B6 CD BB 14 04 0152*  	CALL	printHex8
0414BA 7D          0153*  	LD		A,L
0414BB             0154*  ; Print an 8-bit HEX number
0414BB             0155*  ; A: Number to print
0414BB             0156*  printHex8:
0414BB 4F          0157*  	LD		C,A
0414BC 1F          0158*  	RRA
0414BD 1F          0159*  	RRA
0414BE 1F          0160*  	RRA
0414BF 1F          0161*  	RRA
0414C0 CD C5 14 04 0162*  	CALL	@F
0414C4 79          0163*  	LD		A,C
0414C5             0164*  @@:
0414C5 E6 0F       0165*  	AND		0Fh
0414C7 C6 90       0166*  	ADD		A,90h
0414C9 27          0167*  	DAA
0414CA CE 40       0168*  	ADC		A,40h
0414CC 27          0169*  	DAA
0414CD 5B D7       0170*  	RST.LIL	10h
0414CF C9          0171*  	RET
0414D0             0172*  
0414D0             0173*  printHexA:
0414D0 F5          0174*      push af
0414D1 C5          0175*      push bc
0414D2 CD BB 14 04 0176*      call printHex8
0414D6 3E 20       0177*      ld a,' '
0414D8 5B D7       0178*      rst.lil 10h
0414DA C1          0179*      pop bc
0414DB F1          0180*      pop af
0414DC C9          0181*      ret
0414DD             0182*  
0414DD             0183*  printHexHL:
0414DD F5          0184*      push af
0414DE C5          0185*      push bc
0414DF CD B5 14 04 0186*      call printHex16
0414E3 3E 20       0187*      ld a,' '
0414E5 5B D7       0188*      rst.lil 10h
0414E7 C1          0189*      pop bc
0414E8 F1          0190*      pop af
0414E9 C9          0191*      ret
0414EA             0192*  
0414EA             0193*  printHexUHL:
0414EA F5          0194*      push af
0414EB C5          0195*      push bc
0414EC CD AD 14 04 0196*      call printHex24
0414F0 3E 20       0197*      ld a,' '
0414F2 5B D7       0198*      rst.lil 10h
0414F4 C1          0199*      pop bc
0414F5 F1          0200*      pop af
0414F6 C9          0201*      ret
0414F7             0202*  
0414F7             0203*  printHexAUHL:
0414F7 F5          0204*      push af
0414F8 C5          0205*      push bc
0414F9 CD BB 14 04 0206*      call printHex8
0414FD 3E 2E       0207*      ld a,'.'
0414FF 5B D7       0208*      rst.lil 10h
041501 CD AD 14 04 0209*      call printHex24
041505 3E 20       0210*      ld a,' '
041507 5B D7       0211*      rst.lil 10h
041509 C1          0212*      pop bc
04150A F1          0213*      pop af
04150B C9          0214*      ret
04150C             0215*  
04150C             0216*  printHexABHL:
04150C             0217*  ; preserve registers
04150C C5          0218*      push bc ; b will be ok c will not
04150D F5          0219*      push af ; will get totally destroyed
04150E             0220*  ; print a
04150E CD BB 14 04 0221*      call printHex8
041512             0222*  ; print b
041512 78          0223*      ld a,b
041513 CD BB 14 04 0224*      call printHex8
041517             0225*  ; print hl
041517 CD B5 14 04 0226*      call printHex16
04151B             0227*  ; restore registers
04151B F1          0228*      pop af
04151C C1          0229*      pop bc
04151D C9          0230*      ret
04151E             0231*  
04151E             0232*  printHexBHL:
04151E             0233*  ; preserve registers
04151E C5          0234*      push bc ; b will be ok c will not
04151F F5          0235*      push af ; will get totally destroyed
041520             0236*  ; print b
041520 78          0237*      ld a,b
041521 CD BB 14 04 0238*      call printHex8
041525             0239*  ; print hl
041525 CD B5 14 04 0240*      call printHex16
041529             0241*  ; restore registers
041529 F1          0242*      pop af
04152A C1          0243*      pop bc
04152B C9          0244*      ret
04152C             0245*  
04152C             0246*  printHexCDE:
04152C             0247*  ; preserve registers
04152C C5          0248*      push bc ; b will be ok c will not
04152D F5          0249*      push af ; will get totally destroyed
04152E             0250*  ; print c
04152E 79          0251*      ld a,c
04152F CD BB 14 04 0252*      call printHex8
041533             0253*  ; print de
041533 EB          0254*      ex de,hl
041534 CD B5 14 04 0255*      call printHex16
041538 EB          0256*      ex de,hl
041539             0257*  ; restore registers
041539 F1          0258*      pop af
04153A C1          0259*      pop bc
04153B C9          0260*      ret
04153C             0261*  
04153C             0262*  printHexUIX:
04153C             0263*  ; store everything in scratch
04153C 22 B5 19 04 0264*      ld (uhl),hl
041540 ED 43 B8 19 0265*      ld (ubc),bc
       04          
041545 ED 53 BB 19 0266*      ld (ude),de
       04          
04154A DD 22 BE 19 0267*      ld (uix),ix
       04          
04154F FD 22 C1 19 0268*      ld (uiy),iy
       04          
041554 F5          0269*      push af ; fml
041555             0270*  
041555 21 4C 19 04 0271*      ld hl,str_ixu
041559 CD 8D 14 04 0272*      call printString
04155D 2A BE 19 04 0273*      ld hl,(uix)
041561 CD AD 14 04 0274*      call printHex24
041565 CD A2 14 04 0275*      call printNewLine
041569             0276*  
041569             0277*  ; restore everything
041569 2A B5 19 04 0278*      ld hl, (uhl)
04156D ED 4B B8 19 0279*      ld bc, (ubc)
       04          
041572 ED 5B BB 19 0280*      ld de, (ude)
       04          
041577 DD 2A BE 19 0281*      ld ix, (uix)
       04          
04157C FD 2A C1 19 0282*      ld iy, (uiy)
       04          
041581 F1          0283*      pop af
041582             0284*  ; all done
041582 C9          0285*      ret
041583             0286*  
041583             0287*  ; Print a 0x HEX prefix
041583             0288*  DisplayHexPrefix:
041583 3E 30       0289*  	LD	A, '0'
041585 5B D7       0290*  	RST.LIL 10h
041587 3E 78       0291*  	LD	A, 'x'
041589 5B D7       0292*  	RST.LIL 10h
04158B C9          0293*  	RET
04158C             0294*  
04158C             0295*      MACRO printDecBC
04158C             0296*          push hl
04158C             0297*          push bc
04158C             0298*          pop hl
04158C             0299*          call printDec
04158C             0300*          pop hl
04158C             0301*      ENDMACRO
04158C             0302*  
04158C             0303*      MACRO printDecDE
04158C             0304*          push hl
04158C             0305*          push de
04158C             0306*          pop hl
04158C             0307*          call printDec
04158C             0308*          pop hl
04158C             0309*      ENDMACRO
04158C             0310*  
04158C             0311*      MACRO printDecHL
04158C             0312*          call printDec
04158C             0313*      ENDMACRO
04158C             0314*  
04158C             0315*      MACRO printDecIX
04158C             0316*          push hl
04158C             0317*          push ix
04158C             0318*          pop hl
04158C             0319*          call printDec
04158C             0320*          pop hl
04158C             0321*      ENDMACRO
04158C             0322*  
04158C             0323*      MACRO printDecIY
04158C             0324*          push hl
04158C             0325*          push iy
04158C             0326*          pop hl
04158C             0327*          call printDec
04158C             0328*          pop hl
04158C             0329*      ENDMACRO
04158C             0330*  
04158C             0331*  
04158C             0332*  ; Prints the right justified decimal value in HL without leading zeroes
04158C             0333*  ; HL : Value to print
04158C             0334*  ; preserves all registers and flags
04158C             0335*  printDec:
04158C             0336*  ; BEGIN MY CODE
04158C             0337*  ; back up all the things
04158C F5          0338*      push af
04158D C5          0339*      push bc
04158E D5          0340*      push de
04158F E5          0341*      push hl
041590             0342*  ; END MY CODE
041590 11 B8 15 04 0343*  	LD	 DE, _printDecBuffer
041594 CD C8 15 04 0344*  	CALL u24_to_ascii
041598             0345*  ; BEGIN MY CODE
041598             0346*  ; replace leading zeroes with spaces
041598 21 B8 15 04 0347*      LD	 HL, _printDecBuffer
04159C 06 07       0348*      ld   B, 7 ; if HL was 0, we want to keep the final zero
04159E             0349*  @loop:
04159E 7E          0350*      LD	 A, (HL)
04159F FE 30       0351*      CP	 '0'
0415A1 C2 AB 15 04 0352*      JP	 NZ, @done
0415A5 3E 20       0353*      LD   A, ' '
0415A7 77          0354*      LD	 (HL), A
0415A8 23          0355*      INC	 HL
0415A9             0356*      ; CALL vdu_cursor_forward
0415A9 10 F3       0357*      DJNZ @loop
0415AB             0358*  @done:
0415AB             0359*  ; END MY CODE
0415AB 21 B8 15 04 0360*  	LD	 HL, _printDecBuffer
0415AF CD 8D 14 04 0361*  	CALL printString
0415B3             0362*  ; BEGIN MY CODE
0415B3             0363*  ; restore all the things
0415B3 E1          0364*      pop hl
0415B4 D1          0365*      pop de
0415B5 C1          0366*      pop bc
0415B6 F1          0367*      pop af
0415B7             0368*  ; END MY CODE
0415B7 C9          0369*  	RET
0415B8 00 00 00 00 0370*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0415C8             0371*  
0415C8             0372*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0415C8             0373*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0415C8             0374*  ; so it will allways be 8 characters length
0415C8             0375*  ; HL : Value to convert to string
0415C8             0376*  ; DE : pointer to buffer, at least 8 byte + 0
0415C8             0377*  u24_to_ascii:
0415C8 01 80 69 67 0378*  	LD	 BC,-10000000
0415CC CD FF 15 04 0379*  	CALL @one_digit
0415D0 01 C0 BD F0 0380*  	LD	 BC,-1000000
0415D4 CD FF 15 04 0381*  	CALL @one_digit
0415D8 01 60 79 FE 0382*  	LD	 BC,-100000
0415DC CD FF 15 04 0383*  	CALL @one_digit
0415E0 01 F0 D8 FF 0384*  	LD   BC,-10000
0415E4 CD FF 15 04 0385*  	CALL @one_digit
0415E8 01 18 FC FF 0386*  	LD   BC,-1000
0415EC CD FF 15 04 0387*  	CALL @one_digit
0415F0 01 9C FF FF 0388*  	LD   BC,-100
0415F4 CD FF 15 04 0389*  	CALL @one_digit
0415F8 0E F6       0390*  	LD   C,-10
0415FA CD FF 15 04 0391*  	CALL @one_digit
0415FE 48          0392*  	LD   C,B
0415FF             0393*  @one_digit:
0415FF 3E 2F       0394*  	LD   A,'0'-1
041601             0395*  @divide_me:
041601 3C          0396*  	INC  A
041602 09          0397*  	ADD  HL,BC
041603 38 FC       0398*  	JR   C,@divide_me
041605 ED 42       0399*  	SBC  HL,BC
041607 12          0400*  	LD   (DE),A
041608 13          0401*  	INC  DE
041609 C9          0402*  	RET
04160A             0403*  
04160A             0404*  print_u24:
04160A D5          0405*      push de
04160B E5          0406*      push hl
04160C 11 B8 15 04 0407*      ld de,_printDecBuffer
041610 CD C8 15 04 0408*      call u24_to_ascii
041614 21 B8 15 04 0409*      ld hl,_printDecBuffer
041618 CD 8D 14 04 0410*      call printString
04161C 3E 20       0411*      ld a,' '
04161E 5B D7       0412*      rst.lil 10h
041620 E1          0413*      pop hl
041621 D1          0414*      pop de
041622 C9          0415*      ret
041623             0416*  
041623             0417*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
041623             0418*  ; HL : Value to convert to string (integer part in H, fractional part in L)
041623             0419*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
041623             0420*  u168_to_ascii:
041623             0421*  ; add a leading space to make room for sign flag if needed
041623 3E 20       0422*      ld a,' '
041625 12          0423*      ld (de),a
041626 13          0424*      inc de
041627             0425*  ; Convert integer part
041627 E5          0426*      push hl               ; Save HL (we’ll need the fractional part later)
041628 CD 1D 21 04 0427*      call hlu_udiv256    ; Shift to get integer portion in HL
04162C 01 F0 D8 FF 0428*      ld   bc, -10000
041630 CD 53 16 04 0429*      call @one_int
041634 01 18 FC FF 0430*      ld   bc, -1000
041638 CD 53 16 04 0431*      call @one_int
04163C 01 9C FF FF 0432*      ld   bc, -100
041640 CD 53 16 04 0433*      call @one_int
041644 0E F6       0434*      ld   c, -10
041646 CD 53 16 04 0435*      call @one_int
04164A 48          0436*      ld   c, b
04164B CD 53 16 04 0437*      call @one_int
04164F C3 5E 16 04 0438*      jp   @frac            ; Jump to fractional part conversion
041653             0439*  @one_int:
041653 3E 2F       0440*      ld   a, '0' - 1       ; Start ASCII character at '0'
041655             0441*  @divide_me:
041655 3C          0442*      inc  a
041656 09          0443*      add  hl, bc           ; Accumulate until overflow
041657 38 FC       0444*      jr   c, @divide_me
041659 ED 42       0445*      sbc  hl, bc           ; Remove excess after overflow
04165B 12          0446*      ld   (de), a          ; Store ASCII digit
04165C 13          0447*      inc  de
04165D C9          0448*      ret
04165E             0449*  ; Convert fractional part
04165E             0450*  @frac:
04165E 3E 2E       0451*      ld   a, '.'           ; Decimal point
041660 12          0452*      ld   (de), a
041661 13          0453*      inc  de
041662 E1          0454*      pop  hl               ; Restore HL with original fraction
041663 06 03       0455*      ld   b, 3             ; Loop counter for 3 fractional digits
041665             0456*  @frac_loop:
041665 26 0A       0457*      ld   h, 10            ; Load multiplier for fractional part
041667 ED 6C       0458*      mlt  hl               ; Multiply by 10, result in HL (H holds the integer part)
041669 3E 30       0459*      ld   a, '0'
04166B 84          0460*      add  a, h             ; Convert integer part to ASCII
04166C 12          0461*      ld   (de), a
04166D 13          0462*      inc  de
04166E 10 F5       0463*      djnz @frac_loop       ; Repeat for each fractional digit
041670             0464*  ; Add null terminator
041670 AF          0465*      xor  a                ; Null terminator
041671 12          0466*      ld   (de), a
041672 C9          0467*      ret
041673             0468*  
041673             0469*  print_u168:
041673 D5          0470*      push de
041674 E5          0471*      push hl
041675 11 B8 15 04 0472*      ld de,_printDecBuffer
041679 CD 23 16 04 0473*      call u168_to_ascii
04167D 21 B8 15 04 0474*      ld hl,_printDecBuffer
041681 CD 8D 14 04 0475*      call printString
041685 E1          0476*      pop hl
041686 D1          0477*      pop de
041687 C9          0478*      ret
041688             0479*  
041688             0480*  ; signed version of u168_to_ascii
041688             0481*  s168_to_ascii:
041688 D5          0482*      push de ; save starting address of buffer
041689 CD B6 20 04 0483*      call hlu_abs
04168D F5          0484*      push af ; save sign flag
04168E CD 23 16 04 0485*      call u168_to_ascii
041692 F1          0486*      pop af ; restore sign flag
041693 D1          0487*      pop de ; restore starting address of buffer
041694 F0          0488*      ret p ; hlu was positive so nothing to do
041695 3E 2D       0489*      ld a,'-'
041697 12          0490*      ld (de),a
041698 C9          0491*      ret
041699             0492*  
041699             0493*  print_s168:
041699 D5          0494*      push de
04169A E5          0495*      push hl
04169B 11 B8 15 04 0496*      ld de,_printDecBuffer
04169F CD 88 16 04 0497*      call s168_to_ascii
0416A3 21 B8 15 04 0498*      ld hl,_printDecBuffer
0416A7 CD 8D 14 04 0499*      call printString
0416AB E1          0500*      pop hl
0416AC D1          0501*      pop de
0416AD C9          0502*      ret
0416AE             0503*  
0416AE             0504*  print_s168_hl:
0416AE F5          0505*      push af
0416AF E5          0506*      push hl
0416B0 CD 99 16 04 0507*      call print_s168
0416B4 3E 20       0508*      ld a,' '
0416B6 5B D7       0509*      rst.lil 10h
0416B8 E1          0510*      pop hl
0416B9 F1          0511*      pop af
0416BA C9          0512*      ret
0416BB             0513*  
0416BB             0514*  print_s168_bc:
0416BB F5          0515*      push af
0416BC C5          0516*      push bc
0416BD E5          0517*      push hl
0416BE C5          0518*      push bc
0416BF E1          0519*      pop hl
0416C0 CD 99 16 04 0520*      call print_s168
0416C4 3E 20       0521*      ld a,' '
0416C6 5B D7       0522*      rst.lil 10h
0416C8 E1          0523*      pop hl
0416C9 C1          0524*      pop bc
0416CA F1          0525*      pop af
0416CB C9          0526*      ret
0416CC             0527*  
0416CC             0528*  print_s168_de:
0416CC F5          0529*      push af
0416CD D5          0530*      push de
0416CE E5          0531*      push hl
0416CF EB          0532*      ex de,hl
0416D0 CD 99 16 04 0533*      call print_s168
0416D4 3E 20       0534*      ld a,' '
0416D6 5B D7       0535*      rst.lil 10h
0416D8 E1          0536*      pop hl
0416D9 D1          0537*      pop de
0416DA F1          0538*      pop af
0416DB C9          0539*      ret
0416DC             0540*  
0416DC             0541*  print_s168_hl_bc_de:
0416DC F5          0542*      push af
0416DD C5          0543*      push bc
0416DE D5          0544*      push de
0416DF E5          0545*      push hl
0416E0 CD 99 16 04 0546*      call print_s168
0416E4 3E 20       0547*      ld a,' '
0416E6 5B D7       0548*      rst.lil 10h
0416E8 C5          0549*      push bc
0416E9 E1          0550*      pop hl
0416EA CD 99 16 04 0551*      call print_s168
0416EE 3E 20       0552*      ld a,' '
0416F0 5B D7       0553*      rst.lil 10h
0416F2 EB          0554*      ex de,hl
0416F3 CD 99 16 04 0555*      call print_s168
0416F7 3E 20       0556*      ld a,' '
0416F9 5B D7       0557*      rst.lil 10h
0416FB E1          0558*      pop hl
0416FC D1          0559*      pop de
0416FD C1          0560*      pop bc
0416FE F1          0561*      pop af
0416FF C9          0562*      ret
041700             0563*  
041700             0564*  print_s168_bc_de:
041700 F5          0565*      push af
041701 C5          0566*      push bc
041702 D5          0567*      push de
041703 C5          0568*      push bc
041704 E1          0569*      pop hl
041705 CD 99 16 04 0570*      call print_s168
041709 3E 20       0571*      ld a,' '
04170B 5B D7       0572*      rst.lil 10h
04170D EB          0573*      ex de,hl
04170E CD 99 16 04 0574*      call print_s168
041712 3E 20       0575*      ld a,' '
041714 5B D7       0576*      rst.lil 10h
041716 E1          0577*      pop hl
041717 D1          0578*      pop de
041718 C1          0579*      pop bc
041719 F1          0580*      pop af
04171A C9          0581*      ret
04171B             0582*  
04171B             0583*  print_s168_a:
04171B F5          0584*      push af
04171C C5          0585*      push bc
04171D E5          0586*      push hl
04171E 21 00 00 00 0587*      ld hl,0
041722 6F          0588*      ld l,a
041723 CD AE 16 04 0589*      call print_s168_hl
041727 E1          0590*      pop hl
041728 C1          0591*      pop bc
041729 F1          0592*      pop af
04172A C9          0593*      ret
04172B             0594*  
04172B             0595*  ; #### new functions added by Brandon R. Gates ####
04172B             0596*  
04172B             0597*  ; print the binary representation of the 8-bit value in a
04172B             0598*  ; destroys a, hl, bc
04172B             0599*  printBin8:
04172B 06 08       0600*      ld b,8      ; loop counter for 8 bits
04172D 21 48 17 04 0601*      ld hl,@cmd  ; set hl to the low byte of the output string
041731             0602*                  ; (which will be the high bit of the value in a)
041731             0603*  @loop:
041731 07          0604*      rlca ; put the next highest bit into carry
041732 38 04       0605*      jr c,@one
041734 36 30       0606*      ld (hl),'0'
041736 18 02       0607*      jr @next_bit
041738             0608*  @one:
041738 36 31       0609*      ld (hl),'1'
04173A             0610*  @next_bit:
04173A 23          0611*      inc hl
04173B 10 F4       0612*      djnz @loop
04173D             0613*  ; print it
04173D 21 48 17 04 0614*  	ld hl,@cmd
041741 01 08 00 00 0615*  	ld bc,@end-@cmd
041745 5B DF       0616*  	rst.lil $18
041747 C9          0617*  	ret
041748             0618*  @cmd: ds 8 ; eight bytes for eight bits
041750             0619*  @end:
041750             0620*  
041750             0621*  ; print the binary representation of the 8-bit value in a
041750             0622*  ; in reverse order (lsb first)
041750             0623*  ; destroys a, hl, bc
041750             0624*  printBin8Rev:
041750 06 08       0625*      ld b,8      ; loop counter for 8 bits
041752 21 6D 17 04 0626*      ld hl,@cmd  ; set hl to the low byte of the output string
041756             0627*                  ; (which will be the high bit of the value in a)
041756             0628*  @loop:
041756 0F          0629*      rrca ; put the next lowest bit into carry
041757 38 04       0630*      jr c,@one
041759 36 30       0631*      ld (hl),'0'
04175B 18 02       0632*      jr @next_bit
04175D             0633*  @one:
04175D 36 31       0634*      ld (hl),'1'
04175F             0635*  @next_bit:
04175F 23          0636*      inc hl
041760 10 F4       0637*      djnz @loop
041762             0638*  ; print it
041762 21 6D 17 04 0639*  	ld hl,@cmd
041766 01 08 00 00 0640*  	ld bc,@end-@cmd
04176A 5B DF       0641*  	rst.lil $18
04176C C9          0642*  	ret
04176D             0643*  @cmd: ds 8 ; eight bytes for eight bits
041775             0644*  @end:
041775             0645*  
041775             0646*  ; print registers to screen in hexidecimal format
041775             0647*  ; inputs: none
041775             0648*  ; outputs: values of every register printed to screen
041775             0649*  ;    values of each register in global scratch memory
041775             0650*  ; destroys: nothing
041775             0651*  stepRegistersHex:
041775             0652*  ; store everything in scratch
041775 22 B5 19 04 0653*      ld (uhl),hl
041779 ED 43 B8 19 0654*      ld (ubc),bc
       04          
04177E ED 53 BB 19 0655*      ld (ude),de
       04          
041783 DD 22 BE 19 0656*      ld (uix),ix
       04          
041788 FD 22 C1 19 0657*      ld (uiy),iy
       04          
04178D F5          0658*      push af ; fml
04178E E1          0659*      pop hl  ; thanks, zilog
04178F 22 B2 19 04 0660*      ld (uaf),hl
041793 F5          0661*      push af ; dammit
041794             0662*  
041794             0663*  ; home the cursor
041794             0664*      ; call vdu_home_cursor
041794             0665*  
041794             0666*  ; print each register
041794 21 38 19 04 0667*      ld hl,str_afu
041798 CD 8D 14 04 0668*      call printString
04179C 2A B2 19 04 0669*      ld hl,(uaf)
0417A0 CD AD 14 04 0670*      call printHex24
0417A4 CD A2 14 04 0671*      call printNewLine
0417A8             0672*  
0417A8 21 3D 19 04 0673*      ld hl,str_hlu
0417AC CD 8D 14 04 0674*      call printString
0417B0 2A B5 19 04 0675*      ld hl,(uhl)
0417B4 CD AD 14 04 0676*      call printHex24
0417B8 CD A2 14 04 0677*      call printNewLine
0417BC             0678*  
0417BC 21 42 19 04 0679*      ld hl,str_bcu
0417C0 CD 8D 14 04 0680*      call printString
0417C4 2A B8 19 04 0681*      ld hl,(ubc)
0417C8 CD AD 14 04 0682*      call printHex24
0417CC CD A2 14 04 0683*      call printNewLine
0417D0             0684*  
0417D0 21 47 19 04 0685*      ld hl,str_deu
0417D4 CD 8D 14 04 0686*      call printString
0417D8 2A BB 19 04 0687*      ld hl,(ude)
0417DC CD AD 14 04 0688*      call printHex24
0417E0 CD A2 14 04 0689*      call printNewLine
0417E4             0690*  
0417E4 21 4C 19 04 0691*      ld hl,str_ixu
0417E8 CD 8D 14 04 0692*      call printString
0417EC 2A BE 19 04 0693*      ld hl,(uix)
0417F0 CD AD 14 04 0694*      call printHex24
0417F4 CD A2 14 04 0695*      call printNewLine
0417F8             0696*  
0417F8 21 51 19 04 0697*      ld hl,str_iyu
0417FC CD 8D 14 04 0698*      call printString
041800 2A C1 19 04 0699*      ld hl,(uiy)
041804 CD AD 14 04 0700*      call printHex24
041808 CD A2 14 04 0701*      call printNewLine
04180C             0702*  
04180C             0703*      ; call vsync
04180C             0704*  
04180C CD A2 14 04 0705*      call printNewLine
041810             0706*  
041810             0707*  ; check for right shift key and quit if pressed
041810             0708*  	MOSCALL mos_getkbmap
041810 3E 1E       0001*M 			LD	A, function
041812 5B CF       0002*M 			RST.LIL	08h
041814             0709*  @stayhere:
041814             0710*  ; 7 RightShift
041814 DD CB 00 76 0711*      bit 6,(ix+0)
041818 20 02       0712*      jr nz,@RightShift
04181A 18 F8       0713*      jr @stayhere
04181C             0714*  @RightShift:
04181C DD CB 0E 86 0715*      res 0,(ix+14) ; debounce the key (hopefully)
041820 3E 80       0716*      ld a,%10000000
041822             0717*      ; call multiPurposeDelay
041822             0718*  
041822             0719*  ; restore everything
041822 2A B5 19 04 0720*      ld hl, (uhl)
041826 ED 4B B8 19 0721*      ld bc, (ubc)
       04          
04182B ED 5B BB 19 0722*      ld de, (ude)
       04          
041830 DD 2A BE 19 0723*      ld ix, (uix)
       04          
041835 FD 2A C1 19 0724*      ld iy, (uiy)
       04          
04183A F1          0725*      pop af
04183B             0726*  ; all done
04183B C9          0727*      ret
04183C             0728*  
04183C             0729*  ; print registers to screen in hexidecimal format
04183C             0730*  ; inputs: none
04183C             0731*  ; outputs: values of every register printed to screen
04183C             0732*  ;    values of each register in global scratch memory
04183C             0733*  ; destroys: nothing
04183C             0734*  dumpRegistersHex:
04183C             0735*  ; store everything in scratch
04183C 22 B5 19 04 0736*      ld (uhl),hl
041840 ED 43 B8 19 0737*      ld (ubc),bc
       04          
041845 ED 53 BB 19 0738*      ld (ude),de
       04          
04184A DD 22 BE 19 0739*      ld (uix),ix
       04          
04184F FD 22 C1 19 0740*      ld (uiy),iy
       04          
041854 F5          0741*      push af ; fml
041855 E1          0742*      pop hl  ; thanks, zilog
041856 22 B2 19 04 0743*      ld (uaf),hl
04185A F5          0744*      push af ; dammit
04185B             0745*  
04185B             0746*  ; home the cursor
04185B             0747*      ; call vdu_home_cursor
04185B             0748*      ; call printNewLine
04185B             0749*  
04185B             0750*  ; print each register
04185B 21 38 19 04 0751*      ld hl,str_afu
04185F CD 8D 14 04 0752*      call printString
041863 2A B2 19 04 0753*      ld hl,(uaf)
041867 CD AD 14 04 0754*      call printHex24
04186B             0755*      ; call printNewLine
04186B             0756*  
04186B 21 3D 19 04 0757*      ld hl,str_hlu
04186F CD 8D 14 04 0758*      call printString
041873 2A B5 19 04 0759*      ld hl,(uhl)
041877 CD AD 14 04 0760*      call printHex24
04187B             0761*      ; call printNewLine
04187B             0762*  
04187B 21 42 19 04 0763*      ld hl,str_bcu
04187F CD 8D 14 04 0764*      call printString
041883 2A B8 19 04 0765*      ld hl,(ubc)
041887 CD AD 14 04 0766*      call printHex24
04188B             0767*      ; call printNewLine
04188B             0768*  
04188B 21 47 19 04 0769*      ld hl,str_deu
04188F CD 8D 14 04 0770*      call printString
041893 2A BB 19 04 0771*      ld hl,(ude)
041897 CD AD 14 04 0772*      call printHex24
04189B             0773*      ; call printNewLine
04189B             0774*  
04189B 21 4C 19 04 0775*      ld hl,str_ixu
04189F CD 8D 14 04 0776*      call printString
0418A3 2A BE 19 04 0777*      ld hl,(uix)
0418A7 CD AD 14 04 0778*      call printHex24
0418AB             0779*      ; call printNewLine
0418AB             0780*  
0418AB 21 51 19 04 0781*      ld hl,str_iyu
0418AF CD 8D 14 04 0782*      call printString
0418B3 2A C1 19 04 0783*      ld hl,(uiy)
0418B7 CD AD 14 04 0784*      call printHex24
0418BB             0785*      ; call printNewLine
0418BB             0786*  
0418BB             0787*      ; call vdu_vblank
0418BB             0788*  
0418BB CD A2 14 04 0789*      call printNewLine
0418BF             0790*  ; restore everything
0418BF 2A B5 19 04 0791*      ld hl, (uhl)
0418C3 ED 4B B8 19 0792*      ld bc, (ubc)
       04          
0418C8 ED 5B BB 19 0793*      ld de, (ude)
       04          
0418CD DD 2A BE 19 0794*      ld ix, (uix)
       04          
0418D2 FD 2A C1 19 0795*      ld iy, (uiy)
       04          
0418D7 F1          0796*      pop af
0418D8             0797*  ; all done
0418D8 C9          0798*      ret
0418D9             0799*  
0418D9             0800*  dumpRegistersHexPrime:
0418D9 D9          0801*      exx
0418DA 08          0802*      ex af,af'
0418DB CD 3C 18 04 0803*      call dumpRegistersHex
0418DF 08          0804*      ex af,af'
0418E0 D9          0805*      exx
0418E1 C9          0806*      ret
0418E2             0807*  
0418E2             0808*  ; additionally dump prime registers
0418E2             0809*  ; inputs: none
0418E2             0810*  ; outputs: values of every register printed to screen
0418E2             0811*  ; destroys: nothing
0418E2             0812*  dumpRegistersHexAll:
0418E2 CD 3C 18 04 0813*      call dumpRegistersHex
0418E6 08          0814*      ex af,af'
0418E7 D9          0815*      exx
0418E8 CD 3C 18 04 0816*      call dumpRegistersHex
0418EC 08          0817*      ex af,af'
0418ED D9          0818*      exx
0418EE C9          0819*      ret
0418EF             0820*  
0418EF             0821*  ; print hlu to screen in hexidecimal format
0418EF             0822*  ; inputs: none
0418EF             0823*  ; destroys: nothing
0418EF             0824*  print_hex_hl:
0418EF F5          0825*      push af
0418F0 E5          0826*      push hl
0418F1 21 3D 19 04 0827*      ld hl,str_hlu
0418F5 CD 8D 14 04 0828*      call printString
0418F9 E1          0829*      pop hl
0418FA E5          0830*      push hl
0418FB CD AD 14 04 0831*      call printHex24
0418FF 3E 20       0832*      ld a,' '
041901 5B D7       0833*      rst.lil 10h
041903 E1          0834*      pop hl
041904 F1          0835*      pop af
041905 C9          0836*      ret
041906             0837*  
041906             0838*  ; print bcu to screen in hexidecimal format
041906             0839*  ; inputs: none
041906             0840*  ; destroys: nothing
041906             0841*  print_hex_bc:
041906 F5          0842*      push af
041907 E5          0843*      push hl
041908 C5          0844*      push bc
041909 21 42 19 04 0845*      ld hl,str_bcu
04190D CD 8D 14 04 0846*      call printString
041911 E1          0847*      pop hl
041912 E5          0848*      push hl
041913 CD AD 14 04 0849*      call printHex24
041917 3E 20       0850*      ld a,' '
041919 5B D7       0851*      rst.lil 10h
04191B C1          0852*      pop bc
04191C E1          0853*      pop hl
04191D F1          0854*      pop af
04191E C9          0855*      ret
04191F             0856*  
04191F             0857*  ; print deu to screen in hexidecimal format
04191F             0858*  ; inputs: none
04191F             0859*  ; destroys: nothing
04191F             0860*  print_hex_de:
04191F F5          0861*      push af
041920 E5          0862*      push hl
041921 D5          0863*      push de
041922 21 47 19 04 0864*      ld hl,str_deu
041926 CD 8D 14 04 0865*      call printString
04192A E1          0866*      pop hl
04192B E5          0867*      push hl
04192C CD AD 14 04 0868*      call printHex24
041930 3E 20       0869*      ld a,' '
041932 5B D7       0870*      rst.lil 10h
041934 D1          0871*      pop de
041935 E1          0872*      pop hl
041936 F1          0873*      pop af
041937 C9          0874*      ret
041938             0875*  
041938 20 61 66 3D 0876*  str_afu: db " af=",0
       00          
04193D 20 68 6C 3D 0877*  str_hlu: db " hl=",0
       00          
041942 20 62 63 3D 0878*  str_bcu: db " bc=",0
       00          
041947 20 64 65 3D 0879*  str_deu: db " de=",0
       00          
04194C 20 69 78 3D 0880*  str_ixu: db " ix=",0
       00          
041951 20 69 79 3D 0881*  str_iyu: db " iy=",0
       00          
041956             0882*  
041956             0883*  ; print udeuhl to screen in hexidecimal format
041956             0884*  ; inputs: none
041956             0885*  ; outputs: concatenated hexidecimal udeuhl
041956             0886*  ; destroys: nothing
041956             0887*  dumpUDEUHLHex:
041956             0888*  ; store everything in scratch
041956 22 B5 19 04 0889*      ld (uhl),hl
04195A ED 43 B8 19 0890*      ld (ubc),bc
       04          
04195F ED 53 BB 19 0891*      ld (ude),de
       04          
041964 DD 22 BE 19 0892*      ld (uix),ix
       04          
041969 FD 22 C1 19 0893*      ld (uiy),iy
       04          
04196E F5          0894*      push af
04196F             0895*  
04196F             0896*  ; print each register
04196F             0897*  
04196F 21 A9 19 04 0898*      ld hl,str_udeuhl
041973 CD 8D 14 04 0899*      call printString
041977 2A BB 19 04 0900*      ld hl,(ude)
04197B CD AD 14 04 0901*      call printHex24
04197F 3E 2E       0902*  	ld a,'.'	; print a dot to separate the values
041981 5B D7       0903*  	rst.lil 10h
041983 2A B5 19 04 0904*      ld hl,(uhl)
041987 CD AD 14 04 0905*      call printHex24
04198B CD A2 14 04 0906*      call printNewLine
04198F             0907*  
04198F             0908*  ; restore everything
04198F 2A B5 19 04 0909*      ld hl, (uhl)
041993 ED 4B B8 19 0910*      ld bc, (ubc)
       04          
041998 ED 5B BB 19 0911*      ld de, (ude)
       04          
04199D DD 2A BE 19 0912*      ld ix, (uix)
       04          
0419A2 FD 2A C1 19 0913*      ld iy, (uiy)
       04          
0419A7 F1          0914*      pop af
0419A8             0915*  ; all done
0419A8 C9          0916*      ret
0419A9             0917*  
0419A9 75 64 65 2E 0918*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0419B2             0919*  
0419B2             0920*  ; global scratch memory for registers
0419B2 00 00 00    0921*  uaf: dl 0
0419B5 00 00 00    0922*  uhl: dl 0
0419B8 00 00 00    0923*  ubc: dl 0
0419BB 00 00 00    0924*  ude: dl 0
0419BE 00 00 00    0925*  uix: dl 0
0419C1 00 00 00    0926*  uiy: dl 0
0419C4 00 00 00    0927*  usp: dl 0
0419C7 00 00 00    0928*  upc: dl 0
0419CA             0929*  
0419CA             0930*  ; inputs: whatever is in the flags register
0419CA             0931*  ; outputs: binary representation of flags
0419CA             0932*  ;          with a header so we know which is what
0419CA             0933*  ; destroys: nothing
0419CA             0934*  ; preserves: everything
0419CA             0935*  dumpFlags:
0419CA             0936*  ; first we curse zilog for not giving direct access to flags
0419CA F5          0937*      push af ; this is so we can send it back unharmed
0419CB F5          0938*      push af ; this is so we can pop it to hl
0419CC             0939*  ; store everything in scratch
0419CC 22 B5 19 04 0940*      ld (uhl),hl
0419D0 ED 43 B8 19 0941*      ld (ubc),bc
       04          
0419D5 ED 53 BB 19 0942*      ld (ude),de
       04          
0419DA DD 22 BE 19 0943*      ld (uix),ix
       04          
0419DF FD 22 C1 19 0944*      ld (uiy),iy
       04          
0419E4             0945*  ; next we print the header
0419E4 21 10 1A 04 0946*      ld hl,@header
0419E8 CD 8D 14 04 0947*      call printString
0419EC E1          0948*      pop hl ; flags are now in l
0419ED 7D          0949*      ld a,l ; flags are now in a
0419EE CD 2B 17 04 0950*      call printBin8
0419F2 CD A2 14 04 0951*  	call printNewLine
0419F6             0952*  ; restore everything
0419F6 2A B5 19 04 0953*      ld hl, (uhl)
0419FA ED 4B B8 19 0954*      ld bc, (ubc)
       04          
0419FF ED 5B BB 19 0955*      ld de, (ude)
       04          
041A04 DD 2A BE 19 0956*      ld ix, (uix)
       04          
041A09 FD 2A C1 19 0957*      ld iy, (uiy)
       04          
041A0E F1          0958*      pop af ; send her home the way she came
041A0F C9          0959*      ret
041A10             0960*  ; Bit 7 (S): Sign flag
041A10             0961*  ; Bit 6 (Z): Zero flag
041A10             0962*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
041A10             0963*  ; Bit 4 (H): Half Carry flag
041A10             0964*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
041A10             0965*  ; Bit 2 (PV): Parity/Overflow flag
041A10             0966*  ; Bit 1 (N): Subtract flag
041A10             0967*  ; Bit 0 (C): Carry flag
041A10 53 5A 78 48 0968*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
041A1B             0969*  
041A1B             0970*  ; set all the bits in the flag register
041A1B             0971*  ; more of an academic exercise than anything useful
041A1B             0972*  ; inputs; none
041A1B             0973*  ; outputs; a=0,f=255
041A1B             0974*  ; destroys: flags, hl
041A1B             0975*  ; preserves: a, because why not
041A1B             0976*  setAllFlags:
041A1B 21 FF 00 00 0977*      ld hl,255
041A1F 67          0978*      ld h,a ; four cycles to preserve a is cheap
041A20 E5          0979*      push hl
041A21 F1          0980*      pop af
041A22 C9          0981*      ret
041A23             0982*  
041A23             0983*  ; reset all the bits in the flag register
041A23             0984*  ; unlike its inverse counterpart, this may actually be useful
041A23             0985*  ; inputs; none
041A23             0986*  ; outputs; a=0,f=0
041A23             0987*  ; destroys: flags, hl
041A23             0988*  ; preserves: a, because why not
041A23             0989*  resetAllFlags:
041A23 21 00 00 00 0990*      ld hl,0
041A27 67          0991*      ld h,a ; four cycles to preserve a is cheap
041A28 E5          0992*      push hl
041A29 F1          0993*      pop af
041A2A C9          0994*      ret
041A2B             0995*  
041A2B             0996*  ; wait until user presses a key
041A2B             0997*  ; inputs: none
041A2B             0998*  ; outputs: ascii code of key pressed in a
041A2B             0999*  ; destroys: af,ix
041A2B             1000*  waitKeypress:
041A2B             1001*      MOSCALL mos_getkey
041A2B 3E 00       0001*M 			LD	A, function
041A2D 5B CF       0002*M 			RST.LIL	08h
041A2F C9          1002*      ret
041A30             1003*  
041A30             1004*  ; print bytes from an address to the screen in hexidecimal format
041A30             1005*  ; inputs: hl = address of first byte to print, a = number of bytes to print
041A30             1006*  ; outputs: values of each byte printed to screen separated by spaces
041A30             1007*  ; destroys: nothing
041A30             1008*  dumpMemoryHex:
041A30             1009*  ; save registers to the stack
041A30 C5          1010*      push bc
041A31 E5          1011*      push hl
041A32 F5          1012*      push af
041A33             1013*  
041A33             1014*  ; print the address and separator
041A33 CD AD 14 04 1015*      call printHex24
041A37 3E 3A       1016*      ld a,':'
041A39 5B D7       1017*      rst.lil 10h
041A3B 3E 20       1018*      ld a,' '
041A3D 5B D7       1019*      rst.lil 10h
041A3F             1020*  
041A3F             1021*  ; set b to be our loop counter
041A3F F1          1022*      pop af
041A40 47          1023*      ld b,a
041A41 E1          1024*      pop hl
041A42 E5          1025*      push hl
041A43 F5          1026*      push af
041A44             1027*  @loop:
041A44             1028*  ; print the byte
041A44 7E          1029*      ld a,(hl)
041A45 CD BB 14 04 1030*      call printHex8
041A49             1031*  ; print a space
041A49 3E 20       1032*      ld a,' '
041A4B 5B D7       1033*      rst.lil 10h
041A4D 23          1034*      inc hl
041A4E 10 F4       1035*      djnz @loop
041A50 CD A2 14 04 1036*      call printNewLine
041A54             1037*  
041A54             1038*  ; restore everything
041A54 F1          1039*      pop af
041A55 E1          1040*      pop hl
041A56 C1          1041*      pop bc
041A57             1042*  
041A57             1043*  ; all done
041A57 C9          1044*      ret
041A58             1045*  
041A58             1046*  
041A58             1047*  ; print bytes from an address to the screen in binary format
041A58             1048*  ; inputs: hl = address of first byte to print, a = number of bytes to print
041A58             1049*  ; outputs: values of each byte printed to screen separated by spaces
041A58             1050*  ; destroys: nothing
041A58             1051*  dumpMemoryBin:
041A58             1052*  ; save all registers to the stack
041A58 F5          1053*      push af
041A59 C5          1054*      push bc
041A5A D5          1055*      push de
041A5B E5          1056*      push hl
041A5C DD E5       1057*      push ix
041A5E FD E5       1058*      push iy
041A60             1059*  
041A60             1060*  ; set b to be our loop counter
041A60 47          1061*      ld b,a
041A61             1062*  @loop:
041A61             1063*  ; print the byte
041A61 7E          1064*      ld a,(hl)
041A62 E5          1065*      push hl
041A63 C5          1066*      push bc
041A64 CD 2B 17 04 1067*      call printBin8
041A68 C1          1068*      pop bc
041A69             1069*  ; print a space
041A69 3E 20       1070*      ld a,' '
041A6B 5B D7       1071*      rst.lil 10h
041A6D E1          1072*      pop hl
041A6E 23          1073*      inc hl
041A6F 10 F0       1074*      djnz @loop
041A71 CD A2 14 04 1075*      call printNewLine
041A75             1076*  
041A75             1077*  ; restore everything
041A75 FD E1       1078*      pop iy
041A77 DD E1       1079*      pop ix
041A79 E1          1080*      pop hl
041A7A D1          1081*      pop de
041A7B C1          1082*      pop bc
041A7C F1          1083*      pop af
041A7D             1084*  ; all done
041A7D C9          1085*      ret
041A7E             1086*  
041A7E             1087*  ; print bytes from an address to the screen in binary format
041A7E             1088*  ; with the bits of each byte in reverse order (lsb first)
041A7E             1089*  ; inputs: hl = address of first byte to print, a = number of bytes to print
041A7E             1090*  ; outputs: values of each byte printed to screen separated by spaces
041A7E             1091*  ; destroys: nothing
041A7E             1092*  dumpMemoryBinRev:
041A7E             1093*  ; save all registers to the stack
041A7E F5          1094*      push af
041A7F C5          1095*      push bc
041A80 D5          1096*      push de
041A81 E5          1097*      push hl
041A82 DD E5       1098*      push ix
041A84 FD E5       1099*      push iy
041A86             1100*  
041A86             1101*  ; set b to be our loop counter
041A86 47          1102*      ld b,a
041A87             1103*  @loop:
041A87             1104*  ; print the byte
041A87 7E          1105*      ld a,(hl)
041A88 E5          1106*      push hl
041A89 C5          1107*      push bc
041A8A CD 50 17 04 1108*      call printBin8Rev
041A8E C1          1109*      pop bc
041A8F             1110*  ; print a space
041A8F 3E 20       1111*      ld a,' '
041A91 5B D7       1112*      rst.lil 10h
041A93 E1          1113*      pop hl
041A94 23          1114*      inc hl
041A95 10 F0       1115*      djnz @loop
041A97 CD A2 14 04 1116*      call printNewLine
041A9B             1117*  
041A9B             1118*  ; restore everything
041A9B FD E1       1119*      pop iy
041A9D DD E1       1120*      pop ix
041A9F E1          1121*      pop hl
041AA0 D1          1122*      pop de
041AA1 C1          1123*      pop bc
041AA2 F1          1124*      pop af
041AA3             1125*  ; all done
041AA3 C9          1126*      ret
041AA4             0032       include "vdu.inc"
041AA4             0001*  
041AA4             0002*  ; VDU 30: Home cursor
041AA4             0003*  vdu_home_cursor:
041AA4 3E 1E       0004*      ld a,30
041AA6 5B D7       0005*  	rst.lil $10
041AA8 C9          0006*  	ret
041AA9             0007*  
041AA9             0008*  vdu_cursor_on:
041AA9 21 B4 1A 04 0009*  	ld hl,@cmd
041AAD 01 03 00 00 0010*  	ld bc,@end-@cmd
041AB1 5B DF       0011*  	rst.lil $18
041AB3 C9          0012*  	ret
041AB4             0013*  @cmd:
041AB4 17 01 01    0014*  	db 23,1,1
041AB7             0015*  @end:
041AB7             0016*  
041AB7             0017*  vdu_cursor_off:
041AB7 21 C2 1A 04 0018*  	ld hl,@cmd
041ABB 01 03 00 00 0019*  	ld bc,@end-@cmd
041ABF 5B DF       0020*  	rst.lil $18
041AC1 C9          0021*  	ret
041AC2             0022*  @cmd:
041AC2 17 01 00    0023*  	db 23,1,0
041AC5             0024*  @end:
041AC5             0025*  
041AC5             0026*  ; VDU 5: Write text at graphics cursor
041AC5             0027*  ; inputs: a is the character to write to the screen
041AC5             0028*  ; prerequisites: the graphics cursor at the intended position on screen
041AC5             0029*  ; outputs: see the name of the function
041AC5             0030*  ; destroys: a, hl, bc
041AC5             0031*  vdu_char_to_gfx_cursor:
041AC5 32 D5 1A 04 0032*  	ld (@arg),a
041AC9 21 D4 1A 04 0033*  	ld hl,@cmd
041ACD 01 02 00 00 0034*  	ld bc,@end-@cmd
041AD1 5B DF       0035*  	rst.lil $18
041AD3 C9          0036*  	ret
041AD4 05          0037*  @cmd: db 5
041AD5 00          0038*  @arg: db 0
041AD6             0039*  @end:
041AD6             0040*  ; VDU 9: Move cursor forward one character
041AD6             0041*  vdu_cursor_forward:
041AD6 3E 09       0042*      ld a,9
041AD8 5B D7       0043*  	rst.lil $10
041ADA C9          0044*  	ret
041ADB             0045*  
041ADB             0046*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041ADB             0047*  ; inputs: c=x, b=y 8-bit unsigned integers
041ADB             0048*  vdu_move_cursor:
041ADB ED 43 EC 1A 0049*      ld (@x0),bc
       04          
041AE0 21 EB 1A 04 0050*  	ld hl,@cmd
041AE4 01 03 00 00 0051*  	ld bc,@end-@cmd
041AE8 5B DF       0052*  	rst.lil $18
041AEA C9          0053*  	ret
041AEB 1F          0054*  @cmd: 	db 31
041AEC 00          0055*  @x0:	db 0
041AED 00          0056*  @y0: 	db 0
041AEE 00          0057*  @end: 	db 0 ; padding
041AEF             0058*  
041AEF             0059*  ; VDU 12: Clear text area (CLS)
041AEF             0060*  vdu_cls:
041AEF 3E 0C       0061*      ld a,12
041AF1 5B D7       0062*  	rst.lil $10
041AF3 C9          0063*  	ret
041AF4             0064*  
041AF4             0065*  vdu_flip:
041AF4 21 FF 1A 04 0066*  	ld hl,@cmd
041AF8 01 03 00 00 0067*  	ld bc,@end-@cmd
041AFC 5B DF       0068*  	rst.lil $18
041AFE C9          0069*  	ret
041AFF 17 00 C3    0070*  @cmd: db 23,0,0xC3
041B02             0071*  @end:
041B02             0072*  
041B02             0073*  ; VDU 16: Clear graphics area (CLG)
041B02             0074*  vdu_clg:
041B02 3E 10       0075*      ld a,16
041B04 5B D7       0076*  	rst.lil $10
041B06 C9          0077*  	ret
041B07             0078*  
041B07             0079*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041B07             0080*  ; VDU 23, 7: Scrolling
041B07             0081*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041B07             0082*  ; inputs: a, extent; l, direction; h; speed
041B07             0083*  vdu_scroll_down:
041B07 32 1C 1B 04 0084*  	ld (@extent),a
041B0B 22 1D 1B 04 0085*  	ld (@dir),hl ; implicitly populates @speed
041B0F 21 1A 1B 04 0086*  	ld hl,@cmd
041B13 01 05 00 00 0087*  	ld bc,@end-@cmd
041B17 5B DF       0088*  	rst.lil $18     ;; Sending command to VDP
041B19 C9          0089*  	ret
041B1A 17 07       0090*  @cmd:       db 23,7
041B1C 00          0091*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041B1D 00          0092*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
041B1E 00          0093*  @speed:     db 0x00 ; pixels
041B1F 00          0094*  @end:		db 0x00 ; padding
041B20             0095*  
041B20             0096*  ; COLOUR MODES
041B20             0097*  ; Mode	Effect
041B20             0098*  ; 0	Set on-screen pixel to target colour value
041B20             0099*  ; 1	OR value with the on-screen pixel
041B20             0100*  ; 2	AND value with the on-screen pixel
041B20             0101*  ; 3	XOR value with the on-screen pixel
041B20             0102*  ; 4	Invert the on-screen pixel
041B20             0103*  ; 5	No operation
041B20             0104*  ; 6	AND the inverse of the specified colour with the on-screen pixel
041B20             0105*  ; 7	OR the inverse of the specified colour with the on-screen pixel
041B20             0106*  
041B20             0107*  ; VDU 17, colour: Define text colour (COLOUR)
041B20             0108*  vdu_colour_text:
041B20 32 30 1B 04 0109*  	ld (@arg),a
041B24 21 2F 1B 04 0110*  	ld hl,@cmd
041B28 01 02 00 00 0111*  	ld bc,@end-@cmd
041B2C 5B DF       0112*  	rst.lil $18
041B2E C9          0113*  	ret
041B2F 11          0114*  @cmd: db 17
041B30 00          0115*  @arg: db 0
041B31             0116*  @end:
041B31             0117*  
041B31             0118*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
041B31             0119*  ; inputs: a=mode, c=colour (add 128 to set background colour)
041B31             0120*  vdu_gcol:
041B31 32 46 1B 04 0121*  	ld (@mode),a
041B35 79          0122*      ld a,c
041B36 32 47 1B 04 0123*      ld (@col),a
041B3A 21 45 1B 04 0124*  	ld hl,@cmd
041B3E 01 03 00 00 0125*  	ld bc,@end-@cmd
041B42 5B DF       0126*  	rst.lil $18
041B44 C9          0127*  	ret
041B45 12          0128*  @cmd:  db 18
041B46 00          0129*  @mode: db 0
041B47 00          0130*  @col:  db 0
041B48             0131*  @end:
041B48             0132*  
041B48             0133*  
041B48             0134*  ; VDU 28, left, bottom, right, top: Set text viewport **
041B48             0135*  ; MIND THE LITTLE-ENDIANESS
041B48             0136*  ; inputs: c=left,b=bottom,e=right,d=top
041B48             0137*  ; outputs; nothing
041B48             0138*  ; destroys: a might make it out alive
041B48             0139*  vdu_set_txt_viewport:
041B48 ED 43 5E 1B 0140*      ld (@lb),bc
       04          
041B4D ED 53 60 1B 0141*  	ld (@rt),de
       04          
041B52 21 5D 1B 04 0142*  	ld hl,@cmd
041B56 01 05 00 00 0143*  	ld bc,@end-@cmd
041B5A 5B DF       0144*  	rst.lil $18
041B5C C9          0145*  	ret
041B5D 1C          0146*  @cmd:   db 28 ; set text viewport command
041B5E 00 00       0147*  @lb: 	dw 0x0000 ; set by bc
041B60 00 00       0148*  @rt: 	dw 0x0000 ; set by de
041B62 00          0149*  @end:   db 0x00	  ; padding
041B63             0150*  
041B63             0151*  ; Wait for VBLANK interrupt
041B63             0152*  vdu_vblank:
041B63 DD E5       0153*      PUSH 	IX
041B65             0154*  	MOSCALL	mos_sysvars
041B65 3E 08       0001*M 			LD	A, function
041B67 5B CF       0002*M 			RST.LIL	08h
041B69 DD 7E 00    0155*  	LD	A, (IX + sysvar_time + 0)
041B6C             0156*  @wait:
041B6C DD BE 00    0157*      CP 	A, (IX + sysvar_time + 0)
041B6F 28 FB       0158*      JR	Z, @wait
041B71 DD E1       0159*      POP	IX
041B73 C9          0160*      RET
041B74             0161*  
041B74             0162*  ; VDU 29, x; y;: Set graphics origin
041B74             0163*  ; This command sets the graphics origin.
041B74             0164*  ; The origin is the point on the screen where the coordinates (0,0) are located.
041B74             0165*  ; inputs: bc=x0,de=y0
041B74             0166*  ; outputs; nothing
041B74             0167*  ; destroys: a might make it out alive
041B74             0168*  vdu_set_gfx_origin:
041B74 ED 43 8A 1B 0169*      ld (@x0),bc
       04          
041B79 ED 53 8C 1B 0170*      ld (@y0),de
       04          
041B7E 21 89 1B 04 0171*      ld hl,@cmd
041B82 01 05 00 00 0172*      ld bc,@end-@cmd
041B86 5B DF       0173*      rst.lil $18
041B88 C9          0174*      ret
041B89 1D          0175*  @cmd:   db 29 ; set graphics origin command
041B8A 00 00       0176*  @x0: 	dw 0x0000 ; set by bc
041B8C 00 00       0177*  @y0: 	dw 0x0000 ; set by de
041B8E 00          0178*  @end:   db 0x00	  ; padding
041B8F             0179*  
041B8F             0180*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
041B8F             0181*  ; NOTE: the order of the y-coordinate parameters are inverted
041B8F             0182*  ; 	because we have turned off logical screen scaling
041B8F             0183*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041B8F             0184*  ; outputs; nothing
041B8F             0185*  ; destroys: a might make it out alive
041B8F             0186*  vdu_set_gfx_viewport:
041B8F ED 43 AF 1B 0187*      ld (@x0),bc
       04          
041B94 FD 22 B1 1B 0188*      ld (@y1),iy
       04          
041B99 DD 22 B3 1B 0189*  	ld (@x1),ix
       04          
041B9E ED 53 B5 1B 0190*  	ld (@y0),de
       04          
041BA3 21 AE 1B 04 0191*  	ld hl,@cmd
041BA7 01 09 00 00 0192*  	ld bc,@end-@cmd
041BAB 5B DF       0193*  	rst.lil $18
041BAD C9          0194*  	ret
041BAE 18          0195*  @cmd:   db 24 ; set graphics viewport command
041BAF 00 00       0196*  @x0: 	dw 0x0000 ; set by bc
041BB1 00 00       0197*  @y1: 	dw 0x0000 ; set by iy
041BB3 00 00       0198*  @x1: 	dw 0x0000 ; set by ix
041BB5 00 00       0199*  @y0: 	dw 0x0000 ; set by de
041BB7 00          0200*  @end:   db 0x00	  ; padding
041BB8             0201*  
041BB8             0202*  ; SCREEN MODES
041BB8             0203*  ; ===============================
041BB8             0204*  ; Mode  Horz  Vert  Cols  Refresh
041BB8             0205*  ; ---   ----  ----  ----  -------
041BB8             0206*  ; 11    320   240   2     60hz
041BB8             0207*  ; 139   320   240   2     60hz
041BB8             0208*  ; 23    512   384   2     60hz
041BB8             0209*  ; 151   512   384   2     60hz
041BB8             0210*  ; 6     640   240   2     60hz
041BB8             0211*  ; 134   640   240   2     60hz
041BB8             0212*  ; 2     640   480   2     60hz
041BB8             0213*  ; 130   640   480   2     60hz
041BB8             0214*  ; 17    800   600   2     60hz
041BB8             0215*  ; 145   800   600   2     60hz
041BB8             0216*  ; 18    1024  768   2     60hz
041BB8             0217*  ; 146   1024  768   2     60hz
041BB8             0218*  ; ---   ----  ----  ----  -------
041BB8             0219*  ; 10    320   240   4     60hz
041BB8             0220*  ; 138   320   240   4     60hz
041BB8             0221*  ; 22    512   384   4     60hz
041BB8             0222*  ; 150   512   384   4     60hz
041BB8             0223*  ; 5     640   240   4     60hz
041BB8             0224*  ; 133   640   240   4     60hz
041BB8             0225*  ; 1     640   480   4     60hz
041BB8             0226*  ; 129   640   480   4     60hz
041BB8             0227*  ; 16    800   600   4     60hz
041BB8             0228*  ; 19    1024  768   4     60hz
041BB8             0229*  ; ---   ----  ----  ----  -------
041BB8             0230*  ; 9     320   240   16    60hz
041BB8             0231*  ; 137   320   240   16    60hz
041BB8             0232*  ; 21    512   384   16    60hz
041BB8             0233*  ; 149   512   384   16    60hz
041BB8             0234*  ; 4     640   240   16    60hz
041BB8             0235*  ; 132   640   240   16    60hz
041BB8             0236*  ; 0     640   480   16    60hz
041BB8             0237*  ; 7     n/a   n/a   16    60hz
041BB8             0238*  ; ---   ----  ----  ----  -------
041BB8             0239*  ; 8     320   240   64    60hz
041BB8             0240*  ; 136   320   240   64    60hz
041BB8             0241*  ; 20    512   384   64    60hz
041BB8             0242*  ; 3     640   240   64    60hz
041BB8             0243*  ; ---   ----  ----  ----  -------
041BB8             0244*  vdu_set_screen_mode:
041BB8 32 C8 1B 04 0245*  	ld (@arg),a
041BBC 21 C7 1B 04 0246*  	ld hl,@cmd
041BC0 01 02 00 00 0247*  	ld bc,@end-@cmd
041BC4 5B DF       0248*  	rst.lil $18
041BC6 C9          0249*  	ret
041BC7 16          0250*  @cmd: db 22 ; set screen mode
041BC8 00          0251*  @arg: db 0  ; screen mode parameter
041BC9             0252*  @end:
041BC9             0253*  
041BC9             0254*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041BC9             0255*  ; inputs: a is scaling mode, 1=on, 0=off
041BC9             0256*  ; note: default setting on boot is scaling ON
041BC9             0257*  vdu_set_scaling:
041BC9 32 DB 1B 04 0258*  	ld (@arg),a
041BCD 21 D8 1B 04 0259*  	ld hl,@cmd
041BD1 01 04 00 00 0260*  	ld bc,@end-@cmd
041BD5 5B DF       0261*  	rst.lil $18
041BD7 C9          0262*  	ret
041BD8 17 00 C0    0263*  @cmd: db 23,0,0xC0
041BDB 00          0264*  @arg: db 0  ; scaling on/off
041BDC             0265*  @end:
041BDC             0266*  
041BDC             0267*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041BDC             0268*  ; inputs: hl=bufferId
041BDC             0269*  vdu_buff_select:
041BDC 22 EE 1B 04 0270*  	ld (@bufferId),hl
041BE0 21 EB 1B 04 0271*  	ld hl,@cmd
041BE4 01 05 00 00 0272*  	ld bc,@end-@cmd
041BE8 5B DF       0273*  	rst.lil $18
041BEA C9          0274*  	ret
041BEB 17 1B 20    0275*  @cmd: db 23,27,0x20
041BEE 00 00       0276*  @bufferId: dw 0x0000
041BF0 00          0277*  @end: db 0x00 ; padding
041BF1             0278*  
041BF1             0279*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041BF1             0280*  ; inputs: a=format; bc=width; de=height
041BF1             0281*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041BF1             0282*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041BF1             0283*  ; 0 	RGBA8888 (4-bytes per pixel)
041BF1             0284*  ; 1 	RGBA2222 (1-bytes per pixel)
041BF1             0285*  ; 2 	Mono/Mask (1-bit per pixel)
041BF1             0286*  ; 3 	Reserved for internal use by VDP (“native” format)
041BF1             0287*  vdu_bmp_create:
041BF1 ED 43 0D 1C 0288*      ld (@width),bc
       04          
041BF6 ED 53 0F 1C 0289*      ld (@height),de
       04          
041BFB 32 11 1C 04 0290*      ld (@fmt),a
041BFF 21 0A 1C 04 0291*  	ld hl,@cmd
041C03 01 08 00 00 0292*  	ld bc,@end-@cmd
041C07 5B DF       0293*  	rst.lil $18
041C09 C9          0294*  	ret
041C0A 17 1B 21    0295*  @cmd:       db 23,27,0x21
041C0D 00 00       0296*  @width:     dw 0x0000
041C0F 00 00       0297*  @height:    dw 0x0000
041C11 00          0298*  @fmt:       db 0x00
041C12             0299*  @end:
041C12             0300*  
041C12             0301*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041C12             0302*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041C12             0303*  vdu_load_img_rgba2_to_8:
041C12             0304*  ; backup the target buffer id and image dimensions
041C12 E5          0305*      push hl
041C13 D5          0306*      push de
041C14 C5          0307*      push bc
041C15             0308*  ; load the rgba2 image to working buffer 65534
041C15 21 FE FF 00 0309*      ld hl,65534 ; temporary working buffer id
041C19 CD 1C 1D 04 0310*  	call vdu_load_buffer_from_file
041C1D             0311*  ; restore the image dimensions and target buffer id
041C1D C1          0312*      pop bc
041C1E D1          0313*      pop de
041C1F E1          0314*      pop hl
041C20             0315*  ; fall through to vdu_rgba2_to_8
041C20             0316*  
041C20             0317*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041C20             0318*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041C20             0319*  ; the "expand bitmap" command is:
041C20             0320*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041C20             0321*  ; and then to reverse the byte order to fix endian-ness:
041C20             0322*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041C20             0323*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041C20             0324*  ; VDU 23,27,&20,targetBufferID%;
041C20             0325*  ; VDU 23,27,&21,width%;height%;0
041C20             0326*  ; -------------------------------------------------------------------
041C20             0327*  ; inputs: bc,de image width,height ; hl = targetBufferId
041C20             0328*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041C20             0329*  vdu_rgba2_to_8:
041C20             0330*  ; load the image dimensions and buffer id parameters
041C20 ED 43 7C 1C 0331*      ld (@width),bc
       04          
041C25 ED 53 7E 1C 0332*      ld (@height),de
       04          
041C2A 22 61 1C 04 0333*      ld (@bufferId0),hl
041C2E 22 6E 1C 04 0334*      ld (@bufferId2),hl
041C32 22 77 1C 04 0335*      ld (@bufferId1),hl
041C36             0336*  ; clean up bytes that got stomped on by the ID loads
041C36 3E 48       0337*      ld a,0x48
041C38 32 63 1C 04 0338*      ld (@bufferId0+2),a
041C3C 3E 17       0339*      ld a,23
041C3E 32 79 1C 04 0340*      ld (@bufferId1+2),a
041C42 3E 18       0341*      ld a,24
041C44 32 70 1C 04 0342*      ld (@bufferId2+2),a
041C48 AF          0343*      xor a
041C49 32 80 1C 04 0344*      ld (@height+2),a
041C4D             0345*  ; send the vdu command strings
041C4D 21 58 1C 04 0346*      ld hl,@beg
041C51 01 29 00 00 0347*      ld bc,@end-@beg
041C55 5B DF       0348*      rst.lil $18
041C57 C9          0349*      ret
041C58             0350*  @beg:
041C58             0351*  ; Command 14: Consolidate blocks in a buffer
041C58             0352*  ; VDU 23, 0, &A0, bufferId; 14
041C58 17 00 A0    0353*      db 23,0,0xA0
041C5B FE FF       0354*      dw 65534 ; workingBufferId
041C5D 0E          0355*      db 14 ; consolidate blocks
041C5E             0356*  ; the "expand bitmap" command is:
041C5E             0357*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041C5E 17 00 A0    0358*      db 23,0,0xA0
041C61 00 00       0359*  @bufferId0: dw 0x0000 ; targetBufferId
041C63 48          0360*      db 0x48 ; given as decimal command 72 in the docs
041C64 02          0361*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041C65 FE FF       0362*      dw 65534 ; sourceBufferId
041C67 00 7F BF FF 0363*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041C6B             0364*  ; reverse the byte order to fix endian-ness:
041C6B             0365*  ; Command 24: Reverse the order of data of blocks within a buffer
041C6B             0366*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041C6B             0367*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041C6B 17 00 A0    0368*      db 23,0,0xA0
041C6E 00 00       0369*  @bufferId2:    dw 0x0000 ; targetBufferId
041C70 18          0370*      db 24 ; reverse byte order
041C71 04          0371*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041C72 04 00       0372*      dw 4 ; size (4 bytes)
041C74             0373*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041C74             0374*  ; VDU 23,27,&20,targetBufferID%;
041C74 17 1B 20    0375*      db 23,27,0x20 ; select bitmap
041C77 00 00       0376*  @bufferId1: dw 0x0000 ; targetBufferId
041C79             0377*  ; VDU 23,27,&21,width%;height%;0
041C79 17 1B 21    0378*      db 23,27,0x21 ; create bitmap from buffer
041C7C 00 00       0379*  @width: dw 0x0000
041C7E 00 00       0380*  @height: dw 0x0000
041C80 00          0381*      db 0x00 ; rgba8888 format
041C81             0382*  @end:
041C81             0383*  
041C81             0384*  ; scratch variables
041C81 00 00 00    0385*  bufferId0: dl 0x000000
041C84 00 00 00    0386*  bufferId1: dl 0x000000
041C87             0387*  
041C87             0388*  ; load a vdu buffer from local memory
041C87             0389*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041C87             0390*  vdu_load_buffer:
041C87 ED 43 B0 1C 0391*      ld (@length),bc
       04          
041C8C D5          0392*      push de ; save data pointer
041C8D             0393*  ; send the vdu command string
041C8D 7D          0394*      ld a,l
041C8E 32 AD 1C 04 0395*      ld (@bufferId),a
041C92 7C          0396*      ld a,h
041C93 32 AE 1C 04 0397*      ld (@bufferId+1),a
041C97 21 AA 1C 04 0398*      ld hl,@cmd
041C9B 01 08 00 00 0399*      ld bc,@end-@cmd
041C9F 5B DF       0400*      rst.lil $18
041CA1             0401*  ; send the buffer data
041CA1 E1          0402*      pop hl ; pointer to data
041CA2 ED 4B B0 1C 0403*      ld bc,(@length)
       04          
041CA7 5B DF       0404*      rst.lil $18 ; send it
041CA9 C9          0405*      ret
041CAA             0406*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041CAA 17 00 A0    0407*  @cmd:       db 23,0,0xA0
041CAD 00 00       0408*  @bufferId:	dw 0x0000
041CAF 00          0409*  		    db 0 ; load buffer
041CB0 00 00       0410*  @length:	dw 0x0000
041CB2 00          0411*  @end: db 0 ; padding
041CB3             0412*  
041CB3             0413*  ; clear a buffer
041CB3             0414*  ; inputs: hl = bufferId
041CB3             0415*  vdu_clear_buffer:
041CB3 7D          0416*      ld a,l
041CB4 32 CB 1C 04 0417*      ld (@bufferId),a
041CB8 7C          0418*      ld a,h
041CB9 32 CC 1C 04 0419*      ld (@bufferId+1),a
041CBD 21 C8 1C 04 0420*      ld hl,@cmd
041CC1 01 06 00 00 0421*      ld bc,@end-@cmd
041CC5 5B DF       0422*      rst.lil $18
041CC7 C9          0423*      ret
041CC8 17 00 A0    0424*  @cmd:       db 23,0,0xA0
041CCB 00 00       0425*  @bufferId:	dw 0x0000
041CCD 02          0426*  		    db 2 ; clear buffer
041CCE             0427*  @end:
041CCE             0428*  
041CCE             0429*  vdu_clear_all_buffers:
041CCE             0430*  ; clear all buffers
041CCE 21 D9 1C 04 0431*      ld hl,@beg
041CD2 01 06 00 00 0432*      ld bc,@end-@beg
041CD6 5B DF       0433*      rst.lil $18
041CD8 C9          0434*      ret
041CD9 17 00 A0    0435*  @beg: db 23,0,$A0
041CDC FF FF       0436*        dw -1 ; clear all buffers
041CDE 02          0437*        db 2  ; command 2: clear a buffer
041CDF             0438*  @end:
041CDF             0439*  
041CDF             0440*  ; Command 14: Consolidate blocks in a buffer
041CDF             0441*  vdu_consolidate_buffer:
041CDF             0442*  ; set parameters for vdu call
041CDF 7D          0443*      ld a,l
041CE0 32 F7 1C 04 0444*      ld (@bufferId),a
041CE4 7C          0445*      ld a,h
041CE5 32 F8 1C 04 0446*      ld (@bufferId+1),a
041CE9 21 F4 1C 04 0447*      ld hl,@beg
041CED 01 06 00 00 0448*      ld bc,@end-@beg
041CF1 5B DF       0449*      rst.lil $18
041CF3 C9          0450*      ret
041CF4             0451*  ; VDU 23, 0, &A0, bufferId; 14
041CF4 17 00 A0    0452*  @beg: db 23,0,0xA0
041CF7 00 00       0453*  @bufferId: dw 0x0000
041CF9 0E          0454*             db 14
041CFA             0455*  @end:
041CFA             0456*  
041CFA             0457*  ; load an image file to a buffer and make it a bitmap
041CFA             0458*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041CFA             0459*  vdu_load_img:
041CFA             0460*  ; back up image type and dimension parameters
041CFA 22 81 1C 04 0461*      ld (bufferId0),hl
041CFE F5          0462*      push af
041CFF C5          0463*  	push bc
041D00 D5          0464*  	push de
041D01             0465*  ; load the image
041D01 CD 1C 1D 04 0466*  	call vdu_load_buffer_from_file
041D05             0467*  ; now make it a bitmap
041D05 2A 81 1C 04 0468*      ld hl,(bufferId0)
041D09 CD DF 1C 04 0469*      call vdu_consolidate_buffer
041D0D 2A 81 1C 04 0470*      ld hl,(bufferId0)
041D11 CD DC 1B 04 0471*      call vdu_buff_select
041D15 D1          0472*  	pop de ; image height
041D16 C1          0473*  	pop bc ; image width
041D17 F1          0474*  	pop af ; image type
041D18 C3 F1 1B 04 0475*  	jp vdu_bmp_create ; will return to caller from there
041D1C             0476*  
041D1C             0477*  ; inputs: hl = bufferId; iy = pointer to filename
041D1C             0478*  vdu_load_buffer_from_file:
041D1C 22 81 1C 04 0479*      ld (bufferId0),hl
041D20             0480*  
041D20             0481*  ; clear target buffer
041D20 CD B3 1C 04 0482*      call vdu_clear_buffer
041D24             0483*  
041D24             0484*  ; open the file in read mode
041D24             0485*  ; Open a file
041D24             0486*  ; HLU: Filename
041D24             0487*  ;   C: Mode
041D24             0488*  ; Returns:
041D24             0489*  ;   A: Filehandle, or 0 if couldn't open
041D24 FD E5       0490*  	push iy ; pointer to filename
041D26 E1          0491*  	pop hl
041D27 0E 01       0492*  	ld c,fa_read
041D29             0493*      MOSCALL mos_fopen
041D29 3E 0A       0001*M 			LD	A, function
041D2B 5B CF       0002*M 			RST.LIL	08h
041D2D 32 68 1D 04 0494*      ld (@filehandle),a
041D31             0495*  
041D31             0496*  @read_file:
041D31             0497*  ; Read a block of data from a file
041D31             0498*  ;   C: Filehandle
041D31             0499*  ; HLU: Pointer to where to write the data to
041D31             0500*  ; DEU: Number of bytes to read
041D31             0501*  ; Returns:
041D31             0502*  ; DEU: Number of bytes read
041D31 3A 68 1D 04 0503*      ld a,(@filehandle)
041D35 4F          0504*      ld c,a
041D36 21 00 E0 B7 0505*      ld hl,filedata
041D3A 11 00 20 00 0506*      ld de,8192 ; max we can read into onboard sram at one time
041D3E             0507*      MOSCALL mos_fread
041D3E 3E 1A       0001*M 			LD	A, function
041D40 5B CF       0002*M 			RST.LIL	08h
041D42             0508*  
041D42             0509*  ; test de for zero bytes read
041D42 21 00 00 00 0510*      ld hl,0
041D46 AF          0511*      xor a ; clear carry
041D47 ED 52       0512*      sbc hl,de
041D49 CA 5F 1D 04 0513*      jp z,@close_file
041D4D             0514*  
041D4D             0515*  ; load a vdu buffer from local memory
041D4D             0516*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041D4D 2A 81 1C 04 0517*      ld hl,(bufferId0)
041D51 D5          0518*      push de ; chunksize
041D52 C1          0519*      pop bc
041D53 11 00 E0 B7 0520*      ld de,filedata
041D57 CD 87 1C 04 0521*      call vdu_load_buffer
041D5B             0522*  
041D5B             0523*  ; read the next block
041D5B C3 31 1D 04 0524*      jp @read_file
041D5F             0525*  
041D5F             0526*  ; close the file
041D5F             0527*  @close_file:
041D5F 3A 68 1D 04 0528*      ld a,(@filehandle)
041D63             0529*      MOSCALL mos_fclose
041D63 3E 0B       0001*M 			LD	A, function
041D65 5B CF       0002*M 			RST.LIL	08h
041D67 C9          0530*      ret ; vdu_load_buffer_from_file
041D68             0531*  
041D68 00          0532*  @filehandle: db 0 ; file handle
041D69 00 00 00    0533*  @fil: dl 0 ; pointer to FIL struct
041D6C             0534*  
041D6C 00 00 00    0535*  @chunkpointer: dl 0 ; pointer to current chunk
041D6F             0536*  
041D6F             0537*  ; File information structure (FILINFO)
041D6F             0538*  @filinfo:
041D6F 00 00 00 00 0539*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041D73 00 00       0540*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041D75 00 00       0541*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041D77 00          0542*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041D78 00 00 00 00 0543*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041D85 00 00 00 00 0544*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041E85             0033       include "vdu_plot.inc"
041E85             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041E85             0002*  ; PLOT code 	(Decimal) 	Effect
041E85             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
041E85             0004*  plot_sl_both: equ 0x00
041E85             0005*  
041E85             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
041E85             0007*  plot_sl_first: equ 0x08
041E85             0008*  
041E85             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
041E85             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
041E85             0011*  
041E85             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
041E85             0013*  plot_sl_last: equ 0x20
041E85             0014*  
041E85             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
041E85             0016*  plot_sl_none: equ 0x28
041E85             0017*  
041E85             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
041E85             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
041E85             0020*  
041E85             0021*  ; &40-&47 	64-71 	Point plot
041E85             0022*  plot_pt: equ 0x40
041E85             0023*  
041E85             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
041E85             0025*  plot_lf_lr_non_bg: equ 0x48
041E85             0026*  
041E85             0027*  ; &50-&57 	80-87 	Triangle fill
041E85             0028*  plot_tf: equ 0x50
041E85             0029*  
041E85             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
041E85             0031*  plot_lf_r_bg: equ 0x58
041E85             0032*  
041E85             0033*  ; &60-&67 	96-103 	Rectangle fill
041E85             0034*  plot_rf: equ 0x60
041E85             0035*  
041E85             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
041E85             0037*  plot_lf_lr_fg: equ 0x60
041E85             0038*  
041E85             0039*  ; &70-&77 	112-119 	Parallelogram fill
041E85             0040*  plot_pf: equ 0x70
041E85             0041*  
041E85             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
041E85             0043*  plot_lf_r_non_fg: equ 0x78
041E85             0044*  
041E85             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
041E85             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
041E85             0047*  
041E85             0048*  ; &90-&97 	144-151 	Circle outline
041E85             0049*  plot_co: equ 0x90
041E85             0050*  
041E85             0051*  ; &98-&9F 	152-159 	Circle fill
041E85             0052*  plot_cf: equ 0x98
041E85             0053*  
041E85             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
041E85             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
041E85             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
041E85             0057*  
041E85             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
041E85             0059*  plot_rcm: equ 0xB8
041E85             0060*  
041E85             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
041E85             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
041E85             0063*  ; &D0-&D7 	208-215 	Not defined
041E85             0064*  ; &D8-&DF 	216-223 	Not defined
041E85             0065*  ; &E0-&E7 	224-231 	Not defined
041E85             0066*  
041E85             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
041E85             0068*  plot_bmp: equ 0xE8
041E85             0069*  
041E85             0070*  ; &F0-&F7 	240-247 	Not defined
041E85             0071*  ; &F8-&FF 	248-255 	Not defined
041E85             0072*  
041E85             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
041E85             0074*  ; Agon Console8 VDP 2.2.0
041E85             0075*  
041E85             0076*  ; Within each group of eight plot codes, the effects are as follows:
041E85             0077*  ; Plot code 	Effect
041E85             0078*  ; 0 	Move relative
041E85             0079*  mv_rel: equ 0
041E85             0080*  
041E85             0081*  ; 1 	Plot relative in current foreground colour
041E85             0082*  dr_rel_fg: equ 1
041E85             0083*  
041E85             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
041E85             0085*  ; 3 	Plot relative in current background colour
041E85             0086*  dr_rel_bg: equ 3
041E85             0087*  
041E85             0088*  ; 4 	Move absolute
041E85             0089*  mv_abs: equ 4
041E85             0090*  
041E85             0091*  ; 5 	Plot absolute in current foreground colour
041E85             0092*  dr_abs_fg: equ 5
041E85             0093*  
041E85             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
041E85             0095*  ; 7 	Plot absolute in current background colour
041E85             0096*  dr_abs_bg: equ 7
041E85             0097*  
041E85             0098*  ; Codes 0-3 use the position data provided as part of the command
041E85             0099*  ; as a relative position, adding the position given to the current
041E85             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
041E85             0101*  ; as part of the command as an absolute position, setting the current
041E85             0102*  ; graphical cursor position to the position given.
041E85             0103*  
041E85             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
041E85             0105*  ; current pixel colour. These operations cannot currently be supported
041E85             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
041E85             0107*  ; supported. Support for these codes may be added in a future version
041E85             0108*  ; of the VDP firmware.
041E85             0109*  
041E85             0110*  ; 16 colour palette constants
041E85             0111*  c_black: equ 0
041E85             0112*  c_red_dk: equ 1
041E85             0113*  c_green_dk: equ 2
041E85             0114*  c_yellow_dk: equ 3
041E85             0115*  c_blue_dk: equ 4
041E85             0116*  c_magenta_dk: equ 5
041E85             0117*  c_cyan_dk: equ 6
041E85             0118*  c_grey: equ 7
041E85             0119*  c_grey_dk: equ 8
041E85             0120*  c_red: equ 9
041E85             0121*  c_green: equ 10
041E85             0122*  c_yellow: equ 11
041E85             0123*  c_blue: equ 12
041E85             0124*  c_magenta: equ 13
041E85             0125*  c_cyan: equ 14
041E85             0126*  c_white: equ 15
041E85             0127*  
041E85             0128*  ; VDU 25, mode, x; y;: PLOT command
041E85             0129*  ; inputs: a=mode, bc=x0, de=y0
041E85             0130*  vdu_plot:
041E85 32 9F 1E 04 0131*      ld (@mode),a
041E89 ED 43 A0 1E 0132*      ld (@x0),bc
       04          
041E8E ED 53 A2 1E 0133*      ld (@y0),de
       04          
041E93 21 9E 1E 04 0134*  	ld hl,@cmd
041E97 01 06 00 00 0135*  	ld bc,@end-@cmd
041E9B 5B DF       0136*  	rst.lil $18
041E9D C9          0137*  	ret
041E9E 19          0138*  @cmd:   db 25
041E9F 00          0139*  @mode:  db 0
041EA0 00 00       0140*  @x0: 	dw 0
041EA2 00 00       0141*  @y0: 	dw 0
041EA4 00          0142*  @end:   db 0 ; extra byte to soak up deu
041EA5             0143*  
041EA5             0144*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041EA5             0145*  ; &E8-&EF 	232-239 	Bitmap plot §
041EA5             0146*  ; VDU 25, mode, x; y;: PLOT command
041EA5             0147*  ; inputs: bc=x0, de=y0
041EA5             0148*  ; prerequisites: vdu_buff_select
041EA5             0149*  vdu_plot_bmp:
041EA5 ED 43 BC 1E 0150*      ld (@x0),bc
       04          
041EAA ED 53 BE 1E 0151*      ld (@y0),de
       04          
041EAF 21 BA 1E 04 0152*  	ld hl,@cmd
041EB3 01 06 00 00 0153*  	ld bc,@end-@cmd
041EB7 5B DF       0154*  	rst.lil $18
041EB9 C9          0155*  	ret
041EBA 19          0156*  @cmd:   db 25
041EBB ED          0157*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
041EBC 00 00       0158*  @x0: 	dw 0x0000
041EBE 00 00       0159*  @y0: 	dw 0x0000
041EC0 00          0160*  @end:   db 0x00 ; padding
041EC1             0161*  
041EC1             0162*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041EC1             0163*  ; &E8-&EF 	232-239 	Bitmap plot §
041EC1             0164*  ; VDU 25, mode, x; y;: PLOT command
041EC1             0165*  ; inputs: bc=x0, de=y0
041EC1             0166*  ; USING 16.8 FIXED POINT COORDINATES
041EC1             0167*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
041EC1             0168*  ;   the fractional portiion of the inputs are truncated
041EC1             0169*  ;   leaving only the 16-bit integer portion
041EC1             0170*  ; prerequisites: vdu_buff_select
041EC1             0171*  vdu_plot_bmp168:
041EC1             0172*  ; populate in the reverse of normal to keep the
041EC1             0173*  ; inputs from stomping on each other
041EC1 ED 53 DF 1E 0174*      ld (@y0-1),de
       04          
041EC6 ED 43 DD 1E 0175*      ld (@x0-1),bc
       04          
041ECB 3E ED       0176*      ld a,plot_bmp+dr_abs_fg ; 0xED
041ECD 32 DD 1E 04 0177*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
041ED1 21 DC 1E 04 0178*  	ld hl,@cmd
041ED5 01 06 00 00 0179*  	ld bc,@end-@cmd
041ED9 5B DF       0180*  	rst.lil $18
041EDB C9          0181*  	ret
041EDC 19          0182*  @cmd:   db 25
041EDD ED          0183*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
041EDE 00 00       0184*  @x0: 	dw 0x0000
041EE0 00 00       0185*  @y0: 	dw 0x0000
041EE2             0186*  @end:  ; no padding required b/c we shifted de right
041EE2             0187*  
041EE2             0188*  ; draw a filled rectangle
041EE2             0189*  vdu_plot_rf:
041EE2 ED 43 09 1F 0190*      ld (@x0),bc
       04          
041EE7 ED 53 0B 1F 0191*      ld (@y0),de
       04          
041EEC DD 22 0F 1F 0192*      ld (@x1),ix
       04          
041EF1 FD 22 11 1F 0193*      ld (@y1),iy
       04          
041EF6 3E 19       0194*      ld a,25 ; we have to reload the 2nd plot command
041EF8 32 0D 1F 04 0195*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041EFC 21 07 1F 04 0196*  	ld hl,@cmd0
041F00 01 0C 00 00 0197*  	ld bc,@end-@cmd0
041F04 5B DF       0198*  	rst.lil $18
041F06 C9          0199*      ret
041F07 19          0200*  @cmd0:  db 25 ; plot
041F08 04          0201*  @arg0:  db plot_sl_both+mv_abs
041F09 00 00       0202*  @x0:    dw 0x0000
041F0B 00 00       0203*  @y0:    dw 0x0000
041F0D 19          0204*  @cmd1:  db 25 ; plot
041F0E 65          0205*  @arg1:  db plot_rf+dr_abs_fg
041F0F 00 00       0206*  @x1:    dw 0x0000
041F11 00 00       0207*  @y1:    dw 0x0000
041F13 00          0208*  @end:   db 0x00 ; padding
041F14             0209*  
041F14             0210*  ; draw a filled circle
041F14             0211*  vdu_plot_cf:
041F14 ED 43 3B 1F 0212*      ld (@x0),bc
       04          
041F19 ED 53 3D 1F 0213*      ld (@y0),de
       04          
041F1E DD 22 41 1F 0214*      ld (@x1),ix
       04          
041F23 FD 22 43 1F 0215*      ld (@y1),iy
       04          
041F28 3E 19       0216*      ld a,25 ; we have to reload the 2nd plot command
041F2A 32 3F 1F 04 0217*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041F2E 21 39 1F 04 0218*  	ld hl,@cmd0
041F32 01 0C 00 00 0219*  	ld bc,@end-@cmd0
041F36 5B DF       0220*  	rst.lil $18
041F38 C9          0221*      ret
041F39 19          0222*  @cmd0:  db 25 ; plot
041F3A 04          0223*  @arg0:  db plot_sl_both+mv_abs
041F3B 00 00       0224*  @x0:    dw 0x0000
041F3D 00 00       0225*  @y0:    dw 0x0000
041F3F 19          0226*  @cmd1:  db 25 ; plot
041F40 9D          0227*  @arg1:  db plot_cf+dr_abs_fg
041F41 00 00       0228*  @x1:    dw 0x0000
041F43 00 00       0229*  @y1:    dw 0x0000
041F45 00          0230*  @end:   db 0x00 ; padding
041F46             0034   	include "vdu_sprites.inc"
041F46             0001*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041F46             0002*  ; the VDP can support up to 256 sprites. They must be defined
041F46             0003*  ; contiguously, and so the first sprite is sprite 0.
041F46             0004*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041F46             0005*  ; Once a selection of sprites have been defined, you can activate
041F46             0006*  ; them using the VDU 23, 27, 7, n command, where n is the number
041F46             0007*  ; of sprites to activate. This will activate the first n sprites,
041F46             0008*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041F46             0009*  
041F46             0010*  ; A single sprite can have multiple "frames", referring to
041F46             0011*  ; different bitmaps.
041F46             0012*  ; (These bitmaps do not need to be the same size.)
041F46             0013*  ; This allows a sprite to include an animation sequence,
041F46             0014*  ; which can be stepped through one frame at a time, or picked
041F46             0015*  ; in any order.
041F46             0016*  
041F46             0017*  ; Any format of bitmap can be used as a sprite frame. It should
041F46             0018*  ; be noted however that "native" format bitmaps are not
041F46             0019*  ; recommended for use as sprite frames, as they cannot get
041F46             0020*  ; erased from the screen. (As noted above, the "native" bitmap
041F46             0021*  ; format is not really intended for general use.) This is part
041F46             0022*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041F46             0023*  ; screen are now stored in RGBA2222 format.
041F46             0024*  
041F46             0025*  ; An "active" sprite can be hidden, so it will stop being drawn,
041F46             0026*  ; and then later shown again.
041F46             0027*  
041F46             0028*  ; Moving sprites around the screen is done by changing the
041F46             0029*  ; position of the sprite. This can be done either by setting
041F46             0030*  ; the absolute position of the sprite, or by moving the sprite
041F46             0031*  ; by a given number of pixels. (Sprites are positioned using
041F46             0032*  ; pixel coordinates, and not by the logical OS coordinate system.)
041F46             0033*  ; In the current sprite system, sprites will not update their
041F46             0034*  ; position on-screen until either another drawing operation is
041F46             0035*  ; performed or an explicit VDU 23, 27, 15 command is performed.
041F46             0036*  
041F46             0037*  ; VDU 23, 27, 4, n: Select sprite n
041F46             0038*  ; inputs: a is the 8-bit sprite id
041F46             0039*  vdu_sprite_select:
041F46 32 58 1F 04 0040*      ld (@sprite),a
041F4A 21 55 1F 04 0041*      ld hl,@cmd
041F4E 01 04 00 00 0042*      ld bc,@end-@cmd
041F52 5B DF       0043*      rst.lil $18
041F54 C9          0044*      ret
041F55 17 1B 04    0045*  @cmd:    db 23,27,4
041F58 00          0046*  @sprite: db 0x00
041F59             0047*  @end:
041F59             0048*  
041F59             0049*  ; VDU 23, 27, 5: Clear frames in current sprite
041F59             0050*  ; inputs: none
041F59             0051*  ; prerequisites: vdu_sprite_select
041F59             0052*  vdu_sprite_clear_frames:
041F59 21 64 1F 04 0053*      ld hl,@cmd
041F5D 01 03 00 00 0054*      ld bc,@end-@cmd
041F61 5B DF       0055*      rst.lil $18
041F63 C9          0056*      ret
041F64 17 1B 05    0057*  @cmd: db 23,27,5
041F67             0058*  @end:
041F67             0059*  
041F67             0060*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
041F67             0061*  ; inputs: a is the 8-bit bitmap number
041F67             0062*  ; prerequisites: vdu_sprite_select
041F67             0063*  vdu_sprite_add_bmp:
041F67 32 79 1F 04 0064*      ld (@bmp),a
041F6B 21 76 1F 04 0065*      ld hl,@cmd
041F6F 01 04 00 00 0066*      ld bc,@end-@cmd
041F73 5B DF       0067*      rst.lil $18
041F75 C9          0068*      ret
041F76 17 1B 06    0069*  @cmd: db 23,27,6
041F79 00          0070*  @bmp: db 0x00
041F7A             0071*  @end:
041F7A             0072*  
041F7A             0073*  ; VDU 23, 27, 7, n: Activate n sprites
041F7A             0074*  ; inputs: a is the number of sprites to activate
041F7A             0075*  ; prerequisites: each sprite activated must have at least one frame attached to it
041F7A             0076*  vdu_sprite_activate:
041F7A 32 8C 1F 04 0077*      ld (@num),a
041F7E 21 89 1F 04 0078*      ld hl,@cmd
041F82 01 04 00 00 0079*      ld bc,@end-@cmd
041F86 5B DF       0080*      rst.lil $18
041F88 C9          0081*      ret
041F89 17 1B 07    0082*  @cmd: db 23,27,7
041F8C 00          0083*  @num: db 0x00
041F8D             0084*  @end:
041F8D             0085*  
041F8D             0086*  ; VDU 23, 27, 8: Select next frame of current sprite
041F8D             0087*  ; inputs: none
041F8D             0088*  ; prerequisites: vdu_sprite_select
041F8D             0089*  vdu_sprite_next_frame:
041F8D 21 98 1F 04 0090*      ld hl,@cmd
041F91 01 03 00 00 0091*      ld bc,@end-@cmd
041F95 5B DF       0092*      rst.lil $18
041F97 C9          0093*      ret
041F98 17 1B 08    0094*  @cmd: db 23,27,8
041F9B             0095*  @end:
041F9B             0096*  
041F9B             0097*  ; VDU 23, 27, 9: Select previous frame of current sprite
041F9B             0098*  ; inputs: none
041F9B             0099*  ; prerequisites: vdu_sprite_select
041F9B             0100*  vdu_sprite_prev_frame:
041F9B 21 A6 1F 04 0101*      ld hl,@cmd
041F9F 01 03 00 00 0102*      ld bc,@end-@cmd
041FA3 5B DF       0103*      rst.lil $18
041FA5 C9          0104*      ret
041FA6 17 1B 09    0105*  @cmd: db 23,27,9
041FA9             0106*  @end:
041FA9             0107*  
041FA9             0108*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
041FA9             0109*  ; inputs: a is frame number to select
041FA9             0110*  ; prerequisites: vdu_sprite_select
041FA9             0111*  vdu_sprite_select_frame:
041FA9 32 BB 1F 04 0112*      ld (@frame),a
041FAD 21 B8 1F 04 0113*      ld hl,@cmd
041FB1 01 04 00 00 0114*      ld bc,@end-@cmd
041FB5 5B DF       0115*      rst.lil $18
041FB7 C9          0116*      ret
041FB8 17 1B 0A    0117*  @cmd:    db 23,27,10
041FBB 00          0118*  @frame:  db 0x00
041FBC             0119*  @end:
041FBC             0120*  
041FBC             0121*  ; VDU 23, 27, 11: Show current sprite
041FBC             0122*  ; inputs: none
041FBC             0123*  ; prerequisites: vdu_sprite_select
041FBC             0124*  vdu_sprite_show:
041FBC 21 C7 1F 04 0125*      ld hl,@cmd
041FC0 01 03 00 00 0126*      ld bc,@end-@cmd
041FC4 5B DF       0127*      rst.lil $18
041FC6 C9          0128*      ret
041FC7 17 1B 0B    0129*  @cmd: db 23,27,11
041FCA             0130*  @end:
041FCA             0131*  
041FCA             0132*  ; VDU 23, 27, 12: Hide current sprite
041FCA             0133*  ; inputs: none
041FCA             0134*  ; prerequisites: vdu_sprite_select
041FCA             0135*  vdu_sprite_hide:
041FCA 21 D5 1F 04 0136*      ld hl,@cmd
041FCE 01 03 00 00 0137*      ld bc,@end-@cmd
041FD2 5B DF       0138*      rst.lil $18
041FD4 C9          0139*      ret
041FD5 17 1B 0C    0140*  @cmd: db 23,27,12
041FD8             0141*  @end:
041FD8             0142*  
041FD8             0143*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041FD8             0144*  ; inputs: bc is x coordinate, de is y coordinate
041FD8             0145*  ; prerequisites: vdu_sprite_select
041FD8             0146*  vdu_sprite_move_abs:
041FD8 ED 43 F0 1F 0147*      ld (@xpos),bc
       04          
041FDD ED 53 F2 1F 0148*      ld (@ypos),de
       04          
041FE2 21 ED 1F 04 0149*      ld hl,@cmd
041FE6 01 07 00 00 0150*      ld bc,@end-@cmd
041FEA 5B DF       0151*      rst.lil $18
041FEC C9          0152*      ret
041FED 17 1B 0D    0153*  @cmd:  db 23,27,13
041FF0 00 00       0154*  @xpos: dw 0x0000
041FF2 00 00       0155*  @ypos: dw 0x0000
041FF4 00          0156*  @end:  db 0x00 ; padding
041FF5             0157*  
041FF5             0158*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041FF5             0159*  ; inputs: bc is x coordinate, de is y coordinate
041FF5             0160*  ; prerequisites: vdu_sprite_select
041FF5             0161*  vdu_sprite_move_rel:
041FF5 ED 43 0D 20 0162*      ld (@dx),bc
       04          
041FFA ED 53 0F 20 0163*      ld (@dy),de
       04          
041FFF 21 0A 20 04 0164*      ld hl,@cmd
042003 01 07 00 00 0165*      ld bc,@end-@cmd
042007 5B DF       0166*      rst.lil $18
042009 C9          0167*      ret
04200A 17 1B 0E    0168*  @cmd: db 23,27,14
04200D 00 00       0169*  @dx:  dw 0x0000
04200F 00 00       0170*  @dy:  dw 0x0000
042011 00          0171*  @end: db 0x00 ; padding
042012             0172*  
042012             0173*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042012             0174*  ; USING 16.8 FIXED POINT COORDINATES
042012             0175*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
042012             0176*  ;   the fractional portiion of the inputs are truncated
042012             0177*  ;   leaving only the 16-bit integer portion
042012             0178*  ; prerequisites: vdu_sprite_select
042012             0179*  vdu_sprite_move_abs168:
042012             0180*  ; offset inputs by the gfx origin
042012             0181*  ; y coordinate
042012 21 00 00 00 0182*      ld hl,origin_top*256
042016 19          0183*      add hl,de
042017 22 39 20 04 0184*      ld (@ypos-1),hl
04201B             0185*  ; x coordinate
04201B 21 00 80 00 0186*      ld hl,origin_left*256
04201F 09          0187*      add hl,bc
042020 22 37 20 04 0188*      ld (@xpos-1),hl
042024             0189*  ; prepare vdu command
042024 3E 0D       0190*      ld a,13       ; restore the final byte of the command
042026 32 37 20 04 0191*      ld (@cmd+2),a ; string that got stomped on by bcu
04202A 21 35 20 04 0192*      ld hl,@cmd
04202E 01 07 00 00 0193*      ld bc,@end-@cmd
042032 5B DF       0194*      rst.lil $18
042034 C9          0195*      ret
042035 17 1B 0D    0196*  @cmd:  db 23,27,13
042038 00 00       0197*  @xpos: dw 0x0000
04203A 00 00       0198*  @ypos: dw 0x0000
04203C             0199*  @end:  ; no padding required b/c we shifted de right
04203C             0200*  
04203C             0201*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04203C             0202*  ; USING 16.8 FIXED POINT COORDINATES
04203C             0203*  ; inputs: ub.c is dx, ud.e is dy
04203C             0204*  ;   the fractional portiion of the inputs are truncated
04203C             0205*  ;   leaving only the 16-bit integer portion
04203C             0206*  ; prerequisites: vdu_sprite_select
04203C             0207*  vdu_sprite_move_rel168:
04203C             0208*  ; populate in the reverse of normal to keep the
04203C             0209*  ; inputs from stomping on each other
04203C ED 53 5B 20 0210*      ld (@dy-1),de
       04          
042041 ED 43 59 20 0211*      ld (@dx-1),bc
       04          
042046 3E 0E       0212*      ld a,14       ; restore the final byte of the command
042048 32 59 20 04 0213*      ld (@cmd+2),a ; string that got stomped on by bcu
04204C 21 57 20 04 0214*      ld hl,@cmd
042050 01 07 00 00 0215*      ld bc,@end-@cmd
042054 5B DF       0216*      rst.lil $18
042056 C9          0217*      ret
042057 17 1B 0E    0218*  @cmd:  db 23,27,14
04205A 00 00       0219*  @dx: dw 0x0000
04205C 00 00       0220*  @dy: dw 0x0000
04205E             0221*  @end:  ; no padding required b/c we shifted de right
04205E             0222*  
04205E             0223*  ; VDU 23, 27, 15: Update the sprites in the GPU
04205E             0224*  ; inputs: none
04205E             0225*  vdu_sprite_update:
04205E 21 69 20 04 0226*      ld hl,@cmd
042062 01 03 00 00 0227*      ld bc,@end-@cmd
042066 5B DF       0228*      rst.lil $18
042068 C9          0229*      ret
042069 17 1B 0F    0230*  @cmd: db 23,27,15
04206C             0231*  @end:
04206C             0232*  
04206C             0233*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04206C             0234*  ; inputs: none
04206C             0235*  vdu_sprite_bmp_reset:
04206C 21 77 20 04 0236*      ld hl,@cmd
042070 01 03 00 00 0237*      ld bc,@end-@cmd
042074 5B DF       0238*      rst.lil $18
042076 C9          0239*      ret
042077 17 1B 10    0240*  @cmd: db 23,27,16
04207A             0241*  @end:
04207A             0242*  
04207A             0243*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04207A             0244*  ; inputs: none
04207A             0245*  vdu_sprite_reset:
04207A 21 85 20 04 0246*      ld hl,@cmd
04207E 01 03 00 00 0247*      ld bc,@end-@cmd
042082 5B DF       0248*      rst.lil $18
042084 C9          0249*      ret
042085 17 1B 11    0250*  @cmd: db 23,27,17
042088             0251*  @end:
042088             0252*  
042088             0253*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042088             0254*  ; inputs: a is the GCOL paint mode
042088             0255*  ; prerequisites: vdu_sprite_select
042088             0256*  vdu_sprite_set_gcol:
042088 32 9A 20 04 0257*      ld (@mode),a
04208C 21 97 20 04 0258*      ld hl,@cmd
042090 01 04 00 00 0259*      ld bc,@end-@cmd
042094 5B DF       0260*      rst.lil $18
042096 C9          0261*      ret
042097 17 1B 12    0262*  @cmd:  db 23,27,18
04209A 00          0263*  @mode: db 0x00
04209B             0264*  @end:
04209B             0265*  
04209B             0266*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04209B             0267*  ; inputs: hl=bufferId
04209B             0268*  ; prerequisites: vdu_sprite_select
04209B             0269*  vdu_sprite_add_buff:
04209B 22 AD 20 04 0270*      ld (@bufferId),hl
04209F 21 AA 20 04 0271*      ld hl,@cmd
0420A3 01 05 00 00 0272*      ld bc,@end-@cmd
0420A7 5B DF       0273*      rst.lil $18
0420A9 C9          0274*      ret
0420AA 17 1B 26    0275*  @cmd:      db 23,27,0x26
0420AD 00 00       0276*  @bufferId: dw 0x0000
0420AF 00          0277*  @end:      db 0x00 ; padding
0420B0             0035   	include "maths.inc"
0420B0             0001*  ; test the sign of HL
0420B0             0002*  ; inputs: HL obviously
0420B0             0003*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
0420B0             0004*  ; destroys: flags
0420B0             0005*      MACRO sign_hlu
0420B0             0006*          add hl,de
0420B0             0007*          or a
0420B0             0008*          sbc hl,de
0420B0             0009*      ENDMACRO
0420B0             0010*  
0420B0             0011*  
0420B0             0012*  ;------------------------------------------------------------------------
0420B0             0013*  ; Scratch area for calculations
0420B0             0014*  ;------------------------------------------------------------------------
0420B0 00 00 00    0015*  scratch1:	dw24	0	;bit manipulation buffer 1
0420B3 00 00 00    0016*  scratch2:	dw24	0	;bit manipulation buffer 2
0420B6             0017*  
0420B6             0018*  ; absolute value of hlu
0420B6             0019*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
0420B6             0020*  ;         s1,z0,pv0,n1,c0 if hlu was negative
0420B6             0021*  ;         s0,z1,pv0,n1,c0 if hlu was zero
0420B6             0022*  ;         s0,z0,pv0,n1,c0 if hlu was positive
0420B6             0023*  ; destroys: a
0420B6             0024*  hlu_abs:
0420B6 19          0025*      add hl,de
0420B7 B7          0026*      or a
0420B8 ED 52       0027*      sbc hl,de
0420BA FA BF 20 04 0028*      jp m,@is_neg
0420BE C9          0029*      ret         ; hlu is positive or zero so we're done
0420BF             0030*  @is_neg:
0420BF F5          0031*      push af     ; otherwise, save current flags for return
0420C0 CD C6 20 04 0032*      call neg_hlu ; negate hlu
0420C4 F1          0033*      pop af      ; get back flags
0420C5 C9          0034*      ret
0420C6             0035*  
0420C6             0036*  ; flip the sign of hlu
0420C6             0037*  ; inputs: hlu
0420C6             0038*  ; returns: 0-hlu, flags set appropriately for the result:
0420C6             0039*  ;         s1,z0,pv0,n1,c1 if result is negative
0420C6             0040*  ;         s0,z1,pv0,n1,c0 if result is zero
0420C6             0041*  ;         s0,z0,pv0,n1,c1 if result is positive
0420C6             0042*  ; destroys a
0420C6             0043*  neg_hlu:
0420C6 D5          0044*      push de     ; save de
0420C7 EB          0045*      ex de,hl    ; put hl into de
0420C8 21 00 00 00 0046*      ld hl,0     ; clear hl
0420CC AF          0047*      xor a       ; clear carry
0420CD ED 52       0048*      sbc hl,de   ; 0-hlu = -hlu
0420CF D1          0049*      pop de      ; get de back
0420D0 C9          0050*      ret         ; easy peasy
0420D1             0051*  
0420D1             0052*  ;------------------------------------------------------------------------
0420D1             0053*  ; divide hlu by 2, inspired by above
0420D1             0054*  ;------------------------------------------------------------------------
0420D1             0055*  hlu_div2:
0420D1 22 B0 20 04 0056*  	ld		(scratch1),hl
0420D5 21 B2 20 04 0057*  	ld		hl,scratch1+2
0420D9 CB 1E       0058*  	rr		(hl)
0420DB 2B          0059*  	dec		hl
0420DC CB 1E       0060*  	rr		(hl)
0420DE 2B          0061*  	dec		hl
0420DF CB 1E       0062*  	rr		(hl)
0420E1 23          0063*  	inc		hl
0420E2 23          0064*  	inc		hl
0420E3 2A B0 20 04 0065*      ld hl,(scratch1)
0420E7 C9          0066*      ret
0420E8             0067*  
0420E8             0068*  ; this is my little hack to divide by 16
0420E8             0069*  hlu_div16:
0420E8 AF          0070*      xor a
0420E9 29          0071*      add hl,hl
0420EA 17          0072*      rla
0420EB 29          0073*      add hl,hl
0420EC 17          0074*      rla
0420ED 29          0075*      add hl,hl
0420EE 17          0076*      rla
0420EF 29          0077*      add hl,hl
0420F0 17          0078*      rla
0420F1 22 FE 20 04 0079*      ld (@scratch),hl
0420F5 32 01 21 04 0080*      ld (@scratch+3),a
0420F9 2A FF 20 04 0081*      ld hl,(@scratch+1)
0420FD C9          0082*      ret
0420FE             0083*  @scratch: ds 4
042102             0084*  
042102             0085*  ; hlu signed division by 256
042102             0086*  ; returns: hlu / 256
042102             0087*  ; destroys: af
042102             0088*  hlu_sdiv256:
042102 AF          0089*      xor a ; assume hl is positive
042103 22 19 21 04 0090*      ld (@buffer),hl
042107             0091*      sign_hlu
042107 19          0001*M         add hl,de
042108 B7          0002*M         or a
042109 ED 52       0003*M         sbc hl,de
04210B F2 10 21 04 0092*      jp p,@hl_pos
04210F 3D          0093*      dec a
042110             0094*  @hl_pos:
042110 32 1C 21 04 0095*      ld (@buffer+3),a
042114 2A 1A 21 04 0096*      ld hl,(@buffer+1)
042118 C9          0097*      ret
042119             0098*  @buffer: ds 4
04211D             0099*  
04211D             0100*  ; hlu 1 byte right shift, unsigned
04211D             0101*  ; returns: hlu / 256, fractional portion in a
04211D             0102*  ; destroys: af
04211D             0103*  hlu_udiv256:
04211D AF          0104*  	xor a
04211E 32 2F 21 04 0105*  	ld (@buffer+3),a
042122 7D          0106*  	ld a,l ; save the fractional portion
042123 22 2C 21 04 0107*  	ld (@buffer),hl
042127 2A 2D 21 04 0108*  	ld hl,(@buffer+1)
04212B C9          0109*  	ret
04212C             0110*  @buffer: ds 4
042130             0111*  
042130             0112*      MACRO hlu_mul256
042130             0113*          add hl,hl ; * 2
042130             0114*          add hl,hl ; * 4
042130             0115*          add hl,hl ; * 8
042130             0116*          add hl,hl ; * 16
042130             0117*          add hl,hl ; * 32
042130             0118*          add hl,hl ; * 64
042130             0119*          add hl,hl ; * 128
042130             0120*          add hl,hl ; * 256
042130             0121*      ENDMACRO
042130             0122*  
042130             0123*  ; compute the modulo of hlu by deu
042130             0124*  ; outputs: hlu = hlu % deu
042130             0125*  ; destroys: f, hl
042130             0126*  hlu_mod:
042130 B7          0127*  	or a ; clear carry
042131             0128*  @loop:
042131 ED 52       0129*      sbc hl,de
042133 DA 3B 21 04 0130*      jp c, @end
042137 C3 31 21 04 0131*      jp @loop
04213B             0132*  @end:
04213B 19          0133*      add hl,de
04213C C9          0134*  	ret
04213D             0135*  
04213D             0136*  
04213D 00 00 00 00 0137*  add_bcd_arg1: db #00,#00,#00,#00
042141 00 00 00 00 0138*  add_bcd_arg2: db #00,#00,#00,#00
042145             0139*  
042145             0140*  ; set bcd values in a scratch memory address from registers bcde
042145             0141*  ; input: hl; scratch address,bcde; 8-place bcd number
042145             0142*  ; destroys ; hl
042145             0143*  set_bcd:
042145 73          0144*      ld (hl),e
042146 23          0145*      inc hl
042147 72          0146*      ld (hl),d
042148 23          0147*      inc hl
042149 71          0148*      ld (hl),c
04214A 23          0149*      inc hl
04214B 70          0150*      ld (hl),b
04214C C9          0151*      ret
04214D             0152*  
04214D             0153*  ; load bcd values from a scratch memory address to bcde
04214D             0154*  ; input: hl; scratch address
04214D             0155*  ; output: bcde; 8-place bcd number
04214D             0156*  ; destroys: hl
04214D             0157*  get_bcd:
04214D 5E          0158*      ld e,(hl)
04214E 23          0159*      inc hl
04214F 56          0160*      ld d,(hl)
042150 23          0161*      inc hl
042151 4E          0162*      ld c,(hl)
042152 23          0163*      inc hl
042153 46          0164*      ld b,(hl)
042154 C9          0165*      ret
042155             0166*  
042155             0167*  ; BCD addition
042155             0168*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
042155             0169*  ;       a is the number of bytes holding each number (number of places/2)
042155             0170*  ; outputs: (hl) + (de) --> (hl)
042155             0171*  ; destroys: a,b,de,hl
042155             0172*  add_bcd:
042155 47          0173*      ld b,a ; loop counter
042156 AF          0174*      xor a ; reset a, clear carry flag
042157             0175*  adcec:
042157 1A          0176*      ld a,(de) ; addend to acc
042158 8E          0177*      adc a,(hl) ; add (hl) to acc
042159 27          0178*      daa ; adjust result to bcd
04215A 77          0179*      ld (hl),a ; store result
04215B 23          0180*      inc hl ; advance memory pointers
04215C 13          0181*      inc de
04215D 10 F8       0182*      djnz adcec ; loop until b == 0
04215F C9          0183*      ret
042160             0184*  
042160             0185*  ; BCD subtraction
042160             0186*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
042160             0187*  ;       a is the number of bytes holding each number (number of places/2)
042160             0188*  ; outputs: (hl) - (de) --> (hl)
042160             0189*  ; destroys: a,b,de,hl
042160             0190*  sub_bcd:
042160 47          0191*      ld b,a ; loop counter
042161 AF          0192*      xor a ; reset a,clear carry flag
042162             0193*  subdec:
042162 1A          0194*      ld a,(de) ; subtrahend to acc
042163 9E          0195*      sbc a,(hl) ; subtract (hl) from acc
042164 27          0196*      daa ; adjust result to bcd
042165 77          0197*      ld (hl),a ; store result
042166 23          0198*      inc hl ; advance memory pointers
042167 13          0199*      inc de
042168 10 F8       0200*      djnz subdec ; loop until b == 0
04216A C9          0201*      ret
04216B             0202*  
04216B             0203*  ; http://www.z80.info/pseudo-random.txt
04216B             0204*  rand_8:
04216B C5          0205*      push bc
04216C 3A 7F 21 04 0206*      ld a,(r_seed)
042170 4F          0207*      ld c,a
042171             0208*  
042171 0F          0209*      rrca ; multiply by 32
042172 0F          0210*      rrca
042173 0F          0211*      rrca
042174 EE 1F       0212*      xor 0x1f
042176             0213*  
042176 81          0214*      add a,c
042177 DE FF       0215*      sbc a,255 ; carry
042179             0216*  
042179 32 7F 21 04 0217*      ld (r_seed),a
04217D C1          0218*      pop bc
04217E C9          0219*      ret
04217F 50          0220*  r_seed: defb $50
042180             0221*  
042180             0222*  ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
042180             0223*  prng24:
042180             0224*  ;;Expects ADL mode.
042180             0225*  ;;Output: HL
042180             0226*  ;;50cc
042180             0227*  ;;33 bytes
042180             0228*  ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
042180 ED 5B A1 21 0229*      ld de,(seed1)
       04          
042185 B7          0230*      or a
042186 ED 62       0231*      sbc hl,hl
042188 19          0232*      add hl,de
042189 29          0233*      add hl,hl
04218A 29          0234*      add hl,hl
04218B 2C          0235*      inc l
04218C 19          0236*      add hl,de
04218D 22 A1 21 04 0237*      ld (seed1),hl
042191 2A A4 21 04 0238*      ld hl,(seed2)
042195 29          0239*      add hl,hl
042196 9F          0240*      sbc a,a
042197 E6 1B       0241*      and %00011011
042199 AD          0242*      xor l
04219A 6F          0243*      ld l,a
04219B 22 A4 21 04 0244*      ld (seed2),hl
04219F 19          0245*      add hl,de
0421A0 C9          0246*      ret
0421A1 00 00 00    0247*  seed1: dl 0
0421A4 00 00 00    0248*  seed2: dl 0
0421A7             0036   	include "fixed168.inc"
0421A7             0001*  ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
0421A7             0002*  ; uses EZ80 MLT instruction for speed
0421A7             0003*  ; operation: UHL * A --> UHL
0421A7             0004*  ; destroys: AF, HL
0421A7             0005*  smul24x8:
0421A7             0006*  ; make hl positive and store sign flag
0421A7 CD B6 20 04 0007*  	call hlu_abs
0421AB F5          0008*  	push af
0421AC             0009*  ; do the division
0421AC CD B7 21 04 0010*      call mul24x8 ; hl = product
0421B0             0011*  ; adjust sign of result
0421B0 F1          0012*  	pop af ; sign de
0421B1 F0          0013*  	ret p ; hl was positive, nothing to do
0421B2 CD C6 20 04 0014*  	call neg_hlu ; result is negative
0421B6 C9          0015*  	ret
0421B7             0016*  
0421B7             0017*  ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
0421B7             0018*  ; uses EZ80 MLT instruction for speed
0421B7             0019*  ; operation: UHL * A --> AUHL
0421B7             0020*  ; destroys: AF, HL
0421B7             0021*  mul24x8:
0421B7 D5          0022*  	push de ; preserve de
0421B8             0023*  ; low byte
0421B8 5D          0024*  	ld e,l
0421B9 57          0025*  	ld d,a
0421BA ED 5C       0026*  	mlt de
0421BC 6B          0027*  	ld l,e ; product low byte
0421BD 08          0028*  	ex af,af' ; save multiplier
0421BE 7A          0029*  	ld a,d ; carry
0421BF 08          0030*  	ex af,af' ; save carry, restore multiplier
0421C0             0031*  ; high byte
0421C0 5C          0032*  	ld e,h
0421C1 57          0033*  	ld d,a
0421C2 ED 5C       0034*  	mlt de
0421C4 08          0035*  	ex af,af' ; save multiplier, restore carry
0421C5 83          0036*  	add a,e ; add carry
0421C6 67          0037*  	ld h,a ; product middle byte
0421C7 7A          0038*  	ld a,d ; carry
0421C8 08          0039*  	ex af,af' ; save carry, restore multiplier
0421C9             0040*  ; upper byte
0421C9 22 E4 21 04 0041*      ld (@scratch),hl ; 7 cycles
0421CD 5F          0042*  	ld e,a
0421CE 3A E6 21 04 0043*  	ld a,(@scratch+2)
0421D2 57          0044*  	ld d,a
0421D3 ED 5C       0045*  	mlt de
0421D5 08          0046*  	ex af,af' ; restore carry
0421D6 8B          0047*  	adc a,e ; add carry
0421D7 32 E6 21 04 0048*      ld (@scratch+2),a ; 5 cycles
0421DB 2A E4 21 04 0049*      ld hl,(@scratch) ; 7 cycles
0421DF             0050*  ; highest byte
0421DF 3E 00       0051*  	ld a,0 ; preserve carry flag
0421E1 8A          0052*  	adc a,d ; product highest byte
0421E2 D1          0053*  	pop de ; restore de
0421E3 C9          0054*  	ret
0421E4             0055*  @scratch: ds 3
0421E7             0056*  
0421E7 00 00 00 00 0057*  mul24out: blkb 6,0
       00 00       
0421ED             0058*  
0421ED             0059*  ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
0421ED             0060*  ; operation: UHL * UDE --> mul24out
0421ED             0061*  mul24:
0421ED DD E5       0062*  	push ix ; preserve
0421EF             0063*  ; point to output buffer and clear it
0421EF DD 21 E7 21 0064*  	ld ix,mul24out
       04          
0421F4 C5          0065*  	push bc
0421F5 01 00 00 00 0066*  	ld bc,0
0421F9 DD 0F 00    0067*  	ld (ix),bc
0421FC DD 0F 03    0068*  	ld (ix+3),bc
0421FF C1          0069*  	pop bc
042200             0070*  ; STEP 1: UHL * E
042200 7B          0071*  	ld a,e
042201 E5          0072*  	push hl
042202 CD B7 21 04 0073*  	call mul24x8
042206 DD 2F 00    0074*  	ld (ix+0),hl
042209 DD 77 03    0075*  	ld (ix+3),a
04220C             0076*  ; STEP 2: UHL * D
04220C E1          0077*  	pop hl
04220D E5          0078*  	push hl
04220E 7A          0079*  	ld a,d
04220F CD B7 21 04 0080*  	call mul24x8
042213 CD 2C 22 04 0081*  	call @accumulate
042217             0082*  ; STEP 3: UHL * DEU
042217 E1          0083*  	pop hl
042218 ED 53 5C 22 0084*  	ld (@de),de
       04          
04221D 3A 5E 22 04 0085*  	ld a,(@de+2)
042221 CD B7 21 04 0086*  	call mul24x8
042225 CD 2C 22 04 0087*  	call @accumulate
042229             0088*  ; all done
042229 DD E1       0089*  	pop ix ; restore
04222B C9          0090*  	ret
04222C             0091*  @accumulate:
04222C DD 23       0092*  	inc ix
04222E             0093*  ; highest byte of product to carry
04222E DD 77 03    0094*  	ld (ix+3),a
042231             0095*  ; low byte of product
042231 7D          0096*  	ld a,l
042232 DD 86 00    0097*  	add a,(ix+0)
042235 DD 77 00    0098*  	ld (ix+0),a
042238             0099*  ; high byte of product
042238 7C          0100*  	ld a,h
042239 DD 8E 01    0101*  	adc a,(ix+1)
04223C DD 77 01    0102*  	ld (ix+1),a
04223F             0103*  ; uppper byte of product
04223F 22 59 22 04 0104*  	ld (@hl),hl
042243 3A 5B 22 04 0105*  	ld a,(@hl+2)
042247 DD 8E 02    0106*  	adc a,(ix+2)
04224A DD 77 02    0107*  	ld (ix+2),a
04224D             0108*  ; carry
04224D 3E 00       0109*  	ld a,0 ; preserve flags
04224F DD 8E 03    0110*  	adc a,(ix+3)
042252 DD 77 03    0111*  	ld (ix+3),a
042255 C9          0112*  	ret
042256             0113*  
042256 00 00 00    0114*  @ix: dl 0
042259 00 00 00    0115*  @hl: dl 0
04225C 00 00 00    0116*  @de: dl 0
04225F             0117*  
04225F             0118*  ; UHL * UDE --> UHL (unsigned)
04225F             0119*  umul24:
04225F CD ED 21 04 0120*  	call mul24
042263 2A E7 21 04 0121*  	ld hl,(mul24out)
042267 C9          0122*  	ret
042268             0123*  
042268             0124*  ; UH.L = UH.L*UD.E (unsigned)
042268             0125*  umul168:
042268 CD ED 21 04 0126*  	call mul24
04226C 2A E8 21 04 0127*  	ld hl,(mul24out+1)
042270 C9          0128*  	ret
042271             0129*  
042271             0130*  ; UH.L * UD.E --> UH.L (signed)
042271             0131*  smul168:
042271             0132*  ; make everything positive and store sign flags
042271 CD B6 20 04 0133*  	call hlu_abs
042275 F5          0134*  	push af
042276 EB          0135*  	ex de,hl
042277 CD B6 20 04 0136*  	call hlu_abs
04227B EB          0137*  	ex de,hl
04227C F5          0138*  	push af
04227D             0139*  ; do the division
04227D CD 68 22 04 0140*      call umul168 ; hl = product
042281             0141*  ; adjust sign of result
042281 F1          0142*  	pop af ; sign de
042282 FA 8D 22 04 0143*  	jp m,@de_neg
042286 F1          0144*  	pop af ; sign hl
042287 F0          0145*  	ret p ; both positive, nothing to do
042288             0146*  @hl_neg:
042288 CD C6 20 04 0147*      call neg_hlu ; de pos, hl neg, result is negative
04228C C9          0148*      ret
04228D             0149*  @de_neg:
04228D F1          0150*  	pop af
04228E F8          0151*  	ret m ; both negative, nothing to do
04228F CD C6 20 04 0152*  	call neg_hlu ; result is negative
042293 C9          0153*  	ret
042294             0154*  
042294             0155*  ; UH.L / UD.E --> UD.E rem UHL (unsigned)
042294             0156*  ; perform unsigned division of 16.8 fixed place values
042294             0157*  ; with an unsigned 16.8 fixed place result and 24-bit remainder
042294             0158*  udiv168:
042294             0159*  ; back up divisor
042294 ED 53 CB 22 0160*  	ld (@ude),de
       04          
042299             0161*  ; get the 16-bit integer part of the quotient
042299 CD FC 22 04 0162*      call udiv24 ; de = quotient, hl = remainder
04229D             0163*  ; load quotient to upper three bytes of output
04229D ED 53 D2 22 0164*      ld (div168_out+1),de
       04          
0422A2             0165*  @div256:
0422A2             0166*  ; multiply remainder by 256
0422A2             0167*  	hlu_mul256
0422A2 29          0001*M         add hl,hl ; * 2
0422A3 29          0002*M         add hl,hl ; * 4
0422A4 29          0003*M         add hl,hl ; * 8
0422A5 29          0004*M         add hl,hl ; * 16
0422A6 29          0005*M         add hl,hl ; * 32
0422A7 29          0006*M         add hl,hl ; * 64
0422A8 29          0007*M         add hl,hl ; * 128
0422A9 29          0008*M         add hl,hl ; * 256
0422AA             0168*  ; skip fractional computation if remainder is zero
0422AA             0169*      sign_hlu
0422AA 19          0001*M         add hl,de
0422AB B7          0002*M         or a
0422AC ED 52       0003*M         sbc hl,de
0422AE 20 03       0170*      jr nz,@div_frac
0422B0 AF          0171*      xor a
0422B1 18 0A       0172*      jr @write_frac
0422B3             0173*  ; now divide the shifted remainder by the divisor
0422B3             0174*  @div_frac:
0422B3 ED 5B CB 22 0175*  	ld de,(@ude) ; get back divisor
       04          
0422B8 CD FC 22 04 0176*      call udiv24 ; de = quotient, hl = remainder
0422BC             0177*  ; load low byte of quotient to low byte of output
0422BC 7B          0178*      ld a,e
0422BD             0179*  @write_frac:
0422BD 32 D1 22 04 0180*      ld (div168_out),a
0422C1             0181*  ; load de with return value
0422C1 ED 5B D1 22 0182*      ld de,(div168_out)
       04          
0422C6             0183*  ; load a with any overflow
0422C6 3A D4 22 04 0184*      ld a,(div168_out+3)
0422CA C9          0185*      ret ; ud.e is the 16.8 result
0422CB             0186*  @ude: ds 6
0422D1             0187*  div168_out: ds 4 ; the extra byte is for overflow
0422D5             0188*  
0422D5             0189*  ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
0422D5             0190*  ; perform signed division of 16.8 fixed place values
0422D5             0191*  ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
0422D5             0192*  sdiv168:
0422D5             0193*  ; make everything positive and store sign flags
0422D5 CD B6 20 04 0194*  	call hlu_abs
0422D9 F5          0195*  	push af
0422DA EB          0196*  	ex de,hl
0422DB CD B6 20 04 0197*  	call hlu_abs
0422DF EB          0198*  	ex de,hl
0422E0 F5          0199*  	push af
0422E1             0200*  ; do the division
0422E1 CD 94 22 04 0201*      call udiv168 ; de = quotient, hl = remainder
0422E5             0202*  ; adjust sign of result
0422E5 F1          0203*  	pop af ; sign de
0422E6 FA F3 22 04 0204*  	jp m,@de_neg
0422EA F1          0205*  	pop af ; sign hl
0422EB F0          0206*  	ret p ; both positive, nothing to do
0422EC             0207*  @hl_neg:
0422EC EB          0208*      ex de,hl ; hl = quotient, de = remainder
0422ED CD C6 20 04 0209*      call neg_hlu ; de pos, hl neg, result is negative
0422F1 EB          0210*      ex de,hl ; de = negated quotient, hl = remainder
0422F2 C9          0211*      ret
0422F3             0212*  @de_neg:
0422F3 F1          0213*  	pop af
0422F4 F8          0214*  	ret m ; both negative, nothing to do
0422F5 EB          0215*      ex de,hl ; hl = quotient, de = remainder
0422F6 CD C6 20 04 0216*  	call neg_hlu ; result is negative
0422FA EB          0217*      ex de,hl ; de = negated quotient, hl = remainder
0422FB C9          0218*  	ret
0422FC             0219*  
0422FC             0220*  ;------------------------------------------------------------------------
0422FC             0221*  ;  arith24.asm
0422FC             0222*  ;  24-bit ez80 arithmetic routines
0422FC             0223*  ;  Copyright (c) Shawn Sijnstra 2024
0422FC             0224*  ;  MIT license
0422FC             0225*  ;
0422FC             0226*  ;  This library was created as a tool to help make ez80
0422FC             0227*  ;  24-bit native assembly routines for simple mathematical problems
0422FC             0228*  ;  more widely available.
0422FC             0229*  ;
0422FC             0230*  ;------------------------------------------------------------------------
0422FC             0231*  ;
0422FC             0232*  ;------------------------------------------------------------------------
0422FC             0233*  ; udiv24
0422FC             0234*  ; Unsigned 24-bit division
0422FC             0235*  ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
0422FC             0236*  ;
0422FC             0237*  ; Uses AF BC DE HL
0422FC             0238*  ; Uses Restoring Division algorithm
0422FC             0239*  ;------------------------------------------------------------------------
0422FC             0240*  
0422FC             0241*  udiv24:
0422FC E5          0242*  	push	hl
0422FD C1          0243*  	pop		bc	;move dividend to BCU
0422FE 21 00 00 00 0244*  	ld		hl,0	;result
042302 A7          0245*  	and		a
042303 ED 52       0246*  	sbc		hl,de	;test for div by 0
042305 C8          0247*  	ret		z		;it's zero, carry flag is clear
042306 19          0248*  	add		hl,de	;HL is 0 again
042307 3E 18       0249*  	ld		a,24	;number of loops through.
042309             0250*  udiv1:
042309 C5          0251*  	push	bc	;complicated way of doing this because of lack of access to top bits
04230A E3          0252*  	ex		(sp),hl
04230B 37          0253*  	scf
04230C ED 6A       0254*  	adc	hl,hl
04230E E3          0255*  	ex	(sp),hl
04230F C1          0256*  	pop	bc		;we now have bc = (bc * 2) + 1
042310             0257*  
042310 ED 6A       0258*  	adc	hl,hl
042312 A7          0259*  	and	a		;is this the bug
042313 ED 52       0260*  	sbc	hl,de
042315 30 02       0261*  	jr	nc,udiv2
042317 19          0262*  	add	hl,de
042318             0263*  ;	dec	c
042318 0B          0264*  	dec	bc
042319             0265*  udiv2:
042319 3D          0266*  	dec	a
04231A 20 ED       0267*  	jr	nz,udiv1
04231C 37          0268*  	scf		;flag used for div0 error
04231D C5          0269*  	push	bc
04231E D1          0270*  	pop		de	;remainder
04231F C9          0271*  	ret
042320             0272*  
042320             0273*  ;------------------------------------------------------------------------
042320             0274*  ;  END 24-bit ez80 arithmetic routines by Shawn Sijnstra
042320             0275*  ;------------------------------------------------------------------------
042320             0276*  
042320             0277*  
042320             0278*      ; include "trig24fast.inc"
042320             0279*  
042320             0280*  
042320             0281*  ; convert signed angles from a 360 to 256 degree circle
042320             0282*  ; inputs: uh.l is the angle360 in 16.8 fixed format
042320             0283*  ; outputs: uh.l is the angle256 in 16.8 fixed format
042320             0284*  ; destroys: TODO
042320             0285*  deg_360_to_256:
042320 D5          0286*  	push de ; preserve de
042321             0287*  ; make angle positive and store sign flag
042321 CD B6 20 04 0288*  	call hlu_abs
042325 F5          0289*  	push af
042326             0290*  ; multiply by coversion factor of 256/360
042326 11 B6 00 00 0291*  	ld de,0x0000B6 ; 0.711
04232A CD 68 22 04 0292*  	call umul168 ; uh.l = uh.l * 0.711
04232E             0293*  ; restore sign flag and adjust output accordingly
04232E F1          0294*  	pop af
04232F F2 37 23 04 0295*  	jp p,@pos ; positive number
042333 CD C6 20 04 0296*  	call neg_hlu
042337             0297*  @pos:
042337             0298*  ; restore de and return uh.l as the result
042337 D1          0299*  	pop de
042338 C9          0300*  	ret
042339             0301*  
042339             0302*  ; convert signed angles from a 256 to 360 degree circle
042339             0303*  ; inputs: uh.l is the angle256 in 16.8 fixed format
042339             0304*  ; outputs: uh.l is the angle360 in 16.8 fixed format
042339             0305*  ; destroys: TODO
042339             0306*  deg_256_to_360:
042339 D5          0307*  	push de ; preserve de
04233A             0308*  ; make angle positive and store sign flag
04233A CD B6 20 04 0309*  	call hlu_abs
04233E F5          0310*  	push af
04233F             0311*  ; multiply by coversion factor of 360/256
04233F 11 68 01 00 0312*      ld de,0x000168 ; 1.406
042343 CD 68 22 04 0313*  	call umul168 ; uh.l = uh.l * 1.406
042347             0314*  ; restore sign flag and adjust output accordingly
042347 F1          0315*  	pop af
042348 F2 50 23 04 0316*  	jp p,@pos ; positive number
04234C CD C6 20 04 0317*  	call neg_hlu
042350             0318*  @pos:
042350             0319*  ; restore de and return uh.l as the result
042350 D1          0320*  	pop de
042351 C9          0321*  	ret
042352             0322*  
042352             0323*  ; fixed 16.8 routine
042352             0324*  ; cos(uh.l) --> uh.l
042352             0325*  ; destroys: f, hl
042352             0326*  cos168:
042352 D5          0327*      push de ; preserve de
042353             0328*  ; for cos we simply increment the angle by 90 degrees
042353             0329*  ; or 0x004000 in 16.8 degrees256
042353             0330*  ; which makes it a sin problem
042353 11 00 40 00 0331*      ld de,0x004000
042357 19          0332*      add hl,de ; modulo 256 happens below
042358 D1          0333*      pop de ; restore de
042359             0334*  ; fall through to sin168
042359             0335*  
042359             0336*  ; ---------------------
042359             0337*  ; fixed 16.8 routine
042359             0338*  ; sin(uh.l) --> uh.l
042359             0339*  ; destroys: f, hl
042359             0340*  sin168:
042359 D5          0341*  	push de
04235A             0342*  ; handle negative angles appropriately
04235A CD B6 20 04 0343*  	call hlu_abs
04235E F2 67 23 04 0344*  	jp p,@F
042362 11 00 00 FF 0345*  	ld de,-256*256
042366 19          0346*  	add hl,de
042367             0347*  @@:
042367 2E 03       0348*  	ld l,3 ; multiply by 3 to get our lookup index
042369 ED 6C       0349*      mlt hl
04236B 11 B7 25 04 0350*      ld de,sin_lut_168 ; grab the lut address
04236F 19          0351*      add hl,de ; bump hl by the index
042370 ED 27       0352*      ld hl,(hl) ; don't try this on a z80!
042372 D1          0353*      pop de
042373 C9          0354*      ret
042374             0355*  
042374             0356*  ; 16.8 fixed inputs / outputs
042374             0357*  ; takes: uh.l as angle in degrees 256
042374             0358*  ;        ud.e as radius
042374             0359*  ; returns ub.c as dx, ud.e as dy, uh.l as radius
042374             0360*  ;        displacements from origin (0,0)
042374             0361*  ; destroys: everything except indexes
042374             0362*  polar_to_cartesian:
042374             0363*  ; back up input parameters
042374 22 A3 23 04 0364*      ld (@angle), hl
042378 ED 53 A6 23 0365*      ld (@radius), de
       04          
04237D             0366*  ; compute dx = sin(uh.l) * ud.e
04237D CD 59 23 04 0367*      call sin168 ; uh.l = sin(uh.l)
042381 ED 5B A6 23 0368*  	ld de,(@radius)
       04          
042386 CD 71 22 04 0369*  	call smul168 ; uh.l = dx
04238A E5          0370*      push hl
04238B             0371*  ; compute dy = -cos(uh.l) * ud.e
04238B 2A A3 23 04 0372*      ld hl,(@angle)
04238F CD 52 23 04 0373*      call cos168 ; uh.l = cos(uh.l)
042393 ED 5B A6 23 0374*      ld de,(@radius)
       04          
042398 CD 71 22 04 0375*      call smul168    ; uh.l = dy
04239C CD C6 20 04 0376*      call neg_hlu ; invert dy for screen coords convention
0423A0 EB          0377*      ex de,hl       ; de = dy for output
0423A1 C1          0378*      pop bc          ; bc = dx for output
0423A2             0379*  ; and out
0423A2 C9          0380*      ret
0423A3             0381*  @angle: ds 3
0423A6             0382*  @radius: ds 3
0423A9             0383*  
0423A9             0384*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
0423A9             0385*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
0423A9             0386*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
0423A9             0387*  ;         also populates scratch locations dx168 and dy168
0423A9             0388*  ; destroys: a,hl,bc,de
0423A9             0389*  dxy168:
0423A9             0390*  ; compute dx = x1-x0
0423A9 AF          0391*      xor a ; clear carry
0423AA DD E5       0392*      push ix ; move ix to hl via the stack
0423AC E1          0393*      pop hl ; hl = x1
0423AD ED 42       0394*      sbc hl,bc ; hl = dx
0423AF 22 C4 23 04 0395*      ld (dx168),hl ; dx to scratch
0423B3             0396*  ; compute dy = y1-y0
0423B3 AF          0397*      xor a ; clear carry
0423B4 FD E5       0398*      push iy ; move iy to hl via the stack
0423B6 E1          0399*      pop hl ; hl = y1
0423B7 ED 52       0400*      sbc hl,de ; hl = dy
0423B9 22 CA 23 04 0401*      ld (dy168),hl ; dy to scratch
0423BD             0402*  ; populate output registers and return
0423BD EB          0403*      ex de,hl        ; ud.e = dy
0423BE ED 4B C4 23 0404*      ld bc,(dx168)   ; ub.c = dx
       04          
0423C3 C9          0405*      ret
0423C4 00 00 00 00 0406*  dx168: blkb 6,0
       00 00       
0423CA 00 00 00 00 0407*  dy168: blkb 6,0
       00 00       
0423D0             0408*  
0423D0             0409*  ; compute the euclidian distance between two cartesian coordinates
0423D0             0410*  ; using the formula d = sqrt(dx^2+dy^2)
0423D0             0411*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
0423D0             0412*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
0423D0             0413*  ; output; uh.l is the 16.8 fixed format distance
0423D0             0414*  ;         also populates scratch locations dx168 and dy168
0423D0             0415*  ; destroys: a,hl,bc,de
0423D0             0416*  ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
0423D0             0417*  ;       thus the result will always be an integer, albeit in 16.8 format
0423D0             0418*  distance168:
0423D0 CD A9 23 04 0419*  	call dxy168 ; ub.c = dx, ud.e = dy
0423D4             0420*  ; compute dy^2
0423D4 EB          0421*  	ex de,hl
0423D5 CD B6 20 04 0422*  	call hlu_abs
0423D9 CD 1D 21 04 0423*  	call hlu_udiv256 ; make integer to avoid overflow
0423DD E5          0424*  	push hl
0423DE D1          0425*  	pop de
0423DF CD 5F 22 04 0426*  	call umul24 ; hl = dy^2
0423E3 E5          0427*  	push hl ; save dy^2
0423E4             0428*  ; compute dx^2
0423E4 2A C4 23 04 0429*  	ld hl,(dx168)
0423E8 CD B6 20 04 0430*  	call hlu_abs
0423EC CD 1D 21 04 0431*  	call hlu_udiv256 ; make integer to avoid overflow
0423F0 E5          0432*  	push hl
0423F1 D1          0433*  	pop de
0423F2 CD 5F 22 04 0434*  	call umul24 ; hl = dx^2
0423F6             0435*  ; add dx^2 and dy^2
0423F6 D1          0436*  	pop de ; de = dy^2 (was hl)
0423F7 19          0437*  	add hl,de ; hl = dx^2 + dy^2
0423F8             0438*  ; compute the square root
0423F8 CD D1 24 04 0439*  	call sqrt24 ; de = sqrt(dx^2 + dy^2)
0423FC EB          0440*      ex de,hl ; hl = distance
0423FD             0441*      hlu_mul256 ; convert back to 16.8 fixed
0423FD 29          0001*M         add hl,hl ; * 2
0423FE 29          0002*M         add hl,hl ; * 4
0423FF 29          0003*M         add hl,hl ; * 8
042400 29          0004*M         add hl,hl ; * 16
042401 29          0005*M         add hl,hl ; * 32
042402 29          0006*M         add hl,hl ; * 64
042403 29          0007*M         add hl,hl ; * 128
042404 29          0008*M         add hl,hl ; * 256
042405 C9          0442*  	ret
042406             0443*  
042406             0444*  ; atan2_(ub.c,ud.e) --> uh.l
042406             0445*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
042406             0446*  ;   whether inputs are integers or fractional doesn't matter
042406             0447*  ;   so long as the sign bit of the upper byte is correct
042406             0448*  ; output: uh.l is the 16.8 fixed angle in degrees 256
042406             0449*  ; angles are COMPASS HEADINGS based on
042406             0450*  ; screen coordinate conventions,where the y axis is flipped
042406             0451*  ; #E0 315      0       45 #20
042406             0452*  ;        -x,-y | +x,-y
042406             0453*  ; #C0 270------+------ 90 #40
042406             0454*  ;        -x,+y | +x,+y
042406             0455*  ; #A0 225   180 #80   135 #60
042406             0456*  atan2_168fast:
042406             0457*  ; get signs and make everything positive
042406             0458*  ; get abs(x) and store its original sign
042406 C5          0459*      push bc
042407 E1          0460*      pop hl
042408 CD B6 20 04 0461*      call hlu_abs ; if x was negative this also sets the sign flag
04240C E5          0462*      push hl ; store abs(x)
04240D C1          0463*      pop bc ; bc = abs(x)
04240E F5          0464*      push af ; store sign of x
04240F             0465*  ; get abs(y) and store its original sign
04240F EB          0466*      ex de,hl ; hl = y
042410 CD B6 20 04 0467*      call hlu_abs ; if y was negative this also sets the sign flag
042414 EB          0468*      ex de,hl ; de = abs(y)
042415 F5          0469*      push af ; store sign of y
042416             0470*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
042416             0471*  ; this ensures that our lookup value is between 0 and 1 inclusive
042416 AF          0472*      xor a ; clear the carry flag
042417 D5          0473*      push de
042418 E1          0474*      pop hl
042419 ED 42       0475*      sbc hl,bc
04241B F5          0476*      push af ; save sign of de - bc
04241C F2 25 24 04 0477*      jp p,@1 ; bc <= de, so we skip ahead
042420             0478*  ; otherwise we swap bc and de
042420 C5          0479*      push bc
042421 E1          0480*      pop hl
042422 EB          0481*      ex de,hl
042423 E5          0482*      push hl
042424 C1          0483*      pop bc
042425             0484*  @1:
042425             0485*  ; now we're ready to snag our preliminary result
042425 C5          0486*  	push bc
042426 E1          0487*  	pop hl
042427 CD 95 24 04 0488*      call atan_168fast ; uh.l comes back with prelim result
04242B             0489*  ; now we adjust uh.l based on sign of de - bc
04242B F1          0490*      pop af
04242C F2 38 24 04 0491*      jp p,@2 ; bc <= de,so we skip ahead
042430 EB          0492*      ex de,hl
042431 21 00 40 00 0493*      ld hl,0x004000 ; 90 degrees
042435 AF          0494*      xor a ; clear the carry flag
042436 ED 52       0495*      sbc hl,de ; subtract result from 90 degrees
042438             0496*  @2:
042438             0497*  ; now the fun part of adjusting the result
042438             0498*  ; based on which quadrant (x,y) is in
042438             0499*  ; #E0 315      0       45 #20
042438             0500*  ;        -x,-y | +x,-y
042438             0501*  ; #C0 270------+------ 90 #40
042438             0502*  ;        -x,+y | +x,+y
042438             0503*  ; #A0 225   180 #80   135 #60
042438 F1          0504*      pop af ; sign of y
042439 CA 76 24 04 0505*      jp z,@y_zero
04243D F2 56 24 04 0506*      jp p,@y_pos
042441             0507*  ; y neg,check x
042441 F1          0508*      pop af ; sign of x
042442 CA 50 24 04 0509*      jp z,@y_neg_x_zero
042446 F2 55 24 04 0510*      jp p,@y_neg_x_pos
04244A             0511*  ; y neg,x neg
04244A             0512*  ; angle is 270-360
04244A             0513*  ; negating the intermediate does the trick
04244A CD C6 20 04 0514*      call neg_hlu
04244E 18 31       0515*      jr @zero_hlu
042450             0516*  
042450             0517*  @y_neg_x_zero:
042450             0518*  ; y neg,x zero
042450             0519*  ; angle is 0
042450 21 00 00 00 0520*      ld hl,0
042454 C9          0521*      ret
042455             0522*  @y_neg_x_pos:
042455             0523*  ; y neg,x pos
042455             0524*  ; angle is 0 to 90
042455             0525*  ; so we're good
042455 C9          0526*      ret
042456             0527*  
042456             0528*  @y_pos:
042456 F1          0529*      pop af ; sign of x
042457 CA 66 24 04 0530*      jp z,@y_pos_x_zero
04245B F2 6B 24 04 0531*      jp p,@y_pos_x_pos
04245F             0532*  ; y pos,x neg
04245F             0533*  ; angle is 180-270
04245F             0534*  ; so we add 180 to intermediate
04245F 11 00 80 00 0535*      ld de,0x008000
042463 19          0536*      add hl,de
042464 18 1B       0537*      jr @zero_hlu
042466             0538*  @y_pos_x_zero:
042466             0539*  ; y pos,x zero
042466             0540*  ; angle is 180
042466 21 00 80 00 0541*      ld hl,0x008000
04246A C9          0542*      ret
04246B             0543*  @y_pos_x_pos:
04246B             0544*  ; y pos,x pos
04246B             0545*  ; angle is 90-180
04246B             0546*  ; neg the intermediate and add 180 degrees
04246B CD C6 20 04 0547*      call neg_hlu
04246F 11 00 80 00 0548*      ld de,0x008000
042473 19          0549*      add hl,de
042474 18 0B       0550*      jr @zero_hlu
042476             0551*  
042476             0552*  @y_zero:
042476 F1          0553*      pop af ; sign of x
042477 FA 7C 24 04 0554*      jp m,@y_zero_x_neg
04247B             0555*  ; y zero,x pos
04247B             0556*  ; angle is 90,nothing to do
04247B C9          0557*      ret
04247C             0558*  @y_zero_x_neg:
04247C             0559*  ; y zero ,x neg
04247C             0560*  ; angle is 270
04247C 21 00 C0 00 0561*      ld hl,0x00C000
042480 C9          0562*      ret
042481             0563*  @zero_hlu:
042481 AF          0564*      xor a
042482 22 8F 24 04 0565*      ld (@scratch),hl
042486 32 91 24 04 0566*      ld (@scratch+2),a
04248A 2A 8F 24 04 0567*      ld hl,(@scratch)
04248E C9          0568*      ret
04248F             0569*  @scratch: ds 6
042495             0570*  
042495             0571*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
042495             0572*  ; output: uh.l is the 16.8 fixed format angle in degrees 256
042495             0573*  ; destroys: a,hl,bc,de
042495             0574*  ; note: only works for angles from 0 to 32 (45) degrees
042495             0575*  ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
042495             0576*  atan_168fast:
042495             0577*  ; because we use compass headings instead of geometric angles
042495             0578*  ; we compute dx/dy which is 1/tan(theta) in the maths world
042495             0579*  ; we can do faster unsigned division here because we know dx and dy are positive
042495 CD 94 22 04 0580*  	call udiv168 ; ud.e = dx/dy
042499 EB          0581*  	ex de,hl ; uh.l = dx/dy
04249A             0582*  ; test uh.l for 0
04249A 19          0583*      add hl,de
04249B B7          0584*      or a
04249C ED 52       0585*      sbc hl,de
04249E 28 22       0586*      jr z,@is_zero
0424A0             0587*  ; test uh.l for 1
0424A0 AF          0588*      xor a ; clear carry
0424A1 EB          0589*      ex de,hl
0424A2 21 00 01 00 0590*      ld hl,0x000100 ; 1 in 16.8 fixed format
0424A6 ED 52       0591*      sbc hl,de
0424A8 28 13       0592*      jr z,@is_45
0424AA EB          0593*  	ex de,hl
0424AB             0594*  ; no special cases so we move on
0424AB             0595*  ; l contains the fractional portion of tan(uh.l)
0424AB             0596*  ; we multiply it by three to get our lookup table index
0424AB 26 03       0597*      ld h,3
0424AD ED 6C       0598*      mlt hl ; gosh that is handy
0424AF 11 00 00 00 0599*      ld de,0 ; clear deu
0424B3 54          0600*      ld d,h ; copy hl to de
0424B4 5D          0601*      ld e,l ; de contains our index
0424B5 21 BA 28 04 0602*      ld hl,atan_lut_168 ; grab the lut address
0424B9 19          0603*      add hl,de ; bump hl by the index
0424BA ED 27       0604*      ld hl,(hl) ; don't try this on a z80!
0424BC C9          0605*      ret ; and out
0424BD             0606*  @is_45:
0424BD 21 00 20 00 0607*      ld hl,0x002000 ; 45 degrees decimal
0424C1 C9          0608*      ret
0424C2             0609*  ; for the case tan(0)
0424C2             0610*  @is_zero:
0424C2 21 00 00 00 0611*      ld hl,0x000000
0424C6 C9          0612*      ret
0424C7             0613*  
0424C7             0614*  ; Expects  ADL mode
0424C7             0615*  ; Inputs:  UH.L
0424C7             0616*  ; Outputs: UH.L is the 16.8 square root
0424C7             0617*  ;          UDE is the integer difference inputHL-DE^2
0424C7             0618*  sqrt168:
0424C7 CD D1 24 04 0619*      call sqrt24
0424CB EB          0620*      ex de,hl
0424CC 29          0621*      add hl,hl
0424CD 29          0622*      add hl,hl
0424CE 29          0623*      add hl,hl
0424CF 29          0624*      add hl,hl
0424D0 C9          0625*      ret
0424D1             0626*  
0424D1             0627*  ; credit: xeda112358
0424D1             0628*  ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
0424D1             0629*  sqrt24:
0424D1             0630*  ; Expects ADL mode
0424D1             0631*  ; Inputs: HL
0424D1             0632*  ; Outputs: DE is the integer square root
0424D1             0633*  ;  HL is the difference inputHL-DE^2
0424D1             0634*  ;  c flag reset
0424D1 01 00 00 00 0635*  	ld bc,0 ; clear bcu
0424D5 11 00 00 00 0636*  	ld de,0 ; clear deu
0424D9 AF          0637*      xor a
0424DA 45          0638*      ld b,l
0424DB C5          0639*      push bc
0424DC 47          0640*      ld b,a
0424DD 6F          0641*      ld l,a
0424DE             0642*  ; Iteration 1
0424DE 29          0643*      add hl,hl
0424DF CB 11       0644*      rl c
0424E1 29          0645*      add hl,hl
0424E2 CB 11       0646*      rl c
0424E4 91          0647*      sub c
0424E5 30 04       0648*      jr nc,$+6
0424E7 1C          0649*      inc e
0424E8 1C          0650*      inc e
0424E9 2F          0651*      cpl
0424EA 4F          0652*      ld c,a
0424EB             0653*  ; Iteration 2
0424EB 29          0654*      add hl,hl
0424EC CB 11       0655*      rl c
0424EE 29          0656*      add hl,hl
0424EF CB 11       0657*      rl c
0424F1 CB 13       0658*      rl e
0424F3 7B          0659*      ld a,e
0424F4 91          0660*      sub c
0424F5 30 04       0661*      jr nc,$+6
0424F7 1C          0662*      inc e
0424F8 1C          0663*      inc e
0424F9 2F          0664*      cpl
0424FA 4F          0665*      ld c,a
0424FB             0666*  ; Iteration 3
0424FB 29          0667*      add hl,hl
0424FC CB 11       0668*      rl c
0424FE 29          0669*      add hl,hl
0424FF CB 11       0670*      rl c
042501 CB 13       0671*      rl e
042503 7B          0672*      ld a,e
042504 91          0673*      sub c
042505 30 04       0674*      jr nc,$+6
042507 1C          0675*      inc e
042508 1C          0676*      inc e
042509 2F          0677*      cpl
04250A 4F          0678*      ld c,a
04250B             0679*  ; Iteration 4
04250B 29          0680*      add hl,hl
04250C CB 11       0681*      rl c
04250E 29          0682*      add hl,hl
04250F CB 11       0683*      rl c
042511 CB 13       0684*      rl e
042513 7B          0685*      ld a,e
042514 91          0686*      sub c
042515 30 04       0687*      jr nc,$+6
042517 1C          0688*      inc e
042518 1C          0689*      inc e
042519 2F          0690*      cpl
04251A 4F          0691*      ld c,a
04251B             0692*  ; Iteration 5
04251B 29          0693*      add hl,hl
04251C CB 11       0694*      rl c
04251E 29          0695*      add hl,hl
04251F CB 11       0696*      rl c
042521 CB 13       0697*      rl e
042523 7B          0698*      ld a,e
042524 91          0699*      sub c
042525 30 04       0700*      jr nc,$+6
042527 1C          0701*      inc e
042528 1C          0702*      inc e
042529 2F          0703*      cpl
04252A 4F          0704*      ld c,a
04252B             0705*  ; Iteration 6
04252B 29          0706*      add hl,hl
04252C CB 11       0707*      rl c
04252E 29          0708*      add hl,hl
04252F CB 11       0709*      rl c
042531 CB 13       0710*      rl e
042533 7B          0711*      ld a,e
042534 91          0712*      sub c
042535 30 04       0713*      jr nc,$+6
042537 1C          0714*      inc e
042538 1C          0715*      inc e
042539 2F          0716*      cpl
04253A 4F          0717*      ld c,a
04253B             0718*  ; Iteration 7
04253B 29          0719*      add hl,hl
04253C CB 11       0720*      rl c
04253E 29          0721*      add hl,hl
04253F CB 11       0722*      rl c
042541 CB 10       0723*      rl b
042543 EB          0724*      ex de,hl
042544 29          0725*      add hl,hl
042545 E5          0726*      push hl
042546 ED 42       0727*      sbc hl,bc
042548 30 06       0728*      jr nc,$+8
04254A 7C          0729*      ld a,h
04254B 2F          0730*      cpl
04254C 47          0731*      ld b,a
04254D 7D          0732*      ld a,l
04254E 2F          0733*      cpl
04254F 4F          0734*      ld c,a
042550 E1          0735*      pop hl
042551 30 02       0736*      jr nc,$+4
042553 23          0737*      inc hl
042554 23          0738*      inc hl
042555 EB          0739*      ex de,hl
042556             0740*  ; Iteration 8
042556 29          0741*      add hl,hl
042557 69          0742*      ld l,c
042558 60          0743*      ld h,b
042559 ED 6A       0744*      adc hl,hl
04255B ED 6A       0745*      adc hl,hl
04255D EB          0746*      ex de,hl
04255E 29          0747*      add hl,hl
04255F ED 52       0748*      sbc hl,de
042561 19          0749*      add hl,de
042562 EB          0750*      ex de,hl
042563 30 04       0751*      jr nc,$+6
042565 ED 52       0752*      sbc hl,de
042567 13          0753*      inc de
042568 13          0754*      inc de
042569             0755*  ; Iteration 9
042569 F1          0756*      pop af
04256A 17          0757*      rla
04256B ED 6A       0758*      adc hl,hl
04256D 17          0759*      rla
04256E ED 6A       0760*      adc hl,hl
042570 EB          0761*      ex de,hl
042571 29          0762*      add hl,hl
042572 ED 52       0763*      sbc hl,de
042574 19          0764*      add hl,de
042575 EB          0765*      ex de,hl
042576 30 04       0766*      jr nc,$+6
042578 ED 52       0767*      sbc hl,de
04257A 13          0768*      inc de
04257B 13          0769*      inc de
04257C             0770*  ; Iteration 10
04257C 17          0771*      rla
04257D ED 6A       0772*      adc hl,hl
04257F 17          0773*      rla
042580 ED 6A       0774*      adc hl,hl
042582 EB          0775*      ex de,hl
042583 29          0776*      add hl,hl
042584 ED 52       0777*      sbc hl,de
042586 19          0778*      add hl,de
042587 EB          0779*      ex de,hl
042588 30 04       0780*      jr nc,$+6
04258A ED 52       0781*      sbc hl,de
04258C 13          0782*      inc de
04258D 13          0783*      inc de
04258E             0784*  ; Iteration 11
04258E 17          0785*      rla
04258F ED 6A       0786*      adc hl,hl
042591 17          0787*      rla
042592 ED 6A       0788*      adc hl,hl
042594 EB          0789*      ex de,hl
042595 29          0790*      add hl,hl
042596 ED 52       0791*      sbc hl,de
042598 19          0792*      add hl,de
042599 EB          0793*      ex de,hl
04259A 30 04       0794*      jr nc,$+6
04259C ED 52       0795*      sbc hl,de
04259E 13          0796*      inc de
04259F 13          0797*      inc de
0425A0             0798*  ; Iteration 12
0425A0 17          0799*      rla
0425A1 ED 6A       0800*      adc hl,hl
0425A3 17          0801*      rla
0425A4 ED 6A       0802*      adc hl,hl
0425A6 EB          0803*      ex de,hl
0425A7 29          0804*      add hl,hl
0425A8 ED 52       0805*      sbc hl,de
0425AA 19          0806*      add hl,de
0425AB EB          0807*      ex de,hl
0425AC 30 04       0808*      jr nc,$+6
0425AE ED 52       0809*      sbc hl,de
0425B0 13          0810*      inc de
0425B1 13          0811*      inc de
0425B2 CB 1A       0812*      rr d
0425B4 CB 1B       0813*      rr e
0425B6 C9          0814*      ret
0425B7             0815*  
0425B7             0816*  sin_lut_168:
0425B7 00 00 00    0817*  	dl 0x000000 ; 0.000 00, 0.000
0425BA 06 00 00    0818*  	dl 0x000006 ; 1.406 01, 0.025
0425BD 0C 00 00    0819*  	dl 0x00000C ; 2.813 02, 0.049
0425C0 12 00 00    0820*  	dl 0x000012 ; 4.219 03, 0.074
0425C3 19 00 00    0821*  	dl 0x000019 ; 5.625 04, 0.098
0425C6 1F 00 00    0822*  	dl 0x00001F ; 7.031 05, 0.122
0425C9 25 00 00    0823*  	dl 0x000025 ; 8.438 06, 0.147
0425CC 2B 00 00    0824*  	dl 0x00002B ; 9.844 07, 0.171
0425CF 31 00 00    0825*  	dl 0x000031 ; 11.250 08, 0.195
0425D2 38 00 00    0826*  	dl 0x000038 ; 12.656 09, 0.219
0425D5 3E 00 00    0827*  	dl 0x00003E ; 14.063 0A, 0.243
0425D8 44 00 00    0828*  	dl 0x000044 ; 15.469 0B, 0.267
0425DB 4A 00 00    0829*  	dl 0x00004A ; 16.875 0C, 0.290
0425DE 50 00 00    0830*  	dl 0x000050 ; 18.281 0D, 0.314
0425E1 56 00 00    0831*  	dl 0x000056 ; 19.688 0E, 0.337
0425E4 5C 00 00    0832*  	dl 0x00005C ; 21.094 0F, 0.360
0425E7 61 00 00    0833*  	dl 0x000061 ; 22.500 10, 0.383
0425EA 67 00 00    0834*  	dl 0x000067 ; 23.906 11, 0.405
0425ED 6D 00 00    0835*  	dl 0x00006D ; 25.313 12, 0.428
0425F0 73 00 00    0836*  	dl 0x000073 ; 26.719 13, 0.450
0425F3 78 00 00    0837*  	dl 0x000078 ; 28.125 14, 0.471
0425F6 7E 00 00    0838*  	dl 0x00007E ; 29.531 15, 0.493
0425F9 83 00 00    0839*  	dl 0x000083 ; 30.938 16, 0.514
0425FC 88 00 00    0840*  	dl 0x000088 ; 32.344 17, 0.535
0425FF 8E 00 00    0841*  	dl 0x00008E ; 33.750 18, 0.556
042602 93 00 00    0842*  	dl 0x000093 ; 35.156 19, 0.576
042605 98 00 00    0843*  	dl 0x000098 ; 36.563 1A, 0.596
042608 9D 00 00    0844*  	dl 0x00009D ; 37.969 1B, 0.615
04260B A2 00 00    0845*  	dl 0x0000A2 ; 39.375 1C, 0.634
04260E A7 00 00    0846*  	dl 0x0000A7 ; 40.781 1D, 0.653
042611 AB 00 00    0847*  	dl 0x0000AB ; 42.188 1E, 0.672
042614 B0 00 00    0848*  	dl 0x0000B0 ; 43.594 1F, 0.690
042617 B5 00 00    0849*  	dl 0x0000B5 ; 45.000 20, 0.707
04261A B9 00 00    0850*  	dl 0x0000B9 ; 46.406 21, 0.724
04261D BD 00 00    0851*  	dl 0x0000BD ; 47.813 22, 0.741
042620 C1 00 00    0852*  	dl 0x0000C1 ; 49.219 23, 0.757
042623 C5 00 00    0853*  	dl 0x0000C5 ; 50.625 24, 0.773
042626 C9 00 00    0854*  	dl 0x0000C9 ; 52.031 25, 0.788
042629 CD 00 00    0855*  	dl 0x0000CD ; 53.438 26, 0.803
04262C D1 00 00    0856*  	dl 0x0000D1 ; 54.844 27, 0.818
04262F D4 00 00    0857*  	dl 0x0000D4 ; 56.250 28, 0.831
042632 D8 00 00    0858*  	dl 0x0000D8 ; 57.656 29, 0.845
042635 DB 00 00    0859*  	dl 0x0000DB ; 59.063 2A, 0.858
042638 DE 00 00    0860*  	dl 0x0000DE ; 60.469 2B, 0.870
04263B E1 00 00    0861*  	dl 0x0000E1 ; 61.875 2C, 0.882
04263E E4 00 00    0862*  	dl 0x0000E4 ; 63.281 2D, 0.893
042641 E7 00 00    0863*  	dl 0x0000E7 ; 64.688 2E, 0.904
042644 EA 00 00    0864*  	dl 0x0000EA ; 66.094 2F, 0.914
042647 EC 00 00    0865*  	dl 0x0000EC ; 67.500 30, 0.924
04264A EE 00 00    0866*  	dl 0x0000EE ; 68.906 31, 0.933
04264D F1 00 00    0867*  	dl 0x0000F1 ; 70.313 32, 0.942
042650 F3 00 00    0868*  	dl 0x0000F3 ; 71.719 33, 0.950
042653 F4 00 00    0869*  	dl 0x0000F4 ; 73.125 34, 0.957
042656 F6 00 00    0870*  	dl 0x0000F6 ; 74.531 35, 0.964
042659 F8 00 00    0871*  	dl 0x0000F8 ; 75.938 36, 0.970
04265C F9 00 00    0872*  	dl 0x0000F9 ; 77.344 37, 0.976
04265F FB 00 00    0873*  	dl 0x0000FB ; 78.750 38, 0.981
042662 FC 00 00    0874*  	dl 0x0000FC ; 80.156 39, 0.985
042665 FD 00 00    0875*  	dl 0x0000FD ; 81.563 3A, 0.989
042668 FE 00 00    0876*  	dl 0x0000FE ; 82.969 3B, 0.992
04266B FE 00 00    0877*  	dl 0x0000FE ; 84.375 3C, 0.995
04266E FF 00 00    0878*  	dl 0x0000FF ; 85.781 3D, 0.997
042671 FF 00 00    0879*  	dl 0x0000FF ; 87.188 3E, 0.999
042674 FF 00 00    0880*  	dl 0x0000FF ; 88.594 3F, 1.000
042677 00 01 00    0881*  	dl 0x000100 ; 90.000 40, 1.000
04267A FF 00 00    0882*  	dl 0x0000FF ; 91.406 41, 1.000
04267D FF 00 00    0883*  	dl 0x0000FF ; 92.813 42, 0.999
042680 FF 00 00    0884*  	dl 0x0000FF ; 94.219 43, 0.997
042683 FE 00 00    0885*  	dl 0x0000FE ; 95.625 44, 0.995
042686 FE 00 00    0886*  	dl 0x0000FE ; 97.031 45, 0.992
042689 FD 00 00    0887*  	dl 0x0000FD ; 98.438 46, 0.989
04268C FC 00 00    0888*  	dl 0x0000FC ; 99.844 47, 0.985
04268F FB 00 00    0889*  	dl 0x0000FB ; 101.250 48, 0.981
042692 F9 00 00    0890*  	dl 0x0000F9 ; 102.656 49, 0.976
042695 F8 00 00    0891*  	dl 0x0000F8 ; 104.063 4A, 0.970
042698 F6 00 00    0892*  	dl 0x0000F6 ; 105.469 4B, 0.964
04269B F4 00 00    0893*  	dl 0x0000F4 ; 106.875 4C, 0.957
04269E F3 00 00    0894*  	dl 0x0000F3 ; 108.281 4D, 0.950
0426A1 F1 00 00    0895*  	dl 0x0000F1 ; 109.688 4E, 0.942
0426A4 EE 00 00    0896*  	dl 0x0000EE ; 111.094 4F, 0.933
0426A7 EC 00 00    0897*  	dl 0x0000EC ; 112.500 50, 0.924
0426AA EA 00 00    0898*  	dl 0x0000EA ; 113.906 51, 0.914
0426AD E7 00 00    0899*  	dl 0x0000E7 ; 115.313 52, 0.904
0426B0 E4 00 00    0900*  	dl 0x0000E4 ; 116.719 53, 0.893
0426B3 E1 00 00    0901*  	dl 0x0000E1 ; 118.125 54, 0.882
0426B6 DE 00 00    0902*  	dl 0x0000DE ; 119.531 55, 0.870
0426B9 DB 00 00    0903*  	dl 0x0000DB ; 120.938 56, 0.858
0426BC D8 00 00    0904*  	dl 0x0000D8 ; 122.344 57, 0.845
0426BF D4 00 00    0905*  	dl 0x0000D4 ; 123.750 58, 0.831
0426C2 D1 00 00    0906*  	dl 0x0000D1 ; 125.156 59, 0.818
0426C5 CD 00 00    0907*  	dl 0x0000CD ; 126.563 5A, 0.803
0426C8 C9 00 00    0908*  	dl 0x0000C9 ; 127.969 5B, 0.788
0426CB C5 00 00    0909*  	dl 0x0000C5 ; 129.375 5C, 0.773
0426CE C1 00 00    0910*  	dl 0x0000C1 ; 130.781 5D, 0.757
0426D1 BD 00 00    0911*  	dl 0x0000BD ; 132.188 5E, 0.741
0426D4 B9 00 00    0912*  	dl 0x0000B9 ; 133.594 5F, 0.724
0426D7 B5 00 00    0913*  	dl 0x0000B5 ; 135.000 60, 0.707
0426DA B0 00 00    0914*  	dl 0x0000B0 ; 136.406 61, 0.690
0426DD AB 00 00    0915*  	dl 0x0000AB ; 137.813 62, 0.672
0426E0 A7 00 00    0916*  	dl 0x0000A7 ; 139.219 63, 0.653
0426E3 A2 00 00    0917*  	dl 0x0000A2 ; 140.625 64, 0.634
0426E6 9D 00 00    0918*  	dl 0x00009D ; 142.031 65, 0.615
0426E9 98 00 00    0919*  	dl 0x000098 ; 143.438 66, 0.596
0426EC 93 00 00    0920*  	dl 0x000093 ; 144.844 67, 0.576
0426EF 8E 00 00    0921*  	dl 0x00008E ; 146.250 68, 0.556
0426F2 88 00 00    0922*  	dl 0x000088 ; 147.656 69, 0.535
0426F5 83 00 00    0923*  	dl 0x000083 ; 149.063 6A, 0.514
0426F8 7E 00 00    0924*  	dl 0x00007E ; 150.469 6B, 0.493
0426FB 78 00 00    0925*  	dl 0x000078 ; 151.875 6C, 0.471
0426FE 73 00 00    0926*  	dl 0x000073 ; 153.281 6D, 0.450
042701 6D 00 00    0927*  	dl 0x00006D ; 154.688 6E, 0.428
042704 67 00 00    0928*  	dl 0x000067 ; 156.094 6F, 0.405
042707 61 00 00    0929*  	dl 0x000061 ; 157.500 70, 0.383
04270A 5C 00 00    0930*  	dl 0x00005C ; 158.906 71, 0.360
04270D 56 00 00    0931*  	dl 0x000056 ; 160.313 72, 0.337
042710 50 00 00    0932*  	dl 0x000050 ; 161.719 73, 0.314
042713 4A 00 00    0933*  	dl 0x00004A ; 163.125 74, 0.290
042716 44 00 00    0934*  	dl 0x000044 ; 164.531 75, 0.267
042719 3E 00 00    0935*  	dl 0x00003E ; 165.938 76, 0.243
04271C 38 00 00    0936*  	dl 0x000038 ; 167.344 77, 0.219
04271F 31 00 00    0937*  	dl 0x000031 ; 168.750 78, 0.195
042722 2B 00 00    0938*  	dl 0x00002B ; 170.156 79, 0.171
042725 25 00 00    0939*  	dl 0x000025 ; 171.563 7A, 0.147
042728 1F 00 00    0940*  	dl 0x00001F ; 172.969 7B, 0.122
04272B 19 00 00    0941*  	dl 0x000019 ; 174.375 7C, 0.098
04272E 12 00 00    0942*  	dl 0x000012 ; 175.781 7D, 0.074
042731 0C 00 00    0943*  	dl 0x00000C ; 177.188 7E, 0.049
042734 06 00 00    0944*  	dl 0x000006 ; 178.594 7F, 0.025
042737 00 00 00    0945*  	dl 0x000000 ; 180.000 80, 0.000
04273A FA FF FF    0946*  	dl 0xFFFFFA ; 181.406 81, -0.025
04273D F4 FF FF    0947*  	dl 0xFFFFF4 ; 182.813 82, -0.049
042740 EE FF FF    0948*  	dl 0xFFFFEE ; 184.219 83, -0.074
042743 E7 FF FF    0949*  	dl 0xFFFFE7 ; 185.625 84, -0.098
042746 E1 FF FF    0950*  	dl 0xFFFFE1 ; 187.031 85, -0.122
042749 DB FF FF    0951*  	dl 0xFFFFDB ; 188.438 86, -0.147
04274C D5 FF FF    0952*  	dl 0xFFFFD5 ; 189.844 87, -0.171
04274F CF FF FF    0953*  	dl 0xFFFFCF ; 191.250 88, -0.195
042752 C8 FF FF    0954*  	dl 0xFFFFC8 ; 192.656 89, -0.219
042755 C2 FF FF    0955*  	dl 0xFFFFC2 ; 194.063 8A, -0.243
042758 BC FF FF    0956*  	dl 0xFFFFBC ; 195.469 8B, -0.267
04275B B6 FF FF    0957*  	dl 0xFFFFB6 ; 196.875 8C, -0.290
04275E B0 FF FF    0958*  	dl 0xFFFFB0 ; 198.281 8D, -0.314
042761 AA FF FF    0959*  	dl 0xFFFFAA ; 199.688 8E, -0.337
042764 A4 FF FF    0960*  	dl 0xFFFFA4 ; 201.094 8F, -0.360
042767 9F FF FF    0961*  	dl 0xFFFF9F ; 202.500 90, -0.383
04276A 99 FF FF    0962*  	dl 0xFFFF99 ; 203.906 91, -0.405
04276D 93 FF FF    0963*  	dl 0xFFFF93 ; 205.313 92, -0.428
042770 8D FF FF    0964*  	dl 0xFFFF8D ; 206.719 93, -0.450
042773 88 FF FF    0965*  	dl 0xFFFF88 ; 208.125 94, -0.471
042776 82 FF FF    0966*  	dl 0xFFFF82 ; 209.531 95, -0.493
042779 7D FF FF    0967*  	dl 0xFFFF7D ; 210.938 96, -0.514
04277C 78 FF FF    0968*  	dl 0xFFFF78 ; 212.344 97, -0.535
04277F 72 FF FF    0969*  	dl 0xFFFF72 ; 213.750 98, -0.556
042782 6D FF FF    0970*  	dl 0xFFFF6D ; 215.156 99, -0.576
042785 68 FF FF    0971*  	dl 0xFFFF68 ; 216.563 9A, -0.596
042788 63 FF FF    0972*  	dl 0xFFFF63 ; 217.969 9B, -0.615
04278B 5E FF FF    0973*  	dl 0xFFFF5E ; 219.375 9C, -0.634
04278E 59 FF FF    0974*  	dl 0xFFFF59 ; 220.781 9D, -0.653
042791 55 FF FF    0975*  	dl 0xFFFF55 ; 222.188 9E, -0.672
042794 50 FF FF    0976*  	dl 0xFFFF50 ; 223.594 9F, -0.690
042797 4B FF FF    0977*  	dl 0xFFFF4B ; 225.000 A0, -0.707
04279A 47 FF FF    0978*  	dl 0xFFFF47 ; 226.406 A1, -0.724
04279D 43 FF FF    0979*  	dl 0xFFFF43 ; 227.813 A2, -0.741
0427A0 3F FF FF    0980*  	dl 0xFFFF3F ; 229.219 A3, -0.757
0427A3 3B FF FF    0981*  	dl 0xFFFF3B ; 230.625 A4, -0.773
0427A6 37 FF FF    0982*  	dl 0xFFFF37 ; 232.031 A5, -0.788
0427A9 33 FF FF    0983*  	dl 0xFFFF33 ; 233.438 A6, -0.803
0427AC 2F FF FF    0984*  	dl 0xFFFF2F ; 234.844 A7, -0.818
0427AF 2C FF FF    0985*  	dl 0xFFFF2C ; 236.250 A8, -0.831
0427B2 28 FF FF    0986*  	dl 0xFFFF28 ; 237.656 A9, -0.845
0427B5 25 FF FF    0987*  	dl 0xFFFF25 ; 239.063 AA, -0.858
0427B8 22 FF FF    0988*  	dl 0xFFFF22 ; 240.469 AB, -0.870
0427BB 1F FF FF    0989*  	dl 0xFFFF1F ; 241.875 AC, -0.882
0427BE 1C FF FF    0990*  	dl 0xFFFF1C ; 243.281 AD, -0.893
0427C1 19 FF FF    0991*  	dl 0xFFFF19 ; 244.688 AE, -0.904
0427C4 16 FF FF    0992*  	dl 0xFFFF16 ; 246.094 AF, -0.914
0427C7 14 FF FF    0993*  	dl 0xFFFF14 ; 247.500 B0, -0.924
0427CA 12 FF FF    0994*  	dl 0xFFFF12 ; 248.906 B1, -0.933
0427CD 0F FF FF    0995*  	dl 0xFFFF0F ; 250.313 B2, -0.942
0427D0 0D FF FF    0996*  	dl 0xFFFF0D ; 251.719 B3, -0.950
0427D3 0C FF FF    0997*  	dl 0xFFFF0C ; 253.125 B4, -0.957
0427D6 0A FF FF    0998*  	dl 0xFFFF0A ; 254.531 B5, -0.964
0427D9 08 FF FF    0999*  	dl 0xFFFF08 ; 255.938 B6, -0.970
0427DC 07 FF FF    1000*  	dl 0xFFFF07 ; 257.344 B7, -0.976
0427DF 05 FF FF    1001*  	dl 0xFFFF05 ; 258.750 B8, -0.981
0427E2 04 FF FF    1002*  	dl 0xFFFF04 ; 260.156 B9, -0.985
0427E5 03 FF FF    1003*  	dl 0xFFFF03 ; 261.563 BA, -0.989
0427E8 02 FF FF    1004*  	dl 0xFFFF02 ; 262.969 BB, -0.992
0427EB 02 FF FF    1005*  	dl 0xFFFF02 ; 264.375 BC, -0.995
0427EE 01 FF FF    1006*  	dl 0xFFFF01 ; 265.781 BD, -0.997
0427F1 01 FF FF    1007*  	dl 0xFFFF01 ; 267.188 BE, -0.999
0427F4 01 FF FF    1008*  	dl 0xFFFF01 ; 268.594 BF, -1.000
0427F7 00 FF FF    1009*  	dl 0xFFFF00 ; 270.000 C0, -1.000
0427FA 01 FF FF    1010*  	dl 0xFFFF01 ; 271.406 C1, -1.000
0427FD 01 FF FF    1011*  	dl 0xFFFF01 ; 272.813 C2, -0.999
042800 01 FF FF    1012*  	dl 0xFFFF01 ; 274.219 C3, -0.997
042803 02 FF FF    1013*  	dl 0xFFFF02 ; 275.625 C4, -0.995
042806 02 FF FF    1014*  	dl 0xFFFF02 ; 277.031 C5, -0.992
042809 03 FF FF    1015*  	dl 0xFFFF03 ; 278.438 C6, -0.989
04280C 04 FF FF    1016*  	dl 0xFFFF04 ; 279.844 C7, -0.985
04280F 05 FF FF    1017*  	dl 0xFFFF05 ; 281.250 C8, -0.981
042812 07 FF FF    1018*  	dl 0xFFFF07 ; 282.656 C9, -0.976
042815 08 FF FF    1019*  	dl 0xFFFF08 ; 284.063 CA, -0.970
042818 0A FF FF    1020*  	dl 0xFFFF0A ; 285.469 CB, -0.964
04281B 0C FF FF    1021*  	dl 0xFFFF0C ; 286.875 CC, -0.957
04281E 0D FF FF    1022*  	dl 0xFFFF0D ; 288.281 CD, -0.950
042821 0F FF FF    1023*  	dl 0xFFFF0F ; 289.688 CE, -0.942
042824 12 FF FF    1024*  	dl 0xFFFF12 ; 291.094 CF, -0.933
042827 14 FF FF    1025*  	dl 0xFFFF14 ; 292.500 D0, -0.924
04282A 16 FF FF    1026*  	dl 0xFFFF16 ; 293.906 D1, -0.914
04282D 19 FF FF    1027*  	dl 0xFFFF19 ; 295.313 D2, -0.904
042830 1C FF FF    1028*  	dl 0xFFFF1C ; 296.719 D3, -0.893
042833 1F FF FF    1029*  	dl 0xFFFF1F ; 298.125 D4, -0.882
042836 22 FF FF    1030*  	dl 0xFFFF22 ; 299.531 D5, -0.870
042839 25 FF FF    1031*  	dl 0xFFFF25 ; 300.938 D6, -0.858
04283C 28 FF FF    1032*  	dl 0xFFFF28 ; 302.344 D7, -0.845
04283F 2C FF FF    1033*  	dl 0xFFFF2C ; 303.750 D8, -0.831
042842 2F FF FF    1034*  	dl 0xFFFF2F ; 305.156 D9, -0.818
042845 33 FF FF    1035*  	dl 0xFFFF33 ; 306.563 DA, -0.803
042848 37 FF FF    1036*  	dl 0xFFFF37 ; 307.969 DB, -0.788
04284B 3B FF FF    1037*  	dl 0xFFFF3B ; 309.375 DC, -0.773
04284E 3F FF FF    1038*  	dl 0xFFFF3F ; 310.781 DD, -0.757
042851 43 FF FF    1039*  	dl 0xFFFF43 ; 312.188 DE, -0.741
042854 47 FF FF    1040*  	dl 0xFFFF47 ; 313.594 DF, -0.724
042857 4B FF FF    1041*  	dl 0xFFFF4B ; 315.000 E0, -0.707
04285A 50 FF FF    1042*  	dl 0xFFFF50 ; 316.406 E1, -0.690
04285D 55 FF FF    1043*  	dl 0xFFFF55 ; 317.813 E2, -0.672
042860 59 FF FF    1044*  	dl 0xFFFF59 ; 319.219 E3, -0.653
042863 5E FF FF    1045*  	dl 0xFFFF5E ; 320.625 E4, -0.634
042866 63 FF FF    1046*  	dl 0xFFFF63 ; 322.031 E5, -0.615
042869 68 FF FF    1047*  	dl 0xFFFF68 ; 323.438 E6, -0.596
04286C 6D FF FF    1048*  	dl 0xFFFF6D ; 324.844 E7, -0.576
04286F 72 FF FF    1049*  	dl 0xFFFF72 ; 326.250 E8, -0.556
042872 78 FF FF    1050*  	dl 0xFFFF78 ; 327.656 E9, -0.535
042875 7D FF FF    1051*  	dl 0xFFFF7D ; 329.063 EA, -0.514
042878 82 FF FF    1052*  	dl 0xFFFF82 ; 330.469 EB, -0.493
04287B 88 FF FF    1053*  	dl 0xFFFF88 ; 331.875 EC, -0.471
04287E 8D FF FF    1054*  	dl 0xFFFF8D ; 333.281 ED, -0.450
042881 93 FF FF    1055*  	dl 0xFFFF93 ; 334.688 EE, -0.428
042884 99 FF FF    1056*  	dl 0xFFFF99 ; 336.094 EF, -0.405
042887 9F FF FF    1057*  	dl 0xFFFF9F ; 337.500 F0, -0.383
04288A A4 FF FF    1058*  	dl 0xFFFFA4 ; 338.906 F1, -0.360
04288D AA FF FF    1059*  	dl 0xFFFFAA ; 340.313 F2, -0.337
042890 B0 FF FF    1060*  	dl 0xFFFFB0 ; 341.719 F3, -0.314
042893 B6 FF FF    1061*  	dl 0xFFFFB6 ; 343.125 F4, -0.290
042896 BC FF FF    1062*  	dl 0xFFFFBC ; 344.531 F5, -0.267
042899 C2 FF FF    1063*  	dl 0xFFFFC2 ; 345.938 F6, -0.243
04289C C8 FF FF    1064*  	dl 0xFFFFC8 ; 347.344 F7, -0.219
04289F CF FF FF    1065*  	dl 0xFFFFCF ; 348.750 F8, -0.195
0428A2 D5 FF FF    1066*  	dl 0xFFFFD5 ; 350.156 F9, -0.171
0428A5 DB FF FF    1067*  	dl 0xFFFFDB ; 351.563 FA, -0.147
0428A8 E1 FF FF    1068*  	dl 0xFFFFE1 ; 352.969 FB, -0.122
0428AB E7 FF FF    1069*  	dl 0xFFFFE7 ; 354.375 FC, -0.098
0428AE EE FF FF    1070*  	dl 0xFFFFEE ; 355.781 FD, -0.074
0428B1 F4 FF FF    1071*  	dl 0xFFFFF4 ; 357.188 FE, -0.049
0428B4 FA FF FF    1072*  	dl 0xFFFFFA ; 358.594 FF, -0.025
0428B7 00 00 00    1073*  	dl 0x000000 ; 0.000 00, 0.000 for interpolation
0428BA             1074*  
0428BA             1075*  atan_lut_168:
0428BA 00 00 00    1076*  	dl 0x000000 ; 000000, 0.000
0428BD 28 00 00    1077*  	dl 0x000028 ; 000001, 0.224
0428C0 51 00 00    1078*  	dl 0x000051 ; 000002, 0.448
0428C3 7A 00 00    1079*  	dl 0x00007A ; 000003, 0.671
0428C6 A2 00 00    1080*  	dl 0x0000A2 ; 000004, 0.895
0428C9 CB 00 00    1081*  	dl 0x0000CB ; 000005, 1.119
0428CC F4 00 00    1082*  	dl 0x0000F4 ; 000006, 1.343
0428CF 1D 01 00    1083*  	dl 0x00011D ; 000007, 1.566
0428D2 45 01 00    1084*  	dl 0x000145 ; 000008, 1.790
0428D5 6E 01 00    1085*  	dl 0x00016E ; 000009, 2.013
0428D8 97 01 00    1086*  	dl 0x000197 ; 00000A, 2.237
0428DB BF 01 00    1087*  	dl 0x0001BF ; 00000B, 2.460
0428DE E8 01 00    1088*  	dl 0x0001E8 ; 00000C, 2.684
0428E1 11 02 00    1089*  	dl 0x000211 ; 00000D, 2.907
0428E4 39 02 00    1090*  	dl 0x000239 ; 00000E, 3.130
0428E7 62 02 00    1091*  	dl 0x000262 ; 00000F, 3.353
0428EA 8B 02 00    1092*  	dl 0x00028B ; 000010, 3.576
0428ED B3 02 00    1093*  	dl 0x0002B3 ; 000011, 3.799
0428F0 DC 02 00    1094*  	dl 0x0002DC ; 000012, 4.022
0428F3 04 03 00    1095*  	dl 0x000304 ; 000013, 4.245
0428F6 2D 03 00    1096*  	dl 0x00032D ; 000014, 4.467
0428F9 55 03 00    1097*  	dl 0x000355 ; 000015, 4.690
0428FC 7E 03 00    1098*  	dl 0x00037E ; 000016, 4.912
0428FF A6 03 00    1099*  	dl 0x0003A6 ; 000017, 5.134
042902 CE 03 00    1100*  	dl 0x0003CE ; 000018, 5.356
042905 F7 03 00    1101*  	dl 0x0003F7 ; 000019, 5.578
042908 1F 04 00    1102*  	dl 0x00041F ; 00001A, 5.799
04290B 48 04 00    1103*  	dl 0x000448 ; 00001B, 6.021
04290E 70 04 00    1104*  	dl 0x000470 ; 00001C, 6.242
042911 98 04 00    1105*  	dl 0x000498 ; 00001D, 6.463
042914 C0 04 00    1106*  	dl 0x0004C0 ; 00001E, 6.684
042917 E8 04 00    1107*  	dl 0x0004E8 ; 00001F, 6.905
04291A 11 05 00    1108*  	dl 0x000511 ; 000020, 7.125
04291D 39 05 00    1109*  	dl 0x000539 ; 000021, 7.345
042920 61 05 00    1110*  	dl 0x000561 ; 000022, 7.565
042923 89 05 00    1111*  	dl 0x000589 ; 000023, 7.785
042926 B1 05 00    1112*  	dl 0x0005B1 ; 000024, 8.005
042929 D9 05 00    1113*  	dl 0x0005D9 ; 000025, 8.224
04292C 01 06 00    1114*  	dl 0x000601 ; 000026, 8.443
04292F 28 06 00    1115*  	dl 0x000628 ; 000027, 8.662
042932 50 06 00    1116*  	dl 0x000650 ; 000028, 8.881
042935 78 06 00    1117*  	dl 0x000678 ; 000029, 9.099
042938 A0 06 00    1118*  	dl 0x0006A0 ; 00002A, 9.317
04293B C7 06 00    1119*  	dl 0x0006C7 ; 00002B, 9.535
04293E EF 06 00    1120*  	dl 0x0006EF ; 00002C, 9.752
042941 16 07 00    1121*  	dl 0x000716 ; 00002D, 9.970
042944 3E 07 00    1122*  	dl 0x00073E ; 00002E, 10.187
042947 65 07 00    1123*  	dl 0x000765 ; 00002F, 10.403
04294A 8D 07 00    1124*  	dl 0x00078D ; 000030, 10.620
04294D B4 07 00    1125*  	dl 0x0007B4 ; 000031, 10.836
042950 DB 07 00    1126*  	dl 0x0007DB ; 000032, 11.051
042953 03 08 00    1127*  	dl 0x000803 ; 000033, 11.267
042956 2A 08 00    1128*  	dl 0x00082A ; 000034, 11.482
042959 51 08 00    1129*  	dl 0x000851 ; 000035, 11.697
04295C 78 08 00    1130*  	dl 0x000878 ; 000036, 11.911
04295F 9F 08 00    1131*  	dl 0x00089F ; 000037, 12.125
042962 C6 08 00    1132*  	dl 0x0008C6 ; 000038, 12.339
042965 ED 08 00    1133*  	dl 0x0008ED ; 000039, 12.553
042968 13 09 00    1134*  	dl 0x000913 ; 00003A, 12.766
04296B 3A 09 00    1135*  	dl 0x00093A ; 00003B, 12.978
04296E 61 09 00    1136*  	dl 0x000961 ; 00003C, 13.191
042971 87 09 00    1137*  	dl 0x000987 ; 00003D, 13.403
042974 AE 09 00    1138*  	dl 0x0009AE ; 00003E, 13.614
042977 D4 09 00    1139*  	dl 0x0009D4 ; 00003F, 13.825
04297A FB 09 00    1140*  	dl 0x0009FB ; 000040, 14.036
04297D 21 0A 00    1141*  	dl 0x000A21 ; 000041, 14.247
042980 47 0A 00    1142*  	dl 0x000A47 ; 000042, 14.457
042983 6D 0A 00    1143*  	dl 0x000A6D ; 000043, 14.666
042986 94 0A 00    1144*  	dl 0x000A94 ; 000044, 14.876
042989 BA 0A 00    1145*  	dl 0x000ABA ; 000045, 15.085
04298C E0 0A 00    1146*  	dl 0x000AE0 ; 000046, 15.293
04298F 05 0B 00    1147*  	dl 0x000B05 ; 000047, 15.501
042992 2B 0B 00    1148*  	dl 0x000B2B ; 000048, 15.709
042995 51 0B 00    1149*  	dl 0x000B51 ; 000049, 15.916
042998 77 0B 00    1150*  	dl 0x000B77 ; 00004A, 16.123
04299B 9C 0B 00    1151*  	dl 0x000B9C ; 00004B, 16.329
04299E C2 0B 00    1152*  	dl 0x000BC2 ; 00004C, 16.535
0429A1 E7 0B 00    1153*  	dl 0x000BE7 ; 00004D, 16.740
0429A4 0C 0C 00    1154*  	dl 0x000C0C ; 00004E, 16.945
0429A7 32 0C 00    1155*  	dl 0x000C32 ; 00004F, 17.150
0429AA 57 0C 00    1156*  	dl 0x000C57 ; 000050, 17.354
0429AD 7C 0C 00    1157*  	dl 0x000C7C ; 000051, 17.558
0429B0 A1 0C 00    1158*  	dl 0x000CA1 ; 000052, 17.761
0429B3 C6 0C 00    1159*  	dl 0x000CC6 ; 000053, 17.964
0429B6 EB 0C 00    1160*  	dl 0x000CEB ; 000054, 18.166
0429B9 0F 0D 00    1161*  	dl 0x000D0F ; 000055, 18.368
0429BC 34 0D 00    1162*  	dl 0x000D34 ; 000056, 18.569
0429BF 58 0D 00    1163*  	dl 0x000D58 ; 000057, 18.770
0429C2 7D 0D 00    1164*  	dl 0x000D7D ; 000058, 18.970
0429C5 A1 0D 00    1165*  	dl 0x000DA1 ; 000059, 19.170
0429C8 C6 0D 00    1166*  	dl 0x000DC6 ; 00005A, 19.370
0429CB EA 0D 00    1167*  	dl 0x000DEA ; 00005B, 19.569
0429CE 0E 0E 00    1168*  	dl 0x000E0E ; 00005C, 19.767
0429D1 32 0E 00    1169*  	dl 0x000E32 ; 00005D, 19.965
0429D4 56 0E 00    1170*  	dl 0x000E56 ; 00005E, 20.163
0429D7 7A 0E 00    1171*  	dl 0x000E7A ; 00005F, 20.360
0429DA 9E 0E 00    1172*  	dl 0x000E9E ; 000060, 20.556
0429DD C1 0E 00    1173*  	dl 0x000EC1 ; 000061, 20.752
0429E0 E5 0E 00    1174*  	dl 0x000EE5 ; 000062, 20.947
0429E3 08 0F 00    1175*  	dl 0x000F08 ; 000063, 21.142
0429E6 2C 0F 00    1176*  	dl 0x000F2C ; 000064, 21.337
0429E9 4F 0F 00    1177*  	dl 0x000F4F ; 000065, 21.531
0429EC 72 0F 00    1178*  	dl 0x000F72 ; 000066, 21.724
0429EF 95 0F 00    1179*  	dl 0x000F95 ; 000067, 21.917
0429F2 B8 0F 00    1180*  	dl 0x000FB8 ; 000068, 22.109
0429F5 DB 0F 00    1181*  	dl 0x000FDB ; 000069, 22.301
0429F8 FE 0F 00    1182*  	dl 0x000FFE ; 00006A, 22.493
0429FB 21 10 00    1183*  	dl 0x001021 ; 00006B, 22.683
0429FE 44 10 00    1184*  	dl 0x001044 ; 00006C, 22.874
042A01 66 10 00    1185*  	dl 0x001066 ; 00006D, 23.063
042A04 89 10 00    1186*  	dl 0x001089 ; 00006E, 23.253
042A07 AB 10 00    1187*  	dl 0x0010AB ; 00006F, 23.441
042A0A CD 10 00    1188*  	dl 0x0010CD ; 000070, 23.629
042A0D EF 10 00    1189*  	dl 0x0010EF ; 000071, 23.817
042A10 11 11 00    1190*  	dl 0x001111 ; 000072, 24.004
042A13 33 11 00    1191*  	dl 0x001133 ; 000073, 24.191
042A16 55 11 00    1192*  	dl 0x001155 ; 000074, 24.376
042A19 77 11 00    1193*  	dl 0x001177 ; 000075, 24.562
042A1C 99 11 00    1194*  	dl 0x001199 ; 000076, 24.747
042A1F BA 11 00    1195*  	dl 0x0011BA ; 000077, 24.931
042A22 DC 11 00    1196*  	dl 0x0011DC ; 000078, 25.115
042A25 FD 11 00    1197*  	dl 0x0011FD ; 000079, 25.298
042A28 1E 12 00    1198*  	dl 0x00121E ; 00007A, 25.481
042A2B 3F 12 00    1199*  	dl 0x00123F ; 00007B, 25.663
042A2E 60 12 00    1200*  	dl 0x001260 ; 00007C, 25.844
042A31 81 12 00    1201*  	dl 0x001281 ; 00007D, 26.025
042A34 A2 12 00    1202*  	dl 0x0012A2 ; 00007E, 26.206
042A37 C3 12 00    1203*  	dl 0x0012C3 ; 00007F, 26.386
042A3A E4 12 00    1204*  	dl 0x0012E4 ; 000080, 26.565
042A3D 04 13 00    1205*  	dl 0x001304 ; 000081, 26.744
042A40 25 13 00    1206*  	dl 0x001325 ; 000082, 26.922
042A43 45 13 00    1207*  	dl 0x001345 ; 000083, 27.100
042A46 65 13 00    1208*  	dl 0x001365 ; 000084, 27.277
042A49 85 13 00    1209*  	dl 0x001385 ; 000085, 27.453
042A4C A5 13 00    1210*  	dl 0x0013A5 ; 000086, 27.629
042A4F C5 13 00    1211*  	dl 0x0013C5 ; 000087, 27.805
042A52 E5 13 00    1212*  	dl 0x0013E5 ; 000088, 27.979
042A55 05 14 00    1213*  	dl 0x001405 ; 000089, 28.154
042A58 24 14 00    1214*  	dl 0x001424 ; 00008A, 28.327
042A5B 44 14 00    1215*  	dl 0x001444 ; 00008B, 28.501
042A5E 63 14 00    1216*  	dl 0x001463 ; 00008C, 28.673
042A61 83 14 00    1217*  	dl 0x001483 ; 00008D, 28.845
042A64 A2 14 00    1218*  	dl 0x0014A2 ; 00008E, 29.017
042A67 C1 14 00    1219*  	dl 0x0014C1 ; 00008F, 29.187
042A6A E0 14 00    1220*  	dl 0x0014E0 ; 000090, 29.358
042A6D FF 14 00    1221*  	dl 0x0014FF ; 000091, 29.527
042A70 1E 15 00    1222*  	dl 0x00151E ; 000092, 29.697
042A73 3C 15 00    1223*  	dl 0x00153C ; 000093, 29.865
042A76 5B 15 00    1224*  	dl 0x00155B ; 000094, 30.033
042A79 79 15 00    1225*  	dl 0x001579 ; 000095, 30.201
042A7C 98 15 00    1226*  	dl 0x001598 ; 000096, 30.368
042A7F B6 15 00    1227*  	dl 0x0015B6 ; 000097, 30.534
042A82 D4 15 00    1228*  	dl 0x0015D4 ; 000098, 30.700
042A85 F2 15 00    1229*  	dl 0x0015F2 ; 000099, 30.865
042A88 10 16 00    1230*  	dl 0x001610 ; 00009A, 31.030
042A8B 2E 16 00    1231*  	dl 0x00162E ; 00009B, 31.194
042A8E 4C 16 00    1232*  	dl 0x00164C ; 00009C, 31.357
042A91 6A 16 00    1233*  	dl 0x00166A ; 00009D, 31.520
042A94 87 16 00    1234*  	dl 0x001687 ; 00009E, 31.682
042A97 A5 16 00    1235*  	dl 0x0016A5 ; 00009F, 31.844
042A9A C2 16 00    1236*  	dl 0x0016C2 ; 0000A0, 32.005
042A9D DF 16 00    1237*  	dl 0x0016DF ; 0000A1, 32.166
042AA0 FC 16 00    1238*  	dl 0x0016FC ; 0000A2, 32.326
042AA3 19 17 00    1239*  	dl 0x001719 ; 0000A3, 32.486
042AA6 36 17 00    1240*  	dl 0x001736 ; 0000A4, 32.645
042AA9 53 17 00    1241*  	dl 0x001753 ; 0000A5, 32.803
042AAC 70 17 00    1242*  	dl 0x001770 ; 0000A6, 32.961
042AAF 8C 17 00    1243*  	dl 0x00178C ; 0000A7, 33.118
042AB2 A9 17 00    1244*  	dl 0x0017A9 ; 0000A8, 33.275
042AB5 C5 17 00    1245*  	dl 0x0017C5 ; 0000A9, 33.431
042AB8 E2 17 00    1246*  	dl 0x0017E2 ; 0000AA, 33.587
042ABB FE 17 00    1247*  	dl 0x0017FE ; 0000AB, 33.742
042ABE 1A 18 00    1248*  	dl 0x00181A ; 0000AC, 33.896
042AC1 36 18 00    1249*  	dl 0x001836 ; 0000AD, 34.050
042AC4 52 18 00    1250*  	dl 0x001852 ; 0000AE, 34.203
042AC7 6E 18 00    1251*  	dl 0x00186E ; 0000AF, 34.356
042ACA 8A 18 00    1252*  	dl 0x00188A ; 0000B0, 34.509
042ACD A5 18 00    1253*  	dl 0x0018A5 ; 0000B1, 34.660
042AD0 C1 18 00    1254*  	dl 0x0018C1 ; 0000B2, 34.811
042AD3 DC 18 00    1255*  	dl 0x0018DC ; 0000B3, 34.962
042AD6 F7 18 00    1256*  	dl 0x0018F7 ; 0000B4, 35.112
042AD9 13 19 00    1257*  	dl 0x001913 ; 0000B5, 35.262
042ADC 2E 19 00    1258*  	dl 0x00192E ; 0000B6, 35.410
042ADF 49 19 00    1259*  	dl 0x001949 ; 0000B7, 35.559
042AE2 64 19 00    1260*  	dl 0x001964 ; 0000B8, 35.707
042AE5 7F 19 00    1261*  	dl 0x00197F ; 0000B9, 35.854
042AE8 99 19 00    1262*  	dl 0x001999 ; 0000BA, 36.001
042AEB B4 19 00    1263*  	dl 0x0019B4 ; 0000BB, 36.147
042AEE CE 19 00    1264*  	dl 0x0019CE ; 0000BC, 36.293
042AF1 E9 19 00    1265*  	dl 0x0019E9 ; 0000BD, 36.438
042AF4 03 1A 00    1266*  	dl 0x001A03 ; 0000BE, 36.582
042AF7 1D 1A 00    1267*  	dl 0x001A1D ; 0000BF, 36.726
042AFA 37 1A 00    1268*  	dl 0x001A37 ; 0000C0, 36.870
042AFD 51 1A 00    1269*  	dl 0x001A51 ; 0000C1, 37.013
042B00 6B 1A 00    1270*  	dl 0x001A6B ; 0000C2, 37.155
042B03 85 1A 00    1271*  	dl 0x001A85 ; 0000C3, 37.297
042B06 9F 1A 00    1272*  	dl 0x001A9F ; 0000C4, 37.439
042B09 B9 1A 00    1273*  	dl 0x001AB9 ; 0000C5, 37.579
042B0C D2 1A 00    1274*  	dl 0x001AD2 ; 0000C6, 37.720
042B0F EC 1A 00    1275*  	dl 0x001AEC ; 0000C7, 37.859
042B12 05 1B 00    1276*  	dl 0x001B05 ; 0000C8, 37.999
042B15 1E 1B 00    1277*  	dl 0x001B1E ; 0000C9, 38.137
042B18 37 1B 00    1278*  	dl 0x001B37 ; 0000CA, 38.276
042B1B 50 1B 00    1279*  	dl 0x001B50 ; 0000CB, 38.413
042B1E 69 1B 00    1280*  	dl 0x001B69 ; 0000CC, 38.550
042B21 82 1B 00    1281*  	dl 0x001B82 ; 0000CD, 38.687
042B24 9B 1B 00    1282*  	dl 0x001B9B ; 0000CE, 38.823
042B27 B4 1B 00    1283*  	dl 0x001BB4 ; 0000CF, 38.959
042B2A CC 1B 00    1284*  	dl 0x001BCC ; 0000D0, 39.094
042B2D E5 1B 00    1285*  	dl 0x001BE5 ; 0000D1, 39.228
042B30 FD 1B 00    1286*  	dl 0x001BFD ; 0000D2, 39.362
042B33 16 1C 00    1287*  	dl 0x001C16 ; 0000D3, 39.496
042B36 2E 1C 00    1288*  	dl 0x001C2E ; 0000D4, 39.629
042B39 46 1C 00    1289*  	dl 0x001C46 ; 0000D5, 39.762
042B3C 5E 1C 00    1290*  	dl 0x001C5E ; 0000D6, 39.894
042B3F 76 1C 00    1291*  	dl 0x001C76 ; 0000D7, 40.025
042B42 8E 1C 00    1292*  	dl 0x001C8E ; 0000D8, 40.156
042B45 A5 1C 00    1293*  	dl 0x001CA5 ; 0000D9, 40.286
042B48 BD 1C 00    1294*  	dl 0x001CBD ; 0000DA, 40.416
042B4B D5 1C 00    1295*  	dl 0x001CD5 ; 0000DB, 40.546
042B4E EC 1C 00    1296*  	dl 0x001CEC ; 0000DC, 40.675
042B51 04 1D 00    1297*  	dl 0x001D04 ; 0000DD, 40.803
042B54 1B 1D 00    1298*  	dl 0x001D1B ; 0000DE, 40.931
042B57 32 1D 00    1299*  	dl 0x001D32 ; 0000DF, 41.059
042B5A 49 1D 00    1300*  	dl 0x001D49 ; 0000E0, 41.186
042B5D 60 1D 00    1301*  	dl 0x001D60 ; 0000E1, 41.312
042B60 77 1D 00    1302*  	dl 0x001D77 ; 0000E2, 41.438
042B63 8E 1D 00    1303*  	dl 0x001D8E ; 0000E3, 41.564
042B66 A5 1D 00    1304*  	dl 0x001DA5 ; 0000E4, 41.689
042B69 BB 1D 00    1305*  	dl 0x001DBB ; 0000E5, 41.814
042B6C D2 1D 00    1306*  	dl 0x001DD2 ; 0000E6, 41.938
042B6F E9 1D 00    1307*  	dl 0x001DE9 ; 0000E7, 42.061
042B72 FF 1D 00    1308*  	dl 0x001DFF ; 0000E8, 42.184
042B75 15 1E 00    1309*  	dl 0x001E15 ; 0000E9, 42.307
042B78 2C 1E 00    1310*  	dl 0x001E2C ; 0000EA, 42.429
042B7B 42 1E 00    1311*  	dl 0x001E42 ; 0000EB, 42.551
042B7E 58 1E 00    1312*  	dl 0x001E58 ; 0000EC, 42.672
042B81 6E 1E 00    1313*  	dl 0x001E6E ; 0000ED, 42.793
042B84 84 1E 00    1314*  	dl 0x001E84 ; 0000EE, 42.913
042B87 99 1E 00    1315*  	dl 0x001E99 ; 0000EF, 43.033
042B8A AF 1E 00    1316*  	dl 0x001EAF ; 0000F0, 43.152
042B8D C5 1E 00    1317*  	dl 0x001EC5 ; 0000F1, 43.271
042B90 DA 1E 00    1318*  	dl 0x001EDA ; 0000F2, 43.390
042B93 F0 1E 00    1319*  	dl 0x001EF0 ; 0000F3, 43.508
042B96 05 1F 00    1320*  	dl 0x001F05 ; 0000F4, 43.625
042B99 1B 1F 00    1321*  	dl 0x001F1B ; 0000F5, 43.742
042B9C 30 1F 00    1322*  	dl 0x001F30 ; 0000F6, 43.859
042B9F 45 1F 00    1323*  	dl 0x001F45 ; 0000F7, 43.975
042BA2 5A 1F 00    1324*  	dl 0x001F5A ; 0000F8, 44.091
042BA5 6F 1F 00    1325*  	dl 0x001F6F ; 0000F9, 44.206
042BA8 84 1F 00    1326*  	dl 0x001F84 ; 0000FA, 44.321
042BAB 99 1F 00    1327*  	dl 0x001F99 ; 0000FB, 44.435
042BAE AD 1F 00    1328*  	dl 0x001FAD ; 0000FC, 44.549
042BB1 C2 1F 00    1329*  	dl 0x001FC2 ; 0000FD, 44.662
042BB4 D7 1F 00    1330*  	dl 0x001FD7 ; 0000FE, 44.775
042BB7 EB 1F 00    1331*  	dl 0x001FEB ; 0000FF, 44.888
042BBA 00 20 00    1332*  	dl 0x002000 ; 000100, 45.000 only needed for interpolation
042BBD             0037   	include "player.inc"
042BBD             0001*  ; ######## GAME STATE VARIABLES #######
042BBD             0002*  ; THESE MUST BE IN THIS ORDER FOR new_game TO WORK PROPERLY
042BBD 00 00 00    0003*  player_score: db 0x00,#00,#00 ; bcd
042BC0             0004*  ; player current shields,binary
042BC0             0005*  ; when < 0 player splodes
042BC0             0006*  ; restores to player_max_shields when new ship spawns
042BC0 10          0007*  player_shields: db 16 ; binary
042BC1             0008*  ; max player shields,binary
042BC1             0009*  ; can increase with power-ups (todo)
042BC1 10          0010*  player_max_shields: db 16 ; binary
042BC2             0011*  ; when reaches zero,game ends
042BC2             0012*  ; can increase based on TODO
042BC2 03          0013*  player_ships: db 0x03 ; binary
042BC3             0014*  
042BC3             0015*  ; ######### PLAYER SPRITE PARAMETERS ##########
042BC3             0016*  ; uses the same offsets from its table base as the main sprite table:
042BC3             0017*  player_start_variables: ; label marking beginning of table
042BC3 10          0018*  player_id:               db table_max_records
042BC4 00          0019*  player_type:             db     0x00 ; 1 bytes currently not used
042BC5 34 01 00    0020*  player_base_bufferId:    dl BUF_SHIP_0L ; 3 bytes bitmap bufferId
042BC8 00 00 00    0021*  player_move_program:     dl 0x000000 ; 3 bytes not currently used
042BCB 00          0022*  player_collisions:       db     0x00 ; 1 bytes bit 0 set=alive, otherwise dead, bit 1 set=just died
042BCC 00          0023*  player_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
042BCD 00          0024*  player_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
042BCE 00 00 00    0025*  player_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
042BD1 00 00 00    0026*  player_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
042BD4 00 00 00    0027*  player_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
042BD7 00 00 00    0028*  player_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
042BDA 00 00 00    0029*  player_vel:              dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
042BDD 00 00 00    0030*  player_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
042BE0 00 00 00    0031*  player_orientation:      dl 0x000000 ; 3 bytes not currently used
042BE3 00          0032*  player_animation:        db     0x00 ; 1 bytes not currently used
042BE4 00          0033*  player_animation_timer:  db     0x00 ; 1 bytes not currently used
042BE5 00          0034*  player_move_timer:       db     0x00 ; 1 bytes not currently used
042BE6 00          0035*  player_move_step:        db     0x00 ; 1 bytes not currently used
042BE7 00          0036*  player_points:           db     0x00 ; 1 bytes not currently used
042BE8 00          0037*  player_shield_damage:    db     0x00 ; 1 bytes not currently used
042BE9             0038*  player_end_variables: ; for when we want to traverse this table in reverse
042BE9             0039*  
042BE9             0040*  ; set initial player position
042BE9             0041*  ; inputs: none,everything is hardcoded
042BE9             0042*  ; outputs: player_x/y set to bottom-left corner of screen
042BE9             0043*  ; destroys: a
042BE9             0044*  player_init:
042BE9 3A C3 2B 04 0045*  	ld a,(player_id)
042BED CD 46 1F 04 0046*  	call vdu_sprite_select
042BF1 CD 59 1F 04 0047*      call vdu_sprite_clear_frames
042BF5 21 34 01 00 0048*      ld hl,BUF_SHIP_0L
042BF9 CD 9B 20 04 0049*      call vdu_sprite_add_buff
042BFD 21 35 01 00 0050*      ld hl,BUF_SHIP_1C
042C01 CD 9B 20 04 0051*      call vdu_sprite_add_buff
042C05 21 36 01 00 0052*      ld hl,BUF_SHIP_2R
042C09 CD 9B 20 04 0053*      call vdu_sprite_add_buff
042C0D 01 00 00 00 0054*      ld bc,0
042C11 ED 43 CE 2B 0055*      ld (player_x),bc
       04          
042C16 11 00 DF 00 0056*      ld de,0x00DF00
042C1A ED 53 D1 2B 0057*      ld (player_y),de
       04          
042C1F CD 12 20 04 0058*      call vdu_sprite_move_abs168
042C23 CD BC 1F 04 0059*      call vdu_sprite_show
042C27 C9          0060*      ret
042C28             0061*  
042C28             0062*  ; process player keyboard input, set player bitmap
042C28             0063*  ; velocities and draw player bitmap at updated coordinates
042C28             0064*  ; Inputs: player_x/y set at desired position
042C28             0065*  ; Returns: player bitmap drawn at updated position
042C28             0066*  ; Destroys: probably everything except maybe iy
042C28             0067*  ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
042C28             0068*  ; TODO: requires sprite implementation
042C28             0069*  player_input:
042C28             0070*  ; reset player component velocities to zero as the default
042C28 21 00 00 00 0071*  	ld hl,0
042C2C 22 D4 2B 04 0072*  	ld (player_xvel),hl
042C30 22 D7 2B 04 0073*  	ld (player_yvel),hl
042C34             0074*  ; make ship the active sprite
042C34 3A C3 2B 04 0075*      ld a,(player_id)
042C38 CD 46 1F 04 0076*      call vdu_sprite_select
042C3C             0077*  ; check for keypresses and branch accordingly
042C3C             0078*  ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
042C3C             0079*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
042C3C 3E 1E       0001*M 			LD	A, function
042C3E 5B CF       0002*M 			RST.LIL	08h
042C40             0080*  ; we test all four arrow keys and add/subract velocities accordingly
042C40             0081*  ; this handles the case where two opposing movement keys
042C40             0082*  ; are down simultaneously (velocities will net to zero)
042C40             0083*  ; and allows diagonal movement when a vertical and horizontal key are down
042C40             0084*  ; it also allows movement and action keys to be detected simultaneously
042C40             0085*  ; so we can walk and chew gum at the same time
042C40 3E 01       0086*      ld a,1 ; set ship's default animation to center
042C42             0087*          ; if left and right are both down a will net to
042C42             0088*  
042C42             0089*  @left:
042C42 DD CB 03 4E 0090*      bit 1,(ix+3) ; keycode 26
042C46 28 0E       0091*      jr z,@right
042C48 2A D4 2B 04 0092*      ld hl,(player_xvel)
042C4C 01 00 FD FF 0093*      ld bc,-speed_player
042C50 09          0094*      add hl,bc
042C51 22 D4 2B 04 0095*      ld (player_xvel),hl
042C55 3D          0096*      dec a ; set ship's animation to left
042C56             0097*  @right:
042C56 DD CB 0F 4E 0098*      bit 1,(ix+15) ; keycode 122
042C5A 28 0E       0099*  	jr z,@up
042C5C 2A D4 2B 04 0100*      ld hl,(player_xvel)
042C60 01 00 03 00 0101*      ld bc,speed_player
042C64 09          0102*      add hl,bc
042C65 22 D4 2B 04 0103*      ld (player_xvel),hl
042C69 3C          0104*      inc a ; set ship's animation to right
042C6A             0105*  @up:
042C6A DD CB 07 4E 0106*      bit 1,(ix+7) ; keycode 58
042C6E 28 0D       0107*  	jr z,@down
042C70 2A D7 2B 04 0108*      ld hl,(player_yvel)
042C74 01 00 FD FF 0109*      ld bc,-speed_player
042C78 09          0110*      add hl,bc
042C79 22 D7 2B 04 0111*      ld (player_yvel),hl
042C7D             0112*  @down:
042C7D DD CB 05 4E 0113*      bit 1,(ix+5) ; keycode 42
042C81 28 0D       0114*  	jr z,@done_keyboard
042C83 2A D7 2B 04 0115*      ld hl,(player_yvel)
042C87 01 00 03 00 0116*      ld bc,speed_player
042C8B 09          0117*      add hl,bc
042C8C 22 D7 2B 04 0118*      ld (player_yvel),hl
042C90             0119*  @done_keyboard:
042C90             0120*  ; move player sprite according to velocities set by keypresses
042C90 2A D4 2B 04 0121*      ld hl,(player_xvel)
042C94             0122*  ; compute new x position
042C94 ED 5B CE 2B 0123*      ld de,(player_x)
       04          
042C99 19          0124*      add hl,de ; hl = player_x + player_xvel
042C9A             0125*      ; check for horizontal screen edge collisions
042C9A             0126*      ; and adjust coordinate as necessary
042C9A             0127*  ; TODO: make this work using 24-bit registers
042C9A             0128*      ; cp 8 ; 0 + 1/2 bitmap dim_x
042C9A             0129*      ; jr nc,@check_right ; x >= 8, no adjustment necessary
042C9A             0130*      ; ld a,8 ; set x to leftmost allowable position
042C9A             0131*  ; @check_right:
042C9A             0132*  ;     cp 248 ; 256 - 1/2 bitmap dim_x
042C9A             0133*  ;     jr c,@x_ok ; x < 248, no adjustment necessary
042C9A             0134*  ;     ld a,248 ; set x to rightmost allowable position
042C9A             0135*  @x_ok:
042C9A             0136*  ; save the updated drawing coordinate
042C9A 22 CE 2B 04 0137*      ld (player_x),hl
042C9E             0138*  ;compute new y position
042C9E 2A D1 2B 04 0139*      ld hl,(player_y)
042CA2 ED 5B D7 2B 0140*      ld de,(player_yvel)
       04          
042CA7 19          0141*      add hl,de ; hl = player_y + player_yvel
042CA8             0142*  ; TODO: make this work using 24-bit registers
042CA8             0143*  ;     ; check for vertical screen edge collisions
042CA8             0144*  ;     ; and adjust coordinate as necessary
042CA8             0145*  ;     cp 8 ; 0 + 1/2 bitmap dim_y
042CA8             0146*  ;     jr nc,@check_top ; y >= 8, no adjustment necessary
042CA8             0147*  ;     ld a,8 ; set y to topmost allowable position
042CA8             0148*  ; @check_top:
042CA8             0149*  ;     cp 232 ; 240 - 1/2 bitmap dim_y
042CA8             0150*  ;     jr c,@y_ok ; y < 248, no adjustment necessary
042CA8             0151*  ;     ld a,232 ; set y to bottommost allowable position
042CA8             0152*  @y_ok:
042CA8 22 D1 2B 04 0153*      ld (player_y),hl ; do this here b/c next call destroys hl
042CAC             0154*  ; a should land here loaded with the correct frame
042CAC CD A9 1F 04 0155*      call vdu_sprite_select_frame
042CB0             0156*  ; draw player at updated position
042CB0 ED 4B CE 2B 0157*      ld bc,(player_x)
       04          
042CB5 ED 5B D1 2B 0158*  	ld de,(player_y)
       04          
042CBA             0159*  
042CBA             0160*      ; call dumpRegistersHex
042CBA             0161*  
042CBA CD 12 20 04 0162*  	call vdu_sprite_move_abs168
042CBE             0163*  
042CBE             0164*  ; end player_input
042CBE C9          0165*  	ret
042CBF             0166*  
042CBF             0167*  ; ; THE BELOW WORKS WITH THE AGON BUT USES INTEGER COORDINATES
042CBF             0168*  ; ; INSTEAD OF FRACTIONAL
042CBF             0169*  ; ; ----------------------------------------------------------------
042CBF             0170*  ; ; process player keyboard input, set player bitmap
042CBF             0171*  ; ; velocities and draw player bitmap at updated coordinates
042CBF             0172*  ; ; Inputs: player_x/y set at desired position
042CBF             0173*  ; ; Returns: player bitmap drawn at updated position
042CBF             0174*  ; ; Destroys: probably everything except maybe iy
042CBF             0175*  ; ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
042CBF             0176*  ; ; TODO: requires sprite implementation
042CBF             0177*  ; player_input:
042CBF             0178*  ; ; reset player component velocities to zero as the default
042CBF             0179*  ; 	ld hl,0
042CBF             0180*  ; 	ld (player_xvel),hl
042CBF             0181*  ; 	ld (player_yvel),hl
042CBF             0182*  ; ; check for keypresses and branch accordingly
042CBF             0183*  ; ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
042CBF             0184*  ;     MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
042CBF             0185*  ; ; we test all four arrow keys and add/subract velocities accordingly
042CBF             0186*  ; ; this handles the case where two opposing movement keys
042CBF             0187*  ; ; are down simultaneously (velocities will net to zero)
042CBF             0188*  ; ; and allows diagonal movement when a vertical and horizontal key are down
042CBF             0189*  ; ; it also allows movement and action keys to be detected simultaneously
042CBF             0190*  ; ; so we can walk and chew gum at the same time
042CBF             0191*  ; @left:
042CBF             0192*  ;     bit 1,(ix+3) ; keycode 26
042CBF             0193*  ;     jr z,@right
042CBF             0194*  ;     ld hl,(player_xvel)
042CBF             0195*  ;     ld bc,-3
042CBF             0196*  ;     add hl,bc
042CBF             0197*  ;     ld (player_xvel),hl
042CBF             0198*  ; @right:
042CBF             0199*  ;     bit 1,(ix+15) ; keycode 122
042CBF             0200*  ; 	jr z,@up
042CBF             0201*  ;     ld hl,(player_xvel)
042CBF             0202*  ;     ld bc,3
042CBF             0203*  ;     add hl,bc
042CBF             0204*  ;     ld (player_xvel),hl
042CBF             0205*  ; @up:
042CBF             0206*  ;     bit 1,(ix+7) ; keycode 58
042CBF             0207*  ; 	jr z,@down
042CBF             0208*  ;     ld hl,(player_yvel)
042CBF             0209*  ;     ld bc,-3
042CBF             0210*  ;     add hl,bc
042CBF             0211*  ;     ld (player_yvel),hl
042CBF             0212*  ; @down:
042CBF             0213*  ;     bit 1,(ix+5) ; keycode 42
042CBF             0214*  ; 	jr z,@done_keyboard
042CBF             0215*  ;     ld hl,(player_yvel)
042CBF             0216*  ;     ld bc,3
042CBF             0217*  ;     add hl,bc
042CBF             0218*  ;     ld (player_yvel),hl
042CBF             0219*  ; @done_keyboard:
042CBF             0220*  ; ; move player sprite according to velocities set by keypresses
042CBF             0221*  ;     ld hl,(player_xvel)
042CBF             0222*  ; ; compute new x position
042CBF             0223*  ;     ld de,(player_x)
042CBF             0224*  ;     add hl,de ; hl = player_x + player_xvel
042CBF             0225*  ;     ; check for horizontal screen edge collisions
042CBF             0226*  ;     ; and adjust coordinate as necessary
042CBF             0227*  ; ; TODO: make this work using 24-bit registers
042CBF             0228*  ;     ; cp 8 ; 0 + 1/2 bitmap dim_x
042CBF             0229*  ;     ; jr nc,@check_right ; x >= 8, no adjustment necessary
042CBF             0230*  ;     ; ld a,8 ; set x to leftmost allowable position
042CBF             0231*  ; ; @check_right:
042CBF             0232*  ; ;     cp 248 ; 256 - 1/2 bitmap dim_x
042CBF             0233*  ; ;     jr c,@x_ok ; x < 248, no adjustment necessary
042CBF             0234*  ; ;     ld a,248 ; set x to rightmost allowable position
042CBF             0235*  ; @x_ok:
042CBF             0236*  ;     ; save the updated drawing coordinate
042CBF             0237*  ;     ld (player_x),hl
042CBF             0238*  ; ;compute new y position
042CBF             0239*  ;     ld hl,(player_y)
042CBF             0240*  ;     ld de,(player_yvel)
042CBF             0241*  ;     add hl,de ; hl = player_y + player_yvel
042CBF             0242*  ; ; TODO: make this work using 24-bit registers
042CBF             0243*  ; ;     ; check for vertical screen edge collisions
042CBF             0244*  ; ;     ; and adjust coordinate as necessary
042CBF             0245*  ; ;     cp 8 ; 0 + 1/2 bitmap dim_y
042CBF             0246*  ; ;     jr nc,@check_top ; y >= 8, no adjustment necessary
042CBF             0247*  ; ;     ld a,8 ; set y to topmost allowable position
042CBF             0248*  ; ; @check_top:
042CBF             0249*  ; ;     cp 232 ; 240 - 1/2 bitmap dim_y
042CBF             0250*  ; ;     jr c,@y_ok ; y < 248, no adjustment necessary
042CBF             0251*  ; ;     ld a,232 ; set y to bottommost allowable position
042CBF             0252*  ; @y_ok:
042CBF             0253*  ;     ld (player_y),hl
042CBF             0254*  ; ; draw player at updated position
042CBF             0255*  ;     ld a,(player_id)
042CBF             0256*  ;     call vdu_sprite_select
042CBF             0257*  ;     ld hl,(player_xvel) ; we do a cheeky little hack
042CBF             0258*  ;     call get_sign_hlu ; to set the proper animation
042CBF             0259*  ;     add a,1 ; ...
042CBF             0260*  ;     call vdu_sprite_select_frame
042CBF             0261*  ;     ld bc,(player_x)
042CBF             0262*  ; 	ld de,(player_y)
042CBF             0263*  ; 	call vdu_sprite_move_abs
042CBF             0264*  ; ; end player_input
042CBF             0265*  ; 	ret
042CBF             0266*  
042CBF             0267*  
042CBF             0268*  ; ###################################################################
042CBF             0269*  ; TODO: the below is all stuff from the original code we need to port
042CBF             0270*  ; ###################################################################
042CBF             0271*  
042CBF             0272*  ; kill_player:
042CBF             0273*  ; ; set player status to dead
042CBF             0274*  ;     xor a; sets all player flags to zero
042CBF             0275*  ;     ld (player_collisions),a
042CBF             0276*  ; ; deduct a ship from the inventory
042CBF             0277*  ;     ld a,(player_ships)
042CBF             0278*  ;     dec a
042CBF             0279*  ;     ld (player_ships),a
042CBF             0280*  ; ; are we out of ships?
042CBF             0281*  ;     jp z,game_over
042CBF             0282*  ; ; wait a few ticks
042CBF             0283*  ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
042CBF             0284*  ;     ld (player_move_timer),a
042CBF             0285*  ; kill_player_loop:
042CBF             0286*  ;     call vdu_vblank
042CBF             0287*  ;     ld a,(player_move_timer)
042CBF             0288*  ;     dec a
042CBF             0289*  ;     ld (player_move_timer),a
042CBF             0290*  ;     jr nz,kill_player_loop
042CBF             0291*  ;     call player_init ; player respawn if timer zero
042CBF             0292*  ;     ret ; and out
042CBF             0293*  
042CBF             0294*  
042CBF             0295*  ; player_move:
042CBF             0296*  ; ; begin setting player to active sprite
042CBF             0297*  ;     ld hl,player
042CBF             0298*  ;     ld (sprite_base_bufferId),hl
042CBF             0299*  ;     ld hl,0 ; north
042CBF             0300*  ;     ld (sprite_heading),hl
042CBF             0301*  ;     ld a,#01 ; animation 1 is center,which we set here as a default
042CBF             0302*  ;     ld (sprite_animation),a
042CBF             0303*  ;     ; we set position here for the time being as a default
042CBF             0304*  ;     ; in case the player doesn't move,or is flagged for deletion
042CBF             0305*  ;     ld hl,(player_x)
042CBF             0306*  ;     ld (sprite_x),hl
042CBF             0307*  ;     ld hl,(player_y)
042CBF             0308*  ;     ld (sprite_y),hl
042CBF             0309*  ; ; did we just die?
042CBF             0310*  ;     ld a,(player_collisions)
042CBF             0311*  ;     and %00000010 ; zero flag will be set if not dead
042CBF             0312*  ;     jr z,player_not_dead
042CBF             0313*  ; ; yes we died
042CBF             0314*  ;     call kill_player
042CBF             0315*  ;     ret ; done
042CBF             0316*  ; ; yay we didn't die
042CBF             0317*  ; player_not_dead:
042CBF             0318*  ; ; set player movements to zero by default
042CBF             0319*  ;     ld hl,0
042CBF             0320*  ;     ld (player_xvel),hl
042CBF             0321*  ;     ld (player_yvel),hl
042CBF             0322*  ; ; do we move it?
042CBF             0323*  ;     in a,(#82) ; keyboard
042CBF             0324*  ;     or a ; if zero,don't move
042CBF             0325*  ;     jr z,player_draw
042CBF             0326*  ; ; move it
042CBF             0327*  ;     call player_move_calc
042CBF             0328*  ; player_draw:
042CBF             0329*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
042CBF             0330*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
042CBF             0331*  ; player_move_done:
042CBF             0332*  ;     ; write updated x,y coordinates back to player table
042CBF             0333*  ;     ld hl,(sprite_x)
042CBF             0334*  ;     ld (player_x),hl
042CBF             0335*  ;     ld hl,(sprite_y)
042CBF             0336*  ;     ld (player_y),hl
042CBF             0337*  ;     ret
042CBF             0038   	include "tiles.inc"
042CBF             0001*  ; ######### TILES #########
042CBF             0002*  ; TODO: implement buffering of tiles here when there isn't other stuff to do
042CBF             0003*  ; tiles_defs: ds 256*16 ; 256 rows of 16 tiles, each tile is a byte
042CBF 00 00 00    0004*  tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
042CC2 00          0005*  tiles_row: db 0 ; decrements each time a row is drawn. level is over when hits zero
042CC3             0006*                          ; initialize to zero for a maximum of 256 rows in a level
042CC3 00          0007*  cur_level: db 0
042CC4             0008*  num_levels: equ 2 ; number of levels,duh
042CC4             0009*  
042CC4             0010*  ; lookup table for level definitions
042CC4 60 00 04 61 0011*  tiles_levels: dl tiles_level_00,tiles_level_01
       10 04       
042CCA             0012*  
042CCA             0013*  ; tiles_bufferId: dl 0
042CCA 00 00 00    0014*  tiles_x_plot: dl 0
042CCD F1 FF FF    0015*  tiles_y_plot: dl -15
042CD0             0016*  
042CD0 FF FF FF    0017*  bg_y_plot: dl -1
042CD3 39 01 00    0018*  bg_bufferId: dl BUF_STATION_BG_00 ; default bufferId for background tiles
042CD6             0019*  
042CD6             0020*  bg_plot:
042CD6             0021*  ; load current bg tile bufferId as default
042CD6 2A D3 2C 04 0022*      ld hl,(bg_bufferId)
042CDA             0023*  ; check whether it is time for a new background tile
042CDA 3A D0 2C 04 0024*      ld a,(bg_y_plot)
042CDE 3C          0025*      inc a
042CDF 32 D0 2C 04 0026*      ld (bg_y_plot),a
042CE3 C2 FB 2C 04 0027*      jp nz,@F ; not time for a new tile so draw current one
042CE7             0028*  ; load the next background tile
042CE7 21 39 01 00 0029*      ld hl,BUF_STATION_BG_00
042CEB CD 6B 21 04 0030*      call rand_8
042CEF E6 03       0031*      and %0000011
042CF1 85          0032*      add a,l
042CF2 6F          0033*      ld l,a
042CF3 3E 00       0034*      ld a,0
042CF5 8C          0035*      adc a,h
042CF6 67          0036*      ld h,a
042CF7 22 D3 2C 04 0037*      ld (bg_bufferId),hl
042CFB             0038*  @@:
042CFB CD DC 1B 04 0039*      call vdu_buff_select
042CFF 01 00 00 00 0040*      ld bc,0
042D03 ED 5B D0 2C 0041*      ld de,(bg_y_plot)
       04          
042D08 13          0042*      inc de
042D09 CD A5 1E 04 0043*      call vdu_plot_bmp
042D0D             0044*  ; all done
042D0D C9          0045*      ret
042D0E             0046*  
042D0E             0047*  xevious_plot:
042D0E             0048*  ; load current bg tile bufferId as default
042D0E 2A D3 2C 04 0049*      ld hl,(bg_bufferId)
042D12             0050*  ; check whether it is time for a new background tile
042D12 3A D0 2C 04 0051*      ld a,(bg_y_plot)
042D16 3C          0052*      inc a
042D17 32 D0 2C 04 0053*      ld (bg_y_plot),a
042D1B C2 35 2D 04 0054*      jp nz,@F ; not time for a new tile so draw current one
042D1F             0055*  ; load the next background tile
042D1F 21 48 2D 04 0056*      ld hl,Xevious_tile
042D23 34          0057*      inc (hl)
042D24 3E 1F       0058*      ld a,%00011111 ; 31
042D26 A6          0059*      and (hl)
042D27 21 5F 01 00 0060*      ld hl,BUF_XEVIOUS_00
042D2B 85          0061*      add a,l
042D2C 6F          0062*      ld l,a
042D2D 3E 00       0063*      ld a,0
042D2F 8C          0064*      adc a,h
042D30 67          0065*      ld h,a
042D31 22 D3 2C 04 0066*      ld (bg_bufferId),hl
042D35             0067*  @@:
042D35 CD DC 1B 04 0068*      call vdu_buff_select
042D39 01 00 00 00 0069*      ld bc,0
042D3D ED 5B D0 2C 0070*      ld de,(bg_y_plot)
       04          
042D42 13          0071*      inc de
042D43 CD A5 1E 04 0072*      call vdu_plot_bmp
042D47             0073*  ; all done
042D47 C9          0074*      ret
042D48 00          0075*  Xevious_tile: db 0
042D49             0076*  
042D49             0077*  tiles_plot:
042D49             0078*  ; set gfx viewport to playing field window
042D49 01 00 00 00 0079*  	ld bc,field_left
042D4D 11 00 00 00 0080*  	ld de,field_top
042D51 DD 21 FF 00 0081*  	ld ix,field_right
       00          
042D56 FD 21 7F 01 0082*  	ld iy,field_bottom
       00          
042D5B CD 8F 1B 04 0083*  	call vdu_set_gfx_viewport
042D5F             0084*  ; move the background down one pixel
042D5F 3E 02       0085*  	ld a,2 ; current gfx viewport
042D61 2E 02       0086*  	ld l,2 ; direction=down
042D63 26 01       0087*  	ld h,1 ; speed=1 px
042D65 CD 07 1B 04 0088*  	call vdu_scroll_down
042D69             0089*  ; set gfx viewport to one scanline to optimise plotting tiles
042D69 01 00 00 00 0090*  	ld bc,0 ; leftmost x-coord
042D6D 11 00 00 00 0091*  	ld de,0 ; topmost y-coord
042D71 DD 21 FF 00 0092*  	ld ix,255 ; rightmost x-coord
       00          
042D76 FD 21 00 00 0093*  	ld iy,0 ; bottommost y-coord
       00          
042D7B CD 8F 1B 04 0094*  	call vdu_set_gfx_viewport
042D7F             0095*  ; plot the background
042D7F             0096*      ; call bg_plot
042D7F CD 0E 2D 04 0097*      call xevious_plot
042D83 C9          0098*      ret ; DEBUG
042D84             0099*  ; initialize tiles loop
042D84 21 00 00 00 0100*      ld hl,0 ; init plotting x-coordinate
042D88 22 CA 2C 04 0101*      ld (tiles_x_plot),hl
042D8C 2A BF 2C 04 0102*      ld hl,(tiles_row_defs)
042D90 06 10       0103*  	ld b,16 ; loop counter
042D92             0104*  @loop:
042D92 C5          0105*  	push bc ; save the loop counter
042D93             0106*  ; read the tile defintion for the current column
042D93 7E          0107*      ld a,(hl) ; a has tile definition
042D94 E5          0108*      push hl  ; save pointer to tile definition
042D95 21 00 00 00 0109*      ld hl,0 ; hlu is non-zero
042D99 6F          0110*      ld l,a ; l is tile defintion
042D9A 26 01       0111*      ld h,0x01 ; hl = 256 + tile index = the tile's bitmapId
042D9C CD DC 1B 04 0112*      call vdu_buff_select ; tile bitmap buffer is now active
042DA0             0113*  ; plot the active bitmap
042DA0 ED 4B CA 2C 0114*      ld bc,(tiles_x_plot)
       04          
042DA5 ED 5B CD 2C 0115*      ld de,(tiles_y_plot)
       04          
042DAA CD A5 1E 04 0116*      call vdu_plot_bmp
042DAE             0117*  ; bump x-coords the width of one tile and save it
042DAE 2A CA 2C 04 0118*      ld hl,(tiles_x_plot)
042DB2 01 10 00 00 0119*      ld bc,16
042DB6 09          0120*      add hl,bc
042DB7 22 CA 2C 04 0121*      ld (tiles_x_plot),hl
042DBB             0122*  ; prepare to loop to next column
042DBB E1          0123*      pop hl ; get back pointer to tile def
042DBC 23          0124*      inc hl ; bump it to the next column
042DBD C1          0125*  	pop bc ; snag our loop counter
042DBE 10 D2       0126*      djnz @loop
042DC0             0127*  ; increment tiles plotting y-coordinate
042DC0             0128*  ; when it hits zero, we go to next row of tiles in the map
042DC0             0129*  ; (we use ix b/c we want to preserve hl for the next step)
042DC0 DD 21 CD 2C 0130*  	ld ix,tiles_y_plot
       04          
042DC5 DD 34 00    0131*  	inc (ix)
042DC8 C0          0132*  	ret nz
042DC9             0133*  ; time to bump tiles_row_defs to next row
042DC9             0134*  ; (hl was already there at the end of the loop)
042DC9 22 BF 2C 04 0135*      ld (tiles_row_defs),hl
042DCD             0136*  ; reset coords to plot next row of tiles
042DCD 21 00 00 00 0137*      ld hl,0
042DD1 22 CA 2C 04 0138*      ld (tiles_x_plot),hl
042DD5 21 F1 FF FF 0139*      ld hl,-15
042DD9 22 CD 2C 04 0140*      ld (tiles_y_plot),hl
042DDD             0141*  ; decrement tiles row counter
042DDD 21 C2 2C 04 0142*      ld hl,tiles_row
042DE1 35          0143*      dec (hl)
042DE2 C0          0144*      ret nz
042DE3             0145*  ; queue up next level
042DE3 3A C3 2C 04 0146*      ld a,(cur_level)
042DE7 FE 01       0147*      cp num_levels-1
042DE9 20 02       0148*      jr nz,@inc_level
042DEB 3E FF       0149*      ld a,-1 ; will wrap around to zero when we fall through
042DED             0150*  @inc_level:
042DED 3C          0151*      inc a
042DEE 32 C3 2C 04 0152*      ld (cur_level),a
042DF2             0153*  ; increase the number of enemy sprites
042DF2 3A 39 2E 04 0154*      ld a,(max_enemy_sprites)
042DF6 3C          0155*      inc a
042DF7 FE 10       0156*      cp table_max_records ; if we're at the global limit,skip ahead at max level
042DF9 28 04       0157*      jr z,init_level
042DFB 32 39 2E 04 0158*      ld (max_enemy_sprites),a ; otherwise save the updated number
042DFF             0159*  ; fall through to init_level
042DFF             0160*  
042DFF             0161*  init_level:
042DFF             0162*  ; look up address of level's tile defintion
042DFF 21 C4 2C 04 0163*      ld hl,tiles_levels
042E03 3A C3 2C 04 0164*      ld a,(cur_level)
042E07 11 00 00 00 0165*      ld de,0 ; just in case deu is non-zero
042E0B 57          0166*      ld d,a
042E0C 1E 03       0167*      ld e,3
042E0E ED 5C       0168*      mlt de
042E10 19          0169*      add hl,de
042E11 ED 37       0170*      ld ix,(hl)
042E13 DD 22 BF 2C 0171*      ld (tiles_row_defs),ix
       04          
042E18             0172*  ; set tiles_row counter
042E18 DD 7E 00    0173*      ld a,(ix)
042E1B 32 C2 2C 04 0174*      ld (tiles_row),a
042E1F DD 23       0175*      inc ix ; now ix points first element of first row tile def
042E21 DD 22 BF 2C 0176*      ld (tiles_row_defs),ix ; ... so we save it
       04          
042E26 C9          0177*      ret
042E27             0178*  
042E27             0179*  ; ###### TODO: NEW CODE TO IMPLEMENT ######
042E27             0180*  ; dt_is_active:
042E27             0181*  ; ; a lands here containing a tile index in the low nibble
042E27             0182*  ; ; we test the values for the tiles which are active
042E27             0183*  ;     cp #07
042E27             0184*  ;     call z,ld_act_landing_pad
042E27             0185*  ;     cp #08
042E27             0186*  ;     call z,ld_act_laser_turret
042E27             0187*  ;     ; fall through
042E27             0188*  ;     ret
042E27             0189*  
042E27             0190*  ; ; some tiles become active sprites,so we load those here
042E27             0191*  ; ; sprite_x/y have already been loaded
042E27             0192*  ; ; sprite_dim_x/y are loaded by table_add_record
042E27             0193*  ; ; we don't want sprite drawn to background like other tiles
042E27             0194*  ; ; so this routine only adds them to the sprite table
042E27             0195*  ; dt_ld_act:
042E27             0196*  ;     ld a,#48 ; top of screen + 1/2 tile height
042E27             0197*  ;     ld (sprite_y+1),a ; just the integer part
042E27             0198*  ;     ld (sprite_base_bufferId),hl
042E27             0199*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
042E27             0200*  ;     call table_add_record
042E27             0201*  ;     call sprite_variables_from_stack
042E27             0202*  ;     ld a,#FF ; lets calling proc know we loaded an active tile
042E27             0203*  ;     ret ; and back
042E27             0204*  
042E27             0205*  ; ld_act_landing_pad:
042E27             0206*  ;     call sprite_variables_to_stack
042E27             0207*  
042E27             0208*  ;     ld hl,move_landing_pad
042E27             0209*  ;     ld (sprite_move_program),hl
042E27             0210*  
042E27             0211*  ;     xor a
042E27             0212*  ;     ld (sprite_animation),a ; animation 0
042E27             0213*  
042E27             0214*  ;     call rand_8     ; snag a random number
042E27             0215*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
042E27             0216*  ;     add a,64 ; range is now 64-127
042E27             0217*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn an enemy
042E27             0218*  
042E27             0219*  ;     ld a,%10 ; collides with laser but not player
042E27             0220*  ;     ld (iy+sprite_collisions),a
042E27             0221*  
042E27             0222*  ;     ld a,#05 ; BCD
042E27             0223*  ;     ld (sprite_points),a
042E27             0224*  ;     ld a,0 ; binary
042E27             0225*  ;     ld (sprite_shield_damage),a
042E27             0226*  
042E27             0227*  ;     ld hl,landing_pad ; dt_ld_act loads this to sprite_base_bufferId
042E27             0228*  ;     jr dt_ld_act
042E27             0229*  
042E27             0230*  ; ld_act_laser_turret:
042E27             0231*  ;     call sprite_variables_to_stack
042E27             0232*  
042E27             0233*  ;     ld hl,move_laser_turret
042E27             0234*  ;     ld (sprite_move_program),hl
042E27             0235*  
042E27             0236*  ;     xor a
042E27             0237*  ;     ld (sprite_animation),a
042E27             0238*  ;     ld (sprite_move_step),a
042E27             0239*  
042E27             0240*  ;     call rand_8     ; snag a random number
042E27             0241*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
042E27             0242*  ;     add a,64 ; range is now 64-127
042E27             0243*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
042E27             0244*  
042E27             0245*  ;     ld a,%10 ; collides with laser but not player
042E27             0246*  ;     ld (iy+sprite_collisions),a
042E27             0247*  
042E27             0248*  ;     ld a,#10 ; BCD
042E27             0249*  ;     ld (sprite_points),a
042E27             0250*  ;     ld a,0 ; binary
042E27             0251*  ;     ld (sprite_shield_damage),a
042E27             0252*  
042E27             0253*  ;     ld hl,laser_turret ; dt_ld_act loads this to sprite_base_bufferId
042E27             0254*  ;     jp dt_ld_act
042E27             0255*  
042E27             0256*  
042E27             0257*  ; moves active tile sprites down one pixel in sync with tiles movement
042E27             0258*  ; deletes sprites from table when they wrap around to top of screen
042E27             0259*  move_active_tiles:
042E27             0260*  ; get current position
042E27 3A 0F 00 00 0261*      ld a,(sprite_y+1) ; we only need the integer part
042E2B 3C          0262*      inc a
042E2C             0263*  ; are we at the bottom of the screen?
042E2C 20 06       0264*      jr nz,move_active_tiles_draw_sprite ; nope
042E2E             0265*  ; otherwise kill sprite
042E2E 3E 80       0266*      ld a,%10000000 ; any bit set in high nibble means sprite will die
042E30 FD 77 08    0267*      ld (iy+sprite_collisions),a
042E33 C9          0268*      ret ; debug
042E34             0269*  move_active_tiles_draw_sprite:
042E34 32 0F 00 00 0270*      ld (sprite_y+1),a ; update tile y position integer part
042E38             0271*      ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
042E38             0272*      ; call vdu_bmp_draw ; convert to vdu_bmp_plot ; draw it
042E38 C9          0273*      ret ; and done
042E39             0039   	include "enemies.inc"
042E39 10          0001*  max_enemy_sprites: db 16
042E3A             0002*  
042E3A             0003*  ; sprite_type
042E3A             0004*  enemy_dead: equ 0
042E3A             0005*  enemy_small: equ 1
042E3A             0006*  enemy_medium: equ 2
042E3A             0007*  enemy_large: equ 3
042E3A             0008*  landing_pad: equ 4
042E3A             0009*  laser_turret: equ 5
042E3A             0010*  fireballs: equ 6
042E3A             0011*  explosion: equ 7
042E3A             0012*  
042E3A             0013*  
042E3A             0014*  respawn_countdown:
042E3A 2A 5B 2E 04 0015*      ld hl,(respawn_timer)
042E3E 2B          0016*      dec hl
042E3F 22 5B 2E 04 0017*      ld (respawn_timer),hl
042E43             0018*  ; check hl for zero
042E43 19          0019*      add hl,de
042E44 B7          0020*      or a
042E45 ED 52       0021*      sbc hl,de
042E47 C0          0022*      ret nz
042E48 06 10       0023*      ld b,table_max_records
042E4A             0024*  @respawn_loop:
042E4A C5          0025*      push bc
042E4B CD DD 2F 04 0026*      call enemy_init_from_landing_pad
042E4F C1          0027*      pop bc
042E50 10 F8       0028*      djnz @respawn_loop
042E52 21 3C 00 00 0029*      ld hl,1*60 ; 1 second
042E56 22 5B 2E 04 0030*      ld (respawn_timer),hl
042E5A C9          0031*      ret
042E5B 3C 00 00    0032*  respawn_timer: dl 1*60
042E5E             0033*  
042E5E             0034*  move_enemies:
042E5E             0035*  ; are there any active enemies or explosions?
042E5E 21 00 00 00 0036*      ld hl,0
042E62 3A C5 13 04 0037*      ld a,(table_active_sprites)
042E66 6F          0038*      ld l,a
042E67             0039*      ; call dumpRegistersHex
042E67 A7          0040*      and a ; will be zero if no alive enemies or explosions
042E68             0041*      ; ret z ; so nothing to do but go back
042E68             0042*      ; ld hl,(respawn_timer)
042E68             0043*      ; call dumpRegistersHex
042E68 20 05       0044*      jr nz,move_enemies_do
042E6A CD 3A 2E 04 0045*      call respawn_countdown
042E6E C9          0046*      ret
042E6F             0047*  move_enemies_do:
042E6F             0048*  ; initialize pointers and loop counter
042E6F FD 21 62 11 0049*      ld iy,table_base ; set iy to first record in table
       04          
042E74 06 10       0050*      ld b,table_max_records ; loop counter
042E76             0051*  move_enemies_loop:
042E76 FD 22 C2 13 0052*      ld (table_pointer),iy ; update table pointer
       04          
042E7B C5          0053*      push bc ; backup loop counter
042E7C             0054*  ; check sprite_type to see if sprite is active
042E7C FD 7E 01    0055*      ld a,(iy+sprite_type)
042E7F A7          0056*      and a ; if zero, sprite is dead
042E80 28 2E       0057*      jr z,move_enemies_next_record ; ... and we skip to next record
042E82             0058*  ; otherwise we prepare to move the sprite
042E82 FD 7E 00    0059*      ld a,(iy+sprite_id) ; get spriteId
042E85 CD 46 1F 04 0060*      call vdu_sprite_select ; select sprite
042E89 FD 27 05    0061*      ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
042E8C E9          0062*      jp (hl)  ; ... and jump to it
042E8D             0063*  ; we always jp back here from behavior subroutines
042E8D             0064*  move_enemies_loop_return:
042E8D FD 2A C2 13 0065*      ld iy,(table_pointer) ; get back table pointer
       04          
042E92             0066*  ; now we check results of all the moves
042E92 FD 7E 08    0067*      ld a,(iy+sprite_collisions)
042E95 E6 F0       0068*      and %11110000 ; any bits set in high nibble means we died
042E97 FD 7E 00    0069*      ld a,(iy+sprite_id) ; get spriteId for the deactivate_sprite call if needed
042E9A 28 0A       0070*      jr z,move_enemies_draw_sprite ; if not dead,draw sprite
042E9C CD 0E 14 04 0071*      call table_deactivate_sprite ; otherwise we ded
042EA0 AF          0072*      xor a ; zero a so that we can ...
042EA1 FD 77 08    0073*      ld (iy+sprite_collisions),a ; ... clear collision flags
042EA4 18 0A       0074*      jr move_enemies_next_record ; and to the next record
042EA6             0075*  move_enemies_draw_sprite:
042EA6             0076*  ; if we got here sprite will have already been activated
042EA6             0077*  ; so all we need to do is set its coordinates and draw it
042EA6 FD 07 0B    0078*      ld bc,(iy+sprite_x)
042EA9 FD 17 0E    0079*      ld de,(iy+sprite_y)
042EAC CD 12 20 04 0080*      call vdu_sprite_move_abs168
042EB0             0081*  ; fall through to next record
042EB0             0082*  move_enemies_next_record:
042EB0 11 26 00 00 0083*      ld de,table_bytes_per_record
042EB4 FD 19       0084*      add iy,de ; point to next record
042EB6 AF          0085*      xor a ; clears carry flag
042EB7 32 C6 13 04 0086*      ld (sprite_screen_edge),a ; clear screen edge collision flag
042EBB C1          0087*      pop bc ; get back our loop counter
042EBC 10 B8       0088*      djnz move_enemies_loop ; loop until we've checked all the records
042EBE C9          0089*      ret ; and we're out
042EBF             0090*  
042EBF             0091*  en_nav_zigzag_start:
042EBF FD 2A C2 13 0092*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
042EC4 CD 6B 21 04 0093*      call rand_8
042EC8 E6 3F       0094*      and %00111111 ; limit it to 64
042ECA CB DF       0095*      set 3,a ; make sure it's at least 8
042ECC FD 77 22    0096*      ld (iy+sprite_move_timer),a ; store it
042ECF             0097*      ; fall through to en_nav_zigzag
042ECF             0098*  en_nav_zigzag:
042ECF FD 7E 22    0099*      ld a,(iy+sprite_move_timer)
042ED2 3D          0100*      dec a
042ED3 FD 77 22    0101*      ld (iy+sprite_move_timer),a
042ED6 20 1C       0102*      jr nz,en_nav_zigzag_no_switch
042ED8             0103*      ; otherwise flip direction and restart timer
042ED8 FD 7E 23    0104*      ld a,(iy+sprite_move_step)
042EDB EE 01       0105*      xor %1 ; flips bit one
042EDD FD 77 23    0106*      ld (iy+sprite_move_step),a ; store it
042EE0 20 09       0107*      jr nz,en_nav_zigzag_right
042EE2             0108*  ;otherwise zag left
042EE2 21 00 A0 00 0109*      ld hl,0x00A000; southwest heading
042EE6 FD 2F 1A    0110*      ld (iy+sprite_heading),hl ; save sprite heading
042EE9 18 D4       0111*      jr en_nav_zigzag_start
042EEB             0112*  en_nav_zigzag_right:
042EEB 21 00 60 00 0113*      ld hl,0x006000; southeast heading
042EEF FD 2F 1A    0114*      ld (iy+sprite_heading),hl ; save sprite heading
042EF2 18 CB       0115*      jr en_nav_zigzag_start
042EF4             0116*  en_nav_zigzag_no_switch:
042EF4             0117*      ; ld a,(sprite_orientation)
042EF4 FD 27 1A    0118*      ld hl,(iy+sprite_heading)
042EF7 18 13       0119*      jr en_nav_computevelocities
042EF9             0120*  
042EF9             0121*  ; contains the logic for how to move the enemy
042EF9             0122*  ; and then does the moving
042EF9             0123*  ; inputs: a fully-populated active sprite table
042EF9             0124*  ;         player position variables
042EF9             0125*  ; destroys: everything except index registers
042EF9             0126*  ; outputs: moving enemies
042EF9             0127*  en_nav:
042EF9             0128*  ; set velocity and orientation by player's relative location
042EF9             0129*  ; move enemies y-axis
042EF9             0130*  ; where is player relative to us?
042EF9 CD 60 30 04 0131*      call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
042EFD             0132*  ; is player above or below us?
042EFD ED 53 BB 19 0133*      ld (ude),de ; dy
       04          
042F02 3A BD 19 04 0134*      ld a,(ude+2) ; deu
042F06 17          0135*      rla ; shift sign bit into carry
042F07 30 C6       0136*      jr nc,en_nav_zigzag ; player is below,evade
042F09             0137*  ; player is even or above,so home in on current heading
042F09 FD 2F 1A    0138*      ld (iy+sprite_heading),hl ; save sprite heading
042F0C             0139*  
042F0C             0140*  ; we land here from zig-zag program so as not to
042F0C             0141*  ; redundantly save orientation and heading
042F0C             0142*  en_nav_computevelocities:
042F0C             0143*  ; set x/y component velocities based on bearing to player
042F0C FD 2A C2 13 0144*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
042F11 E5          0145*      push hl ; we need it back to set rotation frame
042F12 FD 17 17    0146*      ld de,(iy+sprite_vel)
042F15 CD 74 23 04 0147*      call polar_to_cartesian
042F19 FD 2A C2 13 0148*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
042F1E FD 0F 11    0149*      ld (iy+sprite_xvel),bc ; save x-velocity component
042F21 FD 1F 14    0150*      ld (iy+sprite_yvel),de ; save y-velocity component
042F24             0151*  ; change the animation frame to match heading
042F24             0152*  ; by dividng the heading by 8
042F24 E1          0153*      pop hl ; get back Heading
042F25 7C          0154*      ld a,h
042F26 CB 3F       0155*      srl a
042F28 CB 3F       0156*      srl a
042F2A CB 3F       0157*      srl a
042F2C CD A9 1F 04 0158*      call vdu_sprite_select_frame
042F30             0159*  
042F30             0160*  move_enemy_sprite:
042F30 FD 2A C2 13 0161*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
042F35             0162*  ; x-axis movement
042F35 FD 27 0B    0163*      ld hl,(iy+sprite_x)
042F38 FD 17 11    0164*      ld de,(iy+sprite_xvel)
042F3B 19          0165*      add hl,de
042F3C FD 2F 0B    0166*      ld (iy+sprite_x),hl
042F3F             0167*  ; y-axis movement
042F3F FD 27 0E    0168*      ld hl,(iy+sprite_y)
042F42 FD 17 14    0169*      ld de,(iy+sprite_yvel)
042F45 19          0170*      add hl,de
042F46 FD 2F 0E    0171*      ld (iy+sprite_y),hl
042F49             0172*  ; detect screen edge collisions
042F49 AF          0173*      xor a  ; reset screen edge collision flag and clear carry
042F4A 32 C6 13 04 0174*      ld (sprite_screen_edge),a
042F4E             0175*  ; y-axis first since we already have it in hl
042F4E 11 00 00 00 0176*      ld de,-sprite_top*256
042F52 ED 5A       0177*      adc hl,de
042F54 FA 7E 2F 04 0178*      jp m,@top
042F58 ED 52       0179*      sbc hl,de ; hl back to original value
042F5A 11 00 91 FE 0180*      ld de,-sprite_bottom*256
042F5E ED 5A       0181*      adc hl,de
042F60 F2 88 2F 04 0182*      jp p,@bottom
042F64             0183*  @xaxis:
042F64 FD 27 0B    0184*      ld hl,(iy+sprite_x)
042F67 11 00 00 00 0185*      ld de,-sprite_left*256
042F6B ED 5A       0186*      adc hl,de
042F6D FA A3 2F 04 0187*      jp m,@left
042F71 ED 52       0188*      sbc hl,de ; hl back to original value
042F73 11 00 11 FF 0189*      ld de,-sprite_right*256
042F77 ED 5A       0190*      adc hl,de
042F79 F2 B1 2F 04 0191*      jp p,@right
042F7D             0192*  ; no edge collisions so go home
042F7D C9          0193*      ret
042F7E             0194*  @top:
042F7E 3E 08       0195*      ld a,collide_top
042F80 21 00 00 00 0196*      ld hl,sprite_top*256
042F84 C3 8E 2F 04 0197*      jp @collide_y
042F88             0198*  @bottom:
042F88 3E 04       0199*      ld a,collide_bottom
042F8A 21 00 6F 01 0200*      ld hl,sprite_bottom*256
042F8E             0201*  @collide_y:
042F8E 32 C6 13 04 0202*      ld (sprite_screen_edge),a
042F92 FD 2F 0E    0203*      ld (iy+sprite_y),hl
042F95             0204*  ; reverse y-axis velocity
042F95 FD 27 14    0205*      ld hl,(iy+sprite_yvel)
042F98 CD C6 20 04 0206*      call neg_hlu
042F9C FD 2F 14    0207*      ld (iy+sprite_yvel),hl
042F9F             0208*  ; go check for x-axis collisions
042F9F C3 64 2F 04 0209*      jp @xaxis
042FA3             0210*  @left:
042FA3 3A C6 13 04 0211*      ld a,(sprite_screen_edge)
042FA7 F6 02       0212*      or a,collide_left
042FA9 21 00 00 00 0213*      ld hl,sprite_left*256
042FAD C3 BB 2F 04 0214*      jp @collide_x
042FB1             0215*  @right:
042FB1 3A C6 13 04 0216*      ld a,(sprite_screen_edge)
042FB5 F6 01       0217*      or a,collide_right
042FB7 21 00 EF 00 0218*      ld hl,sprite_right*256
042FBB             0219*  @collide_x:
042FBB 32 C6 13 04 0220*      ld (sprite_screen_edge),a
042FBF FD 2F 0B    0221*      ld (iy+sprite_x),hl
042FC2             0222*  ; reverse x-axis velocity
042FC2 FD 27 11    0223*      ld hl,(iy+sprite_xvel)
042FC5 CD C6 20 04 0224*      call neg_hlu
042FC9 FD 2F 11    0225*      ld (iy+sprite_xvel),hl
042FCC             0226*  ; final collision flag to a and return
042FCC 3A C6 13 04 0227*      ld a,(sprite_screen_edge)
042FD0 C9          0228*      ret
042FD1             0229*  
042FD1             0230*  ; ; ######### SPRITE BEHAVIOR ROUTINES #########
042FD1             0231*  ; ; each sprite in the table must have one of these defined
042FD1             0232*  ; ; but they need not be unique to a particular sprite
042FD1             0233*  ; ; these are jumped to from move_enemies_do_program,but could come from other places
042FD1             0234*  ; ; and have the option but not obligation to go back to move_enemies_loop_return
042FD1             0235*  ; ; but they can call anything they want between those two endpoints
042FD1             0236*  ; move_programs: ; bookmark in case we want to know the first address of the first subroutine
042FD1             0237*  
042FD1             0238*  ; move_nop: ; does nothing but burn a few cycles changing the PC
042FD1             0239*  ;     jp move_enemies_loop_return
042FD1             0240*  
042FD1             0241*  ; move_explosion:
042FD1             0242*  ;     call animate_explosion
042FD1             0243*  ;     jp move_enemies_loop_return
042FD1             0244*  
042FD1             0245*  move_enemy_small:
042FD1 CD F9 2E 04 0246*      call en_nav
042FD5 CD F9 30 04 0247*      call check_collisions
042FD9 C3 8D 2E 04 0248*      jp move_enemies_loop_return
042FDD             0249*  
042FDD             0250*  ; move_enemy_medium:
042FDD             0251*  ;     call en_nav
042FDD             0252*  ;     call check_collisions
042FDD             0253*  ;     jp move_enemies_loop_return
042FDD             0254*  
042FDD             0255*  ; move_enemy_large:
042FDD             0256*  ;     call en_nav
042FDD             0257*  ;     call check_collisions
042FDD             0258*  ;     jp move_enemies_loop_return
042FDD             0259*  
042FDD             0260*  ; move_landing_pad:
042FDD             0261*  ;     call move_active_tiles
042FDD             0262*  ;     call check_collisions
042FDD             0263*  ; ; is it time to launch an enemy?
042FDD             0264*  ;     ld hl,sprite_move_timer
042FDD             0265*  ;     dec (hl)
042FDD             0266*  ;     jp nz,move_enemies_loop_return
042FDD             0267*  ;     call enemy_init_from_landing_pad
042FDD             0268*  ;     ; reset move timer so can spawn again if player doesn't take us out
042FDD             0269*  ;     call rand_8     ; snag a random number
042FDD             0270*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
042FDD             0271*  ;     add a,64 ; range is now 64-127
042FDD             0272*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn an enemy
042FDD             0273*  ;     jp move_enemies_loop_return
042FDD             0274*  
042FDD             0275*  enemy_init_from_landing_pad:
042FDD             0276*  ; get next available spriteId
042FDD CD E9 13 04 0277*      call table_get_next_id
042FE1 D0          0278*      ret nc ; no carry means no free sprite slots, so we go home
042FE2             0279*  ; ix comes back with the pointer to the new sprite variables
042FE2 DD E5       0280*      push ix ; de picks it up when we're ready for the copy to the table
042FE4             0281*  ; a comes back with the spriteId of the new sprite
042FE4 32 3A 30 04 0282*      ld (@id),a
042FE8             0283*  ; initialize the new sprite
042FE8 CD 46 1F 04 0284*      call vdu_sprite_select
042FEC CD 59 1F 04 0285*      call vdu_sprite_clear_frames
042FF0 21 14 01 00 0286*      ld hl,BUF_SEEKER_000
042FF4 06 20       0287*      ld b,32
042FF6             0288*  @load_frames:
042FF6 C5          0289*      push bc
042FF7 E5          0290*      push hl
042FF8 CD 9B 20 04 0291*      call vdu_sprite_add_buff
042FFC E1          0292*      pop hl
042FFD 23          0293*      inc hl
042FFE C1          0294*      pop bc
042FFF 10 F5       0295*      djnz @load_frames
043001             0296*  ; copy coordinates of active sprite to new sprite
043001 FD 2A C2 13 0297*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
043006             0298*      ; ld hl,(iy+sprite_x)
043006             0299*  	; ld hl,0x008000 ; debug
043006             0300*  
043006 CD 6B 21 04 0301*      call rand_8
04300A 21 00 00 00 0302*      ld hl,0
04300E 67          0303*      ld h,a
04300F             0304*  
04300F 22 45 30 04 0305*      ld (@x),hl
043013             0306*      ; ld hl,(iy+sprite_y)
043013             0307*      ; ld hl,0x002000 ; debug
043013             0308*  
043013 CD 6B 21 04 0309*      call rand_8
043017 21 00 00 00 0310*      ld hl,0
04301B 67          0311*      ld h,a
04301C             0312*  
04301C 22 48 30 04 0313*      ld (@y),hl
043020 CD 6B 21 04 0314*      call rand_8
043024 E6 01       0315*      and %00000001 ; 50/50 chance of moving left or right on spanw
043026 32 5D 30 04 0316*      ld (@move_step),a
04302A             0317*  ; now copy to the table
04302A 21 3A 30 04 0318*      ld hl,@id ; address to copy from
04302E D1          0319*      pop de ; address to copy to (was ix)
04302F 01 26 00 00 0320*      ld bc,table_bytes_per_record ; number of bytes to copy
043033 ED B0       0321*      ldir ; copy the records from local scratch to sprite table
043035             0322*  ; finally, make the new sprite visible
043035 CD BC 1F 04 0323*      call vdu_sprite_show
043039 C9          0324*      ret
04303A 00          0325*  @id:               db     0x00 ; 1 bytes unique spriteId, zero-based
04303B 01          0326*  @type:             db enemy_small ; 1 bytes type of sprite as defined in enemies.inc
04303C 14 01 00    0327*  @base_bufferId:    dl BUF_SEEKER_000 ; 3 bytes bitmap bufferId
04303F D1 2F 04    0328*  @move_program:     dl move_enemy_small ; 3 bytes address of sprite's behavior subroutine
043042 03          0329*  @collisions:       db %00000011 ; 3 bytes collides with enemy and laser
043043 10          0330*  @dim_x:            db     0x10 ; 1 bytes sprite width in pixels
043044 10          0331*  @dim_y:            db     0x10 ; 1 bytes sprite height in pixels
043045 00 00 00    0332*  @x:                dl 0x000000 ; 1 bytes 16.8 fractional x position in pixels
043048 00 00 00    0333*  @y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
04304B 00 00 00    0334*  @xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04304E 00 00 00    0335*  @yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
043051 80 02 00    0336*  @vel:              dl speed_seeker ; 3 bytes velocity, 16.8 fixed, pixels
043054 00 80 00    0337*  @heading:          dl 0x008000 ; 3 bytes sprite movement direction deg256 16.8 fixed
043057 00 80 00    0338*  @orientation:      dl 0x008000 ; 3 bytes orientation bits
04305A 00          0339*  @animation:        db     0x00 ; 1 bytes current animation index, zero-based
04305B 00          0340*  @animation_timer:  db     0x00 ; 1 bytes when hits zero, draw next animation
04305C 01          0341*  @move_timer:       db     0x01 ; 1 bytes when zero, go to next move program, or step
04305D 00          0342*  @move_step:        db     0x00 ; 1 bytes stage in a move program sequence, varies
04305E 20          0343*  @points:           db     0x20 ; 1 bytes points awarded for killing this sprite type, BCD
04305F 02          0344*  @shield_damage:    db     0x02 ; 1 bytes shield points deducted for collision, binary
043060             0345*  
043060             0346*  ; move_laser_turret:
043060             0347*  ; ; compute orientation to player
043060             0348*  ;     call orientation_to_player
043060             0349*  ; ; h.l 8.8 fixed angle256 to player
043060             0350*  ; ; bc and de as signed 16-bit integers
043060             0351*  ; ; representing delta-x/y *to* target respectively
043060             0352*  ;     ld (Bearing_t),hl
043060             0353*  ;     ld hl,0x0400
043060             0354*  ;     ld (Vp),hl
043060             0355*  ;     call targeting_computer
043060             0356*  ;     ld (sprite_heading),hl ; store bearing to player
043060             0357*  ; ; is it time to launch a fireball?
043060             0358*  ;     ld hl,sprite_move_timer
043060             0359*  ;     dec (hl)
043060             0360*  ;     jp nz,move_laser_turret_boilerplate
043060             0361*  ;     call fireballs_init
043060             0362*  ;     ; reset move timer so can fire again if player doesn't take us out
043060             0363*  ;     call rand_8     ; snag a random number
043060             0364*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
043060             0365*  ;     add a,64 ; range is now 64-127
043060             0366*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
043060             0367*  ; move_laser_turret_boilerplate:
043060             0368*  ;     call move_active_tiles
043060             0369*  ;     call check_collisions
043060             0370*  ;     jp move_enemies_loop_return
043060             0371*  
043060             0372*  ; fireballs_init:
043060             0373*  ;     call sprite_variables_to_stack
043060             0374*  
043060             0375*  ;     ld hl,fireballs
043060             0376*  ;     ld (sprite_base_bufferId),hl
043060             0377*  
043060             0378*  ;     ld hl,move_fireballs
043060             0379*  ;     ld (sprite_move_program),hl
043060             0380*  
043060             0381*  ;     ld a,%11 ; collides with laser and player
043060             0382*  ;     ; ld a,%10 ; collides with laser DEBUG
043060             0383*  ;     ld (iy+sprite_collisions),a
043060             0384*  
043060             0385*  ;     ld hl,(Vp)
043060             0386*  ;     ld (sprite_vel),hl
043060             0387*  ;     ld hl,(Vp_x)
043060             0388*  ;     ld (sprite_xvel),hl
043060             0389*  ;     ld hl,(Vp_y)
043060             0390*  ;     inc h ; account for ground movement
043060             0391*  ;     ld (sprite_yvel),hl
043060             0392*  
043060             0393*  ;     xor a ; zero a
043060             0394*  ;     ld (sprite_animation),a
043060             0395*  ;     ld (sprite_move_step),a
043060             0396*  ;     ld (sprite_move_timer),a
043060             0397*  
043060             0398*  ;     ld a,6 ; 1/10th of a second timer
043060             0399*  ;     ld (sprite_animation_timer),a
043060             0400*  
043060             0401*  ;     ld a,0x00 ; BCD
043060             0402*  ;     ld (sprite_points),a
043060             0403*  ;     ld a,1 ; binary
043060             0404*  ;     ld (sprite_shield_damage),a
043060             0405*  
043060             0406*  ;     call table_add_record ; plops that on the sprite stack for later
043060             0407*  ;     call sprite_variables_from_stack ; come back to where we started
043060             0408*  ;     ret
043060             0409*  
043060             0410*  ; move_fireballs:
043060             0411*  ;     call move_enemy_sprite ; move sprite
043060             0412*  ;     ld a,(sprite_screen_edge) ; check for collision with screen edge
043060             0413*  ;     and a ; if zero we're still within screen bounds
043060             0414*  ;     jr z,move_fireballs_alive
043060             0415*  ; ; otherwise kill sprite
043060             0416*  ;     ld a,%10000000 ; any bit set in high nibble means sprite will die
043060             0417*  ;     ld (iy+sprite_collisions),a
043060             0418*  ;     jp move_enemies_loop_return
043060             0419*  ; move_fireballs_alive:
043060             0420*  ;     ld a,(sprite_animation_timer)
043060             0421*  ;     dec a
043060             0422*  ;     ld (sprite_animation_timer),a
043060             0423*  ;     jr nz,move_fireballs_draw
043060             0424*  ;     ld a,(sprite_animation)
043060             0425*  ;     xor %1
043060             0426*  ;     ld (sprite_animation),a
043060             0427*  ;     ld a,6 ; 1/10th of a second timer
043060             0428*  ;     ld (sprite_animation_timer),a
043060             0429*  ;     ; fall through
043060             0430*  
043060             0431*  ; move_fireballs_draw:
043060             0432*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
043060             0433*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
043060             0434*  ;     call check_collisions
043060             0435*  ;     jp move_enemies_loop_return
043060             0436*  
043060             0437*  ; compute orientation to player
043060             0438*  ; based on relative positions
043060             0439*  ; returns: h.l 16.8 fixed angle256 to player
043060             0440*  ;    ub.c and ud.e as 16.8 signed fixed point numbers
043060             0441*  ;    representing delta-x/y *to* target respectively
043060             0442*  orientation_to_player:
043060 FD 2A C2 13 0443*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
043065 FD 07 0B    0444*      ld bc,(iy+sprite_x)
043068 FD 17 0E    0445*      ld de,(iy+sprite_y)
04306B DD 2A CE 2B 0446*      ld ix,(player_x)
       04          
043070 FD 2A D1 2B 0447*      ld iy,(player_y)
       04          
043075 CD A9 23 04 0448*      call dxy168
043079 C5          0449*      push bc
04307A D5          0450*      push de
04307B CD 06 24 04 0451*      call atan2_168fast
04307F D1          0452*      pop de
043080 C1          0453*      pop bc
043081 FD 2A C2 13 0454*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
043086 C9          0455*      ret
043087             0456*  
043087             0457*  
043087             0458*  ; targeting_computer scratch variables
043087 00 00       0459*  Bearing_t: dw #0000 ; 8.8 fixed
043089 00 00       0460*  Heading_t: dw #0000 ; 8.8 fixed
04308B 00 00       0461*  Vp: dw #0000 ; 8.8 fixed
04308D 00 00       0462*  Vp_x: dw #0000 ; 8.8 fixed
04308F 00 00       0463*  Vp_y: dw #0000 ; 8.8 fixed
043091 00 00       0464*  Vt: dw #0000 ; 8.8 fixed
043093 00 00       0465*  Vt_x: dw #0000 ; 8.8 fixed
043095 00 00       0466*  Vt_y: dw #0000 ; 8.8 fixed
043097             0467*  
043097             0468*  
043097             0469*  ; ; Inputs:   see scratch variables
043097             0470*  ; ; Note:     a call to orientation_to_player provides these inputs
043097             0471*  ; ; Outputs:  h.l is the 16.8 fixed firing angle256
043097             0472*  ; ;           b.c and d.e are the 16.8 fixed x,y component projectile velocities
043097             0473*  ; ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
043097             0474*  ; targeting_computer:
043097             0475*  ; ; compute target velocity from x,y component velocities
043097             0476*  ;     ld bc,(player_xvel)
043097             0477*  ;     ld de,(player_yvel)
043097             0478*  ;     dec d ; account for vertical ground movement: b.c=player_xvel,d.e=player_yvel-1
043097             0479*  
043097             0480*  ;     call cartesian_to_polar ; b.c=Heading_t, d.e=Vt
043097             0481*  ;     ld (Heading_t),bc
043097             0482*  ;     ld (Vt),de
043097             0483*  
043097             0484*  ; ; compute Heading_t-Bearing_t
043097             0485*  ;     ld h,b
043097             0486*  ;     ld l,c
043097             0487*  ;     ld bc,(Bearing_t)
043097             0488*  ;     and a ; clear carry
043097             0489*  ;     sbc hl,bc ; h.l=Heading_t-Bearing_t
043097             0490*  
043097             0491*  ; ; compute sin(Heading_t-Bearing_t)
043097             0492*  ;     ld b,h
043097             0493*  ;     ld c,l
043097             0494*  ;     call sin_bc ; h.l=sin(Heading_t-Bearing_t)
043097             0495*  
043097             0496*  ; ; compute (Vt*sin(Heading_t-Bearing_t))
043097             0497*  ;     ex de,hl
043097             0498*  ;     ld bc,(Vt)
043097             0499*  ;     call BC_Mul_DE_88 ; h.l=(Vt*sin(Heading_t-Bearing_t))
043097             0500*  
043097             0501*  ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
043097             0502*  ;     ld b,h
043097             0503*  ;     ld c,l
043097             0504*  ;     ld de,(Vp)
043097             0505*  ;     call div_88 ; h.l=(Vt*sin(Heading_t-Bearing_t)) / Vp
043097             0506*  ; ; answer is in radians, convert to degrees256
043097             0507*  ;     ex de,hl
043097             0508*  ;     ld bc,#28BE ; 40.74=57.29578*256/360
043097             0509*  ;     call BC_Mul_DE_88
043097             0510*  
043097             0511*  ; ; add lead angle to target bearing
043097             0512*  ;     ld de,(Bearing_t)
043097             0513*  ;     add hl,de ; h.l=lead angle+target bearing
043097             0514*  ;     push hl
043097             0515*  
043097             0516*  ; ; compute component projectile velocities
043097             0517*  ;     ld b,h
043097             0518*  ;     ld c,l
043097             0519*  ;     ld de,(Vp)
043097             0520*  ;     call polar_to_cartesian ; b.c=Vp_x, d.e=Vp_y
043097             0521*  
043097             0522*  ;     ld (Vp_x),bc
043097             0523*  ;     ld (Vp_y),de
043097             0524*  ;     pop hl ; h.l=lead angle+target bearing
043097             0525*  ;     ret
043097             0526*  
043097             0527*  ; this routine vanquishes the enemy sprite
043097             0528*  ; and replaces it with an animated explosion
043097             0529*  ; we jump here instead of call because
043097             0530*  ; we want to return to differing locations in the loop
043097             0531*  ; depending on whether we're still sploding
043097             0532*  ; destroys: everything except index registers
043097             0533*  ; returns: an incandescent ball of debris and gas
043097             0534*  kill_nurple:
043097             0535*  ; ; tally up points
043097             0536*  ;     ld bc,0
043097             0537*  ;     ld a,(sprite_points)
043097             0538*  ;     ld e,a
043097             0539*  ;     ld d,0
043097             0540*  ;     ld hl,add_bcd_arg2
043097             0541*  ;     call set_bcd
043097             0542*  ;     ld hl,player_score
043097             0543*  ;     ld de,add_bcd_arg2
043097             0544*  ;     ld a,3 ; number of bytes to add
043097             0545*  ;     call add_bcd
043097             0546*  ; ; initialize explosion
043097             0547*  ; init_explosion:
043097             0548*  ;     ld hl,explosion
043097             0549*  ;     ld (sprite_base_bufferId),hl
043097             0550*  ;     ld hl,move_explosion
043097             0551*  ;     ld (sprite_move_program),hl
043097             0552*  ;     ld a,%00000000 ; collides with nothing
043097             0553*  ;     ld (iy+sprite_collisions),a
043097             0554*  ;     ld hl,0 ; north
043097             0555*  ;     ld (sprite_heading),hl
043097             0556*  ;     ld a,0x04 ; will decrement to 03
043097             0557*  ;     ld (sprite_animation),a
043097             0558*  ;     ld a,0x07 ; 7/60th of a second timer
043097             0559*  ;     ld (sprite_animation_timer),a
043097             0560*  ;     xor a
043097             0561*  ;     ld (sprite_move_timer),a
043097             0562*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
043097             0563*  ; ; fall through to next_explosion
043097             0564*  ; next_explosion:
043097             0565*  ;     ld a,(sprite_animation)
043097             0566*  ;     dec a ; if rolled negative from zero,we're done sploding
043097             0567*  ;     jp m,done_explosion
043097             0568*  ;     ld (sprite_animation),a
043097             0569*  ;     ld a,0x7 ; 7/60th of a second timer
043097             0570*  ;     ld (sprite_animation_timer),a
043097             0571*  ; ; fall through to animate_explosion
043097             0572*  ; animate_explosion:
043097             0573*  ;     ld hl,sprite_y+1
043097             0574*  ;     inc (hl) ; move explosion down 1 pixel
043097             0575*  ;     jr z, done_explosion ; if wraparound to top of screen, kill explosion
043097             0576*  ;     ld hl,sprite_animation_timer
043097             0577*  ;     dec (hl) ; if timer is zero,we do next animation
043097             0578*  ;     jr z,next_explosion
043097             0579*  ;     ;otherwise we fall through to draw the current one
043097             0580*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
043097             0581*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
043097             0582*  ;     ret ; now we go back to caller
043097             0583*  ; done_explosion:
043097 3E 80       0584*      ld a,%10000000 ; high bit set is non-specific kill-me flag
043099 FD 2A C2 13 0585*      ld iy,(table_pointer); TODO: see if we can get IY to land here with the proper value
       04          
04309E FD 77 08    0586*      ld (iy+sprite_collisions),a
0430A1 C9          0587*      ret ; now we go back to caller
0430A2             0588*  
0430A2             0589*  ; game_over:
0430A2             0590*  ;     jp new_game
0430A2             0591*  
0430A2             0592*  ; it's presumed we've already checked that laser is alive
0430A2             0593*  collision_enemy_with_laser:
0430A2 DD 2A 31 31 0594*      ld ix,(laser_x)
       04          
0430A7 FD 2A 34 31 0595*      ld iy,(laser_y)
       04          
0430AC 3A 2F 31 04 0596*      ld a,(laser_dim_x)
0430B0 CB 2F       0597*      sra a ; divide by 2
0430B2 F5          0598*      push af ; we need this later
0430B3 C3 C8 30 04 0599*      jp collision_enemy
0430B7             0600*  
0430B7             0601*  ; it's presumed we've already checked that player is alive
0430B7             0602*  collision_enemy_with_player:
0430B7 DD 2A CE 2B 0603*      ld ix,(player_x)
       04          
0430BC FD 2A D1 2B 0604*      ld iy,(player_y)
       04          
0430C1 3A CC 2B 04 0605*      ld a,(player_dim_x)
0430C5 CB 2F       0606*      sra a ; divide by 2
0430C7 F5          0607*      push af ; we need this later
0430C8             0608*      ; fall through to collision_enemy
0430C8             0609*  
0430C8             0610*  ; compute the distance between the two sprites' centers
0430C8             0611*  ; inputs: bc and de as y0,x0 and y1,x1 respectively
0430C8             0612*  collision_enemy:
0430C8             0613*  ; back up iy because we need it as the sprite table pointer
0430C8 FD E5       0614*      push iy
0430CA FD 2A C2 13 0615*      ld iy,(table_pointer)
       04          
0430CF FD 27 0B    0616*      ld hl,(iy+sprite_x)
0430D2 FD 7E 09    0617*      ld a,(iy+sprite_dim_x)
0430D5 CB 2F       0618*      sra a
0430D7 F5          0619*      push af ; we need this later
0430D8 E5          0620*      push hl
0430D9 C1          0621*      pop bc ; bc = x0
0430DA FD 27 0E    0622*      ld hl,(iy+sprite_y)
0430DD FD 7E 0A    0623*      ld a,(iy+sprite_dim_y)
0430E0 EB          0624*      ex de,hl ; de = y0
0430E1 F1          0625*      pop af ; TODO: srsly, this is the best way to do this?
0430E2 FD E1       0626*      pop iy
0430E4 F5          0627*      push af
0430E5 CD D0 23 04 0628*      call distance168
0430E9             0629*  
0430E9             0630*  ; ; subtract sum of radii from distance between centers
0430E9             0631*  ;     ld de,0
0430E9             0632*  ;     pop af ; radius of enemy sprite
0430E9             0633*  ;     ld e,a
0430E9             0634*  ;     pop af ; radius of player or laser sprite
0430E9             0635*  ;     add a,e
0430E9             0636*  ;     ld e,a
0430E9             0637*  ;     and a ; clear carry
0430E9             0638*  ;     sbc hl,de
0430E9             0639*  ;     jr c,collision_enemy_is
0430E9             0640*  ;     xor a
0430E9             0641*  ;     ret
0430E9             0642*  ; temp fix TODO: remove this
0430E9 F1          0643*      pop af
0430EA F1          0644*      pop af
0430EB 11 00 10 00 0645*      ld de,16*256
0430EF A7          0646*      and a
0430F0 ED 52       0647*      sbc hl,de
0430F2 38 02       0648*      jr c,collision_enemy_is
0430F4 AF          0649*      xor a
0430F5 C9          0650*      ret
0430F6             0651*  collision_enemy_is:
0430F6 AF          0652*      xor a
0430F7 3C          0653*      inc a
0430F8 C9          0654*      ret
0430F9             0655*  
0430F9             0656*  ; ; looks up what enemy sprite collides with
0430F9             0657*  ; ; detects collisions
0430F9             0658*  ; ; and sets things to sploding accordingly
0430F9             0659*  ; check_collisions:
0430F9             0660*  ;     ld a,(iy+sprite_collisions) ; snag what we collide with
0430F9             0661*  ;     and a ; if this is zero,
0430F9             0662*  ;     ret z ; there's nothing to do
0430F9             0663*  ;     and %01 ; do we collide with player?
0430F9             0664*  ;     jr z,move_enemies_laser ; if not,check laser collision
0430F9             0665*  ;     call collision_enemy_with_player ; otherwise see if we hit player
0430F9             0666*  ;     and a ; was there a collision?
0430F9             0667*  ;     jr z,move_enemies_laser ; if not,see if laser smacked us
0430F9             0668*  ; ; yes collision with player
0430F9             0669*  ;     ; deduct shield damage
0430F9             0670*  ;     ld hl,sprite_shield_damage
0430F9             0671*  ;     ld a,(player_shields)
0430F9             0672*  ;     sub (hl)
0430F9             0673*  ;     ld (player_shields),a
0430F9             0674*  ; ; if shields >= 0,player survives
0430F9             0675*  ;     jp p,check_collisions_kill_nurple
0430F9             0676*  ; ; otherwise update player status so it will die
0430F9             0677*  ;     ld a,(player_collisions)
0430F9             0678*  ;     or %10 ; sets bit 1,meaning player just died
0430F9             0679*  ;     ld (player_collisions),a
0430F9             0680*  ;     ; fall through
0430F9             0681*  ; check_collisions_kill_nurple:
0430F9             0682*  ; ; kill enemy and replace with explosion
0430F9             0683*  ;     call kill_nurple
0430F9             0684*  ;     ret ; and out
0430F9             0685*  
0430F9             0686*  check_collisions:
0430F9 CD B7 30 04 0687*      call collision_enemy_with_player ; did we hit the player?
0430FD A7          0688*      and a ; was there a collision?
0430FE C8          0689*      ret z ; if not,we're done
0430FF CD 97 30 04 0690*      call kill_nurple ; otherwise kill enemy
043103 C9          0691*      ret
043104             0692*  
043104             0693*  ; did we hit the laser?
043104             0694*  move_enemies_laser:
043104 FD 7E 08    0695*      ld a,(iy+sprite_collisions) ; snag what we collide with again
043107 E6 02       0696*      and %10 ; do we even collide with laser?
043109 C8          0697*      ret z ; if not,we're out
04310A 3A 2E 31 04 0698*      ld a,(laser_collisions) ; is laser alive?
04310E E6 01       0699*      and %1 ; if bit 0 is not set laser is dead
043110 C8          0700*      ret z ; so we're out
043111 CD A2 30 04 0701*      call collision_enemy_with_laser ; otherwise check for collision
043115 A7          0702*      and a ; was there a collision?
043116 C8          0703*      ret z ; if not,we're done
043117             0704*  ; otherwise we mark laser for termination and kill enemy
043117             0705*  ; update laser status so it will die
043117 3A 2E 31 04 0706*      ld a,(laser_collisions)
04311B F6 02       0707*      or %10 ; bit 1 set means laser just died
04311D 32 2E 31 04 0708*      ld (laser_collisions),a
043121 CD 97 30 04 0709*      call kill_nurple ; yes there was a collision,so kill enemy
043125 C9          0710*      ret ; we're outta' here
043126             0040   	include "laser.inc"
043126             0001*  ; ##### LASER SPRITE PARAMETERS #####
043126             0002*  ; uses the same offsets from its table base as the main sprite table:
043126             0003*  laser_start_variables: ; label marking beginning of table
043126 11          0004*  laser_id:               db table_max_records+1
043127 00          0005*  laser_type:             db     0x00 ; 1 bytes currently not used
043128 11 01 00    0006*  laser_base_bufferId:    dl BUF_LASER_A ; 3 bytes bitmap bufferId
04312B 00 00 00    0007*  laser_move_program:     dl 0x000000 ; 3 bytes not currently used
04312E 00          0008*  laser_collisions:       db     0x00 ; 1 bytes bit 0 set=alive, otherwise dead, bit 1 set=just died
04312F 00          0009*  laser_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
043130 00          0010*  laser_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
043131 00 00 00    0011*  laser_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
043134 00 00 00    0012*  laser_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
043137 00 00 00    0013*  laser_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04313A 00 F8 FF    0014*  laser_yvel:             dl 0xFFF800 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04313D 00 00 00    0015*  laser_vel:              dl 0x000000 ; 3 bytes not currently used
043140 00 00 00    0016*  laser_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
043143 00 00 00    0017*  laser_orientation:      dl 0x000000 ; 3 bytes not currently used
043146 00          0018*  laser_animation:        db     0x00 ; 1 bytes current sprite animation frame
043147 00          0019*  laser_animation_timer:  db     0x00 ; 1 bytes decremented every frame, when zero, advance animation
043148 00          0020*  laser_move_timer:       db     0x00 ; 1 bytes not currently used
043149 00          0021*  laser_move_step:        db     0x00 ; 1 bytes not currently used
04314A 00          0022*  laser_points:           db     0x00 ; 1 bytes not currently used
04314B 00          0023*  laser_shield_damage:    db     0x00 ; 1 bytes not currently used
04314C             0024*  laser_end_variables: ; for when we want to traverse this table in reverse
04314C             0025*  
04314C             0026*  ; laser_control:
04314C             0027*  ; ; is laser already active?
04314C             0028*  ;     ld a,(laser_collisions)
04314C             0029*  ;     and %00000001 ; bit zero is lit if laser is active
04314C             0030*  ;     jr nz,laser_move ; move laser if not zero
04314C             0031*  ; ; otherwise check if laser fired
04314C             0032*  ;     in a,(#82) ; keyboard
04314C             0033*  ;     and %00010000 ; bit 4 is lit if space bar pressed
04314C             0034*  ;     ret z ; go back if laser not fired
04314C             0035*  ; ; otherwise,FIRE ZEE LASER!!1111
04314C             0036*  ; ; set laser status to active (set bit 0)
04314C             0037*  ;     ld a,%1
04314C             0038*  ;     ld (laser_collisions),a
04314C             0039*  ; ; initialize laser position
04314C             0040*  ;     ld a,(player_x+1) ; we only need the integer part
04314C             0041*  ;     ; add a,6 ; horizontal center with player sprite
04314C             0042*  ;     ld (laser_x+1),a ; store laser x coordinate
04314C             0043*  ;     ld a,(player_y+1) ; we only need the integer part
04314C             0044*  ;     add a,-6 ; set laser y a few pixels above player
04314C             0045*  ;     ld (laser_y+1),a ; store laser y coordinate
04314C             0046*  ;     ; fall through to laser_move
04314C             0047*  
04314C             0048*  ; laser_move:
04314C             0049*  ; ; begin setting laser to active sprite
04314C             0050*  ;     ld hl,lasers
04314C             0051*  ;     ld (sprite_base_bufferId),hl
04314C             0052*  ;     ld hl,0 ; north
04314C             0053*  ;     ld (sprite_heading),hl
04314C             0054*  ;     xor a ; laser has no animations yet :-(
04314C             0055*  ;     ld (sprite_animation),a
04314C             0056*  ;     ; we set position here for the time being as a default
04314C             0057*  ;     ; in case the laser is flagged for deletion
04314C             0058*  ;     ; load sprite_x with laser x position (we do y further down)
04314C             0059*  ;     ld hl,(laser_x)
04314C             0060*  ;     ld (sprite_x),hl
04314C             0061*  ; ; did laser just die?
04314C             0062*  ;     ld a,(laser_collisions)
04314C             0063*  ;     bit 1,a ; z if laser didn't just die
04314C             0064*  ;     jr z,laser_not_dead_yet
04314C             0065*  ; ; yes laser died
04314C             0066*  ;     call kill_laser
04314C             0067*  ;     ret ; done
04314C             0068*  ; laser_not_dead_yet:
04314C             0069*  ; ; draw it
04314C             0070*  ; ; update laser y position
04314C             0071*  ;     ld hl,(laser_y) ; grab laser y position
04314C             0072*  ;     ld de,(laser_yvel) ; snag laser y velocity
04314C             0073*  ;     add hl,de ; add y velocity to y pos
04314C             0074*  ;     ld (sprite_y),hl ; update laser y position
04314C             0075*  ;     ld (laser_y),hl ; update laser y position
04314C             0076*  ; ; are we at top of screen?
04314C             0077*  ;     ld a,#51 ; top of visible screen plus a pixel
04314C             0078*  ;     sub h ; no carry if above threshold
04314C             0079*  ;     jr c,finally_draw_the_frikken_laser
04314C             0080*  ;     ; if at top of screen,laser dies
04314C             0081*  ;     call kill_laser
04314C             0082*  ;     ret
04314C             0083*  ; ; otherwise,finally draw the frikken laser
04314C             0084*  ; finally_draw_the_frikken_laser:
04314C             0085*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
04314C             0086*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
04314C             0087*  ; ; all done
04314C             0088*  ;     ret
04314C             0089*  
04314C             0090*  ; kill_laser:
04314C             0091*  ; ; update status to inactive
04314C             0092*  ;     xor a ; zero out a
04314C             0093*  ;     ld (laser_collisions),a
04314C             0094*  ;     ret
04314C             0041   	include "timer.inc"
04314C             0001*  ; Table 32. Timer Control Registers
04314C             0002*  ; this constant is the base address of the timer control registers
04314C             0003*  ; each timer takes three bytes:
04314C             0004*  ;   0: control register
04314C             0005*  ;   1: low byte of timer reset value
04314C             0006*  ;   2: high byte of timer reset value
04314C             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
04314C             0008*  ; which correctly force the high and upper bytes of the address bus to zero
04314C             0009*  TMR_CTL:     equ 80h
04314C             0010*  
04314C             0011*  ; Timer Control Register Bit Definitions
04314C             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
04314C             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
04314C             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
04314C             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
04314C             0016*                              ; the TMRx_CTL register is read.
04314C             0017*  
04314C             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
04314C             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
04314C             0020*  
04314C             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
04314C             0022*                              ;  0,and counting stops when the end-of-count value is reached.
04314C             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
04314C             0024*                              ; written to the counter when the end-of-count value is reached.
04314C             0025*  
04314C             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
04314C             0027*  CLK_DIV_256:  equ %00001100 ;
04314C             0028*  CLK_DIV_64:   equ %00001000 ;
04314C             0029*  CLK_DIV_16:   equ %00000100 ;
04314C             0030*  CLK_DIV_4:    equ %00000000 ;
04314C             0031*  
04314C             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
04314C             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
04314C             0034*                              ; When a 1 is written to this bit,the values in the reload registers
04314C             0035*                              ;  are loaded into the downcounter when the timer restarts. The
04314C             0036*                              ; programmer must ensure that this bit is set to 1 each time
04314C             0037*                              ; SINGLE-PASS mode is used.
04314C             0038*  
04314C             0039*  ; disable/enable the programmable reload timer
04314C             0040*  PRT_EN_0:     equ %00000000 ;
04314C             0041*  PRT_EN_1:     equ %00000001 ;
04314C             0042*  
04314C             0043*  ; Table 37. Timer Input Source Select Register
04314C             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
04314C             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
04314C             0046*  ;   00: System clock / CLK_DIV
04314C             0047*  ;   01: RTC / CLK_DIV
04314C             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
04314C             0049*  ;   10: GPIO port B pin 1.
04314C             0050*  ;   11: GPIO port B pin 1.
04314C             0051*  TMR_ISS:   equ 92h ; register address
04314C             0052*  
04314C             0053*  ; Table 51. Real-Time Clock Control Register
04314C             0054*  RTC_CTRL: equ EDh ; register address
04314C             0055*  
04314C             0056*  ; alarm interrupt disable/enable
04314C             0057*  RTC_ALARM_0:    equ %00000000
04314C             0058*  RTC_ALARM_1:    equ %10000000
04314C             0059*  
04314C             0060*  ; interrupt on alarm disable/enable
04314C             0061*  RTC_INT_ENT_0:  equ %00000000
04314C             0062*  RTC_INT_ENT_1:  equ %01000000
04314C             0063*  
04314C             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
04314C             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
04314C             0066*  
04314C             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
04314C             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
04314C             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
04314C             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
04314C             0071*  
04314C             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
04314C             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
04314C             0074*  
04314C             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
04314C             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
04314C             0077*  
04314C             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
04314C             0079*                                  ; RTC counter is enabled.
04314C             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
04314C             0081*                                  ; RTC counter is disabled.
04314C             0082*  
04314C             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
04314C             0084*  
04314C             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
04314C             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
04314C 00 00 00    0087*  prt_reload: dl 0x000000
04314F             0088*  
04314F             0089*  ; set PRT timer
04314F             0090*  prt_set:
04314F 21 00 00 00 0091*      ld hl,0
043153 22 9D 31 04 0092*      ld (prt_irq_counter),hl
043157 2A 4C 31 04 0093*      ld hl,(prt_reload)
04315B ED 29 84    0094*      out0 ($84),l
04315E ED 21 85    0095*  	out0 ($85),h
043161             0096*  ; disable timer
043161 3E 06       0097*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
043163 ED 39 83    0098*  	out0 ($83),a
043166             0099*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
043166 3E 57       0100*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
043168 ED 39 83    0101*  	out0 ($83),a
04316B C9          0102*      ret
04316C             0103*  
04316C             0104*  ; ===============================================
04316C             0105*  ; PRT Timer Interrupt Handling
04316C             0106*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
04316C             0107*  ; -----------------------------------------------
04316C             0108*  prt_irq_init:
04316C             0109*      ; set up interrupt vector table 2
04316C 21 00 00 00 0110*  	ld hl,0
043170 3A 0C 01 00 0111*  	ld a,($10c)
043174 6F          0112*  	ld l,a
043175 3A 0D 01 00 0113*  	ld a,($10d)
043179 67          0114*  	ld h,a
04317A             0115*  
04317A             0116*  	; skip over CALL ($c3)
04317A 23          0117*  	inc hl
04317B             0118*  	; load address of jump into vector table 2 (in ram)
04317B ED 27       0119*  	ld hl,(hl)
04317D             0120*  
04317D             0121*  	; write CALL prt_irq_handler to vector table 2
04317D 3E C3       0122*  	ld a,$c3
04317F 77          0123*  	ld (hl),a
043180 23          0124*  	inc hl
043181 11 88 31 04 0125*  	ld de,prt_irq_handler
043185 ED 1F       0126*  	ld (hl),de
043187             0127*  
043187 C9          0128*      ret
043188             0129*  
043188             0130*  prt_irq_handler:
043188 F3          0131*  	di
043189 F5          0132*  	push af
04318A E5          0133*      push hl
04318B ED 38 83    0134*  	in0 a,($83)
04318E 2A 9D 31 04 0135*  	ld hl,(prt_irq_counter)
043192 23          0136*  	inc hl
043193 22 9D 31 04 0137*  	ld (prt_irq_counter),hl
043197 E1          0138*      pop hl
043198 F1          0139*  	pop af
043199 FB          0140*  	ei
04319A 5B ED 4D    0141*  	reti.l
04319D             0142*  
04319D             0143*  prt_irq_counter:
04319D 00 00 00    0144*  	.dl 0
0431A0             0145*  prt_irq_counter_saved:
0431A0 00 00 00    0146*      .dl 0
0431A3             0147*  
0431A3             0148*  prt_loop_reset:
0431A3 E5          0149*      push hl
0431A4 21 00 00 00 0150*  	ld hl,0
0431A8 22 9D 31 04 0151*  	ld (prt_irq_counter),hl
0431AC 22 0E 32 04 0152*      ld (prt_loop_counter),hl
0431B0 22 11 32 04 0153*      ld (prt_loops),hl
0431B4 CD 4F 31 04 0154*      call prt_set
0431B8 E1          0155*      pop hl
0431B9 C9          0156*      ret
0431BA             0157*  
0431BA             0158*  prt_loop_start:
0431BA E5          0159*      push hl
0431BB 21 00 00 00 0160*  	ld hl,0
0431BF 22 9D 31 04 0161*  	ld (prt_irq_counter),hl
0431C3 E1          0162*      pop hl
0431C4 C9          0163*      ret
0431C5             0164*  
0431C5             0165*  prt_loop_stop:
0431C5 E5          0166*      push hl
0431C6 D5          0167*      push de
0431C7 2A 9D 31 04 0168*      ld hl,(prt_irq_counter)
0431CB ED 5B 0E 32 0169*      ld de,(prt_loop_counter)
       04          
0431D0 19          0170*      add hl,de
0431D1 22 0E 32 04 0171*      ld (prt_loop_counter),hl
0431D5 21 00 00 00 0172*      ld hl,0
0431D9 22 9D 31 04 0173*      ld (prt_irq_counter),hl
0431DD 2A 11 32 04 0174*      ld hl,(prt_loops)
0431E1 23          0175*      inc hl
0431E2 22 11 32 04 0176*      ld (prt_loops),hl
0431E6 D1          0177*      pop de
0431E7 E1          0178*      pop hl
0431E8 C9          0179*      ret
0431E9             0180*  
0431E9             0181*  ; inputs: bc = y,x text coordinates to print
0431E9             0182*  prt_loop_print:
0431E9 F5          0183*      push af
0431EA E5          0184*      push hl
0431EB C5          0185*      push bc
0431EC D5          0186*      push de
0431ED DD E5       0187*      push ix
0431EF FD E5       0188*      push iy
0431F1 CD DB 1A 04 0189*      call vdu_move_cursor
0431F5             0190*  
0431F5 2A 0E 32 04 0191*      ld hl,(prt_loop_counter)
0431F9 CD 8C 15 04 0192*      call printDec
0431FD             0193*  
0431FD 2A 11 32 04 0194*      ld hl,(prt_loops)
043201 CD 8C 15 04 0195*      call printDec
043205             0196*  
043205 FD E1       0197*      pop iy
043207 DD E1       0198*      pop ix
043209 D1          0199*      pop de
04320A C1          0200*      pop bc
04320B E1          0201*      pop hl
04320C F1          0202*      pop af
04320D C9          0203*      ret
04320E             0204*  
04320E             0205*  prt_loop_counter:
04320E 00 00 00    0206*      .dl 0
043211             0207*  prt_loops:
043211 00 00 00    0208*      .dl 0
043214             0209*  
043214             0210*  ; ===============================================
043214             0211*  ; Timer functions
043214             0212*  ; -----------------------------------------------
043214             0213*  ; set a countdown timer
043214             0214*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
043214             0215*  ; returns: hl = current time
043214             0216*  tmr_set:
043214 FD 2F 03    0217*      ld (iy+3),hl            ; set time remaining
043217             0218*      MOSCALL mos_sysvars     ; ix points to syvars table
043217 3E 08       0001*M 			LD	A, function
043219 5B CF       0002*M 			RST.LIL	08h
04321B DD 27 00    0219*      ld hl,(ix+sysvar_time)  ; get current time
04321E FD 2F 00    0220*      ld (iy+0),hl            ; set start time
043221 C9          0221*      ret
043222             0222*  
043222             0223*  ; gets time remaining on a countdown timer
043222             0224*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
043222             0225*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
043222             0226*  ;          sign flags: pos = time not expired,zero or neg = time expired
043222             0227*  tmr_get:
043222             0228*      MOSCALL mos_sysvars     ; ix points to syvars table
043222 3E 08       0001*M 			LD	A, function
043224 5B CF       0002*M 			RST.LIL	08h
043226 DD 17 00    0229*      ld de,(ix+sysvar_time)  ; get current time
043229 FD 27 00    0230*      ld hl,(iy+0)            ; get start time
04322C AF          0231*      xor a                   ; clear carry
04322D ED 52       0232*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04322F FD 17 03    0233*      ld de,(iy+3)            ; get timer set value
043232 AF          0234*      xor a                   ; clear carry
043233 ED 5A       0235*      adc hl,de               ; hl = time remaining
043235             0236*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
043235 C9          0237*      ret
043236             0238*  
043236             0239*  tmr_test: ds 6 ; example of a buffer to hold timer data
04323C             0240*  
04323C 00 00 00    0241*  timestamp_now: dl 0
04323F 00 00 00    0242*  timestamp_old: dl 0
043242 00 00 00    0243*  timestamp_chg: dl 0
043245             0244*  
043245             0245*  ; update the global timestamp from the system clock
043245             0246*  ; inputs: none
043245             0247*  ; returns: hl = time elapsed in 1/120ths of a second
043245             0248*  ;          de = current time
043245             0249*  ;          ix = pointer to syvars table
043245             0250*  ; destroys: af,hl,de,ix
043245             0251*  timestamp_tick:
043245 ED 5B 3C 32 0252*      ld de,(timestamp_now)   ; get previous time
       04          
04324A ED 53 3F 32 0253*      ld (timestamp_old),de   ; save previous time
       04          
04324F             0254*      MOSCALL mos_sysvars     ; ix points to syvars table
04324F 3E 08       0001*M 			LD	A, function
043251 5B CF       0002*M 			RST.LIL	08h
043253 DD 27 00    0255*      ld hl,(ix+sysvar_time)  ; get current time
043256 22 3C 32 04 0256*      ld (timestamp_now),hl   ; save current time
04325A AF          0257*      xor a                   ; clear carry
04325B ED 52       0258*      sbc hl,de               ; hl = time elapsed
04325D 22 42 32 04 0259*      ld (timestamp_chg),hl   ; save elapsed time
043261 C9          0260*      ret
043262             0261*  
043262             0262*  ; set a countdown timer
043262             0263*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
043262             0264*  ; requires: timestamp_tick to be called at least once before this function
043262             0265*  ; returns: hl = current time
043262             0266*  ; destroys: hl
043262             0267*  timestamp_tmr_set:
043262 FD 2F 03    0268*      ld (iy+3),hl            ; set time remaining
043265 2A 3C 32 04 0269*      ld hl,(timestamp_now)   ; get current timestamp
043269 FD 2F 00    0270*      ld (iy+0),hl            ; set start time
04326C C9          0271*      ret
04326D             0272*  
04326D             0273*  ; gets time remaining on a countdown timer following the global timestamp
04326D             0274*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04326D             0275*  ; requires: timestamp_tick to be called at least once before this function
04326D             0276*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04326D             0277*  ;          sign flags: pos = time not expired,zero or neg = time expired
04326D             0278*  ; destroys: af,hl,de
04326D             0279*  timestamp_tmr_get:
04326D ED 5B 3C 32 0280*      ld de,(timestamp_now)   ; get current timestamp
       04          
043272 FD 27 00    0281*      ld hl,(iy+0)            ; get start time
043275 AF          0282*      xor a                   ; clear carry
043276 ED 52       0283*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
043278 FD 17 03    0284*      ld de,(iy+3)            ; get timer set value
04327B AF          0285*      xor a                   ; clear carry
04327C ED 5A       0286*      adc hl,de               ; hl = time remaining
04327E             0287*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04327E C9          0288*      ret
04327F             0289*  
04327F             0290*  ; set a stopwatch
04327F             0291*  ; returns: hl = start time
04327F             0292*  ; destroys: hl,ix
04327F             0293*  stopwatch_set:
04327F             0294*      MOSCALL mos_sysvars     ; ix points to syvars table
04327F 3E 08       0001*M 			LD	A, function
043281 5B CF       0002*M 			RST.LIL	08h
043283 DD 27 00    0295*      ld hl,(ix+sysvar_time)  ; get current time
043286 22 9B 32 04 0296*      ld (stopwatch_started),hl            ; set start time
04328A C9          0297*      ret
04328B             0298*  
04328B             0299*  ; gets time elapsed on a stopwatch
04328B             0300*  ; returns: hl = time elapsed in 1/120ths of a second
04328B             0301*  ; destroys: af,hl,de,ix
04328B             0302*  stopwatch_get:
04328B             0303*      MOSCALL mos_sysvars     ; ix points to syvars table
04328B 3E 08       0001*M 			LD	A, function
04328D 5B CF       0002*M 			RST.LIL	08h
04328F DD 27 00    0304*      ld hl,(ix+sysvar_time)  ; get current time
043292 ED 5B 9B 32 0305*      ld de,(stopwatch_started)            ; get start time
       04          
043297 AF          0306*      xor a                   ; clear carry
043298 ED 52       0307*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04329A C9          0308*      ret
04329B             0309*  
04329B             0310*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04329E             0311*  
04329E             0312*  ; ------------------
04329E             0313*  ; delay routine
04329E             0314*  ; Author: Richard Turrnidge
04329E             0315*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
04329E             0316*  ; routine waits a fixed time,then returns
04329E             0317*  ; arrive with A =  the delay byte. One bit to be set only.
04329E             0318*  ; eg. ld A,00000100b
04329E             0319*  
04329E             0320*  multiPurposeDelay:
04329E F5          0321*      push af
04329F C5          0322*      push bc
0432A0 DD E5       0323*      push ix
0432A2 47          0324*      ld b,a
0432A3 3E 08       0325*      ld a,$08
0432A5 5B CF       0326*      RST.LIL	08h                 ; get IX pointer to sysvars
0432A7             0327*  
0432A7             0328*  waitLoop:
0432A7             0329*  
0432A7 DD 7E 00    0330*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
0432AA             0331*  
0432AA             0332*                                  ;   we check if bit set is same as last time we checked.
0432AA             0333*                                  ;   bit 0 - don't use
0432AA             0334*                                  ;   bit 1 - changes 64 times per second
0432AA             0335*                                  ;   bit 2 - changes 32 times per second
0432AA             0336*                                  ;   bit 3 - changes 16 times per second
0432AA             0337*  
0432AA             0338*                                  ;   bit 4 - changes 8 times per second
0432AA             0339*                                  ;   bit 5 - changes 4 times per second
0432AA             0340*                                  ;   bit 6 - changes 2 times per second
0432AA             0341*                                  ;   bit 7 - changes 1 times per second
0432AA A0          0342*      and b
0432AB 4F          0343*      ld c,a
0432AC 3A BD 32 04 0344*      ld a,(oldTimeStamp)
0432B0 B9          0345*      cp c                        ; is A same as last value?
0432B1 28 F4       0346*      jr z,waitLoop              ; loop here if it is
0432B3 79          0347*      ld a,c
0432B4 32 BD 32 04 0348*      ld (oldTimeStamp),a        ; set new value
0432B8             0349*  
0432B8 DD E1       0350*      pop ix
0432BA C1          0351*      pop bc
0432BB F1          0352*      pop af
0432BC C9          0353*      ret
0432BD             0354*  
0432BD 00          0355*  oldTimeStamp:   .db 00h
0432BE             0042   	include "images.inc"
0432BE             0001*  image_type: equ 0
0432BE             0002*  image_width: equ image_type+3
0432BE             0003*  image_height: equ image_width+3
0432BE             0004*  image_filesize: equ image_height+3
0432BE             0005*  image_filename: equ image_filesize+3
0432BE             0006*  image_bufferId: equ image_filename+3
0432BE             0007*  image_record_size: equ image_bufferId+3
0432BE             0008*  
0432BE 00 00 00    0009*  cur_image_list: dl 0
0432C1 00 00 00    0010*  cur_file_idx: dl 0
0432C4 00 00 00    0011*  cur_filename: dl 0
0432C7 00 00 00    0012*  cur_buffer_id: dl 0
0432CA             0013*  
0432CA             0014*  load_ui_images:
0432CA             0015*  ; initialize image loading variables
0432CA 21 00 00 00 0016*  	ld hl,0
0432CE 22 C1 32 04 0017*  	ld (cur_file_idx),hl
0432D2 21 19 4C 04 0018*  	ld hl,ui_image_list
0432D6 22 BE 32 04 0019*  	ld (cur_image_list),hl
0432DA             0020*  ; load images
0432DA 06 04       0021*  	ld b,ui_num_images
0432DC             0022*  @loop:
0432DC C5          0023*  	push bc
0432DD CD 3B 33 04 0024*  	call load_next_image
0432E1 C1          0025*  	pop bc
0432E2 10 F8       0026*  	djnz @loop
0432E4 C9          0027*  	ret
0432E5             0028*  
0432E5             0029*  load_sprite_images:
0432E5             0030*  ; initialize image loading variables
0432E5 21 00 00 00 0031*  	ld hl,0
0432E9 22 C1 32 04 0032*  	ld (cur_file_idx),hl
0432ED 21 CC 33 04 0033*  	ld hl,sprites_image_list
0432F1 22 BE 32 04 0034*  	ld (cur_image_list),hl
0432F5 01 8E 00 00 0035*  	ld bc,sprites_num_images
0432F9             0036*  ; load images
0432F9 CD FE 32 04 0037*  	call img_load_main
0432FD C9          0038*  	ret
0432FE             0039*  
0432FE             0040*  ; inputs: bc is the number of images to load, cur_image_list set
0432FE             0041*  img_load_main:
0432FE AF          0042*  	xor a
0432FF 32 C1 32 04 0043*      ld (cur_file_idx),a
043303             0044*  
043303             0045*  img_load_main_loop:
043303             0046*  ; back up loop counter
043303 C5          0047*      push bc
043304             0048*  
043304             0049*  ; load the next image
043304 CD 3B 33 04 0050*      call load_next_image
043308             0051*  
043308             0052*  ; plot the background
043308 CD EF 1A 04 0053*  	call vdu_cls
04330C 21 02 00 00 0054*      ld hl,BUF_SPLASH_BG
043310 CD DC 1B 04 0055*      call vdu_buff_select
043314 01 00 00 00 0056*      ld bc,0
043318 11 00 00 00 0057*      ld de,0
04331C CD A5 1E 04 0058*      call vdu_plot_bmp
043320             0059*  
043320             0060*  ; ; draw the most recently loaded image
043320             0061*  ; 	ld hl,(cur_buffer_id)
043320             0062*  ; 	call vdu_buff_select
043320             0063*  ; 	ld bc,0
043320             0064*  ; 	ld de,0
043320             0065*  ; 	call vdu_plot_bmp
043320             0066*  
043320             0067*  ; move logo
043320 CD 9B 33 04 0068*  	call move_logo
043324             0069*  
043324             0070*  ; print current filename
043324 2A C4 32 04 0071*  	ld hl,(cur_filename)
043328 CD 8D 14 04 0072*  	call printString
04332C             0073*  
04332C             0074*  ; flip the framebuffer
04332C             0075*  	; call vdu_flip
04332C             0076*  
04332C             0077*  ; decrement loop counter
04332C C1          0078*      pop bc
04332D 0B          0079*  	dec bc
04332E 79          0080*      ld a,c
04332F B7          0081*      or a
043330 C2 03 33 04 0082*      jp nz,img_load_main_loop
043334 78          0083*      ld a,b
043335 B7          0084*      or a
043336 C2 03 33 04 0085*      jp nz,img_load_main_loop
04333A C9          0086*      ret
04333B             0087*  
04333B             0088*  load_next_image:
04333B 16 12       0089*      ld d,image_record_size
04333D 3A C1 32 04 0090*  	ld a,(cur_file_idx)
043341 5F          0091*  	ld e,a
043342 ED 5C       0092*      mlt de
043344 FD 2A BE 32 0093*      ld iy,(cur_image_list)
       04          
043349 FD 19       0094*      add iy,de
04334B             0095*  
04334B FD 7E 00    0096*      ld a,(iy+image_type) ; get image type
04334E FD 07 03    0097*      ld bc,(iy+image_width) ; get image width
043351 FD 17 06    0098*      ld de,(iy+image_height) ; get image height
043354 FD 31 09    0099*      ld ix,(iy+image_filesize) ; get image file size
043357 FD 27 0F    0100*  	ld hl,(iy+image_bufferId) ; get image bufferId
04335A 22 C7 32 04 0101*  	ld (cur_buffer_id),hl
04335E FD 37 0C    0102*      ld iy,(iy+image_filename) ; get image filename
043361 FD 22 C4 32 0103*  	ld (cur_filename),iy
       04          
043366 CD FA 1C 04 0104*      call vdu_load_img
04336A FD 21 C1 32 0105*      ld iy,cur_file_idx
       04          
04336F FD 34 00    0106*  	inc (iy)
043372 C9          0107*  	ret
043373             0108*  
043373             0109*  img_load_init:
043373             0110*  ; initialize logo's position parameters
043373 21 00 00 00 0111*  	ld hl,0
043377 22 C0 33 04 0112*  	ld (logo_xvel),hl
04337B 22 C3 33 04 0113*  	ld (logo_xpos),hl
04337F             0114*  ; begin 16.8 maths to determine logo's y position and velocity
04337F 21 00 E0 00 0115*  	ld hl,240-16*256 ; allow space for text at bottom of screen
043383 22 C9 33 04 0116*  	ld (logo_ypos),hl
043387 EB          0117*  	ex de,hl
043388 21 00 F8 FF 0118*  	ld hl,-8*256 ; 8 pixels from top of screen
04338C 19          0119*  	add hl,de ; distance for logo to travel
04338D 11 00 72 FF 0120*  	ld de,-sprites_num_images*256
043391 CD D5 22 04 0121*  	call sdiv168 ; ud.e = distance / num images = y velocity
043395 ED 53 C6 33 0122*  	ld (logo_yvel),de
       04          
04339A             0123*  ; all done
04339A C9          0124*      ret
04339B             0125*  
04339B             0126*  move_logo:
04339B             0127*  ; activate logo bitmap
04339B 21 03 00 00 0128*  	ld hl, BUF_SPLASH_LOGO
04339F CD DC 1B 04 0129*  	call vdu_buff_select
0433A3             0130*  ; update position based on velocity parameters
0433A3 2A C9 33 04 0131*  	ld hl,(logo_ypos)
0433A7 ED 5B C6 33 0132*  	ld de,(logo_yvel)
       04          
0433AC 19          0133*  	add hl,de
0433AD 22 C9 33 04 0134*  	ld (logo_ypos),hl
0433B1             0135*  ; draw logo
0433B1 ED 4B C3 33 0136*  	ld bc,(logo_xpos)
       04          
0433B6 ED 5B C9 33 0137*  	ld de,(logo_ypos)
       04          
0433BB CD C1 1E 04 0138*  	call vdu_plot_bmp168
0433BF C9          0139*  	ret
0433C0             0140*  
0433C0 00 00 00    0141*  logo_xvel: dl 0
0433C3 00 00 00    0142*  logo_xpos: dl 0
0433C6             0143*  
0433C6 00 00 00    0144*  logo_yvel: dl 0
0433C9 00 00 00    0145*  logo_ypos: dl 0
0433CC             0043   	include "images_sprites.inc"
0433CC             0001*  ; Generated by make_images.py
0433CC             0002*  
0433CC             0003*  sprites_num_images: equ 142
0433CC             0004*  
0433CC             0005*  ; buffer_ids:
0433CC             0006*  BUF_0TILE_EMPTY: equ 256
0433CC             0007*  BUF_1TILE_CROSS: equ 257
0433CC             0008*  BUF_2TILE_HORIZ: equ 258
0433CC             0009*  BUF_3TILE_VERT: equ 259
0433CC             0010*  BUF_4TILE_SQUARE: equ 260
0433CC             0011*  BUF_5TILE_CIRCLE: equ 261
0433CC             0012*  BUF_6TILE_PAD: equ 262
0433CC             0013*  BUF_7TILE_TURRET: equ 263
0433CC             0014*  BUF_CIRCLE: equ 264
0433CC             0015*  BUF_CRATER: equ 265
0433CC             0016*  BUF_EXPLOSION_A: equ 266
0433CC             0017*  BUF_EXPLOSION_B: equ 267
0433CC             0018*  BUF_EXPLOSION_C: equ 268
0433CC             0019*  BUF_EXPLOSION_D: equ 269
0433CC             0020*  BUF_EXPLOSION_E: equ 270
0433CC             0021*  BUF_FIREBALL_A: equ 271
0433CC             0022*  BUF_FIREBALL_B: equ 272
0433CC             0023*  BUF_LASER_A: equ 273
0433CC             0024*  BUF_LASER_B: equ 274
0433CC             0025*  BUF_PAD: equ 275
0433CC             0026*  BUF_SEEKER_000: equ 276
0433CC             0027*  BUF_SEEKER_008: equ 277
0433CC             0028*  BUF_SEEKER_016: equ 278
0433CC             0029*  BUF_SEEKER_024: equ 279
0433CC             0030*  BUF_SEEKER_032: equ 280
0433CC             0031*  BUF_SEEKER_040: equ 281
0433CC             0032*  BUF_SEEKER_048: equ 282
0433CC             0033*  BUF_SEEKER_056: equ 283
0433CC             0034*  BUF_SEEKER_064: equ 284
0433CC             0035*  BUF_SEEKER_072: equ 285
0433CC             0036*  BUF_SEEKER_080: equ 286
0433CC             0037*  BUF_SEEKER_088: equ 287
0433CC             0038*  BUF_SEEKER_096: equ 288
0433CC             0039*  BUF_SEEKER_104: equ 289
0433CC             0040*  BUF_SEEKER_112: equ 290
0433CC             0041*  BUF_SEEKER_120: equ 291
0433CC             0042*  BUF_SEEKER_128: equ 292
0433CC             0043*  BUF_SEEKER_136: equ 293
0433CC             0044*  BUF_SEEKER_144: equ 294
0433CC             0045*  BUF_SEEKER_152: equ 295
0433CC             0046*  BUF_SEEKER_160: equ 296
0433CC             0047*  BUF_SEEKER_168: equ 297
0433CC             0048*  BUF_SEEKER_176: equ 298
0433CC             0049*  BUF_SEEKER_184: equ 299
0433CC             0050*  BUF_SEEKER_192: equ 300
0433CC             0051*  BUF_SEEKER_200: equ 301
0433CC             0052*  BUF_SEEKER_208: equ 302
0433CC             0053*  BUF_SEEKER_216: equ 303
0433CC             0054*  BUF_SEEKER_224: equ 304
0433CC             0055*  BUF_SEEKER_232: equ 305
0433CC             0056*  BUF_SEEKER_240: equ 306
0433CC             0057*  BUF_SEEKER_248: equ 307
0433CC             0058*  BUF_SHIP_0L: equ 308
0433CC             0059*  BUF_SHIP_1C: equ 309
0433CC             0060*  BUF_SHIP_2R: equ 310
0433CC             0061*  BUF_SHIP_SMALL: equ 311
0433CC             0062*  BUF_STAR: equ 312
0433CC             0063*  BUF_STATION_BG_00: equ 313
0433CC             0064*  BUF_STATION_BG_01: equ 314
0433CC             0065*  BUF_STATION_BG_02: equ 315
0433CC             0066*  BUF_STATION_BG_03: equ 316
0433CC             0067*  BUF_STATION_BG_04: equ 317
0433CC             0068*  BUF_STATION_BG_05: equ 318
0433CC             0069*  BUF_TURRET_000: equ 319
0433CC             0070*  BUF_TURRET_008: equ 320
0433CC             0071*  BUF_TURRET_016: equ 321
0433CC             0072*  BUF_TURRET_024: equ 322
0433CC             0073*  BUF_TURRET_032: equ 323
0433CC             0074*  BUF_TURRET_040: equ 324
0433CC             0075*  BUF_TURRET_048: equ 325
0433CC             0076*  BUF_TURRET_056: equ 326
0433CC             0077*  BUF_TURRET_064: equ 327
0433CC             0078*  BUF_TURRET_072: equ 328
0433CC             0079*  BUF_TURRET_080: equ 329
0433CC             0080*  BUF_TURRET_088: equ 330
0433CC             0081*  BUF_TURRET_096: equ 331
0433CC             0082*  BUF_TURRET_104: equ 332
0433CC             0083*  BUF_TURRET_112: equ 333
0433CC             0084*  BUF_TURRET_120: equ 334
0433CC             0085*  BUF_TURRET_128: equ 335
0433CC             0086*  BUF_TURRET_136: equ 336
0433CC             0087*  BUF_TURRET_144: equ 337
0433CC             0088*  BUF_TURRET_152: equ 338
0433CC             0089*  BUF_TURRET_160: equ 339
0433CC             0090*  BUF_TURRET_168: equ 340
0433CC             0091*  BUF_TURRET_176: equ 341
0433CC             0092*  BUF_TURRET_184: equ 342
0433CC             0093*  BUF_TURRET_192: equ 343
0433CC             0094*  BUF_TURRET_200: equ 344
0433CC             0095*  BUF_TURRET_208: equ 345
0433CC             0096*  BUF_TURRET_216: equ 346
0433CC             0097*  BUF_TURRET_224: equ 347
0433CC             0098*  BUF_TURRET_232: equ 348
0433CC             0099*  BUF_TURRET_240: equ 349
0433CC             0100*  BUF_TURRET_248: equ 350
0433CC             0101*  BUF_XEVIOUS_00: equ 351
0433CC             0102*  BUF_XEVIOUS_01: equ 352
0433CC             0103*  BUF_XEVIOUS_02: equ 353
0433CC             0104*  BUF_XEVIOUS_03: equ 354
0433CC             0105*  BUF_XEVIOUS_04: equ 355
0433CC             0106*  BUF_XEVIOUS_05: equ 356
0433CC             0107*  BUF_XEVIOUS_06: equ 357
0433CC             0108*  BUF_XEVIOUS_07: equ 358
0433CC             0109*  BUF_XEVIOUS_08: equ 359
0433CC             0110*  BUF_XEVIOUS_09: equ 360
0433CC             0111*  BUF_XEVIOUS_10: equ 361
0433CC             0112*  BUF_XEVIOUS_11: equ 362
0433CC             0113*  BUF_XEVIOUS_12: equ 363
0433CC             0114*  BUF_XEVIOUS_13: equ 364
0433CC             0115*  BUF_XEVIOUS_14: equ 365
0433CC             0116*  BUF_XEVIOUS_15: equ 366
0433CC             0117*  BUF_XEVIOUS_16: equ 367
0433CC             0118*  BUF_XEVIOUS_17: equ 368
0433CC             0119*  BUF_XEVIOUS_18: equ 369
0433CC             0120*  BUF_XEVIOUS_19: equ 370
0433CC             0121*  BUF_XEVIOUS_20: equ 371
0433CC             0122*  BUF_XEVIOUS_21: equ 372
0433CC             0123*  BUF_XEVIOUS_22: equ 373
0433CC             0124*  BUF_XEVIOUS_23: equ 374
0433CC             0125*  BUF_XEVIOUS_24: equ 375
0433CC             0126*  BUF_XEVIOUS_25: equ 376
0433CC             0127*  BUF_XEVIOUS_26: equ 377
0433CC             0128*  BUF_XEVIOUS_27: equ 378
0433CC             0129*  BUF_XEVIOUS_28: equ 379
0433CC             0130*  BUF_XEVIOUS_29: equ 380
0433CC             0131*  BUF_XEVIOUS_30: equ 381
0433CC             0132*  BUF_XEVIOUS_31: equ 382
0433CC             0133*  BUF_XEVIOUS_SPRITE_065: equ 383
0433CC             0134*  BUF_XEVIOUS_SPRITE_066: equ 384
0433CC             0135*  BUF_XEVIOUS_SPRITE_067: equ 385
0433CC             0136*  BUF_XEVIOUS_SPRITE_068: equ 386
0433CC             0137*  BUF_XEVIOUS_SPRITE_069: equ 387
0433CC             0138*  BUF_XEVIOUS_SPRITE_070: equ 388
0433CC             0139*  BUF_XEVIOUS_SPRITE_071: equ 389
0433CC             0140*  BUF_XEVIOUS_SPRITE_072: equ 390
0433CC             0141*  BUF_XEVIOUS_SPRITE_073: equ 391
0433CC             0142*  BUF_XEVIOUS_SPRITE_074: equ 392
0433CC             0143*  BUF_XEVIOUS_SPRITE_075: equ 393
0433CC             0144*  BUF_XEVIOUS_SPRITE_076: equ 394
0433CC             0145*  BUF_XEVIOUS_SPRITE_077: equ 395
0433CC             0146*  BUF_XEVIOUS_SPRITE_078: equ 396
0433CC             0147*  BUF_XEVIOUS_SPRITE_079: equ 397
0433CC             0148*  
0433CC             0149*  sprites_image_list: ; type; width; height; filename; bufferId:
0433CC 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_0tile_empty, 256
       00 00 10 00 
       00 00 01 00 
       C8 3D 04 00 
       01 00       
0433DE 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_1tile_cross, 257
       00 00 10 00 
       00 00 01 00 
       E2 3D 04 01 
       01 00       
0433F0 01 00 00 10 0152*  	dl 1, 16, 16, 256, fn_2tile_horiz, 258
       00 00 10 00 
       00 00 01 00 
       FC 3D 04 02 
       01 00       
043402 01 00 00 10 0153*  	dl 1, 16, 16, 256, fn_3tile_vert, 259
       00 00 10 00 
       00 00 01 00 
       16 3E 04 03 
       01 00       
043414 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_4tile_square, 260
       00 00 10 00 
       00 00 01 00 
       2F 3E 04 04 
       01 00       
043426 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_5tile_circle, 261
       00 00 10 00 
       00 00 01 00 
       4A 3E 04 05 
       01 00       
043438 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_6tile_pad, 262
       00 00 10 00 
       00 00 01 00 
       65 3E 04 06 
       01 00       
04344A 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_7tile_turret, 263
       00 00 10 00 
       00 00 01 00 
       7D 3E 04 07 
       01 00       
04345C 01 00 00 10 0158*  	dl 1, 16, 16, 256, fn_circle, 264
       00 00 10 00 
       00 00 01 00 
       98 3E 04 08 
       01 00       
04346E 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_crater, 265
       00 00 10 00 
       00 00 01 00 
       AD 3E 04 09 
       01 00       
043480 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_explosion_a, 266
       00 00 10 00 
       00 00 01 00 
       C2 3E 04 0A 
       01 00       
043492 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_explosion_b, 267
       00 00 10 00 
       00 00 01 00 
       DC 3E 04 0B 
       01 00       
0434A4 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_explosion_c, 268
       00 00 10 00 
       00 00 01 00 
       F6 3E 04 0C 
       01 00       
0434B6 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_explosion_d, 269
       00 00 10 00 
       00 00 01 00 
       10 3F 04 0D 
       01 00       
0434C8 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_explosion_e, 270
       00 00 10 00 
       00 00 01 00 
       2A 3F 04 0E 
       01 00       
0434DA 01 00 00 07 0165*  	dl 1, 7, 7, 49, fn_fireball_a, 271
       00 00 07 00 
       00 31 00 00 
       44 3F 04 0F 
       01 00       
0434EC 01 00 00 07 0166*  	dl 1, 7, 7, 49, fn_fireball_b, 272
       00 00 07 00 
       00 31 00 00 
       5D 3F 04 10 
       01 00       
0434FE 01 00 00 05 0167*  	dl 1, 5, 13, 65, fn_laser_a, 273
       00 00 0D 00 
       00 41 00 00 
       76 3F 04 11 
       01 00       
043510 01 00 00 05 0168*  	dl 1, 5, 13, 65, fn_laser_b, 274
       00 00 0D 00 
       00 41 00 00 
       8C 3F 04 12 
       01 00       
043522 01 00 00 10 0169*  	dl 1, 16, 16, 256, fn_pad, 275
       00 00 10 00 
       00 00 01 00 
       A2 3F 04 13 
       01 00       
043534 01 00 00 10 0170*  	dl 1, 16, 16, 256, fn_seeker_000, 276
       00 00 10 00 
       00 00 01 00 
       B4 3F 04 14 
       01 00       
043546 01 00 00 10 0171*  	dl 1, 16, 16, 256, fn_seeker_008, 277
       00 00 10 00 
       00 00 01 00 
       CD 3F 04 15 
       01 00       
043558 01 00 00 10 0172*  	dl 1, 16, 16, 256, fn_seeker_016, 278
       00 00 10 00 
       00 00 01 00 
       E6 3F 04 16 
       01 00       
04356A 01 00 00 10 0173*  	dl 1, 16, 16, 256, fn_seeker_024, 279
       00 00 10 00 
       00 00 01 00 
       FF 3F 04 17 
       01 00       
04357C 01 00 00 10 0174*  	dl 1, 16, 16, 256, fn_seeker_032, 280
       00 00 10 00 
       00 00 01 00 
       18 40 04 18 
       01 00       
04358E 01 00 00 10 0175*  	dl 1, 16, 16, 256, fn_seeker_040, 281
       00 00 10 00 
       00 00 01 00 
       31 40 04 19 
       01 00       
0435A0 01 00 00 10 0176*  	dl 1, 16, 16, 256, fn_seeker_048, 282
       00 00 10 00 
       00 00 01 00 
       4A 40 04 1A 
       01 00       
0435B2 01 00 00 10 0177*  	dl 1, 16, 16, 256, fn_seeker_056, 283
       00 00 10 00 
       00 00 01 00 
       63 40 04 1B 
       01 00       
0435C4 01 00 00 10 0178*  	dl 1, 16, 16, 256, fn_seeker_064, 284
       00 00 10 00 
       00 00 01 00 
       7C 40 04 1C 
       01 00       
0435D6 01 00 00 10 0179*  	dl 1, 16, 16, 256, fn_seeker_072, 285
       00 00 10 00 
       00 00 01 00 
       95 40 04 1D 
       01 00       
0435E8 01 00 00 10 0180*  	dl 1, 16, 16, 256, fn_seeker_080, 286
       00 00 10 00 
       00 00 01 00 
       AE 40 04 1E 
       01 00       
0435FA 01 00 00 10 0181*  	dl 1, 16, 16, 256, fn_seeker_088, 287
       00 00 10 00 
       00 00 01 00 
       C7 40 04 1F 
       01 00       
04360C 01 00 00 10 0182*  	dl 1, 16, 16, 256, fn_seeker_096, 288
       00 00 10 00 
       00 00 01 00 
       E0 40 04 20 
       01 00       
04361E 01 00 00 10 0183*  	dl 1, 16, 16, 256, fn_seeker_104, 289
       00 00 10 00 
       00 00 01 00 
       F9 40 04 21 
       01 00       
043630 01 00 00 10 0184*  	dl 1, 16, 16, 256, fn_seeker_112, 290
       00 00 10 00 
       00 00 01 00 
       12 41 04 22 
       01 00       
043642 01 00 00 10 0185*  	dl 1, 16, 16, 256, fn_seeker_120, 291
       00 00 10 00 
       00 00 01 00 
       2B 41 04 23 
       01 00       
043654 01 00 00 10 0186*  	dl 1, 16, 16, 256, fn_seeker_128, 292
       00 00 10 00 
       00 00 01 00 
       44 41 04 24 
       01 00       
043666 01 00 00 10 0187*  	dl 1, 16, 16, 256, fn_seeker_136, 293
       00 00 10 00 
       00 00 01 00 
       5D 41 04 25 
       01 00       
043678 01 00 00 10 0188*  	dl 1, 16, 16, 256, fn_seeker_144, 294
       00 00 10 00 
       00 00 01 00 
       76 41 04 26 
       01 00       
04368A 01 00 00 10 0189*  	dl 1, 16, 16, 256, fn_seeker_152, 295
       00 00 10 00 
       00 00 01 00 
       8F 41 04 27 
       01 00       
04369C 01 00 00 10 0190*  	dl 1, 16, 16, 256, fn_seeker_160, 296
       00 00 10 00 
       00 00 01 00 
       A8 41 04 28 
       01 00       
0436AE 01 00 00 10 0191*  	dl 1, 16, 16, 256, fn_seeker_168, 297
       00 00 10 00 
       00 00 01 00 
       C1 41 04 29 
       01 00       
0436C0 01 00 00 10 0192*  	dl 1, 16, 16, 256, fn_seeker_176, 298
       00 00 10 00 
       00 00 01 00 
       DA 41 04 2A 
       01 00       
0436D2 01 00 00 10 0193*  	dl 1, 16, 16, 256, fn_seeker_184, 299
       00 00 10 00 
       00 00 01 00 
       F3 41 04 2B 
       01 00       
0436E4 01 00 00 10 0194*  	dl 1, 16, 16, 256, fn_seeker_192, 300
       00 00 10 00 
       00 00 01 00 
       0C 42 04 2C 
       01 00       
0436F6 01 00 00 10 0195*  	dl 1, 16, 16, 256, fn_seeker_200, 301
       00 00 10 00 
       00 00 01 00 
       25 42 04 2D 
       01 00       
043708 01 00 00 10 0196*  	dl 1, 16, 16, 256, fn_seeker_208, 302
       00 00 10 00 
       00 00 01 00 
       3E 42 04 2E 
       01 00       
04371A 01 00 00 10 0197*  	dl 1, 16, 16, 256, fn_seeker_216, 303
       00 00 10 00 
       00 00 01 00 
       57 42 04 2F 
       01 00       
04372C 01 00 00 10 0198*  	dl 1, 16, 16, 256, fn_seeker_224, 304
       00 00 10 00 
       00 00 01 00 
       70 42 04 30 
       01 00       
04373E 01 00 00 10 0199*  	dl 1, 16, 16, 256, fn_seeker_232, 305
       00 00 10 00 
       00 00 01 00 
       89 42 04 31 
       01 00       
043750 01 00 00 10 0200*  	dl 1, 16, 16, 256, fn_seeker_240, 306
       00 00 10 00 
       00 00 01 00 
       A2 42 04 32 
       01 00       
043762 01 00 00 10 0201*  	dl 1, 16, 16, 256, fn_seeker_248, 307
       00 00 10 00 
       00 00 01 00 
       BB 42 04 33 
       01 00       
043774 01 00 00 10 0202*  	dl 1, 16, 16, 256, fn_ship_0l, 308
       00 00 10 00 
       00 00 01 00 
       D4 42 04 34 
       01 00       
043786 01 00 00 10 0203*  	dl 1, 16, 16, 256, fn_ship_1c, 309
       00 00 10 00 
       00 00 01 00 
       EA 42 04 35 
       01 00       
043798 01 00 00 10 0204*  	dl 1, 16, 16, 256, fn_ship_2r, 310
       00 00 10 00 
       00 00 01 00 
       00 43 04 36 
       01 00       
0437AA 01 00 00 08 0205*  	dl 1, 8, 8, 64, fn_ship_small, 311
       00 00 08 00 
       00 40 00 00 
       16 43 04 37 
       01 00       
0437BC 01 00 00 05 0206*  	dl 1, 5, 5, 25, fn_star, 312
       00 00 05 00 
       00 19 00 00 
       2F 43 04 38 
       01 00       
0437CE 01 00 00 00 0207*  	dl 1, 256, 256, 65536, fn_station_bg_00, 313
       01 00 00 01 
       00 00 00 01 
       42 43 04 39 
       01 00       
0437E0 01 00 00 00 0208*  	dl 1, 256, 256, 65536, fn_station_bg_01, 314
       01 00 00 01 
       00 00 00 01 
       5E 43 04 3A 
       01 00       
0437F2 01 00 00 00 0209*  	dl 1, 256, 256, 65536, fn_station_bg_02, 315
       01 00 00 01 
       00 00 00 01 
       7A 43 04 3B 
       01 00       
043804 01 00 00 00 0210*  	dl 1, 256, 256, 65536, fn_station_bg_03, 316
       01 00 00 01 
       00 00 00 01 
       96 43 04 3C 
       01 00       
043816 01 00 00 00 0211*  	dl 1, 256, 256, 65536, fn_station_bg_04, 317
       01 00 00 01 
       00 00 00 01 
       B2 43 04 3D 
       01 00       
043828 01 00 00 00 0212*  	dl 1, 256, 256, 65536, fn_station_bg_05, 318
       01 00 00 01 
       00 00 00 01 
       CE 43 04 3E 
       01 00       
04383A 01 00 00 10 0213*  	dl 1, 16, 16, 256, fn_turret_000, 319
       00 00 10 00 
       00 00 01 00 
       EA 43 04 3F 
       01 00       
04384C 01 00 00 10 0214*  	dl 1, 16, 16, 256, fn_turret_008, 320
       00 00 10 00 
       00 00 01 00 
       03 44 04 40 
       01 00       
04385E 01 00 00 10 0215*  	dl 1, 16, 16, 256, fn_turret_016, 321
       00 00 10 00 
       00 00 01 00 
       1C 44 04 41 
       01 00       
043870 01 00 00 10 0216*  	dl 1, 16, 16, 256, fn_turret_024, 322
       00 00 10 00 
       00 00 01 00 
       35 44 04 42 
       01 00       
043882 01 00 00 10 0217*  	dl 1, 16, 16, 256, fn_turret_032, 323
       00 00 10 00 
       00 00 01 00 
       4E 44 04 43 
       01 00       
043894 01 00 00 10 0218*  	dl 1, 16, 16, 256, fn_turret_040, 324
       00 00 10 00 
       00 00 01 00 
       67 44 04 44 
       01 00       
0438A6 01 00 00 10 0219*  	dl 1, 16, 16, 256, fn_turret_048, 325
       00 00 10 00 
       00 00 01 00 
       80 44 04 45 
       01 00       
0438B8 01 00 00 10 0220*  	dl 1, 16, 16, 256, fn_turret_056, 326
       00 00 10 00 
       00 00 01 00 
       99 44 04 46 
       01 00       
0438CA 01 00 00 10 0221*  	dl 1, 16, 16, 256, fn_turret_064, 327
       00 00 10 00 
       00 00 01 00 
       B2 44 04 47 
       01 00       
0438DC 01 00 00 10 0222*  	dl 1, 16, 16, 256, fn_turret_072, 328
       00 00 10 00 
       00 00 01 00 
       CB 44 04 48 
       01 00       
0438EE 01 00 00 10 0223*  	dl 1, 16, 16, 256, fn_turret_080, 329
       00 00 10 00 
       00 00 01 00 
       E4 44 04 49 
       01 00       
043900 01 00 00 10 0224*  	dl 1, 16, 16, 256, fn_turret_088, 330
       00 00 10 00 
       00 00 01 00 
       FD 44 04 4A 
       01 00       
043912 01 00 00 10 0225*  	dl 1, 16, 16, 256, fn_turret_096, 331
       00 00 10 00 
       00 00 01 00 
       16 45 04 4B 
       01 00       
043924 01 00 00 10 0226*  	dl 1, 16, 16, 256, fn_turret_104, 332
       00 00 10 00 
       00 00 01 00 
       2F 45 04 4C 
       01 00       
043936 01 00 00 10 0227*  	dl 1, 16, 16, 256, fn_turret_112, 333
       00 00 10 00 
       00 00 01 00 
       48 45 04 4D 
       01 00       
043948 01 00 00 10 0228*  	dl 1, 16, 16, 256, fn_turret_120, 334
       00 00 10 00 
       00 00 01 00 
       61 45 04 4E 
       01 00       
04395A 01 00 00 10 0229*  	dl 1, 16, 16, 256, fn_turret_128, 335
       00 00 10 00 
       00 00 01 00 
       7A 45 04 4F 
       01 00       
04396C 01 00 00 10 0230*  	dl 1, 16, 16, 256, fn_turret_136, 336
       00 00 10 00 
       00 00 01 00 
       93 45 04 50 
       01 00       
04397E 01 00 00 10 0231*  	dl 1, 16, 16, 256, fn_turret_144, 337
       00 00 10 00 
       00 00 01 00 
       AC 45 04 51 
       01 00       
043990 01 00 00 10 0232*  	dl 1, 16, 16, 256, fn_turret_152, 338
       00 00 10 00 
       00 00 01 00 
       C5 45 04 52 
       01 00       
0439A2 01 00 00 10 0233*  	dl 1, 16, 16, 256, fn_turret_160, 339
       00 00 10 00 
       00 00 01 00 
       DE 45 04 53 
       01 00       
0439B4 01 00 00 10 0234*  	dl 1, 16, 16, 256, fn_turret_168, 340
       00 00 10 00 
       00 00 01 00 
       F7 45 04 54 
       01 00       
0439C6 01 00 00 10 0235*  	dl 1, 16, 16, 256, fn_turret_176, 341
       00 00 10 00 
       00 00 01 00 
       10 46 04 55 
       01 00       
0439D8 01 00 00 10 0236*  	dl 1, 16, 16, 256, fn_turret_184, 342
       00 00 10 00 
       00 00 01 00 
       29 46 04 56 
       01 00       
0439EA 01 00 00 10 0237*  	dl 1, 16, 16, 256, fn_turret_192, 343
       00 00 10 00 
       00 00 01 00 
       42 46 04 57 
       01 00       
0439FC 01 00 00 10 0238*  	dl 1, 16, 16, 256, fn_turret_200, 344
       00 00 10 00 
       00 00 01 00 
       5B 46 04 58 
       01 00       
043A0E 01 00 00 10 0239*  	dl 1, 16, 16, 256, fn_turret_208, 345
       00 00 10 00 
       00 00 01 00 
       74 46 04 59 
       01 00       
043A20 01 00 00 10 0240*  	dl 1, 16, 16, 256, fn_turret_216, 346
       00 00 10 00 
       00 00 01 00 
       8D 46 04 5A 
       01 00       
043A32 01 00 00 10 0241*  	dl 1, 16, 16, 256, fn_turret_224, 347
       00 00 10 00 
       00 00 01 00 
       A6 46 04 5B 
       01 00       
043A44 01 00 00 10 0242*  	dl 1, 16, 16, 256, fn_turret_232, 348
       00 00 10 00 
       00 00 01 00 
       BF 46 04 5C 
       01 00       
043A56 01 00 00 10 0243*  	dl 1, 16, 16, 256, fn_turret_240, 349
       00 00 10 00 
       00 00 01 00 
       D8 46 04 5D 
       01 00       
043A68 01 00 00 10 0244*  	dl 1, 16, 16, 256, fn_turret_248, 350
       00 00 10 00 
       00 00 01 00 
       F1 46 04 5E 
       01 00       
043A7A 01 00 00 00 0245*  	dl 1, 256, 256, 65536, fn_xevious_00, 351
       01 00 00 01 
       00 00 00 01 
       0A 47 04 5F 
       01 00       
043A8C 01 00 00 00 0246*  	dl 1, 256, 256, 65536, fn_xevious_01, 352
       01 00 00 01 
       00 00 00 01 
       23 47 04 60 
       01 00       
043A9E 01 00 00 00 0247*  	dl 1, 256, 256, 65536, fn_xevious_02, 353
       01 00 00 01 
       00 00 00 01 
       3C 47 04 61 
       01 00       
043AB0 01 00 00 00 0248*  	dl 1, 256, 256, 65536, fn_xevious_03, 354
       01 00 00 01 
       00 00 00 01 
       55 47 04 62 
       01 00       
043AC2 01 00 00 00 0249*  	dl 1, 256, 256, 65536, fn_xevious_04, 355
       01 00 00 01 
       00 00 00 01 
       6E 47 04 63 
       01 00       
043AD4 01 00 00 00 0250*  	dl 1, 256, 256, 65536, fn_xevious_05, 356
       01 00 00 01 
       00 00 00 01 
       87 47 04 64 
       01 00       
043AE6 01 00 00 00 0251*  	dl 1, 256, 256, 65536, fn_xevious_06, 357
       01 00 00 01 
       00 00 00 01 
       A0 47 04 65 
       01 00       
043AF8 01 00 00 00 0252*  	dl 1, 256, 256, 65536, fn_xevious_07, 358
       01 00 00 01 
       00 00 00 01 
       B9 47 04 66 
       01 00       
043B0A 01 00 00 00 0253*  	dl 1, 256, 256, 65536, fn_xevious_08, 359
       01 00 00 01 
       00 00 00 01 
       D2 47 04 67 
       01 00       
043B1C 01 00 00 00 0254*  	dl 1, 256, 256, 65536, fn_xevious_09, 360
       01 00 00 01 
       00 00 00 01 
       EB 47 04 68 
       01 00       
043B2E 01 00 00 00 0255*  	dl 1, 256, 256, 65536, fn_xevious_10, 361
       01 00 00 01 
       00 00 00 01 
       04 48 04 69 
       01 00       
043B40 01 00 00 00 0256*  	dl 1, 256, 256, 65536, fn_xevious_11, 362
       01 00 00 01 
       00 00 00 01 
       1D 48 04 6A 
       01 00       
043B52 01 00 00 00 0257*  	dl 1, 256, 256, 65536, fn_xevious_12, 363
       01 00 00 01 
       00 00 00 01 
       36 48 04 6B 
       01 00       
043B64 01 00 00 00 0258*  	dl 1, 256, 256, 65536, fn_xevious_13, 364
       01 00 00 01 
       00 00 00 01 
       4F 48 04 6C 
       01 00       
043B76 01 00 00 00 0259*  	dl 1, 256, 256, 65536, fn_xevious_14, 365
       01 00 00 01 
       00 00 00 01 
       68 48 04 6D 
       01 00       
043B88 01 00 00 00 0260*  	dl 1, 256, 256, 65536, fn_xevious_15, 366
       01 00 00 01 
       00 00 00 01 
       81 48 04 6E 
       01 00       
043B9A 01 00 00 00 0261*  	dl 1, 256, 256, 65536, fn_xevious_16, 367
       01 00 00 01 
       00 00 00 01 
       9A 48 04 6F 
       01 00       
043BAC 01 00 00 00 0262*  	dl 1, 256, 256, 65536, fn_xevious_17, 368
       01 00 00 01 
       00 00 00 01 
       B3 48 04 70 
       01 00       
043BBE 01 00 00 00 0263*  	dl 1, 256, 256, 65536, fn_xevious_18, 369
       01 00 00 01 
       00 00 00 01 
       CC 48 04 71 
       01 00       
043BD0 01 00 00 00 0264*  	dl 1, 256, 256, 65536, fn_xevious_19, 370
       01 00 00 01 
       00 00 00 01 
       E5 48 04 72 
       01 00       
043BE2 01 00 00 00 0265*  	dl 1, 256, 256, 65536, fn_xevious_20, 371
       01 00 00 01 
       00 00 00 01 
       FE 48 04 73 
       01 00       
043BF4 01 00 00 00 0266*  	dl 1, 256, 256, 65536, fn_xevious_21, 372
       01 00 00 01 
       00 00 00 01 
       17 49 04 74 
       01 00       
043C06 01 00 00 00 0267*  	dl 1, 256, 256, 65536, fn_xevious_22, 373
       01 00 00 01 
       00 00 00 01 
       30 49 04 75 
       01 00       
043C18 01 00 00 00 0268*  	dl 1, 256, 256, 65536, fn_xevious_23, 374
       01 00 00 01 
       00 00 00 01 
       49 49 04 76 
       01 00       
043C2A 01 00 00 00 0269*  	dl 1, 256, 256, 65536, fn_xevious_24, 375
       01 00 00 01 
       00 00 00 01 
       62 49 04 77 
       01 00       
043C3C 01 00 00 00 0270*  	dl 1, 256, 256, 65536, fn_xevious_25, 376
       01 00 00 01 
       00 00 00 01 
       7B 49 04 78 
       01 00       
043C4E 01 00 00 00 0271*  	dl 1, 256, 256, 65536, fn_xevious_26, 377
       01 00 00 01 
       00 00 00 01 
       94 49 04 79 
       01 00       
043C60 01 00 00 00 0272*  	dl 1, 256, 256, 65536, fn_xevious_27, 378
       01 00 00 01 
       00 00 00 01 
       AD 49 04 7A 
       01 00       
043C72 01 00 00 00 0273*  	dl 1, 256, 256, 65536, fn_xevious_28, 379
       01 00 00 01 
       00 00 00 01 
       C6 49 04 7B 
       01 00       
043C84 01 00 00 00 0274*  	dl 1, 256, 256, 65536, fn_xevious_29, 380
       01 00 00 01 
       00 00 00 01 
       DF 49 04 7C 
       01 00       
043C96 01 00 00 00 0275*  	dl 1, 256, 256, 65536, fn_xevious_30, 381
       01 00 00 01 
       00 00 00 01 
       F8 49 04 7D 
       01 00       
043CA8 01 00 00 00 0276*  	dl 1, 256, 256, 65536, fn_xevious_31, 382
       01 00 00 01 
       00 00 00 01 
       11 4A 04 7E 
       01 00       
043CBA 01 00 00 20 0277*  	dl 1, 32, 32, 1024, fn_xevious_sprite_065, 383
       00 00 20 00 
       00 00 04 00 
       2A 4A 04 7F 
       01 00       
043CCC 01 00 00 20 0278*  	dl 1, 32, 32, 1024, fn_xevious_sprite_066, 384
       00 00 20 00 
       00 00 04 00 
       4B 4A 04 80 
       01 00       
043CDE 01 00 00 20 0279*  	dl 1, 32, 32, 1024, fn_xevious_sprite_067, 385
       00 00 20 00 
       00 00 04 00 
       6C 4A 04 81 
       01 00       
043CF0 01 00 00 20 0280*  	dl 1, 32, 32, 1024, fn_xevious_sprite_068, 386
       00 00 20 00 
       00 00 04 00 
       8D 4A 04 82 
       01 00       
043D02 01 00 00 20 0281*  	dl 1, 32, 32, 1024, fn_xevious_sprite_069, 387
       00 00 20 00 
       00 00 04 00 
       AE 4A 04 83 
       01 00       
043D14 01 00 00 20 0282*  	dl 1, 32, 32, 1024, fn_xevious_sprite_070, 388
       00 00 20 00 
       00 00 04 00 
       CF 4A 04 84 
       01 00       
043D26 01 00 00 20 0283*  	dl 1, 32, 32, 1024, fn_xevious_sprite_071, 389
       00 00 20 00 
       00 00 04 00 
       F0 4A 04 85 
       01 00       
043D38 01 00 00 20 0284*  	dl 1, 32, 32, 1024, fn_xevious_sprite_072, 390
       00 00 20 00 
       00 00 04 00 
       11 4B 04 86 
       01 00       
043D4A 01 00 00 20 0285*  	dl 1, 32, 32, 1024, fn_xevious_sprite_073, 391
       00 00 20 00 
       00 00 04 00 
       32 4B 04 87 
       01 00       
043D5C 01 00 00 20 0286*  	dl 1, 32, 32, 1024, fn_xevious_sprite_074, 392
       00 00 20 00 
       00 00 04 00 
       53 4B 04 88 
       01 00       
043D6E 01 00 00 20 0287*  	dl 1, 32, 32, 1024, fn_xevious_sprite_075, 393
       00 00 20 00 
       00 00 04 00 
       74 4B 04 89 
       01 00       
043D80 01 00 00 20 0288*  	dl 1, 32, 32, 1024, fn_xevious_sprite_076, 394
       00 00 20 00 
       00 00 04 00 
       95 4B 04 8A 
       01 00       
043D92 01 00 00 20 0289*  	dl 1, 32, 32, 1024, fn_xevious_sprite_077, 395
       00 00 20 00 
       00 00 04 00 
       B6 4B 04 8B 
       01 00       
043DA4 01 00 00 20 0290*  	dl 1, 32, 32, 1024, fn_xevious_sprite_078, 396
       00 00 20 00 
       00 00 04 00 
       D7 4B 04 8C 
       01 00       
043DB6 01 00 00 20 0291*  	dl 1, 32, 32, 1024, fn_xevious_sprite_079, 397
       00 00 20 00 
       00 00 04 00 
       F8 4B 04 8D 
       01 00       
043DC8             0292*  
043DC8             0293*  ; files_list: ; filename:
043DC8 73 70 72 69 0294*  fn_0tile_empty: db "sprites/0tile_empty.rgba2",0
       74 65 73 2F 
       30 74 69 6C 
       65 5F 65 6D 
       70 74 79 2E 
       72 67 62 61 
       32 00       
043DE2 73 70 72 69 0295*  fn_1tile_cross: db "sprites/1tile_cross.rgba2",0
       74 65 73 2F 
       31 74 69 6C 
       65 5F 63 72 
       6F 73 73 2E 
       72 67 62 61 
       32 00       
043DFC 73 70 72 69 0296*  fn_2tile_horiz: db "sprites/2tile_horiz.rgba2",0
       74 65 73 2F 
       32 74 69 6C 
       65 5F 68 6F 
       72 69 7A 2E 
       72 67 62 61 
       32 00       
043E16 73 70 72 69 0297*  fn_3tile_vert: db "sprites/3tile_vert.rgba2",0
       74 65 73 2F 
       33 74 69 6C 
       65 5F 76 65 
       72 74 2E 72 
       67 62 61 32 
       00          
043E2F 73 70 72 69 0298*  fn_4tile_square: db "sprites/4tile_square.rgba2",0
       74 65 73 2F 
       34 74 69 6C 
       65 5F 73 71 
       75 61 72 65 
       2E 72 67 62 
       61 32 00    
043E4A 73 70 72 69 0299*  fn_5tile_circle: db "sprites/5tile_circle.rgba2",0
       74 65 73 2F 
       35 74 69 6C 
       65 5F 63 69 
       72 63 6C 65 
       2E 72 67 62 
       61 32 00    
043E65 73 70 72 69 0300*  fn_6tile_pad: db "sprites/6tile_pad.rgba2",0
       74 65 73 2F 
       36 74 69 6C 
       65 5F 70 61 
       64 2E 72 67 
       62 61 32 00 
043E7D 73 70 72 69 0301*  fn_7tile_turret: db "sprites/7tile_turret.rgba2",0
       74 65 73 2F 
       37 74 69 6C 
       65 5F 74 75 
       72 72 65 74 
       2E 72 67 62 
       61 32 00    
043E98 73 70 72 69 0302*  fn_circle: db "sprites/circle.rgba2",0
       74 65 73 2F 
       63 69 72 63 
       6C 65 2E 72 
       67 62 61 32 
       00          
043EAD 73 70 72 69 0303*  fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
043EC2 73 70 72 69 0304*  fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
043EDC 73 70 72 69 0305*  fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
043EF6 73 70 72 69 0306*  fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
043F10 73 70 72 69 0307*  fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
043F2A 73 70 72 69 0308*  fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
043F44 73 70 72 69 0309*  fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
043F5D 73 70 72 69 0310*  fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
043F76 73 70 72 69 0311*  fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
043F8C 73 70 72 69 0312*  fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
043FA2 73 70 72 69 0313*  fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
043FB4 73 70 72 69 0314*  fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
043FCD 73 70 72 69 0315*  fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
043FE6 73 70 72 69 0316*  fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
043FFF 73 70 72 69 0317*  fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044018 73 70 72 69 0318*  fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044031 73 70 72 69 0319*  fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
04404A 73 70 72 69 0320*  fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044063 73 70 72 69 0321*  fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
04407C 73 70 72 69 0322*  fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044095 73 70 72 69 0323*  fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0440AE 73 70 72 69 0324*  fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0440C7 73 70 72 69 0325*  fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0440E0 73 70 72 69 0326*  fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
0440F9 73 70 72 69 0327*  fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044112 73 70 72 69 0328*  fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
04412B 73 70 72 69 0329*  fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044144 73 70 72 69 0330*  fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
04415D 73 70 72 69 0331*  fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
044176 73 70 72 69 0332*  fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
04418F 73 70 72 69 0333*  fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0441A8 73 70 72 69 0334*  fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0441C1 73 70 72 69 0335*  fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0441DA 73 70 72 69 0336*  fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0441F3 73 70 72 69 0337*  fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04420C 73 70 72 69 0338*  fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
044225 73 70 72 69 0339*  fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04423E 73 70 72 69 0340*  fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
044257 73 70 72 69 0341*  fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044270 73 70 72 69 0342*  fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
044289 73 70 72 69 0343*  fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0442A2 73 70 72 69 0344*  fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0442BB 73 70 72 69 0345*  fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0442D4 73 70 72 69 0346*  fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
0442EA 73 70 72 69 0347*  fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
044300 73 70 72 69 0348*  fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
044316 73 70 72 69 0349*  fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
04432F 73 70 72 69 0350*  fn_star: db "sprites/star.rgba2",0
       74 65 73 2F 
       73 74 61 72 
       2E 72 67 62 
       61 32 00    
044342 73 70 72 69 0351*  fn_station_bg_00: db "sprites/station_bg_00.rgba2",0
       74 65 73 2F 
       73 74 61 74 
       69 6F 6E 5F 
       62 67 5F 30 
       30 2E 72 67 
       62 61 32 00 
04435E 73 70 72 69 0352*  fn_station_bg_01: db "sprites/station_bg_01.rgba2",0
       74 65 73 2F 
       73 74 61 74 
       69 6F 6E 5F 
       62 67 5F 30 
       31 2E 72 67 
       62 61 32 00 
04437A 73 70 72 69 0353*  fn_station_bg_02: db "sprites/station_bg_02.rgba2",0
       74 65 73 2F 
       73 74 61 74 
       69 6F 6E 5F 
       62 67 5F 30 
       32 2E 72 67 
       62 61 32 00 
044396 73 70 72 69 0354*  fn_station_bg_03: db "sprites/station_bg_03.rgba2",0
       74 65 73 2F 
       73 74 61 74 
       69 6F 6E 5F 
       62 67 5F 30 
       33 2E 72 67 
       62 61 32 00 
0443B2 73 70 72 69 0355*  fn_station_bg_04: db "sprites/station_bg_04.rgba2",0
       74 65 73 2F 
       73 74 61 74 
       69 6F 6E 5F 
       62 67 5F 30 
       34 2E 72 67 
       62 61 32 00 
0443CE 73 70 72 69 0356*  fn_station_bg_05: db "sprites/station_bg_05.rgba2",0
       74 65 73 2F 
       73 74 61 74 
       69 6F 6E 5F 
       62 67 5F 30 
       35 2E 72 67 
       62 61 32 00 
0443EA 73 70 72 69 0357*  fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044403 73 70 72 69 0358*  fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
04441C 73 70 72 69 0359*  fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044435 73 70 72 69 0360*  fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
04444E 73 70 72 69 0361*  fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044467 73 70 72 69 0362*  fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044480 73 70 72 69 0363*  fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044499 73 70 72 69 0364*  fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0444B2 73 70 72 69 0365*  fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0444CB 73 70 72 69 0366*  fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0444E4 73 70 72 69 0367*  fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0444FD 73 70 72 69 0368*  fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044516 73 70 72 69 0369*  fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
04452F 73 70 72 69 0370*  fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044548 73 70 72 69 0371*  fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
044561 73 70 72 69 0372*  fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04457A 73 70 72 69 0373*  fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
044593 73 70 72 69 0374*  fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0445AC 73 70 72 69 0375*  fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0445C5 73 70 72 69 0376*  fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0445DE 73 70 72 69 0377*  fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0445F7 73 70 72 69 0378*  fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044610 73 70 72 69 0379*  fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044629 73 70 72 69 0380*  fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
044642 73 70 72 69 0381*  fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
04465B 73 70 72 69 0382*  fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044674 73 70 72 69 0383*  fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
04468D 73 70 72 69 0384*  fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0446A6 73 70 72 69 0385*  fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0446BF 73 70 72 69 0386*  fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0446D8 73 70 72 69 0387*  fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0446F1 73 70 72 69 0388*  fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
04470A 73 70 72 69 0389*  fn_xevious_00: db "sprites/xevious_00.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       30 30 2E 72 
       67 62 61 32 
       00          
044723 73 70 72 69 0390*  fn_xevious_01: db "sprites/xevious_01.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       30 31 2E 72 
       67 62 61 32 
       00          
04473C 73 70 72 69 0391*  fn_xevious_02: db "sprites/xevious_02.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       30 32 2E 72 
       67 62 61 32 
       00          
044755 73 70 72 69 0392*  fn_xevious_03: db "sprites/xevious_03.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       30 33 2E 72 
       67 62 61 32 
       00          
04476E 73 70 72 69 0393*  fn_xevious_04: db "sprites/xevious_04.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       30 34 2E 72 
       67 62 61 32 
       00          
044787 73 70 72 69 0394*  fn_xevious_05: db "sprites/xevious_05.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       30 35 2E 72 
       67 62 61 32 
       00          
0447A0 73 70 72 69 0395*  fn_xevious_06: db "sprites/xevious_06.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       30 36 2E 72 
       67 62 61 32 
       00          
0447B9 73 70 72 69 0396*  fn_xevious_07: db "sprites/xevious_07.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       30 37 2E 72 
       67 62 61 32 
       00          
0447D2 73 70 72 69 0397*  fn_xevious_08: db "sprites/xevious_08.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       30 38 2E 72 
       67 62 61 32 
       00          
0447EB 73 70 72 69 0398*  fn_xevious_09: db "sprites/xevious_09.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       30 39 2E 72 
       67 62 61 32 
       00          
044804 73 70 72 69 0399*  fn_xevious_10: db "sprites/xevious_10.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       31 30 2E 72 
       67 62 61 32 
       00          
04481D 73 70 72 69 0400*  fn_xevious_11: db "sprites/xevious_11.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       31 31 2E 72 
       67 62 61 32 
       00          
044836 73 70 72 69 0401*  fn_xevious_12: db "sprites/xevious_12.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       31 32 2E 72 
       67 62 61 32 
       00          
04484F 73 70 72 69 0402*  fn_xevious_13: db "sprites/xevious_13.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       31 33 2E 72 
       67 62 61 32 
       00          
044868 73 70 72 69 0403*  fn_xevious_14: db "sprites/xevious_14.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       31 34 2E 72 
       67 62 61 32 
       00          
044881 73 70 72 69 0404*  fn_xevious_15: db "sprites/xevious_15.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       31 35 2E 72 
       67 62 61 32 
       00          
04489A 73 70 72 69 0405*  fn_xevious_16: db "sprites/xevious_16.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       31 36 2E 72 
       67 62 61 32 
       00          
0448B3 73 70 72 69 0406*  fn_xevious_17: db "sprites/xevious_17.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       31 37 2E 72 
       67 62 61 32 
       00          
0448CC 73 70 72 69 0407*  fn_xevious_18: db "sprites/xevious_18.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       31 38 2E 72 
       67 62 61 32 
       00          
0448E5 73 70 72 69 0408*  fn_xevious_19: db "sprites/xevious_19.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       31 39 2E 72 
       67 62 61 32 
       00          
0448FE 73 70 72 69 0409*  fn_xevious_20: db "sprites/xevious_20.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       32 30 2E 72 
       67 62 61 32 
       00          
044917 73 70 72 69 0410*  fn_xevious_21: db "sprites/xevious_21.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       32 31 2E 72 
       67 62 61 32 
       00          
044930 73 70 72 69 0411*  fn_xevious_22: db "sprites/xevious_22.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       32 32 2E 72 
       67 62 61 32 
       00          
044949 73 70 72 69 0412*  fn_xevious_23: db "sprites/xevious_23.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       32 33 2E 72 
       67 62 61 32 
       00          
044962 73 70 72 69 0413*  fn_xevious_24: db "sprites/xevious_24.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       32 34 2E 72 
       67 62 61 32 
       00          
04497B 73 70 72 69 0414*  fn_xevious_25: db "sprites/xevious_25.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       32 35 2E 72 
       67 62 61 32 
       00          
044994 73 70 72 69 0415*  fn_xevious_26: db "sprites/xevious_26.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       32 36 2E 72 
       67 62 61 32 
       00          
0449AD 73 70 72 69 0416*  fn_xevious_27: db "sprites/xevious_27.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       32 37 2E 72 
       67 62 61 32 
       00          
0449C6 73 70 72 69 0417*  fn_xevious_28: db "sprites/xevious_28.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       32 38 2E 72 
       67 62 61 32 
       00          
0449DF 73 70 72 69 0418*  fn_xevious_29: db "sprites/xevious_29.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       32 39 2E 72 
       67 62 61 32 
       00          
0449F8 73 70 72 69 0419*  fn_xevious_30: db "sprites/xevious_30.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       33 30 2E 72 
       67 62 61 32 
       00          
044A11 73 70 72 69 0420*  fn_xevious_31: db "sprites/xevious_31.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       33 31 2E 72 
       67 62 61 32 
       00          
044A2A 73 70 72 69 0421*  fn_xevious_sprite_065: db "sprites/xevious_sprite_065.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
044A4B 73 70 72 69 0422*  fn_xevious_sprite_066: db "sprites/xevious_sprite_066.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
044A6C 73 70 72 69 0423*  fn_xevious_sprite_067: db "sprites/xevious_sprite_067.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
044A8D 73 70 72 69 0424*  fn_xevious_sprite_068: db "sprites/xevious_sprite_068.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
044AAE 73 70 72 69 0425*  fn_xevious_sprite_069: db "sprites/xevious_sprite_069.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
044ACF 73 70 72 69 0426*  fn_xevious_sprite_070: db "sprites/xevious_sprite_070.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
044AF0 73 70 72 69 0427*  fn_xevious_sprite_071: db "sprites/xevious_sprite_071.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
044B11 73 70 72 69 0428*  fn_xevious_sprite_072: db "sprites/xevious_sprite_072.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044B32 73 70 72 69 0429*  fn_xevious_sprite_073: db "sprites/xevious_sprite_073.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
044B53 73 70 72 69 0430*  fn_xevious_sprite_074: db "sprites/xevious_sprite_074.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
044B74 73 70 72 69 0431*  fn_xevious_sprite_075: db "sprites/xevious_sprite_075.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
044B95 73 70 72 69 0432*  fn_xevious_sprite_076: db "sprites/xevious_sprite_076.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       37 36 2E 72 
       67 62 61 32 
       00          
044BB6 73 70 72 69 0433*  fn_xevious_sprite_077: db "sprites/xevious_sprite_077.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       37 37 2E 72 
       67 62 61 32 
       00          
044BD7 73 70 72 69 0434*  fn_xevious_sprite_078: db "sprites/xevious_sprite_078.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       37 38 2E 72 
       67 62 61 32 
       00          
044BF8 73 70 72 69 0435*  fn_xevious_sprite_079: db "sprites/xevious_sprite_079.rgba2",0
       74 65 73 2F 
       78 65 76 69 
       6F 75 73 5F 
       73 70 72 69 
       74 65 5F 30 
       37 39 2E 72 
       67 62 61 32 
       00          
044C19             0044   	include "images_ui.inc"
044C19             0001*  ; Generated by make_images.py
044C19             0002*  
044C19             0003*  ui_num_images: equ 4
044C19             0004*  
044C19             0005*  ; buffer_ids:
044C19             0006*  BUF_BEZEL_L: equ 0
044C19             0007*  BUF_BEZEL_R: equ 1
044C19             0008*  BUF_SPLASH_BG: equ 2
044C19             0009*  BUF_SPLASH_LOGO: equ 3
044C19             0010*  
044C19             0011*  ui_image_list: ; type; width; height; filename; bufferId:
044C19 01 00 00 80 0012*  	dl 1, 128, 384, 49152, fn_bezel_l, 0
       00 00 80 01 
       00 00 C0 00 
       61 4C 04 00 
       00 00       
044C2B 01 00 00 80 0013*  	dl 1, 128, 384, 49152, fn_bezel_r, 1
       00 00 80 01 
       00 00 C0 00 
       72 4C 04 01 
       00 00       
044C3D 01 00 00 40 0014*  	dl 1, 320, 240, 76800, fn_splash_bg, 2
       01 00 F0 00 
       00 00 2C 01 
       83 4C 04 02 
       00 00       
044C4F 01 00 00 40 0015*  	dl 1, 320, 240, 76800, fn_splash_logo, 3
       01 00 F0 00 
       00 00 2C 01 
       96 4C 04 03 
       00 00       
044C61             0016*  
044C61             0017*  ; files_list: ; filename:
044C61 75 69 2F 62 0018*  fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
044C72 75 69 2F 62 0019*  fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
044C83 75 69 2F 73 0020*  fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
044C96 75 69 2F 73 0021*  fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
044CAB             0045   	include "files.inc"
044CAB             0001*  ; load to onboard 8k sram
044CAB             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
044CAB             0046   
044CAB 57 65 6C 63 0047   hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
044CC6 4C 6F 61 64 0048   loading_ui: asciz "Loading UI"
       69 6E 67 20 
       55 49 00    
044CD1 4C 6F 61 64 0049   loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
044CDF 50 72 65 73 0050   loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
044CFA             0051   
044CFA             0052   init:
044CFA             0053   ; clear all buffers
044CFA CD CE 1C 04 0054       call vdu_clear_all_buffers
044CFE             0055   
044CFE             0056   ; set up the display
044CFE 3E 08       0057       ld a,8;+128 ; 136   320   240   64    60hz double-buffered
044D00 CD B8 1B 04 0058       call vdu_set_screen_mode
044D04 AF          0059       xor a
044D05 CD C9 1B 04 0060       call vdu_set_scaling
044D09             0061   
044D09             0062   ; ; enable additional audio channels
044D09             0063   ; 	call vdu_enable_channels
044D09             0064   
044D09             0065   ; set text background color
044D09 3E 9A       0066   	ld a,26+128 ; violet
044D0B CD 20 1B 04 0067   	call vdu_colour_text
044D0F             0068   
044D0F             0069   ; set text foreground color
044D0F 3E 2F       0070   	ld a,47 ; aaaaff lavenderish
044D11 CD 20 1B 04 0071   	call vdu_colour_text
044D15             0072   
044D15             0073   ; set gfx bg color
044D15 AF          0074   	xor a ; plotting mode 0
044D16 3E 9A       0075   	ld a,26+128 ; violet
044D18 CD 31 1B 04 0076   	call vdu_gcol
044D1C CD EF 1A 04 0077   	call vdu_cls
044D20             0078   
044D20             0079   ; set the cursor off
044D20 CD B7 1A 04 0080   	call vdu_cursor_off
044D24             0081   
044D24             0082   ; VDU 28, left, bottom, right, top: Set text viewport **
044D24             0083   ; MIND THE LITTLE-ENDIANESS
044D24             0084   ; inputs: c=left,b=bottom,e=right,d=top
044D24 0E 00       0085   	ld c,0 ; left
044D26 16 1D       0086   	ld d,29 ; top
044D28 1E 27       0087   	ld e,39 ; right
044D2A 06 1D       0088   	ld b,29; bottom
044D2C CD 48 1B 04 0089   	call vdu_set_txt_viewport
044D30             0090   
044D30             0091   ; print loading ui message
044D30 21 C6 4C 04 0092   	ld hl,loading_ui
044D34 CD 8D 14 04 0093   	call printString
044D38 CD F4 1A 04 0094   	call vdu_flip
044D3C             0095   
044D3C             0096   ; load UI images
044D3C CD CA 32 04 0097   	call load_ui_images
044D40             0098   
044D40             0099   ; ; load fonts ; TODO
044D40             0100   ; 	call load_font_rc
044D40             0101   
044D40             0102   ; load sprites
044D40 CD 73 33 04 0103   	call img_load_init ; sets up the animated load screen
044D44 CD E5 32 04 0104   	call load_sprite_images
044D48             0105   
044D48             0106   ; ; load sound effects ; TODO
044D48             0107   ; 	ld bc,SFX_num_buffers
044D48             0108   ; 	ld hl,SFX_buffer_id_lut
044D48             0109   ; 	ld (cur_buffer_id_lut),hl
044D48             0110   ; 	ld hl,SFX_load_routines_table
044D48             0111   ; 	ld (cur_load_jump_table),hl
044D48             0112   ; 	call sfx_load_main
044D48             0113   
044D48             0114   ; print loading complete message and wait for user keypress
044D48 CD EF 1A 04 0115   	call vdu_cls
044D4C 21 DF 4C 04 0116   	ld hl,loading_complete
044D50 CD 8D 14 04 0117   	call printString
044D54 CD F4 1A 04 0118   	call vdu_flip
044D58 CD 2B 1A 04 0119   	call waitKeypress
044D5C             0120   
044D5C             0121   ; set up display for gameplay
044D5C             0122       ; ld a,8
044D5C 3E 14       0123   	ld a,20
044D5E CD B8 1B 04 0124       call vdu_set_screen_mode
044D62 AF          0125       xor a
044D63 CD C9 1B 04 0126       call vdu_set_scaling
044D67 CD B7 1A 04 0127   	call vdu_cursor_off
044D6B             0128   ; plot bezel art
044D6B 21 00 00 00 0129   	ld hl,BUF_BEZEL_L
044D6F CD DC 1B 04 0130   	call vdu_buff_select
044D73 01 00 00 00 0131   	ld bc,0
044D77 11 00 00 00 0132   	ld de,0
044D7B CD A5 1E 04 0133   	call vdu_plot_bmp
044D7F 21 01 00 00 0134   	ld hl,BUF_BEZEL_R
044D83 CD DC 1B 04 0135   	call vdu_buff_select
044D87 01 80 01 00 0136   	ld bc,384
044D8B 11 00 00 00 0137   	ld de,0
044D8F CD A5 1E 04 0138   	call vdu_plot_bmp
044D93             0139   ; set gfx origin and viewport to playing field window
044D93 01 80 00 00 0140   	ld bc,origin_left
044D97 11 00 00 00 0141   	ld de,origin_top
044D9B CD 74 1B 04 0142   	call vdu_set_gfx_origin
044D9F 01 00 00 00 0143   	ld bc,field_left
044DA3 11 00 00 00 0144   	ld de,field_top
044DA7 DD 21 FF 00 0145   	ld ix,field_right
       00          
044DAC FD 21 7F 01 0146   	ld iy,field_bottom
       00          
044DB1 CD 8F 1B 04 0147   	call vdu_set_gfx_viewport
044DB5             0148   ; set background color
044DB5 3E 9A       0149   	ld a,26+128 ; violet
044DB7 CD 31 1B 04 0150   	call vdu_gcol
044DBB CD 02 1B 04 0151   	call vdu_clg
044DBF             0152   ; VDU 28, left, bottom, right, top: Set text viewport **
044DBF 0E 00       0153   	ld c,0 ; left
044DC1 16 00       0154   	ld d,0 ; top
044DC3 1E 3E       0155   	ld e,62 ; right
044DC5 06 07       0156   	ld b,7; bottom
044DC7 CD 48 1B 04 0157   	call vdu_set_txt_viewport
044DCB             0158   
044DCB C9          0159   	ret
044DCC             0160   
044DCC             0161   ; origin_top: equ 48
044DCC             0162   origin_top: equ 0 ; DEBUG
044DCC             0163   origin_left: equ 128
044DCC             0164   field_top: equ 0
044DCC             0165   field_bottom: equ 383-origin_top
044DCC             0166   field_left: equ 0
044DCC             0167   field_right: equ 255
044DCC             0168   sprite_top: equ 0
044DCC             0169   sprite_bottom: equ field_bottom-16
044DCC             0170   sprite_left: equ field_left
044DCC             0171   sprite_right: equ field_right-16
044DCC             0172   collide_top: equ %00001000
044DCC             0173   collide_bottom: equ %00000100
044DCC             0174   collide_left: equ %00000010
044DCC             0175   collide_right: equ %00000001
044DCC             0176   
044DCC             0177   ; ; #### BEGIN GAME VARIABLES ####
044DCC             0178   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
044DCC             0179   speed_player: equ 0x000300 ; 3 pixels per frame
044DCC             0180   
044DCC             0181   main:
044DCC             0182   ; start a new game
044DCC CD F6 4D 04 0183   	call new_game
044DD0             0184   
044DD0             0185   main_loop:
044DD0             0186   ; scroll tiles
044DD0 CD 49 2D 04 0187   	call tiles_plot
044DD4             0188   
044DD4             0189   ; get player input and update sprite position
044DD4 CD 28 2C 04 0190   	call player_input
044DD8             0191   
044DD8             0192   ; move enemies
044DD8 CD 5E 2E 04 0193   	call move_enemies
044DDC             0194   
044DDC             0195   ; wait for the next vblank mitigate flicker and for loop timing
044DDC CD 63 1B 04 0196   	call vdu_vblank
044DE0             0197   
044DE0             0198   ; poll keyboard
044DE0 3E 08       0199       ld a, $08                           ; code to send to MOS
044DE2 5B CF       0200       rst.lil $08                         ; get IX pointer to System Variables
044DE4             0201   
044DE4 DD 7E 05    0202       ld a, (ix + $05)                    ; get ASCII code of key pressed
044DE7 FE 1B       0203       cp 27                               ; check if 27 (ascii code for ESC)
044DE9 CA F1 4D 04 0204       jp z, main_end                      ; if pressed, jump to exit
044DED             0205   
044DED C3 D0 4D 04 0206       jp main_loop
044DF1             0207   
044DF1             0208   main_end:
044DF1 CD A9 1A 04 0209       call vdu_cursor_on
044DF5 C9          0210   	ret
044DF6             0211   
044DF6             0212   new_game:
044DF6             0213   ; initialize sprites
044DF6 CD 35 14 04 0214   	call sprites_init
044DFA             0215   
044DFA             0216   ; initialize the first level
044DFA AF          0217   	xor a
044DFB 32 C3 2C 04 0218   	ld (cur_level),a
044DFF CD FF 2D 04 0219   	call init_level
044E03             0220   
044E03             0221   ; initialize player
044E03 CD E9 2B 04 0222   	call player_init
044E07             0223   
044E07             0224   ; spawn an enemy sprite
044E07 06 10       0225   	ld b,table_max_records
044E09             0226   @spawn_enemy_loop:
044E09 C5          0227   	push bc
044E0A CD DD 2F 04 0228   	call enemy_init_from_landing_pad
044E0E C1          0229   	pop bc
044E0F 10 F8       0230   	djnz @spawn_enemy_loop
044E11             0231   
044E11 C9          0232   	ret
044E12             0233   
044E12             0234   ; ; ###### INITIALIZE GAME #######
044E12             0235   ; ; clear the screen
044E12             0236   ;     ld a,3
044E12             0237   ;     out (81h),a
044E12             0238   
044E12             0239   ; ; reset the sprite table
044E12             0240   ;     xor a
044E12             0241   ;     ld (table_active_sprites),a
044E12             0242   ;     ld hl,table_limit
044E12             0243   ;     ld (table_base),hl
044E12             0244   ;     ld (table_pointer),hl
044E12             0245   
044E12             0246   ; ; draw a starfield over the entire screen
044E12             0247   ;     ld b,#50 ; first row of visible screen
044E12             0248   ; new_game_draw_stars_loop:
044E12             0249   ;     push bc
044E12             0250   ;     call draw_stars
044E12             0251   ;     pop bc
044E12             0252   ;     ld a,#10
044E12             0253   ;     add a,b
044E12             0254   ;     ld b,a
044E12             0255   ;     jr nz,new_game_draw_stars_loop
044E12             0256   
044E12             0257   ; ; ; print a welcome message
044E12             0258   ; ;     ld de,msg_welcome
044E12             0259   ; ;     ld hl,#581C
044E12             0260   ; ;     ld c,218 ; a bright pastel purple d677e3
044E12             0261   ; ;     call print_string
044E12             0262   
044E12             0263   ; ; push all that to frame buffer
044E12             0264   ;     ld a,#01 ; send video to frame buffer
044E12             0265   ;     out (81h),a
044E12             0266   
044E12             0267   ; ; reset score, lives, shields
044E12             0268   ;     xor a
044E12             0269   ;     ld hl,player_score
044E12             0270   ;     ld (hl),a ; player_score 0
044E12             0271   ;     inc hl
044E12             0272   ;     ld (hl),a ; player_score 1
044E12             0273   ;     inc hl
044E12             0274   ;     ld (hl),a ; player_score 3
044E12             0275   ;     inc hl
044E12             0276   ;     ld a,16
044E12             0277   ;     ld (hl),a ; player_shields
044E12             0278   ;     inc hl
044E12             0279   ;     ld (hl),a ; player_max_shields
044E12             0280   ;     inc hl
044E12             0281   ;     ld a,3
044E12             0282   ;     ld (hl),a ; player_ships
044E12             0283   ;     inc hl
044E12             0284   
044E12             0285   ; ; initialize first level
044E12             0286   ;     ld a,1 ; levels are zero-based, so this will wrap around
044E12             0287   ;     ld (cur_level),a
044E12             0288   ;     ld a,3 ; set max enemy sprites to easy street
044E12             0289   ;     ld (max_enemy_sprites),a
044E12             0290   ;     call dt_next_level
044E12             0291   ;     call dt
044E12             0292   
044E12             0293   ; ; spawn our intrepid hero
044E12             0294   ;     call player_init
044E12             0295   
044E12             0296   
044E12             0297   ; ; #### BEGIN GAME MAIN LOOP ####
044E12             0298   ; main_loop:
044E12             0299   ; ; ; debug: start execution counter
044E12             0300   ; ;     ld a,1
044E12             0301   ; ;     out (#e0),a ; start counting instructions
044E12             0302   
044E12             0303   ; ; refresh background from frame buffer
044E12             0304   ;     ld a,#02
044E12             0305   ;     out (81h),a
044E12             0306   ;     call move_background ; now move it
044E12             0307   ;     ld a,#01
044E12             0308   ;     out (81h),a ; save it back to buffer
044E12             0309   ; ; do all the things
044E12             0310   ;     call move_enemies
044E12             0311   ;     call player_move
044E12             0312   ;     call laser_control
044E12             0313   ;     call print_score
044E12             0314   ;     call draw_shields
044E12             0315   ;     call draw_lives
044E12             0316   ; ; ; debug: stop execution counter and print results
044E12             0317   ; ;     ld a,0
044E12             0318   ; ;     out (#e0),a ; stop counting instructions
044E12             0319   
044E12             0320   ; ; ; debug: start execution counter
044E12             0321   ; ;     ld a,1
044E12             0322   ; ;     out (#e0),a ; start counting instructions
044E12             0323   
044E12             0324   ;     call vdu_vblank
044E12             0325   ; ; ; debug: stop execution counter and print results
044E12             0326   ; ;     ld a,0
044E12             0327   ; ;     out (#e0),a ; stop counting instructions
044E12             0328   
044E12             0329   ;     jr main_loop
044E12             0330   ; #### END GAME MAIN LOOP ####
044E12             0331   
044E12             0332   ; draws the player's shields level
044E12             0333   ; draw_shields:
044E12             0334   ; TODO: Agonize this routine
044E12             0335   ; ; prep the loop to draw the bars
044E12             0336   ;     ld a,(player_shields) ; snag shields
044E12             0337   ;     and a
044E12             0338   ;     ret z ; don't draw if zero shields
044E12             0339   ; ; set loop counter and drawing position
044E12             0340   ;     ld b,a ; loop counter
044E12             0341   ;     ld hl,#5300+48+12
044E12             0342   ; ; set color based on bars remaining
044E12             0343   ;     ld c,103 ; bright green 28fe0a
044E12             0344   ;     cp 9
044E12             0345   ;     jp p,draw_shields_loop
044E12             0346   ;     ld c,74 ; bright yellow eafe5b
044E12             0347   ;     cp 3
044E12             0348   ;     jp p,draw_shields_loop
044E12             0349   ;     ld c,28 ; bright red fe0a0a
044E12             0350   ; draw_shields_loop:
044E12             0351   ;     push bc ; yup,outta
044E12             0352   ;     push hl ; registers again
044E12             0353   ;     ; ld a,#A8 ; ▀,168
044E12             0354   ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
044E12             0355   ;     ; call draw_char
044E12             0356   ;     call draw_num ; we nuked draw_char for the time being
044E12             0357   ;     pop hl
044E12             0358   ;     ld a,8
044E12             0359   ;     add a,l
044E12             0360   ;     ld l,a
044E12             0361   ;     pop bc
044E12             0362   ;     djnz draw_shields_loop
044E12             0363       ; ret
044E12             0364   
044E12             0365   ; prints the player's score
044E12             0366   ; print_score:
044E12             0367   ; TODO: Agonize this
044E12             0368   ; ; draw score (we do it twice for a totally unecessary drop-shadow effect)
044E12             0369   ;     ld c,42 ; dark orange b74400
044E12             0370   ;     ld hl,#5200+1+8+6*6
044E12             0371   ;     ld a,3 ; print 6 bdc digits
044E12             0372   ;     ld de,player_score
044E12             0373   ;     call print_num
044E12             0374   
044E12             0375   ;     ld c,58 ; golden yellow fec10a
044E12             0376   ;     ld hl,#5100+8+6*6
044E12             0377   ;     ld a,3 ; print 6 bdc digits
044E12             0378   ;     ld de,player_score
044E12             0379   ;     call print_num
044E12             0380       ; ret
044E12             0381   
044E12             0382   ; draw_lives:
044E12             0383   ;     ld hl,player_small ; make small yellow ship the active sprite
044E12             0384   ;     ld (sprite_base_bufferId),hl
044E12             0385   ;     ; ld a,#80 ; northern orientation
044E12             0386   ;     ; ld (sprite_orientation),a
044E12             0387   ;     ld hl,0 ; north
044E12             0388   ;     ld (sprite_heading),hl
044E12             0389   ;     xor a
044E12             0390   ;     ld (sprite_animation),a
044E12             0391   ;     ld a,#56 ; top of visible screen
044E12             0392   ;     ld (sprite_y+1),a
044E12             0393   ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
044E12             0394   ;     ld a,(player_ships)
044E12             0395   ;     dec a ; we draw one fewer ships than lives
044E12             0396   ;     ret z ; nothing to draw here, move along
044E12             0397   ;     ld b,a ; loop counter
044E12             0398   ;     ld a,256-16 ; initial x position
044E12             0399   ; draw_lives_loop:
044E12             0400   ;     ld (sprite_x+1),a
044E12             0401   ;     push af
044E12             0402   ;     push bc
044E12             0403   ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
044E12             0404   ;     pop bc
044E12             0405   ;     pop af
044E12             0406   ;     sub 10
044E12             0407   ;     djnz draw_lives_loop
044E12             0408   ;     ret

PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C CD 44 9F 04 0015        call init
040050 CD 38 A0 04 0016        call main
040054             0017    
040054             0018    exit:
040054 FD E1       0019        pop iy
040056 DD E1       0020        pop ix
040058 D1          0021        pop de
040059 C1          0022        pop bc
04005A F1          0023        pop af
04005B 21 00 00 00 0024        ld hl,0
04005F             0025    
04005F C9          0026        ret
040060             0027    
040060             0028    ; API INCLUDES
040060             0029        include "mos_api.inc"
040060             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*   ; Title:	AGON MOS - API for user projects
040060             0003*   ; Author:	Dean Belfield
040060             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*   ;			Added MOS error codes for return in HL
040060             0006*   ; Created:	03/08/2022
040060             0007*   ; Last Updated:	10/08/2023
040060             0008*   ;
040060             0009*   ; Modinfo:
040060             0010*   ; 05/08/2022:	Added mos_feof
040060             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*   ; 13/10/2022:	Added mos_oscli
040060             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*   ; 19/05/2023:	Added sysvar_scrMode
040060             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*   ; 03/08/2023:	Added mos_setkbvector
040060             0028*   ; 10/08/2023:	Added mos_getkbmap
040060             0029*   
040060             0030*   ; VDP control (VDU 23, 0, n)
040060             0031*   ;
040060             0032*   vdp_gp:				EQU 80h
040060             0033*   vdp_keycode:		EQU 81h
040060             0034*   vdp_cursor:			EQU	82h
040060             0035*   vdp_scrchar:		EQU	83h
040060             0036*   vdp_scrpixel:		EQU	84h
040060             0037*   vdp_audio:			EQU	85h
040060             0038*   vdp_mode:			EQU	86h
040060             0039*   vdp_rtc:			EQU	87h
040060             0040*   vdp_keystate:		EQU	88h
040060             0041*   vdp_logicalcoords:	EQU	C0h
040060             0042*   vdp_terminalmode:	EQU	FFh
040060             0043*   
040060             0044*   ; MOS high level functions
040060             0045*   ;
040060             0046*   mos_getkey:			EQU	00h
040060             0047*   mos_load:			EQU	01h
040060             0048*   mos_save:			EQU	02h
040060             0049*   mos_cd:				EQU	03h
040060             0050*   mos_dir:			EQU	04h
040060             0051*   mos_del:			EQU	05h
040060             0052*   mos_ren:			EQU	06h
040060             0053*   mos_mkdir:			EQU	07h
040060             0054*   mos_sysvars:		EQU	08h
040060             0055*   mos_editline:		EQU	09h
040060             0056*   mos_fopen:			EQU	0Ah
040060             0057*   mos_fclose:			EQU	0Bh
040060             0058*   mos_fgetc:			EQU	0Ch
040060             0059*   mos_fputc:			EQU	0Dh
040060             0060*   mos_feof:			EQU	0Eh
040060             0061*   mos_getError:		EQU	0Fh
040060             0062*   mos_oscli:			EQU	10h
040060             0063*   mos_copy:			EQU	11h
040060             0064*   mos_getrtc:			EQU	12h
040060             0065*   mos_setrtc:			EQU	13h
040060             0066*   mos_setintvector:	EQU	14h
040060             0067*   mos_uopen:			EQU	15h
040060             0068*   mos_uclose:			EQU	16h
040060             0069*   mos_ugetc:			EQU	17h
040060             0070*   mos_uputc:			EQU	18h
040060             0071*   mos_getfil:			EQU	19h
040060             0072*   mos_fread:			EQU	1Ah
040060             0073*   mos_fwrite:			EQU	1Bh
040060             0074*   mos_flseek:			EQU	1Ch
040060             0075*   mos_setkbvector:	EQU	1Dh
040060             0076*   mos_getkbmap:		EQU	1Eh
040060             0077*   
040060             0078*   ; MOS program exit codes
040060             0079*   ;
040060             0080*   EXIT_OK:				EQU  0;	"OK",
040060             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*   ; FatFS file access functions
040060             0103*   ;
040060             0104*   ffs_fopen:			EQU	80h
040060             0105*   ffs_fclose:			EQU	81h
040060             0106*   ffs_fread:			EQU	82h
040060             0107*   ffs_fwrite:			EQU	83h
040060             0108*   ffs_flseek:			EQU	84h
040060             0109*   ffs_ftruncate:		EQU	85h
040060             0110*   ffs_fsync:			EQU	86h
040060             0111*   ffs_fforward:		EQU	87h
040060             0112*   ffs_fexpand:		EQU	88h
040060             0113*   ffs_fgets:			EQU	89h
040060             0114*   ffs_fputc:			EQU	8Ah
040060             0115*   ffs_fputs:			EQU	8Bh
040060             0116*   ffs_fprintf:		EQU	8Ch
040060             0117*   ffs_ftell:			EQU	8Dh
040060             0118*   ffs_feof:			EQU	8Eh
040060             0119*   ffs_fsize:			EQU	8Fh
040060             0120*   ffs_ferror:			EQU	90h
040060             0121*   
040060             0122*   ; FatFS directory access functions
040060             0123*   ;
040060             0124*   ffs_dopen:			EQU	91h
040060             0125*   ffs_dclose:			EQU	92h
040060             0126*   ffs_dread:			EQU	93h
040060             0127*   ffs_dfindfirst:		EQU	94h
040060             0128*   ffs_dfindnext:		EQU	95h
040060             0129*   
040060             0130*   ; FatFS file and directory management functions
040060             0131*   ;
040060             0132*   ffs_stat:			EQU	96h
040060             0133*   ffs_unlink:			EQU	97h
040060             0134*   ffs_rename:			EQU	98h
040060             0135*   ffs_chmod:			EQU	99h
040060             0136*   ffs_utime:			EQU	9Ah
040060             0137*   ffs_mkdir:			EQU	9Bh
040060             0138*   ffs_chdir:			EQU	9Ch
040060             0139*   ffs_chdrive:		EQU	9Dh
040060             0140*   ffs_getcwd:			EQU	9Eh
040060             0141*   
040060             0142*   ; FatFS volume management and system configuration functions
040060             0143*   ;
040060             0144*   ffs_mount:			EQU	9Fh
040060             0145*   ffs_mkfs:			EQU	A0h
040060             0146*   ffs_fdisk:			EQU	A1h
040060             0147*   ffs_getfree:		EQU	A2h
040060             0148*   ffs_getlabel:		EQU	A3h
040060             0149*   ffs_setlabel:		EQU	A4h
040060             0150*   ffs_setcp:			EQU	A5h
040060             0151*   
040060             0152*   ; File access modes
040060             0153*   ;
040060             0154*   fa_read:			EQU	01h
040060             0155*   fa_write:			EQU	02h
040060             0156*   fa_open_existing:	EQU	00h
040060             0157*   fa_create_new:		EQU	04h
040060             0158*   fa_create_always:	EQU	08h
040060             0159*   fa_open_always:		EQU	10h
040060             0160*   fa_open_append:		EQU	30h
040060             0161*   
040060             0162*   ; System variable indexes for api_sysvars
040060             0163*   ; Index into _sysvars in globals.inc
040060             0164*   ;
040060             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*   
040060             0192*   ; Flags for the VPD protocol
040060             0193*   ;
040060             0194*   vdp_pflag_cursor:		EQU	00000001b
040060             0195*   vdp_pflag_scrchar:		EQU	00000010b
040060             0196*   vdp_pflag_point:		EQU	00000100b
040060             0197*   vdp_pflag_audio:		EQU	00001000b
040060             0198*   vdp_pflag_mode:			EQU	00010000b
040060             0199*   vdp_pflag_rtc:			EQU	00100000b
040060             0200*   
040060             0201*   ;
040060             0202*   ; FatFS structures
040060             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*   ;
040060             0205*   ; Object ID and allocation information (FFOBJID)
040060             0206*   ;
040060             0207*   ; Indexes into FFOBJID structure
040060             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*   ;
040060             0215*   ; File object structure (FIL)
040060             0216*   ;
040060             0217*   ; Indexes into FIL structure
040060             0218*   fil_obj:		EQU 0	; 15: Object identifier
040060             0219*   fil_flag:		EQU	15 	;  1: File status flags
040060             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*   ;
040060             0227*   ; Directory object structure (DIR)
040060             0228*   ; Indexes into DIR structure
040060             0229*   dir_obj:		EQU  0	; 15: Object identifier
040060             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*   dir_clust:		EQU	19	;  4: Current cluster
040060             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*   ;
040060             0237*   ; File information structure (FILINFO)
040060             0238*   ;
040060             0239*   ; Indexes into FILINFO structure
040060             0240*   filinfo_fsize:		EQU 0	;   4: File size
040060             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*   ;
040060             0247*   ; Macro for calling the API
040060             0248*   ; Parameters:
040060             0249*   ; - function: One of the function numbers listed above
040060             0250*   ;
040060             0251*   	MACRO	MOSCALL	function
040060             0252*   			LD	A, function
040060             0253*   			RST.LIL	08h
040060             0254*   	ENDMACRO
040060             0030        include "macros.inc"
040060             0001*   
040060             0002*   ; test the sign of HL
040060             0003*   ; inputs: HL obviously
040060             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040060             0005*   ; destroys: flags
040060             0006*       MACRO SIGN_HLU
040060             0007*       add hl,de ; 1 cycle
040060             0008*       or a ; clear flags ; 1 cycle
040060             0009*       sbc hl,de ; 2 cycles
040060             0010*       ; 4 cycles total
040060             0011*       ENDMACRO
040060             0012*   
040060             0013*   ; put the value in A into HLU
040060             0014*   ; affects: HLU
040060             0015*   ; destroys: nothing
040060             0016*   ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
040060             0017*       MACRO A_TO_HLU
040060             0018*       xor a ; 1 cycle
040060             0019*       ld ($+8+1),hl ; 7 cycles
040060             0020*       ld ($+4+3),a ; 5 cycles
040060             0021*       ld hl,0x000000 ; 4 cycles
040060             0022*       ; 17 cycles total
040060             0023*       ENDMACRO
040060             0024*   
040060             0025*   ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
040060             0026*   ; one cycle less but burns flags
040060             0027*       MACRO A_TO_HLU_ALT
040060             0028*       push hl ; 4 cycles
040060             0029*       ld hl,2 ; 4 cycles
040060             0030*       add hl,sp ; 1 cycle
040060             0031*       ld (hl),a ; 2 cycles
040060             0032*       pop hl ; 4 cycles
040060             0033*       ; 15 cycles total
040060             0034*       ENDMACRO
040060             0035*   
040060             0036*       MACRO hlu_mul256
040060             0037*       add hl,hl ; * 2
040060             0038*       add hl,hl ; * 4
040060             0039*       add hl,hl ; * 8
040060             0040*       add hl,hl ; * 16
040060             0041*       add hl,hl ; * 32
040060             0042*       add hl,hl ; * 64
040060             0043*       add hl,hl ; * 128
040060             0044*       add hl,hl ; * 256
040060             0045*       ENDMACRO
040060             0046*   
040060             0047*   ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
040060             0048*       MACRO SRL_UHL
040060             0049*       dec sp ; 1 cycle
040060             0050*       push hl ; 4 cycles
040060             0051*       inc sp ; 1 cycle
040060             0052*       pop hl ; 4 cycles
040060             0053*       inc hl ; 1 cycle
040060             0054*       dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040060             0055*       ; 13 cycles total
040060             0056*       ENDMACRO
040060             0057*   
040060             0058*       MACRO printChar char
040060             0059*       LD A, char
040060             0060*       RST.LIL 10h
040060             0061*       ENDMACRO
040060             0062*   
040060             0063*   ; Simulated call to subroutine at HL
040060             0064*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0065*   ; outputs: whatever the subroutine does, including HL and BC
040060             0066*   ; destroys: only what the subroutine does, but always BC
040060             0067*       MACRO CALL_HL
040060             0068*       ld bc,$+6 ; Address of first instruction after the jump
040060             0069*       push bc ; which constitutes the return address
040060             0070*       jp (hl) ; Jump to the address in HL
040060             0071*       ENDMACRO
040060             0072*   
040060             0073*   ; Simulated call to subroutine at IX
040060             0074*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0075*   ; outputs: whatever the subroutine does, including IX and BC
040060             0076*   ; destroys: only what the subroutine does, but always BC
040060             0077*       MACRO CALL_IX
040060             0078*       ld bc,$+6 ; Address of first instruction after the jump
040060             0079*       push bc ; which constitutes the return address
040060             0080*       jp (ix) ; Jump to the address in IX
040060             0081*       ENDMACRO
040060             0082*   
040060             0083*   ; Simulated call to soubroutinte at IY
040060             0084*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0085*   ; outputs: whatever the subroutine does, including IY and BC
040060             0086*   ; destroys: only what the subroutine does, but always BC
040060             0087*       MACRO CALL_IY
040060             0088*       ld bc,$+6 ; Address of first instruction after the jump
040060             0089*       push bc ; which constitutes the return address
040060             0090*       jp (iy) ; Jump to the address in IY
040060             0091*       ENDMACRO
040060             0092*   
040060             0093*   ; put the value in HLU into A
040060             0094*   ; destroys: af
040060             0095*       MACRO HLU_TO_A
040060             0096*       dec sp ; 1 cycle
040060             0097*       push hl ; 4 cycles
040060             0098*       inc sp ; 1 cycle
040060             0099*       pop af ; 4 cycles
040060             0100*       ; 10 cycles total
040060             0101*       ENDMACRO
040060             0102*   
040060             0103*       MACRO PUSH_ALL
040060             0104*       ex af,af'
040060             0105*       exx
040060             0106*       push af
040060             0107*       push hl
040060             0108*       push bc
040060             0109*       push de
040060             0110*   
040060             0111*       ex af,af'
040060             0112*       exx
040060             0113*       push af
040060             0114*       push hl
040060             0115*       push bc
040060             0116*       push de
040060             0117*       push ix
040060             0118*       push iy
040060             0119*       ENDMACRO
040060             0120*   
040060             0121*       MACRO POP_ALL
040060             0122*       pop iy
040060             0123*       pop ix
040060             0124*       pop de
040060             0125*       pop bc
040060             0126*       pop hl
040060             0127*       pop af
040060             0128*       ex af,af'
040060             0129*       exx
040060             0130*   
040060             0131*       pop de
040060             0132*       pop bc
040060             0133*       pop hl
040060             0134*       pop af
040060             0135*       ex af,af'
040060             0136*       exx
040060             0137*       ENDMACRO
040060             0031        include "functions.inc"
040060 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040100             0002*   
040100             0003*   ; Print a zero-terminated string inline with code, e.g.:
040100             0004*   ;
040100             0005*   ;    call printInline
040100             0006*   ;    ASCIZ "Hello, world!\r\n"
040100             0007*   ;
040100             0008*   ; Destroys: HL,AF
040100             0009*   printInline:
040100 E1          0010*       pop hl ; get the return address = pointer to start of string
040101 CD 07 01 04 0011*       call printString ; HL advances to end of string
040105 E5          0012*       push hl ; restore the return address = pointer to end of string
040106 C9          0013*       ret
040107             0014*   
040107             0015*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040107             0016*   ; Print a zero-terminated string
040107             0017*   ; HL: Pointer to string
040107             0018*   printString:
040107 C5          0019*       PUSH BC
040108 01 00 00 00 0020*       LD BC,0
04010C 3E 00       0021*       LD A,0
04010E 5B DF       0022*       RST.LIL 18h
040110 C1          0023*       POP BC
040111 C9          0024*       RET
040112             0025*   ; print a VDU sequence
040112             0026*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
040112             0027*   sendVDUsequence:
040112 C5          0028*       PUSH BC
040113 01 00 00 00 0029*       LD BC, 0
040117 4E          0030*       LD C, (HL)
040118 5B DF       0031*       RST.LIL 18h
04011A C1          0032*       POP BC
04011B C9          0033*       RET
04011C             0034*   ; Print Newline sequence to VDP
04011C             0035*   ; destroys bc
04011C             0036*   printNewLine:
04011C F5          0037*       push af ; for some reason rst.lil 10h sets carry flag
04011D 3E 0D       0038*       LD A, '\r'
04011F 5B D7       0039*       RST.LIL 10h
040121 3E 0A       0040*       LD A, '\n'
040123 5B D7       0041*       RST.LIL 10h
040125 F1          0042*       pop af
040126 C9          0043*       RET
040127             0044*   
040127             0045*   ; Print a 24-bit HEX number
040127             0046*   ; HLU: Number to print
040127             0047*   printHex24:
040127             0048*       HLU_TO_A
040127 3B          0001*M1     dec sp ; 1 cycle
040128 E5          0002*M1     push hl ; 4 cycles
040129 33          0003*M1     inc sp ; 1 cycle
04012A F1          0004*M1     pop af ; 4 cycles
04012B             0005*M1     ; 10 cycles total
04012B CD 35 01 04 0049*       CALL printHex8
04012F             0050*   ; Print a 16-bit HEX number
04012F             0051*   ; HL: Number to print
04012F             0052*   printHex16:
04012F 7C          0053*       LD A,H
040130 CD 35 01 04 0054*       CALL printHex8
040134 7D          0055*       LD A,L
040135             0056*   ; Print an 8-bit HEX number
040135             0057*   ; A: Number to print
040135             0058*   printHex8:
040135 4F          0059*       LD C,A
040136 1F          0060*       RRA
040137 1F          0061*       RRA
040138 1F          0062*       RRA
040139 1F          0063*       RRA
04013A CD 3F 01 04 0064*       CALL @F
04013E 79          0065*       LD A,C
04013F             0066*   @@:
04013F E6 0F       0067*       AND 0Fh
040141 C6 90       0068*       ADD A,90h
040143 27          0069*       DAA
040144 CE 40       0070*       ADC A,40h
040146 27          0071*       DAA
040147 5B D7       0072*       RST.LIL 10h
040149 C9          0073*       RET
04014A             0074*   
04014A             0075*   printHexA:
04014A F5          0076*       push af
04014B C5          0077*       push bc
04014C CD 35 01 04 0078*       call printHex8
040150 3E 20       0079*       ld a,' '
040152 5B D7       0080*       rst.lil 10h
040154 C1          0081*       pop bc
040155 F1          0082*       pop af
040156 C9          0083*       ret
040157             0084*   
040157             0085*   printHexHL:
040157 F5          0086*       push af
040158 C5          0087*       push bc
040159 CD 2F 01 04 0088*       call printHex16
04015D 3E 20       0089*       ld a,' '
04015F 5B D7       0090*       rst.lil 10h
040161 C1          0091*       pop bc
040162 F1          0092*       pop af
040163 C9          0093*       ret
040164             0094*   
040164             0095*   printHexUHL:
040164 F5          0096*       push af
040165 C5          0097*       push bc
040166 CD 27 01 04 0098*       call printHex24
04016A 3E 20       0099*       ld a,' '
04016C 5B D7       0100*       rst.lil 10h
04016E C1          0101*       pop bc
04016F F1          0102*       pop af
040170 C9          0103*       ret
040171             0104*   
040171             0105*   printHexAUHL:
040171 F5          0106*       push af
040172 C5          0107*       push bc
040173 CD 35 01 04 0108*       call printHex8
040177 3E 2E       0109*       ld a,'.'
040179 5B D7       0110*       rst.lil 10h
04017B CD 27 01 04 0111*       call printHex24
04017F 3E 20       0112*       ld a,' '
040181 5B D7       0113*       rst.lil 10h
040183 C1          0114*       pop bc
040184 F1          0115*       pop af
040185 C9          0116*       ret
040186             0117*   
040186             0118*   printHexABHL:
040186             0119*   ; preserve registers
040186 C5          0120*       push bc ; b will be ok c will not
040187 F5          0121*       push af ; will get totally destroyed
040188             0122*   ; print a
040188 CD 35 01 04 0123*       call printHex8
04018C             0124*   ; print b
04018C 78          0125*       ld a,b
04018D CD 35 01 04 0126*       call printHex8
040191             0127*   ; print hl
040191 CD 2F 01 04 0128*       call printHex16
040195             0129*   ; restore registers
040195 F1          0130*       pop af
040196 C1          0131*       pop bc
040197 C9          0132*       ret
040198             0133*   
040198             0134*   printHexBHL:
040198             0135*   ; preserve registers
040198 C5          0136*       push bc ; b will be ok c will not
040199 F5          0137*       push af ; will get totally destroyed
04019A             0138*   ; print b
04019A 78          0139*       ld a,b
04019B CD 35 01 04 0140*       call printHex8
04019F             0141*   ; print hl
04019F CD 2F 01 04 0142*       call printHex16
0401A3             0143*   ; restore registers
0401A3 F1          0144*       pop af
0401A4 C1          0145*       pop bc
0401A5 C9          0146*       ret
0401A6             0147*   
0401A6             0148*   printHexCDE:
0401A6             0149*   ; preserve registers
0401A6 C5          0150*       push bc ; b will be ok c will not
0401A7 F5          0151*       push af ; will get totally destroyed
0401A8             0152*   ; print c
0401A8 79          0153*       ld a,c
0401A9 CD 35 01 04 0154*       call printHex8
0401AD             0155*   ; print de
0401AD EB          0156*       ex de,hl
0401AE CD 2F 01 04 0157*       call printHex16
0401B2 EB          0158*       ex de,hl
0401B3             0159*   ; restore registers
0401B3 F1          0160*       pop af
0401B4 C1          0161*       pop bc
0401B5 C9          0162*       ret
0401B6             0163*   
0401B6             0164*   printHexUIX:
0401B6             0165*   ; store everything in scratch
0401B6 22 42 06 04 0166*       ld (uhl),hl
0401BA ED 43 45 06 0167*       ld (ubc),bc
       04          
0401BF ED 53 48 06 0168*       ld (ude),de
       04          
0401C4 DD 22 4B 06 0169*       ld (uix),ix
       04          
0401C9 FD 22 4E 06 0170*       ld (uiy),iy
       04          
0401CE F5          0171*       push af ; fml
0401CF             0172*   
0401CF 21 D9 05 04 0173*       ld hl,str_ixu
0401D3 CD 07 01 04 0174*       call printString
0401D7 2A 4B 06 04 0175*       ld hl,(uix)
0401DB CD 27 01 04 0176*       call printHex24
0401DF CD 1C 01 04 0177*       call printNewLine
0401E3             0178*   
0401E3             0179*   ; restore everything
0401E3 2A 42 06 04 0180*       ld hl, (uhl)
0401E7 ED 4B 45 06 0181*       ld bc, (ubc)
       04          
0401EC ED 5B 48 06 0182*       ld de, (ude)
       04          
0401F1 DD 2A 4B 06 0183*       ld ix, (uix)
       04          
0401F6 FD 2A 4E 06 0184*       ld iy, (uiy)
       04          
0401FB F1          0185*       pop af
0401FC             0186*   ; all done
0401FC C9          0187*       ret
0401FD             0188*   
0401FD             0189*   ; Print a 0x HEX prefix
0401FD             0190*   DisplayHexPrefix:
0401FD 3E 30       0191*       LD A, '0'
0401FF 5B D7       0192*       RST.LIL 10h
040201 3E 78       0193*       LD A, 'x'
040203 5B D7       0194*       RST.LIL 10h
040205 C9          0195*       RET
040206             0196*   
040206             0197*       MACRO printDecBC
040206             0198*       push hl
040206             0199*       push bc
040206             0200*       pop hl
040206             0201*       call printDec
040206             0202*       pop hl
040206             0203*       ENDMACRO
040206             0204*   
040206             0205*       MACRO printDecDE
040206             0206*       push hl
040206             0207*       push de
040206             0208*       pop hl
040206             0209*       call printDec
040206             0210*       pop hl
040206             0211*       ENDMACRO
040206             0212*   
040206             0213*       MACRO printDecHL
040206             0214*       call printDec
040206             0215*       ENDMACRO
040206             0216*   
040206             0217*       MACRO printDecIX
040206             0218*       push hl
040206             0219*       push ix
040206             0220*       pop hl
040206             0221*       call printDec
040206             0222*       pop hl
040206             0223*       ENDMACRO
040206             0224*   
040206             0225*       MACRO printDecIY
040206             0226*       push hl
040206             0227*       push iy
040206             0228*       pop hl
040206             0229*       call printDec
040206             0230*       pop hl
040206             0231*       ENDMACRO
040206             0232*   
040206             0233*   
040206             0234*   ; Prints the right justified decimal value in HL without leading zeroes
040206             0235*   ; HL : Value to print
040206             0236*   ; preserves all registers and flags
040206             0237*   printDec:
040206             0238*   ; BEGIN MY CODE
040206             0239*   ; back up all the things
040206 F5          0240*       push af
040207 C5          0241*       push bc
040208 D5          0242*       push de
040209 E5          0243*       push hl
04020A             0244*   ; END MY CODE
04020A 11 32 02 04 0245*       LD DE, _printDecBuffer
04020E CD 42 02 04 0246*       CALL u24_to_ascii
040212             0247*   ; BEGIN MY CODE
040212             0248*   ; replace leading zeroes with spaces
040212 21 32 02 04 0249*       LD HL, _printDecBuffer
040216 06 07       0250*       ld B, 7 ; if HL was 0, we want to keep the final zero
040218             0251*   @loop:
040218 7E          0252*       LD A, (HL)
040219 FE 30       0253*       CP '0'
04021B C2 25 02 04 0254*       JP NZ, @done
04021F 3E 20       0255*       LD A, ' '
040221 77          0256*       LD (HL), A
040222 23          0257*       INC HL
040223             0258*       ; CALL vdu_cursor_forward
040223 10 F3       0259*       DJNZ @loop
040225             0260*   @done:
040225             0261*   ; END MY CODE
040225 21 32 02 04 0262*       LD HL, _printDecBuffer
040229 CD 07 01 04 0263*       CALL printString
04022D             0264*   ; BEGIN MY CODE
04022D             0265*   ; restore all the things
04022D E1          0266*       pop hl
04022E D1          0267*       pop de
04022F C1          0268*       pop bc
040230 F1          0269*       pop af
040231             0270*   ; END MY CODE
040231 C9          0271*       RET
040232 00 00 00 00 0272*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040242             0273*   
040242             0274*   ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
040242             0275*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040242             0276*   ; so it will allways be 8 characters length
040242             0277*   ; HL : Value to convert to string
040242             0278*   ; DE : pointer to buffer, at least 8 byte + 0
040242             0279*   u24_to_ascii:
040242 01 80 69 67 0280*       LD BC,-10000000
040246 CD 79 02 04 0281*       CALL @one_digit
04024A 01 C0 BD F0 0282*       LD BC,-1000000
04024E CD 79 02 04 0283*       CALL @one_digit
040252 01 60 79 FE 0284*       LD BC,-100000
040256 CD 79 02 04 0285*       CALL @one_digit
04025A 01 F0 D8 FF 0286*       LD BC,-10000
04025E CD 79 02 04 0287*       CALL @one_digit
040262 01 18 FC FF 0288*       LD BC,-1000
040266 CD 79 02 04 0289*       CALL @one_digit
04026A 01 9C FF FF 0290*       LD BC,-100
04026E CD 79 02 04 0291*       CALL @one_digit
040272 0E F6       0292*       LD C,-10
040274 CD 79 02 04 0293*       CALL @one_digit
040278 48          0294*       LD C,B
040279             0295*   @one_digit:
040279 3E 2F       0296*       LD A,'0'-1
04027B             0297*   @divide_me:
04027B 3C          0298*       INC A
04027C 09          0299*       ADD HL,BC
04027D 38 FC       0300*       JR C,@divide_me
04027F ED 42       0301*       SBC HL,BC
040281 12          0302*       LD (DE),A
040282 13          0303*       INC DE
040283 C9          0304*       RET
040284             0305*   
040284             0306*   print_u24:
040284 D5          0307*       push de
040285 E5          0308*       push hl
040286 11 32 02 04 0309*       ld de,_printDecBuffer
04028A CD 42 02 04 0310*       call u24_to_ascii
04028E 21 32 02 04 0311*       ld hl,_printDecBuffer
040292 CD 07 01 04 0312*       call printString
040296 3E 20       0313*       ld a,' '
040298 5B D7       0314*       rst.lil 10h
04029A E1          0315*       pop hl
04029B D1          0316*       pop de
04029C C9          0317*       ret
04029D             0318*   
04029D             0319*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04029D             0320*   ; HL : Value to convert to string (integer part in H, fractional part in L)
04029D             0321*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04029D             0322*   u168_to_ascii:
04029D             0323*   ; add a leading space to make room for sign flag if needed
04029D 3E 20       0324*       ld a,' '
04029F 12          0325*       ld (de),a
0402A0 13          0326*       inc de
0402A1             0327*   ; Convert integer part
0402A1 E5          0328*       push hl ; Save HL (we’ll need the fractional part later)
0402A2             0329*       ; call hlu_udiv256 ; Shift to get integer portion in HL
0402A2             0330*       SRL_UHL ; Shift to get integer portion in HL
0402A2 3B          0001*M1     dec sp ; 1 cycle
0402A3 E5          0002*M1     push hl ; 4 cycles
0402A4 33          0003*M1     inc sp ; 1 cycle
0402A5 E1          0004*M1     pop hl ; 4 cycles
0402A6 23          0005*M1     inc hl ; 1 cycle
0402A7 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
0402A9             0007*M1     ; 13 cycles total
0402A9 01 F0 D8 FF 0331*       ld bc, -10000
0402AD CD D0 02 04 0332*       call @one_int
0402B1 01 18 FC FF 0333*       ld bc, -1000
0402B5 CD D0 02 04 0334*       call @one_int
0402B9 01 9C FF FF 0335*       ld bc, -100
0402BD CD D0 02 04 0336*       call @one_int
0402C1 0E F6       0337*       ld c, -10
0402C3 CD D0 02 04 0338*       call @one_int
0402C7 48          0339*       ld c, b
0402C8 CD D0 02 04 0340*       call @one_int
0402CC C3 DB 02 04 0341*       jp @frac ; Jump to fractional part conversion
0402D0             0342*   @one_int:
0402D0 3E 2F       0343*       ld a, '0' - 1 ; Start ASCII character at '0'
0402D2             0344*   @divide_me:
0402D2 3C          0345*       inc a
0402D3 09          0346*       add hl, bc ; Accumulate until overflow
0402D4 38 FC       0347*       jr c, @divide_me
0402D6 ED 42       0348*       sbc hl, bc ; Remove excess after overflow
0402D8 12          0349*       ld (de), a ; Store ASCII digit
0402D9 13          0350*       inc de
0402DA C9          0351*       ret
0402DB             0352*   ; Convert fractional part
0402DB             0353*   @frac:
0402DB 3E 2E       0354*       ld a, '.' ; Decimal point
0402DD 12          0355*       ld (de), a
0402DE 13          0356*       inc de
0402DF E1          0357*       pop hl ; Restore HL with original fraction
0402E0 06 03       0358*       ld b, 3 ; Loop counter for 3 fractional digits
0402E2             0359*   @frac_loop:
0402E2 26 0A       0360*       ld h, 10 ; Load multiplier for fractional part
0402E4 ED 6C       0361*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0402E6 3E 30       0362*       ld a, '0'
0402E8 84          0363*       add a, h ; Convert integer part to ASCII
0402E9 12          0364*       ld (de), a
0402EA 13          0365*       inc de
0402EB 10 F5       0366*       djnz @frac_loop ; Repeat for each fractional digit
0402ED             0367*   ; Add null terminator
0402ED AF          0368*       xor a ; Null terminator
0402EE 12          0369*       ld (de), a
0402EF C9          0370*       ret
0402F0             0371*   
0402F0             0372*   print_u168:
0402F0 D5          0373*       push de
0402F1 E5          0374*       push hl
0402F2 11 32 02 04 0375*       ld de,_printDecBuffer
0402F6 CD 9D 02 04 0376*       call u168_to_ascii
0402FA 21 32 02 04 0377*       ld hl,_printDecBuffer
0402FE CD 07 01 04 0378*       call printString
040302 E1          0379*       pop hl
040303 D1          0380*       pop de
040304 C9          0381*       ret
040305             0382*   
040305             0383*   ; signed version of u168_to_ascii
040305             0384*   s168_to_ascii:
040305 D5          0385*       push de ; save starting address of buffer
040306 CD 06 09 04 0386*       call hlu_abs
04030A F5          0387*       push af ; save sign flag
04030B CD 9D 02 04 0388*       call u168_to_ascii
04030F F1          0389*       pop af ; restore sign flag
040310 D1          0390*       pop de ; restore starting address of buffer
040311 F0          0391*       ret p ; hlu was positive so nothing to do
040312 3E 2D       0392*       ld a,'-'
040314 12          0393*       ld (de),a
040315 C9          0394*       ret
040316             0395*   
040316             0396*   print_s168:
040316 D5          0397*       push de
040317 E5          0398*       push hl
040318 11 32 02 04 0399*       ld de,_printDecBuffer
04031C CD 05 03 04 0400*       call s168_to_ascii
040320 21 32 02 04 0401*       ld hl,_printDecBuffer
040324 CD 07 01 04 0402*       call printString
040328 E1          0403*       pop hl
040329 D1          0404*       pop de
04032A C9          0405*       ret
04032B             0406*   
04032B             0407*   print_s168_hl:
04032B F5          0408*       push af
04032C E5          0409*       push hl
04032D CD 16 03 04 0410*       call print_s168
040331 3E 20       0411*       ld a,' '
040333 5B D7       0412*       rst.lil 10h
040335 E1          0413*       pop hl
040336 F1          0414*       pop af
040337 C9          0415*       ret
040338             0416*   
040338             0417*   print_s168_bc:
040338 F5          0418*       push af
040339 C5          0419*       push bc
04033A E5          0420*       push hl
04033B C5          0421*       push bc
04033C E1          0422*       pop hl
04033D CD 16 03 04 0423*       call print_s168
040341 3E 20       0424*       ld a,' '
040343 5B D7       0425*       rst.lil 10h
040345 E1          0426*       pop hl
040346 C1          0427*       pop bc
040347 F1          0428*       pop af
040348 C9          0429*       ret
040349             0430*   
040349             0431*   print_s168_de:
040349 F5          0432*       push af
04034A D5          0433*       push de
04034B E5          0434*       push hl
04034C EB          0435*       ex de,hl
04034D CD 16 03 04 0436*       call print_s168
040351 3E 20       0437*       ld a,' '
040353 5B D7       0438*       rst.lil 10h
040355 E1          0439*       pop hl
040356 D1          0440*       pop de
040357 F1          0441*       pop af
040358 C9          0442*       ret
040359             0443*   
040359             0444*   print_s168_hl_bc_de:
040359 F5          0445*       push af
04035A C5          0446*       push bc
04035B D5          0447*       push de
04035C E5          0448*       push hl
04035D CD 16 03 04 0449*       call print_s168
040361 3E 20       0450*       ld a,' '
040363 5B D7       0451*       rst.lil 10h
040365 C5          0452*       push bc
040366 E1          0453*       pop hl
040367 CD 16 03 04 0454*       call print_s168
04036B 3E 20       0455*       ld a,' '
04036D 5B D7       0456*       rst.lil 10h
04036F EB          0457*       ex de,hl
040370 CD 16 03 04 0458*       call print_s168
040374 3E 20       0459*       ld a,' '
040376 5B D7       0460*       rst.lil 10h
040378 E1          0461*       pop hl
040379 D1          0462*       pop de
04037A C1          0463*       pop bc
04037B F1          0464*       pop af
04037C C9          0465*       ret
04037D             0466*   
04037D             0467*   print_s168_bc_de:
04037D F5          0468*       push af
04037E C5          0469*       push bc
04037F D5          0470*       push de
040380 C5          0471*       push bc
040381 E1          0472*       pop hl
040382 CD 16 03 04 0473*       call print_s168
040386 3E 20       0474*       ld a,' '
040388 5B D7       0475*       rst.lil 10h
04038A EB          0476*       ex de,hl
04038B CD 16 03 04 0477*       call print_s168
04038F 3E 20       0478*       ld a,' '
040391 5B D7       0479*       rst.lil 10h
040393 E1          0480*       pop hl
040394 D1          0481*       pop de
040395 C1          0482*       pop bc
040396 F1          0483*       pop af
040397 C9          0484*       ret
040398             0485*   
040398             0486*   print_s168_a:
040398 F5          0487*       push af
040399 C5          0488*       push bc
04039A E5          0489*       push hl
04039B 21 00 00 00 0490*       ld hl,0
04039F 6F          0491*       ld l,a
0403A0 CD 2B 03 04 0492*       call print_s168_hl
0403A4 E1          0493*       pop hl
0403A5 C1          0494*       pop bc
0403A6 F1          0495*       pop af
0403A7 C9          0496*       ret
0403A8             0497*   
0403A8             0498*   ; #### new functions added by Brandon R. Gates ####
0403A8             0499*   
0403A8             0500*   ; print the binary representation of the 8-bit value in a
0403A8             0501*   ; destroys a, hl, bc
0403A8             0502*   printBin8:
0403A8 06 08       0503*       ld b,8 ; loop counter for 8 bits
0403AA 21 C5 03 04 0504*       ld hl,@cmd ; set hl to the low byte of the output string
0403AE             0505*       ; (which will be the high bit of the value in a)
0403AE             0506*   @loop:
0403AE 07          0507*       rlca ; put the next highest bit into carry
0403AF 38 04       0508*       jr c,@one
0403B1 36 30       0509*       ld (hl),'0'
0403B3 18 02       0510*       jr @next_bit
0403B5             0511*   @one:
0403B5 36 31       0512*       ld (hl),'1'
0403B7             0513*   @next_bit:
0403B7 23          0514*       inc hl
0403B8 10 F4       0515*       djnz @loop
0403BA             0516*   ; print it
0403BA 21 C5 03 04 0517*       ld hl,@cmd
0403BE 01 08 00 00 0518*       ld bc,@end-@cmd
0403C2 5B DF       0519*       rst.lil $18
0403C4 C9          0520*       ret
0403C5             0521*   @cmd: ds 8 ; eight bytes for eight bits
0403CD             0522*   @end:
0403CD             0523*   
0403CD             0524*   ; print the binary representation of the 8-bit value in a
0403CD             0525*   ; in reverse order (lsb first)
0403CD             0526*   ; destroys a, hl, bc
0403CD             0527*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
0403CD 06 08       0528*       ld b,8 ; loop counter for 8 bits
0403CF 21 EA 03 04 0529*       ld hl,@cmd ; set hl to the low byte of the output string
0403D3             0530*       ; (which will be the high bit of the value in a)
0403D3             0531*   @loop:
0403D3 0F          0532*       rrca ; put the next lowest bit into carry
0403D4 38 04       0533*       jr c,@one
0403D6 36 30       0534*       ld (hl),'0'
0403D8 18 02       0535*       jr @next_bit
0403DA             0536*   @one:
0403DA 36 31       0537*       ld (hl),'1'
0403DC             0538*   @next_bit:
0403DC 23          0539*       inc hl
0403DD 10 F4       0540*       djnz @loop
0403DF             0541*   ; print it
0403DF 21 EA 03 04 0542*       ld hl,@cmd
0403E3 01 08 00 00 0543*       ld bc,@end-@cmd
0403E7 5B DF       0544*       rst.lil $18
0403E9 C9          0545*       ret
0403EA             0546*   @cmd: ds 8 ; eight bytes for eight bits
0403F2             0547*   @end:
0403F2             0548*   
0403F2             0549*   ; print registers to screen in hexidecimal format
0403F2             0550*   ; inputs: none
0403F2             0551*   ; outputs: values of every register printed to screen
0403F2             0552*   ;    values of each register in global scratch memory
0403F2             0553*   ; destroys: nothing
0403F2             0554*   stepRegistersHex:
0403F2             0555*   ; store everything in scratch
       FF FF FF FF 
       FF FF FF FF 
0403F2 22 42 06 04 0556*       ld (uhl),hl
0403F6 ED 43 45 06 0557*       ld (ubc),bc
       04          
0403FB ED 53 48 06 0558*       ld (ude),de
       04          
040400 DD 22 4B 06 0559*       ld (uix),ix
       04          
040405 FD 22 4E 06 0560*       ld (uiy),iy
       04          
04040A F5          0561*       push af ; fml
04040B E1          0562*       pop hl ; thanks, zilog
04040C 22 3F 06 04 0563*       ld (uaf),hl
040410 F5          0564*       push af ; dammit
040411             0565*   
040411             0566*   ; home the cursor
040411             0567*       ; call vdu_home_cursor
040411             0568*   
040411             0569*   ; print each register
040411 21 C5 05 04 0570*       ld hl,str_afu
040415 CD 07 01 04 0571*       call printString
040419 2A 3F 06 04 0572*       ld hl,(uaf)
04041D CD 27 01 04 0573*       call printHex24
040421 CD 1C 01 04 0574*       call printNewLine
040425             0575*   
040425 21 CA 05 04 0576*       ld hl,str_hlu
040429 CD 07 01 04 0577*       call printString
04042D 2A 42 06 04 0578*       ld hl,(uhl)
040431 CD 27 01 04 0579*       call printHex24
040435 CD 1C 01 04 0580*       call printNewLine
040439             0581*   
040439 21 CF 05 04 0582*       ld hl,str_bcu
04043D CD 07 01 04 0583*       call printString
040441 2A 45 06 04 0584*       ld hl,(ubc)
040445 CD 27 01 04 0585*       call printHex24
040449 CD 1C 01 04 0586*       call printNewLine
04044D             0587*   
04044D 21 D4 05 04 0588*       ld hl,str_deu
040451 CD 07 01 04 0589*       call printString
040455 2A 48 06 04 0590*       ld hl,(ude)
040459 CD 27 01 04 0591*       call printHex24
04045D CD 1C 01 04 0592*       call printNewLine
040461             0593*   
040461 21 D9 05 04 0594*       ld hl,str_ixu
040465 CD 07 01 04 0595*       call printString
040469 2A 4B 06 04 0596*       ld hl,(uix)
04046D CD 27 01 04 0597*       call printHex24
040471 CD 1C 01 04 0598*       call printNewLine
040475             0599*   
040475 21 DE 05 04 0600*       ld hl,str_iyu
040479 CD 07 01 04 0601*       call printString
04047D 2A 4E 06 04 0602*       ld hl,(uiy)
040481 CD 27 01 04 0603*       call printHex24
040485 CD 1C 01 04 0604*       call printNewLine
040489             0605*   
040489             0606*       ; call vsync
040489             0607*   
040489 CD 1C 01 04 0608*       call printNewLine
04048D             0609*   
04048D             0610*   ; check for right shift key and quit if pressed
04048D             0611*       MOSCALL mos_getkbmap
04048D 3E 1E       0001*M1 			LD	A, function
04048F 5B CF       0002*M1 			RST.LIL	08h
040491             0612*   @stayhere:
040491             0613*   ; 7 RightShift
040491 DD CB 00 76 0614*       bit 6,(ix+0)
040495 20 02       0615*       jr nz,@RightShift
040497 18 F8       0616*       jr @stayhere
040499             0617*   @RightShift:
040499 DD CB 0E 86 0618*       res 0,(ix+14) ; debounce the key (hopefully)
04049D 3E 80       0619*       ld a,%10000000
04049F             0620*       ; call multiPurposeDelay
04049F             0621*   
04049F             0622*   ; restore everything
04049F 2A 42 06 04 0623*       ld hl, (uhl)
0404A3 ED 4B 45 06 0624*       ld bc, (ubc)
       04          
0404A8 ED 5B 48 06 0625*       ld de, (ude)
       04          
0404AD DD 2A 4B 06 0626*       ld ix, (uix)
       04          
0404B2 FD 2A 4E 06 0627*       ld iy, (uiy)
       04          
0404B7 F1          0628*       pop af
0404B8             0629*   ; all done
0404B8 C9          0630*       ret
0404B9             0631*   
0404B9             0632*   ; print registers to screen in hexidecimal format
0404B9             0633*   ; inputs: none
0404B9             0634*   ; outputs: values of every register printed to screen
0404B9             0635*   ;    values of each register in global scratch memory
0404B9             0636*   ; destroys: nothing
0404B9             0637*   dumpRegistersHex:
0404B9             0638*   ; store everything in scratch
0404B9 22 42 06 04 0639*       ld (uhl),hl
0404BD ED 43 45 06 0640*       ld (ubc),bc
       04          
0404C2 ED 53 48 06 0641*       ld (ude),de
       04          
0404C7 DD 22 4B 06 0642*       ld (uix),ix
       04          
0404CC FD 22 4E 06 0643*       ld (uiy),iy
       04          
0404D1 F5          0644*       push af ; fml
0404D2 E1          0645*       pop hl ; thanks, zilog
0404D3 22 3F 06 04 0646*       ld (uaf),hl
0404D7 F5          0647*       push af ; dammit
0404D8             0648*   
0404D8             0649*   ; home the cursor
0404D8             0650*       ; call vdu_home_cursor
0404D8             0651*       ; call printNewLine
0404D8             0652*   
0404D8             0653*   ; print each register
0404D8 21 C5 05 04 0654*       ld hl,str_afu
0404DC CD 07 01 04 0655*       call printString
0404E0 2A 3F 06 04 0656*       ld hl,(uaf)
0404E4 CD 27 01 04 0657*       call printHex24
0404E8 CD 1C 01 04 0658*       call printNewLine
0404EC             0659*   
0404EC 21 CA 05 04 0660*       ld hl,str_hlu
0404F0 CD 07 01 04 0661*       call printString
0404F4 2A 42 06 04 0662*       ld hl,(uhl)
0404F8 CD 27 01 04 0663*       call printHex24
0404FC CD 1C 01 04 0664*       call printNewLine
040500             0665*   
040500 21 CF 05 04 0666*       ld hl,str_bcu
040504 CD 07 01 04 0667*       call printString
040508 2A 45 06 04 0668*       ld hl,(ubc)
04050C CD 27 01 04 0669*       call printHex24
040510 CD 1C 01 04 0670*       call printNewLine
040514             0671*   
040514 21 D4 05 04 0672*       ld hl,str_deu
040518 CD 07 01 04 0673*       call printString
04051C 2A 48 06 04 0674*       ld hl,(ude)
040520 CD 27 01 04 0675*       call printHex24
040524 CD 1C 01 04 0676*       call printNewLine
040528             0677*   
040528 21 D9 05 04 0678*       ld hl,str_ixu
04052C CD 07 01 04 0679*       call printString
040530 2A 4B 06 04 0680*       ld hl,(uix)
040534 CD 27 01 04 0681*       call printHex24
040538 CD 1C 01 04 0682*       call printNewLine
04053C             0683*   
04053C 21 DE 05 04 0684*       ld hl,str_iyu
040540 CD 07 01 04 0685*       call printString
040544 2A 4E 06 04 0686*       ld hl,(uiy)
040548 CD 27 01 04 0687*       call printHex24
04054C             0688*       ; call printNewLine
04054C             0689*   
04054C             0690*       ; call vdu_vblank
04054C             0691*   
04054C             0692*       ; call printNewLine
04054C             0693*   ; restore everything
04054C 2A 42 06 04 0694*       ld hl, (uhl)
040550 ED 4B 45 06 0695*       ld bc, (ubc)
       04          
040555 ED 5B 48 06 0696*       ld de, (ude)
       04          
04055A DD 2A 4B 06 0697*       ld ix, (uix)
       04          
04055F FD 2A 4E 06 0698*       ld iy, (uiy)
       04          
040564 F1          0699*       pop af
040565             0700*   ; all done
040565 C9          0701*       ret
040566             0702*   
040566             0703*   dumpRegistersHexPrime:
040566 D9          0704*       exx
040567 08          0705*       ex af,af'
040568 CD B9 04 04 0706*       call dumpRegistersHex
04056C 08          0707*       ex af,af'
04056D D9          0708*       exx
04056E C9          0709*       ret
04056F             0710*   
04056F             0711*   ; additionally dump prime registers
04056F             0712*   ; inputs: none
04056F             0713*   ; outputs: values of every register printed to screen
04056F             0714*   ; destroys: nothing
04056F             0715*   dumpRegistersHexAll:
04056F CD B9 04 04 0716*       call dumpRegistersHex
040573 08          0717*       ex af,af'
040574 D9          0718*       exx
040575 CD B9 04 04 0719*       call dumpRegistersHex
040579 08          0720*       ex af,af'
04057A D9          0721*       exx
04057B C9          0722*       ret
04057C             0723*   
04057C             0724*   ; print hlu to screen in hexidecimal format
04057C             0725*   ; inputs: none
04057C             0726*   ; destroys: nothing
04057C             0727*   print_hex_hl:
04057C F5          0728*       push af
04057D E5          0729*       push hl
04057E 21 CA 05 04 0730*       ld hl,str_hlu
040582 CD 07 01 04 0731*       call printString
040586 E1          0732*       pop hl
040587 E5          0733*       push hl
040588 CD 27 01 04 0734*       call printHex24
04058C 3E 20       0735*       ld a,' '
04058E 5B D7       0736*       rst.lil 10h
040590 E1          0737*       pop hl
040591 F1          0738*       pop af
040592 C9          0739*       ret
040593             0740*   
040593             0741*   ; print bcu to screen in hexidecimal format
040593             0742*   ; inputs: none
040593             0743*   ; destroys: nothing
040593             0744*   print_hex_bc:
040593 F5          0745*       push af
040594 E5          0746*       push hl
040595 C5          0747*       push bc
040596 21 CF 05 04 0748*       ld hl,str_bcu
04059A CD 07 01 04 0749*       call printString
04059E E1          0750*       pop hl
04059F E5          0751*       push hl
0405A0 CD 27 01 04 0752*       call printHex24
0405A4 3E 20       0753*       ld a,' '
0405A6 5B D7       0754*       rst.lil 10h
0405A8 C1          0755*       pop bc
0405A9 E1          0756*       pop hl
0405AA F1          0757*       pop af
0405AB C9          0758*       ret
0405AC             0759*   
0405AC             0760*   ; print deu to screen in hexidecimal format
0405AC             0761*   ; inputs: none
0405AC             0762*   ; destroys: nothing
0405AC             0763*   print_hex_de:
0405AC F5          0764*       push af
0405AD E5          0765*       push hl
0405AE D5          0766*       push de
0405AF 21 D4 05 04 0767*       ld hl,str_deu
0405B3 CD 07 01 04 0768*       call printString
0405B7 E1          0769*       pop hl
0405B8 E5          0770*       push hl
0405B9 CD 27 01 04 0771*       call printHex24
0405BD 3E 20       0772*       ld a,' '
0405BF 5B D7       0773*       rst.lil 10h
0405C1 D1          0774*       pop de
0405C2 E1          0775*       pop hl
0405C3 F1          0776*       pop af
0405C4 C9          0777*       ret
0405C5             0778*   
0405C5 20 61 66 3D 0779*   str_afu: db " af=",0
       00          
0405CA 20 68 6C 3D 0780*   str_hlu: db " hl=",0
       00          
0405CF 20 62 63 3D 0781*   str_bcu: db " bc=",0
       00          
0405D4 20 64 65 3D 0782*   str_deu: db " de=",0
       00          
0405D9 20 69 78 3D 0783*   str_ixu: db " ix=",0
       00          
0405DE 20 69 79 3D 0784*   str_iyu: db " iy=",0
       00          
0405E3             0785*   
0405E3             0786*   ; print udeuhl to screen in hexidecimal format
0405E3             0787*   ; inputs: none
0405E3             0788*   ; outputs: concatenated hexidecimal udeuhl
0405E3             0789*   ; destroys: nothing
0405E3             0790*   dumpUDEUHLHex:
0405E3             0791*   ; store everything in scratch
0405E3 22 42 06 04 0792*       ld (uhl),hl
0405E7 ED 43 45 06 0793*       ld (ubc),bc
       04          
0405EC ED 53 48 06 0794*       ld (ude),de
       04          
0405F1 DD 22 4B 06 0795*       ld (uix),ix
       04          
0405F6 FD 22 4E 06 0796*       ld (uiy),iy
       04          
0405FB F5          0797*       push af
0405FC             0798*   
0405FC             0799*   ; print each register
0405FC             0800*   
0405FC 21 36 06 04 0801*       ld hl,str_udeuhl
040600 CD 07 01 04 0802*       call printString
040604 2A 48 06 04 0803*       ld hl,(ude)
040608 CD 27 01 04 0804*       call printHex24
04060C 3E 2E       0805*       ld a,'.' ; print a dot to separate the values
04060E 5B D7       0806*       rst.lil 10h
040610 2A 42 06 04 0807*       ld hl,(uhl)
040614 CD 27 01 04 0808*       call printHex24
040618 CD 1C 01 04 0809*       call printNewLine
04061C             0810*   
04061C             0811*   ; restore everything
04061C 2A 42 06 04 0812*       ld hl, (uhl)
040620 ED 4B 45 06 0813*       ld bc, (ubc)
       04          
040625 ED 5B 48 06 0814*       ld de, (ude)
       04          
04062A DD 2A 4B 06 0815*       ld ix, (uix)
       04          
04062F FD 2A 4E 06 0816*       ld iy, (uiy)
       04          
040634 F1          0817*       pop af
040635             0818*   ; all done
040635 C9          0819*       ret
040636             0820*   
040636 75 64 65 2E 0821*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04063F             0822*   
04063F             0823*   ; global scratch memory for registers
04063F 00 00 00    0824*   uaf: dl 0
040642 00 00 00    0825*   uhl: dl 0
040645 00 00 00    0826*   ubc: dl 0
040648 00 00 00    0827*   ude: dl 0
04064B 00 00 00    0828*   uix: dl 0
04064E 00 00 00    0829*   uiy: dl 0
040651 00 00 00    0830*   usp: dl 0
040654 00 00 00    0831*   upc: dl 0
040657             0832*   
040657             0833*   ; inputs: whatever is in the flags register
040657             0834*   ; outputs: binary representation of flags
040657             0835*   ;          with a header so we know which is what
040657             0836*   ; destroys: nothing
040657             0837*   ; preserves: everything
040657             0838*   dumpFlags:
040657             0839*   ; first we curse zilog for not giving direct access to flags
040657 F5          0840*       push af ; this is so we can send it back unharmed
040658 F5          0841*       push af ; this is so we can pop it to hl
040659             0842*   ; store everything in scratch
040659 22 42 06 04 0843*       ld (uhl),hl
04065D ED 43 45 06 0844*       ld (ubc),bc
       04          
040662 ED 53 48 06 0845*       ld (ude),de
       04          
040667 DD 22 4B 06 0846*       ld (uix),ix
       04          
04066C FD 22 4E 06 0847*       ld (uiy),iy
       04          
040671             0848*   ; next we print the header
040671 21 9D 06 04 0849*       ld hl,@header
040675 CD 07 01 04 0850*       call printString
040679 E1          0851*       pop hl ; flags are now in l
04067A 7D          0852*       ld a,l ; flags are now in a
04067B CD A8 03 04 0853*       call printBin8
04067F CD 1C 01 04 0854*       call printNewLine
040683             0855*   ; restore everything
040683 2A 42 06 04 0856*       ld hl, (uhl)
040687 ED 4B 45 06 0857*       ld bc, (ubc)
       04          
04068C ED 5B 48 06 0858*       ld de, (ude)
       04          
040691 DD 2A 4B 06 0859*       ld ix, (uix)
       04          
040696 FD 2A 4E 06 0860*       ld iy, (uiy)
       04          
04069B F1          0861*       pop af ; send her home the way she came
04069C C9          0862*       ret
04069D             0863*   ; Bit 7 (S): Sign flag
04069D             0864*   ; Bit 6 (Z): Zero flag
04069D             0865*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04069D             0866*   ; Bit 4 (H): Half Carry flag
04069D             0867*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04069D             0868*   ; Bit 2 (PV): Parity/Overflow flag
04069D             0869*   ; Bit 1 (N): Subtract flag
04069D             0870*   ; Bit 0 (C): Carry flag
04069D 53 5A 78 48 0871*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0406A8             0872*   
0406A8             0873*   ; set all the bits in the flag register
0406A8             0874*   ; more of an academic exercise than anything useful
0406A8             0875*   ; inputs; none
0406A8             0876*   ; outputs; a=0,f=255
0406A8             0877*   ; destroys: flags, hl
0406A8             0878*   ; preserves: a, because why not
0406A8             0879*   setAllFlags:
0406A8 21 FF 00 00 0880*       ld hl,255
0406AC 67          0881*       ld h,a ; four cycles to preserve a is cheap
0406AD E5          0882*       push hl
0406AE F1          0883*       pop af
0406AF C9          0884*       ret
0406B0             0885*   
0406B0             0886*   ; reset all the bits in the flag register
0406B0             0887*   ; unlike its inverse counterpart, this may actually be useful
0406B0             0888*   ; inputs; none
0406B0             0889*   ; outputs; a=0,f=0
0406B0             0890*   ; destroys: flags, hl
0406B0             0891*   ; preserves: a, because why not
0406B0             0892*   resetAllFlags:
0406B0 21 00 00 00 0893*       ld hl,0
0406B4 67          0894*       ld h,a ; four cycles to preserve a is cheap
0406B5 E5          0895*       push hl
0406B6 F1          0896*       pop af
0406B7 C9          0897*       ret
0406B8             0898*   
0406B8             0899*   ; wait until user presses a key
0406B8             0900*   ; inputs: none
0406B8             0901*   ; outputs: ascii code of key pressed in a
0406B8             0902*   ; destroys: af,ix
0406B8             0903*   waitKeypress:
0406B8             0904*       MOSCALL mos_getkey
0406B8 3E 00       0001*M1 			LD	A, function
0406BA 5B CF       0002*M1 			RST.LIL	08h
0406BC C9          0905*       ret
0406BD             0906*   
0406BD             0907*   ; print bytes from an address to the screen in hexidecimal format
0406BD             0908*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406BD             0909*   ; outputs: values of each byte printed to screen separated by spaces
0406BD             0910*   ; destroys: nothing
0406BD             0911*   dumpMemoryHex:
0406BD             0912*   ; save registers to the stack
0406BD C5          0913*       push bc
0406BE E5          0914*       push hl
0406BF F5          0915*       push af
0406C0             0916*   
0406C0             0917*   ; print the address and separator
0406C0 CD 27 01 04 0918*       call printHex24
0406C4 3E 3A       0919*       ld a,':'
0406C6 5B D7       0920*       rst.lil 10h
0406C8 3E 20       0921*       ld a,' '
0406CA 5B D7       0922*       rst.lil 10h
0406CC             0923*   
0406CC             0924*   ; set b to be our loop counter
0406CC F1          0925*       pop af
0406CD 47          0926*       ld b,a
0406CE E1          0927*       pop hl
0406CF E5          0928*       push hl
0406D0 F5          0929*       push af
0406D1             0930*   @loop:
0406D1             0931*   ; print the byte
0406D1 7E          0932*       ld a,(hl)
0406D2 CD 35 01 04 0933*       call printHex8
0406D6             0934*   ; print a space
0406D6 3E 20       0935*       ld a,' '
0406D8 5B D7       0936*       rst.lil 10h
0406DA 23          0937*       inc hl
0406DB 10 F4       0938*       djnz @loop
0406DD CD 1C 01 04 0939*       call printNewLine
0406E1             0940*   
0406E1             0941*   ; restore everything
0406E1 F1          0942*       pop af
0406E2 E1          0943*       pop hl
0406E3 C1          0944*       pop bc
0406E4             0945*   
0406E4             0946*   ; all done
0406E4 C9          0947*       ret
0406E5             0948*   
0406E5             0949*   
0406E5             0950*   ; print bytes from an address to the screen in binary format
0406E5             0951*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0406E5             0952*   ; outputs: values of each byte printed to screen separated by spaces
0406E5             0953*   ; destroys: nothing
0406E5             0954*   dumpMemoryBin:
0406E5             0955*   ; save all registers to the stack
0406E5 F5          0956*       push af
0406E6 C5          0957*       push bc
0406E7 D5          0958*       push de
0406E8 E5          0959*       push hl
0406E9 DD E5       0960*       push ix
0406EB FD E5       0961*       push iy
0406ED             0962*   
0406ED             0963*   ; set b to be our loop counter
0406ED 47          0964*       ld b,a
0406EE             0965*   @loop:
0406EE             0966*   ; print the byte
0406EE 7E          0967*       ld a,(hl)
0406EF E5          0968*       push hl
0406F0 C5          0969*       push bc
0406F1 CD A8 03 04 0970*       call printBin8
0406F5 C1          0971*       pop bc
0406F6             0972*   ; print a space
0406F6 3E 20       0973*       ld a,' '
0406F8 5B D7       0974*       rst.lil 10h
0406FA E1          0975*       pop hl
0406FB 23          0976*       inc hl
0406FC 10 F0       0977*       djnz @loop
0406FE CD 1C 01 04 0978*       call printNewLine
040702             0979*   
040702             0980*   ; restore everything
040702 FD E1       0981*       pop iy
040704 DD E1       0982*       pop ix
040706 E1          0983*       pop hl
040707 D1          0984*       pop de
040708 C1          0985*       pop bc
040709 F1          0986*       pop af
04070A             0987*   ; all done
04070A C9          0988*       ret
04070B             0989*   
04070B             0990*   ; print bytes from an address to the screen in binary format
04070B             0991*   ; with the bits of each byte in reverse order (lsb first)
04070B             0992*   ; inputs: hl = address of first byte to print, a = number of bytes to print
04070B             0993*   ; outputs: values of each byte printed to screen separated by spaces
04070B             0994*   ; destroys: nothing
04070B             0995*   dumpMemoryBinRev:
04070B             0996*   ; save all registers to the stack
04070B F5          0997*       push af
04070C C5          0998*       push bc
04070D D5          0999*       push de
04070E E5          1000*       push hl
04070F DD E5       1001*       push ix
040711 FD E5       1002*       push iy
040713             1003*   
040713             1004*   ; set b to be our loop counter
040713 47          1005*       ld b,a
040714             1006*   @loop:
040714             1007*   ; print the byte
040714 7E          1008*       ld a,(hl)
040715 E5          1009*       push hl
040716 C5          1010*       push bc
040717 CD CD 03 04 1011*       call printBin8Rev
04071B C1          1012*       pop bc
04071C             1013*   ; print a space
04071C 3E 20       1014*       ld a,' '
04071E 5B D7       1015*       rst.lil 10h
040720 E1          1016*       pop hl
040721 23          1017*       inc hl
040722 10 F0       1018*       djnz @loop
040724 CD 1C 01 04 1019*       call printNewLine
040728             1020*   
040728             1021*   ; restore everything
040728 FD E1       1022*       pop iy
04072A DD E1       1023*       pop ix
04072C E1          1024*       pop hl
04072D D1          1025*       pop de
04072E C1          1026*       pop bc
04072F F1          1027*       pop af
040730             1028*   ; all done
040730 C9          1029*       ret
040731             1030*   
040731             1031*   ; clear a block of memory by writing a prescribed value to each byte in the range
040731             1032*   ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
040731             1033*   ; outputs: memory block is cleared
040731             1034*   ; destroys: hl, de
040731             1035*   clear_mem:
040731 0B          1036*       dec bc ; we do this because we will increment de before writing the first byte
040732 77          1037*       ld (hl),a
040733 E5          1038*       push hl
040734 D1          1039*       pop de
040735 13          1040*       inc de ; target address
040736 ED B0       1041*       ldir
040738 C9          1042*       ret
040739             0032        include "arith24.inc"
040739             0001*   ;------------------------------------------------------------------------
040739             0002*   ;  arith24.asm
040739             0003*   ;  24-bit ez80 arithmetic routines
040739             0004*   ;  Copyright (c) Shawn Sijnstra 2024
040739             0005*   ;  MIT license
040739             0006*   ;
040739             0007*   ;  This library was created as a tool to help make ez80
040739             0008*   ;  24-bit native assembly routines for simple mathematical problems
040739             0009*   ;  more widely available.
040739             0010*   ;
040739             0011*   ;------------------------------------------------------------------------
040739             0012*   
040739             0013*   ;------------------------------------------------------------------------
040739             0014*   ; umul24:	HL = HL*DE (unsigned)
040739             0015*   ; Preserves AF, BC, DE
040739             0016*   ; Uses a fast multiply routine.
040739             0017*   ;------------------------------------------------------------------------
040739             0018*   umul24:
040739 D5          0019*   	push	DE
04073A C5          0020*   	push	BC
04073B F5          0021*   	push	AF
04073C E5          0022*   	push	HL
04073D C1          0023*   	pop		BC
04073E 3E 18       0024*       ld	 	a, 24 ; No. of bits to process
040740 21 00 00 00 0025*       ld	 	hl, 0 ; Result
040744             0026*   umul24_lp:
040744 29          0027*   	add	hl,hl
040745 EB          0028*   	ex	de,hl
040746 29          0029*   	add	hl,hl
040747 EB          0030*   	ex	de,hl
040748 30 01       0031*   	jr	nc,umul24_nc
04074A 09          0032*   	add	hl,bc
04074B             0033*   umul24_nc:
04074B 3D          0034*   	dec	a
04074C 20 F6       0035*   	jr	nz,umul24_lp
04074E F1          0036*   	pop	af
04074F C1          0037*   	pop	bc
040750 D1          0038*   	pop	de
040751 C9          0039*   	ret
040752             0040*   
040752             0041*   
040752             0042*   ;------------------------------------------------------------------------
040752             0043*   ; udiv24
040752             0044*   ; Unsigned 24-bit division
040752             0045*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
040752             0046*   ;
040752             0047*   ; Uses AF BC DE HL
040752             0048*   ; Uses Restoring Division algorithm
040752             0049*   ;------------------------------------------------------------------------
040752             0050*   
040752             0051*   udiv24:
040752 E5          0052*   	push	hl
040753 C1          0053*   	pop		bc	;move dividend to BCU
040754 21 00 00 00 0054*   	ld		hl,0	;result
040758 A7          0055*   	and		a
040759 ED 52       0056*   	sbc		hl,de	;test for div by 0
04075B C8          0057*   	ret		z		;it's zero, carry flag is clear
04075C 19          0058*   	add		hl,de	;HL is 0 again
04075D 3E 18       0059*   	ld		a,24	;number of loops through.
04075F             0060*   udiv1:
04075F C5          0061*   	push	bc	;complicated way of doing this because of lack of access to top bits
040760 E3          0062*   	ex		(sp),hl
040761 37          0063*   	scf
040762 ED 6A       0064*   	adc	hl,hl
040764 E3          0065*   	ex	(sp),hl
040765 C1          0066*   	pop	bc		;we now have bc = (bc * 2) + 1
040766             0067*   
040766 ED 6A       0068*   	adc	hl,hl
040768 A7          0069*   	and	a		;is this the bug
040769 ED 52       0070*   	sbc	hl,de
04076B 30 02       0071*   	jr	nc,udiv2
04076D 19          0072*   	add	hl,de
04076E             0073*   ;	dec	c
04076E 0B          0074*   	dec	bc
04076F             0075*   udiv2:
04076F 3D          0076*   	dec	a
040770 20 ED       0077*   	jr	nz,udiv1
040772 37          0078*   	scf		;flag used for div0 error
040773 C5          0079*   	push	bc
040774 D1          0080*   	pop		de	;remainder
040775 C9          0081*   	ret
040776             0082*   
040776             0083*   
040776             0084*   
040776             0085*   ;------------------------------------------------------------------------
040776             0086*   ; neg24
040776             0087*   ; Returns: HLU = 0-HLU
040776             0088*   ; preserves all other registers
040776             0089*   ;------------------------------------------------------------------------
040776             0090*   neg24:
040776 D5          0091*   	push	de
040777 EB          0092*   	ex		de,hl
040778 21 00 00 00 0093*   	ld		hl,0
04077C B7          0094*   	or		a
04077D ED 52       0095*   	sbc		hl,de
04077F D1          0096*   	pop		de
040780 C9          0097*   	ret
040781             0098*   
040781             0099*   ;------------------------------------------------------------------------
040781             0100*   ; or_hlu_deu: 24 bit bitwise OR
040781             0101*   ; Returns: hlu = hlu OR deu
040781             0102*   ; preserves all other registers
040781             0103*   ;------------------------------------------------------------------------
040781             0104*   or_hlu_deu:
040781 22 0A 08 04 0105*   	ld	(bitbuf1),hl
040785 ED 53 0D 08 0106*   	ld	(bitbuf2),de
       04          
04078A D5          0107*   	push	de	;preserve DEU
04078B C5          0108*   	push	bc	;preserve BCU
04078C 06 03       0109*   	ld		b,3
04078E 21 0A 08 04 0110*   	ld	hl,bitbuf1
040792 11 0A 08 04 0111*   	ld	de,bitbuf1
040796             0112*   orloop_24:
040796 1A          0113*   	ld	a,(de)
040797 B6          0114*   	or	(hl)
040798 12          0115*   	ld	(de),a
040799 13          0116*   	inc	de
04079A 23          0117*   	inc	hl
04079B 10 F9       0118*   	djnz	orloop_24
04079D 2A 0D 08 04 0119*   	ld	hl,(bitbuf2)
0407A1 C1          0120*   	pop		bc	;restore BC
0407A2 D1          0121*   	pop		de	;restore DE
0407A3             0122*   
0407A3             0123*   ;------------------------------------------------------------------------
0407A3             0124*   ; and_hlu_deu: 24 bit bitwise AND
0407A3             0125*   ; Returns: hlu = hlu AND deu
0407A3             0126*   ; preserves all other registers
0407A3             0127*   ;------------------------------------------------------------------------
0407A3             0128*   and_hlu_deu:
0407A3 22 0A 08 04 0129*   	ld	(bitbuf1),hl
0407A7 ED 53 0D 08 0130*   	ld	(bitbuf2),de
       04          
0407AC D5          0131*   	push	de	;preserve DEU
0407AD C5          0132*   	push	bc	;preserve BCU
0407AE 06 03       0133*   	ld		b,3
0407B0 21 0A 08 04 0134*   	ld	hl,bitbuf1
0407B4 11 0A 08 04 0135*   	ld	de,bitbuf1
0407B8             0136*   andloop_24:
0407B8 1A          0137*   	ld	a,(de)
0407B9 A6          0138*   	and	(hl)
0407BA 12          0139*   	ld	(de),a
0407BB 13          0140*   	inc	de
0407BC 23          0141*   	inc	hl
0407BD 10 F9       0142*   	djnz	andloop_24
0407BF 2A 0D 08 04 0143*   	ld	hl,(bitbuf2)
0407C3 C1          0144*   	pop		bc	;restore BC
0407C4 D1          0145*   	pop		de	;restore DE
0407C5             0146*   
0407C5             0147*   ;------------------------------------------------------------------------
0407C5             0148*   ; xor_hlu_deu: 24 bit bitwise XOR
0407C5             0149*   ; Returns: hlu = hlu XOR deu
0407C5             0150*   ; preserves all other registers
0407C5             0151*   ;------------------------------------------------------------------------
0407C5             0152*   xor_hlu_deu:
0407C5 22 0A 08 04 0153*   	ld	(bitbuf1),hl
0407C9 ED 53 0D 08 0154*   	ld	(bitbuf2),de
       04          
0407CE D5          0155*   	push	de	;preserve DEU
0407CF C5          0156*   	push	bc	;preserve BCU
0407D0 06 03       0157*   	ld		b,3
0407D2 21 0A 08 04 0158*   	ld	hl,bitbuf1
0407D6 11 0A 08 04 0159*   	ld	de,bitbuf1
0407DA             0160*   xorloop_24:
0407DA 1A          0161*   	ld	a,(de)
0407DB AE          0162*   	xor	(hl)
0407DC 12          0163*   	ld	(de),a
0407DD 13          0164*   	inc	de
0407DE 23          0165*   	inc	hl
0407DF 10 F9       0166*   	djnz	xorloop_24
0407E1 2A 0D 08 04 0167*   	ld	hl,(bitbuf2)
0407E5 C1          0168*   	pop		bc	;restore BC
0407E6 D1          0169*   	pop		de	;restore DE
0407E7             0170*   
0407E7             0171*   ;------------------------------------------------------------------------
0407E7             0172*   ; shl_hlu: 24 bit shift left hlu by a positions
0407E7             0173*   ; Returns: hlu = hlu << a
0407E7             0174*   ;		   a = 0
0407E7             0175*   ; NOTE: only considers a up to 16 bits.
0407E7             0176*   ; preserves all other registers
0407E7             0177*   ; modified by Brandon R. Gates to use a instead of de
0407E7             0178*   ;------------------------------------------------------------------------
0407E7             0179*   shl_hlu:
0407E7 B7          0180*   	or a
0407E8 C8          0181*   	ret		z		;we're done
0407E9 29          0182*   	add		hl,hl	;shift HLU left
0407EA 3D          0183*   	dec a
0407EB 18 FA       0184*   	jr		shl_hlu
0407ED             0185*   
0407ED             0186*   ;------------------------------------------------------------------------
0407ED             0187*   ; shr_hlu: 24 bit shift right hlu by a positions
0407ED             0188*   ; Returns: hlu = hlu >> a
0407ED             0189*   ;		   a = 0
0407ED             0190*   ; NOTE: only considers a up to 16 bits.
0407ED             0191*   ; preserves all other registers
0407ED             0192*   ; modified by Brandon R. Gates to use a instead of de
0407ED             0193*   ;------------------------------------------------------------------------
0407ED             0194*   shr_hlu:
0407ED 22 0A 08 04 0195*   	ld		(bitbuf1),hl
0407F1 21 0C 08 04 0196*   	ld		hl,bitbuf1+2
0407F5             0197*   @shr_loop:
0407F5 B7          0198*   	or a
0407F6 28 0D       0199*   	jr		z,@shr_done		;we're done
0407F8             0200*   ;carry is clear from or instruction
0407F8 CB 1E       0201*   	rr		(hl)
0407FA 2B          0202*   	dec		hl
0407FB CB 1E       0203*   	rr		(hl)
0407FD 2B          0204*   	dec		hl
0407FE CB 1E       0205*   	rr		(hl)
040800 23          0206*   	inc		hl
040801 23          0207*   	inc		hl
040802 3D          0208*   	dec a
040803 18 F0       0209*   	jr		@shr_loop
040805             0210*   @shr_done:
040805 2A 0A 08 04 0211*   	ld		hl,(bitbuf1)	;collect result
040809 C9          0212*   	ret
04080A             0213*   
04080A             0214*   ;------------------------------------------------------------------------
04080A             0215*   ; Scratch area for calculations
04080A             0216*   ;------------------------------------------------------------------------
04080A 00 00 00    0217*   bitbuf1:	dw24	0	;bit manipulation buffer 1
04080D 00 00 00    0218*   bitbuf2:	dw24	0	;bit manipulation buffer 2
040810             0219*   
040810             0220*   ; -----------------------------------------------------------------------
040810             0221*   ; Functions added by Brandon R. Gates
040810             0222*   ; -----------------------------------------------------------------------
040810             0223*   
040810             0224*   ;------------------------------------------------------------------------
040810             0225*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
040810             0226*   ;              Determines the LSB of A and shifts HLU accordingly.
040810             0227*   ;              HLU = HLU >> LSB(A)
040810             0228*   ; Returns: HLU = HLU >> LSB(A)
040810             0229*   ; Destroys: af
040810             0230*   ;------------------------------------------------------------------------
040810             0231*   shr_hlu_log2a:
040810 B7          0232*   	or a    ; check for zero
040811 C8          0233*   	ret z   ; nothing to shift so we're done
040812 C5          0234*   	push 	bc ; preserve
040813 06 00       0235*   	ld		b,0 ; clear b
040815             0236*   @find_bit:
040815 0F          0237*   	rrca ; bit 0 to carry
040816 DA 1F 08 04 0238*   	jp c,@found_bit
04081A 04          0239*   	inc b ; next bit
04081B C3 15 08 04 0240*   	jp @find_bit
04081F             0241*   @found_bit:
04081F 78          0242*   	ld a,b
040820 CD ED 07 04 0243*   	call shr_hlu
040824 C1          0244*   	pop 	bc ; restore
040825 C9          0245*   	ret
040826             0246*   ; end shr_hlu_log2a
040826             0247*   
040826             0248*   ;------------------------------------------------------------------------
040826             0249*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040826             0250*   ;                Determines the LSB of A and shifts HLU accordingly.
040826             0251*   ;                HLU = HLU << LSB(A)
040826             0252*   ; Returns: HLU = HLU << LSB(A)
040826             0253*   ; Destroys: af
040826             0254*   ;------------------------------------------------------------------------
040826             0255*   shl_hlu_log2a:
040826 B7          0256*   	or a    ; check for zero
040827 C8          0257*   	ret z   ; nothing to shift so we're done
040828 C5          0258*   	push 	bc ; preserve
040829 06 00       0259*   	ld		b,0 ; clear b
04082B             0260*   @find_bit:
04082B 0F          0261*   	rrca ; bit 0 to carry
04082C DA 35 08 04 0262*   	jp c,@found_bit
040830 04          0263*   	inc b ; next bit
040831 C3 2B 08 04 0264*   	jp @find_bit
040835             0265*   @found_bit:
040835 78          0266*   	ld a,b
040836 CD E7 07 04 0267*   	call shl_hlu
04083A C1          0268*   	pop 	bc ; restore
04083B C9          0269*   	ret
04083C             0270*   ; end shl_hlu_log2a
04083C             0033        include "maths.inc"
04083C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040900             0002*   
040900             0003*   ;------------------------------------------------------------------------
040900             0004*   ; Scratch area for calculations
040900             0005*   ;------------------------------------------------------------------------
040900 00 00 00    0006*   scratch1: dw24 0 ;bit manipulation buffer 1
040903 00 00 00    0007*   scratch2: dw24 0 ;bit manipulation buffer 2
040906             0008*   
040906             0009*   ; absolute value of hlu
040906             0010*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040906             0011*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040906             0012*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040906             0013*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040906             0014*   ; destroys: a
040906             0015*   hlu_abs:
040906 19          0016*       add hl,de
040907 B7          0017*       or a
040908 ED 52       0018*       sbc hl,de
04090A FA 0F 09 04 0019*       jp m,@is_neg
04090E C9          0020*       ret ; hlu is positive or zero so we're done
04090F             0021*   @is_neg:
04090F F5          0022*       push af ; otherwise, save current flags for return
040910 CD 16 09 04 0023*       call neg_hlu ; negate hlu
040914 F1          0024*       pop af ; get back flags
040915 C9          0025*       ret
040916             0026*   
040916             0027*   ; flip the sign of hlu
040916             0028*   ; inputs: hlu
040916             0029*   ; returns: 0-hlu, flags set appropriately for the result:
040916             0030*   ;         s1,z0,pv0,n1,c1 if result is negative
040916             0031*   ;         s0,z1,pv0,n1,c0 if result is zero
040916             0032*   ;         s0,z0,pv0,n1,c1 if result is positive
040916             0033*   ; destroys a
040916             0034*   neg_hlu:
040916 D5          0035*       push de ; save de
040917 EB          0036*       ex de,hl ; put hl into de
040918 21 00 00 00 0037*       ld hl,0 ; clear hl
04091C AF          0038*       xor a ; clear carry
04091D ED 52       0039*       sbc hl,de ; 0-hlu = -hlu
04091F D1          0040*       pop de ; get de back
040920 C9          0041*       ret ; easy peasy
040921             0042*   
040921             0043*   ;------------------------------------------------------------------------
040921             0044*   ; divide hlu by 2, inspired by above
040921             0045*   ;------------------------------------------------------------------------
040921             0046*   hlu_div2:
040921 22 00 09 04 0047*       ld (scratch1),hl
040925 21 02 09 04 0048*       ld hl,scratch1+2
040929 CB 1E       0049*       rr (hl)
04092B 2B          0050*       dec hl
04092C CB 1E       0051*       rr (hl)
04092E 2B          0052*       dec hl
04092F CB 1E       0053*       rr (hl)
040931 23          0054*       inc hl
040932 23          0055*       inc hl
040933 2A 00 09 04 0056*       ld hl,(scratch1)
040937 C9          0057*       ret
040938             0058*   
040938             0059*   ; this is my little hack to divide by 16
040938             0060*   hlu_div16:
040938 AF          0061*       xor a
040939 29          0062*       add hl,hl
04093A 17          0063*       rla
04093B 29          0064*       add hl,hl
04093C 17          0065*       rla
04093D 29          0066*       add hl,hl
04093E 17          0067*       rla
04093F 29          0068*       add hl,hl
040940 17          0069*       rla
040941 22 4E 09 04 0070*       ld (@scratch),hl
040945 32 51 09 04 0071*       ld (@scratch+3),a
040949 2A 4F 09 04 0072*       ld hl,(@scratch+1)
04094D C9          0073*       ret
04094E             0074*   @scratch: ds 4
040952             0075*   
040952             0076*   ; hlu signed division by 256
040952             0077*   ; returns: hlu / 256
040952             0078*   ; destroys: af
040952             0079*   hlu_sdiv256:
       FF FF FF FF 
040952 AF          0080*       xor a ; assume hl is positive
040953 22 69 09 04 0081*       ld (@buffer),hl
040957             0082*       SIGN_HLU
040957 19          0001*M1     add hl,de ; 1 cycle
040958 B7          0002*M1     or a ; clear flags ; 1 cycle
040959 ED 52       0003*M1     sbc hl,de ; 2 cycles
04095B             0004*M1     ; 4 cycles total
04095B F2 60 09 04 0083*       jp p,@hl_pos
04095F 3D          0084*       dec a
040960             0085*   @hl_pos:
040960 32 6C 09 04 0086*       ld (@buffer+3),a
040964 2A 6A 09 04 0087*       ld hl,(@buffer+1)
040968 C9          0088*       ret
040969             0089*   @buffer: ds 4
04096D             0090*   
04096D             0091*   ; hlu 1 byte right shift, unsigned
04096D             0092*   ; returns: hlu / 256, fractional portion in a
04096D             0093*   ; destroys: af
04096D             0094*   hlu_udiv256:
       FF FF FF FF 
04096D AF          0095*       xor a
04096E 32 7F 09 04 0096*       ld (@buffer+3),a
040972 7D          0097*       ld a,l ; save the fractional portion
040973 22 7C 09 04 0098*       ld (@buffer),hl
040977 2A 7D 09 04 0099*       ld hl,(@buffer+1)
04097B C9          0100*       ret
04097C             0101*   @buffer: ds 4
040980             0102*   
       FF FF FF FF 
040980 00 00 00 00 0103*   add_bcd_arg1: db #00,#00,#00,#00
040984 00 00 00 00 0104*   add_bcd_arg2: db #00,#00,#00,#00
040988             0105*   
040988             0106*   ; set bcd values in a scratch memory address from registers bcde
040988             0107*   ; input: hl; scratch address,bcde; 8-place bcd number
040988             0108*   ; destroys ; hl
040988             0109*   set_bcd:
040988 73          0110*       ld (hl),e
040989 23          0111*       inc hl
04098A 72          0112*       ld (hl),d
04098B 23          0113*       inc hl
04098C 71          0114*       ld (hl),c
04098D 23          0115*       inc hl
04098E 70          0116*       ld (hl),b
04098F C9          0117*       ret
040990             0118*   
040990             0119*   ; load bcd values from a scratch memory address to bcde
040990             0120*   ; input: hl; scratch address
040990             0121*   ; output: bcde; 8-place bcd number
040990             0122*   ; destroys: hl
040990             0123*   get_bcd:
040990 5E          0124*       ld e,(hl)
040991 23          0125*       inc hl
040992 56          0126*       ld d,(hl)
040993 23          0127*       inc hl
040994 4E          0128*       ld c,(hl)
040995 23          0129*       inc hl
040996 46          0130*       ld b,(hl)
040997 C9          0131*       ret
040998             0132*   
040998             0133*   ; BCD addition
040998             0134*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040998             0135*   ;       a is the number of bytes holding each number (number of places/2)
040998             0136*   ; outputs: (hl) + (de) --> (hl)
040998             0137*   ; destroys: a,b,de,hl
040998             0138*   add_bcd:
040998 47          0139*       ld b,a ; loop counter
040999 AF          0140*       xor a ; reset a, clear carry flag
04099A             0141*   adcec:
04099A 1A          0142*       ld a,(de) ; addend to acc
04099B 8E          0143*       adc a,(hl) ; add (hl) to acc
04099C 27          0144*       daa ; adjust result to bcd
04099D 77          0145*       ld (hl),a ; store result
04099E 23          0146*       inc hl ; advance memory pointers
04099F 13          0147*       inc de
0409A0 10 F8       0148*       djnz adcec ; loop until b == 0
0409A2 C9          0149*       ret
0409A3             0150*   
0409A3             0151*   ; BCD subtraction
0409A3             0152*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0409A3             0153*   ;       a is the number of bytes holding each number (number of places/2)
0409A3             0154*   ; outputs: (hl) - (de) --> (hl)
0409A3             0155*   ; destroys: a,b,de,hl
0409A3             0156*   sub_bcd:
0409A3 47          0157*       ld b,a ; loop counter
0409A4 AF          0158*       xor a ; reset a,clear carry flag
0409A5             0159*   subdec:
0409A5 1A          0160*       ld a,(de) ; subtrahend to acc
0409A6 9E          0161*       sbc a,(hl) ; subtract (hl) from acc
0409A7 27          0162*       daa ; adjust result to bcd
0409A8 77          0163*       ld (hl),a ; store result
0409A9 23          0164*       inc hl ; advance memory pointers
0409AA 13          0165*       inc de
0409AB 10 F8       0166*       djnz subdec ; loop until b == 0
0409AD C9          0167*       ret
0409AE             0168*   
0409AE             0169*   ; http://www.z80.info/pseudo-random.txt
0409AE             0170*   rand_8:
0409AE C5          0171*       push bc
0409AF 3A C2 09 04 0172*       ld a,(r_seed)
0409B3 4F          0173*       ld c,a
0409B4             0174*   
0409B4 0F          0175*       rrca ; multiply by 32
0409B5 0F          0176*       rrca
0409B6 0F          0177*       rrca
0409B7 EE 1F       0178*       xor 0x1f
0409B9             0179*   
0409B9 81          0180*       add a,c
0409BA DE FF       0181*       sbc a,255 ; carry
0409BC             0182*   
0409BC 32 C2 09 04 0183*       ld (r_seed),a
0409C0 C1          0184*       pop bc
0409C1 C9          0185*       ret
0409C2 50          0186*   r_seed: defb $50
0409C3             0187*   
0409C3             0188*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
0409C3             0189*   prng24:
0409C3             0190*   ;;Expects ADL mode.
0409C3             0191*   ;;Output: HL
0409C3             0192*   ;;50cc
0409C3             0193*   ;;33 bytes
0409C3             0194*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
0409C3 ED 5B E4 09 0195*       ld de,(seed1)
       04          
0409C8 B7          0196*       or a
0409C9 ED 62       0197*       sbc hl,hl
0409CB 19          0198*       add hl,de
0409CC 29          0199*       add hl,hl
0409CD 29          0200*       add hl,hl
0409CE 2C          0201*       inc l
0409CF 19          0202*       add hl,de
0409D0 22 E4 09 04 0203*       ld (seed1),hl
0409D4 2A E7 09 04 0204*       ld hl,(seed2)
0409D8 29          0205*       add hl,hl
0409D9 9F          0206*       sbc a,a
0409DA E6 1B       0207*       and %00011011
0409DC AD          0208*       xor l
0409DD 6F          0209*       ld l,a
0409DE 22 E7 09 04 0210*       ld (seed2),hl
0409E2 19          0211*       add hl,de
0409E3 C9          0212*       ret
0409E4 00 00 00    0213*   seed1: dl 0
0409E7 00 00 00    0214*   seed2: dl 0
0409EA             0034        include "files.inc"
0409EA             0001*   ; load to onboard 8k sram
0409EA             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
0409EA             0035        include "fixed168.inc"
0409EA FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
040A00             0002*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040A00             0003*   ; uses EZ80 MLT instruction for speed
040A00             0004*   ; operation: UHL * A --> UHL
040A00             0005*   ; destroys: AF, HL
040A00             0006*   smul24x8:
040A00             0007*   ; make hl positive and store sign flag
040A00 CD 06 09 04 0008*       call hlu_abs
040A04 F5          0009*       push af
040A05             0010*   ; do the division
040A05 CD 10 0A 04 0011*       call mul24x8 ; hl = product
040A09             0012*   ; adjust sign of result
040A09 F1          0013*       pop af ; sign de
040A0A F0          0014*       ret p ; hl was positive, nothing to do
040A0B CD 16 09 04 0015*       call neg_hlu ; result is negative
040A0F C9          0016*       ret
040A10             0017*   
040A10             0018*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040A10             0019*   ; uses EZ80 MLT instruction for speed
040A10             0020*   ; operation: UHL * A --> AUHL
040A10             0021*   ; destroys: AF, HL
040A10             0022*   mul24x8:
040A10 D5          0023*       push de ; preserve de
040A11             0024*   ; low byte
040A11 5D          0025*       ld e,l
040A12 57          0026*       ld d,a
040A13 ED 5C       0027*       mlt de
040A15 6B          0028*       ld l,e ; product low byte
040A16 08          0029*       ex af,af' ; save multiplier
040A17 7A          0030*       ld a,d ; carry
040A18 08          0031*       ex af,af' ; save carry, restore multiplier
040A19             0032*   ; high byte
040A19 5C          0033*       ld e,h
040A1A 57          0034*       ld d,a
040A1B ED 5C       0035*       mlt de
040A1D 08          0036*       ex af,af' ; save multiplier, restore carry
040A1E 83          0037*       add a,e ; add carry
040A1F 67          0038*       ld h,a ; product middle byte
040A20 7A          0039*       ld a,d ; carry
040A21 08          0040*       ex af,af' ; save carry, restore multiplier
040A22             0041*   ; upper byte
040A22 22 3D 0A 04 0042*       ld (@scratch),hl ; 7 cycles
040A26 5F          0043*       ld e,a
040A27 3A 3F 0A 04 0044*       ld a,(@scratch+2)
040A2B 57          0045*       ld d,a
040A2C ED 5C       0046*       mlt de
040A2E 08          0047*       ex af,af' ; restore carry
040A2F 8B          0048*       adc a,e ; add carry
040A30 32 3F 0A 04 0049*       ld (@scratch+2),a ; 5 cycles
040A34 2A 3D 0A 04 0050*       ld hl,(@scratch) ; 7 cycles
040A38             0051*   ; highest byte
040A38 3E 00       0052*       ld a,0 ; preserve carry flag
040A3A 8A          0053*       adc a,d ; product highest byte
040A3B D1          0054*       pop de ; restore de
040A3C C9          0055*       ret
040A3D             0056*   @scratch: ds 3
040A40             0057*   
       FF FF FF 
040A40 00 00 00 00 0058*   mul24out: blkb 6,0
       00 00       
040A46             0059*   
040A46             0060*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040A46             0061*   ; operation: UHL * UDE --> mul24out
040A46             0062*   mul24:
040A46 DD E5       0063*       push ix ; preserve
040A48             0064*   ; point to output buffer and clear it
040A48 DD 21 40 0A 0065*       ld ix,mul24out
       04          
040A4D C5          0066*       push bc
040A4E 01 00 00 00 0067*       ld bc,0
040A52 DD 0F 00    0068*       ld (ix),bc
040A55 DD 0F 03    0069*       ld (ix+3),bc
040A58 C1          0070*       pop bc
040A59             0071*   ; STEP 1: UHL * E
040A59 7B          0072*       ld a,e
040A5A E5          0073*       push hl
040A5B CD 10 0A 04 0074*       call mul24x8
040A5F DD 2F 00    0075*       ld (ix+0),hl
040A62 DD 77 03    0076*       ld (ix+3),a
040A65             0077*   ; STEP 2: UHL * D
040A65 E1          0078*       pop hl
040A66 E5          0079*       push hl
040A67 7A          0080*       ld a,d
040A68 CD 10 0A 04 0081*       call mul24x8
040A6C CD 85 0A 04 0082*       call @accumulate
040A70             0083*   ; STEP 3: UHL * DEU
040A70 E1          0084*       pop hl
040A71 ED 53 B5 0A 0085*       ld (@de),de
       04          
040A76 3A B7 0A 04 0086*       ld a,(@de+2)
040A7A CD 10 0A 04 0087*       call mul24x8
040A7E CD 85 0A 04 0088*       call @accumulate
040A82             0089*   ; all done
040A82 DD E1       0090*       pop ix ; restore
040A84 C9          0091*       ret
040A85             0092*   @accumulate:
040A85 DD 23       0093*       inc ix
040A87             0094*   ; highest byte of product to carry
040A87 DD 77 03    0095*       ld (ix+3),a
040A8A             0096*   ; low byte of product
040A8A 7D          0097*       ld a,l
040A8B DD 86 00    0098*       add a,(ix+0)
040A8E DD 77 00    0099*       ld (ix+0),a
040A91             0100*   ; high byte of product
040A91 7C          0101*       ld a,h
040A92 DD 8E 01    0102*       adc a,(ix+1)
040A95 DD 77 01    0103*       ld (ix+1),a
040A98             0104*   ; uppper byte of product
040A98 22 B2 0A 04 0105*       ld (@hl),hl
040A9C 3A B4 0A 04 0106*       ld a,(@hl+2)
040AA0 DD 8E 02    0107*       adc a,(ix+2)
040AA3 DD 77 02    0108*       ld (ix+2),a
040AA6             0109*   ; carry
040AA6 3E 00       0110*       ld a,0 ; preserve flags
040AA8 DD 8E 03    0111*       adc a,(ix+3)
040AAB DD 77 03    0112*       ld (ix+3),a
040AAE C9          0113*       ret
040AAF             0114*   
040AAF 00 00 00    0115*   @ix: dl 0
040AB2 00 00 00    0116*   @hl: dl 0
040AB5 00 00 00    0117*   @de: dl 0
040AB8             0118*   
040AB8             0119*   ; ; UHL * UDE --> UHL (unsigned)
040AB8             0120*   ; umul24:
040AB8             0121*   ;     call mul24
040AB8             0122*   ;     ld hl,(mul24out)
040AB8             0123*   ;     ret
040AB8             0124*   
040AB8             0125*   ; UH.L = UH.L*UD.E (unsigned)
040AB8             0126*   umul168:
040AB8 CD 46 0A 04 0127*       call mul24
040ABC 2A 41 0A 04 0128*       ld hl,(mul24out+1)
040AC0 C9          0129*       ret
040AC1             0130*   
040AC1             0131*   ; UH.L * UD.E --> UH.L (signed)
040AC1             0132*   smul168:
040AC1             0133*   ; make everything positive and store sign flags
040AC1 CD 06 09 04 0134*       call hlu_abs
040AC5 F5          0135*       push af
040AC6 EB          0136*       ex de,hl
040AC7 CD 06 09 04 0137*       call hlu_abs
040ACB EB          0138*       ex de,hl
040ACC F5          0139*       push af
040ACD             0140*   ; do the division
040ACD CD B8 0A 04 0141*       call umul168 ; hl = product
040AD1             0142*   ; adjust sign of result
040AD1 F1          0143*       pop af ; sign de
040AD2 FA DD 0A 04 0144*       jp m,@de_neg
040AD6 F1          0145*       pop af ; sign hl
040AD7 F0          0146*       ret p ; both positive, nothing to do
040AD8             0147*   @hl_neg:
040AD8 CD 16 09 04 0148*       call neg_hlu ; de pos, hl neg, result is negative
040ADC C9          0149*       ret
040ADD             0150*   @de_neg:
040ADD F1          0151*       pop af
040ADE F8          0152*       ret m ; both negative, nothing to do
040ADF CD 16 09 04 0153*       call neg_hlu ; result is negative
040AE3 C9          0154*       ret
040AE4             0155*   
040AE4             0156*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040AE4             0157*   ; perform unsigned division of 16.8 fixed place values
040AE4             0158*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
040AE4             0159*   udiv168:
040AE4             0160*   ; back up divisor
040AE4 ED 53 1B 0B 0161*       ld (@ude),de
       04          
040AE9             0162*   ; get the 16-bit integer part of the quotient
040AE9 CD 52 07 04 0163*       call udiv24 ; de = quotient, hl = remainder
040AED             0164*   ; load quotient to upper three bytes of output
040AED ED 53 22 0B 0165*       ld (div168_out+1),de
       04          
040AF2             0166*   @div256:
040AF2             0167*   ; multiply remainder by 256
040AF2             0168*       hlu_mul256
040AF2 29          0001*M1     add hl,hl ; * 2
040AF3 29          0002*M1     add hl,hl ; * 4
040AF4 29          0003*M1     add hl,hl ; * 8
040AF5 29          0004*M1     add hl,hl ; * 16
040AF6 29          0005*M1     add hl,hl ; * 32
040AF7 29          0006*M1     add hl,hl ; * 64
040AF8 29          0007*M1     add hl,hl ; * 128
040AF9 29          0008*M1     add hl,hl ; * 256
040AFA             0169*   ; skip fractional computation if remainder is zero
040AFA             0170*       SIGN_HLU
040AFA 19          0001*M1     add hl,de ; 1 cycle
040AFB B7          0002*M1     or a ; clear flags ; 1 cycle
040AFC ED 52       0003*M1     sbc hl,de ; 2 cycles
040AFE             0004*M1     ; 4 cycles total
040AFE 20 03       0171*       jr nz,@div_frac
040B00 AF          0172*       xor a
040B01 18 0A       0173*       jr @write_frac
040B03             0174*   ; now divide the shifted remainder by the divisor
040B03             0175*   @div_frac:
040B03 ED 5B 1B 0B 0176*       ld de,(@ude) ; get back divisor
       04          
040B08 CD 52 07 04 0177*       call udiv24 ; de = quotient, hl = remainder
040B0C             0178*   ; load low byte of quotient to low byte of output
040B0C 7B          0179*       ld a,e
040B0D             0180*   @write_frac:
040B0D 32 21 0B 04 0181*       ld (div168_out),a
040B11             0182*   ; load de with return value
040B11 ED 5B 21 0B 0183*       ld de,(div168_out)
       04          
040B16             0184*   ; load a with any overflow
040B16 3A 24 0B 04 0185*       ld a,(div168_out+3)
040B1A C9          0186*       ret ; ud.e is the 16.8 result
040B1B             0187*   @ude: ds 6
040B21             0188*   div168_out: ds 4 ; the extra byte is for overflow
040B25             0189*   
040B25             0190*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040B25             0191*   ; perform signed division of 16.8 fixed place values
040B25             0192*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040B25             0193*   sdiv168:
040B25             0194*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040B25 CD 06 09 04 0195*       call hlu_abs
040B29 F5          0196*       push af
040B2A EB          0197*       ex de,hl
040B2B CD 06 09 04 0198*       call hlu_abs
040B2F EB          0199*       ex de,hl
040B30 F5          0200*       push af
040B31             0201*   ; do the division
040B31 CD E4 0A 04 0202*       call udiv168 ; de = quotient, hl = remainder
040B35             0203*   ; adjust sign of result
040B35 F1          0204*       pop af ; sign de
040B36 FA 43 0B 04 0205*       jp m,@de_neg
040B3A F1          0206*       pop af ; sign hl
040B3B F0          0207*       ret p ; both positive, nothing to do
040B3C             0208*   @hl_neg:
040B3C EB          0209*       ex de,hl ; hl = quotient, de = remainder
040B3D CD 16 09 04 0210*       call neg_hlu ; de pos, hl neg, result is negative
040B41 EB          0211*       ex de,hl ; de = negated quotient, hl = remainder
040B42 C9          0212*       ret
040B43             0213*   @de_neg:
040B43 F1          0214*       pop af
040B44 F8          0215*       ret m ; both negative, nothing to do
040B45 EB          0216*       ex de,hl ; hl = quotient, de = remainder
040B46 CD 16 09 04 0217*       call neg_hlu ; result is negative
040B4A EB          0218*       ex de,hl ; de = negated quotient, hl = remainder
040B4B C9          0219*       ret
040B4C             0220*   
040B4C             0221*   ; convert signed angles from a 360 to 256 degree circle
040B4C             0222*   ; inputs: uh.l is the angle360 in 16.8 fixed format
040B4C             0223*   ; outputs: uh.l is the angle256 in 16.8 fixed format
040B4C             0224*   ; destroys: TODO
040B4C             0225*   deg_360_to_256:
040B4C D5          0226*       push de ; preserve de
040B4D             0227*   ; make angle positive and store sign flag
040B4D CD 06 09 04 0228*       call hlu_abs
040B51 F5          0229*       push af
040B52             0230*   ; multiply by coversion factor of 256/360
040B52 11 B6 00 00 0231*       ld de,0x0000B6 ; 0.711
040B56 CD B8 0A 04 0232*       call umul168 ; uh.l = uh.l * 0.711
040B5A             0233*   ; restore sign flag and adjust output accordingly
040B5A F1          0234*       pop af
040B5B F2 63 0B 04 0235*       jp p,@pos ; positive number
040B5F CD 16 09 04 0236*       call neg_hlu
040B63             0237*   @pos:
040B63             0238*   ; restore de and return uh.l as the result
040B63 D1          0239*       pop de
040B64 C9          0240*       ret
040B65             0241*   
040B65             0242*   ; convert signed angles from a 256 to 360 degree circle
040B65             0243*   ; inputs: uh.l is the angle256 in 16.8 fixed format
040B65             0244*   ; outputs: uh.l is the angle360 in 16.8 fixed format
040B65             0245*   ; destroys: TODO
040B65             0246*   deg_256_to_360:
040B65 D5          0247*       push de ; preserve de
040B66             0248*   ; make angle positive and store sign flag
040B66 CD 06 09 04 0249*       call hlu_abs
040B6A F5          0250*       push af
040B6B             0251*   ; multiply by coversion factor of 360/256
040B6B 11 68 01 00 0252*       ld de,0x000168 ; 1.406
040B6F CD B8 0A 04 0253*       call umul168 ; uh.l = uh.l * 1.406
040B73             0254*   ; restore sign flag and adjust output accordingly
040B73 F1          0255*       pop af
040B74 F2 7C 0B 04 0256*       jp p,@pos ; positive number
040B78 CD 16 09 04 0257*       call neg_hlu
040B7C             0258*   @pos:
040B7C             0259*   ; restore de and return uh.l as the result
040B7C D1          0260*       pop de
040B7D C9          0261*       ret
040B7E             0262*   
040B7E             0263*   ; fixed 16.8 routine
040B7E             0264*   ; cos(uh.l) --> uh.l
040B7E             0265*   ; destroys: f, hl
040B7E             0266*   cos168:
040B7E D5          0267*       push de ; preserve de
040B7F             0268*   ; for cos we simply increment the angle by 90 degrees
040B7F             0269*   ; or 0x004000 in 16.8 degrees256
040B7F             0270*   ; which makes it a sin problem
040B7F 11 00 40 00 0271*       ld de,0x004000
040B83 19          0272*       add hl,de ; modulo 256 happens below
040B84 D1          0273*       pop de ; restore de
040B85             0274*   ; fall through to sin168
040B85             0275*   
040B85             0276*   ; ---------------------
040B85             0277*   ; fixed 16.8 routine
040B85             0278*   ; sin(uh.l) --> uh.l
040B85             0279*   ; destroys: f, hl
040B85             0280*   sin168:
040B85 D5          0281*       push de
040B86             0282*   ; handle negative angles appropriately
040B86 CD 06 09 04 0283*       call hlu_abs
040B8A F2 93 0B 04 0284*       jp p,@F
040B8E 11 00 00 FF 0285*       ld de,-256*256
040B92 19          0286*       add hl,de
040B93             0287*   @@:
040B93 2E 03       0288*       ld l,3 ; multiply by 3 to get our lookup index
040B95 ED 6C       0289*       mlt hl
040B97 11 4B 0E 04 0290*       ld de,sin_lut_168 ; grab the lut address
040B9B 19          0291*       add hl,de ; bump hl by the index
040B9C ED 27       0292*       ld hl,(hl) ; don't try this on a z80!
040B9E D1          0293*       pop de
040B9F C9          0294*       ret
040BA0             0295*   
040BA0             0296*   ; 16.8 fixed inputs / outputs
040BA0             0297*   ; takes: uh.l as angle in degrees 256
040BA0             0298*   ;        ud.e as radius
040BA0             0299*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
040BA0             0300*   ;        displacements from origin (0,0)
040BA0             0301*   ; destroys: everything except indexes
040BA0             0302*   polar_to_cartesian:
040BA0             0303*   ; back up input parameters
040BA0 22 CF 0B 04 0304*       ld (@angle), hl
040BA4 ED 53 D2 0B 0305*       ld (@radius), de
       04          
040BA9             0306*   ; compute dx = sin(uh.l) * ud.e
040BA9 CD 85 0B 04 0307*       call sin168 ; uh.l = sin(uh.l)
040BAD ED 5B D2 0B 0308*       ld de,(@radius)
       04          
040BB2 CD C1 0A 04 0309*       call smul168 ; uh.l = dx
040BB6 E5          0310*       push hl
040BB7             0311*   ; compute dy = -cos(uh.l) * ud.e
040BB7 2A CF 0B 04 0312*       ld hl,(@angle)
040BBB CD 7E 0B 04 0313*       call cos168 ; uh.l = cos(uh.l)
040BBF ED 5B D2 0B 0314*       ld de,(@radius)
       04          
040BC4 CD C1 0A 04 0315*       call smul168 ; uh.l = dy
040BC8 CD 16 09 04 0316*       call neg_hlu ; invert dy for screen coords convention
040BCC EB          0317*       ex de,hl ; de = dy for output
040BCD C1          0318*       pop bc ; bc = dx for output
040BCE             0319*   ; and out
040BCE C9          0320*       ret
040BCF             0321*   @angle: ds 3
040BD2             0322*   @radius: ds 3
040BD5             0323*   
040BD5             0324*   ; 16.8 fixed inputs / outputs
040BD5             0325*   ; inputs: ub.c as dx, ud.e as dy
040BD5             0326*   ;        displacements from origin (0,0)
040BD5             0327*   ; returns: uh.l as angle in degrees 256
040BD5             0328*   ;        ud.e as radius
040BD5             0329*   ; destroys: everything except indexes
040BD5             0330*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040BD5 ED 43 2E 0C 0331*       ld (dx168),bc ; dx argument for distance168
       04          
040BDA ED 53 34 0C 0332*       ld (dy168),de ; dy argument for distance168
       04          
040BDF             0333*   ; compute radius
040BDF CD 3A 0C 04 0334*       call distance168 ; uh.l = radius
040BE3 E5          0335*       push hl ; save radius
040BE4             0336*   ; compute angle
040BE4 ED 4B 2E 0C 0337*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040BE9 ED 5B 34 0C 0338*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040BEE CD 9A 0C 04 0339*       call atan2_168fast ; uh.l = angle
040BF2             0340*   ; return result
040BF2 D1          0341*       pop de ; de = radius (was hl)
040BF3 C9          0342*       ret
040BF4             0343*   ; end cartesian_to_polar
040BF4             0344*   
040BF4             0345*   ; 16.8 fixed inputs / outputs
040BF4             0346*   ; inputs: ub.c as dx, ud.e as dy
040BF4             0347*   ;        displacements from origin (0,0)
040BF4             0348*   ; returns: uh.l as angle in degrees 256
040BF4             0349*   ;        ud.e as radius
040BF4             0350*   ; destroys: everything except indexes
040BF4             0351*   ; note: uses distance168sm which is more accurate for small deltas
040BF4             0352*   cartesian_to_polar_sm:
040BF4 ED 43 2E 0C 0353*       ld (dx168),bc ; dx argument for distance168
       04          
040BF9 ED 53 34 0C 0354*       ld (dy168),de ; dy argument for distance168
       04          
040BFE             0355*   ; compute radius
040BFE CD 75 0C 04 0356*       call distance168sm ; uh.l = radius
040C02 E5          0357*       push hl ; save radius
040C03             0358*   ; compute angle
040C03 ED 4B 2E 0C 0359*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040C08 ED 5B 34 0C 0360*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040C0D CD 9A 0C 04 0361*       call atan2_168fast ; uh.l = angle
040C11             0362*   ; return result
040C11 D1          0363*       pop de ; de = radius (was hl)
040C12 C9          0364*       ret
040C13             0365*   ; end cartesian_to_polar
040C13             0366*   
040C13             0367*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040C13             0368*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040C13             0369*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040C13             0370*   ;         also populates scratch locations dx168 and dy168
040C13             0371*   ; destroys: a,hl,bc,de
040C13             0372*   dxy168:
040C13             0373*   ; compute dx = x1-x0
040C13 AF          0374*       xor a ; clear carry
040C14 DD E5       0375*       push ix ; move ix to hl via the stack
040C16 E1          0376*       pop hl ; hl = x1
040C17 ED 42       0377*       sbc hl,bc ; hl = dx
040C19 22 2E 0C 04 0378*       ld (dx168),hl ; dx to scratch
040C1D             0379*   ; compute dy = y1-y0
040C1D AF          0380*       xor a ; clear carry
040C1E FD E5       0381*       push iy ; move iy to hl via the stack
040C20 E1          0382*       pop hl ; hl = y1
040C21 ED 52       0383*       sbc hl,de ; hl = dy
040C23 22 34 0C 04 0384*       ld (dy168),hl ; dy to scratch
040C27             0385*   ; populate output registers and return
040C27 EB          0386*       ex de,hl ; ud.e = dy
040C28 ED 4B 2E 0C 0387*       ld bc,(dx168) ; ub.c = dx
       04          
040C2D C9          0388*       ret
040C2E 00 00 00 00 0389*   dx168: blkb 6,0
       00 00       
040C34 00 00 00 00 0390*   dy168: blkb 6,0
       00 00       
040C3A             0391*   
040C3A             0392*   ; compute the euclidian distance between two cartesian coordinates
040C3A             0393*   ; using the formula d = sqrt(dx^2+dy^2)
040C3A             0394*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C3A             0395*   ; output; uh.l is the 16.8 fixed format distance
040C3A             0396*   ;         also populates scratch locations dx168 and dy168
040C3A             0397*   ; destroys: a,hl,bc,de
040C3A             0398*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
040C3A             0399*   ;       thus the result will always be an integer, albeit in 16.8 format
040C3A             0400*   distance168:
040C3A             0401*   ; compute dy^2
040C3A 2A 34 0C 04 0402*       ld hl,(dy168)
040C3E CD 06 09 04 0403*       call hlu_abs
040C42             0404*       ; call hlu_udiv256 ; make integer to avoid overflow
040C42             0405*       SRL_UHL ; make integer to avoid overflow
040C42 3B          0001*M1     dec sp ; 1 cycle
040C43 E5          0002*M1     push hl ; 4 cycles
040C44 33          0003*M1     inc sp ; 1 cycle
040C45 E1          0004*M1     pop hl ; 4 cycles
040C46 23          0005*M1     inc hl ; 1 cycle
040C47 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040C49             0007*M1     ; 13 cycles total
040C49 E5          0406*       push hl
040C4A D1          0407*       pop de
040C4B CD 39 07 04 0408*       call umul24 ; hl = dy^2
040C4F E5          0409*       push hl ; save dy^2
040C50             0410*   ; compute dx^2
040C50 2A 2E 0C 04 0411*       ld hl,(dx168)
040C54 CD 06 09 04 0412*       call hlu_abs
040C58             0413*       ; call hlu_udiv256 ; make integer to avoid overflow
040C58             0414*       SRL_UHL ; make integer to avoid overflow
040C58 3B          0001*M1     dec sp ; 1 cycle
040C59 E5          0002*M1     push hl ; 4 cycles
040C5A 33          0003*M1     inc sp ; 1 cycle
040C5B E1          0004*M1     pop hl ; 4 cycles
040C5C 23          0005*M1     inc hl ; 1 cycle
040C5D 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040C5F             0007*M1     ; 13 cycles total
040C5F E5          0415*       push hl
040C60 D1          0416*       pop de
040C61 CD 39 07 04 0417*       call umul24 ; hl = dx^2
040C65             0418*   ; add dx^2 and dy^2
040C65 D1          0419*       pop de ; de = dy^2 (was hl)
040C66 19          0420*       add hl,de ; hl = dx^2 + dy^2
040C67             0421*   ; compute the square root
040C67 CD 65 0D 04 0422*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C6B EB          0423*       ex de,hl ; hl = distance
040C6C             0424*       hlu_mul256 ; convert back to 16.8 fixed
040C6C 29          0001*M1     add hl,hl ; * 2
040C6D 29          0002*M1     add hl,hl ; * 4
040C6E 29          0003*M1     add hl,hl ; * 8
040C6F 29          0004*M1     add hl,hl ; * 16
040C70 29          0005*M1     add hl,hl ; * 32
040C71 29          0006*M1     add hl,hl ; * 64
040C72 29          0007*M1     add hl,hl ; * 128
040C73 29          0008*M1     add hl,hl ; * 256
040C74 C9          0425*       ret
040C75             0426*   
040C75             0427*   ; compute the euclidian distance between two cartesian coordinates
040C75             0428*   ; using the formula d = sqrt(dx^2+dy^2)
040C75             0429*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C75             0430*   ; output; uh.l is the 16.8 fixed format distance
040C75             0431*   ;         also populates scratch locations dx168 and dy168
040C75             0432*   ; destroys: a,hl,bc,de
040C75             0433*   ; NOTE: sm means 'small' because it doesn't round down the deltas
040C75             0434*   ;       making it more accurate for small deltas,
040C75             0435*   ;       but will overflow if used for screen-sized deltas
040C75             0436*   distance168sm:
040C75             0437*   ; compute dy^2
040C75 2A 34 0C 04 0438*       ld hl,(dy168)
040C79 CD 06 09 04 0439*       call hlu_abs
040C7D E5          0440*       push hl
040C7E D1          0441*       pop de
040C7F CD 39 07 04 0442*       call umul24 ; hl = dy^2
040C83 E5          0443*       push hl ; save dy^2
040C84             0444*   ; compute dx^2
040C84 2A 2E 0C 04 0445*       ld hl,(dx168)
040C88 CD 06 09 04 0446*       call hlu_abs
040C8C E5          0447*       push hl
040C8D D1          0448*       pop de
040C8E CD 39 07 04 0449*       call umul24 ; hl = dx^2
040C92             0450*   ; add dx^2 and dy^2
040C92 D1          0451*       pop de ; de = dy^2 (was hl)
040C93 19          0452*       add hl,de ; hl = dx^2 + dy^2
040C94             0453*   ; compute the square root
040C94 CD 65 0D 04 0454*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C98 EB          0455*       ex de,hl ; hl = distance
040C99 C9          0456*       ret
040C9A             0457*   
040C9A             0458*   ; atan2_(ub.c,ud.e) --> uh.l
040C9A             0459*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040C9A             0460*   ;   whether inputs are integers or fractional doesn't matter
040C9A             0461*   ;   so long as the sign bit of the upper byte is correct
040C9A             0462*   ; output: uh.l is the 16.8 fixed angle in degrees 256
040C9A             0463*   ; angles are COMPASS HEADINGS based on
040C9A             0464*   ; screen coordinate conventions,where the y axis is flipped
040C9A             0465*   ; #E0 224      0       32 #20
040C9A             0466*   ;        -x,-y | +x,-y
040C9A             0467*   ; #C0 192------+------ 64 #40
040C9A             0468*   ;        -x,+y | +x,+y
040C9A             0469*   ; #A0 160   128 #80   96 #60
040C9A             0470*   atan2_168fast:
040C9A             0471*   ; get signs and make everything positive
040C9A             0472*   ; get abs(x) and store its original sign
040C9A C5          0473*       push bc
040C9B E1          0474*       pop hl
040C9C CD 06 09 04 0475*       call hlu_abs ; if x was negative this also sets the sign flag
040CA0 E5          0476*       push hl ; store abs(x)
040CA1 C1          0477*       pop bc ; bc = abs(x)
040CA2 F5          0478*       push af ; store sign of x
040CA3             0479*   ; get abs(y) and store its original sign
040CA3 EB          0480*       ex de,hl ; hl = y
040CA4 CD 06 09 04 0481*       call hlu_abs ; if y was negative this also sets the sign flag
040CA8 EB          0482*       ex de,hl ; de = abs(y)
040CA9 F5          0483*       push af ; store sign of y
040CAA             0484*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
040CAA             0485*   ; this ensures that our lookup value is between 0 and 1 inclusive
040CAA AF          0486*       xor a ; clear the carry flag
040CAB D5          0487*       push de
040CAC E1          0488*       pop hl
040CAD ED 42       0489*       sbc hl,bc
040CAF F5          0490*       push af ; save sign of de - bc
040CB0 F2 B9 0C 04 0491*       jp p,@1 ; bc <= de, so we skip ahead
040CB4             0492*   ; otherwise we swap bc and de
040CB4 C5          0493*       push bc
040CB5 E1          0494*       pop hl
040CB6 EB          0495*       ex de,hl
040CB7 E5          0496*       push hl
040CB8 C1          0497*       pop bc
040CB9             0498*   @1:
040CB9             0499*   ; now we're ready to snag our preliminary result
040CB9 C5          0500*       push bc
040CBA E1          0501*       pop hl
040CBB CD 29 0D 04 0502*       call atan_168fast ; uh.l comes back with prelim result
040CBF             0503*   ; now we adjust uh.l based on sign of de - bc
040CBF F1          0504*       pop af
040CC0 F2 CC 0C 04 0505*       jp p,@2 ; bc <= de,so we skip ahead
040CC4 EB          0506*       ex de,hl
040CC5 21 00 40 00 0507*       ld hl,64*256 ; subtract from 64 (90) degrees
040CC9 AF          0508*       xor a ; clear the carry flag
040CCA ED 52       0509*       sbc hl,de
040CCC             0510*   @2:
040CCC             0511*   ; adjust the result based on quadrant
040CCC             0512*   ; #E0 224      0       32 #20
040CCC             0513*   ;        -x,-y | +x,-y
040CCC             0514*   ; #C0 192------+------ 64 #40
040CCC             0515*   ;        -x,+y | +x,+y
040CCC             0516*   ; #A0 160   128 #80   96 #60
040CCC F1          0517*       pop af ; sign of y
040CCD CA 0A 0D 04 0518*       jp z,@y_zero
040CD1 F2 EA 0C 04 0519*       jp p,@y_pos
040CD5             0520*   ; y neg,check x
040CD5 F1          0521*       pop af ; sign of x
040CD6 CA E4 0C 04 0522*       jp z,@y_neg_x_zero
040CDA F2 E9 0C 04 0523*       jp p,@y_neg_x_pos
040CDE             0524*   ; y neg,x neg
040CDE             0525*   ; angle is 128 to 256 (270 to 360)
040CDE             0526*   ; negating the intermediate does the trick
040CDE CD 16 09 04 0527*       call neg_hlu
040CE2 18 31       0528*       jr @zero_hlu
040CE4             0529*   
040CE4             0530*   @y_neg_x_zero:
040CE4             0531*   ; y neg,x zero
040CE4             0532*   ; angle is 0
040CE4 21 00 00 00 0533*       ld hl,0
040CE8 C9          0534*       ret
040CE9             0535*   @y_neg_x_pos:
040CE9             0536*   ; y neg,x pos
040CE9             0537*   ; angle is 0 to 64 (0 to 90)
040CE9             0538*   ; so we're good
040CE9 C9          0539*       ret
040CEA             0540*   
040CEA             0541*   @y_pos:
040CEA F1          0542*       pop af ; sign of x
040CEB CA FA 0C 04 0543*       jp z,@y_pos_x_zero
040CEF F2 FF 0C 04 0544*       jp p,@y_pos_x_pos
040CF3             0545*   ; y pos,x neg
040CF3             0546*   ; angle is 128 to 192 (180-270)
040CF3             0547*   ; so we add 128 to intermediate
040CF3 11 00 80 00 0548*       ld de,128*256
040CF7 19          0549*       add hl,de
040CF8 18 1B       0550*       jr @zero_hlu
040CFA             0551*   @y_pos_x_zero:
040CFA             0552*   ; y pos,x zero
040CFA             0553*   ; angle is 128 (180)
040CFA 21 00 80 00 0554*       ld hl,128*256
040CFE C9          0555*       ret
040CFF             0556*   @y_pos_x_pos:
040CFF             0557*   ; y pos,x pos
040CFF             0558*   ; angle is 64 to 128 (90 to 180)
040CFF             0559*   ; neg the intermediate and add 180 degrees
040CFF CD 16 09 04 0560*       call neg_hlu
040D03 11 00 80 00 0561*       ld de,128*256
040D07 19          0562*       add hl,de
040D08 18 0B       0563*       jr @zero_hlu
040D0A             0564*   
040D0A             0565*   @y_zero:
040D0A F1          0566*       pop af ; sign of x
040D0B FA 10 0D 04 0567*       jp m,@y_zero_x_neg
040D0F             0568*   ; y zero,x pos
040D0F             0569*   ; angle is 64 (90),nothing to do
040D0F C9          0570*       ret
040D10             0571*   @y_zero_x_neg:
040D10             0572*   ; y zero ,x neg
040D10             0573*   ; angle is 192 (270)
040D10 21 00 C0 00 0574*       ld hl,192*256
040D14 C9          0575*       ret
040D15             0576*   @zero_hlu:
040D15 AF          0577*       xor a
040D16 22 23 0D 04 0578*       ld (@scratch),hl
040D1A 32 25 0D 04 0579*       ld (@scratch+2),a
040D1E 2A 23 0D 04 0580*       ld hl,(@scratch)
040D22 C9          0581*       ret
040D23             0582*   @scratch: ds 6
040D29             0583*   
040D29             0584*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040D29             0585*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
040D29             0586*   ; destroys: a,hl,bc,de
040D29             0587*   ; note: only works for angles from 0 to 32 (45) degrees
040D29             0588*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040D29             0589*   atan_168fast:
040D29             0590*   ; because we use compass headings instead of geometric angles
040D29             0591*   ; we compute dx/dy which is 1/tan(theta) in the maths world
040D29             0592*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
040D29 CD E4 0A 04 0593*       call udiv168 ; ud.e = dx/dy
040D2D EB          0594*       ex de,hl ; uh.l = dx/dy
040D2E             0595*   ; test uh.l for 0
040D2E 19          0596*       add hl,de
040D2F B7          0597*       or a
040D30 ED 52       0598*       sbc hl,de
040D32 28 22       0599*       jr z,@is_zero
040D34             0600*   ; test uh.l for 1
040D34 AF          0601*       xor a ; clear carry
040D35 EB          0602*       ex de,hl
040D36 21 00 01 00 0603*       ld hl,1*256 ; 1 in 16.8 fixed format
040D3A ED 52       0604*       sbc hl,de
040D3C 28 13       0605*       jr z,@is_45
040D3E EB          0606*       ex de,hl
040D3F             0607*   ; no special cases so we move on
040D3F             0608*   ; l contains the fractional portion of tan(uh.l)
040D3F             0609*   ; we multiply it by three to get our lookup table index
040D3F 26 03       0610*       ld h,3
040D41 ED 6C       0611*       mlt hl ; index into lut
040D43 11 00 00 00 0612*       ld de,0 ; clear deu
040D47 54          0613*       ld d,h ; copy hl to de
040D48 5D          0614*       ld e,l ; de contains our index
040D49 21 4E 11 04 0615*       ld hl,atan_lut_168 ; grab the lut address
040D4D 19          0616*       add hl,de ; bump hl by the index
040D4E ED 27       0617*       ld hl,(hl) ; don't try this on a z80!
040D50 C9          0618*       ret ; and out
040D51             0619*   @is_45:
040D51 21 00 20 00 0620*       ld hl,32*256
040D55 C9          0621*       ret
040D56             0622*   ; for the case tan(0)
040D56             0623*   @is_zero:
040D56 21 00 00 00 0624*       ld hl,0*256
040D5A C9          0625*       ret
040D5B             0626*   
040D5B             0627*   ; Expects  ADL mode
040D5B             0628*   ; Inputs:  UH.L
040D5B             0629*   ; Outputs: UH.L is the 16.8 square root
040D5B             0630*   ;          UDE is the integer difference inputHL-DE^2
040D5B             0631*   sqrt168:
040D5B CD 65 0D 04 0632*       call sqrt24
040D5F EB          0633*       ex de,hl
040D60 29          0634*       add hl,hl
040D61 29          0635*       add hl,hl
040D62 29          0636*       add hl,hl
040D63 29          0637*       add hl,hl
040D64 C9          0638*       ret
040D65             0639*   
040D65             0640*   ; credit: xeda112358
040D65             0641*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040D65             0642*   sqrt24:
040D65             0643*   ; Expects ADL mode
040D65             0644*   ; Inputs: HL
040D65             0645*   ; Outputs: DE is the integer square root
040D65             0646*   ;  HL is the difference inputHL-DE^2
040D65             0647*   ;  c flag reset
040D65 01 00 00 00 0648*       ld bc,0 ; clear bcu
040D69 11 00 00 00 0649*       ld de,0 ; clear deu
040D6D AF          0650*       xor a
040D6E 45          0651*       ld b,l
040D6F C5          0652*       push bc
040D70 47          0653*       ld b,a
040D71 6F          0654*       ld l,a
040D72             0655*   ; Iteration 1
040D72 29          0656*       add hl,hl
040D73 CB 11       0657*       rl c
040D75 29          0658*       add hl,hl
040D76 CB 11       0659*       rl c
040D78 91          0660*       sub c
040D79 30 04       0661*       jr nc,$+6
040D7B 1C          0662*       inc e
040D7C 1C          0663*       inc e
040D7D 2F          0664*       cpl
040D7E 4F          0665*       ld c,a
040D7F             0666*   ; Iteration 2
040D7F 29          0667*       add hl,hl
040D80 CB 11       0668*       rl c
040D82 29          0669*       add hl,hl
040D83 CB 11       0670*       rl c
040D85 CB 13       0671*       rl e
040D87 7B          0672*       ld a,e
040D88 91          0673*       sub c
040D89 30 04       0674*       jr nc,$+6
040D8B 1C          0675*       inc e
040D8C 1C          0676*       inc e
040D8D 2F          0677*       cpl
040D8E 4F          0678*       ld c,a
040D8F             0679*   ; Iteration 3
040D8F 29          0680*       add hl,hl
040D90 CB 11       0681*       rl c
040D92 29          0682*       add hl,hl
040D93 CB 11       0683*       rl c
040D95 CB 13       0684*       rl e
040D97 7B          0685*       ld a,e
040D98 91          0686*       sub c
040D99 30 04       0687*       jr nc,$+6
040D9B 1C          0688*       inc e
040D9C 1C          0689*       inc e
040D9D 2F          0690*       cpl
040D9E 4F          0691*       ld c,a
040D9F             0692*   ; Iteration 4
040D9F 29          0693*       add hl,hl
040DA0 CB 11       0694*       rl c
040DA2 29          0695*       add hl,hl
040DA3 CB 11       0696*       rl c
040DA5 CB 13       0697*       rl e
040DA7 7B          0698*       ld a,e
040DA8 91          0699*       sub c
040DA9 30 04       0700*       jr nc,$+6
040DAB 1C          0701*       inc e
040DAC 1C          0702*       inc e
040DAD 2F          0703*       cpl
040DAE 4F          0704*       ld c,a
040DAF             0705*   ; Iteration 5
040DAF 29          0706*       add hl,hl
040DB0 CB 11       0707*       rl c
040DB2 29          0708*       add hl,hl
040DB3 CB 11       0709*       rl c
040DB5 CB 13       0710*       rl e
040DB7 7B          0711*       ld a,e
040DB8 91          0712*       sub c
040DB9 30 04       0713*       jr nc,$+6
040DBB 1C          0714*       inc e
040DBC 1C          0715*       inc e
040DBD 2F          0716*       cpl
040DBE 4F          0717*       ld c,a
040DBF             0718*   ; Iteration 6
040DBF 29          0719*       add hl,hl
040DC0 CB 11       0720*       rl c
040DC2 29          0721*       add hl,hl
040DC3 CB 11       0722*       rl c
040DC5 CB 13       0723*       rl e
040DC7 7B          0724*       ld a,e
040DC8 91          0725*       sub c
040DC9 30 04       0726*       jr nc,$+6
040DCB 1C          0727*       inc e
040DCC 1C          0728*       inc e
040DCD 2F          0729*       cpl
040DCE 4F          0730*       ld c,a
040DCF             0731*   ; Iteration 7
040DCF 29          0732*       add hl,hl
040DD0 CB 11       0733*       rl c
040DD2 29          0734*       add hl,hl
040DD3 CB 11       0735*       rl c
040DD5 CB 10       0736*       rl b
040DD7 EB          0737*       ex de,hl
040DD8 29          0738*       add hl,hl
040DD9 E5          0739*       push hl
040DDA ED 42       0740*       sbc hl,bc
040DDC 30 06       0741*       jr nc,$+8
040DDE 7C          0742*       ld a,h
040DDF 2F          0743*       cpl
040DE0 47          0744*       ld b,a
040DE1 7D          0745*       ld a,l
040DE2 2F          0746*       cpl
040DE3 4F          0747*       ld c,a
040DE4 E1          0748*       pop hl
040DE5 30 02       0749*       jr nc,$+4
040DE7 23          0750*       inc hl
040DE8 23          0751*       inc hl
040DE9 EB          0752*       ex de,hl
040DEA             0753*   ; Iteration 8
040DEA 29          0754*       add hl,hl
040DEB 69          0755*       ld l,c
040DEC 60          0756*       ld h,b
040DED ED 6A       0757*       adc hl,hl
040DEF ED 6A       0758*       adc hl,hl
040DF1 EB          0759*       ex de,hl
040DF2 29          0760*       add hl,hl
040DF3 ED 52       0761*       sbc hl,de
040DF5 19          0762*       add hl,de
040DF6 EB          0763*       ex de,hl
040DF7 30 04       0764*       jr nc,$+6
040DF9 ED 52       0765*       sbc hl,de
040DFB 13          0766*       inc de
040DFC 13          0767*       inc de
040DFD             0768*   ; Iteration 9
040DFD F1          0769*       pop af
040DFE 17          0770*       rla
040DFF ED 6A       0771*       adc hl,hl
040E01 17          0772*       rla
040E02 ED 6A       0773*       adc hl,hl
040E04 EB          0774*       ex de,hl
040E05 29          0775*       add hl,hl
040E06 ED 52       0776*       sbc hl,de
040E08 19          0777*       add hl,de
040E09 EB          0778*       ex de,hl
040E0A 30 04       0779*       jr nc,$+6
040E0C ED 52       0780*       sbc hl,de
040E0E 13          0781*       inc de
040E0F 13          0782*       inc de
040E10             0783*   ; Iteration 10
040E10 17          0784*       rla
040E11 ED 6A       0785*       adc hl,hl
040E13 17          0786*       rla
040E14 ED 6A       0787*       adc hl,hl
040E16 EB          0788*       ex de,hl
040E17 29          0789*       add hl,hl
040E18 ED 52       0790*       sbc hl,de
040E1A 19          0791*       add hl,de
040E1B EB          0792*       ex de,hl
040E1C 30 04       0793*       jr nc,$+6
040E1E ED 52       0794*       sbc hl,de
040E20 13          0795*       inc de
040E21 13          0796*       inc de
040E22             0797*   ; Iteration 11
040E22 17          0798*       rla
040E23 ED 6A       0799*       adc hl,hl
040E25 17          0800*       rla
040E26 ED 6A       0801*       adc hl,hl
040E28 EB          0802*       ex de,hl
040E29 29          0803*       add hl,hl
040E2A ED 52       0804*       sbc hl,de
040E2C 19          0805*       add hl,de
040E2D EB          0806*       ex de,hl
040E2E 30 04       0807*       jr nc,$+6
040E30 ED 52       0808*       sbc hl,de
040E32 13          0809*       inc de
040E33 13          0810*       inc de
040E34             0811*   ; Iteration 12
040E34 17          0812*       rla
040E35 ED 6A       0813*       adc hl,hl
040E37 17          0814*       rla
040E38 ED 6A       0815*       adc hl,hl
040E3A EB          0816*       ex de,hl
040E3B 29          0817*       add hl,hl
040E3C ED 52       0818*       sbc hl,de
040E3E 19          0819*       add hl,de
040E3F EB          0820*       ex de,hl
040E40 30 04       0821*       jr nc,$+6
040E42 ED 52       0822*       sbc hl,de
040E44 13          0823*       inc de
040E45 13          0824*       inc de
040E46 CB 1A       0825*       rr d
040E48 CB 1B       0826*       rr e
040E4A C9          0827*       ret
040E4B             0828*   
040E4B             0829*   sin_lut_168:
040E4B 00 00 00    0830*       dl 0x000000 ; 0.000 00, 0.000
040E4E 06 00 00    0831*       dl 0x000006 ; 1.406 01, 0.025
040E51 0C 00 00    0832*       dl 0x00000C ; 2.813 02, 0.049
040E54 12 00 00    0833*       dl 0x000012 ; 4.219 03, 0.074
040E57 19 00 00    0834*       dl 0x000019 ; 5.625 04, 0.098
040E5A 1F 00 00    0835*       dl 0x00001F ; 7.031 05, 0.122
040E5D 25 00 00    0836*       dl 0x000025 ; 8.438 06, 0.147
040E60 2B 00 00    0837*       dl 0x00002B ; 9.844 07, 0.171
040E63 31 00 00    0838*       dl 0x000031 ; 11.250 08, 0.195
040E66 38 00 00    0839*       dl 0x000038 ; 12.656 09, 0.219
040E69 3E 00 00    0840*       dl 0x00003E ; 14.063 0A, 0.243
040E6C 44 00 00    0841*       dl 0x000044 ; 15.469 0B, 0.267
040E6F 4A 00 00    0842*       dl 0x00004A ; 16.875 0C, 0.290
040E72 50 00 00    0843*       dl 0x000050 ; 18.281 0D, 0.314
040E75 56 00 00    0844*       dl 0x000056 ; 19.688 0E, 0.337
040E78 5C 00 00    0845*       dl 0x00005C ; 21.094 0F, 0.360
040E7B 61 00 00    0846*       dl 0x000061 ; 22.500 10, 0.383
040E7E 67 00 00    0847*       dl 0x000067 ; 23.906 11, 0.405
040E81 6D 00 00    0848*       dl 0x00006D ; 25.313 12, 0.428
040E84 73 00 00    0849*       dl 0x000073 ; 26.719 13, 0.450
040E87 78 00 00    0850*       dl 0x000078 ; 28.125 14, 0.471
040E8A 7E 00 00    0851*       dl 0x00007E ; 29.531 15, 0.493
040E8D 83 00 00    0852*       dl 0x000083 ; 30.938 16, 0.514
040E90 88 00 00    0853*       dl 0x000088 ; 32.344 17, 0.535
040E93 8E 00 00    0854*       dl 0x00008E ; 33.750 18, 0.556
040E96 93 00 00    0855*       dl 0x000093 ; 35.156 19, 0.576
040E99 98 00 00    0856*       dl 0x000098 ; 36.563 1A, 0.596
040E9C 9D 00 00    0857*       dl 0x00009D ; 37.969 1B, 0.615
040E9F A2 00 00    0858*       dl 0x0000A2 ; 39.375 1C, 0.634
040EA2 A7 00 00    0859*       dl 0x0000A7 ; 40.781 1D, 0.653
040EA5 AB 00 00    0860*       dl 0x0000AB ; 42.188 1E, 0.672
040EA8 B0 00 00    0861*       dl 0x0000B0 ; 43.594 1F, 0.690
040EAB B5 00 00    0862*       dl 0x0000B5 ; 45.000 20, 0.707
040EAE B9 00 00    0863*       dl 0x0000B9 ; 46.406 21, 0.724
040EB1 BD 00 00    0864*       dl 0x0000BD ; 47.813 22, 0.741
040EB4 C1 00 00    0865*       dl 0x0000C1 ; 49.219 23, 0.757
040EB7 C5 00 00    0866*       dl 0x0000C5 ; 50.625 24, 0.773
040EBA C9 00 00    0867*       dl 0x0000C9 ; 52.031 25, 0.788
040EBD CD 00 00    0868*       dl 0x0000CD ; 53.438 26, 0.803
040EC0 D1 00 00    0869*       dl 0x0000D1 ; 54.844 27, 0.818
040EC3 D4 00 00    0870*       dl 0x0000D4 ; 56.250 28, 0.831
040EC6 D8 00 00    0871*       dl 0x0000D8 ; 57.656 29, 0.845
040EC9 DB 00 00    0872*       dl 0x0000DB ; 59.063 2A, 0.858
040ECC DE 00 00    0873*       dl 0x0000DE ; 60.469 2B, 0.870
040ECF E1 00 00    0874*       dl 0x0000E1 ; 61.875 2C, 0.882
040ED2 E4 00 00    0875*       dl 0x0000E4 ; 63.281 2D, 0.893
040ED5 E7 00 00    0876*       dl 0x0000E7 ; 64.688 2E, 0.904
040ED8 EA 00 00    0877*       dl 0x0000EA ; 66.094 2F, 0.914
040EDB EC 00 00    0878*       dl 0x0000EC ; 67.500 30, 0.924
040EDE EE 00 00    0879*       dl 0x0000EE ; 68.906 31, 0.933
040EE1 F1 00 00    0880*       dl 0x0000F1 ; 70.313 32, 0.942
040EE4 F3 00 00    0881*       dl 0x0000F3 ; 71.719 33, 0.950
040EE7 F4 00 00    0882*       dl 0x0000F4 ; 73.125 34, 0.957
040EEA F6 00 00    0883*       dl 0x0000F6 ; 74.531 35, 0.964
040EED F8 00 00    0884*       dl 0x0000F8 ; 75.938 36, 0.970
040EF0 F9 00 00    0885*       dl 0x0000F9 ; 77.344 37, 0.976
040EF3 FB 00 00    0886*       dl 0x0000FB ; 78.750 38, 0.981
040EF6 FC 00 00    0887*       dl 0x0000FC ; 80.156 39, 0.985
040EF9 FD 00 00    0888*       dl 0x0000FD ; 81.563 3A, 0.989
040EFC FE 00 00    0889*       dl 0x0000FE ; 82.969 3B, 0.992
040EFF FE 00 00    0890*       dl 0x0000FE ; 84.375 3C, 0.995
040F02 FF 00 00    0891*       dl 0x0000FF ; 85.781 3D, 0.997
040F05 FF 00 00    0892*       dl 0x0000FF ; 87.188 3E, 0.999
040F08 FF 00 00    0893*       dl 0x0000FF ; 88.594 3F, 1.000
040F0B 00 01 00    0894*       dl 0x000100 ; 90.000 40, 1.000
040F0E FF 00 00    0895*       dl 0x0000FF ; 91.406 41, 1.000
040F11 FF 00 00    0896*       dl 0x0000FF ; 92.813 42, 0.999
040F14 FF 00 00    0897*       dl 0x0000FF ; 94.219 43, 0.997
040F17 FE 00 00    0898*       dl 0x0000FE ; 95.625 44, 0.995
040F1A FE 00 00    0899*       dl 0x0000FE ; 97.031 45, 0.992
040F1D FD 00 00    0900*       dl 0x0000FD ; 98.438 46, 0.989
040F20 FC 00 00    0901*       dl 0x0000FC ; 99.844 47, 0.985
040F23 FB 00 00    0902*       dl 0x0000FB ; 101.250 48, 0.981
040F26 F9 00 00    0903*       dl 0x0000F9 ; 102.656 49, 0.976
040F29 F8 00 00    0904*       dl 0x0000F8 ; 104.063 4A, 0.970
040F2C F6 00 00    0905*       dl 0x0000F6 ; 105.469 4B, 0.964
040F2F F4 00 00    0906*       dl 0x0000F4 ; 106.875 4C, 0.957
040F32 F3 00 00    0907*       dl 0x0000F3 ; 108.281 4D, 0.950
040F35 F1 00 00    0908*       dl 0x0000F1 ; 109.688 4E, 0.942
040F38 EE 00 00    0909*       dl 0x0000EE ; 111.094 4F, 0.933
040F3B EC 00 00    0910*       dl 0x0000EC ; 112.500 50, 0.924
040F3E EA 00 00    0911*       dl 0x0000EA ; 113.906 51, 0.914
040F41 E7 00 00    0912*       dl 0x0000E7 ; 115.313 52, 0.904
040F44 E4 00 00    0913*       dl 0x0000E4 ; 116.719 53, 0.893
040F47 E1 00 00    0914*       dl 0x0000E1 ; 118.125 54, 0.882
040F4A DE 00 00    0915*       dl 0x0000DE ; 119.531 55, 0.870
040F4D DB 00 00    0916*       dl 0x0000DB ; 120.938 56, 0.858
040F50 D8 00 00    0917*       dl 0x0000D8 ; 122.344 57, 0.845
040F53 D4 00 00    0918*       dl 0x0000D4 ; 123.750 58, 0.831
040F56 D1 00 00    0919*       dl 0x0000D1 ; 125.156 59, 0.818
040F59 CD 00 00    0920*       dl 0x0000CD ; 126.563 5A, 0.803
040F5C C9 00 00    0921*       dl 0x0000C9 ; 127.969 5B, 0.788
040F5F C5 00 00    0922*       dl 0x0000C5 ; 129.375 5C, 0.773
040F62 C1 00 00    0923*       dl 0x0000C1 ; 130.781 5D, 0.757
040F65 BD 00 00    0924*       dl 0x0000BD ; 132.188 5E, 0.741
040F68 B9 00 00    0925*       dl 0x0000B9 ; 133.594 5F, 0.724
040F6B B5 00 00    0926*       dl 0x0000B5 ; 135.000 60, 0.707
040F6E B0 00 00    0927*       dl 0x0000B0 ; 136.406 61, 0.690
040F71 AB 00 00    0928*       dl 0x0000AB ; 137.813 62, 0.672
040F74 A7 00 00    0929*       dl 0x0000A7 ; 139.219 63, 0.653
040F77 A2 00 00    0930*       dl 0x0000A2 ; 140.625 64, 0.634
040F7A 9D 00 00    0931*       dl 0x00009D ; 142.031 65, 0.615
040F7D 98 00 00    0932*       dl 0x000098 ; 143.438 66, 0.596
040F80 93 00 00    0933*       dl 0x000093 ; 144.844 67, 0.576
040F83 8E 00 00    0934*       dl 0x00008E ; 146.250 68, 0.556
040F86 88 00 00    0935*       dl 0x000088 ; 147.656 69, 0.535
040F89 83 00 00    0936*       dl 0x000083 ; 149.063 6A, 0.514
040F8C 7E 00 00    0937*       dl 0x00007E ; 150.469 6B, 0.493
040F8F 78 00 00    0938*       dl 0x000078 ; 151.875 6C, 0.471
040F92 73 00 00    0939*       dl 0x000073 ; 153.281 6D, 0.450
040F95 6D 00 00    0940*       dl 0x00006D ; 154.688 6E, 0.428
040F98 67 00 00    0941*       dl 0x000067 ; 156.094 6F, 0.405
040F9B 61 00 00    0942*       dl 0x000061 ; 157.500 70, 0.383
040F9E 5C 00 00    0943*       dl 0x00005C ; 158.906 71, 0.360
040FA1 56 00 00    0944*       dl 0x000056 ; 160.313 72, 0.337
040FA4 50 00 00    0945*       dl 0x000050 ; 161.719 73, 0.314
040FA7 4A 00 00    0946*       dl 0x00004A ; 163.125 74, 0.290
040FAA 44 00 00    0947*       dl 0x000044 ; 164.531 75, 0.267
040FAD 3E 00 00    0948*       dl 0x00003E ; 165.938 76, 0.243
040FB0 38 00 00    0949*       dl 0x000038 ; 167.344 77, 0.219
040FB3 31 00 00    0950*       dl 0x000031 ; 168.750 78, 0.195
040FB6 2B 00 00    0951*       dl 0x00002B ; 170.156 79, 0.171
040FB9 25 00 00    0952*       dl 0x000025 ; 171.563 7A, 0.147
040FBC 1F 00 00    0953*       dl 0x00001F ; 172.969 7B, 0.122
040FBF 19 00 00    0954*       dl 0x000019 ; 174.375 7C, 0.098
040FC2 12 00 00    0955*       dl 0x000012 ; 175.781 7D, 0.074
040FC5 0C 00 00    0956*       dl 0x00000C ; 177.188 7E, 0.049
040FC8 06 00 00    0957*       dl 0x000006 ; 178.594 7F, 0.025
040FCB 00 00 00    0958*       dl 0x000000 ; 180.000 80, 0.000
040FCE FA FF FF    0959*       dl 0xFFFFFA ; 181.406 81, -0.025
040FD1 F4 FF FF    0960*       dl 0xFFFFF4 ; 182.813 82, -0.049
040FD4 EE FF FF    0961*       dl 0xFFFFEE ; 184.219 83, -0.074
040FD7 E7 FF FF    0962*       dl 0xFFFFE7 ; 185.625 84, -0.098
040FDA E1 FF FF    0963*       dl 0xFFFFE1 ; 187.031 85, -0.122
040FDD DB FF FF    0964*       dl 0xFFFFDB ; 188.438 86, -0.147
040FE0 D5 FF FF    0965*       dl 0xFFFFD5 ; 189.844 87, -0.171
040FE3 CF FF FF    0966*       dl 0xFFFFCF ; 191.250 88, -0.195
040FE6 C8 FF FF    0967*       dl 0xFFFFC8 ; 192.656 89, -0.219
040FE9 C2 FF FF    0968*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040FEC BC FF FF    0969*       dl 0xFFFFBC ; 195.469 8B, -0.267
040FEF B6 FF FF    0970*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040FF2 B0 FF FF    0971*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040FF5 AA FF FF    0972*       dl 0xFFFFAA ; 199.688 8E, -0.337
040FF8 A4 FF FF    0973*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040FFB 9F FF FF    0974*       dl 0xFFFF9F ; 202.500 90, -0.383
040FFE 99 FF FF    0975*       dl 0xFFFF99 ; 203.906 91, -0.405
041001 93 FF FF    0976*       dl 0xFFFF93 ; 205.313 92, -0.428
041004 8D FF FF    0977*       dl 0xFFFF8D ; 206.719 93, -0.450
041007 88 FF FF    0978*       dl 0xFFFF88 ; 208.125 94, -0.471
04100A 82 FF FF    0979*       dl 0xFFFF82 ; 209.531 95, -0.493
04100D 7D FF FF    0980*       dl 0xFFFF7D ; 210.938 96, -0.514
041010 78 FF FF    0981*       dl 0xFFFF78 ; 212.344 97, -0.535
041013 72 FF FF    0982*       dl 0xFFFF72 ; 213.750 98, -0.556
041016 6D FF FF    0983*       dl 0xFFFF6D ; 215.156 99, -0.576
041019 68 FF FF    0984*       dl 0xFFFF68 ; 216.563 9A, -0.596
04101C 63 FF FF    0985*       dl 0xFFFF63 ; 217.969 9B, -0.615
04101F 5E FF FF    0986*       dl 0xFFFF5E ; 219.375 9C, -0.634
041022 59 FF FF    0987*       dl 0xFFFF59 ; 220.781 9D, -0.653
041025 55 FF FF    0988*       dl 0xFFFF55 ; 222.188 9E, -0.672
041028 50 FF FF    0989*       dl 0xFFFF50 ; 223.594 9F, -0.690
04102B 4B FF FF    0990*       dl 0xFFFF4B ; 225.000 A0, -0.707
04102E 47 FF FF    0991*       dl 0xFFFF47 ; 226.406 A1, -0.724
041031 43 FF FF    0992*       dl 0xFFFF43 ; 227.813 A2, -0.741
041034 3F FF FF    0993*       dl 0xFFFF3F ; 229.219 A3, -0.757
041037 3B FF FF    0994*       dl 0xFFFF3B ; 230.625 A4, -0.773
04103A 37 FF FF    0995*       dl 0xFFFF37 ; 232.031 A5, -0.788
04103D 33 FF FF    0996*       dl 0xFFFF33 ; 233.438 A6, -0.803
041040 2F FF FF    0997*       dl 0xFFFF2F ; 234.844 A7, -0.818
041043 2C FF FF    0998*       dl 0xFFFF2C ; 236.250 A8, -0.831
041046 28 FF FF    0999*       dl 0xFFFF28 ; 237.656 A9, -0.845
041049 25 FF FF    1000*       dl 0xFFFF25 ; 239.063 AA, -0.858
04104C 22 FF FF    1001*       dl 0xFFFF22 ; 240.469 AB, -0.870
04104F 1F FF FF    1002*       dl 0xFFFF1F ; 241.875 AC, -0.882
041052 1C FF FF    1003*       dl 0xFFFF1C ; 243.281 AD, -0.893
041055 19 FF FF    1004*       dl 0xFFFF19 ; 244.688 AE, -0.904
041058 16 FF FF    1005*       dl 0xFFFF16 ; 246.094 AF, -0.914
04105B 14 FF FF    1006*       dl 0xFFFF14 ; 247.500 B0, -0.924
04105E 12 FF FF    1007*       dl 0xFFFF12 ; 248.906 B1, -0.933
041061 0F FF FF    1008*       dl 0xFFFF0F ; 250.313 B2, -0.942
041064 0D FF FF    1009*       dl 0xFFFF0D ; 251.719 B3, -0.950
041067 0C FF FF    1010*       dl 0xFFFF0C ; 253.125 B4, -0.957
04106A 0A FF FF    1011*       dl 0xFFFF0A ; 254.531 B5, -0.964
04106D 08 FF FF    1012*       dl 0xFFFF08 ; 255.938 B6, -0.970
041070 07 FF FF    1013*       dl 0xFFFF07 ; 257.344 B7, -0.976
041073 05 FF FF    1014*       dl 0xFFFF05 ; 258.750 B8, -0.981
041076 04 FF FF    1015*       dl 0xFFFF04 ; 260.156 B9, -0.985
041079 03 FF FF    1016*       dl 0xFFFF03 ; 261.563 BA, -0.989
04107C 02 FF FF    1017*       dl 0xFFFF02 ; 262.969 BB, -0.992
04107F 02 FF FF    1018*       dl 0xFFFF02 ; 264.375 BC, -0.995
041082 01 FF FF    1019*       dl 0xFFFF01 ; 265.781 BD, -0.997
041085 01 FF FF    1020*       dl 0xFFFF01 ; 267.188 BE, -0.999
041088 01 FF FF    1021*       dl 0xFFFF01 ; 268.594 BF, -1.000
04108B 00 FF FF    1022*       dl 0xFFFF00 ; 270.000 C0, -1.000
04108E 01 FF FF    1023*       dl 0xFFFF01 ; 271.406 C1, -1.000
041091 01 FF FF    1024*       dl 0xFFFF01 ; 272.813 C2, -0.999
041094 01 FF FF    1025*       dl 0xFFFF01 ; 274.219 C3, -0.997
041097 02 FF FF    1026*       dl 0xFFFF02 ; 275.625 C4, -0.995
04109A 02 FF FF    1027*       dl 0xFFFF02 ; 277.031 C5, -0.992
04109D 03 FF FF    1028*       dl 0xFFFF03 ; 278.438 C6, -0.989
0410A0 04 FF FF    1029*       dl 0xFFFF04 ; 279.844 C7, -0.985
0410A3 05 FF FF    1030*       dl 0xFFFF05 ; 281.250 C8, -0.981
0410A6 07 FF FF    1031*       dl 0xFFFF07 ; 282.656 C9, -0.976
0410A9 08 FF FF    1032*       dl 0xFFFF08 ; 284.063 CA, -0.970
0410AC 0A FF FF    1033*       dl 0xFFFF0A ; 285.469 CB, -0.964
0410AF 0C FF FF    1034*       dl 0xFFFF0C ; 286.875 CC, -0.957
0410B2 0D FF FF    1035*       dl 0xFFFF0D ; 288.281 CD, -0.950
0410B5 0F FF FF    1036*       dl 0xFFFF0F ; 289.688 CE, -0.942
0410B8 12 FF FF    1037*       dl 0xFFFF12 ; 291.094 CF, -0.933
0410BB 14 FF FF    1038*       dl 0xFFFF14 ; 292.500 D0, -0.924
0410BE 16 FF FF    1039*       dl 0xFFFF16 ; 293.906 D1, -0.914
0410C1 19 FF FF    1040*       dl 0xFFFF19 ; 295.313 D2, -0.904
0410C4 1C FF FF    1041*       dl 0xFFFF1C ; 296.719 D3, -0.893
0410C7 1F FF FF    1042*       dl 0xFFFF1F ; 298.125 D4, -0.882
0410CA 22 FF FF    1043*       dl 0xFFFF22 ; 299.531 D5, -0.870
0410CD 25 FF FF    1044*       dl 0xFFFF25 ; 300.938 D6, -0.858
0410D0 28 FF FF    1045*       dl 0xFFFF28 ; 302.344 D7, -0.845
0410D3 2C FF FF    1046*       dl 0xFFFF2C ; 303.750 D8, -0.831
0410D6 2F FF FF    1047*       dl 0xFFFF2F ; 305.156 D9, -0.818
0410D9 33 FF FF    1048*       dl 0xFFFF33 ; 306.563 DA, -0.803
0410DC 37 FF FF    1049*       dl 0xFFFF37 ; 307.969 DB, -0.788
0410DF 3B FF FF    1050*       dl 0xFFFF3B ; 309.375 DC, -0.773
0410E2 3F FF FF    1051*       dl 0xFFFF3F ; 310.781 DD, -0.757
0410E5 43 FF FF    1052*       dl 0xFFFF43 ; 312.188 DE, -0.741
0410E8 47 FF FF    1053*       dl 0xFFFF47 ; 313.594 DF, -0.724
0410EB 4B FF FF    1054*       dl 0xFFFF4B ; 315.000 E0, -0.707
0410EE 50 FF FF    1055*       dl 0xFFFF50 ; 316.406 E1, -0.690
0410F1 55 FF FF    1056*       dl 0xFFFF55 ; 317.813 E2, -0.672
0410F4 59 FF FF    1057*       dl 0xFFFF59 ; 319.219 E3, -0.653
0410F7 5E FF FF    1058*       dl 0xFFFF5E ; 320.625 E4, -0.634
0410FA 63 FF FF    1059*       dl 0xFFFF63 ; 322.031 E5, -0.615
0410FD 68 FF FF    1060*       dl 0xFFFF68 ; 323.438 E6, -0.596
041100 6D FF FF    1061*       dl 0xFFFF6D ; 324.844 E7, -0.576
041103 72 FF FF    1062*       dl 0xFFFF72 ; 326.250 E8, -0.556
041106 78 FF FF    1063*       dl 0xFFFF78 ; 327.656 E9, -0.535
041109 7D FF FF    1064*       dl 0xFFFF7D ; 329.063 EA, -0.514
04110C 82 FF FF    1065*       dl 0xFFFF82 ; 330.469 EB, -0.493
04110F 88 FF FF    1066*       dl 0xFFFF88 ; 331.875 EC, -0.471
041112 8D FF FF    1067*       dl 0xFFFF8D ; 333.281 ED, -0.450
041115 93 FF FF    1068*       dl 0xFFFF93 ; 334.688 EE, -0.428
041118 99 FF FF    1069*       dl 0xFFFF99 ; 336.094 EF, -0.405
04111B 9F FF FF    1070*       dl 0xFFFF9F ; 337.500 F0, -0.383
04111E A4 FF FF    1071*       dl 0xFFFFA4 ; 338.906 F1, -0.360
041121 AA FF FF    1072*       dl 0xFFFFAA ; 340.313 F2, -0.337
041124 B0 FF FF    1073*       dl 0xFFFFB0 ; 341.719 F3, -0.314
041127 B6 FF FF    1074*       dl 0xFFFFB6 ; 343.125 F4, -0.290
04112A BC FF FF    1075*       dl 0xFFFFBC ; 344.531 F5, -0.267
04112D C2 FF FF    1076*       dl 0xFFFFC2 ; 345.938 F6, -0.243
041130 C8 FF FF    1077*       dl 0xFFFFC8 ; 347.344 F7, -0.219
041133 CF FF FF    1078*       dl 0xFFFFCF ; 348.750 F8, -0.195
041136 D5 FF FF    1079*       dl 0xFFFFD5 ; 350.156 F9, -0.171
041139 DB FF FF    1080*       dl 0xFFFFDB ; 351.563 FA, -0.147
04113C E1 FF FF    1081*       dl 0xFFFFE1 ; 352.969 FB, -0.122
04113F E7 FF FF    1082*       dl 0xFFFFE7 ; 354.375 FC, -0.098
041142 EE FF FF    1083*       dl 0xFFFFEE ; 355.781 FD, -0.074
041145 F4 FF FF    1084*       dl 0xFFFFF4 ; 357.188 FE, -0.049
041148 FA FF FF    1085*       dl 0xFFFFFA ; 358.594 FF, -0.025
04114B 00 00 00    1086*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
04114E             1087*   
04114E             1088*   atan_lut_168:
04114E 00 00 00    1089*       dl 0x000000 ; 000000, 0.000
041151 28 00 00    1090*       dl 0x000028 ; 000001, 0.224
041154 51 00 00    1091*       dl 0x000051 ; 000002, 0.448
041157 7A 00 00    1092*       dl 0x00007A ; 000003, 0.671
04115A A2 00 00    1093*       dl 0x0000A2 ; 000004, 0.895
04115D CB 00 00    1094*       dl 0x0000CB ; 000005, 1.119
041160 F4 00 00    1095*       dl 0x0000F4 ; 000006, 1.343
041163 1D 01 00    1096*       dl 0x00011D ; 000007, 1.566
041166 45 01 00    1097*       dl 0x000145 ; 000008, 1.790
041169 6E 01 00    1098*       dl 0x00016E ; 000009, 2.013
04116C 97 01 00    1099*       dl 0x000197 ; 00000A, 2.237
04116F BF 01 00    1100*       dl 0x0001BF ; 00000B, 2.460
041172 E8 01 00    1101*       dl 0x0001E8 ; 00000C, 2.684
041175 11 02 00    1102*       dl 0x000211 ; 00000D, 2.907
041178 39 02 00    1103*       dl 0x000239 ; 00000E, 3.130
04117B 62 02 00    1104*       dl 0x000262 ; 00000F, 3.353
04117E 8B 02 00    1105*       dl 0x00028B ; 000010, 3.576
041181 B3 02 00    1106*       dl 0x0002B3 ; 000011, 3.799
041184 DC 02 00    1107*       dl 0x0002DC ; 000012, 4.022
041187 04 03 00    1108*       dl 0x000304 ; 000013, 4.245
04118A 2D 03 00    1109*       dl 0x00032D ; 000014, 4.467
04118D 55 03 00    1110*       dl 0x000355 ; 000015, 4.690
041190 7E 03 00    1111*       dl 0x00037E ; 000016, 4.912
041193 A6 03 00    1112*       dl 0x0003A6 ; 000017, 5.134
041196 CE 03 00    1113*       dl 0x0003CE ; 000018, 5.356
041199 F7 03 00    1114*       dl 0x0003F7 ; 000019, 5.578
04119C 1F 04 00    1115*       dl 0x00041F ; 00001A, 5.799
04119F 48 04 00    1116*       dl 0x000448 ; 00001B, 6.021
0411A2 70 04 00    1117*       dl 0x000470 ; 00001C, 6.242
0411A5 98 04 00    1118*       dl 0x000498 ; 00001D, 6.463
0411A8 C0 04 00    1119*       dl 0x0004C0 ; 00001E, 6.684
0411AB E8 04 00    1120*       dl 0x0004E8 ; 00001F, 6.905
0411AE 11 05 00    1121*       dl 0x000511 ; 000020, 7.125
0411B1 39 05 00    1122*       dl 0x000539 ; 000021, 7.345
0411B4 61 05 00    1123*       dl 0x000561 ; 000022, 7.565
0411B7 89 05 00    1124*       dl 0x000589 ; 000023, 7.785
0411BA B1 05 00    1125*       dl 0x0005B1 ; 000024, 8.005
0411BD D9 05 00    1126*       dl 0x0005D9 ; 000025, 8.224
0411C0 01 06 00    1127*       dl 0x000601 ; 000026, 8.443
0411C3 28 06 00    1128*       dl 0x000628 ; 000027, 8.662
0411C6 50 06 00    1129*       dl 0x000650 ; 000028, 8.881
0411C9 78 06 00    1130*       dl 0x000678 ; 000029, 9.099
0411CC A0 06 00    1131*       dl 0x0006A0 ; 00002A, 9.317
0411CF C7 06 00    1132*       dl 0x0006C7 ; 00002B, 9.535
0411D2 EF 06 00    1133*       dl 0x0006EF ; 00002C, 9.752
0411D5 16 07 00    1134*       dl 0x000716 ; 00002D, 9.970
0411D8 3E 07 00    1135*       dl 0x00073E ; 00002E, 10.187
0411DB 65 07 00    1136*       dl 0x000765 ; 00002F, 10.403
0411DE 8D 07 00    1137*       dl 0x00078D ; 000030, 10.620
0411E1 B4 07 00    1138*       dl 0x0007B4 ; 000031, 10.836
0411E4 DB 07 00    1139*       dl 0x0007DB ; 000032, 11.051
0411E7 03 08 00    1140*       dl 0x000803 ; 000033, 11.267
0411EA 2A 08 00    1141*       dl 0x00082A ; 000034, 11.482
0411ED 51 08 00    1142*       dl 0x000851 ; 000035, 11.697
0411F0 78 08 00    1143*       dl 0x000878 ; 000036, 11.911
0411F3 9F 08 00    1144*       dl 0x00089F ; 000037, 12.125
0411F6 C6 08 00    1145*       dl 0x0008C6 ; 000038, 12.339
0411F9 ED 08 00    1146*       dl 0x0008ED ; 000039, 12.553
0411FC 13 09 00    1147*       dl 0x000913 ; 00003A, 12.766
0411FF 3A 09 00    1148*       dl 0x00093A ; 00003B, 12.978
041202 61 09 00    1149*       dl 0x000961 ; 00003C, 13.191
041205 87 09 00    1150*       dl 0x000987 ; 00003D, 13.403
041208 AE 09 00    1151*       dl 0x0009AE ; 00003E, 13.614
04120B D4 09 00    1152*       dl 0x0009D4 ; 00003F, 13.825
04120E FB 09 00    1153*       dl 0x0009FB ; 000040, 14.036
041211 21 0A 00    1154*       dl 0x000A21 ; 000041, 14.247
041214 47 0A 00    1155*       dl 0x000A47 ; 000042, 14.457
041217 6D 0A 00    1156*       dl 0x000A6D ; 000043, 14.666
04121A 94 0A 00    1157*       dl 0x000A94 ; 000044, 14.876
04121D BA 0A 00    1158*       dl 0x000ABA ; 000045, 15.085
041220 E0 0A 00    1159*       dl 0x000AE0 ; 000046, 15.293
041223 05 0B 00    1160*       dl 0x000B05 ; 000047, 15.501
041226 2B 0B 00    1161*       dl 0x000B2B ; 000048, 15.709
041229 51 0B 00    1162*       dl 0x000B51 ; 000049, 15.916
04122C 77 0B 00    1163*       dl 0x000B77 ; 00004A, 16.123
04122F 9C 0B 00    1164*       dl 0x000B9C ; 00004B, 16.329
041232 C2 0B 00    1165*       dl 0x000BC2 ; 00004C, 16.535
041235 E7 0B 00    1166*       dl 0x000BE7 ; 00004D, 16.740
041238 0C 0C 00    1167*       dl 0x000C0C ; 00004E, 16.945
04123B 32 0C 00    1168*       dl 0x000C32 ; 00004F, 17.150
04123E 57 0C 00    1169*       dl 0x000C57 ; 000050, 17.354
041241 7C 0C 00    1170*       dl 0x000C7C ; 000051, 17.558
041244 A1 0C 00    1171*       dl 0x000CA1 ; 000052, 17.761
041247 C6 0C 00    1172*       dl 0x000CC6 ; 000053, 17.964
04124A EB 0C 00    1173*       dl 0x000CEB ; 000054, 18.166
04124D 0F 0D 00    1174*       dl 0x000D0F ; 000055, 18.368
041250 34 0D 00    1175*       dl 0x000D34 ; 000056, 18.569
041253 58 0D 00    1176*       dl 0x000D58 ; 000057, 18.770
041256 7D 0D 00    1177*       dl 0x000D7D ; 000058, 18.970
041259 A1 0D 00    1178*       dl 0x000DA1 ; 000059, 19.170
04125C C6 0D 00    1179*       dl 0x000DC6 ; 00005A, 19.370
04125F EA 0D 00    1180*       dl 0x000DEA ; 00005B, 19.569
041262 0E 0E 00    1181*       dl 0x000E0E ; 00005C, 19.767
041265 32 0E 00    1182*       dl 0x000E32 ; 00005D, 19.965
041268 56 0E 00    1183*       dl 0x000E56 ; 00005E, 20.163
04126B 7A 0E 00    1184*       dl 0x000E7A ; 00005F, 20.360
04126E 9E 0E 00    1185*       dl 0x000E9E ; 000060, 20.556
041271 C1 0E 00    1186*       dl 0x000EC1 ; 000061, 20.752
041274 E5 0E 00    1187*       dl 0x000EE5 ; 000062, 20.947
041277 08 0F 00    1188*       dl 0x000F08 ; 000063, 21.142
04127A 2C 0F 00    1189*       dl 0x000F2C ; 000064, 21.337
04127D 4F 0F 00    1190*       dl 0x000F4F ; 000065, 21.531
041280 72 0F 00    1191*       dl 0x000F72 ; 000066, 21.724
041283 95 0F 00    1192*       dl 0x000F95 ; 000067, 21.917
041286 B8 0F 00    1193*       dl 0x000FB8 ; 000068, 22.109
041289 DB 0F 00    1194*       dl 0x000FDB ; 000069, 22.301
04128C FE 0F 00    1195*       dl 0x000FFE ; 00006A, 22.493
04128F 21 10 00    1196*       dl 0x001021 ; 00006B, 22.683
041292 44 10 00    1197*       dl 0x001044 ; 00006C, 22.874
041295 66 10 00    1198*       dl 0x001066 ; 00006D, 23.063
041298 89 10 00    1199*       dl 0x001089 ; 00006E, 23.253
04129B AB 10 00    1200*       dl 0x0010AB ; 00006F, 23.441
04129E CD 10 00    1201*       dl 0x0010CD ; 000070, 23.629
0412A1 EF 10 00    1202*       dl 0x0010EF ; 000071, 23.817
0412A4 11 11 00    1203*       dl 0x001111 ; 000072, 24.004
0412A7 33 11 00    1204*       dl 0x001133 ; 000073, 24.191
0412AA 55 11 00    1205*       dl 0x001155 ; 000074, 24.376
0412AD 77 11 00    1206*       dl 0x001177 ; 000075, 24.562
0412B0 99 11 00    1207*       dl 0x001199 ; 000076, 24.747
0412B3 BA 11 00    1208*       dl 0x0011BA ; 000077, 24.931
0412B6 DC 11 00    1209*       dl 0x0011DC ; 000078, 25.115
0412B9 FD 11 00    1210*       dl 0x0011FD ; 000079, 25.298
0412BC 1E 12 00    1211*       dl 0x00121E ; 00007A, 25.481
0412BF 3F 12 00    1212*       dl 0x00123F ; 00007B, 25.663
0412C2 60 12 00    1213*       dl 0x001260 ; 00007C, 25.844
0412C5 81 12 00    1214*       dl 0x001281 ; 00007D, 26.025
0412C8 A2 12 00    1215*       dl 0x0012A2 ; 00007E, 26.206
0412CB C3 12 00    1216*       dl 0x0012C3 ; 00007F, 26.386
0412CE E4 12 00    1217*       dl 0x0012E4 ; 000080, 26.565
0412D1 04 13 00    1218*       dl 0x001304 ; 000081, 26.744
0412D4 25 13 00    1219*       dl 0x001325 ; 000082, 26.922
0412D7 45 13 00    1220*       dl 0x001345 ; 000083, 27.100
0412DA 65 13 00    1221*       dl 0x001365 ; 000084, 27.277
0412DD 85 13 00    1222*       dl 0x001385 ; 000085, 27.453
0412E0 A5 13 00    1223*       dl 0x0013A5 ; 000086, 27.629
0412E3 C5 13 00    1224*       dl 0x0013C5 ; 000087, 27.805
0412E6 E5 13 00    1225*       dl 0x0013E5 ; 000088, 27.979
0412E9 05 14 00    1226*       dl 0x001405 ; 000089, 28.154
0412EC 24 14 00    1227*       dl 0x001424 ; 00008A, 28.327
0412EF 44 14 00    1228*       dl 0x001444 ; 00008B, 28.501
0412F2 63 14 00    1229*       dl 0x001463 ; 00008C, 28.673
0412F5 83 14 00    1230*       dl 0x001483 ; 00008D, 28.845
0412F8 A2 14 00    1231*       dl 0x0014A2 ; 00008E, 29.017
0412FB C1 14 00    1232*       dl 0x0014C1 ; 00008F, 29.187
0412FE E0 14 00    1233*       dl 0x0014E0 ; 000090, 29.358
041301 FF 14 00    1234*       dl 0x0014FF ; 000091, 29.527
041304 1E 15 00    1235*       dl 0x00151E ; 000092, 29.697
041307 3C 15 00    1236*       dl 0x00153C ; 000093, 29.865
04130A 5B 15 00    1237*       dl 0x00155B ; 000094, 30.033
04130D 79 15 00    1238*       dl 0x001579 ; 000095, 30.201
041310 98 15 00    1239*       dl 0x001598 ; 000096, 30.368
041313 B6 15 00    1240*       dl 0x0015B6 ; 000097, 30.534
041316 D4 15 00    1241*       dl 0x0015D4 ; 000098, 30.700
041319 F2 15 00    1242*       dl 0x0015F2 ; 000099, 30.865
04131C 10 16 00    1243*       dl 0x001610 ; 00009A, 31.030
04131F 2E 16 00    1244*       dl 0x00162E ; 00009B, 31.194
041322 4C 16 00    1245*       dl 0x00164C ; 00009C, 31.357
041325 6A 16 00    1246*       dl 0x00166A ; 00009D, 31.520
041328 87 16 00    1247*       dl 0x001687 ; 00009E, 31.682
04132B A5 16 00    1248*       dl 0x0016A5 ; 00009F, 31.844
04132E C2 16 00    1249*       dl 0x0016C2 ; 0000A0, 32.005
041331 DF 16 00    1250*       dl 0x0016DF ; 0000A1, 32.166
041334 FC 16 00    1251*       dl 0x0016FC ; 0000A2, 32.326
041337 19 17 00    1252*       dl 0x001719 ; 0000A3, 32.486
04133A 36 17 00    1253*       dl 0x001736 ; 0000A4, 32.645
04133D 53 17 00    1254*       dl 0x001753 ; 0000A5, 32.803
041340 70 17 00    1255*       dl 0x001770 ; 0000A6, 32.961
041343 8C 17 00    1256*       dl 0x00178C ; 0000A7, 33.118
041346 A9 17 00    1257*       dl 0x0017A9 ; 0000A8, 33.275
041349 C5 17 00    1258*       dl 0x0017C5 ; 0000A9, 33.431
04134C E2 17 00    1259*       dl 0x0017E2 ; 0000AA, 33.587
04134F FE 17 00    1260*       dl 0x0017FE ; 0000AB, 33.742
041352 1A 18 00    1261*       dl 0x00181A ; 0000AC, 33.896
041355 36 18 00    1262*       dl 0x001836 ; 0000AD, 34.050
041358 52 18 00    1263*       dl 0x001852 ; 0000AE, 34.203
04135B 6E 18 00    1264*       dl 0x00186E ; 0000AF, 34.356
04135E 8A 18 00    1265*       dl 0x00188A ; 0000B0, 34.509
041361 A5 18 00    1266*       dl 0x0018A5 ; 0000B1, 34.660
041364 C1 18 00    1267*       dl 0x0018C1 ; 0000B2, 34.811
041367 DC 18 00    1268*       dl 0x0018DC ; 0000B3, 34.962
04136A F7 18 00    1269*       dl 0x0018F7 ; 0000B4, 35.112
04136D 13 19 00    1270*       dl 0x001913 ; 0000B5, 35.262
041370 2E 19 00    1271*       dl 0x00192E ; 0000B6, 35.410
041373 49 19 00    1272*       dl 0x001949 ; 0000B7, 35.559
041376 64 19 00    1273*       dl 0x001964 ; 0000B8, 35.707
041379 7F 19 00    1274*       dl 0x00197F ; 0000B9, 35.854
04137C 99 19 00    1275*       dl 0x001999 ; 0000BA, 36.001
04137F B4 19 00    1276*       dl 0x0019B4 ; 0000BB, 36.147
041382 CE 19 00    1277*       dl 0x0019CE ; 0000BC, 36.293
041385 E9 19 00    1278*       dl 0x0019E9 ; 0000BD, 36.438
041388 03 1A 00    1279*       dl 0x001A03 ; 0000BE, 36.582
04138B 1D 1A 00    1280*       dl 0x001A1D ; 0000BF, 36.726
04138E 37 1A 00    1281*       dl 0x001A37 ; 0000C0, 36.870
041391 51 1A 00    1282*       dl 0x001A51 ; 0000C1, 37.013
041394 6B 1A 00    1283*       dl 0x001A6B ; 0000C2, 37.155
041397 85 1A 00    1284*       dl 0x001A85 ; 0000C3, 37.297
04139A 9F 1A 00    1285*       dl 0x001A9F ; 0000C4, 37.439
04139D B9 1A 00    1286*       dl 0x001AB9 ; 0000C5, 37.579
0413A0 D2 1A 00    1287*       dl 0x001AD2 ; 0000C6, 37.720
0413A3 EC 1A 00    1288*       dl 0x001AEC ; 0000C7, 37.859
0413A6 05 1B 00    1289*       dl 0x001B05 ; 0000C8, 37.999
0413A9 1E 1B 00    1290*       dl 0x001B1E ; 0000C9, 38.137
0413AC 37 1B 00    1291*       dl 0x001B37 ; 0000CA, 38.276
0413AF 50 1B 00    1292*       dl 0x001B50 ; 0000CB, 38.413
0413B2 69 1B 00    1293*       dl 0x001B69 ; 0000CC, 38.550
0413B5 82 1B 00    1294*       dl 0x001B82 ; 0000CD, 38.687
0413B8 9B 1B 00    1295*       dl 0x001B9B ; 0000CE, 38.823
0413BB B4 1B 00    1296*       dl 0x001BB4 ; 0000CF, 38.959
0413BE CC 1B 00    1297*       dl 0x001BCC ; 0000D0, 39.094
0413C1 E5 1B 00    1298*       dl 0x001BE5 ; 0000D1, 39.228
0413C4 FD 1B 00    1299*       dl 0x001BFD ; 0000D2, 39.362
0413C7 16 1C 00    1300*       dl 0x001C16 ; 0000D3, 39.496
0413CA 2E 1C 00    1301*       dl 0x001C2E ; 0000D4, 39.629
0413CD 46 1C 00    1302*       dl 0x001C46 ; 0000D5, 39.762
0413D0 5E 1C 00    1303*       dl 0x001C5E ; 0000D6, 39.894
0413D3 76 1C 00    1304*       dl 0x001C76 ; 0000D7, 40.025
0413D6 8E 1C 00    1305*       dl 0x001C8E ; 0000D8, 40.156
0413D9 A5 1C 00    1306*       dl 0x001CA5 ; 0000D9, 40.286
0413DC BD 1C 00    1307*       dl 0x001CBD ; 0000DA, 40.416
0413DF D5 1C 00    1308*       dl 0x001CD5 ; 0000DB, 40.546
0413E2 EC 1C 00    1309*       dl 0x001CEC ; 0000DC, 40.675
0413E5 04 1D 00    1310*       dl 0x001D04 ; 0000DD, 40.803
0413E8 1B 1D 00    1311*       dl 0x001D1B ; 0000DE, 40.931
0413EB 32 1D 00    1312*       dl 0x001D32 ; 0000DF, 41.059
0413EE 49 1D 00    1313*       dl 0x001D49 ; 0000E0, 41.186
0413F1 60 1D 00    1314*       dl 0x001D60 ; 0000E1, 41.312
0413F4 77 1D 00    1315*       dl 0x001D77 ; 0000E2, 41.438
0413F7 8E 1D 00    1316*       dl 0x001D8E ; 0000E3, 41.564
0413FA A5 1D 00    1317*       dl 0x001DA5 ; 0000E4, 41.689
0413FD BB 1D 00    1318*       dl 0x001DBB ; 0000E5, 41.814
041400 D2 1D 00    1319*       dl 0x001DD2 ; 0000E6, 41.938
041403 E9 1D 00    1320*       dl 0x001DE9 ; 0000E7, 42.061
041406 FF 1D 00    1321*       dl 0x001DFF ; 0000E8, 42.184
041409 15 1E 00    1322*       dl 0x001E15 ; 0000E9, 42.307
04140C 2C 1E 00    1323*       dl 0x001E2C ; 0000EA, 42.429
04140F 42 1E 00    1324*       dl 0x001E42 ; 0000EB, 42.551
041412 58 1E 00    1325*       dl 0x001E58 ; 0000EC, 42.672
041415 6E 1E 00    1326*       dl 0x001E6E ; 0000ED, 42.793
041418 84 1E 00    1327*       dl 0x001E84 ; 0000EE, 42.913
04141B 99 1E 00    1328*       dl 0x001E99 ; 0000EF, 43.033
04141E AF 1E 00    1329*       dl 0x001EAF ; 0000F0, 43.152
041421 C5 1E 00    1330*       dl 0x001EC5 ; 0000F1, 43.271
041424 DA 1E 00    1331*       dl 0x001EDA ; 0000F2, 43.390
041427 F0 1E 00    1332*       dl 0x001EF0 ; 0000F3, 43.508
04142A 05 1F 00    1333*       dl 0x001F05 ; 0000F4, 43.625
04142D 1B 1F 00    1334*       dl 0x001F1B ; 0000F5, 43.742
041430 30 1F 00    1335*       dl 0x001F30 ; 0000F6, 43.859
041433 45 1F 00    1336*       dl 0x001F45 ; 0000F7, 43.975
041436 5A 1F 00    1337*       dl 0x001F5A ; 0000F8, 44.091
041439 6F 1F 00    1338*       dl 0x001F6F ; 0000F9, 44.206
04143C 84 1F 00    1339*       dl 0x001F84 ; 0000FA, 44.321
04143F 99 1F 00    1340*       dl 0x001F99 ; 0000FB, 44.435
041442 AD 1F 00    1341*       dl 0x001FAD ; 0000FC, 44.549
041445 C2 1F 00    1342*       dl 0x001FC2 ; 0000FD, 44.662
041448 D7 1F 00    1343*       dl 0x001FD7 ; 0000FE, 44.775
04144B EB 1F 00    1344*       dl 0x001FEB ; 0000FF, 44.888
04144E 00 20 00    1345*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
041451             0036        include "fonts.inc"
041451 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041500             0002*   
041500             0003*   fonts_load:
041500 DD 21 00 2B 0004*       ld ix,font_list ; pointer to font list lookup
       04          
041505 06 12       0005*       ld b,num_fonts ; loop counter
041507             0006*   
041507             0007*   @load_loop:
041507 C5          0008*       push bc ; save loop counter
041508             0009*   
041508             0010*   ; load font into a buffer
041508 DD 27 06    0011*       ld hl,(ix+font_list_bufferId)
04150B DD 31 09    0012*       ld iy,(ix+font_list_filename)
04150E CD 78 1C 04 0013*       call vdu_load_buffer_from_file
041512             0014*   
041512             0015*   ; create font from buffer
041512 DD 27 06    0016*       ld hl,(ix+font_list_bufferId)
041515 DD 5E 00    0017*       ld e,(ix+font_list_width)
041518 DD 56 03    0018*       ld d,(ix+font_list_height)
04151B 3E 00       0019*       ld a,0 ; flags
04151D CD 1A 1E 04 0020*       call vdu_font_create
041521             0021*   
041521             0022*   ; select font
041521 DD 27 06    0023*       ld hl,(ix+font_list_bufferId)
041524 3E 01       0024*       ld a,1 ; flags
041526 CD 00 1E 04 0025*       call vdu_font_select
04152A             0026*   
04152A             0027*   ; ; debug print filename
04152A             0028*   ;     call printNewLine
04152A             0029*   ;     ld hl,(ix+font_list_filename)
04152A             0030*   ;     call printString
04152A             0031*   
04152A             0032*   ; advance font_list pointer to next record
04152A ED 32 0C    0033*       lea ix,ix+font_list_record_size
04152D             0034*   
04152D             0035*   ; restore loop counter
04152D C1          0036*       pop bc
04152E 10 D7       0037*       djnz @load_loop
041530             0038*   
041530             0039*   ; all done
041530 C9          0040*       ret
041531             0037        include "images.inc"
041531 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041600             0002*   
041600             0003*   image_type: equ 0
041600             0004*   image_width: equ image_type+3
041600             0005*   image_height: equ image_width+3
041600             0006*   image_filesize: equ image_height+3
041600             0007*   image_filename: equ image_filesize+3
041600             0008*   image_bufferId: equ image_filename+3
041600             0009*   image_record_size: equ image_bufferId+3
041600             0010*   
041600 00 00 00    0011*   cur_image_list: dl 0
041603 00 00 00    0012*   cur_filename: dl 0
041606 00 00 00    0013*   cur_buffer_id: dl 0
041609             0014*   
041609             0015*   img_load_init:
041609             0016*   ; initialize logo's position parameters
041609 21 00 00 00 0017*       ld hl,0
04160D 22 BE 16 04 0018*       ld (logo_xvel),hl
041611 22 C1 16 04 0019*       ld (logo_xpos),hl
041615             0020*   ; begin 16.8 maths to determine logo's y position and velocity
041615 21 00 E0 00 0021*       ld hl,224*256
041619 22 C7 16 04 0022*       ld (logo_ypos),hl
04161D EB          0023*       ex de,hl
04161E 21 00 28 FF 0024*       ld hl,-240+24*256
041622             0025*       ; ld de,-256*[sprites_num_images+tiles_dg_num_images+ui_num_images]
041622 11 00 82 01 0026*       ld de,[sprites_num_images+tiles_dg_num_images+ui_num_images]*256
041626 CD 25 0B 04 0027*       call sdiv168 ; ud.e = distance / num images = y velocity
04162A ED 53 C4 16 0028*       ld (logo_yvel),de
       04          
04162F             0029*   ; all done
04162F C9          0030*       ret
041630             0031*   
041630             0032*   ; inputs: bc is the number of images to load, cur_image_list set
041630             0033*   img_load_main:
041630             0034*   ; back up loop counter
041630 C5          0035*       push bc
041631             0036*   
041631             0037*   ; load the next image
041631 CD 68 16 04 0038*       call load_next_image
041635             0039*   
041635             0040*   ; plot the background
041635 CD 4B 1A 04 0041*       call vdu_cls
041639 21 29 00 00 0042*       ld hl,BUF_SPLASH_BG
04163D CD 38 1B 04 0043*       call vdu_buff_select
041641 01 00 00 00 0044*       ld bc,0
041645 11 00 00 00 0045*       ld de,0
041649 CD 20 1F 04 0046*       call vdu_plot_bmp
04164D             0047*   
04164D             0048*   ; ; draw the most recently loaded image
04164D             0049*   ; 	ld hl,(cur_buffer_id)
04164D             0050*   ; 	call vdu_buff_select
04164D             0051*   ; 	ld bc,0
04164D             0052*   ; 	ld de,0
04164D             0053*   ; 	call vdu_plot_bmp
04164D             0054*   
04164D             0055*   ; move logo
04164D CD 99 16 04 0056*       call move_logo
041651             0057*   
041651             0058*   ; print current filename
041651 2A 03 16 04 0059*       ld hl,(cur_filename)
041655 CD 07 01 04 0060*       call printString
041659             0061*   
041659             0062*   ; flip the framebuffer
041659             0063*       ; call vdu_flip
041659             0064*   
041659             0065*   ; decrement loop counter
041659 C1          0066*       pop bc
04165A 0B          0067*       dec bc
04165B 79          0068*       ld a,c
04165C B7          0069*       or a
04165D C2 30 16 04 0070*       jp nz,img_load_main
041661 78          0071*       ld a,b
041662 B7          0072*       or a
041663 C2 30 16 04 0073*       jp nz,img_load_main
041667 C9          0074*       ret
041668             0075*   
041668             0076*   load_next_image:
041668 FD 2A 00 16 0077*       ld iy,(cur_image_list)
       04          
04166D FD E5       0078*       push iy
04166F FD 7E 00    0079*       ld a,(iy+image_type) ; get image type
041672 FD 07 03    0080*       ld bc,(iy+image_width) ; get image width
041675 FD 17 06    0081*       ld de,(iy+image_height) ; get image height
041678 FD 31 09    0082*       ld ix,(iy+image_filesize) ; get image file size
04167B FD 27 0F    0083*       ld hl,(iy+image_bufferId) ; get image bufferId
04167E 22 06 16 04 0084*       ld (cur_buffer_id),hl
041682 FD 37 0C    0085*       ld iy,(iy+image_filename) ; get image filename
041685 FD 22 03 16 0086*       ld (cur_filename),iy
       04          
04168A CD 56 1C 04 0087*       call vdu_load_img
04168E FD E1       0088*       pop iy
041690 ED 33 12    0089*       lea iy,iy+image_record_size
041693 FD 22 00 16 0090*       ld (cur_image_list),iy
       04          
041698 C9          0091*       ret
041699             0092*   
041699             0093*   move_logo:
041699             0094*   ; activate logo bitmap
041699 21 2A 00 00 0095*       ld hl, BUF_SPLASH_LOGO
04169D CD 38 1B 04 0096*       call vdu_buff_select
0416A1             0097*   ; update position based on velocity parameters
0416A1 2A C7 16 04 0098*       ld hl,(logo_ypos)
0416A5 ED 5B C4 16 0099*       ld de,(logo_yvel)
       04          
0416AA 19          0100*       add hl,de
0416AB 22 C7 16 04 0101*       ld (logo_ypos),hl
0416AF             0102*   ; draw logo
0416AF ED 4B C1 16 0103*       ld bc,(logo_xpos)
       04          
0416B4 ED 5B C7 16 0104*       ld de,(logo_ypos)
       04          
0416B9 CD 3C 1F 04 0105*       call vdu_plot_bmp168
0416BD C9          0106*       ret
0416BE             0107*   
0416BE 00 00 00    0108*   logo_xvel: dl 0
0416C1 00 00 00    0109*   logo_xpos: dl 0
0416C4             0110*   
0416C4 00 00 00    0111*   logo_yvel: dl 0
0416C7 00 00 00    0112*   logo_ypos: dl 0
0416CA             0113*   
0416CA             0114*   load_ui_images:
0416CA             0115*   ; initialize image loading variables
0416CA 21 CC 66 04 0116*       ld hl,ui_image_list
0416CE 22 00 16 04 0117*       ld (cur_image_list),hl
0416D2             0118*   ; load images
0416D2 06 2B       0119*       ld b,ui_num_images
0416D4             0120*   @loop:
0416D4 C5          0121*       push bc
0416D5 CD 68 16 04 0122*       call load_next_image
0416D9 C1          0123*       pop bc
0416DA 10 F8       0124*       djnz @loop
0416DC C9          0125*       ret
0416DD             0126*   ; end load_ui_images
0416DD             0127*   
0416DD             0128*   load_sprite_images:
0416DD             0129*   ; initialize image loading variables
0416DD 21 AD 4B 04 0130*       ld hl,sprites_image_list
0416E1 22 00 16 04 0131*       ld (cur_image_list),hl
0416E5 01 9C 00 00 0132*       ld bc,sprites_num_images
0416E9             0133*   ; load images
0416E9 CD 30 16 04 0134*       call img_load_main
0416ED C9          0135*       ret
0416EE             0136*   ; end load_sprite_images
0416EE             0137*   
0416EE             0138*   load_tilesets:
0416EE             0139*   ; initialize image loading variables
0416EE 21 30 2F 04 0140*       ld hl,tiles_dg_image_list
0416F2 22 00 16 04 0141*       ld (cur_image_list),hl
0416F6 01 BB 00 00 0142*       ld bc,tiles_dg_num_images
0416FA             0143*   ; load images
0416FA CD 30 16 04 0144*       call img_load_main
0416FE C9          0145*       ret
0416FF             0146*   ; end load_tilesets
0416FF             0147*   
0416FF             0148*   load_backgrounds:
0416FF             0149*   ; initialize image loading variables
0416FF 21 00 2E 04 0150*       ld hl,bg_image_list
041703 22 00 16 04 0151*       ld (cur_image_list),hl
041707 01 08 00 00 0152*       ld bc,bg_num_images
04170B             0153*   ; load images
04170B CD 30 16 04 0154*       call img_load_main
04170F C9          0155*       ret
041710             0156*   ; end load_backgrounds
041710             0157*   
041710             0158*   ; ; initialize image loading variables
041710             0159*   ;     ld hl,tiles_xevious_image_list
041710             0160*   ;     ld (cur_image_list),hl
041710             0161*   ;     ld bc,tiles_xevious_num_images
041710             0162*   ; ; load images
041710             0163*   ;     call img_load_main
041710 C9          0164*       ret
041711             0038        include "timer.inc"
041711 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041800             0002*   
041800             0003*   ; Table 32. Timer Control Registers
041800             0004*   ; this constant is the base address of the timer control registers
041800             0005*   ; each timer takes three bytes:
041800             0006*   ;   0: control register
041800             0007*   ;   1: low byte of timer reset value
041800             0008*   ;   2: high byte of timer reset value
041800             0009*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
041800             0010*   ; which correctly force the high and upper bytes of the address bus to zero
041800             0011*   TMR_CTL:     equ 80h
041800             0012*   
041800             0013*   ; Timer Control Register Bit Definitions
041800             0014*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
041800             0015*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
041800             0016*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
041800             0017*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
041800             0018*                               ; the TMRx_CTL register is read.
041800             0019*   
041800             0020*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
041800             0021*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
041800             0022*   
041800             0023*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
041800             0024*                               ;  0,and counting stops when the end-of-count value is reached.
041800             0025*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
041800             0026*                               ; written to the counter when the end-of-count value is reached.
041800             0027*   
041800             0028*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
041800             0029*   CLK_DIV_256:  equ %00001100 ;
041800             0030*   CLK_DIV_64:   equ %00001000 ;
041800             0031*   CLK_DIV_16:   equ %00000100 ;
041800             0032*   CLK_DIV_4:    equ %00000000 ;
041800             0033*   
041800             0034*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
041800             0035*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
041800             0036*                               ; When a 1 is written to this bit,the values in the reload registers
041800             0037*                               ;  are loaded into the downcounter when the timer restarts. The
041800             0038*                               ; programmer must ensure that this bit is set to 1 each time
041800             0039*                               ; SINGLE-PASS mode is used.
041800             0040*   
041800             0041*   ; disable/enable the programmable reload timer
041800             0042*   PRT_EN_0:     equ %00000000 ;
041800             0043*   PRT_EN_1:     equ %00000001 ;
041800             0044*   
041800             0045*   ; Table 37. Timer Input Source Select Register
041800             0046*   ; Each of the 4 timers are allocated two bits of the 8-bit register
041800             0047*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
041800             0048*   ;   00: System clock / CLK_DIV
041800             0049*   ;   01: RTC / CLK_DIV
041800             0050*   ;   NOTE: these are the values given in the manual,but it may be a typo
041800             0051*   ;   10: GPIO port B pin 1.
041800             0052*   ;   11: GPIO port B pin 1.
041800             0053*   TMR_ISS:   equ 92h ; register address
041800             0054*   
041800             0055*   ; Table 51. Real-Time Clock Control Register
041800             0056*   RTC_CTRL: equ EDh ; register address
041800             0057*   
041800             0058*   ; alarm interrupt disable/enable
041800             0059*   RTC_ALARM_0:    equ %00000000
041800             0060*   RTC_ALARM_1:    equ %10000000
041800             0061*   
041800             0062*   ; interrupt on alarm disable/enable
041800             0063*   RTC_INT_ENT_0:  equ %00000000
041800             0064*   RTC_INT_ENT_1:  equ %01000000
041800             0065*   
041800             0066*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
041800             0067*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
041800             0068*   
041800             0069*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
041800             0070*                                   ; On-chip 32768 Hz oscillator is enabled.
041800             0071*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
041800             0072*                                   ; On-chip 32768 Hz oscillator is disabled.
041800             0073*   
041800             0074*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
041800             0075*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
041800             0076*   
041800             0077*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
041800             0078*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
041800             0079*   
041800             0080*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
041800             0081*                                   ; RTC counter is enabled.
041800             0082*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
041800             0083*                                   ; RTC counter is disabled.
041800             0084*   
041800             0085*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
041800             0086*   
041800             0087*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
041800             0088*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
041800 00 00 00    0089*   prt_reload: dl 0x000000
041803             0090*   
041803             0091*   ; set PRT timer
041803             0092*   prt_set:
041803 21 00 00 00 0093*       ld hl,0
041807 22 51 18 04 0094*       ld (prt_irq_counter),hl
04180B 2A 00 18 04 0095*       ld hl,(prt_reload)
04180F ED 29 84    0096*       out0 ($84),l
041812 ED 21 85    0097*   	out0 ($85),h
041815             0098*   ; disable timer
041815 3E 06       0099*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041817 ED 39 83    0100*   	out0 ($83),a
04181A             0101*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04181A 3E 57       0102*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04181C ED 39 83    0103*   	out0 ($83),a
04181F C9          0104*       ret
041820             0105*   
041820             0106*   ; ===============================================
041820             0107*   ; PRT Timer Interrupt Handling
041820             0108*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
041820             0109*   ; -----------------------------------------------
041820             0110*   prt_irq_init:
041820             0111*       ; set up interrupt vector table 2
041820 21 00 00 00 0112*   	ld hl,0
041824 3A 0C 01 00 0113*   	ld a,($10c)
041828 6F          0114*   	ld l,a
041829 3A 0D 01 00 0115*   	ld a,($10d)
04182D 67          0116*   	ld h,a
04182E             0117*   
04182E             0118*   	; skip over CALL ($c3)
04182E 23          0119*   	inc hl
04182F             0120*   	; load address of jump into vector table 2 (in ram)
04182F ED 27       0121*   	ld hl,(hl)
041831             0122*   
041831             0123*   	; write CALL prt_irq_handler to vector table 2
041831 3E C3       0124*   	ld a,$c3
041833 77          0125*   	ld (hl),a
041834 23          0126*   	inc hl
041835 11 3C 18 04 0127*   	ld de,prt_irq_handler
041839 ED 1F       0128*   	ld (hl),de
04183B             0129*   
04183B C9          0130*       ret
04183C             0131*   
04183C             0132*   prt_irq_handler:
04183C F3          0133*   	di
04183D F5          0134*   	push af
04183E E5          0135*       push hl
04183F ED 38 83    0136*   	in0 a,($83)
041842 2A 51 18 04 0137*   	ld hl,(prt_irq_counter)
041846 23          0138*   	inc hl
041847 22 51 18 04 0139*   	ld (prt_irq_counter),hl
04184B E1          0140*       pop hl
04184C F1          0141*   	pop af
04184D FB          0142*   	ei
04184E 5B ED 4D    0143*   	reti.l
041851             0144*   
041851             0145*   prt_irq_counter:
041851 00 00 00    0146*   	.dl 0
041854             0147*   prt_irq_counter_saved:
041854 00 00 00    0148*       .dl 0
041857             0149*   
041857             0150*   prt_loop_reset:
041857 E5          0151*       push hl
041858 21 00 00 00 0152*   	ld hl,0
04185C 22 51 18 04 0153*   	ld (prt_irq_counter),hl
041860 22 C2 18 04 0154*       ld (prt_loop_counter),hl
041864 22 C5 18 04 0155*       ld (prt_loops),hl
041868 CD 03 18 04 0156*       call prt_set
04186C E1          0157*       pop hl
04186D C9          0158*       ret
04186E             0159*   
04186E             0160*   prt_loop_start:
04186E E5          0161*       push hl
04186F 21 00 00 00 0162*   	ld hl,0
041873 22 51 18 04 0163*   	ld (prt_irq_counter),hl
041877 E1          0164*       pop hl
041878 C9          0165*       ret
041879             0166*   
041879             0167*   prt_loop_stop:
041879 E5          0168*       push hl
04187A D5          0169*       push de
04187B 2A 51 18 04 0170*       ld hl,(prt_irq_counter)
04187F ED 5B C2 18 0171*       ld de,(prt_loop_counter)
       04          
041884 19          0172*       add hl,de
041885 22 C2 18 04 0173*       ld (prt_loop_counter),hl
041889 21 00 00 00 0174*       ld hl,0
04188D 22 51 18 04 0175*       ld (prt_irq_counter),hl
041891 2A C5 18 04 0176*       ld hl,(prt_loops)
041895 23          0177*       inc hl
041896 22 C5 18 04 0178*       ld (prt_loops),hl
04189A D1          0179*       pop de
04189B E1          0180*       pop hl
04189C C9          0181*       ret
04189D             0182*   
04189D             0183*   ; inputs: bc = y,x text coordinates to print
04189D             0184*   prt_loop_print:
04189D F5          0185*       push af
04189E E5          0186*       push hl
04189F C5          0187*       push bc
0418A0 D5          0188*       push de
0418A1 DD E5       0189*       push ix
0418A3 FD E5       0190*       push iy
0418A5 CD 37 1A 04 0191*       call vdu_move_cursor
0418A9             0192*   
0418A9 2A C2 18 04 0193*       ld hl,(prt_loop_counter)
0418AD CD 06 02 04 0194*       call printDec
0418B1             0195*   
0418B1 2A C5 18 04 0196*       ld hl,(prt_loops)
0418B5 CD 06 02 04 0197*       call printDec
0418B9             0198*   
0418B9 FD E1       0199*       pop iy
0418BB DD E1       0200*       pop ix
0418BD D1          0201*       pop de
0418BE C1          0202*       pop bc
0418BF E1          0203*       pop hl
0418C0 F1          0204*       pop af
0418C1 C9          0205*       ret
0418C2             0206*   
0418C2             0207*   prt_loop_counter:
0418C2 00 00 00    0208*       .dl 0
0418C5             0209*   prt_loops:
0418C5 00 00 00    0210*       .dl 0
0418C8             0211*   
0418C8             0212*   ; ===============================================
0418C8             0213*   ; Timer functions
0418C8             0214*   ; -----------------------------------------------
0418C8             0215*   ; set a countdown timer
0418C8             0216*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0418C8             0217*   ; returns: hl = current time
0418C8             0218*   tmr_set:
0418C8 FD 2F 03    0219*       ld (iy+3),hl            ; set time remaining
0418CB             0220*       MOSCALL mos_sysvars     ; ix points to syvars table
0418CB 3E 08       0001*M1 			LD	A, function
0418CD 5B CF       0002*M1 			RST.LIL	08h
0418CF DD 27 00    0221*       ld hl,(ix+sysvar_time)  ; get current time
0418D2 FD 2F 00    0222*       ld (iy+0),hl            ; set start time
0418D5 C9          0223*       ret
0418D6             0224*   
0418D6             0225*   ; gets time remaining on a countdown timer
0418D6             0226*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0418D6             0227*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0418D6             0228*   ;          sign flags: pos = time not expired,zero or neg = time expired
0418D6             0229*   tmr_get:
0418D6             0230*       MOSCALL mos_sysvars     ; ix points to syvars table
0418D6 3E 08       0001*M1 			LD	A, function
0418D8 5B CF       0002*M1 			RST.LIL	08h
0418DA DD 17 00    0231*       ld de,(ix+sysvar_time)  ; get current time
0418DD FD 27 00    0232*       ld hl,(iy+0)            ; get start time
0418E0 AF          0233*       xor a                   ; clear carry
0418E1 ED 52       0234*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0418E3 FD 17 03    0235*       ld de,(iy+3)            ; get timer set value
0418E6 AF          0236*       xor a                   ; clear carry
0418E7 ED 5A       0237*       adc hl,de               ; hl = time remaining
0418E9             0238*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0418E9 C9          0239*       ret
0418EA             0240*   
0418EA             0241*   tmr_test: ds 6 ; example of a buffer to hold timer data
0418F0             0242*   
       FF FF FF FF 
       FF FF 
0418F0 00 00 00    0243*   timestamp_now: dl 0
0418F3 00 00 00    0244*   timestamp_old: dl 0
0418F6 00 00 00    0245*   timestamp_chg: dl 0
0418F9             0246*   
0418F9             0247*   ; update the global timestamp from the system clock
0418F9             0248*   ; inputs: none
0418F9             0249*   ; returns: hl = time elapsed in 1/120ths of a second
0418F9             0250*   ;          ix = pointer to syvars table
0418F9             0251*   ; destroys: af,hl,de,ix
0418F9             0252*   timestamp_tick:
0418F9 ED 5B F0 18 0253*       ld de,(timestamp_now)   ; get previous time
       04          
0418FE ED 53 F3 18 0254*       ld (timestamp_old),de   ; save previous time
       04          
041903             0255*       MOSCALL mos_sysvars     ; ix points to syvars table
041903 3E 08       0001*M1 			LD	A, function
041905 5B CF       0002*M1 			RST.LIL	08h
041907 DD 27 00    0256*       ld hl,(ix+sysvar_time)  ; get current time
04190A 22 F0 18 04 0257*       ld (timestamp_now),hl   ; save current time
04190E AF          0258*       xor a                   ; clear carry
04190F ED 52       0259*       sbc hl,de               ; hl = time elapsed
041911 22 F6 18 04 0260*       ld (timestamp_chg),hl   ; save elapsed time
041915 C9          0261*       ret
041916             0262*   
041916             0263*   ; set a countdown timer
041916             0264*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041916             0265*   ; requires: timestamp_tick to be called at least once before this function
041916             0266*   ; returns: hl = current time
041916             0267*   ; destroys: hl
041916             0268*   timestamp_tmr_set:
041916 FD 2F 03    0269*       ld (iy+3),hl            ; set time remaining
041919 2A F0 18 04 0270*       ld hl,(timestamp_now)   ; get current timestamp
04191D FD 2F 00    0271*       ld (iy+0),hl            ; set start time
041920 C9          0272*       ret
041921             0273*   
041921             0274*   ; gets time remaining on a countdown timer following the global timestamp
041921             0275*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041921             0276*   ; requires: timestamp_tick to be called at least once before this function
041921             0277*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041921             0278*   ;          sign flags: pos = time not expired,zero or neg = time expired
041921             0279*   ; destroys: af,hl,de
041921             0280*   timestamp_tmr_get:
041921 ED 5B F0 18 0281*       ld de,(timestamp_now)   ; get current timestamp
       04          
041926 FD 27 00    0282*       ld hl,(iy+0)            ; get start time
041929 AF          0283*       xor a                   ; clear carry
04192A ED 52       0284*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04192C FD 17 03    0285*       ld de,(iy+3)            ; get timer set value
04192F AF          0286*       xor a                   ; clear carry
041930 ED 5A       0287*       adc hl,de               ; hl = time remaining
041932             0288*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041932 C9          0289*       ret
041933             0290*   
041933             0291*   ; set a stopwatch
041933             0292*   ; returns: hl = start time
041933             0293*   ; destroys: hl,ix
041933             0294*   stopwatch_set:
041933             0295*       MOSCALL mos_sysvars     ; ix points to syvars table
041933 3E 08       0001*M1 			LD	A, function
041935 5B CF       0002*M1 			RST.LIL	08h
041937 DD 27 00    0296*       ld hl,(ix+sysvar_time)  ; get current time
04193A 22 4F 19 04 0297*       ld (stopwatch_started),hl            ; set start time
04193E C9          0298*       ret
04193F             0299*   
04193F             0300*   ; gets time elapsed on a stopwatch
04193F             0301*   ; returns: hl = time elapsed in 1/120ths of a second
04193F             0302*   ; destroys: af,hl,de,ix
04193F             0303*   stopwatch_get:
04193F             0304*       MOSCALL mos_sysvars     ; ix points to syvars table
04193F 3E 08       0001*M1 			LD	A, function
041941 5B CF       0002*M1 			RST.LIL	08h
041943 DD 27 00    0305*       ld hl,(ix+sysvar_time)  ; get current time
041946 ED 5B 4F 19 0306*       ld de,(stopwatch_started)            ; get start time
       04          
04194B AF          0307*       xor a                   ; clear carry
04194C ED 52       0308*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04194E C9          0309*       ret
04194F             0310*   
04194F             0311*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041952             0312*   
041952             0313*   ; ------------------
041952             0314*   ; delay routine
041952             0315*   ; Author: Richard Turrnidge
041952             0316*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041952             0317*   ; routine waits a fixed time,then returns
041952             0318*   ; arrive with A =  the delay byte. One bit to be set only.
041952             0319*   ; eg. ld A,00000100b
041952             0320*   
041952             0321*   multiPurposeDelay:
       FF FF FF 
041952 F5          0322*       push af
041953 C5          0323*       push bc
041954 DD E5       0324*       push ix
041956 47          0325*       ld b,a
041957 3E 08       0326*       ld a,$08
041959 5B CF       0327*       RST.LIL	08h                 ; get IX pointer to sysvars
04195B             0328*   
04195B             0329*   waitLoop:
04195B             0330*   
04195B DD 7E 00    0331*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04195E             0332*   
04195E             0333*                                   ;   we check if bit set is same as last time we checked.
04195E             0334*                                   ;   bit 0 - don't use
04195E             0335*                                   ;   bit 1 - changes 64 times per second
04195E             0336*                                   ;   bit 2 - changes 32 times per second
04195E             0337*                                   ;   bit 3 - changes 16 times per second
04195E             0338*   
04195E             0339*                                   ;   bit 4 - changes 8 times per second
04195E             0340*                                   ;   bit 5 - changes 4 times per second
04195E             0341*                                   ;   bit 6 - changes 2 times per second
04195E             0342*                                   ;   bit 7 - changes 1 times per second
04195E A0          0343*       and b
04195F 4F          0344*       ld c,a
041960 3A 71 19 04 0345*       ld a,(oldTimeStamp)
041964 B9          0346*       cp c                        ; is A same as last value?
041965 28 F4       0347*       jr z,waitLoop              ; loop here if it is
041967 79          0348*       ld a,c
041968 32 71 19 04 0349*       ld (oldTimeStamp),a        ; set new value
04196C             0350*   
04196C DD E1       0351*       pop ix
04196E C1          0352*       pop bc
04196F F1          0353*       pop af
041970 C9          0354*       ret
041971             0355*   
041971 00          0356*   oldTimeStamp:   .db 00h
041972             0039        include "vdu.inc"
041972 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
041A00             0002*   
041A00             0003*   ; VDU 30: Home cursor
041A00             0004*   vdu_home_cursor:
041A00 3E 1E       0005*       ld a,30
041A02 5B D7       0006*   	rst.lil $10
041A04 C9          0007*   	ret
041A05             0008*   
041A05             0009*   vdu_cursor_on:
041A05 21 10 1A 04 0010*   	ld hl,@cmd
041A09 01 03 00 00 0011*   	ld bc,@end-@cmd
041A0D 5B DF       0012*   	rst.lil $18
041A0F C9          0013*   	ret
041A10             0014*   @cmd:
041A10 17 01 01    0015*   	db 23,1,1
041A13             0016*   @end:
041A13             0017*   
041A13             0018*   vdu_cursor_off:
041A13 21 1E 1A 04 0019*   	ld hl,@cmd
041A17 01 03 00 00 0020*   	ld bc,@end-@cmd
041A1B 5B DF       0021*   	rst.lil $18
041A1D C9          0022*   	ret
041A1E             0023*   @cmd:
041A1E 17 01 00    0024*   	db 23,1,0
041A21             0025*   @end:
041A21             0026*   
041A21             0027*   ; VDU 5: Write text at graphics cursor
041A21             0028*   ; inputs: a is the character to write to the screen
041A21             0029*   ; prerequisites: the graphics cursor at the intended position on screen
041A21             0030*   ; outputs: see the name of the function
041A21             0031*   ; destroys: a, hl, bc
041A21             0032*   vdu_char_to_gfx_cursor:
041A21 32 31 1A 04 0033*   	ld (@arg),a
041A25 21 30 1A 04 0034*   	ld hl,@cmd
041A29 01 02 00 00 0035*   	ld bc,@end-@cmd
041A2D 5B DF       0036*   	rst.lil $18
041A2F C9          0037*   	ret
041A30 05          0038*   @cmd: db 5
041A31 00          0039*   @arg: db 0
041A32             0040*   @end:
041A32             0041*   ; VDU 9: Move cursor forward one character
041A32             0042*   vdu_cursor_forward:
041A32 3E 09       0043*       ld a,9
041A34 5B D7       0044*   	rst.lil $10
041A36 C9          0045*   	ret
041A37             0046*   
041A37             0047*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041A37             0048*   ; inputs: c=x, b=y 8-bit unsigned integers
041A37             0049*   vdu_move_cursor:
041A37 ED 43 48 1A 0050*       ld (@x0),bc
       04          
041A3C 21 47 1A 04 0051*   	ld hl,@cmd
041A40 01 03 00 00 0052*   	ld bc,@end-@cmd
041A44 5B DF       0053*   	rst.lil $18
041A46 C9          0054*   	ret
041A47 1F          0055*   @cmd: 	db 31
041A48 00          0056*   @x0:	db 0
041A49 00          0057*   @y0: 	db 0
041A4A 00          0058*   @end: 	db 0 ; padding
041A4B             0059*   
041A4B             0060*   ; VDU 12: Clear text area (CLS)
041A4B             0061*   vdu_cls:
041A4B 3E 0C       0062*       ld a,12
041A4D 5B D7       0063*   	rst.lil $10
041A4F C9          0064*   	ret
041A50             0065*   
041A50             0066*   vdu_flip:
041A50 21 5B 1A 04 0067*   	ld hl,@cmd
041A54 01 03 00 00 0068*   	ld bc,@end-@cmd
041A58 5B DF       0069*   	rst.lil $18
041A5A C9          0070*   	ret
041A5B 17 00 C3    0071*   @cmd: db 23,0,0xC3
041A5E             0072*   @end:
041A5E             0073*   
041A5E             0074*   ; VDU 16: Clear graphics area (CLG)
041A5E             0075*   vdu_clg:
041A5E 3E 10       0076*       ld a,16
041A60 5B D7       0077*   	rst.lil $10
041A62 C9          0078*   	ret
041A63             0079*   
041A63             0080*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041A63             0081*   ; VDU 23, 7: Scrolling
041A63             0082*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041A63             0083*   ; inputs: a, extent; l, direction; h; speed
041A63             0084*   vdu_scroll_down:
041A63 32 78 1A 04 0085*   	ld (@extent),a
041A67 22 79 1A 04 0086*   	ld (@dir),hl ; implicitly populates @speed
041A6B 21 76 1A 04 0087*   	ld hl,@cmd
041A6F 01 05 00 00 0088*   	ld bc,@end-@cmd
041A73 5B DF       0089*   	rst.lil $18     ;; Sending command to VDP
041A75 C9          0090*   	ret
041A76 17 07       0091*   @cmd:       db 23,7
041A78 00          0092*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041A79 00          0093*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
041A7A 00          0094*   @speed:     db 0x00 ; pixels
041A7B 00          0095*   @end:		db 0x00 ; padding
041A7C             0096*   
041A7C             0097*   ; COLOUR MODES
041A7C             0098*   ; Mode	Effect
041A7C             0099*   ; 0	Set on-screen pixel to target colour value
041A7C             0100*   ; 1	OR value with the on-screen pixel
041A7C             0101*   ; 2	AND value with the on-screen pixel
041A7C             0102*   ; 3	XOR value with the on-screen pixel
041A7C             0103*   ; 4	Invert the on-screen pixel
041A7C             0104*   ; 5	No operation
041A7C             0105*   ; 6	AND the inverse of the specified colour with the on-screen pixel
041A7C             0106*   ; 7	OR the inverse of the specified colour with the on-screen pixel
041A7C             0107*   
041A7C             0108*   ; VDU 17, colour: Define text colour (COLOUR)
041A7C             0109*   vdu_colour_text:
041A7C 32 8C 1A 04 0110*   	ld (@arg),a
041A80 21 8B 1A 04 0111*   	ld hl,@cmd
041A84 01 02 00 00 0112*   	ld bc,@end-@cmd
041A88 5B DF       0113*   	rst.lil $18
041A8A C9          0114*   	ret
041A8B 11          0115*   @cmd: db 17
041A8C 00          0116*   @arg: db 0
041A8D             0117*   @end:
041A8D             0118*   
041A8D             0119*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
041A8D             0120*   ; inputs: a=mode, c=colour (add 128 to set background colour)
041A8D             0121*   vdu_gcol:
041A8D 32 A2 1A 04 0122*   	ld (@mode),a
041A91 79          0123*       ld a,c
041A92 32 A3 1A 04 0124*       ld (@col),a
041A96 21 A1 1A 04 0125*   	ld hl,@cmd
041A9A 01 03 00 00 0126*   	ld bc,@end-@cmd
041A9E 5B DF       0127*   	rst.lil $18
041AA0 C9          0128*   	ret
041AA1 12          0129*   @cmd:  db 18
041AA2 00          0130*   @mode: db 0
041AA3 00          0131*   @col:  db 0
041AA4             0132*   @end:
041AA4             0133*   
041AA4             0134*   
041AA4             0135*   ; VDU 28, left, bottom, right, top: Set text viewport **
041AA4             0136*   ; MIND THE LITTLE-ENDIANESS
041AA4             0137*   ; inputs: c=left,b=bottom,e=right,d=top
041AA4             0138*   ; outputs; nothing
041AA4             0139*   ; destroys: a might make it out alive
041AA4             0140*   vdu_set_txt_viewport:
041AA4 ED 43 BA 1A 0141*       ld (@lb),bc
       04          
041AA9 ED 53 BC 1A 0142*   	ld (@rt),de
       04          
041AAE 21 B9 1A 04 0143*   	ld hl,@cmd
041AB2 01 05 00 00 0144*   	ld bc,@end-@cmd
041AB6 5B DF       0145*   	rst.lil $18
041AB8 C9          0146*   	ret
041AB9 1C          0147*   @cmd:   db 28 ; set text viewport command
041ABA 00 00       0148*   @lb: 	dw 0x0000 ; set by bc
041ABC 00 00       0149*   @rt: 	dw 0x0000 ; set by de
041ABE 00          0150*   @end:   db 0x00	  ; padding
041ABF             0151*   
041ABF             0152*   ; Wait for VBLANK interrupt
041ABF             0153*   vdu_vblank:
041ABF DD E5       0154*       PUSH 	IX
041AC1             0155*   	MOSCALL	mos_sysvars
041AC1 3E 08       0001*M1 			LD	A, function
041AC3 5B CF       0002*M1 			RST.LIL	08h
041AC5 DD 7E 00    0156*   	LD	A, (IX + sysvar_time + 0)
041AC8             0157*   @wait:
041AC8 DD BE 00    0158*       CP 	A, (IX + sysvar_time + 0)
041ACB 28 FB       0159*       JR	Z, @wait
041ACD DD E1       0160*       POP	IX
041ACF C9          0161*       RET
041AD0             0162*   
041AD0             0163*   ; VDU 29, x; y;: Set graphics origin
041AD0             0164*   ; This command sets the graphics origin.
041AD0             0165*   ; The origin is the point on the screen where the coordinates (0,0) are located.
041AD0             0166*   ; inputs: bc=x0,de=y0
041AD0             0167*   ; outputs; nothing
041AD0             0168*   ; destroys: a might make it out alive
041AD0             0169*   vdu_set_gfx_origin:
041AD0 ED 43 E6 1A 0170*       ld (@x0),bc
       04          
041AD5 ED 53 E8 1A 0171*       ld (@y0),de
       04          
041ADA 21 E5 1A 04 0172*       ld hl,@cmd
041ADE 01 05 00 00 0173*       ld bc,@end-@cmd
041AE2 5B DF       0174*       rst.lil $18
041AE4 C9          0175*       ret
041AE5 1D          0176*   @cmd:   db 29 ; set graphics origin command
041AE6 00 00       0177*   @x0: 	dw 0x0000 ; set by bc
041AE8 00 00       0178*   @y0: 	dw 0x0000 ; set by de
041AEA 00          0179*   @end:   db 0x00	  ; padding
041AEB             0180*   
041AEB             0181*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
041AEB             0182*   ; NOTE: the order of the y-coordinate parameters are inverted
041AEB             0183*   ; 	because we have turned off logical screen scaling
041AEB             0184*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041AEB             0185*   ; outputs; nothing
041AEB             0186*   ; destroys: a might make it out alive
041AEB             0187*   vdu_set_gfx_viewport:
041AEB ED 43 0B 1B 0188*       ld (@x0),bc
       04          
041AF0 FD 22 0D 1B 0189*       ld (@y1),iy
       04          
041AF5 DD 22 0F 1B 0190*   	ld (@x1),ix
       04          
041AFA ED 53 11 1B 0191*   	ld (@y0),de
       04          
041AFF 21 0A 1B 04 0192*   	ld hl,@cmd
041B03 01 09 00 00 0193*   	ld bc,@end-@cmd
041B07 5B DF       0194*   	rst.lil $18
041B09 C9          0195*   	ret
041B0A 18          0196*   @cmd:   db 24 ; set graphics viewport command
041B0B 00 00       0197*   @x0: 	dw 0x0000 ; set by bc
041B0D 00 00       0198*   @y1: 	dw 0x0000 ; set by iy
041B0F 00 00       0199*   @x1: 	dw 0x0000 ; set by ix
041B11 00 00       0200*   @y0: 	dw 0x0000 ; set by de
041B13 00          0201*   @end:   db 0x00	  ; padding
041B14             0202*   
041B14             0203*   ; SCREEN MODES
041B14             0204*   ; ===============================
041B14             0205*   ; Mode  Horz  Vert  Cols  Refresh
041B14             0206*   ; ---   ----  ----  ----  -------
041B14             0207*   ; 11    320   240   2     60hz
041B14             0208*   ; 139   320   240   2     60hz
041B14             0209*   ; 23    512   384   2     60hz
041B14             0210*   ; 151   512   384   2     60hz
041B14             0211*   ; 6     640   240   2     60hz
041B14             0212*   ; 134   640   240   2     60hz
041B14             0213*   ; 2     640   480   2     60hz
041B14             0214*   ; 130   640   480   2     60hz
041B14             0215*   ; 17    800   600   2     60hz
041B14             0216*   ; 145   800   600   2     60hz
041B14             0217*   ; 18    1024  768   2     60hz
041B14             0218*   ; 146   1024  768   2     60hz
041B14             0219*   ; ---   ----  ----  ----  -------
041B14             0220*   ; 10    320   240   4     60hz
041B14             0221*   ; 138   320   240   4     60hz
041B14             0222*   ; 22    512   384   4     60hz
041B14             0223*   ; 150   512   384   4     60hz
041B14             0224*   ; 5     640   240   4     60hz
041B14             0225*   ; 133   640   240   4     60hz
041B14             0226*   ; 1     640   480   4     60hz
041B14             0227*   ; 129   640   480   4     60hz
041B14             0228*   ; 16    800   600   4     60hz
041B14             0229*   ; 19    1024  768   4     60hz
041B14             0230*   ; ---   ----  ----  ----  -------
041B14             0231*   ; 9     320   240   16    60hz
041B14             0232*   ; 137   320   240   16    60hz
041B14             0233*   ; 21    512   384   16    60hz
041B14             0234*   ; 149   512   384   16    60hz
041B14             0235*   ; 4     640   240   16    60hz
041B14             0236*   ; 132   640   240   16    60hz
041B14             0237*   ; 0     640   480   16    60hz
041B14             0238*   ; 7     n/a   n/a   16    60hz
041B14             0239*   ; ---   ----  ----  ----  -------
041B14             0240*   ; 8     320   240   64    60hz
041B14             0241*   ; 136   320   240   64    60hz
041B14             0242*   ; 20    512   384   64    60hz
041B14             0243*   ; 3     640   240   64    60hz
041B14             0244*   ; ---   ----  ----  ----  -------
041B14             0245*   vdu_set_screen_mode:
041B14 32 24 1B 04 0246*   	ld (@arg),a
041B18 21 23 1B 04 0247*   	ld hl,@cmd
041B1C 01 02 00 00 0248*   	ld bc,@end-@cmd
041B20 5B DF       0249*   	rst.lil $18
041B22 C9          0250*   	ret
041B23 16          0251*   @cmd: db 22 ; set screen mode
041B24 00          0252*   @arg: db 0  ; screen mode parameter
041B25             0253*   @end:
041B25             0254*   
041B25             0255*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041B25             0256*   ; inputs: a is scaling mode, 1=on, 0=off
041B25             0257*   ; note: default setting on boot is scaling ON
041B25             0258*   vdu_set_scaling:
041B25 32 37 1B 04 0259*   	ld (@arg),a
041B29 21 34 1B 04 0260*   	ld hl,@cmd
041B2D 01 04 00 00 0261*   	ld bc,@end-@cmd
041B31 5B DF       0262*   	rst.lil $18
041B33 C9          0263*   	ret
041B34 17 00 C0    0264*   @cmd: db 23,0,0xC0
041B37 00          0265*   @arg: db 0  ; scaling on/off
041B38             0266*   @end:
041B38             0267*   
041B38             0268*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041B38             0269*   ; inputs: hl=bufferId
041B38             0270*   vdu_buff_select:
041B38 22 4A 1B 04 0271*   	ld (@bufferId),hl
041B3C 21 47 1B 04 0272*   	ld hl,@cmd
041B40 01 05 00 00 0273*   	ld bc,@end-@cmd
041B44 5B DF       0274*   	rst.lil $18
041B46 C9          0275*   	ret
041B47 17 1B 20    0276*   @cmd: db 23,27,0x20
041B4A 00 00       0277*   @bufferId: dw 0x0000
041B4C 00          0278*   @end: db 0x00 ; padding
041B4D             0279*   
041B4D             0280*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041B4D             0281*   ; inputs: a=format; bc=width; de=height
041B4D             0282*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041B4D             0283*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041B4D             0284*   ; 0 	RGBA8888 (4-bytes per pixel)
041B4D             0285*   ; 1 	RGBA2222 (1-bytes per pixel)
041B4D             0286*   ; 2 	Mono/Mask (1-bit per pixel)
041B4D             0287*   ; 3 	Reserved for internal use by VDP (“native” format)
041B4D             0288*   vdu_bmp_create:
041B4D ED 43 69 1B 0289*       ld (@width),bc
       04          
041B52 ED 53 6B 1B 0290*       ld (@height),de
       04          
041B57 32 6D 1B 04 0291*       ld (@fmt),a
041B5B 21 66 1B 04 0292*   	ld hl,@cmd
041B5F 01 08 00 00 0293*   	ld bc,@end-@cmd
041B63 5B DF       0294*   	rst.lil $18
041B65 C9          0295*   	ret
041B66 17 1B 21    0296*   @cmd:       db 23,27,0x21
041B69 00 00       0297*   @width:     dw 0x0000
041B6B 00 00       0298*   @height:    dw 0x0000
041B6D 00          0299*   @fmt:       db 0x00
041B6E             0300*   @end:
041B6E             0301*   
041B6E             0302*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041B6E             0303*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041B6E             0304*   vdu_load_img_rgba2_to_8:
041B6E             0305*   ; backup the target buffer id and image dimensions
041B6E E5          0306*       push hl
041B6F D5          0307*       push de
041B70 C5          0308*       push bc
041B71             0309*   ; load the rgba2 image to working buffer 65534
041B71 21 FE FF 00 0310*       ld hl,65534 ; temporary working buffer id
041B75 CD 78 1C 04 0311*   	call vdu_load_buffer_from_file
041B79             0312*   ; restore the image dimensions and target buffer id
041B79 C1          0313*       pop bc
041B7A D1          0314*       pop de
041B7B E1          0315*       pop hl
041B7C             0316*   ; fall through to vdu_rgba2_to_8
041B7C             0317*   
041B7C             0318*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041B7C             0319*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041B7C             0320*   ; the "expand bitmap" command is:
041B7C             0321*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041B7C             0322*   ; and then to reverse the byte order to fix endian-ness:
041B7C             0323*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041B7C             0324*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041B7C             0325*   ; VDU 23,27,&20,targetBufferID%;
041B7C             0326*   ; VDU 23,27,&21,width%;height%;0
041B7C             0327*   ; -------------------------------------------------------------------
041B7C             0328*   ; inputs: bc,de image width,height ; hl = targetBufferId
041B7C             0329*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041B7C             0330*   vdu_rgba2_to_8:
041B7C             0331*   ; load the image dimensions and buffer id parameters
041B7C ED 43 D8 1B 0332*       ld (@width),bc
       04          
041B81 ED 53 DA 1B 0333*       ld (@height),de
       04          
041B86 22 BD 1B 04 0334*       ld (@bufferId0),hl
041B8A 22 CA 1B 04 0335*       ld (@bufferId2),hl
041B8E 22 D3 1B 04 0336*       ld (@bufferId1),hl
041B92             0337*   ; clean up bytes that got stomped on by the ID loads
041B92 3E 48       0338*       ld a,0x48
041B94 32 BF 1B 04 0339*       ld (@bufferId0+2),a
041B98 3E 17       0340*       ld a,23
041B9A 32 D5 1B 04 0341*       ld (@bufferId1+2),a
041B9E 3E 18       0342*       ld a,24
041BA0 32 CC 1B 04 0343*       ld (@bufferId2+2),a
041BA4 AF          0344*       xor a
041BA5 32 DC 1B 04 0345*       ld (@height+2),a
041BA9             0346*   ; send the vdu command strings
041BA9 21 B4 1B 04 0347*       ld hl,@beg
041BAD 01 29 00 00 0348*       ld bc,@end-@beg
041BB1 5B DF       0349*       rst.lil $18
041BB3 C9          0350*       ret
041BB4             0351*   @beg:
041BB4             0352*   ; Command 14: Consolidate blocks in a buffer
041BB4             0353*   ; VDU 23, 0, &A0, bufferId; 14
041BB4 17 00 A0    0354*       db 23,0,0xA0
041BB7 FE FF       0355*       dw 65534 ; workingBufferId
041BB9 0E          0356*       db 14 ; consolidate blocks
041BBA             0357*   ; the "expand bitmap" command is:
041BBA             0358*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041BBA 17 00 A0    0359*       db 23,0,0xA0
041BBD 00 00       0360*   @bufferId0: dw 0x0000 ; targetBufferId
041BBF 48          0361*       db 0x48 ; given as decimal command 72 in the docs
041BC0 02          0362*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041BC1 FE FF       0363*       dw 65534 ; sourceBufferId
041BC3 00 7F BF FF 0364*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041BC7             0365*   ; reverse the byte order to fix endian-ness:
041BC7             0366*   ; Command 24: Reverse the order of data of blocks within a buffer
041BC7             0367*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041BC7             0368*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041BC7 17 00 A0    0369*       db 23,0,0xA0
041BCA 00 00       0370*   @bufferId2:    dw 0x0000 ; targetBufferId
041BCC 18          0371*       db 24 ; reverse byte order
041BCD 04          0372*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041BCE 04 00       0373*       dw 4 ; size (4 bytes)
041BD0             0374*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041BD0             0375*   ; VDU 23,27,&20,targetBufferID%;
041BD0 17 1B 20    0376*       db 23,27,0x20 ; select bitmap
041BD3 00 00       0377*   @bufferId1: dw 0x0000 ; targetBufferId
041BD5             0378*   ; VDU 23,27,&21,width%;height%;0
041BD5 17 1B 21    0379*       db 23,27,0x21 ; create bitmap from buffer
041BD8 00 00       0380*   @width: dw 0x0000
041BDA 00 00       0381*   @height: dw 0x0000
041BDC 00          0382*       db 0x00 ; rgba8888 format
041BDD             0383*   @end:
041BDD             0384*   
041BDD             0385*   ; scratch variables
041BDD 00 00 00    0386*   bufferId0: dl 0x000000
041BE0 00 00 00    0387*   bufferId1: dl 0x000000
041BE3             0388*   
041BE3             0389*   ; load a vdu buffer from local memory
041BE3             0390*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041BE3             0391*   vdu_load_buffer:
041BE3 ED 43 0C 1C 0392*       ld (@length),bc
       04          
041BE8 D5          0393*       push de ; save data pointer
041BE9             0394*   ; send the vdu command string
041BE9 7D          0395*       ld a,l
041BEA 32 09 1C 04 0396*       ld (@bufferId),a
041BEE 7C          0397*       ld a,h
041BEF 32 0A 1C 04 0398*       ld (@bufferId+1),a
041BF3 21 06 1C 04 0399*       ld hl,@cmd
041BF7 01 08 00 00 0400*       ld bc,@end-@cmd
041BFB 5B DF       0401*       rst.lil $18
041BFD             0402*   ; send the buffer data
041BFD E1          0403*       pop hl ; pointer to data
041BFE ED 4B 0C 1C 0404*       ld bc,(@length)
       04          
041C03 5B DF       0405*       rst.lil $18 ; send it
041C05 C9          0406*       ret
041C06             0407*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041C06 17 00 A0    0408*   @cmd:       db 23,0,0xA0
041C09 00 00       0409*   @bufferId:	dw 0x0000
041C0B 00          0410*   		    db 0 ; load buffer
041C0C 00 00       0411*   @length:	dw 0x0000
041C0E 00          0412*   @end: db 0 ; padding
041C0F             0413*   
041C0F             0414*   ; clear a buffer
041C0F             0415*   ; inputs: hl = bufferId
041C0F             0416*   vdu_clear_buffer:
041C0F 7D          0417*       ld a,l
041C10 32 27 1C 04 0418*       ld (@bufferId),a
041C14 7C          0419*       ld a,h
041C15 32 28 1C 04 0420*       ld (@bufferId+1),a
041C19 21 24 1C 04 0421*       ld hl,@cmd
041C1D 01 06 00 00 0422*       ld bc,@end-@cmd
041C21 5B DF       0423*       rst.lil $18
041C23 C9          0424*       ret
041C24 17 00 A0    0425*   @cmd:       db 23,0,0xA0
041C27 00 00       0426*   @bufferId:	dw 0x0000
041C29 02          0427*   		    db 2 ; clear buffer
041C2A             0428*   @end:
041C2A             0429*   
041C2A             0430*   vdu_clear_all_buffers:
041C2A             0431*   ; clear all buffers
041C2A 21 35 1C 04 0432*       ld hl,@beg
041C2E 01 06 00 00 0433*       ld bc,@end-@beg
041C32 5B DF       0434*       rst.lil $18
041C34 C9          0435*       ret
041C35 17 00 A0    0436*   @beg: db 23,0,$A0
041C38 FF FF       0437*         dw -1 ; clear all buffers
041C3A 02          0438*         db 2  ; command 2: clear a buffer
041C3B             0439*   @end:
041C3B             0440*   
041C3B             0441*   ; Command 14: Consolidate blocks in a buffer
041C3B             0442*   vdu_consolidate_buffer:
041C3B             0443*   ; set parameters for vdu call
041C3B 7D          0444*       ld a,l
041C3C 32 53 1C 04 0445*       ld (@bufferId),a
041C40 7C          0446*       ld a,h
041C41 32 54 1C 04 0447*       ld (@bufferId+1),a
041C45 21 50 1C 04 0448*       ld hl,@beg
041C49 01 06 00 00 0449*       ld bc,@end-@beg
041C4D 5B DF       0450*       rst.lil $18
041C4F C9          0451*       ret
041C50             0452*   ; VDU 23, 0, &A0, bufferId; 14
041C50 17 00 A0    0453*   @beg: db 23,0,0xA0
041C53 00 00       0454*   @bufferId: dw 0x0000
041C55 0E          0455*              db 14
041C56             0456*   @end:
041C56             0457*   
041C56             0458*   ; load an image file to a buffer and make it a bitmap
041C56             0459*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041C56             0460*   vdu_load_img:
041C56             0461*   ; back up image type and dimension parameters
041C56 22 DD 1B 04 0462*       ld (bufferId0),hl
041C5A F5          0463*       push af
041C5B C5          0464*   	push bc
041C5C D5          0465*   	push de
041C5D             0466*   ; load the image
041C5D CD 78 1C 04 0467*   	call vdu_load_buffer_from_file
041C61             0468*   ; now make it a bitmap
041C61 2A DD 1B 04 0469*       ld hl,(bufferId0)
041C65 CD 3B 1C 04 0470*       call vdu_consolidate_buffer
041C69 2A DD 1B 04 0471*       ld hl,(bufferId0)
041C6D CD 38 1B 04 0472*       call vdu_buff_select
041C71 D1          0473*   	pop de ; image height
041C72 C1          0474*   	pop bc ; image width
041C73 F1          0475*   	pop af ; image type
041C74 C3 4D 1B 04 0476*   	jp vdu_bmp_create ; will return to caller from there
041C78             0477*   
041C78             0478*   ; inputs: hl = bufferId; iy = pointer to filename
041C78             0479*   vdu_load_buffer_from_file:
041C78 22 DD 1B 04 0480*       ld (bufferId0),hl
041C7C             0481*   
041C7C             0482*   ; clear target buffer
041C7C CD 0F 1C 04 0483*       call vdu_clear_buffer
041C80             0484*   
041C80             0485*   ; open the file in read mode
041C80             0486*   ; Open a file
041C80             0487*   ; HLU: Filename
041C80             0488*   ;   C: Mode
041C80             0489*   ; Returns:
041C80             0490*   ;   A: Filehandle, or 0 if couldn't open
041C80 FD E5       0491*   	push iy ; pointer to filename
041C82 E1          0492*   	pop hl
041C83 0E 01       0493*   	ld c,fa_read
041C85             0494*       MOSCALL mos_fopen
041C85 3E 0A       0001*M1 			LD	A, function
041C87 5B CF       0002*M1 			RST.LIL	08h
041C89 32 C4 1C 04 0495*       ld (@filehandle),a
041C8D             0496*   
041C8D             0497*   @read_file:
041C8D             0498*   ; Read a block of data from a file
041C8D             0499*   ;   C: Filehandle
041C8D             0500*   ; HLU: Pointer to where to write the data to
041C8D             0501*   ; DEU: Number of bytes to read
041C8D             0502*   ; Returns:
041C8D             0503*   ; DEU: Number of bytes read
041C8D 3A C4 1C 04 0504*       ld a,(@filehandle)
041C91 4F          0505*       ld c,a
041C92 21 00 E0 B7 0506*       ld hl,filedata
041C96 11 00 20 00 0507*       ld de,8192 ; max we can read into onboard sram at one time
041C9A             0508*       MOSCALL mos_fread
041C9A 3E 1A       0001*M1 			LD	A, function
041C9C 5B CF       0002*M1 			RST.LIL	08h
041C9E             0509*   
041C9E             0510*   ; test de for zero bytes read
041C9E 21 00 00 00 0511*       ld hl,0
041CA2 AF          0512*       xor a ; clear carry
041CA3 ED 52       0513*       sbc hl,de
041CA5 CA BB 1C 04 0514*       jp z,@close_file
041CA9             0515*   
041CA9             0516*   ; load a vdu buffer from local memory
041CA9             0517*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041CA9 2A DD 1B 04 0518*       ld hl,(bufferId0)
041CAD D5          0519*       push de ; chunksize
041CAE C1          0520*       pop bc
041CAF 11 00 E0 B7 0521*       ld de,filedata
041CB3 CD E3 1B 04 0522*       call vdu_load_buffer
041CB7             0523*   
041CB7             0524*   ; read the next block
041CB7 C3 8D 1C 04 0525*       jp @read_file
041CBB             0526*   
041CBB             0527*   ; close the file
041CBB             0528*   @close_file:
041CBB 3A C4 1C 04 0529*       ld a,(@filehandle)
041CBF             0530*       MOSCALL mos_fclose
041CBF 3E 0B       0001*M1 			LD	A, function
041CC1 5B CF       0002*M1 			RST.LIL	08h
041CC3 C9          0531*       ret ; vdu_load_buffer_from_file
041CC4             0532*   
041CC4 00          0533*   @filehandle: db 0 ; file handle
041CC5 00 00 00    0534*   @fil: dl 0 ; pointer to FIL struct
041CC8             0535*   
041CC8 00 00 00    0536*   @chunkpointer: dl 0 ; pointer to current chunk
041CCB             0537*   
041CCB             0538*   ; File information structure (FILINFO)
041CCB             0539*   @filinfo:
041CCB 00 00 00 00 0540*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041CCF 00 00       0541*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041CD1 00 00       0542*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041CD3 00          0543*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041CD4 00 00 00 00 0544*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041CE1 00 00 00 00 0545*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041DE1             0040        include "vdu_fonts.inc"
041DE1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041E00             0002*   ; select font
041E00             0003*   ; inputs: hl = bufferId, a = font flags
041E00             0004*   ; Flags:
041E00             0005*   ; Bit	Description
041E00             0006*   ; 0	Adjust cursor position to ensure text baseline is aligned
041E00             0007*   ;   0: Do not adjust cursor position (best for changing font on a new line)
041E00             0008*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
041E00             0009*   ; 1-7	Reserved for future use
041E00             0010*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041E00             0011*   vdu_font_select:
041E00 22 17 1E 04 0012*       ld (@bufferId),hl
041E04 32 19 1E 04 0013*       ld (@flags),a
041E08 21 13 1E 04 0014*       ld hl,@cmd
041E0C 01 07 00 00 0015*       ld bc,@end-@cmd
041E10 5B DF       0016*       rst.lil $18
041E12 C9          0017*       ret
041E13 17 00 95 00 0018*   @cmd: db 23, 0, 0x95, 0
041E17 00 00       0019*   @bufferId: dw 0x0000
041E19 00          0020*   @flags: db 0x00
041E1A             0021*   @end:
041E1A             0022*   
041E1A             0023*   ; create font from buffer
041E1A             0024*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041E1A             0025*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041E1A             0026*   vdu_font_create:
041E1A 22 3F 1E 04 0027*       ld (@bufferId),hl
041E1E ED 53 41 1E 0028*       ld (@width),de ; also loads height
       04          
041E23 32 44 1E 04 0029*       ld (@flags),a
041E27 7A          0030*       ld a,d ; height
041E28 32 43 1E 04 0031*       ld (@ascent),a ; ascent = height
041E2C             0032*   ; consolidate buffer
041E2C CD 3B 1C 04 0033*       call vdu_consolidate_buffer
041E30             0034*   ; create font
041E30 21 3B 1E 04 0035*       ld hl,@cmd
041E34 01 0A 00 00 0036*       ld bc,@end-@cmd
041E38 5B DF       0037*       rst.lil $18
041E3A C9          0038*       ret
041E3B 17 00 95 01 0039*   @cmd: db 23, 0, 0x95, 1
041E3F 00 00       0040*   @bufferId: dw 0x0000
041E41 00          0041*   @width: db 0x00
041E42 00          0042*   @height: db 0x00
041E43 00          0043*   @ascent: db 0x00
041E44 00          0044*   @flags: db 0x00
041E45             0045*   @end:
041E45             0046*   
041E45             0047*   ; set or adjust font property
041E45             0048*   ; inputs: hl = bufferId, a = field, de = value
041E45             0049*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041E45             0050*   vdu_font_property:
041E45 22 61 1E 04 0051*       ld (@bufferId),hl
041E49 32 63 1E 04 0052*       ld (@field),a
041E4D ED 53 64 1E 0053*       ld (@value),de
       04          
041E52 21 5D 1E 04 0054*       ld hl,@cmd
041E56 01 09 00 00 0055*       ld bc,@end-@cmd
041E5A 5B DF       0056*       rst.lil $18
041E5C C9          0057*       ret
041E5D 17 00 95 02 0058*   @cmd: db 23, 0, 0x95, 2
041E61 00 00       0059*   @bufferId: dw 0x0000
041E63 00          0060*   @field: db 0x00
041E64 00 00       0061*   @value: dw 0x0000
041E66 00          0062*   @end: db 0x00 ; padding
041E67             0063*   
041E67             0064*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041E67             0065*   
041E67             0066*   ; Clear/Delete font
041E67             0067*   ; inputs: hl = bufferId
041E67             0068*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041E67             0069*   vdu_font_clear:
041E67 22 7A 1E 04 0070*       ld (@bufferId),hl
041E6B 21 76 1E 04 0071*       ld hl,@cmd
041E6F 01 06 00 00 0072*       ld bc,@end-@cmd
041E73 5B DF       0073*       rst.lil $18
041E75 C9          0074*       ret
041E76 17 00 95 04 0075*   @cmd: db 23, 0, 0x95, 4
041E7A 00 00       0076*   @bufferId: dw 0x0000
041E7C 00          0077*   @end: db 0x00 ; padding
041E7D             0078*   
041E7D             0079*   ; Copy system font to buffer
041E7D             0080*   ; inputs: hl = bufferId
041E7D             0081*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041E7D             0082*   vdu_font_copy_system:
041E7D 22 90 1E 04 0083*       ld (@bufferId),hl
041E81 21 8C 1E 04 0084*       ld hl,@cmd
041E85 01 06 00 00 0085*       ld bc,@end-@cmd
041E89 5B DF       0086*       rst.lil $18
041E8B C9          0087*       ret
041E8C 17 00 95 05 0088*   @cmd: db 23, 0, 0x95, 5
041E90 00 00       0089*   @bufferId: dw 0x0000
041E92 00          0090*   @end: db 0x00 ; padding
041E93             0041        include "vdu_plot.inc"
041E93 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
041F00             0002*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F00             0003*   ; PLOT code 	(Decimal) 	Effect
041F00             0004*   ; &00-&07 	0-7 	Solid line, includes both ends
041F00             0005*   plot_sl_both: equ 0x00
041F00             0006*   
041F00             0007*   ; &08-&0F 	8-15 	Solid line, final point omitted
041F00             0008*   plot_sl_first: equ 0x08
041F00             0009*   
041F00             0010*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
041F00             0011*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
041F00             0012*   
041F00             0013*   ; &20-&27 	32-39 	Solid line, first point omitted
041F00             0014*   plot_sl_last: equ 0x20
041F00             0015*   
041F00             0016*   ; &28-&2F 	40-47 	Solid line, both points omitted
041F00             0017*   plot_sl_none: equ 0x28
041F00             0018*   
041F00             0019*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
041F00             0020*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
041F00             0021*   
041F00             0022*   ; &40-&47 	64-71 	Point plot
041F00             0023*   plot_pt: equ 0x40
041F00             0024*   
041F00             0025*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
041F00             0026*   plot_lf_lr_non_bg: equ 0x48
041F00             0027*   
041F00             0028*   ; &50-&57 	80-87 	Triangle fill
041F00             0029*   plot_tf: equ 0x50
041F00             0030*   
041F00             0031*   ; &58-&5F 	88-95 	Line fill right to background §§
041F00             0032*   plot_lf_r_bg: equ 0x58
041F00             0033*   
041F00             0034*   ; &60-&67 	96-103 	Rectangle fill
041F00             0035*   plot_rf: equ 0x60
041F00             0036*   
041F00             0037*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
041F00             0038*   plot_lf_lr_fg: equ 0x60
041F00             0039*   
041F00             0040*   ; &70-&77 	112-119 	Parallelogram fill
041F00             0041*   plot_pf: equ 0x70
041F00             0042*   
041F00             0043*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
041F00             0044*   plot_lf_r_non_fg: equ 0x78
041F00             0045*   
041F00             0046*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
041F00             0047*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
041F00             0048*   
041F00             0049*   ; &90-&97 	144-151 	Circle outline
041F00             0050*   plot_co: equ 0x90
041F00             0051*   
041F00             0052*   ; &98-&9F 	152-159 	Circle fill
041F00             0053*   plot_cf: equ 0x98
041F00             0054*   
041F00             0055*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
041F00             0056*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
041F00             0057*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
041F00             0058*   
041F00             0059*   ; &B8-&BF 	184-191 	Rectangle copy/move
041F00             0060*   plot_rcm: equ 0xB8
041F00             0061*   
041F00             0062*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
041F00             0063*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
041F00             0064*   ; &D0-&D7 	208-215 	Not defined
041F00             0065*   ; &D8-&DF 	216-223 	Not defined
041F00             0066*   ; &E0-&E7 	224-231 	Not defined
041F00             0067*   
041F00             0068*   ; &E8-&EF 	232-239 	Bitmap plot §
041F00             0069*   plot_bmp: equ 0xE8
041F00             0070*   
041F00             0071*   ; &F0-&F7 	240-247 	Not defined
041F00             0072*   ; &F8-&FF 	248-255 	Not defined
041F00             0073*   
041F00             0074*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
041F00             0075*   ; Agon Console8 VDP 2.2.0
041F00             0076*   
041F00             0077*   ; Within each group of eight plot codes, the effects are as follows:
041F00             0078*   ; Plot code 	Effect
041F00             0079*   ; 0 	Move relative
041F00             0080*   mv_rel: equ 0
041F00             0081*   
041F00             0082*   ; 1 	Plot relative in current foreground colour
041F00             0083*   dr_rel_fg: equ 1
041F00             0084*   
041F00             0085*   ; 2 	Not supported (Plot relative in logical inverse colour)
041F00             0086*   ; 3 	Plot relative in current background colour
041F00             0087*   dr_rel_bg: equ 3
041F00             0088*   
041F00             0089*   ; 4 	Move absolute
041F00             0090*   mv_abs: equ 4
041F00             0091*   
041F00             0092*   ; 5 	Plot absolute in current foreground colour
041F00             0093*   dr_abs_fg: equ 5
041F00             0094*   
041F00             0095*   ; 6 	Not supported (Plot absolute in logical inverse colour)
041F00             0096*   ; 7 	Plot absolute in current background colour
041F00             0097*   dr_abs_bg: equ 7
041F00             0098*   
041F00             0099*   ; Codes 0-3 use the position data provided as part of the command
041F00             0100*   ; as a relative position, adding the position given to the current
041F00             0101*   ; graphical cursor position. Codes 4-7 use the position data provided
041F00             0102*   ; as part of the command as an absolute position, setting the current
041F00             0103*   ; graphical cursor position to the position given.
041F00             0104*   
041F00             0105*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
041F00             0106*   ; current pixel colour. These operations cannot currently be supported
041F00             0107*   ; by the graphics system the Agon VDP uses, so these codes are not
041F00             0108*   ; supported. Support for these codes may be added in a future version
041F00             0109*   ; of the VDP firmware.
041F00             0110*   
041F00             0111*   ; 16 colour palette constants
041F00             0112*   c_black: equ 0
041F00             0113*   c_red_dk: equ 1
041F00             0114*   c_green_dk: equ 2
041F00             0115*   c_yellow_dk: equ 3
041F00             0116*   c_blue_dk: equ 4
041F00             0117*   c_magenta_dk: equ 5
041F00             0118*   c_cyan_dk: equ 6
041F00             0119*   c_grey: equ 7
041F00             0120*   c_grey_dk: equ 8
041F00             0121*   c_red: equ 9
041F00             0122*   c_green: equ 10
041F00             0123*   c_yellow: equ 11
041F00             0124*   c_blue: equ 12
041F00             0125*   c_magenta: equ 13
041F00             0126*   c_cyan: equ 14
041F00             0127*   c_white: equ 15
041F00             0128*   
041F00             0129*   ; VDU 25, mode, x; y;: PLOT command
041F00             0130*   ; inputs: a=mode, bc=x0, de=y0
041F00             0131*   vdu_plot:
041F00 32 1A 1F 04 0132*       ld (@mode),a
041F04 ED 43 1B 1F 0133*       ld (@x0),bc
       04          
041F09 ED 53 1D 1F 0134*       ld (@y0),de
       04          
041F0E 21 19 1F 04 0135*   	ld hl,@cmd
041F12 01 06 00 00 0136*   	ld bc,@end-@cmd
041F16 5B DF       0137*   	rst.lil $18
041F18 C9          0138*   	ret
041F19 19          0139*   @cmd:   db 25
041F1A 00          0140*   @mode:  db 0
041F1B 00 00       0141*   @x0: 	dw 0
041F1D 00 00       0142*   @y0: 	dw 0
041F1F 00          0143*   @end:   db 0 ; extra byte to soak up deu
041F20             0144*   
041F20             0145*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F20             0146*   ; &E8-&EF 	232-239 	Bitmap plot §
041F20             0147*   ; VDU 25, mode, x; y;: PLOT command
041F20             0148*   ; inputs: bc=x0, de=y0
041F20             0149*   ; prerequisites: vdu_buff_select
041F20             0150*   vdu_plot_bmp:
041F20 ED 43 37 1F 0151*       ld (@x0),bc
       04          
041F25 ED 53 39 1F 0152*       ld (@y0),de
       04          
041F2A 21 35 1F 04 0153*   	ld hl,@cmd
041F2E 01 06 00 00 0154*   	ld bc,@end-@cmd
041F32 5B DF       0155*   	rst.lil $18
041F34 C9          0156*   	ret
041F35 19          0157*   @cmd:   db 25
041F36 ED          0158*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041F37 00 00       0159*   @x0: 	dw 0x0000
041F39 00 00       0160*   @y0: 	dw 0x0000
041F3B 00          0161*   @end:   db 0x00 ; padding
041F3C             0162*   
041F3C             0163*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F3C             0164*   ; &E8-&EF 	232-239 	Bitmap plot §
041F3C             0165*   ; VDU 25, mode, x; y;: PLOT command
041F3C             0166*   ; inputs: bc=x0, de=y0
041F3C             0167*   ; USING 16.8 FIXED POINT COORDINATES
041F3C             0168*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
041F3C             0169*   ;   the fractional portiion of the inputs are truncated
041F3C             0170*   ;   leaving only the 16-bit integer portion
041F3C             0171*   ; prerequisites: vdu_buff_select
041F3C             0172*   vdu_plot_bmp168:
041F3C             0173*   ; populate in the reverse of normal to keep the
041F3C             0174*   ; inputs from stomping on each other
041F3C ED 53 5A 1F 0175*       ld (@y0-1),de
       04          
041F41 ED 43 58 1F 0176*       ld (@x0-1),bc
       04          
041F46 3E ED       0177*       ld a,plot_bmp+dr_abs_fg ; 0xED
041F48 32 58 1F 04 0178*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
041F4C 21 57 1F 04 0179*   	ld hl,@cmd
041F50 01 06 00 00 0180*   	ld bc,@end-@cmd
041F54 5B DF       0181*   	rst.lil $18
041F56 C9          0182*   	ret
041F57 19          0183*   @cmd:   db 25
041F58 ED          0184*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041F59 00 00       0185*   @x0: 	dw 0x0000
041F5B 00 00       0186*   @y0: 	dw 0x0000
041F5D             0187*   @end:  ; no padding required b/c we shifted de right
041F5D             0188*   
041F5D             0189*   ; draw a filled rectangle
041F5D             0190*   vdu_plot_rf:
041F5D ED 43 84 1F 0191*       ld (@x0),bc
       04          
041F62 ED 53 86 1F 0192*       ld (@y0),de
       04          
041F67 DD 22 8A 1F 0193*       ld (@x1),ix
       04          
041F6C FD 22 8C 1F 0194*       ld (@y1),iy
       04          
041F71 3E 19       0195*       ld a,25 ; we have to reload the 2nd plot command
041F73 32 88 1F 04 0196*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041F77 21 82 1F 04 0197*   	ld hl,@cmd0
041F7B 01 0C 00 00 0198*   	ld bc,@end-@cmd0
041F7F 5B DF       0199*   	rst.lil $18
041F81 C9          0200*       ret
041F82 19          0201*   @cmd0:  db 25 ; plot
041F83 04          0202*   @arg0:  db plot_sl_both+mv_abs
041F84 00 00       0203*   @x0:    dw 0x0000
041F86 00 00       0204*   @y0:    dw 0x0000
041F88 19          0205*   @cmd1:  db 25 ; plot
041F89 65          0206*   @arg1:  db plot_rf+dr_abs_fg
041F8A 00 00       0207*   @x1:    dw 0x0000
041F8C 00 00       0208*   @y1:    dw 0x0000
041F8E 00          0209*   @end:   db 0x00 ; padding
041F8F             0210*   
041F8F             0211*   ; draw a filled circle
041F8F             0212*   vdu_plot_cf:
041F8F ED 43 B6 1F 0213*       ld (@x0),bc
       04          
041F94 ED 53 B8 1F 0214*       ld (@y0),de
       04          
041F99 DD 22 BC 1F 0215*       ld (@x1),ix
       04          
041F9E FD 22 BE 1F 0216*       ld (@y1),iy
       04          
041FA3 3E 19       0217*       ld a,25 ; we have to reload the 2nd plot command
041FA5 32 BA 1F 04 0218*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041FA9 21 B4 1F 04 0219*   	ld hl,@cmd0
041FAD 01 0C 00 00 0220*   	ld bc,@end-@cmd0
041FB1 5B DF       0221*   	rst.lil $18
041FB3 C9          0222*       ret
041FB4 19          0223*   @cmd0:  db 25 ; plot
041FB5 04          0224*   @arg0:  db plot_sl_both+mv_abs
041FB6 00 00       0225*   @x0:    dw 0x0000
041FB8 00 00       0226*   @y0:    dw 0x0000
041FBA 19          0227*   @cmd1:  db 25 ; plot
041FBB 9D          0228*   @arg1:  db plot_cf+dr_abs_fg
041FBC 00 00       0229*   @x1:    dw 0x0000
041FBE 00 00       0230*   @y1:    dw 0x0000
041FC0 00          0231*   @end:   db 0x00 ; padding
041FC1             0042        include "vdu_sprites.inc"
041FC1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042000             0002*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
042000             0003*   ; the VDP can support up to 256 sprites. They must be defined
042000             0004*   ; contiguously, and so the first sprite is sprite 0.
042000             0005*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
042000             0006*   ; Once a selection of sprites have been defined, you can activate
042000             0007*   ; them using the VDU 23, 27, 7, n command, where n is the number
042000             0008*   ; of sprites to activate. This will activate the first n sprites,
042000             0009*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
042000             0010*   
042000             0011*   ; A single sprite can have multiple "frames", referring to
042000             0012*   ; different bitmaps.
042000             0013*   ; (These bitmaps do not need to be the same size.)
042000             0014*   ; This allows a sprite to include an animation sequence,
042000             0015*   ; which can be stepped through one frame at a time, or picked
042000             0016*   ; in any order.
042000             0017*   
042000             0018*   ; Any format of bitmap can be used as a sprite frame. It should
042000             0019*   ; be noted however that "native" format bitmaps are not
042000             0020*   ; recommended for use as sprite frames, as they cannot get
042000             0021*   ; erased from the screen. (As noted above, the "native" bitmap
042000             0022*   ; format is not really intended for general use.) This is part
042000             0023*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
042000             0024*   ; screen are now stored in RGBA2222 format.
042000             0025*   
042000             0026*   ; An "active" sprite can be hidden, so it will stop being drawn,
042000             0027*   ; and then later shown again.
042000             0028*   
042000             0029*   ; Moving sprites around the screen is done by changing the
042000             0030*   ; position of the sprite. This can be done either by setting
042000             0031*   ; the absolute position of the sprite, or by moving the sprite
042000             0032*   ; by a given number of pixels. (Sprites are positioned using
042000             0033*   ; pixel coordinates, and not by the logical OS coordinate system.)
042000             0034*   ; In the current sprite system, sprites will not update their
042000             0035*   ; position on-screen until either another drawing operation is
042000             0036*   ; performed or an explicit VDU 23, 27, 15 command is performed.
042000             0037*   
042000             0038*   ; VDU 23, 27, 4, n: Select sprite n
042000             0039*   ; inputs: a is the 8-bit sprite id
042000             0040*   vdu_sprite_select:
042000 32 12 20 04 0041*       ld (@sprite),a
042004 21 0F 20 04 0042*       ld hl,@cmd
042008 01 04 00 00 0043*       ld bc,@end-@cmd
04200C 5B DF       0044*       rst.lil $18
04200E C9          0045*       ret
04200F 17 1B 04    0046*   @cmd:    db 23,27,4
042012 00          0047*   @sprite: db 0x00
042013             0048*   @end:
042013             0049*   
042013             0050*   ; VDU 23, 27, 5: Clear frames in current sprite
042013             0051*   ; inputs: none
042013             0052*   ; prerequisites: vdu_sprite_select
042013             0053*   vdu_sprite_clear_frames:
042013 21 1E 20 04 0054*       ld hl,@cmd
042017 01 03 00 00 0055*       ld bc,@end-@cmd
04201B 5B DF       0056*       rst.lil $18
04201D C9          0057*       ret
04201E 17 1B 05    0058*   @cmd: db 23,27,5
042021             0059*   @end:
042021             0060*   
042021             0061*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
042021             0062*   ; inputs: a is the 8-bit bitmap number
042021             0063*   ; prerequisites: vdu_sprite_select
042021             0064*   vdu_sprite_add_bmp:
042021 32 33 20 04 0065*       ld (@bmp),a
042025 21 30 20 04 0066*       ld hl,@cmd
042029 01 04 00 00 0067*       ld bc,@end-@cmd
04202D 5B DF       0068*       rst.lil $18
04202F C9          0069*       ret
042030 17 1B 06    0070*   @cmd: db 23,27,6
042033 00          0071*   @bmp: db 0x00
042034             0072*   @end:
042034             0073*   
042034             0074*   ; VDU 23, 27, 7, n: Activate n sprites
042034             0075*   ; inputs: a is the number of sprites to activate
042034             0076*   ; prerequisites: each sprite activated must have at least one frame attached to it
042034             0077*   vdu_sprite_activate:
042034 32 46 20 04 0078*       ld (@num),a
042038 21 43 20 04 0079*       ld hl,@cmd
04203C 01 04 00 00 0080*       ld bc,@end-@cmd
042040 5B DF       0081*       rst.lil $18
042042 C9          0082*       ret
042043 17 1B 07    0083*   @cmd: db 23,27,7
042046 00          0084*   @num: db 0x00
042047             0085*   @end:
042047             0086*   
042047             0087*   ; VDU 23, 27, 8: Select next frame of current sprite
042047             0088*   ; inputs: none
042047             0089*   ; prerequisites: vdu_sprite_select
042047             0090*   vdu_sprite_next_frame:
042047 21 52 20 04 0091*       ld hl,@cmd
04204B 01 03 00 00 0092*       ld bc,@end-@cmd
04204F 5B DF       0093*       rst.lil $18
042051 C9          0094*       ret
042052 17 1B 08    0095*   @cmd: db 23,27,8
042055             0096*   @end:
042055             0097*   
042055             0098*   ; VDU 23, 27, 9: Select previous frame of current sprite
042055             0099*   ; inputs: none
042055             0100*   ; prerequisites: vdu_sprite_select
042055             0101*   vdu_sprite_prev_frame:
042055 21 60 20 04 0102*       ld hl,@cmd
042059 01 03 00 00 0103*       ld bc,@end-@cmd
04205D 5B DF       0104*       rst.lil $18
04205F C9          0105*       ret
042060 17 1B 09    0106*   @cmd: db 23,27,9
042063             0107*   @end:
042063             0108*   
042063             0109*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
042063             0110*   ; inputs: a is frame number to select
042063             0111*   ; prerequisites: vdu_sprite_select
042063             0112*   vdu_sprite_select_frame:
042063 32 75 20 04 0113*       ld (@frame),a
042067 21 72 20 04 0114*       ld hl,@cmd
04206B 01 04 00 00 0115*       ld bc,@end-@cmd
04206F 5B DF       0116*       rst.lil $18
042071 C9          0117*       ret
042072 17 1B 0A    0118*   @cmd:    db 23,27,10
042075 00          0119*   @frame:  db 0x00
042076             0120*   @end:
042076             0121*   
042076             0122*   ; VDU 23, 27, 11: Show current sprite
042076             0123*   ; inputs: none
042076             0124*   ; prerequisites: vdu_sprite_select
042076             0125*   vdu_sprite_show:
042076 21 81 20 04 0126*       ld hl,@cmd
04207A 01 03 00 00 0127*       ld bc,@end-@cmd
04207E 5B DF       0128*       rst.lil $18
042080 C9          0129*       ret
042081 17 1B 0B    0130*   @cmd: db 23,27,11
042084             0131*   @end:
042084             0132*   
042084             0133*   ; VDU 23, 27, 12: Hide current sprite
042084             0134*   ; inputs: none
042084             0135*   ; prerequisites: vdu_sprite_select
042084             0136*   vdu_sprite_hide:
042084 21 8F 20 04 0137*       ld hl,@cmd
042088 01 03 00 00 0138*       ld bc,@end-@cmd
04208C 5B DF       0139*       rst.lil $18
04208E C9          0140*       ret
04208F 17 1B 0C    0141*   @cmd: db 23,27,12
042092             0142*   @end:
042092             0143*   
042092             0144*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042092             0145*   ; inputs: bc is x coordinate, de is y coordinate
042092             0146*   ; prerequisites: vdu_sprite_select
042092             0147*   vdu_sprite_move_abs:
042092 ED 43 AA 20 0148*       ld (@xpos),bc
       04          
042097 ED 53 AC 20 0149*       ld (@ypos),de
       04          
04209C 21 A7 20 04 0150*       ld hl,@cmd
0420A0 01 07 00 00 0151*       ld bc,@end-@cmd
0420A4 5B DF       0152*       rst.lil $18
0420A6 C9          0153*       ret
0420A7 17 1B 0D    0154*   @cmd:  db 23,27,13
0420AA 00 00       0155*   @xpos: dw 0x0000
0420AC 00 00       0156*   @ypos: dw 0x0000
0420AE 00          0157*   @end:  db 0x00 ; padding
0420AF             0158*   
0420AF             0159*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0420AF             0160*   ; inputs: bc is x coordinate, de is y coordinate
0420AF             0161*   ; prerequisites: vdu_sprite_select
0420AF             0162*   vdu_sprite_move_rel:
0420AF ED 43 C7 20 0163*       ld (@dx),bc
       04          
0420B4 ED 53 C9 20 0164*       ld (@dy),de
       04          
0420B9 21 C4 20 04 0165*       ld hl,@cmd
0420BD 01 07 00 00 0166*       ld bc,@end-@cmd
0420C1 5B DF       0167*       rst.lil $18
0420C3 C9          0168*       ret
0420C4 17 1B 0E    0169*   @cmd: db 23,27,14
0420C7 00 00       0170*   @dx:  dw 0x0000
0420C9 00 00       0171*   @dy:  dw 0x0000
0420CB 00          0172*   @end: db 0x00 ; padding
0420CC             0173*   
0420CC             0174*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
0420CC             0175*   ; USING 16.8 FIXED POINT COORDINATES
0420CC             0176*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
0420CC             0177*   ;   the fractional portiion of the inputs are truncated
0420CC             0178*   ;   leaving only the 16-bit integer portion
0420CC             0179*   ; prerequisites: vdu_sprite_select
0420CC             0180*   vdu_sprite_move_abs168:
0420CC             0181*   ; offset inputs by the gfx origin
0420CC             0182*   ; y coordinate
0420CC 21 00 00 00 0183*       ld hl,origin_top*256
0420D0 19          0184*       add hl,de
0420D1 22 F3 20 04 0185*       ld (@ypos-1),hl
0420D5             0186*   ; x coordinate
0420D5 21 00 80 00 0187*       ld hl,origin_left*256
0420D9 09          0188*       add hl,bc
0420DA 22 F1 20 04 0189*       ld (@xpos-1),hl
0420DE             0190*   ; prepare vdu command
0420DE 3E 0D       0191*       ld a,13       ; restore the final byte of the command
0420E0 32 F1 20 04 0192*       ld (@cmd+2),a ; string that got stomped on by bcu
0420E4 21 EF 20 04 0193*       ld hl,@cmd
0420E8 01 07 00 00 0194*       ld bc,@end-@cmd
0420EC 5B DF       0195*       rst.lil $18
0420EE C9          0196*       ret
0420EF 17 1B 0D    0197*   @cmd:  db 23,27,13
0420F2 00 00       0198*   @xpos: dw 0x0000
0420F4 00 00       0199*   @ypos: dw 0x0000
0420F6             0200*   @end:  ; no padding required b/c we shifted de right
0420F6             0201*   
0420F6             0202*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0420F6             0203*   ; USING 16.8 FIXED POINT COORDINATES
0420F6             0204*   ; inputs: ub.c is dx, ud.e is dy
0420F6             0205*   ;   the fractional portiion of the inputs are truncated
0420F6             0206*   ;   leaving only the 16-bit integer portion
0420F6             0207*   ; prerequisites: vdu_sprite_select
0420F6             0208*   vdu_sprite_move_rel168:
0420F6             0209*   ; populate in the reverse of normal to keep the
0420F6             0210*   ; inputs from stomping on each other
0420F6 ED 53 15 21 0211*       ld (@dy-1),de
       04          
0420FB ED 43 13 21 0212*       ld (@dx-1),bc
       04          
042100 3E 0E       0213*       ld a,14       ; restore the final byte of the command
042102 32 13 21 04 0214*       ld (@cmd+2),a ; string that got stomped on by bcu
042106 21 11 21 04 0215*       ld hl,@cmd
04210A 01 07 00 00 0216*       ld bc,@end-@cmd
04210E 5B DF       0217*       rst.lil $18
042110 C9          0218*       ret
042111 17 1B 0E    0219*   @cmd:  db 23,27,14
042114 00 00       0220*   @dx: dw 0x0000
042116 00 00       0221*   @dy: dw 0x0000
042118             0222*   @end:  ; no padding required b/c we shifted de right
042118             0223*   
042118             0224*   ; VDU 23, 27, 15: Update the sprites in the GPU
042118             0225*   ; inputs: none
042118             0226*   vdu_sprite_update:
042118 21 23 21 04 0227*       ld hl,@cmd
04211C 01 03 00 00 0228*       ld bc,@end-@cmd
042120 5B DF       0229*       rst.lil $18
042122 C9          0230*       ret
042123 17 1B 0F    0231*   @cmd: db 23,27,15
042126             0232*   @end:
042126             0233*   
042126             0234*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042126             0235*   ; inputs: none
042126             0236*   vdu_sprite_bmp_reset:
042126 21 31 21 04 0237*       ld hl,@cmd
04212A 01 03 00 00 0238*       ld bc,@end-@cmd
04212E 5B DF       0239*       rst.lil $18
042130 C9          0240*       ret
042131 17 1B 10    0241*   @cmd: db 23,27,16
042134             0242*   @end:
042134             0243*   
042134             0244*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042134             0245*   ; inputs: none
042134             0246*   vdu_sprite_reset:
042134 21 3F 21 04 0247*       ld hl,@cmd
042138 01 03 00 00 0248*       ld bc,@end-@cmd
04213C 5B DF       0249*       rst.lil $18
04213E C9          0250*       ret
04213F 17 1B 11    0251*   @cmd: db 23,27,17
042142             0252*   @end:
042142             0253*   
042142             0254*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042142             0255*   ; inputs: a is the GCOL paint mode
042142             0256*   ; prerequisites: vdu_sprite_select
042142             0257*   vdu_sprite_set_gcol:
042142 32 54 21 04 0258*       ld (@mode),a
042146 21 51 21 04 0259*       ld hl,@cmd
04214A 01 04 00 00 0260*       ld bc,@end-@cmd
04214E 5B DF       0261*       rst.lil $18
042150 C9          0262*       ret
042151 17 1B 12    0263*   @cmd:  db 23,27,18
042154 00          0264*   @mode: db 0x00
042155             0265*   @end:
042155             0266*   
042155             0267*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
042155             0268*   ; inputs: hl=bufferId
042155             0269*   ; prerequisites: vdu_sprite_select
042155             0270*   vdu_sprite_add_buff:
042155 22 67 21 04 0271*       ld (@bufferId),hl
042159 21 64 21 04 0272*       ld hl,@cmd
04215D 01 05 00 00 0273*       ld bc,@end-@cmd
042161 5B DF       0274*       rst.lil $18
042163 C9          0275*       ret
042164 17 1B 26    0276*   @cmd:      db 23,27,0x26
042167 00 00       0277*   @bufferId: dw 0x0000
042169 00          0278*   @end:      db 0x00 ; padding
04216A             0043    
04216A             0044    ; APPLICATION INCLUDES
04216A             0045        include "ascii.inc"
04216A             0001*   loading_ui:
04216A 57 45 4C 43 0002*       db "WELCOME TO ...",13,10
       4F 4D 45 20 
       54 4F 20 2E 
       2E 2E 0D 0A 
04217A 0D 0A       0003*       db 13,10
04217C 20 20 20 20 0004*       db 32,32,32,32,32,32,32,32,95,95,32,32,32,32,95,95,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,95,13,10
       20 20 20 20 
       5F 5F 20 20 
       20 20 5F 5F 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 5F 5F 0D 
       0A          
0421A1 5F 5F 5F 5F 0005*       db 95,95,95,95,95,32,95,47,32,32,124,95,95,47,32,32,124,95,95,95,95,95,95,32,32,32,32,95,95,95,95,32,124,32,32,124,32,95,95,13,10
       5F 20 5F 2F 
       20 20 7C 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 20 5F 
       5F 5F 5F 20 
       7C 20 20 7C 
       20 5F 5F 0D 
       0A          
0421CA 5C 5F 5F 20 0006*       db 92,95,95,32,32,92,32,32,32,95,95,92,32,32,32,95,95,92,95,95,32,32,92,32,95,47,32,95,95,95,92,124,32,32,124,47,32,47,13,10
       20 5C 20 20 
       20 5F 5F 5C 
       20 20 20 5F 
       5F 5C 5F 5F 
       20 20 5C 20 
       5F 2F 20 5F 
       5F 5F 5C 7C 
       20 20 7C 2F 
       20 2F 0D 0A 
0421F2 20 2F 20 5F 0007*       db 32,47,32,95,95,32,92,124,32,32,124,32,32,124,32,32,124,32,32,47,32,95,95,32,92,32,32,92,95,95,95,124,32,32,32,32,60,13,10
       5F 20 5C 7C 
       20 20 7C 20 
       20 7C 20 20 
       7C 20 20 2F 
       20 5F 5F 20 
       5C 20 20 5C 
       5F 5F 5F 7C 
       20 20 20 20 
       3C 0D 0A    
042219 28 5F 5F 5F 0008*       db 40,95,95,95,95,32,32,47,95,95,124,32,32,124,95,95,124,32,40,95,95,95,95,32,32,47,92,95,95,95,32,32,62,95,95,124,95,32,92,13,10
       5F 20 20 2F 
       5F 5F 7C 20 
       20 7C 5F 5F 
       7C 20 28 5F 
       5F 5F 5F 20 
       20 2F 5C 5F 
       5F 5F 20 20 
       3E 5F 5F 7C 
       5F 20 5C 0D 
       0A          
042242 20 20 20 20 0009*       db 32,32,32,32,32,92,47,32,95,95,95,95,95,32,32,32,32,95,95,32,32,46,95,95,47,32,32,32,32,32,92,47,32,32,32,32,32,92,47,13,10
       20 5C 2F 20 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 20 
       20 2E 5F 5F 
       2F 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 5C 2F 0D 
       0A          
04226B 20 20 5F 5F 0010*       db 32,32,95,95,95,95,95,47,32,95,95,95,95,92,32,95,47,32,32,124,95,124,32,32,124,95,95,32,32,32,95,95,95,95,13,10
       5F 5F 5F 2F 
       20 5F 5F 5F 
       5F 5C 20 5F 
       2F 20 20 7C 
       5F 7C 20 20 
       7C 5F 5F 20 
       20 20 5F 5F 
       5F 5F 0D 0A 
04228F 20 2F 20 20 0011*       db 32,47,32,32,95,32,92,32,32,32,95,95,92,32,32,92,32,32,32,95,95,92,32,32,124,32,32,92,95,47,32,95,95,32,92,13,10
       5F 20 5C 20 
       20 20 5F 5F 
       5C 20 20 5C 
       20 20 20 5F 
       5F 5C 20 20 
       7C 20 20 5C 
       5F 2F 20 5F 
       5F 20 5C 0D 
       0A          
0422B4 28 20 20 3C 0012*       db 40,32,32,60,95,62,32,41,32,32,124,32,32,32,32,32,124,32,32,124,32,124,32,32,32,89,32,32,92,32,32,95,95,95,47,13,10
       5F 3E 20 29 
       20 20 7C 20 
       20 20 20 20 
       7C 20 20 7C 
       20 7C 20 20 
       20 59 20 20 
       5C 20 20 5F 
       5F 5F 2F 0D 
       0A          
0422D9 20 5C 5F 5F 0013*       db 32,92,95,95,95,95,47,124,95,95,124,32,32,32,32,32,124,95,95,124,32,124,95,95,95,124,32,32,47,92,95,95,95,32,32,62,13,10
       5F 5F 2F 7C 
       5F 5F 7C 20 
       20 20 20 20 
       7C 5F 5F 7C 
       20 7C 5F 5F 
       5F 7C 20 20 
       2F 5C 5F 5F 
       5F 20 20 3E 
       0D 0A       
0422FF 5F 5F 5F 5F 0014*       db 95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,32,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
04233D 5C 5F 5F 5F 0015*       db 92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,13,10
       5F 5F 5F 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       0D 0A       
04237B 20 7C 20 20 0016*       db 32,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       20 20 20 5F 
       5F 5F 2F 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 0D 
       0A          
0423B8 20 7C 20 20 0017*       db 32,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       20 20 7C 20 
       20 20 7C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       0D 0A       
0423F6 20 7C 5F 5F 0018*       db 32,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 7C 20 
       20 20 7C 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       0D 0A       
042434 20 5F 5F 5F 0019*       db 32,95,95,95,95,95,95,95,32,32,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,92,47,95,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 0D 0A 
04247C 20 5C 20 20 0020*       db 32,92,32,32,32,32,32,32,92,32,124,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,47,32,32,32,95,95,95,95,95,47,13,10
       20 20 20 20 
       5C 20 7C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       2F 20 20 20 
       5F 5F 5F 5F 
       5F 2F 0D 0A 
0424C4 20 2F 20 20 0021*       db 32,47,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,32,92,95,95,95,95,95,32,32,92,13,10
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 20 
       5C 5F 5F 5F 
       5F 5F 20 20 
       5C 0D 0A    
04250B 2F 20 20 20 0022*       db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 0D 0A 
042553 5C 5F 5F 5F 0023*       db 92,95,95,95,95,124,95,95,32,32,47,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 0D 0A 
04259B 20 20 20 20 0024*       db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 5C 
       2F 0D 0A    
0425E2 4C 4F 41 44 0025*       db "LOADING UI ...",0
       49 4E 47 20 
       55 49 20 2E 
       2E 2E 00    
0425F1             0046        include "collisions.inc"
0425F1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042600             0002*   ; ====== COLLISION DETECTION ======
042600             0003*   ; --- constants ---
042600             0004*   ; sprite_collisions flags
042600             0005*   ; collides_with_player: equ %00000001
042600             0006*   ; collides_with_laser: equ %00000010
042600             0007*   sprite_alive: equ 6; set when sprite is alive
042600             0008*   sprite_just_died: equ 7; set when sprite just died
042600             0009*   collide_top: equ %00001000
042600             0010*   collide_bottom: equ %00000100
042600             0011*   collide_left: equ %00000010
042600             0012*   collide_right: equ %00000001
042600             0013*   
042600 00 00 00    0014*   collision_table_pointer: dl 0x000000 ; pointer to the sprite in the group being checked for collision
042603             0015*   
042603             0016*   ; check_collision:
042603             0017*   ; Detects collision using bounding box method.
042603             0018*   ; Inputs:
042603             0019*   ;   IX -> Sprite/Tile table for Collider A
042603             0020*   ;   IY -> Sprite/Tile table for Collider B
042603             0021*   ; Outputs:
042603             0022*   ;   a = 0, zero flag set, positive sign, carry reset -> Collision detected
042603             0023*   ;   a = -1, zero flag reset, negative sign, carry set -> No collision detected
042603             0024*   ; Destroys: HL, DE, AF
042603             0025*   check_collision:
042603             0026*   check_collision_box:
042603             0027*   ; Test 1: (ay + ah) - by < 0
042603 21 00 00 00 0028*       ld hl,0                     ; Clear hlu
042607 DD 6E 05    0029*       ld l,(ix+sprite_y+1)        ; Load ay integer part low byte
04260A DD 66 06    0030*       ld h,(ix+sprite_y+2)        ; Load ay integer part high byte
04260D 11 00 00 00 0031*       ld de,0                     ; Clear deu and d
042611 DD 5E 1F    0032*       ld e,(ix+sprite_dim_y)      ; Load ah
042614 19          0033*       add hl,de                   ; (ay + ah)
042615 FD 5E 05    0034*       ld e,(iy+sprite_y+1)        ; Load by integer part low byte
042618 FD 56 06    0035*       ld d,(iy+sprite_y+2)        ; Load by integer part high byte
04261B AF          0036*       xor a                       ; Clear carry
04261C ED 52       0037*       sbc hl,de                   ; (ay + ah) - by
04261E FA 81 26 04 0038*       jp m,@not_collision         ; No collision if negative
042622             0039*   
042622             0040*   ; Test 2: ay - (by + bh) < 0
042622 21 00 00 00 0041*       ld hl,0                     ; Clear hlu
042626 FD 6E 05    0042*       ld l,(iy+sprite_y+1)        ; Load by integer part low byte
042629 FD 66 06    0043*       ld h,(iy+sprite_y+2)        ; Load by integer part high byte
04262C 11 00 00 00 0044*       ld de,0                     ; Clear deu and d
042630 FD 5E 1F    0045*       ld e,(iy+sprite_dim_y)      ; Load bh
042633 19          0046*       add hl,de                   ; (by + bh)
042634 DD 5E 05    0047*       ld e,(ix+sprite_y+1)        ; Load ay integer part low byte
042637 DD 56 06    0048*       ld d,(ix+sprite_y+2)        ; Load ay integer part high byte
04263A AF          0049*       xor a                       ; Clear carry
04263B ED 52       0050*       sbc hl,de                   ; (by + bh) - ay
04263D FA 81 26 04 0051*       jp m,@not_collision         ; No collision if negative
042641             0052*   
042641             0053*   ; Test 3: (ax + aw) - bx < 0
042641 21 00 00 00 0054*       ld hl,0                     ; Clear hlu
042645 DD 6E 02    0055*       ld l,(ix+sprite_x+1)        ; Load ax integer part low byte
042648 DD 66 03    0056*       ld h,(ix+sprite_x+2)        ; Load ax integer part high byte
04264B 11 00 00 00 0057*       ld de,0                     ; Clear deu and d
04264F DD 5E 1E    0058*       ld e,(ix+sprite_dim_x)      ; Load aw
042652 19          0059*       add hl,de                   ; (ax + aw)
042653 FD 5E 02    0060*       ld e,(iy+sprite_x+1)        ; Load bx integer part low byte
042656 FD 56 03    0061*       ld d,(iy+sprite_x+2)        ; Load bx integer part high byte
042659 AF          0062*       xor a                       ; Clear carry
04265A ED 52       0063*       sbc hl,de                   ; (ax + aw) - bx
04265C FA 81 26 04 0064*       jp m,@not_collision         ; No collision if negative
042660             0065*   
042660             0066*   ; Test 4: ax - (bx + bw) < 0
042660 21 00 00 00 0067*       ld hl,0                     ; Clear hlu
042664 FD 6E 02    0068*       ld l,(iy+sprite_x+1)        ; Load bx integer part low byte
042667 FD 66 03    0069*       ld h,(iy+sprite_x+2)        ; Load bx integer part high byte
04266A 11 00 00 00 0070*       ld de,0                     ; Clear deu and d
04266E FD 5E 1E    0071*       ld e,(iy+sprite_dim_x)      ; Load bw
042671 19          0072*       add hl,de                   ; (bx + bw)
042672 DD 5E 02    0073*       ld e,(ix+sprite_x+1)        ; Load ax integer part low byte
042675 DD 56 03    0074*       ld d,(ix+sprite_x+2)        ; Load ax integer part high byte
042678 AF          0075*       xor a                       ; Clear carry
042679 ED 52       0076*       sbc hl,de                   ; (bx + bw) - ax
04267B FA 81 26 04 0077*       jp m,@not_collision         ; No collision if negative
04267F             0078*   
04267F             0079*   ; If all tests pass, collision is detected
04267F             0080*   @is_collision:
04267F AF          0081*       xor a                       ; Clear accumulator and flags (a = 0)
042680 C9          0082*       ret                         ; Return with zero flag set
042681             0083*   
042681             0084*   ; No collision detected
042681             0085*   @not_collision:
042681 3D          0086*       dec a                       ; Set a to -1
042682 C9          0087*       ret                         ; Return with carry set
042683             0088*   ; End check_collision_box
042683             0089*   
042683             0090*   
042683             0091*   ; this routine detects collisions between two collidable objects,
042683             0092*   ; which can include sprites, active tiles, or any screen coordinate
042683             0093*   ; which has been set up with a sprite table structure that includes dim_x
042683             0094*   ; representing the radius of the collidable object
042683             0095*   ; inputs: ix and iy point to the colliding objects' sprite/tile table records
042683             0096*   ; outputs: uh.l = distance - sum of radii
042683             0097*   ;          zero flag set if collision detected
042683             0098*   ;          dx168 and dy168 are also populated with the signed displacements
042683             0099*   ; destroys: everything except indexes
042683             0100*   ; check_collision:
042683             0101*   check_collision_cartesian:
042683             0102*   ; compute dx = x1-x0
042683 DD 27 01    0103*       ld hl,(ix+sprite_x)
042686 FD 17 01    0104*       ld de,(iy+sprite_x)
042689 AF          0105*       xor a ; clear carry
04268A ED 52       0106*       sbc hl,de
04268C 22 2E 0C 04 0107*       ld (dx168),hl ; dx to scratch
042690             0108*   ; compute dy = y1-y0
042690 DD 27 04    0109*       ld hl,(ix+sprite_y)
042693 FD 17 04    0110*       ld de,(iy+sprite_y)
042696 AF          0111*       xor a ; clear carry
042697 ED 52       0112*       sbc hl,de ; hl = dy
042699 22 34 0C 04 0113*       ld (dy168),hl ; dy to scratch
04269D             0114*   ; compute euclidean distance between centers
04269D CD 3A 0C 04 0115*       call distance168 ; uh.l = distance
0426A1             0116*   ; check for overlap by summing half the radii
0426A1 DD 7E 1E    0117*       ld a,(ix+sprite_dim_x)
0426A4 CB 3F       0118*       srl a ; divide by 2
0426A6 FD 5E 1E    0119*       ld e,(iy+sprite_dim_x)
0426A9 CB 3B       0120*       srl e ; divide by 2
0426AB 83          0121*       add a,e
0426AC 11 00 00 00 0122*       ld de,0 ; clear deu and e
0426B0 57          0123*       ld d,a ; ud.e = sum of radii
0426B1 B7          0124*       or a ; clear carry
0426B2 ED 52       0125*       sbc hl,de ; uh.l = distance - sum of radii
0426B4 C8          0126*       ret z ; return collision
0426B5 F0          0127*       ret p ; return no collision
0426B6 AF          0128*       xor a ; return collision
0426B7 C9          0129*       ret
0426B8             0130*   ; end check_collision_cartesian
0426B8             0131*   
0426B8             0132*   ; check collisions of a sprite or tile against a sprite group
0426B8             0133*   ; inputs: iy = pointer to sprite or tile record being checked
0426B8             0134*   ;         ix = pointer to sprite group, b = number of records in sprite group
0426B8             0135*   check_sprite_group_collisions:
0426B8             0136*   @collision_loop:
0426B8 DD 22 00 26 0137*       ld (collision_table_pointer),ix ; update table pointer
       04          
0426BD C5          0138*       push bc ; backup loop counter
0426BE             0139*   ; check sprite_collisions sprite_alive flag to see if sprite is active
0426BE DD CB 1D 76 0140*       bit sprite_alive,(ix+sprite_collisions)
0426C2 CA D8 26 04 0141*       jp z,@next_record ; not alive so skip to next record
0426C6             0142*   ; sprite alive so check for collision
0426C6 CD 03 26 04 0143*       call check_collision
0426CA C2 D8 26 04 0144*       jp nz,@next_record ; no collision
0426CE             0145*   ; set sprite_just_died flag for each entity and return to caller
0426CE C1          0146*       pop bc ; dummy pop to balance stack
0426CF DD CB 1D FE 0147*       set sprite_just_died,(ix+sprite_collisions)
0426D3 FD CB 1D FE 0148*       set sprite_just_died,(iy+sprite_collisions)
0426D7 C9          0149*       ret
0426D8             0150*   @next_record:
0426D8 C1          0151*       pop bc ; get back our loop counter
0426D9 ED 32 40    0152*       lea ix,ix+table_record_size
0426DC 10 DA       0153*       djnz @collision_loop ; loop until we've checked all the records
0426DE             0154*   ; return to caller
0426DE AF          0155*       xor a
0426DF 3C          0156*       inc a ; resets sign flag and a to non-zero indicating no collision
0426E0 C9          0157*       ret
0426E1             0158*   ; end check_sprite_group_collisions
0426E1             0159*   
0426E1             0160*   check_enemy_collision_laser: ; check for collisions with laser
0426E1 DD 21 5E A0 0161*       ld ix,player_lasers_begin
       04          
0426E6 06 04       0162*       ld b,player_lasers_max
0426E8 CD B8 26 04 0163*       call check_sprite_group_collisions
0426EC C9          0164*       ret
0426ED             0165*   ; end check_enemy_collision_laser
0426ED             0166*   
0426ED             0167*   check_enemy_collision_player: ; check for collisions with player
0426ED DD 21 5E A1 0168*       ld ix,player_begin
       04          
0426F2 CD 03 26 04 0169*       call check_collision
0426F6 C0          0170*       ret nz ; no collision so nothing to do
0426F7 DD CB 1D FE 0171*       set sprite_just_died,(ix+sprite_collisions)
0426FB FD CB 1D FE 0172*       set sprite_just_died,(iy+sprite_collisions)
0426FF AF          0173*       xor a ; signal collision detected
042700 C9          0174*       ret
042701             0175*   ; end check_enemy_collision_player
042701             0047        include "enemies.inc"
042701             0001*   move_enemies:
042701             0002*   ; initialize pointers and loop counter
042701 FD 21 9E A1 0003*       ld iy,enemy_sprites_begin ; set iy to first record in table
       04          
042706 06 07       0004*       ld b,table_num_enemy_records ; loop counter
042708 CD 58 96 04 0005*       call move_sprite_group
04270C C9          0006*       ret
04270D             0007*   ; end move_enemies
04270D             0048        include "enemy_fireball.inc"
04270D FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042800             0002*   speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
042800             0003*   fireballs_max: equ 4
042800             0004*   
042800             0005*   fireball_defaults:
042800 03          0006*       db enemy_projectile     ; type
042801 0A 01 00    0007*       dl BUF_FIREBALL_2_000   ; base_bufferId
042804 52 28 04    0008*       dl move_enemy_fireball  ; move_program
042807 40          0009*       db %01000000            ; collisions bit 6 signals sprite alive
042808 10          0010*       db 16                   ; dim_x
042809 10          0011*       db 16                   ; dim_y
04280A 20          0012*       db 32                   ; num_orientations
04280B 02          0013*       db 2                    ; num_animations
04280C 00          0014*       db 0                    ; animation
04280D 08          0015*       db 8                    ; animation_timer
04280E 00          0016*       db 0                    ; move_timer
04280F 00          0017*       db 0                    ; move_step
042810 00          0018*       db 0                    ; points
042811 FE          0019*       db -2                   ; shield_damage
042812 00          0020*       db 0                    ; frame
042813             0021*   
042813             0022*   enemy_spawn_fireball:
042813 21 00 28 04 0023*       ld hl,fireball_defaults
042817 DD 21 5E A2 0024*       ld ix,fireballs_base
       04          
04281C 06 04       0025*       ld b,fireballs_max
04281E CD F0 8F 04 0026*       call spawn_sprite_from_tile
042822 D0          0027*       ret nc ; no carry means no free sprite slots, so we go home
042823             0028*   ; other specific initialization
042823             0029*   ; ------------------------------------------------
042823             0030*   ; copy sprite heading and component velocities from targeting_computer
042823 2A 52 88 04 0031*       ld hl,(Bearing_t)
042827 11 00 80 00 0032*       ld de,128*256 ; rotate 128 degrees
04282B 19          0033*       add hl,de
04282C DD 2F 10    0034*       ld (ix+sprite_heading),hl
04282F 2A 5B 88 04 0035*       ld hl,(Vp_x)
042833 DD 2F 07    0036*       ld (ix+sprite_xvel),hl
042836 2A 5E 88 04 0037*       ld hl,(Vp_y)
04283A DD 2F 0A    0038*       ld (ix+sprite_yvel),hl
04283D             0039*   ; move projectile one frame's distance so it isn't drawn right over turret
04283D DD 27 01    0040*       ld hl,(ix+sprite_x)
042840 DD 17 07    0041*       ld de,(ix+sprite_xvel)
042843 19          0042*       add hl,de
042844 DD 2F 01    0043*       ld (ix+sprite_x),hl
042847 DD 27 04    0044*       ld hl,(ix+sprite_y)
04284A DD 17 0A    0045*       ld de,(ix+sprite_yvel)
04284D 19          0046*       add hl,de
04284E DD 2F 04    0047*       ld (ix+sprite_y),hl
042851 C9          0048*       ret
042852             0049*   ; end enemy_spawn_fireball
042852             0050*   
042852             0051*   move_enemy_fireball:
042852             0052*   ; run the movement program for the fireball enemy
042852 CD D9 96 04 0053*       call move_sprite
042856 3A 6C 95 04 0054*       ld a,(sprite_screen_edge)
04285A B7          0055*       or a ; a will be non-zero if have scrolled off screen
04285B C2 B2 95 04 0056*       jp nz,table_deactivate_sprite
04285F CD ED 26 04 0057*       call check_enemy_collision_player
042863 C2 6F 28 04 0058*       jp nz,@animate ; no collision so do animation
042867 CD 1F 83 04 0059*       call update_shields
04286B C3 13 2A 04 0060*       jp spawn_explosion
04286F             0061*   @animate:
04286F             0062*   ; check the animation timer
04286F FD 35 23    0063*       dec (iy+sprite_animation_timer)
042872 C0          0064*       ret nz ; not time to animate
042873             0065*   ; reset the animation timer and bump animation
042873 3E 08       0066*       ld a,8
042875 FD 77 23    0067*       ld (iy+sprite_animation_timer),a
042878 FD 7E 22    0068*       ld a,(iy+sprite_animation)
04287B 3C          0069*       inc a
04287C E6 01       0070*       and %00000001 ; modulo 2
04287E FD 77 22    0071*       ld (iy+sprite_animation),a
042881 CD 90 97 04 0072*       call sprite_frame_heading_animation ; a, sprite_frame set to heading-based frame
042885 CD 63 20 04 0073*       call vdu_sprite_select_frame
042889 C9          0074*       ret
04288A             0075*   ; end move_enemy_fireball
04288A             0076*   
04288A             0077*   init_enemy_fireballs:
04288A             0078*   ; set pointer to seeker sprite table
04288A FD 21 5E A2 0079*       ld iy,fireballs_base
       04          
04288F FD 7E 00    0080*       ld a,(iy+sprite_id) ; sprite id
042892 1E 04       0081*       ld e,fireballs_max ; sprite loop counter
042894             0082*   ; define seeker sprites
042894             0083*   @sprites_loop:
042894 F5          0084*       push af
042895 D5          0085*       push de
042896 CD 00 20 04 0086*       call vdu_sprite_select
04289A CD 13 20 04 0087*       call vdu_sprite_clear_frames
04289E 21 0A 01 00 0088*       ld hl,BUF_FIREBALL_2_000
0428A2 06 80       0089*       ld b,4*32 ; 4 animations * 32 orientations
0428A4             0090*   @frames_loop:
0428A4 C5          0091*       push bc
0428A5 E5          0092*       push hl
0428A6 CD 55 21 04 0093*       call vdu_sprite_add_buff
0428AA E1          0094*       pop hl
0428AB 23          0095*       inc hl
0428AC C1          0096*       pop bc
0428AD 10 F5       0097*       djnz @frames_loop
0428AF D1          0098*       pop de ; sprite loop counter
0428B0 F1          0099*       pop af ; sprite id
0428B1 3C          0100*       inc a
0428B2 1D          0101*       dec e
0428B3 C2 94 28 04 0102*       jp nz,@sprites_loop
0428B7 C9          0103*       ret
0428B8             0104*   ; end init_enemy_fireballs
0428B8             0049        include "enemy_seeker.inc"
0428B8 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
042900             0002*   
042900 00          0003*   seekers_count: db 0
042901             0004*   seekers_max: equ 3
042901             0005*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
042901             0006*   
042901             0007*   seeker_defaults:
042901 01          0008*       db enemy_air            ; type
042902 4F 01 00    0009*       dl BUF_SEEKER_000       ; base_bufferId
042905 2C 29 04    0010*       dl move_enemy_seeker    ; move_program
042908 40          0011*       db %01000000            ; collisions bit 6 signals sprite alive
042909 10          0012*       db 16                   ; dim_x
04290A 10          0013*       db 16                   ; dim_y
04290B 20          0014*       db 32                   ; num_orientations
04290C 01          0015*       db 1                    ; num_animations
04290D 00          0016*       db 0                    ; animation
04290E 00          0017*       db 0                    ; animation_timer
04290F 01          0018*       db 1                    ; move_timer
042910 00          0019*       db 0                    ; move_step
042911 0A          0020*       db 10                   ; points
042912 FC          0021*       db -4                   ; shield_damage
042913 00          0022*       db 0                    ; frame
042914             0023*   
042914             0024*   enemy_spawn_seeker:
042914 21 01 29 04 0025*       ld hl,seeker_defaults
042918 DD 21 9E A1 0026*       ld ix,seekers_base
       04          
04291D 06 03       0027*       ld b,seekers_max
04291F CD F0 8F 04 0028*       call spawn_sprite_from_tile
042923 D0          0029*       ret nc ; no carry means no free sprite slots, so we go home
042924             0030*   ; other specific initialization
042924 21 80 02 00 0031*       ld hl,speed_seeker
042928 DD 2F 0D    0032*       ld (ix+sprite_vel),hl
04292B C9          0033*       ret
04292C             0034*   ; end enemy_spawn_seeker
04292C             0035*   
04292C             0036*   move_enemy_seeker:
04292C             0037*   ; run the movement program for the seeker enemy
04292C CD 60 29 04 0038*       call en_nav_seek_zag
042930 CD ED 26 04 0039*       call check_enemy_collision_player
042934 CA 58 29 04 0040*       jp z,@player
042938 CD E1 26 04 0041*       call check_enemy_collision_laser
04293C CA 50 29 04 0042*       jp z,@laser
042940             0043*   ; change the animation frame to match heading
042940 FD 7E 00    0044*       ld a,(iy+sprite_id)
042943 CD 00 20 04 0045*       call vdu_sprite_select
042947 CD A5 97 04 0046*       call sprite_frame_heading ; a, sprite_frame set to heading-based frame
04294B CD 63 20 04 0047*       call vdu_sprite_select_frame
04294F C9          0048*       ret
042950             0049*   @laser:
042950 CD 2D 81 04 0050*       call update_score
042954 C3 13 2A 04 0051*       jp spawn_explosion
042958             0052*   @player:
042958 CD 1F 83 04 0053*       call update_shields
04295C C3 13 2A 04 0054*       jp spawn_explosion
042960             0055*   ; end move_enemy_seeker
042960             0056*   
042960             0057*   ; contains the logic for how to move the enemy
042960             0058*   ; and then does the moving
042960             0059*   ; inputs: a fully-populated active sprite table
042960             0060*   ;         player position variables
042960             0061*   ; destroys: everything except index registers
042960             0062*   ; outputs: moving enemies
042960             0063*   en_nav_seek_zag:
042960             0064*   ; set velocity and orientation by player's relative location
042960             0065*   ; move enemies y-axis
042960             0066*   ; where is player relative to us?
042960 CD 00 88 04 0067*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
042964             0068*   ; is player above or below us?
042964 ED 53 48 06 0069*       ld (ude),de ; dy
       04          
042969 3A 4A 06 04 0070*       ld a,(ude+2) ; deu
04296D 17          0071*       rla ; shift sign bit into carry
04296E D2 93 29 04 0072*       jp nc,@zig_zag ; player is below,evade
042972             0073*   ; player is even or above,so home in on current heading
042972 FD 2F 10    0074*       ld (iy+sprite_heading),hl ; save sprite heading
042975             0075*   ; fall through to @compute_velocities
042975             0076*   @compute_velocities:
042975 CD 7A 97 04 0077*       call sprite_compute_velocities
042979 CD D9 96 04 0078*       call move_sprite ; move the sprite
04297D B7          0079*       or a ; a will be non-zero if have collided with screen edge
04297E C2 9E 29 04 0080*       jp nz,@zag_switch ; switch direction
042982 C9          0081*       ret ; didn't hit edge, nothing else to do
042983             0082*   @zig_zag_start:
042983 FD 2A 69 95 0083*       ld iy,(table_pointer)
       04          
042988 CD AE 09 04 0084*       call rand_8
04298C E6 3F       0085*       and %00111111 ; limit it to 64
04298E CB DF       0086*       set 3,a ; make sure it's at least 8
042990 FD 77 24    0087*       ld (iy+sprite_move_timer),a ; store it
042993             0088*       ; fall through to @zig_zag
042993             0089*   @zig_zag:
042993 FD 7E 24    0090*       ld a,(iy+sprite_move_timer)
042996 3D          0091*       dec a
042997 FD 77 24    0092*       ld (iy+sprite_move_timer),a
04299A C2 C0 29 04 0093*       jp nz,@zig_zag_no_switch
04299E             0094*   @zag_switch:
04299E             0095*       ; otherwise flip direction and restart timer
04299E FD 7E 25    0096*       ld a,(iy+sprite_move_step)
0429A1 EE 01       0097*       xor %1 ; flips bit zero
0429A3 FD 77 25    0098*       ld (iy+sprite_move_step),a ; store it
0429A6 C2 B5 29 04 0099*       jp nz,@F ; zag right
0429AA             0100*   ;otherwise zag left
0429AA 21 00 A0 00 0101*       ld hl,160*256; southwest heading
0429AE FD 2F 10    0102*       ld (iy+sprite_heading),hl ; save sprite heading
0429B1 C3 83 29 04 0103*       jp @zig_zag_start
0429B5             0104*   @@: ; zag right
0429B5 21 00 60 00 0105*       ld hl,96*256; southeast heading
0429B9 FD 2F 10    0106*       ld (iy+sprite_heading),hl ; save sprite heading
0429BC C3 83 29 04 0107*       jp @zig_zag_start
0429C0             0108*   @zig_zag_no_switch:
0429C0             0109*       ; ld a,(sprite_orientation)
0429C0 FD 27 10    0110*       ld hl,(iy+sprite_heading)
0429C3 C3 75 29 04 0111*       jp @compute_velocities
0429C7             0112*   ; end en_nav_seek_zag
0429C7             0113*   
0429C7             0114*   
0429C7             0115*   init_enemy_seekers:
0429C7             0116*   ; set pointer to seeker sprite table
0429C7 FD 21 9E A1 0117*       ld iy,seekers_base
       04          
0429CC FD 7E 00    0118*       ld a,(iy+sprite_id) ; sprite id
0429CF 1E 03       0119*       ld e,seekers_max ; sprite loop counter
0429D1             0120*   ; define seeker sprites
0429D1             0121*   @sprites_loop:
0429D1 F5          0122*       push af
0429D2 D5          0123*       push de
0429D3 CD 00 20 04 0124*   	call vdu_sprite_select
0429D7 CD 13 20 04 0125*   	call vdu_sprite_clear_frames
0429DB 21 4F 01 00 0126*   	ld hl,BUF_SEEKER_000
0429DF 06 20       0127*   	ld b,32 ; 32 bitmaps for seeker
0429E1             0128*   @frames_loop:
0429E1 C5          0129*   	push bc
0429E2 E5          0130*   	push hl
0429E3 CD 55 21 04 0131*   	call vdu_sprite_add_buff
0429E7 E1          0132*   	pop hl
0429E8 23          0133*   	inc hl
0429E9 C1          0134*   	pop bc
0429EA 10 F5       0135*   	djnz @frames_loop
0429EC D1          0136*       pop de ; sprite loop counter
0429ED F1          0137*       pop af ; sprite id
0429EE 3C          0138*       inc a
0429EF 1D          0139*       dec e
0429F0 C2 D1 29 04 0140*       jp nz,@sprites_loop
0429F4 C9          0141*       ret
0429F5             0142*   ; end init_enemy_seekers
0429F5             0050        include "explosion.inc"
0429F5 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF    
042A00             0002*   
042A00             0003*   explosions_max: equ 8
042A00             0004*   explosion_defaults:
042A00 04          0005*       db explosion            ; type
042A01 05 01 00    0006*       dl BUF_EXPLOSION_A	    ; base_bufferId
042A04 5D 2A 04    0007*       dl move_explosion	    ; move_program
042A07 40          0008*       db %01000000            ; collisions bit 6 signals sprite alive
042A08 07          0009*       db 7	                ; dim_x
042A09 07          0010*       db 7                    ; dim_y
042A0A 01          0011*       db 1                    ; num_orientations
042A0B 05          0012*       db 5                    ; num_animations
042A0C 05          0013*       db 5	                ; animation
042A0D 08          0014*       db 8	                ; animation_timer
042A0E 00          0015*       db 0	                ; move_timer
042A0F 00          0016*       db 0	                ; move_step
042A10 00          0017*       db 0	                ; points
042A11 00          0018*       db 0	                ; shield_damage
042A12 00          0019*       db 0                    ; frame
042A13             0020*   
042A13             0021*   spawn_explosion:
042A13 21 00 2A 04 0022*       ld hl,explosion_defaults
042A17 DD 21 5E A3 0023*       ld ix,explosions_base
       04          
042A1C 06 08       0024*       ld b,explosions_max
042A1E CD 26 96 04 0025*       call spawn_sprite_from_sprite
042A22 D2 B2 95 04 0026*       jp nc,table_deactivate_sprite ; no carry means no free sprite slots, so we deactivate parent sprite and go home
042A26             0027*   ; other specific initialization
042A26 21 00 00 00 0028*       ld hl,0
042A2A DD 2F 07    0029*       ld (ix+sprite_xvel),hl
042A2D 21 00 01 00 0030*       ld hl,1*256
042A31 DD 2F 0A    0031*       ld (ix+sprite_yvel),hl
042A34             0032*   ; deactivate parent sprite
042A34 C3 B2 95 04 0033*       jp table_deactivate_sprite
042A38             0034*   ; end spawn_explosion
042A38             0035*   
042A38             0036*   tile_spawn_explosion:
042A38 21 00 2A 04 0037*       ld hl,explosion_defaults
042A3C DD 21 5E A3 0038*       ld ix,explosions_base
       04          
042A41 06 08       0039*       ld b,explosions_max
042A43 CD F0 8F 04 0040*       call spawn_sprite_from_tile
042A47 D2 83 8C 04 0041*       jp nc,table_deactivate_tile ; no carry means no free sprite slots, so we deactivate parent tile and go home
042A4B             0042*   ; other specific initialization
042A4B 21 00 00 00 0043*       ld hl,0
042A4F DD 2F 07    0044*       ld (ix+sprite_xvel),hl
042A52 21 00 01 00 0045*       ld hl,1*256
042A56 DD 2F 0A    0046*       ld (ix+sprite_yvel),hl
042A59             0047*   ; deactivate parent sprite
042A59 C3 83 8C 04 0048*       jp table_deactivate_tile
042A5D             0049*   ; end tile_spawn_explosion
042A5D             0050*   
042A5D             0051*   move_explosion:
042A5D             0052*   ; run the movement program for the explosion
042A5D CD D9 96 04 0053*       call move_sprite
042A61 B7          0054*       or a ; a will be non-zero if have scrolled off screen
042A62 C2 B2 95 04 0055*       jp nz,table_deactivate_sprite
042A66             0056*   ; do the animations
042A66 FD 35 23    0057*       dec (iy+sprite_animation_timer)
042A69 C0          0058*       ret nz ; not time to bump animation frame
042A6A FD 34 28    0059*       inc (iy+sprite_frame)
042A6D FD 35 22    0060*       dec (iy+sprite_animation)
042A70 CA B2 95 04 0061*       jp z,table_deactivate_sprite ; reached the end of the animations
042A74 3E 08       0062*       ld a,8 ; reset animation timer
042A76 FD 77 23    0063*       ld (iy+sprite_animation_timer),a
042A79 C9          0064*       ret
042A7A             0065*   ; end move_explosion
042A7A             0066*   
042A7A             0067*   move_explosions:
042A7A             0068*   ; initialize pointers and loop counter
042A7A FD 21 5E A3 0069*       ld iy,explosions_base ; set iy to first record in table
       04          
042A7F 06 08       0070*       ld b,explosions_max ; loop counter
042A81 CD 58 96 04 0071*       call move_sprite_group
042A85 C9          0072*       ret
042A86             0073*   ; end move_explosions
042A86             0074*   
042A86             0075*   init_explosions:
042A86             0076*   ; set pointer to explosion sprite table
042A86 FD 21 5E A3 0077*       ld iy,explosions_base
       04          
042A8B FD 7E 00    0078*       ld a,(iy+sprite_id) ; sprite id
042A8E 1E 08       0079*       ld e,explosions_max ; sprite loop counter
042A90             0080*   ; define explosion sprites
042A90             0081*   @sprites_loop:
042A90 F5          0082*       push af
042A91 D5          0083*       push de
042A92 CD 00 20 04 0084*   	call vdu_sprite_select
042A96 CD 13 20 04 0085*   	call vdu_sprite_clear_frames
042A9A 21 05 01 00 0086*   	ld hl,BUF_EXPLOSION_A
042A9E 06 05       0087*   	ld b,5 ; 5 bitmaps for explosion
042AA0             0088*   @frames_loop:
042AA0 C5          0089*   	push bc
042AA1 E5          0090*   	push hl
042AA2 CD 55 21 04 0091*   	call vdu_sprite_add_buff
042AA6 E1          0092*   	pop hl
042AA7 23          0093*   	inc hl
042AA8 C1          0094*   	pop bc
042AA9 10 F5       0095*   	djnz @frames_loop
042AAB D1          0096*       pop de ; sprite loop counter
042AAC F1          0097*       pop af ; sprite id
042AAD 3C          0098*       inc a
042AAE 1D          0099*       dec e
042AAF C2 90 2A 04 0100*       jp nz,@sprites_loop
042AB3 C9          0101*       ret
042AB4             0102*   ; end init_explosions
042AB4             0051        include "fonts_list.inc"
042AB4 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
042B00             0002*   
042B00             0003*   ; Generated by asm_config_editor.py
042B00             0004*   font_list_record_size: equ 12
042B00             0005*   font_list_width: equ 0
042B00             0006*   font_list_height: equ 3
042B00             0007*   font_list_bufferId: equ 6
042B00             0008*   font_list_filename: equ 9
042B00             0009*   
042B00             0010*   num_fonts: equ 18
042B00             0011*   
042B00             0012*   ; Index list:
042B00             0013*   amiga_forever_16x24: equ 64000
042B00             0014*   amiga_forever_8x16: equ 64001
042B00             0015*   amiga_forever_8x8: equ 64002
042B00             0016*   computer_pixel_7_10x15: equ 64003
042B00             0017*   computer_pixel_7_10x24: equ 64004
042B00             0018*   computer_pixel_7_8x16: equ 64005
042B00             0019*   Lat2_Terminus12x6_6x12: equ 64006
042B00             0020*   Lat2_TerminusBold14_8x14: equ 64007
042B00             0021*   Lat2_VGA14_8x14: equ 64008
042B00             0022*   Lat2_VGA16_8x16: equ 64009
042B00             0023*   Lat2_VGA8_8x8: equ 64010
042B00             0024*   Lat7_Fixed13_8x13: equ 64011
042B00             0025*   Lat7_Terminus12x6_6x12: equ 64012
042B00             0026*   Lat7_TerminusBold16_8x16: equ 64013
042B00             0027*   Lat7_VGA14_8x14: equ 64014
042B00             0028*   Lat7_VGA8x8: equ 64015
042B00             0029*   scriptorium_12x14: equ 64016
042B00             0030*   Squarewave_Bold_8x12: equ 64017
042B00             0031*   
042B00             0032*   font_list: ; width; height; bufferId; filename;:
042B00 10 00 00 18 0033*   	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 D8 2B 04 
042B0C 08 00 00 10 0034*   	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 F7 2B 04 
042B18 08 00 00 08 0035*   	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 15 2C 04 
042B24 0A 00 00 0F 0036*   	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 32 2C 04 
042B30 0A 00 00 18 0037*   	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 54 2C 04 
042B3C 08 00 00 10 0038*   	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 76 2C 04 
042B48 06 00 00 0C 0039*   	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 97 2C 04 
042B54 08 00 00 0E 0040*   	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 B9 2C 04 
042B60 08 00 00 0E 0041*   	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 DD 2C 04 
042B6C 08 00 00 10 0042*   	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 F8 2C 04 
042B78 08 00 00 08 0043*   	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 13 2D 04 
042B84 08 00 00 0D 0044*   	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 2C 2D 04 
042B90 06 00 00 0C 0045*   	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 49 2D 04 
042B9C 08 00 00 10 0046*   	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 6B 2D 04 
042BA8 08 00 00 0E 0047*   	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 8F 2D 04 
042BB4 08 00 00 08 0048*   	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 AA 2D 04 
042BC0 0C 00 00 0E 0049*   	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 C3 2D 04 
042BCC 08 00 00 0C 0050*   	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 E0 2D 04 
042BD8             0051*   
042BD8             0052*   ; files_list: ; filename:
042BD8 66 6F 6E 74 0053*   fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
042BF7 66 6F 6E 74 0054*   fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
042C15 66 6F 6E 74 0055*   fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042C32 66 6F 6E 74 0056*   fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
042C54 66 6F 6E 74 0057*   fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
042C76 66 6F 6E 74 0058*   fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
042C97 66 6F 6E 74 0059*   fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
042CB9 66 6F 6E 74 0060*   fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
042CDD 66 6F 6E 74 0061*   fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
042CF8 66 6F 6E 74 0062*   fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
042D13 66 6F 6E 74 0063*   fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042D2C 66 6F 6E 74 0064*   fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
042D49 66 6F 6E 74 0065*   fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
042D6B 66 6F 6E 74 0066*   fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
042D8F 66 6F 6E 74 0067*   fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
042DAA 66 6F 6E 74 0068*   fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042DC3 66 6F 6E 74 0069*   fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
042DE0 66 6F 6E 74 0070*   fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
042E00             0052        include "images_bg.inc"
042E00             0001*   ; Generated by make_images.py
042E00             0002*   
042E00             0003*   bg_num_images: equ 8
042E00             0004*   
042E00             0005*   ; buffer_ids:
042E00             0006*   BUF_BG_STARS_0: equ 1024
042E00             0007*   BUF_BG_STARS_1: equ 1025
042E00             0008*   BUF_BG_STARS_2: equ 1026
042E00             0009*   BUF_BG_STARS_3: equ 1027
042E00             0010*   BUF_BG_STARS_4: equ 1028
042E00             0011*   BUF_BG_STARS_5: equ 1029
042E00             0012*   BUF_BG_STARS_6: equ 1030
042E00             0013*   BUF_BG_STARS_7: equ 1031
042E00             0014*   
042E00             0015*   bg_image_list: ; type; width; height; size; filename; bufferId:
042E00 01 00 00 00 0016*   	dl 1, 256, 256, 65536, fn_bg_stars_0, 1024
       01 00 00 01 
       00 00 00 01 
       90 2E 04 00 
       04 00       
042E12 01 00 00 00 0017*   	dl 1, 256, 256, 65536, fn_bg_stars_1, 1025
       01 00 00 01 
       00 00 00 01 
       A4 2E 04 01 
       04 00       
042E24 01 00 00 00 0018*   	dl 1, 256, 256, 65536, fn_bg_stars_2, 1026
       01 00 00 01 
       00 00 00 01 
       B8 2E 04 02 
       04 00       
042E36 01 00 00 00 0019*   	dl 1, 256, 256, 65536, fn_bg_stars_3, 1027
       01 00 00 01 
       00 00 00 01 
       CC 2E 04 03 
       04 00       
042E48 01 00 00 00 0020*   	dl 1, 256, 256, 65536, fn_bg_stars_4, 1028
       01 00 00 01 
       00 00 00 01 
       E0 2E 04 04 
       04 00       
042E5A 01 00 00 00 0021*   	dl 1, 256, 256, 65536, fn_bg_stars_5, 1029
       01 00 00 01 
       00 00 00 01 
       F4 2E 04 05 
       04 00       
042E6C 01 00 00 00 0022*   	dl 1, 256, 256, 65536, fn_bg_stars_6, 1030
       01 00 00 01 
       00 00 00 01 
       08 2F 04 06 
       04 00       
042E7E 01 00 00 00 0023*   	dl 1, 256, 256, 65536, fn_bg_stars_7, 1031
       01 00 00 01 
       00 00 00 01 
       1C 2F 04 07 
       04 00       
042E90             0024*   
042E90             0025*   ; files_list: ; filename:
042E90 62 67 2F 62 0026*   fn_bg_stars_0: db "bg/bg_stars_0.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       30 2E 72 67 
       62 61 32 00 
042EA4 62 67 2F 62 0027*   fn_bg_stars_1: db "bg/bg_stars_1.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       31 2E 72 67 
       62 61 32 00 
042EB8 62 67 2F 62 0028*   fn_bg_stars_2: db "bg/bg_stars_2.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       32 2E 72 67 
       62 61 32 00 
042ECC 62 67 2F 62 0029*   fn_bg_stars_3: db "bg/bg_stars_3.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       33 2E 72 67 
       62 61 32 00 
042EE0 62 67 2F 62 0030*   fn_bg_stars_4: db "bg/bg_stars_4.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       34 2E 72 67 
       62 61 32 00 
042EF4 62 67 2F 62 0031*   fn_bg_stars_5: db "bg/bg_stars_5.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       35 2E 72 67 
       62 61 32 00 
042F08 62 67 2F 62 0032*   fn_bg_stars_6: db "bg/bg_stars_6.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       36 2E 72 67 
       62 61 32 00 
042F1C 62 67 2F 62 0033*   fn_bg_stars_7: db "bg/bg_stars_7.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       37 2E 72 67 
       62 61 32 00 
042F30             0053        include "images_tiles_dg.inc"
042F30             0001*   ; Generated by tiles_dg.py
042F30             0002*   
042F30             0003*   tiles_dg_num_images: equ 187
042F30             0004*   
042F30             0005*   ; bufferIds:
042F30             0006*   
042F30             0007*   
042F30             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
042F30 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       56 3C 04 00 
       02 00       
042F42 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       6B 3C 04 01 
       02 00       
042F54 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       80 3C 04 02 
       02 00       
042F66 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       95 3C 04 03 
       02 00       
042F78 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       AA 3C 04 04 
       02 00       
042F8A 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       BF 3C 04 05 
       02 00       
042F9C 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       D4 3C 04 06 
       02 00       
042FAE 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       E9 3C 04 07 
       02 00       
042FC0 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       FE 3C 04 08 
       02 00       
042FD2 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       13 3D 04 09 
       02 00       
042FE4 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       28 3D 04 0A 
       02 00       
042FF6 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       3D 3D 04 0B 
       02 00       
043008 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       52 3D 04 10 
       02 00       
04301A 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       67 3D 04 21 
       02 00       
04302C 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       7C 3D 04 22 
       02 00       
04303E 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       91 3D 04 23 
       02 00       
043050 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       A6 3D 04 24 
       02 00       
043062 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       BB 3D 04 25 
       02 00       
043074 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       D0 3D 04 26 
       02 00       
043086 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       E5 3D 04 27 
       02 00       
043098 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       FA 3D 04 28 
       02 00       
0430AA 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_045, 557
       00 00 10 00 
       00 00 01 00 
       0F 3E 04 2D 
       02 00       
0430BC 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_046, 558
       00 00 10 00 
       00 00 01 00 
       24 3E 04 2E 
       02 00       
0430CE 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_047, 559
       00 00 10 00 
       00 00 01 00 
       39 3E 04 2F 
       02 00       
0430E0 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_048, 560
       00 00 10 00 
       00 00 01 00 
       4E 3E 04 30 
       02 00       
0430F2 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       63 3E 04 31 
       02 00       
043104 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       78 3E 04 32 
       02 00       
043116 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       8D 3E 04 33 
       02 00       
043128 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       A2 3E 04 34 
       02 00       
04313A 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       B7 3E 04 35 
       02 00       
04314C 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       CC 3E 04 36 
       02 00       
04315E 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       E1 3E 04 37 
       02 00       
043170 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       F6 3E 04 38 
       02 00       
043182 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       0B 3F 04 39 
       02 00       
043194 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       20 3F 04 3A 
       02 00       
0431A6 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       35 3F 04 3B 
       02 00       
0431B8 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_061, 573
       00 00 10 00 
       00 00 01 00 
       4A 3F 04 3D 
       02 00       
0431CA 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_062, 574
       00 00 10 00 
       00 00 01 00 
       5F 3F 04 3E 
       02 00       
0431DC 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_063, 575
       00 00 10 00 
       00 00 01 00 
       74 3F 04 3F 
       02 00       
0431EE 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_064, 576
       00 00 10 00 
       00 00 01 00 
       89 3F 04 40 
       02 00       
043200 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       9E 3F 04 41 
       02 00       
043212 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       B3 3F 04 42 
       02 00       
043224 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       C8 3F 04 43 
       02 00       
043236 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       DD 3F 04 44 
       02 00       
043248 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       F2 3F 04 45 
       02 00       
04325A 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       07 40 04 46 
       02 00       
04326C 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       1C 40 04 47 
       02 00       
04327E 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       31 40 04 48 
       02 00       
043290 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       46 40 04 49 
       02 00       
0432A2 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       5B 40 04 4A 
       02 00       
0432B4 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       70 40 04 4B 
       02 00       
0432C6 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_076, 588
       00 00 10 00 
       00 00 01 00 
       85 40 04 4C 
       02 00       
0432D8 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_077, 589
       00 00 10 00 
       00 00 01 00 
       9A 40 04 4D 
       02 00       
0432EA 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       AF 40 04 51 
       02 00       
0432FC 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       C4 40 04 52 
       02 00       
04330E 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       D9 40 04 53 
       02 00       
043320 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       EE 40 04 54 
       02 00       
043332 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       03 41 04 55 
       02 00       
043344 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       18 41 04 56 
       02 00       
043356 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       2D 41 04 57 
       02 00       
043368 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       42 41 04 58 
       02 00       
04337A 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       57 41 04 59 
       02 00       
04338C 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       6C 41 04 5A 
       02 00       
04339E 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       81 41 04 5B 
       02 00       
0433B0 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_092, 604
       00 00 10 00 
       00 00 01 00 
       96 41 04 5C 
       02 00       
0433C2 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_093, 605
       00 00 10 00 
       00 00 01 00 
       AB 41 04 5D 
       02 00       
0433D4 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       C0 41 04 61 
       02 00       
0433E6 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       D5 41 04 62 
       02 00       
0433F8 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       EA 41 04 63 
       02 00       
04340A 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       FF 41 04 64 
       02 00       
04341C 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       14 42 04 65 
       02 00       
04342E 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       29 42 04 66 
       02 00       
043440 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       3E 42 04 67 
       02 00       
043452 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       53 42 04 68 
       02 00       
043464 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       68 42 04 69 
       02 00       
043476 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       7D 42 04 6A 
       02 00       
043488 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       92 42 04 6B 
       02 00       
04349A 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       A7 42 04 6C 
       02 00       
0434AC 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       BC 42 04 71 
       02 00       
0434BE 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       D1 42 04 72 
       02 00       
0434D0 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       E6 42 04 73 
       02 00       
0434E2 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       FB 42 04 74 
       02 00       
0434F4 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       10 43 04 75 
       02 00       
043506 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       25 43 04 76 
       02 00       
043518 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       3A 43 04 77 
       02 00       
04352A 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       4F 43 04 78 
       02 00       
04353C 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       64 43 04 79 
       02 00       
04354E 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       79 43 04 7A 
       02 00       
043560 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       8E 43 04 7B 
       02 00       
043572 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       A3 43 04 81 
       02 00       
043584 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       B8 43 04 82 
       02 00       
043596 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       CD 43 04 83 
       02 00       
0435A8 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       E2 43 04 84 
       02 00       
0435BA 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       F7 43 04 85 
       02 00       
0435CC 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       0C 44 04 86 
       02 00       
0435DE 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       21 44 04 87 
       02 00       
0435F0 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       36 44 04 88 
       02 00       
043602 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       4B 44 04 89 
       02 00       
043614 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       60 44 04 8A 
       02 00       
043626 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       75 44 04 8B 
       02 00       
043638 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       8A 44 04 8C 
       02 00       
04364A 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       9F 44 04 91 
       02 00       
04365C 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       B4 44 04 92 
       02 00       
04366E 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       C9 44 04 93 
       02 00       
043680 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       DE 44 04 94 
       02 00       
043692 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       F3 44 04 95 
       02 00       
0436A4 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       08 45 04 96 
       02 00       
0436B6 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       1D 45 04 97 
       02 00       
0436C8 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       32 45 04 98 
       02 00       
0436DA 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       47 45 04 99 
       02 00       
0436EC 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       5C 45 04 9A 
       02 00       
0436FE 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       71 45 04 9B 
       02 00       
043710 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       86 45 04 9C 
       02 00       
043722 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       9B 45 04 A1 
       02 00       
043734 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       B0 45 04 A2 
       02 00       
043746 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       C5 45 04 A3 
       02 00       
043758 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       DA 45 04 A4 
       02 00       
04376A 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       EF 45 04 A5 
       02 00       
04377C 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       04 46 04 A6 
       02 00       
04378E 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       19 46 04 A7 
       02 00       
0437A0 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       2E 46 04 A8 
       02 00       
0437B2 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       43 46 04 A9 
       02 00       
0437C4 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       58 46 04 AA 
       02 00       
0437D6 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       6D 46 04 AB 
       02 00       
0437E8 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       82 46 04 AC 
       02 00       
0437FA 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_174, 686
       00 00 10 00 
       00 00 01 00 
       97 46 04 AE 
       02 00       
04380C 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_175, 687
       00 00 10 00 
       00 00 01 00 
       AC 46 04 AF 
       02 00       
04381E 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_176, 688
       00 00 10 00 
       00 00 01 00 
       C1 46 04 B0 
       02 00       
043830 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       D6 46 04 B1 
       02 00       
043842 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       EB 46 04 B2 
       02 00       
043854 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       00 47 04 B3 
       02 00       
043866 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       15 47 04 B4 
       02 00       
043878 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       2A 47 04 B5 
       02 00       
04388A 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       3F 47 04 B6 
       02 00       
04389C 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       54 47 04 B7 
       02 00       
0438AE 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       69 47 04 B8 
       02 00       
0438C0 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       7E 47 04 B9 
       02 00       
0438D2 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       93 47 04 BA 
       02 00       
0438E4 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       A8 47 04 BB 
       02 00       
0438F6 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       BD 47 04 BC 
       02 00       
043908 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_190, 702
       00 00 10 00 
       00 00 01 00 
       D2 47 04 BE 
       02 00       
04391A 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_191, 703
       00 00 10 00 
       00 00 01 00 
       E7 47 04 BF 
       02 00       
04392C 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_192, 704
       00 00 10 00 
       00 00 01 00 
       FC 47 04 C0 
       02 00       
04393E 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       11 48 04 C1 
       02 00       
043950 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       26 48 04 C2 
       02 00       
043962 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       3B 48 04 C3 
       02 00       
043974 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       50 48 04 C4 
       02 00       
043986 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       65 48 04 C5 
       02 00       
043998 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       7A 48 04 C6 
       02 00       
0439AA 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       8F 48 04 C7 
       02 00       
0439BC 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       A4 48 04 C8 
       02 00       
0439CE 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       B9 48 04 C9 
       02 00       
0439E0 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       CE 48 04 CA 
       02 00       
0439F2 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       E3 48 04 CB 
       02 00       
043A04 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       F8 48 04 CC 
       02 00       
043A16 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_206, 718
       00 00 10 00 
       00 00 01 00 
       0D 49 04 CE 
       02 00       
043A28 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_207, 719
       00 00 10 00 
       00 00 01 00 
       22 49 04 CF 
       02 00       
043A3A 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_208, 720
       00 00 10 00 
       00 00 01 00 
       37 49 04 D0 
       02 00       
043A4C 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       4C 49 04 D1 
       02 00       
043A5E 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       61 49 04 D2 
       02 00       
043A70 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       76 49 04 D3 
       02 00       
043A82 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       8B 49 04 D4 
       02 00       
043A94 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       A0 49 04 D5 
       02 00       
043AA6 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       B5 49 04 D6 
       02 00       
043AB8 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       CA 49 04 D7 
       02 00       
043ACA 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       DF 49 04 D8 
       02 00       
043ADC 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       F4 49 04 D9 
       02 00       
043AEE 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       09 4A 04 DA 
       02 00       
043B00 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       1E 4A 04 DB 
       02 00       
043B12 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       33 4A 04 DC 
       02 00       
043B24 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       48 4A 04 E1 
       02 00       
043B36 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       5D 4A 04 E2 
       02 00       
043B48 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       72 4A 04 E3 
       02 00       
043B5A 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       87 4A 04 E4 
       02 00       
043B6C 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       9C 4A 04 E5 
       02 00       
043B7E 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       B1 4A 04 E6 
       02 00       
043B90 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       C6 4A 04 E7 
       02 00       
043BA2 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       DB 4A 04 E8 
       02 00       
043BB4 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       F0 4A 04 E9 
       02 00       
043BC6 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       05 4B 04 EA 
       02 00       
043BD8 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       1A 4B 04 EB 
       02 00       
043BEA 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       2F 4B 04 EC 
       02 00       
043BFC 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       44 4B 04 F1 
       02 00       
043C0E 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       59 4B 04 F2 
       02 00       
043C20 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       6E 4B 04 F5 
       02 00       
043C32 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       83 4B 04 F6 
       02 00       
043C44 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       98 4B 04 F8 
       02 00       
043C56             0196*   
043C56             0197*   tiles_dg_files_list: ; filename:
043C56 74 69 6C 65 0198*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
043C6B 74 69 6C 65 0199*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
043C80 74 69 6C 65 0200*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
043C95 74 69 6C 65 0201*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
043CAA 74 69 6C 65 0202*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
043CBF 74 69 6C 65 0203*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
043CD4 74 69 6C 65 0204*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
043CE9 74 69 6C 65 0205*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
043CFE 74 69 6C 65 0206*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
043D13 74 69 6C 65 0207*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
043D28 74 69 6C 65 0208*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
043D3D 74 69 6C 65 0209*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
043D52 74 69 6C 65 0210*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
043D67 74 69 6C 65 0211*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
043D7C 74 69 6C 65 0212*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
043D91 74 69 6C 65 0213*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
043DA6 74 69 6C 65 0214*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
043DBB 74 69 6C 65 0215*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
043DD0 74 69 6C 65 0216*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
043DE5 74 69 6C 65 0217*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
043DFA 74 69 6C 65 0218*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
043E0F 74 69 6C 65 0219*   fn_dg_045: db "tiles/dg/0/045.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 35 2E 72 
       67 62 61 32 
       00          
043E24 74 69 6C 65 0220*   fn_dg_046: db "tiles/dg/0/046.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 36 2E 72 
       67 62 61 32 
       00          
043E39 74 69 6C 65 0221*   fn_dg_047: db "tiles/dg/0/047.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 37 2E 72 
       67 62 61 32 
       00          
043E4E 74 69 6C 65 0222*   fn_dg_048: db "tiles/dg/0/048.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
043E63 74 69 6C 65 0223*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
043E78 74 69 6C 65 0224*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
043E8D 74 69 6C 65 0225*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
043EA2 74 69 6C 65 0226*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
043EB7 74 69 6C 65 0227*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
043ECC 74 69 6C 65 0228*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
043EE1 74 69 6C 65 0229*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
043EF6 74 69 6C 65 0230*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
043F0B 74 69 6C 65 0231*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
043F20 74 69 6C 65 0232*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043F35 74 69 6C 65 0233*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
043F4A 74 69 6C 65 0234*   fn_dg_061: db "tiles/dg/0/061.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 31 2E 72 
       67 62 61 32 
       00          
043F5F 74 69 6C 65 0235*   fn_dg_062: db "tiles/dg/0/062.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 32 2E 72 
       67 62 61 32 
       00          
043F74 74 69 6C 65 0236*   fn_dg_063: db "tiles/dg/0/063.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 33 2E 72 
       67 62 61 32 
       00          
043F89 74 69 6C 65 0237*   fn_dg_064: db "tiles/dg/0/064.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
043F9E 74 69 6C 65 0238*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
043FB3 74 69 6C 65 0239*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
043FC8 74 69 6C 65 0240*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
043FDD 74 69 6C 65 0241*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
043FF2 74 69 6C 65 0242*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
044007 74 69 6C 65 0243*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
04401C 74 69 6C 65 0244*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
044031 74 69 6C 65 0245*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044046 74 69 6C 65 0246*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
04405B 74 69 6C 65 0247*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
044070 74 69 6C 65 0248*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
044085 74 69 6C 65 0249*   fn_dg_076: db "tiles/dg/0/076.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 36 2E 72 
       67 62 61 32 
       00          
04409A 74 69 6C 65 0250*   fn_dg_077: db "tiles/dg/0/077.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 37 2E 72 
       67 62 61 32 
       00          
0440AF 74 69 6C 65 0251*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
0440C4 74 69 6C 65 0252*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
0440D9 74 69 6C 65 0253*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
0440EE 74 69 6C 65 0254*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
044103 74 69 6C 65 0255*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
044118 74 69 6C 65 0256*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
04412D 74 69 6C 65 0257*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
044142 74 69 6C 65 0258*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044157 74 69 6C 65 0259*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
04416C 74 69 6C 65 0260*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
044181 74 69 6C 65 0261*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
044196 74 69 6C 65 0262*   fn_dg_092: db "tiles/dg/0/092.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 32 2E 72 
       67 62 61 32 
       00          
0441AB 74 69 6C 65 0263*   fn_dg_093: db "tiles/dg/0/093.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 33 2E 72 
       67 62 61 32 
       00          
0441C0 74 69 6C 65 0264*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
0441D5 74 69 6C 65 0265*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
0441EA 74 69 6C 65 0266*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
0441FF 74 69 6C 65 0267*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
044214 74 69 6C 65 0268*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
044229 74 69 6C 65 0269*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
04423E 74 69 6C 65 0270*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
044253 74 69 6C 65 0271*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044268 74 69 6C 65 0272*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
04427D 74 69 6C 65 0273*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
044292 74 69 6C 65 0274*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
0442A7 74 69 6C 65 0275*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
0442BC 74 69 6C 65 0276*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
0442D1 74 69 6C 65 0277*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
0442E6 74 69 6C 65 0278*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
0442FB 74 69 6C 65 0279*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
044310 74 69 6C 65 0280*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
044325 74 69 6C 65 0281*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
04433A 74 69 6C 65 0282*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
04434F 74 69 6C 65 0283*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044364 74 69 6C 65 0284*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
044379 74 69 6C 65 0285*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
04438E 74 69 6C 65 0286*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
0443A3 74 69 6C 65 0287*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
0443B8 74 69 6C 65 0288*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
0443CD 74 69 6C 65 0289*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
0443E2 74 69 6C 65 0290*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
0443F7 74 69 6C 65 0291*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
04440C 74 69 6C 65 0292*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
044421 74 69 6C 65 0293*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
044436 74 69 6C 65 0294*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
04444B 74 69 6C 65 0295*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
044460 74 69 6C 65 0296*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
044475 74 69 6C 65 0297*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
04448A 74 69 6C 65 0298*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
04449F 74 69 6C 65 0299*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
0444B4 74 69 6C 65 0300*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
0444C9 74 69 6C 65 0301*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
0444DE 74 69 6C 65 0302*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
0444F3 74 69 6C 65 0303*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
044508 74 69 6C 65 0304*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
04451D 74 69 6C 65 0305*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
044532 74 69 6C 65 0306*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
044547 74 69 6C 65 0307*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
04455C 74 69 6C 65 0308*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
044571 74 69 6C 65 0309*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
044586 74 69 6C 65 0310*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
04459B 74 69 6C 65 0311*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
0445B0 74 69 6C 65 0312*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
0445C5 74 69 6C 65 0313*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
0445DA 74 69 6C 65 0314*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
0445EF 74 69 6C 65 0315*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
044604 74 69 6C 65 0316*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
044619 74 69 6C 65 0317*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
04462E 74 69 6C 65 0318*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044643 74 69 6C 65 0319*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
044658 74 69 6C 65 0320*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
04466D 74 69 6C 65 0321*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
044682 74 69 6C 65 0322*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
044697 74 69 6C 65 0323*   fn_dg_174: db "tiles/dg/0/174.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 34 2E 72 
       67 62 61 32 
       00          
0446AC 74 69 6C 65 0324*   fn_dg_175: db "tiles/dg/0/175.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 35 2E 72 
       67 62 61 32 
       00          
0446C1 74 69 6C 65 0325*   fn_dg_176: db "tiles/dg/0/176.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0446D6 74 69 6C 65 0326*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
0446EB 74 69 6C 65 0327*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
044700 74 69 6C 65 0328*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
044715 74 69 6C 65 0329*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
04472A 74 69 6C 65 0330*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
04473F 74 69 6C 65 0331*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
044754 74 69 6C 65 0332*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
044769 74 69 6C 65 0333*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04477E 74 69 6C 65 0334*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
044793 74 69 6C 65 0335*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
0447A8 74 69 6C 65 0336*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
0447BD 74 69 6C 65 0337*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
0447D2 74 69 6C 65 0338*   fn_dg_190: db "tiles/dg/0/190.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 30 2E 72 
       67 62 61 32 
       00          
0447E7 74 69 6C 65 0339*   fn_dg_191: db "tiles/dg/0/191.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 31 2E 72 
       67 62 61 32 
       00          
0447FC 74 69 6C 65 0340*   fn_dg_192: db "tiles/dg/0/192.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
044811 74 69 6C 65 0341*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
044826 74 69 6C 65 0342*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
04483B 74 69 6C 65 0343*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
044850 74 69 6C 65 0344*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
044865 74 69 6C 65 0345*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
04487A 74 69 6C 65 0346*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
04488F 74 69 6C 65 0347*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
0448A4 74 69 6C 65 0348*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0448B9 74 69 6C 65 0349*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
0448CE 74 69 6C 65 0350*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
0448E3 74 69 6C 65 0351*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
0448F8 74 69 6C 65 0352*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
04490D 74 69 6C 65 0353*   fn_dg_206: db "tiles/dg/0/206.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 36 2E 72 
       67 62 61 32 
       00          
044922 74 69 6C 65 0354*   fn_dg_207: db "tiles/dg/0/207.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 37 2E 72 
       67 62 61 32 
       00          
044937 74 69 6C 65 0355*   fn_dg_208: db "tiles/dg/0/208.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
04494C 74 69 6C 65 0356*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
044961 74 69 6C 65 0357*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
044976 74 69 6C 65 0358*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
04498B 74 69 6C 65 0359*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
0449A0 74 69 6C 65 0360*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
0449B5 74 69 6C 65 0361*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
0449CA 74 69 6C 65 0362*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
0449DF 74 69 6C 65 0363*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0449F4 74 69 6C 65 0364*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
044A09 74 69 6C 65 0365*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
044A1E 74 69 6C 65 0366*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
044A33 74 69 6C 65 0367*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
044A48 74 69 6C 65 0368*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
044A5D 74 69 6C 65 0369*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
044A72 74 69 6C 65 0370*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
044A87 74 69 6C 65 0371*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
044A9C 74 69 6C 65 0372*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
044AB1 74 69 6C 65 0373*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
044AC6 74 69 6C 65 0374*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
044ADB 74 69 6C 65 0375*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044AF0 74 69 6C 65 0376*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
044B05 74 69 6C 65 0377*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
044B1A 74 69 6C 65 0378*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
044B2F 74 69 6C 65 0379*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
044B44 74 69 6C 65 0380*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
044B59 74 69 6C 65 0381*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
044B6E 74 69 6C 65 0382*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
044B83 74 69 6C 65 0383*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
044B98 74 69 6C 65 0384*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044BAD             0054        ; include "images_tiles_xevious.inc"
044BAD             0055        include "images_sprites.inc"
044BAD             0001*   ; Generated by make_images.py
044BAD             0002*   
044BAD             0003*   sprites_num_images: equ 156
044BAD             0004*   
044BAD             0005*   ; buffer_ids:
044BAD             0006*   BUF_CRATER: equ 256
044BAD             0007*   BUF_CRATER_0: equ 257
044BAD             0008*   BUF_CRATER_1: equ 258
044BAD             0009*   BUF_CRATER_2: equ 259
044BAD             0010*   BUF_CRATER_3: equ 260
044BAD             0011*   BUF_EXPLOSION_A: equ 261
044BAD             0012*   BUF_EXPLOSION_B: equ 262
044BAD             0013*   BUF_EXPLOSION_C: equ 263
044BAD             0014*   BUF_EXPLOSION_D: equ 264
044BAD             0015*   BUF_EXPLOSION_E: equ 265
044BAD             0016*   BUF_FIREBALL_2_000: equ 266
044BAD             0017*   BUF_FIREBALL_2_008: equ 267
044BAD             0018*   BUF_FIREBALL_2_016: equ 268
044BAD             0019*   BUF_FIREBALL_2_024: equ 269
044BAD             0020*   BUF_FIREBALL_2_032: equ 270
044BAD             0021*   BUF_FIREBALL_2_040: equ 271
044BAD             0022*   BUF_FIREBALL_2_048: equ 272
044BAD             0023*   BUF_FIREBALL_2_056: equ 273
044BAD             0024*   BUF_FIREBALL_2_064: equ 274
044BAD             0025*   BUF_FIREBALL_2_072: equ 275
044BAD             0026*   BUF_FIREBALL_2_080: equ 276
044BAD             0027*   BUF_FIREBALL_2_088: equ 277
044BAD             0028*   BUF_FIREBALL_2_096: equ 278
044BAD             0029*   BUF_FIREBALL_2_104: equ 279
044BAD             0030*   BUF_FIREBALL_2_112: equ 280
044BAD             0031*   BUF_FIREBALL_2_120: equ 281
044BAD             0032*   BUF_FIREBALL_2_128: equ 282
044BAD             0033*   BUF_FIREBALL_2_136: equ 283
044BAD             0034*   BUF_FIREBALL_2_144: equ 284
044BAD             0035*   BUF_FIREBALL_2_152: equ 285
044BAD             0036*   BUF_FIREBALL_2_160: equ 286
044BAD             0037*   BUF_FIREBALL_2_168: equ 287
044BAD             0038*   BUF_FIREBALL_2_176: equ 288
044BAD             0039*   BUF_FIREBALL_2_184: equ 289
044BAD             0040*   BUF_FIREBALL_2_192: equ 290
044BAD             0041*   BUF_FIREBALL_2_200: equ 291
044BAD             0042*   BUF_FIREBALL_2_208: equ 292
044BAD             0043*   BUF_FIREBALL_2_216: equ 293
044BAD             0044*   BUF_FIREBALL_2_224: equ 294
044BAD             0045*   BUF_FIREBALL_2_232: equ 295
044BAD             0046*   BUF_FIREBALL_2_240: equ 296
044BAD             0047*   BUF_FIREBALL_2_248: equ 297
044BAD             0048*   BUF_FIREBALL_3_000: equ 298
044BAD             0049*   BUF_FIREBALL_3_008: equ 299
044BAD             0050*   BUF_FIREBALL_3_016: equ 300
044BAD             0051*   BUF_FIREBALL_3_024: equ 301
044BAD             0052*   BUF_FIREBALL_3_032: equ 302
044BAD             0053*   BUF_FIREBALL_3_040: equ 303
044BAD             0054*   BUF_FIREBALL_3_048: equ 304
044BAD             0055*   BUF_FIREBALL_3_056: equ 305
044BAD             0056*   BUF_FIREBALL_3_064: equ 306
044BAD             0057*   BUF_FIREBALL_3_072: equ 307
044BAD             0058*   BUF_FIREBALL_3_080: equ 308
044BAD             0059*   BUF_FIREBALL_3_088: equ 309
044BAD             0060*   BUF_FIREBALL_3_096: equ 310
044BAD             0061*   BUF_FIREBALL_3_104: equ 311
044BAD             0062*   BUF_FIREBALL_3_112: equ 312
044BAD             0063*   BUF_FIREBALL_3_120: equ 313
044BAD             0064*   BUF_FIREBALL_3_128: equ 314
044BAD             0065*   BUF_FIREBALL_3_136: equ 315
044BAD             0066*   BUF_FIREBALL_3_144: equ 316
044BAD             0067*   BUF_FIREBALL_3_152: equ 317
044BAD             0068*   BUF_FIREBALL_3_160: equ 318
044BAD             0069*   BUF_FIREBALL_3_168: equ 319
044BAD             0070*   BUF_FIREBALL_3_176: equ 320
044BAD             0071*   BUF_FIREBALL_3_184: equ 321
044BAD             0072*   BUF_FIREBALL_3_192: equ 322
044BAD             0073*   BUF_FIREBALL_3_200: equ 323
044BAD             0074*   BUF_FIREBALL_3_208: equ 324
044BAD             0075*   BUF_FIREBALL_3_216: equ 325
044BAD             0076*   BUF_FIREBALL_3_224: equ 326
044BAD             0077*   BUF_FIREBALL_3_232: equ 327
044BAD             0078*   BUF_FIREBALL_3_240: equ 328
044BAD             0079*   BUF_FIREBALL_3_248: equ 329
044BAD             0080*   BUF_LASER_A: equ 330
044BAD             0081*   BUF_LASER_B: equ 331
044BAD             0082*   BUF_LIGHTNING_H_0: equ 332
044BAD             0083*   BUF_LIGHTNING_H_1: equ 333
044BAD             0084*   BUF_PAD: equ 334
044BAD             0085*   BUF_SEEKER_000: equ 335
044BAD             0086*   BUF_SEEKER_008: equ 336
044BAD             0087*   BUF_SEEKER_016: equ 337
044BAD             0088*   BUF_SEEKER_024: equ 338
044BAD             0089*   BUF_SEEKER_032: equ 339
044BAD             0090*   BUF_SEEKER_040: equ 340
044BAD             0091*   BUF_SEEKER_048: equ 341
044BAD             0092*   BUF_SEEKER_056: equ 342
044BAD             0093*   BUF_SEEKER_064: equ 343
044BAD             0094*   BUF_SEEKER_072: equ 344
044BAD             0095*   BUF_SEEKER_080: equ 345
044BAD             0096*   BUF_SEEKER_088: equ 346
044BAD             0097*   BUF_SEEKER_096: equ 347
044BAD             0098*   BUF_SEEKER_104: equ 348
044BAD             0099*   BUF_SEEKER_112: equ 349
044BAD             0100*   BUF_SEEKER_120: equ 350
044BAD             0101*   BUF_SEEKER_128: equ 351
044BAD             0102*   BUF_SEEKER_136: equ 352
044BAD             0103*   BUF_SEEKER_144: equ 353
044BAD             0104*   BUF_SEEKER_152: equ 354
044BAD             0105*   BUF_SEEKER_160: equ 355
044BAD             0106*   BUF_SEEKER_168: equ 356
044BAD             0107*   BUF_SEEKER_176: equ 357
044BAD             0108*   BUF_SEEKER_184: equ 358
044BAD             0109*   BUF_SEEKER_192: equ 359
044BAD             0110*   BUF_SEEKER_200: equ 360
044BAD             0111*   BUF_SEEKER_208: equ 361
044BAD             0112*   BUF_SEEKER_216: equ 362
044BAD             0113*   BUF_SEEKER_224: equ 363
044BAD             0114*   BUF_SEEKER_232: equ 364
044BAD             0115*   BUF_SEEKER_240: equ 365
044BAD             0116*   BUF_SEEKER_248: equ 366
044BAD             0117*   BUF_SHIP_0L: equ 367
044BAD             0118*   BUF_SHIP_1C: equ 368
044BAD             0119*   BUF_SHIP_2R: equ 369
044BAD             0120*   BUF_SHIP_SMALL: equ 370
044BAD             0121*   BUF_TEST_STRIPES: equ 371
044BAD             0122*   BUF_TILE_PAD_0: equ 372
044BAD             0123*   BUF_TILE_PAD_1: equ 373
044BAD             0124*   BUF_TILE_PAD_2: equ 374
044BAD             0125*   BUF_TILE_PAD_3: equ 375
044BAD             0126*   BUF_TILE_PAD_4: equ 376
044BAD             0127*   BUF_TILE_PAD_5: equ 377
044BAD             0128*   BUF_TILE_PAD_6: equ 378
044BAD             0129*   BUF_TILE_PAD_7: equ 379
044BAD             0130*   BUF_TURRET_000: equ 380
044BAD             0131*   BUF_TURRET_008: equ 381
044BAD             0132*   BUF_TURRET_016: equ 382
044BAD             0133*   BUF_TURRET_024: equ 383
044BAD             0134*   BUF_TURRET_032: equ 384
044BAD             0135*   BUF_TURRET_040: equ 385
044BAD             0136*   BUF_TURRET_048: equ 386
044BAD             0137*   BUF_TURRET_056: equ 387
044BAD             0138*   BUF_TURRET_064: equ 388
044BAD             0139*   BUF_TURRET_072: equ 389
044BAD             0140*   BUF_TURRET_080: equ 390
044BAD             0141*   BUF_TURRET_088: equ 391
044BAD             0142*   BUF_TURRET_096: equ 392
044BAD             0143*   BUF_TURRET_104: equ 393
044BAD             0144*   BUF_TURRET_112: equ 394
044BAD             0145*   BUF_TURRET_120: equ 395
044BAD             0146*   BUF_TURRET_128: equ 396
044BAD             0147*   BUF_TURRET_136: equ 397
044BAD             0148*   BUF_TURRET_144: equ 398
044BAD             0149*   BUF_TURRET_152: equ 399
044BAD             0150*   BUF_TURRET_160: equ 400
044BAD             0151*   BUF_TURRET_168: equ 401
044BAD             0152*   BUF_TURRET_176: equ 402
044BAD             0153*   BUF_TURRET_184: equ 403
044BAD             0154*   BUF_TURRET_192: equ 404
044BAD             0155*   BUF_TURRET_200: equ 405
044BAD             0156*   BUF_TURRET_208: equ 406
044BAD             0157*   BUF_TURRET_216: equ 407
044BAD             0158*   BUF_TURRET_224: equ 408
044BAD             0159*   BUF_TURRET_232: equ 409
044BAD             0160*   BUF_TURRET_240: equ 410
044BAD             0161*   BUF_TURRET_248: equ 411
044BAD             0162*   
044BAD             0163*   sprites_image_list: ; type; width; height; size; filename; bufferId:
044BAD 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       A5 56 04 00 
       01 00       
044BBF 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_crater_0, 257
       00 00 10 00 
       00 00 01 00 
       BA 56 04 01 
       01 00       
044BD1 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_crater_1, 258
       00 00 10 00 
       00 00 01 00 
       D1 56 04 02 
       01 00       
044BE3 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_crater_2, 259
       00 00 10 00 
       00 00 01 00 
       E8 56 04 03 
       01 00       
044BF5 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_crater_3, 260
       00 00 10 00 
       00 00 01 00 
       FF 56 04 04 
       01 00       
044C07 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_explosion_a, 261
       00 00 10 00 
       00 00 01 00 
       16 57 04 05 
       01 00       
044C19 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_explosion_b, 262
       00 00 10 00 
       00 00 01 00 
       30 57 04 06 
       01 00       
044C2B 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_explosion_c, 263
       00 00 10 00 
       00 00 01 00 
       4A 57 04 07 
       01 00       
044C3D 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_explosion_d, 264
       00 00 10 00 
       00 00 01 00 
       64 57 04 08 
       01 00       
044C4F 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_explosion_e, 265
       00 00 10 00 
       00 00 01 00 
       7E 57 04 09 
       01 00       
044C61 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_fireball_2_000, 266
       00 00 10 00 
       00 00 01 00 
       98 57 04 0A 
       01 00       
044C73 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_fireball_2_008, 267
       00 00 10 00 
       00 00 01 00 
       B5 57 04 0B 
       01 00       
044C85 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_fireball_2_016, 268
       00 00 10 00 
       00 00 01 00 
       D2 57 04 0C 
       01 00       
044C97 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_fireball_2_024, 269
       00 00 10 00 
       00 00 01 00 
       EF 57 04 0D 
       01 00       
044CA9 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_fireball_2_032, 270
       00 00 10 00 
       00 00 01 00 
       0C 58 04 0E 
       01 00       
044CBB 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_fireball_2_040, 271
       00 00 10 00 
       00 00 01 00 
       29 58 04 0F 
       01 00       
044CCD 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_fireball_2_048, 272
       00 00 10 00 
       00 00 01 00 
       46 58 04 10 
       01 00       
044CDF 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_fireball_2_056, 273
       00 00 10 00 
       00 00 01 00 
       63 58 04 11 
       01 00       
044CF1 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_fireball_2_064, 274
       00 00 10 00 
       00 00 01 00 
       80 58 04 12 
       01 00       
044D03 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_fireball_2_072, 275
       00 00 10 00 
       00 00 01 00 
       9D 58 04 13 
       01 00       
044D15 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_fireball_2_080, 276
       00 00 10 00 
       00 00 01 00 
       BA 58 04 14 
       01 00       
044D27 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_fireball_2_088, 277
       00 00 10 00 
       00 00 01 00 
       D7 58 04 15 
       01 00       
044D39 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_fireball_2_096, 278
       00 00 10 00 
       00 00 01 00 
       F4 58 04 16 
       01 00       
044D4B 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_fireball_2_104, 279
       00 00 10 00 
       00 00 01 00 
       11 59 04 17 
       01 00       
044D5D 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_fireball_2_112, 280
       00 00 10 00 
       00 00 01 00 
       2E 59 04 18 
       01 00       
044D6F 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_fireball_2_120, 281
       00 00 10 00 
       00 00 01 00 
       4B 59 04 19 
       01 00       
044D81 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_fireball_2_128, 282
       00 00 10 00 
       00 00 01 00 
       68 59 04 1A 
       01 00       
044D93 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_fireball_2_136, 283
       00 00 10 00 
       00 00 01 00 
       85 59 04 1B 
       01 00       
044DA5 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_fireball_2_144, 284
       00 00 10 00 
       00 00 01 00 
       A2 59 04 1C 
       01 00       
044DB7 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_fireball_2_152, 285
       00 00 10 00 
       00 00 01 00 
       BF 59 04 1D 
       01 00       
044DC9 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_fireball_2_160, 286
       00 00 10 00 
       00 00 01 00 
       DC 59 04 1E 
       01 00       
044DDB 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_fireball_2_168, 287
       00 00 10 00 
       00 00 01 00 
       F9 59 04 1F 
       01 00       
044DED 01 00 00 10 0196*   	dl 1, 16, 16, 256, fn_fireball_2_176, 288
       00 00 10 00 
       00 00 01 00 
       16 5A 04 20 
       01 00       
044DFF 01 00 00 10 0197*   	dl 1, 16, 16, 256, fn_fireball_2_184, 289
       00 00 10 00 
       00 00 01 00 
       33 5A 04 21 
       01 00       
044E11 01 00 00 10 0198*   	dl 1, 16, 16, 256, fn_fireball_2_192, 290
       00 00 10 00 
       00 00 01 00 
       50 5A 04 22 
       01 00       
044E23 01 00 00 10 0199*   	dl 1, 16, 16, 256, fn_fireball_2_200, 291
       00 00 10 00 
       00 00 01 00 
       6D 5A 04 23 
       01 00       
044E35 01 00 00 10 0200*   	dl 1, 16, 16, 256, fn_fireball_2_208, 292
       00 00 10 00 
       00 00 01 00 
       8A 5A 04 24 
       01 00       
044E47 01 00 00 10 0201*   	dl 1, 16, 16, 256, fn_fireball_2_216, 293
       00 00 10 00 
       00 00 01 00 
       A7 5A 04 25 
       01 00       
044E59 01 00 00 10 0202*   	dl 1, 16, 16, 256, fn_fireball_2_224, 294
       00 00 10 00 
       00 00 01 00 
       C4 5A 04 26 
       01 00       
044E6B 01 00 00 10 0203*   	dl 1, 16, 16, 256, fn_fireball_2_232, 295
       00 00 10 00 
       00 00 01 00 
       E1 5A 04 27 
       01 00       
044E7D 01 00 00 10 0204*   	dl 1, 16, 16, 256, fn_fireball_2_240, 296
       00 00 10 00 
       00 00 01 00 
       FE 5A 04 28 
       01 00       
044E8F 01 00 00 10 0205*   	dl 1, 16, 16, 256, fn_fireball_2_248, 297
       00 00 10 00 
       00 00 01 00 
       1B 5B 04 29 
       01 00       
044EA1 01 00 00 10 0206*   	dl 1, 16, 16, 256, fn_fireball_3_000, 298
       00 00 10 00 
       00 00 01 00 
       38 5B 04 2A 
       01 00       
044EB3 01 00 00 10 0207*   	dl 1, 16, 16, 256, fn_fireball_3_008, 299
       00 00 10 00 
       00 00 01 00 
       55 5B 04 2B 
       01 00       
044EC5 01 00 00 10 0208*   	dl 1, 16, 16, 256, fn_fireball_3_016, 300
       00 00 10 00 
       00 00 01 00 
       72 5B 04 2C 
       01 00       
044ED7 01 00 00 10 0209*   	dl 1, 16, 16, 256, fn_fireball_3_024, 301
       00 00 10 00 
       00 00 01 00 
       8F 5B 04 2D 
       01 00       
044EE9 01 00 00 10 0210*   	dl 1, 16, 16, 256, fn_fireball_3_032, 302
       00 00 10 00 
       00 00 01 00 
       AC 5B 04 2E 
       01 00       
044EFB 01 00 00 10 0211*   	dl 1, 16, 16, 256, fn_fireball_3_040, 303
       00 00 10 00 
       00 00 01 00 
       C9 5B 04 2F 
       01 00       
044F0D 01 00 00 10 0212*   	dl 1, 16, 16, 256, fn_fireball_3_048, 304
       00 00 10 00 
       00 00 01 00 
       E6 5B 04 30 
       01 00       
044F1F 01 00 00 10 0213*   	dl 1, 16, 16, 256, fn_fireball_3_056, 305
       00 00 10 00 
       00 00 01 00 
       03 5C 04 31 
       01 00       
044F31 01 00 00 10 0214*   	dl 1, 16, 16, 256, fn_fireball_3_064, 306
       00 00 10 00 
       00 00 01 00 
       20 5C 04 32 
       01 00       
044F43 01 00 00 10 0215*   	dl 1, 16, 16, 256, fn_fireball_3_072, 307
       00 00 10 00 
       00 00 01 00 
       3D 5C 04 33 
       01 00       
044F55 01 00 00 10 0216*   	dl 1, 16, 16, 256, fn_fireball_3_080, 308
       00 00 10 00 
       00 00 01 00 
       5A 5C 04 34 
       01 00       
044F67 01 00 00 10 0217*   	dl 1, 16, 16, 256, fn_fireball_3_088, 309
       00 00 10 00 
       00 00 01 00 
       77 5C 04 35 
       01 00       
044F79 01 00 00 10 0218*   	dl 1, 16, 16, 256, fn_fireball_3_096, 310
       00 00 10 00 
       00 00 01 00 
       94 5C 04 36 
       01 00       
044F8B 01 00 00 10 0219*   	dl 1, 16, 16, 256, fn_fireball_3_104, 311
       00 00 10 00 
       00 00 01 00 
       B1 5C 04 37 
       01 00       
044F9D 01 00 00 10 0220*   	dl 1, 16, 16, 256, fn_fireball_3_112, 312
       00 00 10 00 
       00 00 01 00 
       CE 5C 04 38 
       01 00       
044FAF 01 00 00 10 0221*   	dl 1, 16, 16, 256, fn_fireball_3_120, 313
       00 00 10 00 
       00 00 01 00 
       EB 5C 04 39 
       01 00       
044FC1 01 00 00 10 0222*   	dl 1, 16, 16, 256, fn_fireball_3_128, 314
       00 00 10 00 
       00 00 01 00 
       08 5D 04 3A 
       01 00       
044FD3 01 00 00 10 0223*   	dl 1, 16, 16, 256, fn_fireball_3_136, 315
       00 00 10 00 
       00 00 01 00 
       25 5D 04 3B 
       01 00       
044FE5 01 00 00 10 0224*   	dl 1, 16, 16, 256, fn_fireball_3_144, 316
       00 00 10 00 
       00 00 01 00 
       42 5D 04 3C 
       01 00       
044FF7 01 00 00 10 0225*   	dl 1, 16, 16, 256, fn_fireball_3_152, 317
       00 00 10 00 
       00 00 01 00 
       5F 5D 04 3D 
       01 00       
045009 01 00 00 10 0226*   	dl 1, 16, 16, 256, fn_fireball_3_160, 318
       00 00 10 00 
       00 00 01 00 
       7C 5D 04 3E 
       01 00       
04501B 01 00 00 10 0227*   	dl 1, 16, 16, 256, fn_fireball_3_168, 319
       00 00 10 00 
       00 00 01 00 
       99 5D 04 3F 
       01 00       
04502D 01 00 00 10 0228*   	dl 1, 16, 16, 256, fn_fireball_3_176, 320
       00 00 10 00 
       00 00 01 00 
       B6 5D 04 40 
       01 00       
04503F 01 00 00 10 0229*   	dl 1, 16, 16, 256, fn_fireball_3_184, 321
       00 00 10 00 
       00 00 01 00 
       D3 5D 04 41 
       01 00       
045051 01 00 00 10 0230*   	dl 1, 16, 16, 256, fn_fireball_3_192, 322
       00 00 10 00 
       00 00 01 00 
       F0 5D 04 42 
       01 00       
045063 01 00 00 10 0231*   	dl 1, 16, 16, 256, fn_fireball_3_200, 323
       00 00 10 00 
       00 00 01 00 
       0D 5E 04 43 
       01 00       
045075 01 00 00 10 0232*   	dl 1, 16, 16, 256, fn_fireball_3_208, 324
       00 00 10 00 
       00 00 01 00 
       2A 5E 04 44 
       01 00       
045087 01 00 00 10 0233*   	dl 1, 16, 16, 256, fn_fireball_3_216, 325
       00 00 10 00 
       00 00 01 00 
       47 5E 04 45 
       01 00       
045099 01 00 00 10 0234*   	dl 1, 16, 16, 256, fn_fireball_3_224, 326
       00 00 10 00 
       00 00 01 00 
       64 5E 04 46 
       01 00       
0450AB 01 00 00 10 0235*   	dl 1, 16, 16, 256, fn_fireball_3_232, 327
       00 00 10 00 
       00 00 01 00 
       81 5E 04 47 
       01 00       
0450BD 01 00 00 10 0236*   	dl 1, 16, 16, 256, fn_fireball_3_240, 328
       00 00 10 00 
       00 00 01 00 
       9E 5E 04 48 
       01 00       
0450CF 01 00 00 10 0237*   	dl 1, 16, 16, 256, fn_fireball_3_248, 329
       00 00 10 00 
       00 00 01 00 
       BB 5E 04 49 
       01 00       
0450E1 01 00 00 05 0238*   	dl 1, 5, 13, 65, fn_laser_a, 330
       00 00 0D 00 
       00 41 00 00 
       D8 5E 04 4A 
       01 00       
0450F3 01 00 00 05 0239*   	dl 1, 5, 13, 65, fn_laser_b, 331
       00 00 0D 00 
       00 41 00 00 
       EE 5E 04 4B 
       01 00       
045105 01 00 00 10 0240*   	dl 1, 16, 16, 256, fn_lightning_h_0, 332
       00 00 10 00 
       00 00 01 00 
       04 5F 04 4C 
       01 00       
045117 01 00 00 10 0241*   	dl 1, 16, 16, 256, fn_lightning_h_1, 333
       00 00 10 00 
       00 00 01 00 
       20 5F 04 4D 
       01 00       
045129 01 00 00 10 0242*   	dl 1, 16, 16, 256, fn_pad, 334
       00 00 10 00 
       00 00 01 00 
       3C 5F 04 4E 
       01 00       
04513B 01 00 00 10 0243*   	dl 1, 16, 16, 256, fn_seeker_000, 335
       00 00 10 00 
       00 00 01 00 
       4E 5F 04 4F 
       01 00       
04514D 01 00 00 10 0244*   	dl 1, 16, 16, 256, fn_seeker_008, 336
       00 00 10 00 
       00 00 01 00 
       67 5F 04 50 
       01 00       
04515F 01 00 00 10 0245*   	dl 1, 16, 16, 256, fn_seeker_016, 337
       00 00 10 00 
       00 00 01 00 
       80 5F 04 51 
       01 00       
045171 01 00 00 10 0246*   	dl 1, 16, 16, 256, fn_seeker_024, 338
       00 00 10 00 
       00 00 01 00 
       99 5F 04 52 
       01 00       
045183 01 00 00 10 0247*   	dl 1, 16, 16, 256, fn_seeker_032, 339
       00 00 10 00 
       00 00 01 00 
       B2 5F 04 53 
       01 00       
045195 01 00 00 10 0248*   	dl 1, 16, 16, 256, fn_seeker_040, 340
       00 00 10 00 
       00 00 01 00 
       CB 5F 04 54 
       01 00       
0451A7 01 00 00 10 0249*   	dl 1, 16, 16, 256, fn_seeker_048, 341
       00 00 10 00 
       00 00 01 00 
       E4 5F 04 55 
       01 00       
0451B9 01 00 00 10 0250*   	dl 1, 16, 16, 256, fn_seeker_056, 342
       00 00 10 00 
       00 00 01 00 
       FD 5F 04 56 
       01 00       
0451CB 01 00 00 10 0251*   	dl 1, 16, 16, 256, fn_seeker_064, 343
       00 00 10 00 
       00 00 01 00 
       16 60 04 57 
       01 00       
0451DD 01 00 00 10 0252*   	dl 1, 16, 16, 256, fn_seeker_072, 344
       00 00 10 00 
       00 00 01 00 
       2F 60 04 58 
       01 00       
0451EF 01 00 00 10 0253*   	dl 1, 16, 16, 256, fn_seeker_080, 345
       00 00 10 00 
       00 00 01 00 
       48 60 04 59 
       01 00       
045201 01 00 00 10 0254*   	dl 1, 16, 16, 256, fn_seeker_088, 346
       00 00 10 00 
       00 00 01 00 
       61 60 04 5A 
       01 00       
045213 01 00 00 10 0255*   	dl 1, 16, 16, 256, fn_seeker_096, 347
       00 00 10 00 
       00 00 01 00 
       7A 60 04 5B 
       01 00       
045225 01 00 00 10 0256*   	dl 1, 16, 16, 256, fn_seeker_104, 348
       00 00 10 00 
       00 00 01 00 
       93 60 04 5C 
       01 00       
045237 01 00 00 10 0257*   	dl 1, 16, 16, 256, fn_seeker_112, 349
       00 00 10 00 
       00 00 01 00 
       AC 60 04 5D 
       01 00       
045249 01 00 00 10 0258*   	dl 1, 16, 16, 256, fn_seeker_120, 350
       00 00 10 00 
       00 00 01 00 
       C5 60 04 5E 
       01 00       
04525B 01 00 00 10 0259*   	dl 1, 16, 16, 256, fn_seeker_128, 351
       00 00 10 00 
       00 00 01 00 
       DE 60 04 5F 
       01 00       
04526D 01 00 00 10 0260*   	dl 1, 16, 16, 256, fn_seeker_136, 352
       00 00 10 00 
       00 00 01 00 
       F7 60 04 60 
       01 00       
04527F 01 00 00 10 0261*   	dl 1, 16, 16, 256, fn_seeker_144, 353
       00 00 10 00 
       00 00 01 00 
       10 61 04 61 
       01 00       
045291 01 00 00 10 0262*   	dl 1, 16, 16, 256, fn_seeker_152, 354
       00 00 10 00 
       00 00 01 00 
       29 61 04 62 
       01 00       
0452A3 01 00 00 10 0263*   	dl 1, 16, 16, 256, fn_seeker_160, 355
       00 00 10 00 
       00 00 01 00 
       42 61 04 63 
       01 00       
0452B5 01 00 00 10 0264*   	dl 1, 16, 16, 256, fn_seeker_168, 356
       00 00 10 00 
       00 00 01 00 
       5B 61 04 64 
       01 00       
0452C7 01 00 00 10 0265*   	dl 1, 16, 16, 256, fn_seeker_176, 357
       00 00 10 00 
       00 00 01 00 
       74 61 04 65 
       01 00       
0452D9 01 00 00 10 0266*   	dl 1, 16, 16, 256, fn_seeker_184, 358
       00 00 10 00 
       00 00 01 00 
       8D 61 04 66 
       01 00       
0452EB 01 00 00 10 0267*   	dl 1, 16, 16, 256, fn_seeker_192, 359
       00 00 10 00 
       00 00 01 00 
       A6 61 04 67 
       01 00       
0452FD 01 00 00 10 0268*   	dl 1, 16, 16, 256, fn_seeker_200, 360
       00 00 10 00 
       00 00 01 00 
       BF 61 04 68 
       01 00       
04530F 01 00 00 10 0269*   	dl 1, 16, 16, 256, fn_seeker_208, 361
       00 00 10 00 
       00 00 01 00 
       D8 61 04 69 
       01 00       
045321 01 00 00 10 0270*   	dl 1, 16, 16, 256, fn_seeker_216, 362
       00 00 10 00 
       00 00 01 00 
       F1 61 04 6A 
       01 00       
045333 01 00 00 10 0271*   	dl 1, 16, 16, 256, fn_seeker_224, 363
       00 00 10 00 
       00 00 01 00 
       0A 62 04 6B 
       01 00       
045345 01 00 00 10 0272*   	dl 1, 16, 16, 256, fn_seeker_232, 364
       00 00 10 00 
       00 00 01 00 
       23 62 04 6C 
       01 00       
045357 01 00 00 10 0273*   	dl 1, 16, 16, 256, fn_seeker_240, 365
       00 00 10 00 
       00 00 01 00 
       3C 62 04 6D 
       01 00       
045369 01 00 00 10 0274*   	dl 1, 16, 16, 256, fn_seeker_248, 366
       00 00 10 00 
       00 00 01 00 
       55 62 04 6E 
       01 00       
04537B 01 00 00 10 0275*   	dl 1, 16, 16, 256, fn_ship_0l, 367
       00 00 10 00 
       00 00 01 00 
       6E 62 04 6F 
       01 00       
04538D 01 00 00 10 0276*   	dl 1, 16, 16, 256, fn_ship_1c, 368
       00 00 10 00 
       00 00 01 00 
       84 62 04 70 
       01 00       
04539F 01 00 00 10 0277*   	dl 1, 16, 16, 256, fn_ship_2r, 369
       00 00 10 00 
       00 00 01 00 
       9A 62 04 71 
       01 00       
0453B1 01 00 00 08 0278*   	dl 1, 8, 8, 64, fn_ship_small, 370
       00 00 08 00 
       00 40 00 00 
       B0 62 04 72 
       01 00       
0453C3 01 00 00 10 0279*   	dl 1, 16, 16, 256, fn_test_stripes, 371
       00 00 10 00 
       00 00 01 00 
       C9 62 04 73 
       01 00       
0453D5 01 00 00 10 0280*   	dl 1, 16, 16, 256, fn_tile_pad_0, 372
       00 00 10 00 
       00 00 01 00 
       E4 62 04 74 
       01 00       
0453E7 01 00 00 10 0281*   	dl 1, 16, 16, 256, fn_tile_pad_1, 373
       00 00 10 00 
       00 00 01 00 
       FD 62 04 75 
       01 00       
0453F9 01 00 00 10 0282*   	dl 1, 16, 16, 256, fn_tile_pad_2, 374
       00 00 10 00 
       00 00 01 00 
       16 63 04 76 
       01 00       
04540B 01 00 00 10 0283*   	dl 1, 16, 16, 256, fn_tile_pad_3, 375
       00 00 10 00 
       00 00 01 00 
       2F 63 04 77 
       01 00       
04541D 01 00 00 10 0284*   	dl 1, 16, 16, 256, fn_tile_pad_4, 376
       00 00 10 00 
       00 00 01 00 
       48 63 04 78 
       01 00       
04542F 01 00 00 10 0285*   	dl 1, 16, 16, 256, fn_tile_pad_5, 377
       00 00 10 00 
       00 00 01 00 
       61 63 04 79 
       01 00       
045441 01 00 00 10 0286*   	dl 1, 16, 16, 256, fn_tile_pad_6, 378
       00 00 10 00 
       00 00 01 00 
       7A 63 04 7A 
       01 00       
045453 01 00 00 10 0287*   	dl 1, 16, 16, 256, fn_tile_pad_7, 379
       00 00 10 00 
       00 00 01 00 
       93 63 04 7B 
       01 00       
045465 01 00 00 10 0288*   	dl 1, 16, 16, 256, fn_turret_000, 380
       00 00 10 00 
       00 00 01 00 
       AC 63 04 7C 
       01 00       
045477 01 00 00 10 0289*   	dl 1, 16, 16, 256, fn_turret_008, 381
       00 00 10 00 
       00 00 01 00 
       C5 63 04 7D 
       01 00       
045489 01 00 00 10 0290*   	dl 1, 16, 16, 256, fn_turret_016, 382
       00 00 10 00 
       00 00 01 00 
       DE 63 04 7E 
       01 00       
04549B 01 00 00 10 0291*   	dl 1, 16, 16, 256, fn_turret_024, 383
       00 00 10 00 
       00 00 01 00 
       F7 63 04 7F 
       01 00       
0454AD 01 00 00 10 0292*   	dl 1, 16, 16, 256, fn_turret_032, 384
       00 00 10 00 
       00 00 01 00 
       10 64 04 80 
       01 00       
0454BF 01 00 00 10 0293*   	dl 1, 16, 16, 256, fn_turret_040, 385
       00 00 10 00 
       00 00 01 00 
       29 64 04 81 
       01 00       
0454D1 01 00 00 10 0294*   	dl 1, 16, 16, 256, fn_turret_048, 386
       00 00 10 00 
       00 00 01 00 
       42 64 04 82 
       01 00       
0454E3 01 00 00 10 0295*   	dl 1, 16, 16, 256, fn_turret_056, 387
       00 00 10 00 
       00 00 01 00 
       5B 64 04 83 
       01 00       
0454F5 01 00 00 10 0296*   	dl 1, 16, 16, 256, fn_turret_064, 388
       00 00 10 00 
       00 00 01 00 
       74 64 04 84 
       01 00       
045507 01 00 00 10 0297*   	dl 1, 16, 16, 256, fn_turret_072, 389
       00 00 10 00 
       00 00 01 00 
       8D 64 04 85 
       01 00       
045519 01 00 00 10 0298*   	dl 1, 16, 16, 256, fn_turret_080, 390
       00 00 10 00 
       00 00 01 00 
       A6 64 04 86 
       01 00       
04552B 01 00 00 10 0299*   	dl 1, 16, 16, 256, fn_turret_088, 391
       00 00 10 00 
       00 00 01 00 
       BF 64 04 87 
       01 00       
04553D 01 00 00 10 0300*   	dl 1, 16, 16, 256, fn_turret_096, 392
       00 00 10 00 
       00 00 01 00 
       D8 64 04 88 
       01 00       
04554F 01 00 00 10 0301*   	dl 1, 16, 16, 256, fn_turret_104, 393
       00 00 10 00 
       00 00 01 00 
       F1 64 04 89 
       01 00       
045561 01 00 00 10 0302*   	dl 1, 16, 16, 256, fn_turret_112, 394
       00 00 10 00 
       00 00 01 00 
       0A 65 04 8A 
       01 00       
045573 01 00 00 10 0303*   	dl 1, 16, 16, 256, fn_turret_120, 395
       00 00 10 00 
       00 00 01 00 
       23 65 04 8B 
       01 00       
045585 01 00 00 10 0304*   	dl 1, 16, 16, 256, fn_turret_128, 396
       00 00 10 00 
       00 00 01 00 
       3C 65 04 8C 
       01 00       
045597 01 00 00 10 0305*   	dl 1, 16, 16, 256, fn_turret_136, 397
       00 00 10 00 
       00 00 01 00 
       55 65 04 8D 
       01 00       
0455A9 01 00 00 10 0306*   	dl 1, 16, 16, 256, fn_turret_144, 398
       00 00 10 00 
       00 00 01 00 
       6E 65 04 8E 
       01 00       
0455BB 01 00 00 10 0307*   	dl 1, 16, 16, 256, fn_turret_152, 399
       00 00 10 00 
       00 00 01 00 
       87 65 04 8F 
       01 00       
0455CD 01 00 00 10 0308*   	dl 1, 16, 16, 256, fn_turret_160, 400
       00 00 10 00 
       00 00 01 00 
       A0 65 04 90 
       01 00       
0455DF 01 00 00 10 0309*   	dl 1, 16, 16, 256, fn_turret_168, 401
       00 00 10 00 
       00 00 01 00 
       B9 65 04 91 
       01 00       
0455F1 01 00 00 10 0310*   	dl 1, 16, 16, 256, fn_turret_176, 402
       00 00 10 00 
       00 00 01 00 
       D2 65 04 92 
       01 00       
045603 01 00 00 10 0311*   	dl 1, 16, 16, 256, fn_turret_184, 403
       00 00 10 00 
       00 00 01 00 
       EB 65 04 93 
       01 00       
045615 01 00 00 10 0312*   	dl 1, 16, 16, 256, fn_turret_192, 404
       00 00 10 00 
       00 00 01 00 
       04 66 04 94 
       01 00       
045627 01 00 00 10 0313*   	dl 1, 16, 16, 256, fn_turret_200, 405
       00 00 10 00 
       00 00 01 00 
       1D 66 04 95 
       01 00       
045639 01 00 00 10 0314*   	dl 1, 16, 16, 256, fn_turret_208, 406
       00 00 10 00 
       00 00 01 00 
       36 66 04 96 
       01 00       
04564B 01 00 00 10 0315*   	dl 1, 16, 16, 256, fn_turret_216, 407
       00 00 10 00 
       00 00 01 00 
       4F 66 04 97 
       01 00       
04565D 01 00 00 10 0316*   	dl 1, 16, 16, 256, fn_turret_224, 408
       00 00 10 00 
       00 00 01 00 
       68 66 04 98 
       01 00       
04566F 01 00 00 10 0317*   	dl 1, 16, 16, 256, fn_turret_232, 409
       00 00 10 00 
       00 00 01 00 
       81 66 04 99 
       01 00       
045681 01 00 00 10 0318*   	dl 1, 16, 16, 256, fn_turret_240, 410
       00 00 10 00 
       00 00 01 00 
       9A 66 04 9A 
       01 00       
045693 01 00 00 10 0319*   	dl 1, 16, 16, 256, fn_turret_248, 411
       00 00 10 00 
       00 00 01 00 
       B3 66 04 9B 
       01 00       
0456A5             0320*   
0456A5             0321*   ; files_list: ; filename:
0456A5 73 70 72 69 0322*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
0456BA 73 70 72 69 0323*   fn_crater_0: db "sprites/crater_0.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 30 
       2E 72 67 62 
       61 32 00    
0456D1 73 70 72 69 0324*   fn_crater_1: db "sprites/crater_1.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 31 
       2E 72 67 62 
       61 32 00    
0456E8 73 70 72 69 0325*   fn_crater_2: db "sprites/crater_2.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 32 
       2E 72 67 62 
       61 32 00    
0456FF 73 70 72 69 0326*   fn_crater_3: db "sprites/crater_3.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 33 
       2E 72 67 62 
       61 32 00    
045716 73 70 72 69 0327*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
045730 73 70 72 69 0328*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
04574A 73 70 72 69 0329*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
045764 73 70 72 69 0330*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
04577E 73 70 72 69 0331*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
045798 73 70 72 69 0332*   fn_fireball_2_000: db "sprites/fireball_2_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0457B5 73 70 72 69 0333*   fn_fireball_2_008: db "sprites/fireball_2_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0457D2 73 70 72 69 0334*   fn_fireball_2_016: db "sprites/fireball_2_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0457EF 73 70 72 69 0335*   fn_fireball_2_024: db "sprites/fireball_2_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
04580C 73 70 72 69 0336*   fn_fireball_2_032: db "sprites/fireball_2_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
045829 73 70 72 69 0337*   fn_fireball_2_040: db "sprites/fireball_2_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045846 73 70 72 69 0338*   fn_fireball_2_048: db "sprites/fireball_2_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045863 73 70 72 69 0339*   fn_fireball_2_056: db "sprites/fireball_2_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045880 73 70 72 69 0340*   fn_fireball_2_064: db "sprites/fireball_2_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
04589D 73 70 72 69 0341*   fn_fireball_2_072: db "sprites/fireball_2_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0458BA 73 70 72 69 0342*   fn_fireball_2_080: db "sprites/fireball_2_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0458D7 73 70 72 69 0343*   fn_fireball_2_088: db "sprites/fireball_2_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0458F4 73 70 72 69 0344*   fn_fireball_2_096: db "sprites/fireball_2_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045911 73 70 72 69 0345*   fn_fireball_2_104: db "sprites/fireball_2_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04592E 73 70 72 69 0346*   fn_fireball_2_112: db "sprites/fireball_2_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
04594B 73 70 72 69 0347*   fn_fireball_2_120: db "sprites/fireball_2_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045968 73 70 72 69 0348*   fn_fireball_2_128: db "sprites/fireball_2_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045985 73 70 72 69 0349*   fn_fireball_2_136: db "sprites/fireball_2_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0459A2 73 70 72 69 0350*   fn_fireball_2_144: db "sprites/fireball_2_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0459BF 73 70 72 69 0351*   fn_fireball_2_152: db "sprites/fireball_2_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0459DC 73 70 72 69 0352*   fn_fireball_2_160: db "sprites/fireball_2_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0459F9 73 70 72 69 0353*   fn_fireball_2_168: db "sprites/fireball_2_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045A16 73 70 72 69 0354*   fn_fireball_2_176: db "sprites/fireball_2_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045A33 73 70 72 69 0355*   fn_fireball_2_184: db "sprites/fireball_2_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045A50 73 70 72 69 0356*   fn_fireball_2_192: db "sprites/fireball_2_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045A6D 73 70 72 69 0357*   fn_fireball_2_200: db "sprites/fireball_2_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045A8A 73 70 72 69 0358*   fn_fireball_2_208: db "sprites/fireball_2_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045AA7 73 70 72 69 0359*   fn_fireball_2_216: db "sprites/fireball_2_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045AC4 73 70 72 69 0360*   fn_fireball_2_224: db "sprites/fireball_2_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045AE1 73 70 72 69 0361*   fn_fireball_2_232: db "sprites/fireball_2_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045AFE 73 70 72 69 0362*   fn_fireball_2_240: db "sprites/fireball_2_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045B1B 73 70 72 69 0363*   fn_fireball_2_248: db "sprites/fireball_2_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045B38 73 70 72 69 0364*   fn_fireball_3_000: db "sprites/fireball_3_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
045B55 73 70 72 69 0365*   fn_fireball_3_008: db "sprites/fireball_3_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045B72 73 70 72 69 0366*   fn_fireball_3_016: db "sprites/fireball_3_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045B8F 73 70 72 69 0367*   fn_fireball_3_024: db "sprites/fireball_3_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045BAC 73 70 72 69 0368*   fn_fireball_3_032: db "sprites/fireball_3_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
045BC9 73 70 72 69 0369*   fn_fireball_3_040: db "sprites/fireball_3_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045BE6 73 70 72 69 0370*   fn_fireball_3_048: db "sprites/fireball_3_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045C03 73 70 72 69 0371*   fn_fireball_3_056: db "sprites/fireball_3_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045C20 73 70 72 69 0372*   fn_fireball_3_064: db "sprites/fireball_3_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
045C3D 73 70 72 69 0373*   fn_fireball_3_072: db "sprites/fireball_3_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
045C5A 73 70 72 69 0374*   fn_fireball_3_080: db "sprites/fireball_3_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045C77 73 70 72 69 0375*   fn_fireball_3_088: db "sprites/fireball_3_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045C94 73 70 72 69 0376*   fn_fireball_3_096: db "sprites/fireball_3_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045CB1 73 70 72 69 0377*   fn_fireball_3_104: db "sprites/fireball_3_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045CCE 73 70 72 69 0378*   fn_fireball_3_112: db "sprites/fireball_3_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045CEB 73 70 72 69 0379*   fn_fireball_3_120: db "sprites/fireball_3_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045D08 73 70 72 69 0380*   fn_fireball_3_128: db "sprites/fireball_3_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045D25 73 70 72 69 0381*   fn_fireball_3_136: db "sprites/fireball_3_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045D42 73 70 72 69 0382*   fn_fireball_3_144: db "sprites/fireball_3_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045D5F 73 70 72 69 0383*   fn_fireball_3_152: db "sprites/fireball_3_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045D7C 73 70 72 69 0384*   fn_fireball_3_160: db "sprites/fireball_3_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045D99 73 70 72 69 0385*   fn_fireball_3_168: db "sprites/fireball_3_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045DB6 73 70 72 69 0386*   fn_fireball_3_176: db "sprites/fireball_3_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045DD3 73 70 72 69 0387*   fn_fireball_3_184: db "sprites/fireball_3_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045DF0 73 70 72 69 0388*   fn_fireball_3_192: db "sprites/fireball_3_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045E0D 73 70 72 69 0389*   fn_fireball_3_200: db "sprites/fireball_3_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045E2A 73 70 72 69 0390*   fn_fireball_3_208: db "sprites/fireball_3_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045E47 73 70 72 69 0391*   fn_fireball_3_216: db "sprites/fireball_3_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045E64 73 70 72 69 0392*   fn_fireball_3_224: db "sprites/fireball_3_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045E81 73 70 72 69 0393*   fn_fireball_3_232: db "sprites/fireball_3_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045E9E 73 70 72 69 0394*   fn_fireball_3_240: db "sprites/fireball_3_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045EBB 73 70 72 69 0395*   fn_fireball_3_248: db "sprites/fireball_3_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045ED8 73 70 72 69 0396*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
045EEE 73 70 72 69 0397*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
045F04 73 70 72 69 0398*   fn_lightning_h_0: db "sprites/lightning_h_0.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       30 2E 72 67 
       62 61 32 00 
045F20 73 70 72 69 0399*   fn_lightning_h_1: db "sprites/lightning_h_1.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       31 2E 72 67 
       62 61 32 00 
045F3C 73 70 72 69 0400*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
045F4E 73 70 72 69 0401*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
045F67 73 70 72 69 0402*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045F80 73 70 72 69 0403*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045F99 73 70 72 69 0404*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045FB2 73 70 72 69 0405*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
045FCB 73 70 72 69 0406*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
045FE4 73 70 72 69 0407*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045FFD 73 70 72 69 0408*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
046016 73 70 72 69 0409*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
04602F 73 70 72 69 0410*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
046048 73 70 72 69 0411*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
046061 73 70 72 69 0412*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
04607A 73 70 72 69 0413*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
046093 73 70 72 69 0414*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
0460AC 73 70 72 69 0415*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
0460C5 73 70 72 69 0416*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0460DE 73 70 72 69 0417*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0460F7 73 70 72 69 0418*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
046110 73 70 72 69 0419*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
046129 73 70 72 69 0420*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
046142 73 70 72 69 0421*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04615B 73 70 72 69 0422*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
046174 73 70 72 69 0423*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
04618D 73 70 72 69 0424*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
0461A6 73 70 72 69 0425*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0461BF 73 70 72 69 0426*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0461D8 73 70 72 69 0427*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0461F1 73 70 72 69 0428*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
04620A 73 70 72 69 0429*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
046223 73 70 72 69 0430*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
04623C 73 70 72 69 0431*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
046255 73 70 72 69 0432*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
04626E 73 70 72 69 0433*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
046284 73 70 72 69 0434*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
04629A 73 70 72 69 0435*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
0462B0 73 70 72 69 0436*   fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
0462C9 73 70 72 69 0437*   fn_test_stripes: db "sprites/test_stripes.rgba2",0
       74 65 73 2F 
       74 65 73 74 
       5F 73 74 72 
       69 70 65 73 
       2E 72 67 62 
       61 32 00    
0462E4 73 70 72 69 0438*   fn_tile_pad_0: db "sprites/tile_pad_0.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 30 2E 72 
       67 62 61 32 
       00          
0462FD 73 70 72 69 0439*   fn_tile_pad_1: db "sprites/tile_pad_1.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 31 2E 72 
       67 62 61 32 
       00          
046316 73 70 72 69 0440*   fn_tile_pad_2: db "sprites/tile_pad_2.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 32 2E 72 
       67 62 61 32 
       00          
04632F 73 70 72 69 0441*   fn_tile_pad_3: db "sprites/tile_pad_3.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 33 2E 72 
       67 62 61 32 
       00          
046348 73 70 72 69 0442*   fn_tile_pad_4: db "sprites/tile_pad_4.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 34 2E 72 
       67 62 61 32 
       00          
046361 73 70 72 69 0443*   fn_tile_pad_5: db "sprites/tile_pad_5.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 35 2E 72 
       67 62 61 32 
       00          
04637A 73 70 72 69 0444*   fn_tile_pad_6: db "sprites/tile_pad_6.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 36 2E 72 
       67 62 61 32 
       00          
046393 73 70 72 69 0445*   fn_tile_pad_7: db "sprites/tile_pad_7.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 37 2E 72 
       67 62 61 32 
       00          
0463AC 73 70 72 69 0446*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0463C5 73 70 72 69 0447*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0463DE 73 70 72 69 0448*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
0463F7 73 70 72 69 0449*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
046410 73 70 72 69 0450*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
046429 73 70 72 69 0451*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
046442 73 70 72 69 0452*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
04645B 73 70 72 69 0453*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
046474 73 70 72 69 0454*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
04648D 73 70 72 69 0455*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0464A6 73 70 72 69 0456*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
0464BF 73 70 72 69 0457*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0464D8 73 70 72 69 0458*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
0464F1 73 70 72 69 0459*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04650A 73 70 72 69 0460*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
046523 73 70 72 69 0461*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04653C 73 70 72 69 0462*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
046555 73 70 72 69 0463*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
04656E 73 70 72 69 0464*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
046587 73 70 72 69 0465*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0465A0 73 70 72 69 0466*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
0465B9 73 70 72 69 0467*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
0465D2 73 70 72 69 0468*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
0465EB 73 70 72 69 0469*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
046604 73 70 72 69 0470*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
04661D 73 70 72 69 0471*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
046636 73 70 72 69 0472*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
04664F 73 70 72 69 0473*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
046668 73 70 72 69 0474*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
046681 73 70 72 69 0475*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
04669A 73 70 72 69 0476*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0466B3 73 70 72 69 0477*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0466CC             0056        include "images_ui.inc"
0466CC             0001*   ; Generated by make_images.py
0466CC             0002*   
0466CC             0003*   ui_num_images: equ 43
0466CC             0004*   
0466CC             0005*   ; buffer_ids:
0466CC             0006*   BUF_BAR_H_0: equ 0
0466CC             0007*   BUF_BAR_H_1: equ 1
0466CC             0008*   BUF_BAR_H_2: equ 2
0466CC             0009*   BUF_BAR_V_0: equ 3
0466CC             0010*   BUF_BAR_V_1: equ 4
0466CC             0011*   BUF_BAR_V_2: equ 5
0466CC             0012*   BUF_BEZEL_L: equ 6
0466CC             0013*   BUF_BEZEL_R: equ 7
0466CC             0014*   BUF_CREDITS: equ 8
0466CC             0015*   BUF_CTL_PANEL_L: equ 9
0466CC             0016*   BUF_CTL_PANEL_R: equ 10
0466CC             0017*   BUF_JERRY_CAN: equ 11
0466CC             0018*   BUF_MFD_ARMS: equ 12
0466CC             0019*   BUF_MFD_BEZEL: equ 13
0466CC             0020*   BUF_MFD_BG: equ 14
0466CC             0021*   BUF_MFD_GUN_0: equ 15
0466CC             0022*   BUF_MFD_GUN_1: equ 16
0466CC             0023*   BUF_MFD_GUN_2: equ 17
0466CC             0024*   BUF_MFD_GUN_3: equ 18
0466CC             0025*   BUF_MFD_GUN_4: equ 19
0466CC             0026*   BUF_MFD_GUN_5: equ 20
0466CC             0027*   BUF_MFD_MAVERICK_0: equ 21
0466CC             0028*   BUF_MFD_MAVERICK_1: equ 22
0466CC             0029*   BUF_MFD_MAVERICK_2: equ 23
0466CC             0030*   BUF_MFD_MAVERICK_3: equ 24
0466CC             0031*   BUF_MFD_MAVERICK_4: equ 25
0466CC             0032*   BUF_MFD_MAVERICK_5: equ 26
0466CC             0033*   BUF_MFD_SIDEWINDER_0: equ 27
0466CC             0034*   BUF_MFD_SIDEWINDER_1: equ 28
0466CC             0035*   BUF_MFD_SIDEWINDER_2: equ 29
0466CC             0036*   BUF_MFD_SIDEWINDER_3: equ 30
0466CC             0037*   BUF_MFD_SIDEWINDER_4: equ 31
0466CC             0038*   BUF_MFD_SIDEWINDER_5: equ 32
0466CC             0039*   BUF_MFD_SPARROW_0: equ 33
0466CC             0040*   BUF_MFD_SPARROW_1: equ 34
0466CC             0041*   BUF_MFD_SPARROW_2: equ 35
0466CC             0042*   BUF_MFD_SPARROW_3: equ 36
0466CC             0043*   BUF_MFD_SPARROW_4: equ 37
0466CC             0044*   BUF_MFD_SPARROW_5: equ 38
0466CC             0045*   BUF_POWER: equ 39
0466CC             0046*   BUF_SHIELD: equ 40
0466CC             0047*   BUF_SPLASH_BG: equ 41
0466CC             0048*   BUF_SPLASH_LOGO: equ 42
0466CC             0049*   
0466CC             0050*   ui_image_list: ; type; width; height; size; filename; bufferId:
0466CC 01 00 00 80 0051*   	dl 1, 128, 8, 1024, fn_bar_h_0, 0
       00 00 08 00 
       00 00 04 00 
       D2 69 04 00 
       00 00       
0466DE 01 00 00 80 0052*   	dl 1, 128, 8, 1024, fn_bar_h_1, 1
       00 00 08 00 
       00 00 04 00 
       E3 69 04 01 
       00 00       
0466F0 01 00 00 80 0053*   	dl 1, 128, 8, 1024, fn_bar_h_2, 2
       00 00 08 00 
       00 00 04 00 
       F4 69 04 02 
       00 00       
046702 01 00 00 08 0054*   	dl 1, 8, 128, 1024, fn_bar_v_0, 3
       00 00 80 00 
       00 00 04 00 
       05 6A 04 03 
       00 00       
046714 01 00 00 08 0055*   	dl 1, 8, 128, 1024, fn_bar_v_1, 4
       00 00 80 00 
       00 00 04 00 
       16 6A 04 04 
       00 00       
046726 01 00 00 08 0056*   	dl 1, 8, 128, 1024, fn_bar_v_2, 5
       00 00 80 00 
       00 00 04 00 
       27 6A 04 05 
       00 00       
046738 01 00 00 80 0057*   	dl 1, 128, 304, 38912, fn_bezel_l, 6
       00 00 30 01 
       00 00 98 00 
       38 6A 04 06 
       00 00       
04674A 01 00 00 80 0058*   	dl 1, 128, 304, 38912, fn_bezel_r, 7
       00 00 30 01 
       00 00 98 00 
       49 6A 04 07 
       00 00       
04675C 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_credits, 8
       00 00 10 00 
       00 00 01 00 
       5A 6A 04 08 
       00 00       
04676E 01 00 00 80 0060*   	dl 1, 128, 128, 16384, fn_ctl_panel_l, 9
       00 00 80 00 
       00 00 40 00 
       6B 6A 04 09 
       00 00       
046780 01 00 00 80 0061*   	dl 1, 128, 128, 16384, fn_ctl_panel_r, 10
       00 00 80 00 
       00 00 40 00 
       80 6A 04 0A 
       00 00       
046792 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_jerry_can, 11
       00 00 10 00 
       00 00 01 00 
       95 6A 04 0B 
       00 00       
0467A4 01 00 00 24 0063*   	dl 1, 36, 18, 648, fn_mfd_arms, 12
       00 00 12 00 
       00 88 02 00 
       A8 6A 04 0C 
       00 00       
0467B6 01 00 00 60 0064*   	dl 1, 96, 96, 9216, fn_mfd_bezel, 13
       00 00 60 00 
       00 00 24 00 
       BA 6A 04 0D 
       00 00       
0467C8 01 00 00 40 0065*   	dl 1, 64, 64, 4096, fn_mfd_bg, 14
       00 00 40 00 
       00 00 10 00 
       CD 6A 04 0E 
       00 00       
0467DA 01 00 00 01 0066*   	dl 1, 1, 6, 6, fn_mfd_gun_0, 15
       00 00 06 00 
       00 06 00 00 
       DD 6A 04 0F 
       00 00       
0467EC 01 00 00 01 0067*   	dl 1, 1, 6, 6, fn_mfd_gun_1, 16
       00 00 06 00 
       00 06 00 00 
       F0 6A 04 10 
       00 00       
0467FE 01 00 00 01 0068*   	dl 1, 1, 6, 6, fn_mfd_gun_2, 17
       00 00 06 00 
       00 06 00 00 
       03 6B 04 11 
       00 00       
046810 01 00 00 01 0069*   	dl 1, 1, 6, 6, fn_mfd_gun_3, 18
       00 00 06 00 
       00 06 00 00 
       16 6B 04 12 
       00 00       
046822 01 00 00 01 0070*   	dl 1, 1, 6, 6, fn_mfd_gun_4, 19
       00 00 06 00 
       00 06 00 00 
       29 6B 04 13 
       00 00       
046834 01 00 00 01 0071*   	dl 1, 1, 6, 6, fn_mfd_gun_5, 20
       00 00 06 00 
       00 06 00 00 
       3C 6B 04 14 
       00 00       
046846 01 00 00 04 0072*   	dl 1, 4, 6, 24, fn_mfd_maverick_0, 21
       00 00 06 00 
       00 18 00 00 
       4F 6B 04 15 
       00 00       
046858 01 00 00 04 0073*   	dl 1, 4, 6, 24, fn_mfd_maverick_1, 22
       00 00 06 00 
       00 18 00 00 
       67 6B 04 16 
       00 00       
04686A 01 00 00 04 0074*   	dl 1, 4, 6, 24, fn_mfd_maverick_2, 23
       00 00 06 00 
       00 18 00 00 
       7F 6B 04 17 
       00 00       
04687C 01 00 00 04 0075*   	dl 1, 4, 6, 24, fn_mfd_maverick_3, 24
       00 00 06 00 
       00 18 00 00 
       97 6B 04 18 
       00 00       
04688E 01 00 00 04 0076*   	dl 1, 4, 6, 24, fn_mfd_maverick_4, 25
       00 00 06 00 
       00 18 00 00 
       AF 6B 04 19 
       00 00       
0468A0 01 00 00 04 0077*   	dl 1, 4, 6, 24, fn_mfd_maverick_5, 26
       00 00 06 00 
       00 18 00 00 
       C7 6B 04 1A 
       00 00       
0468B2 01 00 00 03 0078*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_0, 27
       00 00 06 00 
       00 12 00 00 
       DF 6B 04 1B 
       00 00       
0468C4 01 00 00 03 0079*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_1, 28
       00 00 06 00 
       00 12 00 00 
       F9 6B 04 1C 
       00 00       
0468D6 01 00 00 03 0080*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_2, 29
       00 00 06 00 
       00 12 00 00 
       13 6C 04 1D 
       00 00       
0468E8 01 00 00 03 0081*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_3, 30
       00 00 06 00 
       00 12 00 00 
       2D 6C 04 1E 
       00 00       
0468FA 01 00 00 03 0082*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_4, 31
       00 00 06 00 
       00 12 00 00 
       47 6C 04 1F 
       00 00       
04690C 01 00 00 03 0083*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_5, 32
       00 00 06 00 
       00 12 00 00 
       61 6C 04 20 
       00 00       
04691E 01 00 00 03 0084*   	dl 1, 3, 7, 21, fn_mfd_sparrow_0, 33
       00 00 07 00 
       00 15 00 00 
       7B 6C 04 21 
       00 00       
046930 01 00 00 03 0085*   	dl 1, 3, 7, 21, fn_mfd_sparrow_1, 34
       00 00 07 00 
       00 15 00 00 
       92 6C 04 22 
       00 00       
046942 01 00 00 03 0086*   	dl 1, 3, 7, 21, fn_mfd_sparrow_2, 35
       00 00 07 00 
       00 15 00 00 
       A9 6C 04 23 
       00 00       
046954 01 00 00 03 0087*   	dl 1, 3, 7, 21, fn_mfd_sparrow_3, 36
       00 00 07 00 
       00 15 00 00 
       C0 6C 04 24 
       00 00       
046966 01 00 00 03 0088*   	dl 1, 3, 7, 21, fn_mfd_sparrow_4, 37
       00 00 07 00 
       00 15 00 00 
       D7 6C 04 25 
       00 00       
046978 01 00 00 03 0089*   	dl 1, 3, 7, 21, fn_mfd_sparrow_5, 38
       00 00 07 00 
       00 15 00 00 
       EE 6C 04 26 
       00 00       
04698A 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_power, 39
       00 00 10 00 
       00 00 01 00 
       05 6D 04 27 
       00 00       
04699C 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_shield, 40
       00 00 10 00 
       00 00 01 00 
       14 6D 04 28 
       00 00       
0469AE 01 00 00 40 0092*   	dl 1, 320, 240, 76800, fn_splash_bg, 41
       01 00 F0 00 
       00 00 2C 01 
       24 6D 04 29 
       00 00       
0469C0 01 00 00 A0 0093*   	dl 1, 160, 106, 16960, fn_splash_logo, 42
       00 00 6A 00 
       00 40 42 00 
       37 6D 04 2A 
       00 00       
0469D2             0094*   
0469D2             0095*   ; files_list: ; filename:
0469D2 75 69 2F 62 0096*   fn_bar_h_0: db "ui/bar_h_0.rgba2",0
       61 72 5F 68 
       5F 30 2E 72 
       67 62 61 32 
       00          
0469E3 75 69 2F 62 0097*   fn_bar_h_1: db "ui/bar_h_1.rgba2",0
       61 72 5F 68 
       5F 31 2E 72 
       67 62 61 32 
       00          
0469F4 75 69 2F 62 0098*   fn_bar_h_2: db "ui/bar_h_2.rgba2",0
       61 72 5F 68 
       5F 32 2E 72 
       67 62 61 32 
       00          
046A05 75 69 2F 62 0099*   fn_bar_v_0: db "ui/bar_v_0.rgba2",0
       61 72 5F 76 
       5F 30 2E 72 
       67 62 61 32 
       00          
046A16 75 69 2F 62 0100*   fn_bar_v_1: db "ui/bar_v_1.rgba2",0
       61 72 5F 76 
       5F 31 2E 72 
       67 62 61 32 
       00          
046A27 75 69 2F 62 0101*   fn_bar_v_2: db "ui/bar_v_2.rgba2",0
       61 72 5F 76 
       5F 32 2E 72 
       67 62 61 32 
       00          
046A38 75 69 2F 62 0102*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
046A49 75 69 2F 62 0103*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
046A5A 75 69 2F 63 0104*   fn_credits: db "ui/credits.rgba2",0
       72 65 64 69 
       74 73 2E 72 
       67 62 61 32 
       00          
046A6B 75 69 2F 63 0105*   fn_ctl_panel_l: db "ui/ctl_panel_l.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
046A80 75 69 2F 63 0106*   fn_ctl_panel_r: db "ui/ctl_panel_r.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
046A95 75 69 2F 6A 0107*   fn_jerry_can: db "ui/jerry_can.rgba2",0
       65 72 72 79 
       5F 63 61 6E 
       2E 72 67 62 
       61 32 00    
046AA8 75 69 2F 6D 0108*   fn_mfd_arms: db "ui/mfd_arms.rgba2",0
       66 64 5F 61 
       72 6D 73 2E 
       72 67 62 61 
       32 00       
046ABA 75 69 2F 6D 0109*   fn_mfd_bezel: db "ui/mfd_bezel.rgba2",0
       66 64 5F 62 
       65 7A 65 6C 
       2E 72 67 62 
       61 32 00    
046ACD 75 69 2F 6D 0110*   fn_mfd_bg: db "ui/mfd_bg.rgba2",0
       66 64 5F 62 
       67 2E 72 67 
       62 61 32 00 
046ADD 75 69 2F 6D 0111*   fn_mfd_gun_0: db "ui/mfd_gun_0.rgba2",0
       66 64 5F 67 
       75 6E 5F 30 
       2E 72 67 62 
       61 32 00    
046AF0 75 69 2F 6D 0112*   fn_mfd_gun_1: db "ui/mfd_gun_1.rgba2",0
       66 64 5F 67 
       75 6E 5F 31 
       2E 72 67 62 
       61 32 00    
046B03 75 69 2F 6D 0113*   fn_mfd_gun_2: db "ui/mfd_gun_2.rgba2",0
       66 64 5F 67 
       75 6E 5F 32 
       2E 72 67 62 
       61 32 00    
046B16 75 69 2F 6D 0114*   fn_mfd_gun_3: db "ui/mfd_gun_3.rgba2",0
       66 64 5F 67 
       75 6E 5F 33 
       2E 72 67 62 
       61 32 00    
046B29 75 69 2F 6D 0115*   fn_mfd_gun_4: db "ui/mfd_gun_4.rgba2",0
       66 64 5F 67 
       75 6E 5F 34 
       2E 72 67 62 
       61 32 00    
046B3C 75 69 2F 6D 0116*   fn_mfd_gun_5: db "ui/mfd_gun_5.rgba2",0
       66 64 5F 67 
       75 6E 5F 35 
       2E 72 67 62 
       61 32 00    
046B4F 75 69 2F 6D 0117*   fn_mfd_maverick_0: db "ui/mfd_maverick_0.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       30 2E 72 67 
       62 61 32 00 
046B67 75 69 2F 6D 0118*   fn_mfd_maverick_1: db "ui/mfd_maverick_1.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       31 2E 72 67 
       62 61 32 00 
046B7F 75 69 2F 6D 0119*   fn_mfd_maverick_2: db "ui/mfd_maverick_2.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       32 2E 72 67 
       62 61 32 00 
046B97 75 69 2F 6D 0120*   fn_mfd_maverick_3: db "ui/mfd_maverick_3.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       33 2E 72 67 
       62 61 32 00 
046BAF 75 69 2F 6D 0121*   fn_mfd_maverick_4: db "ui/mfd_maverick_4.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       34 2E 72 67 
       62 61 32 00 
046BC7 75 69 2F 6D 0122*   fn_mfd_maverick_5: db "ui/mfd_maverick_5.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       35 2E 72 67 
       62 61 32 00 
046BDF 75 69 2F 6D 0123*   fn_mfd_sidewinder_0: db "ui/mfd_sidewinder_0.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 30 2E 
       72 67 62 61 
       32 00       
046BF9 75 69 2F 6D 0124*   fn_mfd_sidewinder_1: db "ui/mfd_sidewinder_1.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 31 2E 
       72 67 62 61 
       32 00       
046C13 75 69 2F 6D 0125*   fn_mfd_sidewinder_2: db "ui/mfd_sidewinder_2.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 32 2E 
       72 67 62 61 
       32 00       
046C2D 75 69 2F 6D 0126*   fn_mfd_sidewinder_3: db "ui/mfd_sidewinder_3.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 33 2E 
       72 67 62 61 
       32 00       
046C47 75 69 2F 6D 0127*   fn_mfd_sidewinder_4: db "ui/mfd_sidewinder_4.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 34 2E 
       72 67 62 61 
       32 00       
046C61 75 69 2F 6D 0128*   fn_mfd_sidewinder_5: db "ui/mfd_sidewinder_5.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 35 2E 
       72 67 62 61 
       32 00       
046C7B 75 69 2F 6D 0129*   fn_mfd_sparrow_0: db "ui/mfd_sparrow_0.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 30 
       2E 72 67 62 
       61 32 00    
046C92 75 69 2F 6D 0130*   fn_mfd_sparrow_1: db "ui/mfd_sparrow_1.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 31 
       2E 72 67 62 
       61 32 00    
046CA9 75 69 2F 6D 0131*   fn_mfd_sparrow_2: db "ui/mfd_sparrow_2.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 32 
       2E 72 67 62 
       61 32 00    
046CC0 75 69 2F 6D 0132*   fn_mfd_sparrow_3: db "ui/mfd_sparrow_3.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 33 
       2E 72 67 62 
       61 32 00    
046CD7 75 69 2F 6D 0133*   fn_mfd_sparrow_4: db "ui/mfd_sparrow_4.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 34 
       2E 72 67 62 
       61 32 00    
046CEE 75 69 2F 6D 0134*   fn_mfd_sparrow_5: db "ui/mfd_sparrow_5.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 35 
       2E 72 67 62 
       61 32 00    
046D05 75 69 2F 70 0135*   fn_power: db "ui/power.rgba2",0
       6F 77 65 72 
       2E 72 67 62 
       61 32 00    
046D14 75 69 2F 73 0136*   fn_shield: db "ui/shield.rgba2",0
       68 69 65 6C 
       64 2E 72 67 
       62 61 32 00 
046D24 75 69 2F 73 0137*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
046D37 75 69 2F 73 0138*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
046D4C             0057        include "levels.inc"
046D4C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
046E00             0002*   
046E00             0003*   ; tileset indices
046E00             0004*   tiles_dg: equ 0
046E00             0005*   ; tiles_xevious: equ 1
046E00 00 00 00    0006*   tileset_ptr_idx: dl 0
046E03             0007*   tileset_ptrs:
046E03             0008*       ; dl tiles_xevious_levels
046E03 F3 6E 04    0009*       dl tileset_00_levels
046E06 00 00 00    0010*   tileset_ptrs_end: dl 0 ; list terminator
046E09             0011*   
046E09             0012*   ; get a pointer to the current tileset
046E09             0013*   ; inputs: tileset_ptr_idx
046E09             0014*   ; returns: ix = pointer to tileset levels lut
046E09             0015*   get_tileset_ptr:
046E09 3A 00 6E 04 0016*       ld a,(tileset_ptr_idx)
046E0D 57          0017*       ld d,a ; d = tileset index
046E0E 1E 03       0018*       ld e,3 ; three bytes per index record
046E10 ED 5C       0019*       mlt de ; offset into tileset_ptrs lut
046E12 DD 21 03 6E 0020*       ld ix,tileset_ptrs
       04          
046E17 DD 19       0021*       add ix,de ; ix = pointer to tileset_ptrs record
046E19 C9          0022*       ret
046E1A             0023*   ; end get_tileset_ptr
046E1A             0024*   
046E1A             0025*   ; intialize a tileset
046E1A             0026*   ; inputs: a = index into tileset_ptrs
046E1A             0027*   init_tileset:
046E1A 32 00 6E 04 0028*       ld (tileset_ptr_idx),a ; store new tileset index
046E1E CD 09 6E 04 0029*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
046E22 DD 37 00    0030*       ld ix,(ix) ; ix = pointer to tileset levels lut
046E25 DD 7E FF    0031*       ld a,(ix-1) ; number of levels in the tileset
046E28 32 58 6E 04 0032*       ld (num_levels),a
046E2C AF          0033*       xor a ; reset current level to zero
046E2D 32 57 6E 04 0034*       ld (cur_level),a
046E31 C3 89 6E 04 0035*       jp init_level
046E35             0036*   ; end init_tileset
046E35             0037*   
046E35             0038*   next_tileset:
046E35 21 00 6E 04 0039*       ld hl,tileset_ptr_idx
046E39 34          0040*       inc (hl) ; bump to next index
046E3A CD 09 6E 04 0041*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
046E3E DD 27 00    0042*       ld hl,(ix) ; ix = pointer to tileset levels lut
046E41             0043*       sign_hlu ; check for list terminator (0)
046E41 19          0001*M1     add hl,de ; 1 cycle
046E42 B7          0002*M1     or a ; clear flags ; 1 cycle
046E43 ED 52       0003*M1     sbc hl,de ; 2 cycles
046E45             0004*M1     ; 4 cycles total
046E45 C2 53 6E 04 0044*       jp nz,@F ; not end of list
046E49 3E FF       0045*       ld a,-1 ; will wrap around to zero on the next iteration
046E4B 32 00 6E 04 0046*       ld (tileset_ptr_idx),a
046E4F C3 35 6E 04 0047*       jp next_tileset ; try again
046E53             0048*   @@:
046E53 C3 1A 6E 04 0049*       jp init_tileset
046E57             0050*   ; end next_tileset
046E57             0051*   
046E57 00          0052*   cur_level: db 0
046E58 00          0053*   num_levels: db 0
046E59             0054*   
046E59             0055*   ; get a pointer to the current level lookup record
046E59             0056*   ; inputs: tileset_ptr_idx, cur_level
046E59             0057*   ; returns: ix = pointer to level definition
046E59             0058*   get_level_ptr:
046E59 CD 09 6E 04 0059*       call get_tileset_ptr
046E5D DD 37 00    0060*       ld ix,(ix) ; ix = pointer to tileset levels lut
046E60 3A 57 6E 04 0061*       ld a,(cur_level)
046E64 57          0062*       ld d,a ; d = level index
046E65 1E 03       0063*       ld e,3 ; three bytes per level record
046E67 ED 5C       0064*       mlt de ; offset into tileset levels lut
046E69 DD 19       0065*       add ix,de ; ix = pointer to level record
046E6B C9          0066*       ret
046E6C             0067*   ; end get_level_ptr
046E6C             0068*   
046E6C             0069*   ; advance to the next level in the current tileset
046E6C             0070*   ; inputs: tileset_ptr_idx, cur_level
046E6C             0071*   next_level:
046E6C 21 57 6E 04 0072*       ld hl,cur_level
046E70 34          0073*       inc (hl) ; bump to next level
046E71 CD 59 6E 04 0074*       call get_level_ptr ; ix points to current level lookup record
046E75 DD 27 00    0075*       ld hl,(ix) ; hl = pointer to next level lookup record
046E78             0076*       sign_hlu ; check for list terminator (0)
046E78 19          0001*M1     add hl,de ; 1 cycle
046E79 B7          0002*M1     or a ; clear flags ; 1 cycle
046E7A ED 52       0003*M1     sbc hl,de ; 2 cycles
046E7C             0004*M1     ; 4 cycles total
046E7C C2 89 6E 04 0077*       jp nz,@F ; not end of list
046E80 AF          0078*       xor a ; reset level to zero
046E81 32 57 6E 04 0079*       ld (cur_level),a
046E85 C3 35 6E 04 0080*       jp next_tileset ; try next tileset
046E89             0081*   @@: ; fall through to init_level
046E89             0082*   ; end next_level
046E89             0083*   
046E89             0084*   ; inputs: ix pointed to tileset level definition
046E89             0085*   init_level:
046E89 CD 59 6E 04 0086*       call get_level_ptr ; ix points to level lookup record
046E8D DD 37 00    0087*       ld ix,(ix) ; ix points to level definition
046E90             0088*   ; set tiles_cols
046E90 DD 7E 00    0089*       ld a,(ix+0)
046E93 32 06 8E 04 0090*       ld (tiles_cols),a
046E97             0091*   ; set tiles_row counter
046E97 DD 7E 01    0092*       ld a,(ix+1)
046E9A 32 03 8E 04 0093*       ld (tiles_row),a
046E9E             0094*   ; set cur_baseBufferId
046E9E DD 27 04    0095*       ld hl,(ix+4)
046EA1 22 07 8E 04 0096*       ld (cur_baseBufferId),hl
046EA5             0097*   ; set tiles_row_defs
046EA5 ED 32 07    0098*       lea ix,ix+7 ; ix points to definition of first tile of first row
046EA8 DD 22 00 8E 0099*       ld (tiles_row_defs),ix
       04          
046EAD             0100*   ; print_level:
046EAD             0101*   level_x: equ 48
046EAD             0102*   level_y: equ 0
046EAD 0E 30       0103*       ld c,level_x
046EAF 06 00       0104*       ld b,level_y
046EB1 CD 37 1A 04 0105*       call vdu_move_cursor
046EB5 CD 00 01 04 0106*       call printInline
046EB9 4C 65 76 65 0107*       asciz "Level: "
       6C 3A 20 00 
046EC1 3A 57 6E 04 0108*       ld a,(cur_level)
046EC5 CD 4A 01 04 0109*       call printHexA
046EC9             0110*       ; call printNewLine
046EC9             0111*       ; ld hl,(cur_baseBufferId)
046EC9             0112*       ; call printDec
046EC9             0113*   
046EC9             0114*   ; draw initial background tiles
046EC9 21 00 04 00 0115*       ld hl,BUF_BG_STARS_0
046ECD CD 38 1B 04 0116*       call vdu_buff_select
046ED1 01 00 00 00 0117*       ld bc,0
046ED5 11 00 00 00 0118*       ld de,field_top
046ED9 CD 20 1F 04 0119*       call vdu_plot_bmp
046EDD             0120*   
046EDD 21 04 04 00 0121*       ld hl,BUF_BG_STARS_4
046EE1 CD 38 1B 04 0122*       call vdu_buff_select
046EE5 01 00 00 00 0123*       ld bc,0
046EE9 11 00 01 00 0124*       ld de,field_top+256
046EED CD 20 1F 04 0125*       call vdu_plot_bmp
046EF1             0126*   
046EF1 C9          0127*       ret
046EF2             0128*   ; end init_level
046EF2             0058        include "levels_tileset_0.inc"
046EF2             0001*   ; Generated from tiles/dg/dg0_03.tmx
046EF2             0002*   
046EF2 01          0003*   tileset_00_num_levels: db 1
046EF3             0004*   
046EF3             0005*   tileset_00_levels:
046EF3 F9 6E 04    0006*   	dl tileset_00_level_00
046EF6 00 00 00    0007*   	dl 0 ; list terminator
046EF9             0008*   
046EF9             0009*   tileset_00_level_00: ; Level 0
046EF9 10          0010*   	db 16          ; num cols
046EFA 00 01 00    0011*   	dl 256          ; num rows
046EFD 00 02 00    0012*   	dl 512 ; base bufferId
046F00 F8 F8 F8 F8 0013*   	db 248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248
       F8 F8 F8 F8 
       F8 F8 F8 F8 
       F8 F8 F8 F8 
046F10 00 00 00 00 0014*   	db 000,000,000,000,000,000,147,000,089,090,091,000,147,000,000,000
       00 00 93 00 
       59 5A 5B 00 
       93 00 00 00 
046F20 00 CE CF D0 0015*   	db 000,206,207,208,000,000,147,000,073,005,075,000,147,000,000,000
       00 00 93 00 
       49 05 4B 00 
       93 00 00 00 
046F30 81 BE 79 A7 0016*   	db 129,190,121,167,216,216,182,145,057,058,059,145,147,000,000,000
       D8 D8 B6 91 
       39 3A 3B 91 
       93 00 00 00 
046F40 00 AE AF B0 0017*   	db 000,174,175,176,000,206,183,208,000,000,000,206,207,207,208,000
       00 CE B7 D0 
       00 00 00 CE 
       CF CF D0 00 
046F50 00 00 83 00 0018*   	db 000,000,131,000,000,190,156,171,220,220,220,220,186,192,192,129
       00 BE 9C AB 
       DC DC DC DC 
       BA C0 C0 81 
046F60 00 00 83 00 0019*   	db 000,000,131,000,000,174,184,176,000,000,000,131,219,191,131,000
       00 AE B8 B0 
       00 00 00 83 
       DB BF 83 00 
046F70 00 CE CF D0 0020*   	db 000,206,207,208,000,000,215,000,000,000,000,131,187,191,131,000
       00 00 D7 00 
       00 00 00 83 
       BB BF 83 00 
046F80 81 BE 69 A7 0021*   	db 129,190,105,167,216,216,166,129,129,129,129,131,136,137,131,000
       D8 D8 A6 81 
       81 81 81 83 
       88 89 83 00 
046F90 00 AE AF B0 0022*   	db 000,174,175,176,000,000,131,000,000,000,000,131,134,135,131,000
       00 00 83 00 
       00 00 00 83 
       86 87 83 00 
046FA0 00 00 83 00 0023*   	db 000,000,131,000,000,000,131,000,000,000,000,131,134,135,131,000
       00 00 83 00 
       00 00 00 83 
       86 87 83 00 
046FB0 00 00 83 00 0024*   	db 000,000,131,000,000,000,131,000,000,000,000,131,150,151,131,000
       00 00 83 00 
       00 00 00 83 
       96 97 83 00 
046FC0 00 CE CF D0 0025*   	db 000,206,207,208,000,000,131,000,000,000,000,131,150,151,131,000
       00 00 83 00 
       00 00 00 83 
       96 97 83 00 
046FD0 81 BE 79 A7 0026*   	db 129,190,121,167,216,216,231,216,216,216,216,168,154,155,131,000
       D8 D8 E7 D8 
       D8 D8 D8 A8 
       9A 9B 83 00 
046FE0 00 AE AF B0 0027*   	db 000,174,175,176,000,206,183,208,000,000,000,174,175,175,176,000
       00 CE B7 D0 
       00 00 00 AE 
       AF AF B0 00 
046FF0 00 00 83 00 0028*   	db 000,000,131,000,000,190,156,192,000,000,000,000,131,000,000,000
       00 BE 9C C0 
       00 00 00 00 
       83 00 00 00 
047000 00 00 83 00 0029*   	db 000,000,131,000,000,174,184,176,000,000,000,000,131,000,000,000
       00 AE B8 B0 
       00 00 00 00 
       83 00 00 00 
047010 00 CE CF D0 0030*   	db 000,206,207,208,000,000,215,000,000,206,207,207,207,207,208,000
       00 00 D7 00 
       00 CE CF CF 
       CF CF D0 00 
047020 81 BE 79 A7 0031*   	db 129,190,121,167,216,216,166,000,000,190,081,082,083,084,192,129
       D8 D8 A6 00 
       00 BE 51 52 
       53 54 C0 81 
047030 00 AE AF B0 0032*   	db 000,174,175,176,000,000,131,000,000,190,065,066,067,068,192,000
       00 00 83 00 
       00 BE 41 42 
       43 44 C0 00 
047040 00 00 83 00 0033*   	db 000,000,131,000,000,000,131,129,129,190,049,050,051,052,192,000
       00 00 83 81 
       81 BE 31 32 
       33 34 C0 00 
047050 00 00 83 00 0034*   	db 000,000,131,000,000,000,131,000,000,190,033,034,035,036,192,129
       00 00 83 00 
       00 BE 21 22 
       23 24 C0 81 
047060 00 CE CF D0 0035*   	db 000,206,207,208,000,000,131,000,000,174,175,175,175,175,176,000
       00 00 83 00 
       00 AE AF AF 
       AF AF B0 00 
047070 81 BE 69 A7 0036*   	db 129,190,105,167,216,216,182,000,000,000,000,000,000,000,000,000
       D8 D8 B6 00 
       00 00 00 00 
       00 00 00 00 
047080 00 AE AF B0 0037*   	db 000,174,175,176,000,206,183,208,000,000,000,000,000,000,000,000
       00 CE B7 D0 
       00 00 00 00 
       00 00 00 00 
047090 00 00 83 00 0038*   	db 000,000,131,000,000,190,156,192,009,010,010,010,010,010,010,011
       00 BE 9C C0 
       09 0A 0A 0A 
       0A 0A 0A 0B 
0470A0 00 00 83 00 0039*   	db 000,000,131,000,000,174,184,176,000,000,000,000,000,000,000,000
       00 AE B8 B0 
       00 00 00 00 
       00 00 00 00 
0470B0 00 CE CF D0 0040*   	db 000,206,207,208,000,000,215,145,145,081,082,088,083,084,145,145
       00 00 D7 91 
       91 51 52 58 
       53 54 91 91 
0470C0 81 BE 79 A7 0041*   	db 129,190,121,167,216,216,166,000,000,065,156,248,156,068,000,000
       D8 D8 A6 00 
       00 41 9C F8 
       9C 44 00 00 
0470D0 00 AE AF B4 0042*   	db 000,174,175,180,000,000,147,000,000,071,248,001,248,087,000,000
       00 00 93 00 
       00 47 F8 01 
       F8 57 00 00 
0470E0 00 00 00 D3 0043*   	db 000,000,000,211,000,000,147,000,000,049,156,248,156,052,000,000
       00 00 93 00 
       00 31 9C F8 
       9C 34 00 00 
0470F0 91 91 91 D3 0044*   	db 145,145,145,211,145,145,145,145,145,033,034,072,035,036,145,145
       91 91 91 91 
       91 21 22 48 
       23 24 91 91 
047100 BF 93 98 D3 0045*   	db 191,147,152,211,153,147,191,191,191,147,191,191,191,147,191,191
       99 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
047110 BF 93 96 D3 0046*   	db 191,147,150,211,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
047120 BF 93 96 F3 0047*   	db 191,147,150,243,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
047130 BF 93 96 F3 0048*   	db 191,147,150,243,151,147,191,191,191,147,191,191,191,147,191,191
       97 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
047140 BF 93 86 DB 0049*   	db 191,147,134,219,135,147,191,191,191,147,191,191,191,147,191,191
       87 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
047150 BF 93 8A DB 0050*   	db 191,147,138,219,139,147,191,191,191,147,191,191,191,147,191,191
       8B 93 BF BF 
       BF 93 BF BF 
       BF 93 BF BF 
047160 91 91 91 DB 0051*   	db 145,145,145,219,145,145,145,145,145,145,145,145,145,145,145,145
       91 91 91 91 
       91 91 91 91 
       91 91 91 91 
047170 00 83 00 DB 0052*   	db 000,131,000,219,000,131,000,000,000,131,000,000,000,131,000,000
       00 83 00 00 
       00 83 00 00 
       00 83 00 00 
047180 00 83 00 DB 0053*   	db 000,131,000,219,000,131,000,000,000,131,000,000,000,131,000,000
       00 83 00 00 
       00 83 00 00 
       00 83 00 00 
047190 DC DC DC EC 0054*   	db 220,220,220,236,220,220,220,220,220,220,220,235,220,220,220,220
       DC DC DC DC 
       DC DC DC EB 
       DC DC DC DC 
0471A0 00 83 00 00 0055*   	db 000,131,000,000,000,131,000,136,137,131,000,219,000,131,000,000
       00 83 00 88 
       89 83 00 DB 
       00 83 00 00 
0471B0 00 83 00 00 0056*   	db 000,131,000,000,000,131,000,134,135,131,000,219,000,131,000,000
       00 83 00 86 
       87 83 00 DB 
       00 83 00 00 
0471C0 00 83 00 00 0057*   	db 000,131,000,000,000,131,000,150,151,131,000,219,000,131,000,000
       00 83 00 96 
       97 83 00 DB 
       00 83 00 00 
0471D0 00 83 00 00 0058*   	db 000,131,000,000,000,131,000,154,155,131,000,187,000,131,000,000
       00 83 00 9A 
       9B 83 00 BB 
       00 83 00 00 
0471E0 81 81 81 81 0059*   	db 129,129,129,129,129,129,129,184,129,129,136,137,129,129,129,129
       81 81 81 B8 
       81 81 88 89 
       81 81 81 81 
0471F0 BF BF D0 00 0060*   	db 191,191,208,000,000,206,191,215,191,191,134,135,191,191,191,191
       00 CE BF D7 
       BF BF 86 87 
       BF BF BF BF 
047200 BF BF BF D0 0061*   	db 191,191,191,208,206,191,191,215,191,191,134,135,191,191,191,191
       CE BF BF D7 
       BF BF 86 87 
       BF BF BF BF 
047210 59 5A 5B BF 0062*   	db 089,090,091,191,191,004,191,215,191,191,150,151,191,191,248,191
       BF 04 BF D7 
       BF BF 96 97 
       BF BF F8 BF 
047220 49 05 4B BF 0063*   	db 073,005,075,191,191,004,167,200,191,191,150,151,191,248,001,248
       BF 04 A7 C8 
       BF BF 96 97 
       BF F8 01 F8 
047230 39 3A 3B BF 0064*   	db 057,058,059,191,191,004,191,215,191,191,154,155,191,191,248,191
       BF 04 BF D7 
       BF BF 9A 9B 
       BF BF F8 BF 
047240 BF BF BF B0 0065*   	db 191,191,191,176,174,191,191,215,191,191,184,191,191,191,191,191
       AE BF BF D7 
       BF BF B8 BF 
       BF BF BF BF 
047250 BF BF B0 00 0066*   	db 191,191,176,000,000,174,191,165,216,216,232,216,216,216,216,216
       00 AE BF A5 
       D8 D8 E8 D8 
       D8 D8 D8 D8 
047260 00 00 00 00 0067*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
047270 81 81 81 81 0068*   	db 129,129,129,129,129,129,131,000,131,000,000,000,000,000,000,000
       81 81 83 00 
       83 00 00 00 
       00 00 00 00 
047280 00 00 00 00 0069*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
047290 00 00 00 00 0070*   	db 000,000,000,000,000,000,131,000,131,129,129,129,129,129,129,129
       00 00 83 00 
       83 81 81 81 
       81 81 81 81 
0472A0 00 00 00 00 0071*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
0472B0 00 00 00 00 0072*   	db 000,000,000,000,000,000,131,000,131,000,000,000,000,000,000,000
       00 00 83 00 
       83 00 00 00 
       00 00 00 00 
0472C0 95 95 95 95 0073*   	db 149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149
       95 95 95 95 
       95 95 95 95 
       95 95 95 95 
0472D0 00 00 00 00 0074*   	db 000,000,000,000,000,206,191,191,191,208,000,000,000,000,000,000
       00 CE BF BF 
       BF D0 00 00 
       00 00 00 00 
0472E0 BF BF BF BF 0075*   	db 191,191,191,191,191,191,089,090,091,191,191,191,191,191,191,191
       BF BF 59 5A 
       5B BF BF BF 
       BF BF BF BF 
0472F0 BF BF BF BF 0076*   	db 191,191,191,191,191,191,073,005,075,191,191,191,191,191,191,191
       BF BF 49 05 
       4B BF BF BF 
       BF BF BF BF 
047300 BF BF BF BF 0077*   	db 191,191,191,191,191,191,057,058,059,191,191,191,191,191,191,191
       BF BF 39 3A 
       3B BF BF BF 
       BF BF BF BF 
047310 00 00 00 00 0078*   	db 000,000,000,000,000,174,191,191,191,176,000,000,000,000,000,000
       00 AE BF BF 
       BF B0 00 00 
       00 00 00 00 
047320 85 85 85 85 0079*   	db 133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133
       85 85 85 85 
       85 85 85 85 
       85 85 85 85 
047330 00 00 83 00 0080*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,000,147,000
       83 00 00 00 
       83 00 00 00 
       00 00 93 00 
047340 00 00 83 00 0081*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,000,147,000
       83 00 00 00 
       83 00 00 00 
       00 00 93 00 
047350 00 00 83 00 0082*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,206,207,208
       83 00 00 00 
       83 00 00 00 
       00 CE CF D0 
047360 00 00 83 00 0083*   	db 000,000,131,000,131,000,000,000,131,000,000,000,206,191,248,191
       83 00 00 00 
       83 00 00 00 
       CE BF F8 BF 
047370 81 81 81 81 0084*   	db 129,129,129,129,129,129,129,129,129,129,129,129,190,248,001,248
       81 81 81 81 
       81 81 81 81 
       BE F8 01 F8 
047380 00 00 83 00 0085*   	db 000,000,131,000,131,000,000,000,131,000,000,000,174,191,248,191
       83 00 00 00 
       83 00 00 00 
       AE BF F8 BF 
047390 00 00 83 00 0086*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,190,191,191
       83 00 00 00 
       83 00 00 00 
       00 BE BF BF 
0473A0 00 00 83 00 0087*   	db 000,000,131,000,131,000,000,000,131,000,000,000,000,190,191,191
       83 00 00 00 
       83 00 00 00 
       00 BE BF BF 
0473B0 00 00 83 00 0088*   	db 000,000,131,000,131,000,000,000,131,000,000,000,206,191,191,191
       83 00 00 00 
       83 00 00 00 
       CE BF BF BF 
0473C0 00 CE BF BF 0089*   	db 000,206,191,191,191,208,000,000,131,000,000,206,191,191,191,191
       BF D0 00 00 
       83 00 00 CE 
       BF BF BF BF 
0473D0 BF BF 59 5A 0090*   	db 191,191,089,090,091,191,191,191,191,191,191,191,191,191,092,093
       5B BF BF BF 
       BF BF BF BF 
       BF BF 5C 5D 
0473E0 BF BF 49 05 0091*   	db 191,191,073,005,075,191,191,191,191,191,191,191,191,191,076,077
       4B BF BF BF 
       BF BF BF BF 
       BF BF 4C 4D 
0473F0 BF BF 39 3A 0092*   	db 191,191,057,058,059,191,191,191,191,191,191,191,191,191,191,191
       3B BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
047400 00 AE BF BF 0093*   	db 000,174,191,191,191,191,191,191,191,191,176,000,174,175,175,175
       BF BF BF BF 
       BF BF B0 00 
       AE AF AF AF 
047410 00 00 83 00 0094*   	db 000,000,131,000,131,000,174,191,191,191,000,000,000,000,131,000
       83 00 AE BF 
       BF BF 00 00 
       00 00 83 00 
047420 00 00 83 00 0095*   	db 000,000,131,000,131,000,000,191,191,191,000,000,000,000,131,000
       83 00 00 BF 
       BF BF 00 00 
       00 00 83 00 
047430 00 00 83 00 0096*   	db 000,000,131,000,131,000,000,191,191,191,000,000,000,000,131,000
       83 00 00 BF 
       BF BF 00 00 
       00 00 83 00 
047440 84 84 84 84 0097*   	db 132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132
       84 84 84 84 
       84 84 84 84 
       84 84 84 84 
047450 00 00 00 00 0098*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
047460 00 00 00 00 0099*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
047470 00 00 00 00 0100*   	db 000,000,000,000,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
047480 00 CE CF CF 0101*   	db 000,206,207,207,208,000,000,191,191,191,000,000,000,000,000,000
       D0 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
047490 00 BE 98 99 0102*   	db 000,190,152,153,192,000,000,191,248,191,000,000,000,000,000,000
       C0 00 00 BF 
       F8 BF 00 00 
       00 00 00 00 
0474A0 00 BE 96 97 0103*   	db 000,190,150,151,192,145,145,248,001,248,000,000,000,000,000,000
       C0 91 91 F8 
       01 F8 00 00 
       00 00 00 00 
0474B0 00 BE 96 97 0104*   	db 000,190,150,151,192,000,000,191,248,191,000,000,000,000,000,000
       C0 00 00 BF 
       F8 BF 00 00 
       00 00 00 00 
0474C0 00 BE 96 97 0105*   	db 000,190,150,151,192,000,000,191,191,191,000,000,000,000,000,000
       C0 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
0474D0 00 BE 8A 8B 0106*   	db 000,190,138,139,192,145,145,191,191,191,000,000,000,000,000,000
       C0 91 91 BF 
       BF BF 00 00 
       00 00 00 00 
0474E0 00 AE BF BC 0107*   	db 000,174,191,188,176,000,000,191,191,191,000,206,207,207,208,000
       B0 00 00 BF 
       BF BF 00 CE 
       CF CF D0 00 
0474F0 00 00 BE DB 0108*   	db 000,000,190,219,000,000,000,191,191,191,145,190,152,153,192,000
       00 00 00 BF 
       BF BF 91 BE 
       98 99 C0 00 
047500 BF BF BF DB 0109*   	db 191,191,191,219,208,000,206,191,191,191,000,190,150,151,192,000
       D0 00 CE BF 
       BF BF 00 BE 
       96 97 C0 00 
047510 59 5A 5B DB 0110*   	db 089,090,091,219,191,191,191,191,167,216,216,168,150,151,192,000
       BF BF BF BF 
       A7 D8 D8 A8 
       96 97 C0 00 
047520 49 05 4B AA 0111*   	db 073,005,075,170,191,191,191,191,191,191,000,190,150,151,192,000
       BF BF BF BF 
       BF BF 00 BE 
       96 97 C0 00 
047530 39 3A 3B BF 0112*   	db 057,058,059,191,191,191,191,191,191,191,145,190,138,139,192,000
       BF BF BF BF 
       BF BF 91 BE 
       8A 8B C0 00 
047540 BF BF B0 93 0113*   	db 191,191,176,147,000,000,174,191,191,191,000,174,188,175,176,000
       00 00 AE BF 
       BF BF 00 AE 
       BC AF B0 00 
047550 00 00 00 93 0114*   	db 000,000,000,147,000,000,000,191,008,191,000,000,219,192,000,000
       00 00 00 BF 
       08 BF 00 00 
       DB C0 00 00 
047560 00 00 00 93 0115*   	db 000,000,000,147,000,000,000,191,008,220,220,220,170,192,000,000
       00 00 00 BF 
       08 DC DC DC 
       AA C0 00 00 
047570 00 00 00 93 0116*   	db 000,000,000,147,000,000,000,191,008,191,175,175,175,176,000,000
       00 00 00 BF 
       08 BF AF AF 
       AF B0 00 00 
047580 00 00 00 93 0117*   	db 000,000,000,147,000,000,000,191,191,191,000,000,000,000,000,000
       00 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
047590 00 00 CE CF 0118*   	db 000,000,206,207,208,000,000,191,191,191,000,000,000,000,000,000
       D0 00 00 BF 
       BF BF 00 00 
       00 00 00 00 
0475A0 00 CE BF F8 0119*   	db 000,206,191,248,191,208,000,191,191,191,208,000,206,191,191,191
       BF D0 00 BF 
       BF BF D0 00 
       CE BF BF BF 
0475B0 81 BE F8 01 0120*   	db 129,190,248,001,248,191,191,191,191,191,191,191,191,089,090,091
       F8 BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
0475C0 00 AE AF F8 0121*   	db 000,174,175,248,191,191,191,191,191,191,191,191,191,073,005,075
       BF BF BF BF 
       BF BF BF BF 
       BF 49 05 4B 
0475D0 00 00 AE BF 0122*   	db 000,000,174,191,176,000,174,191,191,191,191,191,191,057,058,059
       B0 00 AE BF 
       BF BF BF BF 
       BF 39 3A 3B 
0475E0 00 00 00 83 0123*   	db 000,000,000,131,000,000,000,000,131,000,000,000,174,191,191,191
       00 00 00 00 
       83 00 00 00 
       AE BF BF BF 
0475F0 7A 7B 7A 7B 0124*   	db 122,123,122,123,122,123,122,123,122,123,122,123,122,123,122,123
       7A 7B 7A 7B 
       7A 7B 7A 7B 
       7A 7B 7A 7B 
047600 6A 6B 6A 6B 0125*   	db 106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107
       6A 6B 6A 6B 
       6A 6B 6A 6B 
       6A 6B 6A 6B 
047610 00 93 00 93 0126*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
047620 00 93 00 93 0127*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
047630 00 93 00 93 0128*   	db 000,147,000,147,108,108,108,108,108,108,147,000,147,000,000,147
       6C 6C 6C 6C 
       6C 6C 93 00 
       93 00 00 93 
047640 00 93 00 93 0129*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,108,108,108
       00 00 00 00 
       00 00 93 00 
       93 6C 6C 6C 
047650 00 93 00 93 0130*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
047660 00 93 00 93 0131*   	db 000,147,000,147,000,000,000,000,000,000,147,000,147,000,000,147
       00 00 00 00 
       00 00 93 00 
       93 00 00 93 
047670 CE BF BF BF 0132*   	db 206,191,191,191,208,000,000,000,000,206,191,191,191,208,206,191
       D0 00 00 00 
       00 CE BF BF 
       BF D0 CE BF 
047680 BF 59 5A 5B 0133*   	db 191,089,090,091,191,191,191,191,191,191,089,090,091,191,191,191
       BF BF BF BF 
       BF BF 59 5A 
       5B BF BF BF 
047690 BF 49 05 4B 0134*   	db 191,073,005,075,191,191,191,191,191,191,073,005,075,191,191,191
       BF BF BF BF 
       BF BF 49 05 
       4B BF BF BF 
0476A0 BF 39 3A 3B 0135*   	db 191,057,058,059,191,191,191,191,191,191,057,058,059,191,191,191
       BF BF BF BF 
       BF BF 39 3A 
       3B BF BF BF 
0476B0 AE BF BF BF 0136*   	db 174,191,191,191,176,000,000,000,000,174,191,191,191,176,174,191
       B0 00 00 00 
       00 AE BF BF 
       BF B0 AE BF 
0476C0 00 00 00 00 0137*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
0476D0 00 00 00 00 0138*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
0476E0 00 00 00 00 0139*   	db 000,000,000,000,000,000,000,000,000,000,131,000,000,000,000,000
       00 00 00 00 
       00 00 83 00 
       00 00 00 00 
0476F0 00 00 00 00 0140*   	db 000,000,000,000,000,000,000,000,000,206,248,208,000,000,000,000
       00 00 00 00 
       00 CE F8 D0 
       00 00 00 00 
047700 09 0A 0A 0A 0141*   	db 009,010,010,010,010,010,010,010,011,248,001,248,145,145,145,145
       0A 0A 0A 0A 
       0B F8 01 F8 
       91 91 91 91 
047710 00 00 00 00 0142*   	db 000,000,000,000,000,000,000,000,000,174,248,176,000,000,000,000
       00 00 00 00 
       00 AE F8 B0 
       00 00 00 00 
047720 00 00 00 00 0143*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047730 00 00 00 00 0144*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047740 00 00 00 00 0145*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
047750 00 00 CE CF 0146*   	db 000,000,206,207,207,207,208,000,000,000,000,000,000,000,000,000
       CF CF D0 00 
       00 00 00 00 
       00 00 00 00 
047760 81 81 BE 59 0147*   	db 129,129,190,089,090,091,192,207,207,207,207,208,000,000,000,000
       5A 5B C0 CF 
       CF CF CF D0 
       00 00 00 00 
047770 00 00 BE 49 0148*   	db 000,000,190,073,005,075,167,216,216,216,216,182,208,000,000,000
       05 4B A7 D8 
       D8 D8 D8 B6 
       D0 00 00 00 
047780 81 81 BE 39 0149*   	db 129,129,190,057,058,059,192,176,000,000,000,215,192,000,000,000
       3A 3B C0 B0 
       00 00 00 D7 
       C0 00 00 00 
047790 00 00 AE AF 0150*   	db 000,000,174,175,175,175,176,000,000,000,000,215,192,000,000,000
       AF AF B0 00 
       00 00 00 D7 
       C0 00 00 00 
0477A0 00 00 00 83 0151*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
0477B0 00 00 00 83 0152*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
0477C0 00 00 00 83 0153*   	db 000,000,000,131,000,131,000,000,000,000,000,215,192,000,000,000
       00 83 00 00 
       00 00 00 D7 
       C0 00 00 00 
0477D0 00 00 00 83 0154*   	db 000,000,000,131,000,131,000,000,000,206,207,207,207,208,000,000
       00 83 00 00 
       00 CE CF CF 
       CF D0 00 00 
0477E0 81 81 81 81 0155*   	db 129,129,129,129,129,129,129,129,129,190,089,090,091,192,129,129
       81 81 81 81 
       81 BE 59 5A 
       5B C0 81 81 
0477F0 00 00 00 00 0156*   	db 000,000,000,000,000,000,000,000,000,190,073,005,075,192,000,000
       00 00 00 00 
       00 BE 49 05 
       4B C0 00 00 
047800 81 81 81 81 0157*   	db 129,129,129,129,129,129,129,129,129,190,057,058,059,192,129,129
       81 81 81 81 
       81 BE 39 3A 
       3B C0 81 81 
047810 00 00 00 83 0158*   	db 000,000,000,131,000,131,000,000,000,174,175,180,175,176,000,000
       00 83 00 00 
       00 AE AF B4 
       AF B0 00 00 
047820 00 00 00 83 0159*   	db 000,000,000,131,000,131,000,000,000,000,191,211,000,000,000,000
       00 83 00 00 
       00 00 BF D3 
       00 00 00 00 
047830 00 00 00 83 0160*   	db 000,000,000,131,000,131,000,000,000,000,191,211,000,000,000,000
       00 83 00 00 
       00 00 BF D3 
       00 00 00 00 
047840 00 00 00 83 0161*   	db 000,000,000,131,000,131,000,000,000,000,191,211,000,000,000,000
       00 83 00 00 
       00 00 BF D3 
       00 00 00 00 
047850 00 00 CE CF 0162*   	db 000,000,206,207,207,207,208,000,000,000,191,211,000,000,000,000
       CF CF D0 00 
       00 00 BF D3 
       00 00 00 00 
047860 00 00 BE 59 0163*   	db 000,000,190,089,090,091,192,000,000,000,191,211,000,000,000,000
       5A 5B C0 00 
       00 00 BF D3 
       00 00 00 00 
047870 00 00 BE 49 0164*   	db 000,000,190,073,005,075,192,000,000,206,191,248,208,000,000,000
       05 4B C0 00 
       00 CE BF F8 
       D0 00 00 00 
047880 00 00 BE 39 0165*   	db 000,000,190,057,058,059,171,220,220,220,248,001,248,145,145,145
       3A 3B AB DC 
       DC DC F8 01 
       F8 91 91 91 
047890 00 00 AE AF 0166*   	db 000,000,174,175,175,175,176,000,000,000,174,248,176,000,000,000
       AF AF B0 00 
       00 00 AE F8 
       B0 00 00 00 
0478A0 00 00 00 00 0167*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0478B0 00 00 00 04 0168*   	db 000,000,000,004,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0478C0 00 00 00 04 0169*   	db 000,000,000,004,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0478D0 00 00 00 04 0170*   	db 000,000,000,004,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0478E0 00 00 00 00 0171*   	db 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0478F0 00 00 00 00 0172*   	db 000,000,000,000,000,000,000,206,207,207,207,208,000,000,000,000
       00 00 00 CE 
       CF CF CF D0 
       00 00 00 00 
047900 00 00 00 00 0173*   	db 000,000,000,000,000,000,000,190,089,090,091,192,000,000,000,000
       00 00 00 BE 
       59 5A 5B C0 
       00 00 00 00 
047910 00 00 00 00 0174*   	db 000,000,000,000,000,000,000,190,073,005,075,167,216,216,182,000
       00 00 00 BE 
       49 05 4B A7 
       D8 D8 B6 00 
047920 00 00 00 00 0175*   	db 000,000,000,000,000,000,000,190,057,058,059,192,000,000,215,000
       00 00 00 BE 
       39 3A 3B C0 
       00 00 D7 00 
047930 00 00 00 00 0176*   	db 000,000,000,000,000,000,000,174,175,175,175,176,000,000,215,000
       00 00 00 AE 
       AF AF AF B0 
       00 00 D7 00 
047940 00 00 00 00 0177*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
047950 00 00 00 00 0178*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
047960 00 00 00 00 0179*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
047970 00 00 00 00 0180*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
047980 00 00 00 00 0181*   	db 000,000,000,000,000,000,000,000,147,000,147,000,000,000,215,000
       00 00 00 00 
       93 00 93 00 
       00 00 D7 00 
047990 CF CF CF D0 0182*   	db 207,207,207,208,000,000,000,000,147,000,147,000,206,207,183,207
       00 00 00 00 
       93 00 93 00 
       CE CF B7 CF 
0479A0 59 5A 5B C0 0183*   	db 089,090,091,192,145,145,145,145,145,145,145,145,190,089,090,091
       91 91 91 91 
       91 91 91 91 
       BE 59 5A 5B 
0479B0 49 05 4B C0 0184*   	db 073,005,075,192,000,000,000,000,147,000,147,000,190,073,005,075
       00 00 00 00 
       93 00 93 00 
       BE 49 05 4B 
0479C0 39 3A 3B C0 0185*   	db 057,058,059,192,145,145,145,145,145,145,145,145,190,057,058,059
       91 91 91 91 
       91 91 91 91 
       BE 39 3A 3B 
0479D0 BF B4 AF B0 0186*   	db 191,180,175,176,000,000,000,000,000,000,147,000,174,175,175,175
       00 00 00 00 
       00 00 93 00 
       AE AF AF AF 
0479E0 BF D3 00 00 0187*   	db 191,211,000,000,000,000,008,000,000,000,147,000,000,000,000,000
       00 00 08 00 
       00 00 93 00 
       00 00 00 00 
0479F0 BF D3 00 00 0188*   	db 191,211,000,000,000,000,008,000,000,000,147,000,000,000,000,000
       00 00 08 00 
       00 00 93 00 
       00 00 00 00 
047A00 BF D3 00 00 0189*   	db 191,211,000,000,000,000,008,000,000,000,152,153,145,145,145,145
       00 00 08 00 
       00 00 98 99 
       91 91 91 91 
047A10 BF D3 00 00 0190*   	db 191,211,000,000,000,000,000,000,000,000,150,151,000,000,000,000
       00 00 00 00 
       00 00 96 97 
       00 00 00 00 
047A20 BF D3 00 00 0191*   	db 191,211,000,000,000,000,000,000,000,000,150,151,000,000,000,000
       00 00 00 00 
       00 00 96 97 
       00 00 00 00 
047A30 BF D3 00 00 0192*   	db 191,211,000,000,000,000,000,000,000,000,134,135,000,000,000,000
       00 00 00 00 
       00 00 86 87 
       00 00 00 00 
047A40 BF D3 00 00 0193*   	db 191,211,000,000,000,000,000,000,000,000,134,135,000,000,000,000
       00 00 00 00 
       00 00 86 87 
       00 00 00 00 
047A50 BF D3 00 CE 0194*   	db 191,211,000,206,207,207,207,208,000,000,138,139,129,129,129,129
       CF CF CF D0 
       00 00 8A 8B 
       81 81 81 81 
047A60 BF A1 A4 BE 0195*   	db 191,161,164,190,089,090,091,192,000,000,188,147,000,000,000,000
       59 5A 5B C0 
       00 00 BC 93 
       00 00 00 00 
047A70 AE AF BF BE 0196*   	db 174,175,191,190,073,005,075,171,220,220,170,147,000,000,000,000
       49 05 4B AB 
       DC DC AA 93 
       00 00 00 00 
047A80 00 00 AE BE 0197*   	db 000,000,174,190,057,058,059,192,000,000,000,147,000,000,000,000
       39 3A 3B C0 
       00 00 00 93 
       00 00 00 00 
047A90 00 00 00 AE 0198*   	db 000,000,000,174,175,175,175,191,129,129,129,129,129,129,129,129
       AF AF AF BF 
       81 81 81 81 
       81 81 81 81 
047AA0 00 00 00 00 0199*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
047AB0 00 00 00 00 0200*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
047AC0 00 00 00 00 0201*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
047AD0 00 00 00 00 0202*   	db 000,000,000,000,147,000,000,000,000,000,000,147,000,147,000,000
       93 00 00 00 
       00 00 00 93 
       00 93 00 00 
047AE0 00 CE CF CF 0203*   	db 000,206,207,207,207,208,000,000,000,000,000,147,000,147,000,000
       CF D0 00 00 
       00 00 00 93 
       00 93 00 00 
047AF0 00 BE BF F8 0204*   	db 000,190,191,248,191,192,000,000,000,000,000,147,000,147,000,000
       BF C0 00 00 
       00 00 00 93 
       00 93 00 00 
047B00 00 BE F8 01 0205*   	db 000,190,248,001,248,192,000,000,000,000,206,207,207,207,208,000
       F8 C0 00 00 
       00 00 CE CF 
       CF CF D0 00 
047B10 00 AE BF F8 0206*   	db 000,174,191,248,191,176,000,000,000,000,190,089,090,091,192,000
       BF B0 00 00 
       00 00 BE 59 
       5A 5B C0 00 
047B20 00 00 AE BC 0207*   	db 000,000,174,188,176,000,000,000,000,185,172,073,005,075,192,000
       B0 00 00 00 
       00 B9 AC 49 
       05 4B C0 00 
047B30 00 00 00 DB 0208*   	db 000,000,000,219,000,000,000,000,000,219,190,057,058,059,192,000
       00 00 00 00 
       00 DB BE 39 
       3A 3B C0 00 
047B40 00 00 00 DB 0209*   	db 000,000,000,219,000,000,000,000,000,219,174,175,175,175,176,000
       00 00 00 00 
       00 DB AE AF 
       AF AF B0 00 
047B50 00 00 00 DB 0210*   	db 000,000,000,219,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
047B60 00 B9 DC EC 0211*   	db 000,185,220,236,220,220,220,220,220,204,000,000,000,000,000,000
       DC DC DC DC 
       DC CC 00 00 
       00 00 00 00 
047B70 00 DB 00 00 0212*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
047B80 00 DB 00 00 0213*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
047B90 00 DB 00 00 0214*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
047BA0 00 DB 00 00 0215*   	db 000,219,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
047BB0 DC AA 00 00 0216*   	db 220,170,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
047BC0 00 00 00 00 0217*   	db 000,000,000,000,000,000,000,000,000,219,000,000,000,000,000,000
       00 00 00 00 
       00 DB 00 00 
       00 00 00 00 
047BD0 00 00 00 00 0218*   	db 000,000,000,000,000,000,000,206,207,187,207,208,000,000,000,000
       00 00 00 CE 
       CF BB CF D0 
       00 00 00 00 
047BE0 81 81 81 81 0219*   	db 129,129,129,129,129,129,129,190,089,090,091,192,129,129,129,129
       81 81 81 BE 
       59 5A 5B C0 
       81 81 81 81 
047BF0 00 00 00 00 0220*   	db 000,000,000,000,000,000,000,190,073,005,075,192,000,000,000,000
       00 00 00 BE 
       49 05 4B C0 
       00 00 00 00 
047C00 00 00 00 00 0221*   	db 000,000,000,000,000,000,000,190,057,058,059,192,000,000,000,000
       00 00 00 BE 
       39 3A 3B C0 
       00 00 00 00 
047C10 00 00 00 00 0222*   	db 000,000,000,000,000,000,000,174,175,175,175,176,000,000,000,000
       00 00 00 AE 
       AF AF AF B0 
       00 00 00 00 
047C20 00 00 00 00 0223*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047C30 00 00 00 00 0224*   	db 000,000,000,000,000,000,000,000,131,129,129,129,129,129,129,129
       00 00 00 00 
       83 81 81 81 
       81 81 81 81 
047C40 00 00 00 00 0225*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047C50 00 00 00 00 0226*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047C60 81 81 81 81 0227*   	db 129,129,129,129,129,129,129,129,131,000,000,000,000,000,000,000
       81 81 81 81 
       83 00 00 00 
       00 00 00 00 
047C70 00 00 00 00 0228*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047C80 00 00 00 00 0229*   	db 000,000,000,000,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047C90 00 00 00 00 0230*   	db 000,000,000,000,000,000,000,000,131,129,129,129,129,129,129,129
       00 00 00 00 
       83 81 81 81 
       81 81 81 81 
047CA0 BF BF BF D0 0231*   	db 191,191,191,208,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047CB0 59 5A 5B BF 0232*   	db 089,090,091,191,000,000,000,000,131,000,000,000,000,000,000,000
       00 00 00 00 
       83 00 00 00 
       00 00 00 00 
047CC0 49 05 4B BF 0233*   	db 073,005,075,191,000,000,000,000,131,000,000,152,153,145,145,145
       00 00 00 00 
       83 00 00 98 
       99 91 91 91 
047CD0 39 3A 3B BF 0234*   	db 057,058,059,191,000,000,000,000,131,000,000,150,151,000,000,000
       00 00 00 00 
       83 00 00 96 
       97 00 00 00 
047CE0 BF BF BF BF 0235*   	db 191,191,191,191,000,000,206,207,207,207,208,150,151,000,000,000
       00 00 CE CF 
       CF CF D0 96 
       97 00 00 00 
047CF0 00 00 BF BF 0236*   	db 000,000,191,191,191,191,191,191,248,191,192,150,151,145,145,145
       BF BF BF BF 
       F8 BF C0 96 
       97 91 91 91 
047D00 00 00 BF BF 0237*   	db 000,000,191,191,191,191,191,248,001,248,192,134,135,000,000,000
       BF BF BF F8 
       01 F8 C0 86 
       87 00 00 00 
047D10 00 00 AE BF 0238*   	db 000,000,174,191,191,191,191,191,248,191,192,134,135,000,000,000
       BF BF BF BF 
       F8 BF C0 86 
       87 00 00 00 
047D20 00 00 00 83 0239*   	db 000,000,000,131,000,000,174,175,175,175,176,134,135,000,000,000
       00 00 AE AF 
       AF AF B0 86 
       87 00 00 00 
047D30 00 00 00 83 0240*   	db 000,000,000,131,000,000,000,000,131,000,000,134,135,000,000,000
       00 00 00 00 
       83 00 00 86 
       87 00 00 00 
047D40 6A 6B 6C 6B 0241*   	db 106,107,108,107,108,106,107,108,131,000,000,138,139,145,145,145
       6C 6A 6B 6C 
       83 00 00 8A 
       8B 91 91 91 
047D50 00 00 00 83 0242*   	db 000,000,000,131,000,000,000,000,131,000,000,191,191,000,000,000
       00 00 00 00 
       83 00 00 BF 
       BF 00 00 00 
047D60 00 00 00 83 0243*   	db 000,000,000,131,000,000,000,000,131,000,000,191,191,000,000,000
       00 00 00 00 
       83 00 00 BF 
       BF 00 00 00 
047D70 00 00 00 83 0244*   	db 000,000,000,131,000,000,000,000,131,206,207,207,207,208,000,000
       00 00 00 00 
       83 CE CF CF 
       CF D0 00 00 
047D80 00 00 00 83 0245*   	db 000,000,000,131,000,000,000,000,131,190,089,090,091,192,145,145
       00 00 00 00 
       83 BE 59 5A 
       5B C0 91 91 
047D90 00 00 00 83 0246*   	db 000,000,000,131,000,000,000,000,131,190,073,005,075,192,000,000
       00 00 00 00 
       83 BE 49 05 
       4B C0 00 00 
047DA0 81 81 81 83 0247*   	db 129,129,129,131,129,129,129,129,131,190,057,058,059,192,145,145
       81 81 81 81 
       83 BE 39 3A 
       3B C0 91 91 
047DB0 00 00 00 83 0248*   	db 000,000,000,131,000,000,000,000,131,174,175,175,175,176,000,000
       00 00 00 00 
       83 AE AF AF 
       AF B0 00 00 
047DC0 00 00 00 83 0249*   	db 000,000,000,131,000,000,000,000,131,000,000,000,131,000,000,000
       00 00 00 00 
       83 00 00 00 
       83 00 00 00 
047DD0 00 00 00 83 0250*   	db 000,000,000,131,000,000,000,000,131,000,000,000,131,000,000,000
       00 00 00 00 
       83 00 00 00 
       83 00 00 00 
047DE0 85 85 85 85 0251*   	db 133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133
       85 85 85 85 
       85 85 85 85 
       85 85 85 85 
047DF0 00 00 93 00 0252*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
047E00 7A 7B 93 7A 0253*   	db 122,123,147,122,123,122,147,122,123,122,147,122,123,147,122,123
       7B 7A 93 7A 
       7B 7A 93 7A 
       7B 93 7A 7B 
047E10 6A 6B 93 6A 0254*   	db 106,107,147,106,107,106,147,106,107,106,147,106,107,147,106,107
       6B 6A 93 6A 
       6B 6A 93 6A 
       6B 93 6A 6B 
047E20 00 00 93 00 0255*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
047E30 00 00 93 00 0256*   	db 000,000,147,000,000,000,147,000,000,000,147,000,000,147,000,000
       00 00 93 00 
       00 00 93 00 
       00 93 00 00 
047E40 94 94 94 94 0257*   	db 148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148
       94 94 94 94 
       94 94 94 94 
       94 94 94 94 
047E50 59 5A 5B BF 0258*   	db 089,090,091,191,191,191,191,191,191,191,191,191,191,089,090,091
       BF BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
047E60 49 05 4B BF 0259*   	db 073,005,075,191,008,191,191,191,191,191,004,191,191,073,005,075
       08 BF BF BF 
       BF BF 04 BF 
       BF 49 05 4B 
047E70 39 3A 3B BF 0260*   	db 057,058,059,191,008,191,191,191,191,191,004,191,191,057,058,059
       08 BF BF BF 
       BF BF 04 BF 
       BF 39 3A 3B 
047E80 BF BF BF BF 0261*   	db 191,191,191,191,008,191,191,191,191,191,004,191,191,191,191,191
       08 BF BF BF 
       BF BF 04 BF 
       BF BF BF BF 
047E90 BF BF BF BF 0262*   	db 191,191,191,191,191,248,191,191,191,191,191,248,191,191,191,191
       BF F8 BF BF 
       BF BF BF F8 
       BF BF BF BF 
047EA0 BF BF BF BF 0263*   	db 191,191,191,191,248,001,248,191,191,191,248,001,248,191,191,191
       F8 01 F8 BF 
       BF BF F8 01 
       F8 BF BF BF 
047EB0 BF BF BF BF 0264*   	db 191,191,191,191,191,248,191,191,191,191,191,248,191,191,191,191
       BF F8 BF BF 
       BF BF BF F8 
       BF BF BF BF 
047EC0 59 5A 5B BF 0265*   	db 089,090,091,191,191,191,191,191,191,191,191,191,191,089,090,091
       BF BF BF BF 
       BF BF BF BF 
       BF 59 5A 5B 
047ED0 49 05 4B BF 0266*   	db 073,005,075,191,191,191,191,191,191,191,191,191,191,073,005,075
       BF BF BF BF 
       BF BF BF BF 
       BF 49 05 4B 
047EE0 39 3A 3B BF 0267*   	db 057,058,059,191,191,191,191,191,191,191,191,191,191,057,058,059
       BF BF BF BF 
       BF BF BF BF 
       BF 39 3A 3B 
047EF0 84 84 84 84 0268*   	db 132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132
       84 84 84 84 
       84 84 84 84 
       84 84 84 84 
047F00             0059        ; include "levels_xevious.inc"
047F00             0060        include "player.inc"
047F00             0001*       align 256
047F00             0002*   
047F00             0003*   ; ######## GAME STATE VARIABLES #######
047F00             0004*   ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
047F00 00 00 00    0005*   player_score: dl 0 ; integer
047F03             0006*   ; player current shields,binary
047F03             0007*   ; when < 0 player splodes
047F03             0008*   ; restores to player_shields_max when new ship spawns
047F03             0009*   
047F03             0010*   ; when reaches zero,game ends
047F03             0011*   ; can increase based on TODO
047F03 03          0012*   player_ships: db 3 ; integer
047F04             0013*   
047F04             0014*   speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
047F04             0015*   player_lasers_max: equ 4
047F04             0016*   
047F04             0017*   player_defaults:
047F04 05          0018*       db player               ; type
047F05 6F 01 00    0019*       dl BUF_SHIP_0L          ; base_bufferId
047F08 20 87 04    0020*       dl do_player            ; move_program
047F0B 40          0021*       db %01000000            ; collisions bit 6 signals sprite alive
047F0C 10          0022*       db 16                   ; dim_x
047F0D 10          0023*       db 16                   ; dim_y
047F0E 01          0024*       db 1                    ; num_orientations
047F0F 01          0025*       db 1                    ; num_animations
047F10 00          0026*       db 0                    ; animation
047F11 00          0027*       db 0                    ; animation_timer
047F12 00          0028*       db 0                    ; move_timer
047F13 00          0029*       db 0                    ; move_step
047F14 00          0030*       db 0                    ; points
047F15 00          0031*       db 0                    ; shield_damage
047F16 00          0032*       db 0                    ; frame
047F17             0033*   
047F17             0034*   
047F17             0035*   ; set initial player position
047F17             0036*   ; inputs: none,everything is hardcoded
047F17             0037*   ; outputs: player_x/y set to bottom-left corner of screen
047F17             0038*   ; destroys: a
047F17             0039*   player_init:
047F17 FD 21 5E A1 0040*       ld iy,player_begin
       04          
047F1C FD 22 69 95 0041*       ld (table_pointer),iy
       04          
047F21 FD 7E 00    0042*       ld a,(iy+sprite_id)
047F24 CD 00 20 04 0043*       call vdu_sprite_select
047F28 CD 13 20 04 0044*       call vdu_sprite_clear_frames
047F2C 21 6F 01 00 0045*       ld hl,BUF_SHIP_0L
047F30 CD 55 21 04 0046*       call vdu_sprite_add_buff
047F34 21 70 01 00 0047*       ld hl,BUF_SHIP_1C
047F38 CD 55 21 04 0048*       call vdu_sprite_add_buff
047F3C 21 71 01 00 0049*       ld hl,BUF_SHIP_2R
047F40 CD 55 21 04 0050*       call vdu_sprite_add_buff
047F44 01 00 00 00 0051*       ld bc,0
047F48 FD 0F 01    0052*       ld (iy+sprite_x),bc
047F4B 11 00 6F 01 0053*       ld de,sprite_bottom*256 ; max sprite y-coordinate
047F4F FD 1F 04    0054*       ld (iy+sprite_y),de
047F52 CD CC 20 04 0055*       call vdu_sprite_move_abs168
047F56 CD 76 20 04 0056*       call vdu_sprite_show
047F5A 21 2B 87 04 0057*       ld hl,player_alive
047F5E 22 1D 87 04 0058*       ld (player_state),hl
047F62 FD CB 1D F6 0059*       set sprite_alive,(iy+sprite_collisions)
047F66 C9          0060*       ret
047F67             0061*   
047F67             0062*   ; UART ports for reading joystick input
047F67             0063*   ; bit tests: 0 means actuated, 1 means not actuated
047F67             0064*   portC: 	EQU 	$9E ; reads dpad input
047F67             0065*   joy1_u: equ 1
047F67             0066*   joy1_d: equ 3
047F67             0067*   joy1_l: equ 5
047F67             0068*   joy1_r: equ 7
047F67             0069*   portD: 	EQU 	$A2 ; reads buttons
047F67             0070*   btn1_a: equ 5
047F67             0071*   
047F67             0072*   ; process player keyboard input, set player bitmap
047F67             0073*   ; velocities and draw player bitmap at updated coordinates
047F67             0074*   ; Inputs: player_x/y set at desired position
047F67             0075*   ; Returns: player bitmap drawn at updated position
047F67             0076*   ; Destroys: probably everything except maybe iy
047F67             0077*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
047F67             0078*   ; TODO: requires sprite implementation
047F67             0079*   player_input:
047F67             0080*   ; point to player sprite record
047F67 FD 21 5E A1 0081*       ld iy,player_begin
       04          
047F6C FD 22 69 95 0082*       ld (table_pointer),iy
       04          
047F71             0083*   ; reset player component velocities to zero as the default
047F71 21 00 00 00 0084*       ld hl,0
047F75 FD 2F 07    0085*       ld (iy+sprite_xvel),hl
047F78 FD 2F 0A    0086*       ld (iy+sprite_yvel),hl
047F7B             0087*   ; make ship the active sprite
047F7B FD 7E 00    0088*       ld a,(iy+sprite_id)
047F7E CD 00 20 04 0089*       call vdu_sprite_select
047F82             0090*   ; check for keypresses and branch accordingly
047F82             0091*       MOSCALL    mos_getkbmap ;ix = pointer to MOS virtual keys table
047F82 3E 1E       0001*M1 			LD	A, function
047F84 5B CF       0002*M1 			RST.LIL	08h
047F86             0092*   ; do player directional input
047F86 AF          0093*       xor a ; clear flags
047F87 DB 9E       0094*       in a,(portC) ; read dpad input
047F89 57          0095*       ld d,a ; save dpad input
047F8A 3E 01       0096*       ld a,1 ; set ship's default animation to center
047F8C             0097*   ; 26 Left: move player left
047F8C DD CB 03 4E 0098*       bit 1,(ix+3)
047F90 C2 9E 7F 04 0099*       jp nz,@F
047F94             0100*   ; test dpad left
047F94 CB 6A       0101*       bit joy1_l,d
047F96 CA 9E 7F 04 0102*       jp z,@F
047F9A C3 AA 7F 04 0103*       jp @right
047F9E             0104*   @@:
047F9E FD 27 07    0105*       ld hl,(iy+sprite_xvel)
047FA1 01 00 FD FF 0106*       ld bc,-speed_player
047FA5 09          0107*       add hl,bc
047FA6 FD 2F 07    0108*       ld (iy+sprite_xvel),hl
047FA9 3D          0109*       dec a ; set ship's animation to left
047FAA             0110*   @right:
047FAA             0111*   ; 122 Right: move player right
047FAA DD CB 0F 4E 0112*       bit 1,(ix+15)
047FAE C2 BC 7F 04 0113*       jp nz,@F
047FB2             0114*   ; test dpad right
047FB2 CB 7A       0115*       bit joy1_r,d
047FB4 CA BC 7F 04 0116*       jp z,@F
047FB8 C3 C8 7F 04 0117*       jp @up
047FBC             0118*   @@:
047FBC FD 27 07    0119*       ld hl,(iy+sprite_xvel)
047FBF 01 00 03 00 0120*       ld bc,speed_player
047FC3 09          0121*       add hl,bc
047FC4 FD 2F 07    0122*       ld (iy+sprite_xvel),hl
047FC7 3C          0123*       inc a ; set ship's animation to right
047FC8             0124*   @up:
047FC8             0125*   ; 58 Up: move player up
047FC8 DD CB 07 4E 0126*       bit 1,(ix+7)
047FCC C2 DA 7F 04 0127*       jp nz,@F
047FD0             0128*   ; test dpad up
047FD0 CB 4A       0129*       bit joy1_u,d
047FD2 CA DA 7F 04 0130*       jp z,@F
047FD6 C3 E5 7F 04 0131*       jp @dn
047FDA             0132*   @@:
047FDA FD 27 0A    0133*       ld hl,(iy+sprite_yvel)
047FDD 01 00 FD FF 0134*       ld bc,-speed_player
047FE1 09          0135*       add hl,bc
047FE2 FD 2F 0A    0136*       ld (iy+sprite_yvel),hl
047FE5             0137*   @dn:
047FE5             0138*   ; 42 Down: move player down
047FE5 DD CB 05 4E 0139*       bit 1,(ix+5)
047FE9 C2 F7 7F 04 0140*       jp nz,@F
047FED             0141*   ; test dpad down
047FED CB 5A       0142*       bit joy1_d,d
047FEF CA F7 7F 04 0143*       jp z,@F
047FF3 C3 02 80 04 0144*       jp @frame
047FF7             0145*   @@:
047FF7 FD 27 0A    0146*       ld hl,(iy+sprite_yvel)
047FFA 01 00 03 00 0147*       ld bc,speed_player
047FFE 09          0148*       add hl,bc
047FFF FD 2F 0A    0149*       ld (iy+sprite_yvel),hl
048002             0150*   @frame:
048002             0151*   ; a should land here loaded with the correct frame
048002 CD 63 20 04 0152*       call vdu_sprite_select_frame
048006             0153*   ; draw player at updated position
048006 FD 21 5E A1 0154*       ld iy,player_begin
       04          
04800B FD 22 69 95 0155*       ld (table_pointer),iy
       04          
048010 CD D9 96 04 0156*       call move_sprite
048014 FD 07 01    0157*       ld bc,(iy+sprite_x)
048017 FD 17 04    0158*       ld de,(iy+sprite_y)
04801A CD CC 20 04 0159*       call vdu_sprite_move_abs168
04801E             0160*   
04801E             0161*   ; process player laser fire
04801E             0162*   ; do player fire button input
04801E             0163*   ; read joystick fire button
04801E AF          0164*       xor a ; clear flags
04801F DB A2       0165*       in a,(portD) ; read joypad fire button input
048021 CB 6F       0166*       bit btn1_a,a
048023 CA 1C 85 04 0167*       jp z,player_spawn_laser
048027             0168*   ; 99 Space: fire main weapon
048027 DD CB 0C 56 0169*       bit 2,(ix+12)
04802B C2 1C 85 04 0170*       jp nz,player_spawn_laser
04802F             0171*   ; no fire button pressed so go home
04802F C9          0172*       ret
048030             0173*   ; end player_input
048030             0174*   
048030             0175*   
048030             0176*   
048030             0177*   player_move_weapons:
048030             0178*   ; initialize pointers and loop counter
048030 FD 21 5E A0 0179*       ld iy,player_weapons_begin ; set iy to first record in table
       04          
048035 06 04       0180*       ld b,player_lasers_max ; loop counter
048037 CD 58 96 04 0181*       call move_sprite_group
04803B C9          0182*       ret
04803C             0183*   ; end player_move_weapons
04803C             0184*   
04803C             0185*   ; ###################################################################
04803C             0186*   ; TODO: the below is all stuff from the original code we need to port
04803C             0187*   ; ###################################################################
04803C             0188*   
04803C             0189*   kill_player:
04803C             0190*   ; ; set player status to dead
04803C             0191*   ;     xor a; sets all player flags to zero
04803C             0192*   ;     ld (player_collisions),a
04803C             0193*   ; ; deduct a ship from the inventory
04803C             0194*   ;     ld a,(player_ships)
04803C             0195*   ;     dec a
04803C             0196*   ;     ld (player_ships),a
04803C             0197*   ; ; are we out of ships?
04803C             0198*   ;     jp z,game_over
04803C             0199*   ; ; wait a few ticks
04803C             0200*   ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
04803C             0201*   ;     ld (player_move_timer),a
04803C             0202*   ; kill_player_loop:
04803C             0203*   ;     call vdu_vblank
04803C             0204*   ;     ld a,(player_move_timer)
04803C             0205*   ;     dec a
04803C             0206*   ;     ld (player_move_timer),a
04803C             0207*   ;     jr nz,kill_player_loop
04803C             0208*   ;     call player_init ; player respawn if timer zero
04803C C9          0209*       ret ; and out
04803D             0210*   
04803D             0211*   ; draws the player's shields level
04803D             0212*   ; draw_shields:
04803D             0213*   ; TODO: Agonize this routine
04803D             0214*   ; ; prep the loop to draw the bars
04803D             0215*   ;     ld a,(player_shields) ; snag shields
04803D             0216*   ;     and a
04803D             0217*   ;     ret z ; don't draw if zero shields
04803D             0218*   ; ; set loop counter and drawing position
04803D             0219*   ;     ld b,a ; loop counter
04803D             0220*   ;     ld hl,#5300+48+12
04803D             0221*   ; ; set color based on bars remaining
04803D             0222*   ;     ld c,103 ; bright green 28fe0a
04803D             0223*   ;     cp 9
04803D             0224*   ;     jp p,draw_shields_loop
04803D             0225*   ;     ld c,74 ; bright yellow eafe5b
04803D             0226*   ;     cp 3
04803D             0227*   ;     jp p,draw_shields_loop
04803D             0228*   ;     ld c,28 ; bright red fe0a0a
04803D             0229*   ; draw_shields_loop:
04803D             0230*   ;     push bc ; yup,outta
04803D             0231*   ;     push hl ; registers again
04803D             0232*   ;     ; ld a,#A8 ; ▀,168
04803D             0233*   ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
04803D             0234*   ;     ; call draw_char
04803D             0235*   ;     call draw_num ; we nuked draw_char for the time being
04803D             0236*   ;     pop hl
04803D             0237*   ;     ld a,8
04803D             0238*   ;     add a,l
04803D             0239*   ;     ld l,a
04803D             0240*   ;     pop bc
04803D             0241*   ;     djnz draw_shields_loop
04803D             0242*       ; ret
04803D             0243*   
04803D             0244*   
04803D             0245*   ; draw_lives:
04803D             0246*   ;     ld hl,player_small ; make small yellow ship the active sprite
04803D             0247*   ;     ld (sprite_base_bufferId),hl
04803D             0248*   ;     ; ld a,#80 ; northern orientation
04803D             0249*   ;     ; ld (sprite_orientation),a
04803D             0250*   ;     ld hl,0 ; north
04803D             0251*   ;     ld (sprite_heading),hl
04803D             0252*   ;     xor a
04803D             0253*   ;     ld (sprite_frame),a
04803D             0254*   ;     ld a,#56 ; top of visible screen
04803D             0255*   ;     ld (sprite_y+1),a
04803D             0256*   ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
04803D             0257*   ;     ld a,(player_ships)
04803D             0258*   ;     dec a ; we draw one fewer ships than lives
04803D             0259*   ;     ret z ; nothing to draw here, move along
04803D             0260*   ;     ld b,a ; loop counter
04803D             0261*   ;     ld a,256-16 ; initial x position
04803D             0262*   ; draw_lives_loop:
04803D             0263*   ;     ld (sprite_x+1),a
04803D             0264*   ;     push af
04803D             0265*   ;     push bc
04803D             0266*   ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
04803D             0267*   ;     pop bc
04803D             0268*   ;     pop af
04803D             0269*   ;     sub 10
04803D             0270*   ;     djnz draw_lives_loop
04803D             0271*   ;     ret
04803D             0272*   
04803D             0273*   
04803D             0274*   dump_player_record:
04803D DD 21 5E A1 0275*       ld ix,player_begin
       04          
048042             0276*   
048042 CD 00 01 04 0277*       call printInline
048046 69 64 20 20 0278*       asciz "id  : "
       3A 20 00    
04804D DD 7E 00    0279*       ld a,(ix+sprite_id)
048050 CD 4A 01 04 0280*       call printHexA
048054             0281*   
048054 CD 00 01 04 0282*       call printInline
048058 0D 0A 78 20 0283*       asciz "\r\nx   :"
       20 20 3A 00 
048060 DD 27 01    0284*       ld hl,(ix+sprite_x)
048063 CD 2B 03 04 0285*       call print_s168_hl
048067             0286*   
048067 CD 00 01 04 0287*       call printInline
04806B 0D 0A 79 20 0288*       asciz "\r\ny   :"
       20 20 3A 00 
048073 DD 27 04    0289*       ld hl,(ix+sprite_y)
048076 CD 2B 03 04 0290*       call print_s168_hl
04807A             0291*   
04807A CD 00 01 04 0292*       call printInline
04807E 0D 0A 78 76 0293*       asciz "\r\nxv  :"
       20 20 3A 00 
048086 DD 27 07    0294*       ld hl,(ix+sprite_xvel)
048089 CD 2B 03 04 0295*       call print_s168_hl
04808D             0296*   
04808D CD 00 01 04 0297*       call printInline
048091 0D 0A 79 76 0298*       asciz "\r\nyv  :"
       20 20 3A 00 
048099 DD 27 0A    0299*       ld hl,(ix+sprite_yvel)
04809C CD 2B 03 04 0300*       call print_s168_hl
0480A0             0301*   
0480A0 CD 00 01 04 0302*       call printInline
0480A4 0D 0A 76 20 0303*       asciz "\r\nv   :"
       20 20 3A 00 
0480AC DD 27 0D    0304*       ld hl,(ix+sprite_vel)
0480AF CD 2B 03 04 0305*       call print_s168_hl
0480B3             0306*   
0480B3 CD 00 01 04 0307*       call printInline
0480B7 0D 0A 68 64 0308*       asciz "\r\nhdg :"
       67 20 3A 00 
0480BF DD 27 10    0309*       ld hl,(ix+sprite_heading)
0480C2 CD 2B 03 04 0310*       call print_s168_hl
0480C6             0311*   
0480C6 CD 00 01 04 0312*       call printInline
0480CA 0D 0A 6F 72 0313*       asciz "\r\nori :"
       69 20 3A 00 
0480D2 DD 27 13    0314*       ld hl,(ix+sprite_orientation)
0480D5 CD 2B 03 04 0315*       call print_s168_hl
0480D9             0316*   
0480D9 CD 00 01 04 0317*       call printInline
0480DD 0D 0A 74 79 0318*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
0480E6 DD 7E 16    0319*       ld a,(ix+sprite_type)
0480E9 CD 4A 01 04 0320*       call printHexA
0480ED             0321*   
0480ED CD 00 01 04 0322*       call printInline
0480F1 0D 0A 42 49 0323*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
0480FA DD 27 17    0324*       ld hl,(ix+sprite_base_bufferId)
0480FD CD 27 01 04 0325*       call printHex24
048101             0326*   
048101 CD 00 01 04 0327*       call printInline
048105 0D 0A 6D 50 0328*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
04810E DD 27 1A    0329*       ld hl,(ix+sprite_move_program)
048111 CD 27 01 04 0330*       call printHex24
048115             0331*   
048115 CD 00 01 04 0332*       call printInline
048119 0D 0A 63 6F 0333*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
048122 DD 7E 1D    0334*       ld a,(ix+sprite_collisions)
048125 CD A8 03 04 0335*       call printBin8
048129             0336*   
048129             0337*       ; call printInline
048129             0338*       ; asciz "\r\nszx : "
048129             0339*       ; ld a,(ix+sprite_dim_x)
048129             0340*       ; call printHexA
048129             0341*   
048129             0342*       ; call printInline
048129             0343*       ; asciz "\r\nszy : "
048129             0344*       ; ld a,(ix+sprite_dim_y)
048129             0345*       ; call printHexA
048129             0346*   
048129             0347*       ; call printInline
048129             0348*       ; asciz "\r\n#ori: "
048129             0349*       ; ld a,(ix+sprite_num_orientations)
048129             0350*       ; call printHexA
048129             0351*   
048129             0352*       ; call printInline
048129             0353*       ; asciz "\r\n#ani: "
048129             0354*       ; ld a,(ix+sprite_num_animations)
048129             0355*       ; call printHexA
048129             0356*   
048129             0357*       ; call printInline
048129             0358*       ; asciz "\r\nani : "
048129             0359*       ; ld a,(ix+sprite_animation)
048129             0360*       ; call printHexA
048129             0361*   
048129             0362*       ; call printInline
048129             0363*       ; asciz "\r\nanit: "
048129             0364*       ; ld a,(ix+sprite_animation_timer)
048129             0365*       ; call printHexA
048129             0366*   
048129             0367*       ; call printInline
048129             0368*       ; asciz "\r\nmvt : "
048129             0369*       ; ld a,(ix+sprite_move_timer)
048129             0370*       ; call printHexA
048129             0371*   
048129             0372*       ; call printInline
048129             0373*       ; asciz "\r\nmvs : "
048129             0374*       ; ld a,(ix+sprite_move_step)
048129             0375*       ; call printHexA
048129             0376*   
048129             0377*       ; call printInline
048129             0378*       ; asciz "\r\npts : "
048129             0379*       ; ld a,(ix+sprite_points)
048129             0380*       ; call printHexA
048129             0381*   
048129             0382*       ; call printInline
048129             0383*       ; asciz "\r\ndmg : "
048129             0384*       ; ld a,(ix+sprite_shield_damage)
048129             0385*       ; call printHexA
048129             0386*   
048129             0387*       ; call printInline
048129             0388*       ; asciz "\r\nfrm : "
048129             0389*       ; ld a,(ix+sprite_frame)
048129             0390*       ; call printHexA
048129             0391*   
048129             0392*       ; call printNewLine
048129             0393*       ; call printNewLine
048129             0394*   
048129             0395*       ; call waitKeypress
048129 C9          0396*       ret
04812A             0061        include "player_cockpit.inc"
04812A             0001*   score_x: equ 50
04812A             0002*   score_y: equ 33
04812A             0003*   ; prints the player's score
04812A 00 00 00    0004*   player_score_last: dl 0 ; integer
04812D             0005*   
04812D             0006*   ; inputs: iy set to sprite/tile record being tallied
04812D             0007*   ; outputs: hl,player_score = updated score
04812D             0008*   ; destroys: hl,de
04812D             0009*   update_score:
04812D 11 00 00 00 0010*       ld de,0 ; clear deu and d
048131 FD 5E 26    0011*       ld e,(iy+sprite_points)
048134 2A 00 7F 04 0012*       ld hl,(player_score)
048138 19          0013*       add hl,de
048139 22 00 7F 04 0014*       ld (player_score),hl
04813D C9          0015*       ret
04813E             0016*   ; end update_score
04813E             0017*   
04813E             0018*   ; inputs: none
04813E             0019*   print_score:
04813E 2A 2A 81 04 0020*       ld hl,(player_score_last)
048142 ED 5B 00 7F 0021*       ld de,(player_score)
       04          
048147 ED 53 2A 81 0022*       ld (player_score_last),de
       04          
04814C AF          0023*       xor a ; clear carry
04814D ED 52       0024*       sbc hl,de
04814F C8          0025*       ret z ; no change to update
048150 0E 32       0026*       ld c,score_x
048152 06 21       0027*       ld b,score_y
048154 CD 37 1A 04 0028*       call vdu_move_cursor
048158 2A 00 7F 04 0029*       ld hl,(player_score)
04815C CD 06 02 04 0030*       call printDec
048160 C9          0031*       ret
048161             0032*   ; end print_score
048161             0033*   
048161             0034*   ; offsets into control panel element definitions
048161             0035*   panel_bufferId: equ 0
048161             0036*   panel_x0: equ 3
048161             0037*   panel_y0: equ 6
048161             0038*   panel_x1: equ 9
048161             0039*   panel_y1: equ 12
048161             0040*   
048161             0041*   ctl_panel_l:
048161 09 00 00    0042*       dl BUF_CTL_PANEL_L ; bufferId
048164 00 00 00    0043*       dl 0 ; x0
048167 00 01 00    0044*       dl 256 ; y0
04816A 80 00 00    0045*       dl 0+128 ; x1
04816D 80 01 00    0046*       dl 256+128 ; y1
048170             0047*   
048170             0048*   ctl_panel_r:
048170 0A 00 00    0049*       dl BUF_CTL_PANEL_R ; bufferId
048173 80 01 00    0050*       dl 384 ; x0
048176 00 01 00    0051*       dl 256 ; y0
048179 00 02 00    0052*       dl 384+128 ; x1
04817C 80 01 00    0053*       dl 256+128 ; y1
04817F             0054*   
04817F             0055*   mfd_bezel_l:
04817F 0D 00 00    0056*       dl BUF_MFD_BEZEL ; bufferId
048182 18 00 00    0057*       dl 24 ; x0
048185 18 01 00    0058*       dl 280 ; y0
048188 78 00 00    0059*       dl 24+96 ; x1
04818B 78 01 00    0060*       dl 280+96 ; y1
04818E             0061*   
04818E             0062*   mfd_bezel_r:
04818E 0D 00 00    0063*       dl BUF_MFD_BEZEL ; bufferId
048191 88 01 00    0064*       dl 392 ; x0
048194 18 01 00    0065*       dl 280 ; y0
048197 E8 01 00    0066*       dl 392+96 ; x1
04819A 78 01 00    0067*       dl 280+96 ; y1
04819D             0068*   
04819D             0069*   draw_player_cockpit:
04819D DD 21 61 81 0070*       ld ix,ctl_panel_l
       04          
0481A2 CD 39 82 04 0071*       call draw_player_ctl_panel
0481A6 DD 21 70 81 0072*       ld ix,ctl_panel_r
       04          
0481AB CD 39 82 04 0073*       call draw_player_ctl_panel
0481AF DD 21 7F 81 0074*       ld ix,mfd_bezel_l
       04          
0481B4 CD 39 82 04 0075*       call draw_player_ctl_panel
0481B8 DD 21 4B 82 0076*       ld ix,mfd_bg_l
       04          
0481BD CD 39 82 04 0077*       call draw_player_ctl_panel
0481C1 DD 21 5A 82 0078*       ld ix,mfd_arms_l
       04          
0481C6 CD 39 82 04 0079*       call draw_player_ctl_panel
0481CA DD 21 8E 81 0080*       ld ix,mfd_bezel_r
       04          
0481CF CD 39 82 04 0081*       call draw_player_ctl_panel
0481D3 DD 21 69 82 0082*       ld ix,mfd_bg_r
       04          
0481D8 CD 39 82 04 0083*       call draw_player_ctl_panel
0481DC             0084*   
0481DC 21 28 00 00 0085*       ld hl,BUF_SHIELD
0481E0 CD 38 1B 04 0086*       call vdu_buff_select
0481E4 01 EC 01 00 0087*       ld bc,492
0481E8 11 70 01 00 0088*       ld de,368
0481EC CD 20 1F 04 0089*       call vdu_plot_bmp
0481F0 21 27 00 00 0090*       ld hl,BUF_POWER
0481F4 CD 38 1B 04 0091*       call vdu_buff_select
0481F8 01 04 00 00 0092*       ld bc,4
0481FC 11 70 01 00 0093*       ld de,368
048200 CD 20 1F 04 0094*       call vdu_plot_bmp
048204 21 08 00 00 0095*       ld hl,BUF_CREDITS
048208 CD 38 1B 04 0096*       call vdu_buff_select
04820C 01 80 01 00 0097*       ld bc,384
048210 11 05 01 00 0098*       ld de,261
048214 CD 20 1F 04 0099*       call vdu_plot_bmp
048218 21 0B 00 00 0100*       ld hl,BUF_JERRY_CAN
04821C CD 38 1B 04 0101*       call vdu_buff_select
048220 01 6E 00 00 0102*       ld bc,110
048224 11 02 01 00 0103*       ld de,258
048228 CD 20 1F 04 0104*       call vdu_plot_bmp
04822C             0105*   
04822C CD 0E 83 04 0106*       call init_bar_shields
048230 CD 5A 83 04 0107*       call init_bar_laser
048234 CD 18 84 04 0108*       call init_bar_fuel
048238 C9          0109*       ret
048239             0110*   ; end draw_player_cockpit
048239             0111*   
048239             0112*   draw_player_ctl_panel:
048239 DD 27 00    0113*       ld hl,(ix+panel_bufferId)
04823C CD 38 1B 04 0114*       call vdu_buff_select
048240 DD 07 03    0115*       ld bc,(ix+panel_x0)
048243 DD 17 06    0116*       ld de,(ix+panel_y0)
048246 CD 20 1F 04 0117*       call vdu_plot_bmp
04824A C9          0118*       ret
04824B             0119*   ; end draw_player_ctl_panel
04824B             0120*   
04824B             0121*   mfd_bg_l:
04824B 0E 00 00    0122*       dl BUF_MFD_BG ; bufferId
04824E 28 00 00    0123*       dl 40 ; x0
048251 28 01 00    0124*       dl 296 ; y0
048254 67 00 00    0125*       dl 40+63 ; x1
048257 67 01 00    0126*       dl 296+63 ; y1
04825A             0127*   
04825A             0128*   mfd_arms_l:
04825A 0C 00 00    0129*       dl BUF_MFD_ARMS ; bufferId
04825D 36 00 00    0130*       dl 54 ; x0
048260 40 01 00    0131*       dl 320 ; y0
048263 59 00 00    0132*       dl 54+35 ; x1
048266 51 01 00    0133*       dl 320+17 ; y1
048269             0134*   
048269             0135*   mfd_bg_r:
048269 0E 00 00    0136*       dl BUF_MFD_BG ; bufferId
04826C 98 01 00    0137*       dl 408 ; x0
04826F 28 01 00    0138*       dl 296 ; y0
048272 D7 01 00    0139*       dl 408+63 ; x1
048275 67 01 00    0140*       dl 296+63 ; y1
048278             0141*   
048278             0142*   mfd_activate:
048278 DD 07 03    0143*       ld bc,(ix+panel_x0)
04827B DD 17 06    0144*       ld de,(ix+panel_y0)
04827E CD D0 1A 04 0145*       call vdu_set_gfx_origin
048282 C9          0146*       ret
048283             0147*   ; end mfd_activate
048283             0148*   
048283             0149*   mfd_init:
048283 DD 27 00    0150*       ld hl,(ix+panel_bufferId)
048286 CD 38 1B 04 0151*       call vdu_buff_select
04828A 01 00 00 00 0152*       ld bc,0
04828E 11 00 00 00 0153*       ld de,0
048292 CD 20 1F 04 0154*       call vdu_plot_bmp
048296 C9          0155*       ret
048297             0156*   ; end mfd_init
048297             0157*   
048297             0158*   bar_val: equ 0 ; current value
048297             0159*   bar_x0: equ panel_x0
048297             0160*   bar_y0: equ panel_y0
048297             0161*   bar_x1: equ panel_x1
048297             0162*   bar_y1: equ panel_y1
048297             0163*   bar_y: equ 15 ; y-plot coordinate
048297             0164*   bar_x: equ 15 ; x-plot coordinate
048297             0165*   
048297             0166*   bar_yellow: equ 33
048297             0167*   bar_red: equ 17
048297             0168*   
048297             0169*   ; update a vertical bar display
048297             0170*   ; inputs: ix points to bar structure
048297             0171*   ;         bar_val set by caller
048297             0172*   ; prerequisite: bar_init called before first use
048297             0173*   bar_update_v:
048297             0174*   ; set gfx viewport
048297 DD E5       0175*       push ix ; preserve pointer
048299 DD 07 03    0176*       ld bc,(ix+bar_x0)
04829C DD 17 06    0177*       ld de,(ix+bar_y0)
04829F DD 31 0C    0178*       ld iy,(ix+bar_y1)
0482A2 DD 37 09    0179*       ld ix,(ix+bar_x1)
0482A5 CD EB 1A 04 0180*       call vdu_set_gfx_viewport
0482A9 DD E1       0181*       pop ix ; restore pointer
0482AB             0182*   ; select the color based on the value thresholds
0482AB DD 17 00    0183*       ld de,(ix+bar_val)
0482AE 21 EF FF FF 0184*       ld hl,-bar_red
0482B2 19          0185*       add hl,de
0482B3 D2 D0 82 04 0186*       jp nc,@red
0482B7 21 DF FF FF 0187*       ld hl,-bar_yellow
0482BB 19          0188*       add hl,de
0482BC D2 C8 82 04 0189*       jp nc,@yellow
0482C0 21 05 00 00 0190*       ld hl,BUF_BAR_V_2 ; green
0482C4 C3 D4 82 04 0191*       jp @select
0482C8             0192*   @yellow:
0482C8 21 04 00 00 0193*       ld hl,BUF_BAR_V_1 ; yellow
0482CC C3 D4 82 04 0194*       jp @select
0482D0             0195*   @red:
0482D0 21 03 00 00 0196*       ld hl,BUF_BAR_V_0 ; red
0482D4             0197*   @select:
0482D4 CD 38 1B 04 0198*       call vdu_buff_select
0482D8             0199*   ; get x-plot position
0482D8 DD 07 03    0200*       ld bc,(ix+bar_x0)
0482DB             0201*   ; compute y-plot position
0482DB DD 17 00    0202*       ld de,(ix+bar_val)
0482DE 21 40 00 00 0203*       ld hl,64
0482E2 AF          0204*       xor a ; clear carry
0482E3 ED 52       0205*       sbc hl,de
0482E5 DD 17 0F    0206*       ld de,(ix+bar_y)
0482E8 19          0207*       add hl,de
0482E9 7D          0208*       ld a,l
0482EA E6 FC       0209*       and %11111100 ; round to nearest 4 pixels
0482EC 6F          0210*       ld l,a
0482ED EB          0211*       ex de,hl
0482EE CD 20 1F 04 0212*       call vdu_plot_bmp
0482F2 C9          0213*       ret
0482F3             0214*   ; end bar_update_v
0482F3             0215*   
0482F3 40 00 00    0216*   player_shields: dl 64 ; integer
0482F6             0217*   ; max player shields,binary
0482F6             0218*   ; can increase with power-ups (todo)
0482F6 40 00 00    0219*   player_shields_max: dl 64 ; integer
0482F9 00 00 00    0220*   player_shields_last: dl 0 ; integer
0482FC             0221*   bar_shields:
0482FC 00 00 00    0222*       dl 0 ; value
0482FF F0 01 00    0223*       dl 496 ; x0
048302 30 01 00    0224*       dl 304 ; y0
048305 F7 01 00    0225*       dl 496+7 ; x1
048308 6F 01 00    0226*       dl 304+63 ; y1
04830B F0 00 00    0227*       dl 304-64 ; y-plot coordinate
04830E             0228*   
04830E             0229*   init_bar_shields:
04830E DD 21 FC 82 0230*       ld ix,bar_shields
       04          
048313 2A F6 82 04 0231*       ld hl,(player_shields_max)
048317 DD 2F 00    0232*       ld (ix+bar_val),hl
04831A CD 97 82 04 0233*       call bar_update_v
04831E C9          0234*       ret
04831F             0235*   ; end init_bar_shields
04831F             0236*   
04831F             0237*   ; inputs: iy set to sprite/tile record being tallied
04831F             0238*   ; outputs: hl,player_shields = updated shields
04831F             0239*   ; destroys: hl,de
04831F             0240*   update_shields:
04831F 11 00 00 00 0241*       ld de,0 ; clear deu and d
048323 FD 5E 27    0242*       ld e,(iy+sprite_shield_damage)
048326 2A F3 82 04 0243*       ld hl,(player_shields)
04832A 19          0244*       add hl,de
04832B 22 F3 82 04 0245*       ld (player_shields),hl
04832F C9          0246*       ret
048330             0247*   ; end update_shields
048330             0248*   
048330             0249*   draw_shields:
048330 21 F9 82 04 0250*       ld hl,player_shields_last
048334 3A F3 82 04 0251*       ld a,(player_shields)
048338 BE          0252*       cp (hl)
048339 C8          0253*       ret z ; no change to update
04833A 77          0254*       ld (hl),a
04833B DD 21 FC 82 0255*       ld ix,bar_shields
       04          
048340 DD 77 00    0256*       ld (ix+bar_val),a ; TODO: this is redundant
048343 CD 97 82 04 0257*       call bar_update_v
048347 C9          0258*       ret
048348             0259*   
048348             0260*   bar_laser:
048348 00 00 00    0261*       dl 0 ; value
04834B 08 00 00    0262*       dl 8 ; x0
04834E 30 01 00    0263*       dl 304 ; y0
048351 0F 00 00    0264*       dl 8+7 ; x1
048354 6F 01 00    0265*       dl 304+63 ; y1
048357 F0 00 00    0266*       dl 304-64 ; y-plot coordinate
04835A             0267*   
04835A             0268*   init_bar_laser:
04835A 3A 7A 83 04 0269*       ld a,(charge_laser_timer_max)
04835E 32 79 83 04 0270*       ld (charge_laser_timer),a
048362 DD 21 48 83 0271*       ld ix,bar_laser
       04          
048367 2A 76 83 04 0272*       ld hl,(laser_power_max)
04836B DD 2F 00    0273*       ld (ix+bar_val),hl
04836E CD 97 82 04 0274*       call bar_update_v
048372 C9          0275*       ret
048373             0276*   ; end init_bar_laser
048373             0277*   
048373 40 00 00    0278*   laser_power: dl 64 ; integer
048376 40 00 00    0279*   laser_power_max: dl 64 ; integer
048379 00          0280*   charge_laser_timer: db 0
04837A 06          0281*   charge_laser_timer_max: db 6
04837B 00 00 00    0282*   laser_power_last: dl 0 ; integer
04837E             0283*   charge_laser:
04837E             0284*   ; check laser timer
04837E 21 79 83 04 0285*       ld hl,charge_laser_timer
048382 35          0286*       dec (hl)
048383 C0          0287*       ret nz
048384 3A 7A 83 04 0288*       ld a,(charge_laser_timer_max)
048388 77          0289*       ld (hl),a
048389 21 73 83 04 0290*       ld hl,laser_power
04838D 34          0291*       inc (hl)
04838E 3E 40       0292*       ld a,64
048390 BE          0293*       cp (hl)
048391 D0          0294*       ret nc
048392 77          0295*       ld (hl),a
048393 C9          0296*       ret
048394             0297*   ; end charge_laser
048394             0298*   draw_laser:
048394 CD 7E 83 04 0299*       call charge_laser
048398 21 7B 83 04 0300*       ld hl,laser_power_last
04839C 3A 73 83 04 0301*       ld a,(laser_power)
0483A0 BE          0302*       cp (hl)
0483A1 C8          0303*       ret z ; no change to update
0483A2 77          0304*       ld (hl),a
0483A3 DD 21 48 83 0305*       ld ix,bar_laser
       04          
0483A8 DD 77 00    0306*       ld (ix+bar_val),a ; TODO: this is redundant
0483AB CD 97 82 04 0307*       call bar_update_v
0483AF C9          0308*       ret
0483B0             0309*   
0483B0             0310*   
0483B0             0311*   ; update a horizontal bar display
0483B0             0312*   ; inputs: ix points to bar structure
0483B0             0313*   ;         bar_val set by caller
0483B0             0314*   ; prerequisite: bar_init called before first use
0483B0             0315*   bar_update_h:
0483B0             0316*   ; set gfx viewport
0483B0 DD E5       0317*       push ix ; preserve pointer
0483B2 DD 07 03    0318*       ld bc,(ix+bar_x0)
0483B5 DD 17 06    0319*       ld de,(ix+bar_y0)
0483B8 DD 31 0C    0320*       ld iy,(ix+bar_y1)
0483BB DD 37 09    0321*       ld ix,(ix+bar_x1)
0483BE CD EB 1A 04 0322*       call vdu_set_gfx_viewport
0483C2 DD E1       0323*       pop ix ; restore pointer
0483C4             0324*   ; select the color based on the value thresholds
0483C4 DD 17 00    0325*       ld de,(ix+bar_val)
0483C7 21 EF FF FF 0326*       ld hl,-bar_red
0483CB 19          0327*       add hl,de
0483CC D2 E9 83 04 0328*       jp nc,@red
0483D0 21 DF FF FF 0329*       ld hl,-bar_yellow
0483D4 19          0330*       add hl,de
0483D5 D2 E1 83 04 0331*       jp nc,@yellow
0483D9 21 02 00 00 0332*       ld hl,BUF_BAR_H_2 ; green
0483DD C3 ED 83 04 0333*       jp @select
0483E1             0334*   @yellow:
0483E1 21 01 00 00 0335*       ld hl,BUF_BAR_H_1 ; yellow
0483E5 C3 ED 83 04 0336*       jp @select
0483E9             0337*   @red:
0483E9 21 00 00 00 0338*       ld hl,BUF_BAR_H_0 ; red
0483ED             0339*   @select:
0483ED CD 38 1B 04 0340*       call vdu_buff_select
0483F1             0341*   ; compute x-plot position
0483F1 DD 27 00    0342*       ld hl,(ix+bar_val)
0483F4 DD 07 0F    0343*       ld bc,(ix+bar_x)
0483F7 09          0344*       add hl,bc
0483F8 7D          0345*       ld a,l
0483F9 E6 FC       0346*       and %11111100 ; round to nearest 4 pixels
0483FB 6F          0347*       ld l,a
0483FC E5          0348*       push hl
0483FD C1          0349*       pop bc
0483FE             0350*   ; get y-plot position
0483FE DD 17 06    0351*       ld de,(ix+bar_y0)
048401             0352*   
048401             0353*   ; ; DEBUG
048401             0354*   ;     PUSH_ALL
048401             0355*   ;     call vdu_home_cursor
048401             0356*   ;     ld hl,(ix+bar_val)
048401             0357*   ;     call printDec
048401             0358*   ;     call printNewLine
048401             0359*   ;     POP_ALL
048401             0360*   ;     PUSH_ALL
048401             0361*   ;     push bc
048401             0362*   ;     pop hl
048401             0363*   ;     call printDec
048401             0364*   ;     call printNewLine
048401             0365*   ;     POP_ALL
048401             0366*   ;     PUSH_ALL
048401             0367*   ;     ex de,hl
048401             0368*   ;     call printDec
048401             0369*   ;     call printNewLine
048401             0370*   ;     POP_ALL
048401             0371*   ; ; END DEBUG
048401             0372*   
048401 CD 20 1F 04 0373*       call vdu_plot_bmp
048405 C9          0374*       ret
048406             0375*   ; end bar_update_h
048406             0376*   
048406             0377*   bar_fuel:
048406 00 00 00    0378*       dl 0 ; value
048409 30 00 00    0379*       dl 48 ; x0
04840C 08 01 00    0380*       dl 264 ; y0
04840F 6F 00 00    0381*       dl 48+63 ; x1
048412 0F 01 00    0382*       dl 264+7 ; y1
048415 F0 FF FF    0383*       dl 48-64 ; x-plot coordinate
048418             0384*   
048418             0385*   init_bar_fuel:
048418 3A 35 84 04 0386*       ld a,(discharge_fuel_timer_max)
04841C 32 34 84 04 0387*       ld (discharge_fuel_timer),a
048420 DD 21 06 84 0388*       ld ix,bar_fuel
       04          
048425 3A 33 84 04 0389*       ld a,(player_fuel_max)
048429 DD 77 00    0390*       ld (ix+bar_val),a
04842C CD B0 83 04 0391*       call bar_update_h
048430 C9          0392*       ret
048431             0393*   ; end init_bar_fuel
048431             0394*   
048431 40          0395*   player_fuel: db 64 ; integer
048432 00          0396*   player_fuel_last: db 0 ; integer
048433 40          0397*   player_fuel_max: db 64 ; integer
048434 00          0398*   discharge_fuel_timer: db 0
048435 40          0399*   discharge_fuel_timer_max: db 64 ;
048436             0400*   discharge_fuel:
048436             0401*   ; check fuel timer
048436 21 34 84 04 0402*       ld hl,discharge_fuel_timer
04843A 35          0403*       dec (hl)
04843B C0          0404*       ret nz ; not time to discharge fuel so return
04843C             0405*   ; reset fuel discharge timer
04843C 3A 35 84 04 0406*       ld a,(discharge_fuel_timer_max)
048440 77          0407*       ld (hl),a
048441             0408*   ; discharge fuel
048441 21 31 84 04 0409*       ld hl,player_fuel
048445 35          0410*       dec (hl)
048446 CA 4F 84 04 0411*       jp z,@no_fuel
04844A FA 4F 84 04 0412*       jp m,@no_fuel
04844E C9          0413*       ret ; fuel not zero so return
04844F             0414*   @no_fuel:
04844F 36 00       0415*       ld (hl),0 ; TODO: implement out-of-fuel handler
048451 C9          0416*       ret
048452             0417*   ; end discharge_fuel
048452             0418*   
048452             0419*   draw_fuel:
048452 CD 36 84 04 0420*       call discharge_fuel
048456 21 32 84 04 0421*       ld hl,player_fuel_last
04845A 3A 31 84 04 0422*       ld a,(player_fuel)
04845E BE          0423*       cp (hl)
04845F C8          0424*       ret z ; no change to update
048460 77          0425*       ld (hl),a
048461 DD 21 06 84 0426*       ld ix,bar_fuel
       04          
048466 DD 77 00    0427*       ld (ix+bar_val),a ; TODO: this is redundant
048469 CD B0 83 04 0428*       call bar_update_h
04846D C9          0429*       ret
04846E             0430*   ; end draw_fuel
04846E             0062        include "player_laser.inc"
04846E FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
048500             0002*   speed_laser: equ 4*256 ; 6 pixels per frame 16.8 fixed
048500             0003*   tmr_laser: ds 6 ; rate timer for firing laser
       FF FF FF FF 
       FF FF 
048506 28 00 00    0004*   tmr_laser_reset: dl 120/3
048509             0005*   laser_animation_timer_reset: equ 2 ; animate every two frames
048509             0006*   
048509             0007*   laser_defaults:
048509 06          0008*       db player_air        ; type
04850A 4A 01 00    0009*       dl BUF_LASER_A	    ; base_bufferId
04850D 85 85 04    0010*       dl move_player_laser	; move_program
048510 40          0011*       db %01000000            ; collisions bit 6 signals sprite alive
048511 05          0012*       db 5	                ; dim_x
048512 0D          0013*       db 13                   ; dim_y
048513 01          0014*       db 1                    ; num_orientations
048514 02          0015*       db 2                    ; num_animations
048515 00          0016*       db 0	                ; animation
048516 02          0017*       db laser_animation_timer_reset ; animation_timer
048517 00          0018*       db 0	                ; move_timer
048518 00          0019*       db 0	                ; move_step
048519 00          0020*       db 0	                ; points
04851A 00          0021*       db 0	                ; shield_damage
04851B 00          0022*       db 0                    ; frame
04851C             0023*   
04851C             0024*   player_spawn_laser:
04851C             0025*   ; check laser power
04851C 3A 73 83 04 0026*       ld a,(laser_power)
048520 D6 08       0027*       sub a,8 ; 8 units of power per laser shot
048522 D2 2C 85 04 0028*       jp nc,@F ; enough power to fire so check timer
048526 AF          0029*       xor a ; set power to zero
048527 32 73 83 04 0030*       ld (laser_power),a
04852B C9          0031*       ret
04852C             0032*   @@: ; check laser spawn timer
04852C FD 21 00 85 0033*       ld iy,tmr_laser
       04          
048531 CD 21 19 04 0034*       call timestamp_tmr_get
048535 F0          0035*       ret p ; not time to fire
048536             0036*   ; update power to reflect firing
048536 3A 73 83 04 0037*       ld a,(laser_power)
04853A D6 08       0038*       sub a,8 ; 8 units of power per laser shot
04853C 32 73 83 04 0039*       ld (laser_power),a
048540             0040*   ; reset timer
048540 2A 06 85 04 0041*       ld hl,(tmr_laser_reset)
048544 CD 16 19 04 0042*       call timestamp_tmr_set
048548             0043*   ; fire the laser
048548 DD 21 5E A0 0044*       ld ix,player_weapons_begin
       04          
04854D 06 04       0045*       ld b,player_lasers_max
04854F FD 21 5E A1 0046*       ld iy,player_begin
       04          
048554 FD 22 69 95 0047*       ld (table_pointer),iy
       04          
048559 21 09 85 04 0048*       ld hl,laser_defaults
04855D CD 26 96 04 0049*       call spawn_sprite_from_sprite
048561 D0          0050*       ret nc ; no carry means no free sprite slots, so we go home
048562             0051*   ; other specific initialization
048562             0052*   ; ------------------------------------------------
048562 FD 21 5E A1 0053*       ld iy,player_begin
       04          
048567             0054*   ; x-coordinate
048567 FD 27 01    0055*       ld hl,(iy+sprite_x)
04856A 11 00 05 00 0056*       ld de,5*256 ; horizontal center with player sprite
04856E 19          0057*       add hl,de
04856F DD 2F 01    0058*       ld (ix+sprite_x),hl
048572             0059*   ; y-coordinate
048572 FD 27 04    0060*       ld hl,(iy+sprite_y)
048575 11 00 FA FF 0061*       ld de,-6*256 ; set laser y a few pixels above player
048579 19          0062*       add hl,de
04857A DD 2F 04    0063*       ld (ix+sprite_y),hl
04857D             0064*   ; set laser velocity
04857D 21 00 FC FF 0065*       ld hl,-speed_laser
048581 DD 2F 0A    0066*       ld (ix+sprite_yvel),hl
048584 C9          0067*       ret
048585             0068*   ; end player_spawn_laser
048585             0069*   
048585             0070*   move_player_laser:
048585             0071*   ; run the movement program for the laser
048585 CD D9 96 04 0072*       call move_sprite
048589 3A 6C 95 04 0073*       ld a,(sprite_screen_edge)
04858D E6 08       0074*       and a,collide_top ; check collision with top of screen
04858F CA 97 85 04 0075*       jp z,@F ; still on screen
048593 C3 B2 95 04 0076*       jp table_deactivate_sprite
048597             0077*   @@: ; check animation timer
048597 FD 35 23    0078*       dec (iy+sprite_animation_timer)
04859A C2 AE 85 04 0079*       jp nz,@F
04859E 3E 02       0080*       ld a,laser_animation_timer_reset
0485A0 FD 77 23    0081*       ld (iy+sprite_animation_timer),a
0485A3 FD 7E 00    0082*       ld a,(iy+sprite_id)
0485A6 CD 00 20 04 0083*       call vdu_sprite_select
0485AA CD 47 20 04 0084*       call vdu_sprite_next_frame
0485AE             0085*   @@: ; all done
0485AE C9          0086*       ret
0485AF             0087*   ; end move_player_laser
0485AF             0088*   
0485AF             0089*   init_player_laser:
0485AF             0090*   ; set pointer to laser sprite table
0485AF FD 21 5E A0 0091*       ld iy,player_weapons_begin
       04          
0485B4 FD 7E 00    0092*       ld a,(iy+sprite_id) ; sprite id
0485B7 1E 04       0093*       ld e,player_lasers_max ; sprite loop counter
0485B9             0094*   ; define laser sprites
0485B9             0095*   @sprites_loop:
0485B9 F5          0096*       push af
0485BA D5          0097*       push de
0485BB CD 00 20 04 0098*   	call vdu_sprite_select
0485BF CD 13 20 04 0099*   	call vdu_sprite_clear_frames
0485C3 21 4A 01 00 0100*   	ld hl,BUF_LASER_A
0485C7 06 02       0101*   	ld b,2 ; two bitmaps for laser
0485C9             0102*   @frames_loop:
0485C9 C5          0103*   	push bc
0485CA E5          0104*   	push hl
0485CB CD 55 21 04 0105*   	call vdu_sprite_add_buff
0485CF E1          0106*   	pop hl
0485D0 23          0107*   	inc hl
0485D1 C1          0108*   	pop bc
0485D2 10 F5       0109*   	djnz @frames_loop
0485D4 D1          0110*       pop de ; sprite loop counter
0485D5 F1          0111*       pop af ; sprite id
0485D6 3C          0112*       inc a
0485D7 1D          0113*       dec e
0485D8 C2 B9 85 04 0114*       jp nz,@sprites_loop
0485DC             0115*   ; set laser firing timer to zero
0485DC FD 21 00 85 0116*       ld iy,tmr_laser
       04          
0485E1 21 00 00 00 0117*       ld hl,0
0485E5 CD 16 19 04 0118*       call timestamp_tmr_set
0485E9 C9          0119*       ret
0485EA             0120*   ; end init_player_laser
0485EA             0063        include "state.inc"
0485EA FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
048600             0002*   
048600             0003*   ; Game state variables
048600 0E 86 04    0004*   game_state:  dl game_main_menu
048603             0005*   
048603             0006*   do_game:
048603 2A 00 86 04 0007*       ld hl,(game_state)   ; Load the current game state
048607             0008*       CALL_HL                ; Call the corresponding state handler
048607 01 0D 86 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
04860B C5          0002*M1     push bc ; which constitutes the return address
04860C E9          0003*M1     jp (hl) ; Jump to the address in HL
04860D C9          0009*       ret
04860E             0010*   
04860E             0011*   ; ========================
04860E             0012*   ; Main Game States
04860E             0013*   ; ========================
04860E             0014*   
04860E             0015*   game_main_menu:
04860E             0016*       ; Handle main menu options
04860E             0017*       ; Example: Check input for "Start Game"
04860E CD 4F 87 04 0018*       call check_input_menu
048612 C2 17 86 04 0019*       jp nz, game_initialize ; Start game on selection
048616 C9          0020*       ret
048617             0021*   
048617             0022*   game_initialize:
048617             0023*   ; reset the sprite table
048617 CD 8E 95 04 0024*       call table_init
04861B 21 5E A0 04 0025*       ld hl,table_base
04861F 22 69 95 04 0026*       ld (table_pointer),hl
048623             0027*   ; initialize sprites and active tiles table
048623 CD C6 95 04 0028*       call sprites_init
048627 CD 8E 95 04 0029*       call table_init
04862B CD 10 8C 04 0030*       call tile_table_init
04862F             0031*   ; initialize the first level
04862F 3E 00       0032*       ld a,tiles_dg
048631 CD 1A 6E 04 0033*       call init_tileset
048635             0034*   ; initialize player
048635 2A F6 82 04 0035*       ld hl,(player_shields_max)
048639 22 F3 82 04 0036*       ld (player_shields),hl
04863D 22 2A 81 04 0037*       ld (player_score_last),hl ; anything but zero so print_score will update
048641 2A 76 83 04 0038*       ld hl,(laser_power_max)
048645 22 73 83 04 0039*       ld (laser_power),hl
048649 3A 33 84 04 0040*       ld a,(player_fuel_max)
04864D 32 31 84 04 0041*       ld (player_fuel),a
048651 21 00 00 00 0042*       ld hl,0
048655 22 00 7F 04 0043*       ld (player_score),hl
048659 22 F9 82 04 0044*       ld (player_shields_last),hl ; set to zero so draw_shields will update
04865D 22 7B 83 04 0045*       ld (laser_power_last),hl ; set to zero so draw_laser will update
048661 AF          0046*       xor a
048662 32 32 84 04 0047*       ld (player_fuel_last),a ; set to zero so draw_fuel will update
048666 3E 03       0048*       ld a,3
048668 32 03 7F 04 0049*       ld (player_ships),a
04866C CD 17 7F 04 0050*       call player_init
048670             0051*   ; set the game state to playing
048670 21 79 86 04 0052*       ld hl,game_playing
048674 22 00 86 04 0053*       ld (game_state), hl
048678             0054*   ; done initializing
048678 C9          0055*       ret
048679             0056*   
048679             0057*   game_playing:
048679             0058*   ; Main gameplay loop
048679             0059*   
048679             0060*   ; plot tiles
048679 CD 12 8E 04 0061*       call tiles_plot
04867D             0062*   
04867D             0063*   ; set gfx viewport to playing field window
04867D 01 00 00 00 0064*       ld bc,field_left
048681 11 00 00 00 0065*       ld de,field_top
048685 DD 21 FF 00 0066*       ld ix,field_right
       00          
04868A FD 21 7F 01 0067*       ld iy,field_bottom
       00          
04868F CD EB 1A 04 0068*       call vdu_set_gfx_viewport
048693             0069*   
048693             0070*   ; process movement and collisions
048693 CD 20 87 04 0071*       call do_player
048697 CD 39 87 04 0072*       call do_enemies
04869B CD 7A 2A 04 0073*       call move_explosions
04869F CD 94 8F 04 0074*       call move_tiles
0486A3             0075*   
0486A3             0076*   ; update UI
0486A3 01 00 00 00 0077*       ld bc,0
0486A7 11 00 00 00 0078*       ld de,0
0486AB CD D0 1A 04 0079*       call vdu_set_gfx_origin
0486AF CD 3E 81 04 0080*       call print_score
0486B3 CD 30 83 04 0081*       call draw_shields
0486B7 CD 94 83 04 0082*       call draw_laser
0486BB CD 52 84 04 0083*       call draw_fuel
0486BF C9          0084*       ret
0486C0             0085*   
0486C0             0086*   game_paused:
0486C0             0087*       ; Pause menu logic
0486C0 CD 52 87 04 0088*       call check_input_pause
0486C4 C2 79 86 04 0089*       jp nz, game_playing ; Resume game
0486C8 CA 0E 86 04 0090*       jp z, game_main_menu ; Exit to main menu
0486CC C9          0091*       ret
0486CD             0092*   
0486CD             0093*   game_level_transition:
0486CD             0094*       ; Handle level transitions
0486CD CD 53 87 04 0095*       call load_next_level
0486D1 21 79 86 04 0096*       ld hl, game_playing
0486D5 22 00 86 04 0097*       ld (game_state), hl
0486D9 C9          0098*       ret
0486DA             0099*   
0486DA             0100*   game_over:
0486DA             0101*       ; Display game over screen
0486DA CD 54 87 04 0102*       call display_game_over
0486DE C2 0E 86 04 0103*       jp nz, game_main_menu ; Return to main menu on input
0486E2 C9          0104*       ret
0486E3             0105*   
0486E3             0106*   game_victory:
0486E3             0107*       ; Display victory screen
0486E3 CD 55 87 04 0108*       call display_victory
0486E7 C2 0E 86 04 0109*       jp nz, game_main_menu ; Return to main menu on input
0486EB C9          0110*       ret
0486EC             0111*   
0486EC             0112*   ; ========================
0486EC             0113*   ; Supporting States
0486EC             0114*   ; ========================
0486EC             0115*   
0486EC             0116*   game_loading:
0486EC             0117*       ; Show loading screen while preparing assets
0486EC CD 56 87 04 0118*       call load_resources
0486F0 21 17 86 04 0119*       ld hl, game_initialize
0486F4 22 00 86 04 0120*       ld (game_state), hl
0486F8 C9          0121*       ret
0486F9             0122*   
0486F9             0123*   game_cutscene:
0486F9             0124*       ; Play a non-interactive cutscene
0486F9 CD 57 87 04 0125*       call play_cutscene
0486FD C2 79 86 04 0126*       jp nz, game_playing ; Return to gameplay after cutscene
048701 C9          0127*       ret
048702             0128*   
048702             0129*   game_inventory:
048702             0130*       ; Open inventory or shop
048702 CD 58 87 04 0131*       call display_inventory
048706 C2 79 86 04 0132*       jp nz, game_playing ; Return to gameplay after inventory close
04870A C9          0133*       ret
04870B             0134*   
04870B             0135*   game_map:
04870B             0136*       ; Display map or quest
04870B CD 59 87 04 0137*       call display_map
04870F C2 79 86 04 0138*       jp nz, game_playing ; Return to gameplay after map close
048713 C9          0139*       ret
048714             0140*   
048714             0141*   game_exit:
048714             0142*       ; Handle exit logic
048714 CD 5A 87 04 0143*       call save_game
048718 C3 5B 87 04 0144*       jp exit_game         ; Safely shut down
04871C C9          0145*       ret
04871D             0146*   
04871D             0147*   ; ========================
04871D             0148*   ; Sub-state branching (Example for player state)
04871D             0149*   ; ========================
04871D             0150*   
04871D 2B 87 04    0151*   player_state:  dl player_alive ; Player state variable
048720             0152*   
048720             0153*   do_player:
048720 2A 1D 87 04 0154*       ld hl,(player_state)
048724             0155*       CALL_HL                ; Call the corresponding player state
048724 01 2A 87 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
048728 C5          0002*M1     push bc ; which constitutes the return address
048729 E9          0003*M1     jp (hl) ; Jump to the address in HL
04872A C9          0156*       ret
04872B             0157*   
04872B             0158*   player_alive:
04872B CD 67 7F 04 0159*       call player_input     ; Handle player input
04872F CD 30 80 04 0160*       call player_move_weapons    ; Handle laser movement and collision detection
048733 C9          0161*       ret
048734             0162*   
048734             0163*   player_dead:
048734 CD 30 80 04 0164*       call player_move_weapons    ; Handle laser movement and collision detection
048738 C9          0165*       ret
048739             0166*   
048739             0167*   do_enemies:
048739 2A 44 87 04 0168*       ld hl,(enemies_state)
04873D             0169*       CALL_HL
04873D 01 43 87 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
048741 C5          0002*M1     push bc ; which constitutes the return address
048742 E9          0003*M1     jp (hl) ; Jump to the address in HL
048743 C9          0170*       ret
048744 4A 87 04    0171*   enemies_state: dl enemies_alive
048747             0172*   
048747             0173*   enemies_dead:
048747 C9          0174*       ret
048748             0175*   
048748             0176*   enemies_respawning:
048748 C9          0177*       ret
048749             0178*   
048749             0179*   enemies_respawn:
048749 C9          0180*       ret
04874A             0181*   
04874A             0182*   enemies_alive:
04874A CD 01 27 04 0183*       call move_enemies
04874E C9          0184*       ret
04874F             0185*   
04874F             0186*   check_input_menu:
04874F C9          0187*       ret
048750             0188*   
048750             0189*   update_game_world:
048750 C9          0190*       ret
048751             0191*   
048751             0192*   check_game_events:
048751 C9          0193*       ret
048752             0194*   
048752             0195*   check_input_pause:
048752 C9          0196*       ret
048753             0197*   
048753             0198*   load_next_level:
048753 C9          0199*       ret
048754             0200*   
048754             0201*   display_game_over:
048754 C9          0202*       ret
048755             0203*   
048755             0204*   display_victory:
048755 C9          0205*       ret
048756             0206*   
048756             0207*   load_resources:
048756 C9          0208*       ret
048757             0209*   
048757             0210*   play_cutscene:
048757 C9          0211*       ret
048758             0212*   
048758             0213*   display_inventory:
048758 C9          0214*       ret
048759             0215*   
048759             0216*   display_map:
048759 C9          0217*       ret
04875A             0218*   
04875A             0219*   save_game:
04875A C9          0220*       ret
04875B             0221*   
04875B             0222*   exit_game:
04875B C9          0223*       ret
04875C             0224*   
04875C             0064        include "targeting.inc"
04875C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
048800             0002*   
048800             0003*   ; compute orientation to player
048800             0004*   ; based on relative positions
048800             0005*   ; returns: uh.l 16.8 fixed angle256 to player
048800             0006*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
048800             0007*   ;    representing delta-x/y *to* target respectively
048800             0008*   ; inputs: iy pointed at sprite record
048800             0009*   ; destroys: everything except iy (sprite record pointer)
048800             0010*   orientation_to_player:
048800 DD 21 5E A1 0011*       ld ix,player_begin
       04          
048805             0012*   ; compute dx
048805 DD 27 01    0013*       ld hl,(ix+sprite_x)
048808 FD 17 01    0014*       ld de,(iy+sprite_x)
04880B B7          0015*       or a ; clear carry
04880C ED 52       0016*       sbc hl,de ; dx
04880E E5          0017*       push hl ; save dx
04880F             0018*   ; compute dy
04880F DD 27 04    0019*       ld hl,(ix+sprite_y)
048812 FD 17 04    0020*       ld de,(iy+sprite_y)
048815 B7          0021*       or a ; clear carry
048816 ED 52       0022*       sbc hl,de ; dy
048818 EB          0023*       ex de,hl ; de = dy
048819             0024*   ; compute angle to player
048819 C1          0025*       pop bc ; dx (was hl)
04881A C5          0026*       push bc ; save dx
04881B D5          0027*       push de ; save dy
04881C CD 9A 0C 04 0028*       call atan2_168fast ; uh.l = angle to player
048820 3E E0       0029*       ld a,%11100000
048822 A5          0030*       and l ; round angle to nearest 32th of a circle
048823 6F          0031*       ld l,a
048824 22 52 88 04 0032*       ld (Bearing_t),hl ; return angle to player
048828 D1          0033*       pop de ; restore dy
048829 C1          0034*       pop bc ; restore dx
04882A C9          0035*       ret
04882B             0036*   ; end orientation_to_player
04882B             0037*   
04882B             0038*   ; compute orientation to player
04882B             0039*   ; based on relative positions
04882B             0040*   ; returns: uh.l 16.8 fixed angle256 to player
04882B             0041*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
04882B             0042*   ;    representing delta-x/y *to* target respectively
04882B             0043*   ; inputs: iy pointed at tile record
04882B             0044*   ; destroys: everything except iy (tile record pointer)
04882B             0045*   tile_orientation_to_player:
04882B DD 21 5E A1 0046*       ld ix,player_begin
       04          
048830             0047*   ; compute dx
048830 DD 27 01    0048*       ld hl,(ix+sprite_x)
048833 FD 17 01    0049*       ld de,(iy+tile_x)
048836 B7          0050*       or a ; clear carry
048837 ED 52       0051*       sbc hl,de ; dx
048839 E5          0052*       push hl ; save dx
04883A             0053*   ; compute dy
04883A DD 27 04    0054*       ld hl,(ix+sprite_y)
04883D FD 17 04    0055*       ld de,(iy+tile_y)
048840 B7          0056*       or a ; clear carry
048841 ED 52       0057*       sbc hl,de ; dy
048843 EB          0058*       ex de,hl ; de = dy
048844             0059*   ; compute angle to player
048844 C1          0060*       pop bc ; dx (was hl)
048845 CD 9A 0C 04 0061*       call atan2_168fast ; uh.l = angle to player
048849 3E E0       0062*       ld a,%11100000
04884B A5          0063*       and l ; round angle to nearest 32th of a circle
04884C 6F          0064*       ld l,a
04884D 22 52 88 04 0065*       ld (Bearing_t),hl
048851 C9          0066*       ret
048852             0067*   ; end tile_orientation_to_player
048852             0068*   
048852             0069*   ; targeting_computer variables fixed 16.8 format
048852 00 00 00    0070*   Bearing_t: dl 0x000000 ; angle to target
048855 00 00 00    0071*   Heading_t: dl 0x000000 ; angle of target motion
048858 00 00 00    0072*   Vp: dl 0x000000 ; velocity of projectile
04885B 00 00 00    0073*   Vp_x: dl 0x000000 ; x component of projectile velocity
04885E 00 00 00    0074*   Vp_y: dl 0x000000 ; y component of projectile velocity
048861 00 00 00    0075*   Vt: dl 0x000000 ; velocity of target
048864 00 00 00    0076*   Vt_x: dl 0x000000 ; x component of target velocity
048867 00 00 00    0077*   Vt_y: dl 0x000000 ; y component of target velocity
04886A 00 00 00    0078*   Heading_p: dl 0x000000 ; angle of projectile motion
04886D 00 00 00    0079*   lead_angle: dl 0x000000 ; lead angle
048870             0080*   
048870             0081*   ; Inputs:   Vp velocity of projectile set,
048870             0082*   ;           iy pointed to sprite record,
048870             0083*   ;           player position and velocities correctly set
048870             0084*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
048870             0085*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
048870             0086*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
048870             0087*   targeting_computer:
048870 DD 21 5E A1 0088*       ld ix,player_begin
       04          
048875             0089*   ; ; compute target velocity from x,y component velocities
048875             0090*   ;     ld bc,(ix+sprite_xvel)
048875             0091*   ;     ld de,(ix+sprite_yvel)
048875             0092*   ;     ld hl,-1*256 ; account for vertical ground movement
048875             0093*   ;     add hl,de
048875             0094*   ;     ex de,hl ; ud.e = player_yvel-1
048875             0095*   ;     call cartesian_to_polar_sm ; uh.l = Heading_t, ud.e = Vt
048875             0096*   ;     ld (Heading_t),hl ; PASSES
048875             0097*   ;     ld (Vt),de ; PASSES
048875             0098*   ; ; Bearing_t should have been set by prerequisite call to orientation_to_player
048875             0099*   ; ; compute Heading_t-Bearing_t PASSES
048875             0100*   ;     ld de,(Bearing_t)
048875             0101*   ;     and a ; clear carry
048875             0102*   ;     sbc hl,de ; Uh.l = Heading_t-Bearing_t
048875             0103*   ; ; compute sin(Heading_t-Bearing_t)
048875             0104*   ;     call sin168 ; uh.l = sin(Heading_t-Bearing_t)
048875             0105*   ; ; compute (Vt*sin(Heading_t-Bearing_t))
048875             0106*   ;     ld de,(Vt)
048875             0107*   ;     call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
048875             0108*   ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
048875             0109*   ;     ld de,(Vp)
048875             0110*   ;     call sdiv168 ; ud.e = (Vt*sin(Heading_t-Bearing_t)) / Vp
048875             0111*   ;     ex de,hl ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
048875             0112*   ; ; answer is in radians, convert to degrees256
048875             0113*   ;     ld de,0x0028BE ; 40.74 = 57.29578*256/360
048875             0114*   ;     call smul168 ; uh.l = angle in degrees256
048875             0115*   ;     ld (lead_angle),hl ; DEBUG
048875             0116*   ; ; add lead angle to target bearing
048875             0117*   ;     ld de,(Bearing_t)
048875             0118*   ;     add hl,de ; h.l = lead angle+target bearing
048875             0119*   
048875 2A 52 88 04 0120*       ld hl,(Bearing_t) ; DEBUG
048879             0121*   
048879 E5          0122*       push hl
04887A             0123*   
04887A             0124*   ; compute component projectile velocities
04887A ED 5B 58 88 0125*       ld de,(Vp) ; Vp should have been set by caller
       04          
04887F CD A0 0B 04 0126*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
048883 ED 43 5B 88 0127*       ld (Vp_x),bc
       04          
048888             0128*       ; inc d ; account for vertical ground movement
048888 ED 53 5E 88 0129*       ld (Vp_y),de
       04          
04888D E1          0130*       pop hl ; uh.l = lead angle+target bearing
04888E 22 6A 88 04 0131*       ld (Heading_p),hl
048892             0132*   
048892 C9          0133*       ret
048893             0134*   
048893             0135*   ; debug print the results
048893             0136*       PUSH_ALL
048893 08          0001*M1     ex af,af'
048894 D9          0002*M1     exx
048895 F5          0003*M1     push af
048896 E5          0004*M1     push hl
048897 C5          0005*M1     push bc
048898 D5          0006*M1     push de
048899             0007*M1 
048899 08          0008*M1     ex af,af'
04889A D9          0009*M1     exx
04889B F5          0010*M1     push af
04889C E5          0011*M1     push hl
04889D C5          0012*M1     push bc
04889E D5          0013*M1     push de
04889F DD E5       0014*M1     push ix
0488A1 FD E5       0015*M1     push iy
0488A3 CD 00 1A 04 0137*       call vdu_home_cursor
0488A7 CD 1C 01 04 0138*       call printNewLine
0488AB CD 00 01 04 0139*       call printInline
0488AF 42 74 20 00 0140*       asciz "Bt "
0488B3 2A 52 88 04 0141*       ld hl,(Bearing_t)
0488B7 CD 2B 03 04 0142*       call print_s168_hl
0488BB             0143*   
0488BB             0144*       ; call printInline
0488BB             0145*       ; asciz "\r\nHt "
0488BB             0146*       ; ld hl,(Heading_t)
0488BB             0147*       ; call print_s168_hl
0488BB             0148*   
0488BB             0149*       ; call printInline
0488BB             0150*       ; asciz "\r\nVt "
0488BB             0151*       ; ld hl,(Vt)
0488BB             0152*       ; call print_s168_hl
0488BB             0153*   
0488BB             0154*       ; call printInline
0488BB             0155*       ; asciz "\r\nVtx"
0488BB             0156*       ; ld hl,(ix+sprite_xvel)
0488BB             0157*       ; call print_s168_hl
0488BB             0158*   
0488BB             0159*       ; call printInline
0488BB             0160*       ; asciz "\r\nVty"
0488BB             0161*       ; ld hl,(ix+sprite_yvel)
0488BB             0162*       ; ld de,-1*256 ; account for vertical ground movement
0488BB             0163*       ; add hl,de
0488BB             0164*       ; call print_s168_hl
0488BB             0165*   
0488BB CD 00 01 04 0166*       call printInline
0488BF 0D 0A 4C 64 0167*       asciz "\r\nLda"
       61 00       
0488C5 2A 6D 88 04 0168*       ld hl,(lead_angle)
0488C9 CD 2B 03 04 0169*       call print_s168_hl
0488CD             0170*   
0488CD CD 00 01 04 0171*       call printInline
0488D1 0D 0A 48 70 0172*       asciz "\r\nHp "
       20 00       
0488D7 2A 6A 88 04 0173*       ld hl,(Heading_p)
0488DB CD 2B 03 04 0174*       call print_s168_hl
0488DF             0175*   
0488DF             0176*       ; call printInline
0488DF             0177*       ; asciz "\r\nVp "
0488DF             0178*       ; ld hl,(Vp)
0488DF             0179*       ; call print_s168_hl
0488DF             0180*   
0488DF             0181*       ; call printInline
0488DF             0182*       ; asciz "\r\nVpx"
0488DF             0183*       ; ld hl,(Vp_x)
0488DF             0184*       ; call print_s168_hl
0488DF             0185*   
0488DF             0186*       ; call printInline
0488DF             0187*       ; asciz "\r\nVpy"
0488DF             0188*       ; ld hl,(Vp_y)
0488DF             0189*       ; call print_s168_hl
0488DF             0190*   
0488DF             0191*       POP_ALL
0488DF FD E1       0001*M1     pop iy
0488E1 DD E1       0002*M1     pop ix
0488E3 D1          0003*M1     pop de
0488E4 C1          0004*M1     pop bc
0488E5 E1          0005*M1     pop hl
0488E6 F1          0006*M1     pop af
0488E7 08          0007*M1     ex af,af'
0488E8 D9          0008*M1     exx
0488E9             0009*M1 
0488E9 D1          0010*M1     pop de
0488EA C1          0011*M1     pop bc
0488EB E1          0012*M1     pop hl
0488EC F1          0013*M1     pop af
0488ED 08          0014*M1     ex af,af'
0488EE D9          0015*M1     exx
0488EF C9          0192*       ret
0488F0             0065        include "tile_table.inc"
0488F0             0001*   ; ###### tile TABLE FIELD INDICES ######
0488F0             0002*   tile_table_record_size:         equ  64; 41 bytes ;41 bytes per tile record
0488F0             0003*   tile_id:                 equ   0; 1 bytes ;unique tileId, zero-based
0488F0             0004*   ; tile state variables
0488F0             0005*   tile_state_variables:    equ   1; beginning of tile state variables
0488F0             0006*   tile_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
0488F0             0007*   tile_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
0488F0             0008*   tile_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
0488F0             0009*   tile_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
0488F0             0010*   tile_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
0488F0             0011*   tile_heading:            equ  16; 3 bytes ;tile movement direction deg256 16.8 fixed
0488F0             0012*   tile_orientation:        equ  19; 3 bytes ;orientation bits
0488F0             0013*   ; tile definition variables
0488F0             0014*   tile_definitions:        equ  22; beginnning of tile definition variables
0488F0             0015*   tile_type:               equ  22; 1 bytes ;type of tile as defined in enemies.inc
0488F0             0016*   tile_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
0488F0             0017*   tile_move_program:       equ  26; 3 bytes ;address of tile's behavior subroutine
0488F0             0018*   tile_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
0488F0             0019*   tile_dim_x:              equ  30; 1 bytes ;tile width in pixels
0488F0             0020*   tile_dim_y:              equ  31; 1 bytes ;tile height in pixels
0488F0             0021*   tile_num_orientations:   equ  32; 1 bytes ;number of orientations for this tile
0488F0             0022*   tile_num_animations:     equ  33; 1 bytes ;number of animations for this tile
0488F0             0023*   tile_animation:          equ  34; 1 bytes ;current animation index, zero-based
0488F0             0024*   tile_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
0488F0             0025*   tile_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
0488F0             0026*   tile_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
0488F0             0027*   tile_points:             equ  38; 1 bytes ;points awarded for killing this tile type
0488F0             0028*   tile_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
0488F0             0029*   tile_frame:              equ  40; 1 bytes ;current animation frame
0488F0             0030*   
0488F0             0031*   ; ###### tile TABLE VARIABLES ######
0488F0 FF FF FF FF 0032*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
048900 00 00 00 00 0033*   tile_stack: blkb 256*3,0 ; stack of pointers to tile records
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
048C00 00 00 00    0034*       dl 0 ; list terminator
048C03             0035*   tile_stack_end:
048C03 00 89 04    0036*   tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
048C06 5E A5 04    0037*   tile_table_pointer: dl tile_table_base ; pointer to top address of current record, initialized to tile_table_base
048C09 00 00 00    0038*   num_active_tiles: dl 0 ; how many active tiles
048C0C 00          0039*   next_tile_id: db 0 ; next available tile id
048C0D 00 00 00    0040*   new_tile_table_pointer: dl 0 ; pointer to new tile record
048C10             0041*   
048C10             0042*   tile_table_init:
048C10             0043*   ; clear the tile stack
048C10 AF          0044*       xor a ; write zeroes to tile stack
048C11 21 00 89 04 0045*       ld hl,tile_stack
048C15 01 03 03 00 0046*       ld bc,tile_stack_end-tile_stack
048C19 CD 31 07 04 0047*       call clear_mem
048C1D             0048*   ; clear the tile table
048C1D AF          0049*       xor a ; write zeroes to tile table
048C1E 21 5E A5 04 0050*       ld hl,tile_table_base ; address to copy from
048C22 01 00 40 00 0051*       ld bc,tile_table_end-tile_table_base ; number of bytes to clear
048C26 CD 31 07 04 0052*       call clear_mem
048C2A             0053*   ; write tile ids
048C2A DD 21 5E A5 0054*       ld ix,tile_table_base
       04          
048C2F AF          0055*       xor a ; tile id
048C30 06 00       0056*       ld b,0 ; loop counter
048C32             0057*   @loop:
048C32 DD 77 00    0058*       ld (ix+tile_id),a
048C35 ED 32 40    0059*       lea ix,ix+table_record_size
048C38 3C          0060*       inc a
048C39 10 F7       0061*       djnz @loop
048C3B             0062*   ; set pointers to top of tile stack and tile table
048C3B 21 0C 8C 04 0063*       ld hl,next_tile_id
048C3F 3E FF       0064*       ld a,255 ; will wrap around to 0 on first call to create active tile
048C41 77          0065*       ld (hl),a
048C42 21 5E A5 04 0066*       ld hl,tile_table_base
048C46 22 06 8C 04 0067*       ld (tile_table_pointer),hl
048C4A 21 00 89 04 0068*       ld hl,tile_stack
048C4E 22 03 8C 04 0069*       ld (tile_stack_pointer),hl
048C52 C9          0070*       ret
048C53             0071*   ; end tile_table_init
048C53             0072*   
048C53             0073*   ; gets the next available tile id
048C53             0074*   ; inputs; none
048C53             0075*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
048C53             0076*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
048C53             0077*   ; destroys: a,hl,ix
048C53             0078*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
048C53             0079*   tile_table_get_next_id:
048C53 21 09 8C 04 0080*       ld hl,num_active_tiles
048C57 34          0081*       inc (hl)
048C58 C2 5F 8C 04 0082*       jp nz,@F ; check rollover to > 256 active tiles
048C5C 35          0083*       dec (hl) ; undo increment
048C5D AF          0084*       xor a ; reset carry flag indicating that we didn't find a free tile
048C5E C9          0085*       ret
048C5F             0086*   @@:
048C5F 7E          0087*       ld a,(hl) ; number of active tiles
048C60             0088*   ; point ix to next tile record
048C60 21 0C 8C 04 0089*       ld hl,next_tile_id
048C64 34          0090*       inc (hl)
048C65 56          0091*       ld d,(hl) ; index into tile table
048C66 1E 40       0092*       ld e,tile_table_record_size
048C68 ED 5C       0093*       mlt de ; de is now the offset to the table entry
048C6A DD 21 5E A5 0094*       ld ix,tile_table_base ; point to base address of tile table
       04          
048C6F DD 19       0095*       add ix,de ; ix is now the address of the table entry
048C71             0096*   ; add tile pointer to tile stack
048C71 21 00 89 04 0097*       ld hl,tile_stack
048C75 57          0098*       ld d,a ; number of active tiles
048C76 15          0099*       dec d ; zero-based index
048C77 1E 03       0100*       ld e,3 ; three bytes per tile record
048C79 ED 5C       0101*       mlt de ; offset into tile stack
048C7B 19          0102*       add hl,de ; hl points to top of the active tiles
048C7C ED 3F       0103*       ld (hl),ix
048C7E             0104*   ; return tile id
048C7E DD 7E 00    0105*       ld a,(ix+tile_id)
048C81 37          0106*       scf ; sets carry flag indicating we found a free tile
048C82 C9          0107*       ret ; done
048C83             0108*   ; end tile_table_get_next_id
048C83             0109*   
048C83             0110*   ; deactivate the tile with the given id
048C83             0111*   ; inputs: tile_stack_pointer set to record to remove
048C83             0112*   ; outputs: decrements num_active_tiles by one, tile_stack_pointer set to record above removed record, removes tile pointer from the tile stack, shifts stack records above it down one position
048C83             0113*   ; destroys: a,hl,bc,de
048C83             0114*   table_deactivate_tile:
048C83             0115*   ; compute address to copy from
048C83 2A 03 8C 04 0116*       ld hl,(tile_stack_pointer)
048C87 23          0117*       inc hl
048C88 23          0118*       inc hl
048C89 23          0119*       inc hl
048C8A E5          0120*       push hl ; save copy from address
048C8B             0121*   ; compute bytes to copy
048C8B 3A 09 8C 04 0122*       ld a,(num_active_tiles)
048C8F 6F          0123*       ld l,a
048C90 26 03       0124*       ld h,3
048C92 ED 6C       0125*       mlt hl
048C94 11 00 89 04 0126*       ld de,tile_stack
048C98 19          0127*       add hl,de ; hl = bottom of stack address
048C99 ED 5B 03 8C 0128*       ld de,(tile_stack_pointer)
       04          
048C9E B7          0129*       or a ; clear carry
048C9F ED 52       0130*       sbc hl,de ; hl = bytes to copy
048CA1 E5          0131*       push hl
048CA2 C1          0132*       pop bc ; bytes to copy
048CA3             0133*   ; compute target address
048CA3 ED 5B 03 8C 0134*       ld de,(tile_stack_pointer)
       04          
048CA8             0135*   ; copy bytes
048CA8 E1          0136*       pop hl ; copy from address
048CA9 ED B0       0137*       ldir
048CAB             0138*   ; update stack pointer and active tile count
048CAB 21 09 8C 04 0139*       ld hl,num_active_tiles
048CAF 35          0140*       dec (hl)
048CB0 2A 03 8C 04 0141*       ld hl,(tile_stack_pointer)
048CB4 2B          0142*       dec hl
048CB5 2B          0143*       dec hl
048CB6 2B          0144*       dec hl
048CB7 22 03 8C 04 0145*       ld (tile_stack_pointer),hl
048CBB C9          0146*       ret
048CBC             0147*   ; end table_deactivate_tile
048CBC             0148*   
048CBC             0149*   ; spawn a new active tile at the prescribed location
048CBC             0150*   ; inputs: hl = pointer to new tile default settings, tiles_x_plot, tiles_y_plot = x,y position
048CBC             0151*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
048CBC             0152*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
048CBC             0153*   ; destroys: a,hl,bc,de,ix
048CBC             0154*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
048CBC             0155*   spawn_active_tile:
048CBC E5          0156*       push hl ; back up pointer to new tile defaults
048CBD CD 53 8C 04 0157*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
048CC1 E1          0158*       pop hl ; restore pointer to new tile defaults
048CC2 D0          0159*       ret nc ; no carry means no free tile slots, so we go home
048CC3             0160*   ; copy default settings to new tile
048CC3 DD 22 0D 8C 0161*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
048CC8 ED 32 16    0162*       lea ix,ix+tile_definitions ; bump pointer to copy to
048CCB DD E5       0163*       push ix ; pointer to default tile settings
048CCD D1          0164*       pop de ; address to copy to
048CCE 01 2A 00 00 0165*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
048CD2 ED B0       0166*       ldir ; copies defaults to new tile record
048CD4             0167*   ; copy tile position from inputs
048CD4 DD 2A 0D 8C 0168*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
048CD9 2A 0A 8E 04 0169*       ld hl,(tiles_x_plot-1) ; shift up one byte to get 16.8 fixed point
048CDD DD 2F 01    0170*       ld (ix+tile_x),hl
048CE0 2A 0E 8E 04 0171*       ld hl,(tiles_y_plot-1) ; shift up one byte to get 16.8 fixed point
048CE4 DD 2F 04    0172*       ld (ix+tile_y),hl
048CE7             0173*   ; set default tile velocities
048CE7 21 00 00 00 0174*       ld hl,0
048CEB DD 2F 07    0175*       ld (ix+tile_xvel),hl
048CEE 21 00 01 00 0176*       ld hl,1*256 ; 1 pixel per frame
048CF2 DD 2F 0A    0177*       ld (ix+tile_yvel),hl
048CF5             0178*   ; return to caller
048CF5 DD CB 16 FE 0179*       set 7,(ix+sprite_type) ; set just spawned flag
048CF9 DD CB 1D F6 0180*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
048CFD 37          0181*       scf ; set carry flag to indicate success
048CFE C9          0182*       ret
048CFF             0183*   ; end spawn_active_tile
048CFF             0184*   
048CFF             0185*   ; spawn a new active tile at the prescribed location
048CFF             0186*   ; inputs: iy pointer to current hl = pointer to new tile default settings
048CFF             0187*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
048CFF             0188*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
048CFF             0189*   ; destroys: a,hl,bc,de,ix
048CFF             0190*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
048CFF             0191*   spawn_active_tile_from_sprite:
048CFF E5          0192*       push hl ; back up pointer to new tile defaults
048D00 CD 53 8C 04 0193*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
048D04 E1          0194*       pop hl ; restore pointer to new tile defaults
048D05 D0          0195*       ret nc ; no carry means no free tile slots, so we go home
048D06             0196*   ; copy default settings to new tile
048D06 DD 22 0D 8C 0197*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
048D0B ED 32 16    0198*       lea ix,ix+tile_definitions ; bump pointer to copy to
048D0E DD E5       0199*       push ix ; pointer to default tile settings
048D10 D1          0200*       pop de ; address to copy to
048D11 01 2A 00 00 0201*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
048D15 ED B0       0202*       ldir ; copies defaults to new tile record
048D17             0203*   ; copy tile position from existing sprite
048D17 DD 2A 0D 8C 0204*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
048D1C FD 2A 69 95 0205*       ld iy,(table_pointer) ; get existing sprite record
       04          
048D21 FD 27 01    0206*       ld hl,(iy+sprite_x)
048D24 DD 2F 01    0207*       ld (ix+tile_x),hl
048D27 FD 27 04    0208*       ld hl,(iy+sprite_y)
048D2A DD 2F 04    0209*       ld (ix+tile_y),hl
048D2D             0210*   ; set default tile velocities
048D2D 21 00 00 00 0211*       ld hl,0
048D31 DD 2F 07    0212*       ld (ix+tile_xvel),hl
048D34 21 00 01 00 0213*       ld hl,1*256 ; 1 pixel per frame
048D38 DD 2F 0A    0214*       ld (ix+tile_yvel),hl
048D3B             0215*   ; return to caller
048D3B DD CB 16 FE 0216*       set 7,(ix+sprite_type) ; set just spawned flag
048D3F DD CB 1D F6 0217*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
048D43 37          0218*       scf ; set carry flag to indicate success
048D44 C9          0219*       ret
048D45             0220*   ; end spawn_active_tile_from_sprite
048D45             0221*   
048D45             0222*   ; compute animation frame based on tile_animation and tile_heading
048D45             0223*   ; inputs: iy set to tile record
048D45             0224*   ; outputs: a, tile_frame set to animation frame
048D45             0225*   ; destroys: a,hl
048D45             0226*   tile_frame_heading_animation:
048D45 FD 7E 11    0227*       ld a,(iy+tile_heading+1) ; we want the integer portion
048D48 CB 3F       0228*       srl a ; divide integer portion by 8
048D4A CB 3F       0229*       srl a
048D4C CB 3F       0230*       srl a
048D4E FD 66 22    0231*       ld h,(iy+tile_animation)
048D51 2E 20       0232*       ld l,32 ; 32 orientation frames per animation
048D53 ED 6C       0233*       mlt hl ; hl = offset from base animation
048D55 85          0234*       add a,l ; modulo256 since tile_frame is only 1 byte
048D56 FD 77 28    0235*       ld (iy+tile_frame),a
048D59 C9          0236*       ret
048D5A             0237*   ; end tile_frame_heading_animation
048D5A             0238*   
048D5A             0239*   ; compute animation frame based on tile_heading
048D5A             0240*   ; inputs: iy set to tile record
048D5A             0241*   ; outputs: a, tile_frame set to animation frame
048D5A             0242*   ; destroys: a,hl
048D5A             0243*   tile_frame_heading:
048D5A FD 7E 11    0244*       ld a,(iy+tile_heading+1) ; we want the integer portion
048D5D CB 3F       0245*       srl a ; divide integer portion by 8
048D5F CB 3F       0246*       srl a
048D61 CB 3F       0247*       srl a
048D63 FD 77 28    0248*       ld (iy+tile_frame),a
048D66 C9          0249*       ret
048D67             0250*   ; end tile_frame_heading
048D67             0066        include "tiles.inc"
048D67 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
048E00 00 00 00    0002*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
048E03 00 00 00    0003*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
048E06             0004*       ; initialize to zero for a maximum of 256 rows in a level
048E06 00          0005*   tiles_cols: db 0 ; number of tile columns in the current level
048E07             0006*   
048E07 00 00 00    0007*   cur_baseBufferId: dl 0
048E0A 00          0008*       db 0 ; padding for byte-shifting
048E0B 00 00 00    0009*   tiles_x_plot: dl 0
048E0E 00          0010*       db 0 ; padding for byte-shifting
048E0F F1 FF FF    0011*   tiles_y_plot: dl -15
048E12             0012*   
048E12             0013*   tiles_plot:
048E12             0014*   ; set gfx origin to playing field window
048E12 01 80 00 00 0015*       ld bc,origin_left
048E16 11 00 00 00 0016*       ld de,origin_top
048E1A CD D0 1A 04 0017*       call vdu_set_gfx_origin
048E1E             0018*   ; set gfx viewport to playing field window
048E1E 01 00 00 00 0019*       ld bc,field_left
048E22 11 00 00 00 0020*       ld de,field_top
048E26 DD 21 FF 00 0021*       ld ix,field_right
       00          
048E2B FD 21 7F 01 0022*       ld iy,field_bottom
       00          
048E30 CD EB 1A 04 0023*       call vdu_set_gfx_viewport
048E34             0024*   ; move the background down one pixel
048E34 3E 02       0025*       ld a,2 ; current gfx viewport
048E36 2E 02       0026*       ld l,2 ; direction=down
048E38 26 01       0027*       ld h,1 ; speed=1 px
048E3A CD 63 1A 04 0028*       call vdu_scroll_down
048E3E             0029*   ; set gfx viewport to one scanline to optimise plotting tiles
048E3E 01 00 00 00 0030*       ld bc,0 ; leftmost x-coord
048E42 11 00 00 00 0031*       ld de,0 ; topmost y-coord
048E46 DD 21 FF 00 0032*       ld ix,255 ; rightmost x-coord
       00          
048E4B FD 21 00 00 0033*       ld iy,0 ; bottommost y-coord
       00          
048E50 CD EB 1A 04 0034*       call vdu_set_gfx_viewport
048E54             0035*   ; plot the background
048E54 CD 18 8F 04 0036*       call bg_plot
048E58             0037*   ; initialize tiles loop
048E58 21 00 00 00 0038*       ld hl,0 ; init plotting x-coordinate
048E5C 22 0B 8E 04 0039*       ld (tiles_x_plot),hl
048E60 2A 00 8E 04 0040*       ld hl,(tiles_row_defs)
048E64 3A 06 8E 04 0041*       ld a,(tiles_cols)
048E68 47          0042*       ld b,a ; column loop counter
048E69             0043*   @loop:
048E69 C5          0044*       push bc ; save the loop counter
048E6A             0045*   ; read the tile defintion for the current column
048E6A 7E          0046*       ld a,(hl) ; a has tile definition
048E6B E5          0047*       push hl ; save pointer to tile definition
048E6C 2A 07 8E 04 0048*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
048E70 6F          0049*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
048E71 CD 38 1B 04 0050*       call vdu_buff_select ; tile bitmap buffer is now active
048E75             0051*   ; plot the active bitmap
048E75 ED 4B 0B 8E 0052*       ld bc,(tiles_x_plot)
       04          
048E7A ED 5B 0F 8E 0053*       ld de,(tiles_y_plot)
       04          
048E7F CD 20 1F 04 0054*       call vdu_plot_bmp
048E83             0055*   ; bump x-coords the width of one tile and save it
048E83 2A 0B 8E 04 0056*       ld hl,(tiles_x_plot)
048E87 01 10 00 00 0057*       ld bc,16
048E8B 09          0058*       add hl,bc
048E8C 22 0B 8E 04 0059*       ld (tiles_x_plot),hl
048E90             0060*   ; prepare to loop to next column
048E90 E1          0061*       pop hl ; get back pointer to tile def
048E91 23          0062*       inc hl ; bump it to the next column
048E92 C1          0063*       pop bc ; snag our loop counter
048E93 10 D4       0064*       djnz @loop
048E95             0065*   ; increment tiles plotting y-coordinate
048E95             0066*   ; (we use ix b/c we want to preserve hl for the next step)
048E95 DD 2A 0F 8E 0067*       ld ix,(tiles_y_plot)
       04          
048E9A 11 01 00 00 0068*       ld de,1
048E9E DD 19       0069*       add ix,de
048EA0 DD 22 0F 8E 0070*       ld (tiles_y_plot),ix
       04          
048EA5 DD 7D       0071*       ld a,ixl
048EA7 FE 01       0072*       cp 1
048EA9 C0          0073*       ret nz
048EAA             0074*   ; do active tiles
048EAA E5          0075*       push hl ; save pointer to next row tile def
048EAB CD CE 8E 04 0076*       call do_active_tiles
048EAF E1          0077*       pop hl ; get back pointer to next row tile def
048EB0             0078*   ; time to bump tiles_row_defs to next row
048EB0             0079*   ; (hl was already there at the end of the loop)
048EB0 22 00 8E 04 0080*       ld (tiles_row_defs),hl
048EB4             0081*   ; reset coords to plot next row of tiles
048EB4 21 00 00 00 0082*       ld hl,0
048EB8 22 0B 8E 04 0083*       ld (tiles_x_plot),hl
048EBC 21 F1 FF FF 0084*       ld hl,-15
048EC0 22 0F 8E 04 0085*       ld (tiles_y_plot),hl
048EC4             0086*   ; decrement tiles row counter
048EC4 21 03 8E 04 0087*       ld hl,tiles_row
048EC8 35          0088*       dec (hl)
048EC9 C0          0089*       ret nz
048ECA             0090*   @inc_level:
048ECA C3 6C 6E 04 0091*       jp next_level
048ECE             0092*   ; end tiles_plot
048ECE             0093*   
048ECE             0094*   do_active_tiles:
048ECE             0095*   ; initialize tiles loop
048ECE 21 00 00 00 0096*       ld hl,0 ; init plotting x-coordinate
048ED2 22 0B 8E 04 0097*       ld (tiles_x_plot),hl
048ED6 2A 00 8E 04 0098*       ld hl,(tiles_row_defs)
048EDA 3A 06 8E 04 0099*       ld a,(tiles_cols)
048EDE 47          0100*       ld b,a ; column loop counter
048EDF             0101*   @loop:
048EDF C5          0102*       push bc ; save the loop counter
048EE0             0103*   ; read the tile defintion for the current column
048EE0 7E          0104*       ld a,(hl) ; a has tile definition
048EE1 E5          0105*       push hl ; save pointer to tile definition
048EE2 B7          0106*       or a ; check for null tile
048EE3 CA FF 8E 04 0107*       jp z,@next_tile ; skip to next tile if null
048EE7 FE 11       0108*       cp 17 ; carry reset if active tile
048EE9 D2 FF 8E 04 0109*       jp nc,@next_tile ; skip to next tile if not active
048EED             0110*   ; call the tile activation routine
048EED 21 50 8F 04 0111*       ld hl,tile_activation_routines
048EF1 16 03       0112*       ld d,3 ; three bytes per table entry
048EF3 5F          0113*       ld e,a ; a is the tile type
048EF4 ED 5C       0114*       mlt de ; de is now the offset to the table entry
048EF6 19          0115*       add hl,de ; hl is now the address of the table entry
048EF7 ED 27       0116*       ld hl,(hl) ; hl is now the activation routine address
048EF9             0117*       CALL_HL ; call the activation routine
048EF9 01 FF 8E 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
048EFD C5          0002*M1     push bc ; which constitutes the return address
048EFE E9          0003*M1     jp (hl) ; Jump to the address in HL
048EFF             0118*   @next_tile:
048EFF             0119*   ; bump x-coords the width of one tile and save it
048EFF 2A 0B 8E 04 0120*       ld hl,(tiles_x_plot)
048F03 01 10 00 00 0121*       ld bc,16
048F07 09          0122*       add hl,bc
048F08 22 0B 8E 04 0123*       ld (tiles_x_plot),hl
048F0C             0124*   ; prepare to loop to next column
048F0C E1          0125*       pop hl ; get back pointer to tile def
048F0D 23          0126*       inc hl ; bump it to the next column
048F0E C1          0127*       pop bc ; snag our loop counter
048F0F 10 CE       0128*       djnz @loop
048F11 C9          0129*       ret ; done
048F12             0130*   ; end do_active_tiles
048F12             0131*   
048F12 FF FF FF    0132*   bg_y_plot: dl -1
048F15 00 04 00    0133*   bg_bufferId: dl BUF_BG_STARS_0 ; default bufferId for background tiles
048F18             0134*   
048F18             0135*   bg_plot: ; TODO: implement this
048F18             0136*   ; load current bg tile bufferId as default
048F18 2A 15 8F 04 0137*       ld hl,(bg_bufferId)
048F1C             0138*   ; check whether it is time for a new background tile
048F1C 3A 12 8F 04 0139*       ld a,(bg_y_plot)
048F20 3C          0140*       inc a
048F21 32 12 8F 04 0141*       ld (bg_y_plot),a
048F25 C2 3D 8F 04 0142*       jp nz,@F ; not time for a new tile so draw current one
048F29             0143*   ; load the next background tile
048F29 21 00 04 00 0144*       ld hl,BUF_BG_STARS_0
048F2D CD AE 09 04 0145*       call rand_8
048F31 E6 07       0146*       and %0000111
048F33 85          0147*       add a,l
048F34 6F          0148*       ld l,a
048F35 3E 00       0149*       ld a,0
048F37 8C          0150*       adc a,h
048F38 67          0151*       ld h,a
048F39 22 15 8F 04 0152*       ld (bg_bufferId),hl
048F3D             0153*   @@:
048F3D CD 38 1B 04 0154*       call vdu_buff_select
048F41 01 00 00 00 0155*       ld bc,0
048F45 ED 5B 12 8F 0156*       ld de,(bg_y_plot)
       04          
048F4A 13          0157*       inc de
048F4B CD 20 1F 04 0158*       call vdu_plot_bmp
048F4F C9          0159*       ret
048F50             0160*   ; end bg_plot
048F50             0067        include "tiles_active.inc"
048F50             0001*   
048F50             0002*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
048F50             0003*   tile_pad_small: equ 1
048F50             0004*   tile_pad_med: equ 2
048F50             0005*   tile_pad_large: equ 3
048F50             0006*   tile_charge_shields: equ 4
048F50             0007*   tile_turret_fireball: equ 5
048F50             0008*   tile_laser_turret: equ 6
048F50             0009*   tile_twin_laser_turret: equ 7
048F50             0010*   tile_charge_fuel: equ 8
048F50             0011*   tile_electrode: equ 9
048F50             0012*   tile_lightning: equ 10
048F50             0013*   ; tile_electrode_r: equ 11 ; same as tile_electrode
048F50             0014*   tile_12: equ 12
048F50             0015*   tile_13: equ 13
048F50             0016*   tile_14: equ 14
048F50             0017*   tile_15: equ 15
048F50             0018*   tile_crater: equ 16
048F50             0019*   
048F50             0020*   tile_activation_routines:
048F50 80 8F 04    0021*       dl activate_null_tile ; dummy spacer since tiled is 1-based
048F53 13 94 04    0022*       dl activate_pad_small
048F56 80 8F 04    0023*       dl activate_null_tile
048F59 80 8F 04    0024*       dl activate_null_tile
048F5C 80 8F 04    0025*       dl activate_null_tile
048F5F 13 95 04    0026*       dl activate_turret_fireball
048F62 80 8F 04    0027*       dl activate_null_tile
048F65 80 8F 04    0028*       dl activate_null_tile
048F68 80 8F 04    0029*       dl activate_null_tile
048F6B 13 92 04    0030*       dl activate_electrode
048F6E 13 93 04    0031*       dl activate_lightning
048F71 13 92 04    0032*       dl activate_electrode
048F74 80 8F 04    0033*       dl activate_null_tile
048F77 80 8F 04    0034*       dl activate_null_tile
048F7A 80 8F 04    0035*       dl activate_null_tile
048F7D 13 91 04    0036*       dl activate_crater
048F80             0037*   ; end tile_activation_routines
048F80             0038*   
048F80             0039*   activate_null_tile:
048F80 C9          0040*       ret ; dummy routine, do nothing
048F81             0041*   move_active_tile:
048F81             0042*   ; y-axis movement
048F81 FD 27 04    0043*       ld hl,(iy+tile_y)
048F84 FD 17 0A    0044*       ld de,(iy+tile_yvel)
048F87 19          0045*       add hl,de
048F88 FD 2F 04    0046*       ld (iy+tile_y),hl
048F8B             0047*   ; detect screen edge collisions
048F8B             0048*   ; y-axis bottom is all we need to test
048F8B 11 00 80 FE 0049*       ld de,-tile_bottom*256
048F8F ED 5A       0050*       adc hl,de
048F91 F8          0051*       ret m ; still on screen so do nothing further
048F92 AF          0052*       xor a ; signal caller that tile has scrolled off screen
048F93 C9          0053*       ret
048F94             0054*   ; end move_active_tile
048F94             0055*   
048F94             0056*   move_tiles:
048F94             0057*   ; initialize pointers and loop counter
048F94 FD 21 00 89 0058*       ld iy,tile_stack ; set iy to first record in table
       04          
048F99             0059*   @move_loop:
048F99 FD 22 03 8C 0060*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
048F9E FD 7E 02    0061*       ld a,(iy+2)
048FA1 B7          0062*       or a ; will be zero if at end of stack
048FA2 C8          0063*       ret z ; end of stack so we're done
048FA3             0064*   ; point iy to tile record
048FA3 FD 37 00    0065*       ld iy,(iy) ; iy points to the current tile record
048FA6 FD 22 06 8C 0066*       ld (tile_table_pointer),iy ; update table pointer
       04          
048FAB             0067*   ; check top bit of tile_type to see if tile is just spawned
048FAB FD CB 16 7E 0068*       bit 7,(iy+tile_type)
048FAF C2 CD 8F 04 0069*       jp nz,@just_spawned ; if just spawned, skip to next record
048FB3             0070*   ; check sprite_alive bit to see if tile is active
048FB3 FD CB 1D 76 0071*       bit sprite_alive,(iy+sprite_collisions)
048FB7 C8          0072*       ret z ; end of stack so we're done
048FB8             0073*   ; otherwise we prepare to move the tile
048FB8 FD 27 1A    0074*       ld hl,(iy+tile_move_program) ; load the behavior subroutine address
048FBB             0075*       CALL_HL
048FBB 01 C1 8F 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
048FBF C5          0002*M1     push bc ; which constitutes the return address
048FC0 E9          0003*M1     jp (hl) ; Jump to the address in HL
048FC1             0076*    ; get back stack pointer and loop
048FC1             0077*   @next_record:
048FC1 FD 2A 03 8C 0078*       ld iy,(tile_stack_pointer)
       04          
048FC6 ED 33 03    0079*       lea iy,iy+3 ; next tile stack record
048FC9 C3 99 8F 04 0080*       jp @move_loop ; loop until we've checked all the records
048FCD             0081*   @just_spawned:
048FCD FD CB 16 BE 0082*       res 7,(iy+tile_type) ; clear just spawned flag
048FD1 C3 C1 8F 04 0083*       jp @next_record
048FD5             0084*   ; end move_tiles
048FD5             0085*   
048FD5             0086*   draw_active_tile:
048FD5 FD 27 17    0087*       ld hl,(iy+tile_base_bufferId)
048FD8 FD 7E 28    0088*       ld a,(iy+tile_frame)
048FDB 85          0089*       add a,l ; TODO: with a little work we could make all tile base buffer ids align to 256
048FDC 6F          0090*       ld l,a
048FDD 3E 00       0091*       ld a,0 ; preserve carry
048FDF 8C          0092*       adc a,h
048FE0 67          0093*       ld h,a
048FE1 CD 38 1B 04 0094*       call vdu_buff_select ; buffer id of animation frame
048FE5 FD 07 01    0095*       ld bc,(iy+tile_x)
048FE8 FD 17 04    0096*       ld de,(iy+tile_y)
048FEB CD 3C 1F 04 0097*       call vdu_plot_bmp168
048FEF C9          0098*       ret
048FF0             0099*   ; end draw_active_tile
048FF0             0100*   
048FF0             0101*   ; create a new sprite at the same location as the current tile
048FF0             0102*   ; inputs: hl = pointer to new sprite default settings, tile_table_pointer = current tile
048FF0             0103*   ;         ix = pointer to sprite group, b = number of records in sprite group
048FF0             0104*   spawn_sprite_from_tile:
048FF0 E5          0105*       push hl ; back up pointer to new sprite defaults
048FF1 CD 14 96 04 0106*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
048FF5 E1          0107*       pop hl ; restore pointer to new sprite defaults
048FF6 D0          0108*       ret nc ; no carry means no free sprite slots, so we go home
048FF7             0109*   ; copy default settings to new sprite
048FF7 DD E5       0110*       push ix ; back up pointer to new sprite record
048FF9 ED 32 16    0111*       lea ix,ix+sprite_definitions ; bump pointer to copy to
048FFC DD E5       0112*       push ix ; pointer to default sprite settings
048FFE D1          0113*       pop de ; address to copy to
048FFF 01 2A 00 00 0114*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
049003 ED B0       0115*       ldir ; copies defaults to new sprite record
049005 DD E1       0116*       pop ix ; restore pointer to new sprite record
049007             0117*   ; copy sprite position from existing tile
049007 FD 2A 06 8C 0118*       ld iy,(tile_table_pointer) ; get existing tile record
       04          
04900C FD 27 01    0119*       ld hl,(iy+tile_x)
04900F DD 2F 01    0120*       ld (ix+sprite_x),hl
049012 FD 27 04    0121*       ld hl,(iy+tile_y)
049015 DD 2F 04    0122*       ld (ix+sprite_y),hl
049018             0123*   ; return to caller
049018 DD CB 16 FE 0124*       set 7,(ix+sprite_type) ; set just spawned flag
04901C DD CB 1D F6 0125*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
049020 37          0126*       scf ; set carry flag to indicate success
049021 C9          0127*       ret
049022             0128*   ; end spawn_sprite_from_tile
049022             0129*   
049022             0130*   ; create a new tile at the same location as the current tile
049022             0131*   ; inputs: tile_table_pointer = current tile
049022             0132*   spawn_active_tile_from_tile:
049022             0133*   ; copy default settings to new tile
049022 DD 2A 06 8C 0134*       ld ix,(tile_table_pointer) ; get existing tile record
       04          
049027 ED 32 16    0135*       lea ix,ix+tile_definitions ; bump pointer to copy to
04902A DD E5       0136*       push ix ; pointer to default tile settings
04902C D1          0137*       pop de ; address to copy to
04902D 01 2A 00 00 0138*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
049031 ED B0       0139*       ldir ; copies defaults to new tile record
049033 DD 2A 06 8C 0140*       ld ix,(tile_table_pointer) ; restore pointer to new tile record
       04          
049038 C9          0141*       ret
049039             0142*   ; end spawn_active_tile_from_tile
049039             0068        include "tile_crater.inc"
049039 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
049100             0002*   crater_defaults:
049100 10          0003*       db tile_crater          ; type
049101 05 01 00    0004*       dl BUF_EXPLOSION_A      ; base_bufferId
049104 1C 91 04    0005*       dl move_crater          ; move_program
049107 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
049108 10          0007*       db 16                   ; dim_x
049109 10          0008*       db 16                   ; dim_y
04910A 01          0009*       db 1                    ; num_orientations
04910B 04          0010*       db 4                    ; num_animations
04910C 05          0011*       db 5	                ; animation
04910D 08          0012*       db 8                    ; animation_timer
04910E 00          0013*       db 0                    ; move_timer
04910F 00          0014*       db 0                    ; move_step
049110 00          0015*       db 0                    ; points
049111 00          0016*       db 0                    ; shield_damage
049112 00          0017*       db 0                    ; frame
049113             0018*   
049113             0019*   activate_crater:
049113 21 00 91 04 0020*       ld hl,crater_defaults
049117 CD 22 90 04 0021*       call spawn_active_tile_from_tile
04911B             0022*   ; other specific initialization
04911B C9          0023*       ret
04911C             0024*   ; end activate_crater
04911C             0025*   
04911C             0026*   move_crater:
04911C CD 81 8F 04 0027*       call move_active_tile
049120 CA 83 8C 04 0028*       jp z,table_deactivate_tile
049124             0029*   ; do animation
049124 FD 35 23    0030*       dec (iy+tile_animation_timer)
049127 C0          0031*       ret nz ; not time to animate
049128 FD 35 22    0032*       dec (iy+sprite_animation) ; check whether time to transition to crater
04912B CC 41 91 04 0033*       call z,@make_crater
04912F 3E 08       0034*       ld a,8
049131 FD 77 23    0035*       ld (iy+tile_animation_timer),a
049134 FD 7E 28    0036*       ld a,(iy+tile_frame)
049137 3C          0037*       inc a
049138 E6 03       0038*       and %00000011 ; modulo 4
04913A FD 77 28    0039*       ld (iy+tile_frame),a
04913D C3 D5 8F 04 0040*       jp draw_active_tile
049141             0041*   @make_crater:
049141 21 01 01 00 0042*       ld hl,BUF_CRATER_0
049145 FD 2F 17    0043*       ld (iy+tile_base_bufferId),hl
049148 3E FF       0044*       ld a,-1 ; will wrap to zero on return
04914A FD 77 28    0045*       ld (iy+tile_frame),a
04914D C9          0046*       ret
04914E             0047*   ; end move_crater
04914E             0069        include "tile_electrode.inc"
04914E FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
049200             0002*   electrode_defaults:
049200 09          0003*       db 9                    ; type
049201 00 01 00    0004*       dl BUF_CRATER           ; base_bufferId
049204 1D 92 04    0005*       dl move_electrode       ; move_program
049207 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
049208 10          0007*       db 16                   ; dim_x
049209 10          0008*       db 16                   ; dim_y
04920A 01          0009*       db 1                    ; num_orientations
04920B 01          0010*       db 1                    ; num_animations
04920C 00          0011*       db 0                    ; animation
04920D 00          0012*       db 0                    ; animation_timer
04920E 00          0013*       db 0                    ; move_timer
04920F 00          0014*       db 0                    ; move_step
049210 05          0015*       db 5                    ; points
049211 FC          0016*       db -4                   ; shield_damage
049212 00          0017*       db 0                    ; frame
049213             0018*   
049213             0019*   activate_electrode:
049213 21 00 92 04 0020*       ld hl,electrode_defaults
049217             0021*   ; get next available active tile id
049217 CD BC 8C 04 0022*       call spawn_active_tile
04921B D0          0023*       ret nc ; no carry means no free active tile slots, so we go home
04921C             0024*   ; other specific initialization
04921C             0025*   
04921C C9          0026*       ret
04921D             0027*   ; end activate_electrode
04921D             0028*   
04921D             0029*   move_electrode:
04921D CD 81 8F 04 0030*       call move_active_tile
049221 CA 83 8C 04 0031*       jp z,table_deactivate_tile
049225 CD ED 26 04 0032*       call check_enemy_collision_player
049229 C2 35 92 04 0033*       jp nz,@laser ; no collision so check laser collision
04922D CD 1F 83 04 0034*       call update_shields
049231 C3 43 92 04 0035*       jp kill_electrode
049235             0036*   @laser:
049235 CD E1 26 04 0037*       call check_enemy_collision_laser
049239 C0          0038*       ret nz ; no collision so we're done
04923A CD 2D 81 04 0039*       call update_score
04923E C3 43 92 04 0040*       jp kill_electrode
049242 C9          0041*       ret
049243             0042*   
049243             0043*   kill_electrode:
049243             0044*   ; initialize pointers
049243 2A 03 8C 04 0045*       ld hl,(tile_stack_pointer)
049247 E5          0046*       push hl ; back up pointer to this stack record
049248 FD E5       0047*       push iy ; back up pointer to this tile record
04924A DD 21 00 89 0048*       ld ix,tile_stack ; set ix to first record in table
       04          
04924F FD 17 04    0049*       ld de,(iy+tile_y) ; get the tile y position
049252             0050*   @check_loop:
049252 DD 22 A5 92 0051*       ld (@tile_stack_pointer),ix ; update stack pointer
       04          
049257 DD 7E 02    0052*       ld a,(ix+2)
04925A B7          0053*       or a ; will be zero if at end of stack
04925B CA 9A 92 04 0054*       jp z,@done ; end of stack so we're done
04925F             0055*   ; point ix to tile record
04925F DD 37 00    0056*       ld ix,(ix) ; ix points to the current tile record
049262             0057*   ; check top bit of tile_type to see if tile is just spawned
049262 DD CB 16 7E 0058*       bit 7,(ix+tile_type)
049266 C2 8E 92 04 0059*       jp nz,@next_record ; if just spawned, skip to next record
04926A             0060*   ; check sprite_alive bit to see if tile is active
04926A DD CB 1D 76 0061*       bit sprite_alive,(ix+sprite_collisions)
04926E C8          0062*       ret z ; end of stack so we're done
04926F             0063*   ; check tile type
04926F DD 7E 16    0064*       ld a,(ix+tile_type)
049272 FE 0A       0065*       cp tile_lightning ; check if tile is lightning
049274 C2 8E 92 04 0066*       jp nz,@next_record ; if not an electrode, skip to next record
049278             0067*   ; check tile position
049278 DD 27 04    0068*       ld hl,(ix+tile_y)
04927B B7          0069*       or a ; clear carry
04927C ED 52       0070*       sbc hl,de
04927E C2 8E 92 04 0071*       jp nz,@next_record ; if not at the same position, skip to next record
049282             0072*   ; deactivate tile and replace with crater
049282 FD 2A A5 92 0073*       ld iy,(@tile_stack_pointer)
       04          
049287 FD 37 00    0074*       ld iy,(iy) ; pointer to tile record to kill
04928A CD 13 91 04 0075*       call activate_crater
04928E             0076*    ; get back stack pointer and loop
04928E             0077*   @next_record:
04928E DD 2A A5 92 0078*       ld ix,(@tile_stack_pointer)
       04          
049293 ED 32 03    0079*       lea ix,ix+3 ; next tile stack record
049296 C3 52 92 04 0080*       jp @check_loop ; loop until we've checked all the records
04929A             0081*   @done:
04929A FD E1       0082*       pop iy ; restore pointer to this tile record
04929C E1          0083*       pop hl ; restore pointer to this stack record
04929D 22 03 8C 04 0084*       ld (tile_stack_pointer),hl
0492A1 C3 13 91 04 0085*       jp activate_crater
0492A5 00 89 04    0086*   @tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
0492A8             0087*   ; end move_electrode
0492A8             0070        include "tile_lightning.inc"
0492A8 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
049300             0002*   lightning_defaults:
049300 0A          0003*       db tile_lightning       ; type
049301 4C 01 00    0004*       dl BUF_LIGHTNING_H_0    ; base_bufferId
049304 1D 93 04    0005*       dl move_lightning       ; move_program
049307 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
049308 10          0007*       db 16                   ; dim_x
049309 10          0008*       db 16                   ; dim_y
04930A 01          0009*       db 1                    ; num_orientations
04930B 02          0010*       db 2                    ; num_animations
04930C 00          0011*       db 0                    ; animation
04930D 08          0012*       db 8                    ; animation_timer
04930E 00          0013*       db 0                    ; move_timer
04930F 00          0014*       db 0                    ; move_step
049310 00          0015*       db 0                    ; points
049311 FF          0016*       db -1                    ; shield_damage
049312 00          0017*       db 0                    ; frame
049313             0018*   
049313             0019*   activate_lightning:
049313 21 00 93 04 0020*       ld hl,lightning_defaults
049317             0021*   ; get next available active tile id
049317 CD BC 8C 04 0022*       call spawn_active_tile
04931B D0          0023*       ret nc ; no carry means no free active tile slots, so we go home
04931C             0024*   ; other specific initialization
04931C C9          0025*       ret
04931D             0026*   ; end activate_lightning
04931D             0027*   
04931D             0028*   move_lightning:
04931D CD 81 8F 04 0029*       call move_active_tile
049321 CA 83 8C 04 0030*       jp z,table_deactivate_tile
049325 CD E1 26 04 0031*       call check_enemy_collision_laser ; kills laser on collision but does not die
049329 CD ED 26 04 0032*       call check_enemy_collision_player
04932D C2 35 93 04 0033*       jp nz,@animate ; no collision so do animation
049331 CD 1F 83 04 0034*       call update_shields
049335             0035*   @animate:
049335 FD 35 23    0036*       dec (iy+tile_animation_timer)
049338 C0          0037*       ret nz ; not time to animate
049339             0038*   ; reset the animation timer and bump animation
049339 3E 08       0039*       ld a,8
04933B FD 77 23    0040*       ld (iy+tile_animation_timer),a
04933E FD 7E 28    0041*       ld a,(iy+tile_frame)
049341 3C          0042*       inc a
049342 E6 01       0043*       and %00000001 ; modulo 1
049344 FD 77 28    0044*       ld (iy+tile_frame),a
049347 C3 D5 8F 04 0045*       jp draw_active_tile
04934B C9          0046*       ret
04934C             0071        include "tile_pad_small.inc"
04934C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
049400             0002*   pad_small_defaults:
049400 01          0003*       db tile_pad_small       ; type
049401 74 01 00    0004*       dl BUF_TILE_PAD_0       ; base_bufferId
049404 22 94 04    0005*       dl move_pad_small       ; move_program
049407 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
049408 10          0007*       db 16                   ; dim_x
049409 10          0008*       db 16                   ; dim_y
04940A 01          0009*       db 1                    ; num_orientations
04940B 01          0010*       db 1                    ; num_animations
04940C 00          0011*       db 0                    ; animation
04940D 10          0012*       db 16                   ; animation_timer
04940E 18          0013*       db 24                   ; move_timer
04940F 00          0014*       db 0                    ; move_step
049410 05          0015*       db 5                    ; points
049411 00          0016*       db 0                    ; shield_damage
049412 00          0017*       db 0                    ; frame
049413             0018*   
049413             0019*   activate_pad_small:
049413 21 00 94 04 0020*       ld hl,pad_small_defaults
049417             0021*   ; get next available active tile id
049417 CD BC 8C 04 0022*       call spawn_active_tile
04941B D0          0023*       ret nc ; no carry means no free active tile slots, so we go home
04941C             0024*   ; other specific initialization
04941C 3E 40       0025*       ld a,64
04941E FD 77 24    0026*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
049421 C9          0027*       ret
049422             0028*   ; end activate_pad_small
049422             0029*   
049422             0030*   move_pad_small:
049422 CD 81 8F 04 0031*       call move_active_tile
049426 CA 83 8C 04 0032*       jp z,table_deactivate_tile
04942A CD E1 26 04 0033*       call check_enemy_collision_laser
04942E CA 5F 94 04 0034*       jp z,kill_pad_small
049432             0035*   ; do animation
049432 FD 35 23    0036*       dec (iy+tile_animation_timer)
049435 C2 4B 94 04 0037*       jp nz,@F
049439 3E 10       0038*       ld a,16
04943B FD 77 23    0039*       ld (iy+tile_animation_timer),a
04943E FD 7E 28    0040*       ld a,(iy+tile_frame)
049441 3C          0041*       inc a
049442 E6 07       0042*       and %00000111 ; modulo 8
049444 FD 77 28    0043*       ld (iy+tile_frame),a
049447 CD D5 8F 04 0044*       call draw_active_tile
04944B             0045*   @@: ; check whether it is time to spawn a seeker
04944B FD 35 24    0046*       dec (iy+tile_move_timer)
04944E C0          0047*       ret nz
04944F             0048*   ; spwan a seeker
04944F CD 14 29 04 0049*       call enemy_spawn_seeker
049453             0050*       ; fall through to reset move timer
049453             0051*   pad_small_reset_move_timer:
049453 CD AE 09 04 0052*       call rand_8     ; snag a random number
049457 E6 1F       0053*       and %00011111   ; keep only 5 lowest bits (max 31)
049459 C6 40       0054*       add a,64 ; range is now 64-127
04945B FD 77 24    0055*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
04945E C9          0056*       ret
04945F             0057*   
04945F             0058*   kill_pad_small:
04945F CD 2D 81 04 0059*       call update_score
049463 C3 13 91 04 0060*       jp activate_crater
049467             0061*   ; end move_pad_small
049467             0072        include "tile_turret_fireball.inc"
049467 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
049500             0002*   turret_fireball_defaults:
049500 02          0003*       db enemy_ground         ; type
049501 7C 01 00    0004*       dl BUF_TURRET_000       ; base_bufferId
049504 22 95 04    0005*       dl move_turret_fireball ; move_program
049507 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
049508 10          0007*       db 16                   ; dim_x
049509 10          0008*       db 16                   ; dim_y
04950A 20          0009*       db 32                   ; num_orientations
04950B 01          0010*       db 1                    ; num_animations
04950C 00          0011*       db 0                    ; animation
04950D 00          0012*       db 0                    ; animation_timer
04950E 18          0013*       db 24                   ; move_timer
04950F 00          0014*       db 0                    ; move_step
049510 05          0015*       db 5                    ; points
049511 00          0016*       db 0                    ; shield_damage
049512 00          0017*       db 0                    ; frame
049513             0018*   
049513             0019*   activate_turret_fireball:
049513 21 00 95 04 0020*       ld hl,turret_fireball_defaults
049517             0021*   ; get next available active tile id
049517 CD BC 8C 04 0022*       call spawn_active_tile
04951B D0          0023*       ret nc ; no carry means no free active tile slots, so we go home
04951C             0024*   ; other specific initialization
04951C 3E 40       0025*       ld a,64
04951E FD 77 24    0026*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
049521 C9          0027*       ret
049522             0028*   ; end activate_turret_fireball
049522             0029*   
049522             0030*   move_turret_fireball:
049522 CD 81 8F 04 0031*       call move_active_tile
049526 CA 83 8C 04 0032*       jp z,table_deactivate_tile
04952A CD E1 26 04 0033*       call check_enemy_collision_laser
04952E CA 61 95 04 0034*       jp z,kill_turret_fireball
049532             0035*   ; target player
049532 CD 2B 88 04 0036*       call tile_orientation_to_player
049536 21 00 04 00 0037*       ld hl,speed_fireball
04953A 22 58 88 04 0038*       ld (Vp),hl ; param for targeting_computer
04953E CD 70 88 04 0039*       call targeting_computer
049542 FD 2F 10    0040*       ld (iy+tile_heading),hl ; save active tile heading
049545 CD 5A 8D 04 0041*       call tile_frame_heading
049549 CD D5 8F 04 0042*       call draw_active_tile
04954D             0043*   ; check whether it is time to spawn a fireball
04954D FD 35 24    0044*       dec (iy+tile_move_timer)
049550 C0          0045*       ret nz
049551             0046*   ; spwan a fireball
049551 CD 13 28 04 0047*       call enemy_spawn_fireball
049555             0048*       ; fall through to reset move timer
049555             0049*   turret_fireball_reset_move_timer:
049555 CD AE 09 04 0050*       call rand_8     ; snag a random number
049559 E6 1F       0051*       and %00011111   ; keep only 5 lowest bits (max 31)
04955B C6 18       0052*       add a,24 ; range is now 24-55
04955D FD 77 24    0053*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
049560 C9          0054*       ret
049561             0055*   
049561             0056*   kill_turret_fireball:
049561 CD 2D 81 04 0057*       call update_score
049565 C3 13 91 04 0058*       jp activate_crater
049569             0059*   ; end move_turret_fireball
049569             0073        include "sprites.inc"
049569             0001*   ; sprite_type
049569             0002*   enemy_dead: equ 0
049569             0003*   enemy_air: equ 1
049569             0004*   enemy_ground: equ 2
049569             0005*   enemy_projectile: equ 3
049569             0006*   explosion: equ 4
049569             0007*   player: equ 5
049569             0008*   player_air: equ 6
049569             0009*   player_ground: equ 7
049569             0010*   
049569             0011*   ; ###### SPRITE TABLE FIELD INDICES ######
049569             0012*   table_record_size:         equ  64; 40 bytes ;40 bytes per sprite record
049569             0013*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
049569             0014*   ; sprite state variables
049569             0015*   sprite_state_variables:    equ   1; beginning of sprite state variables
049569             0016*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
049569             0017*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
049569             0018*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
049569             0019*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
049569             0020*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
049569             0021*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
049569             0022*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
049569             0023*   ; sprite definition variables
049569             0024*   sprite_definitions:        equ  22; beginnning of sprite definition variables
049569             0025*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
049569             0026*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
049569             0027*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
049569             0028*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
049569             0029*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
049569             0030*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
049569             0031*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
049569             0032*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
049569             0033*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
049569             0034*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
049569             0035*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
049569             0036*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
049569             0037*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
049569             0038*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
049569             0039*   sprite_frame:              equ  40; 1 bytes ;current animation frame
049569             0040*   
049569             0041*   ; ###### SPRITE TABLE VARIABLES ######
049569             0042*   ; maximum number of sprites
049569             0043*   table_max_records: equ 16 ; it can handle more but this is pushing it
049569             0044*   ; table_total_bytes: equ table_end-table_start_variables
049569             0045*   
049569             0046*   ; pointer to top address of current record, initialized to table_base
049569 5E A0 04    0047*   table_pointer: dl table_base
04956C             0048*   
04956C             0049*   ; flag indicating collision with screen edge
04956C             0050*   ; uses orientation codes to specify which edge(s)
04956C 00          0051*   sprite_screen_edge: db #00
04956D             0052*   
04956D             0053*   ; origin_top: equ 48
04956D             0054*   origin_top: equ 0
04956D             0055*   origin_left: equ 128
04956D             0056*   field_top: equ 0
04956D             0057*   field_bottom: equ 383-origin_top
04956D             0058*   field_left: equ 0
04956D             0059*   field_right: equ 255
04956D             0060*   sprite_top: equ field_top + 0
04956D             0061*   sprite_bottom: equ field_bottom-16
04956D             0062*   sprite_left: equ field_left
04956D             0063*   sprite_right: equ field_right-16
04956D             0064*   
04956D             0065*   tile_bottom: equ 384
04956D             0066*   
04956D             0067*   ; ######### COLLISION SPRITE PARAMETERS ##########
04956D             0068*   ; integer coordinates are all that are needed for collision calculations
04956D 00          0069*   collision_x: db 0x00
04956E 00          0070*   collision_y: db 0x00
04956F 00          0071*   collision_dim_x: db 0x00
049570 00          0072*   collision_dim_y: db 0x00
049571             0073*   
049571             0074*   ; scratch variables
049571 00          0075*   x: db 0x00 ; 8-bit signed integer
049572 00          0076*   y: db 0x00 ; 8-bit signed integer
049573 00 00 00    0077*   x0: dl 0x000000 ; 16.8 signed fixed place
049576 00 00 00    0078*   y0: dl 0x000000 ; 16.8 signed fixed place
049579 00 00 00    0079*   incx1: dl 0x000000 ; 16.8 signed fixed place
04957C 00 00 00    0080*   incy1: dl 0x000000 ; 16.8 signed fixed place
04957F 00 00 00    0081*   incx2: dl 0x000000 ; 16.8 signed fixed place
049582 00 00 00    0082*   incy2: dl 0x000000 ; 16.8 signed fixed place
049585             0083*   
049585             0084*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
049585 00 00 00    0085*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
049588 00 00 00    0086*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
04958B 00 00 00    0087*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
04958E             0088*   
04958E             0089*   table_init:
04958E             0090*   ; clear the sprite table
04958E AF          0091*       xor a ; write zeroes to sprite table
04958F 21 5E A0 04 0092*       ld hl,table_base ; address to copy from
049593 01 00 05 00 0093*       ld bc,table_end-table_base ; number of bytes to clear
049597 CD 31 07 04 0094*       call clear_mem
04959B             0095*   ; write sprite ids
04959B DD 21 5E A0 0096*       ld ix,table_base
       04          
0495A0 AF          0097*       xor a ; sprite id
0495A1 0E 00       0098*       ld c,0 ; sprite type
0495A3 06 14       0099*       ld b,table_num_records ; loop counter
0495A5             0100*   @loop:
0495A5 DD 77 00    0101*       ld (ix+sprite_id),a
0495A8 DD 71 16    0102*       ld (ix+sprite_type),c
0495AB ED 32 40    0103*       lea ix,ix+table_record_size
0495AE 3C          0104*       inc a
0495AF 10 F4       0105*       djnz @loop
0495B1 C9          0106*       ret
0495B2             0107*   ; end table_init
0495B2             0108*   
0495B2             0109*   ; deactivate the sprite with the given id
0495B2             0110*   ; inputs: iy set to sprite record
0495B2             0111*   ; outputs: nothing
0495B2             0112*   ; destroys: a,hl
0495B2             0113*   table_deactivate_sprite:
0495B2 FD 7E 00    0114*       ld a,(iy+sprite_id) ; get spriteId
0495B5 CD 00 20 04 0115*       call vdu_sprite_select ; select sprite
0495B9 CD 84 20 04 0116*       call vdu_sprite_hide
0495BD FD CB 1D B6 0117*       res sprite_alive,(iy+sprite_collisions)
0495C1 FD CB 1D BE 0118*       res sprite_just_died,(iy+sprite_collisions)
0495C5 C9          0119*       ret
0495C6             0120*   ; end table_deactivate_sprite
0495C6             0121*   
0495C6             0122*   sprites_init:
0495C6             0123*   ; initialize sprites
0495C6 CD 34 21 04 0124*   	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
0495CA AF          0125*   	xor a ; loop counter / sprite id
0495CB             0126*   @sprite_loop:
0495CB F5          0127*   	push af ; save loop counter / sprite id
0495CC CD 00 20 04 0128*   	call vdu_sprite_select
0495D0 21 00 01 00 0129*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
0495D4 CD 55 21 04 0130*   	call vdu_sprite_add_buff
0495D8 F1          0131*   	pop af ; restore loop counter / sprite id
0495D9 3C          0132*       inc a
0495DA FE 14       0133*       cp table_num_records
0495DC C2 CB 95 04 0134*       jp nz,@sprite_loop
0495E0 CD 34 20 04 0135*   	call vdu_sprite_activate
0495E4             0136*   
0495E4             0137*   ; define player sprite
0495E4 3A 5E A1 04 0138*   	ld a,(player_begin+sprite_id)
0495E8 CD 00 20 04 0139*   	call vdu_sprite_select
0495EC CD 13 20 04 0140*   	call vdu_sprite_clear_frames
0495F0 21 6F 01 00 0141*   	ld hl,BUF_SHIP_0L
0495F4 01 03 00 00 0142*   	ld bc,3 ; three bitmaps for player ship
0495F8             0143*   @sprite_player_loop:
0495F8 C5          0144*   	push bc
0495F9 E5          0145*   	push hl
0495FA CD 55 21 04 0146*   	call vdu_sprite_add_buff
0495FE E1          0147*   	pop hl
0495FF 23          0148*   	inc hl
049600 C1          0149*   	pop bc
049601 10 F5       0150*   	djnz @sprite_player_loop
049603             0151*   
049603             0152*   ; define player weapon sprites
049603 CD AF 85 04 0153*       call init_player_laser
049607             0154*   
049607             0155*   ; define enemy sprites
049607 CD C7 29 04 0156*       call init_enemy_seekers
04960B CD 8A 28 04 0157*       call init_enemy_fireballs
04960F             0158*   
04960F             0159*   ; define explosion sprites
04960F CD 86 2A 04 0160*       call init_explosions
049613 C9          0161*       ret
049614             0162*   ; end sprites_init
049614             0163*   
049614             0164*   ; gets the next available sprite id for a particular sprite group
049614             0165*   ; inputs; ix = pointer to sprite group, b = number of records in sprite group
049614             0166*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
049614             0167*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
049614             0168*   ; destroys: a,b,c,hl,ix
049614             0169*   table_get_next_id:
049614             0170*   @loop:
049614 DD CB 1D 76 0171*       bit sprite_alive,(ix+sprite_collisions)
049618 28 07       0172*       jr z,@found
04961A ED 32 40    0173*       lea ix,ix+table_record_size
04961D 10 F5       0174*       djnz @loop
04961F             0175*   @notfound:
04961F AF          0176*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
049620 C9          0177*       ret
049621             0178*   @found:
049621             0179*   ; return sprite id
049621 DD 7E 00    0180*       ld a,(ix+sprite_id)
049624 37          0181*       scf ; sets carry flag indicating we found a free sprite
049625 C9          0182*       ret ; done
049626             0183*   ; end table_get_next_id
049626             0184*   
049626             0185*   ; create a new sprite at the same location as an existing sprite
049626             0186*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
049626             0187*   ;         ix = pointer to sprite group, b = number of records in sprite group
049626             0188*   spawn_sprite_from_sprite:
049626 E5          0189*       push hl ; back up pointer to new sprite defaults
049627 CD 14 96 04 0190*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
04962B E1          0191*       pop hl ; restore pointer to new sprite defaults
04962C D0          0192*       ret nc ; no carry means no free sprite slots, so we go home
04962D             0193*   ; copy default settings to new sprite
04962D DD E5       0194*       push ix ; back up pointer to new sprite record
04962F ED 32 16    0195*       lea ix,ix+sprite_definitions ; bump pointer to copy to
049632 DD E5       0196*       push ix ; pointer to default sprite settings
049634 D1          0197*       pop de ; address to copy to
049635 01 2A 00 00 0198*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
049639 ED B0       0199*       ldir ; copies defaults to new sprite record
04963B DD E1       0200*       pop ix ; restore pointer to new sprite record
04963D             0201*   ; copy sprite position from existing sprite
04963D FD 2A 69 95 0202*       ld iy,(table_pointer) ; get existing sprite record
       04          
049642 FD 27 01    0203*       ld hl,(iy+sprite_x)
049645 DD 2F 01    0204*       ld (ix+sprite_x),hl
049648 FD 27 04    0205*       ld hl,(iy+sprite_y)
04964B DD 2F 04    0206*       ld (ix+sprite_y),hl
04964E             0207*   ; return to caller
04964E DD CB 16 FE 0208*       set 7,(ix+sprite_type) ; set just spawned flag
049652 DD CB 1D F6 0209*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
049656 37          0210*       scf ; set carry flag to indicate success
049657 C9          0211*       ret
049658             0212*   ; end spawn_sprite_from_sprite
049658             0213*   
049658             0214*   ; call the behavior subroutines for a specified sprite group
049658             0215*   ; inputs: iy = pointer to sprite group, b = number of records in sprite group
049658             0216*   move_sprite_group:
049658 C5          0217*       push bc ; backup loop counter
049659 FD E5       0218*       push iy ; backup table pointer
04965B             0219*   @move_loop:
04965B FD 22 69 95 0220*       ld (table_pointer),iy ; update table pointer
       04          
049660 C5          0221*       push bc ; backup loop counter
049661             0222*   ; check top bit of sprite_type to see if sprite is just spawned
049661 FD CB 16 7E 0223*       bit 7,(iy+sprite_type)
049665 C2 9A 96 04 0224*       jp nz,@next_record ; if just spawned, skip to next record
049669             0225*   ; check sprite_just_died bit
049669 FD CB 1D 7E 0226*       bit sprite_just_died,(iy+sprite_collisions)
04966D C2 D1 96 04 0227*       jp nz,@sprite_died ; if just died, deactivate sprite
049671             0228*   ; check sprite_alive bit to see if sprite is active
049671 FD CB 1D 76 0229*       bit sprite_alive,(iy+sprite_collisions)
049675 CA 9A 96 04 0230*       jp z,@next_record ; ... skip to next record
049679             0231*   ; otherwise move the sprite
049679 FD 27 1A    0232*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
04967C             0233*       CALL_HL ; run the behavior subroutine
04967C 01 82 96 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
049680 C5          0002*M1     push bc ; which constitutes the return address
049681 E9          0003*M1     jp (hl) ; Jump to the address in HL
049682 FD 7E 00    0234*       ld a,(iy+sprite_id) ; get spriteId
049685 CD 00 20 04 0235*       call vdu_sprite_select ; select sprite
049689 FD 7E 28    0236*       ld a,(iy+sprite_frame)
04968C CD 63 20 04 0237*       call vdu_sprite_select_frame
049690 FD 07 01    0238*       ld bc,(iy+sprite_x)
049693 FD 17 04    0239*       ld de,(iy+sprite_y)
049696 CD CC 20 04 0240*       call vdu_sprite_move_abs168
04969A             0241*   ; fall through to @next_record
04969A             0242*   @next_record:
04969A ED 33 40    0243*       lea iy,iy+table_record_size
04969D AF          0244*       xor a ; clears carry flag
04969E 32 6C 95 04 0245*       ld (sprite_screen_edge),a ; clear screen edge collision flag
0496A2 C1          0246*       pop bc ; get back our loop counter
0496A3 10 B6       0247*       djnz @move_loop ; loop until we've checked all the records
0496A5             0248*   ; reset all just spawned flags
0496A5 FD E1       0249*       pop iy ; get back table pointer
0496A7 C1          0250*       pop bc ; get back loop counter
0496A8             0251*   @reset_just_spawned:
0496A8 C5          0252*       push bc ; back up loop counter
0496A9 FD CB 16 7E 0253*       bit 7,(iy+sprite_type) ; check if just spawned
0496AD CA CA 96 04 0254*       jp z,@F
0496B1 FD CB 16 BE 0255*       res 7,(iy+sprite_type) ; clear just spawned flag
0496B5 FD 7E 00    0256*       ld a,(iy+sprite_id)
0496B8 CD 00 20 04 0257*       call vdu_sprite_select
0496BC FD 07 01    0258*       ld bc,(iy+sprite_x)
0496BF FD 17 04    0259*       ld de,(iy+sprite_y)
0496C2 CD CC 20 04 0260*       call vdu_sprite_move_abs168
0496C6 CD 76 20 04 0261*       call vdu_sprite_show
0496CA             0262*   @@:
0496CA ED 33 40    0263*       lea iy,iy+table_record_size
0496CD C1          0264*       pop bc ; get back loop counter
0496CE 10 D8       0265*       djnz @reset_just_spawned
0496D0 C9          0266*       ret
0496D1             0267*   @sprite_died:
0496D1 CD B2 95 04 0268*       call table_deactivate_sprite
0496D5 C3 9A 96 04 0269*       jp @next_record
0496D9             0270*   ; end move_sprite_group
0496D9             0271*   
0496D9             0272*   ; compute a sprite's new position based on its component x,y velocities
0496D9             0273*   ; with screen boundary checking and update its sprite table record accordingly
0496D9             0274*   ; inputs: table_pointer set to sprite record
0496D9             0275*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
0496D9             0276*   ; destroys: everything
0496D9             0277*   ; note: actual rendering of sprite must be handled by caller
0496D9             0278*   move_sprite:
0496D9 FD 2A 69 95 0279*       ld iy,(table_pointer)
       04          
0496DE             0280*   ; x-axis movement
0496DE FD 27 01    0281*       ld hl,(iy+sprite_x)
0496E1 FD 17 07    0282*       ld de,(iy+sprite_xvel)
0496E4 19          0283*       add hl,de
0496E5 FD 2F 01    0284*       ld (iy+sprite_x),hl
0496E8             0285*   ; y-axis movement
0496E8 FD 27 04    0286*       ld hl,(iy+sprite_y)
0496EB FD 17 0A    0287*       ld de,(iy+sprite_yvel)
0496EE 19          0288*       add hl,de
0496EF FD 2F 04    0289*       ld (iy+sprite_y),hl
0496F2             0290*   ; detect screen edge collisions
0496F2 AF          0291*       xor a ; reset screen edge collision flag and clear carry
0496F3 32 6C 95 04 0292*       ld (sprite_screen_edge),a
0496F7             0293*   ; y-axis first since we already have it in hl
0496F7 11 00 00 00 0294*       ld de,-sprite_top*256
0496FB ED 5A       0295*       adc hl,de
0496FD FA 27 97 04 0296*       jp m,@top
049701 ED 52       0297*       sbc hl,de ; hl back to original value
049703 11 00 91 FE 0298*       ld de,-sprite_bottom*256
049707 ED 5A       0299*       adc hl,de
049709 F2 31 97 04 0300*       jp p,@bottom
04970D             0301*   @xaxis:
04970D FD 27 01    0302*       ld hl,(iy+sprite_x)
049710 11 00 00 00 0303*       ld de,-sprite_left*256
049714 ED 5A       0304*       adc hl,de
049716 FA 4C 97 04 0305*       jp m,@left
04971A ED 52       0306*       sbc hl,de ; hl back to original value
04971C 11 00 11 FF 0307*       ld de,-sprite_right*256
049720 ED 5A       0308*       adc hl,de
049722 F2 5A 97 04 0309*       jp p,@right
049726             0310*   ; no edge collisions so go home
049726 C9          0311*       ret
049727             0312*   @top:
049727 3E 08       0313*       ld a,collide_top
049729 21 00 00 00 0314*       ld hl,sprite_top*256
04972D C3 37 97 04 0315*       jp @collide_y
049731             0316*   @bottom:
049731 3E 04       0317*       ld a,collide_bottom
049733 21 00 6F 01 0318*       ld hl,sprite_bottom*256
049737             0319*   @collide_y:
049737 32 6C 95 04 0320*       ld (sprite_screen_edge),a
04973B FD 2F 04    0321*       ld (iy+sprite_y),hl
04973E             0322*   ; reverse y-axis velocity
04973E FD 27 0A    0323*       ld hl,(iy+sprite_yvel)
049741 CD 16 09 04 0324*       call neg_hlu
049745 FD 2F 0A    0325*       ld (iy+sprite_yvel),hl
049748             0326*   ; go check for x-axis collisions
049748 C3 0D 97 04 0327*       jp @xaxis
04974C             0328*   @left:
04974C 3A 6C 95 04 0329*       ld a,(sprite_screen_edge)
049750 F6 02       0330*       or a,collide_left
049752 21 00 00 00 0331*       ld hl,sprite_left*256
049756 C3 64 97 04 0332*       jp @collide_x
04975A             0333*   @right:
04975A 3A 6C 95 04 0334*       ld a,(sprite_screen_edge)
04975E F6 01       0335*       or a,collide_right
049760 21 00 EF 00 0336*       ld hl,sprite_right*256
049764             0337*   @collide_x:
049764 32 6C 95 04 0338*       ld (sprite_screen_edge),a
049768 FD 2F 01    0339*       ld (iy+sprite_x),hl
04976B             0340*   ; reverse x-axis velocity
04976B FD 27 07    0341*       ld hl,(iy+sprite_xvel)
04976E CD 16 09 04 0342*       call neg_hlu
049772 FD 2F 07    0343*       ld (iy+sprite_xvel),hl
049775             0344*   ; final collision flag to a and return
049775 3A 6C 95 04 0345*       ld a,(sprite_screen_edge)
049779 C9          0346*       ret
04977A             0347*   ; end move_sprite
04977A             0348*   
04977A             0349*   sprite_compute_velocities:
04977A FD 27 10    0350*       ld hl,(iy+sprite_heading)
04977D FD 17 0D    0351*       ld de,(iy+sprite_vel)
049780 CD A0 0B 04 0352*       call polar_to_cartesian
049784 FD 2A 69 95 0353*       ld iy,(table_pointer)
       04          
049789 FD 0F 07    0354*       ld (iy+sprite_xvel),bc ; save x-velocity component
04978C FD 1F 0A    0355*       ld (iy+sprite_yvel),de ; save y-velocity component
04978F C9          0356*       ret
049790             0357*   ; end sprite_compute_velocities
049790             0358*   
049790             0359*   ; compute animation frame based on sprite_animation and sprite_heading
049790             0360*   ; inputs: table_pointer set to sprite record
049790             0361*   ; outputs: a, sprite_frame set to animation frame
049790             0362*   ; destroys: a,hl
049790             0363*   sprite_frame_heading_animation:
049790 FD 7E 11    0364*       ld a,(iy+sprite_heading+1) ; we want the integer portion
049793 CB 3F       0365*       srl a ; divide integer portion by 8
049795 CB 3F       0366*       srl a
049797 CB 3F       0367*       srl a
049799 FD 66 22    0368*       ld h,(iy+sprite_animation)
04979C 2E 20       0369*       ld l,32 ; 32 orientation frames per animation
04979E ED 6C       0370*       mlt hl ; hl = offset from base animation
0497A0 85          0371*       add a,l ; modulo256 since sprite_frame is only 1 byte
0497A1 FD 77 28    0372*       ld (iy+sprite_frame),a
0497A4 C9          0373*       ret
0497A5             0374*   ; end sprite_frame_heading_animation
0497A5             0375*   
0497A5             0376*   ; compute animation frame based on sprite_heading
0497A5             0377*   ; inputs: table_pointer set to sprite record
0497A5             0378*   ; outputs: a, sprite_frame set to animation frame
0497A5             0379*   ; destroys: a,hl
0497A5             0380*   sprite_frame_heading:
0497A5 FD 7E 11    0381*       ld a,(iy+sprite_heading+1) ; we want the integer portion
0497A8 CB 3F       0382*       srl a ; divide integer portion by 8
0497AA CB 3F       0383*       srl a
0497AC CB 3F       0384*       srl a
0497AE FD 77 28    0385*       ld (iy+sprite_frame),a
0497B1 C9          0386*       ret
0497B2             0387*   ; end sprite_frame_heading
0497B2             0388*   
0497B2             0389*   ; load a sprite with animation bitmaps
0497B2             0390*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
0497B2             0391*   sprite_load_frames:
0497B2             0392*   ; back up input parameters
0497B2 E5          0393*       push hl ; base bufferId
0497B3 C5          0394*       push bc ; bc = number of frames
0497B4 CD 13 20 04 0395*       call vdu_sprite_clear_frames
0497B8 C1          0396*       pop bc ; bc = number of frames
0497B9 E1          0397*       pop hl ; = base bufferId
0497BA             0398*   @load_frames:
0497BA C5          0399*       push bc ; back up loop counter
0497BB E5          0400*       push hl ; back up base bufferId
0497BC CD 55 21 04 0401*       call vdu_sprite_add_buff
0497C0 E1          0402*       pop hl ; restore base bufferId
0497C1 23          0403*       inc hl ; bump it to the next frame
0497C2             0404*   ; decrement loop counter
0497C2 C1          0405*       pop bc
0497C3 0B          0406*       dec bc
0497C4 79          0407*       ld a,c
0497C5 B7          0408*       or a
0497C6 C2 BA 97 04 0409*       jp nz,@load_frames
0497CA 78          0410*       ld a,b
0497CB B7          0411*       or a
0497CC C2 BA 97 04 0412*       jp nz,@load_frames
0497D0 C9          0413*       ret
0497D1             0414*   ; end sprite_load_frames
0497D1             0074        include "debug.inc"
0497D1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
049800             0002*   
049800             0003*   DEBUG_PRINT:
049800             0004*       PUSH_ALL
049800 08          0001*M1     ex af,af'
049801 D9          0002*M1     exx
049802 F5          0003*M1     push af
049803 E5          0004*M1     push hl
049804 C5          0005*M1     push bc
049805 D5          0006*M1     push de
049806             0007*M1 
049806 08          0008*M1     ex af,af'
049807 D9          0009*M1     exx
049808 F5          0010*M1     push af
049809 E5          0011*M1     push hl
04980A C5          0012*M1     push bc
04980B D5          0013*M1     push de
04980C DD E5       0014*M1     push ix
04980E FD E5       0015*M1     push iy
049810 0E 00       0005*       ld c,0 ; X
049812 06 00       0006*       ld b,0 ; Y
049814 CD 37 1A 04 0007*       call vdu_move_cursor
049818             0008*       POP_ALL
049818 FD E1       0001*M1     pop iy
04981A DD E1       0002*M1     pop ix
04981C D1          0003*M1     pop de
04981D C1          0004*M1     pop bc
04981E E1          0005*M1     pop hl
04981F F1          0006*M1     pop af
049820 08          0007*M1     ex af,af'
049821 D9          0008*M1     exx
049822             0009*M1 
049822 D1          0010*M1     pop de
049823 C1          0011*M1     pop bc
049824 E1          0012*M1     pop hl
049825 F1          0013*M1     pop af
049826 08          0014*M1     ex af,af'
049827 D9          0015*M1     exx
049828             0009*       PUSH_ALL
049828 08          0001*M1     ex af,af'
049829 D9          0002*M1     exx
04982A F5          0003*M1     push af
04982B E5          0004*M1     push hl
04982C C5          0005*M1     push bc
04982D D5          0006*M1     push de
04982E             0007*M1 
04982E 08          0008*M1     ex af,af'
04982F D9          0009*M1     exx
049830 F5          0010*M1     push af
049831 E5          0011*M1     push hl
049832 C5          0012*M1     push bc
049833 D5          0013*M1     push de
049834 DD E5       0014*M1     push ix
049836 FD E5       0015*M1     push iy
049838 CD 57 06 04 0010*       call dumpFlags
04983C             0011*       POP_ALL
04983C FD E1       0001*M1     pop iy
04983E DD E1       0002*M1     pop ix
049840 D1          0003*M1     pop de
049841 C1          0004*M1     pop bc
049842 E1          0005*M1     pop hl
049843 F1          0006*M1     pop af
049844 08          0007*M1     ex af,af'
049845 D9          0008*M1     exx
049846             0009*M1 
049846 D1          0010*M1     pop de
049847 C1          0011*M1     pop bc
049848 E1          0012*M1     pop hl
049849 F1          0013*M1     pop af
04984A 08          0014*M1     ex af,af'
04984B D9          0015*M1     exx
04984C             0012*       PUSH_ALL
04984C 08          0001*M1     ex af,af'
04984D D9          0002*M1     exx
04984E F5          0003*M1     push af
04984F E5          0004*M1     push hl
049850 C5          0005*M1     push bc
049851 D5          0006*M1     push de
049852             0007*M1 
049852 08          0008*M1     ex af,af'
049853 D9          0009*M1     exx
049854 F5          0010*M1     push af
049855 E5          0011*M1     push hl
049856 C5          0012*M1     push bc
049857 D5          0013*M1     push de
049858 DD E5       0014*M1     push ix
04985A FD E5       0015*M1     push iy
04985C CD B9 04 04 0013*       call dumpRegistersHex
049860             0014*       ; call waitKeypress
049860             0015*       POP_ALL
049860 FD E1       0001*M1     pop iy
049862 DD E1       0002*M1     pop ix
049864 D1          0003*M1     pop de
049865 C1          0004*M1     pop bc
049866 E1          0005*M1     pop hl
049867 F1          0006*M1     pop af
049868 08          0007*M1     ex af,af'
049869 D9          0008*M1     exx
04986A             0009*M1 
04986A D1          0010*M1     pop de
04986B C1          0011*M1     pop bc
04986C E1          0012*M1     pop hl
04986D F1          0013*M1     pop af
04986E 08          0014*M1     ex af,af'
04986F D9          0015*M1     exx
049870 C9          0016*       ret
049871             0017*   
049871             0018*   DEBUG_PRINT_TILE_TABLE:
049871             0019*       PUSH_ALL
049871 08          0001*M1     ex af,af'
049872 D9          0002*M1     exx
049873 F5          0003*M1     push af
049874 E5          0004*M1     push hl
049875 C5          0005*M1     push bc
049876 D5          0006*M1     push de
049877             0007*M1 
049877 08          0008*M1     ex af,af'
049878 D9          0009*M1     exx
049879 F5          0010*M1     push af
04987A E5          0011*M1     push hl
04987B C5          0012*M1     push bc
04987C D5          0013*M1     push de
04987D DD E5       0014*M1     push ix
04987F FD E5       0015*M1     push iy
049881 CD 1C 01 04 0020*       call printNewLine
049885 DD 21 00 89 0021*       ld ix,tile_stack
       04          
04988A DD 37 00    0022*       ld ix,(ix)
04988D CD FE 9C 04 0023*       call dump_tile_record
049891 CD 1C 01 04 0024*       call printNewLine
049895             0025*       POP_ALL
049895 FD E1       0001*M1     pop iy
049897 DD E1       0002*M1     pop ix
049899 D1          0003*M1     pop de
04989A C1          0004*M1     pop bc
04989B E1          0005*M1     pop hl
04989C F1          0006*M1     pop af
04989D 08          0007*M1     ex af,af'
04989E D9          0008*M1     exx
04989F             0009*M1 
04989F D1          0010*M1     pop de
0498A0 C1          0011*M1     pop bc
0498A1 E1          0012*M1     pop hl
0498A2 F1          0013*M1     pop af
0498A3 08          0014*M1     ex af,af'
0498A4 D9          0015*M1     exx
0498A5 C9          0026*       ret
0498A6             0027*   ; end DEBUG_PRINT_TILE_TABLE
0498A6             0028*   
0498A6             0029*   DEBUG_PRINT_TABLE:
0498A6             0030*       PUSH_ALL
0498A6 08          0001*M1     ex af,af'
0498A7 D9          0002*M1     exx
0498A8 F5          0003*M1     push af
0498A9 E5          0004*M1     push hl
0498AA C5          0005*M1     push bc
0498AB D5          0006*M1     push de
0498AC             0007*M1 
0498AC 08          0008*M1     ex af,af'
0498AD D9          0009*M1     exx
0498AE F5          0010*M1     push af
0498AF E5          0011*M1     push hl
0498B0 C5          0012*M1     push bc
0498B1 D5          0013*M1     push de
0498B2 DD E5       0014*M1     push ix
0498B4 FD E5       0015*M1     push iy
0498B6 CD 1C 01 04 0031*       call printNewLine
0498BA CD 36 9B 04 0032*       call dump_sprite_record
0498BE CD 1C 01 04 0033*       call printNewLine
0498C2 CD 1C 01 04 0034*       call printNewLine
0498C6             0035*   
0498C6 FD E5       0036*       push iy
0498C8 DD E1       0037*       pop ix
0498CA CD 36 9B 04 0038*       call dump_sprite_record
0498CE CD 1C 01 04 0039*       call printNewLine
0498D2 CD 1C 01 04 0040*       call printNewLine
0498D6             0041*       POP_ALL
0498D6 FD E1       0001*M1     pop iy
0498D8 DD E1       0002*M1     pop ix
0498DA D1          0003*M1     pop de
0498DB C1          0004*M1     pop bc
0498DC E1          0005*M1     pop hl
0498DD F1          0006*M1     pop af
0498DE 08          0007*M1     ex af,af'
0498DF D9          0008*M1     exx
0498E0             0009*M1 
0498E0 D1          0010*M1     pop de
0498E1 C1          0011*M1     pop bc
0498E2 E1          0012*M1     pop hl
0498E3 F1          0013*M1     pop af
0498E4 08          0014*M1     ex af,af'
0498E5 D9          0015*M1     exx
0498E6 C9          0042*       RET
0498E7             0043*   
0498E7             0044*   DEBUG_WAITKEYPRESS:
0498E7             0045*       PUSH_ALL
0498E7 08          0001*M1     ex af,af'
0498E8 D9          0002*M1     exx
0498E9 F5          0003*M1     push af
0498EA E5          0004*M1     push hl
0498EB C5          0005*M1     push bc
0498EC D5          0006*M1     push de
0498ED             0007*M1 
0498ED 08          0008*M1     ex af,af'
0498EE D9          0009*M1     exx
0498EF F5          0010*M1     push af
0498F0 E5          0011*M1     push hl
0498F1 C5          0012*M1     push bc
0498F2 D5          0013*M1     push de
0498F3 DD E5       0014*M1     push ix
0498F5 FD E5       0015*M1     push iy
0498F7 CD B8 06 04 0046*       call waitKeypress
0498FB             0047*       POP_ALL
0498FB FD E1       0001*M1     pop iy
0498FD DD E1       0002*M1     pop ix
0498FF D1          0003*M1     pop de
049900 C1          0004*M1     pop bc
049901 E1          0005*M1     pop hl
049902 F1          0006*M1     pop af
049903 08          0007*M1     ex af,af'
049904 D9          0008*M1     exx
049905             0009*M1 
049905 D1          0010*M1     pop de
049906 C1          0011*M1     pop bc
049907 E1          0012*M1     pop hl
049908 F1          0013*M1     pop af
049909 08          0014*M1     ex af,af'
04990A D9          0015*M1     exx
04990B C9          0048*       RET
04990C             0049*   
04990C             0050*   DEBUG_PRINT_FIELDS:
04990C             0051*       ; PUSH_ALL
04990C 01 00 00 00 0052*       ld bc,0
049910 4F          0053*       ld c,a
049911 DD 21 5E A0 0054*       ld ix,table_base
       04          
049916 DD 09       0055*       add ix,bc
049918 06 14       0056*       ld b,table_num_records
04991A             0057*   @@:
04991A DD E5       0058*       push ix
04991C E1          0059*       pop hl
04991D C5          0060*       push bc ; save loop counter
04991E 3E 01       0061*       ld a,1 ; print one byte
049920 CD BD 06 04 0062*       call dumpMemoryHex
049924 ED 32 40    0063*       lea ix,ix+table_record_size
049927 C1          0064*       pop bc ; restore loop counter
049928 10 F0       0065*       djnz @b
04992A             0066*       ; POP_ALL
04992A C9          0067*       ret
04992B             0068*   
04992B             0069*   DEBUG_PRINT_TILE_STACK:
04992B             0070*       PUSH_ALL
04992B 08          0001*M1     ex af,af'
04992C D9          0002*M1     exx
04992D F5          0003*M1     push af
04992E E5          0004*M1     push hl
04992F C5          0005*M1     push bc
049930 D5          0006*M1     push de
049931             0007*M1 
049931 08          0008*M1     ex af,af'
049932 D9          0009*M1     exx
049933 F5          0010*M1     push af
049934 E5          0011*M1     push hl
049935 C5          0012*M1     push bc
049936 D5          0013*M1     push de
049937 DD E5       0014*M1     push ix
049939 FD E5       0015*M1     push iy
04993B 01 00 00 00 0071*       ld bc,0
04993F 11 00 00 00 0072*       ld de,0
049943 CD D0 1A 04 0073*       call vdu_set_gfx_origin
049947 01 00 00 00 0074*       ld bc,0
04994B 11 00 00 00 0075*       ld de,0
04994F DD 21 7F 00 0076*       ld ix,127
       00          
049954 FD 21 F0 00 0077*       ld iy,240
       00          
049959 CD EB 1A 04 0078*       call vdu_set_gfx_viewport
04995D CD 5E 1A 04 0079*       call vdu_clg
049961 CD 00 1A 04 0080*       call vdu_home_cursor
049965 CD 1C 01 04 0081*       call printNewLine
049969 CD 1C 01 04 0082*       call printNewLine
04996D 2A 03 8C 04 0083*       ld hl,(tile_stack_pointer)
049971 CD 64 01 04 0084*       call printHexUHL
049975 CD 1C 01 04 0085*       call printNewLine
049979 3A 09 8C 04 0086*       ld a,(num_active_tiles)
04997D CD 4A 01 04 0087*       call printHexA
049981 CD 1C 01 04 0088*       call printNewLine
049985 A7          0089*       and a
049986 CA B4 99 04 0090*       jp z,@done
04998A DD 21 00 89 0091*       ld ix,tile_stack
       04          
04998F 3A 09 8C 04 0092*       ld a,(num_active_tiles)
049993 47          0093*       ld b,a
049994             0094*   @loop:
049994 C5          0095*       push bc
049995 DD E5       0096*       push ix
049997 DD 37 00    0097*       ld ix,(ix)
04999A DD 7E 00    0098*       ld a,(ix+tile_id)
04999D CD 4A 01 04 0099*       call printHexA
0499A1 DD 7E 16    0100*       ld a,(ix+tile_type)
0499A4 CD 4A 01 04 0101*       call printHexA
0499A8 CD 1C 01 04 0102*       call printNewLine
0499AC DD E1       0103*       pop ix
0499AE ED 32 03    0104*       lea ix,ix+3
0499B1 C1          0105*       pop bc
0499B2 10 E0       0106*       djnz @loop
0499B4             0107*   @done:
0499B4             0108*       POP_ALL
0499B4 FD E1       0001*M1     pop iy
0499B6 DD E1       0002*M1     pop ix
0499B8 D1          0003*M1     pop de
0499B9 C1          0004*M1     pop bc
0499BA E1          0005*M1     pop hl
0499BB F1          0006*M1     pop af
0499BC 08          0007*M1     ex af,af'
0499BD D9          0008*M1     exx
0499BE             0009*M1 
0499BE D1          0010*M1     pop de
0499BF C1          0011*M1     pop bc
0499C0 E1          0012*M1     pop hl
0499C1 F1          0013*M1     pop af
0499C2 08          0014*M1     ex af,af'
0499C3 D9          0015*M1     exx
0499C4 C9          0109*       ret
0499C5             0110*   
0499C5             0111*   DEBUG_DUMP_PLAYER_RECORD:
0499C5             0112*       PUSH_ALL
0499C5 08          0001*M1     ex af,af'
0499C6 D9          0002*M1     exx
0499C7 F5          0003*M1     push af
0499C8 E5          0004*M1     push hl
0499C9 C5          0005*M1     push bc
0499CA D5          0006*M1     push de
0499CB             0007*M1 
0499CB 08          0008*M1     ex af,af'
0499CC D9          0009*M1     exx
0499CD F5          0010*M1     push af
0499CE E5          0011*M1     push hl
0499CF C5          0012*M1     push bc
0499D0 D5          0013*M1     push de
0499D1 DD E5       0014*M1     push ix
0499D3 FD E5       0015*M1     push iy
0499D5 CD 1C 01 04 0113*       call printNewLine
0499D9 CD 3D 80 04 0114*       CALL dump_player_record
0499DD CD 1C 01 04 0115*       call printNewLine
0499E1             0116*       POP_ALL
0499E1 FD E1       0001*M1     pop iy
0499E3 DD E1       0002*M1     pop ix
0499E5 D1          0003*M1     pop de
0499E6 C1          0004*M1     pop bc
0499E7 E1          0005*M1     pop hl
0499E8 F1          0006*M1     pop af
0499E9 08          0007*M1     ex af,af'
0499EA D9          0008*M1     exx
0499EB             0009*M1 
0499EB D1          0010*M1     pop de
0499EC C1          0011*M1     pop bc
0499ED E1          0012*M1     pop hl
0499EE F1          0013*M1     pop af
0499EF 08          0014*M1     ex af,af'
0499F0 D9          0015*M1     exx
0499F1 C9          0117*       RET
0499F2             0118*   
0499F2             0119*   DEBUG_PRINT_SHIELDS:
0499F2 0E 00       0120*       ld c,0 ; X
0499F4 06 00       0121*       ld b,0 ; Y
0499F6 CD 37 1A 04 0122*       call vdu_move_cursor
0499FA             0123*   
0499FA DD 21 FC 82 0124*       ld ix,bar_shields
       04          
0499FF             0125*   
0499FF CD 00 01 04 0126*       call printInline
049A03 76 61 6C 3A 0127*       asciz "val:"
       00          
049A08 DD 27 00    0128*       ld hl,(ix+bar_val)
049A0B CD 06 02 04 0129*       call printDec
049A0F CD 1C 01 04 0130*       call printNewLine
049A13             0131*   
049A13 CD 00 01 04 0132*       call printInline
049A17 78 30 20 3A 0133*       asciz "x0 :"
       00          
049A1C DD 27 03    0134*       ld hl,(ix+bar_x0)
049A1F CD 06 02 04 0135*       call printDec
049A23 CD 1C 01 04 0136*       call printNewLine
049A27             0137*   
049A27 CD 00 01 04 0138*       call printInline
049A2B 79 30 20 3A 0139*       asciz "y0 :"
       00          
049A30 DD 27 06    0140*       ld hl,(ix+bar_y0)
049A33 CD 06 02 04 0141*       call printDec
049A37 CD 1C 01 04 0142*       call printNewLine
049A3B             0143*   
049A3B CD 00 01 04 0144*       call printInline
049A3F 78 31 20 3A 0145*       asciz "x1 :"
       00          
049A44 DD 27 09    0146*       ld hl,(ix+bar_x1)
049A47 CD 06 02 04 0147*       call printDec
049A4B CD 1C 01 04 0148*       call printNewLine
049A4F             0149*   
049A4F CD 00 01 04 0150*       call printInline
049A53 79 31 20 3A 0151*       asciz "y1 :"
       00          
049A58 DD 27 0C    0152*       ld hl,(ix+bar_y1)
049A5B CD 06 02 04 0153*       call printDec
049A5F CD 1C 01 04 0154*       call printNewLine
049A63             0155*   
049A63 CD 00 01 04 0156*       call printInline
049A67 79 20 20 3A 0157*       asciz "y  :"
       00          
049A6C DD 27 0F    0158*       ld hl,(ix+bar_y)
049A6F CD 06 02 04 0159*       call printDec
049A73 CD 1C 01 04 0160*       call printNewLine
049A77             0161*   
049A77             0162*       ; call waitKeypress
049A77 C9          0163*       ret
049A78             0164*   ; end DEBUG_PRINT_SHIELDS
049A78             0165*   
049A78             0166*   DEBUG_PRINT_BAR_UPDATE:
049A78 0E 00       0167*       ld c,0 ; X
049A7A 06 00       0168*       ld b,0 ; Y
049A7C CD 37 1A 04 0169*       call vdu_move_cursor
049A80             0170*   
049A80 CD 00 01 04 0171*       call printInline
049A84 78 30 20 20 0172*       asciz "x0  :"
       3A 00       
049A8A 21 00 00 00 0173*       ld hl,0 ; clear hlu
049A8E DD 6E 01    0174*       ld l,(ix+@x0-@cmd0+0)
049A91 DD 66 02    0175*       ld h,(ix+@x0-@cmd0+1)
049A94 CD 06 02 04 0176*       call printDec
049A98 CD 1C 01 04 0177*       call printNewLine
049A9C             0178*   
049A9C CD 00 01 04 0179*       call printInline
049AA0 79 30 20 20 0180*       asciz "y0  :"
       3A 00       
049AA6 21 00 00 00 0181*       ld hl,0 ; clear hlu
049AAA DD 6E 07    0182*       ld l,(ix+@y0-@cmd0+0)
049AAD DD 66 08    0183*       ld h,(ix+@y0-@cmd0+1)
049AB0 CD 06 02 04 0184*       call printDec
049AB4 CD 1C 01 04 0185*       call printNewLine
049AB8             0186*   
049AB8 CD 00 01 04 0187*       call printInline
049ABC 78 31 20 20 0188*       asciz "x1  :"
       3A 00       
049AC2 21 00 00 00 0189*       ld hl,0 ; clear hlu
049AC6 DD 6E 05    0190*       ld l,(ix+@x1-@cmd0+0)
049AC9 DD 66 06    0191*       ld h,(ix+@x1-@cmd0+1)
049ACC CD 06 02 04 0192*       call printDec
049AD0 CD 1C 01 04 0193*       call printNewLine
049AD4             0194*   
049AD4 CD 00 01 04 0195*       call printInline
049AD8 79 31 20 20 0196*       asciz "y1  :"
       3A 00       
049ADE 21 00 00 00 0197*       ld hl,0 ; clear hlu
049AE2 DD 6E 03    0198*       ld l,(ix+@y1-@cmd0+0)
049AE5 DD 66 04    0199*       ld h,(ix+@y1-@cmd0+1)
049AE8 CD 06 02 04 0200*       call printDec
049AEC CD 1C 01 04 0201*       call printNewLine
049AF0             0202*   
049AF0 CD 00 01 04 0203*       call printInline
049AF4 78 32 20 20 0204*       asciz "x2  :"
       3A 00       
049AFA 21 00 00 00 0205*       ld hl,0 ; clear hlu
049AFE DD 6E 0B    0206*       ld l,(ix+@x2-@cmd0+0)
049B01 DD 66 0C    0207*       ld h,(ix+@x2-@cmd0+1)
049B04 CD 06 02 04 0208*       call printDec
049B08 CD 1C 01 04 0209*       call printNewLine
049B0C             0210*   
049B0C CD 00 01 04 0211*       call printInline
049B10 58 32 20 79 0212*       asciz "X2 y2:"
       32 3A 00    
049B17 21 00 00 00 0213*       ld hl,0 ; clear hlu
049B1B DD 6E 0D    0214*       ld l,(ix+@y2-@cmd0+0)
049B1E DD 66 0E    0215*       ld h,(ix+@y2-@cmd0+1)
049B21 CD 06 02 04 0216*       call printDec
049B25 C9          0217*       ret
049B26 18          0218*   @cmd0:   db 24
049B27 00 00       0219*   @x0: 	dw 0x0000
049B29 00 00       0220*   @y1: 	dw 0x0000
049B2B 00 00       0221*   @x1: 	dw 0x0000
049B2D 00 00       0222*   @y0: 	dw 0x0000
049B2F             0223*   ; plot bitmap command
049B2F 19          0224*   @cmd1:   db 25 ; stomped on by @y0 load
049B30 ED          0225*   @mode:  db plot_bmp+dr_abs_fg ; 0xED stomped on by @x2 load
049B31 00 00       0226*   @x2: 	dw 0x0000
049B33 00 00       0227*   @y2: 	dw 0x0000
049B35 00          0228*   @end:  db 0x00 ; padding
049B36             0229*   ; end DEBUG_PRINT_BAR_UPDATE
049B36             0230*   
049B36             0231*   
049B36             0232*   dump_sprite_record:
049B36             0233*       ; call vdu_home_cursor
049B36 CD 00 01 04 0234*       call printInline
049B3A 69 64 20 20 0235*       asciz "id  : "
       3A 20 00    
049B41 DD 7E 00    0236*       ld a,(ix+sprite_id)
049B44 CD 4A 01 04 0237*       call printHexA
049B48             0238*   
049B48 CD 00 01 04 0239*       call printInline
049B4C 0D 0A 78 20 0240*       asciz "\r\nx   :"
       20 20 3A 00 
049B54 DD 27 01    0241*       ld hl,(ix+sprite_x)
049B57 CD 2B 03 04 0242*       call print_s168_hl
049B5B             0243*   
049B5B CD 00 01 04 0244*       call printInline
049B5F 0D 0A 79 20 0245*       asciz "\r\ny   :"
       20 20 3A 00 
049B67 DD 27 04    0246*       ld hl,(ix+sprite_y)
049B6A CD 2B 03 04 0247*       call print_s168_hl
049B6E             0248*   
049B6E CD 00 01 04 0249*       call printInline
049B72 0D 0A 78 76 0250*       asciz "\r\nxv  :"
       20 20 3A 00 
049B7A DD 27 07    0251*       ld hl,(ix+sprite_xvel)
049B7D CD 2B 03 04 0252*       call print_s168_hl
049B81             0253*   
049B81 CD 00 01 04 0254*       call printInline
049B85 0D 0A 79 76 0255*       asciz "\r\nyv  :"
       20 20 3A 00 
049B8D DD 27 0A    0256*       ld hl,(ix+sprite_yvel)
049B90 CD 2B 03 04 0257*       call print_s168_hl
049B94             0258*   
049B94 CD 00 01 04 0259*       call printInline
049B98 0D 0A 76 20 0260*       asciz "\r\nv   :"
       20 20 3A 00 
049BA0 DD 27 0D    0261*       ld hl,(ix+sprite_vel)
049BA3 CD 2B 03 04 0262*       call print_s168_hl
049BA7             0263*   
049BA7 CD 00 01 04 0264*       call printInline
049BAB 0D 0A 68 64 0265*       asciz "\r\nhdg :"
       67 20 3A 00 
049BB3 DD 27 10    0266*       ld hl,(ix+sprite_heading)
049BB6 CD 2B 03 04 0267*       call print_s168_hl
049BBA             0268*   
049BBA CD 00 01 04 0269*       call printInline
049BBE 0D 0A 6F 72 0270*       asciz "\r\nori :"
       69 20 3A 00 
049BC6 DD 27 13    0271*       ld hl,(ix+sprite_orientation)
049BC9 CD 2B 03 04 0272*       call print_s168_hl
049BCD             0273*   
049BCD CD 00 01 04 0274*       call printInline
049BD1 0D 0A 74 79 0275*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
049BDA DD 7E 16    0276*       ld a,(ix+sprite_type)
049BDD CD 4A 01 04 0277*       call printHexA
049BE1             0278*   
049BE1 CD 00 01 04 0279*       call printInline
049BE5 0D 0A 42 49 0280*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
049BEE DD 27 17    0281*       ld hl,(ix+sprite_base_bufferId)
049BF1 CD 27 01 04 0282*       call printHex24
049BF5             0283*   
049BF5 CD 00 01 04 0284*       call printInline
049BF9 0D 0A 6D 50 0285*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
049C02 DD 27 1A    0286*       ld hl,(ix+sprite_move_program)
049C05 CD 27 01 04 0287*       call printHex24
049C09             0288*   
049C09 CD 00 01 04 0289*       call printInline
049C0D 0D 0A 63 6F 0290*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
049C16 DD 7E 1D    0291*       ld a,(ix+sprite_collisions)
049C19 CD A8 03 04 0292*       call printBin8
049C1D             0293*   
049C1D CD 00 01 04 0294*       call printInline
049C21 0D 0A 73 7A 0295*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
049C2A DD 7E 1E    0296*       ld a,(ix+sprite_dim_x)
049C2D CD 4A 01 04 0297*       call printHexA
049C31             0298*   
049C31 CD 00 01 04 0299*       call printInline
049C35 0D 0A 73 7A 0300*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
049C3E DD 7E 1F    0301*       ld a,(ix+sprite_dim_y)
049C41 CD 4A 01 04 0302*       call printHexA
049C45             0303*   
049C45 CD 00 01 04 0304*       call printInline
049C49 0D 0A 23 6F 0305*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
049C52 DD 7E 20    0306*       ld a,(ix+sprite_num_orientations)
049C55 CD 4A 01 04 0307*       call printHexA
049C59             0308*   
049C59 CD 00 01 04 0309*       call printInline
049C5D 0D 0A 23 61 0310*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
049C66 DD 7E 21    0311*       ld a,(ix+sprite_num_animations)
049C69 CD 4A 01 04 0312*       call printHexA
049C6D             0313*   
049C6D CD 00 01 04 0314*       call printInline
049C71 0D 0A 61 6E 0315*       asciz "\r\nani : "
       69 20 3A 20 
       00          
049C7A DD 7E 22    0316*       ld a,(ix+sprite_animation)
049C7D CD 4A 01 04 0317*       call printHexA
049C81             0318*   
049C81 CD 00 01 04 0319*       call printInline
049C85 0D 0A 61 6E 0320*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
049C8E DD 7E 23    0321*       ld a,(ix+sprite_animation_timer)
049C91 CD 4A 01 04 0322*       call printHexA
049C95             0323*   
049C95 CD 00 01 04 0324*       call printInline
049C99 0D 0A 6D 76 0325*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
049CA2 DD 7E 24    0326*       ld a,(ix+sprite_move_timer)
049CA5 CD 4A 01 04 0327*       call printHexA
049CA9             0328*   
049CA9 CD 00 01 04 0329*       call printInline
049CAD 0D 0A 6D 76 0330*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
049CB6 DD 7E 25    0331*       ld a,(ix+sprite_move_step)
049CB9 CD 4A 01 04 0332*       call printHexA
049CBD             0333*   
049CBD CD 00 01 04 0334*       call printInline
049CC1 0D 0A 70 74 0335*       asciz "\r\npts : "
       73 20 3A 20 
       00          
049CCA DD 7E 26    0336*       ld a,(ix+sprite_points)
049CCD CD 4A 01 04 0337*       call printHexA
049CD1             0338*   
049CD1 CD 00 01 04 0339*       call printInline
049CD5 0D 0A 64 6D 0340*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
049CDE DD 7E 27    0341*       ld a,(ix+sprite_shield_damage)
049CE1 CD 4A 01 04 0342*       call printHexA
049CE5             0343*   
049CE5 CD 00 01 04 0344*       call printInline
049CE9 0D 0A 66 72 0345*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
049CF2 DD 7E 28    0346*       ld a,(ix+sprite_frame)
049CF5 CD 4A 01 04 0347*       call printHexA
049CF9             0348*   
049CF9 CD 1C 01 04 0349*       call printNewLine
049CFD             0350*   
049CFD             0351*       ; call waitKeypress
049CFD C9          0352*       ret
049CFE             0353*   
049CFE             0354*   dump_tile_record:
049CFE CD 00 01 04 0355*       call printInline
049D02 69 64 20 20 0356*       asciz "id  : "
       3A 20 00    
049D09 DD 7E 00    0357*       ld a,(ix+tile_id)
049D0C CD 4A 01 04 0358*       call printHexA
049D10             0359*   
049D10 CD 00 01 04 0360*       call printInline
049D14 0D 0A 78 20 0361*       asciz "\r\nx   :"
       20 20 3A 00 
049D1C DD 27 01    0362*       ld hl,(ix+tile_x)
049D1F CD 2B 03 04 0363*       call print_s168_hl
049D23             0364*   
049D23 CD 00 01 04 0365*       call printInline
049D27 0D 0A 79 20 0366*       asciz "\r\ny   :"
       20 20 3A 00 
049D2F DD 27 04    0367*       ld hl,(ix+tile_y)
049D32 CD 2B 03 04 0368*       call print_s168_hl
049D36             0369*   
049D36             0370*       ; call printInline
049D36             0371*       ; asciz "\r\nxv  :"
049D36             0372*       ; ld hl,(ix+tile_xvel)
049D36             0373*       ; call print_s168_hl
049D36             0374*   
049D36             0375*       ; call printInline
049D36             0376*       ; asciz "\r\nyv  :"
049D36             0377*       ; ld hl,(ix+tile_yvel)
049D36             0378*       ; call print_s168_hl
049D36             0379*   
049D36             0380*       ; call printInline
049D36             0381*       ; asciz "\r\nv   :"
049D36             0382*       ; ld hl,(ix+tile_vel)
049D36             0383*       ; call print_s168_hl
049D36             0384*   
049D36             0385*       ; call printInline
049D36             0386*       ; asciz "\r\nhdg :"
049D36             0387*       ; ld hl,(ix+tile_heading)
049D36             0388*       ; call print_s168_hl
049D36             0389*   
049D36             0390*       ; call printInline
049D36             0391*       ; asciz "\r\nori :"
049D36             0392*       ; ld hl,(ix+tile_orientation)
049D36             0393*       ; call print_s168_hl
049D36             0394*   
049D36 CD 00 01 04 0395*       call printInline
049D3A 0D 0A 74 79 0396*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
049D43 DD 7E 16    0397*       ld a,(ix+tile_type)
049D46 CD 4A 01 04 0398*       call printHexA
049D4A             0399*   
049D4A CD 00 01 04 0400*       call printInline
049D4E 0D 0A 42 49 0401*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
049D57 DD 27 17    0402*       ld hl,(ix+tile_base_bufferId)
049D5A CD 27 01 04 0403*       call printHex24
049D5E             0404*   
049D5E CD 00 01 04 0405*       call printInline
049D62 0D 0A 6D 50 0406*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
049D6B DD 27 1A    0407*       ld hl,(ix+tile_move_program)
049D6E CD 27 01 04 0408*       call printHex24
049D72             0409*   
049D72 CD 00 01 04 0410*       call printInline
049D76 0D 0A 63 6F 0411*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
049D7F DD 7E 1D    0412*       ld a,(ix+tile_collisions)
049D82 CD A8 03 04 0413*       call printBin8
049D86             0414*   
049D86 CD 00 01 04 0415*       call printInline
049D8A 0D 0A 73 7A 0416*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
049D93 DD 7E 1E    0417*       ld a,(ix+tile_dim_x)
049D96 CD 4A 01 04 0418*       call printHexA
049D9A             0419*   
049D9A CD 00 01 04 0420*       call printInline
049D9E 0D 0A 73 7A 0421*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
049DA7 DD 7E 1F    0422*       ld a,(ix+tile_dim_y)
049DAA CD 4A 01 04 0423*       call printHexA
049DAE             0424*   
049DAE CD 00 01 04 0425*       call printInline
049DB2 0D 0A 23 6F 0426*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
049DBB DD 7E 20    0427*       ld a,(ix+tile_num_orientations)
049DBE CD 4A 01 04 0428*       call printHexA
049DC2             0429*   
049DC2 CD 00 01 04 0430*       call printInline
049DC6 0D 0A 23 61 0431*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
049DCF DD 7E 21    0432*       ld a,(ix+tile_num_animations)
049DD2 CD 4A 01 04 0433*       call printHexA
049DD6             0434*   
049DD6 CD 00 01 04 0435*       call printInline
049DDA 0D 0A 61 6E 0436*       asciz "\r\nani : "
       69 20 3A 20 
       00          
049DE3 DD 7E 22    0437*       ld a,(ix+tile_animation)
049DE6 CD 4A 01 04 0438*       call printHexA
049DEA             0439*   
049DEA CD 00 01 04 0440*       call printInline
049DEE 0D 0A 61 6E 0441*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
049DF7 DD 7E 23    0442*       ld a,(ix+tile_animation_timer)
049DFA CD 4A 01 04 0443*       call printHexA
049DFE             0444*   
049DFE CD 00 01 04 0445*       call printInline
049E02 0D 0A 6D 76 0446*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
049E0B DD 7E 24    0447*       ld a,(ix+tile_move_timer)
049E0E CD 4A 01 04 0448*       call printHexA
049E12             0449*   
049E12 CD 00 01 04 0450*       call printInline
049E16 0D 0A 6D 76 0451*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
049E1F DD 7E 25    0452*       ld a,(ix+tile_move_step)
049E22 CD 4A 01 04 0453*       call printHexA
049E26             0454*   
049E26 CD 00 01 04 0455*       call printInline
049E2A 0D 0A 70 74 0456*       asciz "\r\npts : "
       73 20 3A 20 
       00          
049E33 DD 7E 26    0457*       ld a,(ix+tile_points)
049E36 CD 4A 01 04 0458*       call printHexA
049E3A             0459*   
049E3A CD 00 01 04 0460*       call printInline
049E3E 0D 0A 64 6D 0461*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
049E47 DD 7E 27    0462*       ld a,(ix+tile_shield_damage)
049E4A CD 4A 01 04 0463*       call printHexA
049E4E             0464*   
049E4E CD 00 01 04 0465*       call printInline
049E52 0D 0A 66 72 0466*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
049E5B DD 7E 28    0467*       ld a,(ix+tile_frame)
049E5E CD 4A 01 04 0468*       call printHexA
049E62             0469*   
049E62 CD 1C 01 04 0470*       call printNewLine
049E66 CD 1C 01 04 0471*       call printNewLine
049E6A             0472*   
049E6A             0473*       ; call waitKeypress
049E6A C9          0474*       ret
049E6B             0075    
049E6B FF FF FF FF 0076        align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
049F00             0077    
049F00             0078    ; --- MAIN PROGRAM FILE ---
049F00 57 65 6C 63 0079    hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
049F1B 4C 6F 61 64 0080    loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
049F29 50 72 65 73 0081    loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
049F44             0082    
049F44             0083    init:
049F44             0084    ; clear all buffers
049F44 CD 2A 1C 04 0085        call vdu_clear_all_buffers
049F48             0086    
049F48             0087    ; print loading ui message
049F48 CD 4B 1A 04 0088        call vdu_cls
049F4C 21 6A 21 04 0089        ld hl,loading_ui
049F50 CD 07 01 04 0090        call printString
049F54 CD 50 1A 04 0091        call vdu_flip
049F58             0092    ; load UI images
049F58 CD CA 16 04 0093        call load_ui_images
049F5C             0094    
049F5C             0095    ; set up the display
049F5C 3E 08       0096        ld a,8;+128 ; 136   320   240   64    60hz double-buffered
049F5E             0097        ; ld a,20 ;  512   384   64    60hz single-buffered
049F5E CD 14 1B 04 0098        call vdu_set_screen_mode
049F62 AF          0099        xor a
049F63 CD 25 1B 04 0100        call vdu_set_scaling
049F67             0101    
049F67             0102    ; ; enable additional audio channels
049F67             0103    ; 	call vdu_enable_channels
049F67             0104    
049F67             0105    ; set text background color
049F67 3E 9A       0106        ld a,26+128 ; violet
049F69 CD 7C 1A 04 0107        call vdu_colour_text
049F6D             0108    
049F6D             0109    ; set text foreground color
049F6D 3E 2F       0110        ld a,47 ; aaaaff lavenderish
049F6F CD 7C 1A 04 0111        call vdu_colour_text
049F73             0112    
049F73             0113    ; set gfx bg color
049F73 AF          0114        xor a ; plotting mode 0
049F74 3E 9A       0115        ld a,26+128 ; violet
049F76 CD 8D 1A 04 0116        call vdu_gcol
049F7A CD 4B 1A 04 0117        call vdu_cls
049F7E             0118    
049F7E             0119    ; set the cursor off
049F7E CD 13 1A 04 0120        call vdu_cursor_off
049F82             0121    
049F82             0122    ; VDU 28, left, bottom, right, top: Set text viewport **
049F82             0123    ; MIND THE LITTLE-ENDIANESS
049F82             0124    ; inputs: c=left,b=bottom,e=right,d=top
049F82 0E 00       0125        ld c,0 ; left
049F84 16 00       0126        ld d,0 ; top
049F86 1E 27       0127        ld e,39 ; right
049F88 06 00       0128        ld b,0; bottom
049F8A CD A4 1A 04 0129        call vdu_set_txt_viewport
049F8E             0130    
049F8E             0131    ; load background and sprite images
049F8E CD 09 16 04 0132        call img_load_init
049F92 CD FF 16 04 0133        call load_backgrounds
049F96 CD DD 16 04 0134        call load_sprite_images
049F9A             0135    
049F9A             0136    ; load tileset_ptrs
049F9A CD EE 16 04 0137        call load_tilesets
049F9E             0138    
049F9E             0139    ; ; load sound effects ; TODO
049F9E             0140    ; 	ld bc,SFX_num_buffers
049F9E             0141    ; 	ld hl,SFX_buffer_id_lut
049F9E             0142    ; 	ld (cur_buffer_id_lut),hl
049F9E             0143    ; 	ld hl,SFX_load_routines_table
049F9E             0144    ; 	ld (cur_load_jump_table),hl
049F9E             0145    ; 	call sfx_load_main
049F9E             0146    
049F9E             0147    ; print loading complete message and wait for user keypress
049F9E CD 4B 1A 04 0148        call vdu_cls
049FA2 21 29 9F 04 0149        ld hl,loading_complete
049FA6 CD 07 01 04 0150        call printString
049FAA CD 50 1A 04 0151        call vdu_flip
049FAE CD B8 06 04 0152        call waitKeypress
049FB2             0153    
049FB2             0154    ; set up display for gameplay
049FB2             0155        ; ld a,8
049FB2 3E 14       0156        ld a,20
049FB4 CD 14 1B 04 0157        call vdu_set_screen_mode
049FB8 AF          0158        xor a
049FB9 CD 25 1B 04 0159        call vdu_set_scaling
049FBD CD 13 1A 04 0160        call vdu_cursor_off
049FC1             0161    ; load fonts
049FC1 CD 00 15 04 0162    	call fonts_load
049FC5             0163    ; select font
049FC5 21 02 FA 00 0164        ld hl,amiga_forever_8x8
049FC9 3E 01       0165        ld a,1 ; flags
049FCB CD 00 1E 04 0166        call vdu_font_select
049FCF             0167    ; plot bezel art
049FCF 21 06 00 00 0168        ld hl,BUF_BEZEL_L
049FD3 CD 38 1B 04 0169        call vdu_buff_select
049FD7 01 00 00 00 0170        ld bc,0
049FDB 11 00 00 00 0171        ld de,0
049FDF CD 20 1F 04 0172        call vdu_plot_bmp
049FE3 21 07 00 00 0173        ld hl,BUF_BEZEL_R
049FE7 CD 38 1B 04 0174        call vdu_buff_select
049FEB 01 80 01 00 0175        ld bc,384
049FEF 11 00 00 00 0176        ld de,0
049FF3 CD 20 1F 04 0177        call vdu_plot_bmp
049FF7             0178    ; draw player cockpit
049FF7 CD 9D 81 04 0179        call draw_player_cockpit
049FFB             0180    ; set gfx origin and viewport to playing field window
049FFB 01 80 00 00 0181        ld bc,origin_left
049FFF 11 00 00 00 0182        ld de,origin_top
04A003 CD D0 1A 04 0183        call vdu_set_gfx_origin
04A007 01 00 00 00 0184        ld bc,field_left
04A00B 11 00 00 00 0185        ld de,field_top
04A00F DD 21 FF 00 0186        ld ix,field_right
       00          
04A014 FD 21 7F 01 0187        ld iy,field_bottom
       00          
04A019 CD EB 1A 04 0188        call vdu_set_gfx_viewport
04A01D             0189    ; set background color
04A01D 3E 9A       0190        ld a,26+128 ; violet
04A01F CD 8D 1A 04 0191        call vdu_gcol
04A023 CD 5E 1A 04 0192        call vdu_clg
04A027             0193    ; VDU 28, left, bottom, right, top: Set text viewport **
04A027 0E 00       0194        ld c,0 ; left
04A029 16 00       0195        ld d,0 ; top
04A02B 1E 3E       0196        ld e,62 ; right
04A02D 06 30       0197        ld b,48; bottom
04A02F CD A4 1A 04 0198        call vdu_set_txt_viewport
04A033             0199    
04A033             0200    ; initialize the global timestamp
04A033 CD F9 18 04 0201        call timestamp_tick
04A037             0202    
04A037             0203    ; done with init
04A037 C9          0204        ret
04A038             0205    
04A038             0206    main:
04A038             0207    ; start a new game
04A038 CD 17 86 04 0208        call game_initialize
04A03C             0209    main_loop:
04A03C             0210        ; CALL DEBUG_PRINT_TILE_STACK ; DEBUG
04A03C             0211    ; update the global timestamp
04A03C CD F9 18 04 0212        call timestamp_tick
04A040             0213    ; do gamestate logic
04A040 CD 03 86 04 0214        call do_game
04A044             0215    ; wait for the next vblank mitigate flicker and for loop timing
04A044 CD BF 1A 04 0216        call vdu_vblank
04A048             0217    ; poll keyboard for escape keypress
04A048 3E 08       0218        ld a, $08 ; code to send to MOS
04A04A 5B CF       0219        rst.lil $08 ; get IX pointer to System Variables
04A04C DD 7E 05    0220        ld a, (ix + $05) ; get ASCII code of key pressed
04A04F FE 1B       0221        cp 27 ; check if 27 (ascii code for ESC)
04A051 CA 59 A0 04 0222        jp z, main_end ; if pressed, jump to exit
04A055             0223    ; escape not pressed so loop
04A055 C3 3C A0 04 0224        jp main_loop
04A059             0225    
04A059             0226    main_end:
04A059 CD 05 1A 04 0227        call vdu_cursor_on
04A05D C9          0228        ret
04A05E             0229    
04A05E             0230        include "tables.inc"
04A05E             0001*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
04A05E             0002*   table_base: equ $
04A05E             0003*   player_weapons_begin: equ table_base
04A05E             0004*   player_lasers_begin: equ player_weapons_begin
04A05E             0005*   player_lasers_end: equ table_record_size*player_lasers_max+player_lasers_begin
04A05E             0006*   player_weapons_end: equ table_record_size*player_lasers_max+player_weapons_begin
04A05E             0007*   player_begin: equ player_weapons_end
04A05E             0008*   player_end: equ table_record_size+player_begin
04A05E             0009*   enemy_sprites_begin: equ player_end
04A05E             0010*   seekers_base: equ enemy_sprites_begin
04A05E             0011*   seekers_end: equ table_record_size*seekers_max+seekers_base
04A05E             0012*   fireballs_base: equ seekers_end
04A05E             0013*   fireballs_end: equ table_record_size*fireballs_max+fireballs_base
04A05E             0014*   enemy_sprites_end: equ fireballs_end
04A05E             0015*   explosions_base: equ enemy_sprites_end
04A05E             0016*   explosions_end: equ table_record_size*explosions_max+explosions_base
04A05E             0017*   table_end: equ explosions_end
04A05E             0018*   
04A05E             0019*   table_num_records: equ table_end-table_base/table_record_size
04A05E             0020*   table_num_enemy_records: equ enemy_sprites_end-enemy_sprites_begin/table_record_size
04A05E             0021*   
04A05E             0022*   ; ### THIS IS THE SPACE ALLOCATED TO THE ACTIVE TILES TABLE ###
04A05E             0023*   tile_table_base: equ table_end
04A05E             0024*   tile_table_end: equ 256*tile_table_record_size+tile_table_base

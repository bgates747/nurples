PC     Output      Line
040000             0001       assume adl=1
040000             0002       org 0x040000
040000 C3 45 00 04 0003       jp start
040004 FF FF FF FF 0004       align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005       db "MOS"
040043 00          0006       db 00h
040044 01          0007       db 01h
040045             0008   
040045             0009   start:
040045 F5          0010       push af
040046 C5          0011       push bc
040047 D5          0012       push de
040048 DD E5       0013       push ix
04004A FD E5       0014       push iy
04004C CD 4F 6A 04 0015       call init
040050 CD 37 6B 04 0016       call main
040054             0017   
040054             0018   exit:
040054 FD E1       0019       pop iy
040056 DD E1       0020       pop ix
040058 D1          0021       pop de
040059 C1          0022       pop bc
04005A F1          0023       pop af
04005B 21 00 00 00 0024       ld hl,0
04005F             0025   
04005F C9          0026       ret
040060             0027   
040060             0028   ; API INCLUDES
040060             0029       include "mos_api.inc"
040060             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*  ; Title:	AGON MOS - API for user projects
040060             0003*  ; Author:	Dean Belfield
040060             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*  ;			Added MOS error codes for return in HL
040060             0006*  ; Created:	03/08/2022
040060             0007*  ; Last Updated:	10/08/2023
040060             0008*  ;
040060             0009*  ; Modinfo:
040060             0010*  ; 05/08/2022:	Added mos_feof
040060             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*  ; 13/10/2022:	Added mos_oscli
040060             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*  ; 19/05/2023:	Added sysvar_scrMode
040060             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*  ; 03/08/2023:	Added mos_setkbvector
040060             0028*  ; 10/08/2023:	Added mos_getkbmap
040060             0029*  
040060             0030*  ; VDP control (VDU 23, 0, n)
040060             0031*  ;
040060             0032*  vdp_gp:				EQU 80h
040060             0033*  vdp_keycode:		EQU 81h
040060             0034*  vdp_cursor:			EQU	82h
040060             0035*  vdp_scrchar:		EQU	83h
040060             0036*  vdp_scrpixel:		EQU	84h
040060             0037*  vdp_audio:			EQU	85h
040060             0038*  vdp_mode:			EQU	86h
040060             0039*  vdp_rtc:			EQU	87h
040060             0040*  vdp_keystate:		EQU	88h
040060             0041*  vdp_logicalcoords:	EQU	C0h
040060             0042*  vdp_terminalmode:	EQU	FFh
040060             0043*  
040060             0044*  ; MOS high level functions
040060             0045*  ;
040060             0046*  mos_getkey:			EQU	00h
040060             0047*  mos_load:			EQU	01h
040060             0048*  mos_save:			EQU	02h
040060             0049*  mos_cd:				EQU	03h
040060             0050*  mos_dir:			EQU	04h
040060             0051*  mos_del:			EQU	05h
040060             0052*  mos_ren:			EQU	06h
040060             0053*  mos_mkdir:			EQU	07h
040060             0054*  mos_sysvars:		EQU	08h
040060             0055*  mos_editline:		EQU	09h
040060             0056*  mos_fopen:			EQU	0Ah
040060             0057*  mos_fclose:			EQU	0Bh
040060             0058*  mos_fgetc:			EQU	0Ch
040060             0059*  mos_fputc:			EQU	0Dh
040060             0060*  mos_feof:			EQU	0Eh
040060             0061*  mos_getError:		EQU	0Fh
040060             0062*  mos_oscli:			EQU	10h
040060             0063*  mos_copy:			EQU	11h
040060             0064*  mos_getrtc:			EQU	12h
040060             0065*  mos_setrtc:			EQU	13h
040060             0066*  mos_setintvector:	EQU	14h
040060             0067*  mos_uopen:			EQU	15h
040060             0068*  mos_uclose:			EQU	16h
040060             0069*  mos_ugetc:			EQU	17h
040060             0070*  mos_uputc:			EQU	18h
040060             0071*  mos_getfil:			EQU	19h
040060             0072*  mos_fread:			EQU	1Ah
040060             0073*  mos_fwrite:			EQU	1Bh
040060             0074*  mos_flseek:			EQU	1Ch
040060             0075*  mos_setkbvector:	EQU	1Dh
040060             0076*  mos_getkbmap:		EQU	1Eh
040060             0077*  
040060             0078*  ; MOS program exit codes
040060             0079*  ;
040060             0080*  EXIT_OK:				EQU  0;	"OK",
040060             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*  ; FatFS file access functions
040060             0103*  ;
040060             0104*  ffs_fopen:			EQU	80h
040060             0105*  ffs_fclose:			EQU	81h
040060             0106*  ffs_fread:			EQU	82h
040060             0107*  ffs_fwrite:			EQU	83h
040060             0108*  ffs_flseek:			EQU	84h
040060             0109*  ffs_ftruncate:		EQU	85h
040060             0110*  ffs_fsync:			EQU	86h
040060             0111*  ffs_fforward:		EQU	87h
040060             0112*  ffs_fexpand:		EQU	88h
040060             0113*  ffs_fgets:			EQU	89h
040060             0114*  ffs_fputc:			EQU	8Ah
040060             0115*  ffs_fputs:			EQU	8Bh
040060             0116*  ffs_fprintf:		EQU	8Ch
040060             0117*  ffs_ftell:			EQU	8Dh
040060             0118*  ffs_feof:			EQU	8Eh
040060             0119*  ffs_fsize:			EQU	8Fh
040060             0120*  ffs_ferror:			EQU	90h
040060             0121*  
040060             0122*  ; FatFS directory access functions
040060             0123*  ;
040060             0124*  ffs_dopen:			EQU	91h
040060             0125*  ffs_dclose:			EQU	92h
040060             0126*  ffs_dread:			EQU	93h
040060             0127*  ffs_dfindfirst:		EQU	94h
040060             0128*  ffs_dfindnext:		EQU	95h
040060             0129*  
040060             0130*  ; FatFS file and directory management functions
040060             0131*  ;
040060             0132*  ffs_stat:			EQU	96h
040060             0133*  ffs_unlink:			EQU	97h
040060             0134*  ffs_rename:			EQU	98h
040060             0135*  ffs_chmod:			EQU	99h
040060             0136*  ffs_utime:			EQU	9Ah
040060             0137*  ffs_mkdir:			EQU	9Bh
040060             0138*  ffs_chdir:			EQU	9Ch
040060             0139*  ffs_chdrive:		EQU	9Dh
040060             0140*  ffs_getcwd:			EQU	9Eh
040060             0141*  
040060             0142*  ; FatFS volume management and system configuration functions
040060             0143*  ;
040060             0144*  ffs_mount:			EQU	9Fh
040060             0145*  ffs_mkfs:			EQU	A0h
040060             0146*  ffs_fdisk:			EQU	A1h
040060             0147*  ffs_getfree:		EQU	A2h
040060             0148*  ffs_getlabel:		EQU	A3h
040060             0149*  ffs_setlabel:		EQU	A4h
040060             0150*  ffs_setcp:			EQU	A5h
040060             0151*  
040060             0152*  ; File access modes
040060             0153*  ;
040060             0154*  fa_read:			EQU	01h
040060             0155*  fa_write:			EQU	02h
040060             0156*  fa_open_existing:	EQU	00h
040060             0157*  fa_create_new:		EQU	04h
040060             0158*  fa_create_always:	EQU	08h
040060             0159*  fa_open_always:		EQU	10h
040060             0160*  fa_open_append:		EQU	30h
040060             0161*  
040060             0162*  ; System variable indexes for api_sysvars
040060             0163*  ; Index into _sysvars in globals.inc
040060             0164*  ;
040060             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*  
040060             0192*  ; Flags for the VPD protocol
040060             0193*  ;
040060             0194*  vdp_pflag_cursor:		EQU	00000001b
040060             0195*  vdp_pflag_scrchar:		EQU	00000010b
040060             0196*  vdp_pflag_point:		EQU	00000100b
040060             0197*  vdp_pflag_audio:		EQU	00001000b
040060             0198*  vdp_pflag_mode:			EQU	00010000b
040060             0199*  vdp_pflag_rtc:			EQU	00100000b
040060             0200*  
040060             0201*  ;
040060             0202*  ; FatFS structures
040060             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*  ;
040060             0205*  ; Object ID and allocation information (FFOBJID)
040060             0206*  ;
040060             0207*  ; Indexes into FFOBJID structure
040060             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*  ;
040060             0215*  ; File object structure (FIL)
040060             0216*  ;
040060             0217*  ; Indexes into FIL structure
040060             0218*  fil_obj:		EQU 0	; 15: Object identifier
040060             0219*  fil_flag:		EQU	15 	;  1: File status flags
040060             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*  ;
040060             0227*  ; Directory object structure (DIR)
040060             0228*  ; Indexes into DIR structure
040060             0229*  dir_obj:		EQU  0	; 15: Object identifier
040060             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*  dir_clust:		EQU	19	;  4: Current cluster
040060             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*  ;
040060             0237*  ; File information structure (FILINFO)
040060             0238*  ;
040060             0239*  ; Indexes into FILINFO structure
040060             0240*  filinfo_fsize:		EQU 0	;   4: File size
040060             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*  ;
040060             0247*  ; Macro for calling the API
040060             0248*  ; Parameters:
040060             0249*  ; - function: One of the function numbers listed above
040060             0250*  ;
040060             0251*  	MACRO	MOSCALL	function
040060             0252*  			LD	A, function
040060             0253*  			RST.LIL	08h
040060             0254*  	ENDMACRO
040060             0030       include "functions.inc"
040060 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040100             0002*  
040100             0003*      MACRO printChar char
040100             0004*      LD A, char
040100             0005*      RST.LIL 10h
040100             0006*      ENDMACRO
040100             0007*  
040100             0008*  ; Simulated call to subroutine at HL
040100             0009*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040100             0010*  ; outputs: whatever the subroutine does, including HL and BC
040100             0011*  ; destroys: only what the subroutine does, but always BC
040100             0012*      MACRO callHL
040100             0013*      ld bc,@F ; Address of first instruction after the jump
040100             0014*      push bc ; which constitutes the return address
040100             0015*      jp (hl) ; Jump to the address in HL
040100             0016*  @@:
040100             0017*      ENDMACRO
040100             0018*  
040100             0019*  ; Simulated call to subroutine at IX
040100             0020*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040100             0021*  ; outputs: whatever the subroutine does, including IX and BC
040100             0022*  ; destroys: only what the subroutine does, but always BC
040100             0023*      MACRO callIX
040100             0024*      ld bc,@F ; Address of first instruction after the jump
040100             0025*      push bc ; which constitutes the return address
040100             0026*      jp (ix) ; Jump to the address in IX
040100             0027*  @@:
040100             0028*      ENDMACRO
040100             0029*  
040100             0030*  ; Simulated call to soubroutinte at IY
040100             0031*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040100             0032*  ; outputs: whatever the subroutine does, including IY and BC
040100             0033*  ; destroys: only what the subroutine does, but always BC
040100             0034*      MACRO callIY
040100             0035*      ld bc,@F ; Address of first instruction after the jump
040100             0036*      push bc ; which constitutes the return address
040100             0037*      jp (iy) ; Jump to the address in IY
040100             0038*  @@:
040100             0039*      ENDMACRO
040100             0040*  
040100             0041*  ; put the value in HLU into the accumulator
040100             0042*  ; destroys: af
040100             0043*      MACRO HLU_TO_A
040100             0044*      push hl ; 4 cycles
040100             0045*      inc sp ; 1 cycle
040100             0046*      pop af ; 4 cycles
040100             0047*      dec sp ; 1 cycle
040100             0048*      ; 10 cycles total
040100             0049*      ENDMACRO
040100             0050*  
040100             0051*  A_TO_HLU:
040100             0052*      ; call is 7 cycles
040100 22 0D 01 04 0053*      ld (@scratch),hl ; 7 cycles
040104 32 0F 01 04 0054*      ld (@scratch+2),a ; 5 cycles
040108 2A 0D 01 04 0055*      ld hl,(@scratch) ; 7 cycles
04010C C9          0056*      ret ; 6 cycles
04010D             0057*      ; 25 cycles total
04010D 00 00 00    0058*  @scratch: dl 0
040110             0059*  
040110             0060*      ; TODO: implement this
040110             0061*      ; MACRO A_TO_HLU
040110             0062*      ;     push.s af
040110             0063*      ;     inc sp
040110             0064*      ;     push.s hl
040110             0065*      ;     pop hl
040110             0066*      ;     inc sp
040110             0067*      ;     inc sp
040110             0068*      ; ENDMACRO
040110             0069*  
040110             0070*      MACRO PUSH_ALL
040110             0071*      ex af,af'
040110             0072*      exx
040110             0073*      push af
040110             0074*      push hl
040110             0075*      push bc
040110             0076*      push de
040110             0077*  
040110             0078*      ex af,af'
040110             0079*      exx
040110             0080*      push af
040110             0081*      push hl
040110             0082*      push bc
040110             0083*      push de
040110             0084*      push ix
040110             0085*      push iy
040110             0086*      ENDMACRO
040110             0087*  
040110             0088*      MACRO POP_ALL
040110             0089*      pop iy
040110             0090*      pop ix
040110             0091*      pop de
040110             0092*      pop bc
040110             0093*      pop hl
040110             0094*      pop af
040110             0095*      ex af,af'
040110             0096*      exx
040110             0097*  
040110             0098*      pop de
040110             0099*      pop bc
040110             0100*      pop hl
040110             0101*      pop af
040110             0102*      ex af,af'
040110             0103*      exx
040110             0104*      ENDMACRO
040110             0105*  
040110             0106*  ; Print a zero-terminated string inline with code, e.g.:
040110             0107*  ;
040110             0108*  ;    call printInline
040110             0109*  ;    ASCIZ "Hello, world!\r\n"
040110             0110*  ;
040110             0111*  ; Destroys: HL,AF
040110             0112*  printInline:
040110 E1          0113*      pop hl ; get the return address = pointer to start of string
040111 CD 17 01 04 0114*      call printString ; HL advances to end of string
040115 E5          0115*      push hl ; restore the return address = pointer to end of string
040116 C9          0116*      ret
040117             0117*  
040117             0118*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040117             0119*  ; Print a zero-terminated string
040117             0120*  ; HL: Pointer to string
040117             0121*  printString:
040117 C5          0122*      PUSH BC
040118 01 00 00 00 0123*      LD BC,0
04011C 3E 00       0124*      LD A,0
04011E 5B DF       0125*      RST.LIL 18h
040120 C1          0126*      POP BC
040121 C9          0127*      RET
040122             0128*  ; print a VDU sequence
040122             0129*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
040122             0130*  sendVDUsequence:
040122 C5          0131*      PUSH BC
040123 01 00 00 00 0132*      LD BC, 0
040127 4E          0133*      LD C, (HL)
040128 5B DF       0134*      RST.LIL 18h
04012A C1          0135*      POP BC
04012B C9          0136*      RET
04012C             0137*  ; Print Newline sequence to VDP
04012C             0138*  ; destroys bc
04012C             0139*  printNewLine:
04012C F5          0140*      push af ; for some reason rst.lil 10h sets carry flag
04012D 3E 0D       0141*      LD A, '\r'
04012F 5B D7       0142*      RST.LIL 10h
040131 3E 0A       0143*      LD A, '\n'
040133 5B D7       0144*      RST.LIL 10h
040135 F1          0145*      pop af
040136 C9          0146*      RET
040137             0147*  
040137             0148*  ; Print a 24-bit HEX number
040137             0149*  ; HLU: Number to print
040137             0150*  printHex24:
040137             0151*      HLU_TO_A
040137 E5          0001*M     push hl ; 4 cycles
040138 33          0002*M     inc sp ; 1 cycle
040139 F1          0003*M     pop af ; 4 cycles
04013A 3B          0004*M     dec sp ; 1 cycle
04013B             0005*M     ; 10 cycles total
04013B CD 45 01 04 0152*      CALL printHex8
04013F             0153*  ; Print a 16-bit HEX number
04013F             0154*  ; HL: Number to print
04013F             0155*  printHex16:
04013F 7C          0156*      LD A,H
040140 CD 45 01 04 0157*      CALL printHex8
040144 7D          0158*      LD A,L
040145             0159*  ; Print an 8-bit HEX number
040145             0160*  ; A: Number to print
040145             0161*  printHex8:
040145 4F          0162*      LD C,A
040146 1F          0163*      RRA
040147 1F          0164*      RRA
040148 1F          0165*      RRA
040149 1F          0166*      RRA
04014A CD 4F 01 04 0167*      CALL @F
04014E 79          0168*      LD A,C
04014F             0169*  @@:
04014F E6 0F       0170*      AND 0Fh
040151 C6 90       0171*      ADD A,90h
040153 27          0172*      DAA
040154 CE 40       0173*      ADC A,40h
040156 27          0174*      DAA
040157 5B D7       0175*      RST.LIL 10h
040159 C9          0176*      RET
04015A             0177*  
04015A             0178*  printHexA:
04015A F5          0179*      push af
04015B C5          0180*      push bc
04015C CD 45 01 04 0181*      call printHex8
040160 3E 20       0182*      ld a,' '
040162 5B D7       0183*      rst.lil 10h
040164 C1          0184*      pop bc
040165 F1          0185*      pop af
040166 C9          0186*      ret
040167             0187*  
040167             0188*  printHexHL:
040167 F5          0189*      push af
040168 C5          0190*      push bc
040169 CD 3F 01 04 0191*      call printHex16
04016D 3E 20       0192*      ld a,' '
04016F 5B D7       0193*      rst.lil 10h
040171 C1          0194*      pop bc
040172 F1          0195*      pop af
040173 C9          0196*      ret
040174             0197*  
040174             0198*  printHexUHL:
040174 F5          0199*      push af
040175 C5          0200*      push bc
040176 CD 37 01 04 0201*      call printHex24
04017A 3E 20       0202*      ld a,' '
04017C 5B D7       0203*      rst.lil 10h
04017E C1          0204*      pop bc
04017F F1          0205*      pop af
040180 C9          0206*      ret
040181             0207*  
040181             0208*  printHexAUHL:
040181 F5          0209*      push af
040182 C5          0210*      push bc
040183 CD 45 01 04 0211*      call printHex8
040187 3E 2E       0212*      ld a,'.'
040189 5B D7       0213*      rst.lil 10h
04018B CD 37 01 04 0214*      call printHex24
04018F 3E 20       0215*      ld a,' '
040191 5B D7       0216*      rst.lil 10h
040193 C1          0217*      pop bc
040194 F1          0218*      pop af
040195 C9          0219*      ret
040196             0220*  
040196             0221*  printHexABHL:
040196             0222*  ; preserve registers
040196 C5          0223*      push bc ; b will be ok c will not
040197 F5          0224*      push af ; will get totally destroyed
040198             0225*  ; print a
040198 CD 45 01 04 0226*      call printHex8
04019C             0227*  ; print b
04019C 78          0228*      ld a,b
04019D CD 45 01 04 0229*      call printHex8
0401A1             0230*  ; print hl
0401A1 CD 3F 01 04 0231*      call printHex16
0401A5             0232*  ; restore registers
0401A5 F1          0233*      pop af
0401A6 C1          0234*      pop bc
0401A7 C9          0235*      ret
0401A8             0236*  
0401A8             0237*  printHexBHL:
0401A8             0238*  ; preserve registers
0401A8 C5          0239*      push bc ; b will be ok c will not
0401A9 F5          0240*      push af ; will get totally destroyed
0401AA             0241*  ; print b
0401AA 78          0242*      ld a,b
0401AB CD 45 01 04 0243*      call printHex8
0401AF             0244*  ; print hl
0401AF CD 3F 01 04 0245*      call printHex16
0401B3             0246*  ; restore registers
0401B3 F1          0247*      pop af
0401B4 C1          0248*      pop bc
0401B5 C9          0249*      ret
0401B6             0250*  
0401B6             0251*  printHexCDE:
0401B6             0252*  ; preserve registers
0401B6 C5          0253*      push bc ; b will be ok c will not
0401B7 F5          0254*      push af ; will get totally destroyed
0401B8             0255*  ; print c
0401B8 79          0256*      ld a,c
0401B9 CD 45 01 04 0257*      call printHex8
0401BD             0258*  ; print de
0401BD EB          0259*      ex de,hl
0401BE CD 3F 01 04 0260*      call printHex16
0401C2 EB          0261*      ex de,hl
0401C3             0262*  ; restore registers
0401C3 F1          0263*      pop af
0401C4 C1          0264*      pop bc
0401C5 C9          0265*      ret
0401C6             0266*  
0401C6             0267*  printHexUIX:
0401C6             0268*  ; store everything in scratch
0401C6 22 4F 06 04 0269*      ld (uhl),hl
0401CA ED 43 52 06 0270*      ld (ubc),bc
       04          
0401CF ED 53 55 06 0271*      ld (ude),de
       04          
0401D4 DD 22 58 06 0272*      ld (uix),ix
       04          
0401D9 FD 22 5B 06 0273*      ld (uiy),iy
       04          
0401DE F5          0274*      push af ; fml
0401DF             0275*  
0401DF 21 E6 05 04 0276*      ld hl,str_ixu
0401E3 CD 17 01 04 0277*      call printString
0401E7 2A 58 06 04 0278*      ld hl,(uix)
0401EB CD 37 01 04 0279*      call printHex24
0401EF CD 2C 01 04 0280*      call printNewLine
0401F3             0281*  
0401F3             0282*  ; restore everything
0401F3 2A 4F 06 04 0283*      ld hl, (uhl)
0401F7 ED 4B 52 06 0284*      ld bc, (ubc)
       04          
0401FC ED 5B 55 06 0285*      ld de, (ude)
       04          
040201 DD 2A 58 06 0286*      ld ix, (uix)
       04          
040206 FD 2A 5B 06 0287*      ld iy, (uiy)
       04          
04020B F1          0288*      pop af
04020C             0289*  ; all done
04020C C9          0290*      ret
04020D             0291*  
04020D             0292*  ; Print a 0x HEX prefix
04020D             0293*  DisplayHexPrefix:
04020D 3E 30       0294*      LD A, '0'
04020F 5B D7       0295*      RST.LIL 10h
040211 3E 78       0296*      LD A, 'x'
040213 5B D7       0297*      RST.LIL 10h
040215 C9          0298*      RET
040216             0299*  
040216             0300*      MACRO printDecBC
040216             0301*      push hl
040216             0302*      push bc
040216             0303*      pop hl
040216             0304*      call printDec
040216             0305*      pop hl
040216             0306*      ENDMACRO
040216             0307*  
040216             0308*      MACRO printDecDE
040216             0309*      push hl
040216             0310*      push de
040216             0311*      pop hl
040216             0312*      call printDec
040216             0313*      pop hl
040216             0314*      ENDMACRO
040216             0315*  
040216             0316*      MACRO printDecHL
040216             0317*      call printDec
040216             0318*      ENDMACRO
040216             0319*  
040216             0320*      MACRO printDecIX
040216             0321*      push hl
040216             0322*      push ix
040216             0323*      pop hl
040216             0324*      call printDec
040216             0325*      pop hl
040216             0326*      ENDMACRO
040216             0327*  
040216             0328*      MACRO printDecIY
040216             0329*      push hl
040216             0330*      push iy
040216             0331*      pop hl
040216             0332*      call printDec
040216             0333*      pop hl
040216             0334*      ENDMACRO
040216             0335*  
040216             0336*  
040216             0337*  ; Prints the right justified decimal value in HL without leading zeroes
040216             0338*  ; HL : Value to print
040216             0339*  ; preserves all registers and flags
040216             0340*  printDec:
040216             0341*  ; BEGIN MY CODE
040216             0342*  ; back up all the things
040216 F5          0343*      push af
040217 C5          0344*      push bc
040218 D5          0345*      push de
040219 E5          0346*      push hl
04021A             0347*  ; END MY CODE
04021A 11 42 02 04 0348*      LD DE, _printDecBuffer
04021E CD 52 02 04 0349*      CALL u24_to_ascii
040222             0350*  ; BEGIN MY CODE
040222             0351*  ; replace leading zeroes with spaces
040222 21 42 02 04 0352*      LD HL, _printDecBuffer
040226 06 07       0353*      ld B, 7 ; if HL was 0, we want to keep the final zero
040228             0354*  @loop:
040228 7E          0355*      LD A, (HL)
040229 FE 30       0356*      CP '0'
04022B C2 35 02 04 0357*      JP NZ, @done
04022F 3E 20       0358*      LD A, ' '
040231 77          0359*      LD (HL), A
040232 23          0360*      INC HL
040233             0361*      ; CALL vdu_cursor_forward
040233 10 F3       0362*      DJNZ @loop
040235             0363*  @done:
040235             0364*  ; END MY CODE
040235 21 42 02 04 0365*      LD HL, _printDecBuffer
040239 CD 17 01 04 0366*      CALL printString
04023D             0367*  ; BEGIN MY CODE
04023D             0368*  ; restore all the things
04023D E1          0369*      pop hl
04023E D1          0370*      pop de
04023F C1          0371*      pop bc
040240 F1          0372*      pop af
040241             0373*  ; END MY CODE
040241 C9          0374*      RET
040242 00 00 00 00 0375*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040252             0376*  
040252             0377*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
040252             0378*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040252             0379*  ; so it will allways be 8 characters length
040252             0380*  ; HL : Value to convert to string
040252             0381*  ; DE : pointer to buffer, at least 8 byte + 0
040252             0382*  u24_to_ascii:
040252 01 80 69 67 0383*      LD BC,-10000000
040256 CD 89 02 04 0384*      CALL @one_digit
04025A 01 C0 BD F0 0385*      LD BC,-1000000
04025E CD 89 02 04 0386*      CALL @one_digit
040262 01 60 79 FE 0387*      LD BC,-100000
040266 CD 89 02 04 0388*      CALL @one_digit
04026A 01 F0 D8 FF 0389*      LD BC,-10000
04026E CD 89 02 04 0390*      CALL @one_digit
040272 01 18 FC FF 0391*      LD BC,-1000
040276 CD 89 02 04 0392*      CALL @one_digit
04027A 01 9C FF FF 0393*      LD BC,-100
04027E CD 89 02 04 0394*      CALL @one_digit
040282 0E F6       0395*      LD C,-10
040284 CD 89 02 04 0396*      CALL @one_digit
040288 48          0397*      LD C,B
040289             0398*  @one_digit:
040289 3E 2F       0399*      LD A,'0'-1
04028B             0400*  @divide_me:
04028B 3C          0401*      INC A
04028C 09          0402*      ADD HL,BC
04028D 38 FC       0403*      JR C,@divide_me
04028F ED 42       0404*      SBC HL,BC
040291 12          0405*      LD (DE),A
040292 13          0406*      INC DE
040293 C9          0407*      RET
040294             0408*  
040294             0409*  print_u24:
040294 D5          0410*      push de
040295 E5          0411*      push hl
040296 11 42 02 04 0412*      ld de,_printDecBuffer
04029A CD 52 02 04 0413*      call u24_to_ascii
04029E 21 42 02 04 0414*      ld hl,_printDecBuffer
0402A2 CD 17 01 04 0415*      call printString
0402A6 3E 20       0416*      ld a,' '
0402A8 5B D7       0417*      rst.lil 10h
0402AA E1          0418*      pop hl
0402AB D1          0419*      pop de
0402AC C9          0420*      ret
0402AD             0421*  
0402AD             0422*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
0402AD             0423*  ; HL : Value to convert to string (integer part in H, fractional part in L)
0402AD             0424*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
0402AD             0425*  u168_to_ascii:
0402AD             0426*  ; add a leading space to make room for sign flag if needed
0402AD 3E 20       0427*      ld a,' '
0402AF 12          0428*      ld (de),a
0402B0 13          0429*      inc de
0402B1             0430*  ; Convert integer part
0402B1 E5          0431*      push hl ; Save HL (we’ll need the fractional part later)
0402B2 CD 6D 09 04 0432*      call hlu_udiv256 ; Shift to get integer portion in HL
0402B6 01 F0 D8 FF 0433*      ld bc, -10000
0402BA CD DD 02 04 0434*      call @one_int
0402BE 01 18 FC FF 0435*      ld bc, -1000
0402C2 CD DD 02 04 0436*      call @one_int
0402C6 01 9C FF FF 0437*      ld bc, -100
0402CA CD DD 02 04 0438*      call @one_int
0402CE 0E F6       0439*      ld c, -10
0402D0 CD DD 02 04 0440*      call @one_int
0402D4 48          0441*      ld c, b
0402D5 CD DD 02 04 0442*      call @one_int
0402D9 C3 E8 02 04 0443*      jp @frac ; Jump to fractional part conversion
0402DD             0444*  @one_int:
0402DD 3E 2F       0445*      ld a, '0' - 1 ; Start ASCII character at '0'
0402DF             0446*  @divide_me:
0402DF 3C          0447*      inc a
0402E0 09          0448*      add hl, bc ; Accumulate until overflow
0402E1 38 FC       0449*      jr c, @divide_me
0402E3 ED 42       0450*      sbc hl, bc ; Remove excess after overflow
0402E5 12          0451*      ld (de), a ; Store ASCII digit
0402E6 13          0452*      inc de
0402E7 C9          0453*      ret
0402E8             0454*  ; Convert fractional part
0402E8             0455*  @frac:
0402E8 3E 2E       0456*      ld a, '.' ; Decimal point
0402EA 12          0457*      ld (de), a
0402EB 13          0458*      inc de
0402EC E1          0459*      pop hl ; Restore HL with original fraction
0402ED 06 03       0460*      ld b, 3 ; Loop counter for 3 fractional digits
0402EF             0461*  @frac_loop:
0402EF 26 0A       0462*      ld h, 10 ; Load multiplier for fractional part
0402F1 ED 6C       0463*      mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0402F3 3E 30       0464*      ld a, '0'
0402F5 84          0465*      add a, h ; Convert integer part to ASCII
0402F6 12          0466*      ld (de), a
0402F7 13          0467*      inc de
0402F8 10 F5       0468*      djnz @frac_loop ; Repeat for each fractional digit
0402FA             0469*  ; Add null terminator
0402FA AF          0470*      xor a ; Null terminator
0402FB 12          0471*      ld (de), a
0402FC C9          0472*      ret
0402FD             0473*  
0402FD             0474*  print_u168:
0402FD D5          0475*      push de
0402FE E5          0476*      push hl
0402FF 11 42 02 04 0477*      ld de,_printDecBuffer
040303 CD AD 02 04 0478*      call u168_to_ascii
040307 21 42 02 04 0479*      ld hl,_printDecBuffer
04030B CD 17 01 04 0480*      call printString
04030F E1          0481*      pop hl
040310 D1          0482*      pop de
040311 C9          0483*      ret
040312             0484*  
040312             0485*  ; signed version of u168_to_ascii
040312             0486*  s168_to_ascii:
040312 D5          0487*      push de ; save starting address of buffer
040313 CD 06 09 04 0488*      call hlu_abs
040317 F5          0489*      push af ; save sign flag
040318 CD AD 02 04 0490*      call u168_to_ascii
04031C F1          0491*      pop af ; restore sign flag
04031D D1          0492*      pop de ; restore starting address of buffer
04031E F0          0493*      ret p ; hlu was positive so nothing to do
04031F 3E 2D       0494*      ld a,'-'
040321 12          0495*      ld (de),a
040322 C9          0496*      ret
040323             0497*  
040323             0498*  print_s168:
040323 D5          0499*      push de
040324 E5          0500*      push hl
040325 11 42 02 04 0501*      ld de,_printDecBuffer
040329 CD 12 03 04 0502*      call s168_to_ascii
04032D 21 42 02 04 0503*      ld hl,_printDecBuffer
040331 CD 17 01 04 0504*      call printString
040335 E1          0505*      pop hl
040336 D1          0506*      pop de
040337 C9          0507*      ret
040338             0508*  
040338             0509*  print_s168_hl:
040338 F5          0510*      push af
040339 E5          0511*      push hl
04033A CD 23 03 04 0512*      call print_s168
04033E 3E 20       0513*      ld a,' '
040340 5B D7       0514*      rst.lil 10h
040342 E1          0515*      pop hl
040343 F1          0516*      pop af
040344 C9          0517*      ret
040345             0518*  
040345             0519*  print_s168_bc:
040345 F5          0520*      push af
040346 C5          0521*      push bc
040347 E5          0522*      push hl
040348 C5          0523*      push bc
040349 E1          0524*      pop hl
04034A CD 23 03 04 0525*      call print_s168
04034E 3E 20       0526*      ld a,' '
040350 5B D7       0527*      rst.lil 10h
040352 E1          0528*      pop hl
040353 C1          0529*      pop bc
040354 F1          0530*      pop af
040355 C9          0531*      ret
040356             0532*  
040356             0533*  print_s168_de:
040356 F5          0534*      push af
040357 D5          0535*      push de
040358 E5          0536*      push hl
040359 EB          0537*      ex de,hl
04035A CD 23 03 04 0538*      call print_s168
04035E 3E 20       0539*      ld a,' '
040360 5B D7       0540*      rst.lil 10h
040362 E1          0541*      pop hl
040363 D1          0542*      pop de
040364 F1          0543*      pop af
040365 C9          0544*      ret
040366             0545*  
040366             0546*  print_s168_hl_bc_de:
040366 F5          0547*      push af
040367 C5          0548*      push bc
040368 D5          0549*      push de
040369 E5          0550*      push hl
04036A CD 23 03 04 0551*      call print_s168
04036E 3E 20       0552*      ld a,' '
040370 5B D7       0553*      rst.lil 10h
040372 C5          0554*      push bc
040373 E1          0555*      pop hl
040374 CD 23 03 04 0556*      call print_s168
040378 3E 20       0557*      ld a,' '
04037A 5B D7       0558*      rst.lil 10h
04037C EB          0559*      ex de,hl
04037D CD 23 03 04 0560*      call print_s168
040381 3E 20       0561*      ld a,' '
040383 5B D7       0562*      rst.lil 10h
040385 E1          0563*      pop hl
040386 D1          0564*      pop de
040387 C1          0565*      pop bc
040388 F1          0566*      pop af
040389 C9          0567*      ret
04038A             0568*  
04038A             0569*  print_s168_bc_de:
04038A F5          0570*      push af
04038B C5          0571*      push bc
04038C D5          0572*      push de
04038D C5          0573*      push bc
04038E E1          0574*      pop hl
04038F CD 23 03 04 0575*      call print_s168
040393 3E 20       0576*      ld a,' '
040395 5B D7       0577*      rst.lil 10h
040397 EB          0578*      ex de,hl
040398 CD 23 03 04 0579*      call print_s168
04039C 3E 20       0580*      ld a,' '
04039E 5B D7       0581*      rst.lil 10h
0403A0 E1          0582*      pop hl
0403A1 D1          0583*      pop de
0403A2 C1          0584*      pop bc
0403A3 F1          0585*      pop af
0403A4 C9          0586*      ret
0403A5             0587*  
0403A5             0588*  print_s168_a:
0403A5 F5          0589*      push af
0403A6 C5          0590*      push bc
0403A7 E5          0591*      push hl
0403A8 21 00 00 00 0592*      ld hl,0
0403AC 6F          0593*      ld l,a
0403AD CD 38 03 04 0594*      call print_s168_hl
0403B1 E1          0595*      pop hl
0403B2 C1          0596*      pop bc
0403B3 F1          0597*      pop af
0403B4 C9          0598*      ret
0403B5             0599*  
0403B5             0600*  ; #### new functions added by Brandon R. Gates ####
0403B5             0601*  
0403B5             0602*  ; print the binary representation of the 8-bit value in a
0403B5             0603*  ; destroys a, hl, bc
0403B5             0604*  printBin8:
0403B5 06 08       0605*      ld b,8 ; loop counter for 8 bits
0403B7 21 D2 03 04 0606*      ld hl,@cmd ; set hl to the low byte of the output string
0403BB             0607*      ; (which will be the high bit of the value in a)
0403BB             0608*  @loop:
0403BB 07          0609*      rlca ; put the next highest bit into carry
0403BC 38 04       0610*      jr c,@one
0403BE 36 30       0611*      ld (hl),'0'
0403C0 18 02       0612*      jr @next_bit
0403C2             0613*  @one:
0403C2 36 31       0614*      ld (hl),'1'
0403C4             0615*  @next_bit:
0403C4 23          0616*      inc hl
0403C5 10 F4       0617*      djnz @loop
0403C7             0618*  ; print it
0403C7 21 D2 03 04 0619*      ld hl,@cmd
0403CB 01 08 00 00 0620*      ld bc,@end-@cmd
0403CF 5B DF       0621*      rst.lil $18
0403D1 C9          0622*      ret
0403D2             0623*  @cmd: ds 8 ; eight bytes for eight bits
0403DA             0624*  @end:
0403DA             0625*  
0403DA             0626*  ; print the binary representation of the 8-bit value in a
0403DA             0627*  ; in reverse order (lsb first)
0403DA             0628*  ; destroys a, hl, bc
0403DA             0629*  printBin8Rev:
0403DA 06 08       0630*      ld b,8 ; loop counter for 8 bits
0403DC 21 F7 03 04 0631*      ld hl,@cmd ; set hl to the low byte of the output string
0403E0             0632*      ; (which will be the high bit of the value in a)
0403E0             0633*  @loop:
0403E0 0F          0634*      rrca ; put the next lowest bit into carry
0403E1 38 04       0635*      jr c,@one
0403E3 36 30       0636*      ld (hl),'0'
0403E5 18 02       0637*      jr @next_bit
0403E7             0638*  @one:
0403E7 36 31       0639*      ld (hl),'1'
0403E9             0640*  @next_bit:
0403E9 23          0641*      inc hl
0403EA 10 F4       0642*      djnz @loop
0403EC             0643*  ; print it
0403EC 21 F7 03 04 0644*      ld hl,@cmd
0403F0 01 08 00 00 0645*      ld bc,@end-@cmd
0403F4 5B DF       0646*      rst.lil $18
0403F6 C9          0647*      ret
0403F7             0648*  @cmd: ds 8 ; eight bytes for eight bits
0403FF             0649*  @end:
0403FF             0650*  
0403FF             0651*  ; print registers to screen in hexidecimal format
0403FF             0652*  ; inputs: none
0403FF             0653*  ; outputs: values of every register printed to screen
0403FF             0654*  ;    values of each register in global scratch memory
0403FF             0655*  ; destroys: nothing
0403FF             0656*  stepRegistersHex:
0403FF             0657*  ; store everything in scratch
0403FF 22 4F 06 04 0658*      ld (uhl),hl
040403 ED 43 52 06 0659*      ld (ubc),bc
       04          
040408 ED 53 55 06 0660*      ld (ude),de
       04          
04040D DD 22 58 06 0661*      ld (uix),ix
       04          
040412 FD 22 5B 06 0662*      ld (uiy),iy
       04          
040417 F5          0663*      push af ; fml
040418 E1          0664*      pop hl ; thanks, zilog
040419 22 4C 06 04 0665*      ld (uaf),hl
04041D F5          0666*      push af ; dammit
04041E             0667*  
04041E             0668*  ; home the cursor
04041E             0669*      ; call vdu_home_cursor
04041E             0670*  
04041E             0671*  ; print each register
04041E 21 D2 05 04 0672*      ld hl,str_afu
040422 CD 17 01 04 0673*      call printString
040426 2A 4C 06 04 0674*      ld hl,(uaf)
04042A CD 37 01 04 0675*      call printHex24
04042E CD 2C 01 04 0676*      call printNewLine
040432             0677*  
040432 21 D7 05 04 0678*      ld hl,str_hlu
040436 CD 17 01 04 0679*      call printString
04043A 2A 4F 06 04 0680*      ld hl,(uhl)
04043E CD 37 01 04 0681*      call printHex24
040442 CD 2C 01 04 0682*      call printNewLine
040446             0683*  
040446 21 DC 05 04 0684*      ld hl,str_bcu
04044A CD 17 01 04 0685*      call printString
04044E 2A 52 06 04 0686*      ld hl,(ubc)
040452 CD 37 01 04 0687*      call printHex24
040456 CD 2C 01 04 0688*      call printNewLine
04045A             0689*  
04045A 21 E1 05 04 0690*      ld hl,str_deu
04045E CD 17 01 04 0691*      call printString
040462 2A 55 06 04 0692*      ld hl,(ude)
040466 CD 37 01 04 0693*      call printHex24
04046A CD 2C 01 04 0694*      call printNewLine
04046E             0695*  
04046E 21 E6 05 04 0696*      ld hl,str_ixu
040472 CD 17 01 04 0697*      call printString
040476 2A 58 06 04 0698*      ld hl,(uix)
04047A CD 37 01 04 0699*      call printHex24
04047E CD 2C 01 04 0700*      call printNewLine
040482             0701*  
040482 21 EB 05 04 0702*      ld hl,str_iyu
040486 CD 17 01 04 0703*      call printString
04048A 2A 5B 06 04 0704*      ld hl,(uiy)
04048E CD 37 01 04 0705*      call printHex24
040492 CD 2C 01 04 0706*      call printNewLine
040496             0707*  
040496             0708*      ; call vsync
040496             0709*  
040496 CD 2C 01 04 0710*      call printNewLine
04049A             0711*  
04049A             0712*  ; check for right shift key and quit if pressed
04049A             0713*      MOSCALL mos_getkbmap
04049A 3E 1E       0001*M 			LD	A, function
04049C 5B CF       0002*M 			RST.LIL	08h
04049E             0714*  @stayhere:
04049E             0715*  ; 7 RightShift
04049E DD CB 00 76 0716*      bit 6,(ix+0)
0404A2 20 02       0717*      jr nz,@RightShift
0404A4 18 F8       0718*      jr @stayhere
0404A6             0719*  @RightShift:
0404A6 DD CB 0E 86 0720*      res 0,(ix+14) ; debounce the key (hopefully)
0404AA 3E 80       0721*      ld a,%10000000
0404AC             0722*      ; call multiPurposeDelay
0404AC             0723*  
0404AC             0724*  ; restore everything
0404AC 2A 4F 06 04 0725*      ld hl, (uhl)
0404B0 ED 4B 52 06 0726*      ld bc, (ubc)
       04          
0404B5 ED 5B 55 06 0727*      ld de, (ude)
       04          
0404BA DD 2A 58 06 0728*      ld ix, (uix)
       04          
0404BF FD 2A 5B 06 0729*      ld iy, (uiy)
       04          
0404C4 F1          0730*      pop af
0404C5             0731*  ; all done
0404C5 C9          0732*      ret
0404C6             0733*  
0404C6             0734*  ; print registers to screen in hexidecimal format
0404C6             0735*  ; inputs: none
0404C6             0736*  ; outputs: values of every register printed to screen
0404C6             0737*  ;    values of each register in global scratch memory
0404C6             0738*  ; destroys: nothing
0404C6             0739*  dumpRegistersHex:
0404C6             0740*  ; store everything in scratch
0404C6 22 4F 06 04 0741*      ld (uhl),hl
0404CA ED 43 52 06 0742*      ld (ubc),bc
       04          
0404CF ED 53 55 06 0743*      ld (ude),de
       04          
0404D4 DD 22 58 06 0744*      ld (uix),ix
       04          
0404D9 FD 22 5B 06 0745*      ld (uiy),iy
       04          
0404DE F5          0746*      push af ; fml
0404DF E1          0747*      pop hl ; thanks, zilog
0404E0 22 4C 06 04 0748*      ld (uaf),hl
0404E4 F5          0749*      push af ; dammit
0404E5             0750*  
0404E5             0751*  ; home the cursor
0404E5             0752*      ; call vdu_home_cursor
0404E5             0753*      ; call printNewLine
0404E5             0754*  
0404E5             0755*  ; print each register
0404E5 21 D2 05 04 0756*      ld hl,str_afu
0404E9 CD 17 01 04 0757*      call printString
0404ED 2A 4C 06 04 0758*      ld hl,(uaf)
0404F1 CD 37 01 04 0759*      call printHex24
0404F5 CD 2C 01 04 0760*      call printNewLine
0404F9             0761*  
0404F9 21 D7 05 04 0762*      ld hl,str_hlu
0404FD CD 17 01 04 0763*      call printString
040501 2A 4F 06 04 0764*      ld hl,(uhl)
040505 CD 37 01 04 0765*      call printHex24
040509 CD 2C 01 04 0766*      call printNewLine
04050D             0767*  
04050D 21 DC 05 04 0768*      ld hl,str_bcu
040511 CD 17 01 04 0769*      call printString
040515 2A 52 06 04 0770*      ld hl,(ubc)
040519 CD 37 01 04 0771*      call printHex24
04051D CD 2C 01 04 0772*      call printNewLine
040521             0773*  
040521 21 E1 05 04 0774*      ld hl,str_deu
040525 CD 17 01 04 0775*      call printString
040529 2A 55 06 04 0776*      ld hl,(ude)
04052D CD 37 01 04 0777*      call printHex24
040531 CD 2C 01 04 0778*      call printNewLine
040535             0779*  
040535 21 E6 05 04 0780*      ld hl,str_ixu
040539 CD 17 01 04 0781*      call printString
04053D 2A 58 06 04 0782*      ld hl,(uix)
040541 CD 37 01 04 0783*      call printHex24
040545 CD 2C 01 04 0784*      call printNewLine
040549             0785*  
040549 21 EB 05 04 0786*      ld hl,str_iyu
04054D CD 17 01 04 0787*      call printString
040551 2A 5B 06 04 0788*      ld hl,(uiy)
040555 CD 37 01 04 0789*      call printHex24
040559             0790*      ; call printNewLine
040559             0791*  
040559             0792*      ; call vdu_vblank
040559             0793*  
040559             0794*      ; call printNewLine
040559             0795*  ; restore everything
040559 2A 4F 06 04 0796*      ld hl, (uhl)
04055D ED 4B 52 06 0797*      ld bc, (ubc)
       04          
040562 ED 5B 55 06 0798*      ld de, (ude)
       04          
040567 DD 2A 58 06 0799*      ld ix, (uix)
       04          
04056C FD 2A 5B 06 0800*      ld iy, (uiy)
       04          
040571 F1          0801*      pop af
040572             0802*  ; all done
040572 C9          0803*      ret
040573             0804*  
040573             0805*  dumpRegistersHexPrime:
040573 D9          0806*      exx
040574 08          0807*      ex af,af'
040575 CD C6 04 04 0808*      call dumpRegistersHex
040579 08          0809*      ex af,af'
04057A D9          0810*      exx
04057B C9          0811*      ret
04057C             0812*  
04057C             0813*  ; additionally dump prime registers
04057C             0814*  ; inputs: none
04057C             0815*  ; outputs: values of every register printed to screen
04057C             0816*  ; destroys: nothing
04057C             0817*  dumpRegistersHexAll:
04057C CD C6 04 04 0818*      call dumpRegistersHex
040580 08          0819*      ex af,af'
040581 D9          0820*      exx
040582 CD C6 04 04 0821*      call dumpRegistersHex
040586 08          0822*      ex af,af'
040587 D9          0823*      exx
040588 C9          0824*      ret
040589             0825*  
040589             0826*  ; print hlu to screen in hexidecimal format
040589             0827*  ; inputs: none
040589             0828*  ; destroys: nothing
040589             0829*  print_hex_hl:
040589 F5          0830*      push af
04058A E5          0831*      push hl
04058B 21 D7 05 04 0832*      ld hl,str_hlu
04058F CD 17 01 04 0833*      call printString
040593 E1          0834*      pop hl
040594 E5          0835*      push hl
040595 CD 37 01 04 0836*      call printHex24
040599 3E 20       0837*      ld a,' '
04059B 5B D7       0838*      rst.lil 10h
04059D E1          0839*      pop hl
04059E F1          0840*      pop af
04059F C9          0841*      ret
0405A0             0842*  
0405A0             0843*  ; print bcu to screen in hexidecimal format
0405A0             0844*  ; inputs: none
0405A0             0845*  ; destroys: nothing
0405A0             0846*  print_hex_bc:
0405A0 F5          0847*      push af
0405A1 E5          0848*      push hl
0405A2 C5          0849*      push bc
0405A3 21 DC 05 04 0850*      ld hl,str_bcu
0405A7 CD 17 01 04 0851*      call printString
0405AB E1          0852*      pop hl
0405AC E5          0853*      push hl
0405AD CD 37 01 04 0854*      call printHex24
0405B1 3E 20       0855*      ld a,' '
0405B3 5B D7       0856*      rst.lil 10h
0405B5 C1          0857*      pop bc
0405B6 E1          0858*      pop hl
0405B7 F1          0859*      pop af
0405B8 C9          0860*      ret
0405B9             0861*  
0405B9             0862*  ; print deu to screen in hexidecimal format
0405B9             0863*  ; inputs: none
0405B9             0864*  ; destroys: nothing
0405B9             0865*  print_hex_de:
0405B9 F5          0866*      push af
0405BA E5          0867*      push hl
0405BB D5          0868*      push de
0405BC 21 E1 05 04 0869*      ld hl,str_deu
0405C0 CD 17 01 04 0870*      call printString
0405C4 E1          0871*      pop hl
0405C5 E5          0872*      push hl
0405C6 CD 37 01 04 0873*      call printHex24
0405CA 3E 20       0874*      ld a,' '
0405CC 5B D7       0875*      rst.lil 10h
0405CE D1          0876*      pop de
0405CF E1          0877*      pop hl
0405D0 F1          0878*      pop af
0405D1 C9          0879*      ret
0405D2             0880*  
0405D2 20 61 66 3D 0881*  str_afu: db " af=",0
       00          
0405D7 20 68 6C 3D 0882*  str_hlu: db " hl=",0
       00          
0405DC 20 62 63 3D 0883*  str_bcu: db " bc=",0
       00          
0405E1 20 64 65 3D 0884*  str_deu: db " de=",0
       00          
0405E6 20 69 78 3D 0885*  str_ixu: db " ix=",0
       00          
0405EB 20 69 79 3D 0886*  str_iyu: db " iy=",0
       00          
0405F0             0887*  
0405F0             0888*  ; print udeuhl to screen in hexidecimal format
0405F0             0889*  ; inputs: none
0405F0             0890*  ; outputs: concatenated hexidecimal udeuhl
0405F0             0891*  ; destroys: nothing
0405F0             0892*  dumpUDEUHLHex:
0405F0             0893*  ; store everything in scratch
0405F0 22 4F 06 04 0894*      ld (uhl),hl
0405F4 ED 43 52 06 0895*      ld (ubc),bc
       04          
0405F9 ED 53 55 06 0896*      ld (ude),de
       04          
0405FE DD 22 58 06 0897*      ld (uix),ix
       04          
040603 FD 22 5B 06 0898*      ld (uiy),iy
       04          
040608 F5          0899*      push af
040609             0900*  
040609             0901*  ; print each register
040609             0902*  
040609 21 43 06 04 0903*      ld hl,str_udeuhl
04060D CD 17 01 04 0904*      call printString
040611 2A 55 06 04 0905*      ld hl,(ude)
040615 CD 37 01 04 0906*      call printHex24
040619 3E 2E       0907*      ld a,'.' ; print a dot to separate the values
04061B 5B D7       0908*      rst.lil 10h
04061D 2A 4F 06 04 0909*      ld hl,(uhl)
040621 CD 37 01 04 0910*      call printHex24
040625 CD 2C 01 04 0911*      call printNewLine
040629             0912*  
040629             0913*  ; restore everything
040629 2A 4F 06 04 0914*      ld hl, (uhl)
04062D ED 4B 52 06 0915*      ld bc, (ubc)
       04          
040632 ED 5B 55 06 0916*      ld de, (ude)
       04          
040637 DD 2A 58 06 0917*      ld ix, (uix)
       04          
04063C FD 2A 5B 06 0918*      ld iy, (uiy)
       04          
040641 F1          0919*      pop af
040642             0920*  ; all done
040642 C9          0921*      ret
040643             0922*  
040643 75 64 65 2E 0923*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04064C             0924*  
04064C             0925*  ; global scratch memory for registers
04064C 00 00 00    0926*  uaf: dl 0
04064F 00 00 00    0927*  uhl: dl 0
040652 00 00 00    0928*  ubc: dl 0
040655 00 00 00    0929*  ude: dl 0
040658 00 00 00    0930*  uix: dl 0
04065B 00 00 00    0931*  uiy: dl 0
04065E 00 00 00    0932*  usp: dl 0
040661 00 00 00    0933*  upc: dl 0
040664             0934*  
040664             0935*  ; inputs: whatever is in the flags register
040664             0936*  ; outputs: binary representation of flags
040664             0937*  ;          with a header so we know which is what
040664             0938*  ; destroys: nothing
040664             0939*  ; preserves: everything
040664             0940*  dumpFlags:
040664             0941*  ; first we curse zilog for not giving direct access to flags
040664 F5          0942*      push af ; this is so we can send it back unharmed
040665 F5          0943*      push af ; this is so we can pop it to hl
040666             0944*  ; store everything in scratch
040666 22 4F 06 04 0945*      ld (uhl),hl
04066A ED 43 52 06 0946*      ld (ubc),bc
       04          
04066F ED 53 55 06 0947*      ld (ude),de
       04          
040674 DD 22 58 06 0948*      ld (uix),ix
       04          
040679 FD 22 5B 06 0949*      ld (uiy),iy
       04          
04067E             0950*  ; next we print the header
04067E 21 AA 06 04 0951*      ld hl,@header
040682 CD 17 01 04 0952*      call printString
040686 E1          0953*      pop hl ; flags are now in l
040687 7D          0954*      ld a,l ; flags are now in a
040688 CD B5 03 04 0955*      call printBin8
04068C CD 2C 01 04 0956*      call printNewLine
040690             0957*  ; restore everything
040690 2A 4F 06 04 0958*      ld hl, (uhl)
040694 ED 4B 52 06 0959*      ld bc, (ubc)
       04          
040699 ED 5B 55 06 0960*      ld de, (ude)
       04          
04069E DD 2A 58 06 0961*      ld ix, (uix)
       04          
0406A3 FD 2A 5B 06 0962*      ld iy, (uiy)
       04          
0406A8 F1          0963*      pop af ; send her home the way she came
0406A9 C9          0964*      ret
0406AA             0965*  ; Bit 7 (S): Sign flag
0406AA             0966*  ; Bit 6 (Z): Zero flag
0406AA             0967*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0406AA             0968*  ; Bit 4 (H): Half Carry flag
0406AA             0969*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0406AA             0970*  ; Bit 2 (PV): Parity/Overflow flag
0406AA             0971*  ; Bit 1 (N): Subtract flag
0406AA             0972*  ; Bit 0 (C): Carry flag
0406AA 53 5A 78 48 0973*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0406B5             0974*  
0406B5             0975*  ; set all the bits in the flag register
0406B5             0976*  ; more of an academic exercise than anything useful
0406B5             0977*  ; inputs; none
0406B5             0978*  ; outputs; a=0,f=255
0406B5             0979*  ; destroys: flags, hl
0406B5             0980*  ; preserves: a, because why not
0406B5             0981*  setAllFlags:
0406B5 21 FF 00 00 0982*      ld hl,255
0406B9 67          0983*      ld h,a ; four cycles to preserve a is cheap
0406BA E5          0984*      push hl
0406BB F1          0985*      pop af
0406BC C9          0986*      ret
0406BD             0987*  
0406BD             0988*  ; reset all the bits in the flag register
0406BD             0989*  ; unlike its inverse counterpart, this may actually be useful
0406BD             0990*  ; inputs; none
0406BD             0991*  ; outputs; a=0,f=0
0406BD             0992*  ; destroys: flags, hl
0406BD             0993*  ; preserves: a, because why not
0406BD             0994*  resetAllFlags:
0406BD 21 00 00 00 0995*      ld hl,0
0406C1 67          0996*      ld h,a ; four cycles to preserve a is cheap
0406C2 E5          0997*      push hl
0406C3 F1          0998*      pop af
0406C4 C9          0999*      ret
0406C5             1000*  
0406C5             1001*  ; wait until user presses a key
0406C5             1002*  ; inputs: none
0406C5             1003*  ; outputs: ascii code of key pressed in a
0406C5             1004*  ; destroys: af,ix
0406C5             1005*  waitKeypress:
0406C5             1006*      MOSCALL mos_getkey
0406C5 3E 00       0001*M 			LD	A, function
0406C7 5B CF       0002*M 			RST.LIL	08h
0406C9 C9          1007*      ret
0406CA             1008*  
0406CA             1009*  ; print bytes from an address to the screen in hexidecimal format
0406CA             1010*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0406CA             1011*  ; outputs: values of each byte printed to screen separated by spaces
0406CA             1012*  ; destroys: nothing
0406CA             1013*  dumpMemoryHex:
0406CA             1014*  ; save registers to the stack
0406CA C5          1015*      push bc
0406CB E5          1016*      push hl
0406CC F5          1017*      push af
0406CD             1018*  
0406CD             1019*  ; print the address and separator
0406CD CD 37 01 04 1020*      call printHex24
0406D1 3E 3A       1021*      ld a,':'
0406D3 5B D7       1022*      rst.lil 10h
0406D5 3E 20       1023*      ld a,' '
0406D7 5B D7       1024*      rst.lil 10h
0406D9             1025*  
0406D9             1026*  ; set b to be our loop counter
0406D9 F1          1027*      pop af
0406DA 47          1028*      ld b,a
0406DB E1          1029*      pop hl
0406DC E5          1030*      push hl
0406DD F5          1031*      push af
0406DE             1032*  @loop:
0406DE             1033*  ; print the byte
0406DE 7E          1034*      ld a,(hl)
0406DF CD 45 01 04 1035*      call printHex8
0406E3             1036*  ; print a space
0406E3 3E 20       1037*      ld a,' '
0406E5 5B D7       1038*      rst.lil 10h
0406E7 23          1039*      inc hl
0406E8 10 F4       1040*      djnz @loop
0406EA CD 2C 01 04 1041*      call printNewLine
0406EE             1042*  
0406EE             1043*  ; restore everything
0406EE F1          1044*      pop af
0406EF E1          1045*      pop hl
0406F0 C1          1046*      pop bc
0406F1             1047*  
0406F1             1048*  ; all done
0406F1 C9          1049*      ret
0406F2             1050*  
0406F2             1051*  
0406F2             1052*  ; print bytes from an address to the screen in binary format
0406F2             1053*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0406F2             1054*  ; outputs: values of each byte printed to screen separated by spaces
0406F2             1055*  ; destroys: nothing
0406F2             1056*  dumpMemoryBin:
0406F2             1057*  ; save all registers to the stack
0406F2 F5          1058*      push af
0406F3 C5          1059*      push bc
0406F4 D5          1060*      push de
0406F5 E5          1061*      push hl
0406F6 DD E5       1062*      push ix
0406F8 FD E5       1063*      push iy
0406FA             1064*  
0406FA             1065*  ; set b to be our loop counter
0406FA 47          1066*      ld b,a
0406FB             1067*  @loop:
0406FB             1068*  ; print the byte
0406FB 7E          1069*      ld a,(hl)
0406FC E5          1070*      push hl
0406FD C5          1071*      push bc
0406FE CD B5 03 04 1072*      call printBin8
040702 C1          1073*      pop bc
040703             1074*  ; print a space
040703 3E 20       1075*      ld a,' '
040705 5B D7       1076*      rst.lil 10h
040707 E1          1077*      pop hl
040708 23          1078*      inc hl
040709 10 F0       1079*      djnz @loop
04070B CD 2C 01 04 1080*      call printNewLine
04070F             1081*  
04070F             1082*  ; restore everything
04070F FD E1       1083*      pop iy
040711 DD E1       1084*      pop ix
040713 E1          1085*      pop hl
040714 D1          1086*      pop de
040715 C1          1087*      pop bc
040716 F1          1088*      pop af
040717             1089*  ; all done
040717 C9          1090*      ret
040718             1091*  
040718             1092*  ; print bytes from an address to the screen in binary format
040718             1093*  ; with the bits of each byte in reverse order (lsb first)
040718             1094*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040718             1095*  ; outputs: values of each byte printed to screen separated by spaces
040718             1096*  ; destroys: nothing
040718             1097*  dumpMemoryBinRev:
040718             1098*  ; save all registers to the stack
040718 F5          1099*      push af
040719 C5          1100*      push bc
04071A D5          1101*      push de
04071B E5          1102*      push hl
04071C DD E5       1103*      push ix
04071E FD E5       1104*      push iy
040720             1105*  
040720             1106*  ; set b to be our loop counter
040720 47          1107*      ld b,a
040721             1108*  @loop:
040721             1109*  ; print the byte
040721 7E          1110*      ld a,(hl)
040722 E5          1111*      push hl
040723 C5          1112*      push bc
040724 CD DA 03 04 1113*      call printBin8Rev
040728 C1          1114*      pop bc
040729             1115*  ; print a space
040729 3E 20       1116*      ld a,' '
04072B 5B D7       1117*      rst.lil 10h
04072D E1          1118*      pop hl
04072E 23          1119*      inc hl
04072F 10 F0       1120*      djnz @loop
040731 CD 2C 01 04 1121*      call printNewLine
040735             1122*  
040735             1123*  ; restore everything
040735 FD E1       1124*      pop iy
040737 DD E1       1125*      pop ix
040739 E1          1126*      pop hl
04073A D1          1127*      pop de
04073B C1          1128*      pop bc
04073C F1          1129*      pop af
04073D             1130*  ; all done
04073D C9          1131*      ret
04073E             0031       include "arith24.inc"
04073E             0001*  ;------------------------------------------------------------------------
04073E             0002*  ;  arith24.asm
04073E             0003*  ;  24-bit ez80 arithmetic routines
04073E             0004*  ;  Copyright (c) Shawn Sijnstra 2024
04073E             0005*  ;  MIT license
04073E             0006*  ;
04073E             0007*  ;  This library was created as a tool to help make ez80
04073E             0008*  ;  24-bit native assembly routines for simple mathematical problems
04073E             0009*  ;  more widely available.
04073E             0010*  ;
04073E             0011*  ;------------------------------------------------------------------------
04073E             0012*  
04073E             0013*  ; ;------------------------------------------------------------------------
04073E             0014*  ; ; DEPRECATED BY umul24 in fixed168.inc
04073E             0015*  ; ;------------------------------------------------------------------------
04073E             0016*  ; ; umul24:	HL = HL*DE (unsigned)
04073E             0017*  ; ; Preserves AF, BC, DE
04073E             0018*  ; ; Uses a fast multiply routine.
04073E             0019*  ; ;------------------------------------------------------------------------
04073E             0020*  ; umul24:
04073E             0021*  ; 	push	DE
04073E             0022*  ; 	push	BC
04073E             0023*  ; 	push	AF
04073E             0024*  ; 	push	HL
04073E             0025*  ; 	pop		BC
04073E             0026*  ;     ld	 	a, 24 ; No. of bits to process
04073E             0027*  ;     ld	 	hl, 0 ; Result
04073E             0028*  ; umul24_lp:
04073E             0029*  ; 	add	hl,hl
04073E             0030*  ; 	ex	de,hl
04073E             0031*  ; 	add	hl,hl
04073E             0032*  ; 	ex	de,hl
04073E             0033*  ; 	jr	nc,umul24_nc
04073E             0034*  ; 	add	hl,bc
04073E             0035*  ; umul24_nc:
04073E             0036*  ; 	dec	a
04073E             0037*  ; 	jr	nz,umul24_lp
04073E             0038*  ; 	pop	af
04073E             0039*  ; 	pop	bc
04073E             0040*  ; 	pop	de
04073E             0041*  ; 	ret
04073E             0042*  
04073E             0043*  
04073E             0044*  ;------------------------------------------------------------------------
04073E             0045*  ; udiv24
04073E             0046*  ; Unsigned 24-bit division
04073E             0047*  ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
04073E             0048*  ;
04073E             0049*  ; Uses AF BC DE HL
04073E             0050*  ; Uses Restoring Division algorithm
04073E             0051*  ;------------------------------------------------------------------------
04073E             0052*  
04073E             0053*  udiv24:
04073E E5          0054*  	push	hl
04073F C1          0055*  	pop		bc	;move dividend to BCU
040740 21 00 00 00 0056*  	ld		hl,0	;result
040744 A7          0057*  	and		a
040745 ED 52       0058*  	sbc		hl,de	;test for div by 0
040747 C8          0059*  	ret		z		;it's zero, carry flag is clear
040748 19          0060*  	add		hl,de	;HL is 0 again
040749 3E 18       0061*  	ld		a,24	;number of loops through.
04074B             0062*  udiv1:
04074B C5          0063*  	push	bc	;complicated way of doing this because of lack of access to top bits
04074C E3          0064*  	ex		(sp),hl
04074D 37          0065*  	scf
04074E ED 6A       0066*  	adc	hl,hl
040750 E3          0067*  	ex	(sp),hl
040751 C1          0068*  	pop	bc		;we now have bc = (bc * 2) + 1
040752             0069*  
040752 ED 6A       0070*  	adc	hl,hl
040754 A7          0071*  	and	a		;is this the bug
040755 ED 52       0072*  	sbc	hl,de
040757 30 02       0073*  	jr	nc,udiv2
040759 19          0074*  	add	hl,de
04075A             0075*  ;	dec	c
04075A 0B          0076*  	dec	bc
04075B             0077*  udiv2:
04075B 3D          0078*  	dec	a
04075C 20 ED       0079*  	jr	nz,udiv1
04075E 37          0080*  	scf		;flag used for div0 error
04075F C5          0081*  	push	bc
040760 D1          0082*  	pop		de	;remainder
040761 C9          0083*  	ret
040762             0084*  
040762             0085*  
040762             0086*  
040762             0087*  ;------------------------------------------------------------------------
040762             0088*  ; neg24
040762             0089*  ; Returns: HLU = 0-HLU
040762             0090*  ; preserves all other registers
040762             0091*  ;------------------------------------------------------------------------
040762             0092*  neg24:
040762 D5          0093*  	push	de
040763 EB          0094*  	ex		de,hl
040764 21 00 00 00 0095*  	ld		hl,0
040768 B7          0096*  	or		a
040769 ED 52       0097*  	sbc		hl,de
04076B D1          0098*  	pop		de
04076C C9          0099*  	ret
04076D             0100*  
04076D             0101*  ;------------------------------------------------------------------------
04076D             0102*  ; or_hlu_deu: 24 bit bitwise OR
04076D             0103*  ; Returns: hlu = hlu OR deu
04076D             0104*  ; preserves all other registers
04076D             0105*  ;------------------------------------------------------------------------
04076D             0106*  or_hlu_deu:
04076D 22 F6 07 04 0107*  	ld	(bitbuf1),hl
040771 ED 53 F9 07 0108*  	ld	(bitbuf2),de
       04          
040776 D5          0109*  	push	de	;preserve DEU
040777 C5          0110*  	push	bc	;preserve BCU
040778 06 03       0111*  	ld		b,3
04077A 21 F6 07 04 0112*  	ld	hl,bitbuf1
04077E 11 F6 07 04 0113*  	ld	de,bitbuf1
040782             0114*  orloop_24:
040782 1A          0115*  	ld	a,(de)
040783 B6          0116*  	or	(hl)
040784 12          0117*  	ld	(de),a
040785 13          0118*  	inc	de
040786 23          0119*  	inc	hl
040787 10 F9       0120*  	djnz	orloop_24
040789 2A F9 07 04 0121*  	ld	hl,(bitbuf2)
04078D C1          0122*  	pop		bc	;restore BC
04078E D1          0123*  	pop		de	;restore DE
04078F             0124*  
04078F             0125*  ;------------------------------------------------------------------------
04078F             0126*  ; and_hlu_deu: 24 bit bitwise AND
04078F             0127*  ; Returns: hlu = hlu AND deu
04078F             0128*  ; preserves all other registers
04078F             0129*  ;------------------------------------------------------------------------
04078F             0130*  and_hlu_deu:
04078F 22 F6 07 04 0131*  	ld	(bitbuf1),hl
040793 ED 53 F9 07 0132*  	ld	(bitbuf2),de
       04          
040798 D5          0133*  	push	de	;preserve DEU
040799 C5          0134*  	push	bc	;preserve BCU
04079A 06 03       0135*  	ld		b,3
04079C 21 F6 07 04 0136*  	ld	hl,bitbuf1
0407A0 11 F6 07 04 0137*  	ld	de,bitbuf1
0407A4             0138*  andloop_24:
0407A4 1A          0139*  	ld	a,(de)
0407A5 A6          0140*  	and	(hl)
0407A6 12          0141*  	ld	(de),a
0407A7 13          0142*  	inc	de
0407A8 23          0143*  	inc	hl
0407A9 10 F9       0144*  	djnz	andloop_24
0407AB 2A F9 07 04 0145*  	ld	hl,(bitbuf2)
0407AF C1          0146*  	pop		bc	;restore BC
0407B0 D1          0147*  	pop		de	;restore DE
0407B1             0148*  
0407B1             0149*  ;------------------------------------------------------------------------
0407B1             0150*  ; xor_hlu_deu: 24 bit bitwise XOR
0407B1             0151*  ; Returns: hlu = hlu XOR deu
0407B1             0152*  ; preserves all other registers
0407B1             0153*  ;------------------------------------------------------------------------
0407B1             0154*  xor_hlu_deu:
0407B1 22 F6 07 04 0155*  	ld	(bitbuf1),hl
0407B5 ED 53 F9 07 0156*  	ld	(bitbuf2),de
       04          
0407BA D5          0157*  	push	de	;preserve DEU
0407BB C5          0158*  	push	bc	;preserve BCU
0407BC 06 03       0159*  	ld		b,3
0407BE 21 F6 07 04 0160*  	ld	hl,bitbuf1
0407C2 11 F6 07 04 0161*  	ld	de,bitbuf1
0407C6             0162*  xorloop_24:
0407C6 1A          0163*  	ld	a,(de)
0407C7 AE          0164*  	xor	(hl)
0407C8 12          0165*  	ld	(de),a
0407C9 13          0166*  	inc	de
0407CA 23          0167*  	inc	hl
0407CB 10 F9       0168*  	djnz	xorloop_24
0407CD 2A F9 07 04 0169*  	ld	hl,(bitbuf2)
0407D1 C1          0170*  	pop		bc	;restore BC
0407D2 D1          0171*  	pop		de	;restore DE
0407D3             0172*  
0407D3             0173*  ;------------------------------------------------------------------------
0407D3             0174*  ; shl_hlu: 24 bit shift left hlu by a positions
0407D3             0175*  ; Returns: hlu = hlu << a
0407D3             0176*  ;		   a = 0
0407D3             0177*  ; NOTE: only considers a up to 16 bits.
0407D3             0178*  ; preserves all other registers
0407D3             0179*  ; modified by Brandon R. Gates to use a instead of de
0407D3             0180*  ;------------------------------------------------------------------------
0407D3             0181*  shl_hlu:
0407D3 B7          0182*  	or a
0407D4 C8          0183*  	ret		z		;we're done
0407D5 29          0184*  	add		hl,hl	;shift HLU left
0407D6 3D          0185*  	dec a
0407D7 18 FA       0186*  	jr		shl_hlu
0407D9             0187*  
0407D9             0188*  ;------------------------------------------------------------------------
0407D9             0189*  ; shr_hlu: 24 bit shift right hlu by a positions
0407D9             0190*  ; Returns: hlu = hlu >> a
0407D9             0191*  ;		   a = 0
0407D9             0192*  ; NOTE: only considers a up to 16 bits.
0407D9             0193*  ; preserves all other registers
0407D9             0194*  ; modified by Brandon R. Gates to use a instead of de
0407D9             0195*  ;------------------------------------------------------------------------
0407D9             0196*  shr_hlu:
0407D9 22 F6 07 04 0197*  	ld		(bitbuf1),hl
0407DD 21 F8 07 04 0198*  	ld		hl,bitbuf1+2
0407E1             0199*  @shr_loop:
0407E1 B7          0200*  	or a
0407E2 28 0D       0201*  	jr		z,@shr_done		;we're done
0407E4             0202*  ;carry is clear from or instruction
0407E4 CB 1E       0203*  	rr		(hl)
0407E6 2B          0204*  	dec		hl
0407E7 CB 1E       0205*  	rr		(hl)
0407E9 2B          0206*  	dec		hl
0407EA CB 1E       0207*  	rr		(hl)
0407EC 23          0208*  	inc		hl
0407ED 23          0209*  	inc		hl
0407EE 3D          0210*  	dec a
0407EF 18 F0       0211*  	jr		@shr_loop
0407F1             0212*  @shr_done:
0407F1 2A F6 07 04 0213*  	ld		hl,(bitbuf1)	;collect result
0407F5 C9          0214*  	ret
0407F6             0215*  
0407F6             0216*  ;------------------------------------------------------------------------
0407F6             0217*  ; Scratch area for calculations
0407F6             0218*  ;------------------------------------------------------------------------
0407F6 00 00 00    0219*  bitbuf1:	dw24	0	;bit manipulation buffer 1
0407F9 00 00 00    0220*  bitbuf2:	dw24	0	;bit manipulation buffer 2
0407FC             0221*  
0407FC             0222*  ; -----------------------------------------------------------------------
0407FC             0223*  ; Functions added by Brandon R. Gates
0407FC             0224*  ; -----------------------------------------------------------------------
0407FC             0225*  
0407FC             0226*  ;------------------------------------------------------------------------
0407FC             0227*  ; shr_hlu_div: Quick division by powers of two based on log2 of A
0407FC             0228*  ;              Determines the LSB of A and shifts HLU accordingly.
0407FC             0229*  ;              HLU = HLU >> LSB(A)
0407FC             0230*  ; Returns: HLU = HLU >> LSB(A)
0407FC             0231*  ; Destroys: af
0407FC             0232*  ;------------------------------------------------------------------------
0407FC             0233*  shr_hlu_log2a:
0407FC B7          0234*  	or a    ; check for zero
0407FD C8          0235*  	ret z   ; nothing to shift so we're done
0407FE C5          0236*  	push 	bc ; preserve
0407FF 06 00       0237*  	ld		b,0 ; clear b
040801             0238*  @find_bit:
040801 0F          0239*  	rrca ; bit 0 to carry
040802 DA 0B 08 04 0240*  	jp c,@found_bit
040806 04          0241*  	inc b ; next bit
040807 C3 01 08 04 0242*  	jp @find_bit
04080B             0243*  @found_bit:
04080B 78          0244*  	ld a,b
04080C CD D9 07 04 0245*  	call shr_hlu
040810 C1          0246*  	pop 	bc ; restore
040811 C9          0247*  	ret
040812             0248*  ; end shr_hlu_log2a
040812             0249*  
040812             0250*  ;------------------------------------------------------------------------
040812             0251*  ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040812             0252*  ;                Determines the LSB of A and shifts HLU accordingly.
040812             0253*  ;                HLU = HLU << LSB(A)
040812             0254*  ; Returns: HLU = HLU << LSB(A)
040812             0255*  ; Destroys: af
040812             0256*  ;------------------------------------------------------------------------
040812             0257*  shl_hlu_log2a:
040812 B7          0258*  	or a    ; check for zero
040813 C8          0259*  	ret z   ; nothing to shift so we're done
040814 C5          0260*  	push 	bc ; preserve
040815 06 00       0261*  	ld		b,0 ; clear b
040817             0262*  @find_bit:
040817 0F          0263*  	rrca ; bit 0 to carry
040818 DA 21 08 04 0264*  	jp c,@found_bit
04081C 04          0265*  	inc b ; next bit
04081D C3 17 08 04 0266*  	jp @find_bit
040821             0267*  @found_bit:
040821 78          0268*  	ld a,b
040822 CD D3 07 04 0269*  	call shl_hlu
040826 C1          0270*  	pop 	bc ; restore
040827 C9          0271*  	ret
040828             0272*  ; end shl_hlu_log2a
040828             0032       include "maths.inc"
040828 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040900             0002*  ; test the sign of HL
040900             0003*  ; inputs: HL obviously
040900             0004*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040900             0005*  ; destroys: flags
040900             0006*      MACRO sign_hlu
040900             0007*      add hl,de
040900             0008*      or a ; clear flags
040900             0009*      sbc hl,de
040900             0010*      ENDMACRO
040900             0011*  
040900             0012*  
040900             0013*  ;------------------------------------------------------------------------
040900             0014*  ; Scratch area for calculations
040900             0015*  ;------------------------------------------------------------------------
040900 00 00 00    0016*  scratch1: dw24 0 ;bit manipulation buffer 1
040903 00 00 00    0017*  scratch2: dw24 0 ;bit manipulation buffer 2
040906             0018*  
040906             0019*  ; absolute value of hlu
040906             0020*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040906             0021*  ;         s1,z0,pv0,n1,c0 if hlu was negative
040906             0022*  ;         s0,z1,pv0,n1,c0 if hlu was zero
040906             0023*  ;         s0,z0,pv0,n1,c0 if hlu was positive
040906             0024*  ; destroys: a
040906             0025*  hlu_abs:
040906 19          0026*      add hl,de
040907 B7          0027*      or a
040908 ED 52       0028*      sbc hl,de
04090A FA 0F 09 04 0029*      jp m,@is_neg
04090E C9          0030*      ret ; hlu is positive or zero so we're done
04090F             0031*  @is_neg:
04090F F5          0032*      push af ; otherwise, save current flags for return
040910 CD 16 09 04 0033*      call neg_hlu ; negate hlu
040914 F1          0034*      pop af ; get back flags
040915 C9          0035*      ret
040916             0036*  
040916             0037*  ; flip the sign of hlu
040916             0038*  ; inputs: hlu
040916             0039*  ; returns: 0-hlu, flags set appropriately for the result:
040916             0040*  ;         s1,z0,pv0,n1,c1 if result is negative
040916             0041*  ;         s0,z1,pv0,n1,c0 if result is zero
040916             0042*  ;         s0,z0,pv0,n1,c1 if result is positive
040916             0043*  ; destroys a
040916             0044*  neg_hlu:
040916 D5          0045*      push de ; save de
040917 EB          0046*      ex de,hl ; put hl into de
040918 21 00 00 00 0047*      ld hl,0 ; clear hl
04091C AF          0048*      xor a ; clear carry
04091D ED 52       0049*      sbc hl,de ; 0-hlu = -hlu
04091F D1          0050*      pop de ; get de back
040920 C9          0051*      ret ; easy peasy
040921             0052*  
040921             0053*  ;------------------------------------------------------------------------
040921             0054*  ; divide hlu by 2, inspired by above
040921             0055*  ;------------------------------------------------------------------------
040921             0056*  hlu_div2:
040921 22 00 09 04 0057*      ld (scratch1),hl
040925 21 02 09 04 0058*      ld hl,scratch1+2
040929 CB 1E       0059*      rr (hl)
04092B 2B          0060*      dec hl
04092C CB 1E       0061*      rr (hl)
04092E 2B          0062*      dec hl
04092F CB 1E       0063*      rr (hl)
040931 23          0064*      inc hl
040932 23          0065*      inc hl
040933 2A 00 09 04 0066*      ld hl,(scratch1)
040937 C9          0067*      ret
040938             0068*  
040938             0069*  ; this is my little hack to divide by 16
040938             0070*  hlu_div16:
040938 AF          0071*      xor a
040939 29          0072*      add hl,hl
04093A 17          0073*      rla
04093B 29          0074*      add hl,hl
04093C 17          0075*      rla
04093D 29          0076*      add hl,hl
04093E 17          0077*      rla
04093F 29          0078*      add hl,hl
040940 17          0079*      rla
040941 22 4E 09 04 0080*      ld (@scratch),hl
040945 32 51 09 04 0081*      ld (@scratch+3),a
040949 2A 4F 09 04 0082*      ld hl,(@scratch+1)
04094D C9          0083*      ret
04094E             0084*  @scratch: ds 4
040952             0085*  
040952             0086*  ; hlu signed division by 256
040952             0087*  ; returns: hlu / 256
040952             0088*  ; destroys: af
040952             0089*  hlu_sdiv256:
040952 AF          0090*      xor a ; assume hl is positive
040953 22 69 09 04 0091*      ld (@buffer),hl
040957             0092*      sign_hlu
040957 19          0001*M     add hl,de
040958 B7          0002*M     or a ; clear flags
040959 ED 52       0003*M     sbc hl,de
04095B F2 60 09 04 0093*      jp p,@hl_pos
04095F 3D          0094*      dec a
040960             0095*  @hl_pos:
040960 32 6C 09 04 0096*      ld (@buffer+3),a
040964 2A 6A 09 04 0097*      ld hl,(@buffer+1)
040968 C9          0098*      ret
040969             0099*  @buffer: ds 4
04096D             0100*  
04096D             0101*  ; hlu 1 byte right shift, unsigned
04096D             0102*  ; returns: hlu / 256, fractional portion in a
04096D             0103*  ; destroys: af
04096D             0104*  hlu_udiv256:
04096D AF          0105*      xor a
04096E 32 7F 09 04 0106*      ld (@buffer+3),a
040972 7D          0107*      ld a,l ; save the fractional portion
040973 22 7C 09 04 0108*      ld (@buffer),hl
040977 2A 7D 09 04 0109*      ld hl,(@buffer+1)
04097B C9          0110*      ret
04097C             0111*  @buffer: ds 4
040980             0112*  
040980             0113*      MACRO hlu_mul256
040980             0114*      add hl,hl ; * 2
040980             0115*      add hl,hl ; * 4
040980             0116*      add hl,hl ; * 8
040980             0117*      add hl,hl ; * 16
040980             0118*      add hl,hl ; * 32
040980             0119*      add hl,hl ; * 64
040980             0120*      add hl,hl ; * 128
040980             0121*      add hl,hl ; * 256
040980             0122*      ENDMACRO
040980             0123*  
040980 00 00 00 00 0124*  add_bcd_arg1: db #00,#00,#00,#00
040984 00 00 00 00 0125*  add_bcd_arg2: db #00,#00,#00,#00
040988             0126*  
040988             0127*  ; set bcd values in a scratch memory address from registers bcde
040988             0128*  ; input: hl; scratch address,bcde; 8-place bcd number
040988             0129*  ; destroys ; hl
040988             0130*  set_bcd:
040988 73          0131*      ld (hl),e
040989 23          0132*      inc hl
04098A 72          0133*      ld (hl),d
04098B 23          0134*      inc hl
04098C 71          0135*      ld (hl),c
04098D 23          0136*      inc hl
04098E 70          0137*      ld (hl),b
04098F C9          0138*      ret
040990             0139*  
040990             0140*  ; load bcd values from a scratch memory address to bcde
040990             0141*  ; input: hl; scratch address
040990             0142*  ; output: bcde; 8-place bcd number
040990             0143*  ; destroys: hl
040990             0144*  get_bcd:
040990 5E          0145*      ld e,(hl)
040991 23          0146*      inc hl
040992 56          0147*      ld d,(hl)
040993 23          0148*      inc hl
040994 4E          0149*      ld c,(hl)
040995 23          0150*      inc hl
040996 46          0151*      ld b,(hl)
040997 C9          0152*      ret
040998             0153*  
040998             0154*  ; BCD addition
040998             0155*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040998             0156*  ;       a is the number of bytes holding each number (number of places/2)
040998             0157*  ; outputs: (hl) + (de) --> (hl)
040998             0158*  ; destroys: a,b,de,hl
040998             0159*  add_bcd:
040998 47          0160*      ld b,a ; loop counter
040999 AF          0161*      xor a ; reset a, clear carry flag
04099A             0162*  adcec:
04099A 1A          0163*      ld a,(de) ; addend to acc
04099B 8E          0164*      adc a,(hl) ; add (hl) to acc
04099C 27          0165*      daa ; adjust result to bcd
04099D 77          0166*      ld (hl),a ; store result
04099E 23          0167*      inc hl ; advance memory pointers
04099F 13          0168*      inc de
0409A0 10 F8       0169*      djnz adcec ; loop until b == 0
0409A2 C9          0170*      ret
0409A3             0171*  
0409A3             0172*  ; BCD subtraction
0409A3             0173*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0409A3             0174*  ;       a is the number of bytes holding each number (number of places/2)
0409A3             0175*  ; outputs: (hl) - (de) --> (hl)
0409A3             0176*  ; destroys: a,b,de,hl
0409A3             0177*  sub_bcd:
0409A3 47          0178*      ld b,a ; loop counter
0409A4 AF          0179*      xor a ; reset a,clear carry flag
0409A5             0180*  subdec:
0409A5 1A          0181*      ld a,(de) ; subtrahend to acc
0409A6 9E          0182*      sbc a,(hl) ; subtract (hl) from acc
0409A7 27          0183*      daa ; adjust result to bcd
0409A8 77          0184*      ld (hl),a ; store result
0409A9 23          0185*      inc hl ; advance memory pointers
0409AA 13          0186*      inc de
0409AB 10 F8       0187*      djnz subdec ; loop until b == 0
0409AD C9          0188*      ret
0409AE             0189*  
0409AE             0190*  ; http://www.z80.info/pseudo-random.txt
0409AE             0191*  rand_8:
0409AE C5          0192*      push bc
0409AF 3A C2 09 04 0193*      ld a,(r_seed)
0409B3 4F          0194*      ld c,a
0409B4             0195*  
0409B4 0F          0196*      rrca ; multiply by 32
0409B5 0F          0197*      rrca
0409B6 0F          0198*      rrca
0409B7 EE 1F       0199*      xor 0x1f
0409B9             0200*  
0409B9 81          0201*      add a,c
0409BA DE FF       0202*      sbc a,255 ; carry
0409BC             0203*  
0409BC 32 C2 09 04 0204*      ld (r_seed),a
0409C0 C1          0205*      pop bc
0409C1 C9          0206*      ret
0409C2 50          0207*  r_seed: defb $50
0409C3             0208*  
0409C3             0209*  ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
0409C3             0210*  prng24:
0409C3             0211*  ;;Expects ADL mode.
0409C3             0212*  ;;Output: HL
0409C3             0213*  ;;50cc
0409C3             0214*  ;;33 bytes
0409C3             0215*  ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
0409C3 ED 5B E4 09 0216*      ld de,(seed1)
       04          
0409C8 B7          0217*      or a
0409C9 ED 62       0218*      sbc hl,hl
0409CB 19          0219*      add hl,de
0409CC 29          0220*      add hl,hl
0409CD 29          0221*      add hl,hl
0409CE 2C          0222*      inc l
0409CF 19          0223*      add hl,de
0409D0 22 E4 09 04 0224*      ld (seed1),hl
0409D4 2A E7 09 04 0225*      ld hl,(seed2)
0409D8 29          0226*      add hl,hl
0409D9 9F          0227*      sbc a,a
0409DA E6 1B       0228*      and %00011011
0409DC AD          0229*      xor l
0409DD 6F          0230*      ld l,a
0409DE 22 E7 09 04 0231*      ld (seed2),hl
0409E2 19          0232*      add hl,de
0409E3 C9          0233*      ret
0409E4 00 00 00    0234*  seed1: dl 0
0409E7 00 00 00    0235*  seed2: dl 0
0409EA             0033       include "files.inc"
0409EA             0001*  ; load to onboard 8k sram
0409EA             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
0409EA             0034       include "fixed168.inc"
0409EA FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
040A00             0002*  ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040A00             0003*  ; uses EZ80 MLT instruction for speed
040A00             0004*  ; operation: UHL * A --> UHL
040A00             0005*  ; destroys: AF, HL
040A00             0006*  smul24x8:
040A00             0007*  ; make hl positive and store sign flag
040A00 CD 06 09 04 0008*      call hlu_abs
040A04 F5          0009*      push af
040A05             0010*  ; do the division
040A05 CD 10 0A 04 0011*      call mul24x8 ; hl = product
040A09             0012*  ; adjust sign of result
040A09 F1          0013*      pop af ; sign de
040A0A F0          0014*      ret p ; hl was positive, nothing to do
040A0B CD 16 09 04 0015*      call neg_hlu ; result is negative
040A0F C9          0016*      ret
040A10             0017*  
040A10             0018*  ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040A10             0019*  ; uses EZ80 MLT instruction for speed
040A10             0020*  ; operation: UHL * A --> AUHL
040A10             0021*  ; destroys: AF, HL
040A10             0022*  mul24x8:
040A10 D5          0023*      push de ; preserve de
040A11             0024*  ; low byte
040A11 5D          0025*      ld e,l
040A12 57          0026*      ld d,a
040A13 ED 5C       0027*      mlt de
040A15 6B          0028*      ld l,e ; product low byte
040A16 08          0029*      ex af,af' ; save multiplier
040A17 7A          0030*      ld a,d ; carry
040A18 08          0031*      ex af,af' ; save carry, restore multiplier
040A19             0032*  ; high byte
040A19 5C          0033*      ld e,h
040A1A 57          0034*      ld d,a
040A1B ED 5C       0035*      mlt de
040A1D 08          0036*      ex af,af' ; save multiplier, restore carry
040A1E 83          0037*      add a,e ; add carry
040A1F 67          0038*      ld h,a ; product middle byte
040A20 7A          0039*      ld a,d ; carry
040A21 08          0040*      ex af,af' ; save carry, restore multiplier
040A22             0041*  ; upper byte
040A22 22 3D 0A 04 0042*      ld (@scratch),hl ; 7 cycles
040A26 5F          0043*      ld e,a
040A27 3A 3F 0A 04 0044*      ld a,(@scratch+2)
040A2B 57          0045*      ld d,a
040A2C ED 5C       0046*      mlt de
040A2E 08          0047*      ex af,af' ; restore carry
040A2F 8B          0048*      adc a,e ; add carry
040A30 32 3F 0A 04 0049*      ld (@scratch+2),a ; 5 cycles
040A34 2A 3D 0A 04 0050*      ld hl,(@scratch) ; 7 cycles
040A38             0051*  ; highest byte
040A38 3E 00       0052*      ld a,0 ; preserve carry flag
040A3A 8A          0053*      adc a,d ; product highest byte
040A3B D1          0054*      pop de ; restore de
040A3C C9          0055*      ret
040A3D             0056*  @scratch: ds 3
040A40             0057*  
040A40 00 00 00 00 0058*  mul24out: blkb 6,0
       00 00       
040A46             0059*  
040A46             0060*  ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040A46             0061*  ; operation: UHL * UDE --> mul24out
040A46             0062*  mul24:
040A46 DD E5       0063*      push ix ; preserve
040A48             0064*  ; point to output buffer and clear it
040A48 DD 21 40 0A 0065*      ld ix,mul24out
       04          
040A4D C5          0066*      push bc
040A4E 01 00 00 00 0067*      ld bc,0
040A52 DD 0F 00    0068*      ld (ix),bc
040A55 DD 0F 03    0069*      ld (ix+3),bc
040A58 C1          0070*      pop bc
040A59             0071*  ; STEP 1: UHL * E
040A59 7B          0072*      ld a,e
040A5A E5          0073*      push hl
040A5B CD 10 0A 04 0074*      call mul24x8
040A5F DD 2F 00    0075*      ld (ix+0),hl
040A62 DD 77 03    0076*      ld (ix+3),a
040A65             0077*  ; STEP 2: UHL * D
040A65 E1          0078*      pop hl
040A66 E5          0079*      push hl
040A67 7A          0080*      ld a,d
040A68 CD 10 0A 04 0081*      call mul24x8
040A6C CD 85 0A 04 0082*      call @accumulate
040A70             0083*  ; STEP 3: UHL * DEU
040A70 E1          0084*      pop hl
040A71 ED 53 B5 0A 0085*      ld (@de),de
       04          
040A76 3A B7 0A 04 0086*      ld a,(@de+2)
040A7A CD 10 0A 04 0087*      call mul24x8
040A7E CD 85 0A 04 0088*      call @accumulate
040A82             0089*  ; all done
040A82 DD E1       0090*      pop ix ; restore
040A84 C9          0091*      ret
040A85             0092*  @accumulate:
040A85 DD 23       0093*      inc ix
040A87             0094*  ; highest byte of product to carry
040A87 DD 77 03    0095*      ld (ix+3),a
040A8A             0096*  ; low byte of product
040A8A 7D          0097*      ld a,l
040A8B DD 86 00    0098*      add a,(ix+0)
040A8E DD 77 00    0099*      ld (ix+0),a
040A91             0100*  ; high byte of product
040A91 7C          0101*      ld a,h
040A92 DD 8E 01    0102*      adc a,(ix+1)
040A95 DD 77 01    0103*      ld (ix+1),a
040A98             0104*  ; uppper byte of product
040A98 22 B2 0A 04 0105*      ld (@hl),hl
040A9C 3A B4 0A 04 0106*      ld a,(@hl+2)
040AA0 DD 8E 02    0107*      adc a,(ix+2)
040AA3 DD 77 02    0108*      ld (ix+2),a
040AA6             0109*  ; carry
040AA6 3E 00       0110*      ld a,0 ; preserve flags
040AA8 DD 8E 03    0111*      adc a,(ix+3)
040AAB DD 77 03    0112*      ld (ix+3),a
040AAE C9          0113*      ret
040AAF             0114*  
040AAF 00 00 00    0115*  @ix: dl 0
040AB2 00 00 00    0116*  @hl: dl 0
040AB5 00 00 00    0117*  @de: dl 0
040AB8             0118*  
040AB8             0119*  ; UHL * UDE --> UHL (unsigned)
040AB8             0120*  umul24:
040AB8 CD 46 0A 04 0121*      call mul24
040ABC 2A 40 0A 04 0122*      ld hl,(mul24out)
040AC0 C9          0123*      ret
040AC1             0124*  
040AC1             0125*  ; UH.L = UH.L*UD.E (unsigned)
040AC1             0126*  umul168:
040AC1 CD 46 0A 04 0127*      call mul24
040AC5 2A 41 0A 04 0128*      ld hl,(mul24out+1)
040AC9 C9          0129*      ret
040ACA             0130*  
040ACA             0131*  ; UH.L * UD.E --> UH.L (signed)
040ACA             0132*  smul168:
040ACA             0133*  ; make everything positive and store sign flags
040ACA CD 06 09 04 0134*      call hlu_abs
040ACE F5          0135*      push af
040ACF EB          0136*      ex de,hl
040AD0 CD 06 09 04 0137*      call hlu_abs
040AD4 EB          0138*      ex de,hl
040AD5 F5          0139*      push af
040AD6             0140*  ; do the division
040AD6 CD C1 0A 04 0141*      call umul168 ; hl = product
040ADA             0142*  ; adjust sign of result
040ADA F1          0143*      pop af ; sign de
040ADB FA E6 0A 04 0144*      jp m,@de_neg
040ADF F1          0145*      pop af ; sign hl
040AE0 F0          0146*      ret p ; both positive, nothing to do
040AE1             0147*  @hl_neg:
040AE1 CD 16 09 04 0148*      call neg_hlu ; de pos, hl neg, result is negative
040AE5 C9          0149*      ret
040AE6             0150*  @de_neg:
040AE6 F1          0151*      pop af
040AE7 F8          0152*      ret m ; both negative, nothing to do
040AE8 CD 16 09 04 0153*      call neg_hlu ; result is negative
040AEC C9          0154*      ret
040AED             0155*  
040AED             0156*  ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040AED             0157*  ; perform unsigned division of 16.8 fixed place values
040AED             0158*  ; with an unsigned 16.8 fixed place result and 24-bit remainder
040AED             0159*  udiv168:
040AED             0160*  ; back up divisor
040AED ED 53 24 0B 0161*      ld (@ude),de
       04          
040AF2             0162*  ; get the 16-bit integer part of the quotient
040AF2 CD 3E 07 04 0163*      call udiv24 ; de = quotient, hl = remainder
040AF6             0164*  ; load quotient to upper three bytes of output
040AF6 ED 53 2B 0B 0165*      ld (div168_out+1),de
       04          
040AFB             0166*  @div256:
040AFB             0167*  ; multiply remainder by 256
040AFB             0168*      hlu_mul256
040AFB 29          0001*M     add hl,hl ; * 2
040AFC 29          0002*M     add hl,hl ; * 4
040AFD 29          0003*M     add hl,hl ; * 8
040AFE 29          0004*M     add hl,hl ; * 16
040AFF 29          0005*M     add hl,hl ; * 32
040B00 29          0006*M     add hl,hl ; * 64
040B01 29          0007*M     add hl,hl ; * 128
040B02 29          0008*M     add hl,hl ; * 256
040B03             0169*  ; skip fractional computation if remainder is zero
040B03             0170*      sign_hlu
040B03 19          0001*M     add hl,de
040B04 B7          0002*M     or a ; clear flags
040B05 ED 52       0003*M     sbc hl,de
040B07 20 03       0171*      jr nz,@div_frac
040B09 AF          0172*      xor a
040B0A 18 0A       0173*      jr @write_frac
040B0C             0174*  ; now divide the shifted remainder by the divisor
040B0C             0175*  @div_frac:
040B0C ED 5B 24 0B 0176*      ld de,(@ude) ; get back divisor
       04          
040B11 CD 3E 07 04 0177*      call udiv24 ; de = quotient, hl = remainder
040B15             0178*  ; load low byte of quotient to low byte of output
040B15 7B          0179*      ld a,e
040B16             0180*  @write_frac:
040B16 32 2A 0B 04 0181*      ld (div168_out),a
040B1A             0182*  ; load de with return value
040B1A ED 5B 2A 0B 0183*      ld de,(div168_out)
       04          
040B1F             0184*  ; load a with any overflow
040B1F 3A 2D 0B 04 0185*      ld a,(div168_out+3)
040B23 C9          0186*      ret ; ud.e is the 16.8 result
040B24             0187*  @ude: ds 6
040B2A             0188*  div168_out: ds 4 ; the extra byte is for overflow
040B2E             0189*  
040B2E             0190*  ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040B2E             0191*  ; perform signed division of 16.8 fixed place values
040B2E             0192*  ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040B2E             0193*  sdiv168:
040B2E             0194*  ; make everything positive and store sign flags
040B2E CD 06 09 04 0195*      call hlu_abs
040B32 F5          0196*      push af
040B33 EB          0197*      ex de,hl
040B34 CD 06 09 04 0198*      call hlu_abs
040B38 EB          0199*      ex de,hl
040B39 F5          0200*      push af
040B3A             0201*  ; do the division
040B3A CD ED 0A 04 0202*      call udiv168 ; de = quotient, hl = remainder
040B3E             0203*  ; adjust sign of result
040B3E F1          0204*      pop af ; sign de
040B3F FA 4C 0B 04 0205*      jp m,@de_neg
040B43 F1          0206*      pop af ; sign hl
040B44 F0          0207*      ret p ; both positive, nothing to do
040B45             0208*  @hl_neg:
040B45 EB          0209*      ex de,hl ; hl = quotient, de = remainder
040B46 CD 16 09 04 0210*      call neg_hlu ; de pos, hl neg, result is negative
040B4A EB          0211*      ex de,hl ; de = negated quotient, hl = remainder
040B4B C9          0212*      ret
040B4C             0213*  @de_neg:
040B4C F1          0214*      pop af
040B4D F8          0215*      ret m ; both negative, nothing to do
040B4E EB          0216*      ex de,hl ; hl = quotient, de = remainder
040B4F CD 16 09 04 0217*      call neg_hlu ; result is negative
040B53 EB          0218*      ex de,hl ; de = negated quotient, hl = remainder
040B54 C9          0219*      ret
040B55             0220*  
040B55             0221*  ; convert signed angles from a 360 to 256 degree circle
040B55             0222*  ; inputs: uh.l is the angle360 in 16.8 fixed format
040B55             0223*  ; outputs: uh.l is the angle256 in 16.8 fixed format
040B55             0224*  ; destroys: TODO
040B55             0225*  deg_360_to_256:
040B55 D5          0226*      push de ; preserve de
040B56             0227*  ; make angle positive and store sign flag
040B56 CD 06 09 04 0228*      call hlu_abs
040B5A F5          0229*      push af
040B5B             0230*  ; multiply by coversion factor of 256/360
040B5B 11 B6 00 00 0231*      ld de,0x0000B6 ; 0.711
040B5F CD C1 0A 04 0232*      call umul168 ; uh.l = uh.l * 0.711
040B63             0233*  ; restore sign flag and adjust output accordingly
040B63 F1          0234*      pop af
040B64 F2 6C 0B 04 0235*      jp p,@pos ; positive number
040B68 CD 16 09 04 0236*      call neg_hlu
040B6C             0237*  @pos:
040B6C             0238*  ; restore de and return uh.l as the result
040B6C D1          0239*      pop de
040B6D C9          0240*      ret
040B6E             0241*  
040B6E             0242*  ; convert signed angles from a 256 to 360 degree circle
040B6E             0243*  ; inputs: uh.l is the angle256 in 16.8 fixed format
040B6E             0244*  ; outputs: uh.l is the angle360 in 16.8 fixed format
040B6E             0245*  ; destroys: TODO
040B6E             0246*  deg_256_to_360:
040B6E D5          0247*      push de ; preserve de
040B6F             0248*  ; make angle positive and store sign flag
040B6F CD 06 09 04 0249*      call hlu_abs
040B73 F5          0250*      push af
040B74             0251*  ; multiply by coversion factor of 360/256
040B74 11 68 01 00 0252*      ld de,0x000168 ; 1.406
040B78 CD C1 0A 04 0253*      call umul168 ; uh.l = uh.l * 1.406
040B7C             0254*  ; restore sign flag and adjust output accordingly
040B7C F1          0255*      pop af
040B7D F2 85 0B 04 0256*      jp p,@pos ; positive number
040B81 CD 16 09 04 0257*      call neg_hlu
040B85             0258*  @pos:
040B85             0259*  ; restore de and return uh.l as the result
040B85 D1          0260*      pop de
040B86 C9          0261*      ret
040B87             0262*  
040B87             0263*  ; fixed 16.8 routine
040B87             0264*  ; cos(uh.l) --> uh.l
040B87             0265*  ; destroys: f, hl
040B87             0266*  cos168:
040B87 D5          0267*      push de ; preserve de
040B88             0268*  ; for cos we simply increment the angle by 90 degrees
040B88             0269*  ; or 0x004000 in 16.8 degrees256
040B88             0270*  ; which makes it a sin problem
040B88 11 00 40 00 0271*      ld de,0x004000
040B8C 19          0272*      add hl,de ; modulo 256 happens below
040B8D D1          0273*      pop de ; restore de
040B8E             0274*  ; fall through to sin168
040B8E             0275*  
040B8E             0276*  ; ---------------------
040B8E             0277*  ; fixed 16.8 routine
040B8E             0278*  ; sin(uh.l) --> uh.l
040B8E             0279*  ; destroys: f, hl
040B8E             0280*  sin168:
040B8E D5          0281*      push de
040B8F             0282*  ; handle negative angles appropriately
040B8F CD 06 09 04 0283*      call hlu_abs
040B93 F2 9C 0B 04 0284*      jp p,@F
040B97 11 00 00 FF 0285*      ld de,-256*256
040B9B 19          0286*      add hl,de
040B9C             0287*  @@:
040B9C 2E 03       0288*      ld l,3 ; multiply by 3 to get our lookup index
040B9E ED 6C       0289*      mlt hl
040BA0 11 4E 0E 04 0290*      ld de,sin_lut_168 ; grab the lut address
040BA4 19          0291*      add hl,de ; bump hl by the index
040BA5 ED 27       0292*      ld hl,(hl) ; don't try this on a z80!
040BA7 D1          0293*      pop de
040BA8 C9          0294*      ret
040BA9             0295*  
040BA9             0296*  ; 16.8 fixed inputs / outputs
040BA9             0297*  ; takes: uh.l as angle in degrees 256
040BA9             0298*  ;        ud.e as radius
040BA9             0299*  ; returns ub.c as dx, ud.e as dy, uh.l as radius
040BA9             0300*  ;        displacements from origin (0,0)
040BA9             0301*  ; destroys: everything except indexes
040BA9             0302*  polar_to_cartesian:
040BA9             0303*  ; back up input parameters
040BA9 22 D8 0B 04 0304*      ld (@angle), hl
040BAD ED 53 DB 0B 0305*      ld (@radius), de
       04          
040BB2             0306*  ; compute dx = sin(uh.l) * ud.e
040BB2 CD 8E 0B 04 0307*      call sin168 ; uh.l = sin(uh.l)
040BB6 ED 5B DB 0B 0308*      ld de,(@radius)
       04          
040BBB CD CA 0A 04 0309*      call smul168 ; uh.l = dx
040BBF E5          0310*      push hl
040BC0             0311*  ; compute dy = -cos(uh.l) * ud.e
040BC0 2A D8 0B 04 0312*      ld hl,(@angle)
040BC4 CD 87 0B 04 0313*      call cos168 ; uh.l = cos(uh.l)
040BC8 ED 5B DB 0B 0314*      ld de,(@radius)
       04          
040BCD CD CA 0A 04 0315*      call smul168 ; uh.l = dy
040BD1 CD 16 09 04 0316*      call neg_hlu ; invert dy for screen coords convention
040BD5 EB          0317*      ex de,hl ; de = dy for output
040BD6 C1          0318*      pop bc ; bc = dx for output
040BD7             0319*  ; and out
040BD7 C9          0320*      ret
040BD8             0321*  @angle: ds 3
040BDB             0322*  @radius: ds 3
040BDE             0323*  
040BDE             0324*  ; 16.8 fixed inputs / outputs
040BDE             0325*  ; inputs: ub.c as dx, ud.e as dy
040BDE             0326*  ;        displacements from origin (0,0)
040BDE             0327*  ; returns: uh.l as angle in degrees 256
040BDE             0328*  ;        ud.e as radius
040BDE             0329*  ; destroys: everything except indexes
040BDE             0330*  cartesian_to_polar:
040BDE ED 43 37 0C 0331*      ld (dx168),bc ; dx argument for distance168
       04          
040BE3 ED 53 3D 0C 0332*      ld (dy168),de ; dy argument for distance168
       04          
040BE8             0333*  ; compute radius
040BE8 CD 43 0C 04 0334*      call distance168 ; uh.l = radius
040BEC E5          0335*      push hl ; save radius
040BED             0336*  ; compute angle
040BED ED 4B 37 0C 0337*      ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040BF2 ED 5B 3D 0C 0338*      ld de,(dy168) ; dy argument for atan2_168fast
       04          
040BF7 CD 9D 0C 04 0339*      call atan2_168fast ; uh.l = angle
040BFB             0340*  ; return result
040BFB D1          0341*      pop de ; de = radius (was hl)
040BFC C9          0342*      ret
040BFD             0343*  ; end cartesian_to_polar
040BFD             0344*  
040BFD             0345*  ; 16.8 fixed inputs / outputs
040BFD             0346*  ; inputs: ub.c as dx, ud.e as dy
040BFD             0347*  ;        displacements from origin (0,0)
040BFD             0348*  ; returns: uh.l as angle in degrees 256
040BFD             0349*  ;        ud.e as radius
040BFD             0350*  ; destroys: everything except indexes
040BFD             0351*  ; note: uses distance168sm which is more accurate for small deltas
040BFD             0352*  cartesian_to_polar_sm:
040BFD ED 43 37 0C 0353*      ld (dx168),bc ; dx argument for distance168
       04          
040C02 ED 53 3D 0C 0354*      ld (dy168),de ; dy argument for distance168
       04          
040C07             0355*  ; compute radius
040C07 CD 78 0C 04 0356*      call distance168sm ; uh.l = radius
040C0B E5          0357*      push hl ; save radius
040C0C             0358*  ; compute angle
040C0C ED 4B 37 0C 0359*      ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040C11 ED 5B 3D 0C 0360*      ld de,(dy168) ; dy argument for atan2_168fast
       04          
040C16 CD 9D 0C 04 0361*      call atan2_168fast ; uh.l = angle
040C1A             0362*  ; return result
040C1A D1          0363*      pop de ; de = radius (was hl)
040C1B C9          0364*      ret
040C1C             0365*  ; end cartesian_to_polar
040C1C             0366*  
040C1C             0367*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040C1C             0368*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040C1C             0369*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040C1C             0370*  ;         also populates scratch locations dx168 and dy168
040C1C             0371*  ; destroys: a,hl,bc,de
040C1C             0372*  dxy168:
040C1C             0373*  ; compute dx = x1-x0
040C1C AF          0374*      xor a ; clear carry
040C1D DD E5       0375*      push ix ; move ix to hl via the stack
040C1F E1          0376*      pop hl ; hl = x1
040C20 ED 42       0377*      sbc hl,bc ; hl = dx
040C22 22 37 0C 04 0378*      ld (dx168),hl ; dx to scratch
040C26             0379*  ; compute dy = y1-y0
040C26 AF          0380*      xor a ; clear carry
040C27 FD E5       0381*      push iy ; move iy to hl via the stack
040C29 E1          0382*      pop hl ; hl = y1
040C2A ED 52       0383*      sbc hl,de ; hl = dy
040C2C 22 3D 0C 04 0384*      ld (dy168),hl ; dy to scratch
040C30             0385*  ; populate output registers and return
040C30 EB          0386*      ex de,hl ; ud.e = dy
040C31 ED 4B 37 0C 0387*      ld bc,(dx168) ; ub.c = dx
       04          
040C36 C9          0388*      ret
040C37 00 00 00 00 0389*  dx168: blkb 6,0
       00 00       
040C3D 00 00 00 00 0390*  dy168: blkb 6,0
       00 00       
040C43             0391*  
040C43             0392*  ; compute the euclidian distance between two cartesian coordinates
040C43             0393*  ; using the formula d = sqrt(dx^2+dy^2)
040C43             0394*  ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C43             0395*  ; output; uh.l is the 16.8 fixed format distance
040C43             0396*  ;         also populates scratch locations dx168 and dy168
040C43             0397*  ; destroys: a,hl,bc,de
040C43             0398*  ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
040C43             0399*  ;       thus the result will always be an integer, albeit in 16.8 format
040C43             0400*  distance168:
040C43             0401*  ; compute dy^2
040C43 2A 3D 0C 04 0402*      ld hl,(dy168)
040C47 CD 06 09 04 0403*      call hlu_abs
040C4B CD 6D 09 04 0404*      call hlu_udiv256 ; make integer to avoid overflow
040C4F E5          0405*      push hl
040C50 D1          0406*      pop de
040C51 CD B8 0A 04 0407*      call umul24 ; hl = dy^2
040C55 E5          0408*      push hl ; save dy^2
040C56             0409*  ; compute dx^2
040C56 2A 37 0C 04 0410*      ld hl,(dx168)
040C5A CD 06 09 04 0411*      call hlu_abs
040C5E CD 6D 09 04 0412*      call hlu_udiv256 ; make integer to avoid overflow
040C62 E5          0413*      push hl
040C63 D1          0414*      pop de
040C64 CD B8 0A 04 0415*      call umul24 ; hl = dx^2
040C68             0416*  ; add dx^2 and dy^2
040C68 D1          0417*      pop de ; de = dy^2 (was hl)
040C69 19          0418*      add hl,de ; hl = dx^2 + dy^2
040C6A             0419*  ; compute the square root
040C6A CD 68 0D 04 0420*      call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C6E EB          0421*      ex de,hl ; hl = distance
040C6F             0422*      hlu_mul256 ; convert back to 16.8 fixed
040C6F 29          0001*M     add hl,hl ; * 2
040C70 29          0002*M     add hl,hl ; * 4
040C71 29          0003*M     add hl,hl ; * 8
040C72 29          0004*M     add hl,hl ; * 16
040C73 29          0005*M     add hl,hl ; * 32
040C74 29          0006*M     add hl,hl ; * 64
040C75 29          0007*M     add hl,hl ; * 128
040C76 29          0008*M     add hl,hl ; * 256
040C77 C9          0423*      ret
040C78             0424*  
040C78             0425*  ; compute the euclidian distance between two cartesian coordinates
040C78             0426*  ; using the formula d = sqrt(dx^2+dy^2)
040C78             0427*  ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040C78             0428*  ; output; uh.l is the 16.8 fixed format distance
040C78             0429*  ;         also populates scratch locations dx168 and dy168
040C78             0430*  ; destroys: a,hl,bc,de
040C78             0431*  ; NOTE: sm means 'small' because it doesn't round down the deltas
040C78             0432*  ;       making it more accurate for small deltas,
040C78             0433*  ;       but will overflow if used for screen-sized deltas
040C78             0434*  distance168sm:
040C78             0435*  ; compute dy^2
040C78 2A 3D 0C 04 0436*      ld hl,(dy168)
040C7C CD 06 09 04 0437*      call hlu_abs
040C80 E5          0438*      push hl
040C81 D1          0439*      pop de
040C82 CD B8 0A 04 0440*      call umul24 ; hl = dy^2
040C86 E5          0441*      push hl ; save dy^2
040C87             0442*  ; compute dx^2
040C87 2A 37 0C 04 0443*      ld hl,(dx168)
040C8B CD 06 09 04 0444*      call hlu_abs
040C8F E5          0445*      push hl
040C90 D1          0446*      pop de
040C91 CD B8 0A 04 0447*      call umul24 ; hl = dx^2
040C95             0448*  ; add dx^2 and dy^2
040C95 D1          0449*      pop de ; de = dy^2 (was hl)
040C96 19          0450*      add hl,de ; hl = dx^2 + dy^2
040C97             0451*  ; compute the square root
040C97 CD 68 0D 04 0452*      call sqrt24 ; de = sqrt(dx^2 + dy^2)
040C9B EB          0453*      ex de,hl ; hl = distance
040C9C C9          0454*      ret
040C9D             0455*  
040C9D             0456*  ; atan2_(ub.c,ud.e) --> uh.l
040C9D             0457*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040C9D             0458*  ;   whether inputs are integers or fractional doesn't matter
040C9D             0459*  ;   so long as the sign bit of the upper byte is correct
040C9D             0460*  ; output: uh.l is the 16.8 fixed angle in degrees 256
040C9D             0461*  ; angles are COMPASS HEADINGS based on
040C9D             0462*  ; screen coordinate conventions,where the y axis is flipped
040C9D             0463*  ; #E0 224      0       32 #20
040C9D             0464*  ;        -x,-y | +x,-y
040C9D             0465*  ; #C0 192------+------ 64 #40
040C9D             0466*  ;        -x,+y | +x,+y
040C9D             0467*  ; #A0 160   128 #80   96 #60
040C9D             0468*  atan2_168fast:
040C9D             0469*  ; get signs and make everything positive
040C9D             0470*  ; get abs(x) and store its original sign
040C9D C5          0471*      push bc
040C9E E1          0472*      pop hl
040C9F CD 06 09 04 0473*      call hlu_abs ; if x was negative this also sets the sign flag
040CA3 E5          0474*      push hl ; store abs(x)
040CA4 C1          0475*      pop bc ; bc = abs(x)
040CA5 F5          0476*      push af ; store sign of x
040CA6             0477*  ; get abs(y) and store its original sign
040CA6 EB          0478*      ex de,hl ; hl = y
040CA7 CD 06 09 04 0479*      call hlu_abs ; if y was negative this also sets the sign flag
040CAB EB          0480*      ex de,hl ; de = abs(y)
040CAC F5          0481*      push af ; store sign of y
040CAD             0482*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
040CAD             0483*  ; this ensures that our lookup value is between 0 and 1 inclusive
040CAD AF          0484*      xor a ; clear the carry flag
040CAE D5          0485*      push de
040CAF E1          0486*      pop hl
040CB0 ED 42       0487*      sbc hl,bc
040CB2 F5          0488*      push af ; save sign of de - bc
040CB3 F2 BC 0C 04 0489*      jp p,@1 ; bc <= de, so we skip ahead
040CB7             0490*  ; otherwise we swap bc and de
040CB7 C5          0491*      push bc
040CB8 E1          0492*      pop hl
040CB9 EB          0493*      ex de,hl
040CBA E5          0494*      push hl
040CBB C1          0495*      pop bc
040CBC             0496*  @1:
040CBC             0497*  ; now we're ready to snag our preliminary result
040CBC C5          0498*      push bc
040CBD E1          0499*      pop hl
040CBE CD 2C 0D 04 0500*      call atan_168fast ; uh.l comes back with prelim result
040CC2             0501*  ; now we adjust uh.l based on sign of de - bc
040CC2 F1          0502*      pop af
040CC3 F2 CF 0C 04 0503*      jp p,@2 ; bc <= de,so we skip ahead
040CC7 EB          0504*      ex de,hl
040CC8 21 00 40 00 0505*      ld hl,64*256 ; subtract from 64 (90) degrees
040CCC AF          0506*      xor a ; clear the carry flag
040CCD ED 52       0507*      sbc hl,de
040CCF             0508*  @2:
040CCF             0509*  ; adjust the result based on quadrant
040CCF             0510*  ; #E0 224      0       32 #20
040CCF             0511*  ;        -x,-y | +x,-y
040CCF             0512*  ; #C0 192------+------ 64 #40
040CCF             0513*  ;        -x,+y | +x,+y
040CCF             0514*  ; #A0 160   128 #80   96 #60
040CCF F1          0515*      pop af ; sign of y
040CD0 CA 0D 0D 04 0516*      jp z,@y_zero
040CD4 F2 ED 0C 04 0517*      jp p,@y_pos
040CD8             0518*  ; y neg,check x
040CD8 F1          0519*      pop af ; sign of x
040CD9 CA E7 0C 04 0520*      jp z,@y_neg_x_zero
040CDD F2 EC 0C 04 0521*      jp p,@y_neg_x_pos
040CE1             0522*  ; y neg,x neg
040CE1             0523*  ; angle is 128 to 256 (270 to 360)
040CE1             0524*  ; negating the intermediate does the trick
040CE1 CD 16 09 04 0525*      call neg_hlu
040CE5 18 31       0526*      jr @zero_hlu
040CE7             0527*  
040CE7             0528*  @y_neg_x_zero:
040CE7             0529*  ; y neg,x zero
040CE7             0530*  ; angle is 0
040CE7 21 00 00 00 0531*      ld hl,0
040CEB C9          0532*      ret
040CEC             0533*  @y_neg_x_pos:
040CEC             0534*  ; y neg,x pos
040CEC             0535*  ; angle is 0 to 64 (0 to 90)
040CEC             0536*  ; so we're good
040CEC C9          0537*      ret
040CED             0538*  
040CED             0539*  @y_pos:
040CED F1          0540*      pop af ; sign of x
040CEE CA FD 0C 04 0541*      jp z,@y_pos_x_zero
040CF2 F2 02 0D 04 0542*      jp p,@y_pos_x_pos
040CF6             0543*  ; y pos,x neg
040CF6             0544*  ; angle is 128 to 192 (180-270)
040CF6             0545*  ; so we add 128 to intermediate
040CF6 11 00 80 00 0546*      ld de,128*256
040CFA 19          0547*      add hl,de
040CFB 18 1B       0548*      jr @zero_hlu
040CFD             0549*  @y_pos_x_zero:
040CFD             0550*  ; y pos,x zero
040CFD             0551*  ; angle is 128 (180)
040CFD 21 00 80 00 0552*      ld hl,128*256
040D01 C9          0553*      ret
040D02             0554*  @y_pos_x_pos:
040D02             0555*  ; y pos,x pos
040D02             0556*  ; angle is 64 to 128 (90 to 180)
040D02             0557*  ; neg the intermediate and add 180 degrees
040D02 CD 16 09 04 0558*      call neg_hlu
040D06 11 00 80 00 0559*      ld de,128*256
040D0A 19          0560*      add hl,de
040D0B 18 0B       0561*      jr @zero_hlu
040D0D             0562*  
040D0D             0563*  @y_zero:
040D0D F1          0564*      pop af ; sign of x
040D0E FA 13 0D 04 0565*      jp m,@y_zero_x_neg
040D12             0566*  ; y zero,x pos
040D12             0567*  ; angle is 64 (90),nothing to do
040D12 C9          0568*      ret
040D13             0569*  @y_zero_x_neg:
040D13             0570*  ; y zero ,x neg
040D13             0571*  ; angle is 192 (270)
040D13 21 00 C0 00 0572*      ld hl,192*256
040D17 C9          0573*      ret
040D18             0574*  @zero_hlu:
040D18 AF          0575*      xor a
040D19 22 26 0D 04 0576*      ld (@scratch),hl
040D1D 32 28 0D 04 0577*      ld (@scratch+2),a
040D21 2A 26 0D 04 0578*      ld hl,(@scratch)
040D25 C9          0579*      ret
040D26             0580*  @scratch: ds 6
040D2C             0581*  
040D2C             0582*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040D2C             0583*  ; output: uh.l is the 16.8 fixed format angle in degrees 256
040D2C             0584*  ; destroys: a,hl,bc,de
040D2C             0585*  ; note: only works for angles from 0 to 32 (45) degrees
040D2C             0586*  ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040D2C             0587*  atan_168fast:
040D2C             0588*  ; because we use compass headings instead of geometric angles
040D2C             0589*  ; we compute dx/dy which is 1/tan(theta) in the maths world
040D2C             0590*  ; we can do faster unsigned division here because we know dx and dy are positive
040D2C CD ED 0A 04 0591*      call udiv168 ; ud.e = dx/dy
040D30 EB          0592*      ex de,hl ; uh.l = dx/dy
040D31             0593*  ; test uh.l for 0
040D31 19          0594*      add hl,de
040D32 B7          0595*      or a
040D33 ED 52       0596*      sbc hl,de
040D35 28 22       0597*      jr z,@is_zero
040D37             0598*  ; test uh.l for 1
040D37 AF          0599*      xor a ; clear carry
040D38 EB          0600*      ex de,hl
040D39 21 00 01 00 0601*      ld hl,1*256 ; 1 in 16.8 fixed format
040D3D ED 52       0602*      sbc hl,de
040D3F 28 13       0603*      jr z,@is_45
040D41 EB          0604*      ex de,hl
040D42             0605*  ; no special cases so we move on
040D42             0606*  ; l contains the fractional portion of tan(uh.l)
040D42             0607*  ; we multiply it by three to get our lookup table index
040D42 26 03       0608*      ld h,3
040D44 ED 6C       0609*      mlt hl ; index into lut
040D46 11 00 00 00 0610*      ld de,0 ; clear deu
040D4A 54          0611*      ld d,h ; copy hl to de
040D4B 5D          0612*      ld e,l ; de contains our index
040D4C 21 51 11 04 0613*      ld hl,atan_lut_168 ; grab the lut address
040D50 19          0614*      add hl,de ; bump hl by the index
040D51 ED 27       0615*      ld hl,(hl) ; don't try this on a z80!
040D53 C9          0616*      ret ; and out
040D54             0617*  @is_45:
040D54 21 00 20 00 0618*      ld hl,32*256
040D58 C9          0619*      ret
040D59             0620*  ; for the case tan(0)
040D59             0621*  @is_zero:
040D59 21 00 00 00 0622*      ld hl,0*256
040D5D C9          0623*      ret
040D5E             0624*  
040D5E             0625*  ; Expects  ADL mode
040D5E             0626*  ; Inputs:  UH.L
040D5E             0627*  ; Outputs: UH.L is the 16.8 square root
040D5E             0628*  ;          UDE is the integer difference inputHL-DE^2
040D5E             0629*  sqrt168:
040D5E CD 68 0D 04 0630*      call sqrt24
040D62 EB          0631*      ex de,hl
040D63 29          0632*      add hl,hl
040D64 29          0633*      add hl,hl
040D65 29          0634*      add hl,hl
040D66 29          0635*      add hl,hl
040D67 C9          0636*      ret
040D68             0637*  
040D68             0638*  ; credit: xeda112358
040D68             0639*  ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040D68             0640*  sqrt24:
040D68             0641*  ; Expects ADL mode
040D68             0642*  ; Inputs: HL
040D68             0643*  ; Outputs: DE is the integer square root
040D68             0644*  ;  HL is the difference inputHL-DE^2
040D68             0645*  ;  c flag reset
040D68 01 00 00 00 0646*      ld bc,0 ; clear bcu
040D6C 11 00 00 00 0647*      ld de,0 ; clear deu
040D70 AF          0648*      xor a
040D71 45          0649*      ld b,l
040D72 C5          0650*      push bc
040D73 47          0651*      ld b,a
040D74 6F          0652*      ld l,a
040D75             0653*  ; Iteration 1
040D75 29          0654*      add hl,hl
040D76 CB 11       0655*      rl c
040D78 29          0656*      add hl,hl
040D79 CB 11       0657*      rl c
040D7B 91          0658*      sub c
040D7C 30 04       0659*      jr nc,$+6
040D7E 1C          0660*      inc e
040D7F 1C          0661*      inc e
040D80 2F          0662*      cpl
040D81 4F          0663*      ld c,a
040D82             0664*  ; Iteration 2
040D82 29          0665*      add hl,hl
040D83 CB 11       0666*      rl c
040D85 29          0667*      add hl,hl
040D86 CB 11       0668*      rl c
040D88 CB 13       0669*      rl e
040D8A 7B          0670*      ld a,e
040D8B 91          0671*      sub c
040D8C 30 04       0672*      jr nc,$+6
040D8E 1C          0673*      inc e
040D8F 1C          0674*      inc e
040D90 2F          0675*      cpl
040D91 4F          0676*      ld c,a
040D92             0677*  ; Iteration 3
040D92 29          0678*      add hl,hl
040D93 CB 11       0679*      rl c
040D95 29          0680*      add hl,hl
040D96 CB 11       0681*      rl c
040D98 CB 13       0682*      rl e
040D9A 7B          0683*      ld a,e
040D9B 91          0684*      sub c
040D9C 30 04       0685*      jr nc,$+6
040D9E 1C          0686*      inc e
040D9F 1C          0687*      inc e
040DA0 2F          0688*      cpl
040DA1 4F          0689*      ld c,a
040DA2             0690*  ; Iteration 4
040DA2 29          0691*      add hl,hl
040DA3 CB 11       0692*      rl c
040DA5 29          0693*      add hl,hl
040DA6 CB 11       0694*      rl c
040DA8 CB 13       0695*      rl e
040DAA 7B          0696*      ld a,e
040DAB 91          0697*      sub c
040DAC 30 04       0698*      jr nc,$+6
040DAE 1C          0699*      inc e
040DAF 1C          0700*      inc e
040DB0 2F          0701*      cpl
040DB1 4F          0702*      ld c,a
040DB2             0703*  ; Iteration 5
040DB2 29          0704*      add hl,hl
040DB3 CB 11       0705*      rl c
040DB5 29          0706*      add hl,hl
040DB6 CB 11       0707*      rl c
040DB8 CB 13       0708*      rl e
040DBA 7B          0709*      ld a,e
040DBB 91          0710*      sub c
040DBC 30 04       0711*      jr nc,$+6
040DBE 1C          0712*      inc e
040DBF 1C          0713*      inc e
040DC0 2F          0714*      cpl
040DC1 4F          0715*      ld c,a
040DC2             0716*  ; Iteration 6
040DC2 29          0717*      add hl,hl
040DC3 CB 11       0718*      rl c
040DC5 29          0719*      add hl,hl
040DC6 CB 11       0720*      rl c
040DC8 CB 13       0721*      rl e
040DCA 7B          0722*      ld a,e
040DCB 91          0723*      sub c
040DCC 30 04       0724*      jr nc,$+6
040DCE 1C          0725*      inc e
040DCF 1C          0726*      inc e
040DD0 2F          0727*      cpl
040DD1 4F          0728*      ld c,a
040DD2             0729*  ; Iteration 7
040DD2 29          0730*      add hl,hl
040DD3 CB 11       0731*      rl c
040DD5 29          0732*      add hl,hl
040DD6 CB 11       0733*      rl c
040DD8 CB 10       0734*      rl b
040DDA EB          0735*      ex de,hl
040DDB 29          0736*      add hl,hl
040DDC E5          0737*      push hl
040DDD ED 42       0738*      sbc hl,bc
040DDF 30 06       0739*      jr nc,$+8
040DE1 7C          0740*      ld a,h
040DE2 2F          0741*      cpl
040DE3 47          0742*      ld b,a
040DE4 7D          0743*      ld a,l
040DE5 2F          0744*      cpl
040DE6 4F          0745*      ld c,a
040DE7 E1          0746*      pop hl
040DE8 30 02       0747*      jr nc,$+4
040DEA 23          0748*      inc hl
040DEB 23          0749*      inc hl
040DEC EB          0750*      ex de,hl
040DED             0751*  ; Iteration 8
040DED 29          0752*      add hl,hl
040DEE 69          0753*      ld l,c
040DEF 60          0754*      ld h,b
040DF0 ED 6A       0755*      adc hl,hl
040DF2 ED 6A       0756*      adc hl,hl
040DF4 EB          0757*      ex de,hl
040DF5 29          0758*      add hl,hl
040DF6 ED 52       0759*      sbc hl,de
040DF8 19          0760*      add hl,de
040DF9 EB          0761*      ex de,hl
040DFA 30 04       0762*      jr nc,$+6
040DFC ED 52       0763*      sbc hl,de
040DFE 13          0764*      inc de
040DFF 13          0765*      inc de
040E00             0766*  ; Iteration 9
040E00 F1          0767*      pop af
040E01 17          0768*      rla
040E02 ED 6A       0769*      adc hl,hl
040E04 17          0770*      rla
040E05 ED 6A       0771*      adc hl,hl
040E07 EB          0772*      ex de,hl
040E08 29          0773*      add hl,hl
040E09 ED 52       0774*      sbc hl,de
040E0B 19          0775*      add hl,de
040E0C EB          0776*      ex de,hl
040E0D 30 04       0777*      jr nc,$+6
040E0F ED 52       0778*      sbc hl,de
040E11 13          0779*      inc de
040E12 13          0780*      inc de
040E13             0781*  ; Iteration 10
040E13 17          0782*      rla
040E14 ED 6A       0783*      adc hl,hl
040E16 17          0784*      rla
040E17 ED 6A       0785*      adc hl,hl
040E19 EB          0786*      ex de,hl
040E1A 29          0787*      add hl,hl
040E1B ED 52       0788*      sbc hl,de
040E1D 19          0789*      add hl,de
040E1E EB          0790*      ex de,hl
040E1F 30 04       0791*      jr nc,$+6
040E21 ED 52       0792*      sbc hl,de
040E23 13          0793*      inc de
040E24 13          0794*      inc de
040E25             0795*  ; Iteration 11
040E25 17          0796*      rla
040E26 ED 6A       0797*      adc hl,hl
040E28 17          0798*      rla
040E29 ED 6A       0799*      adc hl,hl
040E2B EB          0800*      ex de,hl
040E2C 29          0801*      add hl,hl
040E2D ED 52       0802*      sbc hl,de
040E2F 19          0803*      add hl,de
040E30 EB          0804*      ex de,hl
040E31 30 04       0805*      jr nc,$+6
040E33 ED 52       0806*      sbc hl,de
040E35 13          0807*      inc de
040E36 13          0808*      inc de
040E37             0809*  ; Iteration 12
040E37 17          0810*      rla
040E38 ED 6A       0811*      adc hl,hl
040E3A 17          0812*      rla
040E3B ED 6A       0813*      adc hl,hl
040E3D EB          0814*      ex de,hl
040E3E 29          0815*      add hl,hl
040E3F ED 52       0816*      sbc hl,de
040E41 19          0817*      add hl,de
040E42 EB          0818*      ex de,hl
040E43 30 04       0819*      jr nc,$+6
040E45 ED 52       0820*      sbc hl,de
040E47 13          0821*      inc de
040E48 13          0822*      inc de
040E49 CB 1A       0823*      rr d
040E4B CB 1B       0824*      rr e
040E4D C9          0825*      ret
040E4E             0826*  
040E4E             0827*  sin_lut_168:
040E4E 00 00 00    0828*      dl 0x000000 ; 0.000 00, 0.000
040E51 06 00 00    0829*      dl 0x000006 ; 1.406 01, 0.025
040E54 0C 00 00    0830*      dl 0x00000C ; 2.813 02, 0.049
040E57 12 00 00    0831*      dl 0x000012 ; 4.219 03, 0.074
040E5A 19 00 00    0832*      dl 0x000019 ; 5.625 04, 0.098
040E5D 1F 00 00    0833*      dl 0x00001F ; 7.031 05, 0.122
040E60 25 00 00    0834*      dl 0x000025 ; 8.438 06, 0.147
040E63 2B 00 00    0835*      dl 0x00002B ; 9.844 07, 0.171
040E66 31 00 00    0836*      dl 0x000031 ; 11.250 08, 0.195
040E69 38 00 00    0837*      dl 0x000038 ; 12.656 09, 0.219
040E6C 3E 00 00    0838*      dl 0x00003E ; 14.063 0A, 0.243
040E6F 44 00 00    0839*      dl 0x000044 ; 15.469 0B, 0.267
040E72 4A 00 00    0840*      dl 0x00004A ; 16.875 0C, 0.290
040E75 50 00 00    0841*      dl 0x000050 ; 18.281 0D, 0.314
040E78 56 00 00    0842*      dl 0x000056 ; 19.688 0E, 0.337
040E7B 5C 00 00    0843*      dl 0x00005C ; 21.094 0F, 0.360
040E7E 61 00 00    0844*      dl 0x000061 ; 22.500 10, 0.383
040E81 67 00 00    0845*      dl 0x000067 ; 23.906 11, 0.405
040E84 6D 00 00    0846*      dl 0x00006D ; 25.313 12, 0.428
040E87 73 00 00    0847*      dl 0x000073 ; 26.719 13, 0.450
040E8A 78 00 00    0848*      dl 0x000078 ; 28.125 14, 0.471
040E8D 7E 00 00    0849*      dl 0x00007E ; 29.531 15, 0.493
040E90 83 00 00    0850*      dl 0x000083 ; 30.938 16, 0.514
040E93 88 00 00    0851*      dl 0x000088 ; 32.344 17, 0.535
040E96 8E 00 00    0852*      dl 0x00008E ; 33.750 18, 0.556
040E99 93 00 00    0853*      dl 0x000093 ; 35.156 19, 0.576
040E9C 98 00 00    0854*      dl 0x000098 ; 36.563 1A, 0.596
040E9F 9D 00 00    0855*      dl 0x00009D ; 37.969 1B, 0.615
040EA2 A2 00 00    0856*      dl 0x0000A2 ; 39.375 1C, 0.634
040EA5 A7 00 00    0857*      dl 0x0000A7 ; 40.781 1D, 0.653
040EA8 AB 00 00    0858*      dl 0x0000AB ; 42.188 1E, 0.672
040EAB B0 00 00    0859*      dl 0x0000B0 ; 43.594 1F, 0.690
040EAE B5 00 00    0860*      dl 0x0000B5 ; 45.000 20, 0.707
040EB1 B9 00 00    0861*      dl 0x0000B9 ; 46.406 21, 0.724
040EB4 BD 00 00    0862*      dl 0x0000BD ; 47.813 22, 0.741
040EB7 C1 00 00    0863*      dl 0x0000C1 ; 49.219 23, 0.757
040EBA C5 00 00    0864*      dl 0x0000C5 ; 50.625 24, 0.773
040EBD C9 00 00    0865*      dl 0x0000C9 ; 52.031 25, 0.788
040EC0 CD 00 00    0866*      dl 0x0000CD ; 53.438 26, 0.803
040EC3 D1 00 00    0867*      dl 0x0000D1 ; 54.844 27, 0.818
040EC6 D4 00 00    0868*      dl 0x0000D4 ; 56.250 28, 0.831
040EC9 D8 00 00    0869*      dl 0x0000D8 ; 57.656 29, 0.845
040ECC DB 00 00    0870*      dl 0x0000DB ; 59.063 2A, 0.858
040ECF DE 00 00    0871*      dl 0x0000DE ; 60.469 2B, 0.870
040ED2 E1 00 00    0872*      dl 0x0000E1 ; 61.875 2C, 0.882
040ED5 E4 00 00    0873*      dl 0x0000E4 ; 63.281 2D, 0.893
040ED8 E7 00 00    0874*      dl 0x0000E7 ; 64.688 2E, 0.904
040EDB EA 00 00    0875*      dl 0x0000EA ; 66.094 2F, 0.914
040EDE EC 00 00    0876*      dl 0x0000EC ; 67.500 30, 0.924
040EE1 EE 00 00    0877*      dl 0x0000EE ; 68.906 31, 0.933
040EE4 F1 00 00    0878*      dl 0x0000F1 ; 70.313 32, 0.942
040EE7 F3 00 00    0879*      dl 0x0000F3 ; 71.719 33, 0.950
040EEA F4 00 00    0880*      dl 0x0000F4 ; 73.125 34, 0.957
040EED F6 00 00    0881*      dl 0x0000F6 ; 74.531 35, 0.964
040EF0 F8 00 00    0882*      dl 0x0000F8 ; 75.938 36, 0.970
040EF3 F9 00 00    0883*      dl 0x0000F9 ; 77.344 37, 0.976
040EF6 FB 00 00    0884*      dl 0x0000FB ; 78.750 38, 0.981
040EF9 FC 00 00    0885*      dl 0x0000FC ; 80.156 39, 0.985
040EFC FD 00 00    0886*      dl 0x0000FD ; 81.563 3A, 0.989
040EFF FE 00 00    0887*      dl 0x0000FE ; 82.969 3B, 0.992
040F02 FE 00 00    0888*      dl 0x0000FE ; 84.375 3C, 0.995
040F05 FF 00 00    0889*      dl 0x0000FF ; 85.781 3D, 0.997
040F08 FF 00 00    0890*      dl 0x0000FF ; 87.188 3E, 0.999
040F0B FF 00 00    0891*      dl 0x0000FF ; 88.594 3F, 1.000
040F0E 00 01 00    0892*      dl 0x000100 ; 90.000 40, 1.000
040F11 FF 00 00    0893*      dl 0x0000FF ; 91.406 41, 1.000
040F14 FF 00 00    0894*      dl 0x0000FF ; 92.813 42, 0.999
040F17 FF 00 00    0895*      dl 0x0000FF ; 94.219 43, 0.997
040F1A FE 00 00    0896*      dl 0x0000FE ; 95.625 44, 0.995
040F1D FE 00 00    0897*      dl 0x0000FE ; 97.031 45, 0.992
040F20 FD 00 00    0898*      dl 0x0000FD ; 98.438 46, 0.989
040F23 FC 00 00    0899*      dl 0x0000FC ; 99.844 47, 0.985
040F26 FB 00 00    0900*      dl 0x0000FB ; 101.250 48, 0.981
040F29 F9 00 00    0901*      dl 0x0000F9 ; 102.656 49, 0.976
040F2C F8 00 00    0902*      dl 0x0000F8 ; 104.063 4A, 0.970
040F2F F6 00 00    0903*      dl 0x0000F6 ; 105.469 4B, 0.964
040F32 F4 00 00    0904*      dl 0x0000F4 ; 106.875 4C, 0.957
040F35 F3 00 00    0905*      dl 0x0000F3 ; 108.281 4D, 0.950
040F38 F1 00 00    0906*      dl 0x0000F1 ; 109.688 4E, 0.942
040F3B EE 00 00    0907*      dl 0x0000EE ; 111.094 4F, 0.933
040F3E EC 00 00    0908*      dl 0x0000EC ; 112.500 50, 0.924
040F41 EA 00 00    0909*      dl 0x0000EA ; 113.906 51, 0.914
040F44 E7 00 00    0910*      dl 0x0000E7 ; 115.313 52, 0.904
040F47 E4 00 00    0911*      dl 0x0000E4 ; 116.719 53, 0.893
040F4A E1 00 00    0912*      dl 0x0000E1 ; 118.125 54, 0.882
040F4D DE 00 00    0913*      dl 0x0000DE ; 119.531 55, 0.870
040F50 DB 00 00    0914*      dl 0x0000DB ; 120.938 56, 0.858
040F53 D8 00 00    0915*      dl 0x0000D8 ; 122.344 57, 0.845
040F56 D4 00 00    0916*      dl 0x0000D4 ; 123.750 58, 0.831
040F59 D1 00 00    0917*      dl 0x0000D1 ; 125.156 59, 0.818
040F5C CD 00 00    0918*      dl 0x0000CD ; 126.563 5A, 0.803
040F5F C9 00 00    0919*      dl 0x0000C9 ; 127.969 5B, 0.788
040F62 C5 00 00    0920*      dl 0x0000C5 ; 129.375 5C, 0.773
040F65 C1 00 00    0921*      dl 0x0000C1 ; 130.781 5D, 0.757
040F68 BD 00 00    0922*      dl 0x0000BD ; 132.188 5E, 0.741
040F6B B9 00 00    0923*      dl 0x0000B9 ; 133.594 5F, 0.724
040F6E B5 00 00    0924*      dl 0x0000B5 ; 135.000 60, 0.707
040F71 B0 00 00    0925*      dl 0x0000B0 ; 136.406 61, 0.690
040F74 AB 00 00    0926*      dl 0x0000AB ; 137.813 62, 0.672
040F77 A7 00 00    0927*      dl 0x0000A7 ; 139.219 63, 0.653
040F7A A2 00 00    0928*      dl 0x0000A2 ; 140.625 64, 0.634
040F7D 9D 00 00    0929*      dl 0x00009D ; 142.031 65, 0.615
040F80 98 00 00    0930*      dl 0x000098 ; 143.438 66, 0.596
040F83 93 00 00    0931*      dl 0x000093 ; 144.844 67, 0.576
040F86 8E 00 00    0932*      dl 0x00008E ; 146.250 68, 0.556
040F89 88 00 00    0933*      dl 0x000088 ; 147.656 69, 0.535
040F8C 83 00 00    0934*      dl 0x000083 ; 149.063 6A, 0.514
040F8F 7E 00 00    0935*      dl 0x00007E ; 150.469 6B, 0.493
040F92 78 00 00    0936*      dl 0x000078 ; 151.875 6C, 0.471
040F95 73 00 00    0937*      dl 0x000073 ; 153.281 6D, 0.450
040F98 6D 00 00    0938*      dl 0x00006D ; 154.688 6E, 0.428
040F9B 67 00 00    0939*      dl 0x000067 ; 156.094 6F, 0.405
040F9E 61 00 00    0940*      dl 0x000061 ; 157.500 70, 0.383
040FA1 5C 00 00    0941*      dl 0x00005C ; 158.906 71, 0.360
040FA4 56 00 00    0942*      dl 0x000056 ; 160.313 72, 0.337
040FA7 50 00 00    0943*      dl 0x000050 ; 161.719 73, 0.314
040FAA 4A 00 00    0944*      dl 0x00004A ; 163.125 74, 0.290
040FAD 44 00 00    0945*      dl 0x000044 ; 164.531 75, 0.267
040FB0 3E 00 00    0946*      dl 0x00003E ; 165.938 76, 0.243
040FB3 38 00 00    0947*      dl 0x000038 ; 167.344 77, 0.219
040FB6 31 00 00    0948*      dl 0x000031 ; 168.750 78, 0.195
040FB9 2B 00 00    0949*      dl 0x00002B ; 170.156 79, 0.171
040FBC 25 00 00    0950*      dl 0x000025 ; 171.563 7A, 0.147
040FBF 1F 00 00    0951*      dl 0x00001F ; 172.969 7B, 0.122
040FC2 19 00 00    0952*      dl 0x000019 ; 174.375 7C, 0.098
040FC5 12 00 00    0953*      dl 0x000012 ; 175.781 7D, 0.074
040FC8 0C 00 00    0954*      dl 0x00000C ; 177.188 7E, 0.049
040FCB 06 00 00    0955*      dl 0x000006 ; 178.594 7F, 0.025
040FCE 00 00 00    0956*      dl 0x000000 ; 180.000 80, 0.000
040FD1 FA FF FF    0957*      dl 0xFFFFFA ; 181.406 81, -0.025
040FD4 F4 FF FF    0958*      dl 0xFFFFF4 ; 182.813 82, -0.049
040FD7 EE FF FF    0959*      dl 0xFFFFEE ; 184.219 83, -0.074
040FDA E7 FF FF    0960*      dl 0xFFFFE7 ; 185.625 84, -0.098
040FDD E1 FF FF    0961*      dl 0xFFFFE1 ; 187.031 85, -0.122
040FE0 DB FF FF    0962*      dl 0xFFFFDB ; 188.438 86, -0.147
040FE3 D5 FF FF    0963*      dl 0xFFFFD5 ; 189.844 87, -0.171
040FE6 CF FF FF    0964*      dl 0xFFFFCF ; 191.250 88, -0.195
040FE9 C8 FF FF    0965*      dl 0xFFFFC8 ; 192.656 89, -0.219
040FEC C2 FF FF    0966*      dl 0xFFFFC2 ; 194.063 8A, -0.243
040FEF BC FF FF    0967*      dl 0xFFFFBC ; 195.469 8B, -0.267
040FF2 B6 FF FF    0968*      dl 0xFFFFB6 ; 196.875 8C, -0.290
040FF5 B0 FF FF    0969*      dl 0xFFFFB0 ; 198.281 8D, -0.314
040FF8 AA FF FF    0970*      dl 0xFFFFAA ; 199.688 8E, -0.337
040FFB A4 FF FF    0971*      dl 0xFFFFA4 ; 201.094 8F, -0.360
040FFE 9F FF FF    0972*      dl 0xFFFF9F ; 202.500 90, -0.383
041001 99 FF FF    0973*      dl 0xFFFF99 ; 203.906 91, -0.405
041004 93 FF FF    0974*      dl 0xFFFF93 ; 205.313 92, -0.428
041007 8D FF FF    0975*      dl 0xFFFF8D ; 206.719 93, -0.450
04100A 88 FF FF    0976*      dl 0xFFFF88 ; 208.125 94, -0.471
04100D 82 FF FF    0977*      dl 0xFFFF82 ; 209.531 95, -0.493
041010 7D FF FF    0978*      dl 0xFFFF7D ; 210.938 96, -0.514
041013 78 FF FF    0979*      dl 0xFFFF78 ; 212.344 97, -0.535
041016 72 FF FF    0980*      dl 0xFFFF72 ; 213.750 98, -0.556
041019 6D FF FF    0981*      dl 0xFFFF6D ; 215.156 99, -0.576
04101C 68 FF FF    0982*      dl 0xFFFF68 ; 216.563 9A, -0.596
04101F 63 FF FF    0983*      dl 0xFFFF63 ; 217.969 9B, -0.615
041022 5E FF FF    0984*      dl 0xFFFF5E ; 219.375 9C, -0.634
041025 59 FF FF    0985*      dl 0xFFFF59 ; 220.781 9D, -0.653
041028 55 FF FF    0986*      dl 0xFFFF55 ; 222.188 9E, -0.672
04102B 50 FF FF    0987*      dl 0xFFFF50 ; 223.594 9F, -0.690
04102E 4B FF FF    0988*      dl 0xFFFF4B ; 225.000 A0, -0.707
041031 47 FF FF    0989*      dl 0xFFFF47 ; 226.406 A1, -0.724
041034 43 FF FF    0990*      dl 0xFFFF43 ; 227.813 A2, -0.741
041037 3F FF FF    0991*      dl 0xFFFF3F ; 229.219 A3, -0.757
04103A 3B FF FF    0992*      dl 0xFFFF3B ; 230.625 A4, -0.773
04103D 37 FF FF    0993*      dl 0xFFFF37 ; 232.031 A5, -0.788
041040 33 FF FF    0994*      dl 0xFFFF33 ; 233.438 A6, -0.803
041043 2F FF FF    0995*      dl 0xFFFF2F ; 234.844 A7, -0.818
041046 2C FF FF    0996*      dl 0xFFFF2C ; 236.250 A8, -0.831
041049 28 FF FF    0997*      dl 0xFFFF28 ; 237.656 A9, -0.845
04104C 25 FF FF    0998*      dl 0xFFFF25 ; 239.063 AA, -0.858
04104F 22 FF FF    0999*      dl 0xFFFF22 ; 240.469 AB, -0.870
041052 1F FF FF    1000*      dl 0xFFFF1F ; 241.875 AC, -0.882
041055 1C FF FF    1001*      dl 0xFFFF1C ; 243.281 AD, -0.893
041058 19 FF FF    1002*      dl 0xFFFF19 ; 244.688 AE, -0.904
04105B 16 FF FF    1003*      dl 0xFFFF16 ; 246.094 AF, -0.914
04105E 14 FF FF    1004*      dl 0xFFFF14 ; 247.500 B0, -0.924
041061 12 FF FF    1005*      dl 0xFFFF12 ; 248.906 B1, -0.933
041064 0F FF FF    1006*      dl 0xFFFF0F ; 250.313 B2, -0.942
041067 0D FF FF    1007*      dl 0xFFFF0D ; 251.719 B3, -0.950
04106A 0C FF FF    1008*      dl 0xFFFF0C ; 253.125 B4, -0.957
04106D 0A FF FF    1009*      dl 0xFFFF0A ; 254.531 B5, -0.964
041070 08 FF FF    1010*      dl 0xFFFF08 ; 255.938 B6, -0.970
041073 07 FF FF    1011*      dl 0xFFFF07 ; 257.344 B7, -0.976
041076 05 FF FF    1012*      dl 0xFFFF05 ; 258.750 B8, -0.981
041079 04 FF FF    1013*      dl 0xFFFF04 ; 260.156 B9, -0.985
04107C 03 FF FF    1014*      dl 0xFFFF03 ; 261.563 BA, -0.989
04107F 02 FF FF    1015*      dl 0xFFFF02 ; 262.969 BB, -0.992
041082 02 FF FF    1016*      dl 0xFFFF02 ; 264.375 BC, -0.995
041085 01 FF FF    1017*      dl 0xFFFF01 ; 265.781 BD, -0.997
041088 01 FF FF    1018*      dl 0xFFFF01 ; 267.188 BE, -0.999
04108B 01 FF FF    1019*      dl 0xFFFF01 ; 268.594 BF, -1.000
04108E 00 FF FF    1020*      dl 0xFFFF00 ; 270.000 C0, -1.000
041091 01 FF FF    1021*      dl 0xFFFF01 ; 271.406 C1, -1.000
041094 01 FF FF    1022*      dl 0xFFFF01 ; 272.813 C2, -0.999
041097 01 FF FF    1023*      dl 0xFFFF01 ; 274.219 C3, -0.997
04109A 02 FF FF    1024*      dl 0xFFFF02 ; 275.625 C4, -0.995
04109D 02 FF FF    1025*      dl 0xFFFF02 ; 277.031 C5, -0.992
0410A0 03 FF FF    1026*      dl 0xFFFF03 ; 278.438 C6, -0.989
0410A3 04 FF FF    1027*      dl 0xFFFF04 ; 279.844 C7, -0.985
0410A6 05 FF FF    1028*      dl 0xFFFF05 ; 281.250 C8, -0.981
0410A9 07 FF FF    1029*      dl 0xFFFF07 ; 282.656 C9, -0.976
0410AC 08 FF FF    1030*      dl 0xFFFF08 ; 284.063 CA, -0.970
0410AF 0A FF FF    1031*      dl 0xFFFF0A ; 285.469 CB, -0.964
0410B2 0C FF FF    1032*      dl 0xFFFF0C ; 286.875 CC, -0.957
0410B5 0D FF FF    1033*      dl 0xFFFF0D ; 288.281 CD, -0.950
0410B8 0F FF FF    1034*      dl 0xFFFF0F ; 289.688 CE, -0.942
0410BB 12 FF FF    1035*      dl 0xFFFF12 ; 291.094 CF, -0.933
0410BE 14 FF FF    1036*      dl 0xFFFF14 ; 292.500 D0, -0.924
0410C1 16 FF FF    1037*      dl 0xFFFF16 ; 293.906 D1, -0.914
0410C4 19 FF FF    1038*      dl 0xFFFF19 ; 295.313 D2, -0.904
0410C7 1C FF FF    1039*      dl 0xFFFF1C ; 296.719 D3, -0.893
0410CA 1F FF FF    1040*      dl 0xFFFF1F ; 298.125 D4, -0.882
0410CD 22 FF FF    1041*      dl 0xFFFF22 ; 299.531 D5, -0.870
0410D0 25 FF FF    1042*      dl 0xFFFF25 ; 300.938 D6, -0.858
0410D3 28 FF FF    1043*      dl 0xFFFF28 ; 302.344 D7, -0.845
0410D6 2C FF FF    1044*      dl 0xFFFF2C ; 303.750 D8, -0.831
0410D9 2F FF FF    1045*      dl 0xFFFF2F ; 305.156 D9, -0.818
0410DC 33 FF FF    1046*      dl 0xFFFF33 ; 306.563 DA, -0.803
0410DF 37 FF FF    1047*      dl 0xFFFF37 ; 307.969 DB, -0.788
0410E2 3B FF FF    1048*      dl 0xFFFF3B ; 309.375 DC, -0.773
0410E5 3F FF FF    1049*      dl 0xFFFF3F ; 310.781 DD, -0.757
0410E8 43 FF FF    1050*      dl 0xFFFF43 ; 312.188 DE, -0.741
0410EB 47 FF FF    1051*      dl 0xFFFF47 ; 313.594 DF, -0.724
0410EE 4B FF FF    1052*      dl 0xFFFF4B ; 315.000 E0, -0.707
0410F1 50 FF FF    1053*      dl 0xFFFF50 ; 316.406 E1, -0.690
0410F4 55 FF FF    1054*      dl 0xFFFF55 ; 317.813 E2, -0.672
0410F7 59 FF FF    1055*      dl 0xFFFF59 ; 319.219 E3, -0.653
0410FA 5E FF FF    1056*      dl 0xFFFF5E ; 320.625 E4, -0.634
0410FD 63 FF FF    1057*      dl 0xFFFF63 ; 322.031 E5, -0.615
041100 68 FF FF    1058*      dl 0xFFFF68 ; 323.438 E6, -0.596
041103 6D FF FF    1059*      dl 0xFFFF6D ; 324.844 E7, -0.576
041106 72 FF FF    1060*      dl 0xFFFF72 ; 326.250 E8, -0.556
041109 78 FF FF    1061*      dl 0xFFFF78 ; 327.656 E9, -0.535
04110C 7D FF FF    1062*      dl 0xFFFF7D ; 329.063 EA, -0.514
04110F 82 FF FF    1063*      dl 0xFFFF82 ; 330.469 EB, -0.493
041112 88 FF FF    1064*      dl 0xFFFF88 ; 331.875 EC, -0.471
041115 8D FF FF    1065*      dl 0xFFFF8D ; 333.281 ED, -0.450
041118 93 FF FF    1066*      dl 0xFFFF93 ; 334.688 EE, -0.428
04111B 99 FF FF    1067*      dl 0xFFFF99 ; 336.094 EF, -0.405
04111E 9F FF FF    1068*      dl 0xFFFF9F ; 337.500 F0, -0.383
041121 A4 FF FF    1069*      dl 0xFFFFA4 ; 338.906 F1, -0.360
041124 AA FF FF    1070*      dl 0xFFFFAA ; 340.313 F2, -0.337
041127 B0 FF FF    1071*      dl 0xFFFFB0 ; 341.719 F3, -0.314
04112A B6 FF FF    1072*      dl 0xFFFFB6 ; 343.125 F4, -0.290
04112D BC FF FF    1073*      dl 0xFFFFBC ; 344.531 F5, -0.267
041130 C2 FF FF    1074*      dl 0xFFFFC2 ; 345.938 F6, -0.243
041133 C8 FF FF    1075*      dl 0xFFFFC8 ; 347.344 F7, -0.219
041136 CF FF FF    1076*      dl 0xFFFFCF ; 348.750 F8, -0.195
041139 D5 FF FF    1077*      dl 0xFFFFD5 ; 350.156 F9, -0.171
04113C DB FF FF    1078*      dl 0xFFFFDB ; 351.563 FA, -0.147
04113F E1 FF FF    1079*      dl 0xFFFFE1 ; 352.969 FB, -0.122
041142 E7 FF FF    1080*      dl 0xFFFFE7 ; 354.375 FC, -0.098
041145 EE FF FF    1081*      dl 0xFFFFEE ; 355.781 FD, -0.074
041148 F4 FF FF    1082*      dl 0xFFFFF4 ; 357.188 FE, -0.049
04114B FA FF FF    1083*      dl 0xFFFFFA ; 358.594 FF, -0.025
04114E 00 00 00    1084*      dl 0x000000 ; 0.000 00, 0.000 for interpolation
041151             1085*  
041151             1086*  atan_lut_168:
041151 00 00 00    1087*      dl 0x000000 ; 000000, 0.000
041154 28 00 00    1088*      dl 0x000028 ; 000001, 0.224
041157 51 00 00    1089*      dl 0x000051 ; 000002, 0.448
04115A 7A 00 00    1090*      dl 0x00007A ; 000003, 0.671
04115D A2 00 00    1091*      dl 0x0000A2 ; 000004, 0.895
041160 CB 00 00    1092*      dl 0x0000CB ; 000005, 1.119
041163 F4 00 00    1093*      dl 0x0000F4 ; 000006, 1.343
041166 1D 01 00    1094*      dl 0x00011D ; 000007, 1.566
041169 45 01 00    1095*      dl 0x000145 ; 000008, 1.790
04116C 6E 01 00    1096*      dl 0x00016E ; 000009, 2.013
04116F 97 01 00    1097*      dl 0x000197 ; 00000A, 2.237
041172 BF 01 00    1098*      dl 0x0001BF ; 00000B, 2.460
041175 E8 01 00    1099*      dl 0x0001E8 ; 00000C, 2.684
041178 11 02 00    1100*      dl 0x000211 ; 00000D, 2.907
04117B 39 02 00    1101*      dl 0x000239 ; 00000E, 3.130
04117E 62 02 00    1102*      dl 0x000262 ; 00000F, 3.353
041181 8B 02 00    1103*      dl 0x00028B ; 000010, 3.576
041184 B3 02 00    1104*      dl 0x0002B3 ; 000011, 3.799
041187 DC 02 00    1105*      dl 0x0002DC ; 000012, 4.022
04118A 04 03 00    1106*      dl 0x000304 ; 000013, 4.245
04118D 2D 03 00    1107*      dl 0x00032D ; 000014, 4.467
041190 55 03 00    1108*      dl 0x000355 ; 000015, 4.690
041193 7E 03 00    1109*      dl 0x00037E ; 000016, 4.912
041196 A6 03 00    1110*      dl 0x0003A6 ; 000017, 5.134
041199 CE 03 00    1111*      dl 0x0003CE ; 000018, 5.356
04119C F7 03 00    1112*      dl 0x0003F7 ; 000019, 5.578
04119F 1F 04 00    1113*      dl 0x00041F ; 00001A, 5.799
0411A2 48 04 00    1114*      dl 0x000448 ; 00001B, 6.021
0411A5 70 04 00    1115*      dl 0x000470 ; 00001C, 6.242
0411A8 98 04 00    1116*      dl 0x000498 ; 00001D, 6.463
0411AB C0 04 00    1117*      dl 0x0004C0 ; 00001E, 6.684
0411AE E8 04 00    1118*      dl 0x0004E8 ; 00001F, 6.905
0411B1 11 05 00    1119*      dl 0x000511 ; 000020, 7.125
0411B4 39 05 00    1120*      dl 0x000539 ; 000021, 7.345
0411B7 61 05 00    1121*      dl 0x000561 ; 000022, 7.565
0411BA 89 05 00    1122*      dl 0x000589 ; 000023, 7.785
0411BD B1 05 00    1123*      dl 0x0005B1 ; 000024, 8.005
0411C0 D9 05 00    1124*      dl 0x0005D9 ; 000025, 8.224
0411C3 01 06 00    1125*      dl 0x000601 ; 000026, 8.443
0411C6 28 06 00    1126*      dl 0x000628 ; 000027, 8.662
0411C9 50 06 00    1127*      dl 0x000650 ; 000028, 8.881
0411CC 78 06 00    1128*      dl 0x000678 ; 000029, 9.099
0411CF A0 06 00    1129*      dl 0x0006A0 ; 00002A, 9.317
0411D2 C7 06 00    1130*      dl 0x0006C7 ; 00002B, 9.535
0411D5 EF 06 00    1131*      dl 0x0006EF ; 00002C, 9.752
0411D8 16 07 00    1132*      dl 0x000716 ; 00002D, 9.970
0411DB 3E 07 00    1133*      dl 0x00073E ; 00002E, 10.187
0411DE 65 07 00    1134*      dl 0x000765 ; 00002F, 10.403
0411E1 8D 07 00    1135*      dl 0x00078D ; 000030, 10.620
0411E4 B4 07 00    1136*      dl 0x0007B4 ; 000031, 10.836
0411E7 DB 07 00    1137*      dl 0x0007DB ; 000032, 11.051
0411EA 03 08 00    1138*      dl 0x000803 ; 000033, 11.267
0411ED 2A 08 00    1139*      dl 0x00082A ; 000034, 11.482
0411F0 51 08 00    1140*      dl 0x000851 ; 000035, 11.697
0411F3 78 08 00    1141*      dl 0x000878 ; 000036, 11.911
0411F6 9F 08 00    1142*      dl 0x00089F ; 000037, 12.125
0411F9 C6 08 00    1143*      dl 0x0008C6 ; 000038, 12.339
0411FC ED 08 00    1144*      dl 0x0008ED ; 000039, 12.553
0411FF 13 09 00    1145*      dl 0x000913 ; 00003A, 12.766
041202 3A 09 00    1146*      dl 0x00093A ; 00003B, 12.978
041205 61 09 00    1147*      dl 0x000961 ; 00003C, 13.191
041208 87 09 00    1148*      dl 0x000987 ; 00003D, 13.403
04120B AE 09 00    1149*      dl 0x0009AE ; 00003E, 13.614
04120E D4 09 00    1150*      dl 0x0009D4 ; 00003F, 13.825
041211 FB 09 00    1151*      dl 0x0009FB ; 000040, 14.036
041214 21 0A 00    1152*      dl 0x000A21 ; 000041, 14.247
041217 47 0A 00    1153*      dl 0x000A47 ; 000042, 14.457
04121A 6D 0A 00    1154*      dl 0x000A6D ; 000043, 14.666
04121D 94 0A 00    1155*      dl 0x000A94 ; 000044, 14.876
041220 BA 0A 00    1156*      dl 0x000ABA ; 000045, 15.085
041223 E0 0A 00    1157*      dl 0x000AE0 ; 000046, 15.293
041226 05 0B 00    1158*      dl 0x000B05 ; 000047, 15.501
041229 2B 0B 00    1159*      dl 0x000B2B ; 000048, 15.709
04122C 51 0B 00    1160*      dl 0x000B51 ; 000049, 15.916
04122F 77 0B 00    1161*      dl 0x000B77 ; 00004A, 16.123
041232 9C 0B 00    1162*      dl 0x000B9C ; 00004B, 16.329
041235 C2 0B 00    1163*      dl 0x000BC2 ; 00004C, 16.535
041238 E7 0B 00    1164*      dl 0x000BE7 ; 00004D, 16.740
04123B 0C 0C 00    1165*      dl 0x000C0C ; 00004E, 16.945
04123E 32 0C 00    1166*      dl 0x000C32 ; 00004F, 17.150
041241 57 0C 00    1167*      dl 0x000C57 ; 000050, 17.354
041244 7C 0C 00    1168*      dl 0x000C7C ; 000051, 17.558
041247 A1 0C 00    1169*      dl 0x000CA1 ; 000052, 17.761
04124A C6 0C 00    1170*      dl 0x000CC6 ; 000053, 17.964
04124D EB 0C 00    1171*      dl 0x000CEB ; 000054, 18.166
041250 0F 0D 00    1172*      dl 0x000D0F ; 000055, 18.368
041253 34 0D 00    1173*      dl 0x000D34 ; 000056, 18.569
041256 58 0D 00    1174*      dl 0x000D58 ; 000057, 18.770
041259 7D 0D 00    1175*      dl 0x000D7D ; 000058, 18.970
04125C A1 0D 00    1176*      dl 0x000DA1 ; 000059, 19.170
04125F C6 0D 00    1177*      dl 0x000DC6 ; 00005A, 19.370
041262 EA 0D 00    1178*      dl 0x000DEA ; 00005B, 19.569
041265 0E 0E 00    1179*      dl 0x000E0E ; 00005C, 19.767
041268 32 0E 00    1180*      dl 0x000E32 ; 00005D, 19.965
04126B 56 0E 00    1181*      dl 0x000E56 ; 00005E, 20.163
04126E 7A 0E 00    1182*      dl 0x000E7A ; 00005F, 20.360
041271 9E 0E 00    1183*      dl 0x000E9E ; 000060, 20.556
041274 C1 0E 00    1184*      dl 0x000EC1 ; 000061, 20.752
041277 E5 0E 00    1185*      dl 0x000EE5 ; 000062, 20.947
04127A 08 0F 00    1186*      dl 0x000F08 ; 000063, 21.142
04127D 2C 0F 00    1187*      dl 0x000F2C ; 000064, 21.337
041280 4F 0F 00    1188*      dl 0x000F4F ; 000065, 21.531
041283 72 0F 00    1189*      dl 0x000F72 ; 000066, 21.724
041286 95 0F 00    1190*      dl 0x000F95 ; 000067, 21.917
041289 B8 0F 00    1191*      dl 0x000FB8 ; 000068, 22.109
04128C DB 0F 00    1192*      dl 0x000FDB ; 000069, 22.301
04128F FE 0F 00    1193*      dl 0x000FFE ; 00006A, 22.493
041292 21 10 00    1194*      dl 0x001021 ; 00006B, 22.683
041295 44 10 00    1195*      dl 0x001044 ; 00006C, 22.874
041298 66 10 00    1196*      dl 0x001066 ; 00006D, 23.063
04129B 89 10 00    1197*      dl 0x001089 ; 00006E, 23.253
04129E AB 10 00    1198*      dl 0x0010AB ; 00006F, 23.441
0412A1 CD 10 00    1199*      dl 0x0010CD ; 000070, 23.629
0412A4 EF 10 00    1200*      dl 0x0010EF ; 000071, 23.817
0412A7 11 11 00    1201*      dl 0x001111 ; 000072, 24.004
0412AA 33 11 00    1202*      dl 0x001133 ; 000073, 24.191
0412AD 55 11 00    1203*      dl 0x001155 ; 000074, 24.376
0412B0 77 11 00    1204*      dl 0x001177 ; 000075, 24.562
0412B3 99 11 00    1205*      dl 0x001199 ; 000076, 24.747
0412B6 BA 11 00    1206*      dl 0x0011BA ; 000077, 24.931
0412B9 DC 11 00    1207*      dl 0x0011DC ; 000078, 25.115
0412BC FD 11 00    1208*      dl 0x0011FD ; 000079, 25.298
0412BF 1E 12 00    1209*      dl 0x00121E ; 00007A, 25.481
0412C2 3F 12 00    1210*      dl 0x00123F ; 00007B, 25.663
0412C5 60 12 00    1211*      dl 0x001260 ; 00007C, 25.844
0412C8 81 12 00    1212*      dl 0x001281 ; 00007D, 26.025
0412CB A2 12 00    1213*      dl 0x0012A2 ; 00007E, 26.206
0412CE C3 12 00    1214*      dl 0x0012C3 ; 00007F, 26.386
0412D1 E4 12 00    1215*      dl 0x0012E4 ; 000080, 26.565
0412D4 04 13 00    1216*      dl 0x001304 ; 000081, 26.744
0412D7 25 13 00    1217*      dl 0x001325 ; 000082, 26.922
0412DA 45 13 00    1218*      dl 0x001345 ; 000083, 27.100
0412DD 65 13 00    1219*      dl 0x001365 ; 000084, 27.277
0412E0 85 13 00    1220*      dl 0x001385 ; 000085, 27.453
0412E3 A5 13 00    1221*      dl 0x0013A5 ; 000086, 27.629
0412E6 C5 13 00    1222*      dl 0x0013C5 ; 000087, 27.805
0412E9 E5 13 00    1223*      dl 0x0013E5 ; 000088, 27.979
0412EC 05 14 00    1224*      dl 0x001405 ; 000089, 28.154
0412EF 24 14 00    1225*      dl 0x001424 ; 00008A, 28.327
0412F2 44 14 00    1226*      dl 0x001444 ; 00008B, 28.501
0412F5 63 14 00    1227*      dl 0x001463 ; 00008C, 28.673
0412F8 83 14 00    1228*      dl 0x001483 ; 00008D, 28.845
0412FB A2 14 00    1229*      dl 0x0014A2 ; 00008E, 29.017
0412FE C1 14 00    1230*      dl 0x0014C1 ; 00008F, 29.187
041301 E0 14 00    1231*      dl 0x0014E0 ; 000090, 29.358
041304 FF 14 00    1232*      dl 0x0014FF ; 000091, 29.527
041307 1E 15 00    1233*      dl 0x00151E ; 000092, 29.697
04130A 3C 15 00    1234*      dl 0x00153C ; 000093, 29.865
04130D 5B 15 00    1235*      dl 0x00155B ; 000094, 30.033
041310 79 15 00    1236*      dl 0x001579 ; 000095, 30.201
041313 98 15 00    1237*      dl 0x001598 ; 000096, 30.368
041316 B6 15 00    1238*      dl 0x0015B6 ; 000097, 30.534
041319 D4 15 00    1239*      dl 0x0015D4 ; 000098, 30.700
04131C F2 15 00    1240*      dl 0x0015F2 ; 000099, 30.865
04131F 10 16 00    1241*      dl 0x001610 ; 00009A, 31.030
041322 2E 16 00    1242*      dl 0x00162E ; 00009B, 31.194
041325 4C 16 00    1243*      dl 0x00164C ; 00009C, 31.357
041328 6A 16 00    1244*      dl 0x00166A ; 00009D, 31.520
04132B 87 16 00    1245*      dl 0x001687 ; 00009E, 31.682
04132E A5 16 00    1246*      dl 0x0016A5 ; 00009F, 31.844
041331 C2 16 00    1247*      dl 0x0016C2 ; 0000A0, 32.005
041334 DF 16 00    1248*      dl 0x0016DF ; 0000A1, 32.166
041337 FC 16 00    1249*      dl 0x0016FC ; 0000A2, 32.326
04133A 19 17 00    1250*      dl 0x001719 ; 0000A3, 32.486
04133D 36 17 00    1251*      dl 0x001736 ; 0000A4, 32.645
041340 53 17 00    1252*      dl 0x001753 ; 0000A5, 32.803
041343 70 17 00    1253*      dl 0x001770 ; 0000A6, 32.961
041346 8C 17 00    1254*      dl 0x00178C ; 0000A7, 33.118
041349 A9 17 00    1255*      dl 0x0017A9 ; 0000A8, 33.275
04134C C5 17 00    1256*      dl 0x0017C5 ; 0000A9, 33.431
04134F E2 17 00    1257*      dl 0x0017E2 ; 0000AA, 33.587
041352 FE 17 00    1258*      dl 0x0017FE ; 0000AB, 33.742
041355 1A 18 00    1259*      dl 0x00181A ; 0000AC, 33.896
041358 36 18 00    1260*      dl 0x001836 ; 0000AD, 34.050
04135B 52 18 00    1261*      dl 0x001852 ; 0000AE, 34.203
04135E 6E 18 00    1262*      dl 0x00186E ; 0000AF, 34.356
041361 8A 18 00    1263*      dl 0x00188A ; 0000B0, 34.509
041364 A5 18 00    1264*      dl 0x0018A5 ; 0000B1, 34.660
041367 C1 18 00    1265*      dl 0x0018C1 ; 0000B2, 34.811
04136A DC 18 00    1266*      dl 0x0018DC ; 0000B3, 34.962
04136D F7 18 00    1267*      dl 0x0018F7 ; 0000B4, 35.112
041370 13 19 00    1268*      dl 0x001913 ; 0000B5, 35.262
041373 2E 19 00    1269*      dl 0x00192E ; 0000B6, 35.410
041376 49 19 00    1270*      dl 0x001949 ; 0000B7, 35.559
041379 64 19 00    1271*      dl 0x001964 ; 0000B8, 35.707
04137C 7F 19 00    1272*      dl 0x00197F ; 0000B9, 35.854
04137F 99 19 00    1273*      dl 0x001999 ; 0000BA, 36.001
041382 B4 19 00    1274*      dl 0x0019B4 ; 0000BB, 36.147
041385 CE 19 00    1275*      dl 0x0019CE ; 0000BC, 36.293
041388 E9 19 00    1276*      dl 0x0019E9 ; 0000BD, 36.438
04138B 03 1A 00    1277*      dl 0x001A03 ; 0000BE, 36.582
04138E 1D 1A 00    1278*      dl 0x001A1D ; 0000BF, 36.726
041391 37 1A 00    1279*      dl 0x001A37 ; 0000C0, 36.870
041394 51 1A 00    1280*      dl 0x001A51 ; 0000C1, 37.013
041397 6B 1A 00    1281*      dl 0x001A6B ; 0000C2, 37.155
04139A 85 1A 00    1282*      dl 0x001A85 ; 0000C3, 37.297
04139D 9F 1A 00    1283*      dl 0x001A9F ; 0000C4, 37.439
0413A0 B9 1A 00    1284*      dl 0x001AB9 ; 0000C5, 37.579
0413A3 D2 1A 00    1285*      dl 0x001AD2 ; 0000C6, 37.720
0413A6 EC 1A 00    1286*      dl 0x001AEC ; 0000C7, 37.859
0413A9 05 1B 00    1287*      dl 0x001B05 ; 0000C8, 37.999
0413AC 1E 1B 00    1288*      dl 0x001B1E ; 0000C9, 38.137
0413AF 37 1B 00    1289*      dl 0x001B37 ; 0000CA, 38.276
0413B2 50 1B 00    1290*      dl 0x001B50 ; 0000CB, 38.413
0413B5 69 1B 00    1291*      dl 0x001B69 ; 0000CC, 38.550
0413B8 82 1B 00    1292*      dl 0x001B82 ; 0000CD, 38.687
0413BB 9B 1B 00    1293*      dl 0x001B9B ; 0000CE, 38.823
0413BE B4 1B 00    1294*      dl 0x001BB4 ; 0000CF, 38.959
0413C1 CC 1B 00    1295*      dl 0x001BCC ; 0000D0, 39.094
0413C4 E5 1B 00    1296*      dl 0x001BE5 ; 0000D1, 39.228
0413C7 FD 1B 00    1297*      dl 0x001BFD ; 0000D2, 39.362
0413CA 16 1C 00    1298*      dl 0x001C16 ; 0000D3, 39.496
0413CD 2E 1C 00    1299*      dl 0x001C2E ; 0000D4, 39.629
0413D0 46 1C 00    1300*      dl 0x001C46 ; 0000D5, 39.762
0413D3 5E 1C 00    1301*      dl 0x001C5E ; 0000D6, 39.894
0413D6 76 1C 00    1302*      dl 0x001C76 ; 0000D7, 40.025
0413D9 8E 1C 00    1303*      dl 0x001C8E ; 0000D8, 40.156
0413DC A5 1C 00    1304*      dl 0x001CA5 ; 0000D9, 40.286
0413DF BD 1C 00    1305*      dl 0x001CBD ; 0000DA, 40.416
0413E2 D5 1C 00    1306*      dl 0x001CD5 ; 0000DB, 40.546
0413E5 EC 1C 00    1307*      dl 0x001CEC ; 0000DC, 40.675
0413E8 04 1D 00    1308*      dl 0x001D04 ; 0000DD, 40.803
0413EB 1B 1D 00    1309*      dl 0x001D1B ; 0000DE, 40.931
0413EE 32 1D 00    1310*      dl 0x001D32 ; 0000DF, 41.059
0413F1 49 1D 00    1311*      dl 0x001D49 ; 0000E0, 41.186
0413F4 60 1D 00    1312*      dl 0x001D60 ; 0000E1, 41.312
0413F7 77 1D 00    1313*      dl 0x001D77 ; 0000E2, 41.438
0413FA 8E 1D 00    1314*      dl 0x001D8E ; 0000E3, 41.564
0413FD A5 1D 00    1315*      dl 0x001DA5 ; 0000E4, 41.689
041400 BB 1D 00    1316*      dl 0x001DBB ; 0000E5, 41.814
041403 D2 1D 00    1317*      dl 0x001DD2 ; 0000E6, 41.938
041406 E9 1D 00    1318*      dl 0x001DE9 ; 0000E7, 42.061
041409 FF 1D 00    1319*      dl 0x001DFF ; 0000E8, 42.184
04140C 15 1E 00    1320*      dl 0x001E15 ; 0000E9, 42.307
04140F 2C 1E 00    1321*      dl 0x001E2C ; 0000EA, 42.429
041412 42 1E 00    1322*      dl 0x001E42 ; 0000EB, 42.551
041415 58 1E 00    1323*      dl 0x001E58 ; 0000EC, 42.672
041418 6E 1E 00    1324*      dl 0x001E6E ; 0000ED, 42.793
04141B 84 1E 00    1325*      dl 0x001E84 ; 0000EE, 42.913
04141E 99 1E 00    1326*      dl 0x001E99 ; 0000EF, 43.033
041421 AF 1E 00    1327*      dl 0x001EAF ; 0000F0, 43.152
041424 C5 1E 00    1328*      dl 0x001EC5 ; 0000F1, 43.271
041427 DA 1E 00    1329*      dl 0x001EDA ; 0000F2, 43.390
04142A F0 1E 00    1330*      dl 0x001EF0 ; 0000F3, 43.508
04142D 05 1F 00    1331*      dl 0x001F05 ; 0000F4, 43.625
041430 1B 1F 00    1332*      dl 0x001F1B ; 0000F5, 43.742
041433 30 1F 00    1333*      dl 0x001F30 ; 0000F6, 43.859
041436 45 1F 00    1334*      dl 0x001F45 ; 0000F7, 43.975
041439 5A 1F 00    1335*      dl 0x001F5A ; 0000F8, 44.091
04143C 6F 1F 00    1336*      dl 0x001F6F ; 0000F9, 44.206
04143F 84 1F 00    1337*      dl 0x001F84 ; 0000FA, 44.321
041442 99 1F 00    1338*      dl 0x001F99 ; 0000FB, 44.435
041445 AD 1F 00    1339*      dl 0x001FAD ; 0000FC, 44.549
041448 C2 1F 00    1340*      dl 0x001FC2 ; 0000FD, 44.662
04144B D7 1F 00    1341*      dl 0x001FD7 ; 0000FE, 44.775
04144E EB 1F 00    1342*      dl 0x001FEB ; 0000FF, 44.888
041451 00 20 00    1343*      dl 0x002000 ; 000100, 45.000 only needed for interpolation
041454             0035       include "fonts.inc"
041454 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
041500             0002*  
041500             0003*  fonts_load:
041500 DD 21 00 27 0004*      ld ix,font_list ; pointer to font list lookup
       04          
041505 06 12       0005*      ld b,num_fonts ; loop counter
041507             0006*  
041507             0007*  @load_loop:
041507 C5          0008*      push bc ; save loop counter
041508             0009*  
041508             0010*  ; load font into a buffer
041508 DD 27 06    0011*      ld hl,(ix+font_list_bufferId)
04150B DD 31 09    0012*      ld iy,(ix+font_list_filename)
04150E CD 78 1C 04 0013*      call vdu_load_buffer_from_file
041512             0014*  
041512             0015*  ; create font from buffer
041512 DD 27 06    0016*      ld hl,(ix+font_list_bufferId)
041515 DD 5E 00    0017*      ld e,(ix+font_list_width)
041518 DD 56 03    0018*      ld d,(ix+font_list_height)
04151B 3E 00       0019*      ld a,0 ; flags
04151D CD 1A 1E 04 0020*      call vdu_font_create
041521             0021*  
041521             0022*  ; select font
041521 DD 27 06    0023*      ld hl,(ix+font_list_bufferId)
041524 3E 01       0024*      ld a,1 ; flags
041526 CD 00 1E 04 0025*      call vdu_font_select
04152A             0026*  
04152A             0027*  ; ; debug print filename
04152A             0028*  ;     call printNewLine
04152A             0029*  ;     ld hl,(ix+font_list_filename)
04152A             0030*  ;     call printString
04152A             0031*  
04152A             0032*  ; advance font_list pointer to next record
04152A ED 32 0C    0033*      lea ix,ix+font_list_record_size
04152D             0034*  
04152D             0035*  ; restore loop counter
04152D C1          0036*      pop bc
04152E 10 D7       0037*      djnz @load_loop
041530             0038*  
041530             0039*  ; all done
041530 C9          0040*      ret
041531             0036       include "images.inc"
041531 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041600             0002*  
041600             0003*  image_type: equ 0
041600             0004*  image_width: equ image_type+3
041600             0005*  image_height: equ image_width+3
041600             0006*  image_filesize: equ image_height+3
041600             0007*  image_filename: equ image_filesize+3
041600             0008*  image_bufferId: equ image_filename+3
041600             0009*  image_record_size: equ image_bufferId+3
041600             0010*  
041600 00 00 00    0011*  cur_image_list: dl 0
041603 00 00 00    0012*  cur_filename: dl 0
041606 00 00 00    0013*  cur_buffer_id: dl 0
041609             0014*  
041609             0015*  img_load_init:
041609             0016*  ; initialize logo's position parameters
041609 21 00 00 00 0017*      ld hl,0
04160D 22 C2 16 04 0018*      ld (logo_xvel),hl
041611 22 C5 16 04 0019*      ld (logo_xpos),hl
041615             0020*  ; begin 16.8 maths to determine logo's y position and velocity
041615 21 00 E0 00 0021*      ld hl,224*256
041619 22 CB 16 04 0022*      ld (logo_ypos),hl
04161D EB          0023*      ex de,hl
04161E 21 00 10 FF 0024*      ld hl,-240*256
041622             0025*      ; ld de,-256*[sprites_num_images+tiles_dg_num_images+ui_num_images]
041622 11 00 0B 01 0026*      ld de,sprites_num_images+tiles_dg_num_images+ui_num_images*256
041626 CD 2E 0B 04 0027*      call sdiv168 ; ud.e = distance / num images = y velocity
04162A ED 53 C8 16 0028*      ld (logo_yvel),de
       04          
04162F             0029*  ; all done
04162F C9          0030*      ret
041630             0031*  
041630             0032*  ; inputs: bc is the number of images to load, cur_image_list set
041630             0033*  img_load_main:
041630             0034*  ; back up loop counter
041630 C5          0035*      push bc
041631             0036*  
041631             0037*  ; load the next image
041631 CD 6C 16 04 0038*      call load_next_image
041635             0039*  
041635             0040*  ; plot the background
041635 CD 4B 1A 04 0041*      call vdu_cls
041639 21 02 00 00 0042*      ld hl,BUF_SPLASH_BG
04163D CD 38 1B 04 0043*      call vdu_buff_select
041641 01 00 00 00 0044*      ld bc,0
041645 11 00 00 00 0045*      ld de,0
041649 CD 20 1F 04 0046*      call vdu_plot_bmp
04164D             0047*  
04164D             0048*  ; ; draw the most recently loaded image
04164D             0049*  ; 	ld hl,(cur_buffer_id)
04164D             0050*  ; 	call vdu_buff_select
04164D             0051*  ; 	ld bc,0
04164D             0052*  ; 	ld de,0
04164D             0053*  ; 	call vdu_plot_bmp
04164D             0054*  
04164D             0055*  ; move logo
04164D CD 9D 16 04 0056*      call move_logo
041651             0057*  
041651             0058*  ; print current filename
041651 2A 03 16 04 0059*      ld hl,(cur_filename)
041655 CD 17 01 04 0060*      call printString
041659             0061*  
041659             0062*  ; flip the framebuffer
041659 CD 50 1A 04 0063*      call vdu_flip
04165D             0064*  
04165D             0065*  ; decrement loop counter
04165D C1          0066*      pop bc
04165E 0B          0067*      dec bc
04165F 79          0068*      ld a,c
041660 B7          0069*      or a
041661 C2 30 16 04 0070*      jp nz,img_load_main
041665 78          0071*      ld a,b
041666 B7          0072*      or a
041667 C2 30 16 04 0073*      jp nz,img_load_main
04166B C9          0074*      ret
04166C             0075*  
04166C             0076*  load_next_image:
04166C FD 2A 00 16 0077*      ld iy,(cur_image_list)
       04          
041671 FD E5       0078*      push iy
041673 FD 7E 00    0079*      ld a,(iy+image_type) ; get image type
041676 FD 07 03    0080*      ld bc,(iy+image_width) ; get image width
041679 FD 17 06    0081*      ld de,(iy+image_height) ; get image height
04167C FD 31 09    0082*      ld ix,(iy+image_filesize) ; get image file size
04167F FD 27 0F    0083*      ld hl,(iy+image_bufferId) ; get image bufferId
041682 22 06 16 04 0084*      ld (cur_buffer_id),hl
041686 FD 37 0C    0085*      ld iy,(iy+image_filename) ; get image filename
041689 FD 22 03 16 0086*      ld (cur_filename),iy
       04          
04168E CD 56 1C 04 0087*      call vdu_load_img
041692 FD E1       0088*      pop iy
041694 ED 33 12    0089*      lea iy,iy+image_record_size
041697 FD 22 00 16 0090*      ld (cur_image_list),iy
       04          
04169C C9          0091*      ret
04169D             0092*  
04169D             0093*  move_logo:
04169D             0094*  ; activate logo bitmap
04169D 21 03 00 00 0095*      ld hl, BUF_SPLASH_LOGO
0416A1 CD 38 1B 04 0096*      call vdu_buff_select
0416A5             0097*  ; update position based on velocity parameters
0416A5 2A CB 16 04 0098*      ld hl,(logo_ypos)
0416A9 ED 5B C8 16 0099*      ld de,(logo_yvel)
       04          
0416AE 19          0100*      add hl,de
0416AF 22 CB 16 04 0101*      ld (logo_ypos),hl
0416B3             0102*  ; draw logo
0416B3 ED 4B C5 16 0103*      ld bc,(logo_xpos)
       04          
0416B8 ED 5B CB 16 0104*      ld de,(logo_ypos)
       04          
0416BD CD 3C 1F 04 0105*      call vdu_plot_bmp168
0416C1 C9          0106*      ret
0416C2             0107*  
0416C2 00 00 00    0108*  logo_xvel: dl 0
0416C5 00 00 00    0109*  logo_xpos: dl 0
0416C8             0110*  
0416C8 00 00 00    0111*  logo_yvel: dl 0
0416CB 00 00 00    0112*  logo_ypos: dl 0
0416CE             0113*  
0416CE             0114*  load_ui_images:
0416CE             0115*  ; initialize image loading variables
0416CE 21 00 55 04 0116*      ld hl,ui_image_list
0416D2 22 00 16 04 0117*      ld (cur_image_list),hl
0416D6             0118*  ; load images
0416D6 06 04       0119*      ld b,ui_num_images
0416D8             0120*  @loop:
0416D8 C5          0121*      push bc
0416D9 CD 6C 16 04 0122*      call load_next_image
0416DD C1          0123*      pop bc
0416DE 10 F8       0124*      djnz @loop
0416E0 C9          0125*      ret
0416E1             0126*  
0416E1             0127*  load_sprite_images:
0416E1             0128*  ; initialize image loading variables
0416E1 21 00 47 04 0129*      ld hl,sprites_image_list
0416E5 22 00 16 04 0130*      ld (cur_image_list),hl
0416E9 01 4F 00 00 0131*      ld bc,sprites_num_images
0416ED             0132*  ; load images
0416ED CD 30 16 04 0133*      call img_load_main
0416F1 C9          0134*      ret
0416F2             0135*  
0416F2             0136*  load_tilesets:
0416F2             0137*  ; initialize image loading variables
0416F2 21 00 2A 04 0138*      ld hl,tiles_dg_image_list
0416F6 22 00 16 04 0139*      ld (cur_image_list),hl
0416FA 01 B8 00 00 0140*      ld bc,tiles_dg_num_images
0416FE             0141*  ; load images
0416FE CD 30 16 04 0142*      call img_load_main
041702             0143*  
041702             0144*  ; ; initialize image loading variables
041702             0145*  ;     ld hl,tiles_xevious_image_list
041702             0146*  ;     ld (cur_image_list),hl
041702             0147*  ;     ld bc,tiles_xevious_num_images
041702             0148*  ; ; load images
041702             0149*  ;     call img_load_main
041702 C9          0150*      ret
041703             0037       include "timer.inc"
041703 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
041800             0002*  
041800             0003*  ; Table 32. Timer Control Registers
041800             0004*  ; this constant is the base address of the timer control registers
041800             0005*  ; each timer takes three bytes:
041800             0006*  ;   0: control register
041800             0007*  ;   1: low byte of timer reset value
041800             0008*  ;   2: high byte of timer reset value
041800             0009*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
041800             0010*  ; which correctly force the high and upper bytes of the address bus to zero
041800             0011*  TMR_CTL:     equ 80h
041800             0012*  
041800             0013*  ; Timer Control Register Bit Definitions
041800             0014*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
041800             0015*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
041800             0016*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
041800             0017*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
041800             0018*                              ; the TMRx_CTL register is read.
041800             0019*  
041800             0020*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
041800             0021*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
041800             0022*  
041800             0023*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
041800             0024*                              ;  0,and counting stops when the end-of-count value is reached.
041800             0025*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
041800             0026*                              ; written to the counter when the end-of-count value is reached.
041800             0027*  
041800             0028*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
041800             0029*  CLK_DIV_256:  equ %00001100 ;
041800             0030*  CLK_DIV_64:   equ %00001000 ;
041800             0031*  CLK_DIV_16:   equ %00000100 ;
041800             0032*  CLK_DIV_4:    equ %00000000 ;
041800             0033*  
041800             0034*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
041800             0035*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
041800             0036*                              ; When a 1 is written to this bit,the values in the reload registers
041800             0037*                              ;  are loaded into the downcounter when the timer restarts. The
041800             0038*                              ; programmer must ensure that this bit is set to 1 each time
041800             0039*                              ; SINGLE-PASS mode is used.
041800             0040*  
041800             0041*  ; disable/enable the programmable reload timer
041800             0042*  PRT_EN_0:     equ %00000000 ;
041800             0043*  PRT_EN_1:     equ %00000001 ;
041800             0044*  
041800             0045*  ; Table 37. Timer Input Source Select Register
041800             0046*  ; Each of the 4 timers are allocated two bits of the 8-bit register
041800             0047*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
041800             0048*  ;   00: System clock / CLK_DIV
041800             0049*  ;   01: RTC / CLK_DIV
041800             0050*  ;   NOTE: these are the values given in the manual,but it may be a typo
041800             0051*  ;   10: GPIO port B pin 1.
041800             0052*  ;   11: GPIO port B pin 1.
041800             0053*  TMR_ISS:   equ 92h ; register address
041800             0054*  
041800             0055*  ; Table 51. Real-Time Clock Control Register
041800             0056*  RTC_CTRL: equ EDh ; register address
041800             0057*  
041800             0058*  ; alarm interrupt disable/enable
041800             0059*  RTC_ALARM_0:    equ %00000000
041800             0060*  RTC_ALARM_1:    equ %10000000
041800             0061*  
041800             0062*  ; interrupt on alarm disable/enable
041800             0063*  RTC_INT_ENT_0:  equ %00000000
041800             0064*  RTC_INT_ENT_1:  equ %01000000
041800             0065*  
041800             0066*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
041800             0067*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
041800             0068*  
041800             0069*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
041800             0070*                                  ; On-chip 32768 Hz oscillator is enabled.
041800             0071*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
041800             0072*                                  ; On-chip 32768 Hz oscillator is disabled.
041800             0073*  
041800             0074*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
041800             0075*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
041800             0076*  
041800             0077*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
041800             0078*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
041800             0079*  
041800             0080*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
041800             0081*                                  ; RTC counter is enabled.
041800             0082*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
041800             0083*                                  ; RTC counter is disabled.
041800             0084*  
041800             0085*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
041800             0086*  
041800             0087*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
041800             0088*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
041800 00 00 00    0089*  prt_reload: dl 0x000000
041803             0090*  
041803             0091*  ; set PRT timer
041803             0092*  prt_set:
041803 21 00 00 00 0093*      ld hl,0
041807 22 51 18 04 0094*      ld (prt_irq_counter),hl
04180B 2A 00 18 04 0095*      ld hl,(prt_reload)
04180F ED 29 84    0096*      out0 ($84),l
041812 ED 21 85    0097*  	out0 ($85),h
041815             0098*  ; disable timer
041815 3E 06       0099*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041817 ED 39 83    0100*  	out0 ($83),a
04181A             0101*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04181A 3E 57       0102*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04181C ED 39 83    0103*  	out0 ($83),a
04181F C9          0104*      ret
041820             0105*  
041820             0106*  ; ===============================================
041820             0107*  ; PRT Timer Interrupt Handling
041820             0108*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
041820             0109*  ; -----------------------------------------------
041820             0110*  prt_irq_init:
041820             0111*      ; set up interrupt vector table 2
041820 21 00 00 00 0112*  	ld hl,0
041824 3A 0C 01 00 0113*  	ld a,($10c)
041828 6F          0114*  	ld l,a
041829 3A 0D 01 00 0115*  	ld a,($10d)
04182D 67          0116*  	ld h,a
04182E             0117*  
04182E             0118*  	; skip over CALL ($c3)
04182E 23          0119*  	inc hl
04182F             0120*  	; load address of jump into vector table 2 (in ram)
04182F ED 27       0121*  	ld hl,(hl)
041831             0122*  
041831             0123*  	; write CALL prt_irq_handler to vector table 2
041831 3E C3       0124*  	ld a,$c3
041833 77          0125*  	ld (hl),a
041834 23          0126*  	inc hl
041835 11 3C 18 04 0127*  	ld de,prt_irq_handler
041839 ED 1F       0128*  	ld (hl),de
04183B             0129*  
04183B C9          0130*      ret
04183C             0131*  
04183C             0132*  prt_irq_handler:
04183C F3          0133*  	di
04183D F5          0134*  	push af
04183E E5          0135*      push hl
04183F ED 38 83    0136*  	in0 a,($83)
041842 2A 51 18 04 0137*  	ld hl,(prt_irq_counter)
041846 23          0138*  	inc hl
041847 22 51 18 04 0139*  	ld (prt_irq_counter),hl
04184B E1          0140*      pop hl
04184C F1          0141*  	pop af
04184D FB          0142*  	ei
04184E 5B ED 4D    0143*  	reti.l
041851             0144*  
041851             0145*  prt_irq_counter:
041851 00 00 00    0146*  	.dl 0
041854             0147*  prt_irq_counter_saved:
041854 00 00 00    0148*      .dl 0
041857             0149*  
041857             0150*  prt_loop_reset:
041857 E5          0151*      push hl
041858 21 00 00 00 0152*  	ld hl,0
04185C 22 51 18 04 0153*  	ld (prt_irq_counter),hl
041860 22 C2 18 04 0154*      ld (prt_loop_counter),hl
041864 22 C5 18 04 0155*      ld (prt_loops),hl
041868 CD 03 18 04 0156*      call prt_set
04186C E1          0157*      pop hl
04186D C9          0158*      ret
04186E             0159*  
04186E             0160*  prt_loop_start:
04186E E5          0161*      push hl
04186F 21 00 00 00 0162*  	ld hl,0
041873 22 51 18 04 0163*  	ld (prt_irq_counter),hl
041877 E1          0164*      pop hl
041878 C9          0165*      ret
041879             0166*  
041879             0167*  prt_loop_stop:
041879 E5          0168*      push hl
04187A D5          0169*      push de
04187B 2A 51 18 04 0170*      ld hl,(prt_irq_counter)
04187F ED 5B C2 18 0171*      ld de,(prt_loop_counter)
       04          
041884 19          0172*      add hl,de
041885 22 C2 18 04 0173*      ld (prt_loop_counter),hl
041889 21 00 00 00 0174*      ld hl,0
04188D 22 51 18 04 0175*      ld (prt_irq_counter),hl
041891 2A C5 18 04 0176*      ld hl,(prt_loops)
041895 23          0177*      inc hl
041896 22 C5 18 04 0178*      ld (prt_loops),hl
04189A D1          0179*      pop de
04189B E1          0180*      pop hl
04189C C9          0181*      ret
04189D             0182*  
04189D             0183*  ; inputs: bc = y,x text coordinates to print
04189D             0184*  prt_loop_print:
04189D F5          0185*      push af
04189E E5          0186*      push hl
04189F C5          0187*      push bc
0418A0 D5          0188*      push de
0418A1 DD E5       0189*      push ix
0418A3 FD E5       0190*      push iy
0418A5 CD 37 1A 04 0191*      call vdu_move_cursor
0418A9             0192*  
0418A9 2A C2 18 04 0193*      ld hl,(prt_loop_counter)
0418AD CD 16 02 04 0194*      call printDec
0418B1             0195*  
0418B1 2A C5 18 04 0196*      ld hl,(prt_loops)
0418B5 CD 16 02 04 0197*      call printDec
0418B9             0198*  
0418B9 FD E1       0199*      pop iy
0418BB DD E1       0200*      pop ix
0418BD D1          0201*      pop de
0418BE C1          0202*      pop bc
0418BF E1          0203*      pop hl
0418C0 F1          0204*      pop af
0418C1 C9          0205*      ret
0418C2             0206*  
0418C2             0207*  prt_loop_counter:
0418C2 00 00 00    0208*      .dl 0
0418C5             0209*  prt_loops:
0418C5 00 00 00    0210*      .dl 0
0418C8             0211*  
0418C8             0212*  ; ===============================================
0418C8             0213*  ; Timer functions
0418C8             0214*  ; -----------------------------------------------
0418C8             0215*  ; set a countdown timer
0418C8             0216*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0418C8             0217*  ; returns: hl = current time
0418C8             0218*  tmr_set:
0418C8 FD 2F 03    0219*      ld (iy+3),hl            ; set time remaining
0418CB             0220*      MOSCALL mos_sysvars     ; ix points to syvars table
0418CB 3E 08       0001*M 			LD	A, function
0418CD 5B CF       0002*M 			RST.LIL	08h
0418CF DD 27 00    0221*      ld hl,(ix+sysvar_time)  ; get current time
0418D2 FD 2F 00    0222*      ld (iy+0),hl            ; set start time
0418D5 C9          0223*      ret
0418D6             0224*  
0418D6             0225*  ; gets time remaining on a countdown timer
0418D6             0226*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0418D6             0227*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0418D6             0228*  ;          sign flags: pos = time not expired,zero or neg = time expired
0418D6             0229*  tmr_get:
0418D6             0230*      MOSCALL mos_sysvars     ; ix points to syvars table
0418D6 3E 08       0001*M 			LD	A, function
0418D8 5B CF       0002*M 			RST.LIL	08h
0418DA DD 17 00    0231*      ld de,(ix+sysvar_time)  ; get current time
0418DD FD 27 00    0232*      ld hl,(iy+0)            ; get start time
0418E0 AF          0233*      xor a                   ; clear carry
0418E1 ED 52       0234*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0418E3 FD 17 03    0235*      ld de,(iy+3)            ; get timer set value
0418E6 AF          0236*      xor a                   ; clear carry
0418E7 ED 5A       0237*      adc hl,de               ; hl = time remaining
0418E9             0238*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0418E9 C9          0239*      ret
0418EA             0240*  
0418EA             0241*  tmr_test: ds 6 ; example of a buffer to hold timer data
0418F0             0242*  
0418F0 00 00 00    0243*  timestamp_now: dl 0
0418F3 00 00 00    0244*  timestamp_old: dl 0
0418F6 00 00 00    0245*  timestamp_chg: dl 0
0418F9             0246*  
0418F9             0247*  ; update the global timestamp from the system clock
0418F9             0248*  ; inputs: none
0418F9             0249*  ; returns: hl = time elapsed in 1/120ths of a second
0418F9             0250*  ;          ix = pointer to syvars table
0418F9             0251*  ; destroys: af,hl,de,ix
0418F9             0252*  timestamp_tick:
0418F9 ED 5B F0 18 0253*      ld de,(timestamp_now)   ; get previous time
       04          
0418FE ED 53 F3 18 0254*      ld (timestamp_old),de   ; save previous time
       04          
041903             0255*      MOSCALL mos_sysvars     ; ix points to syvars table
041903 3E 08       0001*M 			LD	A, function
041905 5B CF       0002*M 			RST.LIL	08h
041907 DD 27 00    0256*      ld hl,(ix+sysvar_time)  ; get current time
04190A 22 F0 18 04 0257*      ld (timestamp_now),hl   ; save current time
04190E AF          0258*      xor a                   ; clear carry
04190F ED 52       0259*      sbc hl,de               ; hl = time elapsed
041911 22 F6 18 04 0260*      ld (timestamp_chg),hl   ; save elapsed time
041915 C9          0261*      ret
041916             0262*  
041916             0263*  ; set a countdown timer
041916             0264*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041916             0265*  ; requires: timestamp_tick to be called at least once before this function
041916             0266*  ; returns: hl = current time
041916             0267*  ; destroys: hl
041916             0268*  timestamp_tmr_set:
041916 FD 2F 03    0269*      ld (iy+3),hl            ; set time remaining
041919 2A F0 18 04 0270*      ld hl,(timestamp_now)   ; get current timestamp
04191D FD 2F 00    0271*      ld (iy+0),hl            ; set start time
041920 C9          0272*      ret
041921             0273*  
041921             0274*  ; gets time remaining on a countdown timer following the global timestamp
041921             0275*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041921             0276*  ; requires: timestamp_tick to be called at least once before this function
041921             0277*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041921             0278*  ;          sign flags: pos = time not expired,zero or neg = time expired
041921             0279*  ; destroys: af,hl,de
041921             0280*  timestamp_tmr_get:
041921 ED 5B F0 18 0281*      ld de,(timestamp_now)   ; get current timestamp
       04          
041926 FD 27 00    0282*      ld hl,(iy+0)            ; get start time
041929 AF          0283*      xor a                   ; clear carry
04192A ED 52       0284*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04192C FD 17 03    0285*      ld de,(iy+3)            ; get timer set value
04192F AF          0286*      xor a                   ; clear carry
041930 ED 5A       0287*      adc hl,de               ; hl = time remaining
041932             0288*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
041932 C9          0289*      ret
041933             0290*  
041933             0291*  ; set a stopwatch
041933             0292*  ; returns: hl = start time
041933             0293*  ; destroys: hl,ix
041933             0294*  stopwatch_set:
041933             0295*      MOSCALL mos_sysvars     ; ix points to syvars table
041933 3E 08       0001*M 			LD	A, function
041935 5B CF       0002*M 			RST.LIL	08h
041937 DD 27 00    0296*      ld hl,(ix+sysvar_time)  ; get current time
04193A 22 4F 19 04 0297*      ld (stopwatch_started),hl            ; set start time
04193E C9          0298*      ret
04193F             0299*  
04193F             0300*  ; gets time elapsed on a stopwatch
04193F             0301*  ; returns: hl = time elapsed in 1/120ths of a second
04193F             0302*  ; destroys: af,hl,de,ix
04193F             0303*  stopwatch_get:
04193F             0304*      MOSCALL mos_sysvars     ; ix points to syvars table
04193F 3E 08       0001*M 			LD	A, function
041941 5B CF       0002*M 			RST.LIL	08h
041943 DD 27 00    0305*      ld hl,(ix+sysvar_time)  ; get current time
041946 ED 5B 4F 19 0306*      ld de,(stopwatch_started)            ; get start time
       04          
04194B AF          0307*      xor a                   ; clear carry
04194C ED 52       0308*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04194E C9          0309*      ret
04194F             0310*  
04194F             0311*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041952             0312*  
041952             0313*  ; ------------------
041952             0314*  ; delay routine
041952             0315*  ; Author: Richard Turrnidge
041952             0316*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041952             0317*  ; routine waits a fixed time,then returns
041952             0318*  ; arrive with A =  the delay byte. One bit to be set only.
041952             0319*  ; eg. ld A,00000100b
041952             0320*  
041952             0321*  multiPurposeDelay:
041952 F5          0322*      push af
041953 C5          0323*      push bc
041954 DD E5       0324*      push ix
041956 47          0325*      ld b,a
041957 3E 08       0326*      ld a,$08
041959 5B CF       0327*      RST.LIL	08h                 ; get IX pointer to sysvars
04195B             0328*  
04195B             0329*  waitLoop:
04195B             0330*  
04195B DD 7E 00    0331*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04195E             0332*  
04195E             0333*                                  ;   we check if bit set is same as last time we checked.
04195E             0334*                                  ;   bit 0 - don't use
04195E             0335*                                  ;   bit 1 - changes 64 times per second
04195E             0336*                                  ;   bit 2 - changes 32 times per second
04195E             0337*                                  ;   bit 3 - changes 16 times per second
04195E             0338*  
04195E             0339*                                  ;   bit 4 - changes 8 times per second
04195E             0340*                                  ;   bit 5 - changes 4 times per second
04195E             0341*                                  ;   bit 6 - changes 2 times per second
04195E             0342*                                  ;   bit 7 - changes 1 times per second
04195E A0          0343*      and b
04195F 4F          0344*      ld c,a
041960 3A 71 19 04 0345*      ld a,(oldTimeStamp)
041964 B9          0346*      cp c                        ; is A same as last value?
041965 28 F4       0347*      jr z,waitLoop              ; loop here if it is
041967 79          0348*      ld a,c
041968 32 71 19 04 0349*      ld (oldTimeStamp),a        ; set new value
04196C             0350*  
04196C DD E1       0351*      pop ix
04196E C1          0352*      pop bc
04196F F1          0353*      pop af
041970 C9          0354*      ret
041971             0355*  
041971 00          0356*  oldTimeStamp:   .db 00h
041972             0038       include "vdu.inc"
041972 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
041A00             0002*  
041A00             0003*  ; VDU 30: Home cursor
041A00             0004*  vdu_home_cursor:
041A00 3E 1E       0005*      ld a,30
041A02 5B D7       0006*  	rst.lil $10
041A04 C9          0007*  	ret
041A05             0008*  
041A05             0009*  vdu_cursor_on:
041A05 21 10 1A 04 0010*  	ld hl,@cmd
041A09 01 03 00 00 0011*  	ld bc,@end-@cmd
041A0D 5B DF       0012*  	rst.lil $18
041A0F C9          0013*  	ret
041A10             0014*  @cmd:
041A10 17 01 01    0015*  	db 23,1,1
041A13             0016*  @end:
041A13             0017*  
041A13             0018*  vdu_cursor_off:
041A13 21 1E 1A 04 0019*  	ld hl,@cmd
041A17 01 03 00 00 0020*  	ld bc,@end-@cmd
041A1B 5B DF       0021*  	rst.lil $18
041A1D C9          0022*  	ret
041A1E             0023*  @cmd:
041A1E 17 01 00    0024*  	db 23,1,0
041A21             0025*  @end:
041A21             0026*  
041A21             0027*  ; VDU 5: Write text at graphics cursor
041A21             0028*  ; inputs: a is the character to write to the screen
041A21             0029*  ; prerequisites: the graphics cursor at the intended position on screen
041A21             0030*  ; outputs: see the name of the function
041A21             0031*  ; destroys: a, hl, bc
041A21             0032*  vdu_char_to_gfx_cursor:
041A21 32 31 1A 04 0033*  	ld (@arg),a
041A25 21 30 1A 04 0034*  	ld hl,@cmd
041A29 01 02 00 00 0035*  	ld bc,@end-@cmd
041A2D 5B DF       0036*  	rst.lil $18
041A2F C9          0037*  	ret
041A30 05          0038*  @cmd: db 5
041A31 00          0039*  @arg: db 0
041A32             0040*  @end:
041A32             0041*  ; VDU 9: Move cursor forward one character
041A32             0042*  vdu_cursor_forward:
041A32 3E 09       0043*      ld a,9
041A34 5B D7       0044*  	rst.lil $10
041A36 C9          0045*  	ret
041A37             0046*  
041A37             0047*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041A37             0048*  ; inputs: c=x, b=y 8-bit unsigned integers
041A37             0049*  vdu_move_cursor:
041A37 ED 43 48 1A 0050*      ld (@x0),bc
       04          
041A3C 21 47 1A 04 0051*  	ld hl,@cmd
041A40 01 03 00 00 0052*  	ld bc,@end-@cmd
041A44 5B DF       0053*  	rst.lil $18
041A46 C9          0054*  	ret
041A47 1F          0055*  @cmd: 	db 31
041A48 00          0056*  @x0:	db 0
041A49 00          0057*  @y0: 	db 0
041A4A 00          0058*  @end: 	db 0 ; padding
041A4B             0059*  
041A4B             0060*  ; VDU 12: Clear text area (CLS)
041A4B             0061*  vdu_cls:
041A4B 3E 0C       0062*      ld a,12
041A4D 5B D7       0063*  	rst.lil $10
041A4F C9          0064*  	ret
041A50             0065*  
041A50             0066*  vdu_flip:
041A50 21 5B 1A 04 0067*  	ld hl,@cmd
041A54 01 03 00 00 0068*  	ld bc,@end-@cmd
041A58 5B DF       0069*  	rst.lil $18
041A5A C9          0070*  	ret
041A5B 17 00 C3    0071*  @cmd: db 23,0,0xC3
041A5E             0072*  @end:
041A5E             0073*  
041A5E             0074*  ; VDU 16: Clear graphics area (CLG)
041A5E             0075*  vdu_clg:
041A5E 3E 10       0076*      ld a,16
041A60 5B D7       0077*  	rst.lil $10
041A62 C9          0078*  	ret
041A63             0079*  
041A63             0080*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041A63             0081*  ; VDU 23, 7: Scrolling
041A63             0082*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041A63             0083*  ; inputs: a, extent; l, direction; h; speed
041A63             0084*  vdu_scroll_down:
041A63 32 78 1A 04 0085*  	ld (@extent),a
041A67 22 79 1A 04 0086*  	ld (@dir),hl ; implicitly populates @speed
041A6B 21 76 1A 04 0087*  	ld hl,@cmd
041A6F 01 05 00 00 0088*  	ld bc,@end-@cmd
041A73 5B DF       0089*  	rst.lil $18     ;; Sending command to VDP
041A75 C9          0090*  	ret
041A76 17 07       0091*  @cmd:       db 23,7
041A78 00          0092*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041A79 00          0093*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
041A7A 00          0094*  @speed:     db 0x00 ; pixels
041A7B 00          0095*  @end:		db 0x00 ; padding
041A7C             0096*  
041A7C             0097*  ; COLOUR MODES
041A7C             0098*  ; Mode	Effect
041A7C             0099*  ; 0	Set on-screen pixel to target colour value
041A7C             0100*  ; 1	OR value with the on-screen pixel
041A7C             0101*  ; 2	AND value with the on-screen pixel
041A7C             0102*  ; 3	XOR value with the on-screen pixel
041A7C             0103*  ; 4	Invert the on-screen pixel
041A7C             0104*  ; 5	No operation
041A7C             0105*  ; 6	AND the inverse of the specified colour with the on-screen pixel
041A7C             0106*  ; 7	OR the inverse of the specified colour with the on-screen pixel
041A7C             0107*  
041A7C             0108*  ; VDU 17, colour: Define text colour (COLOUR)
041A7C             0109*  vdu_colour_text:
041A7C 32 8C 1A 04 0110*  	ld (@arg),a
041A80 21 8B 1A 04 0111*  	ld hl,@cmd
041A84 01 02 00 00 0112*  	ld bc,@end-@cmd
041A88 5B DF       0113*  	rst.lil $18
041A8A C9          0114*  	ret
041A8B 11          0115*  @cmd: db 17
041A8C 00          0116*  @arg: db 0
041A8D             0117*  @end:
041A8D             0118*  
041A8D             0119*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
041A8D             0120*  ; inputs: a=mode, c=colour (add 128 to set background colour)
041A8D             0121*  vdu_gcol:
041A8D 32 A2 1A 04 0122*  	ld (@mode),a
041A91 79          0123*      ld a,c
041A92 32 A3 1A 04 0124*      ld (@col),a
041A96 21 A1 1A 04 0125*  	ld hl,@cmd
041A9A 01 03 00 00 0126*  	ld bc,@end-@cmd
041A9E 5B DF       0127*  	rst.lil $18
041AA0 C9          0128*  	ret
041AA1 12          0129*  @cmd:  db 18
041AA2 00          0130*  @mode: db 0
041AA3 00          0131*  @col:  db 0
041AA4             0132*  @end:
041AA4             0133*  
041AA4             0134*  
041AA4             0135*  ; VDU 28, left, bottom, right, top: Set text viewport **
041AA4             0136*  ; MIND THE LITTLE-ENDIANESS
041AA4             0137*  ; inputs: c=left,b=bottom,e=right,d=top
041AA4             0138*  ; outputs; nothing
041AA4             0139*  ; destroys: a might make it out alive
041AA4             0140*  vdu_set_txt_viewport:
041AA4 ED 43 BA 1A 0141*      ld (@lb),bc
       04          
041AA9 ED 53 BC 1A 0142*  	ld (@rt),de
       04          
041AAE 21 B9 1A 04 0143*  	ld hl,@cmd
041AB2 01 05 00 00 0144*  	ld bc,@end-@cmd
041AB6 5B DF       0145*  	rst.lil $18
041AB8 C9          0146*  	ret
041AB9 1C          0147*  @cmd:   db 28 ; set text viewport command
041ABA 00 00       0148*  @lb: 	dw 0x0000 ; set by bc
041ABC 00 00       0149*  @rt: 	dw 0x0000 ; set by de
041ABE 00          0150*  @end:   db 0x00	  ; padding
041ABF             0151*  
041ABF             0152*  ; Wait for VBLANK interrupt
041ABF             0153*  vdu_vblank:
041ABF DD E5       0154*      PUSH 	IX
041AC1             0155*  	MOSCALL	mos_sysvars
041AC1 3E 08       0001*M 			LD	A, function
041AC3 5B CF       0002*M 			RST.LIL	08h
041AC5 DD 7E 00    0156*  	LD	A, (IX + sysvar_time + 0)
041AC8             0157*  @wait:
041AC8 DD BE 00    0158*      CP 	A, (IX + sysvar_time + 0)
041ACB 28 FB       0159*      JR	Z, @wait
041ACD DD E1       0160*      POP	IX
041ACF C9          0161*      RET
041AD0             0162*  
041AD0             0163*  ; VDU 29, x; y;: Set graphics origin
041AD0             0164*  ; This command sets the graphics origin.
041AD0             0165*  ; The origin is the point on the screen where the coordinates (0,0) are located.
041AD0             0166*  ; inputs: bc=x0,de=y0
041AD0             0167*  ; outputs; nothing
041AD0             0168*  ; destroys: a might make it out alive
041AD0             0169*  vdu_set_gfx_origin:
041AD0 ED 43 E6 1A 0170*      ld (@x0),bc
       04          
041AD5 ED 53 E8 1A 0171*      ld (@y0),de
       04          
041ADA 21 E5 1A 04 0172*      ld hl,@cmd
041ADE 01 05 00 00 0173*      ld bc,@end-@cmd
041AE2 5B DF       0174*      rst.lil $18
041AE4 C9          0175*      ret
041AE5 1D          0176*  @cmd:   db 29 ; set graphics origin command
041AE6 00 00       0177*  @x0: 	dw 0x0000 ; set by bc
041AE8 00 00       0178*  @y0: 	dw 0x0000 ; set by de
041AEA 00          0179*  @end:   db 0x00	  ; padding
041AEB             0180*  
041AEB             0181*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
041AEB             0182*  ; NOTE: the order of the y-coordinate parameters are inverted
041AEB             0183*  ; 	because we have turned off logical screen scaling
041AEB             0184*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041AEB             0185*  ; outputs; nothing
041AEB             0186*  ; destroys: a might make it out alive
041AEB             0187*  vdu_set_gfx_viewport:
041AEB ED 43 0B 1B 0188*      ld (@x0),bc
       04          
041AF0 FD 22 0D 1B 0189*      ld (@y1),iy
       04          
041AF5 DD 22 0F 1B 0190*  	ld (@x1),ix
       04          
041AFA ED 53 11 1B 0191*  	ld (@y0),de
       04          
041AFF 21 0A 1B 04 0192*  	ld hl,@cmd
041B03 01 09 00 00 0193*  	ld bc,@end-@cmd
041B07 5B DF       0194*  	rst.lil $18
041B09 C9          0195*  	ret
041B0A 18          0196*  @cmd:   db 24 ; set graphics viewport command
041B0B 00 00       0197*  @x0: 	dw 0x0000 ; set by bc
041B0D 00 00       0198*  @y1: 	dw 0x0000 ; set by iy
041B0F 00 00       0199*  @x1: 	dw 0x0000 ; set by ix
041B11 00 00       0200*  @y0: 	dw 0x0000 ; set by de
041B13 00          0201*  @end:   db 0x00	  ; padding
041B14             0202*  
041B14             0203*  ; SCREEN MODES
041B14             0204*  ; ===============================
041B14             0205*  ; Mode  Horz  Vert  Cols  Refresh
041B14             0206*  ; ---   ----  ----  ----  -------
041B14             0207*  ; 11    320   240   2     60hz
041B14             0208*  ; 139   320   240   2     60hz
041B14             0209*  ; 23    512   384   2     60hz
041B14             0210*  ; 151   512   384   2     60hz
041B14             0211*  ; 6     640   240   2     60hz
041B14             0212*  ; 134   640   240   2     60hz
041B14             0213*  ; 2     640   480   2     60hz
041B14             0214*  ; 130   640   480   2     60hz
041B14             0215*  ; 17    800   600   2     60hz
041B14             0216*  ; 145   800   600   2     60hz
041B14             0217*  ; 18    1024  768   2     60hz
041B14             0218*  ; 146   1024  768   2     60hz
041B14             0219*  ; ---   ----  ----  ----  -------
041B14             0220*  ; 10    320   240   4     60hz
041B14             0221*  ; 138   320   240   4     60hz
041B14             0222*  ; 22    512   384   4     60hz
041B14             0223*  ; 150   512   384   4     60hz
041B14             0224*  ; 5     640   240   4     60hz
041B14             0225*  ; 133   640   240   4     60hz
041B14             0226*  ; 1     640   480   4     60hz
041B14             0227*  ; 129   640   480   4     60hz
041B14             0228*  ; 16    800   600   4     60hz
041B14             0229*  ; 19    1024  768   4     60hz
041B14             0230*  ; ---   ----  ----  ----  -------
041B14             0231*  ; 9     320   240   16    60hz
041B14             0232*  ; 137   320   240   16    60hz
041B14             0233*  ; 21    512   384   16    60hz
041B14             0234*  ; 149   512   384   16    60hz
041B14             0235*  ; 4     640   240   16    60hz
041B14             0236*  ; 132   640   240   16    60hz
041B14             0237*  ; 0     640   480   16    60hz
041B14             0238*  ; 7     n/a   n/a   16    60hz
041B14             0239*  ; ---   ----  ----  ----  -------
041B14             0240*  ; 8     320   240   64    60hz
041B14             0241*  ; 136   320   240   64    60hz
041B14             0242*  ; 20    512   384   64    60hz
041B14             0243*  ; 3     640   240   64    60hz
041B14             0244*  ; ---   ----  ----  ----  -------
041B14             0245*  vdu_set_screen_mode:
041B14 32 24 1B 04 0246*  	ld (@arg),a
041B18 21 23 1B 04 0247*  	ld hl,@cmd
041B1C 01 02 00 00 0248*  	ld bc,@end-@cmd
041B20 5B DF       0249*  	rst.lil $18
041B22 C9          0250*  	ret
041B23 16          0251*  @cmd: db 22 ; set screen mode
041B24 00          0252*  @arg: db 0  ; screen mode parameter
041B25             0253*  @end:
041B25             0254*  
041B25             0255*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041B25             0256*  ; inputs: a is scaling mode, 1=on, 0=off
041B25             0257*  ; note: default setting on boot is scaling ON
041B25             0258*  vdu_set_scaling:
041B25 32 37 1B 04 0259*  	ld (@arg),a
041B29 21 34 1B 04 0260*  	ld hl,@cmd
041B2D 01 04 00 00 0261*  	ld bc,@end-@cmd
041B31 5B DF       0262*  	rst.lil $18
041B33 C9          0263*  	ret
041B34 17 00 C0    0264*  @cmd: db 23,0,0xC0
041B37 00          0265*  @arg: db 0  ; scaling on/off
041B38             0266*  @end:
041B38             0267*  
041B38             0268*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041B38             0269*  ; inputs: hl=bufferId
041B38             0270*  vdu_buff_select:
041B38 22 4A 1B 04 0271*  	ld (@bufferId),hl
041B3C 21 47 1B 04 0272*  	ld hl,@cmd
041B40 01 05 00 00 0273*  	ld bc,@end-@cmd
041B44 5B DF       0274*  	rst.lil $18
041B46 C9          0275*  	ret
041B47 17 1B 20    0276*  @cmd: db 23,27,0x20
041B4A 00 00       0277*  @bufferId: dw 0x0000
041B4C 00          0278*  @end: db 0x00 ; padding
041B4D             0279*  
041B4D             0280*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041B4D             0281*  ; inputs: a=format; bc=width; de=height
041B4D             0282*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041B4D             0283*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041B4D             0284*  ; 0 	RGBA8888 (4-bytes per pixel)
041B4D             0285*  ; 1 	RGBA2222 (1-bytes per pixel)
041B4D             0286*  ; 2 	Mono/Mask (1-bit per pixel)
041B4D             0287*  ; 3 	Reserved for internal use by VDP (“native” format)
041B4D             0288*  vdu_bmp_create:
041B4D ED 43 69 1B 0289*      ld (@width),bc
       04          
041B52 ED 53 6B 1B 0290*      ld (@height),de
       04          
041B57 32 6D 1B 04 0291*      ld (@fmt),a
041B5B 21 66 1B 04 0292*  	ld hl,@cmd
041B5F 01 08 00 00 0293*  	ld bc,@end-@cmd
041B63 5B DF       0294*  	rst.lil $18
041B65 C9          0295*  	ret
041B66 17 1B 21    0296*  @cmd:       db 23,27,0x21
041B69 00 00       0297*  @width:     dw 0x0000
041B6B 00 00       0298*  @height:    dw 0x0000
041B6D 00          0299*  @fmt:       db 0x00
041B6E             0300*  @end:
041B6E             0301*  
041B6E             0302*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041B6E             0303*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041B6E             0304*  vdu_load_img_rgba2_to_8:
041B6E             0305*  ; backup the target buffer id and image dimensions
041B6E E5          0306*      push hl
041B6F D5          0307*      push de
041B70 C5          0308*      push bc
041B71             0309*  ; load the rgba2 image to working buffer 65534
041B71 21 FE FF 00 0310*      ld hl,65534 ; temporary working buffer id
041B75 CD 78 1C 04 0311*  	call vdu_load_buffer_from_file
041B79             0312*  ; restore the image dimensions and target buffer id
041B79 C1          0313*      pop bc
041B7A D1          0314*      pop de
041B7B E1          0315*      pop hl
041B7C             0316*  ; fall through to vdu_rgba2_to_8
041B7C             0317*  
041B7C             0318*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041B7C             0319*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041B7C             0320*  ; the "expand bitmap" command is:
041B7C             0321*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041B7C             0322*  ; and then to reverse the byte order to fix endian-ness:
041B7C             0323*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041B7C             0324*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041B7C             0325*  ; VDU 23,27,&20,targetBufferID%;
041B7C             0326*  ; VDU 23,27,&21,width%;height%;0
041B7C             0327*  ; -------------------------------------------------------------------
041B7C             0328*  ; inputs: bc,de image width,height ; hl = targetBufferId
041B7C             0329*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041B7C             0330*  vdu_rgba2_to_8:
041B7C             0331*  ; load the image dimensions and buffer id parameters
041B7C ED 43 D8 1B 0332*      ld (@width),bc
       04          
041B81 ED 53 DA 1B 0333*      ld (@height),de
       04          
041B86 22 BD 1B 04 0334*      ld (@bufferId0),hl
041B8A 22 CA 1B 04 0335*      ld (@bufferId2),hl
041B8E 22 D3 1B 04 0336*      ld (@bufferId1),hl
041B92             0337*  ; clean up bytes that got stomped on by the ID loads
041B92 3E 48       0338*      ld a,0x48
041B94 32 BF 1B 04 0339*      ld (@bufferId0+2),a
041B98 3E 17       0340*      ld a,23
041B9A 32 D5 1B 04 0341*      ld (@bufferId1+2),a
041B9E 3E 18       0342*      ld a,24
041BA0 32 CC 1B 04 0343*      ld (@bufferId2+2),a
041BA4 AF          0344*      xor a
041BA5 32 DC 1B 04 0345*      ld (@height+2),a
041BA9             0346*  ; send the vdu command strings
041BA9 21 B4 1B 04 0347*      ld hl,@beg
041BAD 01 29 00 00 0348*      ld bc,@end-@beg
041BB1 5B DF       0349*      rst.lil $18
041BB3 C9          0350*      ret
041BB4             0351*  @beg:
041BB4             0352*  ; Command 14: Consolidate blocks in a buffer
041BB4             0353*  ; VDU 23, 0, &A0, bufferId; 14
041BB4 17 00 A0    0354*      db 23,0,0xA0
041BB7 FE FF       0355*      dw 65534 ; workingBufferId
041BB9 0E          0356*      db 14 ; consolidate blocks
041BBA             0357*  ; the "expand bitmap" command is:
041BBA             0358*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041BBA 17 00 A0    0359*      db 23,0,0xA0
041BBD 00 00       0360*  @bufferId0: dw 0x0000 ; targetBufferId
041BBF 48          0361*      db 0x48 ; given as decimal command 72 in the docs
041BC0 02          0362*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041BC1 FE FF       0363*      dw 65534 ; sourceBufferId
041BC3 00 7F BF FF 0364*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041BC7             0365*  ; reverse the byte order to fix endian-ness:
041BC7             0366*  ; Command 24: Reverse the order of data of blocks within a buffer
041BC7             0367*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041BC7             0368*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041BC7 17 00 A0    0369*      db 23,0,0xA0
041BCA 00 00       0370*  @bufferId2:    dw 0x0000 ; targetBufferId
041BCC 18          0371*      db 24 ; reverse byte order
041BCD 04          0372*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041BCE 04 00       0373*      dw 4 ; size (4 bytes)
041BD0             0374*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041BD0             0375*  ; VDU 23,27,&20,targetBufferID%;
041BD0 17 1B 20    0376*      db 23,27,0x20 ; select bitmap
041BD3 00 00       0377*  @bufferId1: dw 0x0000 ; targetBufferId
041BD5             0378*  ; VDU 23,27,&21,width%;height%;0
041BD5 17 1B 21    0379*      db 23,27,0x21 ; create bitmap from buffer
041BD8 00 00       0380*  @width: dw 0x0000
041BDA 00 00       0381*  @height: dw 0x0000
041BDC 00          0382*      db 0x00 ; rgba8888 format
041BDD             0383*  @end:
041BDD             0384*  
041BDD             0385*  ; scratch variables
041BDD 00 00 00    0386*  bufferId0: dl 0x000000
041BE0 00 00 00    0387*  bufferId1: dl 0x000000
041BE3             0388*  
041BE3             0389*  ; load a vdu buffer from local memory
041BE3             0390*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041BE3             0391*  vdu_load_buffer:
041BE3 ED 43 0C 1C 0392*      ld (@length),bc
       04          
041BE8 D5          0393*      push de ; save data pointer
041BE9             0394*  ; send the vdu command string
041BE9 7D          0395*      ld a,l
041BEA 32 09 1C 04 0396*      ld (@bufferId),a
041BEE 7C          0397*      ld a,h
041BEF 32 0A 1C 04 0398*      ld (@bufferId+1),a
041BF3 21 06 1C 04 0399*      ld hl,@cmd
041BF7 01 08 00 00 0400*      ld bc,@end-@cmd
041BFB 5B DF       0401*      rst.lil $18
041BFD             0402*  ; send the buffer data
041BFD E1          0403*      pop hl ; pointer to data
041BFE ED 4B 0C 1C 0404*      ld bc,(@length)
       04          
041C03 5B DF       0405*      rst.lil $18 ; send it
041C05 C9          0406*      ret
041C06             0407*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041C06 17 00 A0    0408*  @cmd:       db 23,0,0xA0
041C09 00 00       0409*  @bufferId:	dw 0x0000
041C0B 00          0410*  		    db 0 ; load buffer
041C0C 00 00       0411*  @length:	dw 0x0000
041C0E 00          0412*  @end: db 0 ; padding
041C0F             0413*  
041C0F             0414*  ; clear a buffer
041C0F             0415*  ; inputs: hl = bufferId
041C0F             0416*  vdu_clear_buffer:
041C0F 7D          0417*      ld a,l
041C10 32 27 1C 04 0418*      ld (@bufferId),a
041C14 7C          0419*      ld a,h
041C15 32 28 1C 04 0420*      ld (@bufferId+1),a
041C19 21 24 1C 04 0421*      ld hl,@cmd
041C1D 01 06 00 00 0422*      ld bc,@end-@cmd
041C21 5B DF       0423*      rst.lil $18
041C23 C9          0424*      ret
041C24 17 00 A0    0425*  @cmd:       db 23,0,0xA0
041C27 00 00       0426*  @bufferId:	dw 0x0000
041C29 02          0427*  		    db 2 ; clear buffer
041C2A             0428*  @end:
041C2A             0429*  
041C2A             0430*  vdu_clear_all_buffers:
041C2A             0431*  ; clear all buffers
041C2A 21 35 1C 04 0432*      ld hl,@beg
041C2E 01 06 00 00 0433*      ld bc,@end-@beg
041C32 5B DF       0434*      rst.lil $18
041C34 C9          0435*      ret
041C35 17 00 A0    0436*  @beg: db 23,0,$A0
041C38 FF FF       0437*        dw -1 ; clear all buffers
041C3A 02          0438*        db 2  ; command 2: clear a buffer
041C3B             0439*  @end:
041C3B             0440*  
041C3B             0441*  ; Command 14: Consolidate blocks in a buffer
041C3B             0442*  vdu_consolidate_buffer:
041C3B             0443*  ; set parameters for vdu call
041C3B 7D          0444*      ld a,l
041C3C 32 53 1C 04 0445*      ld (@bufferId),a
041C40 7C          0446*      ld a,h
041C41 32 54 1C 04 0447*      ld (@bufferId+1),a
041C45 21 50 1C 04 0448*      ld hl,@beg
041C49 01 06 00 00 0449*      ld bc,@end-@beg
041C4D 5B DF       0450*      rst.lil $18
041C4F C9          0451*      ret
041C50             0452*  ; VDU 23, 0, &A0, bufferId; 14
041C50 17 00 A0    0453*  @beg: db 23,0,0xA0
041C53 00 00       0454*  @bufferId: dw 0x0000
041C55 0E          0455*             db 14
041C56             0456*  @end:
041C56             0457*  
041C56             0458*  ; load an image file to a buffer and make it a bitmap
041C56             0459*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041C56             0460*  vdu_load_img:
041C56             0461*  ; back up image type and dimension parameters
041C56 22 DD 1B 04 0462*      ld (bufferId0),hl
041C5A F5          0463*      push af
041C5B C5          0464*  	push bc
041C5C D5          0465*  	push de
041C5D             0466*  ; load the image
041C5D CD 78 1C 04 0467*  	call vdu_load_buffer_from_file
041C61             0468*  ; now make it a bitmap
041C61 2A DD 1B 04 0469*      ld hl,(bufferId0)
041C65 CD 3B 1C 04 0470*      call vdu_consolidate_buffer
041C69 2A DD 1B 04 0471*      ld hl,(bufferId0)
041C6D CD 38 1B 04 0472*      call vdu_buff_select
041C71 D1          0473*  	pop de ; image height
041C72 C1          0474*  	pop bc ; image width
041C73 F1          0475*  	pop af ; image type
041C74 C3 4D 1B 04 0476*  	jp vdu_bmp_create ; will return to caller from there
041C78             0477*  
041C78             0478*  ; inputs: hl = bufferId; iy = pointer to filename
041C78             0479*  vdu_load_buffer_from_file:
041C78 22 DD 1B 04 0480*      ld (bufferId0),hl
041C7C             0481*  
041C7C             0482*  ; clear target buffer
041C7C CD 0F 1C 04 0483*      call vdu_clear_buffer
041C80             0484*  
041C80             0485*  ; open the file in read mode
041C80             0486*  ; Open a file
041C80             0487*  ; HLU: Filename
041C80             0488*  ;   C: Mode
041C80             0489*  ; Returns:
041C80             0490*  ;   A: Filehandle, or 0 if couldn't open
041C80 FD E5       0491*  	push iy ; pointer to filename
041C82 E1          0492*  	pop hl
041C83 0E 01       0493*  	ld c,fa_read
041C85             0494*      MOSCALL mos_fopen
041C85 3E 0A       0001*M 			LD	A, function
041C87 5B CF       0002*M 			RST.LIL	08h
041C89 32 C4 1C 04 0495*      ld (@filehandle),a
041C8D             0496*  
041C8D             0497*  @read_file:
041C8D             0498*  ; Read a block of data from a file
041C8D             0499*  ;   C: Filehandle
041C8D             0500*  ; HLU: Pointer to where to write the data to
041C8D             0501*  ; DEU: Number of bytes to read
041C8D             0502*  ; Returns:
041C8D             0503*  ; DEU: Number of bytes read
041C8D 3A C4 1C 04 0504*      ld a,(@filehandle)
041C91 4F          0505*      ld c,a
041C92 21 00 E0 B7 0506*      ld hl,filedata
041C96 11 00 20 00 0507*      ld de,8192 ; max we can read into onboard sram at one time
041C9A             0508*      MOSCALL mos_fread
041C9A 3E 1A       0001*M 			LD	A, function
041C9C 5B CF       0002*M 			RST.LIL	08h
041C9E             0509*  
041C9E             0510*  ; test de for zero bytes read
041C9E 21 00 00 00 0511*      ld hl,0
041CA2 AF          0512*      xor a ; clear carry
041CA3 ED 52       0513*      sbc hl,de
041CA5 CA BB 1C 04 0514*      jp z,@close_file
041CA9             0515*  
041CA9             0516*  ; load a vdu buffer from local memory
041CA9             0517*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041CA9 2A DD 1B 04 0518*      ld hl,(bufferId0)
041CAD D5          0519*      push de ; chunksize
041CAE C1          0520*      pop bc
041CAF 11 00 E0 B7 0521*      ld de,filedata
041CB3 CD E3 1B 04 0522*      call vdu_load_buffer
041CB7             0523*  
041CB7             0524*  ; read the next block
041CB7 C3 8D 1C 04 0525*      jp @read_file
041CBB             0526*  
041CBB             0527*  ; close the file
041CBB             0528*  @close_file:
041CBB 3A C4 1C 04 0529*      ld a,(@filehandle)
041CBF             0530*      MOSCALL mos_fclose
041CBF 3E 0B       0001*M 			LD	A, function
041CC1 5B CF       0002*M 			RST.LIL	08h
041CC3 C9          0531*      ret ; vdu_load_buffer_from_file
041CC4             0532*  
041CC4 00          0533*  @filehandle: db 0 ; file handle
041CC5 00 00 00    0534*  @fil: dl 0 ; pointer to FIL struct
041CC8             0535*  
041CC8 00 00 00    0536*  @chunkpointer: dl 0 ; pointer to current chunk
041CCB             0537*  
041CCB             0538*  ; File information structure (FILINFO)
041CCB             0539*  @filinfo:
041CCB 00 00 00 00 0540*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041CCF 00 00       0541*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041CD1 00 00       0542*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041CD3 00          0543*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041CD4 00 00 00 00 0544*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041CE1 00 00 00 00 0545*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041DE1             0039       include "vdu_fonts.inc"
041DE1 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
041E00             0002*  ; select font
041E00             0003*  ; inputs: hl = bufferId, a = font flags
041E00             0004*  ; Flags:
041E00             0005*  ; Bit	Description
041E00             0006*  ; 0	Adjust cursor position to ensure text baseline is aligned
041E00             0007*  ;   0: Do not adjust cursor position (best for changing font on a new line)
041E00             0008*  ;   1: Adjust cursor position (best for changing font in the middle of a line)
041E00             0009*  ; 1-7	Reserved for future use
041E00             0010*  ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041E00             0011*  vdu_font_select:
041E00 22 17 1E 04 0012*      ld (@bufferId),hl
041E04 32 19 1E 04 0013*      ld (@flags),a
041E08 21 13 1E 04 0014*      ld hl,@cmd
041E0C 01 07 00 00 0015*      ld bc,@end-@cmd
041E10 5B DF       0016*      rst.lil $18
041E12 C9          0017*      ret
041E13 17 00 95 00 0018*  @cmd: db 23, 0, 0x95, 0
041E17 00 00       0019*  @bufferId: dw 0x0000
041E19 00          0020*  @flags: db 0x00
041E1A             0021*  @end:
041E1A             0022*  
041E1A             0023*  ; create font from buffer
041E1A             0024*  ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041E1A             0025*  ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041E1A             0026*  vdu_font_create:
041E1A 22 3F 1E 04 0027*      ld (@bufferId),hl
041E1E ED 53 41 1E 0028*      ld (@width),de ; also loads height
       04          
041E23 32 44 1E 04 0029*      ld (@flags),a
041E27 7A          0030*      ld a,d ; height
041E28 32 43 1E 04 0031*      ld (@ascent),a ; ascent = height
041E2C             0032*  ; consolidate buffer
041E2C CD 3B 1C 04 0033*      call vdu_consolidate_buffer
041E30             0034*  ; create font
041E30 21 3B 1E 04 0035*      ld hl,@cmd
041E34 01 0A 00 00 0036*      ld bc,@end-@cmd
041E38 5B DF       0037*      rst.lil $18
041E3A C9          0038*      ret
041E3B 17 00 95 01 0039*  @cmd: db 23, 0, 0x95, 1
041E3F 00 00       0040*  @bufferId: dw 0x0000
041E41 00          0041*  @width: db 0x00
041E42 00          0042*  @height: db 0x00
041E43 00          0043*  @ascent: db 0x00
041E44 00          0044*  @flags: db 0x00
041E45             0045*  @end:
041E45             0046*  
041E45             0047*  ; set or adjust font property
041E45             0048*  ; inputs: hl = bufferId, a = field, de = value
041E45             0049*  ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041E45             0050*  vdu_font_property:
041E45 22 61 1E 04 0051*      ld (@bufferId),hl
041E49 32 63 1E 04 0052*      ld (@field),a
041E4D ED 53 64 1E 0053*      ld (@value),de
       04          
041E52 21 5D 1E 04 0054*      ld hl,@cmd
041E56 01 09 00 00 0055*      ld bc,@end-@cmd
041E5A 5B DF       0056*      rst.lil $18
041E5C C9          0057*      ret
041E5D 17 00 95 02 0058*  @cmd: db 23, 0, 0x95, 2
041E61 00 00       0059*  @bufferId: dw 0x0000
041E63 00          0060*  @field: db 0x00
041E64 00 00       0061*  @value: dw 0x0000
041E66 00          0062*  @end: db 0x00 ; padding
041E67             0063*  
041E67             0064*  ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041E67             0065*  
041E67             0066*  ; Clear/Delete font
041E67             0067*  ; inputs: hl = bufferId
041E67             0068*  ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041E67             0069*  vdu_font_clear:
041E67 22 7A 1E 04 0070*      ld (@bufferId),hl
041E6B 21 76 1E 04 0071*      ld hl,@cmd
041E6F 01 06 00 00 0072*      ld bc,@end-@cmd
041E73 5B DF       0073*      rst.lil $18
041E75 C9          0074*      ret
041E76 17 00 95 04 0075*  @cmd: db 23, 0, 0x95, 4
041E7A 00 00       0076*  @bufferId: dw 0x0000
041E7C 00          0077*  @end: db 0x00 ; padding
041E7D             0078*  
041E7D             0079*  ; Copy system font to buffer
041E7D             0080*  ; inputs: hl = bufferId
041E7D             0081*  ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041E7D             0082*  vdu_font_copy_system:
041E7D 22 90 1E 04 0083*      ld (@bufferId),hl
041E81 21 8C 1E 04 0084*      ld hl,@cmd
041E85 01 06 00 00 0085*      ld bc,@end-@cmd
041E89 5B DF       0086*      rst.lil $18
041E8B C9          0087*      ret
041E8C 17 00 95 05 0088*  @cmd: db 23, 0, 0x95, 5
041E90 00 00       0089*  @bufferId: dw 0x0000
041E92 00          0090*  @end: db 0x00 ; padding
041E93             0040       include "vdu_plot.inc"
041E93 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
041F00             0002*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F00             0003*  ; PLOT code 	(Decimal) 	Effect
041F00             0004*  ; &00-&07 	0-7 	Solid line, includes both ends
041F00             0005*  plot_sl_both: equ 0x00
041F00             0006*  
041F00             0007*  ; &08-&0F 	8-15 	Solid line, final point omitted
041F00             0008*  plot_sl_first: equ 0x08
041F00             0009*  
041F00             0010*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
041F00             0011*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
041F00             0012*  
041F00             0013*  ; &20-&27 	32-39 	Solid line, first point omitted
041F00             0014*  plot_sl_last: equ 0x20
041F00             0015*  
041F00             0016*  ; &28-&2F 	40-47 	Solid line, both points omitted
041F00             0017*  plot_sl_none: equ 0x28
041F00             0018*  
041F00             0019*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
041F00             0020*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
041F00             0021*  
041F00             0022*  ; &40-&47 	64-71 	Point plot
041F00             0023*  plot_pt: equ 0x40
041F00             0024*  
041F00             0025*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
041F00             0026*  plot_lf_lr_non_bg: equ 0x48
041F00             0027*  
041F00             0028*  ; &50-&57 	80-87 	Triangle fill
041F00             0029*  plot_tf: equ 0x50
041F00             0030*  
041F00             0031*  ; &58-&5F 	88-95 	Line fill right to background §§
041F00             0032*  plot_lf_r_bg: equ 0x58
041F00             0033*  
041F00             0034*  ; &60-&67 	96-103 	Rectangle fill
041F00             0035*  plot_rf: equ 0x60
041F00             0036*  
041F00             0037*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
041F00             0038*  plot_lf_lr_fg: equ 0x60
041F00             0039*  
041F00             0040*  ; &70-&77 	112-119 	Parallelogram fill
041F00             0041*  plot_pf: equ 0x70
041F00             0042*  
041F00             0043*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
041F00             0044*  plot_lf_r_non_fg: equ 0x78
041F00             0045*  
041F00             0046*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
041F00             0047*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
041F00             0048*  
041F00             0049*  ; &90-&97 	144-151 	Circle outline
041F00             0050*  plot_co: equ 0x90
041F00             0051*  
041F00             0052*  ; &98-&9F 	152-159 	Circle fill
041F00             0053*  plot_cf: equ 0x98
041F00             0054*  
041F00             0055*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
041F00             0056*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
041F00             0057*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
041F00             0058*  
041F00             0059*  ; &B8-&BF 	184-191 	Rectangle copy/move
041F00             0060*  plot_rcm: equ 0xB8
041F00             0061*  
041F00             0062*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
041F00             0063*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
041F00             0064*  ; &D0-&D7 	208-215 	Not defined
041F00             0065*  ; &D8-&DF 	216-223 	Not defined
041F00             0066*  ; &E0-&E7 	224-231 	Not defined
041F00             0067*  
041F00             0068*  ; &E8-&EF 	232-239 	Bitmap plot §
041F00             0069*  plot_bmp: equ 0xE8
041F00             0070*  
041F00             0071*  ; &F0-&F7 	240-247 	Not defined
041F00             0072*  ; &F8-&FF 	248-255 	Not defined
041F00             0073*  
041F00             0074*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
041F00             0075*  ; Agon Console8 VDP 2.2.0
041F00             0076*  
041F00             0077*  ; Within each group of eight plot codes, the effects are as follows:
041F00             0078*  ; Plot code 	Effect
041F00             0079*  ; 0 	Move relative
041F00             0080*  mv_rel: equ 0
041F00             0081*  
041F00             0082*  ; 1 	Plot relative in current foreground colour
041F00             0083*  dr_rel_fg: equ 1
041F00             0084*  
041F00             0085*  ; 2 	Not supported (Plot relative in logical inverse colour)
041F00             0086*  ; 3 	Plot relative in current background colour
041F00             0087*  dr_rel_bg: equ 3
041F00             0088*  
041F00             0089*  ; 4 	Move absolute
041F00             0090*  mv_abs: equ 4
041F00             0091*  
041F00             0092*  ; 5 	Plot absolute in current foreground colour
041F00             0093*  dr_abs_fg: equ 5
041F00             0094*  
041F00             0095*  ; 6 	Not supported (Plot absolute in logical inverse colour)
041F00             0096*  ; 7 	Plot absolute in current background colour
041F00             0097*  dr_abs_bg: equ 7
041F00             0098*  
041F00             0099*  ; Codes 0-3 use the position data provided as part of the command
041F00             0100*  ; as a relative position, adding the position given to the current
041F00             0101*  ; graphical cursor position. Codes 4-7 use the position data provided
041F00             0102*  ; as part of the command as an absolute position, setting the current
041F00             0103*  ; graphical cursor position to the position given.
041F00             0104*  
041F00             0105*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
041F00             0106*  ; current pixel colour. These operations cannot currently be supported
041F00             0107*  ; by the graphics system the Agon VDP uses, so these codes are not
041F00             0108*  ; supported. Support for these codes may be added in a future version
041F00             0109*  ; of the VDP firmware.
041F00             0110*  
041F00             0111*  ; 16 colour palette constants
041F00             0112*  c_black: equ 0
041F00             0113*  c_red_dk: equ 1
041F00             0114*  c_green_dk: equ 2
041F00             0115*  c_yellow_dk: equ 3
041F00             0116*  c_blue_dk: equ 4
041F00             0117*  c_magenta_dk: equ 5
041F00             0118*  c_cyan_dk: equ 6
041F00             0119*  c_grey: equ 7
041F00             0120*  c_grey_dk: equ 8
041F00             0121*  c_red: equ 9
041F00             0122*  c_green: equ 10
041F00             0123*  c_yellow: equ 11
041F00             0124*  c_blue: equ 12
041F00             0125*  c_magenta: equ 13
041F00             0126*  c_cyan: equ 14
041F00             0127*  c_white: equ 15
041F00             0128*  
041F00             0129*  ; VDU 25, mode, x; y;: PLOT command
041F00             0130*  ; inputs: a=mode, bc=x0, de=y0
041F00             0131*  vdu_plot:
041F00 32 1A 1F 04 0132*      ld (@mode),a
041F04 ED 43 1B 1F 0133*      ld (@x0),bc
       04          
041F09 ED 53 1D 1F 0134*      ld (@y0),de
       04          
041F0E 21 19 1F 04 0135*  	ld hl,@cmd
041F12 01 06 00 00 0136*  	ld bc,@end-@cmd
041F16 5B DF       0137*  	rst.lil $18
041F18 C9          0138*  	ret
041F19 19          0139*  @cmd:   db 25
041F1A 00          0140*  @mode:  db 0
041F1B 00 00       0141*  @x0: 	dw 0
041F1D 00 00       0142*  @y0: 	dw 0
041F1F 00          0143*  @end:   db 0 ; extra byte to soak up deu
041F20             0144*  
041F20             0145*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F20             0146*  ; &E8-&EF 	232-239 	Bitmap plot §
041F20             0147*  ; VDU 25, mode, x; y;: PLOT command
041F20             0148*  ; inputs: bc=x0, de=y0
041F20             0149*  ; prerequisites: vdu_buff_select
041F20             0150*  vdu_plot_bmp:
041F20 ED 43 37 1F 0151*      ld (@x0),bc
       04          
041F25 ED 53 39 1F 0152*      ld (@y0),de
       04          
041F2A 21 35 1F 04 0153*  	ld hl,@cmd
041F2E 01 06 00 00 0154*  	ld bc,@end-@cmd
041F32 5B DF       0155*  	rst.lil $18
041F34 C9          0156*  	ret
041F35 19          0157*  @cmd:   db 25
041F36 ED          0158*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
041F37 00 00       0159*  @x0: 	dw 0x0000
041F39 00 00       0160*  @y0: 	dw 0x0000
041F3B 00          0161*  @end:   db 0x00 ; padding
041F3C             0162*  
041F3C             0163*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
041F3C             0164*  ; &E8-&EF 	232-239 	Bitmap plot §
041F3C             0165*  ; VDU 25, mode, x; y;: PLOT command
041F3C             0166*  ; inputs: bc=x0, de=y0
041F3C             0167*  ; USING 16.8 FIXED POINT COORDINATES
041F3C             0168*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
041F3C             0169*  ;   the fractional portiion of the inputs are truncated
041F3C             0170*  ;   leaving only the 16-bit integer portion
041F3C             0171*  ; prerequisites: vdu_buff_select
041F3C             0172*  vdu_plot_bmp168:
041F3C             0173*  ; populate in the reverse of normal to keep the
041F3C             0174*  ; inputs from stomping on each other
041F3C ED 53 5A 1F 0175*      ld (@y0-1),de
       04          
041F41 ED 43 58 1F 0176*      ld (@x0-1),bc
       04          
041F46 3E ED       0177*      ld a,plot_bmp+dr_abs_fg ; 0xED
041F48 32 58 1F 04 0178*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
041F4C 21 57 1F 04 0179*  	ld hl,@cmd
041F50 01 06 00 00 0180*  	ld bc,@end-@cmd
041F54 5B DF       0181*  	rst.lil $18
041F56 C9          0182*  	ret
041F57 19          0183*  @cmd:   db 25
041F58 ED          0184*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
041F59 00 00       0185*  @x0: 	dw 0x0000
041F5B 00 00       0186*  @y0: 	dw 0x0000
041F5D             0187*  @end:  ; no padding required b/c we shifted de right
041F5D             0188*  
041F5D             0189*  ; draw a filled rectangle
041F5D             0190*  vdu_plot_rf:
041F5D ED 43 84 1F 0191*      ld (@x0),bc
       04          
041F62 ED 53 86 1F 0192*      ld (@y0),de
       04          
041F67 DD 22 8A 1F 0193*      ld (@x1),ix
       04          
041F6C FD 22 8C 1F 0194*      ld (@y1),iy
       04          
041F71 3E 19       0195*      ld a,25 ; we have to reload the 2nd plot command
041F73 32 88 1F 04 0196*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041F77 21 82 1F 04 0197*  	ld hl,@cmd0
041F7B 01 0C 00 00 0198*  	ld bc,@end-@cmd0
041F7F 5B DF       0199*  	rst.lil $18
041F81 C9          0200*      ret
041F82 19          0201*  @cmd0:  db 25 ; plot
041F83 04          0202*  @arg0:  db plot_sl_both+mv_abs
041F84 00 00       0203*  @x0:    dw 0x0000
041F86 00 00       0204*  @y0:    dw 0x0000
041F88 19          0205*  @cmd1:  db 25 ; plot
041F89 65          0206*  @arg1:  db plot_rf+dr_abs_fg
041F8A 00 00       0207*  @x1:    dw 0x0000
041F8C 00 00       0208*  @y1:    dw 0x0000
041F8E 00          0209*  @end:   db 0x00 ; padding
041F8F             0210*  
041F8F             0211*  ; draw a filled circle
041F8F             0212*  vdu_plot_cf:
041F8F ED 43 B6 1F 0213*      ld (@x0),bc
       04          
041F94 ED 53 B8 1F 0214*      ld (@y0),de
       04          
041F99 DD 22 BC 1F 0215*      ld (@x1),ix
       04          
041F9E FD 22 BE 1F 0216*      ld (@y1),iy
       04          
041FA3 3E 19       0217*      ld a,25 ; we have to reload the 2nd plot command
041FA5 32 BA 1F 04 0218*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041FA9 21 B4 1F 04 0219*  	ld hl,@cmd0
041FAD 01 0C 00 00 0220*  	ld bc,@end-@cmd0
041FB1 5B DF       0221*  	rst.lil $18
041FB3 C9          0222*      ret
041FB4 19          0223*  @cmd0:  db 25 ; plot
041FB5 04          0224*  @arg0:  db plot_sl_both+mv_abs
041FB6 00 00       0225*  @x0:    dw 0x0000
041FB8 00 00       0226*  @y0:    dw 0x0000
041FBA 19          0227*  @cmd1:  db 25 ; plot
041FBB 9D          0228*  @arg1:  db plot_cf+dr_abs_fg
041FBC 00 00       0229*  @x1:    dw 0x0000
041FBE 00 00       0230*  @y1:    dw 0x0000
041FC0 00          0231*  @end:   db 0x00 ; padding
041FC1             0041       include "vdu_sprites.inc"
041FC1 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042000             0002*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
042000             0003*  ; the VDP can support up to 256 sprites. They must be defined
042000             0004*  ; contiguously, and so the first sprite is sprite 0.
042000             0005*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
042000             0006*  ; Once a selection of sprites have been defined, you can activate
042000             0007*  ; them using the VDU 23, 27, 7, n command, where n is the number
042000             0008*  ; of sprites to activate. This will activate the first n sprites,
042000             0009*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
042000             0010*  
042000             0011*  ; A single sprite can have multiple "frames", referring to
042000             0012*  ; different bitmaps.
042000             0013*  ; (These bitmaps do not need to be the same size.)
042000             0014*  ; This allows a sprite to include an animation sequence,
042000             0015*  ; which can be stepped through one frame at a time, or picked
042000             0016*  ; in any order.
042000             0017*  
042000             0018*  ; Any format of bitmap can be used as a sprite frame. It should
042000             0019*  ; be noted however that "native" format bitmaps are not
042000             0020*  ; recommended for use as sprite frames, as they cannot get
042000             0021*  ; erased from the screen. (As noted above, the "native" bitmap
042000             0022*  ; format is not really intended for general use.) This is part
042000             0023*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
042000             0024*  ; screen are now stored in RGBA2222 format.
042000             0025*  
042000             0026*  ; An "active" sprite can be hidden, so it will stop being drawn,
042000             0027*  ; and then later shown again.
042000             0028*  
042000             0029*  ; Moving sprites around the screen is done by changing the
042000             0030*  ; position of the sprite. This can be done either by setting
042000             0031*  ; the absolute position of the sprite, or by moving the sprite
042000             0032*  ; by a given number of pixels. (Sprites are positioned using
042000             0033*  ; pixel coordinates, and not by the logical OS coordinate system.)
042000             0034*  ; In the current sprite system, sprites will not update their
042000             0035*  ; position on-screen until either another drawing operation is
042000             0036*  ; performed or an explicit VDU 23, 27, 15 command is performed.
042000             0037*  
042000             0038*  ; VDU 23, 27, 4, n: Select sprite n
042000             0039*  ; inputs: a is the 8-bit sprite id
042000             0040*  vdu_sprite_select:
042000 32 12 20 04 0041*      ld (@sprite),a
042004 21 0F 20 04 0042*      ld hl,@cmd
042008 01 04 00 00 0043*      ld bc,@end-@cmd
04200C 5B DF       0044*      rst.lil $18
04200E C9          0045*      ret
04200F 17 1B 04    0046*  @cmd:    db 23,27,4
042012 00          0047*  @sprite: db 0x00
042013             0048*  @end:
042013             0049*  
042013             0050*  ; VDU 23, 27, 5: Clear frames in current sprite
042013             0051*  ; inputs: none
042013             0052*  ; prerequisites: vdu_sprite_select
042013             0053*  vdu_sprite_clear_frames:
042013 21 1E 20 04 0054*      ld hl,@cmd
042017 01 03 00 00 0055*      ld bc,@end-@cmd
04201B 5B DF       0056*      rst.lil $18
04201D C9          0057*      ret
04201E 17 1B 05    0058*  @cmd: db 23,27,5
042021             0059*  @end:
042021             0060*  
042021             0061*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
042021             0062*  ; inputs: a is the 8-bit bitmap number
042021             0063*  ; prerequisites: vdu_sprite_select
042021             0064*  vdu_sprite_add_bmp:
042021 32 33 20 04 0065*      ld (@bmp),a
042025 21 30 20 04 0066*      ld hl,@cmd
042029 01 04 00 00 0067*      ld bc,@end-@cmd
04202D 5B DF       0068*      rst.lil $18
04202F C9          0069*      ret
042030 17 1B 06    0070*  @cmd: db 23,27,6
042033 00          0071*  @bmp: db 0x00
042034             0072*  @end:
042034             0073*  
042034             0074*  ; VDU 23, 27, 7, n: Activate n sprites
042034             0075*  ; inputs: a is the number of sprites to activate
042034             0076*  ; prerequisites: each sprite activated must have at least one frame attached to it
042034             0077*  vdu_sprite_activate:
042034 32 46 20 04 0078*      ld (@num),a
042038 21 43 20 04 0079*      ld hl,@cmd
04203C 01 04 00 00 0080*      ld bc,@end-@cmd
042040 5B DF       0081*      rst.lil $18
042042 C9          0082*      ret
042043 17 1B 07    0083*  @cmd: db 23,27,7
042046 00          0084*  @num: db 0x00
042047             0085*  @end:
042047             0086*  
042047             0087*  ; VDU 23, 27, 8: Select next frame of current sprite
042047             0088*  ; inputs: none
042047             0089*  ; prerequisites: vdu_sprite_select
042047             0090*  vdu_sprite_next_frame:
042047 21 52 20 04 0091*      ld hl,@cmd
04204B 01 03 00 00 0092*      ld bc,@end-@cmd
04204F 5B DF       0093*      rst.lil $18
042051 C9          0094*      ret
042052 17 1B 08    0095*  @cmd: db 23,27,8
042055             0096*  @end:
042055             0097*  
042055             0098*  ; VDU 23, 27, 9: Select previous frame of current sprite
042055             0099*  ; inputs: none
042055             0100*  ; prerequisites: vdu_sprite_select
042055             0101*  vdu_sprite_prev_frame:
042055 21 60 20 04 0102*      ld hl,@cmd
042059 01 03 00 00 0103*      ld bc,@end-@cmd
04205D 5B DF       0104*      rst.lil $18
04205F C9          0105*      ret
042060 17 1B 09    0106*  @cmd: db 23,27,9
042063             0107*  @end:
042063             0108*  
042063             0109*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
042063             0110*  ; inputs: a is frame number to select
042063             0111*  ; prerequisites: vdu_sprite_select
042063             0112*  vdu_sprite_select_frame:
042063 32 75 20 04 0113*      ld (@frame),a
042067 21 72 20 04 0114*      ld hl,@cmd
04206B 01 04 00 00 0115*      ld bc,@end-@cmd
04206F 5B DF       0116*      rst.lil $18
042071 C9          0117*      ret
042072 17 1B 0A    0118*  @cmd:    db 23,27,10
042075 00          0119*  @frame:  db 0x00
042076             0120*  @end:
042076             0121*  
042076             0122*  ; VDU 23, 27, 11: Show current sprite
042076             0123*  ; inputs: none
042076             0124*  ; prerequisites: vdu_sprite_select
042076             0125*  vdu_sprite_show:
042076 21 81 20 04 0126*      ld hl,@cmd
04207A 01 03 00 00 0127*      ld bc,@end-@cmd
04207E 5B DF       0128*      rst.lil $18
042080 C9          0129*      ret
042081 17 1B 0B    0130*  @cmd: db 23,27,11
042084             0131*  @end:
042084             0132*  
042084             0133*  ; VDU 23, 27, 12: Hide current sprite
042084             0134*  ; inputs: none
042084             0135*  ; prerequisites: vdu_sprite_select
042084             0136*  vdu_sprite_hide:
042084 21 8F 20 04 0137*      ld hl,@cmd
042088 01 03 00 00 0138*      ld bc,@end-@cmd
04208C 5B DF       0139*      rst.lil $18
04208E C9          0140*      ret
04208F 17 1B 0C    0141*  @cmd: db 23,27,12
042092             0142*  @end:
042092             0143*  
042092             0144*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042092             0145*  ; inputs: bc is x coordinate, de is y coordinate
042092             0146*  ; prerequisites: vdu_sprite_select
042092             0147*  vdu_sprite_move_abs:
042092 ED 43 AA 20 0148*      ld (@xpos),bc
       04          
042097 ED 53 AC 20 0149*      ld (@ypos),de
       04          
04209C 21 A7 20 04 0150*      ld hl,@cmd
0420A0 01 07 00 00 0151*      ld bc,@end-@cmd
0420A4 5B DF       0152*      rst.lil $18
0420A6 C9          0153*      ret
0420A7 17 1B 0D    0154*  @cmd:  db 23,27,13
0420AA 00 00       0155*  @xpos: dw 0x0000
0420AC 00 00       0156*  @ypos: dw 0x0000
0420AE 00          0157*  @end:  db 0x00 ; padding
0420AF             0158*  
0420AF             0159*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0420AF             0160*  ; inputs: bc is x coordinate, de is y coordinate
0420AF             0161*  ; prerequisites: vdu_sprite_select
0420AF             0162*  vdu_sprite_move_rel:
0420AF ED 43 C7 20 0163*      ld (@dx),bc
       04          
0420B4 ED 53 C9 20 0164*      ld (@dy),de
       04          
0420B9 21 C4 20 04 0165*      ld hl,@cmd
0420BD 01 07 00 00 0166*      ld bc,@end-@cmd
0420C1 5B DF       0167*      rst.lil $18
0420C3 C9          0168*      ret
0420C4 17 1B 0E    0169*  @cmd: db 23,27,14
0420C7 00 00       0170*  @dx:  dw 0x0000
0420C9 00 00       0171*  @dy:  dw 0x0000
0420CB 00          0172*  @end: db 0x00 ; padding
0420CC             0173*  
0420CC             0174*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
0420CC             0175*  ; USING 16.8 FIXED POINT COORDINATES
0420CC             0176*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0420CC             0177*  ;   the fractional portiion of the inputs are truncated
0420CC             0178*  ;   leaving only the 16-bit integer portion
0420CC             0179*  ; prerequisites: vdu_sprite_select
0420CC             0180*  vdu_sprite_move_abs168:
0420CC             0181*  ; offset inputs by the gfx origin
0420CC             0182*  ; y coordinate
0420CC 21 00 00 00 0183*      ld hl,origin_top*256
0420D0 19          0184*      add hl,de
0420D1 22 F3 20 04 0185*      ld (@ypos-1),hl
0420D5             0186*  ; x coordinate
0420D5 21 00 80 00 0187*      ld hl,origin_left*256
0420D9 09          0188*      add hl,bc
0420DA 22 F1 20 04 0189*      ld (@xpos-1),hl
0420DE             0190*  ; prepare vdu command
0420DE 3E 0D       0191*      ld a,13       ; restore the final byte of the command
0420E0 32 F1 20 04 0192*      ld (@cmd+2),a ; string that got stomped on by bcu
0420E4 21 EF 20 04 0193*      ld hl,@cmd
0420E8 01 07 00 00 0194*      ld bc,@end-@cmd
0420EC 5B DF       0195*      rst.lil $18
0420EE C9          0196*      ret
0420EF 17 1B 0D    0197*  @cmd:  db 23,27,13
0420F2 00 00       0198*  @xpos: dw 0x0000
0420F4 00 00       0199*  @ypos: dw 0x0000
0420F6             0200*  @end:  ; no padding required b/c we shifted de right
0420F6             0201*  
0420F6             0202*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0420F6             0203*  ; USING 16.8 FIXED POINT COORDINATES
0420F6             0204*  ; inputs: ub.c is dx, ud.e is dy
0420F6             0205*  ;   the fractional portiion of the inputs are truncated
0420F6             0206*  ;   leaving only the 16-bit integer portion
0420F6             0207*  ; prerequisites: vdu_sprite_select
0420F6             0208*  vdu_sprite_move_rel168:
0420F6             0209*  ; populate in the reverse of normal to keep the
0420F6             0210*  ; inputs from stomping on each other
0420F6 ED 53 15 21 0211*      ld (@dy-1),de
       04          
0420FB ED 43 13 21 0212*      ld (@dx-1),bc
       04          
042100 3E 0E       0213*      ld a,14       ; restore the final byte of the command
042102 32 13 21 04 0214*      ld (@cmd+2),a ; string that got stomped on by bcu
042106 21 11 21 04 0215*      ld hl,@cmd
04210A 01 07 00 00 0216*      ld bc,@end-@cmd
04210E 5B DF       0217*      rst.lil $18
042110 C9          0218*      ret
042111 17 1B 0E    0219*  @cmd:  db 23,27,14
042114 00 00       0220*  @dx: dw 0x0000
042116 00 00       0221*  @dy: dw 0x0000
042118             0222*  @end:  ; no padding required b/c we shifted de right
042118             0223*  
042118             0224*  ; VDU 23, 27, 15: Update the sprites in the GPU
042118             0225*  ; inputs: none
042118             0226*  vdu_sprite_update:
042118 21 23 21 04 0227*      ld hl,@cmd
04211C 01 03 00 00 0228*      ld bc,@end-@cmd
042120 5B DF       0229*      rst.lil $18
042122 C9          0230*      ret
042123 17 1B 0F    0231*  @cmd: db 23,27,15
042126             0232*  @end:
042126             0233*  
042126             0234*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042126             0235*  ; inputs: none
042126             0236*  vdu_sprite_bmp_reset:
042126 21 31 21 04 0237*      ld hl,@cmd
04212A 01 03 00 00 0238*      ld bc,@end-@cmd
04212E 5B DF       0239*      rst.lil $18
042130 C9          0240*      ret
042131 17 1B 10    0241*  @cmd: db 23,27,16
042134             0242*  @end:
042134             0243*  
042134             0244*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042134             0245*  ; inputs: none
042134             0246*  vdu_sprite_reset:
042134 21 3F 21 04 0247*      ld hl,@cmd
042138 01 03 00 00 0248*      ld bc,@end-@cmd
04213C 5B DF       0249*      rst.lil $18
04213E C9          0250*      ret
04213F 17 1B 11    0251*  @cmd: db 23,27,17
042142             0252*  @end:
042142             0253*  
042142             0254*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042142             0255*  ; inputs: a is the GCOL paint mode
042142             0256*  ; prerequisites: vdu_sprite_select
042142             0257*  vdu_sprite_set_gcol:
042142 32 54 21 04 0258*      ld (@mode),a
042146 21 51 21 04 0259*      ld hl,@cmd
04214A 01 04 00 00 0260*      ld bc,@end-@cmd
04214E 5B DF       0261*      rst.lil $18
042150 C9          0262*      ret
042151 17 1B 12    0263*  @cmd:  db 23,27,18
042154 00          0264*  @mode: db 0x00
042155             0265*  @end:
042155             0266*  
042155             0267*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
042155             0268*  ; inputs: hl=bufferId
042155             0269*  ; prerequisites: vdu_sprite_select
042155             0270*  vdu_sprite_add_buff:
042155 22 67 21 04 0271*      ld (@bufferId),hl
042159 21 64 21 04 0272*      ld hl,@cmd
04215D 01 05 00 00 0273*      ld bc,@end-@cmd
042161 5B DF       0274*      rst.lil $18
042163 C9          0275*      ret
042164 17 1B 26    0276*  @cmd:      db 23,27,0x26
042167 00 00       0277*  @bufferId: dw 0x0000
042169 00          0278*  @end:      db 0x00 ; padding
04216A             0042   
04216A             0043   ; APPLICATION INCLUDES
04216A             0044       include "collisions.inc"
04216A FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
042200             0002*  ; ====== COLLISION DETECTION ======
042200             0003*  ; --- constants ---
042200             0004*  ; sprite_collisions flags
042200             0005*  collides_with_player: equ %00000001
042200             0006*  collides_with_laser: equ %00000010
042200             0007*  sprite_alive: equ 6 ; set when sprite is alive
042200             0008*  sprite_just_died: equ 7 ; set when sprite just died
042200             0009*  
042200             0010*  collide_top: equ %00001000
042200             0011*  collide_bottom: equ %00000100
042200             0012*  collide_left: equ %00000010
042200             0013*  collide_right: equ %00000001
042200             0014*  
042200             0015*  ; this routine detects collisions between two collidable objects,
042200             0016*  ; which can include sprites, active tiles, or any screen coordinate
042200             0017*  ; which has been set up with a sprite table structure that includes dim_x
042200             0018*  ; representing the radius of the collidable object
042200             0019*  ; inputs: ix and iy point to the colliding objects' sprite table records
042200             0020*  ; outputs: uh.l = distance - sum of radii
042200             0021*  ;          zero flag set or sign flag negative if collision detected
042200             0022*  ;          dx168 and dy168 are also populated with the signed displacements
042200             0023*  ; destroys: everything except indexes
042200             0024*  check_collision:
042200             0025*  ; compute dx = x1-x0
042200 DD 27 01    0026*      ld hl,(ix+sprite_x)
042203 FD 17 01    0027*      ld de,(iy+sprite_x)
042206 AF          0028*      xor a ; clear carry
042207 ED 52       0029*      sbc hl,de
042209 22 37 0C 04 0030*      ld (dx168),hl ; dx to scratch
04220D             0031*  ; compute dy = y1-y0
04220D DD 27 04    0032*      ld hl,(ix+sprite_y)
042210 FD 17 04    0033*      ld de,(iy+sprite_y)
042213 AF          0034*      xor a ; clear carry
042214 ED 52       0035*      sbc hl,de ; hl = dy
042216 22 3D 0C 04 0036*      ld (dy168),hl ; dy to scratch
04221A             0037*  ; compute euclidean distance between centers
04221A CD 43 0C 04 0038*      call distance168 ; uh.l = distance
04221E             0039*  ; check for overlap by summing half the radii
04221E DD 7E 1E    0040*      ld a,(ix+sprite_dim_x)
042221 CB 3F       0041*      srl a ; divide by 2
042223 FD 5E 1E    0042*      ld e,(iy+sprite_dim_x)
042226 CB 3B       0043*      srl e ; divide by 2
042228 83          0044*      add a,e
042229 11 00 00 00 0045*      ld de,0 ; clear deu and e
04222D 57          0046*      ld d,a ; ud.e = sum of radii
04222E B7          0047*      or a ; clear carry
04222F ED 52       0048*      sbc hl,de ; uh.l = distance - sum of radii
042231 C9          0049*      ret
042232             0050*  ; end check_collision
042232             0045       include "enemies.inc"
042232 04          0001*  max_enemy_sprites: db 4
042233             0002*  
042233             0003*  ; sprite_type
042233             0004*  enemy_dead: equ 0
042233             0005*  enemy_air: equ 1
042233             0006*  enemy_ground: equ 2
042233             0007*  enemy_projectile: equ 3
042233             0008*  explosion: equ 4
042233             0009*  move_enemies:
042233             0010*  ; are there any active enemies or explosions?
042233 3A 93 5E 04 0011*      ld a,(table_active_sprites)
042237 A7          0012*      and a ; will be zero if no alive enemies or explosions
042238 C2 3D 22 04 0013*      jp nz,@they_live
04223C             0014*      ; DEPRECATED: though may be used in the future
04223C             0015*      ; ld hl,enemies_dead
04223C             0016*      ; ld (enemies_state),hl
04223C             0017*      ; END DEPRECATED
04223C C9          0018*      ret
04223D             0019*  @they_live:
04223D             0020*  ; initialize pointers and loop counter
04223D FD 21 00 5C 0021*      ld iy,table_base ; set iy to first record in table
       04          
042242 06 10       0022*      ld b,table_max_records ; loop counter
042244             0023*  @move_loop:
042244 FD 22 90 5E 0024*      ld (table_pointer),iy ; update table pointer
       04          
042249 C5          0025*      push bc ; backup loop counter
04224A             0026*  ; check top bit of sprite_type to see if sprite is just spawned
04224A FD 7E 16    0027*      ld a,(iy+sprite_type)
04224D CB 7F       0028*      bit 7,a
04224F C2 8E 22 04 0029*      jp nz,@next_record ; if just spawned, skip to next record
042253             0030*  ; check sprite_type to see if sprite is active
042253 A7          0031*      and a ; if zero, sprite is dead
042254 CA 8E 22 04 0032*      jp z,@next_record ; ... and we skip to next record
042258             0033*  ; otherwise we prepare to move the sprite
042258 FD 27 1A    0034*      ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
04225B             0035*      callHL
04225B 01 61 22 04 0001*M     ld bc,@F ; Address of first instruction after the jump
04225F C5          0002*M     push bc ; which constitutes the return address
042260 E9          0003*M     jp (hl) ; Jump to the address in HL
042261             0004*M @@:
042261             0036*  ; move_enemies_loop_return: return from behavior subroutines
042261 FD 2A 90 5E 0037*      ld iy,(table_pointer) ; get back table pointer
       04          
042266             0038*  ; now we check results of all the moves
042266 FD CB 1D 7E 0039*      bit sprite_just_died,(iy+sprite_collisions)
04226A CA 76 22 04 0040*      jp z,@draw_sprite ; if not dead, draw sprite
04226E CD EC 5E 04 0041*      call table_deactivate_sprite
042272 C3 8E 22 04 0042*      jp @next_record ; and to the next record
042276             0043*  @draw_sprite:
042276 FD 7E 00    0044*      ld a,(iy+sprite_id) ; get spriteId
042279 CD 00 20 04 0045*      call vdu_sprite_select ; select sprite
04227D FD 7E 28    0046*      ld a,(iy+sprite_frame)
042280 CD 63 20 04 0047*      call vdu_sprite_select_frame
042284 FD 07 01    0048*      ld bc,(iy+sprite_x)
042287 FD 17 04    0049*      ld de,(iy+sprite_y)
04228A CD CC 20 04 0050*      call vdu_sprite_move_abs168
04228E             0051*  ; fall through to @next_record
04228E             0052*  @next_record:
04228E ED 33 29    0053*      lea iy,iy+table_bytes_per_record
042291 AF          0054*      xor a ; clears carry flag
042292 32 94 5E 04 0055*      ld (sprite_screen_edge),a ; clear screen edge collision flag
042296 C1          0056*      pop bc ; get back our loop counter
042297 10 AB       0057*      djnz @move_loop ; loop until we've checked all the records
042299             0058*  ; reset all just spawned flags
042299 FD 21 00 5C 0059*      ld iy,table_base
       04          
04229E 06 10       0060*      ld b,table_max_records
0422A0             0061*  @reset_just_spawned:
0422A0 C5          0062*      push bc ; back up loop counter
0422A1 FD CB 16 7E 0063*      bit 7,(iy+sprite_type) ; check if just spawned
0422A5 CA D8 22 04 0064*      jp z,@F
0422A9 FD CB 16 BE 0065*      res 7,(iy+sprite_type) ; clear just spawned flag
0422AD FD 7E 00    0066*      ld a,(iy+sprite_id)
0422B0 CD 00 20 04 0067*      call vdu_sprite_select
0422B4 FD 27 17    0068*      ld hl,(iy+sprite_base_bufferId)
0422B7 FD 46 21    0069*      ld b,(iy+sprite_num_animations)
0422BA FD 4E 20    0070*      ld c,(iy+sprite_num_orientations)
0422BD ED 4C       0071*      mlt bc ; bc total frames
0422BF CD 86 60 04 0072*      call sprite_load_frames
0422C3 FD 7E 28    0073*      ld a,(iy+sprite_frame)
0422C6 CD 63 20 04 0074*      call vdu_sprite_select_frame
0422CA FD 07 01    0075*      ld bc,(iy+sprite_x)
0422CD FD 17 04    0076*      ld de,(iy+sprite_y)
0422D0 CD CC 20 04 0077*      call vdu_sprite_move_abs168
0422D4 CD 76 20 04 0078*      call vdu_sprite_show
0422D8             0079*  @@:
0422D8 ED 33 29    0080*      lea iy,iy+table_bytes_per_record
0422DB C1          0081*      pop bc ; get back loop counter
0422DC 10 C2       0082*      djnz @reset_just_spawned
0422DE             0083*  ; and done
0422DE C9          0084*      ret
0422DF             0085*  
0422DF             0086*  check_enemy_collisions:
0422DF             0087*  ; check what we collide with
0422DF FD 7E 1D    0088*      ld a,(iy+sprite_collisions)
0422E2 F5          0089*      push af ; save collision flags
0422E3 E6 01       0090*      and collides_with_player ; check for collisions with player
0422E5 C4 12 23 04 0091*      call nz,check_enemy_collision_player
0422E9 F1          0092*      pop af ; restore collision flags
0422EA E6 02       0093*      and collides_with_laser ; check for collisions with laser
0422EC C4 F1 22 04 0094*      call nz,check_enemy_collision_laser
0422F0 C9          0095*      ret
0422F1             0096*  check_enemy_collision_laser: ; check for collisions with laser
0422F1 DD 21 00 56 0097*      ld ix,laser_start_variables
       04          
0422F6 DD CB 1D 76 0098*      bit sprite_alive,(ix+sprite_collisions)
0422FA C8          0099*      ret z ; laser dead, nothing to do
0422FB CD 00 22 04 0100*      call check_collision
0422FF F0          0101*      ret p ; no collision
042300 DD 21 00 56 0102*      ld ix,laser_start_variables
       04          
042305 DD CB 1D FE 0103*      set sprite_just_died,(ix+sprite_collisions)
042309 DD CB 1D F6 0104*      set sprite_alive,(ix+sprite_collisions)
04230D CD 26 23 04 0105*      call enemy_kill
042311 C9          0106*      ret
042312             0107*  check_enemy_collision_player: ; check for collisions with player
042312 DD 21 0A 5A 0108*      ld ix,player_start_variables
       04          
042317 DD CB 1D 76 0109*      bit sprite_alive,(ix+sprite_collisions)
04231B C8          0110*      ret z ; player dead, no collision
04231C CD 00 22 04 0111*      call check_collision
042320 F0          0112*      ret p ; no collision
042321 CD 26 23 04 0113*      call enemy_kill
042325 C9          0114*      ret
042326             0115*  ; end check_enemy_collisions
042326             0116*  
042326             0117*  ; this routine vanquishes the enemy sprite
042326             0118*  ; and replaces it with an animated explosion
042326             0119*  ; destroys: everything except index registers
042326             0120*  ; returns: a=-1 to indicate enemy died, and an incandescent ball of debris and gas
042326             0121*  enemy_kill:
042326 FD 2A 90 5E 0122*      ld iy,(table_pointer)
       04          
04232B 2A 00 5A 04 0123*      ld hl,(player_score)
04232F 01 00 00 00 0124*      ld bc,0 ; clear bcu
042333 FD 4E 26    0125*      ld c,(iy+sprite_points)
042336 09          0126*      add hl,bc
042337 22 00 5A 04 0127*      ld (player_score),hl
04233B C3 13 26 04 0128*      jp spawn_explosion
04233F             0129*  ; end enemy_kill
04233F             0046       include "enemy_fireball.inc"
04233F FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
042400             0002*  speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
042400             0003*  
042400             0004*  fireball_defaults:
042400 03          0005*      db enemy_projectile        ; type
042401 06 01 00    0006*      dl BUF_FIREBALL_A	    ; base_bufferId
042404 51 24 04    0007*      dl move_enemy_fireball	; move_program
042407 01          0008*      db collides_with_player ; collisions
042408 07          0009*      db 7	                ; dim_x
042409 07          0010*      db 7                    ; dim_y
04240A 01          0011*      db 1                    ; num_orientations
04240B 01          0012*      db 1                    ; num_animations
04240C 00          0013*      db 0	                ; animation
04240D 00          0014*      db 0	                ; animation_timer
04240E 00          0015*      db 0	                ; move_timer
04240F 00          0016*      db 0	                ; move_step
042410 14          0017*      db 20	                ; points
042411 05          0018*      db 5	                ; shield_damage
042412 00          0019*      db 0                    ; frame
042413             0020*  
042413             0021*  enemy_spawn_fireball:
042413 21 00 24 04 0022*      ld hl,fireball_defaults
042417 CD 48 60 04 0023*      call spawn_sprite_from_sprite
04241B D0          0024*      ret nc ; no carry means no free sprite slots, so we go home
04241C             0025*  ; other specific initialization
04241C             0026*  ; ------------------------------------------------
04241C             0027*  ; center the fireball on the turret
04241C 11 80 03 00 0028*      ld de,3*256+128 ; half the fireball size
042420 FD 27 01    0029*      ld hl,(iy+sprite_x)
042423 19          0030*      add hl,de
042424 DD 2F 01    0031*      ld (ix+sprite_x),hl
042427 FD 27 04    0032*      ld hl,(iy+sprite_y)
04242A 19          0033*      add hl,de
04242B DD 2F 04    0034*      ld (ix+sprite_y),hl
04242E             0035*  ; copy component velocities from targeting_computer
04242E 2A 34 65 04 0036*      ld hl,(Vp_x)
042432 DD 2F 07    0037*      ld (ix+sprite_xvel),hl
042435 2A 37 65 04 0038*      ld hl,(Vp_y)
042439 DD 2F 0A    0039*      ld (ix+sprite_yvel),hl
04243C             0040*  ; move projectile one frame's distance so it isn't drawn right over turret
04243C DD 27 01    0041*      ld hl,(ix+sprite_x)
04243F DD 17 07    0042*      ld de,(ix+sprite_xvel)
042442 19          0043*      add hl,de
042443 DD 2F 01    0044*      ld (ix+sprite_x),hl
042446 DD 27 04    0045*      ld hl,(ix+sprite_y)
042449 DD 17 0A    0046*      ld de,(ix+sprite_yvel)
04244C 19          0047*      add hl,de
04244D DD 2F 04    0048*      ld (ix+sprite_y),hl
042450 C9          0049*      ret
042451             0050*  ; end enemy_spawn_fireball
042451             0051*  
042451             0052*  move_enemy_fireball:
042451             0053*  ; run the movement program for the fireball enemy
042451 CD 5B 5F 04 0054*      call move_sprite
042455 3A 94 5E 04 0055*      ld a,(sprite_screen_edge)
042459 B7          0056*      or a ; a will be non-zero if have scrolled off screen
04245A C2 EC 5E 04 0057*      jp nz,table_deactivate_sprite
04245E C3 DF 22 04 0058*      jp check_enemy_collisions
042462             0059*  ; end move_enemy_fireball
042462             0047       include "enemy_seeker.inc"
042462 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
042500             0002*  speed_seeker: equ 0x000280 ; 2.5 pixels per frame
042500             0003*  
042500             0004*  seeker_defaults:
042500 01          0005*      db enemy_air         ; type
042501 0B 01 00    0006*      dl BUF_SEEKER_000	    ; base_bufferId
042504 24 25 04    0007*      dl move_enemy_seeker	; move_program
042507 03          0008*      db collides_with_laser | collides_with_player ; collisions
042508 10          0009*      db 16	                ; dim_x
042509 10          0010*      db 16                   ; dim_y
04250A 20          0011*      db 32                   ; num_orientations
04250B 01          0012*      db 1                    ; num_animations
04250C 00          0013*      db 0	                ; animation
04250D 00          0014*      db 0	                ; animation_timer
04250E 01          0015*      db 1	                ; move_timer
04250F 00          0016*      db 0	                ; move_step
042510 0A          0017*      db 10	                ; points
042511 02          0018*      db 2	                ; shield_damage
042512 00          0019*      db 0                    ; frame
042513             0020*  
042513             0021*  enemy_spawn_seeker:
042513 21 00 25 04 0022*      ld hl,seeker_defaults
042517 CD 48 60 04 0023*      call spawn_sprite_from_sprite
04251B D0          0024*      ret nc ; no carry means no free sprite slots, so we go home
04251C             0025*  ; other specific initialization
04251C 21 80 02 00 0026*      ld hl,speed_seeker
042520 DD 2F 0D    0027*      ld (ix+sprite_vel),hl
042523 C9          0028*      ret
042524             0029*  ; end enemy_spawn_seeker
042524             0030*  
042524             0031*  move_enemy_seeker:
042524             0032*  ; run the movement program for the seeker enemy
042524 CD 2D 25 04 0033*      call en_nav_seek_zag
042528 C3 DF 22 04 0034*      jp check_enemy_collisions
04252C C9          0035*      ret
04252D             0036*  ; end move_enemy_seeker
04252D             0037*  
04252D             0038*  ; contains the logic for how to move the enemy
04252D             0039*  ; and then does the moving
04252D             0040*  ; inputs: a fully-populated active sprite table
04252D             0041*  ;         player position variables
04252D             0042*  ; destroys: everything except index registers
04252D             0043*  ; outputs: moving enemies
04252D             0044*  en_nav_seek_zag:
04252D             0045*  ; set velocity and orientation by player's relative location
04252D             0046*  ; move enemies y-axis
04252D             0047*  ; where is player relative to us?
04252D CD 00 65 04 0048*      call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
042531             0049*  ; is player above or below us?
042531 ED 53 55 06 0050*      ld (ude),de ; dy
       04          
042536 3A 57 06 04 0051*      ld a,(ude+2) ; deu
04253A 17          0052*      rla ; shift sign bit into carry
04253B D2 64 25 04 0053*      jp nc,@zig_zag ; player is below,evade
04253F             0054*  ; player is even or above,so home in on current heading
04253F FD 2F 10    0055*      ld (iy+sprite_heading),hl ; save sprite heading
042542             0056*  ; fall through to @compute_velocities
042542             0057*  @compute_velocities:
042542 CD FC 5F 04 0058*      call sprite_compute_velocities
042546             0059*  ; change the animation frame to match heading
042546 CD 79 60 04 0060*      call sprite_frame_heading ; a, sprite_frame set to heading-based frame
04254A CD 5B 5F 04 0061*      call move_sprite ; move the sprite
04254E B7          0062*      or a ; a will be non-zero if have collided with screen edge
04254F C2 6F 25 04 0063*      jp nz,@zag_switch ; switch direction
042553 C9          0064*      ret ; didn't hit edge, nothing else to do
042554             0065*  @zig_zag_start:
042554 FD 2A 90 5E 0066*      ld iy,(table_pointer)
       04          
042559 CD AE 09 04 0067*      call rand_8
04255D E6 3F       0068*      and %00111111 ; limit it to 64
04255F CB DF       0069*      set 3,a ; make sure it's at least 8
042561 FD 77 24    0070*      ld (iy+sprite_move_timer),a ; store it
042564             0071*      ; fall through to @zig_zag
042564             0072*  @zig_zag:
042564 FD 7E 24    0073*      ld a,(iy+sprite_move_timer)
042567 3D          0074*      dec a
042568 FD 77 24    0075*      ld (iy+sprite_move_timer),a
04256B C2 91 25 04 0076*      jp nz,@zig_zag_no_switch
04256F             0077*  @zag_switch:
04256F             0078*      ; otherwise flip direction and restart timer
04256F FD 7E 25    0079*      ld a,(iy+sprite_move_step)
042572 EE 01       0080*      xor %1 ; flips bit zero
042574 FD 77 25    0081*      ld (iy+sprite_move_step),a ; store it
042577 C2 86 25 04 0082*      jp nz,@F ; zag right
04257B             0083*  ;otherwise zag left
04257B 21 00 A0 00 0084*      ld hl,160*256; southwest heading
04257F FD 2F 10    0085*      ld (iy+sprite_heading),hl ; save sprite heading
042582 C3 54 25 04 0086*      jp @zig_zag_start
042586             0087*  @@: ; zag right
042586 21 00 60 00 0088*      ld hl,96*256; southeast heading
04258A FD 2F 10    0089*      ld (iy+sprite_heading),hl ; save sprite heading
04258D C3 54 25 04 0090*      jp @zig_zag_start
042591             0091*  @zig_zag_no_switch:
042591             0092*      ; ld a,(sprite_orientation)
042591 FD 27 10    0093*      ld hl,(iy+sprite_heading)
042594 C3 42 25 04 0094*      jp @compute_velocities
042598             0095*  ; end en_nav_seek_zag
042598             0048       include "explosion.inc"
042598 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
042600             0002*  explosion_defaults:
042600 04          0003*      db explosion            ; type
042601 01 01 00    0004*      dl BUF_EXPLOSION_A	    ; base_bufferId
042604 2A 26 04    0005*      dl move_explosion	    ; move_program
042607 00          0006*      db 0                    ; collisions
042608 07          0007*      db 7	                ; dim_x
042609 07          0008*      db 7                    ; dim_y
04260A 01          0009*      db 1                    ; num_orientations
04260B 05          0010*      db 5                    ; num_animations
04260C 05          0011*      db 5	                ; animation
04260D 08          0012*      db 8	                ; animation_timer
04260E 00          0013*      db 0	                ; move_timer
04260F 00          0014*      db 0	                ; move_step
042610 00          0015*      db 0	                ; points
042611 05          0016*      db 5	                ; shield_damage
042612 00          0017*      db 0                    ; frame
042613             0018*  
042613             0019*  spawn_explosion:
042613 21 00 26 04 0020*      ld hl,explosion_defaults
042617 CD 14 60 04 0021*      call alter_sprite
04261B             0022*  ; other specific initialization
04261B 21 00 00 00 0023*      ld hl,0
04261F FD 2F 07    0024*      ld (iy+sprite_xvel),hl
042622 21 00 01 00 0025*      ld hl,1*256
042626 FD 2F 0A    0026*      ld (iy+sprite_yvel),hl
042629 C9          0027*      ret
04262A             0028*  ; end spawn_explosion
04262A             0029*  
04262A             0030*  move_explosion:
04262A             0031*  ; run the movement program for the explosion
04262A CD 5B 5F 04 0032*      call move_sprite
04262E B7          0033*      or a ; a will be non-zero if have scrolled off screen
04262F C2 47 26 04 0034*      jp nz,@make_crater
042633             0035*  ; do the animations
042633 FD 35 23    0036*      dec (iy+sprite_animation_timer)
042636 C0          0037*      ret nz ; not time to bump animation frame
042637 FD 34 28    0038*      inc (iy+sprite_frame)
04263A FD 35 22    0039*      dec (iy+sprite_animation)
04263D CA 47 26 04 0040*      jp z,@make_crater ; reached the end of the animations
042641 3E 08       0041*      ld a,8 ; reset animation timer
042643 FD 77 23    0042*      ld (iy+sprite_animation_timer),a
042646 C9          0043*      ret
042647             0044*  @make_crater: ; deactivate sprite and draw a crater in its place
042647 21 00 01 00 0045*      ld hl,BUF_CRATER
04264B CD 38 1B 04 0046*      call vdu_buff_select
04264F FD 07 01    0047*      ld bc,(iy+sprite_x)
042652 FD 17 04    0048*      ld de,(iy+sprite_y)
042655 CD 3C 1F 04 0049*      call vdu_plot_bmp168
042659 C3 EC 5E 04 0050*      jp table_deactivate_sprite
04265D             0051*  ; end move_explosion
04265D             0049       include "fonts_list.inc"
04265D FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
042700             0002*  
042700             0003*  ; Generated by asm_config_editor.py
042700             0004*  font_list_record_size: equ 12
042700             0005*  font_list_width: equ 0
042700             0006*  font_list_height: equ 3
042700             0007*  font_list_bufferId: equ 6
042700             0008*  font_list_filename: equ 9
042700             0009*  
042700             0010*  num_fonts: equ 18
042700             0011*  
042700             0012*  ; Index list:
042700             0013*  amiga_forever_16x24: equ 64000
042700             0014*  amiga_forever_8x16: equ 64001
042700             0015*  amiga_forever_8x8: equ 64002
042700             0016*  computer_pixel_7_10x15: equ 64003
042700             0017*  computer_pixel_7_10x24: equ 64004
042700             0018*  computer_pixel_7_8x16: equ 64005
042700             0019*  Lat2_Terminus12x6_6x12: equ 64006
042700             0020*  Lat2_TerminusBold14_8x14: equ 64007
042700             0021*  Lat2_VGA14_8x14: equ 64008
042700             0022*  Lat2_VGA16_8x16: equ 64009
042700             0023*  Lat2_VGA8_8x8: equ 64010
042700             0024*  Lat7_Fixed13_8x13: equ 64011
042700             0025*  Lat7_Terminus12x6_6x12: equ 64012
042700             0026*  Lat7_TerminusBold16_8x16: equ 64013
042700             0027*  Lat7_VGA14_8x14: equ 64014
042700             0028*  Lat7_VGA8x8: equ 64015
042700             0029*  scriptorium_12x14: equ 64016
042700             0030*  Squarewave_Bold_8x12: equ 64017
042700             0031*  
042700             0032*  font_list: ; width; height; bufferId; filename;:
042700 10 00 00 18 0033*  	dl 16, 24, 64000, fn_amiga_forever_16x24
       00 00 00 FA 
       00 D8 27 04 
04270C 08 00 00 10 0034*  	dl 8, 16, 64001, fn_amiga_forever_8x16
       00 00 01 FA 
       00 F7 27 04 
042718 08 00 00 08 0035*  	dl 8, 8, 64002, fn_amiga_forever_8x8
       00 00 02 FA 
       00 15 28 04 
042724 0A 00 00 0F 0036*  	dl 10, 15, 64003, fn_computer_pixel_7_10x15
       00 00 03 FA 
       00 32 28 04 
042730 0A 00 00 18 0037*  	dl 10, 24, 64004, fn_computer_pixel_7_10x24
       00 00 04 FA 
       00 54 28 04 
04273C 08 00 00 10 0038*  	dl 8, 16, 64005, fn_computer_pixel_7_8x16
       00 00 05 FA 
       00 76 28 04 
042748 06 00 00 0C 0039*  	dl 6, 12, 64006, fn_Lat2_Terminus12x6_6x12
       00 00 06 FA 
       00 97 28 04 
042754 08 00 00 0E 0040*  	dl 8, 14, 64007, fn_Lat2_TerminusBold14_8x14
       00 00 07 FA 
       00 B9 28 04 
042760 08 00 00 0E 0041*  	dl 8, 14, 64008, fn_Lat2_VGA14_8x14
       00 00 08 FA 
       00 DD 28 04 
04276C 08 00 00 10 0042*  	dl 8, 16, 64009, fn_Lat2_VGA16_8x16
       00 00 09 FA 
       00 F8 28 04 
042778 08 00 00 08 0043*  	dl 8, 8, 64010, fn_Lat2_VGA8_8x8
       00 00 0A FA 
       00 13 29 04 
042784 08 00 00 0D 0044*  	dl 8, 13, 64011, fn_Lat7_Fixed13_8x13
       00 00 0B FA 
       00 2C 29 04 
042790 06 00 00 0C 0045*  	dl 6, 12, 64012, fn_Lat7_Terminus12x6_6x12
       00 00 0C FA 
       00 49 29 04 
04279C 08 00 00 10 0046*  	dl 8, 16, 64013, fn_Lat7_TerminusBold16_8x16
       00 00 0D FA 
       00 6B 29 04 
0427A8 08 00 00 0E 0047*  	dl 8, 14, 64014, fn_Lat7_VGA14_8x14
       00 00 0E FA 
       00 8F 29 04 
0427B4 08 00 00 08 0048*  	dl 8, 8, 64015, fn_Lat7_VGA8_8x8
       00 00 0F FA 
       00 AA 29 04 
0427C0 0C 00 00 0E 0049*  	dl 12, 14, 64016, fn_scriptorium_12x14
       00 00 10 FA 
       00 C3 29 04 
0427CC 08 00 00 0C 0050*  	dl 8, 12, 64017, fn_Squarewave_Bold_8x12
       00 00 11 FA 
       00 E0 29 04 
0427D8             0051*  
0427D8             0052*  ; files_list: ; filename:
0427D8 66 6F 6E 74 0053*  fn_amiga_forever_16x24: db "fonts/amiga_forever_16x24.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       31 36 78 32 
       34 2E 66 6F 
       6E 74 00    
0427F7 66 6F 6E 74 0054*  fn_amiga_forever_8x16: db "fonts/amiga_forever_8x16.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
042815 66 6F 6E 74 0055*  fn_amiga_forever_8x8: db "fonts/amiga_forever_8x8.font",0
       73 2F 61 6D 
       69 67 61 5F 
       66 6F 72 65 
       76 65 72 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
042832 66 6F 6E 74 0056*  fn_computer_pixel_7_10x15: db "fonts/computer_pixel_7_10x15.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 31 35 
       2E 66 6F 6E 
       74 00       
042854 66 6F 6E 74 0057*  fn_computer_pixel_7_10x24: db "fonts/computer_pixel_7_10x24.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 31 
       30 78 32 34 
       2E 66 6F 6E 
       74 00       
042876 66 6F 6E 74 0058*  fn_computer_pixel_7_8x16: db "fonts/computer_pixel_7_8x16.font",0
       73 2F 63 6F 
       6D 70 75 74 
       65 72 5F 70 
       69 78 65 6C 
       5F 37 5F 38 
       78 31 36 2E 
       66 6F 6E 74 
       00          
042897 66 6F 6E 74 0059*  fn_Lat2_Terminus12x6_6x12: db "fonts/Lat2-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
0428B9 66 6F 6E 74 0060*  fn_Lat2_TerminusBold14_8x14: db "fonts/Lat2-TerminusBold14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       34 5F 38 78 
       31 34 2E 66 
       6F 6E 74 00 
0428DD 66 6F 6E 74 0061*  fn_Lat2_VGA14_8x14: db "fonts/Lat2-VGA14_8x14.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
0428F8 66 6F 6E 74 0062*  fn_Lat2_VGA16_8x16: db "fonts/Lat2-VGA16_8x16.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 31 36 
       5F 38 78 31 
       36 2E 66 6F 
       6E 74 00    
042913 66 6F 6E 74 0063*  fn_Lat2_VGA8_8x8: db "fonts/Lat2-VGA8_8x8.font",0
       73 2F 4C 61 
       74 32 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
04292C 66 6F 6E 74 0064*  fn_Lat7_Fixed13_8x13: db "fonts/Lat7-Fixed13_8x13.font",0
       73 2F 4C 61 
       74 37 2D 46 
       69 78 65 64 
       31 33 5F 38 
       78 31 33 2E 
       66 6F 6E 74 
       00          
042949 66 6F 6E 74 0065*  fn_Lat7_Terminus12x6_6x12: db "fonts/Lat7-Terminus12x6_6x12.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 31 
       32 78 36 5F 
       36 78 31 32 
       2E 66 6F 6E 
       74 00       
04296B 66 6F 6E 74 0066*  fn_Lat7_TerminusBold16_8x16: db "fonts/Lat7-TerminusBold16_8x16.font",0
       73 2F 4C 61 
       74 37 2D 54 
       65 72 6D 69 
       6E 75 73 42 
       6F 6C 64 31 
       36 5F 38 78 
       31 36 2E 66 
       6F 6E 74 00 
04298F 66 6F 6E 74 0067*  fn_Lat7_VGA14_8x14: db "fonts/Lat7-VGA14_8x14.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 31 34 
       5F 38 78 31 
       34 2E 66 6F 
       6E 74 00    
0429AA 66 6F 6E 74 0068*  fn_Lat7_VGA8_8x8: db "fonts/Lat7-VGA8_8x8.font",0
       73 2F 4C 61 
       74 37 2D 56 
       47 41 38 5F 
       38 78 38 2E 
       66 6F 6E 74 
       00          
0429C3 66 6F 6E 74 0069*  fn_scriptorium_12x14: db "fonts/scriptorium_12x14.font",0
       73 2F 73 63 
       72 69 70 74 
       6F 72 69 75 
       6D 5F 31 32 
       78 31 34 2E 
       66 6F 6E 74 
       00          
0429E0 66 6F 6E 74 0070*  fn_Squarewave_Bold_8x12: db "fonts/Squarewave_Bold_8x12.font",0
       73 2F 53 71 
       75 61 72 65 
       77 61 76 65 
       5F 42 6F 6C 
       64 5F 38 78 
       31 32 2E 66 
       6F 6E 74 00 
042A00             0050       include "images_tiles_dg.inc"
042A00             0001*  ; Generated by tiles_dg.py
042A00             0002*  
042A00             0003*  tiles_dg_num_images: equ 184
042A00             0004*  
042A00             0005*  ; bufferIds:
042A00             0006*  
042A00             0007*  
042A00             0008*  tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
042A00 01 00 00 10 0009*  	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       F0 36 04 00 
       02 00       
042A12 01 00 00 10 0010*  	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       05 37 04 01 
       02 00       
042A24 01 00 00 10 0011*  	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       1A 37 04 02 
       02 00       
042A36 01 00 00 10 0012*  	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       2F 37 04 03 
       02 00       
042A48 01 00 00 10 0013*  	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       44 37 04 04 
       02 00       
042A5A 01 00 00 10 0014*  	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       59 37 04 05 
       02 00       
042A6C 01 00 00 10 0015*  	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       6E 37 04 06 
       02 00       
042A7E 01 00 00 10 0016*  	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       83 37 04 07 
       02 00       
042A90 01 00 00 10 0017*  	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       98 37 04 08 
       02 00       
042AA2 01 00 00 10 0018*  	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       AD 37 04 09 
       02 00       
042AB4 01 00 00 10 0019*  	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       C2 37 04 0A 
       02 00       
042AC6 01 00 00 10 0020*  	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       D7 37 04 0B 
       02 00       
042AD8 01 00 00 10 0021*  	dl 1, 16, 16, 256, fn_dg_012, 524
       00 00 10 00 
       00 00 01 00 
       EC 37 04 0C 
       02 00       
042AEA 01 00 00 10 0022*  	dl 1, 16, 16, 256, fn_dg_013, 525
       00 00 10 00 
       00 00 01 00 
       01 38 04 0D 
       02 00       
042AFC 01 00 00 10 0023*  	dl 1, 16, 16, 256, fn_dg_014, 526
       00 00 10 00 
       00 00 01 00 
       16 38 04 0E 
       02 00       
042B0E 01 00 00 10 0024*  	dl 1, 16, 16, 256, fn_dg_015, 527
       00 00 10 00 
       00 00 01 00 
       2B 38 04 0F 
       02 00       
042B20 01 00 00 10 0025*  	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       40 38 04 10 
       02 00       
042B32 01 00 00 10 0026*  	dl 1, 16, 16, 256, fn_dg_025, 537
       00 00 10 00 
       00 00 01 00 
       55 38 04 19 
       02 00       
042B44 01 00 00 10 0027*  	dl 1, 16, 16, 256, fn_dg_026, 538
       00 00 10 00 
       00 00 01 00 
       6A 38 04 1A 
       02 00       
042B56 01 00 00 10 0028*  	dl 1, 16, 16, 256, fn_dg_027, 539
       00 00 10 00 
       00 00 01 00 
       7F 38 04 1B 
       02 00       
042B68 01 00 00 10 0029*  	dl 1, 16, 16, 256, fn_dg_028, 540
       00 00 10 00 
       00 00 01 00 
       94 38 04 1C 
       02 00       
042B7A 01 00 00 10 0030*  	dl 1, 16, 16, 256, fn_dg_029, 541
       00 00 10 00 
       00 00 01 00 
       A9 38 04 1D 
       02 00       
042B8C 01 00 00 10 0031*  	dl 1, 16, 16, 256, fn_dg_030, 542
       00 00 10 00 
       00 00 01 00 
       BE 38 04 1E 
       02 00       
042B9E 01 00 00 10 0032*  	dl 1, 16, 16, 256, fn_dg_031, 543
       00 00 10 00 
       00 00 01 00 
       D3 38 04 1F 
       02 00       
042BB0 01 00 00 10 0033*  	dl 1, 16, 16, 256, fn_dg_032, 544
       00 00 10 00 
       00 00 01 00 
       E8 38 04 20 
       02 00       
042BC2 01 00 00 10 0034*  	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       FD 38 04 21 
       02 00       
042BD4 01 00 00 10 0035*  	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       12 39 04 22 
       02 00       
042BE6 01 00 00 10 0036*  	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       27 39 04 23 
       02 00       
042BF8 01 00 00 10 0037*  	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       3C 39 04 24 
       02 00       
042C0A 01 00 00 10 0038*  	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       51 39 04 25 
       02 00       
042C1C 01 00 00 10 0039*  	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       66 39 04 26 
       02 00       
042C2E 01 00 00 10 0040*  	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       7B 39 04 27 
       02 00       
042C40 01 00 00 10 0041*  	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       90 39 04 28 
       02 00       
042C52 01 00 00 10 0042*  	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       A5 39 04 31 
       02 00       
042C64 01 00 00 10 0043*  	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       BA 39 04 32 
       02 00       
042C76 01 00 00 10 0044*  	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       CF 39 04 33 
       02 00       
042C88 01 00 00 10 0045*  	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       E4 39 04 34 
       02 00       
042C9A 01 00 00 10 0046*  	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       F9 39 04 35 
       02 00       
042CAC 01 00 00 10 0047*  	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       0E 3A 04 36 
       02 00       
042CBE 01 00 00 10 0048*  	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       23 3A 04 37 
       02 00       
042CD0 01 00 00 10 0049*  	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       38 3A 04 38 
       02 00       
042CE2 01 00 00 10 0050*  	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       4D 3A 04 39 
       02 00       
042CF4 01 00 00 10 0051*  	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       62 3A 04 3A 
       02 00       
042D06 01 00 00 10 0052*  	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       77 3A 04 3B 
       02 00       
042D18 01 00 00 10 0053*  	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       8C 3A 04 41 
       02 00       
042D2A 01 00 00 10 0054*  	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       A1 3A 04 42 
       02 00       
042D3C 01 00 00 10 0055*  	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       B6 3A 04 43 
       02 00       
042D4E 01 00 00 10 0056*  	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       CB 3A 04 44 
       02 00       
042D60 01 00 00 10 0057*  	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       E0 3A 04 45 
       02 00       
042D72 01 00 00 10 0058*  	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       F5 3A 04 46 
       02 00       
042D84 01 00 00 10 0059*  	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       0A 3B 04 47 
       02 00       
042D96 01 00 00 10 0060*  	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       1F 3B 04 48 
       02 00       
042DA8 01 00 00 10 0061*  	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       34 3B 04 49 
       02 00       
042DBA 01 00 00 10 0062*  	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       49 3B 04 4A 
       02 00       
042DCC 01 00 00 10 0063*  	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       5E 3B 04 4B 
       02 00       
042DDE 01 00 00 10 0064*  	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       73 3B 04 51 
       02 00       
042DF0 01 00 00 10 0065*  	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       88 3B 04 52 
       02 00       
042E02 01 00 00 10 0066*  	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       9D 3B 04 53 
       02 00       
042E14 01 00 00 10 0067*  	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       B2 3B 04 54 
       02 00       
042E26 01 00 00 10 0068*  	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       C7 3B 04 55 
       02 00       
042E38 01 00 00 10 0069*  	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       DC 3B 04 56 
       02 00       
042E4A 01 00 00 10 0070*  	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       F1 3B 04 57 
       02 00       
042E5C 01 00 00 10 0071*  	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       06 3C 04 58 
       02 00       
042E6E 01 00 00 10 0072*  	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       1B 3C 04 59 
       02 00       
042E80 01 00 00 10 0073*  	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       30 3C 04 5A 
       02 00       
042E92 01 00 00 10 0074*  	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       45 3C 04 5B 
       02 00       
042EA4 01 00 00 10 0075*  	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       5A 3C 04 61 
       02 00       
042EB6 01 00 00 10 0076*  	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       6F 3C 04 62 
       02 00       
042EC8 01 00 00 10 0077*  	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       84 3C 04 63 
       02 00       
042EDA 01 00 00 10 0078*  	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       99 3C 04 64 
       02 00       
042EEC 01 00 00 10 0079*  	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       AE 3C 04 65 
       02 00       
042EFE 01 00 00 10 0080*  	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       C3 3C 04 66 
       02 00       
042F10 01 00 00 10 0081*  	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       D8 3C 04 67 
       02 00       
042F22 01 00 00 10 0082*  	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       ED 3C 04 68 
       02 00       
042F34 01 00 00 10 0083*  	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       02 3D 04 69 
       02 00       
042F46 01 00 00 10 0084*  	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       17 3D 04 6A 
       02 00       
042F58 01 00 00 10 0085*  	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       2C 3D 04 6B 
       02 00       
042F6A 01 00 00 10 0086*  	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       41 3D 04 6C 
       02 00       
042F7C 01 00 00 10 0087*  	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       56 3D 04 71 
       02 00       
042F8E 01 00 00 10 0088*  	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       6B 3D 04 72 
       02 00       
042FA0 01 00 00 10 0089*  	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       80 3D 04 73 
       02 00       
042FB2 01 00 00 10 0090*  	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       95 3D 04 74 
       02 00       
042FC4 01 00 00 10 0091*  	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       AA 3D 04 75 
       02 00       
042FD6 01 00 00 10 0092*  	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       BF 3D 04 76 
       02 00       
042FE8 01 00 00 10 0093*  	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       D4 3D 04 77 
       02 00       
042FFA 01 00 00 10 0094*  	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       E9 3D 04 78 
       02 00       
04300C 01 00 00 10 0095*  	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       FE 3D 04 79 
       02 00       
04301E 01 00 00 10 0096*  	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       13 3E 04 7A 
       02 00       
043030 01 00 00 10 0097*  	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       28 3E 04 7B 
       02 00       
043042 01 00 00 10 0098*  	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       3D 3E 04 81 
       02 00       
043054 01 00 00 10 0099*  	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       52 3E 04 82 
       02 00       
043066 01 00 00 10 0100*  	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       67 3E 04 83 
       02 00       
043078 01 00 00 10 0101*  	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       7C 3E 04 84 
       02 00       
04308A 01 00 00 10 0102*  	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       91 3E 04 85 
       02 00       
04309C 01 00 00 10 0103*  	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       A6 3E 04 86 
       02 00       
0430AE 01 00 00 10 0104*  	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       BB 3E 04 87 
       02 00       
0430C0 01 00 00 10 0105*  	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       D0 3E 04 88 
       02 00       
0430D2 01 00 00 10 0106*  	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       E5 3E 04 89 
       02 00       
0430E4 01 00 00 10 0107*  	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       FA 3E 04 8A 
       02 00       
0430F6 01 00 00 10 0108*  	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       0F 3F 04 8B 
       02 00       
043108 01 00 00 10 0109*  	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       24 3F 04 8C 
       02 00       
04311A 01 00 00 10 0110*  	dl 1, 16, 16, 256, fn_dg_141, 653
       00 00 10 00 
       00 00 01 00 
       39 3F 04 8D 
       02 00       
04312C 01 00 00 10 0111*  	dl 1, 16, 16, 256, fn_dg_142, 654
       00 00 10 00 
       00 00 01 00 
       4E 3F 04 8E 
       02 00       
04313E 01 00 00 10 0112*  	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       63 3F 04 91 
       02 00       
043150 01 00 00 10 0113*  	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       78 3F 04 92 
       02 00       
043162 01 00 00 10 0114*  	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       8D 3F 04 93 
       02 00       
043174 01 00 00 10 0115*  	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       A2 3F 04 94 
       02 00       
043186 01 00 00 10 0116*  	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       B7 3F 04 95 
       02 00       
043198 01 00 00 10 0117*  	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       CC 3F 04 96 
       02 00       
0431AA 01 00 00 10 0118*  	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       E1 3F 04 97 
       02 00       
0431BC 01 00 00 10 0119*  	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       F6 3F 04 98 
       02 00       
0431CE 01 00 00 10 0120*  	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       0B 40 04 99 
       02 00       
0431E0 01 00 00 10 0121*  	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       20 40 04 9A 
       02 00       
0431F2 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       35 40 04 9B 
       02 00       
043204 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       4A 40 04 9C 
       02 00       
043216 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_dg_157, 669
       00 00 10 00 
       00 00 01 00 
       5F 40 04 9D 
       02 00       
043228 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_dg_158, 670
       00 00 10 00 
       00 00 01 00 
       74 40 04 9E 
       02 00       
04323A 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       89 40 04 A1 
       02 00       
04324C 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       9E 40 04 A2 
       02 00       
04325E 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       B3 40 04 A3 
       02 00       
043270 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       C8 40 04 A4 
       02 00       
043282 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       DD 40 04 A5 
       02 00       
043294 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       F2 40 04 A6 
       02 00       
0432A6 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       07 41 04 A7 
       02 00       
0432B8 01 00 00 10 0133*  	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       1C 41 04 A8 
       02 00       
0432CA 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       31 41 04 A9 
       02 00       
0432DC 01 00 00 10 0135*  	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       46 41 04 AA 
       02 00       
0432EE 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       5B 41 04 AB 
       02 00       
043300 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       70 41 04 AC 
       02 00       
043312 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       85 41 04 B1 
       02 00       
043324 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       9A 41 04 B2 
       02 00       
043336 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       AF 41 04 B3 
       02 00       
043348 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       C4 41 04 B4 
       02 00       
04335A 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       D9 41 04 B5 
       02 00       
04336C 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       EE 41 04 B6 
       02 00       
04337E 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       03 42 04 B7 
       02 00       
043390 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       18 42 04 B8 
       02 00       
0433A2 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       2D 42 04 B9 
       02 00       
0433B4 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       42 42 04 BA 
       02 00       
0433C6 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       57 42 04 BB 
       02 00       
0433D8 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       6C 42 04 BC 
       02 00       
0433EA 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       81 42 04 C1 
       02 00       
0433FC 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       96 42 04 C2 
       02 00       
04340E 01 00 00 10 0152*  	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       AB 42 04 C3 
       02 00       
043420 01 00 00 10 0153*  	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       C0 42 04 C4 
       02 00       
043432 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       D5 42 04 C5 
       02 00       
043444 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       EA 42 04 C6 
       02 00       
043456 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       FF 42 04 C7 
       02 00       
043468 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       14 43 04 C8 
       02 00       
04347A 01 00 00 10 0158*  	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       29 43 04 C9 
       02 00       
04348C 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       3E 43 04 CA 
       02 00       
04349E 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       53 43 04 CB 
       02 00       
0434B0 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       68 43 04 CC 
       02 00       
0434C2 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       7D 43 04 D1 
       02 00       
0434D4 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       92 43 04 D2 
       02 00       
0434E6 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       A7 43 04 D3 
       02 00       
0434F8 01 00 00 10 0165*  	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       BC 43 04 D4 
       02 00       
04350A 01 00 00 10 0166*  	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       D1 43 04 D5 
       02 00       
04351C 01 00 00 10 0167*  	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       E6 43 04 D6 
       02 00       
04352E 01 00 00 10 0168*  	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       FB 43 04 D7 
       02 00       
043540 01 00 00 10 0169*  	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       10 44 04 D8 
       02 00       
043552 01 00 00 10 0170*  	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       25 44 04 D9 
       02 00       
043564 01 00 00 10 0171*  	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       3A 44 04 DA 
       02 00       
043576 01 00 00 10 0172*  	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       4F 44 04 DB 
       02 00       
043588 01 00 00 10 0173*  	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       64 44 04 DC 
       02 00       
04359A 01 00 00 10 0174*  	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       79 44 04 E1 
       02 00       
0435AC 01 00 00 10 0175*  	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       8E 44 04 E2 
       02 00       
0435BE 01 00 00 10 0176*  	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       A3 44 04 E3 
       02 00       
0435D0 01 00 00 10 0177*  	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       B8 44 04 E4 
       02 00       
0435E2 01 00 00 10 0178*  	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       CD 44 04 E5 
       02 00       
0435F4 01 00 00 10 0179*  	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       E2 44 04 E6 
       02 00       
043606 01 00 00 10 0180*  	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       F7 44 04 E7 
       02 00       
043618 01 00 00 10 0181*  	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       0C 45 04 E8 
       02 00       
04362A 01 00 00 10 0182*  	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       21 45 04 E9 
       02 00       
04363C 01 00 00 10 0183*  	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       36 45 04 EA 
       02 00       
04364E 01 00 00 10 0184*  	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       4B 45 04 EB 
       02 00       
043660 01 00 00 10 0185*  	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       60 45 04 EC 
       02 00       
043672 01 00 00 10 0186*  	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       75 45 04 F1 
       02 00       
043684 01 00 00 10 0187*  	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       8A 45 04 F2 
       02 00       
043696 01 00 00 10 0188*  	dl 1, 16, 16, 256, fn_dg_243, 755
       00 00 10 00 
       00 00 01 00 
       9F 45 04 F3 
       02 00       
0436A8 01 00 00 10 0189*  	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       B4 45 04 F5 
       02 00       
0436BA 01 00 00 10 0190*  	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       C9 45 04 F6 
       02 00       
0436CC 01 00 00 10 0191*  	dl 1, 16, 16, 256, fn_dg_247, 759
       00 00 10 00 
       00 00 01 00 
       DE 45 04 F7 
       02 00       
0436DE 01 00 00 10 0192*  	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       F3 45 04 F8 
       02 00       
0436F0             0193*  
0436F0             0194*  tiles_dg_files_list: ; filename:
0436F0 74 69 6C 65 0195*  fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
043705 74 69 6C 65 0196*  fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
04371A 74 69 6C 65 0197*  fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
04372F 74 69 6C 65 0198*  fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
043744 74 69 6C 65 0199*  fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
043759 74 69 6C 65 0200*  fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
04376E 74 69 6C 65 0201*  fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
043783 74 69 6C 65 0202*  fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
043798 74 69 6C 65 0203*  fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0437AD 74 69 6C 65 0204*  fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
0437C2 74 69 6C 65 0205*  fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
0437D7 74 69 6C 65 0206*  fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
0437EC 74 69 6C 65 0207*  fn_dg_012: db "tiles/dg/0/012.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 32 2E 72 
       67 62 61 32 
       00          
043801 74 69 6C 65 0208*  fn_dg_013: db "tiles/dg/0/013.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 33 2E 72 
       67 62 61 32 
       00          
043816 74 69 6C 65 0209*  fn_dg_014: db "tiles/dg/0/014.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 34 2E 72 
       67 62 61 32 
       00          
04382B 74 69 6C 65 0210*  fn_dg_015: db "tiles/dg/0/015.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 35 2E 72 
       67 62 61 32 
       00          
043840 74 69 6C 65 0211*  fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
043855 74 69 6C 65 0212*  fn_dg_025: db "tiles/dg/0/025.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 35 2E 72 
       67 62 61 32 
       00          
04386A 74 69 6C 65 0213*  fn_dg_026: db "tiles/dg/0/026.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 36 2E 72 
       67 62 61 32 
       00          
04387F 74 69 6C 65 0214*  fn_dg_027: db "tiles/dg/0/027.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 37 2E 72 
       67 62 61 32 
       00          
043894 74 69 6C 65 0215*  fn_dg_028: db "tiles/dg/0/028.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 38 2E 72 
       67 62 61 32 
       00          
0438A9 74 69 6C 65 0216*  fn_dg_029: db "tiles/dg/0/029.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       32 39 2E 72 
       67 62 61 32 
       00          
0438BE 74 69 6C 65 0217*  fn_dg_030: db "tiles/dg/0/030.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 30 2E 72 
       67 62 61 32 
       00          
0438D3 74 69 6C 65 0218*  fn_dg_031: db "tiles/dg/0/031.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 31 2E 72 
       67 62 61 32 
       00          
0438E8 74 69 6C 65 0219*  fn_dg_032: db "tiles/dg/0/032.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0438FD 74 69 6C 65 0220*  fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
043912 74 69 6C 65 0221*  fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
043927 74 69 6C 65 0222*  fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
04393C 74 69 6C 65 0223*  fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
043951 74 69 6C 65 0224*  fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
043966 74 69 6C 65 0225*  fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
04397B 74 69 6C 65 0226*  fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
043990 74 69 6C 65 0227*  fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0439A5 74 69 6C 65 0228*  fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
0439BA 74 69 6C 65 0229*  fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
0439CF 74 69 6C 65 0230*  fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
0439E4 74 69 6C 65 0231*  fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
0439F9 74 69 6C 65 0232*  fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
043A0E 74 69 6C 65 0233*  fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
043A23 74 69 6C 65 0234*  fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
043A38 74 69 6C 65 0235*  fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
043A4D 74 69 6C 65 0236*  fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
043A62 74 69 6C 65 0237*  fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
043A77 74 69 6C 65 0238*  fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
043A8C 74 69 6C 65 0239*  fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
043AA1 74 69 6C 65 0240*  fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
043AB6 74 69 6C 65 0241*  fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
043ACB 74 69 6C 65 0242*  fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
043AE0 74 69 6C 65 0243*  fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
043AF5 74 69 6C 65 0244*  fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
043B0A 74 69 6C 65 0245*  fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
043B1F 74 69 6C 65 0246*  fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
043B34 74 69 6C 65 0247*  fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
043B49 74 69 6C 65 0248*  fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
043B5E 74 69 6C 65 0249*  fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
043B73 74 69 6C 65 0250*  fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
043B88 74 69 6C 65 0251*  fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
043B9D 74 69 6C 65 0252*  fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
043BB2 74 69 6C 65 0253*  fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
043BC7 74 69 6C 65 0254*  fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
043BDC 74 69 6C 65 0255*  fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
043BF1 74 69 6C 65 0256*  fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
043C06 74 69 6C 65 0257*  fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
043C1B 74 69 6C 65 0258*  fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
043C30 74 69 6C 65 0259*  fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
043C45 74 69 6C 65 0260*  fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
043C5A 74 69 6C 65 0261*  fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
043C6F 74 69 6C 65 0262*  fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
043C84 74 69 6C 65 0263*  fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
043C99 74 69 6C 65 0264*  fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
043CAE 74 69 6C 65 0265*  fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
043CC3 74 69 6C 65 0266*  fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
043CD8 74 69 6C 65 0267*  fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
043CED 74 69 6C 65 0268*  fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
043D02 74 69 6C 65 0269*  fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
043D17 74 69 6C 65 0270*  fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
043D2C 74 69 6C 65 0271*  fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
043D41 74 69 6C 65 0272*  fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
043D56 74 69 6C 65 0273*  fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
043D6B 74 69 6C 65 0274*  fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
043D80 74 69 6C 65 0275*  fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
043D95 74 69 6C 65 0276*  fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
043DAA 74 69 6C 65 0277*  fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
043DBF 74 69 6C 65 0278*  fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
043DD4 74 69 6C 65 0279*  fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
043DE9 74 69 6C 65 0280*  fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
043DFE 74 69 6C 65 0281*  fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
043E13 74 69 6C 65 0282*  fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
043E28 74 69 6C 65 0283*  fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
043E3D 74 69 6C 65 0284*  fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
043E52 74 69 6C 65 0285*  fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
043E67 74 69 6C 65 0286*  fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
043E7C 74 69 6C 65 0287*  fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
043E91 74 69 6C 65 0288*  fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
043EA6 74 69 6C 65 0289*  fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
043EBB 74 69 6C 65 0290*  fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
043ED0 74 69 6C 65 0291*  fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
043EE5 74 69 6C 65 0292*  fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
043EFA 74 69 6C 65 0293*  fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
043F0F 74 69 6C 65 0294*  fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
043F24 74 69 6C 65 0295*  fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
043F39 74 69 6C 65 0296*  fn_dg_141: db "tiles/dg/0/141.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 31 2E 72 
       67 62 61 32 
       00          
043F4E 74 69 6C 65 0297*  fn_dg_142: db "tiles/dg/0/142.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 32 2E 72 
       67 62 61 32 
       00          
043F63 74 69 6C 65 0298*  fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
043F78 74 69 6C 65 0299*  fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
043F8D 74 69 6C 65 0300*  fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
043FA2 74 69 6C 65 0301*  fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
043FB7 74 69 6C 65 0302*  fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
043FCC 74 69 6C 65 0303*  fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
043FE1 74 69 6C 65 0304*  fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
043FF6 74 69 6C 65 0305*  fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
04400B 74 69 6C 65 0306*  fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
044020 74 69 6C 65 0307*  fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
044035 74 69 6C 65 0308*  fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
04404A 74 69 6C 65 0309*  fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
04405F 74 69 6C 65 0310*  fn_dg_157: db "tiles/dg/0/157.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 37 2E 72 
       67 62 61 32 
       00          
044074 74 69 6C 65 0311*  fn_dg_158: db "tiles/dg/0/158.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 38 2E 72 
       67 62 61 32 
       00          
044089 74 69 6C 65 0312*  fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
04409E 74 69 6C 65 0313*  fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
0440B3 74 69 6C 65 0314*  fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
0440C8 74 69 6C 65 0315*  fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
0440DD 74 69 6C 65 0316*  fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
0440F2 74 69 6C 65 0317*  fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
044107 74 69 6C 65 0318*  fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
04411C 74 69 6C 65 0319*  fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044131 74 69 6C 65 0320*  fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
044146 74 69 6C 65 0321*  fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
04415B 74 69 6C 65 0322*  fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
044170 74 69 6C 65 0323*  fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
044185 74 69 6C 65 0324*  fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
04419A 74 69 6C 65 0325*  fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
0441AF 74 69 6C 65 0326*  fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
0441C4 74 69 6C 65 0327*  fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
0441D9 74 69 6C 65 0328*  fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
0441EE 74 69 6C 65 0329*  fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
044203 74 69 6C 65 0330*  fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
044218 74 69 6C 65 0331*  fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04422D 74 69 6C 65 0332*  fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
044242 74 69 6C 65 0333*  fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
044257 74 69 6C 65 0334*  fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
04426C 74 69 6C 65 0335*  fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
044281 74 69 6C 65 0336*  fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
044296 74 69 6C 65 0337*  fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
0442AB 74 69 6C 65 0338*  fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
0442C0 74 69 6C 65 0339*  fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
0442D5 74 69 6C 65 0340*  fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
0442EA 74 69 6C 65 0341*  fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
0442FF 74 69 6C 65 0342*  fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
044314 74 69 6C 65 0343*  fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
044329 74 69 6C 65 0344*  fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
04433E 74 69 6C 65 0345*  fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
044353 74 69 6C 65 0346*  fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
044368 74 69 6C 65 0347*  fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
04437D 74 69 6C 65 0348*  fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
044392 74 69 6C 65 0349*  fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
0443A7 74 69 6C 65 0350*  fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
0443BC 74 69 6C 65 0351*  fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
0443D1 74 69 6C 65 0352*  fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
0443E6 74 69 6C 65 0353*  fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
0443FB 74 69 6C 65 0354*  fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
044410 74 69 6C 65 0355*  fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
044425 74 69 6C 65 0356*  fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
04443A 74 69 6C 65 0357*  fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
04444F 74 69 6C 65 0358*  fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
044464 74 69 6C 65 0359*  fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
044479 74 69 6C 65 0360*  fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
04448E 74 69 6C 65 0361*  fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
0444A3 74 69 6C 65 0362*  fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
0444B8 74 69 6C 65 0363*  fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
0444CD 74 69 6C 65 0364*  fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
0444E2 74 69 6C 65 0365*  fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
0444F7 74 69 6C 65 0366*  fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
04450C 74 69 6C 65 0367*  fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044521 74 69 6C 65 0368*  fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
044536 74 69 6C 65 0369*  fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
04454B 74 69 6C 65 0370*  fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
044560 74 69 6C 65 0371*  fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
044575 74 69 6C 65 0372*  fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
04458A 74 69 6C 65 0373*  fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
04459F 74 69 6C 65 0374*  fn_dg_243: db "tiles/dg/0/243.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 33 2E 72 
       67 62 61 32 
       00          
0445B4 74 69 6C 65 0375*  fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
0445C9 74 69 6C 65 0376*  fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
0445DE 74 69 6C 65 0377*  fn_dg_247: db "tiles/dg/0/247.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 37 2E 72 
       67 62 61 32 
       00          
0445F3 74 69 6C 65 0378*  fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044608             0051       ; include "images_tiles_xevious.inc"
044608             0052       include "images_sprites.inc"
044608 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
044700             0002*  
044700             0003*  ; Generated by make_images.py
044700             0004*  
044700             0005*  sprites_num_images: equ 79
044700             0006*  
044700             0007*  ; buffer_ids:
044700             0008*  BUF_CRATER: equ 256
044700             0009*  BUF_EXPLOSION_A: equ 257
044700             0010*  BUF_EXPLOSION_B: equ 258
044700             0011*  BUF_EXPLOSION_C: equ 259
044700             0012*  BUF_EXPLOSION_D: equ 260
044700             0013*  BUF_EXPLOSION_E: equ 261
044700             0014*  BUF_FIREBALL_A: equ 262
044700             0015*  BUF_FIREBALL_B: equ 263
044700             0016*  BUF_LASER_A: equ 264
044700             0017*  BUF_LASER_B: equ 265
044700             0018*  BUF_PAD: equ 266
044700             0019*  BUF_SEEKER_000: equ 267
044700             0020*  BUF_SEEKER_008: equ 268
044700             0021*  BUF_SEEKER_016: equ 269
044700             0022*  BUF_SEEKER_024: equ 270
044700             0023*  BUF_SEEKER_032: equ 271
044700             0024*  BUF_SEEKER_040: equ 272
044700             0025*  BUF_SEEKER_048: equ 273
044700             0026*  BUF_SEEKER_056: equ 274
044700             0027*  BUF_SEEKER_064: equ 275
044700             0028*  BUF_SEEKER_072: equ 276
044700             0029*  BUF_SEEKER_080: equ 277
044700             0030*  BUF_SEEKER_088: equ 278
044700             0031*  BUF_SEEKER_096: equ 279
044700             0032*  BUF_SEEKER_104: equ 280
044700             0033*  BUF_SEEKER_112: equ 281
044700             0034*  BUF_SEEKER_120: equ 282
044700             0035*  BUF_SEEKER_128: equ 283
044700             0036*  BUF_SEEKER_136: equ 284
044700             0037*  BUF_SEEKER_144: equ 285
044700             0038*  BUF_SEEKER_152: equ 286
044700             0039*  BUF_SEEKER_160: equ 287
044700             0040*  BUF_SEEKER_168: equ 288
044700             0041*  BUF_SEEKER_176: equ 289
044700             0042*  BUF_SEEKER_184: equ 290
044700             0043*  BUF_SEEKER_192: equ 291
044700             0044*  BUF_SEEKER_200: equ 292
044700             0045*  BUF_SEEKER_208: equ 293
044700             0046*  BUF_SEEKER_216: equ 294
044700             0047*  BUF_SEEKER_224: equ 295
044700             0048*  BUF_SEEKER_232: equ 296
044700             0049*  BUF_SEEKER_240: equ 297
044700             0050*  BUF_SEEKER_248: equ 298
044700             0051*  BUF_SHIP_0L: equ 299
044700             0052*  BUF_SHIP_1C: equ 300
044700             0053*  BUF_SHIP_2R: equ 301
044700             0054*  BUF_SHIP_SMALL: equ 302
044700             0055*  BUF_TURRET_000: equ 303
044700             0056*  BUF_TURRET_008: equ 304
044700             0057*  BUF_TURRET_016: equ 305
044700             0058*  BUF_TURRET_024: equ 306
044700             0059*  BUF_TURRET_032: equ 307
044700             0060*  BUF_TURRET_040: equ 308
044700             0061*  BUF_TURRET_048: equ 309
044700             0062*  BUF_TURRET_056: equ 310
044700             0063*  BUF_TURRET_064: equ 311
044700             0064*  BUF_TURRET_072: equ 312
044700             0065*  BUF_TURRET_080: equ 313
044700             0066*  BUF_TURRET_088: equ 314
044700             0067*  BUF_TURRET_096: equ 315
044700             0068*  BUF_TURRET_104: equ 316
044700             0069*  BUF_TURRET_112: equ 317
044700             0070*  BUF_TURRET_120: equ 318
044700             0071*  BUF_TURRET_128: equ 319
044700             0072*  BUF_TURRET_136: equ 320
044700             0073*  BUF_TURRET_144: equ 321
044700             0074*  BUF_TURRET_152: equ 322
044700             0075*  BUF_TURRET_160: equ 323
044700             0076*  BUF_TURRET_168: equ 324
044700             0077*  BUF_TURRET_176: equ 325
044700             0078*  BUF_TURRET_184: equ 326
044700             0079*  BUF_TURRET_192: equ 327
044700             0080*  BUF_TURRET_200: equ 328
044700             0081*  BUF_TURRET_208: equ 329
044700             0082*  BUF_TURRET_216: equ 330
044700             0083*  BUF_TURRET_224: equ 331
044700             0084*  BUF_TURRET_232: equ 332
044700             0085*  BUF_TURRET_240: equ 333
044700             0086*  BUF_TURRET_248: equ 334
044700             0087*  
044700             0088*  sprites_image_list: ; type; width; height; size; filename; bufferId:
044700 01 00 00 10 0089*  	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       8E 4C 04 00 
       01 00       
044712 01 00 00 10 0090*  	dl 1, 16, 16, 256, fn_explosion_a, 257
       00 00 10 00 
       00 00 01 00 
       A3 4C 04 01 
       01 00       
044724 01 00 00 10 0091*  	dl 1, 16, 16, 256, fn_explosion_b, 258
       00 00 10 00 
       00 00 01 00 
       BD 4C 04 02 
       01 00       
044736 01 00 00 10 0092*  	dl 1, 16, 16, 256, fn_explosion_c, 259
       00 00 10 00 
       00 00 01 00 
       D7 4C 04 03 
       01 00       
044748 01 00 00 10 0093*  	dl 1, 16, 16, 256, fn_explosion_d, 260
       00 00 10 00 
       00 00 01 00 
       F1 4C 04 04 
       01 00       
04475A 01 00 00 10 0094*  	dl 1, 16, 16, 256, fn_explosion_e, 261
       00 00 10 00 
       00 00 01 00 
       0B 4D 04 05 
       01 00       
04476C 01 00 00 07 0095*  	dl 1, 7, 7, 49, fn_fireball_a, 262
       00 00 07 00 
       00 31 00 00 
       25 4D 04 06 
       01 00       
04477E 01 00 00 07 0096*  	dl 1, 7, 7, 49, fn_fireball_b, 263
       00 00 07 00 
       00 31 00 00 
       3E 4D 04 07 
       01 00       
044790 01 00 00 05 0097*  	dl 1, 5, 13, 65, fn_laser_a, 264
       00 00 0D 00 
       00 41 00 00 
       57 4D 04 08 
       01 00       
0447A2 01 00 00 05 0098*  	dl 1, 5, 13, 65, fn_laser_b, 265
       00 00 0D 00 
       00 41 00 00 
       6D 4D 04 09 
       01 00       
0447B4 01 00 00 10 0099*  	dl 1, 16, 16, 256, fn_pad, 266
       00 00 10 00 
       00 00 01 00 
       83 4D 04 0A 
       01 00       
0447C6 01 00 00 10 0100*  	dl 1, 16, 16, 256, fn_seeker_000, 267
       00 00 10 00 
       00 00 01 00 
       95 4D 04 0B 
       01 00       
0447D8 01 00 00 10 0101*  	dl 1, 16, 16, 256, fn_seeker_008, 268
       00 00 10 00 
       00 00 01 00 
       AE 4D 04 0C 
       01 00       
0447EA 01 00 00 10 0102*  	dl 1, 16, 16, 256, fn_seeker_016, 269
       00 00 10 00 
       00 00 01 00 
       C7 4D 04 0D 
       01 00       
0447FC 01 00 00 10 0103*  	dl 1, 16, 16, 256, fn_seeker_024, 270
       00 00 10 00 
       00 00 01 00 
       E0 4D 04 0E 
       01 00       
04480E 01 00 00 10 0104*  	dl 1, 16, 16, 256, fn_seeker_032, 271
       00 00 10 00 
       00 00 01 00 
       F9 4D 04 0F 
       01 00       
044820 01 00 00 10 0105*  	dl 1, 16, 16, 256, fn_seeker_040, 272
       00 00 10 00 
       00 00 01 00 
       12 4E 04 10 
       01 00       
044832 01 00 00 10 0106*  	dl 1, 16, 16, 256, fn_seeker_048, 273
       00 00 10 00 
       00 00 01 00 
       2B 4E 04 11 
       01 00       
044844 01 00 00 10 0107*  	dl 1, 16, 16, 256, fn_seeker_056, 274
       00 00 10 00 
       00 00 01 00 
       44 4E 04 12 
       01 00       
044856 01 00 00 10 0108*  	dl 1, 16, 16, 256, fn_seeker_064, 275
       00 00 10 00 
       00 00 01 00 
       5D 4E 04 13 
       01 00       
044868 01 00 00 10 0109*  	dl 1, 16, 16, 256, fn_seeker_072, 276
       00 00 10 00 
       00 00 01 00 
       76 4E 04 14 
       01 00       
04487A 01 00 00 10 0110*  	dl 1, 16, 16, 256, fn_seeker_080, 277
       00 00 10 00 
       00 00 01 00 
       8F 4E 04 15 
       01 00       
04488C 01 00 00 10 0111*  	dl 1, 16, 16, 256, fn_seeker_088, 278
       00 00 10 00 
       00 00 01 00 
       A8 4E 04 16 
       01 00       
04489E 01 00 00 10 0112*  	dl 1, 16, 16, 256, fn_seeker_096, 279
       00 00 10 00 
       00 00 01 00 
       C1 4E 04 17 
       01 00       
0448B0 01 00 00 10 0113*  	dl 1, 16, 16, 256, fn_seeker_104, 280
       00 00 10 00 
       00 00 01 00 
       DA 4E 04 18 
       01 00       
0448C2 01 00 00 10 0114*  	dl 1, 16, 16, 256, fn_seeker_112, 281
       00 00 10 00 
       00 00 01 00 
       F3 4E 04 19 
       01 00       
0448D4 01 00 00 10 0115*  	dl 1, 16, 16, 256, fn_seeker_120, 282
       00 00 10 00 
       00 00 01 00 
       0C 4F 04 1A 
       01 00       
0448E6 01 00 00 10 0116*  	dl 1, 16, 16, 256, fn_seeker_128, 283
       00 00 10 00 
       00 00 01 00 
       25 4F 04 1B 
       01 00       
0448F8 01 00 00 10 0117*  	dl 1, 16, 16, 256, fn_seeker_136, 284
       00 00 10 00 
       00 00 01 00 
       3E 4F 04 1C 
       01 00       
04490A 01 00 00 10 0118*  	dl 1, 16, 16, 256, fn_seeker_144, 285
       00 00 10 00 
       00 00 01 00 
       57 4F 04 1D 
       01 00       
04491C 01 00 00 10 0119*  	dl 1, 16, 16, 256, fn_seeker_152, 286
       00 00 10 00 
       00 00 01 00 
       70 4F 04 1E 
       01 00       
04492E 01 00 00 10 0120*  	dl 1, 16, 16, 256, fn_seeker_160, 287
       00 00 10 00 
       00 00 01 00 
       89 4F 04 1F 
       01 00       
044940 01 00 00 10 0121*  	dl 1, 16, 16, 256, fn_seeker_168, 288
       00 00 10 00 
       00 00 01 00 
       A2 4F 04 20 
       01 00       
044952 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_seeker_176, 289
       00 00 10 00 
       00 00 01 00 
       BB 4F 04 21 
       01 00       
044964 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_seeker_184, 290
       00 00 10 00 
       00 00 01 00 
       D4 4F 04 22 
       01 00       
044976 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_seeker_192, 291
       00 00 10 00 
       00 00 01 00 
       ED 4F 04 23 
       01 00       
044988 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_seeker_200, 292
       00 00 10 00 
       00 00 01 00 
       06 50 04 24 
       01 00       
04499A 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_seeker_208, 293
       00 00 10 00 
       00 00 01 00 
       1F 50 04 25 
       01 00       
0449AC 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_seeker_216, 294
       00 00 10 00 
       00 00 01 00 
       38 50 04 26 
       01 00       
0449BE 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_seeker_224, 295
       00 00 10 00 
       00 00 01 00 
       51 50 04 27 
       01 00       
0449D0 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_seeker_232, 296
       00 00 10 00 
       00 00 01 00 
       6A 50 04 28 
       01 00       
0449E2 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_seeker_240, 297
       00 00 10 00 
       00 00 01 00 
       83 50 04 29 
       01 00       
0449F4 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_seeker_248, 298
       00 00 10 00 
       00 00 01 00 
       9C 50 04 2A 
       01 00       
044A06 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_ship_0l, 299
       00 00 10 00 
       00 00 01 00 
       B5 50 04 2B 
       01 00       
044A18 01 00 00 10 0133*  	dl 1, 16, 16, 256, fn_ship_1c, 300
       00 00 10 00 
       00 00 01 00 
       CB 50 04 2C 
       01 00       
044A2A 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_ship_2r, 301
       00 00 10 00 
       00 00 01 00 
       E1 50 04 2D 
       01 00       
044A3C 01 00 00 08 0135*  	dl 1, 8, 8, 64, fn_ship_small, 302
       00 00 08 00 
       00 40 00 00 
       F7 50 04 2E 
       01 00       
044A4E 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_turret_000, 303
       00 00 10 00 
       00 00 01 00 
       10 51 04 2F 
       01 00       
044A60 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_turret_008, 304
       00 00 10 00 
       00 00 01 00 
       29 51 04 30 
       01 00       
044A72 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_turret_016, 305
       00 00 10 00 
       00 00 01 00 
       42 51 04 31 
       01 00       
044A84 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_turret_024, 306
       00 00 10 00 
       00 00 01 00 
       5B 51 04 32 
       01 00       
044A96 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_turret_032, 307
       00 00 10 00 
       00 00 01 00 
       74 51 04 33 
       01 00       
044AA8 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_turret_040, 308
       00 00 10 00 
       00 00 01 00 
       8D 51 04 34 
       01 00       
044ABA 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_turret_048, 309
       00 00 10 00 
       00 00 01 00 
       A6 51 04 35 
       01 00       
044ACC 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_turret_056, 310
       00 00 10 00 
       00 00 01 00 
       BF 51 04 36 
       01 00       
044ADE 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_turret_064, 311
       00 00 10 00 
       00 00 01 00 
       D8 51 04 37 
       01 00       
044AF0 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_turret_072, 312
       00 00 10 00 
       00 00 01 00 
       F1 51 04 38 
       01 00       
044B02 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_turret_080, 313
       00 00 10 00 
       00 00 01 00 
       0A 52 04 39 
       01 00       
044B14 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_turret_088, 314
       00 00 10 00 
       00 00 01 00 
       23 52 04 3A 
       01 00       
044B26 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_turret_096, 315
       00 00 10 00 
       00 00 01 00 
       3C 52 04 3B 
       01 00       
044B38 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_turret_104, 316
       00 00 10 00 
       00 00 01 00 
       55 52 04 3C 
       01 00       
044B4A 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_turret_112, 317
       00 00 10 00 
       00 00 01 00 
       6E 52 04 3D 
       01 00       
044B5C 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_turret_120, 318
       00 00 10 00 
       00 00 01 00 
       87 52 04 3E 
       01 00       
044B6E 01 00 00 10 0152*  	dl 1, 16, 16, 256, fn_turret_128, 319
       00 00 10 00 
       00 00 01 00 
       A0 52 04 3F 
       01 00       
044B80 01 00 00 10 0153*  	dl 1, 16, 16, 256, fn_turret_136, 320
       00 00 10 00 
       00 00 01 00 
       B9 52 04 40 
       01 00       
044B92 01 00 00 10 0154*  	dl 1, 16, 16, 256, fn_turret_144, 321
       00 00 10 00 
       00 00 01 00 
       D2 52 04 41 
       01 00       
044BA4 01 00 00 10 0155*  	dl 1, 16, 16, 256, fn_turret_152, 322
       00 00 10 00 
       00 00 01 00 
       EB 52 04 42 
       01 00       
044BB6 01 00 00 10 0156*  	dl 1, 16, 16, 256, fn_turret_160, 323
       00 00 10 00 
       00 00 01 00 
       04 53 04 43 
       01 00       
044BC8 01 00 00 10 0157*  	dl 1, 16, 16, 256, fn_turret_168, 324
       00 00 10 00 
       00 00 01 00 
       1D 53 04 44 
       01 00       
044BDA 01 00 00 10 0158*  	dl 1, 16, 16, 256, fn_turret_176, 325
       00 00 10 00 
       00 00 01 00 
       36 53 04 45 
       01 00       
044BEC 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_turret_184, 326
       00 00 10 00 
       00 00 01 00 
       4F 53 04 46 
       01 00       
044BFE 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_turret_192, 327
       00 00 10 00 
       00 00 01 00 
       68 53 04 47 
       01 00       
044C10 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_turret_200, 328
       00 00 10 00 
       00 00 01 00 
       81 53 04 48 
       01 00       
044C22 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_turret_208, 329
       00 00 10 00 
       00 00 01 00 
       9A 53 04 49 
       01 00       
044C34 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_turret_216, 330
       00 00 10 00 
       00 00 01 00 
       B3 53 04 4A 
       01 00       
044C46 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_turret_224, 331
       00 00 10 00 
       00 00 01 00 
       CC 53 04 4B 
       01 00       
044C58 01 00 00 10 0165*  	dl 1, 16, 16, 256, fn_turret_232, 332
       00 00 10 00 
       00 00 01 00 
       E5 53 04 4C 
       01 00       
044C6A 01 00 00 10 0166*  	dl 1, 16, 16, 256, fn_turret_240, 333
       00 00 10 00 
       00 00 01 00 
       FE 53 04 4D 
       01 00       
044C7C 01 00 00 10 0167*  	dl 1, 16, 16, 256, fn_turret_248, 334
       00 00 10 00 
       00 00 01 00 
       17 54 04 4E 
       01 00       
044C8E             0168*  
044C8E             0169*  ; files_list: ; filename:
044C8E 73 70 72 69 0170*  fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
044CA3 73 70 72 69 0171*  fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
044CBD 73 70 72 69 0172*  fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
044CD7 73 70 72 69 0173*  fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
044CF1 73 70 72 69 0174*  fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
044D0B 73 70 72 69 0175*  fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
044D25 73 70 72 69 0176*  fn_fireball_a: db "sprites/fireball_a.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 61 2E 72 
       67 62 61 32 
       00          
044D3E 73 70 72 69 0177*  fn_fireball_b: db "sprites/fireball_b.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 62 2E 72 
       67 62 61 32 
       00          
044D57 73 70 72 69 0178*  fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
044D6D 73 70 72 69 0179*  fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
044D83 73 70 72 69 0180*  fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
044D95 73 70 72 69 0181*  fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044DAE 73 70 72 69 0182*  fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044DC7 73 70 72 69 0183*  fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044DE0 73 70 72 69 0184*  fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044DF9 73 70 72 69 0185*  fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044E12 73 70 72 69 0186*  fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044E2B 73 70 72 69 0187*  fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044E44 73 70 72 69 0188*  fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044E5D 73 70 72 69 0189*  fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044E76 73 70 72 69 0190*  fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044E8F 73 70 72 69 0191*  fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044EA8 73 70 72 69 0192*  fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044EC1 73 70 72 69 0193*  fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044EDA 73 70 72 69 0194*  fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044EF3 73 70 72 69 0195*  fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
044F0C 73 70 72 69 0196*  fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044F25 73 70 72 69 0197*  fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
044F3E 73 70 72 69 0198*  fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
044F57 73 70 72 69 0199*  fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044F70 73 70 72 69 0200*  fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
044F89 73 70 72 69 0201*  fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
044FA2 73 70 72 69 0202*  fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044FBB 73 70 72 69 0203*  fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044FD4 73 70 72 69 0204*  fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
044FED 73 70 72 69 0205*  fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045006 73 70 72 69 0206*  fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04501F 73 70 72 69 0207*  fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045038 73 70 72 69 0208*  fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045051 73 70 72 69 0209*  fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
04506A 73 70 72 69 0210*  fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045083 73 70 72 69 0211*  fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
04509C 73 70 72 69 0212*  fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0450B5 73 70 72 69 0213*  fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
0450CB 73 70 72 69 0214*  fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
0450E1 73 70 72 69 0215*  fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
0450F7 73 70 72 69 0216*  fn_ship_small: db "sprites/ship_small.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 73 6D 61 
       6C 6C 2E 72 
       67 62 61 32 
       00          
045110 73 70 72 69 0217*  fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
045129 73 70 72 69 0218*  fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045142 73 70 72 69 0219*  fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
04515B 73 70 72 69 0220*  fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045174 73 70 72 69 0221*  fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
04518D 73 70 72 69 0222*  fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0451A6 73 70 72 69 0223*  fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0451BF 73 70 72 69 0224*  fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0451D8 73 70 72 69 0225*  fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0451F1 73 70 72 69 0226*  fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
04520A 73 70 72 69 0227*  fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045223 73 70 72 69 0228*  fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
04523C 73 70 72 69 0229*  fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045255 73 70 72 69 0230*  fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04526E 73 70 72 69 0231*  fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045287 73 70 72 69 0232*  fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0452A0 73 70 72 69 0233*  fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0452B9 73 70 72 69 0234*  fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0452D2 73 70 72 69 0235*  fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0452EB 73 70 72 69 0236*  fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045304 73 70 72 69 0237*  fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04531D 73 70 72 69 0238*  fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045336 73 70 72 69 0239*  fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
04534F 73 70 72 69 0240*  fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045368 73 70 72 69 0241*  fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045381 73 70 72 69 0242*  fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04539A 73 70 72 69 0243*  fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0453B3 73 70 72 69 0244*  fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0453CC 73 70 72 69 0245*  fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0453E5 73 70 72 69 0246*  fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0453FE 73 70 72 69 0247*  fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045417 73 70 72 69 0248*  fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045430             0053       include "images_ui.inc"
045430 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
045500             0002*  
045500             0003*  ; Generated by make_images.py
045500             0004*  
045500             0005*  ui_num_images: equ 4
045500             0006*  
045500             0007*  ; buffer_ids:
045500             0008*  BUF_BEZEL_L: equ 0
045500             0009*  BUF_BEZEL_R: equ 1
045500             0010*  BUF_SPLASH_BG: equ 2
045500             0011*  BUF_SPLASH_LOGO: equ 3
045500             0012*  
045500             0013*  ui_image_list: ; type; width; height; size; filename; bufferId:
045500 01 00 00 80 0014*  	dl 1, 128, 384, 49152, fn_bezel_l, 0
       00 00 80 01 
       00 00 C0 00 
       48 55 04 00 
       00 00       
045512 01 00 00 80 0015*  	dl 1, 128, 384, 49152, fn_bezel_r, 1
       00 00 80 01 
       00 00 C0 00 
       59 55 04 01 
       00 00       
045524 01 00 00 40 0016*  	dl 1, 320, 240, 76800, fn_splash_bg, 2
       01 00 F0 00 
       00 00 2C 01 
       6A 55 04 02 
       00 00       
045536 01 00 00 40 0017*  	dl 1, 320, 240, 76800, fn_splash_logo, 3
       01 00 F0 00 
       00 00 2C 01 
       7D 55 04 03 
       00 00       
045548             0018*  
045548             0019*  ; files_list: ; filename:
045548 75 69 2F 62 0020*  fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
045559 75 69 2F 62 0021*  fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
04556A 75 69 2F 73 0022*  fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
04557D 75 69 2F 73 0023*  fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
045592             0054       include "laser.inc"
045592 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
045600             0002*  
045600             0003*  ; ##### LASER SPRITE PARAMETERS #####
045600             0004*  ; uses the same offsets from its table base as the main sprite table:
045600             0005*  laser_start_variables: ; label marking beginning of table
045600 11          0006*  laser_id:                db table_max_records+1 ; 1 bytes unique spriteId, zero-based
045601             0007*  ; sprite state variables
045601 00 00 00    0008*  laser_x:                 dl                   0 ; 3 bytes 16.8 fractional x position in pixels
045604 00 00 00    0009*  laser_y:                 dl                   0 ; 3 bytes 16.8 fractional y position in pixels
045607 00 00 00    0010*  laser_xvel:              dl                   0 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04560A 00 FA FF    0011*  laser_yvel:              dl              -6*256 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04560D 00 FA FF    0012*  laser_vel:               dl              -6*256 ; 3 bytes velocity px/frame (16.8 fixed)
045610 00 00 00    0013*  laser_heading:           dl                   0 ; 3 bytes sprite movement direction deg256 16.8 fixed
045613 00 00 00    0014*  laser_orientation:       dl                   0 ; 3 bytes orientation bits
045616             0015*  ; sprite definition variables
045616 00          0016*  laser_type:              db                   0 ; 1 bytes not currently used
045617 08 01 00    0017*  laser_base_bufferId:     dl         BUF_LASER_A ; 3 bytes bitmap bufferId
04561A 00 00 00    0018*  laser_move_program:      dl                   0 ; 3 bytes not currently used
04561D 00          0019*  laser_collisions:        db                   0 ; 1 bytes see collisions.inc constants for bit definitions
04561E 10          0020*  laser_dim_x:             db                  16 ; 1 bytes sprite width in pixels
04561F 10          0021*  laser_dim_y:             db                  16 ; 1 bytes sprite height in pixels
045620 01          0022*  laser_num_orientations:  db                   1 ; 1 bytes number of orientations for this sprite
045621 02          0023*  laser_num_animations:    db                   2 ; 1 bytes number of animations for this sprite
045622 01          0024*  laser_animation:         db                   1 ; 1 bytes current animation index, zero-based
045623 00          0025*  laser_animation_timer:   db                   0 ; 1 bytes when hits zero, draw next animation
045624 00          0026*  laser_move_timer:        db                   0 ; 1 bytes when zero, go to next move program, or step
045625 00          0027*  laser_move_step:         db                   0 ; 1 bytes stage in a move program sequence, varies
045626 00          0028*  laser_points:            db                   0 ; 1 bytes points awarded for killing this sprite type
045627 00          0029*  laser_shield_damage:     db                   0 ; 1 bytes shield points deducted for collision
045628 00          0030*  laser_frame:             db                   0 ; 1 bytes current animation frame
045629             0031*  laser_end_variables: ; for when we want to traverse this table in reverse
045629             0032*  laser_speed: equ -6*256 ; 6 pixels per frame 16.8 fixed
045629             0033*  laser_animation_timer_reset: equ 2 ; animate every two frames
045629             0034*  
045629             0035*  laser_control:
045629             0036*  ; point to laser sprite variables
045629 FD 21 00 56 0037*      ld iy,laser_start_variables
       04          
04562E FD 22 90 5E 0038*      ld (table_pointer),iy
       04          
045633             0039*  ; did laser just die?
045633 FD CB 1D 7E 0040*      bit sprite_just_died,(iy+sprite_collisions)
045637 C2 C0 56 04 0041*      jp nz,kill_laser
04563B             0042*  ; select laser sprite
04563B 3A 00 56 04 0043*      ld a,(laser_id)
04563F CD 00 20 04 0044*      call vdu_sprite_select
045643             0045*  ; update laser position
045643 CD 5B 5F 04 0046*      call move_sprite
045647             0047*  ; are we at top of screen?
045647 3A 94 5E 04 0048*      ld a,(sprite_screen_edge)
04564B E6 08       0049*      and collide_top
04564D C2 C0 56 04 0050*      jp nz,kill_laser
045651             0051*  ; check animation timer
045651 FD 35 23    0052*      dec (iy+sprite_animation_timer)
045654 C2 61 56 04 0053*      jp nz,@F
045658 3E 02       0054*      ld a,laser_animation_timer_reset
04565A FD 77 23    0055*      ld (iy+sprite_animation_timer),a
04565D CD 47 20 04 0056*      call vdu_sprite_next_frame
045661             0057*  @@: ; draw the sprite
045661 FD 07 01    0058*      ld bc,(iy+sprite_x)
045664 FD 17 04    0059*      ld de,(iy+sprite_y)
045667 CD CC 20 04 0060*      call vdu_sprite_move_abs168
04566B             0061*  ; return to caller
04566B C9          0062*      ret
04566C             0063*  ; end laser_control
04566C             0064*  
04566C             0065*  fire_laser:
04566C             0066*  ; point to laser sprite variables
04566C FD 21 00 56 0067*      ld iy,laser_start_variables
       04          
045671 FD 22 90 5E 0068*      ld (table_pointer),iy
       04          
045676             0069*  ; is laser already active?
045676 FD CB 1D 76 0070*      bit sprite_alive,(iy+sprite_collisions)
04567A C0          0071*      ret nz ; laser already active
04567B             0072*  ; otherwise,FIRE ZEE LASER!!1111
04567B             0073*  ; set laser status to active
04567B FD CB 1D F6 0074*      set sprite_alive,(iy+sprite_collisions)
04567F             0075*  ; initialize laser sprite parameters
04567F             0076*  ; x-coordinate
04567F DD 21 0A 5A 0077*      ld ix,player_start_variables
       04          
045684 DD 27 01    0078*      ld hl,(ix+sprite_x)
045687 11 00 05 00 0079*      ld de,5*256 ; horizontal center with player sprite
04568B 19          0080*      add hl,de
04568C FD 2F 01    0081*      ld (iy+sprite_x),hl
04568F             0082*  ; y-coordinate
04568F DD 27 04    0083*      ld hl,(ix+sprite_y)
045692 11 00 FA FF 0084*      ld de,-6*256 ; set laser y a few pixels above player
045696 FD 2F 04    0085*      ld (iy+sprite_y),hl
045699             0086*  ; set laser velocity
045699 21 00 FA FF 0087*      ld hl,laser_speed
04569D FD 2F 0A    0088*      ld (iy+sprite_yvel),hl
0456A0             0089*  ; set laser animation frame and timer
0456A0 AF          0090*      xor a ; first frame
0456A1 FD 77 28    0091*      ld (iy+sprite_frame),a
0456A4 3E 02       0092*      ld a,laser_animation_timer_reset
0456A6 FD 77 23    0093*      ld (iy+sprite_animation_timer),a
0456A9             0094*  ; plot the sprite and make it visible
0456A9 3A 00 56 04 0095*      ld a,(laser_id)
0456AD CD 00 20 04 0096*      call vdu_sprite_select
0456B1 FD 07 01    0097*      ld bc,(iy+sprite_x)
0456B4 FD 17 04    0098*      ld de,(iy+sprite_y)
0456B7 CD CC 20 04 0099*      call vdu_sprite_move_abs168
0456BB CD 76 20 04 0100*      call vdu_sprite_show
0456BF             0101*  ; return to caller
0456BF C9          0102*      ret
0456C0             0103*  ; end fire_laser
0456C0             0104*  
0456C0             0105*  kill_laser:
0456C0             0106*  ; update status to inactive
0456C0 AF          0107*      xor a ; zero out a
0456C1 32 1D 56 04 0108*      ld (laser_collisions),a
0456C5             0109*  ; hide the sprite
0456C5 3A 00 56 04 0110*      ld a,(laser_id)
0456C9 CD 00 20 04 0111*      call vdu_sprite_select
0456CD CD 84 20 04 0112*      call vdu_sprite_hide
0456D1 C9          0113*      ret
0456D2             0114*  ; end kill_laser
0456D2             0055       include "levels.inc"
0456D2 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
045700             0002*  
045700             0003*  ; tileset indices
045700             0004*  tiles_dg: equ 0
045700             0005*  ; tiles_xevious: equ 1
045700 00 00 00    0006*  tileset_ptr_idx: dl 0
045703             0007*  tileset_ptrs:
045703             0008*      ; dl tiles_xevious_levels
045703 CB 57 04    0009*      dl tileset_00_levels
045706 00 00 00    0010*  tileset_ptrs_end: dl 0 ; list terminator
045709             0011*  
045709             0012*  ; get a pointer to the current tileset
045709             0013*  ; inputs: tileset_ptr_idx
045709             0014*  ; returns: ix = pointer to tileset levels lut
045709             0015*  get_tileset_ptr:
045709 3A 00 57 04 0016*      ld a,(tileset_ptr_idx)
04570D 57          0017*      ld d,a ; d = tileset index
04570E 1E 03       0018*      ld e,3 ; three bytes per index record
045710 ED 5C       0019*      mlt de ; offset into tileset_ptrs lut
045712 DD 21 03 57 0020*      ld ix,tileset_ptrs
       04          
045717 DD 19       0021*      add ix,de ; ix = pointer to tileset_ptrs record
045719 C9          0022*      ret
04571A             0023*  ; end get_tileset_ptr
04571A             0024*  
04571A             0025*  ; intialize a tileset
04571A             0026*  ; inputs: a = index into tileset_ptrs
04571A             0027*  init_tileset:
04571A 32 00 57 04 0028*      ld (tileset_ptr_idx),a ; store new tileset index
04571E CD 09 57 04 0029*      call get_tileset_ptr ; ix = pointer to tileset_ptrs record
045722 DD 37 00    0030*      ld ix,(ix) ; ix = pointer to tileset levels lut
045725 DD 7E FF    0031*      ld a,(ix-1) ; number of levels in the tileset
045728 32 58 57 04 0032*      ld (num_levels),a
04572C AF          0033*      xor a ; reset current level to zero
04572D 32 57 57 04 0034*      ld (cur_level),a
045731 C3 89 57 04 0035*      jp init_level
045735             0036*  ; end init_tileset
045735             0037*  
045735             0038*  next_tileset:
045735 21 00 57 04 0039*      ld hl,tileset_ptr_idx
045739 34          0040*      inc (hl) ; bump to next index
04573A CD 09 57 04 0041*      call get_tileset_ptr ; ix = pointer to tileset_ptrs record
04573E DD 27 00    0042*      ld hl,(ix) ; ix = pointer to tileset levels lut
045741             0043*      sign_hlu ; check for list terminator (0)
045741 19          0001*M     add hl,de
045742 B7          0002*M     or a ; clear flags
045743 ED 52       0003*M     sbc hl,de
045745 C2 53 57 04 0044*      jp nz,@F ; not end of list
045749 3E FF       0045*      ld a,-1 ; will wrap around to zero on the next iteration
04574B 32 00 57 04 0046*      ld (tileset_ptr_idx),a
04574F C3 35 57 04 0047*      jp next_tileset ; try again
045753             0048*  @@:
045753 C3 1A 57 04 0049*      jp init_tileset
045757             0050*  ; end next_tileset
045757             0051*  
045757 00          0052*  cur_level: db 0
045758 00          0053*  num_levels: db 0
045759             0054*  
045759             0055*  ; get a pointer to the current level lookup record
045759             0056*  ; inputs: tileset_ptr_idx, cur_level
045759             0057*  ; returns: ix = pointer to level definition
045759             0058*  get_level_ptr:
045759 CD 09 57 04 0059*      call get_tileset_ptr
04575D DD 37 00    0060*      ld ix,(ix) ; ix = pointer to tileset levels lut
045760 3A 57 57 04 0061*      ld a,(cur_level)
045764 57          0062*      ld d,a ; d = level index
045765 1E 03       0063*      ld e,3 ; three bytes per level record
045767 ED 5C       0064*      mlt de ; offset into tileset levels lut
045769 DD 19       0065*      add ix,de ; ix = pointer to level record
04576B C9          0066*      ret
04576C             0067*  ; end get_level_ptr
04576C             0068*  
04576C             0069*  ; advance to the next level in the current tileset
04576C             0070*  ; inputs: tileset_ptr_idx, cur_level
04576C             0071*  next_level:
04576C 21 57 57 04 0072*      ld hl,cur_level
045770 34          0073*      inc (hl) ; bump to next level
045771 CD 59 57 04 0074*      call get_level_ptr ; ix points to current level lookup record
045775 DD 27 00    0075*      ld hl,(ix) ; hl = pointer to next level lookup record
045778             0076*      sign_hlu ; check for list terminator (0)
045778 19          0001*M     add hl,de
045779 B7          0002*M     or a ; clear flags
04577A ED 52       0003*M     sbc hl,de
04577C C2 89 57 04 0077*      jp nz,@F ; not end of list
045780 AF          0078*      xor a ; reset level to zero
045781 32 57 57 04 0079*      ld (cur_level),a
045785 C3 35 57 04 0080*      jp next_tileset ; try next tileset
045789             0081*  @@: ; fall through to init_level
045789             0082*  ; end next_level
045789             0083*  
045789             0084*  ; inputs: ix pointed to tileset level definition
045789             0085*  init_level:
045789 CD 59 57 04 0086*      call get_level_ptr ; ix points to level lookup record
04578D DD 37 00    0087*      ld ix,(ix) ; ix points to level definition
045790             0088*  ; set tiles_cols
045790 DD 7E 00    0089*      ld a,(ix+0)
045793 32 06 66 04 0090*      ld (tiles_cols),a
045797             0091*  ; set tiles_row counter
045797 DD 7E 01    0092*      ld a,(ix+1)
04579A 32 03 66 04 0093*      ld (tiles_row),a
04579E             0094*  ; set cur_baseBufferId
04579E DD 27 04    0095*      ld hl,(ix+4)
0457A1 22 07 66 04 0096*      ld (cur_baseBufferId),hl
0457A5             0097*  ; set tiles_row_defs
0457A5 ED 32 07    0098*      lea ix,ix+7 ; ix points to definition of first tile of first row
0457A8 DD 22 00 66 0099*      ld (tiles_row_defs),ix
       04          
0457AD             0100*  ; print_level:
0457AD             0101*  level_x: equ 48
0457AD             0102*  level_y: equ 0
0457AD 0E 30       0103*      ld c,level_x
0457AF 06 00       0104*      ld b,level_y
0457B1 CD 37 1A 04 0105*      call vdu_move_cursor
0457B5 CD 10 01 04 0106*      call printInline
0457B9 4C 65 76 65 0107*      asciz "Level: "
       6C 3A 20 00 
0457C1 3A 57 57 04 0108*      ld a,(cur_level)
0457C5 CD 5A 01 04 0109*      call printHexA
0457C9             0110*      ; call printNewLine
0457C9             0111*      ; ld hl,(cur_baseBufferId)
0457C9             0112*      ; call printDec
0457C9             0113*  
0457C9             0114*  ; ; draw initial background tiles
0457C9             0115*  ; ; TODO: make this a stars background
0457C9             0116*  ;     ld hl,BUF_STATION_BG_00
0457C9             0117*  ;     call vdu_buff_select
0457C9             0118*  ;     ld bc,0
0457C9             0119*  ;     ld de,field_top
0457C9             0120*  ;     call vdu_plot_bmp
0457C9             0121*  
0457C9             0122*  ;     ld hl,BUF_STATION_BG_01
0457C9             0123*  ;     call vdu_buff_select
0457C9             0124*  ;     ld bc,0
0457C9             0125*  ;     ld de,field_top+256
0457C9             0126*  ;     call vdu_plot_bmp
0457C9             0127*  
0457C9 C9          0128*      ret
0457CA             0129*  ; end init_level
0457CA             0056       include "levels_tileset_0.inc"
0457CA             0001*  ; Generated from tiles/dg/dg0_00.tmx
0457CA             0002*  
0457CA 01          0003*  tileset_00_num_levels: db 1
0457CB             0004*  
0457CB             0005*  tileset_00_levels:
0457CB D1 57 04    0006*  	dl tileset_00_level_00
0457CE 00 00 00    0007*  	dl 0 ; list terminator
0457D1             0008*  
0457D1             0009*  tileset_00_level_00: ; Level 0
0457D1 10          0010*  	db 16          ; num cols
0457D2 20 00 00    0011*  	dl 32          ; num rows
0457D5 00 02 00    0012*  	dl 512 ; base bufferId
0457D8 00 00 00 00 0013*  	db 000,000,000,000,000,101,116,098,114,115,104,000,000,000,000,000
       00 65 74 62 
       72 73 68 00 
       00 00 00 00 
0457E8 00 00 00 65 0014*  	db 000,000,000,101,098,116,113,114,114,115,116,097,104,000,000,000
       62 74 71 72 
       72 73 74 61 
       68 00 00 00 
0457F8 00 65 61 F5 0015*  	db 000,101,097,245,246,098,097,098,098,099,113,113,114,098,104,000
       F6 62 61 62 
       62 63 71 71 
       72 62 68 00 
045808 00 74 71 88 0016*  	db 000,116,113,136,137,115,113,114,113,114,098,099,113,114,100,000
       89 73 71 72 
       71 72 62 63 
       71 72 64 00 
045818 65 72 61 96 0017*  	db 101,114,097,150,151,099,097,105,098,098,081,082,074,083,084,104
       97 63 61 69 
       62 62 51 52 
       4A 53 54 68 
045828 63 71 72 96 0018*  	db 099,113,114,150,151,167,216,216,182,113,065,066,248,067,068,116
       97 A7 D8 D8 
       B6 71 41 42 
       F8 43 44 74 
045838 71 69 62 9A 0019*  	db 113,105,098,154,155,097,098,097,165,168,055,248,001,248,056,114
       9B 61 62 61 
       A5 A8 37 F8 
       01 F8 38 72 
045848 71 72 64 72 0020*  	db 113,114,100,114,113,100,113,114,113,114,049,050,248,051,052,098
       71 64 71 72 
       71 72 31 32 
       F8 33 34 62 
045858 61 62 61 64 0021*  	db 097,098,097,100,097,098,100,098,098,098,033,034,074,035,036,099
       61 62 64 62 
       62 62 21 22 
       4A 23 24 63 
045868 71 64 71 72 0022*  	db 113,100,113,114,113,114,121,114,115,113,087,088,188,113,100,113
       71 72 79 72 
       73 71 57 58 
       BC 71 64 71 
045878 61 62 59 5A 0023*  	db 097,098,089,090,091,098,114,098,136,137,071,072,219,097,098,097
       5B 62 72 62 
       88 89 47 48 
       DB 61 62 61 
045888 64 71 49 05 0024*  	db 100,113,073,005,075,171,220,172,134,135,171,220,236,220,220,172
       4B AB DC AC 
       86 87 AB DC 
       EC DC DC AC 
045898 62 64 39 3A 0025*  	db 098,100,057,058,059,097,098,100,134,135,099,100,097,098,100,098
       3B 61 62 64 
       86 87 63 64 
       61 62 64 62 
0458A8 72 62 72 73 0026*  	db 114,098,114,115,113,116,099,113,154,155,115,113,100,113,114,113
       71 74 63 71 
       9A 9B 73 71 
       64 71 72 71 
0458B8 62 72 62 63 0027*  	db 098,114,098,099,113,114,105,114,241,242,099,097,098,097,098,100
       71 72 69 72 
       F1 F2 63 61 
       62 61 62 64 
0458C8 73 79 71 72 0028*  	db 115,121,113,114,097,098,113,114,180,114,113,100,113,121,113,114
       61 62 71 72 
       B4 72 71 64 
       71 79 71 72 
0458D8 61 62 98 99 0029*  	db 097,098,152,153,098,152,153,098,211,100,097,098,100,243,098,098
       62 98 99 62 
       D3 64 61 62 
       64 F3 62 62 
0458E8 64 71 86 87 0030*  	db 100,113,134,135,114,134,135,115,195,212,212,212,212,243,114,113
       72 86 87 73 
       C3 D4 D4 D4 
       D4 F3 72 71 
0458F8 62 61 F5 F6 0031*  	db 098,097,245,246,098,245,246,099,211,114,099,097,098,243,098,100
       62 F5 F6 63 
       D3 72 63 61 
       62 F3 62 64 
045908 71 72 F1 F2 0032*  	db 113,114,241,242,115,241,242,163,162,098,105,100,087,088,113,114
       73 F1 F2 A3 
       A2 62 69 64 
       57 58 71 72 
045918 73 71 51 52 0033*  	db 115,113,081,082,074,083,084,098,114,115,113,116,071,072,098,098
       4A 53 54 62 
       72 73 71 74 
       47 48 62 62 
045928 63 61 41 42 0034*  	db 099,097,065,066,248,067,068,113,089,090,090,090,090,091,114,113
       F8 43 44 71 
       59 5A 5A 5A 
       5A 5B 72 71 
045938 71 64 37 F8 0035*  	db 113,100,055,248,001,248,056,114,073,148,098,040,105,075,098,100
       01 F8 38 72 
       49 94 62 28 
       69 4B 62 64 
045948 61 62 31 32 0036*  	db 097,098,049,050,248,051,052,114,073,132,056,005,055,075,113,114
       F8 33 34 72 
       49 84 38 05 
       37 4B 71 72 
045958 71 64 21 22 0037*  	db 113,100,033,034,074,035,036,114,073,247,116,040,123,075,098,121
       4A 23 24 72 
       49 F7 74 28 
       7B 4B 62 79 
045968 61 62 F1 F2 0038*  	db 097,098,241,242,100,241,242,098,073,113,243,121,107,075,099,113
       64 F1 F2 62 
       49 71 F3 79 
       6B 4B 63 71 
045978 67 71 86 87 0039*  	db 103,113,134,135,114,134,135,113,057,058,058,058,058,059,114,102
       72 86 87 71 
       39 3A 3A 3A 
       3A 3B 72 66 
045988 00 64 9A 9B 0040*  	db 000,100,154,155,098,154,155,100,098,098,099,180,098,100,098,000
       62 9A 9B 64 
       62 62 63 B4 
       62 64 62 00 
045998 00 67 72 63 0041*  	db 000,103,114,099,113,114,114,115,163,212,212,196,113,114,098,000
       71 72 72 73 
       A3 D4 D4 C4 
       71 72 62 00 
0459A8 00 00 62 71 0042*  	db 000,000,098,113,121,098,098,099,105,098,097,211,100,098,102,000
       79 62 62 63 
       69 62 61 D3 
       64 62 66 00 
0459B8 00 00 67 71 0043*  	db 000,000,103,113,114,100,114,113,100,113,114,179,114,102,000,000
       72 64 72 71 
       64 71 72 B3 
       72 66 00 00 
0459C8 00 00 00 00 0044*  	db 000,000,000,000,000,103,100,097,098,100,102,000,000,000,000,000
       00 67 64 61 
       62 64 66 00 
       00 00 00 00 
0459D8             0057       ; include "levels_xevious.inc"
0459D8             0058       include "player.inc"
0459D8 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
045A00             0002*  
045A00             0003*  ; ######## GAME STATE VARIABLES #######
045A00             0004*  ; THESE MUST BE IN THIS ORDER FOR game_initialize TO WORK PROPERLY
045A00 00 00 00    0005*  player_score: dl 0 ; integer
045A03             0006*  ; player current shields,binary
045A03             0007*  ; when < 0 player splodes
045A03             0008*  ; restores to player_max_shields when new ship spawns
045A03 10 00 00    0009*  player_shields: dl 16 ; integer
045A06             0010*  ; max player shields,binary
045A06             0011*  ; can increase with power-ups (todo)
045A06 10 00 00    0012*  player_max_shields: dl 16 ; integer
045A09             0013*  ; when reaches zero,game ends
045A09             0014*  ; can increase based on TODO
045A09 03          0015*  player_ships: db 3 ; integer
045A0A             0016*  
045A0A             0017*  speed_player: equ 3*256 ; 3 pixels per frame 16.8 fixed
045A0A             0018*  
045A0A             0019*  ; ######### PLAYER SPRITE PARAMETERS ##########
045A0A             0020*  ; uses the same offsets from its table base as the main sprite table:
045A0A             0021*  player_start_variables: ; label marking beginning of table
045A0A 10          0022*  player_id:                db table_max_records ; 1 bytes unique spriteId, zero-based
045A0B             0023*  ; sprite state variables
045A0B 00 00 00    0024*  player_x:                 dl                 0 ; 3 bytes 16.8 fractional x position in pixels
045A0E 00 00 00    0025*  player_y:                 dl                 0 ; 3 bytes 16.8 fractional y position in pixels
045A11 00 00 00    0026*  player_xvel:              dl                 0 ; 3 bytes x-component velocity, 16.8 fixed, pixels
045A14 00 00 00    0027*  player_yvel:              dl                 0 ; 3 bytes y-component velocity, 16.8 fixed, pixels
045A17 00 03 00    0028*  player_vel:               dl             3*256 ; 3 bytes velocity px/frame (16.8 fixed)
045A1A 00 00 00    0029*  player_heading:           dl                 0 ; 3 bytes sprite movement direction deg256 16.8 fixed
045A1D 00 00 00    0030*  player_orientation:       dl                 0 ; 3 bytes orientation bits
045A20             0031*  ; sprite definition variables
045A20 00          0032*  player_type:              db                 0 ; 1 bytes not currently used
045A21 2B 01 00    0033*  player_base_bufferId:     dl       BUF_SHIP_0L ; 3 bytes bitmap bufferId
045A24 00 00 00    0034*  player_move_program:      dl                 0 ; 3 bytes not currently used
045A27 00          0035*  player_collisions:        db                 0 ; 1 bytes see collisions.inc constants for bit definitions
045A28 10          0036*  player_dim_x:             db                16 ; 1 bytes sprite width in pixels
045A29 10          0037*  player_dim_y:             db                16 ; 1 bytes sprite height in pixels
045A2A 01          0038*  player_num_orientations:  db                 1 ; 1 bytes number of orientations for this sprite
045A2B 03          0039*  player_num_animations:    db                 3 ; 1 bytes number of animations for this sprite
045A2C 01          0040*  player_animation:         db                 1 ; 1 bytes current animation index, zero-based
045A2D 00          0041*  player_animation_timer:   db                 0 ; 1 bytes when hits zero, draw next animation
045A2E 00          0042*  player_move_timer:        db                 0 ; 1 bytes when zero, go to next move program, or step
045A2F 00          0043*  player_move_step:         db                 0 ; 1 bytes stage in a move program sequence, varies
045A30 00          0044*  player_points:            db                 0 ; 1 bytes points awarded for killing this sprite type
045A31 00          0045*  player_shield_damage:     db                 0 ; 1 bytes shield points deducted for collision
045A32 00          0046*  player_frame:             db                 0 ; 1 bytes current animation frame
045A33             0047*  player_end_variables: ; for when we want to traverse this table in reverse
045A33             0048*  
045A33             0049*  ; set initial player position
045A33             0050*  ; inputs: none,everything is hardcoded
045A33             0051*  ; outputs: player_x/y set to bottom-left corner of screen
045A33             0052*  ; destroys: a
045A33             0053*  player_init:
045A33 3A 0A 5A 04 0054*  	ld a,(player_id)
045A37 CD 00 20 04 0055*  	call vdu_sprite_select
045A3B CD 13 20 04 0056*      call vdu_sprite_clear_frames
045A3F 21 2B 01 00 0057*      ld hl,BUF_SHIP_0L
045A43 CD 55 21 04 0058*      call vdu_sprite_add_buff
045A47 21 2C 01 00 0059*      ld hl,BUF_SHIP_1C
045A4B CD 55 21 04 0060*      call vdu_sprite_add_buff
045A4F 21 2D 01 00 0061*      ld hl,BUF_SHIP_2R
045A53 CD 55 21 04 0062*      call vdu_sprite_add_buff
045A57 01 00 00 00 0063*      ld bc,0
045A5B ED 43 0B 5A 0064*      ld (player_x),bc
       04          
045A60 11 00 6F 01 0065*      ld de,sprite_bottom*256 ; max sprite y-coordinate
045A64 ED 53 0E 5A 0066*      ld (player_y),de
       04          
045A69 CD CC 20 04 0067*      call vdu_sprite_move_abs168
045A6D CD 76 20 04 0068*      call vdu_sprite_show
045A71 21 F4 63 04 0069*      ld hl,player_alive
045A75 22 E6 63 04 0070*      ld (player_state),hl
045A79 21 27 5A 04 0071*      ld hl,player_collisions
045A7D CB F6       0072*      set sprite_alive,(hl)
045A7F C9          0073*      ret
045A80             0074*  
045A80             0075*  ; process player keyboard input, set player bitmap
045A80             0076*  ; velocities and draw player bitmap at updated coordinates
045A80             0077*  ; Inputs: player_x/y set at desired position
045A80             0078*  ; Returns: player bitmap drawn at updated position
045A80             0079*  ; Destroys: probably everything except maybe iy
045A80             0080*  ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
045A80             0081*  ; TODO: requires sprite implementation
045A80             0082*  player_input:
045A80             0083*  ; ; did we die last frame?
045A80             0084*  ;     ld a,(player_collisions)
045A80             0085*  ;     and %00000010 ; zero flag will be set if not dead
045A80             0086*  ;     jr z,player_not_dead
045A80             0087*  ; ; yes we died
045A80             0088*  ;     call kill_player
045A80             0089*  ;     ret ; done
045A80             0090*  player_not_dead: ; yay we didn't die
045A80             0091*  ; reset player component velocities to zero as the default
045A80 21 00 00 00 0092*  	ld hl,0
045A84 22 11 5A 04 0093*  	ld (player_xvel),hl
045A88 22 14 5A 04 0094*  	ld (player_yvel),hl
045A8C             0095*  ; make ship the active sprite
045A8C 3A 0A 5A 04 0096*      ld a,(player_id)
045A90 CD 00 20 04 0097*      call vdu_sprite_select
045A94             0098*  ; check for keypresses and branch accordingly
045A94             0099*  ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
045A94             0100*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
045A94 3E 1E       0001*M 			LD	A, function
045A96 5B CF       0002*M 			RST.LIL	08h
045A98             0101*  ; we test all four arrow keys and add/subract velocities accordingly
045A98             0102*  ; this handles the case where two opposing movement keys
045A98             0103*  ; are down simultaneously (velocities will net to zero)
045A98             0104*  ; and allows diagonal movement when a vertical and horizontal key are down
045A98             0105*  ; it also allows movement and action keys to be detected simultaneously
045A98             0106*  ; so we can walk and chew gum at the same time
045A98 3E 01       0107*      ld a,1 ; set ship's default animation to center
045A9A             0108*          ; if left and right are both down a will net to
045A9A             0109*  
045A9A             0110*  ; 99 Space: fire main weapon
045A9A DD CB 0C 56 0111*      bit 2,(ix+12)
045A9E F5          0112*      push af ; save flags for after player movement processed
045A9F             0113*  ; 26 Left: move player left
045A9F DD CB 03 4E 0114*      bit 1,(ix+3)
045AA3 CA B5 5A 04 0115*      jp z,@F
045AA7 2A 11 5A 04 0116*      ld hl,(player_xvel)
045AAB 01 00 FD FF 0117*      ld bc,-speed_player
045AAF 09          0118*      add hl,bc
045AB0 22 11 5A 04 0119*      ld (player_xvel),hl
045AB4 3D          0120*      dec a ; set ship's animation to left
045AB5             0121*  @@:
045AB5             0122*  ; 122 Right: move player right
045AB5 DD CB 0F 4E 0123*      bit 1,(ix+15)
045AB9 CA CB 5A 04 0124*  	jp z,@F
045ABD 2A 11 5A 04 0125*      ld hl,(player_xvel)
045AC1 01 00 03 00 0126*      ld bc,speed_player
045AC5 09          0127*      add hl,bc
045AC6 22 11 5A 04 0128*      ld (player_xvel),hl
045ACA 3C          0129*      inc a ; set ship's animation to right
045ACB             0130*  @@:
045ACB             0131*  ; 58 Up: move player up
045ACB DD CB 07 4E 0132*      bit 1,(ix+7)
045ACF CA E0 5A 04 0133*  	jp z,@F
045AD3 2A 14 5A 04 0134*      ld hl,(player_yvel)
045AD7 01 00 FD FF 0135*      ld bc,-speed_player
045ADB 09          0136*      add hl,bc
045ADC 22 14 5A 04 0137*      ld (player_yvel),hl
045AE0             0138*  @@:
045AE0             0139*  ; 42 Down: move player down
045AE0 DD CB 05 4E 0140*      bit 1,(ix+5)
045AE4 CA F5 5A 04 0141*  	jp z,@F
045AE8 2A 14 5A 04 0142*      ld hl,(player_yvel)
045AEC 01 00 03 00 0143*      ld bc,speed_player
045AF0 09          0144*      add hl,bc
045AF1 22 14 5A 04 0145*      ld (player_yvel),hl
045AF5             0146*  @@:
045AF5             0147*  ; a should land here loaded with the correct frame
045AF5 CD 63 20 04 0148*      call vdu_sprite_select_frame
045AF9             0149*  ; draw player at updated position
045AF9 FD 21 0A 5A 0150*      ld iy,player_start_variables
       04          
045AFE FD 22 90 5E 0151*      ld (table_pointer),iy
       04          
045B03 CD 5B 5F 04 0152*      call move_sprite
045B07 ED 4B 0B 5A 0153*      ld bc,(player_x)
       04          
045B0C ED 5B 0E 5A 0154*      ld de,(player_y)
       04          
045B11 CD CC 20 04 0155*  	call vdu_sprite_move_abs168
045B15             0156*  ; process player laser fire
045B15 F1          0157*      pop af ; restore flags from spacebar check
045B16 C2 6C 56 04 0158*      jp nz,fire_laser ; will return to caller from there
045B1A C9          0159*      ret
045B1B             0160*  ; end player_input
045B1B             0161*  
045B1B             0162*  score_x: equ 48
045B1B             0163*  score_y: equ 1
045B1B             0164*  ; prints the player's score
045B1B             0165*  print_score:
045B1B 0E 30       0166*      ld c,score_x
045B1D 06 01       0167*      ld b,score_y
045B1F CD 37 1A 04 0168*      call vdu_move_cursor
045B23             0169*  ; TODO: make this part of the UI setup and only print as needed
045B23 CD 10 01 04 0170*      call printInline
045B27 53 63 6F 72 0171*      asciz "Score:"
       65 3A 00    
045B2E             0172*  ; END TODO
045B2E 2A 00 5A 04 0173*      ld hl,(player_score)
045B32 CD 16 02 04 0174*      call printDec
045B36 C9          0175*      ret
045B37             0176*  ; end print_score
045B37             0177*  
045B37             0178*  ; ###################################################################
045B37             0179*  ; TODO: the below is all stuff from the original code we need to port
045B37             0180*  ; ###################################################################
045B37             0181*  
045B37             0182*  kill_player:
045B37             0183*  ; ; set player status to dead
045B37             0184*  ;     xor a; sets all player flags to zero
045B37             0185*  ;     ld (player_collisions),a
045B37             0186*  ; ; deduct a ship from the inventory
045B37             0187*  ;     ld a,(player_ships)
045B37             0188*  ;     dec a
045B37             0189*  ;     ld (player_ships),a
045B37             0190*  ; ; are we out of ships?
045B37             0191*  ;     jp z,game_over
045B37             0192*  ; ; wait a few ticks
045B37             0193*  ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
045B37             0194*  ;     ld (player_move_timer),a
045B37             0195*  ; kill_player_loop:
045B37             0196*  ;     call vdu_vblank
045B37             0197*  ;     ld a,(player_move_timer)
045B37             0198*  ;     dec a
045B37             0199*  ;     ld (player_move_timer),a
045B37             0200*  ;     jr nz,kill_player_loop
045B37             0201*  ;     call player_init ; player respawn if timer zero
045B37 C9          0202*      ret ; and out
045B38             0203*  
045B38             0204*  ; draws the player's shields level
045B38             0205*  ; draw_shields:
045B38             0206*  ; TODO: Agonize this routine
045B38             0207*  ; ; prep the loop to draw the bars
045B38             0208*  ;     ld a,(player_shields) ; snag shields
045B38             0209*  ;     and a
045B38             0210*  ;     ret z ; don't draw if zero shields
045B38             0211*  ; ; set loop counter and drawing position
045B38             0212*  ;     ld b,a ; loop counter
045B38             0213*  ;     ld hl,#5300+48+12
045B38             0214*  ; ; set color based on bars remaining
045B38             0215*  ;     ld c,103 ; bright green 28fe0a
045B38             0216*  ;     cp 9
045B38             0217*  ;     jp p,draw_shields_loop
045B38             0218*  ;     ld c,74 ; bright yellow eafe5b
045B38             0219*  ;     cp 3
045B38             0220*  ;     jp p,draw_shields_loop
045B38             0221*  ;     ld c,28 ; bright red fe0a0a
045B38             0222*  ; draw_shields_loop:
045B38             0223*  ;     push bc ; yup,outta
045B38             0224*  ;     push hl ; registers again
045B38             0225*  ;     ; ld a,#A8 ; ▀,168
045B38             0226*  ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
045B38             0227*  ;     ; call draw_char
045B38             0228*  ;     call draw_num ; we nuked draw_char for the time being
045B38             0229*  ;     pop hl
045B38             0230*  ;     ld a,8
045B38             0231*  ;     add a,l
045B38             0232*  ;     ld l,a
045B38             0233*  ;     pop bc
045B38             0234*  ;     djnz draw_shields_loop
045B38             0235*      ; ret
045B38             0236*  
045B38             0237*  
045B38             0238*  ; draw_lives:
045B38             0239*  ;     ld hl,player_small ; make small yellow ship the active sprite
045B38             0240*  ;     ld (sprite_base_bufferId),hl
045B38             0241*  ;     ; ld a,#80 ; northern orientation
045B38             0242*  ;     ; ld (sprite_orientation),a
045B38             0243*  ;     ld hl,0 ; north
045B38             0244*  ;     ld (sprite_heading),hl
045B38             0245*  ;     xor a
045B38             0246*  ;     ld (sprite_frame),a
045B38             0247*  ;     ld a,#56 ; top of visible screen
045B38             0248*  ;     ld (sprite_y+1),a
045B38             0249*  ;     call vdu_buff_select ; TODO: convert to vdu_buff_select
045B38             0250*  ;     ld a,(player_ships)
045B38             0251*  ;     dec a ; we draw one fewer ships than lives
045B38             0252*  ;     ret z ; nothing to draw here, move along
045B38             0253*  ;     ld b,a ; loop counter
045B38             0254*  ;     ld a,256-16 ; initial x position
045B38             0255*  ; draw_lives_loop:
045B38             0256*  ;     ld (sprite_x+1),a
045B38             0257*  ;     push af
045B38             0258*  ;     push bc
045B38             0259*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
045B38             0260*  ;     pop bc
045B38             0261*  ;     pop af
045B38             0262*  ;     sub 10
045B38             0263*  ;     djnz draw_lives_loop
045B38             0264*  ;     ret
045B38             0059       include "sprites.inc"
045B38             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
045B38             0002*  table_bytes_per_record:    equ  41; 40 bytes ;40 bytes per sprite record
045B38             0003*  sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
045B38             0004*  ; sprite state variables
045B38             0005*  sprite_state_variables:    equ   1; beginning of sprite state variables
045B38             0006*  sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
045B38             0007*  sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
045B38             0008*  sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
045B38             0009*  sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
045B38             0010*  sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
045B38             0011*  sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
045B38             0012*  sprite_orientation:        equ  19; 3 bytes ;orientation bits
045B38             0013*  ; sprite definition variables
045B38             0014*  sprite_definitions:        equ  22; beginnning of sprite definition variables
045B38             0015*  sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
045B38             0016*  sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
045B38             0017*  sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
045B38             0018*  sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
045B38             0019*  sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
045B38             0020*  sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
045B38             0021*  sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
045B38             0022*  sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
045B38             0023*  sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
045B38             0024*  sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
045B38             0025*  sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
045B38             0026*  sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
045B38             0027*  sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
045B38             0028*  sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
045B38             0029*  sprite_frame:              equ  40; 1 bytes ;current animation frame
045B38             0030*  
045B38             0031*  ; ###### SPRITE TABLE VARIABLES ######
045B38             0032*  ; maximum number of sprites
045B38             0033*  table_max_records: equ 16 ; it can handle more but this is pushing it
045B38             0034*  table_total_bytes: equ table_max_records*table_bytes_per_record
045B38             0035*  
045B38             0036*  ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
045B38 FF FF FF FF 0037*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
045C00             0038*  table_base:
045C00 00 00 00 00 0039*  sprite_start_variables:  blkb table_total_bytes, 0 ; fill with zeroes
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
045E90             0040*  sprite_end_variables: ; in case we want to traverse the table in reverse
045E90             0041*  
045E90             0042*  ; pointer to top address of current record, initialized to table_base
045E90 00 5C 04    0043*  table_pointer: dl table_base
045E93             0044*  ; how many active sprites
045E93 00          0045*  table_active_sprites: db 0x00
045E94             0046*  ; flag indicating collision with screen edge
045E94             0047*  ; uses orientation codes to specify which edge(s)
045E94 00          0048*  sprite_screen_edge: db #00
045E95             0049*  
045E95             0050*  ; origin_top: equ 48
045E95             0051*  origin_top: equ 0
045E95             0052*  origin_left: equ 128
045E95             0053*  field_top: equ 0
045E95             0054*  field_bottom: equ 383-origin_top
045E95             0055*  field_left: equ 0
045E95             0056*  field_right: equ 255
045E95             0057*  sprite_top: equ field_top + 0
045E95             0058*  sprite_bottom: equ field_bottom-16
045E95             0059*  sprite_left: equ field_left
045E95             0060*  sprite_right: equ field_right-16
045E95             0061*  
045E95             0062*  ; ######### COLLISION SPRITE PARAMETERS ##########
045E95             0063*  ; integer coordinates are all that are needed for collision calculations
045E95 00          0064*  collision_x: db 0x00
045E96 00          0065*  collision_y: db 0x00
045E97 00          0066*  collision_dim_x: db 0x00
045E98 00          0067*  collision_dim_y: db 0x00
045E99             0068*  
045E99             0069*  ; scratch variables
045E99 00          0070*  x: db 0x00 ; 8-bit signed integer
045E9A 00          0071*  y: db 0x00 ; 8-bit signed integer
045E9B 00 00 00    0072*  x0: dl 0x000000 ; 16.8 signed fixed place
045E9E 00 00 00    0073*  y0: dl 0x000000 ; 16.8 signed fixed place
045EA1 00 00 00    0074*  incx1: dl 0x000000 ; 16.8 signed fixed place
045EA4 00 00 00    0075*  incy1: dl 0x000000 ; 16.8 signed fixed place
045EA7 00 00 00    0076*  incx2: dl 0x000000 ; 16.8 signed fixed place
045EAA 00 00 00    0077*  incy2: dl 0x000000 ; 16.8 signed fixed place
045EAD             0078*  
045EAD             0079*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
045EAD 00 00 00    0080*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
045EB0 00 00 00    0081*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
045EB3 00 00 00    0082*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
045EB6             0083*  
045EB6             0084*  table_init:
045EB6 DD 21 00 5C 0085*      ld ix,table_base
       04          
045EBB AF          0086*      xor a ; sprite id
045EBC 0E 00       0087*      ld c,0 ; sprite type
045EBE 06 10       0088*      ld b,table_max_records ; loop counter
045EC0             0089*  @loop:
045EC0 DD 77 00    0090*      ld (ix+sprite_id),a
045EC3 DD 71 16    0091*      ld (ix+sprite_type),c
045EC6 ED 32 29    0092*      lea ix,ix+table_bytes_per_record
045EC9 3C          0093*      inc a
045ECA 10 F4       0094*      djnz @loop
045ECC C9          0095*      ret
045ECD             0096*  
045ECD             0097*  ; gets the next available sprite id
045ECD             0098*  ; inputs; none
045ECD             0099*  ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
045ECD             0100*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
045ECD             0101*  ; destroys: a,b,c,hl,ix
045ECD             0102*  ; affects: bumps table_active_sprites by one
045ECD             0103*  table_get_next_id:
045ECD DD 21 00 5C 0104*      ld ix,table_base
       04          
045ED2 06 10       0105*      ld b,table_max_records
045ED4 0E 00       0106*      ld c,0 ; sprite id counter
045ED6             0107*  @loop:
045ED6 DD 7E 16    0108*      ld a,(ix+sprite_type)
045ED9 A7          0109*      and a
045EDA 28 08       0110*      jr z,@found
045EDC ED 32 29    0111*      lea ix,ix+table_bytes_per_record
045EDF 0C          0112*      inc c
045EE0 10 F4       0113*      djnz @loop
045EE2             0114*  @notfound:
045EE2 AF          0115*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
045EE3 C9          0116*      ret
045EE4             0117*  @found:
045EE4             0118*  ; bump number of active sprites
045EE4 21 93 5E 04 0119*      ld hl,table_active_sprites
045EE8 34          0120*      inc (hl)
045EE9             0121*  ; return sprite id
045EE9 79          0122*      ld a,c
045EEA 37          0123*      scf ; sets carry flag indicating we found a free sprite
045EEB C9          0124*      ret ; done
045EEC             0125*  ; end table_get_next_id
045EEC             0126*  
045EEC             0127*  ; deactivate the sprite with the given id
045EEC             0128*  ; inputs: iy set to sprite record
045EEC             0129*  ; outputs: nothing
045EEC             0130*  ; destroys: a,hl
045EEC             0131*  ; affects: decrements table_active_sprites by one
045EEC             0132*  table_deactivate_sprite:
045EEC FD 7E 00    0133*      ld a,(iy+sprite_id) ; get spriteId
045EEF CD 00 20 04 0134*      call vdu_sprite_select ; select sprite
045EF3 CD 84 20 04 0135*      call vdu_sprite_hide
045EF7 AF          0136*      xor a
045EF8 FD 77 16    0137*      ld (iy+sprite_type),a
045EFB 21 93 5E 04 0138*      ld hl,table_active_sprites
045EFF 35          0139*      dec (hl)
045F00 C9          0140*      ret
045F01             0141*  ; end table_deactivate_sprite
045F01             0142*  
045F01             0143*  sprites_init:
045F01             0144*  ; initialize sprites
045F01 CD 34 21 04 0145*  	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
045F05 AF          0146*  	xor a
045F06             0147*  @sprite_loop:
045F06 F5          0148*  	push af
045F07 CD 00 20 04 0149*  	call vdu_sprite_select
045F0B 21 00 01 00 0150*  	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
045F0F CD 55 21 04 0151*  	call vdu_sprite_add_buff
045F13 F1          0152*  	pop af
045F14 3C          0153*  	inc a
045F15 FE 12       0154*  	cp table_max_records+2 ; tack on sprites for player and laser
045F17 20 ED       0155*  	jr nz,@sprite_loop
045F19 3C          0156*  	inc a
045F1A CD 34 20 04 0157*  	call vdu_sprite_activate
045F1E             0158*  
045F1E             0159*  ; define player sprite
045F1E 3A 0A 5A 04 0160*  	ld a,(player_id)
045F22 CD 00 20 04 0161*  	call vdu_sprite_select
045F26 CD 13 20 04 0162*  	call vdu_sprite_clear_frames
045F2A 21 2B 01 00 0163*  	ld hl,BUF_SHIP_0L
045F2E 01 03 00 00 0164*  	ld bc,3 ; three bitmaps for player ship
045F32             0165*  @sprite_player_loop:
045F32 C5          0166*  	push bc
045F33 E5          0167*  	push hl
045F34 CD 55 21 04 0168*  	call vdu_sprite_add_buff
045F38 E1          0169*  	pop hl
045F39 23          0170*  	inc hl
045F3A C1          0171*  	pop bc
045F3B 10 F5       0172*  	djnz @sprite_player_loop
045F3D             0173*  
045F3D             0174*  ; define laser sprite
045F3D 3A 00 56 04 0175*  	ld a,(laser_id)
045F41 CD 00 20 04 0176*  	call vdu_sprite_select
045F45 CD 13 20 04 0177*  	call vdu_sprite_clear_frames
045F49 21 08 01 00 0178*  	ld hl,BUF_LASER_A
045F4D 06 02       0179*  	ld b,2 ; two bitmaps for laser
045F4F             0180*  @sprite_laser_loop:
045F4F C5          0181*  	push bc
045F50 E5          0182*  	push hl
045F51 CD 55 21 04 0183*  	call vdu_sprite_add_buff
045F55 E1          0184*  	pop hl
045F56 23          0185*  	inc hl
045F57 C1          0186*  	pop bc
045F58 10 F5       0187*  	djnz @sprite_laser_loop
045F5A             0188*  ; all done
045F5A C9          0189*      ret
045F5B             0190*  ; end sprites_init
045F5B             0191*  
045F5B             0192*  ; compute a sprite's new position based on its component x,y velocities
045F5B             0193*  ; with screen boundary checking and update its sprite table record accordingly
045F5B             0194*  ; inputs: table_pointer set to sprite record
045F5B             0195*  ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
045F5B             0196*  ; destroys: everything
045F5B             0197*  ; note: actual rendering of sprite must be handled by caller
045F5B             0198*  move_sprite:
045F5B FD 2A 90 5E 0199*      ld iy,(table_pointer)
       04          
045F60             0200*  ; x-axis movement
045F60 FD 27 01    0201*      ld hl,(iy+sprite_x)
045F63 FD 17 07    0202*      ld de,(iy+sprite_xvel)
045F66 19          0203*      add hl,de
045F67 FD 2F 01    0204*      ld (iy+sprite_x),hl
045F6A             0205*  ; y-axis movement
045F6A FD 27 04    0206*      ld hl,(iy+sprite_y)
045F6D FD 17 0A    0207*      ld de,(iy+sprite_yvel)
045F70 19          0208*      add hl,de
045F71 FD 2F 04    0209*      ld (iy+sprite_y),hl
045F74             0210*  ; detect screen edge collisions
045F74 AF          0211*      xor a ; reset screen edge collision flag and clear carry
045F75 32 94 5E 04 0212*      ld (sprite_screen_edge),a
045F79             0213*  ; y-axis first since we already have it in hl
045F79 11 00 00 00 0214*      ld de,-sprite_top*256
045F7D ED 5A       0215*      adc hl,de
045F7F FA A9 5F 04 0216*      jp m,@top
045F83 ED 52       0217*      sbc hl,de ; hl back to original value
045F85 11 00 91 FE 0218*      ld de,-sprite_bottom*256
045F89 ED 5A       0219*      adc hl,de
045F8B F2 B3 5F 04 0220*      jp p,@bottom
045F8F             0221*  @xaxis:
045F8F FD 27 01    0222*      ld hl,(iy+sprite_x)
045F92 11 00 00 00 0223*      ld de,-sprite_left*256
045F96 ED 5A       0224*      adc hl,de
045F98 FA CE 5F 04 0225*      jp m,@left
045F9C ED 52       0226*      sbc hl,de ; hl back to original value
045F9E 11 00 11 FF 0227*      ld de,-sprite_right*256
045FA2 ED 5A       0228*      adc hl,de
045FA4 F2 DC 5F 04 0229*      jp p,@right
045FA8             0230*  ; no edge collisions so go home
045FA8 C9          0231*      ret
045FA9             0232*  @top:
045FA9 3E 08       0233*      ld a,collide_top
045FAB 21 00 00 00 0234*      ld hl,sprite_top*256
045FAF C3 B9 5F 04 0235*      jp @collide_y
045FB3             0236*  @bottom:
045FB3 3E 04       0237*      ld a,collide_bottom
045FB5 21 00 6F 01 0238*      ld hl,sprite_bottom*256
045FB9             0239*  @collide_y:
045FB9 32 94 5E 04 0240*      ld (sprite_screen_edge),a
045FBD FD 2F 04    0241*      ld (iy+sprite_y),hl
045FC0             0242*  ; reverse y-axis velocity
045FC0 FD 27 0A    0243*      ld hl,(iy+sprite_yvel)
045FC3 CD 16 09 04 0244*      call neg_hlu
045FC7 FD 2F 0A    0245*      ld (iy+sprite_yvel),hl
045FCA             0246*  ; go check for x-axis collisions
045FCA C3 8F 5F 04 0247*      jp @xaxis
045FCE             0248*  @left:
045FCE 3A 94 5E 04 0249*      ld a,(sprite_screen_edge)
045FD2 F6 02       0250*      or a,collide_left
045FD4 21 00 00 00 0251*      ld hl,sprite_left*256
045FD8 C3 E6 5F 04 0252*      jp @collide_x
045FDC             0253*  @right:
045FDC 3A 94 5E 04 0254*      ld a,(sprite_screen_edge)
045FE0 F6 01       0255*      or a,collide_right
045FE2 21 00 EF 00 0256*      ld hl,sprite_right*256
045FE6             0257*  @collide_x:
045FE6 32 94 5E 04 0258*      ld (sprite_screen_edge),a
045FEA FD 2F 01    0259*      ld (iy+sprite_x),hl
045FED             0260*  ; reverse x-axis velocity
045FED FD 27 07    0261*      ld hl,(iy+sprite_xvel)
045FF0 CD 16 09 04 0262*      call neg_hlu
045FF4 FD 2F 07    0263*      ld (iy+sprite_xvel),hl
045FF7             0264*  ; final collision flag to a and return
045FF7 3A 94 5E 04 0265*      ld a,(sprite_screen_edge)
045FFB C9          0266*      ret
045FFC             0267*  ; end move_sprite
045FFC             0268*  
045FFC             0269*  sprite_compute_velocities:
045FFC FD 2A 90 5E 0270*      ld iy,(table_pointer)
       04          
046001 FD 17 0D    0271*      ld de,(iy+sprite_vel)
046004 CD A9 0B 04 0272*      call polar_to_cartesian
046008 FD 2A 90 5E 0273*      ld iy,(table_pointer)
       04          
04600D FD 0F 07    0274*      ld (iy+sprite_xvel),bc ; save x-velocity component
046010 FD 1F 0A    0275*      ld (iy+sprite_yvel),de ; save y-velocity component
046013 C9          0276*      ret
046014             0277*  ; end sprite_compute_velocities
046014             0278*  
046014             0279*  ; change an existing sprite to a new type, keeping its position and velocity the same
046014             0280*  ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
046014             0281*  alter_sprite:
046014             0282*  ; copy default settings to new sprite
046014 ED 33 16    0283*      lea iy,iy+sprite_definitions ; bump pointer to copy to
046017 FD E5       0284*      push iy ; pointer to default sprite settings
046019 D1          0285*      pop de ; address to copy to
04601A 01 13 00 00 0286*      ld bc,table_bytes_per_record-sprite_definitions ; number of bytes to copy
04601E ED B0       0287*      ldir ; copies new defaults existing sprite record
046020             0288*  ; return to caller
046020 FD 2A 90 5E 0289*      ld iy,(table_pointer) ; reset table_pointer
       04          
046025 FD CB 16 FE 0290*      set 7,(iy+sprite_type) ; set just spawned flag
046029 37          0291*      scf ; set carry flag to indicate success
04602A C9          0292*      ret
04602B             0293*  ; end alter_sprite
04602B             0294*  
04602B             0295*  ; create a new sprite at the same location as an existing sprite
04602B             0296*  ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
04602B             0297*  spawn_sprite:
04602B E5          0298*      push hl ; back up pointer to new sprite defaults
04602C CD CD 5E 04 0299*      call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
046030 E1          0300*      pop hl ; restore pointer to new sprite defaults
046031 D0          0301*      ret nc ; no carry means no free sprite slots, so we go home
046032             0302*  ; copy default settings to new sprite
046032 DD E5       0303*      push ix ; back up pointer to new sprite record
046034 ED 32 16    0304*      lea ix,ix+sprite_definitions ; bump pointer to copy to
046037 DD E5       0305*      push ix ; pointer to default sprite settings
046039 D1          0306*      pop de ; address to copy to
04603A 01 13 00 00 0307*      ld bc,table_bytes_per_record-sprite_definitions ; number of bytes to copy
04603E ED B0       0308*      ldir ; copies defaults to new sprite record
046040             0309*  ; return to caller
046040 DD E1       0310*      pop ix ; restore pointer to new sprite record
046042 DD CB 16 FE 0311*      set 7,(ix+sprite_type) ; set just spawned flag
046046 37          0312*      scf ; set carry flag to indicate success
046047 C9          0313*      ret
046048             0314*  
046048             0315*  ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
046048             0316*  spawn_sprite_from_sprite:
046048 CD 2B 60 04 0317*      call spawn_sprite
04604C D0          0318*      ret nc ; no carry means no free sprite slots, so we go home
04604D             0319*  ; copy sprite position, velocity and orientation from existing sprite
04604D FD 2A 90 5E 0320*      ld iy,(table_pointer) ; get existing sprite record
       04          
046052 FD 27 01    0321*      ld hl,(iy+sprite_x)
046055 DD 2F 01    0322*      ld (ix+sprite_x),hl
046058 FD 27 04    0323*      ld hl,(iy+sprite_y)
04605B DD 2F 04    0324*      ld (ix+sprite_y),hl
04605E             0325*  ; return to caller
04605E DD CB 16 FE 0326*      set 7,(ix+sprite_type) ; set just spawned flag
046062 37          0327*      scf ; set carry flag to indicate success
046063 C9          0328*      ret
046064             0329*  
046064             0330*  ; compute animation frame based on sprite_animation and sprite_heading
046064             0331*  ; inputs: table_pointer set to sprite record
046064             0332*  ; outputs: a, sprite_frame set to animation frame
046064             0333*  ; destroys: a,hl
046064             0334*  sprite_frame_heading_animation:
046064 FD 7E 11    0335*      ld a,(iy+sprite_heading+1) ; we want the integer portion
046067 CB 3F       0336*      srl a ; divide integer portion by 8
046069 CB 3F       0337*      srl a
04606B CB 3F       0338*      srl a
04606D FD 66 22    0339*      ld h,(iy+sprite_animation)
046070 2E 20       0340*      ld l,32 ; 32 orientation frames per animation
046072 ED 6C       0341*      mlt hl ; hl = offset from base animation
046074 85          0342*      add a,l ; modulo256 since sprite_frame is only 1 byte
046075 FD 77 28    0343*      ld (iy+sprite_frame),a
046078 C9          0344*      ret
046079             0345*  ; end sprite_frame_heading_animation
046079             0346*  
046079             0347*  ; compute animation frame based on sprite_heading
046079             0348*  ; inputs: table_pointer set to sprite record
046079             0349*  ; outputs: a, sprite_frame set to animation frame
046079             0350*  ; destroys: a,hl
046079             0351*  sprite_frame_heading:
046079 FD 7E 11    0352*      ld a,(iy+sprite_heading+1) ; we want the integer portion
04607C CB 3F       0353*      srl a ; divide integer portion by 8
04607E CB 3F       0354*      srl a
046080 CB 3F       0355*      srl a
046082 FD 77 28    0356*      ld (iy+sprite_frame),a
046085 C9          0357*      ret
046086             0358*  ; end sprite_frame_heading
046086             0359*  
046086             0360*  ; load a sprite with animation bitmaps
046086             0361*  ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
046086             0362*  sprite_load_frames:
046086             0363*  ; back up input parameters
046086 E5          0364*      push hl ; base bufferId
046087 C5          0365*      push bc ; bc = number of frames
046088 CD 13 20 04 0366*      call vdu_sprite_clear_frames
04608C C1          0367*      pop bc ; bc = number of frames
04608D E1          0368*      pop hl ; = base bufferId
04608E             0369*  @load_frames:
04608E C5          0370*      push bc ; back up loop counter
04608F E5          0371*      push hl ; back up base bufferId
046090 CD 55 21 04 0372*      call vdu_sprite_add_buff
046094 E1          0373*      pop hl ; restore base bufferId
046095 23          0374*      inc hl ; bump it to the next frame
046096             0375*  ; decrement loop counter
046096 C1          0376*      pop bc
046097 0B          0377*      dec bc
046098 79          0378*      ld a,c
046099 B7          0379*      or a
04609A C2 8E 60 04 0380*      jp nz,@load_frames
04609E 78          0381*      ld a,b
04609F B7          0382*      or a
0460A0 C2 8E 60 04 0383*      jp nz,@load_frames
0460A4 C9          0384*      ret
0460A5             0385*  ; end sprite_load_frames
0460A5             0386*  
0460A5             0387*  dump_sprite_record:
0460A5             0388*      ; call vdu_home_cursor
0460A5 CD 10 01 04 0389*      call printInline
0460A9 69 64 3A 20 0390*      asciz "id:   "
       20 20 00    
0460B0 DD 7E 00    0391*      ld a,(ix+sprite_id)
0460B3 CD 5A 01 04 0392*      call printHexA
0460B7             0393*  
0460B7 CD 10 01 04 0394*      call printInline
0460BB 0D 0A 78 3A 0395*      asciz "\r\nx:   "
       20 20 20 00 
0460C3 DD 27 01    0396*      ld hl,(ix+sprite_x)
0460C6 CD 38 03 04 0397*      call print_s168_hl
0460CA             0398*  
0460CA CD 10 01 04 0399*      call printInline
0460CE 0D 0A 79 3A 0400*      asciz "\r\ny:   "
       20 20 20 00 
0460D6 DD 27 04    0401*      ld hl,(ix+sprite_y)
0460D9 CD 38 03 04 0402*      call print_s168_hl
0460DD             0403*  
0460DD CD 10 01 04 0404*      call printInline
0460E1 0D 0A 78 76 0405*      asciz "\r\nxv:  "
       3A 20 20 00 
0460E9 DD 27 07    0406*      ld hl,(ix+sprite_xvel)
0460EC CD 38 03 04 0407*      call print_s168_hl
0460F0             0408*  
0460F0 CD 10 01 04 0409*      call printInline
0460F4 0D 0A 79 76 0410*      asciz "\r\nyv:  "
       3A 20 20 00 
0460FC DD 27 0A    0411*      ld hl,(ix+sprite_yvel)
0460FF CD 38 03 04 0412*      call print_s168_hl
046103             0413*  
046103 CD 10 01 04 0414*      call printInline
046107 0D 0A 76 3A 0415*      asciz "\r\nv:   "
       20 20 20 00 
04610F DD 27 0D    0416*      ld hl,(ix+sprite_vel)
046112 CD 38 03 04 0417*      call print_s168_hl
046116             0418*  
046116 CD 10 01 04 0419*      call printInline
04611A 0D 0A 68 64 0420*      asciz "\r\nhdg  "
       67 20 20 00 
046122 DD 27 10    0421*      ld hl,(ix+sprite_heading)
046125 CD 38 03 04 0422*      call print_s168_hl
046129             0423*  
046129 CD 10 01 04 0424*      call printInline
04612D 0D 0A 6F 72 0425*      asciz "\r\nori: "
       69 3A 20 00 
046135 DD 27 13    0426*      ld hl,(ix+sprite_orientation)
046138 CD 38 03 04 0427*      call print_s168_hl
04613C             0428*  
04613C CD 10 01 04 0429*      call printInline
046140 0D 0A 74 79 0430*      asciz "\r\ntyp: "
       70 3A 20 00 
046148 DD 7E 16    0431*      ld a,(ix+sprite_type)
04614B CD 5A 01 04 0432*      call printHexA
04614F             0433*  
04614F CD 10 01 04 0434*      call printInline
046153 0D 0A 42 49 0435*      asciz "\r\nBId: "
       64 3A 20 00 
04615B DD 27 17    0436*      ld hl,(ix+sprite_base_bufferId)
04615E CD 37 01 04 0437*      call printHex24
046162             0438*  
046162 CD 10 01 04 0439*      call printInline
046166 0D 0A 6D 50 0440*      asciz "\r\nmPg: "
       67 3A 20 00 
04616E DD 27 1A    0441*      ld hl,(ix+sprite_move_program)
046171 CD 37 01 04 0442*      call printHex24
046175             0443*  
046175 CD 10 01 04 0444*      call printInline
046179 0D 0A 63 6F 0445*      asciz "\r\ncol: "
       6C 3A 20 00 
046181 DD 7E 1D    0446*      ld a,(ix+sprite_collisions)
046184 CD B5 03 04 0447*      call printBin8
046188             0448*  
046188 CD 10 01 04 0449*      call printInline
04618C 0D 0A 73 7A 0450*      asciz "\r\nszx: "
       78 3A 20 00 
046194 DD 7E 1E    0451*      ld a,(ix+sprite_dim_x)
046197 CD 5A 01 04 0452*      call printHexA
04619B             0453*  
04619B CD 10 01 04 0454*      call printInline
04619F 0D 0A 73 7A 0455*      asciz "\r\nszy: "
       79 3A 20 00 
0461A7 DD 7E 1F    0456*      ld a,(ix+sprite_dim_y)
0461AA CD 5A 01 04 0457*      call printHexA
0461AE             0458*  
0461AE CD 10 01 04 0459*      call printInline
0461B2 0D 0A 23 6F 0460*      asciz "\r\n#ori:"
       72 69 3A 00 
0461BA DD 7E 20    0461*      ld a,(ix+sprite_num_orientations)
0461BD CD 5A 01 04 0462*      call printHexA
0461C1             0463*  
0461C1 CD 10 01 04 0464*      call printInline
0461C5 0D 0A 23 61 0465*      asciz "\r\n#ani:"
       6E 69 3A 00 
0461CD DD 7E 21    0466*      ld a,(ix+sprite_num_animations)
0461D0 CD 5A 01 04 0467*      call printHexA
0461D4             0468*  
0461D4 CD 10 01 04 0469*      call printInline
0461D8 0D 0A 61 6E 0470*      asciz "\r\nani: "
       69 3A 20 00 
0461E0 DD 7E 22    0471*      ld a,(ix+sprite_animation)
0461E3 CD 5A 01 04 0472*      call printHexA
0461E7             0473*  
0461E7 CD 10 01 04 0474*      call printInline
0461EB 0D 0A 61 6E 0475*      asciz "\r\nanit:"
       69 74 3A 00 
0461F3 DD 7E 23    0476*      ld a,(ix+sprite_animation_timer)
0461F6 CD 5A 01 04 0477*      call printHexA
0461FA             0478*  
0461FA CD 10 01 04 0479*      call printInline
0461FE 0D 0A 6D 76 0480*      asciz "\r\nmvt: "
       74 3A 20 00 
046206 DD 7E 24    0481*      ld a,(ix+sprite_move_timer)
046209 CD 5A 01 04 0482*      call printHexA
04620D             0483*  
04620D CD 10 01 04 0484*      call printInline
046211 0D 0A 6D 76 0485*      asciz "\r\nmvs: "
       73 3A 20 00 
046219 DD 7E 25    0486*      ld a,(ix+sprite_move_step)
04621C CD 5A 01 04 0487*      call printHexA
046220             0488*  
046220 CD 10 01 04 0489*      call printInline
046224 0D 0A 70 74 0490*      asciz "\r\npts: "
       73 3A 20 00 
04622C DD 7E 26    0491*      ld a,(ix+sprite_points)
04622F CD 5A 01 04 0492*      call printHexA
046233             0493*  
046233 CD 10 01 04 0494*      call printInline
046237 0D 0A 64 6D 0495*      asciz "\r\ndmg: "
       67 3A 20 00 
04623F DD 7E 27    0496*      ld a,(ix+sprite_shield_damage)
046242 CD 5A 01 04 0497*      call printHexA
046246             0498*  
046246 CD 10 01 04 0499*      call printInline
04624A 0D 0A 66 72 0500*      asciz "\r\nfrm: "
       6D 3A 20 00 
046252 DD 7E 28    0501*      ld a,(ix+sprite_frame)
046255 CD 5A 01 04 0502*      call printHexA
046259             0503*  
046259             0504*      ; call waitKeypress
046259 C9          0505*      ret
04625A             0060       include "state.inc"
04625A FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
046300             0002*  
046300             0003*  ; Game state variables
046300 0E 63 04    0004*  game_state:  dl game_main_menu
046303             0005*  
046303             0006*  do_game:
046303 2A 00 63 04 0007*      ld hl,(game_state)   ; Load the current game state
046307             0008*      callHL                ; Call the corresponding state handler
046307 01 0D 63 04 0001*M     ld bc,@F ; Address of first instruction after the jump
04630B C5          0002*M     push bc ; which constitutes the return address
04630C E9          0003*M     jp (hl) ; Jump to the address in HL
04630D             0004*M @@:
04630D C9          0009*      ret
04630E             0010*  
04630E             0011*  ; ========================
04630E             0012*  ; Main Game States
04630E             0013*  ; ========================
04630E             0014*  
04630E             0015*  game_main_menu:
04630E             0016*      ; Handle main menu options
04630E             0017*      ; Example: Check input for "Start Game"
04630E CD 18 64 04 0018*      call check_input_menu
046312 C2 17 63 04 0019*      jp nz, game_initialize ; Start game on selection
046316 C9          0020*      ret
046317             0021*  
046317             0022*  game_initialize:
046317             0023*  ; reset the sprite table
046317 CD B6 5E 04 0024*      call table_init
04631B AF          0025*      xor a
04631C 32 93 5E 04 0026*      ld (table_active_sprites),a
046320 21 00 5C 04 0027*      ld hl,table_base
046324 22 90 5E 04 0028*      ld (table_pointer),hl
046328             0029*  ; initialize sprites
046328 CD 01 5F 04 0030*      call sprites_init
04632C             0031*  ; initialize the first level
04632C 3E 00       0032*      ld a,tiles_dg
04632E CD 1A 57 04 0033*      call init_tileset
046332             0034*  ; initialize player
046332 21 00 00 00 0035*      ld hl,0
046336 22 00 5A 04 0036*      ld (player_score),hl
04633A 2A 06 5A 04 0037*      ld hl,(player_max_shields)
04633E 22 03 5A 04 0038*      ld (player_shields),hl
046342 3E 03       0039*      ld a,3
046344 32 09 5A 04 0040*      ld (player_ships),a
046348 CD 33 5A 04 0041*      call player_init
04634C             0042*  ; ; TODO: TEMPORARY UNTIL MAP LOGIC IMPLEMENTED
04634C             0043*  ;     ld hl,enemies_dead
04634C             0044*  ;     ld (enemies_state),hl
04634C             0045*  ; ; END TODO
04634C             0046*  ; set the game state to playing
04634C 21 56 63 04 0047*      ld hl,game_playing
046350 22 00 63 04 0048*      ld (game_state), hl
046354 C9          0049*      ret
046355             0050*  ; done initializing
046355 C9          0051*      ret
046356             0052*  
046356             0053*  game_playing:
046356             0054*  ; Main gameplay loop
046356 CD 10 66 04 0055*      call tiles_plot
04635A             0056*  
04635A             0057*  ; set gfx origin and viewport to playing field window
04635A 01 80 00 00 0058*      ld bc,origin_left
04635E 11 00 00 00 0059*      ld de,origin_top
046362 CD D0 1A 04 0060*      call vdu_set_gfx_origin
046366 01 00 00 00 0061*      ld bc,field_left
04636A 11 00 00 00 0062*      ld de,field_top
04636E DD 21 FF 00 0063*      ld ix,field_right
       00          
046373 FD 21 7F 01 0064*      ld iy,field_bottom
       00          
046378 CD EB 1A 04 0065*      call vdu_set_gfx_viewport
04637C             0066*  
04637C CD E9 63 04 0067*      call do_player
046380 CD 02 64 04 0068*      call do_enemies
046384             0069*  ; update UI: TODO make this a standalone function
046384 CD 1B 5B 04 0070*      call print_score
046388 C9          0071*      ret
046389             0072*  
046389             0073*  game_paused:
046389             0074*      ; Pause menu logic
046389 CD 1B 64 04 0075*      call check_input_pause
04638D C2 56 63 04 0076*      jp nz, game_playing ; Resume game
046391 CA 0E 63 04 0077*      jp z, game_main_menu ; Exit to main menu
046395 C9          0078*      ret
046396             0079*  
046396             0080*  game_level_transition:
046396             0081*      ; Handle level transitions
046396 CD 1C 64 04 0082*      call load_next_level
04639A 21 56 63 04 0083*      ld hl, game_playing
04639E 22 00 63 04 0084*      ld (game_state), hl
0463A2 C9          0085*      ret
0463A3             0086*  
0463A3             0087*  game_over:
0463A3             0088*      ; Display game over screen
0463A3 CD 1D 64 04 0089*      call display_game_over
0463A7 C2 0E 63 04 0090*      jp nz, game_main_menu ; Return to main menu on input
0463AB C9          0091*      ret
0463AC             0092*  
0463AC             0093*  game_victory:
0463AC             0094*      ; Display victory screen
0463AC CD 1E 64 04 0095*      call display_victory
0463B0 C2 0E 63 04 0096*      jp nz, game_main_menu ; Return to main menu on input
0463B4 C9          0097*      ret
0463B5             0098*  
0463B5             0099*  ; ========================
0463B5             0100*  ; Supporting States
0463B5             0101*  ; ========================
0463B5             0102*  
0463B5             0103*  game_loading:
0463B5             0104*      ; Show loading screen while preparing assets
0463B5 CD 1F 64 04 0105*      call load_resources
0463B9 21 17 63 04 0106*      ld hl, game_initialize
0463BD 22 00 63 04 0107*      ld (game_state), hl
0463C1 C9          0108*      ret
0463C2             0109*  
0463C2             0110*  game_cutscene:
0463C2             0111*      ; Play a non-interactive cutscene
0463C2 CD 20 64 04 0112*      call play_cutscene
0463C6 C2 56 63 04 0113*      jp nz, game_playing ; Return to gameplay after cutscene
0463CA C9          0114*      ret
0463CB             0115*  
0463CB             0116*  game_inventory:
0463CB             0117*      ; Open inventory or shop
0463CB CD 21 64 04 0118*      call display_inventory
0463CF C2 56 63 04 0119*      jp nz, game_playing ; Return to gameplay after inventory close
0463D3 C9          0120*      ret
0463D4             0121*  
0463D4             0122*  game_map:
0463D4             0123*      ; Display map or quest
0463D4 CD 22 64 04 0124*      call display_map
0463D8 C2 56 63 04 0125*      jp nz, game_playing ; Return to gameplay after map close
0463DC C9          0126*      ret
0463DD             0127*  
0463DD             0128*  game_exit:
0463DD             0129*      ; Handle exit logic
0463DD CD 23 64 04 0130*      call save_game
0463E1 C3 24 64 04 0131*      jp exit_game         ; Safely shut down
0463E5 C9          0132*      ret
0463E6             0133*  
0463E6             0134*  ; ========================
0463E6             0135*  ; Sub-state branching (Example for player state)
0463E6             0136*  ; ========================
0463E6             0137*  
0463E6 F4 63 04    0138*  player_state:  dl player_alive ; Player state variable
0463E9             0139*  
0463E9             0140*  do_player:
0463E9 2A E6 63 04 0141*      ld hl,(player_state)
0463ED             0142*      callHL                ; Call the corresponding player state
0463ED 01 F3 63 04 0001*M     ld bc,@F ; Address of first instruction after the jump
0463F1 C5          0002*M     push bc ; which constitutes the return address
0463F2 E9          0003*M     jp (hl) ; Jump to the address in HL
0463F3             0004*M @@:
0463F3 C9          0143*      ret
0463F4             0144*  
0463F4             0145*  player_alive:
0463F4 CD 80 5A 04 0146*      call player_input     ; Handle player input
0463F8 CD 29 56 04 0147*      call laser_control    ; Handle laser movement and collision detection
0463FC C9          0148*      ret
0463FD             0149*  
0463FD             0150*  player_dead:
0463FD CD 29 56 04 0151*      call laser_control    ; Handle laser movement and collision detection
046401 C9          0152*      ret
046402             0153*  
046402             0154*  do_enemies:
046402 2A 0D 64 04 0155*      ld hl,(enemies_state)
046406             0156*      callHL
046406 01 0C 64 04 0001*M     ld bc,@F ; Address of first instruction after the jump
04640A C5          0002*M     push bc ; which constitutes the return address
04640B E9          0003*M     jp (hl) ; Jump to the address in HL
04640C             0004*M @@:
04640C C9          0157*      ret
04640D 13 64 04    0158*  enemies_state: dl enemies_alive
046410             0159*  
046410             0160*  enemies_dead:
046410 C9          0161*      ret
046411             0162*  
046411             0163*  enemies_respawning:
046411 C9          0164*      ret
046412             0165*  
046412             0166*  enemies_respawn:
046412 C9          0167*      ret
046413             0168*  
046413             0169*  enemies_alive:
046413 CD 33 22 04 0170*      call move_enemies
046417 C9          0171*      ret
046418             0172*  
046418             0173*  check_input_menu:
046418 C9          0174*      ret
046419             0175*  
046419             0176*  update_game_world:
046419 C9          0177*      ret
04641A             0178*  
04641A             0179*  check_game_events:
04641A C9          0180*      ret
04641B             0181*  
04641B             0182*  check_input_pause:
04641B C9          0183*      ret
04641C             0184*  
04641C             0185*  load_next_level:
04641C C9          0186*      ret
04641D             0187*  
04641D             0188*  display_game_over:
04641D C9          0189*      ret
04641E             0190*  
04641E             0191*  display_victory:
04641E C9          0192*      ret
04641F             0193*  
04641F             0194*  load_resources:
04641F C9          0195*      ret
046420             0196*  
046420             0197*  play_cutscene:
046420 C9          0198*      ret
046421             0199*  
046421             0200*  display_inventory:
046421 C9          0201*      ret
046422             0202*  
046422             0203*  display_map:
046422 C9          0204*      ret
046423             0205*  
046423             0206*  save_game:
046423 C9          0207*      ret
046424             0208*  
046424             0209*  exit_game:
046424 C9          0210*      ret
046425             0211*  
046425             0061       include "targeting.inc"
046425 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
046500             0002*  
046500             0003*  ; compute orientation to player
046500             0004*  ; based on relative positions
046500             0005*  ; returns: h.l 16.8 fixed angle256 to player
046500             0006*  ;    ub.c and ud.e as 16.8 signed fixed point numbers
046500             0007*  ;    representing delta-x/y *to* target respectively
046500             0008*  orientation_to_player:
046500 FD 2A 90 5E 0009*      ld iy,(table_pointer)
       04          
046505 FD 07 01    0010*      ld bc,(iy+sprite_x)
046508 FD 17 04    0011*      ld de,(iy+sprite_y)
04650B DD 2A 0B 5A 0012*      ld ix,(player_x)
       04          
046510 FD 2A 0E 5A 0013*      ld iy,(player_y)
       04          
046515 CD 1C 0C 04 0014*      call dxy168
046519 C5          0015*      push bc ; dx
04651A D5          0016*      push de ; dy
04651B CD 9D 0C 04 0017*      call atan2_168fast ; uh.l = angle to player
04651F 22 2B 65 04 0018*      ld (Bearing_t),hl
046523 D1          0019*      pop de ; dy
046524 C1          0020*      pop bc ; dx
046525 FD 2A 90 5E 0021*      ld iy,(table_pointer)
       04          
04652A C9          0022*      ret
04652B             0023*  ; end orientation_to_player
04652B             0024*  
04652B             0025*  ; targeting_computer variables fixed 16.8 format
04652B 00 00 00    0026*  Bearing_t: dl 0x000000 ; angle to target
04652E 00 00 00    0027*  Heading_t: dl 0x000000 ; angle of target motion
046531 00 00 00    0028*  Vp: dl 0x000000 ; velocity of projectile
046534 00 00 00    0029*  Vp_x: dl 0x000000 ; x component of projectile velocity
046537 00 00 00    0030*  Vp_y: dl 0x000000 ; y component of projectile velocity
04653A 00 00 00    0031*  Vt: dl 0x000000 ; velocity of target
04653D 00 00 00    0032*  Vt_x: dl 0x000000 ; x component of target velocity
046540 00 00 00    0033*  Vt_y: dl 0x000000 ; y component of target velocity
046543 00 00 00    0034*  Heading_p: dl 0x000000 ; angle of projectile motion
046546 00 00 00    0035*  lead_angle: dl 0x000000 ; lead angle
046549             0036*  
046549             0037*  ; Inputs:   Vp velocity of projectile set,
046549             0038*  ;           IY pointed to sprite record,
046549             0039*  ;           player position and velocities correctly set
046549             0040*  ; Outputs:  uh.l is the 16.8 fixed firing angle256
046549             0041*  ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
046549             0042*  ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
046549             0043*  targeting_computer:
046549             0044*  ; ; compute target velocity from x,y component velocities
046549             0045*  ;     ld bc,(player_xvel)
046549             0046*  ;     ld de,(player_yvel)
046549             0047*  ;     ld hl,-1*256 ; account for vertical ground movement
046549             0048*  ;     add hl,de
046549             0049*  ;     ex de,hl ; ud.e = player_yvel-1
046549             0050*  ;     call cartesian_to_polar_sm ; uh.l = Heading_t, ud.e = Vt
046549             0051*  ;     ld (Heading_t),hl ; PASSES
046549             0052*  ;     ld (Vt),de ; PASSES
046549             0053*  ; ; Bearing_t should have been set by prerequisite call to orientation_to_player
046549             0054*  ; ; compute Heading_t-Bearing_t PASSES
046549             0055*  ;     ld de,(Bearing_t)
046549             0056*  ;     and a ; clear carry
046549             0057*  ;     sbc hl,de ; Uh.l = Heading_t-Bearing_t
046549             0058*  ; ; compute sin(Heading_t-Bearing_t)
046549             0059*  ;     call sin168 ; uh.l = sin(Heading_t-Bearing_t)
046549             0060*  ; ; compute (Vt*sin(Heading_t-Bearing_t))
046549             0061*  ;     ld de,(Vt)
046549             0062*  ;     call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
046549             0063*  ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
046549             0064*  ;     ld de,(Vp)
046549             0065*  ;     call sdiv168 ; ud.e = (Vt*sin(Heading_t-Bearing_t)) / Vp
046549             0066*  ;     ex de,hl ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
046549             0067*  ; ; answer is in radians, convert to degrees256
046549             0068*  ;     ld de,0x0028BE ; 40.74 = 57.29578*256/360
046549             0069*  ;     call smul168 ; uh.l = angle in degrees256
046549             0070*  ;     ld (lead_angle),hl ; DEBUG
046549             0071*  ; ; add lead angle to target bearing
046549             0072*  ;     ld de,(Bearing_t)
046549             0073*  ;     add hl,de ; h.l = lead angle+target bearing
046549 E5          0074*      push hl
04654A             0075*  
04654A             0076*  ; compute component projectile velocities
04654A ED 5B 31 65 0077*      ld de,(Vp) ; Vp should have been set by caller
       04          
04654F CD A9 0B 04 0078*      call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
046553 ED 43 34 65 0079*      ld (Vp_x),bc
       04          
046558 ED 53 37 65 0080*      ld (Vp_y),de
       04          
04655D E1          0081*      pop hl ; uh.l = lead angle+target bearing
04655E 22 43 65 04 0082*      ld (Heading_p),hl
046562             0083*  
046562 C9          0084*      ret
046563             0085*  
046563             0086*  ; debug print the results
046563             0087*      PUSH_ALL
046563 08          0001*M     ex af,af'
046564 D9          0002*M     exx
046565 F5          0003*M     push af
046566 E5          0004*M     push hl
046567 C5          0005*M     push bc
046568 D5          0006*M     push de
046569             0007*M 
046569 08          0008*M     ex af,af'
04656A D9          0009*M     exx
04656B F5          0010*M     push af
04656C E5          0011*M     push hl
04656D C5          0012*M     push bc
04656E D5          0013*M     push de
04656F DD E5       0014*M     push ix
046571 FD E5       0015*M     push iy
046573 CD 00 1A 04 0088*      call vdu_home_cursor
046577 CD 2C 01 04 0089*      call printNewLine
04657B CD 10 01 04 0090*      call printInline
04657F 42 74 20 00 0091*      asciz "Bt "
046583 2A 2B 65 04 0092*      ld hl,(Bearing_t)
046587 CD 38 03 04 0093*      call print_s168_hl
04658B             0094*  
04658B             0095*      ; call printInline
04658B             0096*      ; asciz "\r\nHt "
04658B             0097*      ; ld hl,(Heading_t)
04658B             0098*      ; call print_s168_hl
04658B             0099*  
04658B             0100*      ; call printInline
04658B             0101*      ; asciz "\r\nVt "
04658B             0102*      ; ld hl,(Vt)
04658B             0103*      ; call print_s168_hl
04658B             0104*  
04658B             0105*      ; call printInline
04658B             0106*      ; asciz "\r\nVtx"
04658B             0107*      ; ld hl,(player_xvel)
04658B             0108*      ; call print_s168_hl
04658B             0109*  
04658B             0110*      ; call printInline
04658B             0111*      ; asciz "\r\nVty"
04658B             0112*      ; ld hl,(player_yvel)
04658B             0113*      ; ld de,-1*256 ; account for vertical ground movement
04658B             0114*      ; add hl,de
04658B             0115*      ; call print_s168_hl
04658B             0116*  
04658B CD 10 01 04 0117*      call printInline
04658F 0D 0A 4C 64 0118*      asciz "\r\nLda"
       61 00       
046595 2A 46 65 04 0119*      ld hl,(lead_angle)
046599 CD 38 03 04 0120*      call print_s168_hl
04659D             0121*  
04659D CD 10 01 04 0122*      call printInline
0465A1 0D 0A 48 70 0123*      asciz "\r\nHp "
       20 00       
0465A7 2A 43 65 04 0124*      ld hl,(Heading_p)
0465AB CD 38 03 04 0125*      call print_s168_hl
0465AF             0126*  
0465AF             0127*      ; call printInline
0465AF             0128*      ; asciz "\r\nVp "
0465AF             0129*      ; ld hl,(Vp)
0465AF             0130*      ; call print_s168_hl
0465AF             0131*  
0465AF             0132*      ; call printInline
0465AF             0133*      ; asciz "\r\nVpx"
0465AF             0134*      ; ld hl,(Vp_x)
0465AF             0135*      ; call print_s168_hl
0465AF             0136*  
0465AF             0137*      ; call printInline
0465AF             0138*      ; asciz "\r\nVpy"
0465AF             0139*      ; ld hl,(Vp_y)
0465AF             0140*      ; call print_s168_hl
0465AF             0141*  
0465AF             0142*      POP_ALL
0465AF FD E1       0001*M     pop iy
0465B1 DD E1       0002*M     pop ix
0465B3 D1          0003*M     pop de
0465B4 C1          0004*M     pop bc
0465B5 E1          0005*M     pop hl
0465B6 F1          0006*M     pop af
0465B7 08          0007*M     ex af,af'
0465B8 D9          0008*M     exx
0465B9             0009*M 
0465B9 D1          0010*M     pop de
0465BA C1          0011*M     pop bc
0465BB E1          0012*M     pop hl
0465BC F1          0013*M     pop af
0465BD 08          0014*M     ex af,af'
0465BE D9          0015*M     exx
0465BF C9          0143*      ret
0465C0             0062       include "tiles.inc"
0465C0 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
046600             0002*  
046600             0003*  ; ######### TILES #########
046600             0004*  ; TODO: implement buffering of tiles here when there isn't other stuff to do
046600             0005*  ; tiles_defs: ds 256*16 ; 256 rows of 16 tiles, each tile is a byte
046600 00 00 00    0006*  tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
046603 00 00 00    0007*  tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
046606             0008*      ; initialize to zero for a maximum of 256 rows in a level
046606 00          0009*  tiles_cols: db 0 ; number of tile columns in the current level
046607             0010*  
046607 00 00 00    0011*  cur_baseBufferId: dl 0
04660A 00 00 00    0012*  tiles_x_plot: dl 0
04660D F1 FF FF    0013*  tiles_y_plot: dl -15
046610             0014*  
046610             0015*  tiles_plot:
046610             0016*  ; set gfx viewport to playing field window
046610 01 00 00 00 0017*      ld bc,field_left
046614 11 00 00 00 0018*      ld de,field_top
046618 DD 21 FF 00 0019*      ld ix,field_right
       00          
04661D FD 21 7F 01 0020*      ld iy,field_bottom
       00          
046622 CD EB 1A 04 0021*      call vdu_set_gfx_viewport
046626             0022*  ; move the background down one pixel
046626 3E 02       0023*      ld a,2 ; current gfx viewport
046628 2E 02       0024*      ld l,2 ; direction=down
04662A 26 01       0025*      ld h,1 ; speed=1 px
04662C CD 63 1A 04 0026*      call vdu_scroll_down
046630             0027*  ; set gfx viewport to one scanline to optimise plotting tiles
046630 01 00 00 00 0028*      ld bc,0 ; leftmost x-coord
046634 11 00 00 00 0029*      ld de,0 ; topmost y-coord
046638 DD 21 FF 00 0030*      ld ix,255 ; rightmost x-coord
       00          
04663D FD 21 00 00 0031*      ld iy,0 ; bottommost y-coord
       00          
046642 CD EB 1A 04 0032*      call vdu_set_gfx_viewport
046646             0033*  ; plot the background
046646 CD 4E 67 04 0034*      call bg_plot
04664A             0035*  ; initialize tiles loop
04664A 21 00 00 00 0036*      ld hl,0 ; init plotting x-coordinate
04664E 22 0A 66 04 0037*      ld (tiles_x_plot),hl
046652 2A 00 66 04 0038*      ld hl,(tiles_row_defs)
046656 3A 06 66 04 0039*      ld a,(tiles_cols)
04665A 47          0040*      ld b,a ; column loop counter
04665B             0041*  @loop:
04665B C5          0042*      push bc ; save the loop counter
04665C             0043*  ; read the tile defintion for the current column
04665C 7E          0044*      ld a,(hl) ; a has tile definition
04665D E5          0045*      push hl ; save pointer to tile definition
04665E 2A 07 66 04 0046*      ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
046662 6F          0047*      ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
046663 CD 38 1B 04 0048*      call vdu_buff_select ; tile bitmap buffer is now active
046667             0049*  ; plot the active bitmap
046667 ED 4B 0A 66 0050*      ld bc,(tiles_x_plot)
       04          
04666C ED 5B 0D 66 0051*      ld de,(tiles_y_plot)
       04          
046671 CD 20 1F 04 0052*      call vdu_plot_bmp
046675             0053*  ; bump x-coords the width of one tile and save it
046675 2A 0A 66 04 0054*      ld hl,(tiles_x_plot)
046679 01 10 00 00 0055*      ld bc,16
04667D 09          0056*      add hl,bc
04667E 22 0A 66 04 0057*      ld (tiles_x_plot),hl
046682             0058*  ; prepare to loop to next column
046682 E1          0059*      pop hl ; get back pointer to tile def
046683 23          0060*      inc hl ; bump it to the next column
046684 C1          0061*      pop bc ; snag our loop counter
046685 10 D4       0062*      djnz @loop
046687             0063*  ; increment tiles plotting y-coordinate
046687             0064*  ; when it hits zero, we go to next row of tiles in the map
046687             0065*  ; (we use ix b/c we want to preserve hl for the next step)
046687 DD 21 0D 66 0066*      ld ix,tiles_y_plot
       04          
04668C DD 34 00    0067*      inc (ix)
04668F C0          0068*      ret nz
046690             0069*  ; do active tiles
046690 E5          0070*      push hl ; save pointer to next row tile def
046691 CD C3 66 04 0071*      call do_active_tiles
046695 E1          0072*      pop hl ; get back pointer to next row tile def
046696             0073*  ; time to bump tiles_row_defs to next row
046696             0074*  ; (hl was already there at the end of the loop)
046696 22 00 66 04 0075*      ld (tiles_row_defs),hl
04669A             0076*  ; reset coords to plot next row of tiles
04669A 21 00 00 00 0077*      ld hl,0
04669E 22 0A 66 04 0078*      ld (tiles_x_plot),hl
0466A2 21 F1 FF FF 0079*      ld hl,-15
0466A6 22 0D 66 04 0080*      ld (tiles_y_plot),hl
0466AA             0081*  ; decrement tiles row counter
0466AA 21 03 66 04 0082*      ld hl,tiles_row
0466AE 35          0083*      dec (hl)
0466AF C0          0084*      ret nz
0466B0             0085*  @inc_level:
0466B0             0086*  ; increase the number of enemy sprites
0466B0 3A 32 22 04 0087*      ld a,(max_enemy_sprites)
0466B4 3C          0088*      inc a
0466B5 FE 10       0089*      cp table_max_records ; if we're at the global limit,skip ahead at max level
0466B7 CA 6C 57 04 0090*      jp z,next_level
0466BB 32 32 22 04 0091*      ld (max_enemy_sprites),a ; otherwise save the updated number
0466BF C3 6C 57 04 0092*      jp next_level
0466C3             0093*  ; end tiles_plot
0466C3             0094*  
0466C3             0095*  do_active_tiles:
0466C3             0096*  ; initialize tiles loop
0466C3 21 00 00 00 0097*      ld hl,0 ; init plotting x-coordinate
0466C7 22 0A 66 04 0098*      ld (tiles_x_plot),hl
0466CB 2A 00 66 04 0099*      ld hl,(tiles_row_defs)
0466CF 3A 06 66 04 0100*      ld a,(tiles_cols)
0466D3 47          0101*      ld b,a ; column loop counter
0466D4             0102*  @loop:
0466D4 C5          0103*      push bc ; save the loop counter
0466D5             0104*  ; read the tile defintion for the current column
0466D5 7E          0105*      ld a,(hl) ; a has tile definition
0466D6 E5          0106*      push hl ; save pointer to tile definition
0466D7 B7          0107*      or a ; check for null tile
0466D8 CA F4 66 04 0108*      jp z,@next_tile ; skip to next tile if null
0466DC FE 11       0109*      cp 17 ; carry reset if active tile
0466DE D2 F4 66 04 0110*      jp nc,@next_tile ; skip to next tile if not active
0466E2             0111*  ; call the tile activation routine
0466E2 21 4F 67 04 0112*      ld hl,tile_activation_routines
0466E6 16 03       0113*      ld d,3 ; three bytes per table entry
0466E8 5F          0114*      ld e,a ; a is the tile type
0466E9 ED 5C       0115*      mlt de ; de is now the offset to the table entry
0466EB 19          0116*      add hl,de ; hl is now the address of the table entry
0466EC ED 27       0117*      ld hl,(hl) ; hl is now the activation routine address
0466EE             0118*      callHL ; call the activation routine
0466EE 01 F4 66 04 0001*M     ld bc,@F ; Address of first instruction after the jump
0466F2 C5          0002*M     push bc ; which constitutes the return address
0466F3 E9          0003*M     jp (hl) ; Jump to the address in HL
0466F4             0004*M @@:
0466F4             0119*  @next_tile:
0466F4             0120*  ; bump x-coords the width of one tile and save it
0466F4 2A 0A 66 04 0121*      ld hl,(tiles_x_plot)
0466F8 01 10 00 00 0122*      ld bc,16
0466FC 09          0123*      add hl,bc
0466FD 22 0A 66 04 0124*      ld (tiles_x_plot),hl
046701             0125*  ; prepare to loop to next column
046701 E1          0126*      pop hl ; get back pointer to tile def
046702 23          0127*      inc hl ; bump it to the next column
046703 C1          0128*      pop bc ; snag our loop counter
046704 10 CE       0129*      djnz @loop
046706 C9          0130*      ret ; done
046707             0131*  ; end do_active_tiles
046707             0132*  
046707             0133*  ; create a new sprite at the same location as an active tile
046707             0134*  ; inputs: hl = pointer to new sprite default settings, tiles_x_plot, tiles_y_plot set
046707             0135*  spawn_sprite_from_tile:
046707 CD 2B 60 04 0136*      call spawn_sprite
04670B D0          0137*      ret nc ; no carry means no free sprite slots, so we go home
04670C             0138*  ; update the new sprite's position and make it visible
04670C 2A 0A 66 04 0139*      ld hl,(tiles_x_plot)
046710             0140*      hlu_mul256
046710 29          0001*M     add hl,hl ; * 2
046711 29          0002*M     add hl,hl ; * 4
046712 29          0003*M     add hl,hl ; * 8
046713 29          0004*M     add hl,hl ; * 16
046714 29          0005*M     add hl,hl ; * 32
046715 29          0006*M     add hl,hl ; * 64
046716 29          0007*M     add hl,hl ; * 128
046717 29          0008*M     add hl,hl ; * 256
046718 E5          0141*      push hl
046719 C1          0142*      pop bc
04671A DD 0F 01    0143*      ld (ix+sprite_x),bc
04671D 11 00 FF FF 0144*      ld de,-1*256 ; TODO: implement y-coord for reals
046721 DD 1F 04    0145*      ld (ix+sprite_y),de
046724 21 00 01 00 0146*      ld hl,1*256
046728 DD 2F 0A    0147*      ld (ix+sprite_yvel),hl
04672B             0148*  ; return to caller
04672B 37          0149*      scf ; set carry flag to indicate success
04672C C9          0150*      ret
04672D             0151*  ; end spawn_sprite_from_tile
04672D             0152*  
04672D             0153*  move_active_tile:
04672D             0154*  ; y-axis movement
04672D FD 27 04    0155*      ld hl,(iy+sprite_y)
046730 FD 17 0A    0156*      ld de,(iy+sprite_yvel)
046733 19          0157*      add hl,de
046734 FD 2F 04    0158*      ld (iy+sprite_y),hl
046737             0159*  ; detect screen edge collisions
046737 AF          0160*      xor a ; reset screen edge collision flag and clear carry
046738 32 94 5E 04 0161*      ld (sprite_screen_edge),a
04673C             0162*  ; y-axis bottom is all we need to test
04673C 11 00 91 FE 0163*      ld de,-sprite_bottom*256
046740 ED 5A       0164*      adc hl,de
046742 F2 47 67 04 0165*      jp p,@bottom ; scrolled off screen so deactivate
046746 C9          0166*      ret ; still on screen so do nothing further
046747             0167*  @bottom:
046747 3E 04       0168*      ld a,collide_bottom
046749 32 94 5E 04 0169*      ld (sprite_screen_edge),a
04674D C9          0170*      ret
04674E             0171*  
04674E             0172*  
04674E             0173*  ; bg_y_plot: dl -1
04674E             0174*  ; bg_bufferId: dl BUF_STATION_BG_00 ; default bufferId for background tiles
04674E             0175*  
04674E             0176*  bg_plot: ; TODO: implement this
04674E             0177*  ; ; load current bg tile bufferId as default
04674E             0178*  ;     ld hl,(bg_bufferId)
04674E             0179*  ; ; check whether it is time for a new background tile
04674E             0180*  ;     ld a,(bg_y_plot)
04674E             0181*  ;     inc a
04674E             0182*  ;     ld (bg_y_plot),a
04674E             0183*  ;     jp nz,@F ; not time for a new tile so draw current one
04674E             0184*  ; ; load the next background tile
04674E             0185*  ;     ld hl,BUF_STATION_BG_00
04674E             0186*  ;     call rand_8
04674E             0187*  ;     and %0000011
04674E             0188*  ;     add a,l
04674E             0189*  ;     ld l,a
04674E             0190*  ;     ld a,0
04674E             0191*  ;     adc a,h
04674E             0192*  ;     ld h,a
04674E             0193*  ;     ld (bg_bufferId),hl
04674E             0194*  ; @@:
04674E             0195*  ;     call vdu_buff_select
04674E             0196*  ;     ld bc,0
04674E             0197*  ;     ld de,(bg_y_plot)
04674E             0198*  ;     inc de
04674E             0199*  ;     call vdu_plot_bmp
04674E             0200*  ; all done
04674E C9          0201*      ret
04674F             0202*  
04674F             0203*  ; ###### TODO: NEW CODE TO IMPLEMENT ######
04674F             0204*  tile_pad_small: equ 1
04674F             0205*  tile_pad_med: equ 2
04674F             0206*  tile_pad_large: equ 3
04674F             0207*  tile_pad_huge: equ 4
04674F             0208*  tile_turret_fireball: equ 5
04674F             0209*  tile_laser_turret: equ 6
04674F             0210*  tile_twin_laser_turret: equ 7
04674F             0211*  tile_gatling_turret: equ 8
04674F             0212*  tile_electrode_r: equ 9
04674F             0213*  tile_electrode_u: equ 10
04674F             0214*  tile_piston_r: equ 11
04674F             0215*  tile_piston_u: equ 12
04674F             0216*  tile_spark_r: equ 13
04674F             0217*  tile_spark_u: equ 14
04674F             0218*  tile_flame_r: equ 15
04674F             0219*  tile_flame_u: equ 16
04674F             0220*  
04674F             0221*  active_tile_timer: equ 24 ; 2/10ths of a second
04674F             0222*  tile_activation_routines:
04674F 82 67 04    0223*      dl activate_null_tile ; dummy spacer since tiled is 1-based
046752 13 68 04    0224*      dl activate_pad_small
046755 82 67 04    0225*      dl activate_null_tile  ;  activate_pad_med
046758 82 67 04    0226*      dl activate_null_tile  ;  activate_pad_large
04675B 82 67 04    0227*      dl activate_null_tile  ;  activate_pad_huge
04675E 13 69 04    0228*      dl activate_turret_fireball
046761 82 67 04    0229*      dl activate_null_tile  ;  activate_laser_turret
046764 82 67 04    0230*      dl activate_null_tile  ;  activate_twin_laser_turret
046767 82 67 04    0231*      dl activate_null_tile  ;  activate_gatling_turret
04676A 82 67 04    0232*      dl activate_null_tile  ;  activate_electrode_r
04676D 82 67 04    0233*      dl activate_null_tile  ;  activate_electrode_u
046770 82 67 04    0234*      dl activate_null_tile  ;  activate_piston_r
046773 82 67 04    0235*      dl activate_null_tile  ;  activate_piston_u
046776 82 67 04    0236*      dl activate_null_tile  ;  activate_spark_r
046779 82 67 04    0237*      dl activate_null_tile  ;  activate_spark_u
04677C 82 67 04    0238*      dl activate_null_tile  ;  activate_flame_r
04677F 82 67 04    0239*      dl activate_null_tile  ;  activate_flame_u
046782             0240*  ; end tile_activation_routines
046782             0241*  
046782             0242*  activate_null_tile:
046782 C9          0243*      ret ; dummy routine, do nothing
046783             0244*  
046783             0245*  ; ld_act_laser_turret:
046783             0246*  ;     ; call sprite_variables_to_stack
046783             0247*  
046783             0248*  ;     ld hl,move_laser_turret
046783             0249*  ;     ld (sprite_move_program),hl
046783             0250*  
046783             0251*  ;     xor a
046783             0252*  ;     ld (sprite_animation),a
046783             0253*  ;     ld (sprite_move_step),a
046783             0254*  
046783             0255*  ;     call rand_8     ; snag a random number
046783             0256*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
046783             0257*  ;     add a,64 ; range is now 64-127
046783             0258*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
046783             0259*  
046783             0260*  ;     ld a,%10 ; collides with laser but not player
046783             0261*  ;     ld (iy+sprite_collisions),a
046783             0262*  
046783             0263*  ;     ld a,#10 ; BCD
046783             0264*  ;     ld (sprite_points),a
046783             0265*  ;     ld a,0 ; binary
046783             0266*  ;     ld (sprite_shield_damage),a
046783             0267*  
046783             0268*  ;     ld hl,tile_turret_fireball ; dt_ld_act loads this to sprite_base_bufferId
046783             0269*  ;     jp dt_ld_act
046783             0270*  
046783             0271*  
046783             0272*  ; move_laser_turret:
046783             0273*  ; ; compute orientation to player
046783             0274*  ;     call orientation_to_player
046783             0275*  ; ; h.l 8.8 fixed angle256 to player
046783             0276*  ; ; bc and de as signed 16-bit integers
046783             0277*  ; ; representing delta-x/y *to* target respectively
046783             0278*  ;     ld (Bearing_t),hl
046783             0279*  ;     ld hl,0x0400
046783             0280*  ;     ld (Vp),hl
046783             0281*  ;     call targeting_computer
046783             0282*  ;     ld (sprite_heading),hl ; store bearing to player
046783             0283*  ; ; is it time to launch a fireball?
046783             0284*  ;     ld hl,sprite_move_timer
046783             0285*  ;     dec (hl)
046783             0286*  ;     jp nz,move_laser_turret_boilerplate
046783             0287*  ;     call fireballs_init
046783             0288*  ;     ; reset move timer so can fire again if player doesn't take us out
046783             0289*  ;     call rand_8     ; snag a random number
046783             0290*  ;     and %00011111   ; keep only 5 lowest bits (max 31)
046783             0291*  ;     add a,64 ; range is now 64-127
046783             0292*  ;     ld (sprite_move_timer),a ; when this hits zero,will spawn a fireball
046783             0293*  ; move_laser_turret_boilerplate:
046783             0294*  ;     call move_active_tiles
046783             0295*  ;     call check_collisions
046783             0296*  ;     ret
046783             0297*  
046783             0298*  
046783             0299*  ; fireballs_init:
046783             0300*  ;     ; call sprite_variables_to_stack
046783             0301*  
046783             0302*  ;     ld hl,enemy_fireball
046783             0303*  ;     ld (sprite_base_bufferId),hl
046783             0304*  
046783             0305*  ;     ld hl,move_fireballs
046783             0306*  ;     ld (sprite_move_program),hl
046783             0307*  
046783             0308*  ;     ld a,%11 ; collides with laser and player
046783             0309*  ;     ld (iy+sprite_collisions),a
046783             0310*  
046783             0311*  ;     ld hl,(Vp)
046783             0312*  ;     ld (sprite_vel),hl
046783             0313*  ;     ld hl,(Vp_x)
046783             0314*  ;     ld (sprite_xvel),hl
046783             0315*  ;     ld hl,(Vp_y)
046783             0316*  ;     inc h ; account for ground movement
046783             0317*  ;     ld (sprite_yvel),hl
046783             0318*  
046783             0319*  ;     xor a ; zero a
046783             0320*  ;     ld (sprite_animation),a
046783             0321*  ;     ld (sprite_move_step),a
046783             0322*  ;     ld (sprite_move_timer),a
046783             0323*  
046783             0324*  ;     ld a,6 ; 1/10th of a second timer
046783             0325*  ;     ld (sprite_animation_timer),a
046783             0326*  
046783             0327*  ;     ld a,0x00 ; BCD
046783             0328*  ;     ld (sprite_points),a
046783             0329*  ;     ld a,1 ; binary
046783             0330*  ;     ld (sprite_shield_damage),a
046783             0331*  
046783             0332*  ;     call table_add_record ; plops that on the sprite stack for later
046783             0333*  ;     ; call sprite_variables_from_stack ; come back to where we started
046783             0334*  ;     ret
046783             0063       include "tile_pad_small.inc"
046783 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
046800             0002*  pad_small_defaults:
046800 01          0003*      db tile_pad_small       ; type
046801 0A 01 00    0004*      dl BUF_PAD              ; base_bufferId
046804 22 68 04    0005*      dl move_pad_small       ; move_program
046807 02          0006*      db collides_with_laser  ; collisions
046808 10          0007*      db 16                   ; dim_x
046809 10          0008*      db 16                   ; dim_y
04680A 01          0009*      db 1                    ; num_orientations
04680B 01          0010*      db 1                    ; num_animations
04680C 00          0011*      db 0                    ; animation
04680D 00          0012*      db 0                    ; animation_timer
04680E 18          0013*      db 24                   ; move_timer
04680F 00          0014*      db 0                    ; move_step
046810 05          0015*      db 5                    ; points
046811 00          0016*      db 0                    ; shield_damage
046812 00          0017*      db 0                    ; frame
046813             0018*  
046813             0019*  activate_pad_small:
046813 21 00 68 04 0020*      ld hl,pad_small_defaults
046817             0021*  ; get next available sprite id
046817 CD 07 67 04 0022*      call spawn_sprite_from_tile
04681B D0          0023*      ret nc ; no carry means no free sprite slots, so we go home
04681C             0024*  ; other specific initialization
04681C 3E 40       0025*      ld a,64
04681E FD 77 24    0026*      ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a seeker
046821 C9          0027*      ret
046822             0028*  ; end activate_pad_small
046822             0029*  
046822             0030*  move_pad_small:
046822 CD 2D 67 04 0031*      call move_active_tile
046826 B7          0032*      or a ; a will be non-zero if have scrolled off screen
046827 C2 EC 5E 04 0033*      jp nz,table_deactivate_sprite
04682B CD DF 22 04 0034*      call check_enemy_collisions
04682F F8          0035*      ret m ; was collision so nothing more to do
046830             0036*  ; check whether it is time to spawn a seeker
046830 FD 35 24    0037*      dec (iy+sprite_move_timer)
046833 C0          0038*      ret nz
046834             0039*  pad_small_reset_move_timer:
046834 CD AE 09 04 0040*      call rand_8     ; snag a random number
046838 E6 1F       0041*      and %00011111   ; keep only 5 lowest bits (max 31)
04683A C6 40       0042*      add a,64 ; range is now 64-127
04683C FD 77 24    0043*      ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a seeker
04683F CD 13 25 04 0044*      call enemy_spawn_seeker
046843 C9          0045*      ret
046844             0064       include "tile_turret_fireball.inc"
046844 FF FF FF FF 0001*      align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
046900             0002*  turret_fireball_defaults:
046900 02          0003*      db enemy_ground         ; type
046901 2F 01 00    0004*      dl BUF_TURRET_000       ; base_bufferId
046904 22 69 04    0005*      dl move_turret_fireball ; move_program
046907 02          0006*      db collides_with_laser  ; collisions
046908 10          0007*      db 16                   ; dim_x
046909 10          0008*      db 16                   ; dim_y
04690A 20          0009*      db 32                   ; num_orientations
04690B 01          0010*      db 1                    ; num_animations
04690C 00          0011*      db 0                    ; animation
04690D 00          0012*      db 0                    ; animation_timer
04690E 18          0013*      db 24                   ; move_timer
04690F 00          0014*      db 0                    ; move_step
046910 05          0015*      db 5                    ; points
046911 00          0016*      db 0                    ; shield_damage
046912 00          0017*      db 0                    ; frame
046913             0018*  
046913             0019*  activate_turret_fireball:
046913 21 00 69 04 0020*      ld hl,turret_fireball_defaults
046917             0021*  ; get next available sprite id
046917 CD 07 67 04 0022*      call spawn_sprite_from_tile
04691B D0          0023*      ret nc ; no carry means no free sprite slots, so we go home
04691C             0024*  ; other specific initialization
04691C 3E 40       0025*      ld a,64
04691E FD 77 24    0026*      ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a seeker
046921 C9          0027*      ret
046922             0028*  ; end activate_turret_fireball
046922             0029*  
046922             0030*  move_turret_fireball:
046922 CD 2D 67 04 0031*      call move_active_tile
046926 B7          0032*      or a ; a will be non-zero if have scrolled off screen
046927 C2 EC 5E 04 0033*      jp nz,table_deactivate_sprite
04692B CD DF 22 04 0034*      call check_enemy_collisions
04692F F8          0035*      ret m ; was collision so nothing more to do
046930             0036*  ; target player
046930 21 00 04 00 0037*      ld hl,speed_fireball
046934 22 31 65 04 0038*      ld (Vp),hl ; param for targeting_computer
046938 CD 00 65 04 0039*      call orientation_to_player
04693C CD 49 65 04 0040*      call targeting_computer
046940 FD 2F 10    0041*      ld (iy+sprite_heading),hl ; save sprite heading
046943 CD 79 60 04 0042*      call sprite_frame_heading
046947             0043*  ; check whether it is time to spawn a fireball
046947 FD 35 24    0044*      dec (iy+sprite_move_timer)
04694A C0          0045*      ret nz
04694B             0046*  ; spwan a fireball
04694B CD 13 24 04 0047*      call enemy_spawn_fireball
04694F             0048*      ; fall through to reset move timer
04694F             0049*  turret_fireball_reset_move_timer:
04694F CD AE 09 04 0050*      call rand_8     ; snag a random number
046953 E6 1F       0051*      and %00011111   ; keep only 5 lowest bits (max 31)
046955 C6 18       0052*      add a,24 ; range is now 24-55
046957 FD 77 24    0053*      ld (iy+sprite_move_timer),a ; when this hits zero,will spawn a fireball
04695A C9          0054*      ret
04695B             0065   
04695B FF FF FF FF 0066       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
046A00             0067   
046A00             0068   ; --- MAIN PROGRAM FILE ---
046A00 57 65 6C 63 0069   hello_world: asciz "Welcome to Purple Nurples!"
       6F 6D 65 20 
       74 6F 20 50 
       75 72 70 6C 
       65 20 4E 75 
       72 70 6C 65 
       73 21 00    
046A1B 4C 6F 61 64 0070   loading_ui: asciz "Loading UI"
       69 6E 67 20 
       55 49 00    
046A26 4C 6F 61 64 0071   loading_time: asciz "Loading time:"
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
046A34 50 72 65 73 0072   loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
046A4F             0073   
046A4F             0074   init:
046A4F             0075   ; clear all buffers
046A4F CD 2A 1C 04 0076       call vdu_clear_all_buffers
046A53             0077   
046A53             0078   ; set up the display
046A53 3E 88       0079       ld a,8+128 ; 136   320   240   64    60hz double-buffered
046A55 CD 14 1B 04 0080       call vdu_set_screen_mode
046A59 AF          0081       xor a
046A5A CD 25 1B 04 0082       call vdu_set_scaling
046A5E             0083   
046A5E             0084   ; ; enable additional audio channels
046A5E             0085   ; 	call vdu_enable_channels
046A5E             0086   
046A5E             0087   ; set text background color
046A5E 3E 9A       0088       ld a,26+128 ; violet
046A60 CD 7C 1A 04 0089       call vdu_colour_text
046A64             0090   
046A64             0091   ; set text foreground color
046A64 3E 2F       0092       ld a,47 ; aaaaff lavenderish
046A66 CD 7C 1A 04 0093       call vdu_colour_text
046A6A             0094   
046A6A             0095   ; set gfx bg color
046A6A AF          0096       xor a ; plotting mode 0
046A6B 3E 9A       0097       ld a,26+128 ; violet
046A6D CD 8D 1A 04 0098       call vdu_gcol
046A71 CD 4B 1A 04 0099       call vdu_cls
046A75             0100   
046A75             0101   ; set the cursor off
046A75 CD 13 1A 04 0102       call vdu_cursor_off
046A79             0103   
046A79             0104   ; VDU 28, left, bottom, right, top: Set text viewport **
046A79             0105   ; MIND THE LITTLE-ENDIANESS
046A79             0106   ; inputs: c=left,b=bottom,e=right,d=top
046A79 0E 00       0107       ld c,0 ; left
046A7B 16 00       0108       ld d,0 ; top
046A7D 1E 27       0109       ld e,39 ; right
046A7F 06 00       0110       ld b,0; bottom
046A81 CD A4 1A 04 0111       call vdu_set_txt_viewport
046A85             0112   
046A85             0113   ; print loading ui message
046A85 21 1B 6A 04 0114       ld hl,loading_ui
046A89 CD 17 01 04 0115       call printString
046A8D CD 50 1A 04 0116       call vdu_flip
046A91             0117   
046A91             0118   ; load UI images
046A91 CD CE 16 04 0119       call load_ui_images
046A95             0120   
046A95             0121   ; load sprites
046A95 CD 09 16 04 0122       call img_load_init ; sets up the animated load screen
046A99 CD E1 16 04 0123       call load_sprite_images
046A9D             0124   
046A9D             0125   ; load tileset_ptrs
046A9D CD F2 16 04 0126       call load_tilesets
046AA1             0127   
046AA1             0128   ; ; load sound effects ; TODO
046AA1             0129   ; 	ld bc,SFX_num_buffers
046AA1             0130   ; 	ld hl,SFX_buffer_id_lut
046AA1             0131   ; 	ld (cur_buffer_id_lut),hl
046AA1             0132   ; 	ld hl,SFX_load_routines_table
046AA1             0133   ; 	ld (cur_load_jump_table),hl
046AA1             0134   ; 	call sfx_load_main
046AA1             0135   
046AA1             0136   ; print loading complete message and wait for user keypress
046AA1 CD 4B 1A 04 0137       call vdu_cls
046AA5 21 34 6A 04 0138       ld hl,loading_complete
046AA9 CD 17 01 04 0139       call printString
046AAD CD 50 1A 04 0140       call vdu_flip
046AB1 CD C5 06 04 0141       call waitKeypress
046AB5             0142   
046AB5             0143   ; set up display for gameplay
046AB5             0144       ; ld a,8
046AB5 3E 14       0145       ld a,20
046AB7 CD 14 1B 04 0146       call vdu_set_screen_mode
046ABB AF          0147       xor a
046ABC CD 25 1B 04 0148       call vdu_set_scaling
046AC0 CD 13 1A 04 0149       call vdu_cursor_off
046AC4             0150   ; load fonts
046AC4 CD 00 15 04 0151   	call fonts_load
046AC8             0152   ; select font
046AC8             0153       ; ld hl,computer_pixel_7_8x16
046AC8 21 02 FA 00 0154       ld hl,amiga_forever_8x8 ; DEBUG
046ACC 3E 01       0155       ld a,1 ; flags
046ACE CD 00 1E 04 0156       call vdu_font_select
046AD2             0157   ; plot bezel art
046AD2 21 00 00 00 0158       ld hl,BUF_BEZEL_L
046AD6 CD 38 1B 04 0159       call vdu_buff_select
046ADA 01 00 00 00 0160       ld bc,0
046ADE 11 00 00 00 0161       ld de,0
046AE2 CD 20 1F 04 0162       call vdu_plot_bmp
046AE6 21 01 00 00 0163       ld hl,BUF_BEZEL_R
046AEA CD 38 1B 04 0164       call vdu_buff_select
046AEE 01 80 01 00 0165       ld bc,384
046AF2 11 00 00 00 0166       ld de,0
046AF6 CD 20 1F 04 0167       call vdu_plot_bmp
046AFA             0168   ; set gfx origin and viewport to playing field window
046AFA 01 80 00 00 0169       ld bc,origin_left
046AFE 11 00 00 00 0170       ld de,origin_top
046B02 CD D0 1A 04 0171       call vdu_set_gfx_origin
046B06 01 00 00 00 0172       ld bc,field_left
046B0A 11 00 00 00 0173       ld de,field_top
046B0E DD 21 FF 00 0174       ld ix,field_right
       00          
046B13 FD 21 7F 01 0175       ld iy,field_bottom
       00          
046B18 CD EB 1A 04 0176       call vdu_set_gfx_viewport
046B1C             0177   ; set background color
046B1C 3E 9A       0178       ld a,26+128 ; violet
046B1E CD 8D 1A 04 0179       call vdu_gcol
046B22 CD 5E 1A 04 0180       call vdu_clg
046B26             0181   ; VDU 28, left, bottom, right, top: Set text viewport **
046B26 0E 00       0182       ld c,0 ; left
046B28 16 00       0183       ld d,0 ; top
046B2A 1E 3E       0184       ld e,62 ; right
046B2C 06 30       0185       ld b,48; bottom
046B2E CD A4 1A 04 0186       call vdu_set_txt_viewport
046B32             0187   
046B32             0188   ; initialize the global timestamp
046B32 CD F9 18 04 0189       call timestamp_tick
046B36             0190   
046B36             0191   ; done with init
046B36 C9          0192       ret
046B37             0193   
046B37             0194   main:
046B37             0195   ; start a new game
046B37 CD 17 63 04 0196       call game_initialize
046B3B             0197   
046B3B             0198   main_loop:
046B3B             0199   ; update the global timestamp
046B3B CD F9 18 04 0200       call timestamp_tick
046B3F             0201   
046B3F             0202   ; do gamestate logic
046B3F CD 03 63 04 0203       call do_game
046B43             0204   
046B43             0205       ; CALL DEBUG_PRINT_TABLE
046B43             0206   
046B43             0207   ; wait for the next vblank mitigate flicker and for loop timing
046B43 CD BF 1A 04 0208       call vdu_vblank
046B47             0209       ; call vdu_vblank ; DEBUG
046B47             0210       ; call vdu_vblank ; DEBUG
046B47             0211   
046B47             0212   ; poll keyboard for escape keypress
046B47 3E 08       0213       ld a, $08 ; code to send to MOS
046B49 5B CF       0214       rst.lil $08 ; get IX pointer to System Variables
046B4B             0215   
046B4B DD 7E 05    0216       ld a, (ix + $05) ; get ASCII code of key pressed
046B4E FE 1B       0217       cp 27 ; check if 27 (ascii code for ESC)
046B50 CA 58 6B 04 0218       jp z, main_end ; if pressed, jump to exit
046B54             0219   
046B54 C3 3B 6B 04 0220       jp main_loop
046B58             0221   
046B58             0222   main_end:
046B58 CD 05 1A 04 0223       call vdu_cursor_on
046B5C C9          0224       ret
046B5D             0225   
046B5D             0226   DEBUG_PRINT:
046B5D             0227       PUSH_ALL
046B5D 08          0001M      ex af,af'
046B5E D9          0002M      exx
046B5F F5          0003M      push af
046B60 E5          0004M      push hl
046B61 C5          0005M      push bc
046B62 D5          0006M      push de
046B63             0007M  
046B63 08          0008M      ex af,af'
046B64 D9          0009M      exx
046B65 F5          0010M      push af
046B66 E5          0011M      push hl
046B67 C5          0012M      push bc
046B68 D5          0013M      push de
046B69 DD E5       0014M      push ix
046B6B FD E5       0015M      push iy
046B6D 0E 00       0228       ld c,0
046B6F 06 00       0229       ld b,0
046B71 CD 37 1A 04 0230       call vdu_move_cursor
046B75             0231       POP_ALL
046B75 FD E1       0001M      pop iy
046B77 DD E1       0002M      pop ix
046B79 D1          0003M      pop de
046B7A C1          0004M      pop bc
046B7B E1          0005M      pop hl
046B7C F1          0006M      pop af
046B7D 08          0007M      ex af,af'
046B7E D9          0008M      exx
046B7F             0009M  
046B7F D1          0010M      pop de
046B80 C1          0011M      pop bc
046B81 E1          0012M      pop hl
046B82 F1          0013M      pop af
046B83 08          0014M      ex af,af'
046B84 D9          0015M      exx
046B85             0232       PUSH_ALL
046B85 08          0001M      ex af,af'
046B86 D9          0002M      exx
046B87 F5          0003M      push af
046B88 E5          0004M      push hl
046B89 C5          0005M      push bc
046B8A D5          0006M      push de
046B8B             0007M  
046B8B 08          0008M      ex af,af'
046B8C D9          0009M      exx
046B8D F5          0010M      push af
046B8E E5          0011M      push hl
046B8F C5          0012M      push bc
046B90 D5          0013M      push de
046B91 DD E5       0014M      push ix
046B93 FD E5       0015M      push iy
046B95 CD 64 06 04 0233       call dumpFlags
046B99             0234       POP_ALL
046B99 FD E1       0001M      pop iy
046B9B DD E1       0002M      pop ix
046B9D D1          0003M      pop de
046B9E C1          0004M      pop bc
046B9F E1          0005M      pop hl
046BA0 F1          0006M      pop af
046BA1 08          0007M      ex af,af'
046BA2 D9          0008M      exx
046BA3             0009M  
046BA3 D1          0010M      pop de
046BA4 C1          0011M      pop bc
046BA5 E1          0012M      pop hl
046BA6 F1          0013M      pop af
046BA7 08          0014M      ex af,af'
046BA8 D9          0015M      exx
046BA9             0235       PUSH_ALL
046BA9 08          0001M      ex af,af'
046BAA D9          0002M      exx
046BAB F5          0003M      push af
046BAC E5          0004M      push hl
046BAD C5          0005M      push bc
046BAE D5          0006M      push de
046BAF             0007M  
046BAF 08          0008M      ex af,af'
046BB0 D9          0009M      exx
046BB1 F5          0010M      push af
046BB2 E5          0011M      push hl
046BB3 C5          0012M      push bc
046BB4 D5          0013M      push de
046BB5 DD E5       0014M      push ix
046BB7 FD E5       0015M      push iy
046BB9 CD C6 04 04 0236       call dumpRegistersHex
046BBD             0237       ; call waitKeypress
046BBD             0238       POP_ALL
046BBD FD E1       0001M      pop iy
046BBF DD E1       0002M      pop ix
046BC1 D1          0003M      pop de
046BC2 C1          0004M      pop bc
046BC3 E1          0005M      pop hl
046BC4 F1          0006M      pop af
046BC5 08          0007M      ex af,af'
046BC6 D9          0008M      exx
046BC7             0009M  
046BC7 D1          0010M      pop de
046BC8 C1          0011M      pop bc
046BC9 E1          0012M      pop hl
046BCA F1          0013M      pop af
046BCB 08          0014M      ex af,af'
046BCC D9          0015M      exx
046BCD C9          0239       ret
046BCE             0240   
046BCE             0241   DEBUG_PRINT_TABLE:
046BCE             0242       PUSH_ALL
046BCE 08          0001M      ex af,af'
046BCF D9          0002M      exx
046BD0 F5          0003M      push af
046BD1 E5          0004M      push hl
046BD2 C5          0005M      push bc
046BD3 D5          0006M      push de
046BD4             0007M  
046BD4 08          0008M      ex af,af'
046BD5 D9          0009M      exx
046BD6 F5          0010M      push af
046BD7 E5          0011M      push hl
046BD8 C5          0012M      push bc
046BD9 D5          0013M      push de
046BDA DD E5       0014M      push ix
046BDC FD E5       0015M      push iy
046BDE CD 00 1A 04 0243       call vdu_home_cursor
046BE2             0244       ; LIST_FIELD sprite_move_program,3 ; DEBUG
046BE2             0245       ; LIST_FIELD sprite_type,1 ; DEBUG
046BE2             0246   
046BE2 DD 21 00 5C 0247       ld ix,table_base
       04          
046BE7 CD A5 60 04 0248       call dump_sprite_record
046BEB CD 2C 01 04 0249       call printNewLine
046BEF CD 2C 01 04 0250       call printNewLine
046BF3             0251   
046BF3 ED 32 29    0252       lea ix,ix+table_bytes_per_record
046BF6 CD A5 60 04 0253       call dump_sprite_record
046BFA CD 2C 01 04 0254       call printNewLine
046BFE             0255   
046BFE             0256       ; call waitKeypress
046BFE             0257       POP_ALL
046BFE FD E1       0001M      pop iy
046C00 DD E1       0002M      pop ix
046C02 D1          0003M      pop de
046C03 C1          0004M      pop bc
046C04 E1          0005M      pop hl
046C05 F1          0006M      pop af
046C06 08          0007M      ex af,af'
046C07 D9          0008M      exx
046C08             0009M  
046C08 D1          0010M      pop de
046C09 C1          0011M      pop bc
046C0A E1          0012M      pop hl
046C0B F1          0013M      pop af
046C0C 08          0014M      ex af,af'
046C0D D9          0015M      exx
046C0E C9          0258       RET
046C0F             0259   
046C0F             0260   DEBUG_WAITKEYPRESS:
046C0F             0261       PUSH_ALL
046C0F 08          0001M      ex af,af'
046C10 D9          0002M      exx
046C11 F5          0003M      push af
046C12 E5          0004M      push hl
046C13 C5          0005M      push bc
046C14 D5          0006M      push de
046C15             0007M  
046C15 08          0008M      ex af,af'
046C16 D9          0009M      exx
046C17 F5          0010M      push af
046C18 E5          0011M      push hl
046C19 C5          0012M      push bc
046C1A D5          0013M      push de
046C1B DD E5       0014M      push ix
046C1D FD E5       0015M      push iy
046C1F CD C5 06 04 0262       call waitKeypress
046C23             0263       POP_ALL
046C23 FD E1       0001M      pop iy
046C25 DD E1       0002M      pop ix
046C27 D1          0003M      pop de
046C28 C1          0004M      pop bc
046C29 E1          0005M      pop hl
046C2A F1          0006M      pop af
046C2B 08          0007M      ex af,af'
046C2C D9          0008M      exx
046C2D             0009M  
046C2D D1          0010M      pop de
046C2E C1          0011M      pop bc
046C2F E1          0012M      pop hl
046C30 F1          0013M      pop af
046C31 08          0014M      ex af,af'
046C32 D9          0015M      exx
046C33 C9          0264       RET

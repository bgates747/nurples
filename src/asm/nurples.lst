PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004 FF FF FF FF 0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C             0015    
04004C CD B5 88 04 0016        call main
040050             0017    
040050             0018    exit:
040050 FD E1       0019        pop iy
040052 DD E1       0020        pop ix
040054 D1          0021        pop de
040055 C1          0022        pop bc
040056 F1          0023        pop af
040057 21 00 00 00 0024        ld hl,0
04005B             0025    
04005B C9          0026        ret
04005C             0027    
04005C             0028    ; API INCLUDES
04005C             0029        include "mos_api.inc"
04005C             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
04005C             0002*   ; Title:	AGON MOS - API for user projects
04005C             0003*   ; Author:	Dean Belfield
04005C             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
04005C             0005*   ;			Added MOS error codes for return in HL
04005C             0006*   ; Created:	03/08/2022
04005C             0007*   ; Last Updated:	10/08/2023
04005C             0008*   ;
04005C             0009*   ; Modinfo:
04005C             0010*   ; 05/08/2022:	Added mos_feof
04005C             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
04005C             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
04005C             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
04005C             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
04005C             0015*   ; 13/10/2022:	Added mos_oscli
04005C             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
04005C             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
04005C             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
04005C             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
04005C             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
04005C             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
04005C             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
04005C             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
04005C             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
04005C             0025*   ; 19/05/2023:	Added sysvar_scrMode
04005C             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
04005C             0027*   ; 03/08/2023:	Added mos_setkbvector
04005C             0028*   ; 10/08/2023:	Added mos_getkbmap
04005C             0029*   
04005C             0030*   ; VDP control (VDU 23, 0, n)
04005C             0031*   ;
04005C             0032*   vdp_gp:				EQU 80h
04005C             0033*   vdp_keycode:		EQU 81h
04005C             0034*   vdp_cursor:			EQU	82h
04005C             0035*   vdp_scrchar:		EQU	83h
04005C             0036*   vdp_scrpixel:		EQU	84h
04005C             0037*   vdp_audio:			EQU	85h
04005C             0038*   vdp_mode:			EQU	86h
04005C             0039*   vdp_rtc:			EQU	87h
04005C             0040*   vdp_keystate:		EQU	88h
04005C             0041*   vdp_logicalcoords:	EQU	C0h
04005C             0042*   vdp_terminalmode:	EQU	FFh
04005C             0043*   
04005C             0044*   ; MOS high level functions
04005C             0045*   ;
04005C             0046*   mos_getkey:			EQU	00h
04005C             0047*   mos_load:			EQU	01h
04005C             0048*   mos_save:			EQU	02h
04005C             0049*   mos_cd:				EQU	03h
04005C             0050*   mos_dir:			EQU	04h
04005C             0051*   mos_del:			EQU	05h
04005C             0052*   mos_ren:			EQU	06h
04005C             0053*   mos_mkdir:			EQU	07h
04005C             0054*   mos_sysvars:		EQU	08h
04005C             0055*   mos_editline:		EQU	09h
04005C             0056*   mos_fopen:			EQU	0Ah
04005C             0057*   mos_fclose:			EQU	0Bh
04005C             0058*   mos_fgetc:			EQU	0Ch
04005C             0059*   mos_fputc:			EQU	0Dh
04005C             0060*   mos_feof:			EQU	0Eh
04005C             0061*   mos_getError:		EQU	0Fh
04005C             0062*   mos_oscli:			EQU	10h
04005C             0063*   mos_copy:			EQU	11h
04005C             0064*   mos_getrtc:			EQU	12h
04005C             0065*   mos_setrtc:			EQU	13h
04005C             0066*   mos_setintvector:	EQU	14h
04005C             0067*   mos_uopen:			EQU	15h
04005C             0068*   mos_uclose:			EQU	16h
04005C             0069*   mos_ugetc:			EQU	17h
04005C             0070*   mos_uputc:			EQU	18h
04005C             0071*   mos_getfil:			EQU	19h
04005C             0072*   mos_fread:			EQU	1Ah
04005C             0073*   mos_fwrite:			EQU	1Bh
04005C             0074*   mos_flseek:			EQU	1Ch
04005C             0075*   mos_setkbvector:	EQU	1Dh
04005C             0076*   mos_getkbmap:		EQU	1Eh
04005C             0077*   
04005C             0078*   ; MOS program exit codes
04005C             0079*   ;
04005C             0080*   EXIT_OK:				EQU  0;	"OK",
04005C             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
04005C             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
04005C             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
04005C             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
04005C             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
04005C             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
04005C             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
04005C             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
04005C             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
04005C             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
04005C             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
04005C             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
04005C             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
04005C             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
04005C             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
04005C             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
04005C             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
04005C             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
04005C             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
04005C             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
04005C             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
04005C             0102*   ; FatFS file access functions
04005C             0103*   ;
04005C             0104*   ffs_fopen:			EQU	80h
04005C             0105*   ffs_fclose:			EQU	81h
04005C             0106*   ffs_fread:			EQU	82h
04005C             0107*   ffs_fwrite:			EQU	83h
04005C             0108*   ffs_flseek:			EQU	84h
04005C             0109*   ffs_ftruncate:		EQU	85h
04005C             0110*   ffs_fsync:			EQU	86h
04005C             0111*   ffs_fforward:		EQU	87h
04005C             0112*   ffs_fexpand:		EQU	88h
04005C             0113*   ffs_fgets:			EQU	89h
04005C             0114*   ffs_fputc:			EQU	8Ah
04005C             0115*   ffs_fputs:			EQU	8Bh
04005C             0116*   ffs_fprintf:		EQU	8Ch
04005C             0117*   ffs_ftell:			EQU	8Dh
04005C             0118*   ffs_feof:			EQU	8Eh
04005C             0119*   ffs_fsize:			EQU	8Fh
04005C             0120*   ffs_ferror:			EQU	90h
04005C             0121*   
04005C             0122*   ; FatFS directory access functions
04005C             0123*   ;
04005C             0124*   ffs_dopen:			EQU	91h
04005C             0125*   ffs_dclose:			EQU	92h
04005C             0126*   ffs_dread:			EQU	93h
04005C             0127*   ffs_dfindfirst:		EQU	94h
04005C             0128*   ffs_dfindnext:		EQU	95h
04005C             0129*   
04005C             0130*   ; FatFS file and directory management functions
04005C             0131*   ;
04005C             0132*   ffs_stat:			EQU	96h
04005C             0133*   ffs_unlink:			EQU	97h
04005C             0134*   ffs_rename:			EQU	98h
04005C             0135*   ffs_chmod:			EQU	99h
04005C             0136*   ffs_utime:			EQU	9Ah
04005C             0137*   ffs_mkdir:			EQU	9Bh
04005C             0138*   ffs_chdir:			EQU	9Ch
04005C             0139*   ffs_chdrive:		EQU	9Dh
04005C             0140*   ffs_getcwd:			EQU	9Eh
04005C             0141*   
04005C             0142*   ; FatFS volume management and system configuration functions
04005C             0143*   ;
04005C             0144*   ffs_mount:			EQU	9Fh
04005C             0145*   ffs_mkfs:			EQU	A0h
04005C             0146*   ffs_fdisk:			EQU	A1h
04005C             0147*   ffs_getfree:		EQU	A2h
04005C             0148*   ffs_getlabel:		EQU	A3h
04005C             0149*   ffs_setlabel:		EQU	A4h
04005C             0150*   ffs_setcp:			EQU	A5h
04005C             0151*   
04005C             0152*   ; File access modes
04005C             0153*   ;
04005C             0154*   fa_read:			EQU	01h
04005C             0155*   fa_write:			EQU	02h
04005C             0156*   fa_open_existing:	EQU	00h
04005C             0157*   fa_create_new:		EQU	04h
04005C             0158*   fa_create_always:	EQU	08h
04005C             0159*   fa_open_always:		EQU	10h
04005C             0160*   fa_open_append:		EQU	30h
04005C             0161*   
04005C             0162*   ; System variable indexes for api_sysvars
04005C             0163*   ; Index into _sysvars in globals.inc
04005C             0164*   ;
04005C             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
04005C             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
04005C             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
04005C             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
04005C             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
04005C             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
04005C             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
04005C             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
04005C             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
04005C             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
04005C             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
04005C             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
04005C             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
04005C             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
04005C             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
04005C             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
04005C             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
04005C             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
04005C             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
04005C             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
04005C             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
04005C             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
04005C             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
04005C             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
04005C             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
04005C             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
04005C             0191*   
04005C             0192*   ; Flags for the VPD protocol
04005C             0193*   ;
04005C             0194*   vdp_pflag_cursor:		EQU	00000001b
04005C             0195*   vdp_pflag_scrchar:		EQU	00000010b
04005C             0196*   vdp_pflag_point:		EQU	00000100b
04005C             0197*   vdp_pflag_audio:		EQU	00001000b
04005C             0198*   vdp_pflag_mode:			EQU	00010000b
04005C             0199*   vdp_pflag_rtc:			EQU	00100000b
04005C             0200*   
04005C             0201*   ;
04005C             0202*   ; FatFS structures
04005C             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
04005C             0204*   ;
04005C             0205*   ; Object ID and allocation information (FFOBJID)
04005C             0206*   ;
04005C             0207*   ; Indexes into FFOBJID structure
04005C             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
04005C             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
04005C             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
04005C             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
04005C             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
04005C             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
04005C             0214*   ;
04005C             0215*   ; File object structure (FIL)
04005C             0216*   ;
04005C             0217*   ; Indexes into FIL structure
04005C             0218*   fil_obj:		EQU 0	; 15: Object identifier
04005C             0219*   fil_flag:		EQU	15 	;  1: File status flags
04005C             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
04005C             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
04005C             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
04005C             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
04005C             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
04005C             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
04005C             0226*   ;
04005C             0227*   ; Directory object structure (DIR)
04005C             0228*   ; Indexes into DIR structure
04005C             0229*   dir_obj:		EQU  0	; 15: Object identifier
04005C             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
04005C             0231*   dir_clust:		EQU	19	;  4: Current cluster
04005C             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
04005C             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
04005C             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
04005C             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
04005C             0236*   ;
04005C             0237*   ; File information structure (FILINFO)
04005C             0238*   ;
04005C             0239*   ; Indexes into FILINFO structure
04005C             0240*   filinfo_fsize:		EQU 0	;   4: File size
04005C             0241*   filinfo_fdate:		EQU	4	;   2: Modified date
04005C             0242*   filinfo_ftime:		EQU	6	;   2: Modified time
04005C             0243*   filinfo_fattrib:	EQU	8	;   1: File attribute
04005C             0244*   filinfo_altname:	EQU	9	;  13: Alternative file name
04005C             0245*   filinfo_fname:		EQU	22	; 256: Primary file name
04005C             0246*   ;
04005C             0247*   ; Macro for calling the API
04005C             0248*   ; Parameters:
04005C             0249*   ; - function: One of the function numbers listed above
04005C             0250*   ;
04005C             0251*   	MACRO	MOSCALL	function
04005C             0252*   			LD	A, function
04005C             0253*   			RST.LIL	08h
04005C             0254*   	ENDMACRO
04005C             0030        include "macros.inc"
04005C             0001*   
04005C             0002*   ; test the sign of HL
04005C             0003*   ; inputs: HL obviously
04005C             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
04005C             0005*   ; destroys: flags
04005C             0006*       MACRO SIGN_HLU
04005C             0007*       add hl,de ; 1 cycle
04005C             0008*       or a ; clear flags ; 1 cycle
04005C             0009*       sbc hl,de ; 2 cycles
04005C             0010*       ; 4 cycles total
04005C             0011*       ENDMACRO
04005C             0012*   
04005C             0013*   ; put the value in A into HLU
04005C             0014*   ; affects: HLU
04005C             0015*   ; destroys: nothing
04005C             0016*   ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
04005C             0017*       MACRO A_TO_HLU
04005C             0018*       xor a ; 1 cycle
04005C             0019*       ld ($+8+1),hl ; 7 cycles
04005C             0020*       ld ($+4+3),a ; 5 cycles
04005C             0021*       ld hl,0x000000 ; 4 cycles
04005C             0022*       ; 17 cycles total
04005C             0023*       ENDMACRO
04005C             0024*   
04005C             0025*   ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
04005C             0026*   ; one cycle less but burns flags
04005C             0027*       MACRO A_TO_HLU_ALT
04005C             0028*       push hl ; 4 cycles
04005C             0029*       ld hl,2 ; 4 cycles
04005C             0030*       add hl,sp ; 1 cycle
04005C             0031*       ld (hl),a ; 2 cycles
04005C             0032*       pop hl ; 4 cycles
04005C             0033*       ; 15 cycles total
04005C             0034*       ENDMACRO
04005C             0035*   
04005C             0036*       MACRO hlu_mul256
04005C             0037*       add hl,hl ; * 2
04005C             0038*       add hl,hl ; * 4
04005C             0039*       add hl,hl ; * 8
04005C             0040*       add hl,hl ; * 16
04005C             0041*       add hl,hl ; * 32
04005C             0042*       add hl,hl ; * 64
04005C             0043*       add hl,hl ; * 128
04005C             0044*       add hl,hl ; * 256
04005C             0045*       ENDMACRO
04005C             0046*   
04005C             0047*   ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
04005C             0048*       MACRO SRL_UHL
04005C             0049*       dec sp ; 1 cycle
04005C             0050*       push hl ; 4 cycles
04005C             0051*       inc sp ; 1 cycle
04005C             0052*       pop hl ; 4 cycles
04005C             0053*       inc hl ; 1 cycle
04005C             0054*       dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04005C             0055*       ; 13 cycles total
04005C             0056*       ENDMACRO
04005C             0057*   
04005C             0058*       MACRO printChar char
04005C             0059*       LD A, char
04005C             0060*       RST.LIL 10h
04005C             0061*       ENDMACRO
04005C             0062*   
04005C             0063*   ; Simulated call to subroutine at HL
04005C             0064*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
04005C             0065*   ; outputs: whatever the subroutine does, including HL and BC
04005C             0066*   ; destroys: only what the subroutine does, but always BC
04005C             0067*       MACRO CALL_HL
04005C             0068*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0069*       push bc ; which constitutes the return address
04005C             0070*       jp (hl) ; Jump to the address in HL
04005C             0071*       ENDMACRO
04005C             0072*   
04005C             0073*   ; Simulated call to subroutine at IX
04005C             0074*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
04005C             0075*   ; outputs: whatever the subroutine does, including IX and BC
04005C             0076*   ; destroys: only what the subroutine does, but always BC
04005C             0077*       MACRO CALL_IX
04005C             0078*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0079*       push bc ; which constitutes the return address
04005C             0080*       jp (ix) ; Jump to the address in IX
04005C             0081*       ENDMACRO
04005C             0082*   
04005C             0083*   ; Simulated call to soubroutinte at IY
04005C             0084*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
04005C             0085*   ; outputs: whatever the subroutine does, including IY and BC
04005C             0086*   ; destroys: only what the subroutine does, but always BC
04005C             0087*       MACRO CALL_IY
04005C             0088*       ld bc,$+6 ; Address of first instruction after the jump
04005C             0089*       push bc ; which constitutes the return address
04005C             0090*       jp (iy) ; Jump to the address in IY
04005C             0091*       ENDMACRO
04005C             0092*   
04005C             0093*   ; put the value in HLU into A
04005C             0094*   ; destroys: af
04005C             0095*       MACRO HLU_TO_A
04005C             0096*       dec sp ; 1 cycle
04005C             0097*       push hl ; 4 cycles
04005C             0098*       inc sp ; 1 cycle
04005C             0099*       pop af ; 4 cycles
04005C             0100*       ; 10 cycles total
04005C             0101*       ENDMACRO
04005C             0102*   
04005C             0103*       MACRO PUSH_ALL
04005C             0104*       ex af,af'
04005C             0105*       exx
04005C             0106*       push af
04005C             0107*       push hl
04005C             0108*       push bc
04005C             0109*       push de
04005C             0110*   
04005C             0111*       ex af,af'
04005C             0112*       exx
04005C             0113*       push af
04005C             0114*       push hl
04005C             0115*       push bc
04005C             0116*       push de
04005C             0117*       push ix
04005C             0118*       push iy
04005C             0119*       ENDMACRO
04005C             0120*   
04005C             0121*       MACRO POP_ALL
04005C             0122*       pop iy
04005C             0123*       pop ix
04005C             0124*       pop de
04005C             0125*       pop bc
04005C             0126*       pop hl
04005C             0127*       pop af
04005C             0128*       ex af,af'
04005C             0129*       exx
04005C             0130*   
04005C             0131*       pop de
04005C             0132*       pop bc
04005C             0133*       pop hl
04005C             0134*       pop af
04005C             0135*       ex af,af'
04005C             0136*       exx
04005C             0137*       ENDMACRO
04005C             0031        include "functions.inc"
04005C             0001*   ; Print a zero-terminated string inline with code, e.g.:
04005C             0002*   ;
04005C             0003*   ;    call printInline
04005C             0004*   ;    ASCIZ "Hello, world!\r\n"
04005C             0005*   ;
04005C             0006*   ; Destroys: HL,AF
04005C             0007*   printInline:
04005C E1          0008*       pop hl ; get the return address = pointer to start of string
04005D CD 63 00 04 0009*       call printString ; HL advances to end of string
040061 E5          0010*       push hl ; restore the return address = pointer to end of string
040062 C9          0011*       ret
040063             0012*   
040063             0013*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040063             0014*   ; Print a zero-terminated string
040063             0015*   ; HL: Pointer to string
040063             0016*   printString:
040063 C5          0017*       PUSH BC
040064 01 00 00 00 0018*       LD BC,0
040068 3E 00       0019*       LD A,0
04006A 5B DF       0020*       RST.LIL 18h
04006C C1          0021*       POP BC
04006D C9          0022*       RET
04006E             0023*   ; print a VDU sequence
04006E             0024*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
04006E             0025*   sendVDUsequence:
04006E C5          0026*       PUSH BC
04006F 01 00 00 00 0027*       LD BC, 0
040073 4E          0028*       LD C, (HL)
040074 5B DF       0029*       RST.LIL 18h
040076 C1          0030*       POP BC
040077 C9          0031*       RET
040078             0032*   ; Print Newline sequence to VDP
040078             0033*   ; destroys bc
040078             0034*   printNewLine:
040078 F5          0035*       push af ; for some reason rst.lil 10h sets carry flag
040079 3E 0D       0036*       LD A, '\r'
04007B 5B D7       0037*       RST.LIL 10h
04007D 3E 0A       0038*       LD A, '\n'
04007F 5B D7       0039*       RST.LIL 10h
040081 F1          0040*       pop af
040082 C9          0041*       RET
040083             0042*   
040083             0043*   ; print a zero-terminated string at a graphics coordinate
040083             0044*   ; Inputs: HL Pointer to string, BC,DE x,y position (in pixels)
040083             0045*   printStringGfx:
040083 E5          0046*       push hl ; preserve string pointer
040084             0047*   ; move graphics cursor to x,y location
040084 3E 44       0048*       ld a,plot_pt+mv_abs
040086 CD D1 16 04 0049*       call vdu_plot
04008A             0050*   ; print string
04008A E1          0051*       pop hl ; restore string pointer
04008B             0052*   @print_loop:
04008B 7E          0053*       ld a,(hl)
04008C B7          0054*       or a ; check for end of string
04008D C8          0055*       ret z ; if zero, we're done
04008E 08          0056*       ex af,af' ; preserve character
04008F 3E 05       0057*       ld a,5 ; VDU 5 char to gfx cursor
040091 5B D7       0058*       rst.lil 10h ; send it
040093 08          0059*       ex af,af' ; restore character
040094 5B D7       0060*       rst.lil 10h ; print character
040096 23          0061*       inc hl
040097 C3 8B 00 04 0062*       jp @print_loop
04009B C9          0063*       ret
04009C             0064*   ; end printStringGfx
04009C             0065*   
04009C             0066*   ; Print a 24-bit HEX number
04009C             0067*   ; HLU: Number to print
04009C             0068*   printHex24:
04009C             0069*       HLU_TO_A
04009C 3B          0001*M1     dec sp ; 1 cycle
04009D E5          0002*M1     push hl ; 4 cycles
04009E 33          0003*M1     inc sp ; 1 cycle
04009F F1          0004*M1     pop af ; 4 cycles
0400A0             0005*M1     ; 10 cycles total
0400A0 CD AA 00 04 0070*       CALL printHex8
0400A4             0071*   ; Print a 16-bit HEX number
0400A4             0072*   ; HL: Number to print
0400A4             0073*   printHex16:
0400A4 7C          0074*       LD A,H
0400A5 CD AA 00 04 0075*       CALL printHex8
0400A9 7D          0076*       LD A,L
0400AA             0077*   ; Print an 8-bit HEX number
0400AA             0078*   ; A: Number to print
0400AA             0079*   printHex8:
0400AA 4F          0080*       LD C,A
0400AB 1F          0081*       RRA
0400AC 1F          0082*       RRA
0400AD 1F          0083*       RRA
0400AE 1F          0084*       RRA
0400AF CD B4 00 04 0085*       CALL @F
0400B3 79          0086*       LD A,C
0400B4             0087*   @@:
0400B4 E6 0F       0088*       AND 0Fh
0400B6 C6 90       0089*       ADD A,90h
0400B8 27          0090*       DAA
0400B9 CE 40       0091*       ADC A,40h
0400BB 27          0092*       DAA
0400BC 5B D7       0093*       RST.LIL 10h
0400BE C9          0094*       RET
0400BF             0095*   
0400BF             0096*   ; Print a 0x HEX prefix
0400BF             0097*   DisplayHexPrefix:
0400BF 3E 30       0098*       LD A, '0'
0400C1 5B D7       0099*       RST.LIL 10h
0400C3 3E 78       0100*       LD A, 'x'
0400C5 5B D7       0101*       RST.LIL 10h
0400C7 C9          0102*       RET
0400C8             0103*   
0400C8             0104*       MACRO printDecBC
0400C8             0105*       push hl
0400C8             0106*       push bc
0400C8             0107*       pop hl
0400C8             0108*       call printDec
0400C8             0109*       pop hl
0400C8             0110*       ENDMACRO
0400C8             0111*   
0400C8             0112*       MACRO printDecDE
0400C8             0113*       push hl
0400C8             0114*       push de
0400C8             0115*       pop hl
0400C8             0116*       call printDec
0400C8             0117*       pop hl
0400C8             0118*       ENDMACRO
0400C8             0119*   
0400C8             0120*       MACRO printDecHL
0400C8             0121*       call printDec
0400C8             0122*       ENDMACRO
0400C8             0123*   
0400C8             0124*       MACRO printDecIX
0400C8             0125*       push hl
0400C8             0126*       push ix
0400C8             0127*       pop hl
0400C8             0128*       call printDec
0400C8             0129*       pop hl
0400C8             0130*       ENDMACRO
0400C8             0131*   
0400C8             0132*       MACRO printDecIY
0400C8             0133*       push hl
0400C8             0134*       push iy
0400C8             0135*       pop hl
0400C8             0136*       call printDec
0400C8             0137*       pop hl
0400C8             0138*       ENDMACRO
0400C8             0139*   
0400C8             0140*   
0400C8             0141*   ; Prints the right justified decimal value in HL without leading zeroes
0400C8             0142*   ; HL : Value to print
0400C8             0143*   ; preserves all registers and flags
0400C8             0144*   printDec:
0400C8             0145*   ; BEGIN MY CODE
0400C8             0146*   ; back up all the things
0400C8 F5          0147*       push af
0400C9 C5          0148*       push bc
0400CA D5          0149*       push de
0400CB E5          0150*       push hl
0400CC             0151*   ; END MY CODE
0400CC 11 F4 00 04 0152*       LD DE, _printDecBuffer
0400D0 CD 04 01 04 0153*       CALL u24_to_ascii
0400D4             0154*   ; BEGIN MY CODE
0400D4             0155*   ; replace leading zeroes with spaces
0400D4 21 F4 00 04 0156*       LD HL, _printDecBuffer
0400D8 06 07       0157*       ld B, 7 ; if HL was 0, we want to keep the final zero
0400DA             0158*   @loop:
0400DA 7E          0159*       LD A, (HL)
0400DB FE 30       0160*       CP '0'
0400DD C2 E7 00 04 0161*       JP NZ, @done
0400E1 3E 20       0162*       LD A, ' '
0400E3 77          0163*       LD (HL), A
0400E4 23          0164*       INC HL
0400E5             0165*       ; CALL vdu_cursor_forward
0400E5 10 F3       0166*       DJNZ @loop
0400E7             0167*   @done:
0400E7             0168*   ; END MY CODE
0400E7 21 F4 00 04 0169*       LD HL, _printDecBuffer
0400EB CD 63 00 04 0170*       CALL printString
0400EF             0171*   ; BEGIN MY CODE
0400EF             0172*   ; restore all the things
0400EF E1          0173*       pop hl
0400F0 D1          0174*       pop de
0400F1 C1          0175*       pop bc
0400F2 F1          0176*       pop af
0400F3             0177*   ; END MY CODE
0400F3 C9          0178*       RET
0400F4 00 00 00 00 0179*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040104             0180*   
040104             0181*   ; This routine converts the unsigned 24-bit value in HLU into its ASCII representation,
040104             0182*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040104             0183*   ; so it will allways be 8 characters length
040104             0184*   ; HL : Value to convert to string
040104             0185*   ; DE : pointer to buffer, at least 8 byte + 0
040104             0186*   u24_to_ascii:
040104 01 80 69 67 0187*       LD BC,-10000000
040108 CD 3B 01 04 0188*       CALL @one_digit
04010C 01 C0 BD F0 0189*       LD BC,-1000000
040110 CD 3B 01 04 0190*       CALL @one_digit
040114 01 60 79 FE 0191*       LD BC,-100000
040118 CD 3B 01 04 0192*       CALL @one_digit
04011C 01 F0 D8 FF 0193*       LD BC,-10000
040120 CD 3B 01 04 0194*       CALL @one_digit
040124 01 18 FC FF 0195*       LD BC,-1000
040128 CD 3B 01 04 0196*       CALL @one_digit
04012C 01 9C FF FF 0197*       LD BC,-100
040130 CD 3B 01 04 0198*       CALL @one_digit
040134 0E F6       0199*       LD C,-10
040136 CD 3B 01 04 0200*       CALL @one_digit
04013A 48          0201*       LD C,B
04013B             0202*   @one_digit:
04013B 3E 2F       0203*       LD A,'0'-1
04013D             0204*   @divide_me:
04013D 3C          0205*       INC A
04013E 09          0206*       ADD HL,BC
04013F 38 FC       0207*       JR C,@divide_me
040141 ED 42       0208*       SBC HL,BC
040143 12          0209*       LD (DE),A
040144 13          0210*       INC DE
040145 C9          0211*       RET
040146             0212*   
040146             0213*   print_u24:
040146 D5          0214*       push de
040147 E5          0215*       push hl
040148 11 F4 00 04 0216*       ld de,_printDecBuffer
04014C CD 04 01 04 0217*       call u24_to_ascii
040150 21 F4 00 04 0218*       ld hl,_printDecBuffer
040154 CD 63 00 04 0219*       call printString
040158 3E 20       0220*       ld a,' '
04015A 5B D7       0221*       rst.lil 10h
04015C E1          0222*       pop hl
04015D D1          0223*       pop de
04015E C9          0224*       ret
04015F             0225*   
04015F             0226*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04015F             0227*   ; HL : Value to convert to string (integer part in H, fractional part in L)
04015F             0228*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04015F             0229*   u168_to_ascii:
04015F             0230*   ; add a leading space to make room for sign flag if needed
04015F 3E 20       0231*       ld a,' '
040161 12          0232*       ld (de),a
040162 13          0233*       inc de
040163             0234*   ; Convert integer part
040163 E5          0235*       push hl ; Save HL (we’ll need the fractional part later)
040164             0236*       ; call hlu_udiv256 ; Shift to get integer portion in HL
040164             0237*       SRL_UHL ; Shift to get integer portion in HL
040164 3B          0001*M1     dec sp ; 1 cycle
040165 E5          0002*M1     push hl ; 4 cycles
040166 33          0003*M1     inc sp ; 1 cycle
040167 E1          0004*M1     pop hl ; 4 cycles
040168 23          0005*M1     inc hl ; 1 cycle
040169 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04016B             0007*M1     ; 13 cycles total
04016B 01 F0 D8 FF 0238*       ld bc, -10000
04016F CD 92 01 04 0239*       call @one_int
040173 01 18 FC FF 0240*       ld bc, -1000
040177 CD 92 01 04 0241*       call @one_int
04017B 01 9C FF FF 0242*       ld bc, -100
04017F CD 92 01 04 0243*       call @one_int
040183 0E F6       0244*       ld c, -10
040185 CD 92 01 04 0245*       call @one_int
040189 48          0246*       ld c, b
04018A CD 92 01 04 0247*       call @one_int
04018E C3 9D 01 04 0248*       jp @frac ; Jump to fractional part conversion
040192             0249*   @one_int:
040192 3E 2F       0250*       ld a, '0' - 1 ; Start ASCII character at '0'
040194             0251*   @divide_me:
040194 3C          0252*       inc a
040195 09          0253*       add hl, bc ; Accumulate until overflow
040196 38 FC       0254*       jr c, @divide_me
040198 ED 42       0255*       sbc hl, bc ; Remove excess after overflow
04019A 12          0256*       ld (de), a ; Store ASCII digit
04019B 13          0257*       inc de
04019C C9          0258*       ret
04019D             0259*   ; Convert fractional part
04019D             0260*   @frac:
04019D 3E 2E       0261*       ld a, '.' ; Decimal point
04019F 12          0262*       ld (de), a
0401A0 13          0263*       inc de
0401A1 E1          0264*       pop hl ; Restore HL with original fraction
0401A2 06 03       0265*       ld b, 3 ; Loop counter for 3 fractional digits
0401A4             0266*   @frac_loop:
0401A4 26 0A       0267*       ld h, 10 ; Load multiplier for fractional part
0401A6 ED 6C       0268*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0401A8 3E 30       0269*       ld a, '0'
0401AA 84          0270*       add a, h ; Convert integer part to ASCII
0401AB 12          0271*       ld (de), a
0401AC 13          0272*       inc de
0401AD 10 F5       0273*       djnz @frac_loop ; Repeat for each fractional digit
0401AF             0274*   ; Add null terminator
0401AF AF          0275*       xor a ; Null terminator
0401B0 12          0276*       ld (de), a
0401B1 C9          0277*       ret
0401B2             0278*   
0401B2             0279*   print_u168:
0401B2 D5          0280*       push de
0401B3 E5          0281*       push hl
0401B4 11 F4 00 04 0282*       ld de,_printDecBuffer
0401B8 CD 5F 01 04 0283*       call u168_to_ascii
0401BC 21 F4 00 04 0284*       ld hl,_printDecBuffer
0401C0 CD 63 00 04 0285*       call printString
0401C4 E1          0286*       pop hl
0401C5 D1          0287*       pop de
0401C6 C9          0288*       ret
0401C7             0289*   
0401C7             0290*   ; signed version of u168_to_ascii
0401C7             0291*   s168_to_ascii:
0401C7 D5          0292*       push de ; save starting address of buffer
0401C8 CD 6C 04 04 0293*       call hlu_abs
0401CC F5          0294*       push af ; save sign flag
0401CD CD 5F 01 04 0295*       call u168_to_ascii
0401D1 F1          0296*       pop af ; restore sign flag
0401D2 D1          0297*       pop de ; restore starting address of buffer
0401D3 F0          0298*       ret p ; hlu was positive so nothing to do
0401D4 3E 2D       0299*       ld a,'-'
0401D6 12          0300*       ld (de),a
0401D7 C9          0301*       ret
0401D8             0302*   
0401D8             0303*   print_s168:
0401D8 D5          0304*       push de
0401D9 E5          0305*       push hl
0401DA 11 F4 00 04 0306*       ld de,_printDecBuffer
0401DE CD C7 01 04 0307*       call s168_to_ascii
0401E2 21 F4 00 04 0308*       ld hl,_printDecBuffer
0401E6 CD 63 00 04 0309*       call printString
0401EA E1          0310*       pop hl
0401EB D1          0311*       pop de
0401EC C9          0312*       ret
0401ED             0313*   
0401ED             0314*   print_s168_hl:
0401ED F5          0315*       push af
0401EE E5          0316*       push hl
0401EF CD D8 01 04 0317*       call print_s168
0401F3 3E 20       0318*       ld a,' '
0401F5 5B D7       0319*       rst.lil 10h
0401F7 E1          0320*       pop hl
0401F8 F1          0321*       pop af
0401F9 C9          0322*       ret
0401FA             0323*   
0401FA             0324*   print_s168_bc:
0401FA F5          0325*       push af
0401FB C5          0326*       push bc
0401FC E5          0327*       push hl
0401FD C5          0328*       push bc
0401FE E1          0329*       pop hl
0401FF CD D8 01 04 0330*       call print_s168
040203 3E 20       0331*       ld a,' '
040205 5B D7       0332*       rst.lil 10h
040207 E1          0333*       pop hl
040208 C1          0334*       pop bc
040209 F1          0335*       pop af
04020A C9          0336*       ret
04020B             0337*   
04020B             0338*   print_s168_de:
04020B F5          0339*       push af
04020C D5          0340*       push de
04020D E5          0341*       push hl
04020E EB          0342*       ex de,hl
04020F CD D8 01 04 0343*       call print_s168
040213 3E 20       0344*       ld a,' '
040215 5B D7       0345*       rst.lil 10h
040217 E1          0346*       pop hl
040218 D1          0347*       pop de
040219 F1          0348*       pop af
04021A C9          0349*       ret
04021B             0350*   
04021B             0351*   print_s168_hl_bc_de:
04021B F5          0352*       push af
04021C C5          0353*       push bc
04021D D5          0354*       push de
04021E E5          0355*       push hl
04021F CD D8 01 04 0356*       call print_s168
040223 3E 20       0357*       ld a,' '
040225 5B D7       0358*       rst.lil 10h
040227 C5          0359*       push bc
040228 E1          0360*       pop hl
040229 CD D8 01 04 0361*       call print_s168
04022D 3E 20       0362*       ld a,' '
04022F 5B D7       0363*       rst.lil 10h
040231 EB          0364*       ex de,hl
040232 CD D8 01 04 0365*       call print_s168
040236 3E 20       0366*       ld a,' '
040238 5B D7       0367*       rst.lil 10h
04023A E1          0368*       pop hl
04023B D1          0369*       pop de
04023C C1          0370*       pop bc
04023D F1          0371*       pop af
04023E C9          0372*       ret
04023F             0373*   
04023F             0374*   print_s168_bc_de:
04023F F5          0375*       push af
040240 C5          0376*       push bc
040241 D5          0377*       push de
040242 C5          0378*       push bc
040243 E1          0379*       pop hl
040244 CD D8 01 04 0380*       call print_s168
040248 3E 20       0381*       ld a,' '
04024A 5B D7       0382*       rst.lil 10h
04024C EB          0383*       ex de,hl
04024D CD D8 01 04 0384*       call print_s168
040251 3E 20       0385*       ld a,' '
040253 5B D7       0386*       rst.lil 10h
040255 E1          0387*       pop hl
040256 D1          0388*       pop de
040257 C1          0389*       pop bc
040258 F1          0390*       pop af
040259 C9          0391*       ret
04025A             0392*   
04025A             0393*   print_s168_a:
04025A F5          0394*       push af
04025B C5          0395*       push bc
04025C E5          0396*       push hl
04025D 21 00 00 00 0397*       ld hl,0
040261 6F          0398*       ld l,a
040262 CD ED 01 04 0399*       call print_s168_hl
040266 E1          0400*       pop hl
040267 C1          0401*       pop bc
040268 F1          0402*       pop af
040269 C9          0403*       ret
04026A             0404*   
04026A             0405*   ; #### new functions added by Brandon R. Gates ####
04026A             0406*   
04026A             0407*   ; print the binary representation of the 8-bit value in a
04026A             0408*   ; destroys a, hl, bc
04026A             0409*   printBin8:
04026A 06 08       0410*       ld b,8 ; loop counter for 8 bits
04026C 21 87 02 04 0411*       ld hl,@cmd ; set hl to the low byte of the output string
040270             0412*       ; (which will be the high bit of the value in a)
040270             0413*   @loop:
040270 07          0414*       rlca ; put the next highest bit into carry
040271 38 04       0415*       jr c,@one
040273 36 30       0416*       ld (hl),'0'
040275 18 02       0417*       jr @next_bit
040277             0418*   @one:
040277 36 31       0419*       ld (hl),'1'
040279             0420*   @next_bit:
040279 23          0421*       inc hl
04027A 10 F4       0422*       djnz @loop
04027C             0423*   ; print it
04027C 21 87 02 04 0424*       ld hl,@cmd
040280 01 08 00 00 0425*       ld bc,@end-@cmd
040284 5B DF       0426*       rst.lil $18
040286 C9          0427*       ret
040287             0428*   @cmd: ds 8 ; eight bytes for eight bits
04028F             0429*   @end:
04028F             0430*   
04028F             0431*   ; print the binary representation of the 8-bit value in a
04028F             0432*   ; in reverse order (lsb first)
04028F             0433*   ; destroys a, hl, bc
04028F             0434*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
04028F 06 08       0435*       ld b,8 ; loop counter for 8 bits
040291 21 AC 02 04 0436*       ld hl,@cmd ; set hl to the low byte of the output string
040295             0437*       ; (which will be the high bit of the value in a)
040295             0438*   @loop:
040295 0F          0439*       rrca ; put the next lowest bit into carry
040296 38 04       0440*       jr c,@one
040298 36 30       0441*       ld (hl),'0'
04029A 18 02       0442*       jr @next_bit
04029C             0443*   @one:
04029C 36 31       0444*       ld (hl),'1'
04029E             0445*   @next_bit:
04029E 23          0446*       inc hl
04029F 10 F4       0447*       djnz @loop
0402A1             0448*   ; print it
0402A1 21 AC 02 04 0449*       ld hl,@cmd
0402A5 01 08 00 00 0450*       ld bc,@end-@cmd
0402A9 5B DF       0451*       rst.lil $18
0402AB C9          0452*       ret
0402AC             0453*   @cmd: ds 8 ; eight bytes for eight bits
0402B4             0454*   @end:
0402B4             0455*   
       FF FF FF FF 
       FF FF FF FF 
0402B4 20 61 66 3D 0456*   str_afu: db " af=",0
       00          
0402B9 20 68 6C 3D 0457*   str_hlu: db " hl=",0
       00          
0402BE 20 62 63 3D 0458*   str_bcu: db " bc=",0
       00          
0402C3 20 64 65 3D 0459*   str_deu: db " de=",0
       00          
0402C8 20 69 78 3D 0460*   str_ixu: db " ix=",0
       00          
0402CD 20 69 79 3D 0461*   str_iyu: db " iy=",0
       00          
0402D2             0462*   
0402D2             0463*   ; print udeuhl to screen in hexidecimal format
0402D2             0464*   ; inputs: none
0402D2             0465*   ; outputs: concatenated hexidecimal udeuhl
0402D2             0466*   ; destroys: nothing
0402D2             0467*   dumpUDEUHLHex:
0402D2             0468*   ; store everything in scratch
0402D2 22 31 03 04 0469*       ld (uhl),hl
0402D6 ED 43 34 03 0470*       ld (ubc),bc
       04          
0402DB ED 53 37 03 0471*       ld (ude),de
       04          
0402E0 DD 22 3A 03 0472*       ld (uix),ix
       04          
0402E5 FD 22 3D 03 0473*       ld (uiy),iy
       04          
0402EA F5          0474*       push af
0402EB             0475*   
0402EB             0476*   ; print each register
0402EB             0477*   
0402EB 21 25 03 04 0478*       ld hl,str_udeuhl
0402EF CD 63 00 04 0479*       call printString
0402F3 2A 37 03 04 0480*       ld hl,(ude)
0402F7 CD 9C 00 04 0481*       call printHex24
0402FB 3E 2E       0482*       ld a,'.' ; print a dot to separate the values
0402FD 5B D7       0483*       rst.lil 10h
0402FF 2A 31 03 04 0484*       ld hl,(uhl)
040303 CD 9C 00 04 0485*       call printHex24
040307 CD 78 00 04 0486*       call printNewLine
04030B             0487*   
04030B             0488*   ; restore everything
04030B 2A 31 03 04 0489*       ld hl, (uhl)
04030F ED 4B 34 03 0490*       ld bc, (ubc)
       04          
040314 ED 5B 37 03 0491*       ld de, (ude)
       04          
040319 DD 2A 3A 03 0492*       ld ix, (uix)
       04          
04031E FD 2A 3D 03 0493*       ld iy, (uiy)
       04          
040323 F1          0494*       pop af
040324             0495*   ; all done
040324 C9          0496*       ret
040325             0497*   
040325 75 64 65 2E 0498*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04032E             0499*   
04032E             0500*   ; global scratch memory for registers
04032E 00 00 00    0501*   uaf: dl 0
040331 00 00 00    0502*   uhl: dl 0
040334 00 00 00    0503*   ubc: dl 0
040337 00 00 00    0504*   ude: dl 0
04033A 00 00 00    0505*   uix: dl 0
04033D 00 00 00    0506*   uiy: dl 0
040340 00 00 00    0507*   usp: dl 0
040343 00 00 00    0508*   upc: dl 0
040346             0509*   
040346             0510*   
040346             0511*   ; set all the bits in the flag register
040346             0512*   ; more of an academic exercise than anything useful
040346             0513*   ; inputs; none
040346             0514*   ; outputs; a=0,f=255
040346             0515*   ; destroys: flags, hl
040346             0516*   ; preserves: a, because why not
040346             0517*   setAllFlags:
040346 21 FF 00 00 0518*       ld hl,255
04034A 67          0519*       ld h,a ; four cycles to preserve a is cheap
04034B E5          0520*       push hl
04034C F1          0521*       pop af
04034D C9          0522*       ret
04034E             0523*   
04034E             0524*   ; reset all the bits in the flag register
04034E             0525*   ; unlike its inverse counterpart, this may actually be useful
04034E             0526*   ; inputs; none
04034E             0527*   ; outputs; a=0,f=0
04034E             0528*   ; destroys: flags, hl
04034E             0529*   ; preserves: a, because why not
04034E             0530*   resetAllFlags:
04034E 21 00 00 00 0531*       ld hl,0
040352 67          0532*       ld h,a ; four cycles to preserve a is cheap
040353 E5          0533*       push hl
040354 F1          0534*       pop af
040355 C9          0535*       ret
040356             0536*   
040356             0537*   ; wait until user presses a key
040356             0538*   ; inputs: none
040356             0539*   ; outputs: ascii code of key pressed in a
040356             0540*   ; destroys: af,ix
040356             0541*   waitKeypress:
040356             0542*       MOSCALL mos_getkey
040356 3E 00       0001*M1 			LD	A, function
040358 5B CF       0002*M1 			RST.LIL	08h
04035A C9          0543*       ret
04035B             0544*   
04035B             0545*   ; clear a block of memory by writing a prescribed value to each byte in the range
04035B             0546*   ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
04035B             0547*   ; outputs: memory block is cleared
04035B             0548*   ; destroys: hl, de
04035B             0549*   clear_mem:
04035B 0B          0550*       dec bc ; we do this because we will increment de before writing the first byte
04035C 77          0551*       ld (hl),a
04035D E5          0552*       push hl
04035E D1          0553*       pop de
04035F 13          0554*       inc de ; target address
040360 ED B0       0555*       ldir
040362 C9          0556*       ret
040363             0032        include "arith24.inc"
040363             0001*   ;------------------------------------------------------------------------
040363             0002*   ;  arith24.asm
040363             0003*   ;  24-bit ez80 arithmetic routines
040363             0004*   ;  Copyright (c) Shawn Sijnstra 2024
040363             0005*   ;  MIT license
040363             0006*   ;
040363             0007*   ;  This library was created as a tool to help make ez80
040363             0008*   ;  24-bit native assembly routines for simple mathematical problems
040363             0009*   ;  more widely available.
040363             0010*   ;
040363             0011*   ;------------------------------------------------------------------------
040363             0012*   
040363             0013*   ;------------------------------------------------------------------------
040363             0014*   ; umul24:	HL = HL*DE (unsigned)
040363             0015*   ; Preserves AF, BC, DE
040363             0016*   ; Uses a fast multiply routine.
040363             0017*   ;------------------------------------------------------------------------
040363             0018*   umul24:
040363 D5          0019*   	push	DE
040364 C5          0020*   	push	BC
040365 F5          0021*   	push	AF
040366 E5          0022*   	push	HL
040367 C1          0023*   	pop		BC
040368 3E 18       0024*       ld	 	a, 24 ; No. of bits to process
04036A 21 00 00 00 0025*       ld	 	hl, 0 ; Result
04036E             0026*   umul24_lp:
04036E 29          0027*   	add	hl,hl
04036F EB          0028*   	ex	de,hl
040370 29          0029*   	add	hl,hl
040371 EB          0030*   	ex	de,hl
040372 30 01       0031*   	jr	nc,umul24_nc
040374 09          0032*   	add	hl,bc
040375             0033*   umul24_nc:
040375 3D          0034*   	dec	a
040376 20 F6       0035*   	jr	nz,umul24_lp
040378 F1          0036*   	pop	af
040379 C1          0037*   	pop	bc
04037A D1          0038*   	pop	de
04037B C9          0039*   	ret
04037C             0040*   
04037C             0041*   
04037C             0042*   ;------------------------------------------------------------------------
04037C             0043*   ; udiv24
04037C             0044*   ; Unsigned 24-bit division
04037C             0045*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
04037C             0046*   ;
04037C             0047*   ; Uses AF BC DE HL
04037C             0048*   ; Uses Restoring Division algorithm
04037C             0049*   ;------------------------------------------------------------------------
04037C             0050*   
04037C             0051*   udiv24:
04037C E5          0052*   	push	hl
04037D C1          0053*   	pop		bc	;move dividend to BCU
04037E 21 00 00 00 0054*   	ld		hl,0	;result
040382 A7          0055*   	and		a
040383 ED 52       0056*   	sbc		hl,de	;test for div by 0
040385 C8          0057*   	ret		z		;it's zero, carry flag is clear
040386 19          0058*   	add		hl,de	;HL is 0 again
040387 3E 18       0059*   	ld		a,24	;number of loops through.
040389             0060*   udiv1:
040389 C5          0061*   	push	bc	;complicated way of doing this because of lack of access to top bits
04038A E3          0062*   	ex		(sp),hl
04038B 37          0063*   	scf
04038C ED 6A       0064*   	adc	hl,hl
04038E E3          0065*   	ex	(sp),hl
04038F C1          0066*   	pop	bc		;we now have bc = (bc * 2) + 1
040390             0067*   
040390 ED 6A       0068*   	adc	hl,hl
040392 A7          0069*   	and	a		;is this the bug
040393 ED 52       0070*   	sbc	hl,de
040395 30 02       0071*   	jr	nc,udiv2
040397 19          0072*   	add	hl,de
040398             0073*   ;	dec	c
040398 0B          0074*   	dec	bc
040399             0075*   udiv2:
040399 3D          0076*   	dec	a
04039A 20 ED       0077*   	jr	nz,udiv1
04039C 37          0078*   	scf		;flag used for div0 error
04039D C5          0079*   	push	bc
04039E D1          0080*   	pop		de	;remainder
04039F C9          0081*   	ret
0403A0             0082*   
0403A0             0083*   
0403A0             0084*   
0403A0             0085*   ;------------------------------------------------------------------------
0403A0             0086*   ; neg24
0403A0             0087*   ; Returns: HLU = 0-HLU
0403A0             0088*   ; preserves all other registers
0403A0             0089*   ;------------------------------------------------------------------------
0403A0             0090*   neg24:
0403A0 D5          0091*   	push	de
0403A1 EB          0092*   	ex		de,hl
0403A2 21 00 00 00 0093*   	ld		hl,0
0403A6 B7          0094*   	or		a
0403A7 ED 52       0095*   	sbc		hl,de
0403A9 D1          0096*   	pop		de
0403AA C9          0097*   	ret
0403AB             0098*   
0403AB             0099*   ;------------------------------------------------------------------------
0403AB             0100*   ; or_hlu_deu: 24 bit bitwise OR
0403AB             0101*   ; Returns: hlu = hlu OR deu
0403AB             0102*   ; preserves all other registers
0403AB             0103*   ;------------------------------------------------------------------------
0403AB             0104*   or_hlu_deu:
0403AB 22 34 04 04 0105*   	ld	(bitbuf1),hl
0403AF ED 53 37 04 0106*   	ld	(bitbuf2),de
       04          
0403B4 D5          0107*   	push	de	;preserve DEU
0403B5 C5          0108*   	push	bc	;preserve BCU
0403B6 06 03       0109*   	ld		b,3
0403B8 21 34 04 04 0110*   	ld	hl,bitbuf1
0403BC 11 34 04 04 0111*   	ld	de,bitbuf1
0403C0             0112*   orloop_24:
0403C0 1A          0113*   	ld	a,(de)
0403C1 B6          0114*   	or	(hl)
0403C2 12          0115*   	ld	(de),a
0403C3 13          0116*   	inc	de
0403C4 23          0117*   	inc	hl
0403C5 10 F9       0118*   	djnz	orloop_24
0403C7 2A 37 04 04 0119*   	ld	hl,(bitbuf2)
0403CB C1          0120*   	pop		bc	;restore BC
0403CC D1          0121*   	pop		de	;restore DE
0403CD             0122*   
0403CD             0123*   ;------------------------------------------------------------------------
0403CD             0124*   ; and_hlu_deu: 24 bit bitwise AND
0403CD             0125*   ; Returns: hlu = hlu AND deu
0403CD             0126*   ; preserves all other registers
0403CD             0127*   ;------------------------------------------------------------------------
0403CD             0128*   and_hlu_deu:
0403CD 22 34 04 04 0129*   	ld	(bitbuf1),hl
0403D1 ED 53 37 04 0130*   	ld	(bitbuf2),de
       04          
0403D6 D5          0131*   	push	de	;preserve DEU
0403D7 C5          0132*   	push	bc	;preserve BCU
0403D8 06 03       0133*   	ld		b,3
0403DA 21 34 04 04 0134*   	ld	hl,bitbuf1
0403DE 11 34 04 04 0135*   	ld	de,bitbuf1
0403E2             0136*   andloop_24:
0403E2 1A          0137*   	ld	a,(de)
0403E3 A6          0138*   	and	(hl)
0403E4 12          0139*   	ld	(de),a
0403E5 13          0140*   	inc	de
0403E6 23          0141*   	inc	hl
0403E7 10 F9       0142*   	djnz	andloop_24
0403E9 2A 37 04 04 0143*   	ld	hl,(bitbuf2)
0403ED C1          0144*   	pop		bc	;restore BC
0403EE D1          0145*   	pop		de	;restore DE
0403EF             0146*   
0403EF             0147*   ;------------------------------------------------------------------------
0403EF             0148*   ; xor_hlu_deu: 24 bit bitwise XOR
0403EF             0149*   ; Returns: hlu = hlu XOR deu
0403EF             0150*   ; preserves all other registers
0403EF             0151*   ;------------------------------------------------------------------------
0403EF             0152*   xor_hlu_deu:
0403EF 22 34 04 04 0153*   	ld	(bitbuf1),hl
0403F3 ED 53 37 04 0154*   	ld	(bitbuf2),de
       04          
0403F8 D5          0155*   	push	de	;preserve DEU
0403F9 C5          0156*   	push	bc	;preserve BCU
0403FA 06 03       0157*   	ld		b,3
0403FC 21 34 04 04 0158*   	ld	hl,bitbuf1
040400 11 34 04 04 0159*   	ld	de,bitbuf1
040404             0160*   xorloop_24:
040404 1A          0161*   	ld	a,(de)
040405 AE          0162*   	xor	(hl)
040406 12          0163*   	ld	(de),a
040407 13          0164*   	inc	de
040408 23          0165*   	inc	hl
040409 10 F9       0166*   	djnz	xorloop_24
04040B 2A 37 04 04 0167*   	ld	hl,(bitbuf2)
04040F C1          0168*   	pop		bc	;restore BC
040410 D1          0169*   	pop		de	;restore DE
040411             0170*   
040411             0171*   ;------------------------------------------------------------------------
040411             0172*   ; shl_hlu: 24 bit shift left hlu by a positions
040411             0173*   ; Returns: hlu = hlu << a
040411             0174*   ;		   a = 0
040411             0175*   ; NOTE: only considers a up to 16 bits.
040411             0176*   ; preserves all other registers
040411             0177*   ; modified by Brandon R. Gates to use a instead of de
040411             0178*   ;------------------------------------------------------------------------
040411             0179*   shl_hlu:
040411 B7          0180*   	or a
040412 C8          0181*   	ret		z		;we're done
040413 29          0182*   	add		hl,hl	;shift HLU left
040414 3D          0183*   	dec a
040415 18 FA       0184*   	jr		shl_hlu
040417             0185*   
040417             0186*   ;------------------------------------------------------------------------
040417             0187*   ; shr_hlu: 24 bit shift right hlu by a positions
040417             0188*   ; Returns: hlu = hlu >> a
040417             0189*   ;		   a = 0
040417             0190*   ; NOTE: only considers a up to 16 bits.
040417             0191*   ; preserves all other registers
040417             0192*   ; modified by Brandon R. Gates to use a instead of de
040417             0193*   ;------------------------------------------------------------------------
040417             0194*   shr_hlu:
040417 22 34 04 04 0195*   	ld		(bitbuf1),hl
04041B 21 36 04 04 0196*   	ld		hl,bitbuf1+2
04041F             0197*   @shr_loop:
04041F B7          0198*   	or a
040420 28 0D       0199*   	jr		z,@shr_done		;we're done
040422             0200*   ;carry is clear from or instruction
040422 CB 1E       0201*   	rr		(hl)
040424 2B          0202*   	dec		hl
040425 CB 1E       0203*   	rr		(hl)
040427 2B          0204*   	dec		hl
040428 CB 1E       0205*   	rr		(hl)
04042A 23          0206*   	inc		hl
04042B 23          0207*   	inc		hl
04042C 3D          0208*   	dec a
04042D 18 F0       0209*   	jr		@shr_loop
04042F             0210*   @shr_done:
04042F 2A 34 04 04 0211*   	ld		hl,(bitbuf1)	;collect result
040433 C9          0212*   	ret
040434             0213*   
040434             0214*   ;------------------------------------------------------------------------
040434             0215*   ; Scratch area for calculations
040434             0216*   ;------------------------------------------------------------------------
040434 00 00 00    0217*   bitbuf1:	dw24	0	;bit manipulation buffer 1
040437 00 00 00    0218*   bitbuf2:	dw24	0	;bit manipulation buffer 2
04043A             0219*   
04043A             0220*   ; -----------------------------------------------------------------------
04043A             0221*   ; Functions added by Brandon R. Gates
04043A             0222*   ; -----------------------------------------------------------------------
04043A             0223*   
04043A             0224*   ;------------------------------------------------------------------------
04043A             0225*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
04043A             0226*   ;              Determines the LSB of A and shifts HLU accordingly.
04043A             0227*   ;              HLU = HLU >> LSB(A)
04043A             0228*   ; Returns: HLU = HLU >> LSB(A)
04043A             0229*   ; Destroys: af
04043A             0230*   ;------------------------------------------------------------------------
04043A             0231*   shr_hlu_log2a:
04043A B7          0232*   	or a    ; check for zero
04043B C8          0233*   	ret z   ; nothing to shift so we're done
04043C C5          0234*   	push 	bc ; preserve
04043D 06 00       0235*   	ld		b,0 ; clear b
04043F             0236*   @find_bit:
04043F 0F          0237*   	rrca ; bit 0 to carry
040440 DA 49 04 04 0238*   	jp c,@found_bit
040444 04          0239*   	inc b ; next bit
040445 C3 3F 04 04 0240*   	jp @find_bit
040449             0241*   @found_bit:
040449 78          0242*   	ld a,b
04044A CD 17 04 04 0243*   	call shr_hlu
04044E C1          0244*   	pop 	bc ; restore
04044F C9          0245*   	ret
040450             0246*   ; end shr_hlu_log2a
040450             0247*   
040450             0248*   ;------------------------------------------------------------------------
040450             0249*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040450             0250*   ;                Determines the LSB of A and shifts HLU accordingly.
040450             0251*   ;                HLU = HLU << LSB(A)
040450             0252*   ; Returns: HLU = HLU << LSB(A)
040450             0253*   ; Destroys: af
040450             0254*   ;------------------------------------------------------------------------
040450             0255*   shl_hlu_log2a:
040450 B7          0256*   	or a    ; check for zero
040451 C8          0257*   	ret z   ; nothing to shift so we're done
040452 C5          0258*   	push 	bc ; preserve
040453 06 00       0259*   	ld		b,0 ; clear b
040455             0260*   @find_bit:
040455 0F          0261*   	rrca ; bit 0 to carry
040456 DA 5F 04 04 0262*   	jp c,@found_bit
04045A 04          0263*   	inc b ; next bit
04045B C3 55 04 04 0264*   	jp @find_bit
04045F             0265*   @found_bit:
04045F 78          0266*   	ld a,b
040460 CD 11 04 04 0267*   	call shl_hlu
040464 C1          0268*   	pop 	bc ; restore
040465 C9          0269*   	ret
040466             0270*   ; end shl_hlu_log2a
040466             0033        include "maths.inc"
040466             0001*   ;------------------------------------------------------------------------
040466             0002*   ; Scratch area for calculations
040466             0003*   ;------------------------------------------------------------------------
040466 00 00 00    0004*   scratch1: dw24 0 ;bit manipulation buffer 1
040469 00 00 00    0005*   scratch2: dw24 0 ;bit manipulation buffer 2
04046C             0006*   
04046C             0007*   ; absolute value of hlu
04046C             0008*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
04046C             0009*   ;         s1,z0,pv0,n1,c0 if hlu was negative
04046C             0010*   ;         s0,z1,pv0,n1,c0 if hlu was zero
04046C             0011*   ;         s0,z0,pv0,n1,c0 if hlu was positive
04046C             0012*   ; destroys: a
04046C             0013*   hlu_abs:
04046C 19          0014*       add hl,de
04046D B7          0015*       or a
04046E ED 52       0016*       sbc hl,de
040470 FA 75 04 04 0017*       jp m,@is_neg
040474 C9          0018*       ret ; hlu is positive or zero so we're done
040475             0019*   @is_neg:
040475 F5          0020*       push af ; otherwise, save current flags for return
040476 CD 7C 04 04 0021*       call neg_hlu ; negate hlu
04047A F1          0022*       pop af ; get back flags
04047B C9          0023*       ret
04047C             0024*   
04047C             0025*   ; flip the sign of hlu
04047C             0026*   ; inputs: hlu
04047C             0027*   ; returns: 0-hlu, flags set appropriately for the result:
04047C             0028*   ;         s1,z0,pv0,n1,c1 if result is negative
04047C             0029*   ;         s0,z1,pv0,n1,c0 if result is zero
04047C             0030*   ;         s0,z0,pv0,n1,c1 if result is positive
04047C             0031*   ; destroys a
04047C             0032*   neg_hlu:
04047C D5          0033*       push de ; save de
04047D EB          0034*       ex de,hl ; put hl into de
04047E 21 00 00 00 0035*       ld hl,0 ; clear hl
040482 AF          0036*       xor a ; clear carry
040483 ED 52       0037*       sbc hl,de ; 0-hlu = -hlu
040485 D1          0038*       pop de ; get de back
040486 C9          0039*       ret ; easy peasy
040487             0040*   
040487             0041*   ;------------------------------------------------------------------------
040487             0042*   ; divide hlu by 2, inspired by above
040487             0043*   ;------------------------------------------------------------------------
040487             0044*   hlu_div2:
040487 22 66 04 04 0045*       ld (scratch1),hl
04048B 21 68 04 04 0046*       ld hl,scratch1+2
04048F CB 1E       0047*       rr (hl)
040491 2B          0048*       dec hl
040492 CB 1E       0049*       rr (hl)
040494 2B          0050*       dec hl
040495 CB 1E       0051*       rr (hl)
040497 23          0052*       inc hl
040498 23          0053*       inc hl
040499 2A 66 04 04 0054*       ld hl,(scratch1)
04049D C9          0055*       ret
04049E             0056*   
04049E             0057*   ; this is my little hack to divide by 16
04049E             0058*   hlu_div16:
04049E AF          0059*       xor a
04049F 29          0060*       add hl,hl
0404A0 17          0061*       rla
0404A1 29          0062*       add hl,hl
0404A2 17          0063*       rla
0404A3 29          0064*       add hl,hl
0404A4 17          0065*       rla
0404A5 29          0066*       add hl,hl
0404A6 17          0067*       rla
0404A7 22 B4 04 04 0068*       ld (@scratch),hl
0404AB 32 B7 04 04 0069*       ld (@scratch+3),a
0404AF 2A B5 04 04 0070*       ld hl,(@scratch+1)
0404B3 C9          0071*       ret
0404B4             0072*   @scratch: ds 4
0404B8             0073*   
0404B8             0074*   ; hlu signed division by 256
0404B8             0075*   ; returns: hlu / 256
0404B8             0076*   ; destroys: af
0404B8             0077*   hlu_sdiv256:
       FF FF FF FF 
0404B8 AF          0078*       xor a ; assume hl is positive
0404B9 22 CF 04 04 0079*       ld (@buffer),hl
0404BD             0080*       SIGN_HLU
0404BD 19          0001*M1     add hl,de ; 1 cycle
0404BE B7          0002*M1     or a ; clear flags ; 1 cycle
0404BF ED 52       0003*M1     sbc hl,de ; 2 cycles
0404C1             0004*M1     ; 4 cycles total
0404C1 F2 C6 04 04 0081*       jp p,@hl_pos
0404C5 3D          0082*       dec a
0404C6             0083*   @hl_pos:
0404C6 32 D2 04 04 0084*       ld (@buffer+3),a
0404CA 2A D0 04 04 0085*       ld hl,(@buffer+1)
0404CE C9          0086*       ret
0404CF             0087*   @buffer: ds 4
0404D3             0088*   
0404D3             0089*   ; hlu 1 byte right shift, unsigned
0404D3             0090*   ; returns: hlu / 256, fractional portion in a
0404D3             0091*   ; destroys: af
0404D3             0092*   hlu_udiv256:
       FF FF FF FF 
0404D3 AF          0093*       xor a
0404D4 32 E5 04 04 0094*       ld (@buffer+3),a
0404D8 7D          0095*       ld a,l ; save the fractional portion
0404D9 22 E2 04 04 0096*       ld (@buffer),hl
0404DD 2A E3 04 04 0097*       ld hl,(@buffer+1)
0404E1 C9          0098*       ret
0404E2             0099*   @buffer: ds 4
0404E6             0100*   
       FF FF FF FF 
0404E6 00 00 00 00 0101*   add_bcd_arg1: db #00,#00,#00,#00
0404EA 00 00 00 00 0102*   add_bcd_arg2: db #00,#00,#00,#00
0404EE             0103*   
0404EE             0104*   ; set bcd values in a scratch memory address from registers bcde
0404EE             0105*   ; input: hl; scratch address,bcde; 8-place bcd number
0404EE             0106*   ; destroys ; hl
0404EE             0107*   set_bcd:
0404EE 73          0108*       ld (hl),e
0404EF 23          0109*       inc hl
0404F0 72          0110*       ld (hl),d
0404F1 23          0111*       inc hl
0404F2 71          0112*       ld (hl),c
0404F3 23          0113*       inc hl
0404F4 70          0114*       ld (hl),b
0404F5 C9          0115*       ret
0404F6             0116*   
0404F6             0117*   ; load bcd values from a scratch memory address to bcde
0404F6             0118*   ; input: hl; scratch address
0404F6             0119*   ; output: bcde; 8-place bcd number
0404F6             0120*   ; destroys: hl
0404F6             0121*   get_bcd:
0404F6 5E          0122*       ld e,(hl)
0404F7 23          0123*       inc hl
0404F8 56          0124*       ld d,(hl)
0404F9 23          0125*       inc hl
0404FA 4E          0126*       ld c,(hl)
0404FB 23          0127*       inc hl
0404FC 46          0128*       ld b,(hl)
0404FD C9          0129*       ret
0404FE             0130*   
0404FE             0131*   ; BCD addition
0404FE             0132*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0404FE             0133*   ;       a is the number of bytes holding each number (number of places/2)
0404FE             0134*   ; outputs: (hl) + (de) --> (hl)
0404FE             0135*   ; destroys: a,b,de,hl
0404FE             0136*   add_bcd:
0404FE 47          0137*       ld b,a ; loop counter
0404FF AF          0138*       xor a ; reset a, clear carry flag
040500             0139*   adcec:
040500 1A          0140*       ld a,(de) ; addend to acc
040501 8E          0141*       adc a,(hl) ; add (hl) to acc
040502 27          0142*       daa ; adjust result to bcd
040503 77          0143*       ld (hl),a ; store result
040504 23          0144*       inc hl ; advance memory pointers
040505 13          0145*       inc de
040506 10 F8       0146*       djnz adcec ; loop until b == 0
040508 C9          0147*       ret
040509             0148*   
040509             0149*   ; BCD subtraction
040509             0150*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040509             0151*   ;       a is the number of bytes holding each number (number of places/2)
040509             0152*   ; outputs: (hl) - (de) --> (hl)
040509             0153*   ; destroys: a,b,de,hl
040509             0154*   sub_bcd:
040509 47          0155*       ld b,a ; loop counter
04050A AF          0156*       xor a ; reset a,clear carry flag
04050B             0157*   subdec:
04050B 1A          0158*       ld a,(de) ; subtrahend to acc
04050C 9E          0159*       sbc a,(hl) ; subtract (hl) from acc
04050D 27          0160*       daa ; adjust result to bcd
04050E 77          0161*       ld (hl),a ; store result
04050F 23          0162*       inc hl ; advance memory pointers
040510 13          0163*       inc de
040511 10 F8       0164*       djnz subdec ; loop until b == 0
040513 C9          0165*       ret
040514             0166*   
040514             0167*   ; http://www.z80.info/pseudo-random.txt
040514             0168*   rand_8:
040514 C5          0169*       push bc
040515 3A 28 05 04 0170*       ld a,(r_seed)
040519 4F          0171*       ld c,a
04051A             0172*   
04051A 0F          0173*       rrca ; multiply by 32
04051B 0F          0174*       rrca
04051C 0F          0175*       rrca
04051D EE 1F       0176*       xor 0x1f
04051F             0177*   
04051F 81          0178*       add a,c
040520 DE FF       0179*       sbc a,255 ; carry
040522             0180*   
040522 32 28 05 04 0181*       ld (r_seed),a
040526 C1          0182*       pop bc
040527 C9          0183*       ret
040528 50          0184*   r_seed: defb $50
040529             0185*   
040529             0186*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
040529             0187*   prng24:
040529             0188*   ;;Expects ADL mode.
040529             0189*   ;;Output: HL
040529             0190*   ;;50cc
040529             0191*   ;;33 bytes
040529             0192*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
040529 ED 5B 4A 05 0193*       ld de,(seed1)
       04          
04052E B7          0194*       or a
04052F ED 62       0195*       sbc hl,hl
040531 19          0196*       add hl,de
040532 29          0197*       add hl,hl
040533 29          0198*       add hl,hl
040534 2C          0199*       inc l
040535 19          0200*       add hl,de
040536 22 4A 05 04 0201*       ld (seed1),hl
04053A 2A 4D 05 04 0202*       ld hl,(seed2)
04053E 29          0203*       add hl,hl
04053F 9F          0204*       sbc a,a
040540 E6 1B       0205*       and %00011011
040542 AD          0206*       xor l
040543 6F          0207*       ld l,a
040544 22 4D 05 04 0208*       ld (seed2),hl
040548 19          0209*       add hl,de
040549 C9          0210*       ret
04054A 00 00 00    0211*   seed1: dl 0
04054D 00 00 00    0212*   seed2: dl 0
040550             0034        include "files.inc"
040550             0001*   ; load to onboard 8k sram
040550             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
040550             0035        include "fixed168.inc"
040550             0001*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040550             0002*   ; uses EZ80 MLT instruction for speed
040550             0003*   ; operation: UHL * A --> UHL
040550             0004*   ; destroys: AF, HL
040550             0005*   smul24x8:
040550             0006*   ; make hl positive and store sign flag
040550 CD 6C 04 04 0007*       call hlu_abs
040554 F5          0008*       push af
040555             0009*   ; do the division
040555 CD 60 05 04 0010*       call mul24x8 ; hl = product
040559             0011*   ; adjust sign of result
040559 F1          0012*       pop af ; sign de
04055A F0          0013*       ret p ; hl was positive, nothing to do
04055B CD 7C 04 04 0014*       call neg_hlu ; result is negative
04055F C9          0015*       ret
040560             0016*   
040560             0017*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040560             0018*   ; uses EZ80 MLT instruction for speed
040560             0019*   ; operation: UHL * A --> AUHL
040560             0020*   ; destroys: AF, HL
040560             0021*   mul24x8:
040560 D5          0022*       push de ; preserve de
040561             0023*   ; low byte
040561 5D          0024*       ld e,l
040562 57          0025*       ld d,a
040563 ED 5C       0026*       mlt de
040565 6B          0027*       ld l,e ; product low byte
040566 08          0028*       ex af,af' ; save multiplier
040567 7A          0029*       ld a,d ; carry
040568 08          0030*       ex af,af' ; save carry, restore multiplier
040569             0031*   ; high byte
040569 5C          0032*       ld e,h
04056A 57          0033*       ld d,a
04056B ED 5C       0034*       mlt de
04056D 08          0035*       ex af,af' ; save multiplier, restore carry
04056E 83          0036*       add a,e ; add carry
04056F 67          0037*       ld h,a ; product middle byte
040570 7A          0038*       ld a,d ; carry
040571 08          0039*       ex af,af' ; save carry, restore multiplier
040572             0040*   ; upper byte
040572 22 8D 05 04 0041*       ld (@scratch),hl ; 7 cycles
040576 5F          0042*       ld e,a
040577 3A 8F 05 04 0043*       ld a,(@scratch+2)
04057B 57          0044*       ld d,a
04057C ED 5C       0045*       mlt de
04057E 08          0046*       ex af,af' ; restore carry
04057F 8B          0047*       adc a,e ; add carry
040580 32 8F 05 04 0048*       ld (@scratch+2),a ; 5 cycles
040584 2A 8D 05 04 0049*       ld hl,(@scratch) ; 7 cycles
040588             0050*   ; highest byte
040588 3E 00       0051*       ld a,0 ; preserve carry flag
04058A 8A          0052*       adc a,d ; product highest byte
04058B D1          0053*       pop de ; restore de
04058C C9          0054*       ret
04058D             0055*   @scratch: ds 3
040590             0056*   
       FF FF FF 
040590 00 00 00 00 0057*   mul24out: blkb 6,0
       00 00       
040596             0058*   
040596             0059*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040596             0060*   ; operation: UHL * UDE --> mul24out
040596             0061*   mul24:
040596 DD E5       0062*       push ix ; preserve
040598             0063*   ; point to output buffer and clear it
040598 DD 21 90 05 0064*       ld ix,mul24out
       04          
04059D C5          0065*       push bc
04059E 01 00 00 00 0066*       ld bc,0
0405A2 DD 0F 00    0067*       ld (ix),bc
0405A5 DD 0F 03    0068*       ld (ix+3),bc
0405A8 C1          0069*       pop bc
0405A9             0070*   ; STEP 1: UHL * E
0405A9 7B          0071*       ld a,e
0405AA E5          0072*       push hl
0405AB CD 60 05 04 0073*       call mul24x8
0405AF DD 2F 00    0074*       ld (ix+0),hl
0405B2 DD 77 03    0075*       ld (ix+3),a
0405B5             0076*   ; STEP 2: UHL * D
0405B5 E1          0077*       pop hl
0405B6 E5          0078*       push hl
0405B7 7A          0079*       ld a,d
0405B8 CD 60 05 04 0080*       call mul24x8
0405BC CD D5 05 04 0081*       call @accumulate
0405C0             0082*   ; STEP 3: UHL * DEU
0405C0 E1          0083*       pop hl
0405C1 ED 53 05 06 0084*       ld (@de),de
       04          
0405C6 3A 07 06 04 0085*       ld a,(@de+2)
0405CA CD 60 05 04 0086*       call mul24x8
0405CE CD D5 05 04 0087*       call @accumulate
0405D2             0088*   ; all done
0405D2 DD E1       0089*       pop ix ; restore
0405D4 C9          0090*       ret
0405D5             0091*   @accumulate:
0405D5 DD 23       0092*       inc ix
0405D7             0093*   ; highest byte of product to carry
0405D7 DD 77 03    0094*       ld (ix+3),a
0405DA             0095*   ; low byte of product
0405DA 7D          0096*       ld a,l
0405DB DD 86 00    0097*       add a,(ix+0)
0405DE DD 77 00    0098*       ld (ix+0),a
0405E1             0099*   ; high byte of product
0405E1 7C          0100*       ld a,h
0405E2 DD 8E 01    0101*       adc a,(ix+1)
0405E5 DD 77 01    0102*       ld (ix+1),a
0405E8             0103*   ; uppper byte of product
0405E8 22 02 06 04 0104*       ld (@hl),hl
0405EC 3A 04 06 04 0105*       ld a,(@hl+2)
0405F0 DD 8E 02    0106*       adc a,(ix+2)
0405F3 DD 77 02    0107*       ld (ix+2),a
0405F6             0108*   ; carry
0405F6 3E 00       0109*       ld a,0 ; preserve flags
0405F8 DD 8E 03    0110*       adc a,(ix+3)
0405FB DD 77 03    0111*       ld (ix+3),a
0405FE C9          0112*       ret
0405FF             0113*   
0405FF 00 00 00    0114*   @ix: dl 0
040602 00 00 00    0115*   @hl: dl 0
040605 00 00 00    0116*   @de: dl 0
040608             0117*   
040608             0118*   ; ; UHL * UDE --> UHL (unsigned)
040608             0119*   ; umul24:
040608             0120*   ;     call mul24
040608             0121*   ;     ld hl,(mul24out)
040608             0122*   ;     ret
040608             0123*   
040608             0124*   ; UH.L = UH.L*UD.E (unsigned)
040608             0125*   umul168:
040608 CD 96 05 04 0126*       call mul24
04060C 2A 91 05 04 0127*       ld hl,(mul24out+1)
040610 C9          0128*       ret
040611             0129*   
040611             0130*   ; UH.L * UD.E --> UH.L (signed)
040611             0131*   smul168:
040611             0132*   ; make everything positive and store sign flags
040611 CD 6C 04 04 0133*       call hlu_abs
040615 F5          0134*       push af
040616 EB          0135*       ex de,hl
040617 CD 6C 04 04 0136*       call hlu_abs
04061B EB          0137*       ex de,hl
04061C F5          0138*       push af
04061D             0139*   ; do the division
04061D CD 08 06 04 0140*       call umul168 ; hl = product
040621             0141*   ; adjust sign of result
040621 F1          0142*       pop af ; sign de
040622 FA 2D 06 04 0143*       jp m,@de_neg
040626 F1          0144*       pop af ; sign hl
040627 F0          0145*       ret p ; both positive, nothing to do
040628             0146*   @hl_neg:
040628 CD 7C 04 04 0147*       call neg_hlu ; de pos, hl neg, result is negative
04062C C9          0148*       ret
04062D             0149*   @de_neg:
04062D F1          0150*       pop af
04062E F8          0151*       ret m ; both negative, nothing to do
04062F CD 7C 04 04 0152*       call neg_hlu ; result is negative
040633 C9          0153*       ret
040634             0154*   
040634             0155*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040634             0156*   ; perform unsigned division of 16.8 fixed place values
040634             0157*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
040634             0158*   udiv168:
040634             0159*   ; back up divisor
040634 ED 53 6B 06 0160*       ld (@ude),de
       04          
040639             0161*   ; get the 16-bit integer part of the quotient
040639 CD 7C 03 04 0162*       call udiv24 ; de = quotient, hl = remainder
04063D             0163*   ; load quotient to upper three bytes of output
04063D ED 53 72 06 0164*       ld (div168_out+1),de
       04          
040642             0165*   @div256:
040642             0166*   ; multiply remainder by 256
040642             0167*       hlu_mul256
040642 29          0001*M1     add hl,hl ; * 2
040643 29          0002*M1     add hl,hl ; * 4
040644 29          0003*M1     add hl,hl ; * 8
040645 29          0004*M1     add hl,hl ; * 16
040646 29          0005*M1     add hl,hl ; * 32
040647 29          0006*M1     add hl,hl ; * 64
040648 29          0007*M1     add hl,hl ; * 128
040649 29          0008*M1     add hl,hl ; * 256
04064A             0168*   ; skip fractional computation if remainder is zero
04064A             0169*       SIGN_HLU
04064A 19          0001*M1     add hl,de ; 1 cycle
04064B B7          0002*M1     or a ; clear flags ; 1 cycle
04064C ED 52       0003*M1     sbc hl,de ; 2 cycles
04064E             0004*M1     ; 4 cycles total
04064E 20 03       0170*       jr nz,@div_frac
040650 AF          0171*       xor a
040651 18 0A       0172*       jr @write_frac
040653             0173*   ; now divide the shifted remainder by the divisor
040653             0174*   @div_frac:
040653 ED 5B 6B 06 0175*       ld de,(@ude) ; get back divisor
       04          
040658 CD 7C 03 04 0176*       call udiv24 ; de = quotient, hl = remainder
04065C             0177*   ; load low byte of quotient to low byte of output
04065C 7B          0178*       ld a,e
04065D             0179*   @write_frac:
04065D 32 71 06 04 0180*       ld (div168_out),a
040661             0181*   ; load de with return value
040661 ED 5B 71 06 0182*       ld de,(div168_out)
       04          
040666             0183*   ; load a with any overflow
040666 3A 74 06 04 0184*       ld a,(div168_out+3)
04066A C9          0185*       ret ; ud.e is the 16.8 result
04066B             0186*   @ude: ds 6
040671             0187*   div168_out: ds 4 ; the extra byte is for overflow
040675             0188*   
040675             0189*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040675             0190*   ; perform signed division of 16.8 fixed place values
040675             0191*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040675             0192*   sdiv168:
040675             0193*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040675 CD 6C 04 04 0194*       call hlu_abs
040679 F5          0195*       push af
04067A EB          0196*       ex de,hl
04067B CD 6C 04 04 0197*       call hlu_abs
04067F EB          0198*       ex de,hl
040680 F5          0199*       push af
040681             0200*   ; do the division
040681 CD 34 06 04 0201*       call udiv168 ; de = quotient, hl = remainder
040685             0202*   ; adjust sign of result
040685 F1          0203*       pop af ; sign de
040686 FA 93 06 04 0204*       jp m,@de_neg
04068A F1          0205*       pop af ; sign hl
04068B F0          0206*       ret p ; both positive, nothing to do
04068C             0207*   @hl_neg:
04068C EB          0208*       ex de,hl ; hl = quotient, de = remainder
04068D CD 7C 04 04 0209*       call neg_hlu ; de pos, hl neg, result is negative
040691 EB          0210*       ex de,hl ; de = negated quotient, hl = remainder
040692 C9          0211*       ret
040693             0212*   @de_neg:
040693 F1          0213*       pop af
040694 F8          0214*       ret m ; both negative, nothing to do
040695 EB          0215*       ex de,hl ; hl = quotient, de = remainder
040696 CD 7C 04 04 0216*       call neg_hlu ; result is negative
04069A EB          0217*       ex de,hl ; de = negated quotient, hl = remainder
04069B C9          0218*       ret
04069C             0219*   
04069C             0220*   ; convert signed angles from a 360 to 256 degree circle
04069C             0221*   ; inputs: uh.l is the angle360 in 16.8 fixed format
04069C             0222*   ; outputs: uh.l is the angle256 in 16.8 fixed format
04069C             0223*   ; destroys: TODO
04069C             0224*   deg_360_to_256:
04069C D5          0225*       push de ; preserve de
04069D             0226*   ; make angle positive and store sign flag
04069D CD 6C 04 04 0227*       call hlu_abs
0406A1 F5          0228*       push af
0406A2             0229*   ; multiply by coversion factor of 256/360
0406A2 11 B6 00 00 0230*       ld de,0x0000B6 ; 0.711
0406A6 CD 08 06 04 0231*       call umul168 ; uh.l = uh.l * 0.711
0406AA             0232*   ; restore sign flag and adjust output accordingly
0406AA F1          0233*       pop af
0406AB F2 B3 06 04 0234*       jp p,@pos ; positive number
0406AF CD 7C 04 04 0235*       call neg_hlu
0406B3             0236*   @pos:
0406B3             0237*   ; restore de and return uh.l as the result
0406B3 D1          0238*       pop de
0406B4 C9          0239*       ret
0406B5             0240*   
0406B5             0241*   ; convert signed angles from a 256 to 360 degree circle
0406B5             0242*   ; inputs: uh.l is the angle256 in 16.8 fixed format
0406B5             0243*   ; outputs: uh.l is the angle360 in 16.8 fixed format
0406B5             0244*   ; destroys: TODO
0406B5             0245*   deg_256_to_360:
0406B5 D5          0246*       push de ; preserve de
0406B6             0247*   ; make angle positive and store sign flag
0406B6 CD 6C 04 04 0248*       call hlu_abs
0406BA F5          0249*       push af
0406BB             0250*   ; multiply by coversion factor of 360/256
0406BB 11 68 01 00 0251*       ld de,0x000168 ; 1.406
0406BF CD 08 06 04 0252*       call umul168 ; uh.l = uh.l * 1.406
0406C3             0253*   ; restore sign flag and adjust output accordingly
0406C3 F1          0254*       pop af
0406C4 F2 CC 06 04 0255*       jp p,@pos ; positive number
0406C8 CD 7C 04 04 0256*       call neg_hlu
0406CC             0257*   @pos:
0406CC             0258*   ; restore de and return uh.l as the result
0406CC D1          0259*       pop de
0406CD C9          0260*       ret
0406CE             0261*   
0406CE             0262*   ; fixed 16.8 routine
0406CE             0263*   ; cos(uh.l) --> uh.l
0406CE             0264*   ; destroys: f, hl
0406CE             0265*   cos168:
0406CE D5          0266*       push de ; preserve de
0406CF             0267*   ; for cos we simply increment the angle by 90 degrees
0406CF             0268*   ; or 0x004000 in 16.8 degrees256
0406CF             0269*   ; which makes it a sin problem
0406CF 11 00 40 00 0270*       ld de,0x004000
0406D3 19          0271*       add hl,de ; modulo 256 happens below
0406D4 D1          0272*       pop de ; restore de
0406D5             0273*   ; fall through to sin168
0406D5             0274*   
0406D5             0275*   ; ---------------------
0406D5             0276*   ; fixed 16.8 routine
0406D5             0277*   ; sin(uh.l) --> uh.l
0406D5             0278*   ; destroys: f, hl
0406D5             0279*   sin168:
0406D5 D5          0280*       push de
0406D6             0281*   ; handle negative angles appropriately
0406D6 CD 6C 04 04 0282*       call hlu_abs
0406DA F2 E3 06 04 0283*       jp p,@F
0406DE 11 00 00 FF 0284*       ld de,-256*256
0406E2 19          0285*       add hl,de
0406E3             0286*   @@:
0406E3 2E 03       0287*       ld l,3 ; multiply by 3 to get our lookup index
0406E5 ED 6C       0288*       mlt hl
0406E7 11 9B 09 04 0289*       ld de,sin_lut_168 ; grab the lut address
0406EB 19          0290*       add hl,de ; bump hl by the index
0406EC ED 27       0291*       ld hl,(hl) ; don't try this on a z80!
0406EE D1          0292*       pop de
0406EF C9          0293*       ret
0406F0             0294*   
0406F0             0295*   ; 16.8 fixed inputs / outputs
0406F0             0296*   ; takes: uh.l as angle in degrees 256
0406F0             0297*   ;        ud.e as radius
0406F0             0298*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
0406F0             0299*   ;        displacements from origin (0,0)
0406F0             0300*   ; destroys: everything except indexes
0406F0             0301*   polar_to_cartesian:
0406F0             0302*   ; back up input parameters
0406F0 22 1F 07 04 0303*       ld (@angle), hl
0406F4 ED 53 22 07 0304*       ld (@radius), de
       04          
0406F9             0305*   ; compute dx = sin(uh.l) * ud.e
0406F9 CD D5 06 04 0306*       call sin168 ; uh.l = sin(uh.l)
0406FD ED 5B 22 07 0307*       ld de,(@radius)
       04          
040702 CD 11 06 04 0308*       call smul168 ; uh.l = dx
040706 E5          0309*       push hl
040707             0310*   ; compute dy = -cos(uh.l) * ud.e
040707 2A 1F 07 04 0311*       ld hl,(@angle)
04070B CD CE 06 04 0312*       call cos168 ; uh.l = cos(uh.l)
04070F ED 5B 22 07 0313*       ld de,(@radius)
       04          
040714 CD 11 06 04 0314*       call smul168 ; uh.l = dy
040718 CD 7C 04 04 0315*       call neg_hlu ; invert dy for screen coords convention
04071C EB          0316*       ex de,hl ; de = dy for output
04071D C1          0317*       pop bc ; bc = dx for output
04071E             0318*   ; and out
04071E C9          0319*       ret
04071F             0320*   @angle: ds 3
040722             0321*   @radius: ds 3
040725             0322*   
040725             0323*   ; 16.8 fixed inputs / outputs
040725             0324*   ; inputs: ub.c as dx, ud.e as dy
040725             0325*   ;        displacements from origin (0,0)
040725             0326*   ; returns: uh.l as angle in degrees 256
040725             0327*   ;        ud.e as radius
040725             0328*   ; destroys: everything except indexes
040725             0329*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040725 ED 43 7E 07 0330*       ld (dx168),bc ; dx argument for distance168
       04          
04072A ED 53 84 07 0331*       ld (dy168),de ; dy argument for distance168
       04          
04072F             0332*   ; compute radius
04072F CD 8A 07 04 0333*       call distance168 ; uh.l = radius
040733 E5          0334*       push hl ; save radius
040734             0335*   ; compute angle
040734 ED 4B 7E 07 0336*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040739 ED 5B 84 07 0337*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
04073E CD EA 07 04 0338*       call atan2_168fast ; uh.l = angle
040742             0339*   ; return result
040742 D1          0340*       pop de ; de = radius (was hl)
040743 C9          0341*       ret
040744             0342*   ; end cartesian_to_polar
040744             0343*   
040744             0344*   ; 16.8 fixed inputs / outputs
040744             0345*   ; inputs: ub.c as dx, ud.e as dy
040744             0346*   ;        displacements from origin (0,0)
040744             0347*   ; returns: uh.l as angle in degrees 256
040744             0348*   ;        ud.e as radius
040744             0349*   ; destroys: everything except indexes
040744             0350*   ; note: uses distance168sm which is more accurate for small deltas
040744             0351*   cartesian_to_polar_sm:
040744 ED 43 7E 07 0352*       ld (dx168),bc ; dx argument for distance168
       04          
040749 ED 53 84 07 0353*       ld (dy168),de ; dy argument for distance168
       04          
04074E             0354*   ; compute radius
04074E CD C5 07 04 0355*       call distance168sm ; uh.l = radius
040752 E5          0356*       push hl ; save radius
040753             0357*   ; compute angle
040753 ED 4B 7E 07 0358*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040758 ED 5B 84 07 0359*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
04075D CD EA 07 04 0360*       call atan2_168fast ; uh.l = angle
040761             0361*   ; return result
040761 D1          0362*       pop de ; de = radius (was hl)
040762 C9          0363*       ret
040763             0364*   ; end cartesian_to_polar
040763             0365*   
040763             0366*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040763             0367*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040763             0368*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040763             0369*   ;         also populates scratch locations dx168 and dy168
040763             0370*   ; destroys: a,hl,bc,de
040763             0371*   dxy168:
040763             0372*   ; compute dx = x1-x0
040763 AF          0373*       xor a ; clear carry
040764 DD E5       0374*       push ix ; move ix to hl via the stack
040766 E1          0375*       pop hl ; hl = x1
040767 ED 42       0376*       sbc hl,bc ; hl = dx
040769 22 7E 07 04 0377*       ld (dx168),hl ; dx to scratch
04076D             0378*   ; compute dy = y1-y0
04076D AF          0379*       xor a ; clear carry
04076E FD E5       0380*       push iy ; move iy to hl via the stack
040770 E1          0381*       pop hl ; hl = y1
040771 ED 52       0382*       sbc hl,de ; hl = dy
040773 22 84 07 04 0383*       ld (dy168),hl ; dy to scratch
040777             0384*   ; populate output registers and return
040777 EB          0385*       ex de,hl ; ud.e = dy
040778 ED 4B 7E 07 0386*       ld bc,(dx168) ; ub.c = dx
       04          
04077D C9          0387*       ret
04077E 00 00 00 00 0388*   dx168: blkb 6,0
       00 00       
040784 00 00 00 00 0389*   dy168: blkb 6,0
       00 00       
04078A             0390*   
04078A             0391*   ; compute the euclidian distance between two cartesian coordinates
04078A             0392*   ; using the formula d = sqrt(dx^2+dy^2)
04078A             0393*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
04078A             0394*   ; output; uh.l is the 16.8 fixed format distance
04078A             0395*   ;         also populates scratch locations dx168 and dy168
04078A             0396*   ; destroys: a,hl,bc,de
04078A             0397*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
04078A             0398*   ;       thus the result will always be an integer, albeit in 16.8 format
04078A             0399*   distance168:
04078A             0400*   ; compute dy^2
04078A 2A 84 07 04 0401*       ld hl,(dy168)
04078E CD 6C 04 04 0402*       call hlu_abs
040792             0403*       ; call hlu_udiv256 ; make integer to avoid overflow
040792             0404*       SRL_UHL ; make integer to avoid overflow
040792 3B          0001*M1     dec sp ; 1 cycle
040793 E5          0002*M1     push hl ; 4 cycles
040794 33          0003*M1     inc sp ; 1 cycle
040795 E1          0004*M1     pop hl ; 4 cycles
040796 23          0005*M1     inc hl ; 1 cycle
040797 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040799             0007*M1     ; 13 cycles total
040799 E5          0405*       push hl
04079A D1          0406*       pop de
04079B CD 63 03 04 0407*       call umul24 ; hl = dy^2
04079F E5          0408*       push hl ; save dy^2
0407A0             0409*   ; compute dx^2
0407A0 2A 7E 07 04 0410*       ld hl,(dx168)
0407A4 CD 6C 04 04 0411*       call hlu_abs
0407A8             0412*       ; call hlu_udiv256 ; make integer to avoid overflow
0407A8             0413*       SRL_UHL ; make integer to avoid overflow
0407A8 3B          0001*M1     dec sp ; 1 cycle
0407A9 E5          0002*M1     push hl ; 4 cycles
0407AA 33          0003*M1     inc sp ; 1 cycle
0407AB E1          0004*M1     pop hl ; 4 cycles
0407AC 23          0005*M1     inc hl ; 1 cycle
0407AD 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
0407AF             0007*M1     ; 13 cycles total
0407AF E5          0414*       push hl
0407B0 D1          0415*       pop de
0407B1 CD 63 03 04 0416*       call umul24 ; hl = dx^2
0407B5             0417*   ; add dx^2 and dy^2
0407B5 D1          0418*       pop de ; de = dy^2 (was hl)
0407B6 19          0419*       add hl,de ; hl = dx^2 + dy^2
0407B7             0420*   ; compute the square root
0407B7 CD B5 08 04 0421*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
0407BB EB          0422*       ex de,hl ; hl = distance
0407BC             0423*       hlu_mul256 ; convert back to 16.8 fixed
0407BC 29          0001*M1     add hl,hl ; * 2
0407BD 29          0002*M1     add hl,hl ; * 4
0407BE 29          0003*M1     add hl,hl ; * 8
0407BF 29          0004*M1     add hl,hl ; * 16
0407C0 29          0005*M1     add hl,hl ; * 32
0407C1 29          0006*M1     add hl,hl ; * 64
0407C2 29          0007*M1     add hl,hl ; * 128
0407C3 29          0008*M1     add hl,hl ; * 256
0407C4 C9          0424*       ret
0407C5             0425*   
0407C5             0426*   ; compute the euclidian distance between two cartesian coordinates
0407C5             0427*   ; using the formula d = sqrt(dx^2+dy^2)
0407C5             0428*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
0407C5             0429*   ; output; uh.l is the 16.8 fixed format distance
0407C5             0430*   ;         also populates scratch locations dx168 and dy168
0407C5             0431*   ; destroys: a,hl,bc,de
0407C5             0432*   ; NOTE: sm means 'small' because it doesn't round down the deltas
0407C5             0433*   ;       making it more accurate for small deltas,
0407C5             0434*   ;       but will overflow if used for screen-sized deltas
0407C5             0435*   distance168sm:
0407C5             0436*   ; compute dy^2
0407C5 2A 84 07 04 0437*       ld hl,(dy168)
0407C9 CD 6C 04 04 0438*       call hlu_abs
0407CD E5          0439*       push hl
0407CE D1          0440*       pop de
0407CF CD 63 03 04 0441*       call umul24 ; hl = dy^2
0407D3 E5          0442*       push hl ; save dy^2
0407D4             0443*   ; compute dx^2
0407D4 2A 7E 07 04 0444*       ld hl,(dx168)
0407D8 CD 6C 04 04 0445*       call hlu_abs
0407DC E5          0446*       push hl
0407DD D1          0447*       pop de
0407DE CD 63 03 04 0448*       call umul24 ; hl = dx^2
0407E2             0449*   ; add dx^2 and dy^2
0407E2 D1          0450*       pop de ; de = dy^2 (was hl)
0407E3 19          0451*       add hl,de ; hl = dx^2 + dy^2
0407E4             0452*   ; compute the square root
0407E4 CD B5 08 04 0453*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
0407E8 EB          0454*       ex de,hl ; hl = distance
0407E9 C9          0455*       ret
0407EA             0456*   
0407EA             0457*   ; atan2_(ub.c,ud.e) --> uh.l
0407EA             0458*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0407EA             0459*   ;   whether inputs are integers or fractional doesn't matter
0407EA             0460*   ;   so long as the sign bit of the upper byte is correct
0407EA             0461*   ; output: uh.l is the 16.8 fixed angle in degrees 256
0407EA             0462*   ; angles are COMPASS HEADINGS based on
0407EA             0463*   ; screen coordinate conventions,where the y axis is flipped
0407EA             0464*   ; #E0 224      0       32 #20
0407EA             0465*   ;        -x,-y | +x,-y
0407EA             0466*   ; #C0 192------+------ 64 #40
0407EA             0467*   ;        -x,+y | +x,+y
0407EA             0468*   ; #A0 160   128 #80   96 #60
0407EA             0469*   atan2_168fast:
0407EA             0470*   ; get signs and make everything positive
0407EA             0471*   ; get abs(x) and store its original sign
0407EA C5          0472*       push bc
0407EB E1          0473*       pop hl
0407EC CD 6C 04 04 0474*       call hlu_abs ; if x was negative this also sets the sign flag
0407F0 E5          0475*       push hl ; store abs(x)
0407F1 C1          0476*       pop bc ; bc = abs(x)
0407F2 F5          0477*       push af ; store sign of x
0407F3             0478*   ; get abs(y) and store its original sign
0407F3 EB          0479*       ex de,hl ; hl = y
0407F4 CD 6C 04 04 0480*       call hlu_abs ; if y was negative this also sets the sign flag
0407F8 EB          0481*       ex de,hl ; de = abs(y)
0407F9 F5          0482*       push af ; store sign of y
0407FA             0483*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0407FA             0484*   ; this ensures that our lookup value is between 0 and 1 inclusive
0407FA AF          0485*       xor a ; clear the carry flag
0407FB D5          0486*       push de
0407FC E1          0487*       pop hl
0407FD ED 42       0488*       sbc hl,bc
0407FF F5          0489*       push af ; save sign of de - bc
040800 F2 09 08 04 0490*       jp p,@1 ; bc <= de, so we skip ahead
040804             0491*   ; otherwise we swap bc and de
040804 C5          0492*       push bc
040805 E1          0493*       pop hl
040806 EB          0494*       ex de,hl
040807 E5          0495*       push hl
040808 C1          0496*       pop bc
040809             0497*   @1:
040809             0498*   ; now we're ready to snag our preliminary result
040809 C5          0499*       push bc
04080A E1          0500*       pop hl
04080B CD 79 08 04 0501*       call atan_168fast ; uh.l comes back with prelim result
04080F             0502*   ; now we adjust uh.l based on sign of de - bc
04080F F1          0503*       pop af
040810 F2 1C 08 04 0504*       jp p,@2 ; bc <= de,so we skip ahead
040814 EB          0505*       ex de,hl
040815 21 00 40 00 0506*       ld hl,64*256 ; subtract from 64 (90) degrees
040819 AF          0507*       xor a ; clear the carry flag
04081A ED 52       0508*       sbc hl,de
04081C             0509*   @2:
04081C             0510*   ; adjust the result based on quadrant
04081C             0511*   ; #E0 224      0       32 #20
04081C             0512*   ;        -x,-y | +x,-y
04081C             0513*   ; #C0 192------+------ 64 #40
04081C             0514*   ;        -x,+y | +x,+y
04081C             0515*   ; #A0 160   128 #80   96 #60
04081C F1          0516*       pop af ; sign of y
04081D CA 5A 08 04 0517*       jp z,@y_zero
040821 F2 3A 08 04 0518*       jp p,@y_pos
040825             0519*   ; y neg,check x
040825 F1          0520*       pop af ; sign of x
040826 CA 34 08 04 0521*       jp z,@y_neg_x_zero
04082A F2 39 08 04 0522*       jp p,@y_neg_x_pos
04082E             0523*   ; y neg,x neg
04082E             0524*   ; angle is 128 to 256 (270 to 360)
04082E             0525*   ; negating the intermediate does the trick
04082E CD 7C 04 04 0526*       call neg_hlu
040832 18 31       0527*       jr @zero_hlu
040834             0528*   
040834             0529*   @y_neg_x_zero:
040834             0530*   ; y neg,x zero
040834             0531*   ; angle is 0
040834 21 00 00 00 0532*       ld hl,0
040838 C9          0533*       ret
040839             0534*   @y_neg_x_pos:
040839             0535*   ; y neg,x pos
040839             0536*   ; angle is 0 to 64 (0 to 90)
040839             0537*   ; so we're good
040839 C9          0538*       ret
04083A             0539*   
04083A             0540*   @y_pos:
04083A F1          0541*       pop af ; sign of x
04083B CA 4A 08 04 0542*       jp z,@y_pos_x_zero
04083F F2 4F 08 04 0543*       jp p,@y_pos_x_pos
040843             0544*   ; y pos,x neg
040843             0545*   ; angle is 128 to 192 (180-270)
040843             0546*   ; so we add 128 to intermediate
040843 11 00 80 00 0547*       ld de,128*256
040847 19          0548*       add hl,de
040848 18 1B       0549*       jr @zero_hlu
04084A             0550*   @y_pos_x_zero:
04084A             0551*   ; y pos,x zero
04084A             0552*   ; angle is 128 (180)
04084A 21 00 80 00 0553*       ld hl,128*256
04084E C9          0554*       ret
04084F             0555*   @y_pos_x_pos:
04084F             0556*   ; y pos,x pos
04084F             0557*   ; angle is 64 to 128 (90 to 180)
04084F             0558*   ; neg the intermediate and add 180 degrees
04084F CD 7C 04 04 0559*       call neg_hlu
040853 11 00 80 00 0560*       ld de,128*256
040857 19          0561*       add hl,de
040858 18 0B       0562*       jr @zero_hlu
04085A             0563*   
04085A             0564*   @y_zero:
04085A F1          0565*       pop af ; sign of x
04085B FA 60 08 04 0566*       jp m,@y_zero_x_neg
04085F             0567*   ; y zero,x pos
04085F             0568*   ; angle is 64 (90),nothing to do
04085F C9          0569*       ret
040860             0570*   @y_zero_x_neg:
040860             0571*   ; y zero ,x neg
040860             0572*   ; angle is 192 (270)
040860 21 00 C0 00 0573*       ld hl,192*256
040864 C9          0574*       ret
040865             0575*   @zero_hlu:
040865 AF          0576*       xor a
040866 22 73 08 04 0577*       ld (@scratch),hl
04086A 32 75 08 04 0578*       ld (@scratch+2),a
04086E 2A 73 08 04 0579*       ld hl,(@scratch)
040872 C9          0580*       ret
040873             0581*   @scratch: ds 6
040879             0582*   
040879             0583*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040879             0584*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
040879             0585*   ; destroys: a,hl,bc,de
040879             0586*   ; note: only works for angles from 0 to 32 (45) degrees
040879             0587*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040879             0588*   atan_168fast:
040879             0589*   ; because we use compass headings instead of geometric angles
040879             0590*   ; we compute dx/dy which is 1/tan(theta) in the maths world
040879             0591*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
040879 CD 34 06 04 0592*       call udiv168 ; ud.e = dx/dy
04087D EB          0593*       ex de,hl ; uh.l = dx/dy
04087E             0594*   ; test uh.l for 0
04087E 19          0595*       add hl,de
04087F B7          0596*       or a
040880 ED 52       0597*       sbc hl,de
040882 28 22       0598*       jr z,@is_zero
040884             0599*   ; test uh.l for 1
040884 AF          0600*       xor a ; clear carry
040885 EB          0601*       ex de,hl
040886 21 00 01 00 0602*       ld hl,1*256 ; 1 in 16.8 fixed format
04088A ED 52       0603*       sbc hl,de
04088C 28 13       0604*       jr z,@is_45
04088E EB          0605*       ex de,hl
04088F             0606*   ; no special cases so we move on
04088F             0607*   ; l contains the fractional portion of tan(uh.l)
04088F             0608*   ; we multiply it by three to get our lookup table index
04088F 26 03       0609*       ld h,3
040891 ED 6C       0610*       mlt hl ; index into lut
040893 11 00 00 00 0611*       ld de,0 ; clear deu
040897 54          0612*       ld d,h ; copy hl to de
040898 5D          0613*       ld e,l ; de contains our index
040899 21 9E 0C 04 0614*       ld hl,atan_lut_168 ; grab the lut address
04089D 19          0615*       add hl,de ; bump hl by the index
04089E ED 27       0616*       ld hl,(hl) ; don't try this on a z80!
0408A0 C9          0617*       ret ; and out
0408A1             0618*   @is_45:
0408A1 21 00 20 00 0619*       ld hl,32*256
0408A5 C9          0620*       ret
0408A6             0621*   ; for the case tan(0)
0408A6             0622*   @is_zero:
0408A6 21 00 00 00 0623*       ld hl,0*256
0408AA C9          0624*       ret
0408AB             0625*   
0408AB             0626*   ; Expects  ADL mode
0408AB             0627*   ; Inputs:  UH.L
0408AB             0628*   ; Outputs: UH.L is the 16.8 square root
0408AB             0629*   ;          UDE is the integer difference inputHL-DE^2
0408AB             0630*   sqrt168:
0408AB CD B5 08 04 0631*       call sqrt24
0408AF EB          0632*       ex de,hl
0408B0 29          0633*       add hl,hl
0408B1 29          0634*       add hl,hl
0408B2 29          0635*       add hl,hl
0408B3 29          0636*       add hl,hl
0408B4 C9          0637*       ret
0408B5             0638*   
0408B5             0639*   ; credit: xeda112358
0408B5             0640*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
0408B5             0641*   sqrt24:
0408B5             0642*   ; Expects ADL mode
0408B5             0643*   ; Inputs: HL
0408B5             0644*   ; Outputs: DE is the integer square root
0408B5             0645*   ;  HL is the difference inputHL-DE^2
0408B5             0646*   ;  c flag reset
0408B5 01 00 00 00 0647*       ld bc,0 ; clear bcu
0408B9 11 00 00 00 0648*       ld de,0 ; clear deu
0408BD AF          0649*       xor a
0408BE 45          0650*       ld b,l
0408BF C5          0651*       push bc
0408C0 47          0652*       ld b,a
0408C1 6F          0653*       ld l,a
0408C2             0654*   ; Iteration 1
0408C2 29          0655*       add hl,hl
0408C3 CB 11       0656*       rl c
0408C5 29          0657*       add hl,hl
0408C6 CB 11       0658*       rl c
0408C8 91          0659*       sub c
0408C9 30 04       0660*       jr nc,$+6
0408CB 1C          0661*       inc e
0408CC 1C          0662*       inc e
0408CD 2F          0663*       cpl
0408CE 4F          0664*       ld c,a
0408CF             0665*   ; Iteration 2
0408CF 29          0666*       add hl,hl
0408D0 CB 11       0667*       rl c
0408D2 29          0668*       add hl,hl
0408D3 CB 11       0669*       rl c
0408D5 CB 13       0670*       rl e
0408D7 7B          0671*       ld a,e
0408D8 91          0672*       sub c
0408D9 30 04       0673*       jr nc,$+6
0408DB 1C          0674*       inc e
0408DC 1C          0675*       inc e
0408DD 2F          0676*       cpl
0408DE 4F          0677*       ld c,a
0408DF             0678*   ; Iteration 3
0408DF 29          0679*       add hl,hl
0408E0 CB 11       0680*       rl c
0408E2 29          0681*       add hl,hl
0408E3 CB 11       0682*       rl c
0408E5 CB 13       0683*       rl e
0408E7 7B          0684*       ld a,e
0408E8 91          0685*       sub c
0408E9 30 04       0686*       jr nc,$+6
0408EB 1C          0687*       inc e
0408EC 1C          0688*       inc e
0408ED 2F          0689*       cpl
0408EE 4F          0690*       ld c,a
0408EF             0691*   ; Iteration 4
0408EF 29          0692*       add hl,hl
0408F0 CB 11       0693*       rl c
0408F2 29          0694*       add hl,hl
0408F3 CB 11       0695*       rl c
0408F5 CB 13       0696*       rl e
0408F7 7B          0697*       ld a,e
0408F8 91          0698*       sub c
0408F9 30 04       0699*       jr nc,$+6
0408FB 1C          0700*       inc e
0408FC 1C          0701*       inc e
0408FD 2F          0702*       cpl
0408FE 4F          0703*       ld c,a
0408FF             0704*   ; Iteration 5
0408FF 29          0705*       add hl,hl
040900 CB 11       0706*       rl c
040902 29          0707*       add hl,hl
040903 CB 11       0708*       rl c
040905 CB 13       0709*       rl e
040907 7B          0710*       ld a,e
040908 91          0711*       sub c
040909 30 04       0712*       jr nc,$+6
04090B 1C          0713*       inc e
04090C 1C          0714*       inc e
04090D 2F          0715*       cpl
04090E 4F          0716*       ld c,a
04090F             0717*   ; Iteration 6
04090F 29          0718*       add hl,hl
040910 CB 11       0719*       rl c
040912 29          0720*       add hl,hl
040913 CB 11       0721*       rl c
040915 CB 13       0722*       rl e
040917 7B          0723*       ld a,e
040918 91          0724*       sub c
040919 30 04       0725*       jr nc,$+6
04091B 1C          0726*       inc e
04091C 1C          0727*       inc e
04091D 2F          0728*       cpl
04091E 4F          0729*       ld c,a
04091F             0730*   ; Iteration 7
04091F 29          0731*       add hl,hl
040920 CB 11       0732*       rl c
040922 29          0733*       add hl,hl
040923 CB 11       0734*       rl c
040925 CB 10       0735*       rl b
040927 EB          0736*       ex de,hl
040928 29          0737*       add hl,hl
040929 E5          0738*       push hl
04092A ED 42       0739*       sbc hl,bc
04092C 30 06       0740*       jr nc,$+8
04092E 7C          0741*       ld a,h
04092F 2F          0742*       cpl
040930 47          0743*       ld b,a
040931 7D          0744*       ld a,l
040932 2F          0745*       cpl
040933 4F          0746*       ld c,a
040934 E1          0747*       pop hl
040935 30 02       0748*       jr nc,$+4
040937 23          0749*       inc hl
040938 23          0750*       inc hl
040939 EB          0751*       ex de,hl
04093A             0752*   ; Iteration 8
04093A 29          0753*       add hl,hl
04093B 69          0754*       ld l,c
04093C 60          0755*       ld h,b
04093D ED 6A       0756*       adc hl,hl
04093F ED 6A       0757*       adc hl,hl
040941 EB          0758*       ex de,hl
040942 29          0759*       add hl,hl
040943 ED 52       0760*       sbc hl,de
040945 19          0761*       add hl,de
040946 EB          0762*       ex de,hl
040947 30 04       0763*       jr nc,$+6
040949 ED 52       0764*       sbc hl,de
04094B 13          0765*       inc de
04094C 13          0766*       inc de
04094D             0767*   ; Iteration 9
04094D F1          0768*       pop af
04094E 17          0769*       rla
04094F ED 6A       0770*       adc hl,hl
040951 17          0771*       rla
040952 ED 6A       0772*       adc hl,hl
040954 EB          0773*       ex de,hl
040955 29          0774*       add hl,hl
040956 ED 52       0775*       sbc hl,de
040958 19          0776*       add hl,de
040959 EB          0777*       ex de,hl
04095A 30 04       0778*       jr nc,$+6
04095C ED 52       0779*       sbc hl,de
04095E 13          0780*       inc de
04095F 13          0781*       inc de
040960             0782*   ; Iteration 10
040960 17          0783*       rla
040961 ED 6A       0784*       adc hl,hl
040963 17          0785*       rla
040964 ED 6A       0786*       adc hl,hl
040966 EB          0787*       ex de,hl
040967 29          0788*       add hl,hl
040968 ED 52       0789*       sbc hl,de
04096A 19          0790*       add hl,de
04096B EB          0791*       ex de,hl
04096C 30 04       0792*       jr nc,$+6
04096E ED 52       0793*       sbc hl,de
040970 13          0794*       inc de
040971 13          0795*       inc de
040972             0796*   ; Iteration 11
040972 17          0797*       rla
040973 ED 6A       0798*       adc hl,hl
040975 17          0799*       rla
040976 ED 6A       0800*       adc hl,hl
040978 EB          0801*       ex de,hl
040979 29          0802*       add hl,hl
04097A ED 52       0803*       sbc hl,de
04097C 19          0804*       add hl,de
04097D EB          0805*       ex de,hl
04097E 30 04       0806*       jr nc,$+6
040980 ED 52       0807*       sbc hl,de
040982 13          0808*       inc de
040983 13          0809*       inc de
040984             0810*   ; Iteration 12
040984 17          0811*       rla
040985 ED 6A       0812*       adc hl,hl
040987 17          0813*       rla
040988 ED 6A       0814*       adc hl,hl
04098A EB          0815*       ex de,hl
04098B 29          0816*       add hl,hl
04098C ED 52       0817*       sbc hl,de
04098E 19          0818*       add hl,de
04098F EB          0819*       ex de,hl
040990 30 04       0820*       jr nc,$+6
040992 ED 52       0821*       sbc hl,de
040994 13          0822*       inc de
040995 13          0823*       inc de
040996 CB 1A       0824*       rr d
040998 CB 1B       0825*       rr e
04099A C9          0826*       ret
04099B             0827*   
04099B             0828*   sin_lut_168:
04099B 00 00 00    0829*       dl 0x000000 ; 0.000 00, 0.000
04099E 06 00 00    0830*       dl 0x000006 ; 1.406 01, 0.025
0409A1 0C 00 00    0831*       dl 0x00000C ; 2.813 02, 0.049
0409A4 12 00 00    0832*       dl 0x000012 ; 4.219 03, 0.074
0409A7 19 00 00    0833*       dl 0x000019 ; 5.625 04, 0.098
0409AA 1F 00 00    0834*       dl 0x00001F ; 7.031 05, 0.122
0409AD 25 00 00    0835*       dl 0x000025 ; 8.438 06, 0.147
0409B0 2B 00 00    0836*       dl 0x00002B ; 9.844 07, 0.171
0409B3 31 00 00    0837*       dl 0x000031 ; 11.250 08, 0.195
0409B6 38 00 00    0838*       dl 0x000038 ; 12.656 09, 0.219
0409B9 3E 00 00    0839*       dl 0x00003E ; 14.063 0A, 0.243
0409BC 44 00 00    0840*       dl 0x000044 ; 15.469 0B, 0.267
0409BF 4A 00 00    0841*       dl 0x00004A ; 16.875 0C, 0.290
0409C2 50 00 00    0842*       dl 0x000050 ; 18.281 0D, 0.314
0409C5 56 00 00    0843*       dl 0x000056 ; 19.688 0E, 0.337
0409C8 5C 00 00    0844*       dl 0x00005C ; 21.094 0F, 0.360
0409CB 61 00 00    0845*       dl 0x000061 ; 22.500 10, 0.383
0409CE 67 00 00    0846*       dl 0x000067 ; 23.906 11, 0.405
0409D1 6D 00 00    0847*       dl 0x00006D ; 25.313 12, 0.428
0409D4 73 00 00    0848*       dl 0x000073 ; 26.719 13, 0.450
0409D7 78 00 00    0849*       dl 0x000078 ; 28.125 14, 0.471
0409DA 7E 00 00    0850*       dl 0x00007E ; 29.531 15, 0.493
0409DD 83 00 00    0851*       dl 0x000083 ; 30.938 16, 0.514
0409E0 88 00 00    0852*       dl 0x000088 ; 32.344 17, 0.535
0409E3 8E 00 00    0853*       dl 0x00008E ; 33.750 18, 0.556
0409E6 93 00 00    0854*       dl 0x000093 ; 35.156 19, 0.576
0409E9 98 00 00    0855*       dl 0x000098 ; 36.563 1A, 0.596
0409EC 9D 00 00    0856*       dl 0x00009D ; 37.969 1B, 0.615
0409EF A2 00 00    0857*       dl 0x0000A2 ; 39.375 1C, 0.634
0409F2 A7 00 00    0858*       dl 0x0000A7 ; 40.781 1D, 0.653
0409F5 AB 00 00    0859*       dl 0x0000AB ; 42.188 1E, 0.672
0409F8 B0 00 00    0860*       dl 0x0000B0 ; 43.594 1F, 0.690
0409FB B5 00 00    0861*       dl 0x0000B5 ; 45.000 20, 0.707
0409FE B9 00 00    0862*       dl 0x0000B9 ; 46.406 21, 0.724
040A01 BD 00 00    0863*       dl 0x0000BD ; 47.813 22, 0.741
040A04 C1 00 00    0864*       dl 0x0000C1 ; 49.219 23, 0.757
040A07 C5 00 00    0865*       dl 0x0000C5 ; 50.625 24, 0.773
040A0A C9 00 00    0866*       dl 0x0000C9 ; 52.031 25, 0.788
040A0D CD 00 00    0867*       dl 0x0000CD ; 53.438 26, 0.803
040A10 D1 00 00    0868*       dl 0x0000D1 ; 54.844 27, 0.818
040A13 D4 00 00    0869*       dl 0x0000D4 ; 56.250 28, 0.831
040A16 D8 00 00    0870*       dl 0x0000D8 ; 57.656 29, 0.845
040A19 DB 00 00    0871*       dl 0x0000DB ; 59.063 2A, 0.858
040A1C DE 00 00    0872*       dl 0x0000DE ; 60.469 2B, 0.870
040A1F E1 00 00    0873*       dl 0x0000E1 ; 61.875 2C, 0.882
040A22 E4 00 00    0874*       dl 0x0000E4 ; 63.281 2D, 0.893
040A25 E7 00 00    0875*       dl 0x0000E7 ; 64.688 2E, 0.904
040A28 EA 00 00    0876*       dl 0x0000EA ; 66.094 2F, 0.914
040A2B EC 00 00    0877*       dl 0x0000EC ; 67.500 30, 0.924
040A2E EE 00 00    0878*       dl 0x0000EE ; 68.906 31, 0.933
040A31 F1 00 00    0879*       dl 0x0000F1 ; 70.313 32, 0.942
040A34 F3 00 00    0880*       dl 0x0000F3 ; 71.719 33, 0.950
040A37 F4 00 00    0881*       dl 0x0000F4 ; 73.125 34, 0.957
040A3A F6 00 00    0882*       dl 0x0000F6 ; 74.531 35, 0.964
040A3D F8 00 00    0883*       dl 0x0000F8 ; 75.938 36, 0.970
040A40 F9 00 00    0884*       dl 0x0000F9 ; 77.344 37, 0.976
040A43 FB 00 00    0885*       dl 0x0000FB ; 78.750 38, 0.981
040A46 FC 00 00    0886*       dl 0x0000FC ; 80.156 39, 0.985
040A49 FD 00 00    0887*       dl 0x0000FD ; 81.563 3A, 0.989
040A4C FE 00 00    0888*       dl 0x0000FE ; 82.969 3B, 0.992
040A4F FE 00 00    0889*       dl 0x0000FE ; 84.375 3C, 0.995
040A52 FF 00 00    0890*       dl 0x0000FF ; 85.781 3D, 0.997
040A55 FF 00 00    0891*       dl 0x0000FF ; 87.188 3E, 0.999
040A58 FF 00 00    0892*       dl 0x0000FF ; 88.594 3F, 1.000
040A5B 00 01 00    0893*       dl 0x000100 ; 90.000 40, 1.000
040A5E FF 00 00    0894*       dl 0x0000FF ; 91.406 41, 1.000
040A61 FF 00 00    0895*       dl 0x0000FF ; 92.813 42, 0.999
040A64 FF 00 00    0896*       dl 0x0000FF ; 94.219 43, 0.997
040A67 FE 00 00    0897*       dl 0x0000FE ; 95.625 44, 0.995
040A6A FE 00 00    0898*       dl 0x0000FE ; 97.031 45, 0.992
040A6D FD 00 00    0899*       dl 0x0000FD ; 98.438 46, 0.989
040A70 FC 00 00    0900*       dl 0x0000FC ; 99.844 47, 0.985
040A73 FB 00 00    0901*       dl 0x0000FB ; 101.250 48, 0.981
040A76 F9 00 00    0902*       dl 0x0000F9 ; 102.656 49, 0.976
040A79 F8 00 00    0903*       dl 0x0000F8 ; 104.063 4A, 0.970
040A7C F6 00 00    0904*       dl 0x0000F6 ; 105.469 4B, 0.964
040A7F F4 00 00    0905*       dl 0x0000F4 ; 106.875 4C, 0.957
040A82 F3 00 00    0906*       dl 0x0000F3 ; 108.281 4D, 0.950
040A85 F1 00 00    0907*       dl 0x0000F1 ; 109.688 4E, 0.942
040A88 EE 00 00    0908*       dl 0x0000EE ; 111.094 4F, 0.933
040A8B EC 00 00    0909*       dl 0x0000EC ; 112.500 50, 0.924
040A8E EA 00 00    0910*       dl 0x0000EA ; 113.906 51, 0.914
040A91 E7 00 00    0911*       dl 0x0000E7 ; 115.313 52, 0.904
040A94 E4 00 00    0912*       dl 0x0000E4 ; 116.719 53, 0.893
040A97 E1 00 00    0913*       dl 0x0000E1 ; 118.125 54, 0.882
040A9A DE 00 00    0914*       dl 0x0000DE ; 119.531 55, 0.870
040A9D DB 00 00    0915*       dl 0x0000DB ; 120.938 56, 0.858
040AA0 D8 00 00    0916*       dl 0x0000D8 ; 122.344 57, 0.845
040AA3 D4 00 00    0917*       dl 0x0000D4 ; 123.750 58, 0.831
040AA6 D1 00 00    0918*       dl 0x0000D1 ; 125.156 59, 0.818
040AA9 CD 00 00    0919*       dl 0x0000CD ; 126.563 5A, 0.803
040AAC C9 00 00    0920*       dl 0x0000C9 ; 127.969 5B, 0.788
040AAF C5 00 00    0921*       dl 0x0000C5 ; 129.375 5C, 0.773
040AB2 C1 00 00    0922*       dl 0x0000C1 ; 130.781 5D, 0.757
040AB5 BD 00 00    0923*       dl 0x0000BD ; 132.188 5E, 0.741
040AB8 B9 00 00    0924*       dl 0x0000B9 ; 133.594 5F, 0.724
040ABB B5 00 00    0925*       dl 0x0000B5 ; 135.000 60, 0.707
040ABE B0 00 00    0926*       dl 0x0000B0 ; 136.406 61, 0.690
040AC1 AB 00 00    0927*       dl 0x0000AB ; 137.813 62, 0.672
040AC4 A7 00 00    0928*       dl 0x0000A7 ; 139.219 63, 0.653
040AC7 A2 00 00    0929*       dl 0x0000A2 ; 140.625 64, 0.634
040ACA 9D 00 00    0930*       dl 0x00009D ; 142.031 65, 0.615
040ACD 98 00 00    0931*       dl 0x000098 ; 143.438 66, 0.596
040AD0 93 00 00    0932*       dl 0x000093 ; 144.844 67, 0.576
040AD3 8E 00 00    0933*       dl 0x00008E ; 146.250 68, 0.556
040AD6 88 00 00    0934*       dl 0x000088 ; 147.656 69, 0.535
040AD9 83 00 00    0935*       dl 0x000083 ; 149.063 6A, 0.514
040ADC 7E 00 00    0936*       dl 0x00007E ; 150.469 6B, 0.493
040ADF 78 00 00    0937*       dl 0x000078 ; 151.875 6C, 0.471
040AE2 73 00 00    0938*       dl 0x000073 ; 153.281 6D, 0.450
040AE5 6D 00 00    0939*       dl 0x00006D ; 154.688 6E, 0.428
040AE8 67 00 00    0940*       dl 0x000067 ; 156.094 6F, 0.405
040AEB 61 00 00    0941*       dl 0x000061 ; 157.500 70, 0.383
040AEE 5C 00 00    0942*       dl 0x00005C ; 158.906 71, 0.360
040AF1 56 00 00    0943*       dl 0x000056 ; 160.313 72, 0.337
040AF4 50 00 00    0944*       dl 0x000050 ; 161.719 73, 0.314
040AF7 4A 00 00    0945*       dl 0x00004A ; 163.125 74, 0.290
040AFA 44 00 00    0946*       dl 0x000044 ; 164.531 75, 0.267
040AFD 3E 00 00    0947*       dl 0x00003E ; 165.938 76, 0.243
040B00 38 00 00    0948*       dl 0x000038 ; 167.344 77, 0.219
040B03 31 00 00    0949*       dl 0x000031 ; 168.750 78, 0.195
040B06 2B 00 00    0950*       dl 0x00002B ; 170.156 79, 0.171
040B09 25 00 00    0951*       dl 0x000025 ; 171.563 7A, 0.147
040B0C 1F 00 00    0952*       dl 0x00001F ; 172.969 7B, 0.122
040B0F 19 00 00    0953*       dl 0x000019 ; 174.375 7C, 0.098
040B12 12 00 00    0954*       dl 0x000012 ; 175.781 7D, 0.074
040B15 0C 00 00    0955*       dl 0x00000C ; 177.188 7E, 0.049
040B18 06 00 00    0956*       dl 0x000006 ; 178.594 7F, 0.025
040B1B 00 00 00    0957*       dl 0x000000 ; 180.000 80, 0.000
040B1E FA FF FF    0958*       dl 0xFFFFFA ; 181.406 81, -0.025
040B21 F4 FF FF    0959*       dl 0xFFFFF4 ; 182.813 82, -0.049
040B24 EE FF FF    0960*       dl 0xFFFFEE ; 184.219 83, -0.074
040B27 E7 FF FF    0961*       dl 0xFFFFE7 ; 185.625 84, -0.098
040B2A E1 FF FF    0962*       dl 0xFFFFE1 ; 187.031 85, -0.122
040B2D DB FF FF    0963*       dl 0xFFFFDB ; 188.438 86, -0.147
040B30 D5 FF FF    0964*       dl 0xFFFFD5 ; 189.844 87, -0.171
040B33 CF FF FF    0965*       dl 0xFFFFCF ; 191.250 88, -0.195
040B36 C8 FF FF    0966*       dl 0xFFFFC8 ; 192.656 89, -0.219
040B39 C2 FF FF    0967*       dl 0xFFFFC2 ; 194.063 8A, -0.243
040B3C BC FF FF    0968*       dl 0xFFFFBC ; 195.469 8B, -0.267
040B3F B6 FF FF    0969*       dl 0xFFFFB6 ; 196.875 8C, -0.290
040B42 B0 FF FF    0970*       dl 0xFFFFB0 ; 198.281 8D, -0.314
040B45 AA FF FF    0971*       dl 0xFFFFAA ; 199.688 8E, -0.337
040B48 A4 FF FF    0972*       dl 0xFFFFA4 ; 201.094 8F, -0.360
040B4B 9F FF FF    0973*       dl 0xFFFF9F ; 202.500 90, -0.383
040B4E 99 FF FF    0974*       dl 0xFFFF99 ; 203.906 91, -0.405
040B51 93 FF FF    0975*       dl 0xFFFF93 ; 205.313 92, -0.428
040B54 8D FF FF    0976*       dl 0xFFFF8D ; 206.719 93, -0.450
040B57 88 FF FF    0977*       dl 0xFFFF88 ; 208.125 94, -0.471
040B5A 82 FF FF    0978*       dl 0xFFFF82 ; 209.531 95, -0.493
040B5D 7D FF FF    0979*       dl 0xFFFF7D ; 210.938 96, -0.514
040B60 78 FF FF    0980*       dl 0xFFFF78 ; 212.344 97, -0.535
040B63 72 FF FF    0981*       dl 0xFFFF72 ; 213.750 98, -0.556
040B66 6D FF FF    0982*       dl 0xFFFF6D ; 215.156 99, -0.576
040B69 68 FF FF    0983*       dl 0xFFFF68 ; 216.563 9A, -0.596
040B6C 63 FF FF    0984*       dl 0xFFFF63 ; 217.969 9B, -0.615
040B6F 5E FF FF    0985*       dl 0xFFFF5E ; 219.375 9C, -0.634
040B72 59 FF FF    0986*       dl 0xFFFF59 ; 220.781 9D, -0.653
040B75 55 FF FF    0987*       dl 0xFFFF55 ; 222.188 9E, -0.672
040B78 50 FF FF    0988*       dl 0xFFFF50 ; 223.594 9F, -0.690
040B7B 4B FF FF    0989*       dl 0xFFFF4B ; 225.000 A0, -0.707
040B7E 47 FF FF    0990*       dl 0xFFFF47 ; 226.406 A1, -0.724
040B81 43 FF FF    0991*       dl 0xFFFF43 ; 227.813 A2, -0.741
040B84 3F FF FF    0992*       dl 0xFFFF3F ; 229.219 A3, -0.757
040B87 3B FF FF    0993*       dl 0xFFFF3B ; 230.625 A4, -0.773
040B8A 37 FF FF    0994*       dl 0xFFFF37 ; 232.031 A5, -0.788
040B8D 33 FF FF    0995*       dl 0xFFFF33 ; 233.438 A6, -0.803
040B90 2F FF FF    0996*       dl 0xFFFF2F ; 234.844 A7, -0.818
040B93 2C FF FF    0997*       dl 0xFFFF2C ; 236.250 A8, -0.831
040B96 28 FF FF    0998*       dl 0xFFFF28 ; 237.656 A9, -0.845
040B99 25 FF FF    0999*       dl 0xFFFF25 ; 239.063 AA, -0.858
040B9C 22 FF FF    1000*       dl 0xFFFF22 ; 240.469 AB, -0.870
040B9F 1F FF FF    1001*       dl 0xFFFF1F ; 241.875 AC, -0.882
040BA2 1C FF FF    1002*       dl 0xFFFF1C ; 243.281 AD, -0.893
040BA5 19 FF FF    1003*       dl 0xFFFF19 ; 244.688 AE, -0.904
040BA8 16 FF FF    1004*       dl 0xFFFF16 ; 246.094 AF, -0.914
040BAB 14 FF FF    1005*       dl 0xFFFF14 ; 247.500 B0, -0.924
040BAE 12 FF FF    1006*       dl 0xFFFF12 ; 248.906 B1, -0.933
040BB1 0F FF FF    1007*       dl 0xFFFF0F ; 250.313 B2, -0.942
040BB4 0D FF FF    1008*       dl 0xFFFF0D ; 251.719 B3, -0.950
040BB7 0C FF FF    1009*       dl 0xFFFF0C ; 253.125 B4, -0.957
040BBA 0A FF FF    1010*       dl 0xFFFF0A ; 254.531 B5, -0.964
040BBD 08 FF FF    1011*       dl 0xFFFF08 ; 255.938 B6, -0.970
040BC0 07 FF FF    1012*       dl 0xFFFF07 ; 257.344 B7, -0.976
040BC3 05 FF FF    1013*       dl 0xFFFF05 ; 258.750 B8, -0.981
040BC6 04 FF FF    1014*       dl 0xFFFF04 ; 260.156 B9, -0.985
040BC9 03 FF FF    1015*       dl 0xFFFF03 ; 261.563 BA, -0.989
040BCC 02 FF FF    1016*       dl 0xFFFF02 ; 262.969 BB, -0.992
040BCF 02 FF FF    1017*       dl 0xFFFF02 ; 264.375 BC, -0.995
040BD2 01 FF FF    1018*       dl 0xFFFF01 ; 265.781 BD, -0.997
040BD5 01 FF FF    1019*       dl 0xFFFF01 ; 267.188 BE, -0.999
040BD8 01 FF FF    1020*       dl 0xFFFF01 ; 268.594 BF, -1.000
040BDB 00 FF FF    1021*       dl 0xFFFF00 ; 270.000 C0, -1.000
040BDE 01 FF FF    1022*       dl 0xFFFF01 ; 271.406 C1, -1.000
040BE1 01 FF FF    1023*       dl 0xFFFF01 ; 272.813 C2, -0.999
040BE4 01 FF FF    1024*       dl 0xFFFF01 ; 274.219 C3, -0.997
040BE7 02 FF FF    1025*       dl 0xFFFF02 ; 275.625 C4, -0.995
040BEA 02 FF FF    1026*       dl 0xFFFF02 ; 277.031 C5, -0.992
040BED 03 FF FF    1027*       dl 0xFFFF03 ; 278.438 C6, -0.989
040BF0 04 FF FF    1028*       dl 0xFFFF04 ; 279.844 C7, -0.985
040BF3 05 FF FF    1029*       dl 0xFFFF05 ; 281.250 C8, -0.981
040BF6 07 FF FF    1030*       dl 0xFFFF07 ; 282.656 C9, -0.976
040BF9 08 FF FF    1031*       dl 0xFFFF08 ; 284.063 CA, -0.970
040BFC 0A FF FF    1032*       dl 0xFFFF0A ; 285.469 CB, -0.964
040BFF 0C FF FF    1033*       dl 0xFFFF0C ; 286.875 CC, -0.957
040C02 0D FF FF    1034*       dl 0xFFFF0D ; 288.281 CD, -0.950
040C05 0F FF FF    1035*       dl 0xFFFF0F ; 289.688 CE, -0.942
040C08 12 FF FF    1036*       dl 0xFFFF12 ; 291.094 CF, -0.933
040C0B 14 FF FF    1037*       dl 0xFFFF14 ; 292.500 D0, -0.924
040C0E 16 FF FF    1038*       dl 0xFFFF16 ; 293.906 D1, -0.914
040C11 19 FF FF    1039*       dl 0xFFFF19 ; 295.313 D2, -0.904
040C14 1C FF FF    1040*       dl 0xFFFF1C ; 296.719 D3, -0.893
040C17 1F FF FF    1041*       dl 0xFFFF1F ; 298.125 D4, -0.882
040C1A 22 FF FF    1042*       dl 0xFFFF22 ; 299.531 D5, -0.870
040C1D 25 FF FF    1043*       dl 0xFFFF25 ; 300.938 D6, -0.858
040C20 28 FF FF    1044*       dl 0xFFFF28 ; 302.344 D7, -0.845
040C23 2C FF FF    1045*       dl 0xFFFF2C ; 303.750 D8, -0.831
040C26 2F FF FF    1046*       dl 0xFFFF2F ; 305.156 D9, -0.818
040C29 33 FF FF    1047*       dl 0xFFFF33 ; 306.563 DA, -0.803
040C2C 37 FF FF    1048*       dl 0xFFFF37 ; 307.969 DB, -0.788
040C2F 3B FF FF    1049*       dl 0xFFFF3B ; 309.375 DC, -0.773
040C32 3F FF FF    1050*       dl 0xFFFF3F ; 310.781 DD, -0.757
040C35 43 FF FF    1051*       dl 0xFFFF43 ; 312.188 DE, -0.741
040C38 47 FF FF    1052*       dl 0xFFFF47 ; 313.594 DF, -0.724
040C3B 4B FF FF    1053*       dl 0xFFFF4B ; 315.000 E0, -0.707
040C3E 50 FF FF    1054*       dl 0xFFFF50 ; 316.406 E1, -0.690
040C41 55 FF FF    1055*       dl 0xFFFF55 ; 317.813 E2, -0.672
040C44 59 FF FF    1056*       dl 0xFFFF59 ; 319.219 E3, -0.653
040C47 5E FF FF    1057*       dl 0xFFFF5E ; 320.625 E4, -0.634
040C4A 63 FF FF    1058*       dl 0xFFFF63 ; 322.031 E5, -0.615
040C4D 68 FF FF    1059*       dl 0xFFFF68 ; 323.438 E6, -0.596
040C50 6D FF FF    1060*       dl 0xFFFF6D ; 324.844 E7, -0.576
040C53 72 FF FF    1061*       dl 0xFFFF72 ; 326.250 E8, -0.556
040C56 78 FF FF    1062*       dl 0xFFFF78 ; 327.656 E9, -0.535
040C59 7D FF FF    1063*       dl 0xFFFF7D ; 329.063 EA, -0.514
040C5C 82 FF FF    1064*       dl 0xFFFF82 ; 330.469 EB, -0.493
040C5F 88 FF FF    1065*       dl 0xFFFF88 ; 331.875 EC, -0.471
040C62 8D FF FF    1066*       dl 0xFFFF8D ; 333.281 ED, -0.450
040C65 93 FF FF    1067*       dl 0xFFFF93 ; 334.688 EE, -0.428
040C68 99 FF FF    1068*       dl 0xFFFF99 ; 336.094 EF, -0.405
040C6B 9F FF FF    1069*       dl 0xFFFF9F ; 337.500 F0, -0.383
040C6E A4 FF FF    1070*       dl 0xFFFFA4 ; 338.906 F1, -0.360
040C71 AA FF FF    1071*       dl 0xFFFFAA ; 340.313 F2, -0.337
040C74 B0 FF FF    1072*       dl 0xFFFFB0 ; 341.719 F3, -0.314
040C77 B6 FF FF    1073*       dl 0xFFFFB6 ; 343.125 F4, -0.290
040C7A BC FF FF    1074*       dl 0xFFFFBC ; 344.531 F5, -0.267
040C7D C2 FF FF    1075*       dl 0xFFFFC2 ; 345.938 F6, -0.243
040C80 C8 FF FF    1076*       dl 0xFFFFC8 ; 347.344 F7, -0.219
040C83 CF FF FF    1077*       dl 0xFFFFCF ; 348.750 F8, -0.195
040C86 D5 FF FF    1078*       dl 0xFFFFD5 ; 350.156 F9, -0.171
040C89 DB FF FF    1079*       dl 0xFFFFDB ; 351.563 FA, -0.147
040C8C E1 FF FF    1080*       dl 0xFFFFE1 ; 352.969 FB, -0.122
040C8F E7 FF FF    1081*       dl 0xFFFFE7 ; 354.375 FC, -0.098
040C92 EE FF FF    1082*       dl 0xFFFFEE ; 355.781 FD, -0.074
040C95 F4 FF FF    1083*       dl 0xFFFFF4 ; 357.188 FE, -0.049
040C98 FA FF FF    1084*       dl 0xFFFFFA ; 358.594 FF, -0.025
040C9B 00 00 00    1085*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
040C9E             1086*   
040C9E             1087*   atan_lut_168:
040C9E 00 00 00    1088*       dl 0x000000 ; 000000, 0.000
040CA1 28 00 00    1089*       dl 0x000028 ; 000001, 0.224
040CA4 51 00 00    1090*       dl 0x000051 ; 000002, 0.448
040CA7 7A 00 00    1091*       dl 0x00007A ; 000003, 0.671
040CAA A2 00 00    1092*       dl 0x0000A2 ; 000004, 0.895
040CAD CB 00 00    1093*       dl 0x0000CB ; 000005, 1.119
040CB0 F4 00 00    1094*       dl 0x0000F4 ; 000006, 1.343
040CB3 1D 01 00    1095*       dl 0x00011D ; 000007, 1.566
040CB6 45 01 00    1096*       dl 0x000145 ; 000008, 1.790
040CB9 6E 01 00    1097*       dl 0x00016E ; 000009, 2.013
040CBC 97 01 00    1098*       dl 0x000197 ; 00000A, 2.237
040CBF BF 01 00    1099*       dl 0x0001BF ; 00000B, 2.460
040CC2 E8 01 00    1100*       dl 0x0001E8 ; 00000C, 2.684
040CC5 11 02 00    1101*       dl 0x000211 ; 00000D, 2.907
040CC8 39 02 00    1102*       dl 0x000239 ; 00000E, 3.130
040CCB 62 02 00    1103*       dl 0x000262 ; 00000F, 3.353
040CCE 8B 02 00    1104*       dl 0x00028B ; 000010, 3.576
040CD1 B3 02 00    1105*       dl 0x0002B3 ; 000011, 3.799
040CD4 DC 02 00    1106*       dl 0x0002DC ; 000012, 4.022
040CD7 04 03 00    1107*       dl 0x000304 ; 000013, 4.245
040CDA 2D 03 00    1108*       dl 0x00032D ; 000014, 4.467
040CDD 55 03 00    1109*       dl 0x000355 ; 000015, 4.690
040CE0 7E 03 00    1110*       dl 0x00037E ; 000016, 4.912
040CE3 A6 03 00    1111*       dl 0x0003A6 ; 000017, 5.134
040CE6 CE 03 00    1112*       dl 0x0003CE ; 000018, 5.356
040CE9 F7 03 00    1113*       dl 0x0003F7 ; 000019, 5.578
040CEC 1F 04 00    1114*       dl 0x00041F ; 00001A, 5.799
040CEF 48 04 00    1115*       dl 0x000448 ; 00001B, 6.021
040CF2 70 04 00    1116*       dl 0x000470 ; 00001C, 6.242
040CF5 98 04 00    1117*       dl 0x000498 ; 00001D, 6.463
040CF8 C0 04 00    1118*       dl 0x0004C0 ; 00001E, 6.684
040CFB E8 04 00    1119*       dl 0x0004E8 ; 00001F, 6.905
040CFE 11 05 00    1120*       dl 0x000511 ; 000020, 7.125
040D01 39 05 00    1121*       dl 0x000539 ; 000021, 7.345
040D04 61 05 00    1122*       dl 0x000561 ; 000022, 7.565
040D07 89 05 00    1123*       dl 0x000589 ; 000023, 7.785
040D0A B1 05 00    1124*       dl 0x0005B1 ; 000024, 8.005
040D0D D9 05 00    1125*       dl 0x0005D9 ; 000025, 8.224
040D10 01 06 00    1126*       dl 0x000601 ; 000026, 8.443
040D13 28 06 00    1127*       dl 0x000628 ; 000027, 8.662
040D16 50 06 00    1128*       dl 0x000650 ; 000028, 8.881
040D19 78 06 00    1129*       dl 0x000678 ; 000029, 9.099
040D1C A0 06 00    1130*       dl 0x0006A0 ; 00002A, 9.317
040D1F C7 06 00    1131*       dl 0x0006C7 ; 00002B, 9.535
040D22 EF 06 00    1132*       dl 0x0006EF ; 00002C, 9.752
040D25 16 07 00    1133*       dl 0x000716 ; 00002D, 9.970
040D28 3E 07 00    1134*       dl 0x00073E ; 00002E, 10.187
040D2B 65 07 00    1135*       dl 0x000765 ; 00002F, 10.403
040D2E 8D 07 00    1136*       dl 0x00078D ; 000030, 10.620
040D31 B4 07 00    1137*       dl 0x0007B4 ; 000031, 10.836
040D34 DB 07 00    1138*       dl 0x0007DB ; 000032, 11.051
040D37 03 08 00    1139*       dl 0x000803 ; 000033, 11.267
040D3A 2A 08 00    1140*       dl 0x00082A ; 000034, 11.482
040D3D 51 08 00    1141*       dl 0x000851 ; 000035, 11.697
040D40 78 08 00    1142*       dl 0x000878 ; 000036, 11.911
040D43 9F 08 00    1143*       dl 0x00089F ; 000037, 12.125
040D46 C6 08 00    1144*       dl 0x0008C6 ; 000038, 12.339
040D49 ED 08 00    1145*       dl 0x0008ED ; 000039, 12.553
040D4C 13 09 00    1146*       dl 0x000913 ; 00003A, 12.766
040D4F 3A 09 00    1147*       dl 0x00093A ; 00003B, 12.978
040D52 61 09 00    1148*       dl 0x000961 ; 00003C, 13.191
040D55 87 09 00    1149*       dl 0x000987 ; 00003D, 13.403
040D58 AE 09 00    1150*       dl 0x0009AE ; 00003E, 13.614
040D5B D4 09 00    1151*       dl 0x0009D4 ; 00003F, 13.825
040D5E FB 09 00    1152*       dl 0x0009FB ; 000040, 14.036
040D61 21 0A 00    1153*       dl 0x000A21 ; 000041, 14.247
040D64 47 0A 00    1154*       dl 0x000A47 ; 000042, 14.457
040D67 6D 0A 00    1155*       dl 0x000A6D ; 000043, 14.666
040D6A 94 0A 00    1156*       dl 0x000A94 ; 000044, 14.876
040D6D BA 0A 00    1157*       dl 0x000ABA ; 000045, 15.085
040D70 E0 0A 00    1158*       dl 0x000AE0 ; 000046, 15.293
040D73 05 0B 00    1159*       dl 0x000B05 ; 000047, 15.501
040D76 2B 0B 00    1160*       dl 0x000B2B ; 000048, 15.709
040D79 51 0B 00    1161*       dl 0x000B51 ; 000049, 15.916
040D7C 77 0B 00    1162*       dl 0x000B77 ; 00004A, 16.123
040D7F 9C 0B 00    1163*       dl 0x000B9C ; 00004B, 16.329
040D82 C2 0B 00    1164*       dl 0x000BC2 ; 00004C, 16.535
040D85 E7 0B 00    1165*       dl 0x000BE7 ; 00004D, 16.740
040D88 0C 0C 00    1166*       dl 0x000C0C ; 00004E, 16.945
040D8B 32 0C 00    1167*       dl 0x000C32 ; 00004F, 17.150
040D8E 57 0C 00    1168*       dl 0x000C57 ; 000050, 17.354
040D91 7C 0C 00    1169*       dl 0x000C7C ; 000051, 17.558
040D94 A1 0C 00    1170*       dl 0x000CA1 ; 000052, 17.761
040D97 C6 0C 00    1171*       dl 0x000CC6 ; 000053, 17.964
040D9A EB 0C 00    1172*       dl 0x000CEB ; 000054, 18.166
040D9D 0F 0D 00    1173*       dl 0x000D0F ; 000055, 18.368
040DA0 34 0D 00    1174*       dl 0x000D34 ; 000056, 18.569
040DA3 58 0D 00    1175*       dl 0x000D58 ; 000057, 18.770
040DA6 7D 0D 00    1176*       dl 0x000D7D ; 000058, 18.970
040DA9 A1 0D 00    1177*       dl 0x000DA1 ; 000059, 19.170
040DAC C6 0D 00    1178*       dl 0x000DC6 ; 00005A, 19.370
040DAF EA 0D 00    1179*       dl 0x000DEA ; 00005B, 19.569
040DB2 0E 0E 00    1180*       dl 0x000E0E ; 00005C, 19.767
040DB5 32 0E 00    1181*       dl 0x000E32 ; 00005D, 19.965
040DB8 56 0E 00    1182*       dl 0x000E56 ; 00005E, 20.163
040DBB 7A 0E 00    1183*       dl 0x000E7A ; 00005F, 20.360
040DBE 9E 0E 00    1184*       dl 0x000E9E ; 000060, 20.556
040DC1 C1 0E 00    1185*       dl 0x000EC1 ; 000061, 20.752
040DC4 E5 0E 00    1186*       dl 0x000EE5 ; 000062, 20.947
040DC7 08 0F 00    1187*       dl 0x000F08 ; 000063, 21.142
040DCA 2C 0F 00    1188*       dl 0x000F2C ; 000064, 21.337
040DCD 4F 0F 00    1189*       dl 0x000F4F ; 000065, 21.531
040DD0 72 0F 00    1190*       dl 0x000F72 ; 000066, 21.724
040DD3 95 0F 00    1191*       dl 0x000F95 ; 000067, 21.917
040DD6 B8 0F 00    1192*       dl 0x000FB8 ; 000068, 22.109
040DD9 DB 0F 00    1193*       dl 0x000FDB ; 000069, 22.301
040DDC FE 0F 00    1194*       dl 0x000FFE ; 00006A, 22.493
040DDF 21 10 00    1195*       dl 0x001021 ; 00006B, 22.683
040DE2 44 10 00    1196*       dl 0x001044 ; 00006C, 22.874
040DE5 66 10 00    1197*       dl 0x001066 ; 00006D, 23.063
040DE8 89 10 00    1198*       dl 0x001089 ; 00006E, 23.253
040DEB AB 10 00    1199*       dl 0x0010AB ; 00006F, 23.441
040DEE CD 10 00    1200*       dl 0x0010CD ; 000070, 23.629
040DF1 EF 10 00    1201*       dl 0x0010EF ; 000071, 23.817
040DF4 11 11 00    1202*       dl 0x001111 ; 000072, 24.004
040DF7 33 11 00    1203*       dl 0x001133 ; 000073, 24.191
040DFA 55 11 00    1204*       dl 0x001155 ; 000074, 24.376
040DFD 77 11 00    1205*       dl 0x001177 ; 000075, 24.562
040E00 99 11 00    1206*       dl 0x001199 ; 000076, 24.747
040E03 BA 11 00    1207*       dl 0x0011BA ; 000077, 24.931
040E06 DC 11 00    1208*       dl 0x0011DC ; 000078, 25.115
040E09 FD 11 00    1209*       dl 0x0011FD ; 000079, 25.298
040E0C 1E 12 00    1210*       dl 0x00121E ; 00007A, 25.481
040E0F 3F 12 00    1211*       dl 0x00123F ; 00007B, 25.663
040E12 60 12 00    1212*       dl 0x001260 ; 00007C, 25.844
040E15 81 12 00    1213*       dl 0x001281 ; 00007D, 26.025
040E18 A2 12 00    1214*       dl 0x0012A2 ; 00007E, 26.206
040E1B C3 12 00    1215*       dl 0x0012C3 ; 00007F, 26.386
040E1E E4 12 00    1216*       dl 0x0012E4 ; 000080, 26.565
040E21 04 13 00    1217*       dl 0x001304 ; 000081, 26.744
040E24 25 13 00    1218*       dl 0x001325 ; 000082, 26.922
040E27 45 13 00    1219*       dl 0x001345 ; 000083, 27.100
040E2A 65 13 00    1220*       dl 0x001365 ; 000084, 27.277
040E2D 85 13 00    1221*       dl 0x001385 ; 000085, 27.453
040E30 A5 13 00    1222*       dl 0x0013A5 ; 000086, 27.629
040E33 C5 13 00    1223*       dl 0x0013C5 ; 000087, 27.805
040E36 E5 13 00    1224*       dl 0x0013E5 ; 000088, 27.979
040E39 05 14 00    1225*       dl 0x001405 ; 000089, 28.154
040E3C 24 14 00    1226*       dl 0x001424 ; 00008A, 28.327
040E3F 44 14 00    1227*       dl 0x001444 ; 00008B, 28.501
040E42 63 14 00    1228*       dl 0x001463 ; 00008C, 28.673
040E45 83 14 00    1229*       dl 0x001483 ; 00008D, 28.845
040E48 A2 14 00    1230*       dl 0x0014A2 ; 00008E, 29.017
040E4B C1 14 00    1231*       dl 0x0014C1 ; 00008F, 29.187
040E4E E0 14 00    1232*       dl 0x0014E0 ; 000090, 29.358
040E51 FF 14 00    1233*       dl 0x0014FF ; 000091, 29.527
040E54 1E 15 00    1234*       dl 0x00151E ; 000092, 29.697
040E57 3C 15 00    1235*       dl 0x00153C ; 000093, 29.865
040E5A 5B 15 00    1236*       dl 0x00155B ; 000094, 30.033
040E5D 79 15 00    1237*       dl 0x001579 ; 000095, 30.201
040E60 98 15 00    1238*       dl 0x001598 ; 000096, 30.368
040E63 B6 15 00    1239*       dl 0x0015B6 ; 000097, 30.534
040E66 D4 15 00    1240*       dl 0x0015D4 ; 000098, 30.700
040E69 F2 15 00    1241*       dl 0x0015F2 ; 000099, 30.865
040E6C 10 16 00    1242*       dl 0x001610 ; 00009A, 31.030
040E6F 2E 16 00    1243*       dl 0x00162E ; 00009B, 31.194
040E72 4C 16 00    1244*       dl 0x00164C ; 00009C, 31.357
040E75 6A 16 00    1245*       dl 0x00166A ; 00009D, 31.520
040E78 87 16 00    1246*       dl 0x001687 ; 00009E, 31.682
040E7B A5 16 00    1247*       dl 0x0016A5 ; 00009F, 31.844
040E7E C2 16 00    1248*       dl 0x0016C2 ; 0000A0, 32.005
040E81 DF 16 00    1249*       dl 0x0016DF ; 0000A1, 32.166
040E84 FC 16 00    1250*       dl 0x0016FC ; 0000A2, 32.326
040E87 19 17 00    1251*       dl 0x001719 ; 0000A3, 32.486
040E8A 36 17 00    1252*       dl 0x001736 ; 0000A4, 32.645
040E8D 53 17 00    1253*       dl 0x001753 ; 0000A5, 32.803
040E90 70 17 00    1254*       dl 0x001770 ; 0000A6, 32.961
040E93 8C 17 00    1255*       dl 0x00178C ; 0000A7, 33.118
040E96 A9 17 00    1256*       dl 0x0017A9 ; 0000A8, 33.275
040E99 C5 17 00    1257*       dl 0x0017C5 ; 0000A9, 33.431
040E9C E2 17 00    1258*       dl 0x0017E2 ; 0000AA, 33.587
040E9F FE 17 00    1259*       dl 0x0017FE ; 0000AB, 33.742
040EA2 1A 18 00    1260*       dl 0x00181A ; 0000AC, 33.896
040EA5 36 18 00    1261*       dl 0x001836 ; 0000AD, 34.050
040EA8 52 18 00    1262*       dl 0x001852 ; 0000AE, 34.203
040EAB 6E 18 00    1263*       dl 0x00186E ; 0000AF, 34.356
040EAE 8A 18 00    1264*       dl 0x00188A ; 0000B0, 34.509
040EB1 A5 18 00    1265*       dl 0x0018A5 ; 0000B1, 34.660
040EB4 C1 18 00    1266*       dl 0x0018C1 ; 0000B2, 34.811
040EB7 DC 18 00    1267*       dl 0x0018DC ; 0000B3, 34.962
040EBA F7 18 00    1268*       dl 0x0018F7 ; 0000B4, 35.112
040EBD 13 19 00    1269*       dl 0x001913 ; 0000B5, 35.262
040EC0 2E 19 00    1270*       dl 0x00192E ; 0000B6, 35.410
040EC3 49 19 00    1271*       dl 0x001949 ; 0000B7, 35.559
040EC6 64 19 00    1272*       dl 0x001964 ; 0000B8, 35.707
040EC9 7F 19 00    1273*       dl 0x00197F ; 0000B9, 35.854
040ECC 99 19 00    1274*       dl 0x001999 ; 0000BA, 36.001
040ECF B4 19 00    1275*       dl 0x0019B4 ; 0000BB, 36.147
040ED2 CE 19 00    1276*       dl 0x0019CE ; 0000BC, 36.293
040ED5 E9 19 00    1277*       dl 0x0019E9 ; 0000BD, 36.438
040ED8 03 1A 00    1278*       dl 0x001A03 ; 0000BE, 36.582
040EDB 1D 1A 00    1279*       dl 0x001A1D ; 0000BF, 36.726
040EDE 37 1A 00    1280*       dl 0x001A37 ; 0000C0, 36.870
040EE1 51 1A 00    1281*       dl 0x001A51 ; 0000C1, 37.013
040EE4 6B 1A 00    1282*       dl 0x001A6B ; 0000C2, 37.155
040EE7 85 1A 00    1283*       dl 0x001A85 ; 0000C3, 37.297
040EEA 9F 1A 00    1284*       dl 0x001A9F ; 0000C4, 37.439
040EED B9 1A 00    1285*       dl 0x001AB9 ; 0000C5, 37.579
040EF0 D2 1A 00    1286*       dl 0x001AD2 ; 0000C6, 37.720
040EF3 EC 1A 00    1287*       dl 0x001AEC ; 0000C7, 37.859
040EF6 05 1B 00    1288*       dl 0x001B05 ; 0000C8, 37.999
040EF9 1E 1B 00    1289*       dl 0x001B1E ; 0000C9, 38.137
040EFC 37 1B 00    1290*       dl 0x001B37 ; 0000CA, 38.276
040EFF 50 1B 00    1291*       dl 0x001B50 ; 0000CB, 38.413
040F02 69 1B 00    1292*       dl 0x001B69 ; 0000CC, 38.550
040F05 82 1B 00    1293*       dl 0x001B82 ; 0000CD, 38.687
040F08 9B 1B 00    1294*       dl 0x001B9B ; 0000CE, 38.823
040F0B B4 1B 00    1295*       dl 0x001BB4 ; 0000CF, 38.959
040F0E CC 1B 00    1296*       dl 0x001BCC ; 0000D0, 39.094
040F11 E5 1B 00    1297*       dl 0x001BE5 ; 0000D1, 39.228
040F14 FD 1B 00    1298*       dl 0x001BFD ; 0000D2, 39.362
040F17 16 1C 00    1299*       dl 0x001C16 ; 0000D3, 39.496
040F1A 2E 1C 00    1300*       dl 0x001C2E ; 0000D4, 39.629
040F1D 46 1C 00    1301*       dl 0x001C46 ; 0000D5, 39.762
040F20 5E 1C 00    1302*       dl 0x001C5E ; 0000D6, 39.894
040F23 76 1C 00    1303*       dl 0x001C76 ; 0000D7, 40.025
040F26 8E 1C 00    1304*       dl 0x001C8E ; 0000D8, 40.156
040F29 A5 1C 00    1305*       dl 0x001CA5 ; 0000D9, 40.286
040F2C BD 1C 00    1306*       dl 0x001CBD ; 0000DA, 40.416
040F2F D5 1C 00    1307*       dl 0x001CD5 ; 0000DB, 40.546
040F32 EC 1C 00    1308*       dl 0x001CEC ; 0000DC, 40.675
040F35 04 1D 00    1309*       dl 0x001D04 ; 0000DD, 40.803
040F38 1B 1D 00    1310*       dl 0x001D1B ; 0000DE, 40.931
040F3B 32 1D 00    1311*       dl 0x001D32 ; 0000DF, 41.059
040F3E 49 1D 00    1312*       dl 0x001D49 ; 0000E0, 41.186
040F41 60 1D 00    1313*       dl 0x001D60 ; 0000E1, 41.312
040F44 77 1D 00    1314*       dl 0x001D77 ; 0000E2, 41.438
040F47 8E 1D 00    1315*       dl 0x001D8E ; 0000E3, 41.564
040F4A A5 1D 00    1316*       dl 0x001DA5 ; 0000E4, 41.689
040F4D BB 1D 00    1317*       dl 0x001DBB ; 0000E5, 41.814
040F50 D2 1D 00    1318*       dl 0x001DD2 ; 0000E6, 41.938
040F53 E9 1D 00    1319*       dl 0x001DE9 ; 0000E7, 42.061
040F56 FF 1D 00    1320*       dl 0x001DFF ; 0000E8, 42.184
040F59 15 1E 00    1321*       dl 0x001E15 ; 0000E9, 42.307
040F5C 2C 1E 00    1322*       dl 0x001E2C ; 0000EA, 42.429
040F5F 42 1E 00    1323*       dl 0x001E42 ; 0000EB, 42.551
040F62 58 1E 00    1324*       dl 0x001E58 ; 0000EC, 42.672
040F65 6E 1E 00    1325*       dl 0x001E6E ; 0000ED, 42.793
040F68 84 1E 00    1326*       dl 0x001E84 ; 0000EE, 42.913
040F6B 99 1E 00    1327*       dl 0x001E99 ; 0000EF, 43.033
040F6E AF 1E 00    1328*       dl 0x001EAF ; 0000F0, 43.152
040F71 C5 1E 00    1329*       dl 0x001EC5 ; 0000F1, 43.271
040F74 DA 1E 00    1330*       dl 0x001EDA ; 0000F2, 43.390
040F77 F0 1E 00    1331*       dl 0x001EF0 ; 0000F3, 43.508
040F7A 05 1F 00    1332*       dl 0x001F05 ; 0000F4, 43.625
040F7D 1B 1F 00    1333*       dl 0x001F1B ; 0000F5, 43.742
040F80 30 1F 00    1334*       dl 0x001F30 ; 0000F6, 43.859
040F83 45 1F 00    1335*       dl 0x001F45 ; 0000F7, 43.975
040F86 5A 1F 00    1336*       dl 0x001F5A ; 0000F8, 44.091
040F89 6F 1F 00    1337*       dl 0x001F6F ; 0000F9, 44.206
040F8C 84 1F 00    1338*       dl 0x001F84 ; 0000FA, 44.321
040F8F 99 1F 00    1339*       dl 0x001F99 ; 0000FB, 44.435
040F92 AD 1F 00    1340*       dl 0x001FAD ; 0000FC, 44.549
040F95 C2 1F 00    1341*       dl 0x001FC2 ; 0000FD, 44.662
040F98 D7 1F 00    1342*       dl 0x001FD7 ; 0000FE, 44.775
040F9B EB 1F 00    1343*       dl 0x001FEB ; 0000FF, 44.888
040F9E 00 20 00    1344*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
040FA1             0036        include "fonts.inc"
040FA1             0001*   fonts_load:
040FA1 DD 21 F1 21 0002*       ld ix,font_list ; pointer to font list lookup
       04          
040FA6 06 0D       0003*       ld b,num_fonts ; loop counter
040FA8             0004*   
040FA8             0005*   @load_loop:
040FA8 C5          0006*       push bc ; save loop counter
040FA9             0007*   
040FA9             0008*   ; load font into a buffer
040FA9 DD 27 06    0009*       ld hl,(ix+font_list_bufferId)
040FAC DD 31 09    0010*       ld iy,(ix+font_list_filename)
040FAF CD D5 14 04 0011*       call vdu_load_buffer_from_file
040FB3             0012*   
040FB3             0013*   ; create font from buffer
040FB3 DD 27 06    0014*       ld hl,(ix+font_list_bufferId)
040FB6 DD 5E 00    0015*       ld e,(ix+font_list_width)
040FB9 DD 56 03    0016*       ld d,(ix+font_list_height)
040FBC 3E 00       0017*       ld a,0 ; flags
040FBE CD 58 16 04 0018*       call vdu_font_create
040FC2             0019*   
040FC2             0020*   ; select font
040FC2 DD 27 06    0021*       ld hl,(ix+font_list_bufferId)
040FC5 3E 01       0022*       ld a,1 ; flags
040FC7 CD 3E 16 04 0023*       call vdu_font_select
040FCB             0024*   
040FCB             0025*   ; ; debug print filename
040FCB             0026*   ;     call printNewLine
040FCB             0027*   ;     ld hl,(ix+font_list_filename)
040FCB             0028*   ;     call printString
040FCB             0029*   
040FCB             0030*   ; advance font_list pointer to next record
040FCB ED 32 0C    0031*       lea ix,ix+font_list_record_size
040FCE             0032*   
040FCE             0033*   ; restore loop counter
040FCE C1          0034*       pop bc
040FCF 10 D7       0035*       djnz @load_loop
040FD1             0036*   
040FD1             0037*   ; all done
040FD1 C9          0038*       ret
040FD2             0037        include "images.inc"
040FD2             0001*   image_type: equ 0
040FD2             0002*   image_width: equ image_type+3
040FD2             0003*   image_height: equ image_width+3
040FD2             0004*   image_filesize: equ image_height+3
040FD2             0005*   image_filename: equ image_filesize+3
040FD2             0006*   image_bufferId: equ image_filename+3
040FD2             0007*   image_record_size: equ image_bufferId+3
040FD2             0008*   
040FD2 00 00 00    0009*   cur_image_list: dl 0
040FD5 00 00 00    0010*   cur_filename: dl 0
040FD8 00 00 00    0011*   cur_buffer_id: dl 0
040FDB             0012*   
040FDB             0013*   img_load_init:
040FDB             0014*   ; initialize logo's position parameters
040FDB 21 00 00 00 0015*       ld hl,0
040FDF 22 90 10 04 0016*       ld (logo_xvel),hl
040FE3 22 93 10 04 0017*       ld (logo_xpos),hl
040FE7             0018*   ; begin 16.8 maths to determine logo's y position and velocity
040FE7 21 00 E0 00 0019*       ld hl,224*256
040FEB 22 99 10 04 0020*       ld (logo_ypos),hl
040FEF EB          0021*       ex de,hl
040FF0 21 00 28 FF 0022*       ld hl,-240+24*256
040FF4             0023*       ; ld de,-256*[sprites_num_images+tiles_dg_num_images+ui_num_images]
040FF4 11 00 85 01 0024*       ld de,[sprites_num_images+tiles_dg_num_images+ui_num_images]*256
040FF8 CD 75 06 04 0025*       call sdiv168 ; ud.e = distance / num images = y velocity
040FFC ED 53 96 10 0026*       ld (logo_yvel),de
       04          
041001             0027*   ; all done
041001 C9          0028*       ret
041002             0029*   
041002             0030*   ; inputs: bc is the number of images to load, cur_image_list set
041002             0031*   img_load_main:
041002             0032*   ; back up loop counter
041002 C5          0033*       push bc
041003             0034*   
041003             0035*   ; load the next image
041003 CD 3A 10 04 0036*       call load_next_image
041007             0037*   
041007             0038*   ; plot the background
041007 CD A0 12 04 0039*       call vdu_cls
04100B 21 2C 00 00 0040*       ld hl,BUF_SPLASH_BG
04100F CD 95 13 04 0041*       call vdu_buff_select
041013 01 00 00 00 0042*       ld bc,0
041017 11 00 00 00 0043*       ld de,0
04101B CD F1 16 04 0044*       call vdu_plot_bmp
04101F             0045*   
04101F             0046*   ; ; draw the most recently loaded image
04101F             0047*   ; 	ld hl,(cur_buffer_id)
04101F             0048*   ; 	call vdu_buff_select
04101F             0049*   ; 	ld bc,0
04101F             0050*   ; 	ld de,0
04101F             0051*   ; 	call vdu_plot_bmp
04101F             0052*   
04101F             0053*   ; move logo
04101F CD 6B 10 04 0054*       call move_logo
041023             0055*   
041023             0056*   ; print current filename
041023 2A D5 0F 04 0057*       ld hl,(cur_filename)
041027 CD 63 00 04 0058*       call printString
04102B             0059*   
04102B             0060*   ; flip the framebuffer
04102B             0061*       ; call vdu_flip
04102B             0062*   
04102B             0063*   ; decrement loop counter
04102B C1          0064*       pop bc
04102C 0B          0065*       dec bc
04102D 79          0066*       ld a,c
04102E B7          0067*       or a
04102F C2 02 10 04 0068*       jp nz,img_load_main
041033 78          0069*       ld a,b
041034 B7          0070*       or a
041035 C2 02 10 04 0071*       jp nz,img_load_main
041039 C9          0072*       ret
04103A             0073*   
04103A             0074*   load_next_image:
04103A FD 2A D2 0F 0075*       ld iy,(cur_image_list)
       04          
04103F FD E5       0076*       push iy
041041 FD 7E 00    0077*       ld a,(iy+image_type) ; get image type
041044 FD 07 03    0078*       ld bc,(iy+image_width) ; get image width
041047 FD 17 06    0079*       ld de,(iy+image_height) ; get image height
04104A FD 31 09    0080*       ld ix,(iy+image_filesize) ; get image file size
04104D FD 27 0F    0081*       ld hl,(iy+image_bufferId) ; get image bufferId
041050 22 D8 0F 04 0082*       ld (cur_buffer_id),hl
041054 FD 37 0C    0083*       ld iy,(iy+image_filename) ; get image filename
041057 FD 22 D5 0F 0084*       ld (cur_filename),iy
       04          
04105C CD B3 14 04 0085*       call vdu_load_img
041060 FD E1       0086*       pop iy
041062 ED 33 12    0087*       lea iy,iy+image_record_size
041065 FD 22 D2 0F 0088*       ld (cur_image_list),iy
       04          
04106A C9          0089*       ret
04106B             0090*   
04106B             0091*   move_logo:
04106B             0092*   ; activate logo bitmap
04106B 21 2D 00 00 0093*       ld hl, BUF_SPLASH_LOGO
04106F CD 95 13 04 0094*       call vdu_buff_select
041073             0095*   ; update position based on velocity parameters
041073 2A 99 10 04 0096*       ld hl,(logo_ypos)
041077 ED 5B 96 10 0097*       ld de,(logo_yvel)
       04          
04107C 19          0098*       add hl,de
04107D 22 99 10 04 0099*       ld (logo_ypos),hl
041081             0100*   ; draw logo
041081 ED 4B 93 10 0101*       ld bc,(logo_xpos)
       04          
041086 ED 5B 99 10 0102*       ld de,(logo_ypos)
       04          
04108B CD 0D 17 04 0103*       call vdu_plot_bmp168
04108F C9          0104*       ret
041090             0105*   
041090 00 00 00    0106*   logo_xvel: dl 0
041093 00 00 00    0107*   logo_xpos: dl 0
041096             0108*   
041096 00 00 00    0109*   logo_yvel: dl 0
041099 00 00 00    0110*   logo_ypos: dl 0
04109C             0111*   
04109C             0112*   load_ui_images:
04109C             0113*   ; initialize image loading variables
04109C 21 72 5C 04 0114*       ld hl,ui_image_list
0410A0 22 D2 0F 04 0115*       ld (cur_image_list),hl
0410A4             0116*   ; load images
0410A4 06 2E       0117*       ld b,ui_num_images
0410A6             0118*   @loop:
0410A6 C5          0119*       push bc
0410A7 CD 3A 10 04 0120*       call load_next_image
0410AB C1          0121*       pop bc
0410AC 10 F8       0122*       djnz @loop
0410AE C9          0123*       ret
0410AF             0124*   ; end load_ui_images
0410AF             0125*   
0410AF             0126*   load_sprite_images:
0410AF             0127*   ; initialize image loading variables
0410AF 21 53 41 04 0128*       ld hl,sprites_image_list
0410B3 22 D2 0F 04 0129*       ld (cur_image_list),hl
0410B7 01 9C 00 00 0130*       ld bc,sprites_num_images
0410BB             0131*   ; load images
0410BB CD 02 10 04 0132*       call img_load_main
0410BF C9          0133*       ret
0410C0             0134*   ; end load_sprite_images
0410C0             0135*   
0410C0             0136*   load_tilesets:
0410C0             0137*   ; initialize image loading variables
0410C0 21 D6 24 04 0138*       ld hl,tiles_dg_image_list
0410C4 22 D2 0F 04 0139*       ld (cur_image_list),hl
0410C8 01 BB 00 00 0140*       ld bc,tiles_dg_num_images
0410CC             0141*   ; load images
0410CC CD 02 10 04 0142*       call img_load_main
0410D0 C9          0143*       ret
0410D1             0144*   ; end load_tilesets
0410D1             0145*   
0410D1             0146*   load_backgrounds:
0410D1             0147*   ; initialize image loading variables
0410D1 21 3E 24 04 0148*       ld hl,bg_image_list
0410D5 22 D2 0F 04 0149*       ld (cur_image_list),hl
0410D9 01 04 00 00 0150*       ld bc,bg_num_images
0410DD             0151*   ; load images
0410DD CD 02 10 04 0152*       call img_load_main
0410E1 C9          0153*       ret
0410E2             0154*   ; end load_backgrounds
0410E2             0155*   
0410E2             0156*   ; ; initialize image loading variables
0410E2             0157*   ;     ld hl,tiles_xevious_image_list
0410E2             0158*   ;     ld (cur_image_list),hl
0410E2             0159*   ;     ld bc,tiles_xevious_num_images
0410E2             0160*   ; ; load images
0410E2             0161*   ;     call img_load_main
0410E2 C9          0162*       ret
0410E3             0038        include "timer.inc"
0410E3             0001*   ; Table 32. Timer Control Registers
0410E3             0002*   ; this constant is the base address of the timer control registers
0410E3             0003*   ; each timer takes three bytes:
0410E3             0004*   ;   0: control register
0410E3             0005*   ;   1: low byte of timer reset value
0410E3             0006*   ;   2: high byte of timer reset value
0410E3             0007*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0410E3             0008*   ; which correctly force the high and upper bytes of the address bus to zero
0410E3             0009*   TMR_CTL:     equ 80h
0410E3             0010*   
0410E3             0011*   ; Timer Control Register Bit Definitions
0410E3             0012*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0410E3             0013*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
0410E3             0014*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0410E3             0015*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
0410E3             0016*                               ; the TMRx_CTL register is read.
0410E3             0017*   
0410E3             0018*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0410E3             0019*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0410E3             0020*   
0410E3             0021*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0410E3             0022*                               ;  0,and counting stops when the end-of-count value is reached.
0410E3             0023*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0410E3             0024*                               ; written to the counter when the end-of-count value is reached.
0410E3             0025*   
0410E3             0026*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0410E3             0027*   CLK_DIV_256:  equ %00001100 ;
0410E3             0028*   CLK_DIV_64:   equ %00001000 ;
0410E3             0029*   CLK_DIV_16:   equ %00000100 ;
0410E3             0030*   CLK_DIV_4:    equ %00000000 ;
0410E3             0031*   
0410E3             0032*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0410E3             0033*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0410E3             0034*                               ; When a 1 is written to this bit,the values in the reload registers
0410E3             0035*                               ;  are loaded into the downcounter when the timer restarts. The
0410E3             0036*                               ; programmer must ensure that this bit is set to 1 each time
0410E3             0037*                               ; SINGLE-PASS mode is used.
0410E3             0038*   
0410E3             0039*   ; disable/enable the programmable reload timer
0410E3             0040*   PRT_EN_0:     equ %00000000 ;
0410E3             0041*   PRT_EN_1:     equ %00000001 ;
0410E3             0042*   
0410E3             0043*   ; Table 37. Timer Input Source Select Register
0410E3             0044*   ; Each of the 4 timers are allocated two bits of the 8-bit register
0410E3             0045*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0410E3             0046*   ;   00: System clock / CLK_DIV
0410E3             0047*   ;   01: RTC / CLK_DIV
0410E3             0048*   ;   NOTE: these are the values given in the manual,but it may be a typo
0410E3             0049*   ;   10: GPIO port B pin 1.
0410E3             0050*   ;   11: GPIO port B pin 1.
0410E3             0051*   TMR_ISS:   equ 92h ; register address
0410E3             0052*   
0410E3             0053*   ; Table 51. Real-Time Clock Control Register
0410E3             0054*   RTC_CTRL: equ EDh ; register address
0410E3             0055*   
0410E3             0056*   ; alarm interrupt disable/enable
0410E3             0057*   RTC_ALARM_0:    equ %00000000
0410E3             0058*   RTC_ALARM_1:    equ %10000000
0410E3             0059*   
0410E3             0060*   ; interrupt on alarm disable/enable
0410E3             0061*   RTC_INT_ENT_0:  equ %00000000
0410E3             0062*   RTC_INT_ENT_1:  equ %01000000
0410E3             0063*   
0410E3             0064*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0410E3             0065*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0410E3             0066*   
0410E3             0067*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0410E3             0068*                                   ; On-chip 32768 Hz oscillator is enabled.
0410E3             0069*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0410E3             0070*                                   ; On-chip 32768 Hz oscillator is disabled.
0410E3             0071*   
0410E3             0072*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0410E3             0073*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0410E3             0074*   
0410E3             0075*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0410E3             0076*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0410E3             0077*   
0410E3             0078*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0410E3             0079*                                   ; RTC counter is enabled.
0410E3             0080*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0410E3             0081*                                   ; RTC counter is disabled.
0410E3             0082*   
0410E3             0083*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0410E3             0084*   
0410E3             0085*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0410E3             0086*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0410E3 00 00 00    0087*   prt_reload: dl 0x000000
0410E6             0088*   
0410E6             0089*   ; set PRT timer
0410E6             0090*   prt_set:
0410E6 21 00 00 00 0091*       ld hl,0
0410EA 22 34 11 04 0092*       ld (prt_irq_counter),hl
0410EE 2A E3 10 04 0093*       ld hl,(prt_reload)
0410F2 ED 29 84    0094*       out0 ($84),l
0410F5 ED 21 85    0095*   	out0 ($85),h
0410F8             0096*   ; disable timer
0410F8 3E 06       0097*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0410FA ED 39 83    0098*   	out0 ($83),a
0410FD             0099*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0410FD 3E 57       0100*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0410FF ED 39 83    0101*   	out0 ($83),a
041102 C9          0102*       ret
041103             0103*   
041103             0104*   ; ===============================================
041103             0105*   ; PRT Timer Interrupt Handling
041103             0106*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
041103             0107*   ; -----------------------------------------------
041103             0108*   prt_irq_init:
041103             0109*       ; set up interrupt vector table 2
041103 21 00 00 00 0110*   	ld hl,0
041107 3A 0C 01 00 0111*   	ld a,($10c)
04110B 6F          0112*   	ld l,a
04110C 3A 0D 01 00 0113*   	ld a,($10d)
041110 67          0114*   	ld h,a
041111             0115*   
041111             0116*   	; skip over CALL ($c3)
041111 23          0117*   	inc hl
041112             0118*   	; load address of jump into vector table 2 (in ram)
041112 ED 27       0119*   	ld hl,(hl)
041114             0120*   
041114             0121*   	; write CALL prt_irq_handler to vector table 2
041114 3E C3       0122*   	ld a,$c3
041116 77          0123*   	ld (hl),a
041117 23          0124*   	inc hl
041118 11 1F 11 04 0125*   	ld de,prt_irq_handler
04111C ED 1F       0126*   	ld (hl),de
04111E             0127*   
04111E C9          0128*       ret
04111F             0129*   
04111F             0130*   prt_irq_handler:
04111F F3          0131*   	di
041120 F5          0132*   	push af
041121 E5          0133*       push hl
041122 ED 38 83    0134*   	in0 a,($83)
041125 2A 34 11 04 0135*   	ld hl,(prt_irq_counter)
041129 23          0136*   	inc hl
04112A 22 34 11 04 0137*   	ld (prt_irq_counter),hl
04112E E1          0138*       pop hl
04112F F1          0139*   	pop af
041130 FB          0140*   	ei
041131 5B ED 4D    0141*   	reti.l
041134             0142*   
041134             0143*   prt_irq_counter:
041134 00 00 00    0144*   	.dl 0
041137             0145*   prt_irq_counter_saved:
041137 00 00 00    0146*       .dl 0
04113A             0147*   
04113A             0148*   prt_loop_reset:
04113A E5          0149*       push hl
04113B 21 00 00 00 0150*   	ld hl,0
04113F 22 34 11 04 0151*   	ld (prt_irq_counter),hl
041143 22 A5 11 04 0152*       ld (prt_loop_counter),hl
041147 22 A8 11 04 0153*       ld (prt_loops),hl
04114B CD E6 10 04 0154*       call prt_set
04114F E1          0155*       pop hl
041150 C9          0156*       ret
041151             0157*   
041151             0158*   prt_loop_start:
041151 E5          0159*       push hl
041152 21 00 00 00 0160*   	ld hl,0
041156 22 34 11 04 0161*   	ld (prt_irq_counter),hl
04115A E1          0162*       pop hl
04115B C9          0163*       ret
04115C             0164*   
04115C             0165*   prt_loop_stop:
04115C E5          0166*       push hl
04115D D5          0167*       push de
04115E 2A 34 11 04 0168*       ld hl,(prt_irq_counter)
041162 ED 5B A5 11 0169*       ld de,(prt_loop_counter)
       04          
041167 19          0170*       add hl,de
041168 22 A5 11 04 0171*       ld (prt_loop_counter),hl
04116C 21 00 00 00 0172*       ld hl,0
041170 22 34 11 04 0173*       ld (prt_irq_counter),hl
041174 2A A8 11 04 0174*       ld hl,(prt_loops)
041178 23          0175*       inc hl
041179 22 A8 11 04 0176*       ld (prt_loops),hl
04117D D1          0177*       pop de
04117E E1          0178*       pop hl
04117F C9          0179*       ret
041180             0180*   
041180             0181*   ; inputs: bc = y,x text coordinates to print
041180             0182*   prt_loop_print:
041180 F5          0183*       push af
041181 E5          0184*       push hl
041182 C5          0185*       push bc
041183 D5          0186*       push de
041184 DD E5       0187*       push ix
041186 FD E5       0188*       push iy
041188 CD 8C 12 04 0189*       call vdu_move_cursor
04118C             0190*   
04118C 2A A5 11 04 0191*       ld hl,(prt_loop_counter)
041190 CD C8 00 04 0192*       call printDec
041194             0193*   
041194 2A A8 11 04 0194*       ld hl,(prt_loops)
041198 CD C8 00 04 0195*       call printDec
04119C             0196*   
04119C FD E1       0197*       pop iy
04119E DD E1       0198*       pop ix
0411A0 D1          0199*       pop de
0411A1 C1          0200*       pop bc
0411A2 E1          0201*       pop hl
0411A3 F1          0202*       pop af
0411A4 C9          0203*       ret
0411A5             0204*   
0411A5             0205*   prt_loop_counter:
0411A5 00 00 00    0206*       .dl 0
0411A8             0207*   prt_loops:
0411A8 00 00 00    0208*       .dl 0
0411AB             0209*   
0411AB             0210*   ; ===============================================
0411AB             0211*   ; Timer functions
0411AB             0212*   ; -----------------------------------------------
0411AB             0213*   ; set a countdown timer
0411AB             0214*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0411AB             0215*   ; returns: hl = current time
0411AB             0216*   tmr_set:
0411AB FD 2F 03    0217*       ld (iy+3),hl            ; set time remaining
0411AE             0218*       MOSCALL mos_sysvars     ; ix points to syvars table
0411AE 3E 08       0001*M1 			LD	A, function
0411B0 5B CF       0002*M1 			RST.LIL	08h
0411B2 DD 27 00    0219*       ld hl,(ix+sysvar_time)  ; get current time
0411B5 FD 2F 00    0220*       ld (iy+0),hl            ; set start time
0411B8 C9          0221*       ret
0411B9             0222*   
0411B9             0223*   ; gets time remaining on a countdown timer
0411B9             0224*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0411B9             0225*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0411B9             0226*   ;          sign flags: pos = time not expired,zero or neg = time expired
0411B9             0227*   tmr_get:
0411B9             0228*       MOSCALL mos_sysvars     ; ix points to syvars table
0411B9 3E 08       0001*M1 			LD	A, function
0411BB 5B CF       0002*M1 			RST.LIL	08h
0411BD DD 17 00    0229*       ld de,(ix+sysvar_time)  ; get current time
0411C0 FD 27 00    0230*       ld hl,(iy+0)            ; get start time
0411C3 AF          0231*       xor a                   ; clear carry
0411C4 ED 52       0232*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0411C6 FD 17 03    0233*       ld de,(iy+3)            ; get timer set value
0411C9 AF          0234*       xor a                   ; clear carry
0411CA ED 5A       0235*       adc hl,de               ; hl = time remaining
0411CC             0236*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0411CC C9          0237*       ret
0411CD             0238*   
0411CD             0239*   tmr_test: ds 6 ; example of a buffer to hold timer data
0411D3             0240*   
       FF FF FF FF 
       FF FF 
0411D3 00 00 00    0241*   timestamp_now: dl 0
0411D6 00 00 00    0242*   timestamp_old: dl 0
0411D9 00 00 00    0243*   timestamp_chg: dl 0
0411DC             0244*   
0411DC             0245*   ; update the global timestamp from the system clock
0411DC             0246*   ; inputs: none
0411DC             0247*   ; returns: hl = time elapsed in 1/120ths of a second
0411DC             0248*   ;          ix = pointer to syvars table
0411DC             0249*   ; destroys: af,hl,de,ix
0411DC             0250*   timestamp_tick:
0411DC ED 5B D3 11 0251*       ld de,(timestamp_now)   ; get previous time
       04          
0411E1 ED 53 D6 11 0252*       ld (timestamp_old),de   ; save previous time
       04          
0411E6             0253*       MOSCALL mos_sysvars     ; ix points to syvars table
0411E6 3E 08       0001*M1 			LD	A, function
0411E8 5B CF       0002*M1 			RST.LIL	08h
0411EA DD 27 00    0254*       ld hl,(ix+sysvar_time)  ; get current time
0411ED 22 D3 11 04 0255*       ld (timestamp_now),hl   ; save current time
0411F1 AF          0256*       xor a                   ; clear carry
0411F2 ED 52       0257*       sbc hl,de               ; hl = time elapsed
0411F4 22 D9 11 04 0258*       ld (timestamp_chg),hl   ; save elapsed time
0411F8 C9          0259*       ret
0411F9             0260*   
0411F9             0261*   ; set a countdown timer
0411F9             0262*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0411F9             0263*   ; requires: timestamp_tick to be called at least once before this function
0411F9             0264*   ; returns: hl = current time
0411F9             0265*   ; destroys: hl
0411F9             0266*   timestamp_tmr_set:
0411F9 FD 2F 03    0267*       ld (iy+3),hl            ; set time remaining
0411FC 2A D3 11 04 0268*       ld hl,(timestamp_now)   ; get current timestamp
041200 FD 2F 00    0269*       ld (iy+0),hl            ; set start time
041203 C9          0270*       ret
041204             0271*   
041204             0272*   ; gets time remaining on a countdown timer following the global timestamp
041204             0273*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041204             0274*   ; requires: timestamp_tick to be called at least once before this function
041204             0275*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041204             0276*   ;          sign flags: pos = time not expired,zero or neg = time expired
041204             0277*   ; destroys: af,hl,de
041204             0278*   timestamp_tmr_get:
041204 ED 5B D3 11 0279*       ld de,(timestamp_now)   ; get current timestamp
       04          
041209 FD 27 00    0280*       ld hl,(iy+0)            ; get start time
04120C AF          0281*       xor a                   ; clear carry
04120D ED 52       0282*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04120F FD 17 03    0283*       ld de,(iy+3)            ; get timer set value
041212 AF          0284*       xor a                   ; clear carry
041213 ED 5A       0285*       adc hl,de               ; hl = time remaining
041215             0286*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041215 C9          0287*       ret
041216             0288*   
041216             0289*   ; set a stopwatch
041216             0290*   ; returns: hl = start time
041216             0291*   ; destroys: hl,ix
041216             0292*   stopwatch_set:
041216             0293*       MOSCALL mos_sysvars     ; ix points to syvars table
041216 3E 08       0001*M1 			LD	A, function
041218 5B CF       0002*M1 			RST.LIL	08h
04121A DD 27 00    0294*       ld hl,(ix+sysvar_time)  ; get current time
04121D 22 32 12 04 0295*       ld (stopwatch_started),hl            ; set start time
041221 C9          0296*       ret
041222             0297*   
041222             0298*   ; gets time elapsed on a stopwatch
041222             0299*   ; returns: hl = time elapsed in 1/120ths of a second
041222             0300*   ; destroys: af,hl,de,ix
041222             0301*   stopwatch_get:
041222             0302*       MOSCALL mos_sysvars     ; ix points to syvars table
041222 3E 08       0001*M1 			LD	A, function
041224 5B CF       0002*M1 			RST.LIL	08h
041226 DD 27 00    0303*       ld hl,(ix+sysvar_time)  ; get current time
041229 ED 5B 32 12 0304*       ld de,(stopwatch_started)            ; get start time
       04          
04122E AF          0305*       xor a                   ; clear carry
04122F ED 52       0306*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041231 C9          0307*       ret
041232             0308*   
041232             0309*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041235             0310*   
041235             0311*   ; ------------------
041235             0312*   ; delay routine
041235             0313*   ; Author: Richard Turrnidge
041235             0314*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
041235             0315*   ; routine waits a fixed time,then returns
041235             0316*   ; arrive with A =  the delay byte. One bit to be set only.
041235             0317*   ; eg. ld A,00000100b
041235             0318*   
041235             0319*   multiPurposeDelay:
       FF FF FF 
041235 F5          0320*       push af
041236 C5          0321*       push bc
041237 DD E5       0322*       push ix
041239 47          0323*       ld b,a
04123A 3E 08       0324*       ld a,$08
04123C 5B CF       0325*       RST.LIL	08h                 ; get IX pointer to sysvars
04123E             0326*   
04123E             0327*   waitLoop:
04123E             0328*   
04123E DD 7E 00    0329*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041241             0330*   
041241             0331*                                   ;   we check if bit set is same as last time we checked.
041241             0332*                                   ;   bit 0 - don't use
041241             0333*                                   ;   bit 1 - changes 64 times per second
041241             0334*                                   ;   bit 2 - changes 32 times per second
041241             0335*                                   ;   bit 3 - changes 16 times per second
041241             0336*   
041241             0337*                                   ;   bit 4 - changes 8 times per second
041241             0338*                                   ;   bit 5 - changes 4 times per second
041241             0339*                                   ;   bit 6 - changes 2 times per second
041241             0340*                                   ;   bit 7 - changes 1 times per second
041241 A0          0341*       and b
041242 4F          0342*       ld c,a
041243 3A 54 12 04 0343*       ld a,(oldTimeStamp)
041247 B9          0344*       cp c                        ; is A same as last value?
041248 28 F4       0345*       jr z,waitLoop              ; loop here if it is
04124A 79          0346*       ld a,c
04124B 32 54 12 04 0347*       ld (oldTimeStamp),a        ; set new value
04124F             0348*   
04124F DD E1       0349*       pop ix
041251 C1          0350*       pop bc
041252 F1          0351*       pop af
041253 C9          0352*       ret
041254             0353*   
041254 00          0354*   oldTimeStamp:   .db 00h
041255             0039        include "vdu.inc"
041255             0001*   ; VDU 30: Home cursor
041255             0002*   vdu_home_cursor:
041255 3E 1E       0003*       ld a,30
041257 5B D7       0004*   	rst.lil $10
041259 C9          0005*   	ret
04125A             0006*   
04125A             0007*   vdu_cursor_on:
04125A 21 65 12 04 0008*   	ld hl,@cmd
04125E 01 03 00 00 0009*   	ld bc,@end-@cmd
041262 5B DF       0010*   	rst.lil $18
041264 C9          0011*   	ret
041265             0012*   @cmd:
041265 17 01 01    0013*   	db 23,1,1
041268             0014*   @end:
041268             0015*   
041268             0016*   vdu_cursor_off:
041268 21 73 12 04 0017*   	ld hl,@cmd
04126C 01 03 00 00 0018*   	ld bc,@end-@cmd
041270 5B DF       0019*   	rst.lil $18
041272 C9          0020*   	ret
041273             0021*   @cmd:
041273 17 01 00    0022*   	db 23,1,0
041276             0023*   @end:
041276             0024*   
041276             0025*   ; VDU 5: Write text at graphics cursor
041276             0026*   ; inputs: a is the character to write to the screen
041276             0027*   ; prerequisites: the graphics cursor at the intended position on screen
041276             0028*   ; outputs: see the name of the function
041276             0029*   ; destroys: a, hl, bc
041276             0030*   vdu_char_to_gfx_cursor:
041276 32 86 12 04 0031*   	ld (@arg),a
04127A 21 85 12 04 0032*   	ld hl,@cmd
04127E 01 02 00 00 0033*   	ld bc,@end-@cmd
041282 5B DF       0034*   	rst.lil $18
041284 C9          0035*   	ret
041285 05          0036*   @cmd: db 5
041286 00          0037*   @arg: db 0
041287             0038*   @end:
041287             0039*   ; VDU 9: Move cursor forward one character
041287             0040*   vdu_cursor_forward:
041287 3E 09       0041*       ld a,9
041289 5B D7       0042*   	rst.lil $10
04128B C9          0043*   	ret
04128C             0044*   
04128C             0045*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04128C             0046*   ; inputs: c=x, b=y 8-bit unsigned integers
04128C             0047*   vdu_move_cursor:
04128C ED 43 9D 12 0048*       ld (@x0),bc
       04          
041291 21 9C 12 04 0049*   	ld hl,@cmd
041295 01 03 00 00 0050*   	ld bc,@end-@cmd
041299 5B DF       0051*   	rst.lil $18
04129B C9          0052*   	ret
04129C 1F          0053*   @cmd: 	db 31
04129D 00          0054*   @x0:	db 0
04129E 00          0055*   @y0: 	db 0
04129F 00          0056*   @end: 	db 0 ; padding
0412A0             0057*   
0412A0             0058*   ; VDU 12: Clear text area (CLS)
0412A0             0059*   vdu_cls:
0412A0 3E 0C       0060*       ld a,12
0412A2 5B D7       0061*   	rst.lil $10
0412A4 C9          0062*   	ret
0412A5             0063*   
0412A5             0064*   vdu_flip:
0412A5 21 B0 12 04 0065*   	ld hl,@cmd
0412A9 01 03 00 00 0066*   	ld bc,@end-@cmd
0412AD 5B DF       0067*   	rst.lil $18
0412AF C9          0068*   	ret
0412B0 17 00 C3    0069*   @cmd: db 23,0,0xC3
0412B3             0070*   @end:
0412B3             0071*   
0412B3             0072*   ; VDU 16: Clear graphics area (CLG)
0412B3             0073*   vdu_clg:
0412B3 3E 10       0074*       ld a,16
0412B5 5B D7       0075*   	rst.lil $10
0412B7 C9          0076*   	ret
0412B8             0077*   
0412B8             0078*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
0412B8             0079*   ; VDU 23, 7: Scrolling
0412B8             0080*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
0412B8             0081*   ; inputs: a, extent; l, direction; h; speed
0412B8             0082*   vdu_scroll_down:
0412B8 32 CD 12 04 0083*   	ld (@extent),a
0412BC 22 CE 12 04 0084*   	ld (@dir),hl ; implicitly populates @speed
0412C0 21 CB 12 04 0085*   	ld hl,@cmd
0412C4 01 05 00 00 0086*   	ld bc,@end-@cmd
0412C8 5B DF       0087*   	rst.lil $18     ;; Sending command to VDP
0412CA C9          0088*   	ret
0412CB 17 07       0089*   @cmd:       db 23,7
0412CD 00          0090*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
0412CE 00          0091*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
0412CF 00          0092*   @speed:     db 0x00 ; pixels
0412D0 00          0093*   @end:		db 0x00 ; padding
0412D1             0094*   
0412D1             0095*   ; COLOUR MODES
0412D1             0096*   ; Mode	Effect
0412D1             0097*   ; 0	Set on-screen pixel to target colour value
0412D1             0098*   ; 1	OR value with the on-screen pixel
0412D1             0099*   ; 2	AND value with the on-screen pixel
0412D1             0100*   ; 3	XOR value with the on-screen pixel
0412D1             0101*   ; 4	Invert the on-screen pixel
0412D1             0102*   ; 5	No operation
0412D1             0103*   ; 6	AND the inverse of the specified colour with the on-screen pixel
0412D1             0104*   ; 7	OR the inverse of the specified colour with the on-screen pixel
0412D1             0105*   
0412D1             0106*   ; VDU 17, colour: Define text colour (COLOUR)
0412D1             0107*   vdu_colour_text:
0412D1 32 E1 12 04 0108*   	ld (@arg),a
0412D5 21 E0 12 04 0109*   	ld hl,@cmd
0412D9 01 02 00 00 0110*   	ld bc,@end-@cmd
0412DD 5B DF       0111*   	rst.lil $18
0412DF C9          0112*   	ret
0412E0 11          0113*   @cmd: db 17
0412E1 00          0114*   @arg: db 0
0412E2             0115*   @end:
0412E2             0116*   
0412E2             0117*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0412E2             0118*   ; inputs: a=mode, c=colour (add 128 to set background colour)
0412E2             0119*   vdu_gcol:
0412E2 32 F7 12 04 0120*   	ld (@mode),a
0412E6 79          0121*       ld a,c
0412E7 32 F8 12 04 0122*       ld (@col),a
0412EB 21 F6 12 04 0123*   	ld hl,@cmd
0412EF 01 03 00 00 0124*   	ld bc,@end-@cmd
0412F3 5B DF       0125*   	rst.lil $18
0412F5 C9          0126*   	ret
0412F6 12          0127*   @cmd:  db 18
0412F7 00          0128*   @mode: db 0
0412F8 00          0129*   @col:  db 0
0412F9             0130*   @end:
0412F9             0131*   
0412F9             0132*   
0412F9             0133*   ; VDU 28, left, bottom, right, top: Set text viewport **
0412F9             0134*   ; MIND THE LITTLE-ENDIANESS
0412F9             0135*   ; inputs: c=left,b=bottom,e=right,d=top
0412F9             0136*   ; outputs; nothing
0412F9             0137*   ; destroys: a might make it out alive
0412F9             0138*   vdu_set_txt_viewport:
0412F9 ED 43 0F 13 0139*       ld (@lb),bc
       04          
0412FE ED 53 11 13 0140*   	ld (@rt),de
       04          
041303 21 0E 13 04 0141*   	ld hl,@cmd
041307 01 05 00 00 0142*   	ld bc,@end-@cmd
04130B 5B DF       0143*   	rst.lil $18
04130D C9          0144*   	ret
04130E 1C          0145*   @cmd:   db 28 ; set text viewport command
04130F 00 00       0146*   @lb: 	dw 0x0000 ; set by bc
041311 00 00       0147*   @rt: 	dw 0x0000 ; set by de
041313 00          0148*   @end:   db 0x00	  ; padding
041314             0149*   
041314             0150*   ; Wait for VBLANK interrupt
041314             0151*   vdu_vblank:
041314 DD E5       0152*       PUSH 	IX
041316             0153*   	MOSCALL	mos_sysvars
041316 3E 08       0001*M1 			LD	A, function
041318 5B CF       0002*M1 			RST.LIL	08h
04131A DD 7E 00    0154*   	LD	A, (IX + sysvar_time + 0)
04131D             0155*   @wait:
04131D DD BE 00    0156*       CP 	A, (IX + sysvar_time + 0)
041320 28 FB       0157*       JR	Z, @wait
041322 DD E1       0158*       POP	IX
041324 C9          0159*       RET
041325             0160*   
041325             0161*   ; VDU 29, x; y;: Set graphics origin
041325             0162*   ; This command sets the graphics origin.
041325             0163*   ; The origin is the point on the screen where the coordinates (0,0) are located.
041325             0164*   ; inputs: bc=x0,de=y0
041325             0165*   ; outputs; nothing
041325             0166*   ; destroys: a might make it out alive
041325             0167*   vdu_set_gfx_origin:
041325 ED 43 3B 13 0168*       ld (@x0),bc
       04          
04132A ED 53 3D 13 0169*       ld (@y0),de
       04          
04132F 21 3A 13 04 0170*       ld hl,@cmd
041333 01 05 00 00 0171*       ld bc,@end-@cmd
041337 5B DF       0172*       rst.lil $18
041339 C9          0173*       ret
04133A 1D          0174*   @cmd:   db 29 ; set graphics origin command
04133B 00 00       0175*   @x0: 	dw 0x0000 ; set by bc
04133D 00 00       0176*   @y0: 	dw 0x0000 ; set by de
04133F 00          0177*   @end:   db 0x00	  ; padding
041340             0178*   
041340             0179*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
041340             0180*   ; NOTE: the order of the y-coordinate parameters are inverted
041340             0181*   ; 	because we have turned off logical screen scaling
041340             0182*   ; NOTE: coordinates are relative to current gfx origin
041340             0183*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041340             0184*   ; outputs; nothing
041340             0185*   ; destroys: a might make it out alive
041340             0186*   vdu_set_gfx_viewport:
041340 ED 43 60 13 0187*       ld (@x0),bc
       04          
041345 FD 22 62 13 0188*       ld (@y1),iy
       04          
04134A DD 22 64 13 0189*   	ld (@x1),ix
       04          
04134F ED 53 66 13 0190*   	ld (@y0),de
       04          
041354 21 5F 13 04 0191*   	ld hl,@cmd
041358 01 09 00 00 0192*   	ld bc,@end-@cmd
04135C 5B DF       0193*   	rst.lil $18
04135E C9          0194*   	ret
04135F 18          0195*   @cmd:   db 24 ; set graphics viewport command
041360 00 00       0196*   @x0: 	dw 0x0000 ; set by bc
041362 00 00       0197*   @y1: 	dw 0x0000 ; set by iy
041364 00 00       0198*   @x1: 	dw 0x0000 ; set by ix
041366 00 00       0199*   @y0: 	dw 0x0000 ; set by de
041368 00          0200*   @end:   db 0x00	  ; padding
041369             0201*   
041369             0202*   ; SCREEN MODES
041369             0203*   ; ===============================
041369             0204*   ; Mode  Horz  Vert  Cols  Refresh
041369             0205*   ; ---   ----  ----  ----  -------
041369             0206*   ; 11    320   240   2     60hz
041369             0207*   ; 139   320   240   2     60hz
041369             0208*   ; 23    512   384   2     60hz
041369             0209*   ; 151   512   384   2     60hz
041369             0210*   ; 6     640   240   2     60hz
041369             0211*   ; 134   640   240   2     60hz
041369             0212*   ; 2     640   480   2     60hz
041369             0213*   ; 130   640   480   2     60hz
041369             0214*   ; 17    800   600   2     60hz
041369             0215*   ; 145   800   600   2     60hz
041369             0216*   ; 18    1024  768   2     60hz
041369             0217*   ; 146   1024  768   2     60hz
041369             0218*   ; ---   ----  ----  ----  -------
041369             0219*   ; 10    320   240   4     60hz
041369             0220*   ; 138   320   240   4     60hz
041369             0221*   ; 22    512   384   4     60hz
041369             0222*   ; 150   512   384   4     60hz
041369             0223*   ; 5     640   240   4     60hz
041369             0224*   ; 133   640   240   4     60hz
041369             0225*   ; 1     640   480   4     60hz
041369             0226*   ; 129   640   480   4     60hz
041369             0227*   ; 16    800   600   4     60hz
041369             0228*   ; 19    1024  768   4     60hz
041369             0229*   ; ---   ----  ----  ----  -------
041369             0230*   ; 9     320   240   16    60hz
041369             0231*   ; 137   320   240   16    60hz
041369             0232*   ; 21    512   384   16    60hz
041369             0233*   ; 149   512   384   16    60hz
041369             0234*   ; 4     640   240   16    60hz
041369             0235*   ; 132   640   240   16    60hz
041369             0236*   ; 0     640   480   16    60hz
041369             0237*   ; 7     n/a   n/a   16    60hz
041369             0238*   ; ---   ----  ----  ----  -------
041369             0239*   ; 8     320   240   64    60hz
041369             0240*   ; 136   320   240   64    60hz
041369             0241*   ; 20    512   384   64    60hz
041369             0242*   ; 3     640   240   64    60hz
041369             0243*   ; ---   ----  ----  ----  -------
041369             0244*   vdu_set_screen_mode:
041369 32 79 13 04 0245*   	ld (@arg),a
04136D 21 78 13 04 0246*   	ld hl,@cmd
041371 01 02 00 00 0247*   	ld bc,@end-@cmd
041375 5B DF       0248*   	rst.lil $18
041377 C9          0249*   	ret
041378 16          0250*   @cmd: db 22 ; set screen mode
041379 00          0251*   @arg: db 0  ; screen mode parameter
04137A             0252*   @end:
04137A             0253*   
04137A             0254*   ; get the current screen mode
04137A             0255*   ; inputs: none
04137A             0256*   ; outputs: a=screen mode
04137A             0257*   ; destroys: af, ix
04137A             0258*   vdu_get_screen_mode:
04137A             0259*       MOSCALL mos_sysvars
04137A 3E 08       0001*M1 			LD	A, function
04137C 5B CF       0002*M1 			RST.LIL	08h
04137E DD 7E 27    0260*       ld a,(IX+sysvar_scrMode)
041381 C9          0261*       ret
041382             0262*   ; end vdu_get_screen_mode
041382             0263*   
041382             0264*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041382             0265*   ; inputs: a is scaling mode, 1=on, 0=off
041382             0266*   ; note: default setting on boot is scaling ON
041382             0267*   vdu_set_scaling:
041382 32 94 13 04 0268*   	ld (@arg),a
041386 21 91 13 04 0269*   	ld hl,@cmd
04138A 01 04 00 00 0270*   	ld bc,@end-@cmd
04138E 5B DF       0271*   	rst.lil $18
041390 C9          0272*   	ret
041391 17 00 C0    0273*   @cmd: db 23,0,0xC0
041394 00          0274*   @arg: db 0  ; scaling on/off
041395             0275*   @end:
041395             0276*   
041395             0277*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041395             0278*   ; inputs: hl=bufferId
041395             0279*   vdu_buff_select:
041395 22 A7 13 04 0280*   	ld (@bufferId),hl
041399 21 A4 13 04 0281*   	ld hl,@cmd
04139D 01 05 00 00 0282*   	ld bc,@end-@cmd
0413A1 5B DF       0283*   	rst.lil $18
0413A3 C9          0284*   	ret
0413A4 17 1B 20    0285*   @cmd: db 23,27,0x20
0413A7 00 00       0286*   @bufferId: dw 0x0000
0413A9 00          0287*   @end: db 0x00 ; padding
0413AA             0288*   
0413AA             0289*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
0413AA             0290*   ; inputs: a=format; bc=width; de=height
0413AA             0291*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
0413AA             0292*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
0413AA             0293*   ; 0 	RGBA8888 (4-bytes per pixel)
0413AA             0294*   ; 1 	RGBA2222 (1-bytes per pixel)
0413AA             0295*   ; 2 	Mono/Mask (1-bit per pixel)
0413AA             0296*   ; 3 	Reserved for internal use by VDP (“native” format)
0413AA             0297*   vdu_bmp_create:
0413AA ED 43 C6 13 0298*       ld (@width),bc
       04          
0413AF ED 53 C8 13 0299*       ld (@height),de
       04          
0413B4 32 CA 13 04 0300*       ld (@fmt),a
0413B8 21 C3 13 04 0301*   	ld hl,@cmd
0413BC 01 08 00 00 0302*   	ld bc,@end-@cmd
0413C0 5B DF       0303*   	rst.lil $18
0413C2 C9          0304*   	ret
0413C3 17 1B 21    0305*   @cmd:       db 23,27,0x21
0413C6 00 00       0306*   @width:     dw 0x0000
0413C8 00 00       0307*   @height:    dw 0x0000
0413CA 00          0308*   @fmt:       db 0x00
0413CB             0309*   @end:
0413CB             0310*   
0413CB             0311*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0413CB             0312*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0413CB             0313*   vdu_load_img_rgba2_to_8:
0413CB             0314*   ; backup the target buffer id and image dimensions
0413CB E5          0315*       push hl
0413CC D5          0316*       push de
0413CD C5          0317*       push bc
0413CE             0318*   ; load the rgba2 image to working buffer 65534
0413CE 21 FE FF 00 0319*       ld hl,65534 ; temporary working buffer id
0413D2 CD D5 14 04 0320*   	call vdu_load_buffer_from_file
0413D6             0321*   ; restore the image dimensions and target buffer id
0413D6 C1          0322*       pop bc
0413D7 D1          0323*       pop de
0413D8 E1          0324*       pop hl
0413D9             0325*   ; fall through to vdu_rgba2_to_8
0413D9             0326*   
0413D9             0327*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0413D9             0328*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0413D9             0329*   ; the "expand bitmap" command is:
0413D9             0330*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0413D9             0331*   ; and then to reverse the byte order to fix endian-ness:
0413D9             0332*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0413D9             0333*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0413D9             0334*   ; VDU 23,27,&20,targetBufferID%;
0413D9             0335*   ; VDU 23,27,&21,width%;height%;0
0413D9             0336*   ; -------------------------------------------------------------------
0413D9             0337*   ; inputs: bc,de image width,height ; hl = targetBufferId
0413D9             0338*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0413D9             0339*   vdu_rgba2_to_8:
0413D9             0340*   ; load the image dimensions and buffer id parameters
0413D9 ED 43 35 14 0341*       ld (@width),bc
       04          
0413DE ED 53 37 14 0342*       ld (@height),de
       04          
0413E3 22 1A 14 04 0343*       ld (@bufferId0),hl
0413E7 22 27 14 04 0344*       ld (@bufferId2),hl
0413EB 22 30 14 04 0345*       ld (@bufferId1),hl
0413EF             0346*   ; clean up bytes that got stomped on by the ID loads
0413EF 3E 48       0347*       ld a,0x48
0413F1 32 1C 14 04 0348*       ld (@bufferId0+2),a
0413F5 3E 17       0349*       ld a,23
0413F7 32 32 14 04 0350*       ld (@bufferId1+2),a
0413FB 3E 18       0351*       ld a,24
0413FD 32 29 14 04 0352*       ld (@bufferId2+2),a
041401 AF          0353*       xor a
041402 32 39 14 04 0354*       ld (@height+2),a
041406             0355*   ; send the vdu command strings
041406 21 11 14 04 0356*       ld hl,@beg
04140A 01 29 00 00 0357*       ld bc,@end-@beg
04140E 5B DF       0358*       rst.lil $18
041410 C9          0359*       ret
041411             0360*   @beg:
041411             0361*   ; Command 14: Consolidate blocks in a buffer
041411             0362*   ; VDU 23, 0, &A0, bufferId; 14
041411 17 00 A0    0363*       db 23,0,0xA0
041414 FE FF       0364*       dw 65534 ; workingBufferId
041416 0E          0365*       db 14 ; consolidate blocks
041417             0366*   ; the "expand bitmap" command is:
041417             0367*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041417 17 00 A0    0368*       db 23,0,0xA0
04141A 00 00       0369*   @bufferId0: dw 0x0000 ; targetBufferId
04141C 48          0370*       db 0x48 ; given as decimal command 72 in the docs
04141D 02          0371*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
04141E FE FF       0372*       dw 65534 ; sourceBufferId
041420 00 7F BF FF 0373*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041424             0374*   ; reverse the byte order to fix endian-ness:
041424             0375*   ; Command 24: Reverse the order of data of blocks within a buffer
041424             0376*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041424             0377*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041424 17 00 A0    0378*       db 23,0,0xA0
041427 00 00       0379*   @bufferId2:    dw 0x0000 ; targetBufferId
041429 18          0380*       db 24 ; reverse byte order
04142A 04          0381*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
04142B 04 00       0382*       dw 4 ; size (4 bytes)
04142D             0383*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
04142D             0384*   ; VDU 23,27,&20,targetBufferID%;
04142D 17 1B 20    0385*       db 23,27,0x20 ; select bitmap
041430 00 00       0386*   @bufferId1: dw 0x0000 ; targetBufferId
041432             0387*   ; VDU 23,27,&21,width%;height%;0
041432 17 1B 21    0388*       db 23,27,0x21 ; create bitmap from buffer
041435 00 00       0389*   @width: dw 0x0000
041437 00 00       0390*   @height: dw 0x0000
041439 00          0391*       db 0x00 ; rgba8888 format
04143A             0392*   @end:
04143A             0393*   
04143A             0394*   ; scratch variables
04143A 00 00 00    0395*   bufferId0: dl 0x000000
04143D 00 00 00    0396*   bufferId1: dl 0x000000
041440             0397*   
041440             0398*   ; load a vdu buffer from local memory
041440             0399*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041440             0400*   vdu_load_buffer:
041440 ED 43 69 14 0401*       ld (@length),bc
       04          
041445 D5          0402*       push de ; save data pointer
041446             0403*   ; send the vdu command string
041446 7D          0404*       ld a,l
041447 32 66 14 04 0405*       ld (@bufferId),a
04144B 7C          0406*       ld a,h
04144C 32 67 14 04 0407*       ld (@bufferId+1),a
041450 21 63 14 04 0408*       ld hl,@cmd
041454 01 08 00 00 0409*       ld bc,@end-@cmd
041458 5B DF       0410*       rst.lil $18
04145A             0411*   ; send the buffer data
04145A E1          0412*       pop hl ; pointer to data
04145B ED 4B 69 14 0413*       ld bc,(@length)
       04          
041460 5B DF       0414*       rst.lil $18 ; send it
041462 C9          0415*       ret
041463             0416*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041463 17 00 A0    0417*   @cmd:       db 23,0,0xA0
041466 00 00       0418*   @bufferId:	dw 0x0000
041468 00          0419*   		    db 0 ; load buffer
041469 00 00       0420*   @length:	dw 0x0000
04146B 00          0421*   @end: db 0 ; padding
04146C             0422*   
04146C             0423*   ; clear a buffer
04146C             0424*   ; inputs: hl = bufferId
04146C             0425*   vdu_clear_buffer:
04146C 7D          0426*       ld a,l
04146D 32 84 14 04 0427*       ld (@bufferId),a
041471 7C          0428*       ld a,h
041472 32 85 14 04 0429*       ld (@bufferId+1),a
041476 21 81 14 04 0430*       ld hl,@cmd
04147A 01 06 00 00 0431*       ld bc,@end-@cmd
04147E 5B DF       0432*       rst.lil $18
041480 C9          0433*       ret
041481 17 00 A0    0434*   @cmd:       db 23,0,0xA0
041484 00 00       0435*   @bufferId:	dw 0x0000
041486 02          0436*   		    db 2 ; clear buffer
041487             0437*   @end:
041487             0438*   
041487             0439*   vdu_clear_all_buffers:
041487             0440*   ; clear all buffers
041487 21 92 14 04 0441*       ld hl,@beg
04148B 01 06 00 00 0442*       ld bc,@end-@beg
04148F 5B DF       0443*       rst.lil $18
041491 C9          0444*       ret
041492 17 00 A0    0445*   @beg: db 23,0,$A0
041495 FF FF       0446*         dw -1 ; clear all buffers
041497 02          0447*         db 2  ; command 2: clear a buffer
041498             0448*   @end:
041498             0449*   
041498             0450*   ; Command 14: Consolidate blocks in a buffer
041498             0451*   vdu_consolidate_buffer:
041498             0452*   ; set parameters for vdu call
041498 7D          0453*       ld a,l
041499 32 B0 14 04 0454*       ld (@bufferId),a
04149D 7C          0455*       ld a,h
04149E 32 B1 14 04 0456*       ld (@bufferId+1),a
0414A2 21 AD 14 04 0457*       ld hl,@beg
0414A6 01 06 00 00 0458*       ld bc,@end-@beg
0414AA 5B DF       0459*       rst.lil $18
0414AC C9          0460*       ret
0414AD             0461*   ; VDU 23, 0, &A0, bufferId; 14
0414AD 17 00 A0    0462*   @beg: db 23,0,0xA0
0414B0 00 00       0463*   @bufferId: dw 0x0000
0414B2 0E          0464*              db 14
0414B3             0465*   @end:
0414B3             0466*   
0414B3             0467*   ; load an image file to a buffer and make it a bitmap
0414B3             0468*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0414B3             0469*   vdu_load_img:
0414B3             0470*   ; back up image type and dimension parameters
0414B3 22 3A 14 04 0471*       ld (bufferId0),hl
0414B7 F5          0472*       push af
0414B8 C5          0473*   	push bc
0414B9 D5          0474*   	push de
0414BA             0475*   ; load the image
0414BA CD D5 14 04 0476*   	call vdu_load_buffer_from_file
0414BE             0477*   ; now make it a bitmap
0414BE 2A 3A 14 04 0478*       ld hl,(bufferId0)
0414C2 CD 98 14 04 0479*       call vdu_consolidate_buffer
0414C6 2A 3A 14 04 0480*       ld hl,(bufferId0)
0414CA CD 95 13 04 0481*       call vdu_buff_select
0414CE D1          0482*   	pop de ; image height
0414CF C1          0483*   	pop bc ; image width
0414D0 F1          0484*   	pop af ; image type
0414D1 C3 AA 13 04 0485*   	jp vdu_bmp_create ; will return to caller from there
0414D5             0486*   
0414D5             0487*   ; inputs: hl = bufferId; iy = pointer to filename
0414D5             0488*   vdu_load_buffer_from_file:
0414D5 22 3A 14 04 0489*       ld (bufferId0),hl
0414D9             0490*   
0414D9             0491*   ; clear target buffer
0414D9 CD 6C 14 04 0492*       call vdu_clear_buffer
0414DD             0493*   
0414DD             0494*   ; open the file in read mode
0414DD             0495*   ; Open a file
0414DD             0496*   ; HLU: Filename
0414DD             0497*   ;   C: Mode
0414DD             0498*   ; Returns:
0414DD             0499*   ;   A: Filehandle, or 0 if couldn't open
0414DD FD E5       0500*   	push iy ; pointer to filename
0414DF E1          0501*   	pop hl
0414E0 0E 01       0502*   	ld c,fa_read
0414E2             0503*       MOSCALL mos_fopen
0414E2 3E 0A       0001*M1 			LD	A, function
0414E4 5B CF       0002*M1 			RST.LIL	08h
0414E6 32 21 15 04 0504*       ld (@filehandle),a
0414EA             0505*   
0414EA             0506*   @read_file:
0414EA             0507*   ; Read a block of data from a file
0414EA             0508*   ;   C: Filehandle
0414EA             0509*   ; HLU: Pointer to where to write the data to
0414EA             0510*   ; DEU: Number of bytes to read
0414EA             0511*   ; Returns:
0414EA             0512*   ; DEU: Number of bytes read
0414EA 3A 21 15 04 0513*       ld a,(@filehandle)
0414EE 4F          0514*       ld c,a
0414EF 21 00 E0 B7 0515*       ld hl,filedata
0414F3 11 00 20 00 0516*       ld de,8192 ; max we can read into onboard sram at one time
0414F7             0517*       MOSCALL mos_fread
0414F7 3E 1A       0001*M1 			LD	A, function
0414F9 5B CF       0002*M1 			RST.LIL	08h
0414FB             0518*   
0414FB             0519*   ; test de for zero bytes read
0414FB 21 00 00 00 0520*       ld hl,0
0414FF AF          0521*       xor a ; clear carry
041500 ED 52       0522*       sbc hl,de
041502 CA 18 15 04 0523*       jp z,@close_file
041506             0524*   
041506             0525*   ; load a vdu buffer from local memory
041506             0526*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041506 2A 3A 14 04 0527*       ld hl,(bufferId0)
04150A D5          0528*       push de ; chunksize
04150B C1          0529*       pop bc
04150C 11 00 E0 B7 0530*       ld de,filedata
041510 CD 40 14 04 0531*       call vdu_load_buffer
041514             0532*   
041514             0533*   ; read the next block
041514 C3 EA 14 04 0534*       jp @read_file
041518             0535*   
041518             0536*   ; close the file
041518             0537*   @close_file:
041518 3A 21 15 04 0538*       ld a,(@filehandle)
04151C             0539*       MOSCALL mos_fclose
04151C 3E 0B       0001*M1 			LD	A, function
04151E 5B CF       0002*M1 			RST.LIL	08h
041520 C9          0540*       ret ; vdu_load_buffer_from_file
041521             0541*   
041521 00          0542*   @filehandle: db 0 ; file handle
041522 00 00 00    0543*   @fil: dl 0 ; pointer to FIL struct
041525             0544*   
041525 00 00 00    0545*   @chunkpointer: dl 0 ; pointer to current chunk
041528             0546*   
041528             0547*   ; File information structure (FILINFO)
041528             0548*   @filinfo:
041528 00 00 00 00 0549*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
04152C 00 00       0550*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
04152E 00 00       0551*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041530 00          0552*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041531 00 00 00 00 0553*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
04153E 00 00 00 00 0554*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04163E             0040        include "vdu_fonts.inc"
04163E             0001*   ; select font
04163E             0002*   ; inputs: hl = bufferId, a = font flags
04163E             0003*   ; Flags:
04163E             0004*   ; Bit	Description
04163E             0005*   ; 0	Adjust cursor position to ensure text baseline is aligned
04163E             0006*   ;   0: Do not adjust cursor position (best for changing font on a new line)
04163E             0007*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
04163E             0008*   ; 1-7	Reserved for future use
04163E             0009*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
04163E             0010*   vdu_font_select:
04163E 22 55 16 04 0011*       ld (@bufferId),hl
041642 32 57 16 04 0012*       ld (@flags),a
041646 21 51 16 04 0013*       ld hl,@cmd
04164A 01 07 00 00 0014*       ld bc,@end-@cmd
04164E 5B DF       0015*       rst.lil $18
041650 C9          0016*       ret
041651 17 00 95 00 0017*   @cmd: db 23, 0, 0x95, 0
041655 00 00       0018*   @bufferId: dw 0x0000
041657 00          0019*   @flags: db 0x00
041658             0020*   @end:
041658             0021*   
041658             0022*   ; create font from buffer
041658             0023*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041658             0024*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041658             0025*   vdu_font_create:
041658 22 7D 16 04 0026*       ld (@bufferId),hl
04165C ED 53 7F 16 0027*       ld (@width),de ; also loads height
       04          
041661 32 82 16 04 0028*       ld (@flags),a
041665 7A          0029*       ld a,d ; height
041666 32 81 16 04 0030*       ld (@ascent),a ; ascent = height
04166A             0031*   ; consolidate buffer
04166A CD 98 14 04 0032*       call vdu_consolidate_buffer
04166E             0033*   ; create font
04166E 21 79 16 04 0034*       ld hl,@cmd
041672 01 0A 00 00 0035*       ld bc,@end-@cmd
041676 5B DF       0036*       rst.lil $18
041678 C9          0037*       ret
041679 17 00 95 01 0038*   @cmd: db 23, 0, 0x95, 1
04167D 00 00       0039*   @bufferId: dw 0x0000
04167F 00          0040*   @width: db 0x00
041680 00          0041*   @height: db 0x00
041681 00          0042*   @ascent: db 0x00
041682 00          0043*   @flags: db 0x00
041683             0044*   @end:
041683             0045*   
041683             0046*   ; set or adjust font property
041683             0047*   ; inputs: hl = bufferId, a = field, de = value
041683             0048*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041683             0049*   vdu_font_property:
041683 22 9F 16 04 0050*       ld (@bufferId),hl
041687 32 A1 16 04 0051*       ld (@field),a
04168B ED 53 A2 16 0052*       ld (@value),de
       04          
041690 21 9B 16 04 0053*       ld hl,@cmd
041694 01 09 00 00 0054*       ld bc,@end-@cmd
041698 5B DF       0055*       rst.lil $18
04169A C9          0056*       ret
04169B 17 00 95 02 0057*   @cmd: db 23, 0, 0x95, 2
04169F 00 00       0058*   @bufferId: dw 0x0000
0416A1 00          0059*   @field: db 0x00
0416A2 00 00       0060*   @value: dw 0x0000
0416A4 00          0061*   @end: db 0x00 ; padding
0416A5             0062*   
0416A5             0063*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
0416A5             0064*   
0416A5             0065*   ; Clear/Delete font
0416A5             0066*   ; inputs: hl = bufferId
0416A5             0067*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
0416A5             0068*   vdu_font_clear:
0416A5 22 B8 16 04 0069*       ld (@bufferId),hl
0416A9 21 B4 16 04 0070*       ld hl,@cmd
0416AD 01 06 00 00 0071*       ld bc,@end-@cmd
0416B1 5B DF       0072*       rst.lil $18
0416B3 C9          0073*       ret
0416B4 17 00 95 04 0074*   @cmd: db 23, 0, 0x95, 4
0416B8 00 00       0075*   @bufferId: dw 0x0000
0416BA 00          0076*   @end: db 0x00 ; padding
0416BB             0077*   
0416BB             0078*   ; Copy system font to buffer
0416BB             0079*   ; inputs: hl = bufferId
0416BB             0080*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
0416BB             0081*   vdu_font_copy_system:
0416BB 22 CE 16 04 0082*       ld (@bufferId),hl
0416BF 21 CA 16 04 0083*       ld hl,@cmd
0416C3 01 06 00 00 0084*       ld bc,@end-@cmd
0416C7 5B DF       0085*       rst.lil $18
0416C9 C9          0086*       ret
0416CA 17 00 95 05 0087*   @cmd: db 23, 0, 0x95, 5
0416CE 00 00       0088*   @bufferId: dw 0x0000
0416D0 00          0089*   @end: db 0x00 ; padding
0416D1             0041        include "vdu_plot.inc"
0416D1             0001*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0416D1             0002*   ; PLOT code 	(Decimal) 	Effect
0416D1             0003*   ; &00-&07 	0-7 	Solid line, includes both ends
0416D1             0004*   plot_sl_both: equ 0x00
0416D1             0005*   
0416D1             0006*   ; &08-&0F 	8-15 	Solid line, final point omitted
0416D1             0007*   plot_sl_first: equ 0x08
0416D1             0008*   
0416D1             0009*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0416D1             0010*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0416D1             0011*   
0416D1             0012*   ; &20-&27 	32-39 	Solid line, first point omitted
0416D1             0013*   plot_sl_last: equ 0x20
0416D1             0014*   
0416D1             0015*   ; &28-&2F 	40-47 	Solid line, both points omitted
0416D1             0016*   plot_sl_none: equ 0x28
0416D1             0017*   
0416D1             0018*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0416D1             0019*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0416D1             0020*   
0416D1             0021*   ; &40-&47 	64-71 	Point plot
0416D1             0022*   plot_pt: equ 0x40
0416D1             0023*   
0416D1             0024*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0416D1             0025*   plot_lf_lr_non_bg: equ 0x48
0416D1             0026*   
0416D1             0027*   ; &50-&57 	80-87 	Triangle fill
0416D1             0028*   plot_tf: equ 0x50
0416D1             0029*   
0416D1             0030*   ; &58-&5F 	88-95 	Line fill right to background §§
0416D1             0031*   plot_lf_r_bg: equ 0x58
0416D1             0032*   
0416D1             0033*   ; &60-&67 	96-103 	Rectangle fill
0416D1             0034*   plot_rf: equ 0x60
0416D1             0035*   
0416D1             0036*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0416D1             0037*   plot_lf_lr_fg: equ 0x60
0416D1             0038*   
0416D1             0039*   ; &70-&77 	112-119 	Parallelogram fill
0416D1             0040*   plot_pf: equ 0x70
0416D1             0041*   
0416D1             0042*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0416D1             0043*   plot_lf_r_non_fg: equ 0x78
0416D1             0044*   
0416D1             0045*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
0416D1             0046*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0416D1             0047*   
0416D1             0048*   ; &90-&97 	144-151 	Circle outline
0416D1             0049*   plot_co: equ 0x90
0416D1             0050*   
0416D1             0051*   ; &98-&9F 	152-159 	Circle fill
0416D1             0052*   plot_cf: equ 0x98
0416D1             0053*   
0416D1             0054*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
0416D1             0055*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
0416D1             0056*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
0416D1             0057*   
0416D1             0058*   ; &B8-&BF 	184-191 	Rectangle copy/move
0416D1             0059*   plot_rcm: equ 0xB8
0416D1             0060*   
0416D1             0061*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0416D1             0062*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0416D1             0063*   ; &D0-&D7 	208-215 	Not defined
0416D1             0064*   ; &D8-&DF 	216-223 	Not defined
0416D1             0065*   ; &E0-&E7 	224-231 	Not defined
0416D1             0066*   
0416D1             0067*   ; &E8-&EF 	232-239 	Bitmap plot §
0416D1             0068*   plot_bmp: equ 0xE8
0416D1             0069*   
0416D1             0070*   ; &F0-&F7 	240-247 	Not defined
0416D1             0071*   ; &F8-&FF 	248-255 	Not defined
0416D1             0072*   
0416D1             0073*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0416D1             0074*   ; Agon Console8 VDP 2.2.0
0416D1             0075*   
0416D1             0076*   ; Within each group of eight plot codes, the effects are as follows:
0416D1             0077*   ; Plot code 	Effect
0416D1             0078*   ; 0 	Move relative
0416D1             0079*   mv_rel: equ 0
0416D1             0080*   
0416D1             0081*   ; 1 	Plot relative in current foreground colour
0416D1             0082*   dr_rel_fg: equ 1
0416D1             0083*   
0416D1             0084*   ; 2 	Not supported (Plot relative in logical inverse colour)
0416D1             0085*   ; 3 	Plot relative in current background colour
0416D1             0086*   dr_rel_bg: equ 3
0416D1             0087*   
0416D1             0088*   ; 4 	Move absolute
0416D1             0089*   mv_abs: equ 4
0416D1             0090*   
0416D1             0091*   ; 5 	Plot absolute in current foreground colour
0416D1             0092*   dr_abs_fg: equ 5
0416D1             0093*   
0416D1             0094*   ; 6 	Not supported (Plot absolute in logical inverse colour)
0416D1             0095*   ; 7 	Plot absolute in current background colour
0416D1             0096*   dr_abs_bg: equ 7
0416D1             0097*   
0416D1             0098*   ; Codes 0-3 use the position data provided as part of the command
0416D1             0099*   ; as a relative position, adding the position given to the current
0416D1             0100*   ; graphical cursor position. Codes 4-7 use the position data provided
0416D1             0101*   ; as part of the command as an absolute position, setting the current
0416D1             0102*   ; graphical cursor position to the position given.
0416D1             0103*   
0416D1             0104*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0416D1             0105*   ; current pixel colour. These operations cannot currently be supported
0416D1             0106*   ; by the graphics system the Agon VDP uses, so these codes are not
0416D1             0107*   ; supported. Support for these codes may be added in a future version
0416D1             0108*   ; of the VDP firmware.
0416D1             0109*   
0416D1             0110*   ; 16 colour palette constants
0416D1             0111*   c_black: equ 0
0416D1             0112*   c_red_dk: equ 1
0416D1             0113*   c_green_dk: equ 2
0416D1             0114*   c_yellow_dk: equ 3
0416D1             0115*   c_blue_dk: equ 4
0416D1             0116*   c_magenta_dk: equ 5
0416D1             0117*   c_cyan_dk: equ 6
0416D1             0118*   c_grey: equ 7
0416D1             0119*   c_grey_dk: equ 8
0416D1             0120*   c_red: equ 9
0416D1             0121*   c_green: equ 10
0416D1             0122*   c_yellow: equ 11
0416D1             0123*   c_blue: equ 12
0416D1             0124*   c_magenta: equ 13
0416D1             0125*   c_cyan: equ 14
0416D1             0126*   c_white: equ 15
0416D1             0127*   
0416D1             0128*   ; VDU 25, mode, x; y;: PLOT command
0416D1             0129*   ; inputs: a=mode, bc=x0, de=y0
0416D1             0130*   vdu_plot:
0416D1 32 EB 16 04 0131*       ld (@mode),a
0416D5 ED 43 EC 16 0132*       ld (@x0),bc
       04          
0416DA ED 53 EE 16 0133*       ld (@y0),de
       04          
0416DF 21 EA 16 04 0134*   	ld hl,@cmd
0416E3 01 06 00 00 0135*   	ld bc,@end-@cmd
0416E7 5B DF       0136*   	rst.lil $18
0416E9 C9          0137*   	ret
0416EA 19          0138*   @cmd:   db 25
0416EB 00          0139*   @mode:  db 0
0416EC 00 00       0140*   @x0: 	dw 0
0416EE 00 00       0141*   @y0: 	dw 0
0416F0 00          0142*   @end:   db 0 ; extra byte to soak up deu
0416F1             0143*   
0416F1             0144*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0416F1             0145*   ; &E8-&EF 	232-239 	Bitmap plot §
0416F1             0146*   ; VDU 25, mode, x; y;: PLOT command
0416F1             0147*   ; inputs: bc=x0, de=y0
0416F1             0148*   ; prerequisites: vdu_buff_select
0416F1             0149*   vdu_plot_bmp:
0416F1 ED 43 08 17 0150*       ld (@x0),bc
       04          
0416F6 ED 53 0A 17 0151*       ld (@y0),de
       04          
0416FB 21 06 17 04 0152*   	ld hl,@cmd
0416FF 01 06 00 00 0153*   	ld bc,@end-@cmd
041703 5B DF       0154*   	rst.lil $18
041705 C9          0155*   	ret
041706 19          0156*   @cmd:   db 25
041707 ED          0157*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
041708 00 00       0158*   @x0: 	dw 0x0000
04170A 00 00       0159*   @y0: 	dw 0x0000
04170C 00          0160*   @end:   db 0x00 ; padding
04170D             0161*   
04170D             0162*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04170D             0163*   ; &E8-&EF 	232-239 	Bitmap plot §
04170D             0164*   ; VDU 25, mode, x; y;: PLOT command
04170D             0165*   ; inputs: bc=x0, de=y0
04170D             0166*   ; USING 16.8 FIXED POINT COORDINATES
04170D             0167*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
04170D             0168*   ;   the fractional portiion of the inputs are truncated
04170D             0169*   ;   leaving only the 16-bit integer portion
04170D             0170*   ; prerequisites: vdu_buff_select
04170D             0171*   vdu_plot_bmp168:
04170D             0172*   ; populate in the reverse of normal to keep the
04170D             0173*   ; inputs from stomping on each other
04170D ED 53 2B 17 0174*       ld (@y0-1),de
       04          
041712 ED 43 29 17 0175*       ld (@x0-1),bc
       04          
041717 3E ED       0176*       ld a,plot_bmp+dr_abs_fg ; 0xED
041719 32 29 17 04 0177*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
04171D 21 28 17 04 0178*   	ld hl,@cmd
041721 01 06 00 00 0179*   	ld bc,@end-@cmd
041725 5B DF       0180*   	rst.lil $18
041727 C9          0181*   	ret
041728 19          0182*   @cmd:   db 25
041729 ED          0183*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
04172A 00 00       0184*   @x0: 	dw 0x0000
04172C 00 00       0185*   @y0: 	dw 0x0000
04172E             0186*   @end:  ; no padding required b/c we shifted de right
04172E             0187*   
04172E             0188*   ; draw a filled rectangle
04172E             0189*   vdu_plot_rf:
04172E ED 43 55 17 0190*       ld (@x0),bc
       04          
041733 ED 53 57 17 0191*       ld (@y0),de
       04          
041738 DD 22 5B 17 0192*       ld (@x1),ix
       04          
04173D FD 22 5D 17 0193*       ld (@y1),iy
       04          
041742 3E 19       0194*       ld a,25 ; we have to reload the 2nd plot command
041744 32 59 17 04 0195*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041748 21 53 17 04 0196*   	ld hl,@cmd0
04174C 01 0C 00 00 0197*   	ld bc,@end-@cmd0
041750 5B DF       0198*   	rst.lil $18
041752 C9          0199*       ret
041753 19          0200*   @cmd0:  db 25 ; plot
041754 04          0201*   @arg0:  db plot_sl_both+mv_abs
041755 00 00       0202*   @x0:    dw 0x0000
041757 00 00       0203*   @y0:    dw 0x0000
041759 19          0204*   @cmd1:  db 25 ; plot
04175A 65          0205*   @arg1:  db plot_rf+dr_abs_fg
04175B 00 00       0206*   @x1:    dw 0x0000
04175D 00 00       0207*   @y1:    dw 0x0000
04175F 00          0208*   @end:   db 0x00 ; padding
041760             0209*   
041760             0210*   ; draw a filled circle
041760             0211*   vdu_plot_cf:
041760 ED 43 87 17 0212*       ld (@x0),bc
       04          
041765 ED 53 89 17 0213*       ld (@y0),de
       04          
04176A DD 22 8D 17 0214*       ld (@x1),ix
       04          
04176F FD 22 8F 17 0215*       ld (@y1),iy
       04          
041774 3E 19       0216*       ld a,25 ; we have to reload the 2nd plot command
041776 32 8B 17 04 0217*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04177A 21 85 17 04 0218*   	ld hl,@cmd0
04177E 01 0C 00 00 0219*   	ld bc,@end-@cmd0
041782 5B DF       0220*   	rst.lil $18
041784 C9          0221*       ret
041785 19          0222*   @cmd0:  db 25 ; plot
041786 04          0223*   @arg0:  db plot_sl_both+mv_abs
041787 00 00       0224*   @x0:    dw 0x0000
041789 00 00       0225*   @y0:    dw 0x0000
04178B 19          0226*   @cmd1:  db 25 ; plot
04178C 9D          0227*   @arg1:  db plot_cf+dr_abs_fg
04178D 00 00       0228*   @x1:    dw 0x0000
04178F 00 00       0229*   @y1:    dw 0x0000
041791 00          0230*   @end:   db 0x00 ; padding
041792             0042        include "vdu_sprites.inc"
041792             0001*   ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
041792             0002*   ; the VDP can support up to 256 sprites. They must be defined
041792             0003*   ; contiguously, and so the first sprite is sprite 0.
041792             0004*   ; (In contrast, bitmaps can have any ID from 0 to 65534.)
041792             0005*   ; Once a selection of sprites have been defined, you can activate
041792             0006*   ; them using the VDU 23, 27, 7, n command, where n is the number
041792             0007*   ; of sprites to activate. This will activate the first n sprites,
041792             0008*   ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
041792             0009*   
041792             0010*   ; A single sprite can have multiple "frames", referring to
041792             0011*   ; different bitmaps.
041792             0012*   ; (These bitmaps do not need to be the same size.)
041792             0013*   ; This allows a sprite to include an animation sequence,
041792             0014*   ; which can be stepped through one frame at a time, or picked
041792             0015*   ; in any order.
041792             0016*   
041792             0017*   ; Any format of bitmap can be used as a sprite frame. It should
041792             0018*   ; be noted however that "native" format bitmaps are not
041792             0019*   ; recommended for use as sprite frames, as they cannot get
041792             0020*   ; erased from the screen. (As noted above, the "native" bitmap
041792             0021*   ; format is not really intended for general use.) This is part
041792             0022*   ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
041792             0023*   ; screen are now stored in RGBA2222 format.
041792             0024*   
041792             0025*   ; An "active" sprite can be hidden, so it will stop being drawn,
041792             0026*   ; and then later shown again.
041792             0027*   
041792             0028*   ; Moving sprites around the screen is done by changing the
041792             0029*   ; position of the sprite. This can be done either by setting
041792             0030*   ; the absolute position of the sprite, or by moving the sprite
041792             0031*   ; by a given number of pixels. (Sprites are positioned using
041792             0032*   ; pixel coordinates, and not by the logical OS coordinate system.)
041792             0033*   ; In the current sprite system, sprites will not update their
041792             0034*   ; position on-screen until either another drawing operation is
041792             0035*   ; performed or an explicit VDU 23, 27, 15 command is performed.
041792             0036*   
041792             0037*   ; VDU 23, 27, 4, n: Select sprite n
041792             0038*   ; inputs: a is the 8-bit sprite id
041792             0039*   vdu_sprite_select:
041792 32 A4 17 04 0040*       ld (@sprite),a
041796 21 A1 17 04 0041*       ld hl,@cmd
04179A 01 04 00 00 0042*       ld bc,@end-@cmd
04179E 5B DF       0043*       rst.lil $18
0417A0 C9          0044*       ret
0417A1 17 1B 04    0045*   @cmd:    db 23,27,4
0417A4 00          0046*   @sprite: db 0x00
0417A5             0047*   @end:
0417A5             0048*   
0417A5             0049*   ; VDU 23, 27, 5: Clear frames in current sprite
0417A5             0050*   ; inputs: none
0417A5             0051*   ; prerequisites: vdu_sprite_select
0417A5             0052*   vdu_sprite_clear_frames:
0417A5 21 B0 17 04 0053*       ld hl,@cmd
0417A9 01 03 00 00 0054*       ld bc,@end-@cmd
0417AD 5B DF       0055*       rst.lil $18
0417AF C9          0056*       ret
0417B0 17 1B 05    0057*   @cmd: db 23,27,5
0417B3             0058*   @end:
0417B3             0059*   
0417B3             0060*   ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
0417B3             0061*   ; inputs: a is the 8-bit bitmap number
0417B3             0062*   ; prerequisites: vdu_sprite_select
0417B3             0063*   vdu_sprite_add_bmp:
0417B3 32 C5 17 04 0064*       ld (@bmp),a
0417B7 21 C2 17 04 0065*       ld hl,@cmd
0417BB 01 04 00 00 0066*       ld bc,@end-@cmd
0417BF 5B DF       0067*       rst.lil $18
0417C1 C9          0068*       ret
0417C2 17 1B 06    0069*   @cmd: db 23,27,6
0417C5 00          0070*   @bmp: db 0x00
0417C6             0071*   @end:
0417C6             0072*   
0417C6             0073*   ; VDU 23, 27, 7, n: Activate n sprites
0417C6             0074*   ; inputs: a is the number of sprites to activate
0417C6             0075*   ; prerequisites: each sprite activated must have at least one frame attached to it
0417C6             0076*   vdu_sprite_activate:
0417C6 32 D8 17 04 0077*       ld (@num),a
0417CA 21 D5 17 04 0078*       ld hl,@cmd
0417CE 01 04 00 00 0079*       ld bc,@end-@cmd
0417D2 5B DF       0080*       rst.lil $18
0417D4 C9          0081*       ret
0417D5 17 1B 07    0082*   @cmd: db 23,27,7
0417D8 00          0083*   @num: db 0x00
0417D9             0084*   @end:
0417D9             0085*   
0417D9             0086*   ; VDU 23, 27, 8: Select next frame of current sprite
0417D9             0087*   ; inputs: none
0417D9             0088*   ; prerequisites: vdu_sprite_select
0417D9             0089*   vdu_sprite_next_frame:
0417D9 21 E4 17 04 0090*       ld hl,@cmd
0417DD 01 03 00 00 0091*       ld bc,@end-@cmd
0417E1 5B DF       0092*       rst.lil $18
0417E3 C9          0093*       ret
0417E4 17 1B 08    0094*   @cmd: db 23,27,8
0417E7             0095*   @end:
0417E7             0096*   
0417E7             0097*   ; VDU 23, 27, 9: Select previous frame of current sprite
0417E7             0098*   ; inputs: none
0417E7             0099*   ; prerequisites: vdu_sprite_select
0417E7             0100*   vdu_sprite_prev_frame:
0417E7 21 F2 17 04 0101*       ld hl,@cmd
0417EB 01 03 00 00 0102*       ld bc,@end-@cmd
0417EF 5B DF       0103*       rst.lil $18
0417F1 C9          0104*       ret
0417F2 17 1B 09    0105*   @cmd: db 23,27,9
0417F5             0106*   @end:
0417F5             0107*   
0417F5             0108*   ; VDU 23, 27, 10, n: Select the nth frame of current sprite
0417F5             0109*   ; inputs: a is frame number to select
0417F5             0110*   ; prerequisites: vdu_sprite_select
0417F5             0111*   vdu_sprite_select_frame:
0417F5 32 07 18 04 0112*       ld (@frame),a
0417F9 21 04 18 04 0113*       ld hl,@cmd
0417FD 01 04 00 00 0114*       ld bc,@end-@cmd
041801 5B DF       0115*       rst.lil $18
041803 C9          0116*       ret
041804 17 1B 0A    0117*   @cmd:    db 23,27,10
041807 00          0118*   @frame:  db 0x00
041808             0119*   @end:
041808             0120*   
041808             0121*   ; VDU 23, 27, 11: Show current sprite
041808             0122*   ; inputs: none
041808             0123*   ; prerequisites: vdu_sprite_select
041808             0124*   vdu_sprite_show:
041808 21 13 18 04 0125*       ld hl,@cmd
04180C 01 03 00 00 0126*       ld bc,@end-@cmd
041810 5B DF       0127*       rst.lil $18
041812 C9          0128*       ret
041813 17 1B 0B    0129*   @cmd: db 23,27,11
041816             0130*   @end:
041816             0131*   
041816             0132*   ; VDU 23, 27, 12: Hide current sprite
041816             0133*   ; inputs: none
041816             0134*   ; prerequisites: vdu_sprite_select
041816             0135*   vdu_sprite_hide:
041816 21 21 18 04 0136*       ld hl,@cmd
04181A 01 03 00 00 0137*       ld bc,@end-@cmd
04181E 5B DF       0138*       rst.lil $18
041820 C9          0139*       ret
041821 17 1B 0C    0140*   @cmd: db 23,27,12
041824             0141*   @end:
041824             0142*   
041824             0143*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041824             0144*   ; inputs: bc is x coordinate, de is y coordinate
041824             0145*   ; prerequisites: vdu_sprite_select
041824             0146*   vdu_sprite_move_abs:
041824 ED 43 3C 18 0147*       ld (@xpos),bc
       04          
041829 ED 53 3E 18 0148*       ld (@ypos),de
       04          
04182E 21 39 18 04 0149*       ld hl,@cmd
041832 01 07 00 00 0150*       ld bc,@end-@cmd
041836 5B DF       0151*       rst.lil $18
041838 C9          0152*       ret
041839 17 1B 0D    0153*   @cmd:  db 23,27,13
04183C 00 00       0154*   @xpos: dw 0x0000
04183E 00 00       0155*   @ypos: dw 0x0000
041840 00          0156*   @end:  db 0x00 ; padding
041841             0157*   
041841             0158*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041841             0159*   ; inputs: bc is x coordinate, de is y coordinate
041841             0160*   ; prerequisites: vdu_sprite_select
041841             0161*   vdu_sprite_move_rel:
041841 ED 43 59 18 0162*       ld (@dx),bc
       04          
041846 ED 53 5B 18 0163*       ld (@dy),de
       04          
04184B 21 56 18 04 0164*       ld hl,@cmd
04184F 01 07 00 00 0165*       ld bc,@end-@cmd
041853 5B DF       0166*       rst.lil $18
041855 C9          0167*       ret
041856 17 1B 0E    0168*   @cmd: db 23,27,14
041859 00 00       0169*   @dx:  dw 0x0000
04185B 00 00       0170*   @dy:  dw 0x0000
04185D 00          0171*   @end: db 0x00 ; padding
04185E             0172*   
04185E             0173*   ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04185E             0174*   ; USING 16.8 FIXED POINT COORDINATES
04185E             0175*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
04185E             0176*   ;   the fractional portiion of the inputs are truncated
04185E             0177*   ;   leaving only the 16-bit integer portion
04185E             0178*   ; prerequisites: vdu_sprite_select
04185E             0179*   vdu_sprite_move_abs168:
04185E             0180*   ; offset inputs by the gfx origin
04185E             0181*   ; y coordinate
04185E 21 00 30 00 0182*       ld hl,origin_top*256
041862 19          0183*       add hl,de
041863 22 85 18 04 0184*       ld (@ypos-1),hl
041867             0185*   ; x coordinate
041867 21 00 80 00 0186*       ld hl,origin_left*256
04186B 09          0187*       add hl,bc
04186C 22 83 18 04 0188*       ld (@xpos-1),hl
041870             0189*   ; prepare vdu command
041870 3E 0D       0190*       ld a,13       ; restore the final byte of the command
041872 32 83 18 04 0191*       ld (@cmd+2),a ; string that got stomped on by bcu
041876 21 81 18 04 0192*       ld hl,@cmd
04187A 01 07 00 00 0193*       ld bc,@end-@cmd
04187E 5B DF       0194*       rst.lil $18
041880 C9          0195*       ret
041881 17 1B 0D    0196*   @cmd:  db 23,27,13
041884 00 00       0197*   @xpos: dw 0x0000
041886 00 00       0198*   @ypos: dw 0x0000
041888             0199*   @end:  ; no padding required b/c we shifted de right
041888             0200*   
041888             0201*   ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041888             0202*   ; USING 16.8 FIXED POINT COORDINATES
041888             0203*   ; inputs: ub.c is dx, ud.e is dy
041888             0204*   ;   the fractional portiion of the inputs are truncated
041888             0205*   ;   leaving only the 16-bit integer portion
041888             0206*   ; prerequisites: vdu_sprite_select
041888             0207*   vdu_sprite_move_rel168:
041888             0208*   ; populate in the reverse of normal to keep the
041888             0209*   ; inputs from stomping on each other
041888 ED 53 A7 18 0210*       ld (@dy-1),de
       04          
04188D ED 43 A5 18 0211*       ld (@dx-1),bc
       04          
041892 3E 0E       0212*       ld a,14       ; restore the final byte of the command
041894 32 A5 18 04 0213*       ld (@cmd+2),a ; string that got stomped on by bcu
041898 21 A3 18 04 0214*       ld hl,@cmd
04189C 01 07 00 00 0215*       ld bc,@end-@cmd
0418A0 5B DF       0216*       rst.lil $18
0418A2 C9          0217*       ret
0418A3 17 1B 0E    0218*   @cmd:  db 23,27,14
0418A6 00 00       0219*   @dx: dw 0x0000
0418A8 00 00       0220*   @dy: dw 0x0000
0418AA             0221*   @end:  ; no padding required b/c we shifted de right
0418AA             0222*   
0418AA             0223*   ; VDU 23, 27, 15: Update the sprites in the GPU
0418AA             0224*   ; inputs: none
0418AA             0225*   vdu_sprite_update:
0418AA 21 B5 18 04 0226*       ld hl,@cmd
0418AE 01 03 00 00 0227*       ld bc,@end-@cmd
0418B2 5B DF       0228*       rst.lil $18
0418B4 C9          0229*       ret
0418B5 17 1B 0F    0230*   @cmd: db 23,27,15
0418B8             0231*   @end:
0418B8             0232*   
0418B8             0233*   ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
0418B8             0234*   ; inputs: none
0418B8             0235*   vdu_sprite_bmp_reset:
0418B8 21 C3 18 04 0236*       ld hl,@cmd
0418BC 01 03 00 00 0237*       ld bc,@end-@cmd
0418C0 5B DF       0238*       rst.lil $18
0418C2 C9          0239*       ret
0418C3 17 1B 10    0240*   @cmd: db 23,27,16
0418C6             0241*   @end:
0418C6             0242*   
0418C6             0243*   ; VDU 23, 27, 17: Reset sprites (only) and clear all data
0418C6             0244*   ; inputs: none
0418C6             0245*   vdu_sprite_reset:
0418C6 21 D1 18 04 0246*       ld hl,@cmd
0418CA 01 03 00 00 0247*       ld bc,@end-@cmd
0418CE 5B DF       0248*       rst.lil $18
0418D0 C9          0249*       ret
0418D1 17 1B 11    0250*   @cmd: db 23,27,17
0418D4             0251*   @end:
0418D4             0252*   
0418D4             0253*   ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
0418D4             0254*   ; inputs: a is the GCOL paint mode
0418D4             0255*   ; prerequisites: vdu_sprite_select
0418D4             0256*   vdu_sprite_set_gcol:
0418D4 32 E6 18 04 0257*       ld (@mode),a
0418D8 21 E3 18 04 0258*       ld hl,@cmd
0418DC 01 04 00 00 0259*       ld bc,@end-@cmd
0418E0 5B DF       0260*       rst.lil $18
0418E2 C9          0261*       ret
0418E3 17 1B 12    0262*   @cmd:  db 23,27,18
0418E6 00          0263*   @mode: db 0x00
0418E7             0264*   @end:
0418E7             0265*   
0418E7             0266*   ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
0418E7             0267*   ; inputs: hl=bufferId
0418E7             0268*   ; prerequisites: vdu_sprite_select
0418E7             0269*   vdu_sprite_add_buff:
0418E7 22 F9 18 04 0270*       ld (@bufferId),hl
0418EB 21 F6 18 04 0271*       ld hl,@cmd
0418EF 01 05 00 00 0272*       ld bc,@end-@cmd
0418F3 5B DF       0273*       rst.lil $18
0418F5 C9          0274*       ret
0418F6 17 1B 26    0275*   @cmd:      db 23,27,0x26
0418F9 00 00       0276*   @bufferId: dw 0x0000
0418FB 00          0277*   @end:      db 0x00 ; padding
0418FC             0043    
0418FC             0044    ; APPLICATION INCLUDES
0418FC             0045        include "ascii.inc"
0418FC             0001*   purple_nurples_ascii:
0418FC 20 20 20 20 0002*       db 32,32,32,32,32,32,32,32,95,95,32,32,32,32,95,95,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,95,13,10
       20 20 20 20 
       5F 5F 20 20 
       20 20 5F 5F 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 5F 5F 0D 
       0A          
041921 5F 5F 5F 5F 0003*       db 95,95,95,95,95,32,95,47,32,32,124,95,95,47,32,32,124,95,95,95,95,95,95,32,32,32,32,95,95,95,95,32,124,32,32,124,32,95,95,13,10
       5F 20 5F 2F 
       20 20 7C 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 20 5F 
       5F 5F 5F 20 
       7C 20 20 7C 
       20 5F 5F 0D 
       0A          
04194A 5C 5F 5F 20 0004*       db 92,95,95,32,32,92,32,32,32,95,95,92,32,32,32,95,95,92,95,95,32,32,92,32,95,47,32,95,95,95,92,124,32,32,124,47,32,47,13,10
       20 5C 20 20 
       20 5F 5F 5C 
       20 20 20 5F 
       5F 5C 5F 5F 
       20 20 5C 20 
       5F 2F 20 5F 
       5F 5F 5C 7C 
       20 20 7C 2F 
       20 2F 0D 0A 
041972 20 2F 20 5F 0005*       db 32,47,32,95,95,32,92,124,32,32,124,32,32,124,32,32,124,32,32,47,32,95,95,32,92,32,32,92,95,95,95,124,32,32,32,32,60,13,10
       5F 20 5C 7C 
       20 20 7C 20 
       20 7C 20 20 
       7C 20 20 2F 
       20 5F 5F 20 
       5C 20 20 5C 
       5F 5F 5F 7C 
       20 20 20 20 
       3C 0D 0A    
041999 28 5F 5F 5F 0006*       db 40,95,95,95,95,32,32,47,95,95,124,32,32,124,95,95,124,32,40,95,95,95,95,32,32,47,92,95,95,95,32,32,62,95,95,124,95,32,92,13,10
       5F 20 20 2F 
       5F 5F 7C 20 
       20 7C 5F 5F 
       7C 20 28 5F 
       5F 5F 5F 20 
       20 2F 5C 5F 
       5F 5F 20 20 
       3E 5F 5F 7C 
       5F 20 5C 0D 
       0A          
0419C2 20 20 20 20 0007*       db 32,32,32,32,32,92,47,32,95,95,95,95,95,32,32,32,32,95,95,32,32,46,95,95,47,32,32,32,32,32,92,47,32,32,32,32,32,92,47,13,10
       20 5C 2F 20 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 20 
       20 2E 5F 5F 
       2F 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 5C 2F 0D 
       0A          
0419EB 20 20 5F 5F 0008*       db 32,32,95,95,95,95,95,47,32,95,95,95,95,92,32,95,47,32,32,124,95,124,32,32,124,95,95,32,32,32,95,95,95,95,13,10
       5F 5F 5F 2F 
       20 5F 5F 5F 
       5F 5C 20 5F 
       2F 20 20 7C 
       5F 7C 20 20 
       7C 5F 5F 20 
       20 20 5F 5F 
       5F 5F 0D 0A 
041A0F 20 2F 20 20 0009*       db 32,47,32,32,95,32,92,32,32,32,95,95,92,32,32,92,32,32,32,95,95,92,32,32,124,32,32,92,95,47,32,95,95,32,92,13,10
       5F 20 5C 20 
       20 20 5F 5F 
       5C 20 20 5C 
       20 20 20 5F 
       5F 5C 20 20 
       7C 20 20 5C 
       5F 2F 20 5F 
       5F 20 5C 0D 
       0A          
041A34 28 20 20 3C 0010*       db 40,32,32,60,95,62,32,41,32,32,124,32,32,32,32,32,124,32,32,124,32,124,32,32,32,89,32,32,92,32,32,95,95,95,47,13,10
       5F 3E 20 29 
       20 20 7C 20 
       20 20 20 20 
       7C 20 20 7C 
       20 7C 20 20 
       20 59 20 20 
       5C 20 20 5F 
       5F 5F 2F 0D 
       0A          
041A59 20 5C 5F 5F 0011*       db 32,92,95,95,95,95,47,124,95,95,124,32,32,32,32,32,124,95,95,124,32,124,95,95,95,124,32,32,47,92,95,95,95,32,32,62,13,10
       5F 5F 2F 7C 
       5F 5F 7C 20 
       20 20 20 20 
       7C 5F 5F 7C 
       20 7C 5F 5F 
       5F 7C 20 20 
       2F 5C 5F 5F 
       5F 20 20 3E 
       0D 0A       
041A7F 5F 5F 5F 5F 0012*       db 95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,32,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
041ABD 5C 5F 5F 5F 0013*       db 92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,13,10
       5F 5F 5F 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       0D 0A       
041AFB 20 7C 20 20 0014*       db 32,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       20 20 20 5F 
       5F 5F 2F 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 0D 
       0A          
041B38 20 7C 20 20 0015*       db 32,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       20 20 7C 20 
       20 20 7C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       0D 0A       
041B76 20 7C 5F 5F 0016*       db 32,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 7C 20 
       20 20 7C 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       0D 0A       
041BB4 20 5F 5F 5F 0017*       db 32,95,95,95,95,95,95,95,32,32,32,95,95,95,95,32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,46,95,95,95,95,32,32,32,92,47,95,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 5F 
       5F 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 2E 
       5F 5F 5F 5F 
       20 20 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 0D 0A 
041BFC 20 5C 20 20 0018*       db 32,92,32,32,32,32,32,32,92,32,124,32,32,32,32,124,32,32,32,92,95,95,95,95,95,95,32,32,32,92,95,95,95,95,95,95,32,32,32,92,32,32,32,32,124,32,32,32,32,92,95,32,32,32,95,95,95,95,95,47,47,32,32,32,95,95,95,95,95,47,13,10
       20 20 20 20 
       5C 20 7C 20 
       20 20 20 7C 
       20 20 20 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       20 5C 5F 5F 
       5F 5F 5F 5F 
       20 20 20 5C 
       20 20 20 20 
       7C 20 20 20 
       20 5C 5F 20 
       20 20 5F 5F 
       5F 5F 5F 2F 
       2F 20 20 20 
       5F 5F 5F 5F 
       5F 2F 0D 0A 
041C44 20 2F 20 20 0019*       db 32,47,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,47,124,32,32,32,32,32,32,32,95,47,124,32,32,32,32,32,95,95,95,47,32,32,32,32,124,32,32,32,32,32,124,32,32,32,32,95,95,41,95,32,92,95,95,95,95,95,32,32,92,13,10
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 2F 
       7C 20 20 20 
       20 20 20 20 
       5F 2F 7C 20 
       20 20 20 20 
       5F 5F 5F 2F 
       20 20 20 20 
       7C 20 20 20 
       20 20 7C 20 
       20 20 20 5F 
       5F 29 5F 20 
       5C 5F 5F 5F 
       5F 5F 20 20 
       5C 0D 0A    
041C8B 2F 20 20 20 0020*       db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,124,32,32,47,32,124,32,32,32,32,124,32,32,32,92,124,32,32,32,32,124,32,32,32,124,32,32,32,32,124,95,95,95,32,32,124,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 7C 
       20 20 2F 20 
       7C 20 20 20 
       20 7C 20 20 
       20 5C 7C 20 
       20 20 20 7C 
       20 20 20 7C 
       20 20 20 20 
       7C 5F 5F 5F 
       20 20 7C 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 0D 0A 
041CD3 5C 5F 5F 5F 0021*       db 92,95,95,95,95,124,95,95,32,32,47,95,95,95,95,95,95,47,32,32,124,95,95,95,95,124,95,32,32,47,124,95,95,95,95,124,32,32,32,124,95,95,95,95,95,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5F 
       5F 5F 5F 5F 
       5F 2F 20 20 
       7C 5F 5F 5F 
       5F 7C 5F 20 
       20 2F 7C 5F 
       5F 5F 5F 7C 
       20 20 20 7C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       5C 2F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 0D 0A 
041D1B 20 20 20 20 0022*       db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 5C 
       2F 0D 0A    
041D62 00          0023*       db 0 ; string terminator
041D63             0046        include "collisions.inc"
041D63             0001*   ; ====== COLLISION DETECTION ======
041D63             0002*   ; --- constants ---
041D63             0003*   ; sprite_collisions flags
041D63             0004*   ; collides_with_player: equ %00000001
041D63             0005*   ; collides_with_laser: equ %00000010
041D63             0006*   sprite_alive: equ 6; set when sprite is alive
041D63             0007*   sprite_just_died: equ 7; set when sprite just died
041D63             0008*   collide_top: equ %00001000
041D63             0009*   collide_bottom: equ %00000100
041D63             0010*   collide_left: equ %00000010
041D63             0011*   collide_right: equ %00000001
041D63             0012*   
041D63 00 00 00    0013*   collision_table_pointer: dl 0x000000 ; pointer to the sprite in the group being checked for collision
041D66             0014*   
041D66             0015*   collision_draw_hitboxes:
041D66             0016*   ; draw hitbox for ix collider
041D66 DD E5       0017*       push ix
041D68 FD E5       0018*       push iy
041D6A AF          0019*       xor a ; color mode 0
041D6B 0E 09       0020*       ld c,c_red
041D6D CD E2 12 04 0021*       call vdu_gcol
041D71 01 00 00 00 0022*       ld bc,0
041D75 DD 4E 02    0023*       ld c,(ix+sprite_x+1)
041D78 DD 46 03    0024*       ld b,(ix+sprite_x+2)
041D7B 11 00 00 00 0025*       ld de,0
041D7F DD 5E 05    0026*       ld e,(ix+sprite_y+1)
041D82 DD 56 06    0027*       ld d,(ix+sprite_y+2)
041D85 21 00 00 00 0028*       ld hl,0 ; clear hlu and h
041D89 DD 6E 1E    0029*       ld l,(ix+sprite_dim_x)
041D8C 09          0030*       add hl,bc ; hl = x1
041D8D E5          0031*       push hl ; save x1
041D8E 21 00 00 00 0032*       ld hl,0 ; clear hlu and h
041D92 DD 6E 1F    0033*       ld l,(ix+sprite_dim_y)
041D95 19          0034*       add hl,de ; hl = y1
041D96 DD E1       0035*       pop ix ; ix = x1 (was hl)
041D98 E5          0036*       push hl
041D99 FD E1       0037*       pop iy ; iy = y1
041D9B CD 2E 17 04 0038*       call vdu_plot_rf
041D9F FD E1       0039*       pop iy
041DA1 DD E1       0040*       pop ix
041DA3             0041*   
041DA3             0042*   ; draw hitbox for iy collider
041DA3 DD E5       0043*       push ix
041DA5 FD E5       0044*       push iy
041DA7 AF          0045*       xor a ; color mode 0
041DA8 0E 0A       0046*       ld c,c_green
041DAA CD E2 12 04 0047*       call vdu_gcol
041DAE 01 00 00 00 0048*       ld bc,0
041DB2 FD 4E 02    0049*       ld c,(iy+sprite_x+1)
041DB5 FD 46 03    0050*       ld b,(iy+sprite_x+2)
041DB8 11 00 00 00 0051*       ld de,0
041DBC FD 5E 05    0052*       ld e,(iy+sprite_y+1)
041DBF FD 56 06    0053*       ld d,(iy+sprite_y+2)
041DC2 21 00 00 00 0054*       ld hl,0 ; clear hlu and h
041DC6 FD 6E 1E    0055*       ld l,(iy+sprite_dim_x)
041DC9 09          0056*       add hl,bc ; hl = x1
041DCA E5          0057*       push hl ; save x1
041DCB 21 00 00 00 0058*       ld hl,0 ; clear hlu and h
041DCF FD 6E 1F    0059*       ld l,(iy+sprite_dim_y)
041DD2 19          0060*       add hl,de ; hl = y1
041DD3 DD E1       0061*       pop ix ; ix = x1 (was hl)
041DD5 E5          0062*       push hl
041DD6 FD E1       0063*       pop iy ; iy = y1
041DD8 CD 2E 17 04 0064*       call vdu_plot_rf
041DDC FD E1       0065*       pop iy
041DDE DD E1       0066*       pop ix
041DE0 C9          0067*       ret
041DE1             0068*   ; end collision_draw_hitboxes
041DE1             0069*   
041DE1             0070*   ; check_collision:
041DE1             0071*   ; Detects collision using bounding box method.
041DE1             0072*   ; Inputs:
041DE1             0073*   ;   IX -> Sprite/Tile table for Collider A
041DE1             0074*   ;   IY -> Sprite/Tile table for Collider B
041DE1             0075*   ; Outputs:
041DE1             0076*   ;   a = 0, zero flag set, positive sign, carry reset -> Collision detected
041DE1             0077*   ;   a = -1, zero flag reset, negative sign, carry set -> No collision detected
041DE1             0078*   ; Destroys: HL, DE, AF
041DE1             0079*   check_collision:
041DE1             0080*   check_collision_box:
041DE1             0081*   ; Test 1: (ay + ah) - by < 0
041DE1 21 00 00 00 0082*       ld hl,0                     ; Clear hlu
041DE5 DD 6E 05    0083*       ld l,(ix+sprite_y+1)        ; Load ay integer part low byte
041DE8 DD 66 06    0084*       ld h,(ix+sprite_y+2)        ; Load ay integer part high byte
041DEB 11 00 00 00 0085*       ld de,0                     ; Clear deu and d
041DEF DD 5E 1F    0086*       ld e,(ix+sprite_dim_y)      ; Load ah
041DF2 19          0087*       add hl,de                   ; (ay + ah)
041DF3 FD 5E 05    0088*       ld e,(iy+sprite_y+1)        ; Load by integer part low byte
041DF6 FD 56 06    0089*       ld d,(iy+sprite_y+2)        ; Load by integer part high byte
041DF9 AF          0090*       xor a                       ; Clear carry
041DFA ED 52       0091*       sbc hl,de                   ; (ay + ah) - by
041DFC FA 5F 1E 04 0092*       jp m,@not_collision         ; No collision if negative
041E00             0093*   
041E00             0094*   ; Test 2: ay - (by + bh) < 0
041E00 21 00 00 00 0095*       ld hl,0                     ; Clear hlu
041E04 FD 6E 05    0096*       ld l,(iy+sprite_y+1)        ; Load by integer part low byte
041E07 FD 66 06    0097*       ld h,(iy+sprite_y+2)        ; Load by integer part high byte
041E0A 11 00 00 00 0098*       ld de,0                     ; Clear deu and d
041E0E FD 5E 1F    0099*       ld e,(iy+sprite_dim_y)      ; Load bh
041E11 19          0100*       add hl,de                   ; (by + bh)
041E12 DD 5E 05    0101*       ld e,(ix+sprite_y+1)        ; Load ay integer part low byte
041E15 DD 56 06    0102*       ld d,(ix+sprite_y+2)        ; Load ay integer part high byte
041E18 AF          0103*       xor a                       ; Clear carry
041E19 ED 52       0104*       sbc hl,de                   ; (by + bh) - ay
041E1B FA 5F 1E 04 0105*       jp m,@not_collision         ; No collision if negative
041E1F             0106*   
041E1F             0107*   ; Test 3: (ax + aw) - bx < 0
041E1F 21 00 00 00 0108*       ld hl,0                     ; Clear hlu
041E23 DD 6E 02    0109*       ld l,(ix+sprite_x+1)        ; Load ax integer part low byte
041E26 DD 66 03    0110*       ld h,(ix+sprite_x+2)        ; Load ax integer part high byte
041E29 11 00 00 00 0111*       ld de,0                     ; Clear deu and d
041E2D DD 5E 1E    0112*       ld e,(ix+sprite_dim_x)      ; Load aw
041E30 19          0113*       add hl,de                   ; (ax + aw)
041E31 FD 5E 02    0114*       ld e,(iy+sprite_x+1)        ; Load bx integer part low byte
041E34 FD 56 03    0115*       ld d,(iy+sprite_x+2)        ; Load bx integer part high byte
041E37 AF          0116*       xor a                       ; Clear carry
041E38 ED 52       0117*       sbc hl,de                   ; (ax + aw) - bx
041E3A FA 5F 1E 04 0118*       jp m,@not_collision         ; No collision if negative
041E3E             0119*   
041E3E             0120*   ; Test 4: ax - (bx + bw) < 0
041E3E 21 00 00 00 0121*       ld hl,0                     ; Clear hlu
041E42 FD 6E 02    0122*       ld l,(iy+sprite_x+1)        ; Load bx integer part low byte
041E45 FD 66 03    0123*       ld h,(iy+sprite_x+2)        ; Load bx integer part high byte
041E48 11 00 00 00 0124*       ld de,0                     ; Clear deu and d
041E4C FD 5E 1E    0125*       ld e,(iy+sprite_dim_x)      ; Load bw
041E4F 19          0126*       add hl,de                   ; (bx + bw)
041E50 DD 5E 02    0127*       ld e,(ix+sprite_x+1)        ; Load ax integer part low byte
041E53 DD 56 03    0128*       ld d,(ix+sprite_x+2)        ; Load ax integer part high byte
041E56 AF          0129*       xor a                       ; Clear carry
041E57 ED 52       0130*       sbc hl,de                   ; (bx + bw) - ax
041E59 FA 5F 1E 04 0131*       jp m,@not_collision         ; No collision if negative
041E5D             0132*   
041E5D             0133*   ; If all tests pass, collision is detected
041E5D             0134*   @is_collision:
041E5D AF          0135*       xor a                       ; Clear accumulator and flags (a = 0)
041E5E C9          0136*       ret                         ; Return with zero flag set
041E5F             0137*   
041E5F             0138*   ; No collision detected
041E5F             0139*   @not_collision:
041E5F 3D          0140*       dec a                       ; Set a to -1
041E60 C9          0141*       ret                         ; Return with carry set
041E61             0142*   ; End check_collision_box
041E61             0143*   
041E61             0144*   
041E61             0145*   ; this routine detects collisions between two collidable objects,
041E61             0146*   ; which can include sprites, active tiles, or any screen coordinate
041E61             0147*   ; which has been set up with a sprite table structure that includes dim_x
041E61             0148*   ; representing the radius of the collidable object
041E61             0149*   ; inputs: ix and iy point to the colliding objects' sprite/tile table records
041E61             0150*   ; outputs: uh.l = distance - sum of radii
041E61             0151*   ;          zero flag set if collision detected
041E61             0152*   ;          dx168 and dy168 are also populated with the signed displacements
041E61             0153*   ; destroys: everything except indexes
041E61             0154*   ; check_collision:
041E61             0155*   check_collision_cartesian:
041E61             0156*   ; compute dx = x1-x0
041E61 DD 27 01    0157*       ld hl,(ix+sprite_x)
041E64 FD 17 01    0158*       ld de,(iy+sprite_x)
041E67 AF          0159*       xor a ; clear carry
041E68 ED 52       0160*       sbc hl,de
041E6A 22 7E 07 04 0161*       ld (dx168),hl ; dx to scratch
041E6E             0162*   ; compute dy = y1-y0
041E6E DD 27 04    0163*       ld hl,(ix+sprite_y)
041E71 FD 17 04    0164*       ld de,(iy+sprite_y)
041E74 AF          0165*       xor a ; clear carry
041E75 ED 52       0166*       sbc hl,de ; hl = dy
041E77 22 84 07 04 0167*       ld (dy168),hl ; dy to scratch
041E7B             0168*   ; compute euclidean distance between centers
041E7B CD 8A 07 04 0169*       call distance168 ; uh.l = distance
041E7F             0170*   ; check for overlap by summing half the radii
041E7F DD 7E 1E    0171*       ld a,(ix+sprite_dim_x)
041E82 CB 3F       0172*       srl a ; divide by 2
041E84 FD 5E 1E    0173*       ld e,(iy+sprite_dim_x)
041E87 CB 3B       0174*       srl e ; divide by 2
041E89 83          0175*       add a,e
041E8A 11 00 00 00 0176*       ld de,0 ; clear deu and e
041E8E 57          0177*       ld d,a ; ud.e = sum of radii
041E8F B7          0178*       or a ; clear carry
041E90 ED 52       0179*       sbc hl,de ; uh.l = distance - sum of radii
041E92 C8          0180*       ret z ; return collision
041E93 F0          0181*       ret p ; return no collision
041E94 AF          0182*       xor a ; return collision
041E95 C9          0183*       ret
041E96             0184*   ; end check_collision_cartesian
041E96             0185*   
041E96             0186*   ; check collisions of a sprite or tile against a sprite group
041E96             0187*   ; inputs: iy = pointer to sprite or tile record being checked
041E96             0188*   ;         ix = pointer to sprite group, b = number of records in sprite group
041E96             0189*   check_sprite_group_collisions:
041E96             0190*   @collision_loop:
041E96 DD 22 63 1D 0191*       ld (collision_table_pointer),ix ; update table pointer
       04          
041E9B C5          0192*       push bc ; backup loop counter
041E9C             0193*   ; check sprite_collisions sprite_alive flag to see if sprite is active
041E9C DD CB 1D 76 0194*       bit sprite_alive,(ix+sprite_collisions)
041EA0 CA B6 1E 04 0195*       jp z,@next_record ; not alive so skip to next record
041EA4             0196*   ; sprite alive so check for collision
041EA4 CD E1 1D 04 0197*       call check_collision
041EA8 C2 B6 1E 04 0198*       jp nz,@next_record ; no collision
041EAC             0199*   ; set sprite_just_died flag for each entity and return to caller
041EAC C1          0200*       pop bc ; dummy pop to balance stack
041EAD DD CB 1D FE 0201*       set sprite_just_died,(ix+sprite_collisions)
041EB1 FD CB 1D FE 0202*       set sprite_just_died,(iy+sprite_collisions)
041EB5 C9          0203*       ret
041EB6             0204*   @next_record:
041EB6 C1          0205*       pop bc ; get back our loop counter
041EB7 ED 32 40    0206*       lea ix,ix+table_record_size
041EBA 10 DA       0207*       djnz @collision_loop ; loop until we've checked all the records
041EBC             0208*   ; return to caller
041EBC AF          0209*       xor a
041EBD 3C          0210*       inc a ; resets sign flag and a to non-zero indicating no collision
041EBE C9          0211*       ret
041EBF             0212*   ; end check_sprite_group_collisions
041EBF             0213*   
041EBF             0214*   check_enemy_collision_laser: ; check for collisions with laser
041EBF DD 21 07 89 0215*       ld ix,player_lasers_begin
       04          
041EC4 06 04       0216*       ld b,player_lasers_max
041EC6 CD 96 1E 04 0217*       call check_sprite_group_collisions
041ECA C9          0218*       ret
041ECB             0219*   ; end check_enemy_collision_laser
041ECB             0220*   
041ECB             0221*   check_enemy_collision_player: ; check for collisions with player
041ECB DD 21 07 8A 0222*       ld ix,player_begin
       04          
041ED0 CD E1 1D 04 0223*       call check_collision
041ED4 C0          0224*       ret nz ; no collision so nothing to do
041ED5 DD CB 1D FE 0225*       set sprite_just_died,(ix+sprite_collisions)
041ED9 FD CB 1D FE 0226*       set sprite_just_died,(iy+sprite_collisions)
041EDD AF          0227*       xor a ; signal collision detected
041EDE C9          0228*       ret
041EDF             0229*   ; end check_enemy_collision_player
041EDF             0047        include "enemies.inc"
041EDF ED 1E 04    0001*   enemies_state: dl enemies_alive
041EE2             0002*   
041EE2             0003*   do_enemies:
041EE2 2A DF 1E 04 0004*       ld hl,(enemies_state)
041EE6             0005*       CALL_HL
041EE6 01 EC 1E 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
041EEA C5          0002*M1     push bc ; which constitutes the return address
041EEB E9          0003*M1     jp (hl) ; Jump to the address in HL
041EEC C9          0006*       ret
041EED             0007*   
041EED             0008*   enemies_alive:
041EED FD 21 47 8A 0009*       ld iy,enemy_sprites_begin
       04          
041EF2 06 07       0010*       ld b,table_num_enemy_records
041EF4 CD 65 6F 04 0011*       call move_sprite_group
041EF8 C9          0012*       ret
041EF9             0013*   
041EF9             0014*   enemies_despawning:
041EF9 C9          0015*       ret
041EFA             0016*   
041EFA             0017*   enemies_dead:
041EFA C9          0018*       ret
041EFB             0019*   
041EFB             0020*   enemies_respawning:
041EFB C9          0021*       ret
041EFC             0048        include "enemy_fireball.inc"
041EFC             0001*   speed_fireball: equ 4*256 ; 6 pixels per frame 16.8 fixed
041EFC             0002*   fireballs_max: equ 4
041EFC             0003*   
041EFC             0004*   fireball_defaults:
041EFC 03          0005*       db enemy_projectile     ; type
041EFD 0A 01 00    0006*       dl BUF_FIREBALL_2_000   ; base_bufferId
041F00 4E 1F 04    0007*       dl move_enemy_fireball  ; move_program
041F03 40          0008*       db %01000000            ; collisions bit 6 signals sprite alive
041F04 10          0009*       db 16                   ; dim_x
041F05 10          0010*       db 16                   ; dim_y
041F06 20          0011*       db 32                   ; num_orientations
041F07 02          0012*       db 2                    ; num_animations
041F08 00          0013*       db 0                    ; animation
041F09 08          0014*       db 8                    ; animation_timer
041F0A 00          0015*       db 0                    ; move_timer
041F0B 00          0016*       db 0                    ; move_step
041F0C 00          0017*       db 0                    ; points
041F0D FE          0018*       db -2                   ; shield_damage
041F0E 00          0019*       db 0                    ; frame
041F0F             0020*   
041F0F             0021*   enemy_spawn_fireball:
041F0F 21 FC 1E 04 0022*       ld hl,fireball_defaults
041F13 DD 21 07 8B 0023*       ld ix,fireballs_base
       04          
041F18 06 04       0024*       ld b,fireballs_max
041F1A CD FB 7A 04 0025*       call spawn_sprite_from_tile
041F1E D0          0026*       ret nc ; no carry means no free sprite slots, so we go home
041F1F             0027*   ; other specific initialization
041F1F             0028*   ; ------------------------------------------------
041F1F             0029*   ; copy sprite heading and component velocities from targeting_computer
041F1F 2A 0B 74 04 0030*       ld hl,(Bearing_t)
041F23 11 00 80 00 0031*       ld de,128*256 ; rotate 128 degrees
041F27 19          0032*       add hl,de
041F28 DD 2F 10    0033*       ld (ix+sprite_heading),hl
041F2B 2A 14 74 04 0034*       ld hl,(Vp_x)
041F2F DD 2F 07    0035*       ld (ix+sprite_xvel),hl
041F32 2A 17 74 04 0036*       ld hl,(Vp_y)
041F36 DD 2F 0A    0037*       ld (ix+sprite_yvel),hl
041F39             0038*   ; move projectile one frame's distance so it isn't drawn right over turret
041F39 DD 27 01    0039*       ld hl,(ix+sprite_x)
041F3C DD 17 07    0040*       ld de,(ix+sprite_xvel)
041F3F 19          0041*       add hl,de
041F40 DD 2F 01    0042*       ld (ix+sprite_x),hl
041F43 DD 27 04    0043*       ld hl,(ix+sprite_y)
041F46 DD 17 0A    0044*       ld de,(ix+sprite_yvel)
041F49 19          0045*       add hl,de
041F4A DD 2F 04    0046*       ld (ix+sprite_y),hl
041F4D C9          0047*       ret
041F4E             0048*   ; end enemy_spawn_fireball
041F4E             0049*   
041F4E             0050*   move_enemy_fireball:
041F4E             0051*   ; run the movement program for the fireball enemy
041F4E CD FB 6F 04 0052*       call move_sprite
041F52 3A 39 6E 04 0053*       ld a,(sprite_screen_edge)
041F56 B7          0054*       or a ; a will be non-zero if have scrolled off screen
041F57 C2 7F 6E 04 0055*       jp nz,table_deactivate_sprite
041F5B DD 21 07 8A 0056*       ld ix,player_begin
       04          
041F60 DD CB 1D 76 0057*       bit sprite_alive,(ix+sprite_collisions)
041F64 CA 78 1F 04 0058*       jp z,@animate ; player is dead so don't check for collisions
041F68 CD CB 1E 04 0059*       call check_enemy_collision_player
041F6C C2 78 1F 04 0060*       jp nz,@animate ; no collision so do animation
041F70 CD E4 6D 04 0061*       call update_shields
041F74 C3 24 21 04 0062*       jp spawn_explosion
041F78             0063*   @animate:
041F78             0064*   ; check the animation timer
041F78 FD 35 23    0065*       dec (iy+sprite_animation_timer)
041F7B C0          0066*       ret nz ; not time to animate
041F7C             0067*   ; reset the animation timer and bump animation
041F7C 3E 08       0068*       ld a,8
041F7E FD 77 23    0069*       ld (iy+sprite_animation_timer),a
041F81 FD 7E 22    0070*       ld a,(iy+sprite_animation)
041F84 3C          0071*       inc a
041F85 E6 01       0072*       and %00000001 ; modulo 2
041F87 FD 77 22    0073*       ld (iy+sprite_animation),a
041F8A CD B2 70 04 0074*       call sprite_frame_heading_animation ; a, sprite_frame set to heading-based frame
041F8E CD F5 17 04 0075*       call vdu_sprite_select_frame
041F92 C9          0076*       ret
041F93             0077*   ; end move_enemy_fireball
041F93             0078*   
041F93             0079*   init_enemy_fireballs:
041F93             0080*   ; set pointer to seeker sprite table
041F93 FD 21 07 8B 0081*       ld iy,fireballs_base
       04          
041F98 FD 7E 00    0082*       ld a,(iy+sprite_id) ; sprite id
041F9B 1E 04       0083*       ld e,fireballs_max ; sprite loop counter
041F9D             0084*   ; define seeker sprites
041F9D             0085*   @sprites_loop:
041F9D F5          0086*       push af
041F9E D5          0087*       push de
041F9F CD 92 17 04 0088*       call vdu_sprite_select
041FA3 CD A5 17 04 0089*       call vdu_sprite_clear_frames
041FA7 21 0A 01 00 0090*       ld hl,BUF_FIREBALL_2_000
041FAB 06 80       0091*       ld b,4*32 ; 4 animations * 32 orientations
041FAD             0092*   @frames_loop:
041FAD C5          0093*       push bc
041FAE E5          0094*       push hl
041FAF CD E7 18 04 0095*       call vdu_sprite_add_buff
041FB3 E1          0096*       pop hl
041FB4 23          0097*       inc hl
041FB5 C1          0098*       pop bc
041FB6 10 F5       0099*       djnz @frames_loop
041FB8 D1          0100*       pop de ; sprite loop counter
041FB9 F1          0101*       pop af ; sprite id
041FBA 3C          0102*       inc a
041FBB 1D          0103*       dec e
041FBC C2 9D 1F 04 0104*       jp nz,@sprites_loop
041FC0 C9          0105*       ret
041FC1             0106*   ; end init_enemy_fireballs
041FC1             0049        include "enemy_seeker.inc"
041FC1 00          0001*   seekers_count: db 0
041FC2             0002*   seekers_max: equ 3
041FC2             0003*   speed_seeker: equ 0x000280 ; 2.5 pixels per frame
041FC2             0004*   
041FC2             0005*   seeker_defaults:
041FC2 01          0006*       db enemy_air            ; type
041FC3 4F 01 00    0007*       dl BUF_SEEKER_000       ; base_bufferId
041FC6 79 20 04    0008*       dl en_nav_seek_zag    ; move_program
041FC9 40          0009*       db %01000000            ; collisions bit 6 signals sprite alive
041FCA 10          0010*       db 16                   ; dim_x
041FCB 10          0011*       db 16                   ; dim_y
041FCC 20          0012*       db 32                   ; num_orientations
041FCD 01          0013*       db 1                    ; num_animations
041FCE 00          0014*       db 0                    ; animation
041FCF 00          0015*       db 0                    ; animation_timer
041FD0 01          0016*       db 1                    ; move_timer
041FD1 00          0017*       db 0                    ; move_step
041FD2 0A          0018*       db 10                   ; points
041FD3 FC          0019*       db -4                   ; shield_damage
041FD4 00          0020*       db 0                    ; frame
041FD5             0021*   
041FD5             0022*   enemy_spawn_seeker:
041FD5 21 C2 1F 04 0023*       ld hl,seeker_defaults
041FD9 DD 21 47 8A 0024*       ld ix,seekers_base
       04          
041FDE 06 03       0025*       ld b,seekers_max
041FE0 CD FB 7A 04 0026*       call spawn_sprite_from_tile
041FE4 D0          0027*       ret nc ; no carry means no free sprite slots, so we go home
041FE5             0028*   ; other specific initialization
041FE5 21 80 02 00 0029*       ld hl,speed_seeker
041FE9 DD 2F 0D    0030*       ld (ix+sprite_vel),hl
041FEC C9          0031*       ret
041FED             0032*   ; end enemy_spawn_seeker
041FED             0033*   
041FED             0034*   move_enemy_seeker_orbit:
041FED             0035*   ; compute x coordinate of orbit origin based on sprite id
041FED 3E 05       0036*       ld a,seeker_min_sprite_id
041FEF FD 96 00    0037*       sub (iy+sprite_id)
041FF2 6F          0038*       ld l,a
041FF3 26 55       0039*       ld h,85 ; 1/3 the playing field width
041FF5 ED 6C       0040*       mlt hl
041FF7 3E 40       0041*       ld a,64 ; 1/4 of the playing field width
041FF9 85          0042*       add a,l ; a = x coordinate of orbit origin
041FFA FD 77 25    0043*       ld (iy+sprite_move_step),a ; as good a place as any to store it
041FFD             0044*   ; initialize orbit angle
041FFD AF          0045*       xor a
041FFE FD 77 13    0046*       ld (iy+sprite_orientation),a
042001             0047*   ; ; initialize move timer
042001             0048*   ;     inc a ; set to 1
042001             0049*   ;     ld (iy+sprite_move_timer),a
042001             0050*   ; init done, so update move program
042001 21 08 20 04 0051*       ld hl,@stage1 ; update move program pointer
042005 FD 2F 1A    0052*       ld (iy+sprite_move_program),hl
042008             0053*   ; fall through to @stage1
042008             0054*   @stage1:
042008             0055*   ; ; check whether time to update orbit angle
042008             0056*   ;     dec (iy+sprite_move_timer)
042008             0057*   ;     jp nz,@F ; not time to change so simply movethe sprite on the current heading
042008             0058*   ;     inc (iy+sprite_move_timer) ; reset timer to 1
042008             0059*   ; update the target coordinates based on orbit angle and radius
042008 FD 34 13    0060*       inc (iy+sprite_orientation) ; increment angle
04200B 21 00 00 00 0061*       ld hl,0 ; clear hlu and l
04200F FD 66 13    0062*       ld h,(iy+sprite_orientation) ; uh.l = angle
042012 11 00 80 00 0063*       ld de,128*256 ; ud.e = radius
042016 CD F0 06 04 0064*       call polar_to_cartesian ; u.bc, u.de = x,y offsets
04201A FD 7E 25    0065*       ld a,(iy+sprite_move_step) ; x coordinate of orbit origin
04201D 80          0066*       add a,b ; add x offset
04201E 01 00 00 00 0067*       ld bc,0 ; bcu and c
042022 47          0068*       ld b,a ; ub.c = x
042023 21 00 A8 00 0069*       ld hl,336/2*256
042027 19          0070*       add hl,de
042028 EB          0071*       ex de,hl ; ud.e = y
042029 CD E8 73 04 0072*       call bearing_to_coord ; uh.l = angle to coordinate
04202D FD 2F 10    0073*       ld (iy+sprite_heading),hl ; save angle as heading
042030             0074*   ; compute component velocities, save them in sprite record, and move the sprite
042030 CD 9C 70 04 0075*       call sprite_compute_velocities
042034             0076*   @@:
042034 CD FB 6F 04 0077*       call move_sprite ; move the sprite
042038 C3 3C 20 04 0078*       jp move_enemy_seeker
04203C             0079*   ; end move_enemy_seeker_orbit
04203C             0080*   
04203C             0081*   move_enemy_seeker:
04203C DD 21 07 8A 0082*       ld ix,player_begin
       04          
042041 DD CB 1D 76 0083*       bit sprite_alive,(ix+sprite_collisions)
042045 CA 51 20 04 0084*       jp z,@F ; player is dead so don't check for collisions
042049 CD CB 1E 04 0085*       call check_enemy_collision_player
04204D CA 71 20 04 0086*       jp z,@player
042051             0087*   @@:
042051 CD BF 1E 04 0088*       call check_enemy_collision_laser
042055 CA 69 20 04 0089*       jp z,@laser
042059             0090*   ; change the animation frame to match heading
042059 FD 7E 00    0091*       ld a,(iy+sprite_id)
04205C CD 92 17 04 0092*       call vdu_sprite_select
042060 CD C7 70 04 0093*       call sprite_frame_heading ; a, sprite_frame set to heading-based frame
042064 CD F5 17 04 0094*       call vdu_sprite_select_frame
042068 C9          0095*       ret
042069             0096*   @laser:
042069 CD 7E 6D 04 0097*       call update_score
04206D C3 24 21 04 0098*       jp spawn_explosion
042071             0099*   @player:
042071 CD E4 6D 04 0100*       call update_shields
042075 C3 24 21 04 0101*       jp spawn_explosion
042079             0102*   ; end move_enemy_seeker
042079             0103*   
042079             0104*   ; contains the logic for how to move the enemy
042079             0105*   ; and then does the moving
042079             0106*   ; inputs: a fully-populated active sprite table
042079             0107*   ;         player position variables
042079             0108*   ; destroys: everything except index registers
042079             0109*   ; outputs: moving enemies
042079             0110*   en_nav_seek_zag:
042079             0111*   ; set velocity and orientation by player's relative location
042079             0112*   ; move enemies y-axis
042079             0113*   ; where is player relative to us?
042079 CD 96 73 04 0114*       call orientation_to_player ; uh.l angle to player, ub.c, ud.e = dx, dy
04207D             0115*   ; is player above or below us?
04207D ED 53 37 03 0116*       ld (ude),de ; dy
       04          
042082 3A 39 03 04 0117*       ld a,(ude+2) ; deu
042086 17          0118*       rla ; shift sign bit into carry
042087 D2 AF 20 04 0119*       jp nc,@zig_zag ; player is below,evade
04208B             0120*   ; player is even or above,so home in on current heading
04208B FD 2F 10    0121*       ld (iy+sprite_heading),hl ; save sprite heading
04208E             0122*   ; fall through to @compute_velocities
04208E             0123*   @compute_velocities:
04208E CD 9C 70 04 0124*       call sprite_compute_velocities
042092 CD FB 6F 04 0125*       call move_sprite ; move the sprite
042096 B7          0126*       or a ; a will be non-zero if have collided with screen edge
042097 C2 BA 20 04 0127*       jp nz,@zag_switch ; switch direction
04209B C3 3C 20 04 0128*       jp move_enemy_seeker ; didn't hit an edge so check collisions and move sprite
04209F             0129*   @zig_zag_start:
04209F FD 2A 36 6E 0130*       ld iy,(table_pointer)
       04          
0420A4 CD 14 05 04 0131*       call rand_8
0420A8 E6 3F       0132*       and %00111111 ; limit it to 64
0420AA CB DF       0133*       set 3,a ; make sure it's at least 8
0420AC FD 77 24    0134*       ld (iy+sprite_move_timer),a ; store it
0420AF             0135*       ; fall through to @zig_zag
0420AF             0136*   @zig_zag:
0420AF FD 7E 24    0137*       ld a,(iy+sprite_move_timer)
0420B2 3D          0138*       dec a
0420B3 FD 77 24    0139*       ld (iy+sprite_move_timer),a
0420B6 C2 DC 20 04 0140*       jp nz,@zig_zag_no_switch
0420BA             0141*   @zag_switch:
0420BA             0142*       ; otherwise flip direction and restart timer
0420BA FD 7E 25    0143*       ld a,(iy+sprite_move_step)
0420BD EE 01       0144*       xor %1 ; flips bit zero
0420BF FD 77 25    0145*       ld (iy+sprite_move_step),a ; store it
0420C2 C2 D1 20 04 0146*       jp nz,@F ; zag right
0420C6             0147*   ;otherwise zag left
0420C6 21 00 A0 00 0148*       ld hl,160*256; southwest heading
0420CA FD 2F 10    0149*       ld (iy+sprite_heading),hl ; save sprite heading
0420CD C3 9F 20 04 0150*       jp @zig_zag_start
0420D1             0151*   @@: ; zag right
0420D1 21 00 60 00 0152*       ld hl,96*256; southeast heading
0420D5 FD 2F 10    0153*       ld (iy+sprite_heading),hl ; save sprite heading
0420D8 C3 9F 20 04 0154*       jp @zig_zag_start
0420DC             0155*   @zig_zag_no_switch:
0420DC             0156*       ; ld a,(sprite_orientation)
0420DC FD 27 10    0157*       ld hl,(iy+sprite_heading)
0420DF C3 8E 20 04 0158*       jp @compute_velocities
0420E3             0159*   ; end en_nav_seek_zag
0420E3             0160*   
0420E3             0161*   
0420E3             0162*   init_enemy_seekers:
0420E3             0163*   ; set pointer to seeker sprite table
0420E3 FD 21 47 8A 0164*       ld iy,seekers_base
       04          
0420E8 FD 7E 00    0165*       ld a,(iy+sprite_id) ; sprite id
0420EB 1E 03       0166*       ld e,seekers_max ; sprite loop counter
0420ED             0167*   ; define seeker sprites
0420ED             0168*   @sprites_loop:
0420ED F5          0169*       push af
0420EE D5          0170*       push de
0420EF CD 92 17 04 0171*   	call vdu_sprite_select
0420F3 CD A5 17 04 0172*   	call vdu_sprite_clear_frames
0420F7 21 4F 01 00 0173*   	ld hl,BUF_SEEKER_000
0420FB 06 20       0174*   	ld b,32 ; 32 bitmaps for seeker
0420FD             0175*   @frames_loop:
0420FD C5          0176*   	push bc
0420FE E5          0177*   	push hl
0420FF CD E7 18 04 0178*   	call vdu_sprite_add_buff
042103 E1          0179*   	pop hl
042104 23          0180*   	inc hl
042105 C1          0181*   	pop bc
042106 10 F5       0182*   	djnz @frames_loop
042108 D1          0183*       pop de ; sprite loop counter
042109 F1          0184*       pop af ; sprite id
04210A 3C          0185*       inc a
04210B 1D          0186*       dec e
04210C C2 ED 20 04 0187*       jp nz,@sprites_loop
042110 C9          0188*       ret
042111             0189*   ; end init_enemy_seekers
042111             0050        include "explosion.inc"
042111             0001*   explosions_max: equ 8
042111             0002*   explosion_defaults:
042111 04          0003*       db explosion            ; type
042112 05 01 00    0004*       dl BUF_EXPLOSION_A	    ; base_bufferId
042115 9A 21 04    0005*       dl move_explosion	    ; move_program
042118 40          0006*       db %01000000            ; collisions bit 6 signals sprite alive
042119 07          0007*       db 7	                ; dim_x
04211A 07          0008*       db 7                    ; dim_y
04211B 01          0009*       db 1                    ; num_orientations
04211C 05          0010*       db 5                    ; num_animations
04211D 05          0011*       db 5	                ; animation
04211E 08          0012*       db 8	                ; animation_timer
04211F 00          0013*       db 0	                ; move_timer
042120 00          0014*       db 0	                ; move_step
042121 00          0015*       db 0	                ; points
042122 00          0016*       db 0	                ; shield_damage
042123 00          0017*       db 0                    ; frame
042124             0018*   
042124             0019*   spawn_explosion:
042124 21 11 21 04 0020*       ld hl,explosion_defaults
042128 DD 21 07 8C 0021*       ld ix,explosions_base
       04          
04212D 06 08       0022*       ld b,explosions_max
04212F CD 33 6F 04 0023*       call spawn_sprite_from_sprite
042133 D2 7F 6E 04 0024*       jp nc,table_deactivate_sprite ; no carry means no free sprite slots, so we deactivate parent sprite and go home
042137             0025*   ; other specific initialization
042137 21 00 00 00 0026*       ld hl,0
04213B DD 2F 07    0027*       ld (ix+sprite_xvel),hl
04213E 21 00 01 00 0028*       ld hl,1*256
042142 DD 2F 0A    0029*       ld (ix+sprite_yvel),hl
042145             0030*   ; deactivate parent sprite
042145 C3 7F 6E 04 0031*       jp table_deactivate_sprite
042149             0032*   ; end spawn_explosion
042149             0033*   
042149             0034*   spawn_explosion_player:
042149 FD 21 07 8A 0035*       ld iy,player_begin
       04          
04214E FD 22 36 6E 0036*       ld (table_pointer),iy
       04          
042153 21 11 21 04 0037*       ld hl,explosion_defaults
042157 DD 21 07 8C 0038*       ld ix,explosions_base
       04          
04215C 06 08       0039*       ld b,explosions_max
04215E CD 33 6F 04 0040*       call spawn_sprite_from_sprite
042162 D2 7F 6E 04 0041*       jp nc,table_deactivate_sprite ; no carry means no free sprite slots, so we deactivate parent sprite and go home
042166             0042*   ; other specific initialization
042166 21 00 00 00 0043*       ld hl,0
04216A DD 2F 07    0044*       ld (ix+sprite_xvel),hl
04216D 21 00 01 00 0045*       ld hl,1*256
042171 DD 2F 0A    0046*       ld (ix+sprite_yvel),hl
042174 C9          0047*       ret
042175             0048*   ; end spawn_explosion_player
042175             0049*   
042175             0050*   tile_spawn_explosion:
042175 21 11 21 04 0051*       ld hl,explosion_defaults
042179 DD 21 07 8C 0052*       ld ix,explosions_base
       04          
04217E 06 08       0053*       ld b,explosions_max
042180 CD FB 7A 04 0054*       call spawn_sprite_from_tile
042184 D2 39 78 04 0055*       jp nc,table_deactivate_tile ; no carry means no free sprite slots, so we deactivate parent tile and go home
042188             0056*   ; other specific initialization
042188 21 00 00 00 0057*       ld hl,0
04218C DD 2F 07    0058*       ld (ix+sprite_xvel),hl
04218F 21 00 01 00 0059*       ld hl,1*256
042193 DD 2F 0A    0060*       ld (ix+sprite_yvel),hl
042196             0061*   ; deactivate parent sprite
042196 C3 39 78 04 0062*       jp table_deactivate_tile
04219A             0063*   ; end tile_spawn_explosion
04219A             0064*   
04219A             0065*   move_explosion:
04219A             0066*   ; run the movement program for the explosion
04219A CD FB 6F 04 0067*       call move_sprite
04219E B7          0068*       or a ; a will be non-zero if have scrolled off screen
04219F C2 7F 6E 04 0069*       jp nz,table_deactivate_sprite
0421A3             0070*   ; do the animations
0421A3 FD 35 23    0071*       dec (iy+sprite_animation_timer)
0421A6 C0          0072*       ret nz ; not time to bump animation frame
0421A7 FD 34 28    0073*       inc (iy+sprite_frame)
0421AA FD 35 22    0074*       dec (iy+sprite_animation)
0421AD CA 7F 6E 04 0075*       jp z,table_deactivate_sprite ; reached the end of the animations
0421B1 3E 08       0076*       ld a,8 ; reset animation timer
0421B3 FD 77 23    0077*       ld (iy+sprite_animation_timer),a
0421B6 C9          0078*       ret
0421B7             0079*   ; end move_explosion
0421B7             0080*   
0421B7             0081*   move_explosions:
0421B7             0082*   ; initialize pointers and loop counter
0421B7 FD 21 07 8C 0083*       ld iy,explosions_base ; set iy to first record in table
       04          
0421BC 06 08       0084*       ld b,explosions_max ; loop counter
0421BE CD 65 6F 04 0085*       call move_sprite_group
0421C2 C9          0086*       ret
0421C3             0087*   ; end move_explosions
0421C3             0088*   
0421C3             0089*   init_explosions:
0421C3             0090*   ; set pointer to explosion sprite table
0421C3 FD 21 07 8C 0091*       ld iy,explosions_base
       04          
0421C8 FD 7E 00    0092*       ld a,(iy+sprite_id) ; sprite id
0421CB 1E 08       0093*       ld e,explosions_max ; sprite loop counter
0421CD             0094*   ; define explosion sprites
0421CD             0095*   @sprites_loop:
0421CD F5          0096*       push af
0421CE D5          0097*       push de
0421CF CD 92 17 04 0098*   	call vdu_sprite_select
0421D3 CD A5 17 04 0099*   	call vdu_sprite_clear_frames
0421D7 21 05 01 00 0100*   	ld hl,BUF_EXPLOSION_A
0421DB 06 05       0101*   	ld b,5 ; 5 bitmaps for explosion
0421DD             0102*   @frames_loop:
0421DD C5          0103*   	push bc
0421DE E5          0104*   	push hl
0421DF CD E7 18 04 0105*   	call vdu_sprite_add_buff
0421E3 E1          0106*   	pop hl
0421E4 23          0107*   	inc hl
0421E5 C1          0108*   	pop bc
0421E6 10 F5       0109*   	djnz @frames_loop
0421E8 D1          0110*       pop de ; sprite loop counter
0421E9 F1          0111*       pop af ; sprite id
0421EA 3C          0112*       inc a
0421EB 1D          0113*       dec e
0421EC C2 CD 21 04 0114*       jp nz,@sprites_loop
0421F0 C9          0115*       ret
0421F1             0116*   ; end init_explosions
0421F1             0051        include "fonts_list.inc"
0421F1             0001*   ; Generated by asm_config_editor.py
0421F1             0002*   font_list_record_size: equ 12
0421F1             0003*   font_list_width: equ 0
0421F1             0004*   font_list_height: equ 3
0421F1             0005*   font_list_bufferId: equ 6
0421F1             0006*   font_list_filename: equ 9
0421F1             0007*   
0421F1             0008*   num_fonts: equ 13
0421F1             0009*   
0421F1             0010*   ; Index list:
0421F1             0011*   amiga_forever_8x8: equ 64000
0421F1             0012*   computer_pixel_7_8x12: equ 64001
0421F1             0013*   computer_pixel_7_8x16: equ 64002
0421F1             0014*   dopecre_8x8: equ 64003
0421F1             0015*   gamer_2_8x8: equ 64004
0421F1             0016*   Lat15_VGA8_8x8: equ 64005
0421F1             0017*   Lat2_VGA8_8x8: equ 64006
0421F1             0018*   Lat38_VGA8_8x8: equ 64007
0421F1             0019*   Lat7_VGA8_8x8: equ 64008
0421F1             0020*   planetary_contact_8x8: equ 64009
0421F1             0021*   Squarewave_Bold_8x12: equ 64010
0421F1             0022*   super_mario_bros_2_8x8: equ 64011
0421F1             0023*   wendy_neue_6x6: equ 64012
0421F1             0024*   
0421F1             0025*   font_list: ; width; height; bufferId; filename;:
0421F1 08 00 00 08 0026*   	dl 8, 8, 64000, fn_amiga_forever_8x8
       00 00 00 FA 
       00 8D 22 04 
0421FD 08 00 00 0C 0027*   	dl 8, 12, 64001, fn_computer_pixel_7_8x12
       00 00 01 FA 
       00 AF 22 04 
042209 08 00 00 10 0028*   	dl 8, 16, 64002, fn_computer_pixel_7_8x16
       00 00 02 FA 
       00 D5 22 04 
042215 08 00 00 08 0029*   	dl 8, 8, 64003, fn_dopecre_8x8
       00 00 03 FA 
       00 FB 22 04 
042221 08 00 00 08 0030*   	dl 8, 8, 64004, fn_gamer_2_8x8
       00 00 04 FA 
       00 17 23 04 
04222D 08 00 00 08 0031*   	dl 8, 8, 64005, fn_Lat15_VGA8_8x8
       00 00 05 FA 
       00 33 23 04 
042239 08 00 00 08 0032*   	dl 8, 8, 64006, fn_Lat2_VGA8_8x8
       00 00 06 FA 
       00 52 23 04 
042245 08 00 00 08 0033*   	dl 8, 8, 64007, fn_Lat38_VGA8_8x8
       00 00 07 FA 
       00 70 23 04 
042251 08 00 00 08 0034*   	dl 8, 8, 64008, fn_Lat7_VGA8_8x8
       00 00 08 FA 
       00 8F 23 04 
04225D 08 00 00 08 0035*   	dl 8, 8, 64009, fn_planetary_contact_8x8
       00 00 09 FA 
       00 AD 23 04 
042269 08 00 00 0C 0036*   	dl 8, 12, 64010, fn_Squarewave_Bold_8x12
       00 00 0A FA 
       00 D3 23 04 
042275 08 00 00 08 0037*   	dl 8, 8, 64011, fn_super_mario_bros_2_8x8
       00 00 0B FA 
       00 F8 23 04 
042281 06 00 00 06 0038*   	dl 6, 6, 64012, fn_wendy_neue_6x6
       00 00 0C FA 
       00 1F 24 04 
04228D             0039*   
04228D             0040*   ; files_list: ; filename:
04228D 2F 6D 6F 73 0041*   fn_amiga_forever_8x8: db "/mos/fonts/amiga_forever_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 61 
       6D 69 67 61 
       5F 66 6F 72 
       65 76 65 72 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
0422AF 2F 6D 6F 73 0042*   fn_computer_pixel_7_8x12: db "/mos/fonts/computer_pixel_7_8x12.font",0
       2F 66 6F 6E 
       74 73 2F 63 
       6F 6D 70 75 
       74 65 72 5F 
       70 69 78 65 
       6C 5F 37 5F 
       38 78 31 32 
       2E 66 6F 6E 
       74 00       
0422D5 2F 6D 6F 73 0043*   fn_computer_pixel_7_8x16: db "/mos/fonts/computer_pixel_7_8x16.font",0
       2F 66 6F 6E 
       74 73 2F 63 
       6F 6D 70 75 
       74 65 72 5F 
       70 69 78 65 
       6C 5F 37 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
0422FB 2F 6D 6F 73 0044*   fn_dopecre_8x8: db "/mos/fonts/dopecre_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 64 
       6F 70 65 63 
       72 65 5F 38 
       78 38 2E 66 
       6F 6E 74 00 
042317 2F 6D 6F 73 0045*   fn_gamer_2_8x8: db "/mos/fonts/gamer_2_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 67 
       61 6D 65 72 
       5F 32 5F 38 
       78 38 2E 66 
       6F 6E 74 00 
042333 2F 6D 6F 73 0046*   fn_Lat15_VGA8_8x8: db "/mos/fonts/Lat15-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 31 35 
       2D 56 47 41 
       38 5F 38 78 
       38 2E 66 6F 
       6E 74 00    
042352 2F 6D 6F 73 0047*   fn_Lat2_VGA8_8x8: db "/mos/fonts/Lat2-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 32 2D 
       56 47 41 38 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
042370 2F 6D 6F 73 0048*   fn_Lat38_VGA8_8x8: db "/mos/fonts/Lat38-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 33 38 
       2D 56 47 41 
       38 5F 38 78 
       38 2E 66 6F 
       6E 74 00    
04238F 2F 6D 6F 73 0049*   fn_Lat7_VGA8_8x8: db "/mos/fonts/Lat7-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 37 2D 
       56 47 41 38 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
0423AD 2F 6D 6F 73 0050*   fn_planetary_contact_8x8: db "/mos/fonts/planetary_contact_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 70 
       6C 61 6E 65 
       74 61 72 79 
       5F 63 6F 6E 
       74 61 63 74 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
0423D3 2F 6D 6F 73 0051*   fn_Squarewave_Bold_8x12: db "/mos/fonts/Squarewave_Bold_8x12.font",0
       2F 66 6F 6E 
       74 73 2F 53 
       71 75 61 72 
       65 77 61 76 
       65 5F 42 6F 
       6C 64 5F 38 
       78 31 32 2E 
       66 6F 6E 74 
       00          
0423F8 2F 6D 6F 73 0052*   fn_super_mario_bros_2_8x8: db "/mos/fonts/super_mario_bros_2_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 73 
       75 70 65 72 
       5F 6D 61 72 
       69 6F 5F 62 
       72 6F 73 5F 
       32 5F 38 78 
       38 2E 66 6F 
       6E 74 00    
04241F 2F 6D 6F 73 0053*   fn_wendy_neue_6x6: db "/mos/fonts/wendy_neue_6x6.font",0
       2F 66 6F 6E 
       74 73 2F 77 
       65 6E 64 79 
       5F 6E 65 75 
       65 5F 36 78 
       36 2E 66 6F 
       6E 74 00    
04243E             0052        include "images_bg.inc"
04243E             0001*   ; Generated by make_images.py
04243E             0002*   
04243E             0003*   bg_num_images: equ 4
04243E             0004*   
04243E             0005*   ; buffer_ids:
04243E             0006*   BUF_BG_STARS_0: equ 1024
04243E             0007*   BUF_BG_STARS_3: equ 1025
04243E             0008*   BUF_BG_STARS_4: equ 1026
04243E             0009*   BUF_BG_STARS_6: equ 1027
04243E             0010*   
04243E             0011*   bg_image_list: ; type; width; height; size; filename; bufferId:
04243E 01 00 00 00 0012*   	dl 1, 256, 256, 65536, fn_bg_stars_0, 1024
       01 00 00 01 
       00 00 00 01 
       86 24 04 00 
       04 00       
042450 01 00 00 00 0013*   	dl 1, 256, 256, 65536, fn_bg_stars_3, 1025
       01 00 00 01 
       00 00 00 01 
       9A 24 04 01 
       04 00       
042462 01 00 00 00 0014*   	dl 1, 256, 256, 65536, fn_bg_stars_4, 1026
       01 00 00 01 
       00 00 00 01 
       AE 24 04 02 
       04 00       
042474 01 00 00 00 0015*   	dl 1, 256, 256, 65536, fn_bg_stars_6, 1027
       01 00 00 01 
       00 00 00 01 
       C2 24 04 03 
       04 00       
042486             0016*   
042486             0017*   ; files_list: ; filename:
042486 62 67 2F 62 0018*   fn_bg_stars_0: db "bg/bg_stars_0.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       30 2E 72 67 
       62 61 32 00 
04249A 62 67 2F 62 0019*   fn_bg_stars_3: db "bg/bg_stars_3.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       33 2E 72 67 
       62 61 32 00 
0424AE 62 67 2F 62 0020*   fn_bg_stars_4: db "bg/bg_stars_4.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       34 2E 72 67 
       62 61 32 00 
0424C2 62 67 2F 62 0021*   fn_bg_stars_6: db "bg/bg_stars_6.rgba2",0
       67 5F 73 74 
       61 72 73 5F 
       36 2E 72 67 
       62 61 32 00 
0424D6             0053        include "images_tiles_dg.inc"
0424D6             0001*   ; Generated by tiles_dg.py
0424D6             0002*   
0424D6             0003*   tiles_dg_num_images: equ 187
0424D6             0004*   
0424D6             0005*   ; bufferIds:
0424D6             0006*   
0424D6             0007*   
0424D6             0008*   tiles_dg_image_list: ; type; width; height; size; filename; bufferId:
0424D6 01 00 00 10 0009*   	dl 1, 16, 16, 256, fn_dg_000, 512
       00 00 10 00 
       00 00 01 00 
       FC 31 04 00 
       02 00       
0424E8 01 00 00 10 0010*   	dl 1, 16, 16, 256, fn_dg_001, 513
       00 00 10 00 
       00 00 01 00 
       11 32 04 01 
       02 00       
0424FA 01 00 00 10 0011*   	dl 1, 16, 16, 256, fn_dg_002, 514
       00 00 10 00 
       00 00 01 00 
       26 32 04 02 
       02 00       
04250C 01 00 00 10 0012*   	dl 1, 16, 16, 256, fn_dg_003, 515
       00 00 10 00 
       00 00 01 00 
       3B 32 04 03 
       02 00       
04251E 01 00 00 10 0013*   	dl 1, 16, 16, 256, fn_dg_004, 516
       00 00 10 00 
       00 00 01 00 
       50 32 04 04 
       02 00       
042530 01 00 00 10 0014*   	dl 1, 16, 16, 256, fn_dg_005, 517
       00 00 10 00 
       00 00 01 00 
       65 32 04 05 
       02 00       
042542 01 00 00 10 0015*   	dl 1, 16, 16, 256, fn_dg_006, 518
       00 00 10 00 
       00 00 01 00 
       7A 32 04 06 
       02 00       
042554 01 00 00 10 0016*   	dl 1, 16, 16, 256, fn_dg_007, 519
       00 00 10 00 
       00 00 01 00 
       8F 32 04 07 
       02 00       
042566 01 00 00 10 0017*   	dl 1, 16, 16, 256, fn_dg_008, 520
       00 00 10 00 
       00 00 01 00 
       A4 32 04 08 
       02 00       
042578 01 00 00 10 0018*   	dl 1, 16, 16, 256, fn_dg_009, 521
       00 00 10 00 
       00 00 01 00 
       B9 32 04 09 
       02 00       
04258A 01 00 00 10 0019*   	dl 1, 16, 16, 256, fn_dg_010, 522
       00 00 10 00 
       00 00 01 00 
       CE 32 04 0A 
       02 00       
04259C 01 00 00 10 0020*   	dl 1, 16, 16, 256, fn_dg_011, 523
       00 00 10 00 
       00 00 01 00 
       E3 32 04 0B 
       02 00       
0425AE 01 00 00 10 0021*   	dl 1, 16, 16, 256, fn_dg_016, 528
       00 00 10 00 
       00 00 01 00 
       F8 32 04 10 
       02 00       
0425C0 01 00 00 10 0022*   	dl 1, 16, 16, 256, fn_dg_033, 545
       00 00 10 00 
       00 00 01 00 
       0D 33 04 21 
       02 00       
0425D2 01 00 00 10 0023*   	dl 1, 16, 16, 256, fn_dg_034, 546
       00 00 10 00 
       00 00 01 00 
       22 33 04 22 
       02 00       
0425E4 01 00 00 10 0024*   	dl 1, 16, 16, 256, fn_dg_035, 547
       00 00 10 00 
       00 00 01 00 
       37 33 04 23 
       02 00       
0425F6 01 00 00 10 0025*   	dl 1, 16, 16, 256, fn_dg_036, 548
       00 00 10 00 
       00 00 01 00 
       4C 33 04 24 
       02 00       
042608 01 00 00 10 0026*   	dl 1, 16, 16, 256, fn_dg_037, 549
       00 00 10 00 
       00 00 01 00 
       61 33 04 25 
       02 00       
04261A 01 00 00 10 0027*   	dl 1, 16, 16, 256, fn_dg_038, 550
       00 00 10 00 
       00 00 01 00 
       76 33 04 26 
       02 00       
04262C 01 00 00 10 0028*   	dl 1, 16, 16, 256, fn_dg_039, 551
       00 00 10 00 
       00 00 01 00 
       8B 33 04 27 
       02 00       
04263E 01 00 00 10 0029*   	dl 1, 16, 16, 256, fn_dg_040, 552
       00 00 10 00 
       00 00 01 00 
       A0 33 04 28 
       02 00       
042650 01 00 00 10 0030*   	dl 1, 16, 16, 256, fn_dg_045, 557
       00 00 10 00 
       00 00 01 00 
       B5 33 04 2D 
       02 00       
042662 01 00 00 10 0031*   	dl 1, 16, 16, 256, fn_dg_046, 558
       00 00 10 00 
       00 00 01 00 
       CA 33 04 2E 
       02 00       
042674 01 00 00 10 0032*   	dl 1, 16, 16, 256, fn_dg_047, 559
       00 00 10 00 
       00 00 01 00 
       DF 33 04 2F 
       02 00       
042686 01 00 00 10 0033*   	dl 1, 16, 16, 256, fn_dg_048, 560
       00 00 10 00 
       00 00 01 00 
       F4 33 04 30 
       02 00       
042698 01 00 00 10 0034*   	dl 1, 16, 16, 256, fn_dg_049, 561
       00 00 10 00 
       00 00 01 00 
       09 34 04 31 
       02 00       
0426AA 01 00 00 10 0035*   	dl 1, 16, 16, 256, fn_dg_050, 562
       00 00 10 00 
       00 00 01 00 
       1E 34 04 32 
       02 00       
0426BC 01 00 00 10 0036*   	dl 1, 16, 16, 256, fn_dg_051, 563
       00 00 10 00 
       00 00 01 00 
       33 34 04 33 
       02 00       
0426CE 01 00 00 10 0037*   	dl 1, 16, 16, 256, fn_dg_052, 564
       00 00 10 00 
       00 00 01 00 
       48 34 04 34 
       02 00       
0426E0 01 00 00 10 0038*   	dl 1, 16, 16, 256, fn_dg_053, 565
       00 00 10 00 
       00 00 01 00 
       5D 34 04 35 
       02 00       
0426F2 01 00 00 10 0039*   	dl 1, 16, 16, 256, fn_dg_054, 566
       00 00 10 00 
       00 00 01 00 
       72 34 04 36 
       02 00       
042704 01 00 00 10 0040*   	dl 1, 16, 16, 256, fn_dg_055, 567
       00 00 10 00 
       00 00 01 00 
       87 34 04 37 
       02 00       
042716 01 00 00 10 0041*   	dl 1, 16, 16, 256, fn_dg_056, 568
       00 00 10 00 
       00 00 01 00 
       9C 34 04 38 
       02 00       
042728 01 00 00 10 0042*   	dl 1, 16, 16, 256, fn_dg_057, 569
       00 00 10 00 
       00 00 01 00 
       B1 34 04 39 
       02 00       
04273A 01 00 00 10 0043*   	dl 1, 16, 16, 256, fn_dg_058, 570
       00 00 10 00 
       00 00 01 00 
       C6 34 04 3A 
       02 00       
04274C 01 00 00 10 0044*   	dl 1, 16, 16, 256, fn_dg_059, 571
       00 00 10 00 
       00 00 01 00 
       DB 34 04 3B 
       02 00       
04275E 01 00 00 10 0045*   	dl 1, 16, 16, 256, fn_dg_061, 573
       00 00 10 00 
       00 00 01 00 
       F0 34 04 3D 
       02 00       
042770 01 00 00 10 0046*   	dl 1, 16, 16, 256, fn_dg_062, 574
       00 00 10 00 
       00 00 01 00 
       05 35 04 3E 
       02 00       
042782 01 00 00 10 0047*   	dl 1, 16, 16, 256, fn_dg_063, 575
       00 00 10 00 
       00 00 01 00 
       1A 35 04 3F 
       02 00       
042794 01 00 00 10 0048*   	dl 1, 16, 16, 256, fn_dg_064, 576
       00 00 10 00 
       00 00 01 00 
       2F 35 04 40 
       02 00       
0427A6 01 00 00 10 0049*   	dl 1, 16, 16, 256, fn_dg_065, 577
       00 00 10 00 
       00 00 01 00 
       44 35 04 41 
       02 00       
0427B8 01 00 00 10 0050*   	dl 1, 16, 16, 256, fn_dg_066, 578
       00 00 10 00 
       00 00 01 00 
       59 35 04 42 
       02 00       
0427CA 01 00 00 10 0051*   	dl 1, 16, 16, 256, fn_dg_067, 579
       00 00 10 00 
       00 00 01 00 
       6E 35 04 43 
       02 00       
0427DC 01 00 00 10 0052*   	dl 1, 16, 16, 256, fn_dg_068, 580
       00 00 10 00 
       00 00 01 00 
       83 35 04 44 
       02 00       
0427EE 01 00 00 10 0053*   	dl 1, 16, 16, 256, fn_dg_069, 581
       00 00 10 00 
       00 00 01 00 
       98 35 04 45 
       02 00       
042800 01 00 00 10 0054*   	dl 1, 16, 16, 256, fn_dg_070, 582
       00 00 10 00 
       00 00 01 00 
       AD 35 04 46 
       02 00       
042812 01 00 00 10 0055*   	dl 1, 16, 16, 256, fn_dg_071, 583
       00 00 10 00 
       00 00 01 00 
       C2 35 04 47 
       02 00       
042824 01 00 00 10 0056*   	dl 1, 16, 16, 256, fn_dg_072, 584
       00 00 10 00 
       00 00 01 00 
       D7 35 04 48 
       02 00       
042836 01 00 00 10 0057*   	dl 1, 16, 16, 256, fn_dg_073, 585
       00 00 10 00 
       00 00 01 00 
       EC 35 04 49 
       02 00       
042848 01 00 00 10 0058*   	dl 1, 16, 16, 256, fn_dg_074, 586
       00 00 10 00 
       00 00 01 00 
       01 36 04 4A 
       02 00       
04285A 01 00 00 10 0059*   	dl 1, 16, 16, 256, fn_dg_075, 587
       00 00 10 00 
       00 00 01 00 
       16 36 04 4B 
       02 00       
04286C 01 00 00 10 0060*   	dl 1, 16, 16, 256, fn_dg_076, 588
       00 00 10 00 
       00 00 01 00 
       2B 36 04 4C 
       02 00       
04287E 01 00 00 10 0061*   	dl 1, 16, 16, 256, fn_dg_077, 589
       00 00 10 00 
       00 00 01 00 
       40 36 04 4D 
       02 00       
042890 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_dg_081, 593
       00 00 10 00 
       00 00 01 00 
       55 36 04 51 
       02 00       
0428A2 01 00 00 10 0063*   	dl 1, 16, 16, 256, fn_dg_082, 594
       00 00 10 00 
       00 00 01 00 
       6A 36 04 52 
       02 00       
0428B4 01 00 00 10 0064*   	dl 1, 16, 16, 256, fn_dg_083, 595
       00 00 10 00 
       00 00 01 00 
       7F 36 04 53 
       02 00       
0428C6 01 00 00 10 0065*   	dl 1, 16, 16, 256, fn_dg_084, 596
       00 00 10 00 
       00 00 01 00 
       94 36 04 54 
       02 00       
0428D8 01 00 00 10 0066*   	dl 1, 16, 16, 256, fn_dg_085, 597
       00 00 10 00 
       00 00 01 00 
       A9 36 04 55 
       02 00       
0428EA 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_dg_086, 598
       00 00 10 00 
       00 00 01 00 
       BE 36 04 56 
       02 00       
0428FC 01 00 00 10 0068*   	dl 1, 16, 16, 256, fn_dg_087, 599
       00 00 10 00 
       00 00 01 00 
       D3 36 04 57 
       02 00       
04290E 01 00 00 10 0069*   	dl 1, 16, 16, 256, fn_dg_088, 600
       00 00 10 00 
       00 00 01 00 
       E8 36 04 58 
       02 00       
042920 01 00 00 10 0070*   	dl 1, 16, 16, 256, fn_dg_089, 601
       00 00 10 00 
       00 00 01 00 
       FD 36 04 59 
       02 00       
042932 01 00 00 10 0071*   	dl 1, 16, 16, 256, fn_dg_090, 602
       00 00 10 00 
       00 00 01 00 
       12 37 04 5A 
       02 00       
042944 01 00 00 10 0072*   	dl 1, 16, 16, 256, fn_dg_091, 603
       00 00 10 00 
       00 00 01 00 
       27 37 04 5B 
       02 00       
042956 01 00 00 10 0073*   	dl 1, 16, 16, 256, fn_dg_092, 604
       00 00 10 00 
       00 00 01 00 
       3C 37 04 5C 
       02 00       
042968 01 00 00 10 0074*   	dl 1, 16, 16, 256, fn_dg_093, 605
       00 00 10 00 
       00 00 01 00 
       51 37 04 5D 
       02 00       
04297A 01 00 00 10 0075*   	dl 1, 16, 16, 256, fn_dg_097, 609
       00 00 10 00 
       00 00 01 00 
       66 37 04 61 
       02 00       
04298C 01 00 00 10 0076*   	dl 1, 16, 16, 256, fn_dg_098, 610
       00 00 10 00 
       00 00 01 00 
       7B 37 04 62 
       02 00       
04299E 01 00 00 10 0077*   	dl 1, 16, 16, 256, fn_dg_099, 611
       00 00 10 00 
       00 00 01 00 
       90 37 04 63 
       02 00       
0429B0 01 00 00 10 0078*   	dl 1, 16, 16, 256, fn_dg_100, 612
       00 00 10 00 
       00 00 01 00 
       A5 37 04 64 
       02 00       
0429C2 01 00 00 10 0079*   	dl 1, 16, 16, 256, fn_dg_101, 613
       00 00 10 00 
       00 00 01 00 
       BA 37 04 65 
       02 00       
0429D4 01 00 00 10 0080*   	dl 1, 16, 16, 256, fn_dg_102, 614
       00 00 10 00 
       00 00 01 00 
       CF 37 04 66 
       02 00       
0429E6 01 00 00 10 0081*   	dl 1, 16, 16, 256, fn_dg_103, 615
       00 00 10 00 
       00 00 01 00 
       E4 37 04 67 
       02 00       
0429F8 01 00 00 10 0082*   	dl 1, 16, 16, 256, fn_dg_104, 616
       00 00 10 00 
       00 00 01 00 
       F9 37 04 68 
       02 00       
042A0A 01 00 00 10 0083*   	dl 1, 16, 16, 256, fn_dg_105, 617
       00 00 10 00 
       00 00 01 00 
       0E 38 04 69 
       02 00       
042A1C 01 00 00 10 0084*   	dl 1, 16, 16, 256, fn_dg_106, 618
       00 00 10 00 
       00 00 01 00 
       23 38 04 6A 
       02 00       
042A2E 01 00 00 10 0085*   	dl 1, 16, 16, 256, fn_dg_107, 619
       00 00 10 00 
       00 00 01 00 
       38 38 04 6B 
       02 00       
042A40 01 00 00 10 0086*   	dl 1, 16, 16, 256, fn_dg_108, 620
       00 00 10 00 
       00 00 01 00 
       4D 38 04 6C 
       02 00       
042A52 01 00 00 10 0087*   	dl 1, 16, 16, 256, fn_dg_113, 625
       00 00 10 00 
       00 00 01 00 
       62 38 04 71 
       02 00       
042A64 01 00 00 10 0088*   	dl 1, 16, 16, 256, fn_dg_114, 626
       00 00 10 00 
       00 00 01 00 
       77 38 04 72 
       02 00       
042A76 01 00 00 10 0089*   	dl 1, 16, 16, 256, fn_dg_115, 627
       00 00 10 00 
       00 00 01 00 
       8C 38 04 73 
       02 00       
042A88 01 00 00 10 0090*   	dl 1, 16, 16, 256, fn_dg_116, 628
       00 00 10 00 
       00 00 01 00 
       A1 38 04 74 
       02 00       
042A9A 01 00 00 10 0091*   	dl 1, 16, 16, 256, fn_dg_117, 629
       00 00 10 00 
       00 00 01 00 
       B6 38 04 75 
       02 00       
042AAC 01 00 00 10 0092*   	dl 1, 16, 16, 256, fn_dg_118, 630
       00 00 10 00 
       00 00 01 00 
       CB 38 04 76 
       02 00       
042ABE 01 00 00 10 0093*   	dl 1, 16, 16, 256, fn_dg_119, 631
       00 00 10 00 
       00 00 01 00 
       E0 38 04 77 
       02 00       
042AD0 01 00 00 10 0094*   	dl 1, 16, 16, 256, fn_dg_120, 632
       00 00 10 00 
       00 00 01 00 
       F5 38 04 78 
       02 00       
042AE2 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_dg_121, 633
       00 00 10 00 
       00 00 01 00 
       0A 39 04 79 
       02 00       
042AF4 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_dg_122, 634
       00 00 10 00 
       00 00 01 00 
       1F 39 04 7A 
       02 00       
042B06 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_dg_123, 635
       00 00 10 00 
       00 00 01 00 
       34 39 04 7B 
       02 00       
042B18 01 00 00 10 0098*   	dl 1, 16, 16, 256, fn_dg_129, 641
       00 00 10 00 
       00 00 01 00 
       49 39 04 81 
       02 00       
042B2A 01 00 00 10 0099*   	dl 1, 16, 16, 256, fn_dg_130, 642
       00 00 10 00 
       00 00 01 00 
       5E 39 04 82 
       02 00       
042B3C 01 00 00 10 0100*   	dl 1, 16, 16, 256, fn_dg_131, 643
       00 00 10 00 
       00 00 01 00 
       73 39 04 83 
       02 00       
042B4E 01 00 00 10 0101*   	dl 1, 16, 16, 256, fn_dg_132, 644
       00 00 10 00 
       00 00 01 00 
       88 39 04 84 
       02 00       
042B60 01 00 00 10 0102*   	dl 1, 16, 16, 256, fn_dg_133, 645
       00 00 10 00 
       00 00 01 00 
       9D 39 04 85 
       02 00       
042B72 01 00 00 10 0103*   	dl 1, 16, 16, 256, fn_dg_134, 646
       00 00 10 00 
       00 00 01 00 
       B2 39 04 86 
       02 00       
042B84 01 00 00 10 0104*   	dl 1, 16, 16, 256, fn_dg_135, 647
       00 00 10 00 
       00 00 01 00 
       C7 39 04 87 
       02 00       
042B96 01 00 00 10 0105*   	dl 1, 16, 16, 256, fn_dg_136, 648
       00 00 10 00 
       00 00 01 00 
       DC 39 04 88 
       02 00       
042BA8 01 00 00 10 0106*   	dl 1, 16, 16, 256, fn_dg_137, 649
       00 00 10 00 
       00 00 01 00 
       F1 39 04 89 
       02 00       
042BBA 01 00 00 10 0107*   	dl 1, 16, 16, 256, fn_dg_138, 650
       00 00 10 00 
       00 00 01 00 
       06 3A 04 8A 
       02 00       
042BCC 01 00 00 10 0108*   	dl 1, 16, 16, 256, fn_dg_139, 651
       00 00 10 00 
       00 00 01 00 
       1B 3A 04 8B 
       02 00       
042BDE 01 00 00 10 0109*   	dl 1, 16, 16, 256, fn_dg_140, 652
       00 00 10 00 
       00 00 01 00 
       30 3A 04 8C 
       02 00       
042BF0 01 00 00 10 0110*   	dl 1, 16, 16, 256, fn_dg_145, 657
       00 00 10 00 
       00 00 01 00 
       45 3A 04 91 
       02 00       
042C02 01 00 00 10 0111*   	dl 1, 16, 16, 256, fn_dg_146, 658
       00 00 10 00 
       00 00 01 00 
       5A 3A 04 92 
       02 00       
042C14 01 00 00 10 0112*   	dl 1, 16, 16, 256, fn_dg_147, 659
       00 00 10 00 
       00 00 01 00 
       6F 3A 04 93 
       02 00       
042C26 01 00 00 10 0113*   	dl 1, 16, 16, 256, fn_dg_148, 660
       00 00 10 00 
       00 00 01 00 
       84 3A 04 94 
       02 00       
042C38 01 00 00 10 0114*   	dl 1, 16, 16, 256, fn_dg_149, 661
       00 00 10 00 
       00 00 01 00 
       99 3A 04 95 
       02 00       
042C4A 01 00 00 10 0115*   	dl 1, 16, 16, 256, fn_dg_150, 662
       00 00 10 00 
       00 00 01 00 
       AE 3A 04 96 
       02 00       
042C5C 01 00 00 10 0116*   	dl 1, 16, 16, 256, fn_dg_151, 663
       00 00 10 00 
       00 00 01 00 
       C3 3A 04 97 
       02 00       
042C6E 01 00 00 10 0117*   	dl 1, 16, 16, 256, fn_dg_152, 664
       00 00 10 00 
       00 00 01 00 
       D8 3A 04 98 
       02 00       
042C80 01 00 00 10 0118*   	dl 1, 16, 16, 256, fn_dg_153, 665
       00 00 10 00 
       00 00 01 00 
       ED 3A 04 99 
       02 00       
042C92 01 00 00 10 0119*   	dl 1, 16, 16, 256, fn_dg_154, 666
       00 00 10 00 
       00 00 01 00 
       02 3B 04 9A 
       02 00       
042CA4 01 00 00 10 0120*   	dl 1, 16, 16, 256, fn_dg_155, 667
       00 00 10 00 
       00 00 01 00 
       17 3B 04 9B 
       02 00       
042CB6 01 00 00 10 0121*   	dl 1, 16, 16, 256, fn_dg_156, 668
       00 00 10 00 
       00 00 01 00 
       2C 3B 04 9C 
       02 00       
042CC8 01 00 00 10 0122*   	dl 1, 16, 16, 256, fn_dg_161, 673
       00 00 10 00 
       00 00 01 00 
       41 3B 04 A1 
       02 00       
042CDA 01 00 00 10 0123*   	dl 1, 16, 16, 256, fn_dg_162, 674
       00 00 10 00 
       00 00 01 00 
       56 3B 04 A2 
       02 00       
042CEC 01 00 00 10 0124*   	dl 1, 16, 16, 256, fn_dg_163, 675
       00 00 10 00 
       00 00 01 00 
       6B 3B 04 A3 
       02 00       
042CFE 01 00 00 10 0125*   	dl 1, 16, 16, 256, fn_dg_164, 676
       00 00 10 00 
       00 00 01 00 
       80 3B 04 A4 
       02 00       
042D10 01 00 00 10 0126*   	dl 1, 16, 16, 256, fn_dg_165, 677
       00 00 10 00 
       00 00 01 00 
       95 3B 04 A5 
       02 00       
042D22 01 00 00 10 0127*   	dl 1, 16, 16, 256, fn_dg_166, 678
       00 00 10 00 
       00 00 01 00 
       AA 3B 04 A6 
       02 00       
042D34 01 00 00 10 0128*   	dl 1, 16, 16, 256, fn_dg_167, 679
       00 00 10 00 
       00 00 01 00 
       BF 3B 04 A7 
       02 00       
042D46 01 00 00 10 0129*   	dl 1, 16, 16, 256, fn_dg_168, 680
       00 00 10 00 
       00 00 01 00 
       D4 3B 04 A8 
       02 00       
042D58 01 00 00 10 0130*   	dl 1, 16, 16, 256, fn_dg_169, 681
       00 00 10 00 
       00 00 01 00 
       E9 3B 04 A9 
       02 00       
042D6A 01 00 00 10 0131*   	dl 1, 16, 16, 256, fn_dg_170, 682
       00 00 10 00 
       00 00 01 00 
       FE 3B 04 AA 
       02 00       
042D7C 01 00 00 10 0132*   	dl 1, 16, 16, 256, fn_dg_171, 683
       00 00 10 00 
       00 00 01 00 
       13 3C 04 AB 
       02 00       
042D8E 01 00 00 10 0133*   	dl 1, 16, 16, 256, fn_dg_172, 684
       00 00 10 00 
       00 00 01 00 
       28 3C 04 AC 
       02 00       
042DA0 01 00 00 10 0134*   	dl 1, 16, 16, 256, fn_dg_174, 686
       00 00 10 00 
       00 00 01 00 
       3D 3C 04 AE 
       02 00       
042DB2 01 00 00 10 0135*   	dl 1, 16, 16, 256, fn_dg_175, 687
       00 00 10 00 
       00 00 01 00 
       52 3C 04 AF 
       02 00       
042DC4 01 00 00 10 0136*   	dl 1, 16, 16, 256, fn_dg_176, 688
       00 00 10 00 
       00 00 01 00 
       67 3C 04 B0 
       02 00       
042DD6 01 00 00 10 0137*   	dl 1, 16, 16, 256, fn_dg_177, 689
       00 00 10 00 
       00 00 01 00 
       7C 3C 04 B1 
       02 00       
042DE8 01 00 00 10 0138*   	dl 1, 16, 16, 256, fn_dg_178, 690
       00 00 10 00 
       00 00 01 00 
       91 3C 04 B2 
       02 00       
042DFA 01 00 00 10 0139*   	dl 1, 16, 16, 256, fn_dg_179, 691
       00 00 10 00 
       00 00 01 00 
       A6 3C 04 B3 
       02 00       
042E0C 01 00 00 10 0140*   	dl 1, 16, 16, 256, fn_dg_180, 692
       00 00 10 00 
       00 00 01 00 
       BB 3C 04 B4 
       02 00       
042E1E 01 00 00 10 0141*   	dl 1, 16, 16, 256, fn_dg_181, 693
       00 00 10 00 
       00 00 01 00 
       D0 3C 04 B5 
       02 00       
042E30 01 00 00 10 0142*   	dl 1, 16, 16, 256, fn_dg_182, 694
       00 00 10 00 
       00 00 01 00 
       E5 3C 04 B6 
       02 00       
042E42 01 00 00 10 0143*   	dl 1, 16, 16, 256, fn_dg_183, 695
       00 00 10 00 
       00 00 01 00 
       FA 3C 04 B7 
       02 00       
042E54 01 00 00 10 0144*   	dl 1, 16, 16, 256, fn_dg_184, 696
       00 00 10 00 
       00 00 01 00 
       0F 3D 04 B8 
       02 00       
042E66 01 00 00 10 0145*   	dl 1, 16, 16, 256, fn_dg_185, 697
       00 00 10 00 
       00 00 01 00 
       24 3D 04 B9 
       02 00       
042E78 01 00 00 10 0146*   	dl 1, 16, 16, 256, fn_dg_186, 698
       00 00 10 00 
       00 00 01 00 
       39 3D 04 BA 
       02 00       
042E8A 01 00 00 10 0147*   	dl 1, 16, 16, 256, fn_dg_187, 699
       00 00 10 00 
       00 00 01 00 
       4E 3D 04 BB 
       02 00       
042E9C 01 00 00 10 0148*   	dl 1, 16, 16, 256, fn_dg_188, 700
       00 00 10 00 
       00 00 01 00 
       63 3D 04 BC 
       02 00       
042EAE 01 00 00 10 0149*   	dl 1, 16, 16, 256, fn_dg_190, 702
       00 00 10 00 
       00 00 01 00 
       78 3D 04 BE 
       02 00       
042EC0 01 00 00 10 0150*   	dl 1, 16, 16, 256, fn_dg_191, 703
       00 00 10 00 
       00 00 01 00 
       8D 3D 04 BF 
       02 00       
042ED2 01 00 00 10 0151*   	dl 1, 16, 16, 256, fn_dg_192, 704
       00 00 10 00 
       00 00 01 00 
       A2 3D 04 C0 
       02 00       
042EE4 01 00 00 10 0152*   	dl 1, 16, 16, 256, fn_dg_193, 705
       00 00 10 00 
       00 00 01 00 
       B7 3D 04 C1 
       02 00       
042EF6 01 00 00 10 0153*   	dl 1, 16, 16, 256, fn_dg_194, 706
       00 00 10 00 
       00 00 01 00 
       CC 3D 04 C2 
       02 00       
042F08 01 00 00 10 0154*   	dl 1, 16, 16, 256, fn_dg_195, 707
       00 00 10 00 
       00 00 01 00 
       E1 3D 04 C3 
       02 00       
042F1A 01 00 00 10 0155*   	dl 1, 16, 16, 256, fn_dg_196, 708
       00 00 10 00 
       00 00 01 00 
       F6 3D 04 C4 
       02 00       
042F2C 01 00 00 10 0156*   	dl 1, 16, 16, 256, fn_dg_197, 709
       00 00 10 00 
       00 00 01 00 
       0B 3E 04 C5 
       02 00       
042F3E 01 00 00 10 0157*   	dl 1, 16, 16, 256, fn_dg_198, 710
       00 00 10 00 
       00 00 01 00 
       20 3E 04 C6 
       02 00       
042F50 01 00 00 10 0158*   	dl 1, 16, 16, 256, fn_dg_199, 711
       00 00 10 00 
       00 00 01 00 
       35 3E 04 C7 
       02 00       
042F62 01 00 00 10 0159*   	dl 1, 16, 16, 256, fn_dg_200, 712
       00 00 10 00 
       00 00 01 00 
       4A 3E 04 C8 
       02 00       
042F74 01 00 00 10 0160*   	dl 1, 16, 16, 256, fn_dg_201, 713
       00 00 10 00 
       00 00 01 00 
       5F 3E 04 C9 
       02 00       
042F86 01 00 00 10 0161*   	dl 1, 16, 16, 256, fn_dg_202, 714
       00 00 10 00 
       00 00 01 00 
       74 3E 04 CA 
       02 00       
042F98 01 00 00 10 0162*   	dl 1, 16, 16, 256, fn_dg_203, 715
       00 00 10 00 
       00 00 01 00 
       89 3E 04 CB 
       02 00       
042FAA 01 00 00 10 0163*   	dl 1, 16, 16, 256, fn_dg_204, 716
       00 00 10 00 
       00 00 01 00 
       9E 3E 04 CC 
       02 00       
042FBC 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_dg_206, 718
       00 00 10 00 
       00 00 01 00 
       B3 3E 04 CE 
       02 00       
042FCE 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_dg_207, 719
       00 00 10 00 
       00 00 01 00 
       C8 3E 04 CF 
       02 00       
042FE0 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_dg_208, 720
       00 00 10 00 
       00 00 01 00 
       DD 3E 04 D0 
       02 00       
042FF2 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_dg_209, 721
       00 00 10 00 
       00 00 01 00 
       F2 3E 04 D1 
       02 00       
043004 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_dg_210, 722
       00 00 10 00 
       00 00 01 00 
       07 3F 04 D2 
       02 00       
043016 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_dg_211, 723
       00 00 10 00 
       00 00 01 00 
       1C 3F 04 D3 
       02 00       
043028 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_dg_212, 724
       00 00 10 00 
       00 00 01 00 
       31 3F 04 D4 
       02 00       
04303A 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_dg_213, 725
       00 00 10 00 
       00 00 01 00 
       46 3F 04 D5 
       02 00       
04304C 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_dg_214, 726
       00 00 10 00 
       00 00 01 00 
       5B 3F 04 D6 
       02 00       
04305E 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_dg_215, 727
       00 00 10 00 
       00 00 01 00 
       70 3F 04 D7 
       02 00       
043070 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_dg_216, 728
       00 00 10 00 
       00 00 01 00 
       85 3F 04 D8 
       02 00       
043082 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_dg_217, 729
       00 00 10 00 
       00 00 01 00 
       9A 3F 04 D9 
       02 00       
043094 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_dg_218, 730
       00 00 10 00 
       00 00 01 00 
       AF 3F 04 DA 
       02 00       
0430A6 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_dg_219, 731
       00 00 10 00 
       00 00 01 00 
       C4 3F 04 DB 
       02 00       
0430B8 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_dg_220, 732
       00 00 10 00 
       00 00 01 00 
       D9 3F 04 DC 
       02 00       
0430CA 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_dg_225, 737
       00 00 10 00 
       00 00 01 00 
       EE 3F 04 E1 
       02 00       
0430DC 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_dg_226, 738
       00 00 10 00 
       00 00 01 00 
       03 40 04 E2 
       02 00       
0430EE 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_dg_227, 739
       00 00 10 00 
       00 00 01 00 
       18 40 04 E3 
       02 00       
043100 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_dg_228, 740
       00 00 10 00 
       00 00 01 00 
       2D 40 04 E4 
       02 00       
043112 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_dg_229, 741
       00 00 10 00 
       00 00 01 00 
       42 40 04 E5 
       02 00       
043124 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_dg_230, 742
       00 00 10 00 
       00 00 01 00 
       57 40 04 E6 
       02 00       
043136 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_dg_231, 743
       00 00 10 00 
       00 00 01 00 
       6C 40 04 E7 
       02 00       
043148 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_dg_232, 744
       00 00 10 00 
       00 00 01 00 
       81 40 04 E8 
       02 00       
04315A 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_dg_233, 745
       00 00 10 00 
       00 00 01 00 
       96 40 04 E9 
       02 00       
04316C 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_dg_234, 746
       00 00 10 00 
       00 00 01 00 
       AB 40 04 EA 
       02 00       
04317E 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_dg_235, 747
       00 00 10 00 
       00 00 01 00 
       C0 40 04 EB 
       02 00       
043190 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_dg_236, 748
       00 00 10 00 
       00 00 01 00 
       D5 40 04 EC 
       02 00       
0431A2 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_dg_241, 753
       00 00 10 00 
       00 00 01 00 
       EA 40 04 F1 
       02 00       
0431B4 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_dg_242, 754
       00 00 10 00 
       00 00 01 00 
       FF 40 04 F2 
       02 00       
0431C6 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_dg_245, 757
       00 00 10 00 
       00 00 01 00 
       14 41 04 F5 
       02 00       
0431D8 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_dg_246, 758
       00 00 10 00 
       00 00 01 00 
       29 41 04 F6 
       02 00       
0431EA 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_dg_248, 760
       00 00 10 00 
       00 00 01 00 
       3E 41 04 F8 
       02 00       
0431FC             0196*   
0431FC             0197*   tiles_dg_files_list: ; filename:
0431FC 74 69 6C 65 0198*   fn_dg_000: db "tiles/dg/0/000.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
043211 74 69 6C 65 0199*   fn_dg_001: db "tiles/dg/0/001.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 31 2E 72 
       67 62 61 32 
       00          
043226 74 69 6C 65 0200*   fn_dg_002: db "tiles/dg/0/002.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 32 2E 72 
       67 62 61 32 
       00          
04323B 74 69 6C 65 0201*   fn_dg_003: db "tiles/dg/0/003.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 33 2E 72 
       67 62 61 32 
       00          
043250 74 69 6C 65 0202*   fn_dg_004: db "tiles/dg/0/004.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 34 2E 72 
       67 62 61 32 
       00          
043265 74 69 6C 65 0203*   fn_dg_005: db "tiles/dg/0/005.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 35 2E 72 
       67 62 61 32 
       00          
04327A 74 69 6C 65 0204*   fn_dg_006: db "tiles/dg/0/006.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 36 2E 72 
       67 62 61 32 
       00          
04328F 74 69 6C 65 0205*   fn_dg_007: db "tiles/dg/0/007.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 37 2E 72 
       67 62 61 32 
       00          
0432A4 74 69 6C 65 0206*   fn_dg_008: db "tiles/dg/0/008.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
0432B9 74 69 6C 65 0207*   fn_dg_009: db "tiles/dg/0/009.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       30 39 2E 72 
       67 62 61 32 
       00          
0432CE 74 69 6C 65 0208*   fn_dg_010: db "tiles/dg/0/010.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 30 2E 72 
       67 62 61 32 
       00          
0432E3 74 69 6C 65 0209*   fn_dg_011: db "tiles/dg/0/011.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 31 2E 72 
       67 62 61 32 
       00          
0432F8 74 69 6C 65 0210*   fn_dg_016: db "tiles/dg/0/016.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
04330D 74 69 6C 65 0211*   fn_dg_033: db "tiles/dg/0/033.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 33 2E 72 
       67 62 61 32 
       00          
043322 74 69 6C 65 0212*   fn_dg_034: db "tiles/dg/0/034.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 34 2E 72 
       67 62 61 32 
       00          
043337 74 69 6C 65 0213*   fn_dg_035: db "tiles/dg/0/035.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 35 2E 72 
       67 62 61 32 
       00          
04334C 74 69 6C 65 0214*   fn_dg_036: db "tiles/dg/0/036.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 36 2E 72 
       67 62 61 32 
       00          
043361 74 69 6C 65 0215*   fn_dg_037: db "tiles/dg/0/037.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 37 2E 72 
       67 62 61 32 
       00          
043376 74 69 6C 65 0216*   fn_dg_038: db "tiles/dg/0/038.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 38 2E 72 
       67 62 61 32 
       00          
04338B 74 69 6C 65 0217*   fn_dg_039: db "tiles/dg/0/039.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       33 39 2E 72 
       67 62 61 32 
       00          
0433A0 74 69 6C 65 0218*   fn_dg_040: db "tiles/dg/0/040.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0433B5 74 69 6C 65 0219*   fn_dg_045: db "tiles/dg/0/045.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 35 2E 72 
       67 62 61 32 
       00          
0433CA 74 69 6C 65 0220*   fn_dg_046: db "tiles/dg/0/046.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 36 2E 72 
       67 62 61 32 
       00          
0433DF 74 69 6C 65 0221*   fn_dg_047: db "tiles/dg/0/047.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 37 2E 72 
       67 62 61 32 
       00          
0433F4 74 69 6C 65 0222*   fn_dg_048: db "tiles/dg/0/048.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
043409 74 69 6C 65 0223*   fn_dg_049: db "tiles/dg/0/049.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       34 39 2E 72 
       67 62 61 32 
       00          
04341E 74 69 6C 65 0224*   fn_dg_050: db "tiles/dg/0/050.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 30 2E 72 
       67 62 61 32 
       00          
043433 74 69 6C 65 0225*   fn_dg_051: db "tiles/dg/0/051.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 31 2E 72 
       67 62 61 32 
       00          
043448 74 69 6C 65 0226*   fn_dg_052: db "tiles/dg/0/052.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 32 2E 72 
       67 62 61 32 
       00          
04345D 74 69 6C 65 0227*   fn_dg_053: db "tiles/dg/0/053.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 33 2E 72 
       67 62 61 32 
       00          
043472 74 69 6C 65 0228*   fn_dg_054: db "tiles/dg/0/054.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 34 2E 72 
       67 62 61 32 
       00          
043487 74 69 6C 65 0229*   fn_dg_055: db "tiles/dg/0/055.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 35 2E 72 
       67 62 61 32 
       00          
04349C 74 69 6C 65 0230*   fn_dg_056: db "tiles/dg/0/056.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0434B1 74 69 6C 65 0231*   fn_dg_057: db "tiles/dg/0/057.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 37 2E 72 
       67 62 61 32 
       00          
0434C6 74 69 6C 65 0232*   fn_dg_058: db "tiles/dg/0/058.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 38 2E 72 
       67 62 61 32 
       00          
0434DB 74 69 6C 65 0233*   fn_dg_059: db "tiles/dg/0/059.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       35 39 2E 72 
       67 62 61 32 
       00          
0434F0 74 69 6C 65 0234*   fn_dg_061: db "tiles/dg/0/061.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 31 2E 72 
       67 62 61 32 
       00          
043505 74 69 6C 65 0235*   fn_dg_062: db "tiles/dg/0/062.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 32 2E 72 
       67 62 61 32 
       00          
04351A 74 69 6C 65 0236*   fn_dg_063: db "tiles/dg/0/063.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 33 2E 72 
       67 62 61 32 
       00          
04352F 74 69 6C 65 0237*   fn_dg_064: db "tiles/dg/0/064.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
043544 74 69 6C 65 0238*   fn_dg_065: db "tiles/dg/0/065.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 35 2E 72 
       67 62 61 32 
       00          
043559 74 69 6C 65 0239*   fn_dg_066: db "tiles/dg/0/066.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 36 2E 72 
       67 62 61 32 
       00          
04356E 74 69 6C 65 0240*   fn_dg_067: db "tiles/dg/0/067.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 37 2E 72 
       67 62 61 32 
       00          
043583 74 69 6C 65 0241*   fn_dg_068: db "tiles/dg/0/068.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 38 2E 72 
       67 62 61 32 
       00          
043598 74 69 6C 65 0242*   fn_dg_069: db "tiles/dg/0/069.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       36 39 2E 72 
       67 62 61 32 
       00          
0435AD 74 69 6C 65 0243*   fn_dg_070: db "tiles/dg/0/070.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 30 2E 72 
       67 62 61 32 
       00          
0435C2 74 69 6C 65 0244*   fn_dg_071: db "tiles/dg/0/071.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 31 2E 72 
       67 62 61 32 
       00          
0435D7 74 69 6C 65 0245*   fn_dg_072: db "tiles/dg/0/072.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0435EC 74 69 6C 65 0246*   fn_dg_073: db "tiles/dg/0/073.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 33 2E 72 
       67 62 61 32 
       00          
043601 74 69 6C 65 0247*   fn_dg_074: db "tiles/dg/0/074.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 34 2E 72 
       67 62 61 32 
       00          
043616 74 69 6C 65 0248*   fn_dg_075: db "tiles/dg/0/075.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 35 2E 72 
       67 62 61 32 
       00          
04362B 74 69 6C 65 0249*   fn_dg_076: db "tiles/dg/0/076.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 36 2E 72 
       67 62 61 32 
       00          
043640 74 69 6C 65 0250*   fn_dg_077: db "tiles/dg/0/077.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       37 37 2E 72 
       67 62 61 32 
       00          
043655 74 69 6C 65 0251*   fn_dg_081: db "tiles/dg/0/081.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 31 2E 72 
       67 62 61 32 
       00          
04366A 74 69 6C 65 0252*   fn_dg_082: db "tiles/dg/0/082.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 32 2E 72 
       67 62 61 32 
       00          
04367F 74 69 6C 65 0253*   fn_dg_083: db "tiles/dg/0/083.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 33 2E 72 
       67 62 61 32 
       00          
043694 74 69 6C 65 0254*   fn_dg_084: db "tiles/dg/0/084.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 34 2E 72 
       67 62 61 32 
       00          
0436A9 74 69 6C 65 0255*   fn_dg_085: db "tiles/dg/0/085.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 35 2E 72 
       67 62 61 32 
       00          
0436BE 74 69 6C 65 0256*   fn_dg_086: db "tiles/dg/0/086.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 36 2E 72 
       67 62 61 32 
       00          
0436D3 74 69 6C 65 0257*   fn_dg_087: db "tiles/dg/0/087.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 37 2E 72 
       67 62 61 32 
       00          
0436E8 74 69 6C 65 0258*   fn_dg_088: db "tiles/dg/0/088.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
0436FD 74 69 6C 65 0259*   fn_dg_089: db "tiles/dg/0/089.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       38 39 2E 72 
       67 62 61 32 
       00          
043712 74 69 6C 65 0260*   fn_dg_090: db "tiles/dg/0/090.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 30 2E 72 
       67 62 61 32 
       00          
043727 74 69 6C 65 0261*   fn_dg_091: db "tiles/dg/0/091.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 31 2E 72 
       67 62 61 32 
       00          
04373C 74 69 6C 65 0262*   fn_dg_092: db "tiles/dg/0/092.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 32 2E 72 
       67 62 61 32 
       00          
043751 74 69 6C 65 0263*   fn_dg_093: db "tiles/dg/0/093.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 33 2E 72 
       67 62 61 32 
       00          
043766 74 69 6C 65 0264*   fn_dg_097: db "tiles/dg/0/097.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 37 2E 72 
       67 62 61 32 
       00          
04377B 74 69 6C 65 0265*   fn_dg_098: db "tiles/dg/0/098.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 38 2E 72 
       67 62 61 32 
       00          
043790 74 69 6C 65 0266*   fn_dg_099: db "tiles/dg/0/099.rgba2",0
       73 2F 64 67 
       2F 30 2F 30 
       39 39 2E 72 
       67 62 61 32 
       00          
0437A5 74 69 6C 65 0267*   fn_dg_100: db "tiles/dg/0/100.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 30 2E 72 
       67 62 61 32 
       00          
0437BA 74 69 6C 65 0268*   fn_dg_101: db "tiles/dg/0/101.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 31 2E 72 
       67 62 61 32 
       00          
0437CF 74 69 6C 65 0269*   fn_dg_102: db "tiles/dg/0/102.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 32 2E 72 
       67 62 61 32 
       00          
0437E4 74 69 6C 65 0270*   fn_dg_103: db "tiles/dg/0/103.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 33 2E 72 
       67 62 61 32 
       00          
0437F9 74 69 6C 65 0271*   fn_dg_104: db "tiles/dg/0/104.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
04380E 74 69 6C 65 0272*   fn_dg_105: db "tiles/dg/0/105.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 35 2E 72 
       67 62 61 32 
       00          
043823 74 69 6C 65 0273*   fn_dg_106: db "tiles/dg/0/106.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 36 2E 72 
       67 62 61 32 
       00          
043838 74 69 6C 65 0274*   fn_dg_107: db "tiles/dg/0/107.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 37 2E 72 
       67 62 61 32 
       00          
04384D 74 69 6C 65 0275*   fn_dg_108: db "tiles/dg/0/108.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       30 38 2E 72 
       67 62 61 32 
       00          
043862 74 69 6C 65 0276*   fn_dg_113: db "tiles/dg/0/113.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 33 2E 72 
       67 62 61 32 
       00          
043877 74 69 6C 65 0277*   fn_dg_114: db "tiles/dg/0/114.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 34 2E 72 
       67 62 61 32 
       00          
04388C 74 69 6C 65 0278*   fn_dg_115: db "tiles/dg/0/115.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 35 2E 72 
       67 62 61 32 
       00          
0438A1 74 69 6C 65 0279*   fn_dg_116: db "tiles/dg/0/116.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 36 2E 72 
       67 62 61 32 
       00          
0438B6 74 69 6C 65 0280*   fn_dg_117: db "tiles/dg/0/117.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 37 2E 72 
       67 62 61 32 
       00          
0438CB 74 69 6C 65 0281*   fn_dg_118: db "tiles/dg/0/118.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 38 2E 72 
       67 62 61 32 
       00          
0438E0 74 69 6C 65 0282*   fn_dg_119: db "tiles/dg/0/119.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       31 39 2E 72 
       67 62 61 32 
       00          
0438F5 74 69 6C 65 0283*   fn_dg_120: db "tiles/dg/0/120.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
04390A 74 69 6C 65 0284*   fn_dg_121: db "tiles/dg/0/121.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 31 2E 72 
       67 62 61 32 
       00          
04391F 74 69 6C 65 0285*   fn_dg_122: db "tiles/dg/0/122.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 32 2E 72 
       67 62 61 32 
       00          
043934 74 69 6C 65 0286*   fn_dg_123: db "tiles/dg/0/123.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 33 2E 72 
       67 62 61 32 
       00          
043949 74 69 6C 65 0287*   fn_dg_129: db "tiles/dg/0/129.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       32 39 2E 72 
       67 62 61 32 
       00          
04395E 74 69 6C 65 0288*   fn_dg_130: db "tiles/dg/0/130.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 30 2E 72 
       67 62 61 32 
       00          
043973 74 69 6C 65 0289*   fn_dg_131: db "tiles/dg/0/131.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 31 2E 72 
       67 62 61 32 
       00          
043988 74 69 6C 65 0290*   fn_dg_132: db "tiles/dg/0/132.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 32 2E 72 
       67 62 61 32 
       00          
04399D 74 69 6C 65 0291*   fn_dg_133: db "tiles/dg/0/133.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 33 2E 72 
       67 62 61 32 
       00          
0439B2 74 69 6C 65 0292*   fn_dg_134: db "tiles/dg/0/134.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 34 2E 72 
       67 62 61 32 
       00          
0439C7 74 69 6C 65 0293*   fn_dg_135: db "tiles/dg/0/135.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 35 2E 72 
       67 62 61 32 
       00          
0439DC 74 69 6C 65 0294*   fn_dg_136: db "tiles/dg/0/136.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0439F1 74 69 6C 65 0295*   fn_dg_137: db "tiles/dg/0/137.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 37 2E 72 
       67 62 61 32 
       00          
043A06 74 69 6C 65 0296*   fn_dg_138: db "tiles/dg/0/138.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 38 2E 72 
       67 62 61 32 
       00          
043A1B 74 69 6C 65 0297*   fn_dg_139: db "tiles/dg/0/139.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       33 39 2E 72 
       67 62 61 32 
       00          
043A30 74 69 6C 65 0298*   fn_dg_140: db "tiles/dg/0/140.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 30 2E 72 
       67 62 61 32 
       00          
043A45 74 69 6C 65 0299*   fn_dg_145: db "tiles/dg/0/145.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 35 2E 72 
       67 62 61 32 
       00          
043A5A 74 69 6C 65 0300*   fn_dg_146: db "tiles/dg/0/146.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 36 2E 72 
       67 62 61 32 
       00          
043A6F 74 69 6C 65 0301*   fn_dg_147: db "tiles/dg/0/147.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 37 2E 72 
       67 62 61 32 
       00          
043A84 74 69 6C 65 0302*   fn_dg_148: db "tiles/dg/0/148.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 38 2E 72 
       67 62 61 32 
       00          
043A99 74 69 6C 65 0303*   fn_dg_149: db "tiles/dg/0/149.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       34 39 2E 72 
       67 62 61 32 
       00          
043AAE 74 69 6C 65 0304*   fn_dg_150: db "tiles/dg/0/150.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 30 2E 72 
       67 62 61 32 
       00          
043AC3 74 69 6C 65 0305*   fn_dg_151: db "tiles/dg/0/151.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 31 2E 72 
       67 62 61 32 
       00          
043AD8 74 69 6C 65 0306*   fn_dg_152: db "tiles/dg/0/152.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
043AED 74 69 6C 65 0307*   fn_dg_153: db "tiles/dg/0/153.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 33 2E 72 
       67 62 61 32 
       00          
043B02 74 69 6C 65 0308*   fn_dg_154: db "tiles/dg/0/154.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 34 2E 72 
       67 62 61 32 
       00          
043B17 74 69 6C 65 0309*   fn_dg_155: db "tiles/dg/0/155.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 35 2E 72 
       67 62 61 32 
       00          
043B2C 74 69 6C 65 0310*   fn_dg_156: db "tiles/dg/0/156.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       35 36 2E 72 
       67 62 61 32 
       00          
043B41 74 69 6C 65 0311*   fn_dg_161: db "tiles/dg/0/161.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 31 2E 72 
       67 62 61 32 
       00          
043B56 74 69 6C 65 0312*   fn_dg_162: db "tiles/dg/0/162.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 32 2E 72 
       67 62 61 32 
       00          
043B6B 74 69 6C 65 0313*   fn_dg_163: db "tiles/dg/0/163.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 33 2E 72 
       67 62 61 32 
       00          
043B80 74 69 6C 65 0314*   fn_dg_164: db "tiles/dg/0/164.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 34 2E 72 
       67 62 61 32 
       00          
043B95 74 69 6C 65 0315*   fn_dg_165: db "tiles/dg/0/165.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 35 2E 72 
       67 62 61 32 
       00          
043BAA 74 69 6C 65 0316*   fn_dg_166: db "tiles/dg/0/166.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 36 2E 72 
       67 62 61 32 
       00          
043BBF 74 69 6C 65 0317*   fn_dg_167: db "tiles/dg/0/167.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 37 2E 72 
       67 62 61 32 
       00          
043BD4 74 69 6C 65 0318*   fn_dg_168: db "tiles/dg/0/168.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
043BE9 74 69 6C 65 0319*   fn_dg_169: db "tiles/dg/0/169.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       36 39 2E 72 
       67 62 61 32 
       00          
043BFE 74 69 6C 65 0320*   fn_dg_170: db "tiles/dg/0/170.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 30 2E 72 
       67 62 61 32 
       00          
043C13 74 69 6C 65 0321*   fn_dg_171: db "tiles/dg/0/171.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 31 2E 72 
       67 62 61 32 
       00          
043C28 74 69 6C 65 0322*   fn_dg_172: db "tiles/dg/0/172.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 32 2E 72 
       67 62 61 32 
       00          
043C3D 74 69 6C 65 0323*   fn_dg_174: db "tiles/dg/0/174.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 34 2E 72 
       67 62 61 32 
       00          
043C52 74 69 6C 65 0324*   fn_dg_175: db "tiles/dg/0/175.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 35 2E 72 
       67 62 61 32 
       00          
043C67 74 69 6C 65 0325*   fn_dg_176: db "tiles/dg/0/176.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
043C7C 74 69 6C 65 0326*   fn_dg_177: db "tiles/dg/0/177.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 37 2E 72 
       67 62 61 32 
       00          
043C91 74 69 6C 65 0327*   fn_dg_178: db "tiles/dg/0/178.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 38 2E 72 
       67 62 61 32 
       00          
043CA6 74 69 6C 65 0328*   fn_dg_179: db "tiles/dg/0/179.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       37 39 2E 72 
       67 62 61 32 
       00          
043CBB 74 69 6C 65 0329*   fn_dg_180: db "tiles/dg/0/180.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 30 2E 72 
       67 62 61 32 
       00          
043CD0 74 69 6C 65 0330*   fn_dg_181: db "tiles/dg/0/181.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 31 2E 72 
       67 62 61 32 
       00          
043CE5 74 69 6C 65 0331*   fn_dg_182: db "tiles/dg/0/182.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 32 2E 72 
       67 62 61 32 
       00          
043CFA 74 69 6C 65 0332*   fn_dg_183: db "tiles/dg/0/183.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 33 2E 72 
       67 62 61 32 
       00          
043D0F 74 69 6C 65 0333*   fn_dg_184: db "tiles/dg/0/184.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
043D24 74 69 6C 65 0334*   fn_dg_185: db "tiles/dg/0/185.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 35 2E 72 
       67 62 61 32 
       00          
043D39 74 69 6C 65 0335*   fn_dg_186: db "tiles/dg/0/186.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 36 2E 72 
       67 62 61 32 
       00          
043D4E 74 69 6C 65 0336*   fn_dg_187: db "tiles/dg/0/187.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 37 2E 72 
       67 62 61 32 
       00          
043D63 74 69 6C 65 0337*   fn_dg_188: db "tiles/dg/0/188.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       38 38 2E 72 
       67 62 61 32 
       00          
043D78 74 69 6C 65 0338*   fn_dg_190: db "tiles/dg/0/190.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 30 2E 72 
       67 62 61 32 
       00          
043D8D 74 69 6C 65 0339*   fn_dg_191: db "tiles/dg/0/191.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 31 2E 72 
       67 62 61 32 
       00          
043DA2 74 69 6C 65 0340*   fn_dg_192: db "tiles/dg/0/192.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
043DB7 74 69 6C 65 0341*   fn_dg_193: db "tiles/dg/0/193.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 33 2E 72 
       67 62 61 32 
       00          
043DCC 74 69 6C 65 0342*   fn_dg_194: db "tiles/dg/0/194.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 34 2E 72 
       67 62 61 32 
       00          
043DE1 74 69 6C 65 0343*   fn_dg_195: db "tiles/dg/0/195.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 35 2E 72 
       67 62 61 32 
       00          
043DF6 74 69 6C 65 0344*   fn_dg_196: db "tiles/dg/0/196.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 36 2E 72 
       67 62 61 32 
       00          
043E0B 74 69 6C 65 0345*   fn_dg_197: db "tiles/dg/0/197.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 37 2E 72 
       67 62 61 32 
       00          
043E20 74 69 6C 65 0346*   fn_dg_198: db "tiles/dg/0/198.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 38 2E 72 
       67 62 61 32 
       00          
043E35 74 69 6C 65 0347*   fn_dg_199: db "tiles/dg/0/199.rgba2",0
       73 2F 64 67 
       2F 30 2F 31 
       39 39 2E 72 
       67 62 61 32 
       00          
043E4A 74 69 6C 65 0348*   fn_dg_200: db "tiles/dg/0/200.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
043E5F 74 69 6C 65 0349*   fn_dg_201: db "tiles/dg/0/201.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 31 2E 72 
       67 62 61 32 
       00          
043E74 74 69 6C 65 0350*   fn_dg_202: db "tiles/dg/0/202.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 32 2E 72 
       67 62 61 32 
       00          
043E89 74 69 6C 65 0351*   fn_dg_203: db "tiles/dg/0/203.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 33 2E 72 
       67 62 61 32 
       00          
043E9E 74 69 6C 65 0352*   fn_dg_204: db "tiles/dg/0/204.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 34 2E 72 
       67 62 61 32 
       00          
043EB3 74 69 6C 65 0353*   fn_dg_206: db "tiles/dg/0/206.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 36 2E 72 
       67 62 61 32 
       00          
043EC8 74 69 6C 65 0354*   fn_dg_207: db "tiles/dg/0/207.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 37 2E 72 
       67 62 61 32 
       00          
043EDD 74 69 6C 65 0355*   fn_dg_208: db "tiles/dg/0/208.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
043EF2 74 69 6C 65 0356*   fn_dg_209: db "tiles/dg/0/209.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       30 39 2E 72 
       67 62 61 32 
       00          
043F07 74 69 6C 65 0357*   fn_dg_210: db "tiles/dg/0/210.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 30 2E 72 
       67 62 61 32 
       00          
043F1C 74 69 6C 65 0358*   fn_dg_211: db "tiles/dg/0/211.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 31 2E 72 
       67 62 61 32 
       00          
043F31 74 69 6C 65 0359*   fn_dg_212: db "tiles/dg/0/212.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 32 2E 72 
       67 62 61 32 
       00          
043F46 74 69 6C 65 0360*   fn_dg_213: db "tiles/dg/0/213.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 33 2E 72 
       67 62 61 32 
       00          
043F5B 74 69 6C 65 0361*   fn_dg_214: db "tiles/dg/0/214.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 34 2E 72 
       67 62 61 32 
       00          
043F70 74 69 6C 65 0362*   fn_dg_215: db "tiles/dg/0/215.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 35 2E 72 
       67 62 61 32 
       00          
043F85 74 69 6C 65 0363*   fn_dg_216: db "tiles/dg/0/216.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
043F9A 74 69 6C 65 0364*   fn_dg_217: db "tiles/dg/0/217.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 37 2E 72 
       67 62 61 32 
       00          
043FAF 74 69 6C 65 0365*   fn_dg_218: db "tiles/dg/0/218.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 38 2E 72 
       67 62 61 32 
       00          
043FC4 74 69 6C 65 0366*   fn_dg_219: db "tiles/dg/0/219.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       31 39 2E 72 
       67 62 61 32 
       00          
043FD9 74 69 6C 65 0367*   fn_dg_220: db "tiles/dg/0/220.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 30 2E 72 
       67 62 61 32 
       00          
043FEE 74 69 6C 65 0368*   fn_dg_225: db "tiles/dg/0/225.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 35 2E 72 
       67 62 61 32 
       00          
044003 74 69 6C 65 0369*   fn_dg_226: db "tiles/dg/0/226.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 36 2E 72 
       67 62 61 32 
       00          
044018 74 69 6C 65 0370*   fn_dg_227: db "tiles/dg/0/227.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 37 2E 72 
       67 62 61 32 
       00          
04402D 74 69 6C 65 0371*   fn_dg_228: db "tiles/dg/0/228.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 38 2E 72 
       67 62 61 32 
       00          
044042 74 69 6C 65 0372*   fn_dg_229: db "tiles/dg/0/229.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       32 39 2E 72 
       67 62 61 32 
       00          
044057 74 69 6C 65 0373*   fn_dg_230: db "tiles/dg/0/230.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 30 2E 72 
       67 62 61 32 
       00          
04406C 74 69 6C 65 0374*   fn_dg_231: db "tiles/dg/0/231.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 31 2E 72 
       67 62 61 32 
       00          
044081 74 69 6C 65 0375*   fn_dg_232: db "tiles/dg/0/232.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
044096 74 69 6C 65 0376*   fn_dg_233: db "tiles/dg/0/233.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 33 2E 72 
       67 62 61 32 
       00          
0440AB 74 69 6C 65 0377*   fn_dg_234: db "tiles/dg/0/234.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 34 2E 72 
       67 62 61 32 
       00          
0440C0 74 69 6C 65 0378*   fn_dg_235: db "tiles/dg/0/235.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 35 2E 72 
       67 62 61 32 
       00          
0440D5 74 69 6C 65 0379*   fn_dg_236: db "tiles/dg/0/236.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       33 36 2E 72 
       67 62 61 32 
       00          
0440EA 74 69 6C 65 0380*   fn_dg_241: db "tiles/dg/0/241.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 31 2E 72 
       67 62 61 32 
       00          
0440FF 74 69 6C 65 0381*   fn_dg_242: db "tiles/dg/0/242.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 32 2E 72 
       67 62 61 32 
       00          
044114 74 69 6C 65 0382*   fn_dg_245: db "tiles/dg/0/245.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 35 2E 72 
       67 62 61 32 
       00          
044129 74 69 6C 65 0383*   fn_dg_246: db "tiles/dg/0/246.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 36 2E 72 
       67 62 61 32 
       00          
04413E 74 69 6C 65 0384*   fn_dg_248: db "tiles/dg/0/248.rgba2",0
       73 2F 64 67 
       2F 30 2F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
044153             0054        include "images_sprites.inc"
044153             0001*   ; Generated by make_images.py
044153             0002*   
044153             0003*   sprites_num_images: equ 156
044153             0004*   
044153             0005*   ; buffer_ids:
044153             0006*   BUF_CRATER: equ 256
044153             0007*   BUF_CRATER_0: equ 257
044153             0008*   BUF_CRATER_1: equ 258
044153             0009*   BUF_CRATER_2: equ 259
044153             0010*   BUF_CRATER_3: equ 260
044153             0011*   BUF_EXPLOSION_A: equ 261
044153             0012*   BUF_EXPLOSION_B: equ 262
044153             0013*   BUF_EXPLOSION_C: equ 263
044153             0014*   BUF_EXPLOSION_D: equ 264
044153             0015*   BUF_EXPLOSION_E: equ 265
044153             0016*   BUF_FIREBALL_2_000: equ 266
044153             0017*   BUF_FIREBALL_2_008: equ 267
044153             0018*   BUF_FIREBALL_2_016: equ 268
044153             0019*   BUF_FIREBALL_2_024: equ 269
044153             0020*   BUF_FIREBALL_2_032: equ 270
044153             0021*   BUF_FIREBALL_2_040: equ 271
044153             0022*   BUF_FIREBALL_2_048: equ 272
044153             0023*   BUF_FIREBALL_2_056: equ 273
044153             0024*   BUF_FIREBALL_2_064: equ 274
044153             0025*   BUF_FIREBALL_2_072: equ 275
044153             0026*   BUF_FIREBALL_2_080: equ 276
044153             0027*   BUF_FIREBALL_2_088: equ 277
044153             0028*   BUF_FIREBALL_2_096: equ 278
044153             0029*   BUF_FIREBALL_2_104: equ 279
044153             0030*   BUF_FIREBALL_2_112: equ 280
044153             0031*   BUF_FIREBALL_2_120: equ 281
044153             0032*   BUF_FIREBALL_2_128: equ 282
044153             0033*   BUF_FIREBALL_2_136: equ 283
044153             0034*   BUF_FIREBALL_2_144: equ 284
044153             0035*   BUF_FIREBALL_2_152: equ 285
044153             0036*   BUF_FIREBALL_2_160: equ 286
044153             0037*   BUF_FIREBALL_2_168: equ 287
044153             0038*   BUF_FIREBALL_2_176: equ 288
044153             0039*   BUF_FIREBALL_2_184: equ 289
044153             0040*   BUF_FIREBALL_2_192: equ 290
044153             0041*   BUF_FIREBALL_2_200: equ 291
044153             0042*   BUF_FIREBALL_2_208: equ 292
044153             0043*   BUF_FIREBALL_2_216: equ 293
044153             0044*   BUF_FIREBALL_2_224: equ 294
044153             0045*   BUF_FIREBALL_2_232: equ 295
044153             0046*   BUF_FIREBALL_2_240: equ 296
044153             0047*   BUF_FIREBALL_2_248: equ 297
044153             0048*   BUF_FIREBALL_3_000: equ 298
044153             0049*   BUF_FIREBALL_3_008: equ 299
044153             0050*   BUF_FIREBALL_3_016: equ 300
044153             0051*   BUF_FIREBALL_3_024: equ 301
044153             0052*   BUF_FIREBALL_3_032: equ 302
044153             0053*   BUF_FIREBALL_3_040: equ 303
044153             0054*   BUF_FIREBALL_3_048: equ 304
044153             0055*   BUF_FIREBALL_3_056: equ 305
044153             0056*   BUF_FIREBALL_3_064: equ 306
044153             0057*   BUF_FIREBALL_3_072: equ 307
044153             0058*   BUF_FIREBALL_3_080: equ 308
044153             0059*   BUF_FIREBALL_3_088: equ 309
044153             0060*   BUF_FIREBALL_3_096: equ 310
044153             0061*   BUF_FIREBALL_3_104: equ 311
044153             0062*   BUF_FIREBALL_3_112: equ 312
044153             0063*   BUF_FIREBALL_3_120: equ 313
044153             0064*   BUF_FIREBALL_3_128: equ 314
044153             0065*   BUF_FIREBALL_3_136: equ 315
044153             0066*   BUF_FIREBALL_3_144: equ 316
044153             0067*   BUF_FIREBALL_3_152: equ 317
044153             0068*   BUF_FIREBALL_3_160: equ 318
044153             0069*   BUF_FIREBALL_3_168: equ 319
044153             0070*   BUF_FIREBALL_3_176: equ 320
044153             0071*   BUF_FIREBALL_3_184: equ 321
044153             0072*   BUF_FIREBALL_3_192: equ 322
044153             0073*   BUF_FIREBALL_3_200: equ 323
044153             0074*   BUF_FIREBALL_3_208: equ 324
044153             0075*   BUF_FIREBALL_3_216: equ 325
044153             0076*   BUF_FIREBALL_3_224: equ 326
044153             0077*   BUF_FIREBALL_3_232: equ 327
044153             0078*   BUF_FIREBALL_3_240: equ 328
044153             0079*   BUF_FIREBALL_3_248: equ 329
044153             0080*   BUF_LASER_A: equ 330
044153             0081*   BUF_LASER_B: equ 331
044153             0082*   BUF_LIGHTNING_H_0: equ 332
044153             0083*   BUF_LIGHTNING_H_1: equ 333
044153             0084*   BUF_PAD: equ 334
044153             0085*   BUF_SEEKER_000: equ 335
044153             0086*   BUF_SEEKER_008: equ 336
044153             0087*   BUF_SEEKER_016: equ 337
044153             0088*   BUF_SEEKER_024: equ 338
044153             0089*   BUF_SEEKER_032: equ 339
044153             0090*   BUF_SEEKER_040: equ 340
044153             0091*   BUF_SEEKER_048: equ 341
044153             0092*   BUF_SEEKER_056: equ 342
044153             0093*   BUF_SEEKER_064: equ 343
044153             0094*   BUF_SEEKER_072: equ 344
044153             0095*   BUF_SEEKER_080: equ 345
044153             0096*   BUF_SEEKER_088: equ 346
044153             0097*   BUF_SEEKER_096: equ 347
044153             0098*   BUF_SEEKER_104: equ 348
044153             0099*   BUF_SEEKER_112: equ 349
044153             0100*   BUF_SEEKER_120: equ 350
044153             0101*   BUF_SEEKER_128: equ 351
044153             0102*   BUF_SEEKER_136: equ 352
044153             0103*   BUF_SEEKER_144: equ 353
044153             0104*   BUF_SEEKER_152: equ 354
044153             0105*   BUF_SEEKER_160: equ 355
044153             0106*   BUF_SEEKER_168: equ 356
044153             0107*   BUF_SEEKER_176: equ 357
044153             0108*   BUF_SEEKER_184: equ 358
044153             0109*   BUF_SEEKER_192: equ 359
044153             0110*   BUF_SEEKER_200: equ 360
044153             0111*   BUF_SEEKER_208: equ 361
044153             0112*   BUF_SEEKER_216: equ 362
044153             0113*   BUF_SEEKER_224: equ 363
044153             0114*   BUF_SEEKER_232: equ 364
044153             0115*   BUF_SEEKER_240: equ 365
044153             0116*   BUF_SEEKER_248: equ 366
044153             0117*   BUF_SHIP_0L: equ 367
044153             0118*   BUF_SHIP_1C: equ 368
044153             0119*   BUF_SHIP_2R: equ 369
044153             0120*   BUF_TEST_STRIPES: equ 370
044153             0121*   BUF_TILE_BLANK: equ 371
044153             0122*   BUF_TILE_PAD_0: equ 372
044153             0123*   BUF_TILE_PAD_1: equ 373
044153             0124*   BUF_TILE_PAD_2: equ 374
044153             0125*   BUF_TILE_PAD_3: equ 375
044153             0126*   BUF_TILE_PAD_4: equ 376
044153             0127*   BUF_TILE_PAD_5: equ 377
044153             0128*   BUF_TILE_PAD_6: equ 378
044153             0129*   BUF_TILE_PAD_7: equ 379
044153             0130*   BUF_TURRET_000: equ 380
044153             0131*   BUF_TURRET_008: equ 381
044153             0132*   BUF_TURRET_016: equ 382
044153             0133*   BUF_TURRET_024: equ 383
044153             0134*   BUF_TURRET_032: equ 384
044153             0135*   BUF_TURRET_040: equ 385
044153             0136*   BUF_TURRET_048: equ 386
044153             0137*   BUF_TURRET_056: equ 387
044153             0138*   BUF_TURRET_064: equ 388
044153             0139*   BUF_TURRET_072: equ 389
044153             0140*   BUF_TURRET_080: equ 390
044153             0141*   BUF_TURRET_088: equ 391
044153             0142*   BUF_TURRET_096: equ 392
044153             0143*   BUF_TURRET_104: equ 393
044153             0144*   BUF_TURRET_112: equ 394
044153             0145*   BUF_TURRET_120: equ 395
044153             0146*   BUF_TURRET_128: equ 396
044153             0147*   BUF_TURRET_136: equ 397
044153             0148*   BUF_TURRET_144: equ 398
044153             0149*   BUF_TURRET_152: equ 399
044153             0150*   BUF_TURRET_160: equ 400
044153             0151*   BUF_TURRET_168: equ 401
044153             0152*   BUF_TURRET_176: equ 402
044153             0153*   BUF_TURRET_184: equ 403
044153             0154*   BUF_TURRET_192: equ 404
044153             0155*   BUF_TURRET_200: equ 405
044153             0156*   BUF_TURRET_208: equ 406
044153             0157*   BUF_TURRET_216: equ 407
044153             0158*   BUF_TURRET_224: equ 408
044153             0159*   BUF_TURRET_232: equ 409
044153             0160*   BUF_TURRET_240: equ 410
044153             0161*   BUF_TURRET_248: equ 411
044153             0162*   
044153             0163*   sprites_image_list: ; type; width; height; size; filename; bufferId:
044153 01 00 00 10 0164*   	dl 1, 16, 16, 256, fn_crater, 256
       00 00 10 00 
       00 00 01 00 
       4B 4C 04 00 
       01 00       
044165 01 00 00 10 0165*   	dl 1, 16, 16, 256, fn_crater_0, 257
       00 00 10 00 
       00 00 01 00 
       60 4C 04 01 
       01 00       
044177 01 00 00 10 0166*   	dl 1, 16, 16, 256, fn_crater_1, 258
       00 00 10 00 
       00 00 01 00 
       77 4C 04 02 
       01 00       
044189 01 00 00 10 0167*   	dl 1, 16, 16, 256, fn_crater_2, 259
       00 00 10 00 
       00 00 01 00 
       8E 4C 04 03 
       01 00       
04419B 01 00 00 10 0168*   	dl 1, 16, 16, 256, fn_crater_3, 260
       00 00 10 00 
       00 00 01 00 
       A5 4C 04 04 
       01 00       
0441AD 01 00 00 10 0169*   	dl 1, 16, 16, 256, fn_explosion_a, 261
       00 00 10 00 
       00 00 01 00 
       BC 4C 04 05 
       01 00       
0441BF 01 00 00 10 0170*   	dl 1, 16, 16, 256, fn_explosion_b, 262
       00 00 10 00 
       00 00 01 00 
       D6 4C 04 06 
       01 00       
0441D1 01 00 00 10 0171*   	dl 1, 16, 16, 256, fn_explosion_c, 263
       00 00 10 00 
       00 00 01 00 
       F0 4C 04 07 
       01 00       
0441E3 01 00 00 10 0172*   	dl 1, 16, 16, 256, fn_explosion_d, 264
       00 00 10 00 
       00 00 01 00 
       0A 4D 04 08 
       01 00       
0441F5 01 00 00 10 0173*   	dl 1, 16, 16, 256, fn_explosion_e, 265
       00 00 10 00 
       00 00 01 00 
       24 4D 04 09 
       01 00       
044207 01 00 00 10 0174*   	dl 1, 16, 16, 256, fn_fireball_2_000, 266
       00 00 10 00 
       00 00 01 00 
       3E 4D 04 0A 
       01 00       
044219 01 00 00 10 0175*   	dl 1, 16, 16, 256, fn_fireball_2_008, 267
       00 00 10 00 
       00 00 01 00 
       5B 4D 04 0B 
       01 00       
04422B 01 00 00 10 0176*   	dl 1, 16, 16, 256, fn_fireball_2_016, 268
       00 00 10 00 
       00 00 01 00 
       78 4D 04 0C 
       01 00       
04423D 01 00 00 10 0177*   	dl 1, 16, 16, 256, fn_fireball_2_024, 269
       00 00 10 00 
       00 00 01 00 
       95 4D 04 0D 
       01 00       
04424F 01 00 00 10 0178*   	dl 1, 16, 16, 256, fn_fireball_2_032, 270
       00 00 10 00 
       00 00 01 00 
       B2 4D 04 0E 
       01 00       
044261 01 00 00 10 0179*   	dl 1, 16, 16, 256, fn_fireball_2_040, 271
       00 00 10 00 
       00 00 01 00 
       CF 4D 04 0F 
       01 00       
044273 01 00 00 10 0180*   	dl 1, 16, 16, 256, fn_fireball_2_048, 272
       00 00 10 00 
       00 00 01 00 
       EC 4D 04 10 
       01 00       
044285 01 00 00 10 0181*   	dl 1, 16, 16, 256, fn_fireball_2_056, 273
       00 00 10 00 
       00 00 01 00 
       09 4E 04 11 
       01 00       
044297 01 00 00 10 0182*   	dl 1, 16, 16, 256, fn_fireball_2_064, 274
       00 00 10 00 
       00 00 01 00 
       26 4E 04 12 
       01 00       
0442A9 01 00 00 10 0183*   	dl 1, 16, 16, 256, fn_fireball_2_072, 275
       00 00 10 00 
       00 00 01 00 
       43 4E 04 13 
       01 00       
0442BB 01 00 00 10 0184*   	dl 1, 16, 16, 256, fn_fireball_2_080, 276
       00 00 10 00 
       00 00 01 00 
       60 4E 04 14 
       01 00       
0442CD 01 00 00 10 0185*   	dl 1, 16, 16, 256, fn_fireball_2_088, 277
       00 00 10 00 
       00 00 01 00 
       7D 4E 04 15 
       01 00       
0442DF 01 00 00 10 0186*   	dl 1, 16, 16, 256, fn_fireball_2_096, 278
       00 00 10 00 
       00 00 01 00 
       9A 4E 04 16 
       01 00       
0442F1 01 00 00 10 0187*   	dl 1, 16, 16, 256, fn_fireball_2_104, 279
       00 00 10 00 
       00 00 01 00 
       B7 4E 04 17 
       01 00       
044303 01 00 00 10 0188*   	dl 1, 16, 16, 256, fn_fireball_2_112, 280
       00 00 10 00 
       00 00 01 00 
       D4 4E 04 18 
       01 00       
044315 01 00 00 10 0189*   	dl 1, 16, 16, 256, fn_fireball_2_120, 281
       00 00 10 00 
       00 00 01 00 
       F1 4E 04 19 
       01 00       
044327 01 00 00 10 0190*   	dl 1, 16, 16, 256, fn_fireball_2_128, 282
       00 00 10 00 
       00 00 01 00 
       0E 4F 04 1A 
       01 00       
044339 01 00 00 10 0191*   	dl 1, 16, 16, 256, fn_fireball_2_136, 283
       00 00 10 00 
       00 00 01 00 
       2B 4F 04 1B 
       01 00       
04434B 01 00 00 10 0192*   	dl 1, 16, 16, 256, fn_fireball_2_144, 284
       00 00 10 00 
       00 00 01 00 
       48 4F 04 1C 
       01 00       
04435D 01 00 00 10 0193*   	dl 1, 16, 16, 256, fn_fireball_2_152, 285
       00 00 10 00 
       00 00 01 00 
       65 4F 04 1D 
       01 00       
04436F 01 00 00 10 0194*   	dl 1, 16, 16, 256, fn_fireball_2_160, 286
       00 00 10 00 
       00 00 01 00 
       82 4F 04 1E 
       01 00       
044381 01 00 00 10 0195*   	dl 1, 16, 16, 256, fn_fireball_2_168, 287
       00 00 10 00 
       00 00 01 00 
       9F 4F 04 1F 
       01 00       
044393 01 00 00 10 0196*   	dl 1, 16, 16, 256, fn_fireball_2_176, 288
       00 00 10 00 
       00 00 01 00 
       BC 4F 04 20 
       01 00       
0443A5 01 00 00 10 0197*   	dl 1, 16, 16, 256, fn_fireball_2_184, 289
       00 00 10 00 
       00 00 01 00 
       D9 4F 04 21 
       01 00       
0443B7 01 00 00 10 0198*   	dl 1, 16, 16, 256, fn_fireball_2_192, 290
       00 00 10 00 
       00 00 01 00 
       F6 4F 04 22 
       01 00       
0443C9 01 00 00 10 0199*   	dl 1, 16, 16, 256, fn_fireball_2_200, 291
       00 00 10 00 
       00 00 01 00 
       13 50 04 23 
       01 00       
0443DB 01 00 00 10 0200*   	dl 1, 16, 16, 256, fn_fireball_2_208, 292
       00 00 10 00 
       00 00 01 00 
       30 50 04 24 
       01 00       
0443ED 01 00 00 10 0201*   	dl 1, 16, 16, 256, fn_fireball_2_216, 293
       00 00 10 00 
       00 00 01 00 
       4D 50 04 25 
       01 00       
0443FF 01 00 00 10 0202*   	dl 1, 16, 16, 256, fn_fireball_2_224, 294
       00 00 10 00 
       00 00 01 00 
       6A 50 04 26 
       01 00       
044411 01 00 00 10 0203*   	dl 1, 16, 16, 256, fn_fireball_2_232, 295
       00 00 10 00 
       00 00 01 00 
       87 50 04 27 
       01 00       
044423 01 00 00 10 0204*   	dl 1, 16, 16, 256, fn_fireball_2_240, 296
       00 00 10 00 
       00 00 01 00 
       A4 50 04 28 
       01 00       
044435 01 00 00 10 0205*   	dl 1, 16, 16, 256, fn_fireball_2_248, 297
       00 00 10 00 
       00 00 01 00 
       C1 50 04 29 
       01 00       
044447 01 00 00 10 0206*   	dl 1, 16, 16, 256, fn_fireball_3_000, 298
       00 00 10 00 
       00 00 01 00 
       DE 50 04 2A 
       01 00       
044459 01 00 00 10 0207*   	dl 1, 16, 16, 256, fn_fireball_3_008, 299
       00 00 10 00 
       00 00 01 00 
       FB 50 04 2B 
       01 00       
04446B 01 00 00 10 0208*   	dl 1, 16, 16, 256, fn_fireball_3_016, 300
       00 00 10 00 
       00 00 01 00 
       18 51 04 2C 
       01 00       
04447D 01 00 00 10 0209*   	dl 1, 16, 16, 256, fn_fireball_3_024, 301
       00 00 10 00 
       00 00 01 00 
       35 51 04 2D 
       01 00       
04448F 01 00 00 10 0210*   	dl 1, 16, 16, 256, fn_fireball_3_032, 302
       00 00 10 00 
       00 00 01 00 
       52 51 04 2E 
       01 00       
0444A1 01 00 00 10 0211*   	dl 1, 16, 16, 256, fn_fireball_3_040, 303
       00 00 10 00 
       00 00 01 00 
       6F 51 04 2F 
       01 00       
0444B3 01 00 00 10 0212*   	dl 1, 16, 16, 256, fn_fireball_3_048, 304
       00 00 10 00 
       00 00 01 00 
       8C 51 04 30 
       01 00       
0444C5 01 00 00 10 0213*   	dl 1, 16, 16, 256, fn_fireball_3_056, 305
       00 00 10 00 
       00 00 01 00 
       A9 51 04 31 
       01 00       
0444D7 01 00 00 10 0214*   	dl 1, 16, 16, 256, fn_fireball_3_064, 306
       00 00 10 00 
       00 00 01 00 
       C6 51 04 32 
       01 00       
0444E9 01 00 00 10 0215*   	dl 1, 16, 16, 256, fn_fireball_3_072, 307
       00 00 10 00 
       00 00 01 00 
       E3 51 04 33 
       01 00       
0444FB 01 00 00 10 0216*   	dl 1, 16, 16, 256, fn_fireball_3_080, 308
       00 00 10 00 
       00 00 01 00 
       00 52 04 34 
       01 00       
04450D 01 00 00 10 0217*   	dl 1, 16, 16, 256, fn_fireball_3_088, 309
       00 00 10 00 
       00 00 01 00 
       1D 52 04 35 
       01 00       
04451F 01 00 00 10 0218*   	dl 1, 16, 16, 256, fn_fireball_3_096, 310
       00 00 10 00 
       00 00 01 00 
       3A 52 04 36 
       01 00       
044531 01 00 00 10 0219*   	dl 1, 16, 16, 256, fn_fireball_3_104, 311
       00 00 10 00 
       00 00 01 00 
       57 52 04 37 
       01 00       
044543 01 00 00 10 0220*   	dl 1, 16, 16, 256, fn_fireball_3_112, 312
       00 00 10 00 
       00 00 01 00 
       74 52 04 38 
       01 00       
044555 01 00 00 10 0221*   	dl 1, 16, 16, 256, fn_fireball_3_120, 313
       00 00 10 00 
       00 00 01 00 
       91 52 04 39 
       01 00       
044567 01 00 00 10 0222*   	dl 1, 16, 16, 256, fn_fireball_3_128, 314
       00 00 10 00 
       00 00 01 00 
       AE 52 04 3A 
       01 00       
044579 01 00 00 10 0223*   	dl 1, 16, 16, 256, fn_fireball_3_136, 315
       00 00 10 00 
       00 00 01 00 
       CB 52 04 3B 
       01 00       
04458B 01 00 00 10 0224*   	dl 1, 16, 16, 256, fn_fireball_3_144, 316
       00 00 10 00 
       00 00 01 00 
       E8 52 04 3C 
       01 00       
04459D 01 00 00 10 0225*   	dl 1, 16, 16, 256, fn_fireball_3_152, 317
       00 00 10 00 
       00 00 01 00 
       05 53 04 3D 
       01 00       
0445AF 01 00 00 10 0226*   	dl 1, 16, 16, 256, fn_fireball_3_160, 318
       00 00 10 00 
       00 00 01 00 
       22 53 04 3E 
       01 00       
0445C1 01 00 00 10 0227*   	dl 1, 16, 16, 256, fn_fireball_3_168, 319
       00 00 10 00 
       00 00 01 00 
       3F 53 04 3F 
       01 00       
0445D3 01 00 00 10 0228*   	dl 1, 16, 16, 256, fn_fireball_3_176, 320
       00 00 10 00 
       00 00 01 00 
       5C 53 04 40 
       01 00       
0445E5 01 00 00 10 0229*   	dl 1, 16, 16, 256, fn_fireball_3_184, 321
       00 00 10 00 
       00 00 01 00 
       79 53 04 41 
       01 00       
0445F7 01 00 00 10 0230*   	dl 1, 16, 16, 256, fn_fireball_3_192, 322
       00 00 10 00 
       00 00 01 00 
       96 53 04 42 
       01 00       
044609 01 00 00 10 0231*   	dl 1, 16, 16, 256, fn_fireball_3_200, 323
       00 00 10 00 
       00 00 01 00 
       B3 53 04 43 
       01 00       
04461B 01 00 00 10 0232*   	dl 1, 16, 16, 256, fn_fireball_3_208, 324
       00 00 10 00 
       00 00 01 00 
       D0 53 04 44 
       01 00       
04462D 01 00 00 10 0233*   	dl 1, 16, 16, 256, fn_fireball_3_216, 325
       00 00 10 00 
       00 00 01 00 
       ED 53 04 45 
       01 00       
04463F 01 00 00 10 0234*   	dl 1, 16, 16, 256, fn_fireball_3_224, 326
       00 00 10 00 
       00 00 01 00 
       0A 54 04 46 
       01 00       
044651 01 00 00 10 0235*   	dl 1, 16, 16, 256, fn_fireball_3_232, 327
       00 00 10 00 
       00 00 01 00 
       27 54 04 47 
       01 00       
044663 01 00 00 10 0236*   	dl 1, 16, 16, 256, fn_fireball_3_240, 328
       00 00 10 00 
       00 00 01 00 
       44 54 04 48 
       01 00       
044675 01 00 00 10 0237*   	dl 1, 16, 16, 256, fn_fireball_3_248, 329
       00 00 10 00 
       00 00 01 00 
       61 54 04 49 
       01 00       
044687 01 00 00 05 0238*   	dl 1, 5, 13, 65, fn_laser_a, 330
       00 00 0D 00 
       00 41 00 00 
       7E 54 04 4A 
       01 00       
044699 01 00 00 05 0239*   	dl 1, 5, 13, 65, fn_laser_b, 331
       00 00 0D 00 
       00 41 00 00 
       94 54 04 4B 
       01 00       
0446AB 01 00 00 10 0240*   	dl 1, 16, 16, 256, fn_lightning_h_0, 332
       00 00 10 00 
       00 00 01 00 
       AA 54 04 4C 
       01 00       
0446BD 01 00 00 10 0241*   	dl 1, 16, 16, 256, fn_lightning_h_1, 333
       00 00 10 00 
       00 00 01 00 
       C6 54 04 4D 
       01 00       
0446CF 01 00 00 10 0242*   	dl 1, 16, 16, 256, fn_pad, 334
       00 00 10 00 
       00 00 01 00 
       E2 54 04 4E 
       01 00       
0446E1 01 00 00 10 0243*   	dl 1, 16, 16, 256, fn_seeker_000, 335
       00 00 10 00 
       00 00 01 00 
       F4 54 04 4F 
       01 00       
0446F3 01 00 00 10 0244*   	dl 1, 16, 16, 256, fn_seeker_008, 336
       00 00 10 00 
       00 00 01 00 
       0D 55 04 50 
       01 00       
044705 01 00 00 10 0245*   	dl 1, 16, 16, 256, fn_seeker_016, 337
       00 00 10 00 
       00 00 01 00 
       26 55 04 51 
       01 00       
044717 01 00 00 10 0246*   	dl 1, 16, 16, 256, fn_seeker_024, 338
       00 00 10 00 
       00 00 01 00 
       3F 55 04 52 
       01 00       
044729 01 00 00 10 0247*   	dl 1, 16, 16, 256, fn_seeker_032, 339
       00 00 10 00 
       00 00 01 00 
       58 55 04 53 
       01 00       
04473B 01 00 00 10 0248*   	dl 1, 16, 16, 256, fn_seeker_040, 340
       00 00 10 00 
       00 00 01 00 
       71 55 04 54 
       01 00       
04474D 01 00 00 10 0249*   	dl 1, 16, 16, 256, fn_seeker_048, 341
       00 00 10 00 
       00 00 01 00 
       8A 55 04 55 
       01 00       
04475F 01 00 00 10 0250*   	dl 1, 16, 16, 256, fn_seeker_056, 342
       00 00 10 00 
       00 00 01 00 
       A3 55 04 56 
       01 00       
044771 01 00 00 10 0251*   	dl 1, 16, 16, 256, fn_seeker_064, 343
       00 00 10 00 
       00 00 01 00 
       BC 55 04 57 
       01 00       
044783 01 00 00 10 0252*   	dl 1, 16, 16, 256, fn_seeker_072, 344
       00 00 10 00 
       00 00 01 00 
       D5 55 04 58 
       01 00       
044795 01 00 00 10 0253*   	dl 1, 16, 16, 256, fn_seeker_080, 345
       00 00 10 00 
       00 00 01 00 
       EE 55 04 59 
       01 00       
0447A7 01 00 00 10 0254*   	dl 1, 16, 16, 256, fn_seeker_088, 346
       00 00 10 00 
       00 00 01 00 
       07 56 04 5A 
       01 00       
0447B9 01 00 00 10 0255*   	dl 1, 16, 16, 256, fn_seeker_096, 347
       00 00 10 00 
       00 00 01 00 
       20 56 04 5B 
       01 00       
0447CB 01 00 00 10 0256*   	dl 1, 16, 16, 256, fn_seeker_104, 348
       00 00 10 00 
       00 00 01 00 
       39 56 04 5C 
       01 00       
0447DD 01 00 00 10 0257*   	dl 1, 16, 16, 256, fn_seeker_112, 349
       00 00 10 00 
       00 00 01 00 
       52 56 04 5D 
       01 00       
0447EF 01 00 00 10 0258*   	dl 1, 16, 16, 256, fn_seeker_120, 350
       00 00 10 00 
       00 00 01 00 
       6B 56 04 5E 
       01 00       
044801 01 00 00 10 0259*   	dl 1, 16, 16, 256, fn_seeker_128, 351
       00 00 10 00 
       00 00 01 00 
       84 56 04 5F 
       01 00       
044813 01 00 00 10 0260*   	dl 1, 16, 16, 256, fn_seeker_136, 352
       00 00 10 00 
       00 00 01 00 
       9D 56 04 60 
       01 00       
044825 01 00 00 10 0261*   	dl 1, 16, 16, 256, fn_seeker_144, 353
       00 00 10 00 
       00 00 01 00 
       B6 56 04 61 
       01 00       
044837 01 00 00 10 0262*   	dl 1, 16, 16, 256, fn_seeker_152, 354
       00 00 10 00 
       00 00 01 00 
       CF 56 04 62 
       01 00       
044849 01 00 00 10 0263*   	dl 1, 16, 16, 256, fn_seeker_160, 355
       00 00 10 00 
       00 00 01 00 
       E8 56 04 63 
       01 00       
04485B 01 00 00 10 0264*   	dl 1, 16, 16, 256, fn_seeker_168, 356
       00 00 10 00 
       00 00 01 00 
       01 57 04 64 
       01 00       
04486D 01 00 00 10 0265*   	dl 1, 16, 16, 256, fn_seeker_176, 357
       00 00 10 00 
       00 00 01 00 
       1A 57 04 65 
       01 00       
04487F 01 00 00 10 0266*   	dl 1, 16, 16, 256, fn_seeker_184, 358
       00 00 10 00 
       00 00 01 00 
       33 57 04 66 
       01 00       
044891 01 00 00 10 0267*   	dl 1, 16, 16, 256, fn_seeker_192, 359
       00 00 10 00 
       00 00 01 00 
       4C 57 04 67 
       01 00       
0448A3 01 00 00 10 0268*   	dl 1, 16, 16, 256, fn_seeker_200, 360
       00 00 10 00 
       00 00 01 00 
       65 57 04 68 
       01 00       
0448B5 01 00 00 10 0269*   	dl 1, 16, 16, 256, fn_seeker_208, 361
       00 00 10 00 
       00 00 01 00 
       7E 57 04 69 
       01 00       
0448C7 01 00 00 10 0270*   	dl 1, 16, 16, 256, fn_seeker_216, 362
       00 00 10 00 
       00 00 01 00 
       97 57 04 6A 
       01 00       
0448D9 01 00 00 10 0271*   	dl 1, 16, 16, 256, fn_seeker_224, 363
       00 00 10 00 
       00 00 01 00 
       B0 57 04 6B 
       01 00       
0448EB 01 00 00 10 0272*   	dl 1, 16, 16, 256, fn_seeker_232, 364
       00 00 10 00 
       00 00 01 00 
       C9 57 04 6C 
       01 00       
0448FD 01 00 00 10 0273*   	dl 1, 16, 16, 256, fn_seeker_240, 365
       00 00 10 00 
       00 00 01 00 
       E2 57 04 6D 
       01 00       
04490F 01 00 00 10 0274*   	dl 1, 16, 16, 256, fn_seeker_248, 366
       00 00 10 00 
       00 00 01 00 
       FB 57 04 6E 
       01 00       
044921 01 00 00 10 0275*   	dl 1, 16, 16, 256, fn_ship_0l, 367
       00 00 10 00 
       00 00 01 00 
       14 58 04 6F 
       01 00       
044933 01 00 00 10 0276*   	dl 1, 16, 16, 256, fn_ship_1c, 368
       00 00 10 00 
       00 00 01 00 
       2A 58 04 70 
       01 00       
044945 01 00 00 10 0277*   	dl 1, 16, 16, 256, fn_ship_2r, 369
       00 00 10 00 
       00 00 01 00 
       40 58 04 71 
       01 00       
044957 01 00 00 10 0278*   	dl 1, 16, 16, 256, fn_test_stripes, 370
       00 00 10 00 
       00 00 01 00 
       56 58 04 72 
       01 00       
044969 01 00 00 10 0279*   	dl 1, 16, 16, 256, fn_tile_blank, 371
       00 00 10 00 
       00 00 01 00 
       71 58 04 73 
       01 00       
04497B 01 00 00 10 0280*   	dl 1, 16, 16, 256, fn_tile_pad_0, 372
       00 00 10 00 
       00 00 01 00 
       8A 58 04 74 
       01 00       
04498D 01 00 00 10 0281*   	dl 1, 16, 16, 256, fn_tile_pad_1, 373
       00 00 10 00 
       00 00 01 00 
       A3 58 04 75 
       01 00       
04499F 01 00 00 10 0282*   	dl 1, 16, 16, 256, fn_tile_pad_2, 374
       00 00 10 00 
       00 00 01 00 
       BC 58 04 76 
       01 00       
0449B1 01 00 00 10 0283*   	dl 1, 16, 16, 256, fn_tile_pad_3, 375
       00 00 10 00 
       00 00 01 00 
       D5 58 04 77 
       01 00       
0449C3 01 00 00 10 0284*   	dl 1, 16, 16, 256, fn_tile_pad_4, 376
       00 00 10 00 
       00 00 01 00 
       EE 58 04 78 
       01 00       
0449D5 01 00 00 10 0285*   	dl 1, 16, 16, 256, fn_tile_pad_5, 377
       00 00 10 00 
       00 00 01 00 
       07 59 04 79 
       01 00       
0449E7 01 00 00 10 0286*   	dl 1, 16, 16, 256, fn_tile_pad_6, 378
       00 00 10 00 
       00 00 01 00 
       20 59 04 7A 
       01 00       
0449F9 01 00 00 10 0287*   	dl 1, 16, 16, 256, fn_tile_pad_7, 379
       00 00 10 00 
       00 00 01 00 
       39 59 04 7B 
       01 00       
044A0B 01 00 00 10 0288*   	dl 1, 16, 16, 256, fn_turret_000, 380
       00 00 10 00 
       00 00 01 00 
       52 59 04 7C 
       01 00       
044A1D 01 00 00 10 0289*   	dl 1, 16, 16, 256, fn_turret_008, 381
       00 00 10 00 
       00 00 01 00 
       6B 59 04 7D 
       01 00       
044A2F 01 00 00 10 0290*   	dl 1, 16, 16, 256, fn_turret_016, 382
       00 00 10 00 
       00 00 01 00 
       84 59 04 7E 
       01 00       
044A41 01 00 00 10 0291*   	dl 1, 16, 16, 256, fn_turret_024, 383
       00 00 10 00 
       00 00 01 00 
       9D 59 04 7F 
       01 00       
044A53 01 00 00 10 0292*   	dl 1, 16, 16, 256, fn_turret_032, 384
       00 00 10 00 
       00 00 01 00 
       B6 59 04 80 
       01 00       
044A65 01 00 00 10 0293*   	dl 1, 16, 16, 256, fn_turret_040, 385
       00 00 10 00 
       00 00 01 00 
       CF 59 04 81 
       01 00       
044A77 01 00 00 10 0294*   	dl 1, 16, 16, 256, fn_turret_048, 386
       00 00 10 00 
       00 00 01 00 
       E8 59 04 82 
       01 00       
044A89 01 00 00 10 0295*   	dl 1, 16, 16, 256, fn_turret_056, 387
       00 00 10 00 
       00 00 01 00 
       01 5A 04 83 
       01 00       
044A9B 01 00 00 10 0296*   	dl 1, 16, 16, 256, fn_turret_064, 388
       00 00 10 00 
       00 00 01 00 
       1A 5A 04 84 
       01 00       
044AAD 01 00 00 10 0297*   	dl 1, 16, 16, 256, fn_turret_072, 389
       00 00 10 00 
       00 00 01 00 
       33 5A 04 85 
       01 00       
044ABF 01 00 00 10 0298*   	dl 1, 16, 16, 256, fn_turret_080, 390
       00 00 10 00 
       00 00 01 00 
       4C 5A 04 86 
       01 00       
044AD1 01 00 00 10 0299*   	dl 1, 16, 16, 256, fn_turret_088, 391
       00 00 10 00 
       00 00 01 00 
       65 5A 04 87 
       01 00       
044AE3 01 00 00 10 0300*   	dl 1, 16, 16, 256, fn_turret_096, 392
       00 00 10 00 
       00 00 01 00 
       7E 5A 04 88 
       01 00       
044AF5 01 00 00 10 0301*   	dl 1, 16, 16, 256, fn_turret_104, 393
       00 00 10 00 
       00 00 01 00 
       97 5A 04 89 
       01 00       
044B07 01 00 00 10 0302*   	dl 1, 16, 16, 256, fn_turret_112, 394
       00 00 10 00 
       00 00 01 00 
       B0 5A 04 8A 
       01 00       
044B19 01 00 00 10 0303*   	dl 1, 16, 16, 256, fn_turret_120, 395
       00 00 10 00 
       00 00 01 00 
       C9 5A 04 8B 
       01 00       
044B2B 01 00 00 10 0304*   	dl 1, 16, 16, 256, fn_turret_128, 396
       00 00 10 00 
       00 00 01 00 
       E2 5A 04 8C 
       01 00       
044B3D 01 00 00 10 0305*   	dl 1, 16, 16, 256, fn_turret_136, 397
       00 00 10 00 
       00 00 01 00 
       FB 5A 04 8D 
       01 00       
044B4F 01 00 00 10 0306*   	dl 1, 16, 16, 256, fn_turret_144, 398
       00 00 10 00 
       00 00 01 00 
       14 5B 04 8E 
       01 00       
044B61 01 00 00 10 0307*   	dl 1, 16, 16, 256, fn_turret_152, 399
       00 00 10 00 
       00 00 01 00 
       2D 5B 04 8F 
       01 00       
044B73 01 00 00 10 0308*   	dl 1, 16, 16, 256, fn_turret_160, 400
       00 00 10 00 
       00 00 01 00 
       46 5B 04 90 
       01 00       
044B85 01 00 00 10 0309*   	dl 1, 16, 16, 256, fn_turret_168, 401
       00 00 10 00 
       00 00 01 00 
       5F 5B 04 91 
       01 00       
044B97 01 00 00 10 0310*   	dl 1, 16, 16, 256, fn_turret_176, 402
       00 00 10 00 
       00 00 01 00 
       78 5B 04 92 
       01 00       
044BA9 01 00 00 10 0311*   	dl 1, 16, 16, 256, fn_turret_184, 403
       00 00 10 00 
       00 00 01 00 
       91 5B 04 93 
       01 00       
044BBB 01 00 00 10 0312*   	dl 1, 16, 16, 256, fn_turret_192, 404
       00 00 10 00 
       00 00 01 00 
       AA 5B 04 94 
       01 00       
044BCD 01 00 00 10 0313*   	dl 1, 16, 16, 256, fn_turret_200, 405
       00 00 10 00 
       00 00 01 00 
       C3 5B 04 95 
       01 00       
044BDF 01 00 00 10 0314*   	dl 1, 16, 16, 256, fn_turret_208, 406
       00 00 10 00 
       00 00 01 00 
       DC 5B 04 96 
       01 00       
044BF1 01 00 00 10 0315*   	dl 1, 16, 16, 256, fn_turret_216, 407
       00 00 10 00 
       00 00 01 00 
       F5 5B 04 97 
       01 00       
044C03 01 00 00 10 0316*   	dl 1, 16, 16, 256, fn_turret_224, 408
       00 00 10 00 
       00 00 01 00 
       0E 5C 04 98 
       01 00       
044C15 01 00 00 10 0317*   	dl 1, 16, 16, 256, fn_turret_232, 409
       00 00 10 00 
       00 00 01 00 
       27 5C 04 99 
       01 00       
044C27 01 00 00 10 0318*   	dl 1, 16, 16, 256, fn_turret_240, 410
       00 00 10 00 
       00 00 01 00 
       40 5C 04 9A 
       01 00       
044C39 01 00 00 10 0319*   	dl 1, 16, 16, 256, fn_turret_248, 411
       00 00 10 00 
       00 00 01 00 
       59 5C 04 9B 
       01 00       
044C4B             0320*   
044C4B             0321*   ; files_list: ; filename:
044C4B 73 70 72 69 0322*   fn_crater: db "sprites/crater.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 2E 72 
       67 62 61 32 
       00          
044C60 73 70 72 69 0323*   fn_crater_0: db "sprites/crater_0.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 30 
       2E 72 67 62 
       61 32 00    
044C77 73 70 72 69 0324*   fn_crater_1: db "sprites/crater_1.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 31 
       2E 72 67 62 
       61 32 00    
044C8E 73 70 72 69 0325*   fn_crater_2: db "sprites/crater_2.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 32 
       2E 72 67 62 
       61 32 00    
044CA5 73 70 72 69 0326*   fn_crater_3: db "sprites/crater_3.rgba2",0
       74 65 73 2F 
       63 72 61 74 
       65 72 5F 33 
       2E 72 67 62 
       61 32 00    
044CBC 73 70 72 69 0327*   fn_explosion_a: db "sprites/explosion_a.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 61 2E 
       72 67 62 61 
       32 00       
044CD6 73 70 72 69 0328*   fn_explosion_b: db "sprites/explosion_b.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 62 2E 
       72 67 62 61 
       32 00       
044CF0 73 70 72 69 0329*   fn_explosion_c: db "sprites/explosion_c.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 63 2E 
       72 67 62 61 
       32 00       
044D0A 73 70 72 69 0330*   fn_explosion_d: db "sprites/explosion_d.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 64 2E 
       72 67 62 61 
       32 00       
044D24 73 70 72 69 0331*   fn_explosion_e: db "sprites/explosion_e.rgba2",0
       74 65 73 2F 
       65 78 70 6C 
       6F 73 69 6F 
       6E 5F 65 2E 
       72 67 62 61 
       32 00       
044D3E 73 70 72 69 0332*   fn_fireball_2_000: db "sprites/fireball_2_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
044D5B 73 70 72 69 0333*   fn_fireball_2_008: db "sprites/fireball_2_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
044D78 73 70 72 69 0334*   fn_fireball_2_016: db "sprites/fireball_2_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
044D95 73 70 72 69 0335*   fn_fireball_2_024: db "sprites/fireball_2_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
044DB2 73 70 72 69 0336*   fn_fireball_2_032: db "sprites/fireball_2_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
044DCF 73 70 72 69 0337*   fn_fireball_2_040: db "sprites/fireball_2_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
044DEC 73 70 72 69 0338*   fn_fireball_2_048: db "sprites/fireball_2_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
044E09 73 70 72 69 0339*   fn_fireball_2_056: db "sprites/fireball_2_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
044E26 73 70 72 69 0340*   fn_fireball_2_064: db "sprites/fireball_2_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
044E43 73 70 72 69 0341*   fn_fireball_2_072: db "sprites/fireball_2_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
044E60 73 70 72 69 0342*   fn_fireball_2_080: db "sprites/fireball_2_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
044E7D 73 70 72 69 0343*   fn_fireball_2_088: db "sprites/fireball_2_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
044E9A 73 70 72 69 0344*   fn_fireball_2_096: db "sprites/fireball_2_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
044EB7 73 70 72 69 0345*   fn_fireball_2_104: db "sprites/fireball_2_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
044ED4 73 70 72 69 0346*   fn_fireball_2_112: db "sprites/fireball_2_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
044EF1 73 70 72 69 0347*   fn_fireball_2_120: db "sprites/fireball_2_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
044F0E 73 70 72 69 0348*   fn_fireball_2_128: db "sprites/fireball_2_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
044F2B 73 70 72 69 0349*   fn_fireball_2_136: db "sprites/fireball_2_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
044F48 73 70 72 69 0350*   fn_fireball_2_144: db "sprites/fireball_2_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
044F65 73 70 72 69 0351*   fn_fireball_2_152: db "sprites/fireball_2_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
044F82 73 70 72 69 0352*   fn_fireball_2_160: db "sprites/fireball_2_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
044F9F 73 70 72 69 0353*   fn_fireball_2_168: db "sprites/fireball_2_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
044FBC 73 70 72 69 0354*   fn_fireball_2_176: db "sprites/fireball_2_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
044FD9 73 70 72 69 0355*   fn_fireball_2_184: db "sprites/fireball_2_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
044FF6 73 70 72 69 0356*   fn_fireball_2_192: db "sprites/fireball_2_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045013 73 70 72 69 0357*   fn_fireball_2_200: db "sprites/fireball_2_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045030 73 70 72 69 0358*   fn_fireball_2_208: db "sprites/fireball_2_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
04504D 73 70 72 69 0359*   fn_fireball_2_216: db "sprites/fireball_2_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
04506A 73 70 72 69 0360*   fn_fireball_2_224: db "sprites/fireball_2_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045087 73 70 72 69 0361*   fn_fireball_2_232: db "sprites/fireball_2_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0450A4 73 70 72 69 0362*   fn_fireball_2_240: db "sprites/fireball_2_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0450C1 73 70 72 69 0363*   fn_fireball_2_248: db "sprites/fireball_2_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 32 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
0450DE 73 70 72 69 0364*   fn_fireball_3_000: db "sprites/fireball_3_000.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
0450FB 73 70 72 69 0365*   fn_fireball_3_008: db "sprites/fireball_3_008.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045118 73 70 72 69 0366*   fn_fireball_3_016: db "sprites/fireball_3_016.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
045135 73 70 72 69 0367*   fn_fireball_3_024: db "sprites/fireball_3_024.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045152 73 70 72 69 0368*   fn_fireball_3_032: db "sprites/fireball_3_032.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
04516F 73 70 72 69 0369*   fn_fireball_3_040: db "sprites/fireball_3_040.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
04518C 73 70 72 69 0370*   fn_fireball_3_048: db "sprites/fireball_3_048.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0451A9 73 70 72 69 0371*   fn_fireball_3_056: db "sprites/fireball_3_056.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0451C6 73 70 72 69 0372*   fn_fireball_3_064: db "sprites/fireball_3_064.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0451E3 73 70 72 69 0373*   fn_fireball_3_072: db "sprites/fireball_3_072.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
045200 73 70 72 69 0374*   fn_fireball_3_080: db "sprites/fireball_3_080.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
04521D 73 70 72 69 0375*   fn_fireball_3_088: db "sprites/fireball_3_088.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
04523A 73 70 72 69 0376*   fn_fireball_3_096: db "sprites/fireball_3_096.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045257 73 70 72 69 0377*   fn_fireball_3_104: db "sprites/fireball_3_104.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045274 73 70 72 69 0378*   fn_fireball_3_112: db "sprites/fireball_3_112.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045291 73 70 72 69 0379*   fn_fireball_3_120: db "sprites/fireball_3_120.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
0452AE 73 70 72 69 0380*   fn_fireball_3_128: db "sprites/fireball_3_128.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
0452CB 73 70 72 69 0381*   fn_fireball_3_136: db "sprites/fireball_3_136.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0452E8 73 70 72 69 0382*   fn_fireball_3_144: db "sprites/fireball_3_144.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045305 73 70 72 69 0383*   fn_fireball_3_152: db "sprites/fireball_3_152.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045322 73 70 72 69 0384*   fn_fireball_3_160: db "sprites/fireball_3_160.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
04533F 73 70 72 69 0385*   fn_fireball_3_168: db "sprites/fireball_3_168.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
04535C 73 70 72 69 0386*   fn_fireball_3_176: db "sprites/fireball_3_176.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045379 73 70 72 69 0387*   fn_fireball_3_184: db "sprites/fireball_3_184.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045396 73 70 72 69 0388*   fn_fireball_3_192: db "sprites/fireball_3_192.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
0453B3 73 70 72 69 0389*   fn_fireball_3_200: db "sprites/fireball_3_200.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
0453D0 73 70 72 69 0390*   fn_fireball_3_208: db "sprites/fireball_3_208.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
0453ED 73 70 72 69 0391*   fn_fireball_3_216: db "sprites/fireball_3_216.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
04540A 73 70 72 69 0392*   fn_fireball_3_224: db "sprites/fireball_3_224.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045427 73 70 72 69 0393*   fn_fireball_3_232: db "sprites/fireball_3_232.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045444 73 70 72 69 0394*   fn_fireball_3_240: db "sprites/fireball_3_240.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045461 73 70 72 69 0395*   fn_fireball_3_248: db "sprites/fireball_3_248.rgba2",0
       74 65 73 2F 
       66 69 72 65 
       62 61 6C 6C 
       5F 33 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
04547E 73 70 72 69 0396*   fn_laser_a: db "sprites/laser_a.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 61 2E 
       72 67 62 61 
       32 00       
045494 73 70 72 69 0397*   fn_laser_b: db "sprites/laser_b.rgba2",0
       74 65 73 2F 
       6C 61 73 65 
       72 5F 62 2E 
       72 67 62 61 
       32 00       
0454AA 73 70 72 69 0398*   fn_lightning_h_0: db "sprites/lightning_h_0.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       30 2E 72 67 
       62 61 32 00 
0454C6 73 70 72 69 0399*   fn_lightning_h_1: db "sprites/lightning_h_1.rgba2",0
       74 65 73 2F 
       6C 69 67 68 
       74 6E 69 6E 
       67 5F 68 5F 
       31 2E 72 67 
       62 61 32 00 
0454E2 73 70 72 69 0400*   fn_pad: db "sprites/pad.rgba2",0
       74 65 73 2F 
       70 61 64 2E 
       72 67 62 61 
       32 00       
0454F4 73 70 72 69 0401*   fn_seeker_000: db "sprites/seeker_000.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
04550D 73 70 72 69 0402*   fn_seeker_008: db "sprites/seeker_008.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045526 73 70 72 69 0403*   fn_seeker_016: db "sprites/seeker_016.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
04553F 73 70 72 69 0404*   fn_seeker_024: db "sprites/seeker_024.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
045558 73 70 72 69 0405*   fn_seeker_032: db "sprites/seeker_032.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
045571 73 70 72 69 0406*   fn_seeker_040: db "sprites/seeker_040.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
04558A 73 70 72 69 0407*   fn_seeker_048: db "sprites/seeker_048.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
0455A3 73 70 72 69 0408*   fn_seeker_056: db "sprites/seeker_056.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
0455BC 73 70 72 69 0409*   fn_seeker_064: db "sprites/seeker_064.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
0455D5 73 70 72 69 0410*   fn_seeker_072: db "sprites/seeker_072.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
0455EE 73 70 72 69 0411*   fn_seeker_080: db "sprites/seeker_080.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045607 73 70 72 69 0412*   fn_seeker_088: db "sprites/seeker_088.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045620 73 70 72 69 0413*   fn_seeker_096: db "sprites/seeker_096.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045639 73 70 72 69 0414*   fn_seeker_104: db "sprites/seeker_104.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045652 73 70 72 69 0415*   fn_seeker_112: db "sprites/seeker_112.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
04566B 73 70 72 69 0416*   fn_seeker_120: db "sprites/seeker_120.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045684 73 70 72 69 0417*   fn_seeker_128: db "sprites/seeker_128.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
04569D 73 70 72 69 0418*   fn_seeker_136: db "sprites/seeker_136.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
0456B6 73 70 72 69 0419*   fn_seeker_144: db "sprites/seeker_144.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
0456CF 73 70 72 69 0420*   fn_seeker_152: db "sprites/seeker_152.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
0456E8 73 70 72 69 0421*   fn_seeker_160: db "sprites/seeker_160.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045701 73 70 72 69 0422*   fn_seeker_168: db "sprites/seeker_168.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
04571A 73 70 72 69 0423*   fn_seeker_176: db "sprites/seeker_176.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045733 73 70 72 69 0424*   fn_seeker_184: db "sprites/seeker_184.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
04574C 73 70 72 69 0425*   fn_seeker_192: db "sprites/seeker_192.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045765 73 70 72 69 0426*   fn_seeker_200: db "sprites/seeker_200.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
04577E 73 70 72 69 0427*   fn_seeker_208: db "sprites/seeker_208.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045797 73 70 72 69 0428*   fn_seeker_216: db "sprites/seeker_216.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
0457B0 73 70 72 69 0429*   fn_seeker_224: db "sprites/seeker_224.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
0457C9 73 70 72 69 0430*   fn_seeker_232: db "sprites/seeker_232.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
0457E2 73 70 72 69 0431*   fn_seeker_240: db "sprites/seeker_240.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
0457FB 73 70 72 69 0432*   fn_seeker_248: db "sprites/seeker_248.rgba2",0
       74 65 73 2F 
       73 65 65 6B 
       65 72 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045814 73 70 72 69 0433*   fn_ship_0l: db "sprites/ship_0l.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 30 6C 2E 
       72 67 62 61 
       32 00       
04582A 73 70 72 69 0434*   fn_ship_1c: db "sprites/ship_1c.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 31 63 2E 
       72 67 62 61 
       32 00       
045840 73 70 72 69 0435*   fn_ship_2r: db "sprites/ship_2r.rgba2",0
       74 65 73 2F 
       73 68 69 70 
       5F 32 72 2E 
       72 67 62 61 
       32 00       
045856 73 70 72 69 0436*   fn_test_stripes: db "sprites/test_stripes.rgba2",0
       74 65 73 2F 
       74 65 73 74 
       5F 73 74 72 
       69 70 65 73 
       2E 72 67 62 
       61 32 00    
045871 73 70 72 69 0437*   fn_tile_blank: db "sprites/tile_blank.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 62 6C 61 
       6E 6B 2E 72 
       67 62 61 32 
       00          
04588A 73 70 72 69 0438*   fn_tile_pad_0: db "sprites/tile_pad_0.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 30 2E 72 
       67 62 61 32 
       00          
0458A3 73 70 72 69 0439*   fn_tile_pad_1: db "sprites/tile_pad_1.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 31 2E 72 
       67 62 61 32 
       00          
0458BC 73 70 72 69 0440*   fn_tile_pad_2: db "sprites/tile_pad_2.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 32 2E 72 
       67 62 61 32 
       00          
0458D5 73 70 72 69 0441*   fn_tile_pad_3: db "sprites/tile_pad_3.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 33 2E 72 
       67 62 61 32 
       00          
0458EE 73 70 72 69 0442*   fn_tile_pad_4: db "sprites/tile_pad_4.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 34 2E 72 
       67 62 61 32 
       00          
045907 73 70 72 69 0443*   fn_tile_pad_5: db "sprites/tile_pad_5.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 35 2E 72 
       67 62 61 32 
       00          
045920 73 70 72 69 0444*   fn_tile_pad_6: db "sprites/tile_pad_6.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 36 2E 72 
       67 62 61 32 
       00          
045939 73 70 72 69 0445*   fn_tile_pad_7: db "sprites/tile_pad_7.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 70 61 64 
       5F 37 2E 72 
       67 62 61 32 
       00          
045952 73 70 72 69 0446*   fn_turret_000: db "sprites/turret_000.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 30 2E 72 
       67 62 61 32 
       00          
04596B 73 70 72 69 0447*   fn_turret_008: db "sprites/turret_008.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       30 38 2E 72 
       67 62 61 32 
       00          
045984 73 70 72 69 0448*   fn_turret_016: db "sprites/turret_016.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       31 36 2E 72 
       67 62 61 32 
       00          
04599D 73 70 72 69 0449*   fn_turret_024: db "sprites/turret_024.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       32 34 2E 72 
       67 62 61 32 
       00          
0459B6 73 70 72 69 0450*   fn_turret_032: db "sprites/turret_032.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       33 32 2E 72 
       67 62 61 32 
       00          
0459CF 73 70 72 69 0451*   fn_turret_040: db "sprites/turret_040.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 30 2E 72 
       67 62 61 32 
       00          
0459E8 73 70 72 69 0452*   fn_turret_048: db "sprites/turret_048.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       34 38 2E 72 
       67 62 61 32 
       00          
045A01 73 70 72 69 0453*   fn_turret_056: db "sprites/turret_056.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       35 36 2E 72 
       67 62 61 32 
       00          
045A1A 73 70 72 69 0454*   fn_turret_064: db "sprites/turret_064.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       36 34 2E 72 
       67 62 61 32 
       00          
045A33 73 70 72 69 0455*   fn_turret_072: db "sprites/turret_072.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       37 32 2E 72 
       67 62 61 32 
       00          
045A4C 73 70 72 69 0456*   fn_turret_080: db "sprites/turret_080.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 30 2E 72 
       67 62 61 32 
       00          
045A65 73 70 72 69 0457*   fn_turret_088: db "sprites/turret_088.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       38 38 2E 72 
       67 62 61 32 
       00          
045A7E 73 70 72 69 0458*   fn_turret_096: db "sprites/turret_096.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 30 
       39 36 2E 72 
       67 62 61 32 
       00          
045A97 73 70 72 69 0459*   fn_turret_104: db "sprites/turret_104.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       30 34 2E 72 
       67 62 61 32 
       00          
045AB0 73 70 72 69 0460*   fn_turret_112: db "sprites/turret_112.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       31 32 2E 72 
       67 62 61 32 
       00          
045AC9 73 70 72 69 0461*   fn_turret_120: db "sprites/turret_120.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 30 2E 72 
       67 62 61 32 
       00          
045AE2 73 70 72 69 0462*   fn_turret_128: db "sprites/turret_128.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       32 38 2E 72 
       67 62 61 32 
       00          
045AFB 73 70 72 69 0463*   fn_turret_136: db "sprites/turret_136.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       33 36 2E 72 
       67 62 61 32 
       00          
045B14 73 70 72 69 0464*   fn_turret_144: db "sprites/turret_144.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       34 34 2E 72 
       67 62 61 32 
       00          
045B2D 73 70 72 69 0465*   fn_turret_152: db "sprites/turret_152.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       35 32 2E 72 
       67 62 61 32 
       00          
045B46 73 70 72 69 0466*   fn_turret_160: db "sprites/turret_160.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 30 2E 72 
       67 62 61 32 
       00          
045B5F 73 70 72 69 0467*   fn_turret_168: db "sprites/turret_168.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       36 38 2E 72 
       67 62 61 32 
       00          
045B78 73 70 72 69 0468*   fn_turret_176: db "sprites/turret_176.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       37 36 2E 72 
       67 62 61 32 
       00          
045B91 73 70 72 69 0469*   fn_turret_184: db "sprites/turret_184.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       38 34 2E 72 
       67 62 61 32 
       00          
045BAA 73 70 72 69 0470*   fn_turret_192: db "sprites/turret_192.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 31 
       39 32 2E 72 
       67 62 61 32 
       00          
045BC3 73 70 72 69 0471*   fn_turret_200: db "sprites/turret_200.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 30 2E 72 
       67 62 61 32 
       00          
045BDC 73 70 72 69 0472*   fn_turret_208: db "sprites/turret_208.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       30 38 2E 72 
       67 62 61 32 
       00          
045BF5 73 70 72 69 0473*   fn_turret_216: db "sprites/turret_216.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       31 36 2E 72 
       67 62 61 32 
       00          
045C0E 73 70 72 69 0474*   fn_turret_224: db "sprites/turret_224.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       32 34 2E 72 
       67 62 61 32 
       00          
045C27 73 70 72 69 0475*   fn_turret_232: db "sprites/turret_232.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       33 32 2E 72 
       67 62 61 32 
       00          
045C40 73 70 72 69 0476*   fn_turret_240: db "sprites/turret_240.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 30 2E 72 
       67 62 61 32 
       00          
045C59 73 70 72 69 0477*   fn_turret_248: db "sprites/turret_248.rgba2",0
       74 65 73 2F 
       74 75 72 72 
       65 74 5F 32 
       34 38 2E 72 
       67 62 61 32 
       00          
045C72             0055        include "images_ui.inc"
045C72             0001*   ; Generated by make_images.py
045C72             0002*   
045C72             0003*   ui_num_images: equ 46
045C72             0004*   
045C72             0005*   ; buffer_ids:
045C72             0006*   BUF_BAR_H_0: equ 0
045C72             0007*   BUF_BAR_H_1: equ 1
045C72             0008*   BUF_BAR_H_2: equ 2
045C72             0009*   BUF_BAR_V_0: equ 3
045C72             0010*   BUF_BAR_V_1: equ 4
045C72             0011*   BUF_BAR_V_2: equ 5
045C72             0012*   BUF_BEZEL_L: equ 6
045C72             0013*   BUF_BEZEL_R: equ 7
045C72             0014*   BUF_CREDITS: equ 8
045C72             0015*   BUF_CTL_PANEL_L: equ 9
045C72             0016*   BUF_CTL_PANEL_NAVBALL_SM: equ 10
045C72             0017*   BUF_CTL_PANEL_R: equ 11
045C72             0018*   BUF_CTL_PANEL_TOP: equ 12
045C72             0019*   BUF_JERRY_CAN: equ 13
045C72             0020*   BUF_MFD_ARMS: equ 14
045C72             0021*   BUF_MFD_BEZEL: equ 15
045C72             0022*   BUF_MFD_BG: equ 16
045C72             0023*   BUF_MFD_GUN_0: equ 17
045C72             0024*   BUF_MFD_GUN_1: equ 18
045C72             0025*   BUF_MFD_GUN_2: equ 19
045C72             0026*   BUF_MFD_GUN_3: equ 20
045C72             0027*   BUF_MFD_GUN_4: equ 21
045C72             0028*   BUF_MFD_GUN_5: equ 22
045C72             0029*   BUF_MFD_MAVERICK_0: equ 23
045C72             0030*   BUF_MFD_MAVERICK_1: equ 24
045C72             0031*   BUF_MFD_MAVERICK_2: equ 25
045C72             0032*   BUF_MFD_MAVERICK_3: equ 26
045C72             0033*   BUF_MFD_MAVERICK_4: equ 27
045C72             0034*   BUF_MFD_MAVERICK_5: equ 28
045C72             0035*   BUF_MFD_SIDEWINDER_0: equ 29
045C72             0036*   BUF_MFD_SIDEWINDER_1: equ 30
045C72             0037*   BUF_MFD_SIDEWINDER_2: equ 31
045C72             0038*   BUF_MFD_SIDEWINDER_3: equ 32
045C72             0039*   BUF_MFD_SIDEWINDER_4: equ 33
045C72             0040*   BUF_MFD_SIDEWINDER_5: equ 34
045C72             0041*   BUF_MFD_SPARROW_0: equ 35
045C72             0042*   BUF_MFD_SPARROW_1: equ 36
045C72             0043*   BUF_MFD_SPARROW_2: equ 37
045C72             0044*   BUF_MFD_SPARROW_3: equ 38
045C72             0045*   BUF_MFD_SPARROW_4: equ 39
045C72             0046*   BUF_MFD_SPARROW_5: equ 40
045C72             0047*   BUF_POWER: equ 41
045C72             0048*   BUF_SHIELD: equ 42
045C72             0049*   BUF_SHIP_MFD: equ 43
045C72             0050*   BUF_SPLASH_BG: equ 44
045C72             0051*   BUF_SPLASH_LOGO: equ 45
045C72             0052*   
045C72             0053*   ui_image_list: ; type; width; height; size; filename; bufferId:
045C72 01 00 00 80 0054*   	dl 1, 128, 8, 1024, fn_bar_h_0, 0
       00 00 08 00 
       00 00 04 00 
       AE 5F 04 00 
       00 00       
045C84 01 00 00 80 0055*   	dl 1, 128, 8, 1024, fn_bar_h_1, 1
       00 00 08 00 
       00 00 04 00 
       BF 5F 04 01 
       00 00       
045C96 01 00 00 80 0056*   	dl 1, 128, 8, 1024, fn_bar_h_2, 2
       00 00 08 00 
       00 00 04 00 
       D0 5F 04 02 
       00 00       
045CA8 01 00 00 08 0057*   	dl 1, 8, 128, 1024, fn_bar_v_0, 3
       00 00 80 00 
       00 00 04 00 
       E1 5F 04 03 
       00 00       
045CBA 01 00 00 08 0058*   	dl 1, 8, 128, 1024, fn_bar_v_1, 4
       00 00 80 00 
       00 00 04 00 
       F2 5F 04 04 
       00 00       
045CCC 01 00 00 08 0059*   	dl 1, 8, 128, 1024, fn_bar_v_2, 5
       00 00 80 00 
       00 00 04 00 
       03 60 04 05 
       00 00       
045CDE 01 00 00 80 0060*   	dl 1, 128, 304, 38912, fn_bezel_l, 6
       00 00 30 01 
       00 00 98 00 
       14 60 04 06 
       00 00       
045CF0 01 00 00 80 0061*   	dl 1, 128, 304, 38912, fn_bezel_r, 7
       00 00 30 01 
       00 00 98 00 
       25 60 04 07 
       00 00       
045D02 01 00 00 10 0062*   	dl 1, 16, 16, 256, fn_credits, 8
       00 00 10 00 
       00 00 01 00 
       36 60 04 08 
       00 00       
045D14 01 00 00 80 0063*   	dl 1, 128, 128, 16384, fn_ctl_panel_l, 9
       00 00 80 00 
       00 00 40 00 
       47 60 04 09 
       00 00       
045D26 01 00 00 27 0064*   	dl 1, 39, 39, 1521, fn_ctl_panel_navball_sm, 10
       00 00 27 00 
       00 F1 05 00 
       5C 60 04 0A 
       00 00       
045D38 01 00 00 80 0065*   	dl 1, 128, 128, 16384, fn_ctl_panel_r, 11
       00 00 80 00 
       00 00 40 00 
       7A 60 04 0B 
       00 00       
045D4A 01 00 00 60 0066*   	dl 1, 352, 48, 16896, fn_ctl_panel_top, 12
       01 00 30 00 
       00 00 42 00 
       8F 60 04 0C 
       00 00       
045D5C 01 00 00 10 0067*   	dl 1, 16, 16, 256, fn_jerry_can, 13
       00 00 10 00 
       00 00 01 00 
       A6 60 04 0D 
       00 00       
045D6E 01 00 00 24 0068*   	dl 1, 36, 18, 648, fn_mfd_arms, 14
       00 00 12 00 
       00 88 02 00 
       B9 60 04 0E 
       00 00       
045D80 01 00 00 60 0069*   	dl 1, 96, 96, 9216, fn_mfd_bezel, 15
       00 00 60 00 
       00 00 24 00 
       CB 60 04 0F 
       00 00       
045D92 01 00 00 40 0070*   	dl 1, 64, 64, 4096, fn_mfd_bg, 16
       00 00 40 00 
       00 00 10 00 
       DE 60 04 10 
       00 00       
045DA4 01 00 00 01 0071*   	dl 1, 1, 6, 6, fn_mfd_gun_0, 17
       00 00 06 00 
       00 06 00 00 
       EE 60 04 11 
       00 00       
045DB6 01 00 00 01 0072*   	dl 1, 1, 6, 6, fn_mfd_gun_1, 18
       00 00 06 00 
       00 06 00 00 
       01 61 04 12 
       00 00       
045DC8 01 00 00 01 0073*   	dl 1, 1, 6, 6, fn_mfd_gun_2, 19
       00 00 06 00 
       00 06 00 00 
       14 61 04 13 
       00 00       
045DDA 01 00 00 01 0074*   	dl 1, 1, 6, 6, fn_mfd_gun_3, 20
       00 00 06 00 
       00 06 00 00 
       27 61 04 14 
       00 00       
045DEC 01 00 00 01 0075*   	dl 1, 1, 6, 6, fn_mfd_gun_4, 21
       00 00 06 00 
       00 06 00 00 
       3A 61 04 15 
       00 00       
045DFE 01 00 00 01 0076*   	dl 1, 1, 6, 6, fn_mfd_gun_5, 22
       00 00 06 00 
       00 06 00 00 
       4D 61 04 16 
       00 00       
045E10 01 00 00 04 0077*   	dl 1, 4, 6, 24, fn_mfd_maverick_0, 23
       00 00 06 00 
       00 18 00 00 
       60 61 04 17 
       00 00       
045E22 01 00 00 04 0078*   	dl 1, 4, 6, 24, fn_mfd_maverick_1, 24
       00 00 06 00 
       00 18 00 00 
       78 61 04 18 
       00 00       
045E34 01 00 00 04 0079*   	dl 1, 4, 6, 24, fn_mfd_maverick_2, 25
       00 00 06 00 
       00 18 00 00 
       90 61 04 19 
       00 00       
045E46 01 00 00 04 0080*   	dl 1, 4, 6, 24, fn_mfd_maverick_3, 26
       00 00 06 00 
       00 18 00 00 
       A8 61 04 1A 
       00 00       
045E58 01 00 00 04 0081*   	dl 1, 4, 6, 24, fn_mfd_maverick_4, 27
       00 00 06 00 
       00 18 00 00 
       C0 61 04 1B 
       00 00       
045E6A 01 00 00 04 0082*   	dl 1, 4, 6, 24, fn_mfd_maverick_5, 28
       00 00 06 00 
       00 18 00 00 
       D8 61 04 1C 
       00 00       
045E7C 01 00 00 03 0083*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_0, 29
       00 00 06 00 
       00 12 00 00 
       F0 61 04 1D 
       00 00       
045E8E 01 00 00 03 0084*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_1, 30
       00 00 06 00 
       00 12 00 00 
       0A 62 04 1E 
       00 00       
045EA0 01 00 00 03 0085*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_2, 31
       00 00 06 00 
       00 12 00 00 
       24 62 04 1F 
       00 00       
045EB2 01 00 00 03 0086*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_3, 32
       00 00 06 00 
       00 12 00 00 
       3E 62 04 20 
       00 00       
045EC4 01 00 00 03 0087*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_4, 33
       00 00 06 00 
       00 12 00 00 
       58 62 04 21 
       00 00       
045ED6 01 00 00 03 0088*   	dl 1, 3, 6, 18, fn_mfd_sidewinder_5, 34
       00 00 06 00 
       00 12 00 00 
       72 62 04 22 
       00 00       
045EE8 01 00 00 03 0089*   	dl 1, 3, 7, 21, fn_mfd_sparrow_0, 35
       00 00 07 00 
       00 15 00 00 
       8C 62 04 23 
       00 00       
045EFA 01 00 00 03 0090*   	dl 1, 3, 7, 21, fn_mfd_sparrow_1, 36
       00 00 07 00 
       00 15 00 00 
       A3 62 04 24 
       00 00       
045F0C 01 00 00 03 0091*   	dl 1, 3, 7, 21, fn_mfd_sparrow_2, 37
       00 00 07 00 
       00 15 00 00 
       BA 62 04 25 
       00 00       
045F1E 01 00 00 03 0092*   	dl 1, 3, 7, 21, fn_mfd_sparrow_3, 38
       00 00 07 00 
       00 15 00 00 
       D1 62 04 26 
       00 00       
045F30 01 00 00 03 0093*   	dl 1, 3, 7, 21, fn_mfd_sparrow_4, 39
       00 00 07 00 
       00 15 00 00 
       E8 62 04 27 
       00 00       
045F42 01 00 00 03 0094*   	dl 1, 3, 7, 21, fn_mfd_sparrow_5, 40
       00 00 07 00 
       00 15 00 00 
       FF 62 04 28 
       00 00       
045F54 01 00 00 10 0095*   	dl 1, 16, 16, 256, fn_power, 41
       00 00 10 00 
       00 00 01 00 
       16 63 04 29 
       00 00       
045F66 01 00 00 10 0096*   	dl 1, 16, 16, 256, fn_shield, 42
       00 00 10 00 
       00 00 01 00 
       25 63 04 2A 
       00 00       
045F78 01 00 00 10 0097*   	dl 1, 16, 16, 256, fn_ship_mfd, 43
       00 00 10 00 
       00 00 01 00 
       35 63 04 2B 
       00 00       
045F8A 01 00 00 40 0098*   	dl 1, 320, 240, 76800, fn_splash_bg, 44
       01 00 F0 00 
       00 00 2C 01 
       47 63 04 2C 
       00 00       
045F9C 01 00 00 A0 0099*   	dl 1, 160, 106, 16960, fn_splash_logo, 45
       00 00 6A 00 
       00 40 42 00 
       5A 63 04 2D 
       00 00       
045FAE             0100*   
045FAE             0101*   ; files_list: ; filename:
045FAE 75 69 2F 62 0102*   fn_bar_h_0: db "ui/bar_h_0.rgba2",0
       61 72 5F 68 
       5F 30 2E 72 
       67 62 61 32 
       00          
045FBF 75 69 2F 62 0103*   fn_bar_h_1: db "ui/bar_h_1.rgba2",0
       61 72 5F 68 
       5F 31 2E 72 
       67 62 61 32 
       00          
045FD0 75 69 2F 62 0104*   fn_bar_h_2: db "ui/bar_h_2.rgba2",0
       61 72 5F 68 
       5F 32 2E 72 
       67 62 61 32 
       00          
045FE1 75 69 2F 62 0105*   fn_bar_v_0: db "ui/bar_v_0.rgba2",0
       61 72 5F 76 
       5F 30 2E 72 
       67 62 61 32 
       00          
045FF2 75 69 2F 62 0106*   fn_bar_v_1: db "ui/bar_v_1.rgba2",0
       61 72 5F 76 
       5F 31 2E 72 
       67 62 61 32 
       00          
046003 75 69 2F 62 0107*   fn_bar_v_2: db "ui/bar_v_2.rgba2",0
       61 72 5F 76 
       5F 32 2E 72 
       67 62 61 32 
       00          
046014 75 69 2F 62 0108*   fn_bezel_l: db "ui/bezel_l.rgba2",0
       65 7A 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
046025 75 69 2F 62 0109*   fn_bezel_r: db "ui/bezel_r.rgba2",0
       65 7A 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
046036 75 69 2F 63 0110*   fn_credits: db "ui/credits.rgba2",0
       72 65 64 69 
       74 73 2E 72 
       67 62 61 32 
       00          
046047 75 69 2F 63 0111*   fn_ctl_panel_l: db "ui/ctl_panel_l.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 6C 2E 72 
       67 62 61 32 
       00          
04605C 75 69 2F 63 0112*   fn_ctl_panel_navball_sm: db "ui/ctl_panel_navball_sm.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 6E 61 76 
       62 61 6C 6C 
       5F 73 6D 2E 
       72 67 62 61 
       32 00       
04607A 75 69 2F 63 0113*   fn_ctl_panel_r: db "ui/ctl_panel_r.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 72 2E 72 
       67 62 61 32 
       00          
04608F 75 69 2F 63 0114*   fn_ctl_panel_top: db "ui/ctl_panel_top.rgba2",0
       74 6C 5F 70 
       61 6E 65 6C 
       5F 74 6F 70 
       2E 72 67 62 
       61 32 00    
0460A6 75 69 2F 6A 0115*   fn_jerry_can: db "ui/jerry_can.rgba2",0
       65 72 72 79 
       5F 63 61 6E 
       2E 72 67 62 
       61 32 00    
0460B9 75 69 2F 6D 0116*   fn_mfd_arms: db "ui/mfd_arms.rgba2",0
       66 64 5F 61 
       72 6D 73 2E 
       72 67 62 61 
       32 00       
0460CB 75 69 2F 6D 0117*   fn_mfd_bezel: db "ui/mfd_bezel.rgba2",0
       66 64 5F 62 
       65 7A 65 6C 
       2E 72 67 62 
       61 32 00    
0460DE 75 69 2F 6D 0118*   fn_mfd_bg: db "ui/mfd_bg.rgba2",0
       66 64 5F 62 
       67 2E 72 67 
       62 61 32 00 
0460EE 75 69 2F 6D 0119*   fn_mfd_gun_0: db "ui/mfd_gun_0.rgba2",0
       66 64 5F 67 
       75 6E 5F 30 
       2E 72 67 62 
       61 32 00    
046101 75 69 2F 6D 0120*   fn_mfd_gun_1: db "ui/mfd_gun_1.rgba2",0
       66 64 5F 67 
       75 6E 5F 31 
       2E 72 67 62 
       61 32 00    
046114 75 69 2F 6D 0121*   fn_mfd_gun_2: db "ui/mfd_gun_2.rgba2",0
       66 64 5F 67 
       75 6E 5F 32 
       2E 72 67 62 
       61 32 00    
046127 75 69 2F 6D 0122*   fn_mfd_gun_3: db "ui/mfd_gun_3.rgba2",0
       66 64 5F 67 
       75 6E 5F 33 
       2E 72 67 62 
       61 32 00    
04613A 75 69 2F 6D 0123*   fn_mfd_gun_4: db "ui/mfd_gun_4.rgba2",0
       66 64 5F 67 
       75 6E 5F 34 
       2E 72 67 62 
       61 32 00    
04614D 75 69 2F 6D 0124*   fn_mfd_gun_5: db "ui/mfd_gun_5.rgba2",0
       66 64 5F 67 
       75 6E 5F 35 
       2E 72 67 62 
       61 32 00    
046160 75 69 2F 6D 0125*   fn_mfd_maverick_0: db "ui/mfd_maverick_0.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       30 2E 72 67 
       62 61 32 00 
046178 75 69 2F 6D 0126*   fn_mfd_maverick_1: db "ui/mfd_maverick_1.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       31 2E 72 67 
       62 61 32 00 
046190 75 69 2F 6D 0127*   fn_mfd_maverick_2: db "ui/mfd_maverick_2.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       32 2E 72 67 
       62 61 32 00 
0461A8 75 69 2F 6D 0128*   fn_mfd_maverick_3: db "ui/mfd_maverick_3.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       33 2E 72 67 
       62 61 32 00 
0461C0 75 69 2F 6D 0129*   fn_mfd_maverick_4: db "ui/mfd_maverick_4.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       34 2E 72 67 
       62 61 32 00 
0461D8 75 69 2F 6D 0130*   fn_mfd_maverick_5: db "ui/mfd_maverick_5.rgba2",0
       66 64 5F 6D 
       61 76 65 72 
       69 63 6B 5F 
       35 2E 72 67 
       62 61 32 00 
0461F0 75 69 2F 6D 0131*   fn_mfd_sidewinder_0: db "ui/mfd_sidewinder_0.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 30 2E 
       72 67 62 61 
       32 00       
04620A 75 69 2F 6D 0132*   fn_mfd_sidewinder_1: db "ui/mfd_sidewinder_1.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 31 2E 
       72 67 62 61 
       32 00       
046224 75 69 2F 6D 0133*   fn_mfd_sidewinder_2: db "ui/mfd_sidewinder_2.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 32 2E 
       72 67 62 61 
       32 00       
04623E 75 69 2F 6D 0134*   fn_mfd_sidewinder_3: db "ui/mfd_sidewinder_3.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 33 2E 
       72 67 62 61 
       32 00       
046258 75 69 2F 6D 0135*   fn_mfd_sidewinder_4: db "ui/mfd_sidewinder_4.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 34 2E 
       72 67 62 61 
       32 00       
046272 75 69 2F 6D 0136*   fn_mfd_sidewinder_5: db "ui/mfd_sidewinder_5.rgba2",0
       66 64 5F 73 
       69 64 65 77 
       69 6E 64 65 
       72 5F 35 2E 
       72 67 62 61 
       32 00       
04628C 75 69 2F 6D 0137*   fn_mfd_sparrow_0: db "ui/mfd_sparrow_0.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 30 
       2E 72 67 62 
       61 32 00    
0462A3 75 69 2F 6D 0138*   fn_mfd_sparrow_1: db "ui/mfd_sparrow_1.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 31 
       2E 72 67 62 
       61 32 00    
0462BA 75 69 2F 6D 0139*   fn_mfd_sparrow_2: db "ui/mfd_sparrow_2.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 32 
       2E 72 67 62 
       61 32 00    
0462D1 75 69 2F 6D 0140*   fn_mfd_sparrow_3: db "ui/mfd_sparrow_3.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 33 
       2E 72 67 62 
       61 32 00    
0462E8 75 69 2F 6D 0141*   fn_mfd_sparrow_4: db "ui/mfd_sparrow_4.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 34 
       2E 72 67 62 
       61 32 00    
0462FF 75 69 2F 6D 0142*   fn_mfd_sparrow_5: db "ui/mfd_sparrow_5.rgba2",0
       66 64 5F 73 
       70 61 72 72 
       6F 77 5F 35 
       2E 72 67 62 
       61 32 00    
046316 75 69 2F 70 0143*   fn_power: db "ui/power.rgba2",0
       6F 77 65 72 
       2E 72 67 62 
       61 32 00    
046325 75 69 2F 73 0144*   fn_shield: db "ui/shield.rgba2",0
       68 69 65 6C 
       64 2E 72 67 
       62 61 32 00 
046335 75 69 2F 73 0145*   fn_ship_mfd: db "ui/ship_mfd.rgba2",0
       68 69 70 5F 
       6D 66 64 2E 
       72 67 62 61 
       32 00       
046347 75 69 2F 73 0146*   fn_splash_bg: db "ui/splash_bg.rgba2",0
       70 6C 61 73 
       68 5F 62 67 
       2E 72 67 62 
       61 32 00    
04635A 75 69 2F 73 0147*   fn_splash_logo: db "ui/splash_logo.rgba2",0
       70 6C 61 73 
       68 5F 6C 6F 
       67 6F 2E 72 
       67 62 61 32 
       00          
04636F             0056        include "levels.inc"
04636F             0001*   ; tileset indices
04636F             0002*   tiles_dg: equ 0
04636F             0003*   ; tiles_xevious: equ 1
04636F 00 00 00    0004*   tileset_ptr_idx: dl 0
046372             0005*   tileset_ptrs:
046372             0006*       ; dl tiles_xevious_levels
046372 F1 64 04    0007*       dl tileset_00_levels
046375 00 00 00    0008*   tileset_ptrs_end: dl 0 ; list terminator
046378             0009*   
046378             0010*   ; get a pointer to the current tileset
046378             0011*   ; inputs: tileset_ptr_idx
046378             0012*   ; returns: ix = pointer to tileset levels lut
046378             0013*   get_tileset_ptr:
046378 3A 6F 63 04 0014*       ld a,(tileset_ptr_idx)
04637C 57          0015*       ld d,a ; d = tileset index
04637D 1E 03       0016*       ld e,3 ; three bytes per index record
04637F ED 5C       0017*       mlt de ; offset into tileset_ptrs lut
046381 DD 21 72 63 0018*       ld ix,tileset_ptrs
       04          
046386 DD 19       0019*       add ix,de ; ix = pointer to tileset_ptrs record
046388 C9          0020*       ret
046389             0021*   ; end get_tileset_ptr
046389             0022*   
046389             0023*   ; intialize a tileset
046389             0024*   ; inputs: a = index into tileset_ptrs
046389             0025*   init_tileset:
046389 32 6F 63 04 0026*       ld (tileset_ptr_idx),a ; store new tileset index
04638D CD 78 63 04 0027*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
046391 DD 37 00    0028*       ld ix,(ix) ; ix = pointer to tileset levels lut
046394 DD 7E FF    0029*       ld a,(ix-1) ; number of levels in the tileset
046397 32 C7 63 04 0030*       ld (num_levels),a
04639B AF          0031*       xor a ; reset current level to zero
04639C 32 C6 63 04 0032*       ld (cur_level),a
0463A0 C3 00 64 04 0033*       jp init_level
0463A4             0034*   ; end init_tileset
0463A4             0035*   
0463A4             0036*   next_tileset:
0463A4 21 6F 63 04 0037*       ld hl,tileset_ptr_idx
0463A8 34          0038*       inc (hl) ; bump to next index
0463A9 CD 78 63 04 0039*       call get_tileset_ptr ; ix = pointer to tileset_ptrs record
0463AD DD 27 00    0040*       ld hl,(ix) ; ix = pointer to tileset levels lut
0463B0             0041*       sign_hlu ; check for list terminator (0)
0463B0 19          0001*M1     add hl,de ; 1 cycle
0463B1 B7          0002*M1     or a ; clear flags ; 1 cycle
0463B2 ED 52       0003*M1     sbc hl,de ; 2 cycles
0463B4             0004*M1     ; 4 cycles total
0463B4 C2 C2 63 04 0042*       jp nz,@F ; not end of list
0463B8 3E FF       0043*       ld a,-1 ; will wrap around to zero on the next iteration
0463BA 32 6F 63 04 0044*       ld (tileset_ptr_idx),a
0463BE C3 A4 63 04 0045*       jp next_tileset ; try again
0463C2             0046*   @@:
0463C2 C3 89 63 04 0047*       jp init_tileset
0463C6             0048*   ; end next_tileset
0463C6             0049*   
0463C6 00          0050*   cur_level: db 0
0463C7 00          0051*   num_levels: db 0
0463C8             0052*   
0463C8             0053*   ; get a pointer to the current level lookup record
0463C8             0054*   ; inputs: tileset_ptr_idx, cur_level
0463C8             0055*   ; returns: ix = pointer to level definition
0463C8             0056*   get_level_ptr:
0463C8 CD 78 63 04 0057*       call get_tileset_ptr
0463CC DD 37 00    0058*       ld ix,(ix) ; ix = pointer to tileset levels lut
0463CF 3A C6 63 04 0059*       ld a,(cur_level)
0463D3 57          0060*       ld d,a ; d = level index
0463D4 1E 03       0061*       ld e,3 ; three bytes per level record
0463D6 ED 5C       0062*       mlt de ; offset into tileset levels lut
0463D8 DD 19       0063*       add ix,de ; ix = pointer to level record
0463DA C9          0064*       ret
0463DB             0065*   ; end get_level_ptr
0463DB             0066*   
0463DB             0067*   ; advance to the next level in the current tileset
0463DB             0068*   ; inputs: tileset_ptr_idx, cur_level
0463DB             0069*   next_level:
0463DB             0070*   ; update starting score
0463DB 2A 75 6D 04 0071*       ld hl,(player_score)
0463DF 22 7B 6D 04 0072*       ld (player_starting_score),hl
0463E3             0073*   ; set up pointers to next map definition
0463E3 21 C6 63 04 0074*       ld hl,cur_level
0463E7 34          0075*       inc (hl) ; bump to next level
0463E8 CD C8 63 04 0076*       call get_level_ptr ; ix points to current level lookup record
0463EC DD 27 00    0077*       ld hl,(ix) ; hl = pointer to next level lookup record
0463EF             0078*       sign_hlu ; check for list terminator (0)
0463EF 19          0001*M1     add hl,de ; 1 cycle
0463F0 B7          0002*M1     or a ; clear flags ; 1 cycle
0463F1 ED 52       0003*M1     sbc hl,de ; 2 cycles
0463F3             0004*M1     ; 4 cycles total
0463F3 C2 00 64 04 0079*       jp nz,@F ; not end of list
0463F7 AF          0080*       xor a ; reset level to zero
0463F8 32 C6 63 04 0081*       ld (cur_level),a
0463FC C3 A4 63 04 0082*       jp next_tileset ; try next tileset
046400             0083*   @@: ; fall through to init_level
046400             0084*   ; end next_level
046400             0085*   
046400             0086*   ; inputs: tileset_ptr_idx, cur_level
046400             0087*   init_level:
046400             0088*   ; ; initialize sprites and active tiles table
046400             0089*   ;     call sprites_init
046400             0090*   ;     call table_init
046400             0091*   ;     call tile_table_init
046400             0092*   ; set pointers
046400 CD C8 63 04 0093*       call get_level_ptr ; ix points to level lookup record
046404 DD 37 00    0094*       ld ix,(ix) ; ix points to level definition
046407             0095*   ; set tiles_cols
046407 DD 7E 00    0096*       ld a,(ix+0)
04640A 32 23 79 04 0097*       ld (tiles_cols),a
04640E             0098*   ; set tiles_row counter
04640E DD 7E 01    0099*       ld a,(ix+1)
046411 32 20 79 04 0100*       ld (tiles_row),a
046415             0101*   ; set cur_baseBufferId
046415 DD 27 04    0102*       ld hl,(ix+4)
046418 22 24 79 04 0103*       ld (cur_baseBufferId),hl
04641C             0104*   ; set tiles_row_defs
04641C ED 32 07    0105*       lea ix,ix+7 ; ix points to definition of first tile of first row
04641F DD 22 1D 79 0106*       ld (tiles_row_defs),ix
       04          
046424             0107*   ; reset tile rows and plot coordinates
046424 21 FF FF FF 0108*       ld hl,-1
046428 22 1D 7A 04 0109*       ld (bg_y_plot),hl
04642C 23          0110*       inc hl
04642D 22 28 79 04 0111*       ld (tiles_x_plot),hl
046431 21 F1 FF FF 0112*       ld hl,-15
046435 22 2C 79 04 0113*       ld (tiles_y_plot),hl
046439             0114*   ; print level number
046439 CD C8 64 04 0115*       call print_level
04643D             0116*       ; call start_level_countdown
04643D C9          0117*       ret
04643E             0118*   ; end init_level
04643E             0119*   
04643E             0120*   init_bg:
04643E             0121*   ; draw initial background tiles
04643E 21 00 04 00 0122*       ld hl,BUF_BG_STARS_0
046442 CD 95 13 04 0123*       call vdu_buff_select
046446 01 00 00 00 0124*       ld bc,0
04644A 11 00 00 00 0125*       ld de,field_top
04644E CD F1 16 04 0126*       call vdu_plot_bmp
046452 21 02 04 00 0127*       ld hl,BUF_BG_STARS_4
046456 CD 95 13 04 0128*       call vdu_buff_select
04645A 01 00 00 00 0129*       ld bc,0
04645E 11 00 01 00 0130*       ld de,field_top+256
046462 CD F1 16 04 0131*       call vdu_plot_bmp
046466 C9          0132*       ret
046467             0133*   ; end init_level
046467             0134*   start_level_countdown:
046467             0135*   ; set gfx origin and viewport to playing field window
046467 CD 13 6E 04 0136*       call set_gfx_playing_field
04646B CD 3E 64 04 0137*       call init_bg
04646F             0138*   ; set text colors
04646F 3E 90       0139*       ld a,16+128 ; darkest blue
046471 CD D1 12 04 0140*       call vdu_colour_text
046475 3E 3A       0141*       ld a,58 ; dark orange
046477 CD D1 12 04 0142*       call vdu_colour_text
04647B             0143*   ; print get ready message
04647B 0E 1B       0144*       ld c,27 ; x
04647D 06 10       0145*       ld b,16 ; y
04647F CD 8C 12 04 0146*       call vdu_move_cursor
046483 CD 5C 00 04 0147*       call printInline
046487 47 65 74 20 0148*       asciz "Get Ready!"
       52 65 61 64 
       79 21 00    
046492             0149*   ; countdown to restart
046492 0E 18       0150*       ld c,24 ; x
046494 06 11       0151*       ld b,17 ; y
046496 CD 8C 12 04 0152*       call vdu_move_cursor
04649A CD 5C 00 04 0153*       call printInline
04649E 53 74 61 72 0154*       asciz "Starting In..."
       74 69 6E 67 
       20 49 6E 2E 
       2E 2E 00    
0464AD 06 06       0155*       ld b,6 ; loop counter
0464AF             0156*   @waitLoop:
0464AF C5          0157*       push bc
0464B0 78          0158*       ld a,b
0464B1 3D          0159*       dec a
0464B2 CD E2 7D 04 0160*       call printHexA
0464B6 0E 26       0161*       ld c,38 ; x
0464B8 06 11       0162*       ld b,17 ; y
0464BA CD 8C 12 04 0163*       call vdu_move_cursor
0464BE 3E 80       0164*       ld a,%10000000 ; bit 7 changes once per second
0464C0 CD 35 12 04 0165*       call multiPurposeDelay
0464C4 C1          0166*       pop bc
0464C5 10 E8       0167*       djnz @waitLoop
0464C7 C9          0168*       ret
0464C8             0169*   ; end start_level_countdown
0464C8             0170*   
0464C8             0171*   level_x: equ 39
0464C8             0172*   level_y: equ 1
0464C8             0173*   print_level:
0464C8             0174*   ; set text colors
0464C8 3E 80       0175*       ld a,c_black+128
0464CA CD D1 12 04 0176*       call vdu_colour_text
0464CE 3E 0A       0177*       ld a,c_green
0464D0 CD D1 12 04 0178*       call vdu_colour_text
0464D4             0179*   ; set text coordinates and print
0464D4 0E 27       0180*       ld c,level_x
0464D6 06 01       0181*       ld b,level_y
0464D8 CD 8C 12 04 0182*       call vdu_move_cursor
0464DC CD 5C 00 04 0183*       call printInline
0464E0 4C 65 76 65 0184*       asciz "Level "
       6C 20 00    
0464E7 3A C6 63 04 0185*       ld a,(cur_level)
0464EB CD E2 7D 04 0186*       call printHexA
0464EF C9          0187*       ret
0464F0             0188*   ; end print_level
0464F0             0057        include "levels_tileset_0.inc"
0464F0             0001*   ; Generated from tiles/dg/dg0_00.tmx
0464F0             0002*   
0464F0 01          0003*   tileset_00_num_levels: db 1
0464F1             0004*   
0464F1             0005*   tileset_00_levels:
0464F1 F7 64 04    0006*   	dl tileset_00_level_00
0464F4 00 00 00    0007*   	dl 0 ; list terminator
0464F7             0008*   
0464F7             0009*   tileset_00_level_00: ; Level 0
0464F7 10          0010*   	db 16          ; num cols
0464F8 20 00 00    0011*   	dl 32          ; num rows
0464FB 00 02 00    0012*   	dl 512 ; base bufferId
0464FE F8 F8 F8 F8 0013*   	db 248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248
       F8 F8 F8 F8 
       F8 F8 F8 F8 
       F8 F8 F8 F8 
04650E BF BF BF BF 0014*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04651E BF BF BF BF 0015*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04652E BF BF BF BF 0016*   	db 191,191,191,191,191,191,191,001,191,191,191,191,191,191,191,191
       BF BF BF 01 
       BF BF BF BF 
       BF BF BF BF 
04653E BF BF BF BF 0017*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04654E BF BF BF BF 0018*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04655E BF BF BF BF 0019*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04656E BF BF BF BF 0020*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04657E BF BF BF BF 0021*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04658E BF BF BF BF 0022*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04659E 05 BF BF BF 0023*   	db 005,191,191,191,191,191,191,191,191,191,191,191,191,191,191,005
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF 05 
0465AE BF BF BF BF 0024*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
0465BE BF BF BF BF 0025*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
0465CE BF BF BF BF 0026*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
0465DE BF BF BF BF 0027*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
0465EE BF BF BF BF 0028*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
0465FE BF BF BF BF 0029*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04660E BF BF BF BF 0030*   	db 191,191,191,191,191,191,191,191,191,191,191,001,191,191,191,191
       BF BF BF BF 
       BF BF BF 01 
       BF BF BF BF 
04661E BF BF BF BF 0031*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04662E BF BF BF BF 0032*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04663E BF BF BF BF 0033*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04664E 05 BF BF BF 0034*   	db 005,191,191,191,191,191,191,191,191,191,191,191,191,191,191,005
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF 05 
04665E BF BF BF BF 0035*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04666E BF BF BF BF 0036*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04667E BF BF BF BF 0037*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04668E BF BF BF BF 0038*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
04669E BF BF 01 BF 0039*   	db 191,191,001,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
0466AE BF BF BF BF 0040*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
0466BE BF BF BF BF 0041*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
0466CE BF BF BF BF 0042*   	db 191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF BF 
0466DE 05 BF BF BF 0043*   	db 005,191,191,191,191,191,191,191,191,191,191,191,191,191,191,005
       BF BF BF BF 
       BF BF BF BF 
       BF BF BF 05 
0466EE 6B 6B 6B 6B 0044*   	db 107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107
       6B 6B 6B 6B 
       6B 6B 6B 6B 
       6B 6B 6B 6B 
0466FE             0058        include "player_state.inc"
0466FE             0001*   player_defaults:
0466FE 05          0002*       db player               ; type
0466FF 6F 01 00    0003*       dl BUF_SHIP_0L          ; base_bufferId
046702 66 67 04    0004*       dl do_player            ; move_program
046705 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
046706 10          0006*       db 16                   ; dim_x
046707 10          0007*       db 16                   ; dim_y
046708 01          0008*       db 1                    ; num_orientations
046709 01          0009*       db 1                    ; num_animations
04670A 00          0010*       db 0                    ; animation
04670B 00          0011*       db 0                    ; animation_timer
04670C 00          0012*       db 0                    ; move_timer
04670D 00          0013*       db 0                    ; move_step
04670E 00          0014*       db 0                    ; points
04670F 00          0015*       db 0                    ; shield_damage
046710 00          0016*       db 0                    ; frame
046711             0017*   
046711 F5 67 04    0018*   player_state:  dl player_alive
046714 00          0019*   player_ships: db 0
046715 03          0020*   player_ships_max: db 3
046716             0021*   player_speed: equ 3*256 ; pixels per frame 16.8 fixed
046716             0022*   
046716             0023*   draw_player_ships:
046716             0024*   ; activate mfd
046716 DD 21 05 69 0025*       ld ix,mfd_ships
       04          
04671B CD 0C 6A 04 0026*       call mfd_activate
04671F             0027*   ; blank out previously drawn ships
04671F AF          0028*       xor a ; color mode 0
046720 0E 00       0029*       ld c,c_black
046722 CD E2 12 04 0030*       call vdu_gcol
046726 01 00 00 00 0031*       ld bc,0
04672A 11 00 00 00 0032*       ld de,0
04672E DD 21 4F 00 0033*       ld ix,0+79
       00          
046733 FD 21 0F 00 0034*       ld iy,0+15
       00          
046738 CD 2E 17 04 0035*       call vdu_plot_rf
04673C             0036*   ; draw the ships remaining
04673C 21 2B 00 00 0037*       ld hl,BUF_SHIP_MFD
046740 CD 95 13 04 0038*       call vdu_buff_select
046744 3A 14 67 04 0039*       ld a,(player_ships) ; loop counter
046748 01 00 00 00 0040*       ld bc,0 ; starting x-coordinate
04674C             0041*   @loop:
04674C 3D          0042*       dec a ; we don't count the ship we're flying
04674D C8          0043*       ret z
04674E F5          0044*       push af ; back up loop counter
04674F C5          0045*       push bc ; save x-coordinate
046750 11 00 00 00 0046*       ld de,0 ; y-coordinate
046754 CD F1 16 04 0047*       call vdu_plot_bmp
046758 C1          0048*       pop bc ; restore x-coordinate
046759 21 10 00 00 0049*       ld hl,16 ; bump x-coords
04675D 09          0050*       add hl,bc
04675E E5          0051*       push hl
04675F C1          0052*       pop bc ; bc = new x-coordinate
046760 F1          0053*       pop af
046761 C3 4C 67 04 0054*       jp @loop
046765 C9          0055*       ret
046766             0056*   ; end draw_player_ships
046766             0057*   
046766             0058*   do_player:
046766 2A 11 67 04 0059*       ld hl,(player_state)
04676A             0060*       CALL_HL
04676A 01 70 67 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
04676E C5          0002*M1     push bc ; which constitutes the return address
04676F E9          0003*M1     jp (hl) ; Jump to the address in HL
046770 C9          0061*       ret
046771             0062*   ; end do_player
046771             0063*   
046771             0064*   ; set initial player position
046771             0065*   ; inputs: none,everything is hardcoded
046771             0066*   ; outputs: player_x/y set to bottom-left corner of screen
046771             0067*   ; destroys: pretty much everything
046771             0068*   player_init:
046771 3A BF 6D 04 0069*       ld a,(player_shields_max)
046775 32 BE 6D 04 0070*       ld (player_shields),a
046779 3A 46 6C 04 0071*       ld a,(laser_power_max)
04677D 32 44 6C 04 0072*       ld (laser_power),a
046781 3A 24 6B 04 0073*       ld a,(player_fuel_max)
046785 32 22 6B 04 0074*       ld (player_fuel),a
046789             0075*   ; set all to zero so they will update
046789 AF          0076*       xor a
04678A 32 45 6C 04 0077*       ld (laser_power_last),a
04678E 32 C0 6D 04 0078*       ld (player_shields_last),a
046792 32 23 6B 04 0079*       ld (player_fuel_last),a
046796             0080*   ; set player sprite record with defaults
046796 DD 21 07 8A 0081*       ld ix,player_begin
       04          
04679B 21 FE 66 04 0082*       ld hl,player_defaults
04679F 01 00 00 00 0083*       ld bc,0*256
0467A3 11 00 40 01 0084*       ld de,sprite_bottom*256
0467A7 3E 01       0085*       ld a,1
0467A9 CD F3 6E 04 0086*       call spawn_sprite_from_coords
0467AD D2 D8 67 04 0087*       jp nc,@draw
0467B1 DD CB 16 BE 0088*       res 7,(ix+sprite_type)
0467B5             0089*   ; load sprite frames
0467B5 DD 7E 00    0090*       ld a,(ix+sprite_id)
0467B8 CD 92 17 04 0091*       call vdu_sprite_select
0467BC CD A5 17 04 0092*       call vdu_sprite_clear_frames
0467C0 21 6F 01 00 0093*       ld hl,BUF_SHIP_0L
0467C4 CD E7 18 04 0094*       call vdu_sprite_add_buff
0467C8 21 70 01 00 0095*       ld hl,BUF_SHIP_1C
0467CC CD E7 18 04 0096*       call vdu_sprite_add_buff
0467D0 21 71 01 00 0097*       ld hl,BUF_SHIP_2R
0467D4 CD E7 18 04 0098*       call vdu_sprite_add_buff
0467D8             0099*   @draw:
0467D8 01 00 00 00 0100*       ld bc,0*256
0467DC 11 00 40 01 0101*       ld de,sprite_bottom*256
0467E0 CD 5E 18 04 0102*       call vdu_sprite_move_abs168
0467E4 CD 08 18 04 0103*       call vdu_sprite_show
0467E8 21 F5 67 04 0104*       ld hl,player_alive
0467EC 22 11 67 04 0105*       ld (player_state),hl
0467F0 DD CB 1D F6 0106*       set sprite_alive,(ix+sprite_collisions)
0467F4 C9          0107*       ret
0467F5             0108*   ; end player_init
0467F5             0109*   
0467F5             0110*   player_alive:
0467F5 CD 5F 6B 04 0111*       call player_input
0467F9 CD B0 6C 04 0112*       call player_move_weapons
0467FD C9          0113*       ret
0467FE             0114*   ; end player_alive
0467FE             0115*   
0467FE             0116*   kill_player:
0467FE             0117*   ; set player collision flag to dead
0467FE DD 21 07 8A 0118*       ld ix,player_begin
       04          
046803 DD CB 1D B6 0119*       res sprite_alive,(ix+sprite_collisions)
046807             0120*   ; change seeker move program to move_enemy_seeker_orbit
046807 FD 21 47 8A 0121*       ld iy,seekers_base
       04          
04680C 21 ED 1F 04 0122*       ld hl,move_enemy_seeker_orbit
046810 06 03       0123*       ld b,seekers_max
046812 CD E6 6F 04 0124*       call change_sprite_group_move_program
046816             0125*   ; set player state to dying
046816 21 1F 68 04 0126*       ld hl,player_dying
04681A 22 11 67 04 0127*       ld (player_state),hl
04681E C9          0128*       ret
04681F             0129*   ; end kill_player
04681F             0130*   
04681F             0131*   player_dying:
04681F             0132*   ; spawn explosions at player location
04681F 06 10       0133*       ld b,16 ; loop counter
046821             0134*   @loop_explode:
046821 C5          0135*       push bc ; save loop counter
046822 CD 49 21 04 0136*       call spawn_explosion_player
046826             0137*   ; move explosions for a few frames
046826 06 10       0138*       ld b,16 ; loop counter
046828             0139*   @loop_animate:
046828 C5          0140*       push bc
046829 CD 3C 68 04 0141*       call @animate
04682D C1          0142*       pop bc
04682E 10 F8       0143*       djnz @loop_animate
046830 C1          0144*       pop bc
046831 10 EE       0145*       djnz @loop_explode
046833             0146*   ; set game state to player dead
046833 21 64 68 04 0147*       ld hl,player_dead
046837 22 11 67 04 0148*       ld (player_state),hl
04683B C9          0149*       ret
04683C             0150*   @animate:
04683C CD 2F 79 04 0151*       call tiles_plot
046840 CD 13 6E 04 0152*       call set_gfx_playing_field
046844 CD B0 6C 04 0153*       call player_move_weapons
046848 CD E2 1E 04 0154*       call do_enemies
04684C CD B7 21 04 0155*       call move_explosions
046850 CD 9F 7A 04 0156*       call move_tiles
046854 CD 14 13 04 0157*       call vdu_vblank
046858 C9          0158*       ret
046859             0159*   ; end player_dying
046859             0160*   
046859 47 65 74 20 0161*   get_ready: asciz "Get Ready!"
       52 65 61 64 
       79 21 00    
046864             0162*   
046864             0163*   player_dead:
046864             0164*   ; decrement lives
046864 3A 14 67 04 0165*       ld a,(player_ships)
046868 3D          0166*       dec a
046869 CA 24 71 04 0167*       jp z,game_over
04686D 32 14 67 04 0168*       ld (player_ships),a
046871 CD 16 67 04 0169*       call draw_player_ships
046875             0170*   ; reset the sprite table
046875 CD 5B 6E 04 0171*       call table_init
046879 21 07 89 04 0172*       ld hl,table_base
04687D 22 36 6E 04 0173*       ld (table_pointer),hl
046881             0174*   ; initialize sprites and active tiles table
046881 CD 93 6E 04 0175*       call sprites_init
046885 CD 5B 6E 04 0176*       call table_init
046889 CD B9 77 04 0177*       call tile_table_init
04688D             0178*   ; reset player score to what it was at the start of the level
04688D 2A 7B 6D 04 0179*       ld hl,(player_starting_score)
046891 22 75 6D 04 0180*       ld (player_score),hl
046895             0181*   ; restart the level
046895 CD 67 64 04 0182*       call start_level_countdown
046899 CD 00 64 04 0183*       call init_level
04689D             0184*   ; spawn player sprite at starting position
04689D CD 71 67 04 0185*       call player_init
0468A1             0186*   ; set the game state to playing
0468A1 21 61 73 04 0187*       ld hl,game_playing
0468A5 22 F3 70 04 0188*       ld (game_state), hl
0468A9             0189*   ; set game playing substates
0468A9 21 F5 67 04 0190*       ld hl,player_alive
0468AD 22 11 67 04 0191*       ld (player_state), hl
0468B1 21 ED 1E 04 0192*       ld hl,enemies_alive
0468B5 22 DF 1E 04 0193*       ld (enemies_state), hl
0468B9 C9          0194*       ret
0468BA             0195*   ; end player_dead
0468BA             0059        include "player_cockpit.inc"
0468BA             0001*   ; offsets into control panel element definitions
0468BA             0002*   panel_bufferId: equ 0
0468BA             0003*   panel_x0: equ 3
0468BA             0004*   panel_y0: equ 6
0468BA             0005*   panel_x1: equ 9
0468BA             0006*   panel_y1: equ 12
0468BA             0007*   
0468BA             0008*   ctl_panel_l:
0468BA 09 00 00    0009*       dl BUF_CTL_PANEL_L ; bufferId
0468BD 00 00 00    0010*       dl 0 ; x0
0468C0 00 01 00    0011*       dl 256 ; y0
0468C3 7F 00 00    0012*       dl 0+127 ; x1
0468C6 7F 01 00    0013*       dl 256+127 ; y1
0468C9             0014*   
0468C9             0015*   ctl_panel_r:
0468C9 0B 00 00    0016*       dl BUF_CTL_PANEL_R ; bufferId
0468CC 80 01 00    0017*       dl 384 ; x0
0468CF 00 01 00    0018*       dl 256 ; y0
0468D2 FF 01 00    0019*       dl 384+127 ; x1
0468D5 7F 01 00    0020*       dl 256+127 ; y1
0468D8             0021*   
0468D8             0022*   ctl_panel_top:
0468D8 0C 00 00    0023*       dl BUF_CTL_PANEL_TOP ; bufferId
0468DB 50 00 00    0024*       dl 80 ; x0
0468DE 00 00 00    0025*       dl 0 ; y0
0468E1 AF 01 00    0026*       dl 80+351 ; x1
0468E4 2F 00 00    0027*       dl 0+47 ; y1
0468E7             0028*   
0468E7             0029*   mfd_bezel_l:
0468E7 0F 00 00    0030*       dl BUF_MFD_BEZEL ; bufferId
0468EA 18 00 00    0031*       dl 24 ; x0
0468ED 18 01 00    0032*       dl 280 ; y0
0468F0 77 00 00    0033*       dl 24+95 ; x1
0468F3 77 01 00    0034*       dl 280+95 ; y1
0468F6             0035*   
0468F6             0036*   mfd_bezel_r:
0468F6 0F 00 00    0037*       dl BUF_MFD_BEZEL ; bufferId
0468F9 88 01 00    0038*       dl 392 ; x0
0468FC 18 01 00    0039*       dl 280 ; y0
0468FF E7 01 00    0040*       dl 392+95 ; x1
046902 77 01 00    0041*       dl 280+95 ; y1
046905             0042*   
046905             0043*   mfd_ships:
046905 00 00 00    0044*       dl 0 ; bufferId
046908 80 00 00    0045*       dl 128 ; x0
04690B 08 00 00    0046*       dl 8 ; y0
04690E CF 00 00    0047*       dl 128+79 ; x1
046911 27 00 00    0048*       dl 8+31 ; y1
046914             0049*   
046914             0050*   draw_player_cockpit:
046914 DD 21 BA 68 0051*       ld ix,ctl_panel_l
       04          
046919 CD CD 69 04 0052*       call draw_player_ctl_panel
04691D DD 21 C9 68 0053*       ld ix,ctl_panel_r
       04          
046922 CD CD 69 04 0054*       call draw_player_ctl_panel
046926 DD 21 D8 68 0055*       ld ix,ctl_panel_top
       04          
04692B CD CD 69 04 0056*       call draw_player_ctl_panel
04692F DD 21 E7 68 0057*       ld ix,mfd_bezel_l
       04          
046934 CD CD 69 04 0058*       call draw_player_ctl_panel
046938 DD 21 DF 69 0059*       ld ix,mfd_bg_l
       04          
04693D CD CD 69 04 0060*       call draw_player_ctl_panel
046941 DD 21 EE 69 0061*       ld ix,mfd_arms_l
       04          
046946 CD CD 69 04 0062*       call draw_player_ctl_panel
04694A DD 21 F6 68 0063*       ld ix,mfd_bezel_r
       04          
04694F CD CD 69 04 0064*       call draw_player_ctl_panel
046953 DD 21 FD 69 0065*       ld ix,mfd_bg_r
       04          
046958 CD CD 69 04 0066*       call draw_player_ctl_panel
04695C             0067*   
04695C 21 2A 00 00 0068*       ld hl,BUF_SHIELD
046960 CD 95 13 04 0069*       call vdu_buff_select
046964 01 EC 01 00 0070*       ld bc,492
046968 11 70 01 00 0071*       ld de,368
04696C CD F1 16 04 0072*       call vdu_plot_bmp
046970             0073*   
046970 21 29 00 00 0074*       ld hl,BUF_POWER
046974 CD 95 13 04 0075*       call vdu_buff_select
046978 01 04 00 00 0076*       ld bc,4
04697C 11 70 01 00 0077*       ld de,368
046980 CD F1 16 04 0078*       call vdu_plot_bmp
046984             0079*   
046984 21 08 00 00 0080*       ld hl,BUF_CREDITS
046988 CD 95 13 04 0081*       call vdu_buff_select
04698C 01 80 01 00 0082*       ld bc,384
046990 11 05 01 00 0083*       ld de,261
046994 CD F1 16 04 0084*       call vdu_plot_bmp
046998             0085*   
046998 21 0D 00 00 0086*       ld hl,BUF_JERRY_CAN
04699C CD 95 13 04 0087*       call vdu_buff_select
0469A0 01 6E 00 00 0088*       ld bc,110
0469A4 11 02 01 00 0089*       ld de,258
0469A8 CD F1 16 04 0090*       call vdu_plot_bmp
0469AC             0091*   
0469AC 21 0A 00 00 0092*       ld hl,BUF_CTL_PANEL_NAVBALL_SM
0469B0 CD 95 13 04 0093*       call vdu_buff_select
0469B4 01 A4 01 00 0094*       ld bc,420
0469B8 11 35 01 00 0095*       ld de,309
0469BC CD F1 16 04 0096*       call vdu_plot_bmp
0469C0             0097*   
0469C0 CD D3 6D 04 0098*       call init_bar_shields
0469C4 CD 5C 6C 04 0099*       call init_bar_laser
0469C8 CD 09 6B 04 0100*       call init_bar_fuel
0469CC             0101*   
0469CC C9          0102*       ret
0469CD             0103*   ; end draw_player_cockpit
0469CD             0104*   
0469CD             0105*   draw_player_ctl_panel:
0469CD DD 27 00    0106*       ld hl,(ix+panel_bufferId)
0469D0 CD 95 13 04 0107*       call vdu_buff_select
0469D4 DD 07 03    0108*       ld bc,(ix+panel_x0)
0469D7 DD 17 06    0109*       ld de,(ix+panel_y0)
0469DA CD F1 16 04 0110*       call vdu_plot_bmp
0469DE C9          0111*       ret
0469DF             0112*   ; end draw_player_ctl_panel
0469DF             0113*   
0469DF             0114*   mfd_bg_l:
0469DF 10 00 00    0115*       dl BUF_MFD_BG ; bufferId
0469E2 28 00 00    0116*       dl 40 ; x0
0469E5 28 01 00    0117*       dl 296 ; y0
0469E8 67 00 00    0118*       dl 40+63 ; x1
0469EB 67 01 00    0119*       dl 296+63 ; y1
0469EE             0120*   
0469EE             0121*   mfd_arms_l:
0469EE 0E 00 00    0122*       dl BUF_MFD_ARMS ; bufferId
0469F1 36 00 00    0123*       dl 54 ; x0
0469F4 40 01 00    0124*       dl 320 ; y0
0469F7 59 00 00    0125*       dl 54+35 ; x1
0469FA 51 01 00    0126*       dl 320+17 ; y1
0469FD             0127*   
0469FD             0128*   mfd_bg_r:
0469FD 10 00 00    0129*       dl BUF_MFD_BG ; bufferId
046A00 98 01 00    0130*       dl 408 ; x0
046A03 28 01 00    0131*       dl 296 ; y0
046A06 D7 01 00    0132*       dl 408+63 ; x1
046A09 67 01 00    0133*       dl 296+63 ; y1
046A0C             0134*   
046A0C             0135*   mfd_activate:
046A0C DD E5       0136*       push ix ; preserve pointer
046A0E DD 07 03    0137*       ld bc,(ix+panel_x0)
046A11 DD 17 06    0138*       ld de,(ix+panel_y0)
046A14 CD 25 13 04 0139*       call vdu_set_gfx_origin
046A18 01 00 00 00 0140*       ld bc,0
046A1C 11 00 00 00 0141*       ld de,0
046A20 DD 21 3F 00 0142*       ld ix,63
       00          
046A25 FD 21 3F 00 0143*       ld iy,63
       00          
046A2A CD 40 13 04 0144*       call vdu_set_gfx_viewport
046A2E DD E1       0145*       pop ix ; restore pointer
046A30 C9          0146*       ret
046A31             0147*   ; end mfd_activate
046A31             0148*   
046A31             0149*   mfd_init:
046A31 DD 27 00    0150*       ld hl,(ix+panel_bufferId)
046A34 CD 95 13 04 0151*       call vdu_buff_select
046A38 01 00 00 00 0152*       ld bc,0
046A3C 11 00 00 00 0153*       ld de,0
046A40 CD F1 16 04 0154*       call vdu_plot_bmp
046A44 C9          0155*       ret
046A45             0156*   ; end mfd_init
046A45             0157*   
046A45             0158*   bar_val: equ 0 ; current value
046A45             0159*   bar_x0: equ panel_x0
046A45             0160*   bar_y0: equ panel_y0
046A45             0161*   bar_x1: equ panel_x1
046A45             0162*   bar_y1: equ panel_y1
046A45             0163*   bar_y: equ 15 ; y-plot coordinate
046A45             0164*   bar_x: equ 15 ; x-plot coordinate
046A45             0165*   
046A45             0166*   bar_yellow: equ 33
046A45             0167*   bar_red: equ 17
046A45             0168*   
046A45             0169*   ; update a vertical bar display
046A45             0170*   ; inputs: ix points to bar structure
046A45             0171*   ;         bar_val set by caller
046A45             0172*   ; prerequisite: bar_init called before first use
046A45             0173*   bar_update_v:
046A45             0174*   ; set gfx viewport
046A45 DD E5       0175*       push ix ; preserve pointer
046A47 DD 07 03    0176*       ld bc,(ix+bar_x0)
046A4A DD 17 06    0177*       ld de,(ix+bar_y0)
046A4D DD 31 0C    0178*       ld iy,(ix+bar_y1)
046A50 DD 37 09    0179*       ld ix,(ix+bar_x1)
046A53 CD 40 13 04 0180*       call vdu_set_gfx_viewport
046A57 DD E1       0181*       pop ix ; restore pointer
046A59             0182*   ; select the color based on the value thresholds
046A59 DD 17 00    0183*       ld de,(ix+bar_val)
046A5C 21 EF FF FF 0184*       ld hl,-bar_red
046A60 19          0185*       add hl,de
046A61 D2 7E 6A 04 0186*       jp nc,@red
046A65 21 DF FF FF 0187*       ld hl,-bar_yellow
046A69 19          0188*       add hl,de
046A6A D2 76 6A 04 0189*       jp nc,@yellow
046A6E 21 05 00 00 0190*       ld hl,BUF_BAR_V_2 ; green
046A72 C3 82 6A 04 0191*       jp @select
046A76             0192*   @yellow:
046A76 21 04 00 00 0193*       ld hl,BUF_BAR_V_1 ; yellow
046A7A C3 82 6A 04 0194*       jp @select
046A7E             0195*   @red:
046A7E 21 03 00 00 0196*       ld hl,BUF_BAR_V_0 ; red
046A82             0197*   @select:
046A82 CD 95 13 04 0198*       call vdu_buff_select
046A86             0199*   ; get x-plot position
046A86 DD 07 03    0200*       ld bc,(ix+bar_x0)
046A89             0201*   ; compute y-plot position
046A89 DD 17 00    0202*       ld de,(ix+bar_val)
046A8C 21 40 00 00 0203*       ld hl,64
046A90 AF          0204*       xor a ; clear carry
046A91 ED 52       0205*       sbc hl,de
046A93 DD 17 0F    0206*       ld de,(ix+bar_y)
046A96 19          0207*       add hl,de
046A97 7D          0208*       ld a,l
046A98 E6 FC       0209*       and %11111100 ; round to nearest 4 pixels
046A9A 6F          0210*       ld l,a
046A9B EB          0211*       ex de,hl
046A9C CD F1 16 04 0212*       call vdu_plot_bmp
046AA0 C9          0213*       ret
046AA1             0214*   ; end bar_update_v
046AA1             0215*   
046AA1             0216*   ; update a horizontal bar display
046AA1             0217*   ; inputs: ix points to bar structure
046AA1             0218*   ;         bar_val set by caller
046AA1             0219*   ; prerequisite: bar_init called before first use
046AA1             0220*   bar_update_h:
046AA1             0221*   ; set gfx viewport
046AA1 DD E5       0222*       push ix ; preserve pointer
046AA3 DD 07 03    0223*       ld bc,(ix+bar_x0)
046AA6 DD 17 06    0224*       ld de,(ix+bar_y0)
046AA9 DD 31 0C    0225*       ld iy,(ix+bar_y1)
046AAC DD 37 09    0226*       ld ix,(ix+bar_x1)
046AAF CD 40 13 04 0227*       call vdu_set_gfx_viewport
046AB3 DD E1       0228*       pop ix ; restore pointer
046AB5             0229*   ; select the color based on the value thresholds
046AB5 DD 17 00    0230*       ld de,(ix+bar_val)
046AB8 21 EF FF FF 0231*       ld hl,-bar_red
046ABC 19          0232*       add hl,de
046ABD D2 DA 6A 04 0233*       jp nc,@red
046AC1 21 DF FF FF 0234*       ld hl,-bar_yellow
046AC5 19          0235*       add hl,de
046AC6 D2 D2 6A 04 0236*       jp nc,@yellow
046ACA 21 02 00 00 0237*       ld hl,BUF_BAR_H_2 ; green
046ACE C3 DE 6A 04 0238*       jp @select
046AD2             0239*   @yellow:
046AD2 21 01 00 00 0240*       ld hl,BUF_BAR_H_1 ; yellow
046AD6 C3 DE 6A 04 0241*       jp @select
046ADA             0242*   @red:
046ADA 21 00 00 00 0243*       ld hl,BUF_BAR_H_0 ; red
046ADE             0244*   @select:
046ADE CD 95 13 04 0245*       call vdu_buff_select
046AE2             0246*   ; compute x-plot position
046AE2 DD 27 00    0247*       ld hl,(ix+bar_val)
046AE5 DD 07 0F    0248*       ld bc,(ix+bar_x)
046AE8 09          0249*       add hl,bc
046AE9 7D          0250*       ld a,l
046AEA E6 FC       0251*       and %11111100 ; round to nearest 4 pixels
046AEC 6F          0252*       ld l,a
046AED E5          0253*       push hl
046AEE C1          0254*       pop bc
046AEF             0255*   ; get y-plot position
046AEF DD 17 06    0256*       ld de,(ix+bar_y0)
046AF2 CD F1 16 04 0257*       call vdu_plot_bmp
046AF6 C9          0258*       ret
046AF7             0259*   ; end bar_update_h
046AF7             0060        include "player_fuel.inc"
046AF7             0001*   
046AF7             0002*   bar_fuel:
046AF7 00 00 00    0003*       dl 0 ; value
046AFA 30 00 00    0004*       dl 48 ; x0
046AFD 08 01 00    0005*       dl 264 ; y0
046B00 6F 00 00    0006*       dl 48+63 ; x1
046B03 0F 01 00    0007*       dl 264+7 ; y1
046B06 F0 FF FF    0008*       dl 48-64 ; x-plot coordinate
046B09             0009*   
046B09             0010*   init_bar_fuel:
046B09 3A 26 6B 04 0011*       ld a,(discharge_fuel_timer_max)
046B0D 32 25 6B 04 0012*       ld (discharge_fuel_timer),a
046B11 DD 21 F7 6A 0013*       ld ix,bar_fuel
       04          
046B16 3A 24 6B 04 0014*       ld a,(player_fuel_max)
046B1A DD 77 00    0015*       ld (ix+bar_val),a
046B1D CD A1 6A 04 0016*       call bar_update_h
046B21 C9          0017*       ret
046B22             0018*   ; end init_bar_fuel
046B22             0019*   
046B22 40          0020*   player_fuel: db 64 ; integer
046B23 00          0021*   player_fuel_last: db 0 ; integer
046B24 40          0022*   player_fuel_max: db 64 ; integer
046B25 00          0023*   discharge_fuel_timer: db 0
046B26 40          0024*   discharge_fuel_timer_max: db 64 ;
046B27             0025*   discharge_fuel:
046B27             0026*   ; check fuel timer
046B27 21 25 6B 04 0027*       ld hl,discharge_fuel_timer
046B2B 35          0028*       dec (hl)
046B2C C0          0029*       ret nz ; not time to discharge fuel so return
046B2D             0030*   ; reset fuel discharge timer
046B2D 3A 26 6B 04 0031*       ld a,(discharge_fuel_timer_max)
046B31 77          0032*       ld (hl),a
046B32             0033*   ; discharge fuel
046B32 21 22 6B 04 0034*       ld hl,player_fuel
046B36 35          0035*       dec (hl)
046B37 CA 40 6B 04 0036*       jp z,@no_fuel
046B3B FA 40 6B 04 0037*       jp m,@no_fuel
046B3F C9          0038*       ret ; fuel not zero so return
046B40             0039*   @no_fuel:
046B40 36 00       0040*       ld (hl),0 ; TODO: implement out-of-fuel handler
046B42 C9          0041*       ret
046B43             0042*   ; end discharge_fuel
046B43             0043*   
046B43             0044*   draw_fuel:
046B43 CD 27 6B 04 0045*       call discharge_fuel
046B47 21 23 6B 04 0046*       ld hl,player_fuel_last
046B4B 3A 22 6B 04 0047*       ld a,(player_fuel)
046B4F BE          0048*       cp (hl)
046B50 C8          0049*       ret z ; no change to update
046B51 77          0050*       ld (hl),a
046B52 DD 21 F7 6A 0051*       ld ix,bar_fuel
       04          
046B57 DD 77 00    0052*       ld (ix+bar_val),a ; TODO: this is redundant
046B5A CD A1 6A 04 0053*       call bar_update_h
046B5E C9          0054*       ret
046B5F             0055*   ; end draw_fuel
046B5F             0061        include "player_input.inc"
046B5F             0001*   ; UART ports for reading joystick input
046B5F             0002*   ; bit tests: 0 means actuated, 1 means not actuated
046B5F             0003*   portC: 	EQU 	$9E ; reads dpad input
046B5F             0004*   joy1_u: equ 1
046B5F             0005*   joy1_d: equ 3
046B5F             0006*   joy1_l: equ 5
046B5F             0007*   joy1_r: equ 7
046B5F             0008*   portD: 	EQU 	$A2 ; reads buttons
046B5F             0009*   btn1_a: equ 5
046B5F             0010*   
046B5F             0011*   ; process player keyboard input, set player bitmap
046B5F             0012*   ; velocities and draw player bitmap at updated coordinates
046B5F             0013*   ; Inputs: player_x/y set at desired position
046B5F             0014*   ; Returns: player bitmap drawn at updated position
046B5F             0015*   ; Destroys: probably everything except maybe iy
046B5F             0016*   ; NOTE: in mode 9 we draw the ship as a sprite, not a bitmap
046B5F             0017*   ; TODO: requires sprite implementation
046B5F             0018*   player_input:
046B5F             0019*   ; point to player sprite record
046B5F FD 21 07 8A 0020*       ld iy,player_begin
       04          
046B64 FD 22 36 6E 0021*       ld (table_pointer),iy
       04          
046B69             0022*   ; reset player component velocities to zero as the default
046B69 21 00 00 00 0023*       ld hl,0
046B6D FD 2F 07    0024*       ld (iy+sprite_xvel),hl
046B70 FD 2F 0A    0025*       ld (iy+sprite_yvel),hl
046B73             0026*   ; make ship the active sprite
046B73 FD 7E 00    0027*       ld a,(iy+sprite_id)
046B76 CD 92 17 04 0028*       call vdu_sprite_select
046B7A             0029*   ; check for keypresses and branch accordingly
046B7A             0030*       MOSCALL    mos_getkbmap ;ix = pointer to MOS virtual keys table
046B7A 3E 1E       0001*M1 			LD	A, function
046B7C 5B CF       0002*M1 			RST.LIL	08h
046B7E             0031*   ; do player directional input
046B7E AF          0032*       xor a ; clear flags
046B7F DB 9E       0033*       in a,(portC) ; read dpad input
046B81 57          0034*       ld d,a ; save dpad input
046B82 3E 01       0035*       ld a,1 ; set ship's default animation to center
046B84             0036*   ; 26 Left: move player left
046B84 DD CB 03 4E 0037*       bit 1,(ix+3)
046B88 C2 96 6B 04 0038*       jp nz,@F
046B8C             0039*   ; test dpad left
046B8C CB 6A       0040*       bit joy1_l,d
046B8E CA 96 6B 04 0041*       jp z,@F
046B92 C3 A2 6B 04 0042*       jp @right
046B96             0043*   @@:
046B96 FD 27 07    0044*       ld hl,(iy+sprite_xvel)
046B99 01 00 FD FF 0045*       ld bc,-player_speed
046B9D 09          0046*       add hl,bc
046B9E FD 2F 07    0047*       ld (iy+sprite_xvel),hl
046BA1 3D          0048*       dec a ; set ship's animation to left
046BA2             0049*   @right:
046BA2             0050*   ; 122 Right: move player right
046BA2 DD CB 0F 4E 0051*       bit 1,(ix+15)
046BA6 C2 B4 6B 04 0052*       jp nz,@F
046BAA             0053*   ; test dpad right
046BAA CB 7A       0054*       bit joy1_r,d
046BAC CA B4 6B 04 0055*       jp z,@F
046BB0 C3 C0 6B 04 0056*       jp @up
046BB4             0057*   @@:
046BB4 FD 27 07    0058*       ld hl,(iy+sprite_xvel)
046BB7 01 00 03 00 0059*       ld bc,player_speed
046BBB 09          0060*       add hl,bc
046BBC FD 2F 07    0061*       ld (iy+sprite_xvel),hl
046BBF 3C          0062*       inc a ; set ship's animation to right
046BC0             0063*   @up:
046BC0             0064*   ; 58 Up: move player up
046BC0 DD CB 07 4E 0065*       bit 1,(ix+7)
046BC4 C2 D2 6B 04 0066*       jp nz,@F
046BC8             0067*   ; test dpad up
046BC8 CB 4A       0068*       bit joy1_u,d
046BCA CA D2 6B 04 0069*       jp z,@F
046BCE C3 DD 6B 04 0070*       jp @dn
046BD2             0071*   @@:
046BD2 FD 27 0A    0072*       ld hl,(iy+sprite_yvel)
046BD5 01 00 FD FF 0073*       ld bc,-player_speed
046BD9 09          0074*       add hl,bc
046BDA FD 2F 0A    0075*       ld (iy+sprite_yvel),hl
046BDD             0076*   @dn:
046BDD             0077*   ; 42 Down: move player down
046BDD DD CB 05 4E 0078*       bit 1,(ix+5)
046BE1 C2 EF 6B 04 0079*       jp nz,@F
046BE5             0080*   ; test dpad down
046BE5 CB 5A       0081*       bit joy1_d,d
046BE7 CA EF 6B 04 0082*       jp z,@F
046BEB C3 FA 6B 04 0083*       jp @frame
046BEF             0084*   @@:
046BEF FD 27 0A    0085*       ld hl,(iy+sprite_yvel)
046BF2 01 00 03 00 0086*       ld bc,player_speed
046BF6 09          0087*       add hl,bc
046BF7 FD 2F 0A    0088*       ld (iy+sprite_yvel),hl
046BFA             0089*   @frame:
046BFA             0090*   ; a should land here loaded with the correct frame
046BFA CD F5 17 04 0091*       call vdu_sprite_select_frame
046BFE             0092*   ; draw player at updated position
046BFE FD 21 07 8A 0093*       ld iy,player_begin
       04          
046C03 FD 22 36 6E 0094*       ld (table_pointer),iy
       04          
046C08 CD FB 6F 04 0095*       call move_sprite
046C0C FD 07 01    0096*       ld bc,(iy+sprite_x)
046C0F FD 17 04    0097*       ld de,(iy+sprite_y)
046C12 CD 5E 18 04 0098*       call vdu_sprite_move_abs168
046C16             0099*   
046C16             0100*   ; process player laser fire
046C16             0101*   ; do player fire button input
046C16             0102*   ; read joystick fire button
046C16 AF          0103*       xor a ; clear flags
046C17 DB A2       0104*       in a,(portD) ; read joypad fire button input
046C19 CB 6F       0105*       bit btn1_a,a
046C1B CA BC 6C 04 0106*       jp z,player_spawn_laser
046C1F             0107*   ; 99 Space: fire main weapon
046C1F DD CB 0C 56 0108*       bit 2,(ix+12)
046C23 C2 BC 6C 04 0109*       jp nz,player_spawn_laser
046C27             0110*   ; no fire button pressed so go home
046C27 C9          0111*       ret
046C28             0112*   ; end player_input
046C28             0062        include "player_laser.inc"
046C28             0001*   laser_defaults:
046C28 06          0002*       db player_air        ; type
046C29 4A 01 00    0003*       dl BUF_LASER_A	    ; base_bufferId
046C2C 19 6D 04    0004*       dl move_player_laser	; move_program
046C2F 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
046C30 05          0006*       db 5	                ; dim_x
046C31 0D          0007*       db 13                   ; dim_y
046C32 01          0008*       db 1                    ; num_orientations
046C33 02          0009*       db 2                    ; num_animations
046C34 00          0010*       db 0	                ; animation
046C35 02          0011*       db laser_animation_timer_reset ; animation_timer
046C36 00          0012*       db 0	                ; move_timer
046C37 00          0013*       db 0	                ; move_step
046C38 00          0014*       db 0	                ; points
046C39 00          0015*       db 0	                ; shield_damage
046C3A 00          0016*       db 0                    ; frame
046C3B             0017*   
046C3B             0018*   
046C3B             0019*   player_lasers_max: equ 4
046C3B             0020*   laser_speed: equ 4*256 ; 6 pixels per frame 16.8 fixed
046C3B             0021*   tmr_laser: ds 6 ; rate timer for firing laser
       FF FF FF FF 
       FF FF 
046C41 0C 00 00    0022*   tmr_laser_reset: dl 120/10
046C44             0023*   laser_animation_timer_reset: equ 2 ; animate every two frames
046C44             0024*   
046C44 40          0025*   laser_power: db 64 ; integer
046C45 00          0026*   laser_power_last: db 0 ; integer
046C46 40          0027*   laser_power_max: db 64 ; integer
046C47 04          0028*   laser_power_per_shot: db 4 ; integer
046C48 00          0029*   charge_laser_timer: db 0
046C49 06          0030*   charge_laser_timer_max: db 6
046C4A             0031*   bar_laser:
046C4A 00 00 00    0032*       dl 0 ; value
046C4D 08 00 00    0033*       dl 8 ; x0
046C50 30 01 00    0034*       dl 304 ; y0
046C53 0F 00 00    0035*       dl 8+7 ; x1
046C56 6F 01 00    0036*       dl 304+63 ; y1
046C59 F0 00 00    0037*       dl 304-64 ; y-plot coordinate
046C5C             0038*   
046C5C             0039*   init_bar_laser:
046C5C 3A 49 6C 04 0040*       ld a,(charge_laser_timer_max)
046C60 32 48 6C 04 0041*       ld (charge_laser_timer),a
046C64 DD 21 4A 6C 0042*       ld ix,bar_laser
       04          
046C69 3A 46 6C 04 0043*       ld a,(laser_power_max)
046C6D DD 77 00    0044*       ld (ix+bar_val),a
046C70 CD 45 6A 04 0045*       call bar_update_v
046C74 C9          0046*       ret
046C75             0047*   ; end init_bar_laser
046C75             0048*   
046C75             0049*   init_player_laser:
046C75             0050*   ; set pointer to laser sprite table
046C75 FD 21 07 89 0051*       ld iy,player_weapons_begin
       04          
046C7A FD 7E 00    0052*       ld a,(iy+sprite_id) ; sprite id
046C7D 1E 04       0053*       ld e,player_lasers_max ; sprite loop counter
046C7F             0054*   ; define laser sprites
046C7F             0055*   @sprites_loop:
046C7F F5          0056*       push af
046C80 D5          0057*       push de
046C81 CD 92 17 04 0058*   	call vdu_sprite_select
046C85 CD A5 17 04 0059*   	call vdu_sprite_clear_frames
046C89 21 4A 01 00 0060*   	ld hl,BUF_LASER_A
046C8D 06 02       0061*   	ld b,2 ; two bitmaps for laser
046C8F             0062*   @frames_loop:
046C8F C5          0063*   	push bc
046C90 E5          0064*   	push hl
046C91 CD E7 18 04 0065*   	call vdu_sprite_add_buff
046C95 E1          0066*   	pop hl
046C96 23          0067*   	inc hl
046C97 C1          0068*   	pop bc
046C98 10 F5       0069*   	djnz @frames_loop
046C9A D1          0070*       pop de ; sprite loop counter
046C9B F1          0071*       pop af ; sprite id
046C9C 3C          0072*       inc a
046C9D 1D          0073*       dec e
046C9E C2 7F 6C 04 0074*       jp nz,@sprites_loop
046CA2             0075*   ; set laser firing timer to zero
046CA2 FD 21 3B 6C 0076*       ld iy,tmr_laser
       04          
046CA7 21 00 00 00 0077*       ld hl,0
046CAB CD F9 11 04 0078*       call timestamp_tmr_set
046CAF C9          0079*       ret
046CB0             0080*   ; end init_player_laser
046CB0             0081*   
046CB0             0082*   player_move_weapons:
046CB0             0083*   ; initialize pointers and loop counter
046CB0 FD 21 07 89 0084*       ld iy,player_weapons_begin ; set iy to first record in table
       04          
046CB5 06 04       0085*       ld b,player_lasers_max ; loop counter
046CB7 CD 65 6F 04 0086*       call move_sprite_group
046CBB C9          0087*       ret
046CBC             0088*   ; end player_move_weapons
046CBC             0089*   
046CBC             0090*   player_spawn_laser:
046CBC             0091*    ; check laser spawn timer
046CBC FD 21 3B 6C 0092*       ld iy,tmr_laser
       04          
046CC1 CD 04 12 04 0093*       call timestamp_tmr_get
046CC5 F0          0094*       ret p ; not time to fire
046CC6             0095*   ; check laser power
046CC6 3A 44 6C 04 0096*       ld a,(laser_power)
046CCA 21 47 6C 04 0097*       ld hl,laser_power_per_shot
046CCE 96          0098*       sub (hl) ; units of power per laser shot
046CCF D8          0099*       ret c ; not enough power to fire
046CD0             0100*   ; update power to reflect firing
046CD0 32 44 6C 04 0101*       ld (laser_power),a
046CD4             0102*   ; reset timer
046CD4 2A 41 6C 04 0103*       ld hl,(tmr_laser_reset)
046CD8 CD F9 11 04 0104*       call timestamp_tmr_set
046CDC             0105*   ; fire the laser
046CDC DD 21 07 89 0106*       ld ix,player_weapons_begin
       04          
046CE1 06 04       0107*       ld b,player_lasers_max
046CE3 FD 21 07 8A 0108*       ld iy,player_begin
       04          
046CE8 FD 22 36 6E 0109*       ld (table_pointer),iy
       04          
046CED 21 28 6C 04 0110*       ld hl,laser_defaults
046CF1 CD 33 6F 04 0111*       call spawn_sprite_from_sprite
046CF5 D0          0112*       ret nc ; no carry means no free sprite slots, so we go home
046CF6             0113*   ; other specific initialization
046CF6             0114*   ; ------------------------------------------------
046CF6 FD 21 07 8A 0115*       ld iy,player_begin
       04          
046CFB             0116*   ; x-coordinate
046CFB FD 27 01    0117*       ld hl,(iy+sprite_x)
046CFE 11 00 05 00 0118*       ld de,5*256 ; horizontal center with player sprite
046D02 19          0119*       add hl,de
046D03 DD 2F 01    0120*       ld (ix+sprite_x),hl
046D06             0121*   ; y-coordinate
046D06 FD 27 04    0122*       ld hl,(iy+sprite_y)
046D09 11 00 FA FF 0123*       ld de,-6*256 ; set laser y a few pixels above player
046D0D 19          0124*       add hl,de
046D0E DD 2F 04    0125*       ld (ix+sprite_y),hl
046D11             0126*   ; set laser velocity
046D11 21 00 FC FF 0127*       ld hl,-laser_speed
046D15 DD 2F 0A    0128*       ld (ix+sprite_yvel),hl
046D18 C9          0129*       ret
046D19             0130*   ; end player_spawn_laser
046D19             0131*   
046D19             0132*   move_player_laser:
046D19             0133*   ; run the movement program for the laser
046D19 CD FB 6F 04 0134*       call move_sprite
046D1D 3A 39 6E 04 0135*       ld a,(sprite_screen_edge)
046D21 E6 08       0136*       and a,collide_top ; check collision with top of screen
046D23 CA 2B 6D 04 0137*       jp z,@F ; still on screen
046D27 C3 7F 6E 04 0138*       jp table_deactivate_sprite
046D2B             0139*   @@: ; check animation timer
046D2B FD 35 23    0140*       dec (iy+sprite_animation_timer)
046D2E C2 42 6D 04 0141*       jp nz,@F
046D32 3E 02       0142*       ld a,laser_animation_timer_reset
046D34 FD 77 23    0143*       ld (iy+sprite_animation_timer),a
046D37 FD 7E 00    0144*       ld a,(iy+sprite_id)
046D3A CD 92 17 04 0145*       call vdu_sprite_select
046D3E CD D9 17 04 0146*       call vdu_sprite_next_frame
046D42             0147*   @@: ; all done
046D42 C9          0148*       ret
046D43             0149*   ; end move_player_laser
046D43             0150*   
046D43             0151*   charge_laser:
046D43             0152*   ; check laser timer
046D43 21 48 6C 04 0153*       ld hl,charge_laser_timer
046D47 35          0154*       dec (hl)
046D48 C0          0155*       ret nz
046D49 3A 49 6C 04 0156*       ld a,(charge_laser_timer_max)
046D4D 77          0157*       ld (hl),a
046D4E 21 44 6C 04 0158*       ld hl,laser_power
046D52 34          0159*       inc (hl)
046D53 3E 40       0160*       ld a,64
046D55 BE          0161*       cp (hl)
046D56 D0          0162*       ret nc
046D57 77          0163*       ld (hl),a
046D58 C9          0164*       ret
046D59             0165*   ; end charge_laser
046D59             0166*   draw_laser:
046D59 CD 43 6D 04 0167*       call charge_laser
046D5D 21 45 6C 04 0168*       ld hl,laser_power_last
046D61 3A 44 6C 04 0169*       ld a,(laser_power)
046D65 BE          0170*       cp (hl)
046D66 C8          0171*       ret z ; no change to update
046D67 77          0172*       ld (hl),a
046D68 DD 21 4A 6C 0173*       ld ix,bar_laser
       04          
046D6D DD 77 00    0174*       ld (ix+bar_val),a ; TODO: this is redundant
046D70 CD 45 6A 04 0175*       call bar_update_v
046D74 C9          0176*       ret
046D75             0063        include "player_score.inc"
046D75             0001*   ; scores are unsigned integers
046D75 00 00 00    0002*   player_score: dl 0
046D78 00 00 00    0003*   player_score_last: dl 0 ; if equal to player_score, no need to update
046D7B 00 00 00    0004*   player_starting_score: dl 0 ; to reset after restarting a map
046D7E             0005*   
046D7E             0006*   ; inputs: iy set to sprite/tile record being tallied
046D7E             0007*   ; outputs: hl,player_score = updated score
046D7E             0008*   ; destroys: hl,de
046D7E             0009*   update_score:
046D7E 11 00 00 00 0010*       ld de,0 ; clear deu and d
046D82 FD 5E 26    0011*       ld e,(iy+sprite_points)
046D85 2A 75 6D 04 0012*       ld hl,(player_score)
046D89 19          0013*       add hl,de
046D8A 22 75 6D 04 0014*       ld (player_score),hl
046D8E C9          0015*       ret
046D8F             0016*   ; end update_score
046D8F             0017*   
046D8F             0018*   ; text coordinates for score display
046D8F             0019*   score_x: equ 50
046D8F             0020*   score_y: equ 33
046D8F             0021*   ; inputs: none
046D8F             0022*   print_score:
046D8F             0023*   ; set text colors
046D8F 3E 80       0024*       ld a,c_black+128
046D91 CD D1 12 04 0025*       call vdu_colour_text
046D95 3E 0A       0026*       ld a,c_green
046D97 CD D1 12 04 0027*       call vdu_colour_text
046D9B             0028*   ; print the score
046D9B 2A 78 6D 04 0029*       ld hl,(player_score_last)
046D9F ED 5B 75 6D 0030*       ld de,(player_score)
       04          
046DA4 ED 53 78 6D 0031*       ld (player_score_last),de
       04          
046DA9 AF          0032*       xor a ; clear carry
046DAA ED 52       0033*       sbc hl,de
046DAC C8          0034*       ret z ; no change to update
046DAD 0E 32       0035*       ld c,score_x
046DAF 06 21       0036*       ld b,score_y
046DB1 CD 8C 12 04 0037*       call vdu_move_cursor
046DB5 2A 75 6D 04 0038*       ld hl,(player_score)
046DB9 CD C8 00 04 0039*       call printDec
046DBD C9          0040*       ret
046DBE             0041*   ; end print_score
046DBE             0064        include "player_shields.inc"
046DBE             0001*   
046DBE 40          0002*   player_shields: db 64
046DBF             0003*   ; player_shields_max: db 64
046DBF 08          0004*   player_shields_max: db 8 ; DEBUG
046DC0 00          0005*   player_shields_last: db 0
046DC1             0006*   bar_shields:
046DC1 00 00 00    0007*       dl 0 ; value
046DC4 F0 01 00    0008*       dl 496 ; x0
046DC7 30 01 00    0009*       dl 304 ; y0
046DCA F7 01 00    0010*       dl 496+7 ; x1
046DCD 6F 01 00    0011*       dl 304+63 ; y1
046DD0 F0 00 00    0012*       dl 304-64 ; y-plot coordinate
046DD3             0013*   
046DD3             0014*   init_bar_shields:
046DD3 DD 21 C1 6D 0015*       ld ix,bar_shields
       04          
046DD8 2A BF 6D 04 0016*       ld hl,(player_shields_max)
046DDC DD 2F 00    0017*       ld (ix+bar_val),hl
046DDF CD 45 6A 04 0018*       call bar_update_v
046DE3 C9          0019*       ret
046DE4             0020*   ; end init_bar_shields
046DE4             0021*   
046DE4             0022*   ; inputs: iy set to sprite/tile record being tallied
046DE4             0023*   ; outputs: hl,player_shields = updated shields
046DE4             0024*   ; destroys: hl,de
046DE4             0025*   update_shields:
046DE4 FD 6E 27    0026*       ld l,(iy+sprite_shield_damage)
046DE7 3A BE 6D 04 0027*       ld a,(player_shields)
046DEB 85          0028*       add a,l
046DEC F2 F1 6D 04 0029*       jp p,@have_shields
046DF0 AF          0030*       xor a ; set to zero
046DF1             0031*   @have_shields:
046DF1 32 BE 6D 04 0032*       ld (player_shields),a
046DF5 B7          0033*       or a ; check for zero
046DF6 CA FE 67 04 0034*       jp z,kill_player
046DFA C9          0035*       ret
046DFB             0036*   ; end update_shields
046DFB             0037*   
046DFB             0038*   draw_shields:
046DFB 21 C0 6D 04 0039*       ld hl,player_shields_last
046DFF 3A BE 6D 04 0040*       ld a,(player_shields)
046E03 BE          0041*       cp (hl)
046E04 C8          0042*       ret z ; no change to update
046E05 77          0043*       ld (hl),a
046E06 DD 21 C1 6D 0044*       ld ix,bar_shields
       04          
046E0B DD 77 00    0045*       ld (ix+bar_val),a ; TODO: this is redundant
046E0E CD 45 6A 04 0046*       call bar_update_v
046E12 C9          0047*       ret
046E13             0065        include "screen.inc"
046E13             0001*   
046E13             0002*   screen_right: equ 511
046E13             0003*   screen_bottom: equ 383
046E13             0004*   origin_top: equ 48
046E13             0005*   origin_left: equ 128
046E13             0006*   field_top: equ 0
046E13             0007*   field_bottom: equ screen_bottom-origin_top
046E13             0008*   field_left: equ 0
046E13             0009*   field_right: equ 255
046E13             0010*   sprite_top: equ field_top
046E13             0011*   sprite_bottom: equ field_bottom-15
046E13             0012*   sprite_left: equ field_left
046E13             0013*   sprite_right: equ field_right-15
046E13             0014*   tile_bottom: equ screen_bottom+1
046E13             0015*   
046E13             0016*   ; set gfx origin and viewport to playing field window
046E13             0017*   set_gfx_playing_field:
046E13 01 80 00 00 0018*       ld bc,origin_left
046E17 11 30 00 00 0019*       ld de,origin_top
046E1B CD 25 13 04 0020*       call vdu_set_gfx_origin
046E1F 01 00 00 00 0021*       ld bc,field_left
046E23 11 00 00 00 0022*       ld de,field_top
046E27 DD 21 FF 00 0023*       ld ix,field_right
       00          
046E2C FD 21 4F 01 0024*       ld iy,field_bottom
       00          
046E31 CD 40 13 04 0025*       call vdu_set_gfx_viewport
046E35 C9          0026*       ret
046E36             0027*   ; end set_gfx_playing_field
046E36             0066        include "sprites.inc"
046E36             0001*   ; sprite_type
046E36             0002*   enemy_dead: equ 0
046E36             0003*   enemy_air: equ 1
046E36             0004*   enemy_ground: equ 2
046E36             0005*   enemy_projectile: equ 3
046E36             0006*   explosion: equ 4
046E36             0007*   player: equ 5
046E36             0008*   player_air: equ 6
046E36             0009*   player_ground: equ 7
046E36             0010*   
046E36             0011*   ; ###### SPRITE TABLE FIELD INDICES ######
046E36             0012*   table_record_size:         equ  64; bytes per sprite record
046E36             0013*   sprite_id:                 equ   0; 1 bytes ;unique spriteId, zero-based
046E36             0014*   ; sprite state variables
046E36             0015*   sprite_state_variables:    equ   1; beginning of sprite state variables
046E36             0016*   sprite_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
046E36             0017*   sprite_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
046E36             0018*   sprite_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
046E36             0019*   sprite_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
046E36             0020*   sprite_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
046E36             0021*   sprite_heading:            equ  16; 3 bytes ;sprite movement direction deg256 16.8 fixed
046E36             0022*   sprite_orientation:        equ  19; 3 bytes ;orientation bits
046E36             0023*   ; sprite definition variables
046E36             0024*   sprite_definitions:        equ  22; beginnning of sprite definition variables
046E36             0025*   sprite_type:               equ  22; 1 bytes ;type of sprite as defined in enemies.inc
046E36             0026*   sprite_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
046E36             0027*   sprite_move_program:       equ  26; 3 bytes ;address of sprite's behavior subroutine
046E36             0028*   sprite_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
046E36             0029*   sprite_dim_x:              equ  30; 1 bytes ;sprite width in pixels
046E36             0030*   sprite_dim_y:              equ  31; 1 bytes ;sprite height in pixels
046E36             0031*   sprite_num_orientations:   equ  32; 1 bytes ;number of orientations for this sprite
046E36             0032*   sprite_num_animations:     equ  33; 1 bytes ;number of animations for this sprite
046E36             0033*   sprite_animation:          equ  34; 1 bytes ;current animation index, zero-based
046E36             0034*   sprite_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
046E36             0035*   sprite_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
046E36             0036*   sprite_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
046E36             0037*   sprite_points:             equ  38; 1 bytes ;points awarded for killing this sprite type
046E36             0038*   sprite_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
046E36             0039*   sprite_frame:              equ  40; 1 bytes ;current animation frame
046E36             0040*   
046E36             0041*   ; ###### SPRITE TABLE VARIABLES ######
046E36             0042*   ; pointer to top address of current record, initialized to table_base
046E36 07 89 04    0043*   table_pointer: dl table_base
046E39             0044*   
046E39             0045*   ; flag indicating collision with screen edge
046E39 00          0046*   sprite_screen_edge: db #00
046E3A             0047*   
046E3A             0048*   ; ######### COLLISION SPRITE PARAMETERS ##########
046E3A             0049*   ; integer coordinates are all that are needed for collision calculations
046E3A 00          0050*   collision_x: db 0x00
046E3B 00          0051*   collision_y: db 0x00
046E3C 00          0052*   collision_dim_x: db 0x00
046E3D 00          0053*   collision_dim_y: db 0x00
046E3E             0054*   
046E3E             0055*   ; scratch variables
046E3E 00          0056*   x: db 0x00 ; 8-bit signed integer
046E3F 00          0057*   y: db 0x00 ; 8-bit signed integer
046E40 00 00 00    0058*   x0: dl 0x000000 ; 16.8 signed fixed place
046E43 00 00 00    0059*   y0: dl 0x000000 ; 16.8 signed fixed place
046E46 00 00 00    0060*   incx1: dl 0x000000 ; 16.8 signed fixed place
046E49 00 00 00    0061*   incy1: dl 0x000000 ; 16.8 signed fixed place
046E4C 00 00 00    0062*   incx2: dl 0x000000 ; 16.8 signed fixed place
046E4F 00 00 00    0063*   incy2: dl 0x000000 ; 16.8 signed fixed place
046E52             0064*   
046E52             0065*   ; sprite_heading: dl 0x000000 ; signed fixed 16.8
046E52 00 00 00    0066*   radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
046E55 00 00 00    0067*   sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
046E58 00 00 00    0068*   cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
046E5B             0069*   
046E5B             0070*   table_init:
046E5B             0071*   ; clear the sprite table
046E5B AF          0072*       xor a ; write zeroes to sprite table
046E5C 21 07 89 04 0073*       ld hl,table_base ; address to copy from
046E60 01 00 05 00 0074*       ld bc,table_end-table_base ; number of bytes to clear
046E64 CD 5B 03 04 0075*       call clear_mem
046E68             0076*   ; write sprite ids
046E68 DD 21 07 89 0077*       ld ix,table_base
       04          
046E6D AF          0078*       xor a ; sprite id
046E6E 0E 00       0079*       ld c,0 ; sprite type
046E70 06 14       0080*       ld b,table_num_records ; loop counter
046E72             0081*   @loop:
046E72 DD 77 00    0082*       ld (ix+sprite_id),a
046E75 DD 71 16    0083*       ld (ix+sprite_type),c
046E78 ED 32 40    0084*       lea ix,ix+table_record_size
046E7B 3C          0085*       inc a
046E7C 10 F4       0086*       djnz @loop
046E7E C9          0087*       ret
046E7F             0088*   ; end table_init
046E7F             0089*   
046E7F             0090*   ; deactivate the sprite with the given id
046E7F             0091*   ; inputs: iy set to sprite record
046E7F             0092*   ; outputs: nothing
046E7F             0093*   ; destroys: a,hl
046E7F             0094*   table_deactivate_sprite:
046E7F FD 7E 00    0095*       ld a,(iy+sprite_id) ; get spriteId
046E82 CD 92 17 04 0096*       call vdu_sprite_select ; select sprite
046E86 CD 16 18 04 0097*       call vdu_sprite_hide
046E8A FD CB 1D B6 0098*       res sprite_alive,(iy+sprite_collisions)
046E8E FD CB 1D BE 0099*       res sprite_just_died,(iy+sprite_collisions)
046E92 C9          0100*       ret
046E93             0101*   ; end table_deactivate_sprite
046E93             0102*   
046E93             0103*   sprites_init:
046E93             0104*   ; initialize sprites
046E93 CD C6 18 04 0105*   	call vdu_sprite_reset ; clear sprite data in vdp
046E97 AF          0106*   	xor a ; loop counter / sprite id
046E98             0107*   @sprite_loop:
046E98 F5          0108*   	push af ; save loop counter / sprite id
046E99 CD 92 17 04 0109*   	call vdu_sprite_select
046E9D 21 00 01 00 0110*   	ld hl,BUF_CRATER ; can be anything, but why not a smoking hole in the ground?
046EA1 CD E7 18 04 0111*   	call vdu_sprite_add_buff
046EA5 F1          0112*   	pop af ; restore loop counter / sprite id
046EA6 3C          0113*       inc a
046EA7 FE 14       0114*       cp table_num_records
046EA9 C2 98 6E 04 0115*       jp nz,@sprite_loop
046EAD CD C6 17 04 0116*   	call vdu_sprite_activate
046EB1             0117*   
046EB1             0118*   ; define player sprite
046EB1 3A 07 8A 04 0119*   	ld a,(player_begin+sprite_id)
046EB5 CD 92 17 04 0120*   	call vdu_sprite_select
046EB9 CD A5 17 04 0121*   	call vdu_sprite_clear_frames
046EBD 21 6F 01 00 0122*   	ld hl,BUF_SHIP_0L
046EC1 01 03 00 00 0123*   	ld bc,3 ; three bitmaps for player ship
046EC5             0124*   @sprite_player_loop:
046EC5 C5          0125*   	push bc
046EC6 E5          0126*   	push hl
046EC7 CD E7 18 04 0127*   	call vdu_sprite_add_buff
046ECB E1          0128*   	pop hl
046ECC 23          0129*   	inc hl
046ECD C1          0130*   	pop bc
046ECE 10 F5       0131*   	djnz @sprite_player_loop
046ED0             0132*   
046ED0             0133*   ; define player weapon sprites
046ED0 CD 75 6C 04 0134*       call init_player_laser
046ED4             0135*   
046ED4             0136*   ; define enemy sprites
046ED4 CD E3 20 04 0137*       call init_enemy_seekers
046ED8 CD 93 1F 04 0138*       call init_enemy_fireballs
046EDC             0139*   
046EDC             0140*   ; define explosion sprites
046EDC CD C3 21 04 0141*       call init_explosions
046EE0 C9          0142*       ret
046EE1             0143*   ; end sprites_init
046EE1             0144*   
046EE1             0145*   ; gets the next available sprite id for a particular sprite group
046EE1             0146*   ; inputs; ix = pointer to sprite group, b = number of records in sprite group
046EE1             0147*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
046EE1             0148*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
046EE1             0149*   ; destroys: a,b,c,hl,ix
046EE1             0150*   table_get_next_id:
046EE1             0151*   @loop:
046EE1 DD CB 1D 76 0152*       bit sprite_alive,(ix+sprite_collisions)
046EE5 28 07       0153*       jr z,@found
046EE7 ED 32 40    0154*       lea ix,ix+table_record_size
046EEA 10 F5       0155*       djnz @loop
046EEC             0156*   @notfound:
046EEC AF          0157*       xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
046EED C9          0158*       ret
046EEE             0159*   @found:
046EEE             0160*   ; return sprite id
046EEE DD 7E 00    0161*       ld a,(ix+sprite_id)
046EF1 37          0162*       scf ; sets carry flag indicating we found a free sprite
046EF2 C9          0163*       ret ; done
046EF3             0164*   ; end table_get_next_id
046EF3             0165*   
046EF3             0166*   ; create a new sprite at the prescribed coordinates
046EF3             0167*   ; inputs: hl = pointer to new sprite default settings, ub.c, ud.e = x,y position
046EF3             0168*   ;         ix = pointer to sprite group, a = number of records in sprite group
046EF3             0169*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
046EF3             0170*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
046EF3             0171*   spawn_sprite_from_coords:
046EF3 ED 43 2D 6F 0172*       ld (@sprite_x),bc ; store x-coordinate
       04          
046EF8 ED 53 30 6F 0173*       ld (@sprite_y),de ; store y-coordinate
       04          
046EFD 47          0174*       ld b,a ; number of records in sprite group
046EFE E5          0175*       push hl ; back up pointer to new sprite defaults
046EFF CD E1 6E 04 0176*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
046F03 E1          0177*       pop hl ; restore pointer to new sprite defaults
046F04 D0          0178*       ret nc ; no carry means no free sprite slots, so we go home
046F05             0179*   ; copy default settings to new sprite
046F05 DD E5       0180*       push ix ; back up pointer to new sprite record
046F07 ED 32 16    0181*       lea ix,ix+sprite_definitions ; bump pointer to copy to
046F0A DD E5       0182*       push ix ; pointer to default sprite settings
046F0C D1          0183*       pop de ; address to copy to
046F0D 01 2A 00 00 0184*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
046F11 ED B0       0185*       ldir ; copies defaults to new sprite record
046F13 DD E1       0186*       pop ix ; restore pointer to new sprite record
046F15             0187*   ; copy sprite position from existing sprite
046F15 2A 2D 6F 04 0188*       ld hl,(@sprite_x)
046F19 DD 2F 01    0189*       ld (ix+sprite_x),hl
046F1C 2A 30 6F 04 0190*       ld hl,(@sprite_y)
046F20 DD 2F 04    0191*       ld (ix+sprite_y),hl
046F23             0192*   ; return to caller
046F23 DD CB 16 FE 0193*       set 7,(ix+sprite_type) ; set just spawned flag
046F27 DD CB 1D F6 0194*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
046F2B 37          0195*       scf ; set carry flag to indicate success
046F2C C9          0196*       ret
046F2D 00 00 00    0197*   @sprite_x: dl 0 ; new sprite x-coordinate
046F30 00 00 00    0198*   @sprite_y: dl 0 ; new sprite y-coordinate
046F33             0199*   ; end spawn_sprite_from_coords
046F33             0200*   
046F33             0201*   ; create a new sprite at the same location as an existing sprite
046F33             0202*   ; inputs: hl = pointer to new sprite default settings, table_pointer = existing sprite
046F33             0203*   ;         ix = pointer to sprite group, b = number of records in sprite group
046F33             0204*   ; returns: if new sprite available, a = sprite id, ix pointing to new sprite vars, carry set
046F33             0205*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
046F33             0206*   spawn_sprite_from_sprite:
046F33 E5          0207*       push hl ; back up pointer to new sprite defaults
046F34 CD E1 6E 04 0208*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
046F38 E1          0209*       pop hl ; restore pointer to new sprite defaults
046F39 D0          0210*       ret nc ; no carry means no free sprite slots, so we go home
046F3A             0211*   ; copy default settings to new sprite
046F3A DD E5       0212*       push ix ; back up pointer to new sprite record
046F3C ED 32 16    0213*       lea ix,ix+sprite_definitions ; bump pointer to copy to
046F3F DD E5       0214*       push ix ; pointer to default sprite settings
046F41 D1          0215*       pop de ; address to copy to
046F42 01 2A 00 00 0216*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
046F46 ED B0       0217*       ldir ; copies defaults to new sprite record
046F48 DD E1       0218*       pop ix ; restore pointer to new sprite record
046F4A             0219*   ; copy sprite position from existing sprite
046F4A FD 2A 36 6E 0220*       ld iy,(table_pointer) ; get existing sprite record
       04          
046F4F FD 27 01    0221*       ld hl,(iy+sprite_x)
046F52 DD 2F 01    0222*       ld (ix+sprite_x),hl
046F55 FD 27 04    0223*       ld hl,(iy+sprite_y)
046F58 DD 2F 04    0224*       ld (ix+sprite_y),hl
046F5B             0225*   ; return to caller
046F5B DD CB 16 FE 0226*       set 7,(ix+sprite_type) ; set just spawned flag
046F5F DD CB 1D F6 0227*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
046F63 37          0228*       scf ; set carry flag to indicate success
046F64 C9          0229*       ret
046F65             0230*   ; end spawn_sprite_from_sprite
046F65             0231*   
046F65             0232*   ; call the behavior subroutines for a specified sprite group
046F65             0233*   ; inputs: iy = pointer to sprite group, b = number of records in sprite group
046F65             0234*   move_sprite_group:
046F65 C5          0235*       push bc ; backup loop counter
046F66 FD E5       0236*       push iy ; backup table pointer
046F68             0237*   @move_loop:
046F68 FD 22 36 6E 0238*       ld (table_pointer),iy ; update table pointer
       04          
046F6D C5          0239*       push bc ; backup loop counter
046F6E             0240*   ; check top bit of sprite_type to see if sprite is just spawned
046F6E FD CB 16 7E 0241*       bit 7,(iy+sprite_type)
046F72 C2 A7 6F 04 0242*       jp nz,@next_record ; if just spawned, skip to next record
046F76             0243*   ; check sprite_just_died bit
046F76 FD CB 1D 7E 0244*       bit sprite_just_died,(iy+sprite_collisions)
046F7A C2 DE 6F 04 0245*       jp nz,@sprite_died ; if just died, deactivate sprite
046F7E             0246*   ; check sprite_alive bit to see if sprite is active
046F7E FD CB 1D 76 0247*       bit sprite_alive,(iy+sprite_collisions)
046F82 CA A7 6F 04 0248*       jp z,@next_record ; ... skip to next record
046F86             0249*   ; otherwise move the sprite
046F86 FD 27 1A    0250*       ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
046F89             0251*       CALL_HL ; run the behavior subroutine
046F89 01 8F 6F 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
046F8D C5          0002*M1     push bc ; which constitutes the return address
046F8E E9          0003*M1     jp (hl) ; Jump to the address in HL
046F8F FD 7E 00    0252*       ld a,(iy+sprite_id) ; get spriteId
046F92 CD 92 17 04 0253*       call vdu_sprite_select ; select sprite
046F96 FD 7E 28    0254*       ld a,(iy+sprite_frame)
046F99 CD F5 17 04 0255*       call vdu_sprite_select_frame
046F9D FD 07 01    0256*       ld bc,(iy+sprite_x)
046FA0 FD 17 04    0257*       ld de,(iy+sprite_y)
046FA3 CD 5E 18 04 0258*       call vdu_sprite_move_abs168
046FA7             0259*   ; fall through to @next_record
046FA7             0260*   @next_record:
046FA7 ED 33 40    0261*       lea iy,iy+table_record_size
046FAA AF          0262*       xor a ; clears carry flag
046FAB 32 39 6E 04 0263*       ld (sprite_screen_edge),a ; clear screen edge collision flag
046FAF C1          0264*       pop bc ; get back our loop counter
046FB0 10 B6       0265*       djnz @move_loop ; loop until we've checked all the records
046FB2             0266*   ; reset all just spawned flags
046FB2 FD E1       0267*       pop iy ; get back table pointer
046FB4 C1          0268*       pop bc ; get back loop counter
046FB5             0269*   @reset_just_spawned:
046FB5 C5          0270*       push bc ; back up loop counter
046FB6 FD CB 16 7E 0271*       bit 7,(iy+sprite_type) ; check if just spawned
046FBA CA D7 6F 04 0272*       jp z,@F
046FBE FD CB 16 BE 0273*       res 7,(iy+sprite_type) ; clear just spawned flag
046FC2 FD 7E 00    0274*       ld a,(iy+sprite_id)
046FC5 CD 92 17 04 0275*       call vdu_sprite_select
046FC9 FD 07 01    0276*       ld bc,(iy+sprite_x)
046FCC FD 17 04    0277*       ld de,(iy+sprite_y)
046FCF CD 5E 18 04 0278*       call vdu_sprite_move_abs168
046FD3 CD 08 18 04 0279*       call vdu_sprite_show
046FD7             0280*   @@:
046FD7 ED 33 40    0281*       lea iy,iy+table_record_size
046FDA C1          0282*       pop bc ; get back loop counter
046FDB 10 D8       0283*       djnz @reset_just_spawned
046FDD C9          0284*       ret
046FDE             0285*   @sprite_died:
046FDE CD 7F 6E 04 0286*       call table_deactivate_sprite
046FE2 C3 A7 6F 04 0287*       jp @next_record
046FE6             0288*   ; end move_sprite_group
046FE6             0289*   
046FE6             0290*   ; update behavior subroutines for a specified sprite group
046FE6             0291*   ; inputs: hl = pointer to move program, iy = pointer to sprite group, b = number of records in sprite group
046FE6             0292*   change_sprite_group_move_program:
046FE6             0293*   @update_loop:
046FE6             0294*   ; check sprite_alive bit to see if sprite is active
046FE6 FD CB 1D 76 0295*       bit sprite_alive,(iy+sprite_collisions)
046FEA CA F5 6F 04 0296*       jp z,@next_record ; ... skip to next record
046FEE             0297*   ; otherwise load the behavior subroutine address
046FEE FD 2F 1A    0298*       ld (iy+sprite_move_program),hl
046FF1             0299*    ; clear just spawned flag
046FF1 FD CB 16 BE 0300*       res 7,(iy+sprite_type)
046FF5             0301*   ; fall through to @next_record
046FF5             0302*   @next_record:
046FF5 ED 33 40    0303*       lea iy,iy+table_record_size
046FF8 10 EC       0304*       djnz @update_loop ; loop until we've checked all the records
046FFA C9          0305*       ret
046FFB             0306*   ; end change_sprite_group_move_program
046FFB             0307*   
046FFB             0308*   ; compute a sprite's new position based on its component x,y velocities
046FFB             0309*   ; with screen boundary checking and update its sprite table record accordingly
046FFB             0310*   ; inputs: table_pointer set to sprite record
046FFB             0311*   ; returns: updated x, y positions and edge collision flags in sprite_screen_edge
046FFB             0312*   ; destroys: everything
046FFB             0313*   ; note: actual rendering of sprite must be handled by caller
046FFB             0314*   move_sprite:
046FFB FD 2A 36 6E 0315*       ld iy,(table_pointer)
       04          
047000             0316*   ; x-axis movement
047000 FD 27 01    0317*       ld hl,(iy+sprite_x)
047003 FD 17 07    0318*       ld de,(iy+sprite_xvel)
047006 19          0319*       add hl,de
047007 FD 2F 01    0320*       ld (iy+sprite_x),hl
04700A             0321*   ; y-axis movement
04700A FD 27 04    0322*       ld hl,(iy+sprite_y)
04700D FD 17 0A    0323*       ld de,(iy+sprite_yvel)
047010 19          0324*       add hl,de
047011 FD 2F 04    0325*       ld (iy+sprite_y),hl
047014             0326*   ; detect screen edge collisions
047014 AF          0327*       xor a ; reset screen edge collision flag and clear carry
047015 32 39 6E 04 0328*       ld (sprite_screen_edge),a
047019             0329*   ; y-axis first since we already have it in hl
047019 11 00 00 00 0330*       ld de,-sprite_top*256
04701D ED 5A       0331*       adc hl,de
04701F FA 49 70 04 0332*       jp m,@top
047023 ED 52       0333*       sbc hl,de ; hl back to original value
047025 11 00 C0 FE 0334*       ld de,-sprite_bottom*256
047029 ED 5A       0335*       adc hl,de
04702B F2 53 70 04 0336*       jp p,@bottom
04702F             0337*   @xaxis:
04702F FD 27 01    0338*       ld hl,(iy+sprite_x)
047032 11 00 00 00 0339*       ld de,-sprite_left*256
047036 ED 5A       0340*       adc hl,de
047038 FA 6E 70 04 0341*       jp m,@left
04703C ED 52       0342*       sbc hl,de ; hl back to original value
04703E 11 00 10 FF 0343*       ld de,-sprite_right*256
047042 ED 5A       0344*       adc hl,de
047044 F2 7C 70 04 0345*       jp p,@right
047048             0346*   ; no edge collisions so go home
047048 C9          0347*       ret
047049             0348*   @top:
047049 3E 08       0349*       ld a,collide_top
04704B 21 00 00 00 0350*       ld hl,sprite_top*256
04704F C3 59 70 04 0351*       jp @collide_y
047053             0352*   @bottom:
047053 3E 04       0353*       ld a,collide_bottom
047055 21 00 40 01 0354*       ld hl,sprite_bottom*256
047059             0355*   @collide_y:
047059 32 39 6E 04 0356*       ld (sprite_screen_edge),a
04705D FD 2F 04    0357*       ld (iy+sprite_y),hl
047060             0358*   ; reverse y-axis velocity
047060 FD 27 0A    0359*       ld hl,(iy+sprite_yvel)
047063 CD 7C 04 04 0360*       call neg_hlu
047067 FD 2F 0A    0361*       ld (iy+sprite_yvel),hl
04706A             0362*   ; go check for x-axis collisions
04706A C3 2F 70 04 0363*       jp @xaxis
04706E             0364*   @left:
04706E 3A 39 6E 04 0365*       ld a,(sprite_screen_edge)
047072 F6 02       0366*       or a,collide_left
047074 21 00 00 00 0367*       ld hl,sprite_left*256
047078 C3 86 70 04 0368*       jp @collide_x
04707C             0369*   @right:
04707C 3A 39 6E 04 0370*       ld a,(sprite_screen_edge)
047080 F6 01       0371*       or a,collide_right
047082 21 00 F0 00 0372*       ld hl,sprite_right*256
047086             0373*   @collide_x:
047086 32 39 6E 04 0374*       ld (sprite_screen_edge),a
04708A FD 2F 01    0375*       ld (iy+sprite_x),hl
04708D             0376*   ; reverse x-axis velocity
04708D FD 27 07    0377*       ld hl,(iy+sprite_xvel)
047090 CD 7C 04 04 0378*       call neg_hlu
047094 FD 2F 07    0379*       ld (iy+sprite_xvel),hl
047097             0380*   ; final collision flag to a and return
047097 3A 39 6E 04 0381*       ld a,(sprite_screen_edge)
04709B C9          0382*       ret
04709C             0383*   ; end move_sprite
04709C             0384*   
04709C             0385*   sprite_compute_velocities:
04709C FD 27 10    0386*       ld hl,(iy+sprite_heading)
04709F FD 17 0D    0387*       ld de,(iy+sprite_vel)
0470A2 CD F0 06 04 0388*       call polar_to_cartesian
0470A6 FD 2A 36 6E 0389*       ld iy,(table_pointer)
       04          
0470AB FD 0F 07    0390*       ld (iy+sprite_xvel),bc ; save x-velocity component
0470AE FD 1F 0A    0391*       ld (iy+sprite_yvel),de ; save y-velocity component
0470B1 C9          0392*       ret
0470B2             0393*   ; end sprite_compute_velocities
0470B2             0394*   
0470B2             0395*   ; compute animation frame based on sprite_animation and sprite_heading
0470B2             0396*   ; inputs: table_pointer set to sprite record
0470B2             0397*   ; outputs: a, sprite_frame set to animation frame
0470B2             0398*   ; destroys: a,hl
0470B2             0399*   sprite_frame_heading_animation:
0470B2 FD 7E 11    0400*       ld a,(iy+sprite_heading+1) ; we want the integer portion
0470B5 CB 3F       0401*       srl a ; divide integer portion by 8
0470B7 CB 3F       0402*       srl a
0470B9 CB 3F       0403*       srl a
0470BB FD 66 22    0404*       ld h,(iy+sprite_animation)
0470BE 2E 20       0405*       ld l,32 ; 32 orientation frames per animation
0470C0 ED 6C       0406*       mlt hl ; hl = offset from base animation
0470C2 85          0407*       add a,l ; modulo256 since sprite_frame is only 1 byte
0470C3 FD 77 28    0408*       ld (iy+sprite_frame),a
0470C6 C9          0409*       ret
0470C7             0410*   ; end sprite_frame_heading_animation
0470C7             0411*   
0470C7             0412*   ; compute animation frame based on sprite_heading
0470C7             0413*   ; inputs: table_pointer set to sprite record
0470C7             0414*   ; outputs: a, sprite_frame set to animation frame
0470C7             0415*   ; destroys: a,hl
0470C7             0416*   sprite_frame_heading:
0470C7 FD 7E 11    0417*       ld a,(iy+sprite_heading+1) ; we want the integer portion
0470CA CB 3F       0418*       srl a ; divide integer portion by 8
0470CC CB 3F       0419*       srl a
0470CE CB 3F       0420*       srl a
0470D0 FD 77 28    0421*       ld (iy+sprite_frame),a
0470D3 C9          0422*       ret
0470D4             0423*   ; end sprite_frame_heading
0470D4             0424*   
0470D4             0425*   ; load a sprite with animation bitmaps
0470D4             0426*   ; inputs: a = sprite id, hl = base bufferId, bc = number of frames, sprite_select
0470D4             0427*   sprite_load_frames:
0470D4             0428*   ; back up input parameters
0470D4 E5          0429*       push hl ; base bufferId
0470D5 C5          0430*       push bc ; bc = number of frames
0470D6 CD A5 17 04 0431*       call vdu_sprite_clear_frames
0470DA C1          0432*       pop bc ; bc = number of frames
0470DB E1          0433*       pop hl ; = base bufferId
0470DC             0434*   @load_frames:
0470DC C5          0435*       push bc ; back up loop counter
0470DD E5          0436*       push hl ; back up base bufferId
0470DE CD E7 18 04 0437*       call vdu_sprite_add_buff
0470E2 E1          0438*       pop hl ; restore base bufferId
0470E3 23          0439*       inc hl ; bump it to the next frame
0470E4             0440*   ; decrement loop counter
0470E4 C1          0441*       pop bc
0470E5 0B          0442*       dec bc
0470E6 79          0443*       ld a,c
0470E7 B7          0444*       or a
0470E8 C2 DC 70 04 0445*       jp nz,@load_frames
0470EC 78          0446*       ld a,b
0470ED B7          0447*       or a
0470EE C2 DC 70 04 0448*       jp nz,@load_frames
0470F2 C9          0449*       ret
0470F3             0450*   ; end sprite_load_frames
0470F3             0067        include "state.inc"
0470F3             0001*   ; Game state variables
0470F3 01 71 04    0002*   game_state:  dl game_main_menu
0470F6             0003*   
0470F6             0004*   do_game:
0470F6 2A F3 70 04 0005*       ld hl,(game_state)   ; Load the current game state
0470FA             0006*       CALL_HL                ; Call the corresponding state handler
0470FA 01 00 71 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
0470FE C5          0002*M1     push bc ; which constitutes the return address
0470FF E9          0003*M1     jp (hl) ; Jump to the address in HL
047100 C9          0007*       ret
047101             0008*   
047101             0009*   ; ========================
047101             0010*   ; Main Game States
047101             0011*   ; ========================
047101             0012*   
047101             0013*   game_main_menu:
047101             0014*       ; Handle main menu options
047101             0015*       ; Example: Check input for "Start Game"
047101 CD BB 71 04 0016*       call check_input_menu
047105 C2 E5 71 04 0017*       jp nz, game_init ; Start game on selection
047109 C9          0018*       ret
04710A             0019*   
04710A             0020*   
04710A             0021*   
04710A             0022*   game_paused:
04710A             0023*       ; Pause menu logic
04710A CD BE 71 04 0024*       call check_input_pause
04710E C2 61 73 04 0025*       jp nz, game_playing ; Resume game
047112 CA 01 71 04 0026*       jp z, game_main_menu ; Exit to main menu
047116 C9          0027*       ret
047117             0028*   
047117             0029*   game_level_transition:
047117             0030*       ; Handle level transitions
047117 CD BF 71 04 0031*       call load_next_level
04711B 21 61 73 04 0032*       ld hl, game_playing
04711F 22 F3 70 04 0033*       ld (game_state), hl
047123 C9          0034*       ret
047124             0035*   
047124             0036*   game_over:
047124             0037*   ; set text colors
047124 3E 90       0038*       ld a,16+128 ; darkest blue
047126 CD D1 12 04 0039*       call vdu_colour_text
04712A 3E 3A       0040*       ld a,58 ; dark orange
04712C CD D1 12 04 0041*       call vdu_colour_text
047130             0042*   ; print game over and prompt
047130 0E 1B       0043*       ld c,27 ; x
047132 06 10       0044*       ld b,16 ; y
047134 CD 8C 12 04 0045*       call vdu_move_cursor
047138 CD 5C 00 04 0046*       call printInline
04713C 47 41 4D 45 0047*       asciz "GAME OVER!"
       20 4F 56 45 
       52 21 00    
047147 0E 13       0048*       ld c,19 ; x
047149 06 11       0049*       ld b,17 ; y
04714B CD 8C 12 04 0050*       call vdu_move_cursor
04714F CD 5C 00 04 0051*       call printInline
047153 50 72 65 73 0052*       asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
04716E 3E 20       0053*       ld a,%00100000 ; wait just a tick before polling for input
047170 CD 35 12 04 0054*       call multiPurposeDelay
047174 CD 56 03 04 0055*       call waitKeypress
047178             0056*   ; initialize a new game
047178 21 E5 71 04 0057*       ld hl,game_init
04717C 22 F3 70 04 0058*       ld (game_state),hl
047180 C9          0059*       ret
047181             0060*   
047181             0061*   game_victory:
047181             0062*       ; Display victory screen
047181 CD C1 71 04 0063*       call display_victory
047185 C2 01 71 04 0064*       jp nz, game_main_menu ; Return to main menu on input
047189 C9          0065*       ret
04718A             0066*   
04718A             0067*   ; ========================
04718A             0068*   ; Supporting States
04718A             0069*   ; ========================
04718A             0070*   
04718A             0071*   game_loading:
04718A             0072*       ; Show loading screen while preparing assets
04718A CD C2 71 04 0073*       call load_resources
04718E 21 E5 71 04 0074*       ld hl, game_init
047192 22 F3 70 04 0075*       ld (game_state), hl
047196 C9          0076*       ret
047197             0077*   
047197             0078*   game_cutscene:
047197             0079*       ; Play a non-interactive cutscene
047197 CD C3 71 04 0080*       call play_cutscene
04719B C2 61 73 04 0081*       jp nz, game_playing ; Return to gameplay after cutscene
04719F C9          0082*       ret
0471A0             0083*   
0471A0             0084*   game_inventory:
0471A0             0085*       ; Open inventory or shop
0471A0 CD C4 71 04 0086*       call display_inventory
0471A4 C2 61 73 04 0087*       jp nz, game_playing ; Return to gameplay after inventory close
0471A8 C9          0088*       ret
0471A9             0089*   
0471A9             0090*   game_map:
0471A9             0091*       ; Display map or quest
0471A9 CD C5 71 04 0092*       call display_map
0471AD C2 61 73 04 0093*       jp nz, game_playing ; Return to gameplay after map close
0471B1 C9          0094*       ret
0471B2             0095*   
0471B2             0096*   game_exit:
0471B2             0097*       ; Handle exit logic
0471B2 CD C6 71 04 0098*       call save_game
0471B6 C3 C7 71 04 0099*       jp exit_game         ; Safely shut down
0471BA C9          0100*       ret
0471BB             0101*   
0471BB             0102*   ; ========================
0471BB             0103*   ; Sub-state branching (Example for player state)
0471BB             0104*   ; ========================
0471BB             0105*   
0471BB             0106*   
0471BB             0107*   
0471BB             0108*   
0471BB             0109*   check_input_menu:
0471BB C9          0110*       ret
0471BC             0111*   
0471BC             0112*   update_game_world:
0471BC C9          0113*       ret
0471BD             0114*   
0471BD             0115*   check_game_events:
0471BD C9          0116*       ret
0471BE             0117*   
0471BE             0118*   check_input_pause:
0471BE C9          0119*       ret
0471BF             0120*   
0471BF             0121*   load_next_level:
0471BF C9          0122*       ret
0471C0             0123*   
0471C0             0124*   display_game_over:
0471C0 C9          0125*       ret
0471C1             0126*   
0471C1             0127*   display_victory:
0471C1 C9          0128*       ret
0471C2             0129*   
0471C2             0130*   load_resources:
0471C2 C9          0131*       ret
0471C3             0132*   
0471C3             0133*   play_cutscene:
0471C3 C9          0134*       ret
0471C4             0135*   
0471C4             0136*   display_inventory:
0471C4 C9          0137*       ret
0471C5             0138*   
0471C5             0139*   display_map:
0471C5 C9          0140*       ret
0471C6             0141*   
0471C6             0142*   save_game:
0471C6 C9          0143*       ret
0471C7             0144*   
0471C7             0145*   exit_game:
0471C7 C9          0146*       ret
0471C8             0147*   
0471C8             0068        include "state_game_init.inc"
0471C8             0001*   ; hello_world: asciz "Welcome to Purple Nurples!"
0471C8             0002*   ; loading_time: asciz "Loading time:"
0471C8 50 72 65 73 0003*   loading_complete: asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
0471E3 00          0004*   game_assets_loaded: db 0 ; non-zero when assets are loaded
0471E4 00          0005*   original_screen_mode: db 0
0471E5             0006*   
0471E5             0007*   game_init:
0471E5             0008*   ; check whether assets are loaded
0471E5 3A E3 71 04 0009*       ld a,(game_assets_loaded)
0471E9 B7          0010*       or a
0471EA C2 F5 72 04 0011*       jp nz,@assets_loaded
0471EE             0012*   ; get current screen mode and save it so we can return to it on exit
0471EE CD 7A 13 04 0013*       call vdu_get_screen_mode
0471F2 32 E4 71 04 0014*       ld (original_screen_mode),a
0471F6             0015*   ; print ascii art splash screen
0471F6 CD A0 12 04 0016*       call vdu_cls
0471FA CD 5C 00 04 0017*       call printInline
0471FE 57 65 6C 63 0018*       asciz "Welcome to\r\n"
       6F 6D 65 20 
       74 6F 0D 0A 
       00          
04720B 21 FC 18 04 0019*       ld hl,purple_nurples_ascii
04720F CD 63 00 04 0020*       call printString
047213 CD 5C 00 04 0021*       call printInline
047217 4C 6F 61 64 0022*       asciz "Loading UI...\r\n"
       69 6E 67 20 
       55 49 2E 2E 
       2E 0D 0A 00 
047227             0023*   ; clear all buffers
047227 CD 87 14 04 0024*       call vdu_clear_all_buffers
04722B             0025*   ; load fonts
04722B CD A1 0F 04 0026*   	call fonts_load
04722F             0027*   ; select font
04722F 21 07 FA 00 0028*       ld hl,Lat38_VGA8_8x8
047233 3E 01       0029*       ld a,1 ; flags
047235 CD 3E 16 04 0030*       call vdu_font_select
047239             0031*   ; load UI images
047239 CD 9C 10 04 0032*       call load_ui_images
04723D             0033*   ; set up the display
04723D 3E 08       0034*       ld a,8;+128 ; 136   320   240   64    60hz double-buffered
04723F CD 69 13 04 0035*       call vdu_set_screen_mode
047243 AF          0036*       xor a
047244 CD 82 13 04 0037*       call vdu_set_scaling
047248             0038*   ; ; enable additional audio channels
047248             0039*   ; 	call vdu_enable_channels
047248             0040*   ; set text background color
047248 3E 9A       0041*       ld a,26+128 ; violet
04724A CD D1 12 04 0042*       call vdu_colour_text
04724E             0043*   ; set text foreground color
04724E 3E 2F       0044*       ld a,47 ; aaaaff lavenderish
047250 CD D1 12 04 0045*       call vdu_colour_text
047254             0046*   ; set gfx bg color
047254 AF          0047*       xor a ; plotting mode 0
047255 3E 9A       0048*       ld a,26+128 ; violet
047257 CD E2 12 04 0049*       call vdu_gcol
04725B CD A0 12 04 0050*       call vdu_cls
04725F             0051*   ; set the cursor off
04725F CD 68 12 04 0052*       call vdu_cursor_off
047263             0053*   ; VDU 28, left, bottom, right, top: Set text viewport **
047263             0054*   ; MIND THE LITTLE-ENDIANESS
047263             0055*   ; inputs: c=left,b=bottom,e=right,d=top
047263 0E 00       0056*       ld c,0 ; left
047265 16 00       0057*       ld d,0 ; top
047267 1E 27       0058*       ld e,39 ; right
047269 06 00       0059*       ld b,0; bottom
04726B CD F9 12 04 0060*       call vdu_set_txt_viewport
04726F             0061*   ; load background and sprite images
04726F CD DB 0F 04 0062*       call img_load_init
047273 CD D1 10 04 0063*       call load_backgrounds
047277 CD AF 10 04 0064*       call load_sprite_images
04727B             0065*   ; load tileset_ptrs
04727B CD C0 10 04 0066*       call load_tilesets
04727F             0067*   ; ; load sound effects ; TODO
04727F             0068*   ; 	ld bc,SFX_num_buffers
04727F             0069*   ; 	ld hl,SFX_buffer_id_lut
04727F             0070*   ; 	ld (cur_buffer_id_lut),hl
04727F             0071*   ; 	ld hl,SFX_load_routines_table
04727F             0072*   ; 	ld (cur_load_jump_table),hl
04727F             0073*   ; 	call sfx_load_main
04727F             0074*   ; print loading complete message and wait for user keypress
04727F 3E 01       0075*       ld a,1
047281 32 E3 71 04 0076*       ld (game_assets_loaded),a
047285 CD A0 12 04 0077*       call vdu_cls
047289 CD 5C 00 04 0078*       call printInline
04728D 50 72 65 73 0079*       asciz "Press any key to continue."
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 00    
0472A8 CD A5 12 04 0080*       call vdu_flip
0472AC CD 56 03 04 0081*       call waitKeypress
0472B0             0082*   ; set up display for gameplay
0472B0 3E 14       0083*       ld a,20
0472B2 CD 69 13 04 0084*       call vdu_set_screen_mode
0472B6 AF          0085*       xor a
0472B7 CD 82 13 04 0086*       call vdu_set_scaling
0472BB CD 68 12 04 0087*       call vdu_cursor_off
0472BF             0088*   ; select font
0472BF 21 07 FA 00 0089*       ld hl,Lat38_VGA8_8x8
0472C3 3E 01       0090*       ld a,1 ; flags
0472C5 CD 3E 16 04 0091*       call vdu_font_select
0472C9             0092*   ; plot bezel art
0472C9 21 06 00 00 0093*       ld hl,BUF_BEZEL_L
0472CD CD 95 13 04 0094*       call vdu_buff_select
0472D1 01 00 00 00 0095*       ld bc,0
0472D5 11 00 00 00 0096*       ld de,0
0472D9 CD F1 16 04 0097*       call vdu_plot_bmp
0472DD 21 07 00 00 0098*       ld hl,BUF_BEZEL_R
0472E1 CD 95 13 04 0099*       call vdu_buff_select
0472E5 01 80 01 00 0100*       ld bc,384
0472E9 11 00 00 00 0101*       ld de,0
0472ED CD F1 16 04 0102*       call vdu_plot_bmp
0472F1             0103*   ; draw player cockpit
0472F1 CD 14 69 04 0104*       call draw_player_cockpit
0472F5             0105*   @assets_loaded:
0472F5             0106*   ; set gfx origin and viewport to playing field window
0472F5 CD 13 6E 04 0107*       call set_gfx_playing_field
0472F9 CD 3E 64 04 0108*       call init_bg ; plot the starry background
0472FD             0109*   ; VDU 28, left, bottom, right, top: Set text viewport **
0472FD 0E 00       0110*       ld c,0 ; left
0472FF 16 00       0111*       ld d,0 ; top
047301 1E 3E       0112*       ld e,62 ; right
047303 06 30       0113*       ld b,48; bottom
047305 CD F9 12 04 0114*       call vdu_set_txt_viewport
047309             0115*   ; initialize the global timestamp
047309 CD DC 11 04 0116*       call timestamp_tick
04730D             0117*   ; reset the sprite table
04730D CD 5B 6E 04 0118*       call table_init
047311 21 07 89 04 0119*       ld hl,table_base
047315 22 36 6E 04 0120*       ld (table_pointer),hl
047319             0121*   ; initialize sprites and active tiles table
047319 CD 93 6E 04 0122*       call sprites_init
04731D CD 5B 6E 04 0123*       call table_init
047321 CD B9 77 04 0124*       call tile_table_init
047325             0125*   ; initialize the first level
047325 3E 00       0126*       ld a,tiles_dg
047327 CD 89 63 04 0127*       call init_tileset
04732B             0128*   ; initialize player
04732B 21 00 00 00 0129*       ld hl,0
04732F 22 75 6D 04 0130*       ld (player_score),hl
047333 2B          0131*       dec hl ; anything but zero so print_score will update
047334 22 78 6D 04 0132*       ld (player_score_last),hl
047338 3A 15 67 04 0133*       ld a,(player_ships_max)
04733C 32 14 67 04 0134*       ld (player_ships),a
047340 CD 16 67 04 0135*       call draw_player_ships
047344 CD 71 67 04 0136*       call player_init
047348             0137*   ; set the game state to playing
047348 21 61 73 04 0138*       ld hl,game_playing
04734C 22 F3 70 04 0139*       ld (game_state), hl
047350             0140*   ; set game playing substates
047350 21 F5 67 04 0141*       ld hl,player_alive
047354 22 11 67 04 0142*       ld (player_state), hl
047358 21 ED 1E 04 0143*       ld hl,enemies_alive
04735C 22 DF 1E 04 0144*       ld (enemies_state), hl
047360             0145*   ; done initializing
047360 C9          0146*       ret
047361             0147*   ; end game_init
047361             0069        include "state_game_playing.inc"
047361             0001*   ; main game state
047361             0002*   game_playing:
047361             0003*   ; Main gameplay loop
047361             0004*   
047361             0005*   ; plot tiles
047361 CD 2F 79 04 0006*       call tiles_plot
047365             0007*   
047365             0008*   ; set gfx viewport to playing field window
047365 CD 13 6E 04 0009*       call set_gfx_playing_field
047369             0010*   
047369             0011*   ; process movement and collisions
047369 CD 66 67 04 0012*       call do_player
04736D CD E2 1E 04 0013*       call do_enemies
047371 CD B7 21 04 0014*       call move_explosions
047375 CD 9F 7A 04 0015*       call move_tiles
047379             0016*   
047379             0017*   ; update UI
047379 01 00 00 00 0018*       ld bc,0
04737D 11 00 00 00 0019*       ld de,0
047381 CD 25 13 04 0020*       call vdu_set_gfx_origin
047385 CD 8F 6D 04 0021*       call print_score
047389 CD FB 6D 04 0022*       call draw_shields
04738D CD 59 6D 04 0023*       call draw_laser
047391 CD 43 6B 04 0024*       call draw_fuel
047395 C9          0025*       ret
047396             0026*   
047396             0070        include "targeting.inc"
047396             0001*   ; compute orientation to player
047396             0002*   ; based on relative positions
047396             0003*   ; returns: uh.l 16.8 fixed angle256 to player
047396             0004*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
047396             0005*   ;    representing delta-x/y *to* target respectively
047396             0006*   ; inputs: iy pointed at sprite record
047396             0007*   ; destroys: everything except iy (sprite record pointer)
047396             0008*   orientation_to_player:
047396 DD 21 07 8A 0009*       ld ix,player_begin
       04          
04739B             0010*   ; compute dx
04739B DD 27 01    0011*       ld hl,(ix+sprite_x)
04739E FD 17 01    0012*       ld de,(iy+sprite_x)
0473A1 B7          0013*       or a ; clear carry
0473A2 ED 52       0014*       sbc hl,de ; dx
0473A4 E5          0015*       push hl ; save dx
0473A5             0016*   ; compute dy
0473A5 DD 27 04    0017*       ld hl,(ix+sprite_y)
0473A8 FD 17 04    0018*       ld de,(iy+sprite_y)
0473AB B7          0019*       or a ; clear carry
0473AC ED 52       0020*       sbc hl,de ; dy
0473AE EB          0021*       ex de,hl ; de = dy
0473AF             0022*   ; compute angle to player
0473AF C1          0023*       pop bc ; dx (was hl)
0473B0 C5          0024*       push bc ; save dx
0473B1 D5          0025*       push de ; save dy
0473B2 CD EA 07 04 0026*       call atan2_168fast ; uh.l = angle to player
0473B6 3E E0       0027*       ld a,%11100000
0473B8 A5          0028*       and l ; round angle to nearest 32th of a circle
0473B9 6F          0029*       ld l,a
0473BA 22 0B 74 04 0030*       ld (Bearing_t),hl ; return angle to player
0473BE D1          0031*       pop de ; restore dy
0473BF C1          0032*       pop bc ; restore dx
0473C0 C9          0033*       ret
0473C1             0034*   ; end orientation_to_player
0473C1             0035*   
0473C1             0036*   ; compute orientation to player
0473C1             0037*   ; based on relative positions
0473C1             0038*   ; returns: uh.l 16.8 fixed angle256 to player
0473C1             0039*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
0473C1             0040*   ;    representing delta-x/y *to* target respectively
0473C1             0041*   ; inputs: iy pointed at tile record
0473C1             0042*   ; destroys: everything except iy (tile record pointer)
0473C1             0043*   tile_orientation_to_player:
0473C1 DD 21 07 8A 0044*       ld ix,player_begin
       04          
0473C6             0045*   ; compute dx
0473C6 DD 27 01    0046*       ld hl,(ix+sprite_x)
0473C9 FD 17 01    0047*       ld de,(iy+tile_x)
0473CC B7          0048*       or a ; clear carry
0473CD ED 52       0049*       sbc hl,de ; dx
0473CF E5          0050*       push hl ; save dx
0473D0             0051*   ; compute dy
0473D0 DD 27 04    0052*       ld hl,(ix+sprite_y)
0473D3 FD 17 04    0053*       ld de,(iy+tile_y)
0473D6 B7          0054*       or a ; clear carry
0473D7 ED 52       0055*       sbc hl,de ; dy
0473D9 EB          0056*       ex de,hl ; de = dy
0473DA             0057*   ; compute angle to player
0473DA C1          0058*       pop bc ; dx (was hl)
0473DB CD EA 07 04 0059*       call atan2_168fast ; uh.l = angle to player
0473DF 3E E0       0060*       ld a,%11100000
0473E1 A5          0061*       and l ; round angle to nearest 32th of a circle
0473E2 6F          0062*       ld l,a
0473E3 22 0B 74 04 0063*       ld (Bearing_t),hl
0473E7 C9          0064*       ret
0473E8             0065*   ; end tile_orientation_to_player
0473E8             0066*   
0473E8             0067*   ; compute orientation to coordinate
0473E8             0068*   ; based on relative positions
0473E8             0069*   ; returns: uh.l 16.8 fixed angle256 to coordinate
0473E8             0070*   ;    ub.c and ud.e as 16.8 signed fixed point numbers
0473E8             0071*   ;    representing delta-x/y *to* target respectively
0473E8             0072*   ; inputs: iy pointed at sprite record, ub.c,ud.e are target x,y coordinates
0473E8             0073*   ; destroys: everything except iy (sprite record pointer)
0473E8             0074*   bearing_to_coord:
0473E8             0075*   ; compute dx
0473E8 C5          0076*       push bc
0473E9 E1          0077*       pop hl
0473EA FD 07 01    0078*       ld bc,(iy+sprite_x)
0473ED B7          0079*       or a ; clear carry
0473EE ED 42       0080*       sbc hl,bc ; dx
0473F0 E5          0081*       push hl ; save dx
0473F1             0082*   ; compute dy
0473F1 EB          0083*       ex de,hl
0473F2 FD 17 04    0084*       ld de,(iy+sprite_y)
0473F5 B7          0085*       or a ; clear carry
0473F6 ED 52       0086*       sbc hl,de ; dy
0473F8 EB          0087*       ex de,hl ; de = dy
0473F9             0088*   ; compute angle to coordinate
0473F9 C1          0089*       pop bc ; dx (was hl)
0473FA C5          0090*       push bc ; save dx
0473FB D5          0091*       push de ; save dy
0473FC CD EA 07 04 0092*       call atan2_168fast ; uh.l = angle to coordinate
047400 3E E0       0093*       ld a,%11100000
047402 A5          0094*       and l ; round angle to nearest 32th of a circle
047403 6F          0095*       ld l,a
047404 22 0B 74 04 0096*       ld (Bearing_t),hl ; return angle to coordinate
047408 D1          0097*       pop de ; restore dy
047409 C1          0098*       pop bc ; restore dx
04740A C9          0099*       ret
04740B             0100*   ; end bearing_to_coord
04740B             0101*   
04740B             0102*   ; targeting_computer variables fixed 16.8 format
04740B 00 00 00    0103*   Bearing_t: dl 0x000000 ; angle to target
04740E 00 00 00    0104*   Heading_t: dl 0x000000 ; angle of target motion
047411 00 00 00    0105*   Vp: dl 0x000000 ; velocity of projectile
047414 00 00 00    0106*   Vp_x: dl 0x000000 ; x component of projectile velocity
047417 00 00 00    0107*   Vp_y: dl 0x000000 ; y component of projectile velocity
04741A 00 00 00    0108*   Vt: dl 0x000000 ; velocity of target
04741D 00 00 00    0109*   Vt_x: dl 0x000000 ; x component of target velocity
047420 00 00 00    0110*   Vt_y: dl 0x000000 ; y component of target velocity
047423 00 00 00    0111*   Heading_p: dl 0x000000 ; angle of projectile motion
047426 00 00 00    0112*   lead_angle: dl 0x000000 ; lead angle
047429             0113*   
047429             0114*   ; Inputs:   Vp velocity of projectile set,
047429             0115*   ;           iy pointed to sprite record,
047429             0116*   ;           player position and velocities correctly set
047429             0117*   ; Outputs:  uh.l is the 16.8 fixed firing angle256
047429             0118*   ;           ub.c and ud.e are the 16.8 fixed x,y component projectile velocities
047429             0119*   ; https://old.robowiki.net/cgi-bin/robowiki?LinearTargeting
047429             0120*   targeting_computer:
047429 DD 21 07 8A 0121*       ld ix,player_begin
       04          
04742E             0122*   ; ; compute target velocity from x,y component velocities
04742E             0123*   ;     ld bc,(ix+sprite_xvel)
04742E             0124*   ;     ld de,(ix+sprite_yvel)
04742E             0125*   ;     ld hl,-1*256 ; account for vertical ground movement
04742E             0126*   ;     add hl,de
04742E             0127*   ;     ex de,hl ; ud.e = player_yvel-1
04742E             0128*   ;     call cartesian_to_polar_sm ; uh.l = Heading_t, ud.e = Vt
04742E             0129*   ;     ld (Heading_t),hl ; PASSES
04742E             0130*   ;     ld (Vt),de ; PASSES
04742E             0131*   ; ; Bearing_t should have been set by prerequisite call to orientation_to_player
04742E             0132*   ; ; compute Heading_t-Bearing_t PASSES
04742E             0133*   ;     ld de,(Bearing_t)
04742E             0134*   ;     and a ; clear carry
04742E             0135*   ;     sbc hl,de ; Uh.l = Heading_t-Bearing_t
04742E             0136*   ; ; compute sin(Heading_t-Bearing_t)
04742E             0137*   ;     call sin168 ; uh.l = sin(Heading_t-Bearing_t)
04742E             0138*   ; ; compute (Vt*sin(Heading_t-Bearing_t))
04742E             0139*   ;     ld de,(Vt)
04742E             0140*   ;     call smul168 ; uh.l = (Vt*sin(Heading_t-Bearing_t))
04742E             0141*   ; ; compute (Vt * sin(Heading_t-Bearing_t)) / Vp
04742E             0142*   ;     ld de,(Vp)
04742E             0143*   ;     call sdiv168 ; ud.e = (Vt*sin(Heading_t-Bearing_t)) / Vp
04742E             0144*   ;     ex de,hl ; uh.l = (Vt*sin(Heading_t-Bearing_t)) / Vp
04742E             0145*   ; ; answer is in radians, convert to degrees256
04742E             0146*   ;     ld de,0x0028BE ; 40.74 = 57.29578*256/360
04742E             0147*   ;     call smul168 ; uh.l = angle in degrees256
04742E             0148*   ;     ld (lead_angle),hl ; TODO: fix this
04742E             0149*   ; ; add lead angle to target bearing
04742E             0150*   ;     ld de,(Bearing_t)
04742E             0151*   ;     add hl,de ; h.l = lead angle+target bearing
04742E             0152*   
04742E 2A 0B 74 04 0153*       ld hl,(Bearing_t) ; TODO: fix this
047432             0154*   
047432 E5          0155*       push hl
047433             0156*   
047433             0157*   ; compute component projectile velocities
047433 ED 5B 11 74 0158*       ld de,(Vp) ; Vp should have been set by caller
       04          
047438 CD F0 06 04 0159*       call polar_to_cartesian ; ub.c = Vp_x, ud.e = Vp_y
04743C ED 43 14 74 0160*       ld (Vp_x),bc
       04          
047441             0161*       ; inc d ; account for vertical ground movement
047441 ED 53 17 74 0162*       ld (Vp_y),de
       04          
047446 E1          0163*       pop hl ; uh.l = lead angle+target bearing
047447 22 23 74 04 0164*       ld (Heading_p),hl
04744B             0165*   
04744B C9          0166*       ret
04744C             0167*   
04744C             0168*   ; debug print the results
04744C             0169*       PUSH_ALL
04744C 08          0001*M1     ex af,af'
04744D D9          0002*M1     exx
04744E F5          0003*M1     push af
04744F E5          0004*M1     push hl
047450 C5          0005*M1     push bc
047451 D5          0006*M1     push de
047452             0007*M1 
047452 08          0008*M1     ex af,af'
047453 D9          0009*M1     exx
047454 F5          0010*M1     push af
047455 E5          0011*M1     push hl
047456 C5          0012*M1     push bc
047457 D5          0013*M1     push de
047458 DD E5       0014*M1     push ix
04745A FD E5       0015*M1     push iy
04745C CD 55 12 04 0170*       call vdu_home_cursor
047460 CD 78 00 04 0171*       call printNewLine
047464 CD 5C 00 04 0172*       call printInline
047468 42 74 20 00 0173*       asciz "Bt "
04746C 2A 0B 74 04 0174*       ld hl,(Bearing_t)
047470 CD ED 01 04 0175*       call print_s168_hl
047474             0176*   
047474             0177*       ; call printInline
047474             0178*       ; asciz "\r\nHt "
047474             0179*       ; ld hl,(Heading_t)
047474             0180*       ; call print_s168_hl
047474             0181*   
047474             0182*       ; call printInline
047474             0183*       ; asciz "\r\nVt "
047474             0184*       ; ld hl,(Vt)
047474             0185*       ; call print_s168_hl
047474             0186*   
047474             0187*       ; call printInline
047474             0188*       ; asciz "\r\nVtx"
047474             0189*       ; ld hl,(ix+sprite_xvel)
047474             0190*       ; call print_s168_hl
047474             0191*   
047474             0192*       ; call printInline
047474             0193*       ; asciz "\r\nVty"
047474             0194*       ; ld hl,(ix+sprite_yvel)
047474             0195*       ; ld de,-1*256 ; account for vertical ground movement
047474             0196*       ; add hl,de
047474             0197*       ; call print_s168_hl
047474             0198*   
047474 CD 5C 00 04 0199*       call printInline
047478 0D 0A 4C 64 0200*       asciz "\r\nLda"
       61 00       
04747E 2A 26 74 04 0201*       ld hl,(lead_angle)
047482 CD ED 01 04 0202*       call print_s168_hl
047486             0203*   
047486 CD 5C 00 04 0204*       call printInline
04748A 0D 0A 48 70 0205*       asciz "\r\nHp "
       20 00       
047490 2A 23 74 04 0206*       ld hl,(Heading_p)
047494 CD ED 01 04 0207*       call print_s168_hl
047498             0208*   
047498             0209*       ; call printInline
047498             0210*       ; asciz "\r\nVp "
047498             0211*       ; ld hl,(Vp)
047498             0212*       ; call print_s168_hl
047498             0213*   
047498             0214*       ; call printInline
047498             0215*       ; asciz "\r\nVpx"
047498             0216*       ; ld hl,(Vp_x)
047498             0217*       ; call print_s168_hl
047498             0218*   
047498             0219*       ; call printInline
047498             0220*       ; asciz "\r\nVpy"
047498             0221*       ; ld hl,(Vp_y)
047498             0222*       ; call print_s168_hl
047498             0223*   
047498             0224*       POP_ALL
047498 FD E1       0001*M1     pop iy
04749A DD E1       0002*M1     pop ix
04749C D1          0003*M1     pop de
04749D C1          0004*M1     pop bc
04749E E1          0005*M1     pop hl
04749F F1          0006*M1     pop af
0474A0 08          0007*M1     ex af,af'
0474A1 D9          0008*M1     exx
0474A2             0009*M1 
0474A2 D1          0010*M1     pop de
0474A3 C1          0011*M1     pop bc
0474A4 E1          0012*M1     pop hl
0474A5 F1          0013*M1     pop af
0474A6 08          0014*M1     ex af,af'
0474A7 D9          0015*M1     exx
0474A8 C9          0225*       ret
0474A9             0071        include "tile_table.inc"
0474A9             0001*   ; ###### tile TABLE FIELD INDICES ######
0474A9             0002*   tile_table_record_size:         equ  64; bytes per tile record
0474A9             0003*   tile_id:                 equ   0; 1 bytes ;unique tileId, zero-based
0474A9             0004*   ; tile state variables
0474A9             0005*   tile_state_variables:    equ   1; beginning of tile state variables
0474A9             0006*   tile_x:                  equ   1; 3 bytes ;16.8 fractional x position in pixels
0474A9             0007*   tile_y:                  equ   4; 3 bytes ;16.8 fractional y position in pixels
0474A9             0008*   tile_xvel:               equ   7; 3 bytes ;x-component velocity, 16.8 fixed, pixels
0474A9             0009*   tile_yvel:               equ  10; 3 bytes ;y-component velocity, 16.8 fixed, pixels
0474A9             0010*   tile_vel:                equ  13; 3 bytes ;velocity px/frame (16.8 fixed)
0474A9             0011*   tile_heading:            equ  16; 3 bytes ;tile movement direction deg256 16.8 fixed
0474A9             0012*   tile_orientation:        equ  19; 3 bytes ;orientation bits
0474A9             0013*   ; tile definition variables
0474A9             0014*   tile_definitions:        equ  22; beginnning of tile definition variables
0474A9             0015*   tile_type:               equ  22; 1 bytes ;type of tile as defined in enemies.inc
0474A9             0016*   tile_base_bufferId:      equ  23; 3 bytes ;bitmap bufferId
0474A9             0017*   tile_move_program:       equ  26; 3 bytes ;address of tile's behavior subroutine
0474A9             0018*   tile_collisions:         equ  29; 1 bytes ;see collisions.inc constants for bit definitions
0474A9             0019*   tile_dim_x:              equ  30; 1 bytes ;tile width in pixels
0474A9             0020*   tile_dim_y:              equ  31; 1 bytes ;tile height in pixels
0474A9             0021*   tile_num_orientations:   equ  32; 1 bytes ;number of orientations for this tile
0474A9             0022*   tile_num_animations:     equ  33; 1 bytes ;number of animations for this tile
0474A9             0023*   tile_animation:          equ  34; 1 bytes ;current animation index, zero-based
0474A9             0024*   tile_animation_timer:    equ  35; 1 bytes ;when hits zero, draw next animation
0474A9             0025*   tile_move_timer:         equ  36; 1 bytes ;when zero, go to next move program, or step
0474A9             0026*   tile_move_step:          equ  37; 1 bytes ;stage in a move program sequence, varies
0474A9             0027*   tile_points:             equ  38; 1 bytes ;points awarded for killing this tile type
0474A9             0028*   tile_shield_damage:      equ  39; 1 bytes ;shield points deducted for collision
0474A9             0029*   tile_frame:              equ  40; 1 bytes ;current animation frame
0474A9             0030*   
0474A9             0031*   ; ###### tile TABLE VARIABLES ######
0474A9 00 00 00 00 0032*   tile_stack: blkb 256*3,0 ; stack of pointers to tile records
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0477A9 00 00 00    0033*       dl 0 ; list terminator
0477AC             0034*   tile_stack_end:
0477AC A9 74 04    0035*   tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
0477AF 07 8E 04    0036*   tile_table_pointer: dl tile_table_base ; pointer to top address of current record, initialized to tile_table_base
0477B2 00 00 00    0037*   num_active_tiles: dl 0 ; how many active tiles
0477B5 00          0038*   next_tile_id: db 0 ; next available tile id
0477B6 00 00 00    0039*   new_tile_table_pointer: dl 0 ; pointer to new tile record
0477B9             0040*   
0477B9             0041*   tile_table_init:
0477B9             0042*   ; reset num active tiles
0477B9 21 00 00 00 0043*       ld hl,0
0477BD 22 B2 77 04 0044*       ld (num_active_tiles),hl
0477C1             0045*   ; reset next tile id
0477C1 AF          0046*       xor a
0477C2 32 B5 77 04 0047*       ld (next_tile_id),a
0477C6             0048*   ; clear the tile stack
0477C6 AF          0049*       xor a ; write zeroes to tile stack
0477C7 21 A9 74 04 0050*       ld hl,tile_stack
0477CB 01 03 03 00 0051*       ld bc,tile_stack_end-tile_stack
0477CF CD 5B 03 04 0052*       call clear_mem
0477D3             0053*   ; clear the tile table
0477D3 AF          0054*       xor a ; write zeroes to tile table
0477D4 21 07 8E 04 0055*       ld hl,tile_table_base ; address to copy from
0477D8 01 00 40 00 0056*       ld bc,tile_table_end-tile_table_base ; number of bytes to clear
0477DC CD 5B 03 04 0057*       call clear_mem
0477E0             0058*   ; write tile ids
0477E0 DD 21 07 8E 0059*       ld ix,tile_table_base
       04          
0477E5 AF          0060*       xor a ; tile id
0477E6 06 00       0061*       ld b,0 ; loop counter
0477E8             0062*   @loop:
0477E8 DD 77 00    0063*       ld (ix+tile_id),a
0477EB ED 32 40    0064*       lea ix,ix+table_record_size
0477EE 3C          0065*       inc a
0477EF 10 F7       0066*       djnz @loop
0477F1             0067*   ; set pointers to top of tile stack and tile table
0477F1 21 B5 77 04 0068*       ld hl,next_tile_id
0477F5 3E FF       0069*       ld a,255 ; will wrap around to 0 on first call to create active tile
0477F7 77          0070*       ld (hl),a
0477F8 21 07 8E 04 0071*       ld hl,tile_table_base
0477FC 22 AF 77 04 0072*       ld (tile_table_pointer),hl
047800 21 A9 74 04 0073*       ld hl,tile_stack
047804 22 AC 77 04 0074*       ld (tile_stack_pointer),hl
047808 C9          0075*       ret
047809             0076*   ; end tile_table_init
047809             0077*   
047809             0078*   ; gets the next available tile id
047809             0079*   ; inputs; none
047809             0080*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
047809             0081*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
047809             0082*   ; destroys: a,hl,ix
047809             0083*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
047809             0084*   tile_table_get_next_id:
047809 21 B2 77 04 0085*       ld hl,num_active_tiles
04780D 34          0086*       inc (hl)
04780E C2 15 78 04 0087*       jp nz,@F ; check rollover to > 256 active tiles
047812 35          0088*       dec (hl) ; undo increment
047813 AF          0089*       xor a ; reset carry flag indicating that we didn't find a free tile
047814 C9          0090*       ret
047815             0091*   @@:
047815 7E          0092*       ld a,(hl) ; number of active tiles
047816             0093*   ; point ix to next tile record
047816 21 B5 77 04 0094*       ld hl,next_tile_id
04781A 34          0095*       inc (hl)
04781B 56          0096*       ld d,(hl) ; index into tile table
04781C 1E 40       0097*       ld e,tile_table_record_size
04781E ED 5C       0098*       mlt de ; de is now the offset to the table entry
047820 DD 21 07 8E 0099*       ld ix,tile_table_base ; point to base address of tile table
       04          
047825 DD 19       0100*       add ix,de ; ix is now the address of the table entry
047827             0101*   ; add tile pointer to tile stack
047827 21 A9 74 04 0102*       ld hl,tile_stack
04782B 57          0103*       ld d,a ; number of active tiles
04782C 15          0104*       dec d ; zero-based index
04782D 1E 03       0105*       ld e,3 ; three bytes per tile record
04782F ED 5C       0106*       mlt de ; offset into tile stack
047831 19          0107*       add hl,de ; hl points to top of the active tiles
047832 ED 3F       0108*       ld (hl),ix
047834             0109*   ; return tile id
047834 DD 7E 00    0110*       ld a,(ix+tile_id)
047837 37          0111*       scf ; sets carry flag indicating we found a free tile
047838 C9          0112*       ret ; done
047839             0113*   ; end tile_table_get_next_id
047839             0114*   
047839             0115*   ; deactivate the tile with the given id
047839             0116*   ; inputs: tile_stack_pointer set to record to remove
047839             0117*   ; outputs: decrements num_active_tiles by one, tile_stack_pointer set to record above removed record, removes tile pointer from the tile stack, shifts stack records above it down one position
047839             0118*   ; destroys: a,hl,bc,de
047839             0119*   table_deactivate_tile:
047839             0120*   ; compute address to copy from
047839 2A AC 77 04 0121*       ld hl,(tile_stack_pointer)
04783D 23          0122*       inc hl
04783E 23          0123*       inc hl
04783F 23          0124*       inc hl
047840 E5          0125*       push hl ; save copy from address
047841             0126*   ; compute bytes to copy
047841 3A B2 77 04 0127*       ld a,(num_active_tiles)
047845 6F          0128*       ld l,a
047846 26 03       0129*       ld h,3
047848 ED 6C       0130*       mlt hl
04784A 11 A9 74 04 0131*       ld de,tile_stack
04784E 19          0132*       add hl,de ; hl = bottom of stack address
04784F ED 5B AC 77 0133*       ld de,(tile_stack_pointer)
       04          
047854 B7          0134*       or a ; clear carry
047855 ED 52       0135*       sbc hl,de ; hl = bytes to copy
047857 E5          0136*       push hl
047858 C1          0137*       pop bc ; bytes to copy
047859             0138*   ; compute target address
047859 ED 5B AC 77 0139*       ld de,(tile_stack_pointer)
       04          
04785E             0140*   ; copy bytes
04785E E1          0141*       pop hl ; copy from address
04785F ED B0       0142*       ldir
047861             0143*   ; update stack pointer and active tile count
047861 21 B2 77 04 0144*       ld hl,num_active_tiles
047865 35          0145*       dec (hl)
047866 2A AC 77 04 0146*       ld hl,(tile_stack_pointer)
04786A 2B          0147*       dec hl
04786B 2B          0148*       dec hl
04786C 2B          0149*       dec hl
04786D 22 AC 77 04 0150*       ld (tile_stack_pointer),hl
047871 C9          0151*       ret
047872             0152*   ; end table_deactivate_tile
047872             0153*   
047872             0154*   ; spawn a new active tile at the prescribed location
047872             0155*   ; inputs: hl = pointer to new tile default settings, tiles_x_plot, tiles_y_plot = x,y position
047872             0156*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
047872             0157*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
047872             0158*   ; destroys: a,hl,bc,de,ix
047872             0159*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
047872             0160*   spawn_active_tile:
047872 E5          0161*       push hl ; back up pointer to new tile defaults
047873 CD 09 78 04 0162*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
047877 E1          0163*       pop hl ; restore pointer to new tile defaults
047878 D0          0164*       ret nc ; no carry means no free tile slots, so we go home
047879             0165*   ; copy default settings to new tile
047879 DD 22 B6 77 0166*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
04787E ED 32 16    0167*       lea ix,ix+tile_definitions ; bump pointer to copy to
047881 DD E5       0168*       push ix ; pointer to default tile settings
047883 D1          0169*       pop de ; address to copy to
047884 01 2A 00 00 0170*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
047888 ED B0       0171*       ldir ; copies defaults to new tile record
04788A             0172*   ; copy tile position from inputs
04788A DD 2A B6 77 0173*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
04788F 2A 27 79 04 0174*       ld hl,(tiles_x_plot-1) ; shift up one byte to get 16.8 fixed point
047893 DD 2F 01    0175*       ld (ix+tile_x),hl
047896 2A 2B 79 04 0176*       ld hl,(tiles_y_plot-1) ; shift up one byte to get 16.8 fixed point
04789A DD 2F 04    0177*       ld (ix+tile_y),hl
04789D             0178*   ; set default tile velocities
04789D 21 00 00 00 0179*       ld hl,0
0478A1 DD 2F 07    0180*       ld (ix+tile_xvel),hl
0478A4 21 00 01 00 0181*       ld hl,1*256 ; 1 pixel per frame
0478A8 DD 2F 0A    0182*       ld (ix+tile_yvel),hl
0478AB             0183*   ; return to caller
0478AB DD CB 16 FE 0184*       set 7,(ix+sprite_type) ; set just spawned flag
0478AF DD CB 1D F6 0185*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
0478B3 37          0186*       scf ; set carry flag to indicate success
0478B4 C9          0187*       ret
0478B5             0188*   ; end spawn_active_tile
0478B5             0189*   
0478B5             0190*   ; spawn a new active tile at the prescribed location
0478B5             0191*   ; inputs: iy pointer to current hl = pointer to new tile default settings
0478B5             0192*   ; returns: if new tile available, a = tile id, ix pointing to new tile vars, carry set
0478B5             0193*   ;      otherwise, a = 0, carry flag reset, ix pointing to highest tile vars
0478B5             0194*   ; destroys: a,hl,bc,de,ix
0478B5             0195*   ; affects: on success, bumps num_active_tiles by one, adds a tile pointer to the top of the tile stack
0478B5             0196*   spawn_active_tile_from_sprite:
0478B5 E5          0197*       push hl ; back up pointer to new tile defaults
0478B6 CD 09 78 04 0198*       call tile_table_get_next_id ; if available: a = new tile id, ix = pointer to new tile vars
0478BA E1          0199*       pop hl ; restore pointer to new tile defaults
0478BB D0          0200*       ret nc ; no carry means no free tile slots, so we go home
0478BC             0201*   ; copy default settings to new tile
0478BC DD 22 B6 77 0202*       ld (new_tile_table_pointer),ix ; save pointer to new tile record
       04          
0478C1 ED 32 16    0203*       lea ix,ix+tile_definitions ; bump pointer to copy to
0478C4 DD E5       0204*       push ix ; pointer to default tile settings
0478C6 D1          0205*       pop de ; address to copy to
0478C7 01 2A 00 00 0206*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
0478CB ED B0       0207*       ldir ; copies defaults to new tile record
0478CD             0208*   ; copy tile position from existing sprite
0478CD DD 2A B6 77 0209*       ld ix,(new_tile_table_pointer) ; reset pointer to new tile record
       04          
0478D2 FD 2A 36 6E 0210*       ld iy,(table_pointer) ; get existing sprite record
       04          
0478D7 FD 27 01    0211*       ld hl,(iy+sprite_x)
0478DA DD 2F 01    0212*       ld (ix+tile_x),hl
0478DD FD 27 04    0213*       ld hl,(iy+sprite_y)
0478E0 DD 2F 04    0214*       ld (ix+tile_y),hl
0478E3             0215*   ; set default tile velocities
0478E3 21 00 00 00 0216*       ld hl,0
0478E7 DD 2F 07    0217*       ld (ix+tile_xvel),hl
0478EA 21 00 01 00 0218*       ld hl,1*256 ; 1 pixel per frame
0478EE DD 2F 0A    0219*       ld (ix+tile_yvel),hl
0478F1             0220*   ; return to caller
0478F1 DD CB 16 FE 0221*       set 7,(ix+sprite_type) ; set just spawned flag
0478F5 DD CB 1D F6 0222*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
0478F9 37          0223*       scf ; set carry flag to indicate success
0478FA C9          0224*       ret
0478FB             0225*   ; end spawn_active_tile_from_sprite
0478FB             0226*   
0478FB             0227*   ; compute animation frame based on tile_animation and tile_heading
0478FB             0228*   ; inputs: iy set to tile record
0478FB             0229*   ; outputs: a, tile_frame set to animation frame
0478FB             0230*   ; destroys: a,hl
0478FB             0231*   tile_frame_heading_animation:
0478FB FD 7E 11    0232*       ld a,(iy+tile_heading+1) ; we want the integer portion
0478FE CB 3F       0233*       srl a ; divide integer portion by 8
047900 CB 3F       0234*       srl a
047902 CB 3F       0235*       srl a
047904 FD 66 22    0236*       ld h,(iy+tile_animation)
047907 2E 20       0237*       ld l,32 ; 32 orientation frames per animation
047909 ED 6C       0238*       mlt hl ; hl = offset from base animation
04790B 85          0239*       add a,l ; modulo256 since tile_frame is only 1 byte
04790C FD 77 28    0240*       ld (iy+tile_frame),a
04790F C9          0241*       ret
047910             0242*   ; end tile_frame_heading_animation
047910             0243*   
047910             0244*   ; compute animation frame based on tile_heading
047910             0245*   ; inputs: iy set to tile record
047910             0246*   ; outputs: a, tile_frame set to animation frame
047910             0247*   ; destroys: a,hl
047910             0248*   tile_frame_heading:
047910 FD 7E 11    0249*       ld a,(iy+tile_heading+1) ; we want the integer portion
047913 CB 3F       0250*       srl a ; divide integer portion by 8
047915 CB 3F       0251*       srl a
047917 CB 3F       0252*       srl a
047919 FD 77 28    0253*       ld (iy+tile_frame),a
04791C C9          0254*       ret
04791D             0255*   ; end tile_frame_heading
04791D             0072        include "tiles.inc"
04791D 00 00 00    0001*   tiles_row_defs: dl 0x000000 ; pointer to current row tiles definitions
047920 00 00 00    0002*   tiles_row: dl 0 ; decrements each time a row is drawn. level is over when hits zero
047923             0003*       ; initialize to zero for a maximum of 256 rows in a level
047923 00          0004*   tiles_cols: db 0 ; number of tile columns in the current level
047924             0005*   
047924 00 00 00    0006*   cur_baseBufferId: dl 0
047927 00          0007*       db 0 ; padding for byte-shifting
047928 00 00 00    0008*   tiles_x_plot: dl 0
04792B 00          0009*       db 0 ; padding for byte-shifting
04792C F1 FF FF    0010*   tiles_y_plot: dl -15
04792F             0011*   
04792F             0012*   tiles_plot:
04792F             0013*   ; set gfx origin to playing field window
04792F 01 80 00 00 0014*       ld bc,origin_left
047933 11 30 00 00 0015*       ld de,origin_top
047937 CD 25 13 04 0016*       call vdu_set_gfx_origin
04793B             0017*   ; set gfx viewport to playing field window
04793B CD 13 6E 04 0018*       call set_gfx_playing_field
04793F             0019*   ; move the background down one pixel
04793F 3E 02       0020*       ld a,2 ; current gfx viewport
047941 2E 02       0021*       ld l,2 ; direction=down
047943 26 01       0022*       ld h,1 ; speed=1 px
047945 CD B8 12 04 0023*       call vdu_scroll_down
047949             0024*   ; set gfx viewport to one scanline to optimise plotting tiles
047949 01 00 00 00 0025*       ld bc,0 ; leftmost x-coord
04794D 11 00 00 00 0026*       ld de,0 ; topmost y-coord
047951 DD 21 FF 00 0027*       ld ix,255 ; rightmost x-coord
       00          
047956 FD 21 00 00 0028*       ld iy,0 ; bottommost y-coord
       00          
04795B CD 40 13 04 0029*       call vdu_set_gfx_viewport
04795F             0030*   ; plot the background
04795F CD 23 7A 04 0031*       call bg_plot
047963             0032*   ; initialize tiles loop
047963 21 00 00 00 0033*       ld hl,0 ; init plotting x-coordinate
047967 22 28 79 04 0034*       ld (tiles_x_plot),hl
04796B 2A 1D 79 04 0035*       ld hl,(tiles_row_defs)
04796F 3A 23 79 04 0036*       ld a,(tiles_cols)
047973 47          0037*       ld b,a ; column loop counter
047974             0038*   @loop:
047974 C5          0039*       push bc ; save the loop counter
047975             0040*   ; read the tile defintion for the current column
047975 7E          0041*       ld a,(hl) ; a has tile definition
047976 E5          0042*       push hl ; save pointer to tile definition
047977 2A 24 79 04 0043*       ld hl,(cur_baseBufferId) ; hl base buffer id of tileset
04797B 6F          0044*       ld l,a ; a is the offset from the base so hl is now the bufferId of the tile
04797C CD 95 13 04 0045*       call vdu_buff_select ; tile bitmap buffer is now active
047980             0046*   ; plot the active bitmap
047980 ED 4B 28 79 0047*       ld bc,(tiles_x_plot)
       04          
047985 ED 5B 2C 79 0048*       ld de,(tiles_y_plot)
       04          
04798A CD F1 16 04 0049*       call vdu_plot_bmp
04798E             0050*   ; bump x-coords the width of one tile and save it
04798E 2A 28 79 04 0051*       ld hl,(tiles_x_plot)
047992 01 10 00 00 0052*       ld bc,16
047996 09          0053*       add hl,bc
047997 22 28 79 04 0054*       ld (tiles_x_plot),hl
04799B             0055*   ; prepare to loop to next column
04799B E1          0056*       pop hl ; get back pointer to tile def
04799C 23          0057*       inc hl ; bump it to the next column
04799D C1          0058*       pop bc ; snag our loop counter
04799E 10 D4       0059*       djnz @loop
0479A0             0060*   ; increment tiles plotting y-coordinate
0479A0             0061*   ; (we use ix b/c we want to preserve hl for the next step)
0479A0 DD 2A 2C 79 0062*       ld ix,(tiles_y_plot)
       04          
0479A5 11 01 00 00 0063*       ld de,1
0479A9 DD 19       0064*       add ix,de
0479AB DD 22 2C 79 0065*       ld (tiles_y_plot),ix
       04          
0479B0 DD 7D       0066*       ld a,ixl
0479B2 FE 01       0067*       cp 1
0479B4 C0          0068*       ret nz
0479B5             0069*   ; do active tiles
0479B5 E5          0070*       push hl ; save pointer to next row tile def
0479B6 CD D9 79 04 0071*       call do_active_tiles
0479BA E1          0072*       pop hl ; get back pointer to next row tile def
0479BB             0073*   ; time to bump tiles_row_defs to next row
0479BB             0074*   ; (hl was already there at the end of the loop)
0479BB 22 1D 79 04 0075*       ld (tiles_row_defs),hl
0479BF             0076*   ; reset coords to plot next row of tiles
0479BF 21 00 00 00 0077*       ld hl,0
0479C3 22 28 79 04 0078*       ld (tiles_x_plot),hl
0479C7 21 F1 FF FF 0079*       ld hl,-15
0479CB 22 2C 79 04 0080*       ld (tiles_y_plot),hl
0479CF             0081*   ; decrement tiles row counter
0479CF 21 20 79 04 0082*       ld hl,tiles_row
0479D3 35          0083*       dec (hl)
0479D4 C0          0084*       ret nz
0479D5             0085*   @inc_level:
0479D5 C3 DB 63 04 0086*       jp next_level
0479D9             0087*   ; end tiles_plot
0479D9             0088*   
0479D9             0089*   do_active_tiles:
0479D9             0090*   ; initialize tiles loop
0479D9 21 00 00 00 0091*       ld hl,0 ; init plotting x-coordinate
0479DD 22 28 79 04 0092*       ld (tiles_x_plot),hl
0479E1 2A 1D 79 04 0093*       ld hl,(tiles_row_defs)
0479E5 3A 23 79 04 0094*       ld a,(tiles_cols)
0479E9 47          0095*       ld b,a ; column loop counter
0479EA             0096*   @loop:
0479EA C5          0097*       push bc ; save the loop counter
0479EB             0098*   ; read the tile defintion for the current column
0479EB 7E          0099*       ld a,(hl) ; a has tile definition
0479EC E5          0100*       push hl ; save pointer to tile definition
0479ED B7          0101*       or a ; check for null tile
0479EE CA 0A 7A 04 0102*       jp z,@next_tile ; skip to next tile if null
0479F2 FE 11       0103*       cp 17 ; carry reset if active tile
0479F4 D2 0A 7A 04 0104*       jp nc,@next_tile ; skip to next tile if not active
0479F8             0105*   ; call the tile activation routine
0479F8 21 5B 7A 04 0106*       ld hl,tile_activation_routines
0479FC 16 03       0107*       ld d,3 ; three bytes per table entry
0479FE 5F          0108*       ld e,a ; a is the tile type
0479FF ED 5C       0109*       mlt de ; de is now the offset to the table entry
047A01 19          0110*       add hl,de ; hl is now the address of the table entry
047A02 ED 27       0111*       ld hl,(hl) ; hl is now the activation routine address
047A04             0112*       CALL_HL ; call the activation routine
047A04 01 0A 7A 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
047A08 C5          0002*M1     push bc ; which constitutes the return address
047A09 E9          0003*M1     jp (hl) ; Jump to the address in HL
047A0A             0113*   @next_tile:
047A0A             0114*   ; bump x-coords the width of one tile and save it
047A0A 2A 28 79 04 0115*       ld hl,(tiles_x_plot)
047A0E 01 10 00 00 0116*       ld bc,16
047A12 09          0117*       add hl,bc
047A13 22 28 79 04 0118*       ld (tiles_x_plot),hl
047A17             0119*   ; prepare to loop to next column
047A17 E1          0120*       pop hl ; get back pointer to tile def
047A18 23          0121*       inc hl ; bump it to the next column
047A19 C1          0122*       pop bc ; snag our loop counter
047A1A 10 CE       0123*       djnz @loop
047A1C C9          0124*       ret ; done
047A1D             0125*   ; end do_active_tiles
047A1D             0126*   
047A1D FF FF FF    0127*   bg_y_plot: dl -1
047A20 00 04 00    0128*   bg_bufferId: dl BUF_BG_STARS_0 ; default bufferId for background tiles
047A23             0129*   
047A23             0130*   bg_plot:
047A23             0131*   ; load current bg tile bufferId as default
047A23 2A 20 7A 04 0132*       ld hl,(bg_bufferId)
047A27             0133*   ; check whether it is time for a new background tile
047A27 3A 1D 7A 04 0134*       ld a,(bg_y_plot)
047A2B 3C          0135*       inc a
047A2C 32 1D 7A 04 0136*       ld (bg_y_plot),a
047A30 C2 48 7A 04 0137*       jp nz,@F ; not time for a new tile so draw current one
047A34             0138*   ; load the next background tile
047A34 21 00 04 00 0139*       ld hl,BUF_BG_STARS_0
047A38 CD 14 05 04 0140*       call rand_8
047A3C E6 03       0141*       and %0000011
047A3E 85          0142*       add a,l
047A3F 6F          0143*       ld l,a
047A40 3E 00       0144*       ld a,0
047A42 8C          0145*       adc a,h
047A43 67          0146*       ld h,a
047A44 22 20 7A 04 0147*       ld (bg_bufferId),hl
047A48             0148*   @@:
047A48 CD 95 13 04 0149*       call vdu_buff_select
047A4C 01 00 00 00 0150*       ld bc,0
047A50 ED 5B 1D 7A 0151*       ld de,(bg_y_plot)
       04          
047A55 13          0152*       inc de
047A56 CD F1 16 04 0153*       call vdu_plot_bmp
047A5A C9          0154*       ret
047A5B             0155*   ; end bg_plot
047A5B             0073        include "tiles_active.inc"
047A5B             0001*   
047A5B             0002*   ; ###### TODO: NEW CODE TO IMPLEMENT ######
047A5B             0003*   tile_pad_small: equ 1
047A5B             0004*   tile_pad_med: equ 2
047A5B             0005*   tile_pad_large: equ 3
047A5B             0006*   tile_charge_shields: equ 4
047A5B             0007*   tile_turret_fireball: equ 5
047A5B             0008*   tile_laser_turret: equ 6
047A5B             0009*   tile_twin_laser_turret: equ 7
047A5B             0010*   tile_charge_fuel: equ 8
047A5B             0011*   tile_electrode: equ 9
047A5B             0012*   tile_lightning: equ 10
047A5B             0013*   ; tile_electrode_r: equ 11 ; same as tile_electrode
047A5B             0014*   tile_12: equ 12
047A5B             0015*   tile_13: equ 13
047A5B             0016*   tile_14: equ 14
047A5B             0017*   tile_15: equ 15
047A5B             0018*   tile_crater: equ 16
047A5B             0019*   
047A5B             0020*   tile_activation_routines:
047A5B 8B 7A 04    0021*       dl activate_null_tile ; dummy spacer since tiled is 1-based
047A5E 09 7D 04    0022*       dl activate_pad_small
047A61 8B 7A 04    0023*       dl activate_null_tile
047A64 8B 7A 04    0024*       dl activate_null_tile
047A67 8B 7A 04    0025*       dl activate_null_tile
047A6A 7E 7D 04    0026*       dl activate_turret_fireball
047A6D 8B 7A 04    0027*       dl activate_null_tile
047A70 8B 7A 04    0028*       dl activate_null_tile
047A73 8B 7A 04    0029*       dl activate_null_tile
047A76 A5 7B 04    0030*       dl activate_electrode
047A79 B0 7C 04    0031*       dl activate_lightning
047A7C A5 7B 04    0032*       dl activate_electrode
047A7F 8B 7A 04    0033*       dl activate_null_tile
047A82 8B 7A 04    0034*       dl activate_null_tile
047A85 8B 7A 04    0035*       dl activate_null_tile
047A88 57 7B 04    0036*       dl activate_crater
047A8B             0037*   ; end tile_activation_routines
047A8B             0038*   
047A8B             0039*   activate_null_tile:
047A8B C9          0040*       ret ; dummy routine, do nothing
047A8C             0041*   move_active_tile:
047A8C             0042*   ; y-axis movement
047A8C FD 27 04    0043*       ld hl,(iy+tile_y)
047A8F FD 17 0A    0044*       ld de,(iy+tile_yvel)
047A92 19          0045*       add hl,de
047A93 FD 2F 04    0046*       ld (iy+tile_y),hl
047A96             0047*   ; detect screen edge collisions
047A96             0048*   ; y-axis bottom is all we need to test
047A96 11 00 80 FE 0049*       ld de,-tile_bottom*256
047A9A ED 5A       0050*       adc hl,de
047A9C F8          0051*       ret m ; still on screen so do nothing further
047A9D AF          0052*       xor a ; signal caller that tile has scrolled off screen
047A9E C9          0053*       ret
047A9F             0054*   ; end move_active_tile
047A9F             0055*   
047A9F             0056*   move_tiles:
047A9F             0057*   ; initialize pointers and loop counter
047A9F FD 21 A9 74 0058*       ld iy,tile_stack ; set iy to first record in table
       04          
047AA4             0059*   @move_loop:
047AA4 FD 22 AC 77 0060*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
047AA9 FD 7E 02    0061*       ld a,(iy+2)
047AAC B7          0062*       or a ; will be zero if at end of stack
047AAD C8          0063*       ret z ; end of stack so we're done
047AAE             0064*   ; point iy to tile record
047AAE FD 37 00    0065*       ld iy,(iy) ; iy points to the current tile record
047AB1 FD 22 AF 77 0066*       ld (tile_table_pointer),iy ; update table pointer
       04          
047AB6             0067*   ; check top bit of tile_type to see if tile is just spawned
047AB6 FD CB 16 7E 0068*       bit 7,(iy+tile_type)
047ABA C2 D8 7A 04 0069*       jp nz,@just_spawned ; if just spawned, skip to next record
047ABE             0070*   ; check sprite_alive bit to see if tile is active
047ABE FD CB 1D 76 0071*       bit sprite_alive,(iy+sprite_collisions)
047AC2 C8          0072*       ret z ; end of stack so we're done
047AC3             0073*   ; otherwise we prepare to move the tile
047AC3 FD 27 1A    0074*       ld hl,(iy+tile_move_program) ; load the behavior subroutine address
047AC6             0075*       CALL_HL
047AC6 01 CC 7A 04 0001*M1     ld bc,$+6 ; Address of first instruction after the jump
047ACA C5          0002*M1     push bc ; which constitutes the return address
047ACB E9          0003*M1     jp (hl) ; Jump to the address in HL
047ACC             0076*    ; get back stack pointer and loop
047ACC             0077*   @next_record:
047ACC FD 2A AC 77 0078*       ld iy,(tile_stack_pointer)
       04          
047AD1 ED 33 03    0079*       lea iy,iy+3 ; next tile stack record
047AD4 C3 A4 7A 04 0080*       jp @move_loop ; loop until we've checked all the records
047AD8             0081*   @just_spawned:
047AD8 FD CB 16 BE 0082*       res 7,(iy+tile_type) ; clear just spawned flag
047ADC C3 CC 7A 04 0083*       jp @next_record
047AE0             0084*   ; end move_tiles
047AE0             0085*   
047AE0             0086*   draw_active_tile:
047AE0 FD 27 17    0087*       ld hl,(iy+tile_base_bufferId)
047AE3 FD 7E 28    0088*       ld a,(iy+tile_frame)
047AE6 85          0089*       add a,l ; TODO: with a little work we could make all tile base buffer ids align to 256
047AE7 6F          0090*       ld l,a
047AE8 3E 00       0091*       ld a,0 ; preserve carry
047AEA 8C          0092*       adc a,h
047AEB 67          0093*       ld h,a
047AEC CD 95 13 04 0094*       call vdu_buff_select ; buffer id of animation frame
047AF0 FD 07 01    0095*       ld bc,(iy+tile_x)
047AF3 FD 17 04    0096*       ld de,(iy+tile_y)
047AF6 CD 0D 17 04 0097*       call vdu_plot_bmp168
047AFA C9          0098*       ret
047AFB             0099*   ; end draw_active_tile
047AFB             0100*   
047AFB             0101*   ; create a new sprite at the same location as the current tile
047AFB             0102*   ; inputs: hl = pointer to new sprite default settings, tile_table_pointer = current tile
047AFB             0103*   ;         ix = pointer to sprite group, b = number of records in sprite group
047AFB             0104*   spawn_sprite_from_tile:
047AFB E5          0105*       push hl ; back up pointer to new sprite defaults
047AFC CD E1 6E 04 0106*       call table_get_next_id ; if available: a = new sprite id, ix = pointer to new sprite vars
047B00 E1          0107*       pop hl ; restore pointer to new sprite defaults
047B01 D0          0108*       ret nc ; no carry means no free sprite slots, so we go home
047B02             0109*   ; copy default settings to new sprite
047B02 DD E5       0110*       push ix ; back up pointer to new sprite record
047B04 ED 32 16    0111*       lea ix,ix+sprite_definitions ; bump pointer to copy to
047B07 DD E5       0112*       push ix ; pointer to default sprite settings
047B09 D1          0113*       pop de ; address to copy to
047B0A 01 2A 00 00 0114*       ld bc,table_record_size-sprite_definitions ; number of bytes to copy
047B0E ED B0       0115*       ldir ; copies defaults to new sprite record
047B10 DD E1       0116*       pop ix ; restore pointer to new sprite record
047B12             0117*   ; copy sprite position from existing tile
047B12 FD 2A AF 77 0118*       ld iy,(tile_table_pointer) ; get existing tile record
       04          
047B17 FD 27 01    0119*       ld hl,(iy+tile_x)
047B1A DD 2F 01    0120*       ld (ix+sprite_x),hl
047B1D FD 27 04    0121*       ld hl,(iy+tile_y)
047B20 DD 2F 04    0122*       ld (ix+sprite_y),hl
047B23             0123*   ; return to caller
047B23 DD CB 16 FE 0124*       set 7,(ix+sprite_type) ; set just spawned flag
047B27 DD CB 1D F6 0125*       set sprite_alive,(ix+sprite_collisions) ; set sprite alive flag
047B2B 37          0126*       scf ; set carry flag to indicate success
047B2C C9          0127*       ret
047B2D             0128*   ; end spawn_sprite_from_tile
047B2D             0129*   
047B2D             0130*   ; create a new tile at the same location as the current tile
047B2D             0131*   ; inputs: tile_table_pointer = current tile
047B2D             0132*   spawn_active_tile_from_tile:
047B2D             0133*   ; copy default settings to new tile
047B2D DD 2A AF 77 0134*       ld ix,(tile_table_pointer) ; get existing tile record
       04          
047B32 ED 32 16    0135*       lea ix,ix+tile_definitions ; bump pointer to copy to
047B35 DD E5       0136*       push ix ; pointer to default tile settings
047B37 D1          0137*       pop de ; address to copy to
047B38 01 2A 00 00 0138*       ld bc,tile_table_record_size-tile_definitions ; number of bytes to copy
047B3C ED B0       0139*       ldir ; copies defaults to new tile record
047B3E DD 2A AF 77 0140*       ld ix,(tile_table_pointer) ; restore pointer to new tile record
       04          
047B43 C9          0141*       ret
047B44             0142*   ; end spawn_active_tile_from_tile
047B44             0074        include "tile_crater.inc"
047B44             0001*   crater_defaults:
047B44 10          0002*       db tile_crater          ; type
047B45 05 01 00    0003*       dl BUF_EXPLOSION_A      ; base_bufferId
047B48 60 7B 04    0004*       dl move_crater          ; move_program
047B4B 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
047B4C 10          0006*       db 16                   ; dim_x
047B4D 10          0007*       db 16                   ; dim_y
047B4E 01          0008*       db 1                    ; num_orientations
047B4F 04          0009*       db 4                    ; num_animations
047B50 05          0010*       db 5	                ; animation
047B51 08          0011*       db 8                    ; animation_timer
047B52 00          0012*       db 0                    ; move_timer
047B53 00          0013*       db 0                    ; move_step
047B54 00          0014*       db 0                    ; points
047B55 00          0015*       db 0                    ; shield_damage
047B56 00          0016*       db 0                    ; frame
047B57             0017*   
047B57             0018*   activate_crater:
047B57 21 44 7B 04 0019*       ld hl,crater_defaults
047B5B CD 2D 7B 04 0020*       call spawn_active_tile_from_tile
047B5F             0021*   ; other specific initialization
047B5F C9          0022*       ret
047B60             0023*   ; end activate_crater
047B60             0024*   
047B60             0025*   move_crater:
047B60 CD 8C 7A 04 0026*       call move_active_tile
047B64 CA 39 78 04 0027*       jp z,table_deactivate_tile
047B68             0028*   ; do animation
047B68 FD 35 23    0029*       dec (iy+tile_animation_timer)
047B6B C0          0030*       ret nz ; not time to animate
047B6C FD 35 22    0031*       dec (iy+sprite_animation) ; check whether time to transition to crater
047B6F CC 85 7B 04 0032*       call z,@make_crater
047B73 3E 08       0033*       ld a,8
047B75 FD 77 23    0034*       ld (iy+tile_animation_timer),a
047B78 FD 7E 28    0035*       ld a,(iy+tile_frame)
047B7B 3C          0036*       inc a
047B7C E6 03       0037*       and %00000011 ; modulo 4
047B7E FD 77 28    0038*       ld (iy+tile_frame),a
047B81 C3 E0 7A 04 0039*       jp draw_active_tile
047B85             0040*   @make_crater:
047B85 21 01 01 00 0041*       ld hl,BUF_CRATER_0
047B89 FD 2F 17    0042*       ld (iy+tile_base_bufferId),hl
047B8C 3E FF       0043*       ld a,-1 ; will wrap to zero on return
047B8E FD 77 28    0044*       ld (iy+tile_frame),a
047B91 C9          0045*       ret
047B92             0046*   ; end move_crater
047B92             0075        include "tile_electrode.inc"
047B92             0001*   electrode_defaults:
047B92 09          0002*       db 9                    ; type
047B93 73 01 00    0003*       dl BUF_TILE_BLANK       ; base_bufferId
047B96 AE 7B 04    0004*       dl move_electrode       ; move_program
047B99 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
047B9A 10          0006*       db 16                   ; dim_x
047B9B 10          0007*       db 16                   ; dim_y
047B9C 01          0008*       db 1                    ; num_orientations
047B9D 01          0009*       db 1                    ; num_animations
047B9E 00          0010*       db 0                    ; animation
047B9F 00          0011*       db 0                    ; animation_timer
047BA0 00          0012*       db 0                    ; move_timer
047BA1 00          0013*       db 0                    ; move_step
047BA2 05          0014*       db 5                    ; points
047BA3 FC          0015*       db -4                   ; shield_damage
047BA4 00          0016*       db 0                    ; frame
047BA5             0017*   
047BA5             0018*   activate_electrode:
047BA5 21 92 7B 04 0019*       ld hl,electrode_defaults
047BA9             0020*   ; get next available active tile id
047BA9 CD 72 78 04 0021*       call spawn_active_tile
047BAD             0022*       ; ret nc ; no carry means no free active tile slots, so we go home
047BAD             0023*   ; other specific initialization
047BAD C9          0024*       ret
047BAE             0025*   ; end activate_electrode
047BAE             0026*   
047BAE             0027*   move_electrode:
047BAE CD 8C 7A 04 0028*       call move_active_tile
047BB2 CA 39 78 04 0029*       jp z,table_deactivate_tile
047BB6 DD 21 07 8A 0030*       ld ix,player_begin
       04          
047BBB DD CB 1D 76 0031*       bit sprite_alive,(ix+sprite_collisions)
047BBF CA D3 7B 04 0032*       jp z,@laser ; player is dead so don't check for collisions
047BC3 CD CB 1E 04 0033*       call check_enemy_collision_player
047BC7 C2 D3 7B 04 0034*       jp nz,@laser ; no collision so check laser collision
047BCB CD E4 6D 04 0035*       call update_shields
047BCF C3 E0 7B 04 0036*       jp kill_electrode
047BD3             0037*   @laser:
047BD3 CD BF 1E 04 0038*       call check_enemy_collision_laser
047BD7 C0          0039*       ret nz ; no collision so we're done
047BD8 CD 7E 6D 04 0040*       call update_score
047BDC C3 E0 7B 04 0041*       jp kill_electrode
047BE0             0042*   ; end move_electrode
047BE0             0043*   
047BE0             0044*   kill_electrode:
047BE0             0045*   ; activate blank tile bitmap
047BE0 21 73 01 00 0046*       ld hl,BUF_TILE_BLANK
047BE4 CD 95 13 04 0047*       call vdu_buff_select
047BE8             0048*   ; save y-coordinate of collision tile
047BE8 FD 27 04    0049*       ld hl,(iy+tile_y)
047BEB 22 9A 7C 04 0050*       ld (@tile_y),hl
047BEF             0051*   ; initialize pointers
047BEF 2A AC 77 04 0052*       ld hl,(tile_stack_pointer)
047BF3 ED 27       0053*       ld hl,(hl) ; pointer to this tile table record
047BF5 E5          0054*       push hl ; save pointer to this tile table record
047BF6 DD 21 A9 74 0055*       ld ix,tile_stack ; set ix to first record in table
       04          
047BFB             0056*   @check_loop:
047BFB DD 22 97 7C 0057*       ld (@tile_stack_pointer),ix ; update stack pointer
       04          
047C00 DD 7E 02    0058*       ld a,(ix+2)
047C03 B7          0059*       or a ; will be zero if at end of stack
047C04 CA 70 7C 04 0060*       jp z,@done ; end of stack so we're done
047C08             0061*   ; point ix to tile record
047C08 DD 37 00    0062*       ld ix,(ix) ; ix points to the tile record being checked
047C0B             0063*   ; check top bit of tile_type to see if tile is just spawned
047C0B DD CB 16 7E 0064*       bit 7,(ix+tile_type)
047C0F C2 64 7C 04 0065*       jp nz,@next_record ; if just spawned, skip to next record
047C13             0066*   ; check sprite_alive bit to see if tile is active
047C13 DD CB 1D 76 0067*       bit sprite_alive,(ix+sprite_collisions)
047C17 C8          0068*       ret z ; end of stack so we're done
047C18             0069*   ; check tile type
047C18 DD 7E 16    0070*       ld a,(ix+tile_type)
047C1B FE 0A       0071*       cp tile_lightning ; check if tile is lightning
047C1D C2 64 7C 04 0072*       jp nz,@next_record ; if not an electrode, skip to next record
047C21             0073*   ; check tile position
047C21 FD 2A 97 7C 0074*       ld iy,(@tile_stack_pointer)
       04          
047C26 FD 22 AC 77 0075*       ld (tile_stack_pointer),iy
       04          
047C2B FD 37 00    0076*       ld iy,(iy) ; pointer to tile record to kill
047C2E FD 22 AF 77 0077*       ld (tile_table_pointer),iy
       04          
047C33 DD 27 04    0078*       ld hl,(ix+tile_y)
047C36 ED 5B 9A 7C 0079*       ld de,(@tile_y)
       04          
047C3B B7          0080*       or a ; clear carry
047C3C E5          0081*       push hl
047C3D ED 52       0082*       sbc hl,de
047C3F E1          0083*       pop hl
047C40 CA 50 7C 04 0084*       jp z,@kill_it
047C44 01 00 01 00 0085*       ld bc,1*256
047C48 09          0086*       add hl,bc
047C49 B7          0087*       or a
047C4A ED 52       0088*       sbc hl,de
047C4C C2 64 7C 04 0089*       jp nz,@next_record
047C50             0090*   @kill_it: ; deactivate tile and replace with inactive blank tile
047C50 FD 07 01    0091*       ld bc,(iy+tile_x) ; get x position (ud.e already has y-position)
047C53 CD 0D 17 04 0092*       call vdu_plot_bmp168 ; plot blank tile (bitmap was activated at beginning of proc)
047C57 CD 39 78 04 0093*       call table_deactivate_tile
047C5B DD 2A 97 7C 0094*       ld ix,(@tile_stack_pointer) ; get back stack pointer
       04          
047C60 C3 FB 7B 04 0095*       jp @check_loop ; deactivate tile naturally advances to next record
047C64             0096*    ; get back stack pointer and loop
047C64             0097*   @next_record:
047C64 DD 2A 97 7C 0098*       ld ix,(@tile_stack_pointer)
       04          
047C69 ED 32 03    0099*       lea ix,ix+3 ; next tile stack record
047C6C C3 FB 7B 04 0100*       jp @check_loop ; loop until we've checked all the records
047C70             0101*   @done:
047C70             0102*   ; find this tile record in the tile stack
047C70 D1          0103*       pop de ; restore pointer to this tile table record (was hl)
047C71 FD 21 A9 74 0104*       ld iy,tile_stack ; set ix to first record in table
       04          
047C76             0105*   @find_loop:
047C76 FD 27 00    0106*       ld hl,(iy)
047C79 ED 33 03    0107*       lea iy,iy+3 ; next tile stack record
047C7C B7          0108*       or a ; clear carry
047C7D ED 52       0109*       sbc hl,de ; if not the same address, loop
047C7F C2 76 7C 04 0110*       jp nz,@find_loop
047C83 ED 33 FD    0111*       lea iy,iy-3 ; back up to the record we want
047C86 FD 22 AC 77 0112*       ld (tile_stack_pointer),iy ; update stack pointer
       04          
047C8B FD 37 00    0113*       ld iy,(iy) ; iy points to the tile stack record
047C8E FD 22 AF 77 0114*       ld (tile_table_pointer),iy ; set pointer to this tile record
       04          
047C93 C3 57 7B 04 0115*       jp activate_crater
047C97 A9 74 04    0116*   @tile_stack_pointer: dl tile_stack ; pointer to current stack record, initialized to tile_stack
047C9A 00 00 00    0117*   @tile_y: dl 0 ; y position of tiles to kill
047C9D             0118*   ; end move_electrode
047C9D             0076        include "tile_lightning.inc"
047C9D             0001*   lightning_defaults:
047C9D 0A          0002*       db tile_lightning       ; type
047C9E 4C 01 00    0003*       dl BUF_LIGHTNING_H_0    ; base_bufferId
047CA1 BA 7C 04    0004*       dl move_lightning       ; move_program
047CA4 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
047CA5 10          0006*       db 16                   ; dim_x
047CA6 10          0007*       db 16                   ; dim_y
047CA7 01          0008*       db 1                    ; num_orientations
047CA8 02          0009*       db 2                    ; num_animations
047CA9 00          0010*       db 0                    ; animation
047CAA 08          0011*       db 8                    ; animation_timer
047CAB 00          0012*       db 0                    ; move_timer
047CAC 00          0013*       db 0                    ; move_step
047CAD 00          0014*       db 0                    ; points
047CAE FF          0015*       db -1                    ; shield_damage
047CAF 00          0016*       db 0                    ; frame
047CB0             0017*   
047CB0             0018*   activate_lightning:
047CB0 21 9D 7C 04 0019*       ld hl,lightning_defaults
047CB4             0020*   ; get next available active tile id
047CB4 CD 72 78 04 0021*       call spawn_active_tile
047CB8 D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
047CB9             0023*   ; other specific initialization
047CB9 C9          0024*       ret
047CBA             0025*   ; end activate_lightning
047CBA             0026*   
047CBA             0027*   move_lightning:
047CBA CD 8C 7A 04 0028*       call move_active_tile
047CBE CA 39 78 04 0029*       jp z,table_deactivate_tile
047CC2 CD BF 1E 04 0030*       call check_enemy_collision_laser ; kills laser on collision but does not die
047CC6 DD 21 07 8A 0031*       ld ix,player_begin
       04          
047CCB DD CB 1D 76 0032*       bit sprite_alive,(ix+sprite_collisions)
047CCF CA DF 7C 04 0033*       jp z,@animate ; player is dead so don't check for collisions
047CD3 CD CB 1E 04 0034*       call check_enemy_collision_player
047CD7 C2 DF 7C 04 0035*       jp nz,@animate ; no collision so do animation
047CDB CD E4 6D 04 0036*       call update_shields
047CDF             0037*   @animate:
047CDF FD 35 23    0038*       dec (iy+tile_animation_timer)
047CE2 C0          0039*       ret nz ; not time to animate
047CE3             0040*   ; reset the animation timer and bump animation
047CE3 3E 08       0041*       ld a,8
047CE5 FD 77 23    0042*       ld (iy+tile_animation_timer),a
047CE8 FD 7E 28    0043*       ld a,(iy+tile_frame)
047CEB 3C          0044*       inc a
047CEC E6 01       0045*       and %00000001 ; modulo 1
047CEE FD 77 28    0046*       ld (iy+tile_frame),a
047CF1 C3 E0 7A 04 0047*       jp draw_active_tile
047CF5 C9          0048*       ret
047CF6             0077        include "tile_pad_small.inc"
047CF6             0001*   pad_small_defaults:
047CF6 01          0002*       db tile_pad_small       ; type
047CF7 74 01 00    0003*       dl BUF_TILE_PAD_0       ; base_bufferId
047CFA 1C 7D 04    0004*       dl move_pad_small       ; move_program
047CFD 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
047CFE 10          0006*       db 16                   ; dim_x
047CFF 10          0007*       db 16                   ; dim_y
047D00 01          0008*       db 1                    ; num_orientations
047D01 01          0009*       db 1                    ; num_animations
047D02 00          0010*       db 0                    ; animation
047D03 10          0011*       db 16                   ; animation_timer
047D04 00          0012*       db 0                    ; move_timer
047D05 00          0013*       db 0                    ; move_step
047D06 05          0014*       db 5                    ; points
047D07 00          0015*       db 0                    ; shield_damage
047D08 00          0016*       db 0                    ; frame
047D09             0017*   
047D09             0018*   activate_pad_small:
047D09 21 F6 7C 04 0019*       ld hl,pad_small_defaults
047D0D             0020*   ; get next available active tile id
047D0D CD 72 78 04 0021*       call spawn_active_tile
047D11 D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
047D12             0023*   ; other specific initialization
047D12 CD 14 05 04 0024*       call rand_8     ; snag a random number
047D16 E6 1F       0025*       and %00011111 ; keep only 5 lowest bits (max 31)
047D18 DD 77 24    0026*       ld (ix+tile_move_timer),a ; when this hits zero,will spawn a seeker
047D1B C9          0027*       ret
047D1C             0028*   ; end activate_pad_small
047D1C             0029*   
047D1C             0030*   move_pad_small:
047D1C CD 8C 7A 04 0031*       call move_active_tile
047D20 CA 39 78 04 0032*       jp z,table_deactivate_tile
047D24 CD BF 1E 04 0033*       call check_enemy_collision_laser
047D28 CA 63 7D 04 0034*       jp z,kill_pad_small
047D2C             0035*   ; do animation
047D2C FD 35 23    0036*       dec (iy+tile_animation_timer)
047D2F C2 45 7D 04 0037*       jp nz,@F
047D33 3E 10       0038*       ld a,16
047D35 FD 77 23    0039*       ld (iy+tile_animation_timer),a
047D38 FD 7E 28    0040*       ld a,(iy+tile_frame)
047D3B 3C          0041*       inc a
047D3C E6 07       0042*       and %00000111 ; modulo 8
047D3E FD 77 28    0043*       ld (iy+tile_frame),a
047D41 CD E0 7A 04 0044*       call draw_active_tile
047D45             0045*   @@: ; check player alive
047D45 DD 21 07 8A 0046*       ld ix,player_begin
       04          
047D4A DD CB 1D 76 0047*       bit sprite_alive,(ix+sprite_collisions)
047D4E C8          0048*       ret z ; player dead so nothing more to do
047D4F             0049*   ; check whether it is time to spawn a seeker
047D4F FD 35 24    0050*       dec (iy+tile_move_timer)
047D52 C0          0051*       ret nz
047D53             0052*   ; spwan a seeker
047D53 CD D5 1F 04 0053*       call enemy_spawn_seeker
047D57             0054*       ; ret ; DEBUG
047D57             0055*       ; fall through to reset move timer
047D57             0056*   pad_small_reset_move_timer:
047D57 CD 14 05 04 0057*       call rand_8     ; snag a random number
047D5B E6 1F       0058*       and %00011111   ; keep only 5 lowest bits (max 31)
047D5D C6 40       0059*       add a,64 ; range is now 64-127
047D5F FD 77 24    0060*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a seeker
047D62 C9          0061*       ret
047D63             0062*   
047D63             0063*   kill_pad_small:
047D63 CD 7E 6D 04 0064*       call update_score
047D67 C3 57 7B 04 0065*       jp activate_crater
047D6B             0066*   ; end move_pad_small
047D6B             0078        include "tile_turret_fireball.inc"
047D6B             0001*   turret_fireball_defaults:
047D6B 02          0002*       db enemy_ground         ; type
047D6C 7C 01 00    0003*       dl BUF_TURRET_000       ; base_bufferId
047D6F 91 7D 04    0004*       dl move_turret_fireball ; move_program
047D72 40          0005*       db %01000000            ; collisions bit 6 signals sprite alive
047D73 10          0006*       db 16                   ; dim_x
047D74 10          0007*       db 16                   ; dim_y
047D75 20          0008*       db 32                   ; num_orientations
047D76 01          0009*       db 1                    ; num_animations
047D77 00          0010*       db 0                    ; animation
047D78 00          0011*       db 0                    ; animation_timer
047D79 00          0012*       db 0                    ; move_timer
047D7A 00          0013*       db 0                    ; move_step
047D7B 05          0014*       db 5                    ; points
047D7C 00          0015*       db 0                    ; shield_damage
047D7D 00          0016*       db 0                    ; frame
047D7E             0017*   
047D7E             0018*   activate_turret_fireball:
047D7E 21 6B 7D 04 0019*       ld hl,turret_fireball_defaults
047D82             0020*   ; get next available active tile id
047D82 CD 72 78 04 0021*       call spawn_active_tile
047D86 D0          0022*       ret nc ; no carry means no free active tile slots, so we go home
047D87             0023*   ; other specific initialization
047D87 CD 14 05 04 0024*       call rand_8     ; snag a random number
047D8B E6 1F       0025*       and %00011111 ; keep only 5 lowest bits (max 31)
047D8D DD 77 24    0026*       ld (ix+tile_move_timer),a ; when this hits zero,will spawn a fireball
047D90 C9          0027*       ret
047D91             0028*   ; end activate_turret_fireball
047D91             0029*   
047D91             0030*   move_turret_fireball:
047D91 CD 8C 7A 04 0031*       call move_active_tile
047D95 CA 39 78 04 0032*       jp z,table_deactivate_tile
047D99 CD BF 1E 04 0033*       call check_enemy_collision_laser
047D9D CA DA 7D 04 0034*       jp z,kill_turret_fireball
047DA1             0035*   ; target player
047DA1 CD C1 73 04 0036*       call tile_orientation_to_player
047DA5 21 00 04 00 0037*       ld hl,speed_fireball
047DA9 22 11 74 04 0038*       ld (Vp),hl ; param for targeting_computer
047DAD CD 29 74 04 0039*       call targeting_computer
047DB1 FD 2F 10    0040*       ld (iy+tile_heading),hl ; save active tile heading
047DB4 CD 10 79 04 0041*       call tile_frame_heading
047DB8 CD E0 7A 04 0042*       call draw_active_tile
047DBC             0043*   ; check player alive
047DBC DD 21 07 8A 0044*       ld ix,player_begin
       04          
047DC1 DD CB 1D 76 0045*       bit sprite_alive,(ix+sprite_collisions)
047DC5 C8          0046*       ret z ; player dead so nothing more to do
047DC6             0047*   ; check whether it is time to spawn a fireball
047DC6 FD 35 24    0048*       dec (iy+tile_move_timer)
047DC9 C0          0049*       ret nz
047DCA             0050*   ; spwan a fireball
047DCA CD 0F 1F 04 0051*       call enemy_spawn_fireball
047DCE             0052*       ; fall through to reset move timer
047DCE             0053*   turret_fireball_reset_move_timer:
047DCE CD 14 05 04 0054*       call rand_8     ; snag a random number
047DD2 E6 1F       0055*       and %00011111   ; keep only 5 lowest bits (max 31)
047DD4 C6 18       0056*       add a,24 ; range is now 24-55
047DD6 FD 77 24    0057*       ld (iy+tile_move_timer),a ; when this hits zero,will spawn a fireball
047DD9 C9          0058*       ret
047DDA             0059*   
047DDA             0060*   kill_turret_fireball:
047DDA CD 7E 6D 04 0061*       call update_score
047DDE C3 57 7B 04 0062*       jp activate_crater
047DE2             0063*   ; end move_turret_fireball
047DE2             0079        include "debug.inc"
047DE2             0001*   printHexA:
047DE2 F5          0002*       push af
047DE3 C5          0003*       push bc
047DE4 CD AA 00 04 0004*       call printHex8
047DE8 3E 20       0005*       ld a,' '
047DEA 5B D7       0006*       rst.lil 10h
047DEC C1          0007*       pop bc
047DED F1          0008*       pop af
047DEE C9          0009*       ret
047DEF             0010*   
047DEF             0011*   printHexHL:
047DEF F5          0012*       push af
047DF0 C5          0013*       push bc
047DF1 CD A4 00 04 0014*       call printHex16
047DF5 3E 20       0015*       ld a,' '
047DF7 5B D7       0016*       rst.lil 10h
047DF9 C1          0017*       pop bc
047DFA F1          0018*       pop af
047DFB C9          0019*       ret
047DFC             0020*   
047DFC             0021*   printHexUHL:
047DFC F5          0022*       push af
047DFD C5          0023*       push bc
047DFE CD 9C 00 04 0024*       call printHex24
047E02 3E 20       0025*       ld a,' '
047E04 5B D7       0026*       rst.lil 10h
047E06 C1          0027*       pop bc
047E07 F1          0028*       pop af
047E08 C9          0029*       ret
047E09             0030*   
047E09             0031*   printHexAUHL:
047E09 F5          0032*       push af
047E0A C5          0033*       push bc
047E0B CD AA 00 04 0034*       call printHex8
047E0F 3E 2E       0035*       ld a,'.'
047E11 5B D7       0036*       rst.lil 10h
047E13 CD 9C 00 04 0037*       call printHex24
047E17 3E 20       0038*       ld a,' '
047E19 5B D7       0039*       rst.lil 10h
047E1B C1          0040*       pop bc
047E1C F1          0041*       pop af
047E1D C9          0042*       ret
047E1E             0043*   
047E1E             0044*   printHexABHL:
047E1E             0045*   ; preserve registers
047E1E C5          0046*       push bc ; b will be ok c will not
047E1F F5          0047*       push af ; will get totally destroyed
047E20             0048*   ; print a
047E20 CD AA 00 04 0049*       call printHex8
047E24             0050*   ; print b
047E24 78          0051*       ld a,b
047E25 CD AA 00 04 0052*       call printHex8
047E29             0053*   ; print hl
047E29 CD A4 00 04 0054*       call printHex16
047E2D             0055*   ; restore registers
047E2D F1          0056*       pop af
047E2E C1          0057*       pop bc
047E2F C9          0058*       ret
047E30             0059*   
047E30             0060*   printHexBHL:
047E30             0061*   ; preserve registers
047E30 C5          0062*       push bc ; b will be ok c will not
047E31 F5          0063*       push af ; will get totally destroyed
047E32             0064*   ; print b
047E32 78          0065*       ld a,b
047E33 CD AA 00 04 0066*       call printHex8
047E37             0067*   ; print hl
047E37 CD A4 00 04 0068*       call printHex16
047E3B             0069*   ; restore registers
047E3B F1          0070*       pop af
047E3C C1          0071*       pop bc
047E3D C9          0072*       ret
047E3E             0073*   
047E3E             0074*   printHexCDE:
047E3E             0075*   ; preserve registers
047E3E C5          0076*       push bc ; b will be ok c will not
047E3F F5          0077*       push af ; will get totally destroyed
047E40             0078*   ; print c
047E40 79          0079*       ld a,c
047E41 CD AA 00 04 0080*       call printHex8
047E45             0081*   ; print de
047E45 EB          0082*       ex de,hl
047E46 CD A4 00 04 0083*       call printHex16
047E4A EB          0084*       ex de,hl
047E4B             0085*   ; restore registers
047E4B F1          0086*       pop af
047E4C C1          0087*       pop bc
047E4D C9          0088*       ret
047E4E             0089*   
047E4E             0090*   printHexUIX:
047E4E             0091*   ; store everything in scratch
047E4E 22 31 03 04 0092*       ld (uhl),hl
047E52 ED 43 34 03 0093*       ld (ubc),bc
       04          
047E57 ED 53 37 03 0094*       ld (ude),de
       04          
047E5C DD 22 3A 03 0095*       ld (uix),ix
       04          
047E61 FD 22 3D 03 0096*       ld (uiy),iy
       04          
047E66 F5          0097*       push af ; fml
047E67             0098*   
047E67 21 C8 02 04 0099*       ld hl,str_ixu
047E6B CD 63 00 04 0100*       call printString
047E6F 2A 3A 03 04 0101*       ld hl,(uix)
047E73 CD 9C 00 04 0102*       call printHex24
047E77 CD 78 00 04 0103*       call printNewLine
047E7B             0104*   
047E7B             0105*   ; restore everything
047E7B 2A 31 03 04 0106*       ld hl, (uhl)
047E7F ED 4B 34 03 0107*       ld bc, (ubc)
       04          
047E84 ED 5B 37 03 0108*       ld de, (ude)
       04          
047E89 DD 2A 3A 03 0109*       ld ix, (uix)
       04          
047E8E FD 2A 3D 03 0110*       ld iy, (uiy)
       04          
047E93 F1          0111*       pop af
047E94             0112*   ; all done
047E94 C9          0113*       ret
047E95             0114*   
047E95             0115*   
047E95             0116*   ; print registers to screen in hexidecimal format
047E95             0117*   ; inputs: none
047E95             0118*   ; outputs: values of every register printed to screen
047E95             0119*   ;    values of each register in global scratch memory
047E95             0120*   ; destroys: nothing
047E95             0121*   stepRegistersHex:
047E95             0122*   ; store everything in scratch
047E95 22 31 03 04 0123*       ld (uhl),hl
047E99 ED 43 34 03 0124*       ld (ubc),bc
       04          
047E9E ED 53 37 03 0125*       ld (ude),de
       04          
047EA3 DD 22 3A 03 0126*       ld (uix),ix
       04          
047EA8 FD 22 3D 03 0127*       ld (uiy),iy
       04          
047EAD F5          0128*       push af ; fml
047EAE E1          0129*       pop hl ; thanks, zilog
047EAF 22 2E 03 04 0130*       ld (uaf),hl
047EB3 F5          0131*       push af ; dammit
047EB4             0132*   
047EB4             0133*   ; home the cursor
047EB4             0134*       ; call vdu_home_cursor
047EB4             0135*   
047EB4             0136*   ; print each register
047EB4 21 B4 02 04 0137*       ld hl,str_afu
047EB8 CD 63 00 04 0138*       call printString
047EBC 2A 2E 03 04 0139*       ld hl,(uaf)
047EC0 CD 9C 00 04 0140*       call printHex24
047EC4 CD 78 00 04 0141*       call printNewLine
047EC8             0142*   
047EC8 21 B9 02 04 0143*       ld hl,str_hlu
047ECC CD 63 00 04 0144*       call printString
047ED0 2A 31 03 04 0145*       ld hl,(uhl)
047ED4 CD 9C 00 04 0146*       call printHex24
047ED8 CD 78 00 04 0147*       call printNewLine
047EDC             0148*   
047EDC 21 BE 02 04 0149*       ld hl,str_bcu
047EE0 CD 63 00 04 0150*       call printString
047EE4 2A 34 03 04 0151*       ld hl,(ubc)
047EE8 CD 9C 00 04 0152*       call printHex24
047EEC CD 78 00 04 0153*       call printNewLine
047EF0             0154*   
047EF0 21 C3 02 04 0155*       ld hl,str_deu
047EF4 CD 63 00 04 0156*       call printString
047EF8 2A 37 03 04 0157*       ld hl,(ude)
047EFC CD 9C 00 04 0158*       call printHex24
047F00 CD 78 00 04 0159*       call printNewLine
047F04             0160*   
047F04 21 C8 02 04 0161*       ld hl,str_ixu
047F08 CD 63 00 04 0162*       call printString
047F0C 2A 3A 03 04 0163*       ld hl,(uix)
047F10 CD 9C 00 04 0164*       call printHex24
047F14 CD 78 00 04 0165*       call printNewLine
047F18             0166*   
047F18 21 CD 02 04 0167*       ld hl,str_iyu
047F1C CD 63 00 04 0168*       call printString
047F20 2A 3D 03 04 0169*       ld hl,(uiy)
047F24 CD 9C 00 04 0170*       call printHex24
047F28 CD 78 00 04 0171*       call printNewLine
047F2C             0172*   
047F2C             0173*       ; call vsync
047F2C             0174*   
047F2C CD 78 00 04 0175*       call printNewLine
047F30             0176*   
047F30             0177*   ; check for right shift key and quit if pressed
047F30             0178*       MOSCALL mos_getkbmap
047F30 3E 1E       0001*M1 			LD	A, function
047F32 5B CF       0002*M1 			RST.LIL	08h
047F34             0179*   @stayhere:
047F34             0180*   ; 7 RightShift
047F34 DD CB 00 76 0181*       bit 6,(ix+0)
047F38 20 02       0182*       jr nz,@RightShift
047F3A 18 F8       0183*       jr @stayhere
047F3C             0184*   @RightShift:
047F3C DD CB 0E 86 0185*       res 0,(ix+14) ; debounce the key (hopefully)
047F40 3E 80       0186*       ld a,%10000000
047F42             0187*       ; call multiPurposeDelay
047F42             0188*   
047F42             0189*   ; restore everything
047F42 2A 31 03 04 0190*       ld hl, (uhl)
047F46 ED 4B 34 03 0191*       ld bc, (ubc)
       04          
047F4B ED 5B 37 03 0192*       ld de, (ude)
       04          
047F50 DD 2A 3A 03 0193*       ld ix, (uix)
       04          
047F55 FD 2A 3D 03 0194*       ld iy, (uiy)
       04          
047F5A F1          0195*       pop af
047F5B             0196*   ; all done
047F5B C9          0197*       ret
047F5C             0198*   
047F5C             0199*   ; print registers to screen in hexidecimal format
047F5C             0200*   ; inputs: none
047F5C             0201*   ; outputs: values of every register printed to screen
047F5C             0202*   ;    values of each register in global scratch memory
047F5C             0203*   ; destroys: nothing
047F5C             0204*   dumpRegistersHex:
047F5C             0205*   ; store everything in scratch
047F5C 22 31 03 04 0206*       ld (uhl),hl
047F60 ED 43 34 03 0207*       ld (ubc),bc
       04          
047F65 ED 53 37 03 0208*       ld (ude),de
       04          
047F6A DD 22 3A 03 0209*       ld (uix),ix
       04          
047F6F FD 22 3D 03 0210*       ld (uiy),iy
       04          
047F74 F5          0211*       push af ; fml
047F75 E1          0212*       pop hl ; thanks, zilog
047F76 22 2E 03 04 0213*       ld (uaf),hl
047F7A F5          0214*       push af ; dammit
047F7B             0215*   
047F7B             0216*   ; home the cursor
047F7B             0217*       ; call vdu_home_cursor
047F7B             0218*       ; call printNewLine
047F7B             0219*   
047F7B             0220*   ; print each register
047F7B 21 B4 02 04 0221*       ld hl,str_afu
047F7F CD 63 00 04 0222*       call printString
047F83 2A 2E 03 04 0223*       ld hl,(uaf)
047F87 CD 9C 00 04 0224*       call printHex24
047F8B CD 78 00 04 0225*       call printNewLine
047F8F             0226*   
047F8F 21 B9 02 04 0227*       ld hl,str_hlu
047F93 CD 63 00 04 0228*       call printString
047F97 2A 31 03 04 0229*       ld hl,(uhl)
047F9B CD 9C 00 04 0230*       call printHex24
047F9F CD 78 00 04 0231*       call printNewLine
047FA3             0232*   
047FA3 21 BE 02 04 0233*       ld hl,str_bcu
047FA7 CD 63 00 04 0234*       call printString
047FAB 2A 34 03 04 0235*       ld hl,(ubc)
047FAF CD 9C 00 04 0236*       call printHex24
047FB3 CD 78 00 04 0237*       call printNewLine
047FB7             0238*   
047FB7 21 C3 02 04 0239*       ld hl,str_deu
047FBB CD 63 00 04 0240*       call printString
047FBF 2A 37 03 04 0241*       ld hl,(ude)
047FC3 CD 9C 00 04 0242*       call printHex24
047FC7 CD 78 00 04 0243*       call printNewLine
047FCB             0244*   
047FCB 21 C8 02 04 0245*       ld hl,str_ixu
047FCF CD 63 00 04 0246*       call printString
047FD3 2A 3A 03 04 0247*       ld hl,(uix)
047FD7 CD 9C 00 04 0248*       call printHex24
047FDB CD 78 00 04 0249*       call printNewLine
047FDF             0250*   
047FDF 21 CD 02 04 0251*       ld hl,str_iyu
047FE3 CD 63 00 04 0252*       call printString
047FE7 2A 3D 03 04 0253*       ld hl,(uiy)
047FEB CD 9C 00 04 0254*       call printHex24
047FEF             0255*   
047FEF CD 78 00 04 0256*       call printNewLine
047FF3 CD 78 00 04 0257*       call printNewLine
047FF7             0258*   ; restore everything
047FF7 2A 31 03 04 0259*       ld hl, (uhl)
047FFB ED 4B 34 03 0260*       ld bc, (ubc)
       04          
048000 ED 5B 37 03 0261*       ld de, (ude)
       04          
048005 DD 2A 3A 03 0262*       ld ix, (uix)
       04          
04800A FD 2A 3D 03 0263*       ld iy, (uiy)
       04          
04800F F1          0264*       pop af
048010             0265*   ; all done
048010 C9          0266*       ret
048011             0267*   
048011             0268*   dumpRegistersHexPrime:
048011 D9          0269*       exx
048012 08          0270*       ex af,af'
048013 CD 5C 7F 04 0271*       call dumpRegistersHex
048017 08          0272*       ex af,af'
048018 D9          0273*       exx
048019 C9          0274*       ret
04801A             0275*   
04801A             0276*   ; additionally dump prime registers
04801A             0277*   ; inputs: none
04801A             0278*   ; outputs: values of every register printed to screen
04801A             0279*   ; destroys: nothing
04801A             0280*   dumpRegistersHexAll:
04801A CD 5C 7F 04 0281*       call dumpRegistersHex
04801E 08          0282*       ex af,af'
04801F D9          0283*       exx
048020 CD 5C 7F 04 0284*       call dumpRegistersHex
048024 08          0285*       ex af,af'
048025 D9          0286*       exx
048026 C9          0287*       ret
048027             0288*   
048027             0289*   ; print hlu to screen in hexidecimal format
048027             0290*   ; inputs: none
048027             0291*   ; destroys: nothing
048027             0292*   print_hex_hl:
048027 F5          0293*       push af
048028 E5          0294*       push hl
048029 21 B9 02 04 0295*       ld hl,str_hlu
04802D CD 63 00 04 0296*       call printString
048031 E1          0297*       pop hl
048032 E5          0298*       push hl
048033 CD 9C 00 04 0299*       call printHex24
048037 3E 20       0300*       ld a,' '
048039 5B D7       0301*       rst.lil 10h
04803B E1          0302*       pop hl
04803C F1          0303*       pop af
04803D C9          0304*       ret
04803E             0305*   
04803E             0306*   ; print bcu to screen in hexidecimal format
04803E             0307*   ; inputs: none
04803E             0308*   ; destroys: nothing
04803E             0309*   print_hex_bc:
04803E F5          0310*       push af
04803F E5          0311*       push hl
048040 C5          0312*       push bc
048041 21 BE 02 04 0313*       ld hl,str_bcu
048045 CD 63 00 04 0314*       call printString
048049 E1          0315*       pop hl
04804A E5          0316*       push hl
04804B CD 9C 00 04 0317*       call printHex24
04804F 3E 20       0318*       ld a,' '
048051 5B D7       0319*       rst.lil 10h
048053 C1          0320*       pop bc
048054 E1          0321*       pop hl
048055 F1          0322*       pop af
048056 C9          0323*       ret
048057             0324*   
048057             0325*   ; print deu to screen in hexidecimal format
048057             0326*   ; inputs: none
048057             0327*   ; destroys: nothing
048057             0328*   print_hex_de:
048057 F5          0329*       push af
048058 E5          0330*       push hl
048059 D5          0331*       push de
04805A 21 C3 02 04 0332*       ld hl,str_deu
04805E CD 63 00 04 0333*       call printString
048062 E1          0334*       pop hl
048063 E5          0335*       push hl
048064 CD 9C 00 04 0336*       call printHex24
048068 3E 20       0337*       ld a,' '
04806A 5B D7       0338*       rst.lil 10h
04806C D1          0339*       pop de
04806D E1          0340*       pop hl
04806E F1          0341*       pop af
04806F C9          0342*       ret
048070             0343*   
048070             0344*   
048070             0345*   ; inputs: whatever is in the flags register
048070             0346*   ; outputs: binary representation of flags
048070             0347*   ;          with a header so we know which is what
048070             0348*   ; destroys: nothing
048070             0349*   ; preserves: everything
048070             0350*   dumpFlags:
048070             0351*   ; first we curse zilog for not giving direct access to flags
048070 F5          0352*       push af ; this is so we can send it back unharmed
048071 F5          0353*       push af ; this is so we can pop it to hl
048072             0354*   ; store everything in scratch
048072 22 31 03 04 0355*       ld (uhl),hl
048076 ED 43 34 03 0356*       ld (ubc),bc
       04          
04807B ED 53 37 03 0357*       ld (ude),de
       04          
048080 DD 22 3A 03 0358*       ld (uix),ix
       04          
048085 FD 22 3D 03 0359*       ld (uiy),iy
       04          
04808A             0360*   ; next we print the header
04808A 21 B6 80 04 0361*       ld hl,@header
04808E CD 63 00 04 0362*       call printString
048092 E1          0363*       pop hl ; flags are now in l
048093 7D          0364*       ld a,l ; flags are now in a
048094 CD 6A 02 04 0365*       call printBin8
048098 CD 78 00 04 0366*       call printNewLine
04809C             0367*   ; restore everything
04809C 2A 31 03 04 0368*       ld hl, (uhl)
0480A0 ED 4B 34 03 0369*       ld bc, (ubc)
       04          
0480A5 ED 5B 37 03 0370*       ld de, (ude)
       04          
0480AA DD 2A 3A 03 0371*       ld ix, (uix)
       04          
0480AF FD 2A 3D 03 0372*       ld iy, (uiy)
       04          
0480B4 F1          0373*       pop af ; send her home the way she came
0480B5 C9          0374*       ret
0480B6             0375*   ; Bit 7 (S): Sign flag
0480B6             0376*   ; Bit 6 (Z): Zero flag
0480B6             0377*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0480B6             0378*   ; Bit 4 (H): Half Carry flag
0480B6             0379*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0480B6             0380*   ; Bit 2 (PV): Parity/Overflow flag
0480B6             0381*   ; Bit 1 (N): Subtract flag
0480B6             0382*   ; Bit 0 (C): Carry flag
0480B6 53 5A 78 48 0383*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0480C1             0384*   
0480C1             0385*   
0480C1             0386*   ; print bytes from an address to the screen in hexidecimal format
0480C1             0387*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0480C1             0388*   ; outputs: values of each byte printed to screen separated by spaces
0480C1             0389*   ; destroys: nothing
0480C1             0390*   dumpMemoryHex:
0480C1             0391*   ; save registers to the stack
0480C1 C5          0392*       push bc
0480C2 E5          0393*       push hl
0480C3 F5          0394*       push af
0480C4             0395*   
0480C4             0396*   ; print the address and separator
0480C4 CD 9C 00 04 0397*       call printHex24
0480C8 3E 3A       0398*       ld a,':'
0480CA 5B D7       0399*       rst.lil 10h
0480CC 3E 20       0400*       ld a,' '
0480CE 5B D7       0401*       rst.lil 10h
0480D0             0402*   
0480D0             0403*   ; set b to be our loop counter
0480D0 F1          0404*       pop af
0480D1 47          0405*       ld b,a
0480D2 E1          0406*       pop hl
0480D3 E5          0407*       push hl
0480D4 F5          0408*       push af
0480D5             0409*   @loop:
0480D5             0410*   ; print the byte
0480D5 7E          0411*       ld a,(hl)
0480D6 CD AA 00 04 0412*       call printHex8
0480DA             0413*   ; print a space
0480DA 3E 20       0414*       ld a,' '
0480DC 5B D7       0415*       rst.lil 10h
0480DE 23          0416*       inc hl
0480DF 10 F4       0417*       djnz @loop
0480E1 CD 78 00 04 0418*       call printNewLine
0480E5             0419*   
0480E5             0420*   ; restore everything
0480E5 F1          0421*       pop af
0480E6 E1          0422*       pop hl
0480E7 C1          0423*       pop bc
0480E8             0424*   
0480E8             0425*   ; all done
0480E8 C9          0426*       ret
0480E9             0427*   
0480E9             0428*   
0480E9             0429*   ; print bytes from an address to the screen in binary format
0480E9             0430*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0480E9             0431*   ; outputs: values of each byte printed to screen separated by spaces
0480E9             0432*   ; destroys: nothing
0480E9             0433*   dumpMemoryBin:
0480E9             0434*   ; save all registers to the stack
0480E9 F5          0435*       push af
0480EA C5          0436*       push bc
0480EB D5          0437*       push de
0480EC E5          0438*       push hl
0480ED DD E5       0439*       push ix
0480EF FD E5       0440*       push iy
0480F1             0441*   
0480F1             0442*   ; set b to be our loop counter
0480F1 47          0443*       ld b,a
0480F2             0444*   @loop:
0480F2             0445*   ; print the byte
0480F2 7E          0446*       ld a,(hl)
0480F3 E5          0447*       push hl
0480F4 C5          0448*       push bc
0480F5 CD 6A 02 04 0449*       call printBin8
0480F9 C1          0450*       pop bc
0480FA             0451*   ; print a space
0480FA 3E 20       0452*       ld a,' '
0480FC 5B D7       0453*       rst.lil 10h
0480FE E1          0454*       pop hl
0480FF 23          0455*       inc hl
048100 10 F0       0456*       djnz @loop
048102 CD 78 00 04 0457*       call printNewLine
048106             0458*   
048106             0459*   ; restore everything
048106 FD E1       0460*       pop iy
048108 DD E1       0461*       pop ix
04810A E1          0462*       pop hl
04810B D1          0463*       pop de
04810C C1          0464*       pop bc
04810D F1          0465*       pop af
04810E             0466*   ; all done
04810E C9          0467*       ret
04810F             0468*   
04810F             0469*   ; print bytes from an address to the screen in binary format
04810F             0470*   ; with the bits of each byte in reverse order (lsb first)
04810F             0471*   ; inputs: hl = address of first byte to print, a = number of bytes to print
04810F             0472*   ; outputs: values of each byte printed to screen separated by spaces
04810F             0473*   ; destroys: nothing
04810F             0474*   dumpMemoryBinRev:
04810F             0475*   ; save all registers to the stack
04810F F5          0476*       push af
048110 C5          0477*       push bc
048111 D5          0478*       push de
048112 E5          0479*       push hl
048113 DD E5       0480*       push ix
048115 FD E5       0481*       push iy
048117             0482*   
048117             0483*   ; set b to be our loop counter
048117 47          0484*       ld b,a
048118             0485*   @loop:
048118             0486*   ; print the byte
048118 7E          0487*       ld a,(hl)
048119 E5          0488*       push hl
04811A C5          0489*       push bc
04811B CD 8F 02 04 0490*       call printBin8Rev
04811F C1          0491*       pop bc
048120             0492*   ; print a space
048120 3E 20       0493*       ld a,' '
048122 5B D7       0494*       rst.lil 10h
048124 E1          0495*       pop hl
048125 23          0496*       inc hl
048126 10 F0       0497*       djnz @loop
048128 CD 78 00 04 0498*       call printNewLine
04812C             0499*   
04812C             0500*   ; restore everything
04812C FD E1       0501*       pop iy
04812E DD E1       0502*       pop ix
048130 E1          0503*       pop hl
048131 D1          0504*       pop de
048132 C1          0505*       pop bc
048133 F1          0506*       pop af
048134             0507*   ; all done
048134 C9          0508*       ret
048135             0509*   
048135             0510*   DEBUG_PRINT:
048135             0511*       PUSH_ALL
048135 08          0001*M1     ex af,af'
048136 D9          0002*M1     exx
048137 F5          0003*M1     push af
048138 E5          0004*M1     push hl
048139 C5          0005*M1     push bc
04813A D5          0006*M1     push de
04813B             0007*M1 
04813B 08          0008*M1     ex af,af'
04813C D9          0009*M1     exx
04813D F5          0010*M1     push af
04813E E5          0011*M1     push hl
04813F C5          0012*M1     push bc
048140 D5          0013*M1     push de
048141 DD E5       0014*M1     push ix
048143 FD E5       0015*M1     push iy
048145 0E 00       0512*       ld c,0 ; X
048147 06 00       0513*       ld b,0 ; Y
048149 CD 8C 12 04 0514*       call vdu_move_cursor
04814D             0515*       POP_ALL
04814D FD E1       0001*M1     pop iy
04814F DD E1       0002*M1     pop ix
048151 D1          0003*M1     pop de
048152 C1          0004*M1     pop bc
048153 E1          0005*M1     pop hl
048154 F1          0006*M1     pop af
048155 08          0007*M1     ex af,af'
048156 D9          0008*M1     exx
048157             0009*M1 
048157 D1          0010*M1     pop de
048158 C1          0011*M1     pop bc
048159 E1          0012*M1     pop hl
04815A F1          0013*M1     pop af
04815B 08          0014*M1     ex af,af'
04815C D9          0015*M1     exx
04815D             0516*       PUSH_ALL
04815D 08          0001*M1     ex af,af'
04815E D9          0002*M1     exx
04815F F5          0003*M1     push af
048160 E5          0004*M1     push hl
048161 C5          0005*M1     push bc
048162 D5          0006*M1     push de
048163             0007*M1 
048163 08          0008*M1     ex af,af'
048164 D9          0009*M1     exx
048165 F5          0010*M1     push af
048166 E5          0011*M1     push hl
048167 C5          0012*M1     push bc
048168 D5          0013*M1     push de
048169 DD E5       0014*M1     push ix
04816B FD E5       0015*M1     push iy
04816D CD 70 80 04 0517*       call dumpFlags
048171             0518*       POP_ALL
048171 FD E1       0001*M1     pop iy
048173 DD E1       0002*M1     pop ix
048175 D1          0003*M1     pop de
048176 C1          0004*M1     pop bc
048177 E1          0005*M1     pop hl
048178 F1          0006*M1     pop af
048179 08          0007*M1     ex af,af'
04817A D9          0008*M1     exx
04817B             0009*M1 
04817B D1          0010*M1     pop de
04817C C1          0011*M1     pop bc
04817D E1          0012*M1     pop hl
04817E F1          0013*M1     pop af
04817F 08          0014*M1     ex af,af'
048180 D9          0015*M1     exx
048181             0519*       PUSH_ALL
048181 08          0001*M1     ex af,af'
048182 D9          0002*M1     exx
048183 F5          0003*M1     push af
048184 E5          0004*M1     push hl
048185 C5          0005*M1     push bc
048186 D5          0006*M1     push de
048187             0007*M1 
048187 08          0008*M1     ex af,af'
048188 D9          0009*M1     exx
048189 F5          0010*M1     push af
04818A E5          0011*M1     push hl
04818B C5          0012*M1     push bc
04818C D5          0013*M1     push de
04818D DD E5       0014*M1     push ix
04818F FD E5       0015*M1     push iy
048191 CD 5C 7F 04 0520*       call dumpRegistersHex
048195             0521*       ; call waitKeypress
048195             0522*       POP_ALL
048195 FD E1       0001*M1     pop iy
048197 DD E1       0002*M1     pop ix
048199 D1          0003*M1     pop de
04819A C1          0004*M1     pop bc
04819B E1          0005*M1     pop hl
04819C F1          0006*M1     pop af
04819D 08          0007*M1     ex af,af'
04819E D9          0008*M1     exx
04819F             0009*M1 
04819F D1          0010*M1     pop de
0481A0 C1          0011*M1     pop bc
0481A1 E1          0012*M1     pop hl
0481A2 F1          0013*M1     pop af
0481A3 08          0014*M1     ex af,af'
0481A4 D9          0015*M1     exx
0481A5 C9          0523*       ret
0481A6             0524*   
0481A6             0525*   DEBUG_PRINT_TILE_TABLE:
0481A6             0526*       PUSH_ALL
0481A6 08          0001*M1     ex af,af'
0481A7 D9          0002*M1     exx
0481A8 F5          0003*M1     push af
0481A9 E5          0004*M1     push hl
0481AA C5          0005*M1     push bc
0481AB D5          0006*M1     push de
0481AC             0007*M1 
0481AC 08          0008*M1     ex af,af'
0481AD D9          0009*M1     exx
0481AE F5          0010*M1     push af
0481AF E5          0011*M1     push hl
0481B0 C5          0012*M1     push bc
0481B1 D5          0013*M1     push de
0481B2 DD E5       0014*M1     push ix
0481B4 FD E5       0015*M1     push iy
0481B6 CD 78 00 04 0527*       call printNewLine
0481BA DD 21 A9 74 0528*       ld ix,tile_stack
       04          
0481BF DD 37 00    0529*       ld ix,(ix)
0481C2 CD 5B 86 04 0530*       call dump_tile_record
0481C6 CD 78 00 04 0531*       call printNewLine
0481CA             0532*       POP_ALL
0481CA FD E1       0001*M1     pop iy
0481CC DD E1       0002*M1     pop ix
0481CE D1          0003*M1     pop de
0481CF C1          0004*M1     pop bc
0481D0 E1          0005*M1     pop hl
0481D1 F1          0006*M1     pop af
0481D2 08          0007*M1     ex af,af'
0481D3 D9          0008*M1     exx
0481D4             0009*M1 
0481D4 D1          0010*M1     pop de
0481D5 C1          0011*M1     pop bc
0481D6 E1          0012*M1     pop hl
0481D7 F1          0013*M1     pop af
0481D8 08          0014*M1     ex af,af'
0481D9 D9          0015*M1     exx
0481DA C9          0533*       ret
0481DB             0534*   ; end DEBUG_PRINT_TILE_TABLE
0481DB             0535*   
0481DB             0536*   DEBUG_PRINT_TABLE:
0481DB             0537*       PUSH_ALL
0481DB 08          0001*M1     ex af,af'
0481DC D9          0002*M1     exx
0481DD F5          0003*M1     push af
0481DE E5          0004*M1     push hl
0481DF C5          0005*M1     push bc
0481E0 D5          0006*M1     push de
0481E1             0007*M1 
0481E1 08          0008*M1     ex af,af'
0481E2 D9          0009*M1     exx
0481E3 F5          0010*M1     push af
0481E4 E5          0011*M1     push hl
0481E5 C5          0012*M1     push bc
0481E6 D5          0013*M1     push de
0481E7 DD E5       0014*M1     push ix
0481E9 FD E5       0015*M1     push iy
0481EB CD 78 00 04 0538*       call printNewLine
0481EF CD 93 84 04 0539*       call dump_sprite_record
0481F3 CD 78 00 04 0540*       call printNewLine
0481F7 CD 78 00 04 0541*       call printNewLine
0481FB             0542*   
0481FB FD E5       0543*       push iy
0481FD DD E1       0544*       pop ix
0481FF CD 93 84 04 0545*       call dump_sprite_record
048203 CD 78 00 04 0546*       call printNewLine
048207 CD 78 00 04 0547*       call printNewLine
04820B             0548*       POP_ALL
04820B FD E1       0001*M1     pop iy
04820D DD E1       0002*M1     pop ix
04820F D1          0003*M1     pop de
048210 C1          0004*M1     pop bc
048211 E1          0005*M1     pop hl
048212 F1          0006*M1     pop af
048213 08          0007*M1     ex af,af'
048214 D9          0008*M1     exx
048215             0009*M1 
048215 D1          0010*M1     pop de
048216 C1          0011*M1     pop bc
048217 E1          0012*M1     pop hl
048218 F1          0013*M1     pop af
048219 08          0014*M1     ex af,af'
04821A D9          0015*M1     exx
04821B C9          0549*       RET
04821C             0550*   
04821C             0551*   DEBUG_WAITKEYPRESS:
04821C             0552*       PUSH_ALL
04821C 08          0001*M1     ex af,af'
04821D D9          0002*M1     exx
04821E F5          0003*M1     push af
04821F E5          0004*M1     push hl
048220 C5          0005*M1     push bc
048221 D5          0006*M1     push de
048222             0007*M1 
048222 08          0008*M1     ex af,af'
048223 D9          0009*M1     exx
048224 F5          0010*M1     push af
048225 E5          0011*M1     push hl
048226 C5          0012*M1     push bc
048227 D5          0013*M1     push de
048228 DD E5       0014*M1     push ix
04822A FD E5       0015*M1     push iy
04822C CD 56 03 04 0553*       call waitKeypress
048230             0554*       POP_ALL
048230 FD E1       0001*M1     pop iy
048232 DD E1       0002*M1     pop ix
048234 D1          0003*M1     pop de
048235 C1          0004*M1     pop bc
048236 E1          0005*M1     pop hl
048237 F1          0006*M1     pop af
048238 08          0007*M1     ex af,af'
048239 D9          0008*M1     exx
04823A             0009*M1 
04823A D1          0010*M1     pop de
04823B C1          0011*M1     pop bc
04823C E1          0012*M1     pop hl
04823D F1          0013*M1     pop af
04823E 08          0014*M1     ex af,af'
04823F D9          0015*M1     exx
048240 C9          0555*       RET
048241             0556*   
048241             0557*   DEBUG_PRINT_FIELDS:
048241             0558*       ; PUSH_ALL
048241 01 00 00 00 0559*       ld bc,0
048245 4F          0560*       ld c,a
048246 DD 21 07 89 0561*       ld ix,table_base
       04          
04824B DD 09       0562*       add ix,bc
04824D 06 14       0563*       ld b,table_num_records
04824F             0564*   @@:
04824F DD E5       0565*       push ix
048251 E1          0566*       pop hl
048252 C5          0567*       push bc ; save loop counter
048253 3E 01       0568*       ld a,1 ; print one byte
048255 CD C1 80 04 0569*       call dumpMemoryHex
048259 ED 32 40    0570*       lea ix,ix+table_record_size
04825C C1          0571*       pop bc ; restore loop counter
04825D 10 F0       0572*       djnz @b
04825F             0573*       ; POP_ALL
04825F C9          0574*       ret
048260             0575*   
048260             0576*   DEBUG_PRINT_TILE_STACK:
048260             0577*       PUSH_ALL
048260 08          0001*M1     ex af,af'
048261 D9          0002*M1     exx
048262 F5          0003*M1     push af
048263 E5          0004*M1     push hl
048264 C5          0005*M1     push bc
048265 D5          0006*M1     push de
048266             0007*M1 
048266 08          0008*M1     ex af,af'
048267 D9          0009*M1     exx
048268 F5          0010*M1     push af
048269 E5          0011*M1     push hl
04826A C5          0012*M1     push bc
04826B D5          0013*M1     push de
04826C DD E5       0014*M1     push ix
04826E FD E5       0015*M1     push iy
048270 01 00 00 00 0578*       ld bc,0
048274 11 00 00 00 0579*       ld de,0
048278 CD 25 13 04 0580*       call vdu_set_gfx_origin
04827C 01 00 00 00 0581*       ld bc,0
048280 11 00 00 00 0582*       ld de,0
048284 DD 21 7F 00 0583*       ld ix,127
       00          
048289 FD 21 F0 00 0584*       ld iy,240
       00          
04828E CD 40 13 04 0585*       call vdu_set_gfx_viewport
048292 CD B3 12 04 0586*       call vdu_clg
048296 CD 55 12 04 0587*       call vdu_home_cursor
04829A CD 78 00 04 0588*       call printNewLine
04829E CD 78 00 04 0589*       call printNewLine
0482A2 2A AC 77 04 0590*       ld hl,(tile_stack_pointer)
0482A6 CD FC 7D 04 0591*       call printHexUHL
0482AA CD 78 00 04 0592*       call printNewLine
0482AE 3A B2 77 04 0593*       ld a,(num_active_tiles)
0482B2 CD E2 7D 04 0594*       call printHexA
0482B6 CD 78 00 04 0595*       call printNewLine
0482BA A7          0596*       and a
0482BB CA E9 82 04 0597*       jp z,@done
0482BF DD 21 A9 74 0598*       ld ix,tile_stack
       04          
0482C4 3A B2 77 04 0599*       ld a,(num_active_tiles)
0482C8 47          0600*       ld b,a
0482C9             0601*   @loop:
0482C9 C5          0602*       push bc
0482CA DD E5       0603*       push ix
0482CC DD 37 00    0604*       ld ix,(ix)
0482CF DD 7E 00    0605*       ld a,(ix+tile_id)
0482D2 CD E2 7D 04 0606*       call printHexA
0482D6 DD 7E 16    0607*       ld a,(ix+tile_type)
0482D9 CD E2 7D 04 0608*       call printHexA
0482DD CD 78 00 04 0609*       call printNewLine
0482E1 DD E1       0610*       pop ix
0482E3 ED 32 03    0611*       lea ix,ix+3
0482E6 C1          0612*       pop bc
0482E7 10 E0       0613*       djnz @loop
0482E9             0614*   @done:
0482E9             0615*       POP_ALL
0482E9 FD E1       0001*M1     pop iy
0482EB DD E1       0002*M1     pop ix
0482ED D1          0003*M1     pop de
0482EE C1          0004*M1     pop bc
0482EF E1          0005*M1     pop hl
0482F0 F1          0006*M1     pop af
0482F1 08          0007*M1     ex af,af'
0482F2 D9          0008*M1     exx
0482F3             0009*M1 
0482F3 D1          0010*M1     pop de
0482F4 C1          0011*M1     pop bc
0482F5 E1          0012*M1     pop hl
0482F6 F1          0013*M1     pop af
0482F7 08          0014*M1     ex af,af'
0482F8 D9          0015*M1     exx
0482F9 C9          0616*       ret
0482FA             0617*   
0482FA             0618*   DEBUG_DUMP_PLAYER_RECORD:
0482FA             0619*       PUSH_ALL
0482FA 08          0001*M1     ex af,af'
0482FB D9          0002*M1     exx
0482FC F5          0003*M1     push af
0482FD E5          0004*M1     push hl
0482FE C5          0005*M1     push bc
0482FF D5          0006*M1     push de
048300             0007*M1 
048300 08          0008*M1     ex af,af'
048301 D9          0009*M1     exx
048302 F5          0010*M1     push af
048303 E5          0011*M1     push hl
048304 C5          0012*M1     push bc
048305 D5          0013*M1     push de
048306 DD E5       0014*M1     push ix
048308 FD E5       0015*M1     push iy
04830A CD 78 00 04 0620*       call printNewLine
04830E CD C8 87 04 0621*       CALL dump_player_record
048312 CD 78 00 04 0622*       call printNewLine
048316             0623*       POP_ALL
048316 FD E1       0001*M1     pop iy
048318 DD E1       0002*M1     pop ix
04831A D1          0003*M1     pop de
04831B C1          0004*M1     pop bc
04831C E1          0005*M1     pop hl
04831D F1          0006*M1     pop af
04831E 08          0007*M1     ex af,af'
04831F D9          0008*M1     exx
048320             0009*M1 
048320 D1          0010*M1     pop de
048321 C1          0011*M1     pop bc
048322 E1          0012*M1     pop hl
048323 F1          0013*M1     pop af
048324 08          0014*M1     ex af,af'
048325 D9          0015*M1     exx
048326 C9          0624*       RET
048327             0625*   
048327             0626*   DEBUG_PRINT_SHIELDS:
048327             0627*       PUSH_ALL
048327 08          0001*M1     ex af,af'
048328 D9          0002*M1     exx
048329 F5          0003*M1     push af
04832A E5          0004*M1     push hl
04832B C5          0005*M1     push bc
04832C D5          0006*M1     push de
04832D             0007*M1 
04832D 08          0008*M1     ex af,af'
04832E D9          0009*M1     exx
04832F F5          0010*M1     push af
048330 E5          0011*M1     push hl
048331 C5          0012*M1     push bc
048332 D5          0013*M1     push de
048333 DD E5       0014*M1     push ix
048335 FD E5       0015*M1     push iy
048337 0E 00       0628*       ld c,0 ; X
048339 06 00       0629*       ld b,0 ; Y
04833B CD 8C 12 04 0630*       call vdu_move_cursor
04833F             0631*   
04833F CD 70 80 04 0632*       call dumpFlags
048343 CD 5C 7F 04 0633*       call dumpRegistersHex
048347             0634*   
048347 DD 21 C1 6D 0635*       ld ix,bar_shields
       04          
04834C             0636*   
04834C CD 5C 00 04 0637*       call printInline
048350 76 61 6C 3A 0638*       asciz "val:"
       00          
048355 DD 27 00    0639*       ld hl,(ix+bar_val)
048358 CD C8 00 04 0640*       call printDec
04835C CD 78 00 04 0641*       call printNewLine
048360             0642*   
048360 CD 5C 00 04 0643*       call printInline
048364 78 30 20 3A 0644*       asciz "x0 :"
       00          
048369 DD 27 03    0645*       ld hl,(ix+bar_x0)
04836C CD C8 00 04 0646*       call printDec
048370 CD 78 00 04 0647*       call printNewLine
048374             0648*   
048374 CD 5C 00 04 0649*       call printInline
048378 79 30 20 3A 0650*       asciz "y0 :"
       00          
04837D DD 27 06    0651*       ld hl,(ix+bar_y0)
048380 CD C8 00 04 0652*       call printDec
048384 CD 78 00 04 0653*       call printNewLine
048388             0654*   
048388 CD 5C 00 04 0655*       call printInline
04838C 78 31 20 3A 0656*       asciz "x1 :"
       00          
048391 DD 27 09    0657*       ld hl,(ix+bar_x1)
048394 CD C8 00 04 0658*       call printDec
048398 CD 78 00 04 0659*       call printNewLine
04839C             0660*   
04839C CD 5C 00 04 0661*       call printInline
0483A0 79 31 20 3A 0662*       asciz "y1 :"
       00          
0483A5 DD 27 0C    0663*       ld hl,(ix+bar_y1)
0483A8 CD C8 00 04 0664*       call printDec
0483AC CD 78 00 04 0665*       call printNewLine
0483B0             0666*   
0483B0 CD 5C 00 04 0667*       call printInline
0483B4 79 20 20 3A 0668*       asciz "y  :"
       00          
0483B9 DD 27 0F    0669*       ld hl,(ix+bar_y)
0483BC CD C8 00 04 0670*       call printDec
0483C0 CD 78 00 04 0671*       call printNewLine
0483C4             0672*   
0483C4             0673*       POP_ALL
0483C4 FD E1       0001*M1     pop iy
0483C6 DD E1       0002*M1     pop ix
0483C8 D1          0003*M1     pop de
0483C9 C1          0004*M1     pop bc
0483CA E1          0005*M1     pop hl
0483CB F1          0006*M1     pop af
0483CC 08          0007*M1     ex af,af'
0483CD D9          0008*M1     exx
0483CE             0009*M1 
0483CE D1          0010*M1     pop de
0483CF C1          0011*M1     pop bc
0483D0 E1          0012*M1     pop hl
0483D1 F1          0013*M1     pop af
0483D2 08          0014*M1     ex af,af'
0483D3 D9          0015*M1     exx
0483D4             0674*       ; call waitKeypress
0483D4 C9          0675*       ret
0483D5             0676*   ; end DEBUG_PRINT_SHIELDS
0483D5             0677*   
0483D5             0678*   DEBUG_PRINT_BAR_UPDATE:
0483D5 0E 00       0679*       ld c,0 ; X
0483D7 06 00       0680*       ld b,0 ; Y
0483D9 CD 8C 12 04 0681*       call vdu_move_cursor
0483DD             0682*   
0483DD CD 5C 00 04 0683*       call printInline
0483E1 78 30 20 20 0684*       asciz "x0  :"
       3A 00       
0483E7 21 00 00 00 0685*       ld hl,0 ; clear hlu
0483EB DD 6E 01    0686*       ld l,(ix+@x0-@cmd0+0)
0483EE DD 66 02    0687*       ld h,(ix+@x0-@cmd0+1)
0483F1 CD C8 00 04 0688*       call printDec
0483F5 CD 78 00 04 0689*       call printNewLine
0483F9             0690*   
0483F9 CD 5C 00 04 0691*       call printInline
0483FD 79 30 20 20 0692*       asciz "y0  :"
       3A 00       
048403 21 00 00 00 0693*       ld hl,0 ; clear hlu
048407 DD 6E 07    0694*       ld l,(ix+@y0-@cmd0+0)
04840A DD 66 08    0695*       ld h,(ix+@y0-@cmd0+1)
04840D CD C8 00 04 0696*       call printDec
048411 CD 78 00 04 0697*       call printNewLine
048415             0698*   
048415 CD 5C 00 04 0699*       call printInline
048419 78 31 20 20 0700*       asciz "x1  :"
       3A 00       
04841F 21 00 00 00 0701*       ld hl,0 ; clear hlu
048423 DD 6E 05    0702*       ld l,(ix+@x1-@cmd0+0)
048426 DD 66 06    0703*       ld h,(ix+@x1-@cmd0+1)
048429 CD C8 00 04 0704*       call printDec
04842D CD 78 00 04 0705*       call printNewLine
048431             0706*   
048431 CD 5C 00 04 0707*       call printInline
048435 79 31 20 20 0708*       asciz "y1  :"
       3A 00       
04843B 21 00 00 00 0709*       ld hl,0 ; clear hlu
04843F DD 6E 03    0710*       ld l,(ix+@y1-@cmd0+0)
048442 DD 66 04    0711*       ld h,(ix+@y1-@cmd0+1)
048445 CD C8 00 04 0712*       call printDec
048449 CD 78 00 04 0713*       call printNewLine
04844D             0714*   
04844D CD 5C 00 04 0715*       call printInline
048451 78 32 20 20 0716*       asciz "x2  :"
       3A 00       
048457 21 00 00 00 0717*       ld hl,0 ; clear hlu
04845B DD 6E 0B    0718*       ld l,(ix+@x2-@cmd0+0)
04845E DD 66 0C    0719*       ld h,(ix+@x2-@cmd0+1)
048461 CD C8 00 04 0720*       call printDec
048465 CD 78 00 04 0721*       call printNewLine
048469             0722*   
048469 CD 5C 00 04 0723*       call printInline
04846D 58 32 20 79 0724*       asciz "X2 y2:"
       32 3A 00    
048474 21 00 00 00 0725*       ld hl,0 ; clear hlu
048478 DD 6E 0D    0726*       ld l,(ix+@y2-@cmd0+0)
04847B DD 66 0E    0727*       ld h,(ix+@y2-@cmd0+1)
04847E CD C8 00 04 0728*       call printDec
048482 C9          0729*       ret
048483 18          0730*   @cmd0:   db 24
048484 00 00       0731*   @x0: 	dw 0x0000
048486 00 00       0732*   @y1: 	dw 0x0000
048488 00 00       0733*   @x1: 	dw 0x0000
04848A 00 00       0734*   @y0: 	dw 0x0000
04848C             0735*   ; plot bitmap command
04848C 19          0736*   @cmd1:   db 25 ; stomped on by @y0 load
04848D ED          0737*   @mode:  db plot_bmp+dr_abs_fg ; 0xED stomped on by @x2 load
04848E 00 00       0738*   @x2: 	dw 0x0000
048490 00 00       0739*   @y2: 	dw 0x0000
048492 00          0740*   @end:  db 0x00 ; padding
048493             0741*   ; end DEBUG_PRINT_BAR_UPDATE
048493             0742*   
048493             0743*   
048493             0744*   dump_sprite_record:
048493             0745*       ; call vdu_home_cursor
048493 CD 5C 00 04 0746*       call printInline
048497 69 64 20 20 0747*       asciz "id  : "
       3A 20 00    
04849E DD 7E 00    0748*       ld a,(ix+sprite_id)
0484A1 CD E2 7D 04 0749*       call printHexA
0484A5             0750*   
0484A5 CD 5C 00 04 0751*       call printInline
0484A9 0D 0A 78 20 0752*       asciz "\r\nx   :"
       20 20 3A 00 
0484B1 DD 27 01    0753*       ld hl,(ix+sprite_x)
0484B4 CD ED 01 04 0754*       call print_s168_hl
0484B8             0755*   
0484B8 CD 5C 00 04 0756*       call printInline
0484BC 0D 0A 79 20 0757*       asciz "\r\ny   :"
       20 20 3A 00 
0484C4 DD 27 04    0758*       ld hl,(ix+sprite_y)
0484C7 CD ED 01 04 0759*       call print_s168_hl
0484CB             0760*   
0484CB CD 5C 00 04 0761*       call printInline
0484CF 0D 0A 78 76 0762*       asciz "\r\nxv  :"
       20 20 3A 00 
0484D7 DD 27 07    0763*       ld hl,(ix+sprite_xvel)
0484DA CD ED 01 04 0764*       call print_s168_hl
0484DE             0765*   
0484DE CD 5C 00 04 0766*       call printInline
0484E2 0D 0A 79 76 0767*       asciz "\r\nyv  :"
       20 20 3A 00 
0484EA DD 27 0A    0768*       ld hl,(ix+sprite_yvel)
0484ED CD ED 01 04 0769*       call print_s168_hl
0484F1             0770*   
0484F1 CD 5C 00 04 0771*       call printInline
0484F5 0D 0A 76 20 0772*       asciz "\r\nv   :"
       20 20 3A 00 
0484FD DD 27 0D    0773*       ld hl,(ix+sprite_vel)
048500 CD ED 01 04 0774*       call print_s168_hl
048504             0775*   
048504 CD 5C 00 04 0776*       call printInline
048508 0D 0A 68 64 0777*       asciz "\r\nhdg :"
       67 20 3A 00 
048510 DD 27 10    0778*       ld hl,(ix+sprite_heading)
048513 CD ED 01 04 0779*       call print_s168_hl
048517             0780*   
048517 CD 5C 00 04 0781*       call printInline
04851B 0D 0A 6F 72 0782*       asciz "\r\nori :"
       69 20 3A 00 
048523 DD 27 13    0783*       ld hl,(ix+sprite_orientation)
048526 CD ED 01 04 0784*       call print_s168_hl
04852A             0785*   
04852A CD 5C 00 04 0786*       call printInline
04852E 0D 0A 74 79 0787*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
048537 DD 7E 16    0788*       ld a,(ix+sprite_type)
04853A CD E2 7D 04 0789*       call printHexA
04853E             0790*   
04853E CD 5C 00 04 0791*       call printInline
048542 0D 0A 42 49 0792*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
04854B DD 27 17    0793*       ld hl,(ix+sprite_base_bufferId)
04854E CD 9C 00 04 0794*       call printHex24
048552             0795*   
048552 CD 5C 00 04 0796*       call printInline
048556 0D 0A 6D 50 0797*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
04855F DD 27 1A    0798*       ld hl,(ix+sprite_move_program)
048562 CD 9C 00 04 0799*       call printHex24
048566             0800*   
048566 CD 5C 00 04 0801*       call printInline
04856A 0D 0A 63 6F 0802*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
048573 DD 7E 1D    0803*       ld a,(ix+sprite_collisions)
048576 CD 6A 02 04 0804*       call printBin8
04857A             0805*   
04857A CD 5C 00 04 0806*       call printInline
04857E 0D 0A 73 7A 0807*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
048587 DD 7E 1E    0808*       ld a,(ix+sprite_dim_x)
04858A CD E2 7D 04 0809*       call printHexA
04858E             0810*   
04858E CD 5C 00 04 0811*       call printInline
048592 0D 0A 73 7A 0812*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
04859B DD 7E 1F    0813*       ld a,(ix+sprite_dim_y)
04859E CD E2 7D 04 0814*       call printHexA
0485A2             0815*   
0485A2 CD 5C 00 04 0816*       call printInline
0485A6 0D 0A 23 6F 0817*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
0485AF DD 7E 20    0818*       ld a,(ix+sprite_num_orientations)
0485B2 CD E2 7D 04 0819*       call printHexA
0485B6             0820*   
0485B6 CD 5C 00 04 0821*       call printInline
0485BA 0D 0A 23 61 0822*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
0485C3 DD 7E 21    0823*       ld a,(ix+sprite_num_animations)
0485C6 CD E2 7D 04 0824*       call printHexA
0485CA             0825*   
0485CA CD 5C 00 04 0826*       call printInline
0485CE 0D 0A 61 6E 0827*       asciz "\r\nani : "
       69 20 3A 20 
       00          
0485D7 DD 7E 22    0828*       ld a,(ix+sprite_animation)
0485DA CD E2 7D 04 0829*       call printHexA
0485DE             0830*   
0485DE CD 5C 00 04 0831*       call printInline
0485E2 0D 0A 61 6E 0832*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
0485EB DD 7E 23    0833*       ld a,(ix+sprite_animation_timer)
0485EE CD E2 7D 04 0834*       call printHexA
0485F2             0835*   
0485F2 CD 5C 00 04 0836*       call printInline
0485F6 0D 0A 6D 76 0837*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
0485FF DD 7E 24    0838*       ld a,(ix+sprite_move_timer)
048602 CD E2 7D 04 0839*       call printHexA
048606             0840*   
048606 CD 5C 00 04 0841*       call printInline
04860A 0D 0A 6D 76 0842*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
048613 DD 7E 25    0843*       ld a,(ix+sprite_move_step)
048616 CD E2 7D 04 0844*       call printHexA
04861A             0845*   
04861A CD 5C 00 04 0846*       call printInline
04861E 0D 0A 70 74 0847*       asciz "\r\npts : "
       73 20 3A 20 
       00          
048627 DD 7E 26    0848*       ld a,(ix+sprite_points)
04862A CD E2 7D 04 0849*       call printHexA
04862E             0850*   
04862E CD 5C 00 04 0851*       call printInline
048632 0D 0A 64 6D 0852*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
04863B DD 7E 27    0853*       ld a,(ix+sprite_shield_damage)
04863E CD E2 7D 04 0854*       call printHexA
048642             0855*   
048642 CD 5C 00 04 0856*       call printInline
048646 0D 0A 66 72 0857*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
04864F DD 7E 28    0858*       ld a,(ix+sprite_frame)
048652 CD E2 7D 04 0859*       call printHexA
048656             0860*   
048656 CD 78 00 04 0861*       call printNewLine
04865A             0862*   
04865A             0863*       ; call waitKeypress
04865A C9          0864*       ret
04865B             0865*   
04865B             0866*   dump_tile_record:
04865B CD 5C 00 04 0867*       call printInline
04865F 69 64 20 20 0868*       asciz "id  : "
       3A 20 00    
048666 DD 7E 00    0869*       ld a,(ix+tile_id)
048669 CD E2 7D 04 0870*       call printHexA
04866D             0871*   
04866D CD 5C 00 04 0872*       call printInline
048671 0D 0A 78 20 0873*       asciz "\r\nx   :"
       20 20 3A 00 
048679 DD 27 01    0874*       ld hl,(ix+tile_x)
04867C CD ED 01 04 0875*       call print_s168_hl
048680             0876*   
048680 CD 5C 00 04 0877*       call printInline
048684 0D 0A 79 20 0878*       asciz "\r\ny   :"
       20 20 3A 00 
04868C DD 27 04    0879*       ld hl,(ix+tile_y)
04868F CD ED 01 04 0880*       call print_s168_hl
048693             0881*   
048693             0882*       ; call printInline
048693             0883*       ; asciz "\r\nxv  :"
048693             0884*       ; ld hl,(ix+tile_xvel)
048693             0885*       ; call print_s168_hl
048693             0886*   
048693             0887*       ; call printInline
048693             0888*       ; asciz "\r\nyv  :"
048693             0889*       ; ld hl,(ix+tile_yvel)
048693             0890*       ; call print_s168_hl
048693             0891*   
048693             0892*       ; call printInline
048693             0893*       ; asciz "\r\nv   :"
048693             0894*       ; ld hl,(ix+tile_vel)
048693             0895*       ; call print_s168_hl
048693             0896*   
048693             0897*       ; call printInline
048693             0898*       ; asciz "\r\nhdg :"
048693             0899*       ; ld hl,(ix+tile_heading)
048693             0900*       ; call print_s168_hl
048693             0901*   
048693             0902*       ; call printInline
048693             0903*       ; asciz "\r\nori :"
048693             0904*       ; ld hl,(ix+tile_orientation)
048693             0905*       ; call print_s168_hl
048693             0906*   
048693 CD 5C 00 04 0907*       call printInline
048697 0D 0A 74 79 0908*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
0486A0 DD 7E 16    0909*       ld a,(ix+tile_type)
0486A3 CD E2 7D 04 0910*       call printHexA
0486A7             0911*   
0486A7 CD 5C 00 04 0912*       call printInline
0486AB 0D 0A 42 49 0913*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
0486B4 DD 27 17    0914*       ld hl,(ix+tile_base_bufferId)
0486B7 CD 9C 00 04 0915*       call printHex24
0486BB             0916*   
0486BB CD 5C 00 04 0917*       call printInline
0486BF 0D 0A 6D 50 0918*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
0486C8 DD 27 1A    0919*       ld hl,(ix+tile_move_program)
0486CB CD 9C 00 04 0920*       call printHex24
0486CF             0921*   
0486CF CD 5C 00 04 0922*       call printInline
0486D3 0D 0A 63 6F 0923*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
0486DC DD 7E 1D    0924*       ld a,(ix+tile_collisions)
0486DF CD 6A 02 04 0925*       call printBin8
0486E3             0926*   
0486E3 CD 5C 00 04 0927*       call printInline
0486E7 0D 0A 73 7A 0928*       asciz "\r\nszx : "
       78 20 3A 20 
       00          
0486F0 DD 7E 1E    0929*       ld a,(ix+tile_dim_x)
0486F3 CD E2 7D 04 0930*       call printHexA
0486F7             0931*   
0486F7 CD 5C 00 04 0932*       call printInline
0486FB 0D 0A 73 7A 0933*       asciz "\r\nszy : "
       79 20 3A 20 
       00          
048704 DD 7E 1F    0934*       ld a,(ix+tile_dim_y)
048707 CD E2 7D 04 0935*       call printHexA
04870B             0936*   
04870B CD 5C 00 04 0937*       call printInline
04870F 0D 0A 23 6F 0938*       asciz "\r\n#ori: "
       72 69 3A 20 
       00          
048718 DD 7E 20    0939*       ld a,(ix+tile_num_orientations)
04871B CD E2 7D 04 0940*       call printHexA
04871F             0941*   
04871F CD 5C 00 04 0942*       call printInline
048723 0D 0A 23 61 0943*       asciz "\r\n#ani: "
       6E 69 3A 20 
       00          
04872C DD 7E 21    0944*       ld a,(ix+tile_num_animations)
04872F CD E2 7D 04 0945*       call printHexA
048733             0946*   
048733 CD 5C 00 04 0947*       call printInline
048737 0D 0A 61 6E 0948*       asciz "\r\nani : "
       69 20 3A 20 
       00          
048740 DD 7E 22    0949*       ld a,(ix+tile_animation)
048743 CD E2 7D 04 0950*       call printHexA
048747             0951*   
048747 CD 5C 00 04 0952*       call printInline
04874B 0D 0A 61 6E 0953*       asciz "\r\nanit: "
       69 74 3A 20 
       00          
048754 DD 7E 23    0954*       ld a,(ix+tile_animation_timer)
048757 CD E2 7D 04 0955*       call printHexA
04875B             0956*   
04875B CD 5C 00 04 0957*       call printInline
04875F 0D 0A 6D 76 0958*       asciz "\r\nmvt : "
       74 20 3A 20 
       00          
048768 DD 7E 24    0959*       ld a,(ix+tile_move_timer)
04876B CD E2 7D 04 0960*       call printHexA
04876F             0961*   
04876F CD 5C 00 04 0962*       call printInline
048773 0D 0A 6D 76 0963*       asciz "\r\nmvs : "
       73 20 3A 20 
       00          
04877C DD 7E 25    0964*       ld a,(ix+tile_move_step)
04877F CD E2 7D 04 0965*       call printHexA
048783             0966*   
048783 CD 5C 00 04 0967*       call printInline
048787 0D 0A 70 74 0968*       asciz "\r\npts : "
       73 20 3A 20 
       00          
048790 DD 7E 26    0969*       ld a,(ix+tile_points)
048793 CD E2 7D 04 0970*       call printHexA
048797             0971*   
048797 CD 5C 00 04 0972*       call printInline
04879B 0D 0A 64 6D 0973*       asciz "\r\ndmg : "
       67 20 3A 20 
       00          
0487A4 DD 7E 27    0974*       ld a,(ix+tile_shield_damage)
0487A7 CD E2 7D 04 0975*       call printHexA
0487AB             0976*   
0487AB CD 5C 00 04 0977*       call printInline
0487AF 0D 0A 66 72 0978*       asciz "\r\nfrm : "
       6D 20 3A 20 
       00          
0487B8 DD 7E 28    0979*       ld a,(ix+tile_frame)
0487BB CD E2 7D 04 0980*       call printHexA
0487BF             0981*   
0487BF CD 78 00 04 0982*       call printNewLine
0487C3 CD 78 00 04 0983*       call printNewLine
0487C7             0984*   
0487C7             0985*       ; call waitKeypress
0487C7 C9          0986*       ret
0487C8             0987*   
0487C8             0988*   dump_player_record:
0487C8 DD 21 07 8A 0989*       ld ix,player_begin
       04          
0487CD             0990*   
0487CD CD 5C 00 04 0991*       call printInline
0487D1 69 64 20 20 0992*       asciz "id  : "
       3A 20 00    
0487D8 DD 7E 00    0993*       ld a,(ix+sprite_id)
0487DB CD E2 7D 04 0994*       call printHexA
0487DF             0995*   
0487DF CD 5C 00 04 0996*       call printInline
0487E3 0D 0A 78 20 0997*       asciz "\r\nx   :"
       20 20 3A 00 
0487EB DD 27 01    0998*       ld hl,(ix+sprite_x)
0487EE CD ED 01 04 0999*       call print_s168_hl
0487F2             1000*   
0487F2 CD 5C 00 04 1001*       call printInline
0487F6 0D 0A 79 20 1002*       asciz "\r\ny   :"
       20 20 3A 00 
0487FE DD 27 04    1003*       ld hl,(ix+sprite_y)
048801 CD ED 01 04 1004*       call print_s168_hl
048805             1005*   
048805 CD 5C 00 04 1006*       call printInline
048809 0D 0A 78 76 1007*       asciz "\r\nxv  :"
       20 20 3A 00 
048811 DD 27 07    1008*       ld hl,(ix+sprite_xvel)
048814 CD ED 01 04 1009*       call print_s168_hl
048818             1010*   
048818 CD 5C 00 04 1011*       call printInline
04881C 0D 0A 79 76 1012*       asciz "\r\nyv  :"
       20 20 3A 00 
048824 DD 27 0A    1013*       ld hl,(ix+sprite_yvel)
048827 CD ED 01 04 1014*       call print_s168_hl
04882B             1015*   
04882B CD 5C 00 04 1016*       call printInline
04882F 0D 0A 76 20 1017*       asciz "\r\nv   :"
       20 20 3A 00 
048837 DD 27 0D    1018*       ld hl,(ix+sprite_vel)
04883A CD ED 01 04 1019*       call print_s168_hl
04883E             1020*   
04883E CD 5C 00 04 1021*       call printInline
048842 0D 0A 68 64 1022*       asciz "\r\nhdg :"
       67 20 3A 00 
04884A DD 27 10    1023*       ld hl,(ix+sprite_heading)
04884D CD ED 01 04 1024*       call print_s168_hl
048851             1025*   
048851 CD 5C 00 04 1026*       call printInline
048855 0D 0A 6F 72 1027*       asciz "\r\nori :"
       69 20 3A 00 
04885D DD 27 13    1028*       ld hl,(ix+sprite_orientation)
048860 CD ED 01 04 1029*       call print_s168_hl
048864             1030*   
048864 CD 5C 00 04 1031*       call printInline
048868 0D 0A 74 79 1032*       asciz "\r\ntyp : "
       70 20 3A 20 
       00          
048871 DD 7E 16    1033*       ld a,(ix+sprite_type)
048874 CD E2 7D 04 1034*       call printHexA
048878             1035*   
048878 CD 5C 00 04 1036*       call printInline
04887C 0D 0A 42 49 1037*       asciz "\r\nBId : "
       64 20 3A 20 
       00          
048885 DD 27 17    1038*       ld hl,(ix+sprite_base_bufferId)
048888 CD 9C 00 04 1039*       call printHex24
04888C             1040*   
04888C CD 5C 00 04 1041*       call printInline
048890 0D 0A 6D 50 1042*       asciz "\r\nmPg : "
       67 20 3A 20 
       00          
048899 DD 27 1A    1043*       ld hl,(ix+sprite_move_program)
04889C CD 9C 00 04 1044*       call printHex24
0488A0             1045*   
0488A0 CD 5C 00 04 1046*       call printInline
0488A4 0D 0A 63 6F 1047*       asciz "\r\ncol : "
       6C 20 3A 20 
       00          
0488AD DD 7E 1D    1048*       ld a,(ix+sprite_collisions)
0488B0 CD 6A 02 04 1049*       call printBin8
0488B4             1050*   
0488B4             1051*       ; call printInline
0488B4             1052*       ; asciz "\r\nszx : "
0488B4             1053*       ; ld a,(ix+sprite_dim_x)
0488B4             1054*       ; call printHexA
0488B4             1055*   
0488B4             1056*       ; call printInline
0488B4             1057*       ; asciz "\r\nszy : "
0488B4             1058*       ; ld a,(ix+sprite_dim_y)
0488B4             1059*       ; call printHexA
0488B4             1060*   
0488B4             1061*       ; call printInline
0488B4             1062*       ; asciz "\r\n#ori: "
0488B4             1063*       ; ld a,(ix+sprite_num_orientations)
0488B4             1064*       ; call printHexA
0488B4             1065*   
0488B4             1066*       ; call printInline
0488B4             1067*       ; asciz "\r\n#ani: "
0488B4             1068*       ; ld a,(ix+sprite_num_animations)
0488B4             1069*       ; call printHexA
0488B4             1070*   
0488B4             1071*       ; call printInline
0488B4             1072*       ; asciz "\r\nani : "
0488B4             1073*       ; ld a,(ix+sprite_animation)
0488B4             1074*       ; call printHexA
0488B4             1075*   
0488B4             1076*       ; call printInline
0488B4             1077*       ; asciz "\r\nanit: "
0488B4             1078*       ; ld a,(ix+sprite_animation_timer)
0488B4             1079*       ; call printHexA
0488B4             1080*   
0488B4             1081*       ; call printInline
0488B4             1082*       ; asciz "\r\nmvt : "
0488B4             1083*       ; ld a,(ix+sprite_move_timer)
0488B4             1084*       ; call printHexA
0488B4             1085*   
0488B4             1086*       ; call printInline
0488B4             1087*       ; asciz "\r\nmvs : "
0488B4             1088*       ; ld a,(ix+sprite_move_step)
0488B4             1089*       ; call printHexA
0488B4             1090*   
0488B4             1091*       ; call printInline
0488B4             1092*       ; asciz "\r\npts : "
0488B4             1093*       ; ld a,(ix+sprite_points)
0488B4             1094*       ; call printHexA
0488B4             1095*   
0488B4             1096*       ; call printInline
0488B4             1097*       ; asciz "\r\ndmg : "
0488B4             1098*       ; ld a,(ix+sprite_shield_damage)
0488B4             1099*       ; call printHexA
0488B4             1100*   
0488B4             1101*       ; call printInline
0488B4             1102*       ; asciz "\r\nfrm : "
0488B4             1103*       ; ld a,(ix+sprite_frame)
0488B4             1104*       ; call printHexA
0488B4             1105*   
0488B4             1106*       ; call printNewLine
0488B4             1107*       ; call printNewLine
0488B4             1108*   
0488B4             1109*       ; call waitKeypress
0488B4 C9          1110*       ret
0488B5             0080    
0488B5             0081    ; --- MAIN PROGRAM FILE ---
0488B5             0082    main:
0488B5             0083        ; jp main_end ; DEBUG
0488B5             0084    
0488B5             0085    ; start a new game
0488B5 21 E5 71 04 0086        ld hl,game_init
0488B9 22 F3 70 04 0087        ld (game_state),hl
0488BD             0088    main_loop:
0488BD             0089    ; update the global timestamp
0488BD CD DC 11 04 0090        call timestamp_tick
0488C1             0091    ; do gamestate logic
0488C1 CD F6 70 04 0092        call do_game
0488C5             0093    ; wait for the next vblank mitigate flicker and for loop timing
0488C5 CD 14 13 04 0094        call vdu_vblank
0488C9             0095    ; poll keyboard for escape keypress
0488C9 3E 08       0096        ld a, $08 ; code to send to MOS
0488CB 5B CF       0097        rst.lil $08 ; get IX pointer to System Variables
0488CD DD 7E 05    0098        ld a, (ix + $05) ; get ASCII code of key pressed
0488D0 FE 1B       0099        cp 27 ; check if 27 (ascii code for ESC)
0488D2 CA DA 88 04 0100        jp z, main_end ; if pressed, jump to exit
0488D6             0101    ; escape not pressed so loop
0488D6 C3 BD 88 04 0102        jp main_loop
0488DA             0103    
0488DA             0104    main_end:
0488DA             0105    ; restore original screen mode
0488DA 3A E4 71 04 0106        ld a,(original_screen_mode)
0488DE CD 69 13 04 0107        call vdu_set_screen_mode
0488E2             0108    ; print thanks for playing message
0488E2 CD 5C 00 04 0109        call printInline
0488E6 54 68 61 6E 0110        asciz "Thank you for playing\r\n"
       6B 20 79 6F 
       75 20 66 6F 
       72 20 70 6C 
       61 79 69 6E 
       67 0D 0A 00 
0488FE 21 FC 18 04 0111        ld hl,purple_nurples_ascii
048902 CD 63 00 04 0112        call printString
048906 C9          0113        ret
048907             0114    ; end main
048907             0115    
048907             0116    ; needs to be the final include to leave room for the sprite and tile tables
048907             0117        include "tables.inc"
048907             0001*   ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
048907             0002*   table_base: equ $
048907             0003*   player_weapons_begin: equ table_base
048907             0004*   player_lasers_begin: equ player_weapons_begin
048907             0005*   player_lasers_end: equ table_record_size*player_lasers_max+player_lasers_begin
048907             0006*   player_weapons_end: equ table_record_size*player_lasers_max+player_weapons_begin
048907             0007*   player_begin: equ player_weapons_end
048907             0008*   player_end: equ table_record_size+player_begin
048907             0009*   enemy_sprites_begin: equ player_end
048907             0010*   seekers_base: equ enemy_sprites_begin
048907             0011*   seeker_min_sprite_id: equ [seekers_base-table_base]/table_record_size
048907             0012*   seekers_end: equ table_record_size*seekers_max+seekers_base
048907             0013*   fireballs_base: equ seekers_end
048907             0014*   fireballs_end: equ table_record_size*fireballs_max+fireballs_base
048907             0015*   enemy_sprites_end: equ fireballs_end
048907             0016*   explosions_base: equ enemy_sprites_end
048907             0017*   explosions_end: equ table_record_size*explosions_max+explosions_base
048907             0018*   table_end: equ explosions_end
048907             0019*   
048907             0020*   table_num_records: equ table_end-table_base/table_record_size
048907             0021*   table_num_enemy_records: equ enemy_sprites_end-enemy_sprites_begin/table_record_size
048907             0022*   
048907             0023*   ; ### THIS IS THE SPACE ALLOCATED TO THE ACTIVE TILES TABLE ###
048907             0024*   tile_table_base: equ table_end
048907             0025*   tile_table_end: equ 256*tile_table_record_size+tile_table_base
